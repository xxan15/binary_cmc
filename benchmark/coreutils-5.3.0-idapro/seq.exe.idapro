.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 25532B204E76484C12A7A7AAE18B9BACF5973979B8E29E52A833686980DD2374
.text:00401000 ; Input MD5    : BC3DBBF4DE9C4DB9C5573D057BBB8F53
.text:00401000 ; Input CRC32  : 63F0F526
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/seq.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A26F (Wed Apr 20 18:41:51 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004AF0 (  19184.)
.text:00401000 ; Section size in file          : 00004C00 (  19456.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4018E0+62↓p
.text:00401040                                         ; .text:00405780↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_405720
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4056F0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx ; char *
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx ; char
.text:00401165                 call    sub_4018E0
.text:00401165 sub_401080      endp
.text:00401165
.text:00401165 ; ---------------------------------------------------------------------------
.text:0040116A                 db  89h ; ‰
.text:0040116B                 db 0C3h ; Ã
.text:0040116C                 db 0E8h ; è
.text:0040116D                 db 0FFh ; ÿ
.text:0040116E                 db  46h ; F
.text:0040116F                 db    0
.text:00401170                 db    0
.text:00401171                 db  89h ; ‰
.text:00401172                 db  1Ch
.text:00401173                 db  24h ; $
.text:00401174                 db 0E8h ; è
.text:00401175                 db  57h ; W
.text:00401176                 db  49h ; I
.text:00401177                 db    0
.text:00401178                 db    0
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_405720
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 byte_401280     db 0Ah, 0               ; DATA XREF: sub_4018E0+70↓o
.text:00401280                                         ; .data:off_406010↓o
.text:00401282 aEqualWidth     db 'equal-width',0      ; DATA XREF: .text:off_4012C0↓o
.text:0040128E aFormat         db 'format',0           ; DATA XREF: .text:004012D0↓o
.text:00401295 aSeparator      db 'separator',0        ; DATA XREF: .text:004012E0↓o
.text:0040129F aHelp           db 'help',0             ; DATA XREF: .text:004012F0↓o
.text:004012A4 aVersion        db 'version',0          ; DATA XREF: .text:00401300↓o
.text:004012AC                 align 20h
.text:004012C0 off_4012C0      dd offset aEqualWidth   ; DATA XREF: sub_4018E0+D7↓o
.text:004012C0                                         ; "equal-width"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 77h
.text:004012D0                 dd offset aFormat       ; "format"
.text:004012D4                 dd 1, 0
.text:004012DC                 dd 66h
.text:004012E0                 dd offset aSeparator    ; "separator"
.text:004012E4                 dd 1, 0
.text:004012EC                 dd 73h
.text:004012F0                 dd offset aHelp         ; "help"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 0FFFFFF7Eh
.text:00401300                 dd offset aVersion      ; "version"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401320 ; const char Locale
.text:00401320 Locale          db 0                    ; DATA XREF: sub_4018E0+1F↓o
.text:00401321                 align 20h
.text:00401340 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401340                                         ; DATA XREF: sub_4018E0+39↓o
.text:00401363 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4018E0+41↓o
.text:00401363                                         ; sub_4018E0+4E↓o
.text:0040136D ; const char aFSW[]
.text:0040136D aFSW            db '+f:s:w',0           ; DATA XREF: sub_4018E0+DF↓o
.text:00401374                 align 10h
.text:00401380 aFormatStringMa db 'format string may not be specified when printing equal width stri'
.text:00401380                                         ; DATA XREF: sub_4018E0:loc_401B83↓o
.text:00401380                 db 'ngs',0
.text:004013C5                 align 20h
.text:004013E0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004013E0                                         ; DATA XREF: sub_4018E0:loc_401BA8↓o
.text:004013E0                                         ; .text:00401E8C↓o
.text:00401407 ; const char Format[]
.text:00401407 Format          db '%g',0               ; DATA XREF: sub_4018E0+309↓o
.text:00401407                                         ; sub_402090+45↓o ...
.text:0040140A                 align 20h
.text:00401420 aInvalidFloatin db 'invalid floating point argument: %s',0
.text:00401420                                         ; DATA XREF: sub_4018E0:loc_401C90↓o
.text:00401420                                         ; sub_4018E0:loc_401CBE↓o
.text:00401444 aInvalidFormatS db 'invalid format string: `%s',27h,0
.text:00401444                                         ; DATA XREF: sub_4018E0:loc_401CD1↓o
.text:00401460 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_4018E0+410↓o
.text:00401471 aMissingOperand db 'missing operand',0  ; DATA XREF: sub_4018E0:loc_401CFB↓o
.text:00401481                 align 20h
.text:004014A0 aUsageSOptionLa db 'Usage: %s [OPTION]... LAST',0Ah
.text:004014A0                                         ; DATA XREF: sub_4018E0+44E↓o
.text:004014A0                                         ; .text:loc_401EC0↓o
.text:004014A0                 db '  or:  %s [OPTION]... FIRST LAST',0Ah
.text:004014A0                 db '  or:  %s [OPTION]... FIRST INCREMENT LAST',0Ah,0
.text:00401508                 align 20h
.text:00401520 aPrintNumbersFr db 'Print numbers from FIRST to LAST, in steps of INCREMENT.',0Ah
.text:00401520                                         ; DATA XREF: sub_4018E0+475↓o
.text:00401520                                         ; .text:00401EE7↓o
.text:00401520                 db 0Ah
.text:00401520                 db '  -f, --format=FORMAT      use printf style floating-point FORMAT'
.text:00401520                 db ' (default: %g)',0Ah
.text:00401520                 db '  -s, --separator=STRING   use STRING to separate numbers (defaul'
.text:00401520                 db 't: \n)',0Ah
.text:00401520                 db '  -w, --equal-width        equalize width by padding with leading'
.text:00401520                 db ' zeroes',0Ah,0
.text:0040163C                 align 10h
.text:00401640 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401640                                         ; DATA XREF: sub_4018E0+497↓o
.text:00401640                                         ; .text:00401F09↓o
.text:0040166D                 align 20h
.text:00401680 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401680                                         ; DATA XREF: sub_4018E0+4B9↓o
.text:00401680                                         ; .text:00401F2B↓o
.text:004016B6                 align 10h
.text:004016C0 aIfFirstOrIncre db 0Ah                  ; DATA XREF: sub_4018E0+4DB↓o
.text:004016C0                                         ; .text:00401F4D↓o
.text:004016C0                 db 'If FIRST or INCREMENT is omitted, it defaults to 1.  That is, an',0Ah
.text:004016C0                 db 'omitted INCREMENT defaults to 1 even when LAST is smaller than FI'
.text:004016C0                 db 'RST.',0Ah
.text:004016C0                 db 'FIRST, INCREMENT, and LAST are interpreted as floating point valu'
.text:004016C0                 db 'es.',0Ah
.text:004016C0                 db 'INCREMENT is usually positive if FIRST is smaller than LAST, and',0Ah
.text:004016C0                 db 'INCREMENT is usually negative if FIRST is greater than LAST.',0Ah
.text:004016C0                 db 'When given, the FORMAT argument must contain exactly one of',0Ah
.text:004016C0                 db 'the printf-style, floating point output formats %e, %f, %g',0Ah,0
.text:00401883 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4018E0+4FD↓o
.text:00401883                                         ; .text:00401F6F↓o
.text:00401883                 db 'Report bugs to <%s>.',0Ah,0
.text:0040189A aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040189A                                         ; DATA XREF: sub_4018E0+50A↓o
.text:0040189A                                         ; .text:00401F7C↓o
.text:004018B0 aUlrichDrepper  db 'Ulrich Drepper',0   ; DATA XREF: sub_4018E0+52D↓o
.text:004018BF a530            db '5.3.0',0            ; DATA XREF: sub_4018E0+535↓o
.text:004018C5 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4018E0+540↓o
.text:004018D3 ; const FILE aSeq
.text:004018D3 aSeq            db 'seq',0              ; DATA XREF: sub_4018E0+548↓o
.text:004018D7                 db  90h
.text:004018D8 dbl_4018D8      dq 1.0                  ; DATA XREF: sub_4018E0+221↓r
.text:004018E0
.text:004018E0 ; =============== S U B R O U T I N E =======================================
.text:004018E0
.text:004018E0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004018E0
.text:004018E0 ; void __cdecl __noreturn sub_4018E0(char *, char)
.text:004018E0 sub_4018E0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004018E0
.text:004018E0 Category        = dword ptr -68h
.text:004018E0 Locale          = dword ptr -64h
.text:004018E0 var_5C          = byte ptr -5Ch
.text:004018E0 var_58          = byte ptr -58h
.text:004018E0 var_54          = dword ptr -54h
.text:004018E0 var_48          = qword ptr -48h
.text:004018E0 var_38          = qword ptr -38h
.text:004018E0 var_30          = qword ptr -30h
.text:004018E0 var_28          = qword ptr -28h
.text:004018E0 var_20          = qword ptr -20h
.text:004018E0 arg_0           = dword ptr  8
.text:004018E0 arg_4           = dword ptr  0Ch
.text:004018E0
.text:004018E0                 push    ebp
.text:004018E1                 xor     eax, eax
.text:004018E3                 mov     ebp, esp
.text:004018E5                 push    edi
.text:004018E6                 push    esi
.text:004018E7                 push    ebx
.text:004018E8                 sub     esp, 5Ch
.text:004018EB                 xor     ebx, ebx
.text:004018ED                 mov     esi, [ebp+arg_4]
.text:004018F0                 and     esp, 0FFFFFFF0h
.text:004018F3                 call    __alloca
.text:004018F8                 call    sub_4057C0
.text:004018FD                 mov     ecx, [esi]
.text:004018FF                 mov     [esp+68h+Locale], offset Locale ; Locale
.text:00401907                 mov     [esp+68h+Category], 0 ; Category
.text:0040190E                 mov     ds:dword_4072E0, ecx
.text:00401914                 call    setlocale
.text:00401919                 mov     [esp+68h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401921                 mov     [esp+68h+Category], offset aCoreutils ; "coreutils"
.text:00401928                 call    ds:__imp_libintl_bindtextdomain
.text:0040192E                 mov     [esp+68h+Category], offset aCoreutils ; "coreutils"
.text:00401935                 call    ds:libintl_textdomain
.text:0040193B                 mov     [esp+68h+Category], offset sub_403B10 ; void (__cdecl *)()
.text:00401942                 call    sub_401040
.text:00401947                 mov     ds:byte_407100, 0
.text:0040194E                 fld1
.text:00401950                 mov     edx, offset byte_401280
.text:00401955                 mov     ds:Buffer, edx
.text:0040195B                 fstp    ds:dbl_407130
.text:00401961                 call    localeconv
.text:00401966                 mov     edi, [eax]
.text:00401968                 movzx   ecx, byte ptr [edi]
.text:0040196B                 test    cl, cl
.text:0040196D                 mov     ds:byte_407120, cl
.text:00401973                 jz      short loc_40197D
.text:00401975                 mov     edi, [eax]
.text:00401977                 cmp     byte ptr [edi+1], 0
.text:0040197B                 jz      short loc_401984
.text:0040197D
.text:0040197D loc_40197D:                             ; CODE XREF: sub_4018E0+93↑j
.text:0040197D                 mov     ds:byte_407120, 2Eh ; '.'
.text:00401984
.text:00401984 loc_401984:                             ; CODE XREF: sub_4018E0+9B↑j
.text:00401984                 mov     ecx, dword_406020
.text:0040198A                 cmp     ecx, [ebp+arg_0]
.text:0040198D                 mov     eax, ecx
.text:0040198F                 jge     loc_401A14
.text:00401995                 lea     esi, [esi+0]
.text:00401999                 lea     edi, [edi+0]
.text:004019A0
.text:004019A0 loc_4019A0:                             ; CODE XREF: sub_4018E0+132↓j
.text:004019A0                 mov     eax, [esi+eax*4]
.text:004019A3                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004019A6                 jz      loc_401E56
.text:004019AC
.text:004019AC loc_4019AC:                             ; CODE XREF: sub_4018E0+58F↓j
.text:004019AC                 mov     dword ptr [esp+68h+var_58], 0 ; int
.text:004019B4                 mov     edx, [ebp+arg_0]
.text:004019B7                 mov     dword ptr [esp+68h+var_5C], offset off_4012C0 ; int
.text:004019BF                 mov     [esp+68h+Locale+4], offset aFSW ; "+f:s:w"
.text:004019C7                 mov     [esp+68h+Locale], esi ; int
.text:004019CB                 mov     [esp+68h+Category], edx ; int
.text:004019CE                 call    sub_4039A0
.text:004019D3                 cmp     eax, 0FFFFFFFFh
.text:004019D6                 jz      loc_401E4B
.text:004019DC                 cmp     eax, 66h ; 'f'
.text:004019DF                 jz      loc_401E40
.text:004019E5                 cmp     eax, 66h ; 'f'
.text:004019E8                 jle     loc_401D18
.text:004019EE                 cmp     eax, 73h ; 's'
.text:004019F1                 jz      loc_401D07
.text:004019F7                 cmp     eax, 77h ; 'w'
.text:004019FA                 jnz     loc_401BA8
.text:00401A00                 mov     ds:byte_407100, 1
.text:00401A07
.text:00401A07 loc_401A07:                             ; CODE XREF: sub_4018E0+433↓j
.text:00401A07                                         ; sub_4018E0+566↓j
.text:00401A07                 mov     ecx, dword_406020
.text:00401A0D                 cmp     ecx, [ebp+arg_0]
.text:00401A10                 mov     eax, ecx
.text:00401A12                 jl      short loc_4019A0
.text:00401A14
.text:00401A14 loc_401A14:                             ; CODE XREF: sub_4018E0+AF↑j
.text:00401A14                                         ; sub_4018E0+571↓j ...
.text:00401A14                 mov     eax, [ebp+arg_0]
.text:00401A17                 sub     eax, ecx
.text:00401A19                 test    eax, eax
.text:00401A1B                 jle     loc_401CFB
.text:00401A21                 cmp     eax, 3
.text:00401A24                 jg      loc_401CE4
.text:00401A2A                 test    ebx, ebx
.text:00401A2C                 jz      short loc_401A44
.text:00401A2E                 mov     [esp+68h+Category], ebx
.text:00401A31                 call    sub_401FB0
.text:00401A36                 test    al, al
.text:00401A38                 jz      loc_401CD1
.text:00401A3E                 mov     ecx, dword_406020
.text:00401A44
.text:00401A44 loc_401A44:                             ; CODE XREF: sub_4018E0+14C↑j
.text:00401A44                 mov     edi, [esi+ecx*4]
.text:00401A47                 inc     ecx
.text:00401A48                 mov     dword_406020, ecx
.text:00401A4E                 lea     ecx, [ebp+var_20]
.text:00401A51                 mov     dword ptr [esp+68h+var_5C], offset sub_403C00 ; char
.text:00401A59                 mov     [esp+68h+Locale+4], ecx
.text:00401A5D                 mov     [esp+68h+Locale], 0
.text:00401A65                 mov     [esp+68h+Category], edi
.text:00401A68                 call    sub_403C80
.text:00401A6D                 test    al, al
.text:00401A6F                 jz      loc_401CBE
.text:00401A75                 fld     [ebp+var_20]
.text:00401A78                 mov     eax, dword_406020
.text:00401A7D                 cmp     eax, [ebp+arg_0]
.text:00401A80                 fst     ds:dbl_407140
.text:00401A86                 jl      loc_401C00
.text:00401A8C
.text:00401A8C loc_401A8C:                             ; CODE XREF: sub_4018E0+36A↓j
.text:00401A8C                 fstp    st
.text:00401A8E
.text:00401A8E loc_401A8E:                             ; CODE XREF: sub_4018E0+3AB↓j
.text:00401A8E                 test    ebx, ebx
.text:00401A90                 jz      loc_401BE0
.text:00401A96                 cmp     ds:byte_407100, 0
.text:00401A9D                 jnz     loc_401B83
.text:00401AA3
.text:00401AA3 loc_401AA3:                             ; CODE XREF: sub_4018E0+30E↓j
.text:00401AA3                                         ; sub_4018E0+31A↓j
.text:00401AA3                 fldz
.text:00401AA5                 fld     st
.text:00401AA7                 mov     esi, esi
.text:00401AA9                 lea     edi, [edi+0]
.text:00401AB0
.text:00401AB0 loc_401AB0:                             ; CODE XREF: sub_4018E0+227↓j
.text:00401AB0                 fstp    [ebp+var_38]
.text:00401AB3                 fld     dbl_406018
.text:00401AB9                 fld     [ebp+var_38]
.text:00401ABC                 fxch    st(2)
.text:00401ABE                 fucom   st(1)
.text:00401AC0                 fnstsw  ax
.text:00401AC2                 fxch    st(2)
.text:00401AC4                 fmulp   st(1), st
.text:00401AC6                 sahf
.text:00401AC7                 fadd    ds:dbl_407130
.text:00401ACD                 jbe     loc_401B70
.text:00401AD3                 fld     ds:dbl_407140
.text:00401AD9                 fucomp  st(1)
.text:00401ADB                 fnstsw  ax
.text:00401ADD
.text:00401ADD loc_401ADD:                             ; CODE XREF: sub_4018E0+29E↓j
.text:00401ADD                 sahf
.text:00401ADE                 ja      short loc_401B33
.text:00401AE0                 fld     [ebp+var_38]
.text:00401AE3                 fucomp  st(2)
.text:00401AE5                 fnstsw  ax
.text:00401AE7                 fstp    st(1)
.text:00401AE9                 sahf
.text:00401AEA                 jp      short loc_401B10
.text:00401AEC                 jnz     short loc_401B10
.text:00401AEE
.text:00401AEE loc_401AEE:                             ; CODE XREF: sub_4018E0+251↓j
.text:00401AEE                 fstp    qword ptr [esp+68h+Locale]
.text:00401AF2                 mov     [esp+68h+Category], ebx ; Format
.text:00401AF5                 call    printf
.text:00401AFA                 fld     [ebp+var_38]
.text:00401AFD                 fldz
.text:00401AFF                 fxch    st(1)
.text:00401B01                 fadd    ds:dbl_4018D8
.text:00401B07                 jmp     short loc_401AB0
.text:00401B07 ; ---------------------------------------------------------------------------
.text:00401B09                 align 10h
.text:00401B10
.text:00401B10 loc_401B10:                             ; CODE XREF: sub_4018E0+20A↑j
.text:00401B10                                         ; sub_4018E0+20C↑j
.text:00401B10                 fstp    [ebp+var_48]
.text:00401B13                 mov     ecx, ds:_iob
.text:00401B19                 mov     esi, ds:Buffer
.text:00401B1F                 add     ecx, 20h ; ' '
.text:00401B22                 mov     [esp+68h+Locale], ecx ; Stream
.text:00401B26                 mov     [esp+68h+Category], esi ; Buffer
.text:00401B29                 call    fputs
.text:00401B2E                 fld     [ebp+var_48]
.text:00401B31                 jmp     short loc_401AEE
.text:00401B33 ; ---------------------------------------------------------------------------
.text:00401B33
.text:00401B33 loc_401B33:                             ; CODE XREF: sub_4018E0+1FE↑j
.text:00401B33                 fstp    st
.text:00401B35                 fld     [ebp+var_38]
.text:00401B38                 fucompp
.text:00401B3A                 fnstsw  ax
.text:00401B3C                 sahf
.text:00401B3D                 jp      short loc_401B4D
.text:00401B3F                 jnz     short loc_401B4D
.text:00401B41
.text:00401B41 loc_401B41:                             ; CODE XREF: sub_4018E0+288↓j
.text:00401B41                                         ; sub_4018E0+51A↓j ...
.text:00401B41                 mov     [esp+68h+Category], 0 ; Code
.text:00401B48
.text:00401B48 loc_401B48:                             ; CODE XREF: sub_4018E0+2FB↓j
.text:00401B48                 call    exit
.text:00401B4D ; ---------------------------------------------------------------------------
.text:00401B4D
.text:00401B4D loc_401B4D:                             ; CODE XREF: sub_4018E0+25D↑j
.text:00401B4D                                         ; sub_4018E0+25F↑j
.text:00401B4D                 mov     edx, ds:_iob
.text:00401B53                 mov     ebx, off_406010
.text:00401B59                 add     edx, 20h ; ' '
.text:00401B5C                 mov     [esp+68h+Locale], edx ; Stream
.text:00401B60                 mov     [esp+68h+Category], ebx ; Buffer
.text:00401B63                 call    fputs
.text:00401B68                 jmp     short loc_401B41
.text:00401B68 ; ---------------------------------------------------------------------------
.text:00401B6A                 align 10h
.text:00401B70
.text:00401B70 loc_401B70:                             ; CODE XREF: sub_4018E0+1ED↑j
.text:00401B70                 fld     ds:dbl_407140
.text:00401B76                 fxch    st(1)
.text:00401B78                 fucom   st(1)
.text:00401B7A                 fnstsw  ax
.text:00401B7C                 fstp    st(1)
.text:00401B7E                 jmp     loc_401ADD
.text:00401B83 ; ---------------------------------------------------------------------------
.text:00401B83
.text:00401B83 loc_401B83:                             ; CODE XREF: sub_4018E0+1BD↑j
.text:00401B83                 mov     [esp+68h+Category], offset aFormatStringMa ; "format string may not be specified when"...
.text:00401B8A
.text:00401B8A loc_401B8A:                             ; CODE XREF: sub_4018E0+422↓j
.text:00401B8A                 call    ds:libintl_gettext
.text:00401B90                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401B98                 mov     [esp+68h+Category], 0 ; Code
.text:00401B9F                 mov     [esp+68h+Locale+4], eax ; char *
.text:00401BA3                 call    sub_405440
.text:00401BA8
.text:00401BA8 loc_401BA8:                             ; CODE XREF: sub_4018E0+11A↑j
.text:00401BA8                                         ; sub_4018E0+3D9↓j ...
.text:00401BA8                 mov     [esp+68h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401BAF                 call    ds:libintl_gettext
.text:00401BB5                 mov     esi, ds:_iob
.text:00401BBB                 mov     edi, ds:dword_4072E0
.text:00401BC1                 add     esi, 40h ; '@'
.text:00401BC4                 mov     [esp+68h+Locale+4], edi
.text:00401BC8                 mov     [esp+68h+Locale], eax ; Format
.text:00401BCC                 mov     [esp+68h+Category], esi ; Stream
.text:00401BCF                 call    fprintf
.text:00401BD4                 mov     [esp+68h+Category], 1
.text:00401BDB                 jmp     loc_401B48
.text:00401BE0 ; ---------------------------------------------------------------------------
.text:00401BE0
.text:00401BE0 loc_401BE0:                             ; CODE XREF: sub_4018E0+1B0↑j
.text:00401BE0                 cmp     ds:byte_407100, 0
.text:00401BE7                 jnz     short loc_401BF3
.text:00401BE9                 mov     ebx, offset Format ; "%g"
.text:00401BEE                 jmp     loc_401AA3
.text:00401BF3 ; ---------------------------------------------------------------------------
.text:00401BF3
.text:00401BF3 loc_401BF3:                             ; CODE XREF: sub_4018E0+307↑j
.text:00401BF3                 call    sub_402090
.text:00401BF8                 mov     ebx, eax
.text:00401BFA                 jmp     loc_401AA3
.text:00401BFA ; ---------------------------------------------------------------------------
.text:00401BFF                 align 10h
.text:00401C00
.text:00401C00 loc_401C00:                             ; CODE XREF: sub_4018E0+1A6↑j
.text:00401C00                 fstp    ds:dbl_407130
.text:00401C06                 mov     edi, [esi+eax*4]
.text:00401C09                 lea     edx, [eax+1]
.text:00401C0C                 mov     dword_406020, edx
.text:00401C12                 lea     edx, [ebp+var_28]
.text:00401C15                 mov     dword ptr [esp+68h+var_5C], offset sub_403C00
.text:00401C1D                 mov     [esp+68h+Locale+4], edx
.text:00401C21                 mov     [esp+68h+Locale], 0
.text:00401C29                 mov     [esp+68h+Category], edi
.text:00401C2C                 call    sub_403C80
.text:00401C31                 test    al, al
.text:00401C33                 jz      loc_401CBE
.text:00401C39                 fld     [ebp+var_28]
.text:00401C3C                 mov     eax, dword_406020
.text:00401C41                 cmp     eax, [ebp+arg_0]
.text:00401C44                 fst     ds:dbl_407140
.text:00401C4A                 jge     loc_401A8C
.text:00401C50                 fstp    dbl_406018
.text:00401C56                 mov     esi, [esi+eax*4]
.text:00401C59                 inc     eax
.text:00401C5A                 mov     dword_406020, eax
.text:00401C5F                 lea     edi, [ebp+var_30]
.text:00401C62                 mov     dword ptr [esp+68h+var_5C], offset sub_403C00
.text:00401C6A                 mov     [esp+68h+Locale+4], edi
.text:00401C6E                 mov     [esp+68h+Locale], 0
.text:00401C76                 mov     [esp+68h+Category], esi
.text:00401C79                 call    sub_403C80
.text:00401C7E                 test    al, al
.text:00401C80                 jz      short loc_401C90
.text:00401C82                 fld     [ebp+var_30]
.text:00401C85                 fstp    ds:dbl_407140
.text:00401C8B                 jmp     loc_401A8E
.text:00401C90 ; ---------------------------------------------------------------------------
.text:00401C90
.text:00401C90 loc_401C90:                             ; CODE XREF: sub_4018E0+3A0↑j
.text:00401C90                 mov     [esp+68h+Category], offset aInvalidFloatin ; "invalid floating point argument: %s"
.text:00401C97                 call    ds:libintl_gettext
.text:00401C9D                 mov     dword ptr [esp+68h+var_5C], esi ; char
.text:00401CA1
.text:00401CA1 loc_401CA1:                             ; CODE XREF: sub_4018E0+3EF↓j
.text:00401CA1                                         ; sub_4018E0+402↓j
.text:00401CA1                 mov     [esp+68h+Locale+4], eax ; char *
.text:00401CA5                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401CAD                 mov     [esp+68h+Category], 0 ; Code
.text:00401CB4                 call    sub_405440
.text:00401CB9                 jmp     loc_401BA8
.text:00401CBE ; ---------------------------------------------------------------------------
.text:00401CBE
.text:00401CBE loc_401CBE:                             ; CODE XREF: sub_4018E0+18F↑j
.text:00401CBE                                         ; sub_4018E0+353↑j
.text:00401CBE                 mov     [esp+68h+Category], offset aInvalidFloatin ; "invalid floating point argument: %s"
.text:00401CC5                 call    ds:libintl_gettext
.text:00401CCB                 mov     dword ptr [esp+68h+var_5C], edi
.text:00401CCF                 jmp     short loc_401CA1
.text:00401CD1 ; ---------------------------------------------------------------------------
.text:00401CD1
.text:00401CD1 loc_401CD1:                             ; CODE XREF: sub_4018E0+158↑j
.text:00401CD1                 mov     [esp+68h+Category], offset aInvalidFormatS ; "invalid format string: `%s'"
.text:00401CD8
.text:00401CD8 loc_401CD8:                             ; CODE XREF: sub_4018E0+419↓j
.text:00401CD8                 call    ds:libintl_gettext
.text:00401CDE                 mov     dword ptr [esp+68h+var_5C], ebx
.text:00401CE2                 jmp     short loc_401CA1
.text:00401CE4 ; ---------------------------------------------------------------------------
.text:00401CE4
.text:00401CE4 loc_401CE4:                             ; CODE XREF: sub_4018E0+144↑j
.text:00401CE4                 mov     ebx, [esi+ecx*4+0Ch]
.text:00401CE8                 mov     [esp+68h+Category], ebx ; char *
.text:00401CEB                 call    sub_403470
.text:00401CF0                 mov     [esp+68h+Category], offset aExtraOperandS ; "extra operand %s"
.text:00401CF7                 mov     ebx, eax
.text:00401CF9                 jmp     short loc_401CD8
.text:00401CFB ; ---------------------------------------------------------------------------
.text:00401CFB
.text:00401CFB loc_401CFB:                             ; CODE XREF: sub_4018E0+13B↑j
.text:00401CFB                 mov     [esp+68h+Category], offset aMissingOperand ; "missing operand"
.text:00401D02                 jmp     loc_401B8A
.text:00401D07 ; ---------------------------------------------------------------------------
.text:00401D07
.text:00401D07 loc_401D07:                             ; CODE XREF: sub_4018E0+111↑j
.text:00401D07                 mov     ecx, ds:dword_407300
.text:00401D0D                 mov     ds:Buffer, ecx
.text:00401D13                 jmp     loc_401A07
.text:00401D18 ; ---------------------------------------------------------------------------
.text:00401D18
.text:00401D18 loc_401D18:                             ; CODE XREF: sub_4018E0+108↑j
.text:00401D18                 cmp     eax, 0FFFFFF7Dh
.text:00401D1D                 jz      loc_401DFF
.text:00401D23                 cmp     eax, 0FFFFFF7Eh
.text:00401D28                 jnz     loc_401BA8
.text:00401D2E                 mov     [esp+68h+Category], offset aUsageSOptionLa ; "Usage: %s [OPTION]... LAST\n  or:  %s ["...
.text:00401D35                 call    ds:libintl_gettext
.text:00401D3B                 mov     ebx, ds:dword_4072E0
.text:00401D41                 mov     [esp+68h+Category], eax ; Format
.text:00401D44                 mov     dword ptr [esp+68h+var_5C], ebx
.text:00401D48                 mov     [esp+68h+Locale+4], ebx
.text:00401D4C                 mov     [esp+68h+Locale], ebx
.text:00401D50                 call    printf
.text:00401D55                 mov     [esp+68h+Category], offset aPrintNumbersFr ; "Print numbers from FIRST to LAST, in st"...
.text:00401D5C                 call    ds:libintl_gettext
.text:00401D62                 mov     ecx, ds:_iob
.text:00401D68                 add     ecx, 20h ; ' '
.text:00401D6B                 mov     [esp+68h+Locale], ecx ; Stream
.text:00401D6F                 mov     [esp+68h+Category], eax ; Buffer
.text:00401D72                 call    fputs
.text:00401D77                 mov     [esp+68h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401D7E                 call    ds:libintl_gettext
.text:00401D84                 mov     edi, ds:_iob
.text:00401D8A                 add     edi, 20h ; ' '
.text:00401D8D                 mov     [esp+68h+Locale], edi ; Stream
.text:00401D91                 mov     [esp+68h+Category], eax ; Buffer
.text:00401D94                 call    fputs
.text:00401D99                 mov     [esp+68h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401DA0                 call    ds:libintl_gettext
.text:00401DA6                 mov     esi, ds:_iob
.text:00401DAC                 add     esi, 20h ; ' '
.text:00401DAF                 mov     [esp+68h+Locale], esi ; Stream
.text:00401DB3                 mov     [esp+68h+Category], eax ; Buffer
.text:00401DB6                 call    fputs
.text:00401DBB                 mov     [esp+68h+Category], offset aIfFirstOrIncre ; "\nIf FIRST or INCREMENT is omitted, it "...
.text:00401DC2                 call    ds:libintl_gettext
.text:00401DC8                 mov     ebx, ds:_iob
.text:00401DCE                 add     ebx, 20h ; ' '
.text:00401DD1                 mov     [esp+68h+Locale], ebx ; Stream
.text:00401DD5                 mov     [esp+68h+Category], eax ; Buffer
.text:00401DD8                 call    fputs
.text:00401DDD                 mov     [esp+68h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401DE4                 call    ds:libintl_gettext
.text:00401DEA                 mov     [esp+68h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401DF2                 mov     [esp+68h+Category], eax ; Format
.text:00401DF5                 call    printf
.text:00401DFA                 jmp     loc_401B41
.text:00401DFF ; ---------------------------------------------------------------------------
.text:00401DFF
.text:00401DFF loc_401DFF:                             ; CODE XREF: sub_4018E0+43D↑j
.text:00401DFF                 mov     [esp+68h+var_54], 0
.text:00401E07                 mov     edx, ds:_iob
.text:00401E0D                 mov     dword ptr [esp+68h+var_58], offset aUlrichDrepper ; "Ulrich Drepper"
.text:00401E15                 mov     dword ptr [esp+68h+var_5C], offset a530 ; "5.3.0"
.text:00401E1D                 add     edx, 20h ; ' '
.text:00401E20                 mov     [esp+68h+Locale+4], offset aGnuCoreutils ; "GNU coreutils"
.text:00401E28                 mov     [esp+68h+Locale], offset aSeq ; FILE *
.text:00401E30                 mov     [esp+68h+Category], edx ; FILE *
.text:00401E33                 call    sub_403960
.text:00401E38                 jmp     loc_401B41
.text:00401E38 ; ---------------------------------------------------------------------------
.text:00401E3D                 align 10h
.text:00401E40
.text:00401E40 loc_401E40:                             ; CODE XREF: sub_4018E0+FF↑j
.text:00401E40                 mov     ebx, ds:dword_407300
.text:00401E46                 jmp     loc_401A07
.text:00401E4B ; ---------------------------------------------------------------------------
.text:00401E4B
.text:00401E4B loc_401E4B:                             ; CODE XREF: sub_4018E0+F6↑j
.text:00401E4B                 mov     ecx, dword_406020
.text:00401E51                 jmp     loc_401A14
.text:00401E56 ; ---------------------------------------------------------------------------
.text:00401E56
.text:00401E56 loc_401E56:                             ; CODE XREF: sub_4018E0+C6↑j
.text:00401E56                 movsx   edx, byte ptr [eax+1]
.text:00401E5A                 movsx   edi, ds:byte_407120
.text:00401E61                 cmp     edx, edi
.text:00401E63                 jz      loc_401A14
.text:00401E69                 lea     edi, [edx-30h]
.text:00401E6C                 cmp     edi, 9
.text:00401E6F                 ja      loc_4019AC
.text:00401E75                 jmp     loc_401A14
.text:00401E75 sub_4018E0      endp
.text:00401E75
.text:00401E75 ; ---------------------------------------------------------------------------
.text:00401E7A                 align 10h
.text:00401E80                 push    ebx
.text:00401E81                 sub     esp, 18h
.text:00401E84                 mov     ebx, [esp+20h]
.text:00401E88                 test    ebx, ebx
.text:00401E8A                 jz      short loc_401EC0
.text:00401E8C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401E93                 call    ds:libintl_gettext
.text:00401E99                 mov     edx, ds:_iob
.text:00401E9F                 mov     ecx, ds:dword_4072E0
.text:00401EA5                 add     edx, 40h ; '@'
.text:00401EA8                 mov     [esp+8], ecx
.text:00401EAC                 mov     [esp+4], eax
.text:00401EB0                 mov     [esp], edx
.text:00401EB3                 call    fprintf
.text:00401EB8
.text:00401EB8 loc_401EB8:                             ; CODE XREF: .text:00401F8C↓j
.text:00401EB8                 mov     [esp], ebx
.text:00401EBB                 call    exit
.text:00401EC0 ; ---------------------------------------------------------------------------
.text:00401EC0
.text:00401EC0 loc_401EC0:                             ; CODE XREF: .text:00401E8A↑j
.text:00401EC0                 mov     dword ptr [esp], offset aUsageSOptionLa ; "Usage: %s [OPTION]... LAST\n  or:  %s ["...
.text:00401EC7                 call    ds:libintl_gettext
.text:00401ECD                 mov     ecx, ds:dword_4072E0
.text:00401ED3                 mov     [esp], eax
.text:00401ED6                 mov     [esp+0Ch], ecx
.text:00401EDA                 mov     [esp+8], ecx
.text:00401EDE                 mov     [esp+4], ecx
.text:00401EE2                 call    printf
.text:00401EE7                 mov     dword ptr [esp], offset aPrintNumbersFr ; "Print numbers from FIRST to LAST, in st"...
.text:00401EEE                 call    ds:libintl_gettext
.text:00401EF4                 mov     ecx, ds:_iob
.text:00401EFA                 add     ecx, 20h ; ' '
.text:00401EFD                 mov     [esp+4], ecx
.text:00401F01                 mov     [esp], eax
.text:00401F04                 call    fputs
.text:00401F09                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401F10                 call    ds:libintl_gettext
.text:00401F16                 mov     ecx, ds:_iob
.text:00401F1C                 add     ecx, 20h ; ' '
.text:00401F1F                 mov     [esp+4], ecx
.text:00401F23                 mov     [esp], eax
.text:00401F26                 call    fputs
.text:00401F2B                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401F32                 call    ds:libintl_gettext
.text:00401F38                 mov     ecx, ds:_iob
.text:00401F3E                 add     ecx, 20h ; ' '
.text:00401F41                 mov     [esp+4], ecx
.text:00401F45                 mov     [esp], eax
.text:00401F48                 call    fputs
.text:00401F4D                 mov     dword ptr [esp], offset aIfFirstOrIncre ; "\nIf FIRST or INCREMENT is omitted, it "...
.text:00401F54                 call    ds:libintl_gettext
.text:00401F5A                 mov     ecx, ds:_iob
.text:00401F60                 add     ecx, 20h ; ' '
.text:00401F63                 mov     [esp+4], ecx
.text:00401F67                 mov     [esp], eax
.text:00401F6A                 call    fputs
.text:00401F6F                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401F76                 call    ds:libintl_gettext
.text:00401F7C                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401F84                 mov     [esp], eax
.text:00401F87                 call    printf
.text:00401F8C                 jmp     loc_401EB8
.text:00401F8C ; ---------------------------------------------------------------------------
.text:00401F91 ; const char Control[]
.text:00401F91 Control         db '-+#0 ',27h,0        ; DATA XREF: sub_401FB0+34↓o
.text:00401F98 ; const char a0123456789[]
.text:00401F98 a0123456789     db '0123456789',0       ; DATA XREF: sub_401FB0+89↓o
.text:00401F98                                         ; sub_401FB0+A0↓o ...
.text:00401FA3                 align 10h
.text:00401FB0
.text:00401FB0 ; =============== S U B R O U T I N E =======================================
.text:00401FB0
.text:00401FB0
.text:00401FB0 sub_401FB0      proc near               ; CODE XREF: sub_4018E0+151↑p
.text:00401FB0
.text:00401FB0 Str             = dword ptr -0Ch
.text:00401FB0 Control         = dword ptr -8
.text:00401FB0 arg_0           = dword ptr  4
.text:00401FB0
.text:00401FB0                 push    ebx
.text:00401FB1                 sub     esp, 8
.text:00401FB4                 mov     ebx, [esp+0Ch+arg_0]
.text:00401FB8                 movzx   edx, byte ptr [ebx]
.text:00401FBB                 test    dl, dl
.text:00401FBD                 jz      short loc_401FCD
.text:00401FBF                 nop
.text:00401FC0
.text:00401FC0 loc_401FC0:                             ; CODE XREF: sub_401FB0+1B↓j
.text:00401FC0                 cmp     dl, 25h ; '%'
.text:00401FC3                 jz      short loc_401FD4
.text:00401FC5
.text:00401FC5 loc_401FC5:                             ; CODE XREF: sub_401FB0+2B↓j
.text:00401FC5                 inc     ebx
.text:00401FC6                 movzx   edx, byte ptr [ebx]
.text:00401FC9                 test    dl, dl
.text:00401FCB                 jnz     short loc_401FC0
.text:00401FCD
.text:00401FCD loc_401FCD:                             ; CODE XREF: sub_401FB0+D↑j
.text:00401FCD                                         ; sub_401FB0+2F↓j ...
.text:00401FCD                 xor     eax, eax
.text:00401FCF
.text:00401FCF loc_401FCF:                             ; CODE XREF: sub_401FB0+5E↓j
.text:00401FCF                                         ; sub_401FB0+7C↓j
.text:00401FCF                 add     esp, 8
.text:00401FD2                 pop     ebx
.text:00401FD3                 retn
.text:00401FD4 ; ---------------------------------------------------------------------------
.text:00401FD4
.text:00401FD4 loc_401FD4:                             ; CODE XREF: sub_401FB0+13↑j
.text:00401FD4                 inc     ebx
.text:00401FD5                 movzx   edx, byte ptr [ebx]
.text:00401FD8                 cmp     dl, 25h ; '%'
.text:00401FDB                 jz      short loc_401FC5
.text:00401FDD                 test    dl, dl
.text:00401FDF                 jz      short loc_401FCD
.text:00401FE1                 mov     [esp+0Ch+Str], ebx ; Str
.text:00401FE4                 mov     [esp+0Ch+Control], offset Control ; "-+#0 '"
.text:00401FEC                 call    strspn
.text:00401FF1                 add     ebx, eax
.text:00401FF3                 movzx   edx, byte ptr [ebx]
.text:00401FF6                 movsx   ecx, dl
.text:00401FF9                 sub     ecx, 30h ; '0'
.text:00401FFC                 cmp     ecx, 9
.text:00401FFF                 jbe     short loc_402036
.text:00402001                 cmp     dl, 2Eh ; '.'
.text:00402004                 jz      short loc_402036
.text:00402006
.text:00402006 loc_402006:                             ; CODE XREF: sub_401FB0+9E↓j
.text:00402006                                         ; sub_401FB0+B6↓j
.text:00402006                 sub     dl, 65h ; 'e'
.text:00402009                 xor     eax, eax
.text:0040200B                 cmp     dl, 2
.text:0040200E                 ja      short loc_401FCF
.text:00402010                 inc     ebx
.text:00402011                 movzx   edx, byte ptr [ebx]
.text:00402014                 test    dl, dl
.text:00402016                 jz      short loc_402027
.text:00402018
.text:00402018 loc_402018:                             ; CODE XREF: sub_401FB0+75↓j
.text:00402018                 cmp     dl, 25h ; '%'
.text:0040201B                 jz      short loc_40202E
.text:0040201D
.text:0040201D loc_40201D:                             ; CODE XREF: sub_401FB0+82↓j
.text:0040201D                 inc     ebx
.text:0040201E                 movzx   ecx, byte ptr [ebx]
.text:00402021                 test    cl, cl
.text:00402023                 mov     dl, cl
.text:00402025                 jnz     short loc_402018
.text:00402027
.text:00402027 loc_402027:                             ; CODE XREF: sub_401FB0+66↑j
.text:00402027                 mov     eax, 1
.text:0040202C                 jmp     short loc_401FCF
.text:0040202E ; ---------------------------------------------------------------------------
.text:0040202E
.text:0040202E loc_40202E:                             ; CODE XREF: sub_401FB0+6B↑j
.text:0040202E                 inc     ebx
.text:0040202F                 cmp     byte ptr [ebx], 25h ; '%'
.text:00402032                 jz      short loc_40201D
.text:00402034                 jmp     short loc_401FCD
.text:00402036 ; ---------------------------------------------------------------------------
.text:00402036
.text:00402036 loc_402036:                             ; CODE XREF: sub_401FB0+4F↑j
.text:00402036                                         ; sub_401FB0+54↑j
.text:00402036                 mov     [esp+0Ch+Str], ebx ; Str
.text:00402039                 mov     [esp+0Ch+Control], offset a0123456789 ; "0123456789"
.text:00402041                 call    strspn
.text:00402046                 add     ebx, eax
.text:00402048                 movzx   edx, byte ptr [ebx]
.text:0040204B                 cmp     dl, 2Eh ; '.'
.text:0040204E                 jnz     short loc_402006
.text:00402050                 mov     [esp+0Ch+Control], offset a0123456789 ; "0123456789"
.text:00402058                 inc     ebx
.text:00402059                 mov     [esp+0Ch+Str], ebx ; Str
.text:0040205C                 call    strspn
.text:00402061                 add     ebx, eax
.text:00402063                 movzx   edx, byte ptr [ebx]
.text:00402066                 jmp     short loc_402006
.text:00402066 sub_401FB0      endp
.text:00402066
.text:00402066 ; ---------------------------------------------------------------------------
.text:00402068 ; const char a0123456789_0[]
.text:00402068 a0123456789_0   db '-0123456789',0      ; DATA XREF: sub_402090+5D↓o
.text:00402068                                         ; sub_402090+EF↓o
.text:00402074 ; const char a0DDf[]
.text:00402074 a0DDf           db '%%0%d.%df',0        ; DATA XREF: sub_402090+315↓o
.text:0040207E ; const char a0Dg[]
.text:0040207E a0Dg            db '%%0%dg',0           ; DATA XREF: sub_402090+337↓o
.text:00402085                 align 4
.text:00402088 dbl_402088      dq 1.0                  ; DATA XREF: sub_402090+18A↓r
.text:00402088                                         ; sub_402090+254↓r
.text:00402090
.text:00402090 ; =============== S U B R O U T I N E =======================================
.text:00402090
.text:00402090
.text:00402090 sub_402090      proc near               ; CODE XREF: sub_4018E0:loc_401BF3↑p
.text:00402090
.text:00402090 X               = qword ptr -3Ch
.text:00402090 Y               = dword ptr -34h
.text:00402090 var_24          = qword ptr -24h
.text:00402090 var_1C          = qword ptr -1Ch
.text:00402090 var_14          = qword ptr -14h
.text:00402090
.text:00402090                 push    edi
.text:00402091                 push    esi
.text:00402092                 push    ebx
.text:00402093                 sub     esp, 30h
.text:00402096                 fld     ds:dbl_407130
.text:0040209C                 fld     ds:dbl_407140
.text:004020A2                 fxch    st(1)
.text:004020A4                 fucom   st(1)
.text:004020A6                 fnstsw  ax
.text:004020A8                 sahf
.text:004020A9                 jbe     loc_4023F0
.text:004020AF                 fsubrp  st(1), st
.text:004020B1                 fdiv    dbl_406018
.text:004020B7                 fstp    [esp+3Ch+X]     ; X
.text:004020BA                 call    floor
.text:004020BF                 fmul    dbl_406018
.text:004020C5                 fld     ds:dbl_407130
.text:004020CB                 fsubr   st(1), st
.text:004020CD                 fxch    st(1)
.text:004020CF                 fstp    [esp+3Ch+var_1C]
.text:004020D3
.text:004020D3 loc_4020D3:                             ; CODE XREF: sub_402090+380↓j
.text:004020D3                 frndint
.text:004020D5                 mov     dword ptr [esp+3Ch+X+4], offset Format ; "%g"
.text:004020DD                 fstp    qword ptr [esp+3Ch+Y]
.text:004020E1                 mov     dword ptr [esp+3Ch+X], offset Str ; Buffer
.text:004020E8                 call    sprintf
.text:004020ED                 mov     dword ptr [esp+3Ch+X+4], offset a0123456789_0 ; "-0123456789"
.text:004020F5                 mov     dword ptr [esp+3Ch+X], offset Str ; Str
.text:004020FC                 call    strspn
.text:00402101                 cmp     ds:Str[eax], 0
.text:00402108                 jnz     loc_402290
.text:0040210E                 mov     ebx, offset Str
.text:00402113                 lea     esi, [esi+0]
.text:00402119                 lea     edi, [edi+0]
.text:00402120
.text:00402120 loc_402120:                             ; CODE XREF: sub_402090+A5↓j
.text:00402120                 mov     ecx, [ebx]
.text:00402122                 add     ebx, 4
.text:00402125                 lea     edx, [ecx-1010101h]
.text:0040212B                 not     ecx
.text:0040212D                 and     edx, ecx
.text:0040212F                 and     edx, 80808080h
.text:00402135                 jz      short loc_402120
.text:00402137                 test    edx, 8080h
.text:0040213D                 jnz     short loc_402145
.text:0040213F                 shr     edx, 10h
.text:00402142                 add     ebx, 2
.text:00402145
.text:00402145 loc_402145:                             ; CODE XREF: sub_402090+AD↑j
.text:00402145                 fld     [esp+3Ch+var_1C]
.text:00402149                 add     dl, dl
.text:0040214B                 fldz
.text:0040214D                 sbb     ebx, 3
.text:00402150                 sub     ebx, offset Str
.text:00402156                 fucomp  st(1)
.text:00402158                 fnstsw  ax
.text:0040215A                 sahf
.text:0040215B                 jbe     loc_4023E8
.text:00402161                 mov     dword ptr [esp+3Ch+X+4], offset Format ; "%g"
.text:00402169                 mov     dword ptr [esp+3Ch+X], offset Str ; Buffer
.text:00402170                 frndint
.text:00402172                 fst     [esp+3Ch+var_24]
.text:00402176                 fstp    qword ptr [esp+3Ch+Y]
.text:0040217A                 call    sprintf
.text:0040217F                 mov     dword ptr [esp+3Ch+X+4], offset a0123456789_0 ; "-0123456789"
.text:00402187                 mov     dword ptr [esp+3Ch+X], offset Str ; Str
.text:0040218E                 call    strspn
.text:00402193                 cmp     ds:Str[eax], 0
.text:0040219A                 jnz     loc_402290
.text:004021A0                 fld     [esp+3Ch+var_24]
.text:004021A4                 mov     esi, 2
.text:004021A9                 fldz
.text:004021AB                 fxch    st(1)
.text:004021AD                 fucompp
.text:004021AF                 fnstsw  ax
.text:004021B1                 sahf
.text:004021B2                 jp      short loc_4021B6
.text:004021B4                 jz      short loc_4021F0
.text:004021B6
.text:004021B6 loc_4021B6:                             ; CODE XREF: sub_402090+122↑j
.text:004021B6                 mov     esi, offset Str
.text:004021BB                 nop
.text:004021BC                 lea     esi, [esi+0]
.text:004021C0
.text:004021C0 loc_4021C0:                             ; CODE XREF: sub_402090+145↓j
.text:004021C0                 mov     ecx, [esi]
.text:004021C2                 add     esi, 4
.text:004021C5                 lea     edx, [ecx-1010101h]
.text:004021CB                 not     ecx
.text:004021CD                 and     edx, ecx
.text:004021CF                 and     edx, 80808080h
.text:004021D5                 jz      short loc_4021C0
.text:004021D7                 test    edx, 8080h
.text:004021DD                 jnz     short loc_4021E5
.text:004021DF                 shr     edx, 10h
.text:004021E2                 add     esi, 2
.text:004021E5
.text:004021E5 loc_4021E5:                             ; CODE XREF: sub_402090+14D↑j
.text:004021E5                 add     dl, dl
.text:004021E7                 sbb     esi, 3
.text:004021EA                 sub     esi, offset Str
.text:004021F0
.text:004021F0 loc_4021F0:                             ; CODE XREF: sub_402090+124↑j
.text:004021F0                 cmp     esi, ebx
.text:004021F2                 mov     eax, esi
.text:004021F4                 jge     short loc_4021F8
.text:004021F6                 mov     eax, ebx
.text:004021F8
.text:004021F8 loc_4021F8:                             ; CODE XREF: sub_402090+164↑j
.text:004021F8                 mov     ebx, eax
.text:004021FA
.text:004021FA loc_4021FA:                             ; CODE XREF: sub_402090+35A↓j
.text:004021FA                 and     byte ptr [esp+3Ch+var_1C+7], 7Fh
.text:004021FF                 lea     esi, [esp+3Ch+var_14]
.text:00402203                 mov     edi, ebx
.text:00402205                 mov     [esp+3Ch+Y], esi ; Y
.text:00402209                 mov     ebx, offset Str
.text:0040220E                 fld     [esp+3Ch+var_1C]
.text:00402212                 fstp    [esp+3Ch+X]     ; X
.text:00402215                 call    modf
.text:0040221A                 fadd    ds:dbl_402088
.text:00402220                 mov     dword ptr [esp+3Ch+X+4], offset Format ; "%g"
.text:00402228                 mov     dword ptr [esp+3Ch+X], offset Str ; Buffer
.text:0040222F                 fstp    qword ptr [esp+3Ch+Y]
.text:00402233                 call    sprintf
.text:00402238                 nop
.text:00402239                 lea     esi, [esi+0]
.text:00402240
.text:00402240 loc_402240:                             ; CODE XREF: sub_402090+1C5↓j
.text:00402240                 mov     ecx, [ebx]
.text:00402242                 add     ebx, 4
.text:00402245                 lea     edx, [ecx-1010101h]
.text:0040224B                 not     ecx
.text:0040224D                 and     edx, ecx
.text:0040224F                 and     edx, 80808080h
.text:00402255                 jz      short loc_402240
.text:00402257                 test    edx, 8080h
.text:0040225D                 jnz     short loc_402265
.text:0040225F                 shr     edx, 10h
.text:00402262                 add     ebx, 2
.text:00402265
.text:00402265 loc_402265:                             ; CODE XREF: sub_402090+1CD↑j
.text:00402265                 add     dl, dl
.text:00402267                 sbb     ebx, 3
.text:0040226A                 sub     ebx, offset Str
.text:00402270                 cmp     ebx, 1
.text:00402273                 jz      loc_4023E1
.text:00402279                 cmp     ds:Str, 31h ; '1'
.text:00402280                 jz      short loc_40229C
.text:00402282                 lea     esi, [esi+0]
.text:00402289                 lea     edi, [edi+0]
.text:00402290
.text:00402290 loc_402290:                             ; CODE XREF: sub_402090+78↑j
.text:00402290                                         ; sub_402090+10A↑j ...
.text:00402290                 mov     eax, offset Format ; "%g"
.text:00402295
.text:00402295 loc_402295:                             ; CODE XREF: sub_402090+32E↓j
.text:00402295                 add     esp, 30h
.text:00402298                 pop     ebx
.text:00402299                 pop     esi
.text:0040229A                 pop     edi
.text:0040229B                 retn
.text:0040229C ; ---------------------------------------------------------------------------
.text:0040229C
.text:0040229C loc_40229C:                             ; CODE XREF: sub_402090+1F0↑j
.text:0040229C                 movzx   edx, ds:byte_407120
.text:004022A3                 cmp     ds:byte_407001, dl
.text:004022A9                 jnz     short loc_402290
.text:004022AB                 mov     dword ptr [esp+3Ch+X+4], offset a0123456789 ; "0123456789"
.text:004022B3                 mov     dword ptr [esp+3Ch+X], offset byte_407002 ; Str
.text:004022BA                 call    strspn
.text:004022BF                 cmp     ds:byte_407002[eax], 0
.text:004022C6                 jnz     short loc_402290
.text:004022C8                 sub     ebx, 2
.text:004022CB
.text:004022CB loc_4022CB:                             ; CODE XREF: sub_402090+353↓j
.text:004022CB                 fld     dbl_406018
.text:004022D1                 mov     [esp+3Ch+Y], esi ; Y
.text:004022D5                 mov     esi, offset Str
.text:004022DA                 fabs
.text:004022DC                 fstp    [esp+3Ch+X]     ; X
.text:004022DF                 call    modf
.text:004022E4                 fadd    ds:dbl_402088
.text:004022EA                 mov     dword ptr [esp+3Ch+X+4], offset Format ; "%g"
.text:004022F2                 mov     dword ptr [esp+3Ch+X], offset Str ; Buffer
.text:004022F9                 fstp    qword ptr [esp+3Ch+Y]
.text:004022FD                 call    sprintf
.text:00402302                 lea     esi, [esi+0]
.text:00402309                 lea     edi, [edi+0]
.text:00402310
.text:00402310 loc_402310:                             ; CODE XREF: sub_402090+295↓j
.text:00402310                 mov     ecx, [esi]
.text:00402312                 add     esi, 4
.text:00402315                 lea     edx, [ecx-1010101h]
.text:0040231B                 not     ecx
.text:0040231D                 and     edx, ecx
.text:0040231F                 and     edx, 80808080h
.text:00402325                 jz      short loc_402310
.text:00402327                 test    edx, 8080h
.text:0040232D                 jnz     short loc_402335
.text:0040232F                 shr     edx, 10h
.text:00402332                 add     esi, 2
.text:00402335
.text:00402335 loc_402335:                             ; CODE XREF: sub_402090+29D↑j
.text:00402335                 add     dl, dl
.text:00402337                 sbb     esi, 3
.text:0040233A                 sub     esi, offset Str
.text:00402340                 cmp     esi, 1
.text:00402343                 jz      loc_4023DD
.text:00402349                 cmp     ds:Str, 31h ; '1'
.text:00402350                 jnz     loc_402290
.text:00402356                 movzx   edx, ds:byte_407120
.text:0040235D                 cmp     ds:byte_407001, dl
.text:00402363                 jnz     loc_402290
.text:00402369                 mov     dword ptr [esp+3Ch+X+4], offset a0123456789 ; "0123456789"
.text:00402371                 mov     dword ptr [esp+3Ch+X], offset byte_407002 ; Str
.text:00402378                 call    strspn
.text:0040237D                 cmp     ds:byte_407002[eax], 0
.text:00402384                 jnz     loc_402290
.text:0040238A                 sub     esi, 2
.text:0040238D
.text:0040238D loc_40238D:                             ; CODE XREF: sub_402090+34F↓j
.text:0040238D                 cmp     esi, ebx
.text:0040238F                 mov     eax, esi
.text:00402391                 jge     short loc_402395
.text:00402393                 mov     eax, ebx
.text:00402395
.text:00402395 loc_402395:                             ; CODE XREF: sub_402090+301↑j
.text:00402395                 test    eax, eax
.text:00402397                 jz      short loc_4023C3
.text:00402399                 mov     [esp+3Ch+Y+4], eax
.text:0040239D                 lea     ebx, [eax+edi+1]
.text:004023A1                 mov     [esp+3Ch+Y], ebx
.text:004023A5                 mov     dword ptr [esp+3Ch+X+4], offset a0DDf ; "%%0%d.%df"
.text:004023AD                 mov     dword ptr [esp+3Ch+X], offset Str ; Buffer
.text:004023B4                 call    sprintf
.text:004023B9
.text:004023B9 loc_4023B9:                             ; CODE XREF: sub_402090+34B↓j
.text:004023B9                 mov     eax, offset Str
.text:004023BE                 jmp     loc_402295
.text:004023C3 ; ---------------------------------------------------------------------------
.text:004023C3
.text:004023C3 loc_4023C3:                             ; CODE XREF: sub_402090+307↑j
.text:004023C3                 mov     [esp+3Ch+Y], edi
.text:004023C7                 mov     dword ptr [esp+3Ch+X+4], offset a0Dg ; "%%0%dg"
.text:004023CF                 mov     dword ptr [esp+3Ch+X], offset Str ; Buffer
.text:004023D6                 call    sprintf
.text:004023DB                 jmp     short loc_4023B9
.text:004023DD ; ---------------------------------------------------------------------------
.text:004023DD
.text:004023DD loc_4023DD:                             ; CODE XREF: sub_402090+2B3↑j
.text:004023DD                 xor     esi, esi
.text:004023DF                 jmp     short loc_40238D
.text:004023E1 ; ---------------------------------------------------------------------------
.text:004023E1
.text:004023E1 loc_4023E1:                             ; CODE XREF: sub_402090+1E3↑j
.text:004023E1                 xor     ebx, ebx
.text:004023E3                 jmp     loc_4022CB
.text:004023E8 ; ---------------------------------------------------------------------------
.text:004023E8
.text:004023E8 loc_4023E8:                             ; CODE XREF: sub_402090+CB↑j
.text:004023E8                 fstp    st
.text:004023EA                 jmp     loc_4021FA
.text:004023EA ; ---------------------------------------------------------------------------
.text:004023EF                 align 10h
.text:004023F0
.text:004023F0 loc_4023F0:                             ; CODE XREF: sub_402090+19↑j
.text:004023F0                 fst     [esp+3Ch+var_1C]
.text:004023F4                 fsubp   st(1), st
.text:004023F6                 fdiv    dbl_406018
.text:004023FC                 fstp    [esp+3Ch+X]     ; X
.text:004023FF                 call    floor
.text:00402404                 fmul    dbl_406018
.text:0040240A                 fadd    ds:dbl_407130
.text:00402410                 jmp     loc_4020D3
.text:00402410 sub_402090      endp
.text:00402410
.text:00402410 ; ---------------------------------------------------------------------------
.text:00402415                 align 10h
.text:00402420 dword_402420    dd 90002D2Dh, 7 dup(90909090h)
.text:00402420                                         ; DATA XREF: sub_402670+E4↓o
.text:00402440 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402440                                         ; DATA XREF: sub_402670+2FC↓o
.text:0040246D                 align 20h
.text:00402480 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402480                                         ; DATA XREF: sub_402670:loc_4029D2↓o
.text:004024AD                 align 20h
.text:004024C0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004024C0                                         ; DATA XREF: sub_402670:loc_402A70↓o
.text:004024C0                                         ; sub_402670:loc_402E37↓o
.text:004024E6                 align 20h
.text:00402500 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402500                                         ; DATA XREF: sub_402670+48E↓o
.text:00402520 dword_402520    dd 90909000h, 7 dup(90909090h)
.text:00402520                                         ; DATA XREF: sub_402670:loc_402B41↓o
.text:00402540 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402540                                         ; DATA XREF: sub_402670:loc_402B5A↓o
.text:00402560 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402560                                         ; DATA XREF: sub_402670:loc_402C3F↓o
.text:00402560                                         ; sub_402670:loc_402F6C↓o
.text:00402587                 align 20h
.text:004025A0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004025A0                                         ; DATA XREF: sub_402670:loc_402DB3↓o
.text:004025CE                 align 20h
.text:004025E0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004025E0                                         ; DATA XREF: sub_402670:loc_402E9F↓o
.text:00402601 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402601                                         ; DATA XREF: sub_402670+93F↓o
.text:0040261B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040261B                                         ; DATA XREF: sub_402670:loc_402FE7↓o
.text:00402635 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402635                                         ; DATA XREF: sub_402670:loc_40300E↓o
.text:00402653 ; const char VarName[]
.text:00402653 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402670:loc_4031C0↓o
.text:00402663                 align 10h
.text:00402670
.text:00402670 ; =============== S U B R O U T I N E =======================================
.text:00402670
.text:00402670
.text:00402670 ; int __cdecl sub_402670(int, int, char *Str, int, int, int, int, int)
.text:00402670 sub_402670      proc near               ; CODE XREF: sub_403200+5A↓p
.text:00402670                                         ; .text:004032EA↓p ...
.text:00402670
.text:00402670 Str1            = dword ptr -5Ch
.text:00402670 Str2            = dword ptr -58h
.text:00402670 MaxCount        = dword ptr -54h
.text:00402670 var_50          = dword ptr -50h
.text:00402670 var_4C          = dword ptr -4Ch
.text:00402670 var_3C          = dword ptr -3Ch
.text:00402670 var_38          = dword ptr -38h
.text:00402670 var_34          = dword ptr -34h
.text:00402670 var_30          = dword ptr -30h
.text:00402670 var_2C          = dword ptr -2Ch
.text:00402670 var_28          = dword ptr -28h
.text:00402670 var_24          = dword ptr -24h
.text:00402670 var_20          = dword ptr -20h
.text:00402670 var_1C          = dword ptr -1Ch
.text:00402670 var_18          = dword ptr -18h
.text:00402670 var_14          = dword ptr -14h
.text:00402670 arg_0           = dword ptr  4
.text:00402670 arg_4           = dword ptr  8
.text:00402670 Str             = dword ptr  0Ch
.text:00402670 arg_C           = dword ptr  10h
.text:00402670 arg_10          = dword ptr  14h
.text:00402670 arg_14          = dword ptr  18h
.text:00402670 arg_18          = dword ptr  1Ch
.text:00402670 arg_1C          = dword ptr  20h
.text:00402670
.text:00402670                 push    ebp
.text:00402671                 mov     eax, 0FFFFFFFFh
.text:00402676                 push    edi
.text:00402677                 push    esi
.text:00402678                 push    ebx
.text:00402679                 sub     esp, 4Ch
.text:0040267C                 mov     esi, [esp+5Ch+Str]
.text:00402680                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402684                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402687                 mov     ebx, [ebp+4]
.text:0040268A                 setz    dl
.text:0040268D                 movzx   ecx, dl
.text:00402690                 dec     ecx
.text:00402691                 and     ecx, ebx
.text:00402693                 mov     [esp+5Ch+var_14], ecx
.text:00402697                 mov     ecx, [esp+5Ch+arg_0]
.text:0040269B                 test    ecx, ecx
.text:0040269D                 jle     loc_4027C7
.text:004026A3                 mov     dword ptr [ebp+0Ch], 0
.text:004026AA                 mov     ebx, [ebp+0]
.text:004026AD                 test    ebx, ebx
.text:004026AF                 jz      loc_4031E0
.text:004026B5                 mov     edi, [ebp+10h]
.text:004026B8                 test    edi, edi
.text:004026BA                 jnz     short loc_402713
.text:004026BC                 lea     esi, [esi+0]
.text:004026C0
.text:004026C0 loc_4026C0:                             ; CODE XREF: sub_402670+B7C↓j
.text:004026C0                 mov     [ebp+24h], ebx
.text:004026C3                 mov     esi, [esp+5Ch+Str]
.text:004026C7                 mov     [ebp+20h], ebx
.text:004026CA                 mov     ecx, [esp+5Ch+arg_18]
.text:004026CE                 xor     ebx, ebx
.text:004026D0                 mov     dword ptr [ebp+14h], 0
.text:004026D7                 test    ecx, ecx
.text:004026D9                 jz      loc_4031C0
.text:004026DF
.text:004026DF loc_4026DF:                             ; CODE XREF: sub_402670+B64↓j
.text:004026DF                 mov     ebx, 1
.text:004026E4
.text:004026E4 loc_4026E4:                             ; CODE XREF: sub_402670+B5E↓j
.text:004026E4                 mov     [ebp+1Ch], ebx
.text:004026E7                 mov     ecx, [esp+5Ch+Str]
.text:004026EB                 movzx   eax, byte ptr [ecx]
.text:004026EE                 cmp     al, 2Dh ; '-'
.text:004026F0                 jz      loc_4031B0
.text:004026F6                 cmp     al, 2Bh ; '+'
.text:004026F8                 jz      loc_403199
.text:004026FE                 xor     edx, edx
.text:00402700                 test    ebx, ebx
.text:00402702                 setz    dl
.text:00402705                 mov     [ebp+18h], edx
.text:00402708
.text:00402708 loc_402708:                             ; CODE XREF: sub_402670+B35↓j
.text:00402708                 mov     [esp+5Ch+Str], esi
.text:0040270C                 mov     dword ptr [ebp+10h], 1
.text:00402713
.text:00402713 loc_402713:                             ; CODE XREF: sub_402670+4A↑j
.text:00402713                 mov     eax, [ebp+14h]
.text:00402716                 test    eax, eax
.text:00402718                 jz      short loc_402723
.text:0040271A                 cmp     byte ptr [eax], 0
.text:0040271D                 jnz     loc_402800
.text:00402723
.text:00402723 loc_402723:                             ; CODE XREF: sub_402670+A8↑j
.text:00402723                 mov     ebx, [ebp+0]
.text:00402726                 cmp     [ebp+24h], ebx
.text:00402729                 jle     short loc_40272E
.text:0040272B                 mov     [ebp+24h], ebx
.text:0040272E
.text:0040272E loc_40272E:                             ; CODE XREF: sub_402670+B9↑j
.text:0040272E                 cmp     [ebp+20h], ebx
.text:00402731                 jle     short loc_402736
.text:00402733                 mov     [ebp+20h], ebx
.text:00402736
.text:00402736 loc_402736:                             ; CODE XREF: sub_402670+C1↑j
.text:00402736                 cmp     dword ptr [ebp+18h], 1
.text:0040273A                 jz      loc_403110
.text:00402740
.text:00402740 loc_402740:                             ; CODE XREF: sub_402670+B13↓j
.text:00402740                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402744                 jz      loc_4030F4
.text:0040274A                 cld
.text:0040274B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040274F                 mov     edx, 3
.text:00402754                 mov     edi, offset dword_402420
.text:00402759                 mov     esi, [ecx+ebx*4]
.text:0040275C                 mov     ecx, edx
.text:0040275E                 repe cmpsb
.text:00402760                 jnz     short loc_40279C
.text:00402762                 mov     edx, [ebp+24h]
.text:00402765                 lea     eax, [ebx+1]
.text:00402768                 cmp     [ebp+20h], edx
.text:0040276B                 mov     [ebp+0], eax
.text:0040276E                 jz      loc_403108
.text:00402774                 cmp     edx, eax
.text:00402776                 jz      short loc_402790
.text:00402778                 mov     [esp+5Ch+Str2], ebp
.text:0040277C                 mov     ebx, [esp+5Ch+arg_4]
.text:00402780                 mov     [esp+5Ch+Str1], ebx
.text:00402783                 call    sub_403320
.text:00402788                 nop
.text:00402789                 lea     esi, [esi+0]
.text:00402790
.text:00402790 loc_402790:                             ; CODE XREF: sub_402670+106↑j
.text:00402790                                         ; sub_402670+A9B↓j
.text:00402790                 mov     eax, [esp+5Ch+arg_0]
.text:00402794                 mov     ebx, eax
.text:00402796                 mov     [ebp+24h], eax
.text:00402799                 mov     [ebp+0], eax
.text:0040279C
.text:0040279C loc_40279C:                             ; CODE XREF: sub_402670+F0↑j
.text:0040279C                 cmp     ebx, [esp+5Ch+arg_0]
.text:004027A0                 jz      loc_4030F4
.text:004027A6                 mov     esi, [esp+5Ch+arg_4]
.text:004027AA                 mov     eax, [esi+ebx*4]
.text:004027AD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004027B0                 jz      short loc_4027D7
.text:004027B2
.text:004027B2 loc_4027B2:                             ; CODE XREF: sub_402670+16D↓j
.text:004027B2                 mov     edx, [ebp+18h]
.text:004027B5                 test    edx, edx
.text:004027B7                 jz      short loc_4027D0
.text:004027B9                 mov     [ebp+0Ch], eax
.text:004027BC                 lea     edi, [ebx+1]
.text:004027BF                 mov     eax, 1
.text:004027C4                 mov     [ebp+0], edi
.text:004027C7
.text:004027C7 loc_4027C7:                             ; CODE XREF: sub_402670+2D↑j
.text:004027C7                                         ; sub_402670+165↓j ...
.text:004027C7                 add     esp, 4Ch
.text:004027CA                 pop     ebx
.text:004027CB                 pop     esi
.text:004027CC                 pop     edi
.text:004027CD                 pop     ebp
.text:004027CE                 retn
.text:004027CE ; ---------------------------------------------------------------------------
.text:004027CF                 align 10h
.text:004027D0
.text:004027D0 loc_4027D0:                             ; CODE XREF: sub_402670+147↑j
.text:004027D0                                         ; sub_402670+A8A↓j ...
.text:004027D0                 mov     eax, 0FFFFFFFFh
.text:004027D5                 jmp     short loc_4027C7
.text:004027D7 ; ---------------------------------------------------------------------------
.text:004027D7
.text:004027D7 loc_4027D7:                             ; CODE XREF: sub_402670+140↑j
.text:004027D7                 movzx   edx, byte ptr [eax+1]
.text:004027DB                 test    dl, dl
.text:004027DD                 jz      short loc_4027B2
.text:004027DF                 mov     ebx, [esp+5Ch+arg_C]
.text:004027E3                 xor     ecx, ecx
.text:004027E5                 test    ebx, ebx
.text:004027E7                 jz      short loc_4027F2
.text:004027E9                 cmp     dl, 2Dh ; '-'
.text:004027EC                 jz      loc_4030EA
.text:004027F2
.text:004027F2 loc_4027F2:                             ; CODE XREF: sub_402670+177↑j
.text:004027F2                                         ; sub_402670+A7F↓j
.text:004027F2                 lea     esi, [ecx+eax+1]
.text:004027F6                 mov     [ebp+14h], esi
.text:004027F9                 lea     esi, [esi+0]
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_402670+AD↑j
.text:00402800                 mov     ecx, [esp+5Ch+arg_C]
.text:00402804                 test    ecx, ecx
.text:00402806                 jz      loc_402B90
.text:0040280C                 mov     edx, [ebp+0]
.text:0040280F                 mov     edi, [esp+5Ch+arg_4]
.text:00402813                 mov     eax, [edi+edx*4]
.text:00402816                 movzx   edx, byte ptr [eax+1]
.text:0040281A                 cmp     dl, 2Dh ; '-'
.text:0040281D                 jz      short loc_402835
.text:0040281F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402823                 test    ebx, ebx
.text:00402825                 jz      loc_402B90
.text:0040282B                 cmp     byte ptr [eax+2], 0
.text:0040282F                 jz      loc_4030CA
.text:00402835
.text:00402835 loc_402835:                             ; CODE XREF: sub_402670+1AD↑j
.text:00402835                                         ; sub_402670+A75↓j
.text:00402835                 mov     [esp+5Ch+var_18], 0
.text:0040283D                 mov     ecx, [ebp+14h]
.text:00402840                 mov     [esp+5Ch+var_1C], 0
.text:00402848                 mov     [esp+5Ch+var_20], 0
.text:00402850                 mov     edi, ecx
.text:00402852                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040285A                 movzx   eax, byte ptr [ecx]
.text:0040285D                 test    al, al
.text:0040285F                 jz      short loc_40287C
.text:00402861                 cmp     al, 3Dh ; '='
.text:00402863                 jz      short loc_40287C
.text:00402865                 lea     esi, [esi+0]
.text:00402869                 lea     edi, [edi+0]
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_402670+20A↓j
.text:00402870                 inc     edi
.text:00402871                 movzx   eax, byte ptr [edi]
.text:00402874                 test    al, al
.text:00402876                 jz      short loc_40287C
.text:00402878                 cmp     al, 3Dh ; '='
.text:0040287A                 jnz     short loc_402870
.text:0040287C
.text:0040287C loc_40287C:                             ; CODE XREF: sub_402670+1EF↑j
.text:0040287C                                         ; sub_402670+1F3↑j ...
.text:0040287C                 mov     [esp+5Ch+var_28], 0
.text:00402884                 mov     esi, [esp+5Ch+arg_C]
.text:00402888                 mov     ebx, [esi]
.text:0040288A                 test    ebx, ebx
.text:0040288C                 mov     edx, ebx
.text:0040288E                 jz      loc_402AB0
.text:00402894                 lea     esi, [esi+0]
.text:0040289A                 lea     edi, [edi+0]
.text:004028A0
.text:004028A0 loc_4028A0:                             ; CODE XREF: sub_402670+25E↓j
.text:004028A0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004028A4                 mov     ebx, edi
.text:004028A6                 sub     ebx, ecx
.text:004028A8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004028AC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004028AF                 call    strncmp
.text:004028B4                 test    eax, eax
.text:004028B6                 jz      loc_403046
.text:004028BC
.text:004028BC loc_4028BC:                             ; CODE XREF: sub_402670+A0F↓j
.text:004028BC                                         ; sub_402670+A24↓j ...
.text:004028BC                 inc     [esp+5Ch+var_28]
.text:004028C0                 add     esi, 10h
.text:004028C3                 mov     ecx, [esi]
.text:004028C5                 test    ecx, ecx
.text:004028C7                 mov     edx, ecx
.text:004028C9                 jz      short loc_4028D0
.text:004028CB                 mov     ecx, [ebp+14h]
.text:004028CE                 jmp     short loc_4028A0
.text:004028D0 ; ---------------------------------------------------------------------------
.text:004028D0
.text:004028D0 loc_4028D0:                             ; CODE XREF: sub_402670+259↑j
.text:004028D0                                         ; sub_402670+A55↓j
.text:004028D0                 mov     esi, [esp+5Ch+var_20]
.text:004028D4                 test    esi, esi
.text:004028D6                 jz      short loc_4028E4
.text:004028D8                 mov     edx, [esp+5Ch+var_1C]
.text:004028DC                 test    edx, edx
.text:004028DE                 jz      loc_402FF0
.text:004028E4
.text:004028E4 loc_4028E4:                             ; CODE XREF: sub_402670+266↑j
.text:004028E4                 mov     eax, [esp+5Ch+var_18]
.text:004028E8                 test    eax, eax
.text:004028EA                 jz      loc_402AB0
.text:004028F0                 mov     ecx, [ebp+0]
.text:004028F3                 lea     eax, [ecx+1]
.text:004028F6                 mov     [ebp+0], eax
.text:004028F9                 cmp     byte ptr [edi], 0
.text:004028FC                 jz      loc_402A10
.text:00402902                 mov     ecx, [esp+5Ch+var_18]
.text:00402906                 mov     esi, [ecx+4]
.text:00402909                 test    esi, esi
.text:0040290B                 jz      short loc_402956
.text:0040290D                 lea     ebx, [edi+1]
.text:00402910                 mov     [ebp+0Ch], ebx
.text:00402913
.text:00402913 loc_402913:                             ; CODE XREF: sub_402670+3A8↓j
.text:00402913                                         ; sub_402670+3C4↓j
.text:00402913                 mov     ebx, [ebp+14h]
.text:00402916                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402919                 call    strlen
.text:0040291E                 add     [ebp+14h], eax
.text:00402921                 mov     esi, [esp+5Ch+arg_10]
.text:00402925                 test    esi, esi
.text:00402927                 jz      short loc_402933
.text:00402929                 mov     ebp, [esp+5Ch+var_24]
.text:0040292D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402931                 mov     [ecx], ebp
.text:00402933
.text:00402933 loc_402933:                             ; CODE XREF: sub_402670+2B7↑j
.text:00402933                 mov     eax, [esp+5Ch+var_18]
.text:00402937                 mov     ecx, [eax+8]
.text:0040293A                 test    ecx, ecx
.text:0040293C                 jnz     short loc_40294A
.text:0040293E                 mov     ecx, [esp+5Ch+var_18]
.text:00402942
.text:00402942 loc_402942:                             ; CODE XREF: sub_402670+723↓j
.text:00402942                 mov     eax, [ecx+0Ch]
.text:00402945                 jmp     loc_4027C7
.text:0040294A ; ---------------------------------------------------------------------------
.text:0040294A
.text:0040294A loc_40294A:                             ; CODE XREF: sub_402670+2CC↑j
.text:0040294A                                         ; sub_402670+719↓j
.text:0040294A                 mov     esi, [eax+0Ch]
.text:0040294D                 xor     eax, eax
.text:0040294F                 mov     [ecx], esi
.text:00402951                 jmp     loc_4027C7
.text:00402956 ; ---------------------------------------------------------------------------
.text:00402956
.text:00402956 loc_402956:                             ; CODE XREF: sub_402670+29B↑j
.text:00402956                 mov     edi, [esp+5Ch+var_14]
.text:0040295A                 test    edi, edi
.text:0040295C                 jz      short loc_4029B0
.text:0040295E                 mov     esi, [esp+5Ch+arg_4]
.text:00402962                 mov     edx, [esi+eax*4-4]
.text:00402966                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040296A                 jz      short loc_4029D2
.text:0040296C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402973                 call    ds:libintl_gettext
.text:00402979                 mov     edx, [esp+5Ch+var_18]
.text:0040297D                 mov     edi, [edx]
.text:0040297F                 mov     [esp+5Ch+var_4C], edi
.text:00402983                 mov     ebx, [ebp+0]
.text:00402986                 mov     edi, [esp+5Ch+arg_4]
.text:0040298A                 mov     ecx, [edi+ebx*4-4]
.text:0040298E                 movsx   esi, byte ptr [ecx]
.text:00402991                 mov     ecx, ds:_iob
.text:00402997                 add     ecx, 40h ; '@'
.text:0040299A                 mov     [esp+5Ch+var_50], esi
.text:0040299E                 mov     ebx, [edi]
.text:004029A0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004029A4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004029A7                 mov     [esp+5Ch+MaxCount], ebx
.text:004029AB                 call    fprintf
.text:004029B0
.text:004029B0 loc_4029B0:                             ; CODE XREF: sub_402670+2EC↑j
.text:004029B0                                         ; sub_402670+398↓j
.text:004029B0                 mov     ecx, [ebp+14h]
.text:004029B3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004029B6                 call    strlen
.text:004029BB                 add     [ebp+14h], eax
.text:004029BE                 mov     eax, [esp+5Ch+var_18]
.text:004029C2                 mov     esi, [eax+0Ch]
.text:004029C5                 mov     [ebp+8], esi
.text:004029C8
.text:004029C8 loc_4029C8:                             ; CODE XREF: sub_402670+4E5↓j
.text:004029C8                                         ; sub_402670+73E↓j ...
.text:004029C8                 mov     eax, 3Fh ; '?'
.text:004029CD                 jmp     loc_4027C7
.text:004029D2 ; ---------------------------------------------------------------------------
.text:004029D2
.text:004029D2 loc_4029D2:                             ; CODE XREF: sub_402670+2FA↑j
.text:004029D2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:004029D9                 call    ds:libintl_gettext
.text:004029DF                 mov     edx, [esp+5Ch+var_18]
.text:004029E3                 mov     edi, [esp+5Ch+arg_4]
.text:004029E7                 mov     ecx, ds:_iob
.text:004029ED                 mov     esi, [edx]
.text:004029EF                 add     ecx, 40h ; '@'
.text:004029F2                 mov     [esp+5Ch+var_50], esi
.text:004029F6                 mov     ebx, [edi]
.text:004029F8                 mov     [esp+5Ch+Str2], eax ; Format
.text:004029FC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004029FF                 mov     [esp+5Ch+MaxCount], ebx
.text:00402A03                 call    fprintf
.text:00402A08                 jmp     short loc_4029B0
.text:00402A08 ; ---------------------------------------------------------------------------
.text:00402A0A                 align 10h
.text:00402A10
.text:00402A10 loc_402A10:                             ; CODE XREF: sub_402670+28C↑j
.text:00402A10                 mov     ebx, [esp+5Ch+var_18]
.text:00402A14                 cmp     dword ptr [ebx+4], 1
.text:00402A18                 jnz     loc_402913
.text:00402A1E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402A22                 jge     short loc_402A39
.text:00402A24                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A28                 lea     edi, [ecx+2]
.text:00402A2B                 mov     [ebp+0], edi
.text:00402A2E                 mov     esi, [ebx+eax*4]
.text:00402A31                 mov     [ebp+0Ch], esi
.text:00402A34                 jmp     loc_402913
.text:00402A39 ; ---------------------------------------------------------------------------
.text:00402A39
.text:00402A39 loc_402A39:                             ; CODE XREF: sub_402670+3B2↑j
.text:00402A39                 mov     edx, [esp+5Ch+var_14]
.text:00402A3D                 test    edx, edx
.text:00402A3F                 jnz     short loc_402A70
.text:00402A41
.text:00402A41 loc_402A41:                             ; CODE XREF: sub_402670+437↓j
.text:00402A41                 mov     edx, [ebp+14h]
.text:00402A44                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402A47                 call    strlen
.text:00402A4C                 add     [ebp+14h], eax
.text:00402A4F                 mov     eax, [esp+5Ch+var_18]
.text:00402A53                 mov     edi, [eax+0Ch]
.text:00402A56                 mov     [ebp+8], edi
.text:00402A59
.text:00402A59 loc_402A59:                             ; CODE XREF: sub_402670+7C2↓j
.text:00402A59                 mov     ebp, [esp+5Ch+Str]
.text:00402A5D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402A61                 setnz   bl
.text:00402A64                 movzx   esi, bl
.text:00402A67                 lea     eax, [esi+esi*4+3Ah]
.text:00402A6B                 jmp     loc_4027C7
.text:00402A70 ; ---------------------------------------------------------------------------
.text:00402A70
.text:00402A70 loc_402A70:                             ; CODE XREF: sub_402670+3CF↑j
.text:00402A70                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402A77                 call    ds:libintl_gettext
.text:00402A7D                 mov     ecx, [ebp+0]
.text:00402A80                 mov     esi, [esp+5Ch+arg_4]
.text:00402A84                 mov     ebx, [esi+ecx*4-4]
.text:00402A88                 mov     ecx, ds:_iob
.text:00402A8E                 mov     [esp+5Ch+var_50], ebx
.text:00402A92                 mov     edi, [esi]
.text:00402A94                 add     ecx, 40h ; '@'
.text:00402A97                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A9B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402A9E                 mov     [esp+5Ch+MaxCount], edi
.text:00402AA2                 call    fprintf
.text:00402AA7                 jmp     short loc_402A41
.text:00402AA7 ; ---------------------------------------------------------------------------
.text:00402AA9                 align 10h
.text:00402AB0
.text:00402AB0 loc_402AB0:                             ; CODE XREF: sub_402670+21E↑j
.text:00402AB0                                         ; sub_402670+27A↑j
.text:00402AB0                 mov     eax, [esp+5Ch+arg_14]
.text:00402AB4                 test    eax, eax
.text:00402AB6                 jz      short loc_402AE6
.text:00402AB8                 mov     ebx, [ebp+0]
.text:00402ABB                 mov     esi, [esp+5Ch+arg_4]
.text:00402ABF                 mov     edi, [esi+ebx*4]
.text:00402AC2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402AC6                 jz      short loc_402AE9
.text:00402AC8                 mov     ecx, [ebp+14h]
.text:00402ACB                 mov     edx, [esp+5Ch+Str]
.text:00402ACF                 movsx   ebx, byte ptr [ecx]
.text:00402AD2                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402AD5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402AD9                 call    strchr
.text:00402ADE                 test    eax, eax
.text:00402AE0                 jnz     loc_402B90
.text:00402AE6
.text:00402AE6 loc_402AE6:                             ; CODE XREF: sub_402670+446↑j
.text:00402AE6                 mov     ebx, [ebp+0]
.text:00402AE9
.text:00402AE9 loc_402AE9:                             ; CODE XREF: sub_402670+456↑j
.text:00402AE9                 mov     eax, [esp+5Ch+var_14]
.text:00402AED                 test    eax, eax
.text:00402AEF                 jz      short loc_402B41
.text:00402AF1                 mov     esi, [esp+5Ch+arg_4]
.text:00402AF5                 mov     edi, [esi+ebx*4]
.text:00402AF8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402AFC                 jz      short loc_402B5A
.text:00402AFE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402B05                 call    ds:libintl_gettext
.text:00402B0B                 mov     edi, [ebp+14h]
.text:00402B0E                 mov     [esp+5Ch+var_4C], edi
.text:00402B12                 mov     ebx, [ebp+0]
.text:00402B15                 mov     edi, [esp+5Ch+arg_4]
.text:00402B19                 mov     esi, [edi+ebx*4]
.text:00402B1C                 movsx   ecx, byte ptr [esi]
.text:00402B1F                 mov     esi, ds:_iob
.text:00402B25                 add     esi, 40h ; '@'
.text:00402B28                 mov     [esp+5Ch+var_50], ecx
.text:00402B2C                 mov     ebx, [edi]
.text:00402B2E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B32                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402B35                 mov     [esp+5Ch+MaxCount], ebx
.text:00402B39                 call    fprintf
.text:00402B3E
.text:00402B3E loc_402B3E:                             ; CODE XREF: sub_402670+51D↓j
.text:00402B3E                 mov     ebx, [ebp+0]
.text:00402B41
.text:00402B41 loc_402B41:                             ; CODE XREF: sub_402670+47F↑j
.text:00402B41                 mov     dword ptr [ebp+14h], offset dword_402520
.text:00402B48                 lea     edx, [ebx+1]
.text:00402B4B                 mov     [ebp+0], edx
.text:00402B4E
.text:00402B4E loc_402B4E:                             ; CODE XREF: sub_402670+999↓j
.text:00402B4E                 mov     dword ptr [ebp+8], 0
.text:00402B55                 jmp     loc_4029C8
.text:00402B5A ; ---------------------------------------------------------------------------
.text:00402B5A
.text:00402B5A loc_402B5A:                             ; CODE XREF: sub_402670+48C↑j
.text:00402B5A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402B61                 call    ds:libintl_gettext
.text:00402B67                 mov     ecx, [ebp+14h]
.text:00402B6A                 mov     edi, [esp+5Ch+arg_4]
.text:00402B6E                 mov     edx, ds:_iob
.text:00402B74                 mov     [esp+5Ch+var_50], ecx
.text:00402B78                 mov     ebx, [edi]
.text:00402B7A                 add     edx, 40h ; '@'
.text:00402B7D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B81                 mov     [esp+5Ch+MaxCount], ebx
.text:00402B85                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402B88                 call    fprintf
.text:00402B8D                 jmp     short loc_402B3E
.text:00402B8D ; ---------------------------------------------------------------------------
.text:00402B8F                 align 10h
.text:00402B90
.text:00402B90 loc_402B90:                             ; CODE XREF: sub_402670+196↑j
.text:00402B90                                         ; sub_402670+1B5↑j ...
.text:00402B90                 mov     esi, [ebp+14h]
.text:00402B93                 movzx   ebx, byte ptr [esi]
.text:00402B96                 inc     esi
.text:00402B97                 mov     [ebp+14h], esi
.text:00402B9A                 mov     ecx, [esp+5Ch+Str]
.text:00402B9E                 movsx   esi, bl
.text:00402BA1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402BA5                 mov     edi, esi
.text:00402BA7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402BAA                 call    strchr
.text:00402BAF                 mov     ecx, [ebp+14h]
.text:00402BB2                 cmp     byte ptr [ecx], 0
.text:00402BB5                 jnz     short loc_402BBA
.text:00402BB7                 inc     dword ptr [ebp+0]
.text:00402BBA
.text:00402BBA loc_402BBA:                             ; CODE XREF: sub_402670+545↑j
.text:00402BBA                 test    eax, eax
.text:00402BBC                 jz      loc_402FA0
.text:00402BC2                 cmp     bl, 3Ah ; ':'
.text:00402BC5                 jz      loc_402FA0
.text:00402BCB                 cmp     byte ptr [eax], 57h ; 'W'
.text:00402BCE                 jz      loc_402C86
.text:00402BD4                 movzx   edx, byte ptr [eax+1]
.text:00402BD8
.text:00402BD8 loc_402BD8:                             ; CODE XREF: sub_402670+61D↓j
.text:00402BD8                 cmp     dl, 3Ah ; ':'
.text:00402BDB                 jz      short loc_402BE4
.text:00402BDD
.text:00402BDD loc_402BDD:                             ; CODE XREF: sub_402670+590↓j
.text:00402BDD                 mov     eax, esi
.text:00402BDF                 jmp     loc_4027C7
.text:00402BE4 ; ---------------------------------------------------------------------------
.text:00402BE4
.text:00402BE4 loc_402BE4:                             ; CODE XREF: sub_402670+56B↑j
.text:00402BE4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402BE8                 jz      loc_402C71
.text:00402BEE                 cmp     byte ptr [ecx], 0
.text:00402BF1                 jz      short loc_402C02
.text:00402BF3
.text:00402BF3 loc_402BF3:                             ; CODE XREF: sub_402670+604↓j
.text:00402BF3                 inc     dword ptr [ebp+0]
.text:00402BF6                 mov     [ebp+0Ch], ecx
.text:00402BF9
.text:00402BF9 loc_402BF9:                             ; CODE XREF: sub_402670+5AB↓j
.text:00402BF9                                         ; sub_402670+5C6↓j ...
.text:00402BF9                 mov     dword ptr [ebp+14h], 0
.text:00402C00                 jmp     short loc_402BDD
.text:00402C02 ; ---------------------------------------------------------------------------
.text:00402C02
.text:00402C02 loc_402C02:                             ; CODE XREF: sub_402670+581↑j
.text:00402C02                 mov     ecx, [ebp+0]
.text:00402C05                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402C09                 jz      short loc_402C1D
.text:00402C0B                 mov     eax, [esp+5Ch+arg_4]
.text:00402C0F                 lea     edx, [ecx+1]
.text:00402C12                 mov     [ebp+0], edx
.text:00402C15                 mov     ebx, [eax+ecx*4]
.text:00402C18                 mov     [ebp+0Ch], ebx
.text:00402C1B                 jmp     short loc_402BF9
.text:00402C1D ; ---------------------------------------------------------------------------
.text:00402C1D
.text:00402C1D loc_402C1D:                             ; CODE XREF: sub_402670+599↑j
.text:00402C1D                 mov     ecx, [esp+5Ch+var_14]
.text:00402C21                 test    ecx, ecx
.text:00402C23                 jnz     short loc_402C3F
.text:00402C25
.text:00402C25 loc_402C25:                             ; CODE XREF: sub_402670+5FF↓j
.text:00402C25                 mov     [ebp+8], edi
.text:00402C28                 mov     edi, [esp+5Ch+Str]
.text:00402C2C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00402C2F                 jz      short loc_402C38
.text:00402C31                 mov     esi, 3Fh ; '?'
.text:00402C36                 jmp     short loc_402BF9
.text:00402C38 ; ---------------------------------------------------------------------------
.text:00402C38
.text:00402C38 loc_402C38:                             ; CODE XREF: sub_402670+5BF↑j
.text:00402C38                 mov     esi, 3Ah ; ':'
.text:00402C3D                 jmp     short loc_402BF9
.text:00402C3F ; ---------------------------------------------------------------------------
.text:00402C3F
.text:00402C3F loc_402C3F:                             ; CODE XREF: sub_402670+5B3↑j
.text:00402C3F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402C46                 call    ds:libintl_gettext
.text:00402C4C                 mov     [esp+5Ch+var_50], edi
.text:00402C50                 mov     ebx, [esp+5Ch+arg_4]
.text:00402C54                 mov     edx, ds:_iob
.text:00402C5A                 mov     esi, [ebx]
.text:00402C5C                 add     edx, 40h ; '@'
.text:00402C5F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402C63                 mov     [esp+5Ch+MaxCount], esi
.text:00402C67                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402C6A                 call    fprintf
.text:00402C6F                 jmp     short loc_402C25
.text:00402C71 ; ---------------------------------------------------------------------------
.text:00402C71
.text:00402C71 loc_402C71:                             ; CODE XREF: sub_402670+578↑j
.text:00402C71                 cmp     byte ptr [ecx], 0
.text:00402C74                 jnz     loc_402BF3
.text:00402C7A                 mov     dword ptr [ebp+0Ch], 0
.text:00402C81                 jmp     loc_402BF9
.text:00402C86 ; ---------------------------------------------------------------------------
.text:00402C86
.text:00402C86 loc_402C86:                             ; CODE XREF: sub_402670+55E↑j
.text:00402C86                 movzx   edx, byte ptr [eax+1]
.text:00402C8A                 cmp     dl, 3Bh ; ';'
.text:00402C8D                 jnz     loc_402BD8
.text:00402C93                 mov     [esp+5Ch+var_2C], 0
.text:00402C9B                 mov     [esp+5Ch+var_30], 0
.text:00402CA3                 mov     [esp+5Ch+var_34], 0
.text:00402CAB                 mov     [esp+5Ch+var_38], 0
.text:00402CB3                 cmp     byte ptr [ecx], 0
.text:00402CB6                 jz      loc_402F2B
.text:00402CBC                 inc     dword ptr [ebp+0]
.text:00402CBF                 mov     [ebp+0Ch], ecx
.text:00402CC2
.text:00402CC2 loc_402CC2:                             ; CODE XREF: sub_402670+8D4↓j
.text:00402CC2                 mov     edi, [ebp+0Ch]
.text:00402CC5                 mov     [ebp+14h], edi
.text:00402CC8                 movzx   eax, byte ptr [edi]
.text:00402CCB                 test    al, al
.text:00402CCD                 jz      short loc_402CDF
.text:00402CCF                 cmp     al, 3Dh ; '='
.text:00402CD1                 jz      short loc_402CDF
.text:00402CD3
.text:00402CD3 loc_402CD3:                             ; CODE XREF: sub_402670+66D↓j
.text:00402CD3                 inc     edi
.text:00402CD4                 movzx   eax, byte ptr [edi]
.text:00402CD7                 test    al, al
.text:00402CD9                 jz      short loc_402CDF
.text:00402CDB                 cmp     al, 3Dh ; '='
.text:00402CDD                 jnz     short loc_402CD3
.text:00402CDF
.text:00402CDF loc_402CDF:                             ; CODE XREF: sub_402670+65D↑j
.text:00402CDF                                         ; sub_402670+661↑j ...
.text:00402CDF                 mov     [esp+5Ch+var_3C], 0
.text:00402CE7                 mov     esi, [esp+5Ch+arg_C]
.text:00402CEB                 mov     eax, [esi]
.text:00402CED                 test    eax, eax
.text:00402CEF                 jz      loc_402E70
.text:00402CF5                 mov     ecx, eax
.text:00402CF7
.text:00402CF7 loc_402CF7:                             ; CODE XREF: sub_402670+6B3↓j
.text:00402CF7                 mov     ebx, [ebp+14h]
.text:00402CFA                 mov     eax, edi
.text:00402CFC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00402CFF                 sub     eax, ebx
.text:00402D01                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402D05                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402D09                 call    strncmp
.text:00402D0E                 test    eax, eax
.text:00402D10                 jz      loc_402ED7
.text:00402D16
.text:00402D16 loc_402D16:                             ; CODE XREF: sub_402670+88C↓j
.text:00402D16                                         ; sub_402670+89D↓j
.text:00402D16                 inc     [esp+5Ch+var_3C]
.text:00402D1A                 add     esi, 10h
.text:00402D1D                 mov     edx, [esi]
.text:00402D1F                 test    edx, edx
.text:00402D21                 mov     ecx, edx
.text:00402D23                 jnz     short loc_402CF7
.text:00402D25
.text:00402D25 loc_402D25:                             ; CODE XREF: sub_402670+8B6↓j
.text:00402D25                 mov     esi, [esp+5Ch+var_34]
.text:00402D29                 test    esi, esi
.text:00402D2B                 jz      short loc_402D39
.text:00402D2D                 mov     ebx, [esp+5Ch+var_30]
.text:00402D31                 test    ebx, ebx
.text:00402D33                 jz      loc_402E81
.text:00402D39
.text:00402D39 loc_402D39:                             ; CODE XREF: sub_402670+6BB↑j
.text:00402D39                 mov     esi, [esp+5Ch+var_2C]
.text:00402D3D                 test    esi, esi
.text:00402D3F                 jz      loc_402E70
.text:00402D45                 cmp     byte ptr [edi], 0
.text:00402D48                 jz      loc_402DF0
.text:00402D4E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402D52                 mov     ebx, [ecx+4]
.text:00402D55                 test    ebx, ebx
.text:00402D57                 jz      short loc_402D98
.text:00402D59                 lea     edx, [edi+1]
.text:00402D5C                 mov     [ebp+0Ch], edx
.text:00402D5F
.text:00402D5F loc_402D5F:                             ; CODE XREF: sub_402670+788↓j
.text:00402D5F                                         ; sub_402670+7A7↓j
.text:00402D5F                 mov     edi, [ebp+14h]
.text:00402D62                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402D65                 call    strlen
.text:00402D6A                 add     [ebp+14h], eax
.text:00402D6D                 mov     eax, [esp+5Ch+arg_10]
.text:00402D71                 test    eax, eax
.text:00402D73                 jz      short loc_402D80
.text:00402D75                 mov     edx, [esp+5Ch+var_38]
.text:00402D79                 mov     ebp, [esp+5Ch+arg_10]
.text:00402D7D                 mov     [ebp+0], edx
.text:00402D80
.text:00402D80 loc_402D80:                             ; CODE XREF: sub_402670+703↑j
.text:00402D80                 mov     eax, [esp+5Ch+var_2C]
.text:00402D84                 mov     ecx, [eax+8]
.text:00402D87                 test    ecx, ecx
.text:00402D89                 jnz     loc_40294A
.text:00402D8F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402D93                 jmp     loc_402942
.text:00402D98 ; ---------------------------------------------------------------------------
.text:00402D98
.text:00402D98 loc_402D98:                             ; CODE XREF: sub_402670+6E7↑j
.text:00402D98                 mov     eax, [esp+5Ch+var_14]
.text:00402D9C                 test    eax, eax
.text:00402D9E                 jnz     short loc_402DB3
.text:00402DA0
.text:00402DA0 loc_402DA0:                             ; CODE XREF: sub_402670+779↓j
.text:00402DA0                 mov     ecx, [ebp+14h]
.text:00402DA3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402DA6                 call    strlen
.text:00402DAB                 add     [ebp+14h], eax
.text:00402DAE                 jmp     loc_4029C8
.text:00402DB3 ; ---------------------------------------------------------------------------
.text:00402DB3
.text:00402DB3 loc_402DB3:                             ; CODE XREF: sub_402670+72E↑j
.text:00402DB3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00402DBA                 call    ds:libintl_gettext
.text:00402DC0                 mov     edx, [esp+5Ch+var_2C]
.text:00402DC4                 mov     ebx, [esp+5Ch+arg_4]
.text:00402DC8                 mov     edi, [edx]
.text:00402DCA                 mov     [esp+5Ch+var_50], edi
.text:00402DCE                 mov     edi, ds:_iob
.text:00402DD4                 mov     esi, [ebx]
.text:00402DD6                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402DDA                 add     edi, 40h ; '@'
.text:00402DDD                 mov     [esp+5Ch+MaxCount], esi
.text:00402DE1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402DE4                 call    fprintf
.text:00402DE9                 jmp     short loc_402DA0
.text:00402DE9 ; ---------------------------------------------------------------------------
.text:00402DEB                 align 10h
.text:00402DF0
.text:00402DF0 loc_402DF0:                             ; CODE XREF: sub_402670+6D8↑j
.text:00402DF0                 mov     esi, [esp+5Ch+var_2C]
.text:00402DF4                 cmp     dword ptr [esi+4], 1
.text:00402DF8                 jnz     loc_402D5F
.text:00402DFE                 mov     ecx, [ebp+0]
.text:00402E01                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402E05                 jge     short loc_402E1C
.text:00402E07                 mov     eax, [esp+5Ch+arg_4]
.text:00402E0B                 lea     ebx, [ecx+1]
.text:00402E0E                 mov     [ebp+0], ebx
.text:00402E11                 mov     edi, [eax+ecx*4]
.text:00402E14                 mov     [ebp+0Ch], edi
.text:00402E17                 jmp     loc_402D5F
.text:00402E1C ; ---------------------------------------------------------------------------
.text:00402E1C
.text:00402E1C loc_402E1C:                             ; CODE XREF: sub_402670+795↑j
.text:00402E1C                 mov     edx, [esp+5Ch+var_14]
.text:00402E20                 test    edx, edx
.text:00402E22                 jnz     short loc_402E37
.text:00402E24
.text:00402E24 loc_402E24:                             ; CODE XREF: sub_402670+7FE↓j
.text:00402E24                 mov     edx, [ebp+14h]
.text:00402E27                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402E2A                 call    strlen
.text:00402E2F                 add     [ebp+14h], eax
.text:00402E32                 jmp     loc_402A59
.text:00402E37 ; ---------------------------------------------------------------------------
.text:00402E37
.text:00402E37 loc_402E37:                             ; CODE XREF: sub_402670+7B2↑j
.text:00402E37                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402E3E                 call    ds:libintl_gettext
.text:00402E44                 mov     ecx, [ebp+0]
.text:00402E47                 mov     ebx, [esp+5Ch+arg_4]
.text:00402E4B                 mov     edi, [ebx+ecx*4-4]
.text:00402E4F                 mov     ecx, ds:_iob
.text:00402E55                 mov     [esp+5Ch+var_50], edi
.text:00402E59                 mov     esi, [ebx]
.text:00402E5B                 add     ecx, 40h ; '@'
.text:00402E5E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402E62                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402E65                 mov     [esp+5Ch+MaxCount], esi
.text:00402E69                 call    fprintf
.text:00402E6E                 jmp     short loc_402E24
.text:00402E70 ; ---------------------------------------------------------------------------
.text:00402E70
.text:00402E70 loc_402E70:                             ; CODE XREF: sub_402670+67F↑j
.text:00402E70                                         ; sub_402670+6CF↑j
.text:00402E70                 mov     dword ptr [ebp+14h], 0
.text:00402E77                 mov     eax, 57h ; 'W'
.text:00402E7C                 jmp     loc_4027C7
.text:00402E81 ; ---------------------------------------------------------------------------
.text:00402E81
.text:00402E81 loc_402E81:                             ; CODE XREF: sub_402670+6C3↑j
.text:00402E81                 mov     edi, [esp+5Ch+var_14]
.text:00402E85                 test    edi, edi
.text:00402E87                 jnz     short loc_402E9F
.text:00402E89
.text:00402E89 loc_402E89:                             ; CODE XREF: sub_402670+865↓j
.text:00402E89                 mov     edx, [ebp+14h]
.text:00402E8C                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402E8F                 call    strlen
.text:00402E94                 add     [ebp+14h], eax
.text:00402E97                 inc     dword ptr [ebp+0]
.text:00402E9A                 jmp     loc_4029C8
.text:00402E9F ; ---------------------------------------------------------------------------
.text:00402E9F
.text:00402E9F loc_402E9F:                             ; CODE XREF: sub_402670+817↑j
.text:00402E9F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402EA6                 call    ds:libintl_gettext
.text:00402EAC                 mov     ecx, [ebp+0]
.text:00402EAF                 mov     ebx, [esp+5Ch+arg_4]
.text:00402EB3                 mov     edi, [ebx+ecx*4]
.text:00402EB6                 mov     ecx, ds:_iob
.text:00402EBC                 mov     [esp+5Ch+var_50], edi
.text:00402EC0                 mov     esi, [ebx]
.text:00402EC2                 add     ecx, 40h ; '@'
.text:00402EC5                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402EC9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402ECC                 mov     [esp+5Ch+MaxCount], esi
.text:00402ED0                 call    fprintf
.text:00402ED5                 jmp     short loc_402E89
.text:00402ED7 ; ---------------------------------------------------------------------------
.text:00402ED7
.text:00402ED7 loc_402ED7:                             ; CODE XREF: sub_402670+6A0↑j
.text:00402ED7                 mov     edx, [ebp+14h]
.text:00402EDA                 mov     ebx, edi
.text:00402EDC                 mov     ecx, [esi]
.text:00402EDE                 sub     ebx, edx
.text:00402EE0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402EE3                 call    strlen
.text:00402EE8                 cmp     ebx, eax
.text:00402EEA                 jz      short loc_402F12
.text:00402EEC                 mov     ebx, [esp+5Ch+var_2C]
.text:00402EF0                 test    ebx, ebx
.text:00402EF2                 jz      short loc_402F01
.text:00402EF4                 mov     [esp+5Ch+var_34], 1
.text:00402EFC                 jmp     loc_402D16
.text:00402F01 ; ---------------------------------------------------------------------------
.text:00402F01
.text:00402F01 loc_402F01:                             ; CODE XREF: sub_402670+882↑j
.text:00402F01                 mov     [esp+5Ch+var_2C], esi
.text:00402F05                 mov     ecx, [esp+5Ch+var_3C]
.text:00402F09                 mov     [esp+5Ch+var_38], ecx
.text:00402F0D                 jmp     loc_402D16
.text:00402F12 ; ---------------------------------------------------------------------------
.text:00402F12
.text:00402F12 loc_402F12:                             ; CODE XREF: sub_402670+87A↑j
.text:00402F12                 mov     [esp+5Ch+var_2C], esi
.text:00402F16                 mov     eax, [esp+5Ch+var_3C]
.text:00402F1A                 mov     [esp+5Ch+var_30], 1
.text:00402F22                 mov     [esp+5Ch+var_38], eax
.text:00402F26                 jmp     loc_402D25
.text:00402F2B ; ---------------------------------------------------------------------------
.text:00402F2B
.text:00402F2B loc_402F2B:                             ; CODE XREF: sub_402670+646↑j
.text:00402F2B                 mov     edx, [ebp+0]
.text:00402F2E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402F32                 jz      short loc_402F49
.text:00402F34                 mov     ebx, [esp+5Ch+arg_4]
.text:00402F38                 lea     esi, [edx+1]
.text:00402F3B                 mov     [ebp+0], esi
.text:00402F3E                 mov     edi, [ebx+edx*4]
.text:00402F41                 mov     [ebp+0Ch], edi
.text:00402F44                 jmp     loc_402CC2
.text:00402F49 ; ---------------------------------------------------------------------------
.text:00402F49
.text:00402F49 loc_402F49:                             ; CODE XREF: sub_402670+8C2↑j
.text:00402F49                 mov     edi, [esp+5Ch+var_14]
.text:00402F4D                 test    edi, edi
.text:00402F4F                 jnz     short loc_402F6C
.text:00402F51
.text:00402F51 loc_402F51:                             ; CODE XREF: sub_402670+92C↓j
.text:00402F51                 mov     [ebp+8], esi
.text:00402F54                 mov     ebp, [esp+5Ch+Str]
.text:00402F58                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402F5C                 jz      short loc_402F68
.text:00402F5E                 mov     bl, 3Fh ; '?'
.text:00402F60
.text:00402F60 loc_402F60:                             ; CODE XREF: sub_402670+8FA↓j
.text:00402F60                 movsx   eax, bl
.text:00402F63                 jmp     loc_4027C7
.text:00402F68 ; ---------------------------------------------------------------------------
.text:00402F68
.text:00402F68 loc_402F68:                             ; CODE XREF: sub_402670+8EC↑j
.text:00402F68                 mov     bl, 3Ah ; ':'
.text:00402F6A                 jmp     short loc_402F60
.text:00402F6C ; ---------------------------------------------------------------------------
.text:00402F6C
.text:00402F6C loc_402F6C:                             ; CODE XREF: sub_402670+8DF↑j
.text:00402F6C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402F73                 call    ds:libintl_gettext
.text:00402F79                 mov     [esp+5Ch+var_50], esi
.text:00402F7D                 mov     edx, [esp+5Ch+arg_4]
.text:00402F81                 mov     ecx, ds:_iob
.text:00402F87                 mov     ebx, [edx]
.text:00402F89                 add     ecx, 40h ; '@'
.text:00402F8C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402F90                 mov     [esp+5Ch+MaxCount], ebx
.text:00402F94                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402F97                 call    fprintf
.text:00402F9C                 jmp     short loc_402F51
.text:00402F9C ; ---------------------------------------------------------------------------
.text:00402F9E                 align 10h
.text:00402FA0
.text:00402FA0 loc_402FA0:                             ; CODE XREF: sub_402670+54C↑j
.text:00402FA0                                         ; sub_402670+555↑j
.text:00402FA0                 mov     eax, [esp+5Ch+var_14]
.text:00402FA4                 test    eax, eax
.text:00402FA6                 jz      short loc_402FDF
.text:00402FA8                 mov     ebx, [ebp+1Ch]
.text:00402FAB                 test    ebx, ebx
.text:00402FAD                 jz      short loc_402FE7
.text:00402FAF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402FB6
.text:00402FB6 loc_402FB6:                             ; CODE XREF: sub_402670+97E↓j
.text:00402FB6                 call    ds:libintl_gettext
.text:00402FBC                 mov     [esp+5Ch+var_50], esi
.text:00402FC0                 mov     ebx, [esp+5Ch+arg_4]
.text:00402FC4                 mov     edx, ds:_iob
.text:00402FCA                 mov     esi, [ebx]
.text:00402FCC                 add     edx, 40h ; '@'
.text:00402FCF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402FD3                 mov     [esp+5Ch+MaxCount], esi
.text:00402FD7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402FDA                 call    fprintf
.text:00402FDF
.text:00402FDF loc_402FDF:                             ; CODE XREF: sub_402670+936↑j
.text:00402FDF                 mov     [ebp+8], edi
.text:00402FE2                 jmp     loc_4029C8
.text:00402FE7 ; ---------------------------------------------------------------------------
.text:00402FE7
.text:00402FE7 loc_402FE7:                             ; CODE XREF: sub_402670+93D↑j
.text:00402FE7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402FEE                 jmp     short loc_402FB6
.text:00402FF0 ; ---------------------------------------------------------------------------
.text:00402FF0
.text:00402FF0 loc_402FF0:                             ; CODE XREF: sub_402670+26E↑j
.text:00402FF0                 mov     edi, [esp+5Ch+var_14]
.text:00402FF4                 test    edi, edi
.text:00402FF6                 jnz     short loc_40300E
.text:00402FF8
.text:00402FF8 loc_402FF8:                             ; CODE XREF: sub_402670+9D4↓j
.text:00402FF8                 mov     edx, [ebp+14h]
.text:00402FFB                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402FFE                 call    strlen
.text:00403003                 add     [ebp+14h], eax
.text:00403006                 inc     dword ptr [ebp+0]
.text:00403009                 jmp     loc_402B4E
.text:0040300E ; ---------------------------------------------------------------------------
.text:0040300E
.text:0040300E loc_40300E:                             ; CODE XREF: sub_402670+986↑j
.text:0040300E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00403015                 call    ds:libintl_gettext
.text:0040301B                 mov     ebx, [ebp+0]
.text:0040301E                 mov     edi, [esp+5Ch+arg_4]
.text:00403022                 mov     ecx, [edi+ebx*4]
.text:00403025                 mov     ebx, ds:_iob
.text:0040302B                 mov     [esp+5Ch+var_50], ecx
.text:0040302F                 mov     esi, [edi]
.text:00403031                 add     ebx, 40h ; '@'
.text:00403034                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403038                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040303B                 mov     [esp+5Ch+MaxCount], esi
.text:0040303F                 call    fprintf
.text:00403044                 jmp     short loc_402FF8
.text:00403046 ; ---------------------------------------------------------------------------
.text:00403046
.text:00403046 loc_403046:                             ; CODE XREF: sub_402670+246↑j
.text:00403046                 mov     ecx, [ebp+14h]
.text:00403049                 mov     ebx, edi
.text:0040304B                 mov     edx, [esi]
.text:0040304D                 sub     ebx, ecx
.text:0040304F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403052                 call    strlen
.text:00403057                 cmp     ebx, eax
.text:00403059                 jz      short loc_4030B1
.text:0040305B                 mov     ebx, [esp+5Ch+var_18]
.text:0040305F                 test    ebx, ebx
.text:00403061                 jz      short loc_4030A0
.text:00403063                 mov     edx, [esp+5Ch+arg_14]
.text:00403067                 test    edx, edx
.text:00403069                 jnz     short loc_403077
.text:0040306B                 mov     ecx, [esp+5Ch+var_18]
.text:0040306F                 mov     ebx, [esi+4]
.text:00403072                 cmp     [ecx+4], ebx
.text:00403075                 jz      short loc_403084
.text:00403077
.text:00403077 loc_403077:                             ; CODE XREF: sub_402670+9F9↑j
.text:00403077                                         ; sub_402670+A1A↓j ...
.text:00403077                 mov     [esp+5Ch+var_20], 1
.text:0040307F                 jmp     loc_4028BC
.text:00403084 ; ---------------------------------------------------------------------------
.text:00403084
.text:00403084 loc_403084:                             ; CODE XREF: sub_402670+A05↑j
.text:00403084                 mov     edx, [esi+8]
.text:00403087                 cmp     [ecx+8], edx
.text:0040308A                 jnz     short loc_403077
.text:0040308C                 mov     ebx, [esi+0Ch]
.text:0040308F                 cmp     [ecx+0Ch], ebx
.text:00403092                 jnz     short loc_403077
.text:00403094                 jmp     loc_4028BC
.text:00403094 ; ---------------------------------------------------------------------------
.text:00403099                 align 10h
.text:004030A0
.text:004030A0 loc_4030A0:                             ; CODE XREF: sub_402670+9F1↑j
.text:004030A0                 mov     [esp+5Ch+var_18], esi
.text:004030A4                 mov     eax, [esp+5Ch+var_28]
.text:004030A8                 mov     [esp+5Ch+var_24], eax
.text:004030AC                 jmp     loc_4028BC
.text:004030B1 ; ---------------------------------------------------------------------------
.text:004030B1
.text:004030B1 loc_4030B1:                             ; CODE XREF: sub_402670+9E9↑j
.text:004030B1                 mov     [esp+5Ch+var_18], esi
.text:004030B5                 mov     ecx, [esp+5Ch+var_28]
.text:004030B9                 mov     [esp+5Ch+var_1C], 1
.text:004030C1                 mov     [esp+5Ch+var_24], ecx
.text:004030C5                 jmp     loc_4028D0
.text:004030CA ; ---------------------------------------------------------------------------
.text:004030CA
.text:004030CA loc_4030CA:                             ; CODE XREF: sub_402670+1BF↑j
.text:004030CA                 mov     eax, [esp+5Ch+Str]
.text:004030CE                 movsx   esi, dl
.text:004030D1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004030D5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004030D8                 call    strchr
.text:004030DD                 test    eax, eax
.text:004030DF                 jnz     loc_402B90
.text:004030E5                 jmp     loc_402835
.text:004030EA ; ---------------------------------------------------------------------------
.text:004030EA
.text:004030EA loc_4030EA:                             ; CODE XREF: sub_402670+17C↑j
.text:004030EA                 mov     ecx, 1
.text:004030EF                 jmp     loc_4027F2
.text:004030F4 ; ---------------------------------------------------------------------------
.text:004030F4
.text:004030F4 loc_4030F4:                             ; CODE XREF: sub_402670+D4↑j
.text:004030F4                                         ; sub_402670+130↑j
.text:004030F4                 mov     eax, [ebp+20h]
.text:004030F7                 cmp     eax, [ebp+24h]
.text:004030FA                 jz      loc_4027D0
.text:00403100                 mov     [ebp+0], eax
.text:00403103                 jmp     loc_4027D0
.text:00403108 ; ---------------------------------------------------------------------------
.text:00403108
.text:00403108 loc_403108:                             ; CODE XREF: sub_402670+FE↑j
.text:00403108                 mov     [ebp+20h], eax
.text:0040310B                 jmp     loc_402790
.text:00403110 ; ---------------------------------------------------------------------------
.text:00403110
.text:00403110 loc_403110:                             ; CODE XREF: sub_402670+CA↑j
.text:00403110                 mov     edx, [ebp+20h]
.text:00403113                 mov     eax, [ebp+24h]
.text:00403116                 cmp     edx, eax
.text:00403118                 jz      short loc_403190
.text:0040311A                 cmp     eax, ebx
.text:0040311C                 jz      short loc_403131
.text:0040311E                 mov     [esp+5Ch+Str2], ebp
.text:00403122                 mov     ebx, [esp+5Ch+arg_4]
.text:00403126                 mov     [esp+5Ch+Str1], ebx
.text:00403129                 call    sub_403320
.text:0040312E                 mov     ebx, [ebp+0]
.text:00403131
.text:00403131 loc_403131:                             ; CODE XREF: sub_402670+AAC↑j
.text:00403131                                         ; sub_402670+B22↓j ...
.text:00403131                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403135                 jge     short loc_403180
.text:00403137                 mov     esi, [esp+5Ch+arg_4]
.text:0040313B                 mov     eax, [esi+ebx*4]
.text:0040313E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403141                 jz      short loc_403188
.text:00403143                 lea     esi, [esi+0]
.text:00403149                 lea     edi, [edi+0]
.text:00403150
.text:00403150 loc_403150:                             ; CODE XREF: sub_402670+AFC↓j
.text:00403150                                         ; sub_402670+B1C↓j
.text:00403150                 lea     eax, [ebx+1]
.text:00403153                 mov     ebx, eax
.text:00403155                 mov     [ebp+0], eax
.text:00403158                 cmp     eax, [esp+5Ch+arg_0]
.text:0040315C                 jge     short loc_403180
.text:0040315E                 mov     edi, [esp+5Ch+arg_4]
.text:00403162                 mov     edx, [edi+eax*4]
.text:00403165                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00403168                 jz      short loc_403170
.text:0040316A
.text:0040316A loc_40316A:                             ; CODE XREF: sub_402670+B04↓j
.text:0040316A                 mov     ebx, eax
.text:0040316C                 jmp     short loc_403150
.text:0040316C ; ---------------------------------------------------------------------------
.text:0040316E                 align 10h
.text:00403170
.text:00403170 loc_403170:                             ; CODE XREF: sub_402670+AF8↑j
.text:00403170                 cmp     byte ptr [edx+1], 0
.text:00403174                 jz      short loc_40316A
.text:00403176                 lea     esi, [esi+0]
.text:00403179                 lea     edi, [edi+0]
.text:00403180
.text:00403180 loc_403180:                             ; CODE XREF: sub_402670+AC5↑j
.text:00403180                                         ; sub_402670+AEC↑j ...
.text:00403180                 mov     [ebp+24h], ebx
.text:00403183                 jmp     loc_402740
.text:00403188 ; ---------------------------------------------------------------------------
.text:00403188
.text:00403188 loc_403188:                             ; CODE XREF: sub_402670+AD1↑j
.text:00403188                 cmp     byte ptr [eax+1], 0
.text:0040318C                 jz      short loc_403150
.text:0040318E                 jmp     short loc_403180
.text:00403190 ; ---------------------------------------------------------------------------
.text:00403190
.text:00403190 loc_403190:                             ; CODE XREF: sub_402670+AA8↑j
.text:00403190                 cmp     edx, ebx
.text:00403192                 jz      short loc_403131
.text:00403194                 mov     [ebp+20h], ebx
.text:00403197                 jmp     short loc_403131
.text:00403199 ; ---------------------------------------------------------------------------
.text:00403199
.text:00403199 loc_403199:                             ; CODE XREF: sub_402670+88↑j
.text:00403199                 mov     dword ptr [ebp+18h], 0
.text:004031A0                 mov     esi, [esp+5Ch+Str]
.text:004031A4
.text:004031A4 loc_4031A4:                             ; CODE XREF: sub_402670+B49↓j
.text:004031A4                 inc     esi
.text:004031A5                 jmp     loc_402708
.text:004031A5 ; ---------------------------------------------------------------------------
.text:004031AA                 align 10h
.text:004031B0
.text:004031B0 loc_4031B0:                             ; CODE XREF: sub_402670+80↑j
.text:004031B0                 mov     dword ptr [ebp+18h], 2
.text:004031B7                 mov     esi, ecx
.text:004031B9                 jmp     short loc_4031A4
.text:004031B9 ; ---------------------------------------------------------------------------
.text:004031BB                 align 10h
.text:004031C0
.text:004031C0 loc_4031C0:                             ; CODE XREF: sub_402670+69↑j
.text:004031C0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004031C7                 call    getenv
.text:004031CC                 test    eax, eax
.text:004031CE                 jz      loc_4026E4
.text:004031D4                 jmp     loc_4026DF
.text:004031D4 ; ---------------------------------------------------------------------------
.text:004031D9                 align 10h
.text:004031E0
.text:004031E0 loc_4031E0:                             ; CODE XREF: sub_402670+3F↑j
.text:004031E0                 mov     dword ptr [ebp+0], 1
.text:004031E7                 mov     ebx, 1
.text:004031EC                 jmp     loc_4026C0
.text:004031EC sub_402670      endp
.text:004031EC
.text:004031F1 ; ---------------------------------------------------------------------------
.text:004031F1                 jmp     short sub_403200
.text:004031F1 ; ---------------------------------------------------------------------------
.text:004031F3                 align 10h
.text:00403200
.text:00403200 ; =============== S U B R O U T I N E =======================================
.text:00403200
.text:00403200
.text:00403200 ; int __cdecl sub_403200(int, int, char *, int, int, int, int)
.text:00403200 sub_403200      proc near               ; CODE XREF: .text:004031F1↑j
.text:00403200                                         ; sub_4039A0+3A↓p ...
.text:00403200
.text:00403200 var_2C          = dword ptr -2Ch
.text:00403200 var_28          = dword ptr -28h
.text:00403200 Str             = dword ptr -24h
.text:00403200 var_20          = dword ptr -20h
.text:00403200 var_1C          = dword ptr -1Ch
.text:00403200 var_18          = dword ptr -18h
.text:00403200 var_14          = dword ptr -14h
.text:00403200 var_10          = dword ptr -10h
.text:00403200 arg_0           = dword ptr  4
.text:00403200 arg_4           = dword ptr  8
.text:00403200 arg_8           = dword ptr  0Ch
.text:00403200 arg_C           = dword ptr  10h
.text:00403200 arg_10          = dword ptr  14h
.text:00403200 arg_14          = dword ptr  18h
.text:00403200 arg_18          = dword ptr  1Ch
.text:00403200
.text:00403200                 sub     esp, 2Ch
.text:00403203                 mov     edx, dword_406020
.text:00403209                 mov     [esp+2Ch+var_10], offset dword_407150 ; int
.text:00403211                 mov     ecx, dword_406024
.text:00403217                 mov     ds:dword_407150, edx
.text:0040321D                 mov     edx, [esp+2Ch+arg_18]
.text:00403221                 mov     ds:dword_407154, ecx
.text:00403227                 mov     ecx, [esp+2Ch+arg_14]
.text:0040322B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040322F                 mov     edx, [esp+2Ch+arg_10]
.text:00403233                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403237                 mov     ecx, [esp+2Ch+arg_C]
.text:0040323B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040323F                 mov     edx, [esp+2Ch+arg_8]
.text:00403243                 mov     [esp+2Ch+var_20], ecx ; int
.text:00403247                 mov     ecx, [esp+2Ch+arg_4]
.text:0040324B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040324F                 mov     edx, [esp+2Ch+arg_0]
.text:00403253                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403257                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040325A                 call    sub_402670
.text:0040325F                 mov     ecx, ds:dword_407150
.text:00403265                 mov     dword_406020, ecx
.text:0040326B                 mov     ecx, ds:dword_40715C
.text:00403271                 mov     ds:dword_407300, ecx
.text:00403277                 mov     ecx, ds:dword_407158
.text:0040327D                 mov     dword_406028, ecx
.text:00403283                 add     esp, 2Ch
.text:00403286                 retn
.text:00403286 sub_403200      endp
.text:00403286
.text:00403286 ; ---------------------------------------------------------------------------
.text:00403287                 align 10h
.text:00403290                 sub     esp, 2Ch
.text:00403293                 mov     edx, dword_406020
.text:00403299                 mov     dword ptr [esp+1Ch], offset dword_407150
.text:004032A1                 mov     ecx, dword_406024
.text:004032A7                 mov     dword ptr [esp+18h], 1
.text:004032AF                 mov     ds:dword_407150, edx
.text:004032B5                 mov     edx, [esp+38h]
.text:004032B9                 mov     ds:dword_407154, ecx
.text:004032BF                 mov     ecx, [esp+34h]
.text:004032C3                 mov     [esp+8], edx
.text:004032C7                 mov     edx, [esp+30h]
.text:004032CB                 mov     [esp+4], ecx
.text:004032CF                 mov     dword ptr [esp+14h], 0
.text:004032D7                 mov     dword ptr [esp+10h], 0
.text:004032DF                 mov     dword ptr [esp+0Ch], 0
.text:004032E7                 mov     [esp], edx
.text:004032EA                 call    sub_402670
.text:004032EF                 mov     ecx, ds:dword_407150
.text:004032F5                 mov     dword_406020, ecx
.text:004032FB                 mov     ecx, ds:dword_40715C
.text:00403301                 mov     ds:dword_407300, ecx
.text:00403307                 mov     ecx, ds:dword_407158
.text:0040330D                 mov     dword_406028, ecx
.text:00403313                 add     esp, 2Ch
.text:00403316                 retn
.text:00403316 ; ---------------------------------------------------------------------------
.text:00403317                 align 10h
.text:00403320
.text:00403320 ; =============== S U B R O U T I N E =======================================
.text:00403320
.text:00403320
.text:00403320 sub_403320      proc near               ; CODE XREF: sub_402670+113↑p
.text:00403320                                         ; sub_402670+AB9↑p
.text:00403320
.text:00403320 var_2C          = dword ptr -2Ch
.text:00403320 var_28          = dword ptr -28h
.text:00403320 var_24          = dword ptr -24h
.text:00403320 var_20          = dword ptr -20h
.text:00403320 var_1C          = dword ptr -1Ch
.text:00403320 var_18          = dword ptr -18h
.text:00403320 var_14          = dword ptr -14h
.text:00403320 arg_0           = dword ptr  4
.text:00403320 arg_4           = dword ptr  8
.text:00403320
.text:00403320                 push    ebp
.text:00403321                 push    edi
.text:00403322                 push    esi
.text:00403323                 push    ebx
.text:00403324                 sub     esp, 1Ch
.text:00403327                 mov     ecx, [esp+2Ch+arg_4]
.text:0040332B                 mov     eax, [esp+2Ch+arg_4]
.text:0040332F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403333                 mov     edx, [ecx+20h]
.text:00403336                 mov     edi, [esp+2Ch+arg_0]
.text:0040333A                 mov     ecx, [ebx]
.text:0040333C                 mov     [esp+2Ch+var_2C], edx
.text:0040333F                 mov     [esp+2Ch+var_14], edx
.text:00403343                 mov     edx, [eax+24h]
.text:00403346                 mov     [esp+2Ch+var_28], ecx
.text:0040334A                 mov     [esp+2Ch+var_1C], ecx
.text:0040334E                 cmp     ecx, edx
.text:00403350                 mov     [esp+2Ch+var_18], edx
.text:00403354                 jle     short loc_4033D0
.text:00403356                 mov     esi, [esp+2Ch+var_2C]
.text:00403359                 cmp     edx, esi
.text:0040335B                 jle     short loc_4033D0
.text:0040335D                 lea     esi, [esi+0]
.text:00403360
.text:00403360 loc_403360:                             ; CODE XREF: sub_403320+A1↓j
.text:00403360                 mov     ebx, [esp+2Ch+var_1C]
.text:00403364                 mov     edx, [esp+2Ch+var_18]
.text:00403368                 mov     ebp, [esp+2Ch+var_18]
.text:0040336C                 mov     eax, [esp+2Ch+var_14]
.text:00403370                 sub     ebx, edx
.text:00403372                 mov     [esp+2Ch+var_20], ebx
.text:00403376                 sub     ebp, eax
.text:00403378                 cmp     ebx, ebp
.text:0040337A                 jle     short loc_4033F5
.text:0040337C                 xor     esi, esi
.text:0040337E                 cmp     esi, ebp
.text:00403380                 jge     short loc_4033AD
.text:00403382                 mov     ecx, [esp+2Ch+var_1C]
.text:00403386                 sub     ecx, ebp
.text:00403388                 mov     [esp+2Ch+var_24], ecx
.text:0040338C                 lea     esi, [esi+0]
.text:00403390
.text:00403390 loc_403390:                             ; CODE XREF: sub_403320+8B↓j
.text:00403390                 mov     ecx, [esp+2Ch+var_14]
.text:00403394                 mov     edx, [esp+2Ch+var_24]
.text:00403398                 add     ecx, esi
.text:0040339A                 add     edx, esi
.text:0040339C                 mov     ebx, [edi+ecx*4]
.text:0040339F                 mov     eax, [edi+edx*4]
.text:004033A2                 inc     esi
.text:004033A3                 cmp     esi, ebp
.text:004033A5                 mov     [edi+ecx*4], eax
.text:004033A8                 mov     [edi+edx*4], ebx
.text:004033AB                 jl      short loc_403390
.text:004033AD
.text:004033AD loc_4033AD:                             ; CODE XREF: sub_403320+60↑j
.text:004033AD                 sub     [esp+2Ch+var_1C], ebp
.text:004033B1
.text:004033B1 loc_4033B1:                             ; CODE XREF: sub_403320+107↓j
.text:004033B1                 mov     eax, [esp+2Ch+var_18]
.text:004033B5                 cmp     [esp+2Ch+var_1C], eax
.text:004033B9                 jle     short loc_4033D0
.text:004033BB                 mov     ebp, [esp+2Ch+var_14]
.text:004033BF                 cmp     eax, ebp
.text:004033C1                 jg      short loc_403360
.text:004033C3                 lea     esi, [esi+0]
.text:004033C9                 lea     edi, [edi+0]
.text:004033D0
.text:004033D0 loc_4033D0:                             ; CODE XREF: sub_403320+34↑j
.text:004033D0                                         ; sub_403320+3B↑j ...
.text:004033D0                 mov     esi, [esp+2Ch+var_28]
.text:004033D4                 mov     ecx, [esp+2Ch+var_18]
.text:004033D8                 mov     eax, [esp+2Ch+var_2C]
.text:004033DB                 mov     edi, [esp+2Ch+arg_4]
.text:004033DF                 mov     edx, [esp+2Ch+var_28]
.text:004033E3                 sub     esi, ecx
.text:004033E5                 add     esi, eax
.text:004033E7                 mov     [edi+20h], esi
.text:004033EA                 mov     [edi+24h], edx
.text:004033ED                 add     esp, 1Ch
.text:004033F0                 pop     ebx
.text:004033F1                 pop     esi
.text:004033F2                 pop     edi
.text:004033F3                 pop     ebp
.text:004033F4                 retn
.text:004033F5 ; ---------------------------------------------------------------------------
.text:004033F5
.text:004033F5 loc_4033F5:                             ; CODE XREF: sub_403320+5A↑j
.text:004033F5                 xor     esi, esi
.text:004033F7                 cmp     esi, [esp+2Ch+var_20]
.text:004033FB                 jge     short loc_40341F
.text:004033FD                 lea     esi, [esi+0]
.text:00403400
.text:00403400 loc_403400:                             ; CODE XREF: sub_403320+FD↓j
.text:00403400                 mov     ebx, [esp+2Ch+var_14]
.text:00403404                 mov     ebp, [esp+2Ch+var_18]
.text:00403408                 add     ebx, esi
.text:0040340A                 add     ebp, esi
.text:0040340C                 mov     edx, [edi+ebx*4]
.text:0040340F                 inc     esi
.text:00403410                 cmp     esi, [esp+2Ch+var_20]
.text:00403414                 mov     ecx, [edi+ebp*4]
.text:00403417                 mov     [edi+ebx*4], ecx
.text:0040341A                 mov     [edi+ebp*4], edx
.text:0040341D                 jl      short loc_403400
.text:0040341F
.text:0040341F loc_40341F:                             ; CODE XREF: sub_403320+DB↑j
.text:0040341F                 mov     esi, [esp+2Ch+var_20]
.text:00403423                 add     [esp+2Ch+var_14], esi
.text:00403427                 jmp     short loc_4033B1
.text:00403427 sub_403320      endp
.text:00403427
.text:00403427 ; ---------------------------------------------------------------------------
.text:00403429                 align 20h
.text:00403440                 sub     esp, 0Ch
.text:00403443                 mov     edx, [esp+14h]
.text:00403447                 mov     dword ptr [esp+4], 5
.text:0040344F                 mov     [esp+8], edx
.text:00403453                 mov     edx, [esp+10h]
.text:00403457                 mov     [esp], edx
.text:0040345A                 call    sub_404AE0
.text:0040345F                 add     esp, 0Ch
.text:00403462                 retn
.text:00403462 ; ---------------------------------------------------------------------------
.text:00403463                 align 10h
.text:00403470
.text:00403470 ; =============== S U B R O U T I N E =======================================
.text:00403470
.text:00403470
.text:00403470 ; int __cdecl sub_403470(char *)
.text:00403470 sub_403470      proc near               ; CODE XREF: sub_4018E0+40B↑p
.text:00403470
.text:00403470 var_C           = dword ptr -0Ch
.text:00403470 var_8           = dword ptr -8
.text:00403470 var_4           = dword ptr -4
.text:00403470 arg_0           = dword ptr  4
.text:00403470
.text:00403470                 sub     esp, 0Ch
.text:00403473                 mov     edx, [esp+0Ch+arg_0]
.text:00403477                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040347F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00403486                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040348A                 call    sub_404AE0
.text:0040348F                 add     esp, 0Ch
.text:00403492                 retn
.text:00403492 sub_403470      endp
.text:00403492
.text:00403492 ; ---------------------------------------------------------------------------
.text:00403493                 align 10h
.text:004034A0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004034A0                                         ; DATA XREF: .data:off_406030↓o
.text:004034D2 ; const char aSSS[]
.text:004034D2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403790+50↓o
.text:004034DE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004034DE                                         ; DATA XREF: sub_403790:loc_403831↓o
.text:004034EE                 align 20h
.text:00403500 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403500                                         ; DATA XREF: sub_403790+100↓o
.text:00403500                 db 'ere is NO',0Ah
.text:00403500                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403500                 db 'R PURPOSE.',0Ah,0
.text:00403598 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403598                                         ; DATA XREF: sub_403790:loc_4038D1↓o
.text:004035AF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:004035AF                                         ; DATA XREF: sub_403790:loc_4038DD↓o
.text:004035CB                 align 20h
.text:004035E0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004035E0                                         ; DATA XREF: sub_403790:loc_4038E9↓o
.text:004035E0                 db 'and %s.',0Ah,0
.text:00403600 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403600                                         ; DATA XREF: sub_403790:loc_4038F5↓o
.text:00403600                 db '%s, and %s.',0Ah,0
.text:00403624                 align 20h
.text:00403640 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403640                                         ; DATA XREF: sub_403790:loc_403901↓o
.text:00403640                 db '%s, %s, and %s.',0Ah,0
.text:00403668                 align 20h
.text:00403680 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403680                                         ; DATA XREF: sub_403790:loc_40390D↓o
.text:00403680                 db '%s, %s, %s, and %s.',0Ah,0
.text:004036AC                 align 20h
.text:004036C0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004036C0                                         ; DATA XREF: sub_403790:loc_403919↓o
.text:004036C0                 db '%s, %s, %s, %s,',0Ah
.text:004036C0                 db 'and %s.',0Ah,0
.text:004036F0                 align 20h
.text:00403700 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403700                                         ; DATA XREF: sub_403790:loc_403925↓o
.text:00403700                 db '%s, %s, %s, %s,',0Ah
.text:00403700                 db '%s, and %s.',0Ah,0
.text:00403734                 align 10h
.text:00403740 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403740                                         ; DATA XREF: sub_403790:def_4037FD↓o
.text:00403740                 db '%s, %s, %s, %s,',0Ah
.text:00403740                 db '%s, %s, and others.',0Ah,0
.text:0040377C ; const char aSS[]
.text:0040377C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_403790+1B5↓o
.text:00403783                 align 10h
.text:00403790
.text:00403790 ; =============== S U B R O U T I N E =======================================
.text:00403790
.text:00403790
.text:00403790 ; int __cdecl sub_403790(FILE *, FILE *, int, int, va_list)
.text:00403790 sub_403790      proc near               ; CODE XREF: sub_403960+2A↓p
.text:00403790
.text:00403790 Stream          = dword ptr -2Ch
.text:00403790 Format          = dword ptr -28h
.text:00403790 ArgList         = dword ptr -24h
.text:00403790 var_20          = dword ptr -20h
.text:00403790 var_1C          = dword ptr -1Ch
.text:00403790 var_14          = dword ptr -14h
.text:00403790 arg_0           = dword ptr  4
.text:00403790 arg_4           = dword ptr  8
.text:00403790 arg_8           = dword ptr  0Ch
.text:00403790 arg_C           = dword ptr  10h
.text:00403790 arg_10          = dword ptr  14h
.text:00403790
.text:00403790                 push    ebp
.text:00403791                 push    edi
.text:00403792                 push    esi
.text:00403793                 push    ebx
.text:00403794                 sub     esp, 1Ch
.text:00403797                 xor     ebx, ebx
.text:00403799                 mov     edi, [esp+2Ch+arg_10]
.text:0040379D                 mov     edx, [esp+2Ch+arg_8]
.text:004037A1                 mov     esi, [esp+2Ch+arg_0]
.text:004037A5                 mov     eax, [edi]
.text:004037A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004037AB                 mov     [esp+2Ch+var_14], edx
.text:004037AF                 mov     ebp, [esp+2Ch+arg_C]
.text:004037B3                 lea     edx, [edi+4]
.text:004037B6                 test    eax, eax
.text:004037B8                 jz      short loc_4037CC
.text:004037BA                 lea     esi, [esi+0]
.text:004037C0
.text:004037C0 loc_4037C0:                             ; CODE XREF: sub_403790+3A↓j
.text:004037C0                 mov     eax, edx
.text:004037C2                 inc     ebx
.text:004037C3                 mov     eax, [eax]
.text:004037C5                 add     edx, 4
.text:004037C8                 test    eax, eax
.text:004037CA                 jnz     short loc_4037C0
.text:004037CC
.text:004037CC loc_4037CC:                             ; CODE XREF: sub_403790+28↑j
.text:004037CC                 test    ecx, ecx
.text:004037CE                 jz      loc_40393D
.text:004037D4                 mov     [esp+2Ch+var_1C], ebp
.text:004037D8                 mov     edx, [esp+2Ch+var_14]
.text:004037DC                 mov     [esp+2Ch+ArgList], ecx
.text:004037E0                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:004037E8                 mov     [esp+2Ch+var_20], edx
.text:004037EC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004037EF                 call    fprintf
.text:004037F4
.text:004037F4 loc_4037F4:                             ; CODE XREF: sub_403790+1C9↓j
.text:004037F4                 cmp     ebx, 9          ; switch 10 cases
.text:004037F7                 ja      def_4037FD      ; jumptable 004037FD default case
.text:004037FD                 jmp     ds:jpt_4037FD[ebx*4] ; switch jump
.text:004037FD ; ---------------------------------------------------------------------------
.text:00403804 jpt_4037FD      dd offset loc_40382C    ; DATA XREF: sub_403790+6D↑r
.text:00403804                 dd offset loc_403831    ; jump table for switch statement
.text:00403804                 dd offset loc_4038D1
.text:00403804                 dd offset loc_4038DD
.text:00403804                 dd offset loc_4038E9
.text:00403804                 dd offset loc_4038F5
.text:00403804                 dd offset loc_403901
.text:00403804                 dd offset loc_40390D
.text:00403804                 dd offset loc_403919
.text:00403804                 dd offset loc_403925
.text:0040382C ; ---------------------------------------------------------------------------
.text:0040382C
.text:0040382C loc_40382C:                             ; CODE XREF: sub_403790+6D↑j
.text:0040382C                                         ; DATA XREF: sub_403790:jpt_4037FD↑o
.text:0040382C                 call    abort           ; jumptable 004037FD case 0
.text:00403831 ; ---------------------------------------------------------------------------
.text:00403831
.text:00403831 loc_403831:                             ; CODE XREF: sub_403790+6D↑j
.text:00403831                                         ; DATA XREF: sub_403790:jpt_4037FD↑o
.text:00403831                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004037FD case 1
.text:00403838                 nop
.text:00403839                 lea     esi, [esi+0]
.text:00403840
.text:00403840 loc_403840:                             ; CODE XREF: sub_403790+148↓j
.text:00403840                                         ; sub_403790+154↓j ...
.text:00403840                 call    ds:libintl_gettext
.text:00403846                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040384A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040384D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403851                 call    vfprintf
.text:00403856                 mov     ebx, [esi+4]
.text:00403859                 dec     ebx
.text:0040385A                 test    ebx, ebx
.text:0040385C                 mov     [esi+4], ebx
.text:0040385F                 js      short loc_4038BF
.text:00403861                 mov     edi, [esi]
.text:00403863                 mov     byte ptr [edi], 0Ah
.text:00403866                 inc     dword ptr [esi]
.text:00403868
.text:00403868 loc_403868:                             ; CODE XREF: sub_403790+13F↓j
.text:00403868                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040386C                 mov     edx, off_406030 ; "Copyright (C) 2005 Free Software Founda"...
.text:00403872                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403875                 call    fputs
.text:0040387A                 mov     ebp, [esi+4]
.text:0040387D                 dec     ebp
.text:0040387E                 test    ebp, ebp
.text:00403880                 mov     [esi+4], ebp
.text:00403883                 js      short loc_4038AD
.text:00403885                 mov     ecx, [esi]
.text:00403887                 mov     byte ptr [ecx], 0Ah
.text:0040388A                 inc     dword ptr [esi]
.text:0040388C
.text:0040388C loc_40388C:                             ; CODE XREF: sub_403790+12D↓j
.text:0040388C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403890                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403897                 call    ds:libintl_gettext
.text:0040389D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004038A1                 add     esp, 1Ch
.text:004038A4                 pop     ebx
.text:004038A5                 pop     esi
.text:004038A6                 pop     edi
.text:004038A7                 pop     ebp
.text:004038A8                 jmp     fputs
.text:004038AD ; ---------------------------------------------------------------------------
.text:004038AD
.text:004038AD loc_4038AD:                             ; CODE XREF: sub_403790+F3↑j
.text:004038AD                 mov     [esp+2Ch+Format], esi ; File
.text:004038B1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004038B8                 call    _flsbuf
.text:004038BD                 jmp     short loc_40388C
.text:004038BF ; ---------------------------------------------------------------------------
.text:004038BF
.text:004038BF loc_4038BF:                             ; CODE XREF: sub_403790+CF↑j
.text:004038BF                 mov     [esp+2Ch+Format], esi ; File
.text:004038C3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004038CA                 call    _flsbuf
.text:004038CF                 jmp     short loc_403868
.text:004038D1 ; ---------------------------------------------------------------------------
.text:004038D1
.text:004038D1 loc_4038D1:                             ; CODE XREF: sub_403790+6D↑j
.text:004038D1                                         ; DATA XREF: sub_403790:jpt_4037FD↑o
.text:004038D1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004037FD case 2
.text:004038D8                 jmp     loc_403840
.text:004038DD ; ---------------------------------------------------------------------------
.text:004038DD
.text:004038DD loc_4038DD:                             ; CODE XREF: sub_403790+6D↑j
.text:004038DD                                         ; DATA XREF: sub_403790:jpt_4037FD↑o
.text:004038DD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004037FD case 3
.text:004038E4                 jmp     loc_403840
.text:004038E9 ; ---------------------------------------------------------------------------
.text:004038E9
.text:004038E9 loc_4038E9:                             ; CODE XREF: sub_403790+6D↑j
.text:004038E9                                         ; DATA XREF: sub_403790:jpt_4037FD↑o
.text:004038E9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004037FD case 4
.text:004038F0                 jmp     loc_403840
.text:004038F5 ; ---------------------------------------------------------------------------
.text:004038F5
.text:004038F5 loc_4038F5:                             ; CODE XREF: sub_403790+6D↑j
.text:004038F5                                         ; DATA XREF: sub_403790:jpt_4037FD↑o
.text:004038F5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004037FD case 5
.text:004038FC                 jmp     loc_403840
.text:00403901 ; ---------------------------------------------------------------------------
.text:00403901
.text:00403901 loc_403901:                             ; CODE XREF: sub_403790+6D↑j
.text:00403901                                         ; DATA XREF: sub_403790:jpt_4037FD↑o
.text:00403901                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004037FD case 6
.text:00403908                 jmp     loc_403840
.text:0040390D ; ---------------------------------------------------------------------------
.text:0040390D
.text:0040390D loc_40390D:                             ; CODE XREF: sub_403790+6D↑j
.text:0040390D                                         ; DATA XREF: sub_403790:jpt_4037FD↑o
.text:0040390D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004037FD case 7
.text:00403914                 jmp     loc_403840
.text:00403919 ; ---------------------------------------------------------------------------
.text:00403919
.text:00403919 loc_403919:                             ; CODE XREF: sub_403790+6D↑j
.text:00403919                                         ; DATA XREF: sub_403790:jpt_4037FD↑o
.text:00403919                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004037FD case 8
.text:00403920                 jmp     loc_403840
.text:00403925 ; ---------------------------------------------------------------------------
.text:00403925
.text:00403925 loc_403925:                             ; CODE XREF: sub_403790+6D↑j
.text:00403925                                         ; DATA XREF: sub_403790:jpt_4037FD↑o
.text:00403925                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004037FD case 9
.text:0040392C                 jmp     loc_403840
.text:00403931 ; ---------------------------------------------------------------------------
.text:00403931
.text:00403931 def_4037FD:                             ; CODE XREF: sub_403790+67↑j
.text:00403931                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004037FD default case
.text:00403938                 jmp     loc_403840
.text:0040393D ; ---------------------------------------------------------------------------
.text:0040393D
.text:0040393D loc_40393D:                             ; CODE XREF: sub_403790+3E↑j
.text:0040393D                 mov     [esp+2Ch+var_20], ebp
.text:00403941                 mov     ecx, [esp+2Ch+var_14]
.text:00403945                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040394D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403950                 mov     [esp+2Ch+ArgList], ecx
.text:00403954                 call    fprintf
.text:00403959                 jmp     loc_4037F4
.text:00403959 sub_403790      endp
.text:00403959
.text:00403959 ; ---------------------------------------------------------------------------
.text:0040395E                 align 10h
.text:00403960
.text:00403960 ; =============== S U B R O U T I N E =======================================
.text:00403960
.text:00403960
.text:00403960 ; int __cdecl sub_403960(FILE *, FILE *, int, int, char)
.text:00403960 sub_403960      proc near               ; CODE XREF: sub_4018E0+553↑p
.text:00403960
.text:00403960 var_1C          = dword ptr -1Ch
.text:00403960 var_18          = dword ptr -18h
.text:00403960 var_14          = dword ptr -14h
.text:00403960 var_10          = dword ptr -10h
.text:00403960 var_C           = dword ptr -0Ch
.text:00403960 arg_0           = dword ptr  4
.text:00403960 arg_4           = dword ptr  8
.text:00403960 arg_8           = dword ptr  0Ch
.text:00403960 arg_C           = dword ptr  10h
.text:00403960 arg_10          = byte ptr  14h
.text:00403960
.text:00403960                 sub     esp, 1Ch
.text:00403963                 mov     edx, [esp+1Ch+arg_C]
.text:00403967                 lea     ecx, [esp+1Ch+arg_10]
.text:0040396B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040396F                 mov     ecx, [esp+1Ch+arg_8]
.text:00403973                 mov     [esp+1Ch+var_10], edx ; int
.text:00403977                 mov     edx, [esp+1Ch+arg_4]
.text:0040397B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040397F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00403983                 mov     edx, [esp+1Ch+arg_0]
.text:00403987                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040398A                 call    sub_403790
.text:0040398F                 add     esp, 1Ch
.text:00403992                 retn
.text:00403992 sub_403960      endp
.text:00403992
.text:00403992 ; ---------------------------------------------------------------------------
.text:00403993                 align 10h
.text:004039A0
.text:004039A0 ; =============== S U B R O U T I N E =======================================
.text:004039A0
.text:004039A0
.text:004039A0 ; int __cdecl sub_4039A0(int, int, char *, int, int)
.text:004039A0 sub_4039A0      proc near               ; CODE XREF: sub_4018E0+EE↑p
.text:004039A0
.text:004039A0 var_1C          = dword ptr -1Ch
.text:004039A0 var_18          = dword ptr -18h
.text:004039A0 var_14          = dword ptr -14h
.text:004039A0 var_10          = dword ptr -10h
.text:004039A0 var_C           = dword ptr -0Ch
.text:004039A0 var_8           = dword ptr -8
.text:004039A0 var_4           = dword ptr -4
.text:004039A0 arg_0           = dword ptr  4
.text:004039A0 arg_4           = dword ptr  8
.text:004039A0 arg_8           = dword ptr  0Ch
.text:004039A0 arg_C           = dword ptr  10h
.text:004039A0 arg_10          = dword ptr  14h
.text:004039A0
.text:004039A0                 sub     esp, 1Ch
.text:004039A3                 mov     edx, [esp+1Ch+arg_C]
.text:004039A7                 mov     [esp+1Ch+var_4], 0 ; int
.text:004039AF                 mov     ecx, [esp+1Ch+arg_10]
.text:004039B3                 mov     [esp+1Ch+var_8], 0 ; int
.text:004039BB                 mov     [esp+1Ch+var_10], edx ; int
.text:004039BF                 mov     edx, [esp+1Ch+arg_4]
.text:004039C3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004039C7                 mov     ecx, [esp+1Ch+arg_8]
.text:004039CB                 mov     [esp+1Ch+var_18], edx ; int
.text:004039CF                 mov     edx, [esp+1Ch+arg_0]
.text:004039D3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004039D7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004039DA                 call    sub_403200
.text:004039DF                 add     esp, 1Ch
.text:004039E2                 retn
.text:004039E2 sub_4039A0      endp
.text:004039E2
.text:004039E2 ; ---------------------------------------------------------------------------
.text:004039E3                 align 10h
.text:004039F0                 sub     esp, 2Ch
.text:004039F3                 mov     edx, [esp+44h]
.text:004039F7                 mov     dword ptr [esp+18h], 0
.text:004039FF                 mov     ecx, [esp+40h]
.text:00403A03                 mov     dword ptr [esp+14h], 0
.text:00403A0B                 mov     [esp+1Ch], edx
.text:00403A0F                 mov     edx, [esp+3Ch]
.text:00403A13                 mov     [esp+10h], ecx
.text:00403A17                 mov     ecx, [esp+38h]
.text:00403A1B                 mov     [esp+0Ch], edx
.text:00403A1F                 mov     edx, [esp+34h]
.text:00403A23                 mov     [esp+8], ecx
.text:00403A27                 mov     [esp+4], edx
.text:00403A2B                 mov     edx, [esp+30h]
.text:00403A2F                 mov     [esp], edx
.text:00403A32                 call    sub_402670
.text:00403A37                 add     esp, 2Ch
.text:00403A3A                 retn
.text:00403A3A ; ---------------------------------------------------------------------------
.text:00403A3B                 align 10h
.text:00403A40                 sub     esp, 1Ch
.text:00403A43                 mov     edx, [esp+2Ch]
.text:00403A47                 mov     dword ptr [esp+18h], 0
.text:00403A4F                 mov     ecx, [esp+30h]
.text:00403A53                 mov     dword ptr [esp+14h], 1
.text:00403A5B                 mov     [esp+0Ch], edx
.text:00403A5F                 mov     edx, [esp+24h]
.text:00403A63                 mov     [esp+10h], ecx
.text:00403A67                 mov     ecx, [esp+28h]
.text:00403A6B                 mov     [esp+4], edx
.text:00403A6F                 mov     edx, [esp+20h]
.text:00403A73                 mov     [esp+8], ecx
.text:00403A77                 mov     [esp], edx
.text:00403A7A                 call    sub_403200
.text:00403A7F                 add     esp, 1Ch
.text:00403A82                 retn
.text:00403A82 ; ---------------------------------------------------------------------------
.text:00403A83                 align 10h
.text:00403A90                 sub     esp, 2Ch
.text:00403A93                 mov     edx, [esp+44h]
.text:00403A97                 mov     dword ptr [esp+18h], 0
.text:00403A9F                 mov     ecx, [esp+40h]
.text:00403AA3                 mov     dword ptr [esp+14h], 1
.text:00403AAB                 mov     [esp+1Ch], edx
.text:00403AAF                 mov     edx, [esp+3Ch]
.text:00403AB3                 mov     [esp+10h], ecx
.text:00403AB7                 mov     ecx, [esp+38h]
.text:00403ABB                 mov     [esp+0Ch], edx
.text:00403ABF                 mov     edx, [esp+34h]
.text:00403AC3                 mov     [esp+8], ecx
.text:00403AC7                 mov     [esp+4], edx
.text:00403ACB                 mov     edx, [esp+30h]
.text:00403ACF                 mov     [esp], edx
.text:00403AD2                 call    sub_402670
.text:00403AD7                 add     esp, 2Ch
.text:00403ADA                 retn
.text:00403ADA ; ---------------------------------------------------------------------------
.text:00403ADB                 align 10h
.text:00403AE0                 mov     edx, [esp+4]
.text:00403AE4                 mov     ds:dword_407180, edx
.text:00403AEA                 retn
.text:00403AEA ; ---------------------------------------------------------------------------
.text:00403AEB aWriteError     db 'write error',0      ; DATA XREF: sub_403B10:loc_403B59↓o
.text:00403AF7 ; const char aSS_0[]
.text:00403AF7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_403B10+77↓o
.text:00403AFE ; const char aS_2[]
.text:00403AFE aS_2            db '%s',0               ; DATA XREF: sub_403B10+A0↓o
.text:00403B01 ; ---------------------------------------------------------------------------
.text:00403B01                 jmp     short sub_403B10
.text:00403B01 ; ---------------------------------------------------------------------------
.text:00403B03                 align 10h
.text:00403B10
.text:00403B10 ; =============== S U B R O U T I N E =======================================
.text:00403B10
.text:00403B10
.text:00403B10 ; void __cdecl sub_403B10()
.text:00403B10 sub_403B10      proc near               ; CODE XREF: .text:00403B01↑j
.text:00403B10                                         ; DATA XREF: sub_4018E0+5B↑o
.text:00403B10
.text:00403B10 Stream          = dword ptr -2Ch
.text:00403B10 ErrorMessage    = dword ptr -28h
.text:00403B10 var_24          = dword ptr -24h
.text:00403B10 var_20          = byte ptr -20h
.text:00403B10 var_1C          = dword ptr -1Ch
.text:00403B10 var_9           = byte ptr -9
.text:00403B10
.text:00403B10                 push    esi
.text:00403B11                 push    ebx
.text:00403B12                 sub     esp, 24h
.text:00403B15                 mov     edx, ds:_iob
.text:00403B1B                 mov     ecx, [edx+2Ch]
.text:00403B1E                 lea     esi, [edx+20h]
.text:00403B21                 shr     ecx, 5
.text:00403B24                 mov     bl, cl
.text:00403B26                 mov     ecx, [edx+20h]
.text:00403B29                 and     bl, 1
.text:00403B2C                 cmp     ecx, [esi+8]
.text:00403B2F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403B32                 setz    [esp+2Ch+var_9]
.text:00403B37                 call    fclose
.text:00403B3C                 test    eax, eax
.text:00403B3E                 setnz   al
.text:00403B41                 test    bl, bl
.text:00403B43                 jnz     loc_403BD3
.text:00403B49                 test    al, al
.text:00403B4B                 jz      short loc_403BA0
.text:00403B4D
.text:00403B4D loc_403B4D:                             ; CODE XREF: sub_403B10+CD↓j
.text:00403B4D                 call    _errno
.text:00403B52                 mov     esi, [eax]
.text:00403B54
.text:00403B54 loc_403B54:                             ; CODE XREF: sub_403B10+C7↓j
.text:00403B54                 cmp     esi, 9
.text:00403B57                 jz      short loc_403BC6
.text:00403B59
.text:00403B59 loc_403B59:                             ; CODE XREF: sub_403B10+B8↓j
.text:00403B59                                         ; sub_403B10+C1↓j
.text:00403B59                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403B60                 call    ds:libintl_gettext
.text:00403B66                 mov     ebx, eax
.text:00403B68                 mov     eax, ds:dword_407180
.text:00403B6D                 test    eax, eax
.text:00403B6F                 jz      short loc_403BA6
.text:00403B71                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403B74                 call    sub_404E50
.text:00403B79                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00403B7D                 mov     edx, Code
.text:00403B83                 mov     [esp+2Ch+var_1C], ebx
.text:00403B87                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00403B8F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403B93                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403B96                 call    sub_405440
.text:00403B9B                 nop
.text:00403B9C                 lea     esi, [esi+0]
.text:00403BA0
.text:00403BA0 loc_403BA0:                             ; CODE XREF: sub_403B10+3B↑j
.text:00403BA0                                         ; sub_403B10+B4↓j ...
.text:00403BA0                 add     esp, 24h
.text:00403BA3                 pop     ebx
.text:00403BA4                 pop     esi
.text:00403BA5                 retn
.text:00403BA6 ; ---------------------------------------------------------------------------
.text:00403BA6
.text:00403BA6 loc_403BA6:                             ; CODE XREF: sub_403B10+5F↑j
.text:00403BA6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00403BAA                 mov     ebx, Code
.text:00403BB0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00403BB8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403BBC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00403BBF                 call    sub_405440
.text:00403BC4                 jmp     short loc_403BA0
.text:00403BC6 ; ---------------------------------------------------------------------------
.text:00403BC6
.text:00403BC6 loc_403BC6:                             ; CODE XREF: sub_403B10+47↑j
.text:00403BC6                 test    bl, bl
.text:00403BC8                 jnz     short loc_403B59
.text:00403BCA                 cmp     [esp+2Ch+var_9], 0
.text:00403BCF                 jnz     short loc_403BA0
.text:00403BD1                 jmp     short loc_403B59
.text:00403BD3 ; ---------------------------------------------------------------------------
.text:00403BD3
.text:00403BD3 loc_403BD3:                             ; CODE XREF: sub_403B10+33↑j
.text:00403BD3                 xor     esi, esi
.text:00403BD5                 test    al, al
.text:00403BD7                 jz      loc_403B54
.text:00403BDD                 jmp     loc_403B4D
.text:00403BDD sub_403B10      endp
.text:00403BDD
.text:00403BDD ; ---------------------------------------------------------------------------
.text:00403BE2                 align 10h
.text:00403BF0 ; const char aC[2]
.text:00403BF0 aC              db 'C',0                ; DATA XREF: sub_403C00+29↓o
.text:00403BF2                 align 10h
.text:00403C00
.text:00403C00 ; =============== S U B R O U T I N E =======================================
.text:00403C00
.text:00403C00
.text:00403C00 ; int __cdecl sub_403C00(char *String, char **EndPtr)
.text:00403C00 sub_403C00      proc near               ; DATA XREF: sub_4018E0+171↑o
.text:00403C00                                         ; sub_4018E0+335↑o ...
.text:00403C00
.text:00403C00 Category        = dword ptr -1Ch
.text:00403C00 Locale          = dword ptr -18h
.text:00403C00 var_C           = qword ptr -0Ch
.text:00403C00 var_4           = dword ptr -4
.text:00403C00 String          = dword ptr  4
.text:00403C00 EndPtr          = dword ptr  8
.text:00403C00
.text:00403C00                 sub     esp, 1Ch
.text:00403C03                 mov     [esp+1Ch+var_4], ebx
.text:00403C07                 mov     [esp+1Ch+Locale], 0 ; Locale
.text:00403C0F                 mov     [esp+1Ch+Category], 4 ; Category
.text:00403C16                 call    setlocale
.text:00403C1B                 test    eax, eax
.text:00403C1D                 mov     ebx, eax
.text:00403C1F                 jz      short loc_403C3F
.text:00403C21                 mov     [esp+1Ch+Category], eax ; char *
.text:00403C24                 call    sub_4052C0
.text:00403C29                 mov     [esp+1Ch+Locale], offset aC ; "C"
.text:00403C31                 mov     ebx, eax
.text:00403C33                 mov     [esp+1Ch+Category], 4 ; Category
.text:00403C3A                 call    setlocale
.text:00403C3F
.text:00403C3F loc_403C3F:                             ; CODE XREF: sub_403C00+1F↑j
.text:00403C3F                 mov     edx, [esp+1Ch+EndPtr]
.text:00403C43                 mov     [esp+1Ch+Locale], edx ; EndPtr
.text:00403C47                 mov     edx, [esp+1Ch+String]
.text:00403C4B                 mov     [esp+1Ch+Category], edx ; String
.text:00403C4E                 call    strtod
.text:00403C53                 test    ebx, ebx
.text:00403C55                 fstp    [esp+1Ch+var_C]
.text:00403C59                 jz      short loc_403C73
.text:00403C5B                 mov     [esp+1Ch+Locale], ebx ; Locale
.text:00403C5F                 mov     [esp+1Ch+Category], 4 ; Category
.text:00403C66                 call    setlocale
.text:00403C6B                 mov     [esp+1Ch+Category], ebx ; Block
.text:00403C6E                 call    free
.text:00403C73
.text:00403C73 loc_403C73:                             ; CODE XREF: sub_403C00+59↑j
.text:00403C73                 fld     [esp+1Ch+var_C]
.text:00403C77                 mov     ebx, [esp+1Ch+var_4]
.text:00403C7B                 add     esp, 1Ch
.text:00403C7E                 retn
.text:00403C7E sub_403C00      endp
.text:00403C7E
.text:00403C7E ; ---------------------------------------------------------------------------
.text:00403C7F                 align 10h
.text:00403C80
.text:00403C80 ; =============== S U B R O U T I N E =======================================
.text:00403C80
.text:00403C80
.text:00403C80 sub_403C80      proc near               ; CODE XREF: sub_4018E0+188↑p
.text:00403C80                                         ; sub_4018E0+34C↑p ...
.text:00403C80
.text:00403C80 var_2C          = dword ptr -2Ch
.text:00403C80 var_28          = dword ptr -28h
.text:00403C80 var_1D          = byte ptr -1Dh
.text:00403C80 var_1C          = qword ptr -1Ch
.text:00403C80 var_10          = dword ptr -10h
.text:00403C80 var_8           = dword ptr -8
.text:00403C80 var_4           = dword ptr -4
.text:00403C80 arg_0           = dword ptr  4
.text:00403C80 arg_4           = dword ptr  8
.text:00403C80 arg_8           = dword ptr  0Ch
.text:00403C80 arg_C           = dword ptr  10h
.text:00403C80
.text:00403C80                 sub     esp, 2Ch
.text:00403C83                 mov     [esp+2Ch+var_8], ebx
.text:00403C87                 mov     ebx, [esp+2Ch+arg_0]
.text:00403C8B                 mov     [esp+2Ch+var_4], esi
.text:00403C8F                 mov     esi, [esp+2Ch+arg_4]
.text:00403C93                 mov     [esp+2Ch+var_1D], 1
.text:00403C98                 call    _errno
.text:00403C9D                 mov     dword ptr [eax], 0
.text:00403CA3                 lea     edx, [esp+2Ch+var_10]
.text:00403CA7                 mov     [esp+2Ch+var_28], edx
.text:00403CAB                 mov     [esp+2Ch+var_2C], ebx
.text:00403CAE                 call    [esp+2Ch+arg_C]
.text:00403CB2                 mov     eax, [esp+2Ch+var_10]
.text:00403CB6                 cmp     eax, ebx
.text:00403CB8                 fstp    [esp+2Ch+var_1C]
.text:00403CBC                 jz      short loc_403D10
.text:00403CBE                 test    esi, esi
.text:00403CC0                 jz      short loc_403D17
.text:00403CC2
.text:00403CC2 loc_403CC2:                             ; CODE XREF: sub_403C80+9C↓j
.text:00403CC2                 fld     [esp+2Ch+var_1C]
.text:00403CC6                 fldz
.text:00403CC8                 fxch    st(1)
.text:00403CCA                 fucompp
.text:00403CCC                 fnstsw  ax
.text:00403CCE                 sahf
.text:00403CCF                 jp      short loc_403CF8
.text:00403CD1                 jnz     short loc_403CF8
.text:00403CD3
.text:00403CD3 loc_403CD3:                             ; CODE XREF: sub_403C80+80↓j
.text:00403CD3                                         ; sub_403C80+95↓j
.text:00403CD3                 test    esi, esi
.text:00403CD5                 jz      short loc_403CDD
.text:00403CD7                 mov     edx, [esp+2Ch+var_10]
.text:00403CDB                 mov     [esi], edx
.text:00403CDD
.text:00403CDD loc_403CDD:                             ; CODE XREF: sub_403C80+55↑j
.text:00403CDD                 fld     [esp+2Ch+var_1C]
.text:00403CE1                 mov     ecx, [esp+2Ch+arg_8]
.text:00403CE5                 movzx   eax, [esp+2Ch+var_1D]
.text:00403CEA                 fstp    qword ptr [ecx]
.text:00403CEC                 mov     ebx, [esp+2Ch+var_8]
.text:00403CF0                 mov     esi, [esp+2Ch+var_4]
.text:00403CF4                 add     esp, 2Ch
.text:00403CF7                 retn
.text:00403CF8 ; ---------------------------------------------------------------------------
.text:00403CF8
.text:00403CF8 loc_403CF8:                             ; CODE XREF: sub_403C80+4F↑j
.text:00403CF8                                         ; sub_403C80+51↑j
.text:00403CF8                 call    _errno
.text:00403CFD                 cmp     dword ptr [eax], 22h ; '"'
.text:00403D00                 jnz     short loc_403CD3
.text:00403D02                 lea     esi, [esi+0]
.text:00403D09                 lea     edi, [edi+0]
.text:00403D10
.text:00403D10 loc_403D10:                             ; CODE XREF: sub_403C80+3C↑j
.text:00403D10                                         ; sub_403C80+9A↓j
.text:00403D10                 mov     [esp+2Ch+var_1D], 0
.text:00403D15                 jmp     short loc_403CD3
.text:00403D17 ; ---------------------------------------------------------------------------
.text:00403D17
.text:00403D17 loc_403D17:                             ; CODE XREF: sub_403C80+40↑j
.text:00403D17                 cmp     byte ptr [eax], 0
.text:00403D1A                 jnz     short loc_403D10
.text:00403D1C                 jmp     short loc_403CC2
.text:00403D1C sub_403C80      endp
.text:00403D1C
.text:00403D1C ; ---------------------------------------------------------------------------
.text:00403D1E                 align 10h
.text:00403D20 aLiteral        db 'literal',0          ; DATA XREF: .text:00403D60↓o
.text:00403D28 aShell          db 'shell',0            ; DATA XREF: .text:00403D64↓o
.text:00403D2E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403D68↓o
.text:00403D3B aC_0            db 'c',0                ; DATA XREF: .text:00403D6C↓o
.text:00403D3D aEscape         db 'escape',0           ; DATA XREF: .text:00403D70↓o
.text:00403D44 aLocale         db 'locale',0           ; DATA XREF: .text:00403D74↓o
.text:00403D4B aClocale        db 'clocale',0          ; DATA XREF: .text:00403D78↓o
.text:00403D53                 align 10h
.text:00403D60                 dd offset aLiteral      ; "literal"
.text:00403D64                 dd offset aShell        ; "shell"
.text:00403D68                 dd offset aShellAlways  ; "shell-always"
.text:00403D6C                 dd offset aC_0          ; "c"
.text:00403D70                 dd offset aEscape       ; "escape"
.text:00403D74                 dd offset aLocale       ; "locale"
.text:00403D78                 dd offset aClocale      ; "clocale"
.text:00403D7C                 dd 2 dup(0)
.text:00403D84                 dd 1, 2, 3, 4, 5, 6
.text:00403D9C asc_403D9C:                             ; DATA XREF: sub_403DB0+7E↓o
.text:00403D9C                                         ; sub_403DB0+A39↓o ...
.text:00403D9C                 text "UTF-16LE", '"',27h,'`'
.text:00403DA2                 align 10h
.text:00403DB0
.text:00403DB0 ; =============== S U B R O U T I N E =======================================
.text:00403DB0
.text:00403DB0
.text:00403DB0 ; int __cdecl sub_403DB0(int, int, char *Str, int, int, int)
.text:00403DB0 sub_403DB0      proc near               ; CODE XREF: sub_403DB0+43A↓p
.text:00403DB0                                         ; .text:00404973↓p ...
.text:00403DB0
.text:00403DB0 C               = dword ptr -4Ch
.text:00403DB0 Type            = dword ptr -48h
.text:00403DB0 SizeInBytes     = dword ptr -44h
.text:00403DB0 State           = dword ptr -40h
.text:00403DB0 var_3C          = dword ptr -3Ch
.text:00403DB0 var_38          = dword ptr -38h
.text:00403DB0 var_34          = dword ptr -34h
.text:00403DB0 var_30          = dword ptr -30h
.text:00403DB0 var_29          = byte ptr -29h
.text:00403DB0 var_28          = dword ptr -28h
.text:00403DB0 var_22          = byte ptr -22h
.text:00403DB0 var_21          = byte ptr -21h
.text:00403DB0 var_20          = dword ptr -20h
.text:00403DB0 var_1C          = dword ptr -1Ch
.text:00403DB0 var_18          = mbstate_t ptr -18h
.text:00403DB0 arg_0           = dword ptr  4
.text:00403DB0 arg_4           = dword ptr  8
.text:00403DB0 Str             = dword ptr  0Ch
.text:00403DB0 arg_C           = dword ptr  10h
.text:00403DB0 arg_10          = dword ptr  14h
.text:00403DB0 arg_14          = dword ptr  18h
.text:00403DB0
.text:00403DB0                 push    ebp
.text:00403DB1                 push    edi
.text:00403DB2                 push    esi
.text:00403DB3                 push    ebx
.text:00403DB4                 sub     esp, 3Ch
.text:00403DB7                 mov     edx, ds:__mb_cur_max
.text:00403DBD                 mov     [esp+4Ch+var_34], 0
.text:00403DC5                 mov     [esp+4Ch+var_1C], 0
.text:00403DCD                 cmp     dword ptr [edx], 1
.text:00403DD0                 mov     [esp+4Ch+var_20], 0
.text:00403DD8                 mov     [esp+4Ch+var_21], 0
.text:00403DDD                 setz    [esp+4Ch+var_22]
.text:00403DE2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403DE7                 ja      short def_403DED ; jumptable 00403DED default case, cases 0,1
.text:00403DE9                 mov     edx, [esp+4Ch+arg_10]
.text:00403DED                 jmp     ds:jpt_403DED[edx*4] ; switch jump
.text:00403DED ; ---------------------------------------------------------------------------
.text:00403DF4 jpt_403DED      dd offset def_403DED    ; DATA XREF: sub_403DB0+3D↑r
.text:00403DF4                 dd offset def_403DED    ; jump table for switch statement
.text:00403DF4                 dd offset loc_404735
.text:00403DF4                 dd offset loc_403E10
.text:00403DF4                 dd offset loc_40475B
.text:00403DF4                 dd offset loc_404765
.text:00403DF4                 dd offset loc_404765
.text:00403E10 ; ---------------------------------------------------------------------------
.text:00403E10
.text:00403E10 loc_403E10:                             ; CODE XREF: sub_403DB0+3D↑j
.text:00403E10                                         ; DATA XREF: sub_403DB0:jpt_403DED↑o
.text:00403E10                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00403DED case 3
.text:00403E14                 cmp     [esp+4Ch+var_34], eax
.text:00403E18                 jnb     short loc_403E21
.text:00403E1A                 mov     ebx, [esp+4Ch+arg_0]
.text:00403E1E                 mov     byte ptr [ebx], 22h ; '"'
.text:00403E21
.text:00403E21 loc_403E21:                             ; CODE XREF: sub_403DB0+68↑j
.text:00403E21                 mov     [esp+4Ch+var_34], 1
.text:00403E29                 mov     [esp+4Ch+var_21], 1
.text:00403E2E                 mov     [esp+4Ch+var_1C], offset asc_403D9C ; "\"'`"
.text:00403E36
.text:00403E36 loc_403E36:                             ; CODE XREF: sub_403DB0+9A6↓j
.text:00403E36                 mov     [esp+4Ch+var_20], 1
.text:00403E3E
.text:00403E3E def_403DED:                             ; CODE XREF: sub_403DB0+37↑j
.text:00403E3E                                         ; sub_403DB0+3D↑j ...
.text:00403E3E                 xor     ebp, ebp        ; jumptable 00403DED default case, cases 0,1
.text:00403E40
.text:00403E40 loc_403E40:                             ; CODE XREF: sub_403DB0+3DB↓j
.text:00403E40                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403E45                 jz      loc_404727
.text:00403E4B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403E4F
.text:00403E4F loc_403E4F:                             ; CODE XREF: sub_403DB0+980↓j
.text:00403E4F                 jz      loc_4046BE
.text:00403E55                 cmp     [esp+4Ch+var_21], 0
.text:00403E5A                 jz      short loc_403EA0
.text:00403E5C                 mov     esi, [esp+4Ch+var_20]
.text:00403E60                 test    esi, esi
.text:00403E62                 jz      short loc_403EA0
.text:00403E64                 mov     ecx, [esp+4Ch+var_20]
.text:00403E68                 lea     edi, [ecx+ebp]
.text:00403E6B                 cmp     edi, [esp+4Ch+arg_C]
.text:00403E6F                 ja      short loc_403EA0
.text:00403E71                 cld
.text:00403E72                 mov     ebx, [esp+4Ch+Str]
.text:00403E76                 mov     edi, [esp+4Ch+var_1C]
.text:00403E7A                 add     ebx, ebp
.text:00403E7C                 mov     esi, ebx
.text:00403E7E                 cmp     ecx, ecx
.text:00403E80                 repe cmpsb
.text:00403E82                 jnz     short loc_403EA0
.text:00403E84                 mov     edx, [esp+4Ch+arg_4]
.text:00403E88                 cmp     [esp+4Ch+var_34], edx
.text:00403E8C                 jnb     short loc_403E9A
.text:00403E8E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403E92                 mov     eax, [esp+4Ch+var_34]
.text:00403E96                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00403E9A
.text:00403E9A loc_403E9A:                             ; CODE XREF: sub_403DB0+DC↑j
.text:00403E9A                 inc     [esp+4Ch+var_34]
.text:00403E9E                 mov     esi, esi
.text:00403EA0
.text:00403EA0 loc_403EA0:                             ; CODE XREF: sub_403DB0+AA↑j
.text:00403EA0                                         ; sub_403DB0+B2↑j ...
.text:00403EA0                 mov     edi, [esp+4Ch+Str]
.text:00403EA4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00403EA9                 movzx   eax, bl
.text:00403EAC                 cmp     eax, 7Eh        ; switch 127 cases
.text:00403EAF                 ja      def_403EB5      ; jumptable 00403EB5 default case, cases 1-6,14-31,64
.text:00403EB5                 jmp     ds:jpt_403EB5[eax*4] ; switch jump
.text:00403EB5 ; ---------------------------------------------------------------------------
.text:00403EBC jpt_403EB5      dd offset loc_4040B8, offset def_403EB5, offset def_403EB5
.text:00403EBC                                         ; DATA XREF: sub_403DB0+105↑r
.text:00403EBC                 dd offset def_403EB5, offset def_403EB5, offset def_403EB5 ; jump table for switch statement
.text:00403EBC                 dd offset def_403EB5, offset loc_404190, offset loc_4041AE
.text:00403EBC                 dd offset loc_4041B2, offset loc_4041F7, offset loc_4041FB
.text:00403EBC                 dd offset loc_4041FF, offset loc_404203, offset def_403EB5
.text:00403EBC                 dd offset def_403EB5, offset def_403EB5, offset def_403EB5
.text:00403EBC                 dd offset def_403EB5, offset def_403EB5, offset def_403EB5
.text:00403EBC                 dd offset def_403EB5, offset def_403EB5, offset def_403EB5
.text:00403EBC                 dd offset def_403EB5, offset def_403EB5, offset def_403EB5
.text:00403EBC                 dd offset def_403EB5, offset def_403EB5, offset def_403EB5
.text:00403EBC                 dd offset def_403EB5, offset def_403EB5, offset loc_404688
.text:00403EBC                 dd offset loc_404688, offset loc_404688, offset loc_4046AA
.text:00403EBC                 dd offset loc_404688, offset def_4042B2, offset loc_404688
.text:00403EBC                 dd offset loc_404207, offset loc_404688, offset loc_404688
.text:00403EBC                 dd offset loc_404688, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset loc_404688
.text:00403EBC                 dd offset loc_404688, offset loc_404688, offset loc_404688
.text:00403EBC                 dd offset loc_40426C, offset def_403EB5, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset loc_404688, offset loc_404681
.text:00403EBC                 dd offset def_4042B2, offset loc_404688, offset def_4042B2
.text:00403EBC                 dd offset loc_404688, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset def_4042B2, offset def_4042B2, offset def_4042B2
.text:00403EBC                 dd offset loc_404698, offset loc_404688, offset loc_404698
.text:00403EBC                 dd offset loc_4046AA
.text:004040B8 ; ---------------------------------------------------------------------------
.text:004040B8
.text:004040B8 loc_4040B8:                             ; CODE XREF: sub_403DB0+105↑j
.text:004040B8                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:004040B8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403EB5 case 0
.text:004040BD                 lea     eax, [ebp+1]
.text:004040C0                 jz      loc_404170
.text:004040C6                 mov     esi, [esp+4Ch+arg_4]
.text:004040CA                 cmp     [esp+4Ch+var_34], esi
.text:004040CE                 jnb     short loc_4040DC
.text:004040D0                 mov     eax, [esp+4Ch+arg_0]
.text:004040D4                 mov     ebx, [esp+4Ch+var_34]
.text:004040D8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004040DC
.text:004040DC loc_4040DC:                             ; CODE XREF: sub_403DB0+31E↑j
.text:004040DC                 inc     [esp+4Ch+var_34]
.text:004040E0                 mov     edx, [esp+4Ch+arg_4]
.text:004040E4                 cmp     [esp+4Ch+var_34], edx
.text:004040E8                 jnb     short loc_4040F6
.text:004040EA                 mov     edi, [esp+4Ch+arg_0]
.text:004040EE                 mov     ecx, [esp+4Ch+var_34]
.text:004040F2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004040F6
.text:004040F6 loc_4040F6:                             ; CODE XREF: sub_403DB0+338↑j
.text:004040F6                 inc     [esp+4Ch+var_34]
.text:004040FA                 mov     esi, [esp+4Ch+arg_4]
.text:004040FE                 cmp     [esp+4Ch+var_34], esi
.text:00404102                 jnb     short loc_404110
.text:00404104                 mov     ebx, [esp+4Ch+arg_0]
.text:00404108                 mov     eax, [esp+4Ch+var_34]
.text:0040410C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00404110
.text:00404110 loc_404110:                             ; CODE XREF: sub_403DB0+352↑j
.text:00404110                 inc     [esp+4Ch+var_34]
.text:00404114                 mov     bl, 30h ; '0'
.text:00404116                 lea     esi, [esi+0]
.text:00404119                 lea     edi, [edi+0]
.text:00404120
.text:00404120 def_4042B2:                             ; CODE XREF: sub_403DB0+105↑j
.text:00404120                                         ; sub_403DB0+463↓j ...
.text:00404120                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403EB5 cases 37,43-58,65-90,93,95,97-122
.text:00404120                                         ; jumptable 004042B2 default case, cases 34-38,42-44,46,48-59
.text:00404125                 lea     eax, [ebp+1]
.text:00404128                 jz      short loc_404170
.text:0040412A                 mov     cl, bl
.text:0040412C                 mov     edi, [esp+4Ch+arg_14]
.text:00404130                 mov     esi, 1
.text:00404135                 shr     cl, 5
.text:00404138                 movzx   edx, cl
.text:0040413B                 mov     ecx, ebx
.text:0040413D                 and     ecx, 1Fh
.text:00404140                 shl     esi, cl
.text:00404142                 test    [edi+edx*4+4], esi
.text:00404146                 jz      short loc_404162
.text:00404148
.text:00404148 loc_404148:                             ; CODE XREF: sub_403DB0+3FC↓j
.text:00404148                 mov     edx, [esp+4Ch+arg_4]
.text:0040414C                 cmp     [esp+4Ch+var_34], edx
.text:00404150                 jnb     short loc_40415E
.text:00404152                 mov     edi, [esp+4Ch+arg_0]
.text:00404156                 mov     esi, [esp+4Ch+var_34]
.text:0040415A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040415E
.text:0040415E loc_40415E:                             ; CODE XREF: sub_403DB0+3A0↑j
.text:0040415E                 inc     [esp+4Ch+var_34]
.text:00404162
.text:00404162 loc_404162:                             ; CODE XREF: sub_403DB0+396↑j
.text:00404162                 lea     eax, [ebp+1]
.text:00404165                 lea     esi, [esi+0]
.text:00404169                 lea     edi, [edi+0]
.text:00404170
.text:00404170 loc_404170:                             ; CODE XREF: sub_403DB0+310↑j
.text:00404170                                         ; sub_403DB0+378↑j ...
.text:00404170                 mov     ebp, [esp+4Ch+arg_4]
.text:00404174                 cmp     [esp+4Ch+var_34], ebp
.text:00404178                 jnb     short loc_404185
.text:0040417A                 mov     edx, [esp+4Ch+arg_0]
.text:0040417E                 mov     ecx, [esp+4Ch+var_34]
.text:00404182                 mov     [ecx+edx], bl
.text:00404185
.text:00404185 loc_404185:                             ; CODE XREF: sub_403DB0+3C8↑j
.text:00404185                 inc     [esp+4Ch+var_34]
.text:00404189                 mov     ebp, eax
.text:0040418B                 jmp     loc_403E40
.text:00404190 ; ---------------------------------------------------------------------------
.text:00404190
.text:00404190 loc_404190:                             ; CODE XREF: sub_403DB0+105↑j
.text:00404190                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:00404190                 mov     dl, 61h ; 'a'   ; jumptable 00403EB5 case 7
.text:00404192                 lea     esi, [esi+0]
.text:00404199                 lea     edi, [edi+0]
.text:004041A0
.text:004041A0 loc_4041A0:                             ; CODE XREF: sub_403DB0+400↓j
.text:004041A0                                         ; sub_403DB0+409↓j ...
.text:004041A0                 cmp     [esp+4Ch+var_21], 0
.text:004041A5                 lea     eax, [ebp+1]
.text:004041A8                 jz      short loc_404170
.text:004041AA                 mov     bl, dl
.text:004041AC                 jmp     short loc_404148
.text:004041AE ; ---------------------------------------------------------------------------
.text:004041AE
.text:004041AE loc_4041AE:                             ; CODE XREF: sub_403DB0+105↑j
.text:004041AE                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:004041AE                 mov     dl, 62h ; 'b'   ; jumptable 00403EB5 case 8
.text:004041B0                 jmp     short loc_4041A0
.text:004041B2 ; ---------------------------------------------------------------------------
.text:004041B2
.text:004041B2 loc_4041B2:                             ; CODE XREF: sub_403DB0+105↑j
.text:004041B2                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:004041B2                 mov     dl, 74h ; 't'   ; jumptable 00403EB5 case 9
.text:004041B4
.text:004041B4 loc_4041B4:                             ; CODE XREF: sub_403DB0+449↓j
.text:004041B4                                         ; sub_403DB0+455↓j ...
.text:004041B4                 cmp     [esp+4Ch+arg_10], 1
.text:004041B9                 jnz     short loc_4041A0
.text:004041BB
.text:004041BB loc_4041BB:                             ; CODE XREF: sub_403DB0+45C↓j
.text:004041BB                                         ; sub_403DB0+4C1↓j ...
.text:004041BB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404582 cases 91,92,94,96,124
.text:004041C3                 mov     eax, [esp+4Ch+arg_14]
.text:004041C7                 mov     edx, [esp+4Ch+arg_C]
.text:004041CB                 mov     ecx, [esp+4Ch+Str]
.text:004041CF                 mov     ebx, [esp+4Ch+arg_4]
.text:004041D3                 mov     [esp+4Ch+var_38], eax ; int
.text:004041D7                 mov     ebp, [esp+4Ch+arg_0]
.text:004041DB                 mov     [esp+4Ch+State], edx ; int
.text:004041DF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004041E3                 mov     [esp+4Ch+Type], ebx ; int
.text:004041E7                 mov     [esp+4Ch+C], ebp ; int
.text:004041EA                 call    sub_403DB0
.text:004041EF
.text:004041EF loc_4041EF:                             ; CODE XREF: sub_403DB0+972↓j
.text:004041EF                 add     esp, 3Ch
.text:004041F2                 pop     ebx
.text:004041F3                 pop     esi
.text:004041F4                 pop     edi
.text:004041F5                 pop     ebp
.text:004041F6                 retn
.text:004041F7 ; ---------------------------------------------------------------------------
.text:004041F7
.text:004041F7 loc_4041F7:                             ; CODE XREF: sub_403DB0+105↑j
.text:004041F7                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:004041F7                 mov     dl, 6Eh ; 'n'   ; jumptable 00403EB5 case 10
.text:004041F9                 jmp     short loc_4041B4
.text:004041FB ; ---------------------------------------------------------------------------
.text:004041FB
.text:004041FB loc_4041FB:                             ; CODE XREF: sub_403DB0+105↑j
.text:004041FB                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:004041FB                 mov     dl, 76h ; 'v'   ; jumptable 00403EB5 case 11
.text:004041FD                 jmp     short loc_4041A0
.text:004041FF ; ---------------------------------------------------------------------------
.text:004041FF
.text:004041FF loc_4041FF:                             ; CODE XREF: sub_403DB0+105↑j
.text:004041FF                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:004041FF                 mov     dl, 66h ; 'f'   ; jumptable 00403EB5 case 12
.text:00404201                 jmp     short loc_4041A0
.text:00404203 ; ---------------------------------------------------------------------------
.text:00404203
.text:00404203 loc_404203:                             ; CODE XREF: sub_403DB0+105↑j
.text:00404203                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:00404203                 mov     dl, 72h ; 'r'   ; jumptable 00403EB5 case 13
.text:00404205                 jmp     short loc_4041B4
.text:00404207 ; ---------------------------------------------------------------------------
.text:00404207
.text:00404207 loc_404207:                             ; CODE XREF: sub_403DB0+105↑j
.text:00404207                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:00404207                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403EB5 case 39
.text:0040420C                 jz      short loc_4041BB ; jumptable 00404582 cases 91,92,94,96,124
.text:0040420E                 cmp     [esp+4Ch+arg_10], 2
.text:00404213                 jnz     def_4042B2      ; jumptable 00403EB5 cases 37,43-58,65-90,93,95,97-122
.text:00404213                                         ; jumptable 004042B2 default case, cases 34-38,42-44,46,48-59
.text:00404219                 mov     edx, [esp+4Ch+arg_4]
.text:0040421D                 cmp     [esp+4Ch+var_34], edx
.text:00404221                 jnb     short loc_40422F
.text:00404223                 mov     ecx, [esp+4Ch+arg_0]
.text:00404227                 mov     edi, [esp+4Ch+var_34]
.text:0040422B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040422F
.text:0040422F loc_40422F:                             ; CODE XREF: sub_403DB0+471↑j
.text:0040422F                 inc     [esp+4Ch+var_34]
.text:00404233                 mov     eax, [esp+4Ch+arg_4]
.text:00404237                 cmp     [esp+4Ch+var_34], eax
.text:0040423B                 jnb     short loc_404249
.text:0040423D                 mov     esi, [esp+4Ch+arg_0]
.text:00404241                 mov     edx, [esp+4Ch+var_34]
.text:00404245                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404249
.text:00404249 loc_404249:                             ; CODE XREF: sub_403DB0+48B↑j
.text:00404249                 inc     [esp+4Ch+var_34]
.text:0040424D                 mov     edi, [esp+4Ch+arg_4]
.text:00404251                 cmp     [esp+4Ch+var_34], edi
.text:00404255                 jnb     short loc_404263
.text:00404257                 mov     ecx, [esp+4Ch+arg_0]
.text:0040425B                 mov     eax, [esp+4Ch+var_34]
.text:0040425F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404263
.text:00404263 loc_404263:                             ; CODE XREF: sub_403DB0+4A5↑j
.text:00404263                                         ; sub_403DB0+5C4↓j ...
.text:00404263                 inc     [esp+4Ch+var_34]
.text:00404267                 jmp     def_4042B2      ; jumptable 00403EB5 cases 37,43-58,65-90,93,95,97-122
.text:00404267                                         ; jumptable 004042B2 default case, cases 34-38,42-44,46,48-59
.text:0040426C ; ---------------------------------------------------------------------------
.text:0040426C
.text:0040426C loc_40426C:                             ; CODE XREF: sub_403DB0+105↑j
.text:0040426C                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:0040426C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403EB5 case 63
.text:00404271                 jz      loc_4041BB      ; jumptable 00404582 cases 91,92,94,96,124
.text:00404277                 cmp     [esp+4Ch+arg_10], 3
.text:0040427C                 jnz     def_4042B2      ; jumptable 00403EB5 cases 37,43-58,65-90,93,95,97-122
.text:0040427C                                         ; jumptable 004042B2 default case, cases 34-38,42-44,46,48-59
.text:00404282                 lea     edx, [ebp+2]
.text:00404285                 cmp     edx, [esp+4Ch+arg_C]
.text:00404289                 jnb     def_4042B2      ; jumptable 00403EB5 cases 37,43-58,65-90,93,95,97-122
.text:00404289                                         ; jumptable 004042B2 default case, cases 34-38,42-44,46,48-59
.text:0040428F                 mov     esi, [esp+4Ch+Str]
.text:00404293                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404298                 jnz     def_4042B2      ; jumptable 00403EB5 cases 37,43-58,65-90,93,95,97-122
.text:00404298                                         ; jumptable 004042B2 default case, cases 34-38,42-44,46,48-59
.text:0040429E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004042A3                 movsx   eax, cl
.text:004042A6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004042A9                 cmp     eax, 1Dh
.text:004042AC                 ja      def_4042B2      ; jumptable 00403EB5 cases 37,43-58,65-90,93,95,97-122
.text:004042AC                                         ; jumptable 004042B2 default case, cases 34-38,42-44,46,48-59
.text:004042B2                 jmp     ds:jpt_4042B2[eax*4] ; switch jump
.text:004042B2 ; ---------------------------------------------------------------------------
.text:004042B9                 align 4
.text:004042BC jpt_4042B2      dd offset loc_404334    ; DATA XREF: sub_403DB0+502↑r
.text:004042BC                 dd offset def_4042B2    ; jump table for switch statement
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset loc_404334
.text:004042BC                 dd offset loc_404334
.text:004042BC                 dd offset loc_404334
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset loc_404334
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset loc_404334
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset def_4042B2
.text:004042BC                 dd offset loc_404334
.text:004042BC                 dd offset loc_404334
.text:004042BC                 dd offset loc_404334
.text:00404334 ; ---------------------------------------------------------------------------
.text:00404334
.text:00404334 loc_404334:                             ; CODE XREF: sub_403DB0+502↑j
.text:00404334                                         ; DATA XREF: sub_403DB0:jpt_4042B2↑o
.text:00404334                 mov     ebp, edx        ; jumptable 004042B2 cases 33,39-41,45,47,60-62
.text:00404336                 mov     bl, cl
.text:00404338                 mov     edx, [esp+4Ch+arg_4]
.text:0040433C                 cmp     [esp+4Ch+var_34], edx
.text:00404340                 jnb     short loc_40434E
.text:00404342                 mov     ecx, [esp+4Ch+arg_0]
.text:00404346                 mov     edi, [esp+4Ch+var_34]
.text:0040434A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040434E
.text:0040434E loc_40434E:                             ; CODE XREF: sub_403DB0+590↑j
.text:0040434E                 inc     [esp+4Ch+var_34]
.text:00404352                 mov     eax, [esp+4Ch+arg_4]
.text:00404356                 cmp     [esp+4Ch+var_34], eax
.text:0040435A                 jnb     short loc_404368
.text:0040435C                 mov     edx, [esp+4Ch+arg_0]
.text:00404360                 mov     esi, [esp+4Ch+var_34]
.text:00404364                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404368
.text:00404368 loc_404368:                             ; CODE XREF: sub_403DB0+5AA↑j
.text:00404368                 inc     [esp+4Ch+var_34]
.text:0040436C                 mov     edi, [esp+4Ch+arg_4]
.text:00404370                 cmp     [esp+4Ch+var_34], edi
.text:00404374                 jnb     loc_404263
.text:0040437A                 mov     eax, [esp+4Ch+arg_0]
.text:0040437E                 mov     ecx, [esp+4Ch+var_34]
.text:00404382                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404386                 jmp     loc_404263
.text:00404386 ; ---------------------------------------------------------------------------
.text:0040438B                 align 10h
.text:00404390
.text:00404390 def_403EB5:                             ; CODE XREF: sub_403DB0+FF↑j
.text:00404390                                         ; sub_403DB0+105↑j
.text:00404390                                         ; DATA XREF: ...
.text:00404390                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403EB5 default case, cases 1-6,14-31,64
.text:00404395                 jz      loc_4044C0
.text:0040439B                 mov     [esp+4Ch+var_28], 1
.text:004043A3                 mov     esi, ds:__mb_cur_max
.text:004043A9                 movzx   edx, bl
.text:004043AC                 cmp     dword ptr [esi], 1
.text:004043AF                 jz      loc_4044A4
.text:004043B5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004043BD                 mov     [esp+4Ch+C], edx ; C
.text:004043C0                 call    _isctype
.text:004043C5
.text:004043C5 loc_4043C5:                             ; CODE XREF: sub_403DB0+705↓j
.text:004043C5                 test    eax, eax
.text:004043C7                 setnz   [esp+4Ch+var_29]
.text:004043CC
.text:004043CC loc_4043CC:                             ; CODE XREF: sub_403DB0+7A5↓j
.text:004043CC                 cmp     [esp+4Ch+var_21], 0
.text:004043D1                 lea     eax, [ebp+1]
.text:004043D4                 jz      loc_404170
.text:004043DA                 cmp     [esp+4Ch+var_29], 0
.text:004043DF                 jnz     def_4042B2      ; jumptable 00403EB5 cases 37,43-58,65-90,93,95,97-122
.text:004043DF                                         ; jumptable 004042B2 default case, cases 34-38,42-44,46,48-59
.text:004043E5
.text:004043E5 loc_4043E5:                             ; CODE XREF: sub_403DB0+7AB↓j
.text:004043E5                 mov     eax, [esp+4Ch+var_28]
.text:004043E9                 lea     edx, [eax+ebp]
.text:004043EC                 lea     esi, [esi+0]
.text:004043F0
.text:004043F0 loc_4043F0:                             ; CODE XREF: sub_403DB0+6EF↓j
.text:004043F0                 cmp     [esp+4Ch+var_21], 0
.text:004043F5                 jz      short loc_404470
.text:004043F7                 cmp     [esp+4Ch+var_29], 0
.text:004043FC                 jnz     short loc_404470
.text:004043FE                 mov     edi, [esp+4Ch+arg_4]
.text:00404402                 cmp     [esp+4Ch+var_34], edi
.text:00404406                 jnb     short loc_404414
.text:00404408                 mov     esi, [esp+4Ch+arg_0]
.text:0040440C                 mov     eax, [esp+4Ch+var_34]
.text:00404410                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404414
.text:00404414 loc_404414:                             ; CODE XREF: sub_403DB0+656↑j
.text:00404414                 inc     [esp+4Ch+var_34]
.text:00404418                 mov     ecx, [esp+4Ch+arg_4]
.text:0040441C                 cmp     [esp+4Ch+var_34], ecx
.text:00404420                 jnb     short loc_404435
.text:00404422                 mov     cl, bl
.text:00404424                 mov     esi, [esp+4Ch+arg_0]
.text:00404428                 mov     edi, [esp+4Ch+var_34]
.text:0040442C                 shr     cl, 6
.text:0040442F                 add     cl, 30h ; '0'
.text:00404432                 mov     [edi+esi], cl
.text:00404435
.text:00404435 loc_404435:                             ; CODE XREF: sub_403DB0+670↑j
.text:00404435                 inc     [esp+4Ch+var_34]
.text:00404439                 mov     edi, [esp+4Ch+arg_4]
.text:0040443D                 cmp     [esp+4Ch+var_34], edi
.text:00404441                 jnb     short loc_404459
.text:00404443                 mov     cl, bl
.text:00404445                 mov     esi, [esp+4Ch+arg_0]
.text:00404449                 shr     cl, 3
.text:0040444C                 mov     edi, [esp+4Ch+var_34]
.text:00404450                 and     cl, 7
.text:00404453                 add     cl, 30h ; '0'
.text:00404456                 mov     [edi+esi], cl
.text:00404459
.text:00404459 loc_404459:                             ; CODE XREF: sub_403DB0+691↑j
.text:00404459                 inc     [esp+4Ch+var_34]
.text:0040445D                 and     bl, 7
.text:00404460                 add     bl, 30h ; '0'
.text:00404463                 lea     esi, [esi+0]
.text:00404469                 lea     edi, [edi+0]
.text:00404470
.text:00404470 loc_404470:                             ; CODE XREF: sub_403DB0+645↑j
.text:00404470                                         ; sub_403DB0+64C↑j
.text:00404470                 lea     eax, [ebp+1]
.text:00404473                 cmp     edx, eax
.text:00404475                 jbe     loc_404170
.text:0040447B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040447F                 cmp     [esp+4Ch+var_34], ebp
.text:00404483                 jnb     short loc_404490
.text:00404485                 mov     ecx, [esp+4Ch+arg_0]
.text:00404489                 mov     edi, [esp+4Ch+var_34]
.text:0040448D                 mov     [edi+ecx], bl
.text:00404490
.text:00404490 loc_404490:                             ; CODE XREF: sub_403DB0+6D3↑j
.text:00404490                 inc     [esp+4Ch+var_34]
.text:00404494                 mov     ebp, eax
.text:00404496                 mov     eax, [esp+4Ch+Str]
.text:0040449A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040449F                 jmp     loc_4043F0
.text:004044A4 ; ---------------------------------------------------------------------------
.text:004044A4
.text:004044A4 loc_4044A4:                             ; CODE XREF: sub_403DB0+5FF↑j
.text:004044A4                 mov     ecx, ds:_pctype
.text:004044AA                 mov     edi, [ecx]
.text:004044AC                 movzx   eax, word ptr [edi+edx*2]
.text:004044B0                 and     eax, 157h
.text:004044B5                 jmp     loc_4043C5
.text:004044B5 ; ---------------------------------------------------------------------------
.text:004044BA                 align 10h
.text:004044C0
.text:004044C0 loc_4044C0:                             ; CODE XREF: sub_403DB0+5E5↑j
.text:004044C0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004044C5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004044CD                 mov     [esp+4Ch+var_28], 0
.text:004044D5                 mov     [esp+4Ch+var_29], 1
.text:004044DA                 jz      loc_40466C
.text:004044E0
.text:004044E0 loc_4044E0:                             ; CODE XREF: sub_403DB0+8CC↓j
.text:004044E0                 mov     ecx, [esp+4Ch+arg_C]
.text:004044E4                 lea     edx, [esp+4Ch+var_18]
.text:004044E8                 mov     edi, [esp+4Ch+Str]
.text:004044EC                 mov     [esp+4Ch+State], edx ; State
.text:004044F0                 lea     esi, [esp+4Ch+var_18._State]
.text:004044F4                 sub     ecx, ebp
.text:004044F6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004044FA                 add     edi, ebp
.text:004044FC                 mov     [esp+4Ch+var_30], edi
.text:00404500                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404504                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404507                 call    mbrtowc
.text:0040450C                 test    eax, eax
.text:0040450E                 mov     edi, eax
.text:00404510                 jz      short loc_404550
.text:00404512                 cmp     eax, 0FFFFFFFFh
.text:00404515                 jz      loc_404662
.text:0040451B                 cmp     eax, 0FFFFFFFEh
.text:0040451E                 jz      loc_404622
.text:00404524                 cmp     [esp+4Ch+arg_10], 1
.text:00404529                 jz      short loc_404560
.text:0040452B
.text:0040452B loc_40452B:                             ; CODE XREF: sub_403DB0+7B9↓j
.text:0040452B                                         ; sub_403DB0+86D↓j
.text:0040452B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404530                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404538                 mov     [esp+4Ch+C], ecx ; C
.text:0040453B                 call    iswctype
.text:00404540                 test    eax, eax
.text:00404542                 jnz     short loc_404549
.text:00404544                 mov     [esp+4Ch+var_29], 0
.text:00404549
.text:00404549 loc_404549:                             ; CODE XREF: sub_403DB0+792↑j
.text:00404549                 mov     [esp+4Ch+var_28], edi
.text:0040454D                 lea     esi, [esi+0]
.text:00404550
.text:00404550 loc_404550:                             ; CODE XREF: sub_403DB0+760↑j
.text:00404550                                         ; sub_403DB0+87B↓j ...
.text:00404550                 cmp     [esp+4Ch+var_28], 1
.text:00404555                 jbe     loc_4043CC
.text:0040455B                 jmp     loc_4043E5
.text:00404560 ; ---------------------------------------------------------------------------
.text:00404560
.text:00404560 loc_404560:                             ; CODE XREF: sub_403DB0+779↑j
.text:00404560                 cmp     [esp+4Ch+arg_10], eax
.text:00404564                 mov     edx, 1
.text:00404569                 jnb     short loc_40452B
.text:0040456B
.text:0040456B loc_40456B:                             ; CODE XREF: sub_403DB0+867↓j
.text:0040456B                 mov     ecx, [esp+4Ch+Str]
.text:0040456F                 lea     esi, [edx+ebp]
.text:00404572                 movsx   eax, byte ptr [esi+ecx]
.text:00404576                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404579                 cmp     eax, 21h
.text:0040457C                 ja      def_404582      ; jumptable 00404582 default case, cases 93,95,97-123
.text:00404582                 jmp     ds:jpt_404582[eax*4] ; switch jump
.text:00404582 ; ---------------------------------------------------------------------------
.text:00404589                 align 4
.text:0040458C jpt_404582      dd offset loc_4041BB    ; DATA XREF: sub_403DB0+7D2↑r
.text:0040458C                 dd offset loc_4041BB    ; jump table for switch statement
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset loc_4041BB
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset loc_4041BB
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset def_404582
.text:0040458C                 dd offset loc_4041BB
.text:00404614 ; ---------------------------------------------------------------------------
.text:00404614
.text:00404614 def_404582:                             ; CODE XREF: sub_403DB0+7CC↑j
.text:00404614                                         ; sub_403DB0+7D2↑j
.text:00404614                                         ; DATA XREF: ...
.text:00404614                 inc     edx             ; jumptable 00404582 default case, cases 93,95,97-123
.text:00404615                 cmp     edx, edi
.text:00404617                 jb      loc_40456B
.text:0040461D                 jmp     loc_40452B
.text:00404622 ; ---------------------------------------------------------------------------
.text:00404622
.text:00404622 loc_404622:                             ; CODE XREF: sub_403DB0+76E↑j
.text:00404622                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404626                 mov     [esp+4Ch+var_29], 0
.text:0040462B                 jnb     loc_404550
.text:00404631                 mov     eax, [esp+4Ch+var_30]
.text:00404635                 cmp     byte ptr [eax], 0
.text:00404638                 jz      loc_404550
.text:0040463E
.text:0040463E loc_40463E:                             ; CODE XREF: sub_403DB0+8AB↓j
.text:0040463E                 inc     [esp+4Ch+var_28]
.text:00404642                 mov     esi, [esp+4Ch+var_28]
.text:00404646                 lea     eax, [esi+ebp]
.text:00404649                 cmp     eax, [esp+4Ch+arg_C]
.text:0040464D                 jnb     loc_404550
.text:00404653                 mov     edi, [esp+4Ch+Str]
.text:00404657                 cmp     byte ptr [eax+edi], 0
.text:0040465B                 jnz     short loc_40463E
.text:0040465D                 jmp     loc_404550
.text:00404662 ; ---------------------------------------------------------------------------
.text:00404662
.text:00404662 loc_404662:                             ; CODE XREF: sub_403DB0+765↑j
.text:00404662                 mov     [esp+4Ch+var_29], 0
.text:00404667                 jmp     loc_404550
.text:0040466C ; ---------------------------------------------------------------------------
.text:0040466C
.text:0040466C loc_40466C:                             ; CODE XREF: sub_403DB0+72A↑j
.text:0040466C                 mov     edx, [esp+4Ch+Str]
.text:00404670                 mov     [esp+4Ch+C], edx ; Str
.text:00404673                 call    strlen
.text:00404678                 mov     [esp+4Ch+arg_C], eax
.text:0040467C                 jmp     loc_4044E0
.text:00404681 ; ---------------------------------------------------------------------------
.text:00404681
.text:00404681 loc_404681:                             ; CODE XREF: sub_403DB0+105↑j
.text:00404681                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:00404681                 mov     dl, bl          ; jumptable 00403EB5 case 92
.text:00404683                 jmp     loc_4041B4
.text:00404688 ; ---------------------------------------------------------------------------
.text:00404688
.text:00404688 loc_404688:                             ; CODE XREF: sub_403DB0+105↑j
.text:00404688                                         ; sub_403DB0+902↓j
.text:00404688                                         ; DATA XREF: ...
.text:00404688                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403EB5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040468D                 jnz     def_4042B2      ; jumptable 00403EB5 cases 37,43-58,65-90,93,95,97-122
.text:0040468D                                         ; jumptable 004042B2 default case, cases 34-38,42-44,46,48-59
.text:00404693                 jmp     loc_4041BB      ; jumptable 00404582 cases 91,92,94,96,124
.text:00404698 ; ---------------------------------------------------------------------------
.text:00404698
.text:00404698 loc_404698:                             ; CODE XREF: sub_403DB0+105↑j
.text:00404698                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:00404698                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403EB5 cases 123,125
.text:0040469D                 jz      short loc_4046B4
.text:0040469F                 cmp     [esp+4Ch+arg_C], 1
.text:004046A4
.text:004046A4 loc_4046A4:                             ; CODE XREF: sub_403DB0+90C↓j
.text:004046A4                 jnz     def_4042B2      ; jumptable 00403EB5 cases 37,43-58,65-90,93,95,97-122
.text:004046A4                                         ; jumptable 004042B2 default case, cases 34-38,42-44,46,48-59
.text:004046AA
.text:004046AA loc_4046AA:                             ; CODE XREF: sub_403DB0+105↑j
.text:004046AA                                         ; DATA XREF: sub_403DB0:jpt_403EB5↑o
.text:004046AA                 test    ebp, ebp        ; jumptable 00403EB5 cases 35,126
.text:004046AC                 jnz     def_4042B2      ; jumptable 00403EB5 cases 37,43-58,65-90,93,95,97-122
.text:004046AC                                         ; jumptable 004042B2 default case, cases 34-38,42-44,46,48-59
.text:004046B2                 jmp     short loc_404688 ; jumptable 00403EB5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004046B4 ; ---------------------------------------------------------------------------
.text:004046B4
.text:004046B4 loc_4046B4:                             ; CODE XREF: sub_403DB0+8ED↑j
.text:004046B4                 mov     esi, [esp+4Ch+Str]
.text:004046B8                 cmp     byte ptr [esi+1], 0
.text:004046BC                 jmp     short loc_4046A4
.text:004046BE ; ---------------------------------------------------------------------------
.text:004046BE
.text:004046BE loc_4046BE:                             ; CODE XREF: sub_403DB0:loc_403E4F↑j
.text:004046BE                 test    ebp, ebp
.text:004046C0                 jnz     short loc_4046CD
.text:004046C2                 cmp     [esp+4Ch+arg_10], 1
.text:004046C7                 jz      loc_4041BB      ; jumptable 00404582 cases 91,92,94,96,124
.text:004046CD
.text:004046CD loc_4046CD:                             ; CODE XREF: sub_403DB0+910↑j
.text:004046CD                 mov     esi, [esp+4Ch+var_1C]
.text:004046D1                 test    esi, esi
.text:004046D3                 jz      short loc_404708
.text:004046D5                 mov     edi, [esp+4Ch+var_1C]
.text:004046D9                 movzx   eax, byte ptr [edi]
.text:004046DC                 test    al, al
.text:004046DE                 jz      short loc_404708
.text:004046E0
.text:004046E0 loc_4046E0:                             ; CODE XREF: sub_403DB0+956↓j
.text:004046E0                 mov     ebp, [esp+4Ch+arg_4]
.text:004046E4                 cmp     [esp+4Ch+var_34], ebp
.text:004046E8                 jnb     short loc_4046F5
.text:004046EA                 mov     ecx, [esp+4Ch+arg_0]
.text:004046EE                 mov     ebx, [esp+4Ch+var_34]
.text:004046F2                 mov     [ebx+ecx], al
.text:004046F5
.text:004046F5 loc_4046F5:                             ; CODE XREF: sub_403DB0+938↑j
.text:004046F5                 inc     [esp+4Ch+var_1C]
.text:004046F9                 inc     [esp+4Ch+var_34]
.text:004046FD                 mov     edx, [esp+4Ch+var_1C]
.text:00404701                 movzx   eax, byte ptr [edx]
.text:00404704                 test    al, al
.text:00404706                 jnz     short loc_4046E0
.text:00404708
.text:00404708 loc_404708:                             ; CODE XREF: sub_403DB0+923↑j
.text:00404708                                         ; sub_403DB0+92E↑j
.text:00404708                 mov     eax, [esp+4Ch+arg_4]
.text:0040470C                 cmp     [esp+4Ch+var_34], eax
.text:00404710                 jnb     short loc_40471E
.text:00404712                 mov     edi, [esp+4Ch+arg_0]
.text:00404716                 mov     esi, [esp+4Ch+var_34]
.text:0040471A                 mov     byte ptr [esi+edi], 0
.text:0040471E
.text:0040471E loc_40471E:                             ; CODE XREF: sub_403DB0+960↑j
.text:0040471E                 mov     eax, [esp+4Ch+var_34]
.text:00404722                 jmp     loc_4041EF
.text:00404727 ; ---------------------------------------------------------------------------
.text:00404727
.text:00404727 loc_404727:                             ; CODE XREF: sub_403DB0+95↑j
.text:00404727                 mov     ebx, [esp+4Ch+Str]
.text:0040472B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404730                 jmp     loc_403E4F
.text:00404735 ; ---------------------------------------------------------------------------
.text:00404735
.text:00404735 loc_404735:                             ; CODE XREF: sub_403DB0+3D↑j
.text:00404735                                         ; DATA XREF: sub_403DB0:jpt_403DED↑o
.text:00404735                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00403DED case 2
.text:00404739                 cmp     [esp+4Ch+var_34], edx
.text:0040473D                 jnb     short loc_404746
.text:0040473F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404743                 mov     byte ptr [ecx], 27h ; '''
.text:00404746
.text:00404746 loc_404746:                             ; CODE XREF: sub_403DB0+98D↑j
.text:00404746                 mov     [esp+4Ch+var_34], 1
.text:0040474E                 mov     [esp+4Ch+var_1C], 403D9Eh
.text:00404756                 jmp     loc_403E36
.text:0040475B ; ---------------------------------------------------------------------------
.text:0040475B
.text:0040475B loc_40475B:                             ; CODE XREF: sub_403DB0+3D↑j
.text:0040475B                                         ; DATA XREF: sub_403DB0:jpt_403DED↑o
.text:0040475B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00403DED case 4
.text:00404760                 jmp     def_403DED      ; jumptable 00403DED default case, cases 0,1
.text:00404765 ; ---------------------------------------------------------------------------
.text:00404765
.text:00404765 loc_404765:                             ; CODE XREF: sub_403DB0+3D↑j
.text:00404765                                         ; DATA XREF: sub_403DB0:jpt_403DED↑o
.text:00404765                 mov     [esp+4Ch+C], 403DA0h ; jumptable 00403DED cases 5,6
.text:0040476C                 call    ds:libintl_gettext
.text:00404772                 cmp     eax, 403DA0h
.text:00404777                 mov     edi, eax
.text:00404779                 jz      short loc_4047F0
.text:0040477B
.text:0040477B loc_40477B:                             ; CODE XREF: sub_403DB0+A45↓j
.text:0040477B                                         ; sub_403DB0+A4C↓j
.text:0040477B                 mov     [esp+4Ch+C], 403D9Eh
.text:00404782                 call    ds:libintl_gettext
.text:00404788                 cmp     eax, 403D9Eh
.text:0040478D                 mov     edx, eax
.text:0040478F                 jz      short loc_4047E2
.text:00404791
.text:00404791 loc_404791:                             ; CODE XREF: sub_403DB0+A37↓j
.text:00404791                                         ; sub_403DB0+A3E↓j
.text:00404791                 mov     [esp+4Ch+var_1C], edi
.text:00404795                 cmp     byte ptr [edi], 0
.text:00404798                 jz      short loc_4047C8
.text:0040479A
.text:0040479A loc_40479A:                             ; CODE XREF: sub_403DB0+A16↓j
.text:0040479A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040479E                 cmp     [esp+4Ch+var_34], ecx
.text:004047A2                 jnb     short loc_4047B7
.text:004047A4                 mov     ebp, [esp+4Ch+var_1C]
.text:004047A8                 mov     edi, [esp+4Ch+arg_0]
.text:004047AC                 mov     esi, [esp+4Ch+var_34]
.text:004047B0                 movzx   ebx, byte ptr [ebp+0]
.text:004047B4                 mov     [esi+edi], bl
.text:004047B7
.text:004047B7 loc_4047B7:                             ; CODE XREF: sub_403DB0+9F2↑j
.text:004047B7                 inc     [esp+4Ch+var_1C]
.text:004047BB                 inc     [esp+4Ch+var_34]
.text:004047BF                 mov     eax, [esp+4Ch+var_1C]
.text:004047C3                 cmp     byte ptr [eax], 0
.text:004047C6                 jnz     short loc_40479A
.text:004047C8
.text:004047C8 loc_4047C8:                             ; CODE XREF: sub_403DB0+9E8↑j
.text:004047C8                 mov     [esp+4Ch+var_21], 1
.text:004047CD                 mov     [esp+4Ch+var_1C], edx
.text:004047D1                 mov     [esp+4Ch+C], edx ; Str
.text:004047D4                 call    strlen
.text:004047D9                 mov     [esp+4Ch+var_20], eax
.text:004047DD                 jmp     def_403DED      ; jumptable 00403DED default case, cases 0,1
.text:004047E2 ; ---------------------------------------------------------------------------
.text:004047E2
.text:004047E2 loc_4047E2:                             ; CODE XREF: sub_403DB0+9DF↑j
.text:004047E2                 cmp     [esp+4Ch+arg_10], 6
.text:004047E7                 jnz     short loc_404791
.text:004047E9                 mov     edx, offset asc_403D9C ; "\"'`"
.text:004047EE                 jmp     short loc_404791
.text:004047F0 ; ---------------------------------------------------------------------------
.text:004047F0
.text:004047F0 loc_4047F0:                             ; CODE XREF: sub_403DB0+9C9↑j
.text:004047F0                 cmp     [esp+4Ch+arg_10], 6
.text:004047F5                 jnz     short loc_40477B
.text:004047F7                 mov     edi, offset asc_403D9C ; "\"'`"
.text:004047FC                 jmp     loc_40477B
.text:004047FC sub_403DB0      endp
.text:004047FC
.text:00404801 ; ---------------------------------------------------------------------------
.text:00404801                 jmp     short loc_404810
.text:00404801 ; ---------------------------------------------------------------------------
.text:00404803                 align 10h
.text:00404810
.text:00404810 loc_404810:                             ; CODE XREF: .text:00404801↑j
.text:00404810                 sub     esp, 0Ch
.text:00404813                 mov     [esp+4], ebx
.text:00404817                 mov     [esp+8], esi
.text:0040481B                 call    _errno
.text:00404820                 mov     esi, [eax]
.text:00404822                 mov     dword ptr [esp], 24h ; '$'
.text:00404829                 call    sub_405100
.text:0040482E                 mov     edx, [esp+10h]
.text:00404832                 mov     ebx, eax
.text:00404834                 test    edx, edx
.text:00404836                 jz      short loc_404881
.text:00404838
.text:00404838 loc_404838:                             ; CODE XREF: .text:00404886↓j
.text:00404838                 mov     ecx, [edx]
.text:0040483A                 mov     [ebx], ecx
.text:0040483C                 mov     ecx, [edx+4]
.text:0040483F                 mov     [ebx+4], ecx
.text:00404842                 mov     ecx, [edx+8]
.text:00404845                 mov     [ebx+8], ecx
.text:00404848                 mov     ecx, [edx+0Ch]
.text:0040484B                 mov     [ebx+0Ch], ecx
.text:0040484E                 mov     ecx, [edx+10h]
.text:00404851                 mov     [ebx+10h], ecx
.text:00404854                 mov     ecx, [edx+14h]
.text:00404857                 mov     [ebx+14h], ecx
.text:0040485A                 mov     ecx, [edx+18h]
.text:0040485D                 mov     [ebx+18h], ecx
.text:00404860                 mov     ecx, [edx+1Ch]
.text:00404863                 mov     [ebx+1Ch], ecx
.text:00404866                 mov     ecx, [edx+20h]
.text:00404869                 mov     [ebx+20h], ecx
.text:0040486C                 call    _errno
.text:00404871                 mov     [eax], esi
.text:00404873                 mov     esi, [esp+8]
.text:00404877                 mov     eax, ebx
.text:00404879                 mov     ebx, [esp+4]
.text:0040487D                 add     esp, 0Ch
.text:00404880                 retn
.text:00404881 ; ---------------------------------------------------------------------------
.text:00404881
.text:00404881 loc_404881:                             ; CODE XREF: .text:00404836↑j
.text:00404881                 mov     edx, offset dword_407290
.text:00404886                 jmp     short loc_404838
.text:00404886 ; ---------------------------------------------------------------------------
.text:00404888                 align 10h
.text:00404890                 mov     eax, [esp+4]
.text:00404894                 test    eax, eax
.text:00404896                 jz      short loc_4048A0
.text:00404898
.text:00404898 loc_404898:                             ; CODE XREF: .text:004048A5↓j
.text:00404898                 mov     eax, [eax]
.text:0040489A                 retn
.text:0040489A ; ---------------------------------------------------------------------------
.text:0040489B                 align 10h
.text:004048A0
.text:004048A0 loc_4048A0:                             ; CODE XREF: .text:00404896↑j
.text:004048A0                 mov     eax, offset dword_407290
.text:004048A5                 jmp     short loc_404898
.text:004048A5 ; ---------------------------------------------------------------------------
.text:004048A7                 align 10h
.text:004048B0                 mov     edx, [esp+4]
.text:004048B4                 test    edx, edx
.text:004048B6                 jz      short loc_4048C0
.text:004048B8
.text:004048B8 loc_4048B8:                             ; CODE XREF: .text:004048C5↓j
.text:004048B8                 mov     ecx, [esp+8]
.text:004048BC                 mov     [edx], ecx
.text:004048BE                 retn
.text:004048BE ; ---------------------------------------------------------------------------
.text:004048BF                 align 10h
.text:004048C0
.text:004048C0 loc_4048C0:                             ; CODE XREF: .text:004048B6↑j
.text:004048C0                 mov     edx, offset dword_407290
.text:004048C5                 jmp     short loc_4048B8
.text:004048C5 ; ---------------------------------------------------------------------------
.text:004048C7                 align 10h
.text:004048D0                 sub     esp, 8
.text:004048D3                 mov     eax, [esp+0Ch]
.text:004048D7                 movzx   ecx, byte ptr [esp+10h]
.text:004048DC                 mov     [esp], ebx
.text:004048DF                 mov     ebx, [esp+14h]
.text:004048E3                 mov     [esp+4], esi
.text:004048E7                 mov     dl, cl
.text:004048E9                 shr     dl, 5
.text:004048EC                 movzx   edx, dl
.text:004048EF                 shl     edx, 2
.text:004048F2                 test    eax, eax
.text:004048F4                 lea     esi, [edx+eax+4]
.text:004048F8                 jz      short loc_404920
.text:004048FA
.text:004048FA loc_4048FA:                             ; CODE XREF: .text:00404926↓j
.text:004048FA                 mov     edx, [esi]
.text:004048FC                 and     ecx, 1Fh
.text:004048FF                 and     ebx, 1
.text:00404902                 mov     eax, edx
.text:00404904                 shr     eax, cl
.text:00404906                 and     eax, 1
.text:00404909                 xor     ebx, eax
.text:0040490B                 shl     ebx, cl
.text:0040490D                 xor     edx, ebx
.text:0040490F                 mov     [esi], edx
.text:00404911                 mov     ebx, [esp]
.text:00404914                 mov     esi, [esp+4]
.text:00404918                 add     esp, 8
.text:0040491B                 retn
.text:0040491B ; ---------------------------------------------------------------------------
.text:0040491C                 align 10h
.text:00404920
.text:00404920 loc_404920:                             ; CODE XREF: .text:004048F8↑j
.text:00404920                 lea     esi, dword_407294[edx]
.text:00404926                 jmp     short loc_4048FA
.text:00404926 ; ---------------------------------------------------------------------------
.text:00404928                 align 10h
.text:00404930                 sub     esp, 2Ch
.text:00404933                 mov     [esp+24h], ebx
.text:00404937                 mov     ebx, [esp+40h]
.text:0040493B                 mov     [esp+28h], esi
.text:0040493F                 test    ebx, ebx
.text:00404941                 jz      short loc_404990
.text:00404943
.text:00404943 loc_404943:                             ; CODE XREF: .text:00404995↓j
.text:00404943                 call    _errno
.text:00404948                 mov     esi, [eax]
.text:0040494A                 mov     [esp+14h], ebx
.text:0040494E                 mov     edx, [ebx]
.text:00404950                 mov     ecx, [esp+38h]
.text:00404954                 mov     ebx, [esp+3Ch]
.text:00404958                 mov     [esp+10h], edx
.text:0040495C                 mov     edx, [esp+34h]
.text:00404960                 mov     [esp+0Ch], ebx
.text:00404964                 mov     [esp+8], ecx
.text:00404968                 mov     [esp+4], edx
.text:0040496C                 mov     edx, [esp+30h]
.text:00404970                 mov     [esp], edx
.text:00404973                 call    sub_403DB0
.text:00404978                 mov     ebx, eax
.text:0040497A                 call    _errno
.text:0040497F                 mov     [eax], esi
.text:00404981                 mov     esi, [esp+28h]
.text:00404985                 mov     eax, ebx
.text:00404987                 mov     ebx, [esp+24h]
.text:0040498B                 add     esp, 2Ch
.text:0040498E                 retn
.text:0040498E ; ---------------------------------------------------------------------------
.text:0040498F                 align 10h
.text:00404990
.text:00404990 loc_404990:                             ; CODE XREF: .text:00404941↑j
.text:00404990                 mov     ebx, offset dword_407290
.text:00404995                 jmp     short loc_404943
.text:00404995 ; ---------------------------------------------------------------------------
.text:00404997                 align 10h
.text:004049A0                 push    ebp
.text:004049A1                 push    edi
.text:004049A2                 push    esi
.text:004049A3                 push    ebx
.text:004049A4                 sub     esp, 2Ch
.text:004049A7                 mov     ebp, [esp+48h]
.text:004049AB                 call    _errno
.text:004049B0                 mov     edx, [eax]
.text:004049B2                 test    ebp, ebp
.text:004049B4                 mov     ebx, ebp
.text:004049B6                 mov     [esp+28h], edx
.text:004049BA                 jz      loc_404A70
.text:004049C0
.text:004049C0 loc_4049C0:                             ; CODE XREF: .text:00404A75↓j
.text:004049C0                 call    _errno
.text:004049C5                 mov     edi, [eax]
.text:004049C7                 mov     esi, ebp
.text:004049C9                 mov     [esp+14h], ebx
.text:004049CD                 mov     ecx, [ebx]
.text:004049CF                 mov     dword ptr [esp], 0
.text:004049D6                 mov     edx, [esp+44h]
.text:004049DA                 mov     dword ptr [esp+4], 0
.text:004049E2                 mov     eax, [esp+40h]
.text:004049E6                 mov     [esp+10h], ecx
.text:004049EA                 mov     [esp+0Ch], edx
.text:004049EE                 mov     [esp+8], eax
.text:004049F2                 call    sub_403DB0
.text:004049F7                 mov     ebx, eax
.text:004049F9                 call    _errno
.text:004049FE                 mov     [eax], edi
.text:00404A00                 lea     edi, [ebx+1]
.text:00404A03                 mov     [esp], edi
.text:00404A06                 call    sub_405100
.text:00404A0B                 mov     [esp+24h], eax
.text:00404A0F                 test    ebp, ebp
.text:00404A11                 jz      short loc_404A62
.text:00404A13
.text:00404A13 loc_404A13:                             ; CODE XREF: .text:00404A67↓j
.text:00404A13                 call    _errno
.text:00404A18                 mov     ebp, [eax]
.text:00404A1A                 mov     [esp+14h], esi
.text:00404A1E                 mov     ecx, [esi]
.text:00404A20                 mov     [esp+4], edi
.text:00404A24                 mov     edx, [esp+44h]
.text:00404A28                 mov     esi, [esp+24h]
.text:00404A2C                 mov     [esp+10h], ecx
.text:00404A30                 mov     eax, [esp+40h]
.text:00404A34                 mov     [esp+0Ch], edx
.text:00404A38                 mov     [esp], esi
.text:00404A3B                 mov     [esp+8], eax
.text:00404A3F                 call    sub_403DB0
.text:00404A44                 call    _errno
.text:00404A49                 mov     [eax], ebp
.text:00404A4B                 call    _errno
.text:00404A50                 mov     ebx, [esp+28h]
.text:00404A54                 mov     [eax], ebx
.text:00404A56                 mov     eax, [esp+24h]
.text:00404A5A                 add     esp, 2Ch
.text:00404A5D                 pop     ebx
.text:00404A5E                 pop     esi
.text:00404A5F                 pop     edi
.text:00404A60                 pop     ebp
.text:00404A61                 retn
.text:00404A62 ; ---------------------------------------------------------------------------
.text:00404A62
.text:00404A62 loc_404A62:                             ; CODE XREF: .text:00404A11↑j
.text:00404A62                 mov     esi, offset dword_407290
.text:00404A67                 jmp     short loc_404A13
.text:00404A67 ; ---------------------------------------------------------------------------
.text:00404A69                 align 10h
.text:00404A70
.text:00404A70 loc_404A70:                             ; CODE XREF: .text:004049BA↑j
.text:00404A70                 mov     ebx, offset dword_407290
.text:00404A75                 jmp     loc_4049C0
.text:00404A75 ; ---------------------------------------------------------------------------
.text:00404A7A                 align 10h
.text:00404A80                 sub     esp, 1Ch
.text:00404A83                 mov     edx, [esp+24h]
.text:00404A87                 mov     dword ptr [esp+0Ch], offset dword_407290
.text:00404A8F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404A97                 mov     [esp+4], edx
.text:00404A9B                 mov     edx, [esp+20h]
.text:00404A9F                 mov     [esp], edx
.text:00404AA2                 call    sub_404EF0
.text:00404AA7                 add     esp, 1Ch
.text:00404AAA                 retn
.text:00404AAA ; ---------------------------------------------------------------------------
.text:00404AAB                 align 10h
.text:00404AB0                 sub     esp, 1Ch
.text:00404AB3                 mov     edx, [esp+20h]
.text:00404AB7                 mov     dword ptr [esp+0Ch], offset dword_407290
.text:00404ABF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404AC7                 mov     [esp+4], edx
.text:00404ACB                 mov     dword ptr [esp], 0
.text:00404AD2                 call    sub_404EF0
.text:00404AD7                 add     esp, 1Ch
.text:00404ADA                 retn
.text:00404ADA ; ---------------------------------------------------------------------------
.text:00404ADB                 align 10h
.text:00404AE0
.text:00404AE0 ; =============== S U B R O U T I N E =======================================
.text:00404AE0
.text:00404AE0
.text:00404AE0 ; int __cdecl sub_404AE0(int, int, char *)
.text:00404AE0 sub_404AE0      proc near               ; CODE XREF: .text:0040345A↑p
.text:00404AE0                                         ; sub_403470+1A↑p
.text:00404AE0
.text:00404AE0 var_BC          = dword ptr -0BCh
.text:00404AE0 var_B8          = dword ptr -0B8h
.text:00404AE0 var_B4          = dword ptr -0B4h
.text:00404AE0 var_B0          = dword ptr -0B0h
.text:00404AE0 var_AC          = dword ptr -0ACh
.text:00404AE0 var_A8          = dword ptr -0A8h
.text:00404AE0 var_A4          = dword ptr -0A4h
.text:00404AE0 var_A0          = dword ptr -0A0h
.text:00404AE0 var_9C          = dword ptr -9Ch
.text:00404AE0 var_98          = dword ptr -98h
.text:00404AE0 var_94          = dword ptr -94h
.text:00404AE0 var_90          = dword ptr -90h
.text:00404AE0 var_8C          = dword ptr -8Ch
.text:00404AE0 var_7C          = dword ptr -7Ch
.text:00404AE0 var_78          = dword ptr -78h
.text:00404AE0 var_74          = dword ptr -74h
.text:00404AE0 var_70          = dword ptr -70h
.text:00404AE0 var_6C          = dword ptr -6Ch
.text:00404AE0 var_68          = dword ptr -68h
.text:00404AE0 var_64          = dword ptr -64h
.text:00404AE0 var_60          = dword ptr -60h
.text:00404AE0 var_5C          = dword ptr -5Ch
.text:00404AE0 var_4C          = dword ptr -4Ch
.text:00404AE0 var_48          = dword ptr -48h
.text:00404AE0 var_44          = dword ptr -44h
.text:00404AE0 var_40          = dword ptr -40h
.text:00404AE0 var_3C          = dword ptr -3Ch
.text:00404AE0 var_38          = dword ptr -38h
.text:00404AE0 var_34          = dword ptr -34h
.text:00404AE0 var_30          = dword ptr -30h
.text:00404AE0 var_2C          = dword ptr -2Ch
.text:00404AE0 arg_0           = dword ptr  4
.text:00404AE0 arg_4           = dword ptr  8
.text:00404AE0 arg_8           = dword ptr  0Ch
.text:00404AE0
.text:00404AE0                 push    ebp
.text:00404AE1                 xor     eax, eax
.text:00404AE3                 mov     ecx, 8
.text:00404AE8                 push    edi
.text:00404AE9                 push    esi
.text:00404AEA                 push    ebx
.text:00404AEB                 sub     esp, 0ACh
.text:00404AF1                 mov     ebp, [esp+0BCh+arg_4]
.text:00404AF8                 cld
.text:00404AF9                 lea     edi, [esp+0BCh+var_A8]
.text:00404AFD                 mov     [esp+0BCh+var_AC], ebp
.text:00404B01                 rep stosd
.text:00404B03                 mov     eax, [esp+0BCh+var_8C]
.text:00404B07                 mov     edi, [esp+0BCh+var_AC]
.text:00404B0B                 mov     esi, [esp+0BCh+var_A8]
.text:00404B0F                 mov     [esp+0BCh+var_5C], eax
.text:00404B13                 mov     ebp, [esp+0BCh+var_A4]
.text:00404B17                 mov     eax, [esp+0BCh+var_AC]
.text:00404B1B                 mov     [esp+0BCh+var_7C], edi
.text:00404B1F                 mov     ecx, [esp+0BCh+var_94]
.text:00404B23                 mov     edi, [esp+0BCh+var_A0]
.text:00404B27                 mov     [esp+0BCh+var_78], esi
.text:00404B2B                 mov     edx, [esp+0BCh+var_90]
.text:00404B2F                 mov     esi, [esp+0BCh+var_9C]
.text:00404B33                 mov     [esp+0BCh+var_4C], eax
.text:00404B37                 mov     ebx, [esp+0BCh+var_98]
.text:00404B3B                 mov     eax, [esp+0BCh+var_A8]
.text:00404B3F                 mov     [esp+0BCh+var_74], ebp
.text:00404B43                 mov     [esp+0BCh+var_70], edi
.text:00404B47                 mov     [esp+0BCh+var_6C], esi
.text:00404B4B                 mov     [esp+0BCh+var_68], ebx
.text:00404B4F                 mov     [esp+0BCh+var_64], ecx
.text:00404B53                 mov     [esp+0BCh+var_60], edx
.text:00404B57                 mov     [esp+0BCh+var_48], eax
.text:00404B5B                 mov     [esp+0BCh+var_44], ebp
.text:00404B5F                 mov     [esp+0BCh+var_40], edi
.text:00404B63                 mov     [esp+0BCh+var_3C], esi
.text:00404B6A                 mov     [esp+0BCh+var_38], ebx
.text:00404B71                 mov     ebx, [esp+0BCh+var_8C]
.text:00404B75                 mov     [esp+0BCh+var_30], edx
.text:00404B7C                 mov     edx, [esp+0BCh+arg_8]
.text:00404B83                 mov     [esp+0BCh+var_34], ecx
.text:00404B8A                 lea     ecx, [esp+0BCh+var_4C]
.text:00404B8E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00404B92                 mov     edx, [esp+0BCh+arg_0]
.text:00404B99                 mov     [esp+0BCh+var_2C], ebx
.text:00404BA0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00404BA4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00404BAC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00404BAF                 call    sub_404EF0
.text:00404BB4                 add     esp, 0ACh
.text:00404BBA                 pop     ebx
.text:00404BBB                 pop     esi
.text:00404BBC                 pop     edi
.text:00404BBD                 pop     ebp
.text:00404BBE                 retn
.text:00404BBE sub_404AE0      endp
.text:00404BBE
.text:00404BBE ; ---------------------------------------------------------------------------
.text:00404BBF                 align 10h
.text:00404BC0                 push    ebp
.text:00404BC1                 xor     eax, eax
.text:00404BC3                 mov     ecx, 8
.text:00404BC8                 push    edi
.text:00404BC9                 push    esi
.text:00404BCA                 push    ebx
.text:00404BCB                 sub     esp, 0ACh
.text:00404BD1                 mov     edx, [esp+0C4h]
.text:00404BD8                 cld
.text:00404BD9                 lea     edi, [esp+14h]
.text:00404BDD                 mov     [esp+10h], edx
.text:00404BE1                 rep stosd
.text:00404BE3                 mov     eax, [esp+30h]
.text:00404BE7                 mov     ebp, [esp+10h]
.text:00404BEB                 mov     edi, [esp+14h]
.text:00404BEF                 mov     [esp+60h], eax
.text:00404BF3                 mov     esi, [esp+20h]
.text:00404BF7                 mov     eax, [esp+10h]
.text:00404BFB                 mov     [esp+40h], ebp
.text:00404BFF                 mov     ecx, [esp+28h]
.text:00404C03                 mov     ebp, [esp+18h]
.text:00404C07                 mov     [esp+44h], edi
.text:00404C0B                 mov     edx, [esp+2Ch]
.text:00404C0F                 mov     edi, [esp+1Ch]
.text:00404C13                 mov     [esp+70h], eax
.text:00404C17                 mov     ebx, [esp+24h]
.text:00404C1B                 mov     eax, [esp+14h]
.text:00404C1F                 mov     [esp+48h], ebp
.text:00404C23                 mov     [esp+4Ch], edi
.text:00404C27                 mov     [esp+50h], esi
.text:00404C2B                 mov     [esp+54h], ebx
.text:00404C2F                 mov     [esp+58h], ecx
.text:00404C33                 mov     [esp+5Ch], edx
.text:00404C37                 mov     [esp+74h], eax
.text:00404C3B                 mov     [esp+78h], ebp
.text:00404C3F                 mov     [esp+7Ch], edi
.text:00404C43                 mov     [esp+80h], esi
.text:00404C4A                 mov     [esp+84h], ebx
.text:00404C51                 mov     esi, [esp+30h]
.text:00404C55                 lea     ebx, [esp+70h]
.text:00404C59                 mov     [esp+8Ch], edx
.text:00404C60                 mov     edx, [esp+0C8h]
.text:00404C67                 mov     [esp+88h], ecx
.text:00404C6E                 mov     ecx, [esp+0CCh]
.text:00404C75                 mov     [esp+4], edx
.text:00404C79                 mov     edx, [esp+0C0h]
.text:00404C80                 mov     [esp+90h], esi
.text:00404C87                 mov     [esp+0Ch], ebx
.text:00404C8B                 mov     [esp+8], ecx
.text:00404C8F                 mov     [esp], edx
.text:00404C92                 call    sub_404EF0
.text:00404C97                 add     esp, 0ACh
.text:00404C9D                 pop     ebx
.text:00404C9E                 pop     esi
.text:00404C9F                 pop     edi
.text:00404CA0                 pop     ebp
.text:00404CA1                 retn
.text:00404CA1 ; ---------------------------------------------------------------------------
.text:00404CA2                 align 10h
.text:00404CB0                 push    ebp
.text:00404CB1                 xor     eax, eax
.text:00404CB3                 mov     ecx, 8
.text:00404CB8                 push    edi
.text:00404CB9                 push    esi
.text:00404CBA                 push    ebx
.text:00404CBB                 sub     esp, 0ACh
.text:00404CC1                 mov     edi, [esp+0C0h]
.text:00404CC8                 cld
.text:00404CC9                 mov     [esp+10h], edi
.text:00404CCD                 lea     edi, [esp+14h]
.text:00404CD1                 rep stosd
.text:00404CD3                 mov     eax, [esp+30h]
.text:00404CD7                 mov     esi, [esp+10h]
.text:00404CDB                 mov     ebx, [esp+14h]
.text:00404CDF                 mov     [esp+60h], eax
.text:00404CE3                 mov     ebp, [esp+18h]
.text:00404CE7                 mov     eax, [esp+10h]
.text:00404CEB                 mov     [esp+40h], esi
.text:00404CEF                 mov     edi, [esp+1Ch]
.text:00404CF3                 mov     esi, [esp+20h]
.text:00404CF7                 mov     [esp+44h], ebx
.text:00404CFB                 mov     ecx, [esp+28h]
.text:00404CFF                 mov     edx, [esp+2Ch]
.text:00404D03                 mov     [esp+70h], eax
.text:00404D07                 mov     ebx, [esp+24h]
.text:00404D0B                 mov     eax, [esp+14h]
.text:00404D0F                 mov     [esp+48h], ebp
.text:00404D13                 mov     [esp+4Ch], edi
.text:00404D17                 mov     [esp+50h], esi
.text:00404D1B                 mov     [esp+54h], ebx
.text:00404D1F                 mov     [esp+58h], ecx
.text:00404D23                 mov     [esp+5Ch], edx
.text:00404D27                 mov     [esp+74h], eax
.text:00404D2B                 mov     [esp+78h], ebp
.text:00404D2F                 mov     [esp+7Ch], edi
.text:00404D33                 mov     [esp+80h], esi
.text:00404D3A                 mov     [esp+84h], ebx
.text:00404D41                 mov     [esp+8Ch], edx
.text:00404D48                 lea     edx, [esp+70h]
.text:00404D4C                 mov     [esp+88h], ecx
.text:00404D53                 mov     ecx, [esp+30h]
.text:00404D57                 mov     [esp+0Ch], edx
.text:00404D5B                 mov     edx, [esp+0C4h]
.text:00404D62                 mov     [esp+90h], ecx
.text:00404D69                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404D71                 mov     [esp+4], edx
.text:00404D75                 mov     dword ptr [esp], 0
.text:00404D7C                 call    sub_404EF0
.text:00404D81                 add     esp, 0ACh
.text:00404D87                 pop     ebx
.text:00404D88                 pop     esi
.text:00404D89                 pop     edi
.text:00404D8A                 pop     ebp
.text:00404D8B                 retn
.text:00404D8B ; ---------------------------------------------------------------------------
.text:00404D8C                 align 10h
.text:00404D90                 push    edi
.text:00404D91                 push    esi
.text:00404D92                 push    ebx
.text:00404D93                 sub     esp, 40h
.text:00404D96                 mov     edx, ds:dword_40729C
.text:00404D9C                 mov     ebx, ds:dword_407290
.text:00404DA2                 mov     esi, ds:dword_407298
.text:00404DA8                 mov     edi, ds:dword_407294
.text:00404DAE                 mov     [esp+1Ch], edx
.text:00404DB2                 mov     ecx, ds:dword_4072A0
.text:00404DB8                 mov     edx, ds:dword_4072B0
.text:00404DBE                 mov     [esp+10h], ebx
.text:00404DC2                 mov     ebx, ds:dword_4072A4
.text:00404DC8                 mov     [esp+30h], edx
.text:00404DCC                 movzx   edx, byte ptr [esp+54h]
.text:00404DD1                 mov     [esp+18h], esi
.text:00404DD5                 mov     esi, ds:dword_4072AC
.text:00404DDB                 mov     [esp+14h], edi
.text:00404DDF                 mov     edi, ds:dword_4072A8
.text:00404DE5                 mov     [esp+20h], ecx
.text:00404DE9                 mov     cl, dl
.text:00404DEB                 shr     cl, 5
.text:00404DEE                 mov     [esp+24h], ebx
.text:00404DF2                 movzx   ebx, cl
.text:00404DF5                 mov     [esp+2Ch], esi
.text:00404DF9                 lea     esi, [esp+10h]
.text:00404DFD                 mov     [esp+28h], edi
.text:00404E01                 lea     edi, [esi+ebx*4]
.text:00404E04                 mov     ebx, edx
.text:00404E06                 mov     edx, [edi+4]
.text:00404E09                 and     ebx, 1Fh
.text:00404E0C                 mov     cl, bl
.text:00404E0E                 mov     eax, edx
.text:00404E10                 shr     eax, cl
.text:00404E12                 and     eax, 1
.text:00404E15                 xor     eax, 1
.text:00404E18                 shl     eax, cl
.text:00404E1A                 xor     edx, eax
.text:00404E1C                 mov     [edi+4], edx
.text:00404E1F                 mov     edx, [esp+50h]
.text:00404E23                 mov     [esp+0Ch], esi
.text:00404E27                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404E2F                 mov     [esp+4], edx
.text:00404E33                 mov     dword ptr [esp], 0
.text:00404E3A                 call    sub_404EF0
.text:00404E3F                 add     esp, 40h
.text:00404E42                 pop     ebx
.text:00404E43                 pop     esi
.text:00404E44                 pop     edi
.text:00404E45                 retn
.text:00404E45 ; ---------------------------------------------------------------------------
.text:00404E46                 align 10h
.text:00404E50
.text:00404E50 ; =============== S U B R O U T I N E =======================================
.text:00404E50
.text:00404E50
.text:00404E50 ; int __cdecl sub_404E50(char *)
.text:00404E50 sub_404E50      proc near               ; CODE XREF: sub_403B10+64↑p
.text:00404E50
.text:00404E50 var_4C          = dword ptr -4Ch
.text:00404E50 var_48          = dword ptr -48h
.text:00404E50 var_44          = dword ptr -44h
.text:00404E50 var_40          = dword ptr -40h
.text:00404E50 var_3C          = dword ptr -3Ch
.text:00404E50 var_38          = dword ptr -38h
.text:00404E50 var_34          = dword ptr -34h
.text:00404E50 var_30          = dword ptr -30h
.text:00404E50 var_2C          = dword ptr -2Ch
.text:00404E50 var_28          = dword ptr -28h
.text:00404E50 var_24          = dword ptr -24h
.text:00404E50 var_20          = dword ptr -20h
.text:00404E50 var_1C          = dword ptr -1Ch
.text:00404E50 arg_0           = dword ptr  4
.text:00404E50
.text:00404E50                 sub     esp, 4Ch
.text:00404E53                 mov     ecx, ds:dword_407290
.text:00404E59                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404E61                 mov     edx, ds:dword_407294
.text:00404E67                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00404E6E                 mov     [esp+4Ch+var_3C], ecx
.text:00404E72                 mov     ecx, ds:dword_40729C
.text:00404E78                 mov     [esp+4Ch+var_38], edx
.text:00404E7C                 mov     edx, ds:dword_407298
.text:00404E82                 mov     [esp+4Ch+var_30], ecx
.text:00404E86                 mov     ecx, ds:dword_4072A0
.text:00404E8C                 mov     eax, edx
.text:00404E8E                 shr     eax, 1Ah
.text:00404E91                 and     eax, 1
.text:00404E94                 xor     eax, 1
.text:00404E97                 mov     [esp+4Ch+var_2C], ecx
.text:00404E9B                 shl     eax, 1Ah
.text:00404E9E                 mov     ecx, ds:dword_4072A4
.text:00404EA4                 xor     edx, eax
.text:00404EA6                 mov     [esp+4Ch+var_34], edx
.text:00404EAA                 mov     edx, [esp+4Ch+arg_0]
.text:00404EAE                 mov     [esp+4Ch+var_28], ecx
.text:00404EB2                 mov     ecx, ds:dword_4072A8
.text:00404EB8                 mov     [esp+4Ch+var_48], edx ; char *
.text:00404EBC                 mov     [esp+4Ch+var_24], ecx
.text:00404EC0                 mov     ecx, ds:dword_4072AC
.text:00404EC6                 mov     [esp+4Ch+var_20], ecx
.text:00404ECA                 mov     ecx, ds:dword_4072B0
.text:00404ED0                 mov     [esp+4Ch+var_1C], ecx
.text:00404ED4                 lea     ecx, [esp+4Ch+var_3C]
.text:00404ED8                 mov     [esp+4Ch+var_40], ecx ; int
.text:00404EDC                 call    sub_404EF0
.text:00404EE1                 add     esp, 4Ch
.text:00404EE4                 retn
.text:00404EE4 sub_404E50      endp
.text:00404EE4
.text:00404EE4 ; ---------------------------------------------------------------------------
.text:00404EE5                 align 10h
.text:00404EF0
.text:00404EF0 ; =============== S U B R O U T I N E =======================================
.text:00404EF0
.text:00404EF0
.text:00404EF0 ; int __cdecl sub_404EF0(int, char *, int, int)
.text:00404EF0 sub_404EF0      proc near               ; CODE XREF: .text:00404AA2↑p
.text:00404EF0                                         ; .text:00404AD2↑p ...
.text:00404EF0
.text:00404EF0 Block           = dword ptr -2Ch
.text:00404EF0 var_28          = dword ptr -28h
.text:00404EF0 Str             = dword ptr -24h
.text:00404EF0 var_20          = dword ptr -20h
.text:00404EF0 var_1C          = dword ptr -1Ch
.text:00404EF0 var_18          = dword ptr -18h
.text:00404EF0 var_14          = dword ptr -14h
.text:00404EF0 arg_0           = dword ptr  4
.text:00404EF0 arg_4           = dword ptr  8
.text:00404EF0 arg_8           = dword ptr  0Ch
.text:00404EF0 arg_C           = dword ptr  10h
.text:00404EF0
.text:00404EF0                 push    ebp
.text:00404EF1                 push    edi
.text:00404EF2                 push    esi
.text:00404EF3                 push    ebx
.text:00404EF4                 sub     esp, 1Ch
.text:00404EF7                 call    _errno
.text:00404EFC                 mov     edx, [eax]
.text:00404EFE                 mov     eax, [esp+2Ch+arg_0]
.text:00404F02                 mov     [esp+2Ch+var_14], edx
.text:00404F06                 test    eax, eax
.text:00404F08                 js      loc_4050AA
.text:00404F0E                 mov     eax, [esp+2Ch+arg_0]
.text:00404F12                 cmp     dword_406040, eax
.text:00404F18                 ja      short loc_404F90
.text:00404F1A                 mov     esi, eax
.text:00404F1C                 inc     esi
.text:00404F1D                 cmp     esi, 1FFFFFFFh
.text:00404F23                 ja      loc_4050AF
.text:00404F29                 mov     ebx, off_40604C
.text:00404F2F                 cmp     ebx, offset dword_406044
.text:00404F35                 jz      loc_405081
.text:00404F3B
.text:00404F3B loc_404F3B:                             ; CODE XREF: sub_404EF0+1B5↓j
.text:00404F3B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00404F3E                 lea     ecx, ds:0[esi*8]
.text:00404F45                 mov     ebp, esi
.text:00404F47                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00404F4B                 call    sub_405190
.text:00404F50                 mov     off_40604C, eax
.text:00404F55                 mov     ebx, dword_406040
.text:00404F5B                 sub     ebp, ebx
.text:00404F5D                 lea     edi, [eax+ebx*8]
.text:00404F60                 lea     eax, ds:0[ebp*8]
.text:00404F67                 cmp     eax, 7
.text:00404F6A                 jbe     short loc_404F80
.text:00404F6C                 test    edi, 4
.text:00404F72                 jz      short loc_404F80
.text:00404F74                 mov     dword ptr [edi], 0
.text:00404F7A                 sub     eax, 4
.text:00404F7D                 add     edi, 4
.text:00404F80
.text:00404F80 loc_404F80:                             ; CODE XREF: sub_404EF0+7A↑j
.text:00404F80                                         ; sub_404EF0+82↑j
.text:00404F80                 cld
.text:00404F81                 mov     ecx, eax
.text:00404F83                 shr     ecx, 2
.text:00404F86                 xor     eax, eax
.text:00404F88                 rep stosd
.text:00404F8A                 mov     dword_406040, esi
.text:00404F90
.text:00404F90 loc_404F90:                             ; CODE XREF: sub_404EF0+28↑j
.text:00404F90                 mov     esi, off_40604C
.text:00404F96                 mov     eax, [esp+2Ch+arg_0]
.text:00404F9A                 mov     ebp, [esi+eax*8]
.text:00404F9D                 mov     edi, [esi+eax*8+4]
.text:00404FA1                 mov     esi, [esp+2Ch+arg_C]
.text:00404FA5                 test    esi, esi
.text:00404FA7                 jz      loc_405077
.text:00404FAD
.text:00404FAD loc_404FAD:                             ; CODE XREF: sub_404EF0+18C↓j
.text:00404FAD                 call    _errno
.text:00404FB2                 mov     ebx, [eax]
.text:00404FB4                 mov     [esp+2Ch+var_18], esi ; int
.text:00404FB8                 mov     ecx, [esi]
.text:00404FBA                 mov     [esp+2Ch+Block], edi ; int
.text:00404FBD                 mov     edx, [esp+2Ch+arg_8]
.text:00404FC1                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404FC5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404FC9                 mov     ecx, [esp+2Ch+arg_4]
.text:00404FCD                 mov     [esp+2Ch+var_20], edx ; int
.text:00404FD1                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404FD5                 call    sub_403DB0
.text:00404FDA                 mov     esi, eax
.text:00404FDC                 call    _errno
.text:00404FE1                 mov     [eax], ebx
.text:00404FE3                 cmp     ebp, esi
.text:00404FE5                 ja      short loc_40505B
.text:00404FE7                 lea     ebp, [esi+1]
.text:00404FEA                 mov     ebx, off_40604C
.text:00404FF0                 cmp     edi, offset unk_407190
.text:00404FF6                 mov     esi, [esp+2Ch+arg_0]
.text:00404FFA                 mov     [ebx+esi*8], ebp
.text:00404FFD                 jz      short loc_40500D
.text:00404FFF                 mov     [esp+2Ch+Block], edi ; Block
.text:00405002                 call    free
.text:00405007                 mov     ebx, off_40604C
.text:0040500D
.text:0040500D loc_40500D:                             ; CODE XREF: sub_404EF0+10D↑j
.text:0040500D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00405010                 call    sub_405100
.text:00405015                 mov     esi, [esp+2Ch+arg_C]
.text:00405019                 mov     edi, eax
.text:0040501B                 mov     eax, [esp+2Ch+arg_0]
.text:0040501F                 test    esi, esi
.text:00405021                 mov     [ebx+eax*8+4], edi
.text:00405025                 jz      short loc_405070
.text:00405027
.text:00405027 loc_405027:                             ; CODE XREF: sub_404EF0+185↓j
.text:00405027                 call    _errno
.text:0040502C                 mov     ebx, [eax]
.text:0040502E                 mov     [esp+2Ch+var_18], esi ; int
.text:00405032                 mov     ecx, [esi]
.text:00405034                 mov     [esp+2Ch+Block], edi ; int
.text:00405037                 mov     edx, [esp+2Ch+arg_8]
.text:0040503B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040503F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405043                 mov     ecx, [esp+2Ch+arg_4]
.text:00405047                 mov     [esp+2Ch+var_20], edx ; int
.text:0040504B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040504F                 call    sub_403DB0
.text:00405054                 call    _errno
.text:00405059                 mov     [eax], ebx
.text:0040505B
.text:0040505B loc_40505B:                             ; CODE XREF: sub_404EF0+F5↑j
.text:0040505B                 call    _errno
.text:00405060                 mov     ebp, [esp+2Ch+var_14]
.text:00405064                 mov     [eax], ebp
.text:00405066                 add     esp, 1Ch
.text:00405069                 mov     eax, edi
.text:0040506B                 pop     ebx
.text:0040506C                 pop     esi
.text:0040506D                 pop     edi
.text:0040506E                 pop     ebp
.text:0040506F                 retn
.text:00405070 ; ---------------------------------------------------------------------------
.text:00405070
.text:00405070 loc_405070:                             ; CODE XREF: sub_404EF0+135↑j
.text:00405070                 mov     esi, offset dword_407290
.text:00405075                 jmp     short loc_405027
.text:00405077 ; ---------------------------------------------------------------------------
.text:00405077
.text:00405077 loc_405077:                             ; CODE XREF: sub_404EF0+B7↑j
.text:00405077                 mov     esi, offset dword_407290
.text:0040507C                 jmp     loc_404FAD
.text:00405081 ; ---------------------------------------------------------------------------
.text:00405081
.text:00405081 loc_405081:                             ; CODE XREF: sub_404EF0+45↑j
.text:00405081                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00405088                 call    sub_405100
.text:0040508D                 mov     off_40604C, eax
.text:00405092                 mov     edi, dword_406044
.text:00405098                 mov     ebx, eax
.text:0040509A                 mov     ecx, off_406048
.text:004050A0                 mov     [eax], edi
.text:004050A2                 mov     [eax+4], ecx
.text:004050A5                 jmp     loc_404F3B
.text:004050AA ; ---------------------------------------------------------------------------
.text:004050AA
.text:004050AA loc_4050AA:                             ; CODE XREF: sub_404EF0+18↑j
.text:004050AA                 call    abort
.text:004050AF ; ---------------------------------------------------------------------------
.text:004050AF
.text:004050AF loc_4050AF:                             ; CODE XREF: sub_404EF0+33↑j
.text:004050AF                 call    sub_4053B0
.text:004050AF sub_404EF0      endp
.text:004050AF
.text:004050AF ; ---------------------------------------------------------------------------
.text:004050B4                 align 10h
.text:004050C0
.text:004050C0 ; =============== S U B R O U T I N E =======================================
.text:004050C0
.text:004050C0
.text:004050C0 sub_4050C0      proc near
.text:004050C0
.text:004050C0 Size            = dword ptr -0Ch
.text:004050C0 var_4           = dword ptr -4
.text:004050C0 arg_0           = dword ptr  4
.text:004050C0 arg_4           = dword ptr  8
.text:004050C0
.text:004050C0                 sub     esp, 0Ch
.text:004050C3                 xor     edx, edx
.text:004050C5                 mov     ecx, [esp+0Ch+arg_4]
.text:004050C9                 mov     [esp+0Ch+var_4], ebx
.text:004050CD                 mov     eax, 0FFFFFFFFh
.text:004050D2                 mov     ebx, [esp+0Ch+arg_0]
.text:004050D6                 div     ecx
.text:004050D8                 cmp     eax, ebx
.text:004050DA                 jb      short loc_4050F9
.text:004050DC                 mov     edx, ebx
.text:004050DE                 imul    edx, ecx
.text:004050E1                 mov     [esp+0Ch+Size], edx ; Size
.text:004050E4                 call    malloc
.text:004050E9                 test    eax, eax
.text:004050EB                 jz      short loc_4050F5
.text:004050ED
.text:004050ED loc_4050ED:                             ; CODE XREF: sub_4050C0+37↓j
.text:004050ED                 mov     ebx, [esp+0Ch+var_4]
.text:004050F1                 add     esp, 0Ch
.text:004050F4                 retn
.text:004050F5 ; ---------------------------------------------------------------------------
.text:004050F5
.text:004050F5 loc_4050F5:                             ; CODE XREF: sub_4050C0+2B↑j
.text:004050F5                 test    ebx, ebx
.text:004050F7                 jz      short loc_4050ED
.text:004050F9
.text:004050F9 loc_4050F9:                             ; CODE XREF: sub_4050C0+1A↑j
.text:004050F9                 call    sub_4053B0
.text:004050F9 sub_4050C0      endp
.text:004050F9
.text:004050F9 ; ---------------------------------------------------------------------------
.text:004050FE                 align 10h
.text:00405100
.text:00405100 ; =============== S U B R O U T I N E =======================================
.text:00405100
.text:00405100
.text:00405100 ; int __cdecl sub_405100(size_t)
.text:00405100 sub_405100      proc near               ; CODE XREF: .text:00404829↑p
.text:00405100                                         ; .text:00404A06↑p ...
.text:00405100
.text:00405100 Size            = dword ptr -0Ch
.text:00405100 var_4           = dword ptr -4
.text:00405100 arg_0           = dword ptr  4
.text:00405100
.text:00405100                 sub     esp, 0Ch
.text:00405103                 mov     [esp+0Ch+var_4], ebx
.text:00405107                 mov     ebx, [esp+0Ch+arg_0]
.text:0040510B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040510E                 call    malloc
.text:00405113                 test    eax, eax
.text:00405115                 jz      short loc_405120
.text:00405117
.text:00405117 loc_405117:                             ; CODE XREF: sub_405100+22↓j
.text:00405117                 mov     ebx, [esp+0Ch+var_4]
.text:0040511B                 add     esp, 0Ch
.text:0040511E                 retn
.text:0040511E ; ---------------------------------------------------------------------------
.text:0040511F                 align 10h
.text:00405120
.text:00405120 loc_405120:                             ; CODE XREF: sub_405100+15↑j
.text:00405120                 test    ebx, ebx
.text:00405122                 jz      short loc_405117
.text:00405124                 call    sub_4053B0
.text:00405124 sub_405100      endp
.text:00405124
.text:00405124 ; ---------------------------------------------------------------------------
.text:00405129                 align 10h
.text:00405130                 sub     esp, 1Ch
.text:00405133                 xor     edx, edx
.text:00405135                 mov     eax, 0FFFFFFFFh
.text:0040513A                 mov     [esp+14h], ebx
.text:0040513E                 mov     ecx, [esp+20h]
.text:00405142                 mov     ebx, [esp+28h]
.text:00405146                 mov     [esp+18h], esi
.text:0040514A                 mov     esi, [esp+24h]
.text:0040514E                 div     ebx
.text:00405150                 cmp     eax, esi
.text:00405152                 jb      short loc_405184
.text:00405154                 mov     [esp], ecx
.text:00405157                 mov     edx, esi
.text:00405159                 imul    edx, ebx
.text:0040515C                 mov     [esp+4], edx
.text:00405160                 call    realloc
.text:00405165                 test    eax, eax
.text:00405167                 mov     ecx, eax
.text:00405169                 jz      short loc_405180
.text:0040516B
.text:0040516B loc_40516B:                             ; CODE XREF: .text:00405182↓j
.text:0040516B                 mov     ebx, [esp+14h]
.text:0040516F                 mov     eax, ecx
.text:00405171                 mov     esi, [esp+18h]
.text:00405175                 add     esp, 1Ch
.text:00405178                 retn
.text:00405178 ; ---------------------------------------------------------------------------
.text:00405179                 align 10h
.text:00405180
.text:00405180 loc_405180:                             ; CODE XREF: .text:00405169↑j
.text:00405180                 test    esi, esi
.text:00405182                 jz      short loc_40516B
.text:00405184
.text:00405184 loc_405184:                             ; CODE XREF: .text:00405152↑j
.text:00405184                 call    sub_4053B0
.text:00405184 ; ---------------------------------------------------------------------------
.text:00405189                 align 10h
.text:00405190
.text:00405190 ; =============== S U B R O U T I N E =======================================
.text:00405190
.text:00405190
.text:00405190 ; int __cdecl sub_405190(void *, size_t)
.text:00405190 sub_405190      proc near               ; CODE XREF: sub_404EF0+5B↑p
.text:00405190
.text:00405190 Block           = dword ptr -0Ch
.text:00405190 Size            = dword ptr -8
.text:00405190 var_4           = dword ptr -4
.text:00405190 arg_0           = dword ptr  4
.text:00405190 arg_4           = dword ptr  8
.text:00405190
.text:00405190                 sub     esp, 0Ch
.text:00405193                 mov     edx, [esp+0Ch+arg_0]
.text:00405197                 mov     [esp+0Ch+var_4], ebx
.text:0040519B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040519F                 mov     [esp+0Ch+Block], edx ; Block
.text:004051A2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004051A6                 call    realloc
.text:004051AB                 test    eax, eax
.text:004051AD                 jz      short loc_4051B7
.text:004051AF
.text:004051AF loc_4051AF:                             ; CODE XREF: sub_405190+29↓j
.text:004051AF                 mov     ebx, [esp+0Ch+var_4]
.text:004051B3                 add     esp, 0Ch
.text:004051B6                 retn
.text:004051B7 ; ---------------------------------------------------------------------------
.text:004051B7
.text:004051B7 loc_4051B7:                             ; CODE XREF: sub_405190+1D↑j
.text:004051B7                 test    ebx, ebx
.text:004051B9                 jz      short loc_4051AF
.text:004051BB                 call    sub_4053B0
.text:004051BB sub_405190      endp
.text:004051BB
.text:004051C0 ; ---------------------------------------------------------------------------
.text:004051C0                 jmp     sub_405310
.text:004051C0 ; ---------------------------------------------------------------------------
.text:004051C5                 align 10h
.text:004051D0                 sub     esp, 0Ch
.text:004051D3                 mov     edx, [esp+14h]
.text:004051D7                 mov     dword ptr [esp+8], 1
.text:004051DF                 mov     [esp+4], edx
.text:004051E3                 mov     edx, [esp+10h]
.text:004051E7                 mov     [esp], edx
.text:004051EA                 call    sub_405310
.text:004051EF                 add     esp, 0Ch
.text:004051F2                 retn
.text:004051F2 ; ---------------------------------------------------------------------------
.text:004051F3                 align 10h
.text:00405200                 sub     esp, 1Ch
.text:00405203                 mov     [esp+18h], ebx
.text:00405207                 mov     ebx, [esp+20h]
.text:0040520B                 mov     [esp], ebx
.text:0040520E                 call    malloc
.text:00405213                 test    eax, eax
.text:00405215                 jz      short loc_405233
.text:00405217
.text:00405217 loc_405217:                             ; CODE XREF: .text:00405235↓j
.text:00405217                 mov     [esp+8], ebx
.text:0040521B                 mov     dword ptr [esp+4], 0
.text:00405223                 mov     [esp], eax
.text:00405226                 call    memset
.text:0040522B                 mov     ebx, [esp+18h]
.text:0040522F                 add     esp, 1Ch
.text:00405232                 retn
.text:00405233 ; ---------------------------------------------------------------------------
.text:00405233
.text:00405233 loc_405233:                             ; CODE XREF: .text:00405215↑j
.text:00405233                 test    ebx, ebx
.text:00405235                 jz      short loc_405217
.text:00405237                 call    sub_4053B0
.text:00405237 ; ---------------------------------------------------------------------------
.text:0040523C                 align 10h
.text:00405240                 sub     esp, 0Ch
.text:00405243                 xor     edx, edx
.text:00405245                 mov     ecx, [esp+14h]
.text:00405249                 mov     [esp+8], ebx
.text:0040524D                 mov     eax, 0FFFFFFFFh
.text:00405252                 mov     ebx, [esp+10h]
.text:00405256                 div     ecx
.text:00405258                 cmp     eax, ebx
.text:0040525A                 jb      short loc_405278
.text:0040525C                 mov     [esp+4], ecx
.text:00405260                 mov     [esp], ebx
.text:00405263                 call    calloc
.text:00405268                 test    eax, eax
.text:0040526A                 jz      short loc_405274
.text:0040526C
.text:0040526C loc_40526C:                             ; CODE XREF: .text:00405276↓j
.text:0040526C                 mov     ebx, [esp+8]
.text:00405270                 add     esp, 0Ch
.text:00405273                 retn
.text:00405274 ; ---------------------------------------------------------------------------
.text:00405274
.text:00405274 loc_405274:                             ; CODE XREF: .text:0040526A↑j
.text:00405274                 test    ebx, ebx
.text:00405276                 jz      short loc_40526C
.text:00405278
.text:00405278 loc_405278:                             ; CODE XREF: .text:0040525A↑j
.text:00405278                 call    sub_4053B0
.text:00405278 ; ---------------------------------------------------------------------------
.text:0040527D                 align 10h
.text:00405280                 sub     esp, 1Ch
.text:00405283                 mov     [esp+18h], ebx
.text:00405287                 mov     ebx, [esp+24h]
.text:0040528B                 mov     [esp], ebx
.text:0040528E                 call    malloc
.text:00405293                 test    eax, eax
.text:00405295                 mov     edx, eax
.text:00405297                 jz      short loc_4052B5
.text:00405299
.text:00405299 loc_405299:                             ; CODE XREF: .text:004052B7↓j
.text:00405299                 mov     [esp+8], ebx
.text:0040529D                 mov     ecx, [esp+20h]
.text:004052A1                 mov     [esp], edx
.text:004052A4                 mov     [esp+4], ecx
.text:004052A8                 call    memcpy
.text:004052AD                 mov     ebx, [esp+18h]
.text:004052B1                 add     esp, 1Ch
.text:004052B4                 retn
.text:004052B5 ; ---------------------------------------------------------------------------
.text:004052B5
.text:004052B5 loc_4052B5:                             ; CODE XREF: .text:00405297↑j
.text:004052B5                 test    ebx, ebx
.text:004052B7                 jz      short loc_405299
.text:004052B9                 call    sub_4053B0
.text:004052B9 ; ---------------------------------------------------------------------------
.text:004052BE                 align 10h
.text:004052C0
.text:004052C0 ; =============== S U B R O U T I N E =======================================
.text:004052C0
.text:004052C0
.text:004052C0 ; int __cdecl sub_4052C0(char *)
.text:004052C0 sub_4052C0      proc near               ; CODE XREF: sub_403C00+24↑p
.text:004052C0
.text:004052C0 Str             = dword ptr -1Ch
.text:004052C0 Src             = dword ptr -18h
.text:004052C0 Size            = dword ptr -14h
.text:004052C0 var_8           = dword ptr -8
.text:004052C0 var_4           = dword ptr -4
.text:004052C0 arg_0           = dword ptr  4
.text:004052C0
.text:004052C0                 sub     esp, 1Ch
.text:004052C3                 mov     [esp+1Ch+var_4], esi
.text:004052C7                 mov     esi, [esp+1Ch+arg_0]
.text:004052CB                 mov     [esp+1Ch+var_8], ebx
.text:004052CF                 mov     [esp+1Ch+Str], esi ; Str
.text:004052D2                 call    strlen
.text:004052D7                 lea     ebx, [eax+1]
.text:004052DA                 mov     [esp+1Ch+Str], ebx ; Size
.text:004052DD                 call    malloc
.text:004052E2                 test    eax, eax
.text:004052E4                 jz      short loc_405302
.text:004052E6
.text:004052E6 loc_4052E6:                             ; CODE XREF: sub_4052C0+44↓j
.text:004052E6                 mov     [esp+1Ch+Size], ebx ; Size
.text:004052EA                 mov     [esp+1Ch+Src], esi ; Src
.text:004052EE                 mov     [esp+1Ch+Str], eax ; void *
.text:004052F1                 call    memcpy
.text:004052F6                 mov     ebx, [esp+1Ch+var_8]
.text:004052FA                 mov     esi, [esp+1Ch+var_4]
.text:004052FE                 add     esp, 1Ch
.text:00405301                 retn
.text:00405302 ; ---------------------------------------------------------------------------
.text:00405302
.text:00405302 loc_405302:                             ; CODE XREF: sub_4052C0+24↑j
.text:00405302                 test    ebx, ebx
.text:00405304                 jz      short loc_4052E6
.text:00405306                 call    sub_4053B0
.text:00405306 sub_4052C0      endp
.text:00405306
.text:00405306 ; ---------------------------------------------------------------------------
.text:0040530B                 align 10h
.text:00405310
.text:00405310 ; =============== S U B R O U T I N E =======================================
.text:00405310
.text:00405310
.text:00405310 ; int __cdecl sub_405310(void *, int, int)
.text:00405310 sub_405310      proc near               ; CODE XREF: .text:004051C0↑j
.text:00405310                                         ; .text:004051EA↑p
.text:00405310
.text:00405310 Block           = dword ptr -1Ch
.text:00405310 Size            = dword ptr -18h
.text:00405310 var_C           = dword ptr -0Ch
.text:00405310 var_8           = dword ptr -8
.text:00405310 var_4           = dword ptr -4
.text:00405310 arg_0           = dword ptr  4
.text:00405310 arg_4           = dword ptr  8
.text:00405310 arg_8           = dword ptr  0Ch
.text:00405310
.text:00405310                 sub     esp, 1Ch
.text:00405313                 mov     [esp+1Ch+var_8], esi
.text:00405317                 mov     esi, [esp+1Ch+arg_0]
.text:0040531B                 mov     [esp+1Ch+var_4], edi
.text:0040531F                 mov     edi, [esp+1Ch+arg_4]
.text:00405323                 test    esi, esi
.text:00405325                 mov     [esp+1Ch+var_C], ebx
.text:00405329                 mov     ecx, [edi]
.text:0040532B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040532F                 jz      short loc_405370
.text:00405331                 xor     edx, edx
.text:00405333                 mov     eax, 7FFFFFFFh
.text:00405338                 div     ebx
.text:0040533A                 cmp     eax, ecx
.text:0040533C                 jb      short loc_405369
.text:0040533E                 add     ecx, ecx
.text:00405340
.text:00405340 loc_405340:                             ; CODE XREF: sub_405310+62↓j
.text:00405340                                         ; sub_405310+71↓j ...
.text:00405340                 mov     [edi], ecx
.text:00405342                 imul    ebx, ecx
.text:00405345                 mov     [esp+1Ch+Block], esi ; Block
.text:00405348                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040534C                 call    realloc
.text:00405351                 test    eax, eax
.text:00405353                 jz      short loc_405365
.text:00405355
.text:00405355 loc_405355:                             ; CODE XREF: sub_405310+57↓j
.text:00405355                 mov     ebx, [esp+1Ch+var_C]
.text:00405359                 mov     esi, [esp+1Ch+var_8]
.text:0040535D                 mov     edi, [esp+1Ch+var_4]
.text:00405361                 add     esp, 1Ch
.text:00405364                 retn
.text:00405365 ; ---------------------------------------------------------------------------
.text:00405365
.text:00405365 loc_405365:                             ; CODE XREF: sub_405310+43↑j
.text:00405365                 test    ebx, ebx
.text:00405367                 jz      short loc_405355
.text:00405369
.text:00405369 loc_405369:                             ; CODE XREF: sub_405310+2C↑j
.text:00405369                 call    sub_4053B0
.text:00405369 ; ---------------------------------------------------------------------------
.text:0040536E                 align 10h
.text:00405370
.text:00405370 loc_405370:                             ; CODE XREF: sub_405310+1F↑j
.text:00405370                 test    ecx, ecx
.text:00405372                 jnz     short loc_405340
.text:00405374                 xor     edx, edx
.text:00405376                 mov     eax, 40h ; '@'
.text:0040537B                 div     ebx
.text:0040537D                 test    eax, eax
.text:0040537F                 mov     ecx, eax
.text:00405381                 jnz     short loc_405340
.text:00405383                 mov     ecx, 1
.text:00405388                 jmp     short loc_405340
.text:00405388 sub_405310      endp
.text:00405388
.text:00405388 ; ---------------------------------------------------------------------------
.text:0040538A                 align 10h
.text:00405390 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4053B0+3↓o
.text:004053A1 ; const char aS[]
.text:004053A1 aS              db '%s',0               ; DATA XREF: sub_4053B0+10↓o
.text:004053A4                 align 10h
.text:004053B0
.text:004053B0 ; =============== S U B R O U T I N E =======================================
.text:004053B0
.text:004053B0 ; Attributes: noreturn
.text:004053B0
.text:004053B0 sub_4053B0      proc near               ; CODE XREF: sub_404EF0:loc_4050AF↑p
.text:004053B0                                         ; sub_4050C0:loc_4050F9↑p ...
.text:004053B0
.text:004053B0 Code            = dword ptr -1Ch
.text:004053B0 ErrorMessage    = dword ptr -18h
.text:004053B0 var_14          = dword ptr -14h
.text:004053B0 var_10          = byte ptr -10h
.text:004053B0
.text:004053B0                 sub     esp, 1Ch
.text:004053B3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004053BA                 call    ds:libintl_gettext
.text:004053C0                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:004053C8                 mov     edx, Code
.text:004053CE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004053D6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004053DA                 mov     [esp+1Ch+Code], edx ; Code
.text:004053DD                 call    sub_405440
.text:004053E2                 call    abort
.text:004053E2 sub_4053B0      endp
.text:004053E2
.text:004053E2 ; ---------------------------------------------------------------------------
.text:004053E7                 align 10h
.text:004053F0
.text:004053F0 ; =============== S U B R O U T I N E =======================================
.text:004053F0
.text:004053F0 ; Attributes: thunk
.text:004053F0
.text:004053F0 libintl_bindtextdomain proc near
.text:004053F0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004053F0 libintl_bindtextdomain endp
.text:004053F0
.text:004053F0 ; ---------------------------------------------------------------------------
.text:004053F6                 align 10h
.text:00405400                 jmp     ds:libintl_textdomain
.text:00405400 ; ---------------------------------------------------------------------------
.text:00405406                 align 10h
.text:00405410                 jmp     ds:libintl_gettext
.text:00405410 ; ---------------------------------------------------------------------------
.text:00405416                 align 10h
.text:00405420 ; const char aS_0[]
.text:00405420 aS_0            db ': %s',0             ; DATA XREF: sub_405440+B8↓o
.text:00405420                                         ; sub_405544+122↓o
.text:00405425 aUnknownSystemE db 'Unknown system error',0
.text:00405425                                         ; DATA XREF: sub_405440:loc_40550D↓o
.text:00405425                                         ; sub_405544:loc_40567E↓o
.text:0040543A ; const char aS_1[]
.text:0040543A aS_1            db '%s: ',0             ; DATA XREF: sub_405440:loc_405514↓o
.text:0040543F                 align 10h
.text:00405440
.text:00405440 ; =============== S U B R O U T I N E =======================================
.text:00405440
.text:00405440
.text:00405440 ; int __cdecl sub_405440(int Code, int ErrorMessage, char *, char)
.text:00405440 sub_405440      proc near               ; CODE XREF: sub_4018E0+2C3↑p
.text:00405440                                         ; sub_4018E0+3D4↑p ...
.text:00405440
.text:00405440 Stream          = dword ptr -1Ch
.text:00405440 Format          = dword ptr -18h
.text:00405440 ArgList         = dword ptr -14h
.text:00405440 Code            = dword ptr  4
.text:00405440 ErrorMessage    = dword ptr  8
.text:00405440 arg_8           = dword ptr  0Ch
.text:00405440 arg_C           = byte ptr  10h
.text:00405440
.text:00405440                 push    esi
.text:00405441                 push    ebx
.text:00405442                 sub     esp, 14h
.text:00405445                 mov     edx, ds:_iob
.text:0040544B                 mov     esi, [esp+1Ch+Code]
.text:0040544F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405453                 add     edx, 20h ; ' '
.text:00405456                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405459                 call    fflush
.text:0040545E                 mov     eax, ds:dword_407310
.text:00405463                 test    eax, eax
.text:00405465                 jz      loc_405514
.text:0040546B                 call    eax ; dword_407310
.text:0040546D
.text:0040546D loc_40546D:                             ; CODE XREF: sub_405440+F7↓j
.text:0040546D                 lea     edx, [esp+1Ch+arg_C]
.text:00405471                 mov     ecx, [esp+1Ch+arg_8]
.text:00405475                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405479                 mov     edx, ds:_iob
.text:0040547F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405483                 add     edx, 40h ; '@'
.text:00405486                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405489                 call    vfprintf
.text:0040548E                 inc     ds:dword_407320
.text:00405494                 test    ebx, ebx
.text:00405496                 jnz     short loc_4054E2
.text:00405498
.text:00405498 loc_405498:                             ; CODE XREF: sub_405440+CB↓j
.text:00405498                 mov     edx, ds:_iob
.text:0040549E                 lea     ecx, [edx+40h]
.text:004054A1                 mov     ebx, [ecx+4]
.text:004054A4                 dec     ebx
.text:004054A5                 test    ebx, ebx
.text:004054A7                 mov     [ecx+4], ebx
.text:004054AA                 js      short loc_4054D0
.text:004054AC                 mov     ecx, [edx+40h]
.text:004054AF                 mov     byte ptr [ecx], 0Ah
.text:004054B2                 inc     dword ptr [edx+40h]
.text:004054B5
.text:004054B5 loc_4054B5:                             ; CODE XREF: sub_405440+A0↓j
.text:004054B5                 mov     edx, ds:_iob
.text:004054BB                 add     edx, 40h ; '@'
.text:004054BE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004054C1                 call    fflush
.text:004054C6                 test    esi, esi
.text:004054C8                 jnz     short loc_40553C
.text:004054CA                 add     esp, 14h
.text:004054CD                 pop     ebx
.text:004054CE                 pop     esi
.text:004054CF                 retn
.text:004054D0 ; ---------------------------------------------------------------------------
.text:004054D0
.text:004054D0 loc_4054D0:                             ; CODE XREF: sub_405440+6A↑j
.text:004054D0                 mov     [esp+1Ch+Format], ecx ; File
.text:004054D4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004054DB                 call    _flsbuf
.text:004054E0                 jmp     short loc_4054B5
.text:004054E2 ; ---------------------------------------------------------------------------
.text:004054E2
.text:004054E2 loc_4054E2:                             ; CODE XREF: sub_405440+56↑j
.text:004054E2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004054E5                 call    strerror
.text:004054EA                 test    eax, eax
.text:004054EC                 jz      short loc_40550D
.text:004054EE
.text:004054EE loc_4054EE:                             ; CODE XREF: sub_405440+D2↓j
.text:004054EE                 mov     [esp+1Ch+ArgList], eax
.text:004054F2                 mov     ebx, ds:_iob
.text:004054F8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00405500                 add     ebx, 40h ; '@'
.text:00405503                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405506                 call    fprintf
.text:0040550B                 jmp     short loc_405498
.text:0040550D ; ---------------------------------------------------------------------------
.text:0040550D
.text:0040550D loc_40550D:                             ; CODE XREF: sub_405440+AC↑j
.text:0040550D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405512                 jmp     short loc_4054EE
.text:00405514 ; ---------------------------------------------------------------------------
.text:00405514
.text:00405514 loc_405514:                             ; CODE XREF: sub_405440+25↑j
.text:00405514                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040551C                 mov     edx, ds:_iob
.text:00405522                 mov     ecx, ds:dword_4072E0
.text:00405528                 add     edx, 40h ; '@'
.text:0040552B                 mov     [esp+1Ch+ArgList], ecx
.text:0040552F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405532                 call    fprintf
.text:00405537                 jmp     loc_40546D
.text:0040553C ; ---------------------------------------------------------------------------
.text:0040553C
.text:0040553C loc_40553C:                             ; CODE XREF: sub_405440+88↑j
.text:0040553C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040553F                 call    exit
.text:0040553F sub_405440      endp
.text:0040553F
.text:00405544
.text:00405544 ; =============== S U B R O U T I N E =======================================
.text:00405544
.text:00405544
.text:00405544 ; int __cdecl sub_405544(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405544 sub_405544      proc near               ; DATA XREF: sub_405544+77↓o
.text:00405544
.text:00405544 Stream          = dword ptr -28h
.text:00405544 Format          = dword ptr -24h
.text:00405544 ArgList         = dword ptr -20h
.text:00405544 var_1C          = dword ptr -1Ch
.text:00405544 Code            = dword ptr  8
.text:00405544 ErrorMessage    = dword ptr  0Ch
.text:00405544 Str2            = dword ptr  10h
.text:00405544 arg_10          = dword ptr  14h
.text:00405544 arg_14          = dword ptr  18h
.text:00405544 arg_18          = byte ptr  1Ch
.text:00405544
.text:00405544                 and     eax, 64253A73h
.text:00405549                 cmp     ah, [eax]
.text:0040554B
.text:0040554B loc_40554B:                             ; DATA XREF: sub_405544:loc_405685↓o
.text:0040554B                 add     ds:55003A73h, ah
.text:00405551                 push    edi
.text:00405552                 push    esi
.text:00405553                 push    ebx
.text:00405554                 sub     esp, 1Ch
.text:00405557                 mov     edx, ds:dword_407350
.text:0040555D                 mov     ebp, [esp+28h+Code]
.text:00405561                 mov     edi, [esp+28h+ErrorMessage]
.text:00405565                 test    edx, edx
.text:00405567                 mov     ebx, [esp+28h+Str2]
.text:0040556B                 mov     esi, [esp+28h+arg_10]
.text:0040556F                 jz      short loc_405589
.text:00405571                 cmp     ds:dword_4072D0, esi
.text:00405577                 jz      loc_4056B0
.text:0040557D
.text:0040557D loc_40557D:                             ; CODE XREF: sub_405544+18D↓j
.text:0040557D                 mov     ds:Str1, ebx
.text:00405583                 mov     ds:dword_4072D0, esi
.text:00405589
.text:00405589 loc_405589:                             ; CODE XREF: sub_405544+2B↑j
.text:00405589                 mov     edx, ds:_iob
.text:0040558F                 add     edx, 20h ; ' '
.text:00405592                 mov     [esp+28h+Stream], edx ; Stream
.text:00405595                 call    fflush
.text:0040559A                 mov     eax, ds:dword_407310
.text:0040559F                 test    eax, eax
.text:004055A1                 jz      loc_405685
.text:004055A7                 call    eax ; dword_407310
.text:004055A9
.text:004055A9 loc_4055A9:                             ; CODE XREF: sub_405544+164↓j
.text:004055A9                 test    ebx, ebx
.text:004055AB                 jz      short loc_4055CE
.text:004055AD                 mov     [esp+28h+ArgList], ebx
.text:004055B1                 mov     ebx, ds:_iob
.text:004055B7                 mov     [esp+28h+var_1C], esi
.text:004055BB                 mov     [esp+28h+Format], offset sub_405544 ; Format
.text:004055C3                 add     ebx, 40h ; '@'
.text:004055C6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004055C9                 call    fprintf
.text:004055CE
.text:004055CE loc_4055CE:                             ; CODE XREF: sub_405544+67↑j
.text:004055CE                 mov     esi, ds:_iob
.text:004055D4                 lea     edx, [esp+28h+arg_18]
.text:004055D8                 mov     ecx, [esp+28h+arg_14]
.text:004055DC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004055E0                 add     esi, 40h ; '@'
.text:004055E3                 mov     [esp+28h+Format], ecx ; Format
.text:004055E7                 mov     [esp+28h+Stream], esi ; Stream
.text:004055EA                 call    vfprintf
.text:004055EF                 inc     ds:dword_407320
.text:004055F5                 test    edi, edi
.text:004055F7                 jnz     short loc_405650
.text:004055F9
.text:004055F9 loc_4055F9:                             ; CODE XREF: sub_405544+135↓j
.text:004055F9                 mov     edx, ds:_iob
.text:004055FF                 lea     ecx, [edx+40h]
.text:00405602                 mov     ebx, [ecx+4]
.text:00405605                 dec     ebx
.text:00405606                 test    ebx, ebx
.text:00405608                 mov     [ecx+4], ebx
.text:0040560B                 js      short loc_405637
.text:0040560D                 mov     esi, [edx+40h]
.text:00405610                 mov     byte ptr [esi], 0Ah
.text:00405613                 inc     dword ptr [edx+40h]
.text:00405616
.text:00405616 loc_405616:                             ; CODE XREF: sub_405544+103↓j
.text:00405616                 mov     ecx, ds:_iob
.text:0040561C                 add     ecx, 40h ; '@'
.text:0040561F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405622                 call    fflush
.text:00405627                 test    ebp, ebp
.text:00405629                 jnz     loc_4056D6
.text:0040562F
.text:0040562F loc_40562F:                             ; CODE XREF: sub_405544+173↓j
.text:0040562F                                         ; sub_405544+187↓j
.text:0040562F                 add     esp, 1Ch
.text:00405632                 pop     ebx
.text:00405633                 pop     esi
.text:00405634                 pop     edi
.text:00405635                 pop     ebp
.text:00405636                 retn
.text:00405637 ; ---------------------------------------------------------------------------
.text:00405637
.text:00405637 loc_405637:                             ; CODE XREF: sub_405544+C7↑j
.text:00405637                 mov     [esp+28h+Format], ecx ; File
.text:0040563B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405642                 call    _flsbuf
.text:00405647                 jmp     short loc_405616
.text:00405647 ; ---------------------------------------------------------------------------
.text:00405649                 align 10h
.text:00405650
.text:00405650 loc_405650:                             ; CODE XREF: sub_405544+B3↑j
.text:00405650                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405653                 call    strerror
.text:00405658                 test    eax, eax
.text:0040565A                 jz      short loc_40567E
.text:0040565C
.text:0040565C loc_40565C:                             ; CODE XREF: sub_405544+13F↓j
.text:0040565C                 mov     [esp+28h+ArgList], eax
.text:00405660                 mov     edi, ds:_iob
.text:00405666                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040566E                 add     edi, 40h ; '@'
.text:00405671                 mov     [esp+28h+Stream], edi ; Stream
.text:00405674                 call    fprintf
.text:00405679                 jmp     loc_4055F9
.text:0040567E ; ---------------------------------------------------------------------------
.text:0040567E
.text:0040567E loc_40567E:                             ; CODE XREF: sub_405544+116↑j
.text:0040567E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405683                 jmp     short loc_40565C
.text:00405685 ; ---------------------------------------------------------------------------
.text:00405685
.text:00405685 loc_405685:                             ; CODE XREF: sub_405544+5D↑j
.text:00405685                 mov     [esp+28h+Format], (offset loc_40554B+1) ; Format
.text:0040568D                 mov     ecx, ds:_iob
.text:00405693                 mov     edx, ds:dword_4072E0
.text:00405699                 add     ecx, 40h ; '@'
.text:0040569C                 mov     [esp+28h+ArgList], edx
.text:004056A0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004056A3                 call    fprintf
.text:004056A8                 jmp     loc_4055A9
.text:004056A8 ; ---------------------------------------------------------------------------
.text:004056AD                 align 10h
.text:004056B0
.text:004056B0 loc_4056B0:                             ; CODE XREF: sub_405544+33↑j
.text:004056B0                 mov     eax, ds:Str1
.text:004056B5                 cmp     ebx, eax
.text:004056B7                 jz      loc_40562F
.text:004056BD                 mov     [esp+28h+Format], ebx ; Str2
.text:004056C1                 mov     [esp+28h+Stream], eax ; Str1
.text:004056C4                 call    strcmp
.text:004056C9                 test    eax, eax
.text:004056CB                 jz      loc_40562F
.text:004056D1                 jmp     loc_40557D
.text:004056D6 ; ---------------------------------------------------------------------------
.text:004056D6
.text:004056D6 loc_4056D6:                             ; CODE XREF: sub_405544+E5↑j
.text:004056D6                 mov     [esp+28h+Stream], ebp ; Code
.text:004056D9                 call    exit
.text:004056D9 sub_405544      endp ; sp-analysis failed
.text:004056D9
.text:004056D9 ; ---------------------------------------------------------------------------
.text:004056DE                 align 10h
.text:004056E0
.text:004056E0 ; =============== S U B R O U T I N E =======================================
.text:004056E0
.text:004056E0 ; Attributes: thunk
.text:004056E0
.text:004056E0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004056E0 mbrtowc         proc near               ; CODE XREF: sub_403DB0+757↑p
.text:004056E0                 jmp     ds:__imp_mbrtowc
.text:004056E0 mbrtowc         endp
.text:004056E0
.text:004056E0 ; ---------------------------------------------------------------------------
.text:004056E6                 align 10h
.text:004056F0
.text:004056F0 ; =============== S U B R O U T I N E =======================================
.text:004056F0
.text:004056F0 ; Attributes: bp-based frame
.text:004056F0
.text:004056F0 sub_4056F0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004056F0                 push    ebp
.text:004056F1                 mov     ecx, offset Str
.text:004056F6                 cmp     ecx, offset Str
.text:004056FC                 mov     ebp, esp
.text:004056FE                 jnb     short loc_405716
.text:00405700
.text:00405700 loc_405700:                             ; CODE XREF: sub_4056F0+24↓j
.text:00405700                 mov     edx, [ecx+4]
.text:00405703                 mov     eax, [ecx]
.text:00405705                 add     ecx, 8
.text:00405708                 add     [edx+400000h], eax
.text:0040570E                 cmp     ecx, offset Str
.text:00405714                 jb      short loc_405700
.text:00405716
.text:00405716 loc_405716:                             ; CODE XREF: sub_4056F0+E↑j
.text:00405716                 pop     ebp
.text:00405717                 retn
.text:00405717 sub_4056F0      endp
.text:00405717
.text:00405717 ; ---------------------------------------------------------------------------
.text:00405718                 align 10h
.text:00405720
.text:00405720 ; =============== S U B R O U T I N E =======================================
.text:00405720
.text:00405720 ; Attributes: bp-based frame
.text:00405720
.text:00405720 sub_405720      proc near               ; CODE XREF: sub_401080+16↑p
.text:00405720                                         ; TopLevelExceptionFilter+D7↑p
.text:00405720                 push    ebp
.text:00405721                 mov     ebp, esp
.text:00405723                 fninit
.text:00405725                 pop     ebp
.text:00405726                 retn
.text:00405726 sub_405720      endp
.text:00405726
.text:00405726 ; ---------------------------------------------------------------------------
.text:00405727                 align 10h
.text:00405730
.text:00405730 ; =============== S U B R O U T I N E =======================================
.text:00405730
.text:00405730 ; Attributes: bp-based frame
.text:00405730
.text:00405730 ; void __cdecl sub_405730()
.text:00405730 sub_405730      proc near               ; DATA XREF: .text:loc_405779↓o
.text:00405730                                         ; sub_4057C0:loc_4057EE↓o
.text:00405730                 push    ebp
.text:00405731                 mov     ebp, esp
.text:00405733                 sub     esp, 8
.text:00405736                 mov     eax, off_406094
.text:0040573B                 mov     edx, [eax]
.text:0040573D                 test    edx, edx
.text:0040573F                 jnz     short loc_405745
.text:00405741
.text:00405741 loc_405741:                             ; CODE XREF: sub_405730+2C↓j
.text:00405741                 mov     esp, ebp
.text:00405743                 pop     ebp
.text:00405744                 retn
.text:00405745 ; ---------------------------------------------------------------------------
.text:00405745
.text:00405745 loc_405745:                             ; CODE XREF: sub_405730+F↑j
.text:00405745                                         ; sub_405730+2A↓j
.text:00405745                 call    dword ptr [eax]
.text:00405747                 mov     edx, off_406094
.text:0040574D                 mov     ecx, [edx+4]
.text:00405750                 lea     eax, [edx+4]
.text:00405753                 mov     off_406094, eax
.text:00405758                 test    ecx, ecx
.text:0040575A                 jnz     short loc_405745
.text:0040575C                 jmp     short loc_405741
.text:0040575C sub_405730      endp
.text:0040575C
.text:0040575C ; ---------------------------------------------------------------------------
.text:0040575E                 align 10h
.text:00405760                 push    ebp
.text:00405761                 mov     ebp, esp
.text:00405763                 sub     esp, 8
.text:00405766                 mov     [ebp-4], ebx
.text:00405769                 mov     eax, ds:dword_405AE0
.text:0040576E                 cmp     eax, 0FFFFFFFFh
.text:00405771                 jz      short loc_40579C
.text:00405773
.text:00405773 loc_405773:                             ; CODE XREF: .text:004057A6↓j
.text:00405773                                         ; .text:004057B9↓j
.text:00405773                 test    eax, eax
.text:00405775                 mov     ebx, eax
.text:00405777                 jnz     short loc_405790
.text:00405779
.text:00405779 loc_405779:                             ; CODE XREF: .text:0040579A↓j
.text:00405779                 mov     dword ptr [esp], offset sub_405730
.text:00405780                 call    sub_401040
.text:00405785                 mov     ebx, [ebp-4]
.text:00405788                 mov     esp, ebp
.text:0040578A                 pop     ebp
.text:0040578B                 retn
.text:0040578B ; ---------------------------------------------------------------------------
.text:0040578C                 align 10h
.text:00405790
.text:00405790 loc_405790:                             ; CODE XREF: .text:00405777↑j
.text:00405790                                         ; .text:00405798↓j
.text:00405790                 call    ds:dword_405AE0[ebx*4]
.text:00405797                 dec     ebx
.text:00405798                 jnz     short loc_405790
.text:0040579A                 jmp     short loc_405779
.text:0040579C ; ---------------------------------------------------------------------------
.text:0040579C
.text:0040579C loc_40579C:                             ; CODE XREF: .text:00405771↑j
.text:0040579C                 mov     ecx, ds:dword_405AE4
.text:004057A2                 xor     eax, eax
.text:004057A4                 test    ecx, ecx
.text:004057A6                 jz      short loc_405773
.text:004057A8                 mov     edx, offset dword_405AE0
.text:004057AD                 lea     esi, [esi+0]
.text:004057B0
.text:004057B0 loc_4057B0:                             ; CODE XREF: .text:004057B7↓j
.text:004057B0                 inc     eax
.text:004057B1                 mov     ecx, [edx+eax*4+4]
.text:004057B5                 test    ecx, ecx
.text:004057B7                 jnz     short loc_4057B0
.text:004057B9                 jmp     short loc_405773
.text:004057B9 ; ---------------------------------------------------------------------------
.text:004057BB                 align 10h
.text:004057C0
.text:004057C0 ; =============== S U B R O U T I N E =======================================
.text:004057C0
.text:004057C0 ; Attributes: bp-based frame
.text:004057C0
.text:004057C0 sub_4057C0      proc near               ; CODE XREF: sub_4018E0+18↑p
.text:004057C0
.text:004057C0 var_8           = dword ptr -8
.text:004057C0 var_4           = dword ptr -4
.text:004057C0
.text:004057C0                 push    ebp
.text:004057C1                 mov     ebp, esp
.text:004057C3                 sub     esp, 8
.text:004057C6                 mov     [ebp+var_4], ebx
.text:004057C9                 mov     edx, dword_406090
.text:004057CF                 test    edx, edx
.text:004057D1                 jnz     short loc_4057FA
.text:004057D3                 mov     eax, ds:dword_405AE0
.text:004057D8                 mov     edx, 1
.text:004057DD                 mov     dword_406090, edx
.text:004057E3                 cmp     eax, 0FFFFFFFFh
.text:004057E6                 jz      short loc_40580D
.text:004057E8
.text:004057E8 loc_4057E8:                             ; CODE XREF: sub_4057C0+57↓j
.text:004057E8                                         ; sub_4057C0+69↓j
.text:004057E8                 test    eax, eax
.text:004057EA                 mov     ebx, eax
.text:004057EC                 jnz     short loc_405801
.text:004057EE
.text:004057EE loc_4057EE:                             ; CODE XREF: sub_4057C0+4B↓j
.text:004057EE                 mov     [esp+8+var_8], offset sub_405730 ; void (__cdecl *)()
.text:004057F5                 call    sub_401040
.text:004057FA
.text:004057FA loc_4057FA:                             ; CODE XREF: sub_4057C0+11↑j
.text:004057FA                 mov     ebx, [ebp+var_4]
.text:004057FD                 mov     esp, ebp
.text:004057FF                 pop     ebp
.text:00405800                 retn
.text:00405801 ; ---------------------------------------------------------------------------
.text:00405801
.text:00405801 loc_405801:                             ; CODE XREF: sub_4057C0+2C↑j
.text:00405801                                         ; sub_4057C0+49↓j
.text:00405801                 call    ds:dword_405AE0[ebx*4]
.text:00405808                 dec     ebx
.text:00405809                 jnz     short loc_405801
.text:0040580B                 jmp     short loc_4057EE
.text:0040580D ; ---------------------------------------------------------------------------
.text:0040580D
.text:0040580D loc_40580D:                             ; CODE XREF: sub_4057C0+26↑j
.text:0040580D                 mov     ecx, ds:dword_405AE4
.text:00405813                 xor     eax, eax
.text:00405815                 test    ecx, ecx
.text:00405817                 jz      short loc_4057E8
.text:00405819                 mov     edx, offset dword_405AE0
.text:0040581E                 mov     esi, esi
.text:00405820
.text:00405820 loc_405820:                             ; CODE XREF: sub_4057C0+67↓j
.text:00405820                 inc     eax
.text:00405821                 mov     ebx, [edx+eax*4+4]
.text:00405825                 test    ebx, ebx
.text:00405827                 jnz     short loc_405820
.text:00405829                 jmp     short loc_4057E8
.text:00405829 sub_4057C0      endp
.text:00405829
.text:00405829 ; ---------------------------------------------------------------------------
.text:0040582B                 align 10h
.text:00405830
.text:00405830 ; =============== S U B R O U T I N E =======================================
.text:00405830
.text:00405830 ; Attributes: info_from_lumina
.text:00405830
.text:00405830 ; void *__cdecl _alloca(size_t Size)
.text:00405830 __alloca        proc near               ; CODE XREF: sub_4018E0+13↑p
.text:00405830                 push    ecx
.text:00405831                 mov     ecx, esp
.text:00405833                 add     ecx, 8
.text:00405836
.text:00405836 loc_405836:                             ; CODE XREF: __alloca+1B↓j
.text:00405836                 cmp     eax, 1000h
.text:0040583B                 jb      short loc_40584D
.text:0040583D                 sub     ecx, 1000h
.text:00405843                 or      dword ptr [ecx], 0
.text:00405846                 sub     eax, 1000h
.text:0040584B                 jmp     short loc_405836
.text:0040584D ; ---------------------------------------------------------------------------
.text:0040584D
.text:0040584D loc_40584D:                             ; CODE XREF: __alloca+B↑j
.text:0040584D                 sub     ecx, eax
.text:0040584F                 or      dword ptr [ecx], 0
.text:00405852                 mov     eax, esp
.text:00405854                 mov     esp, ecx
.text:00405856                 mov     ecx, [eax]
.text:00405858                 mov     eax, [eax+4]
.text:0040585B                 jmp     eax
.text:0040585B __alloca        endp
.text:0040585B
.text:0040585B ; ---------------------------------------------------------------------------
.text:0040585D                 align 10h
.text:00405860                 jmp     ds:__set_app_type
.text:00405860 ; ---------------------------------------------------------------------------
.text:00405866                 align 10h
.text:00405870
.text:00405870 ; =============== S U B R O U T I N E =======================================
.text:00405870
.text:00405870 ; Attributes: thunk
.text:00405870
.text:00405870 ; void __cdecl cexit()
.text:00405870 _cexit          proc near
.text:00405870                 jmp     ds:__imp__cexit
.text:00405870 _cexit          endp
.text:00405870
.text:00405870 ; ---------------------------------------------------------------------------
.text:00405876                 align 10h
.text:00405880
.text:00405880 ; =============== S U B R O U T I N E =======================================
.text:00405880
.text:00405880 ; Attributes: thunk
.text:00405880
.text:00405880 ; char ***__cdecl _p__environ()
.text:00405880 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405880                 jmp     ds:__imp___p__environ
.text:00405880 __p__environ    endp
.text:00405880
.text:00405880 ; ---------------------------------------------------------------------------
.text:00405886                 align 10h
.text:00405890
.text:00405890 ; =============== S U B R O U T I N E =======================================
.text:00405890
.text:00405890 ; Attributes: thunk
.text:00405890
.text:00405890 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405890 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405890                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405890
.text:00405890 Signal          = dword ptr  4
.text:00405890 Function        = dword ptr  8
.text:00405890
.text:00405890                 jmp     ds:__imp_signal
.text:00405890 signal          endp
.text:00405890
.text:00405890 ; ---------------------------------------------------------------------------
.text:00405896                 align 10h
.text:004058A0
.text:004058A0 ; =============== S U B R O U T I N E =======================================
.text:004058A0
.text:004058A0 ; Attributes: thunk
.text:004058A0
.text:004058A0 ; int *__cdecl _p__fmode()
.text:004058A0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004058A0                 jmp     ds:__imp___p__fmode
.text:004058A0 __p__fmode      endp
.text:004058A0
.text:004058A0 ; ---------------------------------------------------------------------------
.text:004058A6                 align 10h
.text:004058B0
.text:004058B0 ; =============== S U B R O U T I N E =======================================
.text:004058B0
.text:004058B0 ; Attributes: thunk
.text:004058B0
.text:004058B0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004058B0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004058B0                                         ; sub_401080+90↑p ...
.text:004058B0
.text:004058B0 FileHandle      = dword ptr  4
.text:004058B0 Mode            = dword ptr  8
.text:004058B0
.text:004058B0                 jmp     ds:__imp__setmode
.text:004058B0 _setmode        endp
.text:004058B0
.text:004058B0 ; ---------------------------------------------------------------------------
.text:004058B6                 align 10h
.text:004058C0
.text:004058C0 ; =============== S U B R O U T I N E =======================================
.text:004058C0
.text:004058C0 ; Attributes: thunk
.text:004058C0
.text:004058C0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004058C0                 jmp     ds:__imp___getmainargs
.text:004058C0 __getmainargs   endp
.text:004058C0
.text:004058C0 ; ---------------------------------------------------------------------------
.text:004058C6                 align 10h
.text:004058D0
.text:004058D0 ; =============== S U B R O U T I N E =======================================
.text:004058D0
.text:004058D0 ; Attributes: thunk
.text:004058D0
.text:004058D0 ; struct lconv *__cdecl localeconv()
.text:004058D0 localeconv      proc near               ; CODE XREF: sub_4018E0+81↑p
.text:004058D0                 jmp     ds:__imp_localeconv
.text:004058D0 localeconv      endp
.text:004058D0
.text:004058D0 ; ---------------------------------------------------------------------------
.text:004058D6                 align 10h
.text:004058E0
.text:004058E0 ; =============== S U B R O U T I N E =======================================
.text:004058E0
.text:004058E0 ; Attributes: thunk
.text:004058E0
.text:004058E0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004058E0 setlocale       proc near               ; CODE XREF: sub_4018E0+34↑p
.text:004058E0                                         ; sub_403C00+16↑p ...
.text:004058E0
.text:004058E0 Category        = dword ptr  4
.text:004058E0 Locale          = dword ptr  8
.text:004058E0
.text:004058E0                 jmp     ds:__imp_setlocale
.text:004058E0 setlocale       endp
.text:004058E0
.text:004058E0 ; ---------------------------------------------------------------------------
.text:004058E6                 align 10h
.text:004058F0
.text:004058F0 ; =============== S U B R O U T I N E =======================================
.text:004058F0
.text:004058F0 ; Attributes: thunk
.text:004058F0
.text:004058F0 ; double __cdecl modf(double X, double *Y)
.text:004058F0 modf            proc near               ; CODE XREF: sub_402090+185↑p
.text:004058F0                                         ; sub_402090+24F↑p
.text:004058F0
.text:004058F0 X               = qword ptr  4
.text:004058F0 Y               = dword ptr  0Ch
.text:004058F0
.text:004058F0                 jmp     ds:__imp_modf
.text:004058F0 modf            endp
.text:004058F0
.text:004058F0 ; ---------------------------------------------------------------------------
.text:004058F6                 align 10h
.text:00405900
.text:00405900 ; =============== S U B R O U T I N E =======================================
.text:00405900
.text:00405900 ; Attributes: thunk
.text:00405900
.text:00405900 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00405900 sprintf         proc near               ; CODE XREF: sub_402090+58↑p
.text:00405900                                         ; sub_402090+EA↑p ...
.text:00405900
.text:00405900 Buffer          = dword ptr  4
.text:00405900 Format          = dword ptr  8
.text:00405900
.text:00405900                 jmp     ds:__imp_sprintf
.text:00405900 sprintf         endp
.text:00405900
.text:00405900 ; ---------------------------------------------------------------------------
.text:00405906                 align 10h
.text:00405910
.text:00405910 ; =============== S U B R O U T I N E =======================================
.text:00405910
.text:00405910 ; Attributes: thunk
.text:00405910
.text:00405910 ; double __cdecl floor(double X)
.text:00405910 floor           proc near               ; CODE XREF: sub_402090+2A↑p
.text:00405910                                         ; sub_402090+36F↑p
.text:00405910
.text:00405910 X               = qword ptr  4
.text:00405910
.text:00405910                 jmp     ds:__imp_floor
.text:00405910 floor           endp
.text:00405910
.text:00405910 ; ---------------------------------------------------------------------------
.text:00405916                 align 10h
.text:00405920
.text:00405920 ; =============== S U B R O U T I N E =======================================
.text:00405920
.text:00405920 ; Attributes: thunk
.text:00405920
.text:00405920 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00405920 strspn          proc near               ; CODE XREF: sub_401FB0+3C↑p
.text:00405920                                         ; sub_401FB0+91↑p ...
.text:00405920
.text:00405920 Str             = dword ptr  4
.text:00405920 Control         = dword ptr  8
.text:00405920
.text:00405920                 jmp     ds:__imp_strspn
.text:00405920 strspn          endp
.text:00405920
.text:00405920 ; ---------------------------------------------------------------------------
.text:00405926                 align 10h
.text:00405930
.text:00405930 ; =============== S U B R O U T I N E =======================================
.text:00405930
.text:00405930 ; Attributes: noreturn thunk
.text:00405930
.text:00405930 ; void __cdecl __noreturn exit(int Code)
.text:00405930 exit            proc near               ; CODE XREF: sub_4018E0:loc_401B48↑p
.text:00405930                                         ; .text:00401EBB↑p ...
.text:00405930
.text:00405930 Code            = dword ptr  4
.text:00405930
.text:00405930                 jmp     ds:__imp_exit
.text:00405930 exit            endp
.text:00405930
.text:00405930 ; ---------------------------------------------------------------------------
.text:00405936                 align 10h
.text:00405940
.text:00405940 ; =============== S U B R O U T I N E =======================================
.text:00405940
.text:00405940 ; Attributes: thunk
.text:00405940
.text:00405940 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405940 fputs           proc near               ; CODE XREF: sub_4018E0+249↑p
.text:00405940                                         ; sub_4018E0+283↑p ...
.text:00405940
.text:00405940 Buffer          = dword ptr  4
.text:00405940 Stream          = dword ptr  8
.text:00405940
.text:00405940                 jmp     ds:__imp_fputs
.text:00405940 fputs           endp
.text:00405940
.text:00405940 ; ---------------------------------------------------------------------------
.text:00405946                 align 10h
.text:00405950
.text:00405950 ; =============== S U B R O U T I N E =======================================
.text:00405950
.text:00405950 ; Attributes: thunk
.text:00405950
.text:00405950 ; int printf(const char *const Format, ...)
.text:00405950 printf          proc near               ; CODE XREF: sub_4018E0+215↑p
.text:00405950                                         ; sub_4018E0+470↑p ...
.text:00405950
.text:00405950 Format          = dword ptr  4
.text:00405950
.text:00405950                 jmp     ds:__imp_printf
.text:00405950 printf          endp
.text:00405950
.text:00405950 ; ---------------------------------------------------------------------------
.text:00405956                 align 10h
.text:00405960
.text:00405960 ; =============== S U B R O U T I N E =======================================
.text:00405960
.text:00405960 ; Attributes: thunk
.text:00405960
.text:00405960 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405960 fprintf         proc near               ; CODE XREF: sub_4018E0+2EF↑p
.text:00405960                                         ; .text:00401EB3↑p ...
.text:00405960
.text:00405960 Stream          = dword ptr  4
.text:00405960 Format          = dword ptr  8
.text:00405960
.text:00405960                 jmp     ds:__imp_fprintf
.text:00405960 fprintf         endp
.text:00405960
.text:00405960 ; ---------------------------------------------------------------------------
.text:00405966                 align 10h
.text:00405970
.text:00405970 ; =============== S U B R O U T I N E =======================================
.text:00405970
.text:00405970 ; Attributes: thunk
.text:00405970
.text:00405970 ; size_t __cdecl strlen(const char *Str)
.text:00405970 strlen          proc near               ; CODE XREF: sub_402670+2A9↑p
.text:00405970                                         ; sub_402670+346↑p ...
.text:00405970
.text:00405970 Str             = dword ptr  4
.text:00405970
.text:00405970                 jmp     ds:__imp_strlen
.text:00405970 strlen          endp
.text:00405970
.text:00405970 ; ---------------------------------------------------------------------------
.text:00405976                 align 10h
.text:00405980
.text:00405980 ; =============== S U B R O U T I N E =======================================
.text:00405980
.text:00405980 ; Attributes: thunk
.text:00405980
.text:00405980 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405980 strncmp         proc near               ; CODE XREF: sub_402670+23F↑p
.text:00405980                                         ; sub_402670+699↑p
.text:00405980
.text:00405980 Str1            = dword ptr  4
.text:00405980 Str2            = dword ptr  8
.text:00405980 MaxCount        = dword ptr  0Ch
.text:00405980
.text:00405980                 jmp     ds:__imp_strncmp
.text:00405980 strncmp         endp
.text:00405980
.text:00405980 ; ---------------------------------------------------------------------------
.text:00405986                 align 10h
.text:00405990
.text:00405990 ; =============== S U B R O U T I N E =======================================
.text:00405990
.text:00405990 ; Attributes: thunk
.text:00405990
.text:00405990 ; char *__cdecl getenv(const char *VarName)
.text:00405990 getenv          proc near               ; CODE XREF: sub_402670+B57↑p
.text:00405990
.text:00405990 VarName         = dword ptr  4
.text:00405990
.text:00405990                 jmp     ds:__imp_getenv
.text:00405990 getenv          endp
.text:00405990
.text:00405990 ; ---------------------------------------------------------------------------
.text:00405996                 align 10h
.text:004059A0
.text:004059A0 ; =============== S U B R O U T I N E =======================================
.text:004059A0
.text:004059A0 ; Attributes: thunk
.text:004059A0
.text:004059A0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004059A0 strchr          proc near               ; CODE XREF: sub_402670+469↑p
.text:004059A0                                         ; sub_402670+53A↑p ...
.text:004059A0
.text:004059A0 Str             = dword ptr  4
.text:004059A0 Val             = dword ptr  8
.text:004059A0
.text:004059A0                 jmp     ds:__imp_strchr
.text:004059A0 strchr          endp
.text:004059A0
.text:004059A0 ; ---------------------------------------------------------------------------
.text:004059A6                 align 10h
.text:004059B0
.text:004059B0 ; =============== S U B R O U T I N E =======================================
.text:004059B0
.text:004059B0 ; Attributes: thunk
.text:004059B0
.text:004059B0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004059B0 vfprintf        proc near               ; CODE XREF: sub_403790+C1↑p
.text:004059B0                                         ; sub_405440+49↑p ...
.text:004059B0
.text:004059B0 Stream          = dword ptr  4
.text:004059B0 Format          = dword ptr  8
.text:004059B0 ArgList         = dword ptr  0Ch
.text:004059B0
.text:004059B0                 jmp     ds:__imp_vfprintf
.text:004059B0 vfprintf        endp
.text:004059B0
.text:004059B0 ; ---------------------------------------------------------------------------
.text:004059B6                 align 10h
.text:004059C0
.text:004059C0 ; =============== S U B R O U T I N E =======================================
.text:004059C0
.text:004059C0 ; Attributes: noreturn thunk
.text:004059C0
.text:004059C0 ; void __cdecl __noreturn abort()
.text:004059C0 abort           proc near               ; CODE XREF: sub_403790:loc_40382C↑p
.text:004059C0                                         ; sub_404EF0:loc_4050AA↑p ...
.text:004059C0                 jmp     ds:__imp_abort
.text:004059C0 abort           endp
.text:004059C0
.text:004059C0 ; ---------------------------------------------------------------------------
.text:004059C6                 align 10h
.text:004059D0
.text:004059D0 ; =============== S U B R O U T I N E =======================================
.text:004059D0
.text:004059D0 ; Attributes: thunk
.text:004059D0
.text:004059D0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004059D0 _flsbuf         proc near               ; CODE XREF: sub_403790+128↑p
.text:004059D0                                         ; sub_403790+13A↑p ...
.text:004059D0
.text:004059D0 File            = dword ptr  8
.text:004059D0
.text:004059D0                 jmp     ds:__imp__flsbuf
.text:004059D0 _flsbuf         endp
.text:004059D0
.text:004059D0 ; ---------------------------------------------------------------------------
.text:004059D6                 align 10h
.text:004059E0
.text:004059E0 ; =============== S U B R O U T I N E =======================================
.text:004059E0
.text:004059E0 ; Attributes: thunk
.text:004059E0
.text:004059E0 ; int *__cdecl errno()
.text:004059E0 _errno          proc near               ; CODE XREF: sub_403B10:loc_403B4D↑p
.text:004059E0                                         ; sub_403C80+18↑p ...
.text:004059E0                 jmp     ds:__imp__errno
.text:004059E0 _errno          endp
.text:004059E0
.text:004059E0 ; ---------------------------------------------------------------------------
.text:004059E6                 align 10h
.text:004059F0
.text:004059F0 ; =============== S U B R O U T I N E =======================================
.text:004059F0
.text:004059F0 ; Attributes: thunk
.text:004059F0
.text:004059F0 ; int __cdecl fclose(FILE *Stream)
.text:004059F0 fclose          proc near               ; CODE XREF: sub_403B10+27↑p
.text:004059F0
.text:004059F0 Stream          = dword ptr  4
.text:004059F0
.text:004059F0                 jmp     ds:__imp_fclose
.text:004059F0 fclose          endp
.text:004059F0
.text:004059F0 ; ---------------------------------------------------------------------------
.text:004059F6                 align 10h
.text:00405A00
.text:00405A00 ; =============== S U B R O U T I N E =======================================
.text:00405A00
.text:00405A00 ; Attributes: thunk
.text:00405A00
.text:00405A00 ; void __cdecl free(void *Block)
.text:00405A00 free            proc near               ; CODE XREF: sub_403C00+6E↑p
.text:00405A00                                         ; sub_404EF0+112↑p
.text:00405A00
.text:00405A00 Block           = dword ptr  4
.text:00405A00
.text:00405A00                 jmp     ds:__imp_free
.text:00405A00 free            endp
.text:00405A00
.text:00405A00 ; ---------------------------------------------------------------------------
.text:00405A06                 align 10h
.text:00405A10
.text:00405A10 ; =============== S U B R O U T I N E =======================================
.text:00405A10
.text:00405A10 ; Attributes: thunk
.text:00405A10
.text:00405A10 ; double __cdecl strtod(const char *String, char **EndPtr)
.text:00405A10 strtod          proc near               ; CODE XREF: sub_403C00+4E↑p
.text:00405A10
.text:00405A10 String          = dword ptr  4
.text:00405A10 EndPtr          = dword ptr  8
.text:00405A10
.text:00405A10                 jmp     ds:__imp_strtod
.text:00405A10 strtod          endp
.text:00405A10
.text:00405A10 ; ---------------------------------------------------------------------------
.text:00405A16                 align 10h
.text:00405A20
.text:00405A20 ; =============== S U B R O U T I N E =======================================
.text:00405A20
.text:00405A20 ; Attributes: thunk
.text:00405A20
.text:00405A20 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405A20 iswctype        proc near               ; CODE XREF: sub_403DB0+78B↑p
.text:00405A20
.text:00405A20 C               = word ptr  4
.text:00405A20 Type            = word ptr  8
.text:00405A20
.text:00405A20                 jmp     ds:__imp_iswctype
.text:00405A20 iswctype        endp
.text:00405A20
.text:00405A20 ; ---------------------------------------------------------------------------
.text:00405A26                 align 10h
.text:00405A30
.text:00405A30 ; =============== S U B R O U T I N E =======================================
.text:00405A30
.text:00405A30 ; Attributes: thunk
.text:00405A30
.text:00405A30 ; int __cdecl isctype(int C, int Type)
.text:00405A30 _isctype        proc near               ; CODE XREF: sub_403DB0+610↑p
.text:00405A30
.text:00405A30 C               = dword ptr  4
.text:00405A30 Type            = dword ptr  8
.text:00405A30
.text:00405A30                 jmp     ds:__imp__isctype
.text:00405A30 _isctype        endp
.text:00405A30
.text:00405A30 ; ---------------------------------------------------------------------------
.text:00405A36                 align 10h
.text:00405A40
.text:00405A40 ; =============== S U B R O U T I N E =======================================
.text:00405A40
.text:00405A40 ; Attributes: thunk
.text:00405A40
.text:00405A40 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405A40 memcpy          proc near               ; CODE XREF: .text:004052A8↑p
.text:00405A40                                         ; sub_4052C0+31↑p
.text:00405A40
.text:00405A40 Src             = dword ptr  8
.text:00405A40 Size            = dword ptr  0Ch
.text:00405A40
.text:00405A40                 jmp     ds:__imp_memcpy
.text:00405A40 memcpy          endp
.text:00405A40
.text:00405A40 ; ---------------------------------------------------------------------------
.text:00405A46                 align 10h
.text:00405A50
.text:00405A50 ; =============== S U B R O U T I N E =======================================
.text:00405A50
.text:00405A50 ; Attributes: thunk
.text:00405A50
.text:00405A50 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405A50 memset          proc near               ; CODE XREF: .text:00405226↑p
.text:00405A50
.text:00405A50 Val             = dword ptr  8
.text:00405A50 Size            = dword ptr  0Ch
.text:00405A50
.text:00405A50                 jmp     ds:__imp_memset
.text:00405A50 memset          endp
.text:00405A50
.text:00405A50 ; ---------------------------------------------------------------------------
.text:00405A56                 align 10h
.text:00405A60
.text:00405A60 ; =============== S U B R O U T I N E =======================================
.text:00405A60
.text:00405A60 ; Attributes: thunk
.text:00405A60
.text:00405A60 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405A60 calloc          proc near               ; CODE XREF: .text:00405263↑p
.text:00405A60
.text:00405A60 Count           = dword ptr  4
.text:00405A60 Size            = dword ptr  8
.text:00405A60
.text:00405A60                 jmp     ds:__imp_calloc
.text:00405A60 calloc          endp
.text:00405A60
.text:00405A60 ; ---------------------------------------------------------------------------
.text:00405A66                 align 10h
.text:00405A70
.text:00405A70 ; =============== S U B R O U T I N E =======================================
.text:00405A70
.text:00405A70 ; Attributes: thunk
.text:00405A70
.text:00405A70 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405A70 realloc         proc near               ; CODE XREF: .text:00405160↑p
.text:00405A70                                         ; sub_405190+16↑p ...
.text:00405A70
.text:00405A70 Block           = dword ptr  4
.text:00405A70 Size            = dword ptr  8
.text:00405A70
.text:00405A70                 jmp     ds:__imp_realloc
.text:00405A70 realloc         endp
.text:00405A70
.text:00405A70 ; ---------------------------------------------------------------------------
.text:00405A76                 align 10h
.text:00405A80
.text:00405A80 ; =============== S U B R O U T I N E =======================================
.text:00405A80
.text:00405A80 ; Attributes: thunk
.text:00405A80
.text:00405A80 ; void *__cdecl malloc(size_t Size)
.text:00405A80 malloc          proc near               ; CODE XREF: sub_4050C0+24↑p
.text:00405A80                                         ; sub_405100+E↑p ...
.text:00405A80
.text:00405A80 Size            = dword ptr  4
.text:00405A80
.text:00405A80                 jmp     ds:__imp_malloc
.text:00405A80 malloc          endp
.text:00405A80
.text:00405A80 ; ---------------------------------------------------------------------------
.text:00405A86                 align 10h
.text:00405A90
.text:00405A90 ; =============== S U B R O U T I N E =======================================
.text:00405A90
.text:00405A90 ; Attributes: thunk
.text:00405A90
.text:00405A90 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405A90 strcmp          proc near               ; CODE XREF: sub_405544+180↑p
.text:00405A90
.text:00405A90 Str1            = dword ptr  4
.text:00405A90 Str2            = dword ptr  8
.text:00405A90
.text:00405A90                 jmp     ds:__imp_strcmp
.text:00405A90 strcmp          endp
.text:00405A90
.text:00405A90 ; ---------------------------------------------------------------------------
.text:00405A96                 align 10h
.text:00405AA0
.text:00405AA0 ; =============== S U B R O U T I N E =======================================
.text:00405AA0
.text:00405AA0 ; Attributes: thunk
.text:00405AA0
.text:00405AA0 ; int __cdecl fflush(FILE *Stream)
.text:00405AA0 fflush          proc near               ; CODE XREF: sub_405440+19↑p
.text:00405AA0                                         ; sub_405440+81↑p ...
.text:00405AA0
.text:00405AA0 Stream          = dword ptr  4
.text:00405AA0
.text:00405AA0                 jmp     ds:__imp_fflush
.text:00405AA0 fflush          endp
.text:00405AA0
.text:00405AA0 ; ---------------------------------------------------------------------------
.text:00405AA6                 align 10h
.text:00405AB0
.text:00405AB0 ; =============== S U B R O U T I N E =======================================
.text:00405AB0
.text:00405AB0 ; Attributes: thunk
.text:00405AB0
.text:00405AB0 ; char *__cdecl strerror(int ErrorMessage)
.text:00405AB0 strerror        proc near               ; CODE XREF: sub_405440+A5↑p
.text:00405AB0                                         ; sub_405544+10F↑p
.text:00405AB0
.text:00405AB0 ErrorMessage    = dword ptr  4
.text:00405AB0
.text:00405AB0                 jmp     ds:__imp_strerror
.text:00405AB0 strerror        endp
.text:00405AB0
.text:00405AB0 ; ---------------------------------------------------------------------------
.text:00405AB6                 align 10h
.text:00405AC0
.text:00405AC0 ; =============== S U B R O U T I N E =======================================
.text:00405AC0
.text:00405AC0 ; Attributes: thunk
.text:00405AC0
.text:00405AC0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405AC0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405AC0
.text:00405AC0 lpTopLevelExceptionFilter= dword ptr  4
.text:00405AC0
.text:00405AC0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405AC0 SetUnhandledExceptionFilter endp
.text:00405AC0
.text:00405AC0 ; ---------------------------------------------------------------------------
.text:00405AC6                 align 10h
.text:00405AD0
.text:00405AD0 ; =============== S U B R O U T I N E =======================================
.text:00405AD0
.text:00405AD0 ; Attributes: noreturn thunk
.text:00405AD0
.text:00405AD0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405AD0 ExitProcess     proc near
.text:00405AD0
.text:00405AD0 uExitCode       = dword ptr  4
.text:00405AD0
.text:00405AD0                 jmp     ds:__imp_ExitProcess
.text:00405AD0 ExitProcess     endp
.text:00405AD0
.text:00405AD0 ; ---------------------------------------------------------------------------
.text:00405AD6                 align 10h
.text:00405AE0 dword_405AE0    dd 0FFFFFFFFh           ; DATA XREF: .text:00405769↑r
.text:00405AE0                                         ; .text:loc_405790↑r ...
.text:00405AE4 dword_405AE4    dd 0                    ; DATA XREF: .text:loc_40579C↑r
.text:00405AE4                                         ; sub_4057C0:loc_40580D↑r
.text:00405AE8                 dd 0FFFFFFFFh
.text:00405AEC dword_405AEC    dd 45h dup(0)           ; DATA XREF: .data:off_406094↓o
.text:00405C00                 dd 100h dup(?)
.text:00405C00 _text           ends
.text:00405C00
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000B0 (    176.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00005000
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 ; char *dword_406000
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 ; char dword_406004[]
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 ; char *off_406010
.data:00406010 off_406010      dd offset byte_401280   ; DATA XREF: sub_4018E0+273↑r
.data:00406014                 align 8
.data:00406018 dbl_406018      dq 1.0                  ; DATA XREF: sub_4018E0+1D3↑r
.data:00406018                                         ; sub_4018E0+370↑w ...
.data:00406020 dword_406020    dd 1                    ; DATA XREF: sub_4018E0:loc_401984↑r
.data:00406020                                         ; sub_4018E0:loc_401A07↑r ...
.data:00406024 dword_406024    dd 1                    ; DATA XREF: sub_403200+11↑r
.data:00406024                                         ; .text:004032A1↑r
.data:00406028 dword_406028    dd 3Fh                  ; DATA XREF: sub_403200+7D↑w
.data:00406028                                         ; .text:0040330D↑w
.data:0040602C                 align 10h
.data:00406030 ; char *off_406030
.data:00406030 off_406030      dd offset aCopyrightC2005
.data:00406030                                         ; DATA XREF: sub_403790+DC↑r
.data:00406030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406034                 align 10h
.data:00406040 dword_406040    dd 1                    ; DATA XREF: sub_404EF0+22↑r
.data:00406040                                         ; sub_404EF0+65↑r ...
.data:00406044 dword_406044    dd 100h                 ; DATA XREF: sub_404EF0+3F↑o
.data:00406044                                         ; sub_404EF0+1A2↑r ...
.data:00406048 off_406048      dd offset unk_407190    ; DATA XREF: sub_404EF0+1AA↑r
.data:0040604C ; void *off_40604C
.data:0040604C off_40604C      dd offset dword_406044  ; DATA XREF: sub_404EF0+39↑r
.data:0040604C                                         ; sub_404EF0+60↑w ...
.data:00406050 ; int Code
.data:00406050 Code            dd 1                    ; DATA XREF: sub_403B10+6D↑r
.data:00406050                                         ; sub_403B10+9A↑r ...
.data:00406054                 align 10h
.data:00406060 dword_406060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406064                 align 10h
.data:00406070 ; int Mode
.data:00406070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406070                                         ; sub_401080+80↑r ...
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406080                                         ; sub_401080+BA↑r
.data:00406084                 align 10h
.data:00406090 dword_406090    dd 0                    ; DATA XREF: sub_4057C0+9↑r
.data:00406090                                         ; sub_4057C0+1D↑w
.data:00406094 off_406094      dd offset dword_405AEC  ; DATA XREF: sub_405730+6↑r
.data:00406094                                         ; sub_405730+17↑r ...
.data:00406098                 align 1000h
.data:00406098 _data           ends
.data:00406098
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000380 (    896.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 ; char Str
.bss:00407000 Str             db ?                    ; DATA XREF: sub_402090+51↑o
.bss:00407000                                         ; sub_402090+65↑o ...
.bss:00407001 byte_407001     db ?                    ; DATA XREF: sub_402090+213↑r
.bss:00407001                                         ; sub_402090+2CD↑r
.bss:00407002 ; char byte_407002
.bss:00407002 byte_407002     db ?                    ; DATA XREF: sub_402090+223↑o
.bss:00407002                                         ; sub_402090+22F↑r ...
.bss:00407003                 align 100h
.bss:00407100 byte_407100     db ?                    ; DATA XREF: sub_4018E0+67↑w
.bss:00407100                                         ; sub_4018E0+120↑w ...
.bss:00407101                 align 10h
.bss:00407110 ; char *Buffer
.bss:00407110 Buffer          dd ?                    ; DATA XREF: sub_4018E0+75↑w
.bss:00407110                                         ; sub_4018E0+239↑r ...
.bss:00407114                 align 10h
.bss:00407120 byte_407120     db ?                    ; DATA XREF: sub_4018E0+8D↑w
.bss:00407120                                         ; sub_4018E0:loc_40197D↑w ...
.bss:00407121                 align 10h
.bss:00407130 dbl_407130      dq ?                    ; DATA XREF: sub_4018E0+7B↑w
.bss:00407130                                         ; sub_4018E0+1E7↑r ...
.bss:00407138                 align 10h
.bss:00407140 dbl_407140      dq ?                    ; DATA XREF: sub_4018E0+1A0↑w
.bss:00407140                                         ; sub_4018E0+1F3↑r ...
.bss:00407148                 align 10h
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: sub_403200+9↑o
.bss:00407150                                         ; sub_403200+17↑w ...
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: sub_403200+21↑w
.bss:00407154                                         ; .text:004032B9↑w
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: sub_403200+77↑r
.bss:00407158                                         ; .text:00403307↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: sub_403200+6B↑r
.bss:0040715C                                         ; .text:004032FB↑r
.bss:00407160                 align 40h
.bss:00407180 ; char *dword_407180
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: .text:00403AE4↑w
.bss:00407180                                         ; sub_403B10+58↑r
.bss:00407184                 align 10h
.bss:00407190 unk_407190      db    ? ;               ; DATA XREF: sub_404EF0+100↑o
.bss:00407190                                         ; .data:off_406048↑o
.bss:00407191                 db    ? ;
.bss:00407192                 db    ? ;
.bss:00407193                 db    ? ;
.bss:00407194                 db    ? ;
.bss:00407195                 db    ? ;
.bss:00407196                 db    ? ;
.bss:00407197                 db    ? ;
.bss:00407198                 db    ? ;
.bss:00407199                 db    ? ;
.bss:0040719A                 db    ? ;
.bss:0040719B                 db    ? ;
.bss:0040719C                 db    ? ;
.bss:0040719D                 db    ? ;
.bss:0040719E                 db    ? ;
.bss:0040719F                 db    ? ;
.bss:004071A0                 db    ? ;
.bss:004071A1                 db    ? ;
.bss:004071A2                 db    ? ;
.bss:004071A3                 db    ? ;
.bss:004071A4                 db    ? ;
.bss:004071A5                 db    ? ;
.bss:004071A6                 db    ? ;
.bss:004071A7                 db    ? ;
.bss:004071A8                 db    ? ;
.bss:004071A9                 db    ? ;
.bss:004071AA                 db    ? ;
.bss:004071AB                 db    ? ;
.bss:004071AC                 db    ? ;
.bss:004071AD                 db    ? ;
.bss:004071AE                 db    ? ;
.bss:004071AF                 db    ? ;
.bss:004071B0                 db    ? ;
.bss:004071B1                 db    ? ;
.bss:004071B2                 db    ? ;
.bss:004071B3                 db    ? ;
.bss:004071B4                 db    ? ;
.bss:004071B5                 db    ? ;
.bss:004071B6                 db    ? ;
.bss:004071B7                 db    ? ;
.bss:004071B8                 db    ? ;
.bss:004071B9                 db    ? ;
.bss:004071BA                 db    ? ;
.bss:004071BB                 db    ? ;
.bss:004071BC                 db    ? ;
.bss:004071BD                 db    ? ;
.bss:004071BE                 db    ? ;
.bss:004071BF                 db    ? ;
.bss:004071C0                 db    ? ;
.bss:004071C1                 db    ? ;
.bss:004071C2                 db    ? ;
.bss:004071C3                 db    ? ;
.bss:004071C4                 db    ? ;
.bss:004071C5                 db    ? ;
.bss:004071C6                 db    ? ;
.bss:004071C7                 db    ? ;
.bss:004071C8                 db    ? ;
.bss:004071C9                 db    ? ;
.bss:004071CA                 db    ? ;
.bss:004071CB                 db    ? ;
.bss:004071CC                 db    ? ;
.bss:004071CD                 db    ? ;
.bss:004071CE                 db    ? ;
.bss:004071CF                 db    ? ;
.bss:004071D0                 db    ? ;
.bss:004071D1                 db    ? ;
.bss:004071D2                 db    ? ;
.bss:004071D3                 db    ? ;
.bss:004071D4                 db    ? ;
.bss:004071D5                 db    ? ;
.bss:004071D6                 db    ? ;
.bss:004071D7                 db    ? ;
.bss:004071D8                 db    ? ;
.bss:004071D9                 db    ? ;
.bss:004071DA                 db    ? ;
.bss:004071DB                 db    ? ;
.bss:004071DC                 db    ? ;
.bss:004071DD                 db    ? ;
.bss:004071DE                 db    ? ;
.bss:004071DF                 db    ? ;
.bss:004071E0                 db    ? ;
.bss:004071E1                 db    ? ;
.bss:004071E2                 db    ? ;
.bss:004071E3                 db    ? ;
.bss:004071E4                 db    ? ;
.bss:004071E5                 db    ? ;
.bss:004071E6                 db    ? ;
.bss:004071E7                 db    ? ;
.bss:004071E8                 db    ? ;
.bss:004071E9                 db    ? ;
.bss:004071EA                 db    ? ;
.bss:004071EB                 db    ? ;
.bss:004071EC                 db    ? ;
.bss:004071ED                 db    ? ;
.bss:004071EE                 db    ? ;
.bss:004071EF                 db    ? ;
.bss:004071F0                 db    ? ;
.bss:004071F1                 db    ? ;
.bss:004071F2                 db    ? ;
.bss:004071F3                 db    ? ;
.bss:004071F4                 db    ? ;
.bss:004071F5                 db    ? ;
.bss:004071F6                 db    ? ;
.bss:004071F7                 db    ? ;
.bss:004071F8                 db    ? ;
.bss:004071F9                 db    ? ;
.bss:004071FA                 db    ? ;
.bss:004071FB                 db    ? ;
.bss:004071FC                 db    ? ;
.bss:004071FD                 db    ? ;
.bss:004071FE                 db    ? ;
.bss:004071FF                 db    ? ;
.bss:00407200                 db    ? ;
.bss:00407201                 db    ? ;
.bss:00407202                 db    ? ;
.bss:00407203                 db    ? ;
.bss:00407204                 db    ? ;
.bss:00407205                 db    ? ;
.bss:00407206                 db    ? ;
.bss:00407207                 db    ? ;
.bss:00407208                 db    ? ;
.bss:00407209                 db    ? ;
.bss:0040720A                 db    ? ;
.bss:0040720B                 db    ? ;
.bss:0040720C                 db    ? ;
.bss:0040720D                 db    ? ;
.bss:0040720E                 db    ? ;
.bss:0040720F                 db    ? ;
.bss:00407210                 db    ? ;
.bss:00407211                 db    ? ;
.bss:00407212                 db    ? ;
.bss:00407213                 db    ? ;
.bss:00407214                 db    ? ;
.bss:00407215                 db    ? ;
.bss:00407216                 db    ? ;
.bss:00407217                 db    ? ;
.bss:00407218                 db    ? ;
.bss:00407219                 db    ? ;
.bss:0040721A                 db    ? ;
.bss:0040721B                 db    ? ;
.bss:0040721C                 db    ? ;
.bss:0040721D                 db    ? ;
.bss:0040721E                 db    ? ;
.bss:0040721F                 db    ? ;
.bss:00407220                 db    ? ;
.bss:00407221                 db    ? ;
.bss:00407222                 db    ? ;
.bss:00407223                 db    ? ;
.bss:00407224                 db    ? ;
.bss:00407225                 db    ? ;
.bss:00407226                 db    ? ;
.bss:00407227                 db    ? ;
.bss:00407228                 db    ? ;
.bss:00407229                 db    ? ;
.bss:0040722A                 db    ? ;
.bss:0040722B                 db    ? ;
.bss:0040722C                 db    ? ;
.bss:0040722D                 db    ? ;
.bss:0040722E                 db    ? ;
.bss:0040722F                 db    ? ;
.bss:00407230                 db    ? ;
.bss:00407231                 db    ? ;
.bss:00407232                 db    ? ;
.bss:00407233                 db    ? ;
.bss:00407234                 db    ? ;
.bss:00407235                 db    ? ;
.bss:00407236                 db    ? ;
.bss:00407237                 db    ? ;
.bss:00407238                 db    ? ;
.bss:00407239                 db    ? ;
.bss:0040723A                 db    ? ;
.bss:0040723B                 db    ? ;
.bss:0040723C                 db    ? ;
.bss:0040723D                 db    ? ;
.bss:0040723E                 db    ? ;
.bss:0040723F                 db    ? ;
.bss:00407240                 db    ? ;
.bss:00407241                 db    ? ;
.bss:00407242                 db    ? ;
.bss:00407243                 db    ? ;
.bss:00407244                 db    ? ;
.bss:00407245                 db    ? ;
.bss:00407246                 db    ? ;
.bss:00407247                 db    ? ;
.bss:00407248                 db    ? ;
.bss:00407249                 db    ? ;
.bss:0040724A                 db    ? ;
.bss:0040724B                 db    ? ;
.bss:0040724C                 db    ? ;
.bss:0040724D                 db    ? ;
.bss:0040724E                 db    ? ;
.bss:0040724F                 db    ? ;
.bss:00407250                 db    ? ;
.bss:00407251                 db    ? ;
.bss:00407252                 db    ? ;
.bss:00407253                 db    ? ;
.bss:00407254                 db    ? ;
.bss:00407255                 db    ? ;
.bss:00407256                 db    ? ;
.bss:00407257                 db    ? ;
.bss:00407258                 db    ? ;
.bss:00407259                 db    ? ;
.bss:0040725A                 db    ? ;
.bss:0040725B                 db    ? ;
.bss:0040725C                 db    ? ;
.bss:0040725D                 db    ? ;
.bss:0040725E                 db    ? ;
.bss:0040725F                 db    ? ;
.bss:00407260                 db    ? ;
.bss:00407261                 db    ? ;
.bss:00407262                 db    ? ;
.bss:00407263                 db    ? ;
.bss:00407264                 db    ? ;
.bss:00407265                 db    ? ;
.bss:00407266                 db    ? ;
.bss:00407267                 db    ? ;
.bss:00407268                 db    ? ;
.bss:00407269                 db    ? ;
.bss:0040726A                 db    ? ;
.bss:0040726B                 db    ? ;
.bss:0040726C                 db    ? ;
.bss:0040726D                 db    ? ;
.bss:0040726E                 db    ? ;
.bss:0040726F                 db    ? ;
.bss:00407270                 db    ? ;
.bss:00407271                 db    ? ;
.bss:00407272                 db    ? ;
.bss:00407273                 db    ? ;
.bss:00407274                 db    ? ;
.bss:00407275                 db    ? ;
.bss:00407276                 db    ? ;
.bss:00407277                 db    ? ;
.bss:00407278                 db    ? ;
.bss:00407279                 db    ? ;
.bss:0040727A                 db    ? ;
.bss:0040727B                 db    ? ;
.bss:0040727C                 db    ? ;
.bss:0040727D                 db    ? ;
.bss:0040727E                 db    ? ;
.bss:0040727F                 db    ? ;
.bss:00407280                 db    ? ;
.bss:00407281                 db    ? ;
.bss:00407282                 db    ? ;
.bss:00407283                 db    ? ;
.bss:00407284                 db    ? ;
.bss:00407285                 db    ? ;
.bss:00407286                 db    ? ;
.bss:00407287                 db    ? ;
.bss:00407288                 db    ? ;
.bss:00407289                 db    ? ;
.bss:0040728A                 db    ? ;
.bss:0040728B                 db    ? ;
.bss:0040728C                 db    ? ;
.bss:0040728D                 db    ? ;
.bss:0040728E                 db    ? ;
.bss:0040728F                 db    ? ;
.bss:00407290 dword_407290    dd ?                    ; DATA XREF: .text:loc_404881↑o
.bss:00407290                                         ; .text:loc_4048A0↑o ...
.bss:00407294 dword_407294    dd ?                    ; DATA XREF: .text:loc_404920↑o
.bss:00407294                                         ; .text:00404DA8↑r ...
.bss:00407298 dword_407298    dd ?                    ; DATA XREF: .text:00404DA2↑r
.bss:00407298                                         ; sub_404E50+2C↑r
.bss:0040729C dword_40729C    dd ?                    ; DATA XREF: .text:00404D96↑r
.bss:0040729C                                         ; sub_404E50+22↑r
.bss:004072A0 dword_4072A0    dd ?                    ; DATA XREF: .text:00404DB2↑r
.bss:004072A0                                         ; sub_404E50+36↑r
.bss:004072A4 dword_4072A4    dd ?                    ; DATA XREF: .text:00404DC2↑r
.bss:004072A4                                         ; sub_404E50+4E↑r
.bss:004072A8 dword_4072A8    dd ?                    ; DATA XREF: .text:00404DDF↑r
.bss:004072A8                                         ; sub_404E50+62↑r
.bss:004072AC dword_4072AC    dd ?                    ; DATA XREF: .text:00404DD5↑r
.bss:004072AC                                         ; sub_404E50+70↑r
.bss:004072B0 dword_4072B0    dd ?                    ; DATA XREF: .text:00404DB8↑r
.bss:004072B0                                         ; sub_404E50+7A↑r
.bss:004072B4                 align 10h
.bss:004072C0 ; char *Str1
.bss:004072C0 Str1            dd ?                    ; DATA XREF: sub_405544:loc_40557D↑w
.bss:004072C0                                         ; sub_405544:loc_4056B0↑r
.bss:004072C4                 align 10h
.bss:004072D0 dword_4072D0    dd ?                    ; DATA XREF: sub_405544+2D↑r
.bss:004072D0                                         ; sub_405544+3F↑w
.bss:004072D4                 align 10h
.bss:004072E0 dword_4072E0    dd ?                    ; DATA XREF: sub_4018E0+2E↑w
.bss:004072E0                                         ; sub_4018E0+2DB↑r ...
.bss:004072E4                 align 20h
.bss:00407300 dword_407300    dd ?                    ; DATA XREF: sub_4018E0:loc_401D07↑r
.bss:00407300                                         ; sub_4018E0:loc_401E40↑r ...
.bss:00407304                 align 10h
.bss:00407310 dword_407310    dd ?                    ; CODE XREF: sub_405544+63↑p
.bss:00407310                                         ; DATA XREF: sub_405440+1E↑r ...
.bss:00407314                 align 10h
.bss:00407320 dword_407320    dd ?                    ; DATA XREF: sub_405440+4E↑w
.bss:00407320                                         ; sub_405544+AB↑w
.bss:00407324                 db    ? ;
.bss:00407325                 db    ? ;
.bss:00407326                 db    ? ;
.bss:00407327                 db    ? ;
.bss:00407328                 db    ? ;
.bss:00407329                 db    ? ;
.bss:0040732A                 db    ? ;
.bss:0040732B                 db    ? ;
.bss:0040732C                 db    ? ;
.bss:0040732D                 db    ? ;
.bss:0040732E                 db    ? ;
.bss:0040732F                 db    ? ;
.bss:00407330                 db    ? ;
.bss:00407331                 db    ? ;
.bss:00407332                 db    ? ;
.bss:00407333                 db    ? ;
.bss:00407334                 db    ? ;
.bss:00407335                 db    ? ;
.bss:00407336                 db    ? ;
.bss:00407337                 db    ? ;
.bss:00407338                 db    ? ;
.bss:00407339                 db    ? ;
.bss:0040733A                 db    ? ;
.bss:0040733B                 db    ? ;
.bss:0040733C                 db    ? ;
.bss:0040733D                 db    ? ;
.bss:0040733E                 db    ? ;
.bss:0040733F                 db    ? ;
.bss:00407340                 db    ? ;
.bss:00407341                 db    ? ;
.bss:00407342                 db    ? ;
.bss:00407343                 db    ? ;
.bss:00407344                 db    ? ;
.bss:00407345                 db    ? ;
.bss:00407346                 db    ? ;
.bss:00407347                 db    ? ;
.bss:00407348                 db    ? ;
.bss:00407349                 db    ? ;
.bss:0040734A                 db    ? ;
.bss:0040734B                 db    ? ;
.bss:0040734C                 db    ? ;
.bss:0040734D                 db    ? ;
.bss:0040734E                 db    ? ;
.bss:0040734F                 db    ? ;
.bss:00407350 dword_407350    dd ?                    ; DATA XREF: sub_405544+13↑r
.bss:00407354                 align 1000h
.bss:00407354 _bss            ends
.bss:00407354
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 000005B0 (   1456.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00005200
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:0040814C ;
.idata:0040814C ; Imports from libintl3.dll
.idata:0040814C ;
.idata:0040814C                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040814C                                         ; CODE XREF: sub_4018E0+48↑p
.idata:0040814C                                         ; DATA XREF: sub_4018E0+48↑r ...
.idata:00408150                 extrn libintl_gettext:dword
.idata:00408150                                         ; CODE XREF: sub_4018E0:loc_401B8A↑p
.idata:00408150                                         ; sub_4018E0+2CF↑p ...
.idata:00408154                 extrn libintl_textdomain:dword
.idata:00408154                                         ; CODE XREF: sub_4018E0+55↑p
.idata:00408154                                         ; DATA XREF: sub_4018E0+55↑r ...
.idata:00408158
.idata:00408160 ;
.idata:00408160 ; Imports from KERNEL32.dll
.idata:00408160 ;
.idata:00408160 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408160                 extrn __imp_ExitProcess:dword
.idata:00408160                                         ; DATA XREF: ExitProcess↑r
.idata:00408164 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00408164                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00408164                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408168
.idata:00408170 ;
.idata:00408170 ; Imports from MSVCP60.DLL
.idata:00408170 ;
.idata:00408170 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00408170                 extrn __imp_mbrtowc:dword
.idata:00408170                                         ; DATA XREF: mbrtowc↑r
.idata:00408174
.idata:0040817C ;
.idata:0040817C ; Imports from msvcrt.dll
.idata:0040817C ;
.idata:0040817C                 extrn __imp___getmainargs:dword
.idata:0040817C                                         ; DATA XREF: __getmainargs↑r
.idata:00408180 ; int _mb_cur_max
.idata:00408180                 extrn __mb_cur_max:dword
.idata:00408180                                         ; DATA XREF: sub_403DB0+7↑r
.idata:00408180                                         ; sub_403DB0+5F3↑r
.idata:00408184 ; char ***(__cdecl *__p__environ)()
.idata:00408184                 extrn __imp___p__environ:dword
.idata:00408184                                         ; DATA XREF: __p__environ↑r
.idata:00408188 ; int *(__cdecl *__p__fmode)()
.idata:00408188                 extrn __imp___p__fmode:dword
.idata:00408188                                         ; DATA XREF: __p__fmode↑r
.idata:0040818C ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040818C                 extrn __set_app_type:dword
.idata:0040818C                                         ; CODE XREF: start+D↑p
.idata:0040818C                                         ; .text:0040102D↑p
.idata:0040818C                                         ; DATA XREF: ...
.idata:00408190 ; void (__cdecl *_cexit)()
.idata:00408190                 extrn __imp__cexit:dword
.idata:00408190                                         ; DATA XREF: _cexit↑r
.idata:00408194 ; int *(__cdecl *_errno)()
.idata:00408194                 extrn __imp__errno:dword
.idata:00408194                                         ; DATA XREF: _errno↑r
.idata:00408198 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00408198                 extrn __imp__flsbuf:dword
.idata:00408198                                         ; DATA XREF: _flsbuf↑r
.idata:0040819C ; FILE iob[]
.idata:0040819C                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040819C                                         ; sub_401080+75↑r ...
.idata:004081A0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081A0                 extrn __imp__isctype:dword
.idata:004081A0                                         ; DATA XREF: _isctype↑r
.idata:004081A4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081A4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081A4                                         ; DATA XREF: .text:0040106C↑r
.idata:004081A8 ; const unsigned __int16 *pctype
.idata:004081A8                 extrn _pctype:dword     ; DATA XREF: sub_403DB0:loc_4044A4↑r
.idata:004081AC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081AC                 extrn __imp__setmode:dword
.idata:004081AC                                         ; DATA XREF: _setmode↑r
.idata:004081B0 ; void (__cdecl __noreturn *abort)()
.idata:004081B0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081B4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081B4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081B4                                         ; DATA XREF: sub_401040+C↑r
.idata:004081B8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081B8                 extrn __imp_calloc:dword
.idata:004081B8                                         ; DATA XREF: calloc↑r
.idata:004081BC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081BC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081C0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081C0                 extrn __imp_fclose:dword
.idata:004081C0                                         ; DATA XREF: fclose↑r
.idata:004081C4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081C4                 extrn __imp_fflush:dword
.idata:004081C4                                         ; DATA XREF: fflush↑r
.idata:004081C8 ; double (__cdecl *floor)(double X)
.idata:004081C8                 extrn __imp_floor:dword ; DATA XREF: floor↑r
.idata:004081CC ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081CC                 extrn __imp_fprintf:dword
.idata:004081CC                                         ; DATA XREF: fprintf↑r
.idata:004081D0 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081D0                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081D4 ; void (__cdecl *free)(void *Block)
.idata:004081D4                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081D8 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081D8                 extrn __imp_getenv:dword
.idata:004081D8                                         ; DATA XREF: getenv↑r
.idata:004081DC ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081DC                 extrn __imp_iswctype:dword
.idata:004081DC                                         ; DATA XREF: iswctype↑r
.idata:004081E0 ; struct lconv *(__cdecl *localeconv)()
.idata:004081E0                 extrn __imp_localeconv:dword
.idata:004081E0                                         ; DATA XREF: localeconv↑r
.idata:004081E4 ; void *(__cdecl *malloc)(size_t Size)
.idata:004081E4                 extrn __imp_malloc:dword
.idata:004081E4                                         ; DATA XREF: malloc↑r
.idata:004081E8 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004081E8                 extrn __imp_memcpy:dword
.idata:004081E8                                         ; DATA XREF: memcpy↑r
.idata:004081EC ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004081EC                 extrn __imp_memset:dword
.idata:004081EC                                         ; DATA XREF: memset↑r
.idata:004081F0 ; double (__cdecl *modf)(double X, double *Y)
.idata:004081F0                 extrn __imp_modf:dword  ; DATA XREF: modf↑r
.idata:004081F4 ; int (*printf)(const char *const Format, ...)
.idata:004081F4                 extrn __imp_printf:dword
.idata:004081F4                                         ; DATA XREF: printf↑r
.idata:004081F8 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004081F8                 extrn __imp_realloc:dword
.idata:004081F8                                         ; DATA XREF: realloc↑r
.idata:004081FC ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004081FC                 extrn __imp_setlocale:dword
.idata:004081FC                                         ; DATA XREF: setlocale↑r
.idata:00408200 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408200                 extrn __imp_signal:dword
.idata:00408200                                         ; DATA XREF: signal↑r
.idata:00408204 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00408204                 extrn __imp_sprintf:dword
.idata:00408204                                         ; DATA XREF: sprintf↑r
.idata:00408208 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00408208                 extrn __imp_strchr:dword
.idata:00408208                                         ; DATA XREF: strchr↑r
.idata:0040820C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040820C                 extrn __imp_strcmp:dword
.idata:0040820C                                         ; DATA XREF: strcmp↑r
.idata:00408210 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408210                 extrn __imp_strerror:dword
.idata:00408210                                         ; DATA XREF: strerror↑r
.idata:00408214 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408214                 extrn __imp_strlen:dword
.idata:00408214                                         ; DATA XREF: strlen↑r
.idata:00408218 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408218                 extrn __imp_strncmp:dword
.idata:00408218                                         ; DATA XREF: strncmp↑r
.idata:0040821C ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:0040821C                 extrn __imp_strspn:dword
.idata:0040821C                                         ; DATA XREF: strspn↑r
.idata:00408220 ; double (__cdecl *strtod)(const char *String, char **EndPtr)
.idata:00408220                 extrn __imp_strtod:dword
.idata:00408220                                         ; DATA XREF: strtod↑r
.idata:00408224 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408224                 extrn __imp_vfprintf:dword
.idata:00408224                                         ; DATA XREF: vfprintf↑r
.idata:00408228
.idata:00408228
.idata:00408228
.idata:00408228                 end start
