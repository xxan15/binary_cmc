.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : B07672D2B52CA98C8649E9BD4EB049601A6AF5058F07DBEA5B4CD2CA06770DD4
.text:00401000 ; Input MD5    : 0EA99530EFD00EDA01C955C2EBC734AA
.text:00401000 ; Input CRC32  : 0878F52D
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/df.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A27A (Wed Apr 20 18:42:02 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00011970 (  72048.)
.text:00401000 ; Section size in file          : 00011A00 (  72192.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401B70+6A↓p
.text:00401040                                         ; .text:00411680↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_411620
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_413000
.text:004010A2                 mov     edx, dword_4130A0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_413004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4130C0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4130C0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4115F0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_413000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_413004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401B70
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_411620
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 dword_401280    dd 6C6C61h, 636F6C62h, 69732D6Bh, 6900657Ah, 65646F6Eh
.text:00401280                                         ; DATA XREF: .text:off_401320↓o
.text:00401280                 dd 75680073h, 2D6E616Dh, 64616572h, 656C6261h, 697300h
.text:00401280                 dd 6F6C696Bh, 65747962h, 6F6C0073h, 6C6163h, 6167656Dh
.text:00401280                 dd 65747962h, 6F700073h, 62617472h, 74696C69h, 72700079h
.text:00401280                 dd 2D746E69h, 65707974h, 6E797300h, 6F6E0063h, 6E79732Dh
.text:00401280                 dd 79740063h, 65006570h, 756C6378h, 742D6564h, 657079h
.text:00401280                 dd 706C6568h, 72657600h, 6E6F6973h, 90909000h, 6 dup(90909090h)
.text:00401320 off_401320      dd offset dword_401280  ; DATA XREF: sub_401B70+EB↓o
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 61h, 401284h, 1, 0
.text:0040133C                 dd 42h, 40128Fh, 2 dup(0)
.text:0040134C                 dd 69h, 401296h, 2 dup(0)
.text:0040135C                 dd 68h, 4012A5h, 2 dup(0)
.text:0040136C                 dd 48h, 4012A8h, 2 dup(0)
.text:0040137C                 dd 6Bh, 4012B2h, 2 dup(0)
.text:0040138C                 dd 6Ch, 4012B8h, 2 dup(0)
.text:0040139C                 dd 6Dh, 4012C2h, 2 dup(0)
.text:004013AC                 dd 50h, 4012CEh, 2 dup(0)
.text:004013BC                 dd 54h, 4012D9h, 2 dup(0)
.text:004013CC                 dd 80h, 4012DEh, 2 dup(0)
.text:004013DC                 dd 81h, 4012E6h, 1, 0
.text:004013EC                 dd 74h, 4012EBh, 1, 0
.text:004013FC                 dd 78h, 4012F8h, 2 dup(0)
.text:0040140C                 dd 0FFFFFF7Eh, 4012FDh, 2 dup(0)
.text:0040141C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401430 ; const char Locale
.text:00401430 Locale          db 0                    ; DATA XREF: sub_401B70+27↓o
.text:00401430                                         ; sub_401B70+58B↓o ...
.text:00401431                 db 0EBh, 0Dh, 90h
.text:00401434                 align 10h
.text:00401440 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401440                                         ; DATA XREF: sub_401B70+41↓o
.text:00401463 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401B70+49↓o
.text:00401463                                         ; sub_401B70+56↓o
.text:0040146D ; const char VarName[]
.text:0040146D VarName         db 'DF_BLOCK_SIZE',0    ; DATA XREF: sub_401B70+94↓o
.text:0040147B ; const char aAbIfHhklmpttVx[]
.text:0040147B aAbIfHhklmpttVx db 'aB:iF:hHklmPTt:vx:',0
.text:0040147B                                         ; DATA XREF: sub_401B70+F3↓o
.text:0040148E                 align 20h
.text:004014A0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004014A0                                         ; DATA XREF: sub_401B70:loc_401CE3↓o
.text:004014A0                                         ; sub_4023B0+C↓o
.text:004014C7 aPaulEggert     db 'Paul Eggert',0      ; DATA XREF: sub_401B70+1C0↓o
.text:004014D3 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401B70+1C8↓o
.text:004014E3 aTorbjornGranlu db 'Torbjorn Granlund',0
.text:004014E3                                         ; DATA XREF: sub_401B70+1D3↓o
.text:004014F5 a530            db '5.3.0',0            ; DATA XREF: sub_401B70+1DB↓o
.text:004014FB aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401B70+1E3↓o
.text:00401509 ; const FILE stru_401509
.text:00401509 stru_401509     FILE <90006664h, 90909090h, 90909090h, 90909090h, 90909090h, \
.text:00401509                                         ; DATA XREF: sub_401B70+1EB↓o
.text:00401509                       55909090h, 65676173h, 7325203Ah>
.text:00401529                 db  20h
.text:0040152A                 db  5Bh ; [
.text:0040152B                 db  4Fh ; O
.text:0040152C                 db  50h ; P
.text:0040152D                 db  54h ; T
.text:0040152E                 db  49h ; I
.text:0040152F                 db  4Fh ; O
.text:00401530                 db  4Eh ; N
.text:00401531                 db  5Dh ; ]
.text:00401532                 db  2Eh ; .
.text:00401533                 db  2Eh ; .
.text:00401534                 db  2Eh ; .
.text:00401535                 db  20h
.text:00401536                 db  5Bh ; [
.text:00401537                 db  46h ; F
.text:00401538                 db  49h ; I
.text:00401539                 db  4Ch ; L
.text:0040153A                 db  45h ; E
.text:0040153B                 db  5Dh ; ]
.text:0040153C                 db  2Eh ; .
.text:0040153D                 db  2Eh ; .
.text:0040153E                 db  2Eh ; .
.text:0040153F                 db  0Ah
.text:00401540                 db    0
.text:00401541                 align 20h
.text:00401560 aShowInformatio db 'Show information about the file system on which each FILE resides'
.text:00401560                                         ; DATA XREF: sub_401B70+223↓o
.text:00401560                                         ; sub_4023B0+5F↓o
.text:00401560                 db ',',0Ah
.text:00401560                 db 'or all file systems by default.',0Ah
.text:00401560                 db 0Ah,0
.text:004015C5                 align 20h
.text:004015E0 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:004015E0                                         ; DATA XREF: sub_401B70+245↓o
.text:004015E0                                         ; sub_4023B0+81↓o
.text:004015E0                 db 'ns too.',0Ah,0
.text:0040162A                 align 20h
.text:00401640 aAAllIncludeFil db '  -a, --all             include file systems having 0 blocks',0Ah
.text:00401640                                         ; DATA XREF: sub_401B70+267↓o
.text:00401640                                         ; sub_4023B0+A3↓o
.text:00401640                 db '  -B, --block-size=SIZE use SIZE-byte blocks',0Ah
.text:00401640                 db '  -h, --human-readable  print sizes in human readable format (e.g'
.text:00401640                 db '., 1K 234M 2G)',0Ah
.text:00401640                 db '  -H, --si              likewise, but use powers of 1000 not 1024'
.text:00401640                 db 0Ah,0
.text:0040173D                 align 10h
.text:00401740 aIInodesListIno db '  -i, --inodes          list inode information instead of block u'
.text:00401740                                         ; DATA XREF: sub_401B70+289↓o
.text:00401740                                         ; sub_4023B0+C5↓o
.text:00401740                 db 'sage',0Ah
.text:00401740                 db '  -k                    like --block-size=1K',0Ah
.text:00401740                 db '  -l, --local           limit listing to local file systems',0Ah
.text:00401740                 db '      --no-sync         do not invoke sync before getting usage i'
.text:00401740                 db 'nfo (default)',0Ah,0
.text:0040183F                 align 10h
.text:00401840 aPPortabilityUs db '  -P, --portability     use the POSIX output format',0Ah
.text:00401840                                         ; DATA XREF: sub_401B70+2AB↓o
.text:00401840                                         ; sub_4023B0+E7↓o
.text:00401840                 db '      --sync            invoke sync before getting usage info',0Ah
.text:00401840                 db '  -t, --type=TYPE       limit listing to file systems of type TYP'
.text:00401840                 db 'E',0Ah
.text:00401840                 db '  -T, --print-type      print file system type',0Ah
.text:00401840                 db '  -x, --exclude-type=TYPE   limit listing to file systems not of '
.text:00401840                 db 'type TYPE',0Ah
.text:00401840                 db '  -v                    (ignored)',0Ah,0
.text:00401992                 align 10h
.text:004019A0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004019A0                                         ; DATA XREF: sub_401B70+2CD↓o
.text:004019A0                                         ; sub_4023B0+109↓o
.text:004019CD                 align 20h
.text:004019E0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004019E0                                         ; DATA XREF: sub_401B70+2EF↓o
.text:004019E0                                         ; sub_4023B0+12B↓o
.text:00401A16                 align 10h
.text:00401A20 aSizeMayBeOrMay db 0Ah                  ; DATA XREF: sub_401B70+311↓o
.text:00401A20                                         ; sub_4023B0+14D↓o
.text:00401A20                 db 'SIZE may be (or may be an integer optionally followed by) one of '
.text:00401A20                 db 'following:',0Ah
.text:00401A20                 db 'kB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P'
.text:00401A20                 db ', E, Z, Y.',0Ah,0
.text:00401ABA aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401B70+333↓o
.text:00401ABA                                         ; sub_4023B0+16F↓o
.text:00401ABA                 db 'Report bugs to <%s>.',0Ah,0
.text:00401AD1 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401AD1                                         ; DATA XREF: sub_401B70+340↓o
.text:00401AD1                                         ; sub_4023B0+17C↓o
.text:00401AE7                 align 20h
.text:00401B00 aScannotReadTab db '%scannot read table of mounted file systems',0
.text:00401B00                                         ; DATA XREF: sub_401B70:loc_40210F↓o
.text:00401B2C aWarning        db 'Warning: ',0        ; DATA XREF: sub_401B70:loc_4022A4↓o
.text:00401B36 ; const char aS[]
.text:00401B36 aS              db '%s',0               ; DATA XREF: sub_401B70+7C6↓o
.text:00401B36                                         ; sub_4028D0+8F5↓o ...
.text:00401B39                 align 10h
.text:00401B40 aFileSystemType db 'file system type %s both selected and excluded',0
.text:00401B40                                         ; DATA XREF: sub_401B70+801↓o
.text:00401B6F                 align 10h
.text:00401B70
.text:00401B70 ; =============== S U B R O U T I N E =======================================
.text:00401B70
.text:00401B70 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401B70
.text:00401B70 sub_401B70      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401B70
.text:00401B70 Category        = dword ptr -48h
.text:00401B70 Locale          = dword ptr -44h
.text:00401B70 var_40          = dword ptr -40h
.text:00401B70 var_3C          = byte ptr -3Ch
.text:00401B70 var_38          = byte ptr -38h
.text:00401B70 var_34          = dword ptr -34h
.text:00401B70 var_30          = dword ptr -30h
.text:00401B70 var_2C          = dword ptr -2Ch
.text:00401B70 var_28          = dword ptr -28h
.text:00401B70 var_24          = dword ptr -24h
.text:00401B70 var_20          = dword ptr -20h
.text:00401B70 var_1C          = byte ptr -1Ch
.text:00401B70 var_15          = byte ptr -15h
.text:00401B70 var_14          = dword ptr -14h
.text:00401B70 var_10          = dword ptr -10h
.text:00401B70 arg_0           = dword ptr  8
.text:00401B70 arg_4           = dword ptr  0Ch
.text:00401B70
.text:00401B70                 push    ebp
.text:00401B71                 xor     eax, eax
.text:00401B73                 mov     ebp, esp
.text:00401B75                 push    edi
.text:00401B76                 push    esi
.text:00401B77                 push    ebx
.text:00401B78                 sub     esp, 3Ch
.text:00401B7B                 and     esp, 0FFFFFFF0h
.text:00401B7E                 call    __alloca
.text:00401B83                 mov     edi, [ebp+arg_0]
.text:00401B86                 call    sub_4116C0
.text:00401B8B                 mov     [ebp+var_14], 0
.text:00401B92                 mov     eax, [ebp+arg_4]
.text:00401B95                 mov     ebx, [eax]
.text:00401B97                 mov     [esp+48h+Locale], offset Locale ; Locale
.text:00401B9F                 mov     [esp+48h+Category], 0 ; Category
.text:00401BA6                 mov     ds:dword_4145C0, ebx
.text:00401BAC                 call    setlocale
.text:00401BB1                 mov     [esp+48h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401BB9                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:00401BC0                 call    ds:libintl_bindtextdomain
.text:00401BC6                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:00401BCD                 call    ds:libintl_textdomain
.text:00401BD3                 mov     [esp+48h+Category], offset sub_4065C0 ; void (__cdecl *)()
.text:00401BDA                 call    sub_401040
.text:00401BDF                 mov     ds:byte_414000, 0
.text:00401BE6                 xor     ecx, ecx
.text:00401BE8                 xor     edx, edx
.text:00401BEA                 mov     ds:dword_414090, ecx
.text:00401BF0                 mov     ds:dword_4140A0, edx
.text:00401BF6                 mov     ds:byte_414010, 0
.text:00401BFD                 mov     ds:byte_414030, 0
.text:00401C04                 mov     [esp+48h+Category], offset VarName ; "DF_BLOCK_SIZE"
.text:00401C0B                 call    getenv
.text:00401C10                 mov     [esp+48h+Category], eax ; char *
.text:00401C13                 mov     [esp+48h+var_40], offset dword_414050 ; int
.text:00401C1B                 mov     [esp+48h+Locale], 0 ; char
.text:00401C23                 call    sub_406240
.text:00401C28                 mov     ds:dword_414040, eax
.text:00401C2D                 xor     eax, eax
.text:00401C2F                 mov     ds:byte_4140C0, 0
.text:00401C36                 mov     ds:byte_414060, 0
.text:00401C3D                 mov     ds:dword_414080, eax
.text:00401C42                 lea     esi, [esi+0]
.text:00401C49                 lea     edi, [edi+0]
.text:00401C50
.text:00401C50 loc_401C50:                             ; CODE XREF: sub_401B70+16E↓j
.text:00401C50                                         ; sub_401B70+393↓j ...
.text:00401C50                 mov     dword ptr [esp+48h+var_38], 0 ; int
.text:00401C58                 mov     esi, [ebp+arg_4]
.text:00401C5B                 mov     dword ptr [esp+48h+var_3C], offset off_401320 ; int
.text:00401C63                 mov     [esp+48h+var_40], offset aAbIfHhklmpttVx ; "aB:iF:hHklmPTt:vx:"
.text:00401C6B                 mov     [esp+48h+Locale], esi ; int
.text:00401C6F                 mov     [esp+48h+Category], edi ; int
.text:00401C72                 call    sub_405490
.text:00401C77                 cmp     eax, 0FFFFFFFFh
.text:00401C7A                 jz      loc_402060
.text:00401C80                 cmp     eax, 68h ; 'h'
.text:00401C83                 jz      loc_402050
.text:00401C89                 cmp     eax, 68h ; 'h'
.text:00401C8C                 jg      loc_401F67
.text:00401C92                 cmp     eax, 46h ; 'F'
.text:00401C95                 jz      loc_401F40
.text:00401C9B                 cmp     eax, 46h ; 'F'
.text:00401C9E                 jg      loc_401EC5
.text:00401CA4                 cmp     eax, 0FFFFFF7Eh
.text:00401CA9                 jz      loc_401D74
.text:00401CAF                 cmp     eax, 0FFFFFF7Eh
.text:00401CB4                 jle     short loc_401D1B
.text:00401CB6                 cmp     eax, 42h ; 'B'
.text:00401CB9                 jnz     short loc_401CE3
.text:00401CBB                 mov     [esp+48h+var_40], offset dword_414050 ; int
.text:00401CC3                 mov     esi, ds:dword_4145E0
.text:00401CC9                 mov     [esp+48h+Locale], 1 ; char
.text:00401CD1                 mov     [esp+48h+Category], esi ; char *
.text:00401CD4                 call    sub_406240
.text:00401CD9                 mov     ds:dword_414040, eax
.text:00401CDE                 jmp     loc_401C50
.text:00401CE3 ; ---------------------------------------------------------------------------
.text:00401CE3
.text:00401CE3 loc_401CE3:                             ; CODE XREF: sub_401B70+149↑j
.text:00401CE3                                         ; sub_401B70+1B0↓j ...
.text:00401CE3                 mov     [esp+48h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401CEA                 call    ds:libintl_gettext
.text:00401CF0                 mov     ebx, ds:_iob
.text:00401CF6                 mov     ecx, ds:dword_4145C0
.text:00401CFC                 add     ebx, 40h ; '@'
.text:00401CFF                 mov     [esp+48h+var_40], ecx
.text:00401D03                 mov     [esp+48h+Locale], eax ; Format
.text:00401D07                 mov     [esp+48h+Category], ebx ; Stream
.text:00401D0A                 call    fprintf
.text:00401D0F
.text:00401D0F loc_401D0F:                             ; CODE XREF: sub_401B70+53A↓j
.text:00401D0F                 mov     [esp+48h+Category], 1 ; Code
.text:00401D16
.text:00401D16 loc_401D16:                             ; CODE XREF: sub_401B70+202↓j
.text:00401D16                                         ; sub_401B70+666↓j
.text:00401D16                 call    exit
.text:00401D1B ; ---------------------------------------------------------------------------
.text:00401D1B
.text:00401D1B loc_401D1B:                             ; CODE XREF: sub_401B70+144↑j
.text:00401D1B                 cmp     eax, 0FFFFFF7Dh
.text:00401D20                 jnz     short loc_401CE3
.text:00401D22                 mov     [esp+48h+var_2C], 0
.text:00401D2A                 mov     edx, ds:_iob
.text:00401D30                 mov     [esp+48h+var_30], offset aPaulEggert ; "Paul Eggert"
.text:00401D38                 mov     [esp+48h+var_34], offset aDavidMackenzie ; "David MacKenzie"
.text:00401D40                 add     edx, 20h ; ' '
.text:00401D43                 mov     dword ptr [esp+48h+var_38], offset aTorbjornGranlu ; "Torbjorn Granlund"
.text:00401D4B                 mov     dword ptr [esp+48h+var_3C], offset a530 ; "5.3.0"
.text:00401D53                 mov     [esp+48h+var_40], offset aGnuCoreutils ; "GNU coreutils"
.text:00401D5B                 mov     [esp+48h+Locale], offset stru_401509 ; FILE *
.text:00401D63                 mov     [esp+48h+Category], edx ; FILE *
.text:00401D66                 call    sub_405450
.text:00401D6B
.text:00401D6B loc_401D6B:                             ; CODE XREF: sub_401B70+350↓j
.text:00401D6B                 mov     [esp+48h+Category], 0
.text:00401D72                 jmp     short loc_401D16
.text:00401D74 ; ---------------------------------------------------------------------------
.text:00401D74
.text:00401D74 loc_401D74:                             ; CODE XREF: sub_401B70+139↑j
.text:00401D74                 mov     [esp+48h+Category], (offset stru_401509._charbuf+3)
.text:00401D7B                 call    ds:libintl_gettext
.text:00401D81                 mov     edi, ds:dword_4145C0
.text:00401D87                 mov     [esp+48h+Category], eax ; Format
.text:00401D8A                 mov     [esp+48h+Locale], edi
.text:00401D8E                 call    printf
.text:00401D93                 mov     [esp+48h+Category], offset aShowInformatio ; "Show information about the file system "...
.text:00401D9A                 call    ds:libintl_gettext
.text:00401DA0                 mov     esi, ds:_iob
.text:00401DA6                 add     esi, 20h ; ' '
.text:00401DA9                 mov     [esp+48h+Locale], esi ; Stream
.text:00401DAD                 mov     [esp+48h+Category], eax ; Buffer
.text:00401DB0                 call    fputs
.text:00401DB5                 mov     [esp+48h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401DBC                 call    ds:libintl_gettext
.text:00401DC2                 mov     ecx, ds:_iob
.text:00401DC8                 add     ecx, 20h ; ' '
.text:00401DCB                 mov     [esp+48h+Locale], ecx ; Stream
.text:00401DCF                 mov     [esp+48h+Category], eax ; Buffer
.text:00401DD2                 call    fputs
.text:00401DD7                 mov     [esp+48h+Category], offset aAAllIncludeFil ; "  -a, --all             include file sy"...
.text:00401DDE                 call    ds:libintl_gettext
.text:00401DE4                 mov     ebx, ds:_iob
.text:00401DEA                 add     ebx, 20h ; ' '
.text:00401DED                 mov     [esp+48h+Locale], ebx ; Stream
.text:00401DF1                 mov     [esp+48h+Category], eax ; Buffer
.text:00401DF4                 call    fputs
.text:00401DF9                 mov     [esp+48h+Category], offset aIInodesListIno ; "  -i, --inodes          list inode info"...
.text:00401E00                 call    ds:libintl_gettext
.text:00401E06                 mov     edi, ds:_iob
.text:00401E0C                 add     edi, 20h ; ' '
.text:00401E0F                 mov     [esp+48h+Locale], edi ; Stream
.text:00401E13                 mov     [esp+48h+Category], eax ; Buffer
.text:00401E16                 call    fputs
.text:00401E1B                 mov     [esp+48h+Category], offset aPPortabilityUs ; "  -P, --portability     use the POSIX o"...
.text:00401E22                 call    ds:libintl_gettext
.text:00401E28                 mov     esi, ds:_iob
.text:00401E2E                 add     esi, 20h ; ' '
.text:00401E31                 mov     [esp+48h+Locale], esi ; Stream
.text:00401E35                 mov     [esp+48h+Category], eax ; Buffer
.text:00401E38                 call    fputs
.text:00401E3D                 mov     [esp+48h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401E44                 call    ds:libintl_gettext
.text:00401E4A                 mov     ecx, ds:_iob
.text:00401E50                 add     ecx, 20h ; ' '
.text:00401E53                 mov     [esp+48h+Locale], ecx ; Stream
.text:00401E57                 mov     [esp+48h+Category], eax ; Buffer
.text:00401E5A                 call    fputs
.text:00401E5F                 mov     [esp+48h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401E66                 call    ds:libintl_gettext
.text:00401E6C                 mov     ebx, ds:_iob
.text:00401E72                 add     ebx, 20h ; ' '
.text:00401E75                 mov     [esp+48h+Locale], ebx ; Stream
.text:00401E79                 mov     [esp+48h+Category], eax ; Buffer
.text:00401E7C                 call    fputs
.text:00401E81                 mov     [esp+48h+Category], offset aSizeMayBeOrMay ; "\nSIZE may be (or may be an integer opt"...
.text:00401E88                 call    ds:libintl_gettext
.text:00401E8E                 mov     edi, ds:_iob
.text:00401E94                 add     edi, 20h ; ' '
.text:00401E97                 mov     [esp+48h+Locale], edi ; Stream
.text:00401E9B                 mov     [esp+48h+Category], eax ; Buffer
.text:00401E9E                 call    fputs
.text:00401EA3                 mov     [esp+48h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401EAA                 call    ds:libintl_gettext
.text:00401EB0                 mov     [esp+48h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401EB8                 mov     [esp+48h+Category], eax ; Format
.text:00401EBB                 call    printf
.text:00401EC0                 jmp     loc_401D6B
.text:00401EC5 ; ---------------------------------------------------------------------------
.text:00401EC5
.text:00401EC5 loc_401EC5:                             ; CODE XREF: sub_401B70+12E↑j
.text:00401EC5                 cmp     eax, 50h ; 'P'
.text:00401EC8                 jz      short loc_401F2E
.text:00401ECA                 cmp     eax, 50h ; 'P'
.text:00401ECD                 jg      short loc_401F08
.text:00401ECF                 cmp     eax, 48h ; 'H'
.text:00401ED2                 jnz     loc_401CE3
.text:00401ED8                 mov     ebx, 90h
.text:00401EDD                 mov     ds:dword_414040, ebx
.text:00401EE3                 lea     esi, [esi+0]
.text:00401EE9                 lea     edi, [edi+0]
.text:00401EF0
.text:00401EF0 loc_401EF0:                             ; CODE XREF: sub_401B70+4EB↓j
.text:00401EF0                 mov     ecx, 1
.text:00401EF5                 mov     ds:dword_414050, ecx
.text:00401EFB
.text:00401EFB loc_401EFB:                             ; CODE XREF: sub_401B70+441↓j
.text:00401EFB                                         ; sub_401B70+465↓j
.text:00401EFB                 xor     esi, esi
.text:00401EFD                 mov     ds:dword_414054, esi
.text:00401F03                 jmp     loc_401C50
.text:00401F08 ; ---------------------------------------------------------------------------
.text:00401F08
.text:00401F08 loc_401F08:                             ; CODE XREF: sub_401B70+35D↑j
.text:00401F08                 cmp     eax, 54h ; 'T'
.text:00401F0B                 jz      short loc_401F22
.text:00401F0D                 cmp     eax, 61h ; 'a'
.text:00401F10                 jnz     loc_401CE3
.text:00401F16                 mov     ds:byte_414010, 1
.text:00401F1D                 jmp     loc_401C50
.text:00401F22 ; ---------------------------------------------------------------------------
.text:00401F22
.text:00401F22 loc_401F22:                             ; CODE XREF: sub_401B70+39B↑j
.text:00401F22                 mov     ds:byte_4140C0, 1
.text:00401F29                 jmp     loc_401C50
.text:00401F2E ; ---------------------------------------------------------------------------
.text:00401F2E
.text:00401F2E loc_401F2E:                             ; CODE XREF: sub_401B70+358↑j
.text:00401F2E                 mov     ds:byte_414060, 1
.text:00401F35                 jmp     loc_401C50
.text:00401F35 ; ---------------------------------------------------------------------------
.text:00401F3A                 align 10h
.text:00401F40
.text:00401F40 loc_401F40:                             ; CODE XREF: sub_401B70+125↑j
.text:00401F40                                         ; sub_401B70+3FA↓j
.text:00401F40                 mov     [esp+48h+Category], 8 ; size_t
.text:00401F47                 mov     esi, ds:dword_4145E0
.text:00401F4D                 call    sub_404D00
.text:00401F52                 mov     ebx, ds:dword_414090
.text:00401F58                 mov     [eax], esi
.text:00401F5A                 mov     [eax+4], ebx
.text:00401F5D                 mov     ds:dword_414090, eax
.text:00401F62                 jmp     loc_401C50
.text:00401F67 ; ---------------------------------------------------------------------------
.text:00401F67
.text:00401F67 loc_401F67:                             ; CODE XREF: sub_401B70+11C↑j
.text:00401F67                 cmp     eax, 74h ; 't'
.text:00401F6A                 jz      short loc_401F40
.text:00401F6C                 cmp     eax, 74h ; 't'
.text:00401F6F                 jg      short loc_401FE0
.text:00401F71                 cmp     eax, 6Bh ; 'k'
.text:00401F74                 jz      short loc_401FC2
.text:00401F76                 cmp     eax, 6Bh ; 'k'
.text:00401F79                 jg      short loc_401F90
.text:00401F7B                 cmp     eax, 69h ; 'i'
.text:00401F7E                 jnz     loc_401CE3
.text:00401F84                 mov     ds:byte_414000, 1
.text:00401F8B                 jmp     loc_401C50
.text:00401F90 ; ---------------------------------------------------------------------------
.text:00401F90
.text:00401F90 loc_401F90:                             ; CODE XREF: sub_401B70+409↑j
.text:00401F90                 cmp     eax, 6Ch ; 'l'
.text:00401F93                 jz      short loc_401FB6
.text:00401F95                 cmp     eax, 6Dh ; 'm'
.text:00401F98                 jnz     loc_401CE3
.text:00401F9E                 xor     ecx, ecx
.text:00401FA0                 mov     ebx, 100000h
.text:00401FA5                 mov     ds:dword_414040, ecx
.text:00401FAB                 mov     ds:dword_414050, ebx
.text:00401FB1                 jmp     loc_401EFB
.text:00401FB6 ; ---------------------------------------------------------------------------
.text:00401FB6
.text:00401FB6 loc_401FB6:                             ; CODE XREF: sub_401B70+423↑j
.text:00401FB6                 mov     ds:byte_414020, 1
.text:00401FBD                 jmp     loc_401C50
.text:00401FC2 ; ---------------------------------------------------------------------------
.text:00401FC2
.text:00401FC2 loc_401FC2:                             ; CODE XREF: sub_401B70+404↑j
.text:00401FC2                 xor     edx, edx
.text:00401FC4                 mov     esi, 400h
.text:00401FC9                 mov     ds:dword_414040, edx
.text:00401FCF                 mov     ds:dword_414050, esi
.text:00401FD5                 jmp     loc_401EFB
.text:00401FD5 ; ---------------------------------------------------------------------------
.text:00401FDA                 align 10h
.text:00401FE0
.text:00401FE0 loc_401FE0:                             ; CODE XREF: sub_401B70+3FF↑j
.text:00401FE0                 cmp     eax, 78h ; 'x'
.text:00401FE3                 jz      short loc_402022
.text:00401FE5                 cmp     eax, 78h ; 'x'
.text:00401FE8                 jg      short loc_401FF8
.text:00401FEA                 cmp     eax, 76h ; 'v'
.text:00401FED                 jz      loc_401C50
.text:00401FF3                 jmp     loc_401CE3
.text:00401FF8 ; ---------------------------------------------------------------------------
.text:00401FF8
.text:00401FF8 loc_401FF8:                             ; CODE XREF: sub_401B70+478↑j
.text:00401FF8                 cmp     eax, 80h ; '€'
.text:00401FFD                 jz      short loc_402016
.text:00401FFF                 cmp     eax, 81h
.text:00402004                 jnz     loc_401CE3
.text:0040200A                 mov     ds:byte_414070, 0
.text:00402011                 jmp     loc_401C50
.text:00402016 ; ---------------------------------------------------------------------------
.text:00402016
.text:00402016 loc_402016:                             ; CODE XREF: sub_401B70+48D↑j
.text:00402016                 mov     ds:byte_414070, 1
.text:0040201D                 jmp     loc_401C50
.text:00402022 ; ---------------------------------------------------------------------------
.text:00402022
.text:00402022 loc_402022:                             ; CODE XREF: sub_401B70+473↑j
.text:00402022                 mov     [esp+48h+Category], 8 ; size_t
.text:00402029                 mov     esi, ds:dword_4145E0
.text:0040202F                 call    sub_404D00
.text:00402034                 mov     ecx, ds:dword_4140A0
.text:0040203A                 mov     [eax], esi
.text:0040203C                 mov     [eax+4], ecx
.text:0040203F                 mov     ds:dword_4140A0, eax
.text:00402044                 jmp     loc_401C50
.text:00402044 ; ---------------------------------------------------------------------------
.text:00402049                 align 10h
.text:00402050
.text:00402050 loc_402050:                             ; CODE XREF: sub_401B70+113↑j
.text:00402050                 mov     edx, 0B0h ; '°'
.text:00402055                 mov     ds:dword_414040, edx
.text:0040205B                 jmp     loc_401EF0
.text:00402060 ; ---------------------------------------------------------------------------
.text:00402060
.text:00402060 loc_402060:                             ; CODE XREF: sub_401B70+10A↑j
.text:00402060                 mov     [ebp+var_15], 0
.text:00402064                 mov     esi, ds:dword_414090
.text:0040206A                 test    esi, esi
.text:0040206C                 jz      short loc_4020B0
.text:0040206E
.text:0040206E loc_40206E:                             ; CODE XREF: sub_401B70+534↓j
.text:0040206E                 mov     ebx, ds:dword_4140A0
.text:00402074                 test    ebx, ebx
.text:00402076                 jz      short loc_40209F
.text:00402078                 nop
.text:00402079                 lea     esi, [esi+0]
.text:00402080
.text:00402080 loc_402080:                             ; CODE XREF: sub_401B70+52D↓j
.text:00402080                 mov     ecx, [ebx]
.text:00402082                 mov     [esp+48h+Locale], ecx ; Str2
.text:00402086                 mov     edx, [esi]
.text:00402088                 mov     [esp+48h+Category], edx ; Str1
.text:0040208B                 call    strcmp
.text:00402090                 test    eax, eax
.text:00402092                 jz      loc_402367
.text:00402098                 mov     ebx, [ebx+4]
.text:0040209B                 test    ebx, ebx
.text:0040209D                 jnz     short loc_402080
.text:0040209F
.text:0040209F loc_40209F:                             ; CODE XREF: sub_401B70+506↑j
.text:0040209F                                         ; sub_401B70+830↓j
.text:0040209F                 mov     esi, [esi+4]
.text:004020A2                 test    esi, esi
.text:004020A4                 jnz     short loc_40206E
.text:004020A6                 cmp     [ebp+var_15], 0
.text:004020AA                 jnz     loc_401D0F
.text:004020B0
.text:004020B0 loc_4020B0:                             ; CODE XREF: sub_401B70+4FC↑j
.text:004020B0                 mov     eax, dword_413010
.text:004020B5                 cmp     eax, edi
.text:004020B7                 jl      loc_4022BE
.text:004020BD
.text:004020BD loc_4020BD:                             ; CODE XREF: sub_401B70+76E↓j
.text:004020BD                                         ; sub_401B70+7A0↓j
.text:004020BD                 mov     edx, ds:dword_414090
.text:004020C3                 xor     eax, eax
.text:004020C5                 test    edx, edx
.text:004020C7                 jnz     short loc_4020E5
.text:004020C9                 mov     esi, ds:dword_4140A0
.text:004020CF                 test    esi, esi
.text:004020D1                 jnz     short loc_4020E5
.text:004020D3                 cmp     ds:byte_4140C0, 0
.text:004020DA                 jnz     short loc_4020E5
.text:004020DC                 cmp     ds:byte_414020, 0
.text:004020E3                 jz      short loc_4020E7
.text:004020E5
.text:004020E5 loc_4020E5:                             ; CODE XREF: sub_401B70+557↑j
.text:004020E5                                         ; sub_401B70+561↑j ...
.text:004020E5                 mov     al, 1
.text:004020E7
.text:004020E7 loc_4020E7:                             ; CODE XREF: sub_401B70+573↑j
.text:004020E7                 movzx   ebx, al
.text:004020EA                 mov     [esp+48h+Category], ebx
.text:004020ED                 call    sub_404A80
.text:004020F2                 mov     ds:dword_4140B0, eax
.text:004020F7                 test    eax, eax
.text:004020F9                 jnz     short loc_402144
.text:004020FB                 mov     dword ptr [ebp+var_1C], offset Locale
.text:00402102                 mov     eax, dword_413010
.text:00402107                 cmp     eax, edi
.text:00402109                 jl      loc_4022A4
.text:0040210F
.text:0040210F loc_40210F:                             ; CODE XREF: sub_401B70+749↓j
.text:0040210F                 mov     [esp+48h+Category], offset aScannotReadTab ; "%scannot read table of mounted file sys"...
.text:00402116                 cmp     eax, edi
.text:00402118                 setnl   dl
.text:0040211B                 movzx   esi, dl
.text:0040211E                 call    ds:libintl_gettext
.text:00402124                 mov     ebx, eax
.text:00402126                 call    _errno
.text:0040212B                 mov     [esp+48h+var_40], ebx ; char *
.text:0040212F                 mov     ecx, dword ptr [ebp+var_1C]
.text:00402132                 mov     dword ptr [esp+48h+var_3C], ecx ; char
.text:00402136                 mov     ecx, [eax]
.text:00402138                 mov     [esp+48h+Category], esi ; Code
.text:0040213B                 mov     [esp+48h+Locale], ecx ; ErrorMessage
.text:0040213F                 call    sub_409A70
.text:00402144
.text:00402144 loc_402144:                             ; CODE XREF: sub_401B70+589↑j
.text:00402144                 cmp     ds:byte_414070, 0
.text:0040214B                 jnz     loc_40229A
.text:00402151
.text:00402151 loc_402151:                             ; CODE XREF: sub_401B70+72F↓j
.text:00402151                 mov     eax, dword_413010
.text:00402156                 cmp     eax, edi
.text:00402158                 jge     loc_402249
.text:0040215E                 mov     ds:byte_414030, 1
.text:00402165                 mov     esi, [ebp+var_14]
.text:00402168                 test    esi, esi
.text:0040216A                 jle     short loc_402176
.text:0040216C                 call    sub_402660
.text:00402171                 mov     eax, dword_413010
.text:00402176
.text:00402176 loc_402176:                             ; CODE XREF: sub_401B70+5FA↑j
.text:00402176                 mov     [ebp+var_20], eax
.text:00402179                 cmp     eax, edi
.text:0040217B                 jge     short loc_4021CD
.text:0040217D
.text:0040217D loc_40217D:                             ; CODE XREF: sub_401B70+65B↓j
.text:0040217D                 mov     eax, [ebp+var_20]
.text:00402180                 mov     ebx, [ebp+arg_4]
.text:00402183                 mov     esi, [ebx+eax*4]
.text:00402186                 test    esi, esi
.text:00402188                 jz      short loc_4021C5
.text:0040218A                 mov     ebx, dword_413010
.text:00402190                 sub     eax, ebx
.text:00402192                 lea     ecx, [eax+eax*2]
.text:00402195                 lea     ebx, [eax+ecx*4]
.text:00402198                 mov     eax, [ebp+var_10]
.text:0040219B                 lea     ecx, [eax+ebx*8]
.text:0040219E                 mov     [ebp+var_24], ecx
.text:004021A1                 mov     eax, [ecx]
.text:004021A3                 and     eax, 0F000h
.text:004021A8                 cmp     eax, 6000h
.text:004021AD                 jz      short loc_4021DB
.text:004021AF                 cmp     eax, 2000h
.text:004021B4                 jz      short loc_4021DB
.text:004021B6
.text:004021B6 loc_4021B6:                             ; CODE XREF: sub_401B70+67A↓j
.text:004021B6                                         ; sub_401B70+69D↓j
.text:004021B6                 mov     [esp+48h+Category], esi ; LPCSTR
.text:004021B9                 mov     ebx, [ebp+var_24]
.text:004021BC                 mov     [esp+48h+Locale], ebx ; int
.text:004021C0                 call    sub_403200
.text:004021C5
.text:004021C5 loc_4021C5:                             ; CODE XREF: sub_401B70+618↑j
.text:004021C5                                         ; sub_401B70+6D4↓j
.text:004021C5                 inc     [ebp+var_20]
.text:004021C8                 cmp     [ebp+var_20], edi
.text:004021CB                 jl      short loc_40217D
.text:004021CD
.text:004021CD loc_4021CD:                             ; CODE XREF: sub_401B70+60B↑j
.text:004021CD                                         ; sub_401B70+6E6↓j ...
.text:004021CD                 mov     ebx, ds:dword_414080
.text:004021D3                 mov     [esp+48h+Category], ebx
.text:004021D6                 jmp     loc_401D16
.text:004021DB ; ---------------------------------------------------------------------------
.text:004021DB
.text:004021DB loc_4021DB:                             ; CODE XREF: sub_401B70+63D↑j
.text:004021DB                                         ; sub_401B70+644↑j
.text:004021DB                 mov     [ebp+var_28], 0
.text:004021E2                 mov     ebx, ds:dword_4140B0
.text:004021E8                 test    ebx, ebx
.text:004021EA                 jz      short loc_4021B6
.text:004021EC
.text:004021EC loc_4021EC:                             ; CODE XREF: sub_401B70+696↓j
.text:004021EC                 mov     edx, [ebx]
.text:004021EE                 mov     [esp+48h+Category], esi ; Str1
.text:004021F1                 mov     [esp+48h+Locale], edx ; Str2
.text:004021F5                 call    strcmp
.text:004021FA                 test    eax, eax
.text:004021FC                 jnz     short loc_402201
.text:004021FE                 mov     [ebp+var_28], ebx
.text:00402201
.text:00402201 loc_402201:                             ; CODE XREF: sub_401B70+68C↑j
.text:00402201                 mov     ebx, [ebx+1Ch]
.text:00402204                 test    ebx, ebx
.text:00402206                 jnz     short loc_4021EC
.text:00402208                 mov     ecx, [ebp+var_28]
.text:0040220B                 test    ecx, ecx
.text:0040220D                 jz      short loc_4021B6
.text:0040220F                 mov     ebx, [ebp+var_28]
.text:00402212                 xor     ecx, ecx
.text:00402214                 test    byte ptr [ebx+18h], 2
.text:00402218                 setnz   cl
.text:0040221B                 xor     edx, edx
.text:0040221D                 mov     dword ptr [esp+48h+var_38], ecx ; char
.text:00402221                 test    byte ptr [ebx+18h], 1
.text:00402225                 setnz   dl
.text:00402228                 mov     dword ptr [esp+48h+var_3C], edx ; char
.text:0040222C                 mov     ecx, [ebx+8]
.text:0040222F                 mov     [esp+48h+var_40], ecx ; char *
.text:00402233                 mov     edx, [ebx+4]
.text:00402236                 mov     [esp+48h+Locale], edx ; LPCSTR
.text:0040223A                 mov     esi, [ebx]
.text:0040223C                 mov     [esp+48h+Category], esi ; Str
.text:0040223F                 call    sub_4028D0
.text:00402244                 jmp     loc_4021C5
.text:00402249 ; ---------------------------------------------------------------------------
.text:00402249
.text:00402249 loc_402249:                             ; CODE XREF: sub_401B70+5E8↑j
.text:00402249                 call    sub_402660
.text:0040224E                 mov     ebx, ds:dword_4140B0
.text:00402254                 test    ebx, ebx
.text:00402256                 jz      loc_4021CD
.text:0040225C
.text:0040225C loc_40225C:                             ; CODE XREF: sub_401B70+723↓j
.text:0040225C                 xor     edx, edx
.text:0040225E                 test    byte ptr [ebx+18h], 2
.text:00402262                 setnz   dl
.text:00402265                 xor     ecx, ecx
.text:00402267                 mov     dword ptr [esp+48h+var_38], edx ; char
.text:0040226B                 test    byte ptr [ebx+18h], 1
.text:0040226F                 setnz   cl
.text:00402272                 mov     dword ptr [esp+48h+var_3C], ecx ; char
.text:00402276                 mov     edx, [ebx+8]
.text:00402279                 mov     [esp+48h+var_40], edx ; char *
.text:0040227D                 mov     esi, [ebx+4]
.text:00402280                 mov     [esp+48h+Locale], esi ; LPCSTR
.text:00402284                 mov     edi, [ebx]
.text:00402286                 mov     [esp+48h+Category], edi ; Str
.text:00402289                 call    sub_4028D0
.text:0040228E                 mov     ebx, [ebx+1Ch]
.text:00402291                 test    ebx, ebx
.text:00402293                 jnz     short loc_40225C
.text:00402295                 jmp     loc_4021CD
.text:0040229A ; ---------------------------------------------------------------------------
.text:0040229A
.text:0040229A loc_40229A:                             ; CODE XREF: sub_401B70+5DB↑j
.text:0040229A                 call    j__flushall
.text:0040229F                 jmp     loc_402151
.text:004022A4 ; ---------------------------------------------------------------------------
.text:004022A4
.text:004022A4 loc_4022A4:                             ; CODE XREF: sub_401B70+599↑j
.text:004022A4                 mov     [esp+48h+Category], offset aWarning ; "Warning: "
.text:004022AB                 call    ds:libintl_gettext
.text:004022B1                 mov     dword ptr [ebp+var_1C], eax
.text:004022B4                 mov     eax, dword_413010
.text:004022B9                 jmp     loc_40210F
.text:004022BE ; ---------------------------------------------------------------------------
.text:004022BE
.text:004022BE loc_4022BE:                             ; CODE XREF: sub_401B70+547↑j
.text:004022BE                 mov     [esp+48h+Locale], 68h ; 'h'
.text:004022C6                 mov     ecx, edi
.text:004022C8                 sub     ecx, eax
.text:004022CA                 mov     [esp+48h+Category], ecx
.text:004022CD                 call    sub_404CC0
.text:004022D2                 mov     [ebp+var_10], eax
.text:004022D5                 mov     eax, dword_413010
.text:004022DA                 cmp     eax, edi
.text:004022DC                 mov     esi, eax
.text:004022DE                 jge     loc_4020BD
.text:004022E4
.text:004022E4 loc_4022E4:                             ; CODE XREF: sub_401B70+7AB↓j
.text:004022E4                 mov     ebx, esi
.text:004022E6                 sub     ebx, eax
.text:004022E8                 mov     eax, [ebp+var_10]
.text:004022EB                 lea     ecx, [ebx+ebx*2]
.text:004022EE                 lea     ebx, [ebx+ecx*4]
.text:004022F1                 lea     ecx, [eax+ebx*8]
.text:004022F4                 mov     [esp+48h+Locale], ecx ; int
.text:004022F8                 mov     eax, [ebp+arg_4]
.text:004022FB                 mov     ebx, [eax+esi*4]
.text:004022FE                 mov     [esp+48h+Category], ebx ; char *
.text:00402301                 call    sub_40B410
.text:00402306                 test    eax, eax
.text:00402308                 jnz     short loc_40231D
.text:0040230A                 inc     [ebp+var_14]
.text:0040230D
.text:0040230D loc_40230D:                             ; CODE XREF: sub_401B70+7F5↓j
.text:0040230D                 inc     esi
.text:0040230E                 cmp     esi, edi
.text:00402310                 jge     loc_4020BD
.text:00402316                 mov     eax, dword_413010
.text:0040231B                 jmp     short loc_4022E4
.text:0040231D ; ---------------------------------------------------------------------------
.text:0040231D
.text:0040231D loc_40231D:                             ; CODE XREF: sub_401B70+798↑j
.text:0040231D                 mov     eax, [ebp+arg_4]
.text:00402320                 mov     ecx, [eax+esi*4]
.text:00402323                 mov     [esp+48h+Category], ecx ; char *
.text:00402326                 call    sub_406900
.text:0040232B                 mov     ebx, eax
.text:0040232D                 call    _errno
.text:00402332                 mov     dword ptr [esp+48h+var_3C], ebx ; char
.text:00402336                 mov     [esp+48h+var_40], offset aS ; "%s"
.text:0040233E                 mov     ebx, [eax]
.text:00402340                 mov     [esp+48h+Category], 0 ; Code
.text:00402347                 mov     [esp+48h+Locale], ebx ; ErrorMessage
.text:0040234B                 call    sub_409A70
.text:00402350                 mov     edx, [ebp+arg_4]
.text:00402353                 mov     ecx, 1
.text:00402358                 mov     ds:dword_414080, ecx
.text:0040235E                 mov     dword ptr [edx+esi*4], 0
.text:00402365                 jmp     short loc_40230D
.text:00402367 ; ---------------------------------------------------------------------------
.text:00402367
.text:00402367 loc_402367:                             ; CODE XREF: sub_401B70+522↑j
.text:00402367                 mov     ebx, [esi]
.text:00402369                 mov     [esp+48h+Category], ebx ; char *
.text:0040236C                 call    sub_406900
.text:00402371                 mov     [esp+48h+Category], offset aFileSystemType ; "file system type %s both selected and e"...
.text:00402378                 mov     ebx, eax
.text:0040237A                 call    ds:libintl_gettext
.text:00402380                 mov     dword ptr [esp+48h+var_3C], ebx ; char
.text:00402384                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:0040238C                 mov     [esp+48h+Category], 0 ; Code
.text:00402393                 mov     [esp+48h+var_40], eax ; char *
.text:00402397                 call    sub_409A70
.text:0040239C                 mov     [ebp+var_15], 1
.text:004023A0                 jmp     loc_40209F
.text:004023A0 sub_401B70      endp
.text:004023A0
.text:004023A0 ; ---------------------------------------------------------------------------
.text:004023A5                 align 10h
.text:004023B0
.text:004023B0 ; =============== S U B R O U T I N E =======================================
.text:004023B0
.text:004023B0 ; Attributes: noreturn
.text:004023B0
.text:004023B0 ; void __cdecl __noreturn sub_4023B0(int Code)
.text:004023B0 sub_4023B0      proc near               ; CODE XREF: sub_407C90+A↓p
.text:004023B0
.text:004023B0 Stream          = dword ptr -1Ch
.text:004023B0 Format          = dword ptr -18h
.text:004023B0 var_14          = dword ptr -14h
.text:004023B0 Code            = dword ptr  4
.text:004023B0
.text:004023B0                 push    ebx
.text:004023B1                 sub     esp, 18h
.text:004023B4                 mov     ebx, [esp+1Ch+Code]
.text:004023B8                 test    ebx, ebx
.text:004023BA                 jz      short loc_4023F0
.text:004023BC                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004023C3                 call    ds:libintl_gettext
.text:004023C9                 mov     edx, ds:_iob
.text:004023CF                 mov     ecx, ds:dword_4145C0
.text:004023D5                 add     edx, 40h ; '@'
.text:004023D8                 mov     [esp+1Ch+var_14], ecx
.text:004023DC                 mov     [esp+1Ch+Format], eax ; Format
.text:004023E0                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004023E3                 call    fprintf
.text:004023E8
.text:004023E8 loc_4023E8:                             ; CODE XREF: sub_4023B0+18C↓j
.text:004023E8                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004023EB                 call    exit
.text:004023F0 ; ---------------------------------------------------------------------------
.text:004023F0
.text:004023F0 loc_4023F0:                             ; CODE XREF: sub_4023B0+A↑j
.text:004023F0                 mov     [esp+1Ch+Stream], (offset stru_401509._charbuf+3)
.text:004023F7                 call    ds:libintl_gettext
.text:004023FD                 mov     ecx, ds:dword_4145C0
.text:00402403                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402406                 mov     [esp+1Ch+Format], ecx
.text:0040240A                 call    printf
.text:0040240F                 mov     [esp+1Ch+Stream], offset aShowInformatio ; "Show information about the file system "...
.text:00402416                 call    ds:libintl_gettext
.text:0040241C                 mov     ecx, ds:_iob
.text:00402422                 add     ecx, 20h ; ' '
.text:00402425                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402429                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040242C                 call    fputs
.text:00402431                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00402438                 call    ds:libintl_gettext
.text:0040243E                 mov     ecx, ds:_iob
.text:00402444                 add     ecx, 20h ; ' '
.text:00402447                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040244B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040244E                 call    fputs
.text:00402453                 mov     [esp+1Ch+Stream], offset aAAllIncludeFil ; "  -a, --all             include file sy"...
.text:0040245A                 call    ds:libintl_gettext
.text:00402460                 mov     ecx, ds:_iob
.text:00402466                 add     ecx, 20h ; ' '
.text:00402469                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040246D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402470                 call    fputs
.text:00402475                 mov     [esp+1Ch+Stream], offset aIInodesListIno ; "  -i, --inodes          list inode info"...
.text:0040247C                 call    ds:libintl_gettext
.text:00402482                 mov     ecx, ds:_iob
.text:00402488                 add     ecx, 20h ; ' '
.text:0040248B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040248F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402492                 call    fputs
.text:00402497                 mov     [esp+1Ch+Stream], offset aPPortabilityUs ; "  -P, --portability     use the POSIX o"...
.text:0040249E                 call    ds:libintl_gettext
.text:004024A4                 mov     ecx, ds:_iob
.text:004024AA                 add     ecx, 20h ; ' '
.text:004024AD                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004024B1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004024B4                 call    fputs
.text:004024B9                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004024C0                 call    ds:libintl_gettext
.text:004024C6                 mov     ecx, ds:_iob
.text:004024CC                 add     ecx, 20h ; ' '
.text:004024CF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004024D3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004024D6                 call    fputs
.text:004024DB                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:004024E2                 call    ds:libintl_gettext
.text:004024E8                 mov     ecx, ds:_iob
.text:004024EE                 add     ecx, 20h ; ' '
.text:004024F1                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004024F5                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004024F8                 call    fputs
.text:004024FD                 mov     [esp+1Ch+Stream], offset aSizeMayBeOrMay ; "\nSIZE may be (or may be an integer opt"...
.text:00402504                 call    ds:libintl_gettext
.text:0040250A                 mov     ecx, ds:_iob
.text:00402510                 add     ecx, 20h ; ' '
.text:00402513                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402517                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040251A                 call    fputs
.text:0040251F                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402526                 call    ds:libintl_gettext
.text:0040252C                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402534                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402537                 call    printf
.text:0040253C                 jmp     loc_4023E8
.text:0040253C sub_4023B0      endp
.text:0040253C
.text:0040253C ; ---------------------------------------------------------------------------
.text:00402541 aFilesystemType db 'Filesystem    Type',0
.text:00402541                                         ; DATA XREF: sub_402660+17↓o
.text:00402554 aSizeUsedAvailU db '    Size  Used Avail Use%%',0
.text:00402554                                         ; DATA XREF: sub_402660+53↓o
.text:0040256F aMountedOn      db ' Mounted on',0Ah,0  ; DATA XREF: sub_402660:loc_4026CE↓o
.text:0040257C aSizeUsedAvailU_0 db '     Size   Used  Avail Use%%',0
.text:0040257C                                         ; DATA XREF: sub_402660:loc_4026F0↓o
.text:0040259A                 align 10h
.text:004025A0 a4sBlocksUsedAv db ' %4s-blocks      Used Available Use%%',0
.text:004025A0                                         ; DATA XREF: sub_402660+1AD↓o
.text:004025C6                 align 20h
.text:004025E0 a4sBlocksUsedAv_0 db ' %4s-blocks      Used Available Capacity',0
.text:004025E0                                         ; DATA XREF: sub_402660+1ED↓o
.text:00402609                 align 20h
.text:00402620 aInodesIusedIfr db '    Inodes   IUsed   IFree IUse%%',0
.text:00402620                                         ; DATA XREF: sub_402660:loc_402856↓o
.text:00402642 aFilesystem     db 'Filesystem        ',0
.text:00402642                                         ; DATA XREF: sub_402660:loc_402862↓o
.text:00402655                 align 10h
.text:00402660
.text:00402660 ; =============== S U B R O U T I N E =======================================
.text:00402660
.text:00402660
.text:00402660 sub_402660      proc near               ; CODE XREF: sub_401B70+5FC↑p
.text:00402660                                         ; sub_401B70:loc_402249↑p
.text:00402660
.text:00402660 Buffer          = dword ptr -0CCh
.text:00402660 Stream          = dword ptr -0C8h
.text:00402660 var_C4          = dword ptr -0C4h
.text:00402660 var_C0          = dword ptr -0C0h
.text:00402660 var_BC          = dword ptr -0BCh
.text:00402660 var_B8          = dword ptr -0B8h
.text:00402660 var_B4          = dword ptr -0B4h
.text:00402660 var_B0          = dword ptr -0B0h
.text:00402660 var_AC          = dword ptr -0ACh
.text:00402660 var_A8          = dword ptr -0A8h
.text:00402660 var_A1          = byte ptr -0A1h
.text:00402660 var_A0          = dword ptr -0A0h
.text:00402660 var_9C          = byte ptr -9Ch
.text:00402660
.text:00402660                 push    ebp
.text:00402661                 push    edi
.text:00402662                 push    esi
.text:00402663                 push    ebx
.text:00402664                 sub     esp, 0BCh
.text:0040266A                 cmp     ds:byte_4140C0, 0
.text:00402671                 jz      loc_402862
.text:00402677                 mov     [esp+0CCh+Buffer], offset aFilesystemType ; "Filesystem    Type"
.text:0040267E
.text:0040267E loc_40267E:                             ; CODE XREF: sub_402660+209↓j
.text:0040267E                 call    ds:libintl_gettext
.text:00402684                 mov     ecx, ds:_iob
.text:0040268A                 add     ecx, 20h ; ' '
.text:0040268D                 mov     [esp+0CCh+Stream], ecx ; Stream
.text:00402691                 mov     [esp+0CCh+Buffer], eax ; Buffer
.text:00402694                 call    fputs
.text:00402699                 cmp     ds:byte_414000, 0
.text:004026A0                 jnz     loc_402856
.text:004026A6                 mov     eax, ds:dword_414040
.text:004026AB                 test    al, 10h
.text:004026AD                 jz      short loc_402700
.text:004026AF                 test    al, 20h
.text:004026B1                 jz      short loc_4026F0
.text:004026B3                 mov     [esp+0CCh+Buffer], offset aSizeUsedAvailU ; "    Size  Used Avail Use%%"
.text:004026BA                 lea     esi, [esi+0]
.text:004026C0
.text:004026C0 loc_4026C0:                             ; CODE XREF: sub_402660+97↓j
.text:004026C0                                         ; sub_402660+1FD↓j
.text:004026C0                 call    ds:libintl_gettext
.text:004026C6                 mov     [esp+0CCh+Buffer], eax ; Format
.text:004026C9                 call    printf
.text:004026CE
.text:004026CE loc_4026CE:                             ; CODE XREF: sub_402660+1C8↓j
.text:004026CE                 mov     [esp+0CCh+Buffer], offset aMountedOn ; " Mounted on\n"
.text:004026D5                 call    ds:libintl_gettext
.text:004026DB                 mov     [esp+0CCh+Buffer], eax ; Format
.text:004026DE                 call    printf
.text:004026E3                 add     esp, 0BCh
.text:004026E9                 pop     ebx
.text:004026EA                 pop     esi
.text:004026EB                 pop     edi
.text:004026EC                 pop     ebp
.text:004026ED                 retn
.text:004026ED ; ---------------------------------------------------------------------------
.text:004026EE                 align 10h
.text:004026F0
.text:004026F0 loc_4026F0:                             ; CODE XREF: sub_402660+51↑j
.text:004026F0                 mov     [esp+0CCh+Buffer], offset aSizeUsedAvailU_0 ; "     Size   Used  Avail Use%%"
.text:004026F7                 jmp     short loc_4026C0
.text:004026F7 ; ---------------------------------------------------------------------------
.text:004026F9                 align 10h
.text:00402700
.text:00402700 loc_402700:                             ; CODE XREF: sub_402660+4D↑j
.text:00402700                 cmp     ds:byte_414060, 0
.text:00402707                 jnz     loc_40282D
.text:0040270D                 mov     esi, ds:dword_414050
.text:00402713                 and     eax, 124h
.text:00402718                 mov     ecx, ds:dword_414054
.text:0040271E                 or      eax, 98h
.text:00402723                 mov     edi, esi
.text:00402725                 mov     ebx, esi
.text:00402727                 mov     [esp+0CCh+var_AC], esi
.text:0040272B                 mov     ebp, ecx
.text:0040272D                 mov     esi, ecx
.text:0040272F                 mov     [esp+0CCh+var_A0], eax
.text:00402733                 mov     [esp+0CCh+var_A8], ecx
.text:00402737                 mov     esi, esi
.text:00402739                 lea     edi, [edi+0]
.text:00402740
.text:00402740 loc_402740:                             ; CODE XREF: sub_402660+142↓j
.text:00402740                 mov     [esp+0CCh+Buffer], ebx
.text:00402743                 mov     [esp+0CCh+Stream], esi
.text:00402747                 mov     [esp+0CCh+var_C4], 3E8h
.text:0040274F                 mov     [esp+0CCh+var_C0], 0
.text:00402757                 call    sub_411730
.text:0040275C                 mov     [esp+0CCh+Buffer], ebx
.text:0040275F                 or      eax, edx
.text:00402761                 setz    [esp+0CCh+var_A1]
.text:00402766                 mov     [esp+0CCh+Stream], esi
.text:0040276A                 mov     [esp+0CCh+var_C4], 3E8h
.text:00402772                 mov     [esp+0CCh+var_C0], 0
.text:0040277A                 call    sub_4118B0
.text:0040277F                 mov     esi, edx
.text:00402781                 xor     ecx, ecx
.text:00402783                 mov     edx, edi
.text:00402785                 and     edx, 3FFh
.text:0040278B                 mov     ebx, eax
.text:0040278D                 or      edx, ecx
.text:0040278F                 setz    al
.text:00402792                 shrd    edi, ebp, 0Ah
.text:00402796                 shr     ebp, 0Ah
.text:00402799                 test    al, al
.text:0040279B                 jz      short loc_4027A4
.text:0040279D                 cmp     [esp+0CCh+var_A1], 0
.text:004027A2                 jnz     short loc_402740
.text:004027A4
.text:004027A4 loc_4027A4:                             ; CODE XREF: sub_402660+13B↑j
.text:004027A4                 cmp     [esp+0CCh+var_A1], al
.text:004027A8                 jnb     short loc_4027AF
.text:004027AA                 or      [esp+0CCh+var_A0], 20h
.text:004027AF
.text:004027AF loc_4027AF:                             ; CODE XREF: sub_402660+148↑j
.text:004027AF                 cmp     al, [esp+0CCh+var_A1]
.text:004027B3                 jnb     short loc_4027BA
.text:004027B5                 and     [esp+0CCh+var_A0], 0FFFFFFDFh
.text:004027BA
.text:004027BA loc_4027BA:                             ; CODE XREF: sub_402660+153↑j
.text:004027BA                 test    byte ptr [esp+0CCh+var_A0], 20h
.text:004027BF                 jnz     short loc_4027C9
.text:004027C1                 or      [esp+0CCh+var_A0], 100h
.text:004027C9
.text:004027C9 loc_4027C9:                             ; CODE XREF: sub_402660+15F↑j
.text:004027C9                 mov     [esp+0CCh+var_B4], 1 ; int
.text:004027D1                 mov     eax, [esp+0CCh+var_A0]
.text:004027D5                 lea     ebx, [esp+0CCh+var_9C]
.text:004027D9                 mov     [esp+0CCh+var_C4], ebx ; Buffer
.text:004027DD                 mov     ebp, [esp+0CCh+var_AC]
.text:004027E1                 mov     edi, [esp+0CCh+var_A8]
.text:004027E5                 mov     [esp+0CCh+var_B0], 0 ; int
.text:004027ED                 mov     [esp+0CCh+var_BC], 1 ; int
.text:004027F5                 mov     [esp+0CCh+var_B8], 0 ; int
.text:004027FD                 mov     [esp+0CCh+var_C0], eax ; int
.text:00402801                 mov     [esp+0CCh+Buffer], ebp ; int
.text:00402804                 mov     [esp+0CCh+Stream], edi ; int
.text:00402808                 call    sub_405610
.text:0040280D                 mov     [esp+0CCh+Buffer], offset a4sBlocksUsedAv ; " %4s-blocks      Used Available Use%%"
.text:00402814
.text:00402814 loc_402814:                             ; CODE XREF: sub_402660+1F4↓j
.text:00402814                 mov     ebx, eax
.text:00402816                 call    ds:libintl_gettext
.text:0040281C                 mov     [esp+0CCh+Stream], ebx
.text:00402820                 mov     [esp+0CCh+Buffer], eax ; Format
.text:00402823                 call    printf
.text:00402828                 jmp     loc_4026CE
.text:0040282D ; ---------------------------------------------------------------------------
.text:0040282D
.text:0040282D loc_40282D:                             ; CODE XREF: sub_402660+A7↑j
.text:0040282D                 mov     edx, ds:dword_414050
.text:00402833                 lea     ebx, [esp+0CCh+var_9C]
.text:00402837                 mov     ecx, ds:dword_414054
.text:0040283D                 mov     [esp+0CCh+var_C4], ebx
.text:00402841                 mov     [esp+0CCh+Buffer], edx
.text:00402844                 mov     [esp+0CCh+Stream], ecx
.text:00402848                 call    sub_406930
.text:0040284D                 mov     [esp+0CCh+Buffer], offset a4sBlocksUsedAv_0 ; " %4s-blocks      Used Available Capacit"...
.text:00402854                 jmp     short loc_402814
.text:00402856 ; ---------------------------------------------------------------------------
.text:00402856
.text:00402856 loc_402856:                             ; CODE XREF: sub_402660+40↑j
.text:00402856                 mov     [esp+0CCh+Buffer], offset aInodesIusedIfr ; "    Inodes   IUsed   IFree IUse%%"
.text:0040285D                 jmp     loc_4026C0
.text:00402862 ; ---------------------------------------------------------------------------
.text:00402862
.text:00402862 loc_402862:                             ; CODE XREF: sub_402660+11↑j
.text:00402862                 mov     [esp+0CCh+Buffer], offset aFilesystem ; "Filesystem        "
.text:00402869                 jmp     loc_40267E
.text:00402869 sub_402660      endp
.text:00402869
.text:00402869 ; ---------------------------------------------------------------------------
.text:0040286E ; const char Format[]
.text:0040286E Format          db '%s',0Ah             ; DATA XREF: sub_4028D0+180↓o
.text:0040286E                 db '%18s  ',0
.text:00402878 asc_402878      db '-',0                ; DATA XREF: sub_4028D0:loc_402B40↓o
.text:00402878                                         ; sub_4028D0:loc_402BCC↓o ...
.text:0040287A ; const char aSSS[]
.text:0040287A aSSS            db ' %*s %*s %*s ',0    ; DATA XREF: sub_4028D0+3B2↓o
.text:00402888 ; const char a0f[]
.text:00402888 a0f             db '%*.0f%%',0          ; DATA XREF: sub_4028D0+57C↓o
.text:00402890 ; const char aS_0[]
.text:00402890 aS_0            db ' %s',0              ; DATA XREF: sub_4028D0+598↓o
.text:00402894 asc_402894      db '- ',0               ; DATA XREF: sub_4028D0+5F4↓o
.text:00402897 ; const char aS_1[]
.text:00402897 aS_1            db '%*s',0              ; DATA XREF: sub_4028D0+603↓o
.text:0040289B aSS             db '%s %s',0            ; DATA XREF: sub_4028D0+856↓o
.text:004028A1 ; const char aSS_0[]
.text:004028A1 aSS_0           db '%s%*s  ',0          ; DATA XREF: sub_4028D0+875↓o
.text:004028A9 ; const char a20s[]
.text:004028A9 a20s            db '%-20s',0            ; DATA XREF: sub_4028D0+8A0↓o
.text:004028AF aS20s           db '%s',0Ah             ; DATA XREF: sub_4028D0+8BD↓o
.text:004028AF                 db '%20s',0
.text:004028B7                 align 4
.text:004028B8 flt_4028B8      dd -1.0                 ; DATA XREF: sub_4028D0+11↓r
.text:004028BC flt_4028BC      dd 1.8446744e19         ; DATA XREF: sub_4028D0:loc_402EFA↓r
.text:004028BC                                         ; sub_4028D0:loc_402F24↓r ...
.text:004028C0 flt_4028C0      dd 100.0                ; DATA XREF: sub_4028D0:loc_402D96↓r
.text:004028C4                 align 10h
.text:004028D0
.text:004028D0 ; =============== S U B R O U T I N E =======================================
.text:004028D0
.text:004028D0
.text:004028D0 ; int __cdecl sub_4028D0(char *Str, LPCSTR, char *, char, char)
.text:004028D0 sub_4028D0      proc near               ; CODE XREF: sub_401B70+6CF↑p
.text:004028D0                                         ; sub_401B70+719↑p ...
.text:004028D0
.text:004028D0 var_274         = qword ptr -274h
.text:004028D0 Str1            = dword ptr -26Ch
.text:004028D0 Str2            = dword ptr -268h
.text:004028D0 Buffer          = dword ptr -264h
.text:004028D0 var_25C         = dword ptr -25Ch
.text:004028D0 var_258         = dword ptr -258h
.text:004028D0 var_254         = dword ptr -254h
.text:004028D0 var_250         = dword ptr -250h
.text:004028D0 var_244         = dword ptr -244h
.text:004028D0 var_240         = dword ptr -240h
.text:004028D0 var_23C         = dword ptr -23Ch
.text:004028D0 var_238         = dword ptr -238h
.text:004028D0 var_234         = dword ptr -234h
.text:004028D0 var_230         = dword ptr -230h
.text:004028D0 var_22C         = dword ptr -22Ch
.text:004028D0 var_228         = dword ptr -228h
.text:004028D0 var_224         = dword ptr -224h
.text:004028D0 var_220         = dword ptr -220h
.text:004028D0 var_21C         = dword ptr -21Ch
.text:004028D0 var_218         = dword ptr -218h
.text:004028D0 var_214         = qword ptr -214h
.text:004028D0 var_205         = byte ptr -205h
.text:004028D0 var_204         = dword ptr -204h
.text:004028D0 var_1F5         = byte ptr -1F5h
.text:004028D0 var_1F4         = dword ptr -1F4h
.text:004028D0 var_1F0         = dword ptr -1F0h
.text:004028D0 var_1EC         = dword ptr -1ECh
.text:004028D0 var_1E8         = dword ptr -1E8h
.text:004028D0 var_1E4         = dword ptr -1E4h
.text:004028D0 var_1E0         = dword ptr -1E0h
.text:004028D0 var_1DC         = dword ptr -1DCh
.text:004028D0 var_1D8         = word ptr -1D8h
.text:004028D0 var_1D6         = word ptr -1D6h
.text:004028D0 var_1D4         = qword ptr -1D4h
.text:004028D0 var_1CC         = byte ptr -1CCh
.text:004028D0 var_153         = byte ptr -153h
.text:004028D0 var_DA          = byte ptr -0DAh
.text:004028D0 var_5C          = dword ptr -5Ch
.text:004028D0 var_58          = dword ptr -58h
.text:004028D0 var_54          = dword ptr -54h
.text:004028D0 var_50          = dword ptr -50h
.text:004028D0 var_4C          = dword ptr -4Ch
.text:004028D0 var_48          = dword ptr -48h
.text:004028D0 var_44          = dword ptr -44h
.text:004028D0 var_40          = dword ptr -40h
.text:004028D0 var_3C          = byte ptr -3Ch
.text:004028D0 var_34          = dword ptr -34h
.text:004028D0 var_30          = dword ptr -30h
.text:004028D0 var_2C          = dword ptr -2Ch
.text:004028D0 var_28          = dword ptr -28h
.text:004028D0 Str             = dword ptr  4
.text:004028D0 arg_4           = dword ptr  8
.text:004028D0 arg_8           = dword ptr  0Ch
.text:004028D0 arg_C           = byte ptr  10h
.text:004028D0 arg_10          = byte ptr  14h
.text:004028D0
.text:004028D0                 push    ebp
.text:004028D1                 push    edi
.text:004028D2                 push    esi
.text:004028D3                 push    ebx
.text:004028D4                 sub     esp, 25Ch
.text:004028DA                 mov     edi, [esp+26Ch+Str]
.text:004028E1                 fld     ds:flt_4028B8
.text:004028E7                 mov     esi, [esp+26Ch+arg_8]
.text:004028EE                 cmp     ds:byte_414020, 0
.text:004028F5                 movzx   edx, [esp+26Ch+arg_C]
.text:004028FD                 movzx   eax, [esp+26Ch+arg_10]
.text:00402905                 fstp    [esp+26Ch+var_214]
.text:00402909                 jz      short loc_40290F
.text:0040290B                 test    al, al
.text:0040290D                 jnz     short loc_402960
.text:0040290F
.text:0040290F loc_40290F:                             ; CODE XREF: sub_4028D0+39↑j
.text:0040290F                 cmp     ds:byte_414030, 0
.text:00402916                 jnz     short loc_402930
.text:00402918                 cmp     ds:byte_414010, 0
.text:0040291F                 jnz     short loc_402930
.text:00402921                 test    dl, dl
.text:00402923                 jnz     short loc_402960
.text:00402925                 lea     esi, [esi+0]
.text:00402929                 lea     edi, [edi+0]
.text:00402930
.text:00402930 loc_402930:                             ; CODE XREF: sub_4028D0+46↑j
.text:00402930                                         ; sub_4028D0+4F↑j
.text:00402930                 mov     eax, ds:dword_414090
.text:00402935                 test    eax, eax
.text:00402937                 jz      short loc_402970
.text:00402939                 test    esi, esi
.text:0040293B                 jz      short loc_402970
.text:0040293D                 mov     ebx, eax
.text:0040293F                 nop
.text:00402940
.text:00402940 loc_402940:                             ; CODE XREF: sub_4028D0+87↓j
.text:00402940                 mov     edx, [ebx]
.text:00402942                 mov     [esp+26Ch+Str1], esi ; Str1
.text:00402945                 mov     [esp+26Ch+Str2], edx ; Str2
.text:00402949                 call    strcmp
.text:0040294E                 test    eax, eax
.text:00402950                 jz      short loc_402970
.text:00402952                 mov     ebx, [ebx+4]
.text:00402955                 test    ebx, ebx
.text:00402957                 jnz     short loc_402940
.text:00402959                 lea     esi, [esi+0]
.text:00402960
.text:00402960 loc_402960:                             ; CODE XREF: sub_4028D0+3D↑j
.text:00402960                                         ; sub_4028D0+53↑j ...
.text:00402960                 add     esp, 25Ch
.text:00402966                 pop     ebx
.text:00402967                 pop     esi
.text:00402968                 pop     edi
.text:00402969                 pop     ebp
.text:0040296A                 retn
.text:0040296A ; ---------------------------------------------------------------------------
.text:0040296B                 align 10h
.text:00402970
.text:00402970 loc_402970:                             ; CODE XREF: sub_4028D0+67↑j
.text:00402970                                         ; sub_4028D0+6B↑j ...
.text:00402970                 mov     eax, ds:dword_4140A0
.text:00402975                 test    eax, eax
.text:00402977                 jz      short loc_4029A0
.text:00402979                 test    esi, esi
.text:0040297B                 jz      short loc_4029A0
.text:0040297D                 mov     ebx, eax
.text:0040297F                 nop
.text:00402980
.text:00402980 loc_402980:                             ; CODE XREF: sub_4028D0+C7↓j
.text:00402980                 mov     edx, [ebx]
.text:00402982                 mov     [esp+26Ch+Str1], esi ; Str1
.text:00402985                 mov     [esp+26Ch+Str2], edx ; Str2
.text:00402989                 call    strcmp
.text:0040298E                 test    eax, eax
.text:00402990                 jz      short loc_402960
.text:00402992                 mov     ebx, [ebx+4]
.text:00402995                 test    ebx, ebx
.text:00402997                 jnz     short loc_402980
.text:00402999                 lea     esi, [esi+0]
.text:004029A0
.text:004029A0 loc_4029A0:                             ; CODE XREF: sub_4028D0+A7↑j
.text:004029A0                                         ; sub_4028D0+AB↑j
.text:004029A0                 mov     ebx, [esp+26Ch+arg_4]
.text:004029A7                 test    ebx, ebx
.text:004029A9                 jz      loc_4031EA
.text:004029AF
.text:004029AF loc_4029AF:                             ; CODE XREF: sub_4028D0+91C↓j
.text:004029AF                 mov     [esp+26Ch+Str2], edi ; int
.text:004029B3                 lea     ecx, [esp+26Ch+var_5C]
.text:004029BA                 mov     [esp+26Ch+Buffer], ecx ; int
.text:004029BE                 mov     [esp+26Ch+Str1], ebx ; LPCSTR
.text:004029C1                 call    sub_403960
.text:004029C6                 test    eax, eax
.text:004029C8                 jnz     loc_4031AD
.text:004029CE                 mov     ecx, [esp+26Ch+var_50]
.text:004029D5                 mov     ebp, [esp+26Ch+var_54]
.text:004029DC                 mov     eax, ecx
.text:004029DE                 or      eax, ebp
.text:004029E0                 jnz     short loc_402A00
.text:004029E2                 cmp     ds:byte_414010, 0
.text:004029E9                 jnz     short loc_402A00
.text:004029EB                 cmp     ds:byte_414030, 0
.text:004029F2                 jz      loc_402960
.text:004029F8                 nop
.text:004029F9                 lea     esi, [esi+0]
.text:00402A00
.text:00402A00 loc_402A00:                             ; CODE XREF: sub_4028D0+110↑j
.text:00402A00                                         ; sub_4028D0+119↑j
.text:00402A00                 test    edi, edi
.text:00402A02                 jz      loc_4031A3
.text:00402A08
.text:00402A08 loc_402A08:                             ; CODE XREF: sub_4028D0+8D8↓j
.text:00402A08                 test    esi, esi
.text:00402A0A                 jz      loc_403199
.text:00402A10
.text:00402A10 loc_402A10:                             ; CODE XREF: sub_4028D0+8CE↓j
.text:00402A10                 cmp     ds:byte_4140C0, 0
.text:00402A17                 jz      loc_403156
.text:00402A1D                 mov     [esp+26Ch+Str1], edi ; Str
.text:00402A20                 call    strlen
.text:00402A25                 mov     [esp+26Ch+Str1], esi ; Str
.text:00402A28                 mov     ebx, eax
.text:00402A2A                 call    strlen
.text:00402A2F                 lea     edx, [eax+ebx]
.text:00402A32                 cmp     edx, 11h
.text:00402A35                 jbe     loc_403132
.text:00402A3B                 cmp     ds:byte_414060, 0
.text:00402A42                 jnz     loc_40311E
.text:00402A48                 mov     [esp+26Ch+Buffer], esi
.text:00402A4C                 mov     [esp+26Ch+Str2], edi
.text:00402A50                 mov     [esp+26Ch+Str1], offset Format ; "%s\n%18s  "
.text:00402A57
.text:00402A57 loc_402A57:                             ; CODE XREF: sub_4028D0+85D↓j
.text:00402A57                                         ; sub_4028D0+8C4↓j
.text:00402A57                 call    printf
.text:00402A5C
.text:00402A5C loc_402A5C:                             ; CODE XREF: sub_4028D0+881↓j
.text:00402A5C                                         ; sub_4028D0+8AC↓j
.text:00402A5C                 cmp     ds:byte_414000, 0
.text:00402A63                 jz      loc_40305C
.text:00402A69                 mov     [esp+26Ch+var_1F4], 1
.text:00402A71                 mov     ebp, 5
.text:00402A76                 mov     edi, 1
.text:00402A7B                 mov     [esp+26Ch+var_1E4], ebp
.text:00402A82                 xor     ebx, ebx
.text:00402A84                 mov     esi, [esp+26Ch+var_30]
.text:00402A8B                 mov     [esp+26Ch+var_1EC], edi
.text:00402A92                 mov     ebp, [esp+26Ch+var_28]
.text:00402A99                 mov     ecx, 7
.text:00402A9E                 mov     [esp+26Ch+var_1E8], ebx
.text:00402AA5                 mov     edi, [esp+26Ch+var_2C]
.text:00402AAC                 mov     ebx, [esp+26Ch+var_34]
.text:00402AB3                 mov     [esp+26Ch+var_1E0], ecx
.text:00402ABA                 mov     [esp+26Ch+var_1F0], 0
.text:00402AC2                 mov     [esp+26Ch+var_1F5], 0
.text:00402AC7                 mov     [esp+26Ch+var_244], edi
.text:00402ACB                 mov     [esp+26Ch+var_240], ebp
.text:00402ACF
.text:00402ACF loc_402ACF:                             ; CODE XREF: sub_4028D0+849↓j
.text:00402ACF                 mov     [esp+26Ch+var_204], 0FFFFFFFFh
.text:00402AD7                 mov     ecx, esi
.text:00402AD9                 mov     eax, ebx
.text:00402ADB                 mov     [esp+26Ch+var_204+4], 0FFFFFFFFh
.text:00402AE3                 not     ecx
.text:00402AE5                 not     eax
.text:00402AE7                 mov     [esp+26Ch+var_218], ecx
.text:00402AEB                 or      ecx, eax
.text:00402AED                 mov     [esp+26Ch+var_205], 0
.text:00402AF2                 mov     [esp+26Ch+var_21C], eax
.text:00402AF6                 jz      short loc_402B40
.text:00402AF8                 mov     ecx, [esp+26Ch+var_244]
.text:00402AFC                 mov     eax, [esp+26Ch+var_240]
.text:00402B00                 and     ecx, eax
.text:00402B02                 inc     ecx
.text:00402B03                 jz      short loc_402B40
.text:00402B05                 mov     edx, ebx
.text:00402B07                 mov     ecx, esi
.text:00402B09                 sub     edx, [esp+26Ch+var_244]
.text:00402B0D                 sbb     ecx, [esp+26Ch+var_240]
.text:00402B11                 cmp     esi, [esp+26Ch+var_240]
.text:00402B15                 mov     [esp+26Ch+var_204], edx
.text:00402B19                 mov     [esp+26Ch+var_204+4], ecx
.text:00402B1D                 ja      short loc_402B40
.text:00402B1F                 jb      short loc_402B27
.text:00402B21                 cmp     ebx, [esp+26Ch+var_244]
.text:00402B25                 jnb     short loc_402B40
.text:00402B27
.text:00402B27 loc_402B27:                             ; CODE XREF: sub_4028D0+24F↑j
.text:00402B27                 neg     [esp+26Ch+var_204]
.text:00402B2B                 mov     [esp+26Ch+var_205], 1
.text:00402B30                 adc     [esp+26Ch+var_204+4], 0
.text:00402B35                 neg     [esp+26Ch+var_204+4]
.text:00402B39                 lea     esi, [esi+0]
.text:00402B40
.text:00402B40 loc_402B40:                             ; CODE XREF: sub_4028D0+226↑j
.text:00402B40                                         ; sub_4028D0+233↑j ...
.text:00402B40                 mov     [esp+26Ch+var_220], offset asc_402878 ; "-"
.text:00402B48                 mov     edx, ebp
.text:00402B4A                 mov     eax, edi
.text:00402B4C                 not     edx
.text:00402B4E                 not     eax
.text:00402B50                 lea     ecx, [esp+26Ch+var_DA]
.text:00402B57                 mov     [esp+26Ch+var_224], edx
.text:00402B5B                 or      edx, eax
.text:00402B5D                 mov     [esp+26Ch+var_228], eax
.text:00402B61                 jz      short loc_402BCC
.text:00402B63                 cmp     [esp+26Ch+var_1F5], 0
.text:00402B68                 mov     eax, [esp+26Ch+var_1F4]
.text:00402B6C                 mov     edx, [esp+26Ch+var_1F0]
.text:00402B70                 mov     [esp+26Ch+var_254], eax ; int
.text:00402B74                 mov     eax, [esp+26Ch+var_1EC]
.text:00402B7B                 mov     [esp+26Ch+var_250], edx ; int
.text:00402B7F                 mov     edx, [esp+26Ch+var_1E8]
.text:00402B86                 mov     [esp+26Ch+var_25C], eax ; int
.text:00402B8A                 movzx   eax, [esp+26Ch+var_1F5]
.text:00402B8F                 mov     [esp+26Ch+var_258], edx ; int
.text:00402B93                 mov     edx, ds:dword_414040
.text:00402B99                 mov     [esp+26Ch+Buffer+4], edx ; int
.text:00402B9D                 lea     edx, [eax+ecx]
.text:00402BA0                 mov     eax, edi
.text:00402BA2                 mov     [esp+26Ch+Buffer], edx ; Buffer
.text:00402BA6                 mov     edx, ebp
.text:00402BA8                 jz      short loc_402BB1
.text:00402BAA                 neg     eax
.text:00402BAC                 adc     edx, 0
.text:00402BAF                 neg     edx
.text:00402BB1
.text:00402BB1 loc_402BB1:                             ; CODE XREF: sub_4028D0+2D8↑j
.text:00402BB1                 mov     [esp+26Ch+Str1], eax ; int
.text:00402BB4                 mov     [esp+26Ch+Str2], edx ; int
.text:00402BB8                 call    sub_405610
.text:00402BBD                 cmp     [esp+26Ch+var_1F5], 0
.text:00402BC2                 jz      short loc_402BC8
.text:00402BC4                 dec     eax
.text:00402BC5                 mov     byte ptr [eax], 2Dh ; '-'
.text:00402BC8
.text:00402BC8 loc_402BC8:                             ; CODE XREF: sub_4028D0+2F2↑j
.text:00402BC8                 mov     [esp+26Ch+var_220], eax
.text:00402BCC
.text:00402BCC loc_402BCC:                             ; CODE XREF: sub_4028D0+291↑j
.text:00402BCC                 mov     [esp+26Ch+var_22C], offset asc_402878 ; "-"
.text:00402BD4                 mov     edx, [esp+26Ch+var_204+4]
.text:00402BD8                 lea     ecx, [esp+26Ch+var_153]
.text:00402BDF                 mov     eax, [esp+26Ch+var_204]
.text:00402BE3                 not     edx
.text:00402BE5                 not     eax
.text:00402BE7                 mov     [esp+26Ch+var_230], edx
.text:00402BEB                 or      edx, eax
.text:00402BED                 mov     [esp+26Ch+var_234], eax
.text:00402BF1                 jz      short loc_402C60
.text:00402BF3                 cmp     [esp+26Ch+var_205], 0
.text:00402BF8                 mov     eax, [esp+26Ch+var_1F4]
.text:00402BFC                 mov     edx, [esp+26Ch+var_1F0]
.text:00402C00                 mov     [esp+26Ch+var_254], eax ; int
.text:00402C04                 mov     eax, [esp+26Ch+var_1EC]
.text:00402C0B                 mov     [esp+26Ch+var_250], edx ; int
.text:00402C0F                 mov     edx, [esp+26Ch+var_1E8]
.text:00402C16                 mov     [esp+26Ch+var_25C], eax ; int
.text:00402C1A                 movzx   eax, [esp+26Ch+var_205]
.text:00402C1F                 mov     [esp+26Ch+var_258], edx ; int
.text:00402C23                 mov     edx, ds:dword_414040
.text:00402C29                 mov     [esp+26Ch+Buffer+4], edx ; int
.text:00402C2D                 lea     edx, [eax+ecx]
.text:00402C30                 mov     eax, [esp+26Ch+var_204]
.text:00402C34                 mov     [esp+26Ch+Buffer], edx ; Buffer
.text:00402C38                 mov     edx, [esp+26Ch+var_204+4]
.text:00402C3C                 jz      short loc_402C45
.text:00402C3E                 neg     eax
.text:00402C40                 adc     edx, 0
.text:00402C43                 neg     edx
.text:00402C45
.text:00402C45 loc_402C45:                             ; CODE XREF: sub_4028D0+36C↑j
.text:00402C45                 mov     [esp+26Ch+Str1], eax ; int
.text:00402C48                 mov     [esp+26Ch+Str2], edx ; int
.text:00402C4C                 call    sub_405610
.text:00402C51                 cmp     [esp+26Ch+var_205], 0
.text:00402C56                 jz      short loc_402C5C
.text:00402C58                 dec     eax
.text:00402C59                 mov     byte ptr [eax], 2Dh ; '-'
.text:00402C5C
.text:00402C5C loc_402C5C:                             ; CODE XREF: sub_4028D0+386↑j
.text:00402C5C                 mov     [esp+26Ch+var_22C], eax
.text:00402C60
.text:00402C60 loc_402C60:                             ; CODE XREF: sub_4028D0+321↑j
.text:00402C60                 mov     ecx, [esp+26Ch+var_218]
.text:00402C64                 mov     eax, offset asc_402878 ; "-"
.text:00402C69                 or      ecx, [esp+26Ch+var_21C]
.text:00402C6D                 jnz     loc_403010
.text:00402C73
.text:00402C73 loc_402C73:                             ; CODE XREF: sub_4028D0+787↓j
.text:00402C73                 mov     [esp+26Ch+Buffer], eax
.text:00402C77                 mov     esi, [esp+26Ch+var_1E0]
.text:00402C7E                 mov     ebx, [esp+26Ch+var_220]
.text:00402C82                 mov     [esp+26Ch+Str1], offset aSSS ; " %*s %*s %*s "
.text:00402C89                 mov     ecx, [esp+26Ch+var_22C]
.text:00402C8D                 mov     [esp+26Ch+var_258], esi
.text:00402C91                 mov     [esp+26Ch+var_254], ebx
.text:00402C95                 mov     [esp+26Ch+var_25C], ecx
.text:00402C99                 mov     [esp+26Ch+Buffer+4], esi
.text:00402C9D                 mov     [esp+26Ch+Str2], esi
.text:00402CA1                 call    printf
.text:00402CA6                 mov     ebx, [esp+26Ch+var_230]
.text:00402CAA                 or      ebx, [esp+26Ch+var_234]
.text:00402CAE                 jz      loc_402FF0
.text:00402CB4                 mov     edx, [esp+26Ch+var_224]
.text:00402CB8                 or      edx, [esp+26Ch+var_228]
.text:00402CBC                 jz      loc_402FF0
.text:00402CC2                 cmp     [esp+26Ch+var_205], 0
.text:00402CC7                 jnz     short loc_402D1E
.text:00402CC9                 cmp     [esp+26Ch+var_204+4], 28F5C28h
.text:00402CD1                 ja      short loc_402D13
.text:00402CD3                 jb      short loc_402CDF
.text:00402CD5                 cmp     [esp+26Ch+var_204], 0F5C28F5Ch
.text:00402CDD                 ja      short loc_402D13
.text:00402CDF
.text:00402CDF loc_402CDF:                             ; CODE XREF: sub_4028D0+403↑j
.text:00402CDF                 mov     eax, [esp+26Ch+var_204]
.text:00402CE3                 mov     edx, [esp+26Ch+var_204+4]
.text:00402CE7                 add     eax, edi
.text:00402CE9                 adc     edx, ebp
.text:00402CEB                 mov     esi, edx
.text:00402CED                 or      esi, eax
.text:00402CEF                 jz      short loc_402D13
.text:00402CF1                 cmp     edx, [esp+26Ch+var_204+4]
.text:00402CF5                 mov     ecx, 1
.text:00402CFA                 jb      short loc_402D06
.text:00402CFC                 ja      short loc_402D04
.text:00402CFE                 cmp     eax, [esp+26Ch+var_204]
.text:00402D02                 jb      short loc_402D06
.text:00402D04
.text:00402D04 loc_402D04:                             ; CODE XREF: sub_4028D0+42C↑j
.text:00402D04                 xor     ecx, ecx
.text:00402D06
.text:00402D06 loc_402D06:                             ; CODE XREF: sub_4028D0+42A↑j
.text:00402D06                                         ; sub_4028D0+432↑j
.text:00402D06                 movzx   ebx, [esp+26Ch+var_1F5]
.text:00402D0B                 cmp     ecx, ebx
.text:00402D0D                 jz      loc_402F5E
.text:00402D13
.text:00402D13 loc_402D13:                             ; CODE XREF: sub_4028D0+401↑j
.text:00402D13                                         ; sub_4028D0+40D↑j ...
.text:00402D13                 cmp     [esp+26Ch+var_205], 0
.text:00402D18                 jz      loc_402F37
.text:00402D1E
.text:00402D1E loc_402D1E:                             ; CODE XREF: sub_4028D0+3F7↑j
.text:00402D1E                 mov     ecx, [esp+26Ch+var_204]
.text:00402D22                 mov     esi, [esp+26Ch+var_204+4]
.text:00402D26                 neg     ecx
.text:00402D28                 adc     esi, 0
.text:00402D2B                 neg     esi
.text:00402D2D                 push    esi
.text:00402D2E                 push    ecx
.text:00402D2F                 fild    [esp+274h+var_274]
.text:00402D32                 add     esp, 8
.text:00402D35                 test    esi, esi
.text:00402D37                 js      loc_402F2C
.text:00402D3D
.text:00402D3D loc_402D3D:                             ; CODE XREF: sub_4028D0+662↓j
.text:00402D3D                 fstp    [esp+26Ch+var_1D4]
.text:00402D44                 fld     [esp+26Ch+var_1D4]
.text:00402D4B                 fchs
.text:00402D4D
.text:00402D4D loc_402D4D:                             ; CODE XREF: sub_4028D0+681↓j
.text:00402D4D                 cmp     [esp+26Ch+var_1F5], 0
.text:00402D52                 jz      loc_402F05
.text:00402D58                 mov     ebx, edi
.text:00402D5A                 neg     ebx
.text:00402D5C                 mov     edi, ebp
.text:00402D5E                 adc     edi, 0
.text:00402D61                 neg     edi
.text:00402D63                 push    edi
.text:00402D64                 push    ebx
.text:00402D65                 fild    [esp+274h+var_274]
.text:00402D68                 add     esp, 8
.text:00402D6B                 test    edi, edi
.text:00402D6D                 js      loc_402EFA
.text:00402D73
.text:00402D73 loc_402D73:                             ; CODE XREF: sub_4028D0+630↓j
.text:00402D73                 fstp    [esp+26Ch+var_1D4]
.text:00402D7A                 fld     [esp+26Ch+var_1D4]
.text:00402D81                 fchs
.text:00402D83
.text:00402D83 loc_402D83:                             ; CODE XREF: sub_4028D0+64F↓j
.text:00402D83                 fadd    st, st(1)
.text:00402D85                 fldz
.text:00402D87                 fxch    st(1)
.text:00402D89                 fucom   st(1)
.text:00402D8B                 fnstsw  ax
.text:00402D8D                 sahf
.text:00402D8E                 jp      short loc_402D96
.text:00402D90                 jz      loc_402EF1
.text:00402D96
.text:00402D96 loc_402D96:                             ; CODE XREF: sub_4028D0+4BE↑j
.text:00402D96                 fld     ds:flt_4028C0
.text:00402D9C                 fnstcw  [esp+26Ch+var_1D6]
.text:00402DA3                 movzx   esi, [esp+26Ch+var_1D6]
.text:00402DAB                 fmulp   st(3), st
.text:00402DAD                 fld1
.text:00402DAF                 fxch    st(3)
.text:00402DB1                 or      si, 0C00h
.text:00402DB6                 mov     [esp+26Ch+var_1D8], si
.text:00402DBE                 fstp    [esp+26Ch+var_214]
.text:00402DC2                 fdivr   [esp+26Ch+var_214]
.text:00402DC6                 fldcw   [esp+26Ch+var_1D8]
.text:00402DCD                 fist    [esp+26Ch+var_1DC]
.text:00402DD4                 fldcw   [esp+26Ch+var_1D6]
.text:00402DDB                 fstp    [esp+26Ch+var_214]
.text:00402DDF                 mov     ebp, [esp+26Ch+var_1DC]
.text:00402DE6                 push    ebp
.text:00402DE7                 fild    dword ptr [esp+270h+var_274+4]
.text:00402DEA                 add     esp, 4
.text:00402DED                 fld     [esp+26Ch+var_214]
.text:00402DF1                 fld     st(1)
.text:00402DF3                 fsub    st, st(4)
.text:00402DF5                 fxch    st(1)
.text:00402DF7                 fucom   st(1)
.text:00402DF9                 fnstsw  ax
.text:00402DFB                 fstp    st(1)
.text:00402DFD                 sahf
.text:00402DFE                 jbe     loc_402EEF
.text:00402E04                 fxch    st(3)
.text:00402E06                 fadd    st, st(1)
.text:00402E08                 fucom   st(3)
.text:00402E0A                 fnstsw  ax
.text:00402E0C                 sahf
.text:00402E0D                 jb      loc_402EEF
.text:00402E13                 fxch    st(3)
.text:00402E15                 fucomp  st(1)
.text:00402E17                 fnstsw  ax
.text:00402E19                 sahf
.text:00402E1A                 ja      loc_402EE8
.text:00402E20                 fstp    st(2)
.text:00402E22                 fadd    st(1), st
.text:00402E24
.text:00402E24 loc_402E24:                             ; CODE XREF: sub_4028D0+61A↓j
.text:00402E24                 fxch    st(1)
.text:00402E26                 fstp    [esp+26Ch+var_214]
.text:00402E2A                 lea     esi, [esi+0]
.text:00402E30
.text:00402E30 loc_402E30:                             ; CODE XREF: sub_4028D0+625↓j
.text:00402E30                                         ; sub_4028D0+722↓j
.text:00402E30                 fld     [esp+26Ch+var_214]
.text:00402E34                 fucom   st(1)
.text:00402E36                 fnstsw  ax
.text:00402E38                 fstp    st(1)
.text:00402E3A                 sahf
.text:00402E3B                 jb      loc_402EC2
.text:00402E41                 fstp    qword ptr [esp+26Ch+Buffer]
.text:00402E45                 mov     ecx, [esp+26Ch+var_1E4]
.text:00402E4C                 mov     [esp+26Ch+Str1], offset a0f ; "%*.0f%%"
.text:00402E53                 dec     ecx
.text:00402E54                 mov     [esp+26Ch+Str2], ecx
.text:00402E58                 call    printf
.text:00402E5D
.text:00402E5D loc_402E5D:                             ; CODE XREF: sub_4028D0+613↓j
.text:00402E5D                 mov     edi, [esp+26Ch+arg_4]
.text:00402E64                 test    edi, edi
.text:00402E66                 jz      short loc_402E7F
.text:00402E68                 mov     [esp+26Ch+Str1], offset aS_0 ; " %s"
.text:00402E6F                 mov     eax, [esp+26Ch+arg_4]
.text:00402E76                 mov     [esp+26Ch+Str2], eax
.text:00402E7A                 call    printf
.text:00402E7F
.text:00402E7F loc_402E7F:                             ; CODE XREF: sub_4028D0+596↑j
.text:00402E7F                 mov     ebp, ds:_iob
.text:00402E85                 mov     ebx, [ebp+24h]
.text:00402E88                 dec     ebx
.text:00402E89                 mov     [ebp+24h], ebx
.text:00402E8C                 test    ebx, ebx
.text:00402E8E                 js      short loc_402EA4
.text:00402E90                 mov     esi, ds:_iob
.text:00402E96                 mov     ecx, [esi+20h]
.text:00402E99                 mov     byte ptr [ecx], 0Ah
.text:00402E9C                 inc     dword ptr [esi+20h]
.text:00402E9F                 jmp     loc_402960
.text:00402EA4 ; ---------------------------------------------------------------------------
.text:00402EA4
.text:00402EA4 loc_402EA4:                             ; CODE XREF: sub_4028D0+5BE↑j
.text:00402EA4                 mov     [esp+26Ch+Str1], 0Ah ; Ch
.text:00402EAB                 mov     edx, ds:_iob
.text:00402EB1                 add     edx, 20h ; ' '
.text:00402EB4                 mov     [esp+26Ch+Str2], edx ; File
.text:00402EB8                 call    _flsbuf
.text:00402EBD                 jmp     loc_402960
.text:00402EC2 ; ---------------------------------------------------------------------------
.text:00402EC2
.text:00402EC2 loc_402EC2:                             ; CODE XREF: sub_4028D0+56B↑j
.text:00402EC2                 fstp    st
.text:00402EC4                 mov     [esp+26Ch+Buffer], offset asc_402894 ; "- "
.text:00402ECC                 mov     edx, [esp+26Ch+var_1E4]
.text:00402ED3                 mov     [esp+26Ch+Str1], offset aS_1 ; "%*s"
.text:00402EDA                 mov     [esp+26Ch+Str2], edx
.text:00402EDE                 call    printf
.text:00402EE3                 jmp     loc_402E5D
.text:00402EE8 ; ---------------------------------------------------------------------------
.text:00402EE8
.text:00402EE8 loc_402EE8:                             ; CODE XREF: sub_4028D0+54A↑j
.text:00402EE8                 fstp    st
.text:00402EEA                 jmp     loc_402E24
.text:00402EEF ; ---------------------------------------------------------------------------
.text:00402EEF
.text:00402EEF loc_402EEF:                             ; CODE XREF: sub_4028D0+52E↑j
.text:00402EEF                                         ; sub_4028D0+53D↑j
.text:00402EEF                 fstp    st
.text:00402EF1
.text:00402EF1 loc_402EF1:                             ; CODE XREF: sub_4028D0+4C0↑j
.text:00402EF1                 fstp    st
.text:00402EF3                 fstp    st(1)
.text:00402EF5                 jmp     loc_402E30
.text:00402EFA ; ---------------------------------------------------------------------------
.text:00402EFA
.text:00402EFA loc_402EFA:                             ; CODE XREF: sub_4028D0+49D↑j
.text:00402EFA                 fadd    ds:flt_4028BC
.text:00402F00                 jmp     loc_402D73
.text:00402F05 ; ---------------------------------------------------------------------------
.text:00402F05
.text:00402F05 loc_402F05:                             ; CODE XREF: sub_4028D0+482↑j
.text:00402F05                 push    ebp
.text:00402F06                 push    edi
.text:00402F07                 fild    [esp+274h+var_274]
.text:00402F0A                 add     esp, 8
.text:00402F0D                 test    ebp, ebp
.text:00402F0F                 js      short loc_402F24
.text:00402F11
.text:00402F11 loc_402F11:                             ; CODE XREF: sub_4028D0+65A↓j
.text:00402F11                 fstp    [esp+26Ch+var_1D4]
.text:00402F18                 fld     [esp+26Ch+var_1D4]
.text:00402F1F                 jmp     loc_402D83
.text:00402F24 ; ---------------------------------------------------------------------------
.text:00402F24
.text:00402F24 loc_402F24:                             ; CODE XREF: sub_4028D0+63F↑j
.text:00402F24                 fadd    ds:flt_4028BC
.text:00402F2A                 jmp     short loc_402F11
.text:00402F2C ; ---------------------------------------------------------------------------
.text:00402F2C
.text:00402F2C loc_402F2C:                             ; CODE XREF: sub_4028D0+467↑j
.text:00402F2C                 fadd    ds:flt_4028BC
.text:00402F32                 jmp     loc_402D3D
.text:00402F37 ; ---------------------------------------------------------------------------
.text:00402F37
.text:00402F37 loc_402F37:                             ; CODE XREF: sub_4028D0+448↑j
.text:00402F37                 fild    qword ptr [esp+26Ch+var_204]
.text:00402F3B                 mov     edx, [esp+26Ch+var_204+4]
.text:00402F3F                 test    edx, edx
.text:00402F41                 js      short loc_402F56
.text:00402F43
.text:00402F43 loc_402F43:                             ; CODE XREF: sub_4028D0+68C↓j
.text:00402F43                 fstp    [esp+26Ch+var_1D4]
.text:00402F4A                 fld     [esp+26Ch+var_1D4]
.text:00402F51                 jmp     loc_402D4D
.text:00402F56 ; ---------------------------------------------------------------------------
.text:00402F56
.text:00402F56 loc_402F56:                             ; CODE XREF: sub_4028D0+671↑j
.text:00402F56                 fadd    ds:flt_4028BC
.text:00402F5C                 jmp     short loc_402F43
.text:00402F5E ; ---------------------------------------------------------------------------
.text:00402F5E
.text:00402F5E loc_402F5E:                             ; CODE XREF: sub_4028D0+43D↑j
.text:00402F5E                 mov     edx, [esp+26Ch+var_204]
.text:00402F62                 mov     ecx, [esp+26Ch+var_204+4]
.text:00402F66                 shld    ecx, edx, 2
.text:00402F6A                 shl     edx, 2
.text:00402F6D                 add     edx, [esp+26Ch+var_204]
.text:00402F71                 adc     ecx, [esp+26Ch+var_204+4]
.text:00402F75                 mov     ebx, edx
.text:00402F77                 shl     ebx, 2
.text:00402F7A                 mov     esi, ecx
.text:00402F7C                 shld    esi, edx, 2
.text:00402F80                 add     ebx, edx
.text:00402F82                 adc     esi, ecx
.text:00402F84                 shld    esi, ebx, 2
.text:00402F88                 shl     ebx, 2
.text:00402F8B                 add     edi, [esp+26Ch+var_204]
.text:00402F8F                 mov     [esp+26Ch+Str2], esi
.text:00402F93                 mov     [esp+26Ch+Str1], ebx
.text:00402F96                 adc     ebp, [esp+26Ch+var_204+4]
.text:00402F9A                 mov     [esp+26Ch+var_23C], edi
.text:00402F9E                 mov     [esp+26Ch+Buffer], edi
.text:00402FA2                 mov     [esp+26Ch+var_238], ebp
.text:00402FA6                 mov     [esp+26Ch+Buffer+4], ebp
.text:00402FAA                 call    sub_4118B0
.text:00402FAF                 mov     [esp+26Ch+Str2], esi
.text:00402FB3                 mov     ebp, edx
.text:00402FB5                 mov     ecx, [esp+26Ch+var_238]
.text:00402FB9                 mov     [esp+26Ch+Str1], ebx
.text:00402FBC                 mov     edx, [esp+26Ch+var_23C]
.text:00402FC0                 mov     edi, eax
.text:00402FC2                 mov     [esp+26Ch+Buffer+4], ecx
.text:00402FC6                 mov     [esp+26Ch+Buffer], edx
.text:00402FCA                 call    sub_411730
.text:00402FCF                 mov     esi, edx
.text:00402FD1                 or      esi, eax
.text:00402FD3                 jz      short loc_402FFF
.text:00402FD5                 mov     ebx, edi
.text:00402FD7                 add     ebx, 1
.text:00402FDA                 mov     edi, ebp
.text:00402FDC                 adc     edi, 0
.text:00402FDF                 push    edi
.text:00402FE0                 push    ebx
.text:00402FE1                 fild    [esp+274h+var_274]
.text:00402FE4                 add     esp, 8
.text:00402FE7                 test    edi, edi
.text:00402FE9
.text:00402FE9 loc_402FE9:                             ; CODE XREF: sub_4028D0+739↓j
.text:00402FE9                 js      short loc_402FF7
.text:00402FEB
.text:00402FEB loc_402FEB:                             ; CODE XREF: sub_4028D0+72D↓j
.text:00402FEB                 fstp    [esp+26Ch+var_214]
.text:00402FEF                 nop
.text:00402FF0
.text:00402FF0 loc_402FF0:                             ; CODE XREF: sub_4028D0+3DE↑j
.text:00402FF0                                         ; sub_4028D0+3EC↑j
.text:00402FF0                 fldz
.text:00402FF2                 jmp     loc_402E30
.text:00402FF7 ; ---------------------------------------------------------------------------
.text:00402FF7
.text:00402FF7 loc_402FF7:                             ; CODE XREF: sub_4028D0:loc_402FE9↑j
.text:00402FF7                 fadd    ds:flt_4028BC
.text:00402FFD                 jmp     short loc_402FEB
.text:00402FFF ; ---------------------------------------------------------------------------
.text:00402FFF
.text:00402FFF loc_402FFF:                             ; CODE XREF: sub_4028D0+703↑j
.text:00402FFF                 push    ebp
.text:00403000                 push    edi
.text:00403001                 fild    [esp+274h+var_274]
.text:00403004                 add     esp, 8
.text:00403007                 test    ebp, ebp
.text:00403009                 jmp     short loc_402FE9
.text:00403009 ; ---------------------------------------------------------------------------
.text:0040300B                 align 10h
.text:00403010
.text:00403010 loc_403010:                             ; CODE XREF: sub_4028D0+39D↑j
.text:00403010                 mov     [esp+26Ch+Str1], ebx ; int
.text:00403013                 mov     edx, [esp+26Ch+var_1F4]
.text:00403017                 mov     ecx, [esp+26Ch+var_1F0]
.text:0040301B                 mov     [esp+26Ch+Str2], esi ; int
.text:0040301F                 mov     eax, [esp+26Ch+var_1E8]
.text:00403026                 mov     [esp+26Ch+var_254], edx ; int
.text:0040302A                 mov     edx, ds:dword_414040
.text:00403030                 mov     [esp+26Ch+var_250], ecx ; int
.text:00403034                 mov     ecx, [esp+26Ch+var_1EC]
.text:0040303B                 mov     [esp+26Ch+var_258], eax ; int
.text:0040303F                 lea     eax, [esp+26Ch+var_1CC]
.text:00403046                 mov     [esp+26Ch+var_25C], ecx ; int
.text:0040304A                 mov     [esp+26Ch+Buffer+4], edx ; int
.text:0040304E                 mov     [esp+26Ch+Buffer], eax ; Buffer
.text:00403052                 call    sub_405610
.text:00403057                 jmp     loc_402C73
.text:0040305C ; ---------------------------------------------------------------------------
.text:0040305C
.text:0040305C loc_40305C:                             ; CODE XREF: sub_4028D0+193↑j
.text:0040305C                 mov     edx, ds:dword_414040
.text:00403062                 mov     eax, 9
.text:00403067                 mov     [esp+26Ch+var_1E0], eax
.text:0040306E                 test    dl, 10h
.text:00403071                 jz      short loc_403085
.text:00403073                 xor     ebx, ebx
.text:00403075                 test    dl, 20h
.text:00403078                 setz    bl
.text:0040307B                 add     ebx, 5
.text:0040307E                 mov     [esp+26Ch+var_1E0], ebx
.text:00403085
.text:00403085 loc_403085:                             ; CODE XREF: sub_4028D0+7A1↑j
.text:00403085                 cmp     ds:byte_414060, 0
.text:0040308C                 jz      short loc_40309F
.text:0040308E                 mov     esi, 8
.text:00403093                 test    dl, 10h
.text:00403096                 mov     [esp+26Ch+var_1E4], esi
.text:0040309D                 jz      short loc_4030AB
.text:0040309F
.text:0040309F loc_40309F:                             ; CODE XREF: sub_4028D0+7BC↑j
.text:0040309F                 mov     edx, 4
.text:004030A4                 mov     [esp+26Ch+var_1E4], edx
.text:004030AB
.text:004030AB loc_4030AB:                             ; CODE XREF: sub_4028D0+7CD↑j
.text:004030AB                 movzx   eax, [esp+26Ch+var_3C]
.text:004030B3                 mov     esi, [esp+26Ch+var_5C]
.text:004030BA                 mov     ebx, [esp+26Ch+var_58]
.text:004030C1                 mov     ebp, ds:dword_414050
.text:004030C7                 mov     edi, ds:dword_414054
.text:004030CD                 mov     [esp+26Ch+var_1EC], esi
.text:004030D4                 mov     edx, [esp+26Ch+var_4C]
.text:004030DB                 mov     [esp+26Ch+var_1E8], ebx
.text:004030E2                 mov     ecx, [esp+26Ch+var_48]
.text:004030E9                 mov     [esp+26Ch+var_1F4], ebp
.text:004030ED                 mov     ebx, [esp+26Ch+var_54]
.text:004030F4                 mov     [esp+26Ch+var_1F0], edi
.text:004030F8                 mov     esi, [esp+26Ch+var_50]
.text:004030FF                 mov     [esp+26Ch+var_1F5], al
.text:00403103                 mov     edi, [esp+26Ch+var_44]
.text:0040310A                 mov     [esp+26Ch+var_244], edx
.text:0040310E                 mov     ebp, [esp+26Ch+var_40]
.text:00403115                 mov     [esp+26Ch+var_240], ecx
.text:00403119                 jmp     loc_402ACF
.text:0040311E ; ---------------------------------------------------------------------------
.text:0040311E
.text:0040311E loc_40311E:                             ; CODE XREF: sub_4028D0+172↑j
.text:0040311E                 mov     [esp+26Ch+Buffer], esi
.text:00403122                 mov     [esp+26Ch+Str2], edi
.text:00403126                 mov     [esp+26Ch+Str1], offset aSS ; "%s %s"
.text:0040312D                 jmp     loc_402A57
.text:00403132 ; ---------------------------------------------------------------------------
.text:00403132
.text:00403132 loc_403132:                             ; CODE XREF: sub_4028D0+165↑j
.text:00403132                 mov     [esp+26Ch+Buffer+4], esi
.text:00403136                 mov     esi, 12h
.text:0040313B                 sub     esi, ebx
.text:0040313D                 mov     [esp+26Ch+Buffer], esi
.text:00403141                 mov     [esp+26Ch+Str2], edi
.text:00403145                 mov     [esp+26Ch+Str1], offset aSS_0 ; "%s%*s  "
.text:0040314C                 call    printf
.text:00403151                 jmp     loc_402A5C
.text:00403156 ; ---------------------------------------------------------------------------
.text:00403156
.text:00403156 loc_403156:                             ; CODE XREF: sub_4028D0+147↑j
.text:00403156                 mov     [esp+26Ch+Str1], edi ; Str
.text:00403159                 call    strlen
.text:0040315E                 cmp     eax, 14h
.text:00403161                 jbe     short loc_40316C
.text:00403163                 cmp     ds:byte_414060, 0
.text:0040316A                 jz      short loc_403181
.text:0040316C
.text:0040316C loc_40316C:                             ; CODE XREF: sub_4028D0+891↑j
.text:0040316C                 mov     [esp+26Ch+Str2], edi
.text:00403170                 mov     [esp+26Ch+Str1], offset a20s ; "%-20s"
.text:00403177                 call    printf
.text:0040317C                 jmp     loc_402A5C
.text:00403181 ; ---------------------------------------------------------------------------
.text:00403181
.text:00403181 loc_403181:                             ; CODE XREF: sub_4028D0+89A↑j
.text:00403181                 mov     [esp+26Ch+Buffer], offset Locale
.text:00403189                 mov     [esp+26Ch+Str2], edi
.text:0040318D                 mov     [esp+26Ch+Str1], offset aS20s ; "%s\n%20s"
.text:00403194                 jmp     loc_402A57
.text:00403199 ; ---------------------------------------------------------------------------
.text:00403199
.text:00403199 loc_403199:                             ; CODE XREF: sub_4028D0+13A↑j
.text:00403199                 mov     esi, offset asc_402878 ; "-"
.text:0040319E                 jmp     loc_402A10
.text:004031A3 ; ---------------------------------------------------------------------------
.text:004031A3
.text:004031A3 loc_4031A3:                             ; CODE XREF: sub_4028D0+132↑j
.text:004031A3                 mov     edi, offset asc_402878 ; "-"
.text:004031A8                 jmp     loc_402A08
.text:004031AD ; ---------------------------------------------------------------------------
.text:004031AD
.text:004031AD loc_4031AD:                             ; CODE XREF: sub_4028D0+F8↑j
.text:004031AD                 mov     [esp+26Ch+Str1], ebx ; char *
.text:004031B0                 mov     ebx, 1
.text:004031B5                 call    sub_406900
.text:004031BA                 mov     edi, eax
.text:004031BC                 call    _errno
.text:004031C1                 mov     [esp+26Ch+Buffer+4], edi ; char
.text:004031C5                 mov     [esp+26Ch+Buffer], offset aS ; "%s"
.text:004031CD                 mov     esi, [eax]
.text:004031CF                 mov     [esp+26Ch+Str1], 0 ; Code
.text:004031D6                 mov     [esp+26Ch+Str2], esi ; ErrorMessage
.text:004031DA                 call    sub_409A70
.text:004031DF                 mov     ds:dword_414080, ebx
.text:004031E5                 jmp     loc_402960
.text:004031EA ; ---------------------------------------------------------------------------
.text:004031EA
.text:004031EA loc_4031EA:                             ; CODE XREF: sub_4028D0+D9↑j
.text:004031EA                 mov     ebx, edi
.text:004031EC                 jmp     loc_4029AF
.text:004031EC sub_4028D0      endp
.text:004031EC
.text:004031EC ; ---------------------------------------------------------------------------
.text:004031F1 aLofs           db 'lofs',0             ; DATA XREF: sub_403200+140↓o
.text:004031F1                                         ; sub_403200+2E9↓o ...
.text:004031F6                 align 10h
.text:00403200
.text:00403200 ; =============== S U B R O U T I N E =======================================
.text:00403200
.text:00403200
.text:00403200 ; int __cdecl sub_403200(LPCSTR, int)
.text:00403200 sub_403200      proc near               ; CODE XREF: sub_401B70+650↑p
.text:00403200
.text:00403200 Block           = dword ptr -0BCh
.text:00403200 Str2            = dword ptr -0B8h
.text:00403200 MaxCount        = dword ptr -0B4h
.text:00403200 var_B0          = byte ptr -0B0h
.text:00403200 var_AC          = byte ptr -0ACh
.text:00403200 var_98          = dword ptr -98h
.text:00403200 var_94          = dword ptr -94h
.text:00403200 var_90          = dword ptr -90h
.text:00403200 var_8C          = dword ptr -8Ch
.text:00403200 var_7C          = dword ptr -7Ch
.text:00403200 var_78          = dword ptr -78h
.text:00403200 arg_0           = dword ptr  4
.text:00403200 arg_4           = dword ptr  8
.text:00403200
.text:00403200                 push    ebp
.text:00403201                 push    edi
.text:00403202                 push    esi
.text:00403203                 push    ebx
.text:00403204                 sub     esp, 0ACh
.text:0040320A                 mov     edx, [esp+0BCh+arg_0]
.text:00403211                 mov     [esp+0BCh+var_90], 0
.text:00403219                 cmp     byte ptr [edx], 2Fh ; '/'
.text:0040321C                 jz      loc_40356D
.text:00403222
.text:00403222 loc_403222:                             ; CODE XREF: sub_403200+375↓j
.text:00403222                                         ; sub_403200+3F3↓j
.text:00403222                 mov     edi, [esp+0BCh+arg_0]
.text:00403229                 mov     [esp+0BCh+Block], edi ; LPCSTR
.text:0040322C                 call    sub_409D40
.text:00403231                 test    eax, eax
.text:00403233                 mov     ebx, eax
.text:00403235                 jz      short loc_40324C
.text:00403237                 cmp     byte ptr [eax], 2Fh ; '/'
.text:0040323A                 jz      loc_4034BC
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_403200+2D8↓j
.text:00403240                                         ; sub_403200+347↓j
.text:00403240                 test    ebx, ebx
.text:00403242                 jz      short loc_40324C
.text:00403244                 mov     [esp+0BCh+Block], ebx ; Block
.text:00403247                 call    free
.text:0040324C
.text:0040324C loc_40324C:                             ; CODE XREF: sub_403200+35↑j
.text:0040324C                                         ; sub_403200+42↑j
.text:0040324C                 mov     ebp, [esp+0BCh+var_90]
.text:00403250                 test    ebp, ebp
.text:00403252                 jz      loc_4032F6
.text:00403258                 mov     eax, [esp+0BCh+var_90]
.text:0040325C                 lea     edx, [esp+0BCh+var_8C]
.text:00403260                 mov     [esp+0BCh+Str2], edx ; int
.text:00403264                 mov     ebx, [eax+4]
.text:00403267                 mov     [esp+0BCh+Block], ebx ; char *
.text:0040326A                 call    sub_40B410
.text:0040326F                 test    eax, eax
.text:00403271                 jnz     short loc_4032A0
.text:00403273                 mov     ebx, [esp+0BCh+arg_4]
.text:0040327A                 mov     edx, [esp+0BCh+var_78]
.text:0040327E                 mov     eax, [esp+0BCh+var_7C]
.text:00403282                 mov     edi, [ebx+10h]
.text:00403285                 mov     ecx, [ebx+14h]
.text:00403288                 mov     ebp, edx
.text:0040328A                 xor     edi, eax
.text:0040328C                 xor     ebp, ecx
.text:0040328E                 or      ebp, edi
.text:00403290                 jz      short loc_4032A8
.text:00403292                 lea     esi, [esi+0]
.text:00403299                 lea     edi, [edi+0]
.text:004032A0
.text:004032A0 loc_4032A0:                             ; CODE XREF: sub_403200+71↑j
.text:004032A0                 mov     [esp+0BCh+var_90], 0
.text:004032A8
.text:004032A8 loc_4032A8:                             ; CODE XREF: sub_403200+90↑j
.text:004032A8                 mov     esi, [esp+0BCh+var_90]
.text:004032AC                 test    esi, esi
.text:004032AE                 jz      short loc_4032F6
.text:004032B0
.text:004032B0 loc_4032B0:                             ; CODE XREF: sub_403200+1D1↓j
.text:004032B0                                         ; sub_403200+3ED↓j
.text:004032B0                 mov     edi, [esp+0BCh+var_90]
.text:004032B4                 test    byte ptr [edi+18h], 2
.text:004032B8                 mov     edi, [esp+0BCh+var_90]
.text:004032BC                 setnz   bl
.text:004032BF                 xor     edx, edx
.text:004032C1                 movzx   ebp, bl
.text:004032C4                 mov     dword ptr [esp+0BCh+var_AC], ebp ; char
.text:004032C8                 test    byte ptr [edi+18h], 1
.text:004032CC                 setnz   dl
.text:004032CF                 mov     dword ptr [esp+0BCh+var_B0], edx ; char
.text:004032D3                 mov     ecx, [edi+8]
.text:004032D6                 mov     [esp+0BCh+MaxCount], ecx ; char *
.text:004032DA                 mov     esi, [edi+4]
.text:004032DD                 mov     [esp+0BCh+Str2], esi ; LPCSTR
.text:004032E1                 mov     ebx, [edi]
.text:004032E3                 mov     [esp+0BCh+Block], ebx ; Str
.text:004032E6                 call    sub_4028D0
.text:004032EB
.text:004032EB loc_4032EB:                             ; CODE XREF: sub_403200+1F5↓j
.text:004032EB                                         ; sub_403200+22B↓j
.text:004032EB                 add     esp, 0ACh
.text:004032F1                 pop     ebx
.text:004032F2                 pop     esi
.text:004032F3                 pop     edi
.text:004032F4                 pop     ebp
.text:004032F5                 retn
.text:004032F6 ; ---------------------------------------------------------------------------
.text:004032F6
.text:004032F6 loc_4032F6:                             ; CODE XREF: sub_403200+52↑j
.text:004032F6                                         ; sub_403200+AE↑j
.text:004032F6                 mov     ebp, ds:dword_4140B0
.text:004032FC                 test    ebp, ebp
.text:004032FE                 jz      loc_4033CB
.text:00403304                 lea     esi, [esi+0]
.text:0040330A                 lea     edi, [edi+0]
.text:00403310
.text:00403310 loc_403310:                             ; CODE XREF: sub_403200+1C5↓j
.text:00403310                 mov     ebx, [ebp+10h]
.text:00403313                 mov     esi, [ebp+14h]
.text:00403316                 mov     edi, ebx
.text:00403318                 and     edi, esi
.text:0040331A                 inc     edi
.text:0040331B                 jz      loc_403436
.text:00403321
.text:00403321 loc_403321:                             ; CODE XREF: sub_403200+25F↓j
.text:00403321                                         ; sub_403200+2B7↓j
.text:00403321                 mov     eax, [esp+0BCh+arg_4]
.text:00403328                 mov     edx, [eax+14h]
.text:0040332B                 mov     edi, [eax+10h]
.text:0040332E                 mov     eax, edx
.text:00403330                 xor     eax, esi
.text:00403332                 xor     edi, ebx
.text:00403334                 or      eax, edi
.text:00403336                 jnz     loc_4033C0
.text:0040333C                 cld
.text:0040333D                 mov     esi, [ebp+8]
.text:00403340                 mov     edi, offset aLofs ; "lofs"
.text:00403345                 mov     ecx, 5
.text:0040334A                 repe cmpsb
.text:0040334C                 jz      short loc_4033C0
.text:0040334E                 mov     esi, [esp+0BCh+var_90]
.text:00403352                 test    esi, esi
.text:00403354                 jz      short loc_403370
.text:00403356                 mov     ebx, [esp+0BCh+var_90]
.text:0040335A                 test    byte ptr [ebx+18h], 1
.text:0040335E                 jnz     short loc_403370
.text:00403360                 test    byte ptr [ebp+18h], 1
.text:00403364                 jnz     short loc_4033C0
.text:00403366                 lea     esi, [esi+0]
.text:00403369                 lea     edi, [edi+0]
.text:00403370
.text:00403370 loc_403370:                             ; CODE XREF: sub_403200+154↑j
.text:00403370                                         ; sub_403200+15E↑j
.text:00403370                 lea     edx, [esp+0BCh+var_8C]
.text:00403374                 mov     [esp+0BCh+Str2], edx ; int
.text:00403378                 mov     ecx, [ebp+4]
.text:0040337B                 mov     [esp+0BCh+Block], ecx ; char *
.text:0040337E                 call    sub_40B410
.text:00403383                 test    eax, eax
.text:00403385                 jnz     short loc_4033A3
.text:00403387                 mov     edx, [esp+0BCh+var_78]
.text:0040338B                 mov     esi, [esp+0BCh+var_7C]
.text:0040338F                 mov     edi, [ebp+10h]
.text:00403392                 mov     ecx, [ebp+14h]
.text:00403395                 mov     eax, edx
.text:00403397                 xor     edi, esi
.text:00403399                 xor     eax, ecx
.text:0040339B                 or      eax, edi
.text:0040339D                 jz      loc_403430
.text:004033A3
.text:004033A3 loc_4033A3:                             ; CODE XREF: sub_403200+185↑j
.text:004033A3                 mov     dword ptr [ebp+10h], 0FFFFFFFEh
.text:004033AA                 mov     dword ptr [ebp+14h], 0FFFFFFFFh
.text:004033B1                 jmp     short loc_4033C0
.text:004033B1 ; ---------------------------------------------------------------------------
.text:004033B3                 align 10h
.text:004033C0
.text:004033C0 loc_4033C0:                             ; CODE XREF: sub_403200+136↑j
.text:004033C0                                         ; sub_403200+14C↑j ...
.text:004033C0                 mov     ebp, [ebp+1Ch]
.text:004033C3                 test    ebp, ebp
.text:004033C5                 jnz     loc_403310
.text:004033CB
.text:004033CB loc_4033CB:                             ; CODE XREF: sub_403200+FE↑j
.text:004033CB                 mov     ebp, [esp+0BCh+var_90]
.text:004033CF                 test    ebp, ebp
.text:004033D1                 jnz     loc_4032B0
.text:004033D7                 mov     esi, [esp+0BCh+arg_4]
.text:004033DE                 mov     eax, [esp+0BCh+arg_0]
.text:004033E5                 mov     [esp+0BCh+Str2], esi ; int
.text:004033E9                 mov     [esp+0BCh+Block], eax ; LPCSTR
.text:004033EC                 call    sub_4036B0
.text:004033F1                 test    eax, eax
.text:004033F3                 mov     ebx, eax
.text:004033F5                 jz      loc_4032EB
.text:004033FB                 mov     dword ptr [esp+0BCh+var_AC], 0 ; char
.text:00403403                 mov     dword ptr [esp+0BCh+var_B0], 0 ; char
.text:0040340B                 mov     [esp+0BCh+MaxCount], 0 ; char *
.text:00403413                 mov     [esp+0BCh+Str2], eax ; LPCSTR
.text:00403417                 mov     [esp+0BCh+Block], 0 ; Str
.text:0040341E                 call    sub_4028D0
.text:00403423                 mov     [esp+0BCh+Block], ebx ; Block
.text:00403426                 call    free
.text:0040342B                 jmp     loc_4032EB
.text:00403430 ; ---------------------------------------------------------------------------
.text:00403430
.text:00403430 loc_403430:                             ; CODE XREF: sub_403200+19D↑j
.text:00403430                 mov     [esp+0BCh+var_90], ebp
.text:00403434                 jmp     short loc_4033C0
.text:00403436 ; ---------------------------------------------------------------------------
.text:00403436
.text:00403436 loc_403436:                             ; CODE XREF: sub_403200+11B↑j
.text:00403436                 lea     edx, [esp+0BCh+var_8C]
.text:0040343A                 mov     [esp+0BCh+Str2], edx ; int
.text:0040343E                 mov     ecx, [ebp+4]
.text:00403441                 mov     [esp+0BCh+Block], ecx ; char *
.text:00403444                 call    sub_40B410
.text:00403449                 test    eax, eax
.text:0040344B                 jnz     short loc_403464
.text:0040344D                 mov     esi, [esp+0BCh+var_7C]
.text:00403451                 mov     edi, [esp+0BCh+var_78]
.text:00403455                 mov     ebx, esi
.text:00403457                 mov     [ebp+10h], esi
.text:0040345A                 mov     esi, edi
.text:0040345C                 mov     [ebp+14h], edi
.text:0040345F                 jmp     loc_403321
.text:00403464 ; ---------------------------------------------------------------------------
.text:00403464
.text:00403464 loc_403464:                             ; CODE XREF: sub_403200+24B↑j
.text:00403464                 mov     edx, [ebp+4]
.text:00403467                 mov     ebx, 1
.text:0040346C                 mov     esi, 0FFFFFFFFh
.text:00403471                 mov     [esp+0BCh+Block], edx ; char *
.text:00403474                 call    sub_406900
.text:00403479                 mov     edi, eax
.text:0040347B                 call    _errno
.text:00403480                 mov     dword ptr [esp+0BCh+var_B0], edi ; char
.text:00403484                 mov     [esp+0BCh+MaxCount], offset aS ; "%s"
.text:0040348C                 mov     ecx, [eax]
.text:0040348E                 mov     [esp+0BCh+Block], 0 ; Code
.text:00403495                 mov     [esp+0BCh+Str2], ecx ; ErrorMessage
.text:00403499                 call    sub_409A70
.text:0040349E                 mov     ds:dword_414080, ebx
.text:004034A4                 mov     ebx, 0FFFFFFFEh
.text:004034A9                 mov     dword ptr [ebp+10h], 0FFFFFFFEh
.text:004034B0                 mov     dword ptr [ebp+14h], 0FFFFFFFFh
.text:004034B7                 jmp     loc_403321
.text:004034BC ; ---------------------------------------------------------------------------
.text:004034BC
.text:004034BC loc_4034BC:                             ; CODE XREF: sub_403200+3A↑j
.text:004034BC                 mov     [esp+0BCh+Block], eax ; Str
.text:004034BF                 call    strlen
.text:004034C4                 mov     [esp+0BCh+var_94], eax
.text:004034C8                 mov     ebp, ds:dword_4140B0
.text:004034CE                 mov     [esp+0BCh+var_98], 0
.text:004034D6                 test    ebp, ebp
.text:004034D8                 jz      loc_403240
.text:004034DE                 mov     esi, esi
.text:004034E0
.text:004034E0 loc_4034E0:                             ; CODE XREF: sub_403200+345↓j
.text:004034E0                 cld
.text:004034E1                 mov     esi, [ebp+8]
.text:004034E4                 mov     ecx, 5
.text:004034E9                 mov     edi, offset aLofs ; "lofs"
.text:004034EE                 repe cmpsb
.text:004034F0                 jz      short loc_403540
.text:004034F2                 mov     edx, [esp+0BCh+var_90]
.text:004034F6                 test    edx, edx
.text:004034F8                 jz      short loc_40350A
.text:004034FA                 mov     ecx, [esp+0BCh+var_90]
.text:004034FE                 test    byte ptr [ecx+18h], 1
.text:00403502                 jnz     short loc_40350A
.text:00403504                 test    byte ptr [ebp+18h], 1
.text:00403508                 jnz     short loc_403540
.text:0040350A
.text:0040350A loc_40350A:                             ; CODE XREF: sub_403200+2F8↑j
.text:0040350A                                         ; sub_403200+302↑j
.text:0040350A                 mov     esi, [ebp+4]
.text:0040350D                 mov     [esp+0BCh+Block], esi ; Str
.text:00403510                 call    strlen
.text:00403515                 cmp     [esp+0BCh+var_98], eax
.text:00403519                 mov     esi, eax
.text:0040351B                 ja      short loc_403540
.text:0040351D                 cmp     eax, [esp+0BCh+var_94]
.text:00403521                 ja      short loc_403540
.text:00403523                 cmp     eax, 1
.text:00403526                 jz      short loc_403563
.text:00403528                 cmp     eax, [esp+0BCh+var_94]
.text:0040352C                 jz      short loc_40354C
.text:0040352E                 cmp     byte ptr [eax+ebx], 2Fh ; '/'
.text:00403532                 jz      short loc_40354C
.text:00403534                 lea     esi, [esi+0]
.text:0040353A                 lea     edi, [edi+0]
.text:00403540
.text:00403540 loc_403540:                             ; CODE XREF: sub_403200+2F0↑j
.text:00403540                                         ; sub_403200+308↑j ...
.text:00403540                 mov     ebp, [ebp+1Ch]
.text:00403543                 test    ebp, ebp
.text:00403545                 jnz     short loc_4034E0
.text:00403547                 jmp     loc_403240
.text:0040354C ; ---------------------------------------------------------------------------
.text:0040354C
.text:0040354C loc_40354C:                             ; CODE XREF: sub_403200+32C↑j
.text:0040354C                                         ; sub_403200+332↑j
.text:0040354C                 mov     [esp+0BCh+MaxCount], esi ; MaxCount
.text:00403550                 mov     [esp+0BCh+Str2], ebx ; Str2
.text:00403554                 mov     edi, [ebp+4]
.text:00403557                 mov     [esp+0BCh+Block], edi ; Str1
.text:0040355A                 call    strncmp
.text:0040355F                 test    eax, eax
.text:00403561                 jnz     short loc_403540
.text:00403563
.text:00403563 loc_403563:                             ; CODE XREF: sub_403200+326↑j
.text:00403563                 mov     [esp+0BCh+var_90], ebp
.text:00403567                 mov     [esp+0BCh+var_98], esi
.text:0040356B                 jmp     short loc_403540
.text:0040356D ; ---------------------------------------------------------------------------
.text:0040356D
.text:0040356D loc_40356D:                             ; CODE XREF: sub_403200+1C↑j
.text:0040356D                 mov     ebp, ds:dword_4140B0
.text:00403573                 test    ebp, ebp
.text:00403575                 jz      loc_403222
.text:0040357B                 nop
.text:0040357C                 lea     esi, [esi+0]
.text:00403580
.text:00403580 loc_403580:                             ; CODE XREF: sub_403200+3E5↓j
.text:00403580                 mov     eax, [esp+0BCh+arg_0]
.text:00403587                 mov     [esp+0BCh+Str2], eax ; Str2
.text:0040358B                 mov     edx, [ebp+4]
.text:0040358E                 mov     [esp+0BCh+Block], edx ; Str1
.text:00403591                 call    strcmp
.text:00403596                 test    eax, eax
.text:00403598                 jnz     short loc_4035E0
.text:0040359A                 cld
.text:0040359B                 mov     esi, [ebp+8]
.text:0040359E                 mov     edi, offset aLofs ; "lofs"
.text:004035A3                 mov     ecx, 5
.text:004035A8                 repe cmpsb
.text:004035AA                 jz      short loc_4035E0
.text:004035AC                 mov     ecx, [esp+0BCh+var_90]
.text:004035B0                 test    ecx, ecx
.text:004035B2                 jz      short loc_4035D0
.text:004035B4                 mov     ebx, [esp+0BCh+var_90]
.text:004035B8                 test    byte ptr [ebx+18h], 1
.text:004035BC                 jnz     short loc_4035D0
.text:004035BE                 test    byte ptr [ebp+18h], 1
.text:004035C2                 jnz     short loc_4035E0
.text:004035C4                 lea     esi, [esi+0]
.text:004035CA                 lea     edi, [edi+0]
.text:004035D0
.text:004035D0 loc_4035D0:                             ; CODE XREF: sub_403200+3B2↑j
.text:004035D0                                         ; sub_403200+3BC↑j
.text:004035D0                 mov     [esp+0BCh+var_90], ebp
.text:004035D4                 lea     esi, [esi+0]
.text:004035DA                 lea     edi, [edi+0]
.text:004035E0
.text:004035E0 loc_4035E0:                             ; CODE XREF: sub_403200+398↑j
.text:004035E0                                         ; sub_403200+3AA↑j ...
.text:004035E0                 mov     ebp, [ebp+1Ch]
.text:004035E3                 test    ebp, ebp
.text:004035E5                 jnz     short loc_403580
.text:004035E7                 mov     esi, [esp+0BCh+var_90]
.text:004035EB                 test    esi, esi
.text:004035ED                 jnz     loc_4032B0
.text:004035F3                 jmp     loc_403222
.text:004035F3 sub_403200      endp
.text:004035F3
.text:004035F3 ; ---------------------------------------------------------------------------
.text:004035F8 ; const char byte_4035F8[]
.text:004035F8 byte_4035F8     db 2Eh, 0               ; DATA XREF: sub_4036B0+92↓o
.text:004035FA ; const CHAR word_4035FA[]
.text:004035FA word_4035FA     dw 2E2Eh                ; DATA XREF: sub_4036B0:loc_403760↓o
.text:004035FA                                         ; sub_4036B0+10E↓o ...
.text:004035FC                 db 0
.text:004035FD aCannotChangeTo db 'cannot change to directory %s',0
.text:004035FD                                         ; DATA XREF: sub_4036B0+143↓o
.text:004035FD                                         ; sub_4036B0+21C↓o
.text:0040361B                 align 10h
.text:00403620 aFailedToReturn db 'failed to return to initial working directory',0
.text:00403620                                         ; DATA XREF: sub_4036B0:loc_40385F↓o
.text:0040364E aCannotStatS    db 'cannot stat %s',0   ; DATA XREF: sub_4036B0+1F4↓o
.text:0040365D                 align 10h
.text:00403660 aCannotStatCurr db 'cannot stat current directory (now %s)',0
.text:00403660                                         ; DATA XREF: sub_4036B0+208↓o
.text:00403687 aCannotGetCurre db 'cannot get current directory',0
.text:00403687                                         ; DATA XREF: sub_4036B0:loc_403926↓o
.text:004036A4                 align 10h
.text:004036B0
.text:004036B0 ; =============== S U B R O U T I N E =======================================
.text:004036B0
.text:004036B0 ; Attributes: bp-based frame
.text:004036B0
.text:004036B0 ; int __cdecl sub_4036B0(LPCSTR, int)
.text:004036B0 sub_4036B0      proc near               ; CODE XREF: sub_403200+1EC↑p
.text:004036B0
.text:004036B0 Str             = dword ptr -118h
.text:004036B0 Src             = dword ptr -114h
.text:004036B0 Size            = dword ptr -110h
.text:004036B0 var_10C         = byte ptr -10Ch
.text:004036B0 var_108         = byte ptr -108h
.text:004036B0 var_104         = dword ptr -104h
.text:004036B0 Block           = byte ptr -100h
.text:004036B0 var_F8          = dword ptr -0F8h
.text:004036B0 var_F0          = dword ptr -0F0h
.text:004036B0 var_EC          = dword ptr -0ECh
.text:004036B0 var_E8          = dword ptr -0E8h
.text:004036B0 var_E4          = dword ptr -0E4h
.text:004036B0 var_88          = dword ptr -88h
.text:004036B0 var_80          = dword ptr -80h
.text:004036B0 var_7C          = dword ptr -7Ch
.text:004036B0 var_78          = dword ptr -78h
.text:004036B0 var_74          = dword ptr -74h
.text:004036B0 arg_0           = dword ptr  8
.text:004036B0 arg_4           = dword ptr  0Ch
.text:004036B0
.text:004036B0                 push    ebp
.text:004036B1                 xor     edx, edx
.text:004036B3                 mov     ebp, esp
.text:004036B5                 push    edi
.text:004036B6                 push    esi
.text:004036B7                 push    ebx
.text:004036B8                 sub     esp, 10Ch
.text:004036BE                 mov     ebx, [ebp+arg_0]
.text:004036C1                 mov     [ebp+var_104], edx
.text:004036C7                 mov     esi, [ebp+arg_4]
.text:004036CA                 lea     edx, [ebp+Block]
.text:004036D0                 mov     [esp+118h+Str], edx
.text:004036D3                 call    sub_4066A0
.text:004036D8                 test    eax, eax
.text:004036DA                 jnz     loc_403926
.text:004036E0                 mov     edi, [esi]
.text:004036E2                 and     edi, 0F000h
.text:004036E8                 cmp     edi, 4000h
.text:004036EE                 jz      loc_403903
.text:004036F4                 mov     [esp+118h+Str], ebx ; void *
.text:004036F7                 call    sub_406800
.text:004036FC                 mov     [esp+118h+Str], eax ; Size
.text:004036FF                 mov     edi, eax
.text:00403701                 call    strlen
.text:00403706                 lea     ecx, [eax+1]
.text:00403709                 add     eax, 10h
.text:0040370C                 and     eax, 0FFFFFFF0h
.text:0040370F                 call    __alloca
.text:00403714                 mov     [esp+118h+Size], ecx ; Size
.text:00403718                 lea     ebx, [esp+118h+var_108]
.text:0040371C                 mov     [esp+118h+Src], edi ; Src
.text:00403720                 mov     [esp+118h+Str], ebx ; void *
.text:00403723                 call    memcpy
.text:00403728                 mov     [esp+118h+Str], edi ; Block
.text:0040372B                 mov     esi, eax
.text:0040372D                 call    free
.text:00403732                 mov     [esp+118h+Str], esi ; LPCSTR
.text:00403735                 call    sub_40BD90
.text:0040373A                 test    eax, eax
.text:0040373C                 js      loc_4038C4
.text:00403742                 mov     [esp+118h+Str], offset byte_4035F8 ; char *
.text:00403749                 lea     ecx, [ebp+var_88]
.text:0040374F                 mov     [esp+118h+Src], ecx ; int
.text:00403753                 call    sub_40B410
.text:00403758                 test    eax, eax
.text:0040375A                 js      loc_4038B0
.text:00403760
.text:00403760 loc_403760:                             ; CODE XREF: sub_4036B0+132↓j
.text:00403760                                         ; sub_4036B0+26B↓j
.text:00403760                 mov     [esp+118h+Str], offset word_4035FA ; char *
.text:00403767                 lea     edx, [ebp+var_F8]
.text:0040376D                 mov     [esp+118h+Src], edx ; int
.text:00403771                 call    sub_40B410
.text:00403776                 test    eax, eax
.text:00403778                 js      loc_403898
.text:0040377E                 mov     edx, [ebp+var_E4]
.text:00403784                 mov     esi, [ebp+var_E8]
.text:0040378A                 mov     edi, [ebp+var_78]
.text:0040378D                 mov     ecx, [ebp+var_74]
.text:00403790                 mov     eax, edx
.text:00403792                 xor     edi, esi
.text:00403794                 xor     eax, ecx
.text:00403796                 or      eax, edi
.text:00403798                 jnz     loc_40388B
.text:0040379E                 mov     edx, [ebp+var_EC]
.text:004037A4                 mov     esi, [ebp+var_F0]
.text:004037AA                 mov     edi, [ebp+var_80]
.text:004037AD                 mov     ecx, [ebp+var_7C]
.text:004037B0                 mov     eax, edx
.text:004037B2                 xor     edi, esi
.text:004037B4                 xor     eax, ecx
.text:004037B6                 or      eax, edi
.text:004037B8                 jz      loc_40388B
.text:004037BE                 mov     [esp+118h+Str], offset word_4035FA ; LPCSTR
.text:004037C5                 call    sub_40BD90
.text:004037CA                 test    eax, eax
.text:004037CC                 js      short loc_4037E7
.text:004037CE                 cld
.text:004037CF                 mov     ecx, 1Ah
.text:004037D4                 lea     edi, [ebp+var_88]
.text:004037DA                 lea     esi, [ebp+var_F8]
.text:004037E0                 rep movsd
.text:004037E2                 jmp     loc_403760
.text:004037E7 ; ---------------------------------------------------------------------------
.text:004037E7
.text:004037E7 loc_4037E7:                             ; CODE XREF: sub_4036B0+11C↑j
.text:004037E7                 mov     [esp+118h+Str], offset word_4035FA ; char *
.text:004037EE                 call    sub_406900
.text:004037F3                 mov     [esp+118h+Str], offset aCannotChangeTo ; "cannot change to directory %s"
.text:004037FA
.text:004037FA loc_4037FA:                             ; CODE XREF: sub_4036B0+1FB↓j
.text:004037FA                                         ; sub_4036B0+20F↓j
.text:004037FA                 mov     esi, eax
.text:004037FC                 call    ds:libintl_gettext
.text:00403802                 mov     edi, eax
.text:00403804                 call    _errno
.text:00403809                 mov     dword ptr [esp+118h+var_10C], esi ; char
.text:0040380D                 mov     [esp+118h+Size], edi ; char *
.text:00403811                 mov     esi, [eax]
.text:00403813                 mov     [esp+118h+Str], 0 ; Code
.text:0040381A                 mov     [esp+118h+Src], esi ; ErrorMessage
.text:0040381E                 call    sub_409A70
.text:00403823
.text:00403823 loc_403823:                             ; CODE XREF: sub_4036B0+1E6↓j
.text:00403823                 call    _errno
.text:00403828                 lea     ebx, [ebp+Block]
.text:0040382E                 mov     esi, [eax]
.text:00403830                 mov     [esp+118h+Str], ebx
.text:00403833                 call    sub_4066E0
.text:00403838                 test    eax, eax
.text:0040383A                 jnz     short loc_40385F
.text:0040383C
.text:0040383C loc_40383C:                             ; CODE XREF: sub_4036B0+1D9↓j
.text:0040383C                 lea     ecx, [ebp+Block]
.text:00403842                 mov     [esp+118h+Str], ecx ; Block
.text:00403845                 call    sub_406710
.text:0040384A                 call    _errno
.text:0040384F                 mov     [eax], esi
.text:00403851                 mov     eax, [ebp+var_104]
.text:00403857
.text:00403857 loc_403857:                             ; CODE XREF: sub_4036B0+24E↓j
.text:00403857                 lea     esp, [ebp-0Ch]
.text:0040385A                 pop     ebx
.text:0040385B                 pop     esi
.text:0040385C                 pop     edi
.text:0040385D                 pop     ebp
.text:0040385E                 retn
.text:0040385F ; ---------------------------------------------------------------------------
.text:0040385F
.text:0040385F loc_40385F:                             ; CODE XREF: sub_4036B0+18A↑j
.text:0040385F                 mov     [esp+118h+Str], offset aFailedToReturn ; "failed to return to initial working dir"...
.text:00403866                 call    ds:libintl_gettext
.text:0040386C                 mov     edi, eax
.text:0040386E                 call    _errno
.text:00403873                 mov     [esp+118h+Size], edi ; char *
.text:00403877                 mov     edi, [eax]
.text:00403879                 mov     [esp+118h+Str], 1 ; Code
.text:00403880                 mov     [esp+118h+Src], edi ; ErrorMessage
.text:00403884                 call    sub_409A70
.text:00403889                 jmp     short loc_40383C
.text:0040388B ; ---------------------------------------------------------------------------
.text:0040388B
.text:0040388B loc_40388B:                             ; CODE XREF: sub_4036B0+E8↑j
.text:0040388B                                         ; sub_4036B0+108↑j
.text:0040388B                 call    sub_406750
.text:00403890                 mov     [ebp+var_104], eax
.text:00403896                 jmp     short loc_403823
.text:00403898 ; ---------------------------------------------------------------------------
.text:00403898
.text:00403898 loc_403898:                             ; CODE XREF: sub_4036B0+C8↑j
.text:00403898                 mov     [esp+118h+Str], offset word_4035FA ; char *
.text:0040389F                 call    sub_406900
.text:004038A4                 mov     [esp+118h+Str], offset aCannotStatS ; "cannot stat %s"
.text:004038AB                 jmp     loc_4037FA
.text:004038B0 ; ---------------------------------------------------------------------------
.text:004038B0
.text:004038B0 loc_4038B0:                             ; CODE XREF: sub_4036B0+AA↑j
.text:004038B0                 mov     [esp+118h+Str], esi ; char *
.text:004038B3                 call    sub_406900
.text:004038B8                 mov     [esp+118h+Str], offset aCannotStatCurr ; "cannot stat current directory (now %s)"
.text:004038BF                 jmp     loc_4037FA
.text:004038C4 ; ---------------------------------------------------------------------------
.text:004038C4
.text:004038C4 loc_4038C4:                             ; CODE XREF: sub_4036B0+8C↑j
.text:004038C4                 mov     [esp+118h+Str], esi ; char *
.text:004038C7
.text:004038C7 loc_4038C7:                             ; CODE XREF: sub_4036B0+274↓j
.text:004038C7                 call    sub_406900
.text:004038CC                 mov     [esp+118h+Str], offset aCannotChangeTo ; "cannot change to directory %s"
.text:004038D3                 mov     ebx, eax
.text:004038D5                 call    ds:libintl_gettext
.text:004038DB                 mov     edi, eax
.text:004038DD                 call    _errno
.text:004038E2                 mov     dword ptr [esp+118h+var_10C], ebx ; char
.text:004038E6                 mov     [esp+118h+Size], edi ; char *
.text:004038EA                 mov     edx, [eax]
.text:004038EC                 mov     [esp+118h+Str], 0 ; Code
.text:004038F3                 mov     [esp+118h+Src], edx ; ErrorMessage
.text:004038F7                 call    sub_409A70
.text:004038FC
.text:004038FC loc_4038FC:                             ; CODE XREF: sub_4036B0+2A0↓j
.text:004038FC                 xor     eax, eax
.text:004038FE                 jmp     loc_403857
.text:00403903 ; ---------------------------------------------------------------------------
.text:00403903
.text:00403903 loc_403903:                             ; CODE XREF: sub_4036B0+3E↑j
.text:00403903                 cld
.text:00403904                 mov     ecx, 1Ah
.text:00403909                 lea     edi, [ebp+var_88]
.text:0040390F                 rep movsd
.text:00403911                 mov     [esp+118h+Str], ebx ; LPCSTR
.text:00403914                 call    sub_40BD90
.text:00403919                 test    eax, eax
.text:0040391B                 jns     loc_403760
.text:00403921                 mov     [esp+118h+Str], ebx
.text:00403924                 jmp     short loc_4038C7
.text:00403926 ; ---------------------------------------------------------------------------
.text:00403926
.text:00403926 loc_403926:                             ; CODE XREF: sub_4036B0+2A↑j
.text:00403926                 mov     [esp+118h+Str], offset aCannotGetCurre ; "cannot get current directory"
.text:0040392D                 call    ds:libintl_gettext
.text:00403933                 mov     esi, eax
.text:00403935                 call    _errno
.text:0040393A                 mov     [esp+118h+Size], esi ; char *
.text:0040393E                 mov     ecx, [eax]
.text:00403940                 mov     [esp+118h+Str], 0 ; Code
.text:00403947                 mov     [esp+118h+Src], ecx ; ErrorMessage
.text:0040394B                 call    sub_409A70
.text:00403950                 jmp     short loc_4038FC
.text:00403950 sub_4036B0      endp
.text:00403950
.text:00403950 ; ---------------------------------------------------------------------------
.text:00403952                 align 10h
.text:00403960
.text:00403960 ; =============== S U B R O U T I N E =======================================
.text:00403960
.text:00403960
.text:00403960 ; int __cdecl sub_403960(LPCSTR, int, int)
.text:00403960 sub_403960      proc near               ; CODE XREF: sub_4028D0+F1↑p
.text:00403960
.text:00403960 var_13C         = dword ptr -13Ch
.text:00403960 var_138         = dword ptr -138h
.text:00403960 var_12C         = dword ptr -12Ch
.text:00403960 var_128         = dword ptr -128h
.text:00403960 var_11C         = dword ptr -11Ch
.text:00403960 var_118         = dword ptr -118h
.text:00403960 var_114         = dword ptr -114h
.text:00403960 var_110         = dword ptr -110h
.text:00403960 var_10C         = dword ptr -10Ch
.text:00403960 var_108         = dword ptr -108h
.text:00403960 var_104         = dword ptr -104h
.text:00403960 var_100         = dword ptr -100h
.text:00403960 var_FC          = dword ptr -0FCh
.text:00403960 var_F8          = dword ptr -0F8h
.text:00403960 arg_0           = dword ptr  4
.text:00403960 arg_8           = dword ptr  0Ch
.text:00403960
.text:00403960                 push    esi
.text:00403961                 push    ebx
.text:00403962                 sub     esp, 134h
.text:00403968                 lea     edx, [esp+13Ch+var_12C]
.text:0040396C                 mov     [esp+13Ch+var_138], edx ; int
.text:00403970                 mov     esi, [esp+13Ch+arg_8]
.text:00403977                 mov     edx, [esp+13Ch+arg_0]
.text:0040397E                 mov     [esp+13Ch+var_13C], edx ; LPCSTR
.text:00403981                 call    sub_40BAC0
.text:00403986                 test    eax, eax
.text:00403988                 mov     edx, 0FFFFFFFFh
.text:0040398D                 js      loc_403A13
.text:00403993                 cmp     [esp+13Ch+var_128], 0FFFFFFFFh
.text:00403998                 jz      loc_403A20
.text:0040399E                 mov     eax, [esp+13Ch+var_128]
.text:004039A2                 xor     edx, edx
.text:004039A4
.text:004039A4 loc_4039A4:                             ; CODE XREF: sub_403960+CA↓j
.text:004039A4                 mov     [esi], eax
.text:004039A6                 xor     eax, eax
.text:004039A8                 mov     [esi+4], edx
.text:004039AB                 mov     ecx, [esp+13Ch+var_11C]
.text:004039AF                 mov     ebx, [esp+13Ch+var_118]
.text:004039B3                 mov     [esi+8], ecx
.text:004039B6                 mov     [esi+0Ch], ebx
.text:004039B9                 mov     edx, [esp+13Ch+var_114]
.text:004039BD                 mov     ecx, [esp+13Ch+var_110]
.text:004039C1                 mov     [esi+10h], edx
.text:004039C4                 mov     [esi+14h], ecx
.text:004039C7                 mov     ebx, [esp+13Ch+var_108]
.text:004039CB                 mov     ecx, [esp+13Ch+var_10C]
.text:004039CF                 mov     edx, ebx
.text:004039D1                 and     edx, 80000000h
.text:004039D7                 add     eax, 0FFFFFFFFh
.text:004039DA                 adc     edx, 0FFFFFFFFh
.text:004039DD                 not     eax
.text:004039DF                 not     edx
.text:004039E1                 or      edx, ebx
.text:004039E3                 or      eax, ecx
.text:004039E5                 mov     [esi+18h], eax
.text:004039E8                 mov     [esi+1Ch], edx
.text:004039EB                 mov     ebx, [esp+13Ch+var_108]
.text:004039EF                 mov     edx, [esp+13Ch+var_104]
.text:004039F3                 mov     ecx, [esp+13Ch+var_100]
.text:004039F7                 shr     ebx, 1Fh
.text:004039FA                 mov     [esi+28h], edx
.text:004039FD                 xor     edx, edx
.text:004039FF                 mov     [esi+2Ch], ecx
.text:00403A02                 mov     ecx, [esp+13Ch+var_F8]
.text:00403A06                 mov     [esi+20h], bl
.text:00403A09                 mov     ebx, [esp+13Ch+var_FC]
.text:00403A0D                 mov     [esi+34h], ecx
.text:00403A10                 mov     [esi+30h], ebx
.text:00403A13
.text:00403A13 loc_403A13:                             ; CODE XREF: sub_403960+2D↑j
.text:00403A13                 add     esp, 134h
.text:00403A19                 mov     eax, edx
.text:00403A1B                 pop     ebx
.text:00403A1C                 pop     esi
.text:00403A1D                 retn
.text:00403A1D ; ---------------------------------------------------------------------------
.text:00403A1E                 align 10h
.text:00403A20
.text:00403A20 loc_403A20:                             ; CODE XREF: sub_403960+38↑j
.text:00403A20                 mov     eax, 0FFFFFFFFh
.text:00403A25                 mov     edx, 0FFFFFFFFh
.text:00403A2A                 jmp     loc_4039A4
.text:00403A2A sub_403960      endp
.text:00403A2A
.text:00403A2A ; ---------------------------------------------------------------------------
.text:00403A2F                 align 10h
.text:00403A30 dword_403A30    dd 90002D2Dh, 7 dup(90909090h)
.text:00403A30                                         ; DATA XREF: sub_403C80+E4↓o
.text:00403A50 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403A50                                         ; DATA XREF: sub_403C80+2FC↓o
.text:00403A7D                 db 13h dup(90h)
.text:00403A90 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403A90                                         ; DATA XREF: sub_403C80:loc_403FE2↓o
.text:00403ABD                 db 13h dup(90h)
.text:00403AD0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00403AD0                                         ; DATA XREF: sub_403C80:loc_404080↓o
.text:00403AD0                                         ; sub_403C80:loc_404447↓o
.text:00403AF6                 db 1Ah dup(90h)
.text:00403B10 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00403B10                                         ; DATA XREF: sub_403C80+48E↓o
.text:00403B30 dword_403B30    dd 90909000h, 7 dup(90909090h)
.text:00403B30                                         ; DATA XREF: sub_403C80:loc_404151↓o
.text:00403B50 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00403B50                                         ; DATA XREF: sub_403C80:loc_40416A↓o
.text:00403B70 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00403B70                                         ; DATA XREF: sub_403C80:loc_40424F↓o
.text:00403B70                                         ; sub_403C80:loc_40457C↓o
.text:00403B97                 db 19h dup(90h)
.text:00403BB0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403BB0                                         ; DATA XREF: sub_403C80:loc_4043C3↓o
.text:00403BDE                 db 12h dup(90h)
.text:00403BF0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00403BF0                                         ; DATA XREF: sub_403C80:loc_4044AF↓o
.text:00403C11 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00403C11                                         ; DATA XREF: sub_403C80+93F↓o
.text:00403C2B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00403C2B                                         ; DATA XREF: sub_403C80:loc_4045F7↓o
.text:00403C45 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00403C45                                         ; DATA XREF: sub_403C80:loc_40461E↓o
.text:00403C63 ; const char aPosixlyCorrect[]
.text:00403C63 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_403C80:loc_4047D0↓o
.text:00403C73                 align 10h
.text:00403C80
.text:00403C80 ; =============== S U B R O U T I N E =======================================
.text:00403C80
.text:00403C80
.text:00403C80 ; int __cdecl sub_403C80(int, int, char *Str, int, int, int, int, int)
.text:00403C80 sub_403C80      proc near               ; CODE XREF: sub_404810+5A↓p
.text:00403C80                                         ; .text:004048FA↓p ...
.text:00403C80
.text:00403C80 Str1            = dword ptr -5Ch
.text:00403C80 Str2            = dword ptr -58h
.text:00403C80 MaxCount        = dword ptr -54h
.text:00403C80 var_50          = dword ptr -50h
.text:00403C80 var_4C          = dword ptr -4Ch
.text:00403C80 var_3C          = dword ptr -3Ch
.text:00403C80 var_38          = dword ptr -38h
.text:00403C80 var_34          = dword ptr -34h
.text:00403C80 var_30          = dword ptr -30h
.text:00403C80 var_2C          = dword ptr -2Ch
.text:00403C80 var_28          = dword ptr -28h
.text:00403C80 var_24          = dword ptr -24h
.text:00403C80 var_20          = dword ptr -20h
.text:00403C80 var_1C          = dword ptr -1Ch
.text:00403C80 var_18          = dword ptr -18h
.text:00403C80 var_14          = dword ptr -14h
.text:00403C80 arg_0           = dword ptr  4
.text:00403C80 arg_4           = dword ptr  8
.text:00403C80 Str             = dword ptr  0Ch
.text:00403C80 arg_C           = dword ptr  10h
.text:00403C80 arg_10          = dword ptr  14h
.text:00403C80 arg_14          = dword ptr  18h
.text:00403C80 arg_18          = dword ptr  1Ch
.text:00403C80 arg_1C          = dword ptr  20h
.text:00403C80
.text:00403C80                 push    ebp
.text:00403C81                 mov     eax, 0FFFFFFFFh
.text:00403C86                 push    edi
.text:00403C87                 push    esi
.text:00403C88                 push    ebx
.text:00403C89                 sub     esp, 4Ch
.text:00403C8C                 mov     esi, [esp+5Ch+Str]
.text:00403C90                 mov     ebp, [esp+5Ch+arg_1C]
.text:00403C94                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00403C97                 mov     ebx, [ebp+4]
.text:00403C9A                 setz    dl
.text:00403C9D                 movzx   ecx, dl
.text:00403CA0                 dec     ecx
.text:00403CA1                 and     ecx, ebx
.text:00403CA3                 mov     [esp+5Ch+var_14], ecx
.text:00403CA7                 mov     ecx, [esp+5Ch+arg_0]
.text:00403CAB                 test    ecx, ecx
.text:00403CAD                 jle     loc_403DD7
.text:00403CB3                 mov     dword ptr [ebp+0Ch], 0
.text:00403CBA                 mov     ebx, [ebp+0]
.text:00403CBD                 test    ebx, ebx
.text:00403CBF                 jz      loc_4047F0
.text:00403CC5                 mov     edi, [ebp+10h]
.text:00403CC8                 test    edi, edi
.text:00403CCA                 jnz     short loc_403D23
.text:00403CCC                 lea     esi, [esi+0]
.text:00403CD0
.text:00403CD0 loc_403CD0:                             ; CODE XREF: sub_403C80+B7C↓j
.text:00403CD0                 mov     [ebp+24h], ebx
.text:00403CD3                 mov     esi, [esp+5Ch+Str]
.text:00403CD7                 mov     [ebp+20h], ebx
.text:00403CDA                 mov     ecx, [esp+5Ch+arg_18]
.text:00403CDE                 xor     ebx, ebx
.text:00403CE0                 mov     dword ptr [ebp+14h], 0
.text:00403CE7                 test    ecx, ecx
.text:00403CE9                 jz      loc_4047D0
.text:00403CEF
.text:00403CEF loc_403CEF:                             ; CODE XREF: sub_403C80+B64↓j
.text:00403CEF                 mov     ebx, 1
.text:00403CF4
.text:00403CF4 loc_403CF4:                             ; CODE XREF: sub_403C80+B5E↓j
.text:00403CF4                 mov     [ebp+1Ch], ebx
.text:00403CF7                 mov     ecx, [esp+5Ch+Str]
.text:00403CFB                 movzx   eax, byte ptr [ecx]
.text:00403CFE                 cmp     al, 2Dh ; '-'
.text:00403D00                 jz      loc_4047C0
.text:00403D06                 cmp     al, 2Bh ; '+'
.text:00403D08                 jz      loc_4047A9
.text:00403D0E                 xor     edx, edx
.text:00403D10                 test    ebx, ebx
.text:00403D12                 setz    dl
.text:00403D15                 mov     [ebp+18h], edx
.text:00403D18
.text:00403D18 loc_403D18:                             ; CODE XREF: sub_403C80+B35↓j
.text:00403D18                 mov     [esp+5Ch+Str], esi
.text:00403D1C                 mov     dword ptr [ebp+10h], 1
.text:00403D23
.text:00403D23 loc_403D23:                             ; CODE XREF: sub_403C80+4A↑j
.text:00403D23                 mov     eax, [ebp+14h]
.text:00403D26                 test    eax, eax
.text:00403D28                 jz      short loc_403D33
.text:00403D2A                 cmp     byte ptr [eax], 0
.text:00403D2D                 jnz     loc_403E10
.text:00403D33
.text:00403D33 loc_403D33:                             ; CODE XREF: sub_403C80+A8↑j
.text:00403D33                 mov     ebx, [ebp+0]
.text:00403D36                 cmp     [ebp+24h], ebx
.text:00403D39                 jle     short loc_403D3E
.text:00403D3B                 mov     [ebp+24h], ebx
.text:00403D3E
.text:00403D3E loc_403D3E:                             ; CODE XREF: sub_403C80+B9↑j
.text:00403D3E                 cmp     [ebp+20h], ebx
.text:00403D41                 jle     short loc_403D46
.text:00403D43                 mov     [ebp+20h], ebx
.text:00403D46
.text:00403D46 loc_403D46:                             ; CODE XREF: sub_403C80+C1↑j
.text:00403D46                 cmp     dword ptr [ebp+18h], 1
.text:00403D4A                 jz      loc_404720
.text:00403D50
.text:00403D50 loc_403D50:                             ; CODE XREF: sub_403C80+B13↓j
.text:00403D50                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403D54                 jz      loc_404704
.text:00403D5A                 cld
.text:00403D5B                 mov     ecx, [esp+5Ch+arg_4]
.text:00403D5F                 mov     edx, 3
.text:00403D64                 mov     edi, offset dword_403A30
.text:00403D69                 mov     esi, [ecx+ebx*4]
.text:00403D6C                 mov     ecx, edx
.text:00403D6E                 repe cmpsb
.text:00403D70                 jnz     short loc_403DAC
.text:00403D72                 mov     edx, [ebp+24h]
.text:00403D75                 lea     eax, [ebx+1]
.text:00403D78                 cmp     [ebp+20h], edx
.text:00403D7B                 mov     [ebp+0], eax
.text:00403D7E                 jz      loc_404718
.text:00403D84                 cmp     edx, eax
.text:00403D86                 jz      short loc_403DA0
.text:00403D88                 mov     [esp+5Ch+Str2], ebp
.text:00403D8C                 mov     ebx, [esp+5Ch+arg_4]
.text:00403D90                 mov     [esp+5Ch+Str1], ebx
.text:00403D93                 call    sub_404930
.text:00403D98                 nop
.text:00403D99                 lea     esi, [esi+0]
.text:00403DA0
.text:00403DA0 loc_403DA0:                             ; CODE XREF: sub_403C80+106↑j
.text:00403DA0                                         ; sub_403C80+A9B↓j
.text:00403DA0                 mov     eax, [esp+5Ch+arg_0]
.text:00403DA4                 mov     ebx, eax
.text:00403DA6                 mov     [ebp+24h], eax
.text:00403DA9                 mov     [ebp+0], eax
.text:00403DAC
.text:00403DAC loc_403DAC:                             ; CODE XREF: sub_403C80+F0↑j
.text:00403DAC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403DB0                 jz      loc_404704
.text:00403DB6                 mov     esi, [esp+5Ch+arg_4]
.text:00403DBA                 mov     eax, [esi+ebx*4]
.text:00403DBD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403DC0                 jz      short loc_403DE7
.text:00403DC2
.text:00403DC2 loc_403DC2:                             ; CODE XREF: sub_403C80+16D↓j
.text:00403DC2                 mov     edx, [ebp+18h]
.text:00403DC5                 test    edx, edx
.text:00403DC7                 jz      short loc_403DE0
.text:00403DC9                 mov     [ebp+0Ch], eax
.text:00403DCC                 lea     edi, [ebx+1]
.text:00403DCF                 mov     eax, 1
.text:00403DD4                 mov     [ebp+0], edi
.text:00403DD7
.text:00403DD7 loc_403DD7:                             ; CODE XREF: sub_403C80+2D↑j
.text:00403DD7                                         ; sub_403C80+165↓j ...
.text:00403DD7                 add     esp, 4Ch
.text:00403DDA                 pop     ebx
.text:00403DDB                 pop     esi
.text:00403DDC                 pop     edi
.text:00403DDD                 pop     ebp
.text:00403DDE                 retn
.text:00403DDE ; ---------------------------------------------------------------------------
.text:00403DDF                 align 10h
.text:00403DE0
.text:00403DE0 loc_403DE0:                             ; CODE XREF: sub_403C80+147↑j
.text:00403DE0                                         ; sub_403C80+A8A↓j ...
.text:00403DE0                 mov     eax, 0FFFFFFFFh
.text:00403DE5                 jmp     short loc_403DD7
.text:00403DE7 ; ---------------------------------------------------------------------------
.text:00403DE7
.text:00403DE7 loc_403DE7:                             ; CODE XREF: sub_403C80+140↑j
.text:00403DE7                 movzx   edx, byte ptr [eax+1]
.text:00403DEB                 test    dl, dl
.text:00403DED                 jz      short loc_403DC2
.text:00403DEF                 mov     ebx, [esp+5Ch+arg_C]
.text:00403DF3                 xor     ecx, ecx
.text:00403DF5                 test    ebx, ebx
.text:00403DF7                 jz      short loc_403E02
.text:00403DF9                 cmp     dl, 2Dh ; '-'
.text:00403DFC                 jz      loc_4046FA
.text:00403E02
.text:00403E02 loc_403E02:                             ; CODE XREF: sub_403C80+177↑j
.text:00403E02                                         ; sub_403C80+A7F↓j
.text:00403E02                 lea     esi, [ecx+eax+1]
.text:00403E06                 mov     [ebp+14h], esi
.text:00403E09                 lea     esi, [esi+0]
.text:00403E10
.text:00403E10 loc_403E10:                             ; CODE XREF: sub_403C80+AD↑j
.text:00403E10                 mov     ecx, [esp+5Ch+arg_C]
.text:00403E14                 test    ecx, ecx
.text:00403E16                 jz      loc_4041A0
.text:00403E1C                 mov     edx, [ebp+0]
.text:00403E1F                 mov     edi, [esp+5Ch+arg_4]
.text:00403E23                 mov     eax, [edi+edx*4]
.text:00403E26                 movzx   edx, byte ptr [eax+1]
.text:00403E2A                 cmp     dl, 2Dh ; '-'
.text:00403E2D                 jz      short loc_403E45
.text:00403E2F                 mov     ebx, [esp+5Ch+arg_14]
.text:00403E33                 test    ebx, ebx
.text:00403E35                 jz      loc_4041A0
.text:00403E3B                 cmp     byte ptr [eax+2], 0
.text:00403E3F                 jz      loc_4046DA
.text:00403E45
.text:00403E45 loc_403E45:                             ; CODE XREF: sub_403C80+1AD↑j
.text:00403E45                                         ; sub_403C80+A75↓j
.text:00403E45                 mov     [esp+5Ch+var_18], 0
.text:00403E4D                 mov     ecx, [ebp+14h]
.text:00403E50                 mov     [esp+5Ch+var_1C], 0
.text:00403E58                 mov     [esp+5Ch+var_20], 0
.text:00403E60                 mov     edi, ecx
.text:00403E62                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00403E6A                 movzx   eax, byte ptr [ecx]
.text:00403E6D                 test    al, al
.text:00403E6F                 jz      short loc_403E8C
.text:00403E71                 cmp     al, 3Dh ; '='
.text:00403E73                 jz      short loc_403E8C
.text:00403E75                 lea     esi, [esi+0]
.text:00403E79                 lea     edi, [edi+0]
.text:00403E80
.text:00403E80 loc_403E80:                             ; CODE XREF: sub_403C80+20A↓j
.text:00403E80                 inc     edi
.text:00403E81                 movzx   eax, byte ptr [edi]
.text:00403E84                 test    al, al
.text:00403E86                 jz      short loc_403E8C
.text:00403E88                 cmp     al, 3Dh ; '='
.text:00403E8A                 jnz     short loc_403E80
.text:00403E8C
.text:00403E8C loc_403E8C:                             ; CODE XREF: sub_403C80+1EF↑j
.text:00403E8C                                         ; sub_403C80+1F3↑j ...
.text:00403E8C                 mov     [esp+5Ch+var_28], 0
.text:00403E94                 mov     esi, [esp+5Ch+arg_C]
.text:00403E98                 mov     ebx, [esi]
.text:00403E9A                 test    ebx, ebx
.text:00403E9C                 mov     edx, ebx
.text:00403E9E                 jz      loc_4040C0
.text:00403EA4                 lea     esi, [esi+0]
.text:00403EAA                 lea     edi, [edi+0]
.text:00403EB0
.text:00403EB0 loc_403EB0:                             ; CODE XREF: sub_403C80+25E↓j
.text:00403EB0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00403EB4                 mov     ebx, edi
.text:00403EB6                 sub     ebx, ecx
.text:00403EB8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00403EBC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00403EBF                 call    strncmp
.text:00403EC4                 test    eax, eax
.text:00403EC6                 jz      loc_404656
.text:00403ECC
.text:00403ECC loc_403ECC:                             ; CODE XREF: sub_403C80+A0F↓j
.text:00403ECC                                         ; sub_403C80+A24↓j ...
.text:00403ECC                 inc     [esp+5Ch+var_28]
.text:00403ED0                 add     esi, 10h
.text:00403ED3                 mov     ecx, [esi]
.text:00403ED5                 test    ecx, ecx
.text:00403ED7                 mov     edx, ecx
.text:00403ED9                 jz      short loc_403EE0
.text:00403EDB                 mov     ecx, [ebp+14h]
.text:00403EDE                 jmp     short loc_403EB0
.text:00403EE0 ; ---------------------------------------------------------------------------
.text:00403EE0
.text:00403EE0 loc_403EE0:                             ; CODE XREF: sub_403C80+259↑j
.text:00403EE0                                         ; sub_403C80+A55↓j
.text:00403EE0                 mov     esi, [esp+5Ch+var_20]
.text:00403EE4                 test    esi, esi
.text:00403EE6                 jz      short loc_403EF4
.text:00403EE8                 mov     edx, [esp+5Ch+var_1C]
.text:00403EEC                 test    edx, edx
.text:00403EEE                 jz      loc_404600
.text:00403EF4
.text:00403EF4 loc_403EF4:                             ; CODE XREF: sub_403C80+266↑j
.text:00403EF4                 mov     eax, [esp+5Ch+var_18]
.text:00403EF8                 test    eax, eax
.text:00403EFA                 jz      loc_4040C0
.text:00403F00                 mov     ecx, [ebp+0]
.text:00403F03                 lea     eax, [ecx+1]
.text:00403F06                 mov     [ebp+0], eax
.text:00403F09                 cmp     byte ptr [edi], 0
.text:00403F0C                 jz      loc_404020
.text:00403F12                 mov     ecx, [esp+5Ch+var_18]
.text:00403F16                 mov     esi, [ecx+4]
.text:00403F19                 test    esi, esi
.text:00403F1B                 jz      short loc_403F66
.text:00403F1D                 lea     ebx, [edi+1]
.text:00403F20                 mov     [ebp+0Ch], ebx
.text:00403F23
.text:00403F23 loc_403F23:                             ; CODE XREF: sub_403C80+3A8↓j
.text:00403F23                                         ; sub_403C80+3C4↓j
.text:00403F23                 mov     ebx, [ebp+14h]
.text:00403F26                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00403F29                 call    strlen
.text:00403F2E                 add     [ebp+14h], eax
.text:00403F31                 mov     esi, [esp+5Ch+arg_10]
.text:00403F35                 test    esi, esi
.text:00403F37                 jz      short loc_403F43
.text:00403F39                 mov     ebp, [esp+5Ch+var_24]
.text:00403F3D                 mov     ecx, [esp+5Ch+arg_10]
.text:00403F41                 mov     [ecx], ebp
.text:00403F43
.text:00403F43 loc_403F43:                             ; CODE XREF: sub_403C80+2B7↑j
.text:00403F43                 mov     eax, [esp+5Ch+var_18]
.text:00403F47                 mov     ecx, [eax+8]
.text:00403F4A                 test    ecx, ecx
.text:00403F4C                 jnz     short loc_403F5A
.text:00403F4E                 mov     ecx, [esp+5Ch+var_18]
.text:00403F52
.text:00403F52 loc_403F52:                             ; CODE XREF: sub_403C80+723↓j
.text:00403F52                 mov     eax, [ecx+0Ch]
.text:00403F55                 jmp     loc_403DD7
.text:00403F5A ; ---------------------------------------------------------------------------
.text:00403F5A
.text:00403F5A loc_403F5A:                             ; CODE XREF: sub_403C80+2CC↑j
.text:00403F5A                                         ; sub_403C80+719↓j
.text:00403F5A                 mov     esi, [eax+0Ch]
.text:00403F5D                 xor     eax, eax
.text:00403F5F                 mov     [ecx], esi
.text:00403F61                 jmp     loc_403DD7
.text:00403F66 ; ---------------------------------------------------------------------------
.text:00403F66
.text:00403F66 loc_403F66:                             ; CODE XREF: sub_403C80+29B↑j
.text:00403F66                 mov     edi, [esp+5Ch+var_14]
.text:00403F6A                 test    edi, edi
.text:00403F6C                 jz      short loc_403FC0
.text:00403F6E                 mov     esi, [esp+5Ch+arg_4]
.text:00403F72                 mov     edx, [esi+eax*4-4]
.text:00403F76                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00403F7A                 jz      short loc_403FE2
.text:00403F7C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00403F83                 call    ds:libintl_gettext
.text:00403F89                 mov     edx, [esp+5Ch+var_18]
.text:00403F8D                 mov     edi, [edx]
.text:00403F8F                 mov     [esp+5Ch+var_4C], edi
.text:00403F93                 mov     ebx, [ebp+0]
.text:00403F96                 mov     edi, [esp+5Ch+arg_4]
.text:00403F9A                 mov     ecx, [edi+ebx*4-4]
.text:00403F9E                 movsx   esi, byte ptr [ecx]
.text:00403FA1                 mov     ecx, ds:_iob
.text:00403FA7                 add     ecx, 40h ; '@'
.text:00403FAA                 mov     [esp+5Ch+var_50], esi
.text:00403FAE                 mov     ebx, [edi]
.text:00403FB0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403FB4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403FB7                 mov     [esp+5Ch+MaxCount], ebx
.text:00403FBB                 call    fprintf
.text:00403FC0
.text:00403FC0 loc_403FC0:                             ; CODE XREF: sub_403C80+2EC↑j
.text:00403FC0                                         ; sub_403C80+398↓j
.text:00403FC0                 mov     ecx, [ebp+14h]
.text:00403FC3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403FC6                 call    strlen
.text:00403FCB                 add     [ebp+14h], eax
.text:00403FCE                 mov     eax, [esp+5Ch+var_18]
.text:00403FD2                 mov     esi, [eax+0Ch]
.text:00403FD5                 mov     [ebp+8], esi
.text:00403FD8
.text:00403FD8 loc_403FD8:                             ; CODE XREF: sub_403C80+4E5↓j
.text:00403FD8                                         ; sub_403C80+73E↓j ...
.text:00403FD8                 mov     eax, 3Fh ; '?'
.text:00403FDD                 jmp     loc_403DD7
.text:00403FE2 ; ---------------------------------------------------------------------------
.text:00403FE2
.text:00403FE2 loc_403FE2:                             ; CODE XREF: sub_403C80+2FA↑j
.text:00403FE2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00403FE9                 call    ds:libintl_gettext
.text:00403FEF                 mov     edx, [esp+5Ch+var_18]
.text:00403FF3                 mov     edi, [esp+5Ch+arg_4]
.text:00403FF7                 mov     ecx, ds:_iob
.text:00403FFD                 mov     esi, [edx]
.text:00403FFF                 add     ecx, 40h ; '@'
.text:00404002                 mov     [esp+5Ch+var_50], esi
.text:00404006                 mov     ebx, [edi]
.text:00404008                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040400C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040400F                 mov     [esp+5Ch+MaxCount], ebx
.text:00404013                 call    fprintf
.text:00404018                 jmp     short loc_403FC0
.text:00404018 ; ---------------------------------------------------------------------------
.text:0040401A                 align 10h
.text:00404020
.text:00404020 loc_404020:                             ; CODE XREF: sub_403C80+28C↑j
.text:00404020                 mov     ebx, [esp+5Ch+var_18]
.text:00404024                 cmp     dword ptr [ebx+4], 1
.text:00404028                 jnz     loc_403F23
.text:0040402E                 cmp     eax, [esp+5Ch+arg_0]
.text:00404032                 jge     short loc_404049
.text:00404034                 mov     ebx, [esp+5Ch+arg_4]
.text:00404038                 lea     edi, [ecx+2]
.text:0040403B                 mov     [ebp+0], edi
.text:0040403E                 mov     esi, [ebx+eax*4]
.text:00404041                 mov     [ebp+0Ch], esi
.text:00404044                 jmp     loc_403F23
.text:00404049 ; ---------------------------------------------------------------------------
.text:00404049
.text:00404049 loc_404049:                             ; CODE XREF: sub_403C80+3B2↑j
.text:00404049                 mov     edx, [esp+5Ch+var_14]
.text:0040404D                 test    edx, edx
.text:0040404F                 jnz     short loc_404080
.text:00404051
.text:00404051 loc_404051:                             ; CODE XREF: sub_403C80+437↓j
.text:00404051                 mov     edx, [ebp+14h]
.text:00404054                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404057                 call    strlen
.text:0040405C                 add     [ebp+14h], eax
.text:0040405F                 mov     eax, [esp+5Ch+var_18]
.text:00404063                 mov     edi, [eax+0Ch]
.text:00404066                 mov     [ebp+8], edi
.text:00404069
.text:00404069 loc_404069:                             ; CODE XREF: sub_403C80+7C2↓j
.text:00404069                 mov     ebp, [esp+5Ch+Str]
.text:0040406D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00404071                 setnz   bl
.text:00404074                 movzx   esi, bl
.text:00404077                 lea     eax, [esi+esi*4+3Ah]
.text:0040407B                 jmp     loc_403DD7
.text:00404080 ; ---------------------------------------------------------------------------
.text:00404080
.text:00404080 loc_404080:                             ; CODE XREF: sub_403C80+3CF↑j
.text:00404080                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00404087                 call    ds:libintl_gettext
.text:0040408D                 mov     ecx, [ebp+0]
.text:00404090                 mov     esi, [esp+5Ch+arg_4]
.text:00404094                 mov     ebx, [esi+ecx*4-4]
.text:00404098                 mov     ecx, ds:_iob
.text:0040409E                 mov     [esp+5Ch+var_50], ebx
.text:004040A2                 mov     edi, [esi]
.text:004040A4                 add     ecx, 40h ; '@'
.text:004040A7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004040AB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004040AE                 mov     [esp+5Ch+MaxCount], edi
.text:004040B2                 call    fprintf
.text:004040B7                 jmp     short loc_404051
.text:004040B7 ; ---------------------------------------------------------------------------
.text:004040B9                 align 10h
.text:004040C0
.text:004040C0 loc_4040C0:                             ; CODE XREF: sub_403C80+21E↑j
.text:004040C0                                         ; sub_403C80+27A↑j
.text:004040C0                 mov     eax, [esp+5Ch+arg_14]
.text:004040C4                 test    eax, eax
.text:004040C6                 jz      short loc_4040F6
.text:004040C8                 mov     ebx, [ebp+0]
.text:004040CB                 mov     esi, [esp+5Ch+arg_4]
.text:004040CF                 mov     edi, [esi+ebx*4]
.text:004040D2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004040D6                 jz      short loc_4040F9
.text:004040D8                 mov     ecx, [ebp+14h]
.text:004040DB                 mov     edx, [esp+5Ch+Str]
.text:004040DF                 movsx   ebx, byte ptr [ecx]
.text:004040E2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004040E5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004040E9                 call    strchr
.text:004040EE                 test    eax, eax
.text:004040F0                 jnz     loc_4041A0
.text:004040F6
.text:004040F6 loc_4040F6:                             ; CODE XREF: sub_403C80+446↑j
.text:004040F6                 mov     ebx, [ebp+0]
.text:004040F9
.text:004040F9 loc_4040F9:                             ; CODE XREF: sub_403C80+456↑j
.text:004040F9                 mov     eax, [esp+5Ch+var_14]
.text:004040FD                 test    eax, eax
.text:004040FF                 jz      short loc_404151
.text:00404101                 mov     esi, [esp+5Ch+arg_4]
.text:00404105                 mov     edi, [esi+ebx*4]
.text:00404108                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040410C                 jz      short loc_40416A
.text:0040410E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00404115                 call    ds:libintl_gettext
.text:0040411B                 mov     edi, [ebp+14h]
.text:0040411E                 mov     [esp+5Ch+var_4C], edi
.text:00404122                 mov     ebx, [ebp+0]
.text:00404125                 mov     edi, [esp+5Ch+arg_4]
.text:00404129                 mov     esi, [edi+ebx*4]
.text:0040412C                 movsx   ecx, byte ptr [esi]
.text:0040412F                 mov     esi, ds:_iob
.text:00404135                 add     esi, 40h ; '@'
.text:00404138                 mov     [esp+5Ch+var_50], ecx
.text:0040413C                 mov     ebx, [edi]
.text:0040413E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404142                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00404145                 mov     [esp+5Ch+MaxCount], ebx
.text:00404149                 call    fprintf
.text:0040414E
.text:0040414E loc_40414E:                             ; CODE XREF: sub_403C80+51D↓j
.text:0040414E                 mov     ebx, [ebp+0]
.text:00404151
.text:00404151 loc_404151:                             ; CODE XREF: sub_403C80+47F↑j
.text:00404151                 mov     dword ptr [ebp+14h], offset dword_403B30
.text:00404158                 lea     edx, [ebx+1]
.text:0040415B                 mov     [ebp+0], edx
.text:0040415E
.text:0040415E loc_40415E:                             ; CODE XREF: sub_403C80+999↓j
.text:0040415E                 mov     dword ptr [ebp+8], 0
.text:00404165                 jmp     loc_403FD8
.text:0040416A ; ---------------------------------------------------------------------------
.text:0040416A
.text:0040416A loc_40416A:                             ; CODE XREF: sub_403C80+48C↑j
.text:0040416A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00404171                 call    ds:libintl_gettext
.text:00404177                 mov     ecx, [ebp+14h]
.text:0040417A                 mov     edi, [esp+5Ch+arg_4]
.text:0040417E                 mov     edx, ds:_iob
.text:00404184                 mov     [esp+5Ch+var_50], ecx
.text:00404188                 mov     ebx, [edi]
.text:0040418A                 add     edx, 40h ; '@'
.text:0040418D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404191                 mov     [esp+5Ch+MaxCount], ebx
.text:00404195                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00404198                 call    fprintf
.text:0040419D                 jmp     short loc_40414E
.text:0040419D ; ---------------------------------------------------------------------------
.text:0040419F                 align 10h
.text:004041A0
.text:004041A0 loc_4041A0:                             ; CODE XREF: sub_403C80+196↑j
.text:004041A0                                         ; sub_403C80+1B5↑j ...
.text:004041A0                 mov     esi, [ebp+14h]
.text:004041A3                 movzx   ebx, byte ptr [esi]
.text:004041A6                 inc     esi
.text:004041A7                 mov     [ebp+14h], esi
.text:004041AA                 mov     ecx, [esp+5Ch+Str]
.text:004041AE                 movsx   esi, bl
.text:004041B1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004041B5                 mov     edi, esi
.text:004041B7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004041BA                 call    strchr
.text:004041BF                 mov     ecx, [ebp+14h]
.text:004041C2                 cmp     byte ptr [ecx], 0
.text:004041C5                 jnz     short loc_4041CA
.text:004041C7                 inc     dword ptr [ebp+0]
.text:004041CA
.text:004041CA loc_4041CA:                             ; CODE XREF: sub_403C80+545↑j
.text:004041CA                 test    eax, eax
.text:004041CC                 jz      loc_4045B0
.text:004041D2                 cmp     bl, 3Ah ; ':'
.text:004041D5                 jz      loc_4045B0
.text:004041DB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004041DE                 jz      loc_404296
.text:004041E4                 movzx   edx, byte ptr [eax+1]
.text:004041E8
.text:004041E8 loc_4041E8:                             ; CODE XREF: sub_403C80+61D↓j
.text:004041E8                 cmp     dl, 3Ah ; ':'
.text:004041EB                 jz      short loc_4041F4
.text:004041ED
.text:004041ED loc_4041ED:                             ; CODE XREF: sub_403C80+590↓j
.text:004041ED                 mov     eax, esi
.text:004041EF                 jmp     loc_403DD7
.text:004041F4 ; ---------------------------------------------------------------------------
.text:004041F4
.text:004041F4 loc_4041F4:                             ; CODE XREF: sub_403C80+56B↑j
.text:004041F4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004041F8                 jz      loc_404281
.text:004041FE                 cmp     byte ptr [ecx], 0
.text:00404201                 jz      short loc_404212
.text:00404203
.text:00404203 loc_404203:                             ; CODE XREF: sub_403C80+604↓j
.text:00404203                 inc     dword ptr [ebp+0]
.text:00404206                 mov     [ebp+0Ch], ecx
.text:00404209
.text:00404209 loc_404209:                             ; CODE XREF: sub_403C80+5AB↓j
.text:00404209                                         ; sub_403C80+5C6↓j ...
.text:00404209                 mov     dword ptr [ebp+14h], 0
.text:00404210                 jmp     short loc_4041ED
.text:00404212 ; ---------------------------------------------------------------------------
.text:00404212
.text:00404212 loc_404212:                             ; CODE XREF: sub_403C80+581↑j
.text:00404212                 mov     ecx, [ebp+0]
.text:00404215                 cmp     ecx, [esp+5Ch+arg_0]
.text:00404219                 jz      short loc_40422D
.text:0040421B                 mov     eax, [esp+5Ch+arg_4]
.text:0040421F                 lea     edx, [ecx+1]
.text:00404222                 mov     [ebp+0], edx
.text:00404225                 mov     ebx, [eax+ecx*4]
.text:00404228                 mov     [ebp+0Ch], ebx
.text:0040422B                 jmp     short loc_404209
.text:0040422D ; ---------------------------------------------------------------------------
.text:0040422D
.text:0040422D loc_40422D:                             ; CODE XREF: sub_403C80+599↑j
.text:0040422D                 mov     ecx, [esp+5Ch+var_14]
.text:00404231                 test    ecx, ecx
.text:00404233                 jnz     short loc_40424F
.text:00404235
.text:00404235 loc_404235:                             ; CODE XREF: sub_403C80+5FF↓j
.text:00404235                 mov     [ebp+8], edi
.text:00404238                 mov     edi, [esp+5Ch+Str]
.text:0040423C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040423F                 jz      short loc_404248
.text:00404241                 mov     esi, 3Fh ; '?'
.text:00404246                 jmp     short loc_404209
.text:00404248 ; ---------------------------------------------------------------------------
.text:00404248
.text:00404248 loc_404248:                             ; CODE XREF: sub_403C80+5BF↑j
.text:00404248                 mov     esi, 3Ah ; ':'
.text:0040424D                 jmp     short loc_404209
.text:0040424F ; ---------------------------------------------------------------------------
.text:0040424F
.text:0040424F loc_40424F:                             ; CODE XREF: sub_403C80+5B3↑j
.text:0040424F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00404256                 call    ds:libintl_gettext
.text:0040425C                 mov     [esp+5Ch+var_50], edi
.text:00404260                 mov     ebx, [esp+5Ch+arg_4]
.text:00404264                 mov     edx, ds:_iob
.text:0040426A                 mov     esi, [ebx]
.text:0040426C                 add     edx, 40h ; '@'
.text:0040426F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404273                 mov     [esp+5Ch+MaxCount], esi
.text:00404277                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040427A                 call    fprintf
.text:0040427F                 jmp     short loc_404235
.text:00404281 ; ---------------------------------------------------------------------------
.text:00404281
.text:00404281 loc_404281:                             ; CODE XREF: sub_403C80+578↑j
.text:00404281                 cmp     byte ptr [ecx], 0
.text:00404284                 jnz     loc_404203
.text:0040428A                 mov     dword ptr [ebp+0Ch], 0
.text:00404291                 jmp     loc_404209
.text:00404296 ; ---------------------------------------------------------------------------
.text:00404296
.text:00404296 loc_404296:                             ; CODE XREF: sub_403C80+55E↑j
.text:00404296                 movzx   edx, byte ptr [eax+1]
.text:0040429A                 cmp     dl, 3Bh ; ';'
.text:0040429D                 jnz     loc_4041E8
.text:004042A3                 mov     [esp+5Ch+var_2C], 0
.text:004042AB                 mov     [esp+5Ch+var_30], 0
.text:004042B3                 mov     [esp+5Ch+var_34], 0
.text:004042BB                 mov     [esp+5Ch+var_38], 0
.text:004042C3                 cmp     byte ptr [ecx], 0
.text:004042C6                 jz      loc_40453B
.text:004042CC                 inc     dword ptr [ebp+0]
.text:004042CF                 mov     [ebp+0Ch], ecx
.text:004042D2
.text:004042D2 loc_4042D2:                             ; CODE XREF: sub_403C80+8D4↓j
.text:004042D2                 mov     edi, [ebp+0Ch]
.text:004042D5                 mov     [ebp+14h], edi
.text:004042D8                 movzx   eax, byte ptr [edi]
.text:004042DB                 test    al, al
.text:004042DD                 jz      short loc_4042EF
.text:004042DF                 cmp     al, 3Dh ; '='
.text:004042E1                 jz      short loc_4042EF
.text:004042E3
.text:004042E3 loc_4042E3:                             ; CODE XREF: sub_403C80+66D↓j
.text:004042E3                 inc     edi
.text:004042E4                 movzx   eax, byte ptr [edi]
.text:004042E7                 test    al, al
.text:004042E9                 jz      short loc_4042EF
.text:004042EB                 cmp     al, 3Dh ; '='
.text:004042ED                 jnz     short loc_4042E3
.text:004042EF
.text:004042EF loc_4042EF:                             ; CODE XREF: sub_403C80+65D↑j
.text:004042EF                                         ; sub_403C80+661↑j ...
.text:004042EF                 mov     [esp+5Ch+var_3C], 0
.text:004042F7                 mov     esi, [esp+5Ch+arg_C]
.text:004042FB                 mov     eax, [esi]
.text:004042FD                 test    eax, eax
.text:004042FF                 jz      loc_404480
.text:00404305                 mov     ecx, eax
.text:00404307
.text:00404307 loc_404307:                             ; CODE XREF: sub_403C80+6B3↓j
.text:00404307                 mov     ebx, [ebp+14h]
.text:0040430A                 mov     eax, edi
.text:0040430C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040430F                 sub     eax, ebx
.text:00404311                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00404315                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00404319                 call    strncmp
.text:0040431E                 test    eax, eax
.text:00404320                 jz      loc_4044E7
.text:00404326
.text:00404326 loc_404326:                             ; CODE XREF: sub_403C80+88C↓j
.text:00404326                                         ; sub_403C80+89D↓j
.text:00404326                 inc     [esp+5Ch+var_3C]
.text:0040432A                 add     esi, 10h
.text:0040432D                 mov     edx, [esi]
.text:0040432F                 test    edx, edx
.text:00404331                 mov     ecx, edx
.text:00404333                 jnz     short loc_404307
.text:00404335
.text:00404335 loc_404335:                             ; CODE XREF: sub_403C80+8B6↓j
.text:00404335                 mov     esi, [esp+5Ch+var_34]
.text:00404339                 test    esi, esi
.text:0040433B                 jz      short loc_404349
.text:0040433D                 mov     ebx, [esp+5Ch+var_30]
.text:00404341                 test    ebx, ebx
.text:00404343                 jz      loc_404491
.text:00404349
.text:00404349 loc_404349:                             ; CODE XREF: sub_403C80+6BB↑j
.text:00404349                 mov     esi, [esp+5Ch+var_2C]
.text:0040434D                 test    esi, esi
.text:0040434F                 jz      loc_404480
.text:00404355                 cmp     byte ptr [edi], 0
.text:00404358                 jz      loc_404400
.text:0040435E                 mov     ecx, [esp+5Ch+var_2C]
.text:00404362                 mov     ebx, [ecx+4]
.text:00404365                 test    ebx, ebx
.text:00404367                 jz      short loc_4043A8
.text:00404369                 lea     edx, [edi+1]
.text:0040436C                 mov     [ebp+0Ch], edx
.text:0040436F
.text:0040436F loc_40436F:                             ; CODE XREF: sub_403C80+788↓j
.text:0040436F                                         ; sub_403C80+7A7↓j
.text:0040436F                 mov     edi, [ebp+14h]
.text:00404372                 mov     [esp+5Ch+Str1], edi ; Str
.text:00404375                 call    strlen
.text:0040437A                 add     [ebp+14h], eax
.text:0040437D                 mov     eax, [esp+5Ch+arg_10]
.text:00404381                 test    eax, eax
.text:00404383                 jz      short loc_404390
.text:00404385                 mov     edx, [esp+5Ch+var_38]
.text:00404389                 mov     ebp, [esp+5Ch+arg_10]
.text:0040438D                 mov     [ebp+0], edx
.text:00404390
.text:00404390 loc_404390:                             ; CODE XREF: sub_403C80+703↑j
.text:00404390                 mov     eax, [esp+5Ch+var_2C]
.text:00404394                 mov     ecx, [eax+8]
.text:00404397                 test    ecx, ecx
.text:00404399                 jnz     loc_403F5A
.text:0040439F                 mov     ecx, [esp+5Ch+var_2C]
.text:004043A3                 jmp     loc_403F52
.text:004043A8 ; ---------------------------------------------------------------------------
.text:004043A8
.text:004043A8 loc_4043A8:                             ; CODE XREF: sub_403C80+6E7↑j
.text:004043A8                 mov     eax, [esp+5Ch+var_14]
.text:004043AC                 test    eax, eax
.text:004043AE                 jnz     short loc_4043C3
.text:004043B0
.text:004043B0 loc_4043B0:                             ; CODE XREF: sub_403C80+779↓j
.text:004043B0                 mov     ecx, [ebp+14h]
.text:004043B3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004043B6                 call    strlen
.text:004043BB                 add     [ebp+14h], eax
.text:004043BE                 jmp     loc_403FD8
.text:004043C3 ; ---------------------------------------------------------------------------
.text:004043C3
.text:004043C3 loc_4043C3:                             ; CODE XREF: sub_403C80+72E↑j
.text:004043C3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004043CA                 call    ds:libintl_gettext
.text:004043D0                 mov     edx, [esp+5Ch+var_2C]
.text:004043D4                 mov     ebx, [esp+5Ch+arg_4]
.text:004043D8                 mov     edi, [edx]
.text:004043DA                 mov     [esp+5Ch+var_50], edi
.text:004043DE                 mov     edi, ds:_iob
.text:004043E4                 mov     esi, [ebx]
.text:004043E6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004043EA                 add     edi, 40h ; '@'
.text:004043ED                 mov     [esp+5Ch+MaxCount], esi
.text:004043F1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:004043F4                 call    fprintf
.text:004043F9                 jmp     short loc_4043B0
.text:004043F9 ; ---------------------------------------------------------------------------
.text:004043FB                 align 10h
.text:00404400
.text:00404400 loc_404400:                             ; CODE XREF: sub_403C80+6D8↑j
.text:00404400                 mov     esi, [esp+5Ch+var_2C]
.text:00404404                 cmp     dword ptr [esi+4], 1
.text:00404408                 jnz     loc_40436F
.text:0040440E                 mov     ecx, [ebp+0]
.text:00404411                 cmp     ecx, [esp+5Ch+arg_0]
.text:00404415                 jge     short loc_40442C
.text:00404417                 mov     eax, [esp+5Ch+arg_4]
.text:0040441B                 lea     ebx, [ecx+1]
.text:0040441E                 mov     [ebp+0], ebx
.text:00404421                 mov     edi, [eax+ecx*4]
.text:00404424                 mov     [ebp+0Ch], edi
.text:00404427                 jmp     loc_40436F
.text:0040442C ; ---------------------------------------------------------------------------
.text:0040442C
.text:0040442C loc_40442C:                             ; CODE XREF: sub_403C80+795↑j
.text:0040442C                 mov     edx, [esp+5Ch+var_14]
.text:00404430                 test    edx, edx
.text:00404432                 jnz     short loc_404447
.text:00404434
.text:00404434 loc_404434:                             ; CODE XREF: sub_403C80+7FE↓j
.text:00404434                 mov     edx, [ebp+14h]
.text:00404437                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040443A                 call    strlen
.text:0040443F                 add     [ebp+14h], eax
.text:00404442                 jmp     loc_404069
.text:00404447 ; ---------------------------------------------------------------------------
.text:00404447
.text:00404447 loc_404447:                             ; CODE XREF: sub_403C80+7B2↑j
.text:00404447                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040444E                 call    ds:libintl_gettext
.text:00404454                 mov     ecx, [ebp+0]
.text:00404457                 mov     ebx, [esp+5Ch+arg_4]
.text:0040445B                 mov     edi, [ebx+ecx*4-4]
.text:0040445F                 mov     ecx, ds:_iob
.text:00404465                 mov     [esp+5Ch+var_50], edi
.text:00404469                 mov     esi, [ebx]
.text:0040446B                 add     ecx, 40h ; '@'
.text:0040446E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404472                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404475                 mov     [esp+5Ch+MaxCount], esi
.text:00404479                 call    fprintf
.text:0040447E                 jmp     short loc_404434
.text:00404480 ; ---------------------------------------------------------------------------
.text:00404480
.text:00404480 loc_404480:                             ; CODE XREF: sub_403C80+67F↑j
.text:00404480                                         ; sub_403C80+6CF↑j
.text:00404480                 mov     dword ptr [ebp+14h], 0
.text:00404487                 mov     eax, 57h ; 'W'
.text:0040448C                 jmp     loc_403DD7
.text:00404491 ; ---------------------------------------------------------------------------
.text:00404491
.text:00404491 loc_404491:                             ; CODE XREF: sub_403C80+6C3↑j
.text:00404491                 mov     edi, [esp+5Ch+var_14]
.text:00404495                 test    edi, edi
.text:00404497                 jnz     short loc_4044AF
.text:00404499
.text:00404499 loc_404499:                             ; CODE XREF: sub_403C80+865↓j
.text:00404499                 mov     edx, [ebp+14h]
.text:0040449C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040449F                 call    strlen
.text:004044A4                 add     [ebp+14h], eax
.text:004044A7                 inc     dword ptr [ebp+0]
.text:004044AA                 jmp     loc_403FD8
.text:004044AF ; ---------------------------------------------------------------------------
.text:004044AF
.text:004044AF loc_4044AF:                             ; CODE XREF: sub_403C80+817↑j
.text:004044AF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004044B6                 call    ds:libintl_gettext
.text:004044BC                 mov     ecx, [ebp+0]
.text:004044BF                 mov     ebx, [esp+5Ch+arg_4]
.text:004044C3                 mov     edi, [ebx+ecx*4]
.text:004044C6                 mov     ecx, ds:_iob
.text:004044CC                 mov     [esp+5Ch+var_50], edi
.text:004044D0                 mov     esi, [ebx]
.text:004044D2                 add     ecx, 40h ; '@'
.text:004044D5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004044D9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004044DC                 mov     [esp+5Ch+MaxCount], esi
.text:004044E0                 call    fprintf
.text:004044E5                 jmp     short loc_404499
.text:004044E7 ; ---------------------------------------------------------------------------
.text:004044E7
.text:004044E7 loc_4044E7:                             ; CODE XREF: sub_403C80+6A0↑j
.text:004044E7                 mov     edx, [ebp+14h]
.text:004044EA                 mov     ebx, edi
.text:004044EC                 mov     ecx, [esi]
.text:004044EE                 sub     ebx, edx
.text:004044F0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004044F3                 call    strlen
.text:004044F8                 cmp     ebx, eax
.text:004044FA                 jz      short loc_404522
.text:004044FC                 mov     ebx, [esp+5Ch+var_2C]
.text:00404500                 test    ebx, ebx
.text:00404502                 jz      short loc_404511
.text:00404504                 mov     [esp+5Ch+var_34], 1
.text:0040450C                 jmp     loc_404326
.text:00404511 ; ---------------------------------------------------------------------------
.text:00404511
.text:00404511 loc_404511:                             ; CODE XREF: sub_403C80+882↑j
.text:00404511                 mov     [esp+5Ch+var_2C], esi
.text:00404515                 mov     ecx, [esp+5Ch+var_3C]
.text:00404519                 mov     [esp+5Ch+var_38], ecx
.text:0040451D                 jmp     loc_404326
.text:00404522 ; ---------------------------------------------------------------------------
.text:00404522
.text:00404522 loc_404522:                             ; CODE XREF: sub_403C80+87A↑j
.text:00404522                 mov     [esp+5Ch+var_2C], esi
.text:00404526                 mov     eax, [esp+5Ch+var_3C]
.text:0040452A                 mov     [esp+5Ch+var_30], 1
.text:00404532                 mov     [esp+5Ch+var_38], eax
.text:00404536                 jmp     loc_404335
.text:0040453B ; ---------------------------------------------------------------------------
.text:0040453B
.text:0040453B loc_40453B:                             ; CODE XREF: sub_403C80+646↑j
.text:0040453B                 mov     edx, [ebp+0]
.text:0040453E                 cmp     edx, [esp+5Ch+arg_0]
.text:00404542                 jz      short loc_404559
.text:00404544                 mov     ebx, [esp+5Ch+arg_4]
.text:00404548                 lea     esi, [edx+1]
.text:0040454B                 mov     [ebp+0], esi
.text:0040454E                 mov     edi, [ebx+edx*4]
.text:00404551                 mov     [ebp+0Ch], edi
.text:00404554                 jmp     loc_4042D2
.text:00404559 ; ---------------------------------------------------------------------------
.text:00404559
.text:00404559 loc_404559:                             ; CODE XREF: sub_403C80+8C2↑j
.text:00404559                 mov     edi, [esp+5Ch+var_14]
.text:0040455D                 test    edi, edi
.text:0040455F                 jnz     short loc_40457C
.text:00404561
.text:00404561 loc_404561:                             ; CODE XREF: sub_403C80+92C↓j
.text:00404561                 mov     [ebp+8], esi
.text:00404564                 mov     ebp, [esp+5Ch+Str]
.text:00404568                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040456C                 jz      short loc_404578
.text:0040456E                 mov     bl, 3Fh ; '?'
.text:00404570
.text:00404570 loc_404570:                             ; CODE XREF: sub_403C80+8FA↓j
.text:00404570                 movsx   eax, bl
.text:00404573                 jmp     loc_403DD7
.text:00404578 ; ---------------------------------------------------------------------------
.text:00404578
.text:00404578 loc_404578:                             ; CODE XREF: sub_403C80+8EC↑j
.text:00404578                 mov     bl, 3Ah ; ':'
.text:0040457A                 jmp     short loc_404570
.text:0040457C ; ---------------------------------------------------------------------------
.text:0040457C
.text:0040457C loc_40457C:                             ; CODE XREF: sub_403C80+8DF↑j
.text:0040457C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00404583                 call    ds:libintl_gettext
.text:00404589                 mov     [esp+5Ch+var_50], esi
.text:0040458D                 mov     edx, [esp+5Ch+arg_4]
.text:00404591                 mov     ecx, ds:_iob
.text:00404597                 mov     ebx, [edx]
.text:00404599                 add     ecx, 40h ; '@'
.text:0040459C                 mov     [esp+5Ch+Str2], eax ; Format
.text:004045A0                 mov     [esp+5Ch+MaxCount], ebx
.text:004045A4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004045A7                 call    fprintf
.text:004045AC                 jmp     short loc_404561
.text:004045AC ; ---------------------------------------------------------------------------
.text:004045AE                 align 10h
.text:004045B0
.text:004045B0 loc_4045B0:                             ; CODE XREF: sub_403C80+54C↑j
.text:004045B0                                         ; sub_403C80+555↑j
.text:004045B0                 mov     eax, [esp+5Ch+var_14]
.text:004045B4                 test    eax, eax
.text:004045B6                 jz      short loc_4045EF
.text:004045B8                 mov     ebx, [ebp+1Ch]
.text:004045BB                 test    ebx, ebx
.text:004045BD                 jz      short loc_4045F7
.text:004045BF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004045C6
.text:004045C6 loc_4045C6:                             ; CODE XREF: sub_403C80+97E↓j
.text:004045C6                 call    ds:libintl_gettext
.text:004045CC                 mov     [esp+5Ch+var_50], esi
.text:004045D0                 mov     ebx, [esp+5Ch+arg_4]
.text:004045D4                 mov     edx, ds:_iob
.text:004045DA                 mov     esi, [ebx]
.text:004045DC                 add     edx, 40h ; '@'
.text:004045DF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004045E3                 mov     [esp+5Ch+MaxCount], esi
.text:004045E7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004045EA                 call    fprintf
.text:004045EF
.text:004045EF loc_4045EF:                             ; CODE XREF: sub_403C80+936↑j
.text:004045EF                 mov     [ebp+8], edi
.text:004045F2                 jmp     loc_403FD8
.text:004045F7 ; ---------------------------------------------------------------------------
.text:004045F7
.text:004045F7 loc_4045F7:                             ; CODE XREF: sub_403C80+93D↑j
.text:004045F7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:004045FE                 jmp     short loc_4045C6
.text:00404600 ; ---------------------------------------------------------------------------
.text:00404600
.text:00404600 loc_404600:                             ; CODE XREF: sub_403C80+26E↑j
.text:00404600                 mov     edi, [esp+5Ch+var_14]
.text:00404604                 test    edi, edi
.text:00404606                 jnz     short loc_40461E
.text:00404608
.text:00404608 loc_404608:                             ; CODE XREF: sub_403C80+9D4↓j
.text:00404608                 mov     edx, [ebp+14h]
.text:0040460B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040460E                 call    strlen
.text:00404613                 add     [ebp+14h], eax
.text:00404616                 inc     dword ptr [ebp+0]
.text:00404619                 jmp     loc_40415E
.text:0040461E ; ---------------------------------------------------------------------------
.text:0040461E
.text:0040461E loc_40461E:                             ; CODE XREF: sub_403C80+986↑j
.text:0040461E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00404625                 call    ds:libintl_gettext
.text:0040462B                 mov     ebx, [ebp+0]
.text:0040462E                 mov     edi, [esp+5Ch+arg_4]
.text:00404632                 mov     ecx, [edi+ebx*4]
.text:00404635                 mov     ebx, ds:_iob
.text:0040463B                 mov     [esp+5Ch+var_50], ecx
.text:0040463F                 mov     esi, [edi]
.text:00404641                 add     ebx, 40h ; '@'
.text:00404644                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404648                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040464B                 mov     [esp+5Ch+MaxCount], esi
.text:0040464F                 call    fprintf
.text:00404654                 jmp     short loc_404608
.text:00404656 ; ---------------------------------------------------------------------------
.text:00404656
.text:00404656 loc_404656:                             ; CODE XREF: sub_403C80+246↑j
.text:00404656                 mov     ecx, [ebp+14h]
.text:00404659                 mov     ebx, edi
.text:0040465B                 mov     edx, [esi]
.text:0040465D                 sub     ebx, ecx
.text:0040465F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404662                 call    strlen
.text:00404667                 cmp     ebx, eax
.text:00404669                 jz      short loc_4046C1
.text:0040466B                 mov     ebx, [esp+5Ch+var_18]
.text:0040466F                 test    ebx, ebx
.text:00404671                 jz      short loc_4046B0
.text:00404673                 mov     edx, [esp+5Ch+arg_14]
.text:00404677                 test    edx, edx
.text:00404679                 jnz     short loc_404687
.text:0040467B                 mov     ecx, [esp+5Ch+var_18]
.text:0040467F                 mov     ebx, [esi+4]
.text:00404682                 cmp     [ecx+4], ebx
.text:00404685                 jz      short loc_404694
.text:00404687
.text:00404687 loc_404687:                             ; CODE XREF: sub_403C80+9F9↑j
.text:00404687                                         ; sub_403C80+A1A↓j ...
.text:00404687                 mov     [esp+5Ch+var_20], 1
.text:0040468F                 jmp     loc_403ECC
.text:00404694 ; ---------------------------------------------------------------------------
.text:00404694
.text:00404694 loc_404694:                             ; CODE XREF: sub_403C80+A05↑j
.text:00404694                 mov     edx, [esi+8]
.text:00404697                 cmp     [ecx+8], edx
.text:0040469A                 jnz     short loc_404687
.text:0040469C                 mov     ebx, [esi+0Ch]
.text:0040469F                 cmp     [ecx+0Ch], ebx
.text:004046A2                 jnz     short loc_404687
.text:004046A4                 jmp     loc_403ECC
.text:004046A4 ; ---------------------------------------------------------------------------
.text:004046A9                 align 10h
.text:004046B0
.text:004046B0 loc_4046B0:                             ; CODE XREF: sub_403C80+9F1↑j
.text:004046B0                 mov     [esp+5Ch+var_18], esi
.text:004046B4                 mov     eax, [esp+5Ch+var_28]
.text:004046B8                 mov     [esp+5Ch+var_24], eax
.text:004046BC                 jmp     loc_403ECC
.text:004046C1 ; ---------------------------------------------------------------------------
.text:004046C1
.text:004046C1 loc_4046C1:                             ; CODE XREF: sub_403C80+9E9↑j
.text:004046C1                 mov     [esp+5Ch+var_18], esi
.text:004046C5                 mov     ecx, [esp+5Ch+var_28]
.text:004046C9                 mov     [esp+5Ch+var_1C], 1
.text:004046D1                 mov     [esp+5Ch+var_24], ecx
.text:004046D5                 jmp     loc_403EE0
.text:004046DA ; ---------------------------------------------------------------------------
.text:004046DA
.text:004046DA loc_4046DA:                             ; CODE XREF: sub_403C80+1BF↑j
.text:004046DA                 mov     eax, [esp+5Ch+Str]
.text:004046DE                 movsx   esi, dl
.text:004046E1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004046E5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004046E8                 call    strchr
.text:004046ED                 test    eax, eax
.text:004046EF                 jnz     loc_4041A0
.text:004046F5                 jmp     loc_403E45
.text:004046FA ; ---------------------------------------------------------------------------
.text:004046FA
.text:004046FA loc_4046FA:                             ; CODE XREF: sub_403C80+17C↑j
.text:004046FA                 mov     ecx, 1
.text:004046FF                 jmp     loc_403E02
.text:00404704 ; ---------------------------------------------------------------------------
.text:00404704
.text:00404704 loc_404704:                             ; CODE XREF: sub_403C80+D4↑j
.text:00404704                                         ; sub_403C80+130↑j
.text:00404704                 mov     eax, [ebp+20h]
.text:00404707                 cmp     eax, [ebp+24h]
.text:0040470A                 jz      loc_403DE0
.text:00404710                 mov     [ebp+0], eax
.text:00404713                 jmp     loc_403DE0
.text:00404718 ; ---------------------------------------------------------------------------
.text:00404718
.text:00404718 loc_404718:                             ; CODE XREF: sub_403C80+FE↑j
.text:00404718                 mov     [ebp+20h], eax
.text:0040471B                 jmp     loc_403DA0
.text:00404720 ; ---------------------------------------------------------------------------
.text:00404720
.text:00404720 loc_404720:                             ; CODE XREF: sub_403C80+CA↑j
.text:00404720                 mov     edx, [ebp+20h]
.text:00404723                 mov     eax, [ebp+24h]
.text:00404726                 cmp     edx, eax
.text:00404728                 jz      short loc_4047A0
.text:0040472A                 cmp     eax, ebx
.text:0040472C                 jz      short loc_404741
.text:0040472E                 mov     [esp+5Ch+Str2], ebp
.text:00404732                 mov     ebx, [esp+5Ch+arg_4]
.text:00404736                 mov     [esp+5Ch+Str1], ebx
.text:00404739                 call    sub_404930
.text:0040473E                 mov     ebx, [ebp+0]
.text:00404741
.text:00404741 loc_404741:                             ; CODE XREF: sub_403C80+AAC↑j
.text:00404741                                         ; sub_403C80+B22↓j ...
.text:00404741                 cmp     ebx, [esp+5Ch+arg_0]
.text:00404745                 jge     short loc_404790
.text:00404747                 mov     esi, [esp+5Ch+arg_4]
.text:0040474B                 mov     eax, [esi+ebx*4]
.text:0040474E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00404751                 jz      short loc_404798
.text:00404753                 lea     esi, [esi+0]
.text:00404759                 lea     edi, [edi+0]
.text:00404760
.text:00404760 loc_404760:                             ; CODE XREF: sub_403C80+AFC↓j
.text:00404760                                         ; sub_403C80+B1C↓j
.text:00404760                 lea     eax, [ebx+1]
.text:00404763                 mov     ebx, eax
.text:00404765                 mov     [ebp+0], eax
.text:00404768                 cmp     eax, [esp+5Ch+arg_0]
.text:0040476C                 jge     short loc_404790
.text:0040476E                 mov     edi, [esp+5Ch+arg_4]
.text:00404772                 mov     edx, [edi+eax*4]
.text:00404775                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00404778                 jz      short loc_404780
.text:0040477A
.text:0040477A loc_40477A:                             ; CODE XREF: sub_403C80+B04↓j
.text:0040477A                 mov     ebx, eax
.text:0040477C                 jmp     short loc_404760
.text:0040477C ; ---------------------------------------------------------------------------
.text:0040477E                 align 10h
.text:00404780
.text:00404780 loc_404780:                             ; CODE XREF: sub_403C80+AF8↑j
.text:00404780                 cmp     byte ptr [edx+1], 0
.text:00404784                 jz      short loc_40477A
.text:00404786                 lea     esi, [esi+0]
.text:00404789                 lea     edi, [edi+0]
.text:00404790
.text:00404790 loc_404790:                             ; CODE XREF: sub_403C80+AC5↑j
.text:00404790                                         ; sub_403C80+AEC↑j ...
.text:00404790                 mov     [ebp+24h], ebx
.text:00404793                 jmp     loc_403D50
.text:00404798 ; ---------------------------------------------------------------------------
.text:00404798
.text:00404798 loc_404798:                             ; CODE XREF: sub_403C80+AD1↑j
.text:00404798                 cmp     byte ptr [eax+1], 0
.text:0040479C                 jz      short loc_404760
.text:0040479E                 jmp     short loc_404790
.text:004047A0 ; ---------------------------------------------------------------------------
.text:004047A0
.text:004047A0 loc_4047A0:                             ; CODE XREF: sub_403C80+AA8↑j
.text:004047A0                 cmp     edx, ebx
.text:004047A2                 jz      short loc_404741
.text:004047A4                 mov     [ebp+20h], ebx
.text:004047A7                 jmp     short loc_404741
.text:004047A9 ; ---------------------------------------------------------------------------
.text:004047A9
.text:004047A9 loc_4047A9:                             ; CODE XREF: sub_403C80+88↑j
.text:004047A9                 mov     dword ptr [ebp+18h], 0
.text:004047B0                 mov     esi, [esp+5Ch+Str]
.text:004047B4
.text:004047B4 loc_4047B4:                             ; CODE XREF: sub_403C80+B49↓j
.text:004047B4                 inc     esi
.text:004047B5                 jmp     loc_403D18
.text:004047B5 ; ---------------------------------------------------------------------------
.text:004047BA                 align 10h
.text:004047C0
.text:004047C0 loc_4047C0:                             ; CODE XREF: sub_403C80+80↑j
.text:004047C0                 mov     dword ptr [ebp+18h], 2
.text:004047C7                 mov     esi, ecx
.text:004047C9                 jmp     short loc_4047B4
.text:004047C9 ; ---------------------------------------------------------------------------
.text:004047CB                 align 10h
.text:004047D0
.text:004047D0 loc_4047D0:                             ; CODE XREF: sub_403C80+69↑j
.text:004047D0                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:004047D7                 call    getenv
.text:004047DC                 test    eax, eax
.text:004047DE                 jz      loc_403CF4
.text:004047E4                 jmp     loc_403CEF
.text:004047E4 ; ---------------------------------------------------------------------------
.text:004047E9                 align 10h
.text:004047F0
.text:004047F0 loc_4047F0:                             ; CODE XREF: sub_403C80+3F↑j
.text:004047F0                 mov     dword ptr [ebp+0], 1
.text:004047F7                 mov     ebx, 1
.text:004047FC                 jmp     loc_403CD0
.text:004047FC sub_403C80      endp
.text:004047FC
.text:00404801 ; ---------------------------------------------------------------------------
.text:00404801                 jmp     short sub_404810
.text:00404801 ; ---------------------------------------------------------------------------
.text:00404803                 align 10h
.text:00404810
.text:00404810 ; =============== S U B R O U T I N E =======================================
.text:00404810
.text:00404810
.text:00404810 ; int __cdecl sub_404810(int, int, char *, int, int, int, int)
.text:00404810 sub_404810      proc near               ; CODE XREF: .text:00404801↑j
.text:00404810                                         ; sub_405490+3A↓p ...
.text:00404810
.text:00404810 var_2C          = dword ptr -2Ch
.text:00404810 var_28          = dword ptr -28h
.text:00404810 Str             = dword ptr -24h
.text:00404810 var_20          = dword ptr -20h
.text:00404810 var_1C          = dword ptr -1Ch
.text:00404810 var_18          = dword ptr -18h
.text:00404810 var_14          = dword ptr -14h
.text:00404810 var_10          = dword ptr -10h
.text:00404810 arg_0           = dword ptr  4
.text:00404810 arg_4           = dword ptr  8
.text:00404810 arg_8           = dword ptr  0Ch
.text:00404810 arg_C           = dword ptr  10h
.text:00404810 arg_10          = dword ptr  14h
.text:00404810 arg_14          = dword ptr  18h
.text:00404810 arg_18          = dword ptr  1Ch
.text:00404810
.text:00404810                 sub     esp, 2Ch
.text:00404813                 mov     edx, dword_413010
.text:00404819                 mov     [esp+2Ch+var_10], offset dword_4140D0 ; int
.text:00404821                 mov     ecx, dword_413014
.text:00404827                 mov     ds:dword_4140D0, edx
.text:0040482D                 mov     edx, [esp+2Ch+arg_18]
.text:00404831                 mov     ds:dword_4140D4, ecx
.text:00404837                 mov     ecx, [esp+2Ch+arg_14]
.text:0040483B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040483F                 mov     edx, [esp+2Ch+arg_10]
.text:00404843                 mov     [esp+2Ch+var_18], ecx ; int
.text:00404847                 mov     ecx, [esp+2Ch+arg_C]
.text:0040484B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040484F                 mov     edx, [esp+2Ch+arg_8]
.text:00404853                 mov     [esp+2Ch+var_20], ecx ; int
.text:00404857                 mov     ecx, [esp+2Ch+arg_4]
.text:0040485B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040485F                 mov     edx, [esp+2Ch+arg_0]
.text:00404863                 mov     [esp+2Ch+var_28], ecx ; int
.text:00404867                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040486A                 call    sub_403C80
.text:0040486F                 mov     ecx, ds:dword_4140D0
.text:00404875                 mov     dword_413010, ecx
.text:0040487B                 mov     ecx, ds:dword_4140DC
.text:00404881                 mov     ds:dword_4145E0, ecx
.text:00404887                 mov     ecx, ds:dword_4140D8
.text:0040488D                 mov     dword_413018, ecx
.text:00404893                 add     esp, 2Ch
.text:00404896                 retn
.text:00404896 sub_404810      endp
.text:00404896
.text:00404896 ; ---------------------------------------------------------------------------
.text:00404897                 align 10h
.text:004048A0                 sub     esp, 2Ch
.text:004048A3                 mov     edx, dword_413010
.text:004048A9                 mov     dword ptr [esp+1Ch], offset dword_4140D0
.text:004048B1                 mov     ecx, dword_413014
.text:004048B7                 mov     dword ptr [esp+18h], 1
.text:004048BF                 mov     ds:dword_4140D0, edx
.text:004048C5                 mov     edx, [esp+38h]
.text:004048C9                 mov     ds:dword_4140D4, ecx
.text:004048CF                 mov     ecx, [esp+34h]
.text:004048D3                 mov     [esp+8], edx
.text:004048D7                 mov     edx, [esp+30h]
.text:004048DB                 mov     [esp+4], ecx
.text:004048DF                 mov     dword ptr [esp+14h], 0
.text:004048E7                 mov     dword ptr [esp+10h], 0
.text:004048EF                 mov     dword ptr [esp+0Ch], 0
.text:004048F7                 mov     [esp], edx
.text:004048FA                 call    sub_403C80
.text:004048FF                 mov     ecx, ds:dword_4140D0
.text:00404905                 mov     dword_413010, ecx
.text:0040490B                 mov     ecx, ds:dword_4140DC
.text:00404911                 mov     ds:dword_4145E0, ecx
.text:00404917                 mov     ecx, ds:dword_4140D8
.text:0040491D                 mov     dword_413018, ecx
.text:00404923                 add     esp, 2Ch
.text:00404926                 retn
.text:00404926 ; ---------------------------------------------------------------------------
.text:00404927                 align 10h
.text:00404930
.text:00404930 ; =============== S U B R O U T I N E =======================================
.text:00404930
.text:00404930
.text:00404930 sub_404930      proc near               ; CODE XREF: sub_403C80+113↑p
.text:00404930                                         ; sub_403C80+AB9↑p
.text:00404930
.text:00404930 var_2C          = dword ptr -2Ch
.text:00404930 var_28          = dword ptr -28h
.text:00404930 var_24          = dword ptr -24h
.text:00404930 var_20          = dword ptr -20h
.text:00404930 var_1C          = dword ptr -1Ch
.text:00404930 var_18          = dword ptr -18h
.text:00404930 var_14          = dword ptr -14h
.text:00404930 arg_0           = dword ptr  4
.text:00404930 arg_4           = dword ptr  8
.text:00404930
.text:00404930                 push    ebp
.text:00404931                 push    edi
.text:00404932                 push    esi
.text:00404933                 push    ebx
.text:00404934                 sub     esp, 1Ch
.text:00404937                 mov     ecx, [esp+2Ch+arg_4]
.text:0040493B                 mov     eax, [esp+2Ch+arg_4]
.text:0040493F                 mov     ebx, [esp+2Ch+arg_4]
.text:00404943                 mov     edx, [ecx+20h]
.text:00404946                 mov     edi, [esp+2Ch+arg_0]
.text:0040494A                 mov     ecx, [ebx]
.text:0040494C                 mov     [esp+2Ch+var_2C], edx
.text:0040494F                 mov     [esp+2Ch+var_14], edx
.text:00404953                 mov     edx, [eax+24h]
.text:00404956                 mov     [esp+2Ch+var_28], ecx
.text:0040495A                 mov     [esp+2Ch+var_1C], ecx
.text:0040495E                 cmp     ecx, edx
.text:00404960                 mov     [esp+2Ch+var_18], edx
.text:00404964                 jle     short loc_4049E0
.text:00404966                 mov     esi, [esp+2Ch+var_2C]
.text:00404969                 cmp     edx, esi
.text:0040496B                 jle     short loc_4049E0
.text:0040496D                 lea     esi, [esi+0]
.text:00404970
.text:00404970 loc_404970:                             ; CODE XREF: sub_404930+A1↓j
.text:00404970                 mov     ebx, [esp+2Ch+var_1C]
.text:00404974                 mov     edx, [esp+2Ch+var_18]
.text:00404978                 mov     ebp, [esp+2Ch+var_18]
.text:0040497C                 mov     eax, [esp+2Ch+var_14]
.text:00404980                 sub     ebx, edx
.text:00404982                 mov     [esp+2Ch+var_20], ebx
.text:00404986                 sub     ebp, eax
.text:00404988                 cmp     ebx, ebp
.text:0040498A                 jle     short loc_404A05
.text:0040498C                 xor     esi, esi
.text:0040498E                 cmp     esi, ebp
.text:00404990                 jge     short loc_4049BD
.text:00404992                 mov     ecx, [esp+2Ch+var_1C]
.text:00404996                 sub     ecx, ebp
.text:00404998                 mov     [esp+2Ch+var_24], ecx
.text:0040499C                 lea     esi, [esi+0]
.text:004049A0
.text:004049A0 loc_4049A0:                             ; CODE XREF: sub_404930+8B↓j
.text:004049A0                 mov     ecx, [esp+2Ch+var_14]
.text:004049A4                 mov     edx, [esp+2Ch+var_24]
.text:004049A8                 add     ecx, esi
.text:004049AA                 add     edx, esi
.text:004049AC                 mov     ebx, [edi+ecx*4]
.text:004049AF                 mov     eax, [edi+edx*4]
.text:004049B2                 inc     esi
.text:004049B3                 cmp     esi, ebp
.text:004049B5                 mov     [edi+ecx*4], eax
.text:004049B8                 mov     [edi+edx*4], ebx
.text:004049BB                 jl      short loc_4049A0
.text:004049BD
.text:004049BD loc_4049BD:                             ; CODE XREF: sub_404930+60↑j
.text:004049BD                 sub     [esp+2Ch+var_1C], ebp
.text:004049C1
.text:004049C1 loc_4049C1:                             ; CODE XREF: sub_404930+107↓j
.text:004049C1                 mov     eax, [esp+2Ch+var_18]
.text:004049C5                 cmp     [esp+2Ch+var_1C], eax
.text:004049C9                 jle     short loc_4049E0
.text:004049CB                 mov     ebp, [esp+2Ch+var_14]
.text:004049CF                 cmp     eax, ebp
.text:004049D1                 jg      short loc_404970
.text:004049D3                 lea     esi, [esi+0]
.text:004049D9                 lea     edi, [edi+0]
.text:004049E0
.text:004049E0 loc_4049E0:                             ; CODE XREF: sub_404930+34↑j
.text:004049E0                                         ; sub_404930+3B↑j ...
.text:004049E0                 mov     esi, [esp+2Ch+var_28]
.text:004049E4                 mov     ecx, [esp+2Ch+var_18]
.text:004049E8                 mov     eax, [esp+2Ch+var_2C]
.text:004049EB                 mov     edi, [esp+2Ch+arg_4]
.text:004049EF                 mov     edx, [esp+2Ch+var_28]
.text:004049F3                 sub     esi, ecx
.text:004049F5                 add     esi, eax
.text:004049F7                 mov     [edi+20h], esi
.text:004049FA                 mov     [edi+24h], edx
.text:004049FD                 add     esp, 1Ch
.text:00404A00                 pop     ebx
.text:00404A01                 pop     esi
.text:00404A02                 pop     edi
.text:00404A03                 pop     ebp
.text:00404A04                 retn
.text:00404A05 ; ---------------------------------------------------------------------------
.text:00404A05
.text:00404A05 loc_404A05:                             ; CODE XREF: sub_404930+5A↑j
.text:00404A05                 xor     esi, esi
.text:00404A07                 cmp     esi, [esp+2Ch+var_20]
.text:00404A0B                 jge     short loc_404A2F
.text:00404A0D                 lea     esi, [esi+0]
.text:00404A10
.text:00404A10 loc_404A10:                             ; CODE XREF: sub_404930+FD↓j
.text:00404A10                 mov     ebx, [esp+2Ch+var_14]
.text:00404A14                 mov     ebp, [esp+2Ch+var_18]
.text:00404A18                 add     ebx, esi
.text:00404A1A                 add     ebp, esi
.text:00404A1C                 mov     edx, [edi+ebx*4]
.text:00404A1F                 inc     esi
.text:00404A20                 cmp     esi, [esp+2Ch+var_20]
.text:00404A24                 mov     ecx, [edi+ebp*4]
.text:00404A27                 mov     [edi+ebx*4], ecx
.text:00404A2A                 mov     [edi+ebp*4], edx
.text:00404A2D                 jl      short loc_404A10
.text:00404A2F
.text:00404A2F loc_404A2F:                             ; CODE XREF: sub_404930+DB↑j
.text:00404A2F                 mov     esi, [esp+2Ch+var_20]
.text:00404A33                 add     [esp+2Ch+var_14], esi
.text:00404A37                 jmp     short loc_4049C1
.text:00404A37 sub_404930      endp
.text:00404A37
.text:00404A37 ; ---------------------------------------------------------------------------
.text:00404A39                 db 17h dup(90h)
.text:00404A50 ; const char byte_404A50[]
.text:00404A50 byte_404A50     db 72h, 0               ; DATA XREF: sub_404A80+F↓o
.text:00404A52 ; const char aVarRunMtab[]
.text:00404A52 aVarRunMtab     db '/var/run/mtab',0    ; DATA XREF: sub_404A80+17↓o
.text:00404A60 aAutofs         db 'autofs',0           ; DATA XREF: sub_404A80+6A↓o
.text:00404A67 aIgnore         db 'ignore',0           ; DATA XREF: sub_404A80+B4↓o
.text:00404A6E ; const char SubStr[]
.text:00404A6E SubStr          db 'dev=',0             ; DATA XREF: sub_404A80+11C↓o
.text:00404A73 aSmbfs          db 'smbfs',0            ; DATA XREF: sub_404A80+18A↓o
.text:00404A79                 align 10h
.text:00404A80
.text:00404A80 ; =============== S U B R O U T I N E =======================================
.text:00404A80
.text:00404A80
.text:00404A80 sub_404A80      proc near               ; CODE XREF: sub_401B70+57D↑p
.text:00404A80
.text:00404A80 Str             = dword ptr -3Ch
.text:00404A80 Val             = dword ptr -38h
.text:00404A80 Radix           = dword ptr -34h
.text:00404A80 var_2C          = dword ptr -2Ch
.text:00404A80 var_28          = dword ptr -28h
.text:00404A80 var_20          = dword ptr -20h
.text:00404A80 var_1C          = dword ptr -1Ch
.text:00404A80 var_18          = dword ptr -18h
.text:00404A80 Block           = dword ptr -14h
.text:00404A80
.text:00404A80                 push    ebp
.text:00404A81                 push    edi
.text:00404A82                 push    esi
.text:00404A83                 push    ebx
.text:00404A84                 sub     esp, 2Ch
.text:00404A87                 lea     edx, [esp+3Ch+Block]
.text:00404A8B                 mov     [esp+3Ch+var_18], edx
.text:00404A8F                 mov     [esp+3Ch+Val], offset byte_404A50 ; char *
.text:00404A97                 mov     [esp+3Ch+Str], offset aVarRunMtab ; "/var/run/mtab"
.text:00404A9E                 call    sub_40AA30
.text:00404AA3                 mov     [esp+3Ch+var_1C], eax
.text:00404AA7                 mov     ecx, [esp+3Ch+var_1C]
.text:00404AAB                 xor     eax, eax
.text:00404AAD                 test    ecx, ecx
.text:00404AAF                 jz      loc_404C47
.text:00404AB5                 lea     esi, [esi+0]
.text:00404AB9                 lea     edi, [edi+0]
.text:00404AC0
.text:00404AC0 loc_404AC0:                             ; CODE XREF: sub_404A80+14F↓j
.text:00404AC0                 mov     esi, [esp+3Ch+var_1C]
.text:00404AC4                 mov     [esp+3Ch+Str], esi
.text:00404AC7                 call    sub_40BDE0
.text:00404ACC                 test    eax, eax
.text:00404ACE                 mov     ebp, eax
.text:00404AD0                 jz      loc_404C2D
.text:00404AD6                 mov     [esp+3Ch+Str], 20h ; ' ' ; size_t
.text:00404ADD                 call    sub_404D00
.text:00404AE2                 mov     edi, [ebp+0]
.text:00404AE5                 mov     ebx, eax
.text:00404AE7                 mov     [esp+3Ch+Str], edi ; char *
.text:00404AEA                 mov     edi, offset aAutofs ; "autofs"
.text:00404AEF                 call    sub_404EC0
.text:00404AF4                 mov     [ebx], eax
.text:00404AF6                 mov     esi, [ebp+4]
.text:00404AF9                 mov     [esp+3Ch+Str], esi ; char *
.text:00404AFC                 call    sub_404EC0
.text:00404B01                 mov     [ebx+4], eax
.text:00404B04                 mov     ecx, [ebp+8]
.text:00404B07                 mov     [esp+3Ch+Str], ecx ; char *
.text:00404B0A                 call    sub_404EC0
.text:00404B0F                 mov     [esp+3Ch+var_28], eax
.text:00404B13                 mov     ecx, 7
.text:00404B18                 or      byte ptr [ebx+18h], 4
.text:00404B1C                 mov     [ebx+8], eax
.text:00404B1F                 mov     [esp+3Ch+var_20], 0
.text:00404B27                 mov     esi, [esp+3Ch+var_28]
.text:00404B2B                 cld
.text:00404B2C                 repe cmpsb
.text:00404B2E                 jz      short loc_404B42
.text:00404B30                 mov     esi, [esp+3Ch+var_28]
.text:00404B34                 mov     edi, offset aIgnore ; "ignore"
.text:00404B39                 mov     ecx, 7
.text:00404B3E                 repe cmpsb
.text:00404B40                 jnz     short loc_404B4A
.text:00404B42
.text:00404B42 loc_404B42:                             ; CODE XREF: sub_404A80+AE↑j
.text:00404B42                 mov     [esp+3Ch+var_20], 1
.text:00404B4A
.text:00404B4A loc_404B4A:                             ; CODE XREF: sub_404A80+C0↑j
.text:00404B4A                 movzx   ecx, byte ptr [ebx+18h]
.text:00404B4E                 movzx   eax, byte ptr [esp+3Ch+var_20]
.text:00404B53                 and     cl, 0FEh
.text:00404B56                 and     al, 1
.text:00404B58                 or      cl, al
.text:00404B5A                 mov     [ebx+18h], cl
.text:00404B5D                 mov     [esp+3Ch+Val], 3Ah ; ':' ; Val
.text:00404B65                 mov     edx, [ebx]
.text:00404B67                 mov     [esp+3Ch+var_2C], 0
.text:00404B6F                 mov     [esp+3Ch+Str], edx ; Str
.text:00404B72                 call    strchr
.text:00404B77                 test    eax, eax
.text:00404B79                 jnz     loc_404C20
.text:00404B7F                 mov     eax, [ebx]
.text:00404B81                 cmp     byte ptr [eax], 2Fh ; '/'
.text:00404B84                 jz      short loc_404C00
.text:00404B86
.text:00404B86 loc_404B86:                             ; CODE XREF: sub_404A80+184↓j
.text:00404B86                                         ; sub_404A80+19A↓j ...
.text:00404B86                 movzx   edx, byte ptr [esp+3Ch+var_2C]
.text:00404B8B                 movzx   ecx, byte ptr [ebx+18h]
.text:00404B8F                 and     dl, 1
.text:00404B92                 add     dl, dl
.text:00404B94                 and     cl, 0FDh
.text:00404B97                 or      cl, dl
.text:00404B99                 mov     [ebx+18h], cl
.text:00404B9C                 mov     [esp+3Ch+Val], offset SubStr ; "dev="
.text:00404BA4                 mov     esi, [ebp+0Ch]
.text:00404BA7                 mov     [esp+3Ch+Str], esi ; Str
.text:00404BAA                 call    strstr
.text:00404BAF                 test    eax, eax
.text:00404BB1                 jnz     short loc_404BD4
.text:00404BB3                 mov     dword ptr [ebx+10h], 0FFFFFFFFh
.text:00404BBA                 mov     dword ptr [ebx+14h], 0FFFFFFFFh
.text:00404BC1
.text:00404BC1 loc_404BC1:                             ; CODE XREF: sub_404A80+179↓j
.text:00404BC1                 mov     ebp, [esp+3Ch+var_18]
.text:00404BC5                 mov     [ebp+0], ebx
.text:00404BC8                 add     ebx, 1Ch
.text:00404BCB                 mov     [esp+3Ch+var_18], ebx
.text:00404BCF                 jmp     loc_404AC0
.text:00404BD4 ; ---------------------------------------------------------------------------
.text:00404BD4
.text:00404BD4 loc_404BD4:                             ; CODE XREF: sub_404A80+131↑j
.text:00404BD4                 mov     [esp+3Ch+Radix], 10h ; Radix
.text:00404BDC                 add     eax, 4
.text:00404BDF                 mov     [esp+3Ch+Val], 0 ; EndPtr
.text:00404BE7                 mov     [esp+3Ch+Str], eax ; String
.text:00404BEA                 call    strtoul
.text:00404BEF                 mov     [ebx+10h], eax
.text:00404BF2                 mov     dword ptr [ebx+14h], 0
.text:00404BF9                 jmp     short loc_404BC1
.text:00404BF9 ; ---------------------------------------------------------------------------
.text:00404BFB                 align 10h
.text:00404C00
.text:00404C00 loc_404C00:                             ; CODE XREF: sub_404A80+104↑j
.text:00404C00                 cmp     byte ptr [eax+1], 2Fh ; '/'
.text:00404C04                 jnz     short loc_404B86
.text:00404C06                 cld
.text:00404C07                 mov     edi, [ebx+8]
.text:00404C0A                 mov     edx, offset aSmbfs ; "smbfs"
.text:00404C0F                 mov     ecx, 6
.text:00404C14                 mov     esi, edi
.text:00404C16                 mov     edi, edx
.text:00404C18                 repe cmpsb
.text:00404C1A                 jnz     loc_404B86
.text:00404C20
.text:00404C20 loc_404C20:                             ; CODE XREF: sub_404A80+F9↑j
.text:00404C20                 mov     [esp+3Ch+var_2C], 1
.text:00404C28                 jmp     loc_404B86
.text:00404C2D ; ---------------------------------------------------------------------------
.text:00404C2D
.text:00404C2D loc_404C2D:                             ; CODE XREF: sub_404A80+50↑j
.text:00404C2D                 mov     [esp+3Ch+Str], esi ; FILE *
.text:00404C30                 call    sub_40AAD0
.text:00404C35                 test    eax, eax
.text:00404C37                 jz      short loc_404C4F
.text:00404C39                 mov     ebx, [esp+3Ch+var_18]
.text:00404C3D                 mov     dword ptr [ebx], 0
.text:00404C43                 mov     eax, [esp+3Ch+Block]
.text:00404C47
.text:00404C47 loc_404C47:                             ; CODE XREF: sub_404A80+2F↑j
.text:00404C47                                         ; sub_404A80+1F1↓j
.text:00404C47                 add     esp, 2Ch
.text:00404C4A                 pop     ebx
.text:00404C4B                 pop     esi
.text:00404C4C                 pop     edi
.text:00404C4D                 pop     ebp
.text:00404C4E                 retn
.text:00404C4F ; ---------------------------------------------------------------------------
.text:00404C4F
.text:00404C4F loc_404C4F:                             ; CODE XREF: sub_404A80+1B7↑j
.text:00404C4F                 call    _errno
.text:00404C54                 mov     edi, [esp+3Ch+var_18]
.text:00404C58                 mov     esi, [eax]
.text:00404C5A                 mov     dword ptr [edi], 0
.text:00404C60                 mov     eax, [esp+3Ch+Block]
.text:00404C64                 test    eax, eax
.text:00404C66                 jnz     short loc_404C73
.text:00404C68
.text:00404C68 loc_404C68:                             ; CODE XREF: sub_404A80+22B↓j
.text:00404C68                 call    _errno
.text:00404C6D                 mov     [eax], esi
.text:00404C6F                 xor     eax, eax
.text:00404C71                 jmp     short loc_404C47
.text:00404C73 ; ---------------------------------------------------------------------------
.text:00404C73
.text:00404C73 loc_404C73:                             ; CODE XREF: sub_404A80+1E6↑j
.text:00404C73                                         ; sub_404A80+229↓j
.text:00404C73                 mov     ebp, [eax]
.text:00404C75                 mov     ebx, [eax+1Ch]
.text:00404C78                 mov     [esp+3Ch+Str], ebp ; Block
.text:00404C7B                 call    free
.text:00404C80                 mov     edx, [esp+3Ch+Block]
.text:00404C84                 mov     ecx, [edx+4]
.text:00404C87                 mov     [esp+3Ch+Str], ecx ; Block
.text:00404C8A                 call    free
.text:00404C8F                 mov     eax, [esp+3Ch+Block]
.text:00404C93                 test    byte ptr [eax+18h], 4
.text:00404C97                 jnz     short loc_404CAD
.text:00404C99
.text:00404C99 loc_404C99:                             ; CODE XREF: sub_404A80+23C↓j
.text:00404C99                 mov     [esp+3Ch+Str], eax ; Block
.text:00404C9C                 call    free
.text:00404CA1                 mov     [esp+3Ch+Block], ebx
.text:00404CA5                 test    ebx, ebx
.text:00404CA7                 mov     eax, ebx
.text:00404CA9                 jnz     short loc_404C73
.text:00404CAB                 jmp     short loc_404C68
.text:00404CAD ; ---------------------------------------------------------------------------
.text:00404CAD
.text:00404CAD loc_404CAD:                             ; CODE XREF: sub_404A80+217↑j
.text:00404CAD                 mov     edi, [eax+8]
.text:00404CB0                 mov     [esp+3Ch+Str], edi ; Block
.text:00404CB3                 call    free
.text:00404CB8                 mov     eax, [esp+3Ch+Block]
.text:00404CBC                 jmp     short loc_404C99
.text:00404CBC sub_404A80      endp
.text:00404CBC
.text:00404CBC ; ---------------------------------------------------------------------------
.text:00404CBE                 align 10h
.text:00404CC0
.text:00404CC0 ; =============== S U B R O U T I N E =======================================
.text:00404CC0
.text:00404CC0
.text:00404CC0 sub_404CC0      proc near               ; CODE XREF: sub_401B70+75D↑p
.text:00404CC0
.text:00404CC0 Size            = dword ptr -0Ch
.text:00404CC0 var_4           = dword ptr -4
.text:00404CC0 arg_0           = dword ptr  4
.text:00404CC0 arg_4           = dword ptr  8
.text:00404CC0
.text:00404CC0                 sub     esp, 0Ch
.text:00404CC3                 xor     edx, edx
.text:00404CC5                 mov     ecx, [esp+0Ch+arg_4]
.text:00404CC9                 mov     [esp+0Ch+var_4], ebx
.text:00404CCD                 mov     eax, 0FFFFFFFFh
.text:00404CD2                 mov     ebx, [esp+0Ch+arg_0]
.text:00404CD6                 div     ecx
.text:00404CD8                 cmp     eax, ebx
.text:00404CDA                 jb      short loc_404CF9
.text:00404CDC                 mov     edx, ebx
.text:00404CDE                 imul    edx, ecx
.text:00404CE1                 mov     [esp+0Ch+Size], edx ; Size
.text:00404CE4                 call    malloc
.text:00404CE9                 test    eax, eax
.text:00404CEB                 jz      short loc_404CF5
.text:00404CED
.text:00404CED loc_404CED:                             ; CODE XREF: sub_404CC0+37↓j
.text:00404CED                 mov     ebx, [esp+0Ch+var_4]
.text:00404CF1                 add     esp, 0Ch
.text:00404CF4                 retn
.text:00404CF5 ; ---------------------------------------------------------------------------
.text:00404CF5
.text:00404CF5 loc_404CF5:                             ; CODE XREF: sub_404CC0+2B↑j
.text:00404CF5                 test    ebx, ebx
.text:00404CF7                 jz      short loc_404CED
.text:00404CF9
.text:00404CF9 loc_404CF9:                             ; CODE XREF: sub_404CC0+1A↑j
.text:00404CF9                 call    sub_4069C0
.text:00404CF9 sub_404CC0      endp
.text:00404CF9
.text:00404CF9 ; ---------------------------------------------------------------------------
.text:00404CFE                 align 10h
.text:00404D00
.text:00404D00 ; =============== S U B R O U T I N E =======================================
.text:00404D00
.text:00404D00
.text:00404D00 ; int __cdecl sub_404D00(size_t)
.text:00404D00 sub_404D00      proc near               ; CODE XREF: sub_401B70+3DD↑p
.text:00404D00                                         ; sub_401B70+4BF↑p ...
.text:00404D00
.text:00404D00 Size            = dword ptr -0Ch
.text:00404D00 var_4           = dword ptr -4
.text:00404D00 arg_0           = dword ptr  4
.text:00404D00
.text:00404D00                 sub     esp, 0Ch
.text:00404D03                 mov     [esp+0Ch+var_4], ebx
.text:00404D07                 mov     ebx, [esp+0Ch+arg_0]
.text:00404D0B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404D0E                 call    malloc
.text:00404D13                 test    eax, eax
.text:00404D15                 jz      short loc_404D20
.text:00404D17
.text:00404D17 loc_404D17:                             ; CODE XREF: sub_404D00+22↓j
.text:00404D17                 mov     ebx, [esp+0Ch+var_4]
.text:00404D1B                 add     esp, 0Ch
.text:00404D1E                 retn
.text:00404D1E ; ---------------------------------------------------------------------------
.text:00404D1F                 align 10h
.text:00404D20
.text:00404D20 loc_404D20:                             ; CODE XREF: sub_404D00+15↑j
.text:00404D20                 test    ebx, ebx
.text:00404D22                 jz      short loc_404D17
.text:00404D24                 call    sub_4069C0
.text:00404D24 sub_404D00      endp
.text:00404D24
.text:00404D24 ; ---------------------------------------------------------------------------
.text:00404D29                 align 10h
.text:00404D30                 sub     esp, 1Ch
.text:00404D33                 xor     edx, edx
.text:00404D35                 mov     eax, 0FFFFFFFFh
.text:00404D3A                 mov     [esp+14h], ebx
.text:00404D3E                 mov     ecx, [esp+20h]
.text:00404D42                 mov     ebx, [esp+28h]
.text:00404D46                 mov     [esp+18h], esi
.text:00404D4A                 mov     esi, [esp+24h]
.text:00404D4E                 div     ebx
.text:00404D50                 cmp     eax, esi
.text:00404D52                 jb      short loc_404D84
.text:00404D54                 mov     [esp], ecx
.text:00404D57                 mov     edx, esi
.text:00404D59                 imul    edx, ebx
.text:00404D5C                 mov     [esp+4], edx
.text:00404D60                 call    realloc
.text:00404D65                 test    eax, eax
.text:00404D67                 mov     ecx, eax
.text:00404D69                 jz      short loc_404D80
.text:00404D6B
.text:00404D6B loc_404D6B:                             ; CODE XREF: .text:00404D82↓j
.text:00404D6B                 mov     ebx, [esp+14h]
.text:00404D6F                 mov     eax, ecx
.text:00404D71                 mov     esi, [esp+18h]
.text:00404D75                 add     esp, 1Ch
.text:00404D78                 retn
.text:00404D78 ; ---------------------------------------------------------------------------
.text:00404D79                 align 10h
.text:00404D80
.text:00404D80 loc_404D80:                             ; CODE XREF: .text:00404D69↑j
.text:00404D80                 test    esi, esi
.text:00404D82                 jz      short loc_404D6B
.text:00404D84
.text:00404D84 loc_404D84:                             ; CODE XREF: .text:00404D52↑j
.text:00404D84                 call    sub_4069C0
.text:00404D84 ; ---------------------------------------------------------------------------
.text:00404D89                 align 10h
.text:00404D90
.text:00404D90 ; =============== S U B R O U T I N E =======================================
.text:00404D90
.text:00404D90
.text:00404D90 ; int __cdecl sub_404D90(void *, size_t)
.text:00404D90 sub_404D90      proc near               ; CODE XREF: sub_408E80+5B↓p
.text:00404D90
.text:00404D90 Block           = dword ptr -0Ch
.text:00404D90 Size            = dword ptr -8
.text:00404D90 var_4           = dword ptr -4
.text:00404D90 arg_0           = dword ptr  4
.text:00404D90 arg_4           = dword ptr  8
.text:00404D90
.text:00404D90                 sub     esp, 0Ch
.text:00404D93                 mov     edx, [esp+0Ch+arg_0]
.text:00404D97                 mov     [esp+0Ch+var_4], ebx
.text:00404D9B                 mov     ebx, [esp+0Ch+arg_4]
.text:00404D9F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404DA2                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404DA6                 call    realloc
.text:00404DAB                 test    eax, eax
.text:00404DAD                 jz      short loc_404DB7
.text:00404DAF
.text:00404DAF loc_404DAF:                             ; CODE XREF: sub_404D90+29↓j
.text:00404DAF                 mov     ebx, [esp+0Ch+var_4]
.text:00404DB3                 add     esp, 0Ch
.text:00404DB6                 retn
.text:00404DB7 ; ---------------------------------------------------------------------------
.text:00404DB7
.text:00404DB7 loc_404DB7:                             ; CODE XREF: sub_404D90+1D↑j
.text:00404DB7                 test    ebx, ebx
.text:00404DB9                 jz      short loc_404DAF
.text:00404DBB                 call    sub_4069C0
.text:00404DBB sub_404D90      endp
.text:00404DBB
.text:00404DC0 ; ---------------------------------------------------------------------------
.text:00404DC0                 jmp     sub_404F10
.text:00404DC0 ; ---------------------------------------------------------------------------
.text:00404DC5                 align 10h
.text:00404DD0                 sub     esp, 0Ch
.text:00404DD3                 mov     edx, [esp+14h]
.text:00404DD7                 mov     dword ptr [esp+8], 1
.text:00404DDF                 mov     [esp+4], edx
.text:00404DE3                 mov     edx, [esp+10h]
.text:00404DE7                 mov     [esp], edx
.text:00404DEA                 call    sub_404F10
.text:00404DEF                 add     esp, 0Ch
.text:00404DF2                 retn
.text:00404DF2 ; ---------------------------------------------------------------------------
.text:00404DF3                 align 10h
.text:00404E00                 sub     esp, 1Ch
.text:00404E03                 mov     [esp+18h], ebx
.text:00404E07                 mov     ebx, [esp+20h]
.text:00404E0B                 mov     [esp], ebx
.text:00404E0E                 call    malloc
.text:00404E13                 test    eax, eax
.text:00404E15                 jz      short loc_404E33
.text:00404E17
.text:00404E17 loc_404E17:                             ; CODE XREF: .text:00404E35↓j
.text:00404E17                 mov     [esp+8], ebx
.text:00404E1B                 mov     dword ptr [esp+4], 0
.text:00404E23                 mov     [esp], eax
.text:00404E26                 call    memset
.text:00404E2B                 mov     ebx, [esp+18h]
.text:00404E2F                 add     esp, 1Ch
.text:00404E32                 retn
.text:00404E33 ; ---------------------------------------------------------------------------
.text:00404E33
.text:00404E33 loc_404E33:                             ; CODE XREF: .text:00404E15↑j
.text:00404E33                 test    ebx, ebx
.text:00404E35                 jz      short loc_404E17
.text:00404E37                 call    sub_4069C0
.text:00404E37 ; ---------------------------------------------------------------------------
.text:00404E3C                 align 10h
.text:00404E40                 sub     esp, 0Ch
.text:00404E43                 xor     edx, edx
.text:00404E45                 mov     ecx, [esp+14h]
.text:00404E49                 mov     [esp+8], ebx
.text:00404E4D                 mov     eax, 0FFFFFFFFh
.text:00404E52                 mov     ebx, [esp+10h]
.text:00404E56                 div     ecx
.text:00404E58                 cmp     eax, ebx
.text:00404E5A                 jb      short loc_404E78
.text:00404E5C                 mov     [esp+4], ecx
.text:00404E60                 mov     [esp], ebx
.text:00404E63                 call    calloc
.text:00404E68                 test    eax, eax
.text:00404E6A                 jz      short loc_404E74
.text:00404E6C
.text:00404E6C loc_404E6C:                             ; CODE XREF: .text:00404E76↓j
.text:00404E6C                 mov     ebx, [esp+8]
.text:00404E70                 add     esp, 0Ch
.text:00404E73                 retn
.text:00404E74 ; ---------------------------------------------------------------------------
.text:00404E74
.text:00404E74 loc_404E74:                             ; CODE XREF: .text:00404E6A↑j
.text:00404E74                 test    ebx, ebx
.text:00404E76                 jz      short loc_404E6C
.text:00404E78
.text:00404E78 loc_404E78:                             ; CODE XREF: .text:00404E5A↑j
.text:00404E78                 call    sub_4069C0
.text:00404E78 ; ---------------------------------------------------------------------------
.text:00404E7D                 align 10h
.text:00404E80                 sub     esp, 1Ch
.text:00404E83                 mov     [esp+18h], ebx
.text:00404E87                 mov     ebx, [esp+24h]
.text:00404E8B                 mov     [esp], ebx
.text:00404E8E                 call    malloc
.text:00404E93                 test    eax, eax
.text:00404E95                 mov     edx, eax
.text:00404E97                 jz      short loc_404EB5
.text:00404E99
.text:00404E99 loc_404E99:                             ; CODE XREF: .text:00404EB7↓j
.text:00404E99                 mov     [esp+8], ebx
.text:00404E9D                 mov     ecx, [esp+20h]
.text:00404EA1                 mov     [esp], edx
.text:00404EA4                 mov     [esp+4], ecx
.text:00404EA8                 call    memcpy
.text:00404EAD                 mov     ebx, [esp+18h]
.text:00404EB1                 add     esp, 1Ch
.text:00404EB4                 retn
.text:00404EB5 ; ---------------------------------------------------------------------------
.text:00404EB5
.text:00404EB5 loc_404EB5:                             ; CODE XREF: .text:00404E97↑j
.text:00404EB5                 test    ebx, ebx
.text:00404EB7                 jz      short loc_404E99
.text:00404EB9                 call    sub_4069C0
.text:00404EB9 ; ---------------------------------------------------------------------------
.text:00404EBE                 align 10h
.text:00404EC0
.text:00404EC0 ; =============== S U B R O U T I N E =======================================
.text:00404EC0
.text:00404EC0
.text:00404EC0 ; int __cdecl sub_404EC0(char *)
.text:00404EC0 sub_404EC0      proc near               ; CODE XREF: sub_404A80+6F↑p
.text:00404EC0                                         ; sub_404A80+7C↑p ...
.text:00404EC0
.text:00404EC0 Str             = dword ptr -1Ch
.text:00404EC0 Src             = dword ptr -18h
.text:00404EC0 Size            = dword ptr -14h
.text:00404EC0 var_8           = dword ptr -8
.text:00404EC0 var_4           = dword ptr -4
.text:00404EC0 arg_0           = dword ptr  4
.text:00404EC0
.text:00404EC0                 sub     esp, 1Ch
.text:00404EC3                 mov     [esp+1Ch+var_4], esi
.text:00404EC7                 mov     esi, [esp+1Ch+arg_0]
.text:00404ECB                 mov     [esp+1Ch+var_8], ebx
.text:00404ECF                 mov     [esp+1Ch+Str], esi ; Str
.text:00404ED2                 call    strlen
.text:00404ED7                 lea     ebx, [eax+1]
.text:00404EDA                 mov     [esp+1Ch+Str], ebx ; Size
.text:00404EDD                 call    malloc
.text:00404EE2                 test    eax, eax
.text:00404EE4                 jz      short loc_404F02
.text:00404EE6
.text:00404EE6 loc_404EE6:                             ; CODE XREF: sub_404EC0+44↓j
.text:00404EE6                 mov     [esp+1Ch+Size], ebx ; Size
.text:00404EEA                 mov     [esp+1Ch+Src], esi ; Src
.text:00404EEE                 mov     [esp+1Ch+Str], eax ; void *
.text:00404EF1                 call    memcpy
.text:00404EF6                 mov     ebx, [esp+1Ch+var_8]
.text:00404EFA                 mov     esi, [esp+1Ch+var_4]
.text:00404EFE                 add     esp, 1Ch
.text:00404F01                 retn
.text:00404F02 ; ---------------------------------------------------------------------------
.text:00404F02
.text:00404F02 loc_404F02:                             ; CODE XREF: sub_404EC0+24↑j
.text:00404F02                 test    ebx, ebx
.text:00404F04                 jz      short loc_404EE6
.text:00404F06                 call    sub_4069C0
.text:00404F06 sub_404EC0      endp
.text:00404F06
.text:00404F06 ; ---------------------------------------------------------------------------
.text:00404F0B                 align 10h
.text:00404F10
.text:00404F10 ; =============== S U B R O U T I N E =======================================
.text:00404F10
.text:00404F10
.text:00404F10 ; int __cdecl sub_404F10(void *, int, int)
.text:00404F10 sub_404F10      proc near               ; CODE XREF: .text:00404DC0↑j
.text:00404F10                                         ; .text:00404DEA↑p
.text:00404F10
.text:00404F10 Block           = dword ptr -1Ch
.text:00404F10 Size            = dword ptr -18h
.text:00404F10 var_C           = dword ptr -0Ch
.text:00404F10 var_8           = dword ptr -8
.text:00404F10 var_4           = dword ptr -4
.text:00404F10 arg_0           = dword ptr  4
.text:00404F10 arg_4           = dword ptr  8
.text:00404F10 arg_8           = dword ptr  0Ch
.text:00404F10
.text:00404F10                 sub     esp, 1Ch
.text:00404F13                 mov     [esp+1Ch+var_8], esi
.text:00404F17                 mov     esi, [esp+1Ch+arg_0]
.text:00404F1B                 mov     [esp+1Ch+var_4], edi
.text:00404F1F                 mov     edi, [esp+1Ch+arg_4]
.text:00404F23                 test    esi, esi
.text:00404F25                 mov     [esp+1Ch+var_C], ebx
.text:00404F29                 mov     ecx, [edi]
.text:00404F2B                 mov     ebx, [esp+1Ch+arg_8]
.text:00404F2F                 jz      short loc_404F70
.text:00404F31                 xor     edx, edx
.text:00404F33                 mov     eax, 7FFFFFFFh
.text:00404F38                 div     ebx
.text:00404F3A                 cmp     eax, ecx
.text:00404F3C                 jb      short loc_404F69
.text:00404F3E                 add     ecx, ecx
.text:00404F40
.text:00404F40 loc_404F40:                             ; CODE XREF: sub_404F10+62↓j
.text:00404F40                                         ; sub_404F10+71↓j ...
.text:00404F40                 mov     [edi], ecx
.text:00404F42                 imul    ebx, ecx
.text:00404F45                 mov     [esp+1Ch+Block], esi ; Block
.text:00404F48                 mov     [esp+1Ch+Size], ebx ; Size
.text:00404F4C                 call    realloc
.text:00404F51                 test    eax, eax
.text:00404F53                 jz      short loc_404F65
.text:00404F55
.text:00404F55 loc_404F55:                             ; CODE XREF: sub_404F10+57↓j
.text:00404F55                 mov     ebx, [esp+1Ch+var_C]
.text:00404F59                 mov     esi, [esp+1Ch+var_8]
.text:00404F5D                 mov     edi, [esp+1Ch+var_4]
.text:00404F61                 add     esp, 1Ch
.text:00404F64                 retn
.text:00404F65 ; ---------------------------------------------------------------------------
.text:00404F65
.text:00404F65 loc_404F65:                             ; CODE XREF: sub_404F10+43↑j
.text:00404F65                 test    ebx, ebx
.text:00404F67                 jz      short loc_404F55
.text:00404F69
.text:00404F69 loc_404F69:                             ; CODE XREF: sub_404F10+2C↑j
.text:00404F69                 call    sub_4069C0
.text:00404F69 ; ---------------------------------------------------------------------------
.text:00404F6E                 align 10h
.text:00404F70
.text:00404F70 loc_404F70:                             ; CODE XREF: sub_404F10+1F↑j
.text:00404F70                 test    ecx, ecx
.text:00404F72                 jnz     short loc_404F40
.text:00404F74                 xor     edx, edx
.text:00404F76                 mov     eax, 40h ; '@'
.text:00404F7B                 div     ebx
.text:00404F7D                 test    eax, eax
.text:00404F7F                 mov     ecx, eax
.text:00404F81                 jnz     short loc_404F40
.text:00404F83                 mov     ecx, 1
.text:00404F88                 jmp     short loc_404F40
.text:00404F88 sub_404F10      endp
.text:00404F88
.text:00404F88 ; ---------------------------------------------------------------------------
.text:00404F8A                 align 10h
.text:00404F90 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404F90                                         ; DATA XREF: .data:Buffer↓o
.text:00404FC2 ; const char aSSS_0[]
.text:00404FC2 aSSS_0          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_405280+50↓o
.text:00404FCE aWrittenByS     db 'Written by %s.',0Ah,0
.text:00404FCE                                         ; DATA XREF: sub_405280:loc_405321↓o
.text:00404FDE                 db 12h dup(90h)
.text:00404FF0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00404FF0                                         ; DATA XREF: sub_405280+100↓o
.text:00404FF0                 db 'ere is NO',0Ah
.text:00404FF0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00404FF0                 db 'R PURPOSE.',0Ah,0
.text:00405088 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00405088                                         ; DATA XREF: sub_405280:loc_4053C1↓o
.text:0040509F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040509F                                         ; DATA XREF: sub_405280:loc_4053CD↓o
.text:004050BB                 db 15h dup(90h)
.text:004050D0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004050D0                                         ; DATA XREF: sub_405280:loc_4053D9↓o
.text:004050D0                 db 'and %s.',0Ah,0
.text:004050F0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004050F0                                         ; DATA XREF: sub_405280:loc_4053E5↓o
.text:004050F0                 db '%s, and %s.',0Ah,0
.text:00405114                 db 1Ch dup(90h)
.text:00405130 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00405130                                         ; DATA XREF: sub_405280:loc_4053F1↓o
.text:00405130                 db '%s, %s, and %s.',0Ah,0
.text:00405158                 db 18h dup(90h)
.text:00405170 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00405170                                         ; DATA XREF: sub_405280:loc_4053FD↓o
.text:00405170                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040519C                 db 14h dup(90h)
.text:004051B0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004051B0                                         ; DATA XREF: sub_405280:loc_405409↓o
.text:004051B0                 db '%s, %s, %s, %s,',0Ah
.text:004051B0                 db 'and %s.',0Ah,0
.text:004051E0                 db 10h dup(90h)
.text:004051F0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004051F0                                         ; DATA XREF: sub_405280:loc_405415↓o
.text:004051F0                 db '%s, %s, %s, %s,',0Ah
.text:004051F0                 db '%s, and %s.',0Ah,0
.text:00405224                 align 10h
.text:00405230 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00405230                                         ; DATA XREF: sub_405280:def_4052ED↓o
.text:00405230                 db '%s, %s, %s, %s,',0Ah
.text:00405230                 db '%s, %s, and others.',0Ah,0
.text:0040526C ; const char aSS_1[]
.text:0040526C aSS_1           db '%s %s',0Ah,0        ; DATA XREF: sub_405280+1B5↓o
.text:00405273                 align 10h
.text:00405280
.text:00405280 ; =============== S U B R O U T I N E =======================================
.text:00405280
.text:00405280
.text:00405280 ; int __cdecl sub_405280(FILE *, FILE *, int, int, va_list)
.text:00405280 sub_405280      proc near               ; CODE XREF: sub_405450+2A↓p
.text:00405280
.text:00405280 Stream          = dword ptr -2Ch
.text:00405280 Format          = dword ptr -28h
.text:00405280 ArgList         = dword ptr -24h
.text:00405280 var_20          = dword ptr -20h
.text:00405280 var_1C          = dword ptr -1Ch
.text:00405280 var_14          = dword ptr -14h
.text:00405280 arg_0           = dword ptr  4
.text:00405280 arg_4           = dword ptr  8
.text:00405280 arg_8           = dword ptr  0Ch
.text:00405280 arg_C           = dword ptr  10h
.text:00405280 arg_10          = dword ptr  14h
.text:00405280
.text:00405280                 push    ebp
.text:00405281                 push    edi
.text:00405282                 push    esi
.text:00405283                 push    ebx
.text:00405284                 sub     esp, 1Ch
.text:00405287                 xor     ebx, ebx
.text:00405289                 mov     edi, [esp+2Ch+arg_10]
.text:0040528D                 mov     edx, [esp+2Ch+arg_8]
.text:00405291                 mov     esi, [esp+2Ch+arg_0]
.text:00405295                 mov     eax, [edi]
.text:00405297                 mov     ecx, [esp+2Ch+arg_4]
.text:0040529B                 mov     [esp+2Ch+var_14], edx
.text:0040529F                 mov     ebp, [esp+2Ch+arg_C]
.text:004052A3                 lea     edx, [edi+4]
.text:004052A6                 test    eax, eax
.text:004052A8                 jz      short loc_4052BC
.text:004052AA                 lea     esi, [esi+0]
.text:004052B0
.text:004052B0 loc_4052B0:                             ; CODE XREF: sub_405280+3A↓j
.text:004052B0                 mov     eax, edx
.text:004052B2                 inc     ebx
.text:004052B3                 mov     eax, [eax]
.text:004052B5                 add     edx, 4
.text:004052B8                 test    eax, eax
.text:004052BA                 jnz     short loc_4052B0
.text:004052BC
.text:004052BC loc_4052BC:                             ; CODE XREF: sub_405280+28↑j
.text:004052BC                 test    ecx, ecx
.text:004052BE                 jz      loc_40542D
.text:004052C4                 mov     [esp+2Ch+var_1C], ebp
.text:004052C8                 mov     edx, [esp+2Ch+var_14]
.text:004052CC                 mov     [esp+2Ch+ArgList], ecx
.text:004052D0                 mov     [esp+2Ch+Format], offset aSSS_0 ; "%s (%s) %s\n"
.text:004052D8                 mov     [esp+2Ch+var_20], edx
.text:004052DC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004052DF                 call    fprintf
.text:004052E4
.text:004052E4 loc_4052E4:                             ; CODE XREF: sub_405280+1C9↓j
.text:004052E4                 cmp     ebx, 9          ; switch 10 cases
.text:004052E7                 ja      def_4052ED      ; jumptable 004052ED default case
.text:004052ED                 jmp     ds:jpt_4052ED[ebx*4] ; switch jump
.text:004052ED ; ---------------------------------------------------------------------------
.text:004052F4 jpt_4052ED      dd offset loc_40531C    ; DATA XREF: sub_405280+6D↑r
.text:004052F4                 dd offset loc_405321    ; jump table for switch statement
.text:004052F4                 dd offset loc_4053C1
.text:004052F4                 dd offset loc_4053CD
.text:004052F4                 dd offset loc_4053D9
.text:004052F4                 dd offset loc_4053E5
.text:004052F4                 dd offset loc_4053F1
.text:004052F4                 dd offset loc_4053FD
.text:004052F4                 dd offset loc_405409
.text:004052F4                 dd offset loc_405415
.text:0040531C ; ---------------------------------------------------------------------------
.text:0040531C
.text:0040531C loc_40531C:                             ; CODE XREF: sub_405280+6D↑j
.text:0040531C                                         ; DATA XREF: sub_405280:jpt_4052ED↑o
.text:0040531C                 call    abort           ; jumptable 004052ED case 0
.text:00405321 ; ---------------------------------------------------------------------------
.text:00405321
.text:00405321 loc_405321:                             ; CODE XREF: sub_405280+6D↑j
.text:00405321                                         ; DATA XREF: sub_405280:jpt_4052ED↑o
.text:00405321                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004052ED case 1
.text:00405328                 nop
.text:00405329                 lea     esi, [esi+0]
.text:00405330
.text:00405330 loc_405330:                             ; CODE XREF: sub_405280+148↓j
.text:00405330                                         ; sub_405280+154↓j ...
.text:00405330                 call    ds:libintl_gettext
.text:00405336                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040533A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040533D                 mov     [esp+2Ch+Format], eax ; Format
.text:00405341                 call    vfprintf
.text:00405346                 mov     ebx, [esi+4]
.text:00405349                 dec     ebx
.text:0040534A                 test    ebx, ebx
.text:0040534C                 mov     [esi+4], ebx
.text:0040534F                 js      short loc_4053AF
.text:00405351                 mov     edi, [esi]
.text:00405353                 mov     byte ptr [edi], 0Ah
.text:00405356                 inc     dword ptr [esi]
.text:00405358
.text:00405358 loc_405358:                             ; CODE XREF: sub_405280+13F↓j
.text:00405358                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040535C                 mov     edx, Buffer
.text:00405362                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00405365                 call    fputs
.text:0040536A                 mov     ebp, [esi+4]
.text:0040536D                 dec     ebp
.text:0040536E                 test    ebp, ebp
.text:00405370                 mov     [esi+4], ebp
.text:00405373                 js      short loc_40539D
.text:00405375                 mov     ecx, [esi]
.text:00405377                 mov     byte ptr [ecx], 0Ah
.text:0040537A                 inc     dword ptr [esi]
.text:0040537C
.text:0040537C loc_40537C:                             ; CODE XREF: sub_405280+12D↓j
.text:0040537C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00405380                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00405387                 call    ds:libintl_gettext
.text:0040538D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00405391                 add     esp, 1Ch
.text:00405394                 pop     ebx
.text:00405395                 pop     esi
.text:00405396                 pop     edi
.text:00405397                 pop     ebp
.text:00405398                 jmp     fputs
.text:0040539D ; ---------------------------------------------------------------------------
.text:0040539D
.text:0040539D loc_40539D:                             ; CODE XREF: sub_405280+F3↑j
.text:0040539D                 mov     [esp+2Ch+Format], esi ; File
.text:004053A1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004053A8                 call    _flsbuf
.text:004053AD                 jmp     short loc_40537C
.text:004053AF ; ---------------------------------------------------------------------------
.text:004053AF
.text:004053AF loc_4053AF:                             ; CODE XREF: sub_405280+CF↑j
.text:004053AF                 mov     [esp+2Ch+Format], esi ; File
.text:004053B3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004053BA                 call    _flsbuf
.text:004053BF                 jmp     short loc_405358
.text:004053C1 ; ---------------------------------------------------------------------------
.text:004053C1
.text:004053C1 loc_4053C1:                             ; CODE XREF: sub_405280+6D↑j
.text:004053C1                                         ; DATA XREF: sub_405280:jpt_4052ED↑o
.text:004053C1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004052ED case 2
.text:004053C8                 jmp     loc_405330
.text:004053CD ; ---------------------------------------------------------------------------
.text:004053CD
.text:004053CD loc_4053CD:                             ; CODE XREF: sub_405280+6D↑j
.text:004053CD                                         ; DATA XREF: sub_405280:jpt_4052ED↑o
.text:004053CD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004052ED case 3
.text:004053D4                 jmp     loc_405330
.text:004053D9 ; ---------------------------------------------------------------------------
.text:004053D9
.text:004053D9 loc_4053D9:                             ; CODE XREF: sub_405280+6D↑j
.text:004053D9                                         ; DATA XREF: sub_405280:jpt_4052ED↑o
.text:004053D9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004052ED case 4
.text:004053E0                 jmp     loc_405330
.text:004053E5 ; ---------------------------------------------------------------------------
.text:004053E5
.text:004053E5 loc_4053E5:                             ; CODE XREF: sub_405280+6D↑j
.text:004053E5                                         ; DATA XREF: sub_405280:jpt_4052ED↑o
.text:004053E5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004052ED case 5
.text:004053EC                 jmp     loc_405330
.text:004053F1 ; ---------------------------------------------------------------------------
.text:004053F1
.text:004053F1 loc_4053F1:                             ; CODE XREF: sub_405280+6D↑j
.text:004053F1                                         ; DATA XREF: sub_405280:jpt_4052ED↑o
.text:004053F1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004052ED case 6
.text:004053F8                 jmp     loc_405330
.text:004053FD ; ---------------------------------------------------------------------------
.text:004053FD
.text:004053FD loc_4053FD:                             ; CODE XREF: sub_405280+6D↑j
.text:004053FD                                         ; DATA XREF: sub_405280:jpt_4052ED↑o
.text:004053FD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004052ED case 7
.text:00405404                 jmp     loc_405330
.text:00405409 ; ---------------------------------------------------------------------------
.text:00405409
.text:00405409 loc_405409:                             ; CODE XREF: sub_405280+6D↑j
.text:00405409                                         ; DATA XREF: sub_405280:jpt_4052ED↑o
.text:00405409                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004052ED case 8
.text:00405410                 jmp     loc_405330
.text:00405415 ; ---------------------------------------------------------------------------
.text:00405415
.text:00405415 loc_405415:                             ; CODE XREF: sub_405280+6D↑j
.text:00405415                                         ; DATA XREF: sub_405280:jpt_4052ED↑o
.text:00405415                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004052ED case 9
.text:0040541C                 jmp     loc_405330
.text:00405421 ; ---------------------------------------------------------------------------
.text:00405421
.text:00405421 def_4052ED:                             ; CODE XREF: sub_405280+67↑j
.text:00405421                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004052ED default case
.text:00405428                 jmp     loc_405330
.text:0040542D ; ---------------------------------------------------------------------------
.text:0040542D
.text:0040542D loc_40542D:                             ; CODE XREF: sub_405280+3E↑j
.text:0040542D                 mov     [esp+2Ch+var_20], ebp
.text:00405431                 mov     ecx, [esp+2Ch+var_14]
.text:00405435                 mov     [esp+2Ch+Format], offset aSS_1 ; "%s %s\n"
.text:0040543D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405440                 mov     [esp+2Ch+ArgList], ecx
.text:00405444                 call    fprintf
.text:00405449                 jmp     loc_4052E4
.text:00405449 sub_405280      endp
.text:00405449
.text:00405449 ; ---------------------------------------------------------------------------
.text:0040544E                 align 10h
.text:00405450
.text:00405450 ; =============== S U B R O U T I N E =======================================
.text:00405450
.text:00405450
.text:00405450 ; int __cdecl sub_405450(FILE *, FILE *, int, int, char)
.text:00405450 sub_405450      proc near               ; CODE XREF: sub_401B70+1F6↑p
.text:00405450
.text:00405450 var_1C          = dword ptr -1Ch
.text:00405450 var_18          = dword ptr -18h
.text:00405450 var_14          = dword ptr -14h
.text:00405450 var_10          = dword ptr -10h
.text:00405450 var_C           = dword ptr -0Ch
.text:00405450 arg_0           = dword ptr  4
.text:00405450 arg_4           = dword ptr  8
.text:00405450 arg_8           = dword ptr  0Ch
.text:00405450 arg_C           = dword ptr  10h
.text:00405450 arg_10          = byte ptr  14h
.text:00405450
.text:00405450                 sub     esp, 1Ch
.text:00405453                 mov     edx, [esp+1Ch+arg_C]
.text:00405457                 lea     ecx, [esp+1Ch+arg_10]
.text:0040545B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040545F                 mov     ecx, [esp+1Ch+arg_8]
.text:00405463                 mov     [esp+1Ch+var_10], edx ; int
.text:00405467                 mov     edx, [esp+1Ch+arg_4]
.text:0040546B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040546F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00405473                 mov     edx, [esp+1Ch+arg_0]
.text:00405477                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040547A                 call    sub_405280
.text:0040547F                 add     esp, 1Ch
.text:00405482                 retn
.text:00405482 sub_405450      endp
.text:00405482
.text:00405482 ; ---------------------------------------------------------------------------
.text:00405483                 align 10h
.text:00405490
.text:00405490 ; =============== S U B R O U T I N E =======================================
.text:00405490
.text:00405490
.text:00405490 ; int __cdecl sub_405490(int, int, char *, int, int)
.text:00405490 sub_405490      proc near               ; CODE XREF: sub_401B70+102↑p
.text:00405490
.text:00405490 var_1C          = dword ptr -1Ch
.text:00405490 var_18          = dword ptr -18h
.text:00405490 var_14          = dword ptr -14h
.text:00405490 var_10          = dword ptr -10h
.text:00405490 var_C           = dword ptr -0Ch
.text:00405490 var_8           = dword ptr -8
.text:00405490 var_4           = dword ptr -4
.text:00405490 arg_0           = dword ptr  4
.text:00405490 arg_4           = dword ptr  8
.text:00405490 arg_8           = dword ptr  0Ch
.text:00405490 arg_C           = dword ptr  10h
.text:00405490 arg_10          = dword ptr  14h
.text:00405490
.text:00405490                 sub     esp, 1Ch
.text:00405493                 mov     edx, [esp+1Ch+arg_C]
.text:00405497                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040549F                 mov     ecx, [esp+1Ch+arg_10]
.text:004054A3                 mov     [esp+1Ch+var_8], 0 ; int
.text:004054AB                 mov     [esp+1Ch+var_10], edx ; int
.text:004054AF                 mov     edx, [esp+1Ch+arg_4]
.text:004054B3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004054B7                 mov     ecx, [esp+1Ch+arg_8]
.text:004054BB                 mov     [esp+1Ch+var_18], edx ; int
.text:004054BF                 mov     edx, [esp+1Ch+arg_0]
.text:004054C3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004054C7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004054CA                 call    sub_404810
.text:004054CF                 add     esp, 1Ch
.text:004054D2                 retn
.text:004054D2 sub_405490      endp
.text:004054D2
.text:004054D2 ; ---------------------------------------------------------------------------
.text:004054D3                 align 10h
.text:004054E0                 sub     esp, 2Ch
.text:004054E3                 mov     edx, [esp+44h]
.text:004054E7                 mov     dword ptr [esp+18h], 0
.text:004054EF                 mov     ecx, [esp+40h]
.text:004054F3                 mov     dword ptr [esp+14h], 0
.text:004054FB                 mov     [esp+1Ch], edx
.text:004054FF                 mov     edx, [esp+3Ch]
.text:00405503                 mov     [esp+10h], ecx
.text:00405507                 mov     ecx, [esp+38h]
.text:0040550B                 mov     [esp+0Ch], edx
.text:0040550F                 mov     edx, [esp+34h]
.text:00405513                 mov     [esp+8], ecx
.text:00405517                 mov     [esp+4], edx
.text:0040551B                 mov     edx, [esp+30h]
.text:0040551F                 mov     [esp], edx
.text:00405522                 call    sub_403C80
.text:00405527                 add     esp, 2Ch
.text:0040552A                 retn
.text:0040552A ; ---------------------------------------------------------------------------
.text:0040552B                 align 10h
.text:00405530                 sub     esp, 1Ch
.text:00405533                 mov     edx, [esp+2Ch]
.text:00405537                 mov     dword ptr [esp+18h], 0
.text:0040553F                 mov     ecx, [esp+30h]
.text:00405543                 mov     dword ptr [esp+14h], 1
.text:0040554B                 mov     [esp+0Ch], edx
.text:0040554F                 mov     edx, [esp+24h]
.text:00405553                 mov     [esp+10h], ecx
.text:00405557                 mov     ecx, [esp+28h]
.text:0040555B                 mov     [esp+4], edx
.text:0040555F                 mov     edx, [esp+20h]
.text:00405563                 mov     [esp+8], ecx
.text:00405567                 mov     [esp], edx
.text:0040556A                 call    sub_404810
.text:0040556F                 add     esp, 1Ch
.text:00405572                 retn
.text:00405572 ; ---------------------------------------------------------------------------
.text:00405573                 align 10h
.text:00405580                 sub     esp, 2Ch
.text:00405583                 mov     edx, [esp+44h]
.text:00405587                 mov     dword ptr [esp+18h], 0
.text:0040558F                 mov     ecx, [esp+40h]
.text:00405593                 mov     dword ptr [esp+14h], 1
.text:0040559B                 mov     [esp+1Ch], edx
.text:0040559F                 mov     edx, [esp+3Ch]
.text:004055A3                 mov     [esp+10h], ecx
.text:004055A7                 mov     ecx, [esp+38h]
.text:004055AB                 mov     [esp+0Ch], edx
.text:004055AF                 mov     edx, [esp+34h]
.text:004055B3                 mov     [esp+8], ecx
.text:004055B7                 mov     [esp+4], edx
.text:004055BB                 mov     edx, [esp+30h]
.text:004055BF                 mov     [esp], edx
.text:004055C2                 call    sub_403C80
.text:004055C7                 add     esp, 2Ch
.text:004055CA                 retn
.text:004055CA ; ---------------------------------------------------------------------------
.text:004055CB                 align 10h
.text:004055D0 byte_4055D0     db 0                    ; DATA XREF: sub_405610+377↓r
.text:004055D1 aKmgtpezy       db 'KMGTPEZY.',0        ; DATA XREF: sub_405610+37↓o
.text:004055DB                 db 0                    ; DATA XREF: sub_405610+8D↓o
.text:004055DC ; const char a0lf[]
.text:004055DC a0lf            db '%.0Lf',0            ; DATA XREF: sub_405610+2B6↓o
.text:004055E2 ; const char a1lf[]
.text:004055E2 a1lf            db '%.1Lf',0            ; DATA XREF: sub_405610+584↓o
.text:004055E8 flt_4055E8      dd 1.8446744e19         ; DATA XREF: sub_405610:loc_405AB0↓r
.text:004055E8                                         ; sub_405610:loc_405ABB↓r ...
.text:004055EC                 align 10h
.text:004055F0 tbyte_4055F0    dt 1.8446744073709551615e19
.text:004055F0                                         ; DATA XREF: sub_405610+23E↓r
.text:004055F0                                         ; sub_405610+51A↓r ...
.text:004055FA                 align 10h
.text:00405600 tbyte_405600    dt 10.0                 ; DATA XREF: sub_405610+5E4↓r
.text:00405600                                         ; sub_405610:loc_405C60↓r
.text:0040560A                 align 10h
.text:00405610
.text:00405610 ; =============== S U B R O U T I N E =======================================
.text:00405610
.text:00405610
.text:00405610 ; int __cdecl sub_405610(int, int, char *Buffer, int, int, int, int, int)
.text:00405610 sub_405610      proc near               ; CODE XREF: sub_402660+1A8↑p
.text:00405610                                         ; sub_4028D0+2E8↑p ...
.text:00405610
.text:00405610 var_C4          = qword ptr -0C4h
.text:00405610 var_BC          = tbyte ptr -0BCh
.text:00405610 var_B0          = dword ptr -0B0h
.text:00405610 var_9C          = tbyte ptr -9Ch
.text:00405610 var_8C          = dword ptr -8Ch
.text:00405610 var_88          = dword ptr -88h
.text:00405610 var_80          = dword ptr -80h
.text:00405610 var_7C          = tbyte ptr -7Ch
.text:00405610 var_64          = dword ptr -64h
.text:00405610 var_60          = dword ptr -60h
.text:00405610 var_5C          = dword ptr -5Ch
.text:00405610 var_58          = dword ptr -58h
.text:00405610 Size            = dword ptr -54h
.text:00405610 Src             = dword ptr -50h
.text:00405610 var_4C          = dword ptr -4Ch
.text:00405610 var_48          = dword ptr -48h
.text:00405610 var_44          = dword ptr -44h
.text:00405610 var_40          = dword ptr -40h
.text:00405610 var_3C          = dword ptr -3Ch
.text:00405610 var_38          = dword ptr -38h
.text:00405610 var_34          = dword ptr -34h
.text:00405610 var_30          = dword ptr -30h
.text:00405610 var_2C          = qword ptr -2Ch
.text:00405610 var_24          = qword ptr -24h
.text:00405610 arg_0           = dword ptr  4
.text:00405610 arg_4           = dword ptr  8
.text:00405610 Buffer          = dword ptr  0Ch
.text:00405610 arg_C           = dword ptr  10h
.text:00405610 arg_10          = dword ptr  14h
.text:00405610 arg_14          = dword ptr  18h
.text:00405610 arg_18          = dword ptr  1Ch
.text:00405610 arg_1C          = dword ptr  20h
.text:00405610
.text:00405610                 push    ebp
.text:00405611                 push    edi
.text:00405612                 push    esi
.text:00405613                 push    ebx
.text:00405614                 sub     esp, 0ACh
.text:0040561A                 mov     ecx, [esp+0BCh+arg_18]
.text:00405621                 mov     [esp+0BCh+var_44], 0FFFFFFFFh
.text:00405629                 mov     eax, [esp+0BCh+arg_C]
.text:00405630                 mov     edi, [esp+0BCh+arg_0]
.text:00405637                 mov     dword ptr [esp+0BCh+var_2C], ecx
.text:0040563E                 mov     esi, [esp+0BCh+arg_4]
.text:00405645                 xor     ecx, ecx
.text:00405647                 mov     [esp+0BCh+Src], (offset aKmgtpezy+8) ; "."
.text:0040564F                 and     eax, 3
.text:00405652                 mov     ebx, [esp+0BCh+arg_1C]
.text:00405659                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00405661                 mov     dword ptr [esp+0BCh+var_24], edi
.text:00405668                 mov     ebp, [esp+0BCh+Buffer]
.text:0040566F                 mov     dword ptr [esp+0BCh+var_24+4], esi
.text:00405676                 mov     edi, [esp+0BCh+arg_14]
.text:0040567D                 mov     dword ptr [esp+0BCh+var_2C+4], ebx
.text:00405684                 mov     esi, [esp+0BCh+arg_10]
.text:0040568B                 setnz   cl
.text:0040568E                 mov     [esp+0BCh+var_30], eax
.text:00405695                 mov     [esp+0BCh+Size], 1
.text:0040569D                 mov     [esp+0BCh+var_5C], offset byte_4055DB
.text:004056A5                 dec     ecx
.text:004056A6                 and     ecx, 0FFFFFFE8h
.text:004056A9                 add     ecx, 400h
.text:004056AF                 mov     [esp+0BCh+var_34], ecx
.text:004056B6                 call    localeconv
.text:004056BB                 mov     edx, [eax]
.text:004056BD                 mov     ebx, eax
.text:004056BF                 mov     dword ptr [esp+0BCh+var_BC], edx ; Str
.text:004056C2                 call    strlen
.text:004056C7                 lea     ecx, [eax-1]
.text:004056CA                 cmp     ecx, 1
.text:004056CD                 ja      short loc_4056D9
.text:004056CF                 mov     [esp+0BCh+Size], eax
.text:004056D3                 mov     ecx, [ebx]
.text:004056D5                 mov     [esp+0BCh+Src], ecx
.text:004056D9
.text:004056D9 loc_4056D9:                             ; CODE XREF: sub_405610+BD↑j
.text:004056D9                 mov     eax, [ebx+8]
.text:004056DC                 mov     edx, [ebx+4]
.text:004056DF                 mov     [esp+0BCh+var_58], eax
.text:004056E3                 mov     dword ptr [esp+0BCh+var_BC], edx ; Str
.text:004056E6                 call    strlen
.text:004056EB                 cmp     eax, 2
.text:004056EE                 ja      short loc_4056F7
.text:004056F0                 mov     ecx, [ebx+4]
.text:004056F3                 mov     [esp+0BCh+var_5C], ecx
.text:004056F7
.text:004056F7 loc_4056F7:                             ; CODE XREF: sub_405610+DE↑j
.text:004056F7                 cmp     dword ptr [esp+0BCh+var_2C+4], edi
.text:004056FE                 lea     ebx, [ebp+74h]
.text:00405701                 mov     [esp+0BCh+var_4C], ebx
.text:00405705                 mov     [esp+0BCh+var_48], ebx
.text:00405709                 ja      loc_406048
.text:0040570F                 jb      short loc_40571E
.text:00405711                 cmp     dword ptr [esp+0BCh+var_2C], esi
.text:00405718                 ja      loc_406048
.text:0040571E
.text:0040571E loc_40571E:                             ; CODE XREF: sub_405610+FF↑j
.text:0040571E                 mov     dword ptr [esp+0BCh+var_BC], esi
.text:00405721                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:00405728                 mov     ecx, dword ptr [esp+0BCh+var_2C+4]
.text:0040572F                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:00405733                 mov     dword ptr [esp+0BCh+var_BC+8], edx
.text:00405737                 mov     [esp+0BCh+var_B0], ecx
.text:0040573B                 call    sub_411730
.text:00405740                 mov     ebx, edx
.text:00405742                 or      ebx, eax
.text:00405744                 jnz     loc_4057F0
.text:0040574A                 mov     dword ptr [esp+0BCh+var_BC], esi
.text:0040574D                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:00405754                 mov     ebx, dword ptr [esp+0BCh+var_2C+4]
.text:0040575B                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:0040575F                 mov     dword ptr [esp+0BCh+var_BC+8], edx
.text:00405763                 mov     [esp+0BCh+var_B0], ebx
.text:00405767                 call    sub_4118B0
.text:0040576C                 mov     [esp+0BCh+var_B0], edx
.text:00405770                 mov     ebx, dword ptr [esp+0BCh+var_24]
.text:00405777                 mov     ecx, [esp+0BCh+var_B0]
.text:0040577B                 mov     dword ptr [esp+0BCh+var_BC+8], eax
.text:0040577F                 mov     eax, dword ptr [esp+0BCh+var_24]
.text:00405786                 imul    ebx, ecx
.text:00405789                 mul     dword ptr [esp+0BCh+var_BC+8]
.text:0040578D                 mov     ecx, edx
.text:0040578F                 add     ecx, ebx
.text:00405791                 mov     [esp+0BCh+var_3C], eax
.text:00405798                 mov     edx, dword ptr [esp+0BCh+var_24+4]
.text:0040579F                 mov     ebx, dword ptr [esp+0BCh+var_BC+8]
.text:004057A3                 imul    edx, ebx
.text:004057A6                 mov     ebx, [esp+0BCh+var_3C]
.text:004057AD                 add     ecx, edx
.text:004057AF                 mov     [esp+0BCh+var_38], ecx
.text:004057B6                 mov     eax, [esp+0BCh+var_38]
.text:004057BD                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:004057C0                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:004057C4                 call    sub_4118B0
.text:004057C9                 mov     ebx, dword ptr [esp+0BCh+var_24+4]
.text:004057D0                 mov     ecx, dword ptr [esp+0BCh+var_24]
.text:004057D7                 xor     ebx, edx
.text:004057D9                 xor     eax, ecx
.text:004057DB                 or      ebx, eax
.text:004057DD                 jz      loc_405CB8
.text:004057E3                 lea     esi, [esi+0]
.text:004057E9                 lea     edi, [edi+0]
.text:004057F0
.text:004057F0 loc_4057F0:                             ; CODE XREF: sub_405610+134↑j
.text:004057F0                                         ; sub_405610+A3C↓j ...
.text:004057F0                 fild    [esp+0BCh+var_2C]
.text:004057F7                 mov     edx, dword ptr [esp+0BCh+var_2C+4]
.text:004057FE                 test    edx, edx
.text:00405800                 js      loc_405CAD
.text:00405806
.text:00405806 loc_405806:                             ; CODE XREF: sub_405610+6A3↓j
.text:00405806                 fild    [esp+0BCh+var_24]
.text:0040580D                 mov     ecx, dword ptr [esp+0BCh+var_24+4]
.text:00405814                 test    ecx, ecx
.text:00405816                 js      loc_405CA2
.text:0040581C
.text:0040581C loc_40581C:                             ; CODE XREF: sub_405610+698↓j
.text:0040581C                 push    edi
.text:0040581D                 push    esi
.text:0040581E                 fild    [esp+0C4h+var_C4]
.text:00405821                 add     esp, 8
.text:00405824                 test    edi, edi
.text:00405826                 js      loc_405C97
.text:0040582C
.text:0040582C loc_40582C:                             ; CODE XREF: sub_405610+68D↓j
.text:0040582C                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00405834                 fdivrp  st(2), st
.text:00405836                 fmulp   st(1), st
.text:00405838                 fld     st
.text:0040583A                 fstp    [esp+0BCh+var_7C]
.text:0040583E                 jnz     loc_405AC6
.text:00405844                 cmp     [esp+0BCh+var_30], 1
.text:0040584C                 jz      short loc_4058C0
.text:0040584E                 fld     ds:tbyte_4055F0
.text:00405854                 fucomp  st(1)
.text:00405856                 fnstsw  ax
.text:00405858                 sahf
.text:00405859                 jbe     short loc_4058C0
.text:0040585B                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:0040585E                 xor     ebx, ebx
.text:00405860                 call    sub_411A10
.text:00405865                 mov     edi, edx
.text:00405867                 xor     ecx, ecx
.text:00405869                 mov     edx, [esp+0BCh+var_30]
.text:00405870                 mov     esi, eax
.text:00405872                 test    edx, edx
.text:00405874                 jnz     short loc_40589C
.text:00405876                 push    edi
.text:00405877                 push    esi
.text:00405878                 fild    [esp+0C4h+var_C4]
.text:0040587B                 add     esp, 8
.text:0040587E                 test    edi, edi
.text:00405880                 js      loc_405ABB
.text:00405886
.text:00405886 loc_405886:                             ; CODE XREF: sub_405610+4B1↓j
.text:00405886                 fld     [esp+0BCh+var_7C]
.text:0040588A                 fxch    st(1)
.text:0040588C                 fucompp
.text:0040588E                 fnstsw  ax
.text:00405890                 sahf
.text:00405891                 jp      short loc_405895
.text:00405893                 jz      short loc_40589C
.text:00405895
.text:00405895 loc_405895:                             ; CODE XREF: sub_405610+281↑j
.text:00405895                 mov     ecx, 1
.text:0040589A                 xor     ebx, ebx
.text:0040589C
.text:0040589C loc_40589C:                             ; CODE XREF: sub_405610+264↑j
.text:0040589C                                         ; sub_405610+283↑j
.text:0040589C                 mov     edx, esi
.text:0040589E                 add     edx, ecx
.text:004058A0                 mov     esi, edi
.text:004058A2                 adc     esi, ebx
.text:004058A4                 push    esi
.text:004058A5                 push    edx
.text:004058A6                 fild    [esp+0C4h+var_C4]
.text:004058A9                 add     esp, 8
.text:004058AC                 test    esi, esi
.text:004058AE                 js      loc_405AB0
.text:004058B4                 lea     esi, [esi+0]
.text:004058BA                 lea     edi, [edi+0]
.text:004058C0
.text:004058C0 loc_4058C0:                             ; CODE XREF: sub_405610+23C↑j
.text:004058C0                                         ; sub_405610+249↑j ...
.text:004058C0                 fstp    [esp+0BCh+var_BC+8]
.text:004058C4                 xor     esi, esi
.text:004058C6                 mov     dword ptr [esp+0BCh+var_BC+4], offset a0lf ; "%.0Lf"
.text:004058CE                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Buffer
.text:004058D1                 call    sprintf
.text:004058D6                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Str
.text:004058D9                 call    strlen
.text:004058DE                 mov     ebx, eax
.text:004058E0
.text:004058E0 loc_4058E0:                             ; CODE XREF: sub_405610+5C7↓j
.text:004058E0                                         ; sub_405610+5D2↓j
.text:004058E0                 mov     dword ptr [esp+0BCh+var_BC+8], ebx ; Size
.text:004058E4                 mov     edi, [esp+0BCh+var_4C]
.text:004058E8                 mov     dword ptr [esp+0BCh+var_BC+4], ebp ; Src
.text:004058EC                 sub     edi, ebx
.text:004058EE                 mov     [esp+0BCh+var_48], edi
.text:004058F2                 mov     dword ptr [esp+0BCh+var_BC], edi ; void *
.text:004058F5                 call    memmove
.text:004058FA                 mov     ebp, [esp+0BCh+var_48]
.text:004058FE                 add     ebx, ebp
.text:00405900                 sub     ebx, esi
.text:00405902
.text:00405902 loc_405902:                             ; CODE XREF: sub_405610+97E↓j
.text:00405902                 test    byte ptr [esp+0BCh+arg_C], 4
.text:0040590A                 jnz     loc_405A81
.text:00405910
.text:00405910 loc_405910:                             ; CODE XREF: sub_405610+49B↓j
.text:00405910                 cmp     byte ptr [esp+0BCh+arg_C], 0
.text:00405918                 jns     loc_4059D0
.text:0040591E                 mov     esi, [esp+0BCh+var_44]
.text:00405922                 test    esi, esi
.text:00405924                 js      loc_4059E6
.text:0040592A
.text:0040592A loc_40592A:                             ; CODE XREF: sub_405610+419↓j
.text:0040592A                                         ; sub_405610+44B↓j ...
.text:0040592A                 mov     edi, [esp+0BCh+arg_C]
.text:00405931                 and     edi, 100h
.text:00405937                 or      edi, [esp+0BCh+var_44]
.text:0040593B                 jz      short loc_405960
.text:0040593D                 test    byte ptr [esp+0BCh+arg_C], 40h
.text:00405945                 jz      short loc_405960
.text:00405947                 mov     esi, [esp+0BCh+var_4C]
.text:0040594B                 mov     byte ptr [esi], 20h ; ' '
.text:0040594E                 inc     esi
.text:0040594F                 mov     [esp+0BCh+var_4C], esi
.text:00405953                 lea     esi, [esi+0]
.text:00405959                 lea     edi, [edi+0]
.text:00405960
.text:00405960 loc_405960:                             ; CODE XREF: sub_405610+32B↑j
.text:00405960                                         ; sub_405610+335↑j
.text:00405960                 mov     ecx, [esp+0BCh+var_44]
.text:00405964                 test    ecx, ecx
.text:00405966                 jz      short loc_405990
.text:00405968                 mov     eax, [esp+0BCh+var_4C]
.text:0040596C                 inc     [esp+0BCh+var_4C]
.text:00405970                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00405978                 jnz     short loc_405983
.text:0040597A                 cmp     [esp+0BCh+var_44], 1
.text:0040597F                 mov     dl, 6Bh ; 'k'
.text:00405981                 jz      short loc_40598E
.text:00405983
.text:00405983 loc_405983:                             ; CODE XREF: sub_405610+368↑j
.text:00405983                 mov     ebx, [esp+0BCh+var_44]
.text:00405987                 movzx   edx, ds:byte_4055D0[ebx]
.text:0040598E
.text:0040598E loc_40598E:                             ; CODE XREF: sub_405610+371↑j
.text:0040598E                 mov     [eax], dl
.text:00405990
.text:00405990 loc_405990:                             ; CODE XREF: sub_405610+356↑j
.text:00405990                 test    [esp+0BCh+arg_C], 100h
.text:0040599B                 jz      short loc_4059D0
.text:0040599D                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:004059A5                 jz      short loc_4059BC
.text:004059A7                 mov     edx, [esp+0BCh+var_44]
.text:004059AB                 test    edx, edx
.text:004059AD                 jz      short loc_4059BC
.text:004059AF                 mov     ebp, [esp+0BCh+var_4C]
.text:004059B3                 mov     byte ptr [ebp+0], 69h ; 'i'
.text:004059B7                 inc     ebp
.text:004059B8                 mov     [esp+0BCh+var_4C], ebp
.text:004059BC
.text:004059BC loc_4059BC:                             ; CODE XREF: sub_405610+395↑j
.text:004059BC                                         ; sub_405610+39D↑j
.text:004059BC                 mov     eax, [esp+0BCh+var_4C]
.text:004059C0                 mov     byte ptr [eax], 42h ; 'B'
.text:004059C3                 inc     eax
.text:004059C4                 mov     [esp+0BCh+var_4C], eax
.text:004059C8                 nop
.text:004059C9                 lea     esi, [esi+0]
.text:004059D0
.text:004059D0 loc_4059D0:                             ; CODE XREF: sub_405610+308↑j
.text:004059D0                                         ; sub_405610+38B↑j
.text:004059D0                 mov     edi, [esp+0BCh+var_4C]
.text:004059D4                 mov     byte ptr [edi], 0
.text:004059D7                 mov     eax, [esp+0BCh+var_48]
.text:004059DB                 add     esp, 0ACh
.text:004059E1                 pop     ebx
.text:004059E2                 pop     esi
.text:004059E3                 pop     edi
.text:004059E4                 pop     ebp
.text:004059E5                 retn
.text:004059E6 ; ---------------------------------------------------------------------------
.text:004059E6
.text:004059E6 loc_4059E6:                             ; CODE XREF: sub_405610+314↑j
.text:004059E6                 mov     [esp+0BCh+var_88], 0
.text:004059EE                 mov     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:004059F5                 cmp     [esp+0BCh+var_88], ebp
.text:004059F9                 mov     [esp+0BCh+var_44], 0
.text:00405A01                 mov     [esp+0BCh+var_8C], 1
.text:00405A09                 jnb     short loc_405A6F
.text:00405A0B
.text:00405A0B loc_405A0B:                             ; CODE XREF: sub_405610+46A↓j
.text:00405A0B                 mov     esi, [esp+0BCh+var_34]
.text:00405A12                 xor     edi, edi
.text:00405A14                 lea     esi, [esi+0]
.text:00405A1A                 lea     edi, [edi+0]
.text:00405A20
.text:00405A20 loc_405A20:                             ; CODE XREF: sub_405610+449↓j
.text:00405A20                                         ; sub_405610+458↓j
.text:00405A20                 inc     [esp+0BCh+var_44]
.text:00405A24                 cmp     [esp+0BCh+var_44], 8
.text:00405A29                 jz      loc_40592A
.text:00405A2F                 mov     eax, [esp+0BCh+var_8C]
.text:00405A33                 mov     ebp, [esp+0BCh+var_8C]
.text:00405A37                 mov     ebx, [esp+0BCh+var_88]
.text:00405A3B                 mul     esi
.text:00405A3D                 imul    ebp, edi
.text:00405A40                 imul    ebx, esi
.text:00405A43                 mov     ecx, eax
.text:00405A45                 add     edx, ebp
.text:00405A47                 lea     ebp, [ebx+edx]
.text:00405A4A                 cmp     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00405A51                 mov     [esp+0BCh+var_8C], ecx
.text:00405A55                 mov     [esp+0BCh+var_88], ebp
.text:00405A59                 jb      short loc_405A20
.text:00405A5B                 ja      loc_40592A
.text:00405A61                 cmp     ecx, dword ptr [esp+0BCh+var_2C]
.text:00405A68                 jb      short loc_405A20
.text:00405A6A                 jmp     loc_40592A
.text:00405A6F ; ---------------------------------------------------------------------------
.text:00405A6F
.text:00405A6F loc_405A6F:                             ; CODE XREF: sub_405610+3F9↑j
.text:00405A6F                 mov     ecx, dword ptr [esp+0BCh+var_2C]
.text:00405A76                 cmp     [esp+0BCh+var_8C], ecx
.text:00405A7A                 jb      short loc_405A0B
.text:00405A7C                 jmp     loc_40592A
.text:00405A81 ; ---------------------------------------------------------------------------
.text:00405A81
.text:00405A81 loc_405A81:                             ; CODE XREF: sub_405610+2FA↑j
.text:00405A81                 mov     eax, [esp+0BCh+var_48]
.text:00405A85                 mov     edx, [esp+0BCh+var_5C]
.text:00405A89                 mov     edi, [esp+0BCh+var_58]
.text:00405A8D                 sub     ebx, eax
.text:00405A8F                 mov     dword ptr [esp+0BCh+var_BC+4], ebx ; size_t
.text:00405A93                 mov     ebx, [esp+0BCh+var_48]
.text:00405A97                 mov     [esp+0BCh+var_B0], edx ; char *
.text:00405A9B                 mov     dword ptr [esp+0BCh+var_BC+8], edi ; int
.text:00405A9F                 mov     dword ptr [esp+0BCh+var_BC], ebx ; void *
.text:00405AA2                 call    sub_406360
.text:00405AA7                 mov     [esp+0BCh+var_48], eax
.text:00405AAB                 jmp     loc_405910
.text:00405AB0 ; ---------------------------------------------------------------------------
.text:00405AB0
.text:00405AB0 loc_405AB0:                             ; CODE XREF: sub_405610+29E↑j
.text:00405AB0                 fadd    ds:flt_4055E8
.text:00405AB6                 jmp     loc_4058C0
.text:00405ABB ; ---------------------------------------------------------------------------
.text:00405ABB
.text:00405ABB loc_405ABB:                             ; CODE XREF: sub_405610+270↑j
.text:00405ABB                 fadd    ds:flt_4055E8
.text:00405AC1                 jmp     loc_405886
.text:00405AC6 ; ---------------------------------------------------------------------------
.text:00405AC6
.text:00405AC6 loc_405AC6:                             ; CODE XREF: sub_405610+22E↑j
.text:00405AC6                 fstp    st
.text:00405AC8                 mov     [esp+0BCh+var_44], 0
.text:00405AD0                 mov     ebx, [esp+0BCh+var_34]
.text:00405AD7                 xor     eax, eax
.text:00405AD9                 push    eax
.text:00405ADA                 fld1
.text:00405ADC                 push    ebx
.text:00405ADD                 fild    [esp+0C4h+var_C4]
.text:00405AE0                 add     esp, 8
.text:00405AE3                 lea     esi, [esi+0]
.text:00405AE9                 lea     edi, [edi+0]
.text:00405AF0
.text:00405AF0 loc_405AF0:                             ; CODE XREF: sub_405610+500↓j
.text:00405AF0                 fld     [esp+0BCh+var_7C]
.text:00405AF4                 fxch    st(2)
.text:00405AF6                 fmul    st, st(1)
.text:00405AF8                 inc     [esp+0BCh+var_44]
.text:00405AFC                 fld     st
.text:00405AFE                 fmul    st, st(2)
.text:00405B00                 fxch    st(3)
.text:00405B02                 fucomp  st(3)
.text:00405B04                 fnstsw  ax
.text:00405B06                 fstp    st(2)
.text:00405B08                 sahf
.text:00405B09                 jb      short loc_405B12
.text:00405B0B                 cmp     [esp+0BCh+var_44], 8
.text:00405B10                 jl      short loc_405AF0
.text:00405B12
.text:00405B12 loc_405B12:                             ; CODE XREF: sub_405610+4F9↑j
.text:00405B12                 fstp    st
.text:00405B14                 fld     [esp+0BCh+var_7C]
.text:00405B18                 cmp     [esp+0BCh+var_30], 1
.text:00405B20                 fdivrp  st(1), st
.text:00405B22                 fld     st
.text:00405B24                 fstp    [esp+0BCh+var_7C]
.text:00405B28                 jz      short loc_405B90
.text:00405B2A                 fld     ds:tbyte_4055F0
.text:00405B30                 fucomp  st(1)
.text:00405B32                 fnstsw  ax
.text:00405B34                 sahf
.text:00405B35                 jbe     short loc_405B90
.text:00405B37                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:00405B3A                 xor     ebx, ebx
.text:00405B3C                 call    sub_411A10
.text:00405B41                 mov     edi, edx
.text:00405B43                 xor     ecx, ecx
.text:00405B45                 mov     edx, [esp+0BCh+var_30]
.text:00405B4C                 mov     esi, eax
.text:00405B4E                 test    edx, edx
.text:00405B50                 jnz     short loc_405B78
.text:00405B52                 push    edi
.text:00405B53                 push    esi
.text:00405B54                 fild    [esp+0C4h+var_C4]
.text:00405B57                 add     esp, 8
.text:00405B5A                 test    edi, edi
.text:00405B5C                 js      loc_405C8C
.text:00405B62
.text:00405B62 loc_405B62:                             ; CODE XREF: sub_405610+682↓j
.text:00405B62                 fld     [esp+0BCh+var_7C]
.text:00405B66                 fxch    st(1)
.text:00405B68                 fucompp
.text:00405B6A                 fnstsw  ax
.text:00405B6C                 sahf
.text:00405B6D                 jp      short loc_405B71
.text:00405B6F                 jz      short loc_405B78
.text:00405B71
.text:00405B71 loc_405B71:                             ; CODE XREF: sub_405610+55D↑j
.text:00405B71                 mov     ecx, 1
.text:00405B76                 xor     ebx, ebx
.text:00405B78
.text:00405B78 loc_405B78:                             ; CODE XREF: sub_405610+540↑j
.text:00405B78                                         ; sub_405610+55F↑j
.text:00405B78                 mov     edx, esi
.text:00405B7A                 add     edx, ecx
.text:00405B7C                 mov     esi, edi
.text:00405B7E                 adc     esi, ebx
.text:00405B80                 push    esi
.text:00405B81                 push    edx
.text:00405B82                 fild    [esp+0C4h+var_C4]
.text:00405B85                 add     esp, 8
.text:00405B88                 test    esi, esi
.text:00405B8A                 js      loc_405C81
.text:00405B90
.text:00405B90 loc_405B90:                             ; CODE XREF: sub_405610+518↑j
.text:00405B90                                         ; sub_405610+525↑j ...
.text:00405B90                 fstp    [esp+0BCh+var_BC+8]
.text:00405B94                 mov     dword ptr [esp+0BCh+var_BC+4], offset a1lf ; "%.1Lf"
.text:00405B9C                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Buffer
.text:00405B9F                 call    sprintf
.text:00405BA4                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Str
.text:00405BA7                 call    strlen
.text:00405BAC                 mov     ebx, eax
.text:00405BAE                 mov     esi, [esp+0BCh+Size]
.text:00405BB2                 mov     eax, [esp+0BCh+Size]
.text:00405BB6                 inc     esi
.text:00405BB7                 add     eax, 2
.text:00405BBA                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00405BC2                 jnz     short loc_405BCB
.text:00405BC4                 mov     eax, [esp+0BCh+Size]
.text:00405BC8                 add     eax, 3
.text:00405BCB
.text:00405BCB loc_405BCB:                             ; CODE XREF: sub_405610+5B2↑j
.text:00405BCB                 cmp     eax, ebx
.text:00405BCD                 jb      short loc_405BE8
.text:00405BCF                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00405BD7                 jz      loc_4058E0
.text:00405BDD                 cmp     byte ptr [ebx+ebp-1], 30h ; '0'
.text:00405BE2                 jnz     loc_4058E0
.text:00405BE8
.text:00405BE8 loc_405BE8:                             ; CODE XREF: sub_405610+5BD↑j
.text:00405BE8                 cmp     [esp+0BCh+var_30], 1
.text:00405BF0                 fld     [esp+0BCh+var_7C]
.text:00405BF4                 fld     ds:tbyte_405600
.text:00405BFA                 fmulp   st(1), st
.text:00405BFC                 jz      short loc_405C60
.text:00405BFE                 fld     ds:tbyte_4055F0
.text:00405C04                 fucomp  st(1)
.text:00405C06                 fnstsw  ax
.text:00405C08                 sahf
.text:00405C09                 jbe     short loc_405C60
.text:00405C0B                 fld     st
.text:00405C0D                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:00405C10                 xor     ebx, ebx
.text:00405C12                 fstp    [esp+0BCh+var_9C]
.text:00405C16                 call    sub_411A10
.text:00405C1B                 fld     [esp+0BCh+var_9C]
.text:00405C1F                 mov     edi, edx
.text:00405C21                 xor     ecx, ecx
.text:00405C23                 mov     edx, [esp+0BCh+var_30]
.text:00405C2A                 mov     esi, eax
.text:00405C2C                 test    edx, edx
.text:00405C2E                 jnz     short loc_405C7D
.text:00405C30                 push    edi
.text:00405C31                 push    esi
.text:00405C32                 fild    [esp+0C4h+var_C4]
.text:00405C35                 add     esp, 8
.text:00405C38                 test    edi, edi
.text:00405C3A                 js      short loc_405C75
.text:00405C3C
.text:00405C3C loc_405C3C:                             ; CODE XREF: sub_405610+66B↓j
.text:00405C3C                 fucompp
.text:00405C3E                 fnstsw  ax
.text:00405C40                 sahf
.text:00405C41                 jp      short loc_405C45
.text:00405C43                 jz      short loc_405C4C
.text:00405C45
.text:00405C45 loc_405C45:                             ; CODE XREF: sub_405610+631↑j
.text:00405C45                 mov     ecx, 1
.text:00405C4A                 xor     ebx, ebx
.text:00405C4C
.text:00405C4C loc_405C4C:                             ; CODE XREF: sub_405610+633↑j
.text:00405C4C                                         ; sub_405610+66F↓j
.text:00405C4C                 mov     edx, esi
.text:00405C4E                 add     edx, ecx
.text:00405C50                 mov     esi, edi
.text:00405C52                 adc     esi, ebx
.text:00405C54                 push    esi
.text:00405C55                 push    edx
.text:00405C56                 fild    [esp+0C4h+var_C4]
.text:00405C59                 add     esp, 8
.text:00405C5C                 test    esi, esi
.text:00405C5E                 js      short loc_405C6D
.text:00405C60
.text:00405C60 loc_405C60:                             ; CODE XREF: sub_405610+5EC↑j
.text:00405C60                                         ; sub_405610+5F9↑j ...
.text:00405C60                 fld     ds:tbyte_405600
.text:00405C66                 fdivp   st(1), st
.text:00405C68                 jmp     loc_4058C0
.text:00405C6D ; ---------------------------------------------------------------------------
.text:00405C6D
.text:00405C6D loc_405C6D:                             ; CODE XREF: sub_405610+64E↑j
.text:00405C6D                 fadd    ds:flt_4055E8
.text:00405C73                 jmp     short loc_405C60
.text:00405C75 ; ---------------------------------------------------------------------------
.text:00405C75
.text:00405C75 loc_405C75:                             ; CODE XREF: sub_405610+62A↑j
.text:00405C75                 fadd    ds:flt_4055E8
.text:00405C7B                 jmp     short loc_405C3C
.text:00405C7D ; ---------------------------------------------------------------------------
.text:00405C7D
.text:00405C7D loc_405C7D:                             ; CODE XREF: sub_405610+61E↑j
.text:00405C7D                 fstp    st
.text:00405C7F                 jmp     short loc_405C4C
.text:00405C81 ; ---------------------------------------------------------------------------
.text:00405C81
.text:00405C81 loc_405C81:                             ; CODE XREF: sub_405610+57A↑j
.text:00405C81                 fadd    ds:flt_4055E8
.text:00405C87                 jmp     loc_405B90
.text:00405C8C ; ---------------------------------------------------------------------------
.text:00405C8C
.text:00405C8C loc_405C8C:                             ; CODE XREF: sub_405610+54C↑j
.text:00405C8C                 fadd    ds:flt_4055E8
.text:00405C92                 jmp     loc_405B62
.text:00405C97 ; ---------------------------------------------------------------------------
.text:00405C97
.text:00405C97 loc_405C97:                             ; CODE XREF: sub_405610+216↑j
.text:00405C97                 fadd    ds:flt_4055E8
.text:00405C9D                 jmp     loc_40582C
.text:00405CA2 ; ---------------------------------------------------------------------------
.text:00405CA2
.text:00405CA2 loc_405CA2:                             ; CODE XREF: sub_405610+206↑j
.text:00405CA2                 fadd    ds:flt_4055E8
.text:00405CA8                 jmp     loc_40581C
.text:00405CAD ; ---------------------------------------------------------------------------
.text:00405CAD
.text:00405CAD loc_405CAD:                             ; CODE XREF: sub_405610+1F0↑j
.text:00405CAD                 fadd    ds:flt_4055E8
.text:00405CB3                 jmp     loc_405806
.text:00405CB8 ; ---------------------------------------------------------------------------
.text:00405CB8
.text:00405CB8 loc_405CB8:                             ; CODE XREF: sub_405610+1CD↑j
.text:00405CB8                 mov     [esp+0BCh+var_40], 0
.text:00405CC0
.text:00405CC0 loc_405CC0:                             ; CODE XREF: sub_405610+B5E↓j
.text:00405CC0                 xor     ebp, ebp
.text:00405CC2
.text:00405CC2 loc_405CC2:                             ; CODE XREF: sub_405610+B4D↓j
.text:00405CC2                                         ; sub_405610+B58↓j ...
.text:00405CC2                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00405CCA                 jz      loc_405E77
.text:00405CD0                 mov     [esp+0BCh+var_44], 0
.text:00405CD8                 xor     edx, edx
.text:00405CDA                 mov     eax, [esp+0BCh+var_34]
.text:00405CE1                 cmp     edx, [esp+0BCh+var_38]
.text:00405CE8                 ja      loc_405E77
.text:00405CEE                 jb      short loc_405CFD
.text:00405CF0                 cmp     eax, [esp+0BCh+var_3C]
.text:00405CF7                 ja      loc_405E77
.text:00405CFD
.text:00405CFD loc_405CFD:                             ; CODE XREF: sub_405610+6DE↑j
.text:00405CFD                 mov     esi, eax
.text:00405CFF                 mov     edi, edx
.text:00405D01
.text:00405D01 loc_405D01:                             ; CODE XREF: sub_405610+7AC↓j
.text:00405D01                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00405D05                 mov     ecx, [esp+0BCh+var_3C]
.text:00405D0C                 mov     eax, [esp+0BCh+var_38]
.text:00405D13                 mov     [esp+0BCh+var_B0], edi
.text:00405D17                 mov     dword ptr [esp+0BCh+var_BC], ecx
.text:00405D1A                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:00405D1E                 call    sub_411730
.text:00405D23                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00405D27                 mov     edx, eax
.text:00405D29                 mov     ebx, [esp+0BCh+var_40]
.text:00405D2D                 mov     [esp+0BCh+var_B0], edi
.text:00405D31                 shl     edx, 2
.text:00405D34                 mov     ecx, ebp
.text:00405D36                 add     edx, eax
.text:00405D38                 lea     eax, [ebx+edx*2]
.text:00405D3B                 xor     edx, edx
.text:00405D3D                 div     [esp+0BCh+var_34]
.text:00405D44                 sar     ecx, 1
.text:00405D46                 lea     ebx, [ecx+edx*2]
.text:00405D49                 mov     [esp+0BCh+var_80], eax
.text:00405D4D                 mov     ecx, [esp+0BCh+var_38]
.text:00405D54                 mov     edx, [esp+0BCh+var_3C]
.text:00405D5B                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:00405D5F                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:00405D62                 call    sub_4118B0
.text:00405D67                 cmp     ebx, [esp+0BCh+var_34]
.text:00405D6E                 mov     [esp+0BCh+var_3C], eax
.text:00405D75                 mov     ecx, [esp+0BCh+var_80]
.text:00405D79                 mov     [esp+0BCh+var_38], edx
.text:00405D80                 mov     [esp+0BCh+var_40], ecx
.text:00405D84                 jnb     loc_406031
.text:00405D8A                 lea     edx, [ebp+ebx+0]
.text:00405D8E                 test    edx, edx
.text:00405D90                 setnz   bl
.text:00405D93                 movzx   ebp, bl
.text:00405D96
.text:00405D96 loc_405D96:                             ; CODE XREF: sub_405610+A33↓j
.text:00405D96                 inc     [esp+0BCh+var_44]
.text:00405D9A                 xor     ebx, ebx
.text:00405D9C                 mov     eax, [esp+0BCh+var_34]
.text:00405DA3                 cmp     ebx, [esp+0BCh+var_38]
.text:00405DAA                 ja      short loc_405DC2
.text:00405DAC                 jb      short loc_405DB7
.text:00405DAE                 cmp     eax, [esp+0BCh+var_3C]
.text:00405DB5                 ja      short loc_405DC2
.text:00405DB7
.text:00405DB7 loc_405DB7:                             ; CODE XREF: sub_405610+79C↑j
.text:00405DB7                 cmp     [esp+0BCh+var_44], 8
.text:00405DBC                 jl      loc_405D01
.text:00405DC2
.text:00405DC2 loc_405DC2:                             ; CODE XREF: sub_405610+79A↑j
.text:00405DC2                                         ; sub_405610+7A5↑j
.text:00405DC2                 cmp     [esp+0BCh+var_38], 0
.text:00405DCA                 ja      loc_405E77
.text:00405DD0                 cmp     [esp+0BCh+var_3C], 9
.text:00405DD8                 ja      loc_405E77
.text:00405DDE                 cmp     [esp+0BCh+var_30], 1
.text:00405DE6                 jz      loc_406019
.text:00405DEC                 mov     eax, [esp+0BCh+var_30]
.text:00405DF3                 test    eax, eax
.text:00405DF5                 jnz     short loc_405E0F
.text:00405DF7                 test    ebp, ebp
.text:00405DF9                 jle     short loc_405E0F
.text:00405DFB
.text:00405DFB loc_405DFB:                             ; CODE XREF: sub_405610+A16↓j
.text:00405DFB                 mov     edx, [esp+0BCh+var_80]
.text:00405DFF                 xor     ebp, ebp
.text:00405E01                 inc     edx
.text:00405E02                 mov     [esp+0BCh+var_40], edx
.text:00405E06                 cmp     edx, 0Ah
.text:00405E09                 jz      loc_405FFC
.text:00405E0F
.text:00405E0F loc_405E0F:                             ; CODE XREF: sub_405610+7E5↑j
.text:00405E0F                                         ; sub_405610+7E9↑j ...
.text:00405E0F                 cmp     [esp+0BCh+var_38], 0
.text:00405E17                 ja      short loc_405E77
.text:00405E19                 cmp     [esp+0BCh+var_3C], 9
.text:00405E21                 ja      short loc_405E77
.text:00405E23                 mov     ecx, [esp+0BCh+var_40]
.text:00405E27                 test    ecx, ecx
.text:00405E29                 jnz     short loc_405E35
.text:00405E2B                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00405E33                 jnz     short loc_405E77
.text:00405E35
.text:00405E35 loc_405E35:                             ; CODE XREF: sub_405610+819↑j
.text:00405E35                 movzx   edx, byte ptr [esp+0BCh+var_40]
.text:00405E3A                 mov     ecx, [esp+0BCh+var_4C]
.text:00405E3E                 mov     edi, [esp+0BCh+var_4C]
.text:00405E42                 dec     ecx
.text:00405E43                 add     dl, 30h ; '0'
.text:00405E46                 mov     [esp+0BCh+var_48], ecx
.text:00405E4A                 mov     [edi-1], dl
.text:00405E4D                 mov     esi, [esp+0BCh+Size]
.text:00405E51                 mov     ebx, [esp+0BCh+Src]
.text:00405E55                 sub     [esp+0BCh+var_48], esi
.text:00405E59                 mov     dword ptr [esp+0BCh+var_BC+8], esi ; Size
.text:00405E5D                 mov     dword ptr [esp+0BCh+var_BC+4], ebx ; Src
.text:00405E61                 mov     ebp, [esp+0BCh+var_48]
.text:00405E65                 mov     dword ptr [esp+0BCh+var_BC], ebp ; void *
.text:00405E68                 xor     ebp, ebp
.text:00405E6A                 call    memcpy
.text:00405E6F                 mov     [esp+0BCh+var_40], 0
.text:00405E77
.text:00405E77 loc_405E77:                             ; CODE XREF: sub_405610+6BA↑j
.text:00405E77                                         ; sub_405610+6D8↑j ...
.text:00405E77                 cmp     [esp+0BCh+var_30], 1
.text:00405E7F                 jz      loc_405FC1
.text:00405E85                 mov     eax, [esp+0BCh+var_30]
.text:00405E8C                 test    eax, eax
.text:00405E8E                 jnz     short loc_405F01
.text:00405E90                 mov     edx, [esp+0BCh+var_40]
.text:00405E94                 add     edx, ebp
.text:00405E96                 test    edx, edx
.text:00405E98                 jle     short loc_405F01
.text:00405E9A
.text:00405E9A loc_405E9A:                             ; CODE XREF: sub_405610:loc_405FEA↓j
.text:00405E9A                 add     [esp+0BCh+var_3C], 1
.text:00405EA2                 adc     [esp+0BCh+var_38], 0
.text:00405EAA                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00405EB2                 jz      short loc_405F01
.text:00405EB4                 mov     esi, [esp+0BCh+var_34]
.text:00405EBB                 xor     ebx, ebx
.text:00405EBD                 mov     ebp, [esp+0BCh+var_38]
.text:00405EC4                 mov     ecx, [esp+0BCh+var_3C]
.text:00405ECB                 xor     ebp, ebx
.text:00405ECD                 xor     esi, ecx
.text:00405ECF                 or      ebp, esi
.text:00405ED1                 jnz     short loc_405F01
.text:00405ED3                 cmp     [esp+0BCh+var_44], 8
.text:00405ED8                 jge     short loc_405F01
.text:00405EDA                 inc     [esp+0BCh+var_44]
.text:00405EDE                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00405EE6                 jz      loc_405F93
.text:00405EEC
.text:00405EEC loc_405EEC:                             ; CODE XREF: sub_405610+9AC↓j
.text:00405EEC                 mov     ecx, 1
.text:00405EF1                 xor     esi, esi
.text:00405EF3                 mov     [esp+0BCh+var_3C], ecx
.text:00405EFA                 mov     [esp+0BCh+var_38], esi
.text:00405F01
.text:00405F01 loc_405F01:                             ; CODE XREF: sub_405610+87E↑j
.text:00405F01                                         ; sub_405610+888↑j ...
.text:00405F01                 mov     ebx, [esp+0BCh+var_48]
.text:00405F05                 lea     esi, [esi+0]
.text:00405F09                 lea     edi, [edi+0]
.text:00405F10
.text:00405F10 loc_405F10:                             ; CODE XREF: sub_405610+97C↓j
.text:00405F10                 mov     dword ptr [esp+0BCh+var_BC+8], 0Ah
.text:00405F18                 mov     ecx, [esp+0BCh+var_38]
.text:00405F1F                 mov     ebp, [esp+0BCh+var_3C]
.text:00405F26                 mov     [esp+0BCh+var_B0], 0
.text:00405F2E                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:00405F32                 mov     dword ptr [esp+0BCh+var_BC], ebp
.text:00405F35                 call    sub_411730
.text:00405F3A                 dec     [esp+0BCh+var_48]
.text:00405F3E                 add     al, 30h ; '0'
.text:00405F40                 mov     esi, [esp+0BCh+var_48]
.text:00405F44                 mov     [esi], al
.text:00405F46                 mov     edx, [esp+0BCh+var_3C]
.text:00405F4D                 mov     dword ptr [esp+0BCh+var_BC+8], 0Ah
.text:00405F55                 mov     edi, [esp+0BCh+var_38]
.text:00405F5C                 mov     [esp+0BCh+var_B0], 0
.text:00405F64                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:00405F67                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:00405F6B                 call    sub_4118B0
.text:00405F70                 mov     [esp+0BCh+var_38], edx
.text:00405F77                 mov     ebp, [esp+0BCh+var_38]
.text:00405F7E                 mov     [esp+0BCh+var_3C], eax
.text:00405F85                 or      ebp, [esp+0BCh+var_3C]
.text:00405F8C                 jnz     short loc_405F10
.text:00405F8E                 jmp     loc_405902
.text:00405F93 ; ---------------------------------------------------------------------------
.text:00405F93
.text:00405F93 loc_405F93:                             ; CODE XREF: sub_405610+8D6↑j
.text:00405F93                 dec     [esp+0BCh+var_48]
.text:00405F97                 mov     edi, [esp+0BCh+var_48]
.text:00405F9B                 mov     byte ptr [edi], 30h ; '0'
.text:00405F9E                 mov     edx, [esp+0BCh+Size]
.text:00405FA2                 mov     eax, [esp+0BCh+Src]
.text:00405FA6                 mov     dword ptr [esp+0BCh+var_BC+8], edx ; Size
.text:00405FAA                 sub     edi, edx
.text:00405FAC                 mov     [esp+0BCh+var_48], edi
.text:00405FB0                 mov     dword ptr [esp+0BCh+var_BC+4], eax ; Src
.text:00405FB4                 mov     dword ptr [esp+0BCh+var_BC], edi ; void *
.text:00405FB7                 call    memcpy
.text:00405FBC                 jmp     loc_405EEC
.text:00405FC1 ; ---------------------------------------------------------------------------
.text:00405FC1
.text:00405FC1 loc_405FC1:                             ; CODE XREF: sub_405610+86F↑j
.text:00405FC1                 mov     ebx, [esp+0BCh+var_3C]
.text:00405FC8                 mov     ecx, ebp
.text:00405FCA                 mov     esi, ebp
.text:00405FCC                 sar     esi, 1Fh
.text:00405FCF                 xor     ebp, ebp
.text:00405FD1                 and     ebx, 1
.text:00405FD4                 add     ecx, ebx
.text:00405FD6                 adc     esi, ebp
.text:00405FD8                 cmp     esi, 0
.text:00405FDB                 ja      short loc_405FE2
.text:00405FDD                 cmp     ecx, 0
.text:00405FE0                 jbe     short loc_405FF5
.text:00405FE2
.text:00405FE2 loc_405FE2:                             ; CODE XREF: sub_405610+9CB↑j
.text:00405FE2                 mov     edi, [esp+0BCh+var_40]
.text:00405FE6                 inc     edi
.text:00405FE7                 cmp     edi, 5
.text:00405FEA
.text:00405FEA loc_405FEA:                             ; CODE XREF: sub_405610+9EA↓j
.text:00405FEA                 jg      loc_405E9A
.text:00405FF0                 jmp     loc_405F01
.text:00405FF5 ; ---------------------------------------------------------------------------
.text:00405FF5
.text:00405FF5 loc_405FF5:                             ; CODE XREF: sub_405610+9D0↑j
.text:00405FF5                 cmp     [esp+0BCh+var_40], 5
.text:00405FFA                 jmp     short loc_405FEA
.text:00405FFC ; ---------------------------------------------------------------------------
.text:00405FFC
.text:00405FFC loc_405FFC:                             ; CODE XREF: sub_405610+7F9↑j
.text:00405FFC                 add     [esp+0BCh+var_3C], 1
.text:00406004                 mov     [esp+0BCh+var_40], 0
.text:0040600C                 adc     [esp+0BCh+var_38], 0
.text:00406014                 jmp     loc_405E0F
.text:00406019 ; ---------------------------------------------------------------------------
.text:00406019
.text:00406019 loc_406019:                             ; CODE XREF: sub_405610+7D6↑j
.text:00406019                 mov     edi, [esp+0BCh+var_80]
.text:0040601D                 and     edi, 1
.text:00406020                 lea     esi, [edi+ebp]
.text:00406023                 cmp     esi, 2
.text:00406026                 jg      loc_405DFB
.text:0040602C                 jmp     loc_405E0F
.text:00406031 ; ---------------------------------------------------------------------------
.text:00406031
.text:00406031 loc_406031:                             ; CODE XREF: sub_405610+774↑j
.text:00406031                 lea     edx, [ebp+ebx+0]
.text:00406035                 cmp     [esp+0BCh+var_34], edx
.text:0040603C                 sbb     ecx, ecx
.text:0040603E                 not     ecx
.text:00406040                 lea     ebp, [ecx+3]
.text:00406043                 jmp     loc_405D96
.text:00406048 ; ---------------------------------------------------------------------------
.text:00406048
.text:00406048 loc_406048:                             ; CODE XREF: sub_405610+F9↑j
.text:00406048                                         ; sub_405610+108↑j
.text:00406048                 mov     eax, edi
.text:0040604A                 or      eax, esi
.text:0040604C                 jz      loc_4057F0
.text:00406052                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00406056                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:0040605D                 mov     ecx, dword ptr [esp+0BCh+var_2C+4]
.text:00406064                 mov     [esp+0BCh+var_B0], edi
.text:00406068                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:0040606B                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:0040606F                 call    sub_411730
.text:00406074                 mov     ebx, edx
.text:00406076                 or      ebx, eax
.text:00406078                 jnz     loc_4057F0
.text:0040607E                 mov     [esp+0BCh+var_B0], edi
.text:00406082                 mov     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00406089                 mov     edi, dword ptr [esp+0BCh+var_2C]
.text:00406090                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00406094                 mov     dword ptr [esp+0BCh+var_BC+4], ebp
.text:00406098                 mov     dword ptr [esp+0BCh+var_BC], edi
.text:0040609B                 call    sub_4118B0
.text:004060A0                 mov     dword ptr [esp+0BCh+var_BC+8], eax
.text:004060A4                 mov     ebx, dword ptr [esp+0BCh+var_24]
.text:004060AB                 mov     ebp, edx
.text:004060AD                 mov     [esp+0BCh+var_B0], edx
.text:004060B1                 mov     esi, dword ptr [esp+0BCh+var_24+4]
.text:004060B8                 mov     edi, eax
.text:004060BA                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:004060BD                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:004060C1                 call    sub_411730
.text:004060C6                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:004060CA                 mov     ebx, eax
.text:004060CC                 mov     esi, edx
.text:004060CE                 shld    esi, eax, 2
.text:004060D2                 mov     [esp+0BCh+var_B0], ebp
.text:004060D6                 shl     ebx, 2
.text:004060D9                 add     ebx, eax
.text:004060DB                 adc     esi, edx
.text:004060DD                 shld    esi, ebx, 1
.text:004060E1                 add     ebx, ebx
.text:004060E3                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:004060E6                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:004060EA                 call    sub_411730
.text:004060EF                 shld    edx, eax, 1
.text:004060F3                 mov     ecx, dword ptr [esp+0BCh+var_24]
.text:004060FA                 add     eax, eax
.text:004060FC                 mov     [esp+0BCh+var_64], eax
.text:00406100                 mov     eax, dword ptr [esp+0BCh+var_24+4]
.text:00406107                 mov     dword ptr [esp+0BCh+var_BC], ecx
.text:0040610A                 mov     [esp+0BCh+var_60], edx
.text:0040610E                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:00406112                 mov     [esp+0BCh+var_B0], ebp
.text:00406116                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:0040611A                 call    sub_4118B0
.text:0040611F                 mov     [esp+0BCh+var_3C], eax
.text:00406126                 mov     [esp+0BCh+var_38], edx
.text:0040612D                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:00406131                 mov     [esp+0BCh+var_B0], ebp
.text:00406135                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:00406138                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:0040613C                 call    sub_4118B0
.text:00406141                 cmp     [esp+0BCh+var_60], ebp
.text:00406145                 mov     [esp+0BCh+var_40], eax
.text:00406149                 ja      short loc_406173
.text:0040614B                 jb      short loc_406153
.text:0040614D                 cmp     [esp+0BCh+var_64], edi
.text:00406151                 jnb     short loc_406173
.text:00406153
.text:00406153 loc_406153:                             ; CODE XREF: sub_405610+B3B↑j
.text:00406153                 cmp     [esp+0BCh+var_60], 0
.text:00406158                 mov     ebp, 1
.text:0040615D                 ja      loc_405CC2
.text:00406163                 cmp     [esp+0BCh+var_64], 0
.text:00406168                 ja      loc_405CC2
.text:0040616E                 jmp     loc_405CC0
.text:00406173 ; ---------------------------------------------------------------------------
.text:00406173
.text:00406173 loc_406173:                             ; CODE XREF: sub_405610+B39↑j
.text:00406173                                         ; sub_405610+B41↑j
.text:00406173                 cmp     ebp, [esp+0BCh+var_60]
.text:00406177                 ja      short loc_40618B
.text:00406179                 jb      short loc_406181
.text:0040617B                 cmp     edi, [esp+0BCh+var_64]
.text:0040617F                 jnb     short loc_40618B
.text:00406181
.text:00406181 loc_406181:                             ; CODE XREF: sub_405610+B69↑j
.text:00406181                 mov     ebp, 3
.text:00406186                 jmp     loc_405CC2
.text:0040618B ; ---------------------------------------------------------------------------
.text:0040618B
.text:0040618B loc_40618B:                             ; CODE XREF: sub_405610+B67↑j
.text:0040618B                                         ; sub_405610+B6F↑j
.text:0040618B                 mov     ebp, 2
.text:00406190                 jmp     loc_405CC2
.text:00406190 sub_405610      endp
.text:00406190
.text:00406190 ; ---------------------------------------------------------------------------
.text:00406195 aHumanReadable  db 'human-readable',0   ; DATA XREF: .text:off_4061A8↓o
.text:004061A4 aSi             db 'si',0               ; DATA XREF: .text:004061AC↓o
.text:004061A7                 align 4
.text:004061A8 off_4061A8      dd offset aHumanReadable
.text:004061A8                                         ; DATA XREF: sub_406430+3A↓o
.text:004061A8                                         ; "human-readable"
.text:004061AC                 dd offset aSi           ; "si"
.text:004061B0                 dd 0
.text:004061B4 dword_4061B4    dd 0B0h                 ; DATA XREF: sub_406430+32↓o
.text:004061B4                                         ; sub_406430+54↓r
.text:004061B8                 db 90h
.text:004061B9                 align 4
.text:004061BC aBlockSize      db 'block size',0       ; DATA XREF: sub_406240:loc_4062A2↓o
.text:004061BC                                         ; sub_406240:loc_4062F4↓o ...
.text:004061C7 ; const char aSSTooLarge[]
.text:004061C7 aSSTooLarge     db '%s `%s',27h,' too large',0
.text:004061C7                                         ; DATA XREF: sub_406240+73↓o
.text:004061D9                 db 17h dup(90h)
.text:004061F0 aInvalidCharact db 'invalid character following %s in `%s',27h,0
.text:004061F0                                         ; DATA XREF: sub_406240+C5↓o
.text:00406217 aInvalidSS      db 'invalid %s `%s',27h,0
.text:00406217                                         ; DATA XREF: sub_406240+E6↓o
.text:00406227 ; const char aPosixlyCorrect_0[]
.text:00406227 aPosixlyCorrect_0 db 'POSIXLY_CORRECT',0
.text:00406227                                         ; DATA XREF: sub_406240:loc_406330↓o
.text:00406227                                         ; sub_406430+11A↓o
.text:00406237                 align 10h
.text:00406240
.text:00406240 ; =============== S U B R O U T I N E =======================================
.text:00406240
.text:00406240
.text:00406240 ; int __cdecl sub_406240(char *, char, int)
.text:00406240 sub_406240      proc near               ; CODE XREF: sub_401B70+B3↑p
.text:00406240                                         ; sub_401B70+164↑p
.text:00406240
.text:00406240 VarName         = dword ptr -2Ch
.text:00406240 ErrorMessage    = dword ptr -28h
.text:00406240 var_24          = dword ptr -24h
.text:00406240 var_20          = byte ptr -20h
.text:00406240 var_1C          = dword ptr -1Ch
.text:00406240 var_11          = byte ptr -11h
.text:00406240 var_10          = dword ptr -10h
.text:00406240 var_C           = dword ptr -0Ch
.text:00406240 var_8           = dword ptr -8
.text:00406240 var_4           = dword ptr -4
.text:00406240 arg_0           = dword ptr  4
.text:00406240 arg_4           = byte ptr  8
.text:00406240 arg_8           = dword ptr  0Ch
.text:00406240
.text:00406240                 sub     esp, 2Ch
.text:00406243                 movzx   edx, [esp+2Ch+arg_4]
.text:00406248                 mov     [esp+2Ch+var_C], ebx
.text:0040624C                 mov     ebx, [esp+2Ch+arg_8]
.text:00406250                 mov     [esp+2Ch+var_8], esi
.text:00406254                 mov     esi, [esp+2Ch+arg_0]
.text:00406258                 mov     [esp+2Ch+var_11], dl
.text:0040625C                 lea     edx, [esp+2Ch+var_10]
.text:00406260                 mov     [esp+2Ch+var_4], edi
.text:00406264                 mov     [esp+2Ch+var_24], edx ; int
.text:00406268                 mov     [esp+2Ch+ErrorMessage], ebx ; int
.text:0040626C                 mov     [esp+2Ch+VarName], esi ; char *
.text:0040626F                 call    sub_406430
.text:00406274                 mov     edx, [ebx+4]
.text:00406277                 mov     ecx, eax
.text:00406279                 mov     eax, [ebx]
.text:0040627B                 mov     edi, edx
.text:0040627D                 or      edi, eax
.text:0040627F                 jz      loc_406330
.text:00406285
.text:00406285 loc_406285:                             ; CODE XREF: sub_406240+118↓j
.text:00406285                 test    ecx, ecx
.text:00406287                 jz      short loc_4062E0
.text:00406289                 cmp     [esp+2Ch+var_11], 0
.text:0040628E                 jz      short loc_4062E0
.text:00406290                 cmp     ecx, 3
.text:00406293                 ja      short loc_406310
.text:00406295                 cmp     ecx, 2
.text:00406298                 jnb     short loc_4062F4
.text:0040629A                 dec     ecx
.text:0040629B                 jz      short loc_4062A2
.text:0040629D
.text:0040629D loc_40629D:                             ; CODE XREF: sub_406240+D3↓j
.text:0040629D                 call    abort
.text:004062A2 ; ---------------------------------------------------------------------------
.text:004062A2
.text:004062A2 loc_4062A2:                             ; CODE XREF: sub_406240+5B↑j
.text:004062A2                 mov     [esp+2Ch+VarName], offset aBlockSize ; "block size"
.text:004062A9                 call    ds:libintl_gettext
.text:004062AF                 mov     [esp+2Ch+var_1C], esi
.text:004062B3                 mov     [esp+2Ch+var_24], offset aSSTooLarge ; "%s `%s' too large"
.text:004062BB
.text:004062BB loc_4062BB:                             ; CODE XREF: sub_406240+CD↓j
.text:004062BB                                         ; sub_406240+EE↓j
.text:004062BB                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004062BF                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:004062C7                 mov     ecx, Code
.text:004062CD                 mov     [esp+2Ch+VarName], ecx ; Code
.text:004062D0                 call    sub_409A70
.text:004062D5                 lea     esi, [esi+0]
.text:004062D9                 lea     edi, [edi+0]
.text:004062E0
.text:004062E0 loc_4062E0:                             ; CODE XREF: sub_406240+47↑j
.text:004062E0                                         ; sub_406240+4E↑j
.text:004062E0                 mov     eax, [esp+2Ch+var_10]
.text:004062E4                 mov     ebx, [esp+2Ch+var_C]
.text:004062E8                 mov     esi, [esp+2Ch+var_8]
.text:004062EC                 mov     edi, [esp+2Ch+var_4]
.text:004062F0                 add     esp, 2Ch
.text:004062F3                 retn
.text:004062F4 ; ---------------------------------------------------------------------------
.text:004062F4
.text:004062F4 loc_4062F4:                             ; CODE XREF: sub_406240+58↑j
.text:004062F4                 mov     [esp+2Ch+VarName], offset aBlockSize ; "block size"
.text:004062FB                 call    ds:libintl_gettext
.text:00406301                 mov     [esp+2Ch+var_1C], esi
.text:00406305                 mov     [esp+2Ch+var_24], offset aInvalidCharact ; "invalid character following %s in `%s'"
.text:0040630D                 jmp     short loc_4062BB
.text:0040630D ; ---------------------------------------------------------------------------
.text:0040630F                 align 10h
.text:00406310
.text:00406310 loc_406310:                             ; CODE XREF: sub_406240+53↑j
.text:00406310                 cmp     ecx, 4
.text:00406313                 jnz     short loc_40629D
.text:00406315                 mov     [esp+2Ch+VarName], offset aBlockSize ; "block size"
.text:0040631C                 call    ds:libintl_gettext
.text:00406322                 mov     [esp+2Ch+var_1C], esi
.text:00406326                 mov     [esp+2Ch+var_24], offset aInvalidSS ; "invalid %s `%s'"
.text:0040632E                 jmp     short loc_4062BB
.text:00406330 ; ---------------------------------------------------------------------------
.text:00406330
.text:00406330 loc_406330:                             ; CODE XREF: sub_406240+3F↑j
.text:00406330                 mov     [esp+2Ch+VarName], offset aPosixlyCorrect_0 ; "POSIXLY_CORRECT"
.text:00406337                 call    getenv
.text:0040633C                 xor     ecx, ecx
.text:0040633E                 mov     edx, 200h
.text:00406343                 test    eax, eax
.text:00406345                 jnz     short loc_40634E
.text:00406347                 mov     edx, 400h
.text:0040634C                 xor     ecx, ecx
.text:0040634E
.text:0040634E loc_40634E:                             ; CODE XREF: sub_406240+105↑j
.text:0040634E                 mov     [ebx+4], ecx
.text:00406351                 mov     ecx, 4
.text:00406356                 mov     [ebx], edx
.text:00406358                 jmp     loc_406285
.text:00406358 sub_406240      endp
.text:00406358
.text:00406358 ; ---------------------------------------------------------------------------
.text:0040635D                 align 10h
.text:00406360
.text:00406360 ; =============== S U B R O U T I N E =======================================
.text:00406360
.text:00406360
.text:00406360 ; int __cdecl sub_406360(void *, size_t, int, char *)
.text:00406360 sub_406360      proc near               ; CODE XREF: sub_405610+492↑p
.text:00406360
.text:00406360 Str             = dword ptr -6Ch
.text:00406360 Src             = dword ptr -68h
.text:00406360 Size            = dword ptr -64h
.text:00406360 var_50          = dword ptr -50h
.text:00406360 var_4C          = byte ptr -4Ch
.text:00406360 arg_0           = dword ptr  4
.text:00406360 arg_4           = dword ptr  8
.text:00406360 arg_8           = dword ptr  0Ch
.text:00406360 arg_C           = dword ptr  10h
.text:00406360
.text:00406360                 push    ebp
.text:00406361                 push    edi
.text:00406362                 mov     edi, 0FFFFFFFFh
.text:00406367                 push    esi
.text:00406368                 push    ebx
.text:00406369                 sub     esp, 5Ch
.text:0040636C                 mov     edx, [esp+6Ch+arg_C]
.text:00406370                 mov     ebx, [esp+6Ch+arg_0]
.text:00406374                 mov     ebp, [esp+6Ch+arg_8]
.text:00406378                 mov     [esp+6Ch+Str], edx ; Str
.text:0040637B                 call    strlen
.text:00406380                 mov     [esp+6Ch+var_50], eax
.text:00406384                 mov     esi, [esp+6Ch+arg_4]
.text:00406388                 lea     edx, [esp+6Ch+var_4C]
.text:0040638C                 mov     [esp+6Ch+Src], ebx ; Src
.text:00406390                 mov     [esp+6Ch+Str], edx ; void *
.text:00406393                 add     ebx, esi
.text:00406395                 mov     [esp+6Ch+Size], esi ; Size
.text:00406399                 lea     esi, [esi+0]
.text:004063A0
.text:004063A0 loc_4063A0:                             ; CODE XREF: sub_406360+94↓j
.text:004063A0                 call    memcpy
.text:004063A5                 movzx   eax, byte ptr [ebp+0]
.text:004063A9                 test    al, al
.text:004063AB                 jz      short loc_4063B7
.text:004063AD                 cmp     al, 7Eh ; '~'
.text:004063AF                 mov     edi, esi
.text:004063B1                 ja      short loc_4063B6
.text:004063B3                 movzx   edi, al
.text:004063B6
.text:004063B6 loc_4063B6:                             ; CODE XREF: sub_406360+51↑j
.text:004063B6                 inc     ebp
.text:004063B7
.text:004063B7 loc_4063B7:                             ; CODE XREF: sub_406360+4B↑j
.text:004063B7                 cmp     esi, edi
.text:004063B9                 jnb     short loc_4063BD
.text:004063BB                 mov     edi, esi
.text:004063BD
.text:004063BD loc_4063BD:                             ; CODE XREF: sub_406360+59↑j
.text:004063BD                 mov     [esp+6Ch+Size], edi ; Size
.text:004063C1                 sub     esi, edi
.text:004063C3                 lea     ecx, [esp+6Ch+var_4C]
.text:004063C7                 add     ecx, esi
.text:004063C9                 sub     ebx, edi
.text:004063CB                 mov     [esp+6Ch+Src], ecx ; Src
.text:004063CF                 mov     [esp+6Ch+Str], ebx ; void *
.text:004063D2                 call    memcpy
.text:004063D7                 test    esi, esi
.text:004063D9                 jz      short loc_4063F6
.text:004063DB                 mov     edx, [esp+6Ch+var_50]
.text:004063DF                 mov     ecx, [esp+6Ch+var_50]
.text:004063E3                 sub     ebx, edx
.text:004063E5                 mov     [esp+6Ch+Size], ecx
.text:004063E9                 mov     edx, [esp+6Ch+arg_C]
.text:004063ED                 mov     [esp+6Ch+Str], ebx
.text:004063F0                 mov     [esp+6Ch+Src], edx
.text:004063F4                 jmp     short loc_4063A0
.text:004063F6 ; ---------------------------------------------------------------------------
.text:004063F6
.text:004063F6 loc_4063F6:                             ; CODE XREF: sub_406360+79↑j
.text:004063F6                 add     esp, 5Ch
.text:004063F9                 mov     eax, ebx
.text:004063FB                 pop     ebx
.text:004063FC                 pop     esi
.text:004063FD                 pop     edi
.text:004063FE                 pop     ebp
.text:004063FF                 retn
.text:004063FF sub_406360      endp
.text:004063FF
.text:004063FF ; ---------------------------------------------------------------------------
.text:00406400 ; const char aEeggkkmmppttyy[]
.text:00406400 aEeggkkmmppttyy db 'eEgGkKmMpPtTyYzZ0',0
.text:00406400                                         ; DATA XREF: sub_406430:loc_4064B0↓o
.text:00406412 ; const char aBlockSize_0[]
.text:00406412 aBlockSize_0    db 'BLOCK_SIZE',0       ; DATA XREF: sub_406430:loc_40651E↓o
.text:0040641D ; const char aBlocksize[]
.text:0040641D aBlocksize      db 'BLOCKSIZE',0        ; DATA XREF: sub_406430+104↓o
.text:00406427                 align 10h
.text:00406430
.text:00406430 ; =============== S U B R O U T I N E =======================================
.text:00406430
.text:00406430
.text:00406430 ; int __cdecl sub_406430(char *, int, int)
.text:00406430 sub_406430      proc near               ; CODE XREF: sub_406240+2F↑p
.text:00406430
.text:00406430 VarName         = dword ptr -2Ch
.text:00406430 var_28          = dword ptr -28h
.text:00406430 var_24          = dword ptr -24h
.text:00406430 var_20          = dword ptr -20h
.text:00406430 Str             = dword ptr -1Ch
.text:00406430 var_10          = dword ptr -10h
.text:00406430 var_C           = dword ptr -0Ch
.text:00406430 var_8           = dword ptr -8
.text:00406430 var_4           = dword ptr -4
.text:00406430 arg_0           = dword ptr  4
.text:00406430 arg_4           = dword ptr  8
.text:00406430 arg_8           = dword ptr  0Ch
.text:00406430
.text:00406430                 sub     esp, 2Ch
.text:00406433                 mov     [esp+2Ch+var_C], ebx
.text:00406437                 mov     ebx, [esp+2Ch+arg_0]
.text:0040643B                 mov     [esp+2Ch+var_8], esi
.text:0040643F                 xor     esi, esi
.text:00406441                 test    ebx, ebx
.text:00406443                 mov     [esp+2Ch+var_4], edi
.text:00406447                 mov     edi, [esp+2Ch+arg_4]
.text:0040644B                 jz      loc_40651E
.text:00406451
.text:00406451 loc_406451:                             ; CODE XREF: sub_406430+FE↓j
.text:00406451                                         ; sub_406430+114↓j
.text:00406451                 cmp     byte ptr [ebx], 27h ; '''
.text:00406454                 jz      loc_406513
.text:0040645A
.text:0040645A loc_40645A:                             ; CODE XREF: sub_406430+E9↓j
.text:0040645A                 mov     [esp+2Ch+var_20], 4 ; int
.text:00406462                 mov     [esp+2Ch+var_24], offset dword_4061B4 ; int
.text:0040646A                 mov     [esp+2Ch+var_28], offset off_4061A8 ; int
.text:00406472                 mov     [esp+2Ch+VarName], ebx ; char *
.text:00406475                 call    sub_407700
.text:0040647A                 test    eax, eax
.text:0040647C                 js      short loc_4064B0
.text:0040647E                 mov     dword ptr [edi], 1
.text:00406484                 mov     ecx, ds:dword_4061B4[eax*4]
.text:0040648B                 mov     dword ptr [edi+4], 0
.text:00406492                 or      esi, ecx
.text:00406494
.text:00406494 loc_406494:                             ; CODE XREF: sub_406430+B9↓j
.text:00406494                                         ; sub_406430+D3↓j ...
.text:00406494                 mov     ebx, [esp+2Ch+arg_8]
.text:00406498                 xor     eax, eax
.text:0040649A                 mov     [ebx], esi
.text:0040649C
.text:0040649C loc_40649C:                             ; CODE XREF: sub_406430+A6↓j
.text:0040649C                 mov     ebx, [esp+2Ch+var_C]
.text:004064A0                 mov     esi, [esp+2Ch+var_8]
.text:004064A4                 mov     edi, [esp+2Ch+var_4]
.text:004064A8                 add     esp, 2Ch
.text:004064AB                 retn
.text:004064AB ; ---------------------------------------------------------------------------
.text:004064AC                 align 10h
.text:004064B0
.text:004064B0 loc_4064B0:                             ; CODE XREF: sub_406430+4C↑j
.text:004064B0                 mov     [esp+2Ch+Str], offset aEeggkkmmppttyy ; "eEgGkKmMpPtTyYzZ0"
.text:004064B8                 lea     edx, [esp+2Ch+var_10]
.text:004064BC                 mov     [esp+2Ch+var_20], edi ; int
.text:004064C0                 mov     [esp+2Ch+var_24], 0 ; int
.text:004064C8                 mov     [esp+2Ch+var_28], edx ; int
.text:004064CC                 mov     [esp+2Ch+VarName], ebx ; int
.text:004064CF                 call    sub_406A70
.text:004064D4                 test    eax, eax
.text:004064D6                 jnz     short loc_40649C
.text:004064D8                 nop
.text:004064D9                 lea     esi, [esi+0]
.text:004064E0
.text:004064E0 loc_4064E0:                             ; CODE XREF: sub_406430+C2↓j
.text:004064E0                 movzx   ecx, byte ptr [ebx]
.text:004064E3                 sub     cl, 30h ; '0'
.text:004064E6                 cmp     cl, 9
.text:004064E9                 jbe     short loc_406494
.text:004064EB                 cmp     ebx, [esp+2Ch+var_10]
.text:004064EF                 jz      short loc_4064F4
.text:004064F1                 inc     ebx
.text:004064F2                 jmp     short loc_4064E0
.text:004064F4 ; ---------------------------------------------------------------------------
.text:004064F4
.text:004064F4 loc_4064F4:                             ; CODE XREF: sub_406430+BF↑j
.text:004064F4                 or      esi, 80h
.text:004064FA                 cmp     byte ptr [ebx-1], 42h ; 'B'
.text:004064FE                 jz      short loc_406505
.text:00406500
.text:00406500 loc_406500:                             ; CODE XREF: sub_406430+E1↓j
.text:00406500                 or      esi, 20h
.text:00406503                 jmp     short loc_406494
.text:00406505 ; ---------------------------------------------------------------------------
.text:00406505
.text:00406505 loc_406505:                             ; CODE XREF: sub_406430+CE↑j
.text:00406505                 or      esi, 100h
.text:0040650B                 cmp     byte ptr [ebx-2], 69h ; 'i'
.text:0040650F                 jnz     short loc_406494
.text:00406511                 jmp     short loc_406500
.text:00406513 ; ---------------------------------------------------------------------------
.text:00406513
.text:00406513 loc_406513:                             ; CODE XREF: sub_406430+24↑j
.text:00406513                 mov     esi, 4
.text:00406518                 inc     ebx
.text:00406519                 jmp     loc_40645A
.text:0040651E ; ---------------------------------------------------------------------------
.text:0040651E
.text:0040651E loc_40651E:                             ; CODE XREF: sub_406430+1B↑j
.text:0040651E                 mov     [esp+2Ch+VarName], offset aBlockSize_0 ; "BLOCK_SIZE"
.text:00406525                 call    getenv
.text:0040652A                 test    eax, eax
.text:0040652C                 mov     ebx, eax
.text:0040652E                 jnz     loc_406451
.text:00406534                 mov     [esp+2Ch+VarName], offset aBlocksize ; "BLOCKSIZE"
.text:0040653B                 call    getenv
.text:00406540                 test    eax, eax
.text:00406542                 mov     ebx, eax
.text:00406544                 jnz     loc_406451
.text:0040654A                 mov     [esp+2Ch+VarName], offset aPosixlyCorrect_0 ; "POSIXLY_CORRECT"
.text:00406551                 call    getenv
.text:00406556                 xor     ecx, ecx
.text:00406558                 mov     edx, 200h
.text:0040655D                 test    eax, eax
.text:0040655F                 jnz     short loc_406568
.text:00406561                 mov     edx, 400h
.text:00406566                 xor     ecx, ecx
.text:00406568
.text:00406568 loc_406568:                             ; CODE XREF: sub_406430+12F↑j
.text:00406568                 mov     [edi], edx
.text:0040656A                 mov     [edi+4], ecx
.text:0040656D                 jmp     loc_406494
.text:0040656D sub_406430      endp
.text:0040656D
.text:0040656D ; ---------------------------------------------------------------------------
.text:00406572                 db 1Eh dup(90h)
.text:00406590 ; ---------------------------------------------------------------------------
.text:00406590                 mov     edx, [esp+4]
.text:00406594                 mov     ds:dword_414100, edx
.text:0040659A                 retn
.text:0040659A ; ---------------------------------------------------------------------------
.text:0040659B aWriteError     db 'write error',0      ; DATA XREF: sub_4065C0:loc_406609↓o
.text:004065A7 ; const char aSS_2[]
.text:004065A7 aSS_2           db '%s: %s',0           ; DATA XREF: sub_4065C0+77↓o
.text:004065AE ; const char aS_5[]
.text:004065AE aS_5            db '%s',0               ; DATA XREF: sub_4065C0+A0↓o
.text:004065B1 ; ---------------------------------------------------------------------------
.text:004065B1                 jmp     short sub_4065C0
.text:004065B1 ; ---------------------------------------------------------------------------
.text:004065B3                 align 10h
.text:004065C0
.text:004065C0 ; =============== S U B R O U T I N E =======================================
.text:004065C0
.text:004065C0
.text:004065C0 ; void __cdecl sub_4065C0()
.text:004065C0 sub_4065C0      proc near               ; CODE XREF: .text:004065B1↑j
.text:004065C0                                         ; DATA XREF: sub_401B70+63↑o
.text:004065C0
.text:004065C0 Stream          = dword ptr -2Ch
.text:004065C0 ErrorMessage    = dword ptr -28h
.text:004065C0 var_24          = dword ptr -24h
.text:004065C0 var_20          = byte ptr -20h
.text:004065C0 var_1C          = dword ptr -1Ch
.text:004065C0 var_9           = byte ptr -9
.text:004065C0
.text:004065C0                 push    esi
.text:004065C1                 push    ebx
.text:004065C2                 sub     esp, 24h
.text:004065C5                 mov     edx, ds:_iob
.text:004065CB                 mov     ecx, [edx+2Ch]
.text:004065CE                 lea     esi, [edx+20h]
.text:004065D1                 shr     ecx, 5
.text:004065D4                 mov     bl, cl
.text:004065D6                 mov     ecx, [edx+20h]
.text:004065D9                 and     bl, 1
.text:004065DC                 cmp     ecx, [esi+8]
.text:004065DF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004065E2                 setz    [esp+2Ch+var_9]
.text:004065E7                 call    fclose
.text:004065EC                 test    eax, eax
.text:004065EE                 setnz   al
.text:004065F1                 test    bl, bl
.text:004065F3                 jnz     loc_406683
.text:004065F9                 test    al, al
.text:004065FB                 jz      short loc_406650
.text:004065FD
.text:004065FD loc_4065FD:                             ; CODE XREF: sub_4065C0+CD↓j
.text:004065FD                 call    _errno
.text:00406602                 mov     esi, [eax]
.text:00406604
.text:00406604 loc_406604:                             ; CODE XREF: sub_4065C0+C7↓j
.text:00406604                 cmp     esi, 9
.text:00406607                 jz      short loc_406676
.text:00406609
.text:00406609 loc_406609:                             ; CODE XREF: sub_4065C0+B8↓j
.text:00406609                                         ; sub_4065C0+C1↓j
.text:00406609                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00406610                 call    ds:libintl_gettext
.text:00406616                 mov     ebx, eax
.text:00406618                 mov     eax, ds:dword_414100
.text:0040661D                 test    eax, eax
.text:0040661F                 jz      short loc_406656
.text:00406621                 mov     [esp+2Ch+Stream], eax ; char *
.text:00406624                 call    sub_408DE0
.text:00406629                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040662D                 mov     edx, Code
.text:00406633                 mov     [esp+2Ch+var_1C], ebx
.text:00406637                 mov     [esp+2Ch+var_24], offset aSS_2 ; "%s: %s"
.text:0040663F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00406643                 mov     [esp+2Ch+Stream], edx ; Code
.text:00406646                 call    sub_409A70
.text:0040664B                 nop
.text:0040664C                 lea     esi, [esi+0]
.text:00406650
.text:00406650 loc_406650:                             ; CODE XREF: sub_4065C0+3B↑j
.text:00406650                                         ; sub_4065C0+B4↓j ...
.text:00406650                 add     esp, 24h
.text:00406653                 pop     ebx
.text:00406654                 pop     esi
.text:00406655                 retn
.text:00406656 ; ---------------------------------------------------------------------------
.text:00406656
.text:00406656 loc_406656:                             ; CODE XREF: sub_4065C0+5F↑j
.text:00406656                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040665A                 mov     ebx, Code
.text:00406660                 mov     [esp+2Ch+var_24], offset aS_5 ; "%s"
.text:00406668                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040666C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040666F                 call    sub_409A70
.text:00406674                 jmp     short loc_406650
.text:00406676 ; ---------------------------------------------------------------------------
.text:00406676
.text:00406676 loc_406676:                             ; CODE XREF: sub_4065C0+47↑j
.text:00406676                 test    bl, bl
.text:00406678                 jnz     short loc_406609
.text:0040667A                 cmp     [esp+2Ch+var_9], 0
.text:0040667F                 jnz     short loc_406650
.text:00406681                 jmp     short loc_406609
.text:00406683 ; ---------------------------------------------------------------------------
.text:00406683
.text:00406683 loc_406683:                             ; CODE XREF: sub_4065C0+33↑j
.text:00406683                 xor     esi, esi
.text:00406685                 test    al, al
.text:00406687                 jz      loc_406604
.text:0040668D                 jmp     loc_4065FD
.text:0040668D sub_4065C0      endp
.text:0040668D
.text:0040668D ; ---------------------------------------------------------------------------
.text:00406692                 align 10h
.text:004066A0
.text:004066A0 ; =============== S U B R O U T I N E =======================================
.text:004066A0
.text:004066A0
.text:004066A0 sub_4066A0      proc near               ; CODE XREF: sub_4036B0+23↑p
.text:004066A0                                         ; sub_4098A0+45↓p
.text:004066A0
.text:004066A0 var_4           = dword ptr -4
.text:004066A0 arg_0           = dword ptr  4
.text:004066A0
.text:004066A0                 sub     esp, 0Ch
.text:004066A3                 mov     [esp+0Ch+var_4], ebx
.text:004066A7                 mov     ebx, [esp+0Ch+arg_0]
.text:004066AB                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:004066B1                 mov     dword ptr [ebx+4], 0
.text:004066B8                 call    sub_406750
.text:004066BD                 mov     [ebx+4], eax
.text:004066C0                 test    eax, eax
.text:004066C2                 mov     ebx, [esp+0Ch+var_4]
.text:004066C6                 setnz   dl
.text:004066C9                 add     esp, 0Ch
.text:004066CC                 movzx   eax, dl
.text:004066CF                 dec     eax
.text:004066D0                 retn
.text:004066D0 sub_4066A0      endp
.text:004066D0
.text:004066D1 ; ---------------------------------------------------------------------------
.text:004066D1                 jmp     short sub_4066E0
.text:004066D1 ; ---------------------------------------------------------------------------
.text:004066D3                 align 10h
.text:004066E0
.text:004066E0 ; =============== S U B R O U T I N E =======================================
.text:004066E0
.text:004066E0
.text:004066E0 sub_4066E0      proc near               ; CODE XREF: sub_4036B0+183↑p
.text:004066E0                                         ; .text:004066D1↑j ...
.text:004066E0
.text:004066E0 arg_0           = dword ptr  4
.text:004066E0
.text:004066E0                 sub     esp, 0Ch
.text:004066E3                 mov     eax, [esp+0Ch+arg_0]
.text:004066E7                 mov     ecx, [eax]
.text:004066E9                 test    ecx, ecx
.text:004066EB                 jns     short loc_4066FC
.text:004066ED                 mov     edx, [eax+4]
.text:004066F0                 mov     [esp+0Ch+arg_0], edx ; LPCSTR
.text:004066F4                 add     esp, 0Ch
.text:004066F7                 jmp     sub_4090E0
.text:004066FC ; ---------------------------------------------------------------------------
.text:004066FC
.text:004066FC loc_4066FC:                             ; CODE XREF: sub_4066E0+B↑j
.text:004066FC                 call    abort
.text:004066FC sub_4066E0      endp
.text:004066FC
.text:00406701 ; ---------------------------------------------------------------------------
.text:00406701                 jmp     short sub_406710
.text:00406701 ; ---------------------------------------------------------------------------
.text:00406703                 align 10h
.text:00406710
.text:00406710 ; =============== S U B R O U T I N E =======================================
.text:00406710
.text:00406710
.text:00406710 ; int __cdecl sub_406710(void *Block)
.text:00406710 sub_406710      proc near               ; CODE XREF: sub_4036B0+195↑p
.text:00406710                                         ; .text:00406701↑j ...
.text:00406710
.text:00406710 FileHandle      = dword ptr -0Ch
.text:00406710 var_4           = dword ptr -4
.text:00406710 Block           = dword ptr  4
.text:00406710
.text:00406710                 sub     esp, 0Ch
.text:00406713                 mov     [esp+0Ch+var_4], ebx
.text:00406717                 mov     ebx, [esp+0Ch+Block]
.text:0040671B                 mov     eax, [ebx]
.text:0040671D                 test    eax, eax
.text:0040671F                 js      short loc_406729
.text:00406721                 mov     [esp+0Ch+FileHandle], eax ; FileHandle
.text:00406724                 call    _close
.text:00406729
.text:00406729 loc_406729:                             ; CODE XREF: sub_406710+F↑j
.text:00406729                 mov     eax, [ebx+4]
.text:0040672C                 test    eax, eax
.text:0040672E                 jnz     short loc_406738
.text:00406730                 mov     ebx, [esp+0Ch+var_4]
.text:00406734                 add     esp, 0Ch
.text:00406737                 retn
.text:00406738 ; ---------------------------------------------------------------------------
.text:00406738
.text:00406738 loc_406738:                             ; CODE XREF: sub_406710+1E↑j
.text:00406738                 mov     [esp+0Ch+Block], eax ; Block
.text:0040673C                 mov     ebx, [esp+0Ch+var_4]
.text:00406740                 add     esp, 0Ch
.text:00406743                 jmp     free
.text:00406743 sub_406710      endp
.text:00406743
.text:00406743 ; ---------------------------------------------------------------------------
.text:00406748                 align 10h
.text:00406750
.text:00406750 ; =============== S U B R O U T I N E =======================================
.text:00406750
.text:00406750
.text:00406750 sub_406750      proc near               ; CODE XREF: sub_4036B0:loc_40388B↑p
.text:00406750                                         ; sub_4066A0+18↑p
.text:00406750
.text:00406750 DstBuf          = dword ptr -0Ch
.text:00406750 SizeInBytes     = dword ptr -8
.text:00406750 var_4           = dword ptr -4
.text:00406750
.text:00406750                 sub     esp, 0Ch
.text:00406753                 mov     [esp+0Ch+var_4], ebx
.text:00406757                 mov     [esp+0Ch+SizeInBytes], 0 ; SizeInBytes
.text:0040675F                 mov     [esp+0Ch+DstBuf], 0 ; DstBuf
.text:00406766                 call    j__getcwd
.text:0040676B                 test    eax, eax
.text:0040676D                 mov     ebx, eax
.text:0040676F                 jz      short loc_40677B
.text:00406771
.text:00406771 loc_406771:                             ; CODE XREF: sub_406750+33↓j
.text:00406771                 mov     eax, ebx
.text:00406773                 mov     ebx, [esp+0Ch+var_4]
.text:00406777                 add     esp, 0Ch
.text:0040677A                 retn
.text:0040677B ; ---------------------------------------------------------------------------
.text:0040677B
.text:0040677B loc_40677B:                             ; CODE XREF: sub_406750+1F↑j
.text:0040677B                 call    _errno
.text:00406780                 cmp     dword ptr [eax], 0Ch
.text:00406783                 jnz     short loc_406771
.text:00406785                 call    sub_4069C0
.text:00406785 sub_406750      endp
.text:00406785
.text:00406785 ; ---------------------------------------------------------------------------
.text:0040678A                 align 10h
.text:00406790                 push    esi
.text:00406791                 push    ebx
.text:00406792                 sub     esp, 4
.text:00406795                 mov     ebx, [esp+10h]
.text:00406799                 cmp     byte ptr [ebx], 0
.text:0040679C                 jz      short loc_4067A4
.text:0040679E                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:004067A2                 jz      short loc_4067F6
.text:004067A4
.text:004067A4 loc_4067A4:                             ; CODE XREF: .text:0040679C↑j
.text:004067A4                 xor     esi, esi
.text:004067A6
.text:004067A6 loc_4067A6:                             ; CODE XREF: .text:004067FB↓j
.text:004067A6                 mov     [esp], ebx
.text:004067A9                 call    sub_409770
.text:004067AE                 sub     eax, ebx
.text:004067B0                 cmp     esi, eax
.text:004067B2                 jnb     short loc_4067D6
.text:004067B4                 lea     esi, [esi+0]
.text:004067BA                 lea     edi, [edi+0]
.text:004067C0
.text:004067C0 loc_4067C0:                             ; CODE XREF: .text:004067D4↓j
.text:004067C0                 movzx   edx, byte ptr [eax+ebx-1]
.text:004067C5                 cmp     dl, 2Fh ; '/'
.text:004067C8                 jz      short loc_4067D1
.text:004067CA                 cmp     dl, 5Ch ; '\'
.text:004067CD                 mov     ecx, eax
.text:004067CF                 jnz     short loc_4067E9
.text:004067D1
.text:004067D1 loc_4067D1:                             ; CODE XREF: .text:004067C8↑j
.text:004067D1                 dec     eax
.text:004067D2                 cmp     esi, eax
.text:004067D4                 jb      short loc_4067C0
.text:004067D6
.text:004067D6 loc_4067D6:                             ; CODE XREF: .text:004067B2↑j
.text:004067D6                 movzx   edx, byte ptr [esi+ebx]
.text:004067DA                 xor     eax, eax
.text:004067DC                 cmp     dl, 2Fh ; '/'
.text:004067DF                 jz      short loc_4067EF
.text:004067E1                 cmp     dl, 5Ch ; '\'
.text:004067E4                 jz      short loc_4067EF
.text:004067E6
.text:004067E6 loc_4067E6:                             ; CODE XREF: .text:004067F4↓j
.text:004067E6                 lea     ecx, [eax+esi]
.text:004067E9
.text:004067E9 loc_4067E9:                             ; CODE XREF: .text:004067CF↑j
.text:004067E9                 pop     edx
.text:004067EA                 mov     eax, ecx
.text:004067EC                 pop     ebx
.text:004067ED                 pop     esi
.text:004067EE                 retn
.text:004067EF ; ---------------------------------------------------------------------------
.text:004067EF
.text:004067EF loc_4067EF:                             ; CODE XREF: .text:004067DF↑j
.text:004067EF                                         ; .text:004067E4↑j
.text:004067EF                 mov     eax, 1
.text:004067F4                 jmp     short loc_4067E6
.text:004067F6 ; ---------------------------------------------------------------------------
.text:004067F6
.text:004067F6 loc_4067F6:                             ; CODE XREF: .text:004067A2↑j
.text:004067F6                 mov     esi, 2
.text:004067FB                 jmp     short loc_4067A6
.text:004067FB ; ---------------------------------------------------------------------------
.text:004067FD                 align 10h
.text:00406800
.text:00406800 ; =============== S U B R O U T I N E =======================================
.text:00406800
.text:00406800
.text:00406800 ; int __cdecl sub_406800(void *)
.text:00406800 sub_406800      proc near               ; CODE XREF: sub_4036B0+47↑p
.text:00406800
.text:00406800 var_2C          = dword ptr -2Ch
.text:00406800 Src             = dword ptr -28h
.text:00406800 Size            = dword ptr -24h
.text:00406800 var_11          = byte ptr -11h
.text:00406800 arg_0           = dword ptr  4
.text:00406800
.text:00406800                 push    ebp
.text:00406801                 push    edi
.text:00406802                 push    esi
.text:00406803                 push    ebx
.text:00406804                 sub     esp, 1Ch
.text:00406807                 mov     edi, [esp+2Ch+arg_0]
.text:0040680B                 cmp     byte ptr [edi], 0
.text:0040680E                 jz      short loc_40681A
.text:00406810                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00406814                 jz      loc_4068B7
.text:0040681A
.text:0040681A loc_40681A:                             ; CODE XREF: sub_406800+E↑j
.text:0040681A                 xor     esi, esi
.text:0040681C
.text:0040681C loc_40681C:                             ; CODE XREF: sub_406800+BC↓j
.text:0040681C                 mov     [esp+2Ch+var_2C], edi
.text:0040681F                 call    sub_409770
.text:00406824                 sub     eax, edi
.text:00406826                 cmp     esi, eax
.text:00406828                 jnb     short loc_406846
.text:0040682A                 lea     esi, [esi+0]
.text:00406830
.text:00406830 loc_406830:                             ; CODE XREF: sub_406800+44↓j
.text:00406830                 movzx   edx, byte ptr [eax+edi-1]
.text:00406835                 cmp     dl, 2Fh ; '/'
.text:00406838                 jz      short loc_406841
.text:0040683A                 cmp     dl, 5Ch ; '\'
.text:0040683D                 mov     ebx, eax
.text:0040683F                 jnz     short loc_406857
.text:00406841
.text:00406841 loc_406841:                             ; CODE XREF: sub_406800+38↑j
.text:00406841                 dec     eax
.text:00406842                 cmp     esi, eax
.text:00406844                 jb      short loc_406830
.text:00406846
.text:00406846 loc_406846:                             ; CODE XREF: sub_406800+28↑j
.text:00406846                 movzx   eax, byte ptr [esi+edi]
.text:0040684A                 xor     edx, edx
.text:0040684C                 cmp     al, 2Fh ; '/'
.text:0040684E                 jz      short loc_4068B0
.text:00406850                 cmp     al, 5Ch ; '\'
.text:00406852                 jz      short loc_4068B0
.text:00406854
.text:00406854 loc_406854:                             ; CODE XREF: sub_406800+B5↓j
.text:00406854                 lea     ebx, [edx+esi]
.text:00406857
.text:00406857 loc_406857:                             ; CODE XREF: sub_406800+3F↑j
.text:00406857                 cmp     byte ptr [edi], 0
.text:0040685A                 mov     ebp, ebx
.text:0040685C                 jz      short loc_406864
.text:0040685E                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00406862                 jz      short loc_4068AB
.text:00406864
.text:00406864 loc_406864:                             ; CODE XREF: sub_406800+5C↑j
.text:00406864                 test    ebx, ebx
.text:00406866
.text:00406866 loc_406866:                             ; CODE XREF: sub_406800+AE↓j
.text:00406866                 setz    [esp+2Ch+var_11]
.text:0040686B                 movzx   ecx, [esp+2Ch+var_11]
.text:00406870                 lea     edx, [ecx+ebx+1]
.text:00406874                 mov     [esp+2Ch+var_2C], edx ; size_t
.text:00406877                 call    sub_404D00
.text:0040687C                 mov     [esp+2Ch+var_2C], eax ; void *
.text:0040687F                 mov     esi, eax
.text:00406881                 mov     [esp+2Ch+Size], ebx ; Size
.text:00406885                 mov     [esp+2Ch+Src], edi ; Src
.text:00406889                 call    memcpy
.text:0040688E                 cmp     [esp+2Ch+var_11], 0
.text:00406893                 jz      short loc_40689C
.text:00406895                 mov     byte ptr [ebx+esi], 2Eh ; '.'
.text:00406899                 lea     ebp, [ebx+1]
.text:0040689C
.text:0040689C loc_40689C:                             ; CODE XREF: sub_406800+93↑j
.text:0040689C                 mov     byte ptr [ebp+esi+0], 0
.text:004068A1                 mov     eax, esi
.text:004068A3                 add     esp, 1Ch
.text:004068A6                 pop     ebx
.text:004068A7                 pop     esi
.text:004068A8                 pop     edi
.text:004068A9                 pop     ebp
.text:004068AA                 retn
.text:004068AB ; ---------------------------------------------------------------------------
.text:004068AB
.text:004068AB loc_4068AB:                             ; CODE XREF: sub_406800+62↑j
.text:004068AB                 cmp     ebx, 2
.text:004068AE                 jmp     short loc_406866
.text:004068B0 ; ---------------------------------------------------------------------------
.text:004068B0
.text:004068B0 loc_4068B0:                             ; CODE XREF: sub_406800+4E↑j
.text:004068B0                                         ; sub_406800+52↑j
.text:004068B0                 mov     edx, 1
.text:004068B5                 jmp     short loc_406854
.text:004068B7 ; ---------------------------------------------------------------------------
.text:004068B7
.text:004068B7 loc_4068B7:                             ; CODE XREF: sub_406800+14↑j
.text:004068B7                 mov     esi, 2
.text:004068BC                 jmp     loc_40681C
.text:004068BC sub_406800      endp
.text:004068BC
.text:004068BC ; ---------------------------------------------------------------------------
.text:004068C1                 align 10h
.text:004068D0
.text:004068D0 ; =============== S U B R O U T I N E =======================================
.text:004068D0
.text:004068D0
.text:004068D0 ; int __cdecl sub_4068D0(int, char *)
.text:004068D0 sub_4068D0      proc near               ; CODE XREF: .text:00407850↓p
.text:004068D0                                         ; .text:00407A9A↓p
.text:004068D0
.text:004068D0 var_C           = dword ptr -0Ch
.text:004068D0 var_8           = dword ptr -8
.text:004068D0 var_4           = dword ptr -4
.text:004068D0 arg_0           = dword ptr  4
.text:004068D0 arg_4           = dword ptr  8
.text:004068D0
.text:004068D0                 sub     esp, 0Ch
.text:004068D3                 mov     edx, [esp+0Ch+arg_4]
.text:004068D7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004068DF                 mov     [esp+0Ch+var_4], edx ; char *
.text:004068E3                 mov     edx, [esp+0Ch+arg_0]
.text:004068E7                 mov     [esp+0Ch+var_C], edx ; int
.text:004068EA                 call    sub_408A70
.text:004068EF                 add     esp, 0Ch
.text:004068F2                 retn
.text:004068F2 sub_4068D0      endp
.text:004068F2
.text:004068F2 ; ---------------------------------------------------------------------------
.text:004068F3                 align 10h
.text:00406900
.text:00406900 ; =============== S U B R O U T I N E =======================================
.text:00406900
.text:00406900
.text:00406900 ; int __cdecl sub_406900(char *)
.text:00406900 sub_406900      proc near               ; CODE XREF: sub_401B70+7B6↑p
.text:00406900                                         ; sub_401B70+7FC↑p ...
.text:00406900
.text:00406900 var_C           = dword ptr -0Ch
.text:00406900 var_8           = dword ptr -8
.text:00406900 var_4           = dword ptr -4
.text:00406900 arg_0           = dword ptr  4
.text:00406900
.text:00406900                 sub     esp, 0Ch
.text:00406903                 mov     edx, [esp+0Ch+arg_0]
.text:00406907                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040690F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00406916                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040691A                 call    sub_408A70
.text:0040691F                 add     esp, 0Ch
.text:00406922                 retn
.text:00406922 sub_406900      endp
.text:00406922
.text:00406922 ; ---------------------------------------------------------------------------
.text:00406923                 align 10h
.text:00406930
.text:00406930 ; =============== S U B R O U T I N E =======================================
.text:00406930
.text:00406930
.text:00406930 sub_406930      proc near               ; CODE XREF: sub_402660+1E8↑p
.text:00406930
.text:00406930 var_1C          = dword ptr -1Ch
.text:00406930 var_18          = dword ptr -18h
.text:00406930 var_14          = dword ptr -14h
.text:00406930 var_10          = dword ptr -10h
.text:00406930 arg_0           = dword ptr  4
.text:00406930 arg_4           = dword ptr  8
.text:00406930 arg_8           = dword ptr  0Ch
.text:00406930
.text:00406930                 push    edi
.text:00406931                 push    esi
.text:00406932                 push    ebx
.text:00406933                 sub     esp, 10h
.text:00406936                 mov     edx, [esp+1Ch+arg_8]
.text:0040693A                 mov     ebx, [esp+1Ch+arg_0]
.text:0040693E                 mov     esi, [esp+1Ch+arg_4]
.text:00406942                 lea     edi, [edx+15h]
.text:00406945                 mov     byte ptr [edx+15h], 0
.text:00406949                 lea     esi, [esi+0]
.text:00406950
.text:00406950 loc_406950:                             ; CODE XREF: sub_406930+63↓j
.text:00406950                 mov     [esp+1Ch+var_1C], ebx
.text:00406953                 dec     edi
.text:00406954                 mov     [esp+1Ch+var_18], esi
.text:00406958                 mov     [esp+1Ch+var_14], 0Ah
.text:00406960                 mov     [esp+1Ch+var_10], 0
.text:00406968                 call    sub_411730
.text:0040696D                 add     al, 30h ; '0'
.text:0040696F                 mov     [edi], al
.text:00406971                 mov     [esp+1Ch+var_1C], ebx
.text:00406974                 mov     [esp+1Ch+var_18], esi
.text:00406978                 mov     [esp+1Ch+var_14], 0Ah
.text:00406980                 mov     [esp+1Ch+var_10], 0
.text:00406988                 call    sub_4118B0
.text:0040698D                 mov     ebx, eax
.text:0040698F                 mov     esi, edx
.text:00406991                 or      edx, ebx
.text:00406993                 jnz     short loc_406950
.text:00406995                 add     esp, 10h
.text:00406998                 mov     eax, edi
.text:0040699A                 pop     ebx
.text:0040699B                 pop     esi
.text:0040699C                 pop     edi
.text:0040699D                 retn
.text:0040699D sub_406930      endp
.text:0040699D
.text:0040699D ; ---------------------------------------------------------------------------
.text:0040699E                 align 10h
.text:004069A0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4069C0+3↓o
.text:004069B1 ; const char aS_2[]
.text:004069B1 aS_2            db '%s',0               ; DATA XREF: sub_4069C0+10↓o
.text:004069B4                 align 10h
.text:004069C0
.text:004069C0 ; =============== S U B R O U T I N E =======================================
.text:004069C0
.text:004069C0 ; Attributes: noreturn
.text:004069C0
.text:004069C0 sub_4069C0      proc near               ; CODE XREF: sub_404CC0:loc_404CF9↑p
.text:004069C0                                         ; sub_404D00+24↑p ...
.text:004069C0
.text:004069C0 Code            = dword ptr -1Ch
.text:004069C0 ErrorMessage    = dword ptr -18h
.text:004069C0 var_14          = dword ptr -14h
.text:004069C0 var_10          = byte ptr -10h
.text:004069C0
.text:004069C0                 sub     esp, 1Ch
.text:004069C3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004069CA                 call    ds:libintl_gettext
.text:004069D0                 mov     [esp+1Ch+var_14], offset aS_2 ; "%s"
.text:004069D8                 mov     edx, Code
.text:004069DE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004069E6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004069EA                 mov     [esp+1Ch+Code], edx ; Code
.text:004069ED                 call    sub_409A70
.text:004069F2                 call    abort
.text:004069F2 sub_4069C0      endp
.text:004069F2
.text:004069F2 ; ---------------------------------------------------------------------------
.text:004069F7                 align 10h
.text:00406A00
.text:00406A00 loc_406A00:                             ; DATA XREF: sub_406A70+C79↓o
.text:00406A00                 db      2Eh, 2Eh
.text:00406A00                 das
.text:00406A03                 db      2Eh, 2Eh
.text:00406A03                 das
.text:00406A06                 arpl    [edi+72h], bp
.text:00406A09                 db      65h
.text:00406A09                 jnz     short near ptr loc_406A7C+4
.text:00406A0C                 imul    ebp, [ebx+esi*2+2Dh], 2E332E35h
.text:00406A14                 xor     ds:2F637273h, ch
.text:00406A1A                 insb
.text:00406A1B                 imul    esp, [edx+2Fh], 72747378h
.text:00406A22                 jz      short near ptr loc_406A91+2
.text:00406A24                 insb
.text:00406A25                 arpl    cs:[eax], ax
.text:00406A28                 nop
.text:00406A29                 nop
.text:00406A2A                 nop
.text:00406A2B                 nop
.text:00406A2C                 nop
.text:00406A2D                 nop
.text:00406A2E                 nop
.text:00406A2F                 nop
.text:00406A30                 nop
.text:00406A31                 nop
.text:00406A32                 nop
.text:00406A33                 nop
.text:00406A34                 nop
.text:00406A35                 nop
.text:00406A36                 nop
.text:00406A37                 nop
.text:00406A38                 nop
.text:00406A39                 nop
.text:00406A3A                 nop
.text:00406A3B                 nop
.text:00406A3C                 nop
.text:00406A3D                 nop
.text:00406A3E                 nop
.text:00406A3F                 nop
.text:00406A40
.text:00406A40 loc_406A40:                             ; DATA XREF: sub_406A70+C81↓o
.text:00406A40                 xor     [eax], ah
.text:00406A42                 cmp     al, 3Dh ; '='
.text:00406A44                 and     [ebx+74h], dh
.text:00406A47                 jb      short near ptr loc_406AB9+4
.text:00406A49                 outsd
.text:00406A4A                 insb
.text:00406A4B                 pop     edi
.text:00406A4C                 bound   esp, [ecx+73h]
.text:00406A4F                 and     gs:[esi], ah
.text:00406A52                 and     es:[ebx+74h], dh
.text:00406A56                 jb      short near ptr loc_406AC8+4
.text:00406A58                 outsd
.text:00406A59                 insb
.text:00406A5A                 pop     edi
.text:00406A5B                 bound   esp, [ecx+73h]
.text:00406A5E                 and     gs:363320h[edi], bh
.text:00406A66                 lea     esi, [esi+0]
.text:00406A69                 lea     edi, [edi+0]
.text:00406A70
.text:00406A70 ; =============== S U B R O U T I N E =======================================
.text:00406A70
.text:00406A70
.text:00406A70 ; int __cdecl sub_406A70(int, int, int, int, char *Str)
.text:00406A70 sub_406A70      proc near               ; CODE XREF: sub_406430+9F↑p
.text:00406A70
.text:00406A70 C               = dword ptr -13Ch
.text:00406A70 Type            = dword ptr -138h
.text:00406A70 Radix           = dword ptr -134h
.text:00406A70 var_130         = dword ptr -130h
.text:00406A70 var_124         = dword ptr -124h
.text:00406A70 var_120         = dword ptr -120h
.text:00406A70 var_11C         = dword ptr -11Ch
.text:00406A70 var_118         = dword ptr -118h
.text:00406A70 var_114         = dword ptr -114h
.text:00406A70 var_110         = dword ptr -110h
.text:00406A70 var_10C         = dword ptr -10Ch
.text:00406A70 var_108         = dword ptr -108h
.text:00406A70 var_104         = dword ptr -104h
.text:00406A70 var_100         = dword ptr -100h
.text:00406A70 var_F8          = dword ptr -0F8h
.text:00406A70 var_F4          = dword ptr -0F4h
.text:00406A70 var_F0          = dword ptr -0F0h
.text:00406A70 var_EC          = dword ptr -0ECh
.text:00406A70 var_E8          = dword ptr -0E8h
.text:00406A70 var_E4          = dword ptr -0E4h
.text:00406A70 var_E0          = dword ptr -0E0h
.text:00406A70 var_D8          = dword ptr -0D8h
.text:00406A70 var_D4          = dword ptr -0D4h
.text:00406A70 var_D0          = dword ptr -0D0h
.text:00406A70 var_CC          = dword ptr -0CCh
.text:00406A70 var_C8          = dword ptr -0C8h
.text:00406A70 var_C4          = dword ptr -0C4h
.text:00406A70 var_C0          = dword ptr -0C0h
.text:00406A70 var_B8          = dword ptr -0B8h
.text:00406A70 var_B4          = dword ptr -0B4h
.text:00406A70 var_B0          = dword ptr -0B0h
.text:00406A70 var_AC          = dword ptr -0ACh
.text:00406A70 var_A8          = dword ptr -0A8h
.text:00406A70 var_A4          = dword ptr -0A4h
.text:00406A70 var_A0          = dword ptr -0A0h
.text:00406A70 var_98          = dword ptr -98h
.text:00406A70 var_94          = dword ptr -94h
.text:00406A70 var_90          = dword ptr -90h
.text:00406A70 var_8C          = dword ptr -8Ch
.text:00406A70 var_88          = dword ptr -88h
.text:00406A70 var_84          = dword ptr -84h
.text:00406A70 var_80          = dword ptr -80h
.text:00406A70 var_78          = dword ptr -78h
.text:00406A70 var_74          = dword ptr -74h
.text:00406A70 var_70          = dword ptr -70h
.text:00406A70 var_6C          = dword ptr -6Ch
.text:00406A70 var_68          = dword ptr -68h
.text:00406A70 var_64          = dword ptr -64h
.text:00406A70 var_60          = dword ptr -60h
.text:00406A70 var_5C          = dword ptr -5Ch
.text:00406A70 var_58          = dword ptr -58h
.text:00406A70 var_50          = dword ptr -50h
.text:00406A70 var_4C          = dword ptr -4Ch
.text:00406A70 var_48          = dword ptr -48h
.text:00406A70 var_44          = dword ptr -44h
.text:00406A70 var_40          = dword ptr -40h
.text:00406A70 var_3C          = dword ptr -3Ch
.text:00406A70 var_38          = dword ptr -38h
.text:00406A70 var_34          = dword ptr -34h
.text:00406A70 var_30          = dword ptr -30h
.text:00406A70 var_29          = byte ptr -29h
.text:00406A70 var_28          = dword ptr -28h
.text:00406A70 var_24          = dword ptr -24h
.text:00406A70 var_20          = dword ptr -20h
.text:00406A70 var_18          = byte ptr -18h
.text:00406A70 arg_0           = dword ptr  4
.text:00406A70 arg_4           = dword ptr  8
.text:00406A70 arg_8           = dword ptr  0Ch
.text:00406A70 arg_C           = dword ptr  10h
.text:00406A70 Str             = dword ptr  14h
.text:00406A70
.text:00406A70                 push    ebp
.text:00406A71                 xor     eax, eax
.text:00406A73                 push    edi
.text:00406A74                 push    esi
.text:00406A75                 push    ebx
.text:00406A76                 sub     esp, 12Ch
.text:00406A7C
.text:00406A7C loc_406A7C:                             ; CODE XREF: .text:00406A09↑j
.text:00406A7C                 mov     ebp, [esp+13Ch+arg_8]
.text:00406A83                 mov     [esp+13Ch+var_28], eax
.text:00406A8A                 mov     esi, [esp+13Ch+arg_0]
.text:00406A91
.text:00406A91 loc_406A91:                             ; CODE XREF: .text:00406A22↑j
.text:00406A91                 cmp     ebp, 24h ; '$'
.text:00406A94                 ja      loc_4076E1
.text:00406A9A                 mov     edi, [esp+13Ch+arg_4]
.text:00406AA1                 test    edi, edi
.text:00406AA3                 jz      loc_4076D5
.text:00406AA9
.text:00406AA9 loc_406AA9:                             ; CODE XREF: sub_406A70+C6C↓j
.text:00406AA9                 movzx   edx, byte ptr [esi]
.text:00406AAC                 mov     ebx, esi
.text:00406AAE                 mov     [esp+13Ch+var_29], dl
.text:00406AB5                 lea     esi, [esi+0]
.text:00406AB9
.text:00406AB9 loc_406AB9:                             ; CODE XREF: .text:00406A47↑j
.text:00406AB9                 lea     edi, [edi+0]
.text:00406AC0
.text:00406AC0 loc_406AC0:                             ; CODE XREF: sub_406A70+86↓j
.text:00406AC0                 movzx   edx, [esp+13Ch+var_29]
.text:00406AC8
.text:00406AC8 loc_406AC8:                             ; CODE XREF: .text:00406A56↑j
.text:00406AC8                 mov     ecx, ds:__mb_cur_max
.text:00406ACE                 cmp     dword ptr [ecx], 1
.text:00406AD1                 jz      loc_4076C2
.text:00406AD7                 mov     [esp+13Ch+Type], 8 ; Type
.text:00406ADF                 mov     [esp+13Ch+C], edx ; C
.text:00406AE2                 call    _isctype
.text:00406AE7
.text:00406AE7 loc_406AE7:                             ; CODE XREF: sub_406A70+C60↓j
.text:00406AE7                 test    eax, eax
.text:00406AE9                 jz      short loc_406AF8
.text:00406AEB                 inc     ebx
.text:00406AEC                 movzx   eax, byte ptr [ebx]
.text:00406AEF                 mov     [esp+13Ch+var_29], al
.text:00406AF6                 jmp     short loc_406AC0
.text:00406AF8 ; ---------------------------------------------------------------------------
.text:00406AF8
.text:00406AF8 loc_406AF8:                             ; CODE XREF: sub_406A70+79↑j
.text:00406AF8                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00406B00                 mov     eax, 4
.text:00406B05                 jz      short loc_406B82
.text:00406B07                 call    _errno
.text:00406B0C                 mov     dword ptr [eax], 0
.text:00406B12                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00406B16                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:00406B1A                 mov     [esp+13Ch+C], esi ; String
.text:00406B1D                 call    _strtoull
.text:00406B22                 mov     [esp+13Ch+var_24], eax
.text:00406B29                 mov     eax, [edi]
.text:00406B2B                 mov     [esp+13Ch+var_20], edx
.text:00406B32                 cmp     eax, esi
.text:00406B34                 jz      loc_40767C
.text:00406B3A                 call    _errno
.text:00406B3F                 mov     ebx, [eax]
.text:00406B41                 test    ebx, ebx
.text:00406B43                 jnz     loc_407657
.text:00406B49
.text:00406B49 loc_406B49:                             ; CODE XREF: sub_406A70+BFD↓j
.text:00406B49                                         ; sub_406A70+C4D↓j
.text:00406B49                 mov     ebp, [esp+13Ch+Str]
.text:00406B50                 test    ebp, ebp
.text:00406B52                 jz      loc_407638
.text:00406B58                 mov     ebx, [edi]
.text:00406B5A                 movzx   eax, byte ptr [ebx]
.text:00406B5D                 test    al, al
.text:00406B5F                 jnz     short loc_406B8D
.text:00406B61
.text:00406B61 loc_406B61:                             ; CODE XREF: sub_406A70+312↓j
.text:00406B61                                         ; sub_406A70+320↓j
.text:00406B61                 mov     edx, [esp+13Ch+var_24]
.text:00406B68                 mov     edi, [esp+13Ch+var_20]
.text:00406B6F                 mov     ebx, [esp+13Ch+arg_C]
.text:00406B76                 mov     [ebx], edx
.text:00406B78                 mov     [ebx+4], edi
.text:00406B7B
.text:00406B7B loc_406B7B:                             ; CODE XREF: sub_406A70+BE2↓j
.text:00406B7B                 mov     eax, [esp+13Ch+var_28]
.text:00406B82
.text:00406B82 loc_406B82:                             ; CODE XREF: sub_406A70+95↑j
.text:00406B82                                         ; sub_406A70+16C↓j ...
.text:00406B82                 add     esp, 12Ch
.text:00406B88                 pop     ebx
.text:00406B89                 pop     esi
.text:00406B8A                 pop     edi
.text:00406B8B                 pop     ebp
.text:00406B8C                 retn
.text:00406B8D ; ---------------------------------------------------------------------------
.text:00406B8D
.text:00406B8D loc_406B8D:                             ; CODE XREF: sub_406A70+EF↑j
.text:00406B8D                 mov     esi, [esp+13Ch+Str]
.text:00406B94                 mov     ecx, 1
.text:00406B99                 movsx   ebp, al
.text:00406B9C                 mov     [esp+13Ch+var_30], ecx
.text:00406BA3                 mov     ebx, 400h
.text:00406BA8                 mov     [esp+13Ch+Type], ebp ; Val
.text:00406BAC                 mov     [esp+13Ch+C], esi ; Str
.text:00406BAF                 call    strchr
.text:00406BB4                 test    eax, eax
.text:00406BB6                 jnz     short loc_406BDE
.text:00406BB8
.text:00406BB8 def_406C29:                             ; CODE XREF: sub_406A70+1B7↓j
.text:00406BB8                                         ; sub_406A70+1B9↓j
.text:00406BB8                                         ; DATA XREF: ...
.text:00406BB8                 mov     eax, [esp+13Ch+var_28] ; jumptable 00406C29 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00406BBF                 mov     esi, [esp+13Ch+var_24]
.text:00406BC6                 mov     ebp, [esp+13Ch+var_20]
.text:00406BCD                 mov     edi, [esp+13Ch+arg_C]
.text:00406BD4                 or      eax, 2
.text:00406BD7                 mov     [edi], esi
.text:00406BD9                 mov     [edi+4], ebp
.text:00406BDC                 jmp     short loc_406B82
.text:00406BDE ; ---------------------------------------------------------------------------
.text:00406BDE
.text:00406BDE loc_406BDE:                             ; CODE XREF: sub_406A70+146↑j
.text:00406BDE                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00406BE6                 mov     edx, [esp+13Ch+Str]
.text:00406BED                 mov     [esp+13Ch+C], edx ; Str
.text:00406BF0                 call    strchr
.text:00406BF5                 test    eax, eax
.text:00406BF7                 jz      loc_407631
.text:00406BFD                 mov     edx, [edi]
.text:00406BFF                 movsx   eax, byte ptr [edx+1]
.text:00406C03                 cmp     eax, 44h ; 'D'
.text:00406C06                 jz      loc_4075F7
.text:00406C0C                 cmp     eax, 44h ; 'D'
.text:00406C0F                 jg      loc_40760D
.text:00406C15                 cmp     eax, 42h ; 'B'
.text:00406C18                 jz      loc_4075F7
.text:00406C1E
.text:00406C1E loc_406C1E:                             ; CODE XREF: sub_406A70+B98↓j
.text:00406C1E                                         ; sub_406A70+BA0↓j ...
.text:00406C1E                 movsx   eax, byte ptr [edx]
.text:00406C21                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00406C24                 cmp     eax, 35h
.text:00406C27                 ja      short def_406C29 ; jumptable 00406C29 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00406C29                 jmp     ds:jpt_406C29[eax*4] ; switch jump
.text:00406C29 ; ---------------------------------------------------------------------------
.text:00406C30 jpt_406C29      dd offset loc_406DB4, offset def_406C29, offset def_406C29
.text:00406C30                                         ; DATA XREF: sub_406A70+1B9↑r
.text:00406C30                 dd offset loc_406E0E, offset def_406C29, offset loc_4071D7 ; jump table for switch statement
.text:00406C30                 dd offset def_406C29, offset def_406C29, offset def_406C29
.text:00406C30                 dd offset loc_4072E6, offset def_406C29, offset loc_4073AF
.text:00406C30                 dd offset def_406C29, offset def_406C29, offset loc_406F1D
.text:00406C30                 dd offset def_406C29, offset def_406C29, offset def_406C29
.text:00406C30                 dd offset loc_4074BE, offset def_406C29, offset def_406C29
.text:00406C30                 dd offset def_406C29, offset def_406C29, offset loc_40702C
.text:00406C30                 dd offset loc_4070FE, offset def_406C29, offset def_406C29
.text:00406C30                 dd offset def_406C29, offset def_406C29, offset def_406C29
.text:00406C30                 dd offset def_406C29, offset def_406C29, offset loc_406D08
.text:00406C30                 dd offset loc_4071D0, offset def_406C29, offset def_406C29
.text:00406C30                 dd offset def_406C29, offset loc_4071D7, offset def_406C29
.text:00406C30                 dd offset def_406C29, offset def_406C29, offset loc_4072E6
.text:00406C30                 dd offset def_406C29, offset loc_4073AF, offset def_406C29
.text:00406C30                 dd offset def_406C29, offset def_406C29, offset def_406C29
.text:00406C30                 dd offset def_406C29, offset def_406C29, offset loc_4074BE
.text:00406C30                 dd offset def_406C29, offset def_406C29, offset loc_407597
.text:00406D08 ; ---------------------------------------------------------------------------
.text:00406D08
.text:00406D08 loc_406D08:                             ; CODE XREF: sub_406A70+1B9↑j
.text:00406D08                                         ; DATA XREF: sub_406A70:jpt_406C29↑o
.text:00406D08                 mov     [esp+13Ch+Radix], 200h ; jumptable 00406C29 case 98
.text:00406D10                 lea     ebp, [esp+13Ch+var_24]
.text:00406D17                 mov     [esp+13Ch+var_130], 0
.text:00406D1F                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406D26                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406D2E                 call    sub_4118B0
.text:00406D33                 mov     esi, [esp+13Ch+var_20]
.text:00406D3A                 mov     ecx, [esp+13Ch+var_24]
.text:00406D41                 cmp     edx, esi
.text:00406D43                 ja      short loc_406D4B
.text:00406D45                 jb      short loc_406D95
.text:00406D47                 cmp     eax, ecx
.text:00406D49                 jb      short loc_406D95
.text:00406D4B
.text:00406D4B loc_406D4B:                             ; CODE XREF: sub_406A70+2D3↑j
.text:00406D4B                 mov     esi, [ebp+0]
.text:00406D4E                 mov     eax, 200h
.text:00406D53                 mov     ebx, [ebp+4]
.text:00406D56                 mul     esi
.text:00406D58                 mov     ecx, ebx
.text:00406D5A                 shl     ecx, 9
.text:00406D5D
.text:00406D5D loc_406D5D:                             ; CODE XREF: sub_406A70+399↓j
.text:00406D5D                 mov     esi, edx
.text:00406D5F                 lea     edx, [ecx+esi]
.text:00406D62
.text:00406D62 loc_406D62:                             ; CODE XREF: sub_406A70+B82↓j
.text:00406D62                 mov     [ebp+0], eax
.text:00406D65                 xor     eax, eax
.text:00406D67                 mov     [ebp+4], edx
.text:00406D6A
.text:00406D6A loc_406D6A:                             ; CODE XREF: sub_406A70+342↓j
.text:00406D6A                                         ; sub_406A70+459↓j ...
.text:00406D6A                 mov     edx, [edi]
.text:00406D6C
.text:00406D6C loc_406D6C:                             ; CODE XREF: sub_406A70+762↓j
.text:00406D6C                 or      [esp+13Ch+var_28], eax
.text:00406D73                 mov     eax, [esp+13Ch+var_30]
.text:00406D7A                 lea     ecx, [eax+edx]
.text:00406D7D                 mov     [edi], ecx
.text:00406D7F                 cmp     byte ptr [ecx], 0
.text:00406D82                 jz      loc_406B61
.text:00406D88                 or      [esp+13Ch+var_28], 2
.text:00406D90                 jmp     loc_406B61
.text:00406D95 ; ---------------------------------------------------------------------------
.text:00406D95
.text:00406D95 loc_406D95:                             ; CODE XREF: sub_406A70+2D5↑j
.text:00406D95                                         ; sub_406A70+2D9↑j ...
.text:00406D95                 mov     edx, 0FFFFFFFFh
.text:00406D9A                 mov     ebp, 0FFFFFFFFh
.text:00406D9F                 mov     eax, 1
.text:00406DA4                 mov     [esp+13Ch+var_24], edx
.text:00406DAB                 mov     [esp+13Ch+var_20], ebp
.text:00406DB2                 jmp     short loc_406D6A
.text:00406DB4 ; ---------------------------------------------------------------------------
.text:00406DB4
.text:00406DB4 loc_406DB4:                             ; CODE XREF: sub_406A70+1B9↑j
.text:00406DB4                                         ; DATA XREF: sub_406A70:jpt_406C29↑o
.text:00406DB4                 mov     [esp+13Ch+Radix], 400h ; jumptable 00406C29 case 66
.text:00406DBC                 lea     ebp, [esp+13Ch+var_24]
.text:00406DC3                 mov     [esp+13Ch+var_130], 0
.text:00406DCB                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406DD2                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406DDA                 call    sub_4118B0
.text:00406DDF                 mov     esi, [esp+13Ch+var_20]
.text:00406DE6                 mov     ecx, [esp+13Ch+var_24]
.text:00406DED                 cmp     edx, esi
.text:00406DEF                 ja      short loc_406DF7
.text:00406DF1                 jb      short loc_406D95
.text:00406DF3                 cmp     eax, ecx
.text:00406DF5                 jb      short loc_406D95
.text:00406DF7
.text:00406DF7 loc_406DF7:                             ; CODE XREF: sub_406A70+37F↑j
.text:00406DF7                 mov     esi, [ebp+0]
.text:00406DFA                 mov     eax, 400h
.text:00406DFF                 mov     ebx, [ebp+4]
.text:00406E02                 mul     esi
.text:00406E04                 mov     ecx, ebx
.text:00406E06                 shl     ecx, 0Ah
.text:00406E09                 jmp     loc_406D5D
.text:00406E0E ; ---------------------------------------------------------------------------
.text:00406E0E
.text:00406E0E loc_406E0E:                             ; CODE XREF: sub_406A70+1B9↑j
.text:00406E0E                                         ; DATA XREF: sub_406A70:jpt_406C29↑o
.text:00406E0E                 mov     [esp+13Ch+var_3C], ebx ; jumptable 00406C29 case 69
.text:00406E15                 mov     ecx, ebx
.text:00406E17                 xor     ebp, ebp
.text:00406E19                 mov     [esp+13Ch+var_34], ebp
.text:00406E20                 sar     ecx, 1Fh
.text:00406E23                 mov     ebx, [esp+13Ch+var_3C]
.text:00406E2A                 mov     [esp+13Ch+var_38], ecx
.text:00406E31                 lea     esi, [esp+13Ch+var_24]
.text:00406E38                 mov     ebp, 5
.text:00406E3D                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406E44                 mov     edx, [esp+13Ch+var_38]
.text:00406E4B                 mov     [esp+13Ch+Radix], ebx
.text:00406E4F                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406E57                 mov     [esp+13Ch+var_130], edx
.text:00406E5B                 call    sub_4118B0
.text:00406E60                 mov     [esp+13Ch+var_44], eax
.text:00406E67                 mov     [esp+13Ch+var_40], edx
.text:00406E6E
.text:00406E6E loc_406E6E:                             ; CODE XREF: sub_406A70+450↓j
.text:00406E6E                 mov     ebx, [esi+4]
.text:00406E71                 mov     eax, [esi]
.text:00406E73                 cmp     [esp+13Ch+var_40], ebx
.text:00406E7A                 mov     [esp+13Ch+var_48], ebx
.text:00406E81                 mov     [esp+13Ch+var_4C], eax
.text:00406E88                 ja      short loc_406ECE
.text:00406E8A                 mov     ecx, [esp+13Ch+var_48]
.text:00406E91                 cmp     [esp+13Ch+var_40], ecx
.text:00406E98                 jb      short loc_406EA3
.text:00406E9A                 cmp     [esp+13Ch+var_44], eax
.text:00406EA1                 jnb     short loc_406ECE
.text:00406EA3
.text:00406EA3 loc_406EA3:                             ; CODE XREF: sub_406A70+428↑j
.text:00406EA3                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406EA9                 mov     eax, 1
.text:00406EAE                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406EB5
.text:00406EB5 loc_406EB5:                             ; CODE XREF: sub_406A70+4AB↓j
.text:00406EB5                 or      [esp+13Ch+var_34], eax
.text:00406EBC                 dec     ebp
.text:00406EBD                 cmp     ebp, 0FFFFFFFFh
.text:00406EC0                 jnz     short loc_406E6E
.text:00406EC2                 mov     eax, [esp+13Ch+var_34]
.text:00406EC9                 jmp     loc_406D6A
.text:00406ECE ; ---------------------------------------------------------------------------
.text:00406ECE
.text:00406ECE loc_406ECE:                             ; CODE XREF: sub_406A70+418↑j
.text:00406ECE                                         ; sub_406A70+431↑j
.text:00406ECE                 mov     ecx, [esp+13Ch+var_38]
.text:00406ED5                 mov     eax, [esp+13Ch+var_4C]
.text:00406EDC                 mov     ebx, [esp+13Ch+var_4C]
.text:00406EE3                 mul     [esp+13Ch+var_3C]
.text:00406EEA                 imul    ebx, ecx
.text:00406EED                 mov     ecx, edx
.text:00406EEF                 mov     [esp+13Ch+var_124], eax
.text:00406EF3                 add     ecx, ebx
.text:00406EF5                 mov     edx, [esp+13Ch+var_3C]
.text:00406EFC                 mov     ebx, [esp+13Ch+var_48]
.text:00406F03                 imul    edx, ebx
.text:00406F06                 mov     ebx, [esp+13Ch+var_124]
.text:00406F0A                 mov     [esi], ebx
.text:00406F0C                 add     ecx, edx
.text:00406F0E                 mov     [esp+13Ch+var_120], ecx
.text:00406F12                 mov     eax, [esp+13Ch+var_120]
.text:00406F16                 mov     [esi+4], eax
.text:00406F19                 xor     eax, eax
.text:00406F1B                 jmp     short loc_406EB5
.text:00406F1D ; ---------------------------------------------------------------------------
.text:00406F1D
.text:00406F1D loc_406F1D:                             ; CODE XREF: sub_406A70+1B9↑j
.text:00406F1D                                         ; DATA XREF: sub_406A70:jpt_406C29↑o
.text:00406F1D                 mov     [esp+13Ch+var_A4], ebx ; jumptable 00406C29 case 80
.text:00406F24                 mov     eax, ebx
.text:00406F26                 xor     ebp, ebp
.text:00406F28                 mov     [esp+13Ch+var_98], ebp
.text:00406F2F                 sar     eax, 1Fh
.text:00406F32                 mov     edx, [esp+13Ch+var_A4]
.text:00406F39                 mov     [esp+13Ch+var_A0], eax
.text:00406F40                 lea     esi, [esp+13Ch+var_24]
.text:00406F47                 mov     ebp, 4
.text:00406F4C                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406F53                 mov     ebx, [esp+13Ch+var_A0]
.text:00406F5A                 mov     [esp+13Ch+Radix], edx
.text:00406F5E                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406F66                 mov     [esp+13Ch+var_130], ebx
.text:00406F6A                 call    sub_4118B0
.text:00406F6F                 mov     [esp+13Ch+var_AC], eax
.text:00406F76                 mov     [esp+13Ch+var_A8], edx
.text:00406F7D
.text:00406F7D loc_406F7D:                             ; CODE XREF: sub_406A70+55F↓j
.text:00406F7D                 mov     ebx, [esi+4]
.text:00406F80                 mov     edx, [esi]
.text:00406F82                 cmp     [esp+13Ch+var_A8], ebx
.text:00406F89                 mov     [esp+13Ch+var_B0], ebx
.text:00406F90                 mov     [esp+13Ch+var_B4], edx
.text:00406F97                 ja      short loc_406FDD
.text:00406F99                 mov     eax, [esp+13Ch+var_B0]
.text:00406FA0                 cmp     [esp+13Ch+var_A8], eax
.text:00406FA7                 jb      short loc_406FB2
.text:00406FA9                 cmp     [esp+13Ch+var_AC], edx
.text:00406FB0                 jnb     short loc_406FDD
.text:00406FB2
.text:00406FB2 loc_406FB2:                             ; CODE XREF: sub_406A70+537↑j
.text:00406FB2                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406FB8                 mov     eax, 1
.text:00406FBD                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406FC4
.text:00406FC4 loc_406FC4:                             ; CODE XREF: sub_406A70+5BA↓j
.text:00406FC4                 or      [esp+13Ch+var_98], eax
.text:00406FCB                 dec     ebp
.text:00406FCC                 cmp     ebp, 0FFFFFFFFh
.text:00406FCF                 jnz     short loc_406F7D
.text:00406FD1                 mov     eax, [esp+13Ch+var_98]
.text:00406FD8                 jmp     loc_406D6A
.text:00406FDD ; ---------------------------------------------------------------------------
.text:00406FDD
.text:00406FDD loc_406FDD:                             ; CODE XREF: sub_406A70+527↑j
.text:00406FDD                                         ; sub_406A70+540↑j
.text:00406FDD                 mov     ecx, [esp+13Ch+var_A0]
.text:00406FE4                 mov     eax, [esp+13Ch+var_B4]
.text:00406FEB                 mov     ebx, [esp+13Ch+var_B4]
.text:00406FF2                 mul     [esp+13Ch+var_A4]
.text:00406FF9                 imul    ebx, ecx
.text:00406FFC                 mov     ecx, edx
.text:00406FFE                 mov     [esp+13Ch+var_124], eax
.text:00407002                 add     ecx, ebx
.text:00407004                 mov     edx, [esp+13Ch+var_A4]
.text:0040700B                 mov     ebx, [esp+13Ch+var_B0]
.text:00407012                 xor     eax, eax
.text:00407014                 imul    edx, ebx
.text:00407017                 add     ecx, edx
.text:00407019                 mov     [esp+13Ch+var_120], ecx
.text:0040701D                 mov     ebx, [esp+13Ch+var_120]
.text:00407021                 mov     ecx, [esp+13Ch+var_124]
.text:00407025                 mov     [esi+4], ebx
.text:00407028                 mov     [esi], ecx
.text:0040702A                 jmp     short loc_406FC4
.text:0040702C ; ---------------------------------------------------------------------------
.text:0040702C
.text:0040702C loc_40702C:                             ; CODE XREF: sub_406A70+1B9↑j
.text:0040702C                                         ; DATA XREF: sub_406A70:jpt_406C29↑o
.text:0040702C                 mov     [esp+13Ch+var_E4], ebx ; jumptable 00406C29 case 89
.text:00407030                 mov     eax, ebx
.text:00407032                 lea     esi, [esp+13Ch+var_24]
.text:00407039                 mov     [esp+13Ch+var_D8], 0
.text:00407041                 sar     eax, 1Fh
.text:00407044                 mov     edx, [esp+13Ch+var_E4]
.text:00407048                 mov     [esp+13Ch+var_E0], eax
.text:0040704C                 mov     ebp, 7
.text:00407051                 mov     ebx, [esp+13Ch+var_E0]
.text:00407055                 mov     [esp+13Ch+Radix], edx
.text:00407059                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00407060                 mov     [esp+13Ch+var_130], ebx
.text:00407064                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040706C                 call    sub_4118B0
.text:00407071                 mov     [esp+13Ch+var_EC], eax
.text:00407075                 mov     [esp+13Ch+var_E8], edx
.text:00407079
.text:00407079 loc_407079:                             ; CODE XREF: sub_406A70+646↓j
.text:00407079                 mov     ebx, [esi+4]
.text:0040707C                 mov     edx, [esi]
.text:0040707E                 cmp     [esp+13Ch+var_E8], ebx
.text:00407082                 mov     [esp+13Ch+var_F0], ebx
.text:00407086                 mov     [esp+13Ch+var_F4], edx
.text:0040708A                 ja      short loc_4070C1
.text:0040708C                 mov     eax, [esp+13Ch+var_F0]
.text:00407090                 cmp     [esp+13Ch+var_E8], eax
.text:00407094                 jb      short loc_40709C
.text:00407096                 cmp     [esp+13Ch+var_EC], edx
.text:0040709A                 jnb     short loc_4070C1
.text:0040709C
.text:0040709C loc_40709C:                             ; CODE XREF: sub_406A70+624↑j
.text:0040709C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004070A2                 mov     eax, 1
.text:004070A7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004070AE
.text:004070AE loc_4070AE:                             ; CODE XREF: sub_406A70+68C↓j
.text:004070AE                 or      [esp+13Ch+var_D8], eax
.text:004070B2                 dec     ebp
.text:004070B3                 cmp     ebp, 0FFFFFFFFh
.text:004070B6                 jnz     short loc_407079
.text:004070B8                 mov     eax, [esp+13Ch+var_D8]
.text:004070BC                 jmp     loc_406D6A
.text:004070C1 ; ---------------------------------------------------------------------------
.text:004070C1
.text:004070C1 loc_4070C1:                             ; CODE XREF: sub_406A70+61A↑j
.text:004070C1                                         ; sub_406A70+62A↑j
.text:004070C1                 mov     ecx, [esp+13Ch+var_E0]
.text:004070C5                 mov     eax, [esp+13Ch+var_F4]
.text:004070C9                 mov     ebx, [esp+13Ch+var_F4]
.text:004070CD                 mul     [esp+13Ch+var_E4]
.text:004070D1                 imul    ebx, ecx
.text:004070D4                 mov     ecx, edx
.text:004070D6                 mov     [esp+13Ch+var_124], eax
.text:004070DA                 add     ecx, ebx
.text:004070DC                 mov     edx, [esp+13Ch+var_E4]
.text:004070E0                 mov     ebx, [esp+13Ch+var_F0]
.text:004070E4                 xor     eax, eax
.text:004070E6                 imul    edx, ebx
.text:004070E9                 add     ecx, edx
.text:004070EB                 mov     [esp+13Ch+var_120], ecx
.text:004070EF                 mov     ebx, [esp+13Ch+var_120]
.text:004070F3                 mov     ecx, [esp+13Ch+var_124]
.text:004070F7                 mov     [esi+4], ebx
.text:004070FA                 mov     [esi], ecx
.text:004070FC                 jmp     short loc_4070AE
.text:004070FE ; ---------------------------------------------------------------------------
.text:004070FE
.text:004070FE loc_4070FE:                             ; CODE XREF: sub_406A70+1B9↑j
.text:004070FE                                         ; DATA XREF: sub_406A70:jpt_406C29↑o
.text:004070FE                 mov     [esp+13Ch+var_104], ebx ; jumptable 00406C29 case 90
.text:00407102                 mov     eax, ebx
.text:00407104                 lea     esi, [esp+13Ch+var_24]
.text:0040710B                 mov     [esp+13Ch+var_F8], 0
.text:00407113                 sar     eax, 1Fh
.text:00407116                 mov     edx, [esp+13Ch+var_104]
.text:0040711A                 mov     [esp+13Ch+var_100], eax
.text:0040711E                 mov     ebp, 6
.text:00407123                 mov     ebx, [esp+13Ch+var_100]
.text:00407127                 mov     [esp+13Ch+Radix], edx
.text:0040712B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00407132                 mov     [esp+13Ch+var_130], ebx
.text:00407136                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040713E                 call    sub_4118B0
.text:00407143                 mov     [esp+13Ch+var_10C], eax
.text:00407147                 mov     [esp+13Ch+var_108], edx
.text:0040714B
.text:0040714B loc_40714B:                             ; CODE XREF: sub_406A70+718↓j
.text:0040714B                 mov     ebx, [esi+4]
.text:0040714E                 mov     edx, [esi]
.text:00407150                 cmp     [esp+13Ch+var_108], ebx
.text:00407154                 mov     [esp+13Ch+var_110], ebx
.text:00407158                 mov     [esp+13Ch+var_114], edx
.text:0040715C                 ja      short loc_407193
.text:0040715E                 mov     eax, [esp+13Ch+var_110]
.text:00407162                 cmp     [esp+13Ch+var_108], eax
.text:00407166                 jb      short loc_40716E
.text:00407168                 cmp     [esp+13Ch+var_10C], edx
.text:0040716C                 jnb     short loc_407193
.text:0040716E
.text:0040716E loc_40716E:                             ; CODE XREF: sub_406A70+6F6↑j
.text:0040716E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00407174                 mov     eax, 1
.text:00407179                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00407180
.text:00407180 loc_407180:                             ; CODE XREF: sub_406A70+75E↓j
.text:00407180                 or      [esp+13Ch+var_F8], eax
.text:00407184                 dec     ebp
.text:00407185                 cmp     ebp, 0FFFFFFFFh
.text:00407188                 jnz     short loc_40714B
.text:0040718A                 mov     eax, [esp+13Ch+var_F8]
.text:0040718E                 jmp     loc_406D6A
.text:00407193 ; ---------------------------------------------------------------------------
.text:00407193
.text:00407193 loc_407193:                             ; CODE XREF: sub_406A70+6EC↑j
.text:00407193                                         ; sub_406A70+6FC↑j
.text:00407193                 mov     eax, [esp+13Ch+var_114]
.text:00407197                 mov     ebx, [esp+13Ch+var_100]
.text:0040719B                 mul     [esp+13Ch+var_104]
.text:0040719F                 mov     ecx, edx
.text:004071A1                 mov     edx, [esp+13Ch+var_104]
.text:004071A5                 mov     [esp+13Ch+var_124], eax
.text:004071A9                 mov     eax, [esp+13Ch+var_114]
.text:004071AD                 imul    eax, ebx
.text:004071B0                 mov     ebx, [esp+13Ch+var_110]
.text:004071B4                 imul    edx, ebx
.text:004071B7                 add     ecx, eax
.text:004071B9                 xor     eax, eax
.text:004071BB                 add     ecx, edx
.text:004071BD                 mov     [esp+13Ch+var_120], ecx
.text:004071C1                 mov     ebx, [esp+13Ch+var_120]
.text:004071C5                 mov     ecx, [esp+13Ch+var_124]
.text:004071C9                 mov     [esi+4], ebx
.text:004071CC                 mov     [esi], ecx
.text:004071CE                 jmp     short loc_407180
.text:004071D0 ; ---------------------------------------------------------------------------
.text:004071D0
.text:004071D0 loc_4071D0:                             ; CODE XREF: sub_406A70+1B9↑j
.text:004071D0                                         ; DATA XREF: sub_406A70:jpt_406C29↑o
.text:004071D0                 xor     eax, eax        ; jumptable 00406C29 case 99
.text:004071D2                 jmp     loc_406D6C
.text:004071D7 ; ---------------------------------------------------------------------------
.text:004071D7
.text:004071D7 loc_4071D7:                             ; CODE XREF: sub_406A70+1B9↑j
.text:004071D7                                         ; DATA XREF: sub_406A70:jpt_406C29↑o
.text:004071D7                 mov     [esp+13Ch+var_5C], ebx ; jumptable 00406C29 cases 71,103
.text:004071DE                 mov     eax, ebx
.text:004071E0                 xor     ebp, ebp
.text:004071E2                 mov     [esp+13Ch+var_50], ebp
.text:004071E9                 sar     eax, 1Fh
.text:004071EC                 mov     edx, [esp+13Ch+var_5C]
.text:004071F3                 mov     [esp+13Ch+var_58], eax
.text:004071FA                 lea     esi, [esp+13Ch+var_24]
.text:00407201                 mov     ebp, 2
.text:00407206                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040720D                 mov     ebx, [esp+13Ch+var_58]
.text:00407214                 mov     [esp+13Ch+Radix], edx
.text:00407218                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00407220                 mov     [esp+13Ch+var_130], ebx
.text:00407224                 call    sub_4118B0
.text:00407229                 mov     [esp+13Ch+var_64], eax
.text:00407230                 mov     [esp+13Ch+var_60], edx
.text:00407237
.text:00407237 loc_407237:                             ; CODE XREF: sub_406A70+819↓j
.text:00407237                 mov     ebx, [esi+4]
.text:0040723A                 mov     edx, [esi]
.text:0040723C                 cmp     [esp+13Ch+var_60], ebx
.text:00407243                 mov     [esp+13Ch+var_68], ebx
.text:0040724A                 mov     [esp+13Ch+var_6C], edx
.text:00407251                 ja      short loc_407297
.text:00407253                 mov     eax, [esp+13Ch+var_68]
.text:0040725A                 cmp     [esp+13Ch+var_60], eax
.text:00407261                 jb      short loc_40726C
.text:00407263                 cmp     [esp+13Ch+var_64], edx
.text:0040726A                 jnb     short loc_407297
.text:0040726C
.text:0040726C loc_40726C:                             ; CODE XREF: sub_406A70+7F1↑j
.text:0040726C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00407272                 mov     eax, 1
.text:00407277                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040727E
.text:0040727E loc_40727E:                             ; CODE XREF: sub_406A70+874↓j
.text:0040727E                 or      [esp+13Ch+var_50], eax
.text:00407285                 dec     ebp
.text:00407286                 cmp     ebp, 0FFFFFFFFh
.text:00407289                 jnz     short loc_407237
.text:0040728B                 mov     eax, [esp+13Ch+var_50]
.text:00407292                 jmp     loc_406D6A
.text:00407297 ; ---------------------------------------------------------------------------
.text:00407297
.text:00407297 loc_407297:                             ; CODE XREF: sub_406A70+7E1↑j
.text:00407297                                         ; sub_406A70+7FA↑j
.text:00407297                 mov     ecx, [esp+13Ch+var_58]
.text:0040729E                 mov     eax, [esp+13Ch+var_6C]
.text:004072A5                 mov     ebx, [esp+13Ch+var_6C]
.text:004072AC                 mul     [esp+13Ch+var_5C]
.text:004072B3                 imul    ebx, ecx
.text:004072B6                 mov     ecx, edx
.text:004072B8                 mov     [esp+13Ch+var_124], eax
.text:004072BC                 add     ecx, ebx
.text:004072BE                 mov     edx, [esp+13Ch+var_5C]
.text:004072C5                 mov     ebx, [esp+13Ch+var_68]
.text:004072CC                 xor     eax, eax
.text:004072CE                 imul    edx, ebx
.text:004072D1                 add     ecx, edx
.text:004072D3                 mov     [esp+13Ch+var_120], ecx
.text:004072D7                 mov     ebx, [esp+13Ch+var_120]
.text:004072DB                 mov     ecx, [esp+13Ch+var_124]
.text:004072DF                 mov     [esi+4], ebx
.text:004072E2                 mov     [esi], ecx
.text:004072E4                 jmp     short loc_40727E
.text:004072E6 ; ---------------------------------------------------------------------------
.text:004072E6
.text:004072E6 loc_4072E6:                             ; CODE XREF: sub_406A70+1B9↑j
.text:004072E6                                         ; DATA XREF: sub_406A70:jpt_406C29↑o
.text:004072E6                 mov     [esp+13Ch+var_74], ebx ; jumptable 00406C29 cases 75,107
.text:004072ED                 mov     eax, ebx
.text:004072EF                 lea     esi, [esp+13Ch+var_24]
.text:004072F6                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004072FD                 sar     eax, 1Fh
.text:00407300                 mov     edx, [esp+13Ch+var_74]
.text:00407307                 mov     [esp+13Ch+var_70], eax
.text:0040730E                 mov     ebx, [esp+13Ch+var_70]
.text:00407315                 mov     [esp+13Ch+Radix], edx
.text:00407319                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00407321                 mov     [esp+13Ch+var_130], ebx
.text:00407325                 call    sub_4118B0
.text:0040732A                 mov     ebp, [esp+13Ch+var_20]
.text:00407331                 mov     ecx, [esp+13Ch+var_24]
.text:00407338                 cmp     edx, ebp
.text:0040733A                 mov     [esp+13Ch+var_11C], ecx
.text:0040733E                 mov     [esp+13Ch+var_118], ebp
.text:00407342                 ja      short loc_407369
.text:00407344                 cmp     edx, [esp+13Ch+var_118]
.text:00407348                 jb      short loc_40734E
.text:0040734A                 cmp     eax, ecx
.text:0040734C                 jnb     short loc_407369
.text:0040734E
.text:0040734E loc_40734E:                             ; CODE XREF: sub_406A70+8D8↑j
.text:0040734E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00407354                 mov     edx, 1
.text:00407359                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00407360
.text:00407360 loc_407360:                             ; CODE XREF: sub_406A70+93D↓j
.text:00407360                 xor     eax, eax
.text:00407362                 or      eax, edx
.text:00407364                 jmp     loc_406D6A
.text:00407369 ; ---------------------------------------------------------------------------
.text:00407369
.text:00407369 loc_407369:                             ; CODE XREF: sub_406A70+8D2↑j
.text:00407369                                         ; sub_406A70+8DC↑j
.text:00407369                 mov     eax, [esp+13Ch+var_11C]
.text:0040736D                 mov     ebp, [esp+13Ch+var_11C]
.text:00407371                 mov     ebx, [esp+13Ch+var_118]
.text:00407375                 mul     [esp+13Ch+var_74]
.text:0040737C                 mov     [esp+13Ch+var_124], eax
.text:00407380                 mov     eax, [esp+13Ch+var_70]
.text:00407387                 mov     ecx, [esp+13Ch+var_124]
.text:0040738B                 imul    ebp, eax
.text:0040738E                 mov     eax, edx
.text:00407390                 xor     edx, edx
.text:00407392                 mov     [esi], ecx
.text:00407394                 add     eax, ebp
.text:00407396                 mov     ebp, [esp+13Ch+var_74]
.text:0040739D                 imul    ebp, ebx
.text:004073A0                 add     eax, ebp
.text:004073A2                 mov     [esp+13Ch+var_120], eax
.text:004073A6                 mov     ebp, [esp+13Ch+var_120]
.text:004073AA                 mov     [esi+4], ebp
.text:004073AD                 jmp     short loc_407360
.text:004073AF ; ---------------------------------------------------------------------------
.text:004073AF
.text:004073AF loc_4073AF:                             ; CODE XREF: sub_406A70+1B9↑j
.text:004073AF                                         ; DATA XREF: sub_406A70:jpt_406C29↑o
.text:004073AF                 mov     [esp+13Ch+var_84], ebx ; jumptable 00406C29 cases 77,109
.text:004073B6                 mov     eax, ebx
.text:004073B8                 xor     ebp, ebp
.text:004073BA                 mov     [esp+13Ch+var_78], ebp
.text:004073C1                 sar     eax, 1Fh
.text:004073C4                 mov     edx, [esp+13Ch+var_84]
.text:004073CB                 mov     [esp+13Ch+var_80], eax
.text:004073D2                 lea     esi, [esp+13Ch+var_24]
.text:004073D9                 mov     ebp, 1
.text:004073DE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004073E5                 mov     ecx, [esp+13Ch+var_80]
.text:004073EC                 mov     [esp+13Ch+Radix], edx
.text:004073F0                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004073F8                 mov     [esp+13Ch+var_130], ecx
.text:004073FC                 call    sub_4118B0
.text:00407401                 mov     [esp+13Ch+var_8C], eax
.text:00407408                 mov     [esp+13Ch+var_88], edx
.text:0040740F
.text:0040740F loc_40740F:                             ; CODE XREF: sub_406A70+9F1↓j
.text:0040740F                 mov     ebx, [esi+4]
.text:00407412                 mov     edx, [esi]
.text:00407414                 cmp     [esp+13Ch+var_88], ebx
.text:0040741B                 mov     [esp+13Ch+var_90], ebx
.text:00407422                 mov     [esp+13Ch+var_94], edx
.text:00407429                 ja      short loc_40746F
.text:0040742B                 mov     eax, [esp+13Ch+var_90]
.text:00407432                 cmp     [esp+13Ch+var_88], eax
.text:00407439                 jb      short loc_407444
.text:0040743B                 cmp     [esp+13Ch+var_8C], edx
.text:00407442                 jnb     short loc_40746F
.text:00407444
.text:00407444 loc_407444:                             ; CODE XREF: sub_406A70+9C9↑j
.text:00407444                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040744A                 mov     eax, 1
.text:0040744F                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00407456
.text:00407456 loc_407456:                             ; CODE XREF: sub_406A70+A4C↓j
.text:00407456                 or      [esp+13Ch+var_78], eax
.text:0040745D                 dec     ebp
.text:0040745E                 cmp     ebp, 0FFFFFFFFh
.text:00407461                 jnz     short loc_40740F
.text:00407463                 mov     eax, [esp+13Ch+var_78]
.text:0040746A                 jmp     loc_406D6A
.text:0040746F ; ---------------------------------------------------------------------------
.text:0040746F
.text:0040746F loc_40746F:                             ; CODE XREF: sub_406A70+9B9↑j
.text:0040746F                                         ; sub_406A70+9D2↑j
.text:0040746F                 mov     ecx, [esp+13Ch+var_80]
.text:00407476                 mov     eax, [esp+13Ch+var_94]
.text:0040747D                 mov     ebx, [esp+13Ch+var_94]
.text:00407484                 mul     [esp+13Ch+var_84]
.text:0040748B                 imul    ebx, ecx
.text:0040748E                 mov     ecx, edx
.text:00407490                 mov     [esp+13Ch+var_124], eax
.text:00407494                 add     ecx, ebx
.text:00407496                 mov     edx, [esp+13Ch+var_84]
.text:0040749D                 mov     ebx, [esp+13Ch+var_90]
.text:004074A4                 xor     eax, eax
.text:004074A6                 imul    edx, ebx
.text:004074A9                 add     ecx, edx
.text:004074AB                 mov     [esp+13Ch+var_120], ecx
.text:004074AF                 mov     ebx, [esp+13Ch+var_120]
.text:004074B3                 mov     ecx, [esp+13Ch+var_124]
.text:004074B7                 mov     [esi+4], ebx
.text:004074BA                 mov     [esi], ecx
.text:004074BC                 jmp     short loc_407456
.text:004074BE ; ---------------------------------------------------------------------------
.text:004074BE
.text:004074BE loc_4074BE:                             ; CODE XREF: sub_406A70+1B9↑j
.text:004074BE                                         ; DATA XREF: sub_406A70:jpt_406C29↑o
.text:004074BE                 mov     [esp+13Ch+var_C4], ebx ; jumptable 00406C29 cases 84,116
.text:004074C2                 mov     eax, ebx
.text:004074C4                 xor     ebp, ebp
.text:004074C6                 mov     [esp+13Ch+var_B8], ebp
.text:004074CD                 sar     eax, 1Fh
.text:004074D0                 mov     edx, [esp+13Ch+var_C4]
.text:004074D4                 mov     [esp+13Ch+var_C0], eax
.text:004074D8                 lea     esi, [esp+13Ch+var_24]
.text:004074DF                 mov     ebp, 3
.text:004074E4                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004074EB                 mov     ebx, [esp+13Ch+var_C0]
.text:004074EF                 mov     [esp+13Ch+Radix], edx
.text:004074F3                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004074FB                 mov     [esp+13Ch+var_130], ebx
.text:004074FF                 call    sub_4118B0
.text:00407504                 mov     [esp+13Ch+var_CC], eax
.text:00407508                 mov     [esp+13Ch+var_C8], edx
.text:0040750C
.text:0040750C loc_40750C:                             ; CODE XREF: sub_406A70+ADC↓j
.text:0040750C                 mov     ebx, [esi+4]
.text:0040750F                 mov     edx, [esi]
.text:00407511                 cmp     [esp+13Ch+var_C8], ebx
.text:00407515                 mov     [esp+13Ch+var_D0], ebx
.text:00407519                 mov     [esp+13Ch+var_D4], edx
.text:0040751D                 ja      short loc_40755A
.text:0040751F                 mov     eax, [esp+13Ch+var_D0]
.text:00407523                 cmp     [esp+13Ch+var_C8], eax
.text:00407527                 jb      short loc_40752F
.text:00407529                 cmp     [esp+13Ch+var_CC], edx
.text:0040752D                 jnb     short loc_40755A
.text:0040752F
.text:0040752F loc_40752F:                             ; CODE XREF: sub_406A70+AB7↑j
.text:0040752F                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00407535                 mov     eax, 1
.text:0040753A                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00407541
.text:00407541 loc_407541:                             ; CODE XREF: sub_406A70+B25↓j
.text:00407541                 or      [esp+13Ch+var_B8], eax
.text:00407548                 dec     ebp
.text:00407549                 cmp     ebp, 0FFFFFFFFh
.text:0040754C                 jnz     short loc_40750C
.text:0040754E                 mov     eax, [esp+13Ch+var_B8]
.text:00407555                 jmp     loc_406D6A
.text:0040755A ; ---------------------------------------------------------------------------
.text:0040755A
.text:0040755A loc_40755A:                             ; CODE XREF: sub_406A70+AAD↑j
.text:0040755A                                         ; sub_406A70+ABD↑j
.text:0040755A                 mov     ecx, [esp+13Ch+var_C0]
.text:0040755E                 mov     eax, [esp+13Ch+var_D4]
.text:00407562                 mov     ebx, [esp+13Ch+var_D4]
.text:00407566                 mul     [esp+13Ch+var_C4]
.text:0040756A                 imul    ebx, ecx
.text:0040756D                 mov     ecx, edx
.text:0040756F                 mov     [esp+13Ch+var_124], eax
.text:00407573                 add     ecx, ebx
.text:00407575                 mov     edx, [esp+13Ch+var_C4]
.text:00407579                 mov     ebx, [esp+13Ch+var_D0]
.text:0040757D                 xor     eax, eax
.text:0040757F                 imul    edx, ebx
.text:00407582                 add     ecx, edx
.text:00407584                 mov     [esp+13Ch+var_120], ecx
.text:00407588                 mov     ebx, [esp+13Ch+var_120]
.text:0040758C                 mov     ecx, [esp+13Ch+var_124]
.text:00407590                 mov     [esi+4], ebx
.text:00407593                 mov     [esi], ecx
.text:00407595                 jmp     short loc_407541
.text:00407597 ; ---------------------------------------------------------------------------
.text:00407597
.text:00407597 loc_407597:                             ; CODE XREF: sub_406A70+1B9↑j
.text:00407597                                         ; DATA XREF: sub_406A70:jpt_406C29↑o
.text:00407597                 mov     [esp+13Ch+Radix], 2 ; jumptable 00406C29 case 119
.text:0040759F                 lea     ebp, [esp+13Ch+var_24]
.text:004075A6                 mov     [esp+13Ch+var_130], 0
.text:004075AE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004075B5                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004075BD                 call    sub_4118B0
.text:004075C2                 mov     esi, [esp+13Ch+var_20]
.text:004075C9                 mov     ecx, [esp+13Ch+var_24]
.text:004075D0                 cmp     edx, esi
.text:004075D2                 ja      short loc_4075E2
.text:004075D4                 jb      loc_406D95
.text:004075DA                 cmp     eax, ecx
.text:004075DC                 jb      loc_406D95
.text:004075E2
.text:004075E2 loc_4075E2:                             ; CODE XREF: sub_406A70+B62↑j
.text:004075E2                 mov     esi, [ebp+0]
.text:004075E5                 mov     eax, 2
.text:004075EA                 mov     ecx, [ebp+4]
.text:004075ED                 mul     esi
.text:004075EF                 lea     edx, [edx+ecx*2]
.text:004075F2                 jmp     loc_406D62
.text:004075F7 ; ---------------------------------------------------------------------------
.text:004075F7
.text:004075F7 loc_4075F7:                             ; CODE XREF: sub_406A70+196↑j
.text:004075F7                                         ; sub_406A70+1A8↑j
.text:004075F7                 mov     esi, 2
.text:004075FC                 mov     ebx, 3E8h
.text:00407601                 mov     [esp+13Ch+var_30], esi
.text:00407608                 jmp     loc_406C1E
.text:0040760D ; ---------------------------------------------------------------------------
.text:0040760D
.text:0040760D loc_40760D:                             ; CODE XREF: sub_406A70+19F↑j
.text:0040760D                 cmp     eax, 69h ; 'i'
.text:00407610                 jnz     loc_406C1E
.text:00407616                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040761A                 jnz     loc_406C1E
.text:00407620                 mov     eax, 3
.text:00407625                 mov     [esp+13Ch+var_30], eax
.text:0040762C                 jmp     loc_406C1E
.text:00407631 ; ---------------------------------------------------------------------------
.text:00407631
.text:00407631 loc_407631:                             ; CODE XREF: sub_406A70+187↑j
.text:00407631                 mov     edx, [edi]
.text:00407633                 jmp     loc_406C1E
.text:00407638 ; ---------------------------------------------------------------------------
.text:00407638
.text:00407638 loc_407638:                             ; CODE XREF: sub_406A70+E2↑j
.text:00407638                 mov     edx, [esp+13Ch+var_24]
.text:0040763F                 mov     ecx, [esp+13Ch+var_20]
.text:00407646                 mov     edi, [esp+13Ch+arg_C]
.text:0040764D                 mov     [edi], edx
.text:0040764F                 mov     [edi+4], ecx
.text:00407652                 jmp     loc_406B7B
.text:00407657 ; ---------------------------------------------------------------------------
.text:00407657
.text:00407657 loc_407657:                             ; CODE XREF: sub_406A70+D3↑j
.text:00407657                 call    _errno
.text:0040765C                 cmp     dword ptr [eax], 22h ; '"'
.text:0040765F                 jnz     short loc_407672
.text:00407661                 mov     esi, 1
.text:00407666                 mov     [esp+13Ch+var_28], esi
.text:0040766D                 jmp     loc_406B49
.text:00407672 ; ---------------------------------------------------------------------------
.text:00407672
.text:00407672 loc_407672:                             ; CODE XREF: sub_406A70+BEF↑j
.text:00407672                                         ; sub_406A70+C15↓j ...
.text:00407672                 mov     eax, 4
.text:00407677                 jmp     loc_406B82
.text:0040767C ; ---------------------------------------------------------------------------
.text:0040767C
.text:0040767C loc_40767C:                             ; CODE XREF: sub_406A70+C4↑j
.text:0040767C                 mov     ebx, [esp+13Ch+Str]
.text:00407683                 test    ebx, ebx
.text:00407685                 jz      short loc_407672
.text:00407687                 movzx   eax, byte ptr [eax]
.text:0040768A                 test    al, al
.text:0040768C                 jz      short loc_407672
.text:0040768E                 mov     esi, [esp+13Ch+Str]
.text:00407695                 movsx   ebp, al
.text:00407698                 mov     [esp+13Ch+Type], ebp ; Val
.text:0040769C                 mov     [esp+13Ch+C], esi ; Str
.text:0040769F                 call    strchr
.text:004076A4                 test    eax, eax
.text:004076A6                 jz      short loc_407672
.text:004076A8                 mov     ecx, 1
.text:004076AD                 xor     edx, edx
.text:004076AF                 mov     [esp+13Ch+var_24], ecx
.text:004076B6                 mov     [esp+13Ch+var_20], edx
.text:004076BD                 jmp     loc_406B49
.text:004076C2 ; ---------------------------------------------------------------------------
.text:004076C2
.text:004076C2 loc_4076C2:                             ; CODE XREF: sub_406A70+61↑j
.text:004076C2                 mov     eax, ds:_pctype
.text:004076C7                 mov     ecx, [eax]
.text:004076C9                 movzx   eax, word ptr [ecx+edx*2]
.text:004076CD                 and     eax, 8
.text:004076D0                 jmp     loc_406AE7
.text:004076D5 ; ---------------------------------------------------------------------------
.text:004076D5
.text:004076D5 loc_4076D5:                             ; CODE XREF: sub_406A70+33↑j
.text:004076D5                 lea     edi, [esp+13Ch+var_18]
.text:004076DC                 jmp     loc_406AA9
.text:004076E1 ; ---------------------------------------------------------------------------
.text:004076E1
.text:004076E1 loc_4076E1:                             ; CODE XREF: sub_406A70+24↑j
.text:004076E1                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:004076E9                 mov     [esp+13Ch+Type], offset loc_406A00
.text:004076F1                 mov     [esp+13Ch+C], offset loc_406A40
.text:004076F8                 call    _assert
.text:004076F8 sub_406A70      endp
.text:004076F8
.text:004076F8 ; ---------------------------------------------------------------------------
.text:004076FD                 align 10h
.text:00407700
.text:00407700 ; =============== S U B R O U T I N E =======================================
.text:00407700
.text:00407700
.text:00407700 ; int __cdecl sub_407700(char *, int, int, int)
.text:00407700 sub_407700      proc near               ; CODE XREF: sub_406430+45↑p
.text:00407700                                         ; .text:00407A52↓p
.text:00407700
.text:00407700 Str             = dword ptr -2Ch
.text:00407700 Str2            = dword ptr -28h
.text:00407700 MaxCount        = dword ptr -24h
.text:00407700 var_20          = dword ptr -20h
.text:00407700 var_19          = byte ptr -19h
.text:00407700 var_18          = dword ptr -18h
.text:00407700 var_14          = dword ptr -14h
.text:00407700 arg_0           = dword ptr  4
.text:00407700 arg_4           = dword ptr  8
.text:00407700 arg_8           = dword ptr  0Ch
.text:00407700 arg_C           = dword ptr  10h
.text:00407700
.text:00407700                 push    ebp
.text:00407701                 push    edi
.text:00407702                 push    esi
.text:00407703                 push    ebx
.text:00407704                 sub     esp, 1Ch
.text:00407707                 xor     ebx, ebx
.text:00407709                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00407711                 mov     edx, [esp+2Ch+arg_0]
.text:00407715                 mov     ebp, [esp+2Ch+arg_C]
.text:00407719                 mov     [esp+2Ch+var_19], 0
.text:0040771E                 mov     [esp+2Ch+Str], edx ; Str
.text:00407721                 call    strlen
.text:00407726                 mov     [esp+2Ch+var_14], eax
.text:0040772A                 mov     ecx, [esp+2Ch+arg_4]
.text:0040772E                 mov     eax, [ecx]
.text:00407730                 test    eax, eax
.text:00407732                 jz      short loc_407778
.text:00407734                 mov     [esp+2Ch+var_20], 0
.text:0040773C                 lea     esi, [esi+0]
.text:00407740
.text:00407740 loc_407740:                             ; CODE XREF: sub_407700+6A↓j
.text:00407740                 mov     [esp+2Ch+Str], eax ; Str1
.text:00407743                 mov     esi, [esp+2Ch+var_14]
.text:00407747                 mov     ecx, [esp+2Ch+arg_0]
.text:0040774B                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:0040774F                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:00407753                 call    strncmp
.text:00407758                 test    eax, eax
.text:0040775A                 jz      short loc_407786
.text:0040775C
.text:0040775C loc_40775C:                             ; CODE XREF: sub_407700+CA↓j
.text:0040775C                                         ; sub_407700+D1↓j ...
.text:0040775C                 add     [esp+2Ch+var_20], ebp
.text:00407760                 inc     ebx
.text:00407761                 mov     esi, [esp+2Ch+arg_4]
.text:00407765                 mov     eax, [esi+ebx*4]
.text:00407768                 test    eax, eax
.text:0040776A                 jnz     short loc_407740
.text:0040776C                 cmp     [esp+2Ch+var_19], 0
.text:00407771                 mov     edx, 0FFFFFFFEh
.text:00407776                 jnz     short loc_40777C
.text:00407778
.text:00407778 loc_407778:                             ; CODE XREF: sub_407700+32↑j
.text:00407778                 mov     edx, [esp+2Ch+var_18]
.text:0040777C
.text:0040777C loc_40777C:                             ; CODE XREF: sub_407700+76↑j
.text:0040777C                                         ; sub_407700+9B↓j
.text:0040777C                 add     esp, 1Ch
.text:0040777F                 mov     eax, edx
.text:00407781                 pop     ebx
.text:00407782                 pop     esi
.text:00407783                 pop     edi
.text:00407784                 pop     ebp
.text:00407785                 retn
.text:00407786 ; ---------------------------------------------------------------------------
.text:00407786
.text:00407786 loc_407786:                             ; CODE XREF: sub_407700+5A↑j
.text:00407786                 mov     eax, [esp+2Ch+arg_4]
.text:0040778A                 mov     edi, [eax+ebx*4]
.text:0040778D                 mov     [esp+2Ch+Str], edi ; Str
.text:00407790                 call    strlen
.text:00407795                 cmp     eax, [esp+2Ch+var_14]
.text:00407799                 mov     edx, ebx
.text:0040779B                 jz      short loc_40777C
.text:0040779D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:004077A2                 jz      short loc_4077D3
.text:004077A4                 mov     ecx, [esp+2Ch+arg_8]
.text:004077A8                 test    ecx, ecx
.text:004077AA                 jz      short loc_4077CC
.text:004077AC                 cld
.text:004077AD                 mov     edi, [esp+2Ch+var_18]
.text:004077B1                 mov     ecx, ebp
.text:004077B3                 mov     esi, [esp+2Ch+arg_8]
.text:004077B7                 mov     edx, [esp+2Ch+var_20]
.text:004077BB                 imul    edi, ebp
.text:004077BE                 add     esi, edi
.text:004077C0                 mov     edi, [esp+2Ch+arg_8]
.text:004077C4                 add     edi, edx
.text:004077C6                 cmp     ebp, ebp
.text:004077C8                 repe cmpsb
.text:004077CA                 jz      short loc_40775C
.text:004077CC
.text:004077CC loc_4077CC:                             ; CODE XREF: sub_407700+AA↑j
.text:004077CC                 mov     [esp+2Ch+var_19], 1
.text:004077D1                 jmp     short loc_40775C
.text:004077D3 ; ---------------------------------------------------------------------------
.text:004077D3
.text:004077D3 loc_4077D3:                             ; CODE XREF: sub_407700+A2↑j
.text:004077D3                 mov     [esp+2Ch+var_18], ebx
.text:004077D7                 jmp     short loc_40775C
.text:004077D7 sub_407700      endp
.text:004077D7
.text:004077D7 ; ---------------------------------------------------------------------------
.text:004077D9 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:004077D9                                         ; DATA XREF: .text:00407832↓o
.text:004077D9                                         ; .text:00407A7A↓o
.text:004077F6 aInvalidArgumen db 'invalid argument %s for %s',0
.text:004077F6                                         ; DATA XREF: .text:loc_4078A0↓o
.text:004077F6                                         ; .text:loc_407C16↓o
.text:00407811 ; ---------------------------------------------------------------------------
.text:00407811                 jmp     short loc_407820
.text:00407811 ; ---------------------------------------------------------------------------
.text:00407813                 align 10h
.text:00407820
.text:00407820 loc_407820:                             ; CODE XREF: .text:00407811↑j
.text:00407820                 sub     esp, 1Ch
.text:00407823                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:00407828                 mov     [esp+14h], ebx
.text:0040782C                 mov     [esp+18h], esi
.text:00407830                 jz      short loc_4078A0
.text:00407832                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00407839
.text:00407839 loc_407839:                             ; CODE XREF: .text:004078A7↓j
.text:00407839                 call    ds:libintl_gettext
.text:0040783F                 mov     dword ptr [esp], 1
.text:00407846                 mov     edx, [esp+20h]
.text:0040784A                 mov     esi, eax
.text:0040784C                 mov     [esp+4], edx
.text:00407850                 call    sub_4068D0
.text:00407855                 mov     dword ptr [esp+4], 5
.text:0040785D                 mov     edx, [esp+24h]
.text:00407861                 mov     ebx, eax
.text:00407863                 mov     dword ptr [esp], 0
.text:0040786A                 mov     [esp+8], edx
.text:0040786E                 call    sub_408A70
.text:00407873                 mov     [esp+0Ch], eax
.text:00407877                 mov     [esp+10h], ebx
.text:0040787B                 mov     [esp+8], esi
.text:0040787F                 mov     dword ptr [esp+4], 0
.text:00407887                 mov     dword ptr [esp], 0
.text:0040788E                 call    sub_409A70
.text:00407893                 mov     ebx, [esp+14h]
.text:00407897                 mov     esi, [esp+18h]
.text:0040789B                 add     esp, 1Ch
.text:0040789E                 retn
.text:0040789E ; ---------------------------------------------------------------------------
.text:0040789F                 align 10h
.text:004078A0
.text:004078A0 loc_4078A0:                             ; CODE XREF: .text:00407830↑j
.text:004078A0                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:004078A7                 jmp     short loc_407839
.text:004078A7 ; ---------------------------------------------------------------------------
.text:004078A9 aValidArguments db 'Valid arguments are:',0
.text:004078A9                                         ; DATA XREF: .text:004078F3↓o
.text:004078A9                                         ; .text:00407AEB↓o
.text:004078BE ; ---------------------------------------------------------------------------
.text:004078BE
.text:004078BE loc_4078BE:                             ; DATA XREF: .text:0040796D↓o
.text:004078BE                                         ; .text:loc_407B58↓o
.text:004078BE                 or      ah, [eax]
.text:004078C0                 and     ds:73256020h, ch
.text:004078C6                 daa
.text:004078C7                 add     [eax], ch
.text:004078CA                 pusha
.text:004078CB                 and     eax, 90002773h
.text:004078D0                 push    ebp
.text:004078D1                 push    edi
.text:004078D2                 push    esi
.text:004078D3                 push    ebx
.text:004078D4                 sub     esp, 2Ch
.text:004078D7                 mov     ecx, [esp+40h]
.text:004078DB                 mov     dword ptr [esp+1Ch], 0
.text:004078E3                 mov     eax, [esp+44h]
.text:004078E7                 mov     ebp, [esp+48h]
.text:004078EB                 mov     [esp+28h], ecx
.text:004078EF                 mov     [esp+24h], eax
.text:004078F3                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:004078FA                 call    ds:libintl_gettext
.text:00407900                 mov     edx, ds:_iob
.text:00407906                 add     edx, 40h ; '@'
.text:00407909                 mov     [esp], edx
.text:0040790C                 mov     [esp+4], eax
.text:00407910                 call    fprintf
.text:00407915                 mov     dword ptr [esp+20h], 0
.text:0040791D                 mov     edx, [esp+28h]
.text:00407921                 mov     eax, [edx]
.text:00407923                 test    eax, eax
.text:00407925                 jz      short loc_4079A5
.text:00407927                 mov     dword ptr [esp+14h], 0
.text:0040792F                 mov     esi, [esp+24h]
.text:00407933                 mov     ebx, eax
.text:00407935                 mov     [esp+18h], esi
.text:00407939                 lea     esi, [esi+0]
.text:00407940
.text:00407940 loc_407940:                             ; CODE XREF: .text:004079A3↓j
.text:00407940                 mov     edi, [esp+20h]
.text:00407944                 test    edi, edi
.text:00407946                 jz      short loc_407963
.text:00407948                 cld
.text:00407949                 mov     edi, [esp+24h]
.text:0040794D                 mov     ecx, ebp
.text:0040794F                 mov     edx, [esp+14h]
.text:00407953                 mov     esi, [esp+1Ch]
.text:00407957                 add     edi, edx
.text:00407959                 cmp     ebp, ebp
.text:0040795B                 repe cmpsb
.text:0040795D                 jz      loc_4079F0
.text:00407963
.text:00407963 loc_407963:                             ; CODE XREF: .text:00407946↑j
.text:00407963                 mov     [esp+8], ebx
.text:00407967                 mov     ecx, ds:_iob
.text:0040796D                 mov     dword ptr [esp+4], offset loc_4078BE
.text:00407975                 add     ecx, 40h ; '@'
.text:00407978                 mov     [esp], ecx
.text:0040797B                 call    fprintf
.text:00407980                 mov     ebx, [esp+18h]
.text:00407984                 mov     [esp+1Ch], ebx
.text:00407988
.text:00407988 loc_407988:                             ; CODE XREF: .text:00407A0D↓j
.text:00407988                 inc     dword ptr [esp+20h]
.text:0040798C                 mov     eax, [esp+28h]
.text:00407990                 add     [esp+14h], ebp
.text:00407994                 mov     edx, [esp+20h]
.text:00407998                 add     [esp+18h], ebp
.text:0040799C                 mov     edi, [eax+edx*4]
.text:0040799F                 test    edi, edi
.text:004079A1                 mov     ebx, edi
.text:004079A3                 jnz     short loc_407940
.text:004079A5
.text:004079A5 loc_4079A5:                             ; CODE XREF: .text:00407925↑j
.text:004079A5                 mov     ebx, ds:_iob
.text:004079AB                 mov     ebp, [ebx+44h]
.text:004079AE                 dec     ebp
.text:004079AF                 mov     [ebx+44h], ebp
.text:004079B2                 test    ebp, ebp
.text:004079B4                 js      short loc_4079CD
.text:004079B6                 mov     ecx, ds:_iob
.text:004079BC                 mov     esi, [ecx+40h]
.text:004079BF                 mov     byte ptr [esi], 0Ah
.text:004079C2                 inc     dword ptr [ecx+40h]
.text:004079C5                 add     esp, 2Ch
.text:004079C8                 pop     ebx
.text:004079C9                 pop     esi
.text:004079CA                 pop     edi
.text:004079CB                 pop     ebp
.text:004079CC                 retn
.text:004079CD ; ---------------------------------------------------------------------------
.text:004079CD
.text:004079CD loc_4079CD:                             ; CODE XREF: .text:004079B4↑j
.text:004079CD                 mov     dword ptr [esp+40h], 0Ah
.text:004079D5                 mov     edi, ds:_iob
.text:004079DB                 add     edi, 40h ; '@'
.text:004079DE                 mov     [esp+44h], edi
.text:004079E2                 add     esp, 2Ch
.text:004079E5                 pop     ebx
.text:004079E6                 pop     esi
.text:004079E7                 pop     edi
.text:004079E8                 pop     ebp
.text:004079E9                 jmp     _flsbuf
.text:004079E9 ; ---------------------------------------------------------------------------
.text:004079EE                 align 10h
.text:004079F0
.text:004079F0 loc_4079F0:                             ; CODE XREF: .text:0040795D↑j
.text:004079F0                 mov     [esp+8], ebx
.text:004079F4                 mov     esi, ds:_iob
.text:004079FA                 mov     dword ptr [esp+4], 4078C8h
.text:00407A02                 add     esi, 40h ; '@'
.text:00407A05                 mov     [esp], esi
.text:00407A08                 call    fprintf
.text:00407A0D                 jmp     loc_407988
.text:00407A0D ; ---------------------------------------------------------------------------
.text:00407A12                 align 10h
.text:00407A20                 sub     esp, 4Ch
.text:00407A23                 mov     edx, [esp+60h]
.text:00407A27                 mov     [esp+3Ch], ebx
.text:00407A2B                 mov     ebx, [esp+5Ch]
.text:00407A2F                 mov     [esp+40h], esi
.text:00407A33                 mov     esi, [esp+54h]
.text:00407A37                 mov     [esp+48h], ebp
.text:00407A3B                 mov     ebp, [esp+58h]
.text:00407A3F                 mov     [esp+0Ch], edx
.text:00407A43                 mov     [esp+44h], edi
.text:00407A47                 mov     [esp+8], ebx
.text:00407A4B                 mov     [esp+4], ebp
.text:00407A4F                 mov     [esp], esi
.text:00407A52                 call    sub_407700
.text:00407A57                 test    eax, eax
.text:00407A59                 mov     edx, eax
.text:00407A5B                 js      short loc_407A73
.text:00407A5D
.text:00407A5D loc_407A5D:                             ; CODE XREF: .text:00407BCA↓j
.text:00407A5D                 mov     ebx, [esp+3Ch]
.text:00407A61                 mov     eax, edx
.text:00407A63                 mov     esi, [esp+40h]
.text:00407A67                 mov     edi, [esp+44h]
.text:00407A6B                 mov     ebp, [esp+48h]
.text:00407A6F                 add     esp, 4Ch
.text:00407A72                 retn
.text:00407A73 ; ---------------------------------------------------------------------------
.text:00407A73
.text:00407A73 loc_407A73:                             ; CODE XREF: .text:00407A5B↑j
.text:00407A73                 inc     eax
.text:00407A74                 jz      loc_407C16
.text:00407A7A                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00407A81
.text:00407A81 loc_407A81:                             ; CODE XREF: .text:00407C1D↓j
.text:00407A81                 call    ds:libintl_gettext
.text:00407A87                 mov     dword ptr [esp], 1
.text:00407A8E                 mov     edi, [esp+50h]
.text:00407A92                 mov     [esp+38h], eax
.text:00407A96                 mov     [esp+4], edi
.text:00407A9A                 call    sub_4068D0
.text:00407A9F                 mov     [esp+34h], eax
.text:00407AA3                 mov     [esp+8], esi
.text:00407AA7                 mov     dword ptr [esp+4], 5
.text:00407AAF                 mov     dword ptr [esp], 0
.text:00407AB6                 call    sub_408A70
.text:00407ABB                 mov     [esp+0Ch], eax
.text:00407ABF                 mov     ecx, [esp+34h]
.text:00407AC3                 mov     eax, [esp+38h]
.text:00407AC7                 mov     dword ptr [esp+4], 0
.text:00407ACF                 mov     [esp+10h], ecx
.text:00407AD3                 mov     [esp+8], eax
.text:00407AD7                 mov     dword ptr [esp], 0
.text:00407ADE                 call    sub_409A70
.text:00407AE3                 mov     dword ptr [esp+2Ch], 0
.text:00407AEB                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:00407AF2                 call    ds:libintl_gettext
.text:00407AF8                 mov     edx, ds:_iob
.text:00407AFE                 add     edx, 40h ; '@'
.text:00407B01                 mov     [esp+4], eax
.text:00407B05                 mov     [esp], edx
.text:00407B08                 call    fprintf
.text:00407B0D                 mov     dword ptr [esp+30h], 0
.text:00407B15                 mov     eax, [ebp+0]
.text:00407B18                 test    eax, eax
.text:00407B1A                 jz      loc_407BA1
.text:00407B20                 mov     [esp+28h], eax
.text:00407B24                 mov     [esp+24h], ebx
.text:00407B28                 mov     dword ptr [esp+20h], 0
.text:00407B30
.text:00407B30 loc_407B30:                             ; CODE XREF: .text:00407B9F↓j
.text:00407B30                 mov     esi, [esp+30h]
.text:00407B34                 test    esi, esi
.text:00407B36                 jz      short loc_407B58
.text:00407B38                 cld
.text:00407B39                 mov     eax, [esp+20h]
.text:00407B3D                 mov     edx, [esp+60h]
.text:00407B41                 mov     esi, [esp+2Ch]
.text:00407B45                 lea     ecx, [eax+ebx]
.text:00407B48                 mov     edi, ecx
.text:00407B4A                 mov     ecx, [esp+60h]
.text:00407B4E                 cmp     edx, edx
.text:00407B50                 repe cmpsb
.text:00407B52                 jz      loc_407BF0
.text:00407B58
.text:00407B58 loc_407B58:                             ; CODE XREF: .text:00407B36↑j
.text:00407B58                 mov     dword ptr [esp+4], offset loc_4078BE
.text:00407B60                 mov     esi, ds:_iob
.text:00407B66                 mov     ecx, [esp+28h]
.text:00407B6A                 add     esi, 40h ; '@'
.text:00407B6D                 mov     [esp+8], ecx
.text:00407B71                 mov     [esp], esi
.text:00407B74                 call    fprintf
.text:00407B79                 mov     edi, [esp+24h]
.text:00407B7D                 mov     [esp+2Ch], edi
.text:00407B81
.text:00407B81 loc_407B81:                             ; CODE XREF: .text:00407C11↓j
.text:00407B81                 inc     dword ptr [esp+30h]
.text:00407B85                 mov     ecx, [esp+60h]
.text:00407B89                 add     [esp+20h], ecx
.text:00407B8D                 mov     esi, [esp+30h]
.text:00407B91                 add     [esp+24h], ecx
.text:00407B95                 mov     edi, [ebp+esi*4+0]
.text:00407B99                 test    edi, edi
.text:00407B9B                 mov     [esp+28h], edi
.text:00407B9F                 jnz     short loc_407B30
.text:00407BA1
.text:00407BA1 loc_407BA1:                             ; CODE XREF: .text:00407B1A↑j
.text:00407BA1                 mov     ebp, ds:_iob
.text:00407BA7                 mov     ebx, [ebp+44h]
.text:00407BAA                 dec     ebx
.text:00407BAB                 mov     [ebp+44h], ebx
.text:00407BAE                 test    ebx, ebx
.text:00407BB0                 js      short loc_407BCF
.text:00407BB2                 mov     edi, ds:_iob
.text:00407BB8                 mov     eax, [edi+40h]
.text:00407BBB                 mov     byte ptr [eax], 0Ah
.text:00407BBE                 inc     dword ptr [edi+40h]
.text:00407BC1
.text:00407BC1 loc_407BC1:                             ; CODE XREF: .text:00407BE8↓j
.text:00407BC1                 call    dword ptr [esp+64h]
.text:00407BC5                 mov     edx, 0FFFFFFFFh
.text:00407BCA                 jmp     loc_407A5D
.text:00407BCF ; ---------------------------------------------------------------------------
.text:00407BCF
.text:00407BCF loc_407BCF:                             ; CODE XREF: .text:00407BB0↑j
.text:00407BCF                 mov     dword ptr [esp], 0Ah
.text:00407BD6                 mov     edx, ds:_iob
.text:00407BDC                 add     edx, 40h ; '@'
.text:00407BDF                 mov     [esp+4], edx
.text:00407BE3                 call    _flsbuf
.text:00407BE8                 jmp     short loc_407BC1
.text:00407BE8 ; ---------------------------------------------------------------------------
.text:00407BEA                 align 10h
.text:00407BF0
.text:00407BF0 loc_407BF0:                             ; CODE XREF: .text:00407B52↑j
.text:00407BF0                 mov     dword ptr [esp+4], 4078C8h
.text:00407BF8                 mov     edx, ds:_iob
.text:00407BFE                 mov     eax, [esp+28h]
.text:00407C02                 add     edx, 40h ; '@'
.text:00407C05                 mov     [esp+8], eax
.text:00407C09                 mov     [esp], edx
.text:00407C0C                 call    fprintf
.text:00407C11                 jmp     loc_407B81
.text:00407C16 ; ---------------------------------------------------------------------------
.text:00407C16
.text:00407C16 loc_407C16:                             ; CODE XREF: .text:00407A74↑j
.text:00407C16                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00407C1D                 jmp     loc_407A81
.text:00407C1D ; ---------------------------------------------------------------------------
.text:00407C22                 align 10h
.text:00407C30                 push    ebp
.text:00407C31                 push    edi
.text:00407C32                 push    esi
.text:00407C33                 push    ebx
.text:00407C34                 sub     esp, 4
.text:00407C37                 mov     ecx, [esp+1Ch]
.text:00407C3B                 mov     dword ptr [esp], 0
.text:00407C42                 mov     ebx, [esp+24h]
.text:00407C46                 mov     edx, [ecx]
.text:00407C48                 test    edx, edx
.text:00407C4A                 jz      short loc_407C75
.text:00407C4C                 cld
.text:00407C4D                 xor     ebp, ebp
.text:00407C4F                 nop
.text:00407C50
.text:00407C50 loc_407C50:                             ; CODE XREF: .text:00407C73↓j
.text:00407C50                 mov     edi, [esp+20h]
.text:00407C54                 mov     ecx, ebx
.text:00407C56                 mov     esi, [esp+18h]
.text:00407C5A                 add     edi, ebp
.text:00407C5C                 cmp     ebx, ebx
.text:00407C5E                 repe cmpsb
.text:00407C60                 jz      short loc_407C7D
.text:00407C62                 inc     dword ptr [esp]
.text:00407C65                 add     ebp, ebx
.text:00407C67                 mov     eax, [esp+1Ch]
.text:00407C6B                 mov     ecx, [esp]
.text:00407C6E                 mov     edi, [eax+ecx*4]
.text:00407C71                 test    edi, edi
.text:00407C73                 jnz     short loc_407C50
.text:00407C75
.text:00407C75 loc_407C75:                             ; CODE XREF: .text:00407C4A↑j
.text:00407C75                 xor     eax, eax
.text:00407C77
.text:00407C77 loc_407C77:                             ; CODE XREF: .text:00407C87↓j
.text:00407C77                 pop     ebp
.text:00407C78                 pop     ebx
.text:00407C79                 pop     esi
.text:00407C7A                 pop     edi
.text:00407C7B                 pop     ebp
.text:00407C7C                 retn
.text:00407C7D ; ---------------------------------------------------------------------------
.text:00407C7D
.text:00407C7D loc_407C7D:                             ; CODE XREF: .text:00407C60↑j
.text:00407C7D                 mov     esi, [esp]
.text:00407C80                 mov     ebx, [esp+1Ch]
.text:00407C84                 mov     eax, [ebx+esi*4]
.text:00407C87                 jmp     short loc_407C77
.text:00407C87 ; ---------------------------------------------------------------------------
.text:00407C89                 align 10h
.text:00407C90
.text:00407C90 ; =============== S U B R O U T I N E =======================================
.text:00407C90
.text:00407C90 ; Attributes: noreturn
.text:00407C90
.text:00407C90 sub_407C90      proc near               ; DATA XREF: .data:00413040↓o
.text:00407C90
.text:00407C90 Code            = dword ptr -0Ch
.text:00407C90
.text:00407C90                 sub     esp, 0Ch
.text:00407C93                 mov     [esp+0Ch+Code], 1 ; Code
.text:00407C9A                 call    sub_4023B0
.text:00407C9A sub_407C90      endp
.text:00407C9A
.text:00407C9A ; ---------------------------------------------------------------------------
.text:00407C9F                 db  83h ; ƒ
.text:00407CA0                 db 0C4h ; Ä
.text:00407CA1                 db  0Ch
.text:00407CA2                 db 0C3h ; Ã
.text:00407CA3                 align 10h
.text:00407CB0 aLiteral        db 'literal',0          ; DATA XREF: .text:00407CF0↓o
.text:00407CB8 aShell          db 'shell',0            ; DATA XREF: .text:00407CF4↓o
.text:00407CBE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00407CF8↓o
.text:00407CCB aC              db 'c',0
.text:00407CCD aEscape         db 'escape',0           ; DATA XREF: .text:00407D00↓o
.text:00407CD4 aLocale         db 'locale',0           ; DATA XREF: .text:00407D04↓o
.text:00407CDB aClocale        db 'clocale',0          ; DATA XREF: .text:00407D08↓o
.text:00407CE3                 align 10h
.text:00407CF0                 dd offset aLiteral      ; "literal"
.text:00407CF4                 dd offset aShell        ; "shell"
.text:00407CF8                 dd offset aShellAlways  ; "shell-always"
.text:00407CFC ; ---------------------------------------------------------------------------
.text:00407CFC                 retf
.text:00407CFC ; ---------------------------------------------------------------------------
.text:00407CFD                 db 7Ch, 40h, 0
.text:00407D00                 dd offset aEscape       ; "escape"
.text:00407D04                 dd offset aLocale       ; "locale"
.text:00407D08                 dd offset aClocale      ; "clocale"
.text:00407D0C                 dd 2 dup(0)
.text:00407D14                 dd 1, 2, 3, 4, 5, 6
.text:00407D2C asc_407D2C:                             ; DATA XREF: sub_407D40+7E↓o
.text:00407D2C                                         ; sub_407D40+A39↓o ...
.text:00407D2C                 text "UTF-16LE", '"',27h,'`'
.text:00407D32                 align 10h
.text:00407D40
.text:00407D40 ; =============== S U B R O U T I N E =======================================
.text:00407D40
.text:00407D40
.text:00407D40 ; int __cdecl sub_407D40(int, int, char *Str, int, int, int)
.text:00407D40 sub_407D40      proc near               ; CODE XREF: sub_407D40+43A↓p
.text:00407D40                                         ; .text:00408903↓p ...
.text:00407D40
.text:00407D40 C               = dword ptr -4Ch
.text:00407D40 Type            = dword ptr -48h
.text:00407D40 SizeInBytes     = dword ptr -44h
.text:00407D40 State           = dword ptr -40h
.text:00407D40 var_3C          = dword ptr -3Ch
.text:00407D40 var_38          = dword ptr -38h
.text:00407D40 var_34          = dword ptr -34h
.text:00407D40 var_30          = dword ptr -30h
.text:00407D40 var_29          = byte ptr -29h
.text:00407D40 var_28          = dword ptr -28h
.text:00407D40 var_22          = byte ptr -22h
.text:00407D40 var_21          = byte ptr -21h
.text:00407D40 var_20          = dword ptr -20h
.text:00407D40 var_1C          = dword ptr -1Ch
.text:00407D40 var_18          = mbstate_t ptr -18h
.text:00407D40 arg_0           = dword ptr  4
.text:00407D40 arg_4           = dword ptr  8
.text:00407D40 Str             = dword ptr  0Ch
.text:00407D40 arg_C           = dword ptr  10h
.text:00407D40 arg_10          = dword ptr  14h
.text:00407D40 arg_14          = dword ptr  18h
.text:00407D40
.text:00407D40                 push    ebp
.text:00407D41                 push    edi
.text:00407D42                 push    esi
.text:00407D43                 push    ebx
.text:00407D44                 sub     esp, 3Ch
.text:00407D47                 mov     edx, ds:__mb_cur_max
.text:00407D4D                 mov     [esp+4Ch+var_34], 0
.text:00407D55                 mov     [esp+4Ch+var_1C], 0
.text:00407D5D                 cmp     dword ptr [edx], 1
.text:00407D60                 mov     [esp+4Ch+var_20], 0
.text:00407D68                 mov     [esp+4Ch+var_21], 0
.text:00407D6D                 setz    [esp+4Ch+var_22]
.text:00407D72                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00407D77                 ja      short def_407D7D ; jumptable 00407D7D default case, cases 0,1
.text:00407D79                 mov     edx, [esp+4Ch+arg_10]
.text:00407D7D                 jmp     ds:jpt_407D7D[edx*4] ; switch jump
.text:00407D7D ; ---------------------------------------------------------------------------
.text:00407D84 jpt_407D7D      dd offset def_407D7D    ; DATA XREF: sub_407D40+3D↑r
.text:00407D84                 dd offset def_407D7D    ; jump table for switch statement
.text:00407D84                 dd offset loc_4086C5
.text:00407D84                 dd offset loc_407DA0
.text:00407D84                 dd offset loc_4086EB
.text:00407D84                 dd offset loc_4086F5
.text:00407D84                 dd offset loc_4086F5
.text:00407DA0 ; ---------------------------------------------------------------------------
.text:00407DA0
.text:00407DA0 loc_407DA0:                             ; CODE XREF: sub_407D40+3D↑j
.text:00407DA0                                         ; DATA XREF: sub_407D40:jpt_407D7D↑o
.text:00407DA0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00407D7D case 3
.text:00407DA4                 cmp     [esp+4Ch+var_34], eax
.text:00407DA8                 jnb     short loc_407DB1
.text:00407DAA                 mov     ebx, [esp+4Ch+arg_0]
.text:00407DAE                 mov     byte ptr [ebx], 22h ; '"'
.text:00407DB1
.text:00407DB1 loc_407DB1:                             ; CODE XREF: sub_407D40+68↑j
.text:00407DB1                 mov     [esp+4Ch+var_34], 1
.text:00407DB9                 mov     [esp+4Ch+var_21], 1
.text:00407DBE                 mov     [esp+4Ch+var_1C], offset asc_407D2C ; "\"'`"
.text:00407DC6
.text:00407DC6 loc_407DC6:                             ; CODE XREF: sub_407D40+9A6↓j
.text:00407DC6                 mov     [esp+4Ch+var_20], 1
.text:00407DCE
.text:00407DCE def_407D7D:                             ; CODE XREF: sub_407D40+37↑j
.text:00407DCE                                         ; sub_407D40+3D↑j ...
.text:00407DCE                 xor     ebp, ebp        ; jumptable 00407D7D default case, cases 0,1
.text:00407DD0
.text:00407DD0 loc_407DD0:                             ; CODE XREF: sub_407D40+3DB↓j
.text:00407DD0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00407DD5                 jz      loc_4086B7
.text:00407DDB                 cmp     ebp, [esp+4Ch+arg_C]
.text:00407DDF
.text:00407DDF loc_407DDF:                             ; CODE XREF: sub_407D40+980↓j
.text:00407DDF                 jz      loc_40864E
.text:00407DE5                 cmp     [esp+4Ch+var_21], 0
.text:00407DEA                 jz      short loc_407E30
.text:00407DEC                 mov     esi, [esp+4Ch+var_20]
.text:00407DF0                 test    esi, esi
.text:00407DF2                 jz      short loc_407E30
.text:00407DF4                 mov     ecx, [esp+4Ch+var_20]
.text:00407DF8                 lea     edi, [ecx+ebp]
.text:00407DFB                 cmp     edi, [esp+4Ch+arg_C]
.text:00407DFF                 ja      short loc_407E30
.text:00407E01                 cld
.text:00407E02                 mov     ebx, [esp+4Ch+Str]
.text:00407E06                 mov     edi, [esp+4Ch+var_1C]
.text:00407E0A                 add     ebx, ebp
.text:00407E0C                 mov     esi, ebx
.text:00407E0E                 cmp     ecx, ecx
.text:00407E10                 repe cmpsb
.text:00407E12                 jnz     short loc_407E30
.text:00407E14                 mov     edx, [esp+4Ch+arg_4]
.text:00407E18                 cmp     [esp+4Ch+var_34], edx
.text:00407E1C                 jnb     short loc_407E2A
.text:00407E1E                 mov     ecx, [esp+4Ch+arg_0]
.text:00407E22                 mov     eax, [esp+4Ch+var_34]
.text:00407E26                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00407E2A
.text:00407E2A loc_407E2A:                             ; CODE XREF: sub_407D40+DC↑j
.text:00407E2A                 inc     [esp+4Ch+var_34]
.text:00407E2E                 mov     esi, esi
.text:00407E30
.text:00407E30 loc_407E30:                             ; CODE XREF: sub_407D40+AA↑j
.text:00407E30                                         ; sub_407D40+B2↑j ...
.text:00407E30                 mov     edi, [esp+4Ch+Str]
.text:00407E34                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00407E39                 movzx   eax, bl
.text:00407E3C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00407E3F                 ja      def_407E45      ; jumptable 00407E45 default case, cases 1-6,14-31,64
.text:00407E45                 jmp     ds:jpt_407E45[eax*4] ; switch jump
.text:00407E45 ; ---------------------------------------------------------------------------
.text:00407E4C jpt_407E45      dd offset loc_408048, offset def_407E45, offset def_407E45
.text:00407E4C                                         ; DATA XREF: sub_407D40+105↑r
.text:00407E4C                 dd offset def_407E45, offset def_407E45, offset def_407E45 ; jump table for switch statement
.text:00407E4C                 dd offset def_407E45, offset loc_408120, offset loc_40813E
.text:00407E4C                 dd offset loc_408142, offset loc_408187, offset loc_40818B
.text:00407E4C                 dd offset loc_40818F, offset loc_408193, offset def_407E45
.text:00407E4C                 dd offset def_407E45, offset def_407E45, offset def_407E45
.text:00407E4C                 dd offset def_407E45, offset def_407E45, offset def_407E45
.text:00407E4C                 dd offset def_407E45, offset def_407E45, offset def_407E45
.text:00407E4C                 dd offset def_407E45, offset def_407E45, offset def_407E45
.text:00407E4C                 dd offset def_407E45, offset def_407E45, offset def_407E45
.text:00407E4C                 dd offset def_407E45, offset def_407E45, offset loc_408618
.text:00407E4C                 dd offset loc_408618, offset loc_408618, offset loc_40863A
.text:00407E4C                 dd offset loc_408618, offset def_408242, offset loc_408618
.text:00407E4C                 dd offset loc_408197, offset loc_408618, offset loc_408618
.text:00407E4C                 dd offset loc_408618, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset loc_408618
.text:00407E4C                 dd offset loc_408618, offset loc_408618, offset loc_408618
.text:00407E4C                 dd offset loc_4081FC, offset def_407E45, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset loc_408618, offset loc_408611
.text:00407E4C                 dd offset def_408242, offset loc_408618, offset def_408242
.text:00407E4C                 dd offset loc_408618, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset def_408242, offset def_408242, offset def_408242
.text:00407E4C                 dd offset loc_408628, offset loc_408618, offset loc_408628
.text:00407E4C                 dd offset loc_40863A
.text:00408048 ; ---------------------------------------------------------------------------
.text:00408048
.text:00408048 loc_408048:                             ; CODE XREF: sub_407D40+105↑j
.text:00408048                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:00408048                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00407E45 case 0
.text:0040804D                 lea     eax, [ebp+1]
.text:00408050                 jz      loc_408100
.text:00408056                 mov     esi, [esp+4Ch+arg_4]
.text:0040805A                 cmp     [esp+4Ch+var_34], esi
.text:0040805E                 jnb     short loc_40806C
.text:00408060                 mov     eax, [esp+4Ch+arg_0]
.text:00408064                 mov     ebx, [esp+4Ch+var_34]
.text:00408068                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040806C
.text:0040806C loc_40806C:                             ; CODE XREF: sub_407D40+31E↑j
.text:0040806C                 inc     [esp+4Ch+var_34]
.text:00408070                 mov     edx, [esp+4Ch+arg_4]
.text:00408074                 cmp     [esp+4Ch+var_34], edx
.text:00408078                 jnb     short loc_408086
.text:0040807A                 mov     edi, [esp+4Ch+arg_0]
.text:0040807E                 mov     ecx, [esp+4Ch+var_34]
.text:00408082                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00408086
.text:00408086 loc_408086:                             ; CODE XREF: sub_407D40+338↑j
.text:00408086                 inc     [esp+4Ch+var_34]
.text:0040808A                 mov     esi, [esp+4Ch+arg_4]
.text:0040808E                 cmp     [esp+4Ch+var_34], esi
.text:00408092                 jnb     short loc_4080A0
.text:00408094                 mov     ebx, [esp+4Ch+arg_0]
.text:00408098                 mov     eax, [esp+4Ch+var_34]
.text:0040809C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004080A0
.text:004080A0 loc_4080A0:                             ; CODE XREF: sub_407D40+352↑j
.text:004080A0                 inc     [esp+4Ch+var_34]
.text:004080A4                 mov     bl, 30h ; '0'
.text:004080A6                 lea     esi, [esi+0]
.text:004080A9                 lea     edi, [edi+0]
.text:004080B0
.text:004080B0 def_408242:                             ; CODE XREF: sub_407D40+105↑j
.text:004080B0                                         ; sub_407D40+463↓j ...
.text:004080B0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00407E45 cases 37,43-58,65-90,93,95,97-122
.text:004080B0                                         ; jumptable 00408242 default case, cases 34-38,42-44,46,48-59
.text:004080B5                 lea     eax, [ebp+1]
.text:004080B8                 jz      short loc_408100
.text:004080BA                 mov     cl, bl
.text:004080BC                 mov     edi, [esp+4Ch+arg_14]
.text:004080C0                 mov     esi, 1
.text:004080C5                 shr     cl, 5
.text:004080C8                 movzx   edx, cl
.text:004080CB                 mov     ecx, ebx
.text:004080CD                 and     ecx, 1Fh
.text:004080D0                 shl     esi, cl
.text:004080D2                 test    [edi+edx*4+4], esi
.text:004080D6                 jz      short loc_4080F2
.text:004080D8
.text:004080D8 loc_4080D8:                             ; CODE XREF: sub_407D40+3FC↓j
.text:004080D8                 mov     edx, [esp+4Ch+arg_4]
.text:004080DC                 cmp     [esp+4Ch+var_34], edx
.text:004080E0                 jnb     short loc_4080EE
.text:004080E2                 mov     edi, [esp+4Ch+arg_0]
.text:004080E6                 mov     esi, [esp+4Ch+var_34]
.text:004080EA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004080EE
.text:004080EE loc_4080EE:                             ; CODE XREF: sub_407D40+3A0↑j
.text:004080EE                 inc     [esp+4Ch+var_34]
.text:004080F2
.text:004080F2 loc_4080F2:                             ; CODE XREF: sub_407D40+396↑j
.text:004080F2                 lea     eax, [ebp+1]
.text:004080F5                 lea     esi, [esi+0]
.text:004080F9                 lea     edi, [edi+0]
.text:00408100
.text:00408100 loc_408100:                             ; CODE XREF: sub_407D40+310↑j
.text:00408100                                         ; sub_407D40+378↑j ...
.text:00408100                 mov     ebp, [esp+4Ch+arg_4]
.text:00408104                 cmp     [esp+4Ch+var_34], ebp
.text:00408108                 jnb     short loc_408115
.text:0040810A                 mov     edx, [esp+4Ch+arg_0]
.text:0040810E                 mov     ecx, [esp+4Ch+var_34]
.text:00408112                 mov     [ecx+edx], bl
.text:00408115
.text:00408115 loc_408115:                             ; CODE XREF: sub_407D40+3C8↑j
.text:00408115                 inc     [esp+4Ch+var_34]
.text:00408119                 mov     ebp, eax
.text:0040811B                 jmp     loc_407DD0
.text:00408120 ; ---------------------------------------------------------------------------
.text:00408120
.text:00408120 loc_408120:                             ; CODE XREF: sub_407D40+105↑j
.text:00408120                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:00408120                 mov     dl, 61h ; 'a'   ; jumptable 00407E45 case 7
.text:00408122                 lea     esi, [esi+0]
.text:00408129                 lea     edi, [edi+0]
.text:00408130
.text:00408130 loc_408130:                             ; CODE XREF: sub_407D40+400↓j
.text:00408130                                         ; sub_407D40+409↓j ...
.text:00408130                 cmp     [esp+4Ch+var_21], 0
.text:00408135                 lea     eax, [ebp+1]
.text:00408138                 jz      short loc_408100
.text:0040813A                 mov     bl, dl
.text:0040813C                 jmp     short loc_4080D8
.text:0040813E ; ---------------------------------------------------------------------------
.text:0040813E
.text:0040813E loc_40813E:                             ; CODE XREF: sub_407D40+105↑j
.text:0040813E                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:0040813E                 mov     dl, 62h ; 'b'   ; jumptable 00407E45 case 8
.text:00408140                 jmp     short loc_408130
.text:00408142 ; ---------------------------------------------------------------------------
.text:00408142
.text:00408142 loc_408142:                             ; CODE XREF: sub_407D40+105↑j
.text:00408142                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:00408142                 mov     dl, 74h ; 't'   ; jumptable 00407E45 case 9
.text:00408144
.text:00408144 loc_408144:                             ; CODE XREF: sub_407D40+449↓j
.text:00408144                                         ; sub_407D40+455↓j ...
.text:00408144                 cmp     [esp+4Ch+arg_10], 1
.text:00408149                 jnz     short loc_408130
.text:0040814B
.text:0040814B loc_40814B:                             ; CODE XREF: sub_407D40+45C↓j
.text:0040814B                                         ; sub_407D40+4C1↓j ...
.text:0040814B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00408512 cases 91,92,94,96,124
.text:00408153                 mov     eax, [esp+4Ch+arg_14]
.text:00408157                 mov     edx, [esp+4Ch+arg_C]
.text:0040815B                 mov     ecx, [esp+4Ch+Str]
.text:0040815F                 mov     ebx, [esp+4Ch+arg_4]
.text:00408163                 mov     [esp+4Ch+var_38], eax ; int
.text:00408167                 mov     ebp, [esp+4Ch+arg_0]
.text:0040816B                 mov     [esp+4Ch+State], edx ; int
.text:0040816F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00408173                 mov     [esp+4Ch+Type], ebx ; int
.text:00408177                 mov     [esp+4Ch+C], ebp ; int
.text:0040817A                 call    sub_407D40
.text:0040817F
.text:0040817F loc_40817F:                             ; CODE XREF: sub_407D40+972↓j
.text:0040817F                 add     esp, 3Ch
.text:00408182                 pop     ebx
.text:00408183                 pop     esi
.text:00408184                 pop     edi
.text:00408185                 pop     ebp
.text:00408186                 retn
.text:00408187 ; ---------------------------------------------------------------------------
.text:00408187
.text:00408187 loc_408187:                             ; CODE XREF: sub_407D40+105↑j
.text:00408187                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:00408187                 mov     dl, 6Eh ; 'n'   ; jumptable 00407E45 case 10
.text:00408189                 jmp     short loc_408144
.text:0040818B ; ---------------------------------------------------------------------------
.text:0040818B
.text:0040818B loc_40818B:                             ; CODE XREF: sub_407D40+105↑j
.text:0040818B                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:0040818B                 mov     dl, 76h ; 'v'   ; jumptable 00407E45 case 11
.text:0040818D                 jmp     short loc_408130
.text:0040818F ; ---------------------------------------------------------------------------
.text:0040818F
.text:0040818F loc_40818F:                             ; CODE XREF: sub_407D40+105↑j
.text:0040818F                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:0040818F                 mov     dl, 66h ; 'f'   ; jumptable 00407E45 case 12
.text:00408191                 jmp     short loc_408130
.text:00408193 ; ---------------------------------------------------------------------------
.text:00408193
.text:00408193 loc_408193:                             ; CODE XREF: sub_407D40+105↑j
.text:00408193                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:00408193                 mov     dl, 72h ; 'r'   ; jumptable 00407E45 case 13
.text:00408195                 jmp     short loc_408144
.text:00408197 ; ---------------------------------------------------------------------------
.text:00408197
.text:00408197 loc_408197:                             ; CODE XREF: sub_407D40+105↑j
.text:00408197                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:00408197                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407E45 case 39
.text:0040819C                 jz      short loc_40814B ; jumptable 00408512 cases 91,92,94,96,124
.text:0040819E                 cmp     [esp+4Ch+arg_10], 2
.text:004081A3                 jnz     def_408242      ; jumptable 00407E45 cases 37,43-58,65-90,93,95,97-122
.text:004081A3                                         ; jumptable 00408242 default case, cases 34-38,42-44,46,48-59
.text:004081A9                 mov     edx, [esp+4Ch+arg_4]
.text:004081AD                 cmp     [esp+4Ch+var_34], edx
.text:004081B1                 jnb     short loc_4081BF
.text:004081B3                 mov     ecx, [esp+4Ch+arg_0]
.text:004081B7                 mov     edi, [esp+4Ch+var_34]
.text:004081BB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004081BF
.text:004081BF loc_4081BF:                             ; CODE XREF: sub_407D40+471↑j
.text:004081BF                 inc     [esp+4Ch+var_34]
.text:004081C3                 mov     eax, [esp+4Ch+arg_4]
.text:004081C7                 cmp     [esp+4Ch+var_34], eax
.text:004081CB                 jnb     short loc_4081D9
.text:004081CD                 mov     esi, [esp+4Ch+arg_0]
.text:004081D1                 mov     edx, [esp+4Ch+var_34]
.text:004081D5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004081D9
.text:004081D9 loc_4081D9:                             ; CODE XREF: sub_407D40+48B↑j
.text:004081D9                 inc     [esp+4Ch+var_34]
.text:004081DD                 mov     edi, [esp+4Ch+arg_4]
.text:004081E1                 cmp     [esp+4Ch+var_34], edi
.text:004081E5                 jnb     short loc_4081F3
.text:004081E7                 mov     ecx, [esp+4Ch+arg_0]
.text:004081EB                 mov     eax, [esp+4Ch+var_34]
.text:004081EF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004081F3
.text:004081F3 loc_4081F3:                             ; CODE XREF: sub_407D40+4A5↑j
.text:004081F3                                         ; sub_407D40+5C4↓j ...
.text:004081F3                 inc     [esp+4Ch+var_34]
.text:004081F7                 jmp     def_408242      ; jumptable 00407E45 cases 37,43-58,65-90,93,95,97-122
.text:004081F7                                         ; jumptable 00408242 default case, cases 34-38,42-44,46,48-59
.text:004081FC ; ---------------------------------------------------------------------------
.text:004081FC
.text:004081FC loc_4081FC:                             ; CODE XREF: sub_407D40+105↑j
.text:004081FC                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:004081FC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407E45 case 63
.text:00408201                 jz      loc_40814B      ; jumptable 00408512 cases 91,92,94,96,124
.text:00408207                 cmp     [esp+4Ch+arg_10], 3
.text:0040820C                 jnz     def_408242      ; jumptable 00407E45 cases 37,43-58,65-90,93,95,97-122
.text:0040820C                                         ; jumptable 00408242 default case, cases 34-38,42-44,46,48-59
.text:00408212                 lea     edx, [ebp+2]
.text:00408215                 cmp     edx, [esp+4Ch+arg_C]
.text:00408219                 jnb     def_408242      ; jumptable 00407E45 cases 37,43-58,65-90,93,95,97-122
.text:00408219                                         ; jumptable 00408242 default case, cases 34-38,42-44,46,48-59
.text:0040821F                 mov     esi, [esp+4Ch+Str]
.text:00408223                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00408228                 jnz     def_408242      ; jumptable 00407E45 cases 37,43-58,65-90,93,95,97-122
.text:00408228                                         ; jumptable 00408242 default case, cases 34-38,42-44,46,48-59
.text:0040822E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00408233                 movsx   eax, cl
.text:00408236                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00408239                 cmp     eax, 1Dh
.text:0040823C                 ja      def_408242      ; jumptable 00407E45 cases 37,43-58,65-90,93,95,97-122
.text:0040823C                                         ; jumptable 00408242 default case, cases 34-38,42-44,46,48-59
.text:00408242                 jmp     ds:jpt_408242[eax*4] ; switch jump
.text:00408242 ; ---------------------------------------------------------------------------
.text:00408249                 align 4
.text:0040824C jpt_408242      dd offset loc_4082C4    ; DATA XREF: sub_407D40+502↑r
.text:0040824C                 dd offset def_408242    ; jump table for switch statement
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset loc_4082C4
.text:0040824C                 dd offset loc_4082C4
.text:0040824C                 dd offset loc_4082C4
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset loc_4082C4
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset loc_4082C4
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset def_408242
.text:0040824C                 dd offset loc_4082C4
.text:0040824C                 dd offset loc_4082C4
.text:0040824C                 dd offset loc_4082C4
.text:004082C4 ; ---------------------------------------------------------------------------
.text:004082C4
.text:004082C4 loc_4082C4:                             ; CODE XREF: sub_407D40+502↑j
.text:004082C4                                         ; DATA XREF: sub_407D40:jpt_408242↑o
.text:004082C4                 mov     ebp, edx        ; jumptable 00408242 cases 33,39-41,45,47,60-62
.text:004082C6                 mov     bl, cl
.text:004082C8                 mov     edx, [esp+4Ch+arg_4]
.text:004082CC                 cmp     [esp+4Ch+var_34], edx
.text:004082D0                 jnb     short loc_4082DE
.text:004082D2                 mov     ecx, [esp+4Ch+arg_0]
.text:004082D6                 mov     edi, [esp+4Ch+var_34]
.text:004082DA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004082DE
.text:004082DE loc_4082DE:                             ; CODE XREF: sub_407D40+590↑j
.text:004082DE                 inc     [esp+4Ch+var_34]
.text:004082E2                 mov     eax, [esp+4Ch+arg_4]
.text:004082E6                 cmp     [esp+4Ch+var_34], eax
.text:004082EA                 jnb     short loc_4082F8
.text:004082EC                 mov     edx, [esp+4Ch+arg_0]
.text:004082F0                 mov     esi, [esp+4Ch+var_34]
.text:004082F4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004082F8
.text:004082F8 loc_4082F8:                             ; CODE XREF: sub_407D40+5AA↑j
.text:004082F8                 inc     [esp+4Ch+var_34]
.text:004082FC                 mov     edi, [esp+4Ch+arg_4]
.text:00408300                 cmp     [esp+4Ch+var_34], edi
.text:00408304                 jnb     loc_4081F3
.text:0040830A                 mov     eax, [esp+4Ch+arg_0]
.text:0040830E                 mov     ecx, [esp+4Ch+var_34]
.text:00408312                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00408316                 jmp     loc_4081F3
.text:00408316 ; ---------------------------------------------------------------------------
.text:0040831B                 align 10h
.text:00408320
.text:00408320 def_407E45:                             ; CODE XREF: sub_407D40+FF↑j
.text:00408320                                         ; sub_407D40+105↑j
.text:00408320                                         ; DATA XREF: ...
.text:00408320                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00407E45 default case, cases 1-6,14-31,64
.text:00408325                 jz      loc_408450
.text:0040832B                 mov     [esp+4Ch+var_28], 1
.text:00408333                 mov     esi, ds:__mb_cur_max
.text:00408339                 movzx   edx, bl
.text:0040833C                 cmp     dword ptr [esi], 1
.text:0040833F                 jz      loc_408434
.text:00408345                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040834D                 mov     [esp+4Ch+C], edx ; C
.text:00408350                 call    _isctype
.text:00408355
.text:00408355 loc_408355:                             ; CODE XREF: sub_407D40+705↓j
.text:00408355                 test    eax, eax
.text:00408357                 setnz   [esp+4Ch+var_29]
.text:0040835C
.text:0040835C loc_40835C:                             ; CODE XREF: sub_407D40+7A5↓j
.text:0040835C                 cmp     [esp+4Ch+var_21], 0
.text:00408361                 lea     eax, [ebp+1]
.text:00408364                 jz      loc_408100
.text:0040836A                 cmp     [esp+4Ch+var_29], 0
.text:0040836F                 jnz     def_408242      ; jumptable 00407E45 cases 37,43-58,65-90,93,95,97-122
.text:0040836F                                         ; jumptable 00408242 default case, cases 34-38,42-44,46,48-59
.text:00408375
.text:00408375 loc_408375:                             ; CODE XREF: sub_407D40+7AB↓j
.text:00408375                 mov     eax, [esp+4Ch+var_28]
.text:00408379                 lea     edx, [eax+ebp]
.text:0040837C                 lea     esi, [esi+0]
.text:00408380
.text:00408380 loc_408380:                             ; CODE XREF: sub_407D40+6EF↓j
.text:00408380                 cmp     [esp+4Ch+var_21], 0
.text:00408385                 jz      short loc_408400
.text:00408387                 cmp     [esp+4Ch+var_29], 0
.text:0040838C                 jnz     short loc_408400
.text:0040838E                 mov     edi, [esp+4Ch+arg_4]
.text:00408392                 cmp     [esp+4Ch+var_34], edi
.text:00408396                 jnb     short loc_4083A4
.text:00408398                 mov     esi, [esp+4Ch+arg_0]
.text:0040839C                 mov     eax, [esp+4Ch+var_34]
.text:004083A0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004083A4
.text:004083A4 loc_4083A4:                             ; CODE XREF: sub_407D40+656↑j
.text:004083A4                 inc     [esp+4Ch+var_34]
.text:004083A8                 mov     ecx, [esp+4Ch+arg_4]
.text:004083AC                 cmp     [esp+4Ch+var_34], ecx
.text:004083B0                 jnb     short loc_4083C5
.text:004083B2                 mov     cl, bl
.text:004083B4                 mov     esi, [esp+4Ch+arg_0]
.text:004083B8                 mov     edi, [esp+4Ch+var_34]
.text:004083BC                 shr     cl, 6
.text:004083BF                 add     cl, 30h ; '0'
.text:004083C2                 mov     [edi+esi], cl
.text:004083C5
.text:004083C5 loc_4083C5:                             ; CODE XREF: sub_407D40+670↑j
.text:004083C5                 inc     [esp+4Ch+var_34]
.text:004083C9                 mov     edi, [esp+4Ch+arg_4]
.text:004083CD                 cmp     [esp+4Ch+var_34], edi
.text:004083D1                 jnb     short loc_4083E9
.text:004083D3                 mov     cl, bl
.text:004083D5                 mov     esi, [esp+4Ch+arg_0]
.text:004083D9                 shr     cl, 3
.text:004083DC                 mov     edi, [esp+4Ch+var_34]
.text:004083E0                 and     cl, 7
.text:004083E3                 add     cl, 30h ; '0'
.text:004083E6                 mov     [edi+esi], cl
.text:004083E9
.text:004083E9 loc_4083E9:                             ; CODE XREF: sub_407D40+691↑j
.text:004083E9                 inc     [esp+4Ch+var_34]
.text:004083ED                 and     bl, 7
.text:004083F0                 add     bl, 30h ; '0'
.text:004083F3                 lea     esi, [esi+0]
.text:004083F9                 lea     edi, [edi+0]
.text:00408400
.text:00408400 loc_408400:                             ; CODE XREF: sub_407D40+645↑j
.text:00408400                                         ; sub_407D40+64C↑j
.text:00408400                 lea     eax, [ebp+1]
.text:00408403                 cmp     edx, eax
.text:00408405                 jbe     loc_408100
.text:0040840B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040840F                 cmp     [esp+4Ch+var_34], ebp
.text:00408413                 jnb     short loc_408420
.text:00408415                 mov     ecx, [esp+4Ch+arg_0]
.text:00408419                 mov     edi, [esp+4Ch+var_34]
.text:0040841D                 mov     [edi+ecx], bl
.text:00408420
.text:00408420 loc_408420:                             ; CODE XREF: sub_407D40+6D3↑j
.text:00408420                 inc     [esp+4Ch+var_34]
.text:00408424                 mov     ebp, eax
.text:00408426                 mov     eax, [esp+4Ch+Str]
.text:0040842A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040842F                 jmp     loc_408380
.text:00408434 ; ---------------------------------------------------------------------------
.text:00408434
.text:00408434 loc_408434:                             ; CODE XREF: sub_407D40+5FF↑j
.text:00408434                 mov     ecx, ds:_pctype
.text:0040843A                 mov     edi, [ecx]
.text:0040843C                 movzx   eax, word ptr [edi+edx*2]
.text:00408440                 and     eax, 157h
.text:00408445                 jmp     loc_408355
.text:00408445 ; ---------------------------------------------------------------------------
.text:0040844A                 align 10h
.text:00408450
.text:00408450 loc_408450:                             ; CODE XREF: sub_407D40+5E5↑j
.text:00408450                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00408455                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040845D                 mov     [esp+4Ch+var_28], 0
.text:00408465                 mov     [esp+4Ch+var_29], 1
.text:0040846A                 jz      loc_4085FC
.text:00408470
.text:00408470 loc_408470:                             ; CODE XREF: sub_407D40+8CC↓j
.text:00408470                 mov     ecx, [esp+4Ch+arg_C]
.text:00408474                 lea     edx, [esp+4Ch+var_18]
.text:00408478                 mov     edi, [esp+4Ch+Str]
.text:0040847C                 mov     [esp+4Ch+State], edx ; State
.text:00408480                 lea     esi, [esp+4Ch+var_18._State]
.text:00408484                 sub     ecx, ebp
.text:00408486                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040848A                 add     edi, ebp
.text:0040848C                 mov     [esp+4Ch+var_30], edi
.text:00408490                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00408494                 mov     [esp+4Ch+C], esi ; DstCh
.text:00408497                 call    mbrtowc
.text:0040849C                 test    eax, eax
.text:0040849E                 mov     edi, eax
.text:004084A0                 jz      short loc_4084E0
.text:004084A2                 cmp     eax, 0FFFFFFFFh
.text:004084A5                 jz      loc_4085F2
.text:004084AB                 cmp     eax, 0FFFFFFFEh
.text:004084AE                 jz      loc_4085B2
.text:004084B4                 cmp     [esp+4Ch+arg_10], 1
.text:004084B9                 jz      short loc_4084F0
.text:004084BB
.text:004084BB loc_4084BB:                             ; CODE XREF: sub_407D40+7B9↓j
.text:004084BB                                         ; sub_407D40+86D↓j
.text:004084BB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004084C0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004084C8                 mov     [esp+4Ch+C], ecx ; C
.text:004084CB                 call    iswctype
.text:004084D0                 test    eax, eax
.text:004084D2                 jnz     short loc_4084D9
.text:004084D4                 mov     [esp+4Ch+var_29], 0
.text:004084D9
.text:004084D9 loc_4084D9:                             ; CODE XREF: sub_407D40+792↑j
.text:004084D9                 mov     [esp+4Ch+var_28], edi
.text:004084DD                 lea     esi, [esi+0]
.text:004084E0
.text:004084E0 loc_4084E0:                             ; CODE XREF: sub_407D40+760↑j
.text:004084E0                                         ; sub_407D40+87B↓j ...
.text:004084E0                 cmp     [esp+4Ch+var_28], 1
.text:004084E5                 jbe     loc_40835C
.text:004084EB                 jmp     loc_408375
.text:004084F0 ; ---------------------------------------------------------------------------
.text:004084F0
.text:004084F0 loc_4084F0:                             ; CODE XREF: sub_407D40+779↑j
.text:004084F0                 cmp     [esp+4Ch+arg_10], eax
.text:004084F4                 mov     edx, 1
.text:004084F9                 jnb     short loc_4084BB
.text:004084FB
.text:004084FB loc_4084FB:                             ; CODE XREF: sub_407D40+867↓j
.text:004084FB                 mov     ecx, [esp+4Ch+Str]
.text:004084FF                 lea     esi, [edx+ebp]
.text:00408502                 movsx   eax, byte ptr [esi+ecx]
.text:00408506                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00408509                 cmp     eax, 21h
.text:0040850C                 ja      def_408512      ; jumptable 00408512 default case, cases 93,95,97-123
.text:00408512                 jmp     ds:jpt_408512[eax*4] ; switch jump
.text:00408512 ; ---------------------------------------------------------------------------
.text:00408519                 align 4
.text:0040851C jpt_408512      dd offset loc_40814B    ; DATA XREF: sub_407D40+7D2↑r
.text:0040851C                 dd offset loc_40814B    ; jump table for switch statement
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset loc_40814B
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset loc_40814B
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset def_408512
.text:0040851C                 dd offset loc_40814B
.text:004085A4 ; ---------------------------------------------------------------------------
.text:004085A4
.text:004085A4 def_408512:                             ; CODE XREF: sub_407D40+7CC↑j
.text:004085A4                                         ; sub_407D40+7D2↑j
.text:004085A4                                         ; DATA XREF: ...
.text:004085A4                 inc     edx             ; jumptable 00408512 default case, cases 93,95,97-123
.text:004085A5                 cmp     edx, edi
.text:004085A7                 jb      loc_4084FB
.text:004085AD                 jmp     loc_4084BB
.text:004085B2 ; ---------------------------------------------------------------------------
.text:004085B2
.text:004085B2 loc_4085B2:                             ; CODE XREF: sub_407D40+76E↑j
.text:004085B2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004085B6                 mov     [esp+4Ch+var_29], 0
.text:004085BB                 jnb     loc_4084E0
.text:004085C1                 mov     eax, [esp+4Ch+var_30]
.text:004085C5                 cmp     byte ptr [eax], 0
.text:004085C8                 jz      loc_4084E0
.text:004085CE
.text:004085CE loc_4085CE:                             ; CODE XREF: sub_407D40+8AB↓j
.text:004085CE                 inc     [esp+4Ch+var_28]
.text:004085D2                 mov     esi, [esp+4Ch+var_28]
.text:004085D6                 lea     eax, [esi+ebp]
.text:004085D9                 cmp     eax, [esp+4Ch+arg_C]
.text:004085DD                 jnb     loc_4084E0
.text:004085E3                 mov     edi, [esp+4Ch+Str]
.text:004085E7                 cmp     byte ptr [eax+edi], 0
.text:004085EB                 jnz     short loc_4085CE
.text:004085ED                 jmp     loc_4084E0
.text:004085F2 ; ---------------------------------------------------------------------------
.text:004085F2
.text:004085F2 loc_4085F2:                             ; CODE XREF: sub_407D40+765↑j
.text:004085F2                 mov     [esp+4Ch+var_29], 0
.text:004085F7                 jmp     loc_4084E0
.text:004085FC ; ---------------------------------------------------------------------------
.text:004085FC
.text:004085FC loc_4085FC:                             ; CODE XREF: sub_407D40+72A↑j
.text:004085FC                 mov     edx, [esp+4Ch+Str]
.text:00408600                 mov     [esp+4Ch+C], edx ; Str
.text:00408603                 call    strlen
.text:00408608                 mov     [esp+4Ch+arg_C], eax
.text:0040860C                 jmp     loc_408470
.text:00408611 ; ---------------------------------------------------------------------------
.text:00408611
.text:00408611 loc_408611:                             ; CODE XREF: sub_407D40+105↑j
.text:00408611                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:00408611                 mov     dl, bl          ; jumptable 00407E45 case 92
.text:00408613                 jmp     loc_408144
.text:00408618 ; ---------------------------------------------------------------------------
.text:00408618
.text:00408618 loc_408618:                             ; CODE XREF: sub_407D40+105↑j
.text:00408618                                         ; sub_407D40+902↓j
.text:00408618                                         ; DATA XREF: ...
.text:00408618                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407E45 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040861D                 jnz     def_408242      ; jumptable 00407E45 cases 37,43-58,65-90,93,95,97-122
.text:0040861D                                         ; jumptable 00408242 default case, cases 34-38,42-44,46,48-59
.text:00408623                 jmp     loc_40814B      ; jumptable 00408512 cases 91,92,94,96,124
.text:00408628 ; ---------------------------------------------------------------------------
.text:00408628
.text:00408628 loc_408628:                             ; CODE XREF: sub_407D40+105↑j
.text:00408628                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:00408628                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00407E45 cases 123,125
.text:0040862D                 jz      short loc_408644
.text:0040862F                 cmp     [esp+4Ch+arg_C], 1
.text:00408634
.text:00408634 loc_408634:                             ; CODE XREF: sub_407D40+90C↓j
.text:00408634                 jnz     def_408242      ; jumptable 00407E45 cases 37,43-58,65-90,93,95,97-122
.text:00408634                                         ; jumptable 00408242 default case, cases 34-38,42-44,46,48-59
.text:0040863A
.text:0040863A loc_40863A:                             ; CODE XREF: sub_407D40+105↑j
.text:0040863A                                         ; DATA XREF: sub_407D40:jpt_407E45↑o
.text:0040863A                 test    ebp, ebp        ; jumptable 00407E45 cases 35,126
.text:0040863C                 jnz     def_408242      ; jumptable 00407E45 cases 37,43-58,65-90,93,95,97-122
.text:0040863C                                         ; jumptable 00408242 default case, cases 34-38,42-44,46,48-59
.text:00408642                 jmp     short loc_408618 ; jumptable 00407E45 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00408644 ; ---------------------------------------------------------------------------
.text:00408644
.text:00408644 loc_408644:                             ; CODE XREF: sub_407D40+8ED↑j
.text:00408644                 mov     esi, [esp+4Ch+Str]
.text:00408648                 cmp     byte ptr [esi+1], 0
.text:0040864C                 jmp     short loc_408634
.text:0040864E ; ---------------------------------------------------------------------------
.text:0040864E
.text:0040864E loc_40864E:                             ; CODE XREF: sub_407D40:loc_407DDF↑j
.text:0040864E                 test    ebp, ebp
.text:00408650                 jnz     short loc_40865D
.text:00408652                 cmp     [esp+4Ch+arg_10], 1
.text:00408657                 jz      loc_40814B      ; jumptable 00408512 cases 91,92,94,96,124
.text:0040865D
.text:0040865D loc_40865D:                             ; CODE XREF: sub_407D40+910↑j
.text:0040865D                 mov     esi, [esp+4Ch+var_1C]
.text:00408661                 test    esi, esi
.text:00408663                 jz      short loc_408698
.text:00408665                 mov     edi, [esp+4Ch+var_1C]
.text:00408669                 movzx   eax, byte ptr [edi]
.text:0040866C                 test    al, al
.text:0040866E                 jz      short loc_408698
.text:00408670
.text:00408670 loc_408670:                             ; CODE XREF: sub_407D40+956↓j
.text:00408670                 mov     ebp, [esp+4Ch+arg_4]
.text:00408674                 cmp     [esp+4Ch+var_34], ebp
.text:00408678                 jnb     short loc_408685
.text:0040867A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040867E                 mov     ebx, [esp+4Ch+var_34]
.text:00408682                 mov     [ebx+ecx], al
.text:00408685
.text:00408685 loc_408685:                             ; CODE XREF: sub_407D40+938↑j
.text:00408685                 inc     [esp+4Ch+var_1C]
.text:00408689                 inc     [esp+4Ch+var_34]
.text:0040868D                 mov     edx, [esp+4Ch+var_1C]
.text:00408691                 movzx   eax, byte ptr [edx]
.text:00408694                 test    al, al
.text:00408696                 jnz     short loc_408670
.text:00408698
.text:00408698 loc_408698:                             ; CODE XREF: sub_407D40+923↑j
.text:00408698                                         ; sub_407D40+92E↑j
.text:00408698                 mov     eax, [esp+4Ch+arg_4]
.text:0040869C                 cmp     [esp+4Ch+var_34], eax
.text:004086A0                 jnb     short loc_4086AE
.text:004086A2                 mov     edi, [esp+4Ch+arg_0]
.text:004086A6                 mov     esi, [esp+4Ch+var_34]
.text:004086AA                 mov     byte ptr [esi+edi], 0
.text:004086AE
.text:004086AE loc_4086AE:                             ; CODE XREF: sub_407D40+960↑j
.text:004086AE                 mov     eax, [esp+4Ch+var_34]
.text:004086B2                 jmp     loc_40817F
.text:004086B7 ; ---------------------------------------------------------------------------
.text:004086B7
.text:004086B7 loc_4086B7:                             ; CODE XREF: sub_407D40+95↑j
.text:004086B7                 mov     ebx, [esp+4Ch+Str]
.text:004086BB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004086C0                 jmp     loc_407DDF
.text:004086C5 ; ---------------------------------------------------------------------------
.text:004086C5
.text:004086C5 loc_4086C5:                             ; CODE XREF: sub_407D40+3D↑j
.text:004086C5                                         ; DATA XREF: sub_407D40:jpt_407D7D↑o
.text:004086C5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00407D7D case 2
.text:004086C9                 cmp     [esp+4Ch+var_34], edx
.text:004086CD                 jnb     short loc_4086D6
.text:004086CF                 mov     ecx, [esp+4Ch+arg_0]
.text:004086D3                 mov     byte ptr [ecx], 27h ; '''
.text:004086D6
.text:004086D6 loc_4086D6:                             ; CODE XREF: sub_407D40+98D↑j
.text:004086D6                 mov     [esp+4Ch+var_34], 1
.text:004086DE                 mov     [esp+4Ch+var_1C], 407D2Eh
.text:004086E6                 jmp     loc_407DC6
.text:004086EB ; ---------------------------------------------------------------------------
.text:004086EB
.text:004086EB loc_4086EB:                             ; CODE XREF: sub_407D40+3D↑j
.text:004086EB                                         ; DATA XREF: sub_407D40:jpt_407D7D↑o
.text:004086EB                 mov     [esp+4Ch+var_21], 1 ; jumptable 00407D7D case 4
.text:004086F0                 jmp     def_407D7D      ; jumptable 00407D7D default case, cases 0,1
.text:004086F5 ; ---------------------------------------------------------------------------
.text:004086F5
.text:004086F5 loc_4086F5:                             ; CODE XREF: sub_407D40+3D↑j
.text:004086F5                                         ; DATA XREF: sub_407D40:jpt_407D7D↑o
.text:004086F5                 mov     [esp+4Ch+C], 407D30h ; jumptable 00407D7D cases 5,6
.text:004086FC                 call    ds:libintl_gettext
.text:00408702                 cmp     eax, 407D30h
.text:00408707                 mov     edi, eax
.text:00408709                 jz      short loc_408780
.text:0040870B
.text:0040870B loc_40870B:                             ; CODE XREF: sub_407D40+A45↓j
.text:0040870B                                         ; sub_407D40+A4C↓j
.text:0040870B                 mov     [esp+4Ch+C], 407D2Eh
.text:00408712                 call    ds:libintl_gettext
.text:00408718                 cmp     eax, 407D2Eh
.text:0040871D                 mov     edx, eax
.text:0040871F                 jz      short loc_408772
.text:00408721
.text:00408721 loc_408721:                             ; CODE XREF: sub_407D40+A37↓j
.text:00408721                                         ; sub_407D40+A3E↓j
.text:00408721                 mov     [esp+4Ch+var_1C], edi
.text:00408725                 cmp     byte ptr [edi], 0
.text:00408728                 jz      short loc_408758
.text:0040872A
.text:0040872A loc_40872A:                             ; CODE XREF: sub_407D40+A16↓j
.text:0040872A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040872E                 cmp     [esp+4Ch+var_34], ecx
.text:00408732                 jnb     short loc_408747
.text:00408734                 mov     ebp, [esp+4Ch+var_1C]
.text:00408738                 mov     edi, [esp+4Ch+arg_0]
.text:0040873C                 mov     esi, [esp+4Ch+var_34]
.text:00408740                 movzx   ebx, byte ptr [ebp+0]
.text:00408744                 mov     [esi+edi], bl
.text:00408747
.text:00408747 loc_408747:                             ; CODE XREF: sub_407D40+9F2↑j
.text:00408747                 inc     [esp+4Ch+var_1C]
.text:0040874B                 inc     [esp+4Ch+var_34]
.text:0040874F                 mov     eax, [esp+4Ch+var_1C]
.text:00408753                 cmp     byte ptr [eax], 0
.text:00408756                 jnz     short loc_40872A
.text:00408758
.text:00408758 loc_408758:                             ; CODE XREF: sub_407D40+9E8↑j
.text:00408758                 mov     [esp+4Ch+var_21], 1
.text:0040875D                 mov     [esp+4Ch+var_1C], edx
.text:00408761                 mov     [esp+4Ch+C], edx ; Str
.text:00408764                 call    strlen
.text:00408769                 mov     [esp+4Ch+var_20], eax
.text:0040876D                 jmp     def_407D7D      ; jumptable 00407D7D default case, cases 0,1
.text:00408772 ; ---------------------------------------------------------------------------
.text:00408772
.text:00408772 loc_408772:                             ; CODE XREF: sub_407D40+9DF↑j
.text:00408772                 cmp     [esp+4Ch+arg_10], 6
.text:00408777                 jnz     short loc_408721
.text:00408779                 mov     edx, offset asc_407D2C ; "\"'`"
.text:0040877E                 jmp     short loc_408721
.text:00408780 ; ---------------------------------------------------------------------------
.text:00408780
.text:00408780 loc_408780:                             ; CODE XREF: sub_407D40+9C9↑j
.text:00408780                 cmp     [esp+4Ch+arg_10], 6
.text:00408785                 jnz     short loc_40870B
.text:00408787                 mov     edi, offset asc_407D2C ; "\"'`"
.text:0040878C                 jmp     loc_40870B
.text:0040878C sub_407D40      endp
.text:0040878C
.text:00408791 ; ---------------------------------------------------------------------------
.text:00408791                 jmp     short loc_4087A0
.text:00408791 ; ---------------------------------------------------------------------------
.text:00408793                 align 10h
.text:004087A0
.text:004087A0 loc_4087A0:                             ; CODE XREF: .text:00408791↑j
.text:004087A0                 sub     esp, 0Ch
.text:004087A3                 mov     [esp+4], ebx
.text:004087A7                 mov     [esp+8], esi
.text:004087AB                 call    _errno
.text:004087B0                 mov     esi, [eax]
.text:004087B2                 mov     dword ptr [esp], 24h ; '$'
.text:004087B9                 call    sub_404D00
.text:004087BE                 mov     edx, [esp+10h]
.text:004087C2                 mov     ebx, eax
.text:004087C4                 test    edx, edx
.text:004087C6                 jz      short loc_408811
.text:004087C8
.text:004087C8 loc_4087C8:                             ; CODE XREF: .text:00408816↓j
.text:004087C8                 mov     ecx, [edx]
.text:004087CA                 mov     [ebx], ecx
.text:004087CC                 mov     ecx, [edx+4]
.text:004087CF                 mov     [ebx+4], ecx
.text:004087D2                 mov     ecx, [edx+8]
.text:004087D5                 mov     [ebx+8], ecx
.text:004087D8                 mov     ecx, [edx+0Ch]
.text:004087DB                 mov     [ebx+0Ch], ecx
.text:004087DE                 mov     ecx, [edx+10h]
.text:004087E1                 mov     [ebx+10h], ecx
.text:004087E4                 mov     ecx, [edx+14h]
.text:004087E7                 mov     [ebx+14h], ecx
.text:004087EA                 mov     ecx, [edx+18h]
.text:004087ED                 mov     [ebx+18h], ecx
.text:004087F0                 mov     ecx, [edx+1Ch]
.text:004087F3                 mov     [ebx+1Ch], ecx
.text:004087F6                 mov     ecx, [edx+20h]
.text:004087F9                 mov     [ebx+20h], ecx
.text:004087FC                 call    _errno
.text:00408801                 mov     [eax], esi
.text:00408803                 mov     esi, [esp+8]
.text:00408807                 mov     eax, ebx
.text:00408809                 mov     ebx, [esp+4]
.text:0040880D                 add     esp, 0Ch
.text:00408810                 retn
.text:00408811 ; ---------------------------------------------------------------------------
.text:00408811
.text:00408811 loc_408811:                             ; CODE XREF: .text:004087C6↑j
.text:00408811                 mov     edx, offset dword_414210
.text:00408816                 jmp     short loc_4087C8
.text:00408816 ; ---------------------------------------------------------------------------
.text:00408818                 align 10h
.text:00408820                 mov     eax, [esp+4]
.text:00408824                 test    eax, eax
.text:00408826                 jz      short loc_408830
.text:00408828
.text:00408828 loc_408828:                             ; CODE XREF: .text:00408835↓j
.text:00408828                 mov     eax, [eax]
.text:0040882A                 retn
.text:0040882A ; ---------------------------------------------------------------------------
.text:0040882B                 align 10h
.text:00408830
.text:00408830 loc_408830:                             ; CODE XREF: .text:00408826↑j
.text:00408830                 mov     eax, offset dword_414210
.text:00408835                 jmp     short loc_408828
.text:00408835 ; ---------------------------------------------------------------------------
.text:00408837                 align 10h
.text:00408840                 mov     edx, [esp+4]
.text:00408844                 test    edx, edx
.text:00408846                 jz      short loc_408850
.text:00408848
.text:00408848 loc_408848:                             ; CODE XREF: .text:00408855↓j
.text:00408848                 mov     ecx, [esp+8]
.text:0040884C                 mov     [edx], ecx
.text:0040884E                 retn
.text:0040884E ; ---------------------------------------------------------------------------
.text:0040884F                 align 10h
.text:00408850
.text:00408850 loc_408850:                             ; CODE XREF: .text:00408846↑j
.text:00408850                 mov     edx, offset dword_414210
.text:00408855                 jmp     short loc_408848
.text:00408855 ; ---------------------------------------------------------------------------
.text:00408857                 align 10h
.text:00408860                 sub     esp, 8
.text:00408863                 mov     eax, [esp+0Ch]
.text:00408867                 movzx   ecx, byte ptr [esp+10h]
.text:0040886C                 mov     [esp], ebx
.text:0040886F                 mov     ebx, [esp+14h]
.text:00408873                 mov     [esp+4], esi
.text:00408877                 mov     dl, cl
.text:00408879                 shr     dl, 5
.text:0040887C                 movzx   edx, dl
.text:0040887F                 shl     edx, 2
.text:00408882                 test    eax, eax
.text:00408884                 lea     esi, [edx+eax+4]
.text:00408888                 jz      short loc_4088B0
.text:0040888A
.text:0040888A loc_40888A:                             ; CODE XREF: .text:004088B6↓j
.text:0040888A                 mov     edx, [esi]
.text:0040888C                 and     ecx, 1Fh
.text:0040888F                 and     ebx, 1
.text:00408892                 mov     eax, edx
.text:00408894                 shr     eax, cl
.text:00408896                 and     eax, 1
.text:00408899                 xor     ebx, eax
.text:0040889B                 shl     ebx, cl
.text:0040889D                 xor     edx, ebx
.text:0040889F                 mov     [esi], edx
.text:004088A1                 mov     ebx, [esp]
.text:004088A4                 mov     esi, [esp+4]
.text:004088A8                 add     esp, 8
.text:004088AB                 retn
.text:004088AB ; ---------------------------------------------------------------------------
.text:004088AC                 align 10h
.text:004088B0
.text:004088B0 loc_4088B0:                             ; CODE XREF: .text:00408888↑j
.text:004088B0                 lea     esi, dword_414214[edx]
.text:004088B6                 jmp     short loc_40888A
.text:004088B6 ; ---------------------------------------------------------------------------
.text:004088B8                 align 10h
.text:004088C0                 sub     esp, 2Ch
.text:004088C3                 mov     [esp+24h], ebx
.text:004088C7                 mov     ebx, [esp+40h]
.text:004088CB                 mov     [esp+28h], esi
.text:004088CF                 test    ebx, ebx
.text:004088D1                 jz      short loc_408920
.text:004088D3
.text:004088D3 loc_4088D3:                             ; CODE XREF: .text:00408925↓j
.text:004088D3                 call    _errno
.text:004088D8                 mov     esi, [eax]
.text:004088DA                 mov     [esp+14h], ebx
.text:004088DE                 mov     edx, [ebx]
.text:004088E0                 mov     ecx, [esp+38h]
.text:004088E4                 mov     ebx, [esp+3Ch]
.text:004088E8                 mov     [esp+10h], edx
.text:004088EC                 mov     edx, [esp+34h]
.text:004088F0                 mov     [esp+0Ch], ebx
.text:004088F4                 mov     [esp+8], ecx
.text:004088F8                 mov     [esp+4], edx
.text:004088FC                 mov     edx, [esp+30h]
.text:00408900                 mov     [esp], edx
.text:00408903                 call    sub_407D40
.text:00408908                 mov     ebx, eax
.text:0040890A                 call    _errno
.text:0040890F                 mov     [eax], esi
.text:00408911                 mov     esi, [esp+28h]
.text:00408915                 mov     eax, ebx
.text:00408917                 mov     ebx, [esp+24h]
.text:0040891B                 add     esp, 2Ch
.text:0040891E                 retn
.text:0040891E ; ---------------------------------------------------------------------------
.text:0040891F                 align 10h
.text:00408920
.text:00408920 loc_408920:                             ; CODE XREF: .text:004088D1↑j
.text:00408920                 mov     ebx, offset dword_414210
.text:00408925                 jmp     short loc_4088D3
.text:00408925 ; ---------------------------------------------------------------------------
.text:00408927                 align 10h
.text:00408930                 push    ebp
.text:00408931                 push    edi
.text:00408932                 push    esi
.text:00408933                 push    ebx
.text:00408934                 sub     esp, 2Ch
.text:00408937                 mov     ebp, [esp+48h]
.text:0040893B                 call    _errno
.text:00408940                 mov     edx, [eax]
.text:00408942                 test    ebp, ebp
.text:00408944                 mov     ebx, ebp
.text:00408946                 mov     [esp+28h], edx
.text:0040894A                 jz      loc_408A00
.text:00408950
.text:00408950 loc_408950:                             ; CODE XREF: .text:00408A05↓j
.text:00408950                 call    _errno
.text:00408955                 mov     edi, [eax]
.text:00408957                 mov     esi, ebp
.text:00408959                 mov     [esp+14h], ebx
.text:0040895D                 mov     ecx, [ebx]
.text:0040895F                 mov     dword ptr [esp], 0
.text:00408966                 mov     edx, [esp+44h]
.text:0040896A                 mov     dword ptr [esp+4], 0
.text:00408972                 mov     eax, [esp+40h]
.text:00408976                 mov     [esp+10h], ecx
.text:0040897A                 mov     [esp+0Ch], edx
.text:0040897E                 mov     [esp+8], eax
.text:00408982                 call    sub_407D40
.text:00408987                 mov     ebx, eax
.text:00408989                 call    _errno
.text:0040898E                 mov     [eax], edi
.text:00408990                 lea     edi, [ebx+1]
.text:00408993                 mov     [esp], edi
.text:00408996                 call    sub_404D00
.text:0040899B                 mov     [esp+24h], eax
.text:0040899F                 test    ebp, ebp
.text:004089A1                 jz      short loc_4089F2
.text:004089A3
.text:004089A3 loc_4089A3:                             ; CODE XREF: .text:004089F7↓j
.text:004089A3                 call    _errno
.text:004089A8                 mov     ebp, [eax]
.text:004089AA                 mov     [esp+14h], esi
.text:004089AE                 mov     ecx, [esi]
.text:004089B0                 mov     [esp+4], edi
.text:004089B4                 mov     edx, [esp+44h]
.text:004089B8                 mov     esi, [esp+24h]
.text:004089BC                 mov     [esp+10h], ecx
.text:004089C0                 mov     eax, [esp+40h]
.text:004089C4                 mov     [esp+0Ch], edx
.text:004089C8                 mov     [esp], esi
.text:004089CB                 mov     [esp+8], eax
.text:004089CF                 call    sub_407D40
.text:004089D4                 call    _errno
.text:004089D9                 mov     [eax], ebp
.text:004089DB                 call    _errno
.text:004089E0                 mov     ebx, [esp+28h]
.text:004089E4                 mov     [eax], ebx
.text:004089E6                 mov     eax, [esp+24h]
.text:004089EA                 add     esp, 2Ch
.text:004089ED                 pop     ebx
.text:004089EE                 pop     esi
.text:004089EF                 pop     edi
.text:004089F0                 pop     ebp
.text:004089F1                 retn
.text:004089F2 ; ---------------------------------------------------------------------------
.text:004089F2
.text:004089F2 loc_4089F2:                             ; CODE XREF: .text:004089A1↑j
.text:004089F2                 mov     esi, offset dword_414210
.text:004089F7                 jmp     short loc_4089A3
.text:004089F7 ; ---------------------------------------------------------------------------
.text:004089F9                 align 10h
.text:00408A00
.text:00408A00 loc_408A00:                             ; CODE XREF: .text:0040894A↑j
.text:00408A00                 mov     ebx, offset dword_414210
.text:00408A05                 jmp     loc_408950
.text:00408A05 ; ---------------------------------------------------------------------------
.text:00408A0A                 align 10h
.text:00408A10                 sub     esp, 1Ch
.text:00408A13                 mov     edx, [esp+24h]
.text:00408A17                 mov     dword ptr [esp+0Ch], offset dword_414210
.text:00408A1F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408A27                 mov     [esp+4], edx
.text:00408A2B                 mov     edx, [esp+20h]
.text:00408A2F                 mov     [esp], edx
.text:00408A32                 call    sub_408E80
.text:00408A37                 add     esp, 1Ch
.text:00408A3A                 retn
.text:00408A3A ; ---------------------------------------------------------------------------
.text:00408A3B                 align 10h
.text:00408A40                 sub     esp, 1Ch
.text:00408A43                 mov     edx, [esp+20h]
.text:00408A47                 mov     dword ptr [esp+0Ch], offset dword_414210
.text:00408A4F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408A57                 mov     [esp+4], edx
.text:00408A5B                 mov     dword ptr [esp], 0
.text:00408A62                 call    sub_408E80
.text:00408A67                 add     esp, 1Ch
.text:00408A6A                 retn
.text:00408A6A ; ---------------------------------------------------------------------------
.text:00408A6B                 align 10h
.text:00408A70
.text:00408A70 ; =============== S U B R O U T I N E =======================================
.text:00408A70
.text:00408A70
.text:00408A70 ; int __cdecl sub_408A70(int, int, char *)
.text:00408A70 sub_408A70      proc near               ; CODE XREF: sub_4068D0+1A↑p
.text:00408A70                                         ; sub_406900+1A↑p ...
.text:00408A70
.text:00408A70 var_BC          = dword ptr -0BCh
.text:00408A70 var_B8          = dword ptr -0B8h
.text:00408A70 var_B4          = dword ptr -0B4h
.text:00408A70 var_B0          = dword ptr -0B0h
.text:00408A70 var_AC          = dword ptr -0ACh
.text:00408A70 var_A8          = dword ptr -0A8h
.text:00408A70 var_A4          = dword ptr -0A4h
.text:00408A70 var_A0          = dword ptr -0A0h
.text:00408A70 var_9C          = dword ptr -9Ch
.text:00408A70 var_98          = dword ptr -98h
.text:00408A70 var_94          = dword ptr -94h
.text:00408A70 var_90          = dword ptr -90h
.text:00408A70 var_8C          = dword ptr -8Ch
.text:00408A70 var_7C          = dword ptr -7Ch
.text:00408A70 var_78          = dword ptr -78h
.text:00408A70 var_74          = dword ptr -74h
.text:00408A70 var_70          = dword ptr -70h
.text:00408A70 var_6C          = dword ptr -6Ch
.text:00408A70 var_68          = dword ptr -68h
.text:00408A70 var_64          = dword ptr -64h
.text:00408A70 var_60          = dword ptr -60h
.text:00408A70 var_5C          = dword ptr -5Ch
.text:00408A70 var_4C          = dword ptr -4Ch
.text:00408A70 var_48          = dword ptr -48h
.text:00408A70 var_44          = dword ptr -44h
.text:00408A70 var_40          = dword ptr -40h
.text:00408A70 var_3C          = dword ptr -3Ch
.text:00408A70 var_38          = dword ptr -38h
.text:00408A70 var_34          = dword ptr -34h
.text:00408A70 var_30          = dword ptr -30h
.text:00408A70 var_2C          = dword ptr -2Ch
.text:00408A70 arg_0           = dword ptr  4
.text:00408A70 arg_4           = dword ptr  8
.text:00408A70 arg_8           = dword ptr  0Ch
.text:00408A70
.text:00408A70                 push    ebp
.text:00408A71                 xor     eax, eax
.text:00408A73                 mov     ecx, 8
.text:00408A78                 push    edi
.text:00408A79                 push    esi
.text:00408A7A                 push    ebx
.text:00408A7B                 sub     esp, 0ACh
.text:00408A81                 mov     ebp, [esp+0BCh+arg_4]
.text:00408A88                 cld
.text:00408A89                 lea     edi, [esp+0BCh+var_A8]
.text:00408A8D                 mov     [esp+0BCh+var_AC], ebp
.text:00408A91                 rep stosd
.text:00408A93                 mov     eax, [esp+0BCh+var_8C]
.text:00408A97                 mov     edi, [esp+0BCh+var_AC]
.text:00408A9B                 mov     esi, [esp+0BCh+var_A8]
.text:00408A9F                 mov     [esp+0BCh+var_5C], eax
.text:00408AA3                 mov     ebp, [esp+0BCh+var_A4]
.text:00408AA7                 mov     eax, [esp+0BCh+var_AC]
.text:00408AAB                 mov     [esp+0BCh+var_7C], edi
.text:00408AAF                 mov     ecx, [esp+0BCh+var_94]
.text:00408AB3                 mov     edi, [esp+0BCh+var_A0]
.text:00408AB7                 mov     [esp+0BCh+var_78], esi
.text:00408ABB                 mov     edx, [esp+0BCh+var_90]
.text:00408ABF                 mov     esi, [esp+0BCh+var_9C]
.text:00408AC3                 mov     [esp+0BCh+var_4C], eax
.text:00408AC7                 mov     ebx, [esp+0BCh+var_98]
.text:00408ACB                 mov     eax, [esp+0BCh+var_A8]
.text:00408ACF                 mov     [esp+0BCh+var_74], ebp
.text:00408AD3                 mov     [esp+0BCh+var_70], edi
.text:00408AD7                 mov     [esp+0BCh+var_6C], esi
.text:00408ADB                 mov     [esp+0BCh+var_68], ebx
.text:00408ADF                 mov     [esp+0BCh+var_64], ecx
.text:00408AE3                 mov     [esp+0BCh+var_60], edx
.text:00408AE7                 mov     [esp+0BCh+var_48], eax
.text:00408AEB                 mov     [esp+0BCh+var_44], ebp
.text:00408AEF                 mov     [esp+0BCh+var_40], edi
.text:00408AF3                 mov     [esp+0BCh+var_3C], esi
.text:00408AFA                 mov     [esp+0BCh+var_38], ebx
.text:00408B01                 mov     ebx, [esp+0BCh+var_8C]
.text:00408B05                 mov     [esp+0BCh+var_30], edx
.text:00408B0C                 mov     edx, [esp+0BCh+arg_8]
.text:00408B13                 mov     [esp+0BCh+var_34], ecx
.text:00408B1A                 lea     ecx, [esp+0BCh+var_4C]
.text:00408B1E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00408B22                 mov     edx, [esp+0BCh+arg_0]
.text:00408B29                 mov     [esp+0BCh+var_2C], ebx
.text:00408B30                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00408B34                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00408B3C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00408B3F                 call    sub_408E80
.text:00408B44                 add     esp, 0ACh
.text:00408B4A                 pop     ebx
.text:00408B4B                 pop     esi
.text:00408B4C                 pop     edi
.text:00408B4D                 pop     ebp
.text:00408B4E                 retn
.text:00408B4E sub_408A70      endp
.text:00408B4E
.text:00408B4E ; ---------------------------------------------------------------------------
.text:00408B4F                 align 10h
.text:00408B50                 push    ebp
.text:00408B51                 xor     eax, eax
.text:00408B53                 mov     ecx, 8
.text:00408B58                 push    edi
.text:00408B59                 push    esi
.text:00408B5A                 push    ebx
.text:00408B5B                 sub     esp, 0ACh
.text:00408B61                 mov     edx, [esp+0C4h]
.text:00408B68                 cld
.text:00408B69                 lea     edi, [esp+14h]
.text:00408B6D                 mov     [esp+10h], edx
.text:00408B71                 rep stosd
.text:00408B73                 mov     eax, [esp+30h]
.text:00408B77                 mov     ebp, [esp+10h]
.text:00408B7B                 mov     edi, [esp+14h]
.text:00408B7F                 mov     [esp+60h], eax
.text:00408B83                 mov     esi, [esp+20h]
.text:00408B87                 mov     eax, [esp+10h]
.text:00408B8B                 mov     [esp+40h], ebp
.text:00408B8F                 mov     ecx, [esp+28h]
.text:00408B93                 mov     ebp, [esp+18h]
.text:00408B97                 mov     [esp+44h], edi
.text:00408B9B                 mov     edx, [esp+2Ch]
.text:00408B9F                 mov     edi, [esp+1Ch]
.text:00408BA3                 mov     [esp+70h], eax
.text:00408BA7                 mov     ebx, [esp+24h]
.text:00408BAB                 mov     eax, [esp+14h]
.text:00408BAF                 mov     [esp+48h], ebp
.text:00408BB3                 mov     [esp+4Ch], edi
.text:00408BB7                 mov     [esp+50h], esi
.text:00408BBB                 mov     [esp+54h], ebx
.text:00408BBF                 mov     [esp+58h], ecx
.text:00408BC3                 mov     [esp+5Ch], edx
.text:00408BC7                 mov     [esp+74h], eax
.text:00408BCB                 mov     [esp+78h], ebp
.text:00408BCF                 mov     [esp+7Ch], edi
.text:00408BD3                 mov     [esp+80h], esi
.text:00408BDA                 mov     [esp+84h], ebx
.text:00408BE1                 mov     esi, [esp+30h]
.text:00408BE5                 lea     ebx, [esp+70h]
.text:00408BE9                 mov     [esp+8Ch], edx
.text:00408BF0                 mov     edx, [esp+0C8h]
.text:00408BF7                 mov     [esp+88h], ecx
.text:00408BFE                 mov     ecx, [esp+0CCh]
.text:00408C05                 mov     [esp+4], edx
.text:00408C09                 mov     edx, [esp+0C0h]
.text:00408C10                 mov     [esp+90h], esi
.text:00408C17                 mov     [esp+0Ch], ebx
.text:00408C1B                 mov     [esp+8], ecx
.text:00408C1F                 mov     [esp], edx
.text:00408C22                 call    sub_408E80
.text:00408C27                 add     esp, 0ACh
.text:00408C2D                 pop     ebx
.text:00408C2E                 pop     esi
.text:00408C2F                 pop     edi
.text:00408C30                 pop     ebp
.text:00408C31                 retn
.text:00408C31 ; ---------------------------------------------------------------------------
.text:00408C32                 align 10h
.text:00408C40                 push    ebp
.text:00408C41                 xor     eax, eax
.text:00408C43                 mov     ecx, 8
.text:00408C48                 push    edi
.text:00408C49                 push    esi
.text:00408C4A                 push    ebx
.text:00408C4B                 sub     esp, 0ACh
.text:00408C51                 mov     edi, [esp+0C0h]
.text:00408C58                 cld
.text:00408C59                 mov     [esp+10h], edi
.text:00408C5D                 lea     edi, [esp+14h]
.text:00408C61                 rep stosd
.text:00408C63                 mov     eax, [esp+30h]
.text:00408C67                 mov     esi, [esp+10h]
.text:00408C6B                 mov     ebx, [esp+14h]
.text:00408C6F                 mov     [esp+60h], eax
.text:00408C73                 mov     ebp, [esp+18h]
.text:00408C77                 mov     eax, [esp+10h]
.text:00408C7B                 mov     [esp+40h], esi
.text:00408C7F                 mov     edi, [esp+1Ch]
.text:00408C83                 mov     esi, [esp+20h]
.text:00408C87                 mov     [esp+44h], ebx
.text:00408C8B                 mov     ecx, [esp+28h]
.text:00408C8F                 mov     edx, [esp+2Ch]
.text:00408C93                 mov     [esp+70h], eax
.text:00408C97                 mov     ebx, [esp+24h]
.text:00408C9B                 mov     eax, [esp+14h]
.text:00408C9F                 mov     [esp+48h], ebp
.text:00408CA3                 mov     [esp+4Ch], edi
.text:00408CA7                 mov     [esp+50h], esi
.text:00408CAB                 mov     [esp+54h], ebx
.text:00408CAF                 mov     [esp+58h], ecx
.text:00408CB3                 mov     [esp+5Ch], edx
.text:00408CB7                 mov     [esp+74h], eax
.text:00408CBB                 mov     [esp+78h], ebp
.text:00408CBF                 mov     [esp+7Ch], edi
.text:00408CC3                 mov     [esp+80h], esi
.text:00408CCA                 mov     [esp+84h], ebx
.text:00408CD1                 mov     [esp+8Ch], edx
.text:00408CD8                 lea     edx, [esp+70h]
.text:00408CDC                 mov     [esp+88h], ecx
.text:00408CE3                 mov     ecx, [esp+30h]
.text:00408CE7                 mov     [esp+0Ch], edx
.text:00408CEB                 mov     edx, [esp+0C4h]
.text:00408CF2                 mov     [esp+90h], ecx
.text:00408CF9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408D01                 mov     [esp+4], edx
.text:00408D05                 mov     dword ptr [esp], 0
.text:00408D0C                 call    sub_408E80
.text:00408D11                 add     esp, 0ACh
.text:00408D17                 pop     ebx
.text:00408D18                 pop     esi
.text:00408D19                 pop     edi
.text:00408D1A                 pop     ebp
.text:00408D1B                 retn
.text:00408D1B ; ---------------------------------------------------------------------------
.text:00408D1C                 align 10h
.text:00408D20                 push    edi
.text:00408D21                 push    esi
.text:00408D22                 push    ebx
.text:00408D23                 sub     esp, 40h
.text:00408D26                 mov     edx, ds:dword_41421C
.text:00408D2C                 mov     ebx, ds:dword_414210
.text:00408D32                 mov     esi, ds:dword_414218
.text:00408D38                 mov     edi, ds:dword_414214
.text:00408D3E                 mov     [esp+1Ch], edx
.text:00408D42                 mov     ecx, ds:dword_414220
.text:00408D48                 mov     edx, ds:dword_414230
.text:00408D4E                 mov     [esp+10h], ebx
.text:00408D52                 mov     ebx, ds:dword_414224
.text:00408D58                 mov     [esp+30h], edx
.text:00408D5C                 movzx   edx, byte ptr [esp+54h]
.text:00408D61                 mov     [esp+18h], esi
.text:00408D65                 mov     esi, ds:dword_41422C
.text:00408D6B                 mov     [esp+14h], edi
.text:00408D6F                 mov     edi, ds:dword_414228
.text:00408D75                 mov     [esp+20h], ecx
.text:00408D79                 mov     cl, dl
.text:00408D7B                 shr     cl, 5
.text:00408D7E                 mov     [esp+24h], ebx
.text:00408D82                 movzx   ebx, cl
.text:00408D85                 mov     [esp+2Ch], esi
.text:00408D89                 lea     esi, [esp+10h]
.text:00408D8D                 mov     [esp+28h], edi
.text:00408D91                 lea     edi, [esi+ebx*4]
.text:00408D94                 mov     ebx, edx
.text:00408D96                 mov     edx, [edi+4]
.text:00408D99                 and     ebx, 1Fh
.text:00408D9C                 mov     cl, bl
.text:00408D9E                 mov     eax, edx
.text:00408DA0                 shr     eax, cl
.text:00408DA2                 and     eax, 1
.text:00408DA5                 xor     eax, 1
.text:00408DA8                 shl     eax, cl
.text:00408DAA                 xor     edx, eax
.text:00408DAC                 mov     [edi+4], edx
.text:00408DAF                 mov     edx, [esp+50h]
.text:00408DB3                 mov     [esp+0Ch], esi
.text:00408DB7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408DBF                 mov     [esp+4], edx
.text:00408DC3                 mov     dword ptr [esp], 0
.text:00408DCA                 call    sub_408E80
.text:00408DCF                 add     esp, 40h
.text:00408DD2                 pop     ebx
.text:00408DD3                 pop     esi
.text:00408DD4                 pop     edi
.text:00408DD5                 retn
.text:00408DD5 ; ---------------------------------------------------------------------------
.text:00408DD6                 align 10h
.text:00408DE0
.text:00408DE0 ; =============== S U B R O U T I N E =======================================
.text:00408DE0
.text:00408DE0
.text:00408DE0 ; int __cdecl sub_408DE0(char *)
.text:00408DE0 sub_408DE0      proc near               ; CODE XREF: sub_4065C0+64↑p
.text:00408DE0
.text:00408DE0 var_4C          = dword ptr -4Ch
.text:00408DE0 var_48          = dword ptr -48h
.text:00408DE0 var_44          = dword ptr -44h
.text:00408DE0 var_40          = dword ptr -40h
.text:00408DE0 var_3C          = dword ptr -3Ch
.text:00408DE0 var_38          = dword ptr -38h
.text:00408DE0 var_34          = dword ptr -34h
.text:00408DE0 var_30          = dword ptr -30h
.text:00408DE0 var_2C          = dword ptr -2Ch
.text:00408DE0 var_28          = dword ptr -28h
.text:00408DE0 var_24          = dword ptr -24h
.text:00408DE0 var_20          = dword ptr -20h
.text:00408DE0 var_1C          = dword ptr -1Ch
.text:00408DE0 arg_0           = dword ptr  4
.text:00408DE0
.text:00408DE0                 sub     esp, 4Ch
.text:00408DE3                 mov     ecx, ds:dword_414210
.text:00408DE9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00408DF1                 mov     edx, ds:dword_414214
.text:00408DF7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00408DFE                 mov     [esp+4Ch+var_3C], ecx
.text:00408E02                 mov     ecx, ds:dword_41421C
.text:00408E08                 mov     [esp+4Ch+var_38], edx
.text:00408E0C                 mov     edx, ds:dword_414218
.text:00408E12                 mov     [esp+4Ch+var_30], ecx
.text:00408E16                 mov     ecx, ds:dword_414220
.text:00408E1C                 mov     eax, edx
.text:00408E1E                 shr     eax, 1Ah
.text:00408E21                 and     eax, 1
.text:00408E24                 xor     eax, 1
.text:00408E27                 mov     [esp+4Ch+var_2C], ecx
.text:00408E2B                 shl     eax, 1Ah
.text:00408E2E                 mov     ecx, ds:dword_414224
.text:00408E34                 xor     edx, eax
.text:00408E36                 mov     [esp+4Ch+var_34], edx
.text:00408E3A                 mov     edx, [esp+4Ch+arg_0]
.text:00408E3E                 mov     [esp+4Ch+var_28], ecx
.text:00408E42                 mov     ecx, ds:dword_414228
.text:00408E48                 mov     [esp+4Ch+var_48], edx ; char *
.text:00408E4C                 mov     [esp+4Ch+var_24], ecx
.text:00408E50                 mov     ecx, ds:dword_41422C
.text:00408E56                 mov     [esp+4Ch+var_20], ecx
.text:00408E5A                 mov     ecx, ds:dword_414230
.text:00408E60                 mov     [esp+4Ch+var_1C], ecx
.text:00408E64                 lea     ecx, [esp+4Ch+var_3C]
.text:00408E68                 mov     [esp+4Ch+var_40], ecx ; int
.text:00408E6C                 call    sub_408E80
.text:00408E71                 add     esp, 4Ch
.text:00408E74                 retn
.text:00408E74 sub_408DE0      endp
.text:00408E74
.text:00408E74 ; ---------------------------------------------------------------------------
.text:00408E75                 align 10h
.text:00408E80
.text:00408E80 ; =============== S U B R O U T I N E =======================================
.text:00408E80
.text:00408E80
.text:00408E80 ; int __cdecl sub_408E80(int, char *, int, int)
.text:00408E80 sub_408E80      proc near               ; CODE XREF: .text:00408A32↑p
.text:00408E80                                         ; .text:00408A62↑p ...
.text:00408E80
.text:00408E80 Block           = dword ptr -2Ch
.text:00408E80 var_28          = dword ptr -28h
.text:00408E80 Str             = dword ptr -24h
.text:00408E80 var_20          = dword ptr -20h
.text:00408E80 var_1C          = dword ptr -1Ch
.text:00408E80 var_18          = dword ptr -18h
.text:00408E80 var_14          = dword ptr -14h
.text:00408E80 arg_0           = dword ptr  4
.text:00408E80 arg_4           = dword ptr  8
.text:00408E80 arg_8           = dword ptr  0Ch
.text:00408E80 arg_C           = dword ptr  10h
.text:00408E80
.text:00408E80                 push    ebp
.text:00408E81                 push    edi
.text:00408E82                 push    esi
.text:00408E83                 push    ebx
.text:00408E84                 sub     esp, 1Ch
.text:00408E87                 call    _errno
.text:00408E8C                 mov     edx, [eax]
.text:00408E8E                 mov     eax, [esp+2Ch+arg_0]
.text:00408E92                 mov     [esp+2Ch+var_14], edx
.text:00408E96                 test    eax, eax
.text:00408E98                 js      loc_40903A
.text:00408E9E                 mov     eax, [esp+2Ch+arg_0]
.text:00408EA2                 cmp     dword_413050, eax
.text:00408EA8                 ja      short loc_408F20
.text:00408EAA                 mov     esi, eax
.text:00408EAC                 inc     esi
.text:00408EAD                 cmp     esi, 1FFFFFFFh
.text:00408EB3                 ja      loc_40903F
.text:00408EB9                 mov     ebx, off_41305C
.text:00408EBF                 cmp     ebx, offset dword_413054
.text:00408EC5                 jz      loc_409011
.text:00408ECB
.text:00408ECB loc_408ECB:                             ; CODE XREF: sub_408E80+1B5↓j
.text:00408ECB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00408ECE                 lea     ecx, ds:0[esi*8]
.text:00408ED5                 mov     ebp, esi
.text:00408ED7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00408EDB                 call    sub_404D90
.text:00408EE0                 mov     off_41305C, eax
.text:00408EE5                 mov     ebx, dword_413050
.text:00408EEB                 sub     ebp, ebx
.text:00408EED                 lea     edi, [eax+ebx*8]
.text:00408EF0                 lea     eax, ds:0[ebp*8]
.text:00408EF7                 cmp     eax, 7
.text:00408EFA                 jbe     short loc_408F10
.text:00408EFC                 test    edi, 4
.text:00408F02                 jz      short loc_408F10
.text:00408F04                 mov     dword ptr [edi], 0
.text:00408F0A                 sub     eax, 4
.text:00408F0D                 add     edi, 4
.text:00408F10
.text:00408F10 loc_408F10:                             ; CODE XREF: sub_408E80+7A↑j
.text:00408F10                                         ; sub_408E80+82↑j
.text:00408F10                 cld
.text:00408F11                 mov     ecx, eax
.text:00408F13                 shr     ecx, 2
.text:00408F16                 xor     eax, eax
.text:00408F18                 rep stosd
.text:00408F1A                 mov     dword_413050, esi
.text:00408F20
.text:00408F20 loc_408F20:                             ; CODE XREF: sub_408E80+28↑j
.text:00408F20                 mov     esi, off_41305C
.text:00408F26                 mov     eax, [esp+2Ch+arg_0]
.text:00408F2A                 mov     ebp, [esi+eax*8]
.text:00408F2D                 mov     edi, [esi+eax*8+4]
.text:00408F31                 mov     esi, [esp+2Ch+arg_C]
.text:00408F35                 test    esi, esi
.text:00408F37                 jz      loc_409007
.text:00408F3D
.text:00408F3D loc_408F3D:                             ; CODE XREF: sub_408E80+18C↓j
.text:00408F3D                 call    _errno
.text:00408F42                 mov     ebx, [eax]
.text:00408F44                 mov     [esp+2Ch+var_18], esi ; int
.text:00408F48                 mov     ecx, [esi]
.text:00408F4A                 mov     [esp+2Ch+Block], edi ; int
.text:00408F4D                 mov     edx, [esp+2Ch+arg_8]
.text:00408F51                 mov     [esp+2Ch+var_28], ebp ; int
.text:00408F55                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408F59                 mov     ecx, [esp+2Ch+arg_4]
.text:00408F5D                 mov     [esp+2Ch+var_20], edx ; int
.text:00408F61                 mov     [esp+2Ch+Str], ecx ; Str
.text:00408F65                 call    sub_407D40
.text:00408F6A                 mov     esi, eax
.text:00408F6C                 call    _errno
.text:00408F71                 mov     [eax], ebx
.text:00408F73                 cmp     ebp, esi
.text:00408F75                 ja      short loc_408FEB
.text:00408F77                 lea     ebp, [esi+1]
.text:00408F7A                 mov     ebx, off_41305C
.text:00408F80                 cmp     edi, offset unk_414110
.text:00408F86                 mov     esi, [esp+2Ch+arg_0]
.text:00408F8A                 mov     [ebx+esi*8], ebp
.text:00408F8D                 jz      short loc_408F9D
.text:00408F8F                 mov     [esp+2Ch+Block], edi ; Block
.text:00408F92                 call    free
.text:00408F97                 mov     ebx, off_41305C
.text:00408F9D
.text:00408F9D loc_408F9D:                             ; CODE XREF: sub_408E80+10D↑j
.text:00408F9D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00408FA0                 call    sub_404D00
.text:00408FA5                 mov     esi, [esp+2Ch+arg_C]
.text:00408FA9                 mov     edi, eax
.text:00408FAB                 mov     eax, [esp+2Ch+arg_0]
.text:00408FAF                 test    esi, esi
.text:00408FB1                 mov     [ebx+eax*8+4], edi
.text:00408FB5                 jz      short loc_409000
.text:00408FB7
.text:00408FB7 loc_408FB7:                             ; CODE XREF: sub_408E80+185↓j
.text:00408FB7                 call    _errno
.text:00408FBC                 mov     ebx, [eax]
.text:00408FBE                 mov     [esp+2Ch+var_18], esi ; int
.text:00408FC2                 mov     ecx, [esi]
.text:00408FC4                 mov     [esp+2Ch+Block], edi ; int
.text:00408FC7                 mov     edx, [esp+2Ch+arg_8]
.text:00408FCB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00408FCF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408FD3                 mov     ecx, [esp+2Ch+arg_4]
.text:00408FD7                 mov     [esp+2Ch+var_20], edx ; int
.text:00408FDB                 mov     [esp+2Ch+Str], ecx ; Str
.text:00408FDF                 call    sub_407D40
.text:00408FE4                 call    _errno
.text:00408FE9                 mov     [eax], ebx
.text:00408FEB
.text:00408FEB loc_408FEB:                             ; CODE XREF: sub_408E80+F5↑j
.text:00408FEB                 call    _errno
.text:00408FF0                 mov     ebp, [esp+2Ch+var_14]
.text:00408FF4                 mov     [eax], ebp
.text:00408FF6                 add     esp, 1Ch
.text:00408FF9                 mov     eax, edi
.text:00408FFB                 pop     ebx
.text:00408FFC                 pop     esi
.text:00408FFD                 pop     edi
.text:00408FFE                 pop     ebp
.text:00408FFF                 retn
.text:00409000 ; ---------------------------------------------------------------------------
.text:00409000
.text:00409000 loc_409000:                             ; CODE XREF: sub_408E80+135↑j
.text:00409000                 mov     esi, offset dword_414210
.text:00409005                 jmp     short loc_408FB7
.text:00409007 ; ---------------------------------------------------------------------------
.text:00409007
.text:00409007 loc_409007:                             ; CODE XREF: sub_408E80+B7↑j
.text:00409007                 mov     esi, offset dword_414210
.text:0040900C                 jmp     loc_408F3D
.text:00409011 ; ---------------------------------------------------------------------------
.text:00409011
.text:00409011 loc_409011:                             ; CODE XREF: sub_408E80+45↑j
.text:00409011                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00409018                 call    sub_404D00
.text:0040901D                 mov     off_41305C, eax
.text:00409022                 mov     edi, dword_413054
.text:00409028                 mov     ebx, eax
.text:0040902A                 mov     ecx, off_413058
.text:00409030                 mov     [eax], edi
.text:00409032                 mov     [eax+4], ecx
.text:00409035                 jmp     loc_408ECB
.text:0040903A ; ---------------------------------------------------------------------------
.text:0040903A
.text:0040903A loc_40903A:                             ; CODE XREF: sub_408E80+18↑j
.text:0040903A                 call    abort
.text:0040903F ; ---------------------------------------------------------------------------
.text:0040903F
.text:0040903F loc_40903F:                             ; CODE XREF: sub_408E80+33↑j
.text:0040903F                 call    sub_4069C0
.text:0040903F sub_408E80      endp
.text:0040903F
.text:0040903F ; ---------------------------------------------------------------------------
.text:00409044                 align 10h
.text:00409050
.text:00409050 loc_409050:                             ; DATA XREF: sub_4090E0:loc_409160↓o
.text:00409050                                         ; sub_4090E0:loc_4091AB↓o ...
.text:00409050                 das
.text:00409051                 add     [eax-6F6F6F70h], dl
.text:00409057                 nop
.text:00409058                 nop
.text:00409059                 nop
.text:0040905A                 nop
.text:0040905B                 nop
.text:0040905C                 nop
.text:0040905D                 nop
.text:0040905E                 nop
.text:0040905F                 nop
.text:00409060                 nop
.text:00409061                 nop
.text:00409062                 nop
.text:00409063                 nop
.text:00409064                 nop
.text:00409065                 nop
.text:00409066                 nop
.text:00409067                 nop
.text:00409068                 nop
.text:00409069                 nop
.text:0040906A                 nop
.text:0040906B                 nop
.text:0040906C                 nop
.text:0040906D                 nop
.text:0040906E                 nop
.text:0040906F                 nop
.text:00409070
.text:00409070 loc_409070:                             ; DATA XREF: sub_4090E0+22E↓o
.text:00409070                                         ; sub_4090E0+5CB↓o ...
.text:00409070                 db      2Eh, 2Eh
.text:00409070                 das
.text:00409073                 db      2Eh, 2Eh
.text:00409073                 das
.text:00409076                 arpl    [edi+72h], bp
.text:00409079                 db      65h
.text:00409079                 jnz     short near ptr loc_4090EA+6
.text:0040907C                 imul    ebp, [ebx+esi*2+2Dh], 2E332E35h
.text:00409084                 xor     ds:2F637273h, ch
.text:0040908A                 insb
.text:0040908B                 imul    esp, [edx+2Fh], 69646863h
.text:00409092                 jb      short near ptr loc_4090C0+1
.text:00409094                 insb
.text:00409095                 outsd
.text:00409096                 outsb
.text:00409097                 arpl    cs:[bx+si], ax
.text:0040909B
.text:0040909B loc_40909B:                             ; DATA XREF: sub_4090E0+236↓o
.text:0040909B                 insb
.text:0040909C                 outs    dx, byte ptr gs:[esi]
.text:0040909E                 and     ds:7473203Dh, bh
.text:004090A4                 jb      short loc_409109
.text:004090A6                 jnb     short loc_409118
.text:004090A8                 outsb
.text:004090A9                 and     [eax], ch
.text:004090AB                 jnb     short near ptr loc_40911D+4
.text:004090AD                 popa
.text:004090AE                 jb      short near ptr loc_409122+2
.text:004090B0                 sub     al, 20h ; ' '
.text:004090B2                 and     ch, [edi]
.text:004090B4                 and     ch, [ecx]
.text:004090B6                 add     [edx], ch
.text:004090B8                 and     fs:2F27203Dh, bh
.text:004090BF                 daa
.text:004090C0
.text:004090C0 loc_4090C0:                             ; CODE XREF: .text:00409092↑j
.text:004090C0                 and     [esp+edi*2+20h], bh
.text:004090C4                 sub     ah, [eax+3Dh]
.text:004090C8                 cmp     eax, 305C2720h
.text:004090CD                 daa
.text:004090CE                 add     [eax], dh
.text:004090D0                 and     [eax], bh
.text:004090D3                 insb
.text:004090D4                 outs    dx, byte ptr gs:[esi]
.text:004090D6                 add     [ecx+27BC8DF6h], cl
.text:004090D6 ; ---------------------------------------------------------------------------
.text:004090DC                 dd 0
.text:004090E0
.text:004090E0 ; =============== S U B R O U T I N E =======================================
.text:004090E0
.text:004090E0
.text:004090E0 ; int __cdecl sub_4090E0(LPCSTR)
.text:004090E0 sub_4090E0      proc near               ; CODE XREF: sub_4066E0+17↑j
.text:004090E0
.text:004090E0 Str             = dword ptr -14Ch
.text:004090E0 Control         = dword ptr -148h
.text:004090E0 MaxCount        = dword ptr -144h
.text:004090E0 var_130         = dword ptr -130h
.text:004090E0 var_12C         = byte ptr -12Ch
.text:004090E0 var_29          = byte ptr -29h
.text:004090E0 var_28          = dword ptr -28h
.text:004090E0 FileHandle      = dword ptr -24h
.text:004090E0 arg_0           = dword ptr  4
.text:004090E0
.text:004090E0                 push    ebp
.text:004090E1                 push    edi
.text:004090E2                 push    esi
.text:004090E3                 push    ebx
.text:004090E4                 sub     esp, 13Ch
.text:004090EA
.text:004090EA loc_4090EA:                             ; CODE XREF: .text:00409079↑j
.text:004090EA                 mov     esi, [esp+14Ch+arg_0]
.text:004090F1                 mov     [esp+14Ch+Str], esi ; LPCSTR
.text:004090F4                 call    sub_40BD90
.text:004090F9                 test    eax, eax
.text:004090FB                 mov     ebx, eax
.text:004090FD                 jnz     short loc_409110
.text:004090FF
.text:004090FF loc_4090FF:                             ; CODE XREF: sub_4090E0:loc_409118↓j
.text:004090FF                 mov     eax, ebx
.text:00409101
.text:00409101 loc_409101:                             ; CODE XREF: sub_4090E0+214↓j
.text:00409101                                         ; sub_4090E0+2C7↓j
.text:00409101                 add     esp, 13Ch
.text:00409107                 pop     ebx
.text:00409108                 pop     esi
.text:00409109
.text:00409109 loc_409109:                             ; CODE XREF: .text:004090A4↑j
.text:00409109                 pop     edi
.text:0040910A                 pop     ebp
.text:0040910B                 retn
.text:0040910B ; ---------------------------------------------------------------------------
.text:0040910C                 align 10h
.text:00409110
.text:00409110 loc_409110:                             ; CODE XREF: sub_4090E0+1D↑j
.text:00409110                 call    _errno
.text:00409115                 cmp     dword ptr [eax], 26h ; '&'
.text:00409118
.text:00409118 loc_409118:                             ; CODE XREF: .text:004090A6↑j
.text:00409118                 jnz     short loc_4090FF
.text:0040911A                 mov     [esp+14Ch+Str], esi ; Str
.text:0040911D
.text:0040911D loc_40911D:                             ; CODE XREF: .text:004090AB↑j
.text:0040911D                 call    strlen
.text:00409122
.text:00409122 loc_409122:                             ; CODE XREF: .text:004090AE↑j
.text:00409122                 lea     ecx, [eax+esi]
.text:00409125                 test    eax, eax
.text:00409127                 lea     edx, [esp+14Ch+var_12C]
.text:0040912B                 mov     [esp+14Ch+var_130], ecx
.text:0040912F                 mov     ecx, 0FFD19553h
.text:00409134                 mov     [esp+14Ch+var_28], edx
.text:0040913B                 mov     [esp+14Ch+FileHandle], ecx
.text:00409142                 jz      loc_409740
.text:00409148                 cmp     byte ptr [esi], 2Fh ; '/'
.text:0040914B                 jz      loc_4094E0
.text:00409151                 mov     ebp, esi
.text:00409153                 lea     esi, [esi+0]
.text:00409159                 lea     edi, [edi+0]
.text:00409160
.text:00409160 loc_409160:                             ; CODE XREF: sub_4090E0+16B↓j
.text:00409160                                         ; sub_4090E0+5B5↓j ...
.text:00409160                 mov     [esp+14Ch+Control], offset loc_409050 ; Control
.text:00409168                 mov     [esp+14Ch+Str], ebp ; Str
.text:0040916B                 call    strspn
.text:00409170                 lea     esi, [eax+ebp]
.text:00409173                 cmp     byte ptr [esi], 0
.text:00409176                 jz      loc_409450
.text:0040917C                 mov     eax, [esp+14Ch+var_130]
.text:00409180                 sub     eax, esi
.text:00409182                 cmp     eax, 103h
.text:00409187                 jle     loc_409322
.text:0040918D                 mov     [esp+14Ch+MaxCount], eax ; MaxCount
.text:00409191                 mov     ebx, eax
.text:00409193                 mov     [esp+14Ch+Control], 2Fh ; '/' ; Val
.text:0040919B                 mov     [esp+14Ch+Str], esi ; Buf
.text:0040919E                 call    memchr
.text:004091A3                 test    eax, eax
.text:004091A5                 jz      short loc_4091AB
.text:004091A7                 mov     ebx, eax
.text:004091A9                 sub     ebx, esi
.text:004091AB
.text:004091AB loc_4091AB:                             ; CODE XREF: sub_4090E0+C5↑j
.text:004091AB                 mov     [esp+14Ch+Control], offset loc_409050 ; Control
.text:004091B3                 mov     [esp+14Ch+Str], esi ; Str
.text:004091B6                 call    strcspn
.text:004091BB                 cmp     ebx, eax
.text:004091BD                 jnz     loc_409306
.text:004091C3                 mov     edx, [esp+14Ch+var_28]
.text:004091CA                 lea     ecx, [esp+14Ch+var_12C]
.text:004091CE                 xor     eax, eax
.text:004091D0                 lea     ebp, [ebx+esi]
.text:004091D3                 lea     edi, [esp+14Ch+var_29]
.text:004091DA                 cmp     ecx, edx
.text:004091DC                 jnb     short loc_4091E6
.text:004091DE                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:004091E2                 jz      short loc_4091E6
.text:004091E4                 mov     al, 1
.text:004091E6
.text:004091E6 loc_4091E6:                             ; CODE XREF: sub_4090E0+FC↑j
.text:004091E6                                         ; sub_4090E0+102↑j
.text:004091E6                 lea     edx, [ebx+1]
.text:004091E9                 mov     cl, al
.text:004091EB                 cmp     edx, 103h
.text:004091F1                 ja      loc_4092F9
.text:004091F7                 mov     edx, [esp+14Ch+var_28]
.text:004091FE                 movzx   eax, al
.text:00409201                 lea     eax, [ebx+eax+1]
.text:00409205                 sub     edi, edx
.text:00409207                 cmp     edi, eax
.text:00409209                 jnb     short loc_40921C
.text:0040920B                 lea     eax, [esp+14Ch+var_12C]
.text:0040920F                 cmp     edx, eax
.text:00409211                 jnz     short loc_409250
.text:00409213
.text:00409213 loc_409213:                             ; CODE XREF: sub_4090E0+1BC↓j
.text:00409213                 mov     edx, [esp+14Ch+var_28]
.text:0040921A                 xor     ecx, ecx
.text:0040921C
.text:0040921C loc_40921C:                             ; CODE XREF: sub_4090E0+129↑j
.text:0040921C                 test    cl, cl
.text:0040921E                 jz      short loc_409234
.text:00409220                 mov     byte ptr [edx], 2Fh ; '/'
.text:00409223                 mov     ecx, [esp+14Ch+var_28]
.text:0040922A                 inc     ecx
.text:0040922B                 mov     [esp+14Ch+var_28], ecx
.text:00409232                 mov     edx, ecx
.text:00409234
.text:00409234 loc_409234:                             ; CODE XREF: sub_4090E0+13E↑j
.text:00409234                 mov     [esp+14Ch+MaxCount], ebx
.text:00409238                 mov     [esp+14Ch+Control], esi
.text:0040923C
.text:0040923C loc_40923C:                             ; CODE XREF: sub_4090E0+480↓j
.text:0040923C                 mov     [esp+14Ch+Str], edx
.text:0040923F                 call    sub_40BE50
.text:00409244                 mov     [esp+14Ch+var_28], eax
.text:0040924B                 jmp     loc_409160
.text:00409250 ; ---------------------------------------------------------------------------
.text:00409250
.text:00409250 loc_409250:                             ; CODE XREF: sub_4090E0+131↑j
.text:00409250                 mov     byte ptr [edx], 0
.text:00409253                 mov     ecx, [esp+14Ch+FileHandle]
.text:0040925A                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:00409262                 mov     [esp+14Ch+Control], eax ; char *
.text:00409266                 mov     [esp+14Ch+Str], ecx ; int
.text:00409269                 call    sub_4098A0
.text:0040926E                 test    eax, eax
.text:00409270                 mov     edi, eax
.text:00409272                 js      short loc_4092A1
.text:00409274
.text:00409274 loc_409274:                             ; CODE XREF: sub_4090E0+1E4↓j
.text:00409274                 mov     eax, [esp+14Ch+FileHandle]
.text:0040927B                 cmp     eax, 0FFD19553h
.text:00409280                 jz      short loc_40928A
.text:00409282                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00409285                 call    _close
.text:0040928A
.text:0040928A loc_40928A:                             ; CODE XREF: sub_4090E0+1A0↑j
.text:0040928A                 mov     [esp+14Ch+FileHandle], edi
.text:00409291                 lea     edx, [esp+14Ch+var_12C]
.text:00409295                 mov     [esp+14Ch+var_28], edx
.text:0040929C                 jmp     loc_409213
.text:004092A1 ; ---------------------------------------------------------------------------
.text:004092A1
.text:004092A1 loc_4092A1:                             ; CODE XREF: sub_4090E0+192↑j
.text:004092A1                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:004092A9                 mov     edi, [esp+14Ch+FileHandle]
.text:004092B0                 lea     eax, [esp+14Ch+var_12C]
.text:004092B4                 mov     [esp+14Ch+Control], eax ; char *
.text:004092B8                 mov     [esp+14Ch+Str], edi ; int
.text:004092BB                 call    sub_4098A0
.text:004092C0                 test    eax, eax
.text:004092C2                 mov     edi, eax
.text:004092C4                 jns     short loc_409274
.text:004092C6
.text:004092C6 loc_4092C6:                             ; CODE XREF: sub_4090E0+224↓j
.text:004092C6                                         ; sub_4090E0+2A4↓j ...
.text:004092C6                 call    _errno
.text:004092CB                 mov     ebx, [eax]
.text:004092CD                 mov     eax, [esp+14Ch+FileHandle]
.text:004092D4                 test    eax, eax
.text:004092D6                 js      short loc_4092E8
.text:004092D8                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:004092DB                 call    _close
.text:004092E0                 test    eax, eax
.text:004092E2                 jnz     loc_40975C
.text:004092E8
.text:004092E8 loc_4092E8:                             ; CODE XREF: sub_4090E0+1F6↑j
.text:004092E8                 call    _errno
.text:004092ED                 mov     [eax], ebx
.text:004092EF                 mov     eax, 0FFFFFFFFh
.text:004092F4                 jmp     loc_409101
.text:004092F9 ; ---------------------------------------------------------------------------
.text:004092F9
.text:004092F9 loc_4092F9:                             ; CODE XREF: sub_4090E0+111↑j
.text:004092F9                                         ; sub_4090E0+54E↓j
.text:004092F9                 call    _errno
.text:004092FE                 mov     dword ptr [eax], 26h ; '&'
.text:00409304                 jmp     short loc_4092C6
.text:00409306 ; ---------------------------------------------------------------------------
.text:00409306
.text:00409306 loc_409306:                             ; CODE XREF: sub_4090E0+DD↑j
.text:00409306                 mov     [esp+14Ch+MaxCount], 105h
.text:0040930E                 mov     [esp+14Ch+Control], offset loc_409070
.text:00409316                 mov     [esp+14Ch+Str], offset loc_40909B
.text:0040931D
.text:0040931D loc_40931D:                             ; CODE XREF: sub_4090E0+5DA↓j
.text:0040931D                                         ; sub_4090E0+677↓j
.text:0040931D                 call    _assert
.text:00409322 ; ---------------------------------------------------------------------------
.text:00409322
.text:00409322 loc_409322:                             ; CODE XREF: sub_4090E0+A7↑j
.text:00409322                 mov     eax, [esp+14Ch+var_28]
.text:00409329                 lea     edx, [esp+14Ch+var_12C]
.text:0040932D                 cmp     eax, edx
.text:0040932F                 jnz     loc_4093D2
.text:00409335
.text:00409335 loc_409335:                             ; CODE XREF: sub_4090E0+33E↓j
.text:00409335                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040933D                 mov     ebx, [esp+14Ch+FileHandle]
.text:00409344                 mov     [esp+14Ch+Control], esi ; char *
.text:00409348                 mov     [esp+14Ch+Str], ebx ; int
.text:0040934B                 call    sub_4098A0
.text:00409350                 test    eax, eax
.text:00409352                 mov     ebx, eax
.text:00409354                 js      short loc_4093AC
.text:00409356
.text:00409356 loc_409356:                             ; CODE XREF: sub_4090E0+2EB↓j
.text:00409356                 mov     eax, [esp+14Ch+FileHandle]
.text:0040935D                 cmp     eax, 0FFD19553h
.text:00409362                 jz      short loc_40936C
.text:00409364                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00409367                 call    _close
.text:0040936C
.text:0040936C loc_40936C:                             ; CODE XREF: sub_4090E0+282↑j
.text:0040936C                 mov     [esp+14Ch+FileHandle], ebx
.text:00409373
.text:00409373 loc_409373:                             ; CODE XREF: sub_4090E0+37D↓j
.text:00409373                                         ; sub_4090E0+3CF↓j
.text:00409373                 mov     ebp, [esp+14Ch+FileHandle]
.text:0040937A                 mov     [esp+14Ch+Str], ebp
.text:0040937D                 call    sub_409A00
.text:00409382                 test    eax, eax
.text:00409384                 jnz     loc_4092C6
.text:0040938A                 mov     eax, [esp+14Ch+FileHandle]
.text:00409391                 test    eax, eax
.text:00409393                 js      short loc_4093A5
.text:00409395                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00409398                 call    _close
.text:0040939D                 test    eax, eax
.text:0040939F                 jnz     loc_40975C
.text:004093A5
.text:004093A5 loc_4093A5:                             ; CODE XREF: sub_4090E0+2B3↑j
.text:004093A5                 xor     eax, eax
.text:004093A7                 jmp     loc_409101
.text:004093AC ; ---------------------------------------------------------------------------
.text:004093AC
.text:004093AC loc_4093AC:                             ; CODE XREF: sub_4090E0+274↑j
.text:004093AC                 mov     [esp+14Ch+Control], esi ; char *
.text:004093B0                 mov     esi, [esp+14Ch+FileHandle]
.text:004093B7                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:004093BF                 mov     [esp+14Ch+Str], esi ; int
.text:004093C2                 call    sub_4098A0
.text:004093C7                 test    eax, eax
.text:004093C9                 mov     ebx, eax
.text:004093CB                 jns     short loc_409356
.text:004093CD                 jmp     loc_4092C6
.text:004093D2 ; ---------------------------------------------------------------------------
.text:004093D2
.text:004093D2 loc_4093D2:                             ; CODE XREF: sub_4090E0+24F↑j
.text:004093D2                 mov     byte ptr [eax], 0
.text:004093D5                 mov     ebp, [esp+14Ch+FileHandle]
.text:004093DC                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:004093E4                 mov     [esp+14Ch+Control], edx ; char *
.text:004093E8                 mov     [esp+14Ch+Str], ebp ; int
.text:004093EB                 call    sub_4098A0
.text:004093F0                 test    eax, eax
.text:004093F2                 mov     ebx, eax
.text:004093F4                 js      short loc_409423
.text:004093F6
.text:004093F6 loc_4093F6:                             ; CODE XREF: sub_4090E0+366↓j
.text:004093F6                 mov     eax, [esp+14Ch+FileHandle]
.text:004093FD                 cmp     eax, 0FFD19553h
.text:00409402                 jz      short loc_40940C
.text:00409404                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00409407                 call    _close
.text:0040940C
.text:0040940C loc_40940C:                             ; CODE XREF: sub_4090E0+322↑j
.text:0040940C                 mov     [esp+14Ch+FileHandle], ebx
.text:00409413                 lea     edi, [esp+14Ch+var_12C]
.text:00409417                 mov     [esp+14Ch+var_28], edi
.text:0040941E                 jmp     loc_409335
.text:00409423 ; ---------------------------------------------------------------------------
.text:00409423
.text:00409423 loc_409423:                             ; CODE XREF: sub_4090E0+314↑j
.text:00409423                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040942B                 mov     ecx, [esp+14Ch+FileHandle]
.text:00409432                 lea     eax, [esp+14Ch+var_12C]
.text:00409436                 mov     [esp+14Ch+Control], eax ; char *
.text:0040943A                 mov     [esp+14Ch+Str], ecx ; int
.text:0040943D                 call    sub_4098A0
.text:00409442                 test    eax, eax
.text:00409444                 mov     ebx, eax
.text:00409446                 jns     short loc_4093F6
.text:00409448                 jmp     loc_4092C6
.text:00409448 ; ---------------------------------------------------------------------------
.text:0040944D                 align 10h
.text:00409450
.text:00409450 loc_409450:                             ; CODE XREF: sub_4090E0+96↑j
.text:00409450                 mov     eax, [esp+14Ch+var_28]
.text:00409457                 lea     edx, [esp+14Ch+var_12C]
.text:0040945B                 cmp     eax, edx
.text:0040945D                 jz      loc_409373
.text:00409463                 mov     byte ptr [eax], 0
.text:00409466                 mov     esi, [esp+14Ch+FileHandle]
.text:0040946D                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:00409475                 mov     [esp+14Ch+Control], edx ; char *
.text:00409479                 mov     [esp+14Ch+Str], esi ; int
.text:0040947C                 call    sub_4098A0
.text:00409481                 test    eax, eax
.text:00409483                 mov     ebx, eax
.text:00409485                 js      short loc_4094B4
.text:00409487
.text:00409487 loc_409487:                             ; CODE XREF: sub_4090E0+3F7↓j
.text:00409487                 mov     eax, [esp+14Ch+FileHandle]
.text:0040948E                 cmp     eax, 0FFD19553h
.text:00409493                 jz      short loc_40949D
.text:00409495                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00409498                 call    _close
.text:0040949D
.text:0040949D loc_40949D:                             ; CODE XREF: sub_4090E0+3B3↑j
.text:0040949D                 mov     [esp+14Ch+FileHandle], ebx
.text:004094A4                 lea     edx, [esp+14Ch+var_12C]
.text:004094A8                 mov     [esp+14Ch+var_28], edx
.text:004094AF                 jmp     loc_409373
.text:004094B4 ; ---------------------------------------------------------------------------
.text:004094B4
.text:004094B4 loc_4094B4:                             ; CODE XREF: sub_4090E0+3A5↑j
.text:004094B4                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:004094BC                 mov     edi, [esp+14Ch+FileHandle]
.text:004094C3                 lea     ebx, [esp+14Ch+var_12C]
.text:004094C7                 mov     [esp+14Ch+Control], ebx ; char *
.text:004094CB                 mov     [esp+14Ch+Str], edi ; int
.text:004094CE                 call    sub_4098A0
.text:004094D3                 test    eax, eax
.text:004094D5                 mov     ebx, eax
.text:004094D7                 jns     short loc_409487
.text:004094D9                 jmp     loc_4092C6
.text:004094D9 ; ---------------------------------------------------------------------------
.text:004094DE                 align 10h
.text:004094E0
.text:004094E0 loc_4094E0:                             ; CODE XREF: sub_4090E0+6B↑j
.text:004094E0                 cmp     eax, 2
.text:004094E3                 jbe     short loc_4094EF
.text:004094E5                 cmp     byte ptr [esi+1], 2Fh ; '/'
.text:004094E9                 jz      loc_4095E0
.text:004094EF
.text:004094EF loc_4094EF:                             ; CODE XREF: sub_4090E0+403↑j
.text:004094EF                                         ; sub_4090E0+504↓j
.text:004094EF                 mov     edx, [esp+14Ch+var_28]
.text:004094F6                 lea     ebp, [esp+14Ch+var_12C]
.text:004094FA                 xor     eax, eax
.text:004094FC                 lea     ebx, [esp+14Ch+var_29]
.text:00409503                 cmp     ebp, edx
.text:00409505                 jnb     short loc_40950F
.text:00409507                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:0040950B                 jz      short loc_40950F
.text:0040950D                 mov     al, 1
.text:0040950F
.text:0040950F loc_40950F:                             ; CODE XREF: sub_4090E0+425↑j
.text:0040950F                                         ; sub_4090E0+42B↑j
.text:0040950F                 mov     edx, [esp+14Ch+var_28]
.text:00409516                 movzx   edi, al
.text:00409519                 mov     cl, al
.text:0040951B                 add     edi, 2
.text:0040951E                 sub     ebx, edx
.text:00409520                 cmp     ebx, edi
.text:00409522                 jnb     short loc_409535
.text:00409524                 lea     eax, [esp+14Ch+var_12C]
.text:00409528                 cmp     edx, eax
.text:0040952A                 jnz     short loc_409565
.text:0040952C
.text:0040952C loc_40952C:                             ; CODE XREF: sub_4090E0+4D1↓j
.text:0040952C                 mov     edx, [esp+14Ch+var_28]
.text:00409533                 xor     ecx, ecx
.text:00409535
.text:00409535 loc_409535:                             ; CODE XREF: sub_4090E0+442↑j
.text:00409535                 test    cl, cl
.text:00409537                 jz      short loc_40954D
.text:00409539                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040953C                 mov     ecx, [esp+14Ch+var_28]
.text:00409543                 inc     ecx
.text:00409544                 mov     [esp+14Ch+var_28], ecx
.text:0040954B                 mov     edx, ecx
.text:0040954D
.text:0040954D loc_40954D:                             ; CODE XREF: sub_4090E0+457↑j
.text:0040954D                 mov     [esp+14Ch+MaxCount], 1
.text:00409555                 lea     ebp, [esi+1]
.text:00409558                 mov     [esp+14Ch+Control], offset loc_409050
.text:00409560                 jmp     loc_40923C
.text:00409565 ; ---------------------------------------------------------------------------
.text:00409565
.text:00409565 loc_409565:                             ; CODE XREF: sub_4090E0+44A↑j
.text:00409565                 mov     byte ptr [edx], 0
.text:00409568                 mov     ebx, [esp+14Ch+FileHandle]
.text:0040956F                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:00409577                 mov     [esp+14Ch+Control], eax ; char *
.text:0040957B                 mov     [esp+14Ch+Str], ebx ; int
.text:0040957E                 call    sub_4098A0
.text:00409583                 test    eax, eax
.text:00409585                 mov     ebx, eax
.text:00409587                 js      short loc_4095B6
.text:00409589
.text:00409589 loc_409589:                             ; CODE XREF: sub_4090E0+4F9↓j
.text:00409589                 mov     eax, [esp+14Ch+FileHandle]
.text:00409590                 cmp     eax, 0FFD19553h
.text:00409595                 jz      short loc_40959F
.text:00409597                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040959A                 call    _close
.text:0040959F
.text:0040959F loc_40959F:                             ; CODE XREF: sub_4090E0+4B5↑j
.text:0040959F                 mov     [esp+14Ch+FileHandle], ebx
.text:004095A6                 lea     ebp, [esp+14Ch+var_12C]
.text:004095AA                 mov     [esp+14Ch+var_28], ebp
.text:004095B1                 jmp     loc_40952C
.text:004095B6 ; ---------------------------------------------------------------------------
.text:004095B6
.text:004095B6 loc_4095B6:                             ; CODE XREF: sub_4090E0+4A7↑j
.text:004095B6                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:004095BE                 mov     edx, [esp+14Ch+FileHandle]
.text:004095C5                 lea     eax, [esp+14Ch+var_12C]
.text:004095C9                 mov     [esp+14Ch+Control], eax ; char *
.text:004095CD                 mov     [esp+14Ch+Str], edx ; int
.text:004095D0                 call    sub_4098A0
.text:004095D5                 test    eax, eax
.text:004095D7                 mov     ebx, eax
.text:004095D9                 jns     short loc_409589
.text:004095DB                 jmp     loc_4092C6
.text:004095E0 ; ---------------------------------------------------------------------------
.text:004095E0
.text:004095E0 loc_4095E0:                             ; CODE XREF: sub_4090E0+409↑j
.text:004095E0                 cmp     byte ptr [esi+2], 2Fh ; '/'
.text:004095E4                 jz      loc_4094EF
.text:004095EA                 mov     [esp+14Ch+Control], offset loc_409050 ; Control
.text:004095F2                 lea     ebx, [esi+3]
.text:004095F5                 mov     [esp+14Ch+Str], ebx ; Str
.text:004095F8                 lea     ebx, [esp+14Ch+var_29]
.text:004095FF                 call    strcspn
.text:00409604                 mov     edx, [esp+14Ch+var_28]
.text:0040960B                 lea     ecx, [esp+14Ch+var_12C]
.text:0040960F                 lea     ebp, [eax+1]
.text:00409612                 lea     edi, [eax+3]
.text:00409615                 xor     eax, eax
.text:00409617                 cmp     ecx, edx
.text:00409619                 jnb     short loc_409623
.text:0040961B                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:0040961F                 jz      short loc_409623
.text:00409621                 mov     al, 1
.text:00409623
.text:00409623 loc_409623:                             ; CODE XREF: sub_4090E0+539↑j
.text:00409623                                         ; sub_4090E0+53F↑j
.text:00409623                 lea     edx, [edi+1]
.text:00409626                 mov     cl, al
.text:00409628                 cmp     edx, 103h
.text:0040962E                 ja      loc_4092F9
.text:00409634                 mov     edx, [esp+14Ch+var_28]
.text:0040963B                 movzx   eax, al
.text:0040963E                 lea     eax, [edi+eax+1]
.text:00409642                 sub     ebx, edx
.text:00409644                 cmp     ebx, eax
.text:00409646                 jnb     short loc_409659
.text:00409648                 lea     eax, [esp+14Ch+var_12C]
.text:0040964C                 cmp     edx, eax
.text:0040964E                 jnz     short loc_4096C0
.text:00409650
.text:00409650 loc_409650:                             ; CODE XREF: sub_4090E0+62C↓j
.text:00409650                 mov     edx, [esp+14Ch+var_28]
.text:00409657                 xor     ecx, ecx
.text:00409659
.text:00409659 loc_409659:                             ; CODE XREF: sub_4090E0+566↑j
.text:00409659                 test    cl, cl
.text:0040965B                 jz      short loc_409671
.text:0040965D                 mov     byte ptr [edx], 2Fh ; '/'
.text:00409660                 mov     ecx, [esp+14Ch+var_28]
.text:00409667                 inc     ecx
.text:00409668                 mov     [esp+14Ch+var_28], ecx
.text:0040966F                 mov     edx, ecx
.text:00409671
.text:00409671 loc_409671:                             ; CODE XREF: sub_4090E0+57B↑j
.text:00409671                 mov     [esp+14Ch+MaxCount], edi
.text:00409675                 lea     edi, [ebp+esi+0]
.text:00409679                 lea     ebp, [edi+2]
.text:0040967C                 mov     [esp+14Ch+Control], esi
.text:00409680                 mov     [esp+14Ch+Str], edx
.text:00409683                 call    sub_40BE50
.text:00409688                 mov     [esp+14Ch+var_28], eax
.text:0040968F                 movzx   eax, byte ptr [edi+2]
.text:00409693                 cmp     al, 2Fh ; '/'
.text:00409695                 jz      loc_409160
.text:0040969B                 test    al, al
.text:0040969D                 jz      loc_409160
.text:004096A3                 mov     [esp+14Ch+MaxCount], 0E1h ; 'á'
.text:004096AB                 mov     [esp+14Ch+Control], offset loc_409070
.text:004096B3                 mov     [esp+14Ch+Str], 4090B7h
.text:004096BA                 jmp     loc_40931D
.text:004096BA ; ---------------------------------------------------------------------------
.text:004096BF                 align 10h
.text:004096C0
.text:004096C0 loc_4096C0:                             ; CODE XREF: sub_4090E0+56E↑j
.text:004096C0                 mov     byte ptr [edx], 0
.text:004096C3                 mov     ecx, [esp+14Ch+FileHandle]
.text:004096CA                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:004096D2                 mov     [esp+14Ch+Control], eax ; char *
.text:004096D6                 mov     [esp+14Ch+Str], ecx ; int
.text:004096D9                 call    sub_4098A0
.text:004096DE                 test    eax, eax
.text:004096E0                 mov     ebx, eax
.text:004096E2                 js      short loc_409711
.text:004096E4
.text:004096E4 loc_4096E4:                             ; CODE XREF: sub_4090E0+654↓j
.text:004096E4                 mov     eax, [esp+14Ch+FileHandle]
.text:004096EB                 cmp     eax, 0FFD19553h
.text:004096F0                 jz      short loc_4096FA
.text:004096F2                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:004096F5                 call    _close
.text:004096FA
.text:004096FA loc_4096FA:                             ; CODE XREF: sub_4090E0+610↑j
.text:004096FA                 mov     [esp+14Ch+FileHandle], ebx
.text:00409701                 lea     edx, [esp+14Ch+var_12C]
.text:00409705                 mov     [esp+14Ch+var_28], edx
.text:0040970C                 jmp     loc_409650
.text:00409711 ; ---------------------------------------------------------------------------
.text:00409711
.text:00409711 loc_409711:                             ; CODE XREF: sub_4090E0+602↑j
.text:00409711                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:00409719                 mov     ebx, [esp+14Ch+FileHandle]
.text:00409720                 lea     eax, [esp+14Ch+var_12C]
.text:00409724                 mov     [esp+14Ch+Control], eax ; char *
.text:00409728                 mov     [esp+14Ch+Str], ebx ; int
.text:0040972B                 call    sub_4098A0
.text:00409730                 test    eax, eax
.text:00409732                 mov     ebx, eax
.text:00409734                 jns     short loc_4096E4
.text:00409736                 jmp     loc_4092C6
.text:00409736 ; ---------------------------------------------------------------------------
.text:0040973B                 align 10h
.text:00409740
.text:00409740 loc_409740:                             ; CODE XREF: sub_4090E0+62↑j
.text:00409740                 mov     [esp+14Ch+MaxCount], 0D0h ; 'Ð'
.text:00409748                 mov     [esp+14Ch+Control], offset loc_409070
.text:00409750                 mov     [esp+14Ch+Str], 4090CFh
.text:00409757                 jmp     loc_40931D
.text:0040975C ; ---------------------------------------------------------------------------
.text:0040975C
.text:0040975C loc_40975C:                             ; CODE XREF: sub_4090E0+202↑j
.text:0040975C                                         ; sub_4090E0+2BF↑j
.text:0040975C                 call    abort
.text:0040975C sub_4090E0      endp
.text:0040975C
.text:0040975C ; ---------------------------------------------------------------------------
.text:00409761                 align 10h
.text:00409770
.text:00409770 ; =============== S U B R O U T I N E =======================================
.text:00409770
.text:00409770
.text:00409770 sub_409770      proc near               ; CODE XREF: .text:004067A9↑p
.text:00409770                                         ; sub_406800+1F↑p
.text:00409770
.text:00409770 arg_0           = dword ptr  4
.text:00409770
.text:00409770                 mov     ecx, [esp+arg_0]
.text:00409774                 movzx   eax, byte ptr [ecx]
.text:00409777                 test    al, al
.text:00409779                 jz      short loc_409781
.text:0040977B                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:0040977F                 jz      short loc_4097C7
.text:00409781
.text:00409781 loc_409781:                             ; CODE XREF: sub_409770+9↑j
.text:00409781                                         ; sub_409770+5D↓j
.text:00409781                 test    al, al
.text:00409783                 mov     edx, ecx
.text:00409785                 jz      short loc_4097A0
.text:00409787                 movzx   eax, byte ptr [ecx]
.text:0040978A                 lea     esi, [esi+0]
.text:00409790
.text:00409790 loc_409790:                             ; CODE XREF: sub_409770+2E↓j
.text:00409790                 cmp     al, 2Fh ; '/'
.text:00409792                 jz      short loc_4097A3
.text:00409794                 cmp     al, 5Ch ; '\'
.text:00409796                 jz      short loc_4097A3
.text:00409798
.text:00409798 loc_409798:                             ; CODE XREF: sub_409770+45↓j
.text:00409798                 inc     edx
.text:00409799                 movzx   eax, byte ptr [edx]
.text:0040979C                 test    al, al
.text:0040979E                 jnz     short loc_409790
.text:004097A0
.text:004097A0 loc_4097A0:                             ; CODE XREF: sub_409770+15↑j
.text:004097A0                                         ; sub_409770+50↓j ...
.text:004097A0                 mov     eax, ecx
.text:004097A2                 retn
.text:004097A3 ; ---------------------------------------------------------------------------
.text:004097A3
.text:004097A3 loc_4097A3:                             ; CODE XREF: sub_409770+22↑j
.text:004097A3                                         ; sub_409770+26↑j ...
.text:004097A3                 inc     edx
.text:004097A4                 movzx   eax, byte ptr [edx]
.text:004097A7                 cmp     al, 2Fh ; '/'
.text:004097A9                 jz      short loc_4097A3
.text:004097AB                 cmp     al, 5Ch ; '\'
.text:004097AD                 jz      short loc_4097A3
.text:004097AF                 test    al, al
.text:004097B1                 jz      short loc_4097B7
.text:004097B3                 mov     ecx, edx
.text:004097B5                 jmp     short loc_409798
.text:004097B7 ; ---------------------------------------------------------------------------
.text:004097B7
.text:004097B7 loc_4097B7:                             ; CODE XREF: sub_409770+41↑j
.text:004097B7                 movzx   eax, byte ptr [ecx]
.text:004097BA                 cmp     al, 2Fh ; '/'
.text:004097BC                 jz      short loc_4097C2
.text:004097BE                 cmp     al, 5Ch ; '\'
.text:004097C0                 jnz     short loc_4097A0
.text:004097C2
.text:004097C2 loc_4097C2:                             ; CODE XREF: sub_409770+4C↑j
.text:004097C2                 lea     ecx, [edx-1]
.text:004097C5                 jmp     short loc_4097A0
.text:004097C7 ; ---------------------------------------------------------------------------
.text:004097C7
.text:004097C7 loc_4097C7:                             ; CODE XREF: sub_409770+F↑j
.text:004097C7                 add     ecx, 2
.text:004097CA                 movzx   eax, byte ptr [ecx]
.text:004097CD                 jmp     short loc_409781
.text:004097CD sub_409770      endp
.text:004097CD
.text:004097CD ; ---------------------------------------------------------------------------
.text:004097CF                 align 10h
.text:004097D0                 push    ebx
.text:004097D1                 sub     esp, 8
.text:004097D4                 mov     ebx, [esp+10h]
.text:004097D8                 mov     [esp], ebx
.text:004097DB                 call    strlen
.text:004097E0                 cmp     eax, 1
.text:004097E3                 jbe     short loc_409800
.text:004097E5                 movzx   edx, byte ptr [eax+ebx-1]
.text:004097EA                 cmp     dl, 2Fh ; '/'
.text:004097ED                 jz      short loc_409805
.text:004097EF                 cmp     dl, 5Ch ; '\'
.text:004097F2                 jz      short loc_409805
.text:004097F4                 lea     esi, [esi+0]
.text:004097FA                 lea     edi, [edi+0]
.text:00409800
.text:00409800 loc_409800:                             ; CODE XREF: .text:004097E3↑j
.text:00409800                                         ; .text:00409809↓j ...
.text:00409800                 add     esp, 8
.text:00409803                 pop     ebx
.text:00409804                 retn
.text:00409805 ; ---------------------------------------------------------------------------
.text:00409805
.text:00409805 loc_409805:                             ; CODE XREF: .text:004097ED↑j
.text:00409805                                         ; .text:004097F2↑j ...
.text:00409805                 dec     eax
.text:00409806                 cmp     eax, 1
.text:00409809                 jbe     short loc_409800
.text:0040980B                 movzx   edx, byte ptr [eax+ebx-1]
.text:00409810                 cmp     dl, 2Fh ; '/'
.text:00409813                 jz      short loc_409805
.text:00409815                 cmp     dl, 5Ch ; '\'
.text:00409818                 jz      short loc_409805
.text:0040981A                 jmp     short loc_409800
.text:0040981A ; ---------------------------------------------------------------------------
.text:0040981C                 align 10h
.text:00409820 aOpenatUnableTo db 'openat: unable to restore working directory',0
.text:00409820                                         ; DATA XREF: sub_4098A0:loc_409958↓o
.text:0040984C                 align 20h
.text:00409860 aOpenatUnableTo_0 db 'openat: unable to record current working directory',0
.text:00409860                                         ; DATA XREF: sub_4098A0:loc_4099A7↓o
.text:00409893                 align 10h
.text:004098A0
.text:004098A0 ; =============== S U B R O U T I N E =======================================
.text:004098A0
.text:004098A0
.text:004098A0 ; int __cdecl sub_4098A0(int, char *, int)
.text:004098A0 sub_4098A0      proc near               ; CODE XREF: sub_4090E0+189↑p
.text:004098A0                                         ; sub_4090E0+1DB↑p ...
.text:004098A0
.text:004098A0 FileName        = dword ptr -2Ch
.text:004098A0 OpenFlag        = dword ptr -28h
.text:004098A0 var_24          = dword ptr -24h
.text:004098A0 Block           = byte ptr -1Ch
.text:004098A0 var_10          = dword ptr -10h
.text:004098A0 var_C           = dword ptr -0Ch
.text:004098A0 var_8           = dword ptr -8
.text:004098A0 var_4           = dword ptr -4
.text:004098A0 arg_0           = dword ptr  4
.text:004098A0 arg_4           = dword ptr  8
.text:004098A0 arg_8           = dword ptr  0Ch
.text:004098A0
.text:004098A0                 sub     esp, 2Ch
.text:004098A3                 mov     [esp+2Ch+var_C], esi
.text:004098A7                 mov     esi, [esp+2Ch+arg_8]
.text:004098AB                 mov     [esp+2Ch+var_4], ebp
.text:004098AF                 mov     ebp, [esp+2Ch+arg_0]
.text:004098B3                 test    esi, 100h
.text:004098B9                 mov     [esp+2Ch+var_8], edi
.text:004098BD                 mov     edi, [esp+2Ch+arg_4]
.text:004098C1                 mov     [esp+2Ch+var_10], ebx
.text:004098C5                 jz      short loc_4098C9
.text:004098C7                 int     5               ;  - PRINT-SCREEN KEY
.text:004098C7                                         ; automatically called by keyboard scanner when print-screen key is pressed
.text:004098C9
.text:004098C9 loc_4098C9:                             ; CODE XREF: sub_4098A0+25↑j
.text:004098C9                 cmp     ebp, 0FFD19553h
.text:004098CF                 jz      loc_4099D8
.text:004098D5                 cmp     byte ptr [edi], 2Fh ; '/'
.text:004098D8                 jz      loc_4099D8
.text:004098DE                 lea     edx, [esp+2Ch+Block]
.text:004098E2                 mov     [esp+2Ch+FileName], edx
.text:004098E5                 call    sub_4066A0
.text:004098EA                 test    eax, eax
.text:004098EC                 jnz     loc_4099A7
.text:004098F2
.text:004098F2 loc_4098F2:                             ; CODE XREF: sub_4098A0+133↓j
.text:004098F2                 mov     [esp+2Ch+FileName], ebp
.text:004098F5                 call    sub_409A00
.text:004098FA                 test    eax, eax
.text:004098FC                 jnz     loc_409986
.text:00409902                 mov     [esp+2Ch+OpenFlag], esi ; OpenFlag
.text:00409906                 lea     ebp, [esp+2Ch+Block]
.text:0040990A                 mov     [esp+2Ch+FileName], edi ; FileName
.text:0040990D                 mov     [esp+2Ch+var_24], 0
.text:00409915                 call    _open
.text:0040991A                 mov     edi, eax
.text:0040991C                 call    _errno
.text:00409921                 mov     esi, [eax]
.text:00409923                 mov     [esp+2Ch+FileName], ebp
.text:00409926                 call    sub_4066E0
.text:0040992B                 test    eax, eax
.text:0040992D                 jnz     short loc_409958
.text:0040992F
.text:0040992F loc_40992F:                             ; CODE XREF: sub_4098A0+E4↓j
.text:0040992F                 lea     ebx, [esp+2Ch+Block]
.text:00409933                 mov     [esp+2Ch+FileName], ebx ; Block
.text:00409936                 call    sub_406710
.text:0040993B                 call    _errno
.text:00409940                 mov     [eax], esi
.text:00409942                 mov     eax, edi
.text:00409944
.text:00409944 loc_409944:                             ; CODE XREF: sub_4098A0+105↓j
.text:00409944                                         ; sub_4098A0+14C↓j
.text:00409944                 mov     ebx, [esp+2Ch+var_10]
.text:00409948                 mov     esi, [esp+2Ch+var_C]
.text:0040994C                 mov     edi, [esp+2Ch+var_8]
.text:00409950                 mov     ebp, [esp+2Ch+var_4]
.text:00409954                 add     esp, 2Ch
.text:00409957                 retn
.text:00409958 ; ---------------------------------------------------------------------------
.text:00409958
.text:00409958 loc_409958:                             ; CODE XREF: sub_4098A0+8D↑j
.text:00409958                 mov     [esp+2Ch+FileName], offset aOpenatUnableTo ; "openat: unable to restore working direc"...
.text:0040995F                 call    ds:libintl_gettext
.text:00409965                 mov     ebp, eax
.text:00409967                 call    _errno
.text:0040996C                 mov     [esp+2Ch+var_24], ebp ; char *
.text:00409970                 mov     edx, Code
.text:00409976                 mov     ecx, [eax]
.text:00409978                 mov     [esp+2Ch+FileName], edx ; Code
.text:0040997B                 mov     [esp+2Ch+OpenFlag], ecx ; ErrorMessage
.text:0040997F                 call    sub_409A70
.text:00409984                 jmp     short loc_40992F
.text:00409986 ; ---------------------------------------------------------------------------
.text:00409986
.text:00409986 loc_409986:                             ; CODE XREF: sub_4098A0+5C↑j
.text:00409986                 call    _errno
.text:0040998B                 mov     ebx, [eax]
.text:0040998D                 lea     esi, [esp+2Ch+Block]
.text:00409991                 mov     [esp+2Ch+FileName], esi ; Block
.text:00409994                 call    sub_406710
.text:00409999                 call    _errno
.text:0040999E                 mov     [eax], ebx
.text:004099A0                 mov     eax, 0FFFFFFFFh
.text:004099A5                 jmp     short loc_409944
.text:004099A7 ; ---------------------------------------------------------------------------
.text:004099A7
.text:004099A7 loc_4099A7:                             ; CODE XREF: sub_4098A0+4C↑j
.text:004099A7                 mov     [esp+2Ch+FileName], offset aOpenatUnableTo_0 ; "openat: unable to record current workin"...
.text:004099AE                 call    ds:libintl_gettext
.text:004099B4                 mov     ebx, eax
.text:004099B6                 call    _errno
.text:004099BB                 mov     [esp+2Ch+var_24], ebx ; char *
.text:004099BF                 mov     edx, Code
.text:004099C5                 mov     ecx, [eax]
.text:004099C7                 mov     [esp+2Ch+FileName], edx ; Code
.text:004099CA                 mov     [esp+2Ch+OpenFlag], ecx ; ErrorMessage
.text:004099CE                 call    sub_409A70
.text:004099D3                 jmp     loc_4098F2
.text:004099D8 ; ---------------------------------------------------------------------------
.text:004099D8
.text:004099D8 loc_4099D8:                             ; CODE XREF: sub_4098A0+2F↑j
.text:004099D8                                         ; sub_4098A0+38↑j
.text:004099D8                 mov     [esp+2Ch+var_24], 0
.text:004099E0                 mov     [esp+2Ch+OpenFlag], esi ; OpenFlag
.text:004099E4                 mov     [esp+2Ch+FileName], edi ; FileName
.text:004099E7                 call    _open
.text:004099EC                 jmp     loc_409944
.text:004099EC sub_4098A0      endp
.text:004099EC
.text:004099EC ; ---------------------------------------------------------------------------
.text:004099F1                 align 10h
.text:00409A00
.text:00409A00 ; =============== S U B R O U T I N E =======================================
.text:00409A00
.text:00409A00
.text:00409A00 sub_409A00      proc near               ; CODE XREF: sub_4090E0+29D↑p
.text:00409A00                                         ; sub_4098A0+55↑p
.text:00409A00                 sub     esp, 0Ch
.text:00409A03                 call    _errno
.text:00409A08                 mov     dword ptr [eax], 28h ; '('
.text:00409A0E                 mov     eax, 0FFFFFFFFh
.text:00409A13                 add     esp, 0Ch
.text:00409A16                 retn
.text:00409A16 sub_409A00      endp
.text:00409A16
.text:00409A16 ; ---------------------------------------------------------------------------
.text:00409A17                 align 10h
.text:00409A20                 jmp     ds:libintl_bindtextdomain
.text:00409A20 ; ---------------------------------------------------------------------------
.text:00409A26                 align 10h
.text:00409A30                 jmp     ds:libintl_textdomain
.text:00409A30 ; ---------------------------------------------------------------------------
.text:00409A36                 align 10h
.text:00409A40                 jmp     ds:libintl_gettext
.text:00409A40 ; ---------------------------------------------------------------------------
.text:00409A46                 align 10h
.text:00409A50 ; const char aS_3[]
.text:00409A50 aS_3            db ': %s',0             ; DATA XREF: sub_409A70+B8↓o
.text:00409A50                                         ; sub_409B74+122↓o
.text:00409A55 aUnknownSystemE db 'Unknown system error',0
.text:00409A55                                         ; DATA XREF: sub_409A70:loc_409B3D↓o
.text:00409A55                                         ; sub_409B74:loc_409CAE↓o
.text:00409A6A ; const char aS_4[]
.text:00409A6A aS_4            db '%s: ',0             ; DATA XREF: sub_409A70:loc_409B44↓o
.text:00409A6F                 align 10h
.text:00409A70
.text:00409A70 ; =============== S U B R O U T I N E =======================================
.text:00409A70
.text:00409A70
.text:00409A70 ; int __cdecl sub_409A70(int Code, int ErrorMessage, char *, char)
.text:00409A70 sub_409A70      proc near               ; CODE XREF: sub_401B70+5CF↑p
.text:00409A70                                         ; sub_401B70+7DB↑p ...
.text:00409A70
.text:00409A70 Stream          = dword ptr -1Ch
.text:00409A70 Format          = dword ptr -18h
.text:00409A70 ArgList         = dword ptr -14h
.text:00409A70 Code            = dword ptr  4
.text:00409A70 ErrorMessage    = dword ptr  8
.text:00409A70 arg_8           = dword ptr  0Ch
.text:00409A70 arg_C           = byte ptr  10h
.text:00409A70
.text:00409A70                 push    esi
.text:00409A71                 push    ebx
.text:00409A72                 sub     esp, 14h
.text:00409A75                 mov     edx, ds:_iob
.text:00409A7B                 mov     esi, [esp+1Ch+Code]
.text:00409A7F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00409A83                 add     edx, 20h ; ' '
.text:00409A86                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409A89                 call    fflush
.text:00409A8E                 mov     eax, ds:dword_4145F0
.text:00409A93                 test    eax, eax
.text:00409A95                 jz      loc_409B44
.text:00409A9B                 call    eax ; dword_4145F0
.text:00409A9D
.text:00409A9D loc_409A9D:                             ; CODE XREF: sub_409A70+F7↓j
.text:00409A9D                 lea     edx, [esp+1Ch+arg_C]
.text:00409AA1                 mov     ecx, [esp+1Ch+arg_8]
.text:00409AA5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00409AA9                 mov     edx, ds:_iob
.text:00409AAF                 mov     [esp+1Ch+Format], ecx ; Format
.text:00409AB3                 add     edx, 40h ; '@'
.text:00409AB6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409AB9                 call    vfprintf
.text:00409ABE                 inc     ds:dword_414600
.text:00409AC4                 test    ebx, ebx
.text:00409AC6                 jnz     short loc_409B12
.text:00409AC8
.text:00409AC8 loc_409AC8:                             ; CODE XREF: sub_409A70+CB↓j
.text:00409AC8                 mov     edx, ds:_iob
.text:00409ACE                 lea     ecx, [edx+40h]
.text:00409AD1                 mov     ebx, [ecx+4]
.text:00409AD4                 dec     ebx
.text:00409AD5                 test    ebx, ebx
.text:00409AD7                 mov     [ecx+4], ebx
.text:00409ADA                 js      short loc_409B00
.text:00409ADC                 mov     ecx, [edx+40h]
.text:00409ADF                 mov     byte ptr [ecx], 0Ah
.text:00409AE2                 inc     dword ptr [edx+40h]
.text:00409AE5
.text:00409AE5 loc_409AE5:                             ; CODE XREF: sub_409A70+A0↓j
.text:00409AE5                 mov     edx, ds:_iob
.text:00409AEB                 add     edx, 40h ; '@'
.text:00409AEE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409AF1                 call    fflush
.text:00409AF6                 test    esi, esi
.text:00409AF8                 jnz     short loc_409B6C
.text:00409AFA                 add     esp, 14h
.text:00409AFD                 pop     ebx
.text:00409AFE                 pop     esi
.text:00409AFF                 retn
.text:00409B00 ; ---------------------------------------------------------------------------
.text:00409B00
.text:00409B00 loc_409B00:                             ; CODE XREF: sub_409A70+6A↑j
.text:00409B00                 mov     [esp+1Ch+Format], ecx ; File
.text:00409B04                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00409B0B                 call    _flsbuf
.text:00409B10                 jmp     short loc_409AE5
.text:00409B12 ; ---------------------------------------------------------------------------
.text:00409B12
.text:00409B12 loc_409B12:                             ; CODE XREF: sub_409A70+56↑j
.text:00409B12                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00409B15                 call    strerror
.text:00409B1A                 test    eax, eax
.text:00409B1C                 jz      short loc_409B3D
.text:00409B1E
.text:00409B1E loc_409B1E:                             ; CODE XREF: sub_409A70+D2↓j
.text:00409B1E                 mov     [esp+1Ch+ArgList], eax
.text:00409B22                 mov     ebx, ds:_iob
.text:00409B28                 mov     [esp+1Ch+Format], offset aS_3 ; ": %s"
.text:00409B30                 add     ebx, 40h ; '@'
.text:00409B33                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00409B36                 call    fprintf
.text:00409B3B                 jmp     short loc_409AC8
.text:00409B3D ; ---------------------------------------------------------------------------
.text:00409B3D
.text:00409B3D loc_409B3D:                             ; CODE XREF: sub_409A70+AC↑j
.text:00409B3D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00409B42                 jmp     short loc_409B1E
.text:00409B44 ; ---------------------------------------------------------------------------
.text:00409B44
.text:00409B44 loc_409B44:                             ; CODE XREF: sub_409A70+25↑j
.text:00409B44                 mov     [esp+1Ch+Format], offset aS_4 ; "%s: "
.text:00409B4C                 mov     edx, ds:_iob
.text:00409B52                 mov     ecx, ds:dword_4145C0
.text:00409B58                 add     edx, 40h ; '@'
.text:00409B5B                 mov     [esp+1Ch+ArgList], ecx
.text:00409B5F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409B62                 call    fprintf
.text:00409B67                 jmp     loc_409A9D
.text:00409B6C ; ---------------------------------------------------------------------------
.text:00409B6C
.text:00409B6C loc_409B6C:                             ; CODE XREF: sub_409A70+88↑j
.text:00409B6C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00409B6F                 call    exit
.text:00409B6F sub_409A70      endp
.text:00409B6F
.text:00409B74
.text:00409B74 ; =============== S U B R O U T I N E =======================================
.text:00409B74
.text:00409B74
.text:00409B74 ; int __cdecl sub_409B74(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00409B74 sub_409B74      proc near               ; DATA XREF: sub_409B74+77↓o
.text:00409B74
.text:00409B74 Stream          = dword ptr -28h
.text:00409B74 Format          = dword ptr -24h
.text:00409B74 ArgList         = dword ptr -20h
.text:00409B74 var_1C          = dword ptr -1Ch
.text:00409B74 Code            = dword ptr  8
.text:00409B74 ErrorMessage    = dword ptr  0Ch
.text:00409B74 Str2            = dword ptr  10h
.text:00409B74 arg_10          = dword ptr  14h
.text:00409B74 arg_14          = dword ptr  18h
.text:00409B74 arg_18          = byte ptr  1Ch
.text:00409B74
.text:00409B74                 and     eax, 64253A73h
.text:00409B79                 cmp     ah, [eax]
.text:00409B7B
.text:00409B7B loc_409B7B:                             ; DATA XREF: sub_409B74:loc_409CB5↓o
.text:00409B7B                 add     ds:55003A73h, ah
.text:00409B81                 push    edi
.text:00409B82                 push    esi
.text:00409B83                 push    ebx
.text:00409B84                 sub     esp, 1Ch
.text:00409B87                 mov     edx, ds:dword_414630
.text:00409B8D                 mov     ebp, [esp+28h+Code]
.text:00409B91                 mov     edi, [esp+28h+ErrorMessage]
.text:00409B95                 test    edx, edx
.text:00409B97                 mov     ebx, [esp+28h+Str2]
.text:00409B9B                 mov     esi, [esp+28h+arg_10]
.text:00409B9F                 jz      short loc_409BB9
.text:00409BA1                 cmp     ds:dword_414250, esi
.text:00409BA7                 jz      loc_409CE0
.text:00409BAD
.text:00409BAD loc_409BAD:                             ; CODE XREF: sub_409B74+18D↓j
.text:00409BAD                 mov     ds:Str1, ebx
.text:00409BB3                 mov     ds:dword_414250, esi
.text:00409BB9
.text:00409BB9 loc_409BB9:                             ; CODE XREF: sub_409B74+2B↑j
.text:00409BB9                 mov     edx, ds:_iob
.text:00409BBF                 add     edx, 20h ; ' '
.text:00409BC2                 mov     [esp+28h+Stream], edx ; Stream
.text:00409BC5                 call    fflush
.text:00409BCA                 mov     eax, ds:dword_4145F0
.text:00409BCF                 test    eax, eax
.text:00409BD1                 jz      loc_409CB5
.text:00409BD7                 call    eax ; dword_4145F0
.text:00409BD9
.text:00409BD9 loc_409BD9:                             ; CODE XREF: sub_409B74+164↓j
.text:00409BD9                 test    ebx, ebx
.text:00409BDB                 jz      short loc_409BFE
.text:00409BDD                 mov     [esp+28h+ArgList], ebx
.text:00409BE1                 mov     ebx, ds:_iob
.text:00409BE7                 mov     [esp+28h+var_1C], esi
.text:00409BEB                 mov     [esp+28h+Format], offset sub_409B74 ; Format
.text:00409BF3                 add     ebx, 40h ; '@'
.text:00409BF6                 mov     [esp+28h+Stream], ebx ; Stream
.text:00409BF9                 call    fprintf
.text:00409BFE
.text:00409BFE loc_409BFE:                             ; CODE XREF: sub_409B74+67↑j
.text:00409BFE                 mov     esi, ds:_iob
.text:00409C04                 lea     edx, [esp+28h+arg_18]
.text:00409C08                 mov     ecx, [esp+28h+arg_14]
.text:00409C0C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00409C10                 add     esi, 40h ; '@'
.text:00409C13                 mov     [esp+28h+Format], ecx ; Format
.text:00409C17                 mov     [esp+28h+Stream], esi ; Stream
.text:00409C1A                 call    vfprintf
.text:00409C1F                 inc     ds:dword_414600
.text:00409C25                 test    edi, edi
.text:00409C27                 jnz     short loc_409C80
.text:00409C29
.text:00409C29 loc_409C29:                             ; CODE XREF: sub_409B74+135↓j
.text:00409C29                 mov     edx, ds:_iob
.text:00409C2F                 lea     ecx, [edx+40h]
.text:00409C32                 mov     ebx, [ecx+4]
.text:00409C35                 dec     ebx
.text:00409C36                 test    ebx, ebx
.text:00409C38                 mov     [ecx+4], ebx
.text:00409C3B                 js      short loc_409C67
.text:00409C3D                 mov     esi, [edx+40h]
.text:00409C40                 mov     byte ptr [esi], 0Ah
.text:00409C43                 inc     dword ptr [edx+40h]
.text:00409C46
.text:00409C46 loc_409C46:                             ; CODE XREF: sub_409B74+103↓j
.text:00409C46                 mov     ecx, ds:_iob
.text:00409C4C                 add     ecx, 40h ; '@'
.text:00409C4F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00409C52                 call    fflush
.text:00409C57                 test    ebp, ebp
.text:00409C59                 jnz     loc_409D06
.text:00409C5F
.text:00409C5F loc_409C5F:                             ; CODE XREF: sub_409B74+173↓j
.text:00409C5F                                         ; sub_409B74+187↓j
.text:00409C5F                 add     esp, 1Ch
.text:00409C62                 pop     ebx
.text:00409C63                 pop     esi
.text:00409C64                 pop     edi
.text:00409C65                 pop     ebp
.text:00409C66                 retn
.text:00409C67 ; ---------------------------------------------------------------------------
.text:00409C67
.text:00409C67 loc_409C67:                             ; CODE XREF: sub_409B74+C7↑j
.text:00409C67                 mov     [esp+28h+Format], ecx ; File
.text:00409C6B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00409C72                 call    _flsbuf
.text:00409C77                 jmp     short loc_409C46
.text:00409C77 ; ---------------------------------------------------------------------------
.text:00409C79                 align 10h
.text:00409C80
.text:00409C80 loc_409C80:                             ; CODE XREF: sub_409B74+B3↑j
.text:00409C80                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00409C83                 call    strerror
.text:00409C88                 test    eax, eax
.text:00409C8A                 jz      short loc_409CAE
.text:00409C8C
.text:00409C8C loc_409C8C:                             ; CODE XREF: sub_409B74+13F↓j
.text:00409C8C                 mov     [esp+28h+ArgList], eax
.text:00409C90                 mov     edi, ds:_iob
.text:00409C96                 mov     [esp+28h+Format], offset aS_3 ; ": %s"
.text:00409C9E                 add     edi, 40h ; '@'
.text:00409CA1                 mov     [esp+28h+Stream], edi ; Stream
.text:00409CA4                 call    fprintf
.text:00409CA9                 jmp     loc_409C29
.text:00409CAE ; ---------------------------------------------------------------------------
.text:00409CAE
.text:00409CAE loc_409CAE:                             ; CODE XREF: sub_409B74+116↑j
.text:00409CAE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00409CB3                 jmp     short loc_409C8C
.text:00409CB5 ; ---------------------------------------------------------------------------
.text:00409CB5
.text:00409CB5 loc_409CB5:                             ; CODE XREF: sub_409B74+5D↑j
.text:00409CB5                 mov     [esp+28h+Format], (offset loc_409B7B+1) ; Format
.text:00409CBD                 mov     ecx, ds:_iob
.text:00409CC3                 mov     edx, ds:dword_4145C0
.text:00409CC9                 add     ecx, 40h ; '@'
.text:00409CCC                 mov     [esp+28h+ArgList], edx
.text:00409CD0                 mov     [esp+28h+Stream], ecx ; Stream
.text:00409CD3                 call    fprintf
.text:00409CD8                 jmp     loc_409BD9
.text:00409CD8 ; ---------------------------------------------------------------------------
.text:00409CDD                 align 10h
.text:00409CE0
.text:00409CE0 loc_409CE0:                             ; CODE XREF: sub_409B74+33↑j
.text:00409CE0                 mov     eax, ds:Str1
.text:00409CE5                 cmp     ebx, eax
.text:00409CE7                 jz      loc_409C5F
.text:00409CED                 mov     [esp+28h+Format], ebx ; Str2
.text:00409CF1                 mov     [esp+28h+Stream], eax ; Str1
.text:00409CF4                 call    strcmp
.text:00409CF9                 test    eax, eax
.text:00409CFB                 jz      loc_409C5F
.text:00409D01                 jmp     loc_409BAD
.text:00409D06 ; ---------------------------------------------------------------------------
.text:00409D06
.text:00409D06 loc_409D06:                             ; CODE XREF: sub_409B74+E5↑j
.text:00409D06                 mov     [esp+28h+Stream], ebp ; Code
.text:00409D09                 call    exit
.text:00409D09 sub_409B74      endp ; sp-analysis failed
.text:00409D09
.text:00409D09 ; ---------------------------------------------------------------------------
.text:00409D0E                 align 10h
.text:00409D10
.text:00409D10 ; =============== S U B R O U T I N E =======================================
.text:00409D10
.text:00409D10
.text:00409D10 sub_409D10      proc near               ; CODE XREF: .text:0040B083↓p
.text:00409D10                                         ; .text:0040B0D3↓p
.text:00409D10
.text:00409D10 arg_4           = dword ptr  8
.text:00409D10
.text:00409D10                 sub     esp, 0Ch
.text:00409D13                 mov     edx, [esp+0Ch+arg_4]
.text:00409D17                 test    edx, edx
.text:00409D19                 jz      short loc_409D20
.text:00409D1B                 add     esp, 0Ch
.text:00409D1E                 jmp     short sub_409D60
.text:00409D20 ; ---------------------------------------------------------------------------
.text:00409D20
.text:00409D20 loc_409D20:                             ; CODE XREF: sub_409D10+9↑j
.text:00409D20                 call    _errno
.text:00409D25                 mov     dword ptr [eax], 16h
.text:00409D2B                 xor     eax, eax
.text:00409D2D                 add     esp, 0Ch
.text:00409D30                 retn
.text:00409D30 sub_409D10      endp
.text:00409D30
.text:00409D31 ; ---------------------------------------------------------------------------
.text:00409D31                 jmp     short sub_409D40
.text:00409D31 ; ---------------------------------------------------------------------------
.text:00409D33                 align 10h
.text:00409D40
.text:00409D40 ; =============== S U B R O U T I N E =======================================
.text:00409D40
.text:00409D40
.text:00409D40 ; int __cdecl sub_409D40(LPCSTR)
.text:00409D40 sub_409D40      proc near               ; CODE XREF: sub_403200+2C↑p
.text:00409D40                                         ; .text:00409D31↑j ...
.text:00409D40
.text:00409D40 lpFileName      = dword ptr -0Ch
.text:00409D40 Destination     = dword ptr -8
.text:00409D40 arg_0           = dword ptr  4
.text:00409D40
.text:00409D40                 sub     esp, 0Ch
.text:00409D43                 mov     edx, [esp+0Ch+arg_0]
.text:00409D47                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:00409D4F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:00409D52                 call    sub_409D60
.text:00409D57                 add     esp, 0Ch
.text:00409D5A                 retn
.text:00409D5A sub_409D40      endp
.text:00409D5A
.text:00409D5A ; ---------------------------------------------------------------------------
.text:00409D5B                 align 10h
.text:00409D60
.text:00409D60 ; =============== S U B R O U T I N E =======================================
.text:00409D60
.text:00409D60
.text:00409D60 ; int __cdecl sub_409D60(LPCSTR lpFileName, char *Destination)
.text:00409D60 sub_409D60      proc near               ; CODE XREF: sub_409D10+E↑j
.text:00409D60                                         ; sub_409D40+12↑p
.text:00409D60
.text:00409D60 Size            = dword ptr -2Ch
.text:00409D60 nBufferLength   = dword ptr -28h
.text:00409D60 lpBuffer        = dword ptr -24h
.text:00409D60 lpFilePart      = dword ptr -20h
.text:00409D60 FilePart        = dword ptr -14h
.text:00409D60 lpFileName      = dword ptr  4
.text:00409D60 Destination     = dword ptr  8
.text:00409D60
.text:00409D60                 push    ebp
.text:00409D61                 push    edi
.text:00409D62                 push    esi
.text:00409D63                 push    ebx
.text:00409D64                 sub     esp, 1Ch
.text:00409D67                 mov     edi, [esp+2Ch+lpFileName]
.text:00409D6B                 mov     ebp, [esp+2Ch+Destination]
.text:00409D6F                 test    edi, edi
.text:00409D71                 jz      loc_409E79
.text:00409D77                 cmp     byte ptr [edi], 0
.text:00409D7A                 jz      loc_409E6C
.text:00409D80                 mov     [esp+2Ch+Size], 104h ; Size
.text:00409D87                 call    malloc
.text:00409D8C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00409D90                 lea     edx, [esp+2Ch+FilePart]
.text:00409D94                 mov     ebx, eax
.text:00409D96                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00409D9A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:00409DA2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00409DA5                 call    GetFullPathNameA
.text:00409DAA                 sub     esp, 10h
.text:00409DAD                 mov     esi, eax
.text:00409DAF                 test    eax, eax
.text:00409DB1                 jz      loc_409E5A
.text:00409DB7                 cmp     eax, 104h
.text:00409DBC                 jle     short loc_409DCD
.text:00409DBE                 test    ebp, ebp
.text:00409DC0                 jz      short loc_409E29
.text:00409DC2                 call    _errno
.text:00409DC7                 mov     dword ptr [eax], 26h ; '&'
.text:00409DCD
.text:00409DCD loc_409DCD:                             ; CODE XREF: sub_409D60+5C↑j
.text:00409DCD                                         ; sub_409D60+F5↓j
.text:00409DCD                 call    _errno
.text:00409DD2                 mov     edi, [eax]
.text:00409DD4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:00409DDC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:00409DDF                 call    sub_40BEF0
.text:00409DE4                 test    eax, eax
.text:00409DE6                 jnz     short loc_409E00
.text:00409DE8                 movzx   eax, byte ptr [esi+ebx-1]
.text:00409DED                 cmp     al, 2Fh ; '/'
.text:00409DEF                 jz      short loc_409E00
.text:00409DF1                 cmp     al, 5Ch ; '\'
.text:00409DF3                 jz      short loc_409E00
.text:00409DF5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00409DF9                 mov     byte ptr [esi+ebx+1], 0
.text:00409DFE                 mov     esi, esi
.text:00409E00
.text:00409E00 loc_409E00:                             ; CODE XREF: sub_409D60+86↑j
.text:00409E00                                         ; sub_409D60+8F↑j ...
.text:00409E00                 call    _errno
.text:00409E05                 mov     [eax], edi
.text:00409E07                 mov     [esp+2Ch+Size], ebx
.text:00409E0A                 call    sub_40AF70
.text:00409E0F                 test    ebp, ebp
.text:00409E11                 mov     eax, ebx
.text:00409E13                 jz      short loc_409E21
.text:00409E15                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00409E19                 mov     [esp+2Ch+Size], ebp ; Destination
.text:00409E1C                 call    strcpy
.text:00409E21
.text:00409E21 loc_409E21:                             ; CODE XREF: sub_409D60+B3↑j
.text:00409E21                                         ; sub_409D60+10A↓j
.text:00409E21                 add     esp, 1Ch
.text:00409E24                 pop     ebx
.text:00409E25                 pop     esi
.text:00409E26                 pop     edi
.text:00409E27                 pop     ebp
.text:00409E28                 retn
.text:00409E29 ; ---------------------------------------------------------------------------
.text:00409E29
.text:00409E29 loc_409E29:                             ; CODE XREF: sub_409D60+60↑j
.text:00409E29                 mov     [esp+2Ch+Size], ebx ; Block
.text:00409E2C                 lea     ecx, [eax+2]
.text:00409E2F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00409E33                 call    realloc
.text:00409E38                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00409E3C                 lea     edx, [esp+2Ch+FilePart]
.text:00409E40                 mov     ebx, eax
.text:00409E42                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00409E46                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:00409E4A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00409E4D                 call    GetFullPathNameA
.text:00409E52                 sub     esp, 10h
.text:00409E55                 jmp     loc_409DCD
.text:00409E5A ; ---------------------------------------------------------------------------
.text:00409E5A
.text:00409E5A loc_409E5A:                             ; CODE XREF: sub_409D60+51↑j
.text:00409E5A                 call    sub_40C250
.text:00409E5F                 mov     esi, eax
.text:00409E61                 call    _errno
.text:00409E66                 mov     [eax], esi
.text:00409E68
.text:00409E68 loc_409E68:                             ; CODE XREF: sub_409D60+117↓j
.text:00409E68                                         ; sub_409D60+124↓j
.text:00409E68                 xor     eax, eax
.text:00409E6A                 jmp     short loc_409E21
.text:00409E6C ; ---------------------------------------------------------------------------
.text:00409E6C
.text:00409E6C loc_409E6C:                             ; CODE XREF: sub_409D60+1A↑j
.text:00409E6C                 call    _errno
.text:00409E71                 mov     dword ptr [eax], 2
.text:00409E77                 jmp     short loc_409E68
.text:00409E79 ; ---------------------------------------------------------------------------
.text:00409E79
.text:00409E79 loc_409E79:                             ; CODE XREF: sub_409D60+11↑j
.text:00409E79                 call    _errno
.text:00409E7E                 mov     dword ptr [eax], 16h
.text:00409E84                 jmp     short loc_409E68
.text:00409E84 sub_409D60      endp
.text:00409E84
.text:00409E84 ; ---------------------------------------------------------------------------
.text:00409E86                 align 10h
.text:00409E90 aNotset         db 'notset',0           ; DATA XREF: .data:Str2↓o
.text:00409E90                                         ; .data:lpMem↓o
.text:00409E97
.text:00409E97 ; =============== S U B R O U T I N E =======================================
.text:00409E97
.text:00409E97
.text:00409E97 sub_409E97      proc near               ; DATA XREF: _getmntent_r:loc_409F35↓o
.text:00409E97                 jb      short loc_409F10
.text:00409E99
.text:00409E99 loc_409E99:                             ; DATA XREF: _getmntent_r+B2↓o
.text:00409E99                                         ; _getmntent_r+E5↓o ...
.text:00409E99                 add     [eax], ah
.text:00409E9B                 or      [eax], eax
.text:00409E9D
.text:00409E9D loc_409E9D:                             ; DATA XREF: _getmntent_r+D8↓o
.text:00409E9D                                         ; _getmntent_r+13E↓o ...
.text:00409E9D                 add     [eax], ah
.text:00409E9F                 and     eax, 64252064h
.text:00409EA4                 and     [eax], al
.text:00409EA6                 lea     esi, [esi+0]
.text:00409EA9                 lea     edi, [edi+0]
.text:00409EA9 sub_409E97      endp
.text:00409EA9
.text:00409EB0
.text:00409EB0 ; =============== S U B R O U T I N E =======================================
.text:00409EB0
.text:00409EB0 ; Attributes: info_from_lumina
.text:00409EB0
.text:00409EB0 ; int __cdecl getmntent_r(int, int, char *Str)
.text:00409EB0 _getmntent_r    proc near               ; CODE XREF: sub_40BDE0+33↓p
.text:00409EB0
.text:00409EB0 Str1            = dword ptr -15Ch
.text:00409EB0 Str2            = dword ptr -158h
.text:00409EB0 dwBytes         = dword ptr -154h
.text:00409EB0 var_150         = dword ptr -150h
.text:00409EB0 Buffer          = dword ptr -140h
.text:00409EB0 var_13C         = dword ptr -13Ch
.text:00409EB0 var_F0          = byte ptr -0F0h
.text:00409EB0 var_E0          = byte ptr -0E0h
.text:00409EB0 var_86          = byte ptr -86h
.text:00409EB0 arg_0           = dword ptr  4
.text:00409EB0 arg_4           = dword ptr  8
.text:00409EB0 Str             = dword ptr  0Ch
.text:00409EB0
.text:00409EB0                 push    ebp
.text:00409EB1                 push    edi
.text:00409EB2                 push    esi
.text:00409EB3                 push    ebx
.text:00409EB4                 sub     esp, 14Ch
.text:00409EBA                 mov     edx, Str2
.text:00409EC0                 mov     edi, [esp+15Ch+arg_4]
.text:00409EC7                 mov     ebp, [esp+15Ch+Str]
.text:00409ECE                 mov     [esp+15Ch+Str2], edx ; Str2
.text:00409ED2                 mov     edx, lpMem
.text:00409ED8                 mov     [esp+15Ch+Str1], edx ; Str1
.text:00409EDB                 call    strcmp
.text:00409EE0                 test    eax, eax
.text:00409EE2                 jz      loc_40A2D0
.text:00409EE8
.text:00409EE8 loc_409EE8:                             ; CODE XREF: _getmntent_r+46C↓j
.text:00409EE8                 lea     ebx, [esp+15Ch+var_13C]
.text:00409EEC                 lea     esi, [esi+0]
.text:00409EF0
.text:00409EF0 loc_409EF0:                             ; CODE XREF: _getmntent_r+76↓j
.text:00409EF0                 mov     [esp+15Ch+Str2], ebx ; int
.text:00409EF4                 mov     ecx, lpMem
.text:00409EFA                 mov     [esp+15Ch+Str1], ecx ; LPCSTR
.text:00409EFD                 call    sub_40BAC0
.text:00409F02                 test    eax, eax
.text:00409F04                 jns     short loc_409F35
.text:00409F06                 mov     eax, lpMem
.text:00409F0B                 cmp     byte ptr [eax], 0
.text:00409F0E                 jz      short loc_409F28
.text:00409F10
.text:00409F10 loc_409F10:                             ; CODE XREF: sub_409E97↑j
.text:00409F10                 mov     [esp+15Ch+Str2], 0 ; Val
.text:00409F18                 mov     [esp+15Ch+Str1], eax ; Str
.text:00409F1B                 call    strchr
.text:00409F20                 inc     eax
.text:00409F21                 mov     lpMem, eax
.text:00409F26                 jmp     short loc_409EF0
.text:00409F28 ; ---------------------------------------------------------------------------
.text:00409F28
.text:00409F28 loc_409F28:                             ; CODE XREF: _getmntent_r+5E↑j
.text:00409F28                 xor     eax, eax
.text:00409F2A
.text:00409F2A loc_409F2A:                             ; CODE XREF: _getmntent_r+23C↓j
.text:00409F2A                 add     esp, 14Ch
.text:00409F30                 pop     ebx
.text:00409F31                 pop     esi
.text:00409F32                 pop     edi
.text:00409F33                 pop     ebp
.text:00409F34                 retn
.text:00409F35 ; ---------------------------------------------------------------------------
.text:00409F35
.text:00409F35 loc_409F35:                             ; CODE XREF: _getmntent_r+54↑j
.text:00409F35                 mov     dword ptr [edi+0Ch], offset sub_409E97
.text:00409F3C                 lea     ecx, [esp+15Ch+var_86]
.text:00409F43                 lea     edx, [esp+15Ch+var_F0]
.text:00409F47                 mov     [edi+4], ecx
.text:00409F4A                 lea     ebx, [esp+15Ch+var_E0]
.text:00409F4E                 mov     [edi+8], edx
.text:00409F51                 mov     [edi], ebx
.text:00409F53                 mov     [esp+15Ch+Str1], ebp ; char *
.text:00409F56                 mov     [esp+15Ch+Str2], edi ; int
.text:00409F5A                 call    ___addmntentstr
.text:00409F5F                 mov     [esp+15Ch+Str1], ebp ; Str
.text:00409F62                 mov     [esp+15Ch+Str2], (offset loc_409E99+1)
.text:00409F6A                 call    strspn
.text:00409F6F                 mov     [esp+15Ch+Str2], 0 ; Val
.text:00409F77                 mov     ebx, lpMem
.text:00409F7D                 lea     esi, [eax+ebp]
.text:00409F80                 mov     [esp+15Ch+Buffer], esi
.text:00409F84                 lea     ebp, [esp+15Ch+Buffer]
.text:00409F88                 mov     esi, offset loc_409E9D
.text:00409F8D                 mov     [esp+15Ch+Str1], ebx ; Str
.text:00409F90                 call    strchr
.text:00409F95                 mov     [esp+15Ch+Str2], (offset loc_409E99+1) ; Control
.text:00409F9D                 inc     eax
.text:00409F9E                 mov     lpMem, eax
.text:00409FA3                 mov     [esp+15Ch+Str1], ebp ; int
.text:00409FA6                 call    sub_40C2E0
.text:00409FAB                 test    eax, eax
.text:00409FAD                 mov     ebx, eax
.text:00409FAF                 jz      short loc_409FD8
.text:00409FB1                 mov     edx, eax
.text:00409FB3                 mov     ecx, eax
.text:00409FB5                 lea     esi, [esi+0]
.text:00409FB9                 lea     edi, [edi+0]
.text:00409FC0
.text:00409FC0 loc_409FC0:                             ; CODE XREF: _getmntent_r+126↓j
.text:00409FC0                 movzx   eax, byte ptr [edx]
.text:00409FC3                 cmp     al, 5Ch ; '\'
.text:00409FC5                 jz      loc_40A274
.text:00409FCB
.text:00409FCB loc_409FCB:                             ; CODE XREF: _getmntent_r+3CC↓j
.text:00409FCB                                         ; _getmntent_r+3DA↓j ...
.text:00409FCB                 mov     [ecx], al
.text:00409FCD
.text:00409FCD loc_409FCD:                             ; CODE XREF: _getmntent_r+3EE↓j
.text:00409FCD                 inc     ecx
.text:00409FCE
.text:00409FCE loc_409FCE:                             ; CODE XREF: _getmntent_r+406↓j
.text:00409FCE                 movzx   eax, byte ptr [edx]
.text:00409FD1                 mov     esi, ebx
.text:00409FD3                 inc     edx
.text:00409FD4                 test    al, al
.text:00409FD6                 jnz     short loc_409FC0
.text:00409FD8
.text:00409FD8 loc_409FD8:                             ; CODE XREF: _getmntent_r+FF↑j
.text:00409FD8                 mov     [edi], esi
.text:00409FDA                 mov     eax, [esp+15Ch+Buffer]
.text:00409FDE                 test    eax, eax
.text:00409FE0                 jnz     loc_40A25B
.text:00409FE6
.text:00409FE6 loc_409FE6:                             ; CODE XREF: _getmntent_r+3BF↓j
.text:00409FE6                 mov     [esp+15Ch+Str2], (offset loc_409E99+1) ; Control
.text:00409FEE                 mov     esi, offset loc_409E9D
.text:00409FF3                 mov     [esp+15Ch+Str1], ebp ; int
.text:00409FF6                 call    sub_40C2E0
.text:00409FFB                 test    eax, eax
.text:00409FFD                 mov     ebx, eax
.text:00409FFF                 jz      short loc_40A028
.text:0040A001                 mov     edx, eax
.text:0040A003                 mov     ecx, eax
.text:0040A005                 lea     esi, [esi+0]
.text:0040A009                 lea     edi, [edi+0]
.text:0040A010
.text:0040A010 loc_40A010:                             ; CODE XREF: _getmntent_r+176↓j
.text:0040A010                 movzx   eax, byte ptr [edx]
.text:0040A013                 cmp     al, 5Ch ; '\'
.text:0040A015                 jz      loc_40A203
.text:0040A01B
.text:0040A01B loc_40A01B:                             ; CODE XREF: _getmntent_r+35B↓j
.text:0040A01B                                         ; _getmntent_r+369↓j ...
.text:0040A01B                 mov     [ecx], al
.text:0040A01D
.text:0040A01D loc_40A01D:                             ; CODE XREF: _getmntent_r+37D↓j
.text:0040A01D                 inc     ecx
.text:0040A01E
.text:0040A01E loc_40A01E:                             ; CODE XREF: _getmntent_r+395↓j
.text:0040A01E                 movzx   eax, byte ptr [edx]
.text:0040A021                 mov     esi, ebx
.text:0040A023                 inc     edx
.text:0040A024                 test    al, al
.text:0040A026                 jnz     short loc_40A010
.text:0040A028
.text:0040A028 loc_40A028:                             ; CODE XREF: _getmntent_r+14F↑j
.text:0040A028                 mov     [edi+4], esi
.text:0040A02B                 mov     eax, [esp+15Ch+Buffer]
.text:0040A02F                 test    eax, eax
.text:0040A031                 jnz     loc_40A1EA
.text:0040A037
.text:0040A037 loc_40A037:                             ; CODE XREF: _getmntent_r+34E↓j
.text:0040A037                 mov     [esp+15Ch+Str2], (offset loc_409E99+1) ; Control
.text:0040A03F                 mov     esi, offset loc_409E9D
.text:0040A044                 mov     [esp+15Ch+Str1], ebp ; int
.text:0040A047                 call    sub_40C2E0
.text:0040A04C                 test    eax, eax
.text:0040A04E                 mov     ebx, eax
.text:0040A050                 jz      short loc_40A078
.text:0040A052                 mov     edx, eax
.text:0040A054                 mov     ecx, eax
.text:0040A056                 lea     esi, [esi+0]
.text:0040A059                 lea     edi, [edi+0]
.text:0040A060
.text:0040A060 loc_40A060:                             ; CODE XREF: _getmntent_r+1C6↓j
.text:0040A060                 movzx   eax, byte ptr [edx]
.text:0040A063                 cmp     al, 5Ch ; '\'
.text:0040A065                 jz      loc_40A192
.text:0040A06B
.text:0040A06B loc_40A06B:                             ; CODE XREF: _getmntent_r+2EA↓j
.text:0040A06B                                         ; _getmntent_r+2F8↓j ...
.text:0040A06B                 mov     [ecx], al
.text:0040A06D
.text:0040A06D loc_40A06D:                             ; CODE XREF: _getmntent_r+30C↓j
.text:0040A06D                 inc     ecx
.text:0040A06E
.text:0040A06E loc_40A06E:                             ; CODE XREF: _getmntent_r+324↓j
.text:0040A06E                 movzx   eax, byte ptr [edx]
.text:0040A071                 mov     esi, ebx
.text:0040A073                 inc     edx
.text:0040A074                 test    al, al
.text:0040A076                 jnz     short loc_40A060
.text:0040A078
.text:0040A078 loc_40A078:                             ; CODE XREF: _getmntent_r+1A0↑j
.text:0040A078                 mov     [edi+8], esi
.text:0040A07B                 mov     eax, [esp+15Ch+Buffer]
.text:0040A07F                 test    eax, eax
.text:0040A081                 jnz     loc_40A179
.text:0040A087
.text:0040A087 loc_40A087:                             ; CODE XREF: _getmntent_r+2DD↓j
.text:0040A087                 mov     [esp+15Ch+Str2], (offset loc_409E99+1) ; Control
.text:0040A08F                 mov     esi, offset loc_409E9D
.text:0040A094                 mov     [esp+15Ch+Str1], ebp ; int
.text:0040A097                 call    sub_40C2E0
.text:0040A09C                 test    eax, eax
.text:0040A09E                 mov     ebx, eax
.text:0040A0A0                 jz      short loc_40A0C4
.text:0040A0A2                 mov     edx, eax
.text:0040A0A4                 mov     ecx, eax
.text:0040A0A6                 lea     esi, [esi+0]
.text:0040A0A9                 lea     edi, [edi+0]
.text:0040A0B0
.text:0040A0B0 loc_40A0B0:                             ; CODE XREF: _getmntent_r+212↓j
.text:0040A0B0                 movzx   eax, byte ptr [edx]
.text:0040A0B3                 cmp     al, 5Ch ; '\'
.text:0040A0B5                 jz      short loc_40A125
.text:0040A0B7
.text:0040A0B7 loc_40A0B7:                             ; CODE XREF: _getmntent_r+27D↓j
.text:0040A0B7                                         ; _getmntent_r+287↓j ...
.text:0040A0B7                 mov     [ecx], al
.text:0040A0B9
.text:0040A0B9 loc_40A0B9:                             ; CODE XREF: _getmntent_r+29B↓j
.text:0040A0B9                 inc     ecx
.text:0040A0BA
.text:0040A0BA loc_40A0BA:                             ; CODE XREF: _getmntent_r+2B3↓j
.text:0040A0BA                 movzx   eax, byte ptr [edx]
.text:0040A0BD                 mov     esi, ebx
.text:0040A0BF                 inc     edx
.text:0040A0C0                 test    al, al
.text:0040A0C2                 jnz     short loc_40A0B0
.text:0040A0C4
.text:0040A0C4 loc_40A0C4:                             ; CODE XREF: _getmntent_r+1F0↑j
.text:0040A0C4                 mov     [edi+0Ch], esi
.text:0040A0C7                 xor     eax, eax
.text:0040A0C9                 mov     edx, [esp+15Ch+Buffer]
.text:0040A0CD                 test    edx, edx
.text:0040A0CF                 jnz     short loc_40A105
.text:0040A0D1
.text:0040A0D1 loc_40A0D1:                             ; CODE XREF: _getmntent_r+273↓j
.text:0040A0D1                 cmp     eax, 1
.text:0040A0D4                 jz      short loc_40A0FC
.text:0040A0D6                 cmp     eax, 1
.text:0040A0D9                 jle     short loc_40A0F1
.text:0040A0DB
.text:0040A0DB loc_40A0DB:                             ; CODE XREF: _getmntent_r+243↓j
.text:0040A0DB                                         ; _getmntent_r+253↓j
.text:0040A0DB                 mov     edx, [esp+15Ch+arg_0]
.text:0040A0E2                 mov     [esp+15Ch+Str1], edx
.text:0040A0E5                 call    sub_40C280
.text:0040A0EA                 mov     eax, edi
.text:0040A0EC                 jmp     loc_409F2A
.text:0040A0F1 ; ---------------------------------------------------------------------------
.text:0040A0F1
.text:0040A0F1 loc_40A0F1:                             ; CODE XREF: _getmntent_r+229↑j
.text:0040A0F1                 test    eax, eax
.text:0040A0F3                 jnz     short loc_40A0DB
.text:0040A0F5                 mov     dword ptr [edi+10h], 0
.text:0040A0FC
.text:0040A0FC loc_40A0FC:                             ; CODE XREF: _getmntent_r+224↑j
.text:0040A0FC                 mov     dword ptr [edi+14h], 0
.text:0040A103                 jmp     short loc_40A0DB
.text:0040A105 ; ---------------------------------------------------------------------------
.text:0040A105
.text:0040A105 loc_40A105:                             ; CODE XREF: _getmntent_r+21F↑j
.text:0040A105                 mov     [esp+15Ch+Str2], (offset loc_409E9D+1)
.text:0040A10D                 lea     esi, [edi+14h]
.text:0040A110                 lea     ebp, [edi+10h]
.text:0040A113                 mov     [esp+15Ch+var_150], esi
.text:0040A117                 mov     [esp+15Ch+dwBytes], ebp
.text:0040A11B                 mov     [esp+15Ch+Str1], edx ; Buffer
.text:0040A11E                 call    sscanf
.text:0040A123                 jmp     short loc_40A0D1
.text:0040A125 ; ---------------------------------------------------------------------------
.text:0040A125
.text:0040A125 loc_40A125:                             ; CODE XREF: _getmntent_r+205↑j
.text:0040A125                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A129                 jz      short loc_40A168
.text:0040A12B
.text:0040A12B loc_40A12B:                             ; CODE XREF: _getmntent_r+2BC↓j
.text:0040A12B                                         ; _getmntent_r+2C2↓j
.text:0040A12B                 cmp     al, 5Ch ; '\'
.text:0040A12D                 jnz     short loc_40A0B7
.text:0040A12F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A133                 jz      short loc_40A150
.text:0040A135
.text:0040A135 loc_40A135:                             ; CODE XREF: _getmntent_r+2A4↓j
.text:0040A135                                         ; _getmntent_r+2AA↓j
.text:0040A135                 cmp     al, 5Ch ; '\'
.text:0040A137                 jnz     loc_40A0B7
.text:0040A13D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A141                 jnz     loc_40A0B7
.text:0040A147                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A14A                 inc     edx
.text:0040A14B                 jmp     loc_40A0B9
.text:0040A150 ; ---------------------------------------------------------------------------
.text:0040A150
.text:0040A150 loc_40A150:                             ; CODE XREF: _getmntent_r+283↑j
.text:0040A150                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A154                 jnz     short loc_40A135
.text:0040A156                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A15A                 jnz     short loc_40A135
.text:0040A15C                 mov     byte ptr [ecx], 9
.text:0040A15F
.text:0040A15F loc_40A15F:                             ; CODE XREF: _getmntent_r+2C7↓j
.text:0040A15F                 inc     ecx
.text:0040A160                 add     edx, 3
.text:0040A163                 jmp     loc_40A0BA
.text:0040A168 ; ---------------------------------------------------------------------------
.text:0040A168
.text:0040A168 loc_40A168:                             ; CODE XREF: _getmntent_r+279↑j
.text:0040A168                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A16C                 jnz     short loc_40A12B
.text:0040A16E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A172                 jnz     short loc_40A12B
.text:0040A174                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A177                 jmp     short loc_40A15F
.text:0040A179 ; ---------------------------------------------------------------------------
.text:0040A179
.text:0040A179 loc_40A179:                             ; CODE XREF: _getmntent_r+1D1↑j
.text:0040A179                 mov     [esp+15Ch+Str2], (offset loc_409E99+1)
.text:0040A181                 mov     [esp+15Ch+Str1], eax ; Str
.text:0040A184                 call    strspn
.text:0040A189                 add     [esp+15Ch+Buffer], eax
.text:0040A18D                 jmp     loc_40A087
.text:0040A192 ; ---------------------------------------------------------------------------
.text:0040A192
.text:0040A192 loc_40A192:                             ; CODE XREF: _getmntent_r+1B5↑j
.text:0040A192                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A196                 jz      short loc_40A1D9
.text:0040A198
.text:0040A198 loc_40A198:                             ; CODE XREF: _getmntent_r+32D↓j
.text:0040A198                                         ; _getmntent_r+333↓j
.text:0040A198                 cmp     al, 5Ch ; '\'
.text:0040A19A                 jnz     loc_40A06B
.text:0040A1A0                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A1A4                 jz      short loc_40A1C1
.text:0040A1A6
.text:0040A1A6 loc_40A1A6:                             ; CODE XREF: _getmntent_r+315↓j
.text:0040A1A6                                         ; _getmntent_r+31B↓j
.text:0040A1A6                 cmp     al, 5Ch ; '\'
.text:0040A1A8                 jnz     loc_40A06B
.text:0040A1AE                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A1B2                 jnz     loc_40A06B
.text:0040A1B8                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A1BB                 inc     edx
.text:0040A1BC                 jmp     loc_40A06D
.text:0040A1C1 ; ---------------------------------------------------------------------------
.text:0040A1C1
.text:0040A1C1 loc_40A1C1:                             ; CODE XREF: _getmntent_r+2F4↑j
.text:0040A1C1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A1C5                 jnz     short loc_40A1A6
.text:0040A1C7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A1CB                 jnz     short loc_40A1A6
.text:0040A1CD                 mov     byte ptr [ecx], 9
.text:0040A1D0
.text:0040A1D0 loc_40A1D0:                             ; CODE XREF: _getmntent_r+338↓j
.text:0040A1D0                 inc     ecx
.text:0040A1D1                 add     edx, 3
.text:0040A1D4                 jmp     loc_40A06E
.text:0040A1D9 ; ---------------------------------------------------------------------------
.text:0040A1D9
.text:0040A1D9 loc_40A1D9:                             ; CODE XREF: _getmntent_r+2E6↑j
.text:0040A1D9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A1DD                 jnz     short loc_40A198
.text:0040A1DF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A1E3                 jnz     short loc_40A198
.text:0040A1E5                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A1E8                 jmp     short loc_40A1D0
.text:0040A1EA ; ---------------------------------------------------------------------------
.text:0040A1EA
.text:0040A1EA loc_40A1EA:                             ; CODE XREF: _getmntent_r+181↑j
.text:0040A1EA                 mov     [esp+15Ch+Str2], (offset loc_409E99+1)
.text:0040A1F2                 mov     [esp+15Ch+Str1], eax ; Str
.text:0040A1F5                 call    strspn
.text:0040A1FA                 add     [esp+15Ch+Buffer], eax
.text:0040A1FE                 jmp     loc_40A037
.text:0040A203 ; ---------------------------------------------------------------------------
.text:0040A203
.text:0040A203 loc_40A203:                             ; CODE XREF: _getmntent_r+165↑j
.text:0040A203                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A207                 jz      short loc_40A24A
.text:0040A209
.text:0040A209 loc_40A209:                             ; CODE XREF: _getmntent_r+39E↓j
.text:0040A209                                         ; _getmntent_r+3A4↓j
.text:0040A209                 cmp     al, 5Ch ; '\'
.text:0040A20B                 jnz     loc_40A01B
.text:0040A211                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A215                 jz      short loc_40A232
.text:0040A217
.text:0040A217 loc_40A217:                             ; CODE XREF: _getmntent_r+386↓j
.text:0040A217                                         ; _getmntent_r+38C↓j
.text:0040A217                 cmp     al, 5Ch ; '\'
.text:0040A219                 jnz     loc_40A01B
.text:0040A21F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A223                 jnz     loc_40A01B
.text:0040A229                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A22C                 inc     edx
.text:0040A22D                 jmp     loc_40A01D
.text:0040A232 ; ---------------------------------------------------------------------------
.text:0040A232
.text:0040A232 loc_40A232:                             ; CODE XREF: _getmntent_r+365↑j
.text:0040A232                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A236                 jnz     short loc_40A217
.text:0040A238                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A23C                 jnz     short loc_40A217
.text:0040A23E                 mov     byte ptr [ecx], 9
.text:0040A241
.text:0040A241 loc_40A241:                             ; CODE XREF: _getmntent_r+3A9↓j
.text:0040A241                 inc     ecx
.text:0040A242                 add     edx, 3
.text:0040A245                 jmp     loc_40A01E
.text:0040A24A ; ---------------------------------------------------------------------------
.text:0040A24A
.text:0040A24A loc_40A24A:                             ; CODE XREF: _getmntent_r+357↑j
.text:0040A24A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A24E                 jnz     short loc_40A209
.text:0040A250                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A254                 jnz     short loc_40A209
.text:0040A256                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A259                 jmp     short loc_40A241
.text:0040A25B ; ---------------------------------------------------------------------------
.text:0040A25B
.text:0040A25B loc_40A25B:                             ; CODE XREF: _getmntent_r+130↑j
.text:0040A25B                 mov     [esp+15Ch+Str2], (offset loc_409E99+1)
.text:0040A263                 mov     [esp+15Ch+Str1], eax ; Str
.text:0040A266                 call    strspn
.text:0040A26B                 add     [esp+15Ch+Buffer], eax
.text:0040A26F                 jmp     loc_409FE6
.text:0040A274 ; ---------------------------------------------------------------------------
.text:0040A274
.text:0040A274 loc_40A274:                             ; CODE XREF: _getmntent_r+115↑j
.text:0040A274                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A278                 jz      short loc_40A2BB
.text:0040A27A
.text:0040A27A loc_40A27A:                             ; CODE XREF: _getmntent_r+40F↓j
.text:0040A27A                                         ; _getmntent_r+415↓j
.text:0040A27A                 cmp     al, 5Ch ; '\'
.text:0040A27C                 jnz     loc_409FCB
.text:0040A282                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A286                 jz      short loc_40A2A3
.text:0040A288
.text:0040A288 loc_40A288:                             ; CODE XREF: _getmntent_r+3F7↓j
.text:0040A288                                         ; _getmntent_r+3FD↓j
.text:0040A288                 cmp     al, 5Ch ; '\'
.text:0040A28A                 jnz     loc_409FCB
.text:0040A290                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A294                 jnz     loc_409FCB
.text:0040A29A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A29D                 inc     edx
.text:0040A29E                 jmp     loc_409FCD
.text:0040A2A3 ; ---------------------------------------------------------------------------
.text:0040A2A3
.text:0040A2A3 loc_40A2A3:                             ; CODE XREF: _getmntent_r+3D6↑j
.text:0040A2A3                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A2A7                 jnz     short loc_40A288
.text:0040A2A9                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A2AD                 jnz     short loc_40A288
.text:0040A2AF                 mov     byte ptr [ecx], 9
.text:0040A2B2
.text:0040A2B2 loc_40A2B2:                             ; CODE XREF: _getmntent_r+41A↓j
.text:0040A2B2                 inc     ecx
.text:0040A2B3                 add     edx, 3
.text:0040A2B6                 jmp     loc_409FCE
.text:0040A2BB ; ---------------------------------------------------------------------------
.text:0040A2BB
.text:0040A2BB loc_40A2BB:                             ; CODE XREF: _getmntent_r+3C8↑j
.text:0040A2BB                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A2BF                 jnz     short loc_40A27A
.text:0040A2C1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A2C5                 jnz     short loc_40A27A
.text:0040A2C7                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A2CA                 jmp     short loc_40A2B2
.text:0040A2CA ; ---------------------------------------------------------------------------
.text:0040A2CC                 align 10h
.text:0040A2D0
.text:0040A2D0 loc_40A2D0:                             ; CODE XREF: _getmntent_r+32↑j
.text:0040A2D0                 mov     [esp+15Ch+Str2], 0 ; lpBuffer
.text:0040A2D8                 mov     [esp+15Ch+Str1], 0 ; nBufferLength
.text:0040A2DF                 call    GetLogicalDriveStringsA
.text:0040A2E4                 sub     esp, 8
.text:0040A2E7                 mov     ebx, eax
.text:0040A2E9                 call    GetProcessHeap
.text:0040A2EE                 mov     [esp+15Ch+Str1], eax ; hHeap
.text:0040A2F1                 mov     [esp+15Ch+dwBytes], ebx ; dwBytes
.text:0040A2F5                 mov     [esp+15Ch+Str2], 0 ; dwFlags
.text:0040A2FD                 call    HeapAlloc
.text:0040A302                 sub     esp, 0Ch
.text:0040A305                 mov     esi, eax
.text:0040A307                 mov     [esp+15Ch+Str2], eax ; lpBuffer
.text:0040A30B                 mov     [esp+15Ch+Str1], ebx ; nBufferLength
.text:0040A30E                 call    GetLogicalDriveStringsA
.text:0040A313                 mov     lpMem, esi
.text:0040A319                 sub     esp, 8
.text:0040A31C                 jmp     loc_409EE8
.text:0040A31C _getmntent_r    endp
.text:0040A31C
.text:0040A31C ; ---------------------------------------------------------------------------
.text:0040A321 ; const char aSSSSDD[]
.text:0040A321 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040A321                                         ; DATA XREF: .text:0040A460↓o
.text:0040A321                                         ; ___addmntentstr+F0↓o
.text:0040A334                 align 10h
.text:0040A340                 push    esi
.text:0040A341                 push    ebx
.text:0040A342                 sub     esp, 44h
.text:0040A345                 mov     ebx, [esp+54h]
.text:0040A349                 mov     esi, [esp+50h]
.text:0040A34D                 mov     edx, [ebx]
.text:0040A34F                 mov     [esp+20h], edx
.text:0040A353                 mov     ecx, [ebx+4]
.text:0040A356                 mov     [esp+24h], ecx
.text:0040A35A                 mov     edx, [ebx+8]
.text:0040A35D                 mov     [esp+28h], edx
.text:0040A361                 mov     ecx, [ebx+0Ch]
.text:0040A364                 mov     [esp+2Ch], ecx
.text:0040A368                 mov     edx, [ebx+10h]
.text:0040A36B                 mov     [esp+30h], edx
.text:0040A36F                 mov     ecx, [ebx+14h]
.text:0040A372                 mov     dword ptr [esp+8], 2
.text:0040A37A                 mov     dword ptr [esp+4], 0
.text:0040A382                 mov     [esp+34h], ecx
.text:0040A386                 mov     [esp], esi
.text:0040A389                 call    sub_40C270
.text:0040A38E ; ---------------------------------------------------------------------------
.text:0040A38E                 test    eax, eax
.text:0040A390                 mov     edx, 1
.text:0040A395                 jnz     loc_40A495
.text:0040A39B                 mov     ebx, [esp+20h]
.text:0040A39F                 mov     edx, ebx
.text:0040A3A1                 movzx   eax, byte ptr [ebx]
.text:0040A3A4                 test    al, al
.text:0040A3A6                 jz      short loc_40A3D0
.text:0040A3A8                 nop
.text:0040A3A9                 lea     esi, [esi+0]
.text:0040A3B0
.text:0040A3B0 loc_40A3B0:                             ; CODE XREF: .text:0040A3CE↓j
.text:0040A3B0                 cmp     al, 20h ; ' '
.text:0040A3B2                 jz      loc_40A60A
.text:0040A3B8                 cmp     al, 9
.text:0040A3BA                 jz      loc_40A60A
.text:0040A3C0                 cmp     al, 5Ch ; '\'
.text:0040A3C2                 jz      loc_40A60A
.text:0040A3C8                 inc     ebx
.text:0040A3C9                 movzx   eax, byte ptr [ebx]
.text:0040A3CC                 test    al, al
.text:0040A3CE                 jnz     short loc_40A3B0
.text:0040A3D0
.text:0040A3D0 loc_40A3D0:                             ; CODE XREF: .text:0040A3A6↑j
.text:0040A3D0                                         ; .text:0040A60C↓j ...
.text:0040A3D0                 mov     ebx, [esp+24h]
.text:0040A3D4                 mov     edx, ebx
.text:0040A3D6                 movzx   eax, byte ptr [ebx]
.text:0040A3D9                 test    al, al
.text:0040A3DB                 jz      short loc_40A400
.text:0040A3DD                 lea     esi, [esi+0]
.text:0040A3E0
.text:0040A3E0 loc_40A3E0:                             ; CODE XREF: .text:0040A3FE↓j
.text:0040A3E0                 cmp     al, 20h ; ' '
.text:0040A3E2                 jz      loc_40A58A
.text:0040A3E8                 cmp     al, 9
.text:0040A3EA                 jz      loc_40A58A
.text:0040A3F0                 cmp     al, 5Ch ; '\'
.text:0040A3F2                 jz      loc_40A58A
.text:0040A3F8                 inc     ebx
.text:0040A3F9                 movzx   eax, byte ptr [ebx]
.text:0040A3FC                 test    al, al
.text:0040A3FE                 jnz     short loc_40A3E0
.text:0040A400
.text:0040A400 loc_40A400:                             ; CODE XREF: .text:0040A3DB↑j
.text:0040A400                                         ; .text:0040A58C↓j ...
.text:0040A400                 mov     ebx, [esp+28h]
.text:0040A404                 mov     edx, ebx
.text:0040A406                 movzx   eax, byte ptr [ebx]
.text:0040A409                 test    al, al
.text:0040A40B                 jz      short loc_40A430
.text:0040A40D                 lea     esi, [esi+0]
.text:0040A410
.text:0040A410 loc_40A410:                             ; CODE XREF: .text:0040A42E↓j
.text:0040A410                 cmp     al, 20h ; ' '
.text:0040A412                 jz      loc_40A50E
.text:0040A418                 cmp     al, 9
.text:0040A41A                 jz      loc_40A50E
.text:0040A420                 cmp     al, 5Ch ; '\'
.text:0040A422                 jz      loc_40A50E
.text:0040A428                 inc     ebx
.text:0040A429                 movzx   eax, byte ptr [ebx]
.text:0040A42C                 test    al, al
.text:0040A42E                 jnz     short loc_40A410
.text:0040A430
.text:0040A430 loc_40A430:                             ; CODE XREF: .text:0040A40B↑j
.text:0040A430                                         ; .text:0040A510↓j ...
.text:0040A430                 mov     edx, [esp+2Ch]
.text:0040A434                 mov     ebx, edx
.text:0040A436                 movzx   eax, byte ptr [edx]
.text:0040A439                 test    al, al
.text:0040A43B                 jz      short loc_40A454
.text:0040A43D                 lea     esi, [esi+0]
.text:0040A440
.text:0040A440 loc_40A440:                             ; CODE XREF: .text:0040A452↓j
.text:0040A440                 cmp     al, 20h ; ' '
.text:0040A442                 jz      short loc_40A49D
.text:0040A444                 cmp     al, 9
.text:0040A446                 jz      short loc_40A49D
.text:0040A448                 cmp     al, 5Ch ; '\'
.text:0040A44A                 jz      short loc_40A49D
.text:0040A44C                 inc     ebx
.text:0040A44D                 movzx   eax, byte ptr [ebx]
.text:0040A450                 test    al, al
.text:0040A452                 jnz     short loc_40A440
.text:0040A454
.text:0040A454 loc_40A454:                             ; CODE XREF: .text:0040A43B↑j
.text:0040A454                                         ; .text:0040A49F↓j ...
.text:0040A454                 mov     [esp+14h], edx
.text:0040A458                 mov     ecx, [esp+34h]
.text:0040A45C                 mov     ebx, [esp+30h]
.text:0040A460                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040A468                 mov     edx, [esp+24h]
.text:0040A46C                 mov     [esp+1Ch], ecx
.text:0040A470                 mov     ecx, [esp+28h]
.text:0040A474                 mov     [esp+18h], ebx
.text:0040A478                 mov     ebx, [esp+20h]
.text:0040A47C                 mov     [esp+0Ch], edx
.text:0040A480                 mov     [esp+10h], ecx
.text:0040A484                 mov     [esp+8], ebx
.text:0040A488                 mov     [esp], esi
.text:0040A48B                 call    fprintf
.text:0040A490                 mov     edx, eax
.text:0040A492                 shr     edx, 1Fh
.text:0040A495
.text:0040A495 loc_40A495:                             ; CODE XREF: .text:0040A395↑j
.text:0040A495                 add     esp, 44h
.text:0040A498                 mov     eax, edx
.text:0040A49A                 pop     ebx
.text:0040A49B                 pop     esi
.text:0040A49C                 retn
.text:0040A49D ; ---------------------------------------------------------------------------
.text:0040A49D
.text:0040A49D loc_40A49D:                             ; CODE XREF: .text:0040A442↑j
.text:0040A49D                                         ; .text:0040A446↑j ...
.text:0040A49D                 test    al, al
.text:0040A49F                 jz      short loc_40A454
.text:0040A4A1                 mov     [esp], edx
.text:0040A4A4                 mov     ebx, edx
.text:0040A4A6                 call    strlen
.text:0040A4AB                 lea     edx, ds:1[eax*4]
.text:0040A4B2                 mov     [esp], edx
.text:0040A4B5                 call    malloc
.text:0040A4BA                 mov     [esp+2Ch], eax
.text:0040A4BE                 mov     edx, eax
.text:0040A4C0
.text:0040A4C0 loc_40A4C0:                             ; CODE XREF: .text:0040A4D8↓j
.text:0040A4C0                 movzx   eax, byte ptr [ebx]
.text:0040A4C3                 cmp     al, 20h ; ' '
.text:0040A4C5                 jz      short loc_40A4FD
.text:0040A4C7                 cmp     al, 9
.text:0040A4C9                 jz      short loc_40A4EC
.text:0040A4CB                 cmp     al, 5Ch ; '\'
.text:0040A4CD                 jz      short loc_40A4E3
.text:0040A4CF                 mov     [edx], al
.text:0040A4D1
.text:0040A4D1 loc_40A4D1:                             ; CODE XREF: .text:0040A4EA↓j
.text:0040A4D1                                         ; .text:0040A4FB↓j ...
.text:0040A4D1                 movzx   ecx, byte ptr [ebx]
.text:0040A4D4                 inc     edx
.text:0040A4D5                 inc     ebx
.text:0040A4D6                 test    cl, cl
.text:0040A4D8                 jnz     short loc_40A4C0
.text:0040A4DA                 mov     edx, [esp+2Ch]
.text:0040A4DE                 jmp     loc_40A454
.text:0040A4E3 ; ---------------------------------------------------------------------------
.text:0040A4E3
.text:0040A4E3 loc_40A4E3:                             ; CODE XREF: .text:0040A4CD↑j
.text:0040A4E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A4E6                 inc     edx
.text:0040A4E7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A4EA                 jmp     short loc_40A4D1
.text:0040A4EC ; ---------------------------------------------------------------------------
.text:0040A4EC
.text:0040A4EC loc_40A4EC:                             ; CODE XREF: .text:0040A4C9↑j
.text:0040A4EC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A4EF                 inc     edx
.text:0040A4F0                 mov     byte ptr [edx], 30h ; '0'
.text:0040A4F3                 inc     edx
.text:0040A4F4                 mov     byte ptr [edx], 31h ; '1'
.text:0040A4F7                 inc     edx
.text:0040A4F8                 mov     byte ptr [edx], 32h ; '2'
.text:0040A4FB                 jmp     short loc_40A4D1
.text:0040A4FD ; ---------------------------------------------------------------------------
.text:0040A4FD
.text:0040A4FD loc_40A4FD:                             ; CODE XREF: .text:0040A4C5↑j
.text:0040A4FD                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A500                 inc     edx
.text:0040A501                 mov     byte ptr [edx], 30h ; '0'
.text:0040A504                 inc     edx
.text:0040A505                 mov     byte ptr [edx], 34h ; '4'
.text:0040A508                 inc     edx
.text:0040A509                 mov     byte ptr [edx], 30h ; '0'
.text:0040A50C                 jmp     short loc_40A4D1
.text:0040A50E ; ---------------------------------------------------------------------------
.text:0040A50E
.text:0040A50E loc_40A50E:                             ; CODE XREF: .text:0040A412↑j
.text:0040A50E                                         ; .text:0040A41A↑j ...
.text:0040A50E                 test    al, al
.text:0040A510                 jz      loc_40A430
.text:0040A516                 mov     [esp], edx
.text:0040A519                 mov     ebx, edx
.text:0040A51B                 call    strlen
.text:0040A520                 lea     edx, ds:1[eax*4]
.text:0040A527                 mov     [esp], edx
.text:0040A52A                 call    malloc
.text:0040A52F                 mov     [esp+28h], eax
.text:0040A533                 mov     edx, eax
.text:0040A535                 lea     esi, [esi+0]
.text:0040A539                 lea     edi, [edi+0]
.text:0040A540
.text:0040A540 loc_40A540:                             ; CODE XREF: .text:0040A558↓j
.text:0040A540                 movzx   eax, byte ptr [ebx]
.text:0040A543                 cmp     al, 20h ; ' '
.text:0040A545                 jz      short loc_40A579
.text:0040A547                 cmp     al, 9
.text:0040A549                 jz      short loc_40A568
.text:0040A54B                 cmp     al, 5Ch ; '\'
.text:0040A54D                 jz      short loc_40A55F
.text:0040A54F                 mov     [edx], al
.text:0040A551
.text:0040A551 loc_40A551:                             ; CODE XREF: .text:0040A566↓j
.text:0040A551                                         ; .text:0040A577↓j ...
.text:0040A551                 movzx   ecx, byte ptr [ebx]
.text:0040A554                 inc     edx
.text:0040A555                 inc     ebx
.text:0040A556                 test    cl, cl
.text:0040A558                 jnz     short loc_40A540
.text:0040A55A                 jmp     loc_40A430
.text:0040A55F ; ---------------------------------------------------------------------------
.text:0040A55F
.text:0040A55F loc_40A55F:                             ; CODE XREF: .text:0040A54D↑j
.text:0040A55F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A562                 inc     edx
.text:0040A563                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A566                 jmp     short loc_40A551
.text:0040A568 ; ---------------------------------------------------------------------------
.text:0040A568
.text:0040A568 loc_40A568:                             ; CODE XREF: .text:0040A549↑j
.text:0040A568                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A56B                 inc     edx
.text:0040A56C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A56F                 inc     edx
.text:0040A570                 mov     byte ptr [edx], 31h ; '1'
.text:0040A573                 inc     edx
.text:0040A574                 mov     byte ptr [edx], 32h ; '2'
.text:0040A577                 jmp     short loc_40A551
.text:0040A579 ; ---------------------------------------------------------------------------
.text:0040A579
.text:0040A579 loc_40A579:                             ; CODE XREF: .text:0040A545↑j
.text:0040A579                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A57C                 inc     edx
.text:0040A57D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A580                 inc     edx
.text:0040A581                 mov     byte ptr [edx], 34h ; '4'
.text:0040A584                 inc     edx
.text:0040A585                 mov     byte ptr [edx], 30h ; '0'
.text:0040A588                 jmp     short loc_40A551
.text:0040A58A ; ---------------------------------------------------------------------------
.text:0040A58A
.text:0040A58A loc_40A58A:                             ; CODE XREF: .text:0040A3E2↑j
.text:0040A58A                                         ; .text:0040A3EA↑j ...
.text:0040A58A                 test    al, al
.text:0040A58C                 jz      loc_40A400
.text:0040A592                 mov     [esp], edx
.text:0040A595                 mov     ebx, edx
.text:0040A597                 call    strlen
.text:0040A59C                 lea     edx, ds:1[eax*4]
.text:0040A5A3                 mov     [esp], edx
.text:0040A5A6                 call    malloc
.text:0040A5AB                 mov     [esp+24h], eax
.text:0040A5AF                 mov     edx, eax
.text:0040A5B1                 jmp     short loc_40A5C0
.text:0040A5B1 ; ---------------------------------------------------------------------------
.text:0040A5B3                 align 10h
.text:0040A5C0
.text:0040A5C0 loc_40A5C0:                             ; CODE XREF: .text:0040A5B1↑j
.text:0040A5C0                                         ; .text:0040A5D8↓j
.text:0040A5C0                 movzx   eax, byte ptr [ebx]
.text:0040A5C3                 cmp     al, 20h ; ' '
.text:0040A5C5                 jz      short loc_40A5F9
.text:0040A5C7                 cmp     al, 9
.text:0040A5C9                 jz      short loc_40A5E8
.text:0040A5CB                 cmp     al, 5Ch ; '\'
.text:0040A5CD                 jz      short loc_40A5DF
.text:0040A5CF                 mov     [edx], al
.text:0040A5D1
.text:0040A5D1 loc_40A5D1:                             ; CODE XREF: .text:0040A5E6↓j
.text:0040A5D1                                         ; .text:0040A5F7↓j ...
.text:0040A5D1                 movzx   ecx, byte ptr [ebx]
.text:0040A5D4                 inc     edx
.text:0040A5D5                 inc     ebx
.text:0040A5D6                 test    cl, cl
.text:0040A5D8                 jnz     short loc_40A5C0
.text:0040A5DA                 jmp     loc_40A400
.text:0040A5DF ; ---------------------------------------------------------------------------
.text:0040A5DF
.text:0040A5DF loc_40A5DF:                             ; CODE XREF: .text:0040A5CD↑j
.text:0040A5DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A5E2                 inc     edx
.text:0040A5E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A5E6                 jmp     short loc_40A5D1
.text:0040A5E8 ; ---------------------------------------------------------------------------
.text:0040A5E8
.text:0040A5E8 loc_40A5E8:                             ; CODE XREF: .text:0040A5C9↑j
.text:0040A5E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A5EB                 inc     edx
.text:0040A5EC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A5EF                 inc     edx
.text:0040A5F0                 mov     byte ptr [edx], 31h ; '1'
.text:0040A5F3                 inc     edx
.text:0040A5F4                 mov     byte ptr [edx], 32h ; '2'
.text:0040A5F7                 jmp     short loc_40A5D1
.text:0040A5F9 ; ---------------------------------------------------------------------------
.text:0040A5F9
.text:0040A5F9 loc_40A5F9:                             ; CODE XREF: .text:0040A5C5↑j
.text:0040A5F9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A5FC                 inc     edx
.text:0040A5FD                 mov     byte ptr [edx], 30h ; '0'
.text:0040A600                 inc     edx
.text:0040A601                 mov     byte ptr [edx], 34h ; '4'
.text:0040A604                 inc     edx
.text:0040A605                 mov     byte ptr [edx], 30h ; '0'
.text:0040A608                 jmp     short loc_40A5D1
.text:0040A60A ; ---------------------------------------------------------------------------
.text:0040A60A
.text:0040A60A loc_40A60A:                             ; CODE XREF: .text:0040A3B2↑j
.text:0040A60A                                         ; .text:0040A3BA↑j ...
.text:0040A60A                 test    al, al
.text:0040A60C                 jz      loc_40A3D0
.text:0040A612                 mov     [esp], edx
.text:0040A615                 mov     ebx, edx
.text:0040A617                 call    strlen
.text:0040A61C                 lea     ecx, ds:1[eax*4]
.text:0040A623                 mov     [esp], ecx
.text:0040A626                 call    malloc
.text:0040A62B                 mov     [esp+20h], eax
.text:0040A62F                 mov     edx, eax
.text:0040A631                 jmp     short loc_40A640
.text:0040A631 ; ---------------------------------------------------------------------------
.text:0040A633                 align 10h
.text:0040A640
.text:0040A640 loc_40A640:                             ; CODE XREF: .text:0040A631↑j
.text:0040A640                                         ; .text:0040A658↓j
.text:0040A640                 movzx   eax, byte ptr [ebx]
.text:0040A643                 cmp     al, 20h ; ' '
.text:0040A645                 jz      short loc_40A679
.text:0040A647                 cmp     al, 9
.text:0040A649                 jz      short loc_40A668
.text:0040A64B                 cmp     al, 5Ch ; '\'
.text:0040A64D                 jz      short loc_40A65F
.text:0040A64F                 mov     [edx], al
.text:0040A651
.text:0040A651 loc_40A651:                             ; CODE XREF: .text:0040A666↓j
.text:0040A651                                         ; .text:0040A677↓j ...
.text:0040A651                 movzx   ecx, byte ptr [ebx]
.text:0040A654                 inc     edx
.text:0040A655                 inc     ebx
.text:0040A656                 test    cl, cl
.text:0040A658                 jnz     short loc_40A640
.text:0040A65A                 jmp     loc_40A3D0
.text:0040A65F ; ---------------------------------------------------------------------------
.text:0040A65F
.text:0040A65F loc_40A65F:                             ; CODE XREF: .text:0040A64D↑j
.text:0040A65F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A662                 inc     edx
.text:0040A663                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A666                 jmp     short loc_40A651
.text:0040A668 ; ---------------------------------------------------------------------------
.text:0040A668
.text:0040A668 loc_40A668:                             ; CODE XREF: .text:0040A649↑j
.text:0040A668                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A66B                 inc     edx
.text:0040A66C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A66F                 inc     edx
.text:0040A670                 mov     byte ptr [edx], 31h ; '1'
.text:0040A673                 inc     edx
.text:0040A674                 mov     byte ptr [edx], 32h ; '2'
.text:0040A677                 jmp     short loc_40A651
.text:0040A679 ; ---------------------------------------------------------------------------
.text:0040A679
.text:0040A679 loc_40A679:                             ; CODE XREF: .text:0040A645↑j
.text:0040A679                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A67C                 inc     edx
.text:0040A67D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A680                 inc     edx
.text:0040A681                 mov     byte ptr [edx], 34h ; '4'
.text:0040A684                 inc     edx
.text:0040A685                 mov     byte ptr [edx], 30h ; '0'
.text:0040A688                 jmp     short loc_40A651
.text:0040A688 ; ---------------------------------------------------------------------------
.text:0040A68A                 align 10h
.text:0040A690
.text:0040A690 ; =============== S U B R O U T I N E =======================================
.text:0040A690
.text:0040A690 ; Attributes: info_from_lumina
.text:0040A690
.text:0040A690 ; int __cdecl __addmntentstr(char *, int)
.text:0040A690 ___addmntentstr proc near               ; CODE XREF: _getmntent_r+AA↑p
.text:0040A690
.text:0040A690 Buffer          = dword ptr -4Ch
.text:0040A690 Format          = dword ptr -48h
.text:0040A690 var_44          = dword ptr -44h
.text:0040A690 var_40          = dword ptr -40h
.text:0040A690 var_3C          = dword ptr -3Ch
.text:0040A690 var_38          = dword ptr -38h
.text:0040A690 var_34          = dword ptr -34h
.text:0040A690 var_30          = dword ptr -30h
.text:0040A690 var_2C          = dword ptr -2Ch
.text:0040A690 var_28          = dword ptr -28h
.text:0040A690 var_24          = dword ptr -24h
.text:0040A690 Str             = dword ptr -20h
.text:0040A690 var_1C          = dword ptr -1Ch
.text:0040A690 var_18          = dword ptr -18h
.text:0040A690 arg_0           = dword ptr  4
.text:0040A690 arg_4           = dword ptr  8
.text:0040A690
.text:0040A690                 push    ebx
.text:0040A691                 sub     esp, 48h
.text:0040A694                 mov     edx, [esp+4Ch+arg_4]
.text:0040A698                 mov     ecx, [edx]
.text:0040A69A                 mov     [esp+4Ch+var_2C], ecx
.text:0040A69E                 mov     ebx, [edx+4]
.text:0040A6A1                 mov     [esp+4Ch+var_28], ebx
.text:0040A6A5                 mov     ebx, [edx+8]
.text:0040A6A8                 mov     [esp+4Ch+var_24], ebx
.text:0040A6AC                 mov     ebx, [edx+0Ch]
.text:0040A6AF                 mov     [esp+4Ch+Str], ebx
.text:0040A6B3                 mov     ebx, [edx+10h]
.text:0040A6B6                 mov     [esp+4Ch+var_1C], ebx
.text:0040A6BA                 mov     ebx, [edx+14h]
.text:0040A6BD                 mov     [esp+4Ch+var_18], ebx
.text:0040A6C1                 mov     ebx, ecx
.text:0040A6C3                 movzx   eax, byte ptr [ecx]
.text:0040A6C6                 test    al, al
.text:0040A6C8                 jz      loc_40A9B1
.text:0040A6CE                 mov     esi, esi
.text:0040A6D0
.text:0040A6D0 loc_40A6D0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040A6D0                 cmp     al, 20h ; ' '
.text:0040A6D2                 jz      loc_40A930
.text:0040A6D8                 cmp     al, 9
.text:0040A6DA                 jz      loc_40A930
.text:0040A6E0                 cmp     al, 5Ch ; '\'
.text:0040A6E2                 jz      loc_40A930
.text:0040A6E8                 inc     ebx
.text:0040A6E9                 movzx   eax, byte ptr [ebx]
.text:0040A6EC                 test    al, al
.text:0040A6EE                 jnz     short loc_40A6D0
.text:0040A6F0
.text:0040A6F0 loc_40A6F0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040A6F0                                         ; ___addmntentstr+2EA↓j
.text:0040A6F0                 mov     ebx, [esp+4Ch+var_28]
.text:0040A6F4                 mov     edx, ebx
.text:0040A6F6                 movzx   eax, byte ptr [ebx]
.text:0040A6F9                 test    al, al
.text:0040A6FB                 jz      short loc_40A720
.text:0040A6FD                 lea     esi, [esi+0]
.text:0040A700
.text:0040A700 loc_40A700:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040A700                 cmp     al, 20h ; ' '
.text:0040A702                 jz      loc_40A8AA
.text:0040A708                 cmp     al, 9
.text:0040A70A                 jz      loc_40A8AA
.text:0040A710                 cmp     al, 5Ch ; '\'
.text:0040A712                 jz      loc_40A8AA
.text:0040A718                 inc     ebx
.text:0040A719                 movzx   eax, byte ptr [ebx]
.text:0040A71C                 test    al, al
.text:0040A71E                 jnz     short loc_40A700
.text:0040A720
.text:0040A720 loc_40A720:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040A720                                         ; ___addmntentstr+21C↓j ...
.text:0040A720                 mov     ebx, [esp+4Ch+var_24]
.text:0040A724                 mov     edx, ebx
.text:0040A726                 movzx   eax, byte ptr [ebx]
.text:0040A729                 test    al, al
.text:0040A72B                 jz      short loc_40A750
.text:0040A72D                 lea     esi, [esi+0]
.text:0040A730
.text:0040A730 loc_40A730:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040A730                 cmp     al, 20h ; ' '
.text:0040A732                 jz      loc_40A82E
.text:0040A738                 cmp     al, 9
.text:0040A73A                 jz      loc_40A82E
.text:0040A740                 cmp     al, 5Ch ; '\'
.text:0040A742                 jz      loc_40A82E
.text:0040A748                 inc     ebx
.text:0040A749                 movzx   eax, byte ptr [ebx]
.text:0040A74C                 test    al, al
.text:0040A74E                 jnz     short loc_40A730
.text:0040A750
.text:0040A750 loc_40A750:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040A750                                         ; ___addmntentstr+1A0↓j ...
.text:0040A750                 mov     edx, [esp+4Ch+Str]
.text:0040A754                 mov     ebx, edx
.text:0040A756                 movzx   eax, byte ptr [edx]
.text:0040A759                 test    al, al
.text:0040A75B                 jz      short loc_40A774
.text:0040A75D                 lea     esi, [esi+0]
.text:0040A760
.text:0040A760 loc_40A760:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040A760                 cmp     al, 20h ; ' '
.text:0040A762                 jz      short loc_40A7BC
.text:0040A764                 cmp     al, 9
.text:0040A766                 jz      short loc_40A7BC
.text:0040A768                 cmp     al, 5Ch ; '\'
.text:0040A76A                 jz      short loc_40A7BC
.text:0040A76C                 inc     ebx
.text:0040A76D                 movzx   eax, byte ptr [ebx]
.text:0040A770                 test    al, al
.text:0040A772                 jnz     short loc_40A760
.text:0040A774
.text:0040A774 loc_40A774:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040A774                                         ; ___addmntentstr+12E↓j ...
.text:0040A774                 mov     [esp+4Ch+var_38], edx
.text:0040A778                 mov     ebx, [esp+4Ch+var_18]
.text:0040A77C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040A780                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040A788                 mov     edx, [esp+4Ch+var_2C]
.text:0040A78C                 mov     [esp+4Ch+var_30], ebx
.text:0040A790                 mov     ebx, [esp+4Ch+var_24]
.text:0040A794                 mov     [esp+4Ch+var_34], ecx
.text:0040A798                 mov     ecx, [esp+4Ch+var_28]
.text:0040A79C                 mov     [esp+4Ch+var_3C], ebx
.text:0040A7A0                 mov     ebx, [esp+4Ch+arg_0]
.text:0040A7A4                 mov     [esp+4Ch+var_40], ecx
.text:0040A7A8                 mov     [esp+4Ch+var_44], edx
.text:0040A7AC                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040A7AF                 call    sprintf
.text:0040A7B4                 add     esp, 48h
.text:0040A7B7                 shr     eax, 1Fh
.text:0040A7BA                 pop     ebx
.text:0040A7BB                 retn
.text:0040A7BC ; ---------------------------------------------------------------------------
.text:0040A7BC
.text:0040A7BC loc_40A7BC:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040A7BC                                         ; ___addmntentstr+D6↑j ...
.text:0040A7BC                 test    al, al
.text:0040A7BE                 jz      short loc_40A774
.text:0040A7C0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A7C3                 mov     ebx, edx
.text:0040A7C5                 call    strlen
.text:0040A7CA                 lea     edx, ds:1[eax*4]
.text:0040A7D1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A7D4                 call    malloc
.text:0040A7D9                 mov     [esp+4Ch+Str], eax
.text:0040A7DD                 mov     edx, eax
.text:0040A7DF                 nop
.text:0040A7E0
.text:0040A7E0 loc_40A7E0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040A7E0                 movzx   eax, byte ptr [ebx]
.text:0040A7E3                 cmp     al, 20h ; ' '
.text:0040A7E5                 jz      short loc_40A81D
.text:0040A7E7                 cmp     al, 9
.text:0040A7E9                 jz      short loc_40A80C
.text:0040A7EB                 cmp     al, 5Ch ; '\'
.text:0040A7ED                 jz      short loc_40A803
.text:0040A7EF                 mov     [edx], al
.text:0040A7F1
.text:0040A7F1 loc_40A7F1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040A7F1                                         ; ___addmntentstr+18B↓j ...
.text:0040A7F1                 movzx   ecx, byte ptr [ebx]
.text:0040A7F4                 inc     edx
.text:0040A7F5                 inc     ebx
.text:0040A7F6                 test    cl, cl
.text:0040A7F8                 jnz     short loc_40A7E0
.text:0040A7FA                 mov     edx, [esp+4Ch+Str]
.text:0040A7FE                 jmp     loc_40A774
.text:0040A803 ; ---------------------------------------------------------------------------
.text:0040A803
.text:0040A803 loc_40A803:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040A803                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A806                 inc     edx
.text:0040A807                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A80A                 jmp     short loc_40A7F1
.text:0040A80C ; ---------------------------------------------------------------------------
.text:0040A80C
.text:0040A80C loc_40A80C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040A80C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A80F                 inc     edx
.text:0040A810                 mov     byte ptr [edx], 30h ; '0'
.text:0040A813                 inc     edx
.text:0040A814                 mov     byte ptr [edx], 31h ; '1'
.text:0040A817                 inc     edx
.text:0040A818                 mov     byte ptr [edx], 32h ; '2'
.text:0040A81B                 jmp     short loc_40A7F1
.text:0040A81D ; ---------------------------------------------------------------------------
.text:0040A81D
.text:0040A81D loc_40A81D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040A81D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A820                 inc     edx
.text:0040A821                 mov     byte ptr [edx], 30h ; '0'
.text:0040A824                 inc     edx
.text:0040A825                 mov     byte ptr [edx], 34h ; '4'
.text:0040A828                 inc     edx
.text:0040A829                 mov     byte ptr [edx], 30h ; '0'
.text:0040A82C                 jmp     short loc_40A7F1
.text:0040A82E ; ---------------------------------------------------------------------------
.text:0040A82E
.text:0040A82E loc_40A82E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040A82E                                         ; ___addmntentstr+AA↑j ...
.text:0040A82E                 test    al, al
.text:0040A830                 jz      loc_40A750
.text:0040A836                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A839                 mov     ebx, edx
.text:0040A83B                 call    strlen
.text:0040A840                 lea     edx, ds:1[eax*4]
.text:0040A847                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A84A                 call    malloc
.text:0040A84F                 mov     [esp+4Ch+var_24], eax
.text:0040A853                 mov     edx, eax
.text:0040A855                 lea     esi, [esi+0]
.text:0040A859                 lea     edi, [edi+0]
.text:0040A860
.text:0040A860 loc_40A860:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040A860                 movzx   eax, byte ptr [ebx]
.text:0040A863                 cmp     al, 20h ; ' '
.text:0040A865                 jz      short loc_40A899
.text:0040A867                 cmp     al, 9
.text:0040A869                 jz      short loc_40A888
.text:0040A86B                 cmp     al, 5Ch ; '\'
.text:0040A86D                 jz      short loc_40A87F
.text:0040A86F                 mov     [edx], al
.text:0040A871
.text:0040A871 loc_40A871:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040A871                                         ; ___addmntentstr+207↓j ...
.text:0040A871                 movzx   ecx, byte ptr [ebx]
.text:0040A874                 inc     edx
.text:0040A875                 inc     ebx
.text:0040A876                 test    cl, cl
.text:0040A878                 jnz     short loc_40A860
.text:0040A87A                 jmp     loc_40A750
.text:0040A87F ; ---------------------------------------------------------------------------
.text:0040A87F
.text:0040A87F loc_40A87F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040A87F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A882                 inc     edx
.text:0040A883                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A886                 jmp     short loc_40A871
.text:0040A888 ; ---------------------------------------------------------------------------
.text:0040A888
.text:0040A888 loc_40A888:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040A888                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A88B                 inc     edx
.text:0040A88C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A88F                 inc     edx
.text:0040A890                 mov     byte ptr [edx], 31h ; '1'
.text:0040A893                 inc     edx
.text:0040A894                 mov     byte ptr [edx], 32h ; '2'
.text:0040A897                 jmp     short loc_40A871
.text:0040A899 ; ---------------------------------------------------------------------------
.text:0040A899
.text:0040A899 loc_40A899:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040A899                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A89C                 inc     edx
.text:0040A89D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A8A0                 inc     edx
.text:0040A8A1                 mov     byte ptr [edx], 34h ; '4'
.text:0040A8A4                 inc     edx
.text:0040A8A5                 mov     byte ptr [edx], 30h ; '0'
.text:0040A8A8                 jmp     short loc_40A871
.text:0040A8AA ; ---------------------------------------------------------------------------
.text:0040A8AA
.text:0040A8AA loc_40A8AA:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040A8AA                                         ; ___addmntentstr+7A↑j ...
.text:0040A8AA                 test    al, al
.text:0040A8AC                 jz      loc_40A720
.text:0040A8B2                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A8B5                 mov     ebx, edx
.text:0040A8B7                 call    strlen
.text:0040A8BC                 lea     edx, ds:1[eax*4]
.text:0040A8C3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A8C6                 call    malloc
.text:0040A8CB                 mov     [esp+4Ch+var_28], eax
.text:0040A8CF                 mov     edx, eax
.text:0040A8D1                 jmp     short loc_40A8E0
.text:0040A8D1 ; ---------------------------------------------------------------------------
.text:0040A8D3                 align 10h
.text:0040A8E0
.text:0040A8E0 loc_40A8E0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040A8E0                                         ; ___addmntentstr+268↓j
.text:0040A8E0                 movzx   eax, byte ptr [ebx]
.text:0040A8E3                 cmp     al, 20h ; ' '
.text:0040A8E5                 jz      short loc_40A919
.text:0040A8E7                 cmp     al, 9
.text:0040A8E9                 jz      short loc_40A908
.text:0040A8EB                 cmp     al, 5Ch ; '\'
.text:0040A8ED                 jz      short loc_40A8FF
.text:0040A8EF                 mov     [edx], al
.text:0040A8F1
.text:0040A8F1 loc_40A8F1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040A8F1                                         ; ___addmntentstr+287↓j ...
.text:0040A8F1                 movzx   ecx, byte ptr [ebx]
.text:0040A8F4                 inc     edx
.text:0040A8F5                 inc     ebx
.text:0040A8F6                 test    cl, cl
.text:0040A8F8                 jnz     short loc_40A8E0
.text:0040A8FA                 jmp     loc_40A720
.text:0040A8FF ; ---------------------------------------------------------------------------
.text:0040A8FF
.text:0040A8FF loc_40A8FF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040A8FF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A902                 inc     edx
.text:0040A903                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A906                 jmp     short loc_40A8F1
.text:0040A908 ; ---------------------------------------------------------------------------
.text:0040A908
.text:0040A908 loc_40A908:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040A908                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A90B                 inc     edx
.text:0040A90C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A90F                 inc     edx
.text:0040A910                 mov     byte ptr [edx], 31h ; '1'
.text:0040A913                 inc     edx
.text:0040A914                 mov     byte ptr [edx], 32h ; '2'
.text:0040A917                 jmp     short loc_40A8F1
.text:0040A919 ; ---------------------------------------------------------------------------
.text:0040A919
.text:0040A919 loc_40A919:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040A919                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A91C                 inc     edx
.text:0040A91D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A920                 inc     edx
.text:0040A921                 mov     byte ptr [edx], 34h ; '4'
.text:0040A924                 inc     edx
.text:0040A925                 mov     byte ptr [edx], 30h ; '0'
.text:0040A928                 jmp     short loc_40A8F1
.text:0040A928 ; ---------------------------------------------------------------------------
.text:0040A92A                 align 10h
.text:0040A930
.text:0040A930 loc_40A930:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040A930                                         ; ___addmntentstr+4A↑j ...
.text:0040A930                 test    al, al
.text:0040A932                 jz      loc_40A6F0
.text:0040A938                 mov     ebx, [esp+4Ch+var_2C]
.text:0040A93C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040A93F                 call    strlen
.text:0040A944                 lea     edx, ds:1[eax*4]
.text:0040A94B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A94E                 call    malloc
.text:0040A953                 mov     [esp+4Ch+var_2C], eax
.text:0040A957                 mov     edx, eax
.text:0040A959                 lea     esi, [esi+0]
.text:0040A960
.text:0040A960 loc_40A960:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040A960                 movzx   eax, byte ptr [ebx]
.text:0040A963                 cmp     al, 20h ; ' '
.text:0040A965                 jz      short loc_40A9A0
.text:0040A967                 cmp     al, 9
.text:0040A969                 jz      short loc_40A988
.text:0040A96B                 cmp     al, 5Ch ; '\'
.text:0040A96D                 jz      short loc_40A97F
.text:0040A96F                 mov     [edx], al
.text:0040A971
.text:0040A971 loc_40A971:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040A971                                         ; ___addmntentstr+307↓j ...
.text:0040A971                 movzx   ecx, byte ptr [ebx]
.text:0040A974                 inc     edx
.text:0040A975                 inc     ebx
.text:0040A976                 test    cl, cl
.text:0040A978                 jnz     short loc_40A960
.text:0040A97A                 jmp     loc_40A6F0
.text:0040A97F ; ---------------------------------------------------------------------------
.text:0040A97F
.text:0040A97F loc_40A97F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040A97F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A982                 inc     edx
.text:0040A983                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A986                 jmp     short loc_40A971
.text:0040A988 ; ---------------------------------------------------------------------------
.text:0040A988
.text:0040A988 loc_40A988:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040A988                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A98B                 inc     edx
.text:0040A98C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A98F                 inc     edx
.text:0040A990                 mov     byte ptr [edx], 31h ; '1'
.text:0040A993                 inc     edx
.text:0040A994                 mov     byte ptr [edx], 32h ; '2'
.text:0040A997                 jmp     short loc_40A971
.text:0040A997 ; ---------------------------------------------------------------------------
.text:0040A999                 align 10h
.text:0040A9A0
.text:0040A9A0 loc_40A9A0:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040A9A0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A9A3                 inc     edx
.text:0040A9A4                 mov     byte ptr [edx], 30h ; '0'
.text:0040A9A7                 inc     edx
.text:0040A9A8                 mov     byte ptr [edx], 34h ; '4'
.text:0040A9AB                 inc     edx
.text:0040A9AC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A9AF                 jmp     short loc_40A971
.text:0040A9B1 ; ---------------------------------------------------------------------------
.text:0040A9B1
.text:0040A9B1 loc_40A9B1:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040A9B1                 movzx   eax, byte ptr [ecx]
.text:0040A9B4                 jmp     loc_40A930
.text:0040A9B4 ___addmntentstr endp
.text:0040A9B4
.text:0040A9B4 ; ---------------------------------------------------------------------------
.text:0040A9B9                 align 10h
.text:0040A9C0
.text:0040A9C0 ; =============== S U B R O U T I N E =======================================
.text:0040A9C0
.text:0040A9C0
.text:0040A9C0 sub_40A9C0      proc near               ; CODE XREF: sub_40D070+99↓p
.text:0040A9C0
.text:0040A9C0 nBufferLength   = dword ptr -1Ch
.text:0040A9C0 lpBuffer        = dword ptr -18h
.text:0040A9C0 dwBytes         = dword ptr -14h
.text:0040A9C0 var_8           = dword ptr -8
.text:0040A9C0 var_4           = dword ptr -4
.text:0040A9C0
.text:0040A9C0                 sub     esp, 1Ch
.text:0040A9C3                 mov     [esp+1Ch+var_8], ebx
.text:0040A9C7                 mov     [esp+1Ch+var_4], esi
.text:0040A9CB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040A9D3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040A9DA                 call    GetLogicalDriveStringsA
.text:0040A9DF                 sub     esp, 8
.text:0040A9E2                 mov     ebx, eax
.text:0040A9E4                 call    GetProcessHeap
.text:0040A9E9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040A9EC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040A9F0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040A9F8                 call    HeapAlloc
.text:0040A9FD                 sub     esp, 0Ch
.text:0040AA00                 mov     esi, eax
.text:0040AA02                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040AA05                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040AA09                 call    GetLogicalDriveStringsA
.text:0040AA0E                 sub     esp, 8
.text:0040AA11                 mov     eax, esi
.text:0040AA13                 mov     ebx, [esp+1Ch+var_8]
.text:0040AA17                 mov     esi, [esp+1Ch+var_4]
.text:0040AA1B                 add     esp, 1Ch
.text:0040AA1E                 retn
.text:0040AA1E sub_40A9C0      endp
.text:0040AA1E
.text:0040AA1E ; ---------------------------------------------------------------------------
.text:0040AA1F ; const char aW[2]
.text:0040AA1F aW              db 'w',0                ; DATA XREF: sub_40AA30:loc_40AAAD↓o
.text:0040AA21 ; ---------------------------------------------------------------------------
.text:0040AA21                 jmp     short sub_40AA30
.text:0040AA21 ; ---------------------------------------------------------------------------
.text:0040AA23                 align 10h
.text:0040AA30
.text:0040AA30 ; =============== S U B R O U T I N E =======================================
.text:0040AA30
.text:0040AA30
.text:0040AA30 ; int __cdecl sub_40AA30(char *, char *)
.text:0040AA30 sub_40AA30      proc near               ; CODE XREF: sub_404A80+1E↑p
.text:0040AA30                                         ; .text:0040AA21↑j
.text:0040AA30
.text:0040AA30 FileName        = dword ptr -1Ch
.text:0040AA30 Mode            = dword ptr -18h
.text:0040AA30 dwBytes         = dword ptr -14h
.text:0040AA30 arg_0           = dword ptr  4
.text:0040AA30 arg_4           = dword ptr  8
.text:0040AA30
.text:0040AA30                 push    edi
.text:0040AA31                 push    esi
.text:0040AA32                 push    ebx
.text:0040AA33                 sub     esp, 10h
.text:0040AA36                 mov     ebx, [esp+1Ch+arg_0]
.text:0040AA3A                 mov     edx, [esp+1Ch+arg_4]
.text:0040AA3E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040AA41                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040AA45                 call    fopen
.text:0040AA4A                 test    eax, eax
.text:0040AA4C                 mov     edi, eax
.text:0040AA4E                 jz      short loc_40AAAD
.text:0040AA50
.text:0040AA50 loc_40AA50:                             ; CODE XREF: sub_40AA30+91↓j
.text:0040AA50                                         ; sub_40AA30+9A↓j
.text:0040AA50                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040AA58                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040AA5F                 call    GetLogicalDriveStringsA
.text:0040AA64                 sub     esp, 8
.text:0040AA67                 mov     esi, eax
.text:0040AA69                 call    GetProcessHeap
.text:0040AA6E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040AA71                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040AA75                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040AA7D                 call    HeapAlloc
.text:0040AA82                 sub     esp, 0Ch
.text:0040AA85                 mov     ebx, eax
.text:0040AA87                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040AA8A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040AA8E                 call    GetLogicalDriveStringsA
.text:0040AA93                 mov     lpMem, ebx
.text:0040AA99                 sub     esp, 8
.text:0040AA9C                 xor     eax, eax
.text:0040AA9E                 test    ebx, ebx
.text:0040AAA0                 setz    al
.text:0040AAA3                 add     esp, 10h
.text:0040AAA6                 pop     ebx
.text:0040AAA7                 dec     eax
.text:0040AAA8                 and     eax, edi
.text:0040AAAA                 pop     esi
.text:0040AAAB                 pop     edi
.text:0040AAAC                 retn
.text:0040AAAD ; ---------------------------------------------------------------------------
.text:0040AAAD
.text:0040AAAD loc_40AAAD:                             ; CODE XREF: sub_40AA30+1E↑j
.text:0040AAAD                 mov     [esp+1Ch+Mode], offset aW ; "w"
.text:0040AAB5                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040AAB8                 call    fopen
.text:0040AABD                 test    eax, eax
.text:0040AABF                 mov     edi, eax
.text:0040AAC1                 jnz     short loc_40AA50
.text:0040AAC3                 call    sub_40C380
.text:0040AAC8                 mov     edi, eax
.text:0040AACA                 jmp     short loc_40AA50
.text:0040AACA sub_40AA30      endp
.text:0040AACA
.text:0040AACA ; ---------------------------------------------------------------------------
.text:0040AACC                 align 10h
.text:0040AAD0
.text:0040AAD0 ; =============== S U B R O U T I N E =======================================
.text:0040AAD0
.text:0040AAD0
.text:0040AAD0 ; int __cdecl sub_40AAD0(FILE *)
.text:0040AAD0 sub_40AAD0      proc near               ; CODE XREF: sub_404A80+1B0↑p
.text:0040AAD0
.text:0040AAD0 Stream          = dword ptr -0Ch
.text:0040AAD0 dwFlags         = dword ptr -8
.text:0040AAD0 lpMem           = dword ptr -4
.text:0040AAD0 arg_0           = dword ptr  4
.text:0040AAD0
.text:0040AAD0                 sub     esp, 0Ch
.text:0040AAD3                 mov     eax, [esp+0Ch+arg_0]
.text:0040AAD7                 test    eax, eax
.text:0040AAD9                 jz      short loc_40AAE3
.text:0040AADB                 mov     [esp+0Ch+Stream], eax ; Stream
.text:0040AADE                 call    fclose
.text:0040AAE3
.text:0040AAE3 loc_40AAE3:                             ; CODE XREF: sub_40AAD0+9↑j
.text:0040AAE3                 call    GetProcessHeap
.text:0040AAE8                 mov     [esp+0Ch+Stream], eax ; hHeap
.text:0040AAEB                 mov     ecx, lpMem
.text:0040AAF1                 mov     [esp+0Ch+dwFlags], 0 ; dwFlags
.text:0040AAF9                 mov     [esp+0Ch+lpMem], ecx ; lpMem
.text:0040AAFD                 call    HeapFree
.text:0040AB02                 mov     edx, Str2
.text:0040AB08                 sub     esp, 0Ch
.text:0040AB0B                 mov     eax, 1
.text:0040AB10                 mov     lpMem, edx
.text:0040AB16                 add     esp, 0Ch
.text:0040AB19                 retn
.text:0040AB19 sub_40AAD0      endp
.text:0040AB19
.text:0040AB19 ; ---------------------------------------------------------------------------
.text:0040AB1A                 align 10h
.text:0040AB20                 push    edi
.text:0040AB21                 push    esi
.text:0040AB22                 push    ebx
.text:0040AB23                 sub     esp, 10h
.text:0040AB26                 mov     edi, [esp+24h]
.text:0040AB2A                 mov     [esp], edi
.text:0040AB2D                 call    strlen
.text:0040AB32                 mov     edx, [esp+20h]
.text:0040AB36                 mov     esi, eax
.text:0040AB38                 mov     ebx, [edx+0Ch]
.text:0040AB3B                 nop
.text:0040AB3C                 lea     esi, [esi+0]
.text:0040AB40
.text:0040AB40 loc_40AB40:                             ; CODE XREF: .text:0040AB71↓j
.text:0040AB40                 mov     [esp+4], edi
.text:0040AB44                 mov     [esp], ebx
.text:0040AB47                 call    strstr
.text:0040AB4C                 test    eax, eax
.text:0040AB4E                 jz      short loc_40AB73
.text:0040AB50                 cmp     eax, ebx
.text:0040AB52                 jz      short loc_40AB75
.text:0040AB54                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040AB58                 jz      short loc_40AB80
.text:0040AB5A
.text:0040AB5A loc_40AB5A:                             ; CODE XREF: .text:0040AB90↓j
.text:0040AB5A                 mov     [esp], ebx
.text:0040AB5D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040AB65                 call    strchr
.text:0040AB6A                 test    eax, eax
.text:0040AB6C                 mov     ebx, eax
.text:0040AB6E                 jz      short loc_40AB73
.text:0040AB70                 inc     ebx
.text:0040AB71                 jmp     short loc_40AB40
.text:0040AB73 ; ---------------------------------------------------------------------------
.text:0040AB73
.text:0040AB73 loc_40AB73:                             ; CODE XREF: .text:0040AB4E↑j
.text:0040AB73                                         ; .text:0040AB6E↑j
.text:0040AB73                 xor     eax, eax
.text:0040AB75
.text:0040AB75 loc_40AB75:                             ; CODE XREF: .text:0040AB52↑j
.text:0040AB75                                         ; .text:0040AB86↓j ...
.text:0040AB75                 add     esp, 10h
.text:0040AB78                 pop     ebx
.text:0040AB79                 pop     esi
.text:0040AB7A                 pop     edi
.text:0040AB7B                 retn
.text:0040AB7B ; ---------------------------------------------------------------------------
.text:0040AB7C                 align 10h
.text:0040AB80
.text:0040AB80 loc_40AB80:                             ; CODE XREF: .text:0040AB58↑j
.text:0040AB80                 movzx   edx, byte ptr [esi+eax]
.text:0040AB84                 test    dl, dl
.text:0040AB86                 jz      short loc_40AB75
.text:0040AB88                 cmp     dl, 3Dh ; '='
.text:0040AB8B                 jz      short loc_40AB75
.text:0040AB8D                 cmp     dl, 2Ch ; ','
.text:0040AB90                 jnz     short loc_40AB5A
.text:0040AB92                 jmp     short loc_40AB75
.text:0040AB92 ; ---------------------------------------------------------------------------
.text:0040AB94                 align 10h
.text:0040ABA0
.text:0040ABA0 ; =============== S U B R O U T I N E =======================================
.text:0040ABA0
.text:0040ABA0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040ABA0
.text:0040ABA0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040ABA0 _win32_longpath proc near               ; CODE XREF: .text:0040B364↓p
.text:0040ABA0
.text:0040ABA0 C               = dword ptr -278h
.text:0040ABA0 lpFindFileData  = dword ptr -274h
.text:0040ABA0 Destination     = byte ptr -268h
.text:0040ABA0 var_267         = byte ptr -267h
.text:0040ABA0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040ABA0 lpFileName      = dword ptr  8
.text:0040ABA0
.text:0040ABA0                 push    ebp
.text:0040ABA1                 xor     eax, eax
.text:0040ABA3                 push    edi
.text:0040ABA4                 push    esi
.text:0040ABA5                 push    ebx
.text:0040ABA6                 sub     esp, 26Ch
.text:0040ABAC                 mov     esi, [esp+278h+lpFileName]
.text:0040ABB3                 lea     ebp, [esp+278h+Destination]
.text:0040ABB7                 test    esi, esi
.text:0040ABB9                 jz      loc_40AD17
.text:0040ABBF                 movsx   edx, byte ptr [esi]
.text:0040ABC2                 mov     [esp+278h+C], edx ; C
.text:0040ABC5                 call    isalpha
.text:0040ABCA                 test    eax, eax
.text:0040ABCC                 jz      short loc_40ABDF
.text:0040ABCE                 mov     eax, [esp+278h+lpFileName]
.text:0040ABD5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040ABD9                 jz      loc_40AF1B
.text:0040ABDF
.text:0040ABDF loc_40ABDF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040ABDF                 mov     edx, [esp+278h+lpFileName]
.text:0040ABE6                 movzx   eax, byte ptr [edx]
.text:0040ABE9                 cmp     al, 2Fh ; '/'
.text:0040ABEB                 jz      loc_40ADFB
.text:0040ABF1                 cmp     al, 5Ch ; '\'
.text:0040ABF3                 jz      loc_40ADFB
.text:0040ABF9
.text:0040ABF9 loc_40ABF9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040ABF9                                         ; _win32_longpath+2B1↓j ...
.text:0040ABF9                 mov     [ebp+268h+Destination], 0
.text:0040ABFD                 movzx   ebx, byte ptr [esi]
.text:0040AC00                 test    bl, bl
.text:0040AC02                 jz      loc_40ACF9
.text:0040AC08                 nop
.text:0040AC09                 lea     esi, [esi+0]
.text:0040AC10
.text:0040AC10 loc_40AC10:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040AC10                 cmp     bl, 2Fh ; '/'
.text:0040AC13                 jz      loc_40ADB0
.text:0040AC19                 cmp     bl, 5Ch ; '\'
.text:0040AC1C                 jz      loc_40ADB0
.text:0040AC22
.text:0040AC22 loc_40AC22:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040AC22                                         ; _win32_longpath+22C↓j ...
.text:0040AC22                 cmp     bl, 2Eh ; '.'
.text:0040AC25                 jz      loc_40AD50
.text:0040AC2B
.text:0040AC2B loc_40AC2B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040AC2B                                         ; _win32_longpath+203↓j
.text:0040AC2B                 test    bl, bl
.text:0040AC2D                 jz      loc_40ACF9
.text:0040AC33                 cmp     bl, 2Fh ; '/'
.text:0040AC36                 jz      short loc_40AC52
.text:0040AC38                 cmp     bl, 5Ch ; '\'
.text:0040AC3B                 jz      short loc_40AC52
.text:0040AC3D                 lea     esi, [esi+0]
.text:0040AC40
.text:0040AC40 loc_40AC40:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040AC40                 inc     esi
.text:0040AC41                 movzx   ebx, byte ptr [esi]
.text:0040AC44                 test    bl, bl
.text:0040AC46                 jz      short loc_40AC52
.text:0040AC48                 cmp     bl, 2Fh ; '/'
.text:0040AC4B                 jz      short loc_40AC52
.text:0040AC4D                 cmp     bl, 5Ch ; '\'
.text:0040AC50                 jnz     short loc_40AC40
.text:0040AC52
.text:0040AC52 loc_40AC52:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040AC52                                         ; _win32_longpath+9B↑j ...
.text:0040AC52                 mov     byte ptr [esi], 0
.text:0040AC55                 lea     edx, [esp+278h+FindFileData]
.text:0040AC5C                 mov     eax, [esp+278h+lpFileName]
.text:0040AC63                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040AC67                 mov     [esp+278h+C], eax ; lpFileName
.text:0040AC6A                 call    FindFirstFileA
.text:0040AC6F                 mov     [esi], bl
.text:0040AC71                 sub     esp, 8
.text:0040AC74                 mov     edi, eax
.text:0040AC76                 cmp     eax, 0FFFFFFFFh
.text:0040AC79                 jz      loc_40AD3C
.text:0040AC7F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040AC86                 mov     ecx, ebx
.text:0040AC88                 nop
.text:0040AC89                 lea     esi, [esi+0]
.text:0040AC90
.text:0040AC90 loc_40AC90:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040AC90                 mov     eax, [ebx]
.text:0040AC92                 add     ebx, 4
.text:0040AC95                 lea     edx, [eax-1010101h]
.text:0040AC9B                 not     eax
.text:0040AC9D                 and     edx, eax
.text:0040AC9F                 and     edx, 80808080h
.text:0040ACA5                 jz      short loc_40AC90
.text:0040ACA7                 test    edx, 8080h
.text:0040ACAD                 jnz     short loc_40ACB5
.text:0040ACAF                 shr     edx, 10h
.text:0040ACB2                 add     ebx, 2
.text:0040ACB5
.text:0040ACB5 loc_40ACB5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040ACB5                 add     dl, dl
.text:0040ACB7                 sbb     ebx, 3
.text:0040ACBA                 sub     ebx, ecx
.text:0040ACBC                 lea     ecx, [esp+278h+Destination]
.text:0040ACC0                 sub     ecx, ebp
.text:0040ACC2                 add     ecx, 105h
.text:0040ACC8                 cmp     ecx, ebx
.text:0040ACCA                 jle     short loc_40AD22
.text:0040ACCC                 mov     [esp+278h+C], ebp ; Destination
.text:0040ACCF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040ACD6                 add     ebp, ebx
.text:0040ACD8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040ACDC                 call    strcpy
.text:0040ACE1                 mov     [esp+278h+C], edi ; hFindFile
.text:0040ACE4                 call    FindClose
.text:0040ACE9                 sub     esp, 4
.text:0040ACEC
.text:0040ACEC loc_40ACEC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040ACEC                 movzx   ecx, byte ptr [esi]
.text:0040ACEF                 test    cl, cl
.text:0040ACF1                 mov     bl, cl
.text:0040ACF3                 jnz     loc_40AC10
.text:0040ACF9
.text:0040ACF9 loc_40ACF9:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040ACF9                                         ; _win32_longpath+8D↑j
.text:0040ACF9                 mov     esi, [esp+278h+lpFileName]
.text:0040AD00                 lea     ebp, [esp+278h+Destination]
.text:0040AD04                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040AD08                 mov     [esp+278h+C], esi ; Destination
.text:0040AD0B                 call    strcpy
.text:0040AD10                 mov     eax, [esp+278h+lpFileName]
.text:0040AD17
.text:0040AD17 loc_40AD17:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040AD17                                         ; _win32_longpath+19A↓j
.text:0040AD17                 add     esp, 26Ch
.text:0040AD1D                 pop     ebx
.text:0040AD1E                 pop     esi
.text:0040AD1F                 pop     edi
.text:0040AD20                 pop     ebp
.text:0040AD21                 retn
.text:0040AD22 ; ---------------------------------------------------------------------------
.text:0040AD22
.text:0040AD22 loc_40AD22:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040AD22                 mov     [esp+278h+C], edi ; hFindFile
.text:0040AD25                 call    FindClose
.text:0040AD2A                 sub     esp, 4
.text:0040AD2D                 call    _errno
.text:0040AD32                 mov     dword ptr [eax], 22h ; '"'
.text:0040AD38
.text:0040AD38 loc_40AD38:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040AD38                 xor     eax, eax
.text:0040AD3A                 jmp     short loc_40AD17
.text:0040AD3C ; ---------------------------------------------------------------------------
.text:0040AD3C
.text:0040AD3C loc_40AD3C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040AD3C                 call    _errno
.text:0040AD41                 mov     dword ptr [eax], 16h
.text:0040AD47                 jmp     short loc_40AD38
.text:0040AD47 ; ---------------------------------------------------------------------------
.text:0040AD49                 align 10h
.text:0040AD50
.text:0040AD50 loc_40AD50:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040AD50                 movzx   eax, byte ptr [esi+1]
.text:0040AD54                 test    al, al
.text:0040AD56                 jnz     short loc_40AD85
.text:0040AD58
.text:0040AD58 loc_40AD58:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040AD58                                         ; _win32_longpath+1EB↓j ...
.text:0040AD58                 test    bl, bl
.text:0040AD5A                 jz      short loc_40AD7C
.text:0040AD5C                 cmp     bl, 2Fh ; '/'
.text:0040AD5F                 jz      short loc_40AD7C
.text:0040AD61                 cmp     bl, 5Ch ; '\'
.text:0040AD64                 jz      short loc_40AD7C
.text:0040AD66
.text:0040AD66 loc_40AD66:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040AD66                 mov     [ebp+268h+Destination], bl
.text:0040AD69                 inc     esi
.text:0040AD6A                 inc     ebp
.text:0040AD6B                 movzx   ebx, byte ptr [esi]
.text:0040AD6E                 test    bl, bl
.text:0040AD70                 jz      short loc_40AD7C
.text:0040AD72                 cmp     bl, 2Fh ; '/'
.text:0040AD75                 jz      short loc_40AD7C
.text:0040AD77                 cmp     bl, 5Ch ; '\'
.text:0040AD7A                 jnz     short loc_40AD66
.text:0040AD7C
.text:0040AD7C loc_40AD7C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040AD7C                                         ; _win32_longpath+1BF↑j ...
.text:0040AD7C                 mov     [ebp+268h+Destination], 0
.text:0040AD80                 jmp     loc_40ACEC
.text:0040AD85 ; ---------------------------------------------------------------------------
.text:0040AD85
.text:0040AD85 loc_40AD85:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040AD85                 cmp     al, 2Fh ; '/'
.text:0040AD87                 jz      short loc_40AD58
.text:0040AD89                 cmp     al, 5Ch ; '\'
.text:0040AD8B                 jz      short loc_40AD58
.text:0040AD8D                 cmp     al, 2Eh ; '.'
.text:0040AD8F                 jnz     loc_40AC2B
.text:0040AD95                 movzx   eax, byte ptr [esi+2]
.text:0040AD99                 test    al, al
.text:0040AD9B                 jz      short loc_40AD58
.text:0040AD9D                 cmp     al, 2Fh ; '/'
.text:0040AD9F                 jz      short loc_40AD58
.text:0040ADA1                 cmp     al, 5Ch ; '\'
.text:0040ADA3                 jnz     loc_40AC2B
.text:0040ADA9                 jmp     short loc_40AD58
.text:0040ADA9 ; ---------------------------------------------------------------------------
.text:0040ADAB                 align 10h
.text:0040ADB0
.text:0040ADB0 loc_40ADB0:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040ADB0                                         ; _win32_longpath+7C↑j
.text:0040ADB0                 mov     [ebp+268h+Destination], bl
.text:0040ADB3                 inc     esi
.text:0040ADB4                 inc     ebp
.text:0040ADB5                 mov     [ebp+268h+Destination], 0
.text:0040ADB9                 movzx   ebx, byte ptr [esi]
.text:0040ADBC                 test    bl, bl
.text:0040ADBE                 jz      loc_40AC22
.text:0040ADC4                 cmp     bl, 2Fh ; '/'
.text:0040ADC7                 jz      short loc_40ADE0
.text:0040ADC9                 cmp     bl, 5Ch ; '\'
.text:0040ADCC                 jnz     loc_40AC22
.text:0040ADD2                 lea     esi, [esi+0]
.text:0040ADD9                 lea     edi, [edi+0]
.text:0040ADE0
.text:0040ADE0 loc_40ADE0:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040ADE0                                         ; _win32_longpath+24F↓j ...
.text:0040ADE0                 inc     esi
.text:0040ADE1                 movzx   ebx, byte ptr [esi]
.text:0040ADE4                 test    bl, bl
.text:0040ADE6                 jz      loc_40AC22
.text:0040ADEC                 cmp     bl, 2Fh ; '/'
.text:0040ADEF                 jz      short loc_40ADE0
.text:0040ADF1                 cmp     bl, 5Ch ; '\'
.text:0040ADF4                 jz      short loc_40ADE0
.text:0040ADF6                 jmp     loc_40AC22
.text:0040ADFB ; ---------------------------------------------------------------------------
.text:0040ADFB
.text:0040ADFB loc_40ADFB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040ADFB                                         ; _win32_longpath+53↑j
.text:0040ADFB                 mov     edi, [esp+278h+lpFileName]
.text:0040AE02                 movzx   edx, byte ptr [edi+1]
.text:0040AE06                 cmp     dl, 2Fh ; '/'
.text:0040AE09                 jz      short loc_40AE14
.text:0040AE0B                 cmp     dl, 5Ch ; '\'
.text:0040AE0E                 jnz     loc_40ABF9
.text:0040AE14
.text:0040AE14 loc_40AE14:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040AE14                 mov     esi, [esp+278h+lpFileName]
.text:0040AE1B                 mov     [ebp+268h+Destination], al
.text:0040AE1E                 mov     ecx, [esp+278h+lpFileName]
.text:0040AE25                 inc     ebp
.text:0040AE26                 add     esi, 2
.text:0040AE29                 movzx   ebx, byte ptr [ecx+1]
.text:0040AE2D                 mov     [ebp+268h+Destination], bl
.text:0040AE30                 inc     ebp
.text:0040AE31                 movzx   eax, byte ptr [ecx+2]
.text:0040AE35                 test    al, al
.text:0040AE37                 jz      loc_40AF13
.text:0040AE3D                 cmp     al, 2Fh ; '/'
.text:0040AE3F                 jz      loc_40AEF8
.text:0040AE45                 cmp     al, 5Ch ; '\'
.text:0040AE47                 mov     bl, al
.text:0040AE49                 jz      loc_40AEF8
.text:0040AE4F
.text:0040AE4F loc_40AE4F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040AE4F                                         ; _win32_longpath+376↓j
.text:0040AE4F                 test    bl, bl
.text:0040AE51                 jz      loc_40ABF9
.text:0040AE57                 cmp     bl, 2Fh ; '/'
.text:0040AE5A                 jz      short loc_40AE7B
.text:0040AE5C                 cmp     bl, 5Ch ; '\'
.text:0040AE5F                 jz      short loc_40AE7B
.text:0040AE61
.text:0040AE61 loc_40AE61:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040AE61                 mov     [ebp+268h+Destination], bl
.text:0040AE64                 inc     esi
.text:0040AE65                 inc     ebp
.text:0040AE66                 movzx   ebx, byte ptr [esi]
.text:0040AE69                 test    bl, bl
.text:0040AE6B                 jz      loc_40ABF9
.text:0040AE71                 cmp     bl, 2Fh ; '/'
.text:0040AE74                 jz      short loc_40AE7B
.text:0040AE76                 cmp     bl, 5Ch ; '\'
.text:0040AE79                 jnz     short loc_40AE61
.text:0040AE7B
.text:0040AE7B loc_40AE7B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040AE7B                                         ; _win32_longpath+2BF↑j ...
.text:0040AE7B                 test    bl, bl
.text:0040AE7D                 jz      loc_40ABF9
.text:0040AE83                 mov     [ebp+268h+Destination], bl
.text:0040AE86                 inc     esi
.text:0040AE87                 inc     ebp
.text:0040AE88                 movzx   ebx, byte ptr [esi]
.text:0040AE8B                 test    bl, bl
.text:0040AE8D                 jz      loc_40ABF9
.text:0040AE93                 cmp     bl, 2Fh ; '/'
.text:0040AE96                 jz      short loc_40AEE0
.text:0040AE98                 cmp     bl, 5Ch ; '\'
.text:0040AE9B                 jz      short loc_40AEE0
.text:0040AE9D
.text:0040AE9D loc_40AE9D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040AE9D                 test    bl, bl
.text:0040AE9F                 jz      loc_40ABF9
.text:0040AEA5                 cmp     bl, 2Fh ; '/'
.text:0040AEA8                 jz      loc_40ABF9
.text:0040AEAE                 cmp     bl, 5Ch ; '\'
.text:0040AEB1                 jz      loc_40ABF9
.text:0040AEB7
.text:0040AEB7 loc_40AEB7:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040AEB7                 mov     [ebp+268h+Destination], bl
.text:0040AEBA                 inc     esi
.text:0040AEBB                 inc     ebp
.text:0040AEBC                 movzx   ebx, byte ptr [esi]
.text:0040AEBF                 test    bl, bl
.text:0040AEC1                 jz      loc_40ABF9
.text:0040AEC7                 cmp     bl, 2Fh ; '/'
.text:0040AECA                 jz      loc_40ABF9
.text:0040AED0                 cmp     bl, 5Ch ; '\'
.text:0040AED3                 jnz     short loc_40AEB7
.text:0040AED5                 jmp     loc_40ABF9
.text:0040AED5 ; ---------------------------------------------------------------------------
.text:0040AEDA                 align 10h
.text:0040AEE0
.text:0040AEE0 loc_40AEE0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040AEE0                                         ; _win32_longpath+2FB↑j ...
.text:0040AEE0                 inc     esi
.text:0040AEE1                 movzx   ebx, byte ptr [esi]
.text:0040AEE4                 test    bl, bl
.text:0040AEE6                 jz      loc_40ABF9
.text:0040AEEC                 cmp     bl, 2Fh ; '/'
.text:0040AEEF                 jz      short loc_40AEE0
.text:0040AEF1                 cmp     bl, 5Ch ; '\'
.text:0040AEF4                 jz      short loc_40AEE0
.text:0040AEF6                 jmp     short loc_40AE9D
.text:0040AEF8 ; ---------------------------------------------------------------------------
.text:0040AEF8
.text:0040AEF8 loc_40AEF8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040AEF8                                         ; _win32_longpath+2A9↑j ...
.text:0040AEF8                 inc     esi
.text:0040AEF9                 movzx   ebx, byte ptr [esi]
.text:0040AEFC                 test    bl, bl
.text:0040AEFE                 jz      loc_40ABF9
.text:0040AF04                 cmp     bl, 2Fh ; '/'
.text:0040AF07                 jz      short loc_40AEF8
.text:0040AF09                 cmp     bl, 5Ch ; '\'
.text:0040AF0C                 jz      short loc_40AEF8
.text:0040AF0E                 jmp     loc_40AE4F
.text:0040AF13 ; ---------------------------------------------------------------------------
.text:0040AF13
.text:0040AF13 loc_40AF13:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040AF13                 movzx   ebx, byte ptr [esi]
.text:0040AF16                 jmp     loc_40AE4F
.text:0040AF1B ; ---------------------------------------------------------------------------
.text:0040AF1B
.text:0040AF1B loc_40AF1B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040AF1B                 movzx   ecx, byte ptr [eax]
.text:0040AF1E                 mov     esi, eax
.text:0040AF20                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040AF25                 add     esi, 2
.text:0040AF28                 lea     ebp, [esp+12h]
.text:0040AF2C                 mov     [esp+278h+Destination], cl
.text:0040AF30                 jmp     loc_40ABF9
.text:0040AF30 _win32_longpath endp
.text:0040AF30
.text:0040AF30 ; ---------------------------------------------------------------------------
.text:0040AF35                 align 10h
.text:0040AF40                 sub     esp, 0Ch
.text:0040AF43                 mov     edx, [esp+10h]
.text:0040AF47                 mov     dword ptr [esp+4], 0
.text:0040AF4F                 mov     [esp], edx
.text:0040AF52                 call    sub_40BEF0
.text:0040AF57                 inc     eax
.text:0040AF58                 setnz   dl
.text:0040AF5B                 add     esp, 0Ch
.text:0040AF5E                 movzx   eax, dl
.text:0040AF61                 retn
.text:0040AF61 ; ---------------------------------------------------------------------------
.text:0040AF62                 align 10h
.text:0040AF70
.text:0040AF70 ; =============== S U B R O U T I N E =======================================
.text:0040AF70
.text:0040AF70
.text:0040AF70 sub_40AF70      proc near               ; CODE XREF: sub_409D60+AA↑p
.text:0040AF70                                         ; sub_40D510+B4↓p
.text:0040AF70
.text:0040AF70 arg_0           = dword ptr  4
.text:0040AF70
.text:0040AF70                 mov     ecx, [esp+arg_0]
.text:0040AF74                 mov     edx, ecx
.text:0040AF76                 movzx   eax, byte ptr [ecx]
.text:0040AF79                 test    al, al
.text:0040AF7B                 jz      short loc_40AF8C
.text:0040AF7D                 lea     esi, [esi+0]
.text:0040AF80
.text:0040AF80 loc_40AF80:                             ; CODE XREF: sub_40AF70+1A↓j
.text:0040AF80                 cmp     al, 5Ch ; '\'
.text:0040AF82                 jz      short loc_40AF90
.text:0040AF84
.text:0040AF84 loc_40AF84:                             ; CODE XREF: sub_40AF70+23↓j
.text:0040AF84                 inc     edx
.text:0040AF85                 movzx   eax, byte ptr [edx]
.text:0040AF88                 test    al, al
.text:0040AF8A                 jnz     short loc_40AF80
.text:0040AF8C
.text:0040AF8C loc_40AF8C:                             ; CODE XREF: sub_40AF70+B↑j
.text:0040AF8C                 mov     eax, ecx
.text:0040AF8E                 retn
.text:0040AF8E ; ---------------------------------------------------------------------------
.text:0040AF8F                 align 10h
.text:0040AF90
.text:0040AF90 loc_40AF90:                             ; CODE XREF: sub_40AF70+12↑j
.text:0040AF90                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040AF93                 jmp     short loc_40AF84
.text:0040AF93 sub_40AF70      endp
.text:0040AF93
.text:0040AF93 ; ---------------------------------------------------------------------------
.text:0040AF95                 align 10h
.text:0040AFA0                 push    ebx
.text:0040AFA1                 sub     esp, 8
.text:0040AFA4                 mov     ebx, [esp+14h]
.text:0040AFA8                 mov     edx, [esp+10h]
.text:0040AFAC                 mov     [esp], ebx
.text:0040AFAF                 mov     [esp+4], edx
.text:0040AFB3                 call    strcpy
.text:0040AFB8                 movzx   eax, byte ptr [ebx]
.text:0040AFBB                 mov     edx, ebx
.text:0040AFBD                 test    al, al
.text:0040AFBF                 jz      short loc_40AFDC
.text:0040AFC1                 jmp     short loc_40AFD0
.text:0040AFC1 ; ---------------------------------------------------------------------------
.text:0040AFC3                 align 10h
.text:0040AFD0
.text:0040AFD0 loc_40AFD0:                             ; CODE XREF: .text:0040AFC1↑j
.text:0040AFD0                                         ; .text:0040AFDA↓j
.text:0040AFD0                 cmp     al, 5Ch ; '\'
.text:0040AFD2                 jz      short loc_40AFE3
.text:0040AFD4
.text:0040AFD4 loc_40AFD4:                             ; CODE XREF: .text:0040AFE6↓j
.text:0040AFD4                 inc     edx
.text:0040AFD5                 movzx   eax, byte ptr [edx]
.text:0040AFD8                 test    al, al
.text:0040AFDA                 jnz     short loc_40AFD0
.text:0040AFDC
.text:0040AFDC loc_40AFDC:                             ; CODE XREF: .text:0040AFBF↑j
.text:0040AFDC                 add     esp, 8
.text:0040AFDF                 xor     eax, eax
.text:0040AFE1                 pop     ebx
.text:0040AFE2                 retn
.text:0040AFE3 ; ---------------------------------------------------------------------------
.text:0040AFE3
.text:0040AFE3 loc_40AFE3:                             ; CODE XREF: .text:0040AFD2↑j
.text:0040AFE3                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040AFE6                 jmp     short loc_40AFD4
.text:0040AFE6 ; ---------------------------------------------------------------------------
.text:0040AFE8                 align 10h
.text:0040AFF0
.text:0040AFF0 ; =============== S U B R O U T I N E =======================================
.text:0040AFF0
.text:0040AFF0
.text:0040AFF0 sub_40AFF0      proc near               ; CODE XREF: sub_40B480+4A↓p
.text:0040AFF0                                         ; sub_40EAB0+16↓p ...
.text:0040AFF0
.text:0040AFF0 arg_0           = dword ptr  4
.text:0040AFF0
.text:0040AFF0                 mov     ecx, [esp+arg_0]
.text:0040AFF4                 mov     edx, ecx
.text:0040AFF6                 movzx   eax, byte ptr [ecx]
.text:0040AFF9                 test    al, al
.text:0040AFFB                 jz      short loc_40B00C
.text:0040AFFD                 lea     esi, [esi+0]
.text:0040B000
.text:0040B000 loc_40B000:                             ; CODE XREF: sub_40AFF0+1A↓j
.text:0040B000                 cmp     al, 2Fh ; '/'
.text:0040B002                 jz      short loc_40B010
.text:0040B004
.text:0040B004 loc_40B004:                             ; CODE XREF: sub_40AFF0+23↓j
.text:0040B004                 inc     edx
.text:0040B005                 movzx   eax, byte ptr [edx]
.text:0040B008                 test    al, al
.text:0040B00A                 jnz     short loc_40B000
.text:0040B00C
.text:0040B00C loc_40B00C:                             ; CODE XREF: sub_40AFF0+B↑j
.text:0040B00C                 mov     eax, ecx
.text:0040B00E                 retn
.text:0040B00E ; ---------------------------------------------------------------------------
.text:0040B00F                 align 10h
.text:0040B010
.text:0040B010 loc_40B010:                             ; CODE XREF: sub_40AFF0+12↑j
.text:0040B010                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B013                 jmp     short loc_40B004
.text:0040B013 sub_40AFF0      endp
.text:0040B013
.text:0040B013 ; ---------------------------------------------------------------------------
.text:0040B015                 align 10h
.text:0040B020                 push    ebx
.text:0040B021                 sub     esp, 8
.text:0040B024                 mov     ebx, [esp+14h]
.text:0040B028                 mov     edx, [esp+10h]
.text:0040B02C                 mov     [esp], ebx
.text:0040B02F                 mov     [esp+4], edx
.text:0040B033                 call    strcpy
.text:0040B038                 movzx   eax, byte ptr [ebx]
.text:0040B03B                 mov     edx, ebx
.text:0040B03D                 test    al, al
.text:0040B03F                 jz      short loc_40B05C
.text:0040B041                 jmp     short loc_40B050
.text:0040B041 ; ---------------------------------------------------------------------------
.text:0040B043                 align 10h
.text:0040B050
.text:0040B050 loc_40B050:                             ; CODE XREF: .text:0040B041↑j
.text:0040B050                                         ; .text:0040B05A↓j
.text:0040B050                 cmp     al, 2Fh ; '/'
.text:0040B052                 jz      short loc_40B063
.text:0040B054
.text:0040B054 loc_40B054:                             ; CODE XREF: .text:0040B066↓j
.text:0040B054                 inc     edx
.text:0040B055                 movzx   eax, byte ptr [edx]
.text:0040B058                 test    al, al
.text:0040B05A                 jnz     short loc_40B050
.text:0040B05C
.text:0040B05C loc_40B05C:                             ; CODE XREF: .text:0040B03F↑j
.text:0040B05C                 add     esp, 8
.text:0040B05F                 xor     eax, eax
.text:0040B061                 pop     ebx
.text:0040B062                 retn
.text:0040B063 ; ---------------------------------------------------------------------------
.text:0040B063
.text:0040B063 loc_40B063:                             ; CODE XREF: .text:0040B052↑j
.text:0040B063                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B066                 jmp     short loc_40B054
.text:0040B066 ; ---------------------------------------------------------------------------
.text:0040B068                 align 10h
.text:0040B070                 push    ebx
.text:0040B071                 sub     esp, 8
.text:0040B074                 mov     ebx, [esp+14h]
.text:0040B078                 mov     edx, [esp+10h]
.text:0040B07C                 mov     [esp+4], ebx
.text:0040B080                 mov     [esp], edx
.text:0040B083                 call    sub_409D10
.text:0040B088                 movzx   eax, byte ptr [ebx]
.text:0040B08B                 mov     edx, ebx
.text:0040B08D                 test    al, al
.text:0040B08F                 jz      short loc_40B0AC
.text:0040B091                 jmp     short loc_40B0A0
.text:0040B091 ; ---------------------------------------------------------------------------
.text:0040B093                 align 10h
.text:0040B0A0
.text:0040B0A0 loc_40B0A0:                             ; CODE XREF: .text:0040B091↑j
.text:0040B0A0                                         ; .text:0040B0AA↓j
.text:0040B0A0                 cmp     al, 2Fh ; '/'
.text:0040B0A2                 jz      short loc_40B0B3
.text:0040B0A4
.text:0040B0A4 loc_40B0A4:                             ; CODE XREF: .text:0040B0B6↓j
.text:0040B0A4                 inc     edx
.text:0040B0A5                 movzx   eax, byte ptr [edx]
.text:0040B0A8                 test    al, al
.text:0040B0AA                 jnz     short loc_40B0A0
.text:0040B0AC
.text:0040B0AC loc_40B0AC:                             ; CODE XREF: .text:0040B08F↑j
.text:0040B0AC                 add     esp, 8
.text:0040B0AF                 xor     eax, eax
.text:0040B0B1                 pop     ebx
.text:0040B0B2                 retn
.text:0040B0B3 ; ---------------------------------------------------------------------------
.text:0040B0B3
.text:0040B0B3 loc_40B0B3:                             ; CODE XREF: .text:0040B0A2↑j
.text:0040B0B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B0B6                 jmp     short loc_40B0A4
.text:0040B0B6 ; ---------------------------------------------------------------------------
.text:0040B0B8                 align 10h
.text:0040B0C0                 push    ebx
.text:0040B0C1                 sub     esp, 8
.text:0040B0C4                 mov     ebx, [esp+14h]
.text:0040B0C8                 mov     edx, [esp+10h]
.text:0040B0CC                 mov     [esp], ebx
.text:0040B0CF                 mov     [esp+4], edx
.text:0040B0D3                 call    sub_409D10
.text:0040B0D8                 movzx   eax, byte ptr [ebx]
.text:0040B0DB                 mov     edx, ebx
.text:0040B0DD                 test    al, al
.text:0040B0DF                 jz      short loc_40B0FC
.text:0040B0E1                 jmp     short loc_40B0F0
.text:0040B0E1 ; ---------------------------------------------------------------------------
.text:0040B0E3                 align 10h
.text:0040B0F0
.text:0040B0F0 loc_40B0F0:                             ; CODE XREF: .text:0040B0E1↑j
.text:0040B0F0                                         ; .text:0040B0FA↓j
.text:0040B0F0                 cmp     al, 5Ch ; '\'
.text:0040B0F2                 jz      short loc_40B101
.text:0040B0F4
.text:0040B0F4 loc_40B0F4:                             ; CODE XREF: .text:0040B104↓j
.text:0040B0F4                 inc     edx
.text:0040B0F5                 movzx   eax, byte ptr [edx]
.text:0040B0F8                 test    al, al
.text:0040B0FA                 jnz     short loc_40B0F0
.text:0040B0FC
.text:0040B0FC loc_40B0FC:                             ; CODE XREF: .text:0040B0DF↑j
.text:0040B0FC                 add     esp, 8
.text:0040B0FF                 pop     ebx
.text:0040B100                 retn
.text:0040B101 ; ---------------------------------------------------------------------------
.text:0040B101
.text:0040B101 loc_40B101:                             ; CODE XREF: .text:0040B0F2↑j
.text:0040B101                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B104                 jmp     short loc_40B0F4
.text:0040B104 ; ---------------------------------------------------------------------------
.text:0040B106                 align 10h
.text:0040B110
.text:0040B110 ; =============== S U B R O U T I N E =======================================
.text:0040B110
.text:0040B110
.text:0040B110 ; int __cdecl sub_40B110(LPSTR)
.text:0040B110 sub_40B110      proc near               ; CODE XREF: .text:0040B19E↓p
.text:0040B110                                         ; .text:0040B1DE↓p ...
.text:0040B110
.text:0040B110 hModule         = dword ptr -1Ch
.text:0040B110 lpFilename      = dword ptr -18h
.text:0040B110 nSize           = dword ptr -14h
.text:0040B110 arg_0           = dword ptr  4
.text:0040B110
.text:0040B110                 push    esi
.text:0040B111                 push    ebx
.text:0040B112                 sub     esp, 14h
.text:0040B115                 mov     esi, [esp+1Ch+arg_0]
.text:0040B119                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040B121                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040B128                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040B12C                 call    GetModuleFileNameA
.text:0040B131                 sub     esp, 0Ch
.text:0040B134                 test    eax, eax
.text:0040B136                 jz      short loc_40B178
.text:0040B138                 cmp     eax, 104h
.text:0040B13D                 jg      short loc_40B169
.text:0040B13F
.text:0040B13F loc_40B13F:                             ; CODE XREF: sub_40B110+66↓j
.text:0040B13F                                         ; sub_40B110+78↓j
.text:0040B13F                 movzx   eax, byte ptr [esi]
.text:0040B142                 mov     edx, esi
.text:0040B144                 test    al, al
.text:0040B146                 jz      short loc_40B15C
.text:0040B148                 nop
.text:0040B149                 lea     esi, [esi+0]
.text:0040B150
.text:0040B150 loc_40B150:                             ; CODE XREF: sub_40B110+4A↓j
.text:0040B150                 cmp     al, 5Ch ; '\'
.text:0040B152                 jz      short loc_40B164
.text:0040B154
.text:0040B154 loc_40B154:                             ; CODE XREF: sub_40B110+57↓j
.text:0040B154                 inc     edx
.text:0040B155                 movzx   eax, byte ptr [edx]
.text:0040B158                 test    al, al
.text:0040B15A                 jnz     short loc_40B150
.text:0040B15C
.text:0040B15C loc_40B15C:                             ; CODE XREF: sub_40B110+36↑j
.text:0040B15C                 add     esp, 14h
.text:0040B15F                 mov     eax, esi
.text:0040B161                 pop     ebx
.text:0040B162                 pop     esi
.text:0040B163                 retn
.text:0040B164 ; ---------------------------------------------------------------------------
.text:0040B164
.text:0040B164 loc_40B164:                             ; CODE XREF: sub_40B110+42↑j
.text:0040B164                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B167                 jmp     short loc_40B154
.text:0040B169 ; ---------------------------------------------------------------------------
.text:0040B169
.text:0040B169 loc_40B169:                             ; CODE XREF: sub_40B110+2D↑j
.text:0040B169                 call    _errno
.text:0040B16E                 mov     dword ptr [eax], 26h ; '&'
.text:0040B174                 xor     esi, esi
.text:0040B176                 jmp     short loc_40B13F
.text:0040B178 ; ---------------------------------------------------------------------------
.text:0040B178
.text:0040B178 loc_40B178:                             ; CODE XREF: sub_40B110+26↑j
.text:0040B178                 call    sub_40C250
.text:0040B17D                 mov     ebx, eax
.text:0040B17F                 xor     esi, esi
.text:0040B181                 call    _errno
.text:0040B186                 mov     [eax], ebx
.text:0040B188                 jmp     short loc_40B13F
.text:0040B188 sub_40B110      endp
.text:0040B188
.text:0040B188 ; ---------------------------------------------------------------------------
.text:0040B18A                 align 10h
.text:0040B190                 sub     esp, 0Ch
.text:0040B193                 mov     [esp+8], ebx
.text:0040B197                 mov     ebx, [esp+10h]
.text:0040B19B                 mov     [esp], ebx
.text:0040B19E                 call    sub_40B110
.text:0040B1A3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B1AB                 mov     [esp], ebx
.text:0040B1AE                 call    strrchr
.text:0040B1B3                 test    eax, eax
.text:0040B1B5                 jz      short loc_40B1BA
.text:0040B1B7                 lea     ebx, [eax+1]
.text:0040B1BA
.text:0040B1BA loc_40B1BA:                             ; CODE XREF: .text:0040B1B5↑j
.text:0040B1BA                 mov     eax, ebx
.text:0040B1BC                 mov     ebx, [esp+8]
.text:0040B1C0                 add     esp, 0Ch
.text:0040B1C3                 retn
.text:0040B1C3 ; ---------------------------------------------------------------------------
.text:0040B1C4                 align 10h
.text:0040B1D0                 sub     esp, 0Ch
.text:0040B1D3                 mov     [esp+8], ebx
.text:0040B1D7                 mov     ebx, [esp+10h]
.text:0040B1DB                 mov     [esp], ebx
.text:0040B1DE                 call    sub_40B110
.text:0040B1E3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B1EB                 mov     [esp], ebx
.text:0040B1EE                 call    strrchr
.text:0040B1F3                 test    eax, eax
.text:0040B1F5                 jz      short loc_40B1FA
.text:0040B1F7                 mov     byte ptr [eax], 0
.text:0040B1FA
.text:0040B1FA loc_40B1FA:                             ; CODE XREF: .text:0040B1F5↑j
.text:0040B1FA                 mov     eax, ebx
.text:0040B1FC                 mov     ebx, [esp+8]
.text:0040B200                 add     esp, 0Ch
.text:0040B203                 retn
.text:0040B203 ; ---------------------------------------------------------------------------
.text:0040B204                 align 10h
.text:0040B210                 sub     esp, 0Ch
.text:0040B213                 mov     [esp+8], ebx
.text:0040B217                 mov     ebx, [esp+10h]
.text:0040B21B                 mov     [esp], ebx
.text:0040B21E                 call    sub_40B110
.text:0040B223                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B22B                 mov     [esp], ebx
.text:0040B22E                 call    strrchr
.text:0040B233                 test    eax, eax
.text:0040B235                 jz      short loc_40B23A
.text:0040B237                 mov     byte ptr [eax], 0
.text:0040B23A
.text:0040B23A loc_40B23A:                             ; CODE XREF: .text:0040B235↑j
.text:0040B23A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B242                 mov     [esp], ebx
.text:0040B245                 call    strrchr
.text:0040B24A                 test    eax, eax
.text:0040B24C                 jz      short loc_40B251
.text:0040B24E                 mov     byte ptr [eax], 0
.text:0040B251
.text:0040B251 loc_40B251:                             ; CODE XREF: .text:0040B24C↑j
.text:0040B251                 mov     eax, ebx
.text:0040B253                 mov     ebx, [esp+8]
.text:0040B257                 add     esp, 0Ch
.text:0040B25A                 retn
.text:0040B25A ; ---------------------------------------------------------------------------
.text:0040B25B                 align 10h
.text:0040B260                 sub     esp, 1Ch
.text:0040B263                 mov     edx, [esp+20h]
.text:0040B267                 mov     [esp+10h], ebx
.text:0040B26B                 xor     ebx, ebx
.text:0040B26D                 mov     [esp+14h], esi
.text:0040B271                 mov     [esp+18h], edi
.text:0040B275                 mov     [esp], edx
.text:0040B278                 call    sub_409D40
.text:0040B27D                 mov     edx, [esp+24h]
.text:0040B281                 mov     edi, eax
.text:0040B283                 mov     [esp], edx
.text:0040B286                 call    sub_409D40
.text:0040B28B                 mov     [esp+4], eax
.text:0040B28F                 mov     esi, eax
.text:0040B291                 mov     [esp], edi
.text:0040B294                 call    _stricmp_0
.text:0040B299                 mov     [esp], edi
.text:0040B29C                 test    eax, eax
.text:0040B29E                 setz    bl
.text:0040B2A1                 call    free
.text:0040B2A6                 mov     [esp], esi
.text:0040B2A9                 call    free
.text:0040B2AE                 mov     eax, ebx
.text:0040B2B0                 mov     esi, [esp+14h]
.text:0040B2B4                 mov     ebx, [esp+10h]
.text:0040B2B8                 mov     edi, [esp+18h]
.text:0040B2BC                 add     esp, 1Ch
.text:0040B2BF                 retn
.text:0040B2C0 ; ---------------------------------------------------------------------------
.text:0040B2C0                 xor     eax, eax
.text:0040B2C2                 retn
.text:0040B2C2 ; ---------------------------------------------------------------------------
.text:0040B2C3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040B2F7↓o
.text:0040B2D0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040B306↓o
.text:0040B2E0 ; ---------------------------------------------------------------------------
.text:0040B2E0                 sub     esp, 1Ch
.text:0040B2E3                 mov     [esp+10h], ebx
.text:0040B2E7                 mov     ebx, [esp+20h]
.text:0040B2EB                 mov     [esp+18h], edi
.text:0040B2EF                 mov     edi, [esp+24h]
.text:0040B2F3                 mov     [esp+14h], esi
.text:0040B2F7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040B2FE                 call    GetModuleHandleA
.text:0040B303                 sub     esp, 4
.text:0040B306                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040B30E                 mov     [esp], eax
.text:0040B311                 call    GetProcAddress
.text:0040B316                 sub     esp, 8
.text:0040B319                 test    eax, eax
.text:0040B31B                 jz      short loc_40B333
.text:0040B31D                 mov     dword ptr [esp+8], 104h
.text:0040B325                 mov     [esp+4], ebx
.text:0040B329                 mov     [esp], edi
.text:0040B32C                 call    eax
.text:0040B32E                 sub     esp, 0Ch
.text:0040B331                 mov     esi, eax
.text:0040B333
.text:0040B333 loc_40B333:                             ; CODE XREF: .text:0040B31B↑j
.text:0040B333                 test    esi, esi
.text:0040B335                 jz      short loc_40B350
.text:0040B337
.text:0040B337 loc_40B337:                             ; CODE XREF: .text:0040B36B↓j
.text:0040B337                 mov     eax, ebx
.text:0040B339                 mov     esi, [esp+14h]
.text:0040B33D                 mov     ebx, [esp+10h]
.text:0040B341                 mov     edi, [esp+18h]
.text:0040B345                 add     esp, 1Ch
.text:0040B348                 retn
.text:0040B348 ; ---------------------------------------------------------------------------
.text:0040B349                 align 10h
.text:0040B350
.text:0040B350 loc_40B350:                             ; CODE XREF: .text:0040B335↑j
.text:0040B350                 call    sub_40CC90
.text:0040B355                 mov     [esp], ebx
.text:0040B358                 mov     [esp+4], edi
.text:0040B35C                 call    strcpy
.text:0040B361                 mov     [esp], ebx
.text:0040B364                 call    _win32_longpath
.text:0040B369                 mov     ebx, eax
.text:0040B36B                 jmp     short loc_40B337
.text:0040B36B ; ---------------------------------------------------------------------------
.text:0040B36D                 align 10h
.text:0040B370                 sub     esp, 1Ch
.text:0040B373                 mov     [esp+18h], edi
.text:0040B377                 mov     edi, [esp+20h]
.text:0040B37B                 mov     [esp+10h], ebx
.text:0040B37F                 mov     [esp+14h], esi
.text:0040B383                 mov     dword ptr [esp+8], 0
.text:0040B38B                 mov     dword ptr [esp+4], 0
.text:0040B393                 mov     [esp], edi
.text:0040B396                 call    GetShortPathNameA
.text:0040B39B                 sub     esp, 0Ch
.text:0040B39E                 mov     ebx, eax
.text:0040B3A0                 test    eax, eax
.text:0040B3A2                 jz      short loc_40B3F0
.text:0040B3A4                 lea     edx, [eax+1]
.text:0040B3A7                 mov     [esp], edx
.text:0040B3AA                 call    malloc
.text:0040B3AF                 test    eax, eax
.text:0040B3B1                 mov     esi, eax
.text:0040B3B3                 jz      short loc_40B3F0
.text:0040B3B5                 mov     [esp+8], ebx
.text:0040B3B9                 mov     [esp+4], eax
.text:0040B3BD                 mov     [esp], edi
.text:0040B3C0                 call    GetShortPathNameA
.text:0040B3C5                 sub     esp, 0Ch
.text:0040B3C8                 mov     edx, esi
.text:0040B3CA                 test    eax, eax
.text:0040B3CC                 jz      short loc_40B3E2
.text:0040B3CE                 mov     esi, esi
.text:0040B3D0
.text:0040B3D0 loc_40B3D0:                             ; CODE XREF: .text:0040B400↓j
.text:0040B3D0                 mov     ebx, [esp+10h]
.text:0040B3D4                 mov     eax, edx
.text:0040B3D6                 mov     esi, [esp+14h]
.text:0040B3DA                 mov     edi, [esp+18h]
.text:0040B3DE                 add     esp, 1Ch
.text:0040B3E1                 retn
.text:0040B3E2 ; ---------------------------------------------------------------------------
.text:0040B3E2
.text:0040B3E2 loc_40B3E2:                             ; CODE XREF: .text:0040B3CC↑j
.text:0040B3E2                 mov     [esp], esi
.text:0040B3E5                 call    free
.text:0040B3EA                 lea     esi, [esi+0]
.text:0040B3F0
.text:0040B3F0 loc_40B3F0:                             ; CODE XREF: .text:0040B3A2↑j
.text:0040B3F0                                         ; .text:0040B3B3↑j
.text:0040B3F0                 call    sub_40C250
.text:0040B3F5                 mov     esi, eax
.text:0040B3F7                 call    _errno
.text:0040B3FC                 mov     [eax], esi
.text:0040B3FE                 mov     edx, edi
.text:0040B400                 jmp     short loc_40B3D0
.text:0040B400 ; ---------------------------------------------------------------------------
.text:0040B402                 align 10h
.text:0040B410
.text:0040B410 ; =============== S U B R O U T I N E =======================================
.text:0040B410
.text:0040B410
.text:0040B410 ; int __cdecl sub_40B410(char *, int)
.text:0040B410 sub_40B410      proc near               ; CODE XREF: sub_401B70+791↑p
.text:0040B410                                         ; sub_403200+6A↑p ...
.text:0040B410
.text:0040B410 var_C           = dword ptr -0Ch
.text:0040B410 var_8           = dword ptr -8
.text:0040B410 var_4           = dword ptr -4
.text:0040B410 arg_0           = dword ptr  4
.text:0040B410 arg_4           = dword ptr  8
.text:0040B410
.text:0040B410                 sub     esp, 0Ch
.text:0040B413                 mov     edx, [esp+0Ch+arg_4]
.text:0040B417                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040B41E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040B422                 mov     edx, [esp+0Ch+arg_0]
.text:0040B426                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040B42A                 call    sub_40BCC0
.text:0040B42F                 add     esp, 0Ch
.text:0040B432                 retn
.text:0040B432 sub_40B410      endp
.text:0040B432
.text:0040B432 ; ---------------------------------------------------------------------------
.text:0040B433                 align 10h
.text:0040B440 ; const CHAR LibFileName[]
.text:0040B440 LibFileName     db 'KERNEL32',0         ; DATA XREF: sub_40B480+11↓o
.text:0040B449 ; const CHAR ProcName[]
.text:0040B449 ProcName        db 'GetDiskFreeSpaceExA',0
.text:0040B449                                         ; DATA XREF: sub_40B480+22↓o
.text:0040B45D ; const CHAR FileName[]
.text:0040B45D FileName        db '\\.\vwin32',0       ; DATA XREF: sub_40B480+16C↓o
.text:0040B45D                                         ; sub_40BB30+6C↓o
.text:0040B468 ; const char String2[]
.text:0040B468 String2         db 'NTFS',0             ; DATA XREF: sub_40B480+282↓o
.text:0040B46D ; const char aFat32[]
.text:0040B46D aFat32          db 'FAT32',0            ; DATA XREF: sub_40B480:loc_40B8D0↓o
.text:0040B473 ; const char aFat[]
.text:0040B473 aFat            db 'FAT',0              ; DATA XREF: sub_40B480:loc_40B8FD↓o
.text:0040B477 ; const char aCdfs[]
.text:0040B477 aCdfs           db 'CDFS',0             ; DATA XREF: sub_40B480:loc_40B92A↓o
.text:0040B47C                 align 10h
.text:0040B480
.text:0040B480 ; =============== S U B R O U T I N E =======================================
.text:0040B480
.text:0040B480
.text:0040B480 sub_40B480      proc near               ; CODE XREF: sub_40BAC0+61↓p
.text:0040B480
.text:0040B480 lpLibFileName   = dword ptr -8CCh
.text:0040B480 lpProcName      = dword ptr -8C8h
.text:0040B480 nVolumeNameSize = dword ptr -8C4h
.text:0040B480 lpVolumeSerialNumber= dword ptr -8C0h
.text:0040B480 lpMaximumComponentLength= dword ptr -8BCh
.text:0040B480 lpFileSystemFlags= dword ptr -8B8h
.text:0040B480 lpFileSystemNameBuffer= dword ptr -8B4h
.text:0040B480 nFileSystemNameSize= dword ptr -8B0h
.text:0040B480 var_8AC         = dword ptr -8ACh
.text:0040B480 BytesReturned   = dword ptr -8A8h
.text:0040B480 TotalNumberOfClusters= dword ptr -8A4h
.text:0040B480 NumberOfFreeClusters= dword ptr -8A0h
.text:0040B480 BytesPerSector  = dword ptr -89Ch
.text:0040B480 SectorsPerCluster= dword ptr -898h
.text:0040B480 var_894         = dword ptr -894h
.text:0040B480 var_890         = dword ptr -890h
.text:0040B480 var_88C         = byte ptr -88Ch
.text:0040B480 var_888         = word ptr -888h
.text:0040B480 var_884         = dword ptr -884h
.text:0040B480 var_880         = dword ptr -880h
.text:0040B480 VolumeSerialNumber= dword ptr -878h
.text:0040B480 MaximumComponentLength= dword ptr -874h
.text:0040B480 FileSystemFlags = dword ptr -870h
.text:0040B480 InBuffer        = dword ptr -86Ch
.text:0040B480 var_868         = dword ptr -868h
.text:0040B480 var_864         = dword ptr -864h
.text:0040B480 var_860         = dword ptr -860h
.text:0040B480 var_85C         = byte ptr -85Ch
.text:0040B480 var_854         = dword ptr -854h
.text:0040B480 var_84C         = dword ptr -84Ch
.text:0040B480 var_848         = dword ptr -848h
.text:0040B480 var_844         = dword ptr -844h
.text:0040B480 var_840         = dword ptr -840h
.text:0040B480 var_83C         = dword ptr -83Ch
.text:0040B480 FileSystemNameBuffer= byte ptr -81Ch
.text:0040B480 VolumeNameBuffer= byte ptr -41Ch
.text:0040B480 arg_0           = dword ptr  4
.text:0040B480 arg_4           = dword ptr  8
.text:0040B480
.text:0040B480                 push    ebp
.text:0040B481                 push    edi
.text:0040B482                 push    esi
.text:0040B483                 push    ebx
.text:0040B484                 sub     esp, 8BCh
.text:0040B48A                 mov     ebp, [esp+8CCh+arg_0]
.text:0040B491                 mov     [esp+8CCh+lpLibFileName], offset LibFileName ; "KERNEL32"
.text:0040B498                 call    LoadLibraryA
.text:0040B49D                 sub     esp, 4
.text:0040B4A0                 mov     edi, eax
.text:0040B4A2                 mov     [esp+8CCh+lpProcName], offset ProcName ; "GetDiskFreeSpaceExA"
.text:0040B4AA                 mov     [esp+8CCh+lpLibFileName], eax ; hModule
.text:0040B4AD                 call    GetProcAddress
.text:0040B4B2                 sub     esp, 8
.text:0040B4B5                 mov     esi, eax
.text:0040B4B7                 test    ebp, ebp
.text:0040B4B9                 mov     [esp+8CCh+var_8AC], 0
.text:0040B4C1                 jz      loc_40BA01
.text:0040B4C7                 mov     [esp+8CCh+lpLibFileName], ebp
.text:0040B4CA                 call    sub_40AFF0
.text:0040B4CF                 mov     [esp+8CCh+lpLibFileName], eax ; Str
.text:0040B4D2                 mov     ebp, eax
.text:0040B4D4                 call    strlen
.text:0040B4D9                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040B4DE                 mov     ebx, eax
.text:0040B4E0                 jz      short loc_40B4FC
.text:0040B4E2                 mov     [esp+8CCh+lpLibFileName], ebp ; Block
.text:0040B4E5                 lea     edx, [eax+1]
.text:0040B4E8                 mov     [esp+8CCh+lpProcName], edx ; Size
.text:0040B4EC                 call    realloc
.text:0040B4F1                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040B4F5                 mov     ebp, eax
.text:0040B4F7                 mov     byte ptr [ebx+eax+1], 0
.text:0040B4FC
.text:0040B4FC loc_40B4FC:                             ; CODE XREF: sub_40B480+60↑j
.text:0040B4FC                 mov     [esp+8CCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040B504                 lea     edx, [esp+8CCh+FileSystemNameBuffer]
.text:0040B50B                 lea     ebx, [esp+8CCh+FileSystemFlags]
.text:0040B50F                 mov     [esp+8CCh+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040B513                 lea     ecx, [esp+8CCh+MaximumComponentLength]
.text:0040B517                 lea     edx, [esp+8CCh+VolumeSerialNumber]
.text:0040B51B                 mov     [esp+8CCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040B51F                 lea     eax, [esp+8CCh+VolumeNameBuffer]
.text:0040B526                 mov     [esp+8CCh+lpMaximumComponentLength], ecx ; lpMaximumComponentLength
.text:0040B52A                 mov     [esp+8CCh+lpVolumeSerialNumber], edx ; lpVolumeSerialNumber
.text:0040B52E                 mov     [esp+8CCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040B536                 mov     [esp+8CCh+lpProcName], eax ; lpVolumeNameBuffer
.text:0040B53A                 mov     [esp+8CCh+lpLibFileName], ebp ; lpRootPathName
.text:0040B53D                 call    GetVolumeInformationA
.text:0040B542                 sub     esp, 20h
.text:0040B545                 test    eax, eax
.text:0040B547                 jz      loc_40B9DE
.text:0040B54D                 test    esi, esi
.text:0040B54F                 jz      short loc_40B575
.text:0040B551                 mov     [esp+8CCh+lpLibFileName], ebp
.text:0040B554                 lea     edx, [esp+8CCh+var_884]
.text:0040B558                 lea     ebx, [esp+8CCh+var_88C]
.text:0040B55C                 mov     [esp+8CCh+lpVolumeSerialNumber], edx
.text:0040B560                 lea     ecx, [esp+8CCh+var_894]
.text:0040B564                 mov     [esp+8CCh+nVolumeNameSize], ebx
.text:0040B568                 mov     [esp+8CCh+lpProcName], ecx
.text:0040B56C                 call    esi
.text:0040B56E                 sub     esp, 10h
.text:0040B571                 mov     [esp+8CCh+var_8AC], eax
.text:0040B575
.text:0040B575 loc_40B575:                             ; CODE XREF: sub_40B480+CF↑j
.text:0040B575                 test    edi, edi
.text:0040B577                 jz      short loc_40B584
.text:0040B579                 mov     [esp+8CCh+lpLibFileName], edi ; hLibModule
.text:0040B57C                 call    FreeLibrary
.text:0040B581                 sub     esp, 4
.text:0040B584
.text:0040B584 loc_40B584:                             ; CODE XREF: sub_40B480+F7↑j
.text:0040B584                 call    sub_40CC90
.text:0040B589                 test    eax, eax
.text:0040B58B                 lea     esi, [esp+8CCh+TotalNumberOfClusters]
.text:0040B58F                 jz      loc_40B9C0
.text:0040B595                 call    sub_40CC90
.text:0040B59A                 test    eax, eax
.text:0040B59C                 jz      short loc_40B5AC
.text:0040B59E                 call    sub_40CBE0
.text:0040B5A3                 cmp     eax, 0Bh
.text:0040B5A6                 jle     loc_40B994
.text:0040B5AC
.text:0040B5AC loc_40B5AC:                             ; CODE XREF: sub_40B480+11C↑j
.text:0040B5AC                 cld
.text:0040B5AD                 xor     eax, eax
.text:0040B5AF                 lea     ebx, [esp+8CCh+InBuffer]
.text:0040B5B3                 mov     ecx, 7
.text:0040B5B8                 mov     edi, ebx
.text:0040B5BA                 rep stosd
.text:0040B5BC                 mov     [esp+8CCh+lpFileSystemNameBuffer], 0 ; hTemplateFile
.text:0040B5C4                 mov     [esp+8CCh+lpFileSystemFlags], 4000000h ; dwFlagsAndAttributes
.text:0040B5CC                 mov     [esp+8CCh+lpMaximumComponentLength], 0 ; dwCreationDisposition
.text:0040B5D4                 mov     [esp+8CCh+lpVolumeSerialNumber], 0 ; lpSecurityAttributes
.text:0040B5DC                 mov     [esp+8CCh+nVolumeNameSize], 0 ; dwShareMode
.text:0040B5E4                 mov     [esp+8CCh+lpProcName], 0 ; dwDesiredAccess
.text:0040B5EC                 mov     [esp+8CCh+lpLibFileName], offset FileName ; "\\\\.\\vwin32"
.text:0040B5F3                 call    CreateFileA
.text:0040B5F8                 sub     esp, 1Ch
.text:0040B5FB                 mov     edi, eax
.text:0040B5FD                 cmp     eax, 0FFFFFFFFh
.text:0040B600                 jz      short loc_40B680
.text:0040B602                 mov     [esp+8CCh+lpMaximumComponentLength], ebx ; lpOutBuffer
.text:0040B606                 lea     edx, [esp+8CCh+var_84C]
.text:0040B60D                 lea     ecx, [esp+8CCh+BytesReturned]
.text:0040B611                 mov     dword ptr [esp+8CCh+var_85C], edx
.text:0040B615                 mov     [esp+8CCh+lpFileSystemNameBuffer], ecx ; lpBytesReturned
.text:0040B619                 mov     [esp+8CCh+nVolumeNameSize], ebx ; lpInBuffer
.text:0040B61D                 mov     [esp+8CCh+var_860], 7303h
.text:0040B625                 mov     [esp+8CCh+var_864], 2Ch ; ','
.text:0040B62D                 mov     [esp+8CCh+var_868], ebp
.text:0040B631                 mov     [esp+8CCh+var_854], 1
.text:0040B639                 mov     [esp+8CCh+nFileSystemNameSize], 0 ; lpOverlapped
.text:0040B641                 mov     [esp+8CCh+lpFileSystemFlags], 1Ch ; nOutBufferSize
.text:0040B649                 mov     [esp+8CCh+lpVolumeSerialNumber], 1Ch ; nInBufferSize
.text:0040B651                 mov     [esp+8CCh+lpProcName], 6 ; dwIoControlCode
.text:0040B659                 mov     [esp+8CCh+lpLibFileName], eax ; hDevice
.text:0040B65C                 call    DeviceIoControl
.text:0040B661                 sub     esp, 20h
.text:0040B664                 mov     ebx, eax
.text:0040B666                 mov     [esp+8CCh+lpLibFileName], edi ; hObject
.text:0040B669                 call    CloseHandle
.text:0040B66E                 sub     esp, 4
.text:0040B671                 test    ebx, ebx
.text:0040B673                 jz      short loc_40B680
.text:0040B675                 test    byte ptr [esp+8CCh+var_854], 1
.text:0040B67A                 jz      loc_40B960
.text:0040B680
.text:0040B680 loc_40B680:                             ; CODE XREF: sub_40B480+180↑j
.text:0040B680                                         ; sub_40B480+1F3↑j
.text:0040B680                 call    sub_40C250
.text:0040B685                 mov     edi, eax
.text:0040B687                 call    _errno
.text:0040B68C                 mov     [eax], edi
.text:0040B68E                 xor     eax, eax
.text:0040B690
.text:0040B690 loc_40B690:                             ; CODE XREF: sub_40B480+50F↓j
.text:0040B690                                         ; sub_40B480+53B↓j
.text:0040B690                 test    eax, eax
.text:0040B692                 jnz     short loc_40B6B4
.text:0040B694                 mov     [esp+8CCh+SectorsPerCluster], 1
.text:0040B69C                 mov     [esp+8CCh+BytesPerSector], 200h
.text:0040B6A4                 mov     [esp+8CCh+NumberOfFreeClusters], 0
.text:0040B6AC                 mov     [esp+8CCh+TotalNumberOfClusters], 0
.text:0040B6B4
.text:0040B6B4 loc_40B6B4:                             ; CODE XREF: sub_40B480+212↑j
.text:0040B6B4                 mov     edx, [esp+8CCh+BytesPerSector]
.text:0040B6B8                 mov     edi, [esp+8CCh+SectorsPerCluster]
.text:0040B6BC                 mov     ecx, [esp+8CCh+var_8AC]
.text:0040B6C0                 imul    edi, edx
.text:0040B6C3                 test    ecx, ecx
.text:0040B6C5                 jnz     short loc_40B6ED
.text:0040B6C7                 mov     eax, [esp+8CCh+TotalNumberOfClusters]
.text:0040B6CB                 mul     edi
.text:0040B6CD                 mov     esi, eax
.text:0040B6CF                 mov     eax, [esp+8CCh+NumberOfFreeClusters]
.text:0040B6D3                 mov     dword ptr [esp+8CCh+var_888], edx
.text:0040B6D7                 mov     dword ptr [esp+8CCh+var_88C], esi
.text:0040B6DB                 mul     edi
.text:0040B6DD                 mov     [esp+8CCh+var_884], eax
.text:0040B6E1                 mov     [esp+8CCh+var_880], edx
.text:0040B6E5                 mov     [esp+8CCh+var_894], eax
.text:0040B6E9                 mov     [esp+8CCh+var_890], edx
.text:0040B6ED
.text:0040B6ED loc_40B6ED:                             ; CODE XREF: sub_40B480+245↑j
.text:0040B6ED                 mov     ebx, [esp+8CCh+FileSystemFlags]
.text:0040B6F1                 lea     edx, [esp+8CCh+FileSystemNameBuffer]
.text:0040B6F8                 mov     ecx, [esp+8CCh+arg_4]
.text:0040B6FF                 mov     [ecx+48h], ebx
.text:0040B702                 mov     [esp+8CCh+lpProcName], offset String2 ; "NTFS"
.text:0040B70A                 mov     [esp+8CCh+lpLibFileName], edx ; String1
.text:0040B70D                 call    _stricmp
.text:0040B712                 test    eax, eax
.text:0040B714                 jnz     loc_40B8D0
.text:0040B71A                 mov     esi, [esp+8CCh+arg_4]
.text:0040B721                 mov     dword ptr [esi], 5346544Eh
.text:0040B727
.text:0040B727 loc_40B727:                             ; CODE XREF: sub_40B480+478↓j
.text:0040B727                                         ; sub_40B480+4A5↓j ...
.text:0040B727                 mov     ebx, [esp+8CCh+BytesPerSector]
.text:0040B72B                 mov     esi, [esp+8CCh+arg_4]
.text:0040B732                 mov     [esi+4], ebx
.text:0040B735                 mov     [esi+8], ebx
.text:0040B738                 mov     ebx, [esi+8]
.text:0040B73B                 mov     [esi+0Ch], edi
.text:0040B73E                 mov     ecx, dword ptr [esp+8CCh+var_888]
.text:0040B742                 xor     esi, esi
.text:0040B744                 mov     [esp+8CCh+nVolumeNameSize], ebx
.text:0040B748                 mov     edx, dword ptr [esp+8CCh+var_88C]
.text:0040B74C                 mov     [esp+8CCh+lpVolumeSerialNumber], esi
.text:0040B750                 mov     [esp+8CCh+lpProcName], ecx
.text:0040B754                 mov     [esp+8CCh+lpLibFileName], edx
.text:0040B757                 call    sub_4118B0
.text:0040B75C                 mov     ecx, [esp+8CCh+arg_4]
.text:0040B763                 mov     [ecx+10h], eax
.text:0040B766                 mov     [ecx+14h], edx
.text:0040B769                 mov     ecx, [esp+8CCh+var_880]
.text:0040B76D                 mov     [esp+8CCh+nVolumeNameSize], ebx
.text:0040B771                 mov     edx, [esp+8CCh+var_884]
.text:0040B775                 mov     [esp+8CCh+lpVolumeSerialNumber], esi
.text:0040B779                 mov     [esp+8CCh+lpProcName], ecx
.text:0040B77D                 mov     [esp+8CCh+lpLibFileName], edx
.text:0040B780                 call    sub_4118B0
.text:0040B785                 mov     ecx, [esp+8CCh+arg_4]
.text:0040B78C                 mov     [ecx+18h], eax
.text:0040B78F                 mov     [ecx+1Ch], edx
.text:0040B792                 mov     ecx, [esp+8CCh+var_894]
.text:0040B796                 mov     [esp+8CCh+nVolumeNameSize], ebx
.text:0040B79A                 mov     ebx, [esp+8CCh+var_890]
.text:0040B79E                 mov     [esp+8CCh+lpVolumeSerialNumber], esi
.text:0040B7A2                 mov     [esp+8CCh+lpLibFileName], ecx
.text:0040B7A5                 mov     [esp+8CCh+lpProcName], ebx
.text:0040B7A9                 call    sub_4118B0
.text:0040B7AE                 mov     esi, [esp+8CCh+arg_4]
.text:0040B7B5                 mov     [esi+20h], eax
.text:0040B7B8                 mov     [esi+24h], edx
.text:0040B7BB                 mov     ecx, dword ptr [esp+8CCh+var_888]
.text:0040B7BF                 mov     esi, edi
.text:0040B7C1                 mov     [esp+8CCh+nVolumeNameSize], esi
.text:0040B7C5                 mov     edx, dword ptr [esp+8CCh+var_88C]
.text:0040B7C9                 xor     edi, edi
.text:0040B7CB                 mov     [esp+8CCh+lpVolumeSerialNumber], edi
.text:0040B7CF                 mov     [esp+8CCh+lpProcName], ecx
.text:0040B7D3                 mov     [esp+8CCh+lpLibFileName], edx
.text:0040B7D6                 call    sub_4118B0
.text:0040B7DB                 mov     ebx, [esp+8CCh+arg_4]
.text:0040B7E2                 mov     [ebx+28h], eax
.text:0040B7E5                 mov     [ebx+2Ch], edx
.text:0040B7E8                 mov     ecx, [esp+8CCh+var_880]
.text:0040B7EC                 mov     [esp+8CCh+nVolumeNameSize], esi
.text:0040B7F0                 mov     edx, [esp+8CCh+var_884]
.text:0040B7F4                 mov     [esp+8CCh+lpVolumeSerialNumber], edi
.text:0040B7F8                 mov     [esp+8CCh+lpProcName], ecx
.text:0040B7FC                 mov     [esp+8CCh+lpLibFileName], edx
.text:0040B7FF                 call    sub_4118B0
.text:0040B804                 mov     ebx, [esp+8CCh+arg_4]
.text:0040B80B                 mov     [ebx+30h], eax
.text:0040B80E                 mov     [ebx+34h], edx
.text:0040B811                 mov     ecx, [esp+8CCh+var_890]
.text:0040B815                 mov     [esp+8CCh+nVolumeNameSize], esi
.text:0040B819                 mov     edx, [esp+8CCh+var_894]
.text:0040B81D                 mov     [esp+8CCh+lpVolumeSerialNumber], edi
.text:0040B821                 mov     [esp+8CCh+lpProcName], ecx
.text:0040B825                 mov     [esp+8CCh+lpLibFileName], edx
.text:0040B828                 call    sub_4118B0
.text:0040B82D                 mov     edx, [esp+8CCh+arg_4]
.text:0040B834                 lea     ecx, [esp+8CCh+FileSystemNameBuffer]
.text:0040B83B                 mov     [edx+38h], eax
.text:0040B83E                 mov     esi, [esp+8CCh+MaximumComponentLength]
.text:0040B842                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040B849                 mov     [edx+110h], esi
.text:0040B84F                 mov     esi, edx
.text:0040B851                 add     esi, 4Ch ; 'L'
.text:0040B854                 movzx   ebx, word ptr [esp+8CCh+VolumeSerialNumber+2]
.text:0040B859                 movzx   edi, word ptr [esp+8CCh+VolumeSerialNumber]
.text:0040B85E                 mov     [edx+3Ch], ebx
.text:0040B861                 lea     ebx, [esp+8CCh+VolumeNameBuffer]
.text:0040B868                 mov     [edx+40h], edi
.text:0040B86B                 mov     [esp+8CCh+lpProcName], ecx ; Source
.text:0040B86F                 mov     [esp+8CCh+nVolumeNameSize], 10h ; Count
.text:0040B877                 mov     [esp+8CCh+lpLibFileName], esi ; Destination
.text:0040B87A                 call    strncpy
.text:0040B87F                 mov     [esp+8CCh+nVolumeNameSize], 5Ah ; 'Z' ; Count
.text:0040B887                 mov     edi, [esp+8CCh+arg_4]
.text:0040B88E                 mov     [esp+8CCh+lpProcName], ebx ; Source
.text:0040B892                 add     edi, 5Ch ; '\'
.text:0040B895                 mov     [esp+8CCh+lpLibFileName], edi ; Destination
.text:0040B898                 call    strncpy
.text:0040B89D                 mov     [esp+8CCh+lpProcName], ebp ; Source
.text:0040B8A1                 mov     ebp, [esp+8CCh+arg_4]
.text:0040B8A8                 mov     [esp+8CCh+nVolumeNameSize], 5Ah ; 'Z' ; Count
.text:0040B8B0                 add     ebp, 0B6h ; '¶'
.text:0040B8B6                 mov     [esp+8CCh+lpLibFileName], ebp ; Destination
.text:0040B8B9                 call    strncpy
.text:0040B8BE                 xor     eax, eax
.text:0040B8C0
.text:0040B8C0 loc_40B8C0:                             ; CODE XREF: sub_40B480+57C↓j
.text:0040B8C0                 add     esp, 8BCh
.text:0040B8C6                 pop     ebx
.text:0040B8C7                 pop     esi
.text:0040B8C8                 pop     edi
.text:0040B8C9                 pop     ebp
.text:0040B8CA                 retn
.text:0040B8CA ; ---------------------------------------------------------------------------
.text:0040B8CB                 align 10h
.text:0040B8D0
.text:0040B8D0 loc_40B8D0:                             ; CODE XREF: sub_40B480+294↑j
.text:0040B8D0                 mov     [esp+8CCh+lpProcName], offset aFat32 ; "FAT32"
.text:0040B8D8                 lea     eax, [esp+8CCh+FileSystemNameBuffer]
.text:0040B8DF                 mov     [esp+8CCh+lpLibFileName], eax ; String1
.text:0040B8E2                 call    _stricmp
.text:0040B8E7                 test    eax, eax
.text:0040B8E9                 jnz     short loc_40B8FD
.text:0040B8EB                 mov     edx, [esp+8CCh+arg_4]
.text:0040B8F2                 mov     dword ptr [edx], 4008h
.text:0040B8F8                 jmp     loc_40B727
.text:0040B8FD ; ---------------------------------------------------------------------------
.text:0040B8FD
.text:0040B8FD loc_40B8FD:                             ; CODE XREF: sub_40B480+469↑j
.text:0040B8FD                 mov     [esp+8CCh+lpProcName], offset aFat ; "FAT"
.text:0040B905                 lea     ecx, [esp+8CCh+FileSystemNameBuffer]
.text:0040B90C                 mov     [esp+8CCh+lpLibFileName], ecx ; String1
.text:0040B90F                 call    _stricmp
.text:0040B914                 test    eax, eax
.text:0040B916                 jnz     short loc_40B92A
.text:0040B918                 mov     ebx, [esp+8CCh+arg_4]
.text:0040B91F                 mov     dword ptr [ebx], 4006h
.text:0040B925                 jmp     loc_40B727
.text:0040B92A ; ---------------------------------------------------------------------------
.text:0040B92A
.text:0040B92A loc_40B92A:                             ; CODE XREF: sub_40B480+496↑j
.text:0040B92A                 mov     [esp+8CCh+lpProcName], offset aCdfs ; "CDFS"
.text:0040B932                 lea     eax, [esp+8CCh+FileSystemNameBuffer]
.text:0040B939                 mov     [esp+8CCh+lpLibFileName], eax ; String1
.text:0040B93C                 call    _stricmp
.text:0040B941                 test    eax, eax
.text:0040B943                 mov     esi, [esp+8CCh+arg_4]
.text:0040B94A                 setnz   cl
.text:0040B94D                 movzx   edx, cl
.text:0040B950                 dec     edx
.text:0040B951                 and     edx, 4000h
.text:0040B957                 mov     [esi], edx
.text:0040B959                 jmp     loc_40B727
.text:0040B959 ; ---------------------------------------------------------------------------
.text:0040B95E                 align 10h
.text:0040B960
.text:0040B960 loc_40B960:                             ; CODE XREF: sub_40B480+1FA↑j
.text:0040B960                 mov     edi, [esp+8CCh+var_848]
.text:0040B967                 mov     eax, 1
.text:0040B96C                 mov     edx, [esp+8CCh+var_844]
.text:0040B973                 mov     ecx, [esp+8CCh+var_840]
.text:0040B97A                 mov     ebx, [esp+8CCh+var_83C]
.text:0040B981                 mov     [esp+8CCh+SectorsPerCluster], edi
.text:0040B985                 mov     [esp+8CCh+BytesPerSector], edx
.text:0040B989                 mov     [esp+8CCh+NumberOfFreeClusters], ecx
.text:0040B98D                 mov     [esi], ebx
.text:0040B98F                 jmp     loc_40B690
.text:0040B994 ; ---------------------------------------------------------------------------
.text:0040B994
.text:0040B994 loc_40B994:                             ; CODE XREF: sub_40B480+126↑j
.text:0040B994                 mov     [esp+8CCh+lpMaximumComponentLength], esi ; lpTotalNumberOfClusters
.text:0040B998                 lea     eax, [esp+8CCh+NumberOfFreeClusters]
.text:0040B99C                 lea     esi, [esp+8CCh+BytesPerSector]
.text:0040B9A0                 mov     [esp+8CCh+lpVolumeSerialNumber], eax ; lpNumberOfFreeClusters
.text:0040B9A4                 lea     edi, [esp+8CCh+SectorsPerCluster]
.text:0040B9A8                 mov     [esp+8CCh+nVolumeNameSize], esi ; lpBytesPerSector
.text:0040B9AC                 mov     [esp+8CCh+lpProcName], edi ; lpSectorsPerCluster
.text:0040B9B0
.text:0040B9B0 loc_40B9B0:                             ; CODE XREF: sub_40B480+55C↓j
.text:0040B9B0                 mov     [esp+8CCh+lpLibFileName], ebp ; lpRootPathName
.text:0040B9B3                 call    GetDiskFreeSpaceA
.text:0040B9B8                 sub     esp, 14h
.text:0040B9BB                 jmp     loc_40B690
.text:0040B9C0 ; ---------------------------------------------------------------------------
.text:0040B9C0
.text:0040B9C0 loc_40B9C0:                             ; CODE XREF: sub_40B480+10F↑j
.text:0040B9C0                 mov     [esp+8CCh+lpMaximumComponentLength], esi
.text:0040B9C4                 lea     ebx, [esp+8CCh+NumberOfFreeClusters]
.text:0040B9C8                 lea     eax, [esp+8CCh+BytesPerSector]
.text:0040B9CC                 mov     [esp+8CCh+lpVolumeSerialNumber], ebx
.text:0040B9D0                 lea     esi, [esp+8CCh+SectorsPerCluster]
.text:0040B9D4                 mov     [esp+8CCh+nVolumeNameSize], eax
.text:0040B9D8                 mov     [esp+8CCh+lpProcName], esi
.text:0040B9DC                 jmp     short loc_40B9B0
.text:0040B9DE ; ---------------------------------------------------------------------------
.text:0040B9DE
.text:0040B9DE loc_40B9DE:                             ; CODE XREF: sub_40B480+C7↑j
.text:0040B9DE                 mov     [esp+8CCh+lpLibFileName], edi ; hLibModule
.text:0040B9E1                 call    FreeLibrary
.text:0040B9E6                 sub     esp, 4
.text:0040B9E9                 call    sub_40C250
.text:0040B9EE                 mov     esi, eax
.text:0040B9F0                 call    _errno
.text:0040B9F5                 mov     [eax], esi
.text:0040B9F7
.text:0040B9F7 loc_40B9F7:                             ; CODE XREF: sub_40B480+597↓j
.text:0040B9F7                 mov     eax, 0FFFFFFFFh
.text:0040B9FC                 jmp     loc_40B8C0
.text:0040BA01 ; ---------------------------------------------------------------------------
.text:0040BA01
.text:0040BA01 loc_40BA01:                             ; CODE XREF: sub_40B480+41↑j
.text:0040BA01                 mov     [esp+8CCh+lpLibFileName], edi ; hLibModule
.text:0040BA04                 call    FreeLibrary
.text:0040BA09                 sub     esp, 4
.text:0040BA0C                 call    _errno
.text:0040BA11                 mov     dword ptr [eax], 2
.text:0040BA17                 jmp     short loc_40B9F7
.text:0040BA17 sub_40B480      endp
.text:0040BA17
.text:0040BA17 ; ---------------------------------------------------------------------------
.text:0040BA19                 align 10h
.text:0040BA20
.text:0040BA20 ; =============== S U B R O U T I N E =======================================
.text:0040BA20
.text:0040BA20
.text:0040BA20 ; int __cdecl sub_40BA20(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040BA20 sub_40BA20      proc near               ; CODE XREF: sub_40EAB0+2C7↓p
.text:0040BA20                                         ; .text:0040F0EA↓p
.text:0040BA20
.text:0040BA20 lpRootPathName  = dword ptr -2Ch
.text:0040BA20 lpSectorsPerCluster= dword ptr -28h
.text:0040BA20 lpBytesPerSector= dword ptr -24h
.text:0040BA20 lpNumberOfFreeClusters= dword ptr -20h
.text:0040BA20 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040BA20 var_14          = dword ptr -14h
.text:0040BA20 var_10          = dword ptr -10h
.text:0040BA20 var_C           = dword ptr -0Ch
.text:0040BA20 var_8           = dword ptr -8
.text:0040BA20 var_4           = dword ptr -4
.text:0040BA20 arg_0           = dword ptr  4
.text:0040BA20 arg_4           = dword ptr  8
.text:0040BA20 arg_8           = dword ptr  0Ch
.text:0040BA20 arg_C           = dword ptr  10h
.text:0040BA20 arg_10          = dword ptr  14h
.text:0040BA20
.text:0040BA20                 sub     esp, 2Ch
.text:0040BA23                 mov     edx, [esp+2Ch+arg_0]
.text:0040BA27                 mov     [esp+2Ch+var_10], ebx
.text:0040BA2B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040BA2F                 mov     [esp+2Ch+var_C], esi
.text:0040BA33                 mov     esi, [esp+2Ch+arg_C]
.text:0040BA37                 mov     [esp+2Ch+var_8], edi
.text:0040BA3B                 mov     edi, [esp+2Ch+arg_8]
.text:0040BA3F                 mov     [esp+2Ch+var_4], ebp
.text:0040BA43                 mov     ebp, [esp+2Ch+arg_4]
.text:0040BA47                 mov     [esp+2Ch+var_14], edx
.text:0040BA4B                 call    sub_40CC90
.text:0040BA50                 test    eax, eax
.text:0040BA52                 jz      short loc_40BA84
.text:0040BA54                 mov     [esp+2Ch+arg_10], ebx ; lpTotalNumberOfClusters
.text:0040BA58                 mov     edx, [esp+2Ch+var_14]
.text:0040BA5C                 mov     ebx, [esp+2Ch+var_10]
.text:0040BA60                 mov     [esp+2Ch+arg_C], esi ; lpNumberOfFreeClusters
.text:0040BA64                 mov     esi, [esp+2Ch+var_C]
.text:0040BA68                 mov     [esp+2Ch+arg_8], edi ; lpBytesPerSector
.text:0040BA6C                 mov     edi, [esp+2Ch+var_8]
.text:0040BA70                 mov     [esp+2Ch+arg_4], ebp ; lpSectorsPerCluster
.text:0040BA74                 mov     ebp, [esp+2Ch+var_4]
.text:0040BA78                 mov     [esp+2Ch+arg_0], edx ; lpRootPathName
.text:0040BA7C                 add     esp, 2Ch
.text:0040BA7F                 jmp     sub_40BB30
.text:0040BA84 ; ---------------------------------------------------------------------------
.text:0040BA84
.text:0040BA84 loc_40BA84:                             ; CODE XREF: sub_40BA20+32↑j
.text:0040BA84                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040BA88                 mov     ecx, [esp+2Ch+var_14]
.text:0040BA8C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040BA90                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040BA94                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040BA98                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040BA9B                 call    GetDiskFreeSpaceA
.text:0040BAA0                 sub     esp, 14h
.text:0040BAA3                 mov     ebx, [esp+2Ch+var_10]
.text:0040BAA7                 mov     esi, [esp+2Ch+var_C]
.text:0040BAAB                 mov     edi, [esp+2Ch+var_8]
.text:0040BAAF                 mov     ebp, [esp+2Ch+var_4]
.text:0040BAB3                 add     esp, 2Ch
.text:0040BAB6                 retn
.text:0040BAB6 sub_40BA20      endp
.text:0040BAB6
.text:0040BAB6 ; ---------------------------------------------------------------------------
.text:0040BAB7                 align 10h
.text:0040BAC0
.text:0040BAC0 ; =============== S U B R O U T I N E =======================================
.text:0040BAC0
.text:0040BAC0
.text:0040BAC0 ; int __cdecl sub_40BAC0(LPCSTR, int)
.text:0040BAC0 sub_40BAC0      proc near               ; CODE XREF: sub_403960+21↑p
.text:0040BAC0                                         ; _getmntent_r+4D↑p
.text:0040BAC0
.text:0040BAC0 Block           = dword ptr -1Ch
.text:0040BAC0 var_18          = dword ptr -18h
.text:0040BAC0 var_8           = dword ptr -8
.text:0040BAC0 var_4           = dword ptr -4
.text:0040BAC0 arg_0           = dword ptr  4
.text:0040BAC0 arg_4           = dword ptr  8
.text:0040BAC0
.text:0040BAC0                 sub     esp, 1Ch
.text:0040BAC3                 mov     [esp+1Ch+var_4], esi
.text:0040BAC7                 mov     esi, [esp+1Ch+arg_0]
.text:0040BACB                 mov     [esp+1Ch+var_8], ebx
.text:0040BACF                 mov     [esp+1Ch+Block], esi ; LPCSTR
.text:0040BAD2                 call    sub_40CF50
.text:0040BAD7                 test    eax, eax
.text:0040BAD9                 mov     ebx, eax
.text:0040BADB                 jz      short loc_40BAF0
.text:0040BADD                 cmp     byte ptr [eax], 0
.text:0040BAE0                 jz      short loc_40BAF0
.text:0040BAE2                 test    esi, esi
.text:0040BAE4                 jz      short loc_40BAF0
.text:0040BAE6                 cmp     byte ptr [esi], 0
.text:0040BAE9                 jnz     short loc_40BB16
.text:0040BAEB                 nop
.text:0040BAEC                 lea     esi, [esi+0]
.text:0040BAF0
.text:0040BAF0 loc_40BAF0:                             ; CODE XREF: sub_40BAC0+1B↑j
.text:0040BAF0                                         ; sub_40BAC0+20↑j ...
.text:0040BAF0                 call    _errno
.text:0040BAF5                 mov     dword ptr [eax], 2
.text:0040BAFB                 mov     esi, 0FFFFFFFFh
.text:0040BB00
.text:0040BB00 loc_40BB00:                             ; CODE XREF: sub_40BAC0+68↓j
.text:0040BB00                 mov     [esp+1Ch+Block], ebx ; Block
.text:0040BB03                 call    free
.text:0040BB08                 mov     eax, esi
.text:0040BB0A                 mov     ebx, [esp+1Ch+var_8]
.text:0040BB0E                 mov     esi, [esp+1Ch+var_4]
.text:0040BB12                 add     esp, 1Ch
.text:0040BB15                 retn
.text:0040BB16 ; ---------------------------------------------------------------------------
.text:0040BB16
.text:0040BB16 loc_40BB16:                             ; CODE XREF: sub_40BAC0+29↑j
.text:0040BB16                 mov     [esp+1Ch+Block], eax
.text:0040BB19                 mov     edx, [esp+1Ch+arg_4]
.text:0040BB1D                 mov     [esp+1Ch+var_18], edx
.text:0040BB21                 call    sub_40B480
.text:0040BB26                 mov     esi, eax
.text:0040BB28                 jmp     short loc_40BB00
.text:0040BB28 sub_40BAC0      endp
.text:0040BB28
.text:0040BB28 ; ---------------------------------------------------------------------------
.text:0040BB2A                 align 10h
.text:0040BB30
.text:0040BB30 ; =============== S U B R O U T I N E =======================================
.text:0040BB30
.text:0040BB30
.text:0040BB30 ; int __cdecl sub_40BB30(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040BB30 sub_40BB30      proc near               ; CODE XREF: sub_40BA20+5F↑j
.text:0040BB30
.text:0040BB30 lpFileName      = dword ptr -9Ch
.text:0040BB30 dwDesiredAccess = dword ptr -98h
.text:0040BB30 dwShareMode     = dword ptr -94h
.text:0040BB30 lpSecurityAttributes= dword ptr -90h
.text:0040BB30 dwCreationDisposition= dword ptr -8Ch
.text:0040BB30 dwFlagsAndAttributes= dword ptr -88h
.text:0040BB30 hTemplateFile   = dword ptr -84h
.text:0040BB30 lpOverlapped    = dword ptr -80h
.text:0040BB30 BytesReturned   = dword ptr -70h
.text:0040BB30 InBuffer        = byte ptr -6Ch
.text:0040BB30 var_68          = dword ptr -68h
.text:0040BB30 var_64          = dword ptr -64h
.text:0040BB30 var_60          = dword ptr -60h
.text:0040BB30 var_5C          = dword ptr -5Ch
.text:0040BB30 var_54          = dword ptr -54h
.text:0040BB30 var_4C          = byte ptr -4Ch
.text:0040BB30 var_48          = dword ptr -48h
.text:0040BB30 var_44          = dword ptr -44h
.text:0040BB30 var_40          = dword ptr -40h
.text:0040BB30 var_3C          = dword ptr -3Ch
.text:0040BB30 lpRootPathName  = dword ptr  4
.text:0040BB30 lpSectorsPerCluster= dword ptr  8
.text:0040BB30 lpBytesPerSector= dword ptr  0Ch
.text:0040BB30 lpNumberOfFreeClusters= dword ptr  10h
.text:0040BB30 lpTotalNumberOfClusters= dword ptr  14h
.text:0040BB30
.text:0040BB30                 push    ebp
.text:0040BB31                 push    edi
.text:0040BB32                 push    esi
.text:0040BB33                 push    ebx
.text:0040BB34                 sub     esp, 8Ch
.text:0040BB3A                 mov     ebp, [esp+9Ch+lpRootPathName]
.text:0040BB41                 call    sub_40CC90
.text:0040BB46                 test    eax, eax
.text:0040BB48                 jz      short loc_40BB58
.text:0040BB4A                 call    sub_40CBE0
.text:0040BB4F                 cmp     eax, 0Bh
.text:0040BB52                 jle     loc_40BC80
.text:0040BB58
.text:0040BB58 loc_40BB58:                             ; CODE XREF: sub_40BB30+18↑j
.text:0040BB58                 cld
.text:0040BB59                 xor     eax, eax
.text:0040BB5B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040BB5F                 mov     ecx, 7
.text:0040BB64                 mov     edi, ebx
.text:0040BB66                 lea     esi, [esp+9Ch+var_4C]
.text:0040BB6A                 rep stosd
.text:0040BB6C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040BB74                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040BB7C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040BB84                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040BB8C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040BB94                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040BB9C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:0040BBA3                 call    CreateFileA
.text:0040BBA8                 sub     esp, 1Ch
.text:0040BBAB                 mov     edi, eax
.text:0040BBAD                 cmp     eax, 0FFFFFFFFh
.text:0040BBB0                 jz      short loc_40BC25
.text:0040BBB2                 mov     [esp+9Ch+var_68], ebp
.text:0040BBB6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040BBBA                 mov     [esp+9Ch+var_5C], esi
.text:0040BBBE                 mov     [esp+9Ch+var_60], 7303h
.text:0040BBC6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040BBCE                 mov     [esp+9Ch+var_54], 1
.text:0040BBD6                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040BBDE                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040BBE2                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040BBEA                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040BBEE                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040BBF6                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040BBFA                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040BC02                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040BC05                 call    DeviceIoControl
.text:0040BC0A                 sub     esp, 20h
.text:0040BC0D                 mov     esi, eax
.text:0040BC0F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040BC12                 call    CloseHandle
.text:0040BC17                 sub     esp, 4
.text:0040BC1A                 test    esi, esi
.text:0040BC1C                 jz      short loc_40BC25
.text:0040BC1E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040BC23                 jz      short loc_40BC40
.text:0040BC25
.text:0040BC25 loc_40BC25:                             ; CODE XREF: sub_40BB30+80↑j
.text:0040BC25                                         ; sub_40BB30+EC↑j
.text:0040BC25                 call    sub_40C250
.text:0040BC2A                 mov     edi, eax
.text:0040BC2C                 call    _errno
.text:0040BC31                 mov     [eax], edi
.text:0040BC33                 xor     eax, eax
.text:0040BC35
.text:0040BC35 loc_40BC35:                             ; CODE XREF: sub_40BB30+14A↓j
.text:0040BC35                                         ; sub_40BB30+187↓j
.text:0040BC35                 add     esp, 8Ch
.text:0040BC3B                 pop     ebx
.text:0040BC3C                 pop     esi
.text:0040BC3D                 pop     edi
.text:0040BC3E                 pop     ebp
.text:0040BC3F                 retn
.text:0040BC40 ; ---------------------------------------------------------------------------
.text:0040BC40
.text:0040BC40 loc_40BC40:                             ; CODE XREF: sub_40BB30+F3↑j
.text:0040BC40                 mov     edx, [esp+9Ch+var_48]
.text:0040BC44                 mov     eax, 1
.text:0040BC49                 mov     ebx, [esp+9Ch+lpSectorsPerCluster]
.text:0040BC50                 mov     ebp, [esp+9Ch+lpBytesPerSector]
.text:0040BC57                 mov     ecx, [esp+9Ch+lpNumberOfFreeClusters]
.text:0040BC5E                 mov     [ebx], edx
.text:0040BC60                 mov     edi, [esp+9Ch+var_44]
.text:0040BC64                 mov     ebx, [esp+9Ch+lpTotalNumberOfClusters]
.text:0040BC6B                 mov     [ebp+0], edi
.text:0040BC6E                 mov     esi, [esp+9Ch+var_40]
.text:0040BC72                 mov     [ecx], esi
.text:0040BC74                 mov     edx, [esp+9Ch+var_3C]
.text:0040BC78                 mov     [ebx], edx
.text:0040BC7A                 jmp     short loc_40BC35
.text:0040BC7A ; ---------------------------------------------------------------------------
.text:0040BC7C                 align 10h
.text:0040BC80
.text:0040BC80 loc_40BC80:                             ; CODE XREF: sub_40BB30+22↑j
.text:0040BC80                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040BC83                 mov     eax, [esp+9Ch+lpNumberOfFreeClusters]
.text:0040BC8A                 mov     ecx, [esp+9Ch+lpTotalNumberOfClusters]
.text:0040BC91                 mov     edx, [esp+9Ch+lpBytesPerSector]
.text:0040BC98                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040BC9C                 mov     eax, [esp+9Ch+lpSectorsPerCluster]
.text:0040BCA3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040BCA7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040BCAB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040BCAF                 call    GetDiskFreeSpaceA
.text:0040BCB4                 sub     esp, 14h
.text:0040BCB7                 jmp     loc_40BC35
.text:0040BCB7 sub_40BB30      endp
.text:0040BCB7
.text:0040BCB7 ; ---------------------------------------------------------------------------
.text:0040BCBC                 align 10h
.text:0040BCC0
.text:0040BCC0 ; =============== S U B R O U T I N E =======================================
.text:0040BCC0
.text:0040BCC0
.text:0040BCC0 ; int __cdecl sub_40BCC0(LPCSTR, char *, int)
.text:0040BCC0 sub_40BCC0      proc near               ; CODE XREF: sub_40B410+1A↑p
.text:0040BCC0                                         ; sub_40DB00+104↓p ...
.text:0040BCC0
.text:0040BCC0 var_13C         = dword ptr -13Ch
.text:0040BCC0 lpString1       = dword ptr -138h
.text:0040BCC0 var_134         = dword ptr -134h
.text:0040BCC0 String1         = byte ptr -12Ch
.text:0040BCC0 var_10          = dword ptr -10h
.text:0040BCC0 var_C           = dword ptr -0Ch
.text:0040BCC0 var_8           = dword ptr -8
.text:0040BCC0 var_4           = dword ptr -4
.text:0040BCC0 arg_0           = dword ptr  4
.text:0040BCC0 arg_4           = dword ptr  8
.text:0040BCC0 arg_8           = dword ptr  0Ch
.text:0040BCC0
.text:0040BCC0                 sub     esp, 13Ch
.text:0040BCC6                 mov     [esp+13Ch+var_10], ebx
.text:0040BCCD                 mov     ebx, [esp+13Ch+arg_8]
.text:0040BCD4                 mov     [esp+13Ch+var_C], esi
.text:0040BCDB                 mov     esi, [esp+13Ch+arg_4]
.text:0040BCE2                 mov     [esp+13Ch+var_8], edi
.text:0040BCE9                 mov     edi, [esp+13Ch+arg_0]
.text:0040BCF0                 mov     [esp+13Ch+var_4], ebp
.text:0040BCF7                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040BCFB                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040BCFF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040BD02                 call    sub_40D5F0
.text:0040BD07                 cmp     eax, 0FFFFFFFFh
.text:0040BD0A                 mov     edx, eax
.text:0040BD0C                 jz      short loc_40BD1E
.text:0040BD0E                 mov     ecx, [ebx]
.text:0040BD10                 and     ecx, 0F000h
.text:0040BD16                 cmp     ecx, 0A000h
.text:0040BD1C                 jz      short loc_40BD43
.text:0040BD1E
.text:0040BD1E loc_40BD1E:                             ; CODE XREF: sub_40BCC0+4C↑j
.text:0040BD1E                                         ; sub_40BCC0+A1↓j ...
.text:0040BD1E                 mov     ebx, [esp+13Ch+var_10]
.text:0040BD25                 mov     eax, edx
.text:0040BD27                 mov     esi, [esp+13Ch+var_C]
.text:0040BD2E                 mov     edi, [esp+13Ch+var_8]
.text:0040BD35                 mov     ebp, [esp+13Ch+var_4]
.text:0040BD3C                 add     esp, 13Ch
.text:0040BD42                 retn
.text:0040BD43 ; ---------------------------------------------------------------------------
.text:0040BD43
.text:0040BD43 loc_40BD43:                             ; CODE XREF: sub_40BCC0+5C↑j
.text:0040BD43                 mov     [esp+13Ch+var_134], 104h
.text:0040BD4B                 lea     ebp, [esp+13Ch+String1]
.text:0040BD4F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040BD53                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040BD56                 call    sub_40D510
.text:0040BD5B                 inc     eax
.text:0040BD5C                 mov     edx, 0FFFFFFFFh
.text:0040BD61                 jz      short loc_40BD1E
.text:0040BD63                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040BD67                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040BD6B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040BD6E                 call    sub_40D5F0
.text:0040BD73                 mov     edx, eax
.text:0040BD75                 jmp     short loc_40BD1E
.text:0040BD75 sub_40BCC0      endp
.text:0040BD75
.text:0040BD75 ; ---------------------------------------------------------------------------
.text:0040BD77                 align 10h
.text:0040BD80
.text:0040BD80 ; =============== S U B R O U T I N E =======================================
.text:0040BD80
.text:0040BD80 ; Attributes: thunk
.text:0040BD80
.text:0040BD80 ; int __cdecl j__flushall()
.text:0040BD80 j__flushall     proc near               ; CODE XREF: sub_401B70:loc_40229A↑p
.text:0040BD80                 jmp     _flushall
.text:0040BD80 j__flushall     endp
.text:0040BD80
.text:0040BD80 ; ---------------------------------------------------------------------------
.text:0040BD85                 align 10h
.text:0040BD90
.text:0040BD90 ; =============== S U B R O U T I N E =======================================
.text:0040BD90
.text:0040BD90
.text:0040BD90 ; int __cdecl sub_40BD90(LPCSTR)
.text:0040BD90 sub_40BD90      proc near               ; CODE XREF: sub_4036B0+85↑p
.text:0040BD90                                         ; sub_4036B0+115↑p ...
.text:0040BD90
.text:0040BD90 lpPathName      = dword ptr -0Ch
.text:0040BD90 var_4           = dword ptr -4
.text:0040BD90 arg_0           = dword ptr  4
.text:0040BD90
.text:0040BD90                 sub     esp, 0Ch
.text:0040BD93                 mov     eax, [esp+0Ch+arg_0]
.text:0040BD97                 mov     [esp+0Ch+var_4], ebx
.text:0040BD9B                 test    eax, eax
.text:0040BD9D                 jz      short loc_40BDCF
.text:0040BD9F                 mov     [esp+0Ch+lpPathName], eax ; lpPathName
.text:0040BDA2                 call    SetCurrentDirectoryA
.text:0040BDA7                 sub     esp, 4
.text:0040BDAA                 xor     edx, edx
.text:0040BDAC                 test    eax, eax
.text:0040BDAE                 jz      short loc_40BDBA
.text:0040BDB0
.text:0040BDB0 loc_40BDB0:                             ; CODE XREF: sub_40BD90+3D↓j
.text:0040BDB0                 mov     ebx, [esp+0Ch+var_4]
.text:0040BDB4                 mov     eax, edx
.text:0040BDB6                 add     esp, 0Ch
.text:0040BDB9                 retn
.text:0040BDBA ; ---------------------------------------------------------------------------
.text:0040BDBA
.text:0040BDBA loc_40BDBA:                             ; CODE XREF: sub_40BD90+1E↑j
.text:0040BDBA                 call    sub_40C250
.text:0040BDBF                 mov     ebx, eax
.text:0040BDC1                 call    _errno
.text:0040BDC6                 mov     [eax], ebx
.text:0040BDC8
.text:0040BDC8 loc_40BDC8:                             ; CODE XREF: sub_40BD90+4A↓j
.text:0040BDC8                 mov     edx, 0FFFFFFFFh
.text:0040BDCD                 jmp     short loc_40BDB0
.text:0040BDCF ; ---------------------------------------------------------------------------
.text:0040BDCF
.text:0040BDCF loc_40BDCF:                             ; CODE XREF: sub_40BD90+D↑j
.text:0040BDCF                 call    _errno
.text:0040BDD4                 mov     dword ptr [eax], 16h
.text:0040BDDA                 jmp     short loc_40BDC8
.text:0040BDDA sub_40BD90      endp
.text:0040BDDA
.text:0040BDDA ; ---------------------------------------------------------------------------
.text:0040BDDC                 align 10h
.text:0040BDE0
.text:0040BDE0 ; =============== S U B R O U T I N E =======================================
.text:0040BDE0
.text:0040BDE0
.text:0040BDE0 sub_40BDE0      proc near               ; CODE XREF: sub_404A80+47↑p
.text:0040BDE0
.text:0040BDE0 Size            = dword ptr -1Ch
.text:0040BDE0 var_18          = dword ptr -18h
.text:0040BDE0 Str             = dword ptr -14h
.text:0040BDE0 var_10          = dword ptr -10h
.text:0040BDE0 arg_0           = dword ptr  4
.text:0040BDE0
.text:0040BDE0                 sub     esp, 1Ch
.text:0040BDE3                 mov     eax, ds:dword_414280
.text:0040BDE8                 test    eax, eax
.text:0040BDEA                 jz      short loc_40BE20
.text:0040BDEC
.text:0040BDEC loc_40BDEC:                             ; CODE XREF: sub_40BDE0+5C↓j
.text:0040BDEC                 mov     edx, ds:dword_414290
.text:0040BDF2                 xor     eax, eax
.text:0040BDF4                 test    edx, edx
.text:0040BDF6                 jz      short loc_40BE18
.text:0040BDF8                 mov     [esp+1Ch+var_10], 1000h
.text:0040BE00                 mov     ecx, [esp+1Ch+arg_0]
.text:0040BE04                 mov     [esp+1Ch+Str], edx ; Str
.text:0040BE08                 mov     [esp+1Ch+var_18], offset unk_414260 ; int
.text:0040BE10                 mov     [esp+1Ch+Size], ecx ; int
.text:0040BE13                 call    _getmntent_r
.text:0040BE18
.text:0040BE18 loc_40BE18:                             ; CODE XREF: sub_40BDE0+16↑j
.text:0040BE18                 add     esp, 1Ch
.text:0040BE1B                 retn
.text:0040BE1B ; ---------------------------------------------------------------------------
.text:0040BE1C                 align 10h
.text:0040BE20
.text:0040BE20 loc_40BE20:                             ; CODE XREF: sub_40BDE0+A↑j
.text:0040BE20                 mov     [esp+1Ch+Size], 1000h ; Size
.text:0040BE27                 call    malloc
.text:0040BE2C                 mov     ds:dword_414290, eax
.text:0040BE31                 mov     edx, 1
.text:0040BE36                 mov     ds:dword_414280, edx
.text:0040BE3C                 jmp     short loc_40BDEC
.text:0040BE3C sub_40BDE0      endp
.text:0040BE3C
.text:0040BE3C ; ---------------------------------------------------------------------------
.text:0040BE3E                 align 10h
.text:0040BE40
.text:0040BE40 ; =============== S U B R O U T I N E =======================================
.text:0040BE40
.text:0040BE40 ; Attributes: thunk
.text:0040BE40
.text:0040BE40 ; char *__cdecl j__getcwd(char *DstBuf, int SizeInBytes)
.text:0040BE40 j__getcwd       proc near               ; CODE XREF: sub_406750+16↑p
.text:0040BE40
.text:0040BE40 DstBuf          = dword ptr  4
.text:0040BE40 SizeInBytes     = dword ptr  8
.text:0040BE40
.text:0040BE40                 jmp     _getcwd
.text:0040BE40 j__getcwd       endp
.text:0040BE40
.text:0040BE40 ; ---------------------------------------------------------------------------
.text:0040BE45                 align 10h
.text:0040BE50
.text:0040BE50 ; =============== S U B R O U T I N E =======================================
.text:0040BE50
.text:0040BE50
.text:0040BE50 sub_40BE50      proc near               ; CODE XREF: sub_4090E0+15F↑p
.text:0040BE50                                         ; sub_4090E0+5A3↑p
.text:0040BE50
.text:0040BE50 var_1C          = dword ptr -1Ch
.text:0040BE50 var_18          = dword ptr -18h
.text:0040BE50 var_14          = dword ptr -14h
.text:0040BE50 arg_0           = dword ptr  4
.text:0040BE50 arg_4           = dword ptr  8
.text:0040BE50 arg_8           = dword ptr  0Ch
.text:0040BE50
.text:0040BE50                 push    edi
.text:0040BE51                 push    esi
.text:0040BE52                 push    ebx
.text:0040BE53                 sub     esp, 10h
.text:0040BE56                 mov     edi, [esp+1Ch+arg_8]
.text:0040BE5A                 mov     esi, [esp+1Ch+arg_0]
.text:0040BE5E                 mov     ebx, [esp+1Ch+arg_4]
.text:0040BE62                 cmp     edi, 0Fh
.text:0040BE65                 jbe     short loc_40BEB0
.text:0040BE67                 mov     ecx, esi
.text:0040BE69                 neg     ecx
.text:0040BE6B                 and     ecx, 3
.text:0040BE6E                 sub     edi, ecx
.text:0040BE70                 mov     edx, ecx
.text:0040BE72                 test    ecx, ecx
.text:0040BE74                 jz      short loc_40BE8A
.text:0040BE76                 lea     esi, [esi+0]
.text:0040BE79                 lea     edi, [edi+0]
.text:0040BE80
.text:0040BE80 loc_40BE80:                             ; CODE XREF: sub_40BE50+38↓j
.text:0040BE80                 movzx   ecx, byte ptr [ebx]
.text:0040BE83                 inc     ebx
.text:0040BE84                 mov     [esi], cl
.text:0040BE86                 inc     esi
.text:0040BE87                 dec     edx
.text:0040BE88                 jnz     short loc_40BE80
.text:0040BE8A
.text:0040BE8A loc_40BE8A:                             ; CODE XREF: sub_40BE50+24↑j
.text:0040BE8A                 test    bl, 3
.text:0040BE8D                 jnz     short loc_40BED3
.text:0040BE8F                 mov     [esp+1Ch+var_18], ebx
.text:0040BE93                 mov     edx, edi
.text:0040BE95                 shr     edx, 2
.text:0040BE98                 mov     [esp+1Ch+var_14], edx
.text:0040BE9C                 mov     [esp+1Ch+var_1C], esi
.text:0040BE9F                 call    sub_40D640
.text:0040BEA4
.text:0040BEA4 loc_40BEA4:                             ; CODE XREF: sub_40BE50+98↓j
.text:0040BEA4                 mov     edx, edi
.text:0040BEA6                 and     edx, 0FFFFFFFCh
.text:0040BEA9                 and     edi, 3
.text:0040BEAC                 add     ebx, edx
.text:0040BEAE                 add     esi, edx
.text:0040BEB0
.text:0040BEB0 loc_40BEB0:                             ; CODE XREF: sub_40BE50+15↑j
.text:0040BEB0                 test    edi, edi
.text:0040BEB2                 mov     edx, edi
.text:0040BEB4                 jz      short loc_40BECA
.text:0040BEB6                 lea     esi, [esi+0]
.text:0040BEB9                 lea     edi, [edi+0]
.text:0040BEC0
.text:0040BEC0 loc_40BEC0:                             ; CODE XREF: sub_40BE50+78↓j
.text:0040BEC0                 movzx   ecx, byte ptr [ebx]
.text:0040BEC3                 inc     ebx
.text:0040BEC4                 mov     [esi], cl
.text:0040BEC6                 inc     esi
.text:0040BEC7                 dec     edx
.text:0040BEC8                 jnz     short loc_40BEC0
.text:0040BECA
.text:0040BECA loc_40BECA:                             ; CODE XREF: sub_40BE50+64↑j
.text:0040BECA                 add     esp, 10h
.text:0040BECD                 mov     eax, esi
.text:0040BECF                 pop     ebx
.text:0040BED0                 pop     esi
.text:0040BED1                 pop     edi
.text:0040BED2                 retn
.text:0040BED3 ; ---------------------------------------------------------------------------
.text:0040BED3
.text:0040BED3 loc_40BED3:                             ; CODE XREF: sub_40BE50+3D↑j
.text:0040BED3                 mov     [esp+1Ch+var_18], ebx
.text:0040BED7                 mov     ecx, edi
.text:0040BED9                 shr     ecx, 2
.text:0040BEDC                 mov     [esp+1Ch+var_14], ecx
.text:0040BEE0                 mov     [esp+1Ch+var_1C], esi
.text:0040BEE3                 call    sub_40D740
.text:0040BEE8                 jmp     short loc_40BEA4
.text:0040BEE8 sub_40BE50      endp
.text:0040BEE8
.text:0040BEE8 ; ---------------------------------------------------------------------------
.text:0040BEEA                 align 10h
.text:0040BEF0
.text:0040BEF0 ; =============== S U B R O U T I N E =======================================
.text:0040BEF0
.text:0040BEF0
.text:0040BEF0 ; int __cdecl sub_40BEF0(LPCSTR lpFileName, int)
.text:0040BEF0 sub_40BEF0      proc near               ; CODE XREF: sub_409D60+7F↑p
.text:0040BEF0                                         ; .text:0040AF52↑p ...
.text:0040BEF0
.text:0040BEF0 uMode           = dword ptr -1Ch
.text:0040BEF0 var_10          = dword ptr -10h
.text:0040BEF0 var_C           = dword ptr -0Ch
.text:0040BEF0 var_8           = dword ptr -8
.text:0040BEF0 var_4           = dword ptr -4
.text:0040BEF0 lpFileName      = dword ptr  4
.text:0040BEF0 arg_4           = dword ptr  8
.text:0040BEF0
.text:0040BEF0                 sub     esp, 1Ch
.text:0040BEF3                 mov     [esp+1Ch+var_10], ebx
.text:0040BEF7                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040BEFB                 mov     [esp+1Ch+var_4], ebp
.text:0040BEFF                 xor     ebp, ebp
.text:0040BF01                 test    ebx, ebx
.text:0040BF03                 mov     [esp+1Ch+var_C], esi
.text:0040BF07                 mov     esi, [esp+1Ch+arg_4]
.text:0040BF0B                 mov     [esp+1Ch+var_8], edi
.text:0040BF0F                 jz      short loc_40BF19
.text:0040BF11                 test    esi, 0FFFFFFE8h
.text:0040BF17                 jz      short loc_40BF40
.text:0040BF19
.text:0040BF19 loc_40BF19:                             ; CODE XREF: sub_40BEF0+1F↑j
.text:0040BF19                 call    _errno
.text:0040BF1E                 mov     dword ptr [eax], 16h
.text:0040BF24
.text:0040BF24 loc_40BF24:                             ; CODE XREF: sub_40BEF0+B1↓j
.text:0040BF24                 mov     eax, 0FFFFFFFFh
.text:0040BF29
.text:0040BF29 loc_40BF29:                             ; CODE XREF: sub_40BEF0+86↓j
.text:0040BF29                                         ; sub_40BEF0+A4↓j
.text:0040BF29                 mov     ebx, [esp+1Ch+var_10]
.text:0040BF2D                 mov     esi, [esp+1Ch+var_C]
.text:0040BF31                 mov     edi, [esp+1Ch+var_8]
.text:0040BF35                 mov     ebp, [esp+1Ch+var_4]
.text:0040BF39                 add     esp, 1Ch
.text:0040BF3C                 retn
.text:0040BF3C ; ---------------------------------------------------------------------------
.text:0040BF3D                 align 10h
.text:0040BF40
.text:0040BF40 loc_40BF40:                             ; CODE XREF: sub_40BEF0+27↑j
.text:0040BF40                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040BF47                 call    SetErrorMode
.text:0040BF4C                 sub     esp, 4
.text:0040BF4F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040BF52                 call    GetFileAttributesA
.text:0040BF57                 sub     esp, 4
.text:0040BF5A                 mov     edi, eax
.text:0040BF5C                 cmp     eax, 0FFFFFFFFh
.text:0040BF5F                 jz      short loc_40BFA3
.text:0040BF61
.text:0040BF61 loc_40BF61:                             ; CODE XREF: sub_40BEF0+C6↓j
.text:0040BF61                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040BF68                 call    SetErrorMode
.text:0040BF6D                 sub     esp, 4
.text:0040BF70                 mov     eax, 0FFFFFFFFh
.text:0040BF75                 inc     ebp
.text:0040BF76                 jz      short loc_40BF29
.text:0040BF78                 test    esi, 10h
.text:0040BF7E                 jz      short loc_40BF88
.text:0040BF80                 test    edi, 10h
.text:0040BF86                 jz      short loc_40BF96
.text:0040BF88
.text:0040BF88 loc_40BF88:                             ; CODE XREF: sub_40BEF0+8E↑j
.text:0040BF88                 and     esi, 2
.text:0040BF8B                 jz      short loc_40BF92
.text:0040BF8D                 and     edi, 1
.text:0040BF90                 jnz     short loc_40BF96
.text:0040BF92
.text:0040BF92 loc_40BF92:                             ; CODE XREF: sub_40BEF0+9B↑j
.text:0040BF92                 xor     eax, eax
.text:0040BF94                 jmp     short loc_40BF29
.text:0040BF96 ; ---------------------------------------------------------------------------
.text:0040BF96
.text:0040BF96 loc_40BF96:                             ; CODE XREF: sub_40BEF0+96↑j
.text:0040BF96                                         ; sub_40BEF0+A0↑j
.text:0040BF96                 call    _errno
.text:0040BF9B                 mov     dword ptr [eax], 0Dh
.text:0040BFA1                 jmp     short loc_40BF24
.text:0040BFA3 ; ---------------------------------------------------------------------------
.text:0040BFA3
.text:0040BFA3 loc_40BFA3:                             ; CODE XREF: sub_40BEF0+6F↑j
.text:0040BFA3                 call    sub_40C250
.text:0040BFA8                 mov     ebp, eax
.text:0040BFAA                 call    _errno
.text:0040BFAF                 mov     [eax], ebp
.text:0040BFB1                 mov     ebp, 0FFFFFFFFh
.text:0040BFB6                 jmp     short loc_40BF61
.text:0040BFB6 sub_40BEF0      endp
.text:0040BFB6
.text:0040BFB6 ; ---------------------------------------------------------------------------
.text:0040BFB8                 align 10h
.text:0040BFC0
.text:0040BFC0 ; =============== S U B R O U T I N E =======================================
.text:0040BFC0
.text:0040BFC0 ; Attributes: info_from_lumina
.text:0040BFC0
.text:0040BFC0 ___get_errno    proc near               ; CODE XREF: sub_40C250+B↓p
.text:0040BFC0
.text:0040BFC0 arg_0           = dword ptr  4
.text:0040BFC0
.text:0040BFC0                 mov     eax, [esp+arg_0]
.text:0040BFC4                 cmp     eax, 53h ; 'S'
.text:0040BFC7                 jg      loc_40C0C0
.text:0040BFCD                 cmp     eax, 52h ; 'R'
.text:0040BFD0                 jge     short loc_40C022
.text:0040BFD2                 cmp     eax, 0Fh
.text:0040BFD5                 jz      short loc_40BFF0
.text:0040BFD7                 cmp     eax, 0Fh
.text:0040BFDA                 jg      short loc_40C050
.text:0040BFDC                 cmp     eax, 9
.text:0040BFDF                 jg      short loc_40C030
.text:0040BFE1                 cmp     eax, 7
.text:0040BFE4                 jge     short loc_40C029
.text:0040BFE6                 cmp     eax, 3
.text:0040BFE9                 jg      short loc_40C00A
.text:0040BFEB                 cmp     eax, 2
.text:0040BFEE                 jl      short loc_40C003
.text:0040BFF0
.text:0040BFF0 loc_40BFF0:                             ; CODE XREF: ___get_errno+15↑j
.text:0040BFF0                                         ; ___get_errno+9D↓j ...
.text:0040BFF0                 mov     edx, 2
.text:0040BFF5                 lea     esi, [esi+0]
.text:0040BFF9                 lea     edi, [edi+0]
.text:0040C000
.text:0040C000 loc_40C000:                             ; CODE XREF: ___get_errno+48↓j
.text:0040C000                                         ; ___get_errno+59↓j ...
.text:0040C000                 mov     eax, edx
.text:0040C002                 retn
.text:0040C003 ; ---------------------------------------------------------------------------
.text:0040C003
.text:0040C003 loc_40C003:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040C003                                         ; ___get_errno+78↓j ...
.text:0040C003                 mov     edx, 16h
.text:0040C008                 jmp     short loc_40C000
.text:0040C00A ; ---------------------------------------------------------------------------
.text:0040C00A
.text:0040C00A loc_40C00A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040C00A                 cmp     eax, 5
.text:0040C00D                 jz      short loc_40C022
.text:0040C00F                 cmp     eax, 5
.text:0040C012                 jg      short loc_40C01B
.text:0040C014                 mov     edx, 18h
.text:0040C019                 jmp     short loc_40C000
.text:0040C01B ; ---------------------------------------------------------------------------
.text:0040C01B
.text:0040C01B loc_40C01B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040C01B                                         ; ___get_errno+180↓j
.text:0040C01B                 mov     edx, 9
.text:0040C020                 jmp     short loc_40C000
.text:0040C022 ; ---------------------------------------------------------------------------
.text:0040C022
.text:0040C022 loc_40C022:                             ; CODE XREF: ___get_errno+10↑j
.text:0040C022                                         ; ___get_errno+4D↑j ...
.text:0040C022                 mov     edx, 0Dh
.text:0040C027                 jmp     short loc_40C000
.text:0040C029 ; ---------------------------------------------------------------------------
.text:0040C029
.text:0040C029 loc_40C029:                             ; CODE XREF: ___get_errno+24↑j
.text:0040C029                                         ; ___get_errno+73↓j ...
.text:0040C029                 mov     edx, 0Ch
.text:0040C02E                 jmp     short loc_40C000
.text:0040C030 ; ---------------------------------------------------------------------------
.text:0040C030
.text:0040C030 loc_40C030:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040C030                 cmp     eax, 0Dh
.text:0040C033                 jg      short loc_40C029
.text:0040C035                 cmp     eax, 0Ch
.text:0040C038                 jge     short loc_40C003
.text:0040C03A                 cmp     eax, 0Ah
.text:0040C03D                 mov     edx, 7
.text:0040C042                 jz      short loc_40C000
.text:0040C044                 cmp     eax, 0Bh
.text:0040C047                 jnz     short loc_40C003
.text:0040C049
.text:0040C049 loc_40C049:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040C049                 mov     edx, 8
.text:0040C04E                 jmp     short loc_40C000
.text:0040C050 ; ---------------------------------------------------------------------------
.text:0040C050
.text:0040C050 loc_40C050:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040C050                 cmp     eax, 22h ; '"'
.text:0040C053                 jg      short loc_40C084
.text:0040C055                 cmp     eax, 16h
.text:0040C058                 jge     short loc_40C022
.text:0040C05A                 cmp     eax, 12h
.text:0040C05D                 jz      short loc_40BFF0
.text:0040C05F                 cmp     eax, 12h
.text:0040C062                 jg      short loc_40C075
.text:0040C064                 cmp     eax, 10h
.text:0040C067                 jz      short loc_40C022
.text:0040C069                 mov     edx, 12h
.text:0040C06E                 cmp     eax, 11h
.text:0040C071
.text:0040C071 loc_40C071:                             ; CODE XREF: ___get_errno+172↓j
.text:0040C071                                         ; ___get_errno+24C↓j ...
.text:0040C071                 jnz     short loc_40C003
.text:0040C073                 jmp     short loc_40C000
.text:0040C075 ; ---------------------------------------------------------------------------
.text:0040C075
.text:0040C075 loc_40C075:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040C075                 cmp     eax, 14h
.text:0040C078                 jle     short loc_40C022
.text:0040C07A
.text:0040C07A loc_40C07A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040C07A                 mov     edx, 10h
.text:0040C07F                 jmp     loc_40C000
.text:0040C084 ; ---------------------------------------------------------------------------
.text:0040C084
.text:0040C084 loc_40C084:                             ; CODE XREF: ___get_errno+93↑j
.text:0040C084                 cmp     eax, 41h ; 'A'
.text:0040C087                 jz      short loc_40C022
.text:0040C089                 cmp     eax, 41h ; 'A'
.text:0040C08C                 jg      short loc_40C0A1
.text:0040C08E                 cmp     eax, 24h ; '$'
.text:0040C091                 jz      short loc_40C022
.text:0040C093                 cmp     eax, 35h ; '5'
.text:0040C096                 jnz     loc_40C003
.text:0040C09C                 jmp     loc_40BFF0
.text:0040C0A1 ; ---------------------------------------------------------------------------
.text:0040C0A1
.text:0040C0A1 loc_40C0A1:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040C0A1                 cmp     eax, 43h ; 'C'
.text:0040C0A4                 jz      loc_40BFF0
.text:0040C0AA                 cmp     eax, 50h ; 'P'
.text:0040C0AD                 jnz     loc_40C003
.text:0040C0B3
.text:0040C0B3 loc_40C0B3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040C0B3                 mov     edx, 11h
.text:0040C0B8                 jmp     loc_40C000
.text:0040C0B8 ; ---------------------------------------------------------------------------
.text:0040C0BD                 align 10h
.text:0040C0C0
.text:0040C0C0 loc_40C0C0:                             ; CODE XREF: ___get_errno+7↑j
.text:0040C0C0                 cmp     eax, 0A1h ; '¡'
.text:0040C0C5                 jz      loc_40BFF0
.text:0040C0CB                 cmp     eax, 0A1h ; '¡'
.text:0040C0D0                 jg      loc_40C180
.text:0040C0D6                 cmp     eax, 81h
.text:0040C0DB                 jg      short loc_40C145
.text:0040C0DD                 cmp     eax, 80h ; '€'
.text:0040C0E2                 mov     edx, 0Ah
.text:0040C0E7                 jge     loc_40C000
.text:0040C0ED                 cmp     eax, 6Ch ; 'l'
.text:0040C0F0                 jz      loc_40C022
.text:0040C0F6                 cmp     eax, 6Ch ; 'l'
.text:0040C0F9                 jg      short loc_40C117
.text:0040C0FB                 cmp     eax, 57h ; 'W'
.text:0040C0FE                 jz      loc_40C003
.text:0040C104                 cmp     eax, 59h ; 'Y'
.text:0040C107                 jnz     loc_40C003
.text:0040C10D
.text:0040C10D loc_40C10D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040C10D                                         ; ___get_errno+23C↓j
.text:0040C10D                 mov     edx, 0Bh
.text:0040C112                 jmp     loc_40C000
.text:0040C117 ; ---------------------------------------------------------------------------
.text:0040C117
.text:0040C117 loc_40C117:                             ; CODE XREF: ___get_errno+139↑j
.text:0040C117                 cmp     eax, 70h ; 'p'
.text:0040C11A                 mov     edx, 1Ch
.text:0040C11F                 jz      loc_40C000
.text:0040C125                 cmp     eax, 70h ; 'p'
.text:0040C128                 jg      short loc_40C137
.text:0040C12A                 mov     edx, 20h ; ' '
.text:0040C12F                 cmp     eax, 6Dh ; 'm'
.text:0040C132                 jmp     loc_40C071
.text:0040C137 ; ---------------------------------------------------------------------------
.text:0040C137
.text:0040C137 loc_40C137:                             ; CODE XREF: ___get_errno+168↑j
.text:0040C137                 cmp     eax, 72h ; 'r'
.text:0040C13A
.text:0040C13A loc_40C13A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040C13A                 jnz     loc_40C003
.text:0040C140                 jmp     loc_40C01B
.text:0040C145 ; ---------------------------------------------------------------------------
.text:0040C145
.text:0040C145 loc_40C145:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040C145                 cmp     eax, 84h ; '„'
.text:0040C14A                 jz      loc_40C022
.text:0040C150                 cmp     eax, 84h ; '„'
.text:0040C155                 jg      short loc_40C15E
.text:0040C157                 cmp     eax, 82h ; '‚'
.text:0040C15C                 jmp     short loc_40C13A
.text:0040C15E ; ---------------------------------------------------------------------------
.text:0040C15E
.text:0040C15E loc_40C15E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040C15E                 cmp     eax, 91h ; '‘'
.text:0040C163                 mov     edx, 29h ; ')'
.text:0040C168                 jz      loc_40C000
.text:0040C16E                 cmp     eax, 9Eh ; 'ž'
.text:0040C173
.text:0040C173 loc_40C173:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040C173                 jnz     loc_40C003
.text:0040C179                 jmp     loc_40C022
.text:0040C179 ; ---------------------------------------------------------------------------
.text:0040C17E                 align 10h
.text:0040C180
.text:0040C180 loc_40C180:                             ; CODE XREF: ___get_errno+110↑j
.text:0040C180                 cmp     eax, 0CEh ; 'Î'
.text:0040C185                 jz      loc_40BFF0
.text:0040C18B                 cmp     eax, 0CEh ; 'Î'
.text:0040C190                 jg      short loc_40C1E0
.text:0040C192                 cmp     eax, 0AAh ; 'ª'
.text:0040C197                 jz      loc_40C07A
.text:0040C19D                 cmp     eax, 0AAh ; 'ª'
.text:0040C1A2                 jg      short loc_40C1B6
.text:0040C1A4                 cmp     eax, 0A4h ; '¤'
.text:0040C1A9                 jz      loc_40C10D
.text:0040C1AF                 cmp     eax, 0A7h ; '§'
.text:0040C1B4                 jmp     short loc_40C173
.text:0040C1B6 ; ---------------------------------------------------------------------------
.text:0040C1B6
.text:0040C1B6 loc_40C1B6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040C1B6                 cmp     eax, 0B7h ; '·'
.text:0040C1BB                 jz      loc_40C0B3
.text:0040C1C1                 cmp     eax, 0B7h ; '·'
.text:0040C1C6                 jl      loc_40C003
.text:0040C1CC                 sub     eax, 0BCh ; '¼'
.text:0040C1D1                 cmp     eax, 0Eh
.text:0040C1D4                 ja      loc_40C003
.text:0040C1DA                 jmp     loc_40C049
.text:0040C1DA ; ---------------------------------------------------------------------------
.text:0040C1DF                 align 10h
.text:0040C1E0
.text:0040C1E0 loc_40C1E0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040C1E0                 cmp     eax, 46Bh
.text:0040C1E5                 mov     edx, 24h ; '$'
.text:0040C1EA                 jz      loc_40C000
.text:0040C1F0                 cmp     eax, 46Bh
.text:0040C1F5                 jg      short loc_40C211
.text:0040C1F7                 cmp     eax, 0D7h ; '×'
.text:0040C1FC                 jz      loc_40C10D
.text:0040C202                 mov     edx, 5
.text:0040C207                 cmp     eax, 45Dh
.text:0040C20C                 jmp     loc_40C071
.text:0040C211 ; ---------------------------------------------------------------------------
.text:0040C211
.text:0040C211 loc_40C211:                             ; CODE XREF: ___get_errno+235↑j
.text:0040C211                 cmp     eax, 4D5h
.text:0040C216                 mov     edx, 4
.text:0040C21B                 jz      loc_40C000
.text:0040C221                 cmp     eax, 4D5h
.text:0040C226                 jg      short loc_40C237
.text:0040C228                 mov     edx, 13h
.text:0040C22D                 cmp     eax, 4B0h
.text:0040C232                 jmp     loc_40C071
.text:0040C237 ; ---------------------------------------------------------------------------
.text:0040C237
.text:0040C237 loc_40C237:                             ; CODE XREF: ___get_errno+266↑j
.text:0040C237                 cmp     eax, 718h
.text:0040C23C                 jnz     loc_40C003
.text:0040C242                 jmp     loc_40C029
.text:0040C242 ___get_errno    endp
.text:0040C242
.text:0040C242 ; ---------------------------------------------------------------------------
.text:0040C247                 align 10h
.text:0040C250
.text:0040C250 ; =============== S U B R O U T I N E =======================================
.text:0040C250
.text:0040C250
.text:0040C250 sub_40C250      proc near               ; CODE XREF: sub_409D60:loc_409E5A↑p
.text:0040C250                                         ; sub_40B110:loc_40B178↑p ...
.text:0040C250
.text:0040C250 var_C           = dword ptr -0Ch
.text:0040C250
.text:0040C250                 sub     esp, 0Ch
.text:0040C253                 call    GetLastError
.text:0040C258                 mov     [esp+0Ch+var_C], eax
.text:0040C25B                 call    ___get_errno
.text:0040C260                 add     esp, 0Ch
.text:0040C263                 retn
.text:0040C263 sub_40C250      endp
.text:0040C263
.text:0040C263 ; ---------------------------------------------------------------------------
.text:0040C264                 align 10h
.text:0040C270
.text:0040C270 ; =============== S U B R O U T I N E =======================================
.text:0040C270
.text:0040C270 ; Attributes: noreturn
.text:0040C270
.text:0040C270 sub_40C270      proc near               ; CODE XREF: .text:0040A389↑p
.text:0040C270                                         ; sub_40C270↓j
.text:0040C270                 jmp     short sub_40C270
.text:0040C270 sub_40C270      endp
.text:0040C270
.text:0040C270 ; ---------------------------------------------------------------------------
.text:0040C272                 align 10h
.text:0040C280
.text:0040C280 ; =============== S U B R O U T I N E =======================================
.text:0040C280
.text:0040C280
.text:0040C280 sub_40C280      proc near               ; CODE XREF: _getmntent_r+235↑p
.text:0040C280
.text:0040C280 FileHandle      = dword ptr -1Ch
.text:0040C280 dwFileOffsetLow = dword ptr -18h
.text:0040C280 dwFileOffsetHigh= dword ptr -14h
.text:0040C280 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040C280 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040C280 var_8           = dword ptr -8
.text:0040C280 var_4           = dword ptr -4
.text:0040C280 arg_0           = dword ptr  4
.text:0040C280
.text:0040C280                 sub     esp, 1Ch
.text:0040C283                 mov     edx, [esp+1Ch+arg_0]
.text:0040C287                 mov     [esp+1Ch+var_4], esi
.text:0040C28B                 mov     [esp+1Ch+var_8], ebx
.text:0040C28F                 mov     ebx, [edx+10h]
.text:0040C292                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040C295                 call    _get_osfhandle
.text:0040C29A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040C29D                 mov     esi, eax
.text:0040C29F                 call    _filelengthi64
.text:0040C2A4                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040C2A8                 cdq
.text:0040C2A9                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040C2AC                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040C2B0                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040C2B8                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040C2C0                 call    UnlockFile
.text:0040C2C5                 sub     esp, 14h
.text:0040C2C8                 mov     ebx, [esp+1Ch+var_8]
.text:0040C2CC                 mov     esi, [esp+1Ch+var_4]
.text:0040C2D0                 add     esp, 1Ch
.text:0040C2D3                 retn
.text:0040C2D3 sub_40C280      endp
.text:0040C2D3
.text:0040C2D3 ; ---------------------------------------------------------------------------
.text:0040C2D4                 align 10h
.text:0040C2E0
.text:0040C2E0 ; =============== S U B R O U T I N E =======================================
.text:0040C2E0
.text:0040C2E0
.text:0040C2E0 ; int __cdecl sub_40C2E0(int, char *Control)
.text:0040C2E0 sub_40C2E0      proc near               ; CODE XREF: _getmntent_r+F6↑p
.text:0040C2E0                                         ; _getmntent_r+146↑p ...
.text:0040C2E0
.text:0040C2E0 Str             = dword ptr -1Ch
.text:0040C2E0 Val             = dword ptr -18h
.text:0040C2E0 var_8           = dword ptr -8
.text:0040C2E0 var_4           = dword ptr -4
.text:0040C2E0 arg_0           = dword ptr  4
.text:0040C2E0 Control         = dword ptr  8
.text:0040C2E0
.text:0040C2E0                 sub     esp, 1Ch
.text:0040C2E3                 xor     eax, eax
.text:0040C2E5                 mov     edx, [esp+1Ch+Control]
.text:0040C2E9                 mov     [esp+1Ch+var_4], esi
.text:0040C2ED                 mov     esi, [esp+1Ch+arg_0]
.text:0040C2F1                 mov     [esp+1Ch+var_8], ebx
.text:0040C2F5                 mov     ebx, [esi]
.text:0040C2F7                 test    ebx, ebx
.text:0040C2F9                 jz      short loc_40C328
.text:0040C2FB                 movzx   eax, byte ptr [edx]
.text:0040C2FE                 test    al, al
.text:0040C300                 jz      short loc_40C320
.text:0040C302                 cmp     byte ptr [edx+1], 0
.text:0040C306                 jnz     short loc_40C360
.text:0040C308                 movzx   ecx, byte ptr [ebx]
.text:0040C30B                 mov     edx, ebx
.text:0040C30D                 cmp     cl, al
.text:0040C30F                 jz      short loc_40C352
.text:0040C311                 test    cl, cl
.text:0040C313                 jnz     short loc_40C334
.text:0040C315                 lea     esi, [esi+0]
.text:0040C319                 lea     edi, [edi+0]
.text:0040C320
.text:0040C320 loc_40C320:                             ; CODE XREF: sub_40C2E0+20↑j
.text:0040C320                                         ; sub_40C2E0+74↓j
.text:0040C320                 mov     dword ptr [esi], 0
.text:0040C326
.text:0040C326 loc_40C326:                             ; CODE XREF: sub_40C2E0+7C↓j
.text:0040C326                 mov     eax, ebx
.text:0040C328
.text:0040C328 loc_40C328:                             ; CODE XREF: sub_40C2E0+19↑j
.text:0040C328                 mov     ebx, [esp+1Ch+var_8]
.text:0040C32C                 mov     esi, [esp+1Ch+var_4]
.text:0040C330                 add     esp, 1Ch
.text:0040C333                 retn
.text:0040C334 ; ---------------------------------------------------------------------------
.text:0040C334
.text:0040C334 loc_40C334:                             ; CODE XREF: sub_40C2E0+33↑j
.text:0040C334                 movsx   edx, al
.text:0040C337                 mov     [esp+1Ch+Val], edx ; Val
.text:0040C33B                 lea     edx, [ebx+1]
.text:0040C33E                 mov     [esp+1Ch+Str], edx ; Str
.text:0040C341                 call    strchr
.text:0040C346                 lea     esi, [esi+0]
.text:0040C349                 lea     edi, [edi+0]
.text:0040C350
.text:0040C350 loc_40C350:                             ; CODE XREF: sub_40C2E0+8C↓j
.text:0040C350                 mov     edx, eax
.text:0040C352
.text:0040C352 loc_40C352:                             ; CODE XREF: sub_40C2E0+2F↑j
.text:0040C352                 test    edx, edx
.text:0040C354                 jz      short loc_40C320
.text:0040C356                 mov     byte ptr [edx], 0
.text:0040C359                 inc     edx
.text:0040C35A                 mov     [esi], edx
.text:0040C35C                 jmp     short loc_40C326
.text:0040C35C ; ---------------------------------------------------------------------------
.text:0040C35E                 align 10h
.text:0040C360
.text:0040C360 loc_40C360:                             ; CODE XREF: sub_40C2E0+26↑j
.text:0040C360                 mov     [esp+1Ch+Val], edx ; Control
.text:0040C364                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040C367                 call    strpbrk
.text:0040C36C                 jmp     short loc_40C350
.text:0040C36C sub_40C2E0      endp
.text:0040C36C
.text:0040C36C ; ---------------------------------------------------------------------------
.text:0040C36E                 align 10h
.text:0040C370 ; const char aTmpf[]
.text:0040C370 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40C380+20↓o
.text:0040C375 ; const char aWBd[]
.text:0040C375 aWBd            db 'w+bD',0             ; DATA XREF: sub_40C380+5E↓o
.text:0040C37A                 align 10h
.text:0040C380
.text:0040C380 ; =============== S U B R O U T I N E =======================================
.text:0040C380
.text:0040C380
.text:0040C380 sub_40C380      proc near               ; CODE XREF: sub_40AA30+93↑p
.text:0040C380
.text:0040C380 FileHandle      = dword ptr -13Ch
.text:0040C380 Format          = dword ptr -138h
.text:0040C380 var_134         = dword ptr -134h
.text:0040C380 var_130         = dword ptr -130h
.text:0040C380 var_12C         = dword ptr -12Ch
.text:0040C380 FileName        = byte ptr -11Ch
.text:0040C380 var_8           = dword ptr -8
.text:0040C380 var_4           = dword ptr -4
.text:0040C380
.text:0040C380                 sub     esp, 13Ch
.text:0040C386                 mov     [esp+13Ch+var_8], ebx
.text:0040C38D                 lea     ebx, [esp+13Ch+FileName]
.text:0040C391                 mov     [esp+13Ch+var_4], esi
.text:0040C398                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040C3A0                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040C3A8                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040C3B0                 mov     [esp+13Ch+Format], 104h ; int
.text:0040C3B8                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040C3BB                 call    sub_40DB00
.text:0040C3C0                 xor     edx, edx
.text:0040C3C2                 test    eax, eax
.text:0040C3C4                 jnz     short loc_40C3F6
.text:0040C3C6                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040C3C9                 mov     [esp+13Ch+Format], 0 ; int
.text:0040C3D1                 call    sub_40DE80
.text:0040C3D6                 xor     edx, edx
.text:0040C3D8                 mov     ebx, eax
.text:0040C3DA                 test    eax, eax
.text:0040C3DC                 js      short loc_40C3F6
.text:0040C3DE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040C3E6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040C3E9                 call    _fdopen
.text:0040C3EE                 test    eax, eax
.text:0040C3F0                 mov     esi, eax
.text:0040C3F2                 jz      short loc_40C40D
.text:0040C3F4
.text:0040C3F4 loc_40C3F4:                             ; CODE XREF: sub_40C380+95↓j
.text:0040C3F4                 mov     edx, esi
.text:0040C3F6
.text:0040C3F6 loc_40C3F6:                             ; CODE XREF: sub_40C380+44↑j
.text:0040C3F6                                         ; sub_40C380+5C↑j
.text:0040C3F6                 mov     ebx, [esp+13Ch+var_8]
.text:0040C3FD                 mov     eax, edx
.text:0040C3FF                 mov     esi, [esp+13Ch+var_4]
.text:0040C406                 add     esp, 13Ch
.text:0040C40C                 retn
.text:0040C40D ; ---------------------------------------------------------------------------
.text:0040C40D
.text:0040C40D loc_40C40D:                             ; CODE XREF: sub_40C380+72↑j
.text:0040C40D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040C410                 call    _close_0
.text:0040C415                 jmp     short loc_40C3F4
.text:0040C415 sub_40C380      endp
.text:0040C415
.text:0040C415 ; ---------------------------------------------------------------------------
.text:0040C417                 align 10h
.text:0040C420 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040C63F↓o
.text:0040C42C aLu             db '%lu',0              ; DATA XREF: .text:0040C64F↓o
.text:0040C430 asc_40C430      db ' ',0                ; DATA XREF: .text:loc_40C738↓o
.text:0040C432                 align 10h
.text:0040C440 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040C440                                         ; DATA XREF: .text:0040C76F↓o
.text:0040C460 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40C77D↓o
.text:0040C46C aServer         db ' Server',0          ; DATA XREF: .text:0040C7A6↓o
.text:0040C46C                                         ; .text:loc_40C91E↓o
.text:0040C474 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40C7B8↓o
.text:0040C485 aDatacenterServ db ' Datacenter Server',0
.text:0040C485                                         ; DATA XREF: .text:loc_40C7C2↓o
.text:0040C498 aStandardEditio db ' Standard Edition',0
.text:0040C498                                         ; DATA XREF: .text:0040C7EA↓o
.text:0040C4AA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40C7F4↓o
.text:0040C4B7 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040C4B7                                         ; DATA XREF: .text:loc_40C7FE↓o
.text:0040C4CB aDatacenterEdit db ' Datacenter Edition',0
.text:0040C4CB                                         ; DATA XREF: .text:loc_40C808↓o
.text:0040C4DF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040C81B↓o
.text:0040C4ED aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40C825↓o
.text:0040C4ED                                         ; .text:loc_40C930↓o
.text:0040C4FB                 align 10h
.text:0040C500 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040C500                                         ; DATA XREF: .text:0040C852↓o
.text:0040C530 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040C899↓o
.text:0040C53C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040C8D4↓o
.text:0040C542 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040C8EB↓o
.text:0040C54B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040C902↓o
.text:0040C554                 align 10h
.text:0040C560 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040C560                                         ; DATA XREF: .text:0040CA77↓o
.text:0040C583                 align 20h
.text:0040C5A0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040C5A0                                         ; DATA XREF: .text:0040CAD6↓o
.text:0040C5C6 ; ---------------------------------------------------------------------------
.text:0040C5C6
.text:0040C5C6 loc_40C5C6:                             ; DATA XREF: .text:loc_40CB41↓o
.text:0040C5C6                 and     [ebx+45h], dl
.text:0040C5C9                 add     [eax], ah
.text:0040C5CB                 push    ebx
.text:0040C5CC                 push    eax
.text:0040C5CD                 xor     [eax], eax
.text:0040C5CF
.text:0040C5CF loc_40C5CF:                             ; DATA XREF: .text:loc_40CBBB↓o
.text:0040C5CF                 and     [edi+53h], cl
.text:0040C5D2                 push    edx
.text:0040C5D3                 xor     al, [eax]
.text:0040C5D5                 lea     esi, [esi+0]
.text:0040C5D9                 lea     edi, [edi+0]
.text:0040C5E0                 push    edi
.text:0040C5E1                 push    esi
.text:0040C5E2                 push    ebx
.text:0040C5E3                 sub     esp, 130h
.text:0040C5E9                 mov     ebx, [esp+140h]
.text:0040C5F0                 call    sub_40CCF0
.text:0040C5F5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040C5FA                 cmp     eax, 1
.text:0040C5FD                 jz      loc_40CAA0
.text:0040C603                 cmp     eax, 1
.text:0040C606                 jb      loc_40CA76
.text:0040C60C                 cmp     eax, 2
.text:0040C60F                 jz      loc_40C6C0
.text:0040C615                 cmp     eax, 3
.text:0040C618                 jz      short loc_40C67F
.text:0040C61A                 lea     esi, [esi+0]
.text:0040C620
.text:0040C620 loc_40C620:                             ; CODE XREF: .text:0040C6B5↓j
.text:0040C620                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040C626                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040C62C
.text:0040C62C loc_40C62C:                             ; CODE XREF: .text:0040CABF↓j
.text:0040C62C                 mov     [esp+10h], edx
.text:0040C630                 mov     ebx, [esp+144h]
.text:0040C637                 mov     [esp+0Ch], ecx
.text:0040C63B                 mov     [esp+8], eax
.text:0040C63F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040C647                 mov     [esp], ebx
.text:0040C64A                 call    sprintf
.text:0040C64F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040C657                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040C65D                 mov     ecx, [esp+148h]
.text:0040C664                 mov     [esp+8], edi
.text:0040C668                 mov     [esp], ecx
.text:0040C66B                 call    sprintf
.text:0040C670                 mov     eax, 1
.text:0040C675
.text:0040C675 loc_40C675:                             ; CODE XREF: .text:0040C86F↓j
.text:0040C675                                         ; .text:0040C8BC↓j
.text:0040C675                 add     esp, 130h
.text:0040C67B                 pop     ebx
.text:0040C67C                 pop     esi
.text:0040C67D                 pop     edi
.text:0040C67E                 retn
.text:0040C67F ; ---------------------------------------------------------------------------
.text:0040C67F
.text:0040C67F loc_40C67F:                             ; CODE XREF: .text:0040C618↑j
.text:0040C67F                 mov     dword ptr [ebx], 7263694Dh
.text:0040C685                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C68C                 mov     dword ptr [ebx+8], 69572074h
.text:0040C693                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C69A                 mov     dword ptr [ebx+10h], 45432073h
.text:0040C6A1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040C6A7                 mov     esi, esi
.text:0040C6A9                 lea     edi, [edi+0]
.text:0040C6B0
.text:0040C6B0 loc_40C6B0:                             ; CODE XREF: .text:0040C758↓j
.text:0040C6B0                                         ; .text:0040CA99↓j ...
.text:0040C6B0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040C6B5                 jmp     loc_40C620
.text:0040C6B5 ; ---------------------------------------------------------------------------
.text:0040C6BA                 align 10h
.text:0040C6C0
.text:0040C6C0 loc_40C6C0:                             ; CODE XREF: .text:0040C60F↑j
.text:0040C6C0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040C6C6                 cmp     edx, 3
.text:0040C6C9                 mov     eax, edx
.text:0040C6CB                 jz      loc_40CA35
.text:0040C6D1
.text:0040C6D1 loc_40C6D1:                             ; CODE XREF: .text:0040CA3C↓j
.text:0040C6D1                 cmp     eax, 4
.text:0040C6D4                 jz      loc_40C9F5
.text:0040C6DA
.text:0040C6DA loc_40C6DA:                             ; CODE XREF: .text:0040C9FD↓j
.text:0040C6DA                 cmp     eax, 4
.text:0040C6DD                 ja      loc_40C942
.text:0040C6E3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040C6E9                 test    ecx, ecx
.text:0040C6EB                 jnz     loc_40C942
.text:0040C6F1                 mov     dword ptr [ebx], 7263694Dh
.text:0040C6F7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C6FE                 mov     dword ptr [ebx+8], 69572074h
.text:0040C705                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C70C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040C713
.text:0040C713 loc_40C713:                             ; CODE XREF: .text:0040C9B5↓j
.text:0040C713                 mov     byte ptr [ebx+14h], 0
.text:0040C717
.text:0040C717 loc_40C717:                             ; CODE XREF: .text:0040C945↓j
.text:0040C717                                         ; .text:0040C95C↓j ...
.text:0040C717                 mov     esi, dword_413070
.text:0040C71D                 test    esi, esi
.text:0040C71F                 jz      loc_40C832
.text:0040C725                 movzx   eax, ds:byte_41434A
.text:0040C72C                 cmp     al, 1
.text:0040C72E                 jz      loc_40C812
.text:0040C734                 cmp     al, 3
.text:0040C736                 jz      short loc_40C75D
.text:0040C738
.text:0040C738 loc_40C738:                             ; CODE XREF: .text:0040C77B↓j
.text:0040C738                                         ; .text:0040C7B6↓j ...
.text:0040C738                 mov     dword ptr [esp+4], offset asc_40C430 ; " "
.text:0040C740                 mov     [esp], ebx
.text:0040C743                 call    strcat
.text:0040C748                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040C750                 mov     [esp], ebx
.text:0040C753                 call    strcat
.text:0040C758                 jmp     loc_40C6B0
.text:0040C75D ; ---------------------------------------------------------------------------
.text:0040C75D
.text:0040C75D loc_40C75D:                             ; CODE XREF: .text:0040C736↑j
.text:0040C75D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040C764                 jz      short loc_40C786
.text:0040C766
.text:0040C766 loc_40C766:                             ; CODE XREF: .text:0040C792↓j
.text:0040C766                 test    byte ptr ds:word_414348, 2
.text:0040C76D                 jz      short loc_40C77D
.text:0040C76F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040C776
.text:0040C776 loc_40C776:                             ; CODE XREF: .text:0040C784↓j
.text:0040C776                 call    printf
.text:0040C77B                 jmp     short loc_40C738
.text:0040C77D ; ---------------------------------------------------------------------------
.text:0040C77D
.text:0040C77D loc_40C77D:                             ; CODE XREF: .text:0040C76D↑j
.text:0040C77D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040C784                 jmp     short loc_40C776
.text:0040C786 ; ---------------------------------------------------------------------------
.text:0040C786
.text:0040C786 loc_40C786:                             ; CODE XREF: .text:0040C764↑j
.text:0040C786                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040C78B                 cmp     eax, 2
.text:0040C78E                 jz      short loc_40C7D0
.text:0040C790                 test    eax, eax
.text:0040C792                 jnz     short loc_40C766
.text:0040C794                 cmp     byte ptr ds:word_414348, 0
.text:0040C79B                 js      short loc_40C7C2
.text:0040C79D                 test    byte ptr ds:word_414348, 2
.text:0040C7A4                 jnz     short loc_40C7B8
.text:0040C7A6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040C7AE
.text:0040C7AE loc_40C7AE:                             ; CODE XREF: .text:0040C7C0↓j
.text:0040C7AE                                         ; .text:0040C7CA↓j ...
.text:0040C7AE                 mov     [esp], ebx
.text:0040C7B1                 call    strcat
.text:0040C7B6                 jmp     short loc_40C738
.text:0040C7B8 ; ---------------------------------------------------------------------------
.text:0040C7B8
.text:0040C7B8 loc_40C7B8:                             ; CODE XREF: .text:0040C7A4↑j
.text:0040C7B8                                         ; .text:0040C919↓j
.text:0040C7B8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040C7C0                 jmp     short loc_40C7AE
.text:0040C7C2 ; ---------------------------------------------------------------------------
.text:0040C7C2
.text:0040C7C2 loc_40C7C2:                             ; CODE XREF: .text:0040C79B↑j
.text:0040C7C2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040C7CA                 jmp     short loc_40C7AE
.text:0040C7CA ; ---------------------------------------------------------------------------
.text:0040C7CC                 align 10h
.text:0040C7D0
.text:0040C7D0 loc_40C7D0:                             ; CODE XREF: .text:0040C78E↑j
.text:0040C7D0                 cmp     byte ptr ds:word_414348, 0
.text:0040C7D7                 js      short loc_40C808
.text:0040C7D9                 movzx   eax, ds:word_414348
.text:0040C7E0                 test    al, 2
.text:0040C7E2                 jnz     short loc_40C7FE
.text:0040C7E4                 cmp     ax, 400h
.text:0040C7E8                 jz      short loc_40C7F4
.text:0040C7EA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040C7F2                 jmp     short loc_40C7AE
.text:0040C7F4 ; ---------------------------------------------------------------------------
.text:0040C7F4
.text:0040C7F4 loc_40C7F4:                             ; CODE XREF: .text:0040C7E8↑j
.text:0040C7F4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040C7FC                 jmp     short loc_40C7AE
.text:0040C7FE ; ---------------------------------------------------------------------------
.text:0040C7FE
.text:0040C7FE loc_40C7FE:                             ; CODE XREF: .text:0040C7E2↑j
.text:0040C7FE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040C806                 jmp     short loc_40C7AE
.text:0040C808 ; ---------------------------------------------------------------------------
.text:0040C808
.text:0040C808 loc_40C808:                             ; CODE XREF: .text:0040C7D7↑j
.text:0040C808                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040C810                 jmp     short loc_40C7AE
.text:0040C812 ; ---------------------------------------------------------------------------
.text:0040C812
.text:0040C812 loc_40C812:                             ; CODE XREF: .text:0040C72E↑j
.text:0040C812                 test    byte ptr ds:word_414348+1, 2
.text:0040C819                 jz      short loc_40C825
.text:0040C81B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040C823                 jmp     short loc_40C7AE
.text:0040C825 ; ---------------------------------------------------------------------------
.text:0040C825
.text:0040C825 loc_40C825:                             ; CODE XREF: .text:0040C819↑j
.text:0040C825                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040C82D                 jmp     loc_40C7AE
.text:0040C832 ; ---------------------------------------------------------------------------
.text:0040C832
.text:0040C832 loc_40C832:                             ; CODE XREF: .text:0040C71F↑j
.text:0040C832                 mov     dword ptr [esp+28h], 0FFh
.text:0040C83A                 lea     edx, [esp+2Ch]
.text:0040C83E                 mov     [esp+10h], edx
.text:0040C842                 mov     dword ptr [esp+0Ch], 1
.text:0040C84A                 mov     dword ptr [esp+8], 0
.text:0040C852                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040C85A                 mov     dword ptr [esp], 80000002h
.text:0040C861                 call    RegOpenKeyExA
.text:0040C866                 mov     edi, eax
.text:0040C868                 sub     esp, 14h
.text:0040C86B                 xor     eax, eax
.text:0040C86D                 test    edi, edi
.text:0040C86F                 jnz     loc_40C675
.text:0040C875                 mov     dword ptr [esp+0Ch], 0
.text:0040C87D                 mov     edi, [esp+2Ch]
.text:0040C881                 lea     esi, [esp+28h]
.text:0040C885                 mov     [esp+14h], esi
.text:0040C889                 lea     esi, [esp+30h]
.text:0040C88D                 mov     [esp+10h], esi
.text:0040C891                 mov     dword ptr [esp+8], 0
.text:0040C899                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040C8A1                 mov     [esp], edi
.text:0040C8A4                 call    RegQueryValueExA
.text:0040C8A9                 sub     esp, 18h
.text:0040C8AC                 test    eax, eax
.text:0040C8AE                 jnz     short loc_40C8BA
.text:0040C8B0                 cmp     dword ptr [esp+28h], 0FFh
.text:0040C8B8                 jbe     short loc_40C8C1
.text:0040C8BA
.text:0040C8BA loc_40C8BA:                             ; CODE XREF: .text:0040C8AE↑j
.text:0040C8BA                 xor     eax, eax
.text:0040C8BC                 jmp     loc_40C675
.text:0040C8C1 ; ---------------------------------------------------------------------------
.text:0040C8C1
.text:0040C8C1 loc_40C8C1:                             ; CODE XREF: .text:0040C8B8↑j
.text:0040C8C1                 mov     edx, [esp+2Ch]
.text:0040C8C5                 mov     [esp], edx
.text:0040C8C8                 call    RegCloseKey
.text:0040C8CD                 sub     esp, 4
.text:0040C8D0                 mov     [esp+4], esi
.text:0040C8D4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040C8DB                 call    lstrcmpiA
.text:0040C8E0                 sub     esp, 8
.text:0040C8E3                 test    eax, eax
.text:0040C8E5                 jz      short loc_40C930
.text:0040C8E7
.text:0040C8E7 loc_40C8E7:                             ; CODE XREF: .text:0040C940↓j
.text:0040C8E7                 mov     [esp+4], esi
.text:0040C8EB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040C8F2                 call    lstrcmpiA
.text:0040C8F7                 sub     esp, 8
.text:0040C8FA                 test    eax, eax
.text:0040C8FC                 jz      short loc_40C91E
.text:0040C8FE
.text:0040C8FE loc_40C8FE:                             ; CODE XREF: .text:0040C92E↓j
.text:0040C8FE                 mov     [esp+4], esi
.text:0040C902                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040C909                 call    lstrcmpiA
.text:0040C90E                 sub     esp, 8
.text:0040C911                 test    eax, eax
.text:0040C913                 jnz     loc_40C738
.text:0040C919                 jmp     loc_40C7B8
.text:0040C91E ; ---------------------------------------------------------------------------
.text:0040C91E
.text:0040C91E loc_40C91E:                             ; CODE XREF: .text:0040C8FC↑j
.text:0040C91E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040C926                 mov     [esp], ebx
.text:0040C929                 call    strcat
.text:0040C92E                 jmp     short loc_40C8FE
.text:0040C930 ; ---------------------------------------------------------------------------
.text:0040C930
.text:0040C930 loc_40C930:                             ; CODE XREF: .text:0040C8E5↑j
.text:0040C930                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040C938                 mov     [esp], ebx
.text:0040C93B                 call    strcat
.text:0040C940                 jmp     short loc_40C8E7
.text:0040C942 ; ---------------------------------------------------------------------------
.text:0040C942
.text:0040C942 loc_40C942:                             ; CODE XREF: .text:0040C6DD↑j
.text:0040C942                                         ; .text:0040C6EB↑j
.text:0040C942                 cmp     eax, 5
.text:0040C945                 jnz     loc_40C717
.text:0040C94B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040C950                 cmp     eax, 2
.text:0040C953                 jz      short loc_40C9BA
.text:0040C955                 cmp     eax, 1
.text:0040C958                 jz      short loc_40C993
.text:0040C95A                 test    eax, eax
.text:0040C95C                 jnz     loc_40C717
.text:0040C962                 mov     dword ptr [ebx], 7263694Dh
.text:0040C968                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C96F                 mov     dword ptr [ebx+8], 69572074h
.text:0040C976                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C97D                 mov     dword ptr [ebx+10h], 30322073h
.text:0040C984                 mov     word ptr [ebx+14h], 3030h
.text:0040C98A                 mov     byte ptr [ebx+16h], 0
.text:0040C98E                 jmp     loc_40C717
.text:0040C993 ; ---------------------------------------------------------------------------
.text:0040C993
.text:0040C993 loc_40C993:                             ; CODE XREF: .text:0040C958↑j
.text:0040C993                 mov     dword ptr [ebx], 7263694Dh
.text:0040C999                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C9A0                 mov     dword ptr [ebx+8], 69572074h
.text:0040C9A7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C9AE                 mov     dword ptr [ebx+10h], 50582073h
.text:0040C9B5                 jmp     loc_40C713
.text:0040C9BA ; ---------------------------------------------------------------------------
.text:0040C9BA
.text:0040C9BA loc_40C9BA:                             ; CODE XREF: .text:0040C953↑j
.text:0040C9BA                 mov     dword ptr [ebx], 7263694Dh
.text:0040C9C0                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C9C7                 mov     dword ptr [ebx+8], 69572074h
.text:0040C9CE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C9D5                 mov     dword ptr [ebx+10h], 65532073h
.text:0040C9DC                 mov     dword ptr [ebx+14h], 72657672h
.text:0040C9E3                 mov     dword ptr [ebx+18h], 30303220h
.text:0040C9EA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040C9F0                 jmp     loc_40C717
.text:0040C9F5 ; ---------------------------------------------------------------------------
.text:0040C9F5
.text:0040C9F5 loc_40C9F5:                             ; CODE XREF: .text:0040C6D4↑j
.text:0040C9F5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040C9FB                 test    edx, edx
.text:0040C9FD                 jnz     loc_40C6DA
.text:0040CA03                 mov     dword ptr [ebx], 7263694Dh
.text:0040CA09                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040CA10                 mov     dword ptr [ebx+8], 69572074h
.text:0040CA17                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040CA1E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040CA25                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040CA2C                 mov     byte ptr [ebx+18h], 0
.text:0040CA30                 jmp     loc_40C717
.text:0040CA35 ; ---------------------------------------------------------------------------
.text:0040CA35
.text:0040CA35 loc_40CA35:                             ; CODE XREF: .text:0040C6CB↑j
.text:0040CA35                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040CA3C                 jnz     loc_40C6D1
.text:0040CA42                 mov     dword ptr [ebx], 7263694Dh
.text:0040CA48                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040CA4F                 mov     dword ptr [ebx+8], 69572074h
.text:0040CA56                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040CA5D                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040CA64                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040CA6B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040CA71                 jmp     loc_40C717
.text:0040CA76 ; ---------------------------------------------------------------------------
.text:0040CA76
.text:0040CA76 loc_40CA76:                             ; CODE XREF: .text:0040C606↑j
.text:0040CA76                 cld
.text:0040CA77                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040CA7C                 mov     ecx, 8
.text:0040CA81                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040CA88                 mov     edi, ebx
.text:0040CA8A                 rep movsd
.text:0040CA8C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040CA93                 mov     [edi+2], dl
.text:0040CA96                 mov     [edi], si
.text:0040CA99                 jmp     loc_40C6B0
.text:0040CA99 ; ---------------------------------------------------------------------------
.text:0040CA9E                 align 10h
.text:0040CAA0
.text:0040CAA0 loc_40CAA0:                             ; CODE XREF: .text:0040C5FD↑j
.text:0040CAA0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040CAA6                 cmp     ecx, 4
.text:0040CAA9                 jz      loc_40CB60
.text:0040CAAF
.text:0040CAAF loc_40CAAF:                             ; CODE XREF: .text:0040CBB6↓j
.text:0040CAAF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040CAB5
.text:0040CAB5 loc_40CAB5:                             ; CODE XREF: .text:0040CB68↓j
.text:0040CAB5                 cmp     ecx, 4
.text:0040CAB8                 jz      short loc_40CAC4
.text:0040CABA
.text:0040CABA loc_40CABA:                             ; CODE XREF: .text:0040CACC↓j
.text:0040CABA                                         ; .text:0040CAD1↓j
.text:0040CABA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040CABF                 jmp     loc_40C62C
.text:0040CAC4 ; ---------------------------------------------------------------------------
.text:0040CAC4
.text:0040CAC4 loc_40CAC4:                             ; CODE XREF: .text:0040CAB8↑j
.text:0040CAC4                 cmp     edx, 0Ah
.text:0040CAC7                 jz      short loc_40CAF1
.text:0040CAC9
.text:0040CAC9 loc_40CAC9:                             ; CODE XREF: .text:0040CB3F↓j
.text:0040CAC9                 cmp     ecx, 4
.text:0040CACC                 jnz     short loc_40CABA
.text:0040CACE                 cmp     edx, 5Ah ; 'Z'
.text:0040CAD1                 jnz     short loc_40CABA
.text:0040CAD3                 cld
.text:0040CAD4                 mov     edi, ebx
.text:0040CAD6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040CADB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040CAE2                 mov     ecx, 9
.text:0040CAE7                 rep movsd
.text:0040CAE9                 mov     [edi], bx
.text:0040CAEC                 jmp     loc_40C6B0
.text:0040CAF1 ; ---------------------------------------------------------------------------
.text:0040CAF1
.text:0040CAF1 loc_40CAF1:                             ; CODE XREF: .text:0040CAC7↑j
.text:0040CAF1                 mov     dword ptr [ebx], 7263694Dh
.text:0040CAF7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040CAFE                 mov     dword ptr [ebx+8], 69572074h
.text:0040CB05                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040CB0C                 mov     dword ptr [ebx+10h], 38392073h
.text:0040CB13                 mov     byte ptr [ebx+14h], 0
.text:0040CB17                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040CB1D                 lea     edi, [edx-7CFh]
.text:0040CB23                 cmp     edi, 0B7h ; '·'
.text:0040CB29                 jbe     short loc_40CB53
.text:0040CB2B                 cmp     edx, 886h
.text:0040CB31                 ja      short loc_40CB41
.text:0040CB33
.text:0040CB33 loc_40CB33:                             ; CODE XREF: .text:0040CB51↓j
.text:0040CB33                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040CB39                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040CB3F                 jmp     short loc_40CAC9
.text:0040CB41 ; ---------------------------------------------------------------------------
.text:0040CB41
.text:0040CB41 loc_40CB41:                             ; CODE XREF: .text:0040CB31↑j
.text:0040CB41                 mov     dword ptr [esp+4], offset loc_40C5C6
.text:0040CB49
.text:0040CB49 loc_40CB49:                             ; CODE XREF: .text:0040CB5B↓j
.text:0040CB49                 mov     [esp], ebx
.text:0040CB4C                 call    strcat
.text:0040CB51                 jmp     short loc_40CB33
.text:0040CB53 ; ---------------------------------------------------------------------------
.text:0040CB53
.text:0040CB53 loc_40CB53:                             ; CODE XREF: .text:0040CB29↑j
.text:0040CB53                 mov     dword ptr [esp+4], 40C5CAh
.text:0040CB5B                 jmp     short loc_40CB49
.text:0040CB5B ; ---------------------------------------------------------------------------
.text:0040CB5D                 align 10h
.text:0040CB60
.text:0040CB60 loc_40CB60:                             ; CODE XREF: .text:0040CAA9↑j
.text:0040CB60                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040CB66                 test    edx, edx
.text:0040CB68                 jnz     loc_40CAB5
.text:0040CB6E                 mov     dword ptr [ebx], 7263694Dh
.text:0040CB74                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040CB7B                 mov     dword ptr [ebx+8], 69572074h
.text:0040CB82                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040CB89                 mov     dword ptr [ebx+10h], 35392073h
.text:0040CB90                 mov     byte ptr [ebx+14h], 0
.text:0040CB94                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040CB9A                 lea     ecx, [edx-3B7h]
.text:0040CBA0                 cmp     ecx, 81h
.text:0040CBA6                 jbe     short loc_40CBCD
.text:0040CBA8                 cmp     edx, 438h
.text:0040CBAE                 ja      short loc_40CBBB
.text:0040CBB0
.text:0040CBB0 loc_40CBB0:                             ; CODE XREF: .text:0040CBCB↓j
.text:0040CBB0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040CBB6                 jmp     loc_40CAAF
.text:0040CBBB ; ---------------------------------------------------------------------------
.text:0040CBBB
.text:0040CBBB loc_40CBBB:                             ; CODE XREF: .text:0040CBAE↑j
.text:0040CBBB                 mov     dword ptr [esp+4], offset loc_40C5CF
.text:0040CBC3
.text:0040CBC3 loc_40CBC3:                             ; CODE XREF: .text:0040CBD5↓j
.text:0040CBC3                 mov     [esp], ebx
.text:0040CBC6                 call    strcat
.text:0040CBCB                 jmp     short loc_40CBB0
.text:0040CBCD ; ---------------------------------------------------------------------------
.text:0040CBCD
.text:0040CBCD loc_40CBCD:                             ; CODE XREF: .text:0040CBA6↑j
.text:0040CBCD                 mov     dword ptr [esp+4], 40C5CAh
.text:0040CBD5                 jmp     short loc_40CBC3
.text:0040CBD5 ; ---------------------------------------------------------------------------
.text:0040CBD7                 align 10h
.text:0040CBE0
.text:0040CBE0 ; =============== S U B R O U T I N E =======================================
.text:0040CBE0
.text:0040CBE0
.text:0040CBE0 sub_40CBE0      proc near               ; CODE XREF: sub_40B480+11E↑p
.text:0040CBE0                                         ; sub_40BB30+1A↑p
.text:0040CBE0                 sub     esp, 0Ch
.text:0040CBE3                 call    sub_40CCF0
.text:0040CBE8                 mov     eax, ds:dword_4142A0
.text:0040CBED                 add     esp, 0Ch
.text:0040CBF0                 retn
.text:0040CBF0 sub_40CBE0      endp
.text:0040CBF0
.text:0040CBF1 ; ---------------------------------------------------------------------------
.text:0040CBF1                 jmp     short loc_40CC00
.text:0040CBF1 ; ---------------------------------------------------------------------------
.text:0040CBF3                 align 10h
.text:0040CC00
.text:0040CC00 loc_40CC00:                             ; CODE XREF: .text:0040CBF1↑j
.text:0040CC00                 sub     esp, 0Ch
.text:0040CC03                 call    sub_40CCF0
.text:0040CC08                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040CC0D                 add     esp, 0Ch
.text:0040CC10                 retn
.text:0040CC11 ; ---------------------------------------------------------------------------
.text:0040CC11                 jmp     short loc_40CC20
.text:0040CC11 ; ---------------------------------------------------------------------------
.text:0040CC13                 align 10h
.text:0040CC20
.text:0040CC20 loc_40CC20:                             ; CODE XREF: .text:0040CC11↑j
.text:0040CC20                 sub     esp, 0Ch
.text:0040CC23                 call    sub_40CCF0
.text:0040CC28                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040CC2D                 add     esp, 0Ch
.text:0040CC30                 retn
.text:0040CC31 ; ---------------------------------------------------------------------------
.text:0040CC31                 jmp     short loc_40CC40
.text:0040CC31 ; ---------------------------------------------------------------------------
.text:0040CC33                 align 10h
.text:0040CC40
.text:0040CC40 loc_40CC40:                             ; CODE XREF: .text:0040CC31↑j
.text:0040CC40                 sub     esp, 0Ch
.text:0040CC43                 call    sub_40CCF0
.text:0040CC48                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040CC4D                 add     esp, 0Ch
.text:0040CC50                 retn
.text:0040CC51 ; ---------------------------------------------------------------------------
.text:0040CC51                 jmp     short loc_40CC60
.text:0040CC51 ; ---------------------------------------------------------------------------
.text:0040CC53                 align 10h
.text:0040CC60
.text:0040CC60 loc_40CC60:                             ; CODE XREF: .text:0040CC51↑j
.text:0040CC60                 sub     esp, 0Ch
.text:0040CC63                 call    GetVersion
.text:0040CC68                 shr     eax, 10h
.text:0040CC6B                 add     esp, 0Ch
.text:0040CC6E                 retn
.text:0040CC6E ; ---------------------------------------------------------------------------
.text:0040CC6F                 align 10h
.text:0040CC70                 sub     esp, 0Ch
.text:0040CC73                 call    sub_40CCF0
.text:0040CC78                 xor     eax, eax
.text:0040CC7A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040CC81                 setz    al
.text:0040CC84                 add     esp, 0Ch
.text:0040CC87                 retn
.text:0040CC87 ; ---------------------------------------------------------------------------
.text:0040CC88                 align 10h
.text:0040CC90
.text:0040CC90 ; =============== S U B R O U T I N E =======================================
.text:0040CC90
.text:0040CC90
.text:0040CC90 sub_40CC90      proc near               ; CODE XREF: .text:loc_40B350↑p
.text:0040CC90                                         ; sub_40B480:loc_40B584↑p ...
.text:0040CC90                 sub     esp, 0Ch
.text:0040CC93                 call    sub_40CCF0
.text:0040CC98                 xor     eax, eax
.text:0040CC9A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040CCA1                 setz    al
.text:0040CCA4                 add     esp, 0Ch
.text:0040CCA7                 retn
.text:0040CCA7 sub_40CC90      endp
.text:0040CCA7
.text:0040CCA7 ; ---------------------------------------------------------------------------
.text:0040CCA8                 align 10h
.text:0040CCB0                 sub     esp, 0Ch
.text:0040CCB3                 call    sub_40CCF0
.text:0040CCB8                 xor     eax, eax
.text:0040CCBA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040CCC1                 setz    al
.text:0040CCC4                 add     esp, 0Ch
.text:0040CCC7                 retn
.text:0040CCC7 ; ---------------------------------------------------------------------------
.text:0040CCC8                 align 10h
.text:0040CCD0                 sub     esp, 0Ch
.text:0040CCD3                 call    sub_40CCF0
.text:0040CCD8                 xor     eax, eax
.text:0040CCDA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040CCE1                 setz    al
.text:0040CCE4                 add     esp, 0Ch
.text:0040CCE7                 retn
.text:0040CCE7 ; ---------------------------------------------------------------------------
.text:0040CCE8                 align 10h
.text:0040CCF0
.text:0040CCF0 ; =============== S U B R O U T I N E =======================================
.text:0040CCF0
.text:0040CCF0
.text:0040CCF0 sub_40CCF0      proc near               ; CODE XREF: .text:0040C5F0↑p
.text:0040CCF0                                         ; sub_40CBE0+3↑p ...
.text:0040CCF0
.text:0040CCF0 lpVersionInformation= dword ptr -0BCh
.text:0040CCF0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040CCF0
.text:0040CCF0                 sub     esp, 0BCh
.text:0040CCF6                 mov     edx, ds:dword_414350
.text:0040CCFC                 test    edx, edx
.text:0040CCFE                 jz      short loc_40CD10
.text:0040CD00
.text:0040CD00 loc_40CD00:                             ; CODE XREF: sub_40CCF0+7B↓j
.text:0040CD00                 mov     edx, 1
.text:0040CD05
.text:0040CD05 loc_40CD05:                             ; CODE XREF: sub_40CCF0+217↓j
.text:0040CD05                 mov     eax, edx
.text:0040CD07                 add     esp, 0BCh
.text:0040CD0D                 retn
.text:0040CD0D ; ---------------------------------------------------------------------------
.text:0040CD0E                 align 10h
.text:0040CD10
.text:0040CD10 loc_40CD10:                             ; CODE XREF: sub_40CCF0+E↑j
.text:0040CD10                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040CD17                 mov     edx, 9Ch ; 'œ'
.text:0040CD1C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040CD22                 call    GetVersionExA
.text:0040CD27                 sub     esp, 4
.text:0040CD2A                 test    eax, eax
.text:0040CD2C                 jz      loc_40CEE4
.text:0040CD32
.text:0040CD32 loc_40CD32:                             ; CODE XREF: sub_40CCF0+245↓j
.text:0040CD32                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040CD39                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040CD3E                 cmp     eax, 1
.text:0040CD41                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040CD47                 jz      loc_40CE30
.text:0040CD4D                 cmp     eax, 1
.text:0040CD50                 jb      loc_40CE20
.text:0040CD56                 cmp     eax, 2
.text:0040CD59                 jz      short loc_40CD7A
.text:0040CD5B                 cmp     eax, 3
.text:0040CD5E                 jz      short loc_40CD6D
.text:0040CD60
.text:0040CD60 loc_40CD60:                             ; CODE XREF: sub_40CCF0+88↓j
.text:0040CD60                                         ; sub_40CCF0+C0↓j ...
.text:0040CD60                 mov     edx, 1
.text:0040CD65                 mov     ds:dword_414350, edx
.text:0040CD6B                 jmp     short loc_40CD00
.text:0040CD6D ; ---------------------------------------------------------------------------
.text:0040CD6D
.text:0040CD6D loc_40CD6D:                             ; CODE XREF: sub_40CCF0+6E↑j
.text:0040CD6D                 mov     ecx, 17h
.text:0040CD72
.text:0040CD72 loc_40CD72:                             ; CODE XREF: sub_40CCF0+1A7↓j
.text:0040CD72                 mov     ds:dword_4142A0, ecx
.text:0040CD78                 jmp     short loc_40CD60
.text:0040CD7A ; ---------------------------------------------------------------------------
.text:0040CD7A
.text:0040CD7A loc_40CD7A:                             ; CODE XREF: sub_40CCF0+69↑j
.text:0040CD7A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040CD7F                 cmp     eax, 3
.text:0040CD82                 jz      short loc_40CDFB
.text:0040CD84                 cmp     eax, 4
.text:0040CD87                 jz      short loc_40CDEA
.text:0040CD89
.text:0040CD89 loc_40CD89:                             ; CODE XREF: sub_40CCF0+102↓j
.text:0040CD89                 cmp     eax, 4
.text:0040CD8C                 ja      short loc_40CDB2
.text:0040CD8E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040CD94                 test    ecx, ecx
.text:0040CD96                 jnz     short loc_40CDB2
.text:0040CD98                 mov     edx, 1Eh
.text:0040CD9D
.text:0040CD9D loc_40CD9D:                             ; CODE XREF: sub_40CCF0+DF↓j
.text:0040CD9D                 mov     ds:dword_4142A0, edx
.text:0040CDA3
.text:0040CDA3 loc_40CDA3:                             ; CODE XREF: sub_40CCF0+C5↓j
.text:0040CDA3                                         ; sub_40CCF0+D8↓j ...
.text:0040CDA3                 movzx   ecx, ds:word_414344
.text:0040CDAA                 add     ds:dword_4142A0, ecx
.text:0040CDB0                 jmp     short loc_40CD60
.text:0040CDB2 ; ---------------------------------------------------------------------------
.text:0040CDB2
.text:0040CDB2 loc_40CDB2:                             ; CODE XREF: sub_40CCF0+9C↑j
.text:0040CDB2                                         ; sub_40CCF0+A6↑j
.text:0040CDB2                 cmp     eax, 5
.text:0040CDB5                 jnz     short loc_40CDA3
.text:0040CDB7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040CDBC                 cmp     eax, 2
.text:0040CDBF                 jz      short loc_40CDDE
.text:0040CDC1                 cmp     eax, 1
.text:0040CDC4                 jz      short loc_40CDD1
.text:0040CDC6                 test    eax, eax
.text:0040CDC8                 jnz     short loc_40CDA3
.text:0040CDCA                 mov     edx, 32h ; '2'
.text:0040CDCF                 jmp     short loc_40CD9D
.text:0040CDD1 ; ---------------------------------------------------------------------------
.text:0040CDD1
.text:0040CDD1 loc_40CDD1:                             ; CODE XREF: sub_40CCF0+D4↑j
.text:0040CDD1                 mov     ecx, 3Ch ; '<'
.text:0040CDD6
.text:0040CDD6 loc_40CDD6:                             ; CODE XREF: sub_40CCF0+122↓j
.text:0040CDD6                 mov     ds:dword_4142A0, ecx
.text:0040CDDC                 jmp     short loc_40CDA3
.text:0040CDDE ; ---------------------------------------------------------------------------
.text:0040CDDE
.text:0040CDDE loc_40CDDE:                             ; CODE XREF: sub_40CCF0+CF↑j
.text:0040CDDE                 mov     eax, 46h ; 'F'
.text:0040CDE3
.text:0040CDE3 loc_40CDE3:                             ; CODE XREF: sub_40CCF0+109↓j
.text:0040CDE3                                         ; sub_40CCF0+129↓j
.text:0040CDE3                 mov     ds:dword_4142A0, eax
.text:0040CDE8                 jmp     short loc_40CDA3
.text:0040CDEA ; ---------------------------------------------------------------------------
.text:0040CDEA
.text:0040CDEA loc_40CDEA:                             ; CODE XREF: sub_40CCF0+97↑j
.text:0040CDEA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040CDF0                 test    ecx, ecx
.text:0040CDF2                 jnz     short loc_40CD89
.text:0040CDF4                 mov     eax, 28h ; '('
.text:0040CDF9                 jmp     short loc_40CDE3
.text:0040CDFB ; ---------------------------------------------------------------------------
.text:0040CDFB
.text:0040CDFB loc_40CDFB:                             ; CODE XREF: sub_40CCF0+92↑j
.text:0040CDFB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040CE00                 cmp     eax, 33h ; '3'
.text:0040CE03                 jz      short loc_40CE14
.text:0040CE05                 cmp     eax, 5
.text:0040CE08                 setz    cl
.text:0040CE0B                 movzx   edx, cl
.text:0040CE0E                 lea     ecx, [edx+edx*4+1Eh]
.text:0040CE12                 jmp     short loc_40CDD6
.text:0040CE14 ; ---------------------------------------------------------------------------
.text:0040CE14
.text:0040CE14 loc_40CE14:                             ; CODE XREF: sub_40CCF0+113↑j
.text:0040CE14                 mov     eax, 24h ; '$'
.text:0040CE19                 jmp     short loc_40CDE3
.text:0040CE19 ; ---------------------------------------------------------------------------
.text:0040CE1B                 align 10h
.text:0040CE20
.text:0040CE20 loc_40CE20:                             ; CODE XREF: sub_40CCF0+60↑j
.text:0040CE20                 mov     edx, 2
.text:0040CE25                 mov     ds:dword_4142A0, edx
.text:0040CE2B                 jmp     loc_40CD60
.text:0040CE30 ; ---------------------------------------------------------------------------
.text:0040CE30
.text:0040CE30 loc_40CE30:                             ; CODE XREF: sub_40CCF0+57↑j
.text:0040CE30                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040CE36                 cmp     ecx, 4
.text:0040CE39                 jnz     loc_40CD60
.text:0040CE3F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040CE44                 test    eax, eax
.text:0040CE46                 jnz     short loc_40CE6A
.text:0040CE48                 mov     eax, 0Ah
.text:0040CE4D                 mov     ds:dword_4142A0, eax
.text:0040CE52                 lea     eax, [edx-3B7h]
.text:0040CE58                 cmp     eax, 81h
.text:0040CE5D                 ja      short loc_40CED5
.text:0040CE5F                 mov     edx, 0Bh
.text:0040CE64
.text:0040CE64 loc_40CE64:                             ; CODE XREF: sub_40CCF0+1F2↓j
.text:0040CE64                 mov     ds:dword_4142A0, edx
.text:0040CE6A
.text:0040CE6A loc_40CE6A:                             ; CODE XREF: sub_40CCF0+156↑j
.text:0040CE6A                                         ; sub_40CCF0+1EB↓j
.text:0040CE6A                 cmp     ecx, 4
.text:0040CE6D                 jnz     loc_40CD60
.text:0040CE73                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040CE7A                 jz      short loc_40CE9C
.text:0040CE7C
.text:0040CE7C loc_40CE7C:                             ; CODE XREF: sub_40CCF0+1D4↓j
.text:0040CE7C                                         ; sub_40CCF0+1DC↓j
.text:0040CE7C                 cmp     ecx, 4
.text:0040CE7F                 jnz     loc_40CD60
.text:0040CE85                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040CE8C                 jnz     loc_40CD60
.text:0040CE92                 mov     ecx, 12h
.text:0040CE97                 jmp     loc_40CD72
.text:0040CE9C ; ---------------------------------------------------------------------------
.text:0040CE9C
.text:0040CE9C loc_40CE9C:                             ; CODE XREF: sub_40CCF0+18A↑j
.text:0040CE9C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040CEA2                 mov     eax, 0Eh
.text:0040CEA7                 mov     ds:dword_4142A0, eax
.text:0040CEAC                 lea     eax, [edx-7CFh]
.text:0040CEB2                 cmp     eax, 0B7h ; '·'
.text:0040CEB7                 ja      short loc_40CEC6
.text:0040CEB9                 mov     edx, 0Fh
.text:0040CEBE
.text:0040CEBE loc_40CEBE:                             ; CODE XREF: sub_40CCF0+1E3↓j
.text:0040CEBE                 mov     ds:dword_4142A0, edx
.text:0040CEC4                 jmp     short loc_40CE7C
.text:0040CEC6 ; ---------------------------------------------------------------------------
.text:0040CEC6
.text:0040CEC6 loc_40CEC6:                             ; CODE XREF: sub_40CCF0+1C7↑j
.text:0040CEC6                 cmp     edx, 886h
.text:0040CECC                 jbe     short loc_40CE7C
.text:0040CECE                 mov     edx, 10h
.text:0040CED3                 jmp     short loc_40CEBE
.text:0040CED5 ; ---------------------------------------------------------------------------
.text:0040CED5
.text:0040CED5 loc_40CED5:                             ; CODE XREF: sub_40CCF0+16D↑j
.text:0040CED5                 cmp     edx, 438h
.text:0040CEDB                 jbe     short loc_40CE6A
.text:0040CEDD                 mov     edx, 0Ch
.text:0040CEE2                 jmp     short loc_40CE64
.text:0040CEE4 ; ---------------------------------------------------------------------------
.text:0040CEE4
.text:0040CEE4 loc_40CEE4:                             ; CODE XREF: sub_40CCF0+3C↑j
.text:0040CEE4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040CEEC                 xor     edx, edx
.text:0040CEEE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040CEF2                 mov     dword_413070, edx
.text:0040CEF8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040CEFB                 call    GetVersionExA
.text:0040CF00                 sub     esp, 4
.text:0040CF03                 xor     edx, edx
.text:0040CF05                 test    eax, eax
.text:0040CF07                 jz      loc_40CD05
.text:0040CF0D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040CF11                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040CF15                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040CF1B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040CF1F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040CF25                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040CF29                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040CF2F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040CF35                 jmp     loc_40CD32
.text:0040CF35 sub_40CCF0      endp
.text:0040CF35
.text:0040CF35 ; ---------------------------------------------------------------------------
.text:0040CF3A                 align 10h
.text:0040CF40 ; const char String[4]
.text:0040CF40 String          db ' :/',0              ; DATA XREF: sub_40CF50+FA↓o
.text:0040CF44                 align 10h
.text:0040CF50
.text:0040CF50 ; =============== S U B R O U T I N E =======================================
.text:0040CF50
.text:0040CF50
.text:0040CF50 ; int __cdecl sub_40CF50(LPCSTR)
.text:0040CF50 sub_40CF50      proc near               ; CODE XREF: sub_40BAC0+12↑p
.text:0040CF50                                         ; .text:0040D253↓j ...
.text:0040CF50
.text:0040CF50 Str             = dword ptr -1Ch
.text:0040CF50 Val             = dword ptr -18h
.text:0040CF50 Count           = dword ptr -14h
.text:0040CF50 var_10          = dword ptr -10h
.text:0040CF50 var_C           = dword ptr -0Ch
.text:0040CF50 var_8           = dword ptr -8
.text:0040CF50 var_4           = dword ptr -4
.text:0040CF50 arg_0           = dword ptr  4
.text:0040CF50
.text:0040CF50                 sub     esp, 1Ch
.text:0040CF53                 mov     edx, [esp+1Ch+arg_0]
.text:0040CF57                 mov     [esp+1Ch+var_8], edi
.text:0040CF5B                 mov     [esp+1Ch+var_10], ebx
.text:0040CF5F                 mov     [esp+1Ch+var_C], esi
.text:0040CF63                 mov     [esp+1Ch+var_4], ebp
.text:0040CF67                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040CF6A                 call    sub_409D40
.text:0040CF6F                 test    eax, eax
.text:0040CF71                 mov     edi, eax
.text:0040CF73                 jz      short loc_40CFB0
.text:0040CF75                 mov     [esp+1Ch+Str], eax ; Str
.text:0040CF78                 call    strlen
.text:0040CF7D                 cmp     eax, 2
.text:0040CF80                 jbe     short loc_40CF8C
.text:0040CF82                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040CF86                 jz      loc_40D040
.text:0040CF8C
.text:0040CF8C loc_40CF8C:                             ; CODE XREF: sub_40CF50+30↑j
.text:0040CF8C                                         ; sub_40CF50+F4↓j
.text:0040CF8C                 test    edi, edi
.text:0040CF8E                 jz      short loc_40CFB0
.text:0040CF90                 mov     [esp+1Ch+Str], edi ; Str
.text:0040CF93                 call    strlen
.text:0040CF98                 cmp     eax, 4
.text:0040CF9B                 mov     ebp, eax
.text:0040CF9D                 jle     short loc_40CFB0
.text:0040CF9F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040CFA2                 jz      short loc_40CFD0
.text:0040CFA4                 lea     esi, [esi+0]
.text:0040CFAA                 lea     edi, [edi+0]
.text:0040CFB0
.text:0040CFB0 loc_40CFB0:                             ; CODE XREF: sub_40CF50+23↑j
.text:0040CFB0                                         ; sub_40CF50+3E↑j ...
.text:0040CFB0                 xor     esi, esi
.text:0040CFB2
.text:0040CFB2 loc_40CFB2:                             ; CODE XREF: sub_40CF50+CD↓j
.text:0040CFB2                                         ; sub_40CF50+115↓j
.text:0040CFB2                 mov     [esp+1Ch+Str], edi ; Block
.text:0040CFB5                 call    free
.text:0040CFBA                 mov     eax, esi
.text:0040CFBC                 mov     ebx, [esp+1Ch+var_10]
.text:0040CFC0                 mov     esi, [esp+1Ch+var_C]
.text:0040CFC4                 mov     edi, [esp+1Ch+var_8]
.text:0040CFC8                 mov     ebp, [esp+1Ch+var_4]
.text:0040CFCC                 add     esp, 1Ch
.text:0040CFCF                 retn
.text:0040CFD0 ; ---------------------------------------------------------------------------
.text:0040CFD0
.text:0040CFD0 loc_40CFD0:                             ; CODE XREF: sub_40CF50+52↑j
.text:0040CFD0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040CFD4                 jnz     short loc_40CFB0
.text:0040CFD6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040CFDE                 lea     ecx, [edi+2]
.text:0040CFE1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040CFE4                 call    strchr
.text:0040CFE9                 test    eax, eax
.text:0040CFEB                 jnz     short loc_40D01F
.text:0040CFED
.text:0040CFED loc_40CFED:                             ; CODE XREF: sub_40CF50+E2↓j
.text:0040CFED                 inc     ebp
.text:0040CFEE
.text:0040CFEE loc_40CFEE:                             ; CODE XREF: sub_40CF50+E9↓j
.text:0040CFEE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040CFF6                 lea     ebx, [ebp+1]
.text:0040CFF9                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040CFFC                 call    calloc
.text:0040D001                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040D004                 mov     esi, eax
.text:0040D006                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040D00A                 mov     [esp+1Ch+Val], edi ; Source
.text:0040D00E                 call    strncpy
.text:0040D013                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040D018                 mov     byte ptr [ebp+esi+0], 0
.text:0040D01D                 jmp     short loc_40CFB2
.text:0040D01F ; ---------------------------------------------------------------------------
.text:0040D01F
.text:0040D01F loc_40D01F:                             ; CODE XREF: sub_40CF50+9B↑j
.text:0040D01F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040D027                 inc     eax
.text:0040D028                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D02B                 call    strchr
.text:0040D030                 test    eax, eax
.text:0040D032                 jz      short loc_40CFED
.text:0040D034                 sub     eax, edi
.text:0040D036                 lea     ebp, [eax+1]
.text:0040D039                 jmp     short loc_40CFEE
.text:0040D039 ; ---------------------------------------------------------------------------
.text:0040D03B                 align 10h
.text:0040D040
.text:0040D040 loc_40D040:                             ; CODE XREF: sub_40CF50+36↑j
.text:0040D040                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040D044                 jnz     loc_40CF8C
.text:0040D04A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040D051                 call    _strdup
.text:0040D056                 movsx   edx, byte ptr [edi]
.text:0040D059                 mov     esi, eax
.text:0040D05B                 mov     [esp+1Ch+Str], edx ; C
.text:0040D05E                 call    toupper
.text:0040D063                 mov     [esi], al
.text:0040D065                 jmp     loc_40CFB2
.text:0040D065 sub_40CF50      endp
.text:0040D065
.text:0040D065 ; ---------------------------------------------------------------------------
.text:0040D06A                 align 10h
.text:0040D070
.text:0040D070 ; =============== S U B R O U T I N E =======================================
.text:0040D070
.text:0040D070
.text:0040D070 sub_40D070      proc near               ; CODE XREF: .text:0040D1C4↓p
.text:0040D070                                         ; .text:0040D2A8↓p
.text:0040D070
.text:0040D070 Str             = dword ptr -2Ch
.text:0040D070 Val             = dword ptr -28h
.text:0040D070 var_18          = dword ptr -18h
.text:0040D070 var_11          = byte ptr -11h
.text:0040D070 arg_0           = dword ptr  4
.text:0040D070
.text:0040D070                 push    ebp
.text:0040D071                 push    edi
.text:0040D072                 push    esi
.text:0040D073                 push    ebx
.text:0040D074                 sub     esp, 1Ch
.text:0040D077                 mov     edx, [esp+2Ch+arg_0]
.text:0040D07B                 cmp     edx, ds:dword_414370
.text:0040D081                 mov     [esp+2Ch+var_11], 0
.text:0040D086                 jz      loc_40D184
.text:0040D08C                 mov     ebx, ds:dword_414360
.text:0040D092                 test    ebx, ebx
.text:0040D094                 jz      short loc_40D102
.text:0040D096
.text:0040D096 loc_40D096:                             ; CODE XREF: sub_40D070+10F↓j
.text:0040D096                 mov     ebx, [esp+2Ch+arg_0]
.text:0040D09A                 xor     edi, edi
.text:0040D09C                 xor     esi, esi
.text:0040D09E                 mov     ebp, offset dword_414388
.text:0040D0A3                 lea     esi, [esi+0]
.text:0040D0A9                 lea     edi, [edi+0]
.text:0040D0B0
.text:0040D0B0 loc_40D0B0:                             ; CODE XREF: sub_40D070+60↓j
.text:0040D0B0                 mov     edx, [ebp+4]
.text:0040D0B3                 mov     ecx, edi
.text:0040D0B5                 mov     eax, [ebp+0]
.text:0040D0B8                 shl     ecx, 4
.text:0040D0BB                 mov     [esp+2Ch+var_18], ecx
.text:0040D0BF                 mov     ecx, edx
.text:0040D0C1                 xor     eax, ebx
.text:0040D0C3                 xor     ecx, esi
.text:0040D0C5                 or      ecx, eax
.text:0040D0C7                 jz      short loc_40D0F1
.text:0040D0C9                 inc     edi
.text:0040D0CA                 add     ebp, 10h
.text:0040D0CD                 cmp     edi, 20h ; ' '
.text:0040D0D0                 jle     short loc_40D0B0
.text:0040D0D2
.text:0040D0D2 loc_40D0D2:                             ; CODE XREF: sub_40D070+90↓j
.text:0040D0D2                 movzx   ebx, [esp+2Ch+var_11]
.text:0040D0D7                 mov     eax, [esp+2Ch+arg_0]
.text:0040D0DB                 mov     byte_413080, bl
.text:0040D0E1                 mov     ds:dword_414370, eax
.text:0040D0E6                 movsx   eax, bl
.text:0040D0E9
.text:0040D0E9 loc_40D0E9:                             ; CODE XREF: sub_40D070+11B↓j
.text:0040D0E9                 add     esp, 1Ch
.text:0040D0EC                 pop     ebx
.text:0040D0ED                 pop     esi
.text:0040D0EE                 pop     edi
.text:0040D0EF                 pop     ebp
.text:0040D0F0                 retn
.text:0040D0F1 ; ---------------------------------------------------------------------------
.text:0040D0F1
.text:0040D0F1 loc_40D0F1:                             ; CODE XREF: sub_40D070+57↑j
.text:0040D0F1                 mov     edx, [esp+2Ch+var_18]
.text:0040D0F5                 movzx   eax, byte ptr ds:dword_414380[edx]
.text:0040D0FC                 mov     [esp+2Ch+var_11], al
.text:0040D100                 jmp     short loc_40D0D2
.text:0040D102 ; ---------------------------------------------------------------------------
.text:0040D102
.text:0040D102 loc_40D102:                             ; CODE XREF: sub_40D070+24↑j
.text:0040D102                 mov     [esp+2Ch+Str], 0
.text:0040D109                 call    sub_40A9C0
.text:0040D10E                 test    eax, eax
.text:0040D110                 mov     ebx, eax
.text:0040D112                 jz      short loc_40D16C
.text:0040D114                 movzx   ecx, byte ptr [eax]
.text:0040D117                 mov     esi, 0FFFFFFF0h
.text:0040D11C                 test    cl, cl
.text:0040D11E                 jz      short loc_40D16C
.text:0040D120
.text:0040D120 loc_40D120:                             ; CODE XREF: sub_40D070+FA↓j
.text:0040D120                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040D123                 movsx   ebp, cl
.text:0040D126                 add     esi, 10h
.text:0040D129                 mov     ds:dword_414380[esi], ebp
.text:0040D12F                 mov     edi, ebp
.text:0040D131                 sar     edi, 1Fh
.text:0040D134                 mov     ds:dword_414384[esi], edi
.text:0040D13A                 call    sub_40EFB0
.text:0040D13F                 mov     ds:dword_414388[esi], eax
.text:0040D145                 xor     ecx, ecx
.text:0040D147                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040D14A                 mov     ds:dword_41438C[esi], ecx
.text:0040D150                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040D158                 call    strchr
.text:0040D15D                 mov     ebx, eax
.text:0040D15F                 inc     ebx
.text:0040D160                 jz      short loc_40D16C
.text:0040D162                 movzx   edx, byte ptr [eax+1]
.text:0040D166                 test    dl, dl
.text:0040D168                 mov     cl, dl
.text:0040D16A                 jnz     short loc_40D120
.text:0040D16C
.text:0040D16C loc_40D16C:                             ; CODE XREF: sub_40D070+A2↑j
.text:0040D16C                                         ; sub_40D070+AE↑j ...
.text:0040D16C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040D16F                 mov     esi, 1
.text:0040D174                 mov     ds:dword_414360, esi
.text:0040D17A                 call    free
.text:0040D17F                 jmp     loc_40D096
.text:0040D184 ; ---------------------------------------------------------------------------
.text:0040D184
.text:0040D184 loc_40D184:                             ; CODE XREF: sub_40D070+16↑j
.text:0040D184                 movsx   eax, byte_413080
.text:0040D18B                 jmp     loc_40D0E9
.text:0040D18B sub_40D070      endp
.text:0040D18B
.text:0040D18B ; ---------------------------------------------------------------------------
.text:0040D190 dword_40D190    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040D190                                         ; DATA XREF: .text:0040D1B3↓o
.text:0040D190                                         ; .text:0040D293↓o
.text:0040D1A0 ; ---------------------------------------------------------------------------
.text:0040D1A0                 sub     esp, 1Ch
.text:0040D1A3                 mov     [esp+14h], esi
.text:0040D1A7                 mov     esi, [esp+20h]
.text:0040D1AB                 mov     [esp+18h], edi
.text:0040D1AF                 mov     [esp+10h], ebx
.text:0040D1B3                 mov     dword ptr [esp], offset dword_40D190
.text:0040D1BA                 call    _strdup
.text:0040D1BF                 mov     [esp], esi
.text:0040D1C2                 mov     edi, eax
.text:0040D1C4                 call    sub_40D070
.text:0040D1C9                 mov     [edi], al
.text:0040D1CB                 test    al, al
.text:0040D1CD                 jz      short loc_40D1E1
.text:0040D1CF                 mov     eax, edi
.text:0040D1D1                 mov     ebx, [esp+10h]
.text:0040D1D5                 mov     esi, [esp+14h]
.text:0040D1D9                 mov     edi, [esp+18h]
.text:0040D1DD                 add     esp, 1Ch
.text:0040D1E0                 retn
.text:0040D1E1 ; ---------------------------------------------------------------------------
.text:0040D1E1
.text:0040D1E1 loc_40D1E1:                             ; CODE XREF: .text:0040D1CD↑j
.text:0040D1E1                 mov     [esp], edi
.text:0040D1E4                 call    free
.text:0040D1E9                 mov     dword ptr [esp+4], 0
.text:0040D1F1                 mov     dword ptr [esp], 0
.text:0040D1F8                 call    GetCurrentDirectoryA
.text:0040D1FD                 sub     esp, 8
.text:0040D200                 lea     esi, [eax+1]
.text:0040D203                 mov     [esp], esi
.text:0040D206                 call    malloc
.text:0040D20B                 mov     [esp+4], eax
.text:0040D20F                 mov     edi, eax
.text:0040D211                 mov     [esp], esi
.text:0040D214                 call    GetCurrentDirectoryA
.text:0040D219                 sub     esp, 8
.text:0040D21C                 test    eax, eax
.text:0040D21E                 jnz     short loc_40D240
.text:0040D220                 mov     dword ptr [esp+20h], 40D194h
.text:0040D228                 mov     ebx, [esp+10h]
.text:0040D22C                 mov     esi, [esp+14h]
.text:0040D230                 mov     edi, [esp+18h]
.text:0040D234                 add     esp, 1Ch
.text:0040D237                 jmp     _strdup
.text:0040D237 ; ---------------------------------------------------------------------------
.text:0040D23C                 align 10h
.text:0040D240
.text:0040D240 loc_40D240:                             ; CODE XREF: .text:0040D21E↑j
.text:0040D240                 mov     [esp+20h], edi
.text:0040D244                 mov     ebx, [esp+10h]
.text:0040D248                 mov     esi, [esp+14h]
.text:0040D24C                 mov     edi, [esp+18h]
.text:0040D250                 add     esp, 1Ch
.text:0040D253                 jmp     sub_40CF50
.text:0040D253 ; ---------------------------------------------------------------------------
.text:0040D258                 align 10h
.text:0040D260                 sub     esp, 7Ch
.text:0040D263                 lea     edx, [esp+10h]
.text:0040D267                 mov     [esp+8], edx
.text:0040D26B                 mov     edx, [esp+80h]
.text:0040D272                 mov     [esp+70h], ebx
.text:0040D276                 mov     [esp+74h], esi
.text:0040D27A                 mov     [esp+4], edx
.text:0040D27E                 mov     [esp+78h], edi
.text:0040D282                 mov     dword ptr [esp], 0
.text:0040D289                 call    sub_40FE10
.text:0040D28E                 xor     edx, edx
.text:0040D290                 inc     eax
.text:0040D291                 jz      short loc_40D2B5
.text:0040D293                 mov     dword ptr [esp], offset dword_40D190
.text:0040D29A                 mov     esi, [esp+20h]
.text:0040D29E                 call    _strdup
.text:0040D2A3                 mov     edi, eax
.text:0040D2A5                 mov     [esp], esi
.text:0040D2A8                 call    sub_40D070
.text:0040D2AD                 mov     [edi], al
.text:0040D2AF                 test    al, al
.text:0040D2B1                 mov     edx, edi
.text:0040D2B3                 jz      short loc_40D2C7
.text:0040D2B5
.text:0040D2B5 loc_40D2B5:                             ; CODE XREF: .text:0040D291↑j
.text:0040D2B5                                         ; .text:0040D314↓j
.text:0040D2B5                 mov     ebx, [esp+70h]
.text:0040D2B9                 mov     eax, edx
.text:0040D2BB                 mov     esi, [esp+74h]
.text:0040D2BF                 mov     edi, [esp+78h]
.text:0040D2C3                 add     esp, 7Ch
.text:0040D2C6                 retn
.text:0040D2C7 ; ---------------------------------------------------------------------------
.text:0040D2C7
.text:0040D2C7 loc_40D2C7:                             ; CODE XREF: .text:0040D2B3↑j
.text:0040D2C7                 mov     [esp], edi
.text:0040D2CA                 call    free
.text:0040D2CF                 mov     dword ptr [esp+4], 0
.text:0040D2D7                 mov     dword ptr [esp], 0
.text:0040D2DE                 call    GetCurrentDirectoryA
.text:0040D2E3                 sub     esp, 8
.text:0040D2E6                 lea     esi, [eax+1]
.text:0040D2E9                 mov     [esp], esi
.text:0040D2EC                 call    malloc
.text:0040D2F1                 mov     [esp+4], eax
.text:0040D2F5                 mov     edi, eax
.text:0040D2F7                 mov     [esp], esi
.text:0040D2FA                 call    GetCurrentDirectoryA
.text:0040D2FF                 sub     esp, 8
.text:0040D302                 test    eax, eax
.text:0040D304                 jnz     short loc_40D316
.text:0040D306                 mov     dword ptr [esp], 40D194h
.text:0040D30D                 call    _strdup
.text:0040D312
.text:0040D312 loc_40D312:                             ; CODE XREF: .text:0040D31E↓j
.text:0040D312                 mov     edx, eax
.text:0040D314                 jmp     short loc_40D2B5
.text:0040D316 ; ---------------------------------------------------------------------------
.text:0040D316
.text:0040D316 loc_40D316:                             ; CODE XREF: .text:0040D304↑j
.text:0040D316                 mov     [esp], edi
.text:0040D319                 call    sub_40CF50
.text:0040D31E                 jmp     short loc_40D312
.text:0040D320
.text:0040D320 ; =============== S U B R O U T I N E =======================================
.text:0040D320
.text:0040D320
.text:0040D320 ; int __cdecl sub_40D320(LPCSTR)
.text:0040D320 sub_40D320      proc near               ; CODE XREF: sub_40E460+12F↓p
.text:0040D320
.text:0040D320 String1         = dword ptr -1Ch
.text:0040D320 String2         = dword ptr -18h
.text:0040D320 var_C           = dword ptr -0Ch
.text:0040D320 var_8           = dword ptr -8
.text:0040D320 var_4           = dword ptr -4
.text:0040D320 arg_0           = dword ptr  4
.text:0040D320
.text:0040D320                 sub     esp, 1Ch
.text:0040D323                 mov     [esp+1Ch+var_4], edi
.text:0040D327                 mov     edi, [esp+1Ch+arg_0]
.text:0040D32B                 mov     [esp+1Ch+var_C], ebx
.text:0040D32F                 mov     [esp+1Ch+var_8], esi
.text:0040D333                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040D336                 call    sub_409D40
.text:0040D33B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040D33E                 mov     esi, eax
.text:0040D340                 call    sub_40CF50
.text:0040D345                 mov     [esp+1Ch+String2], eax ; String2
.text:0040D349                 mov     ebx, eax
.text:0040D34B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040D34E                 call    _stricmp
.text:0040D353                 test    eax, eax
.text:0040D355                 setz    dl
.text:0040D358                 test    esi, esi
.text:0040D35A                 movzx   edi, dl
.text:0040D35D                 jz      short loc_40D367
.text:0040D35F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040D362                 call    free
.text:0040D367
.text:0040D367 loc_40D367:                             ; CODE XREF: sub_40D320+3D↑j
.text:0040D367                 test    ebx, ebx
.text:0040D369                 jz      short loc_40D373
.text:0040D36B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040D36E                 call    free
.text:0040D373
.text:0040D373 loc_40D373:                             ; CODE XREF: sub_40D320+49↑j
.text:0040D373                 mov     eax, edi
.text:0040D375                 mov     ebx, [esp+1Ch+var_C]
.text:0040D379                 mov     esi, [esp+1Ch+var_8]
.text:0040D37D                 mov     edi, [esp+1Ch+var_4]
.text:0040D381                 add     esp, 1Ch
.text:0040D384                 retn
.text:0040D384 sub_40D320      endp
.text:0040D384
.text:0040D384 ; ---------------------------------------------------------------------------
.text:0040D385                 align 10h
.text:0040D390
.text:0040D390 ; =============== S U B R O U T I N E =======================================
.text:0040D390
.text:0040D390
.text:0040D390 ; int __cdecl sub_40D390(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040D390 sub_40D390      proc near               ; CODE XREF: sub_40D510+93↓p
.text:0040D390
.text:0040D390 pvReserved      = dword ptr -35Ch
.text:0040D390 pUnkOuter       = dword ptr -358h
.text:0040D390 dwClsContext    = dword ptr -354h
.text:0040D390 riid            = dword ptr -350h
.text:0040D390 ppv             = dword ptr -34Ch
.text:0040D390 cchWideChar     = dword ptr -348h
.text:0040D390 var_334         = byte ptr -334h
.text:0040D390 var_330         = dword ptr -330h
.text:0040D390 String2         = byte ptr -32Ch
.text:0040D390 WideCharStr     = word ptr -21Ch
.text:0040D390 lpMultiByteStr  = dword ptr  4
.text:0040D390 lpString1       = dword ptr  8
.text:0040D390
.text:0040D390                 push    edi
.text:0040D391                 push    esi
.text:0040D392                 push    ebx
.text:0040D393                 sub     esp, 350h
.text:0040D399                 mov     edi, [esp+35Ch+lpString1]
.text:0040D3A0                 mov     byte ptr [edi], 0
.text:0040D3A3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040D3AA                 call    OleInitialize
.text:0040D3AF                 sub     esp, 4
.text:0040D3B2                 cmp     eax, 1
.text:0040D3B5                 ja      loc_40D4EF
.text:0040D3BB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040D3C3                 lea     ecx, [esp+35Ch+var_330]
.text:0040D3C7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040D3CB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040D3D3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040D3DB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040D3E2                 call    CoCreateInstance
.text:0040D3E7                 sub     esp, 14h
.text:0040D3EA                 test    eax, eax
.text:0040D3EC                 js      loc_40D4EF
.text:0040D3F2                 mov     ebx, [esp+35Ch+var_330]
.text:0040D3F6                 lea     edx, [esp+35Ch+var_334]
.text:0040D3FA                 mov     esi, [ebx]
.text:0040D3FC                 mov     [esp+35Ch+dwClsContext], edx
.text:0040D400                 mov     [esp+35Ch+pvReserved], ebx
.text:0040D403                 xor     ebx, ebx
.text:0040D405                 mov     [esp+35Ch+pUnkOuter], offset dword_410F10
.text:0040D40D                 call    dword ptr [esi]
.text:0040D40F                 sub     esp, 0Ch
.text:0040D412                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040D419                 call    AreFileApisANSI
.text:0040D41E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040D426                 test    eax, eax
.text:0040D428                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040D42F                 setz    bl
.text:0040D432                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040D436                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040D43E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040D442                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040D44A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040D44D                 call    MultiByteToWideChar
.text:0040D452                 sub     esp, 18h
.text:0040D455                 test    eax, eax
.text:0040D457                 js      loc_40D4EF
.text:0040D45D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040D461                 mov     ebx, [edx]
.text:0040D463                 mov     [esp+35Ch+dwClsContext], 0
.text:0040D46B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040D46F                 mov     [esp+35Ch+pvReserved], edx
.text:0040D472                 call    dword ptr [ebx+14h]
.text:0040D475                 sub     esp, 0Ch
.text:0040D478                 test    eax, eax
.text:0040D47A                 js      short loc_40D4EF
.text:0040D47C                 mov     ebx, [esp+35Ch+var_330]
.text:0040D480                 lea     esi, [esp+35Ch+String2]
.text:0040D484                 mov     ecx, [ebx]
.text:0040D486                 mov     [esp+35Ch+pvReserved], ebx
.text:0040D489                 mov     [esp+35Ch+ppv], 0
.text:0040D491                 mov     [esp+35Ch+riid], 0
.text:0040D499                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040D4A1                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040D4A5                 call    dword ptr [ecx+0Ch]
.text:0040D4A8                 sub     esp, 14h
.text:0040D4AB                 mov     ebx, eax
.text:0040D4AD                 test    eax, eax
.text:0040D4AF                 js      short loc_40D4EF
.text:0040D4B1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040D4B5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040D4B8                 call    lstrcpyA
.text:0040D4BD                 sub     esp, 8
.text:0040D4C0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040D4C4                 mov     ecx, [edi]
.text:0040D4C6                 mov     [esp+35Ch+pvReserved], edi
.text:0040D4C9                 call    dword ptr [ecx+8]
.text:0040D4CC                 sub     esp, 4
.text:0040D4CF                 mov     edx, [esp+35Ch+var_330]
.text:0040D4D3                 mov     esi, [edx]
.text:0040D4D5                 mov     [esp+35Ch+pvReserved], edx
.text:0040D4D8                 call    dword ptr [esi+8]
.text:0040D4DB                 sub     esp, 4
.text:0040D4DE                 call    CoUninitialize
.text:0040D4E3                 mov     eax, ebx
.text:0040D4E5
.text:0040D4E5 loc_40D4E5:                             ; CODE XREF: sub_40D390+177↓j
.text:0040D4E5                 add     esp, 350h
.text:0040D4EB                 pop     ebx
.text:0040D4EC                 pop     esi
.text:0040D4ED                 pop     edi
.text:0040D4EE                 retn
.text:0040D4EF ; ---------------------------------------------------------------------------
.text:0040D4EF
.text:0040D4EF loc_40D4EF:                             ; CODE XREF: sub_40D390+25↑j
.text:0040D4EF                                         ; sub_40D390+5C↑j ...
.text:0040D4EF                 call    sub_40C250
.text:0040D4F4                 mov     edi, eax
.text:0040D4F6                 call    _errno
.text:0040D4FB                 mov     [eax], edi
.text:0040D4FD                 call    CoUninitialize
.text:0040D502                 mov     eax, 0FFFFFFFFh
.text:0040D507                 jmp     short loc_40D4E5
.text:0040D507 sub_40D390      endp
.text:0040D507
.text:0040D507 ; ---------------------------------------------------------------------------
.text:0040D509 ; const char Source[]
.text:0040D509 Source          db '.lnk',0             ; DATA XREF: sub_40D510+53↓o
.text:0040D509                                         ; sub_40D510:loc_40D575↓o
.text:0040D50E                 align 10h
.text:0040D510
.text:0040D510 ; =============== S U B R O U T I N E =======================================
.text:0040D510
.text:0040D510
.text:0040D510 ; int __cdecl sub_40D510(char *, LPSTR lpString1)
.text:0040D510 sub_40D510      proc near               ; CODE XREF: sub_40BCC0+96↑p
.text:0040D510
.text:0040D510 Str             = dword ptr -1Ch
.text:0040D510 Source          = dword ptr -18h
.text:0040D510 Destination     = dword ptr -14h
.text:0040D510 arg_0           = dword ptr  4
.text:0040D510 lpString1       = dword ptr  8
.text:0040D510
.text:0040D510                 push    ebp
.text:0040D511                 push    edi
.text:0040D512                 push    esi
.text:0040D513                 push    ebx
.text:0040D514                 sub     esp, 0Ch
.text:0040D517                 mov     ebx, [esp+1Ch+arg_0]
.text:0040D51B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040D51F                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040D522                 call    strlen
.text:0040D527                 add     eax, 5
.text:0040D52A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040D52D                 call    malloc
.text:0040D532                 mov     [esp+1Ch+Destination], eax
.text:0040D536                 test    eax, eax
.text:0040D538                 jz      loc_40D5E0
.text:0040D53E                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040D542                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040D545                 call    strcpy
.text:0040D54A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040D552                 mov     eax, [esp+1Ch+Destination]
.text:0040D556                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D559                 call    strrchr
.text:0040D55E                 test    eax, eax
.text:0040D560                 jz      short loc_40D575
.text:0040D562                 cld
.text:0040D563                 mov     ebx, offset Source ; ".lnk"
.text:0040D568                 mov     ecx, 5
.text:0040D56D                 mov     esi, eax
.text:0040D56F                 mov     edi, ebx
.text:0040D571                 repe cmpsb
.text:0040D573                 jz      short loc_40D589
.text:0040D575
.text:0040D575 loc_40D575:                             ; CODE XREF: sub_40D510+50↑j
.text:0040D575                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:0040D57D                 mov     edx, [esp+1Ch+Destination]
.text:0040D581                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040D584                 call    strcat
.text:0040D589
.text:0040D589 loc_40D589:                             ; CODE XREF: sub_40D510+63↑j
.text:0040D589                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040D590                 call    SetErrorMode
.text:0040D595                 sub     esp, 4
.text:0040D598                 mov     ebx, [esp+1Ch+Destination]
.text:0040D59C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040D5A0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040D5A3                 call    sub_40D390
.text:0040D5A8                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040D5AB                 mov     esi, eax
.text:0040D5AD                 call    free
.text:0040D5B2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040D5B9                 call    SetErrorMode
.text:0040D5BE                 sub     esp, 4
.text:0040D5C1                 mov     [esp+1Ch+Str], ebp
.text:0040D5C4                 call    sub_40AF70
.text:0040D5C9                 inc     esi
.text:0040D5CA                 jz      short loc_40D5E0
.text:0040D5CC                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:0040D5D0                 add     esp, 0Ch
.text:0040D5D3                 pop     ebx
.text:0040D5D4                 pop     esi
.text:0040D5D5                 pop     edi
.text:0040D5D6                 pop     ebp
.text:0040D5D7                 jmp     strlen
.text:0040D5D7 ; ---------------------------------------------------------------------------
.text:0040D5DC                 align 10h
.text:0040D5E0
.text:0040D5E0 loc_40D5E0:                             ; CODE XREF: sub_40D510+28↑j
.text:0040D5E0                                         ; sub_40D510+BA↑j
.text:0040D5E0                 add     esp, 0Ch
.text:0040D5E3                 mov     eax, 0FFFFFFFFh
.text:0040D5E8                 pop     ebx
.text:0040D5E9                 pop     esi
.text:0040D5EA                 pop     edi
.text:0040D5EB                 pop     ebp
.text:0040D5EC                 retn
.text:0040D5EC sub_40D510      endp
.text:0040D5EC
.text:0040D5EC ; ---------------------------------------------------------------------------
.text:0040D5ED                 align 10h
.text:0040D5F0
.text:0040D5F0 ; =============== S U B R O U T I N E =======================================
.text:0040D5F0
.text:0040D5F0
.text:0040D5F0 ; int __cdecl sub_40D5F0(LPCSTR, int, int)
.text:0040D5F0 sub_40D5F0      proc near               ; CODE XREF: sub_40BCC0+42↑p
.text:0040D5F0                                         ; sub_40BCC0+AE↑p ...
.text:0040D5F0
.text:0040D5F0 lpFileName      = dword ptr -2Ch
.text:0040D5F0 dwDesiredAccess = dword ptr -28h
.text:0040D5F0 dwShareMode     = dword ptr -24h
.text:0040D5F0 lpSecurityAttributes= dword ptr -20h
.text:0040D5F0 dwCreationDisposition= dword ptr -1Ch
.text:0040D5F0 dwFlagsAndAttributes= dword ptr -18h
.text:0040D5F0 hTemplateFile   = dword ptr -14h
.text:0040D5F0 var_10          = dword ptr -10h
.text:0040D5F0 var_C           = dword ptr -0Ch
.text:0040D5F0 var_8           = dword ptr -8
.text:0040D5F0 var_4           = dword ptr -4
.text:0040D5F0 arg_0           = dword ptr  4
.text:0040D5F0 arg_4           = dword ptr  8
.text:0040D5F0 arg_8           = dword ptr  0Ch
.text:0040D5F0
.text:0040D5F0 ; FUNCTION CHUNK AT .text:0040FCA0 SIZE 0000013A BYTES
.text:0040D5F0
.text:0040D5F0                 sub     esp, 0Ch
.text:0040D5F3                 mov     ecx, [esp+0Ch+arg_0]
.text:0040D5F7                 mov     edx, [esp+0Ch+arg_4]
.text:0040D5FB                 mov     eax, [esp+0Ch+arg_8]
.text:0040D5FF                 test    ecx, ecx
.text:0040D601                 jnz     short loc_40D620
.text:0040D603                 test    edx, edx
.text:0040D605                 jz      short loc_40D620
.text:0040D607                 test    eax, eax
.text:0040D609                 jz      short loc_40D620
.text:0040D60B                 mov     [esp+0Ch+arg_4], eax
.text:0040D60F                 mov     [esp+0Ch+arg_0], edx
.text:0040D613                 add     esp, 0Ch
.text:0040D616                 jmp     loc_40FCA0
.text:0040D616 ; ---------------------------------------------------------------------------
.text:0040D61B                 align 10h
.text:0040D620
.text:0040D620 loc_40D620:                             ; CODE XREF: sub_40D5F0+11↑j
.text:0040D620                                         ; sub_40D5F0+15↑j ...
.text:0040D620                 call    _errno
.text:0040D625                 mov     dword ptr [eax], 16h
.text:0040D62B                 mov     eax, 0FFFFFFFFh
.text:0040D630                 add     esp, 0Ch
.text:0040D633                 retn
.text:0040D633 sub_40D5F0      endp
.text:0040D633
.text:0040D633 ; ---------------------------------------------------------------------------
.text:0040D634                 align 10h
.text:0040D640
.text:0040D640 ; =============== S U B R O U T I N E =======================================
.text:0040D640
.text:0040D640
.text:0040D640 sub_40D640      proc near               ; CODE XREF: sub_40BE50+4F↑p
.text:0040D640
.text:0040D640 var_8           = dword ptr -8
.text:0040D640 var_4           = dword ptr -4
.text:0040D640 arg_0           = dword ptr  4
.text:0040D640 arg_4           = dword ptr  8
.text:0040D640 arg_8           = dword ptr  0Ch
.text:0040D640
.text:0040D640                 sub     esp, 8
.text:0040D643                 mov     ecx, [esp+8+arg_0]
.text:0040D647                 mov     [esp+8+var_8], ebx
.text:0040D64A                 mov     ebx, [esp+8+arg_8]
.text:0040D64E                 mov     [esp+8+var_4], esi
.text:0040D652                 mov     edx, [esp+8+arg_4]
.text:0040D656                 mov     eax, ebx
.text:0040D658                 and     eax, 7
.text:0040D65B                 cmp     eax, 7          ; switch 8 cases
.text:0040D65E                 ja      short def_40D660 ; jumptable 0040D660 default case
.text:0040D660                 jmp     ds:jpt_40D660[eax*4] ; switch jump
.text:0040D660 ; ---------------------------------------------------------------------------
.text:0040D667                 align 4
.text:0040D668 jpt_40D660      dd offset loc_40D6EA    ; DATA XREF: sub_40D640+20↑r
.text:0040D668                 dd offset loc_40D6F1    ; jump table for switch statement
.text:0040D668                 dd offset loc_40D688
.text:0040D668                 dd offset loc_40D6F9
.text:0040D668                 dd offset loc_40D706
.text:0040D668                 dd offset loc_40D713
.text:0040D668                 dd offset loc_40D720
.text:0040D668                 dd offset loc_40D72D
.text:0040D688 ; ---------------------------------------------------------------------------
.text:0040D688
.text:0040D688 loc_40D688:                             ; CODE XREF: sub_40D640+20↑j
.text:0040D688                                         ; DATA XREF: sub_40D640:jpt_40D660↑o
.text:0040D688                 mov     eax, [edx]      ; jumptable 0040D660 case 2
.text:0040D68A                 sub     ecx, 1Ch
.text:0040D68D                 add     ebx, 6
.text:0040D690                 sub     edx, 18h
.text:0040D693                 lea     esi, [esi+0]
.text:0040D699                 lea     edi, [edi+0]
.text:0040D6A0
.text:0040D6A0 loc_40D6A0:                             ; CODE XREF: sub_40D640+A8↓j
.text:0040D6A0                 mov     esi, [edx+1Ch]
.text:0040D6A3                 add     edx, 20h ; ' '
.text:0040D6A6                 mov     [ecx+1Ch], eax
.text:0040D6A9                 add     ecx, 20h ; ' '
.text:0040D6AC                 sub     ebx, 8
.text:0040D6AF                 jnz     short def_40D660 ; jumptable 0040D660 default case
.text:0040D6B1                 mov     [ecx], esi
.text:0040D6B3                 mov     ebx, [esp+8+var_8]
.text:0040D6B6                 mov     esi, [esp+8+var_4]
.text:0040D6BA                 add     esp, 8
.text:0040D6BD                 retn
.text:0040D6BD ; ---------------------------------------------------------------------------
.text:0040D6BE                 align 10h
.text:0040D6C0
.text:0040D6C0 def_40D660:                             ; CODE XREF: sub_40D640+1E↑j
.text:0040D6C0                                         ; sub_40D640+6F↑j ...
.text:0040D6C0                 mov     eax, [edx]      ; jumptable 0040D660 default case
.text:0040D6C2                 mov     [ecx], esi
.text:0040D6C4
.text:0040D6C4 loc_40D6C4:                             ; CODE XREF: sub_40D640+AF↓j
.text:0040D6C4                 mov     esi, [edx+4]
.text:0040D6C7                 mov     [ecx+4], eax
.text:0040D6CA
.text:0040D6CA loc_40D6CA:                             ; CODE XREF: sub_40D640+F6↓j
.text:0040D6CA                 mov     eax, [edx+8]
.text:0040D6CD                 mov     [ecx+8], esi
.text:0040D6D0
.text:0040D6D0 loc_40D6D0:                             ; CODE XREF: sub_40D640+EB↓j
.text:0040D6D0                 mov     esi, [edx+0Ch]
.text:0040D6D3                 mov     [ecx+0Ch], eax
.text:0040D6D6
.text:0040D6D6 loc_40D6D6:                             ; CODE XREF: sub_40D640+DE↓j
.text:0040D6D6                 mov     eax, [edx+10h]
.text:0040D6D9                 mov     [ecx+10h], esi
.text:0040D6DC
.text:0040D6DC loc_40D6DC:                             ; CODE XREF: sub_40D640+D1↓j
.text:0040D6DC                 mov     esi, [edx+14h]
.text:0040D6DF                 mov     [ecx+14h], eax
.text:0040D6E2
.text:0040D6E2 loc_40D6E2:                             ; CODE XREF: sub_40D640+C4↓j
.text:0040D6E2                 mov     eax, [edx+18h]
.text:0040D6E5                 mov     [ecx+18h], esi
.text:0040D6E8                 jmp     short loc_40D6A0
.text:0040D6EA ; ---------------------------------------------------------------------------
.text:0040D6EA
.text:0040D6EA loc_40D6EA:                             ; CODE XREF: sub_40D640+20↑j
.text:0040D6EA                                         ; DATA XREF: sub_40D640:jpt_40D660↑o
.text:0040D6EA                 mov     eax, [edx]      ; jumptable 0040D660 case 0
.text:0040D6EC                 sub     ecx, 4
.text:0040D6EF                 jmp     short loc_40D6C4
.text:0040D6F1 ; ---------------------------------------------------------------------------
.text:0040D6F1
.text:0040D6F1 loc_40D6F1:                             ; CODE XREF: sub_40D640+20↑j
.text:0040D6F1                                         ; DATA XREF: sub_40D640:jpt_40D660↑o
.text:0040D6F1                 mov     esi, [edx]      ; jumptable 0040D660 case 1
.text:0040D6F3                 dec     ebx
.text:0040D6F4                 add     edx, 4
.text:0040D6F7                 jmp     short def_40D660 ; jumptable 0040D660 default case
.text:0040D6F9 ; ---------------------------------------------------------------------------
.text:0040D6F9
.text:0040D6F9 loc_40D6F9:                             ; CODE XREF: sub_40D640+20↑j
.text:0040D6F9                                         ; DATA XREF: sub_40D640:jpt_40D660↑o
.text:0040D6F9                 mov     esi, [edx]      ; jumptable 0040D660 case 3
.text:0040D6FB                 sub     ecx, 18h
.text:0040D6FE                 add     ebx, 5
.text:0040D701                 sub     edx, 14h
.text:0040D704                 jmp     short loc_40D6E2
.text:0040D706 ; ---------------------------------------------------------------------------
.text:0040D706
.text:0040D706 loc_40D706:                             ; CODE XREF: sub_40D640+20↑j
.text:0040D706                                         ; DATA XREF: sub_40D640:jpt_40D660↑o
.text:0040D706                 mov     eax, [edx]      ; jumptable 0040D660 case 4
.text:0040D708                 sub     ecx, 14h
.text:0040D70B                 add     ebx, 4
.text:0040D70E                 sub     edx, 10h
.text:0040D711                 jmp     short loc_40D6DC
.text:0040D713 ; ---------------------------------------------------------------------------
.text:0040D713
.text:0040D713 loc_40D713:                             ; CODE XREF: sub_40D640+20↑j
.text:0040D713                                         ; DATA XREF: sub_40D640:jpt_40D660↑o
.text:0040D713                 mov     esi, [edx]      ; jumptable 0040D660 case 5
.text:0040D715                 sub     ecx, 10h
.text:0040D718                 add     ebx, 3
.text:0040D71B                 sub     edx, 0Ch
.text:0040D71E                 jmp     short loc_40D6D6
.text:0040D720 ; ---------------------------------------------------------------------------
.text:0040D720
.text:0040D720 loc_40D720:                             ; CODE XREF: sub_40D640+20↑j
.text:0040D720                                         ; DATA XREF: sub_40D640:jpt_40D660↑o
.text:0040D720                 mov     eax, [edx]      ; jumptable 0040D660 case 6
.text:0040D722                 sub     ecx, 0Ch
.text:0040D725                 add     ebx, 2
.text:0040D728                 sub     edx, 8
.text:0040D72B                 jmp     short loc_40D6D0
.text:0040D72D ; ---------------------------------------------------------------------------
.text:0040D72D
.text:0040D72D loc_40D72D:                             ; CODE XREF: sub_40D640+20↑j
.text:0040D72D                                         ; DATA XREF: sub_40D640:jpt_40D660↑o
.text:0040D72D                 mov     esi, [edx]      ; jumptable 0040D660 case 7
.text:0040D72F                 sub     ecx, 8
.text:0040D732                 inc     ebx
.text:0040D733                 sub     edx, 4
.text:0040D736                 jmp     short loc_40D6CA
.text:0040D736 sub_40D640      endp
.text:0040D736
.text:0040D736 ; ---------------------------------------------------------------------------
.text:0040D738                 align 10h
.text:0040D740
.text:0040D740 ; =============== S U B R O U T I N E =======================================
.text:0040D740
.text:0040D740
.text:0040D740 sub_40D740      proc near               ; CODE XREF: sub_40BE50+93↑p
.text:0040D740
.text:0040D740 var_1C          = dword ptr -1Ch
.text:0040D740 var_18          = dword ptr -18h
.text:0040D740 var_14          = dword ptr -14h
.text:0040D740 arg_0           = dword ptr  4
.text:0040D740 arg_4           = dword ptr  8
.text:0040D740 arg_8           = dword ptr  0Ch
.text:0040D740
.text:0040D740                 push    ebp
.text:0040D741                 push    edi
.text:0040D742                 push    esi
.text:0040D743                 push    ebx
.text:0040D744                 sub     esp, 0Ch
.text:0040D747                 mov     edx, [esp+1Ch+arg_4]
.text:0040D74B                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:0040D753                 mov     eax, [esp+1Ch+arg_8]
.text:0040D757                 mov     esi, [esp+1Ch+arg_0]
.text:0040D75B                 mov     ecx, edx
.text:0040D75D                 and     ecx, 3
.text:0040D760                 and     eax, 3
.text:0040D763                 shl     ecx, 3
.text:0040D766                 and     edx, 0FFFFFFFCh
.text:0040D769                 sub     [esp+1Ch+var_14], ecx
.text:0040D76D                 cmp     eax, 1
.text:0040D770                 mov     [esp+1Ch+var_18], ecx
.text:0040D774                 jz      loc_40D860
.text:0040D77A                 cmp     eax, 1
.text:0040D77D                 jb      loc_40D850
.text:0040D783                 cmp     eax, 2
.text:0040D786                 jz      loc_40D834
.text:0040D78C                 cmp     eax, 3
.text:0040D78F                 jz      loc_40D823
.text:0040D795
.text:0040D795 loc_40D795:                             ; CODE XREF: sub_40D740+C7↓j
.text:0040D795                                         ; sub_40D740+12C↓j
.text:0040D795                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040D79A                 mov     eax, edi
.text:0040D79C                 mov     ebx, [edx]
.text:0040D79E                 shr     ebp, cl
.text:0040D7A0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040D7A5                 shl     eax, cl
.text:0040D7A7                 or      ebp, eax
.text:0040D7A9                 mov     [esi], ebp
.text:0040D7AB
.text:0040D7AB loc_40D7AB:                             ; CODE XREF: sub_40D740+11B↓j
.text:0040D7AB                 mov     ecx, [edx+4]
.text:0040D7AE                 mov     ebp, ebx
.text:0040D7B0                 mov     [esp+1Ch+var_1C], ecx
.text:0040D7B3                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040D7B8                 shr     edi, cl
.text:0040D7BA                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040D7BF                 shl     ebp, cl
.text:0040D7C1                 or      edi, ebp
.text:0040D7C3                 mov     [esi+4], edi
.text:0040D7C6
.text:0040D7C6 loc_40D7C6:                             ; CODE XREF: sub_40D740+F2↓j
.text:0040D7C6                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040D7CB                 mov     edi, [esp+1Ch+var_1C]
.text:0040D7CE                 mov     ebp, [edx+8]
.text:0040D7D1                 shr     ebx, cl
.text:0040D7D3                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040D7D8                 shl     edi, cl
.text:0040D7DA                 or      ebx, edi
.text:0040D7DC                 mov     [esi+8], ebx
.text:0040D7DF
.text:0040D7DF loc_40D7DF:                             ; CODE XREF: sub_40D740+107↓j
.text:0040D7DF                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040D7E4                 mov     ebx, ebp
.text:0040D7E6                 mov     edi, [edx+0Ch]
.text:0040D7E9                 add     edx, 10h
.text:0040D7EC                 shr     [esp+1Ch+var_1C], cl
.text:0040D7EF                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040D7F4                 shl     ebx, cl
.text:0040D7F6                 or      [esp+1Ch+var_1C], ebx
.text:0040D7F9                 mov     ebx, [esp+1Ch+var_1C]
.text:0040D7FC                 mov     [esi+0Ch], ebx
.text:0040D7FF                 add     esi, 10h
.text:0040D802                 sub     [esp+1Ch+arg_8], 4
.text:0040D807                 jnz     short loc_40D795
.text:0040D809                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040D80E                 shr     ebp, cl
.text:0040D810                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040D815                 shl     edi, cl
.text:0040D817                 or      ebp, edi
.text:0040D819                 mov     [esi], ebp
.text:0040D81B                 add     esp, 0Ch
.text:0040D81E                 pop     ebx
.text:0040D81F                 pop     esi
.text:0040D820                 pop     edi
.text:0040D821                 pop     ebp
.text:0040D822                 retn
.text:0040D823 ; ---------------------------------------------------------------------------
.text:0040D823
.text:0040D823 loc_40D823:                             ; CODE XREF: sub_40D740+4F↑j
.text:0040D823                 inc     [esp+1Ch+arg_8]
.text:0040D827                 sub     esi, 8
.text:0040D82A                 mov     eax, [edx+4]
.text:0040D82D                 mov     ebx, [edx]
.text:0040D82F                 mov     [esp+1Ch+var_1C], eax
.text:0040D832                 jmp     short loc_40D7C6
.text:0040D834 ; ---------------------------------------------------------------------------
.text:0040D834
.text:0040D834 loc_40D834:                             ; CODE XREF: sub_40D740+46↑j
.text:0040D834                 add     [esp+1Ch+arg_8], 2
.text:0040D839                 sub     esi, 0Ch
.text:0040D83C                 mov     ecx, [edx]
.text:0040D83E                 mov     ebp, [edx+4]
.text:0040D841                 sub     edx, 4
.text:0040D844                 mov     [esp+1Ch+var_1C], ecx
.text:0040D847                 jmp     short loc_40D7DF
.text:0040D847 ; ---------------------------------------------------------------------------
.text:0040D849                 align 10h
.text:0040D850
.text:0040D850 loc_40D850:                             ; CODE XREF: sub_40D740+3D↑j
.text:0040D850                 mov     edi, [edx]
.text:0040D852                 sub     esi, 4
.text:0040D855                 mov     ebx, [edx+4]
.text:0040D858                 add     edx, 4
.text:0040D85B                 jmp     loc_40D7AB
.text:0040D860 ; ---------------------------------------------------------------------------
.text:0040D860
.text:0040D860 loc_40D860:                             ; CODE XREF: sub_40D740+34↑j
.text:0040D860                 dec     [esp+1Ch+arg_8]
.text:0040D864                 mov     ebp, [edx]
.text:0040D866                 mov     edi, [edx+4]
.text:0040D869                 add     edx, 8
.text:0040D86C                 jmp     loc_40D795
.text:0040D86C sub_40D740      endp
.text:0040D86C
.text:0040D871 ; ---------------------------------------------------------------------------
.text:0040D871                 jmp     short loc_40D880
.text:0040D871 ; ---------------------------------------------------------------------------
.text:0040D873                 align 10h
.text:0040D880
.text:0040D880 loc_40D880:                             ; CODE XREF: .text:0040D871↑j
.text:0040D880                 sub     esp, 8
.text:0040D883                 mov     ecx, [esp+0Ch]
.text:0040D887                 mov     [esp+4], esi
.text:0040D88B                 mov     esi, [esp+14h]
.text:0040D88F                 mov     [esp], ebx
.text:0040D892                 mov     edx, [esp+10h]
.text:0040D896                 mov     eax, esi
.text:0040D898                 and     eax, 7
.text:0040D89B                 cmp     eax, 7          ; switch 8 cases
.text:0040D89E                 ja      short def_40D8A0 ; jumptable 0040D8A0 default case
.text:0040D8A0                 jmp     ds:jpt_40D8A0[eax*4] ; switch jump
.text:0040D8A0 ; ---------------------------------------------------------------------------
.text:0040D8A7                 align 4
.text:0040D8A8 jpt_40D8A0      dd offset loc_40D92C    ; DATA XREF: .text:0040D8A0↑r
.text:0040D8A8                 dd offset loc_40D937    ; jump table for switch statement
.text:0040D8A8                 dd offset loc_40D8C8
.text:0040D8A8                 dd offset loc_40D943
.text:0040D8A8                 dd offset loc_40D951
.text:0040D8A8                 dd offset loc_40D95F
.text:0040D8A8                 dd offset loc_40D96D
.text:0040D8A8                 dd offset loc_40D97B
.text:0040D8C8 ; ---------------------------------------------------------------------------
.text:0040D8C8
.text:0040D8C8 loc_40D8C8:                             ; CODE XREF: .text:0040D8A0↑j
.text:0040D8C8                                         ; DATA XREF: .text:jpt_40D8A0↑o
.text:0040D8C8                 sub     edx, 8          ; jumptable 0040D8A0 case 2
.text:0040D8CB                 sub     ecx, 4
.text:0040D8CE                 mov     eax, [edx+4]
.text:0040D8D1                 add     esi, 6
.text:0040D8D4                 lea     esi, [esi+0]
.text:0040D8DA                 lea     edi, [edi+0]
.text:0040D8E0
.text:0040D8E0 loc_40D8E0:                             ; CODE XREF: .text:0040D92A↓j
.text:0040D8E0                 mov     ebx, [edx]
.text:0040D8E2                 sub     edx, 20h ; ' '
.text:0040D8E5                 mov     [ecx], eax
.text:0040D8E7                 sub     ecx, 20h ; ' '
.text:0040D8EA                 sub     esi, 8
.text:0040D8ED                 jnz     short def_40D8A0 ; jumptable 0040D8A0 default case
.text:0040D8EF                 mov     [ecx+1Ch], ebx
.text:0040D8F2                 mov     ebx, [esp]
.text:0040D8F5                 mov     esi, [esp+4]
.text:0040D8F9                 add     esp, 8
.text:0040D8FC                 retn
.text:0040D8FC ; ---------------------------------------------------------------------------
.text:0040D8FD                 align 10h
.text:0040D900
.text:0040D900 def_40D8A0:                             ; CODE XREF: .text:0040D89E↑j
.text:0040D900                                         ; .text:0040D8ED↑j ...
.text:0040D900                 mov     eax, [edx+1Ch]  ; jumptable 0040D8A0 default case
.text:0040D903                 mov     [ecx+1Ch], ebx
.text:0040D906
.text:0040D906 loc_40D906:                             ; CODE XREF: .text:0040D935↓j
.text:0040D906                 mov     ebx, [edx+18h]
.text:0040D909                 mov     [ecx+18h], eax
.text:0040D90C
.text:0040D90C loc_40D90C:                             ; CODE XREF: .text:0040D985↓j
.text:0040D90C                 mov     eax, [edx+14h]
.text:0040D90F                 mov     [ecx+14h], ebx
.text:0040D912
.text:0040D912 loc_40D912:                             ; CODE XREF: .text:0040D979↓j
.text:0040D912                 mov     ebx, [edx+10h]
.text:0040D915                 mov     [ecx+10h], eax
.text:0040D918
.text:0040D918 loc_40D918:                             ; CODE XREF: .text:0040D96B↓j
.text:0040D918                 mov     eax, [edx+0Ch]
.text:0040D91B                 mov     [ecx+0Ch], ebx
.text:0040D91E
.text:0040D91E loc_40D91E:                             ; CODE XREF: .text:0040D95D↓j
.text:0040D91E                 mov     ebx, [edx+8]
.text:0040D921                 mov     [ecx+8], eax
.text:0040D924
.text:0040D924 loc_40D924:                             ; CODE XREF: .text:0040D94F↓j
.text:0040D924                 mov     eax, [edx+4]
.text:0040D927                 mov     [ecx+4], ebx
.text:0040D92A                 jmp     short loc_40D8E0
.text:0040D92C ; ---------------------------------------------------------------------------
.text:0040D92C
.text:0040D92C loc_40D92C:                             ; CODE XREF: .text:0040D8A0↑j
.text:0040D92C                                         ; DATA XREF: .text:jpt_40D8A0↑o
.text:0040D92C                 sub     edx, 20h ; ' '  ; jumptable 0040D8A0 case 0
.text:0040D92F                 sub     ecx, 1Ch
.text:0040D932                 mov     eax, [edx+1Ch]
.text:0040D935                 jmp     short loc_40D906
.text:0040D937 ; ---------------------------------------------------------------------------
.text:0040D937
.text:0040D937 loc_40D937:                             ; CODE XREF: .text:0040D8A0↑j
.text:0040D937                                         ; DATA XREF: .text:jpt_40D8A0↑o
.text:0040D937                 sub     edx, 24h ; '$'  ; jumptable 0040D8A0 case 1
.text:0040D93A                 sub     ecx, 20h ; ' '
.text:0040D93D                 mov     ebx, [edx+20h]
.text:0040D940                 dec     esi
.text:0040D941                 jmp     short def_40D8A0 ; jumptable 0040D8A0 default case
.text:0040D943 ; ---------------------------------------------------------------------------
.text:0040D943
.text:0040D943 loc_40D943:                             ; CODE XREF: .text:0040D8A0↑j
.text:0040D943                                         ; DATA XREF: .text:jpt_40D8A0↑o
.text:0040D943                 sub     edx, 0Ch        ; jumptable 0040D8A0 case 3
.text:0040D946                 sub     ecx, 8
.text:0040D949                 mov     ebx, [edx+8]
.text:0040D94C                 add     esi, 5
.text:0040D94F                 jmp     short loc_40D924
.text:0040D951 ; ---------------------------------------------------------------------------
.text:0040D951
.text:0040D951 loc_40D951:                             ; CODE XREF: .text:0040D8A0↑j
.text:0040D951                                         ; DATA XREF: .text:jpt_40D8A0↑o
.text:0040D951                 sub     edx, 10h        ; jumptable 0040D8A0 case 4
.text:0040D954                 sub     ecx, 0Ch
.text:0040D957                 mov     eax, [edx+0Ch]
.text:0040D95A                 add     esi, 4
.text:0040D95D                 jmp     short loc_40D91E
.text:0040D95F ; ---------------------------------------------------------------------------
.text:0040D95F
.text:0040D95F loc_40D95F:                             ; CODE XREF: .text:0040D8A0↑j
.text:0040D95F                                         ; DATA XREF: .text:jpt_40D8A0↑o
.text:0040D95F                 sub     edx, 14h        ; jumptable 0040D8A0 case 5
.text:0040D962                 sub     ecx, 10h
.text:0040D965                 mov     ebx, [edx+10h]
.text:0040D968                 add     esi, 3
.text:0040D96B                 jmp     short loc_40D918
.text:0040D96D ; ---------------------------------------------------------------------------
.text:0040D96D
.text:0040D96D loc_40D96D:                             ; CODE XREF: .text:0040D8A0↑j
.text:0040D96D                                         ; DATA XREF: .text:jpt_40D8A0↑o
.text:0040D96D                 sub     edx, 18h        ; jumptable 0040D8A0 case 6
.text:0040D970                 sub     ecx, 14h
.text:0040D973                 mov     eax, [edx+14h]
.text:0040D976                 add     esi, 2
.text:0040D979                 jmp     short loc_40D912
.text:0040D97B ; ---------------------------------------------------------------------------
.text:0040D97B
.text:0040D97B loc_40D97B:                             ; CODE XREF: .text:0040D8A0↑j
.text:0040D97B                                         ; DATA XREF: .text:jpt_40D8A0↑o
.text:0040D97B                 sub     edx, 1Ch        ; jumptable 0040D8A0 case 7
.text:0040D97E                 sub     ecx, 18h
.text:0040D981                 mov     ebx, [edx+18h]
.text:0040D984                 inc     esi
.text:0040D985                 jmp     short loc_40D90C
.text:0040D985 ; ---------------------------------------------------------------------------
.text:0040D987                 align 10h
.text:0040D990                 push    ebp
.text:0040D991                 push    edi
.text:0040D992                 push    esi
.text:0040D993                 push    ebx
.text:0040D994                 sub     esp, 8
.text:0040D997                 mov     edx, [esp+20h]
.text:0040D99B                 mov     dword ptr [esp+4], 20h ; ' '
.text:0040D9A3                 mov     eax, [esp+24h]
.text:0040D9A7                 mov     ecx, edx
.text:0040D9A9                 and     ecx, 3
.text:0040D9AC                 and     eax, 3
.text:0040D9AF                 shl     ecx, 3
.text:0040D9B2                 sub     [esp+4], ecx
.text:0040D9B6                 and     edx, 0FFFFFFFCh
.text:0040D9B9                 add     edx, 4
.text:0040D9BC                 mov     [esp], ecx
.text:0040D9BF                 cmp     eax, 1
.text:0040D9C2                 jz      loc_40DAB8
.text:0040D9C8                 cmp     eax, 1
.text:0040D9CB                 jb      loc_40DAA5
.text:0040D9D1                 cmp     eax, 2
.text:0040D9D4                 jz      loc_40DA90
.text:0040D9DA                 cmp     eax, 3
.text:0040D9DD                 jz      loc_40DA7C
.text:0040D9E3
.text:0040D9E3 loc_40D9E3:                             ; CODE XREF: .text:0040DA5C↓j
.text:0040D9E3                                         ; .text:0040DACA↓j
.text:0040D9E3                 movzx   ecx, byte ptr [esp]
.text:0040D9E7                 mov     eax, edi
.text:0040D9E9                 mov     ebx, [esp+1Ch]
.text:0040D9ED                 mov     esi, [edx+0Ch]
.text:0040D9F0                 shr     eax, cl
.text:0040D9F2                 movzx   ecx, byte ptr [esp+4]
.text:0040D9F7                 shl     ebp, cl
.text:0040D9F9                 or      eax, ebp
.text:0040D9FB                 mov     [ebx+0Ch], eax
.text:0040D9FE
.text:0040D9FE loc_40D9FE:                             ; CODE XREF: .text:0040DAB3↓j
.text:0040D9FE                 movzx   ecx, byte ptr [esp]
.text:0040DA02                 mov     ebp, esi
.text:0040DA04                 mov     ebx, [edx+8]
.text:0040DA07                 shr     ebp, cl
.text:0040DA09                 movzx   ecx, byte ptr [esp+4]
.text:0040DA0E                 shl     edi, cl
.text:0040DA10                 or      ebp, edi
.text:0040DA12                 mov     edi, [esp+1Ch]
.text:0040DA16                 mov     [edi+8], ebp
.text:0040DA19
.text:0040DA19 loc_40DA19:                             ; CODE XREF: .text:0040DA8E↓j
.text:0040DA19                 movzx   ecx, byte ptr [esp]
.text:0040DA1D                 mov     edi, ebx
.text:0040DA1F                 mov     ebp, [edx+4]
.text:0040DA22                 shr     edi, cl
.text:0040DA24                 movzx   ecx, byte ptr [esp+4]
.text:0040DA29                 shl     esi, cl
.text:0040DA2B                 or      edi, esi
.text:0040DA2D                 mov     esi, [esp+1Ch]
.text:0040DA31                 mov     [esi+4], edi
.text:0040DA34
.text:0040DA34 loc_40DA34:                             ; CODE XREF: .text:0040DAA3↓j
.text:0040DA34                 movzx   ecx, byte ptr [esp]
.text:0040DA38                 mov     esi, ebp
.text:0040DA3A                 mov     edi, [edx]
.text:0040DA3C                 sub     edx, 10h
.text:0040DA3F                 shr     esi, cl
.text:0040DA41                 movzx   ecx, byte ptr [esp+4]
.text:0040DA46                 shl     ebx, cl
.text:0040DA48                 or      esi, ebx
.text:0040DA4A                 mov     ebx, [esp+1Ch]
.text:0040DA4E                 mov     [ebx], esi
.text:0040DA50                 sub     ebx, 10h
.text:0040DA53                 sub     dword ptr [esp+24h], 4
.text:0040DA58                 mov     [esp+1Ch], ebx
.text:0040DA5C                 jnz     short loc_40D9E3
.text:0040DA5E                 movzx   ecx, byte ptr [esp]
.text:0040DA62                 mov     edx, [esp+1Ch]
.text:0040DA66                 shr     edi, cl
.text:0040DA68                 movzx   ecx, byte ptr [esp+4]
.text:0040DA6D                 shl     ebp, cl
.text:0040DA6F                 or      edi, ebp
.text:0040DA71                 mov     [edx+0Ch], edi
.text:0040DA74                 add     esp, 8
.text:0040DA77                 pop     ebx
.text:0040DA78                 pop     esi
.text:0040DA79                 pop     edi
.text:0040DA7A                 pop     ebp
.text:0040DA7B                 retn
.text:0040DA7C ; ---------------------------------------------------------------------------
.text:0040DA7C
.text:0040DA7C loc_40DA7C:                             ; CODE XREF: .text:0040D9DD↑j
.text:0040DA7C                 sub     dword ptr [esp+1Ch], 8
.text:0040DA81                 sub     edx, 10h
.text:0040DA84                 inc     dword ptr [esp+24h]
.text:0040DA88                 mov     esi, [edx+0Ch]
.text:0040DA8B                 mov     ebx, [edx+8]
.text:0040DA8E                 jmp     short loc_40DA19
.text:0040DA90 ; ---------------------------------------------------------------------------
.text:0040DA90
.text:0040DA90 loc_40DA90:                             ; CODE XREF: .text:0040D9D4↑j
.text:0040DA90                 sub     dword ptr [esp+1Ch], 4
.text:0040DA95                 sub     edx, 0Ch
.text:0040DA98                 add     dword ptr [esp+24h], 2
.text:0040DA9D                 mov     ebx, [edx+8]
.text:0040DAA0                 mov     ebp, [edx+4]
.text:0040DAA3                 jmp     short loc_40DA34
.text:0040DAA5 ; ---------------------------------------------------------------------------
.text:0040DAA5
.text:0040DAA5 loc_40DAA5:                             ; CODE XREF: .text:0040D9CB↑j
.text:0040DAA5                 sub     dword ptr [esp+1Ch], 0Ch
.text:0040DAAA                 sub     edx, 14h
.text:0040DAAD                 mov     edi, [edx+10h]
.text:0040DAB0                 mov     esi, [edx+0Ch]
.text:0040DAB3                 jmp     loc_40D9FE
.text:0040DAB8 ; ---------------------------------------------------------------------------
.text:0040DAB8
.text:0040DAB8 loc_40DAB8:                             ; CODE XREF: .text:0040D9C2↑j
.text:0040DAB8                 sub     dword ptr [esp+1Ch], 10h
.text:0040DABD                 sub     edx, 18h
.text:0040DAC0                 dec     dword ptr [esp+24h]
.text:0040DAC4                 mov     ebp, [edx+14h]
.text:0040DAC7                 mov     edi, [edx+10h]
.text:0040DACA                 jmp     loc_40D9E3
.text:0040DACA ; ---------------------------------------------------------------------------
.text:0040DACF                 align 10h
.text:0040DAD0 aFile           db 'file',0             ; DATA XREF: sub_40DB00:loc_40DB2C↓o
.text:0040DAD5 ; const char aSSxxxxxx[]
.text:0040DAD5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40DB00+9B↓o
.text:0040DAE5 ; const char aTemp[]
.text:0040DAE5 aTemp           db 'TEMP',0             ; DATA XREF: sub_40DB00:loc_40DBE2↓o
.text:0040DAE5                                         ; sub_40DB00:loc_40DC22↓o ...
.text:0040DAEA ; const char aTmp[]
.text:0040DAEA aTmp            db '/tmp',0             ; DATA XREF: sub_40DB00+12F↓o
.text:0040DAEA                                         ; sub_40DB00+141↓o ...
.text:0040DAEF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40DB00:loc_40DCA0↓o
.text:0040DAF6 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40DB00:loc_40DD30↓o
.text:0040DAFA                 align 10h
.text:0040DB00
.text:0040DB00 ; =============== S U B R O U T I N E =======================================
.text:0040DB00
.text:0040DB00
.text:0040DB00 ; int __cdecl sub_40DB00(char *Buffer, int, char *, char *, int)
.text:0040DB00 sub_40DB00      proc near               ; CODE XREF: sub_40C380+3B↑p
.text:0040DB00
.text:0040DB00 Str             = dword ptr -1BCh
.text:0040DB00 Format          = dword ptr -1B8h
.text:0040DB00 var_1B4         = dword ptr -1B4h
.text:0040DB00 var_1B0         = dword ptr -1B0h
.text:0040DB00 var_1AC         = dword ptr -1ACh
.text:0040DB00 var_1A8         = dword ptr -1A8h
.text:0040DB00 var_19C         = dword ptr -19Ch
.text:0040DB00 var_13C         = dword ptr -13Ch
.text:0040DB00 var_DC          = dword ptr -0DCh
.text:0040DB00 var_7C          = dword ptr -7Ch
.text:0040DB00 Buffer          = dword ptr  4
.text:0040DB00 arg_4           = dword ptr  8
.text:0040DB00 arg_8           = dword ptr  0Ch
.text:0040DB00 arg_C           = dword ptr  10h
.text:0040DB00 arg_10          = dword ptr  14h
.text:0040DB00
.text:0040DB00                 push    ebp
.text:0040DB01                 push    edi
.text:0040DB02                 push    esi
.text:0040DB03                 push    ebx
.text:0040DB04                 sub     esp, 1ACh
.text:0040DB0A                 mov     eax, [esp+1BCh+arg_C]
.text:0040DB11                 mov     esi, [esp+1BCh+arg_8]
.text:0040DB18                 test    eax, eax
.text:0040DB1A                 jz      short loc_40DB2C
.text:0040DB1C                 mov     edx, [esp+1BCh+arg_C]
.text:0040DB23                 cmp     byte ptr [edx], 0
.text:0040DB26                 jnz     loc_40DD60
.text:0040DB2C
.text:0040DB2C loc_40DB2C:                             ; CODE XREF: sub_40DB00+1A↑j
.text:0040DB2C                 mov     eax, offset aFile ; "file"
.text:0040DB31                 mov     ebp, 4
.text:0040DB36                 mov     [esp+1BCh+arg_C], eax
.text:0040DB3D
.text:0040DB3D loc_40DB3D:                             ; CODE XREF: sub_40DB00+274↓j
.text:0040DB3D                                         ; sub_40DB00+27F↓j
.text:0040DB3D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040DB44                 test    ebx, ebx
.text:0040DB46                 jnz     loc_40DCA0
.text:0040DB4C
.text:0040DB4C loc_40DB4C:                             ; CODE XREF: sub_40DB00+21C↓j
.text:0040DB4C                                         ; sub_40DB00+224↓j ...
.text:0040DB4C                 test    esi, esi
.text:0040DB4E                 jz      loc_40DBE2
.text:0040DB54
.text:0040DB54 loc_40DB54:                             ; CODE XREF: sub_40DB00+176↓j
.text:0040DB54                                         ; sub_40DB00+19A↓j
.text:0040DB54                 mov     [esp+1BCh+Str], esi ; Str
.text:0040DB57                 call    strlen
.text:0040DB5C                 test    eax, eax
.text:0040DB5E                 mov     edx, eax
.text:0040DB60                 jz      short loc_40DB70
.text:0040DB62                 movzx   eax, byte ptr [eax+esi-1]
.text:0040DB67                 cmp     al, 2Fh ; '/'
.text:0040DB69                 jz      short loc_40DBD0
.text:0040DB6B                 cmp     al, 5Ch ; '\'
.text:0040DB6D                 jz      short loc_40DBD0
.text:0040DB6F                 nop
.text:0040DB70
.text:0040DB70 loc_40DB70:                             ; CODE XREF: sub_40DB00+60↑j
.text:0040DB70                                         ; sub_40DB00+D1↓j ...
.text:0040DB70                 lea     edi, [ebp+edx+8]
.text:0040DB74                 cmp     [esp+1BCh+arg_4], edi
.text:0040DB7B                 jb      short loc_40DBB8
.text:0040DB7D                 mov     [esp+1BCh+var_1AC], ebp
.text:0040DB81                 mov     ecx, [esp+1BCh+arg_C]
.text:0040DB88                 mov     ebp, [esp+1BCh+Buffer]
.text:0040DB8F                 mov     [esp+1BCh+var_1B0], esi
.text:0040DB93                 mov     [esp+1BCh+var_1A8], ecx
.text:0040DB97                 mov     [esp+1BCh+var_1B4], edx
.text:0040DB9B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040DBA3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040DBA6                 call    sprintf
.text:0040DBAB                 xor     eax, eax
.text:0040DBAD
.text:0040DBAD loc_40DBAD:                             ; CODE XREF: sub_40DB00+C8↓j
.text:0040DBAD                 add     esp, 1ACh
.text:0040DBB3                 pop     ebx
.text:0040DBB4                 pop     esi
.text:0040DBB5                 pop     edi
.text:0040DBB6                 pop     ebp
.text:0040DBB7                 retn
.text:0040DBB8 ; ---------------------------------------------------------------------------
.text:0040DBB8
.text:0040DBB8 loc_40DBB8:                             ; CODE XREF: sub_40DB00+7B↑j
.text:0040DBB8                 call    _errno
.text:0040DBBD                 mov     dword ptr [eax], 16h
.text:0040DBC3
.text:0040DBC3 loc_40DBC3:                             ; CODE XREF: sub_40DB00+187↓j
.text:0040DBC3                 mov     eax, 0FFFFFFFFh
.text:0040DBC8                 jmp     short loc_40DBAD
.text:0040DBC8 ; ---------------------------------------------------------------------------
.text:0040DBCA                 align 10h
.text:0040DBD0
.text:0040DBD0 loc_40DBD0:                             ; CODE XREF: sub_40DB00+69↑j
.text:0040DBD0                                         ; sub_40DB00+6D↑j ...
.text:0040DBD0                 dec     edx
.text:0040DBD1                 jz      short loc_40DB70
.text:0040DBD3                 movzx   eax, byte ptr [edx+esi-1]
.text:0040DBD8                 cmp     al, 2Fh ; '/'
.text:0040DBDA                 jz      short loc_40DBD0
.text:0040DBDC                 cmp     al, 5Ch ; '\'
.text:0040DBDE                 jz      short loc_40DBD0
.text:0040DBE0                 jmp     short loc_40DB70
.text:0040DBE2 ; ---------------------------------------------------------------------------
.text:0040DBE2
.text:0040DBE2 loc_40DBE2:                             ; CODE XREF: sub_40DB00+4E↑j
.text:0040DBE2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040DBE9                 lea     esi, [esp+1BCh+var_13C]
.text:0040DBF0                 call    getenv
.text:0040DBF5                 mov     [esp+1BCh+Format], eax ; char *
.text:0040DBF9                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040DBFD                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040DC04                 call    sub_40BCC0
.text:0040DC09                 test    eax, eax
.text:0040DC0B                 jnz     short loc_40DC22
.text:0040DC0D                 mov     edi, [esp+1BCh+var_13C]
.text:0040DC14                 and     edi, 0F000h
.text:0040DC1A                 cmp     edi, 4000h
.text:0040DC20                 jz      short loc_40DC8C
.text:0040DC22
.text:0040DC22 loc_40DC22:                             ; CODE XREF: sub_40DB00+10B↑j
.text:0040DC22                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040DC29                 call    getenv
.text:0040DC2E                 cld
.text:0040DC2F                 mov     edx, offset aTmp ; "/tmp"
.text:0040DC34                 mov     esi, eax
.text:0040DC36                 mov     ecx, 5
.text:0040DC3B                 mov     edi, edx
.text:0040DC3D                 repe cmpsb
.text:0040DC3F                 jz      short loc_40DC7C
.text:0040DC41                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040DC49                 lea     ecx, [esp+1BCh+var_19C]
.text:0040DC4D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040DC51                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040DC58                 call    sub_40BCC0
.text:0040DC5D                 test    eax, eax
.text:0040DC5F                 jnz     short loc_40DC7C
.text:0040DC61                 mov     ebx, [esp+1BCh+var_19C]
.text:0040DC65                 mov     esi, offset aTmp ; "/tmp"
.text:0040DC6A                 and     ebx, 0F000h
.text:0040DC70                 cmp     ebx, 4000h
.text:0040DC76                 jz      loc_40DB54
.text:0040DC7C
.text:0040DC7C loc_40DC7C:                             ; CODE XREF: sub_40DB00+13F↑j
.text:0040DC7C                                         ; sub_40DB00+15F↑j
.text:0040DC7C                 call    _errno
.text:0040DC81                 mov     dword ptr [eax], 2
.text:0040DC87                 jmp     loc_40DBC3
.text:0040DC8C ; ---------------------------------------------------------------------------
.text:0040DC8C
.text:0040DC8C loc_40DC8C:                             ; CODE XREF: sub_40DB00+120↑j
.text:0040DC8C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040DC93                 call    getenv
.text:0040DC98                 mov     esi, eax
.text:0040DC9A                 jmp     loc_40DB54
.text:0040DC9A ; ---------------------------------------------------------------------------
.text:0040DC9F                 align 10h
.text:0040DCA0
.text:0040DCA0 loc_40DCA0:                             ; CODE XREF: sub_40DB00+46↑j
.text:0040DCA0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040DCA7                 call    sub_40FFA0
.text:0040DCAC                 test    eax, eax
.text:0040DCAE                 mov     ebx, eax
.text:0040DCB0                 jz      short loc_40DD30
.text:0040DCB2
.text:0040DCB2 loc_40DCB2:                             ; CODE XREF: sub_40DB00+240↓j
.text:0040DCB2                                         ; sub_40DB00+256↓j
.text:0040DCB2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040DCB6                 lea     edi, [esp+1BCh+var_7C]
.text:0040DCBD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040DCC1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040DCC8                 call    sub_40BCC0
.text:0040DCCD                 test    eax, eax
.text:0040DCCF                 jnz     short loc_40DCE6
.text:0040DCD1                 mov     edx, [esp+1BCh+var_7C]
.text:0040DCD8                 and     edx, 0F000h
.text:0040DCDE                 cmp     edx, 4000h
.text:0040DCE4                 jz      short loc_40DD29
.text:0040DCE6
.text:0040DCE6 loc_40DCE6:                             ; CODE XREF: sub_40DB00+1CF↑j
.text:0040DCE6                                         ; sub_40DB00+25C↓j
.text:0040DCE6                 test    esi, esi
.text:0040DCE8                 jz      short loc_40DD22
.text:0040DCEA                 mov     [esp+1BCh+Format], esi ; char *
.text:0040DCEE                 lea     ecx, [esp+1BCh+var_DC]
.text:0040DCF5                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040DCF9                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040DD00                 call    sub_40BCC0
.text:0040DD05                 test    eax, eax
.text:0040DD07                 jnz     short loc_40DD22
.text:0040DD09                 mov     ebx, [esp+1BCh+var_DC]
.text:0040DD10                 and     ebx, 0F000h
.text:0040DD16                 cmp     ebx, 4000h
.text:0040DD1C                 jz      loc_40DB4C
.text:0040DD22
.text:0040DD22 loc_40DD22:                             ; CODE XREF: sub_40DB00+1E8↑j
.text:0040DD22                                         ; sub_40DB00+207↑j
.text:0040DD22                 xor     esi, esi
.text:0040DD24                 jmp     loc_40DB4C
.text:0040DD29 ; ---------------------------------------------------------------------------
.text:0040DD29
.text:0040DD29 loc_40DD29:                             ; CODE XREF: sub_40DB00+1E4↑j
.text:0040DD29                 mov     esi, ebx
.text:0040DD2B                 jmp     loc_40DB4C
.text:0040DD30 ; ---------------------------------------------------------------------------
.text:0040DD30
.text:0040DD30 loc_40DD30:                             ; CODE XREF: sub_40DB00+1B0↑j
.text:0040DD30                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040DD37                 call    sub_40FFA0
.text:0040DD3C                 test    eax, eax
.text:0040DD3E                 mov     ebx, eax
.text:0040DD40                 jnz     loc_40DCB2
.text:0040DD46                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040DD4D                 call    sub_40FFA0
.text:0040DD52                 test    eax, eax
.text:0040DD54                 mov     ebx, eax
.text:0040DD56                 jnz     loc_40DCB2
.text:0040DD5C                 jmp     short loc_40DCE6
.text:0040DD5C ; ---------------------------------------------------------------------------
.text:0040DD5E                 align 10h
.text:0040DD60
.text:0040DD60 loc_40DD60:                             ; CODE XREF: sub_40DB00+26↑j
.text:0040DD60                 mov     ecx, [esp+1BCh+arg_C]
.text:0040DD67                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040DD6A                 call    strlen
.text:0040DD6F                 cmp     eax, 5
.text:0040DD72                 mov     ebp, eax
.text:0040DD74                 jbe     loc_40DB3D
.text:0040DD7A                 mov     ebp, 5
.text:0040DD7F                 jmp     loc_40DB3D
.text:0040DD7F sub_40DB00      endp
.text:0040DD7F
.text:0040DD7F ; ---------------------------------------------------------------------------
.text:0040DD84                 align 10h
.text:0040DD90 byte_40DD90     db 61h                  ; DATA XREF: sub_40DE80+DC↓r
.text:0040DD90                                         ; sub_40DE80+122↓r ...
.text:0040DD91 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040DDCF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40DE80+39↓o
.text:0040DDD6                 db 1Ah dup(90h)
.text:0040DDF0 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040DDF0                                         ; DATA XREF: sub_40DE80:loc_40E0F8↓o
.text:0040DE0F                 align 10h
.text:0040DE10 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040DE10                                         ; DATA XREF: sub_40DE80+405↓o
.text:0040DE3B                 db 15h dup(90h)
.text:0040DE50 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040DE50                                         ; DATA XREF: sub_40DE80+40D↓o
.text:0040DE73                 align 10h
.text:0040DE80
.text:0040DE80 ; =============== S U B R O U T I N E =======================================
.text:0040DE80
.text:0040DE80
.text:0040DE80 ; int __cdecl sub_40DE80(char *FileName, int)
.text:0040DE80 sub_40DE80      proc near               ; CODE XREF: sub_40C380+51↑p
.text:0040DE80
.text:0040DE80 Str             = dword ptr -9Ch
.text:0040DE80 OpenFlag        = dword ptr -98h
.text:0040DE80 var_94          = dword ptr -94h
.text:0040DE80 var_90          = dword ptr -90h
.text:0040DE80 var_8C          = dword ptr -8Ch
.text:0040DE80 var_88          = dword ptr -88h
.text:0040DE80 var_84          = dword ptr -84h
.text:0040DE80 var_80          = dword ptr -80h
.text:0040DE80 var_7C          = dword ptr -7Ch
.text:0040DE80 FileName        = dword ptr  4
.text:0040DE80 arg_4           = dword ptr  8
.text:0040DE80
.text:0040DE80                 push    ebp
.text:0040DE81                 push    edi
.text:0040DE82                 push    esi
.text:0040DE83                 push    ebx
.text:0040DE84                 sub     esp, 8Ch
.text:0040DE8A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040DE92                 call    _errno
.text:0040DE97                 mov     edx, [eax]
.text:0040DE99                 mov     [esp+9Ch+var_8C], edx
.text:0040DE9D                 mov     edx, [esp+9Ch+FileName]
.text:0040DEA4                 mov     [esp+9Ch+Str], edx ; Str
.text:0040DEA7                 call    strlen
.text:0040DEAC                 cmp     eax, 5
.text:0040DEAF                 jle     short loc_40DECD
.text:0040DEB1                 cld
.text:0040DEB2                 mov     ecx, [esp+9Ch+FileName]
.text:0040DEB9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040DEBE                 lea     esi, [eax+ecx-6]
.text:0040DEC2                 mov     ecx, 7
.text:0040DEC7                 mov     ebp, esi
.text:0040DEC9                 repe cmpsb
.text:0040DECB                 jz      short loc_40DEE8
.text:0040DECD
.text:0040DECD loc_40DECD:                             ; CODE XREF: sub_40DE80+2F↑j
.text:0040DECD                 call    _errno
.text:0040DED2                 mov     dword ptr [eax], 16h
.text:0040DED8
.text:0040DED8 loc_40DED8:                             ; CODE XREF: sub_40DE80+295↓j
.text:0040DED8                                         ; sub_40DE80+2D8↓j ...
.text:0040DED8                 mov     eax, 0FFFFFFFFh
.text:0040DEDD
.text:0040DEDD loc_40DEDD:                             ; CODE XREF: sub_40DE80+2EF↓j
.text:0040DEDD                                         ; sub_40DE80+332↓j
.text:0040DEDD                 add     esp, 8Ch
.text:0040DEE3                 pop     ebx
.text:0040DEE4                 pop     esi
.text:0040DEE5                 pop     edi
.text:0040DEE6                 pop     ebp
.text:0040DEE7                 retn
.text:0040DEE8 ; ---------------------------------------------------------------------------
.text:0040DEE8
.text:0040DEE8 loc_40DEE8:                             ; CODE XREF: sub_40DE80+4B↑j
.text:0040DEE8                 mov     ecx, ds:dword_414584
.text:0040DEEE                 mov     edi, ds:dword_414580
.text:0040DEF4                 mov     eax, ecx
.text:0040DEF6                 or      eax, edi
.text:0040DEF8                 jz      loc_40E233
.text:0040DEFE
.text:0040DEFE loc_40DEFE:                             ; CODE XREF: sub_40DE80+3F8↓j
.text:0040DEFE                 rdtsc
.text:0040DF00                 mov     edi, edx
.text:0040DF02                 mov     esi, eax
.text:0040DF04                 call    _getpid
.text:0040DF09                 mov     ebx, eax
.text:0040DF0B                 mov     edx, esi
.text:0040DF0D                 sar     ebx, 1Fh
.text:0040DF10                 xor     edx, eax
.text:0040DF12                 mov     ecx, edi
.text:0040DF14                 xor     ecx, ebx
.text:0040DF16                 mov     ebx, edx
.text:0040DF18                 mov     esi, ecx
.text:0040DF1A                 add     ebx, ds:dword_414580
.text:0040DF20                 adc     esi, ds:dword_414584
.text:0040DF26                 xor     edi, edi
.text:0040DF28                 mov     ds:dword_414580, ebx
.text:0040DF2E                 mov     ds:dword_414584, esi
.text:0040DF34                 lea     esi, [esi+0]
.text:0040DF3A                 lea     edi, [edi+0]
.text:0040DF40
.text:0040DF40 loc_40DF40:                             ; CODE XREF: sub_40DE80+2C7↓j
.text:0040DF40                 mov     [esp+9Ch+Str], ebx
.text:0040DF43                 mov     [esp+9Ch+OpenFlag], esi
.text:0040DF47                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040DF4F                 mov     [esp+9Ch+var_90], 0
.text:0040DF57                 call    sub_411730
.text:0040DF5C                 movzx   ecx, ds:byte_40DD90[eax]
.text:0040DF63                 mov     [ebp+0], cl
.text:0040DF66                 mov     [esp+9Ch+Str], ebx
.text:0040DF69                 mov     [esp+9Ch+OpenFlag], esi
.text:0040DF6D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040DF75                 mov     [esp+9Ch+var_90], 0
.text:0040DF7D                 call    sub_4118B0
.text:0040DF82                 mov     [esp+9Ch+Str], eax
.text:0040DF85                 mov     ebx, eax
.text:0040DF87                 mov     esi, edx
.text:0040DF89                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040DF91                 mov     [esp+9Ch+var_90], 0
.text:0040DF99                 mov     [esp+9Ch+OpenFlag], edx
.text:0040DF9D                 call    sub_411730
.text:0040DFA2                 movzx   edx, ds:byte_40DD90[eax]
.text:0040DFA9                 mov     [ebp+1], dl
.text:0040DFAC                 mov     [esp+9Ch+Str], ebx
.text:0040DFAF                 mov     [esp+9Ch+OpenFlag], esi
.text:0040DFB3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040DFBB                 mov     [esp+9Ch+var_90], 0
.text:0040DFC3                 call    sub_4118B0
.text:0040DFC8                 mov     [esp+9Ch+Str], eax
.text:0040DFCB                 mov     ebx, eax
.text:0040DFCD                 mov     esi, edx
.text:0040DFCF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040DFD7                 mov     [esp+9Ch+var_90], 0
.text:0040DFDF                 mov     [esp+9Ch+OpenFlag], edx
.text:0040DFE3                 call    sub_411730
.text:0040DFE8                 movzx   ecx, ds:byte_40DD90[eax]
.text:0040DFEF                 mov     [ebp+2], cl
.text:0040DFF2                 mov     [esp+9Ch+Str], ebx
.text:0040DFF5                 mov     [esp+9Ch+OpenFlag], esi
.text:0040DFF9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E001                 mov     [esp+9Ch+var_90], 0
.text:0040E009                 call    sub_4118B0
.text:0040E00E                 mov     [esp+9Ch+Str], eax
.text:0040E011                 mov     ebx, eax
.text:0040E013                 mov     esi, edx
.text:0040E015                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E01D                 mov     [esp+9Ch+var_90], 0
.text:0040E025                 mov     [esp+9Ch+OpenFlag], edx
.text:0040E029                 call    sub_411730
.text:0040E02E                 movzx   edx, ds:byte_40DD90[eax]
.text:0040E035                 mov     [ebp+3], dl
.text:0040E038                 mov     [esp+9Ch+Str], ebx
.text:0040E03B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040E03F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E047                 mov     [esp+9Ch+var_90], 0
.text:0040E04F                 call    sub_4118B0
.text:0040E054                 mov     [esp+9Ch+Str], eax
.text:0040E057                 mov     ebx, eax
.text:0040E059                 mov     esi, edx
.text:0040E05B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E063                 mov     [esp+9Ch+var_90], 0
.text:0040E06B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040E06F                 call    sub_411730
.text:0040E074                 movzx   ecx, ds:byte_40DD90[eax]
.text:0040E07B                 mov     [ebp+4], cl
.text:0040E07E                 mov     [esp+9Ch+Str], ebx
.text:0040E081                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E089                 mov     [esp+9Ch+var_90], 0
.text:0040E091                 mov     [esp+9Ch+OpenFlag], esi
.text:0040E095                 call    sub_4118B0
.text:0040E09A                 mov     [esp+9Ch+Str], eax
.text:0040E09D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E0A5                 mov     [esp+9Ch+var_90], 0
.text:0040E0AD                 mov     [esp+9Ch+OpenFlag], edx
.text:0040E0B1                 call    sub_411730
.text:0040E0B6                 movzx   ebx, ds:byte_40DD90[eax]
.text:0040E0BD                 mov     [ebp+5], bl
.text:0040E0C0                 cmp     [esp+9Ch+arg_4], 1
.text:0040E0C8                 jz      loc_40E217
.text:0040E0CE                 cmp     [esp+9Ch+arg_4], 1
.text:0040E0D6                 jle     loc_40E1E0
.text:0040E0DC                 cmp     [esp+9Ch+arg_4], 2
.text:0040E0E4                 jz      loc_40E1B7
.text:0040E0EA                 cmp     [esp+9Ch+arg_4], 3
.text:0040E0F2                 jz      loc_40E174
.text:0040E0F8
.text:0040E0F8 loc_40E0F8:                             ; CODE XREF: sub_40DE80+369↓j
.text:0040E0F8                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040E0FD                 test    ebx, ebx
.text:0040E0FF                 jnz     loc_40E27D
.text:0040E105
.text:0040E105 loc_40E105:                             ; CODE XREF: sub_40DE80+354↓j
.text:0040E105                 mov     eax, [esp+9Ch+var_88]
.text:0040E109                 test    eax, eax
.text:0040E10B                 jns     short loc_40E160
.text:0040E10D                 call    _errno
.text:0040E112                 cmp     dword ptr [eax], 11h
.text:0040E115                 jnz     loc_40DED8
.text:0040E11B
.text:0040E11B loc_40E11B:                             ; CODE XREF: sub_40DE80+315↓j
.text:0040E11B                 mov     edx, ds:dword_414580
.text:0040E121                 mov     ecx, ds:dword_414584
.text:0040E127                 add     edx, 1E61h
.text:0040E12D                 adc     ecx, 0
.text:0040E130                 mov     ebx, edx
.text:0040E132                 inc     edi
.text:0040E133                 mov     ds:dword_414580, edx
.text:0040E139                 cmp     edi, 3A2F8h
.text:0040E13F                 mov     esi, ecx
.text:0040E141                 mov     ds:dword_414584, ecx
.text:0040E147                 jb      loc_40DF40
.text:0040E14D                 call    _errno
.text:0040E152                 mov     dword ptr [eax], 11h
.text:0040E158                 jmp     loc_40DED8
.text:0040E158 ; ---------------------------------------------------------------------------
.text:0040E15D                 align 10h
.text:0040E160
.text:0040E160 loc_40E160:                             ; CODE XREF: sub_40DE80+28B↑j
.text:0040E160                 call    _errno
.text:0040E165                 mov     esi, [esp+9Ch+var_8C]
.text:0040E169                 mov     [eax], esi
.text:0040E16B                 mov     eax, [esp+9Ch+var_88]
.text:0040E16F                 jmp     loc_40DEDD
.text:0040E174 ; ---------------------------------------------------------------------------
.text:0040E174
.text:0040E174 loc_40E174:                             ; CODE XREF: sub_40DE80+272↑j
.text:0040E174                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040E17B                 mov     ecx, [esp+9Ch+FileName]
.text:0040E182                 lea     esi, [esp+9Ch+var_7C]
.text:0040E186                 mov     [esp+9Ch+var_94], esi ; int
.text:0040E18A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040E18E                 call    sub_40D5F0
.text:0040E193                 test    eax, eax
.text:0040E195                 jns     short loc_40E11B
.text:0040E197                 call    _errno
.text:0040E19C                 cmp     dword ptr [eax], 2
.text:0040E19F                 jnz     loc_40DED8
.text:0040E1A5                 call    _errno
.text:0040E1AA                 mov     ebx, [esp+9Ch+var_8C]
.text:0040E1AE                 mov     [eax], ebx
.text:0040E1B0                 xor     eax, eax
.text:0040E1B2                 jmp     loc_40DEDD
.text:0040E1B7 ; ---------------------------------------------------------------------------
.text:0040E1B7
.text:0040E1B7 loc_40E1B7:                             ; CODE XREF: sub_40DE80+264↑j
.text:0040E1B7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040E1BF                 mov     edx, [esp+9Ch+FileName]
.text:0040E1C6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040E1C9                 call    sub_40FEC0
.text:0040E1CE                 mov     esi, esi
.text:0040E1D0
.text:0040E1D0 loc_40E1D0:                             ; CODE XREF: sub_40DE80+395↓j
.text:0040E1D0                 mov     [esp+9Ch+var_88], eax
.text:0040E1D4                 jmp     loc_40E105
.text:0040E1D4 ; ---------------------------------------------------------------------------
.text:0040E1D9                 align 10h
.text:0040E1E0
.text:0040E1E0 loc_40E1E0:                             ; CODE XREF: sub_40DE80+256↑j
.text:0040E1E0                 mov     eax, [esp+9Ch+arg_4]
.text:0040E1E7                 test    eax, eax
.text:0040E1E9                 jnz     loc_40E0F8
.text:0040E1EF                 mov     [esp+9Ch+var_94], 180h
.text:0040E1F7                 mov     esi, [esp+9Ch+FileName]
.text:0040E1FE                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040E206                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040E209                 lea     esi, [esi+0]
.text:0040E210
.text:0040E210 loc_40E210:                             ; CODE XREF: sub_40DE80+3B1↓j
.text:0040E210                 call    _open_0
.text:0040E215                 jmp     short loc_40E1D0
.text:0040E217 ; ---------------------------------------------------------------------------
.text:0040E217
.text:0040E217 loc_40E217:                             ; CODE XREF: sub_40DE80+248↑j
.text:0040E217                 mov     [esp+9Ch+var_94], 180h
.text:0040E21F                 mov     ebx, [esp+9Ch+FileName]
.text:0040E226                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040E22E                 mov     [esp+9Ch+Str], ebx
.text:0040E231                 jmp     short loc_40E210
.text:0040E233 ; ---------------------------------------------------------------------------
.text:0040E233
.text:0040E233 loc_40E233:                             ; CODE XREF: sub_40DE80+78↑j
.text:0040E233                 mov     [esp+9Ch+OpenFlag], 0
.text:0040E23B                 lea     ebx, [esp+9Ch+var_84]
.text:0040E23F                 mov     [esp+9Ch+Str], ebx
.text:0040E242                 call    sub_40FF40
.text:0040E247                 mov     edi, [esp+9Ch+var_80]
.text:0040E24B                 mov     edx, [esp+9Ch+var_84]
.text:0040E24F                 mov     ecx, edi
.text:0040E251                 mov     ebx, edi
.text:0040E253                 shl     ecx, 10h
.text:0040E256                 sar     ebx, 1Fh
.text:0040E259                 shld    ebx, edi, 10h
.text:0040E25D                 mov     esi, edx
.text:0040E25F                 mov     edi, edx
.text:0040E261                 mov     edx, ecx
.text:0040E263                 sar     edi, 1Fh
.text:0040E266                 xor     edx, esi
.text:0040E268                 mov     ds:dword_414580, edx
.text:0040E26E                 mov     esi, ebx
.text:0040E270                 xor     esi, edi
.text:0040E272                 mov     ds:dword_414584, esi
.text:0040E278                 jmp     loc_40DEFE
.text:0040E27D ; ---------------------------------------------------------------------------
.text:0040E27D
.text:0040E27D loc_40E27D:                             ; CODE XREF: sub_40DE80+27F↑j
.text:0040E27D                 mov     [esp+9Ch+var_94], 151h
.text:0040E285                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040E28D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040E294                 call    _assert
.text:0040E294 sub_40DE80      endp
.text:0040E294
.text:0040E294 ; ---------------------------------------------------------------------------
.text:0040E299                 db 17h dup(90h)
.text:0040E2B0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:0040E2B0                                         ; DATA XREF: .data:off_413094↓o
.text:0040E2C4 ; const CHAR ModuleName[13]
.text:0040E2C4 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_40E2F0+11↓o
.text:0040E2C4                                         ; sub_40E460+C↓o ...
.text:0040E2D1 ; const CHAR aGetfileattribu[]
.text:0040E2D1 aGetfileattribu db 'GetFileAttributesExA',0
.text:0040E2D1                                         ; DATA XREF: sub_40E2F0+28↓o
.text:0040E2E6                 align 10h
.text:0040E2F0
.text:0040E2F0 ; =============== S U B R O U T I N E =======================================
.text:0040E2F0
.text:0040E2F0
.text:0040E2F0 ; int __cdecl sub_40E2F0(LPCSTR lpFileName, int)
.text:0040E2F0 sub_40E2F0      proc near               ; CODE XREF: .text:0040F494↓p
.text:0040E2F0                                         ; sub_40F890+37↓p
.text:0040E2F0
.text:0040E2F0 lpModuleName    = dword ptr -18Ch
.text:0040E2F0 lpProcName      = dword ptr -188h
.text:0040E2F0 var_184         = dword ptr -184h
.text:0040E2F0 var_170         = dword ptr -170h
.text:0040E2F0 var_164         = dword ptr -164h
.text:0040E2F0 hModule         = dword ptr -160h
.text:0040E2F0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040E2F0 lpFileName      = dword ptr  4
.text:0040E2F0 arg_4           = dword ptr  8
.text:0040E2F0
.text:0040E2F0                 push    ebp
.text:0040E2F1                 push    edi
.text:0040E2F2                 push    esi
.text:0040E2F3                 push    ebx
.text:0040E2F4                 sub     esp, 17Ch
.text:0040E2FA                 mov     ebx, [esp+18Ch+arg_4]
.text:0040E301                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; lpModuleName
.text:0040E308                 call    GetModuleHandleA
.text:0040E30D                 sub     esp, 4
.text:0040E310                 mov     [esp+18Ch+hModule], eax
.text:0040E314                 mov     edx, [esp+18Ch+hModule]
.text:0040E318                 mov     [esp+18Ch+lpProcName], offset aGetfileattribu ; "GetFileAttributesExA"
.text:0040E320                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:0040E323                 call    GetProcAddress
.text:0040E328                 sub     esp, 8
.text:0040E32B                 mov     ebp, eax
.text:0040E32D                 mov     eax, [esp+18Ch+lpFileName]
.text:0040E334                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:0040E337                 call    GetFileAttributesA
.text:0040E33C                 sub     esp, 4
.text:0040E33F                 mov     [esp+18Ch+var_164], eax
.text:0040E343                 xor     eax, eax
.text:0040E345                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040E34A                 jz      short loc_40E3A1
.text:0040E34C                 cld
.text:0040E34D                 mov     ecx, 50h ; 'P'
.text:0040E352                 lea     esi, [esp+18Ch+FindFileData]
.text:0040E356                 mov     edi, esi
.text:0040E358                 test    ebp, ebp
.text:0040E35A                 rep stosd
.text:0040E35C                 mov     [esp+18Ch+var_170], 0
.text:0040E364                 jz      short loc_40E385
.text:0040E366                 mov     [esp+18Ch+var_184], ebx
.text:0040E36A                 mov     ecx, [esp+18Ch+lpFileName]
.text:0040E371                 mov     [esp+18Ch+lpProcName], 0
.text:0040E379                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040E37C                 call    ebp
.text:0040E37E                 sub     esp, 0Ch
.text:0040E381                 mov     [esp+18Ch+var_170], eax
.text:0040E385
.text:0040E385 loc_40E385:                             ; CODE XREF: sub_40E2F0+74↑j
.text:0040E385                 mov     eax, [esp+18Ch+var_170]
.text:0040E389                 test    eax, eax
.text:0040E38B                 jz      short loc_40E3B0
.text:0040E38D
.text:0040E38D loc_40E38D:                             ; CODE XREF: sub_40E2F0+131↓j
.text:0040E38D                                         ; sub_40E2F0+14B↓j
.text:0040E38D                 mov     ebx, [esp+18Ch+hModule]
.text:0040E391                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:0040E394                 call    FreeLibrary
.text:0040E399                 sub     esp, 4
.text:0040E39C                 mov     eax, 1
.text:0040E3A1
.text:0040E3A1 loc_40E3A1:                             ; CODE XREF: sub_40E2F0+5A↑j
.text:0040E3A1                 add     esp, 17Ch
.text:0040E3A7                 pop     ebx
.text:0040E3A8                 pop     esi
.text:0040E3A9                 pop     edi
.text:0040E3AA                 pop     ebp
.text:0040E3AB                 retn
.text:0040E3AB ; ---------------------------------------------------------------------------
.text:0040E3AC                 align 10h
.text:0040E3B0
.text:0040E3B0 loc_40E3B0:                             ; CODE XREF: sub_40E2F0+9B↑j
.text:0040E3B0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:0040E3B4                 mov     edx, [esp+18Ch+lpFileName]
.text:0040E3BB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040E3BE                 call    FindFirstFileA
.text:0040E3C3                 sub     esp, 8
.text:0040E3C6                 xor     ecx, ecx
.text:0040E3C8                 cmp     eax, 0FFFFFFFFh
.text:0040E3CB                 setnz   cl
.text:0040E3CE                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:0040E3D2                 mov     [ebx], edi
.text:0040E3D4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:0040E3D8                 mov     [esp+18Ch+var_170], ecx
.text:0040E3DC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:0040E3E0                 mov     [ebx+8], esi
.text:0040E3E3                 mov     [ebx+4], ecx
.text:0040E3E6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040E3EA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040E3EE                 mov     [ebx+0Ch], ebp
.text:0040E3F1                 mov     [ebx+10h], edi
.text:0040E3F4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:0040E3F8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040E3FC                 mov     [ebx+18h], esi
.text:0040E3FF                 mov     [ebx+14h], ecx
.text:0040E402                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:0040E406                 mov     [ebx+1Ch], ebp
.text:0040E409                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040E40D                 mov     [ebx+20h], edi
.text:0040E410                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:0040E413                 call    FindClose
.text:0040E418                 sub     esp, 4
.text:0040E41B                 mov     esi, [esp+18Ch+var_170]
.text:0040E41F                 test    esi, esi
.text:0040E421                 jnz     loc_40E38D
.text:0040E427                 cld
.text:0040E428                 mov     eax, [esp+18Ch+var_170]
.text:0040E42C                 mov     ecx, 9
.text:0040E431                 mov     edi, ebx
.text:0040E433                 rep stosd
.text:0040E435                 mov     ebp, [esp+18Ch+var_164]
.text:0040E439                 mov     [ebx], ebp
.text:0040E43B                 jmp     loc_40E38D
.text:0040E43B sub_40E2F0      endp
.text:0040E43B
.text:0040E43B ; ---------------------------------------------------------------------------
.text:0040E440 ; const CHAR aFindfirstfilee[]
.text:0040E440 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_40E460+23↓o
.text:0040E451 ; const char asc_40E451[]
.text:0040E451 asc_40E451      db '\*',0               ; DATA XREF: sub_40E460:loc_40E4ED↓o
.text:0040E454                 align 10h
.text:0040E460
.text:0040E460 ; =============== S U B R O U T I N E =======================================
.text:0040E460
.text:0040E460
.text:0040E460 ; int __cdecl sub_40E460(char *Str)
.text:0040E460 sub_40E460      proc near               ; CODE XREF: .text:0040F593↓p
.text:0040E460                                         ; sub_40F890+3FA↓p ...
.text:0040E460
.text:0040E460 lpLibFileName   = dword ptr -18Ch
.text:0040E460 lpProcName      = dword ptr -188h
.text:0040E460 var_184         = dword ptr -184h
.text:0040E460 var_180         = dword ptr -180h
.text:0040E460 var_17C         = dword ptr -17Ch
.text:0040E460 var_178         = dword ptr -178h
.text:0040E460 var_164         = dword ptr -164h
.text:0040E460 hModule         = dword ptr -160h
.text:0040E460 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040E460 Str             = dword ptr  4
.text:0040E460
.text:0040E460                 push    ebp
.text:0040E461                 push    edi
.text:0040E462                 xor     edi, edi
.text:0040E464                 push    esi
.text:0040E465                 push    ebx
.text:0040E466                 sub     esp, 17Ch
.text:0040E46C                 mov     [esp+18Ch+lpLibFileName], offset ModuleName ; lpLibFileName
.text:0040E473                 call    LoadLibraryA
.text:0040E478                 sub     esp, 4
.text:0040E47B                 mov     [esp+18Ch+hModule], eax
.text:0040E47F                 mov     ecx, [esp+18Ch+hModule]
.text:0040E483                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040E48B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040E48E                 call    GetProcAddress
.text:0040E493                 sub     esp, 8
.text:0040E496                 mov     edx, [esp+18Ch+Str]
.text:0040E49D                 mov     [esp+18Ch+var_164], eax
.text:0040E4A1                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:0040E4A4                 call    strlen
.text:0040E4A9                 lea     edx, [eax+5]
.text:0040E4AC                 mov     ebx, eax
.text:0040E4AE                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:0040E4B1                 call    malloc
.text:0040E4B6                 mov     esi, eax
.text:0040E4B8                 test    esi, esi
.text:0040E4BA                 mov     eax, 1
.text:0040E4BF                 jz      loc_40E59D
.text:0040E4C5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040E4C8                 mov     ebp, [esp+18Ch+Str]
.text:0040E4CF                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:0040E4D3                 call    strcpy
.text:0040E4D8                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040E4DD                 cmp     al, 2Fh ; '/'
.text:0040E4DF                 jz      loc_40E5CB
.text:0040E4E5                 cmp     al, 5Ch ; '\'
.text:0040E4E7                 jz      loc_40E5CB
.text:0040E4ED
.text:0040E4ED loc_40E4ED:                             ; CODE XREF: sub_40E460+170↓j
.text:0040E4ED                 mov     [esp+18Ch+lpProcName], offset asc_40E451 ; "\\*"
.text:0040E4F5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040E4F8                 call    strcat
.text:0040E4FD                 mov     eax, [esp+18Ch+var_164]
.text:0040E501                 test    eax, eax
.text:0040E503                 jz      loc_40E5C5
.text:0040E509                 mov     [esp+18Ch+var_178], 0
.text:0040E511                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040E515                 mov     [esp+18Ch+var_17C], 0
.text:0040E51D                 mov     [esp+18Ch+var_180], 1
.text:0040E525                 mov     [esp+18Ch+var_184], ebp
.text:0040E529                 mov     [esp+18Ch+lpProcName], 0
.text:0040E531                 mov     [esp+18Ch+lpLibFileName], esi
.text:0040E534                 call    [esp+18Ch+var_164]
.text:0040E538                 sub     esp, 18h
.text:0040E53B                 mov     ebx, eax
.text:0040E53D                 cmp     eax, 0FFFFFFFFh
.text:0040E540                 jz      short loc_40E5A8
.text:0040E542                 lea     esi, [esi+0]
.text:0040E549                 lea     edi, [edi+0]
.text:0040E550
.text:0040E550 loc_40E550:                             ; CODE XREF: sub_40E460+109↓j
.text:0040E550                                         ; sub_40E460+161↓j
.text:0040E550                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:0040E555                 jz      short loc_40E558
.text:0040E557                 inc     edi
.text:0040E558
.text:0040E558 loc_40E558:                             ; CODE XREF: sub_40E460+F5↑j
.text:0040E558                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040E55C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040E55F                 call    FindNextFileA
.text:0040E564                 sub     esp, 8
.text:0040E567                 test    eax, eax
.text:0040E569                 jnz     short loc_40E550
.text:0040E56B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040E56E                 call    FindClose
.text:0040E573                 sub     esp, 4
.text:0040E576                 mov     esi, [esp+18Ch+hModule]
.text:0040E57A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040E57D                 call    FreeLibrary
.text:0040E582                 sub     esp, 4
.text:0040E585                 mov     ebx, [esp+18Ch+Str]
.text:0040E58C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040E58F                 call    sub_40D320
.text:0040E594                 test    eax, eax
.text:0040E596                 jz      short loc_40E59B
.text:0040E598                 add     edi, 2
.text:0040E59B
.text:0040E59B loc_40E59B:                             ; CODE XREF: sub_40E460+136↑j
.text:0040E59B                 mov     eax, edi
.text:0040E59D
.text:0040E59D loc_40E59D:                             ; CODE XREF: sub_40E460+5F↑j
.text:0040E59D                                         ; sub_40E460+163↓j
.text:0040E59D                 add     esp, 17Ch
.text:0040E5A3                 pop     ebx
.text:0040E5A4                 pop     esi
.text:0040E5A5                 pop     edi
.text:0040E5A6                 pop     ebp
.text:0040E5A7                 retn
.text:0040E5A8 ; ---------------------------------------------------------------------------
.text:0040E5A8
.text:0040E5A8 loc_40E5A8:                             ; CODE XREF: sub_40E460+E0↑j
.text:0040E5A8                                         ; sub_40E460+169↓j
.text:0040E5A8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040E5AC                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040E5AF                 call    FindFirstFileA
.text:0040E5B4                 mov     ebx, eax
.text:0040E5B6                 sub     esp, 8
.text:0040E5B9                 cmp     ebx, 0FFFFFFFFh
.text:0040E5BC                 mov     eax, 2
.text:0040E5C1                 jnz     short loc_40E550
.text:0040E5C3                 jmp     short loc_40E59D
.text:0040E5C5 ; ---------------------------------------------------------------------------
.text:0040E5C5
.text:0040E5C5 loc_40E5C5:                             ; CODE XREF: sub_40E460+A3↑j
.text:0040E5C5                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040E5C9                 jmp     short loc_40E5A8
.text:0040E5CB ; ---------------------------------------------------------------------------
.text:0040E5CB
.text:0040E5CB loc_40E5CB:                             ; CODE XREF: sub_40E460+7F↑j
.text:0040E5CB                                         ; sub_40E460+87↑j
.text:0040E5CB                 mov     byte ptr [ebx+esi-1], 0
.text:0040E5D0                 jmp     loc_40E4ED
.text:0040E5D0 sub_40E460      endp
.text:0040E5D0
.text:0040E5D0 ; ---------------------------------------------------------------------------
.text:0040E5D5                 align 10h
.text:0040E5E0
.text:0040E5E0 ; =============== S U B R O U T I N E =======================================
.text:0040E5E0
.text:0040E5E0
.text:0040E5E0 ; int __cdecl sub_40E5E0(HANDLE hNamedPipe, int)
.text:0040E5E0 sub_40E5E0      proc near               ; CODE XREF: sub_40D5F0+2767↓p
.text:0040E5E0                                         ; sub_40FE10+52↓j
.text:0040E5E0
.text:0040E5E0 hFile           = dword ptr -0ECh
.text:0040E5E0 lpFileInformation= dword ptr -0E8h
.text:0040E5E0 nBufferSize     = dword ptr -0E4h
.text:0040E5E0 lpBytesRead     = dword ptr -0E0h
.text:0040E5E0 lpTotalBytesAvail= dword ptr -0DCh
.text:0040E5E0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:0040E5E0 var_C4          = dword ptr -0C4h
.text:0040E5E0 var_C0          = dword ptr -0C0h
.text:0040E5E0 var_BC          = dword ptr -0BCh
.text:0040E5E0 var_B8          = dword ptr -0B8h
.text:0040E5E0 var_B4          = dword ptr -0B4h
.text:0040E5E0 var_B0          = dword ptr -0B0h
.text:0040E5E0 var_AC          = dword ptr -0ACh
.text:0040E5E0 var_A8          = dword ptr -0A8h
.text:0040E5E0 TotalBytesAvail = dword ptr -0A0h
.text:0040E5E0 var_9C          = dword ptr -9Ch
.text:0040E5E0 var_98          = dword ptr -98h
.text:0040E5E0 var_94          = dword ptr -94h
.text:0040E5E0 var_90          = dword ptr -90h
.text:0040E5E0 var_8C          = dword ptr -8Ch
.text:0040E5E0 var_88          = dword ptr -88h
.text:0040E5E0 var_84          = dword ptr -84h
.text:0040E5E0 var_80          = dword ptr -80h
.text:0040E5E0 var_7C          = dword ptr -7Ch
.text:0040E5E0 var_78          = dword ptr -78h
.text:0040E5E0 var_74          = dword ptr -74h
.text:0040E5E0 var_70          = dword ptr -70h
.text:0040E5E0 var_6C          = dword ptr -6Ch
.text:0040E5E0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:0040E5E0 hNamedPipe      = dword ptr  4
.text:0040E5E0 arg_4           = dword ptr  8
.text:0040E5E0
.text:0040E5E0                 push    ebp
.text:0040E5E1                 mov     eax, 0FFFFFFFFh
.text:0040E5E6                 push    edi
.text:0040E5E7                 push    esi
.text:0040E5E8                 push    ebx
.text:0040E5E9                 sub     esp, 0DCh
.text:0040E5EF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:0040E5F6                 mov     ebp, [esp+0ECh+arg_4]
.text:0040E5FD                 cmp     esi, 0FFFFFFFFh
.text:0040E600                 jz      loc_40E981
.text:0040E606                 cld
.text:0040E607                 xor     eax, eax
.text:0040E609                 lea     ebx, [esp+0ECh+FileInformation]
.text:0040E610                 mov     ecx, 0Dh
.text:0040E615                 mov     edi, ebx
.text:0040E617                 rep stosd
.text:0040E619                 mov     dword ptr [ebp+18h], 1
.text:0040E620                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040E623                 call    GetFileType
.text:0040E628                 sub     esp, 4
.text:0040E62B                 xor     edx, edx
.text:0040E62D                 cmp     eax, 2
.text:0040E630                 jz      loc_40EA60
.text:0040E636                 cmp     eax, 3
.text:0040E639                 jz      loc_40EA50
.text:0040E63F
.text:0040E63F loc_40E63F:                             ; CODE XREF: sub_40E5E0+475↓j
.text:0040E63F                                         ; sub_40E5E0+485↓j
.text:0040E63F                 or      [ebp+0], edx
.text:0040E642                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:0040E646                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040E649                 call    GetFileInformationByHandle
.text:0040E64E                 sub     esp, 8
.text:0040E651                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040E658                 test    ecx, ecx
.text:0040E65A                 jnz     short loc_40E690
.text:0040E65C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040E663                 test    edx, edx
.text:0040E665                 jnz     short loc_40E690
.text:0040E667                 mov     edx, [ebp+0]
.text:0040E66A                 and     edx, 0F000h
.text:0040E670                 cmp     edx, 1000h
.text:0040E676                 jz      loc_40E9E6
.text:0040E67C
.text:0040E67C loc_40E67C:                             ; CODE XREF: sub_40E5E0+459↓j
.text:0040E67C                                         ; sub_40E5E0+465↓j
.text:0040E67C                 test    ecx, ecx
.text:0040E67E                 jnz     short loc_40E690
.text:0040E680                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040E687                 test    edx, edx
.text:0040E689                 jz      loc_40E9C4
.text:0040E68F                 nop
.text:0040E690
.text:0040E690 loc_40E690:                             ; CODE XREF: sub_40E5E0+7A↑j
.text:0040E690                                         ; sub_40E5E0+85↑j ...
.text:0040E690                 cld
.text:0040E691                 mov     esi, ebx
.text:0040E693                 mov     dword ptr [ebp+14h], 0
.text:0040E69A                 lea     edi, [esp+0ECh+var_9C]
.text:0040E69E                 mov     ecx, 0Dh
.text:0040E6A3                 rep movsd
.text:0040E6A5                 xor     ebx, ebx
.text:0040E6A7                 xor     edi, edi
.text:0040E6A9                 mov     edx, [esp+0ECh+var_6C]
.text:0040E6B0                 mov     esi, [esp+0ECh+var_70]
.text:0040E6B4                 or      edx, ebx
.text:0040E6B6                 mov     ebx, [esp+0ECh+var_9C]
.text:0040E6BA                 mov     [ebp+8], edx
.text:0040E6BD                 or      edi, esi
.text:0040E6BF                 xor     edx, edx
.text:0040E6C1                 mov     [ebp+0Ch], edi
.text:0040E6C4                 test    bl, 10h
.text:0040E6C7                 mov     esi, [esp+0ECh+var_80]
.text:0040E6CB                 setz    dl
.text:0040E6CE                 mov     [ebp+10h], esi
.text:0040E6D1                 dec     edx
.text:0040E6D2                 and     edx, 0FFFFC000h
.text:0040E6D8                 add     edx, 8000h
.text:0040E6DE                 or      edx, 124h
.text:0040E6E4                 test    bl, 1
.text:0040E6E7                 movzx   eax, dx
.text:0040E6EA                 jnz     short loc_40E6F1
.text:0040E6EC                 or      eax, 92h
.text:0040E6F1
.text:0040E6F1 loc_40E6F1:                             ; CODE XREF: sub_40E5E0+10A↑j
.text:0040E6F1                 or      [ebp+0], eax
.text:0040E6F4                 xor     edx, edx
.text:0040E6F6                 mov     ebx, [esp+0ECh+var_7C]
.text:0040E6FA                 mov     ecx, [esp+0ECh+var_78]
.text:0040E6FE                 mov     eax, edx
.text:0040E700                 xor     esi, esi
.text:0040E702                 mov     edx, [esp+0ECh+var_8C]
.text:0040E706                 mov     edi, ebx
.text:0040E708                 or      eax, edi
.text:0040E70A                 mov     [esp+0ECh+var_A8], eax
.text:0040E70E                 mov     ebx, ecx
.text:0040E710                 mov     edi, [esp+0ECh+var_74]
.text:0040E714                 or      ebx, esi
.text:0040E716                 mov     esi, [esp+0ECh+var_A8]
.text:0040E71A                 mov     [esp+0ECh+var_AC], ebx
.text:0040E71E                 xor     ebx, ebx
.text:0040E720                 mov     ecx, [esp+0ECh+var_AC]
.text:0040E724                 mov     [ebp+34h], esi
.text:0040E727                 mov     esi, [esp+0ECh+var_90]
.text:0040E72B                 mov     [ebp+18h], edi
.text:0040E72E                 xor     edi, edi
.text:0040E730                 or      esi, ebx
.text:0040E732                 mov     [ebp+30h], ecx
.text:0040E735                 or      edi, edx
.text:0040E737                 mov     edx, esi
.text:0040E739                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040E741                 sub     edx, 0D53E8000h
.text:0040E747                 mov     ebx, edi
.text:0040E749                 sbb     ebx, 19DB1DEh
.text:0040E74F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040E753                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040E75B                 mov     [esp+0ECh+hFile], edx
.text:0040E75E                 call    sub_4118B0
.text:0040E763                 mov     ecx, eax
.text:0040E765                 shr     eax, 1Fh
.text:0040E768                 dec     eax
.text:0040E769                 and     ecx, eax
.text:0040E76B                 mov     [ebp+38h], ecx
.text:0040E76E                 mov     [esp+0ECh+hFile], esi
.text:0040E771                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040E775                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040E77D                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040E785                 call    sub_411730
.text:0040E78A                 lea     ebx, [eax+eax*4]
.text:0040E78D                 xor     ecx, ecx
.text:0040E78F                 lea     esi, [ebx+ebx*4]
.text:0040E792                 shl     esi, 2
.text:0040E795                 mov     edi, esi
.text:0040E797                 shr     edi, 1Fh
.text:0040E79A                 dec     edi
.text:0040E79B                 and     edi, esi
.text:0040E79D                 mov     [ebp+3Ch], edi
.text:0040E7A0                 mov     esi, [esp+0ECh+var_98]
.text:0040E7A4                 xor     edi, edi
.text:0040E7A6                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040E7AE                 mov     edx, [esp+0ECh+var_94]
.text:0040E7B2                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040E7BA                 or      esi, ecx
.text:0040E7BC                 or      edi, edx
.text:0040E7BE                 mov     edx, esi
.text:0040E7C0                 mov     ecx, edi
.text:0040E7C2                 sub     edx, 0D53E8000h
.text:0040E7C8                 sbb     ecx, 19DB1DEh
.text:0040E7CE                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040E7D2                 mov     [esp+0ECh+hFile], edx
.text:0040E7D5                 call    sub_4118B0
.text:0040E7DA                 mov     ebx, eax
.text:0040E7DC                 shr     eax, 1Fh
.text:0040E7DF                 dec     eax
.text:0040E7E0                 and     ebx, eax
.text:0040E7E2                 mov     [ebp+48h], ebx
.text:0040E7E5                 xor     ebx, ebx
.text:0040E7E7                 mov     [esp+0ECh+hFile], esi
.text:0040E7EA                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040E7EE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040E7F6                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040E7FE                 call    sub_411730
.text:0040E803                 lea     ecx, [eax+eax*4]
.text:0040E806                 lea     esi, [ecx+ecx*4]
.text:0040E809                 shl     esi, 2
.text:0040E80C                 mov     edi, esi
.text:0040E80E                 shr     edi, 1Fh
.text:0040E811                 dec     edi
.text:0040E812                 and     edi, esi
.text:0040E814                 mov     [ebp+4Ch], edi
.text:0040E817                 mov     esi, [esp+0ECh+var_88]
.text:0040E81B                 xor     edi, edi
.text:0040E81D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040E825                 mov     edx, [esp+0ECh+var_84]
.text:0040E829                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040E831                 or      esi, ebx
.text:0040E833                 or      edi, edx
.text:0040E835                 mov     edx, esi
.text:0040E837                 mov     ebx, edi
.text:0040E839                 sub     edx, 0D53E8000h
.text:0040E83F                 sbb     ebx, 19DB1DEh
.text:0040E845                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040E849                 mov     [esp+0ECh+hFile], edx
.text:0040E84C                 call    sub_4118B0
.text:0040E851                 mov     ecx, eax
.text:0040E853                 shr     eax, 1Fh
.text:0040E856                 dec     eax
.text:0040E857                 and     ecx, eax
.text:0040E859                 mov     [ebp+40h], ecx
.text:0040E85C                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040E860                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040E868                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040E870                 mov     [esp+0ECh+hFile], esi
.text:0040E873                 call    sub_411730
.text:0040E878                 mov     dword ptr [ebp+50h], 200h
.text:0040E87F                 lea     ebx, [eax+eax*4]
.text:0040E882                 mov     edi, [esp+0ECh+var_A8]
.text:0040E886                 lea     edx, [ebx+ebx*4]
.text:0040E889                 mov     eax, [esp+0ECh+var_AC]
.text:0040E88D                 shl     edx, 2
.text:0040E890                 mov     ecx, edx
.text:0040E892                 shr     ecx, 1Fh
.text:0040E895                 dec     ecx
.text:0040E896                 and     ecx, edx
.text:0040E898                 test    edi, edi
.text:0040E89A                 mov     edx, [esp+0ECh+var_A8]
.text:0040E89E                 mov     [ebp+44h], ecx
.text:0040E8A1                 js      loc_40E9B7
.text:0040E8A7
.text:0040E8A7 loc_40E8A7:                             ; CODE XREF: sub_40E5E0+3DF↓j
.text:0040E8A7                 mov     edi, [esp+0ECh+var_AC]
.text:0040E8AB                 xor     esi, esi
.text:0040E8AD                 mov     ecx, eax
.text:0040E8AF                 shrd    ecx, edx, 9
.text:0040E8B3                 mov     ebx, edx
.text:0040E8B5                 mov     eax, esi
.text:0040E8B7                 and     edi, 1FFh
.text:0040E8BD                 sar     ebx, 9
.text:0040E8C0                 or      eax, edi
.text:0040E8C2                 jz      short loc_40E8CA
.text:0040E8C4                 add     ecx, 1
.text:0040E8C7                 adc     ebx, 0
.text:0040E8CA
.text:0040E8CA loc_40E8CA:                             ; CODE XREF: sub_40E5E0+2E2↑j
.text:0040E8CA                 mov     [ebp+5Ch], ebx
.text:0040E8CD                 mov     esi, dword_413090
.text:0040E8D3                 xor     edi, edi
.text:0040E8D5                 mov     [ebp+58h], ecx
.text:0040E8D8                 mov     ebx, dword_413090
.text:0040E8DE                 mov     ecx, [esp+0ECh+var_A8]
.text:0040E8E2                 mov     edx, [esp+0ECh+var_AC]
.text:0040E8E6                 mov     [ebp+50h], ebx
.text:0040E8E9                 shr     ebx, 9
.text:0040E8EC                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040E8F0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040E8F4                 mov     [esp+0ECh+nBufferSize], esi
.text:0040E8F8                 mov     [esp+0ECh+hFile], edx
.text:0040E8FB                 call    sub_4118B0
.text:0040E900                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040E904                 mov     ecx, [esp+0ECh+var_AC]
.text:0040E908                 mov     edi, [esp+0ECh+var_A8]
.text:0040E90C                 mov     [esp+0ECh+var_BC], ebx
.text:0040E910                 mov     [esp+0ECh+var_B4], eax
.text:0040E914                 mov     [esp+0ECh+var_B0], edx
.text:0040E918                 mov     [esp+0ECh+var_B8], 0
.text:0040E920                 mov     [esp+0ECh+nBufferSize], esi
.text:0040E924                 mov     [esp+0ECh+hFile], ecx
.text:0040E927                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040E92B                 call    sub_411730
.text:0040E930                 mov     ebx, edx
.text:0040E932                 or      ebx, eax
.text:0040E934                 jz      short loc_40E990
.text:0040E936                 mov     edi, [esp+0ECh+var_B4]
.text:0040E93A                 mov     esi, [esp+0ECh+var_B0]
.text:0040E93E                 mov     eax, [esp+0ECh+var_BC]
.text:0040E942                 mov     [esp+0ECh+var_C4], edi
.text:0040E946                 mov     ecx, [esp+0ECh+var_B8]
.text:0040E94A                 add     [esp+0ECh+var_C4], 1
.text:0040E94F                 mov     [esp+0ECh+var_C0], esi
.text:0040E953                 adc     [esp+0ECh+var_C0], 0
.text:0040E958                 mul     [esp+0ECh+var_C4]
.text:0040E95C                 mov     edi, [esp+0ECh+var_C0]
.text:0040E960                 mov     ebx, edx
.text:0040E962                 mov     edx, [esp+0ECh+var_C4]
.text:0040E966                 mov     esi, eax
.text:0040E968                 mov     eax, ebx
.text:0040E96A                 imul    ecx, edx
.text:0040E96D                 mov     edx, [esp+0ECh+var_BC]
.text:0040E971                 imul    edx, edi
.text:0040E974                 add     eax, ecx
.text:0040E976                 lea     edi, [edx+eax]
.text:0040E979
.text:0040E979 loc_40E979:                             ; CODE XREF: sub_40E5E0+3D5↓j
.text:0040E979                 mov     [ebp+58h], esi
.text:0040E97C                 xor     eax, eax
.text:0040E97E                 mov     [ebp+5Ch], edi
.text:0040E981
.text:0040E981 loc_40E981:                             ; CODE XREF: sub_40E5E0+20↑j
.text:0040E981                 add     esp, 0DCh
.text:0040E987                 pop     ebx
.text:0040E988                 pop     esi
.text:0040E989                 pop     edi
.text:0040E98A                 pop     ebp
.text:0040E98B                 retn
.text:0040E98B ; ---------------------------------------------------------------------------
.text:0040E98C                 align 10h
.text:0040E990
.text:0040E990 loc_40E990:                             ; CODE XREF: sub_40E5E0+354↑j
.text:0040E990                 mov     eax, [esp+0ECh+var_B4]
.text:0040E994                 mov     edi, [esp+0ECh+var_B8]
.text:0040E998                 mov     ebx, [esp+0ECh+var_B4]
.text:0040E99C                 mul     [esp+0ECh+var_BC]
.text:0040E9A0                 mov     ecx, [esp+0ECh+var_BC]
.text:0040E9A4                 imul    ebx, edi
.text:0040E9A7                 mov     esi, eax
.text:0040E9A9                 mov     eax, [esp+0ECh+var_B0]
.text:0040E9AD                 add     edx, ebx
.text:0040E9AF                 imul    ecx, eax
.text:0040E9B2                 lea     edi, [ecx+edx]
.text:0040E9B5                 jmp     short loc_40E979
.text:0040E9B7 ; ---------------------------------------------------------------------------
.text:0040E9B7
.text:0040E9B7 loc_40E9B7:                             ; CODE XREF: sub_40E5E0+2C1↑j
.text:0040E9B7                 add     eax, 1FFh
.text:0040E9BC                 adc     edx, 0
.text:0040E9BF                 jmp     loc_40E8A7
.text:0040E9C4 ; ---------------------------------------------------------------------------
.text:0040E9C4
.text:0040E9C4 loc_40E9C4:                             ; CODE XREF: sub_40E5E0+A9↑j
.text:0040E9C4                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040E9C7                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040E9CE                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:0040E9D2                 call    GetFileSize
.text:0040E9D7                 sub     esp, 8
.text:0040E9DA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:0040E9E1                 jmp     loc_40E690
.text:0040E9E6 ; ---------------------------------------------------------------------------
.text:0040E9E6
.text:0040E9E6 loc_40E9E6:                             ; CODE XREF: sub_40E5E0+96↑j
.text:0040E9E6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:0040E9EE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040E9F2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:0040E9FA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:0040E9FE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:0040EA06                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0040EA0E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:0040EA16                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:0040EA19                 call    PeekNamedPipe
.text:0040EA1E                 sub     esp, 18h
.text:0040EA21                 test    eax, eax
.text:0040EA23                 jz      short loc_40EA3E
.text:0040EA25                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040EA29                 xor     eax, eax
.text:0040EA2B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:0040EA32                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:0040EA39                 jmp     loc_40E67C
.text:0040EA3E ; ---------------------------------------------------------------------------
.text:0040EA3E
.text:0040EA3E loc_40EA3E:                             ; CODE XREF: sub_40E5E0+443↑j
.text:0040EA3E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040EA45                 jmp     loc_40E67C
.text:0040EA45 ; ---------------------------------------------------------------------------
.text:0040EA4A                 align 10h
.text:0040EA50
.text:0040EA50 loc_40EA50:                             ; CODE XREF: sub_40E5E0+59↑j
.text:0040EA50                 mov     edx, 1000h
.text:0040EA55                 jmp     loc_40E63F
.text:0040EA55 ; ---------------------------------------------------------------------------
.text:0040EA5A                 align 10h
.text:0040EA60
.text:0040EA60 loc_40EA60:                             ; CODE XREF: sub_40E5E0+50↑j
.text:0040EA60                 mov     edx, 2000h
.text:0040EA65                 jmp     loc_40E63F
.text:0040EA65 sub_40E5E0      endp
.text:0040EA65
.text:0040EA65 ; ---------------------------------------------------------------------------
.text:0040EA6A aLnk_0          db '.lnk',0             ; DATA XREF: sub_40EAB0+E0↓o
.text:0040EA6A                                         ; .text:0040F15A↓o ...
.text:0040EA6F ; const CHAR aKernel32[]
.text:0040EA6F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_40EAB0+12D↓o
.text:0040EA6F                                         ; .text:0040F80B↓o
.text:0040EA78 ; const CHAR aGetcompressedf[]
.text:0040EA78 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:0040EA78                                         ; DATA XREF: sub_40EAB0+13E↓o
.text:0040EA78                                         ; .text:0040F81C↓o
.text:0040EA8F ; const CHAR aGetbinarytypea[]
.text:0040EA8F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_40EAB0+333↓o
.text:0040EA8F                                         ; .text:0040F1B6↓o ...
.text:0040EA9E ; const char aPathext[]
.text:0040EA9E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_40EAB0:loc_40EE97↓o
.text:0040EA9E                                         ; .text:loc_40F260↓o ...
.text:0040EAA6                 align 10h
.text:0040EAB0
.text:0040EAB0 ; =============== S U B R O U T I N E =======================================
.text:0040EAB0
.text:0040EAB0
.text:0040EAB0 ; int __cdecl sub_40EAB0(char *String1, int)
.text:0040EAB0 sub_40EAB0      proc near               ; CODE XREF: sub_40F890+3CD↓p
.text:0040EAB0                                         ; sub_40D5F0+2785↓p
.text:0040EAB0
.text:0040EAB0 Str             = dword ptr -6Ch
.text:0040EAB0 lpProcName      = dword ptr -68h
.text:0040EAB0 var_64          = dword ptr -64h
.text:0040EAB0 var_60          = dword ptr -60h
.text:0040EAB0 var_5C          = dword ptr -5Ch
.text:0040EAB0 var_4C          = dword ptr -4Ch
.text:0040EAB0 var_48          = dword ptr -48h
.text:0040EAB0 var_44          = dword ptr -44h
.text:0040EAB0 var_40          = dword ptr -40h
.text:0040EAB0 var_3C          = dword ptr -3Ch
.text:0040EAB0 var_38          = dword ptr -38h
.text:0040EAB0 lpRootPathName  = dword ptr -30h
.text:0040EAB0 var_2C          = byte ptr -2Ch
.text:0040EAB0 var_28          = dword ptr -28h
.text:0040EAB0 var_24          = dword ptr -24h
.text:0040EAB0 var_20          = dword ptr -20h
.text:0040EAB0 var_1C          = dword ptr -1Ch
.text:0040EAB0 var_18          = byte ptr -18h
.text:0040EAB0 String1         = dword ptr  4
.text:0040EAB0 arg_4           = dword ptr  8
.text:0040EAB0
.text:0040EAB0                 push    ebp
.text:0040EAB1                 push    edi
.text:0040EAB2                 push    esi
.text:0040EAB3                 push    ebx
.text:0040EAB4                 sub     esp, 5Ch
.text:0040EAB7                 mov     edx, [esp+6Ch+String1]
.text:0040EABB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040EABE                 call    sub_40CF50
.text:0040EAC3                 mov     [esp+6Ch+Str], eax
.text:0040EAC6                 call    sub_40AFF0
.text:0040EACB                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040EACF                 test    eax, eax
.text:0040EAD1                 jz      loc_40ED03
.text:0040EAD7                 mov     [esp+6Ch+Str], eax ; Str
.text:0040EADA                 call    strlen
.text:0040EADF                 mov     edx, [esp+6Ch+arg_4]
.text:0040EAE3                 mov     ebx, eax
.text:0040EAE5                 mov     esi, [edx+0Ch]
.text:0040EAE8                 mov     edi, [edx+8]
.text:0040EAEB                 mov     eax, esi
.text:0040EAED                 or      eax, edi
.text:0040EAEF                 jz      loc_40EF10
.text:0040EAF5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:0040EAF9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040EAFC                 call    GetDriveTypeA
.text:0040EB01                 sub     esp, 4
.text:0040EB04                 cmp     eax, 4
.text:0040EB07                 jz      loc_40EF10
.text:0040EB0D
.text:0040EB0D loc_40EB0D:                             ; CODE XREF: sub_40EAB0+48A↓j
.text:0040EB0D                                         ; sub_40EAB0+4B2↓j
.text:0040EB0D                 mov     edx, [esp+6Ch+arg_4]
.text:0040EB11                 mov     esi, [edx+14h]
.text:0040EB14                 mov     edi, [edx+10h]
.text:0040EB17                 mov     ecx, esi
.text:0040EB19                 or      ecx, edi
.text:0040EB1B                 jnz     short loc_40EB45
.text:0040EB1D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:0040EB21                 xor     esi, esi
.text:0040EB23                 xor     edi, edi
.text:0040EB25                 test    ebp, ebp
.text:0040EB27                 jz      short loc_40EB37
.text:0040EB29                 movzx   ebx, byte ptr [ebp+0]
.text:0040EB2D                 test    bl, bl
.text:0040EB2F                 mov     cl, bl
.text:0040EB31                 jnz     loc_40EEC1
.text:0040EB37
.text:0040EB37 loc_40EB37:                             ; CODE XREF: sub_40EAB0+77↑j
.text:0040EB37                 xor     eax, eax
.text:0040EB39                 xor     edx, edx
.text:0040EB3B
.text:0040EB3B loc_40EB3B:                             ; CODE XREF: sub_40EAB0+458↓j
.text:0040EB3B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040EB3F                 mov     [ebp+10h], eax
.text:0040EB42                 mov     [ebp+14h], edx
.text:0040EB45
.text:0040EB45 loc_40EB45:                             ; CODE XREF: sub_40EAB0+6B↑j
.text:0040EB45                 mov     edi, [esp+6Ch+String1]
.text:0040EB49                 xor     ebx, ebx
.text:0040EB4B                 test    edi, edi
.text:0040EB4D                 jz      loc_40EDC3
.text:0040EB53                 mov     esi, [esp+6Ch+String1]
.text:0040EB57                 cmp     byte ptr [esi], 0
.text:0040EB5A                 jnz     loc_40EDD0
.text:0040EB60
.text:0040EB60 loc_40EB60:                             ; CODE XREF: sub_40EAB0+38C↓j
.text:0040EB60                                         ; sub_40EAB0+397↓j
.text:0040EB60                 mov     ebp, [esp+6Ch+String1]
.text:0040EB64                 test    ebp, ebp
.text:0040EB66                 jz      loc_40EDC3
.text:0040EB6C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040EB74                 mov     edi, [esp+6Ch+String1]
.text:0040EB78                 mov     [esp+6Ch+Str], edi ; Str
.text:0040EB7B                 call    strrchr
.text:0040EB80                 test    eax, eax
.text:0040EB82                 jz      loc_40EDC3
.text:0040EB88                 cld
.text:0040EB89                 mov     ecx, 5
.text:0040EB8E                 mov     esi, eax
.text:0040EB90                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040EB95                 repe cmpsb
.text:0040EB97                 setz    cl
.text:0040EB9A                 movzx   eax, cl
.text:0040EB9D                 lea     esi, [esi+0]
.text:0040EBA0
.text:0040EBA0 loc_40EBA0:                             ; CODE XREF: sub_40EAB0+315↓j
.text:0040EBA0                 test    eax, eax
.text:0040EBA2                 jz      short loc_40EBAA
.text:0040EBA4                 or      ebx, 0A000h
.text:0040EBAA
.text:0040EBAA loc_40EBAA:                             ; CODE XREF: sub_40EAB0+F2↑j
.text:0040EBAA                 mov     esi, [esp+6Ch+arg_4]
.text:0040EBAE                 xor     ecx, ecx
.text:0040EBB0                 mov     edi, ds:dword_414590
.text:0040EBB6                 or      [esi], ebx
.text:0040EBB8                 mov     ebx, [esi+14h]
.text:0040EBBB                 mov     ebp, [esi+10h]
.text:0040EBBE                 mov     eax, ebx
.text:0040EBC0                 xor     eax, ecx
.text:0040EBC2                 xor     ebp, edi
.text:0040EBC4                 or      eax, ebp
.text:0040EBC6                 jnz     loc_40ED50
.text:0040EBCC
.text:0040EBCC loc_40EBCC:                             ; CODE XREF: sub_40EAB0+30E↓j
.text:0040EBCC                 mov     ecx, dword_413090
.text:0040EBD2                 xor     esi, esi
.text:0040EBD4                 xor     edi, edi
.text:0040EBD6                 mov     edx, [esp+6Ch+arg_4]
.text:0040EBDA                 mov     [edx+50h], ecx
.text:0040EBDD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:0040EBE4                 call    LoadLibraryA
.text:0040EBE9                 sub     esp, 4
.text:0040EBEC                 mov     ebp, eax
.text:0040EBEE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040EBF6                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040EBF9                 call    GetProcAddress
.text:0040EBFE                 sub     esp, 8
.text:0040EC01                 test    eax, eax
.text:0040EC03                 jz      short loc_40EC38
.text:0040EC05                 mov     ebx, [esp+6Ch+String1]
.text:0040EC09                 lea     esi, [esp+6Ch+var_2C]
.text:0040EC0D                 mov     [esp+6Ch+lpProcName], esi
.text:0040EC11                 mov     [esp+6Ch+Str], ebx
.text:0040EC14                 call    eax
.text:0040EC16                 sub     esp, 8
.text:0040EC19                 mov     ebx, eax
.text:0040EC1B                 cmp     eax, 0FFFFFFFFh
.text:0040EC1E                 jz      loc_40ED39
.text:0040EC24
.text:0040EC24 loc_40EC24:                             ; CODE XREF: sub_40EAB0+29A↓j
.text:0040EC24                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:0040EC28                 mov     ecx, ebx
.text:0040EC2A                 xor     edi, edi
.text:0040EC2C                 xor     ebx, ebx
.text:0040EC2E                 mov     edx, esi
.text:0040EC30                 mov     esi, ecx
.text:0040EC32                 or      esi, edi
.text:0040EC34                 mov     edi, ebx
.text:0040EC36                 or      edi, edx
.text:0040EC38
.text:0040EC38 loc_40EC38:                             ; CODE XREF: sub_40EAB0+153↑j
.text:0040EC38                                         ; sub_40EAB0+294↓j
.text:0040EC38                 test    ebp, ebp
.text:0040EC3A                 jz      short loc_40EC47
.text:0040EC3C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040EC3F                 call    FreeLibrary
.text:0040EC44                 sub     esp, 4
.text:0040EC47
.text:0040EC47 loc_40EC47:                             ; CODE XREF: sub_40EAB0+18A↑j
.text:0040EC47                 mov     ebp, edi
.text:0040EC49                 mov     edx, ebp
.text:0040EC4B                 mov     edi, esi
.text:0040EC4D                 or      edx, esi
.text:0040EC4F                 jnz     short loc_40EC5B
.text:0040EC51                 mov     eax, [esp+6Ch+arg_4]
.text:0040EC55                 mov     edi, [eax+30h]
.text:0040EC58                 mov     ebp, [eax+34h]
.text:0040EC5B
.text:0040EC5B loc_40EC5B:                             ; CODE XREF: sub_40EAB0+19F↑j
.text:0040EC5B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040EC5F                 mov     ebx, dword_413090
.text:0040EC65                 xor     esi, esi
.text:0040EC67                 mov     [esp+6Ch+var_60], esi
.text:0040EC6B                 mov     [esp+6Ch+Str], edi
.text:0040EC6E                 mov     [esp+6Ch+var_64], ebx
.text:0040EC72                 call    sub_4118B0
.text:0040EC77                 mov     [esp+6Ch+var_3C], eax
.text:0040EC7B                 mov     ecx, dword_413090
.text:0040EC81                 mov     [esp+6Ch+lpProcName], ebp
.text:0040EC85                 mov     [esp+6Ch+var_38], edx
.text:0040EC89                 shr     ecx, 9
.text:0040EC8C                 mov     [esp+6Ch+var_44], ecx
.text:0040EC90                 mov     [esp+6Ch+var_40], 0
.text:0040EC98                 mov     [esp+6Ch+var_64], ebx
.text:0040EC9C                 mov     [esp+6Ch+var_60], esi
.text:0040ECA0                 mov     [esp+6Ch+Str], edi
.text:0040ECA3                 call    sub_411730
.text:0040ECA8                 mov     ebp, edx
.text:0040ECAA                 or      ebp, eax
.text:0040ECAC                 jz      short loc_40ED10
.text:0040ECAE                 mov     ebp, [esp+6Ch+var_3C]
.text:0040ECB2                 mov     esi, [esp+6Ch+var_38]
.text:0040ECB6                 mov     eax, [esp+6Ch+var_44]
.text:0040ECBA                 mov     [esp+6Ch+var_4C], ebp
.text:0040ECBE                 mov     ecx, [esp+6Ch+var_40]
.text:0040ECC2                 mov     ebx, [esp+6Ch+var_44]
.text:0040ECC6                 add     [esp+6Ch+var_4C], 1
.text:0040ECCB                 mov     [esp+6Ch+var_48], esi
.text:0040ECCF                 mov     edi, [esp+6Ch+var_4C]
.text:0040ECD3                 adc     [esp+6Ch+var_48], 0
.text:0040ECD8                 mul     [esp+6Ch+var_4C]
.text:0040ECDC                 imul    ecx, edi
.text:0040ECDF                 mov     esi, eax
.text:0040ECE1                 mov     eax, [esp+6Ch+var_48]
.text:0040ECE5                 add     edx, ecx
.text:0040ECE7                 imul    ebx, eax
.text:0040ECEA                 lea     edi, [ebx+edx]
.text:0040ECED
.text:0040ECED loc_40ECED:                             ; CODE XREF: sub_40EAB0+287↓j
.text:0040ECED                 mov     ebx, [esp+6Ch+arg_4]
.text:0040ECF1                 mov     [ebx+58h], esi
.text:0040ECF4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040ECF8                 mov     [ebx+5Ch], edi
.text:0040ECFB                 mov     [esp+6Ch+Str], esi ; Block
.text:0040ECFE                 call    free
.text:0040ED03
.text:0040ED03 loc_40ED03:                             ; CODE XREF: sub_40EAB0+21↑j
.text:0040ED03                 add     esp, 5Ch
.text:0040ED06                 xor     eax, eax
.text:0040ED08                 pop     ebx
.text:0040ED09                 pop     esi
.text:0040ED0A                 pop     edi
.text:0040ED0B                 pop     ebp
.text:0040ED0C                 retn
.text:0040ED0C ; ---------------------------------------------------------------------------
.text:0040ED0D                 align 10h
.text:0040ED10
.text:0040ED10 loc_40ED10:                             ; CODE XREF: sub_40EAB0+1FC↑j
.text:0040ED10                 mov     eax, [esp+6Ch+var_3C]
.text:0040ED14                 mov     edi, [esp+6Ch+var_40]
.text:0040ED18                 mov     ecx, [esp+6Ch+var_3C]
.text:0040ED1C                 mul     [esp+6Ch+var_44]
.text:0040ED20                 mov     ebx, [esp+6Ch+var_44]
.text:0040ED24                 imul    ecx, edi
.text:0040ED27                 mov     ebp, edx
.text:0040ED29                 mov     esi, eax
.text:0040ED2B                 mov     edx, [esp+6Ch+var_38]
.text:0040ED2F                 add     ebp, ecx
.text:0040ED31                 imul    ebx, edx
.text:0040ED34                 lea     edi, [ebx+ebp]
.text:0040ED37                 jmp     short loc_40ECED
.text:0040ED39 ; ---------------------------------------------------------------------------
.text:0040ED39
.text:0040ED39 loc_40ED39:                             ; CODE XREF: sub_40EAB0+16E↑j
.text:0040ED39                 call    GetLastError
.text:0040ED3E                 xor     esi, esi
.text:0040ED40                 xor     edi, edi
.text:0040ED42                 test    eax, eax
.text:0040ED44                 jnz     loc_40EC38
.text:0040ED4A                 jmp     loc_40EC24
.text:0040ED4A ; ---------------------------------------------------------------------------
.text:0040ED4F                 align 10h
.text:0040ED50
.text:0040ED50 loc_40ED50:                             ; CODE XREF: sub_40EAB0+116↑j
.text:0040ED50                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040ED54                 lea     ecx, [esp+6Ch+var_20]
.text:0040ED58                 lea     ebx, [esp+6Ch+var_1C]
.text:0040ED5C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040ED60                 lea     edi, [esp+6Ch+var_24]
.text:0040ED64                 lea     ebp, [esp+6Ch+var_28]
.text:0040ED68                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040ED6C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040ED70                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040ED74                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040ED77                 call    sub_40BA20
.text:0040ED7C                 test    eax, eax
.text:0040ED7E                 jnz     short loc_40EDA0
.text:0040ED80                 mov     [esp+6Ch+var_28], 1
.text:0040ED88                 mov     [esp+6Ch+var_24], 200h
.text:0040ED90                 mov     [esp+6Ch+var_20], 0
.text:0040ED98                 mov     [esp+6Ch+var_1C], 0
.text:0040EDA0
.text:0040EDA0 loc_40EDA0:                             ; CODE XREF: sub_40EAB0+2CE↑j
.text:0040EDA0                 mov     ebp, [esp+6Ch+var_24]
.text:0040EDA4                 mov     edi, [esp+6Ch+var_28]
.text:0040EDA8                 mov     eax, [esp+6Ch+arg_4]
.text:0040EDAC                 imul    ebp, edi
.text:0040EDAF                 mov     esi, [eax+10h]
.text:0040EDB2                 mov     dword_413090, ebp
.text:0040EDB8                 mov     ds:dword_414590, esi
.text:0040EDBE                 jmp     loc_40EBCC
.text:0040EDC3 ; ---------------------------------------------------------------------------
.text:0040EDC3
.text:0040EDC3 loc_40EDC3:                             ; CODE XREF: sub_40EAB0+9D↑j
.text:0040EDC3                                         ; sub_40EAB0+B6↑j ...
.text:0040EDC3                 xor     eax, eax
.text:0040EDC5                 jmp     loc_40EBA0
.text:0040EDC5 ; ---------------------------------------------------------------------------
.text:0040EDCA                 align 10h
.text:0040EDD0
.text:0040EDD0 loc_40EDD0:                             ; CODE XREF: sub_40EAB0+AA↑j
.text:0040EDD0                 mov     [esp+6Ch+Str], offset ModuleName ; lpModuleName
.text:0040EDD7                 xor     ebp, ebp
.text:0040EDD9                 call    GetModuleHandleA
.text:0040EDDE                 sub     esp, 4
.text:0040EDE1                 mov     edi, eax
.text:0040EDE3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040EDEB                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040EDEE                 call    GetProcAddress
.text:0040EDF3                 sub     esp, 8
.text:0040EDF6                 mov     edx, eax
.text:0040EDF8                 test    eax, eax
.text:0040EDFA                 jz      short loc_40EE14
.text:0040EDFC                 mov     eax, [esp+6Ch+String1]
.text:0040EE00                 lea     ecx, [esp+6Ch+var_18]
.text:0040EE04                 mov     [esp+6Ch+lpProcName], ecx
.text:0040EE08                 mov     [esp+6Ch+Str], eax
.text:0040EE0B                 call    edx
.text:0040EE0D                 sub     esp, 8
.text:0040EE10                 test    eax, eax
.text:0040EE12                 jnz     short loc_40EE78
.text:0040EE14
.text:0040EE14 loc_40EE14:                             ; CODE XREF: sub_40EAB0+34A↑j
.text:0040EE14                 mov     edx, ds:Str
.text:0040EE1A                 test    edx, edx
.text:0040EE1C                 jz      short loc_40EE97
.text:0040EE1E
.text:0040EE1E loc_40EE1E:                             ; CODE XREF: sub_40EAB0+3FA↓j
.text:0040EE1E                                         ; sub_40EAB0+40C↓j
.text:0040EE1E                 mov     eax, [esp+6Ch+String1]
.text:0040EE22                 test    eax, eax
.text:0040EE24                 jz      short loc_40EE2F
.text:0040EE26                 mov     esi, [esp+6Ch+String1]
.text:0040EE2A                 cmp     byte ptr [esi], 0
.text:0040EE2D                 jnz     short loc_40EE4C
.text:0040EE2F
.text:0040EE2F loc_40EE2F:                             ; CODE XREF: sub_40EAB0+374↑j
.text:0040EE2F                                         ; sub_40EAB0+3B0↓j ...
.text:0040EE2F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040EE32                 call    FreeLibrary
.text:0040EE37                 sub     esp, 4
.text:0040EE3A                 test    ebp, ebp
.text:0040EE3C                 jz      loc_40EB60
.text:0040EE42                 mov     ebx, 49h ; 'I'
.text:0040EE47                 jmp     loc_40EB60
.text:0040EE4C ; ---------------------------------------------------------------------------
.text:0040EE4C
.text:0040EE4C loc_40EE4C:                             ; CODE XREF: sub_40EAB0+37D↑j
.text:0040EE4C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040EE4F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040EE57                 call    strrchr
.text:0040EE5C                 test    eax, eax
.text:0040EE5E                 mov     esi, eax
.text:0040EE60                 jz      short loc_40EE2F
.text:0040EE62                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040EE66                 mov     ecx, ds:Str
.text:0040EE6C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040EE6F                 call    strstr
.text:0040EE74                 test    eax, eax
.text:0040EE76                 jz      short loc_40EE7F
.text:0040EE78
.text:0040EE78 loc_40EE78:                             ; CODE XREF: sub_40EAB0+362↑j
.text:0040EE78                                         ; sub_40EAB0+3E5↓j
.text:0040EE78                 mov     ebp, 1
.text:0040EE7D                 jmp     short loc_40EE2F
.text:0040EE7F ; ---------------------------------------------------------------------------
.text:0040EE7F
.text:0040EE7F loc_40EE7F:                             ; CODE XREF: sub_40EAB0+3C6↑j
.text:0040EE7F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040EE83                 mov     edx, off_413094 ; ".com;.exe;.bat;.cmd"
.text:0040EE89                 mov     [esp+6Ch+Str], edx ; Str
.text:0040EE8C                 call    strstr
.text:0040EE91                 test    eax, eax
.text:0040EE93                 jz      short loc_40EE2F
.text:0040EE95                 jmp     short loc_40EE78
.text:0040EE97 ; ---------------------------------------------------------------------------
.text:0040EE97
.text:0040EE97 loc_40EE97:                             ; CODE XREF: sub_40EAB0+36C↑j
.text:0040EE97                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040EE9E                 call    getenv
.text:0040EEA3                 mov     ds:Str, eax
.text:0040EEA8                 test    eax, eax
.text:0040EEAA                 jnz     loc_40EE1E
.text:0040EEB0                 mov     esi, off_413094 ; ".com;.exe;.bat;.cmd"
.text:0040EEB6                 mov     ds:Str, esi
.text:0040EEBC                 jmp     loc_40EE1E
.text:0040EEC1 ; ---------------------------------------------------------------------------
.text:0040EEC1
.text:0040EEC1 loc_40EEC1:                             ; CODE XREF: sub_40EAB0+81↑j
.text:0040EEC1                                         ; sub_40EAB0+452↓j
.text:0040EEC1                 shld    edi, esi, 8
.text:0040EEC5                 movsx   eax, cl
.text:0040EEC8                 shl     esi, 8
.text:0040EECB                 cdq
.text:0040EECC                 add     esi, eax
.text:0040EECE                 adc     edi, edx
.text:0040EED0                 mov     edx, edi
.text:0040EED2                 xor     ebx, ebx
.text:0040EED4                 and     edx, 0FF000000h
.text:0040EEDA                 mov     eax, edx
.text:0040EEDC                 or      eax, ebx
.text:0040EEDE                 jz      short loc_40EEF9
.text:0040EEE0                 mov     ecx, edx
.text:0040EEE2                 xor     eax, eax
.text:0040EEE4                 shr     ecx, 10h
.text:0040EEE7                 mov     edx, esi
.text:0040EEE9                 xor     edx, ecx
.text:0040EEEB                 mov     ecx, edi
.text:0040EEED                 xor     ecx, eax
.text:0040EEEF                 mov     esi, edx
.text:0040EEF1                 mov     edi, ecx
.text:0040EEF3                 and     edi, 0FFFFFFh
.text:0040EEF9
.text:0040EEF9 loc_40EEF9:                             ; CODE XREF: sub_40EAB0+42E↑j
.text:0040EEF9                 inc     ebp
.text:0040EEFA                 movzx   ebx, byte ptr [ebp+0]
.text:0040EEFE                 test    bl, bl
.text:0040EF00                 mov     cl, bl
.text:0040EF02                 jnz     short loc_40EEC1
.text:0040EF04                 mov     eax, esi
.text:0040EF06                 mov     edx, edi
.text:0040EF08                 jmp     loc_40EB3B
.text:0040EF08 ; ---------------------------------------------------------------------------
.text:0040EF0D                 align 10h
.text:0040EF10
.text:0040EF10 loc_40EF10:                             ; CODE XREF: sub_40EAB0+3F↑j
.text:0040EF10                                         ; sub_40EAB0+57↑j
.text:0040EF10                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040EF14                 mov     ebp, [esp+6Ch+String1]
.text:0040EF18                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040EF1C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040EF1F                 call    _stricmp
.text:0040EF24                 test    eax, eax
.text:0040EF26                 jnz     short loc_40EF40
.text:0040EF28                 mov     ebx, [esp+6Ch+arg_4]
.text:0040EF2C                 mov     dword ptr [ebx+8], 5
.text:0040EF33                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040EF3A                 jmp     loc_40EB0D
.text:0040EF3A ; ---------------------------------------------------------------------------
.text:0040EF3F                 align 10h
.text:0040EF40
.text:0040EF40 loc_40EF40:                             ; CODE XREF: sub_40EAB0+476↑j
.text:0040EF40                 mov     ebp, [esp+6Ch+String1]
.text:0040EF44                 xor     esi, esi
.text:0040EF46                 xor     edi, edi
.text:0040EF48                 add     ebp, ebx
.text:0040EF4A                 jz      short loc_40EF54
.text:0040EF4C                 movzx   ecx, byte ptr [ebp+0]
.text:0040EF50                 test    cl, cl
.text:0040EF52                 jnz     short loc_40EF67
.text:0040EF54
.text:0040EF54 loc_40EF54:                             ; CODE XREF: sub_40EAB0+49A↑j
.text:0040EF54                 xor     eax, eax
.text:0040EF56                 xor     edx, edx
.text:0040EF58
.text:0040EF58 loc_40EF58:                             ; CODE XREF: sub_40EAB0+4FE↓j
.text:0040EF58                 mov     ebp, [esp+6Ch+arg_4]
.text:0040EF5C                 mov     [ebp+8], eax
.text:0040EF5F                 mov     [ebp+0Ch], edx
.text:0040EF62                 jmp     loc_40EB0D
.text:0040EF67 ; ---------------------------------------------------------------------------
.text:0040EF67
.text:0040EF67 loc_40EF67:                             ; CODE XREF: sub_40EAB0+4A2↑j
.text:0040EF67                                         ; sub_40EAB0+4F8↓j
.text:0040EF67                 shld    edi, esi, 8
.text:0040EF6B                 movsx   eax, cl
.text:0040EF6E                 shl     esi, 8
.text:0040EF71                 cdq
.text:0040EF72                 add     esi, eax
.text:0040EF74                 adc     edi, edx
.text:0040EF76                 mov     edx, edi
.text:0040EF78                 xor     ebx, ebx
.text:0040EF7A                 and     edx, 0FF000000h
.text:0040EF80                 mov     eax, edx
.text:0040EF82                 or      eax, ebx
.text:0040EF84                 jz      short loc_40EF9F
.text:0040EF86                 mov     ecx, edx
.text:0040EF88                 xor     eax, eax
.text:0040EF8A                 shr     ecx, 10h
.text:0040EF8D                 mov     edx, esi
.text:0040EF8F                 xor     edx, ecx
.text:0040EF91                 mov     ecx, edi
.text:0040EF93                 xor     ecx, eax
.text:0040EF95                 mov     esi, edx
.text:0040EF97                 mov     edi, ecx
.text:0040EF99                 and     edi, 0FFFFFFh
.text:0040EF9F
.text:0040EF9F loc_40EF9F:                             ; CODE XREF: sub_40EAB0+4D4↑j
.text:0040EF9F                 inc     ebp
.text:0040EFA0                 movzx   ebx, byte ptr [ebp+0]
.text:0040EFA4                 test    bl, bl
.text:0040EFA6                 mov     cl, bl
.text:0040EFA8                 jnz     short loc_40EF67
.text:0040EFAA                 mov     eax, esi
.text:0040EFAC                 mov     edx, edi
.text:0040EFAE                 jmp     short loc_40EF58
.text:0040EFAE sub_40EAB0      endp
.text:0040EFAE
.text:0040EFB0
.text:0040EFB0 ; =============== S U B R O U T I N E =======================================
.text:0040EFB0
.text:0040EFB0
.text:0040EFB0 ; int __cdecl sub_40EFB0(LPCSTR)
.text:0040EFB0 sub_40EFB0      proc near               ; CODE XREF: sub_40D070+CA↑p
.text:0040EFB0
.text:0040EFB0 lpRootPathName  = dword ptr -83Ch
.text:0040EFB0 lpVolumeNameBuffer= dword ptr -838h
.text:0040EFB0 nVolumeNameSize = dword ptr -834h
.text:0040EFB0 lpVolumeSerialNumber= dword ptr -830h
.text:0040EFB0 lpMaximumComponentLength= dword ptr -82Ch
.text:0040EFB0 lpFileSystemFlags= dword ptr -828h
.text:0040EFB0 lpFileSystemNameBuffer= dword ptr -824h
.text:0040EFB0 nFileSystemNameSize= dword ptr -820h
.text:0040EFB0 VolumeSerialNumber= dword ptr -818h
.text:0040EFB0 MaximumComponentLength= dword ptr -814h
.text:0040EFB0 FileSystemFlags = dword ptr -810h
.text:0040EFB0 FileSystemNameBuffer= byte ptr -80Ch
.text:0040EFB0 VolumeNameBuffer= byte ptr -40Ch
.text:0040EFB0 var_4           = dword ptr -4
.text:0040EFB0 arg_0           = dword ptr  4
.text:0040EFB0
.text:0040EFB0                 sub     esp, 83Ch
.text:0040EFB6                 mov     [esp+83Ch+var_4], ebx
.text:0040EFBD                 mov     ebx, [esp+83Ch+arg_0]
.text:0040EFC4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040EFC7                 call    sub_40CF50
.text:0040EFCC                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040EFCF                 call    sub_40AFF0
.text:0040EFD4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040EFD7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040EFDB                 mov     ebx, eax
.text:0040EFDD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040EFE1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040EFE5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040EFE9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040EFED                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040EFF1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040EFF5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040EFFC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040F000                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040F004                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040F00C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040F014                 call    GetVolumeInformationA
.text:0040F019                 sub     esp, 20h
.text:0040F01C                 test    eax, eax
.text:0040F01E                 setz    cl
.text:0040F021                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040F024                 movzx   edx, cl
.text:0040F027                 dec     edx
.text:0040F028                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040F02C                 call    free
.text:0040F031                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040F035                 mov     ebx, [esp+83Ch+var_4]
.text:0040F03C                 add     esp, 83Ch
.text:0040F042                 retn
.text:0040F042 sub_40EFB0      endp
.text:0040F042
.text:0040F042 ; ---------------------------------------------------------------------------
.text:0040F043                 align 10h
.text:0040F050                 push    ebp
.text:0040F051                 push    edi
.text:0040F052                 xor     edi, edi
.text:0040F054                 push    esi
.text:0040F055                 xor     esi, esi
.text:0040F057                 push    ebx
.text:0040F058                 mov     ebp, [esp+14h]
.text:0040F05C                 test    ebp, ebp
.text:0040F05E                 jz      short loc_40F068
.text:0040F060                 movzx   ecx, byte ptr [ebp+0]
.text:0040F064                 test    cl, cl
.text:0040F066                 jnz     short loc_40F071
.text:0040F068
.text:0040F068 loc_40F068:                             ; CODE XREF: .text:0040F05E↑j
.text:0040F068                 xor     eax, eax
.text:0040F06A                 xor     edx, edx
.text:0040F06C
.text:0040F06C loc_40F06C:                             ; CODE XREF: .text:0040F0B8↓j
.text:0040F06C                 pop     ebx
.text:0040F06D                 pop     esi
.text:0040F06E                 pop     edi
.text:0040F06F                 pop     ebp
.text:0040F070                 retn
.text:0040F071 ; ---------------------------------------------------------------------------
.text:0040F071
.text:0040F071 loc_40F071:                             ; CODE XREF: .text:0040F066↑j
.text:0040F071                                         ; .text:0040F0B2↓j
.text:0040F071                 shld    edi, esi, 8
.text:0040F075                 movsx   eax, cl
.text:0040F078                 shl     esi, 8
.text:0040F07B                 cdq
.text:0040F07C                 add     esi, eax
.text:0040F07E                 adc     edi, edx
.text:0040F080                 mov     edx, edi
.text:0040F082                 xor     ebx, ebx
.text:0040F084                 and     edx, 0FF000000h
.text:0040F08A                 mov     eax, edx
.text:0040F08C                 or      eax, ebx
.text:0040F08E                 jz      short loc_40F0A9
.text:0040F090                 mov     ecx, edx
.text:0040F092                 xor     eax, eax
.text:0040F094                 shr     ecx, 10h
.text:0040F097                 mov     edx, esi
.text:0040F099                 xor     edx, ecx
.text:0040F09B                 mov     ecx, edi
.text:0040F09D                 xor     ecx, eax
.text:0040F09F                 mov     esi, edx
.text:0040F0A1                 mov     edi, ecx
.text:0040F0A3                 and     edi, 0FFFFFFh
.text:0040F0A9
.text:0040F0A9 loc_40F0A9:                             ; CODE XREF: .text:0040F08E↑j
.text:0040F0A9                 inc     ebp
.text:0040F0AA                 movzx   ebx, byte ptr [ebp+0]
.text:0040F0AE                 test    bl, bl
.text:0040F0B0                 mov     cl, bl
.text:0040F0B2                 jnz     short loc_40F071
.text:0040F0B4                 mov     eax, esi
.text:0040F0B6                 mov     edx, edi
.text:0040F0B8                 jmp     short loc_40F06C
.text:0040F0B8 ; ---------------------------------------------------------------------------
.text:0040F0BA                 align 10h
.text:0040F0C0                 sub     esp, 2Ch
.text:0040F0C3                 lea     edx, [esp+24h]
.text:0040F0C7                 lea     ecx, [esp+28h]
.text:0040F0CB                 mov     [esp+0Ch], edx
.text:0040F0CF                 lea     edx, [esp+1Ch]
.text:0040F0D3                 mov     [esp+4], edx
.text:0040F0D7                 mov     edx, [esp+30h]
.text:0040F0DB                 mov     [esp+10h], ecx
.text:0040F0DF                 lea     ecx, [esp+20h]
.text:0040F0E3                 mov     [esp+8], ecx
.text:0040F0E7                 mov     [esp], edx
.text:0040F0EA                 call    sub_40BA20
.text:0040F0EF                 test    eax, eax
.text:0040F0F1                 jnz     short loc_40F113
.text:0040F0F3                 mov     dword ptr [esp+1Ch], 1
.text:0040F0FB                 mov     dword ptr [esp+20h], 200h
.text:0040F103                 mov     dword ptr [esp+24h], 0
.text:0040F10B                 mov     dword ptr [esp+28h], 0
.text:0040F113
.text:0040F113 loc_40F113:                             ; CODE XREF: .text:0040F0F1↑j
.text:0040F113                 mov     eax, [esp+20h]
.text:0040F117                 mov     ecx, [esp+1Ch]
.text:0040F11B                 add     esp, 2Ch
.text:0040F11E                 imul    eax, ecx
.text:0040F121                 retn
.text:0040F121 ; ---------------------------------------------------------------------------
.text:0040F122                 align 10h
.text:0040F130                 sub     esp, 1Ch
.text:0040F133                 mov     eax, [esp+20h]
.text:0040F137                 mov     [esp+14h], esi
.text:0040F13B                 mov     [esp+18h], edi
.text:0040F13F                 test    eax, eax
.text:0040F141                 jz      short loc_40F180
.text:0040F143                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040F14B                 mov     [esp], eax
.text:0040F14E                 call    strrchr
.text:0040F153                 test    eax, eax
.text:0040F155                 jz      short loc_40F180
.text:0040F157                 cld
.text:0040F158                 mov     esi, eax
.text:0040F15A                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040F15F                 mov     ecx, 5
.text:0040F164                 repe cmpsb
.text:0040F166                 setz    dl
.text:0040F169                 movzx   eax, dl
.text:0040F16C                 lea     esi, [esi+0]
.text:0040F170
.text:0040F170 loc_40F170:                             ; CODE XREF: .text:0040F182↓j
.text:0040F170                 mov     esi, [esp+14h]
.text:0040F174                 mov     edi, [esp+18h]
.text:0040F178                 add     esp, 1Ch
.text:0040F17B                 retn
.text:0040F17B ; ---------------------------------------------------------------------------
.text:0040F17C                 align 10h
.text:0040F180
.text:0040F180 loc_40F180:                             ; CODE XREF: .text:0040F141↑j
.text:0040F180                                         ; .text:0040F155↑j
.text:0040F180                 xor     eax, eax
.text:0040F182                 jmp     short loc_40F170
.text:0040F182 ; ---------------------------------------------------------------------------
.text:0040F184                 align 10h
.text:0040F190                 sub     esp, 1Ch
.text:0040F193                 mov     [esp+10h], ebx
.text:0040F197                 mov     ebx, [esp+20h]
.text:0040F19B                 mov     [esp+14h], esi
.text:0040F19F                 mov     [esp+18h], edi
.text:0040F1A3                 xor     edi, edi
.text:0040F1A5                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0040F1AC                 call    GetModuleHandleA
.text:0040F1B1                 sub     esp, 4
.text:0040F1B4                 mov     esi, eax
.text:0040F1B6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040F1BE                 mov     [esp], eax
.text:0040F1C1                 call    GetProcAddress
.text:0040F1C6                 sub     esp, 8
.text:0040F1C9                 test    eax, eax
.text:0040F1CB                 jz      short loc_40F1E1
.text:0040F1CD                 mov     [esp], ebx
.text:0040F1D0                 lea     ecx, [esp+0Ch]
.text:0040F1D4                 mov     [esp+4], ecx
.text:0040F1D8                 call    eax
.text:0040F1DA                 sub     esp, 8
.text:0040F1DD                 test    eax, eax
.text:0040F1DF                 jnz     short loc_40F240
.text:0040F1E1
.text:0040F1E1 loc_40F1E1:                             ; CODE XREF: .text:0040F1CB↑j
.text:0040F1E1                 mov     eax, ds:Str
.text:0040F1E6                 test    eax, eax
.text:0040F1E8                 jz      short loc_40F260
.text:0040F1EA
.text:0040F1EA loc_40F1EA:                             ; CODE XREF: .text:0040F273↓j
.text:0040F1EA                                         ; .text:0040F285↓j
.text:0040F1EA                 test    ebx, ebx
.text:0040F1EC                 jz      short loc_40F1F3
.text:0040F1EE                 cmp     byte ptr [ebx], 0
.text:0040F1F1                 jnz     short loc_40F210
.text:0040F1F3
.text:0040F1F3 loc_40F1F3:                             ; CODE XREF: .text:0040F1EC↑j
.text:0040F1F3                                         ; .text:0040F224↓j ...
.text:0040F1F3                 mov     [esp], esi
.text:0040F1F6                 call    FreeLibrary
.text:0040F1FB                 sub     esp, 4
.text:0040F1FE                 mov     eax, edi
.text:0040F200                 mov     ebx, [esp+10h]
.text:0040F204                 mov     esi, [esp+14h]
.text:0040F208                 mov     edi, [esp+18h]
.text:0040F20C                 add     esp, 1Ch
.text:0040F20F                 retn
.text:0040F210 ; ---------------------------------------------------------------------------
.text:0040F210
.text:0040F210 loc_40F210:                             ; CODE XREF: .text:0040F1F1↑j
.text:0040F210                 mov     [esp], ebx
.text:0040F213                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040F21B                 call    strrchr
.text:0040F220                 test    eax, eax
.text:0040F222                 mov     ebx, eax
.text:0040F224                 jz      short loc_40F1F3
.text:0040F226                 mov     [esp+4], eax
.text:0040F22A                 mov     ecx, ds:Str
.text:0040F230                 mov     [esp], ecx
.text:0040F233                 call    strstr
.text:0040F238                 test    eax, eax
.text:0040F23A                 jz      short loc_40F247
.text:0040F23C                 lea     esi, [esi+0]
.text:0040F240
.text:0040F240 loc_40F240:                             ; CODE XREF: .text:0040F1DF↑j
.text:0040F240                                         ; .text:0040F25D↓j
.text:0040F240                 mov     edi, 1
.text:0040F245                 jmp     short loc_40F1F3
.text:0040F247 ; ---------------------------------------------------------------------------
.text:0040F247
.text:0040F247 loc_40F247:                             ; CODE XREF: .text:0040F23A↑j
.text:0040F247                 mov     [esp+4], ebx
.text:0040F24B                 mov     ebx, off_413094 ; ".com;.exe;.bat;.cmd"
.text:0040F251                 mov     [esp], ebx
.text:0040F254                 call    strstr
.text:0040F259                 test    eax, eax
.text:0040F25B                 jz      short loc_40F1F3
.text:0040F25D                 jmp     short loc_40F240
.text:0040F25D ; ---------------------------------------------------------------------------
.text:0040F25F                 align 10h
.text:0040F260
.text:0040F260 loc_40F260:                             ; CODE XREF: .text:0040F1E8↑j
.text:0040F260                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040F267                 call    getenv
.text:0040F26C                 mov     ds:Str, eax
.text:0040F271                 test    eax, eax
.text:0040F273                 jnz     loc_40F1EA
.text:0040F279                 mov     edx, off_413094 ; ".com;.exe;.bat;.cmd"
.text:0040F27F                 mov     ds:Str, edx
.text:0040F285                 jmp     loc_40F1EA
.text:0040F285 ; ---------------------------------------------------------------------------
.text:0040F28A                 align 10h
.text:0040F290                 sub     esp, 0Ch
.text:0040F293                 mov     edx, [esp+10h]
.text:0040F297                 mov     [esp], edx
.text:0040F29A                 call    GetFileType
.text:0040F29F                 sub     esp, 4
.text:0040F2A2                 xor     edx, edx
.text:0040F2A4                 cmp     eax, 2
.text:0040F2A7                 jz      short loc_40F2C0
.text:0040F2A9                 cmp     eax, 3
.text:0040F2AC                 jz      short loc_40F2B4
.text:0040F2AE
.text:0040F2AE loc_40F2AE:                             ; CODE XREF: .text:0040F2B9↓j
.text:0040F2AE                                         ; .text:0040F2C5↓j
.text:0040F2AE                 mov     eax, edx
.text:0040F2B0                 add     esp, 0Ch
.text:0040F2B3                 retn
.text:0040F2B4 ; ---------------------------------------------------------------------------
.text:0040F2B4
.text:0040F2B4 loc_40F2B4:                             ; CODE XREF: .text:0040F2AC↑j
.text:0040F2B4                 mov     edx, 1000h
.text:0040F2B9                 jmp     short loc_40F2AE
.text:0040F2B9 ; ---------------------------------------------------------------------------
.text:0040F2BB                 align 10h
.text:0040F2C0
.text:0040F2C0 loc_40F2C0:                             ; CODE XREF: .text:0040F2A7↑j
.text:0040F2C0                 mov     edx, 2000h
.text:0040F2C5                 jmp     short loc_40F2AE
.text:0040F2C5 ; ---------------------------------------------------------------------------
.text:0040F2C7                 align 10h
.text:0040F2D0                 mov     ecx, [esp+4]
.text:0040F2D4                 xor     edx, edx
.text:0040F2D6                 test    cl, 10h
.text:0040F2D9                 setz    dl
.text:0040F2DC                 dec     edx
.text:0040F2DD                 and     edx, 0FFFFC000h
.text:0040F2E3                 add     edx, 8000h
.text:0040F2E9                 or      edx, 124h
.text:0040F2EF                 test    cl, 1
.text:0040F2F2                 movzx   eax, dx
.text:0040F2F5                 jnz     short locret_40F2FC
.text:0040F2F7                 or      eax, 92h
.text:0040F2FC
.text:0040F2FC locret_40F2FC:                          ; CODE XREF: .text:0040F2F5↑j
.text:0040F2FC                 retn
.text:0040F2FC ; ---------------------------------------------------------------------------
.text:0040F2FD                 align 10h
.text:0040F300                 sub     esp, 2Ch
.text:0040F303                 mov     [esp+20h], esi
.text:0040F307                 mov     esi, [esp+30h]
.text:0040F30B                 mov     [esp+1Ch], ebx
.text:0040F30F                 xor     ebx, ebx
.text:0040F311                 test    esi, esi
.text:0040F313                 mov     [esp+24h], edi
.text:0040F317                 mov     [esp+28h], ebp
.text:0040F31B                 jz      short loc_40F370
.text:0040F31D                 cmp     byte ptr [esi], 0
.text:0040F320                 jnz     short loc_40F374
.text:0040F322
.text:0040F322 loc_40F322:                             ; CODE XREF: .text:0040F3DC↓j
.text:0040F322                                         ; .text:0040F3E7↓j
.text:0040F322                 test    esi, esi
.text:0040F324                 jz      short loc_40F370
.text:0040F326                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040F32E                 mov     [esp], esi
.text:0040F331                 call    strrchr
.text:0040F336                 test    eax, eax
.text:0040F338                 jz      short loc_40F370
.text:0040F33A                 cld
.text:0040F33B                 mov     ecx, 5
.text:0040F340                 mov     esi, eax
.text:0040F342                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040F347                 repe cmpsb
.text:0040F349                 setz    cl
.text:0040F34C                 movzx   eax, cl
.text:0040F34F                 nop
.text:0040F350
.text:0040F350 loc_40F350:                             ; CODE XREF: .text:0040F372↓j
.text:0040F350                 test    eax, eax
.text:0040F352                 jz      short loc_40F35A
.text:0040F354                 or      ebx, 0A000h
.text:0040F35A
.text:0040F35A loc_40F35A:                             ; CODE XREF: .text:0040F352↑j
.text:0040F35A                 mov     eax, ebx
.text:0040F35C                 mov     esi, [esp+20h]
.text:0040F360                 mov     ebx, [esp+1Ch]
.text:0040F364                 mov     edi, [esp+24h]
.text:0040F368                 mov     ebp, [esp+28h]
.text:0040F36C                 add     esp, 2Ch
.text:0040F36F                 retn
.text:0040F370 ; ---------------------------------------------------------------------------
.text:0040F370
.text:0040F370 loc_40F370:                             ; CODE XREF: .text:0040F31B↑j
.text:0040F370                                         ; .text:0040F324↑j ...
.text:0040F370                 xor     eax, eax
.text:0040F372                 jmp     short loc_40F350
.text:0040F374 ; ---------------------------------------------------------------------------
.text:0040F374
.text:0040F374 loc_40F374:                             ; CODE XREF: .text:0040F320↑j
.text:0040F374                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0040F37B                 call    GetModuleHandleA
.text:0040F380                 sub     esp, 4
.text:0040F383                 mov     ebp, eax
.text:0040F385                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040F38D                 mov     [esp], eax
.text:0040F390                 call    GetProcAddress
.text:0040F395                 sub     esp, 8
.text:0040F398                 test    eax, eax
.text:0040F39A                 mov     dword ptr [esp+14h], 0
.text:0040F3A2                 jz      short loc_40F3B8
.text:0040F3A4                 mov     [esp], esi
.text:0040F3A7                 lea     ecx, [esp+18h]
.text:0040F3AB                 mov     [esp+4], ecx
.text:0040F3AF                 call    eax
.text:0040F3B1                 sub     esp, 8
.text:0040F3B4                 test    eax, eax
.text:0040F3B6                 jnz     short loc_40F418
.text:0040F3B8
.text:0040F3B8 loc_40F3B8:                             ; CODE XREF: .text:0040F3A2↑j
.text:0040F3B8                 mov     edx, ds:Str
.text:0040F3BE                 test    edx, edx
.text:0040F3C0                 jz      short loc_40F440
.text:0040F3C2
.text:0040F3C2 loc_40F3C2:                             ; CODE XREF: .text:0040F453↓j
.text:0040F3C2                                         ; .text:0040F465↓j
.text:0040F3C2                 test    esi, esi
.text:0040F3C4                 jz      short loc_40F3CB
.text:0040F3C6                 cmp     byte ptr [esi], 0
.text:0040F3C9                 jnz     short loc_40F3EC
.text:0040F3CB
.text:0040F3CB loc_40F3CB:                             ; CODE XREF: .text:0040F3C4↑j
.text:0040F3CB                                         ; .text:0040F400↓j ...
.text:0040F3CB                 mov     [esp], ebp
.text:0040F3CE                 call    FreeLibrary
.text:0040F3D3                 sub     esp, 4
.text:0040F3D6                 mov     eax, [esp+14h]
.text:0040F3DA                 test    eax, eax
.text:0040F3DC                 jz      loc_40F322
.text:0040F3E2                 mov     ebx, 49h ; 'I'
.text:0040F3E7                 jmp     loc_40F322
.text:0040F3EC ; ---------------------------------------------------------------------------
.text:0040F3EC
.text:0040F3EC loc_40F3EC:                             ; CODE XREF: .text:0040F3C9↑j
.text:0040F3EC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040F3F4                 mov     [esp], esi
.text:0040F3F7                 call    strrchr
.text:0040F3FC                 test    eax, eax
.text:0040F3FE                 mov     edi, eax
.text:0040F400                 jz      short loc_40F3CB
.text:0040F402                 mov     [esp+4], eax
.text:0040F406                 mov     edx, ds:Str
.text:0040F40C                 mov     [esp], edx
.text:0040F40F                 call    strstr
.text:0040F414                 test    eax, eax
.text:0040F416                 jz      short loc_40F422
.text:0040F418
.text:0040F418 loc_40F418:                             ; CODE XREF: .text:0040F3B6↑j
.text:0040F418                                         ; .text:0040F438↓j
.text:0040F418                 mov     dword ptr [esp+14h], 1
.text:0040F420                 jmp     short loc_40F3CB
.text:0040F422 ; ---------------------------------------------------------------------------
.text:0040F422
.text:0040F422 loc_40F422:                             ; CODE XREF: .text:0040F416↑j
.text:0040F422                 mov     [esp+4], edi
.text:0040F426                 mov     edi, off_413094 ; ".com;.exe;.bat;.cmd"
.text:0040F42C                 mov     [esp], edi
.text:0040F42F                 call    strstr
.text:0040F434                 test    eax, eax
.text:0040F436                 jz      short loc_40F3CB
.text:0040F438                 jmp     short loc_40F418
.text:0040F438 ; ---------------------------------------------------------------------------
.text:0040F43A                 align 10h
.text:0040F440
.text:0040F440 loc_40F440:                             ; CODE XREF: .text:0040F3C0↑j
.text:0040F440                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040F447                 call    getenv
.text:0040F44C                 mov     ds:Str, eax
.text:0040F451                 test    eax, eax
.text:0040F453                 jnz     loc_40F3C2
.text:0040F459                 mov     ecx, off_413094 ; ".com;.exe;.bat;.cmd"
.text:0040F45F                 mov     ds:Str, ecx
.text:0040F465                 jmp     loc_40F3C2
.text:0040F465 ; ---------------------------------------------------------------------------
.text:0040F46A                 align 10h
.text:0040F470                 push    esi
.text:0040F471                 push    ebx
.text:0040F472                 sub     esp, 864h
.text:0040F478                 mov     ebx, [esp+870h]
.text:0040F47F                 lea     edx, [esp+830h]
.text:0040F486                 mov     esi, [esp+874h]
.text:0040F48D                 mov     [esp+4], edx
.text:0040F491                 mov     [esp], ebx
.text:0040F494                 call    sub_40E2F0
.text:0040F499                 xor     edx, edx
.text:0040F49B                 test    eax, eax
.text:0040F49D                 jz      loc_40F585
.text:0040F4A3                 mov     ecx, [esp+830h]
.text:0040F4AA                 test    cl, 10h
.text:0040F4AD                 mov     [esi], ecx
.text:0040F4AF                 mov     eax, [esp+834h]
.text:0040F4B6                 mov     edx, [esp+838h]
.text:0040F4BD                 mov     [esi+4], eax
.text:0040F4C0                 mov     [esi+8], edx
.text:0040F4C3                 mov     eax, [esp+83Ch]
.text:0040F4CA                 mov     edx, [esp+840h]
.text:0040F4D1                 mov     [esi+0Ch], eax
.text:0040F4D4                 mov     [esi+10h], edx
.text:0040F4D7                 mov     edx, [esp+848h]
.text:0040F4DE                 mov     eax, [esp+844h]
.text:0040F4E5                 mov     [esi+18h], edx
.text:0040F4E8                 mov     [esi+14h], eax
.text:0040F4EB                 mov     edx, [esp+84Ch]
.text:0040F4F2                 mov     [esi+20h], edx
.text:0040F4F5                 mov     edx, [esp+850h]
.text:0040F4FC                 mov     [esi+24h], edx
.text:0040F4FF                 jnz     loc_40F590
.text:0040F505                 mov     dword ptr [esi+28h], 1
.text:0040F50C
.text:0040F50C loc_40F50C:                             ; CODE XREF: .text:0040F59B↓j
.text:0040F50C                 mov     [esp], ebx
.text:0040F50F                 call    sub_40CF50
.text:0040F514                 mov     [esp], eax
.text:0040F517                 call    sub_40AFF0
.text:0040F51C                 mov     [esp], eax
.text:0040F51F                 lea     edx, [esp+30h]
.text:0040F523                 mov     ebx, eax
.text:0040F525                 mov     [esp+18h], edx
.text:0040F529                 lea     ecx, [esp+2Ch]
.text:0040F52D                 lea     edx, [esp+28h]
.text:0040F531                 mov     [esp+14h], ecx
.text:0040F535                 lea     ecx, [esp+24h]
.text:0040F539                 mov     [esp+10h], edx
.text:0040F53D                 lea     edx, [esp+430h]
.text:0040F544                 mov     [esp+0Ch], ecx
.text:0040F548                 mov     [esp+4], edx
.text:0040F54C                 mov     dword ptr [esp+1Ch], 400h
.text:0040F554                 mov     dword ptr [esp+8], 400h
.text:0040F55C                 call    GetVolumeInformationA
.text:0040F561                 sub     esp, 20h
.text:0040F564                 test    eax, eax
.text:0040F566                 setz    cl
.text:0040F569                 mov     [esp], ebx
.text:0040F56C                 movzx   edx, cl
.text:0040F56F                 dec     edx
.text:0040F570                 and     [esp+24h], edx
.text:0040F574                 call    free
.text:0040F579                 mov     ecx, [esp+24h]
.text:0040F57D                 mov     edx, 1
.text:0040F582                 mov     [esi+1Ch], ecx
.text:0040F585
.text:0040F585 loc_40F585:                             ; CODE XREF: .text:0040F49D↑j
.text:0040F585                 add     esp, 864h
.text:0040F58B                 mov     eax, edx
.text:0040F58D                 pop     ebx
.text:0040F58E                 pop     esi
.text:0040F58F                 retn
.text:0040F590 ; ---------------------------------------------------------------------------
.text:0040F590
.text:0040F590 loc_40F590:                             ; CODE XREF: .text:0040F4FF↑j
.text:0040F590                 mov     [esp], ebx
.text:0040F593                 call    sub_40E460
.text:0040F598                 mov     [esi+28h], eax
.text:0040F59B                 jmp     loc_40F50C
.text:0040F5A0 ; ---------------------------------------------------------------------------
.text:0040F5A0                 push    ebp
.text:0040F5A1                 xor     edx, edx
.text:0040F5A3                 push    edi
.text:0040F5A4                 push    esi
.text:0040F5A5                 xor     esi, esi
.text:0040F5A7                 push    ebx
.text:0040F5A8                 sub     esp, 1Ch
.text:0040F5AB                 mov     ebx, [esp+5Ch]
.text:0040F5AF                 mov     ecx, [esp+30h]
.text:0040F5B3                 mov     edi, [esp+60h]
.text:0040F5B7                 or      esi, ebx
.text:0040F5B9                 mov     eax, [esp+4Ch]
.text:0040F5BD                 or      edi, edx
.text:0040F5BF                 mov     ebx, [esp+64h]
.text:0040F5C3                 xor     edx, edx
.text:0040F5C5                 test    cl, 10h
.text:0040F5C8                 setz    dl
.text:0040F5CB                 mov     [ebx+10h], eax
.text:0040F5CE                 mov     [ebx+8], edi
.text:0040F5D1                 mov     [ebx+0Ch], esi
.text:0040F5D4                 dec     edx
.text:0040F5D5                 and     edx, 0FFFFC000h
.text:0040F5DB                 mov     dword ptr [ebx+14h], 0
.text:0040F5E2                 add     edx, 8000h
.text:0040F5E8                 or      edx, 124h
.text:0040F5EE                 test    cl, 1
.text:0040F5F1                 movzx   eax, dx
.text:0040F5F4                 jnz     short loc_40F5FB
.text:0040F5F6                 or      eax, 92h
.text:0040F5FB
.text:0040F5FB loc_40F5FB:                             ; CODE XREF: .text:0040F5F4↑j
.text:0040F5FB                 mov     ebx, [esp+54h]
.text:0040F5FF                 xor     edx, edx
.text:0040F601                 xor     ebp, ebp
.text:0040F603                 mov     edi, [esp+50h]
.text:0040F607                 mov     ecx, [esp+64h]
.text:0040F60B                 mov     esi, edi
.text:0040F60D                 or      [ecx], eax
.text:0040F60F                 mov     edi, ebx
.text:0040F611                 or      edi, ebp
.text:0040F613                 mov     ebp, edx
.text:0040F615                 mov     ebx, [esp+64h]
.text:0040F619                 or      ebp, esi
.text:0040F61B                 mov     esi, [esp+58h]
.text:0040F61F                 mov     edx, [esp+40h]
.text:0040F623                 mov     [ebx+30h], edi
.text:0040F626                 mov     [ebx+18h], esi
.text:0040F629                 mov     ecx, edx
.text:0040F62B                 xor     esi, esi
.text:0040F62D                 mov     [ebx+34h], ebp
.text:0040F630                 xor     edx, edx
.text:0040F632                 or      esi, ecx
.text:0040F634                 mov     dword ptr [esp+8], 989680h
.text:0040F63C                 mov     ebx, [esp+3Ch]
.text:0040F640                 mov     ecx, esi
.text:0040F642                 mov     dword ptr [esp+0Ch], 0
.text:0040F64A                 or      ebx, edx
.text:0040F64C                 mov     edx, ebx
.text:0040F64E                 sub     edx, 0D53E8000h
.text:0040F654                 sbb     ecx, 19DB1DEh
.text:0040F65A                 mov     [esp+4], ecx
.text:0040F65E                 mov     [esp], edx
.text:0040F661                 call    sub_4118B0
.text:0040F666                 mov     edx, eax
.text:0040F668                 mov     ecx, [esp+64h]
.text:0040F66C                 shr     eax, 1Fh
.text:0040F66F                 dec     eax
.text:0040F670                 and     edx, eax
.text:0040F672                 mov     [ecx+38h], edx
.text:0040F675                 mov     [esp], ebx
.text:0040F678                 mov     [esp+4], esi
.text:0040F67C                 mov     dword ptr [esp+8], 989680h
.text:0040F684                 mov     dword ptr [esp+0Ch], 0
.text:0040F68C                 call    sub_411730
.text:0040F691                 lea     ecx, [eax+eax*4]
.text:0040F694                 lea     esi, [ecx+ecx*4]
.text:0040F697                 mov     eax, [esp+64h]
.text:0040F69B                 shl     esi, 2
.text:0040F69E                 mov     ebx, esi
.text:0040F6A0                 shr     ebx, 1Fh
.text:0040F6A3                 dec     ebx
.text:0040F6A4                 and     ebx, esi
.text:0040F6A6                 xor     esi, esi
.text:0040F6A8                 mov     [eax+3Ch], ebx
.text:0040F6AB                 mov     edx, [esp+38h]
.text:0040F6AF                 mov     dword ptr [esp+8], 989680h
.text:0040F6B7                 mov     ebx, [esp+34h]
.text:0040F6BB                 mov     dword ptr [esp+0Ch], 0
.text:0040F6C3                 mov     ecx, edx
.text:0040F6C5                 xor     edx, edx
.text:0040F6C7                 or      ebx, edx
.text:0040F6C9                 or      esi, ecx
.text:0040F6CB                 mov     edx, ebx
.text:0040F6CD                 sub     edx, 0D53E8000h
.text:0040F6D3                 mov     ecx, esi
.text:0040F6D5                 sbb     ecx, 19DB1DEh
.text:0040F6DB                 mov     [esp+4], ecx
.text:0040F6DF                 mov     [esp], edx
.text:0040F6E2                 call    sub_4118B0
.text:0040F6E7                 mov     edx, eax
.text:0040F6E9                 mov     ecx, [esp+64h]
.text:0040F6ED                 shr     eax, 1Fh
.text:0040F6F0                 dec     eax
.text:0040F6F1                 and     edx, eax
.text:0040F6F3                 mov     [ecx+48h], edx
.text:0040F6F6                 mov     [esp], ebx
.text:0040F6F9                 mov     [esp+4], esi
.text:0040F6FD                 mov     dword ptr [esp+8], 989680h
.text:0040F705                 mov     dword ptr [esp+0Ch], 0
.text:0040F70D                 call    sub_411730
.text:0040F712                 lea     edx, [eax+eax*4]
.text:0040F715                 mov     ebx, [esp+64h]
.text:0040F719                 lea     ecx, [edx+edx*4]
.text:0040F71C                 shl     ecx, 2
.text:0040F71F                 mov     esi, ecx
.text:0040F721                 shr     esi, 1Fh
.text:0040F724                 dec     esi
.text:0040F725                 and     esi, ecx
.text:0040F727                 mov     [ebx+4Ch], esi
.text:0040F72A                 mov     edx, [esp+48h]
.text:0040F72E                 xor     esi, esi
.text:0040F730                 mov     dword ptr [esp+8], 989680h
.text:0040F738                 mov     ebx, [esp+44h]
.text:0040F73C                 mov     dword ptr [esp+0Ch], 0
.text:0040F744                 mov     ecx, edx
.text:0040F746                 xor     edx, edx
.text:0040F748                 or      ebx, edx
.text:0040F74A                 or      esi, ecx
.text:0040F74C                 mov     edx, ebx
.text:0040F74E                 sub     edx, 0D53E8000h
.text:0040F754                 mov     ecx, esi
.text:0040F756                 sbb     ecx, 19DB1DEh
.text:0040F75C                 mov     [esp+4], ecx
.text:0040F760                 mov     [esp], edx
.text:0040F763                 call    sub_4118B0
.text:0040F768                 mov     edx, eax
.text:0040F76A                 mov     ecx, [esp+64h]
.text:0040F76E                 shr     eax, 1Fh
.text:0040F771                 dec     eax
.text:0040F772                 and     edx, eax
.text:0040F774                 mov     [ecx+40h], edx
.text:0040F777                 mov     [esp+4], esi
.text:0040F77B                 mov     dword ptr [esp+8], 989680h
.text:0040F783                 mov     dword ptr [esp+0Ch], 0
.text:0040F78B                 mov     [esp], ebx
.text:0040F78E                 call    sub_411730
.text:0040F793                 lea     edx, [eax+eax*4]
.text:0040F796                 lea     esi, [edx+edx*4]
.text:0040F799                 mov     eax, [esp+64h]
.text:0040F79D                 shl     esi, 2
.text:0040F7A0                 mov     edx, ebp
.text:0040F7A2                 mov     ecx, esi
.text:0040F7A4                 mov     dword ptr [eax+50h], 200h
.text:0040F7AB                 shr     ecx, 1Fh
.text:0040F7AE                 dec     ecx
.text:0040F7AF                 and     ecx, esi
.text:0040F7B1                 test    ebp, ebp
.text:0040F7B3                 mov     [eax+44h], ecx
.text:0040F7B6                 mov     eax, edi
.text:0040F7B8                 js      short loc_40F7F2
.text:0040F7BA
.text:0040F7BA loc_40F7BA:                             ; CODE XREF: .text:0040F7FA↓j
.text:0040F7BA                 xor     esi, esi
.text:0040F7BC                 mov     ebp, edi
.text:0040F7BE                 mov     ecx, eax
.text:0040F7C0                 shrd    ecx, edx, 9
.text:0040F7C4                 mov     ebx, edx
.text:0040F7C6                 and     ebp, 1FFh
.text:0040F7CC                 mov     eax, esi
.text:0040F7CE                 sar     ebx, 9
.text:0040F7D1                 or      eax, ebp
.text:0040F7D3                 jz      short loc_40F7DB
.text:0040F7D5                 add     ecx, 1
.text:0040F7D8                 adc     ebx, 0
.text:0040F7DB
.text:0040F7DB loc_40F7DB:                             ; CODE XREF: .text:0040F7D3↑j
.text:0040F7DB                 mov     edx, [esp+64h]
.text:0040F7DF                 mov     eax, 1
.text:0040F7E4                 mov     [edx+58h], ecx
.text:0040F7E7                 mov     [edx+5Ch], ebx
.text:0040F7EA                 add     esp, 1Ch
.text:0040F7ED                 pop     ebx
.text:0040F7EE                 pop     esi
.text:0040F7EF                 pop     edi
.text:0040F7F0                 pop     ebp
.text:0040F7F1                 retn
.text:0040F7F2 ; ---------------------------------------------------------------------------
.text:0040F7F2
.text:0040F7F2 loc_40F7F2:                             ; CODE XREF: .text:0040F7B8↑j
.text:0040F7F2                 add     eax, 1FFh
.text:0040F7F7                 adc     edx, 0
.text:0040F7FA                 jmp     short loc_40F7BA
.text:0040F7FA ; ---------------------------------------------------------------------------
.text:0040F7FC                 align 10h
.text:0040F800                 push    ebp
.text:0040F801                 push    edi
.text:0040F802                 xor     edi, edi
.text:0040F804                 push    esi
.text:0040F805                 xor     esi, esi
.text:0040F807                 push    ebx
.text:0040F808                 sub     esp, 0Ch
.text:0040F80B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040F812                 call    LoadLibraryA
.text:0040F817                 sub     esp, 4
.text:0040F81A                 mov     ebp, eax
.text:0040F81C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040F824                 mov     [esp], eax
.text:0040F827                 call    GetProcAddress
.text:0040F82C                 sub     esp, 8
.text:0040F82F                 test    eax, eax
.text:0040F831                 jz      short loc_40F862
.text:0040F833                 lea     ecx, [esp+8]
.text:0040F837                 mov     [esp+4], ecx
.text:0040F83B                 mov     ecx, [esp+20h]
.text:0040F83F                 mov     [esp], ecx
.text:0040F842                 call    eax
.text:0040F844                 sub     esp, 8
.text:0040F847                 mov     ebx, eax
.text:0040F849                 cmp     eax, 0FFFFFFFFh
.text:0040F84C                 jz      short loc_40F87D
.text:0040F84E
.text:0040F84E loc_40F84E:                             ; CODE XREF: .text:0040F886↓j
.text:0040F84E                 mov     esi, [esp+8]
.text:0040F852                 mov     ecx, ebx
.text:0040F854                 xor     edi, edi
.text:0040F856                 xor     ebx, ebx
.text:0040F858                 mov     edx, esi
.text:0040F85A                 mov     esi, ecx
.text:0040F85C                 or      esi, edi
.text:0040F85E                 mov     edi, ebx
.text:0040F860                 or      edi, edx
.text:0040F862
.text:0040F862 loc_40F862:                             ; CODE XREF: .text:0040F831↑j
.text:0040F862                                         ; .text:0040F884↓j
.text:0040F862                 test    ebp, ebp
.text:0040F864                 jz      short loc_40F871
.text:0040F866                 mov     [esp], ebp
.text:0040F869                 call    FreeLibrary
.text:0040F86E                 sub     esp, 4
.text:0040F871
.text:0040F871 loc_40F871:                             ; CODE XREF: .text:0040F864↑j
.text:0040F871                 add     esp, 0Ch
.text:0040F874                 mov     eax, esi
.text:0040F876                 mov     edx, edi
.text:0040F878                 pop     ebx
.text:0040F879                 pop     esi
.text:0040F87A                 pop     edi
.text:0040F87B                 pop     ebp
.text:0040F87C                 retn
.text:0040F87D ; ---------------------------------------------------------------------------
.text:0040F87D
.text:0040F87D loc_40F87D:                             ; CODE XREF: .text:0040F84C↑j
.text:0040F87D                 call    GetLastError
.text:0040F882                 test    eax, eax
.text:0040F884                 jnz     short loc_40F862
.text:0040F886                 jmp     short loc_40F84E
.text:0040F886 ; ---------------------------------------------------------------------------
.text:0040F888                 align 10h
.text:0040F890
.text:0040F890 ; =============== S U B R O U T I N E =======================================
.text:0040F890
.text:0040F890
.text:0040F890 ; int __cdecl sub_40F890(LPCSTR lpFileName, int)
.text:0040F890 sub_40F890      proc near               ; CODE XREF: sub_40D5F0+27E1↓p
.text:0040F890
.text:0040F890 lpRootPathName  = dword ptr -8FCh
.text:0040F890 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040F890 nVolumeNameSize = dword ptr -8F4h
.text:0040F890 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040F890 lpMaximumComponentLength= dword ptr -8ECh
.text:0040F890 lpFileSystemFlags= dword ptr -8E8h
.text:0040F890 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040F890 nFileSystemNameSize= dword ptr -8E0h
.text:0040F890 VolumeSerialNumber= dword ptr -8D8h
.text:0040F890 MaximumComponentLength= dword ptr -8D4h
.text:0040F890 FileSystemFlags = dword ptr -8D0h
.text:0040F890 var_8CC         = dword ptr -8CCh
.text:0040F890 var_8C8         = dword ptr -8C8h
.text:0040F890 var_8C4         = dword ptr -8C4h
.text:0040F890 var_8C0         = dword ptr -8C0h
.text:0040F890 var_8BC         = dword ptr -8BCh
.text:0040F890 var_8B8         = dword ptr -8B8h
.text:0040F890 var_8B4         = dword ptr -8B4h
.text:0040F890 var_8B0         = dword ptr -8B0h
.text:0040F890 var_8AC         = dword ptr -8ACh
.text:0040F890 var_8A8         = dword ptr -8A8h
.text:0040F890 var_8A4         = dword ptr -8A4h
.text:0040F890 var_8A0         = dword ptr -8A0h
.text:0040F890 var_89C         = dword ptr -89Ch
.text:0040F890 FileSystemNameBuffer= byte ptr -88Ch
.text:0040F890 VolumeNameBuffer= byte ptr -48Ch
.text:0040F890 var_8C          = dword ptr -8Ch
.text:0040F890 var_88          = dword ptr -88h
.text:0040F890 var_84          = dword ptr -84h
.text:0040F890 var_80          = dword ptr -80h
.text:0040F890 var_7C          = dword ptr -7Ch
.text:0040F890 var_78          = dword ptr -78h
.text:0040F890 var_74          = dword ptr -74h
.text:0040F890 var_70          = dword ptr -70h
.text:0040F890 var_6C          = dword ptr -6Ch
.text:0040F890 var_5C          = dword ptr -5Ch
.text:0040F890 var_58          = dword ptr -58h
.text:0040F890 var_54          = dword ptr -54h
.text:0040F890 var_50          = dword ptr -50h
.text:0040F890 var_4C          = dword ptr -4Ch
.text:0040F890 var_48          = dword ptr -48h
.text:0040F890 var_44          = dword ptr -44h
.text:0040F890 var_3C          = dword ptr -3Ch
.text:0040F890 var_38          = dword ptr -38h
.text:0040F890 var_34          = dword ptr -34h
.text:0040F890 lpFileName      = dword ptr  4
.text:0040F890 arg_4           = dword ptr  8
.text:0040F890
.text:0040F890                 push    ebp
.text:0040F891                 xor     eax, eax
.text:0040F893                 mov     ecx, 0Dh
.text:0040F898                 push    edi
.text:0040F899                 push    esi
.text:0040F89A                 push    ebx
.text:0040F89B                 sub     esp, 8ECh
.text:0040F8A1                 lea     edi, [esp+8FCh+var_5C]
.text:0040F8A8                 cld
.text:0040F8A9                 lea     edx, [esp+8FCh+var_8C]
.text:0040F8B0                 rep stosd
.text:0040F8B2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040F8B6                 lea     esi, [esp+8FCh+var_5C]
.text:0040F8BD                 mov     edx, [esp+8FCh+lpFileName]
.text:0040F8C4                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:0040F8C7                 call    sub_40E2F0
.text:0040F8CC                 test    eax, eax
.text:0040F8CE                 mov     edx, 0FFFFFFFFh
.text:0040F8D3                 jz      loc_40FC64
.text:0040F8D9                 mov     edx, [esp+8FCh+var_88]
.text:0040F8E0                 mov     ebp, [esp+8FCh+var_84]
.text:0040F8E7                 mov     edi, [esp+8FCh+var_80]
.text:0040F8EE                 mov     [esp+8FCh+var_58], edx
.text:0040F8F5                 mov     ecx, [esp+8FCh+var_7C]
.text:0040F8FC                 mov     ebx, [esp+8FCh+var_8C]
.text:0040F903                 mov     [esp+8FCh+var_54], ebp
.text:0040F90A                 mov     edx, [esp+8FCh+var_78]
.text:0040F911                 mov     ebp, [esp+8FCh+var_74]
.text:0040F918                 mov     [esp+8FCh+var_50], edi
.text:0040F91F                 test    bl, 10h
.text:0040F922                 mov     edi, [esp+8FCh+var_70]
.text:0040F929                 mov     [esp+8FCh+var_4C], ecx
.text:0040F930                 mov     ecx, [esp+8FCh+var_6C]
.text:0040F937                 mov     [esp+8FCh+var_5C], ebx
.text:0040F93E                 mov     [esp+8FCh+var_48], edx
.text:0040F945                 mov     [esp+8FCh+var_44], ebp
.text:0040F94C                 mov     [esp+8FCh+var_3C], edi
.text:0040F953                 mov     [esp+8FCh+var_38], ecx
.text:0040F95A                 jnz     loc_40FC80
.text:0040F960                 mov     ebx, 1
.text:0040F965                 mov     [esp+8FCh+var_34], ebx
.text:0040F96C
.text:0040F96C loc_40F96C:                             ; CODE XREF: sub_40F890+406↓j
.text:0040F96C                 mov     eax, [esp+8FCh+lpFileName]
.text:0040F973                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040F977                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040F97B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040F97E                 call    sub_40CF50
.text:0040F983                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040F986                 call    sub_40AFF0
.text:0040F98B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040F98F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040F993                 mov     ebp, eax
.text:0040F995                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040F999                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040F99D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040F9A4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040F9A8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040F9AC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040F9B0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040F9B8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040F9C0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040F9C3                 call    GetVolumeInformationA
.text:0040F9C8                 sub     esp, 20h
.text:0040F9CB                 test    eax, eax
.text:0040F9CD                 lea     edi, [esp+8FCh+var_8CC]
.text:0040F9D1                 setz    bl
.text:0040F9D4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040F9D7                 xor     ebp, ebp
.text:0040F9D9                 movzx   edx, bl
.text:0040F9DC                 dec     edx
.text:0040F9DD                 xor     ebx, ebx
.text:0040F9DF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040F9E3                 call    free
.text:0040F9E8                 cld
.text:0040F9E9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040F9ED                 mov     [esi+1Ch], ecx
.text:0040F9F0                 mov     ecx, 0Dh
.text:0040F9F5                 rep movsd
.text:0040F9F7                 mov     edi, [esp+8FCh+var_8A0]
.text:0040F9FB                 mov     edx, [esp+8FCh+var_89C]
.text:0040F9FF                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040FA03                 or      ebp, edi
.text:0040FA05                 mov     esi, [esp+8FCh+var_8B0]
.text:0040FA09                 mov     edi, [esp+8FCh+arg_4]
.text:0040FA10                 or      edx, ebx
.text:0040FA12                 mov     [edi+8], edx
.text:0040FA15                 xor     edx, edx
.text:0040FA17                 test    cl, 10h
.text:0040FA1A                 setz    dl
.text:0040FA1D                 mov     [edi+0Ch], ebp
.text:0040FA20                 mov     [edi+10h], esi
.text:0040FA23                 mov     dword ptr [edi+14h], 0
.text:0040FA2A                 dec     edx
.text:0040FA2B                 and     edx, 0FFFFC000h
.text:0040FA31                 add     edx, 8000h
.text:0040FA37                 or      edx, 124h
.text:0040FA3D                 test    cl, 1
.text:0040FA40                 movzx   eax, dx
.text:0040FA43                 jnz     short loc_40FA4A
.text:0040FA45                 or      eax, 92h
.text:0040FA4A
.text:0040FA4A loc_40FA4A:                             ; CODE XREF: sub_40F890+1B3↑j
.text:0040FA4A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040FA4E                 xor     edx, edx
.text:0040FA50                 xor     ebp, ebp
.text:0040FA52                 mov     edi, [esp+8FCh+var_8AC]
.text:0040FA56                 mov     ecx, [esp+8FCh+arg_4]
.text:0040FA5D                 mov     esi, edi
.text:0040FA5F                 or      [ecx], eax
.text:0040FA61                 mov     edi, ebx
.text:0040FA63                 or      edi, ebp
.text:0040FA65                 mov     ebp, edx
.text:0040FA67                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040FA6B                 or      ebp, esi
.text:0040FA6D                 mov     esi, [esp+8FCh+arg_4]
.text:0040FA74                 mov     edx, [esp+8FCh+var_8BC]
.text:0040FA78                 mov     [esi+18h], ebx
.text:0040FA7B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040FA7F                 mov     ecx, edx
.text:0040FA81                 mov     [esi+30h], edi
.text:0040FA84                 xor     edx, edx
.text:0040FA86                 mov     [esi+34h], ebp
.text:0040FA89                 or      ebx, edx
.text:0040FA8B                 xor     esi, esi
.text:0040FA8D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040FA95                 or      esi, ecx
.text:0040FA97                 mov     edx, ebx
.text:0040FA99                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040FAA1                 sub     edx, 0D53E8000h
.text:0040FAA7                 mov     ecx, esi
.text:0040FAA9                 sbb     ecx, 19DB1DEh
.text:0040FAAF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040FAB3                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040FAB6                 call    sub_4118B0
.text:0040FABB                 mov     edx, eax
.text:0040FABD                 mov     ecx, [esp+8FCh+arg_4]
.text:0040FAC4                 shr     eax, 1Fh
.text:0040FAC7                 dec     eax
.text:0040FAC8                 and     edx, eax
.text:0040FACA                 mov     [ecx+38h], edx
.text:0040FACD                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040FAD0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040FAD4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040FADC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040FAE4                 call    sub_411730
.text:0040FAE9                 lea     ecx, [eax+eax*4]
.text:0040FAEC                 lea     ebx, [ecx+ecx*4]
.text:0040FAEF                 mov     eax, [esp+8FCh+arg_4]
.text:0040FAF6                 shl     ebx, 2
.text:0040FAF9                 mov     esi, ebx
.text:0040FAFB                 shr     esi, 1Fh
.text:0040FAFE                 dec     esi
.text:0040FAFF                 and     esi, ebx
.text:0040FB01                 mov     [eax+3Ch], esi
.text:0040FB04                 mov     edx, [esp+8FCh+var_8C4]
.text:0040FB08                 xor     esi, esi
.text:0040FB0A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040FB12                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040FB16                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040FB1E                 mov     ecx, edx
.text:0040FB20                 xor     edx, edx
.text:0040FB22                 or      ebx, edx
.text:0040FB24                 or      esi, ecx
.text:0040FB26                 mov     edx, ebx
.text:0040FB28                 sub     edx, 0D53E8000h
.text:0040FB2E                 mov     ecx, esi
.text:0040FB30                 sbb     ecx, 19DB1DEh
.text:0040FB36                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040FB3A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040FB3D                 call    sub_4118B0
.text:0040FB42                 mov     edx, eax
.text:0040FB44                 mov     ecx, [esp+8FCh+arg_4]
.text:0040FB4B                 shr     eax, 1Fh
.text:0040FB4E                 dec     eax
.text:0040FB4F                 and     edx, eax
.text:0040FB51                 mov     [ecx+48h], edx
.text:0040FB54                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040FB57                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040FB5B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040FB63                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040FB6B                 call    sub_411730
.text:0040FB70                 lea     ecx, [eax+eax*4]
.text:0040FB73                 lea     ebx, [ecx+ecx*4]
.text:0040FB76                 mov     eax, [esp+8FCh+arg_4]
.text:0040FB7D                 shl     ebx, 2
.text:0040FB80                 mov     esi, ebx
.text:0040FB82                 shr     esi, 1Fh
.text:0040FB85                 dec     esi
.text:0040FB86                 and     esi, ebx
.text:0040FB88                 mov     [eax+4Ch], esi
.text:0040FB8B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040FB8F                 xor     esi, esi
.text:0040FB91                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040FB99                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040FB9D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040FBA5                 mov     ecx, edx
.text:0040FBA7                 xor     edx, edx
.text:0040FBA9                 or      ebx, edx
.text:0040FBAB                 or      esi, ecx
.text:0040FBAD                 mov     edx, ebx
.text:0040FBAF                 sub     edx, 0D53E8000h
.text:0040FBB5                 mov     ecx, esi
.text:0040FBB7                 sbb     ecx, 19DB1DEh
.text:0040FBBD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040FBC1                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040FBC4                 call    sub_4118B0
.text:0040FBC9                 mov     edx, eax
.text:0040FBCB                 mov     ecx, [esp+8FCh+arg_4]
.text:0040FBD2                 shr     eax, 1Fh
.text:0040FBD5                 dec     eax
.text:0040FBD6                 and     edx, eax
.text:0040FBD8                 mov     [ecx+40h], edx
.text:0040FBDB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040FBDE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040FBE2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040FBEA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040FBF2                 call    sub_411730
.text:0040FBF7                 lea     ebx, [eax+eax*4]
.text:0040FBFA                 mov     esi, [esp+8FCh+arg_4]
.text:0040FC01                 lea     edx, [ebx+ebx*4]
.text:0040FC04                 shl     edx, 2
.text:0040FC07                 mov     eax, edi
.text:0040FC09                 mov     ecx, edx
.text:0040FC0B                 mov     dword ptr [esi+50h], 200h
.text:0040FC12                 shr     ecx, 1Fh
.text:0040FC15                 dec     ecx
.text:0040FC16                 and     ecx, edx
.text:0040FC18                 test    ebp, ebp
.text:0040FC1A                 mov     edx, ebp
.text:0040FC1C                 mov     [esi+44h], ecx
.text:0040FC1F                 js      short loc_40FC71
.text:0040FC21
.text:0040FC21 loc_40FC21:                             ; CODE XREF: sub_40F890+3E9↓j
.text:0040FC21                 xor     esi, esi
.text:0040FC23                 mov     ebp, edi
.text:0040FC25                 mov     ecx, eax
.text:0040FC27                 shrd    ecx, edx, 9
.text:0040FC2B                 mov     ebx, edx
.text:0040FC2D                 and     ebp, 1FFh
.text:0040FC33                 mov     eax, esi
.text:0040FC35                 sar     ebx, 9
.text:0040FC38                 or      eax, ebp
.text:0040FC3A                 jz      short loc_40FC42
.text:0040FC3C                 add     ecx, 1
.text:0040FC3F                 adc     ebx, 0
.text:0040FC42
.text:0040FC42 loc_40FC42:                             ; CODE XREF: sub_40F890+3AA↑j
.text:0040FC42                 mov     edx, [esp+8FCh+arg_4]
.text:0040FC49                 mov     [edx+5Ch], ebx
.text:0040FC4C                 mov     ebx, [esp+8FCh+lpFileName]
.text:0040FC53                 mov     [edx+58h], ecx
.text:0040FC56                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040FC5A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040FC5D                 call    sub_40EAB0
.text:0040FC62                 xor     edx, edx
.text:0040FC64
.text:0040FC64 loc_40FC64:                             ; CODE XREF: sub_40F890+43↑j
.text:0040FC64                 add     esp, 8ECh
.text:0040FC6A                 mov     eax, edx
.text:0040FC6C                 pop     ebx
.text:0040FC6D                 pop     esi
.text:0040FC6E                 pop     edi
.text:0040FC6F                 pop     ebp
.text:0040FC70                 retn
.text:0040FC71 ; ---------------------------------------------------------------------------
.text:0040FC71
.text:0040FC71 loc_40FC71:                             ; CODE XREF: sub_40F890+38F↑j
.text:0040FC71                 add     eax, 1FFh
.text:0040FC76                 adc     edx, 0
.text:0040FC79                 jmp     short loc_40FC21
.text:0040FC79 ; ---------------------------------------------------------------------------
.text:0040FC7B                 align 10h
.text:0040FC80
.text:0040FC80 loc_40FC80:                             ; CODE XREF: sub_40F890+CA↑j
.text:0040FC80                 mov     eax, [esp+8FCh+lpFileName]
.text:0040FC87                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040FC8A                 call    sub_40E460
.text:0040FC8F                 mov     [esp+8FCh+var_34], eax
.text:0040FC96                 jmp     loc_40F96C
.text:0040FC96 sub_40F890      endp
.text:0040FC96
.text:0040FC96 ; ---------------------------------------------------------------------------
.text:0040FC9B                 align 10h
.text:0040FCA0 ; START OF FUNCTION CHUNK FOR sub_40D5F0
.text:0040FCA0
.text:0040FCA0 loc_40FCA0:                             ; CODE XREF: sub_40D5F0+26↑j
.text:0040FCA0                 cld
.text:0040FCA1                 sub     esp, 2Ch
.text:0040FCA4                 xor     eax, eax
.text:0040FCA6                 mov     [esp+2Ch+var_10], ebx
.text:0040FCAA                 mov     ecx, 18h
.text:0040FCAF                 mov     ebx, [esp+2Ch+arg_0]
.text:0040FCB3                 mov     [esp+2Ch+var_C], esi
.text:0040FCB7                 mov     esi, [esp+2Ch+arg_4]
.text:0040FCBB                 test    ebx, ebx
.text:0040FCBD                 mov     [esp+2Ch+var_8], edi
.text:0040FCC1                 mov     edi, esi
.text:0040FCC3                 mov     [esp+2Ch+var_4], ebp
.text:0040FCC7                 rep stosd
.text:0040FCC9                 jz      short loc_40FCD0
.text:0040FCCB                 cmp     byte ptr [ebx], 0
.text:0040FCCE                 jnz     short loc_40FCE8
.text:0040FCD0
.text:0040FCD0 loc_40FCD0:                             ; CODE XREF: sub_40D5F0+26D9↑j
.text:0040FCD0                 xor     edx, edx
.text:0040FCD2
.text:0040FCD2 loc_40FCD2:                             ; CODE XREF: sub_40D5F0+270F↓j
.text:0040FCD2                                         ; sub_40D5F0+27B8↓j
.text:0040FCD2                 mov     ebx, [esp+2Ch+var_10]
.text:0040FCD6                 mov     eax, edx
.text:0040FCD8                 mov     esi, [esp+2Ch+var_C]
.text:0040FCDC                 mov     edi, [esp+2Ch+var_8]
.text:0040FCE0                 mov     ebp, [esp+2Ch+var_4]
.text:0040FCE4                 add     esp, 2Ch
.text:0040FCE7                 retn
.text:0040FCE8 ; ---------------------------------------------------------------------------
.text:0040FCE8
.text:0040FCE8 loc_40FCE8:                             ; CODE XREF: sub_40D5F0+26DE↑j
.text:0040FCE8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040FCF0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040FCF3                 call    sub_40BEF0
.text:0040FCF8                 test    eax, eax
.text:0040FCFA                 mov     edx, 0FFFFFFFFh
.text:0040FCFF                 jnz     short loc_40FCD2
.text:0040FD01                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040FD04                 call    sub_409D40
.text:0040FD09                 mov     [esp+2Ch+lpFileName], eax
.text:0040FD0C                 call    sub_40AFF0
.text:0040FD11                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040FD14                 mov     ebp, eax
.text:0040FD16                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040FD1E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040FD26                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040FD2E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040FD36                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040FD3E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040FD46                 call    CreateFileA
.text:0040FD4B                 sub     esp, 1Ch
.text:0040FD4E                 mov     ebx, eax
.text:0040FD50                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040FD54                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:0040FD57                 call    sub_40E5E0
.text:0040FD5C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040FD5F                 mov     edi, eax
.text:0040FD61                 call    CloseHandle
.text:0040FD66                 sub     esp, 4
.text:0040FD69                 cmp     edi, 0FFFFFFFFh
.text:0040FD6C                 jz      short loc_40FDCA
.text:0040FD6E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040FD72                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040FD75                 call    sub_40EAB0
.text:0040FD7A
.text:0040FD7A loc_40FD7A:                             ; CODE XREF: sub_40D5F0+27E8↓j
.text:0040FD7A                 mov     edx, [esi]
.text:0040FD7C                 and     edx, 0F000h
.text:0040FD82                 cmp     edx, 4000h
.text:0040FD88                 jz      short loc_40FDBD
.text:0040FD8A
.text:0040FD8A loc_40FD8A:                             ; CODE XREF: sub_40D5F0+27D8↓j
.text:0040FD8A                 cmp     edi, 0FFFFFFFFh
.text:0040FD8D                 jz      short loc_40FDAD
.text:0040FD8F
.text:0040FD8F loc_40FD8F:                             ; CODE XREF: sub_40D5F0+27CB↓j
.text:0040FD8F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040FD96                 call    SetErrorMode
.text:0040FD9B                 sub     esp, 4
.text:0040FD9E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040FDA1                 call    free
.text:0040FDA6                 mov     edx, edi
.text:0040FDA8                 jmp     loc_40FCD2
.text:0040FDAD ; ---------------------------------------------------------------------------
.text:0040FDAD
.text:0040FDAD loc_40FDAD:                             ; CODE XREF: sub_40D5F0+279D↑j
.text:0040FDAD                 call    sub_40C250
.text:0040FDB2                 mov     esi, eax
.text:0040FDB4                 call    _errno
.text:0040FDB9                 mov     [eax], esi
.text:0040FDBB                 jmp     short loc_40FD8F
.text:0040FDBD ; ---------------------------------------------------------------------------
.text:0040FDBD
.text:0040FDBD loc_40FDBD:                             ; CODE XREF: sub_40D5F0+2798↑j
.text:0040FDBD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:0040FDC0                 call    sub_40E460
.text:0040FDC5                 mov     [esi+18h], eax
.text:0040FDC8                 jmp     short loc_40FD8A
.text:0040FDCA ; ---------------------------------------------------------------------------
.text:0040FDCA
.text:0040FDCA loc_40FDCA:                             ; CODE XREF: sub_40D5F0+277C↑j
.text:0040FDCA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040FDCE                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:0040FDD1                 call    sub_40F890
.text:0040FDD6                 mov     edi, eax
.text:0040FDD8                 jmp     short loc_40FD7A
.text:0040FDD8 ; END OF FUNCTION CHUNK FOR sub_40D5F0
.text:0040FDD8 ; ---------------------------------------------------------------------------
.text:0040FDDA                 align 10h
.text:0040FDE0 ; const char aFxstat64BadFil[]
.text:0040FDE0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040FDE0                                         ; DATA XREF: sub_40FE10+7B↓o
.text:0040FE04                 align 10h
.text:0040FE10
.text:0040FE10 ; =============== S U B R O U T I N E =======================================
.text:0040FE10
.text:0040FE10
.text:0040FE10 ; int __cdecl sub_40FE10(HANDLE hNamedPipe, int, int)
.text:0040FE10 sub_40FE10      proc near               ; CODE XREF: .text:0040D289↑p
.text:0040FE10
.text:0040FE10 FileHandle      = dword ptr -1Ch
.text:0040FE10 var_18          = dword ptr -18h
.text:0040FE10 var_C           = dword ptr -0Ch
.text:0040FE10 var_8           = dword ptr -8
.text:0040FE10 var_4           = dword ptr -4
.text:0040FE10 hNamedPipe      = dword ptr  4
.text:0040FE10 arg_4           = dword ptr  8
.text:0040FE10 arg_8           = dword ptr  0Ch
.text:0040FE10
.text:0040FE10                 sub     esp, 1Ch
.text:0040FE13                 mov     edx, [esp+1Ch+arg_4]
.text:0040FE17                 mov     [esp+1Ch+var_C], ebx
.text:0040FE1B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040FE1F                 mov     [esp+1Ch+var_8], esi
.text:0040FE23                 mov     esi, [esp+1Ch+arg_8]
.text:0040FE27                 test    ebx, ebx
.text:0040FE29                 mov     [esp+1Ch+var_4], edi
.text:0040FE2D                 jnz     short loc_40FE67
.text:0040FE2F                 test    edx, edx
.text:0040FE31                 js      short loc_40FE87
.text:0040FE33                 test    esi, esi
.text:0040FE35                 jz      short loc_40FE67
.text:0040FE37                 cld
.text:0040FE38                 mov     eax, ebx
.text:0040FE3A                 mov     edi, esi
.text:0040FE3C                 mov     ecx, 18h
.text:0040FE41                 rep stosd
.text:0040FE43                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040FE47                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040FE4A                 call    _get_osfhandle
.text:0040FE4F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040FE53                 mov     ebx, [esp+1Ch+var_C]
.text:0040FE57                 mov     esi, [esp+1Ch+var_8]
.text:0040FE5B                 mov     edi, [esp+1Ch+var_4]
.text:0040FE5F                 add     esp, 1Ch
.text:0040FE62                 jmp     sub_40E5E0
.text:0040FE67 ; ---------------------------------------------------------------------------
.text:0040FE67
.text:0040FE67 loc_40FE67:                             ; CODE XREF: sub_40FE10+1D↑j
.text:0040FE67                                         ; sub_40FE10+25↑j
.text:0040FE67                 call    _errno
.text:0040FE6C                 mov     dword ptr [eax], 16h
.text:0040FE72
.text:0040FE72 loc_40FE72:                             ; CODE XREF: sub_40FE10+92↓j
.text:0040FE72                 mov     ebx, [esp+1Ch+var_C]
.text:0040FE76                 mov     eax, 0FFFFFFFFh
.text:0040FE7B                 mov     esi, [esp+1Ch+var_8]
.text:0040FE7F                 mov     edi, [esp+1Ch+var_4]
.text:0040FE83                 add     esp, 1Ch
.text:0040FE86                 retn
.text:0040FE87 ; ---------------------------------------------------------------------------
.text:0040FE87
.text:0040FE87 loc_40FE87:                             ; CODE XREF: sub_40FE10+21↑j
.text:0040FE87                 mov     [esp+1Ch+var_18], edx
.text:0040FE8B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040FE92                 call    printf
.text:0040FE97                 call    _errno
.text:0040FE9C                 mov     dword ptr [eax], 9
.text:0040FEA2                 jmp     short loc_40FE72
.text:0040FEA2 sub_40FE10      endp
.text:0040FEA2
.text:0040FEA2 ; ---------------------------------------------------------------------------
.text:0040FEA4                 align 20h
.text:0040FEC0
.text:0040FEC0 ; =============== S U B R O U T I N E =======================================
.text:0040FEC0
.text:0040FEC0
.text:0040FEC0 ; int __cdecl sub_40FEC0(LPCSTR, int AccessMode)
.text:0040FEC0 sub_40FEC0      proc near               ; CODE XREF: sub_40DE80+349↑p
.text:0040FEC0
.text:0040FEC0 lpPathName      = dword ptr -1Ch
.text:0040FEC0 lpSecurityAttributes= dword ptr -18h
.text:0040FEC0 var_8           = dword ptr -8
.text:0040FEC0 var_4           = dword ptr -4
.text:0040FEC0 arg_0           = dword ptr  4
.text:0040FEC0 AccessMode      = dword ptr  8
.text:0040FEC0
.text:0040FEC0                 sub     esp, 1Ch
.text:0040FEC3                 mov     [esp+1Ch+var_8], ebx
.text:0040FEC7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040FECB                 mov     [esp+1Ch+var_4], esi
.text:0040FECF                 mov     esi, [esp+1Ch+AccessMode]
.text:0040FED3                 test    ebx, ebx
.text:0040FED5                 jz      short loc_40FF25
.text:0040FED7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040FEDF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040FEE2                 call    CreateDirectoryA
.text:0040FEE7                 sub     esp, 8
.text:0040FEEA                 test    eax, eax
.text:0040FEEC                 jz      short loc_40FF06
.text:0040FEEE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040FEF2                 mov     esi, [esp+1Ch+var_4]
.text:0040FEF6                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040FEFA                 mov     ebx, [esp+1Ch+var_8]
.text:0040FEFE                 add     esp, 1Ch
.text:0040FF01                 jmp     _chmod
.text:0040FF06 ; ---------------------------------------------------------------------------
.text:0040FF06
.text:0040FF06 loc_40FF06:                             ; CODE XREF: sub_40FEC0+2C↑j
.text:0040FF06                 call    sub_40C250
.text:0040FF0B                 mov     esi, eax
.text:0040FF0D                 call    _errno
.text:0040FF12                 mov     [eax], esi
.text:0040FF14
.text:0040FF14 loc_40FF14:                             ; CODE XREF: sub_40FEC0+70↓j
.text:0040FF14                 mov     ebx, [esp+1Ch+var_8]
.text:0040FF18                 mov     eax, 0FFFFFFFFh
.text:0040FF1D                 mov     esi, [esp+1Ch+var_4]
.text:0040FF21                 add     esp, 1Ch
.text:0040FF24                 retn
.text:0040FF25 ; ---------------------------------------------------------------------------
.text:0040FF25
.text:0040FF25 loc_40FF25:                             ; CODE XREF: sub_40FEC0+15↑j
.text:0040FF25                 call    _errno
.text:0040FF2A                 mov     dword ptr [eax], 16h
.text:0040FF30                 jmp     short loc_40FF14
.text:0040FF30 sub_40FEC0      endp
.text:0040FF30
.text:0040FF30 ; ---------------------------------------------------------------------------
.text:0040FF32                 align 10h
.text:0040FF40
.text:0040FF40 ; =============== S U B R O U T I N E =======================================
.text:0040FF40
.text:0040FF40
.text:0040FF40 sub_40FF40      proc near               ; CODE XREF: sub_40DE80+3C2↑p
.text:0040FF40
.text:0040FF40 var_1C          = dword ptr -1Ch
.text:0040FF40 var_18          = dword ptr -18h
.text:0040FF40 var_C           = dword ptr -0Ch
.text:0040FF40 var_8           = dword ptr -8
.text:0040FF40 var_4           = dword ptr -4
.text:0040FF40 arg_0           = dword ptr  4
.text:0040FF40 arg_4           = dword ptr  8
.text:0040FF40
.text:0040FF40                 sub     esp, 1Ch
.text:0040FF43                 mov     edx, [esp+1Ch+arg_4]
.text:0040FF47                 mov     [esp+1Ch+var_4], ebx
.text:0040FF4B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040FF4F                 mov     [esp+1Ch+var_18], edx
.text:0040FF53                 lea     edx, [esp+1Ch+var_C]
.text:0040FF57                 mov     [esp+1Ch+var_1C], edx
.text:0040FF5A                 call    sub_40FFC0
.text:0040FF5F                 test    eax, eax
.text:0040FF61                 mov     edx, 0FFFFFFFFh
.text:0040FF66                 jnz     short loc_40FF8A
.text:0040FF68                 mov     ecx, [esp+1Ch+var_C]
.text:0040FF6C                 mov     edx, 10624DD3h
.text:0040FF71                 mov     [ebx], ecx
.text:0040FF73                 mov     ecx, [esp+1Ch+var_8]
.text:0040FF77                 mov     eax, ecx
.text:0040FF79                 imul    edx
.text:0040FF7B                 mov     eax, ecx
.text:0040FF7D                 sar     eax, 1Fh
.text:0040FF80                 sar     edx, 6
.text:0040FF83                 sub     edx, eax
.text:0040FF85                 mov     [ebx+4], edx
.text:0040FF88                 xor     edx, edx
.text:0040FF8A
.text:0040FF8A loc_40FF8A:                             ; CODE XREF: sub_40FF40+26↑j
.text:0040FF8A                 mov     ebx, [esp+1Ch+var_4]
.text:0040FF8E                 mov     eax, edx
.text:0040FF90                 add     esp, 1Ch
.text:0040FF93                 retn
.text:0040FF93 sub_40FF40      endp
.text:0040FF93
.text:0040FF93 ; ---------------------------------------------------------------------------
.text:0040FF94                 align 10h
.text:0040FFA0
.text:0040FFA0 ; =============== S U B R O U T I N E =======================================
.text:0040FFA0
.text:0040FFA0
.text:0040FFA0 sub_40FFA0      proc near               ; CODE XREF: sub_40DB00+1A7↑p
.text:0040FFA0                                         ; sub_40DB00+237↑p ...
.text:0040FFA0                 mov     edx, ds:dword_4145B0
.text:0040FFA6                 test    edx, edx
.text:0040FFA8                 jnz     short loc_40FFB0
.text:0040FFAA                 jmp     getenv
.text:0040FFAA ; ---------------------------------------------------------------------------
.text:0040FFAF                 align 10h
.text:0040FFB0
.text:0040FFB0 loc_40FFB0:                             ; CODE XREF: sub_40FFA0+8↑j
.text:0040FFB0                 xor     eax, eax
.text:0040FFB2                 retn
.text:0040FFB2 sub_40FFA0      endp
.text:0040FFB2
.text:0040FFB2 ; ---------------------------------------------------------------------------
.text:0040FFB3                 align 10h
.text:0040FFC0
.text:0040FFC0 ; =============== S U B R O U T I N E =======================================
.text:0040FFC0
.text:0040FFC0
.text:0040FFC0 sub_40FFC0      proc near               ; CODE XREF: sub_40FF40+1A↑p
.text:0040FFC0
.text:0040FFC0 lpTimeZoneInformation= dword ptr -0DCh
.text:0040FFC0 var_D8          = dword ptr -0D8h
.text:0040FFC0 var_D4          = dword ptr -0D4h
.text:0040FFC0 var_D0          = dword ptr -0D0h
.text:0040FFC0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040FFC0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040FFC0 arg_0           = dword ptr  4
.text:0040FFC0 arg_4           = dword ptr  8
.text:0040FFC0
.text:0040FFC0                 push    edi
.text:0040FFC1                 push    esi
.text:0040FFC2                 push    ebx
.text:0040FFC3                 sub     esp, 0D0h
.text:0040FFC9                 mov     ebx, [esp+0DCh+arg_4]
.text:0040FFD0                 mov     edi, [esp+0DCh+arg_0]
.text:0040FFD7                 test    ebx, ebx
.text:0040FFD9                 jz      short loc_410004
.text:0040FFDB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040FFDF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040FFE2                 call    GetTimeZoneInformation
.text:0040FFE7                 sub     esp, 4
.text:0040FFEA                 cmp     eax, 0FFFFFFFFh
.text:0040FFED                 jz      loc_410085
.text:0040FFF3                 xor     ecx, ecx
.text:0040FFF5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040FFF9                 cmp     eax, 2
.text:0040FFFC                 setz    cl
.text:0040FFFF                 mov     [ebx], esi
.text:00410001                 mov     [ebx+4], ecx
.text:00410004
.text:00410004 loc_410004:                             ; CODE XREF: sub_40FFC0+19↑j
.text:00410004                                         ; sub_40FFC0+E0↓j
.text:00410004                 test    edi, edi
.text:00410006                 jz      short loc_410079
.text:00410008                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0041000C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0041000F                 call    GetSystemTimeAsFileTime
.text:00410014                 sub     esp, 4
.text:00410017                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0041001B                 mov     [esp+0DCh+var_D4], 989680h
.text:00410023                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:00410027                 mov     [esp+0DCh+var_D0], 0
.text:0041002F                 add     ebx, 2AC18000h
.text:00410035                 adc     esi, 0FE624E21h
.text:0041003B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0041003F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00410042                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:00410046                 mov     [esp+0DCh+var_D8], esi
.text:0041004A                 call    sub_4118B0
.text:0041004F                 mov     [edi], eax
.text:00410051                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00410054                 mov     [esp+0DCh+var_D4], 989680h
.text:0041005C                 mov     [esp+0DCh+var_D0], 0
.text:00410064                 mov     [esp+0DCh+var_D8], esi
.text:00410068                 call    sub_411730
.text:0041006D                 lea     ebx, [eax+eax*4]
.text:00410070                 lea     edx, [ebx+ebx*4]
.text:00410073                 shl     edx, 2
.text:00410076                 mov     [edi+4], edx
.text:00410079
.text:00410079 loc_410079:                             ; CODE XREF: sub_40FFC0+46↑j
.text:00410079                 add     esp, 0D0h
.text:0041007F                 xor     eax, eax
.text:00410081                 pop     ebx
.text:00410082                 pop     esi
.text:00410083                 pop     edi
.text:00410084                 retn
.text:00410085 ; ---------------------------------------------------------------------------
.text:00410085
.text:00410085 loc_410085:                             ; CODE XREF: sub_40FFC0+2D↑j
.text:00410085                 mov     dword ptr [ebx], 0
.text:0041008B                 mov     dword ptr [ebx+4], 0
.text:00410092                 call    sub_40C250
.text:00410097                 mov     esi, eax
.text:00410099                 call    _errno
.text:0041009E                 mov     [eax], esi
.text:004100A0                 jmp     loc_410004
.text:004100A0 sub_40FFC0      endp
.text:004100A0
.text:004100A0 ; ---------------------------------------------------------------------------
.text:004100A5                 align 10h
.text:004100B0                 sub     esp, 0Ch
.text:004100B3                 mov     [esp+4], ebx
.text:004100B7                 mov     [esp+8], esi
.text:004100BB                 xor     esi, esi
.text:004100BD                 call    sub_410130
.text:004100C2                 mov     ebx, eax
.text:004100C4                 call    sub_410120
.text:004100C9                 cmp     ebx, eax
.text:004100CB                 jz      short loc_4100E4
.text:004100CD
.text:004100CD loc_4100CD:                             ; CODE XREF: .text:004100F2↓j
.text:004100CD                 mov     esi, 1
.text:004100D2
.text:004100D2 loc_4100D2:                             ; CODE XREF: .text:004100F4↓j
.text:004100D2                 mov     ds:dword_4145B0, esi
.text:004100D8                 mov     ebx, [esp+4]
.text:004100DC                 mov     esi, [esp+8]
.text:004100E0                 add     esp, 0Ch
.text:004100E3                 retn
.text:004100E4 ; ---------------------------------------------------------------------------
.text:004100E4
.text:004100E4 loc_4100E4:                             ; CODE XREF: .text:004100CB↑j
.text:004100E4                 call    sub_410110
.text:004100E9                 mov     ebx, eax
.text:004100EB                 call    sub_410100
.text:004100F0                 cmp     ebx, eax
.text:004100F2                 jnz     short loc_4100CD
.text:004100F4                 jmp     short loc_4100D2
.text:004100F4 ; ---------------------------------------------------------------------------
.text:004100F6                 align 10h
.text:00410100
.text:00410100 ; =============== S U B R O U T I N E =======================================
.text:00410100
.text:00410100
.text:00410100 sub_410100      proc near               ; CODE XREF: .text:004100EB↑p
.text:00410100                 xor     eax, eax
.text:00410102                 retn
.text:00410102 sub_410100      endp
.text:00410102
.text:00410102 ; ---------------------------------------------------------------------------
.text:00410103                 align 10h
.text:00410110
.text:00410110 ; =============== S U B R O U T I N E =======================================
.text:00410110
.text:00410110
.text:00410110 sub_410110      proc near               ; CODE XREF: .text:loc_4100E4↑p
.text:00410110                 xor     eax, eax
.text:00410112                 retn
.text:00410112 sub_410110      endp
.text:00410112
.text:00410112 ; ---------------------------------------------------------------------------
.text:00410113                 align 10h
.text:00410120
.text:00410120 ; =============== S U B R O U T I N E =======================================
.text:00410120
.text:00410120
.text:00410120 sub_410120      proc near               ; CODE XREF: .text:004100C4↑p
.text:00410120                 xor     eax, eax
.text:00410122                 retn
.text:00410122 sub_410120      endp
.text:00410122
.text:00410122 ; ---------------------------------------------------------------------------
.text:00410123                 align 10h
.text:00410130
.text:00410130 ; =============== S U B R O U T I N E =======================================
.text:00410130
.text:00410130
.text:00410130 sub_410130      proc near               ; CODE XREF: .text:004100BD↑p
.text:00410130                 xor     eax, eax
.text:00410132                 retn
.text:00410132 sub_410130      endp
.text:00410132
.text:00410132 ; ---------------------------------------------------------------------------
.text:00410133                 align 10h
.text:00410140
.text:00410140 ; =============== S U B R O U T I N E =======================================
.text:00410140
.text:00410140 ; Attributes: thunk
.text:00410140
.text:00410140 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00410140 OleInitialize   proc near               ; CODE XREF: sub_40D390+1A↑p
.text:00410140
.text:00410140 pvReserved      = dword ptr  4
.text:00410140
.text:00410140                 jmp     ds:__imp_OleInitialize
.text:00410140 OleInitialize   endp
.text:00410140
.text:00410140 ; ---------------------------------------------------------------------------
.text:00410146                 align 10h
.text:00410150
.text:00410150 ; =============== S U B R O U T I N E =======================================
.text:00410150
.text:00410150 ; Attributes: thunk
.text:00410150
.text:00410150 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00410150 CoCreateInstance proc near              ; CODE XREF: sub_40D390+52↑p
.text:00410150
.text:00410150 rclsid          = dword ptr  4
.text:00410150 pUnkOuter       = dword ptr  8
.text:00410150 dwClsContext    = dword ptr  0Ch
.text:00410150 riid            = dword ptr  10h
.text:00410150 ppv             = dword ptr  14h
.text:00410150
.text:00410150                 jmp     ds:__imp_CoCreateInstance
.text:00410150 CoCreateInstance endp
.text:00410150
.text:00410150 ; ---------------------------------------------------------------------------
.text:00410156                 align 10h
.text:00410160
.text:00410160 ; =============== S U B R O U T I N E =======================================
.text:00410160
.text:00410160 ; Attributes: thunk
.text:00410160
.text:00410160 ; void __stdcall CoUninitialize()
.text:00410160 CoUninitialize  proc near               ; CODE XREF: sub_40D390+14E↑p
.text:00410160                                         ; sub_40D390+16D↑p
.text:00410160                 jmp     ds:__imp_CoUninitialize
.text:00410160 CoUninitialize  endp
.text:00410160
.text:00410160 ; ---------------------------------------------------------------------------
.text:00410166                 align 10h
.text:00410170                 add     al, 0BAh ; 'º'
.text:00410172                 retf
.text:00410172 ; ---------------------------------------------------------------------------
.text:00410173                 db 7Eh
.text:00410174                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:00410174                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:00410174                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:00410174                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:00410174                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:00410174                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:00410174                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:00410174                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:00410174                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:00410174                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:00410174                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:00410174                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:00410174                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:00410174                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:00410174                 dd 0C4426C00h, 330h, 0
.text:004102A8                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004102A8                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:004102A8                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:004102A8                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:004102F8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004102F8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:004102F8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:004102F8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:004102F8                 dd 0BA94B00h, 1Bh, 0
.text:00410358                 dd 0C0h, 46000000h, 1Ch, 0
.text:00410368                 dd 0C0h, 46000000h, 331h, 0
.text:00410378                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00410378                 dd 312h, 0
.text:00410398                 dd 0C0h, 46000000h, 30Eh, 0
.text:004103A8                 dd 0C0h, 46000000h, 30Dh, 0
.text:004103B8                 dd 0C0h, 46000000h, 311h, 0
.text:004103C8                 dd 0C0h, 46000000h, 313h, 0
.text:004103D8                 dd 0C0h, 46000000h, 30Ch, 0
.text:004103E8                 dd 0C0h, 46000000h, 30Fh, 0
.text:004103F8                 dd 0C0h, 46000000h, 310h, 0
.text:00410408                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00410408                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00410438                 dd 0C0h, 46000000h, 319h, 0
.text:00410448                 dd 0C0h, 46000000h, 315h, 0
.text:00410458                 dd 0C0h, 46000000h, 316h, 0
.text:00410468                 dd 0C0h, 46000000h, 315h, 0
.text:00410478                 dd 0C0h, 46000000h, 2E005h, 0
.text:00410488                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00410488                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00410488                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:004104C8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004104C8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:004104C8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:004104C8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:004104C8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:004104C8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:004104C8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:004104C8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:004104C8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:004104C8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:004104C8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:004104C8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:004104C8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:004104C8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:004104C8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:004104C8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:004104C8                 dd 2DE81h, 0
.text:00410618                 dd 0C0h, 46000000h, 4 dup(0)
.text:00410630                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00410630                 dd 0
.text:00410648                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00410648                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00410648                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00410648                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00410648                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00410648                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00410648                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00410648                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00410648                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00410648                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00410648                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00410648                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00410648                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00410648                 dd 10Fh, 0
.text:00410758                 dd 0C0h, 46000000h, 125h, 0
.text:00410768                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00410768                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00410768                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:004107A8                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:004107A8                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004107A8                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:004107A8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:004107A8                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:00410808                 dd 0C0h, 46000000h, 2E012h, 0
.text:00410818                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00410818                 dd 140h, 0
.text:00410838                 dd 0C0h, 46000000h, 1, 0
.text:00410848                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00410848                 dd 71D3400h, 13Dh, 0
.text:00410868                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00410868                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00410868                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00410868                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:004108B8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:004108B8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:004108B8                 dd 20405h, 0
.text:004108E8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:004108F8                 dd 0C0h, 46000000h, 20406h, 0
.text:00410908                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00410918                 dd 0C0h, 46000000h, 110h, 0
.text:00410928                 dd 0C0h, 46000000h, 10Eh, 0
.text:00410938                 dd 0C0h, 46000000h, 123h, 0
.text:00410948                 dd 0C0h, 46000000h, 124h, 0
.text:00410958                 dd 0C0h, 46000000h, 13h, 0
.text:00410968                 dd 0C0h, 46000000h, 14h, 0
.text:00410978                 dd 0C0h, 46000000h, 15h, 0
.text:00410988                 dd 0C0h, 46000000h, 20400h, 0
.text:00410998                 dd 0C0h, 46000000h, 121h, 0
.text:004109A8                 dd 0C0h, 46000000h, 122h, 0
.text:004109B8                 dd 0C0h, 46000000h, 2E011h, 0
.text:004109C8                 dd 0C0h, 46000000h, 108h, 0
.text:004109D8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:004109D8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004109D8                 dd 103h, 0
.text:00410A08                 dd 0C0h, 46000000h, 2E000h, 0
.text:00410A18                 dd 0C0h, 46000000h, 106h, 0
.text:00410A28                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00410A28                 dd 107h, 0
.text:00410A48                 dd 0C0h, 46000000h, 102h, 0
.text:00410A58                 dd 0C0h, 46000000h, 104h, 0
.text:00410A68                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00410A68                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00410A68                 dd 105h, 0
.text:00410A98                 dd 0C0h, 46000000h, 13Bh, 0
.text:00410AA8                 dd 0C0h, 46000000h, 139h, 0
.text:00410AB8                 dd 0C0h, 46000000h, 0Dh, 0
.text:00410AC8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00410AC8                 dd 101h, 0
.text:00410AE8                 dd 0C0h, 46000000h, 100h, 0
.text:00410AF8                 dd 0C0h, 46000000h, 20404h, 0
.text:00410B08                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00410B08                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00410B38                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00410B38                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00410B38                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00410B38                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00410B88                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00410B88                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00410B88                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00410B88                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00410B88                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00410B88                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:00410C08                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:00410C08                 dd 0Ah, 0
.text:00410C28                 dd 0C0h, 46000000h, 2, 0
.text:00410C38                 dd 0C0h, 46000000h, 1Dh, 0
.text:00410C48                 dd 0C0h, 46000000h, 3, 0
.text:00410C58                 dd 0C0h, 46000000h, 16h, 0
.text:00410C68                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00410C68                 dd 1608D74Fh, 0Fh, 0
.text:00410C88                 dd 0C0h, 46000000h, 20h, 0
.text:00410C98                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00410C98                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00410C98                 dd 0
.text:00410CC8                 dd 0C0h, 46000000h, 11Eh, 0
.text:00410CD8                 dd 0C0h, 46000000h, 128h, 0
.text:00410CE8                 dd 0C0h, 46000000h, 129h, 0
.text:00410CF8                 dd 0C0h, 46000000h, 118h, 0
.text:00410D08                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:00410D08                 dd 70474000h, 11Bh, 0
.text:00410D28                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00410D28                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00410D28                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00410D28                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00410D28                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00410D88                 dd 0C0h, 46000000h, 116h, 0
.text:00410D98                 dd 0C0h, 46000000h, 113h, 0
.text:00410DA8                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00410DA8                 dd 119h, 0
.text:00410DC8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:00410DC8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:00410DC8                 dd 0
.text:00410DF8                 dd 0C0h, 46000000h, 11Ch, 0
.text:00410E08                 dd 0C0h, 46000000h, 11Dh, 0
.text:00410E18                 dd 0C0h, 46000000h, 11Fh, 0
.text:00410E28                 dd 0C0h, 46000000h, 112h, 0
.text:00410E38                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00410E38                 dd 18E6000h, 120h, 0
.text:00410E58                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00410E58                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00410E58                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00410E98                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00410E98                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:00410EC8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00410EC8                 dd 11Ah, 0
.text:00410EE8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:00410EE8                 dd 10Ch, 0
.text:00410F08                 dd 0C0h, 46000000h
.text:00410F10 dword_410F10    dd 10Bh, 0              ; DATA XREF: sub_40D390+75↑o
.text:00410F18                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00410F18                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00410F18                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00410F18                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00410F68                 dd 0C0h, 46000000h, 109h, 0
.text:00410F78                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00410F78                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00410F78                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00410F78                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00410F78                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00410F78                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00410F78                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00410F78                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00410F78                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00410F78                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00410F78                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00411058                 dd 0C0h, 46000000h, 138h, 0
.text:00411068                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00411068                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00411068                 dd 27h, 0
.text:00411098                 dd 0C0h, 46000000h, 8, 0
.text:004110A8                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:004110A8                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:004110A8                 dd 20D00h, 0
.text:004110D8                 dd 0C0h, 46000000h, 20D03h, 0
.text:004110E8                 dd 0C0h, 46000000h, 12h, 0
.text:004110F8                 dd 0C0h, 46000000h, 4, 0
.text:00411108                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411108                 dd 7, 0
.text:00411128                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411128                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00411158                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411158                 dd 126h, 0
.text:00411178                 dd 0C0h, 46000000h, 10h, 0
.text:00411188                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00411188                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:004111B8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:004111B8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:004111B8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:004111F8                 dd 0C0h, 46000000h, 0Bh, 0
.text:00411208                 dd 0C0h, 46000000h, 0Ch, 0
.text:00411218                 dd 0C0h, 46000000h, 26h, 0
.text:00411228                 dd 0C0h, 46000000h, 6, 0
.text:00411238                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00411238                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00411238                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:00411278                 dd 0C0h, 46000000h, 20403h, 0
.text:00411288                 dd 0C0h, 46000000h, 20401h, 0
.text:00411298                 dd 0C0h, 46000000h, 20412h, 0
.text:004112A8                 dd 0C0h, 46000000h, 20402h, 0
.text:004112B8                 dd 0C0h, 46000000h, 20411h, 0
.text:004112C8                 dd 0C0h, 46000000h, 2 dup(0)
.text:004112D8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004112D8                 dd 10Dh, 0
.text:004112F8                 dd 0C0h, 46000000h, 127h, 0
.text:00411308                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00411308                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:00411308                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00411348                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00411348                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00411348                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00411388                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00411398                 dd 0C0h, 46000000h, 2DE18h, 0
.text:004113A8                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:004113B8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:004113C8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:004113D8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:004113E8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:004113F8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00411408                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00411418                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00411428                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00411438                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00411448                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00411458                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00411468                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00411478                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00411488                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00411498                 dd 0C0h, 46000000h, 2DE13h, 0
.text:004114A8                 dd 0C0h, 46000000h, 2DE10h, 0
.text:004114B8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:004114C8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:004114D8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:004114E8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:004114F8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00411508                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00411518                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00411528                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00411538                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00411548                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00411558                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00411568                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00411578                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00411588                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00411598                 dd 0C0h, 46000000h, 2DE03h, 0
.text:004115A8                 dd 0C0h, 46000000h, 2DE08h, 0
.text:004115B8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:004115B8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:004115E0
.text:004115E0 ; =============== S U B R O U T I N E =======================================
.text:004115E0
.text:004115E0 ; Attributes: thunk
.text:004115E0
.text:004115E0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004115E0 mbrtowc         proc near               ; CODE XREF: sub_407D40+757↑p
.text:004115E0
.text:004115E0 DstCh           = dword ptr  4
.text:004115E0 SrcCh           = dword ptr  8
.text:004115E0 SizeInBytes     = dword ptr  0Ch
.text:004115E0 State           = dword ptr  10h
.text:004115E0
.text:004115E0                 jmp     ds:__imp_mbrtowc
.text:004115E0 mbrtowc         endp
.text:004115E0
.text:004115E0 ; ---------------------------------------------------------------------------
.text:004115E6                 align 10h
.text:004115F0
.text:004115F0 ; =============== S U B R O U T I N E =======================================
.text:004115F0
.text:004115F0 ; Attributes: bp-based frame
.text:004115F0
.text:004115F0 sub_4115F0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004115F0                 push    ebp
.text:004115F1                 mov     ecx, offset byte_414000
.text:004115F6                 cmp     ecx, offset byte_414000
.text:004115FC                 mov     ebp, esp
.text:004115FE                 jnb     short loc_411616
.text:00411600
.text:00411600 loc_411600:                             ; CODE XREF: sub_4115F0+24↓j
.text:00411600                 mov     edx, [ecx+4]
.text:00411603                 mov     eax, [ecx]
.text:00411605                 add     ecx, 8
.text:00411608                 add     [edx+400000h], eax
.text:0041160E                 cmp     ecx, offset byte_414000
.text:00411614                 jb      short loc_411600
.text:00411616
.text:00411616 loc_411616:                             ; CODE XREF: sub_4115F0+E↑j
.text:00411616                 pop     ebp
.text:00411617                 retn
.text:00411617 sub_4115F0      endp
.text:00411617
.text:00411617 ; ---------------------------------------------------------------------------
.text:00411618                 align 10h
.text:00411620
.text:00411620 ; =============== S U B R O U T I N E =======================================
.text:00411620
.text:00411620 ; Attributes: bp-based frame
.text:00411620
.text:00411620 sub_411620      proc near               ; CODE XREF: sub_401080+16↑p
.text:00411620                                         ; TopLevelExceptionFilter+D7↑p
.text:00411620                 push    ebp
.text:00411621                 mov     ebp, esp
.text:00411623                 fninit
.text:00411625                 pop     ebp
.text:00411626                 retn
.text:00411626 sub_411620      endp
.text:00411626
.text:00411626 ; ---------------------------------------------------------------------------
.text:00411627                 align 10h
.text:00411630
.text:00411630 ; =============== S U B R O U T I N E =======================================
.text:00411630
.text:00411630 ; Attributes: bp-based frame
.text:00411630
.text:00411630 ; void __cdecl sub_411630()
.text:00411630 sub_411630      proc near               ; DATA XREF: .text:loc_411679↓o
.text:00411630                                         ; sub_4116C0:loc_4116EE↓o
.text:00411630                 push    ebp
.text:00411631                 mov     ebp, esp
.text:00411633                 sub     esp, 8
.text:00411636                 mov     eax, off_4130D4
.text:0041163B                 mov     edx, [eax]
.text:0041163D                 test    edx, edx
.text:0041163F                 jnz     short loc_411645
.text:00411641
.text:00411641 loc_411641:                             ; CODE XREF: sub_411630+2C↓j
.text:00411641                 mov     esp, ebp
.text:00411643                 pop     ebp
.text:00411644                 retn
.text:00411645 ; ---------------------------------------------------------------------------
.text:00411645
.text:00411645 loc_411645:                             ; CODE XREF: sub_411630+F↑j
.text:00411645                                         ; sub_411630+2A↓j
.text:00411645                 call    dword ptr [eax]
.text:00411647                 mov     edx, off_4130D4
.text:0041164D                 mov     ecx, [edx+4]
.text:00411650                 lea     eax, [edx+4]
.text:00411653                 mov     off_4130D4, eax
.text:00411658                 test    ecx, ecx
.text:0041165A                 jnz     short loc_411645
.text:0041165C                 jmp     short loc_411641
.text:0041165C sub_411630      endp
.text:0041165C
.text:0041165C ; ---------------------------------------------------------------------------
.text:0041165E                 align 10h
.text:00411660                 push    ebp
.text:00411661                 mov     ebp, esp
.text:00411663                 sub     esp, 8
.text:00411666                 mov     [ebp-4], ebx
.text:00411669                 mov     eax, ds:dword_412960
.text:0041166E                 cmp     eax, 0FFFFFFFFh
.text:00411671                 jz      short loc_41169C
.text:00411673
.text:00411673 loc_411673:                             ; CODE XREF: .text:004116A6↓j
.text:00411673                                         ; .text:004116B9↓j
.text:00411673                 test    eax, eax
.text:00411675                 mov     ebx, eax
.text:00411677                 jnz     short loc_411690
.text:00411679
.text:00411679 loc_411679:                             ; CODE XREF: .text:0041169A↓j
.text:00411679                 mov     dword ptr [esp], offset sub_411630
.text:00411680                 call    sub_401040
.text:00411685                 mov     ebx, [ebp-4]
.text:00411688                 mov     esp, ebp
.text:0041168A                 pop     ebp
.text:0041168B                 retn
.text:0041168B ; ---------------------------------------------------------------------------
.text:0041168C                 align 10h
.text:00411690
.text:00411690 loc_411690:                             ; CODE XREF: .text:00411677↑j
.text:00411690                                         ; .text:00411698↓j
.text:00411690                 call    ds:dword_412960[ebx*4]
.text:00411697                 dec     ebx
.text:00411698                 jnz     short loc_411690
.text:0041169A                 jmp     short loc_411679
.text:0041169C ; ---------------------------------------------------------------------------
.text:0041169C
.text:0041169C loc_41169C:                             ; CODE XREF: .text:00411671↑j
.text:0041169C                 mov     ecx, ds:dword_412964
.text:004116A2                 xor     eax, eax
.text:004116A4                 test    ecx, ecx
.text:004116A6                 jz      short loc_411673
.text:004116A8                 mov     edx, offset dword_412960
.text:004116AD                 lea     esi, [esi+0]
.text:004116B0
.text:004116B0 loc_4116B0:                             ; CODE XREF: .text:004116B7↓j
.text:004116B0                 inc     eax
.text:004116B1                 mov     ecx, [edx+eax*4+4]
.text:004116B5                 test    ecx, ecx
.text:004116B7                 jnz     short loc_4116B0
.text:004116B9                 jmp     short loc_411673
.text:004116B9 ; ---------------------------------------------------------------------------
.text:004116BB                 align 10h
.text:004116C0
.text:004116C0 ; =============== S U B R O U T I N E =======================================
.text:004116C0
.text:004116C0 ; Attributes: bp-based frame
.text:004116C0
.text:004116C0 sub_4116C0      proc near               ; CODE XREF: sub_401B70+16↑p
.text:004116C0
.text:004116C0 var_8           = dword ptr -8
.text:004116C0 var_4           = dword ptr -4
.text:004116C0
.text:004116C0                 push    ebp
.text:004116C1                 mov     ebp, esp
.text:004116C3                 sub     esp, 8
.text:004116C6                 mov     [ebp+var_4], ebx
.text:004116C9                 mov     edx, dword_4130D0
.text:004116CF                 test    edx, edx
.text:004116D1                 jnz     short loc_4116FA
.text:004116D3                 mov     eax, ds:dword_412960
.text:004116D8                 mov     edx, 1
.text:004116DD                 mov     dword_4130D0, edx
.text:004116E3                 cmp     eax, 0FFFFFFFFh
.text:004116E6                 jz      short loc_41170D
.text:004116E8
.text:004116E8 loc_4116E8:                             ; CODE XREF: sub_4116C0+57↓j
.text:004116E8                                         ; sub_4116C0+69↓j
.text:004116E8                 test    eax, eax
.text:004116EA                 mov     ebx, eax
.text:004116EC                 jnz     short loc_411701
.text:004116EE
.text:004116EE loc_4116EE:                             ; CODE XREF: sub_4116C0+4B↓j
.text:004116EE                 mov     [esp+8+var_8], offset sub_411630 ; void (__cdecl *)()
.text:004116F5                 call    sub_401040
.text:004116FA
.text:004116FA loc_4116FA:                             ; CODE XREF: sub_4116C0+11↑j
.text:004116FA                 mov     ebx, [ebp+var_4]
.text:004116FD                 mov     esp, ebp
.text:004116FF                 pop     ebp
.text:00411700                 retn
.text:00411701 ; ---------------------------------------------------------------------------
.text:00411701
.text:00411701 loc_411701:                             ; CODE XREF: sub_4116C0+2C↑j
.text:00411701                                         ; sub_4116C0+49↓j
.text:00411701                 call    ds:dword_412960[ebx*4]
.text:00411708                 dec     ebx
.text:00411709                 jnz     short loc_411701
.text:0041170B                 jmp     short loc_4116EE
.text:0041170D ; ---------------------------------------------------------------------------
.text:0041170D
.text:0041170D loc_41170D:                             ; CODE XREF: sub_4116C0+26↑j
.text:0041170D                 mov     ecx, ds:dword_412964
.text:00411713                 xor     eax, eax
.text:00411715                 test    ecx, ecx
.text:00411717                 jz      short loc_4116E8
.text:00411719                 mov     edx, offset dword_412960
.text:0041171E                 mov     esi, esi
.text:00411720
.text:00411720 loc_411720:                             ; CODE XREF: sub_4116C0+67↓j
.text:00411720                 inc     eax
.text:00411721                 mov     ebx, [edx+eax*4+4]
.text:00411725                 test    ebx, ebx
.text:00411727                 jnz     short loc_411720
.text:00411729                 jmp     short loc_4116E8
.text:00411729 sub_4116C0      endp
.text:00411729
.text:00411729 ; ---------------------------------------------------------------------------
.text:0041172B                 align 10h
.text:00411730
.text:00411730 ; =============== S U B R O U T I N E =======================================
.text:00411730
.text:00411730 ; Attributes: bp-based frame
.text:00411730
.text:00411730 sub_411730      proc near               ; CODE XREF: sub_402660+F7↑p
.text:00411730                                         ; sub_4028D0+6FA↑p ...
.text:00411730
.text:00411730 var_34          = dword ptr -34h
.text:00411730 var_2C          = dword ptr -2Ch
.text:00411730 var_28          = dword ptr -28h
.text:00411730 var_24          = dword ptr -24h
.text:00411730 var_20          = dword ptr -20h
.text:00411730 var_1C          = dword ptr -1Ch
.text:00411730 var_18          = dword ptr -18h
.text:00411730 var_14          = dword ptr -14h
.text:00411730 arg_0           = dword ptr  8
.text:00411730 arg_4           = dword ptr  0Ch
.text:00411730 arg_8           = dword ptr  10h
.text:00411730 arg_C           = dword ptr  14h
.text:00411730
.text:00411730                 push    ebp
.text:00411731                 mov     ebp, esp
.text:00411733                 push    edi
.text:00411734                 push    esi
.text:00411735                 push    ebx
.text:00411736                 sub     esp, 2Ch
.text:00411739                 mov     edx, [ebp+arg_C]
.text:0041173C                 mov     [ebp+var_20], 0
.text:00411743                 mov     ecx, [ebp+arg_0]
.text:00411746                 mov     ebx, [ebp+arg_4]
.text:00411749                 mov     [ebp+var_1C], 0
.text:00411750                 mov     eax, [ebp+arg_8]
.text:00411753                 test    edx, edx
.text:00411755                 mov     [ebp+var_24], edx
.text:00411758                 mov     edi, ebx
.text:0041175A                 mov     esi, eax
.text:0041175C                 mov     [ebp+var_28], ecx
.text:0041175F                 jnz     short loc_4117C0
.text:00411761                 cmp     eax, ebx
.text:00411763                 jbe     short loc_4117A0
.text:00411765                 mov     eax, ecx
.text:00411767                 mov     edx, ebx
.text:00411769                 div     esi
.text:0041176B
.text:0041176B loc_41176B:                             ; CODE XREF: sub_411730+8B↓j
.text:0041176B                 mov     [ebp+var_28], edx
.text:0041176E                 lea     ecx, [ebp+var_18]
.text:00411771                 test    ecx, ecx
.text:00411773                 jz      short loc_41178E
.text:00411775                 mov     [ebp+var_1C], 0
.text:0041177C
.text:0041177C loc_41177C:                             ; CODE XREF: sub_411730+DA↓j
.text:0041177C                 mov     eax, [ebp+var_28]
.text:0041177F                 mov     [ebp+var_20], eax
.text:00411782                 mov     edx, [ebp+var_20]
.text:00411785                 mov     ecx, [ebp+var_1C]
.text:00411788                 mov     [ebp+var_18], edx
.text:0041178B                 mov     [ebp+var_14], ecx
.text:0041178E
.text:0041178E loc_41178E:                             ; CODE XREF: sub_411730+43↑j
.text:0041178E                                         ; sub_411730+A7↓j ...
.text:0041178E                 mov     eax, [ebp+var_18]
.text:00411791                 mov     edx, [ebp+var_14]
.text:00411794                 add     esp, 2Ch
.text:00411797                 pop     ebx
.text:00411798                 pop     esi
.text:00411799                 pop     edi
.text:0041179A                 pop     ebp
.text:0041179B                 retn
.text:0041179B ; ---------------------------------------------------------------------------
.text:0041179C                 align 10h
.text:004117A0
.text:004117A0 loc_4117A0:                             ; CODE XREF: sub_411730+33↑j
.text:004117A0                 test    eax, eax
.text:004117A2                 jnz     short loc_4117AF
.text:004117A4                 mov     eax, 1
.text:004117A9                 xor     edx, edx
.text:004117AB                 div     esi
.text:004117AD                 mov     esi, eax
.text:004117AF
.text:004117AF loc_4117AF:                             ; CODE XREF: sub_411730+72↑j
.text:004117AF                 mov     eax, edi
.text:004117B1                 mov     edx, [ebp+var_24]
.text:004117B4                 div     esi
.text:004117B6                 mov     eax, [ebp+var_28]
.text:004117B9                 div     esi
.text:004117BB                 jmp     short loc_41176B
.text:004117BB ; ---------------------------------------------------------------------------
.text:004117BD                 align 10h
.text:004117C0
.text:004117C0 loc_4117C0:                             ; CODE XREF: sub_411730+2F↑j
.text:004117C0                 cmp     [ebp+var_24], ebx
.text:004117C3                 jbe     short loc_4117E0
.text:004117C5                 mov     [ebp+var_20], ecx
.text:004117C8
.text:004117C8 loc_4117C8:                             ; CODE XREF: sub_411730+15B↓j
.text:004117C8                 mov     [ebp+var_1C], edi
.text:004117CB                 mov     eax, [ebp+var_20]
.text:004117CE                 mov     edx, [ebp+var_1C]
.text:004117D1                 mov     [ebp+var_18], eax
.text:004117D4                 mov     [ebp+var_14], edx
.text:004117D7                 jmp     short loc_41178E
.text:004117D7 ; ---------------------------------------------------------------------------
.text:004117D9                 align 10h
.text:004117E0
.text:004117E0 loc_4117E0:                             ; CODE XREF: sub_411730+93↑j
.text:004117E0                 bsr     eax, [ebp+var_24]
.text:004117E4                 mov     ebx, eax
.text:004117E6                 xor     ebx, 1Fh
.text:004117E9                 jnz     short loc_411810
.text:004117EB                 cmp     edi, [ebp+var_24]
.text:004117EE                 ja      short loc_4117F5
.text:004117F0                 cmp     [ebp+var_28], esi
.text:004117F3                 jb      short loc_411800
.text:004117F5
.text:004117F5 loc_4117F5:                             ; CODE XREF: sub_411730+BE↑j
.text:004117F5                 mov     edx, [ebp+var_28]
.text:004117F8                 sub     edx, esi
.text:004117FA                 sbb     edi, [ebp+var_24]
.text:004117FD                 mov     [ebp+var_28], edx
.text:00411800
.text:00411800 loc_411800:                             ; CODE XREF: sub_411730+C3↑j
.text:00411800                 lea     ecx, [ebp+var_18]
.text:00411803                 test    ecx, ecx
.text:00411805                 jz      short loc_41178E
.text:00411807                 mov     [ebp+var_1C], edi
.text:0041180A                 jmp     loc_41177C
.text:0041180A ; ---------------------------------------------------------------------------
.text:0041180F                 align 10h
.text:00411810
.text:00411810 loc_411810:                             ; CODE XREF: sub_411730+B9↑j
.text:00411810                 mov     edx, [ebp+var_24]
.text:00411813                 mov     eax, 20h ; ' '
.text:00411818                 mov     cl, bl
.text:0041181A                 sub     eax, ebx
.text:0041181C                 mov     [ebp+var_2C], eax
.text:0041181F                 shl     edx, cl
.text:00411821                 mov     eax, esi
.text:00411823                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00411827                 shr     eax, cl
.text:00411829                 mov     cl, bl
.text:0041182B                 shl     esi, cl
.text:0041182D                 or      edx, eax
.text:0041182F                 mov     eax, [ebp+var_28]
.text:00411832                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00411836                 mov     [ebp+var_24], edx
.text:00411839                 mov     edx, edi
.text:0041183B                 shr     edx, cl
.text:0041183D                 mov     cl, bl
.text:0041183F                 shl     edi, cl
.text:00411841                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00411845                 shr     eax, cl
.text:00411847                 or      edi, eax
.text:00411849                 mov     eax, edi
.text:0041184B                 mov     cl, bl
.text:0041184D                 div     [ebp+var_24]
.text:00411850                 shl     [ebp+var_28], cl
.text:00411853                 mov     edi, edx
.text:00411855                 mul     esi
.text:00411857                 mov     [ebp+var_34], eax
.text:0041185A                 cmp     edx, edi
.text:0041185C                 ja      short loc_411898
.text:0041185E                 cmp     edx, edi
.text:00411860                 jz      short loc_411890
.text:00411862
.text:00411862 loc_411862:                             ; CODE XREF: sub_411730+166↓j
.text:00411862                                         ; sub_411730+173↓j
.text:00411862                 lea     eax, [ebp+var_18]
.text:00411865                 test    eax, eax
.text:00411867                 jz      loc_41178E
.text:0041186D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00411871                 mov     eax, [ebp+var_28]
.text:00411874                 sub     eax, [ebp+var_34]
.text:00411877                 sbb     edi, edx
.text:00411879                 mov     [ebp+var_28], eax
.text:0041187C                 mov     edx, edi
.text:0041187E                 shl     edx, cl
.text:00411880                 mov     cl, bl
.text:00411882                 shr     eax, cl
.text:00411884                 or      edx, eax
.text:00411886                 mov     [ebp+var_20], edx
.text:00411889                 shr     edi, cl
.text:0041188B                 jmp     loc_4117C8
.text:00411890 ; ---------------------------------------------------------------------------
.text:00411890
.text:00411890 loc_411890:                             ; CODE XREF: sub_411730+130↑j
.text:00411890                 mov     eax, [ebp+var_28]
.text:00411893                 cmp     [ebp+var_34], eax
.text:00411896                 jbe     short loc_411862
.text:00411898
.text:00411898 loc_411898:                             ; CODE XREF: sub_411730+12C↑j
.text:00411898                 mov     ecx, [ebp+var_34]
.text:0041189B                 sub     ecx, esi
.text:0041189D                 sbb     edx, [ebp+var_24]
.text:004118A0                 mov     [ebp+var_34], ecx
.text:004118A3                 jmp     short loc_411862
.text:004118A3 sub_411730      endp
.text:004118A3
.text:004118A3 ; ---------------------------------------------------------------------------
.text:004118A5                 align 10h
.text:004118B0
.text:004118B0 ; =============== S U B R O U T I N E =======================================
.text:004118B0
.text:004118B0 ; Attributes: bp-based frame
.text:004118B0
.text:004118B0 sub_4118B0      proc near               ; CODE XREF: sub_402660+11A↑p
.text:004118B0                                         ; sub_4028D0+6DA↑p ...
.text:004118B0
.text:004118B0 var_24          = dword ptr -24h
.text:004118B0 var_20          = dword ptr -20h
.text:004118B0 var_1C          = dword ptr -1Ch
.text:004118B0 var_18          = dword ptr -18h
.text:004118B0 var_14          = dword ptr -14h
.text:004118B0 var_C           = dword ptr -0Ch
.text:004118B0 var_8           = dword ptr -8
.text:004118B0 var_4           = dword ptr -4
.text:004118B0 arg_0           = dword ptr  8
.text:004118B0 arg_4           = dword ptr  0Ch
.text:004118B0 arg_8           = dword ptr  10h
.text:004118B0 arg_C           = dword ptr  14h
.text:004118B0
.text:004118B0                 push    ebp
.text:004118B1                 mov     ebp, esp
.text:004118B3                 sub     esp, 28h
.text:004118B6                 mov     [ebp+var_C], ebx
.text:004118B9                 mov     edx, [ebp+arg_C]
.text:004118BC                 mov     ecx, [ebp+arg_0]
.text:004118BF                 mov     [ebp+var_8], esi
.text:004118C2                 mov     eax, [ebp+arg_8]
.text:004118C5                 test    edx, edx
.text:004118C7                 mov     [ebp+var_4], edi
.text:004118CA                 mov     ebx, [ebp+arg_4]
.text:004118CD                 mov     esi, eax
.text:004118CF                 mov     [ebp+var_18], 0
.text:004118D6                 mov     [ebp+var_14], 0
.text:004118DD                 mov     [ebp+var_1C], ecx
.text:004118E0                 jnz     short loc_411932
.text:004118E2                 cmp     eax, ebx
.text:004118E4                 jbe     short loc_411910
.text:004118E6                 mov     eax, ecx
.text:004118E8                 mov     edx, ebx
.text:004118EA                 div     esi
.text:004118EC                 mov     edi, eax
.text:004118EE                 mov     esi, esi
.text:004118F0
.text:004118F0 loc_4118F0:                             ; CODE XREF: sub_4118B0+88↓j
.text:004118F0                                         ; sub_4118B0+A4↓j ...
.text:004118F0                 xor     ecx, ecx
.text:004118F2
.text:004118F2 loc_4118F2:                             ; CODE XREF: sub_4118B0+80↓j
.text:004118F2                 mov     [ebp+var_18], edi
.text:004118F5                 mov     ebx, [ebp+var_C]
.text:004118F8                 mov     eax, [ebp+var_18]
.text:004118FB                 mov     [ebp+var_14], ecx
.text:004118FE                 mov     esi, [ebp+var_8]
.text:00411901                 mov     edx, [ebp+var_14]
.text:00411904                 mov     edi, [ebp+var_4]
.text:00411907                 mov     esp, ebp
.text:00411909                 pop     ebp
.text:0041190A                 retn
.text:0041190A ; ---------------------------------------------------------------------------
.text:0041190B                 align 10h
.text:00411910
.text:00411910 loc_411910:                             ; CODE XREF: sub_4118B0+34↑j
.text:00411910                 test    eax, eax
.text:00411912                 jnz     short loc_411921
.text:00411914                 mov     eax, 1
.text:00411919                 xor     ecx, ecx
.text:0041191B                 xor     edx, edx
.text:0041191D                 div     ecx
.text:0041191F                 mov     esi, eax
.text:00411921
.text:00411921 loc_411921:                             ; CODE XREF: sub_4118B0+62↑j
.text:00411921                 mov     eax, ebx
.text:00411923                 xor     edx, edx
.text:00411925                 div     esi
.text:00411927                 mov     ecx, eax
.text:00411929                 mov     eax, [ebp+var_1C]
.text:0041192C                 div     esi
.text:0041192E                 mov     edi, eax
.text:00411930                 jmp     short loc_4118F2
.text:00411932 ; ---------------------------------------------------------------------------
.text:00411932
.text:00411932 loc_411932:                             ; CODE XREF: sub_4118B0+30↑j
.text:00411932                 cmp     edx, ebx
.text:00411934                 jbe     short loc_411940
.text:00411936                 xor     edi, edi
.text:00411938                 jmp     short loc_4118F0
.text:00411938 ; ---------------------------------------------------------------------------
.text:0041193A                 align 10h
.text:00411940
.text:00411940 loc_411940:                             ; CODE XREF: sub_4118B0+84↑j
.text:00411940                 bsr     eax, edx
.text:00411943                 xor     eax, 1Fh
.text:00411946                 mov     [ebp+var_20], eax
.text:00411949                 jnz     short loc_411960
.text:0041194B                 cmp     ebx, edx
.text:0041194D                 ja      short loc_411956
.text:0041194F                 xor     edi, edi
.text:00411951                 cmp     [ebp+var_1C], esi
.text:00411954                 jb      short loc_4118F0
.text:00411956
.text:00411956 loc_411956:                             ; CODE XREF: sub_4118B0+9D↑j
.text:00411956                 mov     edi, 1
.text:0041195B                 jmp     short loc_4118F0
.text:0041195B ; ---------------------------------------------------------------------------
.text:0041195D                 align 10h
.text:00411960
.text:00411960 loc_411960:                             ; CODE XREF: sub_4118B0+99↑j
.text:00411960                 mov     eax, [ebp+var_20]
.text:00411963                 mov     ecx, 20h ; ' '
.text:00411968                 sub     ecx, eax
.text:0041196A                 mov     [ebp+var_24], ecx
.text:0041196D                 mov     eax, esi
.text:0041196F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00411973                 shl     edx, cl
.text:00411975                 mov     edi, edx
.text:00411977                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041197B                 mov     edx, ebx
.text:0041197D                 shr     eax, cl
.text:0041197F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00411983                 or      edi, eax
.text:00411985                 mov     eax, [ebp+var_1C]
.text:00411988                 shl     esi, cl
.text:0041198A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041198E                 shr     edx, cl
.text:00411990                 movzx   ecx, byte ptr [ebp+var_20]
.text:00411994                 shl     ebx, cl
.text:00411996                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041199A                 shr     eax, cl
.text:0041199C                 or      ebx, eax
.text:0041199E                 movzx   ecx, byte ptr [ebp+var_20]
.text:004119A2                 mov     eax, ebx
.text:004119A4                 div     edi
.text:004119A6                 mov     ebx, edx
.text:004119A8                 mov     edi, eax
.text:004119AA                 shl     [ebp+var_1C], cl
.text:004119AD                 mul     esi
.text:004119AF                 cmp     edx, ebx
.text:004119B1                 ja      short loc_4119C4
.text:004119B3                 cmp     edx, ebx
.text:004119B5                 jnz     loc_4118F0
.text:004119BB                 cmp     eax, [ebp+var_1C]
.text:004119BE                 jbe     loc_4118F0
.text:004119C4
.text:004119C4 loc_4119C4:                             ; CODE XREF: sub_4118B0+101↑j
.text:004119C4                 dec     edi
.text:004119C5                 jmp     loc_4118F0
.text:004119C5 sub_4118B0      endp
.text:004119C5
.text:004119C5 ; ---------------------------------------------------------------------------
.text:004119CA                 align 10h
.text:004119D0
.text:004119D0 ; =============== S U B R O U T I N E =======================================
.text:004119D0
.text:004119D0 ; Attributes: info_from_lumina
.text:004119D0
.text:004119D0 ; void *__cdecl _alloca(size_t Size)
.text:004119D0 __alloca        proc near               ; CODE XREF: sub_401B70+E↑p
.text:004119D0                                         ; sub_4036B0+5F↑p
.text:004119D0                 push    ecx
.text:004119D1                 mov     ecx, esp
.text:004119D3                 add     ecx, 8
.text:004119D6
.text:004119D6 loc_4119D6:                             ; CODE XREF: __alloca+1B↓j
.text:004119D6                 cmp     eax, 1000h
.text:004119DB                 jb      short loc_4119ED
.text:004119DD                 sub     ecx, 1000h
.text:004119E3                 or      dword ptr [ecx], 0
.text:004119E6                 sub     eax, 1000h
.text:004119EB                 jmp     short loc_4119D6
.text:004119ED ; ---------------------------------------------------------------------------
.text:004119ED
.text:004119ED loc_4119ED:                             ; CODE XREF: __alloca+B↑j
.text:004119ED                 sub     ecx, eax
.text:004119EF                 or      dword ptr [ecx], 0
.text:004119F2                 mov     eax, esp
.text:004119F4                 mov     esp, ecx
.text:004119F6                 mov     ecx, [eax]
.text:004119F8                 mov     eax, [eax+4]
.text:004119FB                 jmp     eax
.text:004119FB __alloca        endp
.text:004119FB
.text:004119FB ; ---------------------------------------------------------------------------
.text:004119FD                 align 10h
.text:00411A00 flt_411A00      dd 2.3283064e-10        ; DATA XREF: sub_411A10+2B↓r
.text:00411A04 flt_411A04      dd 1.8446744e19         ; DATA XREF: sub_411A10:loc_411AA4↓r
.text:00411A08                 align 10h
.text:00411A10
.text:00411A10 ; =============== S U B R O U T I N E =======================================
.text:00411A10
.text:00411A10 ; Attributes: bp-based frame
.text:00411A10
.text:00411A10 ; int __cdecl sub_411A10(_TBYTE)
.text:00411A10 sub_411A10      proc near               ; CODE XREF: sub_405610+250↑p
.text:00411A10                                         ; sub_405610+52C↑p ...
.text:00411A10
.text:00411A10 var_20          = qword ptr -20h
.text:00411A10 var_18          = qword ptr -18h
.text:00411A10 var_C           = word ptr -0Ch
.text:00411A10 var_A           = word ptr -0Ah
.text:00411A10 var_4           = dword ptr -4
.text:00411A10 arg_0           = tbyte ptr  8
.text:00411A10
.text:00411A10                 push    ebp
.text:00411A11                 fldz
.text:00411A13                 mov     ebp, esp
.text:00411A15                 sub     esp, 18h
.text:00411A18                 fld     [ebp+arg_0]
.text:00411A1B                 fxch    st(1)
.text:00411A1D                 mov     [ebp+var_4], ebx
.text:00411A20                 fucom   st(1)
.text:00411A22                 fnstsw  ax
.text:00411A24                 sahf
.text:00411A25                 jbe     short loc_411A36
.text:00411A27                 fstp    st
.text:00411A29                 fstp    st
.text:00411A2B                 xor     eax, eax
.text:00411A2D                 xor     edx, edx
.text:00411A2F
.text:00411A2F loc_411A2F:                             ; CODE XREF: sub_411A10+7A↓j
.text:00411A2F                 mov     ebx, [ebp+var_4]
.text:00411A32                 mov     esp, ebp
.text:00411A34                 pop     ebp
.text:00411A35                 retn
.text:00411A36 ; ---------------------------------------------------------------------------
.text:00411A36
.text:00411A36 loc_411A36:                             ; CODE XREF: sub_411A10+15↑j
.text:00411A36                 fnstcw  [ebp+var_A]
.text:00411A39                 xor     ecx, ecx
.text:00411A3B                 fld     ds:flt_411A00
.text:00411A41                 movzx   eax, [ebp+var_A]
.text:00411A45                 fmul    st, st(2)
.text:00411A47                 or      ax, 0C00h
.text:00411A4B                 mov     [ebp+var_C], ax
.text:00411A4F                 fldcw   [ebp+var_C]
.text:00411A52                 fistp   [ebp+var_18]
.text:00411A55                 fldcw   [ebp+var_A]
.text:00411A58                 mov     eax, dword ptr [ebp+var_18]
.text:00411A5B                 mov     ebx, eax
.text:00411A5D                 push    eax
.text:00411A5E                 push    ecx
.text:00411A5F                 fild    [esp+20h+var_20]
.text:00411A62                 add     esp, 8
.text:00411A65                 test    eax, eax
.text:00411A67                 js      short loc_411AA4
.text:00411A69
.text:00411A69 loc_411A69:                             ; CODE XREF: sub_411A10+9A↓j
.text:00411A69                 fsubp   st(2), st
.text:00411A6B                 fucomp  st(1)
.text:00411A6D                 fnstsw  ax
.text:00411A6F                 sahf
.text:00411A70                 jbe     short loc_411A90
.text:00411A72                 fchs
.text:00411A74                 xor     edx, edx
.text:00411A76                 fldcw   [ebp+var_C]
.text:00411A79                 fistp   [ebp+var_18]
.text:00411A7C                 fldcw   [ebp+var_A]
.text:00411A7F                 mov     eax, dword ptr [ebp+var_18]
.text:00411A82                 sub     ecx, eax
.text:00411A84                 sbb     ebx, edx
.text:00411A86
.text:00411A86 loc_411A86:                             ; CODE XREF: sub_411A10+92↓j
.text:00411A86                 mov     eax, ecx
.text:00411A88                 mov     edx, ebx
.text:00411A8A                 jmp     short loc_411A2F
.text:00411A8A ; ---------------------------------------------------------------------------
.text:00411A8C                 align 10h
.text:00411A90
.text:00411A90 loc_411A90:                             ; CODE XREF: sub_411A10+60↑j
.text:00411A90                 fldcw   [ebp+var_C]
.text:00411A93                 fistp   [ebp+var_18]
.text:00411A96                 fldcw   [ebp+var_A]
.text:00411A99                 xor     edx, edx
.text:00411A9B                 mov     eax, dword ptr [ebp+var_18]
.text:00411A9E                 add     ecx, eax
.text:00411AA0                 adc     ebx, edx
.text:00411AA2                 jmp     short loc_411A86
.text:00411AA4 ; ---------------------------------------------------------------------------
.text:00411AA4
.text:00411AA4 loc_411AA4:                             ; CODE XREF: sub_411A10+57↑j
.text:00411AA4                 fadd    ds:flt_411A04
.text:00411AAA                 jmp     short loc_411A69
.text:00411AAA sub_411A10      endp
.text:00411AAA
.text:00411AAA ; ---------------------------------------------------------------------------
.text:00411AAC                 align 10h
.text:00411AB0
.text:00411AB0 ; =============== S U B R O U T I N E =======================================
.text:00411AB0
.text:00411AB0 ; Attributes: thunk
.text:00411AB0
.text:00411AB0 ; int __cdecl close(int FileHandle)
.text:00411AB0 _close          proc near               ; CODE XREF: sub_406710+14↑p
.text:00411AB0                                         ; sub_4090E0+1A5↑p ...
.text:00411AB0
.text:00411AB0 FileHandle      = dword ptr  4
.text:00411AB0
.text:00411AB0                 jmp     ds:__imp__close
.text:00411AB0 _close          endp
.text:00411AB0
.text:00411AB0 ; ---------------------------------------------------------------------------
.text:00411AB6                 align 10h
.text:00411AC0
.text:00411AC0 ; =============== S U B R O U T I N E =======================================
.text:00411AC0
.text:00411AC0 ; Attributes: thunk
.text:00411AC0
.text:00411AC0 ; int open(const char *FileName, int OpenFlag, ...)
.text:00411AC0 _open           proc near               ; CODE XREF: sub_4098A0+75↑p
.text:00411AC0                                         ; sub_4098A0+147↑p
.text:00411AC0
.text:00411AC0 FileName        = dword ptr  4
.text:00411AC0 OpenFlag        = dword ptr  8
.text:00411AC0
.text:00411AC0                 jmp     ds:__imp__open
.text:00411AC0 _open           endp
.text:00411AC0
.text:00411AC0 ; ---------------------------------------------------------------------------
.text:00411AC6                 align 10h
.text:00411AD0
.text:00411AD0 ; =============== S U B R O U T I N E =======================================
.text:00411AD0
.text:00411AD0 ; Attributes: thunk
.text:00411AD0
.text:00411AD0 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00411AD0 _stricmp        proc near               ; CODE XREF: sub_40B480+28D↑p
.text:00411AD0                                         ; sub_40B480+462↑p ...
.text:00411AD0
.text:00411AD0 String1         = dword ptr  4
.text:00411AD0 String2         = dword ptr  8
.text:00411AD0
.text:00411AD0                 jmp     ds:__imp__stricmp
.text:00411AD0 _stricmp        endp
.text:00411AD0
.text:00411AD0 ; ---------------------------------------------------------------------------
.text:00411AD6                 align 10h
.text:00411AE0
.text:00411AE0 ; =============== S U B R O U T I N E =======================================
.text:00411AE0
.text:00411AE0 ; Attributes: thunk
.text:00411AE0
.text:00411AE0 ; char *__cdecl strdup(const char *String)
.text:00411AE0 _strdup         proc near               ; CODE XREF: sub_40CF50+101↑p
.text:00411AE0                                         ; .text:0040D1BA↑p ...
.text:00411AE0
.text:00411AE0 String          = dword ptr  4
.text:00411AE0
.text:00411AE0                 jmp     ds:__imp__strdup
.text:00411AE0 _strdup         endp
.text:00411AE0
.text:00411AE0 ; ---------------------------------------------------------------------------
.text:00411AE6                 align 10h
.text:00411AF0
.text:00411AF0 ; =============== S U B R O U T I N E =======================================
.text:00411AF0
.text:00411AF0 ; Attributes: thunk
.text:00411AF0
.text:00411AF0 ; int __cdecl getpid()
.text:00411AF0 _getpid         proc near               ; CODE XREF: sub_40DE80+84↑p
.text:00411AF0                 jmp     ds:__imp__getpid
.text:00411AF0 _getpid         endp
.text:00411AF0
.text:00411AF0 ; ---------------------------------------------------------------------------
.text:00411AF6                 align 10h
.text:00411B00
.text:00411B00 ; =============== S U B R O U T I N E =======================================
.text:00411B00
.text:00411B00 ; Attributes: thunk
.text:00411B00
.text:00411B00 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00411B00 _chmod          proc near               ; CODE XREF: sub_40FEC0+41↑j
.text:00411B00
.text:00411B00 FileName        = dword ptr  4
.text:00411B00 AccessMode      = dword ptr  8
.text:00411B00
.text:00411B00                 jmp     ds:__imp__chmod
.text:00411B00 _chmod          endp
.text:00411B00
.text:00411B00 ; ---------------------------------------------------------------------------
.text:00411B06                 align 10h
.text:00411B10
.text:00411B10 ; =============== S U B R O U T I N E =======================================
.text:00411B10
.text:00411B10 ; Attributes: info_from_lumina
.text:00411B10
.text:00411B10 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:00411B10 _strtoull       proc near               ; CODE XREF: sub_406A70+AD↑p
.text:00411B10
.text:00411B10 C               = dword ptr -3Ch
.text:00411B10 Type            = dword ptr -38h
.text:00411B10 var_34          = dword ptr -34h
.text:00411B10 var_30          = dword ptr -30h
.text:00411B10 var_2C          = dword ptr -2Ch
.text:00411B10 var_28          = dword ptr -28h
.text:00411B10 var_24          = dword ptr -24h
.text:00411B10 var_20          = dword ptr -20h
.text:00411B10 var_1C          = dword ptr -1Ch
.text:00411B10 var_18          = dword ptr -18h
.text:00411B10 String          = dword ptr  4
.text:00411B10 EndPtr          = dword ptr  8
.text:00411B10 Radix           = dword ptr  0Ch
.text:00411B10
.text:00411B10                 push    ebp
.text:00411B11                 push    edi
.text:00411B12                 push    esi
.text:00411B13                 push    ebx
.text:00411B14                 sub     esp, 2Ch
.text:00411B17                 mov     edx, [esp+3Ch+EndPtr]
.text:00411B1B                 test    edx, edx
.text:00411B1D                 jz      short loc_411B29
.text:00411B1F                 mov     eax, [esp+3Ch+String]
.text:00411B23                 mov     ecx, [esp+3Ch+EndPtr]
.text:00411B27                 mov     [ecx], eax
.text:00411B29
.text:00411B29 loc_411B29:                             ; CODE XREF: _strtoull+D↑j
.text:00411B29                 mov     edx, [esp+3Ch+Radix]
.text:00411B2D                 test    edx, edx
.text:00411B2F                 js      short loc_411B3F
.text:00411B31                 cmp     [esp+3Ch+Radix], 1
.text:00411B36                 jz      short loc_411B3F
.text:00411B38                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:00411B3D                 jle     short loc_411B56
.text:00411B3F
.text:00411B3F loc_411B3F:                             ; CODE XREF: _strtoull+1F↑j
.text:00411B3F                                         ; _strtoull+26↑j
.text:00411B3F                 call    _errno
.text:00411B44                 mov     dword ptr [eax], 21h ; '!'
.text:00411B4A
.text:00411B4A loc_411B4A:                             ; CODE XREF: _strtoull+FF↓j
.text:00411B4A                                         ; _strtoull+109↓j
.text:00411B4A                 xor     eax, eax
.text:00411B4C                 xor     edx, edx
.text:00411B4E
.text:00411B4E loc_411B4E:                             ; CODE XREF: _strtoull+244↓j
.text:00411B4E                                         ; _strtoull+251↓j ...
.text:00411B4E                 add     esp, 2Ch
.text:00411B51                 pop     ebx
.text:00411B52                 pop     esi
.text:00411B53                 pop     edi
.text:00411B54                 pop     ebp
.text:00411B55                 retn
.text:00411B56 ; ---------------------------------------------------------------------------
.text:00411B56
.text:00411B56 loc_411B56:                             ; CODE XREF: _strtoull+2D↑j
.text:00411B56                 mov     ecx, ds:__mb_cur_max
.text:00411B5C                 lea     esi, [esi+0]
.text:00411B60
.text:00411B60 loc_411B60:                             ; CODE XREF: _strtoull+7E↓j
.text:00411B60                 cmp     dword ptr [ecx], 1
.text:00411B63                 mov     esi, [esp+3Ch+String]
.text:00411B67                 movsx   edx, byte ptr [esi]
.text:00411B6A                 jz      loc_411F42
.text:00411B70                 mov     [esp+3Ch+Type], 8 ; Type
.text:00411B78                 mov     [esp+3Ch+C], edx ; C
.text:00411B7B                 call    _isctype
.text:00411B80                 mov     ecx, ds:__mb_cur_max
.text:00411B86
.text:00411B86 loc_411B86:                             ; CODE XREF: _strtoull+445↓j
.text:00411B86                 test    eax, eax
.text:00411B88                 jz      short loc_411B90
.text:00411B8A                 inc     [esp+3Ch+String]
.text:00411B8E                 jmp     short loc_411B60
.text:00411B90 ; ---------------------------------------------------------------------------
.text:00411B90
.text:00411B90 loc_411B90:                             ; CODE XREF: _strtoull+78↑j
.text:00411B90                 mov     esi, [esp+3Ch+String]
.text:00411B94                 xor     ebx, ebx
.text:00411B96                 movzx   edx, byte ptr [esi]
.text:00411B99                 cmp     dl, 2Dh ; '-'
.text:00411B9C                 setz    bl
.text:00411B9F                 test    ebx, ebx
.text:00411BA1                 mov     [esp+3Ch+var_20], ebx
.text:00411BA5                 jnz     loc_411F32
.text:00411BAB                 cmp     dl, 2Bh ; '+'
.text:00411BAE                 jz      loc_411F32
.text:00411BB4
.text:00411BB4 loc_411BB4:                             ; CODE XREF: _strtoull+42D↓j
.text:00411BB4                 mov     ebp, [esp+3Ch+Radix]
.text:00411BB8                 test    ebp, ebp
.text:00411BBA                 jnz     short loc_411BCD
.text:00411BBC                 cmp     dl, 30h ; '0'
.text:00411BBF                 jz      loc_411F09
.text:00411BC5                 mov     [esp+3Ch+Radix], 0Ah
.text:00411BCD
.text:00411BCD loc_411BCD:                             ; CODE XREF: _strtoull+AA↑j
.text:00411BCD                                         ; _strtoull+40F↓j ...
.text:00411BCD                 cmp     [esp+3Ch+Radix], 10h
.text:00411BD2                 jz      loc_411EDB
.text:00411BD8
.text:00411BD8 loc_411BD8:                             ; CODE XREF: _strtoull+3CE↓j
.text:00411BD8                                         ; _strtoull+3E2↓j ...
.text:00411BD8                 cmp     dword ptr [ecx], 1
.text:00411BDB                 movsx   ebx, dl
.text:00411BDE                 jz      loc_411EC3
.text:00411BE4                 mov     [esp+3Ch+Type], 4 ; Type
.text:00411BEC                 mov     [esp+3Ch+C], ebx ; C
.text:00411BEF                 call    _isctype
.text:00411BF4                 mov     esi, [esp+3Ch+String]
.text:00411BF8                 movzx   edx, byte ptr [esi]
.text:00411BFB
.text:00411BFB loc_411BFB:                             ; CODE XREF: _strtoull+3C6↓j
.text:00411BFB                 test    eax, eax
.text:00411BFD                 jz      loc_411E2C
.text:00411C03                 movsx   eax, dl
.text:00411C06                 sub     eax, 30h ; '0'
.text:00411C09
.text:00411C09 loc_411C09:                             ; CODE XREF: _strtoull+34B↓j
.text:00411C09                                         ; _strtoull+37C↓j ...
.text:00411C09                 inc     [esp+3Ch+String]
.text:00411C0D                 test    eax, eax
.text:00411C0F                 js      loc_411B4A
.text:00411C15                 cmp     eax, [esp+3Ch+Radix]
.text:00411C19                 jge     loc_411B4A
.text:00411C1F                 mov     [esp+3Ch+var_1C], eax
.text:00411C23                 mov     edx, eax
.text:00411C25                 sar     edx, 1Fh
.text:00411C28                 mov     [esp+3Ch+var_18], edx
.text:00411C2C                 mov     [esp+3Ch+var_24], 0
.text:00411C34                 lea     esi, [esi+0]
.text:00411C3A                 lea     edi, [edi+0]
.text:00411C40
.text:00411C40 loc_411C40:                             ; CODE XREF: _strtoull+20C↓j
.text:00411C40                 mov     ebp, [esp+3Ch+String]
.text:00411C44                 mov     ebx, ds:__mb_cur_max
.text:00411C4A                 movzx   edx, byte ptr [ebp+0]
.text:00411C4E                 cmp     dword ptr [ebx], 1
.text:00411C51                 movsx   ecx, dl
.text:00411C54                 jz      loc_411E15
.text:00411C5A                 mov     [esp+3Ch+C], ecx ; C
.text:00411C5D                 mov     [esp+3Ch+Type], 4 ; Type
.text:00411C65                 call    _isctype
.text:00411C6A                 mov     ecx, [esp+3Ch+String]
.text:00411C6E                 movzx   edx, byte ptr [ecx]
.text:00411C71
.text:00411C71 loc_411C71:                             ; CODE XREF: _strtoull+317↓j
.text:00411C71                 test    eax, eax
.text:00411C73                 jz      loc_411D80
.text:00411C79                 movsx   edi, dl
.text:00411C7C                 lea     ebp, [edi-30h]
.text:00411C7F
.text:00411C7F loc_411C7F:                             ; CODE XREF: _strtoull+2A3↓j
.text:00411C7F                 test    ebp, ebp
.text:00411C81                 js      loc_411D2B
.text:00411C87                 cmp     ebp, [esp+3Ch+Radix]
.text:00411C8B                 jge     loc_411D2B
.text:00411C91                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:00411C98                 mov     eax, [esp+3Ch+Radix]
.text:00411C9C                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:00411CA4                 cdq
.text:00411CA5                 mov     esi, eax
.text:00411CA7                 mov     [esp+3Ch+var_34], eax
.text:00411CAB                 mov     edi, edx
.text:00411CAD                 mov     [esp+3Ch+var_30], edx
.text:00411CB1                 call    sub_4118B0
.text:00411CB6                 add     eax, 1
.text:00411CB9                 adc     edx, 0
.text:00411CBC                 cmp     [esp+3Ch+var_18], edx
.text:00411CC0                 ja      short loc_411D10
.text:00411CC2                 jb      short loc_411CCA
.text:00411CC4                 cmp     [esp+3Ch+var_1C], eax
.text:00411CC8                 ja      short loc_411D10
.text:00411CCA
.text:00411CCA loc_411CCA:                             ; CODE XREF: _strtoull+1B2↑j
.text:00411CCA                 mov     eax, [esp+3Ch+var_1C]
.text:00411CCE                 mov     ebx, ebp
.text:00411CD0                 mul     esi
.text:00411CD2                 mov     ecx, edx
.text:00411CD4                 mov     [esp+3Ch+var_2C], eax
.text:00411CD8                 mov     eax, [esp+3Ch+var_18]
.text:00411CDC                 mov     [esp+3Ch+var_28], edx
.text:00411CE0                 imul    eax, esi
.text:00411CE3                 mov     esi, [esp+3Ch+var_1C]
.text:00411CE7                 imul    esi, edi
.text:00411CEA                 add     ecx, eax
.text:00411CEC                 lea     edi, [esi+ecx]
.text:00411CEF                 mov     esi, ebp
.text:00411CF1                 sar     esi, 1Fh
.text:00411CF4                 add     ebx, [esp+3Ch+var_2C]
.text:00411CF8                 mov     [esp+3Ch+var_28], edi
.text:00411CFC                 adc     esi, [esp+3Ch+var_28]
.text:00411D00                 cmp     esi, [esp+3Ch+var_18]
.text:00411D04                 jb      short loc_411D10
.text:00411D06                 ja      short loc_411D21
.text:00411D08                 cmp     ebx, [esp+3Ch+var_1C]
.text:00411D0C                 jnb     short loc_411D21
.text:00411D0E                 mov     esi, esi
.text:00411D10
.text:00411D10 loc_411D10:                             ; CODE XREF: _strtoull+1B0↑j
.text:00411D10                                         ; _strtoull+1B8↑j ...
.text:00411D10                 mov     [esp+3Ch+var_24], 1
.text:00411D18
.text:00411D18 loc_411D18:                             ; CODE XREF: _strtoull+219↓j
.text:00411D18                 inc     [esp+3Ch+String]
.text:00411D1C                 jmp     loc_411C40
.text:00411D21 ; ---------------------------------------------------------------------------
.text:00411D21
.text:00411D21 loc_411D21:                             ; CODE XREF: _strtoull+1F6↑j
.text:00411D21                                         ; _strtoull+1FC↑j
.text:00411D21                 mov     [esp+3Ch+var_1C], ebx
.text:00411D25                 mov     [esp+3Ch+var_18], esi
.text:00411D29                 jmp     short loc_411D18
.text:00411D2B ; ---------------------------------------------------------------------------
.text:00411D2B
.text:00411D2B loc_411D2B:                             ; CODE XREF: _strtoull+171↑j
.text:00411D2B                                         ; _strtoull+17B↑j
.text:00411D2B                 mov     eax, [esp+3Ch+EndPtr]
.text:00411D2F                 test    eax, eax
.text:00411D31                 jz      short loc_411D3E
.text:00411D33                 mov     ecx, [esp+3Ch+String]
.text:00411D37                 mov     ebp, [esp+3Ch+EndPtr]
.text:00411D3B                 mov     [ebp+0], ecx
.text:00411D3E
.text:00411D3E loc_411D3E:                             ; CODE XREF: _strtoull+221↑j
.text:00411D3E                 mov     esi, [esp+3Ch+var_24]
.text:00411D42                 test    esi, esi
.text:00411D44                 jnz     short loc_411D66
.text:00411D46                 mov     ebx, [esp+3Ch+var_20]
.text:00411D4A                 mov     eax, [esp+3Ch+var_1C]
.text:00411D4E                 mov     edx, [esp+3Ch+var_18]
.text:00411D52                 test    ebx, ebx
.text:00411D54                 jz      loc_411B4E
.text:00411D5A                 neg     eax
.text:00411D5C                 adc     edx, 0
.text:00411D5F                 neg     edx
.text:00411D61                 jmp     loc_411B4E
.text:00411D66 ; ---------------------------------------------------------------------------
.text:00411D66
.text:00411D66 loc_411D66:                             ; CODE XREF: _strtoull+234↑j
.text:00411D66                 call    _errno
.text:00411D6B                 mov     edx, 0FFFFFFFFh
.text:00411D70                 mov     dword ptr [eax], 22h ; '"'
.text:00411D76                 mov     eax, 0FFFFFFFFh
.text:00411D7B                 jmp     loc_411B4E
.text:00411D80 ; ---------------------------------------------------------------------------
.text:00411D80
.text:00411D80 loc_411D80:                             ; CODE XREF: _strtoull+163↑j
.text:00411D80                 mov     ebp, ds:__mb_cur_max
.text:00411D86                 movsx   ecx, dl
.text:00411D89                 cmp     dword ptr [ebp+0], 1
.text:00411D8D                 jz      short loc_411E01
.text:00411D8F                 mov     [esp+3Ch+Type], 1 ; Type
.text:00411D97                 mov     [esp+3Ch+C], ecx ; C
.text:00411D9A                 call    _isctype
.text:00411D9F                 mov     ebp, [esp+3Ch+String]
.text:00411DA3                 movzx   edx, byte ptr [ebp+0]
.text:00411DA7
.text:00411DA7 loc_411DA7:                             ; CODE XREF: _strtoull+303↓j
.text:00411DA7                 test    eax, eax
.text:00411DA9                 jz      short loc_411DB8
.text:00411DAB                 movsx   eax, dl
.text:00411DAE                 sub     eax, 37h ; '7'
.text:00411DB1
.text:00411DB1 loc_411DB1:                             ; CODE XREF: _strtoull+2D4↓j
.text:00411DB1                                         ; _strtoull+2DB↓j
.text:00411DB1                 mov     ebp, eax
.text:00411DB3                 jmp     loc_411C7F
.text:00411DB8 ; ---------------------------------------------------------------------------
.text:00411DB8
.text:00411DB8 loc_411DB8:                             ; CODE XREF: _strtoull+299↑j
.text:00411DB8                 mov     ecx, ds:__mb_cur_max
.text:00411DBE                 movsx   edx, dl
.text:00411DC1                 cmp     dword ptr [ecx], 1
.text:00411DC4                 jz      short loc_411DED
.text:00411DC6                 mov     [esp+3Ch+Type], 2 ; Type
.text:00411DCE                 mov     [esp+3Ch+C], edx ; C
.text:00411DD1                 call    _isctype
.text:00411DD6
.text:00411DD6 loc_411DD6:                             ; CODE XREF: _strtoull+2EF↓j
.text:00411DD6                 test    eax, eax
.text:00411DD8                 jz      short loc_411DE6
.text:00411DDA                 mov     edx, [esp+3Ch+String]
.text:00411DDE                 movsx   eax, byte ptr [edx]
.text:00411DE1                 sub     eax, 57h ; 'W'
.text:00411DE4                 jmp     short loc_411DB1
.text:00411DE6 ; ---------------------------------------------------------------------------
.text:00411DE6
.text:00411DE6 loc_411DE6:                             ; CODE XREF: _strtoull+2C8↑j
.text:00411DE6                 mov     eax, 0FFFFFFFFh
.text:00411DEB                 jmp     short loc_411DB1
.text:00411DED ; ---------------------------------------------------------------------------
.text:00411DED
.text:00411DED loc_411DED:                             ; CODE XREF: _strtoull+2B4↑j
.text:00411DED                 mov     edi, ds:_pctype
.text:00411DF3                 mov     ebx, [edi]
.text:00411DF5                 movzx   esi, word ptr [ebx+edx*2]
.text:00411DF9                 and     esi, 2
.text:00411DFC                 movzx   eax, si
.text:00411DFF                 jmp     short loc_411DD6
.text:00411E01 ; ---------------------------------------------------------------------------
.text:00411E01
.text:00411E01 loc_411E01:                             ; CODE XREF: _strtoull+27D↑j
.text:00411E01                 mov     edi, ds:_pctype
.text:00411E07                 mov     ebx, [edi]
.text:00411E09                 movzx   esi, word ptr [ebx+ecx*2]
.text:00411E0D                 and     esi, 1
.text:00411E10                 movzx   eax, si
.text:00411E13                 jmp     short loc_411DA7
.text:00411E15 ; ---------------------------------------------------------------------------
.text:00411E15
.text:00411E15 loc_411E15:                             ; CODE XREF: _strtoull+144↑j
.text:00411E15                 mov     ebx, ds:_pctype
.text:00411E1B                 mov     esi, [ebx]
.text:00411E1D                 movzx   edi, word ptr [esi+ecx*2]
.text:00411E21                 and     edi, 4
.text:00411E24                 movzx   eax, di
.text:00411E27                 jmp     loc_411C71
.text:00411E2C ; ---------------------------------------------------------------------------
.text:00411E2C
.text:00411E2C loc_411E2C:                             ; CODE XREF: _strtoull+ED↑j
.text:00411E2C                 mov     ebx, ds:__mb_cur_max
.text:00411E32                 movsx   ecx, dl
.text:00411E35                 cmp     dword ptr [ebx], 1
.text:00411E38                 jz      short loc_411EAF
.text:00411E3A                 mov     [esp+3Ch+C], ecx ; C
.text:00411E3D                 mov     [esp+3Ch+Type], 1 ; Type
.text:00411E45                 call    _isctype
.text:00411E4A                 mov     ecx, [esp+3Ch+String]
.text:00411E4E                 movzx   edx, byte ptr [ecx]
.text:00411E51
.text:00411E51 loc_411E51:                             ; CODE XREF: _strtoull+3B1↓j
.text:00411E51                 test    eax, eax
.text:00411E53                 jz      short loc_411E60
.text:00411E55                 movsx   eax, dl
.text:00411E58                 sub     eax, 37h ; '7'
.text:00411E5B                 jmp     loc_411C09
.text:00411E60 ; ---------------------------------------------------------------------------
.text:00411E60
.text:00411E60 loc_411E60:                             ; CODE XREF: _strtoull+343↑j
.text:00411E60                 mov     ebx, ds:__mb_cur_max
.text:00411E66                 movsx   edx, dl
.text:00411E69                 cmp     dword ptr [ebx], 1
.text:00411E6C                 jz      short loc_411E9B
.text:00411E6E                 mov     [esp+3Ch+Type], 2 ; Type
.text:00411E76                 mov     [esp+3Ch+C], edx ; C
.text:00411E79                 call    _isctype
.text:00411E7E
.text:00411E7E loc_411E7E:                             ; CODE XREF: _strtoull+39D↓j
.text:00411E7E                 test    eax, eax
.text:00411E80                 jz      short loc_411E91
.text:00411E82                 mov     ecx, [esp+3Ch+String]
.text:00411E86                 movsx   eax, byte ptr [ecx]
.text:00411E89                 sub     eax, 57h ; 'W'
.text:00411E8C                 jmp     loc_411C09
.text:00411E91 ; ---------------------------------------------------------------------------
.text:00411E91
.text:00411E91 loc_411E91:                             ; CODE XREF: _strtoull+370↑j
.text:00411E91                 mov     eax, 0FFFFFFFFh
.text:00411E96                 jmp     loc_411C09
.text:00411E9B ; ---------------------------------------------------------------------------
.text:00411E9B
.text:00411E9B loc_411E9B:                             ; CODE XREF: _strtoull+35C↑j
.text:00411E9B                 mov     esi, ds:_pctype
.text:00411EA1                 mov     edi, [esi]
.text:00411EA3                 movzx   ebp, word ptr [edi+edx*2]
.text:00411EA7                 and     ebp, 2
.text:00411EAA                 movzx   eax, bp
.text:00411EAD                 jmp     short loc_411E7E
.text:00411EAF ; ---------------------------------------------------------------------------
.text:00411EAF
.text:00411EAF loc_411EAF:                             ; CODE XREF: _strtoull+328↑j
.text:00411EAF                 mov     esi, ds:_pctype
.text:00411EB5                 mov     edi, [esi]
.text:00411EB7                 movzx   ebp, word ptr [edi+ecx*2]
.text:00411EBB                 and     ebp, 1
.text:00411EBE                 movzx   eax, bp
.text:00411EC1                 jmp     short loc_411E51
.text:00411EC3 ; ---------------------------------------------------------------------------
.text:00411EC3
.text:00411EC3 loc_411EC3:                             ; CODE XREF: _strtoull+CE↑j
.text:00411EC3                 mov     edi, ds:_pctype
.text:00411EC9                 mov     ebp, [edi]
.text:00411ECB                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:00411ED0                 and     ecx, 4
.text:00411ED3                 movzx   eax, cx
.text:00411ED6                 jmp     loc_411BFB
.text:00411EDB ; ---------------------------------------------------------------------------
.text:00411EDB
.text:00411EDB loc_411EDB:                             ; CODE XREF: _strtoull+C2↑j
.text:00411EDB                 cmp     dl, 30h ; '0'
.text:00411EDE                 jnz     loc_411BD8
.text:00411EE4                 mov     esi, [esp+3Ch+String]
.text:00411EE8                 movzx   eax, byte ptr [esi+1]
.text:00411EEC                 cmp     al, 58h ; 'X'
.text:00411EEE                 jz      short loc_411EF8
.text:00411EF0                 cmp     al, 78h ; 'x'
.text:00411EF2                 jnz     loc_411BD8
.text:00411EF8
.text:00411EF8 loc_411EF8:                             ; CODE XREF: _strtoull+3DE↑j
.text:00411EF8                 add     [esp+3Ch+String], 2
.text:00411EFD                 mov     ebx, [esp+3Ch+String]
.text:00411F01                 movzx   edx, byte ptr [ebx]
.text:00411F04                 jmp     loc_411BD8
.text:00411F09 ; ---------------------------------------------------------------------------
.text:00411F09
.text:00411F09 loc_411F09:                             ; CODE XREF: _strtoull+AF↑j
.text:00411F09                 mov     edi, [esp+3Ch+String]
.text:00411F0D                 movzx   eax, byte ptr [edi+1]
.text:00411F11                 cmp     al, 58h ; 'X'
.text:00411F13                 jz      short loc_411F25
.text:00411F15                 mov     [esp+3Ch+Radix], 8
.text:00411F1D                 cmp     al, 78h ; 'x'
.text:00411F1F                 jnz     loc_411BCD
.text:00411F25
.text:00411F25 loc_411F25:                             ; CODE XREF: _strtoull+403↑j
.text:00411F25                 mov     [esp+3Ch+Radix], 10h
.text:00411F2D                 jmp     loc_411BCD
.text:00411F32 ; ---------------------------------------------------------------------------
.text:00411F32
.text:00411F32 loc_411F32:                             ; CODE XREF: _strtoull+95↑j
.text:00411F32                                         ; _strtoull+9E↑j
.text:00411F32                 inc     [esp+3Ch+String]
.text:00411F36                 mov     eax, [esp+3Ch+String]
.text:00411F3A                 movzx   edx, byte ptr [eax]
.text:00411F3D                 jmp     loc_411BB4
.text:00411F42 ; ---------------------------------------------------------------------------
.text:00411F42
.text:00411F42 loc_411F42:                             ; CODE XREF: _strtoull+5A↑j
.text:00411F42                 mov     ebp, ds:_pctype
.text:00411F48                 mov     edi, [ebp+0]
.text:00411F4B                 movzx   ebx, word ptr [edi+edx*2]
.text:00411F4F                 and     ebx, 8
.text:00411F52                 movzx   eax, bx
.text:00411F55                 jmp     loc_411B86
.text:00411F55 _strtoull       endp
.text:00411F55
.text:00411F55 ; ---------------------------------------------------------------------------
.text:00411F5A                 align 10h
.text:00411F60                 jmp     ds:__set_app_type
.text:00411F60 ; ---------------------------------------------------------------------------
.text:00411F66                 align 10h
.text:00411F70
.text:00411F70 ; =============== S U B R O U T I N E =======================================
.text:00411F70
.text:00411F70 ; Attributes: thunk
.text:00411F70
.text:00411F70 ; void __cdecl cexit()
.text:00411F70 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00411F70                 jmp     ds:__imp__cexit
.text:00411F70 _cexit          endp
.text:00411F70
.text:00411F70 ; ---------------------------------------------------------------------------
.text:00411F76                 align 10h
.text:00411F80
.text:00411F80 ; =============== S U B R O U T I N E =======================================
.text:00411F80
.text:00411F80 ; Attributes: thunk
.text:00411F80
.text:00411F80 ; char ***__cdecl _p__environ()
.text:00411F80 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00411F80                 jmp     ds:__imp___p__environ
.text:00411F80 __p__environ    endp
.text:00411F80
.text:00411F80 ; ---------------------------------------------------------------------------
.text:00411F86                 align 10h
.text:00411F90
.text:00411F90 ; =============== S U B R O U T I N E =======================================
.text:00411F90
.text:00411F90 ; Attributes: thunk
.text:00411F90
.text:00411F90 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00411F90 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00411F90                                         ; TopLevelExceptionFilter+88↑p ...
.text:00411F90
.text:00411F90 Signal          = dword ptr  4
.text:00411F90 Function        = dword ptr  8
.text:00411F90
.text:00411F90                 jmp     ds:__imp_signal
.text:00411F90 signal          endp
.text:00411F90
.text:00411F90 ; ---------------------------------------------------------------------------
.text:00411F96                 align 10h
.text:00411FA0
.text:00411FA0 ; =============== S U B R O U T I N E =======================================
.text:00411FA0
.text:00411FA0 ; Attributes: thunk
.text:00411FA0
.text:00411FA0 ; int *__cdecl _p__fmode()
.text:00411FA0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00411FA0                 jmp     ds:__imp___p__fmode
.text:00411FA0 __p__fmode      endp
.text:00411FA0
.text:00411FA0 ; ---------------------------------------------------------------------------
.text:00411FA6                 align 10h
.text:00411FB0
.text:00411FB0 ; =============== S U B R O U T I N E =======================================
.text:00411FB0
.text:00411FB0 ; Attributes: thunk
.text:00411FB0
.text:00411FB0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00411FB0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00411FB0                                         ; sub_401080+90↑p ...
.text:00411FB0
.text:00411FB0 FileHandle      = dword ptr  4
.text:00411FB0 Mode            = dword ptr  8
.text:00411FB0
.text:00411FB0                 jmp     ds:__imp__setmode
.text:00411FB0 _setmode        endp
.text:00411FB0
.text:00411FB0 ; ---------------------------------------------------------------------------
.text:00411FB6                 align 10h
.text:00411FC0
.text:00411FC0 ; =============== S U B R O U T I N E =======================================
.text:00411FC0
.text:00411FC0 ; Attributes: thunk
.text:00411FC0
.text:00411FC0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00411FC0                 jmp     ds:__imp___getmainargs
.text:00411FC0 __getmainargs   endp
.text:00411FC0
.text:00411FC0 ; ---------------------------------------------------------------------------
.text:00411FC6                 align 10h
.text:00411FD0
.text:00411FD0 ; =============== S U B R O U T I N E =======================================
.text:00411FD0
.text:00411FD0 ; Attributes: thunk
.text:00411FD0
.text:00411FD0 ; char *__cdecl getenv(const char *VarName)
.text:00411FD0 getenv          proc near               ; CODE XREF: sub_401B70+9B↑p
.text:00411FD0                                         ; sub_403C80+B57↑p ...
.text:00411FD0
.text:00411FD0 VarName         = dword ptr  4
.text:00411FD0
.text:00411FD0                 jmp     ds:__imp_getenv
.text:00411FD0 getenv          endp
.text:00411FD0
.text:00411FD0 ; ---------------------------------------------------------------------------
.text:00411FD6                 align 10h
.text:00411FE0
.text:00411FE0 ; =============== S U B R O U T I N E =======================================
.text:00411FE0
.text:00411FE0 ; Attributes: thunk
.text:00411FE0
.text:00411FE0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00411FE0 setlocale       proc near               ; CODE XREF: sub_401B70+3C↑p
.text:00411FE0
.text:00411FE0 Category        = dword ptr  4
.text:00411FE0 Locale          = dword ptr  8
.text:00411FE0
.text:00411FE0                 jmp     ds:__imp_setlocale
.text:00411FE0 setlocale       endp
.text:00411FE0
.text:00411FE0 ; ---------------------------------------------------------------------------
.text:00411FE6                 align 10h
.text:00411FF0
.text:00411FF0 ; =============== S U B R O U T I N E =======================================
.text:00411FF0
.text:00411FF0 ; Attributes: noreturn thunk
.text:00411FF0
.text:00411FF0 ; void __cdecl __noreturn exit(int Code)
.text:00411FF0 exit            proc near               ; CODE XREF: sub_401B70:loc_401D16↑p
.text:00411FF0                                         ; sub_4023B0+3B↑p ...
.text:00411FF0
.text:00411FF0 Code            = dword ptr  4
.text:00411FF0
.text:00411FF0                 jmp     ds:__imp_exit
.text:00411FF0 exit            endp
.text:00411FF0
.text:00411FF0 ; ---------------------------------------------------------------------------
.text:00411FF6                 align 10h
.text:00412000
.text:00412000 ; =============== S U B R O U T I N E =======================================
.text:00412000
.text:00412000 ; Attributes: thunk
.text:00412000
.text:00412000 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00412000 fprintf         proc near               ; CODE XREF: sub_401B70+19A↑p
.text:00412000                                         ; sub_4023B0+33↑p ...
.text:00412000
.text:00412000 Stream          = dword ptr  4
.text:00412000 Format          = dword ptr  8
.text:00412000
.text:00412000                 jmp     ds:__imp_fprintf
.text:00412000 fprintf         endp
.text:00412000
.text:00412000 ; ---------------------------------------------------------------------------
.text:00412006                 align 10h
.text:00412010
.text:00412010 ; =============== S U B R O U T I N E =======================================
.text:00412010
.text:00412010 ; Attributes: thunk
.text:00412010
.text:00412010 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00412010 strncmp         proc near               ; CODE XREF: sub_403200+35A↑p
.text:00412010                                         ; sub_403C80+23F↑p ...
.text:00412010
.text:00412010 Str1            = dword ptr  4
.text:00412010 Str2            = dword ptr  8
.text:00412010 MaxCount        = dword ptr  0Ch
.text:00412010
.text:00412010                 jmp     ds:__imp_strncmp
.text:00412010 strncmp         endp
.text:00412010
.text:00412010 ; ---------------------------------------------------------------------------
.text:00412016                 align 10h
.text:00412020
.text:00412020 ; =============== S U B R O U T I N E =======================================
.text:00412020
.text:00412020 ; Attributes: thunk
.text:00412020
.text:00412020 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00412020 memcpy          proc near               ; CODE XREF: sub_4036B0+73↑p
.text:00412020                                         ; .text:00404EA8↑p ...
.text:00412020
.text:00412020 Src             = dword ptr  8
.text:00412020 Size            = dword ptr  0Ch
.text:00412020
.text:00412020                 jmp     ds:__imp_memcpy
.text:00412020 memcpy          endp
.text:00412020
.text:00412020 ; ---------------------------------------------------------------------------
.text:00412026                 align 10h
.text:00412030
.text:00412030 ; =============== S U B R O U T I N E =======================================
.text:00412030
.text:00412030 ; Attributes: thunk
.text:00412030
.text:00412030 ; void __cdecl free(void *Block)
.text:00412030 free            proc near               ; CODE XREF: sub_403200+47↑p
.text:00412030                                         ; sub_403200+226↑p ...
.text:00412030
.text:00412030 Block           = dword ptr  4
.text:00412030
.text:00412030                 jmp     ds:__imp_free
.text:00412030 free            endp
.text:00412030
.text:00412030 ; ---------------------------------------------------------------------------
.text:00412036                 align 10h
.text:00412040
.text:00412040 ; =============== S U B R O U T I N E =======================================
.text:00412040
.text:00412040 ; Attributes: thunk
.text:00412040
.text:00412040 ; size_t __cdecl strlen(const char *Str)
.text:00412040 strlen          proc near               ; CODE XREF: sub_4028D0+150↑p
.text:00412040                                         ; sub_4028D0+15A↑p ...
.text:00412040
.text:00412040 Str             = dword ptr  4
.text:00412040
.text:00412040                 jmp     ds:__imp_strlen
.text:00412040 strlen          endp
.text:00412040
.text:00412040 ; ---------------------------------------------------------------------------
.text:00412046                 align 10h
.text:00412050
.text:00412050 ; =============== S U B R O U T I N E =======================================
.text:00412050
.text:00412050 ; Attributes: thunk
.text:00412050
.text:00412050 ; int *__cdecl errno()
.text:00412050 _errno          proc near               ; CODE XREF: sub_401B70+5B6↑p
.text:00412050                                         ; sub_401B70+7BD↑p ...
.text:00412050                 jmp     ds:__imp__errno
.text:00412050 _errno          endp
.text:00412050
.text:00412050 ; ---------------------------------------------------------------------------
.text:00412056                 align 10h
.text:00412060
.text:00412060 ; =============== S U B R O U T I N E =======================================
.text:00412060
.text:00412060 ; Attributes: thunk
.text:00412060
.text:00412060 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00412060 strcmp          proc near               ; CODE XREF: sub_401B70+51B↑p
.text:00412060                                         ; sub_401B70+685↑p ...
.text:00412060
.text:00412060 Str1            = dword ptr  4
.text:00412060 Str2            = dword ptr  8
.text:00412060
.text:00412060                 jmp     ds:__imp_strcmp
.text:00412060 strcmp          endp
.text:00412060
.text:00412060 ; ---------------------------------------------------------------------------
.text:00412066                 align 10h
.text:00412070
.text:00412070 ; =============== S U B R O U T I N E =======================================
.text:00412070
.text:00412070 ; Attributes: thunk
.text:00412070
.text:00412070 ; int printf(const char *const Format, ...)
.text:00412070 printf          proc near               ; CODE XREF: sub_401B70+21E↑p
.text:00412070                                         ; sub_401B70+34B↑p ...
.text:00412070
.text:00412070 Format          = dword ptr  4
.text:00412070
.text:00412070                 jmp     ds:__imp_printf
.text:00412070 printf          endp
.text:00412070
.text:00412070 ; ---------------------------------------------------------------------------
.text:00412076                 align 10h
.text:00412080
.text:00412080 ; =============== S U B R O U T I N E =======================================
.text:00412080
.text:00412080 ; Attributes: thunk
.text:00412080
.text:00412080 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00412080 fputs           proc near               ; CODE XREF: sub_401B70+240↑p
.text:00412080                                         ; sub_401B70+262↑p ...
.text:00412080
.text:00412080 Buffer          = dword ptr  4
.text:00412080 Stream          = dword ptr  8
.text:00412080
.text:00412080                 jmp     ds:__imp_fputs
.text:00412080 fputs           endp
.text:00412080
.text:00412080 ; ---------------------------------------------------------------------------
.text:00412086                 align 10h
.text:00412090
.text:00412090 ; =============== S U B R O U T I N E =======================================
.text:00412090
.text:00412090 ; Attributes: thunk
.text:00412090
.text:00412090 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00412090 _flsbuf         proc near               ; CODE XREF: sub_4028D0+5E8↑p
.text:00412090                                         ; sub_405280+128↑p ...
.text:00412090
.text:00412090 File            = dword ptr  8
.text:00412090
.text:00412090                 jmp     ds:__imp__flsbuf
.text:00412090 _flsbuf         endp
.text:00412090
.text:00412090 ; ---------------------------------------------------------------------------
.text:00412096                 align 10h
.text:004120A0
.text:004120A0 ; =============== S U B R O U T I N E =======================================
.text:004120A0
.text:004120A0 ; Attributes: thunk
.text:004120A0
.text:004120A0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004120A0 strchr          proc near               ; CODE XREF: sub_403C80+469↑p
.text:004120A0                                         ; sub_403C80+53A↑p ...
.text:004120A0
.text:004120A0 Str             = dword ptr  4
.text:004120A0 Val             = dword ptr  8
.text:004120A0
.text:004120A0                 jmp     ds:__imp_strchr
.text:004120A0 strchr          endp
.text:004120A0
.text:004120A0 ; ---------------------------------------------------------------------------
.text:004120A6                 align 10h
.text:004120B0
.text:004120B0 ; =============== S U B R O U T I N E =======================================
.text:004120B0
.text:004120B0 ; Attributes: thunk
.text:004120B0
.text:004120B0 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:004120B0 strtoul         proc near               ; CODE XREF: sub_404A80+16A↑p
.text:004120B0
.text:004120B0 String          = dword ptr  4
.text:004120B0 EndPtr          = dword ptr  8
.text:004120B0 Radix           = dword ptr  0Ch
.text:004120B0
.text:004120B0                 jmp     ds:__imp_strtoul
.text:004120B0 strtoul         endp
.text:004120B0
.text:004120B0 ; ---------------------------------------------------------------------------
.text:004120B6                 align 10h
.text:004120C0
.text:004120C0 ; =============== S U B R O U T I N E =======================================
.text:004120C0
.text:004120C0 ; Attributes: thunk
.text:004120C0
.text:004120C0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:004120C0 strstr          proc near               ; CODE XREF: sub_404A80+12A↑p
.text:004120C0                                         ; .text:0040AB47↑p ...
.text:004120C0
.text:004120C0 Str             = dword ptr  4
.text:004120C0 SubStr          = dword ptr  8
.text:004120C0
.text:004120C0                 jmp     ds:__imp_strstr
.text:004120C0 strstr          endp
.text:004120C0
.text:004120C0 ; ---------------------------------------------------------------------------
.text:004120C6                 align 10h
.text:004120D0
.text:004120D0 ; =============== S U B R O U T I N E =======================================
.text:004120D0
.text:004120D0 ; Attributes: thunk
.text:004120D0
.text:004120D0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004120D0 memset          proc near               ; CODE XREF: .text:00404E26↑p
.text:004120D0
.text:004120D0 Val             = dword ptr  8
.text:004120D0 Size            = dword ptr  0Ch
.text:004120D0
.text:004120D0                 jmp     ds:__imp_memset
.text:004120D0 memset          endp
.text:004120D0
.text:004120D0 ; ---------------------------------------------------------------------------
.text:004120D6                 align 10h
.text:004120E0
.text:004120E0 ; =============== S U B R O U T I N E =======================================
.text:004120E0
.text:004120E0 ; Attributes: thunk
.text:004120E0
.text:004120E0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:004120E0 calloc          proc near               ; CODE XREF: .text:00404E63↑p
.text:004120E0                                         ; sub_40CF50+AC↑p
.text:004120E0
.text:004120E0 Count           = dword ptr  4
.text:004120E0 Size            = dword ptr  8
.text:004120E0
.text:004120E0                 jmp     ds:__imp_calloc
.text:004120E0 calloc          endp
.text:004120E0
.text:004120E0 ; ---------------------------------------------------------------------------
.text:004120E6                 align 10h
.text:004120F0
.text:004120F0 ; =============== S U B R O U T I N E =======================================
.text:004120F0
.text:004120F0 ; Attributes: thunk
.text:004120F0
.text:004120F0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004120F0 realloc         proc near               ; CODE XREF: .text:00404D60↑p
.text:004120F0                                         ; sub_404D90+16↑p ...
.text:004120F0
.text:004120F0 Block           = dword ptr  4
.text:004120F0 Size            = dword ptr  8
.text:004120F0
.text:004120F0                 jmp     ds:__imp_realloc
.text:004120F0 realloc         endp
.text:004120F0
.text:004120F0 ; ---------------------------------------------------------------------------
.text:004120F6                 align 10h
.text:00412100
.text:00412100 ; =============== S U B R O U T I N E =======================================
.text:00412100
.text:00412100 ; Attributes: thunk
.text:00412100
.text:00412100 ; void *__cdecl malloc(size_t Size)
.text:00412100 malloc          proc near               ; CODE XREF: sub_404CC0+24↑p
.text:00412100                                         ; sub_404D00+E↑p ...
.text:00412100
.text:00412100 Size            = dword ptr  4
.text:00412100
.text:00412100                 jmp     ds:__imp_malloc
.text:00412100 malloc          endp
.text:00412100
.text:00412100 ; ---------------------------------------------------------------------------
.text:00412106                 align 10h
.text:00412110
.text:00412110 ; =============== S U B R O U T I N E =======================================
.text:00412110
.text:00412110 ; Attributes: thunk
.text:00412110
.text:00412110 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00412110 vfprintf        proc near               ; CODE XREF: sub_405280+C1↑p
.text:00412110                                         ; sub_409A70+49↑p ...
.text:00412110
.text:00412110 Stream          = dword ptr  4
.text:00412110 Format          = dword ptr  8
.text:00412110 ArgList         = dword ptr  0Ch
.text:00412110
.text:00412110                 jmp     ds:__imp_vfprintf
.text:00412110 vfprintf        endp
.text:00412110
.text:00412110 ; ---------------------------------------------------------------------------
.text:00412116                 align 10h
.text:00412120
.text:00412120 ; =============== S U B R O U T I N E =======================================
.text:00412120
.text:00412120 ; Attributes: noreturn thunk
.text:00412120
.text:00412120 ; void __cdecl __noreturn abort()
.text:00412120 abort           proc near               ; CODE XREF: sub_405280:loc_40531C↑p
.text:00412120                                         ; sub_406240:loc_40629D↑p ...
.text:00412120                 jmp     ds:__imp_abort
.text:00412120 abort           endp
.text:00412120
.text:00412120 ; ---------------------------------------------------------------------------
.text:00412126                 align 10h
.text:00412130
.text:00412130 ; =============== S U B R O U T I N E =======================================
.text:00412130
.text:00412130 ; Attributes: thunk
.text:00412130
.text:00412130 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:00412130 memmove         proc near               ; CODE XREF: sub_405610+2E5↑p
.text:00412130
.text:00412130 Src             = dword ptr  8
.text:00412130 Size            = dword ptr  0Ch
.text:00412130
.text:00412130                 jmp     ds:__imp_memmove
.text:00412130 memmove         endp
.text:00412130
.text:00412130 ; ---------------------------------------------------------------------------
.text:00412136                 align 10h
.text:00412140
.text:00412140 ; =============== S U B R O U T I N E =======================================
.text:00412140
.text:00412140 ; Attributes: thunk
.text:00412140
.text:00412140 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00412140 sprintf         proc near               ; CODE XREF: sub_405610+2C1↑p
.text:00412140                                         ; sub_405610+58F↑p ...
.text:00412140
.text:00412140 Buffer          = dword ptr  4
.text:00412140 Format          = dword ptr  8
.text:00412140
.text:00412140                 jmp     ds:__imp_sprintf
.text:00412140 sprintf         endp
.text:00412140
.text:00412140 ; ---------------------------------------------------------------------------
.text:00412146                 align 10h
.text:00412150
.text:00412150 ; =============== S U B R O U T I N E =======================================
.text:00412150
.text:00412150 ; Attributes: thunk
.text:00412150
.text:00412150 ; struct lconv *__cdecl localeconv()
.text:00412150 localeconv      proc near               ; CODE XREF: sub_405610+A6↑p
.text:00412150                 jmp     ds:__imp_localeconv
.text:00412150 localeconv      endp
.text:00412150
.text:00412150 ; ---------------------------------------------------------------------------
.text:00412156                 align 10h
.text:00412160
.text:00412160 ; =============== S U B R O U T I N E =======================================
.text:00412160
.text:00412160 ; Attributes: thunk
.text:00412160
.text:00412160 ; int __cdecl fclose(FILE *Stream)
.text:00412160 fclose          proc near               ; CODE XREF: sub_4065C0+27↑p
.text:00412160                                         ; sub_40AAD0+E↑p
.text:00412160
.text:00412160 Stream          = dword ptr  4
.text:00412160
.text:00412160                 jmp     ds:__imp_fclose
.text:00412160 fclose          endp
.text:00412160
.text:00412160 ; ---------------------------------------------------------------------------
.text:00412166                 align 10h
.text:00412170
.text:00412170 ; =============== S U B R O U T I N E =======================================
.text:00412170
.text:00412170 ; Attributes: noreturn thunk
.text:00412170
.text:00412170 _assert         proc near               ; CODE XREF: sub_406A70+C88↑p
.text:00412170                                         ; sub_4090E0:loc_40931D↑p ...
.text:00412170                 jmp     ds:__imp__assert
.text:00412170 _assert         endp
.text:00412170
.text:00412170 ; ---------------------------------------------------------------------------
.text:00412176                 align 10h
.text:00412180
.text:00412180 ; =============== S U B R O U T I N E =======================================
.text:00412180
.text:00412180 ; Attributes: thunk
.text:00412180
.text:00412180 ; int __cdecl isctype(int C, int Type)
.text:00412180 _isctype        proc near               ; CODE XREF: sub_406A70+72↑p
.text:00412180                                         ; sub_407D40+610↑p ...
.text:00412180
.text:00412180 C               = dword ptr  4
.text:00412180 Type            = dword ptr  8
.text:00412180
.text:00412180                 jmp     ds:__imp__isctype
.text:00412180 _isctype        endp
.text:00412180
.text:00412180 ; ---------------------------------------------------------------------------
.text:00412186                 align 10h
.text:00412190
.text:00412190 ; =============== S U B R O U T I N E =======================================
.text:00412190
.text:00412190 ; Attributes: thunk
.text:00412190
.text:00412190 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00412190 iswctype        proc near               ; CODE XREF: sub_407D40+78B↑p
.text:00412190
.text:00412190 C               = word ptr  4
.text:00412190 Type            = word ptr  8
.text:00412190
.text:00412190                 jmp     ds:__imp_iswctype
.text:00412190 iswctype        endp
.text:00412190
.text:00412190 ; ---------------------------------------------------------------------------
.text:00412196                 align 10h
.text:004121A0
.text:004121A0 ; =============== S U B R O U T I N E =======================================
.text:004121A0
.text:004121A0 ; Attributes: thunk
.text:004121A0
.text:004121A0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:004121A0 strspn          proc near               ; CODE XREF: sub_4090E0+8B↑p
.text:004121A0                                         ; _getmntent_r+BA↑p ...
.text:004121A0
.text:004121A0 Str             = dword ptr  4
.text:004121A0 Control         = dword ptr  8
.text:004121A0
.text:004121A0                 jmp     ds:__imp_strspn
.text:004121A0 strspn          endp
.text:004121A0
.text:004121A0 ; ---------------------------------------------------------------------------
.text:004121A6                 align 10h
.text:004121B0
.text:004121B0 ; =============== S U B R O U T I N E =======================================
.text:004121B0
.text:004121B0 ; Attributes: thunk
.text:004121B0
.text:004121B0 ; size_t __cdecl strcspn(const char *Str, const char *Control)
.text:004121B0 strcspn         proc near               ; CODE XREF: sub_4090E0+D6↑p
.text:004121B0                                         ; sub_4090E0+51F↑p
.text:004121B0
.text:004121B0 Str             = dword ptr  4
.text:004121B0 Control         = dword ptr  8
.text:004121B0
.text:004121B0                 jmp     ds:__imp_strcspn
.text:004121B0 strcspn         endp
.text:004121B0
.text:004121B0 ; ---------------------------------------------------------------------------
.text:004121B6                 align 10h
.text:004121C0
.text:004121C0 ; =============== S U B R O U T I N E =======================================
.text:004121C0
.text:004121C0 ; Attributes: thunk
.text:004121C0
.text:004121C0 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:004121C0 memchr          proc near               ; CODE XREF: sub_4090E0+BE↑p
.text:004121C0
.text:004121C0 Buf             = dword ptr  4
.text:004121C0 Val             = dword ptr  8
.text:004121C0 MaxCount        = dword ptr  0Ch
.text:004121C0
.text:004121C0                 jmp     ds:__imp_memchr
.text:004121C0 memchr          endp
.text:004121C0
.text:004121C0 ; ---------------------------------------------------------------------------
.text:004121C6                 align 10h
.text:004121D0
.text:004121D0 ; =============== S U B R O U T I N E =======================================
.text:004121D0
.text:004121D0 ; Attributes: thunk
.text:004121D0
.text:004121D0 ; int __cdecl fflush(FILE *Stream)
.text:004121D0 fflush          proc near               ; CODE XREF: sub_409A70+19↑p
.text:004121D0                                         ; sub_409A70+81↑p ...
.text:004121D0
.text:004121D0 Stream          = dword ptr  4
.text:004121D0
.text:004121D0                 jmp     ds:__imp_fflush
.text:004121D0 fflush          endp
.text:004121D0
.text:004121D0 ; ---------------------------------------------------------------------------
.text:004121D6                 align 10h
.text:004121E0
.text:004121E0 ; =============== S U B R O U T I N E =======================================
.text:004121E0
.text:004121E0 ; Attributes: thunk
.text:004121E0
.text:004121E0 ; char *__cdecl strerror(int ErrorMessage)
.text:004121E0 strerror        proc near               ; CODE XREF: sub_409A70+A5↑p
.text:004121E0                                         ; sub_409B74+10F↑p
.text:004121E0
.text:004121E0 ErrorMessage    = dword ptr  4
.text:004121E0
.text:004121E0                 jmp     ds:__imp_strerror
.text:004121E0 strerror        endp
.text:004121E0
.text:004121E0 ; ---------------------------------------------------------------------------
.text:004121E6                 align 10h
.text:004121F0
.text:004121F0 ; =============== S U B R O U T I N E =======================================
.text:004121F0
.text:004121F0 ; Attributes: thunk
.text:004121F0
.text:004121F0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:004121F0 strcpy          proc near               ; CODE XREF: sub_409D60+BC↑p
.text:004121F0                                         ; _win32_longpath+13C↑p ...
.text:004121F0
.text:004121F0 Destination     = dword ptr  4
.text:004121F0 Source          = dword ptr  8
.text:004121F0
.text:004121F0                 jmp     ds:__imp_strcpy
.text:004121F0 strcpy          endp
.text:004121F0
.text:004121F0 ; ---------------------------------------------------------------------------
.text:004121F6                 align 10h
.text:00412200
.text:00412200 ; =============== S U B R O U T I N E =======================================
.text:00412200
.text:00412200 ; Attributes: thunk
.text:00412200
.text:00412200 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00412200 sscanf          proc near               ; CODE XREF: _getmntent_r+26E↑p
.text:00412200
.text:00412200 Buffer          = dword ptr  4
.text:00412200 Format          = dword ptr  8
.text:00412200
.text:00412200                 jmp     ds:__imp_sscanf
.text:00412200 sscanf          endp
.text:00412200
.text:00412200 ; ---------------------------------------------------------------------------
.text:00412206                 align 10h
.text:00412210
.text:00412210 ; =============== S U B R O U T I N E =======================================
.text:00412210
.text:00412210 ; Attributes: thunk
.text:00412210
.text:00412210 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00412210 fopen           proc near               ; CODE XREF: sub_40AA30+15↑p
.text:00412210                                         ; sub_40AA30+88↑p
.text:00412210
.text:00412210 FileName        = dword ptr  4
.text:00412210 Mode            = dword ptr  8
.text:00412210
.text:00412210                 jmp     ds:__imp_fopen
.text:00412210 fopen           endp
.text:00412210
.text:00412210 ; ---------------------------------------------------------------------------
.text:00412216                 align 10h
.text:00412220
.text:00412220 ; =============== S U B R O U T I N E =======================================
.text:00412220
.text:00412220 ; Attributes: thunk
.text:00412220
.text:00412220 ; int __cdecl isalpha(int C)
.text:00412220 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00412220
.text:00412220 C               = dword ptr  4
.text:00412220
.text:00412220                 jmp     ds:__imp_isalpha
.text:00412220 isalpha         endp
.text:00412220
.text:00412220 ; ---------------------------------------------------------------------------
.text:00412226                 align 10h
.text:00412230
.text:00412230 ; =============== S U B R O U T I N E =======================================
.text:00412230
.text:00412230 ; Attributes: thunk
.text:00412230
.text:00412230 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:00412230 strrchr         proc near               ; CODE XREF: .text:0040B1AE↑p
.text:00412230                                         ; .text:0040B1EE↑p ...
.text:00412230
.text:00412230 Str             = dword ptr  4
.text:00412230
.text:00412230                 jmp     ds:__imp_strrchr
.text:00412230 strrchr         endp
.text:00412230
.text:00412230 ; ---------------------------------------------------------------------------
.text:00412236                 align 10h
.text:00412240
.text:00412240 ; =============== S U B R O U T I N E =======================================
.text:00412240
.text:00412240 ; Attributes: thunk
.text:00412240
.text:00412240 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00412240 _stricmp_0      proc near               ; CODE XREF: .text:0040B294↑p
.text:00412240
.text:00412240 String1         = dword ptr  4
.text:00412240 String2         = dword ptr  8
.text:00412240
.text:00412240                 jmp     ds:__imp__stricmp_0
.text:00412240 _stricmp_0      endp
.text:00412240
.text:00412240 ; ---------------------------------------------------------------------------
.text:00412246                 align 10h
.text:00412250
.text:00412250 ; =============== S U B R O U T I N E =======================================
.text:00412250
.text:00412250 ; Attributes: thunk
.text:00412250
.text:00412250 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00412250 strncpy         proc near               ; CODE XREF: sub_40B480+3FA↑p
.text:00412250                                         ; sub_40B480+418↑p ...
.text:00412250
.text:00412250 Destination     = dword ptr  4
.text:00412250 Source          = dword ptr  8
.text:00412250 Count           = dword ptr  0Ch
.text:00412250
.text:00412250                 jmp     ds:__imp_strncpy
.text:00412250 strncpy         endp
.text:00412250
.text:00412250 ; ---------------------------------------------------------------------------
.text:00412256                 align 10h
.text:00412260
.text:00412260 ; =============== S U B R O U T I N E =======================================
.text:00412260
.text:00412260 ; Attributes: thunk
.text:00412260
.text:00412260 ; int __cdecl flushall()
.text:00412260 _flushall       proc near               ; CODE XREF: j__flushall↑j
.text:00412260                 jmp     ds:__imp__flushall
.text:00412260 _flushall       endp
.text:00412260
.text:00412260 ; ---------------------------------------------------------------------------
.text:00412266                 align 10h
.text:00412270
.text:00412270 ; =============== S U B R O U T I N E =======================================
.text:00412270
.text:00412270 ; Attributes: thunk
.text:00412270
.text:00412270 ; char *__cdecl getcwd(char *DstBuf, int SizeInBytes)
.text:00412270 _getcwd         proc near               ; CODE XREF: j__getcwd↑j
.text:00412270
.text:00412270 DstBuf          = dword ptr  4
.text:00412270 SizeInBytes     = dword ptr  8
.text:00412270
.text:00412270                 jmp     ds:__imp__getcwd
.text:00412270 _getcwd         endp
.text:00412270
.text:00412270 ; ---------------------------------------------------------------------------
.text:00412276                 align 10h
.text:00412280
.text:00412280 ; =============== S U B R O U T I N E =======================================
.text:00412280
.text:00412280 ; Attributes: thunk
.text:00412280
.text:00412280 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00412280 _filelengthi64  proc near               ; CODE XREF: sub_40C280+1F↑p
.text:00412280
.text:00412280 FileHandle      = dword ptr  4
.text:00412280
.text:00412280                 jmp     ds:__imp__filelengthi64
.text:00412280 _filelengthi64  endp
.text:00412280
.text:00412280 ; ---------------------------------------------------------------------------
.text:00412286                 align 10h
.text:00412290
.text:00412290 ; =============== S U B R O U T I N E =======================================
.text:00412290
.text:00412290 ; Attributes: thunk
.text:00412290
.text:00412290 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00412290 _get_osfhandle  proc near               ; CODE XREF: sub_40C280+15↑p
.text:00412290                                         ; sub_40FE10+3A↑p
.text:00412290
.text:00412290 FileHandle      = dword ptr  4
.text:00412290
.text:00412290                 jmp     ds:__imp__get_osfhandle
.text:00412290 _get_osfhandle  endp
.text:00412290
.text:00412290 ; ---------------------------------------------------------------------------
.text:00412296                 align 10h
.text:004122A0
.text:004122A0 ; =============== S U B R O U T I N E =======================================
.text:004122A0
.text:004122A0 ; Attributes: thunk
.text:004122A0
.text:004122A0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:004122A0 strpbrk         proc near               ; CODE XREF: sub_40C2E0+87↑p
.text:004122A0
.text:004122A0 Str             = dword ptr  4
.text:004122A0 Control         = dword ptr  8
.text:004122A0
.text:004122A0                 jmp     ds:__imp_strpbrk
.text:004122A0 strpbrk         endp
.text:004122A0
.text:004122A0 ; ---------------------------------------------------------------------------
.text:004122A6                 align 10h
.text:004122B0
.text:004122B0 ; =============== S U B R O U T I N E =======================================
.text:004122B0
.text:004122B0 ; Attributes: thunk
.text:004122B0
.text:004122B0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:004122B0 _fdopen         proc near               ; CODE XREF: sub_40C380+69↑p
.text:004122B0
.text:004122B0 FileHandle      = dword ptr  4
.text:004122B0 Format          = dword ptr  8
.text:004122B0
.text:004122B0                 jmp     ds:__imp__fdopen
.text:004122B0 _fdopen         endp
.text:004122B0
.text:004122B0 ; ---------------------------------------------------------------------------
.text:004122B6                 align 10h
.text:004122C0
.text:004122C0 ; =============== S U B R O U T I N E =======================================
.text:004122C0
.text:004122C0 ; Attributes: thunk
.text:004122C0
.text:004122C0 ; int __cdecl close_0(int FileHandle)
.text:004122C0 _close_0        proc near               ; CODE XREF: sub_40C380+90↑p
.text:004122C0
.text:004122C0 FileHandle      = dword ptr  4
.text:004122C0
.text:004122C0                 jmp     ds:__imp__close_0
.text:004122C0 _close_0        endp
.text:004122C0
.text:004122C0 ; ---------------------------------------------------------------------------
.text:004122C6                 align 10h
.text:004122D0
.text:004122D0 ; =============== S U B R O U T I N E =======================================
.text:004122D0
.text:004122D0 ; Attributes: thunk
.text:004122D0
.text:004122D0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:004122D0 strcat          proc near               ; CODE XREF: .text:0040C743↑p
.text:004122D0                                         ; .text:0040C753↑p ...
.text:004122D0
.text:004122D0 Destination     = dword ptr  4
.text:004122D0 Source          = dword ptr  8
.text:004122D0
.text:004122D0                 jmp     ds:__imp_strcat
.text:004122D0 strcat          endp
.text:004122D0
.text:004122D0 ; ---------------------------------------------------------------------------
.text:004122D6                 align 10h
.text:004122E0
.text:004122E0 ; =============== S U B R O U T I N E =======================================
.text:004122E0
.text:004122E0 ; Attributes: thunk
.text:004122E0
.text:004122E0 ; int __cdecl toupper(int C)
.text:004122E0 toupper         proc near               ; CODE XREF: sub_40CF50+10E↑p
.text:004122E0
.text:004122E0 C               = dword ptr  4
.text:004122E0
.text:004122E0                 jmp     ds:__imp_toupper
.text:004122E0 toupper         endp
.text:004122E0
.text:004122E0 ; ---------------------------------------------------------------------------
.text:004122E6                 align 10h
.text:004122F0
.text:004122F0 ; =============== S U B R O U T I N E =======================================
.text:004122F0
.text:004122F0 ; Attributes: thunk
.text:004122F0
.text:004122F0 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:004122F0 _open_0         proc near               ; CODE XREF: sub_40DE80:loc_40E210↑p
.text:004122F0
.text:004122F0 FileName        = dword ptr  4
.text:004122F0 OpenFlag        = dword ptr  8
.text:004122F0
.text:004122F0                 jmp     ds:__imp__open_0
.text:004122F0 _open_0         endp
.text:004122F0
.text:004122F0 ; ---------------------------------------------------------------------------
.text:004122F6                 align 10h
.text:00412300
.text:00412300 ; =============== S U B R O U T I N E =======================================
.text:00412300
.text:00412300 ; Attributes: thunk
.text:00412300
.text:00412300 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00412300 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00412300
.text:00412300 lpTopLevelExceptionFilter= dword ptr  4
.text:00412300
.text:00412300                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00412300 SetUnhandledExceptionFilter endp
.text:00412300
.text:00412300 ; ---------------------------------------------------------------------------
.text:00412306                 align 10h
.text:00412310
.text:00412310 ; =============== S U B R O U T I N E =======================================
.text:00412310
.text:00412310 ; Attributes: noreturn thunk
.text:00412310
.text:00412310 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00412310 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00412310
.text:00412310 uExitCode       = dword ptr  4
.text:00412310
.text:00412310                 jmp     ds:__imp_ExitProcess
.text:00412310 ExitProcess     endp
.text:00412310
.text:00412310 ; ---------------------------------------------------------------------------
.text:00412316                 align 10h
.text:00412320
.text:00412320 ; =============== S U B R O U T I N E =======================================
.text:00412320
.text:00412320 ; Attributes: thunk
.text:00412320
.text:00412320 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00412320 GetFullPathNameA proc near              ; CODE XREF: sub_409D60+45↑p
.text:00412320                                         ; sub_409D60+ED↑p
.text:00412320
.text:00412320 lpFileName      = dword ptr  4
.text:00412320 nBufferLength   = dword ptr  8
.text:00412320 lpBuffer        = dword ptr  0Ch
.text:00412320 lpFilePart      = dword ptr  10h
.text:00412320
.text:00412320                 jmp     ds:__imp_GetFullPathNameA
.text:00412320 GetFullPathNameA endp
.text:00412320
.text:00412320 ; ---------------------------------------------------------------------------
.text:00412326                 align 10h
.text:00412330
.text:00412330 ; =============== S U B R O U T I N E =======================================
.text:00412330
.text:00412330 ; Attributes: thunk
.text:00412330
.text:00412330 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00412330 GetLogicalDriveStringsA proc near       ; CODE XREF: _getmntent_r+42F↑p
.text:00412330                                         ; _getmntent_r+45E↑p ...
.text:00412330
.text:00412330 nBufferLength   = dword ptr  4
.text:00412330 lpBuffer        = dword ptr  8
.text:00412330
.text:00412330                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00412330 GetLogicalDriveStringsA endp
.text:00412330
.text:00412330 ; ---------------------------------------------------------------------------
.text:00412336                 align 10h
.text:00412340
.text:00412340 ; =============== S U B R O U T I N E =======================================
.text:00412340
.text:00412340 ; Attributes: thunk
.text:00412340
.text:00412340 ; HANDLE __stdcall GetProcessHeap()
.text:00412340 GetProcessHeap  proc near               ; CODE XREF: _getmntent_r+439↑p
.text:00412340                                         ; sub_40A9C0+24↑p ...
.text:00412340                 jmp     ds:__imp_GetProcessHeap
.text:00412340 GetProcessHeap  endp
.text:00412340
.text:00412340 ; ---------------------------------------------------------------------------
.text:00412346                 align 10h
.text:00412350
.text:00412350 ; =============== S U B R O U T I N E =======================================
.text:00412350
.text:00412350 ; Attributes: thunk
.text:00412350
.text:00412350 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00412350 HeapAlloc       proc near               ; CODE XREF: _getmntent_r+44D↑p
.text:00412350                                         ; sub_40A9C0+38↑p ...
.text:00412350
.text:00412350 hHeap           = dword ptr  4
.text:00412350 dwFlags         = dword ptr  8
.text:00412350 dwBytes         = dword ptr  0Ch
.text:00412350
.text:00412350                 jmp     ds:__imp_HeapAlloc
.text:00412350 HeapAlloc       endp
.text:00412350
.text:00412350 ; ---------------------------------------------------------------------------
.text:00412356                 align 10h
.text:00412360
.text:00412360 ; =============== S U B R O U T I N E =======================================
.text:00412360
.text:00412360 ; Attributes: thunk
.text:00412360
.text:00412360 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00412360 HeapFree        proc near               ; CODE XREF: sub_40AAD0+2D↑p
.text:00412360
.text:00412360 hHeap           = dword ptr  4
.text:00412360 dwFlags         = dword ptr  8
.text:00412360 lpMem           = dword ptr  0Ch
.text:00412360
.text:00412360                 jmp     ds:__imp_HeapFree
.text:00412360 HeapFree        endp
.text:00412360
.text:00412360 ; ---------------------------------------------------------------------------
.text:00412366                 align 10h
.text:00412370
.text:00412370 ; =============== S U B R O U T I N E =======================================
.text:00412370
.text:00412370 ; Attributes: thunk
.text:00412370
.text:00412370 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00412370 FindFirstFileA  proc near               ; CODE XREF: _win32_longpath+CA↑p
.text:00412370                                         ; sub_40E2F0+CE↑p ...
.text:00412370
.text:00412370 lpFileName      = dword ptr  4
.text:00412370 lpFindFileData  = dword ptr  8
.text:00412370
.text:00412370                 jmp     ds:__imp_FindFirstFileA
.text:00412370 FindFirstFileA  endp
.text:00412370
.text:00412370 ; ---------------------------------------------------------------------------
.text:00412376                 align 10h
.text:00412380
.text:00412380 ; =============== S U B R O U T I N E =======================================
.text:00412380
.text:00412380 ; Attributes: thunk
.text:00412380
.text:00412380 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00412380 FindClose       proc near               ; CODE XREF: _win32_longpath+144↑p
.text:00412380                                         ; _win32_longpath+185↑p ...
.text:00412380
.text:00412380 hFindFile       = dword ptr  4
.text:00412380
.text:00412380                 jmp     ds:__imp_FindClose
.text:00412380 FindClose       endp
.text:00412380
.text:00412380 ; ---------------------------------------------------------------------------
.text:00412386                 align 10h
.text:00412390
.text:00412390 ; =============== S U B R O U T I N E =======================================
.text:00412390
.text:00412390 ; Attributes: thunk
.text:00412390
.text:00412390 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00412390 GetModuleFileNameA proc near            ; CODE XREF: sub_40B110+1C↑p
.text:00412390
.text:00412390 hModule         = dword ptr  4
.text:00412390 lpFilename      = dword ptr  8
.text:00412390 nSize           = dword ptr  0Ch
.text:00412390
.text:00412390                 jmp     ds:__imp_GetModuleFileNameA
.text:00412390 GetModuleFileNameA endp
.text:00412390
.text:00412390 ; ---------------------------------------------------------------------------
.text:00412396                 align 10h
.text:004123A0
.text:004123A0 ; =============== S U B R O U T I N E =======================================
.text:004123A0
.text:004123A0 ; Attributes: thunk
.text:004123A0
.text:004123A0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:004123A0 GetModuleHandleA proc near              ; CODE XREF: .text:0040B2FE↑p
.text:004123A0                                         ; sub_40E2F0+18↑p ...
.text:004123A0
.text:004123A0 lpModuleName    = dword ptr  4
.text:004123A0
.text:004123A0                 jmp     ds:__imp_GetModuleHandleA
.text:004123A0 GetModuleHandleA endp
.text:004123A0
.text:004123A0 ; ---------------------------------------------------------------------------
.text:004123A6                 align 10h
.text:004123B0
.text:004123B0 ; =============== S U B R O U T I N E =======================================
.text:004123B0
.text:004123B0 ; Attributes: thunk
.text:004123B0
.text:004123B0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:004123B0 GetProcAddress  proc near               ; CODE XREF: .text:0040B311↑p
.text:004123B0                                         ; sub_40B480+2D↑p ...
.text:004123B0
.text:004123B0 hModule         = dword ptr  4
.text:004123B0 lpProcName      = dword ptr  8
.text:004123B0
.text:004123B0                 jmp     ds:__imp_GetProcAddress
.text:004123B0 GetProcAddress  endp
.text:004123B0
.text:004123B0 ; ---------------------------------------------------------------------------
.text:004123B6                 align 10h
.text:004123C0
.text:004123C0 ; =============== S U B R O U T I N E =======================================
.text:004123C0
.text:004123C0 ; Attributes: thunk
.text:004123C0
.text:004123C0 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:004123C0 GetShortPathNameA proc near             ; CODE XREF: .text:0040B396↑p
.text:004123C0                                         ; .text:0040B3C0↑p
.text:004123C0
.text:004123C0 lpszLongPath    = dword ptr  4
.text:004123C0 lpszShortPath   = dword ptr  8
.text:004123C0 cchBuffer       = dword ptr  0Ch
.text:004123C0
.text:004123C0                 jmp     ds:__imp_GetShortPathNameA
.text:004123C0 GetShortPathNameA endp
.text:004123C0
.text:004123C0 ; ---------------------------------------------------------------------------
.text:004123C6                 align 10h
.text:004123D0
.text:004123D0 ; =============== S U B R O U T I N E =======================================
.text:004123D0
.text:004123D0 ; Attributes: thunk
.text:004123D0
.text:004123D0 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:004123D0 LoadLibraryA    proc near               ; CODE XREF: sub_40B480+18↑p
.text:004123D0                                         ; sub_40E460+13↑p ...
.text:004123D0
.text:004123D0 lpLibFileName   = dword ptr  4
.text:004123D0
.text:004123D0                 jmp     ds:__imp_LoadLibraryA
.text:004123D0 LoadLibraryA    endp
.text:004123D0
.text:004123D0 ; ---------------------------------------------------------------------------
.text:004123D6                 align 10h
.text:004123E0
.text:004123E0 ; =============== S U B R O U T I N E =======================================
.text:004123E0
.text:004123E0 ; Attributes: thunk
.text:004123E0
.text:004123E0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:004123E0 GetVolumeInformationA proc near         ; CODE XREF: sub_40B480+BD↑p
.text:004123E0                                         ; sub_40EFB0+64↑p ...
.text:004123E0
.text:004123E0 lpRootPathName  = dword ptr  4
.text:004123E0 lpVolumeNameBuffer= dword ptr  8
.text:004123E0 nVolumeNameSize = dword ptr  0Ch
.text:004123E0 lpVolumeSerialNumber= dword ptr  10h
.text:004123E0 lpMaximumComponentLength= dword ptr  14h
.text:004123E0 lpFileSystemFlags= dword ptr  18h
.text:004123E0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:004123E0 nFileSystemNameSize= dword ptr  20h
.text:004123E0
.text:004123E0                 jmp     ds:__imp_GetVolumeInformationA
.text:004123E0 GetVolumeInformationA endp
.text:004123E0
.text:004123E0 ; ---------------------------------------------------------------------------
.text:004123E6                 align 10h
.text:004123F0
.text:004123F0 ; =============== S U B R O U T I N E =======================================
.text:004123F0
.text:004123F0 ; Attributes: thunk
.text:004123F0
.text:004123F0 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:004123F0 FreeLibrary     proc near               ; CODE XREF: sub_40B480+FC↑p
.text:004123F0                                         ; sub_40B480+561↑p ...
.text:004123F0
.text:004123F0 hLibModule      = dword ptr  4
.text:004123F0
.text:004123F0                 jmp     ds:__imp_FreeLibrary
.text:004123F0 FreeLibrary     endp
.text:004123F0
.text:004123F0 ; ---------------------------------------------------------------------------
.text:004123F6                 align 10h
.text:00412400
.text:00412400 ; =============== S U B R O U T I N E =======================================
.text:00412400
.text:00412400 ; Attributes: thunk
.text:00412400
.text:00412400 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00412400 CreateFileA     proc near               ; CODE XREF: sub_40B480+173↑p
.text:00412400                                         ; sub_40BB30+73↑p ...
.text:00412400
.text:00412400 lpFileName      = dword ptr  4
.text:00412400 dwDesiredAccess = dword ptr  8
.text:00412400 dwShareMode     = dword ptr  0Ch
.text:00412400 lpSecurityAttributes= dword ptr  10h
.text:00412400 dwCreationDisposition= dword ptr  14h
.text:00412400 dwFlagsAndAttributes= dword ptr  18h
.text:00412400 hTemplateFile   = dword ptr  1Ch
.text:00412400
.text:00412400                 jmp     ds:__imp_CreateFileA
.text:00412400 CreateFileA     endp
.text:00412400
.text:00412400 ; ---------------------------------------------------------------------------
.text:00412406                 align 10h
.text:00412410
.text:00412410 ; =============== S U B R O U T I N E =======================================
.text:00412410
.text:00412410 ; Attributes: thunk
.text:00412410
.text:00412410 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00412410 DeviceIoControl proc near               ; CODE XREF: sub_40B480+1DC↑p
.text:00412410                                         ; sub_40BB30+D5↑p
.text:00412410
.text:00412410 hDevice         = dword ptr  4
.text:00412410 dwIoControlCode = dword ptr  8
.text:00412410 lpInBuffer      = dword ptr  0Ch
.text:00412410 nInBufferSize   = dword ptr  10h
.text:00412410 lpOutBuffer     = dword ptr  14h
.text:00412410 nOutBufferSize  = dword ptr  18h
.text:00412410 lpBytesReturned = dword ptr  1Ch
.text:00412410 lpOverlapped    = dword ptr  20h
.text:00412410
.text:00412410                 jmp     ds:__imp_DeviceIoControl
.text:00412410 DeviceIoControl endp
.text:00412410
.text:00412410 ; ---------------------------------------------------------------------------
.text:00412416                 align 10h
.text:00412420
.text:00412420 ; =============== S U B R O U T I N E =======================================
.text:00412420
.text:00412420 ; Attributes: thunk
.text:00412420
.text:00412420 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00412420 CloseHandle     proc near               ; CODE XREF: sub_40B480+1E9↑p
.text:00412420                                         ; sub_40BB30+E2↑p ...
.text:00412420
.text:00412420 hObject         = dword ptr  4
.text:00412420
.text:00412420                 jmp     ds:__imp_CloseHandle
.text:00412420 CloseHandle     endp
.text:00412420
.text:00412420 ; ---------------------------------------------------------------------------
.text:00412426                 align 10h
.text:00412430
.text:00412430 ; =============== S U B R O U T I N E =======================================
.text:00412430
.text:00412430 ; Attributes: thunk
.text:00412430
.text:00412430 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00412430 GetDiskFreeSpaceA proc near             ; CODE XREF: sub_40B480+533↑p
.text:00412430                                         ; sub_40BA20+7B↑p ...
.text:00412430
.text:00412430 lpRootPathName  = dword ptr  4
.text:00412430 lpSectorsPerCluster= dword ptr  8
.text:00412430 lpBytesPerSector= dword ptr  0Ch
.text:00412430 lpNumberOfFreeClusters= dword ptr  10h
.text:00412430 lpTotalNumberOfClusters= dword ptr  14h
.text:00412430
.text:00412430                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00412430 GetDiskFreeSpaceA endp
.text:00412430
.text:00412430 ; ---------------------------------------------------------------------------
.text:00412436                 align 10h
.text:00412440
.text:00412440 ; =============== S U B R O U T I N E =======================================
.text:00412440
.text:00412440 ; Attributes: thunk
.text:00412440
.text:00412440 ; BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName)
.text:00412440 SetCurrentDirectoryA proc near          ; CODE XREF: sub_40BD90+12↑p
.text:00412440
.text:00412440 lpPathName      = dword ptr  4
.text:00412440
.text:00412440                 jmp     ds:__imp_SetCurrentDirectoryA
.text:00412440 SetCurrentDirectoryA endp
.text:00412440
.text:00412440 ; ---------------------------------------------------------------------------
.text:00412446                 align 10h
.text:00412450
.text:00412450 ; =============== S U B R O U T I N E =======================================
.text:00412450
.text:00412450 ; Attributes: thunk
.text:00412450
.text:00412450 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00412450 SetErrorMode    proc near               ; CODE XREF: sub_40BEF0+57↑p
.text:00412450                                         ; sub_40BEF0+78↑p ...
.text:00412450
.text:00412450 uMode           = dword ptr  4
.text:00412450
.text:00412450                 jmp     ds:__imp_SetErrorMode
.text:00412450 SetErrorMode    endp
.text:00412450
.text:00412450 ; ---------------------------------------------------------------------------
.text:00412456                 align 10h
.text:00412460
.text:00412460 ; =============== S U B R O U T I N E =======================================
.text:00412460
.text:00412460 ; Attributes: thunk
.text:00412460
.text:00412460 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00412460 GetFileAttributesA proc near            ; CODE XREF: sub_40BEF0+62↑p
.text:00412460                                         ; sub_40E2F0+47↑p
.text:00412460
.text:00412460 lpFileName      = dword ptr  4
.text:00412460
.text:00412460                 jmp     ds:__imp_GetFileAttributesA
.text:00412460 GetFileAttributesA endp
.text:00412460
.text:00412460 ; ---------------------------------------------------------------------------
.text:00412466                 align 10h
.text:00412470
.text:00412470 ; =============== S U B R O U T I N E =======================================
.text:00412470
.text:00412470 ; Attributes: thunk
.text:00412470
.text:00412470 ; DWORD __stdcall GetLastError()
.text:00412470 GetLastError    proc near               ; CODE XREF: sub_40C250+3↑p
.text:00412470                                         ; sub_40EAB0:loc_40ED39↑p ...
.text:00412470                 jmp     ds:__imp_GetLastError
.text:00412470 GetLastError    endp
.text:00412470
.text:00412470 ; ---------------------------------------------------------------------------
.text:00412476                 align 10h
.text:00412480
.text:00412480 ; =============== S U B R O U T I N E =======================================
.text:00412480
.text:00412480 ; Attributes: thunk
.text:00412480
.text:00412480 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00412480 UnlockFile      proc near               ; CODE XREF: sub_40C280+40↑p
.text:00412480
.text:00412480 hFile           = dword ptr  4
.text:00412480 dwFileOffsetLow = dword ptr  8
.text:00412480 dwFileOffsetHigh= dword ptr  0Ch
.text:00412480 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00412480 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00412480
.text:00412480                 jmp     ds:__imp_UnlockFile
.text:00412480 UnlockFile      endp
.text:00412480
.text:00412480 ; ---------------------------------------------------------------------------
.text:00412486                 align 10h
.text:00412490
.text:00412490 ; =============== S U B R O U T I N E =======================================
.text:00412490
.text:00412490 ; Attributes: thunk
.text:00412490
.text:00412490 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00412490 lstrcmpiA       proc near               ; CODE XREF: .text:0040C8DB↑p
.text:00412490                                         ; .text:0040C8F2↑p ...
.text:00412490
.text:00412490 lpString1       = dword ptr  4
.text:00412490 lpString2       = dword ptr  8
.text:00412490
.text:00412490                 jmp     ds:__imp_lstrcmpiA
.text:00412490 lstrcmpiA       endp
.text:00412490
.text:00412490 ; ---------------------------------------------------------------------------
.text:00412496                 align 10h
.text:004124A0
.text:004124A0 ; =============== S U B R O U T I N E =======================================
.text:004124A0
.text:004124A0 ; Attributes: thunk
.text:004124A0
.text:004124A0 ; DWORD __stdcall GetVersion()
.text:004124A0 GetVersion      proc near               ; CODE XREF: .text:0040CC63↑p
.text:004124A0                 jmp     ds:__imp_GetVersion
.text:004124A0 GetVersion      endp
.text:004124A0
.text:004124A0 ; ---------------------------------------------------------------------------
.text:004124A6                 align 10h
.text:004124B0
.text:004124B0 ; =============== S U B R O U T I N E =======================================
.text:004124B0
.text:004124B0 ; Attributes: thunk
.text:004124B0
.text:004124B0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:004124B0 GetVersionExA   proc near               ; CODE XREF: sub_40CCF0+32↑p
.text:004124B0                                         ; sub_40CCF0+20B↑p
.text:004124B0
.text:004124B0 lpVersionInformation= dword ptr  4
.text:004124B0
.text:004124B0                 jmp     ds:__imp_GetVersionExA
.text:004124B0 GetVersionExA   endp
.text:004124B0
.text:004124B0 ; ---------------------------------------------------------------------------
.text:004124B6                 align 10h
.text:004124C0
.text:004124C0 ; =============== S U B R O U T I N E =======================================
.text:004124C0
.text:004124C0 ; Attributes: thunk
.text:004124C0
.text:004124C0 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:004124C0 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040D1F8↑p
.text:004124C0                                         ; .text:0040D214↑p ...
.text:004124C0
.text:004124C0 nBufferLength   = dword ptr  4
.text:004124C0 lpBuffer        = dword ptr  8
.text:004124C0
.text:004124C0                 jmp     ds:__imp_GetCurrentDirectoryA
.text:004124C0 GetCurrentDirectoryA endp
.text:004124C0
.text:004124C0 ; ---------------------------------------------------------------------------
.text:004124C6                 align 10h
.text:004124D0
.text:004124D0 ; =============== S U B R O U T I N E =======================================
.text:004124D0
.text:004124D0 ; Attributes: thunk
.text:004124D0
.text:004124D0 ; BOOL __stdcall AreFileApisANSI()
.text:004124D0 AreFileApisANSI proc near               ; CODE XREF: sub_40D390+89↑p
.text:004124D0                 jmp     ds:__imp_AreFileApisANSI
.text:004124D0 AreFileApisANSI endp
.text:004124D0
.text:004124D0 ; ---------------------------------------------------------------------------
.text:004124D6                 align 10h
.text:004124E0
.text:004124E0 ; =============== S U B R O U T I N E =======================================
.text:004124E0
.text:004124E0 ; Attributes: thunk
.text:004124E0
.text:004124E0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:004124E0 MultiByteToWideChar proc near           ; CODE XREF: sub_40D390+BD↑p
.text:004124E0
.text:004124E0 CodePage        = dword ptr  4
.text:004124E0 dwFlags         = dword ptr  8
.text:004124E0 lpMultiByteStr  = dword ptr  0Ch
.text:004124E0 cbMultiByte     = dword ptr  10h
.text:004124E0 lpWideCharStr   = dword ptr  14h
.text:004124E0 cchWideChar     = dword ptr  18h
.text:004124E0
.text:004124E0                 jmp     ds:__imp_MultiByteToWideChar
.text:004124E0 MultiByteToWideChar endp
.text:004124E0
.text:004124E0 ; ---------------------------------------------------------------------------
.text:004124E6                 align 10h
.text:004124F0
.text:004124F0 ; =============== S U B R O U T I N E =======================================
.text:004124F0
.text:004124F0 ; Attributes: thunk
.text:004124F0
.text:004124F0 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:004124F0 lstrcpyA        proc near               ; CODE XREF: sub_40D390+128↑p
.text:004124F0
.text:004124F0 lpString1       = dword ptr  4
.text:004124F0 lpString2       = dword ptr  8
.text:004124F0
.text:004124F0                 jmp     ds:__imp_lstrcpyA
.text:004124F0 lstrcpyA        endp
.text:004124F0
.text:004124F0 ; ---------------------------------------------------------------------------
.text:004124F6                 align 10h
.text:00412500
.text:00412500 ; =============== S U B R O U T I N E =======================================
.text:00412500
.text:00412500 ; Attributes: thunk
.text:00412500
.text:00412500 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00412500 FindNextFileA   proc near               ; CODE XREF: sub_40E460+FF↑p
.text:00412500
.text:00412500 hFindFile       = dword ptr  4
.text:00412500 lpFindFileData  = dword ptr  8
.text:00412500
.text:00412500                 jmp     ds:__imp_FindNextFileA
.text:00412500 FindNextFileA   endp
.text:00412500
.text:00412500 ; ---------------------------------------------------------------------------
.text:00412506                 align 10h
.text:00412510
.text:00412510 ; =============== S U B R O U T I N E =======================================
.text:00412510
.text:00412510 ; Attributes: thunk
.text:00412510
.text:00412510 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00412510 GetFileType     proc near               ; CODE XREF: sub_40E5E0+43↑p
.text:00412510                                         ; .text:0040F29A↑p
.text:00412510
.text:00412510 hFile           = dword ptr  4
.text:00412510
.text:00412510                 jmp     ds:__imp_GetFileType
.text:00412510 GetFileType     endp
.text:00412510
.text:00412510 ; ---------------------------------------------------------------------------
.text:00412516                 align 10h
.text:00412520
.text:00412520 ; =============== S U B R O U T I N E =======================================
.text:00412520
.text:00412520 ; Attributes: thunk
.text:00412520
.text:00412520 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00412520 GetFileInformationByHandle proc near    ; CODE XREF: sub_40E5E0+69↑p
.text:00412520
.text:00412520 hFile           = dword ptr  4
.text:00412520 lpFileInformation= dword ptr  8
.text:00412520
.text:00412520                 jmp     ds:__imp_GetFileInformationByHandle
.text:00412520 GetFileInformationByHandle endp
.text:00412520
.text:00412520 ; ---------------------------------------------------------------------------
.text:00412526                 align 10h
.text:00412530
.text:00412530 ; =============== S U B R O U T I N E =======================================
.text:00412530
.text:00412530 ; Attributes: thunk
.text:00412530
.text:00412530 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00412530 GetFileSize     proc near               ; CODE XREF: sub_40E5E0+3F2↑p
.text:00412530
.text:00412530 hFile           = dword ptr  4
.text:00412530 lpFileSizeHigh  = dword ptr  8
.text:00412530
.text:00412530                 jmp     ds:__imp_GetFileSize
.text:00412530 GetFileSize     endp
.text:00412530
.text:00412530 ; ---------------------------------------------------------------------------
.text:00412536                 align 10h
.text:00412540
.text:00412540 ; =============== S U B R O U T I N E =======================================
.text:00412540
.text:00412540 ; Attributes: thunk
.text:00412540
.text:00412540 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00412540 PeekNamedPipe   proc near               ; CODE XREF: sub_40E5E0+439↑p
.text:00412540
.text:00412540 hNamedPipe      = dword ptr  4
.text:00412540 lpBuffer        = dword ptr  8
.text:00412540 nBufferSize     = dword ptr  0Ch
.text:00412540 lpBytesRead     = dword ptr  10h
.text:00412540 lpTotalBytesAvail= dword ptr  14h
.text:00412540 lpBytesLeftThisMessage= dword ptr  18h
.text:00412540
.text:00412540                 jmp     ds:__imp_PeekNamedPipe
.text:00412540 PeekNamedPipe   endp
.text:00412540
.text:00412540 ; ---------------------------------------------------------------------------
.text:00412546                 align 10h
.text:00412550
.text:00412550 ; =============== S U B R O U T I N E =======================================
.text:00412550
.text:00412550 ; Attributes: thunk
.text:00412550
.text:00412550 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00412550 GetDriveTypeA   proc near               ; CODE XREF: sub_40EAB0+4C↑p
.text:00412550
.text:00412550 lpRootPathName  = dword ptr  4
.text:00412550
.text:00412550                 jmp     ds:__imp_GetDriveTypeA
.text:00412550 GetDriveTypeA   endp
.text:00412550
.text:00412550 ; ---------------------------------------------------------------------------
.text:00412556                 align 10h
.text:00412560
.text:00412560 ; =============== S U B R O U T I N E =======================================
.text:00412560
.text:00412560 ; Attributes: thunk
.text:00412560
.text:00412560 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00412560 CreateDirectoryA proc near              ; CODE XREF: sub_40FEC0+22↑p
.text:00412560
.text:00412560 lpPathName      = dword ptr  4
.text:00412560 lpSecurityAttributes= dword ptr  8
.text:00412560
.text:00412560                 jmp     ds:__imp_CreateDirectoryA
.text:00412560 CreateDirectoryA endp
.text:00412560
.text:00412560 ; ---------------------------------------------------------------------------
.text:00412566                 align 10h
.text:00412570
.text:00412570 ; =============== S U B R O U T I N E =======================================
.text:00412570
.text:00412570 ; Attributes: thunk
.text:00412570
.text:00412570 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00412570 GetTimeZoneInformation proc near        ; CODE XREF: sub_40FFC0+22↑p
.text:00412570
.text:00412570 lpTimeZoneInformation= dword ptr  4
.text:00412570
.text:00412570                 jmp     ds:__imp_GetTimeZoneInformation
.text:00412570 GetTimeZoneInformation endp
.text:00412570
.text:00412570 ; ---------------------------------------------------------------------------
.text:00412576                 align 10h
.text:00412580
.text:00412580 ; =============== S U B R O U T I N E =======================================
.text:00412580
.text:00412580 ; Attributes: thunk
.text:00412580
.text:00412580 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00412580 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40FFC0+4F↑p
.text:00412580
.text:00412580 lpSystemTimeAsFileTime= dword ptr  4
.text:00412580
.text:00412580                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00412580 GetSystemTimeAsFileTime endp
.text:00412580
.text:00412580 ; ---------------------------------------------------------------------------
.text:00412586                 align 10h
.text:00412590
.text:00412590 ; =============== S U B R O U T I N E =======================================
.text:00412590
.text:00412590 ; Attributes: thunk
.text:00412590
.text:00412590 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00412590 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040C861↑p
.text:00412590
.text:00412590 hKey            = dword ptr  4
.text:00412590 lpSubKey        = dword ptr  8
.text:00412590 ulOptions       = dword ptr  0Ch
.text:00412590 samDesired      = dword ptr  10h
.text:00412590 phkResult       = dword ptr  14h
.text:00412590
.text:00412590                 jmp     ds:__imp_RegOpenKeyExA
.text:00412590 RegOpenKeyExA   endp
.text:00412590
.text:00412590 ; ---------------------------------------------------------------------------
.text:00412596                 align 10h
.text:004125A0
.text:004125A0 ; =============== S U B R O U T I N E =======================================
.text:004125A0
.text:004125A0 ; Attributes: thunk
.text:004125A0
.text:004125A0 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:004125A0 RegQueryValueExA proc near              ; CODE XREF: .text:0040C8A4↑p
.text:004125A0
.text:004125A0 hKey            = dword ptr  4
.text:004125A0 lpValueName     = dword ptr  8
.text:004125A0 lpReserved      = dword ptr  0Ch
.text:004125A0 lpType          = dword ptr  10h
.text:004125A0 lpData          = dword ptr  14h
.text:004125A0 lpcbData        = dword ptr  18h
.text:004125A0
.text:004125A0                 jmp     ds:__imp_RegQueryValueExA
.text:004125A0 RegQueryValueExA endp
.text:004125A0
.text:004125A0 ; ---------------------------------------------------------------------------
.text:004125A6                 align 10h
.text:004125B0
.text:004125B0 ; =============== S U B R O U T I N E =======================================
.text:004125B0
.text:004125B0 ; Attributes: thunk
.text:004125B0
.text:004125B0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:004125B0 RegCloseKey     proc near               ; CODE XREF: .text:0040C8C8↑p
.text:004125B0
.text:004125B0 hKey            = dword ptr  4
.text:004125B0
.text:004125B0                 jmp     ds:__imp_RegCloseKey
.text:004125B0 RegCloseKey     endp
.text:004125B0
.text:004125B0 ; ---------------------------------------------------------------------------
.text:004125B6                 db 2 dup(90h)
.text:004125B8                 dd 2 dup(0)
.text:004125C0                 dd 21400h, 0
.text:004125C8                 dd 0C0h, 46000000h
.text:004125D0 ; const IID rclsid
.text:004125D0 rclsid          dd 21401h               ; Data1
.text:004125D0                                         ; DATA XREF: sub_40D390+4B↑o
.text:004125D0                 dw 0                    ; Data2
.text:004125D0                 dw 0                    ; Data3
.text:004125D0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004125E0                 dd 214A0h, 0
.text:004125E8                 dd 0C0h, 46000000h, 214A1h, 0
.text:004125F8                 dd 0C0h, 46000000h, 214D0h, 0
.text:00412608                 dd 0C0h, 46000000h, 214D1h, 0
.text:00412618                 dd 0C0h, 46000000h, 214D2h, 0
.text:00412628                 dd 0C0h, 46000000h, 214E1h, 0
.text:00412638                 dd 0C0h, 46000000h, 214E2h, 0
.text:00412648                 dd 0C0h, 46000000h, 214E3h, 0
.text:00412658                 dd 0C0h, 46000000h, 214E4h, 0
.text:00412668                 dd 0C0h, 46000000h, 21500h, 0
.text:00412678                 dd 0C0h, 46000000h, 214E5h, 0
.text:00412688                 dd 0C0h, 46000000h, 214E6h, 0
.text:00412698                 dd 0C0h, 46000000h, 214E8h, 0
.text:004126A8                 dd 0C0h, 46000000h, 214E9h, 0
.text:004126B8                 dd 0C0h, 46000000h, 214EAh, 0
.text:004126C8                 dd 0C0h, 46000000h, 214EBh, 0
.text:004126D8                 dd 0C0h, 46000000h
.text:004126E0 ; const IID riid
.text:004126E0 riid            dd 214EEh               ; Data1
.text:004126E0                                         ; DATA XREF: sub_40D390+2B↑o
.text:004126E0                 dw 0                    ; Data2
.text:004126E0                 dw 0                    ; Data3
.text:004126E0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004126F0                 dd 214EFh, 0
.text:004126F8                 dd 0C0h, 46000000h, 214F0h, 0
.text:00412708                 dd 0C0h, 46000000h, 214F1h, 0
.text:00412718                 dd 0C0h, 46000000h, 214F2h, 0
.text:00412728                 dd 0C0h, 46000000h, 214F3h, 0
.text:00412738                 dd 0C0h, 46000000h, 214F4h, 0
.text:00412748                 dd 0C0h, 46000000h, 214F5h, 0
.text:00412758                 dd 0C0h, 46000000h, 214F6h, 0
.text:00412768                 dd 0C0h, 46000000h, 214F7h, 0
.text:00412778                 dd 0C0h, 46000000h, 214F8h, 0
.text:00412788                 dd 0C0h, 46000000h, 214F9h, 0
.text:00412798                 dd 0C0h, 46000000h, 214FAh, 0
.text:004127A8                 dd 0C0h, 46000000h, 214FBh, 0
.text:004127B8                 dd 0C0h, 46000000h, 214FCh, 0
.text:004127C8                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:004127C8                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:004127C8                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:004127C8                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:004127C8                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:004127C8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:004127C8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:004127C8                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:004127C8                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:004127C8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00412898                 dd 0C0h, 46000000h, 2DF05h, 0
.text:004128A8                 dd 0C0h, 46000000h, 2DF06h, 0
.text:004128B8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:004128C8                 dd 0C0h, 46000000h, 2DF09h, 0
.text:004128D8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:004128D8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:004128D8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:004128D8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:004128D8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:004128D8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:004128D8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00412960 dword_412960    dd 0FFFFFFFFh           ; DATA XREF: .text:00411669↑r
.text:00412960                                         ; .text:loc_411690↑r ...
.text:00412964 dword_412964    dd 0                    ; DATA XREF: .text:loc_41169C↑r
.text:00412964                                         ; sub_4116C0:loc_41170D↑r
.text:00412968                 dd 0FFFFFFFFh
.text:0041296C dword_41296C    dd 25h dup(0)           ; DATA XREF: .data:off_4130D4↓o
.text:00412A00                 dd 180h dup(?)
.text:00412A00 _text           ends
.text:00412A00
.data:00413000 ; Section 2. (virtual address 00013000)
.data:00413000 ; Virtual size                  : 000000F0 (    240.)
.data:00413000 ; Section size in file          : 00000200 (    512.)
.data:00413000 ; Offset to raw data for section: 00011E00
.data:00413000 ; Flags C0000040: Data Readable Writable
.data:00413000 ; Alignment     : default
.data:00413000 ; ===========================================================================
.data:00413000
.data:00413000 ; Segment type: Pure data
.data:00413000 ; Segment permissions: Read/Write
.data:00413000 _data           segment para public 'DATA' use32
.data:00413000                 assume cs:_data
.data:00413000                 ;org 413000h
.data:00413000 dword_413000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00413000                                         ; sub_401080+CC↑r
.data:00413004 dword_413004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00413004                                         ; sub_401080+D4↑r
.data:00413008                 align 10h
.data:00413010 dword_413010    dd 1                    ; DATA XREF: sub_401B70:loc_4020B0↑r
.data:00413010                                         ; sub_401B70+592↑r ...
.data:00413014 dword_413014    dd 1                    ; DATA XREF: sub_404810+11↑r
.data:00413014                                         ; .text:004048B1↑r
.data:00413018 dword_413018    dd 3Fh                  ; DATA XREF: sub_404810+7D↑w
.data:00413018                                         ; .text:0040491D↑w
.data:0041301C                 align 10h
.data:00413020 ; char *Buffer
.data:00413020 Buffer          dd offset aCopyrightC2005
.data:00413020                                         ; DATA XREF: sub_405280+DC↑r
.data:00413020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00413024                 align 10h
.data:00413030 ; int Code
.data:00413030 Code            dd 1                    ; DATA XREF: sub_406240+87↑r
.data:00413030                                         ; sub_4065C0+6D↑r ...
.data:00413034                 align 10h
.data:00413040                 dd offset sub_407C90
.data:00413044                 align 10h
.data:00413050 dword_413050    dd 1                    ; DATA XREF: sub_408E80+22↑r
.data:00413050                                         ; sub_408E80+65↑r ...
.data:00413054 dword_413054    dd 100h                 ; DATA XREF: sub_408E80+3F↑o
.data:00413054                                         ; sub_408E80+1A2↑r ...
.data:00413058 off_413058      dd offset unk_414110    ; DATA XREF: sub_408E80+1AA↑r
.data:0041305C ; void *off_41305C
.data:0041305C off_41305C      dd offset dword_413054  ; DATA XREF: sub_408E80+39↑r
.data:0041305C                                         ; sub_408E80+60↑w ...
.data:00413060 ; char *Str2
.data:00413060 Str2            dd offset aNotset       ; DATA XREF: _getmntent_r+A↑r
.data:00413060                                         ; sub_40AAD0+32↑r
.data:00413060                                         ; "notset"
.data:00413064 ; LPCSTR lpMem
.data:00413064 lpMem           dd offset aNotset       ; DATA XREF: _getmntent_r+22↑r
.data:00413064                                         ; _getmntent_r+44↑r ...
.data:00413064                                         ; "notset"
.data:00413068                 align 10h
.data:00413070 dword_413070    dd 1                    ; DATA XREF: .text:loc_40C717↑r
.data:00413070                                         ; sub_40CCF0+202↑w
.data:00413074                 align 10h
.data:00413080 byte_413080     db 41h                  ; DATA XREF: sub_40D070+6B↑w
.data:00413080                                         ; sub_40D070:loc_40D184↑r
.data:00413081                 align 10h
.data:00413090 dword_413090    dd 200h                 ; DATA XREF: sub_40E5E0+2ED↑r
.data:00413090                                         ; sub_40E5E0+2F8↑r ...
.data:00413094 ; char *off_413094
.data:00413094 off_413094      dd offset aComExeBatCmd ; DATA XREF: sub_40EAB0+3D3↑r
.data:00413094                                         ; sub_40EAB0+400↑r ...
.data:00413094                                         ; ".com;.exe;.bat;.cmd"
.data:00413098                 align 10h
.data:004130A0 dword_4130A0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004130A4                 align 10h
.data:004130B0 ; int Mode
.data:004130B0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004130B0                                         ; sub_401080+80↑r ...
.data:004130B4                 align 10h
.data:004130C0 dword_4130C0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004130C0                                         ; sub_401080+BA↑r
.data:004130C4                 align 10h
.data:004130D0 dword_4130D0    dd 0                    ; DATA XREF: sub_4116C0+9↑r
.data:004130D0                                         ; sub_4116C0+1D↑w
.data:004130D4 off_4130D4      dd offset dword_41296C  ; DATA XREF: sub_411630+6↑r
.data:004130D4                                         ; sub_411630+17↑r ...
.data:004130D8                 align 1000h
.data:004130D8 _data           ends
.data:004130D8
.bss:00414000 ; Section 3. (virtual address 00014000)
.bss:00414000 ; Virtual size                  : 00000660 (   1632.)
.bss:00414000 ; Section size in file          : 00000000 (      0.)
.bss:00414000 ; Offset to raw data for section: 00000000
.bss:00414000 ; Flags C0000080: Bss Readable Writable
.bss:00414000 ; Alignment     : default
.bss:00414000 ; ===========================================================================
.bss:00414000
.bss:00414000 ; Segment type: Uninitialized
.bss:00414000 ; Segment permissions: Read/Write
.bss:00414000 _bss            segment para public 'BSS' use32
.bss:00414000                 assume cs:_bss
.bss:00414000                 ;org 414000h
.bss:00414000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00414000 byte_414000     db ?                    ; DATA XREF: sub_401B70+6F↑w
.bss:00414000                                         ; sub_401B70+414↑w ...
.bss:00414001                 align 10h
.bss:00414010 byte_414010     db ?                    ; DATA XREF: sub_401B70+86↑w
.bss:00414010                                         ; sub_401B70+3A6↑w ...
.bss:00414011                 align 10h
.bss:00414020 byte_414020     db ?                    ; DATA XREF: sub_401B70:loc_401FB6↑w
.bss:00414020                                         ; sub_401B70+56C↑r ...
.bss:00414021                 align 10h
.bss:00414030 byte_414030     db ?                    ; DATA XREF: sub_401B70+8D↑w
.bss:00414030                                         ; sub_401B70+5EE↑w ...
.bss:00414031                 align 10h
.bss:00414040 ; int dword_414040
.bss:00414040 dword_414040    dd ?                    ; DATA XREF: sub_401B70+B8↑w
.bss:00414040                                         ; sub_401B70+169↑w ...
.bss:00414044                 align 10h
.bss:00414050 dword_414050    dd ?                    ; DATA XREF: sub_401B70+A3↑o
.bss:00414050                                         ; sub_401B70+14B↑o ...
.bss:00414054 dword_414054    dd ?                    ; DATA XREF: sub_401B70+38D↑w
.bss:00414054                                         ; sub_402660+B8↑r ...
.bss:00414058                 align 10h
.bss:00414060 byte_414060     db ?                    ; DATA XREF: sub_401B70+C6↑w
.bss:00414060                                         ; sub_401B70:loc_401F2E↑w ...
.bss:00414061                 align 10h
.bss:00414070 byte_414070     db ?                    ; DATA XREF: sub_401B70+49A↑w
.bss:00414070                                         ; sub_401B70:loc_402016↑w ...
.bss:00414071                 align 10h
.bss:00414080 dword_414080    dd ?                    ; DATA XREF: sub_401B70+CD↑w
.bss:00414080                                         ; sub_401B70:loc_4021CD↑r ...
.bss:00414084                 align 10h
.bss:00414090 dword_414090    dd ?                    ; DATA XREF: sub_401B70+7A↑w
.bss:00414090                                         ; sub_401B70+3E2↑r ...
.bss:00414094                 align 10h
.bss:004140A0 dword_4140A0    dd ?                    ; DATA XREF: sub_401B70+80↑w
.bss:004140A0                                         ; sub_401B70+4C4↑r ...
.bss:004140A4                 align 10h
.bss:004140B0 dword_4140B0    dd ?                    ; DATA XREF: sub_401B70+582↑w
.bss:004140B0                                         ; sub_401B70+672↑r ...
.bss:004140B4                 align 10h
.bss:004140C0 byte_4140C0     db ?                    ; DATA XREF: sub_401B70+BF↑w
.bss:004140C0                                         ; sub_401B70:loc_401F22↑w ...
.bss:004140C1                 align 10h
.bss:004140D0 dword_4140D0    dd ?                    ; DATA XREF: sub_404810+9↑o
.bss:004140D0                                         ; sub_404810+17↑w ...
.bss:004140D4 dword_4140D4    dd ?                    ; DATA XREF: sub_404810+21↑w
.bss:004140D4                                         ; .text:004048C9↑w
.bss:004140D8 dword_4140D8    dd ?                    ; DATA XREF: sub_404810+77↑r
.bss:004140D8                                         ; .text:00404917↑r
.bss:004140DC dword_4140DC    dd ?                    ; DATA XREF: sub_404810+6B↑r
.bss:004140DC                                         ; .text:0040490B↑r
.bss:004140E0                 align 40h
.bss:00414100 ; char *dword_414100
.bss:00414100 dword_414100    dd ?                    ; DATA XREF: .text:00406594↑w
.bss:00414100                                         ; sub_4065C0+58↑r
.bss:00414104                 align 10h
.bss:00414110 unk_414110      db    ? ;               ; DATA XREF: sub_408E80+100↑o
.bss:00414110                                         ; .data:off_413058↑o
.bss:00414111                 db    ? ;
.bss:00414112                 db    ? ;
.bss:00414113                 db    ? ;
.bss:00414114                 db    ? ;
.bss:00414115                 db    ? ;
.bss:00414116                 db    ? ;
.bss:00414117                 db    ? ;
.bss:00414118                 db    ? ;
.bss:00414119                 db    ? ;
.bss:0041411A                 db    ? ;
.bss:0041411B                 db    ? ;
.bss:0041411C                 db    ? ;
.bss:0041411D                 db    ? ;
.bss:0041411E                 db    ? ;
.bss:0041411F                 db    ? ;
.bss:00414120                 db    ? ;
.bss:00414121                 db    ? ;
.bss:00414122                 db    ? ;
.bss:00414123                 db    ? ;
.bss:00414124                 db    ? ;
.bss:00414125                 db    ? ;
.bss:00414126                 db    ? ;
.bss:00414127                 db    ? ;
.bss:00414128                 db    ? ;
.bss:00414129                 db    ? ;
.bss:0041412A                 db    ? ;
.bss:0041412B                 db    ? ;
.bss:0041412C                 db    ? ;
.bss:0041412D                 db    ? ;
.bss:0041412E                 db    ? ;
.bss:0041412F                 db    ? ;
.bss:00414130                 db    ? ;
.bss:00414131                 db    ? ;
.bss:00414132                 db    ? ;
.bss:00414133                 db    ? ;
.bss:00414134                 db    ? ;
.bss:00414135                 db    ? ;
.bss:00414136                 db    ? ;
.bss:00414137                 db    ? ;
.bss:00414138                 db    ? ;
.bss:00414139                 db    ? ;
.bss:0041413A                 db    ? ;
.bss:0041413B                 db    ? ;
.bss:0041413C                 db    ? ;
.bss:0041413D                 db    ? ;
.bss:0041413E                 db    ? ;
.bss:0041413F                 db    ? ;
.bss:00414140                 db    ? ;
.bss:00414141                 db    ? ;
.bss:00414142                 db    ? ;
.bss:00414143                 db    ? ;
.bss:00414144                 db    ? ;
.bss:00414145                 db    ? ;
.bss:00414146                 db    ? ;
.bss:00414147                 db    ? ;
.bss:00414148                 db    ? ;
.bss:00414149                 db    ? ;
.bss:0041414A                 db    ? ;
.bss:0041414B                 db    ? ;
.bss:0041414C                 db    ? ;
.bss:0041414D                 db    ? ;
.bss:0041414E                 db    ? ;
.bss:0041414F                 db    ? ;
.bss:00414150                 db    ? ;
.bss:00414151                 db    ? ;
.bss:00414152                 db    ? ;
.bss:00414153                 db    ? ;
.bss:00414154                 db    ? ;
.bss:00414155                 db    ? ;
.bss:00414156                 db    ? ;
.bss:00414157                 db    ? ;
.bss:00414158                 db    ? ;
.bss:00414159                 db    ? ;
.bss:0041415A                 db    ? ;
.bss:0041415B                 db    ? ;
.bss:0041415C                 db    ? ;
.bss:0041415D                 db    ? ;
.bss:0041415E                 db    ? ;
.bss:0041415F                 db    ? ;
.bss:00414160                 db    ? ;
.bss:00414161                 db    ? ;
.bss:00414162                 db    ? ;
.bss:00414163                 db    ? ;
.bss:00414164                 db    ? ;
.bss:00414165                 db    ? ;
.bss:00414166                 db    ? ;
.bss:00414167                 db    ? ;
.bss:00414168                 db    ? ;
.bss:00414169                 db    ? ;
.bss:0041416A                 db    ? ;
.bss:0041416B                 db    ? ;
.bss:0041416C                 db    ? ;
.bss:0041416D                 db    ? ;
.bss:0041416E                 db    ? ;
.bss:0041416F                 db    ? ;
.bss:00414170                 db    ? ;
.bss:00414171                 db    ? ;
.bss:00414172                 db    ? ;
.bss:00414173                 db    ? ;
.bss:00414174                 db    ? ;
.bss:00414175                 db    ? ;
.bss:00414176                 db    ? ;
.bss:00414177                 db    ? ;
.bss:00414178                 db    ? ;
.bss:00414179                 db    ? ;
.bss:0041417A                 db    ? ;
.bss:0041417B                 db    ? ;
.bss:0041417C                 db    ? ;
.bss:0041417D                 db    ? ;
.bss:0041417E                 db    ? ;
.bss:0041417F                 db    ? ;
.bss:00414180                 db    ? ;
.bss:00414181                 db    ? ;
.bss:00414182                 db    ? ;
.bss:00414183                 db    ? ;
.bss:00414184                 db    ? ;
.bss:00414185                 db    ? ;
.bss:00414186                 db    ? ;
.bss:00414187                 db    ? ;
.bss:00414188                 db    ? ;
.bss:00414189                 db    ? ;
.bss:0041418A                 db    ? ;
.bss:0041418B                 db    ? ;
.bss:0041418C                 db    ? ;
.bss:0041418D                 db    ? ;
.bss:0041418E                 db    ? ;
.bss:0041418F                 db    ? ;
.bss:00414190                 db    ? ;
.bss:00414191                 db    ? ;
.bss:00414192                 db    ? ;
.bss:00414193                 db    ? ;
.bss:00414194                 db    ? ;
.bss:00414195                 db    ? ;
.bss:00414196                 db    ? ;
.bss:00414197                 db    ? ;
.bss:00414198                 db    ? ;
.bss:00414199                 db    ? ;
.bss:0041419A                 db    ? ;
.bss:0041419B                 db    ? ;
.bss:0041419C                 db    ? ;
.bss:0041419D                 db    ? ;
.bss:0041419E                 db    ? ;
.bss:0041419F                 db    ? ;
.bss:004141A0                 db    ? ;
.bss:004141A1                 db    ? ;
.bss:004141A2                 db    ? ;
.bss:004141A3                 db    ? ;
.bss:004141A4                 db    ? ;
.bss:004141A5                 db    ? ;
.bss:004141A6                 db    ? ;
.bss:004141A7                 db    ? ;
.bss:004141A8                 db    ? ;
.bss:004141A9                 db    ? ;
.bss:004141AA                 db    ? ;
.bss:004141AB                 db    ? ;
.bss:004141AC                 db    ? ;
.bss:004141AD                 db    ? ;
.bss:004141AE                 db    ? ;
.bss:004141AF                 db    ? ;
.bss:004141B0                 db    ? ;
.bss:004141B1                 db    ? ;
.bss:004141B2                 db    ? ;
.bss:004141B3                 db    ? ;
.bss:004141B4                 db    ? ;
.bss:004141B5                 db    ? ;
.bss:004141B6                 db    ? ;
.bss:004141B7                 db    ? ;
.bss:004141B8                 db    ? ;
.bss:004141B9                 db    ? ;
.bss:004141BA                 db    ? ;
.bss:004141BB                 db    ? ;
.bss:004141BC                 db    ? ;
.bss:004141BD                 db    ? ;
.bss:004141BE                 db    ? ;
.bss:004141BF                 db    ? ;
.bss:004141C0                 db    ? ;
.bss:004141C1                 db    ? ;
.bss:004141C2                 db    ? ;
.bss:004141C3                 db    ? ;
.bss:004141C4                 db    ? ;
.bss:004141C5                 db    ? ;
.bss:004141C6                 db    ? ;
.bss:004141C7                 db    ? ;
.bss:004141C8                 db    ? ;
.bss:004141C9                 db    ? ;
.bss:004141CA                 db    ? ;
.bss:004141CB                 db    ? ;
.bss:004141CC                 db    ? ;
.bss:004141CD                 db    ? ;
.bss:004141CE                 db    ? ;
.bss:004141CF                 db    ? ;
.bss:004141D0                 db    ? ;
.bss:004141D1                 db    ? ;
.bss:004141D2                 db    ? ;
.bss:004141D3                 db    ? ;
.bss:004141D4                 db    ? ;
.bss:004141D5                 db    ? ;
.bss:004141D6                 db    ? ;
.bss:004141D7                 db    ? ;
.bss:004141D8                 db    ? ;
.bss:004141D9                 db    ? ;
.bss:004141DA                 db    ? ;
.bss:004141DB                 db    ? ;
.bss:004141DC                 db    ? ;
.bss:004141DD                 db    ? ;
.bss:004141DE                 db    ? ;
.bss:004141DF                 db    ? ;
.bss:004141E0                 db    ? ;
.bss:004141E1                 db    ? ;
.bss:004141E2                 db    ? ;
.bss:004141E3                 db    ? ;
.bss:004141E4                 db    ? ;
.bss:004141E5                 db    ? ;
.bss:004141E6                 db    ? ;
.bss:004141E7                 db    ? ;
.bss:004141E8                 db    ? ;
.bss:004141E9                 db    ? ;
.bss:004141EA                 db    ? ;
.bss:004141EB                 db    ? ;
.bss:004141EC                 db    ? ;
.bss:004141ED                 db    ? ;
.bss:004141EE                 db    ? ;
.bss:004141EF                 db    ? ;
.bss:004141F0                 db    ? ;
.bss:004141F1                 db    ? ;
.bss:004141F2                 db    ? ;
.bss:004141F3                 db    ? ;
.bss:004141F4                 db    ? ;
.bss:004141F5                 db    ? ;
.bss:004141F6                 db    ? ;
.bss:004141F7                 db    ? ;
.bss:004141F8                 db    ? ;
.bss:004141F9                 db    ? ;
.bss:004141FA                 db    ? ;
.bss:004141FB                 db    ? ;
.bss:004141FC                 db    ? ;
.bss:004141FD                 db    ? ;
.bss:004141FE                 db    ? ;
.bss:004141FF                 db    ? ;
.bss:00414200                 db    ? ;
.bss:00414201                 db    ? ;
.bss:00414202                 db    ? ;
.bss:00414203                 db    ? ;
.bss:00414204                 db    ? ;
.bss:00414205                 db    ? ;
.bss:00414206                 db    ? ;
.bss:00414207                 db    ? ;
.bss:00414208                 db    ? ;
.bss:00414209                 db    ? ;
.bss:0041420A                 db    ? ;
.bss:0041420B                 db    ? ;
.bss:0041420C                 db    ? ;
.bss:0041420D                 db    ? ;
.bss:0041420E                 db    ? ;
.bss:0041420F                 db    ? ;
.bss:00414210 dword_414210    dd ?                    ; DATA XREF: .text:loc_408811↑o
.bss:00414210                                         ; .text:loc_408830↑o ...
.bss:00414214 dword_414214    dd ?                    ; DATA XREF: .text:loc_4088B0↑o
.bss:00414214                                         ; .text:00408D38↑r ...
.bss:00414218 dword_414218    dd ?                    ; DATA XREF: .text:00408D32↑r
.bss:00414218                                         ; sub_408DE0+2C↑r
.bss:0041421C dword_41421C    dd ?                    ; DATA XREF: .text:00408D26↑r
.bss:0041421C                                         ; sub_408DE0+22↑r
.bss:00414220 dword_414220    dd ?                    ; DATA XREF: .text:00408D42↑r
.bss:00414220                                         ; sub_408DE0+36↑r
.bss:00414224 dword_414224    dd ?                    ; DATA XREF: .text:00408D52↑r
.bss:00414224                                         ; sub_408DE0+4E↑r
.bss:00414228 dword_414228    dd ?                    ; DATA XREF: .text:00408D6F↑r
.bss:00414228                                         ; sub_408DE0+62↑r
.bss:0041422C dword_41422C    dd ?                    ; DATA XREF: .text:00408D65↑r
.bss:0041422C                                         ; sub_408DE0+70↑r
.bss:00414230 dword_414230    dd ?                    ; DATA XREF: .text:00408D48↑r
.bss:00414230                                         ; sub_408DE0+7A↑r
.bss:00414234                 align 10h
.bss:00414240 ; char *Str1
.bss:00414240 Str1            dd ?                    ; DATA XREF: sub_409B74:loc_409BAD↑w
.bss:00414240                                         ; sub_409B74:loc_409CE0↑r
.bss:00414244                 align 10h
.bss:00414250 dword_414250    dd ?                    ; DATA XREF: sub_409B74+2D↑r
.bss:00414250                                         ; sub_409B74+3F↑w
.bss:00414254                 align 10h
.bss:00414260 unk_414260      db    ? ;               ; DATA XREF: sub_40BDE0+28↑o
.bss:00414261                 db    ? ;
.bss:00414262                 db    ? ;
.bss:00414263                 db    ? ;
.bss:00414264                 db    ? ;
.bss:00414265                 db    ? ;
.bss:00414266                 db    ? ;
.bss:00414267                 db    ? ;
.bss:00414268                 db    ? ;
.bss:00414269                 db    ? ;
.bss:0041426A                 db    ? ;
.bss:0041426B                 db    ? ;
.bss:0041426C                 db    ? ;
.bss:0041426D                 db    ? ;
.bss:0041426E                 db    ? ;
.bss:0041426F                 db    ? ;
.bss:00414270                 db    ? ;
.bss:00414271                 db    ? ;
.bss:00414272                 db    ? ;
.bss:00414273                 db    ? ;
.bss:00414274                 db    ? ;
.bss:00414275                 db    ? ;
.bss:00414276                 db    ? ;
.bss:00414277                 db    ? ;
.bss:00414278                 db    ? ;
.bss:00414279                 db    ? ;
.bss:0041427A                 db    ? ;
.bss:0041427B                 db    ? ;
.bss:0041427C                 db    ? ;
.bss:0041427D                 db    ? ;
.bss:0041427E                 db    ? ;
.bss:0041427F                 db    ? ;
.bss:00414280 dword_414280    dd ?                    ; DATA XREF: sub_40BDE0+3↑r
.bss:00414280                                         ; sub_40BDE0+56↑w
.bss:00414284                 align 10h
.bss:00414290 ; char *dword_414290
.bss:00414290 dword_414290    dd ?                    ; DATA XREF: sub_40BDE0:loc_40BDEC↑r
.bss:00414290                                         ; sub_40BDE0+4C↑w
.bss:00414294                 align 10h
.bss:004142A0 dword_4142A0    dd ?                    ; DATA XREF: sub_40CBE0+8↑r
.bss:004142A0                                         ; sub_40CCF0:loc_40CD72↑w ...
.bss:004142A4                 align 10h
.bss:004142B0 ; struct _OSVERSIONINFOA VersionInformation
.bss:004142B0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40CCF0:loc_40CD10↑o
.bss:004142B0                                         ; sub_40CCF0+2C↑w ...
.bss:00414344 word_414344     dw ?                    ; DATA XREF: sub_40CCF0:loc_40CDA3↑r
.bss:00414346                 align 4
.bss:00414348 word_414348     dw ?                    ; DATA XREF: .text:loc_40C766↑r
.bss:00414348                                         ; .text:0040C794↑r ...
.bss:0041434A byte_41434A     db ?                    ; DATA XREF: .text:0040C725↑r
.bss:0041434B                 align 10h
.bss:00414350 dword_414350    dd ?                    ; DATA XREF: sub_40CCF0+6↑r
.bss:00414350                                         ; sub_40CCF0+75↑w
.bss:00414354                 align 10h
.bss:00414360 dword_414360    dd ?                    ; DATA XREF: sub_40D070+1C↑r
.bss:00414360                                         ; sub_40D070+104↑w
.bss:00414364                 align 10h
.bss:00414370 dword_414370    dd ?                    ; DATA XREF: sub_40D070+B↑r
.bss:00414370                                         ; sub_40D070+71↑w
.bss:00414374                 align 10h
.bss:00414380 dword_414380    dd ?                    ; DATA XREF: sub_40D070+85↑r
.bss:00414380                                         ; sub_40D070+B9↑w
.bss:00414384 dword_414384    dd ?                    ; DATA XREF: sub_40D070+C4↑w
.bss:00414388 dword_414388    dd ?                    ; DATA XREF: sub_40D070+2E↑o
.bss:00414388                                         ; sub_40D070+CF↑w
.bss:0041438C dword_41438C    dd ?                    ; DATA XREF: sub_40D070+DA↑w
.bss:00414390                 db    ? ;
.bss:00414391                 db    ? ;
.bss:00414392                 db    ? ;
.bss:00414393                 db    ? ;
.bss:00414394                 db    ? ;
.bss:00414395                 db    ? ;
.bss:00414396                 db    ? ;
.bss:00414397                 db    ? ;
.bss:00414398                 db    ? ;
.bss:00414399                 db    ? ;
.bss:0041439A                 db    ? ;
.bss:0041439B                 db    ? ;
.bss:0041439C                 db    ? ;
.bss:0041439D                 db    ? ;
.bss:0041439E                 db    ? ;
.bss:0041439F                 db    ? ;
.bss:004143A0                 db    ? ;
.bss:004143A1                 db    ? ;
.bss:004143A2                 db    ? ;
.bss:004143A3                 db    ? ;
.bss:004143A4                 db    ? ;
.bss:004143A5                 db    ? ;
.bss:004143A6                 db    ? ;
.bss:004143A7                 db    ? ;
.bss:004143A8                 db    ? ;
.bss:004143A9                 db    ? ;
.bss:004143AA                 db    ? ;
.bss:004143AB                 db    ? ;
.bss:004143AC                 db    ? ;
.bss:004143AD                 db    ? ;
.bss:004143AE                 db    ? ;
.bss:004143AF                 db    ? ;
.bss:004143B0                 db    ? ;
.bss:004143B1                 db    ? ;
.bss:004143B2                 db    ? ;
.bss:004143B3                 db    ? ;
.bss:004143B4                 db    ? ;
.bss:004143B5                 db    ? ;
.bss:004143B6                 db    ? ;
.bss:004143B7                 db    ? ;
.bss:004143B8                 db    ? ;
.bss:004143B9                 db    ? ;
.bss:004143BA                 db    ? ;
.bss:004143BB                 db    ? ;
.bss:004143BC                 db    ? ;
.bss:004143BD                 db    ? ;
.bss:004143BE                 db    ? ;
.bss:004143BF                 db    ? ;
.bss:004143C0                 db    ? ;
.bss:004143C1                 db    ? ;
.bss:004143C2                 db    ? ;
.bss:004143C3                 db    ? ;
.bss:004143C4                 db    ? ;
.bss:004143C5                 db    ? ;
.bss:004143C6                 db    ? ;
.bss:004143C7                 db    ? ;
.bss:004143C8                 db    ? ;
.bss:004143C9                 db    ? ;
.bss:004143CA                 db    ? ;
.bss:004143CB                 db    ? ;
.bss:004143CC                 db    ? ;
.bss:004143CD                 db    ? ;
.bss:004143CE                 db    ? ;
.bss:004143CF                 db    ? ;
.bss:004143D0                 db    ? ;
.bss:004143D1                 db    ? ;
.bss:004143D2                 db    ? ;
.bss:004143D3                 db    ? ;
.bss:004143D4                 db    ? ;
.bss:004143D5                 db    ? ;
.bss:004143D6                 db    ? ;
.bss:004143D7                 db    ? ;
.bss:004143D8                 db    ? ;
.bss:004143D9                 db    ? ;
.bss:004143DA                 db    ? ;
.bss:004143DB                 db    ? ;
.bss:004143DC                 db    ? ;
.bss:004143DD                 db    ? ;
.bss:004143DE                 db    ? ;
.bss:004143DF                 db    ? ;
.bss:004143E0                 db    ? ;
.bss:004143E1                 db    ? ;
.bss:004143E2                 db    ? ;
.bss:004143E3                 db    ? ;
.bss:004143E4                 db    ? ;
.bss:004143E5                 db    ? ;
.bss:004143E6                 db    ? ;
.bss:004143E7                 db    ? ;
.bss:004143E8                 db    ? ;
.bss:004143E9                 db    ? ;
.bss:004143EA                 db    ? ;
.bss:004143EB                 db    ? ;
.bss:004143EC                 db    ? ;
.bss:004143ED                 db    ? ;
.bss:004143EE                 db    ? ;
.bss:004143EF                 db    ? ;
.bss:004143F0                 db    ? ;
.bss:004143F1                 db    ? ;
.bss:004143F2                 db    ? ;
.bss:004143F3                 db    ? ;
.bss:004143F4                 db    ? ;
.bss:004143F5                 db    ? ;
.bss:004143F6                 db    ? ;
.bss:004143F7                 db    ? ;
.bss:004143F8                 db    ? ;
.bss:004143F9                 db    ? ;
.bss:004143FA                 db    ? ;
.bss:004143FB                 db    ? ;
.bss:004143FC                 db    ? ;
.bss:004143FD                 db    ? ;
.bss:004143FE                 db    ? ;
.bss:004143FF                 db    ? ;
.bss:00414400                 db    ? ;
.bss:00414401                 db    ? ;
.bss:00414402                 db    ? ;
.bss:00414403                 db    ? ;
.bss:00414404                 db    ? ;
.bss:00414405                 db    ? ;
.bss:00414406                 db    ? ;
.bss:00414407                 db    ? ;
.bss:00414408                 db    ? ;
.bss:00414409                 db    ? ;
.bss:0041440A                 db    ? ;
.bss:0041440B                 db    ? ;
.bss:0041440C                 db    ? ;
.bss:0041440D                 db    ? ;
.bss:0041440E                 db    ? ;
.bss:0041440F                 db    ? ;
.bss:00414410                 db    ? ;
.bss:00414411                 db    ? ;
.bss:00414412                 db    ? ;
.bss:00414413                 db    ? ;
.bss:00414414                 db    ? ;
.bss:00414415                 db    ? ;
.bss:00414416                 db    ? ;
.bss:00414417                 db    ? ;
.bss:00414418                 db    ? ;
.bss:00414419                 db    ? ;
.bss:0041441A                 db    ? ;
.bss:0041441B                 db    ? ;
.bss:0041441C                 db    ? ;
.bss:0041441D                 db    ? ;
.bss:0041441E                 db    ? ;
.bss:0041441F                 db    ? ;
.bss:00414420                 db    ? ;
.bss:00414421                 db    ? ;
.bss:00414422                 db    ? ;
.bss:00414423                 db    ? ;
.bss:00414424                 db    ? ;
.bss:00414425                 db    ? ;
.bss:00414426                 db    ? ;
.bss:00414427                 db    ? ;
.bss:00414428                 db    ? ;
.bss:00414429                 db    ? ;
.bss:0041442A                 db    ? ;
.bss:0041442B                 db    ? ;
.bss:0041442C                 db    ? ;
.bss:0041442D                 db    ? ;
.bss:0041442E                 db    ? ;
.bss:0041442F                 db    ? ;
.bss:00414430                 db    ? ;
.bss:00414431                 db    ? ;
.bss:00414432                 db    ? ;
.bss:00414433                 db    ? ;
.bss:00414434                 db    ? ;
.bss:00414435                 db    ? ;
.bss:00414436                 db    ? ;
.bss:00414437                 db    ? ;
.bss:00414438                 db    ? ;
.bss:00414439                 db    ? ;
.bss:0041443A                 db    ? ;
.bss:0041443B                 db    ? ;
.bss:0041443C                 db    ? ;
.bss:0041443D                 db    ? ;
.bss:0041443E                 db    ? ;
.bss:0041443F                 db    ? ;
.bss:00414440                 db    ? ;
.bss:00414441                 db    ? ;
.bss:00414442                 db    ? ;
.bss:00414443                 db    ? ;
.bss:00414444                 db    ? ;
.bss:00414445                 db    ? ;
.bss:00414446                 db    ? ;
.bss:00414447                 db    ? ;
.bss:00414448                 db    ? ;
.bss:00414449                 db    ? ;
.bss:0041444A                 db    ? ;
.bss:0041444B                 db    ? ;
.bss:0041444C                 db    ? ;
.bss:0041444D                 db    ? ;
.bss:0041444E                 db    ? ;
.bss:0041444F                 db    ? ;
.bss:00414450                 db    ? ;
.bss:00414451                 db    ? ;
.bss:00414452                 db    ? ;
.bss:00414453                 db    ? ;
.bss:00414454                 db    ? ;
.bss:00414455                 db    ? ;
.bss:00414456                 db    ? ;
.bss:00414457                 db    ? ;
.bss:00414458                 db    ? ;
.bss:00414459                 db    ? ;
.bss:0041445A                 db    ? ;
.bss:0041445B                 db    ? ;
.bss:0041445C                 db    ? ;
.bss:0041445D                 db    ? ;
.bss:0041445E                 db    ? ;
.bss:0041445F                 db    ? ;
.bss:00414460                 db    ? ;
.bss:00414461                 db    ? ;
.bss:00414462                 db    ? ;
.bss:00414463                 db    ? ;
.bss:00414464                 db    ? ;
.bss:00414465                 db    ? ;
.bss:00414466                 db    ? ;
.bss:00414467                 db    ? ;
.bss:00414468                 db    ? ;
.bss:00414469                 db    ? ;
.bss:0041446A                 db    ? ;
.bss:0041446B                 db    ? ;
.bss:0041446C                 db    ? ;
.bss:0041446D                 db    ? ;
.bss:0041446E                 db    ? ;
.bss:0041446F                 db    ? ;
.bss:00414470                 db    ? ;
.bss:00414471                 db    ? ;
.bss:00414472                 db    ? ;
.bss:00414473                 db    ? ;
.bss:00414474                 db    ? ;
.bss:00414475                 db    ? ;
.bss:00414476                 db    ? ;
.bss:00414477                 db    ? ;
.bss:00414478                 db    ? ;
.bss:00414479                 db    ? ;
.bss:0041447A                 db    ? ;
.bss:0041447B                 db    ? ;
.bss:0041447C                 db    ? ;
.bss:0041447D                 db    ? ;
.bss:0041447E                 db    ? ;
.bss:0041447F                 db    ? ;
.bss:00414480                 db    ? ;
.bss:00414481                 db    ? ;
.bss:00414482                 db    ? ;
.bss:00414483                 db    ? ;
.bss:00414484                 db    ? ;
.bss:00414485                 db    ? ;
.bss:00414486                 db    ? ;
.bss:00414487                 db    ? ;
.bss:00414488                 db    ? ;
.bss:00414489                 db    ? ;
.bss:0041448A                 db    ? ;
.bss:0041448B                 db    ? ;
.bss:0041448C                 db    ? ;
.bss:0041448D                 db    ? ;
.bss:0041448E                 db    ? ;
.bss:0041448F                 db    ? ;
.bss:00414490                 db    ? ;
.bss:00414491                 db    ? ;
.bss:00414492                 db    ? ;
.bss:00414493                 db    ? ;
.bss:00414494                 db    ? ;
.bss:00414495                 db    ? ;
.bss:00414496                 db    ? ;
.bss:00414497                 db    ? ;
.bss:00414498                 db    ? ;
.bss:00414499                 db    ? ;
.bss:0041449A                 db    ? ;
.bss:0041449B                 db    ? ;
.bss:0041449C                 db    ? ;
.bss:0041449D                 db    ? ;
.bss:0041449E                 db    ? ;
.bss:0041449F                 db    ? ;
.bss:004144A0                 db    ? ;
.bss:004144A1                 db    ? ;
.bss:004144A2                 db    ? ;
.bss:004144A3                 db    ? ;
.bss:004144A4                 db    ? ;
.bss:004144A5                 db    ? ;
.bss:004144A6                 db    ? ;
.bss:004144A7                 db    ? ;
.bss:004144A8                 db    ? ;
.bss:004144A9                 db    ? ;
.bss:004144AA                 db    ? ;
.bss:004144AB                 db    ? ;
.bss:004144AC                 db    ? ;
.bss:004144AD                 db    ? ;
.bss:004144AE                 db    ? ;
.bss:004144AF                 db    ? ;
.bss:004144B0                 db    ? ;
.bss:004144B1                 db    ? ;
.bss:004144B2                 db    ? ;
.bss:004144B3                 db    ? ;
.bss:004144B4                 db    ? ;
.bss:004144B5                 db    ? ;
.bss:004144B6                 db    ? ;
.bss:004144B7                 db    ? ;
.bss:004144B8                 db    ? ;
.bss:004144B9                 db    ? ;
.bss:004144BA                 db    ? ;
.bss:004144BB                 db    ? ;
.bss:004144BC                 db    ? ;
.bss:004144BD                 db    ? ;
.bss:004144BE                 db    ? ;
.bss:004144BF                 db    ? ;
.bss:004144C0                 db    ? ;
.bss:004144C1                 db    ? ;
.bss:004144C2                 db    ? ;
.bss:004144C3                 db    ? ;
.bss:004144C4                 db    ? ;
.bss:004144C5                 db    ? ;
.bss:004144C6                 db    ? ;
.bss:004144C7                 db    ? ;
.bss:004144C8                 db    ? ;
.bss:004144C9                 db    ? ;
.bss:004144CA                 db    ? ;
.bss:004144CB                 db    ? ;
.bss:004144CC                 db    ? ;
.bss:004144CD                 db    ? ;
.bss:004144CE                 db    ? ;
.bss:004144CF                 db    ? ;
.bss:004144D0                 db    ? ;
.bss:004144D1                 db    ? ;
.bss:004144D2                 db    ? ;
.bss:004144D3                 db    ? ;
.bss:004144D4                 db    ? ;
.bss:004144D5                 db    ? ;
.bss:004144D6                 db    ? ;
.bss:004144D7                 db    ? ;
.bss:004144D8                 db    ? ;
.bss:004144D9                 db    ? ;
.bss:004144DA                 db    ? ;
.bss:004144DB                 db    ? ;
.bss:004144DC                 db    ? ;
.bss:004144DD                 db    ? ;
.bss:004144DE                 db    ? ;
.bss:004144DF                 db    ? ;
.bss:004144E0                 db    ? ;
.bss:004144E1                 db    ? ;
.bss:004144E2                 db    ? ;
.bss:004144E3                 db    ? ;
.bss:004144E4                 db    ? ;
.bss:004144E5                 db    ? ;
.bss:004144E6                 db    ? ;
.bss:004144E7                 db    ? ;
.bss:004144E8                 db    ? ;
.bss:004144E9                 db    ? ;
.bss:004144EA                 db    ? ;
.bss:004144EB                 db    ? ;
.bss:004144EC                 db    ? ;
.bss:004144ED                 db    ? ;
.bss:004144EE                 db    ? ;
.bss:004144EF                 db    ? ;
.bss:004144F0                 db    ? ;
.bss:004144F1                 db    ? ;
.bss:004144F2                 db    ? ;
.bss:004144F3                 db    ? ;
.bss:004144F4                 db    ? ;
.bss:004144F5                 db    ? ;
.bss:004144F6                 db    ? ;
.bss:004144F7                 db    ? ;
.bss:004144F8                 db    ? ;
.bss:004144F9                 db    ? ;
.bss:004144FA                 db    ? ;
.bss:004144FB                 db    ? ;
.bss:004144FC                 db    ? ;
.bss:004144FD                 db    ? ;
.bss:004144FE                 db    ? ;
.bss:004144FF                 db    ? ;
.bss:00414500                 db    ? ;
.bss:00414501                 db    ? ;
.bss:00414502                 db    ? ;
.bss:00414503                 db    ? ;
.bss:00414504                 db    ? ;
.bss:00414505                 db    ? ;
.bss:00414506                 db    ? ;
.bss:00414507                 db    ? ;
.bss:00414508                 db    ? ;
.bss:00414509                 db    ? ;
.bss:0041450A                 db    ? ;
.bss:0041450B                 db    ? ;
.bss:0041450C                 db    ? ;
.bss:0041450D                 db    ? ;
.bss:0041450E                 db    ? ;
.bss:0041450F                 db    ? ;
.bss:00414510                 db    ? ;
.bss:00414511                 db    ? ;
.bss:00414512                 db    ? ;
.bss:00414513                 db    ? ;
.bss:00414514                 db    ? ;
.bss:00414515                 db    ? ;
.bss:00414516                 db    ? ;
.bss:00414517                 db    ? ;
.bss:00414518                 db    ? ;
.bss:00414519                 db    ? ;
.bss:0041451A                 db    ? ;
.bss:0041451B                 db    ? ;
.bss:0041451C                 db    ? ;
.bss:0041451D                 db    ? ;
.bss:0041451E                 db    ? ;
.bss:0041451F                 db    ? ;
.bss:00414520                 db    ? ;
.bss:00414521                 db    ? ;
.bss:00414522                 db    ? ;
.bss:00414523                 db    ? ;
.bss:00414524                 db    ? ;
.bss:00414525                 db    ? ;
.bss:00414526                 db    ? ;
.bss:00414527                 db    ? ;
.bss:00414528                 db    ? ;
.bss:00414529                 db    ? ;
.bss:0041452A                 db    ? ;
.bss:0041452B                 db    ? ;
.bss:0041452C                 db    ? ;
.bss:0041452D                 db    ? ;
.bss:0041452E                 db    ? ;
.bss:0041452F                 db    ? ;
.bss:00414530                 db    ? ;
.bss:00414531                 db    ? ;
.bss:00414532                 db    ? ;
.bss:00414533                 db    ? ;
.bss:00414534                 db    ? ;
.bss:00414535                 db    ? ;
.bss:00414536                 db    ? ;
.bss:00414537                 db    ? ;
.bss:00414538                 db    ? ;
.bss:00414539                 db    ? ;
.bss:0041453A                 db    ? ;
.bss:0041453B                 db    ? ;
.bss:0041453C                 db    ? ;
.bss:0041453D                 db    ? ;
.bss:0041453E                 db    ? ;
.bss:0041453F                 db    ? ;
.bss:00414540                 db    ? ;
.bss:00414541                 db    ? ;
.bss:00414542                 db    ? ;
.bss:00414543                 db    ? ;
.bss:00414544                 db    ? ;
.bss:00414545                 db    ? ;
.bss:00414546                 db    ? ;
.bss:00414547                 db    ? ;
.bss:00414548                 db    ? ;
.bss:00414549                 db    ? ;
.bss:0041454A                 db    ? ;
.bss:0041454B                 db    ? ;
.bss:0041454C                 db    ? ;
.bss:0041454D                 db    ? ;
.bss:0041454E                 db    ? ;
.bss:0041454F                 db    ? ;
.bss:00414550                 db    ? ;
.bss:00414551                 db    ? ;
.bss:00414552                 db    ? ;
.bss:00414553                 db    ? ;
.bss:00414554                 db    ? ;
.bss:00414555                 db    ? ;
.bss:00414556                 db    ? ;
.bss:00414557                 db    ? ;
.bss:00414558                 db    ? ;
.bss:00414559                 db    ? ;
.bss:0041455A                 db    ? ;
.bss:0041455B                 db    ? ;
.bss:0041455C                 db    ? ;
.bss:0041455D                 db    ? ;
.bss:0041455E                 db    ? ;
.bss:0041455F                 db    ? ;
.bss:00414560                 db    ? ;
.bss:00414561                 db    ? ;
.bss:00414562                 db    ? ;
.bss:00414563                 db    ? ;
.bss:00414564                 db    ? ;
.bss:00414565                 db    ? ;
.bss:00414566                 db    ? ;
.bss:00414567                 db    ? ;
.bss:00414568                 db    ? ;
.bss:00414569                 db    ? ;
.bss:0041456A                 db    ? ;
.bss:0041456B                 db    ? ;
.bss:0041456C                 db    ? ;
.bss:0041456D                 db    ? ;
.bss:0041456E                 db    ? ;
.bss:0041456F                 db    ? ;
.bss:00414570                 db    ? ;
.bss:00414571                 db    ? ;
.bss:00414572                 db    ? ;
.bss:00414573                 db    ? ;
.bss:00414574                 db    ? ;
.bss:00414575                 db    ? ;
.bss:00414576                 db    ? ;
.bss:00414577                 db    ? ;
.bss:00414578                 db    ? ;
.bss:00414579                 db    ? ;
.bss:0041457A                 db    ? ;
.bss:0041457B                 db    ? ;
.bss:0041457C                 db    ? ;
.bss:0041457D                 db    ? ;
.bss:0041457E                 db    ? ;
.bss:0041457F                 db    ? ;
.bss:00414580 dword_414580    dd ?                    ; DATA XREF: sub_40DE80+6E↑r
.bss:00414580                                         ; sub_40DE80+9A↑r ...
.bss:00414584 dword_414584    dd ?                    ; DATA XREF: sub_40DE80:loc_40DEE8↑r
.bss:00414584                                         ; sub_40DE80+A0↑r ...
.bss:00414588                 align 10h
.bss:00414590 dword_414590    dd ?                    ; DATA XREF: sub_40EAB0+100↑r
.bss:00414590                                         ; sub_40EAB0+308↑w
.bss:00414594                 align 10h
.bss:004145A0 ; char *Str
.bss:004145A0 Str             dd ?                    ; DATA XREF: sub_40EAB0:loc_40EE14↑r
.bss:004145A0                                         ; sub_40EAB0+3B6↑r ...
.bss:004145A4                 align 10h
.bss:004145B0 dword_4145B0    dd ?                    ; DATA XREF: sub_40FFA0↑r
.bss:004145B0                                         ; .text:loc_4100D2↑w
.bss:004145B4                 align 10h
.bss:004145C0 dword_4145C0    dd ?                    ; DATA XREF: sub_401B70+36↑w
.bss:004145C0                                         ; sub_401B70+186↑r ...
.bss:004145C4                 align 20h
.bss:004145E0 ; char *dword_4145E0
.bss:004145E0 dword_4145E0    dd ?                    ; DATA XREF: sub_401B70+153↑r
.bss:004145E0                                         ; sub_401B70+3D7↑r ...
.bss:004145E4                 align 10h
.bss:004145F0 dword_4145F0    dd ?                    ; CODE XREF: sub_409B74+63↑p
.bss:004145F0                                         ; DATA XREF: sub_409A70+1E↑r ...
.bss:004145F4                 align 10h
.bss:00414600 dword_414600    dd ?                    ; DATA XREF: sub_409A70+4E↑w
.bss:00414600                                         ; sub_409B74+AB↑w
.bss:00414604                 db    ? ;
.bss:00414605                 db    ? ;
.bss:00414606                 db    ? ;
.bss:00414607                 db    ? ;
.bss:00414608                 db    ? ;
.bss:00414609                 db    ? ;
.bss:0041460A                 db    ? ;
.bss:0041460B                 db    ? ;
.bss:0041460C                 db    ? ;
.bss:0041460D                 db    ? ;
.bss:0041460E                 db    ? ;
.bss:0041460F                 db    ? ;
.bss:00414610                 db    ? ;
.bss:00414611                 db    ? ;
.bss:00414612                 db    ? ;
.bss:00414613                 db    ? ;
.bss:00414614                 db    ? ;
.bss:00414615                 db    ? ;
.bss:00414616                 db    ? ;
.bss:00414617                 db    ? ;
.bss:00414618                 db    ? ;
.bss:00414619                 db    ? ;
.bss:0041461A                 db    ? ;
.bss:0041461B                 db    ? ;
.bss:0041461C                 db    ? ;
.bss:0041461D                 db    ? ;
.bss:0041461E                 db    ? ;
.bss:0041461F                 db    ? ;
.bss:00414620                 db    ? ;
.bss:00414621                 db    ? ;
.bss:00414622                 db    ? ;
.bss:00414623                 db    ? ;
.bss:00414624                 db    ? ;
.bss:00414625                 db    ? ;
.bss:00414626                 db    ? ;
.bss:00414627                 db    ? ;
.bss:00414628                 db    ? ;
.bss:00414629                 db    ? ;
.bss:0041462A                 db    ? ;
.bss:0041462B                 db    ? ;
.bss:0041462C                 db    ? ;
.bss:0041462D                 db    ? ;
.bss:0041462E                 db    ? ;
.bss:0041462F                 db    ? ;
.bss:00414630 dword_414630    dd ?                    ; DATA XREF: sub_409B74+13↑r
.bss:00414634                 align 1000h
.bss:00414634 _bss            ends
.bss:00414634
.idata:00415000 ; Section 4. (virtual address 00015000)
.idata:00415000 ; Virtual size                  : 00000E30 (   3632.)
.idata:00415000 ; Section size in file          : 00001000 (   4096.)
.idata:00415000 ; Offset to raw data for section: 00012000
.idata:00415000 ; Flags C0000040: Data Readable Writable
.idata:00415000 ; Alignment     : default
.idata:00415000 ; ===========================================================================
.idata:00415000
.idata:00415000 ; Segment type: Externs
.idata:00415000 ; _idata
.idata:00415000
.idata:00415001
.idata:004152BC ;
.idata:004152BC ; Imports from libintl3.dll
.idata:004152BC ;
.idata:004152BC                 extrn libintl_bindtextdomain:dword
.idata:004152BC                                         ; CODE XREF: sub_401B70+50↑p
.idata:004152BC                                         ; DATA XREF: sub_401B70+50↑r ...
.idata:004152C0                 extrn libintl_gettext:dword
.idata:004152C0                                         ; CODE XREF: sub_401B70+17A↑p
.idata:004152C0                                         ; sub_401B70+20B↑p ...
.idata:004152C4                 extrn libintl_textdomain:dword
.idata:004152C4                                         ; CODE XREF: sub_401B70+5D↑p
.idata:004152C4                                         ; DATA XREF: sub_401B70+5D↑r ...
.idata:004152C8
.idata:004152D0 ;
.idata:004152D0 ; Imports from ADVAPI32.DLL
.idata:004152D0 ;
.idata:004152D0 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004152D0                 extrn __imp_RegCloseKey:dword
.idata:004152D0                                         ; DATA XREF: RegCloseKey↑r
.idata:004152D4 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004152D4                 extrn __imp_RegOpenKeyExA:dword
.idata:004152D4                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004152D8 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004152D8                 extrn __imp_RegQueryValueExA:dword
.idata:004152D8                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004152DC
.idata:004152E4 ;
.idata:004152E4 ; Imports from KERNEL32.dll
.idata:004152E4 ;
.idata:004152E4 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004152E4                 extrn __imp_AreFileApisANSI:dword
.idata:004152E4                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004152E8 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004152E8                 extrn __imp_CloseHandle:dword
.idata:004152E8                                         ; DATA XREF: CloseHandle↑r
.idata:004152EC ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004152EC                 extrn __imp_CreateDirectoryA:dword
.idata:004152EC                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004152F0 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004152F0                 extrn __imp_CreateFileA:dword
.idata:004152F0                                         ; DATA XREF: CreateFileA↑r
.idata:004152F4 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004152F4                 extrn __imp_DeviceIoControl:dword
.idata:004152F4                                         ; DATA XREF: DeviceIoControl↑r
.idata:004152F8 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004152F8                 extrn __imp_ExitProcess:dword
.idata:004152F8                                         ; DATA XREF: ExitProcess↑r
.idata:004152FC ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004152FC                 extrn __imp_FindClose:dword
.idata:004152FC                                         ; DATA XREF: FindClose↑r
.idata:00415300 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00415300                 extrn __imp_FindFirstFileA:dword
.idata:00415300                                         ; DATA XREF: FindFirstFileA↑r
.idata:00415304 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00415304                 extrn __imp_FindNextFileA:dword
.idata:00415304                                         ; DATA XREF: FindNextFileA↑r
.idata:00415308 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00415308                 extrn __imp_FreeLibrary:dword
.idata:00415308                                         ; DATA XREF: FreeLibrary↑r
.idata:0041530C ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041530C                 extrn __imp_GetCurrentDirectoryA:dword
.idata:0041530C                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00415310 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00415310                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00415310                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00415314 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00415314                 extrn __imp_GetDriveTypeA:dword
.idata:00415314                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00415318 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00415318                 extrn __imp_GetFileAttributesA:dword
.idata:00415318                                         ; DATA XREF: GetFileAttributesA↑r
.idata:0041531C ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:0041531C                 extrn __imp_GetFileInformationByHandle:dword
.idata:0041531C                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00415320 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00415320                 extrn __imp_GetFileSize:dword
.idata:00415320                                         ; DATA XREF: GetFileSize↑r
.idata:00415324 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00415324                 extrn __imp_GetFileType:dword
.idata:00415324                                         ; DATA XREF: GetFileType↑r
.idata:00415328 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00415328                 extrn __imp_GetFullPathNameA:dword
.idata:00415328                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0041532C ; DWORD (__stdcall *GetLastError)()
.idata:0041532C                 extrn __imp_GetLastError:dword
.idata:0041532C                                         ; DATA XREF: GetLastError↑r
.idata:00415330 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00415330                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00415330                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00415334 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00415334                 extrn __imp_GetModuleFileNameA:dword
.idata:00415334                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00415338 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00415338                 extrn __imp_GetModuleHandleA:dword
.idata:00415338                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0041533C ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0041533C                 extrn __imp_GetProcAddress:dword
.idata:0041533C                                         ; DATA XREF: GetProcAddress↑r
.idata:00415340 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00415340                 extrn __imp_GetProcessHeap:dword
.idata:00415340                                         ; DATA XREF: GetProcessHeap↑r
.idata:00415344 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00415344                 extrn __imp_GetShortPathNameA:dword
.idata:00415344                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00415348 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00415348                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00415348                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0041534C ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0041534C                 extrn __imp_GetTimeZoneInformation:dword
.idata:0041534C                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00415350 ; DWORD (__stdcall *GetVersion)()
.idata:00415350                 extrn __imp_GetVersion:dword
.idata:00415350                                         ; DATA XREF: GetVersion↑r
.idata:00415354 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00415354                 extrn __imp_GetVersionExA:dword
.idata:00415354                                         ; DATA XREF: GetVersionExA↑r
.idata:00415358 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00415358                 extrn __imp_GetVolumeInformationA:dword
.idata:00415358                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0041535C ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041535C                 extrn __imp_HeapAlloc:dword
.idata:0041535C                                         ; DATA XREF: HeapAlloc↑r
.idata:00415360 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00415360                 extrn __imp_HeapFree:dword
.idata:00415360                                         ; DATA XREF: HeapFree↑r
.idata:00415364 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00415364                 extrn __imp_LoadLibraryA:dword
.idata:00415364                                         ; DATA XREF: LoadLibraryA↑r
.idata:00415368 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00415368                 extrn __imp_MultiByteToWideChar:dword
.idata:00415368                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0041536C ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0041536C                 extrn __imp_PeekNamedPipe:dword
.idata:0041536C                                         ; DATA XREF: PeekNamedPipe↑r
.idata:00415370 ; BOOL (__stdcall *SetCurrentDirectoryA)(LPCSTR lpPathName)
.idata:00415370                 extrn __imp_SetCurrentDirectoryA:dword
.idata:00415370                                         ; DATA XREF: SetCurrentDirectoryA↑r
.idata:00415374 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:00415374                 extrn __imp_SetErrorMode:dword
.idata:00415374                                         ; DATA XREF: SetErrorMode↑r
.idata:00415378 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00415378                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00415378                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0041537C ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:0041537C                 extrn __imp_UnlockFile:dword
.idata:0041537C                                         ; DATA XREF: UnlockFile↑r
.idata:00415380 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00415380                 extrn __imp_lstrcmpiA:dword
.idata:00415380                                         ; DATA XREF: lstrcmpiA↑r
.idata:00415384 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:00415384                 extrn __imp_lstrcpyA:dword
.idata:00415384                                         ; DATA XREF: lstrcpyA↑r
.idata:00415388
.idata:00415390 ;
.idata:00415390 ; Imports from msvcrt.dll
.idata:00415390 ;
.idata:00415390 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00415390                 extrn __imp__chmod:dword
.idata:00415390                                         ; DATA XREF: _chmod↑r
.idata:00415394 ; int (__cdecl *_close)(int FileHandle)
.idata:00415394                 extrn __imp__close:dword
.idata:00415394                                         ; DATA XREF: _close↑r
.idata:00415398 ; int (__cdecl *_getpid)()
.idata:00415398                 extrn __imp__getpid:dword
.idata:00415398                                         ; DATA XREF: _getpid↑r
.idata:0041539C ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0041539C                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004153A0 ; char *(__cdecl *_strdup)(const char *String)
.idata:004153A0                 extrn __imp__strdup:dword
.idata:004153A0                                         ; DATA XREF: _strdup↑r
.idata:004153A4 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004153A4                 extrn __imp__stricmp:dword
.idata:004153A4                                         ; DATA XREF: _stricmp↑r
.idata:004153A8
.idata:004153B0 ;
.idata:004153B0 ; Imports from MSVCP60.DLL
.idata:004153B0 ;
.idata:004153B0 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004153B0                 extrn __imp_mbrtowc:dword
.idata:004153B0                                         ; DATA XREF: mbrtowc↑r
.idata:004153B4
.idata:004153BC ;
.idata:004153BC ; Imports from msvcrt.dll
.idata:004153BC ;
.idata:004153BC                 extrn __imp___getmainargs:dword
.idata:004153BC                                         ; DATA XREF: __getmainargs↑r
.idata:004153C0 ; int _mb_cur_max
.idata:004153C0                 extrn __mb_cur_max:dword
.idata:004153C0                                         ; DATA XREF: sub_406A70:loc_406AC8↑r
.idata:004153C0                                         ; sub_407D40+7↑r ...
.idata:004153C4 ; char ***(__cdecl *__p__environ)()
.idata:004153C4                 extrn __imp___p__environ:dword
.idata:004153C4                                         ; DATA XREF: __p__environ↑r
.idata:004153C8 ; int *(__cdecl *__p__fmode)()
.idata:004153C8                 extrn __imp___p__fmode:dword
.idata:004153C8                                         ; DATA XREF: __p__fmode↑r
.idata:004153CC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004153CC                 extrn __set_app_type:dword
.idata:004153CC                                         ; CODE XREF: start+D↑p
.idata:004153CC                                         ; .text:0040102D↑p
.idata:004153CC                                         ; DATA XREF: ...
.idata:004153D0                 extrn __imp__assert:dword
.idata:004153D0                                         ; DATA XREF: _assert↑r
.idata:004153D4 ; void (__cdecl *_cexit)()
.idata:004153D4                 extrn __imp__cexit:dword
.idata:004153D4                                         ; DATA XREF: _cexit↑r
.idata:004153D8 ; int (__cdecl *_close_0)(int FileHandle)
.idata:004153D8                 extrn __imp__close_0:dword
.idata:004153D8                                         ; DATA XREF: _close_0↑r
.idata:004153DC ; int *(__cdecl *_errno)()
.idata:004153DC                 extrn __imp__errno:dword
.idata:004153DC                                         ; DATA XREF: _errno↑r
.idata:004153E0 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004153E0                 extrn __imp__fdopen:dword
.idata:004153E0                                         ; DATA XREF: _fdopen↑r
.idata:004153E4 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004153E4                 extrn __imp__filelengthi64:dword
.idata:004153E4                                         ; DATA XREF: _filelengthi64↑r
.idata:004153E8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004153E8                 extrn __imp__flsbuf:dword
.idata:004153E8                                         ; DATA XREF: _flsbuf↑r
.idata:004153EC ; int (__cdecl *_flushall)()
.idata:004153EC                 extrn __imp__flushall:dword
.idata:004153EC                                         ; DATA XREF: _flushall↑r
.idata:004153F0 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004153F0                 extrn __imp__get_osfhandle:dword
.idata:004153F0                                         ; DATA XREF: _get_osfhandle↑r
.idata:004153F4 ; char *(__cdecl *_getcwd)(char *DstBuf, int SizeInBytes)
.idata:004153F4                 extrn __imp__getcwd:dword
.idata:004153F4                                         ; DATA XREF: _getcwd↑r
.idata:004153F8 ; FILE iob[]
.idata:004153F8                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004153F8                                         ; sub_401080+75↑r ...
.idata:004153FC ; int (__cdecl *_isctype)(int C, int Type)
.idata:004153FC                 extrn __imp__isctype:dword
.idata:004153FC                                         ; DATA XREF: _isctype↑r
.idata:00415400 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00415400                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00415400                                         ; DATA XREF: .text:0040106C↑r
.idata:00415404 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:00415404                 extrn __imp__open_0:dword
.idata:00415404                                         ; DATA XREF: _open_0↑r
.idata:00415408 ; const unsigned __int16 *pctype
.idata:00415408                 extrn _pctype:dword     ; DATA XREF: sub_406A70:loc_4076C2↑r
.idata:00415408                                         ; sub_407D40:loc_408434↑r ...
.idata:0041540C ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041540C                 extrn __imp__setmode:dword
.idata:0041540C                                         ; DATA XREF: _setmode↑r
.idata:00415410 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00415410                 extrn __imp__stricmp_0:dword
.idata:00415410                                         ; DATA XREF: _stricmp_0↑r
.idata:00415414 ; void (__cdecl __noreturn *abort)()
.idata:00415414                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00415418 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00415418                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00415418                                         ; DATA XREF: sub_401040+C↑r
.idata:0041541C ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0041541C                 extrn __imp_calloc:dword
.idata:0041541C                                         ; DATA XREF: calloc↑r
.idata:00415420 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00415420                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00415424 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00415424                 extrn __imp_fclose:dword
.idata:00415424                                         ; DATA XREF: fclose↑r
.idata:00415428 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00415428                 extrn __imp_fflush:dword
.idata:00415428                                         ; DATA XREF: fflush↑r
.idata:0041542C ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041542C                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00415430 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00415430                 extrn __imp_fprintf:dword
.idata:00415430                                         ; DATA XREF: fprintf↑r
.idata:00415434 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00415434                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00415438 ; void (__cdecl *free)(void *Block)
.idata:00415438                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041543C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041543C                 extrn __imp_getenv:dword
.idata:0041543C                                         ; DATA XREF: getenv↑r
.idata:00415440 ; int (__cdecl *isalpha)(int C)
.idata:00415440                 extrn __imp_isalpha:dword
.idata:00415440                                         ; DATA XREF: isalpha↑r
.idata:00415444 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00415444                 extrn __imp_iswctype:dword
.idata:00415444                                         ; DATA XREF: iswctype↑r
.idata:00415448 ; struct lconv *(__cdecl *localeconv)()
.idata:00415448                 extrn __imp_localeconv:dword
.idata:00415448                                         ; DATA XREF: localeconv↑r
.idata:0041544C ; void *(__cdecl *malloc)(size_t Size)
.idata:0041544C                 extrn __imp_malloc:dword
.idata:0041544C                                         ; DATA XREF: malloc↑r
.idata:00415450 ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:00415450                 extrn __imp_memchr:dword
.idata:00415450                                         ; DATA XREF: memchr↑r
.idata:00415454 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00415454                 extrn __imp_memcpy:dword
.idata:00415454                                         ; DATA XREF: memcpy↑r
.idata:00415458 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:00415458                 extrn __imp_memmove:dword
.idata:00415458                                         ; DATA XREF: memmove↑r
.idata:0041545C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041545C                 extrn __imp_memset:dword
.idata:0041545C                                         ; DATA XREF: memset↑r
.idata:00415460 ; int (*printf)(const char *const Format, ...)
.idata:00415460                 extrn __imp_printf:dword
.idata:00415460                                         ; DATA XREF: printf↑r
.idata:00415464 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00415464                 extrn __imp_realloc:dword
.idata:00415464                                         ; DATA XREF: realloc↑r
.idata:00415468 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00415468                 extrn __imp_setlocale:dword
.idata:00415468                                         ; DATA XREF: setlocale↑r
.idata:0041546C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041546C                 extrn __imp_signal:dword
.idata:0041546C                                         ; DATA XREF: signal↑r
.idata:00415470 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00415470                 extrn __imp_sprintf:dword
.idata:00415470                                         ; DATA XREF: sprintf↑r
.idata:00415474 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00415474                 extrn __imp_sscanf:dword
.idata:00415474                                         ; DATA XREF: sscanf↑r
.idata:00415478 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00415478                 extrn __imp_strcat:dword
.idata:00415478                                         ; DATA XREF: strcat↑r
.idata:0041547C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041547C                 extrn __imp_strchr:dword
.idata:0041547C                                         ; DATA XREF: strchr↑r
.idata:00415480 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00415480                 extrn __imp_strcmp:dword
.idata:00415480                                         ; DATA XREF: strcmp↑r
.idata:00415484 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00415484                 extrn __imp_strcpy:dword
.idata:00415484                                         ; DATA XREF: strcpy↑r
.idata:00415488 ; size_t (__cdecl *strcspn)(const char *Str, const char *Control)
.idata:00415488                 extrn __imp_strcspn:dword
.idata:00415488                                         ; DATA XREF: strcspn↑r
.idata:0041548C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0041548C                 extrn __imp_strerror:dword
.idata:0041548C                                         ; DATA XREF: strerror↑r
.idata:00415490 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00415490                 extrn __imp_strlen:dword
.idata:00415490                                         ; DATA XREF: strlen↑r
.idata:00415494 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00415494                 extrn __imp_strncmp:dword
.idata:00415494                                         ; DATA XREF: strncmp↑r
.idata:00415498 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00415498                 extrn __imp_strncpy:dword
.idata:00415498                                         ; DATA XREF: strncpy↑r
.idata:0041549C ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041549C                 extrn __imp_strpbrk:dword
.idata:0041549C                                         ; DATA XREF: strpbrk↑r
.idata:004154A0 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:004154A0                 extrn __imp_strrchr:dword
.idata:004154A0                                         ; DATA XREF: strrchr↑r
.idata:004154A4 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:004154A4                 extrn __imp_strspn:dword
.idata:004154A4                                         ; DATA XREF: strspn↑r
.idata:004154A8 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:004154A8                 extrn __imp_strstr:dword
.idata:004154A8                                         ; DATA XREF: strstr↑r
.idata:004154AC ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:004154AC                 extrn __imp_strtoul:dword
.idata:004154AC                                         ; DATA XREF: strtoul↑r
.idata:004154B0 ; int (__cdecl *toupper)(int C)
.idata:004154B0                 extrn __imp_toupper:dword
.idata:004154B0                                         ; DATA XREF: toupper↑r
.idata:004154B4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004154B4                 extrn __imp_vfprintf:dword
.idata:004154B4                                         ; DATA XREF: vfprintf↑r
.idata:004154B8
.idata:004154C0 ;
.idata:004154C0 ; Imports from OLE32.dll
.idata:004154C0 ;
.idata:004154C0 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:004154C0                 extrn __imp_CoCreateInstance:dword
.idata:004154C0                                         ; DATA XREF: CoCreateInstance↑r
.idata:004154C4 ; void (__stdcall *CoUninitialize)()
.idata:004154C4                 extrn __imp_CoUninitialize:dword
.idata:004154C4                                         ; DATA XREF: CoUninitialize↑r
.idata:004154C8 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:004154C8                 extrn __imp_OleInitialize:dword
.idata:004154C8                                         ; DATA XREF: OleInitialize↑r
.idata:004154CC
.idata:004154CC
.idata:004154CC
.idata:004154CC                 end start
