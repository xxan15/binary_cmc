.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 9B5059696B537CACD8932EED5915862B5992E43933044E4C9CC70E6693404339
.text:00401000 ; Input MD5    : 089E3EA27739EEF31A4FE00D9C48AEAD
.text:00401000 ; Input CRC32  : 44F39566
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/hostid.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A275 (Wed Apr 20 18:41:57 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004540 (  17728.)
.text:00401000 ; Section size in file          : 00004600 (  17920.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401350+62↓p
.text:00401040                                         ; sub_404A00+48↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_405170
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_405140
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401350
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_405170
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401350+1F↓o
.text:00401280                                         ; sub_401350+B3↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401350+39↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401350+41↓o
.text:004012C3                                         ; sub_401350+4E↓o
.text:004012CD aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401350+6F↓o
.text:004012DA a530            db '5.3.0',0            ; DATA XREF: sub_401350+7F↓o
.text:004012E0 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401350+87↓o
.text:004012EE ; const FILE stru_4012EE
.text:004012EE stru_4012EE     FILE <74736F68h, 65006469h, 61727478h, 65706F20h, 646E6172h, 732520h, \
.text:004012EE                                         ; DATA XREF: sub_401350+8F↓o
.text:004012EE                                         ; sub_401350+DE↓o
.text:004012EE                       90909090h, 90909090h>
.text:0040130E                 db  90h
.text:0040130F                 db  90h
.text:00401310                 db  90h
.text:00401311                 db  90h
.text:00401312                 db  90h
.text:00401313                 db  90h
.text:00401314                 db  90h
.text:00401315                 db  90h
.text:00401316                 db  90h
.text:00401317                 db  90h
.text:00401318                 db  90h
.text:00401319                 db  90h
.text:0040131A                 db  90h
.text:0040131B                 db  90h
.text:0040131C                 db  90h
.text:0040131D                 db  90h
.text:0040131E                 db  90h
.text:0040131F                 db  90h
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_401350:loc_401459↓o
.text:00401320                                         ; sub_4015F0+F↓o
.text:00401347 ; const char Format[]
.text:00401347 Format          db '%lx',0Ah,0          ; DATA XREF: sub_401350+14A↓o
.text:0040134C                 align 10h
.text:00401350
.text:00401350 ; =============== S U B R O U T I N E =======================================
.text:00401350
.text:00401350 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401350
.text:00401350 sub_401350      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401350
.text:00401350 Category        = dword ptr -28h
.text:00401350 Locale          = dword ptr -24h
.text:00401350 var_20          = dword ptr -20h
.text:00401350 var_1C          = byte ptr -1Ch
.text:00401350 var_18          = dword ptr -18h
.text:00401350 var_14          = dword ptr -14h
.text:00401350 var_10          = byte ptr -10h
.text:00401350 var_C           = dword ptr -0Ch
.text:00401350 arg_0           = dword ptr  8
.text:00401350 arg_4           = dword ptr  0Ch
.text:00401350
.text:00401350                 push    ebp
.text:00401351                 xor     eax, eax
.text:00401353                 mov     ebp, esp
.text:00401355                 push    esi
.text:00401356                 push    ebx
.text:00401357                 sub     esp, 20h
.text:0040135A                 mov     ebx, [ebp+arg_4]
.text:0040135D                 and     esp, 0FFFFFFF0h
.text:00401360                 mov     esi, [ebp+arg_0]
.text:00401363                 call    __alloca
.text:00401368                 call    sub_405210
.text:0040136D                 mov     edx, [ebx]
.text:0040136F                 mov     [esp+28h+Locale], offset Locale ; Locale
.text:00401377                 mov     [esp+28h+Category], 0 ; Category
.text:0040137E                 mov     ds:dword_4071A0, edx
.text:00401384                 call    setlocale
.text:00401389                 mov     [esp+28h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401391                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:00401398                 call    ds:__imp_libintl_bindtextdomain
.text:0040139E                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:004013A5                 call    ds:libintl_textdomain
.text:004013AB                 mov     [esp+28h+Category], offset sub_4029D0 ; void (__cdecl *)()
.text:004013B2                 call    sub_401040
.text:004013B7                 mov     [esp+28h+var_C], 0
.text:004013BF                 mov     dword ptr [esp+28h+var_10], offset aJimMeyering ; "Jim Meyering"
.text:004013C7                 mov     [esp+28h+var_14], offset sub_4015F0 ; int
.text:004013CF                 mov     [esp+28h+var_18], offset a530 ; "5.3.0"
.text:004013D7                 mov     dword ptr [esp+28h+var_1C], offset aGnuCoreutils ; "GNU coreutils"
.text:004013DF                 mov     [esp+28h+var_20], offset stru_4012EE ; FILE *
.text:004013E7                 mov     [esp+28h+Locale], ebx ; int
.text:004013EB                 mov     [esp+28h+Category], esi ; int
.text:004013EE                 call    sub_4028E0
.text:004013F3                 mov     [esp+28h+var_18], 0 ; int
.text:004013FB                 mov     dword ptr [esp+28h+var_1C], 0 ; int
.text:00401403                 mov     [esp+28h+var_20], offset Locale ; char *
.text:0040140B                 mov     [esp+28h+Locale], ebx ; int
.text:0040140F                 mov     [esp+28h+Category], esi ; int
.text:00401412                 call    sub_402740
.text:00401417                 inc     eax
.text:00401418                 jnz     short loc_401459
.text:0040141A                 mov     eax, dword_406010
.text:0040141F                 cmp     eax, esi
.text:00401421                 jge     short loc_401491
.text:00401423                 mov     edx, [ebx+eax*4]
.text:00401426                 mov     [esp+28h+Category], edx ; char *
.text:00401429                 call    sub_402710
.text:0040142E                 mov     [esp+28h+Category], (offset stru_4012EE._cnt+3)
.text:00401435                 mov     esi, eax
.text:00401437                 call    ds:libintl_gettext
.text:0040143D                 mov     dword ptr [esp+28h+var_1C], esi ; char
.text:00401441                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:00401449                 mov     [esp+28h+Category], 0 ; Code
.text:00401450                 mov     [esp+28h+var_20], eax ; char *
.text:00401454                 call    sub_4046D0
.text:00401459
.text:00401459 loc_401459:                             ; CODE XREF: sub_401350+C8↑j
.text:00401459                 mov     [esp+28h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401460                 call    ds:libintl_gettext
.text:00401466                 mov     ecx, ds:_iob
.text:0040146C                 mov     ebx, ds:dword_4071A0
.text:00401472                 add     ecx, 40h ; '@'
.text:00401475                 mov     [esp+28h+var_20], ebx
.text:00401479                 mov     [esp+28h+Locale], eax ; Format
.text:0040147D                 mov     [esp+28h+Category], ecx ; Stream
.text:00401480                 call    fprintf
.text:00401485                 mov     [esp+28h+Category], 1 ; Code
.text:0040148C
.text:0040148C loc_40148C:                             ; CODE XREF: sub_401350+15D↓j
.text:0040148C                 call    exit
.text:00401491 ; ---------------------------------------------------------------------------
.text:00401491
.text:00401491 loc_401491:                             ; CODE XREF: sub_401350+D1↑j
.text:00401491                 call    sub_404970
.text:00401496                 mov     [esp+28h+Locale], eax
.text:0040149A                 mov     [esp+28h+Category], offset Format ; "%lx\n"
.text:004014A1                 call    printf
.text:004014A6                 mov     [esp+28h+Category], 0
.text:004014AD                 jmp     short loc_40148C
.text:004014AD sub_401350      endp
.text:004014AD
.text:004014AD ; ---------------------------------------------------------------------------
.text:004014AF                 align 20h
.text:004014C0 aUsageSOrSOptio db 'Usage: %s',0Ah      ; DATA XREF: sub_4015F0:loc_401633↓o
.text:004014C0                 db '  or:  %s OPTION',0Ah
.text:004014C0                 db 'Print the numeric identifier (in hexadecimal) for the current hos'
.text:004014C0                 db 't.',0Ah
.text:004014C0                 db 0Ah,0
.text:00401521                 align 20h
.text:00401540 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401540                                         ; DATA XREF: sub_4015F0+66↓o
.text:0040156D                 align 20h
.text:00401580 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401580                                         ; DATA XREF: sub_4015F0+88↓o
.text:004015B6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4015F0+AA↓o
.text:004015B6                 db 'Report bugs to <%s>.',0Ah,0
.text:004015CD aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004015CD                                         ; DATA XREF: sub_4015F0+B7↓o
.text:004015E3                 align 10h
.text:004015F0
.text:004015F0 ; =============== S U B R O U T I N E =======================================
.text:004015F0
.text:004015F0 ; Attributes: noreturn
.text:004015F0
.text:004015F0 ; void __cdecl __noreturn sub_4015F0(int Code)
.text:004015F0 sub_4015F0      proc near               ; DATA XREF: sub_401350+77↑o
.text:004015F0
.text:004015F0 Stream          = dword ptr -1Ch
.text:004015F0 Format          = dword ptr -18h
.text:004015F0 var_14          = dword ptr -14h
.text:004015F0 var_4           = dword ptr -4
.text:004015F0 Code            = dword ptr  4
.text:004015F0
.text:004015F0                 sub     esp, 1Ch
.text:004015F3                 mov     [esp+1Ch+var_4], ebx
.text:004015F7                 mov     ebx, [esp+1Ch+Code]
.text:004015FB                 test    ebx, ebx
.text:004015FD                 jz      short loc_401633
.text:004015FF                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401606                 call    ds:libintl_gettext
.text:0040160C                 mov     edx, ds:_iob
.text:00401612                 mov     ecx, ds:dword_4071A0
.text:00401618                 add     edx, 40h ; '@'
.text:0040161B                 mov     [esp+1Ch+var_14], ecx
.text:0040161F                 mov     [esp+1Ch+Format], eax ; Format
.text:00401623                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401626                 call    fprintf
.text:0040162B
.text:0040162B loc_40162B:                             ; CODE XREF: sub_4015F0+C7↓j
.text:0040162B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040162E                 call    exit
.text:00401633 ; ---------------------------------------------------------------------------
.text:00401633
.text:00401633 loc_401633:                             ; CODE XREF: sub_4015F0+D↑j
.text:00401633                 mov     [esp+1Ch+Stream], offset aUsageSOrSOptio ; "Usage: %s\n  or:  %s OPTION\nPrint the "...
.text:0040163A                 call    ds:libintl_gettext
.text:00401640                 mov     ecx, ds:dword_4071A0
.text:00401646                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401649                 mov     [esp+1Ch+var_14], ecx
.text:0040164D                 mov     [esp+1Ch+Format], ecx
.text:00401651                 call    printf
.text:00401656                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040165D                 call    ds:libintl_gettext
.text:00401663                 mov     ecx, ds:_iob
.text:00401669                 add     ecx, 20h ; ' '
.text:0040166C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401670                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401673                 call    fputs
.text:00401678                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040167F                 call    ds:libintl_gettext
.text:00401685                 mov     ecx, ds:_iob
.text:0040168B                 add     ecx, 20h ; ' '
.text:0040168E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401692                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401695                 call    fputs
.text:0040169A                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004016A1                 call    ds:libintl_gettext
.text:004016A7                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004016AF                 mov     [esp+1Ch+Stream], eax ; Format
.text:004016B2                 call    printf
.text:004016B7                 jmp     loc_40162B
.text:004016B7 sub_4015F0      endp
.text:004016B7
.text:004016B7 ; ---------------------------------------------------------------------------
.text:004016BC                 align 10h
.text:004016C0 dword_4016C0    dd 90002D2Dh, 7 dup(90909090h)
.text:004016C0                                         ; DATA XREF: sub_401910+E4↓o
.text:004016E0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004016E0                                         ; DATA XREF: sub_401910+2FC↓o
.text:0040170D                 align 20h
.text:00401720 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401720                                         ; DATA XREF: sub_401910:loc_401C72↓o
.text:0040174D                 align 20h
.text:00401760 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401760                                         ; DATA XREF: sub_401910:loc_401D10↓o
.text:00401760                                         ; sub_401910:loc_4020D7↓o
.text:00401786                 align 20h
.text:004017A0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:004017A0                                         ; DATA XREF: sub_401910+48E↓o
.text:004017C0 dword_4017C0    dd 90909000h, 7 dup(90909090h)
.text:004017C0                                         ; DATA XREF: sub_401910:loc_401DE1↓o
.text:004017E0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004017E0                                         ; DATA XREF: sub_401910:loc_401DFA↓o
.text:00401800 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401800                                         ; DATA XREF: sub_401910:loc_401EDF↓o
.text:00401800                                         ; sub_401910:loc_40220C↓o
.text:00401827                 align 20h
.text:00401840 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401840                                         ; DATA XREF: sub_401910:loc_402053↓o
.text:0040186E                 align 20h
.text:00401880 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401880                                         ; DATA XREF: sub_401910:loc_40213F↓o
.text:004018A1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:004018A1                                         ; DATA XREF: sub_401910+93F↓o
.text:004018BB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:004018BB                                         ; DATA XREF: sub_401910:loc_402287↓o
.text:004018D5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:004018D5                                         ; DATA XREF: sub_401910:loc_4022AE↓o
.text:004018F3 ; const char VarName[]
.text:004018F3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401910:loc_402460↓o
.text:00401903                 align 10h
.text:00401910
.text:00401910 ; =============== S U B R O U T I N E =======================================
.text:00401910
.text:00401910
.text:00401910 ; int __cdecl sub_401910(int, int, char *Str, int, int, int, int, int)
.text:00401910 sub_401910      proc near               ; CODE XREF: sub_4024A0+5A↓p
.text:00401910                                         ; .text:0040258A↓p ...
.text:00401910
.text:00401910 Str1            = dword ptr -5Ch
.text:00401910 Str2            = dword ptr -58h
.text:00401910 MaxCount        = dword ptr -54h
.text:00401910 var_50          = dword ptr -50h
.text:00401910 var_4C          = dword ptr -4Ch
.text:00401910 var_3C          = dword ptr -3Ch
.text:00401910 var_38          = dword ptr -38h
.text:00401910 var_34          = dword ptr -34h
.text:00401910 var_30          = dword ptr -30h
.text:00401910 var_2C          = dword ptr -2Ch
.text:00401910 var_28          = dword ptr -28h
.text:00401910 var_24          = dword ptr -24h
.text:00401910 var_20          = dword ptr -20h
.text:00401910 var_1C          = dword ptr -1Ch
.text:00401910 var_18          = dword ptr -18h
.text:00401910 var_14          = dword ptr -14h
.text:00401910 arg_0           = dword ptr  4
.text:00401910 arg_4           = dword ptr  8
.text:00401910 Str             = dword ptr  0Ch
.text:00401910 arg_C           = dword ptr  10h
.text:00401910 arg_10          = dword ptr  14h
.text:00401910 arg_14          = dword ptr  18h
.text:00401910 arg_18          = dword ptr  1Ch
.text:00401910 arg_1C          = dword ptr  20h
.text:00401910
.text:00401910                 push    ebp
.text:00401911                 mov     eax, 0FFFFFFFFh
.text:00401916                 push    edi
.text:00401917                 push    esi
.text:00401918                 push    ebx
.text:00401919                 sub     esp, 4Ch
.text:0040191C                 mov     esi, [esp+5Ch+Str]
.text:00401920                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401924                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401927                 mov     ebx, [ebp+4]
.text:0040192A                 setz    dl
.text:0040192D                 movzx   ecx, dl
.text:00401930                 dec     ecx
.text:00401931                 and     ecx, ebx
.text:00401933                 mov     [esp+5Ch+var_14], ecx
.text:00401937                 mov     ecx, [esp+5Ch+arg_0]
.text:0040193B                 test    ecx, ecx
.text:0040193D                 jle     loc_401A67
.text:00401943                 mov     dword ptr [ebp+0Ch], 0
.text:0040194A                 mov     ebx, [ebp+0]
.text:0040194D                 test    ebx, ebx
.text:0040194F                 jz      loc_402480
.text:00401955                 mov     edi, [ebp+10h]
.text:00401958                 test    edi, edi
.text:0040195A                 jnz     short loc_4019B3
.text:0040195C                 lea     esi, [esi+0]
.text:00401960
.text:00401960 loc_401960:                             ; CODE XREF: sub_401910+B7C↓j
.text:00401960                 mov     [ebp+24h], ebx
.text:00401963                 mov     esi, [esp+5Ch+Str]
.text:00401967                 mov     [ebp+20h], ebx
.text:0040196A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040196E                 xor     ebx, ebx
.text:00401970                 mov     dword ptr [ebp+14h], 0
.text:00401977                 test    ecx, ecx
.text:00401979                 jz      loc_402460
.text:0040197F
.text:0040197F loc_40197F:                             ; CODE XREF: sub_401910+B64↓j
.text:0040197F                 mov     ebx, 1
.text:00401984
.text:00401984 loc_401984:                             ; CODE XREF: sub_401910+B5E↓j
.text:00401984                 mov     [ebp+1Ch], ebx
.text:00401987                 mov     ecx, [esp+5Ch+Str]
.text:0040198B                 movzx   eax, byte ptr [ecx]
.text:0040198E                 cmp     al, 2Dh ; '-'
.text:00401990                 jz      loc_402450
.text:00401996                 cmp     al, 2Bh ; '+'
.text:00401998                 jz      loc_402439
.text:0040199E                 xor     edx, edx
.text:004019A0                 test    ebx, ebx
.text:004019A2                 setz    dl
.text:004019A5                 mov     [ebp+18h], edx
.text:004019A8
.text:004019A8 loc_4019A8:                             ; CODE XREF: sub_401910+B35↓j
.text:004019A8                 mov     [esp+5Ch+Str], esi
.text:004019AC                 mov     dword ptr [ebp+10h], 1
.text:004019B3
.text:004019B3 loc_4019B3:                             ; CODE XREF: sub_401910+4A↑j
.text:004019B3                 mov     eax, [ebp+14h]
.text:004019B6                 test    eax, eax
.text:004019B8                 jz      short loc_4019C3
.text:004019BA                 cmp     byte ptr [eax], 0
.text:004019BD                 jnz     loc_401AA0
.text:004019C3
.text:004019C3 loc_4019C3:                             ; CODE XREF: sub_401910+A8↑j
.text:004019C3                 mov     ebx, [ebp+0]
.text:004019C6                 cmp     [ebp+24h], ebx
.text:004019C9                 jle     short loc_4019CE
.text:004019CB                 mov     [ebp+24h], ebx
.text:004019CE
.text:004019CE loc_4019CE:                             ; CODE XREF: sub_401910+B9↑j
.text:004019CE                 cmp     [ebp+20h], ebx
.text:004019D1                 jle     short loc_4019D6
.text:004019D3                 mov     [ebp+20h], ebx
.text:004019D6
.text:004019D6 loc_4019D6:                             ; CODE XREF: sub_401910+C1↑j
.text:004019D6                 cmp     dword ptr [ebp+18h], 1
.text:004019DA                 jz      loc_4023B0
.text:004019E0
.text:004019E0 loc_4019E0:                             ; CODE XREF: sub_401910+B13↓j
.text:004019E0                 cmp     ebx, [esp+5Ch+arg_0]
.text:004019E4                 jz      loc_402394
.text:004019EA                 cld
.text:004019EB                 mov     ecx, [esp+5Ch+arg_4]
.text:004019EF                 mov     edx, 3
.text:004019F4                 mov     edi, offset dword_4016C0
.text:004019F9                 mov     esi, [ecx+ebx*4]
.text:004019FC                 mov     ecx, edx
.text:004019FE                 repe cmpsb
.text:00401A00                 jnz     short loc_401A3C
.text:00401A02                 mov     edx, [ebp+24h]
.text:00401A05                 lea     eax, [ebx+1]
.text:00401A08                 cmp     [ebp+20h], edx
.text:00401A0B                 mov     [ebp+0], eax
.text:00401A0E                 jz      loc_4023A8
.text:00401A14                 cmp     edx, eax
.text:00401A16                 jz      short loc_401A30
.text:00401A18                 mov     [esp+5Ch+Str2], ebp
.text:00401A1C                 mov     ebx, [esp+5Ch+arg_4]
.text:00401A20                 mov     [esp+5Ch+Str1], ebx
.text:00401A23                 call    sub_4025C0
.text:00401A28                 nop
.text:00401A29                 lea     esi, [esi+0]
.text:00401A30
.text:00401A30 loc_401A30:                             ; CODE XREF: sub_401910+106↑j
.text:00401A30                                         ; sub_401910+A9B↓j
.text:00401A30                 mov     eax, [esp+5Ch+arg_0]
.text:00401A34                 mov     ebx, eax
.text:00401A36                 mov     [ebp+24h], eax
.text:00401A39                 mov     [ebp+0], eax
.text:00401A3C
.text:00401A3C loc_401A3C:                             ; CODE XREF: sub_401910+F0↑j
.text:00401A3C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401A40                 jz      loc_402394
.text:00401A46                 mov     esi, [esp+5Ch+arg_4]
.text:00401A4A                 mov     eax, [esi+ebx*4]
.text:00401A4D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401A50                 jz      short loc_401A77
.text:00401A52
.text:00401A52 loc_401A52:                             ; CODE XREF: sub_401910+16D↓j
.text:00401A52                 mov     edx, [ebp+18h]
.text:00401A55                 test    edx, edx
.text:00401A57                 jz      short loc_401A70
.text:00401A59                 mov     [ebp+0Ch], eax
.text:00401A5C                 lea     edi, [ebx+1]
.text:00401A5F                 mov     eax, 1
.text:00401A64                 mov     [ebp+0], edi
.text:00401A67
.text:00401A67 loc_401A67:                             ; CODE XREF: sub_401910+2D↑j
.text:00401A67                                         ; sub_401910+165↓j ...
.text:00401A67                 add     esp, 4Ch
.text:00401A6A                 pop     ebx
.text:00401A6B                 pop     esi
.text:00401A6C                 pop     edi
.text:00401A6D                 pop     ebp
.text:00401A6E                 retn
.text:00401A6E ; ---------------------------------------------------------------------------
.text:00401A6F                 align 10h
.text:00401A70
.text:00401A70 loc_401A70:                             ; CODE XREF: sub_401910+147↑j
.text:00401A70                                         ; sub_401910+A8A↓j ...
.text:00401A70                 mov     eax, 0FFFFFFFFh
.text:00401A75                 jmp     short loc_401A67
.text:00401A77 ; ---------------------------------------------------------------------------
.text:00401A77
.text:00401A77 loc_401A77:                             ; CODE XREF: sub_401910+140↑j
.text:00401A77                 movzx   edx, byte ptr [eax+1]
.text:00401A7B                 test    dl, dl
.text:00401A7D                 jz      short loc_401A52
.text:00401A7F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401A83                 xor     ecx, ecx
.text:00401A85                 test    ebx, ebx
.text:00401A87                 jz      short loc_401A92
.text:00401A89                 cmp     dl, 2Dh ; '-'
.text:00401A8C                 jz      loc_40238A
.text:00401A92
.text:00401A92 loc_401A92:                             ; CODE XREF: sub_401910+177↑j
.text:00401A92                                         ; sub_401910+A7F↓j
.text:00401A92                 lea     esi, [ecx+eax+1]
.text:00401A96                 mov     [ebp+14h], esi
.text:00401A99                 lea     esi, [esi+0]
.text:00401AA0
.text:00401AA0 loc_401AA0:                             ; CODE XREF: sub_401910+AD↑j
.text:00401AA0                 mov     ecx, [esp+5Ch+arg_C]
.text:00401AA4                 test    ecx, ecx
.text:00401AA6                 jz      loc_401E30
.text:00401AAC                 mov     edx, [ebp+0]
.text:00401AAF                 mov     edi, [esp+5Ch+arg_4]
.text:00401AB3                 mov     eax, [edi+edx*4]
.text:00401AB6                 movzx   edx, byte ptr [eax+1]
.text:00401ABA                 cmp     dl, 2Dh ; '-'
.text:00401ABD                 jz      short loc_401AD5
.text:00401ABF                 mov     ebx, [esp+5Ch+arg_14]
.text:00401AC3                 test    ebx, ebx
.text:00401AC5                 jz      loc_401E30
.text:00401ACB                 cmp     byte ptr [eax+2], 0
.text:00401ACF                 jz      loc_40236A
.text:00401AD5
.text:00401AD5 loc_401AD5:                             ; CODE XREF: sub_401910+1AD↑j
.text:00401AD5                                         ; sub_401910+A75↓j
.text:00401AD5                 mov     [esp+5Ch+var_18], 0
.text:00401ADD                 mov     ecx, [ebp+14h]
.text:00401AE0                 mov     [esp+5Ch+var_1C], 0
.text:00401AE8                 mov     [esp+5Ch+var_20], 0
.text:00401AF0                 mov     edi, ecx
.text:00401AF2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401AFA                 movzx   eax, byte ptr [ecx]
.text:00401AFD                 test    al, al
.text:00401AFF                 jz      short loc_401B1C
.text:00401B01                 cmp     al, 3Dh ; '='
.text:00401B03                 jz      short loc_401B1C
.text:00401B05                 lea     esi, [esi+0]
.text:00401B09                 lea     edi, [edi+0]
.text:00401B10
.text:00401B10 loc_401B10:                             ; CODE XREF: sub_401910+20A↓j
.text:00401B10                 inc     edi
.text:00401B11                 movzx   eax, byte ptr [edi]
.text:00401B14                 test    al, al
.text:00401B16                 jz      short loc_401B1C
.text:00401B18                 cmp     al, 3Dh ; '='
.text:00401B1A                 jnz     short loc_401B10
.text:00401B1C
.text:00401B1C loc_401B1C:                             ; CODE XREF: sub_401910+1EF↑j
.text:00401B1C                                         ; sub_401910+1F3↑j ...
.text:00401B1C                 mov     [esp+5Ch+var_28], 0
.text:00401B24                 mov     esi, [esp+5Ch+arg_C]
.text:00401B28                 mov     ebx, [esi]
.text:00401B2A                 test    ebx, ebx
.text:00401B2C                 mov     edx, ebx
.text:00401B2E                 jz      loc_401D50
.text:00401B34                 lea     esi, [esi+0]
.text:00401B3A                 lea     edi, [edi+0]
.text:00401B40
.text:00401B40 loc_401B40:                             ; CODE XREF: sub_401910+25E↓j
.text:00401B40                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401B44                 mov     ebx, edi
.text:00401B46                 sub     ebx, ecx
.text:00401B48                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401B4C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401B4F                 call    strncmp
.text:00401B54                 test    eax, eax
.text:00401B56                 jz      loc_4022E6
.text:00401B5C
.text:00401B5C loc_401B5C:                             ; CODE XREF: sub_401910+A0F↓j
.text:00401B5C                                         ; sub_401910+A24↓j ...
.text:00401B5C                 inc     [esp+5Ch+var_28]
.text:00401B60                 add     esi, 10h
.text:00401B63                 mov     ecx, [esi]
.text:00401B65                 test    ecx, ecx
.text:00401B67                 mov     edx, ecx
.text:00401B69                 jz      short loc_401B70
.text:00401B6B                 mov     ecx, [ebp+14h]
.text:00401B6E                 jmp     short loc_401B40
.text:00401B70 ; ---------------------------------------------------------------------------
.text:00401B70
.text:00401B70 loc_401B70:                             ; CODE XREF: sub_401910+259↑j
.text:00401B70                                         ; sub_401910+A55↓j
.text:00401B70                 mov     esi, [esp+5Ch+var_20]
.text:00401B74                 test    esi, esi
.text:00401B76                 jz      short loc_401B84
.text:00401B78                 mov     edx, [esp+5Ch+var_1C]
.text:00401B7C                 test    edx, edx
.text:00401B7E                 jz      loc_402290
.text:00401B84
.text:00401B84 loc_401B84:                             ; CODE XREF: sub_401910+266↑j
.text:00401B84                 mov     eax, [esp+5Ch+var_18]
.text:00401B88                 test    eax, eax
.text:00401B8A                 jz      loc_401D50
.text:00401B90                 mov     ecx, [ebp+0]
.text:00401B93                 lea     eax, [ecx+1]
.text:00401B96                 mov     [ebp+0], eax
.text:00401B99                 cmp     byte ptr [edi], 0
.text:00401B9C                 jz      loc_401CB0
.text:00401BA2                 mov     ecx, [esp+5Ch+var_18]
.text:00401BA6                 mov     esi, [ecx+4]
.text:00401BA9                 test    esi, esi
.text:00401BAB                 jz      short loc_401BF6
.text:00401BAD                 lea     ebx, [edi+1]
.text:00401BB0                 mov     [ebp+0Ch], ebx
.text:00401BB3
.text:00401BB3 loc_401BB3:                             ; CODE XREF: sub_401910+3A8↓j
.text:00401BB3                                         ; sub_401910+3C4↓j
.text:00401BB3                 mov     ebx, [ebp+14h]
.text:00401BB6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401BB9                 call    strlen
.text:00401BBE                 add     [ebp+14h], eax
.text:00401BC1                 mov     esi, [esp+5Ch+arg_10]
.text:00401BC5                 test    esi, esi
.text:00401BC7                 jz      short loc_401BD3
.text:00401BC9                 mov     ebp, [esp+5Ch+var_24]
.text:00401BCD                 mov     ecx, [esp+5Ch+arg_10]
.text:00401BD1                 mov     [ecx], ebp
.text:00401BD3
.text:00401BD3 loc_401BD3:                             ; CODE XREF: sub_401910+2B7↑j
.text:00401BD3                 mov     eax, [esp+5Ch+var_18]
.text:00401BD7                 mov     ecx, [eax+8]
.text:00401BDA                 test    ecx, ecx
.text:00401BDC                 jnz     short loc_401BEA
.text:00401BDE                 mov     ecx, [esp+5Ch+var_18]
.text:00401BE2
.text:00401BE2 loc_401BE2:                             ; CODE XREF: sub_401910+723↓j
.text:00401BE2                 mov     eax, [ecx+0Ch]
.text:00401BE5                 jmp     loc_401A67
.text:00401BEA ; ---------------------------------------------------------------------------
.text:00401BEA
.text:00401BEA loc_401BEA:                             ; CODE XREF: sub_401910+2CC↑j
.text:00401BEA                                         ; sub_401910+719↓j
.text:00401BEA                 mov     esi, [eax+0Ch]
.text:00401BED                 xor     eax, eax
.text:00401BEF                 mov     [ecx], esi
.text:00401BF1                 jmp     loc_401A67
.text:00401BF6 ; ---------------------------------------------------------------------------
.text:00401BF6
.text:00401BF6 loc_401BF6:                             ; CODE XREF: sub_401910+29B↑j
.text:00401BF6                 mov     edi, [esp+5Ch+var_14]
.text:00401BFA                 test    edi, edi
.text:00401BFC                 jz      short loc_401C50
.text:00401BFE                 mov     esi, [esp+5Ch+arg_4]
.text:00401C02                 mov     edx, [esi+eax*4-4]
.text:00401C06                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401C0A                 jz      short loc_401C72
.text:00401C0C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401C13                 call    ds:libintl_gettext
.text:00401C19                 mov     edx, [esp+5Ch+var_18]
.text:00401C1D                 mov     edi, [edx]
.text:00401C1F                 mov     [esp+5Ch+var_4C], edi
.text:00401C23                 mov     ebx, [ebp+0]
.text:00401C26                 mov     edi, [esp+5Ch+arg_4]
.text:00401C2A                 mov     ecx, [edi+ebx*4-4]
.text:00401C2E                 movsx   esi, byte ptr [ecx]
.text:00401C31                 mov     ecx, ds:_iob
.text:00401C37                 add     ecx, 40h ; '@'
.text:00401C3A                 mov     [esp+5Ch+var_50], esi
.text:00401C3E                 mov     ebx, [edi]
.text:00401C40                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401C44                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401C47                 mov     [esp+5Ch+MaxCount], ebx
.text:00401C4B                 call    fprintf
.text:00401C50
.text:00401C50 loc_401C50:                             ; CODE XREF: sub_401910+2EC↑j
.text:00401C50                                         ; sub_401910+398↓j
.text:00401C50                 mov     ecx, [ebp+14h]
.text:00401C53                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401C56                 call    strlen
.text:00401C5B                 add     [ebp+14h], eax
.text:00401C5E                 mov     eax, [esp+5Ch+var_18]
.text:00401C62                 mov     esi, [eax+0Ch]
.text:00401C65                 mov     [ebp+8], esi
.text:00401C68
.text:00401C68 loc_401C68:                             ; CODE XREF: sub_401910+4E5↓j
.text:00401C68                                         ; sub_401910+73E↓j ...
.text:00401C68                 mov     eax, 3Fh ; '?'
.text:00401C6D                 jmp     loc_401A67
.text:00401C72 ; ---------------------------------------------------------------------------
.text:00401C72
.text:00401C72 loc_401C72:                             ; CODE XREF: sub_401910+2FA↑j
.text:00401C72                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401C79                 call    ds:libintl_gettext
.text:00401C7F                 mov     edx, [esp+5Ch+var_18]
.text:00401C83                 mov     edi, [esp+5Ch+arg_4]
.text:00401C87                 mov     ecx, ds:_iob
.text:00401C8D                 mov     esi, [edx]
.text:00401C8F                 add     ecx, 40h ; '@'
.text:00401C92                 mov     [esp+5Ch+var_50], esi
.text:00401C96                 mov     ebx, [edi]
.text:00401C98                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401C9C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401C9F                 mov     [esp+5Ch+MaxCount], ebx
.text:00401CA3                 call    fprintf
.text:00401CA8                 jmp     short loc_401C50
.text:00401CA8 ; ---------------------------------------------------------------------------
.text:00401CAA                 align 10h
.text:00401CB0
.text:00401CB0 loc_401CB0:                             ; CODE XREF: sub_401910+28C↑j
.text:00401CB0                 mov     ebx, [esp+5Ch+var_18]
.text:00401CB4                 cmp     dword ptr [ebx+4], 1
.text:00401CB8                 jnz     loc_401BB3
.text:00401CBE                 cmp     eax, [esp+5Ch+arg_0]
.text:00401CC2                 jge     short loc_401CD9
.text:00401CC4                 mov     ebx, [esp+5Ch+arg_4]
.text:00401CC8                 lea     edi, [ecx+2]
.text:00401CCB                 mov     [ebp+0], edi
.text:00401CCE                 mov     esi, [ebx+eax*4]
.text:00401CD1                 mov     [ebp+0Ch], esi
.text:00401CD4                 jmp     loc_401BB3
.text:00401CD9 ; ---------------------------------------------------------------------------
.text:00401CD9
.text:00401CD9 loc_401CD9:                             ; CODE XREF: sub_401910+3B2↑j
.text:00401CD9                 mov     edx, [esp+5Ch+var_14]
.text:00401CDD                 test    edx, edx
.text:00401CDF                 jnz     short loc_401D10
.text:00401CE1
.text:00401CE1 loc_401CE1:                             ; CODE XREF: sub_401910+437↓j
.text:00401CE1                 mov     edx, [ebp+14h]
.text:00401CE4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401CE7                 call    strlen
.text:00401CEC                 add     [ebp+14h], eax
.text:00401CEF                 mov     eax, [esp+5Ch+var_18]
.text:00401CF3                 mov     edi, [eax+0Ch]
.text:00401CF6                 mov     [ebp+8], edi
.text:00401CF9
.text:00401CF9 loc_401CF9:                             ; CODE XREF: sub_401910+7C2↓j
.text:00401CF9                 mov     ebp, [esp+5Ch+Str]
.text:00401CFD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401D01                 setnz   bl
.text:00401D04                 movzx   esi, bl
.text:00401D07                 lea     eax, [esi+esi*4+3Ah]
.text:00401D0B                 jmp     loc_401A67
.text:00401D10 ; ---------------------------------------------------------------------------
.text:00401D10
.text:00401D10 loc_401D10:                             ; CODE XREF: sub_401910+3CF↑j
.text:00401D10                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401D17                 call    ds:libintl_gettext
.text:00401D1D                 mov     ecx, [ebp+0]
.text:00401D20                 mov     esi, [esp+5Ch+arg_4]
.text:00401D24                 mov     ebx, [esi+ecx*4-4]
.text:00401D28                 mov     ecx, ds:_iob
.text:00401D2E                 mov     [esp+5Ch+var_50], ebx
.text:00401D32                 mov     edi, [esi]
.text:00401D34                 add     ecx, 40h ; '@'
.text:00401D37                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D3B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D3E                 mov     [esp+5Ch+MaxCount], edi
.text:00401D42                 call    fprintf
.text:00401D47                 jmp     short loc_401CE1
.text:00401D47 ; ---------------------------------------------------------------------------
.text:00401D49                 align 10h
.text:00401D50
.text:00401D50 loc_401D50:                             ; CODE XREF: sub_401910+21E↑j
.text:00401D50                                         ; sub_401910+27A↑j
.text:00401D50                 mov     eax, [esp+5Ch+arg_14]
.text:00401D54                 test    eax, eax
.text:00401D56                 jz      short loc_401D86
.text:00401D58                 mov     ebx, [ebp+0]
.text:00401D5B                 mov     esi, [esp+5Ch+arg_4]
.text:00401D5F                 mov     edi, [esi+ebx*4]
.text:00401D62                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401D66                 jz      short loc_401D89
.text:00401D68                 mov     ecx, [ebp+14h]
.text:00401D6B                 mov     edx, [esp+5Ch+Str]
.text:00401D6F                 movsx   ebx, byte ptr [ecx]
.text:00401D72                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401D75                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401D79                 call    strchr
.text:00401D7E                 test    eax, eax
.text:00401D80                 jnz     loc_401E30
.text:00401D86
.text:00401D86 loc_401D86:                             ; CODE XREF: sub_401910+446↑j
.text:00401D86                 mov     ebx, [ebp+0]
.text:00401D89
.text:00401D89 loc_401D89:                             ; CODE XREF: sub_401910+456↑j
.text:00401D89                 mov     eax, [esp+5Ch+var_14]
.text:00401D8D                 test    eax, eax
.text:00401D8F                 jz      short loc_401DE1
.text:00401D91                 mov     esi, [esp+5Ch+arg_4]
.text:00401D95                 mov     edi, [esi+ebx*4]
.text:00401D98                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401D9C                 jz      short loc_401DFA
.text:00401D9E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401DA5                 call    ds:libintl_gettext
.text:00401DAB                 mov     edi, [ebp+14h]
.text:00401DAE                 mov     [esp+5Ch+var_4C], edi
.text:00401DB2                 mov     ebx, [ebp+0]
.text:00401DB5                 mov     edi, [esp+5Ch+arg_4]
.text:00401DB9                 mov     esi, [edi+ebx*4]
.text:00401DBC                 movsx   ecx, byte ptr [esi]
.text:00401DBF                 mov     esi, ds:_iob
.text:00401DC5                 add     esi, 40h ; '@'
.text:00401DC8                 mov     [esp+5Ch+var_50], ecx
.text:00401DCC                 mov     ebx, [edi]
.text:00401DCE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401DD2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401DD5                 mov     [esp+5Ch+MaxCount], ebx
.text:00401DD9                 call    fprintf
.text:00401DDE
.text:00401DDE loc_401DDE:                             ; CODE XREF: sub_401910+51D↓j
.text:00401DDE                 mov     ebx, [ebp+0]
.text:00401DE1
.text:00401DE1 loc_401DE1:                             ; CODE XREF: sub_401910+47F↑j
.text:00401DE1                 mov     dword ptr [ebp+14h], offset dword_4017C0
.text:00401DE8                 lea     edx, [ebx+1]
.text:00401DEB                 mov     [ebp+0], edx
.text:00401DEE
.text:00401DEE loc_401DEE:                             ; CODE XREF: sub_401910+999↓j
.text:00401DEE                 mov     dword ptr [ebp+8], 0
.text:00401DF5                 jmp     loc_401C68
.text:00401DFA ; ---------------------------------------------------------------------------
.text:00401DFA
.text:00401DFA loc_401DFA:                             ; CODE XREF: sub_401910+48C↑j
.text:00401DFA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00401E01                 call    ds:libintl_gettext
.text:00401E07                 mov     ecx, [ebp+14h]
.text:00401E0A                 mov     edi, [esp+5Ch+arg_4]
.text:00401E0E                 mov     edx, ds:_iob
.text:00401E14                 mov     [esp+5Ch+var_50], ecx
.text:00401E18                 mov     ebx, [edi]
.text:00401E1A                 add     edx, 40h ; '@'
.text:00401E1D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E21                 mov     [esp+5Ch+MaxCount], ebx
.text:00401E25                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401E28                 call    fprintf
.text:00401E2D                 jmp     short loc_401DDE
.text:00401E2D ; ---------------------------------------------------------------------------
.text:00401E2F                 align 10h
.text:00401E30
.text:00401E30 loc_401E30:                             ; CODE XREF: sub_401910+196↑j
.text:00401E30                                         ; sub_401910+1B5↑j ...
.text:00401E30                 mov     esi, [ebp+14h]
.text:00401E33                 movzx   ebx, byte ptr [esi]
.text:00401E36                 inc     esi
.text:00401E37                 mov     [ebp+14h], esi
.text:00401E3A                 mov     ecx, [esp+5Ch+Str]
.text:00401E3E                 movsx   esi, bl
.text:00401E41                 mov     [esp+5Ch+Str2], esi ; Val
.text:00401E45                 mov     edi, esi
.text:00401E47                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401E4A                 call    strchr
.text:00401E4F                 mov     ecx, [ebp+14h]
.text:00401E52                 cmp     byte ptr [ecx], 0
.text:00401E55                 jnz     short loc_401E5A
.text:00401E57                 inc     dword ptr [ebp+0]
.text:00401E5A
.text:00401E5A loc_401E5A:                             ; CODE XREF: sub_401910+545↑j
.text:00401E5A                 test    eax, eax
.text:00401E5C                 jz      loc_402240
.text:00401E62                 cmp     bl, 3Ah ; ':'
.text:00401E65                 jz      loc_402240
.text:00401E6B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00401E6E                 jz      loc_401F26
.text:00401E74                 movzx   edx, byte ptr [eax+1]
.text:00401E78
.text:00401E78 loc_401E78:                             ; CODE XREF: sub_401910+61D↓j
.text:00401E78                 cmp     dl, 3Ah ; ':'
.text:00401E7B                 jz      short loc_401E84
.text:00401E7D
.text:00401E7D loc_401E7D:                             ; CODE XREF: sub_401910+590↓j
.text:00401E7D                 mov     eax, esi
.text:00401E7F                 jmp     loc_401A67
.text:00401E84 ; ---------------------------------------------------------------------------
.text:00401E84
.text:00401E84 loc_401E84:                             ; CODE XREF: sub_401910+56B↑j
.text:00401E84                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00401E88                 jz      loc_401F11
.text:00401E8E                 cmp     byte ptr [ecx], 0
.text:00401E91                 jz      short loc_401EA2
.text:00401E93
.text:00401E93 loc_401E93:                             ; CODE XREF: sub_401910+604↓j
.text:00401E93                 inc     dword ptr [ebp+0]
.text:00401E96                 mov     [ebp+0Ch], ecx
.text:00401E99
.text:00401E99 loc_401E99:                             ; CODE XREF: sub_401910+5AB↓j
.text:00401E99                                         ; sub_401910+5C6↓j ...
.text:00401E99                 mov     dword ptr [ebp+14h], 0
.text:00401EA0                 jmp     short loc_401E7D
.text:00401EA2 ; ---------------------------------------------------------------------------
.text:00401EA2
.text:00401EA2 loc_401EA2:                             ; CODE XREF: sub_401910+581↑j
.text:00401EA2                 mov     ecx, [ebp+0]
.text:00401EA5                 cmp     ecx, [esp+5Ch+arg_0]
.text:00401EA9                 jz      short loc_401EBD
.text:00401EAB                 mov     eax, [esp+5Ch+arg_4]
.text:00401EAF                 lea     edx, [ecx+1]
.text:00401EB2                 mov     [ebp+0], edx
.text:00401EB5                 mov     ebx, [eax+ecx*4]
.text:00401EB8                 mov     [ebp+0Ch], ebx
.text:00401EBB                 jmp     short loc_401E99
.text:00401EBD ; ---------------------------------------------------------------------------
.text:00401EBD
.text:00401EBD loc_401EBD:                             ; CODE XREF: sub_401910+599↑j
.text:00401EBD                 mov     ecx, [esp+5Ch+var_14]
.text:00401EC1                 test    ecx, ecx
.text:00401EC3                 jnz     short loc_401EDF
.text:00401EC5
.text:00401EC5 loc_401EC5:                             ; CODE XREF: sub_401910+5FF↓j
.text:00401EC5                 mov     [ebp+8], edi
.text:00401EC8                 mov     edi, [esp+5Ch+Str]
.text:00401ECC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00401ECF                 jz      short loc_401ED8
.text:00401ED1                 mov     esi, 3Fh ; '?'
.text:00401ED6                 jmp     short loc_401E99
.text:00401ED8 ; ---------------------------------------------------------------------------
.text:00401ED8
.text:00401ED8 loc_401ED8:                             ; CODE XREF: sub_401910+5BF↑j
.text:00401ED8                 mov     esi, 3Ah ; ':'
.text:00401EDD                 jmp     short loc_401E99
.text:00401EDF ; ---------------------------------------------------------------------------
.text:00401EDF
.text:00401EDF loc_401EDF:                             ; CODE XREF: sub_401910+5B3↑j
.text:00401EDF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00401EE6                 call    ds:libintl_gettext
.text:00401EEC                 mov     [esp+5Ch+var_50], edi
.text:00401EF0                 mov     ebx, [esp+5Ch+arg_4]
.text:00401EF4                 mov     edx, ds:_iob
.text:00401EFA                 mov     esi, [ebx]
.text:00401EFC                 add     edx, 40h ; '@'
.text:00401EFF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401F03                 mov     [esp+5Ch+MaxCount], esi
.text:00401F07                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401F0A                 call    fprintf
.text:00401F0F                 jmp     short loc_401EC5
.text:00401F11 ; ---------------------------------------------------------------------------
.text:00401F11
.text:00401F11 loc_401F11:                             ; CODE XREF: sub_401910+578↑j
.text:00401F11                 cmp     byte ptr [ecx], 0
.text:00401F14                 jnz     loc_401E93
.text:00401F1A                 mov     dword ptr [ebp+0Ch], 0
.text:00401F21                 jmp     loc_401E99
.text:00401F26 ; ---------------------------------------------------------------------------
.text:00401F26
.text:00401F26 loc_401F26:                             ; CODE XREF: sub_401910+55E↑j
.text:00401F26                 movzx   edx, byte ptr [eax+1]
.text:00401F2A                 cmp     dl, 3Bh ; ';'
.text:00401F2D                 jnz     loc_401E78
.text:00401F33                 mov     [esp+5Ch+var_2C], 0
.text:00401F3B                 mov     [esp+5Ch+var_30], 0
.text:00401F43                 mov     [esp+5Ch+var_34], 0
.text:00401F4B                 mov     [esp+5Ch+var_38], 0
.text:00401F53                 cmp     byte ptr [ecx], 0
.text:00401F56                 jz      loc_4021CB
.text:00401F5C                 inc     dword ptr [ebp+0]
.text:00401F5F                 mov     [ebp+0Ch], ecx
.text:00401F62
.text:00401F62 loc_401F62:                             ; CODE XREF: sub_401910+8D4↓j
.text:00401F62                 mov     edi, [ebp+0Ch]
.text:00401F65                 mov     [ebp+14h], edi
.text:00401F68                 movzx   eax, byte ptr [edi]
.text:00401F6B                 test    al, al
.text:00401F6D                 jz      short loc_401F7F
.text:00401F6F                 cmp     al, 3Dh ; '='
.text:00401F71                 jz      short loc_401F7F
.text:00401F73
.text:00401F73 loc_401F73:                             ; CODE XREF: sub_401910+66D↓j
.text:00401F73                 inc     edi
.text:00401F74                 movzx   eax, byte ptr [edi]
.text:00401F77                 test    al, al
.text:00401F79                 jz      short loc_401F7F
.text:00401F7B                 cmp     al, 3Dh ; '='
.text:00401F7D                 jnz     short loc_401F73
.text:00401F7F
.text:00401F7F loc_401F7F:                             ; CODE XREF: sub_401910+65D↑j
.text:00401F7F                                         ; sub_401910+661↑j ...
.text:00401F7F                 mov     [esp+5Ch+var_3C], 0
.text:00401F87                 mov     esi, [esp+5Ch+arg_C]
.text:00401F8B                 mov     eax, [esi]
.text:00401F8D                 test    eax, eax
.text:00401F8F                 jz      loc_402110
.text:00401F95                 mov     ecx, eax
.text:00401F97
.text:00401F97 loc_401F97:                             ; CODE XREF: sub_401910+6B3↓j
.text:00401F97                 mov     ebx, [ebp+14h]
.text:00401F9A                 mov     eax, edi
.text:00401F9C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00401F9F                 sub     eax, ebx
.text:00401FA1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00401FA5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00401FA9                 call    strncmp
.text:00401FAE                 test    eax, eax
.text:00401FB0                 jz      loc_402177
.text:00401FB6
.text:00401FB6 loc_401FB6:                             ; CODE XREF: sub_401910+88C↓j
.text:00401FB6                                         ; sub_401910+89D↓j
.text:00401FB6                 inc     [esp+5Ch+var_3C]
.text:00401FBA                 add     esi, 10h
.text:00401FBD                 mov     edx, [esi]
.text:00401FBF                 test    edx, edx
.text:00401FC1                 mov     ecx, edx
.text:00401FC3                 jnz     short loc_401F97
.text:00401FC5
.text:00401FC5 loc_401FC5:                             ; CODE XREF: sub_401910+8B6↓j
.text:00401FC5                 mov     esi, [esp+5Ch+var_34]
.text:00401FC9                 test    esi, esi
.text:00401FCB                 jz      short loc_401FD9
.text:00401FCD                 mov     ebx, [esp+5Ch+var_30]
.text:00401FD1                 test    ebx, ebx
.text:00401FD3                 jz      loc_402121
.text:00401FD9
.text:00401FD9 loc_401FD9:                             ; CODE XREF: sub_401910+6BB↑j
.text:00401FD9                 mov     esi, [esp+5Ch+var_2C]
.text:00401FDD                 test    esi, esi
.text:00401FDF                 jz      loc_402110
.text:00401FE5                 cmp     byte ptr [edi], 0
.text:00401FE8                 jz      loc_402090
.text:00401FEE                 mov     ecx, [esp+5Ch+var_2C]
.text:00401FF2                 mov     ebx, [ecx+4]
.text:00401FF5                 test    ebx, ebx
.text:00401FF7                 jz      short loc_402038
.text:00401FF9                 lea     edx, [edi+1]
.text:00401FFC                 mov     [ebp+0Ch], edx
.text:00401FFF
.text:00401FFF loc_401FFF:                             ; CODE XREF: sub_401910+788↓j
.text:00401FFF                                         ; sub_401910+7A7↓j
.text:00401FFF                 mov     edi, [ebp+14h]
.text:00402002                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402005                 call    strlen
.text:0040200A                 add     [ebp+14h], eax
.text:0040200D                 mov     eax, [esp+5Ch+arg_10]
.text:00402011                 test    eax, eax
.text:00402013                 jz      short loc_402020
.text:00402015                 mov     edx, [esp+5Ch+var_38]
.text:00402019                 mov     ebp, [esp+5Ch+arg_10]
.text:0040201D                 mov     [ebp+0], edx
.text:00402020
.text:00402020 loc_402020:                             ; CODE XREF: sub_401910+703↑j
.text:00402020                 mov     eax, [esp+5Ch+var_2C]
.text:00402024                 mov     ecx, [eax+8]
.text:00402027                 test    ecx, ecx
.text:00402029                 jnz     loc_401BEA
.text:0040202F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402033                 jmp     loc_401BE2
.text:00402038 ; ---------------------------------------------------------------------------
.text:00402038
.text:00402038 loc_402038:                             ; CODE XREF: sub_401910+6E7↑j
.text:00402038                 mov     eax, [esp+5Ch+var_14]
.text:0040203C                 test    eax, eax
.text:0040203E                 jnz     short loc_402053
.text:00402040
.text:00402040 loc_402040:                             ; CODE XREF: sub_401910+779↓j
.text:00402040                 mov     ecx, [ebp+14h]
.text:00402043                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402046                 call    strlen
.text:0040204B                 add     [ebp+14h], eax
.text:0040204E                 jmp     loc_401C68
.text:00402053 ; ---------------------------------------------------------------------------
.text:00402053
.text:00402053 loc_402053:                             ; CODE XREF: sub_401910+72E↑j
.text:00402053                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040205A                 call    ds:libintl_gettext
.text:00402060                 mov     edx, [esp+5Ch+var_2C]
.text:00402064                 mov     ebx, [esp+5Ch+arg_4]
.text:00402068                 mov     edi, [edx]
.text:0040206A                 mov     [esp+5Ch+var_50], edi
.text:0040206E                 mov     edi, ds:_iob
.text:00402074                 mov     esi, [ebx]
.text:00402076                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040207A                 add     edi, 40h ; '@'
.text:0040207D                 mov     [esp+5Ch+MaxCount], esi
.text:00402081                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402084                 call    fprintf
.text:00402089                 jmp     short loc_402040
.text:00402089 ; ---------------------------------------------------------------------------
.text:0040208B                 align 10h
.text:00402090
.text:00402090 loc_402090:                             ; CODE XREF: sub_401910+6D8↑j
.text:00402090                 mov     esi, [esp+5Ch+var_2C]
.text:00402094                 cmp     dword ptr [esi+4], 1
.text:00402098                 jnz     loc_401FFF
.text:0040209E                 mov     ecx, [ebp+0]
.text:004020A1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004020A5                 jge     short loc_4020BC
.text:004020A7                 mov     eax, [esp+5Ch+arg_4]
.text:004020AB                 lea     ebx, [ecx+1]
.text:004020AE                 mov     [ebp+0], ebx
.text:004020B1                 mov     edi, [eax+ecx*4]
.text:004020B4                 mov     [ebp+0Ch], edi
.text:004020B7                 jmp     loc_401FFF
.text:004020BC ; ---------------------------------------------------------------------------
.text:004020BC
.text:004020BC loc_4020BC:                             ; CODE XREF: sub_401910+795↑j
.text:004020BC                 mov     edx, [esp+5Ch+var_14]
.text:004020C0                 test    edx, edx
.text:004020C2                 jnz     short loc_4020D7
.text:004020C4
.text:004020C4 loc_4020C4:                             ; CODE XREF: sub_401910+7FE↓j
.text:004020C4                 mov     edx, [ebp+14h]
.text:004020C7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004020CA                 call    strlen
.text:004020CF                 add     [ebp+14h], eax
.text:004020D2                 jmp     loc_401CF9
.text:004020D7 ; ---------------------------------------------------------------------------
.text:004020D7
.text:004020D7 loc_4020D7:                             ; CODE XREF: sub_401910+7B2↑j
.text:004020D7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004020DE                 call    ds:libintl_gettext
.text:004020E4                 mov     ecx, [ebp+0]
.text:004020E7                 mov     ebx, [esp+5Ch+arg_4]
.text:004020EB                 mov     edi, [ebx+ecx*4-4]
.text:004020EF                 mov     ecx, ds:_iob
.text:004020F5                 mov     [esp+5Ch+var_50], edi
.text:004020F9                 mov     esi, [ebx]
.text:004020FB                 add     ecx, 40h ; '@'
.text:004020FE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402102                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402105                 mov     [esp+5Ch+MaxCount], esi
.text:00402109                 call    fprintf
.text:0040210E                 jmp     short loc_4020C4
.text:00402110 ; ---------------------------------------------------------------------------
.text:00402110
.text:00402110 loc_402110:                             ; CODE XREF: sub_401910+67F↑j
.text:00402110                                         ; sub_401910+6CF↑j
.text:00402110                 mov     dword ptr [ebp+14h], 0
.text:00402117                 mov     eax, 57h ; 'W'
.text:0040211C                 jmp     loc_401A67
.text:00402121 ; ---------------------------------------------------------------------------
.text:00402121
.text:00402121 loc_402121:                             ; CODE XREF: sub_401910+6C3↑j
.text:00402121                 mov     edi, [esp+5Ch+var_14]
.text:00402125                 test    edi, edi
.text:00402127                 jnz     short loc_40213F
.text:00402129
.text:00402129 loc_402129:                             ; CODE XREF: sub_401910+865↓j
.text:00402129                 mov     edx, [ebp+14h]
.text:0040212C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040212F                 call    strlen
.text:00402134                 add     [ebp+14h], eax
.text:00402137                 inc     dword ptr [ebp+0]
.text:0040213A                 jmp     loc_401C68
.text:0040213F ; ---------------------------------------------------------------------------
.text:0040213F
.text:0040213F loc_40213F:                             ; CODE XREF: sub_401910+817↑j
.text:0040213F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402146                 call    ds:libintl_gettext
.text:0040214C                 mov     ecx, [ebp+0]
.text:0040214F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402153                 mov     edi, [ebx+ecx*4]
.text:00402156                 mov     ecx, ds:_iob
.text:0040215C                 mov     [esp+5Ch+var_50], edi
.text:00402160                 mov     esi, [ebx]
.text:00402162                 add     ecx, 40h ; '@'
.text:00402165                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402169                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040216C                 mov     [esp+5Ch+MaxCount], esi
.text:00402170                 call    fprintf
.text:00402175                 jmp     short loc_402129
.text:00402177 ; ---------------------------------------------------------------------------
.text:00402177
.text:00402177 loc_402177:                             ; CODE XREF: sub_401910+6A0↑j
.text:00402177                 mov     edx, [ebp+14h]
.text:0040217A                 mov     ebx, edi
.text:0040217C                 mov     ecx, [esi]
.text:0040217E                 sub     ebx, edx
.text:00402180                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402183                 call    strlen
.text:00402188                 cmp     ebx, eax
.text:0040218A                 jz      short loc_4021B2
.text:0040218C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402190                 test    ebx, ebx
.text:00402192                 jz      short loc_4021A1
.text:00402194                 mov     [esp+5Ch+var_34], 1
.text:0040219C                 jmp     loc_401FB6
.text:004021A1 ; ---------------------------------------------------------------------------
.text:004021A1
.text:004021A1 loc_4021A1:                             ; CODE XREF: sub_401910+882↑j
.text:004021A1                 mov     [esp+5Ch+var_2C], esi
.text:004021A5                 mov     ecx, [esp+5Ch+var_3C]
.text:004021A9                 mov     [esp+5Ch+var_38], ecx
.text:004021AD                 jmp     loc_401FB6
.text:004021B2 ; ---------------------------------------------------------------------------
.text:004021B2
.text:004021B2 loc_4021B2:                             ; CODE XREF: sub_401910+87A↑j
.text:004021B2                 mov     [esp+5Ch+var_2C], esi
.text:004021B6                 mov     eax, [esp+5Ch+var_3C]
.text:004021BA                 mov     [esp+5Ch+var_30], 1
.text:004021C2                 mov     [esp+5Ch+var_38], eax
.text:004021C6                 jmp     loc_401FC5
.text:004021CB ; ---------------------------------------------------------------------------
.text:004021CB
.text:004021CB loc_4021CB:                             ; CODE XREF: sub_401910+646↑j
.text:004021CB                 mov     edx, [ebp+0]
.text:004021CE                 cmp     edx, [esp+5Ch+arg_0]
.text:004021D2                 jz      short loc_4021E9
.text:004021D4                 mov     ebx, [esp+5Ch+arg_4]
.text:004021D8                 lea     esi, [edx+1]
.text:004021DB                 mov     [ebp+0], esi
.text:004021DE                 mov     edi, [ebx+edx*4]
.text:004021E1                 mov     [ebp+0Ch], edi
.text:004021E4                 jmp     loc_401F62
.text:004021E9 ; ---------------------------------------------------------------------------
.text:004021E9
.text:004021E9 loc_4021E9:                             ; CODE XREF: sub_401910+8C2↑j
.text:004021E9                 mov     edi, [esp+5Ch+var_14]
.text:004021ED                 test    edi, edi
.text:004021EF                 jnz     short loc_40220C
.text:004021F1
.text:004021F1 loc_4021F1:                             ; CODE XREF: sub_401910+92C↓j
.text:004021F1                 mov     [ebp+8], esi
.text:004021F4                 mov     ebp, [esp+5Ch+Str]
.text:004021F8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004021FC                 jz      short loc_402208
.text:004021FE                 mov     bl, 3Fh ; '?'
.text:00402200
.text:00402200 loc_402200:                             ; CODE XREF: sub_401910+8FA↓j
.text:00402200                 movsx   eax, bl
.text:00402203                 jmp     loc_401A67
.text:00402208 ; ---------------------------------------------------------------------------
.text:00402208
.text:00402208 loc_402208:                             ; CODE XREF: sub_401910+8EC↑j
.text:00402208                 mov     bl, 3Ah ; ':'
.text:0040220A                 jmp     short loc_402200
.text:0040220C ; ---------------------------------------------------------------------------
.text:0040220C
.text:0040220C loc_40220C:                             ; CODE XREF: sub_401910+8DF↑j
.text:0040220C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402213                 call    ds:libintl_gettext
.text:00402219                 mov     [esp+5Ch+var_50], esi
.text:0040221D                 mov     edx, [esp+5Ch+arg_4]
.text:00402221                 mov     ecx, ds:_iob
.text:00402227                 mov     ebx, [edx]
.text:00402229                 add     ecx, 40h ; '@'
.text:0040222C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402230                 mov     [esp+5Ch+MaxCount], ebx
.text:00402234                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402237                 call    fprintf
.text:0040223C                 jmp     short loc_4021F1
.text:0040223C ; ---------------------------------------------------------------------------
.text:0040223E                 align 10h
.text:00402240
.text:00402240 loc_402240:                             ; CODE XREF: sub_401910+54C↑j
.text:00402240                                         ; sub_401910+555↑j
.text:00402240                 mov     eax, [esp+5Ch+var_14]
.text:00402244                 test    eax, eax
.text:00402246                 jz      short loc_40227F
.text:00402248                 mov     ebx, [ebp+1Ch]
.text:0040224B                 test    ebx, ebx
.text:0040224D                 jz      short loc_402287
.text:0040224F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402256
.text:00402256 loc_402256:                             ; CODE XREF: sub_401910+97E↓j
.text:00402256                 call    ds:libintl_gettext
.text:0040225C                 mov     [esp+5Ch+var_50], esi
.text:00402260                 mov     ebx, [esp+5Ch+arg_4]
.text:00402264                 mov     edx, ds:_iob
.text:0040226A                 mov     esi, [ebx]
.text:0040226C                 add     edx, 40h ; '@'
.text:0040226F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402273                 mov     [esp+5Ch+MaxCount], esi
.text:00402277                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040227A                 call    fprintf
.text:0040227F
.text:0040227F loc_40227F:                             ; CODE XREF: sub_401910+936↑j
.text:0040227F                 mov     [ebp+8], edi
.text:00402282                 jmp     loc_401C68
.text:00402287 ; ---------------------------------------------------------------------------
.text:00402287
.text:00402287 loc_402287:                             ; CODE XREF: sub_401910+93D↑j
.text:00402287                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040228E                 jmp     short loc_402256
.text:00402290 ; ---------------------------------------------------------------------------
.text:00402290
.text:00402290 loc_402290:                             ; CODE XREF: sub_401910+26E↑j
.text:00402290                 mov     edi, [esp+5Ch+var_14]
.text:00402294                 test    edi, edi
.text:00402296                 jnz     short loc_4022AE
.text:00402298
.text:00402298 loc_402298:                             ; CODE XREF: sub_401910+9D4↓j
.text:00402298                 mov     edx, [ebp+14h]
.text:0040229B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040229E                 call    strlen
.text:004022A3                 add     [ebp+14h], eax
.text:004022A6                 inc     dword ptr [ebp+0]
.text:004022A9                 jmp     loc_401DEE
.text:004022AE ; ---------------------------------------------------------------------------
.text:004022AE
.text:004022AE loc_4022AE:                             ; CODE XREF: sub_401910+986↑j
.text:004022AE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:004022B5                 call    ds:libintl_gettext
.text:004022BB                 mov     ebx, [ebp+0]
.text:004022BE                 mov     edi, [esp+5Ch+arg_4]
.text:004022C2                 mov     ecx, [edi+ebx*4]
.text:004022C5                 mov     ebx, ds:_iob
.text:004022CB                 mov     [esp+5Ch+var_50], ecx
.text:004022CF                 mov     esi, [edi]
.text:004022D1                 add     ebx, 40h ; '@'
.text:004022D4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022D8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004022DB                 mov     [esp+5Ch+MaxCount], esi
.text:004022DF                 call    fprintf
.text:004022E4                 jmp     short loc_402298
.text:004022E6 ; ---------------------------------------------------------------------------
.text:004022E6
.text:004022E6 loc_4022E6:                             ; CODE XREF: sub_401910+246↑j
.text:004022E6                 mov     ecx, [ebp+14h]
.text:004022E9                 mov     ebx, edi
.text:004022EB                 mov     edx, [esi]
.text:004022ED                 sub     ebx, ecx
.text:004022EF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004022F2                 call    strlen
.text:004022F7                 cmp     ebx, eax
.text:004022F9                 jz      short loc_402351
.text:004022FB                 mov     ebx, [esp+5Ch+var_18]
.text:004022FF                 test    ebx, ebx
.text:00402301                 jz      short loc_402340
.text:00402303                 mov     edx, [esp+5Ch+arg_14]
.text:00402307                 test    edx, edx
.text:00402309                 jnz     short loc_402317
.text:0040230B                 mov     ecx, [esp+5Ch+var_18]
.text:0040230F                 mov     ebx, [esi+4]
.text:00402312                 cmp     [ecx+4], ebx
.text:00402315                 jz      short loc_402324
.text:00402317
.text:00402317 loc_402317:                             ; CODE XREF: sub_401910+9F9↑j
.text:00402317                                         ; sub_401910+A1A↓j ...
.text:00402317                 mov     [esp+5Ch+var_20], 1
.text:0040231F                 jmp     loc_401B5C
.text:00402324 ; ---------------------------------------------------------------------------
.text:00402324
.text:00402324 loc_402324:                             ; CODE XREF: sub_401910+A05↑j
.text:00402324                 mov     edx, [esi+8]
.text:00402327                 cmp     [ecx+8], edx
.text:0040232A                 jnz     short loc_402317
.text:0040232C                 mov     ebx, [esi+0Ch]
.text:0040232F                 cmp     [ecx+0Ch], ebx
.text:00402332                 jnz     short loc_402317
.text:00402334                 jmp     loc_401B5C
.text:00402334 ; ---------------------------------------------------------------------------
.text:00402339                 align 10h
.text:00402340
.text:00402340 loc_402340:                             ; CODE XREF: sub_401910+9F1↑j
.text:00402340                 mov     [esp+5Ch+var_18], esi
.text:00402344                 mov     eax, [esp+5Ch+var_28]
.text:00402348                 mov     [esp+5Ch+var_24], eax
.text:0040234C                 jmp     loc_401B5C
.text:00402351 ; ---------------------------------------------------------------------------
.text:00402351
.text:00402351 loc_402351:                             ; CODE XREF: sub_401910+9E9↑j
.text:00402351                 mov     [esp+5Ch+var_18], esi
.text:00402355                 mov     ecx, [esp+5Ch+var_28]
.text:00402359                 mov     [esp+5Ch+var_1C], 1
.text:00402361                 mov     [esp+5Ch+var_24], ecx
.text:00402365                 jmp     loc_401B70
.text:0040236A ; ---------------------------------------------------------------------------
.text:0040236A
.text:0040236A loc_40236A:                             ; CODE XREF: sub_401910+1BF↑j
.text:0040236A                 mov     eax, [esp+5Ch+Str]
.text:0040236E                 movsx   esi, dl
.text:00402371                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402375                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402378                 call    strchr
.text:0040237D                 test    eax, eax
.text:0040237F                 jnz     loc_401E30
.text:00402385                 jmp     loc_401AD5
.text:0040238A ; ---------------------------------------------------------------------------
.text:0040238A
.text:0040238A loc_40238A:                             ; CODE XREF: sub_401910+17C↑j
.text:0040238A                 mov     ecx, 1
.text:0040238F                 jmp     loc_401A92
.text:00402394 ; ---------------------------------------------------------------------------
.text:00402394
.text:00402394 loc_402394:                             ; CODE XREF: sub_401910+D4↑j
.text:00402394                                         ; sub_401910+130↑j
.text:00402394                 mov     eax, [ebp+20h]
.text:00402397                 cmp     eax, [ebp+24h]
.text:0040239A                 jz      loc_401A70
.text:004023A0                 mov     [ebp+0], eax
.text:004023A3                 jmp     loc_401A70
.text:004023A8 ; ---------------------------------------------------------------------------
.text:004023A8
.text:004023A8 loc_4023A8:                             ; CODE XREF: sub_401910+FE↑j
.text:004023A8                 mov     [ebp+20h], eax
.text:004023AB                 jmp     loc_401A30
.text:004023B0 ; ---------------------------------------------------------------------------
.text:004023B0
.text:004023B0 loc_4023B0:                             ; CODE XREF: sub_401910+CA↑j
.text:004023B0                 mov     edx, [ebp+20h]
.text:004023B3                 mov     eax, [ebp+24h]
.text:004023B6                 cmp     edx, eax
.text:004023B8                 jz      short loc_402430
.text:004023BA                 cmp     eax, ebx
.text:004023BC                 jz      short loc_4023D1
.text:004023BE                 mov     [esp+5Ch+Str2], ebp
.text:004023C2                 mov     ebx, [esp+5Ch+arg_4]
.text:004023C6                 mov     [esp+5Ch+Str1], ebx
.text:004023C9                 call    sub_4025C0
.text:004023CE                 mov     ebx, [ebp+0]
.text:004023D1
.text:004023D1 loc_4023D1:                             ; CODE XREF: sub_401910+AAC↑j
.text:004023D1                                         ; sub_401910+B22↓j ...
.text:004023D1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004023D5                 jge     short loc_402420
.text:004023D7                 mov     esi, [esp+5Ch+arg_4]
.text:004023DB                 mov     eax, [esi+ebx*4]
.text:004023DE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004023E1                 jz      short loc_402428
.text:004023E3                 lea     esi, [esi+0]
.text:004023E9                 lea     edi, [edi+0]
.text:004023F0
.text:004023F0 loc_4023F0:                             ; CODE XREF: sub_401910+AFC↓j
.text:004023F0                                         ; sub_401910+B1C↓j
.text:004023F0                 lea     eax, [ebx+1]
.text:004023F3                 mov     ebx, eax
.text:004023F5                 mov     [ebp+0], eax
.text:004023F8                 cmp     eax, [esp+5Ch+arg_0]
.text:004023FC                 jge     short loc_402420
.text:004023FE                 mov     edi, [esp+5Ch+arg_4]
.text:00402402                 mov     edx, [edi+eax*4]
.text:00402405                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402408                 jz      short loc_402410
.text:0040240A
.text:0040240A loc_40240A:                             ; CODE XREF: sub_401910+B04↓j
.text:0040240A                 mov     ebx, eax
.text:0040240C                 jmp     short loc_4023F0
.text:0040240C ; ---------------------------------------------------------------------------
.text:0040240E                 align 10h
.text:00402410
.text:00402410 loc_402410:                             ; CODE XREF: sub_401910+AF8↑j
.text:00402410                 cmp     byte ptr [edx+1], 0
.text:00402414                 jz      short loc_40240A
.text:00402416                 lea     esi, [esi+0]
.text:00402419                 lea     edi, [edi+0]
.text:00402420
.text:00402420 loc_402420:                             ; CODE XREF: sub_401910+AC5↑j
.text:00402420                                         ; sub_401910+AEC↑j ...
.text:00402420                 mov     [ebp+24h], ebx
.text:00402423                 jmp     loc_4019E0
.text:00402428 ; ---------------------------------------------------------------------------
.text:00402428
.text:00402428 loc_402428:                             ; CODE XREF: sub_401910+AD1↑j
.text:00402428                 cmp     byte ptr [eax+1], 0
.text:0040242C                 jz      short loc_4023F0
.text:0040242E                 jmp     short loc_402420
.text:00402430 ; ---------------------------------------------------------------------------
.text:00402430
.text:00402430 loc_402430:                             ; CODE XREF: sub_401910+AA8↑j
.text:00402430                 cmp     edx, ebx
.text:00402432                 jz      short loc_4023D1
.text:00402434                 mov     [ebp+20h], ebx
.text:00402437                 jmp     short loc_4023D1
.text:00402439 ; ---------------------------------------------------------------------------
.text:00402439
.text:00402439 loc_402439:                             ; CODE XREF: sub_401910+88↑j
.text:00402439                 mov     dword ptr [ebp+18h], 0
.text:00402440                 mov     esi, [esp+5Ch+Str]
.text:00402444
.text:00402444 loc_402444:                             ; CODE XREF: sub_401910+B49↓j
.text:00402444                 inc     esi
.text:00402445                 jmp     loc_4019A8
.text:00402445 ; ---------------------------------------------------------------------------
.text:0040244A                 align 10h
.text:00402450
.text:00402450 loc_402450:                             ; CODE XREF: sub_401910+80↑j
.text:00402450                 mov     dword ptr [ebp+18h], 2
.text:00402457                 mov     esi, ecx
.text:00402459                 jmp     short loc_402444
.text:00402459 ; ---------------------------------------------------------------------------
.text:0040245B                 align 10h
.text:00402460
.text:00402460 loc_402460:                             ; CODE XREF: sub_401910+69↑j
.text:00402460                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402467                 call    getenv
.text:0040246C                 test    eax, eax
.text:0040246E                 jz      loc_401984
.text:00402474                 jmp     loc_40197F
.text:00402474 ; ---------------------------------------------------------------------------
.text:00402479                 align 10h
.text:00402480
.text:00402480 loc_402480:                             ; CODE XREF: sub_401910+3F↑j
.text:00402480                 mov     dword ptr [ebp+0], 1
.text:00402487                 mov     ebx, 1
.text:0040248C                 jmp     loc_401960
.text:0040248C sub_401910      endp
.text:0040248C
.text:00402491 ; ---------------------------------------------------------------------------
.text:00402491                 jmp     short sub_4024A0
.text:00402491 ; ---------------------------------------------------------------------------
.text:00402493                 align 10h
.text:004024A0
.text:004024A0 ; =============== S U B R O U T I N E =======================================
.text:004024A0
.text:004024A0
.text:004024A0 ; int __cdecl sub_4024A0(int, int, char *, int, int, int, int)
.text:004024A0 sub_4024A0      proc near               ; CODE XREF: .text:00402491↑j
.text:004024A0                                         ; sub_402740+3A↓p ...
.text:004024A0
.text:004024A0 var_2C          = dword ptr -2Ch
.text:004024A0 var_28          = dword ptr -28h
.text:004024A0 Str             = dword ptr -24h
.text:004024A0 var_20          = dword ptr -20h
.text:004024A0 var_1C          = dword ptr -1Ch
.text:004024A0 var_18          = dword ptr -18h
.text:004024A0 var_14          = dword ptr -14h
.text:004024A0 var_10          = dword ptr -10h
.text:004024A0 arg_0           = dword ptr  4
.text:004024A0 arg_4           = dword ptr  8
.text:004024A0 arg_8           = dword ptr  0Ch
.text:004024A0 arg_C           = dword ptr  10h
.text:004024A0 arg_10          = dword ptr  14h
.text:004024A0 arg_14          = dword ptr  18h
.text:004024A0 arg_18          = dword ptr  1Ch
.text:004024A0
.text:004024A0                 sub     esp, 2Ch
.text:004024A3                 mov     edx, dword_406010
.text:004024A9                 mov     [esp+2Ch+var_10], offset dword_407000 ; int
.text:004024B1                 mov     ecx, dword_406014
.text:004024B7                 mov     ds:dword_407000, edx
.text:004024BD                 mov     edx, [esp+2Ch+arg_18]
.text:004024C1                 mov     ds:dword_407004, ecx
.text:004024C7                 mov     ecx, [esp+2Ch+arg_14]
.text:004024CB                 mov     [esp+2Ch+var_14], edx ; int
.text:004024CF                 mov     edx, [esp+2Ch+arg_10]
.text:004024D3                 mov     [esp+2Ch+var_18], ecx ; int
.text:004024D7                 mov     ecx, [esp+2Ch+arg_C]
.text:004024DB                 mov     [esp+2Ch+var_1C], edx ; int
.text:004024DF                 mov     edx, [esp+2Ch+arg_8]
.text:004024E3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004024E7                 mov     ecx, [esp+2Ch+arg_4]
.text:004024EB                 mov     [esp+2Ch+Str], edx ; Str
.text:004024EF                 mov     edx, [esp+2Ch+arg_0]
.text:004024F3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004024F7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004024FA                 call    sub_401910
.text:004024FF                 mov     ecx, ds:dword_407000
.text:00402505                 mov     dword_406010, ecx
.text:0040250B                 mov     ecx, ds:dword_40700C
.text:00402511                 mov     ds:dword_4071C0, ecx
.text:00402517                 mov     ecx, ds:dword_407008
.text:0040251D                 mov     dword_406018, ecx
.text:00402523                 add     esp, 2Ch
.text:00402526                 retn
.text:00402526 sub_4024A0      endp
.text:00402526
.text:00402526 ; ---------------------------------------------------------------------------
.text:00402527                 align 10h
.text:00402530                 sub     esp, 2Ch
.text:00402533                 mov     edx, dword_406010
.text:00402539                 mov     dword ptr [esp+1Ch], offset dword_407000
.text:00402541                 mov     ecx, dword_406014
.text:00402547                 mov     dword ptr [esp+18h], 1
.text:0040254F                 mov     ds:dword_407000, edx
.text:00402555                 mov     edx, [esp+38h]
.text:00402559                 mov     ds:dword_407004, ecx
.text:0040255F                 mov     ecx, [esp+34h]
.text:00402563                 mov     [esp+8], edx
.text:00402567                 mov     edx, [esp+30h]
.text:0040256B                 mov     [esp+4], ecx
.text:0040256F                 mov     dword ptr [esp+14h], 0
.text:00402577                 mov     dword ptr [esp+10h], 0
.text:0040257F                 mov     dword ptr [esp+0Ch], 0
.text:00402587                 mov     [esp], edx
.text:0040258A                 call    sub_401910
.text:0040258F                 mov     ecx, ds:dword_407000
.text:00402595                 mov     dword_406010, ecx
.text:0040259B                 mov     ecx, ds:dword_40700C
.text:004025A1                 mov     ds:dword_4071C0, ecx
.text:004025A7                 mov     ecx, ds:dword_407008
.text:004025AD                 mov     dword_406018, ecx
.text:004025B3                 add     esp, 2Ch
.text:004025B6                 retn
.text:004025B6 ; ---------------------------------------------------------------------------
.text:004025B7                 align 10h
.text:004025C0
.text:004025C0 ; =============== S U B R O U T I N E =======================================
.text:004025C0
.text:004025C0
.text:004025C0 sub_4025C0      proc near               ; CODE XREF: sub_401910+113↑p
.text:004025C0                                         ; sub_401910+AB9↑p
.text:004025C0
.text:004025C0 var_2C          = dword ptr -2Ch
.text:004025C0 var_28          = dword ptr -28h
.text:004025C0 var_24          = dword ptr -24h
.text:004025C0 var_20          = dword ptr -20h
.text:004025C0 var_1C          = dword ptr -1Ch
.text:004025C0 var_18          = dword ptr -18h
.text:004025C0 var_14          = dword ptr -14h
.text:004025C0 arg_0           = dword ptr  4
.text:004025C0 arg_4           = dword ptr  8
.text:004025C0
.text:004025C0                 push    ebp
.text:004025C1                 push    edi
.text:004025C2                 push    esi
.text:004025C3                 push    ebx
.text:004025C4                 sub     esp, 1Ch
.text:004025C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004025CB                 mov     eax, [esp+2Ch+arg_4]
.text:004025CF                 mov     ebx, [esp+2Ch+arg_4]
.text:004025D3                 mov     edx, [ecx+20h]
.text:004025D6                 mov     edi, [esp+2Ch+arg_0]
.text:004025DA                 mov     ecx, [ebx]
.text:004025DC                 mov     [esp+2Ch+var_2C], edx
.text:004025DF                 mov     [esp+2Ch+var_14], edx
.text:004025E3                 mov     edx, [eax+24h]
.text:004025E6                 mov     [esp+2Ch+var_28], ecx
.text:004025EA                 mov     [esp+2Ch+var_1C], ecx
.text:004025EE                 cmp     ecx, edx
.text:004025F0                 mov     [esp+2Ch+var_18], edx
.text:004025F4                 jle     short loc_402670
.text:004025F6                 mov     esi, [esp+2Ch+var_2C]
.text:004025F9                 cmp     edx, esi
.text:004025FB                 jle     short loc_402670
.text:004025FD                 lea     esi, [esi+0]
.text:00402600
.text:00402600 loc_402600:                             ; CODE XREF: sub_4025C0+A1↓j
.text:00402600                 mov     ebx, [esp+2Ch+var_1C]
.text:00402604                 mov     edx, [esp+2Ch+var_18]
.text:00402608                 mov     ebp, [esp+2Ch+var_18]
.text:0040260C                 mov     eax, [esp+2Ch+var_14]
.text:00402610                 sub     ebx, edx
.text:00402612                 mov     [esp+2Ch+var_20], ebx
.text:00402616                 sub     ebp, eax
.text:00402618                 cmp     ebx, ebp
.text:0040261A                 jle     short loc_402695
.text:0040261C                 xor     esi, esi
.text:0040261E                 cmp     esi, ebp
.text:00402620                 jge     short loc_40264D
.text:00402622                 mov     ecx, [esp+2Ch+var_1C]
.text:00402626                 sub     ecx, ebp
.text:00402628                 mov     [esp+2Ch+var_24], ecx
.text:0040262C                 lea     esi, [esi+0]
.text:00402630
.text:00402630 loc_402630:                             ; CODE XREF: sub_4025C0+8B↓j
.text:00402630                 mov     ecx, [esp+2Ch+var_14]
.text:00402634                 mov     edx, [esp+2Ch+var_24]
.text:00402638                 add     ecx, esi
.text:0040263A                 add     edx, esi
.text:0040263C                 mov     ebx, [edi+ecx*4]
.text:0040263F                 mov     eax, [edi+edx*4]
.text:00402642                 inc     esi
.text:00402643                 cmp     esi, ebp
.text:00402645                 mov     [edi+ecx*4], eax
.text:00402648                 mov     [edi+edx*4], ebx
.text:0040264B                 jl      short loc_402630
.text:0040264D
.text:0040264D loc_40264D:                             ; CODE XREF: sub_4025C0+60↑j
.text:0040264D                 sub     [esp+2Ch+var_1C], ebp
.text:00402651
.text:00402651 loc_402651:                             ; CODE XREF: sub_4025C0+107↓j
.text:00402651                 mov     eax, [esp+2Ch+var_18]
.text:00402655                 cmp     [esp+2Ch+var_1C], eax
.text:00402659                 jle     short loc_402670
.text:0040265B                 mov     ebp, [esp+2Ch+var_14]
.text:0040265F                 cmp     eax, ebp
.text:00402661                 jg      short loc_402600
.text:00402663                 lea     esi, [esi+0]
.text:00402669                 lea     edi, [edi+0]
.text:00402670
.text:00402670 loc_402670:                             ; CODE XREF: sub_4025C0+34↑j
.text:00402670                                         ; sub_4025C0+3B↑j ...
.text:00402670                 mov     esi, [esp+2Ch+var_28]
.text:00402674                 mov     ecx, [esp+2Ch+var_18]
.text:00402678                 mov     eax, [esp+2Ch+var_2C]
.text:0040267B                 mov     edi, [esp+2Ch+arg_4]
.text:0040267F                 mov     edx, [esp+2Ch+var_28]
.text:00402683                 sub     esi, ecx
.text:00402685                 add     esi, eax
.text:00402687                 mov     [edi+20h], esi
.text:0040268A                 mov     [edi+24h], edx
.text:0040268D                 add     esp, 1Ch
.text:00402690                 pop     ebx
.text:00402691                 pop     esi
.text:00402692                 pop     edi
.text:00402693                 pop     ebp
.text:00402694                 retn
.text:00402695 ; ---------------------------------------------------------------------------
.text:00402695
.text:00402695 loc_402695:                             ; CODE XREF: sub_4025C0+5A↑j
.text:00402695                 xor     esi, esi
.text:00402697                 cmp     esi, [esp+2Ch+var_20]
.text:0040269B                 jge     short loc_4026BF
.text:0040269D                 lea     esi, [esi+0]
.text:004026A0
.text:004026A0 loc_4026A0:                             ; CODE XREF: sub_4025C0+FD↓j
.text:004026A0                 mov     ebx, [esp+2Ch+var_14]
.text:004026A4                 mov     ebp, [esp+2Ch+var_18]
.text:004026A8                 add     ebx, esi
.text:004026AA                 add     ebp, esi
.text:004026AC                 mov     edx, [edi+ebx*4]
.text:004026AF                 inc     esi
.text:004026B0                 cmp     esi, [esp+2Ch+var_20]
.text:004026B4                 mov     ecx, [edi+ebp*4]
.text:004026B7                 mov     [edi+ebx*4], ecx
.text:004026BA                 mov     [edi+ebp*4], edx
.text:004026BD                 jl      short loc_4026A0
.text:004026BF
.text:004026BF loc_4026BF:                             ; CODE XREF: sub_4025C0+DB↑j
.text:004026BF                 mov     esi, [esp+2Ch+var_20]
.text:004026C3                 add     [esp+2Ch+var_14], esi
.text:004026C7                 jmp     short loc_402651
.text:004026C7 sub_4025C0      endp
.text:004026C7
.text:004026C7 ; ---------------------------------------------------------------------------
.text:004026C9                 align 20h
.text:004026E0                 sub     esp, 0Ch
.text:004026E3                 mov     edx, [esp+14h]
.text:004026E7                 mov     dword ptr [esp+4], 5
.text:004026EF                 mov     [esp+8], edx
.text:004026F3                 mov     edx, [esp+10h]
.text:004026F7                 mov     [esp], edx
.text:004026FA                 call    sub_403870
.text:004026FF                 add     esp, 0Ch
.text:00402702                 retn
.text:00402702 ; ---------------------------------------------------------------------------
.text:00402703                 align 10h
.text:00402710
.text:00402710 ; =============== S U B R O U T I N E =======================================
.text:00402710
.text:00402710
.text:00402710 ; int __cdecl sub_402710(char *)
.text:00402710 sub_402710      proc near               ; CODE XREF: sub_401350+D9↑p
.text:00402710
.text:00402710 var_C           = dword ptr -0Ch
.text:00402710 var_8           = dword ptr -8
.text:00402710 var_4           = dword ptr -4
.text:00402710 arg_0           = dword ptr  4
.text:00402710
.text:00402710                 sub     esp, 0Ch
.text:00402713                 mov     edx, [esp+0Ch+arg_0]
.text:00402717                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040271F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00402726                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040272A                 call    sub_403870
.text:0040272F                 add     esp, 0Ch
.text:00402732                 retn
.text:00402732 sub_402710      endp
.text:00402732
.text:00402732 ; ---------------------------------------------------------------------------
.text:00402733                 align 10h
.text:00402740
.text:00402740 ; =============== S U B R O U T I N E =======================================
.text:00402740
.text:00402740
.text:00402740 ; int __cdecl sub_402740(int, int, char *, int, int)
.text:00402740 sub_402740      proc near               ; CODE XREF: sub_401350+C2↑p
.text:00402740                                         ; sub_4028E0+58↓p
.text:00402740
.text:00402740 var_1C          = dword ptr -1Ch
.text:00402740 var_18          = dword ptr -18h
.text:00402740 var_14          = dword ptr -14h
.text:00402740 var_10          = dword ptr -10h
.text:00402740 var_C           = dword ptr -0Ch
.text:00402740 var_8           = dword ptr -8
.text:00402740 var_4           = dword ptr -4
.text:00402740 arg_0           = dword ptr  4
.text:00402740 arg_4           = dword ptr  8
.text:00402740 arg_8           = dword ptr  0Ch
.text:00402740 arg_C           = dword ptr  10h
.text:00402740 arg_10          = dword ptr  14h
.text:00402740
.text:00402740                 sub     esp, 1Ch
.text:00402743                 mov     edx, [esp+1Ch+arg_C]
.text:00402747                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040274F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402753                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040275B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040275F                 mov     edx, [esp+1Ch+arg_4]
.text:00402763                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402767                 mov     ecx, [esp+1Ch+arg_8]
.text:0040276B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040276F                 mov     edx, [esp+1Ch+arg_0]
.text:00402773                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402777                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040277A                 call    sub_4024A0
.text:0040277F                 add     esp, 1Ch
.text:00402782                 retn
.text:00402782 sub_402740      endp
.text:00402782
.text:00402782 ; ---------------------------------------------------------------------------
.text:00402783                 align 10h
.text:00402790                 sub     esp, 2Ch
.text:00402793                 mov     edx, [esp+44h]
.text:00402797                 mov     dword ptr [esp+18h], 0
.text:0040279F                 mov     ecx, [esp+40h]
.text:004027A3                 mov     dword ptr [esp+14h], 0
.text:004027AB                 mov     [esp+1Ch], edx
.text:004027AF                 mov     edx, [esp+3Ch]
.text:004027B3                 mov     [esp+10h], ecx
.text:004027B7                 mov     ecx, [esp+38h]
.text:004027BB                 mov     [esp+0Ch], edx
.text:004027BF                 mov     edx, [esp+34h]
.text:004027C3                 mov     [esp+8], ecx
.text:004027C7                 mov     [esp+4], edx
.text:004027CB                 mov     edx, [esp+30h]
.text:004027CF                 mov     [esp], edx
.text:004027D2                 call    sub_401910
.text:004027D7                 add     esp, 2Ch
.text:004027DA                 retn
.text:004027DA ; ---------------------------------------------------------------------------
.text:004027DB                 align 10h
.text:004027E0                 sub     esp, 1Ch
.text:004027E3                 mov     edx, [esp+2Ch]
.text:004027E7                 mov     dword ptr [esp+18h], 0
.text:004027EF                 mov     ecx, [esp+30h]
.text:004027F3                 mov     dword ptr [esp+14h], 1
.text:004027FB                 mov     [esp+0Ch], edx
.text:004027FF                 mov     edx, [esp+24h]
.text:00402803                 mov     [esp+10h], ecx
.text:00402807                 mov     ecx, [esp+28h]
.text:0040280B                 mov     [esp+4], edx
.text:0040280F                 mov     edx, [esp+20h]
.text:00402813                 mov     [esp+8], ecx
.text:00402817                 mov     [esp], edx
.text:0040281A                 call    sub_4024A0
.text:0040281F                 add     esp, 1Ch
.text:00402822                 retn
.text:00402822 ; ---------------------------------------------------------------------------
.text:00402823                 align 10h
.text:00402830                 sub     esp, 2Ch
.text:00402833                 mov     edx, [esp+44h]
.text:00402837                 mov     dword ptr [esp+18h], 0
.text:0040283F                 mov     ecx, [esp+40h]
.text:00402843                 mov     dword ptr [esp+14h], 1
.text:0040284B                 mov     [esp+1Ch], edx
.text:0040284F                 mov     edx, [esp+3Ch]
.text:00402853                 mov     [esp+10h], ecx
.text:00402857                 mov     ecx, [esp+38h]
.text:0040285B                 mov     [esp+0Ch], edx
.text:0040285F                 mov     edx, [esp+34h]
.text:00402863                 mov     [esp+8], ecx
.text:00402867                 mov     [esp+4], edx
.text:0040286B                 mov     edx, [esp+30h]
.text:0040286F                 mov     [esp], edx
.text:00402872                 call    sub_401910
.text:00402877                 add     esp, 2Ch
.text:0040287A                 retn
.text:0040287A ; ---------------------------------------------------------------------------
.text:0040287B                 align 10h
.text:00402880 aHelp           db 'help',0             ; DATA XREF: .text:off_4028A0↓o
.text:00402885 aVersion        db 'version',0          ; DATA XREF: .text:004028B0↓o
.text:0040288D                 align 20h
.text:004028A0 off_4028A0      dd offset aHelp         ; DATA XREF: sub_4028E0+3D↓o
.text:004028A0                                         ; "help"
.text:004028A4                 dd 2 dup(0)
.text:004028AC                 dd 68h
.text:004028B0                 dd offset aVersion      ; "version"
.text:004028B4                 dd 2 dup(0)
.text:004028BC                 dd 76h, 4 dup(0)
.text:004028D0 ; ---------------------------------------------------------------------------
.text:004028D0
.text:004028D0 loc_4028D0:                             ; DATA XREF: sub_4028E0+45↓o
.text:004028D0                 sub     eax, [eax]
.text:004028D2                 lea     esi, [esi+0]
.text:004028D9                 lea     edi, [edi+0]
.text:004028E0
.text:004028E0 ; =============== S U B R O U T I N E =======================================
.text:004028E0
.text:004028E0
.text:004028E0 ; int __cdecl sub_4028E0(int, int, FILE *, int, int, int, char)
.text:004028E0 sub_4028E0      proc near               ; CODE XREF: sub_401350+9E↑p
.text:004028E0
.text:004028E0 Code            = dword ptr -1Ch
.text:004028E0 var_18          = dword ptr -18h
.text:004028E0 var_14          = dword ptr -14h
.text:004028E0 var_10          = dword ptr -10h
.text:004028E0 var_C           = dword ptr -0Ch
.text:004028E0 var_4           = dword ptr -4
.text:004028E0 arg_0           = dword ptr  4
.text:004028E0 arg_4           = dword ptr  8
.text:004028E0 arg_8           = dword ptr  0Ch
.text:004028E0 arg_C           = dword ptr  10h
.text:004028E0 arg_10          = dword ptr  14h
.text:004028E0 arg_14          = dword ptr  18h
.text:004028E0 arg_18          = byte ptr  1Ch
.text:004028E0
.text:004028E0                 sub     esp, 1Ch
.text:004028E3                 xor     eax, eax
.text:004028E5                 cmp     [esp+1Ch+arg_0], 2
.text:004028EA                 mov     [esp+1Ch+var_4], ebx
.text:004028EE                 mov     ebx, dword_406014
.text:004028F4                 mov     dword_406014, eax
.text:004028F9                 jz      short loc_402911
.text:004028FB
.text:004028FB loc_4028FB:                             ; CODE XREF: sub_4028E0+60↓j
.text:004028FB                                         ; sub_4028E0+6A↓j
.text:004028FB                 mov     dword_406014, ebx
.text:00402901                 xor     edx, edx
.text:00402903                 mov     ebx, [esp+1Ch+var_4]
.text:00402907                 mov     dword_406010, edx
.text:0040290D                 add     esp, 1Ch
.text:00402910                 retn
.text:00402911 ; ---------------------------------------------------------------------------
.text:00402911
.text:00402911 loc_402911:                             ; CODE XREF: sub_4028E0+19↑j
.text:00402911                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402919                 mov     edx, [esp+1Ch+arg_4]
.text:0040291D                 mov     [esp+1Ch+var_10], offset off_4028A0 ; int
.text:00402925                 mov     [esp+1Ch+var_14], offset loc_4028D0 ; char *
.text:0040292D                 mov     [esp+1Ch+var_18], edx ; int
.text:00402931                 mov     [esp+1Ch+Code], 2 ; int
.text:00402938                 call    sub_402740
.text:0040293D                 cmp     eax, 0FFFFFFFFh
.text:00402940                 jz      short loc_4028FB
.text:00402942                 cmp     eax, 68h ; 'h'
.text:00402945                 jz      short loc_40294E
.text:00402947                 cmp     eax, 76h ; 'v'
.text:0040294A                 jnz     short loc_4028FB
.text:0040294C                 jmp     short loc_402959
.text:0040294E ; ---------------------------------------------------------------------------
.text:0040294E
.text:0040294E loc_40294E:                             ; CODE XREF: sub_4028E0+65↑j
.text:0040294E                 mov     [esp+1Ch+Code], 0
.text:00402955                 call    [esp+1Ch+arg_14]
.text:00402959
.text:00402959 loc_402959:                             ; CODE XREF: sub_4028E0+6C↑j
.text:00402959                 mov     ecx, [esp+1Ch+arg_10]
.text:0040295D                 lea     ebx, [esp+1Ch+arg_18]
.text:00402961                 mov     edx, [esp+1Ch+arg_C]
.text:00402965                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00402969                 mov     ebx, [esp+1Ch+arg_8]
.text:0040296D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00402971                 mov     ecx, ds:_iob
.text:00402977                 mov     [esp+1Ch+var_14], edx ; int
.text:0040297B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:0040297F                 add     ecx, 20h ; ' '
.text:00402982                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00402985                 call    sub_404140
.text:0040298A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402991                 call    exit
.text:00402991 sub_4028E0      endp
.text:00402991
.text:00402991 ; ---------------------------------------------------------------------------
.text:00402996                 align 10h
.text:004029A0                 mov     edx, [esp+4]
.text:004029A4                 mov     ds:dword_407030, edx
.text:004029AA                 retn
.text:004029AA ; ---------------------------------------------------------------------------
.text:004029AB aWriteError     db 'write error',0      ; DATA XREF: sub_4029D0:loc_402A19↓o
.text:004029B7 ; const char aSS[]
.text:004029B7 aSS             db '%s: %s',0           ; DATA XREF: sub_4029D0+77↓o
.text:004029BE ; const char aS_2[]
.text:004029BE aS_2            db '%s',0               ; DATA XREF: sub_4029D0+A0↓o
.text:004029C1 ; ---------------------------------------------------------------------------
.text:004029C1                 jmp     short sub_4029D0
.text:004029C1 ; ---------------------------------------------------------------------------
.text:004029C3                 align 10h
.text:004029D0
.text:004029D0 ; =============== S U B R O U T I N E =======================================
.text:004029D0
.text:004029D0
.text:004029D0 ; void __cdecl sub_4029D0()
.text:004029D0 sub_4029D0      proc near               ; CODE XREF: .text:004029C1↑j
.text:004029D0                                         ; DATA XREF: sub_401350+5B↑o
.text:004029D0
.text:004029D0 Stream          = dword ptr -2Ch
.text:004029D0 ErrorMessage    = dword ptr -28h
.text:004029D0 var_24          = dword ptr -24h
.text:004029D0 var_20          = byte ptr -20h
.text:004029D0 var_1C          = dword ptr -1Ch
.text:004029D0 var_9           = byte ptr -9
.text:004029D0
.text:004029D0                 push    esi
.text:004029D1                 push    ebx
.text:004029D2                 sub     esp, 24h
.text:004029D5                 mov     edx, ds:_iob
.text:004029DB                 mov     ecx, [edx+2Ch]
.text:004029DE                 lea     esi, [edx+20h]
.text:004029E1                 shr     ecx, 5
.text:004029E4                 mov     bl, cl
.text:004029E6                 mov     ecx, [edx+20h]
.text:004029E9                 and     bl, 1
.text:004029EC                 cmp     ecx, [esi+8]
.text:004029EF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004029F2                 setz    [esp+2Ch+var_9]
.text:004029F7                 call    fclose
.text:004029FC                 test    eax, eax
.text:004029FE                 setnz   al
.text:00402A01                 test    bl, bl
.text:00402A03                 jnz     loc_402A93
.text:00402A09                 test    al, al
.text:00402A0B                 jz      short loc_402A60
.text:00402A0D
.text:00402A0D loc_402A0D:                             ; CODE XREF: sub_4029D0+CD↓j
.text:00402A0D                 call    _errno
.text:00402A12                 mov     esi, [eax]
.text:00402A14
.text:00402A14 loc_402A14:                             ; CODE XREF: sub_4029D0+C7↓j
.text:00402A14                 cmp     esi, 9
.text:00402A17                 jz      short loc_402A86
.text:00402A19
.text:00402A19 loc_402A19:                             ; CODE XREF: sub_4029D0+B8↓j
.text:00402A19                                         ; sub_4029D0+C1↓j
.text:00402A19                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402A20                 call    ds:libintl_gettext
.text:00402A26                 mov     ebx, eax
.text:00402A28                 mov     eax, ds:dword_407030
.text:00402A2D                 test    eax, eax
.text:00402A2F                 jz      short loc_402A66
.text:00402A31                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402A34                 call    sub_403BE0
.text:00402A39                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402A3D                 mov     edx, Code
.text:00402A43                 mov     [esp+2Ch+var_1C], ebx
.text:00402A47                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:00402A4F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402A53                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402A56                 call    sub_4046D0
.text:00402A5B                 nop
.text:00402A5C                 lea     esi, [esi+0]
.text:00402A60
.text:00402A60 loc_402A60:                             ; CODE XREF: sub_4029D0+3B↑j
.text:00402A60                                         ; sub_4029D0+B4↓j ...
.text:00402A60                 add     esp, 24h
.text:00402A63                 pop     ebx
.text:00402A64                 pop     esi
.text:00402A65                 retn
.text:00402A66 ; ---------------------------------------------------------------------------
.text:00402A66
.text:00402A66 loc_402A66:                             ; CODE XREF: sub_4029D0+5F↑j
.text:00402A66                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402A6A                 mov     ebx, Code
.text:00402A70                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00402A78                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402A7C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402A7F                 call    sub_4046D0
.text:00402A84                 jmp     short loc_402A60
.text:00402A86 ; ---------------------------------------------------------------------------
.text:00402A86
.text:00402A86 loc_402A86:                             ; CODE XREF: sub_4029D0+47↑j
.text:00402A86                 test    bl, bl
.text:00402A88                 jnz     short loc_402A19
.text:00402A8A                 cmp     [esp+2Ch+var_9], 0
.text:00402A8F                 jnz     short loc_402A60
.text:00402A91                 jmp     short loc_402A19
.text:00402A93 ; ---------------------------------------------------------------------------
.text:00402A93
.text:00402A93 loc_402A93:                             ; CODE XREF: sub_4029D0+33↑j
.text:00402A93                 xor     esi, esi
.text:00402A95                 test    al, al
.text:00402A97                 jz      loc_402A14
.text:00402A9D                 jmp     loc_402A0D
.text:00402A9D sub_4029D0      endp
.text:00402A9D
.text:00402A9D ; ---------------------------------------------------------------------------
.text:00402AA2                 align 10h
.text:00402AB0 aLiteral        db 'literal',0
.text:00402AB8 aShell          db 'shell',0
.text:00402ABE aShellAlways    db 'shell-always',0
.text:00402ACB aC              db 'c',0
.text:00402ACD aEscape         db 'escape',0           ; DATA XREF: .text:00402B00↓o
.text:00402AD4 aLocale         db 'locale',0           ; DATA XREF: .text:00402B04↓o
.text:00402ADB aClocale        db 'clocale',0          ; DATA XREF: .text:00402B08↓o
.text:00402AE3                 align 10h
.text:00402AF0                 mov     al, 2Ah ; '*'
.text:00402AF2                 inc     eax
.text:00402AF3                 add     [eax-41FFBFD6h], bh
.text:00402AF9                 sub     al, [eax+0]
.text:00402AFC                 retf
.text:00402AFC ; ---------------------------------------------------------------------------
.text:00402AFD                 db 2Ah, 40h, 0
.text:00402B00                 dd offset aEscape       ; "escape"
.text:00402B04                 dd offset aLocale       ; "locale"
.text:00402B08                 dd offset aClocale      ; "clocale"
.text:00402B0C                 dd 2 dup(0)
.text:00402B14                 dd 1, 2, 3, 4, 5, 6
.text:00402B2C asc_402B2C:                             ; DATA XREF: sub_402B40+7E↓o
.text:00402B2C                                         ; sub_402B40+A39↓o ...
.text:00402B2C                 text "UTF-16LE", '"',27h,'`'
.text:00402B32                 align 10h
.text:00402B40
.text:00402B40 ; =============== S U B R O U T I N E =======================================
.text:00402B40
.text:00402B40
.text:00402B40 ; int __cdecl sub_402B40(int, int, char *Str, int, int, int)
.text:00402B40 sub_402B40      proc near               ; CODE XREF: sub_402B40+43A↓p
.text:00402B40                                         ; .text:00403703↓p ...
.text:00402B40
.text:00402B40 C               = dword ptr -4Ch
.text:00402B40 Type            = dword ptr -48h
.text:00402B40 SizeInBytes     = dword ptr -44h
.text:00402B40 State           = dword ptr -40h
.text:00402B40 var_3C          = dword ptr -3Ch
.text:00402B40 var_38          = dword ptr -38h
.text:00402B40 var_34          = dword ptr -34h
.text:00402B40 var_30          = dword ptr -30h
.text:00402B40 var_29          = byte ptr -29h
.text:00402B40 var_28          = dword ptr -28h
.text:00402B40 var_22          = byte ptr -22h
.text:00402B40 var_21          = byte ptr -21h
.text:00402B40 var_20          = dword ptr -20h
.text:00402B40 var_1C          = dword ptr -1Ch
.text:00402B40 var_18          = mbstate_t ptr -18h
.text:00402B40 arg_0           = dword ptr  4
.text:00402B40 arg_4           = dword ptr  8
.text:00402B40 Str             = dword ptr  0Ch
.text:00402B40 arg_C           = dword ptr  10h
.text:00402B40 arg_10          = dword ptr  14h
.text:00402B40 arg_14          = dword ptr  18h
.text:00402B40
.text:00402B40                 push    ebp
.text:00402B41                 push    edi
.text:00402B42                 push    esi
.text:00402B43                 push    ebx
.text:00402B44                 sub     esp, 3Ch
.text:00402B47                 mov     edx, ds:__mb_cur_max
.text:00402B4D                 mov     [esp+4Ch+var_34], 0
.text:00402B55                 mov     [esp+4Ch+var_1C], 0
.text:00402B5D                 cmp     dword ptr [edx], 1
.text:00402B60                 mov     [esp+4Ch+var_20], 0
.text:00402B68                 mov     [esp+4Ch+var_21], 0
.text:00402B6D                 setz    [esp+4Ch+var_22]
.text:00402B72                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00402B77                 ja      short def_402B7D ; jumptable 00402B7D default case, cases 0,1
.text:00402B79                 mov     edx, [esp+4Ch+arg_10]
.text:00402B7D                 jmp     ds:jpt_402B7D[edx*4] ; switch jump
.text:00402B7D ; ---------------------------------------------------------------------------
.text:00402B84 jpt_402B7D      dd offset def_402B7D    ; DATA XREF: sub_402B40+3D↑r
.text:00402B84                 dd offset def_402B7D    ; jump table for switch statement
.text:00402B84                 dd offset loc_4034C5
.text:00402B84                 dd offset loc_402BA0
.text:00402B84                 dd offset loc_4034EB
.text:00402B84                 dd offset loc_4034F5
.text:00402B84                 dd offset loc_4034F5
.text:00402BA0 ; ---------------------------------------------------------------------------
.text:00402BA0
.text:00402BA0 loc_402BA0:                             ; CODE XREF: sub_402B40+3D↑j
.text:00402BA0                                         ; DATA XREF: sub_402B40:jpt_402B7D↑o
.text:00402BA0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00402B7D case 3
.text:00402BA4                 cmp     [esp+4Ch+var_34], eax
.text:00402BA8                 jnb     short loc_402BB1
.text:00402BAA                 mov     ebx, [esp+4Ch+arg_0]
.text:00402BAE                 mov     byte ptr [ebx], 22h ; '"'
.text:00402BB1
.text:00402BB1 loc_402BB1:                             ; CODE XREF: sub_402B40+68↑j
.text:00402BB1                 mov     [esp+4Ch+var_34], 1
.text:00402BB9                 mov     [esp+4Ch+var_21], 1
.text:00402BBE                 mov     [esp+4Ch+var_1C], offset asc_402B2C ; "\"'`"
.text:00402BC6
.text:00402BC6 loc_402BC6:                             ; CODE XREF: sub_402B40+9A6↓j
.text:00402BC6                 mov     [esp+4Ch+var_20], 1
.text:00402BCE
.text:00402BCE def_402B7D:                             ; CODE XREF: sub_402B40+37↑j
.text:00402BCE                                         ; sub_402B40+3D↑j ...
.text:00402BCE                 xor     ebp, ebp        ; jumptable 00402B7D default case, cases 0,1
.text:00402BD0
.text:00402BD0 loc_402BD0:                             ; CODE XREF: sub_402B40+3DB↓j
.text:00402BD0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00402BD5                 jz      loc_4034B7
.text:00402BDB                 cmp     ebp, [esp+4Ch+arg_C]
.text:00402BDF
.text:00402BDF loc_402BDF:                             ; CODE XREF: sub_402B40+980↓j
.text:00402BDF                 jz      loc_40344E
.text:00402BE5                 cmp     [esp+4Ch+var_21], 0
.text:00402BEA                 jz      short loc_402C30
.text:00402BEC                 mov     esi, [esp+4Ch+var_20]
.text:00402BF0                 test    esi, esi
.text:00402BF2                 jz      short loc_402C30
.text:00402BF4                 mov     ecx, [esp+4Ch+var_20]
.text:00402BF8                 lea     edi, [ecx+ebp]
.text:00402BFB                 cmp     edi, [esp+4Ch+arg_C]
.text:00402BFF                 ja      short loc_402C30
.text:00402C01                 cld
.text:00402C02                 mov     ebx, [esp+4Ch+Str]
.text:00402C06                 mov     edi, [esp+4Ch+var_1C]
.text:00402C0A                 add     ebx, ebp
.text:00402C0C                 mov     esi, ebx
.text:00402C0E                 cmp     ecx, ecx
.text:00402C10                 repe cmpsb
.text:00402C12                 jnz     short loc_402C30
.text:00402C14                 mov     edx, [esp+4Ch+arg_4]
.text:00402C18                 cmp     [esp+4Ch+var_34], edx
.text:00402C1C                 jnb     short loc_402C2A
.text:00402C1E                 mov     ecx, [esp+4Ch+arg_0]
.text:00402C22                 mov     eax, [esp+4Ch+var_34]
.text:00402C26                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00402C2A
.text:00402C2A loc_402C2A:                             ; CODE XREF: sub_402B40+DC↑j
.text:00402C2A                 inc     [esp+4Ch+var_34]
.text:00402C2E                 mov     esi, esi
.text:00402C30
.text:00402C30 loc_402C30:                             ; CODE XREF: sub_402B40+AA↑j
.text:00402C30                                         ; sub_402B40+B2↑j ...
.text:00402C30                 mov     edi, [esp+4Ch+Str]
.text:00402C34                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00402C39                 movzx   eax, bl
.text:00402C3C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00402C3F                 ja      def_402C45      ; jumptable 00402C45 default case, cases 1-6,14-31,64
.text:00402C45                 jmp     ds:jpt_402C45[eax*4] ; switch jump
.text:00402C45 ; ---------------------------------------------------------------------------
.text:00402C4C jpt_402C45      dd offset loc_402E48, offset def_402C45, offset def_402C45
.text:00402C4C                                         ; DATA XREF: sub_402B40+105↑r
.text:00402C4C                 dd offset def_402C45, offset def_402C45, offset def_402C45 ; jump table for switch statement
.text:00402C4C                 dd offset def_402C45, offset loc_402F20, offset loc_402F3E
.text:00402C4C                 dd offset loc_402F42, offset loc_402F87, offset loc_402F8B
.text:00402C4C                 dd offset loc_402F8F, offset loc_402F93, offset def_402C45
.text:00402C4C                 dd offset def_402C45, offset def_402C45, offset def_402C45
.text:00402C4C                 dd offset def_402C45, offset def_402C45, offset def_402C45
.text:00402C4C                 dd offset def_402C45, offset def_402C45, offset def_402C45
.text:00402C4C                 dd offset def_402C45, offset def_402C45, offset def_402C45
.text:00402C4C                 dd offset def_402C45, offset def_402C45, offset def_402C45
.text:00402C4C                 dd offset def_402C45, offset def_402C45, offset loc_403418
.text:00402C4C                 dd offset loc_403418, offset loc_403418, offset loc_40343A
.text:00402C4C                 dd offset loc_403418, offset def_403042, offset loc_403418
.text:00402C4C                 dd offset loc_402F97, offset loc_403418, offset loc_403418
.text:00402C4C                 dd offset loc_403418, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset loc_403418
.text:00402C4C                 dd offset loc_403418, offset loc_403418, offset loc_403418
.text:00402C4C                 dd offset loc_402FFC, offset def_402C45, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset loc_403418, offset loc_403411
.text:00402C4C                 dd offset def_403042, offset loc_403418, offset def_403042
.text:00402C4C                 dd offset loc_403418, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset def_403042, offset def_403042, offset def_403042
.text:00402C4C                 dd offset loc_403428, offset loc_403418, offset loc_403428
.text:00402C4C                 dd offset loc_40343A
.text:00402E48 ; ---------------------------------------------------------------------------
.text:00402E48
.text:00402E48 loc_402E48:                             ; CODE XREF: sub_402B40+105↑j
.text:00402E48                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:00402E48                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402C45 case 0
.text:00402E4D                 lea     eax, [ebp+1]
.text:00402E50                 jz      loc_402F00
.text:00402E56                 mov     esi, [esp+4Ch+arg_4]
.text:00402E5A                 cmp     [esp+4Ch+var_34], esi
.text:00402E5E                 jnb     short loc_402E6C
.text:00402E60                 mov     eax, [esp+4Ch+arg_0]
.text:00402E64                 mov     ebx, [esp+4Ch+var_34]
.text:00402E68                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00402E6C
.text:00402E6C loc_402E6C:                             ; CODE XREF: sub_402B40+31E↑j
.text:00402E6C                 inc     [esp+4Ch+var_34]
.text:00402E70                 mov     edx, [esp+4Ch+arg_4]
.text:00402E74                 cmp     [esp+4Ch+var_34], edx
.text:00402E78                 jnb     short loc_402E86
.text:00402E7A                 mov     edi, [esp+4Ch+arg_0]
.text:00402E7E                 mov     ecx, [esp+4Ch+var_34]
.text:00402E82                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00402E86
.text:00402E86 loc_402E86:                             ; CODE XREF: sub_402B40+338↑j
.text:00402E86                 inc     [esp+4Ch+var_34]
.text:00402E8A                 mov     esi, [esp+4Ch+arg_4]
.text:00402E8E                 cmp     [esp+4Ch+var_34], esi
.text:00402E92                 jnb     short loc_402EA0
.text:00402E94                 mov     ebx, [esp+4Ch+arg_0]
.text:00402E98                 mov     eax, [esp+4Ch+var_34]
.text:00402E9C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00402EA0
.text:00402EA0 loc_402EA0:                             ; CODE XREF: sub_402B40+352↑j
.text:00402EA0                 inc     [esp+4Ch+var_34]
.text:00402EA4                 mov     bl, 30h ; '0'
.text:00402EA6                 lea     esi, [esi+0]
.text:00402EA9                 lea     edi, [edi+0]
.text:00402EB0
.text:00402EB0 def_403042:                             ; CODE XREF: sub_402B40+105↑j
.text:00402EB0                                         ; sub_402B40+463↓j ...
.text:00402EB0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402C45 cases 37,43-58,65-90,93,95,97-122
.text:00402EB0                                         ; jumptable 00403042 default case, cases 34-38,42-44,46,48-59
.text:00402EB5                 lea     eax, [ebp+1]
.text:00402EB8                 jz      short loc_402F00
.text:00402EBA                 mov     cl, bl
.text:00402EBC                 mov     edi, [esp+4Ch+arg_14]
.text:00402EC0                 mov     esi, 1
.text:00402EC5                 shr     cl, 5
.text:00402EC8                 movzx   edx, cl
.text:00402ECB                 mov     ecx, ebx
.text:00402ECD                 and     ecx, 1Fh
.text:00402ED0                 shl     esi, cl
.text:00402ED2                 test    [edi+edx*4+4], esi
.text:00402ED6                 jz      short loc_402EF2
.text:00402ED8
.text:00402ED8 loc_402ED8:                             ; CODE XREF: sub_402B40+3FC↓j
.text:00402ED8                 mov     edx, [esp+4Ch+arg_4]
.text:00402EDC                 cmp     [esp+4Ch+var_34], edx
.text:00402EE0                 jnb     short loc_402EEE
.text:00402EE2                 mov     edi, [esp+4Ch+arg_0]
.text:00402EE6                 mov     esi, [esp+4Ch+var_34]
.text:00402EEA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00402EEE
.text:00402EEE loc_402EEE:                             ; CODE XREF: sub_402B40+3A0↑j
.text:00402EEE                 inc     [esp+4Ch+var_34]
.text:00402EF2
.text:00402EF2 loc_402EF2:                             ; CODE XREF: sub_402B40+396↑j
.text:00402EF2                 lea     eax, [ebp+1]
.text:00402EF5                 lea     esi, [esi+0]
.text:00402EF9                 lea     edi, [edi+0]
.text:00402F00
.text:00402F00 loc_402F00:                             ; CODE XREF: sub_402B40+310↑j
.text:00402F00                                         ; sub_402B40+378↑j ...
.text:00402F00                 mov     ebp, [esp+4Ch+arg_4]
.text:00402F04                 cmp     [esp+4Ch+var_34], ebp
.text:00402F08                 jnb     short loc_402F15
.text:00402F0A                 mov     edx, [esp+4Ch+arg_0]
.text:00402F0E                 mov     ecx, [esp+4Ch+var_34]
.text:00402F12                 mov     [ecx+edx], bl
.text:00402F15
.text:00402F15 loc_402F15:                             ; CODE XREF: sub_402B40+3C8↑j
.text:00402F15                 inc     [esp+4Ch+var_34]
.text:00402F19                 mov     ebp, eax
.text:00402F1B                 jmp     loc_402BD0
.text:00402F20 ; ---------------------------------------------------------------------------
.text:00402F20
.text:00402F20 loc_402F20:                             ; CODE XREF: sub_402B40+105↑j
.text:00402F20                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:00402F20                 mov     dl, 61h ; 'a'   ; jumptable 00402C45 case 7
.text:00402F22                 lea     esi, [esi+0]
.text:00402F29                 lea     edi, [edi+0]
.text:00402F30
.text:00402F30 loc_402F30:                             ; CODE XREF: sub_402B40+400↓j
.text:00402F30                                         ; sub_402B40+409↓j ...
.text:00402F30                 cmp     [esp+4Ch+var_21], 0
.text:00402F35                 lea     eax, [ebp+1]
.text:00402F38                 jz      short loc_402F00
.text:00402F3A                 mov     bl, dl
.text:00402F3C                 jmp     short loc_402ED8
.text:00402F3E ; ---------------------------------------------------------------------------
.text:00402F3E
.text:00402F3E loc_402F3E:                             ; CODE XREF: sub_402B40+105↑j
.text:00402F3E                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:00402F3E                 mov     dl, 62h ; 'b'   ; jumptable 00402C45 case 8
.text:00402F40                 jmp     short loc_402F30
.text:00402F42 ; ---------------------------------------------------------------------------
.text:00402F42
.text:00402F42 loc_402F42:                             ; CODE XREF: sub_402B40+105↑j
.text:00402F42                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:00402F42                 mov     dl, 74h ; 't'   ; jumptable 00402C45 case 9
.text:00402F44
.text:00402F44 loc_402F44:                             ; CODE XREF: sub_402B40+449↓j
.text:00402F44                                         ; sub_402B40+455↓j ...
.text:00402F44                 cmp     [esp+4Ch+arg_10], 1
.text:00402F49                 jnz     short loc_402F30
.text:00402F4B
.text:00402F4B loc_402F4B:                             ; CODE XREF: sub_402B40+45C↓j
.text:00402F4B                                         ; sub_402B40+4C1↓j ...
.text:00402F4B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403312 cases 91,92,94,96,124
.text:00402F53                 mov     eax, [esp+4Ch+arg_14]
.text:00402F57                 mov     edx, [esp+4Ch+arg_C]
.text:00402F5B                 mov     ecx, [esp+4Ch+Str]
.text:00402F5F                 mov     ebx, [esp+4Ch+arg_4]
.text:00402F63                 mov     [esp+4Ch+var_38], eax ; int
.text:00402F67                 mov     ebp, [esp+4Ch+arg_0]
.text:00402F6B                 mov     [esp+4Ch+State], edx ; int
.text:00402F6F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00402F73                 mov     [esp+4Ch+Type], ebx ; int
.text:00402F77                 mov     [esp+4Ch+C], ebp ; int
.text:00402F7A                 call    sub_402B40
.text:00402F7F
.text:00402F7F loc_402F7F:                             ; CODE XREF: sub_402B40+972↓j
.text:00402F7F                 add     esp, 3Ch
.text:00402F82                 pop     ebx
.text:00402F83                 pop     esi
.text:00402F84                 pop     edi
.text:00402F85                 pop     ebp
.text:00402F86                 retn
.text:00402F87 ; ---------------------------------------------------------------------------
.text:00402F87
.text:00402F87 loc_402F87:                             ; CODE XREF: sub_402B40+105↑j
.text:00402F87                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:00402F87                 mov     dl, 6Eh ; 'n'   ; jumptable 00402C45 case 10
.text:00402F89                 jmp     short loc_402F44
.text:00402F8B ; ---------------------------------------------------------------------------
.text:00402F8B
.text:00402F8B loc_402F8B:                             ; CODE XREF: sub_402B40+105↑j
.text:00402F8B                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:00402F8B                 mov     dl, 76h ; 'v'   ; jumptable 00402C45 case 11
.text:00402F8D                 jmp     short loc_402F30
.text:00402F8F ; ---------------------------------------------------------------------------
.text:00402F8F
.text:00402F8F loc_402F8F:                             ; CODE XREF: sub_402B40+105↑j
.text:00402F8F                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:00402F8F                 mov     dl, 66h ; 'f'   ; jumptable 00402C45 case 12
.text:00402F91                 jmp     short loc_402F30
.text:00402F93 ; ---------------------------------------------------------------------------
.text:00402F93
.text:00402F93 loc_402F93:                             ; CODE XREF: sub_402B40+105↑j
.text:00402F93                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:00402F93                 mov     dl, 72h ; 'r'   ; jumptable 00402C45 case 13
.text:00402F95                 jmp     short loc_402F44
.text:00402F97 ; ---------------------------------------------------------------------------
.text:00402F97
.text:00402F97 loc_402F97:                             ; CODE XREF: sub_402B40+105↑j
.text:00402F97                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:00402F97                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402C45 case 39
.text:00402F9C                 jz      short loc_402F4B ; jumptable 00403312 cases 91,92,94,96,124
.text:00402F9E                 cmp     [esp+4Ch+arg_10], 2
.text:00402FA3                 jnz     def_403042      ; jumptable 00402C45 cases 37,43-58,65-90,93,95,97-122
.text:00402FA3                                         ; jumptable 00403042 default case, cases 34-38,42-44,46,48-59
.text:00402FA9                 mov     edx, [esp+4Ch+arg_4]
.text:00402FAD                 cmp     [esp+4Ch+var_34], edx
.text:00402FB1                 jnb     short loc_402FBF
.text:00402FB3                 mov     ecx, [esp+4Ch+arg_0]
.text:00402FB7                 mov     edi, [esp+4Ch+var_34]
.text:00402FBB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00402FBF
.text:00402FBF loc_402FBF:                             ; CODE XREF: sub_402B40+471↑j
.text:00402FBF                 inc     [esp+4Ch+var_34]
.text:00402FC3                 mov     eax, [esp+4Ch+arg_4]
.text:00402FC7                 cmp     [esp+4Ch+var_34], eax
.text:00402FCB                 jnb     short loc_402FD9
.text:00402FCD                 mov     esi, [esp+4Ch+arg_0]
.text:00402FD1                 mov     edx, [esp+4Ch+var_34]
.text:00402FD5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00402FD9
.text:00402FD9 loc_402FD9:                             ; CODE XREF: sub_402B40+48B↑j
.text:00402FD9                 inc     [esp+4Ch+var_34]
.text:00402FDD                 mov     edi, [esp+4Ch+arg_4]
.text:00402FE1                 cmp     [esp+4Ch+var_34], edi
.text:00402FE5                 jnb     short loc_402FF3
.text:00402FE7                 mov     ecx, [esp+4Ch+arg_0]
.text:00402FEB                 mov     eax, [esp+4Ch+var_34]
.text:00402FEF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00402FF3
.text:00402FF3 loc_402FF3:                             ; CODE XREF: sub_402B40+4A5↑j
.text:00402FF3                                         ; sub_402B40+5C4↓j ...
.text:00402FF3                 inc     [esp+4Ch+var_34]
.text:00402FF7                 jmp     def_403042      ; jumptable 00402C45 cases 37,43-58,65-90,93,95,97-122
.text:00402FF7                                         ; jumptable 00403042 default case, cases 34-38,42-44,46,48-59
.text:00402FFC ; ---------------------------------------------------------------------------
.text:00402FFC
.text:00402FFC loc_402FFC:                             ; CODE XREF: sub_402B40+105↑j
.text:00402FFC                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:00402FFC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402C45 case 63
.text:00403001                 jz      loc_402F4B      ; jumptable 00403312 cases 91,92,94,96,124
.text:00403007                 cmp     [esp+4Ch+arg_10], 3
.text:0040300C                 jnz     def_403042      ; jumptable 00402C45 cases 37,43-58,65-90,93,95,97-122
.text:0040300C                                         ; jumptable 00403042 default case, cases 34-38,42-44,46,48-59
.text:00403012                 lea     edx, [ebp+2]
.text:00403015                 cmp     edx, [esp+4Ch+arg_C]
.text:00403019                 jnb     def_403042      ; jumptable 00402C45 cases 37,43-58,65-90,93,95,97-122
.text:00403019                                         ; jumptable 00403042 default case, cases 34-38,42-44,46,48-59
.text:0040301F                 mov     esi, [esp+4Ch+Str]
.text:00403023                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403028                 jnz     def_403042      ; jumptable 00402C45 cases 37,43-58,65-90,93,95,97-122
.text:00403028                                         ; jumptable 00403042 default case, cases 34-38,42-44,46,48-59
.text:0040302E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403033                 movsx   eax, cl
.text:00403036                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403039                 cmp     eax, 1Dh
.text:0040303C                 ja      def_403042      ; jumptable 00402C45 cases 37,43-58,65-90,93,95,97-122
.text:0040303C                                         ; jumptable 00403042 default case, cases 34-38,42-44,46,48-59
.text:00403042                 jmp     ds:jpt_403042[eax*4] ; switch jump
.text:00403042 ; ---------------------------------------------------------------------------
.text:00403049                 align 4
.text:0040304C jpt_403042      dd offset loc_4030C4    ; DATA XREF: sub_402B40+502↑r
.text:0040304C                 dd offset def_403042    ; jump table for switch statement
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset loc_4030C4
.text:0040304C                 dd offset loc_4030C4
.text:0040304C                 dd offset loc_4030C4
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset loc_4030C4
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset loc_4030C4
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset def_403042
.text:0040304C                 dd offset loc_4030C4
.text:0040304C                 dd offset loc_4030C4
.text:0040304C                 dd offset loc_4030C4
.text:004030C4 ; ---------------------------------------------------------------------------
.text:004030C4
.text:004030C4 loc_4030C4:                             ; CODE XREF: sub_402B40+502↑j
.text:004030C4                                         ; DATA XREF: sub_402B40:jpt_403042↑o
.text:004030C4                 mov     ebp, edx        ; jumptable 00403042 cases 33,39-41,45,47,60-62
.text:004030C6                 mov     bl, cl
.text:004030C8                 mov     edx, [esp+4Ch+arg_4]
.text:004030CC                 cmp     [esp+4Ch+var_34], edx
.text:004030D0                 jnb     short loc_4030DE
.text:004030D2                 mov     ecx, [esp+4Ch+arg_0]
.text:004030D6                 mov     edi, [esp+4Ch+var_34]
.text:004030DA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004030DE
.text:004030DE loc_4030DE:                             ; CODE XREF: sub_402B40+590↑j
.text:004030DE                 inc     [esp+4Ch+var_34]
.text:004030E2                 mov     eax, [esp+4Ch+arg_4]
.text:004030E6                 cmp     [esp+4Ch+var_34], eax
.text:004030EA                 jnb     short loc_4030F8
.text:004030EC                 mov     edx, [esp+4Ch+arg_0]
.text:004030F0                 mov     esi, [esp+4Ch+var_34]
.text:004030F4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004030F8
.text:004030F8 loc_4030F8:                             ; CODE XREF: sub_402B40+5AA↑j
.text:004030F8                 inc     [esp+4Ch+var_34]
.text:004030FC                 mov     edi, [esp+4Ch+arg_4]
.text:00403100                 cmp     [esp+4Ch+var_34], edi
.text:00403104                 jnb     loc_402FF3
.text:0040310A                 mov     eax, [esp+4Ch+arg_0]
.text:0040310E                 mov     ecx, [esp+4Ch+var_34]
.text:00403112                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403116                 jmp     loc_402FF3
.text:00403116 ; ---------------------------------------------------------------------------
.text:0040311B                 align 10h
.text:00403120
.text:00403120 def_402C45:                             ; CODE XREF: sub_402B40+FF↑j
.text:00403120                                         ; sub_402B40+105↑j
.text:00403120                                         ; DATA XREF: ...
.text:00403120                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00402C45 default case, cases 1-6,14-31,64
.text:00403125                 jz      loc_403250
.text:0040312B                 mov     [esp+4Ch+var_28], 1
.text:00403133                 mov     esi, ds:__mb_cur_max
.text:00403139                 movzx   edx, bl
.text:0040313C                 cmp     dword ptr [esi], 1
.text:0040313F                 jz      loc_403234
.text:00403145                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040314D                 mov     [esp+4Ch+C], edx ; C
.text:00403150                 call    _isctype
.text:00403155
.text:00403155 loc_403155:                             ; CODE XREF: sub_402B40+705↓j
.text:00403155                 test    eax, eax
.text:00403157                 setnz   [esp+4Ch+var_29]
.text:0040315C
.text:0040315C loc_40315C:                             ; CODE XREF: sub_402B40+7A5↓j
.text:0040315C                 cmp     [esp+4Ch+var_21], 0
.text:00403161                 lea     eax, [ebp+1]
.text:00403164                 jz      loc_402F00
.text:0040316A                 cmp     [esp+4Ch+var_29], 0
.text:0040316F                 jnz     def_403042      ; jumptable 00402C45 cases 37,43-58,65-90,93,95,97-122
.text:0040316F                                         ; jumptable 00403042 default case, cases 34-38,42-44,46,48-59
.text:00403175
.text:00403175 loc_403175:                             ; CODE XREF: sub_402B40+7AB↓j
.text:00403175                 mov     eax, [esp+4Ch+var_28]
.text:00403179                 lea     edx, [eax+ebp]
.text:0040317C                 lea     esi, [esi+0]
.text:00403180
.text:00403180 loc_403180:                             ; CODE XREF: sub_402B40+6EF↓j
.text:00403180                 cmp     [esp+4Ch+var_21], 0
.text:00403185                 jz      short loc_403200
.text:00403187                 cmp     [esp+4Ch+var_29], 0
.text:0040318C                 jnz     short loc_403200
.text:0040318E                 mov     edi, [esp+4Ch+arg_4]
.text:00403192                 cmp     [esp+4Ch+var_34], edi
.text:00403196                 jnb     short loc_4031A4
.text:00403198                 mov     esi, [esp+4Ch+arg_0]
.text:0040319C                 mov     eax, [esp+4Ch+var_34]
.text:004031A0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004031A4
.text:004031A4 loc_4031A4:                             ; CODE XREF: sub_402B40+656↑j
.text:004031A4                 inc     [esp+4Ch+var_34]
.text:004031A8                 mov     ecx, [esp+4Ch+arg_4]
.text:004031AC                 cmp     [esp+4Ch+var_34], ecx
.text:004031B0                 jnb     short loc_4031C5
.text:004031B2                 mov     cl, bl
.text:004031B4                 mov     esi, [esp+4Ch+arg_0]
.text:004031B8                 mov     edi, [esp+4Ch+var_34]
.text:004031BC                 shr     cl, 6
.text:004031BF                 add     cl, 30h ; '0'
.text:004031C2                 mov     [edi+esi], cl
.text:004031C5
.text:004031C5 loc_4031C5:                             ; CODE XREF: sub_402B40+670↑j
.text:004031C5                 inc     [esp+4Ch+var_34]
.text:004031C9                 mov     edi, [esp+4Ch+arg_4]
.text:004031CD                 cmp     [esp+4Ch+var_34], edi
.text:004031D1                 jnb     short loc_4031E9
.text:004031D3                 mov     cl, bl
.text:004031D5                 mov     esi, [esp+4Ch+arg_0]
.text:004031D9                 shr     cl, 3
.text:004031DC                 mov     edi, [esp+4Ch+var_34]
.text:004031E0                 and     cl, 7
.text:004031E3                 add     cl, 30h ; '0'
.text:004031E6                 mov     [edi+esi], cl
.text:004031E9
.text:004031E9 loc_4031E9:                             ; CODE XREF: sub_402B40+691↑j
.text:004031E9                 inc     [esp+4Ch+var_34]
.text:004031ED                 and     bl, 7
.text:004031F0                 add     bl, 30h ; '0'
.text:004031F3                 lea     esi, [esi+0]
.text:004031F9                 lea     edi, [edi+0]
.text:00403200
.text:00403200 loc_403200:                             ; CODE XREF: sub_402B40+645↑j
.text:00403200                                         ; sub_402B40+64C↑j
.text:00403200                 lea     eax, [ebp+1]
.text:00403203                 cmp     edx, eax
.text:00403205                 jbe     loc_402F00
.text:0040320B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040320F                 cmp     [esp+4Ch+var_34], ebp
.text:00403213                 jnb     short loc_403220
.text:00403215                 mov     ecx, [esp+4Ch+arg_0]
.text:00403219                 mov     edi, [esp+4Ch+var_34]
.text:0040321D                 mov     [edi+ecx], bl
.text:00403220
.text:00403220 loc_403220:                             ; CODE XREF: sub_402B40+6D3↑j
.text:00403220                 inc     [esp+4Ch+var_34]
.text:00403224                 mov     ebp, eax
.text:00403226                 mov     eax, [esp+4Ch+Str]
.text:0040322A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040322F                 jmp     loc_403180
.text:00403234 ; ---------------------------------------------------------------------------
.text:00403234
.text:00403234 loc_403234:                             ; CODE XREF: sub_402B40+5FF↑j
.text:00403234                 mov     ecx, ds:_pctype
.text:0040323A                 mov     edi, [ecx]
.text:0040323C                 movzx   eax, word ptr [edi+edx*2]
.text:00403240                 and     eax, 157h
.text:00403245                 jmp     loc_403155
.text:00403245 ; ---------------------------------------------------------------------------
.text:0040324A                 align 10h
.text:00403250
.text:00403250 loc_403250:                             ; CODE XREF: sub_402B40+5E5↑j
.text:00403250                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403255                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040325D                 mov     [esp+4Ch+var_28], 0
.text:00403265                 mov     [esp+4Ch+var_29], 1
.text:0040326A                 jz      loc_4033FC
.text:00403270
.text:00403270 loc_403270:                             ; CODE XREF: sub_402B40+8CC↓j
.text:00403270                 mov     ecx, [esp+4Ch+arg_C]
.text:00403274                 lea     edx, [esp+4Ch+var_18]
.text:00403278                 mov     edi, [esp+4Ch+Str]
.text:0040327C                 mov     [esp+4Ch+State], edx ; State
.text:00403280                 lea     esi, [esp+4Ch+var_18._State]
.text:00403284                 sub     ecx, ebp
.text:00403286                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040328A                 add     edi, ebp
.text:0040328C                 mov     [esp+4Ch+var_30], edi
.text:00403290                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403294                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403297                 call    mbrtowc
.text:0040329C                 test    eax, eax
.text:0040329E                 mov     edi, eax
.text:004032A0                 jz      short loc_4032E0
.text:004032A2                 cmp     eax, 0FFFFFFFFh
.text:004032A5                 jz      loc_4033F2
.text:004032AB                 cmp     eax, 0FFFFFFFEh
.text:004032AE                 jz      loc_4033B2
.text:004032B4                 cmp     [esp+4Ch+arg_10], 1
.text:004032B9                 jz      short loc_4032F0
.text:004032BB
.text:004032BB loc_4032BB:                             ; CODE XREF: sub_402B40+7B9↓j
.text:004032BB                                         ; sub_402B40+86D↓j
.text:004032BB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004032C0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004032C8                 mov     [esp+4Ch+C], ecx ; C
.text:004032CB                 call    iswctype
.text:004032D0                 test    eax, eax
.text:004032D2                 jnz     short loc_4032D9
.text:004032D4                 mov     [esp+4Ch+var_29], 0
.text:004032D9
.text:004032D9 loc_4032D9:                             ; CODE XREF: sub_402B40+792↑j
.text:004032D9                 mov     [esp+4Ch+var_28], edi
.text:004032DD                 lea     esi, [esi+0]
.text:004032E0
.text:004032E0 loc_4032E0:                             ; CODE XREF: sub_402B40+760↑j
.text:004032E0                                         ; sub_402B40+87B↓j ...
.text:004032E0                 cmp     [esp+4Ch+var_28], 1
.text:004032E5                 jbe     loc_40315C
.text:004032EB                 jmp     loc_403175
.text:004032F0 ; ---------------------------------------------------------------------------
.text:004032F0
.text:004032F0 loc_4032F0:                             ; CODE XREF: sub_402B40+779↑j
.text:004032F0                 cmp     [esp+4Ch+arg_10], eax
.text:004032F4                 mov     edx, 1
.text:004032F9                 jnb     short loc_4032BB
.text:004032FB
.text:004032FB loc_4032FB:                             ; CODE XREF: sub_402B40+867↓j
.text:004032FB                 mov     ecx, [esp+4Ch+Str]
.text:004032FF                 lea     esi, [edx+ebp]
.text:00403302                 movsx   eax, byte ptr [esi+ecx]
.text:00403306                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403309                 cmp     eax, 21h
.text:0040330C                 ja      def_403312      ; jumptable 00403312 default case, cases 93,95,97-123
.text:00403312                 jmp     ds:jpt_403312[eax*4] ; switch jump
.text:00403312 ; ---------------------------------------------------------------------------
.text:00403319                 align 4
.text:0040331C jpt_403312      dd offset loc_402F4B    ; DATA XREF: sub_402B40+7D2↑r
.text:0040331C                 dd offset loc_402F4B    ; jump table for switch statement
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset loc_402F4B
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset loc_402F4B
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset def_403312
.text:0040331C                 dd offset loc_402F4B
.text:004033A4 ; ---------------------------------------------------------------------------
.text:004033A4
.text:004033A4 def_403312:                             ; CODE XREF: sub_402B40+7CC↑j
.text:004033A4                                         ; sub_402B40+7D2↑j
.text:004033A4                                         ; DATA XREF: ...
.text:004033A4                 inc     edx             ; jumptable 00403312 default case, cases 93,95,97-123
.text:004033A5                 cmp     edx, edi
.text:004033A7                 jb      loc_4032FB
.text:004033AD                 jmp     loc_4032BB
.text:004033B2 ; ---------------------------------------------------------------------------
.text:004033B2
.text:004033B2 loc_4033B2:                             ; CODE XREF: sub_402B40+76E↑j
.text:004033B2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004033B6                 mov     [esp+4Ch+var_29], 0
.text:004033BB                 jnb     loc_4032E0
.text:004033C1                 mov     eax, [esp+4Ch+var_30]
.text:004033C5                 cmp     byte ptr [eax], 0
.text:004033C8                 jz      loc_4032E0
.text:004033CE
.text:004033CE loc_4033CE:                             ; CODE XREF: sub_402B40+8AB↓j
.text:004033CE                 inc     [esp+4Ch+var_28]
.text:004033D2                 mov     esi, [esp+4Ch+var_28]
.text:004033D6                 lea     eax, [esi+ebp]
.text:004033D9                 cmp     eax, [esp+4Ch+arg_C]
.text:004033DD                 jnb     loc_4032E0
.text:004033E3                 mov     edi, [esp+4Ch+Str]
.text:004033E7                 cmp     byte ptr [eax+edi], 0
.text:004033EB                 jnz     short loc_4033CE
.text:004033ED                 jmp     loc_4032E0
.text:004033F2 ; ---------------------------------------------------------------------------
.text:004033F2
.text:004033F2 loc_4033F2:                             ; CODE XREF: sub_402B40+765↑j
.text:004033F2                 mov     [esp+4Ch+var_29], 0
.text:004033F7                 jmp     loc_4032E0
.text:004033FC ; ---------------------------------------------------------------------------
.text:004033FC
.text:004033FC loc_4033FC:                             ; CODE XREF: sub_402B40+72A↑j
.text:004033FC                 mov     edx, [esp+4Ch+Str]
.text:00403400                 mov     [esp+4Ch+C], edx ; Str
.text:00403403                 call    strlen
.text:00403408                 mov     [esp+4Ch+arg_C], eax
.text:0040340C                 jmp     loc_403270
.text:00403411 ; ---------------------------------------------------------------------------
.text:00403411
.text:00403411 loc_403411:                             ; CODE XREF: sub_402B40+105↑j
.text:00403411                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:00403411                 mov     dl, bl          ; jumptable 00402C45 case 92
.text:00403413                 jmp     loc_402F44
.text:00403418 ; ---------------------------------------------------------------------------
.text:00403418
.text:00403418 loc_403418:                             ; CODE XREF: sub_402B40+105↑j
.text:00403418                                         ; sub_402B40+902↓j
.text:00403418                                         ; DATA XREF: ...
.text:00403418                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402C45 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040341D                 jnz     def_403042      ; jumptable 00402C45 cases 37,43-58,65-90,93,95,97-122
.text:0040341D                                         ; jumptable 00403042 default case, cases 34-38,42-44,46,48-59
.text:00403423                 jmp     loc_402F4B      ; jumptable 00403312 cases 91,92,94,96,124
.text:00403428 ; ---------------------------------------------------------------------------
.text:00403428
.text:00403428 loc_403428:                             ; CODE XREF: sub_402B40+105↑j
.text:00403428                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:00403428                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00402C45 cases 123,125
.text:0040342D                 jz      short loc_403444
.text:0040342F                 cmp     [esp+4Ch+arg_C], 1
.text:00403434
.text:00403434 loc_403434:                             ; CODE XREF: sub_402B40+90C↓j
.text:00403434                 jnz     def_403042      ; jumptable 00402C45 cases 37,43-58,65-90,93,95,97-122
.text:00403434                                         ; jumptable 00403042 default case, cases 34-38,42-44,46,48-59
.text:0040343A
.text:0040343A loc_40343A:                             ; CODE XREF: sub_402B40+105↑j
.text:0040343A                                         ; DATA XREF: sub_402B40:jpt_402C45↑o
.text:0040343A                 test    ebp, ebp        ; jumptable 00402C45 cases 35,126
.text:0040343C                 jnz     def_403042      ; jumptable 00402C45 cases 37,43-58,65-90,93,95,97-122
.text:0040343C                                         ; jumptable 00403042 default case, cases 34-38,42-44,46,48-59
.text:00403442                 jmp     short loc_403418 ; jumptable 00402C45 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403444 ; ---------------------------------------------------------------------------
.text:00403444
.text:00403444 loc_403444:                             ; CODE XREF: sub_402B40+8ED↑j
.text:00403444                 mov     esi, [esp+4Ch+Str]
.text:00403448                 cmp     byte ptr [esi+1], 0
.text:0040344C                 jmp     short loc_403434
.text:0040344E ; ---------------------------------------------------------------------------
.text:0040344E
.text:0040344E loc_40344E:                             ; CODE XREF: sub_402B40:loc_402BDF↑j
.text:0040344E                 test    ebp, ebp
.text:00403450                 jnz     short loc_40345D
.text:00403452                 cmp     [esp+4Ch+arg_10], 1
.text:00403457                 jz      loc_402F4B      ; jumptable 00403312 cases 91,92,94,96,124
.text:0040345D
.text:0040345D loc_40345D:                             ; CODE XREF: sub_402B40+910↑j
.text:0040345D                 mov     esi, [esp+4Ch+var_1C]
.text:00403461                 test    esi, esi
.text:00403463                 jz      short loc_403498
.text:00403465                 mov     edi, [esp+4Ch+var_1C]
.text:00403469                 movzx   eax, byte ptr [edi]
.text:0040346C                 test    al, al
.text:0040346E                 jz      short loc_403498
.text:00403470
.text:00403470 loc_403470:                             ; CODE XREF: sub_402B40+956↓j
.text:00403470                 mov     ebp, [esp+4Ch+arg_4]
.text:00403474                 cmp     [esp+4Ch+var_34], ebp
.text:00403478                 jnb     short loc_403485
.text:0040347A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040347E                 mov     ebx, [esp+4Ch+var_34]
.text:00403482                 mov     [ebx+ecx], al
.text:00403485
.text:00403485 loc_403485:                             ; CODE XREF: sub_402B40+938↑j
.text:00403485                 inc     [esp+4Ch+var_1C]
.text:00403489                 inc     [esp+4Ch+var_34]
.text:0040348D                 mov     edx, [esp+4Ch+var_1C]
.text:00403491                 movzx   eax, byte ptr [edx]
.text:00403494                 test    al, al
.text:00403496                 jnz     short loc_403470
.text:00403498
.text:00403498 loc_403498:                             ; CODE XREF: sub_402B40+923↑j
.text:00403498                                         ; sub_402B40+92E↑j
.text:00403498                 mov     eax, [esp+4Ch+arg_4]
.text:0040349C                 cmp     [esp+4Ch+var_34], eax
.text:004034A0                 jnb     short loc_4034AE
.text:004034A2                 mov     edi, [esp+4Ch+arg_0]
.text:004034A6                 mov     esi, [esp+4Ch+var_34]
.text:004034AA                 mov     byte ptr [esi+edi], 0
.text:004034AE
.text:004034AE loc_4034AE:                             ; CODE XREF: sub_402B40+960↑j
.text:004034AE                 mov     eax, [esp+4Ch+var_34]
.text:004034B2                 jmp     loc_402F7F
.text:004034B7 ; ---------------------------------------------------------------------------
.text:004034B7
.text:004034B7 loc_4034B7:                             ; CODE XREF: sub_402B40+95↑j
.text:004034B7                 mov     ebx, [esp+4Ch+Str]
.text:004034BB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004034C0                 jmp     loc_402BDF
.text:004034C5 ; ---------------------------------------------------------------------------
.text:004034C5
.text:004034C5 loc_4034C5:                             ; CODE XREF: sub_402B40+3D↑j
.text:004034C5                                         ; DATA XREF: sub_402B40:jpt_402B7D↑o
.text:004034C5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00402B7D case 2
.text:004034C9                 cmp     [esp+4Ch+var_34], edx
.text:004034CD                 jnb     short loc_4034D6
.text:004034CF                 mov     ecx, [esp+4Ch+arg_0]
.text:004034D3                 mov     byte ptr [ecx], 27h ; '''
.text:004034D6
.text:004034D6 loc_4034D6:                             ; CODE XREF: sub_402B40+98D↑j
.text:004034D6                 mov     [esp+4Ch+var_34], 1
.text:004034DE                 mov     [esp+4Ch+var_1C], 402B2Eh
.text:004034E6                 jmp     loc_402BC6
.text:004034EB ; ---------------------------------------------------------------------------
.text:004034EB
.text:004034EB loc_4034EB:                             ; CODE XREF: sub_402B40+3D↑j
.text:004034EB                                         ; DATA XREF: sub_402B40:jpt_402B7D↑o
.text:004034EB                 mov     [esp+4Ch+var_21], 1 ; jumptable 00402B7D case 4
.text:004034F0                 jmp     def_402B7D      ; jumptable 00402B7D default case, cases 0,1
.text:004034F5 ; ---------------------------------------------------------------------------
.text:004034F5
.text:004034F5 loc_4034F5:                             ; CODE XREF: sub_402B40+3D↑j
.text:004034F5                                         ; DATA XREF: sub_402B40:jpt_402B7D↑o
.text:004034F5                 mov     [esp+4Ch+C], 402B30h ; jumptable 00402B7D cases 5,6
.text:004034FC                 call    ds:libintl_gettext
.text:00403502                 cmp     eax, 402B30h
.text:00403507                 mov     edi, eax
.text:00403509                 jz      short loc_403580
.text:0040350B
.text:0040350B loc_40350B:                             ; CODE XREF: sub_402B40+A45↓j
.text:0040350B                                         ; sub_402B40+A4C↓j
.text:0040350B                 mov     [esp+4Ch+C], 402B2Eh
.text:00403512                 call    ds:libintl_gettext
.text:00403518                 cmp     eax, 402B2Eh
.text:0040351D                 mov     edx, eax
.text:0040351F                 jz      short loc_403572
.text:00403521
.text:00403521 loc_403521:                             ; CODE XREF: sub_402B40+A37↓j
.text:00403521                                         ; sub_402B40+A3E↓j
.text:00403521                 mov     [esp+4Ch+var_1C], edi
.text:00403525                 cmp     byte ptr [edi], 0
.text:00403528                 jz      short loc_403558
.text:0040352A
.text:0040352A loc_40352A:                             ; CODE XREF: sub_402B40+A16↓j
.text:0040352A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040352E                 cmp     [esp+4Ch+var_34], ecx
.text:00403532                 jnb     short loc_403547
.text:00403534                 mov     ebp, [esp+4Ch+var_1C]
.text:00403538                 mov     edi, [esp+4Ch+arg_0]
.text:0040353C                 mov     esi, [esp+4Ch+var_34]
.text:00403540                 movzx   ebx, byte ptr [ebp+0]
.text:00403544                 mov     [esi+edi], bl
.text:00403547
.text:00403547 loc_403547:                             ; CODE XREF: sub_402B40+9F2↑j
.text:00403547                 inc     [esp+4Ch+var_1C]
.text:0040354B                 inc     [esp+4Ch+var_34]
.text:0040354F                 mov     eax, [esp+4Ch+var_1C]
.text:00403553                 cmp     byte ptr [eax], 0
.text:00403556                 jnz     short loc_40352A
.text:00403558
.text:00403558 loc_403558:                             ; CODE XREF: sub_402B40+9E8↑j
.text:00403558                 mov     [esp+4Ch+var_21], 1
.text:0040355D                 mov     [esp+4Ch+var_1C], edx
.text:00403561                 mov     [esp+4Ch+C], edx ; Str
.text:00403564                 call    strlen
.text:00403569                 mov     [esp+4Ch+var_20], eax
.text:0040356D                 jmp     def_402B7D      ; jumptable 00402B7D default case, cases 0,1
.text:00403572 ; ---------------------------------------------------------------------------
.text:00403572
.text:00403572 loc_403572:                             ; CODE XREF: sub_402B40+9DF↑j
.text:00403572                 cmp     [esp+4Ch+arg_10], 6
.text:00403577                 jnz     short loc_403521
.text:00403579                 mov     edx, offset asc_402B2C ; "\"'`"
.text:0040357E                 jmp     short loc_403521
.text:00403580 ; ---------------------------------------------------------------------------
.text:00403580
.text:00403580 loc_403580:                             ; CODE XREF: sub_402B40+9C9↑j
.text:00403580                 cmp     [esp+4Ch+arg_10], 6
.text:00403585                 jnz     short loc_40350B
.text:00403587                 mov     edi, offset asc_402B2C ; "\"'`"
.text:0040358C                 jmp     loc_40350B
.text:0040358C sub_402B40      endp
.text:0040358C
.text:00403591 ; ---------------------------------------------------------------------------
.text:00403591                 jmp     short loc_4035A0
.text:00403591 ; ---------------------------------------------------------------------------
.text:00403593                 align 10h
.text:004035A0
.text:004035A0 loc_4035A0:                             ; CODE XREF: .text:00403591↑j
.text:004035A0                 sub     esp, 0Ch
.text:004035A3                 mov     [esp+4], ebx
.text:004035A7                 mov     [esp+8], esi
.text:004035AB                 call    _errno
.text:004035B0                 mov     esi, [eax]
.text:004035B2                 mov     dword ptr [esp], 24h ; '$'
.text:004035B9                 call    sub_404390
.text:004035BE                 mov     edx, [esp+10h]
.text:004035C2                 mov     ebx, eax
.text:004035C4                 test    edx, edx
.text:004035C6                 jz      short loc_403611
.text:004035C8
.text:004035C8 loc_4035C8:                             ; CODE XREF: .text:00403616↓j
.text:004035C8                 mov     ecx, [edx]
.text:004035CA                 mov     [ebx], ecx
.text:004035CC                 mov     ecx, [edx+4]
.text:004035CF                 mov     [ebx+4], ecx
.text:004035D2                 mov     ecx, [edx+8]
.text:004035D5                 mov     [ebx+8], ecx
.text:004035D8                 mov     ecx, [edx+0Ch]
.text:004035DB                 mov     [ebx+0Ch], ecx
.text:004035DE                 mov     ecx, [edx+10h]
.text:004035E1                 mov     [ebx+10h], ecx
.text:004035E4                 mov     ecx, [edx+14h]
.text:004035E7                 mov     [ebx+14h], ecx
.text:004035EA                 mov     ecx, [edx+18h]
.text:004035ED                 mov     [ebx+18h], ecx
.text:004035F0                 mov     ecx, [edx+1Ch]
.text:004035F3                 mov     [ebx+1Ch], ecx
.text:004035F6                 mov     ecx, [edx+20h]
.text:004035F9                 mov     [ebx+20h], ecx
.text:004035FC                 call    _errno
.text:00403601                 mov     [eax], esi
.text:00403603                 mov     esi, [esp+8]
.text:00403607                 mov     eax, ebx
.text:00403609                 mov     ebx, [esp+4]
.text:0040360D                 add     esp, 0Ch
.text:00403610                 retn
.text:00403611 ; ---------------------------------------------------------------------------
.text:00403611
.text:00403611 loc_403611:                             ; CODE XREF: .text:004035C6↑j
.text:00403611                 mov     edx, offset dword_407140
.text:00403616                 jmp     short loc_4035C8
.text:00403616 ; ---------------------------------------------------------------------------
.text:00403618                 align 10h
.text:00403620                 mov     eax, [esp+4]
.text:00403624                 test    eax, eax
.text:00403626                 jz      short loc_403630
.text:00403628
.text:00403628 loc_403628:                             ; CODE XREF: .text:00403635↓j
.text:00403628                 mov     eax, [eax]
.text:0040362A                 retn
.text:0040362A ; ---------------------------------------------------------------------------
.text:0040362B                 align 10h
.text:00403630
.text:00403630 loc_403630:                             ; CODE XREF: .text:00403626↑j
.text:00403630                 mov     eax, offset dword_407140
.text:00403635                 jmp     short loc_403628
.text:00403635 ; ---------------------------------------------------------------------------
.text:00403637                 align 10h
.text:00403640                 mov     edx, [esp+4]
.text:00403644                 test    edx, edx
.text:00403646                 jz      short loc_403650
.text:00403648
.text:00403648 loc_403648:                             ; CODE XREF: .text:00403655↓j
.text:00403648                 mov     ecx, [esp+8]
.text:0040364C                 mov     [edx], ecx
.text:0040364E                 retn
.text:0040364E ; ---------------------------------------------------------------------------
.text:0040364F                 align 10h
.text:00403650
.text:00403650 loc_403650:                             ; CODE XREF: .text:00403646↑j
.text:00403650                 mov     edx, offset dword_407140
.text:00403655                 jmp     short loc_403648
.text:00403655 ; ---------------------------------------------------------------------------
.text:00403657                 align 10h
.text:00403660                 sub     esp, 8
.text:00403663                 mov     eax, [esp+0Ch]
.text:00403667                 movzx   ecx, byte ptr [esp+10h]
.text:0040366C                 mov     [esp], ebx
.text:0040366F                 mov     ebx, [esp+14h]
.text:00403673                 mov     [esp+4], esi
.text:00403677                 mov     dl, cl
.text:00403679                 shr     dl, 5
.text:0040367C                 movzx   edx, dl
.text:0040367F                 shl     edx, 2
.text:00403682                 test    eax, eax
.text:00403684                 lea     esi, [edx+eax+4]
.text:00403688                 jz      short loc_4036B0
.text:0040368A
.text:0040368A loc_40368A:                             ; CODE XREF: .text:004036B6↓j
.text:0040368A                 mov     edx, [esi]
.text:0040368C                 and     ecx, 1Fh
.text:0040368F                 and     ebx, 1
.text:00403692                 mov     eax, edx
.text:00403694                 shr     eax, cl
.text:00403696                 and     eax, 1
.text:00403699                 xor     ebx, eax
.text:0040369B                 shl     ebx, cl
.text:0040369D                 xor     edx, ebx
.text:0040369F                 mov     [esi], edx
.text:004036A1                 mov     ebx, [esp]
.text:004036A4                 mov     esi, [esp+4]
.text:004036A8                 add     esp, 8
.text:004036AB                 retn
.text:004036AB ; ---------------------------------------------------------------------------
.text:004036AC                 align 10h
.text:004036B0
.text:004036B0 loc_4036B0:                             ; CODE XREF: .text:00403688↑j
.text:004036B0                 lea     esi, dword_407144[edx]
.text:004036B6                 jmp     short loc_40368A
.text:004036B6 ; ---------------------------------------------------------------------------
.text:004036B8                 align 10h
.text:004036C0                 sub     esp, 2Ch
.text:004036C3                 mov     [esp+24h], ebx
.text:004036C7                 mov     ebx, [esp+40h]
.text:004036CB                 mov     [esp+28h], esi
.text:004036CF                 test    ebx, ebx
.text:004036D1                 jz      short loc_403720
.text:004036D3
.text:004036D3 loc_4036D3:                             ; CODE XREF: .text:00403725↓j
.text:004036D3                 call    _errno
.text:004036D8                 mov     esi, [eax]
.text:004036DA                 mov     [esp+14h], ebx
.text:004036DE                 mov     edx, [ebx]
.text:004036E0                 mov     ecx, [esp+38h]
.text:004036E4                 mov     ebx, [esp+3Ch]
.text:004036E8                 mov     [esp+10h], edx
.text:004036EC                 mov     edx, [esp+34h]
.text:004036F0                 mov     [esp+0Ch], ebx
.text:004036F4                 mov     [esp+8], ecx
.text:004036F8                 mov     [esp+4], edx
.text:004036FC                 mov     edx, [esp+30h]
.text:00403700                 mov     [esp], edx
.text:00403703                 call    sub_402B40
.text:00403708                 mov     ebx, eax
.text:0040370A                 call    _errno
.text:0040370F                 mov     [eax], esi
.text:00403711                 mov     esi, [esp+28h]
.text:00403715                 mov     eax, ebx
.text:00403717                 mov     ebx, [esp+24h]
.text:0040371B                 add     esp, 2Ch
.text:0040371E                 retn
.text:0040371E ; ---------------------------------------------------------------------------
.text:0040371F                 align 10h
.text:00403720
.text:00403720 loc_403720:                             ; CODE XREF: .text:004036D1↑j
.text:00403720                 mov     ebx, offset dword_407140
.text:00403725                 jmp     short loc_4036D3
.text:00403725 ; ---------------------------------------------------------------------------
.text:00403727                 align 10h
.text:00403730                 push    ebp
.text:00403731                 push    edi
.text:00403732                 push    esi
.text:00403733                 push    ebx
.text:00403734                 sub     esp, 2Ch
.text:00403737                 mov     ebp, [esp+48h]
.text:0040373B                 call    _errno
.text:00403740                 mov     edx, [eax]
.text:00403742                 test    ebp, ebp
.text:00403744                 mov     ebx, ebp
.text:00403746                 mov     [esp+28h], edx
.text:0040374A                 jz      loc_403800
.text:00403750
.text:00403750 loc_403750:                             ; CODE XREF: .text:00403805↓j
.text:00403750                 call    _errno
.text:00403755                 mov     edi, [eax]
.text:00403757                 mov     esi, ebp
.text:00403759                 mov     [esp+14h], ebx
.text:0040375D                 mov     ecx, [ebx]
.text:0040375F                 mov     dword ptr [esp], 0
.text:00403766                 mov     edx, [esp+44h]
.text:0040376A                 mov     dword ptr [esp+4], 0
.text:00403772                 mov     eax, [esp+40h]
.text:00403776                 mov     [esp+10h], ecx
.text:0040377A                 mov     [esp+0Ch], edx
.text:0040377E                 mov     [esp+8], eax
.text:00403782                 call    sub_402B40
.text:00403787                 mov     ebx, eax
.text:00403789                 call    _errno
.text:0040378E                 mov     [eax], edi
.text:00403790                 lea     edi, [ebx+1]
.text:00403793                 mov     [esp], edi
.text:00403796                 call    sub_404390
.text:0040379B                 mov     [esp+24h], eax
.text:0040379F                 test    ebp, ebp
.text:004037A1                 jz      short loc_4037F2
.text:004037A3
.text:004037A3 loc_4037A3:                             ; CODE XREF: .text:004037F7↓j
.text:004037A3                 call    _errno
.text:004037A8                 mov     ebp, [eax]
.text:004037AA                 mov     [esp+14h], esi
.text:004037AE                 mov     ecx, [esi]
.text:004037B0                 mov     [esp+4], edi
.text:004037B4                 mov     edx, [esp+44h]
.text:004037B8                 mov     esi, [esp+24h]
.text:004037BC                 mov     [esp+10h], ecx
.text:004037C0                 mov     eax, [esp+40h]
.text:004037C4                 mov     [esp+0Ch], edx
.text:004037C8                 mov     [esp], esi
.text:004037CB                 mov     [esp+8], eax
.text:004037CF                 call    sub_402B40
.text:004037D4                 call    _errno
.text:004037D9                 mov     [eax], ebp
.text:004037DB                 call    _errno
.text:004037E0                 mov     ebx, [esp+28h]
.text:004037E4                 mov     [eax], ebx
.text:004037E6                 mov     eax, [esp+24h]
.text:004037EA                 add     esp, 2Ch
.text:004037ED                 pop     ebx
.text:004037EE                 pop     esi
.text:004037EF                 pop     edi
.text:004037F0                 pop     ebp
.text:004037F1                 retn
.text:004037F2 ; ---------------------------------------------------------------------------
.text:004037F2
.text:004037F2 loc_4037F2:                             ; CODE XREF: .text:004037A1↑j
.text:004037F2                 mov     esi, offset dword_407140
.text:004037F7                 jmp     short loc_4037A3
.text:004037F7 ; ---------------------------------------------------------------------------
.text:004037F9                 align 10h
.text:00403800
.text:00403800 loc_403800:                             ; CODE XREF: .text:0040374A↑j
.text:00403800                 mov     ebx, offset dword_407140
.text:00403805                 jmp     loc_403750
.text:00403805 ; ---------------------------------------------------------------------------
.text:0040380A                 align 10h
.text:00403810                 sub     esp, 1Ch
.text:00403813                 mov     edx, [esp+24h]
.text:00403817                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:0040381F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403827                 mov     [esp+4], edx
.text:0040382B                 mov     edx, [esp+20h]
.text:0040382F                 mov     [esp], edx
.text:00403832                 call    sub_403C80
.text:00403837                 add     esp, 1Ch
.text:0040383A                 retn
.text:0040383A ; ---------------------------------------------------------------------------
.text:0040383B                 align 10h
.text:00403840                 sub     esp, 1Ch
.text:00403843                 mov     edx, [esp+20h]
.text:00403847                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:0040384F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403857                 mov     [esp+4], edx
.text:0040385B                 mov     dword ptr [esp], 0
.text:00403862                 call    sub_403C80
.text:00403867                 add     esp, 1Ch
.text:0040386A                 retn
.text:0040386A ; ---------------------------------------------------------------------------
.text:0040386B                 align 10h
.text:00403870
.text:00403870 ; =============== S U B R O U T I N E =======================================
.text:00403870
.text:00403870
.text:00403870 ; int __cdecl sub_403870(int, int, char *)
.text:00403870 sub_403870      proc near               ; CODE XREF: .text:004026FA↑p
.text:00403870                                         ; sub_402710+1A↑p
.text:00403870
.text:00403870 var_BC          = dword ptr -0BCh
.text:00403870 var_B8          = dword ptr -0B8h
.text:00403870 var_B4          = dword ptr -0B4h
.text:00403870 var_B0          = dword ptr -0B0h
.text:00403870 var_AC          = dword ptr -0ACh
.text:00403870 var_A8          = dword ptr -0A8h
.text:00403870 var_A4          = dword ptr -0A4h
.text:00403870 var_A0          = dword ptr -0A0h
.text:00403870 var_9C          = dword ptr -9Ch
.text:00403870 var_98          = dword ptr -98h
.text:00403870 var_94          = dword ptr -94h
.text:00403870 var_90          = dword ptr -90h
.text:00403870 var_8C          = dword ptr -8Ch
.text:00403870 var_7C          = dword ptr -7Ch
.text:00403870 var_78          = dword ptr -78h
.text:00403870 var_74          = dword ptr -74h
.text:00403870 var_70          = dword ptr -70h
.text:00403870 var_6C          = dword ptr -6Ch
.text:00403870 var_68          = dword ptr -68h
.text:00403870 var_64          = dword ptr -64h
.text:00403870 var_60          = dword ptr -60h
.text:00403870 var_5C          = dword ptr -5Ch
.text:00403870 var_4C          = dword ptr -4Ch
.text:00403870 var_48          = dword ptr -48h
.text:00403870 var_44          = dword ptr -44h
.text:00403870 var_40          = dword ptr -40h
.text:00403870 var_3C          = dword ptr -3Ch
.text:00403870 var_38          = dword ptr -38h
.text:00403870 var_34          = dword ptr -34h
.text:00403870 var_30          = dword ptr -30h
.text:00403870 var_2C          = dword ptr -2Ch
.text:00403870 arg_0           = dword ptr  4
.text:00403870 arg_4           = dword ptr  8
.text:00403870 arg_8           = dword ptr  0Ch
.text:00403870
.text:00403870                 push    ebp
.text:00403871                 xor     eax, eax
.text:00403873                 mov     ecx, 8
.text:00403878                 push    edi
.text:00403879                 push    esi
.text:0040387A                 push    ebx
.text:0040387B                 sub     esp, 0ACh
.text:00403881                 mov     ebp, [esp+0BCh+arg_4]
.text:00403888                 cld
.text:00403889                 lea     edi, [esp+0BCh+var_A8]
.text:0040388D                 mov     [esp+0BCh+var_AC], ebp
.text:00403891                 rep stosd
.text:00403893                 mov     eax, [esp+0BCh+var_8C]
.text:00403897                 mov     edi, [esp+0BCh+var_AC]
.text:0040389B                 mov     esi, [esp+0BCh+var_A8]
.text:0040389F                 mov     [esp+0BCh+var_5C], eax
.text:004038A3                 mov     ebp, [esp+0BCh+var_A4]
.text:004038A7                 mov     eax, [esp+0BCh+var_AC]
.text:004038AB                 mov     [esp+0BCh+var_7C], edi
.text:004038AF                 mov     ecx, [esp+0BCh+var_94]
.text:004038B3                 mov     edi, [esp+0BCh+var_A0]
.text:004038B7                 mov     [esp+0BCh+var_78], esi
.text:004038BB                 mov     edx, [esp+0BCh+var_90]
.text:004038BF                 mov     esi, [esp+0BCh+var_9C]
.text:004038C3                 mov     [esp+0BCh+var_4C], eax
.text:004038C7                 mov     ebx, [esp+0BCh+var_98]
.text:004038CB                 mov     eax, [esp+0BCh+var_A8]
.text:004038CF                 mov     [esp+0BCh+var_74], ebp
.text:004038D3                 mov     [esp+0BCh+var_70], edi
.text:004038D7                 mov     [esp+0BCh+var_6C], esi
.text:004038DB                 mov     [esp+0BCh+var_68], ebx
.text:004038DF                 mov     [esp+0BCh+var_64], ecx
.text:004038E3                 mov     [esp+0BCh+var_60], edx
.text:004038E7                 mov     [esp+0BCh+var_48], eax
.text:004038EB                 mov     [esp+0BCh+var_44], ebp
.text:004038EF                 mov     [esp+0BCh+var_40], edi
.text:004038F3                 mov     [esp+0BCh+var_3C], esi
.text:004038FA                 mov     [esp+0BCh+var_38], ebx
.text:00403901                 mov     ebx, [esp+0BCh+var_8C]
.text:00403905                 mov     [esp+0BCh+var_30], edx
.text:0040390C                 mov     edx, [esp+0BCh+arg_8]
.text:00403913                 mov     [esp+0BCh+var_34], ecx
.text:0040391A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040391E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00403922                 mov     edx, [esp+0BCh+arg_0]
.text:00403929                 mov     [esp+0BCh+var_2C], ebx
.text:00403930                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00403934                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040393C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040393F                 call    sub_403C80
.text:00403944                 add     esp, 0ACh
.text:0040394A                 pop     ebx
.text:0040394B                 pop     esi
.text:0040394C                 pop     edi
.text:0040394D                 pop     ebp
.text:0040394E                 retn
.text:0040394E sub_403870      endp
.text:0040394E
.text:0040394E ; ---------------------------------------------------------------------------
.text:0040394F                 align 10h
.text:00403950                 push    ebp
.text:00403951                 xor     eax, eax
.text:00403953                 mov     ecx, 8
.text:00403958                 push    edi
.text:00403959                 push    esi
.text:0040395A                 push    ebx
.text:0040395B                 sub     esp, 0ACh
.text:00403961                 mov     edx, [esp+0C4h]
.text:00403968                 cld
.text:00403969                 lea     edi, [esp+14h]
.text:0040396D                 mov     [esp+10h], edx
.text:00403971                 rep stosd
.text:00403973                 mov     eax, [esp+30h]
.text:00403977                 mov     ebp, [esp+10h]
.text:0040397B                 mov     edi, [esp+14h]
.text:0040397F                 mov     [esp+60h], eax
.text:00403983                 mov     esi, [esp+20h]
.text:00403987                 mov     eax, [esp+10h]
.text:0040398B                 mov     [esp+40h], ebp
.text:0040398F                 mov     ecx, [esp+28h]
.text:00403993                 mov     ebp, [esp+18h]
.text:00403997                 mov     [esp+44h], edi
.text:0040399B                 mov     edx, [esp+2Ch]
.text:0040399F                 mov     edi, [esp+1Ch]
.text:004039A3                 mov     [esp+70h], eax
.text:004039A7                 mov     ebx, [esp+24h]
.text:004039AB                 mov     eax, [esp+14h]
.text:004039AF                 mov     [esp+48h], ebp
.text:004039B3                 mov     [esp+4Ch], edi
.text:004039B7                 mov     [esp+50h], esi
.text:004039BB                 mov     [esp+54h], ebx
.text:004039BF                 mov     [esp+58h], ecx
.text:004039C3                 mov     [esp+5Ch], edx
.text:004039C7                 mov     [esp+74h], eax
.text:004039CB                 mov     [esp+78h], ebp
.text:004039CF                 mov     [esp+7Ch], edi
.text:004039D3                 mov     [esp+80h], esi
.text:004039DA                 mov     [esp+84h], ebx
.text:004039E1                 mov     esi, [esp+30h]
.text:004039E5                 lea     ebx, [esp+70h]
.text:004039E9                 mov     [esp+8Ch], edx
.text:004039F0                 mov     edx, [esp+0C8h]
.text:004039F7                 mov     [esp+88h], ecx
.text:004039FE                 mov     ecx, [esp+0CCh]
.text:00403A05                 mov     [esp+4], edx
.text:00403A09                 mov     edx, [esp+0C0h]
.text:00403A10                 mov     [esp+90h], esi
.text:00403A17                 mov     [esp+0Ch], ebx
.text:00403A1B                 mov     [esp+8], ecx
.text:00403A1F                 mov     [esp], edx
.text:00403A22                 call    sub_403C80
.text:00403A27                 add     esp, 0ACh
.text:00403A2D                 pop     ebx
.text:00403A2E                 pop     esi
.text:00403A2F                 pop     edi
.text:00403A30                 pop     ebp
.text:00403A31                 retn
.text:00403A31 ; ---------------------------------------------------------------------------
.text:00403A32                 align 10h
.text:00403A40                 push    ebp
.text:00403A41                 xor     eax, eax
.text:00403A43                 mov     ecx, 8
.text:00403A48                 push    edi
.text:00403A49                 push    esi
.text:00403A4A                 push    ebx
.text:00403A4B                 sub     esp, 0ACh
.text:00403A51                 mov     edi, [esp+0C0h]
.text:00403A58                 cld
.text:00403A59                 mov     [esp+10h], edi
.text:00403A5D                 lea     edi, [esp+14h]
.text:00403A61                 rep stosd
.text:00403A63                 mov     eax, [esp+30h]
.text:00403A67                 mov     esi, [esp+10h]
.text:00403A6B                 mov     ebx, [esp+14h]
.text:00403A6F                 mov     [esp+60h], eax
.text:00403A73                 mov     ebp, [esp+18h]
.text:00403A77                 mov     eax, [esp+10h]
.text:00403A7B                 mov     [esp+40h], esi
.text:00403A7F                 mov     edi, [esp+1Ch]
.text:00403A83                 mov     esi, [esp+20h]
.text:00403A87                 mov     [esp+44h], ebx
.text:00403A8B                 mov     ecx, [esp+28h]
.text:00403A8F                 mov     edx, [esp+2Ch]
.text:00403A93                 mov     [esp+70h], eax
.text:00403A97                 mov     ebx, [esp+24h]
.text:00403A9B                 mov     eax, [esp+14h]
.text:00403A9F                 mov     [esp+48h], ebp
.text:00403AA3                 mov     [esp+4Ch], edi
.text:00403AA7                 mov     [esp+50h], esi
.text:00403AAB                 mov     [esp+54h], ebx
.text:00403AAF                 mov     [esp+58h], ecx
.text:00403AB3                 mov     [esp+5Ch], edx
.text:00403AB7                 mov     [esp+74h], eax
.text:00403ABB                 mov     [esp+78h], ebp
.text:00403ABF                 mov     [esp+7Ch], edi
.text:00403AC3                 mov     [esp+80h], esi
.text:00403ACA                 mov     [esp+84h], ebx
.text:00403AD1                 mov     [esp+8Ch], edx
.text:00403AD8                 lea     edx, [esp+70h]
.text:00403ADC                 mov     [esp+88h], ecx
.text:00403AE3                 mov     ecx, [esp+30h]
.text:00403AE7                 mov     [esp+0Ch], edx
.text:00403AEB                 mov     edx, [esp+0C4h]
.text:00403AF2                 mov     [esp+90h], ecx
.text:00403AF9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403B01                 mov     [esp+4], edx
.text:00403B05                 mov     dword ptr [esp], 0
.text:00403B0C                 call    sub_403C80
.text:00403B11                 add     esp, 0ACh
.text:00403B17                 pop     ebx
.text:00403B18                 pop     esi
.text:00403B19                 pop     edi
.text:00403B1A                 pop     ebp
.text:00403B1B                 retn
.text:00403B1B ; ---------------------------------------------------------------------------
.text:00403B1C                 align 10h
.text:00403B20                 push    edi
.text:00403B21                 push    esi
.text:00403B22                 push    ebx
.text:00403B23                 sub     esp, 40h
.text:00403B26                 mov     edx, ds:dword_40714C
.text:00403B2C                 mov     ebx, ds:dword_407140
.text:00403B32                 mov     esi, ds:dword_407148
.text:00403B38                 mov     edi, ds:dword_407144
.text:00403B3E                 mov     [esp+1Ch], edx
.text:00403B42                 mov     ecx, ds:dword_407150
.text:00403B48                 mov     edx, ds:dword_407160
.text:00403B4E                 mov     [esp+10h], ebx
.text:00403B52                 mov     ebx, ds:dword_407154
.text:00403B58                 mov     [esp+30h], edx
.text:00403B5C                 movzx   edx, byte ptr [esp+54h]
.text:00403B61                 mov     [esp+18h], esi
.text:00403B65                 mov     esi, ds:dword_40715C
.text:00403B6B                 mov     [esp+14h], edi
.text:00403B6F                 mov     edi, ds:dword_407158
.text:00403B75                 mov     [esp+20h], ecx
.text:00403B79                 mov     cl, dl
.text:00403B7B                 shr     cl, 5
.text:00403B7E                 mov     [esp+24h], ebx
.text:00403B82                 movzx   ebx, cl
.text:00403B85                 mov     [esp+2Ch], esi
.text:00403B89                 lea     esi, [esp+10h]
.text:00403B8D                 mov     [esp+28h], edi
.text:00403B91                 lea     edi, [esi+ebx*4]
.text:00403B94                 mov     ebx, edx
.text:00403B96                 mov     edx, [edi+4]
.text:00403B99                 and     ebx, 1Fh
.text:00403B9C                 mov     cl, bl
.text:00403B9E                 mov     eax, edx
.text:00403BA0                 shr     eax, cl
.text:00403BA2                 and     eax, 1
.text:00403BA5                 xor     eax, 1
.text:00403BA8                 shl     eax, cl
.text:00403BAA                 xor     edx, eax
.text:00403BAC                 mov     [edi+4], edx
.text:00403BAF                 mov     edx, [esp+50h]
.text:00403BB3                 mov     [esp+0Ch], esi
.text:00403BB7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403BBF                 mov     [esp+4], edx
.text:00403BC3                 mov     dword ptr [esp], 0
.text:00403BCA                 call    sub_403C80
.text:00403BCF                 add     esp, 40h
.text:00403BD2                 pop     ebx
.text:00403BD3                 pop     esi
.text:00403BD4                 pop     edi
.text:00403BD5                 retn
.text:00403BD5 ; ---------------------------------------------------------------------------
.text:00403BD6                 align 10h
.text:00403BE0
.text:00403BE0 ; =============== S U B R O U T I N E =======================================
.text:00403BE0
.text:00403BE0
.text:00403BE0 ; int __cdecl sub_403BE0(char *)
.text:00403BE0 sub_403BE0      proc near               ; CODE XREF: sub_4029D0+64↑p
.text:00403BE0
.text:00403BE0 var_4C          = dword ptr -4Ch
.text:00403BE0 var_48          = dword ptr -48h
.text:00403BE0 var_44          = dword ptr -44h
.text:00403BE0 var_40          = dword ptr -40h
.text:00403BE0 var_3C          = dword ptr -3Ch
.text:00403BE0 var_38          = dword ptr -38h
.text:00403BE0 var_34          = dword ptr -34h
.text:00403BE0 var_30          = dword ptr -30h
.text:00403BE0 var_2C          = dword ptr -2Ch
.text:00403BE0 var_28          = dword ptr -28h
.text:00403BE0 var_24          = dword ptr -24h
.text:00403BE0 var_20          = dword ptr -20h
.text:00403BE0 var_1C          = dword ptr -1Ch
.text:00403BE0 arg_0           = dword ptr  4
.text:00403BE0
.text:00403BE0                 sub     esp, 4Ch
.text:00403BE3                 mov     ecx, ds:dword_407140
.text:00403BE9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00403BF1                 mov     edx, ds:dword_407144
.text:00403BF7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00403BFE                 mov     [esp+4Ch+var_3C], ecx
.text:00403C02                 mov     ecx, ds:dword_40714C
.text:00403C08                 mov     [esp+4Ch+var_38], edx
.text:00403C0C                 mov     edx, ds:dword_407148
.text:00403C12                 mov     [esp+4Ch+var_30], ecx
.text:00403C16                 mov     ecx, ds:dword_407150
.text:00403C1C                 mov     eax, edx
.text:00403C1E                 shr     eax, 1Ah
.text:00403C21                 and     eax, 1
.text:00403C24                 xor     eax, 1
.text:00403C27                 mov     [esp+4Ch+var_2C], ecx
.text:00403C2B                 shl     eax, 1Ah
.text:00403C2E                 mov     ecx, ds:dword_407154
.text:00403C34                 xor     edx, eax
.text:00403C36                 mov     [esp+4Ch+var_34], edx
.text:00403C3A                 mov     edx, [esp+4Ch+arg_0]
.text:00403C3E                 mov     [esp+4Ch+var_28], ecx
.text:00403C42                 mov     ecx, ds:dword_407158
.text:00403C48                 mov     [esp+4Ch+var_48], edx ; char *
.text:00403C4C                 mov     [esp+4Ch+var_24], ecx
.text:00403C50                 mov     ecx, ds:dword_40715C
.text:00403C56                 mov     [esp+4Ch+var_20], ecx
.text:00403C5A                 mov     ecx, ds:dword_407160
.text:00403C60                 mov     [esp+4Ch+var_1C], ecx
.text:00403C64                 lea     ecx, [esp+4Ch+var_3C]
.text:00403C68                 mov     [esp+4Ch+var_40], ecx ; int
.text:00403C6C                 call    sub_403C80
.text:00403C71                 add     esp, 4Ch
.text:00403C74                 retn
.text:00403C74 sub_403BE0      endp
.text:00403C74
.text:00403C74 ; ---------------------------------------------------------------------------
.text:00403C75                 align 10h
.text:00403C80
.text:00403C80 ; =============== S U B R O U T I N E =======================================
.text:00403C80
.text:00403C80
.text:00403C80 ; int __cdecl sub_403C80(int, char *, int, int)
.text:00403C80 sub_403C80      proc near               ; CODE XREF: .text:00403832↑p
.text:00403C80                                         ; .text:00403862↑p ...
.text:00403C80
.text:00403C80 Block           = dword ptr -2Ch
.text:00403C80 var_28          = dword ptr -28h
.text:00403C80 Str             = dword ptr -24h
.text:00403C80 var_20          = dword ptr -20h
.text:00403C80 var_1C          = dword ptr -1Ch
.text:00403C80 var_18          = dword ptr -18h
.text:00403C80 var_14          = dword ptr -14h
.text:00403C80 arg_0           = dword ptr  4
.text:00403C80 arg_4           = dword ptr  8
.text:00403C80 arg_8           = dword ptr  0Ch
.text:00403C80 arg_C           = dword ptr  10h
.text:00403C80
.text:00403C80                 push    ebp
.text:00403C81                 push    edi
.text:00403C82                 push    esi
.text:00403C83                 push    ebx
.text:00403C84                 sub     esp, 1Ch
.text:00403C87                 call    _errno
.text:00403C8C                 mov     edx, [eax]
.text:00403C8E                 mov     eax, [esp+2Ch+arg_0]
.text:00403C92                 mov     [esp+2Ch+var_14], edx
.text:00403C96                 test    eax, eax
.text:00403C98                 js      loc_403E3A
.text:00403C9E                 mov     eax, [esp+2Ch+arg_0]
.text:00403CA2                 cmp     dword_406020, eax
.text:00403CA8                 ja      short loc_403D20
.text:00403CAA                 mov     esi, eax
.text:00403CAC                 inc     esi
.text:00403CAD                 cmp     esi, 1FFFFFFFh
.text:00403CB3                 ja      loc_403E3F
.text:00403CB9                 mov     ebx, off_40602C
.text:00403CBF                 cmp     ebx, offset dword_406024
.text:00403CC5                 jz      loc_403E11
.text:00403CCB
.text:00403CCB loc_403CCB:                             ; CODE XREF: sub_403C80+1B5↓j
.text:00403CCB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00403CCE                 lea     ecx, ds:0[esi*8]
.text:00403CD5                 mov     ebp, esi
.text:00403CD7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00403CDB                 call    sub_404420
.text:00403CE0                 mov     off_40602C, eax
.text:00403CE5                 mov     ebx, dword_406020
.text:00403CEB                 sub     ebp, ebx
.text:00403CED                 lea     edi, [eax+ebx*8]
.text:00403CF0                 lea     eax, ds:0[ebp*8]
.text:00403CF7                 cmp     eax, 7
.text:00403CFA                 jbe     short loc_403D10
.text:00403CFC                 test    edi, 4
.text:00403D02                 jz      short loc_403D10
.text:00403D04                 mov     dword ptr [edi], 0
.text:00403D0A                 sub     eax, 4
.text:00403D0D                 add     edi, 4
.text:00403D10
.text:00403D10 loc_403D10:                             ; CODE XREF: sub_403C80+7A↑j
.text:00403D10                                         ; sub_403C80+82↑j
.text:00403D10                 cld
.text:00403D11                 mov     ecx, eax
.text:00403D13                 shr     ecx, 2
.text:00403D16                 xor     eax, eax
.text:00403D18                 rep stosd
.text:00403D1A                 mov     dword_406020, esi
.text:00403D20
.text:00403D20 loc_403D20:                             ; CODE XREF: sub_403C80+28↑j
.text:00403D20                 mov     esi, off_40602C
.text:00403D26                 mov     eax, [esp+2Ch+arg_0]
.text:00403D2A                 mov     ebp, [esi+eax*8]
.text:00403D2D                 mov     edi, [esi+eax*8+4]
.text:00403D31                 mov     esi, [esp+2Ch+arg_C]
.text:00403D35                 test    esi, esi
.text:00403D37                 jz      loc_403E07
.text:00403D3D
.text:00403D3D loc_403D3D:                             ; CODE XREF: sub_403C80+18C↓j
.text:00403D3D                 call    _errno
.text:00403D42                 mov     ebx, [eax]
.text:00403D44                 mov     [esp+2Ch+var_18], esi ; int
.text:00403D48                 mov     ecx, [esi]
.text:00403D4A                 mov     [esp+2Ch+Block], edi ; int
.text:00403D4D                 mov     edx, [esp+2Ch+arg_8]
.text:00403D51                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403D55                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403D59                 mov     ecx, [esp+2Ch+arg_4]
.text:00403D5D                 mov     [esp+2Ch+var_20], edx ; int
.text:00403D61                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403D65                 call    sub_402B40
.text:00403D6A                 mov     esi, eax
.text:00403D6C                 call    _errno
.text:00403D71                 mov     [eax], ebx
.text:00403D73                 cmp     ebp, esi
.text:00403D75                 ja      short loc_403DEB
.text:00403D77                 lea     ebp, [esi+1]
.text:00403D7A                 mov     ebx, off_40602C
.text:00403D80                 cmp     edi, offset unk_407040
.text:00403D86                 mov     esi, [esp+2Ch+arg_0]
.text:00403D8A                 mov     [ebx+esi*8], ebp
.text:00403D8D                 jz      short loc_403D9D
.text:00403D8F                 mov     [esp+2Ch+Block], edi ; Block
.text:00403D92                 call    free
.text:00403D97                 mov     ebx, off_40602C
.text:00403D9D
.text:00403D9D loc_403D9D:                             ; CODE XREF: sub_403C80+10D↑j
.text:00403D9D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00403DA0                 call    sub_404390
.text:00403DA5                 mov     esi, [esp+2Ch+arg_C]
.text:00403DA9                 mov     edi, eax
.text:00403DAB                 mov     eax, [esp+2Ch+arg_0]
.text:00403DAF                 test    esi, esi
.text:00403DB1                 mov     [ebx+eax*8+4], edi
.text:00403DB5                 jz      short loc_403E00
.text:00403DB7
.text:00403DB7 loc_403DB7:                             ; CODE XREF: sub_403C80+185↓j
.text:00403DB7                 call    _errno
.text:00403DBC                 mov     ebx, [eax]
.text:00403DBE                 mov     [esp+2Ch+var_18], esi ; int
.text:00403DC2                 mov     ecx, [esi]
.text:00403DC4                 mov     [esp+2Ch+Block], edi ; int
.text:00403DC7                 mov     edx, [esp+2Ch+arg_8]
.text:00403DCB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403DCF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403DD3                 mov     ecx, [esp+2Ch+arg_4]
.text:00403DD7                 mov     [esp+2Ch+var_20], edx ; int
.text:00403DDB                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403DDF                 call    sub_402B40
.text:00403DE4                 call    _errno
.text:00403DE9                 mov     [eax], ebx
.text:00403DEB
.text:00403DEB loc_403DEB:                             ; CODE XREF: sub_403C80+F5↑j
.text:00403DEB                 call    _errno
.text:00403DF0                 mov     ebp, [esp+2Ch+var_14]
.text:00403DF4                 mov     [eax], ebp
.text:00403DF6                 add     esp, 1Ch
.text:00403DF9                 mov     eax, edi
.text:00403DFB                 pop     ebx
.text:00403DFC                 pop     esi
.text:00403DFD                 pop     edi
.text:00403DFE                 pop     ebp
.text:00403DFF                 retn
.text:00403E00 ; ---------------------------------------------------------------------------
.text:00403E00
.text:00403E00 loc_403E00:                             ; CODE XREF: sub_403C80+135↑j
.text:00403E00                 mov     esi, offset dword_407140
.text:00403E05                 jmp     short loc_403DB7
.text:00403E07 ; ---------------------------------------------------------------------------
.text:00403E07
.text:00403E07 loc_403E07:                             ; CODE XREF: sub_403C80+B7↑j
.text:00403E07                 mov     esi, offset dword_407140
.text:00403E0C                 jmp     loc_403D3D
.text:00403E11 ; ---------------------------------------------------------------------------
.text:00403E11
.text:00403E11 loc_403E11:                             ; CODE XREF: sub_403C80+45↑j
.text:00403E11                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00403E18                 call    sub_404390
.text:00403E1D                 mov     off_40602C, eax
.text:00403E22                 mov     edi, dword_406024
.text:00403E28                 mov     ebx, eax
.text:00403E2A                 mov     ecx, off_406028
.text:00403E30                 mov     [eax], edi
.text:00403E32                 mov     [eax+4], ecx
.text:00403E35                 jmp     loc_403CCB
.text:00403E3A ; ---------------------------------------------------------------------------
.text:00403E3A
.text:00403E3A loc_403E3A:                             ; CODE XREF: sub_403C80+18↑j
.text:00403E3A                 call    abort
.text:00403E3F ; ---------------------------------------------------------------------------
.text:00403E3F
.text:00403E3F loc_403E3F:                             ; CODE XREF: sub_403C80+33↑j
.text:00403E3F                 call    sub_404640
.text:00403E3F sub_403C80      endp
.text:00403E3F
.text:00403E3F ; ---------------------------------------------------------------------------
.text:00403E44                 align 10h
.text:00403E50 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403E50                                         ; DATA XREF: .data:Buffer↓o
.text:00403E82 ; const char aSSS[12]
.text:00403E82 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404140+50↓o
.text:00403E8E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00403E9E                 db 12h dup(90h)
.text:00403EB0
.text:00403EB0 ; =============== S U B R O U T I N E =======================================
.text:00403EB0
.text:00403EB0
.text:00403EB0 sub_403EB0      proc near               ; DATA XREF: sub_404140+100↓o
.text:00403EB0                 push    esp
.text:00403EB1                 push    69207369h
.text:00403EB6                 jnb     short loc_403ED8
.text:00403EB8                 db      66h
.text:00403EB8                 jb      short near ptr 3F20h
.text:00403EBB                 and     gs:[ebx+6Fh], dh
.text:00403EBF                 db      66h
.text:00403EBF                 jz      short near ptr 3F39h
.text:00403EC2                 popa
.text:00403EC3                 jb      short loc_403F2A
.text:00403EC5                 cmp     esp, [eax]
.text:00403EC7                 jnb     short near ptr loc_403F2C+2
.text:00403EC9                 and     gs:[eax+ebp*2+65h], dh
.text:00403ECE                 and     [ebx+6Fh], dh
.text:00403ED1                 jnz     short loc_403F45
.text:00403ED3                 arpl    [ebp+20h], sp
.text:00403ED6                 outsw
.text:00403ED8
.text:00403ED8 loc_403ED8:                             ; CODE XREF: sub_403EB0+6↑j
.text:00403ED8                 jb      short loc_403EFA
.text:00403EDA                 arpl    [edi+70h], bp
.text:00403EDD                 jns     short loc_403F48
.text:00403EDF                 outsb
.text:00403EE0                 and     [bp+di+6Fh], ah
.text:00403EE4                 outsb
.text:00403EE5                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:00403EEE                 and     [eax+ebp*2+65h], dl
.text:00403EF2                 jb      short near ptr loc_403F58+1
.text:00403EF4                 and     [ecx+73h], ch
.text:00403EF7                 and     [esi+4Fh], cl
.text:00403EFA
.text:00403EFA loc_403EFA:                             ; CODE XREF: sub_403EB0:loc_403ED8↑j
.text:00403EFA                 or      dh, [edi+61h]
.text:00403EFD                 jb      short loc_403F71
.text:00403EFF                 popa
.text:00403F00                 outsb
.text:00403F01                 jz      short loc_403F7C
.text:00403F03                 cmp     esp, [eax]
.text:00403F05                 outsb
.text:00403F06                 outsd
.text:00403F07                 jz      short loc_403F29
.text:00403F09                 db      65h
.text:00403F09                 jbe     short loc_403F71
.text:00403F0C                 outsb
.text:00403F0D                 and     [esi+6Fh], ah
.text:00403F10                 jb      short near ptr loc_403F30+2
.text:00403F12                 dec     ebp
.text:00403F13                 inc     ebp
.text:00403F14                 push    edx
.text:00403F15                 inc     ebx
.text:00403F16                 dec     eax
.text:00403F17                 inc     ecx
.text:00403F18                 dec     esi
.text:00403F19                 push    esp
.text:00403F1A                 inc     ecx
.text:00403F1B                 inc     edx
.text:00403F1C                 dec     ecx
.text:00403F1D                 dec     esp
.text:00403F1E                 dec     ecx
.text:00403F1F                 push    esp
.text:00403F20                 pop     ecx
.text:00403F21                 and     [edi+72h], ch
.text:00403F24                 and     [esi+49h], al
.text:00403F27                 push    esp
.text:00403F28                 dec     esi
.text:00403F29
.text:00403F29 loc_403F29:                             ; CODE XREF: sub_403EB0+57↑j
.text:00403F29                 inc     ebp
.text:00403F2A
.text:00403F2A loc_403F2A:                             ; CODE XREF: sub_403EB0+13↑j
.text:00403F2A                 push    ebx
.text:00403F2B                 push    ebx
.text:00403F2C
.text:00403F2C loc_403F2C:                             ; CODE XREF: sub_403EB0+17↑j
.text:00403F2C                 and     [esi+4Fh], al
.text:00403F2F                 push    edx
.text:00403F30
.text:00403F30 loc_403F30:                             ; CODE XREF: sub_403EB0+60↑j
.text:00403F30                 and     [ecx+20h], al
.text:00403F33                 push    eax
.text:00403F34                 inc     ecx
.text:00403F35                 push    edx
.text:00403F36                 push    esp
.text:00403F37                 dec     ecx
.text:00403F38                 inc     ebx
.text:00403F39                 push    ebp
.text:00403F3A                 dec     esp
.text:00403F3B                 inc     ecx
.text:00403F3C                 push    edx
.text:00403F3D                 and     [eax+55h], dl
.text:00403F40                 push    edx
.text:00403F41                 push    eax
.text:00403F42                 dec     edi
.text:00403F43                 push    ebx
.text:00403F44                 inc     ebp
.text:00403F45
.text:00403F45 loc_403F45:                             ; CODE XREF: sub_403EB0+21↑j
.text:00403F45                 or      al, cs:[eax]
.text:00403F48
.text:00403F48 loc_403F48:                             ; CODE XREF: sub_403EB0+2D↑j
.text:00403F48                                         ; DATA XREF: sub_404140:loc_404281↓o
.text:00403F48                 push    edi
.text:00403F49                 jb      short near ptr loc_403FB3+1
.text:00403F4B                 jz      short near ptr loc_403FC0+1
.text:00403F4D                 outs    dx, byte ptr gs:[esi]
.text:00403F4F                 and     [edx+79h], ah
.text:00403F52                 and     ds:6E612073h, ah
.text:00403F58
.text:00403F58 loc_403F58:                             ; CODE XREF: sub_403EB0+42↑j
.text:00403F58                 and     fs:0A2E73h, ah
.text:00403F5F
.text:00403F5F loc_403F5F:                             ; DATA XREF: sub_404140:loc_40428D↓o
.text:00403F5F                 push    edi
.text:00403F60                 jb      short near ptr loc_403FCA+1
.text:00403F62                 jz      short loc_403FD8
.text:00403F64                 outs    dx, byte ptr gs:[esi]
.text:00403F66                 and     [edx+79h], ah
.text:00403F69                 and     ds:25202C73h, ah
.text:00403F6F                 jnb     short near ptr loc_403F9A+3
.text:00403F71
.text:00403F71 loc_403F71:                             ; CODE XREF: sub_403EB0+4D↑j
.text:00403F71                                         ; sub_403EB0+59↑j
.text:00403F71                 and     [ecx+6Eh], ah
.text:00403F74                 and     fs:0A2E73h, ah
.text:00403F7B                 nop
.text:00403F7C
.text:00403F7C loc_403F7C:                             ; CODE XREF: sub_403EB0+51↑j
.text:00403F7C                 nop
.text:00403F7D                 nop
.text:00403F7E                 nop
.text:00403F7F                 nop
.text:00403F80                 nop
.text:00403F81                 nop
.text:00403F82                 nop
.text:00403F83                 nop
.text:00403F84                 nop
.text:00403F85                 nop
.text:00403F86                 nop
.text:00403F87                 nop
.text:00403F88                 nop
.text:00403F89                 nop
.text:00403F8A                 nop
.text:00403F8B                 nop
.text:00403F8C                 nop
.text:00403F8D                 nop
.text:00403F8E                 nop
.text:00403F8F                 nop
.text:00403F8F sub_403EB0      endp ; sp-analysis failed
.text:00403F8F
.text:00403F90
.text:00403F90 ; =============== S U B R O U T I N E =======================================
.text:00403F90
.text:00403F90
.text:00403F90 sub_403F90      proc near               ; DATA XREF: sub_404140:loc_404299↓o
.text:00403F90                 push    edi
.text:00403F91                 jb      short near ptr loc_403FFA+2
.text:00403F93                 jz      short near ptr loc_404008+1
.text:00403F95                 outs    dx, byte ptr gs:[esi]
.text:00403F97                 and     [edx+79h], ah
.text:00403F9A
.text:00403F9A loc_403F9A:                             ; CODE XREF: sub_403EB0+BF↑j
.text:00403F9A                 and     ds:25202C73h, ah
.text:00403FA0                 jnb     short near ptr loc_403FCD+1
.text:00403FA2                 and     ds:610A2C73h, ah
.text:00403FA8                 outsb
.text:00403FA9                 and     fs:0A2E73h, ah
.text:00403FB0
.text:00403FB0 loc_403FB0:                             ; DATA XREF: sub_404140:loc_4042A5↓o
.text:00403FB0                 push    edi
.text:00403FB1                 jb      short loc_40401C
.text:00403FB3
.text:00403FB3 loc_403FB3:                             ; CODE XREF: sub_403EB0+99↑j
.text:00403FB3                 jz      short loc_404029
.text:00403FB5                 outs    dx, byte ptr gs:[esi]
.text:00403FB7                 and     [edx+79h], ah
.text:00403FBA                 and     ds:25202C73h, ah
.text:00403FC0
.text:00403FC0 loc_403FC0:                             ; CODE XREF: sub_403EB0+9B↑j
.text:00403FC0                 jnb     short loc_403FEE
.text:00403FC2                 and     ds:250A2C73h, ah
.text:00403FC8                 jnb     short near ptr loc_403FF5+1
.text:00403FCA
.text:00403FCA loc_403FCA:                             ; CODE XREF: sub_403EB0+B0↑j
.text:00403FCA                 and     [ecx+6Eh], ah
.text:00403FCD
.text:00403FCD loc_403FCD:                             ; CODE XREF: sub_403F90+10↑j
.text:00403FCD                 and     fs:0A2E73h, ah
.text:00403FD4                 nop
.text:00403FD5                 nop
.text:00403FD6                 nop
.text:00403FD7                 nop
.text:00403FD8
.text:00403FD8 loc_403FD8:                             ; CODE XREF: sub_403EB0+B2↑j
.text:00403FD8                 nop
.text:00403FD9                 nop
.text:00403FDA                 nop
.text:00403FDB                 nop
.text:00403FDC                 nop
.text:00403FDD                 nop
.text:00403FDE                 nop
.text:00403FDF                 nop
.text:00403FE0                 nop
.text:00403FE1                 nop
.text:00403FE2                 nop
.text:00403FE3                 nop
.text:00403FE4                 nop
.text:00403FE5                 nop
.text:00403FE6                 nop
.text:00403FE7                 nop
.text:00403FE8                 nop
.text:00403FE9                 nop
.text:00403FEA                 nop
.text:00403FEB                 nop
.text:00403FEC                 nop
.text:00403FED                 nop
.text:00403FEE
.text:00403FEE loc_403FEE:                             ; CODE XREF: sub_403F90:loc_403FC0↑j
.text:00403FEE                 nop
.text:00403FEF                 nop
.text:00403FEF sub_403F90      endp ; sp-analysis failed
.text:00403FEF
.text:00403FF0
.text:00403FF0 ; =============== S U B R O U T I N E =======================================
.text:00403FF0
.text:00403FF0
.text:00403FF0 sub_403FF0      proc near               ; DATA XREF: sub_404140:loc_4042B1↓o
.text:00403FF0                 push    edi
.text:00403FF1                 jb      short loc_40405C
.text:00403FF3                 jz      short loc_404069
.text:00403FF5
.text:00403FF5 loc_403FF5:                             ; CODE XREF: sub_403F90+38↑j
.text:00403FF5                 outs    dx, byte ptr gs:[esi]
.text:00403FF7                 and     [edx+79h], ah
.text:00403FFA
.text:00403FFA loc_403FFA:                             ; CODE XREF: sub_403F90+1↑j
.text:00403FFA                 and     ds:25202C73h, ah
.text:00404000                 jnb     short loc_40402E
.text:00404002                 and     ds:250A2C73h, ah
.text:00404008
.text:00404008 loc_404008:                             ; CODE XREF: sub_403F90+3↑j
.text:00404008                 jnb     short near ptr loc_404035+1
.text:0040400A                 and     ds:61202C73h, ah
.text:00404010                 outsb
.text:00404011                 and     fs:0A2E73h, ah
.text:00404018                 nop
.text:00404019                 nop
.text:0040401A                 nop
.text:0040401B                 nop
.text:0040401C
.text:0040401C loc_40401C:                             ; CODE XREF: sub_403F90+21↑j
.text:0040401C                 nop
.text:0040401D                 nop
.text:0040401E                 nop
.text:0040401F                 nop
.text:00404020                 nop
.text:00404021                 nop
.text:00404022                 nop
.text:00404023                 nop
.text:00404024                 nop
.text:00404025                 nop
.text:00404026                 nop
.text:00404027                 nop
.text:00404028                 nop
.text:00404029
.text:00404029 loc_404029:                             ; CODE XREF: sub_403F90:loc_403FB3↑j
.text:00404029                 nop
.text:0040402A                 nop
.text:0040402B                 nop
.text:0040402C                 nop
.text:0040402D                 nop
.text:0040402E
.text:0040402E loc_40402E:                             ; CODE XREF: sub_403FF0+10↑j
.text:0040402E                 nop
.text:0040402F                 nop
.text:0040402F sub_403FF0      endp ; sp-analysis failed
.text:0040402F
.text:00404030
.text:00404030 ; =============== S U B R O U T I N E =======================================
.text:00404030
.text:00404030
.text:00404030 sub_404030      proc near               ; DATA XREF: sub_404140:loc_4042BD↓o
.text:00404030                 push    edi
.text:00404031                 jb      short near ptr loc_404099+3
.text:00404033                 jz      short loc_4040A9
.text:00404035
.text:00404035 loc_404035:                             ; CODE XREF: sub_403FF0:loc_404008↑j
.text:00404035                 outs    dx, byte ptr gs:[esi]
.text:00404037                 and     [edx+79h], ah
.text:0040403A                 and     ds:25202C73h, ah
.text:00404040                 jnb     short loc_40406E
.text:00404042                 and     ds:250A2C73h, ah
.text:00404048                 jnb     short near ptr loc_404075+1
.text:0040404A                 and     ds:25202C73h, ah
.text:00404050                 jnb     short near ptr loc_40407A+4
.text:00404052                 and     [ecx+6Eh], ah
.text:00404055                 and     fs:0A2E73h, ah
.text:0040405C
.text:0040405C loc_40405C:                             ; CODE XREF: sub_403FF0+1↑j
.text:0040405C                 nop
.text:0040405D                 nop
.text:0040405E                 nop
.text:0040405F                 nop
.text:00404060                 nop
.text:00404061                 nop
.text:00404062                 nop
.text:00404063                 nop
.text:00404064                 nop
.text:00404065                 nop
.text:00404066                 nop
.text:00404067                 nop
.text:00404068                 nop
.text:00404069
.text:00404069 loc_404069:                             ; CODE XREF: sub_403FF0+3↑j
.text:00404069                 nop
.text:0040406A                 nop
.text:0040406B                 nop
.text:0040406C                 nop
.text:0040406D                 nop
.text:0040406E
.text:0040406E loc_40406E:                             ; CODE XREF: sub_404030+10↑j
.text:0040406E                 nop
.text:0040406F                 nop
.text:0040406F sub_404030      endp ; sp-analysis failed
.text:0040406F
.text:00404070
.text:00404070 ; =============== S U B R O U T I N E =======================================
.text:00404070
.text:00404070
.text:00404070 sub_404070      proc near               ; DATA XREF: sub_404140:loc_4042C9↓o
.text:00404070                 push    edi
.text:00404071                 jb      short near ptr loc_4040DA+2
.text:00404073                 jz      short near ptr loc_4040E4+5
.text:00404075
.text:00404075 loc_404075:                             ; CODE XREF: sub_404030+18↑j
.text:00404075                 outs    dx, byte ptr gs:[esi]
.text:00404077                 and     [edx+79h], ah
.text:0040407A
.text:0040407A loc_40407A:                             ; CODE XREF: sub_404030+20↑j
.text:0040407A                 and     ds:25202C73h, ah
.text:00404080                 jnb     short loc_4040AE
.text:00404082                 and     ds:250A2C73h, ah
.text:00404088                 jnb     short near ptr loc_4040B5+1
.text:0040408A                 and     ds:25202C73h, ah
.text:00404090                 jnb     short near ptr loc_4040BA+4
.text:00404092                 and     ds:610A2C73h, ah
.text:00404098                 outsb
.text:00404099
.text:00404099 loc_404099:                             ; CODE XREF: sub_404030+1↑j
.text:00404099                 and     fs:0A2E73h, ah
.text:004040A0                 nop
.text:004040A1                 nop
.text:004040A2                 nop
.text:004040A3                 nop
.text:004040A4                 nop
.text:004040A5                 nop
.text:004040A6                 nop
.text:004040A7                 nop
.text:004040A8                 nop
.text:004040A9
.text:004040A9 loc_4040A9:                             ; CODE XREF: sub_404030+3↑j
.text:004040A9                 nop
.text:004040AA                 nop
.text:004040AB                 nop
.text:004040AC                 nop
.text:004040AD                 nop
.text:004040AE
.text:004040AE loc_4040AE:                             ; CODE XREF: sub_404070+10↑j
.text:004040AE                 nop
.text:004040AF                 nop
.text:004040AF sub_404070      endp ; sp-analysis failed
.text:004040AF
.text:004040B0
.text:004040B0 ; =============== S U B R O U T I N E =======================================
.text:004040B0
.text:004040B0
.text:004040B0 sub_4040B0      proc near               ; DATA XREF: sub_404140:loc_4042D5↓o
.text:004040B0                 push    edi
.text:004040B1                 jb      short near ptr loc_40411A+2
.text:004040B3                 jz      short near ptr loc_404125+4
.text:004040B5
.text:004040B5 loc_4040B5:                             ; CODE XREF: sub_404070+18↑j
.text:004040B5                 outs    dx, byte ptr gs:[esi]
.text:004040B7                 and     [edx+79h], ah
.text:004040BA
.text:004040BA loc_4040BA:                             ; CODE XREF: sub_404070+20↑j
.text:004040BA                 and     ds:25202C73h, ah
.text:004040C0                 jnb     short near ptr loc_4040EA+4
.text:004040C2                 and     ds:250A2C73h, ah
.text:004040C8                 jnb     short near ptr loc_4040F5+1
.text:004040CA                 and     ds:25202C73h, ah
.text:004040D0                 jnb     short near ptr loc_4040FA+4
.text:004040D2                 and     ds:250A2C73h, ah
.text:004040D8                 jnb     short near ptr loc_404102+4
.text:004040DA
.text:004040DA loc_4040DA:                             ; CODE XREF: sub_404070+1↑j
.text:004040DA                 and     [ecx+6Eh], ah
.text:004040DD                 and     fs:0A2E73h, ah
.text:004040E4
.text:004040E4 loc_4040E4:                             ; CODE XREF: sub_404070+3↑j
.text:004040E4                 lea     esi, [esi+0]
.text:004040EA
.text:004040EA loc_4040EA:                             ; CODE XREF: sub_4040B0+10↑j
.text:004040EA                 lea     edi, [edi+0]
.text:004040F0
.text:004040F0 loc_4040F0:                             ; DATA XREF: sub_404140:def_4041AD↓o
.text:004040F0                 push    edi
.text:004040F1                 jb      short near ptr loc_40415B+1
.text:004040F3                 jz      short near ptr loc_404168+1
.text:004040F5
.text:004040F5 loc_4040F5:                             ; CODE XREF: sub_4040B0+18↑j
.text:004040F5                 outs    dx, byte ptr gs:[esi]
.text:004040F7                 and     [edx+79h], ah
.text:004040FA
.text:004040FA loc_4040FA:                             ; CODE XREF: sub_4040B0+20↑j
.text:004040FA                 and     ds:25202C73h, ah
.text:00404100                 jnb     short near ptr loc_40412C+2
.text:00404102
.text:00404102 loc_404102:                             ; CODE XREF: sub_4040B0+28↑j
.text:00404102                 and     ds:250A2C73h, ah
.text:00404108                 jnb     short near ptr loc_404133+3
.text:0040410A                 and     ds:25202C73h, ah
.text:00404110                 jnb     short near ptr loc_404139+5
.text:00404112                 and     ds:250A2C73h, ah
.text:00404118                 jnb     short near ptr loc_404144+2
.text:0040411A
.text:0040411A loc_40411A:                             ; CODE XREF: sub_4040B0+1↑j
.text:0040411A                 and     ds:61202C73h, ah
.text:00404120                 outsb
.text:00404121                 and     fs:[edi+74h], ch
.text:00404125
.text:00404125 loc_404125:                             ; CODE XREF: sub_4040B0+3↑j
.text:00404125                 push    2E737265h
.text:0040412A                 or      al, [eax]
.text:0040412C
.text:0040412C loc_40412C:                             ; CODE XREF: sub_4040B0+50↑j
.text:0040412C                                         ; DATA XREF: sub_404140+1B5↓o
.text:0040412C                 and     eax, 73252073h
.text:00404131                 or      al, [eax]
.text:00404133
.text:00404133 loc_404133:                             ; CODE XREF: sub_4040B0+58↑j
.text:00404133                 lea     esi, [esi+0]
.text:00404139
.text:00404139 loc_404139:                             ; CODE XREF: sub_4040B0+60↑j
.text:00404139                 lea     edi, [edi+0]
.text:00404139 sub_4040B0      endp ; sp-analysis failed
.text:00404139
.text:00404140
.text:00404140 ; =============== S U B R O U T I N E =======================================
.text:00404140
.text:00404140
.text:00404140 ; int __cdecl sub_404140(FILE *, FILE *, int, int, va_list)
.text:00404140 sub_404140      proc near               ; CODE XREF: sub_4028E0+A5↑p
.text:00404140                                         ; .text:0040433A↓p
.text:00404140
.text:00404140 Stream          = dword ptr -2Ch
.text:00404140 Format          = dword ptr -28h
.text:00404140 ArgList         = dword ptr -24h
.text:00404140 var_20          = dword ptr -20h
.text:00404140 var_1C          = dword ptr -1Ch
.text:00404140 var_14          = dword ptr -14h
.text:00404140 arg_0           = dword ptr  4
.text:00404140 arg_4           = dword ptr  8
.text:00404140 arg_8           = dword ptr  0Ch
.text:00404140 arg_C           = dword ptr  10h
.text:00404140 arg_10          = dword ptr  14h
.text:00404140
.text:00404140                 push    ebp
.text:00404141                 push    edi
.text:00404142                 push    esi
.text:00404143                 push    ebx
.text:00404144
.text:00404144 loc_404144:                             ; CODE XREF: sub_4040B0+68↑j
.text:00404144                 sub     esp, 1Ch
.text:00404147                 xor     ebx, ebx
.text:00404149                 mov     edi, [esp+2Ch+arg_10]
.text:0040414D                 mov     edx, [esp+2Ch+arg_8]
.text:00404151                 mov     esi, [esp+2Ch+arg_0]
.text:00404155                 mov     eax, [edi]
.text:00404157                 mov     ecx, [esp+2Ch+arg_4]
.text:0040415B
.text:0040415B loc_40415B:                             ; CODE XREF: sub_4040B0+41↑j
.text:0040415B                 mov     [esp+2Ch+var_14], edx
.text:0040415F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404163                 lea     edx, [edi+4]
.text:00404166                 test    eax, eax
.text:00404168
.text:00404168 loc_404168:                             ; CODE XREF: sub_4040B0+43↑j
.text:00404168                 jz      short loc_40417C
.text:0040416A                 lea     esi, [esi+0]
.text:00404170
.text:00404170 loc_404170:                             ; CODE XREF: sub_404140+3A↓j
.text:00404170                 mov     eax, edx
.text:00404172                 inc     ebx
.text:00404173                 mov     eax, [eax]
.text:00404175                 add     edx, 4
.text:00404178                 test    eax, eax
.text:0040417A                 jnz     short loc_404170
.text:0040417C
.text:0040417C loc_40417C:                             ; CODE XREF: sub_404140:loc_404168↑j
.text:0040417C                 test    ecx, ecx
.text:0040417E                 jz      loc_4042ED
.text:00404184                 mov     [esp+2Ch+var_1C], ebp
.text:00404188                 mov     edx, [esp+2Ch+var_14]
.text:0040418C                 mov     [esp+2Ch+ArgList], ecx
.text:00404190                 mov     [esp+2Ch+Format], offset aSSS ; Format
.text:00404198                 mov     [esp+2Ch+var_20], edx
.text:0040419C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040419F                 call    fprintf
.text:004041A4
.text:004041A4 loc_4041A4:                             ; CODE XREF: sub_404140+1C9↓j
.text:004041A4                 cmp     ebx, 9          ; switch 10 cases
.text:004041A7                 ja      def_4041AD      ; jumptable 004041AD default case
.text:004041AD                 jmp     ds:jpt_4041AD[ebx*4] ; switch jump
.text:004041AD ; ---------------------------------------------------------------------------
.text:004041B4 jpt_4041AD      dd offset loc_4041DC    ; DATA XREF: sub_404140+6D↑r
.text:004041B4                 dd offset loc_4041E1    ; jump table for switch statement
.text:004041B4                 dd offset loc_404281
.text:004041B4                 dd offset loc_40428D
.text:004041B4                 dd offset loc_404299
.text:004041B4                 dd offset loc_4042A5
.text:004041B4                 dd offset loc_4042B1
.text:004041B4                 dd offset loc_4042BD
.text:004041B4                 dd offset loc_4042C9
.text:004041B4                 dd offset loc_4042D5
.text:004041DC ; ---------------------------------------------------------------------------
.text:004041DC
.text:004041DC loc_4041DC:                             ; CODE XREF: sub_404140+6D↑j
.text:004041DC                                         ; DATA XREF: sub_404140:jpt_4041AD↑o
.text:004041DC                 call    abort           ; jumptable 004041AD case 0
.text:004041E1 ; ---------------------------------------------------------------------------
.text:004041E1
.text:004041E1 loc_4041E1:                             ; CODE XREF: sub_404140+6D↑j
.text:004041E1                                         ; DATA XREF: sub_404140:jpt_4041AD↑o
.text:004041E1                 mov     [esp+2Ch+Stream], 403E8Eh ; jumptable 004041AD case 1
.text:004041E8                 nop
.text:004041E9                 lea     esi, [esi+0]
.text:004041F0
.text:004041F0 loc_4041F0:                             ; CODE XREF: sub_404140+148↓j
.text:004041F0                                         ; sub_404140+154↓j ...
.text:004041F0                 call    ds:libintl_gettext
.text:004041F6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004041FA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004041FD                 mov     [esp+2Ch+Format], eax ; Format
.text:00404201                 call    vfprintf
.text:00404206                 mov     ebx, [esi+4]
.text:00404209                 dec     ebx
.text:0040420A                 test    ebx, ebx
.text:0040420C                 mov     [esi+4], ebx
.text:0040420F                 js      short loc_40426F
.text:00404211                 mov     edi, [esi]
.text:00404213                 mov     byte ptr [edi], 0Ah
.text:00404216                 inc     dword ptr [esi]
.text:00404218
.text:00404218 loc_404218:                             ; CODE XREF: sub_404140+13F↓j
.text:00404218                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040421C                 mov     edx, Buffer
.text:00404222                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00404225                 call    fputs
.text:0040422A                 mov     ebp, [esi+4]
.text:0040422D                 dec     ebp
.text:0040422E                 test    ebp, ebp
.text:00404230                 mov     [esi+4], ebp
.text:00404233                 js      short loc_40425D
.text:00404235                 mov     ecx, [esi]
.text:00404237                 mov     byte ptr [ecx], 0Ah
.text:0040423A                 inc     dword ptr [esi]
.text:0040423C
.text:0040423C loc_40423C:                             ; CODE XREF: sub_404140+12D↓j
.text:0040423C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404240                 mov     [esp+2Ch+Stream], offset sub_403EB0
.text:00404247                 call    ds:libintl_gettext
.text:0040424D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404251                 add     esp, 1Ch
.text:00404254                 pop     ebx
.text:00404255                 pop     esi
.text:00404256                 pop     edi
.text:00404257                 pop     ebp
.text:00404258                 jmp     fputs
.text:0040425D ; ---------------------------------------------------------------------------
.text:0040425D
.text:0040425D loc_40425D:                             ; CODE XREF: sub_404140+F3↑j
.text:0040425D                 mov     [esp+2Ch+Format], esi ; File
.text:00404261                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404268                 call    _flsbuf
.text:0040426D                 jmp     short loc_40423C
.text:0040426F ; ---------------------------------------------------------------------------
.text:0040426F
.text:0040426F loc_40426F:                             ; CODE XREF: sub_404140+CF↑j
.text:0040426F                 mov     [esp+2Ch+Format], esi ; File
.text:00404273                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040427A                 call    _flsbuf
.text:0040427F                 jmp     short loc_404218
.text:00404281 ; ---------------------------------------------------------------------------
.text:00404281
.text:00404281 loc_404281:                             ; CODE XREF: sub_404140+6D↑j
.text:00404281                                         ; DATA XREF: sub_404140:jpt_4041AD↑o
.text:00404281                 mov     [esp+2Ch+Stream], offset loc_403F48 ; jumptable 004041AD case 2
.text:00404288                 jmp     loc_4041F0
.text:0040428D ; ---------------------------------------------------------------------------
.text:0040428D
.text:0040428D loc_40428D:                             ; CODE XREF: sub_404140+6D↑j
.text:0040428D                                         ; DATA XREF: sub_404140:jpt_4041AD↑o
.text:0040428D                 mov     [esp+2Ch+Stream], offset loc_403F5F ; jumptable 004041AD case 3
.text:00404294                 jmp     loc_4041F0
.text:00404299 ; ---------------------------------------------------------------------------
.text:00404299
.text:00404299 loc_404299:                             ; CODE XREF: sub_404140+6D↑j
.text:00404299                                         ; DATA XREF: sub_404140:jpt_4041AD↑o
.text:00404299                 mov     [esp+2Ch+Stream], offset sub_403F90 ; jumptable 004041AD case 4
.text:004042A0                 jmp     loc_4041F0
.text:004042A5 ; ---------------------------------------------------------------------------
.text:004042A5
.text:004042A5 loc_4042A5:                             ; CODE XREF: sub_404140+6D↑j
.text:004042A5                                         ; DATA XREF: sub_404140:jpt_4041AD↑o
.text:004042A5                 mov     [esp+2Ch+Stream], offset loc_403FB0 ; jumptable 004041AD case 5
.text:004042AC                 jmp     loc_4041F0
.text:004042B1 ; ---------------------------------------------------------------------------
.text:004042B1
.text:004042B1 loc_4042B1:                             ; CODE XREF: sub_404140+6D↑j
.text:004042B1                                         ; DATA XREF: sub_404140:jpt_4041AD↑o
.text:004042B1                 mov     [esp+2Ch+Stream], offset sub_403FF0 ; jumptable 004041AD case 6
.text:004042B8                 jmp     loc_4041F0
.text:004042BD ; ---------------------------------------------------------------------------
.text:004042BD
.text:004042BD loc_4042BD:                             ; CODE XREF: sub_404140+6D↑j
.text:004042BD                                         ; DATA XREF: sub_404140:jpt_4041AD↑o
.text:004042BD                 mov     [esp+2Ch+Stream], offset sub_404030 ; jumptable 004041AD case 7
.text:004042C4                 jmp     loc_4041F0
.text:004042C9 ; ---------------------------------------------------------------------------
.text:004042C9
.text:004042C9 loc_4042C9:                             ; CODE XREF: sub_404140+6D↑j
.text:004042C9                                         ; DATA XREF: sub_404140:jpt_4041AD↑o
.text:004042C9                 mov     [esp+2Ch+Stream], offset sub_404070 ; jumptable 004041AD case 8
.text:004042D0                 jmp     loc_4041F0
.text:004042D5 ; ---------------------------------------------------------------------------
.text:004042D5
.text:004042D5 loc_4042D5:                             ; CODE XREF: sub_404140+6D↑j
.text:004042D5                                         ; DATA XREF: sub_404140:jpt_4041AD↑o
.text:004042D5                 mov     [esp+2Ch+Stream], offset sub_4040B0 ; jumptable 004041AD case 9
.text:004042DC                 jmp     loc_4041F0
.text:004042E1 ; ---------------------------------------------------------------------------
.text:004042E1
.text:004042E1 def_4041AD:                             ; CODE XREF: sub_404140+67↑j
.text:004042E1                 mov     [esp+2Ch+Stream], offset loc_4040F0 ; jumptable 004041AD default case
.text:004042E8                 jmp     loc_4041F0
.text:004042ED ; ---------------------------------------------------------------------------
.text:004042ED
.text:004042ED loc_4042ED:                             ; CODE XREF: sub_404140+3E↑j
.text:004042ED                 mov     [esp+2Ch+var_20], ebp
.text:004042F1                 mov     ecx, [esp+2Ch+var_14]
.text:004042F5                 mov     [esp+2Ch+Format], offset loc_40412C ; Format
.text:004042FD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404300                 mov     [esp+2Ch+ArgList], ecx
.text:00404304                 call    fprintf
.text:00404309                 jmp     loc_4041A4
.text:00404309 sub_404140      endp
.text:00404309
.text:00404309 ; ---------------------------------------------------------------------------
.text:0040430E                 align 10h
.text:00404310                 sub     esp, 1Ch
.text:00404313                 mov     edx, [esp+2Ch]
.text:00404317                 lea     ecx, [esp+30h]
.text:0040431B                 mov     [esp+10h], ecx
.text:0040431F                 mov     ecx, [esp+28h]
.text:00404323                 mov     [esp+0Ch], edx
.text:00404327                 mov     edx, [esp+24h]
.text:0040432B                 mov     [esp+8], ecx
.text:0040432F                 mov     [esp+4], edx
.text:00404333                 mov     edx, [esp+20h]
.text:00404337                 mov     [esp], edx
.text:0040433A                 call    sub_404140
.text:0040433F                 add     esp, 1Ch
.text:00404342                 retn
.text:00404342 ; ---------------------------------------------------------------------------
.text:00404343                 align 10h
.text:00404350                 sub     esp, 0Ch
.text:00404353                 xor     edx, edx
.text:00404355                 mov     ecx, [esp+14h]
.text:00404359                 mov     [esp+8], ebx
.text:0040435D                 mov     eax, 0FFFFFFFFh
.text:00404362                 mov     ebx, [esp+10h]
.text:00404366                 div     ecx
.text:00404368                 cmp     eax, ebx
.text:0040436A                 jb      short loc_404389
.text:0040436C                 mov     edx, ebx
.text:0040436E                 imul    edx, ecx
.text:00404371                 mov     [esp], edx
.text:00404374                 call    malloc
.text:00404379                 test    eax, eax
.text:0040437B                 jz      short loc_404385
.text:0040437D
.text:0040437D loc_40437D:                             ; CODE XREF: .text:00404387↓j
.text:0040437D                 mov     ebx, [esp+8]
.text:00404381                 add     esp, 0Ch
.text:00404384                 retn
.text:00404385 ; ---------------------------------------------------------------------------
.text:00404385
.text:00404385 loc_404385:                             ; CODE XREF: .text:0040437B↑j
.text:00404385                 test    ebx, ebx
.text:00404387                 jz      short loc_40437D
.text:00404389
.text:00404389 loc_404389:                             ; CODE XREF: .text:0040436A↑j
.text:00404389                 call    sub_404640
.text:00404389 ; ---------------------------------------------------------------------------
.text:0040438E                 align 10h
.text:00404390
.text:00404390 ; =============== S U B R O U T I N E =======================================
.text:00404390
.text:00404390
.text:00404390 ; int __cdecl sub_404390(size_t)
.text:00404390 sub_404390      proc near               ; CODE XREF: .text:004035B9↑p
.text:00404390                                         ; .text:00403796↑p ...
.text:00404390
.text:00404390 Size            = dword ptr -0Ch
.text:00404390 var_4           = dword ptr -4
.text:00404390 arg_0           = dword ptr  4
.text:00404390
.text:00404390                 sub     esp, 0Ch
.text:00404393                 mov     [esp+0Ch+var_4], ebx
.text:00404397                 mov     ebx, [esp+0Ch+arg_0]
.text:0040439B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040439E                 call    malloc
.text:004043A3                 test    eax, eax
.text:004043A5                 jz      short loc_4043B0
.text:004043A7
.text:004043A7 loc_4043A7:                             ; CODE XREF: sub_404390+22↓j
.text:004043A7                 mov     ebx, [esp+0Ch+var_4]
.text:004043AB                 add     esp, 0Ch
.text:004043AE                 retn
.text:004043AE ; ---------------------------------------------------------------------------
.text:004043AF                 align 10h
.text:004043B0
.text:004043B0 loc_4043B0:                             ; CODE XREF: sub_404390+15↑j
.text:004043B0                 test    ebx, ebx
.text:004043B2                 jz      short loc_4043A7
.text:004043B4                 call    sub_404640
.text:004043B4 sub_404390      endp
.text:004043B4
.text:004043B4 ; ---------------------------------------------------------------------------
.text:004043B9                 align 10h
.text:004043C0                 sub     esp, 1Ch
.text:004043C3                 xor     edx, edx
.text:004043C5                 mov     eax, 0FFFFFFFFh
.text:004043CA                 mov     [esp+14h], ebx
.text:004043CE                 mov     ecx, [esp+20h]
.text:004043D2                 mov     ebx, [esp+28h]
.text:004043D6                 mov     [esp+18h], esi
.text:004043DA                 mov     esi, [esp+24h]
.text:004043DE                 div     ebx
.text:004043E0                 cmp     eax, esi
.text:004043E2                 jb      short loc_404414
.text:004043E4                 mov     [esp], ecx
.text:004043E7                 mov     edx, esi
.text:004043E9                 imul    edx, ebx
.text:004043EC                 mov     [esp+4], edx
.text:004043F0                 call    realloc
.text:004043F5                 test    eax, eax
.text:004043F7                 mov     ecx, eax
.text:004043F9                 jz      short loc_404410
.text:004043FB
.text:004043FB loc_4043FB:                             ; CODE XREF: .text:00404412↓j
.text:004043FB                 mov     ebx, [esp+14h]
.text:004043FF                 mov     eax, ecx
.text:00404401                 mov     esi, [esp+18h]
.text:00404405                 add     esp, 1Ch
.text:00404408                 retn
.text:00404408 ; ---------------------------------------------------------------------------
.text:00404409                 align 10h
.text:00404410
.text:00404410 loc_404410:                             ; CODE XREF: .text:004043F9↑j
.text:00404410                 test    esi, esi
.text:00404412                 jz      short loc_4043FB
.text:00404414
.text:00404414 loc_404414:                             ; CODE XREF: .text:004043E2↑j
.text:00404414                 call    sub_404640
.text:00404414 ; ---------------------------------------------------------------------------
.text:00404419                 align 10h
.text:00404420
.text:00404420 ; =============== S U B R O U T I N E =======================================
.text:00404420
.text:00404420
.text:00404420 ; int __cdecl sub_404420(void *, size_t)
.text:00404420 sub_404420      proc near               ; CODE XREF: sub_403C80+5B↑p
.text:00404420
.text:00404420 Block           = dword ptr -0Ch
.text:00404420 Size            = dword ptr -8
.text:00404420 var_4           = dword ptr -4
.text:00404420 arg_0           = dword ptr  4
.text:00404420 arg_4           = dword ptr  8
.text:00404420
.text:00404420                 sub     esp, 0Ch
.text:00404423                 mov     edx, [esp+0Ch+arg_0]
.text:00404427                 mov     [esp+0Ch+var_4], ebx
.text:0040442B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040442F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404432                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404436                 call    realloc
.text:0040443B                 test    eax, eax
.text:0040443D                 jz      short loc_404447
.text:0040443F
.text:0040443F loc_40443F:                             ; CODE XREF: sub_404420+29↓j
.text:0040443F                 mov     ebx, [esp+0Ch+var_4]
.text:00404443                 add     esp, 0Ch
.text:00404446                 retn
.text:00404447 ; ---------------------------------------------------------------------------
.text:00404447
.text:00404447 loc_404447:                             ; CODE XREF: sub_404420+1D↑j
.text:00404447                 test    ebx, ebx
.text:00404449                 jz      short loc_40443F
.text:0040444B                 call    sub_404640
.text:0040444B sub_404420      endp
.text:0040444B
.text:00404450 ; ---------------------------------------------------------------------------
.text:00404450                 jmp     sub_4045A0
.text:00404450 ; ---------------------------------------------------------------------------
.text:00404455                 align 10h
.text:00404460                 sub     esp, 0Ch
.text:00404463                 mov     edx, [esp+14h]
.text:00404467                 mov     dword ptr [esp+8], 1
.text:0040446F                 mov     [esp+4], edx
.text:00404473                 mov     edx, [esp+10h]
.text:00404477                 mov     [esp], edx
.text:0040447A                 call    sub_4045A0
.text:0040447F                 add     esp, 0Ch
.text:00404482                 retn
.text:00404482 ; ---------------------------------------------------------------------------
.text:00404483                 align 10h
.text:00404490                 sub     esp, 1Ch
.text:00404493                 mov     [esp+18h], ebx
.text:00404497                 mov     ebx, [esp+20h]
.text:0040449B                 mov     [esp], ebx
.text:0040449E                 call    malloc
.text:004044A3                 test    eax, eax
.text:004044A5                 jz      short loc_4044C3
.text:004044A7
.text:004044A7 loc_4044A7:                             ; CODE XREF: .text:004044C5↓j
.text:004044A7                 mov     [esp+8], ebx
.text:004044AB                 mov     dword ptr [esp+4], 0
.text:004044B3                 mov     [esp], eax
.text:004044B6                 call    memset
.text:004044BB                 mov     ebx, [esp+18h]
.text:004044BF                 add     esp, 1Ch
.text:004044C2                 retn
.text:004044C3 ; ---------------------------------------------------------------------------
.text:004044C3
.text:004044C3 loc_4044C3:                             ; CODE XREF: .text:004044A5↑j
.text:004044C3                 test    ebx, ebx
.text:004044C5                 jz      short loc_4044A7
.text:004044C7                 call    sub_404640
.text:004044C7 ; ---------------------------------------------------------------------------
.text:004044CC                 align 10h
.text:004044D0                 sub     esp, 0Ch
.text:004044D3                 xor     edx, edx
.text:004044D5                 mov     ecx, [esp+14h]
.text:004044D9                 mov     [esp+8], ebx
.text:004044DD                 mov     eax, 0FFFFFFFFh
.text:004044E2                 mov     ebx, [esp+10h]
.text:004044E6                 div     ecx
.text:004044E8                 cmp     eax, ebx
.text:004044EA                 jb      short loc_404508
.text:004044EC                 mov     [esp+4], ecx
.text:004044F0                 mov     [esp], ebx
.text:004044F3                 call    calloc
.text:004044F8                 test    eax, eax
.text:004044FA                 jz      short loc_404504
.text:004044FC
.text:004044FC loc_4044FC:                             ; CODE XREF: .text:00404506↓j
.text:004044FC                 mov     ebx, [esp+8]
.text:00404500                 add     esp, 0Ch
.text:00404503                 retn
.text:00404504 ; ---------------------------------------------------------------------------
.text:00404504
.text:00404504 loc_404504:                             ; CODE XREF: .text:004044FA↑j
.text:00404504                 test    ebx, ebx
.text:00404506                 jz      short loc_4044FC
.text:00404508
.text:00404508 loc_404508:                             ; CODE XREF: .text:004044EA↑j
.text:00404508                 call    sub_404640
.text:00404508 ; ---------------------------------------------------------------------------
.text:0040450D                 align 10h
.text:00404510                 sub     esp, 1Ch
.text:00404513                 mov     [esp+18h], ebx
.text:00404517                 mov     ebx, [esp+24h]
.text:0040451B                 mov     [esp], ebx
.text:0040451E                 call    malloc
.text:00404523                 test    eax, eax
.text:00404525                 mov     edx, eax
.text:00404527                 jz      short loc_404545
.text:00404529
.text:00404529 loc_404529:                             ; CODE XREF: .text:00404547↓j
.text:00404529                 mov     [esp+8], ebx
.text:0040452D                 mov     ecx, [esp+20h]
.text:00404531                 mov     [esp], edx
.text:00404534                 mov     [esp+4], ecx
.text:00404538                 call    memcpy
.text:0040453D                 mov     ebx, [esp+18h]
.text:00404541                 add     esp, 1Ch
.text:00404544                 retn
.text:00404545 ; ---------------------------------------------------------------------------
.text:00404545
.text:00404545 loc_404545:                             ; CODE XREF: .text:00404527↑j
.text:00404545                 test    ebx, ebx
.text:00404547                 jz      short loc_404529
.text:00404549                 call    sub_404640
.text:00404549 ; ---------------------------------------------------------------------------
.text:0040454E                 align 10h
.text:00404550                 sub     esp, 1Ch
.text:00404553                 mov     [esp+18h], esi
.text:00404557                 mov     esi, [esp+20h]
.text:0040455B                 mov     [esp+14h], ebx
.text:0040455F                 mov     [esp], esi
.text:00404562                 call    strlen
.text:00404567                 lea     ebx, [eax+1]
.text:0040456A                 mov     [esp], ebx
.text:0040456D                 call    malloc
.text:00404572                 test    eax, eax
.text:00404574                 jz      short loc_404592
.text:00404576
.text:00404576 loc_404576:                             ; CODE XREF: .text:00404594↓j
.text:00404576                 mov     [esp+8], ebx
.text:0040457A                 mov     [esp+4], esi
.text:0040457E                 mov     [esp], eax
.text:00404581                 call    memcpy
.text:00404586                 mov     ebx, [esp+14h]
.text:0040458A                 mov     esi, [esp+18h]
.text:0040458E                 add     esp, 1Ch
.text:00404591                 retn
.text:00404592 ; ---------------------------------------------------------------------------
.text:00404592
.text:00404592 loc_404592:                             ; CODE XREF: .text:00404574↑j
.text:00404592                 test    ebx, ebx
.text:00404594                 jz      short loc_404576
.text:00404596                 call    sub_404640
.text:00404596 ; ---------------------------------------------------------------------------
.text:0040459B                 align 10h
.text:004045A0
.text:004045A0 ; =============== S U B R O U T I N E =======================================
.text:004045A0
.text:004045A0
.text:004045A0 ; int __cdecl sub_4045A0(void *, int, int)
.text:004045A0 sub_4045A0      proc near               ; CODE XREF: .text:00404450↑j
.text:004045A0                                         ; .text:0040447A↑p
.text:004045A0
.text:004045A0 Block           = dword ptr -1Ch
.text:004045A0 Size            = dword ptr -18h
.text:004045A0 var_C           = dword ptr -0Ch
.text:004045A0 var_8           = dword ptr -8
.text:004045A0 var_4           = dword ptr -4
.text:004045A0 arg_0           = dword ptr  4
.text:004045A0 arg_4           = dword ptr  8
.text:004045A0 arg_8           = dword ptr  0Ch
.text:004045A0
.text:004045A0                 sub     esp, 1Ch
.text:004045A3                 mov     [esp+1Ch+var_8], esi
.text:004045A7                 mov     esi, [esp+1Ch+arg_0]
.text:004045AB                 mov     [esp+1Ch+var_4], edi
.text:004045AF                 mov     edi, [esp+1Ch+arg_4]
.text:004045B3                 test    esi, esi
.text:004045B5                 mov     [esp+1Ch+var_C], ebx
.text:004045B9                 mov     ecx, [edi]
.text:004045BB                 mov     ebx, [esp+1Ch+arg_8]
.text:004045BF                 jz      short loc_404600
.text:004045C1                 xor     edx, edx
.text:004045C3                 mov     eax, 7FFFFFFFh
.text:004045C8                 div     ebx
.text:004045CA                 cmp     eax, ecx
.text:004045CC                 jb      short loc_4045F9
.text:004045CE                 add     ecx, ecx
.text:004045D0
.text:004045D0 loc_4045D0:                             ; CODE XREF: sub_4045A0+62↓j
.text:004045D0                                         ; sub_4045A0+71↓j ...
.text:004045D0                 mov     [edi], ecx
.text:004045D2                 imul    ebx, ecx
.text:004045D5                 mov     [esp+1Ch+Block], esi ; Block
.text:004045D8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004045DC                 call    realloc
.text:004045E1                 test    eax, eax
.text:004045E3                 jz      short loc_4045F5
.text:004045E5
.text:004045E5 loc_4045E5:                             ; CODE XREF: sub_4045A0+57↓j
.text:004045E5                 mov     ebx, [esp+1Ch+var_C]
.text:004045E9                 mov     esi, [esp+1Ch+var_8]
.text:004045ED                 mov     edi, [esp+1Ch+var_4]
.text:004045F1                 add     esp, 1Ch
.text:004045F4                 retn
.text:004045F5 ; ---------------------------------------------------------------------------
.text:004045F5
.text:004045F5 loc_4045F5:                             ; CODE XREF: sub_4045A0+43↑j
.text:004045F5                 test    ebx, ebx
.text:004045F7                 jz      short loc_4045E5
.text:004045F9
.text:004045F9 loc_4045F9:                             ; CODE XREF: sub_4045A0+2C↑j
.text:004045F9                 call    sub_404640
.text:004045F9 ; ---------------------------------------------------------------------------
.text:004045FE                 align 10h
.text:00404600
.text:00404600 loc_404600:                             ; CODE XREF: sub_4045A0+1F↑j
.text:00404600                 test    ecx, ecx
.text:00404602                 jnz     short loc_4045D0
.text:00404604                 xor     edx, edx
.text:00404606                 mov     eax, 40h ; '@'
.text:0040460B                 div     ebx
.text:0040460D                 test    eax, eax
.text:0040460F                 mov     ecx, eax
.text:00404611                 jnz     short loc_4045D0
.text:00404613                 mov     ecx, 1
.text:00404618                 jmp     short loc_4045D0
.text:00404618 sub_4045A0      endp
.text:00404618
.text:00404618 ; ---------------------------------------------------------------------------
.text:0040461A                 align 10h
.text:00404620 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404640+3↓o
.text:00404631 ; const char aS[]
.text:00404631 aS              db '%s',0               ; DATA XREF: sub_404640+10↓o
.text:00404634                 align 10h
.text:00404640
.text:00404640 ; =============== S U B R O U T I N E =======================================
.text:00404640
.text:00404640 ; Attributes: noreturn
.text:00404640
.text:00404640 sub_404640      proc near               ; CODE XREF: sub_403C80:loc_403E3F↑p
.text:00404640                                         ; .text:loc_404389↑p ...
.text:00404640
.text:00404640 Code            = dword ptr -1Ch
.text:00404640 ErrorMessage    = dword ptr -18h
.text:00404640 var_14          = dword ptr -14h
.text:00404640 var_10          = byte ptr -10h
.text:00404640
.text:00404640                 sub     esp, 1Ch
.text:00404643                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040464A                 call    ds:libintl_gettext
.text:00404650                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00404658                 mov     edx, Code
.text:0040465E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404666                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040466A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040466D                 call    sub_4046D0
.text:00404672                 call    abort
.text:00404672 sub_404640      endp
.text:00404672
.text:00404672 ; ---------------------------------------------------------------------------
.text:00404677                 align 10h
.text:00404680
.text:00404680 ; =============== S U B R O U T I N E =======================================
.text:00404680
.text:00404680 ; Attributes: thunk
.text:00404680
.text:00404680 libintl_bindtextdomain proc near
.text:00404680                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404680 libintl_bindtextdomain endp
.text:00404680
.text:00404680 ; ---------------------------------------------------------------------------
.text:00404686                 align 10h
.text:00404690                 jmp     ds:libintl_textdomain
.text:00404690 ; ---------------------------------------------------------------------------
.text:00404696                 align 10h
.text:004046A0                 jmp     ds:libintl_gettext
.text:004046A0 ; ---------------------------------------------------------------------------
.text:004046A6                 align 10h
.text:004046B0 ; const char aS_0[]
.text:004046B0 aS_0            db ': %s',0             ; DATA XREF: sub_4046D0+B8↓o
.text:004046B0                                         ; sub_4047D4+122↓o
.text:004046B5 aUnknownSystemE db 'Unknown system error',0
.text:004046B5                                         ; DATA XREF: sub_4046D0:loc_40479D↓o
.text:004046B5                                         ; sub_4047D4:loc_40490E↓o
.text:004046CA ; const char aS_1[]
.text:004046CA aS_1            db '%s: ',0             ; DATA XREF: sub_4046D0:loc_4047A4↓o
.text:004046CF                 align 10h
.text:004046D0
.text:004046D0 ; =============== S U B R O U T I N E =======================================
.text:004046D0
.text:004046D0
.text:004046D0 ; int __cdecl sub_4046D0(int Code, int ErrorMessage, char *, char)
.text:004046D0 sub_4046D0      proc near               ; CODE XREF: sub_401350+104↑p
.text:004046D0                                         ; sub_4029D0+86↑p ...
.text:004046D0
.text:004046D0 Stream          = dword ptr -1Ch
.text:004046D0 Format          = dword ptr -18h
.text:004046D0 ArgList         = dword ptr -14h
.text:004046D0 Code            = dword ptr  4
.text:004046D0 ErrorMessage    = dword ptr  8
.text:004046D0 arg_8           = dword ptr  0Ch
.text:004046D0 arg_C           = byte ptr  10h
.text:004046D0
.text:004046D0                 push    esi
.text:004046D1                 push    ebx
.text:004046D2                 sub     esp, 14h
.text:004046D5                 mov     edx, ds:_iob
.text:004046DB                 mov     esi, [esp+1Ch+Code]
.text:004046DF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004046E3                 add     edx, 20h ; ' '
.text:004046E6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004046E9                 call    fflush
.text:004046EE                 mov     eax, ds:dword_4071D0
.text:004046F3                 test    eax, eax
.text:004046F5                 jz      loc_4047A4
.text:004046FB                 call    eax ; dword_4071D0
.text:004046FD
.text:004046FD loc_4046FD:                             ; CODE XREF: sub_4046D0+F7↓j
.text:004046FD                 lea     edx, [esp+1Ch+arg_C]
.text:00404701                 mov     ecx, [esp+1Ch+arg_8]
.text:00404705                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404709                 mov     edx, ds:_iob
.text:0040470F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404713                 add     edx, 40h ; '@'
.text:00404716                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404719                 call    vfprintf
.text:0040471E                 inc     ds:dword_4071E0
.text:00404724                 test    ebx, ebx
.text:00404726                 jnz     short loc_404772
.text:00404728
.text:00404728 loc_404728:                             ; CODE XREF: sub_4046D0+CB↓j
.text:00404728                 mov     edx, ds:_iob
.text:0040472E                 lea     ecx, [edx+40h]
.text:00404731                 mov     ebx, [ecx+4]
.text:00404734                 dec     ebx
.text:00404735                 test    ebx, ebx
.text:00404737                 mov     [ecx+4], ebx
.text:0040473A                 js      short loc_404760
.text:0040473C                 mov     ecx, [edx+40h]
.text:0040473F                 mov     byte ptr [ecx], 0Ah
.text:00404742                 inc     dword ptr [edx+40h]
.text:00404745
.text:00404745 loc_404745:                             ; CODE XREF: sub_4046D0+A0↓j
.text:00404745                 mov     edx, ds:_iob
.text:0040474B                 add     edx, 40h ; '@'
.text:0040474E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404751                 call    fflush
.text:00404756                 test    esi, esi
.text:00404758                 jnz     short loc_4047CC
.text:0040475A                 add     esp, 14h
.text:0040475D                 pop     ebx
.text:0040475E                 pop     esi
.text:0040475F                 retn
.text:00404760 ; ---------------------------------------------------------------------------
.text:00404760
.text:00404760 loc_404760:                             ; CODE XREF: sub_4046D0+6A↑j
.text:00404760                 mov     [esp+1Ch+Format], ecx ; File
.text:00404764                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040476B                 call    _flsbuf
.text:00404770                 jmp     short loc_404745
.text:00404772 ; ---------------------------------------------------------------------------
.text:00404772
.text:00404772 loc_404772:                             ; CODE XREF: sub_4046D0+56↑j
.text:00404772                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404775                 call    strerror
.text:0040477A                 test    eax, eax
.text:0040477C                 jz      short loc_40479D
.text:0040477E
.text:0040477E loc_40477E:                             ; CODE XREF: sub_4046D0+D2↓j
.text:0040477E                 mov     [esp+1Ch+ArgList], eax
.text:00404782                 mov     ebx, ds:_iob
.text:00404788                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00404790                 add     ebx, 40h ; '@'
.text:00404793                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404796                 call    fprintf
.text:0040479B                 jmp     short loc_404728
.text:0040479D ; ---------------------------------------------------------------------------
.text:0040479D
.text:0040479D loc_40479D:                             ; CODE XREF: sub_4046D0+AC↑j
.text:0040479D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004047A2                 jmp     short loc_40477E
.text:004047A4 ; ---------------------------------------------------------------------------
.text:004047A4
.text:004047A4 loc_4047A4:                             ; CODE XREF: sub_4046D0+25↑j
.text:004047A4                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:004047AC                 mov     edx, ds:_iob
.text:004047B2                 mov     ecx, ds:dword_4071A0
.text:004047B8                 add     edx, 40h ; '@'
.text:004047BB                 mov     [esp+1Ch+ArgList], ecx
.text:004047BF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004047C2                 call    fprintf
.text:004047C7                 jmp     loc_4046FD
.text:004047CC ; ---------------------------------------------------------------------------
.text:004047CC
.text:004047CC loc_4047CC:                             ; CODE XREF: sub_4046D0+88↑j
.text:004047CC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004047CF                 call    exit
.text:004047CF sub_4046D0      endp
.text:004047CF
.text:004047D4
.text:004047D4 ; =============== S U B R O U T I N E =======================================
.text:004047D4
.text:004047D4
.text:004047D4 ; int __cdecl sub_4047D4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004047D4 sub_4047D4      proc near               ; DATA XREF: sub_4047D4+77↓o
.text:004047D4
.text:004047D4 Stream          = dword ptr -28h
.text:004047D4 Format          = dword ptr -24h
.text:004047D4 ArgList         = dword ptr -20h
.text:004047D4 var_1C          = dword ptr -1Ch
.text:004047D4 Code            = dword ptr  8
.text:004047D4 ErrorMessage    = dword ptr  0Ch
.text:004047D4 Str2            = dword ptr  10h
.text:004047D4 arg_10          = dword ptr  14h
.text:004047D4 arg_14          = dword ptr  18h
.text:004047D4 arg_18          = byte ptr  1Ch
.text:004047D4
.text:004047D4                 and     eax, 64253A73h
.text:004047D9                 cmp     ah, [eax]
.text:004047DB
.text:004047DB loc_4047DB:                             ; DATA XREF: sub_4047D4:loc_404915↓o
.text:004047DB                 add     ds:55003A73h, ah
.text:004047E1                 push    edi
.text:004047E2                 push    esi
.text:004047E3                 push    ebx
.text:004047E4                 sub     esp, 1Ch
.text:004047E7                 mov     edx, ds:dword_407210
.text:004047ED                 mov     ebp, [esp+28h+Code]
.text:004047F1                 mov     edi, [esp+28h+ErrorMessage]
.text:004047F5                 test    edx, edx
.text:004047F7                 mov     ebx, [esp+28h+Str2]
.text:004047FB                 mov     esi, [esp+28h+arg_10]
.text:004047FF                 jz      short loc_404819
.text:00404801                 cmp     ds:dword_407180, esi
.text:00404807                 jz      loc_404940
.text:0040480D
.text:0040480D loc_40480D:                             ; CODE XREF: sub_4047D4+18D↓j
.text:0040480D                 mov     ds:Str1, ebx
.text:00404813                 mov     ds:dword_407180, esi
.text:00404819
.text:00404819 loc_404819:                             ; CODE XREF: sub_4047D4+2B↑j
.text:00404819                 mov     edx, ds:_iob
.text:0040481F                 add     edx, 20h ; ' '
.text:00404822                 mov     [esp+28h+Stream], edx ; Stream
.text:00404825                 call    fflush
.text:0040482A                 mov     eax, ds:dword_4071D0
.text:0040482F                 test    eax, eax
.text:00404831                 jz      loc_404915
.text:00404837                 call    eax ; dword_4071D0
.text:00404839
.text:00404839 loc_404839:                             ; CODE XREF: sub_4047D4+164↓j
.text:00404839                 test    ebx, ebx
.text:0040483B                 jz      short loc_40485E
.text:0040483D                 mov     [esp+28h+ArgList], ebx
.text:00404841                 mov     ebx, ds:_iob
.text:00404847                 mov     [esp+28h+var_1C], esi
.text:0040484B                 mov     [esp+28h+Format], offset sub_4047D4 ; Format
.text:00404853                 add     ebx, 40h ; '@'
.text:00404856                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404859                 call    fprintf
.text:0040485E
.text:0040485E loc_40485E:                             ; CODE XREF: sub_4047D4+67↑j
.text:0040485E                 mov     esi, ds:_iob
.text:00404864                 lea     edx, [esp+28h+arg_18]
.text:00404868                 mov     ecx, [esp+28h+arg_14]
.text:0040486C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404870                 add     esi, 40h ; '@'
.text:00404873                 mov     [esp+28h+Format], ecx ; Format
.text:00404877                 mov     [esp+28h+Stream], esi ; Stream
.text:0040487A                 call    vfprintf
.text:0040487F                 inc     ds:dword_4071E0
.text:00404885                 test    edi, edi
.text:00404887                 jnz     short loc_4048E0
.text:00404889
.text:00404889 loc_404889:                             ; CODE XREF: sub_4047D4+135↓j
.text:00404889                 mov     edx, ds:_iob
.text:0040488F                 lea     ecx, [edx+40h]
.text:00404892                 mov     ebx, [ecx+4]
.text:00404895                 dec     ebx
.text:00404896                 test    ebx, ebx
.text:00404898                 mov     [ecx+4], ebx
.text:0040489B                 js      short loc_4048C7
.text:0040489D                 mov     esi, [edx+40h]
.text:004048A0                 mov     byte ptr [esi], 0Ah
.text:004048A3                 inc     dword ptr [edx+40h]
.text:004048A6
.text:004048A6 loc_4048A6:                             ; CODE XREF: sub_4047D4+103↓j
.text:004048A6                 mov     ecx, ds:_iob
.text:004048AC                 add     ecx, 40h ; '@'
.text:004048AF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004048B2                 call    fflush
.text:004048B7                 test    ebp, ebp
.text:004048B9                 jnz     loc_404966
.text:004048BF
.text:004048BF loc_4048BF:                             ; CODE XREF: sub_4047D4+173↓j
.text:004048BF                                         ; sub_4047D4+187↓j
.text:004048BF                 add     esp, 1Ch
.text:004048C2                 pop     ebx
.text:004048C3                 pop     esi
.text:004048C4                 pop     edi
.text:004048C5                 pop     ebp
.text:004048C6                 retn
.text:004048C7 ; ---------------------------------------------------------------------------
.text:004048C7
.text:004048C7 loc_4048C7:                             ; CODE XREF: sub_4047D4+C7↑j
.text:004048C7                 mov     [esp+28h+Format], ecx ; File
.text:004048CB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004048D2                 call    _flsbuf
.text:004048D7                 jmp     short loc_4048A6
.text:004048D7 ; ---------------------------------------------------------------------------
.text:004048D9                 align 10h
.text:004048E0
.text:004048E0 loc_4048E0:                             ; CODE XREF: sub_4047D4+B3↑j
.text:004048E0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004048E3                 call    strerror
.text:004048E8                 test    eax, eax
.text:004048EA                 jz      short loc_40490E
.text:004048EC
.text:004048EC loc_4048EC:                             ; CODE XREF: sub_4047D4+13F↓j
.text:004048EC                 mov     [esp+28h+ArgList], eax
.text:004048F0                 mov     edi, ds:_iob
.text:004048F6                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:004048FE                 add     edi, 40h ; '@'
.text:00404901                 mov     [esp+28h+Stream], edi ; Stream
.text:00404904                 call    fprintf
.text:00404909                 jmp     loc_404889
.text:0040490E ; ---------------------------------------------------------------------------
.text:0040490E
.text:0040490E loc_40490E:                             ; CODE XREF: sub_4047D4+116↑j
.text:0040490E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404913                 jmp     short loc_4048EC
.text:00404915 ; ---------------------------------------------------------------------------
.text:00404915
.text:00404915 loc_404915:                             ; CODE XREF: sub_4047D4+5D↑j
.text:00404915                 mov     [esp+28h+Format], (offset loc_4047DB+1) ; Format
.text:0040491D                 mov     ecx, ds:_iob
.text:00404923                 mov     edx, ds:dword_4071A0
.text:00404929                 add     ecx, 40h ; '@'
.text:0040492C                 mov     [esp+28h+ArgList], edx
.text:00404930                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404933                 call    fprintf
.text:00404938                 jmp     loc_404839
.text:00404938 ; ---------------------------------------------------------------------------
.text:0040493D                 align 10h
.text:00404940
.text:00404940 loc_404940:                             ; CODE XREF: sub_4047D4+33↑j
.text:00404940                 mov     eax, ds:Str1
.text:00404945                 cmp     ebx, eax
.text:00404947                 jz      loc_4048BF
.text:0040494D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404951                 mov     [esp+28h+Stream], eax ; Str1
.text:00404954                 call    strcmp
.text:00404959                 test    eax, eax
.text:0040495B                 jz      loc_4048BF
.text:00404961                 jmp     loc_40480D
.text:00404966 ; ---------------------------------------------------------------------------
.text:00404966
.text:00404966 loc_404966:                             ; CODE XREF: sub_4047D4+E5↑j
.text:00404966                 mov     [esp+28h+Stream], ebp ; Code
.text:00404969                 call    exit
.text:00404969 sub_4047D4      endp ; sp-analysis failed
.text:00404969
.text:00404969 ; ---------------------------------------------------------------------------
.text:0040496E                 align 10h
.text:00404970
.text:00404970 ; =============== S U B R O U T I N E =======================================
.text:00404970
.text:00404970
.text:00404970 sub_404970      proc near               ; CODE XREF: sub_401350:loc_401491↑p
.text:00404970
.text:00404970 name            = dword ptr -12Ch
.text:00404970 namelen         = dword ptr -128h
.text:00404970 var_11C         = byte ptr -11Ch
.text:00404970 var_4           = dword ptr -4
.text:00404970
.text:00404970                 sub     esp, 12Ch
.text:00404976                 mov     [esp+12Ch+var_4], ebx
.text:0040497D                 call    sub_404A00
.text:00404982                 inc     eax
.text:00404983                 mov     edx, 0FFFFFFFFh
.text:00404988                 jz      short loc_4049A7
.text:0040498A                 mov     [esp+12Ch+namelen], 104h ; namelen
.text:00404992                 lea     ebx, [esp+12Ch+var_11C]
.text:00404996                 mov     [esp+12Ch+name], ebx ; name
.text:00404999                 call    gethostname
.text:0040499E                 sub     esp, 8
.text:004049A1                 test    eax, eax
.text:004049A3                 jz      short loc_4049B7
.text:004049A5
.text:004049A5 loc_4049A5:                             ; CODE XREF: sub_404970+54↓j
.text:004049A5                 xor     edx, edx
.text:004049A7
.text:004049A7 loc_4049A7:                             ; CODE XREF: sub_404970+18↑j
.text:004049A7                                         ; sub_404970+75↓j
.text:004049A7                 mov     ebx, [esp+12Ch+var_4]
.text:004049AE                 mov     eax, edx
.text:004049B0                 add     esp, 12Ch
.text:004049B6                 retn
.text:004049B7 ; ---------------------------------------------------------------------------
.text:004049B7
.text:004049B7 loc_4049B7:                             ; CODE XREF: sub_404970+33↑j
.text:004049B7                 mov     [esp+12Ch+name], ebx ; name
.text:004049BA                 call    gethostbyname
.text:004049BF                 sub     esp, 4
.text:004049C2                 test    eax, eax
.text:004049C4                 jz      short loc_4049A5
.text:004049C6                 mov     edx, [eax+0Ch]
.text:004049C9                 mov     ecx, [edx]
.text:004049CB                 mov     edx, [ecx]
.text:004049CD                 mov     [esp+12Ch+name], edx ; in
.text:004049D0                 call    inet_ntoa
.text:004049D5                 sub     esp, 4
.text:004049D8                 mov     [esp+12Ch+name], eax ; cp
.text:004049DB                 call    inet_addr
.text:004049E0                 sub     esp, 4
.text:004049E3                 mov     edx, eax
.text:004049E5                 jmp     short loc_4049A7
.text:004049E5 sub_404970      endp
.text:004049E5
.text:004049E5 ; ---------------------------------------------------------------------------
.text:004049E7                 align 10h
.text:004049F0 aWsastartup     db 'WSAStartup',0       ; DATA XREF: sub_404A00+6B↓o
.text:004049FB                 align 10h
.text:00404A00
.text:00404A00 ; =============== S U B R O U T I N E =======================================
.text:00404A00
.text:00404A00
.text:00404A00 sub_404A00      proc near               ; CODE XREF: sub_404970+D↑p
.text:00404A00
.text:00404A00 wVersionRequested= word ptr -1ACh
.text:00404A00 lpWSAData       = dword ptr -1A8h
.text:00404A00 WSAData         = WSAData ptr -19Ch
.text:00404A00 var_4           = dword ptr -4
.text:00404A00
.text:00404A00                 sub     esp, 1ACh
.text:00404A06                 mov     eax, ds:dword_407190
.text:00404A0B                 mov     [esp+1ACh+var_4], ebx
.text:00404A12                 test    eax, eax
.text:00404A14                 jz      short loc_404A26
.text:00404A16
.text:00404A16 loc_404A16:                             ; CODE XREF: sub_404A00+58↓j
.text:00404A16                 xor     eax, eax
.text:00404A18
.text:00404A18 loc_404A18:                             ; CODE XREF: sub_404A00+7C↓j
.text:00404A18                 mov     ebx, [esp+1ACh+var_4]
.text:00404A1F                 add     esp, 1ACh
.text:00404A25                 retn
.text:00404A26 ; ---------------------------------------------------------------------------
.text:00404A26
.text:00404A26 loc_404A26:                             ; CODE XREF: sub_404A00+14↑j
.text:00404A26                 mov     dword ptr [esp+1ACh+wVersionRequested], 1 ; wVersionRequested
.text:00404A2D                 lea     edx, [esp+1ACh+WSAData]
.text:00404A31                 mov     [esp+1ACh+lpWSAData], edx ; lpWSAData
.text:00404A35                 call    WSAStartup
.text:00404A3A                 sub     esp, 8
.text:00404A3D                 test    eax, eax
.text:00404A3F                 jnz     short loc_404A5A
.text:00404A41                 mov     dword ptr [esp+1ACh+wVersionRequested], offset sub_404A80 ; void (__cdecl *)()
.text:00404A48                 call    sub_401040
.text:00404A4D                 mov     ecx, 1
.text:00404A52                 mov     ds:dword_407190, ecx
.text:00404A58                 jmp     short loc_404A16
.text:00404A5A ; ---------------------------------------------------------------------------
.text:00404A5A
.text:00404A5A loc_404A5A:                             ; CODE XREF: sub_404A00+3F↑j
.text:00404A5A                 mov     dword ptr [esp+1ACh+wVersionRequested], eax
.text:00404A5D                 call    ___get_errno
.text:00404A62                 mov     ebx, eax
.text:00404A64                 call    _errno
.text:00404A69                 mov     [eax], ebx
.text:00404A6B                 mov     dword ptr [esp+1ACh+wVersionRequested], offset aWsastartup ; "WSAStartup"
.text:00404A72                 call    sub_404AD0
.text:00404A77                 mov     eax, 0FFFFFFFFh
.text:00404A7C                 jmp     short loc_404A18
.text:00404A7C sub_404A00      endp
.text:00404A7C
.text:00404A7C ; ---------------------------------------------------------------------------
.text:00404A7E                 align 10h
.text:00404A80
.text:00404A80 ; =============== S U B R O U T I N E =======================================
.text:00404A80
.text:00404A80
.text:00404A80 ; void __cdecl sub_404A80()
.text:00404A80 sub_404A80      proc near               ; DATA XREF: sub_404A00+41↑o
.text:00404A80
.text:00404A80 var_4           = dword ptr -4
.text:00404A80
.text:00404A80                 sub     esp, 0Ch
.text:00404A83                 mov     [esp+0Ch+var_4], ebx
.text:00404A87                 call    WSACleanup
.text:00404A8C                 test    eax, eax
.text:00404A8E                 jz      short loc_404A98
.text:00404A90
.text:00404A90 loc_404A90:                             ; CODE XREF: sub_404A80+26↓j
.text:00404A90                 mov     ebx, [esp+0Ch+var_4]
.text:00404A94                 add     esp, 0Ch
.text:00404A97                 retn
.text:00404A98 ; ---------------------------------------------------------------------------
.text:00404A98
.text:00404A98 loc_404A98:                             ; CODE XREF: sub_404A80+E↑j
.text:00404A98                 call    sub_404DC0
.text:00404A9D                 mov     ebx, eax
.text:00404A9F                 call    _errno
.text:00404AA4                 mov     [eax], ebx
.text:00404AA6                 jmp     short loc_404A90
.text:00404AA6 sub_404A80      endp
.text:00404AA6
.text:00404AA6 ; ---------------------------------------------------------------------------
.text:00404AA8                 align 10h
.text:00404AB0 ; const char aSSocketErrorDS[]
.text:00404AB0 aSSocketErrorDS db '%s: Socket error %d: %s',0Ah,0
.text:00404AB0                                         ; DATA XREF: sub_404AD0+27↓o
.text:00404AC9                 align 10h
.text:00404AD0
.text:00404AD0 ; =============== S U B R O U T I N E =======================================
.text:00404AD0
.text:00404AD0
.text:00404AD0 sub_404AD0      proc near               ; CODE XREF: sub_404A00+72↑p
.text:00404AD0
.text:00404AD0 Stream          = dword ptr -1Ch
.text:00404AD0 Format          = dword ptr -18h
.text:00404AD0 var_14          = dword ptr -14h
.text:00404AD0 var_10          = dword ptr -10h
.text:00404AD0 var_C           = dword ptr -0Ch
.text:00404AD0 var_4           = dword ptr -4
.text:00404AD0 arg_0           = dword ptr  4
.text:00404AD0
.text:00404AD0                 sub     esp, 1Ch
.text:00404AD3                 mov     [esp+1Ch+var_4], ebx
.text:00404AD7                 call    WSAGetLastError
.text:00404ADC                 mov     [esp+1Ch+Stream], eax ; DWORD
.text:00404ADF                 call    sub_404DE0
.text:00404AE4                 mov     ebx, eax
.text:00404AE6                 call    WSAGetLastError
.text:00404AEB                 mov     [esp+1Ch+var_10], eax
.text:00404AEF                 mov     edx, [esp+1Ch+arg_0]
.text:00404AF3                 mov     [esp+1Ch+var_C], ebx
.text:00404AF7                 mov     [esp+1Ch+Format], offset aSSocketErrorDS ; "%s: Socket error %d: %s\n"
.text:00404AFF                 mov     [esp+1Ch+var_14], edx
.text:00404B03                 mov     edx, ds:_iob
.text:00404B09                 add     edx, 40h ; '@'
.text:00404B0C                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404B0F                 call    fprintf
.text:00404B14                 mov     [esp+1Ch+Stream], ebx ; hMem
.text:00404B17                 call    LocalFree
.text:00404B1C                 sub     esp, 4
.text:00404B1F                 mov     ebx, [esp+1Ch+var_4]
.text:00404B23                 add     esp, 1Ch
.text:00404B26                 retn
.text:00404B26 sub_404AD0      endp
.text:00404B26
.text:00404B26 ; ---------------------------------------------------------------------------
.text:00404B27                 align 10h
.text:00404B30
.text:00404B30 ; =============== S U B R O U T I N E =======================================
.text:00404B30
.text:00404B30 ; Attributes: info_from_lumina
.text:00404B30
.text:00404B30 ___get_errno    proc near               ; CODE XREF: sub_404A00+5D↑p
.text:00404B30                                         ; sub_404DC0+B↓p
.text:00404B30
.text:00404B30 arg_0           = dword ptr  4
.text:00404B30
.text:00404B30                 mov     eax, [esp+arg_0]
.text:00404B34                 cmp     eax, 53h ; 'S'
.text:00404B37                 jg      loc_404C30
.text:00404B3D                 cmp     eax, 52h ; 'R'
.text:00404B40                 jge     short loc_404B92
.text:00404B42                 cmp     eax, 0Fh
.text:00404B45                 jz      short loc_404B60
.text:00404B47                 cmp     eax, 0Fh
.text:00404B4A                 jg      short loc_404BC0
.text:00404B4C                 cmp     eax, 9
.text:00404B4F                 jg      short loc_404BA0
.text:00404B51                 cmp     eax, 7
.text:00404B54                 jge     short loc_404B99
.text:00404B56                 cmp     eax, 3
.text:00404B59                 jg      short loc_404B7A
.text:00404B5B                 cmp     eax, 2
.text:00404B5E                 jl      short loc_404B73
.text:00404B60
.text:00404B60 loc_404B60:                             ; CODE XREF: ___get_errno+15↑j
.text:00404B60                                         ; ___get_errno+9D↓j ...
.text:00404B60                 mov     edx, 2
.text:00404B65                 lea     esi, [esi+0]
.text:00404B69                 lea     edi, [edi+0]
.text:00404B70
.text:00404B70 loc_404B70:                             ; CODE XREF: ___get_errno+48↓j
.text:00404B70                                         ; ___get_errno+59↓j ...
.text:00404B70                 mov     eax, edx
.text:00404B72                 retn
.text:00404B73 ; ---------------------------------------------------------------------------
.text:00404B73
.text:00404B73 loc_404B73:                             ; CODE XREF: ___get_errno+2E↑j
.text:00404B73                                         ; ___get_errno+78↓j ...
.text:00404B73                 mov     edx, 16h
.text:00404B78                 jmp     short loc_404B70
.text:00404B7A ; ---------------------------------------------------------------------------
.text:00404B7A
.text:00404B7A loc_404B7A:                             ; CODE XREF: ___get_errno+29↑j
.text:00404B7A                 cmp     eax, 5
.text:00404B7D                 jz      short loc_404B92
.text:00404B7F                 cmp     eax, 5
.text:00404B82                 jg      short loc_404B8B
.text:00404B84                 mov     edx, 18h
.text:00404B89                 jmp     short loc_404B70
.text:00404B8B ; ---------------------------------------------------------------------------
.text:00404B8B
.text:00404B8B loc_404B8B:                             ; CODE XREF: ___get_errno+52↑j
.text:00404B8B                                         ; ___get_errno+180↓j
.text:00404B8B                 mov     edx, 9
.text:00404B90                 jmp     short loc_404B70
.text:00404B92 ; ---------------------------------------------------------------------------
.text:00404B92
.text:00404B92 loc_404B92:                             ; CODE XREF: ___get_errno+10↑j
.text:00404B92                                         ; ___get_errno+4D↑j ...
.text:00404B92                 mov     edx, 0Dh
.text:00404B97                 jmp     short loc_404B70
.text:00404B99 ; ---------------------------------------------------------------------------
.text:00404B99
.text:00404B99 loc_404B99:                             ; CODE XREF: ___get_errno+24↑j
.text:00404B99                                         ; ___get_errno+73↓j ...
.text:00404B99                 mov     edx, 0Ch
.text:00404B9E                 jmp     short loc_404B70
.text:00404BA0 ; ---------------------------------------------------------------------------
.text:00404BA0
.text:00404BA0 loc_404BA0:                             ; CODE XREF: ___get_errno+1F↑j
.text:00404BA0                 cmp     eax, 0Dh
.text:00404BA3                 jg      short loc_404B99
.text:00404BA5                 cmp     eax, 0Ch
.text:00404BA8                 jge     short loc_404B73
.text:00404BAA                 cmp     eax, 0Ah
.text:00404BAD                 mov     edx, 7
.text:00404BB2                 jz      short loc_404B70
.text:00404BB4                 cmp     eax, 0Bh
.text:00404BB7                 jnz     short loc_404B73
.text:00404BB9
.text:00404BB9 loc_404BB9:                             ; CODE XREF: ___get_errno+21A↓j
.text:00404BB9                 mov     edx, 8
.text:00404BBE                 jmp     short loc_404B70
.text:00404BC0 ; ---------------------------------------------------------------------------
.text:00404BC0
.text:00404BC0 loc_404BC0:                             ; CODE XREF: ___get_errno+1A↑j
.text:00404BC0                 cmp     eax, 22h ; '"'
.text:00404BC3                 jg      short loc_404BF4
.text:00404BC5                 cmp     eax, 16h
.text:00404BC8                 jge     short loc_404B92
.text:00404BCA                 cmp     eax, 12h
.text:00404BCD                 jz      short loc_404B60
.text:00404BCF                 cmp     eax, 12h
.text:00404BD2                 jg      short loc_404BE5
.text:00404BD4                 cmp     eax, 10h
.text:00404BD7                 jz      short loc_404B92
.text:00404BD9                 mov     edx, 12h
.text:00404BDE                 cmp     eax, 11h
.text:00404BE1
.text:00404BE1 loc_404BE1:                             ; CODE XREF: ___get_errno+172↓j
.text:00404BE1                                         ; ___get_errno+24C↓j ...
.text:00404BE1                 jnz     short loc_404B73
.text:00404BE3                 jmp     short loc_404B70
.text:00404BE5 ; ---------------------------------------------------------------------------
.text:00404BE5
.text:00404BE5 loc_404BE5:                             ; CODE XREF: ___get_errno+A2↑j
.text:00404BE5                 cmp     eax, 14h
.text:00404BE8                 jle     short loc_404B92
.text:00404BEA
.text:00404BEA loc_404BEA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00404BEA                 mov     edx, 10h
.text:00404BEF                 jmp     loc_404B70
.text:00404BF4 ; ---------------------------------------------------------------------------
.text:00404BF4
.text:00404BF4 loc_404BF4:                             ; CODE XREF: ___get_errno+93↑j
.text:00404BF4                 cmp     eax, 41h ; 'A'
.text:00404BF7                 jz      short loc_404B92
.text:00404BF9                 cmp     eax, 41h ; 'A'
.text:00404BFC                 jg      short loc_404C11
.text:00404BFE                 cmp     eax, 24h ; '$'
.text:00404C01                 jz      short loc_404B92
.text:00404C03                 cmp     eax, 35h ; '5'
.text:00404C06                 jnz     loc_404B73
.text:00404C0C                 jmp     loc_404B60
.text:00404C11 ; ---------------------------------------------------------------------------
.text:00404C11
.text:00404C11 loc_404C11:                             ; CODE XREF: ___get_errno+CC↑j
.text:00404C11                 cmp     eax, 43h ; 'C'
.text:00404C14                 jz      loc_404B60
.text:00404C1A                 cmp     eax, 50h ; 'P'
.text:00404C1D                 jnz     loc_404B73
.text:00404C23
.text:00404C23 loc_404C23:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00404C23                 mov     edx, 11h
.text:00404C28                 jmp     loc_404B70
.text:00404C28 ; ---------------------------------------------------------------------------
.text:00404C2D                 align 10h
.text:00404C30
.text:00404C30 loc_404C30:                             ; CODE XREF: ___get_errno+7↑j
.text:00404C30                 cmp     eax, 0A1h ; '¡'
.text:00404C35                 jz      loc_404B60
.text:00404C3B                 cmp     eax, 0A1h ; '¡'
.text:00404C40                 jg      loc_404CF0
.text:00404C46                 cmp     eax, 81h
.text:00404C4B                 jg      short loc_404CB5
.text:00404C4D                 cmp     eax, 80h ; '€'
.text:00404C52                 mov     edx, 0Ah
.text:00404C57                 jge     loc_404B70
.text:00404C5D                 cmp     eax, 6Ch ; 'l'
.text:00404C60                 jz      loc_404B92
.text:00404C66                 cmp     eax, 6Ch ; 'l'
.text:00404C69                 jg      short loc_404C87
.text:00404C6B                 cmp     eax, 57h ; 'W'
.text:00404C6E                 jz      loc_404B73
.text:00404C74                 cmp     eax, 59h ; 'Y'
.text:00404C77                 jnz     loc_404B73
.text:00404C7D
.text:00404C7D loc_404C7D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00404C7D                                         ; ___get_errno+23C↓j
.text:00404C7D                 mov     edx, 0Bh
.text:00404C82                 jmp     loc_404B70
.text:00404C87 ; ---------------------------------------------------------------------------
.text:00404C87
.text:00404C87 loc_404C87:                             ; CODE XREF: ___get_errno+139↑j
.text:00404C87                 cmp     eax, 70h ; 'p'
.text:00404C8A                 mov     edx, 1Ch
.text:00404C8F                 jz      loc_404B70
.text:00404C95                 cmp     eax, 70h ; 'p'
.text:00404C98                 jg      short loc_404CA7
.text:00404C9A                 mov     edx, 20h ; ' '
.text:00404C9F                 cmp     eax, 6Dh ; 'm'
.text:00404CA2                 jmp     loc_404BE1
.text:00404CA7 ; ---------------------------------------------------------------------------
.text:00404CA7
.text:00404CA7 loc_404CA7:                             ; CODE XREF: ___get_errno+168↑j
.text:00404CA7                 cmp     eax, 72h ; 'r'
.text:00404CAA
.text:00404CAA loc_404CAA:                             ; CODE XREF: ___get_errno+19C↓j
.text:00404CAA                 jnz     loc_404B73
.text:00404CB0                 jmp     loc_404B8B
.text:00404CB5 ; ---------------------------------------------------------------------------
.text:00404CB5
.text:00404CB5 loc_404CB5:                             ; CODE XREF: ___get_errno+11B↑j
.text:00404CB5                 cmp     eax, 84h ; '„'
.text:00404CBA                 jz      loc_404B92
.text:00404CC0                 cmp     eax, 84h ; '„'
.text:00404CC5                 jg      short loc_404CCE
.text:00404CC7                 cmp     eax, 82h ; '‚'
.text:00404CCC                 jmp     short loc_404CAA
.text:00404CCE ; ---------------------------------------------------------------------------
.text:00404CCE
.text:00404CCE loc_404CCE:                             ; CODE XREF: ___get_errno+195↑j
.text:00404CCE                 cmp     eax, 91h ; '‘'
.text:00404CD3                 mov     edx, 29h ; ')'
.text:00404CD8                 jz      loc_404B70
.text:00404CDE                 cmp     eax, 9Eh ; 'ž'
.text:00404CE3
.text:00404CE3 loc_404CE3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00404CE3                 jnz     loc_404B73
.text:00404CE9                 jmp     loc_404B92
.text:00404CE9 ; ---------------------------------------------------------------------------
.text:00404CEE                 align 10h
.text:00404CF0
.text:00404CF0 loc_404CF0:                             ; CODE XREF: ___get_errno+110↑j
.text:00404CF0                 cmp     eax, 0CEh ; 'Î'
.text:00404CF5                 jz      loc_404B60
.text:00404CFB                 cmp     eax, 0CEh ; 'Î'
.text:00404D00                 jg      short loc_404D50
.text:00404D02                 cmp     eax, 0AAh ; 'ª'
.text:00404D07                 jz      loc_404BEA
.text:00404D0D                 cmp     eax, 0AAh ; 'ª'
.text:00404D12                 jg      short loc_404D26
.text:00404D14                 cmp     eax, 0A4h ; '¤'
.text:00404D19                 jz      loc_404C7D
.text:00404D1F                 cmp     eax, 0A7h ; '§'
.text:00404D24                 jmp     short loc_404CE3
.text:00404D26 ; ---------------------------------------------------------------------------
.text:00404D26
.text:00404D26 loc_404D26:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00404D26                 cmp     eax, 0B7h ; '·'
.text:00404D2B                 jz      loc_404C23
.text:00404D31                 cmp     eax, 0B7h ; '·'
.text:00404D36                 jl      loc_404B73
.text:00404D3C                 sub     eax, 0BCh ; '¼'
.text:00404D41                 cmp     eax, 0Eh
.text:00404D44                 ja      loc_404B73
.text:00404D4A                 jmp     loc_404BB9
.text:00404D4A ; ---------------------------------------------------------------------------
.text:00404D4F                 align 10h
.text:00404D50
.text:00404D50 loc_404D50:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00404D50                 cmp     eax, 46Bh
.text:00404D55                 mov     edx, 24h ; '$'
.text:00404D5A                 jz      loc_404B70
.text:00404D60                 cmp     eax, 46Bh
.text:00404D65                 jg      short loc_404D81
.text:00404D67                 cmp     eax, 0D7h ; '×'
.text:00404D6C                 jz      loc_404C7D
.text:00404D72                 mov     edx, 5
.text:00404D77                 cmp     eax, 45Dh
.text:00404D7C                 jmp     loc_404BE1
.text:00404D81 ; ---------------------------------------------------------------------------
.text:00404D81
.text:00404D81 loc_404D81:                             ; CODE XREF: ___get_errno+235↑j
.text:00404D81                 cmp     eax, 4D5h
.text:00404D86                 mov     edx, 4
.text:00404D8B                 jz      loc_404B70
.text:00404D91                 cmp     eax, 4D5h
.text:00404D96                 jg      short loc_404DA7
.text:00404D98                 mov     edx, 13h
.text:00404D9D                 cmp     eax, 4B0h
.text:00404DA2                 jmp     loc_404BE1
.text:00404DA7 ; ---------------------------------------------------------------------------
.text:00404DA7
.text:00404DA7 loc_404DA7:                             ; CODE XREF: ___get_errno+266↑j
.text:00404DA7                 cmp     eax, 718h
.text:00404DAC                 jnz     loc_404B73
.text:00404DB2                 jmp     loc_404B99
.text:00404DB2 ___get_errno    endp
.text:00404DB2
.text:00404DB2 ; ---------------------------------------------------------------------------
.text:00404DB7                 align 10h
.text:00404DC0
.text:00404DC0 ; =============== S U B R O U T I N E =======================================
.text:00404DC0
.text:00404DC0
.text:00404DC0 sub_404DC0      proc near               ; CODE XREF: sub_404A80:loc_404A98↑p
.text:00404DC0
.text:00404DC0 var_C           = dword ptr -0Ch
.text:00404DC0
.text:00404DC0                 sub     esp, 0Ch
.text:00404DC3                 call    GetLastError
.text:00404DC8                 mov     [esp+0Ch+var_C], eax
.text:00404DCB                 call    ___get_errno
.text:00404DD0                 add     esp, 0Ch
.text:00404DD3                 retn
.text:00404DD3 sub_404DC0      endp
.text:00404DD3
.text:00404DD3 ; ---------------------------------------------------------------------------
.text:00404DD4                 align 10h
.text:00404DE0
.text:00404DE0 ; =============== S U B R O U T I N E =======================================
.text:00404DE0
.text:00404DE0
.text:00404DE0 ; int __cdecl sub_404DE0(DWORD)
.text:00404DE0 sub_404DE0      proc near               ; CODE XREF: sub_404AD0+F↑p
.text:00404DE0
.text:00404DE0 dwFlags         = dword ptr -2Ch
.text:00404DE0 lpSource        = dword ptr -28h
.text:00404DE0 dwMessageId     = dword ptr -24h
.text:00404DE0 dwLanguageId    = dword ptr -20h
.text:00404DE0 lpBuffer        = dword ptr -1Ch
.text:00404DE0 nSize           = dword ptr -18h
.text:00404DE0 Arguments       = dword ptr -14h
.text:00404DE0 Buffer          = byte ptr -4
.text:00404DE0 arg_0           = dword ptr  4
.text:00404DE0
.text:00404DE0                 sub     esp, 2Ch
.text:00404DE3                 lea     edx, [esp+2Ch+Buffer]
.text:00404DE7                 mov     [esp+2Ch+lpBuffer], edx ; lpBuffer
.text:00404DEB                 mov     edx, [esp+2Ch+arg_0]
.text:00404DEF                 mov     [esp+2Ch+Arguments], 0 ; Arguments
.text:00404DF7                 mov     [esp+2Ch+nSize], 0 ; nSize
.text:00404DFF                 mov     [esp+2Ch+dwLanguageId], 400h ; dwLanguageId
.text:00404E07                 mov     [esp+2Ch+dwMessageId], edx ; dwMessageId
.text:00404E0B                 mov     [esp+2Ch+lpSource], 0 ; lpSource
.text:00404E13                 mov     [esp+2Ch+dwFlags], 13FFh ; dwFlags
.text:00404E1A                 call    FormatMessageA
.text:00404E1F                 sub     esp, 1Ch
.text:00404E22                 mov     eax, dword ptr [esp+2Ch+Buffer]
.text:00404E26                 add     esp, 2Ch
.text:00404E29                 retn
.text:00404E29 sub_404DE0      endp
.text:00404E29
.text:00404E29 ; ---------------------------------------------------------------------------
.text:00404E2A aSWindowsErrorL db '%s: Windows error %ld: %s',0Ah,0
.text:00404E2A                                         ; DATA XREF: .text:00404EA6↓o
.text:00404E2A                                         ; .text:00404F39↓o ...
.text:00404E45                 align 10h
.text:00404E50                 sub     esp, 2Ch
.text:00404E53                 lea     ecx, [esp+20h]
.text:00404E57                 mov     [esp+28h], esi
.text:00404E5B                 mov     esi, [esp+34h]
.text:00404E5F                 mov     [esp+10h], ecx
.text:00404E63                 mov     [esp+24h], ebx
.text:00404E67                 mov     [esp+8], esi
.text:00404E6B                 mov     dword ptr [esp+18h], 0
.text:00404E73                 mov     dword ptr [esp+14h], 0
.text:00404E7B                 mov     dword ptr [esp+0Ch], 400h
.text:00404E83                 mov     dword ptr [esp+4], 0
.text:00404E8B                 mov     dword ptr [esp], 13FFh
.text:00404E92                 call    FormatMessageA
.text:00404E97                 sub     esp, 1Ch
.text:00404E9A                 mov     edx, [esp+30h]
.text:00404E9E                 mov     [esp+0Ch], esi
.text:00404EA2                 mov     ebx, [esp+20h]
.text:00404EA6                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:00404EAE                 mov     [esp+8], edx
.text:00404EB2                 mov     edx, ds:_iob
.text:00404EB8                 mov     [esp+10h], ebx
.text:00404EBC                 add     edx, 40h ; '@'
.text:00404EBF                 mov     [esp], edx
.text:00404EC2                 call    fprintf
.text:00404EC7                 mov     [esp], ebx
.text:00404ECA                 call    LocalFree
.text:00404ECF                 sub     esp, 4
.text:00404ED2                 mov     ebx, [esp+24h]
.text:00404ED6                 mov     esi, [esp+28h]
.text:00404EDA                 add     esp, 2Ch
.text:00404EDD                 retn
.text:00404EDD ; ---------------------------------------------------------------------------
.text:00404EDE                 align 10h
.text:00404EE0                 sub     esp, 2Ch
.text:00404EE3                 mov     [esp+24h], ebx
.text:00404EE7                 mov     [esp+28h], esi
.text:00404EEB                 call    GetLastError
.text:00404EF0                 mov     [esp+8], eax
.text:00404EF4                 lea     ecx, [esp+20h]
.text:00404EF8                 mov     esi, eax
.text:00404EFA                 mov     [esp+10h], ecx
.text:00404EFE                 mov     dword ptr [esp+18h], 0
.text:00404F06                 mov     dword ptr [esp+14h], 0
.text:00404F0E                 mov     dword ptr [esp+0Ch], 400h
.text:00404F16                 mov     dword ptr [esp+4], 0
.text:00404F1E                 mov     dword ptr [esp], 13FFh
.text:00404F25                 call    FormatMessageA
.text:00404F2A                 sub     esp, 1Ch
.text:00404F2D                 mov     edx, [esp+30h]
.text:00404F31                 mov     [esp+0Ch], esi
.text:00404F35                 mov     ebx, [esp+20h]
.text:00404F39                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:00404F41                 mov     [esp+8], edx
.text:00404F45                 mov     edx, ds:_iob
.text:00404F4B                 mov     [esp+10h], ebx
.text:00404F4F                 add     edx, 40h ; '@'
.text:00404F52                 mov     [esp], edx
.text:00404F55                 call    fprintf
.text:00404F5A                 mov     [esp], ebx
.text:00404F5D                 call    LocalFree
.text:00404F62                 sub     esp, 4
.text:00404F65                 mov     ebx, [esp+24h]
.text:00404F69                 mov     esi, [esp+28h]
.text:00404F6D                 add     esp, 2Ch
.text:00404F70                 retn
.text:00404F70 ; ---------------------------------------------------------------------------
.text:00404F71 aNtdllDll       db 'ntdll.dll',0        ; DATA XREF: .text:00404FA3↓o
.text:00404F71                                         ; .text:00404FFB↓o
.text:00404F7B aRtlntstatustod db 'RtlNtStatusToDosError',0
.text:00404F7B                                         ; DATA XREF: .text:00404FB2↓o
.text:00404F7B                                         ; .text:0040500A↓o
.text:00404F91 ; ---------------------------------------------------------------------------
.text:00404F91                 jmp     short loc_404FA0
.text:00404F91 ; ---------------------------------------------------------------------------
.text:00404F93                 align 10h
.text:00404FA0
.text:00404FA0 loc_404FA0:                             ; CODE XREF: .text:00404F91↑j
.text:00404FA0                 sub     esp, 0Ch
.text:00404FA3                 mov     dword ptr [esp], offset aNtdllDll ; "ntdll.dll"
.text:00404FAA                 call    GetModuleHandleA
.text:00404FAF                 sub     esp, 4
.text:00404FB2                 mov     dword ptr [esp+4], offset aRtlntstatustod ; "RtlNtStatusToDosError"
.text:00404FBA                 mov     [esp], eax
.text:00404FBD                 call    GetProcAddress
.text:00404FC2                 sub     esp, 8
.text:00404FC5                 test    eax, eax
.text:00404FC7                 jz      short loc_404FE0
.text:00404FC9                 mov     ecx, [esp+10h]
.text:00404FCD                 mov     [esp], ecx
.text:00404FD0                 call    eax
.text:00404FD2                 sub     esp, 4
.text:00404FD5                 mov     [esp], eax
.text:00404FD8                 call    SetLastError
.text:00404FDD                 sub     esp, 4
.text:00404FE0
.text:00404FE0 loc_404FE0:                             ; CODE XREF: .text:00404FC7↑j
.text:00404FE0                 add     esp, 0Ch
.text:00404FE3                 retn
.text:00404FE3 ; ---------------------------------------------------------------------------
.text:00404FE4                 align 10h
.text:00404FF0                 sub     esp, 2Ch
.text:00404FF3                 mov     [esp+24h], ebx
.text:00404FF7                 mov     [esp+28h], esi
.text:00404FFB                 mov     dword ptr [esp], offset aNtdllDll ; "ntdll.dll"
.text:00405002                 call    GetModuleHandleA
.text:00405007                 sub     esp, 4
.text:0040500A                 mov     dword ptr [esp+4], offset aRtlntstatustod ; "RtlNtStatusToDosError"
.text:00405012                 mov     [esp], eax
.text:00405015                 call    GetProcAddress
.text:0040501A                 sub     esp, 8
.text:0040501D                 test    eax, eax
.text:0040501F                 jz      loc_4050A6
.text:00405025                 mov     ebx, [esp+34h]
.text:00405029                 mov     [esp], ebx
.text:0040502C                 call    eax
.text:0040502E                 sub     esp, 4
.text:00405031                 mov     esi, eax
.text:00405033                 lea     ecx, [esp+20h]
.text:00405037                 mov     [esp+10h], ecx
.text:0040503B                 mov     dword ptr [esp+18h], 0
.text:00405043                 mov     dword ptr [esp+14h], 0
.text:0040504B                 mov     dword ptr [esp+0Ch], 400h
.text:00405053                 mov     [esp+8], eax
.text:00405057                 mov     dword ptr [esp+4], 0
.text:0040505F                 mov     dword ptr [esp], 13FFh
.text:00405066                 call    FormatMessageA
.text:0040506B                 sub     esp, 1Ch
.text:0040506E                 mov     edx, [esp+30h]
.text:00405072                 mov     [esp+0Ch], esi
.text:00405076                 mov     ebx, [esp+20h]
.text:0040507A                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:00405082                 mov     [esp+8], edx
.text:00405086                 mov     edx, ds:_iob
.text:0040508C                 mov     [esp+10h], ebx
.text:00405090                 add     edx, 40h ; '@'
.text:00405093                 mov     [esp], edx
.text:00405096                 call    fprintf
.text:0040509B                 mov     [esp], ebx
.text:0040509E                 call    LocalFree
.text:004050A3                 sub     esp, 4
.text:004050A6
.text:004050A6 loc_4050A6:                             ; CODE XREF: .text:0040501F↑j
.text:004050A6                 mov     ebx, [esp+24h]
.text:004050AA                 mov     esi, [esp+28h]
.text:004050AE                 add     esp, 2Ch
.text:004050B1                 retn
.text:004050B1 ; ---------------------------------------------------------------------------
.text:004050B2                 align 10h
.text:004050C0
.text:004050C0 ; =============== S U B R O U T I N E =======================================
.text:004050C0
.text:004050C0 ; Attributes: thunk
.text:004050C0
.text:004050C0 ; int __stdcall gethostname(char *name, int namelen)
.text:004050C0 gethostname     proc near               ; CODE XREF: sub_404970+29↑p
.text:004050C0
.text:004050C0 name            = dword ptr  4
.text:004050C0 namelen         = dword ptr  8
.text:004050C0
.text:004050C0                 jmp     ds:__imp_gethostname
.text:004050C0 gethostname     endp
.text:004050C0
.text:004050C0 ; ---------------------------------------------------------------------------
.text:004050C6                 align 10h
.text:004050D0
.text:004050D0 ; =============== S U B R O U T I N E =======================================
.text:004050D0
.text:004050D0 ; Attributes: thunk
.text:004050D0
.text:004050D0 ; struct hostent *__stdcall gethostbyname(const char *name)
.text:004050D0 gethostbyname   proc near               ; CODE XREF: sub_404970+4A↑p
.text:004050D0
.text:004050D0 name            = dword ptr  4
.text:004050D0
.text:004050D0                 jmp     ds:__imp_gethostbyname
.text:004050D0 gethostbyname   endp
.text:004050D0
.text:004050D0 ; ---------------------------------------------------------------------------
.text:004050D6                 align 10h
.text:004050E0
.text:004050E0 ; =============== S U B R O U T I N E =======================================
.text:004050E0
.text:004050E0 ; Attributes: thunk
.text:004050E0
.text:004050E0 ; char *__stdcall inet_ntoa(struct in_addr in)
.text:004050E0 inet_ntoa       proc near               ; CODE XREF: sub_404970+60↑p
.text:004050E0
.text:004050E0 in              = in_addr ptr  4
.text:004050E0
.text:004050E0                 jmp     ds:__imp_inet_ntoa
.text:004050E0 inet_ntoa       endp
.text:004050E0
.text:004050E0 ; ---------------------------------------------------------------------------
.text:004050E6                 align 10h
.text:004050F0
.text:004050F0 ; =============== S U B R O U T I N E =======================================
.text:004050F0
.text:004050F0 ; Attributes: thunk
.text:004050F0
.text:004050F0 ; unsigned int __stdcall inet_addr(const char *cp)
.text:004050F0 inet_addr       proc near               ; CODE XREF: sub_404970+6B↑p
.text:004050F0
.text:004050F0 cp              = dword ptr  4
.text:004050F0
.text:004050F0                 jmp     ds:__imp_inet_addr
.text:004050F0 inet_addr       endp
.text:004050F0
.text:004050F0 ; ---------------------------------------------------------------------------
.text:004050F6                 align 10h
.text:00405100
.text:00405100 ; =============== S U B R O U T I N E =======================================
.text:00405100
.text:00405100 ; Attributes: thunk
.text:00405100
.text:00405100 ; int __stdcall WSAStartup(WORD wVersionRequested, LPWSADATA lpWSAData)
.text:00405100 WSAStartup      proc near               ; CODE XREF: sub_404A00+35↑p
.text:00405100
.text:00405100 wVersionRequested= word ptr  4
.text:00405100 lpWSAData       = dword ptr  8
.text:00405100
.text:00405100                 jmp     ds:__imp_WSAStartup
.text:00405100 WSAStartup      endp
.text:00405100
.text:00405100 ; ---------------------------------------------------------------------------
.text:00405106                 align 10h
.text:00405110
.text:00405110 ; =============== S U B R O U T I N E =======================================
.text:00405110
.text:00405110 ; Attributes: thunk
.text:00405110
.text:00405110 ; int __stdcall WSACleanup()
.text:00405110 WSACleanup      proc near               ; CODE XREF: sub_404A80+7↑p
.text:00405110                 jmp     ds:__imp_WSACleanup
.text:00405110 WSACleanup      endp
.text:00405110
.text:00405110 ; ---------------------------------------------------------------------------
.text:00405116                 align 10h
.text:00405120
.text:00405120 ; =============== S U B R O U T I N E =======================================
.text:00405120
.text:00405120 ; Attributes: thunk
.text:00405120
.text:00405120 ; int __stdcall WSAGetLastError()
.text:00405120 WSAGetLastError proc near               ; CODE XREF: sub_404AD0+7↑p
.text:00405120                                         ; sub_404AD0+16↑p
.text:00405120                 jmp     ds:__imp_WSAGetLastError
.text:00405120 WSAGetLastError endp
.text:00405120
.text:00405120 ; ---------------------------------------------------------------------------
.text:00405126                 align 10h
.text:00405130
.text:00405130 ; =============== S U B R O U T I N E =======================================
.text:00405130
.text:00405130 ; Attributes: thunk
.text:00405130
.text:00405130 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00405130 mbrtowc         proc near               ; CODE XREF: sub_402B40+757↑p
.text:00405130
.text:00405130 DstCh           = dword ptr  4
.text:00405130 SrcCh           = dword ptr  8
.text:00405130 SizeInBytes     = dword ptr  0Ch
.text:00405130 State           = dword ptr  10h
.text:00405130
.text:00405130                 jmp     ds:__imp_mbrtowc
.text:00405130 mbrtowc         endp
.text:00405130
.text:00405130 ; ---------------------------------------------------------------------------
.text:00405136                 align 10h
.text:00405140
.text:00405140 ; =============== S U B R O U T I N E =======================================
.text:00405140
.text:00405140 ; Attributes: bp-based frame
.text:00405140
.text:00405140 sub_405140      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00405140                 push    ebp
.text:00405141                 mov     ecx, offset dword_407000
.text:00405146                 cmp     ecx, offset dword_407000
.text:0040514C                 mov     ebp, esp
.text:0040514E                 jnb     short loc_405166
.text:00405150
.text:00405150 loc_405150:                             ; CODE XREF: sub_405140+24↓j
.text:00405150                 mov     edx, [ecx+4]
.text:00405153                 mov     eax, [ecx]
.text:00405155                 add     ecx, 8
.text:00405158                 add     [edx+400000h], eax
.text:0040515E                 cmp     ecx, offset dword_407000
.text:00405164                 jb      short loc_405150
.text:00405166
.text:00405166 loc_405166:                             ; CODE XREF: sub_405140+E↑j
.text:00405166                 pop     ebp
.text:00405167                 retn
.text:00405167 sub_405140      endp
.text:00405167
.text:00405167 ; ---------------------------------------------------------------------------
.text:00405168                 align 10h
.text:00405170
.text:00405170 ; =============== S U B R O U T I N E =======================================
.text:00405170
.text:00405170 ; Attributes: bp-based frame
.text:00405170
.text:00405170 sub_405170      proc near               ; CODE XREF: sub_401080+16↑p
.text:00405170                                         ; TopLevelExceptionFilter+D7↑p
.text:00405170                 push    ebp
.text:00405171                 mov     ebp, esp
.text:00405173                 fninit
.text:00405175                 pop     ebp
.text:00405176                 retn
.text:00405176 sub_405170      endp
.text:00405176
.text:00405176 ; ---------------------------------------------------------------------------
.text:00405177                 align 10h
.text:00405180
.text:00405180 ; =============== S U B R O U T I N E =======================================
.text:00405180
.text:00405180 ; Attributes: bp-based frame
.text:00405180
.text:00405180 ; void __cdecl sub_405180()
.text:00405180 sub_405180      proc near               ; DATA XREF: .text:loc_4051C9↓o
.text:00405180                                         ; sub_405210:loc_40523E↓o
.text:00405180                 push    ebp
.text:00405181                 mov     ebp, esp
.text:00405183                 sub     esp, 8
.text:00405186                 mov     eax, off_406084
.text:0040518B                 mov     edx, [eax]
.text:0040518D                 test    edx, edx
.text:0040518F                 jnz     short loc_405195
.text:00405191
.text:00405191 loc_405191:                             ; CODE XREF: sub_405180+2C↓j
.text:00405191                 mov     esp, ebp
.text:00405193                 pop     ebp
.text:00405194                 retn
.text:00405195 ; ---------------------------------------------------------------------------
.text:00405195
.text:00405195 loc_405195:                             ; CODE XREF: sub_405180+F↑j
.text:00405195                                         ; sub_405180+2A↓j
.text:00405195                 call    dword ptr [eax]
.text:00405197                 mov     edx, off_406084
.text:0040519D                 mov     ecx, [edx+4]
.text:004051A0                 lea     eax, [edx+4]
.text:004051A3                 mov     off_406084, eax
.text:004051A8                 test    ecx, ecx
.text:004051AA                 jnz     short loc_405195
.text:004051AC                 jmp     short loc_405191
.text:004051AC sub_405180      endp
.text:004051AC
.text:004051AC ; ---------------------------------------------------------------------------
.text:004051AE                 align 10h
.text:004051B0                 push    ebp
.text:004051B1                 mov     ebp, esp
.text:004051B3                 sub     esp, 8
.text:004051B6                 mov     [ebp-4], ebx
.text:004051B9                 mov     eax, ds:dword_405530
.text:004051BE                 cmp     eax, 0FFFFFFFFh
.text:004051C1                 jz      short loc_4051EC
.text:004051C3
.text:004051C3 loc_4051C3:                             ; CODE XREF: .text:004051F6↓j
.text:004051C3                                         ; .text:00405209↓j
.text:004051C3                 test    eax, eax
.text:004051C5                 mov     ebx, eax
.text:004051C7                 jnz     short loc_4051E0
.text:004051C9
.text:004051C9 loc_4051C9:                             ; CODE XREF: .text:004051EA↓j
.text:004051C9                 mov     dword ptr [esp], offset sub_405180
.text:004051D0                 call    sub_401040
.text:004051D5                 mov     ebx, [ebp-4]
.text:004051D8                 mov     esp, ebp
.text:004051DA                 pop     ebp
.text:004051DB                 retn
.text:004051DB ; ---------------------------------------------------------------------------
.text:004051DC                 align 10h
.text:004051E0
.text:004051E0 loc_4051E0:                             ; CODE XREF: .text:004051C7↑j
.text:004051E0                                         ; .text:004051E8↓j
.text:004051E0                 call    ds:dword_405530[ebx*4]
.text:004051E7                 dec     ebx
.text:004051E8                 jnz     short loc_4051E0
.text:004051EA                 jmp     short loc_4051C9
.text:004051EC ; ---------------------------------------------------------------------------
.text:004051EC
.text:004051EC loc_4051EC:                             ; CODE XREF: .text:004051C1↑j
.text:004051EC                 mov     ecx, ds:dword_405534
.text:004051F2                 xor     eax, eax
.text:004051F4                 test    ecx, ecx
.text:004051F6                 jz      short loc_4051C3
.text:004051F8                 mov     edx, offset dword_405530
.text:004051FD                 lea     esi, [esi+0]
.text:00405200
.text:00405200 loc_405200:                             ; CODE XREF: .text:00405207↓j
.text:00405200                 inc     eax
.text:00405201                 mov     ecx, [edx+eax*4+4]
.text:00405205                 test    ecx, ecx
.text:00405207                 jnz     short loc_405200
.text:00405209                 jmp     short loc_4051C3
.text:00405209 ; ---------------------------------------------------------------------------
.text:0040520B                 align 10h
.text:00405210
.text:00405210 ; =============== S U B R O U T I N E =======================================
.text:00405210
.text:00405210 ; Attributes: bp-based frame
.text:00405210
.text:00405210 sub_405210      proc near               ; CODE XREF: sub_401350+18↑p
.text:00405210
.text:00405210 var_8           = dword ptr -8
.text:00405210 var_4           = dword ptr -4
.text:00405210
.text:00405210                 push    ebp
.text:00405211                 mov     ebp, esp
.text:00405213                 sub     esp, 8
.text:00405216                 mov     [ebp+var_4], ebx
.text:00405219                 mov     edx, dword_406080
.text:0040521F                 test    edx, edx
.text:00405221                 jnz     short loc_40524A
.text:00405223                 mov     eax, ds:dword_405530
.text:00405228                 mov     edx, 1
.text:0040522D                 mov     dword_406080, edx
.text:00405233                 cmp     eax, 0FFFFFFFFh
.text:00405236                 jz      short loc_40525D
.text:00405238
.text:00405238 loc_405238:                             ; CODE XREF: sub_405210+57↓j
.text:00405238                                         ; sub_405210+69↓j
.text:00405238                 test    eax, eax
.text:0040523A                 mov     ebx, eax
.text:0040523C                 jnz     short loc_405251
.text:0040523E
.text:0040523E loc_40523E:                             ; CODE XREF: sub_405210+4B↓j
.text:0040523E                 mov     [esp+8+var_8], offset sub_405180 ; void (__cdecl *)()
.text:00405245                 call    sub_401040
.text:0040524A
.text:0040524A loc_40524A:                             ; CODE XREF: sub_405210+11↑j
.text:0040524A                 mov     ebx, [ebp+var_4]
.text:0040524D                 mov     esp, ebp
.text:0040524F                 pop     ebp
.text:00405250                 retn
.text:00405251 ; ---------------------------------------------------------------------------
.text:00405251
.text:00405251 loc_405251:                             ; CODE XREF: sub_405210+2C↑j
.text:00405251                                         ; sub_405210+49↓j
.text:00405251                 call    ds:dword_405530[ebx*4]
.text:00405258                 dec     ebx
.text:00405259                 jnz     short loc_405251
.text:0040525B                 jmp     short loc_40523E
.text:0040525D ; ---------------------------------------------------------------------------
.text:0040525D
.text:0040525D loc_40525D:                             ; CODE XREF: sub_405210+26↑j
.text:0040525D                 mov     ecx, ds:dword_405534
.text:00405263                 xor     eax, eax
.text:00405265                 test    ecx, ecx
.text:00405267                 jz      short loc_405238
.text:00405269                 mov     edx, offset dword_405530
.text:0040526E                 mov     esi, esi
.text:00405270
.text:00405270 loc_405270:                             ; CODE XREF: sub_405210+67↓j
.text:00405270                 inc     eax
.text:00405271                 mov     ebx, [edx+eax*4+4]
.text:00405275                 test    ebx, ebx
.text:00405277                 jnz     short loc_405270
.text:00405279                 jmp     short loc_405238
.text:00405279 sub_405210      endp
.text:00405279
.text:00405279 ; ---------------------------------------------------------------------------
.text:0040527B                 align 10h
.text:00405280
.text:00405280 ; =============== S U B R O U T I N E =======================================
.text:00405280
.text:00405280 ; Attributes: info_from_lumina
.text:00405280
.text:00405280 ; void *__cdecl _alloca(size_t Size)
.text:00405280 __alloca        proc near               ; CODE XREF: sub_401350+13↑p
.text:00405280                 push    ecx
.text:00405281                 mov     ecx, esp
.text:00405283                 add     ecx, 8
.text:00405286
.text:00405286 loc_405286:                             ; CODE XREF: __alloca+1B↓j
.text:00405286                 cmp     eax, 1000h
.text:0040528B                 jb      short loc_40529D
.text:0040528D                 sub     ecx, 1000h
.text:00405293                 or      dword ptr [ecx], 0
.text:00405296                 sub     eax, 1000h
.text:0040529B                 jmp     short loc_405286
.text:0040529D ; ---------------------------------------------------------------------------
.text:0040529D
.text:0040529D loc_40529D:                             ; CODE XREF: __alloca+B↑j
.text:0040529D                 sub     ecx, eax
.text:0040529F                 or      dword ptr [ecx], 0
.text:004052A2                 mov     eax, esp
.text:004052A4                 mov     esp, ecx
.text:004052A6                 mov     ecx, [eax]
.text:004052A8                 mov     eax, [eax+4]
.text:004052AB                 jmp     eax
.text:004052AB __alloca        endp
.text:004052AB
.text:004052AB ; ---------------------------------------------------------------------------
.text:004052AD                 align 10h
.text:004052B0                 jmp     ds:__set_app_type
.text:004052B0 ; ---------------------------------------------------------------------------
.text:004052B6                 align 10h
.text:004052C0
.text:004052C0 ; =============== S U B R O U T I N E =======================================
.text:004052C0
.text:004052C0 ; Attributes: thunk
.text:004052C0
.text:004052C0 ; void __cdecl cexit()
.text:004052C0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:004052C0                 jmp     ds:__imp__cexit
.text:004052C0 _cexit          endp
.text:004052C0
.text:004052C0 ; ---------------------------------------------------------------------------
.text:004052C6                 align 10h
.text:004052D0
.text:004052D0 ; =============== S U B R O U T I N E =======================================
.text:004052D0
.text:004052D0 ; Attributes: thunk
.text:004052D0
.text:004052D0 ; char ***__cdecl _p__environ()
.text:004052D0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004052D0                 jmp     ds:__imp___p__environ
.text:004052D0 __p__environ    endp
.text:004052D0
.text:004052D0 ; ---------------------------------------------------------------------------
.text:004052D6                 align 10h
.text:004052E0
.text:004052E0 ; =============== S U B R O U T I N E =======================================
.text:004052E0
.text:004052E0 ; Attributes: thunk
.text:004052E0
.text:004052E0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004052E0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004052E0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004052E0
.text:004052E0 Signal          = dword ptr  4
.text:004052E0 Function        = dword ptr  8
.text:004052E0
.text:004052E0                 jmp     ds:__imp_signal
.text:004052E0 signal          endp
.text:004052E0
.text:004052E0 ; ---------------------------------------------------------------------------
.text:004052E6                 align 10h
.text:004052F0
.text:004052F0 ; =============== S U B R O U T I N E =======================================
.text:004052F0
.text:004052F0 ; Attributes: thunk
.text:004052F0
.text:004052F0 ; int *__cdecl _p__fmode()
.text:004052F0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004052F0                 jmp     ds:__imp___p__fmode
.text:004052F0 __p__fmode      endp
.text:004052F0
.text:004052F0 ; ---------------------------------------------------------------------------
.text:004052F6                 align 10h
.text:00405300
.text:00405300 ; =============== S U B R O U T I N E =======================================
.text:00405300
.text:00405300 ; Attributes: thunk
.text:00405300
.text:00405300 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405300 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405300                                         ; sub_401080+90↑p ...
.text:00405300
.text:00405300 FileHandle      = dword ptr  4
.text:00405300 Mode            = dword ptr  8
.text:00405300
.text:00405300                 jmp     ds:__imp__setmode
.text:00405300 _setmode        endp
.text:00405300
.text:00405300 ; ---------------------------------------------------------------------------
.text:00405306                 align 10h
.text:00405310
.text:00405310 ; =============== S U B R O U T I N E =======================================
.text:00405310
.text:00405310 ; Attributes: thunk
.text:00405310
.text:00405310 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00405310                 jmp     ds:__imp___getmainargs
.text:00405310 __getmainargs   endp
.text:00405310
.text:00405310 ; ---------------------------------------------------------------------------
.text:00405316                 align 10h
.text:00405320
.text:00405320 ; =============== S U B R O U T I N E =======================================
.text:00405320
.text:00405320 ; Attributes: thunk
.text:00405320
.text:00405320 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00405320 setlocale       proc near               ; CODE XREF: sub_401350+34↑p
.text:00405320
.text:00405320 Category        = dword ptr  4
.text:00405320 Locale          = dword ptr  8
.text:00405320
.text:00405320                 jmp     ds:__imp_setlocale
.text:00405320 setlocale       endp
.text:00405320
.text:00405320 ; ---------------------------------------------------------------------------
.text:00405326                 align 10h
.text:00405330
.text:00405330 ; =============== S U B R O U T I N E =======================================
.text:00405330
.text:00405330 ; Attributes: noreturn thunk
.text:00405330
.text:00405330 ; void __cdecl __noreturn exit(int Code)
.text:00405330 exit            proc near               ; CODE XREF: sub_401350:loc_40148C↑p
.text:00405330                                         ; sub_4015F0+3E↑p ...
.text:00405330
.text:00405330 Code            = dword ptr  4
.text:00405330
.text:00405330                 jmp     ds:__imp_exit
.text:00405330 exit            endp
.text:00405330
.text:00405330 ; ---------------------------------------------------------------------------
.text:00405336                 align 10h
.text:00405340
.text:00405340 ; =============== S U B R O U T I N E =======================================
.text:00405340
.text:00405340 ; Attributes: thunk
.text:00405340
.text:00405340 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405340 fputs           proc near               ; CODE XREF: sub_4015F0+83↑p
.text:00405340                                         ; sub_4015F0+A5↑p ...
.text:00405340
.text:00405340 Buffer          = dword ptr  4
.text:00405340 Stream          = dword ptr  8
.text:00405340
.text:00405340                 jmp     ds:__imp_fputs
.text:00405340 fputs           endp
.text:00405340
.text:00405340 ; ---------------------------------------------------------------------------
.text:00405346                 align 10h
.text:00405350
.text:00405350 ; =============== S U B R O U T I N E =======================================
.text:00405350
.text:00405350 ; Attributes: thunk
.text:00405350
.text:00405350 ; int printf(const char *const Format, ...)
.text:00405350 printf          proc near               ; CODE XREF: sub_401350+151↑p
.text:00405350                                         ; sub_4015F0+61↑p ...
.text:00405350
.text:00405350 Format          = dword ptr  4
.text:00405350
.text:00405350                 jmp     ds:__imp_printf
.text:00405350 printf          endp
.text:00405350
.text:00405350 ; ---------------------------------------------------------------------------
.text:00405356                 align 10h
.text:00405360
.text:00405360 ; =============== S U B R O U T I N E =======================================
.text:00405360
.text:00405360 ; Attributes: thunk
.text:00405360
.text:00405360 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405360 fprintf         proc near               ; CODE XREF: sub_401350+130↑p
.text:00405360                                         ; sub_4015F0+36↑p ...
.text:00405360
.text:00405360 Stream          = dword ptr  4
.text:00405360 Format          = dword ptr  8
.text:00405360
.text:00405360                 jmp     ds:__imp_fprintf
.text:00405360 fprintf         endp
.text:00405360
.text:00405360 ; ---------------------------------------------------------------------------
.text:00405366                 align 10h
.text:00405370
.text:00405370 ; =============== S U B R O U T I N E =======================================
.text:00405370
.text:00405370 ; Attributes: thunk
.text:00405370
.text:00405370 ; size_t __cdecl strlen(const char *Str)
.text:00405370 strlen          proc near               ; CODE XREF: sub_401910+2A9↑p
.text:00405370                                         ; sub_401910+346↑p ...
.text:00405370
.text:00405370 Str             = dword ptr  4
.text:00405370
.text:00405370                 jmp     ds:__imp_strlen
.text:00405370 strlen          endp
.text:00405370
.text:00405370 ; ---------------------------------------------------------------------------
.text:00405376                 align 10h
.text:00405380
.text:00405380 ; =============== S U B R O U T I N E =======================================
.text:00405380
.text:00405380 ; Attributes: thunk
.text:00405380
.text:00405380 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405380 strncmp         proc near               ; CODE XREF: sub_401910+23F↑p
.text:00405380                                         ; sub_401910+699↑p
.text:00405380
.text:00405380 Str1            = dword ptr  4
.text:00405380 Str2            = dword ptr  8
.text:00405380 MaxCount        = dword ptr  0Ch
.text:00405380
.text:00405380                 jmp     ds:__imp_strncmp
.text:00405380 strncmp         endp
.text:00405380
.text:00405380 ; ---------------------------------------------------------------------------
.text:00405386                 align 10h
.text:00405390
.text:00405390 ; =============== S U B R O U T I N E =======================================
.text:00405390
.text:00405390 ; Attributes: thunk
.text:00405390
.text:00405390 ; char *__cdecl getenv(const char *VarName)
.text:00405390 getenv          proc near               ; CODE XREF: sub_401910+B57↑p
.text:00405390
.text:00405390 VarName         = dword ptr  4
.text:00405390
.text:00405390                 jmp     ds:__imp_getenv
.text:00405390 getenv          endp
.text:00405390
.text:00405390 ; ---------------------------------------------------------------------------
.text:00405396                 align 10h
.text:004053A0
.text:004053A0 ; =============== S U B R O U T I N E =======================================
.text:004053A0
.text:004053A0 ; Attributes: thunk
.text:004053A0
.text:004053A0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004053A0 strchr          proc near               ; CODE XREF: sub_401910+469↑p
.text:004053A0                                         ; sub_401910+53A↑p ...
.text:004053A0
.text:004053A0 Str             = dword ptr  4
.text:004053A0 Val             = dword ptr  8
.text:004053A0
.text:004053A0                 jmp     ds:__imp_strchr
.text:004053A0 strchr          endp
.text:004053A0
.text:004053A0 ; ---------------------------------------------------------------------------
.text:004053A6                 align 10h
.text:004053B0
.text:004053B0 ; =============== S U B R O U T I N E =======================================
.text:004053B0
.text:004053B0 ; Attributes: thunk
.text:004053B0
.text:004053B0 ; int *__cdecl errno()
.text:004053B0 _errno          proc near               ; CODE XREF: sub_4029D0:loc_402A0D↑p
.text:004053B0                                         ; .text:004035AB↑p ...
.text:004053B0                 jmp     ds:__imp__errno
.text:004053B0 _errno          endp
.text:004053B0
.text:004053B0 ; ---------------------------------------------------------------------------
.text:004053B6                 align 10h
.text:004053C0
.text:004053C0 ; =============== S U B R O U T I N E =======================================
.text:004053C0
.text:004053C0 ; Attributes: thunk
.text:004053C0
.text:004053C0 ; int __cdecl fclose(FILE *Stream)
.text:004053C0 fclose          proc near               ; CODE XREF: sub_4029D0+27↑p
.text:004053C0
.text:004053C0 Stream          = dword ptr  4
.text:004053C0
.text:004053C0                 jmp     ds:__imp_fclose
.text:004053C0 fclose          endp
.text:004053C0
.text:004053C0 ; ---------------------------------------------------------------------------
.text:004053C6                 align 10h
.text:004053D0
.text:004053D0 ; =============== S U B R O U T I N E =======================================
.text:004053D0
.text:004053D0 ; Attributes: thunk
.text:004053D0
.text:004053D0 ; void __cdecl free(void *Block)
.text:004053D0 free            proc near               ; CODE XREF: sub_403C80+112↑p
.text:004053D0
.text:004053D0 Block           = dword ptr  4
.text:004053D0
.text:004053D0                 jmp     ds:__imp_free
.text:004053D0 free            endp
.text:004053D0
.text:004053D0 ; ---------------------------------------------------------------------------
.text:004053D6                 align 10h
.text:004053E0
.text:004053E0 ; =============== S U B R O U T I N E =======================================
.text:004053E0
.text:004053E0 ; Attributes: noreturn thunk
.text:004053E0
.text:004053E0 ; void __cdecl __noreturn abort()
.text:004053E0 abort           proc near               ; CODE XREF: sub_403C80:loc_403E3A↑p
.text:004053E0                                         ; sub_404140:loc_4041DC↑p ...
.text:004053E0                 jmp     ds:__imp_abort
.text:004053E0 abort           endp
.text:004053E0
.text:004053E0 ; ---------------------------------------------------------------------------
.text:004053E6                 align 10h
.text:004053F0
.text:004053F0 ; =============== S U B R O U T I N E =======================================
.text:004053F0
.text:004053F0 ; Attributes: thunk
.text:004053F0
.text:004053F0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004053F0 iswctype        proc near               ; CODE XREF: sub_402B40+78B↑p
.text:004053F0
.text:004053F0 C               = word ptr  4
.text:004053F0 Type            = word ptr  8
.text:004053F0
.text:004053F0                 jmp     ds:__imp_iswctype
.text:004053F0 iswctype        endp
.text:004053F0
.text:004053F0 ; ---------------------------------------------------------------------------
.text:004053F6                 align 10h
.text:00405400
.text:00405400 ; =============== S U B R O U T I N E =======================================
.text:00405400
.text:00405400 ; Attributes: thunk
.text:00405400
.text:00405400 ; int __cdecl isctype(int C, int Type)
.text:00405400 _isctype        proc near               ; CODE XREF: sub_402B40+610↑p
.text:00405400
.text:00405400 C               = dword ptr  4
.text:00405400 Type            = dword ptr  8
.text:00405400
.text:00405400                 jmp     ds:__imp__isctype
.text:00405400 _isctype        endp
.text:00405400
.text:00405400 ; ---------------------------------------------------------------------------
.text:00405406                 align 10h
.text:00405410
.text:00405410 ; =============== S U B R O U T I N E =======================================
.text:00405410
.text:00405410 ; Attributes: thunk
.text:00405410
.text:00405410 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00405410 vfprintf        proc near               ; CODE XREF: sub_404140+C1↑p
.text:00405410                                         ; sub_4046D0+49↑p ...
.text:00405410
.text:00405410 Stream          = dword ptr  4
.text:00405410 Format          = dword ptr  8
.text:00405410 ArgList         = dword ptr  0Ch
.text:00405410
.text:00405410                 jmp     ds:__imp_vfprintf
.text:00405410 vfprintf        endp
.text:00405410
.text:00405410 ; ---------------------------------------------------------------------------
.text:00405416                 align 10h
.text:00405420
.text:00405420 ; =============== S U B R O U T I N E =======================================
.text:00405420
.text:00405420 ; Attributes: thunk
.text:00405420
.text:00405420 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405420 _flsbuf         proc near               ; CODE XREF: sub_404140+128↑p
.text:00405420                                         ; sub_404140+13A↑p ...
.text:00405420
.text:00405420 File            = dword ptr  8
.text:00405420
.text:00405420                 jmp     ds:__imp__flsbuf
.text:00405420 _flsbuf         endp
.text:00405420
.text:00405420 ; ---------------------------------------------------------------------------
.text:00405426                 align 10h
.text:00405430
.text:00405430 ; =============== S U B R O U T I N E =======================================
.text:00405430
.text:00405430 ; Attributes: thunk
.text:00405430
.text:00405430 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405430 memcpy          proc near               ; CODE XREF: .text:00404538↑p
.text:00405430                                         ; .text:00404581↑p
.text:00405430
.text:00405430 Src             = dword ptr  8
.text:00405430 Size            = dword ptr  0Ch
.text:00405430
.text:00405430                 jmp     ds:__imp_memcpy
.text:00405430 memcpy          endp
.text:00405430
.text:00405430 ; ---------------------------------------------------------------------------
.text:00405436                 align 10h
.text:00405440
.text:00405440 ; =============== S U B R O U T I N E =======================================
.text:00405440
.text:00405440 ; Attributes: thunk
.text:00405440
.text:00405440 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405440 memset          proc near               ; CODE XREF: .text:004044B6↑p
.text:00405440
.text:00405440 Val             = dword ptr  8
.text:00405440 Size            = dword ptr  0Ch
.text:00405440
.text:00405440                 jmp     ds:__imp_memset
.text:00405440 memset          endp
.text:00405440
.text:00405440 ; ---------------------------------------------------------------------------
.text:00405446                 align 10h
.text:00405450
.text:00405450 ; =============== S U B R O U T I N E =======================================
.text:00405450
.text:00405450 ; Attributes: thunk
.text:00405450
.text:00405450 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405450 calloc          proc near               ; CODE XREF: .text:004044F3↑p
.text:00405450
.text:00405450 Count           = dword ptr  4
.text:00405450 Size            = dword ptr  8
.text:00405450
.text:00405450                 jmp     ds:__imp_calloc
.text:00405450 calloc          endp
.text:00405450
.text:00405450 ; ---------------------------------------------------------------------------
.text:00405456                 align 10h
.text:00405460
.text:00405460 ; =============== S U B R O U T I N E =======================================
.text:00405460
.text:00405460 ; Attributes: thunk
.text:00405460
.text:00405460 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405460 realloc         proc near               ; CODE XREF: .text:004043F0↑p
.text:00405460                                         ; sub_404420+16↑p ...
.text:00405460
.text:00405460 Block           = dword ptr  4
.text:00405460 Size            = dword ptr  8
.text:00405460
.text:00405460                 jmp     ds:__imp_realloc
.text:00405460 realloc         endp
.text:00405460
.text:00405460 ; ---------------------------------------------------------------------------
.text:00405466                 align 10h
.text:00405470
.text:00405470 ; =============== S U B R O U T I N E =======================================
.text:00405470
.text:00405470 ; Attributes: thunk
.text:00405470
.text:00405470 ; void *__cdecl malloc(size_t Size)
.text:00405470 malloc          proc near               ; CODE XREF: .text:00404374↑p
.text:00405470                                         ; sub_404390+E↑p ...
.text:00405470
.text:00405470 Size            = dword ptr  4
.text:00405470
.text:00405470                 jmp     ds:__imp_malloc
.text:00405470 malloc          endp
.text:00405470
.text:00405470 ; ---------------------------------------------------------------------------
.text:00405476                 align 10h
.text:00405480
.text:00405480 ; =============== S U B R O U T I N E =======================================
.text:00405480
.text:00405480 ; Attributes: thunk
.text:00405480
.text:00405480 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405480 strcmp          proc near               ; CODE XREF: sub_4047D4+180↑p
.text:00405480
.text:00405480 Str1            = dword ptr  4
.text:00405480 Str2            = dword ptr  8
.text:00405480
.text:00405480                 jmp     ds:__imp_strcmp
.text:00405480 strcmp          endp
.text:00405480
.text:00405480 ; ---------------------------------------------------------------------------
.text:00405486                 align 10h
.text:00405490
.text:00405490 ; =============== S U B R O U T I N E =======================================
.text:00405490
.text:00405490 ; Attributes: thunk
.text:00405490
.text:00405490 ; int __cdecl fflush(FILE *Stream)
.text:00405490 fflush          proc near               ; CODE XREF: sub_4046D0+19↑p
.text:00405490                                         ; sub_4046D0+81↑p ...
.text:00405490
.text:00405490 Stream          = dword ptr  4
.text:00405490
.text:00405490                 jmp     ds:__imp_fflush
.text:00405490 fflush          endp
.text:00405490
.text:00405490 ; ---------------------------------------------------------------------------
.text:00405496                 align 10h
.text:004054A0
.text:004054A0 ; =============== S U B R O U T I N E =======================================
.text:004054A0
.text:004054A0 ; Attributes: thunk
.text:004054A0
.text:004054A0 ; char *__cdecl strerror(int ErrorMessage)
.text:004054A0 strerror        proc near               ; CODE XREF: sub_4046D0+A5↑p
.text:004054A0                                         ; sub_4047D4+10F↑p
.text:004054A0
.text:004054A0 ErrorMessage    = dword ptr  4
.text:004054A0
.text:004054A0                 jmp     ds:__imp_strerror
.text:004054A0 strerror        endp
.text:004054A0
.text:004054A0 ; ---------------------------------------------------------------------------
.text:004054A6                 align 10h
.text:004054B0
.text:004054B0 ; =============== S U B R O U T I N E =======================================
.text:004054B0
.text:004054B0 ; Attributes: thunk
.text:004054B0
.text:004054B0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004054B0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004054B0
.text:004054B0 lpTopLevelExceptionFilter= dword ptr  4
.text:004054B0
.text:004054B0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004054B0 SetUnhandledExceptionFilter endp
.text:004054B0
.text:004054B0 ; ---------------------------------------------------------------------------
.text:004054B6                 align 10h
.text:004054C0
.text:004054C0 ; =============== S U B R O U T I N E =======================================
.text:004054C0
.text:004054C0 ; Attributes: noreturn thunk
.text:004054C0
.text:004054C0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004054C0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004054C0
.text:004054C0 uExitCode       = dword ptr  4
.text:004054C0
.text:004054C0                 jmp     ds:__imp_ExitProcess
.text:004054C0 ExitProcess     endp
.text:004054C0
.text:004054C0 ; ---------------------------------------------------------------------------
.text:004054C6                 align 10h
.text:004054D0
.text:004054D0 ; =============== S U B R O U T I N E =======================================
.text:004054D0
.text:004054D0 ; Attributes: thunk
.text:004054D0
.text:004054D0 ; HLOCAL __stdcall LocalFree(HLOCAL hMem)
.text:004054D0 LocalFree       proc near               ; CODE XREF: sub_404AD0+47↑p
.text:004054D0                                         ; .text:00404ECA↑p ...
.text:004054D0
.text:004054D0 hMem            = dword ptr  4
.text:004054D0
.text:004054D0                 jmp     ds:__imp_LocalFree
.text:004054D0 LocalFree       endp
.text:004054D0
.text:004054D0 ; ---------------------------------------------------------------------------
.text:004054D6                 align 10h
.text:004054E0
.text:004054E0 ; =============== S U B R O U T I N E =======================================
.text:004054E0
.text:004054E0 ; Attributes: thunk
.text:004054E0
.text:004054E0 ; DWORD __stdcall GetLastError()
.text:004054E0 GetLastError    proc near               ; CODE XREF: sub_404DC0+3↑p
.text:004054E0                                         ; .text:00404EEB↑p
.text:004054E0                 jmp     ds:__imp_GetLastError
.text:004054E0 GetLastError    endp
.text:004054E0
.text:004054E0 ; ---------------------------------------------------------------------------
.text:004054E6                 align 10h
.text:004054F0
.text:004054F0 ; =============== S U B R O U T I N E =======================================
.text:004054F0
.text:004054F0 ; Attributes: thunk
.text:004054F0
.text:004054F0 ; DWORD __stdcall FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
.text:004054F0 FormatMessageA  proc near               ; CODE XREF: sub_404DE0+3A↑p
.text:004054F0                                         ; .text:00404E92↑p ...
.text:004054F0
.text:004054F0 dwFlags         = dword ptr  4
.text:004054F0 lpSource        = dword ptr  8
.text:004054F0 dwMessageId     = dword ptr  0Ch
.text:004054F0 dwLanguageId    = dword ptr  10h
.text:004054F0 lpBuffer        = dword ptr  14h
.text:004054F0 nSize           = dword ptr  18h
.text:004054F0 Arguments       = dword ptr  1Ch
.text:004054F0
.text:004054F0                 jmp     ds:__imp_FormatMessageA
.text:004054F0 FormatMessageA  endp
.text:004054F0
.text:004054F0 ; ---------------------------------------------------------------------------
.text:004054F6                 align 10h
.text:00405500
.text:00405500 ; =============== S U B R O U T I N E =======================================
.text:00405500
.text:00405500 ; Attributes: thunk
.text:00405500
.text:00405500 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00405500 GetModuleHandleA proc near              ; CODE XREF: .text:00404FAA↑p
.text:00405500                                         ; .text:00405002↑p
.text:00405500
.text:00405500 lpModuleName    = dword ptr  4
.text:00405500
.text:00405500                 jmp     ds:__imp_GetModuleHandleA
.text:00405500 GetModuleHandleA endp
.text:00405500
.text:00405500 ; ---------------------------------------------------------------------------
.text:00405506                 align 10h
.text:00405510
.text:00405510 ; =============== S U B R O U T I N E =======================================
.text:00405510
.text:00405510 ; Attributes: thunk
.text:00405510
.text:00405510 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00405510 GetProcAddress  proc near               ; CODE XREF: .text:00404FBD↑p
.text:00405510                                         ; .text:00405015↑p
.text:00405510
.text:00405510 hModule         = dword ptr  4
.text:00405510 lpProcName      = dword ptr  8
.text:00405510
.text:00405510                 jmp     ds:__imp_GetProcAddress
.text:00405510 GetProcAddress  endp
.text:00405510
.text:00405510 ; ---------------------------------------------------------------------------
.text:00405516                 align 10h
.text:00405520
.text:00405520 ; =============== S U B R O U T I N E =======================================
.text:00405520
.text:00405520 ; Attributes: thunk
.text:00405520
.text:00405520 ; void __stdcall SetLastError(DWORD dwErrCode)
.text:00405520 SetLastError    proc near               ; CODE XREF: .text:00404FD8↑p
.text:00405520
.text:00405520 dwErrCode       = dword ptr  4
.text:00405520
.text:00405520                 jmp     ds:__imp_SetLastError
.text:00405520 SetLastError    endp
.text:00405520
.text:00405520 ; ---------------------------------------------------------------------------
.text:00405526                 align 10h
.text:00405530 dword_405530    dd 0FFFFFFFFh           ; DATA XREF: .text:004051B9↑r
.text:00405530                                         ; .text:loc_4051E0↑r ...
.text:00405534 dword_405534    dd 0                    ; DATA XREF: .text:loc_4051EC↑r
.text:00405534                                         ; sub_405210:loc_40525D↑r
.text:00405538                 dd 0FFFFFFFFh
.text:0040553C dword_40553C    dd 31h dup(0)           ; DATA XREF: .data:off_406084↓o
.text:00405600                 dd 280h dup(?)
.text:00405600 _text           ends
.text:00405600
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004A00
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_401350+CA↑r
.data:00406010                                         ; sub_4024A0+3↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_4024A0+11↑r
.data:00406014                                         ; .text:00402541↑r ...
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_4024A0+7D↑w
.data:00406018                                         ; .text:004025AD↑w
.data:0040601C                 align 10h
.data:00406020 dword_406020    dd 1                    ; DATA XREF: sub_403C80+22↑r
.data:00406020                                         ; sub_403C80+65↑r ...
.data:00406024 dword_406024    dd 100h                 ; DATA XREF: sub_403C80+3F↑o
.data:00406024                                         ; sub_403C80+1A2↑r ...
.data:00406028 off_406028      dd offset unk_407040    ; DATA XREF: sub_403C80+1AA↑r
.data:0040602C ; void *off_40602C
.data:0040602C off_40602C      dd offset dword_406024  ; DATA XREF: sub_403C80+39↑r
.data:0040602C                                         ; sub_403C80+60↑w ...
.data:00406030 ; char *Buffer
.data:00406030 Buffer          dd offset aCopyrightC2005
.data:00406030                                         ; DATA XREF: sub_404140+DC↑r
.data:00406030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406034                 align 10h
.data:00406040 ; int Code
.data:00406040 Code            dd 1                    ; DATA XREF: sub_4029D0+6D↑r
.data:00406040                                         ; sub_4029D0+9A↑r ...
.data:00406044                 align 10h
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_405210+9↑r
.data:00406080                                         ; sub_405210+1D↑w
.data:00406084 off_406084      dd offset dword_40553C  ; DATA XREF: sub_405180+6↑r
.data:00406084                                         ; sub_405180+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000240 (    576.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: sub_4024A0+9↑o
.bss:00407000                                         ; sub_4024A0+17↑w ...
.bss:00407004 dword_407004    dd ?                    ; DATA XREF: sub_4024A0+21↑w
.bss:00407004                                         ; .text:00402559↑w
.bss:00407008 dword_407008    dd ?                    ; DATA XREF: sub_4024A0+77↑r
.bss:00407008                                         ; .text:004025A7↑r
.bss:0040700C dword_40700C    dd ?                    ; DATA XREF: sub_4024A0+6B↑r
.bss:0040700C                                         ; .text:0040259B↑r
.bss:00407010                 db    ? ;
.bss:00407011                 db    ? ;
.bss:00407012                 db    ? ;
.bss:00407013                 db    ? ;
.bss:00407014                 db    ? ;
.bss:00407015                 db    ? ;
.bss:00407016                 db    ? ;
.bss:00407017                 db    ? ;
.bss:00407018                 db    ? ;
.bss:00407019                 db    ? ;
.bss:0040701A                 db    ? ;
.bss:0040701B                 db    ? ;
.bss:0040701C                 db    ? ;
.bss:0040701D                 db    ? ;
.bss:0040701E                 db    ? ;
.bss:0040701F                 db    ? ;
.bss:00407020                 db    ? ;
.bss:00407021                 db    ? ;
.bss:00407022                 db    ? ;
.bss:00407023                 db    ? ;
.bss:00407024                 db    ? ;
.bss:00407025                 db    ? ;
.bss:00407026                 db    ? ;
.bss:00407027                 db    ? ;
.bss:00407028                 db    ? ;
.bss:00407029                 db    ? ;
.bss:0040702A                 db    ? ;
.bss:0040702B                 db    ? ;
.bss:0040702C                 db    ? ;
.bss:0040702D                 db    ? ;
.bss:0040702E                 db    ? ;
.bss:0040702F                 db    ? ;
.bss:00407030 ; char *dword_407030
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: .text:004029A4↑w
.bss:00407030                                         ; sub_4029D0+58↑r
.bss:00407034                 align 10h
.bss:00407040 unk_407040      db    ? ;               ; DATA XREF: sub_403C80+100↑o
.bss:00407040                                         ; .data:off_406028↑o
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140 dword_407140    dd ?                    ; DATA XREF: .text:loc_403611↑o
.bss:00407140                                         ; .text:loc_403630↑o ...
.bss:00407144 dword_407144    dd ?                    ; DATA XREF: .text:loc_4036B0↑o
.bss:00407144                                         ; .text:00403B38↑r ...
.bss:00407148 dword_407148    dd ?                    ; DATA XREF: .text:00403B32↑r
.bss:00407148                                         ; sub_403BE0+2C↑r
.bss:0040714C dword_40714C    dd ?                    ; DATA XREF: .text:00403B26↑r
.bss:0040714C                                         ; sub_403BE0+22↑r
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:00403B42↑r
.bss:00407150                                         ; sub_403BE0+36↑r
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:00403B52↑r
.bss:00407154                                         ; sub_403BE0+4E↑r
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:00403B6F↑r
.bss:00407158                                         ; sub_403BE0+62↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00403B65↑r
.bss:0040715C                                         ; sub_403BE0+70↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:00403B48↑r
.bss:00407160                                         ; sub_403BE0+7A↑r
.bss:00407164                 align 10h
.bss:00407170 ; char *Str1
.bss:00407170 Str1            dd ?                    ; DATA XREF: sub_4047D4:loc_40480D↑w
.bss:00407170                                         ; sub_4047D4:loc_404940↑r
.bss:00407174                 align 10h
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: sub_4047D4+2D↑r
.bss:00407180                                         ; sub_4047D4+3F↑w
.bss:00407184                 align 10h
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: sub_404A00+6↑r
.bss:00407190                                         ; sub_404A00+52↑w
.bss:00407194                 align 10h
.bss:004071A0 dword_4071A0    dd ?                    ; DATA XREF: sub_401350+2E↑w
.bss:004071A0                                         ; sub_401350+11C↑r ...
.bss:004071A4                 align 20h
.bss:004071C0 dword_4071C0    dd ?                    ; DATA XREF: sub_4024A0+71↑w
.bss:004071C0                                         ; .text:004025A1↑w
.bss:004071C4                 align 10h
.bss:004071D0 dword_4071D0    dd ?                    ; CODE XREF: sub_4047D4+63↑p
.bss:004071D0                                         ; DATA XREF: sub_4046D0+1E↑r ...
.bss:004071D4                 align 10h
.bss:004071E0 dword_4071E0    dd ?                    ; DATA XREF: sub_4046D0+4E↑w
.bss:004071E0                                         ; sub_4047D4+AB↑w
.bss:004071E4                 db    ? ;
.bss:004071E5                 db    ? ;
.bss:004071E6                 db    ? ;
.bss:004071E7                 db    ? ;
.bss:004071E8                 db    ? ;
.bss:004071E9                 db    ? ;
.bss:004071EA                 db    ? ;
.bss:004071EB                 db    ? ;
.bss:004071EC                 db    ? ;
.bss:004071ED                 db    ? ;
.bss:004071EE                 db    ? ;
.bss:004071EF                 db    ? ;
.bss:004071F0                 db    ? ;
.bss:004071F1                 db    ? ;
.bss:004071F2                 db    ? ;
.bss:004071F3                 db    ? ;
.bss:004071F4                 db    ? ;
.bss:004071F5                 db    ? ;
.bss:004071F6                 db    ? ;
.bss:004071F7                 db    ? ;
.bss:004071F8                 db    ? ;
.bss:004071F9                 db    ? ;
.bss:004071FA                 db    ? ;
.bss:004071FB                 db    ? ;
.bss:004071FC                 db    ? ;
.bss:004071FD                 db    ? ;
.bss:004071FE                 db    ? ;
.bss:004071FF                 db    ? ;
.bss:00407200                 db    ? ;
.bss:00407201                 db    ? ;
.bss:00407202                 db    ? ;
.bss:00407203                 db    ? ;
.bss:00407204                 db    ? ;
.bss:00407205                 db    ? ;
.bss:00407206                 db    ? ;
.bss:00407207                 db    ? ;
.bss:00407208                 db    ? ;
.bss:00407209                 db    ? ;
.bss:0040720A                 db    ? ;
.bss:0040720B                 db    ? ;
.bss:0040720C                 db    ? ;
.bss:0040720D                 db    ? ;
.bss:0040720E                 db    ? ;
.bss:0040720F                 db    ? ;
.bss:00407210 dword_407210    dd ?                    ; DATA XREF: sub_4047D4+13↑r
.bss:00407214                 align 1000h
.bss:00407214 _bss            ends
.bss:00407214
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 000006C4 (   1732.)
.idata:00408000 ; Section size in file          : 00000800 (   2048.)
.idata:00408000 ; Offset to raw data for section: 00004C00
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408184 ;
.idata:00408184 ; Imports from libintl3.dll
.idata:00408184 ;
.idata:00408184                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408184                                         ; CODE XREF: sub_401350+48↑p
.idata:00408184                                         ; DATA XREF: sub_401350+48↑r ...
.idata:00408188                 extrn libintl_gettext:dword
.idata:00408188                                         ; CODE XREF: sub_401350+E7↑p
.idata:00408188                                         ; sub_401350+110↑p ...
.idata:0040818C                 extrn libintl_textdomain:dword
.idata:0040818C                                         ; CODE XREF: sub_401350+55↑p
.idata:0040818C                                         ; DATA XREF: sub_401350+55↑r ...
.idata:00408190
.idata:00408198 ;
.idata:00408198 ; Imports from KERNEL32.dll
.idata:00408198 ;
.idata:00408198 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408198                 extrn __imp_ExitProcess:dword
.idata:00408198                                         ; DATA XREF: ExitProcess↑r
.idata:0040819C ; DWORD (__stdcall *FormatMessageA)(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
.idata:0040819C                 extrn __imp_FormatMessageA:dword
.idata:0040819C                                         ; DATA XREF: FormatMessageA↑r
.idata:004081A0 ; DWORD (__stdcall *GetLastError)()
.idata:004081A0                 extrn __imp_GetLastError:dword
.idata:004081A0                                         ; DATA XREF: GetLastError↑r
.idata:004081A4 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:004081A4                 extrn __imp_GetModuleHandleA:dword
.idata:004081A4                                         ; DATA XREF: GetModuleHandleA↑r
.idata:004081A8 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:004081A8                 extrn __imp_GetProcAddress:dword
.idata:004081A8                                         ; DATA XREF: GetProcAddress↑r
.idata:004081AC ; HLOCAL (__stdcall *LocalFree)(HLOCAL hMem)
.idata:004081AC                 extrn __imp_LocalFree:dword
.idata:004081AC                                         ; DATA XREF: LocalFree↑r
.idata:004081B0 ; void (__stdcall *SetLastError)(DWORD dwErrCode)
.idata:004081B0                 extrn __imp_SetLastError:dword
.idata:004081B0                                         ; DATA XREF: SetLastError↑r
.idata:004081B4 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:004081B4                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:004081B4                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:004081B8
.idata:004081C0 ;
.idata:004081C0 ; Imports from MSVCP60.DLL
.idata:004081C0 ;
.idata:004081C0 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004081C0                 extrn __imp_mbrtowc:dword
.idata:004081C0                                         ; DATA XREF: mbrtowc↑r
.idata:004081C4
.idata:004081CC ;
.idata:004081CC ; Imports from msvcrt.dll
.idata:004081CC ;
.idata:004081CC                 extrn __imp___getmainargs:dword
.idata:004081CC                                         ; DATA XREF: __getmainargs↑r
.idata:004081D0 ; int _mb_cur_max
.idata:004081D0                 extrn __mb_cur_max:dword
.idata:004081D0                                         ; DATA XREF: sub_402B40+7↑r
.idata:004081D0                                         ; sub_402B40+5F3↑r
.idata:004081D4 ; char ***(__cdecl *__p__environ)()
.idata:004081D4                 extrn __imp___p__environ:dword
.idata:004081D4                                         ; DATA XREF: __p__environ↑r
.idata:004081D8 ; int *(__cdecl *__p__fmode)()
.idata:004081D8                 extrn __imp___p__fmode:dword
.idata:004081D8                                         ; DATA XREF: __p__fmode↑r
.idata:004081DC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004081DC                 extrn __set_app_type:dword
.idata:004081DC                                         ; CODE XREF: start+D↑p
.idata:004081DC                                         ; .text:0040102D↑p
.idata:004081DC                                         ; DATA XREF: ...
.idata:004081E0 ; void (__cdecl *_cexit)()
.idata:004081E0                 extrn __imp__cexit:dword
.idata:004081E0                                         ; DATA XREF: _cexit↑r
.idata:004081E4 ; int *(__cdecl *_errno)()
.idata:004081E4                 extrn __imp__errno:dword
.idata:004081E4                                         ; DATA XREF: _errno↑r
.idata:004081E8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081E8                 extrn __imp__flsbuf:dword
.idata:004081E8                                         ; DATA XREF: _flsbuf↑r
.idata:004081EC ; FILE iob[]
.idata:004081EC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081EC                                         ; sub_401080+75↑r ...
.idata:004081F0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081F0                 extrn __imp__isctype:dword
.idata:004081F0                                         ; DATA XREF: _isctype↑r
.idata:004081F4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081F4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081F4                                         ; DATA XREF: .text:0040106C↑r
.idata:004081F8 ; const unsigned __int16 *pctype
.idata:004081F8                 extrn _pctype:dword     ; DATA XREF: sub_402B40:loc_403234↑r
.idata:004081FC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081FC                 extrn __imp__setmode:dword
.idata:004081FC                                         ; DATA XREF: _setmode↑r
.idata:00408200 ; void (__cdecl __noreturn *abort)()
.idata:00408200                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00408204 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00408204                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00408204                                         ; DATA XREF: sub_401040+C↑r
.idata:00408208 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00408208                 extrn __imp_calloc:dword
.idata:00408208                                         ; DATA XREF: calloc↑r
.idata:0040820C ; void (__cdecl __noreturn *exit)(int Code)
.idata:0040820C                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00408210 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00408210                 extrn __imp_fclose:dword
.idata:00408210                                         ; DATA XREF: fclose↑r
.idata:00408214 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00408214                 extrn __imp_fflush:dword
.idata:00408214                                         ; DATA XREF: fflush↑r
.idata:00408218 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00408218                 extrn __imp_fprintf:dword
.idata:00408218                                         ; DATA XREF: fprintf↑r
.idata:0040821C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0040821C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00408220 ; void (__cdecl *free)(void *Block)
.idata:00408220                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00408224 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00408224                 extrn __imp_getenv:dword
.idata:00408224                                         ; DATA XREF: getenv↑r
.idata:00408228 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00408228                 extrn __imp_iswctype:dword
.idata:00408228                                         ; DATA XREF: iswctype↑r
.idata:0040822C ; void *(__cdecl *malloc)(size_t Size)
.idata:0040822C                 extrn __imp_malloc:dword
.idata:0040822C                                         ; DATA XREF: malloc↑r
.idata:00408230 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00408230                 extrn __imp_memcpy:dword
.idata:00408230                                         ; DATA XREF: memcpy↑r
.idata:00408234 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00408234                 extrn __imp_memset:dword
.idata:00408234                                         ; DATA XREF: memset↑r
.idata:00408238 ; int (*printf)(const char *const Format, ...)
.idata:00408238                 extrn __imp_printf:dword
.idata:00408238                                         ; DATA XREF: printf↑r
.idata:0040823C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040823C                 extrn __imp_realloc:dword
.idata:0040823C                                         ; DATA XREF: realloc↑r
.idata:00408240 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00408240                 extrn __imp_setlocale:dword
.idata:00408240                                         ; DATA XREF: setlocale↑r
.idata:00408244 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408244                 extrn __imp_signal:dword
.idata:00408244                                         ; DATA XREF: signal↑r
.idata:00408248 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00408248                 extrn __imp_strchr:dword
.idata:00408248                                         ; DATA XREF: strchr↑r
.idata:0040824C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040824C                 extrn __imp_strcmp:dword
.idata:0040824C                                         ; DATA XREF: strcmp↑r
.idata:00408250 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408250                 extrn __imp_strerror:dword
.idata:00408250                                         ; DATA XREF: strerror↑r
.idata:00408254 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408254                 extrn __imp_strlen:dword
.idata:00408254                                         ; DATA XREF: strlen↑r
.idata:00408258 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408258                 extrn __imp_strncmp:dword
.idata:00408258                                         ; DATA XREF: strncmp↑r
.idata:0040825C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040825C                 extrn __imp_vfprintf:dword
.idata:0040825C                                         ; DATA XREF: vfprintf↑r
.idata:00408260
.idata:00408268 ;
.idata:00408268 ; Imports from WSOCK32.DLL
.idata:00408268 ;
.idata:00408268 ; int (__stdcall *WSACleanup)()
.idata:00408268                 extrn __imp_WSACleanup:dword
.idata:00408268                                         ; DATA XREF: WSACleanup↑r
.idata:0040826C ; int (__stdcall *WSAGetLastError)()
.idata:0040826C                 extrn __imp_WSAGetLastError:dword
.idata:0040826C                                         ; DATA XREF: WSAGetLastError↑r
.idata:00408270 ; int (__stdcall *WSAStartup)(WORD wVersionRequested, LPWSADATA lpWSAData)
.idata:00408270                 extrn __imp_WSAStartup:dword
.idata:00408270                                         ; DATA XREF: WSAStartup↑r
.idata:00408274 ; struct hostent *(__stdcall *gethostbyname)(const char *name)
.idata:00408274                 extrn __imp_gethostbyname:dword
.idata:00408274                                         ; DATA XREF: gethostbyname↑r
.idata:00408278 ; int (__stdcall *gethostname)(char *name, int namelen)
.idata:00408278                 extrn __imp_gethostname:dword
.idata:00408278                                         ; DATA XREF: gethostname↑r
.idata:0040827C ; unsigned int (__stdcall *inet_addr)(const char *cp)
.idata:0040827C                 extrn __imp_inet_addr:dword
.idata:0040827C                                         ; DATA XREF: inet_addr↑r
.idata:00408280 ; char *(__stdcall *inet_ntoa)(struct in_addr in)
.idata:00408280                 extrn __imp_inet_ntoa:dword
.idata:00408280                                         ; DATA XREF: inet_ntoa↑r
.idata:00408284
.idata:00408284
.idata:00408284
.idata:00408284                 end start
