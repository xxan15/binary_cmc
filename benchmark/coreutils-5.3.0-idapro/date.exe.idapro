.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : BF1A51FB527CF1ED94D8E6ADFBF41545D38C1712C2168C0641895E9FF67F4B13
.text:00401000 ; Input MD5    : 41D031F5E909A1CBEA0CFB4F7350EEAF
.text:00401000 ; Input CRC32  : F5C2043A
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/date.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A265 (Wed Apr 20 18:41:41 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0001CF00 ( 118528.)
.text:00401000 ; Section size in file          : 0001D000 ( 118784.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_402430+A3↓p
.text:00401040                                         ; .text:0041CD80↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_41CD20
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_41E000
.text:004010A2                 mov     edx, dword_41E120
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_41E004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_41E140, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_41E140
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_41CCF0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_41E000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_41E004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_402430
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_41CD20
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const FILE stru_401280
.text:00401280 stru_401280     FILE <65746164h, 756F6800h, 6D007372h, 74756E69h, 73007365h, \
.text:00401280                                         ; DATA XREF: .text:off_4012A0↓o
.text:00401280                                         ; .text:off_401320↓o ...
.text:00401280                       6E6F6365h, 6E007364h, 0F6890073h>
.text:004012A0 off_4012A0      dd offset stru_401280   ; DATA XREF: sub_402430+17B↓o
.text:004012A4                 dd offset stru_401280._cnt+1
.text:004012A8                 dd offset stru_401280._base+3
.text:004012AC                 dd offset stru_401280._file+3
.text:004012B0                 dd offset stru_401280._bufsiz+3
.text:004012B4                 align 8
.text:004012B8 dword_4012B8    dd 1                    ; DATA XREF: sub_402430+173↓o
.text:004012B8                                         ; sub_402430+197↓r
.text:004012BC                 dd 2, 3, 4, 5, 656C6966h, 6F736900h, 3036382Dh, 65720031h
.text:004012BC                 dd 65726566h, 65636Eh, 2D636672h, 323238h, 2D636672h, 32323832h
.text:004012BC                 dd 74657300h, 74637500h, 63747500h, 696E7500h, 73726576h
.text:004012BC                 dd 68006C61h, 706C65h, 73726576h, 6E6F69h, 26B48D90h, 0
.text:00401320 off_401320      dd offset stru_401280   ; DATA XREF: sub_402430+B8↓o
.text:00401324                 dd 1, 0
.text:0040132C                 dd 64h, 4012CCh, 1, 0
.text:0040133C                 dd 66h, 4012D1h, 2, 0
.text:0040134C                 dd 49h, 4012DAh, 1, 0
.text:0040135C                 dd 72h, 4012E4h, 2 dup(0)
.text:0040136C                 dd 52h, 4012ECh, 2 dup(0)
.text:0040137C                 dd 52h, 4012F5h, 1, 0
.text:0040138C                 dd 73h, 4012F9h, 2 dup(0)
.text:0040139C                 dd 75h, 4012FDh, 2 dup(0)
.text:004013AC                 dd 75h, 401301h, 2 dup(0)
.text:004013BC                 dd 75h, 40130Bh, 2 dup(0)
.text:004013CC                 dd 0FFFFFF7Eh, 401310h, 2 dup(0)
.text:004013DC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004013F0 ; const char aRdFRSUi[]
.text:004013F0 aRdFRSUi        db 'Rd:f:r:s:uI::',0    ; DATA XREF: sub_402430+E↓o
.text:004013FE aRdFRSUi_0      db 'Rd:f:r:s:uI:',0     ; DATA XREF: sub_402430+59↓o
.text:0040140B ; const char Locale
.text:0040140B Locale          db 0                    ; DATA XREF: sub_402430+60↓o
.text:0040140B                                         ; sub_402D90:loc_402E71↓o
.text:0040140C                 align 20h
.text:00401420 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401420                                         ; DATA XREF: sub_402430+7A↓o
.text:00401443 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_402430+82↓o
.text:00401443                                         ; sub_402430+8F↓o
.text:0040144D                 align 20h
.text:00401460 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401460                                         ; DATA XREF: sub_402430:loc_402544↓o
.text:00401460                                         ; sub_402F50+C↓o
.text:00401487 ; const char aIso8601[]
.text:00401487 aIso8601        db '--iso-8601',0       ; DATA XREF: sub_402430+18B↓o
.text:00401492 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_402430+1B9↓o
.text:004014A2 a530            db '5.3.0',0            ; DATA XREF: sub_402430+1C1↓o
.text:004014A8 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_402430+1CC↓o
.text:004014B6                 align 10h
.text:004014C0 aUsageSOptionFo db 'Usage: %s [OPTION]... [+FORMAT]',0Ah
.text:004014C0                                         ; DATA XREF: sub_402430:loc_402620↓o
.text:004014C0                                         ; sub_402F50:loc_402F90↓o
.text:004014C0                 db '  or:  %s [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]',0Ah,0
.text:0040151A                 align 10h
.text:00401520 aDisplayTheCurr db 'Display the current time in the given FORMAT, or set the system d'
.text:00401520                                         ; DATA XREF: sub_402430+213↓o
.text:00401520                                         ; sub_402F50+63↓o
.text:00401520                 db 'ate.',0Ah
.text:00401520                 db 0Ah
.text:00401520                 db '  -d, --date=STRING         display time described by STRING, not'
.text:00401520                 db ' `now',27h,0Ah
.text:00401520                 db '  -f, --file=DATEFILE       like --date once for each line of DAT'
.text:00401520                 db 'EFILE',0Ah
.text:00401520                 db '      --iso-8601[=TIMESPEC] output date/time in ISO 8601 format.',0Ah
.text:00401520                 db '                            TIMESPEC=`date',27h,' for date only ('
.text:00401520                 db 'the default),',0Ah
.text:00401520                 db '                            `hours',27h,', `minutes',27h,', `seco'
.text:00401520                 db 'nds',27h,', or `ns',27h,' for date and',0Ah
.text:00401520                 db '                            time to the indicated precision.',0Ah
.text:00401520                 db 0
.text:0040170E                 align 20h
.text:00401720 aRReferenceFile db '  -r, --reference=FILE      display the last modification time of'
.text:00401720                                         ; DATA XREF: sub_402430+235↓o
.text:00401720                                         ; sub_402F50+85↓o
.text:00401720                 db ' FILE',0Ah
.text:00401720                 db '  -R, --rfc-2822            output RFC-2822 compliant date string'
.text:00401720                 db 0Ah
.text:00401720                 db '  -s, --set=STRING          set time described by STRING',0Ah
.text:00401720                 db '  -u, --utc, --universal    print or set Coordinated Universal Ti'
.text:00401720                 db 'me',0Ah,0
.text:00401827                 align 20h
.text:00401840 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401840                                         ; DATA XREF: sub_402430+257↓o
.text:00401840                                         ; sub_402F50+A7↓o
.text:0040186D                 align 20h
.text:00401880 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401880                                         ; DATA XREF: sub_402430+279↓o
.text:00401880                                         ; sub_402F50+C9↓o
.text:004018B6                 align 10h
.text:004018C0 aFormatControls db 0Ah                  ; DATA XREF: sub_402430+29B↓o
.text:004018C0                                         ; sub_402F50+EB↓o
.text:004018C0                 db 'FORMAT controls the output.  The only valid option for the second'
.text:004018C0                 db ' form',0Ah
.text:004018C0                 db 'specifies Coordinated Universal Time.  Interpreted sequences are:'
.text:004018C0                 db 0Ah
.text:004018C0                 db 0Ah
.text:004018C0                 db '  %%   a literal %',0Ah
.text:004018C0                 db '  %a   locale',27h,'s abbreviated weekday name (Sun..Sat)',0Ah,0
.text:00401993                 align 10h
.text:004019A0 aALocaleSFullWe db '  %A   locale',27h,'s full weekday name, variable length (Sunday.'
.text:004019A0                                         ; DATA XREF: sub_402430+2BD↓o
.text:004019A0                                         ; sub_402F50+10D↓o
.text:004019A0                 db '.Saturday)',0Ah
.text:004019A0                 db '  %b   locale',27h,'s abbreviated month name (Jan..Dec)',0Ah
.text:004019A0                 db '  %B   locale',27h,'s full month name, variable length (January..'
.text:004019A0                 db 'December)',0Ah
.text:004019A0                 db '  %c   locale',27h,'s date and time (Sat Nov 04 12:02:33 EST 1989'
.text:004019A0                 db ')',0Ah,0
.text:00401A9B                 align 10h
.text:00401AA0 aCCenturyYearDi db '  %C   century (year divided by 100 and truncated to an integer) '
.text:00401AA0                                         ; DATA XREF: sub_402430+2DF↓o
.text:00401AA0                                         ; sub_402F50+12F↓o
.text:00401AA0                 db '[00-99]',0Ah
.text:00401AA0                 db '  %d   day of month (01..31)',0Ah
.text:00401AA0                 db '  %D   date (mm/dd/yy)',0Ah
.text:00401AA0                 db '  %e   day of month, blank padded ( 1..31)',0Ah,0
.text:00401B49                 align 20h
.text:00401B60 aFSameAsYMDGThe db '  %F   same as %Y-%m-%d',0Ah
.text:00401B60                                         ; DATA XREF: sub_402430+301↓o
.text:00401B60                                         ; sub_402F50+151↓o
.text:00401B60                 db '  %g   the 2-digit year corresponding to the %V week number',0Ah
.text:00401B60                 db '  %G   the 4-digit year corresponding to the %V week number',0Ah,0
.text:00401BF1                 db 0EBh, 0Dh, 90h
.text:00401BF4                 align 10h
.text:00401C00 aHSameAsBHHour0 db '  %h   same as %b',0Ah
.text:00401C00                                         ; DATA XREF: sub_402430+323↓o
.text:00401C00                                         ; sub_402F50+173↓o
.text:00401C00                 db '  %H   hour (00..23)',0Ah
.text:00401C00                 db '  %I   hour (01..12)',0Ah
.text:00401C00                 db '  %j   day of year (001..366)',0Ah,0
.text:00401C5B                 align 10h
.text:00401C60 aKHour023LHour1 db '  %k   hour ( 0..23)',0Ah
.text:00401C60                                         ; DATA XREF: sub_402430+345↓o
.text:00401C60                                         ; sub_402F50+195↓o
.text:00401C60                 db '  %l   hour ( 1..12)',0Ah
.text:00401C60                 db '  %m   month (01..12)',0Ah
.text:00401C60                 db '  %M   minute (00..59)',0Ah,0
.text:00401CB8                 align 10h
.text:00401CC0 aNANewlineNNano db '  %n   a newline',0Ah
.text:00401CC0                                         ; DATA XREF: sub_402430+367↓o
.text:00401CC0                                         ; sub_402F50+1B7↓o
.text:00401CC0                 db '  %N   nanoseconds (000000000..999999999)',0Ah
.text:00401CC0                 db '  %p   locale',27h,'s upper case AM or PM indicator (blank in man'
.text:00401CC0                 db 'y locales)',0Ah
.text:00401CC0                 db '  %P   locale',27h,'s lower case am or pm indicator (blank in man'
.text:00401CC0                 db 'y locales)',0Ah
.text:00401CC0                 db '  %r   time, 12-hour (hh:mm:ss [AP]M)',0Ah
.text:00401CC0                 db '  %R   time, 24-hour (hh:mm)',0Ah
.text:00401CC0                 db '  %s   seconds since `00:00:00 1970-01-01 UTC',27h,' (a GNU exten'
.text:00401CC0                 db 'sion)',0Ah,0
.text:00401E0C                 align 20h
.text:00401E20 aSSecond0060The db '  %S   second (00..60); the 60 is necessary to accommodate a leap'
.text:00401E20                                         ; DATA XREF: sub_402430+389↓o
.text:00401E20                                         ; sub_402F50+1D9↓o
.text:00401E20                 db ' second',0Ah
.text:00401E20                 db '  %t   a horizontal tab',0Ah
.text:00401E20                 db '  %T   time, 24-hour (hh:mm:ss)',0Ah
.text:00401E20                 db '  %u   day of week (1..7);  1 represents Monday',0Ah,0
.text:00401ED2                 align 10h
.text:00401EE0 aUWeekNumberOfY db '  %U   week number of year with Sunday as first day of week (00..'
.text:00401EE0                                         ; DATA XREF: sub_402430+3AB↓o
.text:00401EE0                                         ; sub_402F50+1FB↓o
.text:00401EE0                 db '53)',0Ah
.text:00401EE0                 db '  %V   week number of year with Monday as first day of week (01..'
.text:00401EE0                 db '53)',0Ah
.text:00401EE0                 db '  %w   day of week (0..6);  0 represents Sunday',0Ah
.text:00401EE0                 db '  %W   week number of year with Monday as first day of week (00..'
.text:00401EE0                 db '53)',0Ah,0
.text:00401FE0 aXLocaleSDateRe db '  %x   locale',27h,'s date representation (mm/dd/yy)',0Ah
.text:00401FE0                                         ; DATA XREF: sub_402430+3CD↓o
.text:00401FE0                                         ; sub_402F50+21D↓o
.text:00401FE0                 db '  %X   locale',27h,'s time representation (%H:%M:%S)',0Ah
.text:00401FE0                 db '  %y   last two digits of year (00..99)',0Ah
.text:00401FE0                 db '  %Y   year (1970...)',0Ah,0
.text:0040207D                 align 10h
.text:00402080 aZRfc2822StyleN db '  %z   RFC-2822 style numeric timezone (-0500) (a nonstandard ext'
.text:00402080                                         ; DATA XREF: sub_402430+3EF↓o
.text:00402080                                         ; sub_402F50+23F↓o
.text:00402080                 db 'ension)',0Ah
.text:00402080                 db '  %Z   time zone (e.g., EDT), or nothing if no time zone is deter'
.text:00402080                 db 'minable',0Ah
.text:00402080                 db 0Ah
.text:00402080                 db 'By default, date pads numeric fields with zeroes.  GNU date recog'
.text:00402080                 db 'nizes',0Ah
.text:00402080                 db 'the following modifiers between `%',27h,' and a numeric directive'
.text:00402080                 db '.',0Ah
.text:00402080                 db 0Ah
.text:00402080                 db '  `-',27h,' (hyphen) do not pad the field',0Ah
.text:00402080                 db '  `_',27h,' (underscore) pad the field with spaces',0Ah,0
.text:004021EA aReportBugsToS  db 0Ah                  ; DATA XREF: sub_402430+411↓o
.text:004021EA                                         ; sub_402F50+261↓o
.text:004021EA                 db 'Report bugs to <%s>.',0Ah,0
.text:00402201 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00402201                                         ; DATA XREF: sub_402430+41E↓o
.text:00402201                                         ; sub_402F50+26E↓o
.text:00402217 ; const char EnvString[]
.text:00402217 EnvString       db 'TZ=UTC0',0          ; DATA XREF: sub_402430+464↓o
.text:0040221F aUndefined      db 'undefined',0        ; DATA XREF: sub_402430:loc_4029F3↓o
.text:00402229 aCannotSetDate  db 'cannot set date',0  ; DATA XREF: sub_402430+64E↓o
.text:00402239 aCannotGetTimeO db 'cannot get time of day',0
.text:00402239                                         ; DATA XREF: sub_402430:loc_402AC9↓o
.text:00402250 aInvalidDateS   db 'invalid date `%s',27h,0
.text:00402250                                         ; DATA XREF: sub_402430+71E↓o
.text:00402250                                         ; sub_4031F0:loc_403295↓o
.text:00402262 ; const char aS[]
.text:00402262 aS              db '%s',0               ; DATA XREF: sub_402430+7B3↓o
.text:00402262                                         ; sub_4031F0+16A↓o ...
.text:00402265                 align 20h
.text:00402280 aAFormatStringM db 'a format string may not be specified when using the --rfc-2822 (-'
.text:00402280                                         ; DATA XREF: sub_402430:loc_402C31↓o
.text:00402280                 db 'R) option',0
.text:004022CB                 align 20h
.text:004022E0 aTheArgumentSLa db 'the argument `%s',27h,' lacks a leading `+',27h,';',0Ah
.text:004022E0                                         ; DATA XREF: sub_402430+837↓o
.text:004022E0                 db 'When using an option to specify date(s), any non-option',0Ah
.text:004022E0                 db 'argument must be a format string beginning with `+',27h,'.',0
.text:00402374 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_402430+87A↓o
.text:00402385                 align 20h
.text:004023A0 aTheOptionsToPr db 'the options to print and set the time may not be used together',0
.text:004023A0                                         ; DATA XREF: sub_402430:loc_402CBF↓o
.text:004023DF                 align 10h
.text:004023E0 aTheOptionsToSp db 'the options to specify dates for printing are mutually exclusive',0
.text:004023E0                                         ; DATA XREF: sub_402430:loc_402CCB↓o
.text:00402421 ; ---------------------------------------------------------------------------
.text:00402421                 jmp     short sub_402430
.text:00402421 ; ---------------------------------------------------------------------------
.text:00402423                 align 10h
.text:00402430
.text:00402430 ; =============== S U B R O U T I N E =======================================
.text:00402430
.text:00402430 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00402430
.text:00402430 sub_402430      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00402430                                         ; .text:00402421↑j
.text:00402430
.text:00402430 Category        = dword ptr -0D8h
.text:00402430 Locale          = dword ptr -0D4h
.text:00402430 var_D0          = dword ptr -0D0h
.text:00402430 var_CC          = byte ptr -0CCh
.text:00402430 var_C8          = byte ptr -0C8h
.text:00402430 var_C4          = dword ptr -0C4h
.text:00402430 var_AA          = byte ptr -0AAh
.text:00402430 var_A9          = byte ptr -0A9h
.text:00402430 var_A8          = dword ptr -0A8h
.text:00402430 FileName        = dword ptr -0A4h
.text:00402430 var_A0          = dword ptr -0A0h
.text:00402430 var_99          = byte ptr -99h
.text:00402430 var_98          = dword ptr -98h
.text:00402430 var_94          = byte ptr -94h
.text:00402430 var_90          = dword ptr -90h
.text:00402430 var_8C          = dword ptr -8Ch
.text:00402430 var_88          = dword ptr -88h
.text:00402430 var_48          = dword ptr -48h
.text:00402430 var_44          = dword ptr -44h
.text:00402430 arg_0           = dword ptr  8
.text:00402430 arg_4           = dword ptr  0Ch
.text:00402430
.text:00402430                 push    ebp
.text:00402431                 xor     eax, eax
.text:00402433                 mov     ebp, esp
.text:00402435                 push    edi
.text:00402436                 push    esi
.text:00402437                 push    ebx
.text:00402438                 sub     esp, 0CCh
.text:0040243E                 mov     ebx, offset aRdFRSUi ; "Rd:f:r:s:uI::"
.text:00402443                 and     esp, 0FFFFFFF0h
.text:00402446                 mov     edi, [ebp+arg_0]
.text:00402449                 mov     esi, [ebp+arg_4]
.text:0040244C                 call    __alloca
.text:00402451                 call    sub_41CDC0
.text:00402456                 mov     [ebp+var_99], 0
.text:0040245D                 xor     eax, eax
.text:0040245F                 xor     ecx, ecx
.text:00402461                 mov     [ebp+FileName], eax
.text:00402467                 xor     edx, edx
.text:00402469                 xor     eax, eax
.text:0040246B                 mov     dword ptr [ebp+var_94], ecx
.text:00402471                 mov     [ebp+var_98], edx
.text:00402477                 mov     [ebp+var_A8], eax
.text:0040247D                 call    sub_407930
.text:00402482                 cmp     eax, 30DAFh
.text:00402487                 jle     short loc_40248E
.text:00402489                 mov     ebx, offset aRdFRSUi_0 ; "Rd:f:r:s:uI:"
.text:0040248E
.text:0040248E loc_40248E:                             ; CODE XREF: sub_402430+57↑j
.text:0040248E                 mov     edx, [esi]
.text:00402490                 mov     [esp+0D8h+Locale], offset Locale ; Locale
.text:00402498                 mov     [esp+0D8h+Category], 0 ; Category
.text:0040249F                 mov     ds:dword_41F510, edx
.text:004024A5                 call    setlocale
.text:004024AA                 mov     [esp+0D8h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004024B2                 mov     [esp+0D8h+Category], offset aCoreutils ; "coreutils"
.text:004024B9                 call    ds:__imp_libintl_bindtextdomain
.text:004024BF                 mov     [esp+0D8h+Category], offset aCoreutils ; "coreutils"
.text:004024C6                 call    ds:libintl_textdomain
.text:004024CC                 mov     [esp+0D8h+Category], offset sub_407840 ; void (__cdecl *)()
.text:004024D3                 call    sub_401040
.text:004024D8                 nop
.text:004024D9                 lea     esi, [esi+0]
.text:004024E0
.text:004024E0 loc_4024E0:                             ; CODE XREF: sub_402430+112↓j
.text:004024E0                                         ; sub_402430+160↓j ...
.text:004024E0                 mov     dword ptr [esp+0D8h+var_C8], 0 ; int
.text:004024E8                 mov     dword ptr [esp+0D8h+var_CC], offset off_401320 ; char
.text:004024F0                 mov     [esp+0D8h+var_D0], ebx ; char *
.text:004024F4                 mov     [esp+0D8h+Locale], esi ; int
.text:004024F8                 mov     [esp+0D8h+Category], edi ; int
.text:004024FB                 call    sub_4076D0
.text:00402500                 cmp     eax, 0FFFFFFFFh
.text:00402503                 jz      loc_4028F2
.text:00402509                 cmp     eax, 64h ; 'd'
.text:0040250C                 jz      loc_4028E1
.text:00402512                 cmp     eax, 64h ; 'd'
.text:00402515                 jg      loc_402863
.text:0040251B                 cmp     eax, 0FFFFFF7Eh
.text:00402520                 jz      loc_402620
.text:00402526                 cmp     eax, 0FFFFFF7Eh
.text:0040252B                 jle     loc_4025D0
.text:00402531                 cmp     eax, 49h ; 'I'
.text:00402534                 jz      short loc_40257C
.text:00402536                 cmp     eax, 52h ; 'R'
.text:00402539                 jnz     short loc_402544
.text:0040253B                 mov     ds:byte_41F010, 1
.text:00402542                 jmp     short loc_4024E0
.text:00402544 ; ---------------------------------------------------------------------------
.text:00402544
.text:00402544 loc_402544:                             ; CODE XREF: sub_402430+109↑j
.text:00402544                                         ; sub_402430+1A5↓j ...
.text:00402544                 mov     [esp+0D8h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:0040254B                 call    ds:libintl_gettext
.text:00402551                 mov     esi, ds:_iob
.text:00402557                 mov     edi, ds:dword_41F510
.text:0040255D                 add     esi, 40h ; '@'
.text:00402560                 mov     [esp+0D8h+var_D0], edi
.text:00402564                 mov     [esp+0D8h+Locale], eax ; Format
.text:00402568                 mov     [esp+0D8h+Category], esi ; Stream
.text:0040256B                 call    fprintf
.text:00402570                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402577
.text:00402577 loc_402577:                             ; CODE XREF: sub_402430+1EB↓j
.text:00402577                                         ; sub_402430+58C↓j
.text:00402577                 call    exit
.text:0040257C ; ---------------------------------------------------------------------------
.text:0040257C
.text:0040257C loc_40257C:                             ; CODE XREF: sub_402430+104↑j
.text:0040257C                 mov     edx, ds:dword_41F530
.text:00402582                 mov     eax, 1
.text:00402587                 test    edx, edx
.text:00402589                 jnz     short loc_402595
.text:0040258B
.text:0040258B loc_40258B:                             ; CODE XREF: sub_402430+19E↓j
.text:0040258B                 mov     ds:dword_41F000, eax
.text:00402590                 jmp     loc_4024E0
.text:00402595 ; ---------------------------------------------------------------------------
.text:00402595
.text:00402595 loc_402595:                             ; CODE XREF: sub_402430+159↑j
.text:00402595                 mov     dword ptr [esp+0D8h+var_C8], 4 ; int
.text:0040259D                 mov     ecx, off_41E020
.text:004025A3                 mov     dword ptr [esp+0D8h+var_CC], offset dword_4012B8 ; int
.text:004025AB                 mov     [esp+0D8h+var_D0], offset off_4012A0 ; int
.text:004025B3                 mov     [esp+0D8h+var_C4], ecx ; int
.text:004025B7                 mov     [esp+0D8h+Locale], edx ; char *
.text:004025BB                 mov     [esp+0D8h+Category], offset aIso8601 ; "--iso-8601"
.text:004025C2                 call    sub_406680
.text:004025C7                 mov     eax, ds:dword_4012B8[eax*4]
.text:004025CE                 jmp     short loc_40258B
.text:004025D0 ; ---------------------------------------------------------------------------
.text:004025D0
.text:004025D0 loc_4025D0:                             ; CODE XREF: sub_402430+FB↑j
.text:004025D0                 cmp     eax, 0FFFFFF7Dh
.text:004025D5                 jnz     loc_402544
.text:004025DB                 mov     [esp+0D8h+var_C4], 0
.text:004025E3                 mov     edx, ds:_iob
.text:004025E9                 mov     dword ptr [esp+0D8h+var_C8], offset aDavidMackenzie ; "David MacKenzie"
.text:004025F1                 mov     dword ptr [esp+0D8h+var_CC], offset a530 ; "5.3.0"
.text:004025F9                 add     edx, 20h ; ' '
.text:004025FC                 mov     [esp+0D8h+var_D0], offset aGnuCoreutils ; "GNU coreutils"
.text:00402604                 mov     [esp+0D8h+Locale], offset stru_401280 ; FILE *
.text:0040260C                 mov     [esp+0D8h+Category], edx ; FILE *
.text:0040260F                 call    sub_407630
.text:00402614
.text:00402614 loc_402614:                             ; CODE XREF: sub_402430+42E↓j
.text:00402614                 mov     [esp+0D8h+Category], 0
.text:0040261B                 jmp     loc_402577
.text:00402620 ; ---------------------------------------------------------------------------
.text:00402620
.text:00402620 loc_402620:                             ; CODE XREF: sub_402430+F0↑j
.text:00402620                 mov     [esp+0D8h+Category], offset aUsageSOptionFo ; "Usage: %s [OPTION]... [+FORMAT]\n  or: "...
.text:00402627                 call    ds:libintl_gettext
.text:0040262D                 mov     ecx, ds:dword_41F510
.text:00402633                 mov     [esp+0D8h+Category], eax ; Format
.text:00402636                 mov     [esp+0D8h+var_D0], ecx
.text:0040263A                 mov     [esp+0D8h+Locale], ecx
.text:0040263E                 call    printf
.text:00402643                 mov     [esp+0D8h+Category], offset aDisplayTheCurr ; "Display the current time in the given F"...
.text:0040264A                 call    ds:libintl_gettext
.text:00402650                 mov     edi, ds:_iob
.text:00402656                 add     edi, 20h ; ' '
.text:00402659                 mov     [esp+0D8h+Locale], edi ; Stream
.text:0040265D                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00402660                 call    fputs
.text:00402665                 mov     [esp+0D8h+Category], offset aRReferenceFile ; "  -r, --reference=FILE      display the"...
.text:0040266C                 call    ds:libintl_gettext
.text:00402672                 mov     esi, ds:_iob
.text:00402678                 add     esi, 20h ; ' '
.text:0040267B                 mov     [esp+0D8h+Locale], esi ; Stream
.text:0040267F                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00402682                 call    fputs
.text:00402687                 mov     [esp+0D8h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040268E                 call    ds:libintl_gettext
.text:00402694                 mov     ebx, ds:_iob
.text:0040269A                 add     ebx, 20h ; ' '
.text:0040269D                 mov     [esp+0D8h+Locale], ebx ; Stream
.text:004026A1                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004026A4                 call    fputs
.text:004026A9                 mov     [esp+0D8h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004026B0                 call    ds:libintl_gettext
.text:004026B6                 mov     ecx, ds:_iob
.text:004026BC                 add     ecx, 20h ; ' '
.text:004026BF                 mov     [esp+0D8h+Locale], ecx ; Stream
.text:004026C3                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004026C6                 call    fputs
.text:004026CB                 mov     [esp+0D8h+Category], offset aFormatControls ; "\nFORMAT controls the output.  The only"...
.text:004026D2                 call    ds:libintl_gettext
.text:004026D8                 mov     edi, ds:_iob
.text:004026DE                 add     edi, 20h ; ' '
.text:004026E1                 mov     [esp+0D8h+Locale], edi ; Stream
.text:004026E5                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004026E8                 call    fputs
.text:004026ED                 mov     [esp+0D8h+Category], offset aALocaleSFullWe ; "  %A   locale's full weekday name, vari"...
.text:004026F4                 call    ds:libintl_gettext
.text:004026FA                 mov     esi, ds:_iob
.text:00402700                 add     esi, 20h ; ' '
.text:00402703                 mov     [esp+0D8h+Locale], esi ; Stream
.text:00402707                 mov     [esp+0D8h+Category], eax ; Buffer
.text:0040270A                 call    fputs
.text:0040270F                 mov     [esp+0D8h+Category], offset aCCenturyYearDi ; "  %C   century (year divided by 100 and"...
.text:00402716                 call    ds:libintl_gettext
.text:0040271C                 mov     ebx, ds:_iob
.text:00402722                 add     ebx, 20h ; ' '
.text:00402725                 mov     [esp+0D8h+Locale], ebx ; Stream
.text:00402729                 mov     [esp+0D8h+Category], eax ; Buffer
.text:0040272C                 call    fputs
.text:00402731                 mov     [esp+0D8h+Category], offset aFSameAsYMDGThe ; "  %F   same as %Y-%m-%d\n  %g   the 2-d"...
.text:00402738                 call    ds:libintl_gettext
.text:0040273E                 mov     ecx, ds:_iob
.text:00402744                 add     ecx, 20h ; ' '
.text:00402747                 mov     [esp+0D8h+Locale], ecx ; Stream
.text:0040274B                 mov     [esp+0D8h+Category], eax ; Buffer
.text:0040274E                 call    fputs
.text:00402753                 mov     [esp+0D8h+Category], offset aHSameAsBHHour0 ; "  %h   same as %b\n  %H   hour (00..23)"...
.text:0040275A                 call    ds:libintl_gettext
.text:00402760                 mov     edi, ds:_iob
.text:00402766                 add     edi, 20h ; ' '
.text:00402769                 mov     [esp+0D8h+Locale], edi ; Stream
.text:0040276D                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00402770                 call    fputs
.text:00402775                 mov     [esp+0D8h+Category], offset aKHour023LHour1 ; "  %k   hour ( 0..23)\n  %l   hour ( 1.."...
.text:0040277C                 call    ds:libintl_gettext
.text:00402782                 mov     esi, ds:_iob
.text:00402788                 add     esi, 20h ; ' '
.text:0040278B                 mov     [esp+0D8h+Locale], esi ; Stream
.text:0040278F                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00402792                 call    fputs
.text:00402797                 mov     [esp+0D8h+Category], offset aNANewlineNNano ; "  %n   a newline\n  %N   nanoseconds (0"...
.text:0040279E                 call    ds:libintl_gettext
.text:004027A4                 mov     ebx, ds:_iob
.text:004027AA                 add     ebx, 20h ; ' '
.text:004027AD                 mov     [esp+0D8h+Locale], ebx ; Stream
.text:004027B1                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004027B4                 call    fputs
.text:004027B9                 mov     [esp+0D8h+Category], offset aSSecond0060The ; "  %S   second (00..60); the 60 is neces"...
.text:004027C0                 call    ds:libintl_gettext
.text:004027C6                 mov     ecx, ds:_iob
.text:004027CC                 add     ecx, 20h ; ' '
.text:004027CF                 mov     [esp+0D8h+Locale], ecx ; Stream
.text:004027D3                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004027D6                 call    fputs
.text:004027DB                 mov     [esp+0D8h+Category], offset aUWeekNumberOfY ; "  %U   week number of year with Sunday "...
.text:004027E2                 call    ds:libintl_gettext
.text:004027E8                 mov     edi, ds:_iob
.text:004027EE                 add     edi, 20h ; ' '
.text:004027F1                 mov     [esp+0D8h+Locale], edi ; Stream
.text:004027F5                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004027F8                 call    fputs
.text:004027FD                 mov     [esp+0D8h+Category], offset aXLocaleSDateRe ; "  %x   locale's date representation (mm"...
.text:00402804                 call    ds:libintl_gettext
.text:0040280A                 mov     esi, ds:_iob
.text:00402810                 add     esi, 20h ; ' '
.text:00402813                 mov     [esp+0D8h+Locale], esi ; Stream
.text:00402817                 mov     [esp+0D8h+Category], eax ; Buffer
.text:0040281A                 call    fputs
.text:0040281F                 mov     [esp+0D8h+Category], offset aZRfc2822StyleN ; "  %z   RFC-2822 style numeric timezone "...
.text:00402826                 call    ds:libintl_gettext
.text:0040282C                 mov     ebx, ds:_iob
.text:00402832                 add     ebx, 20h ; ' '
.text:00402835                 mov     [esp+0D8h+Locale], ebx ; Stream
.text:00402839                 mov     [esp+0D8h+Category], eax ; Buffer
.text:0040283C                 call    fputs
.text:00402841                 mov     [esp+0D8h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402848                 call    ds:libintl_gettext
.text:0040284E                 mov     [esp+0D8h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402856                 mov     [esp+0D8h+Category], eax ; Format
.text:00402859                 call    printf
.text:0040285E                 jmp     loc_402614
.text:00402863 ; ---------------------------------------------------------------------------
.text:00402863
.text:00402863 loc_402863:                             ; CODE XREF: sub_402430+E5↑j
.text:00402863                 cmp     eax, 72h ; 'r'
.text:00402866                 jz      short loc_4028D0
.text:00402868                 cmp     eax, 72h ; 'r'
.text:0040286B                 jg      short loc_402886
.text:0040286D                 cmp     eax, 66h ; 'f'
.text:00402870                 jnz     loc_402544
.text:00402876                 mov     eax, ds:dword_41F530
.text:0040287B                 mov     [ebp+FileName], eax
.text:00402881                 jmp     loc_4024E0
.text:00402886 ; ---------------------------------------------------------------------------
.text:00402886
.text:00402886 loc_402886:                             ; CODE XREF: sub_402430+43B↑j
.text:00402886                 cmp     eax, 73h ; 's'
.text:00402889                 jz      short loc_4028B2
.text:0040288B                 cmp     eax, 75h ; 'u'
.text:0040288E                 jnz     loc_402544
.text:00402894                 mov     [esp+0D8h+Category], offset EnvString ; "TZ=UTC0"
.text:0040289B                 call    sub_40C200
.text:004028A0                 test    eax, eax
.text:004028A2                 jnz     loc_402CD7
.text:004028A8                 call    _tzset
.text:004028AD                 jmp     loc_4024E0
.text:004028B2 ; ---------------------------------------------------------------------------
.text:004028B2
.text:004028B2 loc_4028B2:                             ; CODE XREF: sub_402430+459↑j
.text:004028B2                 mov     [ebp+var_99], 1
.text:004028B9                 mov     eax, ds:dword_41F530
.text:004028BE                 mov     [ebp+var_98], eax
.text:004028C4                 jmp     loc_4024E0
.text:004028C4 ; ---------------------------------------------------------------------------
.text:004028C9                 align 10h
.text:004028D0
.text:004028D0 loc_4028D0:                             ; CODE XREF: sub_402430+436↑j
.text:004028D0                 mov     edx, ds:dword_41F530
.text:004028D6                 mov     [ebp+var_A8], edx
.text:004028DC                 jmp     loc_4024E0
.text:004028E1 ; ---------------------------------------------------------------------------
.text:004028E1
.text:004028E1 loc_4028E1:                             ; CODE XREF: sub_402430+DC↑j
.text:004028E1                 mov     ecx, ds:dword_41F530
.text:004028E7                 mov     dword ptr [ebp+var_94], ecx
.text:004028ED                 jmp     loc_4024E0
.text:004028F2 ; ---------------------------------------------------------------------------
.text:004028F2
.text:004028F2 loc_4028F2:                             ; CODE XREF: sub_402430+D3↑j
.text:004028F2                 mov     ecx, dword_41E010
.text:004028F8                 xor     eax, eax
.text:004028FA                 mov     ebx, [ebp+FileName]
.text:00402900                 sub     edi, ecx
.text:00402902                 cmp     dword ptr [ebp+var_94], 0
.text:00402909                 setnz   al
.text:0040290C                 test    ebx, ebx
.text:0040290E                 jz      short loc_402911
.text:00402910                 inc     eax
.text:00402911
.text:00402911 loc_402911:                             ; CODE XREF: sub_402430+4DE↑j
.text:00402911                 mov     ebx, [ebp+var_A8]
.text:00402917                 mov     edx, eax
.text:00402919                 test    ebx, ebx
.text:0040291B                 jz      short loc_40291E
.text:0040291D                 inc     edx
.text:0040291E
.text:0040291E loc_40291E:                             ; CODE XREF: sub_402430+4EB↑j
.text:0040291E                 cmp     edx, 1
.text:00402921                 jg      loc_402CCB
.text:00402927                 cmp     [ebp+var_99], 0
.text:0040292E                 jz      short loc_402938
.text:00402930                 test    edx, edx
.text:00402932                 jnz     loc_402CBF
.text:00402938
.text:00402938 loc_402938:                             ; CODE XREF: sub_402430+4FE↑j
.text:00402938                 cmp     edi, 1
.text:0040293B                 jg      loc_402C9E
.text:00402941                 cmp     [ebp+var_99], 0
.text:00402948                 jnz     short loc_40294E
.text:0040294A                 test    edx, edx
.text:0040294C                 jz      short loc_402957
.text:0040294E
.text:0040294E loc_40294E:                             ; CODE XREF: sub_402430+518↑j
.text:0040294E                 cmp     edi, 1
.text:00402951                 jz      loc_402C5B
.text:00402957
.text:00402957 loc_402957:                             ; CODE XREF: sub_402430+51C↑j
.text:00402957                                         ; sub_402430+831↓j
.text:00402957                 cmp     ds:byte_41F010, 0
.text:0040295E                 jz      short loc_402971
.text:00402960                 cmp     [ebp+var_99], 0
.text:00402967                 jnz     short loc_40297A
.text:00402969                 test    edi, edi
.text:0040296B                 jg      loc_402C31
.text:00402971
.text:00402971 loc_402971:                             ; CODE XREF: sub_402430+52E↑j
.text:00402971                 cmp     [ebp+var_99], 0
.text:00402978                 jz      short loc_402986
.text:0040297A
.text:0040297A loc_40297A:                             ; CODE XREF: sub_402430+537↑j
.text:0040297A                 mov     ebx, [ebp+var_98]
.text:00402980                 mov     dword ptr [ebp+var_94], ebx
.text:00402986
.text:00402986 loc_402986:                             ; CODE XREF: sub_402430+548↑j
.text:00402986                 mov     ebx, [ebp+FileName]
.text:0040298C                 test    ebx, ebx
.text:0040298E                 jz      short loc_4029C7
.text:00402990                 xor     eax, eax
.text:00402992                 dec     edi
.text:00402993                 jz      short loc_4029C1
.text:00402995
.text:00402995 loc_402995:                             ; CODE XREF: sub_402430+595↓j
.text:00402995                 mov     [esp+0D8h+Locale], eax ; int
.text:00402999                 mov     eax, [ebp+FileName]
.text:0040299F                 mov     [esp+0D8h+Category], eax ; FileName
.text:004029A2                 call    sub_4031F0
.text:004029A7                 mov     [ebp+var_A9], al
.text:004029AD
.text:004029AD loc_4029AD:                             ; CODE XREF: sub_402430+637↓j
.text:004029AD                 xor     ebx, ebx
.text:004029AF                 cmp     [ebp+var_A9], 0
.text:004029B6                 setz    bl
.text:004029B9                 mov     [esp+0D8h+Category], ebx
.text:004029BC                 jmp     loc_402577
.text:004029C1 ; ---------------------------------------------------------------------------
.text:004029C1
.text:004029C1 loc_4029C1:                             ; CODE XREF: sub_402430+563↑j
.text:004029C1                 mov     eax, [esi+ecx*4]
.text:004029C4                 inc     eax
.text:004029C5                 jmp     short loc_402995
.text:004029C7 ; ---------------------------------------------------------------------------
.text:004029C7
.text:004029C7 loc_4029C7:                             ; CODE XREF: sub_402430+55E↑j
.text:004029C7                 mov     [ebp+var_AA], 1
.text:004029CE                 test    edx, edx
.text:004029D0                 mov     [ebp+var_A9], 1
.text:004029D7                 jnz     loc_402B82
.text:004029DD                 cmp     [ebp+var_99], 0
.text:004029E4                 jnz     loc_402B82
.text:004029EA                 cmp     edi, 1
.text:004029ED                 jz      loc_402AF8
.text:004029F3
.text:004029F3 loc_4029F3:                             ; CODE XREF: sub_402430+6CE↓j
.text:004029F3                 mov     [esp+0D8h+Category], offset aUndefined ; "undefined"
.text:004029FA                 lea     ebx, [ebp+var_90]
.text:00402A00                 call    ds:libintl_gettext
.text:00402A06                 mov     [esp+0D8h+Category], ebx
.text:00402A09                 call    sub_406D30
.text:00402A0E                 test    eax, eax
.text:00402A10                 jnz     loc_402AC9
.text:00402A16
.text:00402A16 loc_402A16:                             ; CODE XREF: sub_402430+6C3↓j
.text:00402A16                 xor     eax, eax
.text:00402A18                 dec     edi
.text:00402A19                 mov     [ebp+var_A0], eax
.text:00402A1F                 jz      loc_402AB4
.text:00402A25
.text:00402A25 loc_402A25:                             ; CODE XREF: sub_402430+694↓j
.text:00402A25                                         ; sub_402430+718↓j ...
.text:00402A25                 cmp     [ebp+var_99], 0
.text:00402A2C                 jnz     short loc_402A6C
.text:00402A2E
.text:00402A2E loc_402A2E:                             ; CODE XREF: sub_402430+64C↓j
.text:00402A2E                                         ; sub_402430+67F↓j
.text:00402A2E                 mov     ecx, [ebp+var_90]
.text:00402A34                 xor     ebx, ebx
.text:00402A36                 mov     esi, [ebp+var_8C]
.text:00402A3C                 mov     eax, [ebp+var_A0]
.text:00402A42                 mov     [esp+0D8h+Locale], ecx
.text:00402A46                 mov     [esp+0D8h+var_D0], esi
.text:00402A4A                 mov     [esp+0D8h+Category], eax
.text:00402A4D                 call    sub_402D90
.text:00402A52                 test    al, al
.text:00402A54                 jz      short loc_402A61
.text:00402A56                 cmp     [ebp+var_A9], 0
.text:00402A5D                 jz      short loc_402A61
.text:00402A5F                 mov     bl, 1
.text:00402A61
.text:00402A61 loc_402A61:                             ; CODE XREF: sub_402430+624↑j
.text:00402A61                                         ; sub_402430+62D↑j
.text:00402A61                 mov     [ebp+var_A9], bl
.text:00402A67                 jmp     loc_4029AD
.text:00402A6C ; ---------------------------------------------------------------------------
.text:00402A6C
.text:00402A6C loc_402A6C:                             ; CODE XREF: sub_402430+5FC↑j
.text:00402A6C                 lea     ecx, [ebp+var_90]
.text:00402A72                 mov     [esp+0D8h+Category], ecx
.text:00402A75                 call    sub_406CA0
.text:00402A7A                 test    eax, eax
.text:00402A7C                 jz      short loc_402A2E
.text:00402A7E                 mov     [esp+0D8h+Category], offset aCannotSetDate ; "cannot set date"
.text:00402A85                 call    ds:libintl_gettext
.text:00402A8B                 mov     edi, eax
.text:00402A8D                 call    _errno
.text:00402A92                 mov     [esp+0D8h+var_D0], edi ; char *
.text:00402A96                 mov     edx, [eax]
.text:00402A98                 mov     [esp+0D8h+Category], 0 ; Code
.text:00402A9F                 mov     [esp+0D8h+Locale], edx ; ErrorMessage
.text:00402AA3                 call    sub_40BE20
.text:00402AA8                 mov     [ebp+var_A9], 0
.text:00402AAF                 jmp     loc_402A2E
.text:00402AB4 ; ---------------------------------------------------------------------------
.text:00402AB4
.text:00402AB4 loc_402AB4:                             ; CODE XREF: sub_402430+5EF↑j
.text:00402AB4                 mov     ecx, dword_41E010
.text:00402ABA                 mov     edi, [esi+ecx*4]
.text:00402ABD                 inc     edi
.text:00402ABE                 mov     [ebp+var_A0], edi
.text:00402AC4                 jmp     loc_402A25
.text:00402AC9 ; ---------------------------------------------------------------------------
.text:00402AC9
.text:00402AC9 loc_402AC9:                             ; CODE XREF: sub_402430+5E0↑j
.text:00402AC9                 mov     [esp+0D8h+Category], offset aCannotGetTimeO ; "cannot get time of day"
.text:00402AD0                 call    ds:libintl_gettext
.text:00402AD6                 mov     ebx, eax
.text:00402AD8                 call    _errno
.text:00402ADD                 mov     [esp+0D8h+var_D0], ebx ; char *
.text:00402AE1                 mov     edx, [eax]
.text:00402AE3                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402AEA                 mov     [esp+0D8h+Locale], edx ; ErrorMessage
.text:00402AEE                 call    sub_40BE20
.text:00402AF3                 jmp     loc_402A16
.text:00402AF8 ; ---------------------------------------------------------------------------
.text:00402AF8
.text:00402AF8 loc_402AF8:                             ; CODE XREF: sub_402430+5BD↑j
.text:00402AF8                 mov     eax, [esi+ecx*4]
.text:00402AFB                 cmp     byte ptr [eax], 2Bh ; '+'
.text:00402AFE                 jz      loc_4029F3
.text:00402B04                 mov     [ebp+var_99], 1
.text:00402B0B                 lea     ecx, [ebp+var_90]
.text:00402B11                 xor     esi, esi
.text:00402B13                 mov     dword ptr [ebp+var_94], eax
.text:00402B19                 mov     [esp+0D8h+var_D0], 0Eh ; int
.text:00402B21                 mov     [esp+0D8h+Locale], eax ; char *
.text:00402B25                 mov     [esp+0D8h+Category], ecx ; int
.text:00402B28                 call    sub_406DB0
.text:00402B2D                 mov     [ebp+var_AA], al
.text:00402B33                 xor     edx, edx
.text:00402B35                 mov     [ebp+var_8C], edx
.text:00402B3B                 mov     [ebp+var_A0], esi
.text:00402B41
.text:00402B41 loc_402B41:                             ; CODE XREF: sub_402430+793↓j
.text:00402B41                                         ; sub_402430+7A9↓j
.text:00402B41                 cmp     [ebp+var_AA], 0
.text:00402B48                 jnz     loc_402A25
.text:00402B4E                 mov     [esp+0D8h+Category], offset aInvalidDateS ; "invalid date `%s'"
.text:00402B55                 call    ds:libintl_gettext
.text:00402B5B                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00402B63                 mov     esi, dword ptr [ebp+var_94]
.text:00402B69                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402B70                 mov     dword ptr [esp+0D8h+var_CC], esi ; char
.text:00402B74                 mov     [esp+0D8h+var_D0], eax ; char *
.text:00402B78                 call    sub_40BE20
.text:00402B7D                 jmp     loc_402A25
.text:00402B82 ; ---------------------------------------------------------------------------
.text:00402B82
.text:00402B82 loc_402B82:                             ; CODE XREF: sub_402430+5A7↑j
.text:00402B82                                         ; sub_402430+5B4↑j
.text:00402B82                 mov     ebx, [ebp+var_A8]
.text:00402B88                 test    ebx, ebx
.text:00402B8A                 jz      short loc_402C09
.text:00402B8C                 mov     edx, [ebp+var_A8]
.text:00402B92                 lea     ecx, [ebp+var_88]
.text:00402B98                 mov     [esp+0D8h+Locale], ecx ; int
.text:00402B9C                 mov     [esp+0D8h+Category], edx ; char *
.text:00402B9F                 call    sub_40C0C0
.text:00402BA4                 test    eax, eax
.text:00402BA6                 jnz     short loc_402BDE
.text:00402BA8
.text:00402BA8 loc_402BA8:                             ; CODE XREF: sub_402430+7D7↓j
.text:00402BA8                 mov     ebx, [ebp+var_48]
.text:00402BAB                 mov     edx, [ebp+var_44]
.text:00402BAE                 mov     [ebp+var_90], ebx
.text:00402BB4                 mov     [ebp+var_8C], edx
.text:00402BBA
.text:00402BBA loc_402BBA:                             ; CODE XREF: sub_402430+7FF↓j
.text:00402BBA                 xor     edx, edx
.text:00402BBC                 dec     edi
.text:00402BBD                 mov     [ebp+var_A0], edx
.text:00402BC3                 jnz     loc_402B41
.text:00402BC9                 mov     ebx, dword_41E010
.text:00402BCF                 mov     edi, [esi+ebx*4]
.text:00402BD2                 inc     edi
.text:00402BD3                 mov     [ebp+var_A0], edi
.text:00402BD9                 jmp     loc_402B41
.text:00402BDE ; ---------------------------------------------------------------------------
.text:00402BDE
.text:00402BDE loc_402BDE:                             ; CODE XREF: sub_402430+776↑j
.text:00402BDE                 call    _errno
.text:00402BE3                 mov     [esp+0D8h+var_D0], offset aS ; "%s"
.text:00402BEB                 mov     ecx, [ebp+var_A8]
.text:00402BF1                 mov     dword ptr [esp+0D8h+var_CC], ecx ; char
.text:00402BF5                 mov     ebx, [eax]
.text:00402BF7                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402BFE                 mov     [esp+0D8h+Locale], ebx ; ErrorMessage
.text:00402C02                 call    sub_40BE20
.text:00402C07                 jmp     short loc_402BA8
.text:00402C09 ; ---------------------------------------------------------------------------
.text:00402C09
.text:00402C09 loc_402C09:                             ; CODE XREF: sub_402430+75A↑j
.text:00402C09                 mov     [esp+0D8h+var_D0], 0 ; __time32_t *
.text:00402C11                 mov     ecx, dword ptr [ebp+var_94]
.text:00402C17                 lea     eax, [ebp+var_90]
.text:00402C1D                 mov     [esp+0D8h+Category], eax ; int
.text:00402C20                 mov     [esp+0D8h+Locale], ecx ; int
.text:00402C24                 call    sub_4097F0
.text:00402C29                 mov     [ebp+var_AA], al
.text:00402C2F                 jmp     short loc_402BBA
.text:00402C31 ; ---------------------------------------------------------------------------
.text:00402C31
.text:00402C31 loc_402C31:                             ; CODE XREF: sub_402430+53B↑j
.text:00402C31                 mov     [esp+0D8h+Category], offset aAFormatStringM ; "a format string may not be specified wh"...
.text:00402C38
.text:00402C38 loc_402C38:                             ; CODE XREF: sub_402430+896↓j
.text:00402C38                                         ; sub_402430+8A2↓j
.text:00402C38                 call    ds:libintl_gettext
.text:00402C3E                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00402C46                 mov     [esp+0D8h+Category], 0 ; Code
.text:00402C4D                 mov     [esp+0D8h+var_D0], eax ; char *
.text:00402C51                 call    sub_40BE20
.text:00402C56                 jmp     loc_402544
.text:00402C5B ; ---------------------------------------------------------------------------
.text:00402C5B
.text:00402C5B loc_402C5B:                             ; CODE XREF: sub_402430+521↑j
.text:00402C5B                 mov     ebx, [esi+ecx*4]
.text:00402C5E                 cmp     byte ptr [ebx], 2Bh ; '+'
.text:00402C61                 jz      loc_402957
.text:00402C67                 mov     [esp+0D8h+Category], offset aTheArgumentSLa ; "the argument `%s' lacks a leading `+';"...
.text:00402C6E                 call    ds:libintl_gettext
.text:00402C74                 mov     edi, dword_41E010
.text:00402C7A                 mov     ecx, [esi+edi*4]
.text:00402C7D                 mov     dword ptr [esp+0D8h+var_CC], ecx ; char
.text:00402C81
.text:00402C81 loc_402C81:                             ; CODE XREF: sub_402430+88D↓j
.text:00402C81                 mov     [esp+0D8h+var_D0], eax ; char *
.text:00402C85                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00402C8D                 mov     [esp+0D8h+Category], 0 ; Code
.text:00402C94                 call    sub_40BE20
.text:00402C99                 jmp     loc_402544
.text:00402C9E ; ---------------------------------------------------------------------------
.text:00402C9E
.text:00402C9E loc_402C9E:                             ; CODE XREF: sub_402430+50B↑j
.text:00402C9E                 mov     edx, [esi+ecx*4+4]
.text:00402CA2                 mov     [esp+0D8h+Category], edx ; char *
.text:00402CA5                 call    sub_40A8E0
.text:00402CAA                 mov     [esp+0D8h+Category], offset aExtraOperandS ; "extra operand %s"
.text:00402CB1                 mov     esi, eax
.text:00402CB3                 call    ds:libintl_gettext
.text:00402CB9                 mov     dword ptr [esp+0D8h+var_CC], esi
.text:00402CBD                 jmp     short loc_402C81
.text:00402CBF ; ---------------------------------------------------------------------------
.text:00402CBF
.text:00402CBF loc_402CBF:                             ; CODE XREF: sub_402430+502↑j
.text:00402CBF                 mov     [esp+0D8h+Category], offset aTheOptionsToPr ; "the options to print and set the time m"...
.text:00402CC6                 jmp     loc_402C38
.text:00402CCB ; ---------------------------------------------------------------------------
.text:00402CCB
.text:00402CCB loc_402CCB:                             ; CODE XREF: sub_402430+4F1↑j
.text:00402CCB                 mov     [esp+0D8h+Category], offset aTheOptionsToSp ; "the options to specify dates for printi"...
.text:00402CD2                 jmp     loc_402C38
.text:00402CD7 ; ---------------------------------------------------------------------------
.text:00402CD7
.text:00402CD7 loc_402CD7:                             ; CODE XREF: sub_402430+472↑j
.text:00402CD7                 call    sub_407690
.text:00402CD7 sub_402430      endp
.text:00402CD7
.text:00402CD7 ; ---------------------------------------------------------------------------
.text:00402CDC aYMD            db '%Y-%m-%d',0         ; DATA XREF: .text:00402D30↓o
.text:00402CE5 aYMDtHZ         db '%Y-%m-%dT%H%z',0    ; DATA XREF: .text:00402D34↓o
.text:00402CF3 aYMDtHMZ        db '%Y-%m-%dT%H:%M%z',0 ; DATA XREF: .text:00402D38↓o
.text:00402D04 aYMDtHMSZ       db '%Y-%m-%dT%H:%M:%S%z',0
.text:00402D04                                         ; DATA XREF: .text:00402D3C↓o
.text:00402D18 dword_402D18    dd 252D5925h, 64252D6Dh, 3A482554h, 253A4D25h, 4E252C53h
.text:00402D18                                         ; DATA XREF: .text:00402D40↓o
.text:00402D2C dword_402D2C    dd 90007A25h            ; DATA XREF: sub_402D90+190↓r
.text:00402D30                 dd offset aYMD          ; "%Y-%m-%d"
.text:00402D34                 dd offset aYMDtHZ       ; "%Y-%m-%dT%H%z"
.text:00402D38                 dd offset aYMDtHMZ      ; "%Y-%m-%dT%H:%M%z"
.text:00402D3C                 dd offset aYMDtHMSZ     ; "%Y-%m-%dT%H:%M:%S%z"
.text:00402D40                 dd offset dword_402D18
.text:00402D44 ; const char byte_402D44[2]
.text:00402D44 byte_402D44     db 43h, 0               ; DATA XREF: sub_402D90:loc_402E87↓o
.text:00402D46 aTimeSIsOutOfRa db 'time %s is out of range',0
.text:00402D46                                         ; DATA XREF: sub_402D90+129↓o
.text:00402D5E aADBYHMSZ       db '%a, %d %b %Y %H:%M:%S %z',0
.text:00402D5E                                         ; DATA XREF: sub_402D90+17D↓o
.text:00402D77 aABEHMSZY       db '%a %b %e %H:%M:%S %Z %Y',0
.text:00402D77                                         ; DATA XREF: sub_402D90:loc_402F44↓o
.text:00402D8F                 align 10h
.text:00402D90
.text:00402D90 ; =============== S U B R O U T I N E =======================================
.text:00402D90
.text:00402D90
.text:00402D90 sub_402D90      proc near               ; CODE XREF: sub_402430+61D↑p
.text:00402D90                                         ; sub_4031F0+100↓p
.text:00402D90
.text:00402D90 Time            = dword ptr -6Ch
.text:00402D90 Locale          = dword ptr -68h
.text:00402D90 var_64          = dword ptr -64h
.text:00402D90 var_60          = dword ptr -60h
.text:00402D90 var_5C          = dword ptr -5Ch
.text:00402D90 var_58          = dword ptr -58h
.text:00402D90 var_49          = byte ptr -49h
.text:00402D90 var_48          = dword ptr -48h
.text:00402D90 var_44          = dword ptr -44h
.text:00402D90 var_40          = dword ptr -40h
.text:00402D90 Buffer          = byte ptr -3Ch
.text:00402D90 arg_0           = dword ptr  4
.text:00402D90 arg_4           = dword ptr  8
.text:00402D90 arg_8           = dword ptr  0Ch
.text:00402D90
.text:00402D90                 push    ebp
.text:00402D91                 push    edi
.text:00402D92                 push    esi
.text:00402D93                 push    ebx
.text:00402D94                 sub     esp, 5Ch
.text:00402D97                 xor     ebx, ebx
.text:00402D99                 mov     [esp+6Ch+var_48], 0
.text:00402DA1                 mov     esi, [esp+6Ch+arg_0]
.text:00402DA5                 mov     edx, [esp+6Ch+arg_4]
.text:00402DA9                 mov     ecx, [esp+6Ch+arg_8]
.text:00402DAD                 test    esi, esi
.text:00402DAF                 mov     [esp+6Ch+var_44], edx
.text:00402DB3                 mov     [esp+6Ch+var_40], ecx
.text:00402DB7                 jz      loc_402F04
.text:00402DBD                 cmp     byte ptr [esi], 0
.text:00402DC0                 jz      loc_402EF3
.text:00402DC6
.text:00402DC6 loc_402DC6:                             ; CODE XREF: sub_402D90+182↓j
.text:00402DC6                                         ; sub_402D90+197↓j ...
.text:00402DC6                 lea     ebp, [esp+6Ch+var_44]
.text:00402DCA                 mov     [esp+6Ch+Time], ebp ; Time
.text:00402DCD                 call    localtime
.text:00402DD2                 test    eax, eax
.text:00402DD4                 mov     edi, eax
.text:00402DD6                 jz      loc_402EA0
.text:00402DDC                 lea     esi, [esi+0]
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402D90+C2↓j
.text:00402DE0                 mov     [esp+6Ch+Time], ebx ; void *
.text:00402DE3                 lea     ecx, [esp+6Ch+var_48]
.text:00402DE7                 mov     [esp+6Ch+var_64], 1 ; int
.text:00402DEF                 mov     [esp+6Ch+Locale], ecx ; int
.text:00402DF3                 call    sub_406A10
.text:00402DF8                 mov     byte ptr [eax], 1
.text:00402DFB                 mov     ebx, eax
.text:00402DFD                 cmp     ds:byte_41F010, 0
.text:00402E04                 jnz     loc_402E87
.text:00402E0A
.text:00402E0A loc_402E0A:                             ; CODE XREF: sub_402D90+10B↓j
.text:00402E0A                 mov     [esp+6Ch+var_49], 0
.text:00402E0F                 mov     ecx, [ebp+4]
.text:00402E12                 mov     edx, [esp+6Ch+var_48]
.text:00402E16                 mov     [esp+6Ch+var_5C], 0 ; int
.text:00402E1E                 mov     [esp+6Ch+var_58], ecx ; int
.text:00402E22                 mov     [esp+6Ch+var_60], edi ; struct tm *
.text:00402E26                 mov     [esp+6Ch+var_64], esi ; char *
.text:00402E2A                 mov     [esp+6Ch+Locale], edx ; int
.text:00402E2E                 mov     [esp+6Ch+Time], ebx ; int
.text:00402E31                 call    sub_403410
.text:00402E36                 test    eax, eax
.text:00402E38                 jnz     short loc_402E3F
.text:00402E3A                 cmp     byte ptr [ebx], 0
.text:00402E3D                 jnz     short loc_402E44
.text:00402E3F
.text:00402E3F loc_402E3F:                             ; CODE XREF: sub_402D90+A8↑j
.text:00402E3F                 mov     [esp+6Ch+var_49], 1
.text:00402E44
.text:00402E44 loc_402E44:                             ; CODE XREF: sub_402D90+AD↑j
.text:00402E44                 cmp     ds:byte_41F010, 0
.text:00402E4B                 jnz     short loc_402E71
.text:00402E4D
.text:00402E4D loc_402E4D:                             ; CODE XREF: sub_402D90+F5↓j
.text:00402E4D                 cmp     [esp+6Ch+var_49], 0
.text:00402E52                 jz      short loc_402DE0
.text:00402E54                 mov     [esp+6Ch+Time], ebx ; Buffer
.text:00402E57                 call    puts
.text:00402E5C                 mov     [esp+6Ch+Time], ebx ; Block
.text:00402E5F                 call    free
.text:00402E64
.text:00402E64 loc_402E64:                             ; CODE XREF: sub_402D90+16F↓j
.text:00402E64                 mov     eax, 1
.text:00402E69
.text:00402E69 loc_402E69:                             ; CODE XREF: sub_402D90+15E↓j
.text:00402E69                 add     esp, 5Ch
.text:00402E6C                 pop     ebx
.text:00402E6D                 pop     esi
.text:00402E6E                 pop     edi
.text:00402E6F                 pop     ebp
.text:00402E70                 retn
.text:00402E71 ; ---------------------------------------------------------------------------
.text:00402E71
.text:00402E71 loc_402E71:                             ; CODE XREF: sub_402D90+BB↑j
.text:00402E71                 mov     [esp+6Ch+Locale], offset Locale ; Locale
.text:00402E79                 mov     [esp+6Ch+Time], 0 ; Category
.text:00402E80                 call    setlocale
.text:00402E85                 jmp     short loc_402E4D
.text:00402E87 ; ---------------------------------------------------------------------------
.text:00402E87
.text:00402E87 loc_402E87:                             ; CODE XREF: sub_402D90+74↑j
.text:00402E87                 mov     [esp+6Ch+Locale], offset byte_402D44 ; Locale
.text:00402E8F                 mov     [esp+6Ch+Time], 0 ; Category
.text:00402E96                 call    setlocale
.text:00402E9B                 jmp     loc_402E0A
.text:00402EA0 ; ---------------------------------------------------------------------------
.text:00402EA0
.text:00402EA0 loc_402EA0:                             ; CODE XREF: sub_402D90+46↑j
.text:00402EA0                 mov     eax, [esp+6Ch+var_44]
.text:00402EA4                 lea     edi, [esp+6Ch+Buffer]
.text:00402EA8                 mov     [esp+6Ch+var_64], edi
.text:00402EAC                 cdq
.text:00402EAD                 mov     [esp+6Ch+Locale], edx
.text:00402EB1                 mov     [esp+6Ch+Time], eax
.text:00402EB4                 call    sub_406BE0
.text:00402EB9                 mov     [esp+6Ch+Time], offset aTimeSIsOutOfRa ; "time %s is out of range"
.text:00402EC0                 mov     esi, eax
.text:00402EC2                 call    ds:libintl_gettext
.text:00402EC8                 mov     [esp+6Ch+var_60], esi ; char
.text:00402ECC                 mov     [esp+6Ch+Locale], 0 ; ErrorMessage
.text:00402ED4                 mov     [esp+6Ch+Time], 0 ; Code
.text:00402EDB                 mov     [esp+6Ch+var_64], eax ; char *
.text:00402EDF                 call    sub_40BE20
.text:00402EE4                 mov     [esp+6Ch+Time], edi ; Buffer
.text:00402EE7                 call    puts
.text:00402EEC                 xor     eax, eax
.text:00402EEE                 jmp     loc_402E69
.text:00402EF3 ; ---------------------------------------------------------------------------
.text:00402EF3
.text:00402EF3 loc_402EF3:                             ; CODE XREF: sub_402D90+30↑j
.text:00402EF3                 mov     [esp+6Ch+Time], 0Ah ; Character
.text:00402EFA                 call    putchar
.text:00402EFF                 jmp     loc_402E64
.text:00402F04 ; ---------------------------------------------------------------------------
.text:00402F04
.text:00402F04 loc_402F04:                             ; CODE XREF: sub_402D90+27↑j
.text:00402F04                 cmp     ds:byte_41F010, 0
.text:00402F0B                 jz      short loc_402F17
.text:00402F0D                 mov     esi, offset aADBYHMSZ ; "%a, %d %b %Y %H:%M:%S %z"
.text:00402F12                 jmp     loc_402DC6
.text:00402F17 ; ---------------------------------------------------------------------------
.text:00402F17
.text:00402F17 loc_402F17:                             ; CODE XREF: sub_402D90+17B↑j
.text:00402F17                 mov     eax, ds:dword_41F000
.text:00402F1C                 test    eax, eax
.text:00402F1E                 jz      short loc_402F2C
.text:00402F20                 mov     esi, ds:dword_402D2C[eax*4]
.text:00402F27                 jmp     loc_402DC6
.text:00402F2C ; ---------------------------------------------------------------------------
.text:00402F2C
.text:00402F2C loc_402F2C:                             ; CODE XREF: sub_402D90+18E↑j
.text:00402F2C                 mov     [esp+6Ch+Time], 2006Ch
.text:00402F33                 call    sub_40C1C0
.text:00402F38                 cmp     byte ptr [eax], 0
.text:00402F3B                 jz      short loc_402F44
.text:00402F3D                 mov     esi, eax
.text:00402F3F                 jmp     loc_402DC6
.text:00402F44 ; ---------------------------------------------------------------------------
.text:00402F44
.text:00402F44 loc_402F44:                             ; CODE XREF: sub_402D90+1AB↑j
.text:00402F44                 mov     esi, offset aABEHMSZY ; "%a %b %e %H:%M:%S %Z %Y"
.text:00402F49                 jmp     loc_402DC6
.text:00402F49 sub_402D90      endp
.text:00402F49
.text:00402F49 ; ---------------------------------------------------------------------------
.text:00402F4E                 align 10h
.text:00402F50
.text:00402F50 ; =============== S U B R O U T I N E =======================================
.text:00402F50
.text:00402F50 ; Attributes: noreturn
.text:00402F50
.text:00402F50 ; void __cdecl __noreturn sub_402F50(int Code)
.text:00402F50 sub_402F50      proc near               ; CODE XREF: sub_4068F0+A↓p
.text:00402F50
.text:00402F50 Stream          = dword ptr -1Ch
.text:00402F50 Format          = dword ptr -18h
.text:00402F50 var_14          = dword ptr -14h
.text:00402F50 Code            = dword ptr  4
.text:00402F50
.text:00402F50                 push    ebx
.text:00402F51                 sub     esp, 18h
.text:00402F54                 mov     ebx, [esp+1Ch+Code]
.text:00402F58                 test    ebx, ebx
.text:00402F5A                 jz      short loc_402F90
.text:00402F5C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402F63                 call    ds:libintl_gettext
.text:00402F69                 mov     edx, ds:_iob
.text:00402F6F                 mov     ecx, ds:dword_41F510
.text:00402F75                 add     edx, 40h ; '@'
.text:00402F78                 mov     [esp+1Ch+var_14], ecx
.text:00402F7C                 mov     [esp+1Ch+Format], eax ; Format
.text:00402F80                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00402F83                 call    fprintf
.text:00402F88
.text:00402F88 loc_402F88:                             ; CODE XREF: sub_402F50+27E↓j
.text:00402F88                 mov     [esp+1Ch+Stream], ebx ; Code
.text:00402F8B                 call    exit
.text:00402F90 ; ---------------------------------------------------------------------------
.text:00402F90
.text:00402F90 loc_402F90:                             ; CODE XREF: sub_402F50+A↑j
.text:00402F90                 mov     [esp+1Ch+Stream], offset aUsageSOptionFo ; "Usage: %s [OPTION]... [+FORMAT]\n  or: "...
.text:00402F97                 call    ds:libintl_gettext
.text:00402F9D                 mov     ecx, ds:dword_41F510
.text:00402FA3                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402FA6                 mov     [esp+1Ch+var_14], ecx
.text:00402FAA                 mov     [esp+1Ch+Format], ecx
.text:00402FAE                 call    printf
.text:00402FB3                 mov     [esp+1Ch+Stream], offset aDisplayTheCurr ; "Display the current time in the given F"...
.text:00402FBA                 call    ds:libintl_gettext
.text:00402FC0                 mov     ecx, ds:_iob
.text:00402FC6                 add     ecx, 20h ; ' '
.text:00402FC9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402FCD                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402FD0                 call    fputs
.text:00402FD5                 mov     [esp+1Ch+Stream], offset aRReferenceFile ; "  -r, --reference=FILE      display the"...
.text:00402FDC                 call    ds:libintl_gettext
.text:00402FE2                 mov     ecx, ds:_iob
.text:00402FE8                 add     ecx, 20h ; ' '
.text:00402FEB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402FEF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402FF2                 call    fputs
.text:00402FF7                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402FFE                 call    ds:libintl_gettext
.text:00403004                 mov     ecx, ds:_iob
.text:0040300A                 add     ecx, 20h ; ' '
.text:0040300D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403011                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403014                 call    fputs
.text:00403019                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00403020                 call    ds:libintl_gettext
.text:00403026                 mov     ecx, ds:_iob
.text:0040302C                 add     ecx, 20h ; ' '
.text:0040302F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403033                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403036                 call    fputs
.text:0040303B                 mov     [esp+1Ch+Stream], offset aFormatControls ; "\nFORMAT controls the output.  The only"...
.text:00403042                 call    ds:libintl_gettext
.text:00403048                 mov     ecx, ds:_iob
.text:0040304E                 add     ecx, 20h ; ' '
.text:00403051                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403055                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403058                 call    fputs
.text:0040305D                 mov     [esp+1Ch+Stream], offset aALocaleSFullWe ; "  %A   locale's full weekday name, vari"...
.text:00403064                 call    ds:libintl_gettext
.text:0040306A                 mov     ecx, ds:_iob
.text:00403070                 add     ecx, 20h ; ' '
.text:00403073                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403077                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040307A                 call    fputs
.text:0040307F                 mov     [esp+1Ch+Stream], offset aCCenturyYearDi ; "  %C   century (year divided by 100 and"...
.text:00403086                 call    ds:libintl_gettext
.text:0040308C                 mov     ecx, ds:_iob
.text:00403092                 add     ecx, 20h ; ' '
.text:00403095                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403099                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040309C                 call    fputs
.text:004030A1                 mov     [esp+1Ch+Stream], offset aFSameAsYMDGThe ; "  %F   same as %Y-%m-%d\n  %g   the 2-d"...
.text:004030A8                 call    ds:libintl_gettext
.text:004030AE                 mov     ecx, ds:_iob
.text:004030B4                 add     ecx, 20h ; ' '
.text:004030B7                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004030BB                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004030BE                 call    fputs
.text:004030C3                 mov     [esp+1Ch+Stream], offset aHSameAsBHHour0 ; "  %h   same as %b\n  %H   hour (00..23)"...
.text:004030CA                 call    ds:libintl_gettext
.text:004030D0                 mov     ecx, ds:_iob
.text:004030D6                 add     ecx, 20h ; ' '
.text:004030D9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004030DD                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004030E0                 call    fputs
.text:004030E5                 mov     [esp+1Ch+Stream], offset aKHour023LHour1 ; "  %k   hour ( 0..23)\n  %l   hour ( 1.."...
.text:004030EC                 call    ds:libintl_gettext
.text:004030F2                 mov     ecx, ds:_iob
.text:004030F8                 add     ecx, 20h ; ' '
.text:004030FB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004030FF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403102                 call    fputs
.text:00403107                 mov     [esp+1Ch+Stream], offset aNANewlineNNano ; "  %n   a newline\n  %N   nanoseconds (0"...
.text:0040310E                 call    ds:libintl_gettext
.text:00403114                 mov     ecx, ds:_iob
.text:0040311A                 add     ecx, 20h ; ' '
.text:0040311D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403121                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403124                 call    fputs
.text:00403129                 mov     [esp+1Ch+Stream], offset aSSecond0060The ; "  %S   second (00..60); the 60 is neces"...
.text:00403130                 call    ds:libintl_gettext
.text:00403136                 mov     ecx, ds:_iob
.text:0040313C                 add     ecx, 20h ; ' '
.text:0040313F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403143                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403146                 call    fputs
.text:0040314B                 mov     [esp+1Ch+Stream], offset aUWeekNumberOfY ; "  %U   week number of year with Sunday "...
.text:00403152                 call    ds:libintl_gettext
.text:00403158                 mov     ecx, ds:_iob
.text:0040315E                 add     ecx, 20h ; ' '
.text:00403161                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403165                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403168                 call    fputs
.text:0040316D                 mov     [esp+1Ch+Stream], offset aXLocaleSDateRe ; "  %x   locale's date representation (mm"...
.text:00403174                 call    ds:libintl_gettext
.text:0040317A                 mov     ecx, ds:_iob
.text:00403180                 add     ecx, 20h ; ' '
.text:00403183                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403187                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040318A                 call    fputs
.text:0040318F                 mov     [esp+1Ch+Stream], offset aZRfc2822StyleN ; "  %z   RFC-2822 style numeric timezone "...
.text:00403196                 call    ds:libintl_gettext
.text:0040319C                 mov     ecx, ds:_iob
.text:004031A2                 add     ecx, 20h ; ' '
.text:004031A5                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004031A9                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004031AC                 call    fputs
.text:004031B1                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004031B8                 call    ds:libintl_gettext
.text:004031BE                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004031C6                 mov     [esp+1Ch+Stream], eax ; Format
.text:004031C9                 call    printf
.text:004031CE                 jmp     loc_402F88
.text:004031CE sub_402F50      endp
.text:004031CE
.text:004031CE ; ---------------------------------------------------------------------------
.text:004031D3 byte_4031D3     db 2Dh                  ; DATA XREF: sub_4031F0+7↓o
.text:004031D4                 db 0
.text:004031D5 aStandardInput  db 'standard input',0   ; DATA XREF: sub_4031F0+1E↓o
.text:004031E4 ; const char aR[]
.text:004031E4 aR              db 'r',0                ; DATA XREF: sub_4031F0:loc_403376↓o
.text:004031E6                 align 10h
.text:004031F0
.text:004031F0 ; =============== S U B R O U T I N E =======================================
.text:004031F0
.text:004031F0
.text:004031F0 ; int __cdecl sub_4031F0(char *FileName, int)
.text:004031F0 sub_4031F0      proc near               ; CODE XREF: sub_402430+572↑p
.text:004031F0
.text:004031F0 Stream          = dword ptr -3Ch
.text:004031F0 Mode            = dword ptr -38h
.text:004031F0 File            = dword ptr -34h
.text:004031F0 var_30          = byte ptr -30h
.text:004031F0 var_25          = byte ptr -25h
.text:004031F0 var_24          = dword ptr -24h
.text:004031F0 var_20          = dword ptr -20h
.text:004031F0 Block           = dword ptr -1Ch
.text:004031F0 var_18          = dword ptr -18h
.text:004031F0 FileName        = dword ptr  4
.text:004031F0 arg_4           = dword ptr  8
.text:004031F0
.text:004031F0                 push    ebp
.text:004031F1                 mov     ecx, 2
.text:004031F6                 push    edi
.text:004031F7                 mov     edi, offset byte_4031D3
.text:004031FC                 push    esi
.text:004031FD                 push    ebx
.text:004031FE                 sub     esp, 2Ch
.text:00403201                 mov     esi, [esp+3Ch+FileName]
.text:00403205                 cld
.text:00403206                 repe cmpsb
.text:00403208                 jnz     loc_403376
.text:0040320E                 mov     [esp+3Ch+Stream], offset aStandardInput ; "standard input"
.text:00403215                 call    ds:libintl_gettext
.text:0040321B                 mov     esi, ds:_iob
.text:00403221                 mov     [esp+3Ch+FileName], eax
.text:00403225
.text:00403225 loc_403225:                             ; CODE XREF: sub_4031F0+19E↓j
.text:00403225                                         ; sub_4031F0+1D5↓j
.text:00403225                 mov     [esp+3Ch+Block], 0
.text:0040322D                 lea     ebp, [esp+3Ch+var_18]
.text:00403231                 lea     edi, [esp+3Ch+Block]
.text:00403235                 mov     [esp+3Ch+var_18], 0
.text:0040323D                 mov     [esp+3Ch+var_25], 1
.text:00403242                 lea     esi, [esi+0]
.text:00403249                 lea     edi, [edi+0]
.text:00403250
.text:00403250 loc_403250:                             ; CODE XREF: sub_4031F0+D7↓j
.text:00403250                                         ; sub_4031F0+124↓j
.text:00403250                 mov     [esp+3Ch+File], esi ; File
.text:00403254                 mov     [esp+3Ch+Mode], ebp ; int
.text:00403258                 mov     [esp+3Ch+Stream], edi ; int
.text:0040325B                 call    sub_40C250
.text:00403260                 test    eax, eax
.text:00403262                 mov     ebx, eax
.text:00403264                 js      loc_403319
.text:0040326A                 mov     [esp+3Ch+File], 0 ; __time32_t *
.text:00403272                 mov     ecx, [esp+3Ch+Block]
.text:00403276                 lea     edx, [esp+3Ch+var_24]
.text:0040327A                 mov     [esp+3Ch+Stream], edx ; int
.text:0040327D                 mov     [esp+3Ch+Mode], ecx ; int
.text:00403281                 call    sub_4097F0
.text:00403286                 test    al, al
.text:00403288                 jnz     short loc_4032D7
.text:0040328A                 mov     eax, [esp+3Ch+Block]
.text:0040328E                 cmp     byte ptr [ebx+eax-1], 0Ah
.text:00403293                 jz      short loc_4032D0
.text:00403295
.text:00403295 loc_403295:                             ; CODE XREF: sub_4031F0+E5↓j
.text:00403295                 mov     [esp+3Ch+Stream], offset aInvalidDateS ; "invalid date `%s'"
.text:0040329C                 call    ds:libintl_gettext
.text:004032A2                 mov     [esp+3Ch+Mode], 0 ; ErrorMessage
.text:004032AA                 mov     ebx, [esp+3Ch+Block]
.text:004032AE                 mov     [esp+3Ch+Stream], 0 ; Code
.text:004032B5                 mov     dword ptr [esp+3Ch+var_30], ebx ; char
.text:004032B9                 mov     [esp+3Ch+File], eax ; char *
.text:004032BD                 call    sub_40BE20
.text:004032C2                 mov     [esp+3Ch+var_25], 0
.text:004032C7                 jmp     short loc_403250
.text:004032C7 ; ---------------------------------------------------------------------------
.text:004032C9                 align 10h
.text:004032D0
.text:004032D0 loc_4032D0:                             ; CODE XREF: sub_4031F0+A3↑j
.text:004032D0                 mov     byte ptr [ebx+eax-1], 0
.text:004032D5                 jmp     short loc_403295
.text:004032D7 ; ---------------------------------------------------------------------------
.text:004032D7
.text:004032D7 loc_4032D7:                             ; CODE XREF: sub_4031F0+98↑j
.text:004032D7                 mov     edx, [esp+3Ch+var_24]
.text:004032DB                 xor     ebx, ebx
.text:004032DD                 mov     ecx, [esp+3Ch+var_20]
.text:004032E1                 mov     [esp+3Ch+Mode], edx
.text:004032E5                 mov     edx, [esp+3Ch+arg_4]
.text:004032E9                 mov     [esp+3Ch+File], ecx
.text:004032ED                 mov     [esp+3Ch+Stream], edx
.text:004032F0                 call    sub_402D90
.text:004032F5                 test    al, al
.text:004032F7                 jz      short loc_403310
.text:004032F9                 cmp     [esp+3Ch+var_25], 0
.text:004032FE                 jz      short loc_403310
.text:00403300                 mov     bl, 1
.text:00403302                 lea     esi, [esi+0]
.text:00403309                 lea     edi, [edi+0]
.text:00403310
.text:00403310 loc_403310:                             ; CODE XREF: sub_4031F0+107↑j
.text:00403310                                         ; sub_4031F0+10E↑j
.text:00403310                 mov     [esp+3Ch+var_25], bl
.text:00403314                 jmp     loc_403250
.text:00403319 ; ---------------------------------------------------------------------------
.text:00403319
.text:00403319 loc_403319:                             ; CODE XREF: sub_4031F0+74↑j
.text:00403319                 mov     [esp+3Ch+Stream], esi ; Stream
.text:0040331C                 call    fclose
.text:00403321                 inc     eax
.text:00403322                 jz      short loc_403343
.text:00403324
.text:00403324 loc_403324:                             ; CODE XREF: sub_4031F0+184↓j
.text:00403324                 mov     eax, [esp+3Ch+Block]
.text:00403328                 test    eax, eax
.text:0040332A                 jnz     short loc_403339
.text:0040332C
.text:0040332C loc_40332C:                             ; CODE XREF: sub_4031F0+151↓j
.text:0040332C                 movzx   eax, [esp+3Ch+var_25]
.text:00403331                 add     esp, 2Ch
.text:00403334                 pop     ebx
.text:00403335                 pop     esi
.text:00403336                 pop     edi
.text:00403337                 pop     ebp
.text:00403338                 retn
.text:00403339 ; ---------------------------------------------------------------------------
.text:00403339
.text:00403339 loc_403339:                             ; CODE XREF: sub_4031F0+13A↑j
.text:00403339                 mov     [esp+3Ch+Stream], eax ; Block
.text:0040333C                 call    free
.text:00403341                 jmp     short loc_40332C
.text:00403343 ; ---------------------------------------------------------------------------
.text:00403343
.text:00403343 loc_403343:                             ; CODE XREF: sub_4031F0+132↑j
.text:00403343                 mov     edi, [esp+3Ch+FileName]
.text:00403347                 mov     [esp+3Ch+Stream], edi ; char *
.text:0040334A                 call    sub_40A8E0
.text:0040334F                 mov     ebp, eax
.text:00403351                 call    _errno
.text:00403356                 mov     dword ptr [esp+3Ch+var_30], ebp ; char
.text:0040335A                 mov     [esp+3Ch+File], offset aS ; "%s"
.text:00403362                 mov     esi, [eax]
.text:00403364                 mov     [esp+3Ch+Stream], 1 ; Code
.text:0040336B                 mov     [esp+3Ch+Mode], esi ; ErrorMessage
.text:0040336F                 call    sub_40BE20
.text:00403374                 jmp     short loc_403324
.text:00403376 ; ---------------------------------------------------------------------------
.text:00403376
.text:00403376 loc_403376:                             ; CODE XREF: sub_4031F0+18↑j
.text:00403376                 mov     [esp+3Ch+Mode], offset aR ; "r"
.text:0040337E                 mov     edx, [esp+3Ch+FileName]
.text:00403382                 mov     [esp+3Ch+Stream], edx ; FileName
.text:00403385                 call    fopen
.text:0040338A                 test    eax, eax
.text:0040338C                 mov     esi, eax
.text:0040338E                 jnz     loc_403225
.text:00403394                 mov     ecx, [esp+3Ch+FileName]
.text:00403398                 mov     [esp+3Ch+Stream], ecx ; char *
.text:0040339B                 call    sub_40A8E0
.text:004033A0                 mov     edi, eax
.text:004033A2                 call    _errno
.text:004033A7                 mov     dword ptr [esp+3Ch+var_30], edi ; char
.text:004033AB                 mov     [esp+3Ch+File], offset aS ; "%s"
.text:004033B3                 mov     edx, [eax]
.text:004033B5                 mov     [esp+3Ch+Stream], 1 ; Code
.text:004033BC                 mov     [esp+3Ch+Mode], edx ; ErrorMessage
.text:004033C0                 call    sub_40BE20
.text:004033C5                 jmp     loc_403225
.text:004033C5 sub_4031F0      endp
.text:004033C5
.text:004033C5 ; ---------------------------------------------------------------------------
.text:004033CA                 align 20h
.text:004033E0
.text:004033E0 ; =============== S U B R O U T I N E =======================================
.text:004033E0
.text:004033E0
.text:004033E0 sub_4033E0      proc near               ; DATA XREF: sub_403410+53↓o
.text:004033E0                 inc     edi
.text:004033E1                 dec     ebp
.text:004033E2                 push    esp
.text:004033E3
.text:004033E3 loc_4033E3:                             ; DATA XREF: sub_403410:loc_4040A3↓o
.text:004033E3                 add     ds:64252F6Dh, ah
.text:004033E9                 das
.text:004033EA
.text:004033EA loc_4033EA:                             ; DATA XREF: sub_403410:loc_40425E↓o
.text:004033EA                 and     eax, 59250079h
.text:004033EF                 sub     eax, 252D6D25h
.text:004033F4
.text:004033F4 loc_4033F4:                             ; DATA XREF: sub_403410:loc_40439A↓o
.text:004033F4                 add     fs:4D253A48h, ah
.text:004033FB
.text:004033FB loc_4033FB:                             ; DATA XREF: sub_403410:loc_4043E0↓o
.text:004033FB                 add     ds:4D253A48h, ah
.text:00403401
.text:00403401 loc_403401:                             ; DATA XREF: sub_403410:loc_404712↓o
.text:00403401                 cmp     ah, ds:8D000053h
.text:00403407                 jbe     short $+2
.text:00403409
.text:00403409 loc_403409:                             ; CODE XREF: sub_4033E0+27↑j
.text:00403409                 lea     edi, [edi+0]
.text:00403409 sub_4033E0      endp ; sp-analysis failed
.text:00403409
.text:00403410
.text:00403410 ; =============== S U B R O U T I N E =======================================
.text:00403410
.text:00403410
.text:00403410 ; int __cdecl sub_403410(int, int, char *, struct tm *, int, int)
.text:00403410 sub_403410      proc near               ; CODE XREF: sub_402D90+A1↑p
.text:00403410                                         ; sub_403410+CEB↓p ...
.text:00403410
.text:00403410 Str             = dword ptr -59Ch
.text:00403410 SizeInBytes     = dword ptr -598h
.text:00403410 State           = dword ptr -594h
.text:00403410 Tm              = dword ptr -590h
.text:00403410 var_58C         = dword ptr -58Ch
.text:00403410 var_588         = dword ptr -588h
.text:00403410 var_57C         = dword ptr -57Ch
.text:00403410 var_578         = dword ptr -578h
.text:00403410 var_570         = dword ptr -570h
.text:00403410 var_564         = dword ptr -564h
.text:00403410 var_560         = dword ptr -560h
.text:00403410 var_55C         = dword ptr -55Ch
.text:00403410 var_558         = dword ptr -558h
.text:00403410 var_554         = dword ptr -554h
.text:00403410 var_550         = dword ptr -550h
.text:00403410 var_54C         = dword ptr -54Ch
.text:00403410 var_548         = dword ptr -548h
.text:00403410 var_544         = dword ptr -544h
.text:00403410 var_540         = dword ptr -540h
.text:00403410 var_53C         = dword ptr -53Ch
.text:00403410 var_538         = dword ptr -538h
.text:00403410 Size            = dword ptr -534h
.text:00403410 var_530         = dword ptr -530h
.text:00403410 var_52C         = dword ptr -52Ch
.text:00403410 var_528         = dword ptr -528h
.text:00403410 var_524         = dword ptr -524h
.text:00403410 var_520         = dword ptr -520h
.text:00403410 var_51C         = dword ptr -51Ch
.text:00403410 var_518         = dword ptr -518h
.text:00403410 var_514         = dword ptr -514h
.text:00403410 var_510         = dword ptr -510h
.text:00403410 var_50C         = dword ptr -50Ch
.text:00403410 var_508         = dword ptr -508h
.text:00403410 var_504         = dword ptr -504h
.text:00403410 var_500         = dword ptr -500h
.text:00403410 var_4FC         = dword ptr -4FCh
.text:00403410 var_4F8         = dword ptr -4F8h
.text:00403410 Format          = byte ptr -4F4h
.text:00403410 var_4F3         = byte ptr -4F3h
.text:00403410 var_4F2         = byte ptr -4F2h
.text:00403410 var_4F0         = mbstate_t ptr -4F0h
.text:00403410 var_4E8         = dword ptr -4E8h
.text:00403410 var_4E4         = dword ptr -4E4h
.text:00403410 var_4E0         = dword ptr -4E0h
.text:00403410 var_4DC         = dword ptr -4DCh
.text:00403410 var_4D8         = dword ptr -4D8h
.text:00403410 var_4BC         = tm ptr -4BCh
.text:00403410 var_48C         = dword ptr -48Ch
.text:00403410 var_488         = dword ptr -488h
.text:00403410 var_484         = dword ptr -484h
.text:00403410 var_478         = dword ptr -478h
.text:00403410 var_470         = dword ptr -470h
.text:00403410 var_45C         = tm ptr -45Ch
.text:00403410 Buffer          = byte ptr -42Ch
.text:00403410 var_2C          = byte ptr -2Ch
.text:00403410 var_20          = byte ptr -20h
.text:00403410 arg_0           = dword ptr  4
.text:00403410 arg_4           = dword ptr  8
.text:00403410 arg_8           = dword ptr  0Ch
.text:00403410 arg_C           = dword ptr  10h
.text:00403410 arg_10          = dword ptr  14h
.text:00403410 arg_14          = dword ptr  18h
.text:00403410
.text:00403410                 push    ebp
.text:00403411                 xor     edx, edx
.text:00403413                 xor     ecx, ecx
.text:00403415                 push    edi
.text:00403416                 push    esi
.text:00403417                 push    ebx
.text:00403418                 sub     esp, 58Ch
.text:0040341E                 xor     ebx, ebx
.text:00403420                 mov     [esp+59Ch+var_500], edx
.text:00403427                 mov     edi, [esp+59Ch+arg_C]
.text:0040342E                 mov     edx, [esp+59Ch+arg_10]
.text:00403435                 mov     [esp+59Ch+var_504], ebx
.text:0040343C                 mov     eax, [esp+59Ch+arg_0]
.text:00403443                 mov     esi, [edi+8]
.text:00403446                 mov     [esp+59Ch+var_50C], ecx
.text:0040344D                 test    edx, edx
.text:0040344F                 mov     [esp+59Ch+var_508], eax
.text:00403456                 mov     [esp+59Ch+var_4FC], esi
.text:0040345D                 jz      loc_405330
.text:00403463                 mov     ebp, offset sub_4033E0
.text:00403468                 mov     [esp+59Ch+var_500], ebp
.text:0040346F
.text:0040346F loc_40346F:                             ; CODE XREF: sub_403410+1F25↓j
.text:0040346F                 cmp     [esp+59Ch+var_4FC], 0Ch
.text:00403477                 jle     loc_405310
.text:0040347D                 sub     [esp+59Ch+var_4FC], 0Ch
.text:00403485
.text:00403485 loc_403485:                             ; CODE XREF: sub_403410+1F09↓j
.text:00403485                                         ; sub_403410+1F1B↓j
.text:00403485                 mov     ebp, [esp+59Ch+arg_8]
.text:0040348C                 movzx   eax, byte ptr [ebp+0]
.text:00403490                 test    al, al
.text:00403492                 jz      loc_403540
.text:00403498                 mov     cl, al
.text:0040349A
.text:0040349A loc_40349A:                             ; CODE XREF: sub_403410+123↓j
.text:0040349A                 mov     [esp+59Ch+var_524], 0
.text:004034A2                 xor     eax, eax
.text:004034A4                 xor     ebx, ebx
.text:004034A6                 mov     [esp+59Ch+var_510], eax
.text:004034AD                 mov     edi, 0FFFFFFFFh
.text:004034B2                 movsx   eax, cl
.text:004034B5                 mov     [esp+59Ch+var_528], 0
.text:004034BD                 cmp     eax, 3Fh ; '?'
.text:004034C0                 jg      loc_4052F0
.text:004034C6                 cmp     eax, 26h ; '&'
.text:004034C9                 jge     short loc_4034F0
.text:004034CB                 cmp     eax, 23h ; '#'
.text:004034CE                 jg      loc_403678
.text:004034D4                 cmp     eax, 20h ; ' '
.text:004034D7                 jge     short loc_4034F0
.text:004034D9                 sub     eax, 8
.text:004034DC                 cmp     eax, 5
.text:004034DF
.text:004034DF loc_4034DF:                             ; CODE XREF: sub_403410+1EF8↓j
.text:004034DF                 ja      loc_403574
.text:004034E5                 lea     esi, [esi+0]
.text:004034E9                 lea     edi, [edi+0]
.text:004034F0
.text:004034F0 loc_4034F0:                             ; CODE XREF: sub_403410+B9↑j
.text:004034F0                                         ; sub_403410+C7↑j ...
.text:004034F0                 mov     ebx, [esp+59Ch+arg_4]
.text:004034F7                 xor     edx, edx
.text:004034F9                 mov     edi, [esp+59Ch+var_504]
.text:00403500                 sub     ebx, edi
.text:00403502                 cmp     ebx, 1
.text:00403505                 jbe     short loc_403567
.text:00403507                 mov     esi, [esp+59Ch+var_508]
.text:0040350E                 test    esi, esi
.text:00403510                 jz      short loc_403523
.text:00403512                 mov     edx, [esp+59Ch+var_508]
.text:00403519                 mov     [edx], cl
.text:0040351B                 inc     edx
.text:0040351C                 mov     [esp+59Ch+var_508], edx
.text:00403523
.text:00403523 loc_403523:                             ; CODE XREF: sub_403410+100↑j
.text:00403523                 inc     [esp+59Ch+var_504]
.text:0040352A
.text:0040352A loc_40352A:                             ; CODE XREF: sub_403410+23E↓j
.text:0040352A                                         ; sub_403410+5A2↓j ...
.text:0040352A                 inc     ebp
.text:0040352B                 movzx   edx, byte ptr [ebp+0]
.text:0040352F                 test    dl, dl
.text:00403531                 mov     cl, dl
.text:00403533                 jnz     loc_40349A
.text:00403539                 lea     esi, [esi+0]
.text:00403540
.text:00403540 loc_403540:                             ; CODE XREF: sub_403410+82↑j
.text:00403540                 mov     ebp, [esp+59Ch+var_508]
.text:00403547                 test    ebp, ebp
.text:00403549                 jz      short loc_403560
.text:0040354B                 mov     ecx, [esp+59Ch+arg_4]
.text:00403552                 test    ecx, ecx
.text:00403554                 jz      short loc_403560
.text:00403556                 mov     edi, [esp+59Ch+var_508]
.text:0040355D                 mov     byte ptr [edi], 0
.text:00403560
.text:00403560 loc_403560:                             ; CODE XREF: sub_403410+139↑j
.text:00403560                                         ; sub_403410+144↑j
.text:00403560                 mov     edx, [esp+59Ch+var_504]
.text:00403567
.text:00403567 loc_403567:                             ; CODE XREF: sub_403410+F5↑j
.text:00403567                                         ; sub_403410+1DE↓j ...
.text:00403567                 add     esp, 58Ch
.text:0040356D                 mov     eax, edx
.text:0040356F                 pop     ebx
.text:00403570                 pop     esi
.text:00403571                 pop     edi
.text:00403572                 pop     ebp
.text:00403573                 retn
.text:00403574 ; ---------------------------------------------------------------------------
.text:00403574
.text:00403574 loc_403574:                             ; CODE XREF: sub_403410:loc_4034DF↑j
.text:00403574                                         ; sub_403410+26B↓j ...
.text:00403574                 mov     eax, [esp+59Ch+var_50C]
.text:0040357B                 xor     esi, esi
.text:0040357D                 mov     ecx, ds:dword_41F020
.text:00403583                 test    eax, eax
.text:00403585                 mov     [esp+59Ch+var_4F0._Wchar], ecx
.text:0040358C                 jz      loc_403660
.text:00403592
.text:00403592 loc_403592:                             ; CODE XREF: sub_403410+263↓j
.text:00403592                 mov     edi, [esp+59Ch+var_50C]
.text:00403599                 sub     edi, ebp
.text:0040359B                 lea     edx, [esp+59Ch+var_4F0]
.text:004035A2                 mov     [esp+59Ch+State], edx ; State
.text:004035A6                 mov     [esp+59Ch+SizeInBytes], edi ; SizeInBytes
.text:004035AA                 mov     [esp+59Ch+Str], ebp ; Ch
.text:004035AD                 call    mbrlen
.text:004035B2                 test    eax, eax
.text:004035B4                 jz      short loc_4035CB
.text:004035B6                 cmp     eax, 0FFFFFFFEh
.text:004035B9                 jz      loc_403653
.text:004035BF                 cmp     eax, 0FFFFFFFFh
.text:004035C2                 mov     esi, 1
.text:004035C7                 jz      short loc_4035CB
.text:004035C9
.text:004035C9 loc_4035C9:                             ; CODE XREF: sub_403410+24B↓j
.text:004035C9                 mov     esi, eax
.text:004035CB
.text:004035CB loc_4035CB:                             ; CODE XREF: sub_403410+1A4↑j
.text:004035CB                                         ; sub_403410+1B7↑j
.text:004035CB                 mov     ebx, esi
.text:004035CD                 mov     ecx, [esp+59Ch+arg_4]
.text:004035D4                 not     ebx
.text:004035D6                 mov     edx, ebx
.text:004035D8                 mov     eax, [esp+59Ch+var_504]
.text:004035DF                 shr     edx, 1Fh
.text:004035E2                 dec     edx
.text:004035E3                 and     edx, ebx
.text:004035E5                 sub     ecx, eax
.text:004035E7                 lea     edi, [edx+esi]
.text:004035EA                 xor     edx, edx
.text:004035EC                 cmp     edi, ecx
.text:004035EE                 jnb     loc_403567
.text:004035F4                 mov     ecx, [esp+59Ch+var_508]
.text:004035FB                 test    ecx, ecx
.text:004035FD                 jz      short loc_403643
.text:004035FF                 test    ebx, ebx
.text:00403601                 jle     short loc_403625
.text:00403603                 mov     [esp+59Ch+State], ebx ; Size
.text:00403607                 mov     eax, [esp+59Ch+var_508]
.text:0040360E                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00403616                 mov     [esp+59Ch+Str], eax ; void *
.text:00403619                 call    memset
.text:0040361E                 add     [esp+59Ch+var_508], ebx
.text:00403625
.text:00403625 loc_403625:                             ; CODE XREF: sub_403410+1F1↑j
.text:00403625                 mov     [esp+59Ch+State], esi ; Size
.text:00403629                 mov     ebx, [esp+59Ch+var_508]
.text:00403630                 mov     [esp+59Ch+SizeInBytes], ebp ; Src
.text:00403634                 mov     [esp+59Ch+Str], ebx ; void *
.text:00403637                 call    memcpy
.text:0040363C                 add     [esp+59Ch+var_508], esi
.text:00403643
.text:00403643 loc_403643:                             ; CODE XREF: sub_403410+1ED↑j
.text:00403643                 add     [esp+59Ch+var_504], edi
.text:0040364A                 lea     ebp, [esi+ebp-1]
.text:0040364E                 jmp     loc_40352A
.text:00403653 ; ---------------------------------------------------------------------------
.text:00403653
.text:00403653 loc_403653:                             ; CODE XREF: sub_403410+1A9↑j
.text:00403653                 mov     [esp+59Ch+Str], ebp ; Str
.text:00403656                 call    strlen
.text:0040365B                 jmp     loc_4035C9
.text:00403660 ; ---------------------------------------------------------------------------
.text:00403660
.text:00403660 loc_403660:                             ; CODE XREF: sub_403410+17C↑j
.text:00403660                 mov     [esp+59Ch+Str], ebp ; Str
.text:00403663                 call    strlen
.text:00403668                 lea     ebx, [eax+ebp+1]
.text:0040366C                 mov     [esp+59Ch+var_50C], ebx
.text:00403673                 jmp     loc_403592
.text:00403678 ; ---------------------------------------------------------------------------
.text:00403678
.text:00403678 loc_403678:                             ; CODE XREF: sub_403410+BE↑j
.text:00403678                 cmp     eax, 25h ; '%'
.text:0040367B                 jnz     loc_403574
.text:00403681                 jmp     short loc_403690
.text:00403681 ; ---------------------------------------------------------------------------
.text:00403683                 align 10h
.text:00403690
.text:00403690 loc_403690:                             ; CODE XREF: sub_403410+271↑j
.text:00403690                                         ; sub_403410+2B0↓j ...
.text:00403690                 inc     ebp
.text:00403691                 movzx   ecx, byte ptr [ebp+0]
.text:00403695                 movsx   edx, cl
.text:00403698                 mov     al, cl
.text:0040369A                 cmp     edx, 30h ; '0'
.text:0040369D                 jz      short loc_4036B6
.text:0040369F                 cmp     edx, 30h ; '0'
.text:004036A2                 jg      loc_4052D0
.text:004036A8                 cmp     edx, 23h ; '#'
.text:004036AB                 jz      loc_4052C0
.text:004036B1                 cmp     edx, 2Dh ; '-'
.text:004036B4
.text:004036B4 loc_4036B4:                             ; CODE XREF: sub_403410+1EC8↓j
.text:004036B4                 jnz     short loc_4036C2
.text:004036B6
.text:004036B6 loc_4036B6:                             ; CODE XREF: sub_403410+28D↑j
.text:004036B6                 movsx   esi, al
.text:004036B9                 mov     [esp+59Ch+var_510], esi
.text:004036C0                 jmp     short loc_403690
.text:004036C2 ; ---------------------------------------------------------------------------
.text:004036C2
.text:004036C2 loc_4036C2:                             ; CODE XREF: sub_403410:loc_4036B4↑j
.text:004036C2                 movsx   edx, al
.text:004036C5                 sub     edx, 30h ; '0'
.text:004036C8                 cmp     edx, 9
.text:004036CB                 ja      short loc_403701
.text:004036CD                 xor     edi, edi
.text:004036CF
.text:004036CF loc_4036CF:                             ; CODE XREF: sub_403410+2EF↓j
.text:004036CF                 cmp     edi, 0CCCCCCCh
.text:004036D5                 jg      loc_4052B4
.text:004036DB                 cmp     edi, 0CCCCCCCh
.text:004036E1                 jz      loc_4052A5
.text:004036E7
.text:004036E7 loc_4036E7:                             ; CODE XREF: sub_403410+1E9E↓j
.text:004036E7                 lea     eax, [edi+edi*4]
.text:004036EA                 movsx   esi, cl
.text:004036ED                 lea     edi, [esi+eax*2-30h]
.text:004036F1
.text:004036F1 loc_4036F1:                             ; CODE XREF: sub_403410+1EA9↓j
.text:004036F1                 inc     ebp
.text:004036F2                 movzx   ecx, byte ptr [ebp+0]
.text:004036F6                 movsx   edx, cl
.text:004036F9                 sub     edx, 30h ; '0'
.text:004036FC                 cmp     edx, 9
.text:004036FF                 jbe     short loc_4036CF
.text:00403701
.text:00403701 loc_403701:                             ; CODE XREF: sub_403410+2BB↑j
.text:00403701                 movsx   eax, cl
.text:00403704                 cmp     eax, 45h ; 'E'
.text:00403707                 jz      loc_405294
.text:0040370D                 xor     edx, edx
.text:0040370F                 cmp     eax, 4Fh ; 'O'
.text:00403712                 mov     [esp+59Ch+var_514], edx
.text:00403719                 jz      loc_405294
.text:0040371F
.text:0040371F loc_40371F:                             ; CODE XREF: sub_403410+1E90↓j
.text:0040371F                 movsx   eax, cl
.text:00403722                 cmp     eax, 7Ah        ; switch 123 cases
.text:00403725                 mov     [esp+59Ch+var_52C], eax
.text:00403729                 ja      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040372F                 jmp     ds:jpt_40372F[eax*4] ; switch jump
.text:0040372F ; ---------------------------------------------------------------------------
.text:00403736                 align 4
.text:00403738 jpt_40372F      dd offset loc_403B12, offset def_40372F, offset def_40372F
.text:00403738                                         ; DATA XREF: sub_403410+31F↑r
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F ; jump table for switch statement
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset loc_403924, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset loc_403B18
.text:00403738                 dd offset loc_403B18, offset loc_403D64, offset loc_4040A3
.text:00403738                 dd offset def_40372F, offset loc_40425E, offset loc_4047C0
.text:00403738                 dd offset loc_40426B, offset loc_4042A2, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset loc_4042D6
.text:00403738                 dd offset loc_404310, offset def_40372F, offset loc_40436D
.text:00403738                 dd offset def_40372F, offset loc_40439A, offset loc_4043A7
.text:00403738                 dd offset loc_4043E0, offset loc_4043ED, offset loc_4047C0
.text:00403738                 dd offset loc_404442, offset loc_4044B0, offset loc_4044C3
.text:00403738                 dd offset loc_404510, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset def_40372F, offset def_40372F
.text:00403738                 dd offset def_40372F, offset loc_403B18, offset loc_404A90
.text:00403738                 dd offset loc_4044B0, offset loc_404723, offset loc_404760
.text:00403738                 dd offset def_40372F, offset loc_4047C0, offset loc_404A90
.text:00403738                 dd offset def_40372F, offset loc_404AB8, offset loc_404AEE
.text:00403738                 dd offset loc_404B25, offset loc_404B60, offset loc_404B97
.text:00403738                 dd offset def_40372F, offset loc_40437D, offset def_40372F
.text:00403738                 dd offset loc_403B3B, offset loc_404C25, offset loc_404CEB
.text:00403738                 dd offset loc_404D80, offset def_40372F, offset loc_404DCE
.text:00403738                 dd offset loc_4044B0, offset loc_404E05, offset loc_404E62
.text:00403924 ; ---------------------------------------------------------------------------
.text:00403924
.text:00403924 loc_403924:                             ; CODE XREF: sub_403410+31F↑j
.text:00403924                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00403924                 mov     esi, [esp+59Ch+var_514] ; jumptable 0040372F case 37
.text:0040392B                 test    esi, esi
.text:0040392D                 jnz     def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00403933                 lea     ebx, [edi-1]
.text:00403936                 mov     eax, [esp+59Ch+var_504]
.text:0040393D                 mov     edx, ebx
.text:0040393F                 shr     edx, 1Fh
.text:00403942                 mov     edi, [esp+59Ch+arg_4]
.text:00403949                 dec     edx
.text:0040394A                 and     edx, ebx
.text:0040394C                 lea     esi, [edx+1]
.text:0040394F                 sub     edi, eax
.text:00403951                 xor     edx, edx
.text:00403953                 cmp     esi, edi
.text:00403955                 jnb     loc_403567
.text:0040395B                 mov     eax, [esp+59Ch+var_508]
.text:00403962                 test    eax, eax
.text:00403964                 jz      short loc_4039AB
.text:00403966                 test    ebx, ebx
.text:00403968                 jle     short loc_40399A
.text:0040396A                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00403972                 jz      short loc_4039B7
.text:00403974                 mov     [esp+59Ch+State], ebx ; Size
.text:00403978                 mov     edi, [esp+59Ch+var_508]
.text:0040397F                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00403987                 mov     [esp+59Ch+Str], edi ; void *
.text:0040398A
.text:0040398A loc_40398A:                             ; CODE XREF: sub_403410+5BD↓j
.text:0040398A                 call    memset
.text:0040398F                 add     [esp+59Ch+var_508], ebx
.text:00403996                 movzx   ecx, byte ptr [ebp+0]
.text:0040399A
.text:0040399A loc_40399A:                             ; CODE XREF: sub_403410+558↑j
.text:0040399A                 mov     eax, [esp+59Ch+var_508]
.text:004039A1                 mov     [eax], cl
.text:004039A3
.text:004039A3 loc_4039A3:                             ; CODE XREF: sub_403410+17F8↓j
.text:004039A3                                         ; sub_403410+194C↓j
.text:004039A3                 inc     eax
.text:004039A4                 mov     [esp+59Ch+var_508], eax
.text:004039AB
.text:004039AB loc_4039AB:                             ; CODE XREF: sub_403410+554↑j
.text:004039AB                                         ; sub_403410+6A5↓j ...
.text:004039AB                 add     [esp+59Ch+var_504], esi
.text:004039B2                 jmp     loc_40352A
.text:004039B7 ; ---------------------------------------------------------------------------
.text:004039B7
.text:004039B7 loc_4039B7:                             ; CODE XREF: sub_403410+562↑j
.text:004039B7                 mov     [esp+59Ch+State], ebx
.text:004039BB                 mov     ecx, [esp+59Ch+var_508]
.text:004039C2                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:004039CA                 mov     [esp+59Ch+Str], ecx
.text:004039CD                 jmp     short loc_40398A
.text:004039CD ; ---------------------------------------------------------------------------
.text:004039CF                 align 10h
.text:004039D0
.text:004039D0 def_40372F:                             ; CODE XREF: sub_403410+319↑j
.text:004039D0                                         ; sub_403410+31F↑j ...
.text:004039D0                 cmp     byte ptr [ebp+0], 25h ; '%' ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004039D4                 mov     esi, 1
.text:004039D9                 jz      short loc_4039E6
.text:004039DB
.text:004039DB loc_4039DB:                             ; CODE XREF: sub_403410+5D4↓j
.text:004039DB                 inc     esi
.text:004039DC                 mov     edx, ebp
.text:004039DE                 sub     edx, esi
.text:004039E0                 cmp     byte ptr [edx+1], 25h ; '%'
.text:004039E4                 jnz     short loc_4039DB
.text:004039E6
.text:004039E6 loc_4039E6:                             ; CODE XREF: sub_403410+5C9↑j
.text:004039E6                 mov     ebx, edi
.text:004039E8                 mov     ecx, [esp+59Ch+var_504]
.text:004039EF                 sub     ebx, esi
.text:004039F1                 mov     edi, ebx
.text:004039F3                 shr     edi, 1Fh
.text:004039F6                 dec     edi
.text:004039F7                 and     edi, ebx
.text:004039F9                 lea     edx, [edi+esi]
.text:004039FC                 mov     edi, [esp+59Ch+arg_4]
.text:00403A03                 mov     [esp+59Ch+var_560], edx
.text:00403A07                 xor     edx, edx
.text:00403A09                 sub     edi, ecx
.text:00403A0B                 cmp     [esp+59Ch+var_560], edi
.text:00403A0F                 jnb     loc_403567
.text:00403A15                 mov     eax, [esp+59Ch+var_508]
.text:00403A1C                 test    eax, eax
.text:00403A1E                 jz      loc_403AB1
.text:00403A24                 test    ebx, ebx
.text:00403A26                 jle     short loc_403A58
.text:00403A28                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00403A30                 jz      loc_403AF7
.text:00403A36                 mov     [esp+59Ch+State], ebx ; Size
.text:00403A3A                 mov     edx, [esp+59Ch+var_508]
.text:00403A41                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00403A49                 mov     [esp+59Ch+Str], edx ; void *
.text:00403A4C
.text:00403A4C loc_403A4C:                             ; CODE XREF: sub_403410+6FD↓j
.text:00403A4C                 call    memset
.text:00403A51                 add     [esp+59Ch+var_508], ebx
.text:00403A58
.text:00403A58 loc_403A58:                             ; CODE XREF: sub_403410+616↑j
.text:00403A58                 mov     ebx, [esp+59Ch+var_528]
.text:00403A5C                 test    ebx, ebx
.text:00403A5E                 jz      short loc_403AD9
.text:00403A60                 mov     ecx, ebp
.text:00403A62                 lea     ebx, [esi-1]
.text:00403A65                 sub     ecx, esi
.text:00403A67                 test    esi, esi
.text:00403A69                 lea     edi, [ecx+1]
.text:00403A6C                 jz      short loc_403AAA
.text:00403A6E
.text:00403A6E loc_403A6E:                             ; CODE XREF: sub_403410+698↓j
.text:00403A6E                 movzx   edx, byte ptr [ebx+edi]
.text:00403A72                 mov     eax, ds:__mb_cur_max
.text:00403A77                 movzx   ecx, dl
.text:00403A7A                 cmp     dword ptr [eax], 1
.text:00403A7D                 jz      short loc_403AC9
.text:00403A7F                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:00403A87                 mov     [esp+59Ch+Str], ecx ; C
.text:00403A8A                 call    _isctype
.text:00403A8F                 movzx   edx, byte ptr [ebx+edi]
.text:00403A93
.text:00403A93 loc_403A93:                             ; CODE XREF: sub_403410+6C7↓j
.text:00403A93                 test    eax, eax
.text:00403A95                 mov     cl, dl
.text:00403A97                 jnz     short loc_403ABA
.text:00403A99
.text:00403A99 loc_403A99:                             ; CODE XREF: sub_403410+6B7↓j
.text:00403A99                 mov     edx, [esp+59Ch+var_508]
.text:00403AA0                 mov     [ebx+edx], cl
.text:00403AA3                 mov     edx, ebx
.text:00403AA5                 dec     ebx
.text:00403AA6                 test    edx, edx
.text:00403AA8                 jnz     short loc_403A6E
.text:00403AAA
.text:00403AAA loc_403AAA:                             ; CODE XREF: sub_403410+65C↑j
.text:00403AAA                                         ; sub_403410+6E5↓j
.text:00403AAA                 add     [esp+59Ch+var_508], esi
.text:00403AB1
.text:00403AB1 loc_403AB1:                             ; CODE XREF: sub_403410+60E↑j
.text:00403AB1                 mov     esi, [esp+59Ch+var_560]
.text:00403AB5                 jmp     loc_4039AB
.text:00403ABA ; ---------------------------------------------------------------------------
.text:00403ABA
.text:00403ABA loc_403ABA:                             ; CODE XREF: sub_403410+687↑j
.text:00403ABA                 movzx   ecx, dl
.text:00403ABD                 mov     [esp+59Ch+Str], ecx ; C
.text:00403AC0                 call    toupper
.text:00403AC5                 mov     cl, al
.text:00403AC7                 jmp     short loc_403A99
.text:00403AC9 ; ---------------------------------------------------------------------------
.text:00403AC9
.text:00403AC9 loc_403AC9:                             ; CODE XREF: sub_403410+66D↑j
.text:00403AC9                 mov     eax, ds:_pctype
.text:00403ACE                 mov     eax, [eax]
.text:00403AD0                 movzx   eax, word ptr [eax+ecx*2]
.text:00403AD4                 and     eax, 2
.text:00403AD7                 jmp     short loc_403A93
.text:00403AD9 ; ---------------------------------------------------------------------------
.text:00403AD9
.text:00403AD9 loc_403AD9:                             ; CODE XREF: sub_403410+64E↑j
.text:00403AD9                 mov     [esp+59Ch+State], esi ; Size
.text:00403ADD                 mov     ebx, ebp
.text:00403ADF                 mov     edi, [esp+59Ch+var_508]
.text:00403AE6                 sub     ebx, esi
.text:00403AE8                 inc     ebx
.text:00403AE9                 mov     [esp+59Ch+SizeInBytes], ebx ; Src
.text:00403AED                 mov     [esp+59Ch+Str], edi ; void *
.text:00403AF0                 call    memcpy
.text:00403AF5                 jmp     short loc_403AAA
.text:00403AF7 ; ---------------------------------------------------------------------------
.text:00403AF7
.text:00403AF7 loc_403AF7:                             ; CODE XREF: sub_403410+620↑j
.text:00403AF7                 mov     [esp+59Ch+State], ebx
.text:00403AFB                 mov     ecx, [esp+59Ch+var_508]
.text:00403B02                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:00403B0A                 mov     [esp+59Ch+Str], ecx
.text:00403B0D                 jmp     loc_403A4C
.text:00403B12 ; ---------------------------------------------------------------------------
.text:00403B12
.text:00403B12 loc_403B12:                             ; CODE XREF: sub_403410+31F↑j
.text:00403B12                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00403B12                 dec     ebp             ; jumptable 0040372F case 0
.text:00403B13                 jmp     def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00403B18 ; ---------------------------------------------------------------------------
.text:00403B18
.text:00403B18 loc_403B18:                             ; CODE XREF: sub_403410+31F↑j
.text:00403B18                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00403B18                 mov     edx, [esp+59Ch+var_514] ; jumptable 0040372F cases 65,66,97
.text:00403B1F                 test    edx, edx
.text:00403B21                 jnz     def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00403B27                 test    ebx, ebx
.text:00403B29                 jz      short loc_403B3B ; jumptable 0040372F case 114
.text:00403B2B                 mov     [esp+59Ch+var_528], 1
.text:00403B33                 mov     [esp+59Ch+var_524], 0
.text:00403B3B
.text:00403B3B loc_403B3B:                             ; CODE XREF: sub_403410+31F↑j
.text:00403B3B                                         ; sub_403410+719↑j ...
.text:00403B3B                 mov     [esp+59Ch+Format], 25h ; '%' ; jumptable 0040372F case 114
.text:00403B43                 mov     esi, [esp+59Ch+var_514]
.text:00403B4A                 lea     eax, [esp+59Ch+var_4F3]
.text:00403B51                 test    esi, esi
.text:00403B53                 jz      short loc_403B6B
.text:00403B55                 movzx   eax, byte ptr [esp+59Ch+var_514]
.text:00403B5D                 mov     [esp+59Ch+var_4F3], al
.text:00403B64                 lea     eax, [esp+59Ch+var_4F2]
.text:00403B6B
.text:00403B6B loc_403B6B:                             ; CODE XREF: sub_403410+743↑j
.text:00403B6B                 movzx   ebx, byte ptr [esp+59Ch+var_52C]
.text:00403B70                 lea     edx, [esp+59Ch+Format]
.text:00403B77                 mov     byte ptr [eax+1], 0
.text:00403B7B                 mov     [eax], bl
.text:00403B7D                 mov     ecx, [esp+59Ch+arg_C]
.text:00403B84                 lea     ebx, [esp+59Ch+Buffer]
.text:00403B8B                 mov     [esp+59Ch+State], edx ; Format
.text:00403B8F                 mov     [esp+59Ch+SizeInBytes], 400h ; SizeInBytes
.text:00403B97                 mov     [esp+59Ch+Tm], ecx ; Tm
.text:00403B9B                 mov     [esp+59Ch+Str], ebx ; Buffer
.text:00403B9E                 call    strftime
.text:00403BA3                 test    eax, eax
.text:00403BA5                 mov     esi, eax
.text:00403BA7                 jnz     short loc_403BB7
.text:00403BA9                 cmp     [esp+59Ch+Buffer], 0
.text:00403BB1                 jnz     loc_403D5D
.text:00403BB7
.text:00403BB7 loc_403BB7:                             ; CODE XREF: sub_403410+797↑j
.text:00403BB7                 mov     ebx, edi
.text:00403BB9                 mov     ecx, [esp+59Ch+arg_4]
.text:00403BC0                 sub     ebx, esi
.text:00403BC2                 mov     edx, ebx
.text:00403BC4                 mov     eax, [esp+59Ch+var_504]
.text:00403BCB                 shr     edx, 1Fh
.text:00403BCE                 dec     edx
.text:00403BCF                 and     edx, ebx
.text:00403BD1                 sub     ecx, eax
.text:00403BD3                 lea     edi, [edx+esi]
.text:00403BD6                 xor     edx, edx
.text:00403BD8                 cmp     edi, ecx
.text:00403BDA                 jnb     loc_403567
.text:00403BE0                 mov     ecx, [esp+59Ch+var_508]
.text:00403BE7                 test    ecx, ecx
.text:00403BE9                 jz      loc_403C7D
.text:00403BEF                 test    ebx, ebx
.text:00403BF1                 jle     short loc_403C23
.text:00403BF3                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00403BFB                 jz      loc_403D42
.text:00403C01                 mov     [esp+59Ch+State], ebx ; Size
.text:00403C05                 mov     edx, [esp+59Ch+var_508]
.text:00403C0C                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00403C14                 mov     [esp+59Ch+Str], edx ; void *
.text:00403C17
.text:00403C17 loc_403C17:                             ; CODE XREF: sub_403410+948↓j
.text:00403C17                 call    memset
.text:00403C1C                 add     [esp+59Ch+var_508], ebx
.text:00403C23
.text:00403C23 loc_403C23:                             ; CODE XREF: sub_403410+7E1↑j
.text:00403C23                 mov     ebx, [esp+59Ch+var_524]
.text:00403C27                 test    ebx, ebx
.text:00403C29                 jz      short loc_403CA8
.text:00403C2B                 test    esi, esi
.text:00403C2D                 lea     ebx, [esi-1]
.text:00403C30                 jz      short loc_403C76
.text:00403C32
.text:00403C32 loc_403C32:                             ; CODE XREF: sub_403410+864↓j
.text:00403C32                 movzx   edx, [esp+ebx+59Ch+Buffer]
.text:00403C3A                 mov     eax, ds:__mb_cur_max
.text:00403C3F                 movzx   ecx, dl
.text:00403C42                 cmp     dword ptr [eax], 1
.text:00403C45                 jz      short loc_403C98
.text:00403C47                 mov     [esp+59Ch+SizeInBytes], 1 ; Type
.text:00403C4F                 mov     [esp+59Ch+Str], ecx ; C
.text:00403C52                 call    _isctype
.text:00403C57                 movzx   edx, [esp+ebx+59Ch+Buffer]
.text:00403C5F
.text:00403C5F loc_403C5F:                             ; CODE XREF: sub_403410+896↓j
.text:00403C5F                 test    eax, eax
.text:00403C61                 mov     cl, dl
.text:00403C63                 jnz     short loc_403C89
.text:00403C65
.text:00403C65 loc_403C65:                             ; CODE XREF: sub_403410+886↓j
.text:00403C65                 mov     eax, [esp+59Ch+var_508]
.text:00403C6C                 mov     edx, ebx
.text:00403C6E                 mov     [ebx+eax], cl
.text:00403C71                 dec     ebx
.text:00403C72                 test    edx, edx
.text:00403C74                 jnz     short loc_403C32
.text:00403C76
.text:00403C76 loc_403C76:                             ; CODE XREF: sub_403410+820↑j
.text:00403C76                                         ; sub_403410+8A5↓j ...
.text:00403C76                 add     [esp+59Ch+var_508], esi
.text:00403C7D
.text:00403C7D loc_403C7D:                             ; CODE XREF: sub_403410+7D9↑j
.text:00403C7D                                         ; sub_403410+B10↓j ...
.text:00403C7D                 add     [esp+59Ch+var_504], edi
.text:00403C84                 jmp     loc_40352A
.text:00403C89 ; ---------------------------------------------------------------------------
.text:00403C89
.text:00403C89 loc_403C89:                             ; CODE XREF: sub_403410+853↑j
.text:00403C89                 movzx   ecx, dl
.text:00403C8C                 mov     [esp+59Ch+Str], ecx ; C
.text:00403C8F                 call    tolower
.text:00403C94                 mov     cl, al
.text:00403C96                 jmp     short loc_403C65
.text:00403C98 ; ---------------------------------------------------------------------------
.text:00403C98
.text:00403C98 loc_403C98:                             ; CODE XREF: sub_403410+835↑j
.text:00403C98                 mov     eax, ds:_pctype
.text:00403C9D                 mov     eax, [eax]
.text:00403C9F                 movzx   eax, word ptr [eax+ecx*2]
.text:00403CA3                 and     eax, 1
.text:00403CA6                 jmp     short loc_403C5F
.text:00403CA8 ; ---------------------------------------------------------------------------
.text:00403CA8
.text:00403CA8 loc_403CA8:                             ; CODE XREF: sub_403410+819↑j
.text:00403CA8                 mov     ebx, [esp+59Ch+var_528]
.text:00403CAC                 test    ebx, ebx
.text:00403CAE                 jz      short loc_403D1F
.text:00403CB0                 test    esi, esi
.text:00403CB2                 lea     ebx, [esi-1]
.text:00403CB5                 jz      short loc_403C76
.text:00403CB7
.text:00403CB7 loc_403CB7:                             ; CODE XREF: sub_403410+8E9↓j
.text:00403CB7                 movzx   edx, [esp+ebx+59Ch+Buffer]
.text:00403CBF                 mov     eax, ds:__mb_cur_max
.text:00403CC4                 movzx   ecx, dl
.text:00403CC7                 cmp     dword ptr [eax], 1
.text:00403CCA                 jz      short loc_403D0F
.text:00403CCC                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:00403CD4                 mov     [esp+59Ch+Str], ecx ; C
.text:00403CD7                 call    _isctype
.text:00403CDC                 movzx   edx, [esp+ebx+59Ch+Buffer]
.text:00403CE4
.text:00403CE4 loc_403CE4:                             ; CODE XREF: sub_403410+90D↓j
.text:00403CE4                 test    eax, eax
.text:00403CE6                 mov     cl, dl
.text:00403CE8                 jnz     short loc_403D00
.text:00403CEA
.text:00403CEA loc_403CEA:                             ; CODE XREF: sub_403410+8FD↓j
.text:00403CEA                 mov     edx, [esp+59Ch+var_508]
.text:00403CF1                 mov     [ebx+edx], cl
.text:00403CF4                 mov     edx, ebx
.text:00403CF6                 dec     ebx
.text:00403CF7                 test    edx, edx
.text:00403CF9                 jnz     short loc_403CB7
.text:00403CFB                 jmp     loc_403C76
.text:00403D00 ; ---------------------------------------------------------------------------
.text:00403D00
.text:00403D00 loc_403D00:                             ; CODE XREF: sub_403410+8D8↑j
.text:00403D00                 movzx   ecx, dl
.text:00403D03                 mov     [esp+59Ch+Str], ecx ; C
.text:00403D06                 call    toupper
.text:00403D0B                 mov     cl, al
.text:00403D0D                 jmp     short loc_403CEA
.text:00403D0F ; ---------------------------------------------------------------------------
.text:00403D0F
.text:00403D0F loc_403D0F:                             ; CODE XREF: sub_403410+8BA↑j
.text:00403D0F                 mov     eax, ds:_pctype
.text:00403D14                 mov     eax, [eax]
.text:00403D16                 movzx   eax, word ptr [eax+ecx*2]
.text:00403D1A                 and     eax, 2
.text:00403D1D                 jmp     short loc_403CE4
.text:00403D1F ; ---------------------------------------------------------------------------
.text:00403D1F
.text:00403D1F loc_403D1F:                             ; CODE XREF: sub_403410+89E↑j
.text:00403D1F                 mov     [esp+59Ch+State], esi ; Size
.text:00403D23                 lea     edx, [esp+59Ch+Buffer]
.text:00403D2A
.text:00403D2A loc_403D2A:                             ; CODE XREF: sub_403410+12E2↓j
.text:00403D2A                 mov     [esp+59Ch+SizeInBytes], edx ; Src
.text:00403D2E                 mov     ebx, [esp+59Ch+var_508]
.text:00403D35                 mov     [esp+59Ch+Str], ebx ; void *
.text:00403D38                 call    memcpy
.text:00403D3D                 jmp     loc_403C76
.text:00403D42 ; ---------------------------------------------------------------------------
.text:00403D42
.text:00403D42 loc_403D42:                             ; CODE XREF: sub_403410+7EB↑j
.text:00403D42                 mov     [esp+59Ch+State], ebx
.text:00403D46                 mov     eax, [esp+59Ch+var_508]
.text:00403D4D                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:00403D55                 mov     [esp+59Ch+Str], eax
.text:00403D58                 jmp     loc_403C17
.text:00403D5D ; ---------------------------------------------------------------------------
.text:00403D5D
.text:00403D5D loc_403D5D:                             ; CODE XREF: sub_403410+7A1↑j
.text:00403D5D                 xor     edx, edx
.text:00403D5F                 jmp     loc_403567
.text:00403D64 ; ---------------------------------------------------------------------------
.text:00403D64
.text:00403D64 loc_403D64:                             ; CODE XREF: sub_403410+31F↑j
.text:00403D64                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00403D64                 cmp     [esp+59Ch+var_514], 4Fh ; 'O' ; jumptable 0040372F case 67
.text:00403D6C                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00403D72                 cmp     [esp+59Ch+var_514], 45h ; 'E'
.text:00403D7A                 jz      loc_403B3B      ; jumptable 0040372F case 114
.text:00403D80                 mov     [esp+59Ch+var_518], edi
.text:00403D87                 mov     esi, [esp+59Ch+arg_C]
.text:00403D8E                 mov     ecx, [esi+14h]
.text:00403D91                 add     ecx, 76Ch
.text:00403D97                 cmp     edi, 1
.text:00403D9A                 jl      loc_404092
.text:00403DA0
.text:00403DA0 loc_403DA0:                             ; CODE XREF: sub_403410+C8E↓j
.text:00403DA0                 mov     ebx, 51EB851Fh
.text:00403DA5                 mov     eax, ecx
.text:00403DA7                 mov     esi, ecx
.text:00403DA9                 imul    ebx
.text:00403DAB                 sar     esi, 1Fh
.text:00403DAE                 sar     edx, 5
.text:00403DB1                 sub     edx, esi
.text:00403DB3                 lea     ebx, [edx+edx*4]
.text:00403DB6                 lea     esi, [ebx+ebx*4]
.text:00403DB9                 shl     esi, 2
.text:00403DBC                 sub     ecx, esi
.text:00403DBE                 shr     ecx, 1Fh
.text:00403DC1                 sub     edx, ecx
.text:00403DC3                 mov     ecx, edx
.text:00403DC5
.text:00403DC5 loc_403DC5:                             ; CODE XREF: sub_403410+E7F↓j
.text:00403DC5                                         ; sub_403410+EB3↓j ...
.text:00403DC5                 cmp     [esp+59Ch+var_514], 4Fh ; 'O'
.text:00403DCD                 jz      loc_404085
.text:00403DD3
.text:00403DD3 loc_403DD3:                             ; CODE XREF: sub_403410+C7D↓j
.text:00403DD3                 mov     eax, ecx
.text:00403DD5                 mov     ebx, ecx
.text:00403DD7                 shr     eax, 1Fh
.text:00403DDA                 mov     [esp+59Ch+var_51C], eax
.text:00403DE1                 lea     esi, [esp+59Ch+var_20]
.text:00403DE8                 jz      short loc_403DEC
.text:00403DEA                 neg     ebx
.text:00403DEC
.text:00403DEC loc_403DEC:                             ; CODE XREF: sub_403410+9D8↑j
.text:00403DEC                 mov     ecx, 0CCCCCCCDh
.text:00403DF1
.text:00403DF1 loc_403DF1:                             ; CODE XREF: sub_403410+9FA↓j
.text:00403DF1                 mov     eax, ebx
.text:00403DF3                 dec     esi
.text:00403DF4                 mul     ecx
.text:00403DF6                 shr     edx, 3
.text:00403DF9                 lea     eax, [edx+edx*4]
.text:00403DFC                 add     eax, eax
.text:00403DFE                 sub     ebx, eax
.text:00403E00                 mov     al, bl
.text:00403E02                 add     al, 30h ; '0'
.text:00403E04                 mov     ebx, edx
.text:00403E06                 test    edx, edx
.text:00403E08                 mov     [esi], al
.text:00403E0A                 jnz     short loc_403DF1
.text:00403E0C
.text:00403E0C loc_403E0C:                             ; CODE XREF: sub_403410+18D6↓j
.text:00403E0C                 mov     ebx, [esp+59Ch+var_51C]
.text:00403E13                 test    ebx, ebx
.text:00403E15                 jz      short loc_403E1B
.text:00403E17                 dec     esi
.text:00403E18                 mov     byte ptr [esi], 2Dh ; '-'
.text:00403E1B
.text:00403E1B loc_403E1B:                             ; CODE XREF: sub_403410+A05↑j
.text:00403E1B                 cmp     [esp+59Ch+var_510], 2Dh ; '-'
.text:00403E23                 jz      loc_404075
.text:00403E29                 mov     edx, [esp+59Ch+var_518]
.text:00403E30                 lea     ecx, [esp+59Ch+var_2C]
.text:00403E37                 mov     eax, esi
.text:00403E39                 mov     [esp+59Ch+var_564], ecx
.text:00403E3D                 sub     eax, ecx
.text:00403E3F                 lea     ebx, [eax+edx-0Ch]
.text:00403E43                 test    ebx, ebx
.text:00403E45                 jle     loc_403EDE
.text:00403E4B                 cmp     [esp+59Ch+var_510], 5Fh ; '_'
.text:00403E53                 jz      loc_404012
.text:00403E59                 mov     edi, [esp+59Ch+arg_4]
.text:00403E60                 xor     edx, edx
.text:00403E62                 mov     eax, [esp+59Ch+var_504]
.text:00403E69                 sub     edi, eax
.text:00403E6B                 cmp     [esp+59Ch+var_518], edi
.text:00403E72                 jnb     loc_403567
.text:00403E78                 mov     ecx, [esp+59Ch+var_51C]
.text:00403E7F                 test    ecx, ecx
.text:00403E81                 jz      short loc_403EA8
.text:00403E83                 mov     edx, [esp+59Ch+var_508]
.text:00403E8A                 inc     esi
.text:00403E8B                 test    edx, edx
.text:00403E8D                 jz      short loc_403EA1
.text:00403E8F                 mov     edi, [esp+59Ch+var_508]
.text:00403E96                 mov     byte ptr [edi], 2Dh ; '-'
.text:00403E99                 inc     edi
.text:00403E9A                 mov     [esp+59Ch+var_508], edi
.text:00403EA1
.text:00403EA1 loc_403EA1:                             ; CODE XREF: sub_403410+A7D↑j
.text:00403EA1                 inc     [esp+59Ch+var_504]
.text:00403EA8
.text:00403EA8 loc_403EA8:                             ; CODE XREF: sub_403410+A71↑j
.text:00403EA8                 mov     eax, [esp+59Ch+var_508]
.text:00403EAF                 test    eax, eax
.text:00403EB1                 jz      short loc_403ED5
.text:00403EB3                 mov     [esp+59Ch+State], ebx ; Size
.text:00403EB7                 mov     edx, [esp+59Ch+var_508]
.text:00403EBE                 mov     [esp+59Ch+SizeInBytes], 30h ; '0' ; Val
.text:00403EC6                 mov     [esp+59Ch+Str], edx ; void *
.text:00403EC9                 call    memset
.text:00403ECE                 add     [esp+59Ch+var_508], ebx
.text:00403ED5
.text:00403ED5 loc_403ED5:                             ; CODE XREF: sub_403410+AA1↑j
.text:00403ED5                 add     [esp+59Ch+var_504], ebx
.text:00403EDC                 xor     edi, edi
.text:00403EDE
.text:00403EDE loc_403EDE:                             ; CODE XREF: sub_403410+A35↑j
.text:00403EDE                                         ; sub_403410+C60↓j ...
.text:00403EDE                 sub     [esp+59Ch+var_564], esi
.text:00403EE2                 mov     ebx, edi
.text:00403EE4                 xor     edx, edx
.text:00403EE6                 mov     eax, [esp+59Ch+var_564]
.text:00403EEA                 add     eax, 0Ch
.text:00403EED                 sub     ebx, eax
.text:00403EEF                 mov     [esp+59Ch+Size], eax
.text:00403EF3                 mov     ecx, ebx
.text:00403EF5                 mov     edi, eax
.text:00403EF7                 shr     ecx, 1Fh
.text:00403EFA                 mov     eax, [esp+59Ch+var_504]
.text:00403F01                 dec     ecx
.text:00403F02                 and     ecx, ebx
.text:00403F04                 add     edi, ecx
.text:00403F06                 mov     ecx, [esp+59Ch+arg_4]
.text:00403F0D                 sub     ecx, eax
.text:00403F0F                 cmp     edi, ecx
.text:00403F11                 jnb     loc_403567
.text:00403F17                 mov     edx, [esp+59Ch+var_508]
.text:00403F1E                 test    edx, edx
.text:00403F20                 jz      loc_403C7D
.text:00403F26                 test    ebx, ebx
.text:00403F28                 jle     short loc_403F5A
.text:00403F2A                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00403F32                 jz      loc_403FF7
.text:00403F38                 mov     [esp+59Ch+State], ebx ; Size
.text:00403F3C                 mov     ecx, [esp+59Ch+var_508]
.text:00403F43                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00403F4B                 mov     [esp+59Ch+Str], ecx ; void *
.text:00403F4E
.text:00403F4E loc_403F4E:                             ; CODE XREF: sub_403410+BFD↓j
.text:00403F4E                 call    memset
.text:00403F53                 add     [esp+59Ch+var_508], ebx
.text:00403F5A
.text:00403F5A loc_403F5A:                             ; CODE XREF: sub_403410+B18↑j
.text:00403F5A                 mov     edx, [esp+59Ch+var_528]
.text:00403F5E                 test    edx, edx
.text:00403F60                 jz      short loc_403FDA
.text:00403F62                 mov     ebx, [esp+59Ch+Size]
.text:00403F66                 mov     eax, [esp+59Ch+Size]
.text:00403F6A                 dec     ebx
.text:00403F6B                 test    eax, eax
.text:00403F6D                 jz      short loc_403FAB
.text:00403F6F
.text:00403F6F loc_403F6F:                             ; CODE XREF: sub_403410+B99↓j
.text:00403F6F                 movzx   edx, byte ptr [ebx+esi]
.text:00403F73                 mov     eax, ds:__mb_cur_max
.text:00403F78                 movzx   ecx, dl
.text:00403F7B                 cmp     dword ptr [eax], 1
.text:00403F7E                 jz      short loc_403FCA
.text:00403F80                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:00403F88                 mov     [esp+59Ch+Str], ecx ; C
.text:00403F8B                 call    _isctype
.text:00403F90                 movzx   edx, byte ptr [ebx+esi]
.text:00403F94
.text:00403F94 loc_403F94:                             ; CODE XREF: sub_403410+BC8↓j
.text:00403F94                 test    eax, eax
.text:00403F96                 mov     cl, dl
.text:00403F98                 jnz     short loc_403FBB
.text:00403F9A
.text:00403F9A loc_403F9A:                             ; CODE XREF: sub_403410+BB8↓j
.text:00403F9A                 mov     eax, [esp+59Ch+var_508]
.text:00403FA1                 mov     edx, ebx
.text:00403FA3                 mov     [ebx+eax], cl
.text:00403FA6                 dec     ebx
.text:00403FA7                 test    edx, edx
.text:00403FA9                 jnz     short loc_403F6F
.text:00403FAB
.text:00403FAB loc_403FAB:                             ; CODE XREF: sub_403410+B5D↑j
.text:00403FAB                                         ; sub_403410+BE5↓j
.text:00403FAB                 mov     ecx, [esp+59Ch+Size]
.text:00403FAF                 add     [esp+59Ch+var_508], ecx
.text:00403FB6                 jmp     loc_403C7D
.text:00403FBB ; ---------------------------------------------------------------------------
.text:00403FBB
.text:00403FBB loc_403FBB:                             ; CODE XREF: sub_403410+B88↑j
.text:00403FBB                 movzx   ecx, dl
.text:00403FBE                 mov     [esp+59Ch+Str], ecx ; C
.text:00403FC1                 call    toupper
.text:00403FC6                 mov     cl, al
.text:00403FC8                 jmp     short loc_403F9A
.text:00403FCA ; ---------------------------------------------------------------------------
.text:00403FCA
.text:00403FCA loc_403FCA:                             ; CODE XREF: sub_403410+B6E↑j
.text:00403FCA                 mov     eax, ds:_pctype
.text:00403FCF                 mov     eax, [eax]
.text:00403FD1                 movzx   eax, word ptr [eax+ecx*2]
.text:00403FD5                 and     eax, 2
.text:00403FD8                 jmp     short loc_403F94
.text:00403FDA ; ---------------------------------------------------------------------------
.text:00403FDA
.text:00403FDA loc_403FDA:                             ; CODE XREF: sub_403410+B50↑j
.text:00403FDA                 mov     [esp+59Ch+SizeInBytes], esi ; Src
.text:00403FDE                 mov     ebx, [esp+59Ch+Size]
.text:00403FE2                 mov     esi, [esp+59Ch+var_508]
.text:00403FE9                 mov     [esp+59Ch+State], ebx ; Size
.text:00403FED                 mov     [esp+59Ch+Str], esi ; void *
.text:00403FF0                 call    memcpy
.text:00403FF5                 jmp     short loc_403FAB
.text:00403FF7 ; ---------------------------------------------------------------------------
.text:00403FF7
.text:00403FF7 loc_403FF7:                             ; CODE XREF: sub_403410+B22↑j
.text:00403FF7                 mov     [esp+59Ch+State], ebx
.text:00403FFB                 mov     eax, [esp+59Ch+var_508]
.text:00404002                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040400A                 mov     [esp+59Ch+Str], eax
.text:0040400D                 jmp     loc_403F4E
.text:00404012 ; ---------------------------------------------------------------------------
.text:00404012
.text:00404012 loc_404012:                             ; CODE XREF: sub_403410+A43↑j
.text:00404012                 mov     ecx, [esp+59Ch+arg_4]
.text:00404019                 xor     edx, edx
.text:0040401B                 mov     eax, [esp+59Ch+var_504]
.text:00404022                 sub     ecx, eax
.text:00404024                 cmp     ebx, ecx
.text:00404026                 jnb     loc_403567
.text:0040402C                 mov     edx, [esp+59Ch+var_508]
.text:00404033                 test    edx, edx
.text:00404035                 jz      short loc_404059
.text:00404037                 mov     [esp+59Ch+State], ebx ; Size
.text:0040403B                 mov     ecx, [esp+59Ch+var_508]
.text:00404042                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040404A                 mov     [esp+59Ch+Str], ecx ; void *
.text:0040404D                 call    memset
.text:00404052                 add     [esp+59Ch+var_508], ebx
.text:00404059
.text:00404059 loc_404059:                             ; CODE XREF: sub_403410+C25↑j
.text:00404059                 add     [esp+59Ch+var_504], ebx
.text:00404060                 mov     ecx, edi
.text:00404062                 sub     ecx, ebx
.text:00404064                 xor     edx, edx
.text:00404066                 cmp     edi, ebx
.text:00404068                 setle   dl
.text:0040406B                 lea     edi, [edx-1]
.text:0040406E                 and     edi, ecx
.text:00404070                 jmp     loc_403EDE
.text:00404075 ; ---------------------------------------------------------------------------
.text:00404075
.text:00404075 loc_404075:                             ; CODE XREF: sub_403410+A13↑j
.text:00404075                 lea     ebx, [esp+59Ch+var_2C]
.text:0040407C                 mov     [esp+59Ch+var_564], ebx
.text:00404080                 jmp     loc_403EDE
.text:00404085 ; ---------------------------------------------------------------------------
.text:00404085
.text:00404085 loc_404085:                             ; CODE XREF: sub_403410+9BD↑j
.text:00404085                 test    ecx, ecx
.text:00404087                 jns     loc_403B3B      ; jumptable 0040372F case 114
.text:0040408D                 jmp     loc_403DD3
.text:00404092 ; ---------------------------------------------------------------------------
.text:00404092
.text:00404092 loc_404092:                             ; CODE XREF: sub_403410+98A↑j
.text:00404092                 mov     ebx, 1
.text:00404097                 mov     [esp+59Ch+var_518], ebx
.text:0040409E                 jmp     loc_403DA0
.text:004040A3 ; ---------------------------------------------------------------------------
.text:004040A3
.text:004040A3 loc_4040A3:                             ; CODE XREF: sub_403410+31F↑j
.text:004040A3                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:004040A3                 mov     [esp+59Ch+var_520], (offset loc_4033E3+1) ; jumptable 0040372F case 68
.text:004040AB
.text:004040AB loc_4040AB:                             ; CODE XREF: sub_403410+E56↓j
.text:004040AB                 mov     eax, [esp+59Ch+var_514]
.text:004040B2                 test    eax, eax
.text:004040B4                 jnz     def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004040BA
.text:004040BA loc_4040BA:                             ; CODE XREF: sub_403410+F92↓j
.text:004040BA                                         ; sub_403410+FD8↓j
.text:004040BA                 mov     [esp+59Ch+SizeInBytes], 0FFFFFFFFh ; int
.text:004040C2                 mov     ebx, [esp+59Ch+arg_14]
.text:004040C9                 mov     ecx, [esp+59Ch+arg_C]
.text:004040D0                 mov     [esp+59Ch+Str], 0 ; int
.text:004040D7                 mov     eax, [esp+59Ch+arg_10]
.text:004040DE                 mov     esi, [esp+59Ch+var_508]
.text:004040E5                 mov     [esp+59Ch+var_588], ebx ; int
.text:004040E9                 mov     ebx, [esp+59Ch+var_520]
.text:004040ED                 mov     [esp+59Ch+Tm], ecx ; struct tm *
.text:004040F1                 mov     [esp+59Ch+var_58C], eax ; int
.text:004040F5                 mov     [esp+59Ch+State], ebx ; char *
.text:004040F9                 mov     ebx, edi
.text:004040FB                 call    sub_403410
.text:00404100                 mov     [esp+59Ch+var_530], eax
.text:00404104                 sub     ebx, eax
.text:00404106                 mov     ecx, [esp+59Ch+arg_4]
.text:0040410D                 mov     edx, ebx
.text:0040410F                 mov     edi, [esp+59Ch+var_530]
.text:00404113                 shr     edx, 1Fh
.text:00404116                 mov     eax, [esp+59Ch+var_504]
.text:0040411D                 dec     edx
.text:0040411E                 and     edx, ebx
.text:00404120                 add     edi, edx
.text:00404122                 sub     ecx, eax
.text:00404124                 xor     edx, edx
.text:00404126                 cmp     edi, ecx
.text:00404128                 jnb     loc_403567
.text:0040412E                 mov     edx, [esp+59Ch+var_508]
.text:00404135                 test    edx, edx
.text:00404137                 jz      loc_4041C8
.text:0040413D                 test    ebx, ebx
.text:0040413F                 jle     short loc_404171
.text:00404141                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00404149                 jz      loc_404243
.text:0040414F                 mov     [esp+59Ch+State], ebx ; Size
.text:00404153                 mov     ecx, [esp+59Ch+var_508]
.text:0040415A                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00404162                 mov     [esp+59Ch+Str], ecx ; void *
.text:00404165
.text:00404165 loc_404165:                             ; CODE XREF: sub_403410+E49↓j
.text:00404165                 call    memset
.text:0040416A                 add     [esp+59Ch+var_508], ebx
.text:00404171
.text:00404171 loc_404171:                             ; CODE XREF: sub_403410+D2F↑j
.text:00404171                 mov     ecx, [esp+59Ch+arg_14]
.text:00404178                 mov     eax, [esp+59Ch+arg_10]
.text:0040417F                 mov     edx, [esp+59Ch+arg_C]
.text:00404186                 mov     [esp+59Ch+var_588], ecx ; int
.text:0040418A                 mov     ebx, [esp+59Ch+var_520]
.text:0040418E                 mov     ecx, [esp+59Ch+arg_4]
.text:00404195                 mov     [esp+59Ch+var_58C], eax ; int
.text:00404199                 mov     eax, [esp+59Ch+var_504]
.text:004041A0                 mov     [esp+59Ch+Tm], edx ; struct tm *
.text:004041A4                 mov     edx, [esp+59Ch+var_508]
.text:004041AB                 sub     ecx, eax
.text:004041AD                 mov     [esp+59Ch+State], ebx ; char *
.text:004041B1                 mov     [esp+59Ch+SizeInBytes], ecx ; int
.text:004041B5                 mov     [esp+59Ch+Str], edx ; int
.text:004041B8                 call    sub_403410
.text:004041BD                 mov     ebx, [esp+59Ch+var_530]
.text:004041C1                 add     [esp+59Ch+var_508], ebx
.text:004041C8
.text:004041C8 loc_4041C8:                             ; CODE XREF: sub_403410+D27↑j
.text:004041C8                 add     [esp+59Ch+var_504], edi
.text:004041CF                 mov     edi, [esp+59Ch+var_528]
.text:004041D3                 test    edi, edi
.text:004041D5                 jz      loc_40352A
.text:004041DB                 cmp     esi, [esp+59Ch+var_508]
.text:004041E2                 jnb     loc_40352A
.text:004041E8
.text:004041E8 loc_4041E8:                             ; CODE XREF: sub_403410+E0C↓j
.text:004041E8                 movzx   edx, byte ptr [esi]
.text:004041EB                 mov     ebx, ds:__mb_cur_max
.text:004041F1                 movzx   ecx, dl
.text:004041F4                 cmp     dword ptr [ebx], 1
.text:004041F7                 jz      short loc_404232
.text:004041F9                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:00404201                 mov     [esp+59Ch+Str], ecx ; C
.text:00404204                 call    _isctype
.text:00404209                 movzx   edx, byte ptr [esi]
.text:0040420C
.text:0040420C loc_40420C:                             ; CODE XREF: sub_403410+E31↓j
.text:0040420C                 test    eax, eax
.text:0040420E                 mov     cl, dl
.text:00404210                 jnz     short loc_404223
.text:00404212
.text:00404212 loc_404212:                             ; CODE XREF: sub_403410+E20↓j
.text:00404212                 mov     [esi], cl
.text:00404214                 inc     esi
.text:00404215                 cmp     esi, [esp+59Ch+var_508]
.text:0040421C                 jb      short loc_4041E8
.text:0040421E                 jmp     loc_40352A
.text:00404223 ; ---------------------------------------------------------------------------
.text:00404223
.text:00404223 loc_404223:                             ; CODE XREF: sub_403410+E00↑j
.text:00404223                 movzx   ecx, dl
.text:00404226                 mov     [esp+59Ch+Str], ecx ; C
.text:00404229                 call    toupper
.text:0040422E                 mov     cl, al
.text:00404230                 jmp     short loc_404212
.text:00404232 ; ---------------------------------------------------------------------------
.text:00404232
.text:00404232 loc_404232:                             ; CODE XREF: sub_403410+DE7↑j
.text:00404232                 mov     ebx, ds:_pctype
.text:00404238                 mov     edi, [ebx]
.text:0040423A                 movzx   eax, word ptr [edi+ecx*2]
.text:0040423E                 and     eax, 2
.text:00404241                 jmp     short loc_40420C
.text:00404243 ; ---------------------------------------------------------------------------
.text:00404243
.text:00404243 loc_404243:                             ; CODE XREF: sub_403410+D39↑j
.text:00404243                 mov     [esp+59Ch+State], ebx
.text:00404247                 mov     eax, [esp+59Ch+var_508]
.text:0040424E                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:00404256                 mov     [esp+59Ch+Str], eax
.text:00404259                 jmp     loc_404165
.text:0040425E ; ---------------------------------------------------------------------------
.text:0040425E
.text:0040425E loc_40425E:                             ; CODE XREF: sub_403410+31F↑j
.text:0040425E                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:0040425E                 mov     [esp+59Ch+var_520], (offset loc_4033EA+3) ; jumptable 0040372F case 70
.text:00404266                 jmp     loc_4040AB
.text:0040426B ; ---------------------------------------------------------------------------
.text:0040426B
.text:0040426B loc_40426B:                             ; CODE XREF: sub_403410+31F↑j
.text:0040426B                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:0040426B                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 72
.text:00404273                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404279                 mov     [esp+59Ch+var_518], edi
.text:00404280                 cmp     edi, 2
.text:00404283                 jl      short loc_404294
.text:00404285
.text:00404285 loc_404285:                             ; CODE XREF: sub_403410+E90↓j
.text:00404285                 mov     esi, [esp+59Ch+arg_C]
.text:0040428C                 mov     ecx, [esi+8]
.text:0040428F                 jmp     loc_403DC5
.text:00404294 ; ---------------------------------------------------------------------------
.text:00404294
.text:00404294 loc_404294:                             ; CODE XREF: sub_403410+E73↑j
.text:00404294                 mov     edx, 2
.text:00404299                 mov     [esp+59Ch+var_518], edx
.text:004042A0                 jmp     short loc_404285
.text:004042A2 ; ---------------------------------------------------------------------------
.text:004042A2
.text:004042A2 loc_4042A2:                             ; CODE XREF: sub_403410+31F↑j
.text:004042A2                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:004042A2                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 73
.text:004042AA                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004042B0                 mov     [esp+59Ch+var_518], edi
.text:004042B7                 cmp     edi, 2
.text:004042BA                 jl      short loc_4042C8
.text:004042BC
.text:004042BC loc_4042BC:                             ; CODE XREF: sub_403410+EC4↓j
.text:004042BC                 mov     ecx, [esp+59Ch+var_4FC]
.text:004042C3                 jmp     loc_403DC5
.text:004042C8 ; ---------------------------------------------------------------------------
.text:004042C8
.text:004042C8 loc_4042C8:                             ; CODE XREF: sub_403410+EAA↑j
.text:004042C8                 mov     ebx, 2
.text:004042CD                 mov     [esp+59Ch+var_518], ebx
.text:004042D4                 jmp     short loc_4042BC
.text:004042D6 ; ---------------------------------------------------------------------------
.text:004042D6
.text:004042D6 loc_4042D6:                             ; CODE XREF: sub_403410+31F↑j
.text:004042D6                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:004042D6                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 77
.text:004042DE                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004042E4                 mov     [esp+59Ch+var_518], edi
.text:004042EB                 cmp     edi, 2
.text:004042EE                 jl      short loc_4042FF
.text:004042F0
.text:004042F0 loc_4042F0:                             ; CODE XREF: sub_403410+EFB↓j
.text:004042F0                 mov     eax, [esp+59Ch+arg_C]
.text:004042F7                 mov     ecx, [eax+4]
.text:004042FA                 jmp     loc_403DC5
.text:004042FF ; ---------------------------------------------------------------------------
.text:004042FF
.text:004042FF loc_4042FF:                             ; CODE XREF: sub_403410+EDE↑j
.text:004042FF                 mov     ecx, 2
.text:00404304                 mov     [esp+59Ch+var_518], ecx
.text:0040430B                 jmp     short loc_4042F0
.text:0040430B ; ---------------------------------------------------------------------------
.text:0040430D                 align 10h
.text:00404310
.text:00404310 loc_404310:                             ; CODE XREF: sub_403410+31F↑j
.text:00404310                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404310                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 78
.text:00404318                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040431E                 cmp     edi, 0FFFFFFFFh
.text:00404321                 mov     ecx, [esp+59Ch+arg_14]
.text:00404328                 jz      short loc_40434C
.text:0040432A                 cmp     edi, 8
.text:0040432D                 mov     ebx, edi
.text:0040432F                 jg      short loc_40434C
.text:00404331                 mov     esi, 66666667h
.text:00404336
.text:00404336 loc_404336:                             ; CODE XREF: sub_403410+F3A↓j
.text:00404336                 mov     eax, ecx
.text:00404338                 inc     ebx
.text:00404339                 imul    esi
.text:0040433B                 mov     eax, ecx
.text:0040433D                 sar     eax, 1Fh
.text:00404340                 sar     edx, 2
.text:00404343                 mov     ecx, edx
.text:00404345                 sub     ecx, eax
.text:00404347                 cmp     ebx, 8
.text:0040434A                 jle     short loc_404336
.text:0040434C
.text:0040434C loc_40434C:                             ; CODE XREF: sub_403410+F18↑j
.text:0040434C                                         ; sub_403410+F1F↑j
.text:0040434C                 mov     [esp+59Ch+var_518], edi
.text:00404353                 cmp     edi, 9
.text:00404356                 jge     loc_403DC5
.text:0040435C                 mov     eax, 9
.text:00404361                 mov     [esp+59Ch+var_518], eax
.text:00404368                 jmp     loc_403DC5
.text:0040436D ; ---------------------------------------------------------------------------
.text:0040436D
.text:0040436D loc_40436D:                             ; CODE XREF: sub_403410+31F↑j
.text:0040436D                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:0040436D                 mov     [esp+59Ch+var_524], 1 ; jumptable 0040372F case 80
.text:00404375                 mov     [esp+59Ch+var_52C], 70h ; 'p'
.text:0040437D
.text:0040437D loc_40437D:                             ; CODE XREF: sub_403410+31F↑j
.text:0040437D                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:0040437D                 test    ebx, ebx        ; jumptable 0040372F case 112
.text:0040437F                 jz      loc_403B3B      ; jumptable 0040372F case 114
.text:00404385                 mov     [esp+59Ch+var_528], 0
.text:0040438D                 mov     [esp+59Ch+var_524], 1
.text:00404395                 jmp     loc_403B3B      ; jumptable 0040372F case 114
.text:0040439A ; ---------------------------------------------------------------------------
.text:0040439A
.text:0040439A loc_40439A:                             ; CODE XREF: sub_403410+31F↑j
.text:0040439A                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:0040439A                 mov     [esp+59Ch+var_520], (offset loc_4033F4+2) ; jumptable 0040372F case 82
.text:004043A2                 jmp     loc_4040BA
.text:004043A7 ; ---------------------------------------------------------------------------
.text:004043A7
.text:004043A7 loc_4043A7:                             ; CODE XREF: sub_403410+31F↑j
.text:004043A7                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:004043A7                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 83
.text:004043AF                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004043B5                 mov     [esp+59Ch+var_518], edi
.text:004043BC                 cmp     edi, 2
.text:004043BF                 jl      short loc_4043CF
.text:004043C1
.text:004043C1 loc_4043C1:                             ; CODE XREF: sub_403410+FCB↓j
.text:004043C1                 mov     esi, [esp+59Ch+arg_C]
.text:004043C8                 mov     ecx, [esi]
.text:004043CA                 jmp     loc_403DC5
.text:004043CF ; ---------------------------------------------------------------------------
.text:004043CF
.text:004043CF loc_4043CF:                             ; CODE XREF: sub_403410+FAF↑j
.text:004043CF                 mov     ebx, 2
.text:004043D4                 mov     [esp+59Ch+var_518], ebx
.text:004043DB                 jmp     short loc_4043C1
.text:004043DB ; ---------------------------------------------------------------------------
.text:004043DD                 align 10h
.text:004043E0
.text:004043E0 loc_4043E0:                             ; CODE XREF: sub_403410+31F↑j
.text:004043E0                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:004043E0                 mov     [esp+59Ch+var_520], (offset loc_4033FB+1) ; jumptable 0040372F case 84
.text:004043E8                 jmp     loc_4040BA
.text:004043ED ; ---------------------------------------------------------------------------
.text:004043ED
.text:004043ED loc_4043ED:                             ; CODE XREF: sub_403410+31F↑j
.text:004043ED                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:004043ED                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 85
.text:004043F5                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004043FB                 mov     [esp+59Ch+var_518], edi
.text:00404402                 cmp     edi, 2
.text:00404405                 jl      short loc_404434
.text:00404407
.text:00404407 loc_404407:                             ; CODE XREF: sub_403410+1030↓j
.text:00404407                 mov     eax, [esp+59Ch+arg_C]
.text:0040440E                 mov     ebx, [eax+18h]
.text:00404411                 mov     esi, [eax+1Ch]
.text:00404414                 sub     esi, ebx
.text:00404416                 lea     ebx, [esi+7]
.text:00404419                 mov     eax, ebx
.text:0040441B                 mov     esi, 92492493h
.text:00404420                 imul    esi
.text:00404422
.text:00404422 loc_404422:                             ; CODE XREF: sub_403410+108C↓j
.text:00404422                 lea     ecx, [ebx+edx]
.text:00404425                 mov     eax, ebx
.text:00404427                 sar     ecx, 2
.text:0040442A                 sar     eax, 1Fh
.text:0040442D
.text:0040442D loc_40442D:                             ; CODE XREF: sub_403410+1590↓j
.text:0040442D                 sub     ecx, eax
.text:0040442F                 jmp     loc_403DC5
.text:00404434 ; ---------------------------------------------------------------------------
.text:00404434
.text:00404434 loc_404434:                             ; CODE XREF: sub_403410+FF5↑j
.text:00404434                 mov     edx, 2
.text:00404439                 mov     [esp+59Ch+var_518], edx
.text:00404440                 jmp     short loc_404407
.text:00404442 ; ---------------------------------------------------------------------------
.text:00404442
.text:00404442 loc_404442:                             ; CODE XREF: sub_403410+31F↑j
.text:00404442                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404442                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 87
.text:0040444A                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404450                 mov     [esp+59Ch+var_518], edi
.text:00404457                 cmp     edi, 2
.text:0040445A                 jl      short loc_40449E
.text:0040445C
.text:0040445C loc_40445C:                             ; CODE XREF: sub_403410+109A↓j
.text:0040445C                 mov     ecx, [esp+59Ch+arg_C]
.text:00404463                 mov     ebx, [ecx+18h]
.text:00404466                 mov     ecx, 92492493h
.text:0040446B                 add     ebx, 6
.text:0040446E                 mov     eax, ebx
.text:00404470                 mov     esi, ebx
.text:00404472                 imul    ecx
.text:00404474                 mov     eax, [esp+59Ch+arg_C]
.text:0040447B                 sar     esi, 1Fh
.text:0040447E                 add     edx, ebx
.text:00404480                 sar     edx, 2
.text:00404483                 sub     edx, esi
.text:00404485                 lea     esi, ds:0[edx*8]
.text:0040448C                 sub     esi, edx
.text:0040448E                 sub     ebx, esi
.text:00404490                 mov     esi, [eax+1Ch]
.text:00404493                 sub     esi, ebx
.text:00404495                 lea     ebx, [esi+7]
.text:00404498                 mov     eax, ebx
.text:0040449A                 imul    ecx
.text:0040449C                 jmp     short loc_404422
.text:0040449E ; ---------------------------------------------------------------------------
.text:0040449E
.text:0040449E loc_40449E:                             ; CODE XREF: sub_403410+104A↑j
.text:0040449E                 mov     edx, 2
.text:004044A3                 mov     [esp+59Ch+var_518], edx
.text:004044AA                 jmp     short loc_40445C
.text:004044AA ; ---------------------------------------------------------------------------
.text:004044AC                 align 10h
.text:004044B0
.text:004044B0 loc_4044B0:                             ; CODE XREF: sub_403410+31F↑j
.text:004044B0                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:004044B0                 cmp     [esp+59Ch+var_514], 4Fh ; 'O' ; jumptable 0040372F cases 88,99,120
.text:004044B8                 jnz     loc_403B3B      ; jumptable 0040372F case 114
.text:004044BE                 jmp     def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004044C3 ; ---------------------------------------------------------------------------
.text:004044C3
.text:004044C3 loc_4044C3:                             ; CODE XREF: sub_403410+31F↑j
.text:004044C3                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:004044C3                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 89
.text:004044CB                 jz      loc_403B3B      ; jumptable 0040372F case 114
.text:004044D1                 cmp     [esp+59Ch+var_514], 4Fh ; 'O'
.text:004044D9                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004044DF                 mov     [esp+59Ch+var_518], edi
.text:004044E6                 cmp     edi, 1
.text:004044E9                 jl      short loc_404500
.text:004044EB
.text:004044EB loc_4044EB:                             ; CODE XREF: sub_403410+10FC↓j
.text:004044EB                 mov     esi, [esp+59Ch+arg_C]
.text:004044F2                 mov     ecx, [esi+14h]
.text:004044F5                 add     ecx, 76Ch
.text:004044FB                 jmp     loc_403DC5
.text:00404500 ; ---------------------------------------------------------------------------
.text:00404500
.text:00404500 loc_404500:                             ; CODE XREF: sub_403410+10D9↑j
.text:00404500                 mov     edx, 1
.text:00404505                 mov     [esp+59Ch+var_518], edx
.text:0040450C                 jmp     short loc_4044EB
.text:0040450C ; ---------------------------------------------------------------------------
.text:0040450E                 align 10h
.text:00404510
.text:00404510 loc_404510:                             ; CODE XREF: sub_403410+31F↑j
.text:00404510                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404510                 test    ebx, ebx        ; jumptable 0040372F case 90
.text:00404512                 jz      short loc_404524
.text:00404514                 mov     [esp+59Ch+var_528], 0
.text:0040451C                 mov     [esp+59Ch+var_524], 1
.text:00404524
.text:00404524 loc_404524:                             ; CODE XREF: sub_403410+1102↑j
.text:00404524                 mov     eax, [esp+59Ch+var_500]
.text:0040452B                 test    eax, eax
.text:0040452D                 jz      short loc_40453B
.text:0040452F                 mov     esi, [esp+59Ch+var_500]
.text:00404536                 cmp     byte ptr [esi], 0
.text:00404539                 jnz     short loc_404559
.text:0040453B
.text:0040453B loc_40453B:                             ; CODE XREF: sub_403410+111D↑j
.text:0040453B                 mov     ebx, [esp+59Ch+arg_C]
.text:00404542                 mov     edx, [ebx+20h]
.text:00404545                 test    edx, edx
.text:00404547                 js      short loc_404559
.text:00404549                 mov     esi, ds:_tzname
.text:0040454F                 mov     ecx, [esi+edx*4]
.text:00404552                 mov     [esp+59Ch+var_500], ecx
.text:00404559
.text:00404559 loc_404559:                             ; CODE XREF: sub_403410+1129↑j
.text:00404559                                         ; sub_403410+1137↑j
.text:00404559                 mov     edx, [esp+59Ch+var_500]
.text:00404560                 test    edx, edx
.text:00404562                 jz      loc_404712
.text:00404568
.text:00404568 loc_404568:                             ; CODE XREF: sub_403410+130E↓j
.text:00404568                 mov     ebx, [esp+59Ch+var_500]
.text:0040456F                 mov     [esp+59Ch+Str], ebx ; Str
.text:00404572                 mov     ebx, edi
.text:00404574                 call    strlen
.text:00404579                 sub     ebx, eax
.text:0040457B                 mov     esi, eax
.text:0040457D                 mov     ecx, [esp+59Ch+arg_4]
.text:00404584                 mov     edx, ebx
.text:00404586                 shr     edx, 1Fh
.text:00404589                 dec     edx
.text:0040458A                 and     edx, ebx
.text:0040458C                 lea     edi, [edx+eax]
.text:0040458F                 mov     eax, [esp+59Ch+var_504]
.text:00404596                 xor     edx, edx
.text:00404598                 sub     ecx, eax
.text:0040459A                 cmp     edi, ecx
.text:0040459C                 jnb     loc_403567
.text:004045A2                 mov     ecx, [esp+59Ch+var_508]
.text:004045A9                 test    ecx, ecx
.text:004045AB                 jz      loc_403C7D
.text:004045B1                 test    ebx, ebx
.text:004045B3                 jle     short loc_4045E5
.text:004045B5                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:004045BD                 jz      loc_4046F7
.text:004045C3                 mov     [esp+59Ch+State], ebx ; Size
.text:004045C7                 mov     edx, [esp+59Ch+var_508]
.text:004045CE                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:004045D6                 mov     [esp+59Ch+Str], edx ; void *
.text:004045D9
.text:004045D9 loc_4045D9:                             ; CODE XREF: sub_403410+12FD↓j
.text:004045D9                 call    memset
.text:004045DE                 add     [esp+59Ch+var_508], ebx
.text:004045E5
.text:004045E5 loc_4045E5:                             ; CODE XREF: sub_403410+11A3↑j
.text:004045E5                 mov     ebx, [esp+59Ch+var_524]
.text:004045E9                 test    ebx, ebx
.text:004045EB                 jz      short loc_404666
.text:004045ED                 test    esi, esi
.text:004045EF                 lea     ebx, [esi-1]
.text:004045F2                 jz      loc_403C76
.text:004045F8
.text:004045F8 loc_4045F8:                             ; CODE XREF: sub_403410+1230↓j
.text:004045F8                 mov     ecx, [esp+59Ch+var_500]
.text:004045FF                 mov     eax, ds:__mb_cur_max
.text:00404604                 movzx   edx, byte ptr [ebx+ecx]
.text:00404608                 cmp     dword ptr [eax], 1
.text:0040460B                 movzx   ecx, dl
.text:0040460E                 jz      short loc_404656
.text:00404610                 mov     [esp+59Ch+Str], ecx ; C
.text:00404613                 mov     [esp+59Ch+SizeInBytes], 1 ; Type
.text:0040461B                 call    _isctype
.text:00404620                 mov     ecx, [esp+59Ch+var_500]
.text:00404627                 movzx   edx, byte ptr [ebx+ecx]
.text:0040462B
.text:0040462B loc_40462B:                             ; CODE XREF: sub_403410+1254↓j
.text:0040462B                 test    eax, eax
.text:0040462D                 mov     cl, dl
.text:0040462F                 jnz     short loc_404647
.text:00404631
.text:00404631 loc_404631:                             ; CODE XREF: sub_403410+1244↓j
.text:00404631                 mov     edx, [esp+59Ch+var_508]
.text:00404638                 mov     [ebx+edx], cl
.text:0040463B                 mov     edx, ebx
.text:0040463D                 dec     ebx
.text:0040463E                 test    edx, edx
.text:00404640                 jnz     short loc_4045F8
.text:00404642                 jmp     loc_403C76
.text:00404647 ; ---------------------------------------------------------------------------
.text:00404647
.text:00404647 loc_404647:                             ; CODE XREF: sub_403410+121F↑j
.text:00404647                 movzx   ecx, dl
.text:0040464A                 mov     [esp+59Ch+Str], ecx ; C
.text:0040464D                 call    tolower
.text:00404652                 mov     cl, al
.text:00404654                 jmp     short loc_404631
.text:00404656 ; ---------------------------------------------------------------------------
.text:00404656
.text:00404656 loc_404656:                             ; CODE XREF: sub_403410+11FE↑j
.text:00404656                 mov     eax, ds:_pctype
.text:0040465B                 mov     eax, [eax]
.text:0040465D                 movzx   eax, word ptr [eax+ecx*2]
.text:00404661                 and     eax, 1
.text:00404664                 jmp     short loc_40462B
.text:00404666 ; ---------------------------------------------------------------------------
.text:00404666
.text:00404666 loc_404666:                             ; CODE XREF: sub_403410+11DB↑j
.text:00404666                 mov     eax, [esp+59Ch+var_528]
.text:0040466A                 test    eax, eax
.text:0040466C                 jz      short loc_4046E7
.text:0040466E                 test    esi, esi
.text:00404670                 lea     ebx, [esi-1]
.text:00404673                 jz      loc_403C76
.text:00404679
.text:00404679 loc_404679:                             ; CODE XREF: sub_403410+12B1↓j
.text:00404679                 mov     eax, [esp+59Ch+var_500]
.text:00404680                 movzx   edx, byte ptr [ebx+eax]
.text:00404684                 mov     eax, ds:__mb_cur_max
.text:00404689                 movzx   ecx, dl
.text:0040468C                 cmp     dword ptr [eax], 1
.text:0040468F                 jz      short loc_4046D7
.text:00404691                 mov     [esp+59Ch+Str], ecx ; C
.text:00404694                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:0040469C                 call    _isctype
.text:004046A1                 mov     ecx, [esp+59Ch+var_500]
.text:004046A8                 movzx   edx, byte ptr [ebx+ecx]
.text:004046AC
.text:004046AC loc_4046AC:                             ; CODE XREF: sub_403410+12D5↓j
.text:004046AC                 test    eax, eax
.text:004046AE                 mov     cl, dl
.text:004046B0                 jnz     short loc_4046C8
.text:004046B2
.text:004046B2 loc_4046B2:                             ; CODE XREF: sub_403410+12C5↓j
.text:004046B2                 mov     edx, [esp+59Ch+var_508]
.text:004046B9                 mov     [ebx+edx], cl
.text:004046BC                 mov     edx, ebx
.text:004046BE                 dec     ebx
.text:004046BF                 test    edx, edx
.text:004046C1                 jnz     short loc_404679
.text:004046C3                 jmp     loc_403C76
.text:004046C8 ; ---------------------------------------------------------------------------
.text:004046C8
.text:004046C8 loc_4046C8:                             ; CODE XREF: sub_403410+12A0↑j
.text:004046C8                 movzx   ecx, dl
.text:004046CB                 mov     [esp+59Ch+Str], ecx ; C
.text:004046CE                 call    toupper
.text:004046D3                 mov     cl, al
.text:004046D5                 jmp     short loc_4046B2
.text:004046D7 ; ---------------------------------------------------------------------------
.text:004046D7
.text:004046D7 loc_4046D7:                             ; CODE XREF: sub_403410+127F↑j
.text:004046D7                 mov     eax, ds:_pctype
.text:004046DC                 mov     eax, [eax]
.text:004046DE                 movzx   eax, word ptr [eax+ecx*2]
.text:004046E2                 and     eax, 2
.text:004046E5                 jmp     short loc_4046AC
.text:004046E7 ; ---------------------------------------------------------------------------
.text:004046E7
.text:004046E7 loc_4046E7:                             ; CODE XREF: sub_403410+125C↑j
.text:004046E7                 mov     [esp+59Ch+State], esi
.text:004046EB                 mov     edx, [esp+59Ch+var_500]
.text:004046F2                 jmp     loc_403D2A
.text:004046F7 ; ---------------------------------------------------------------------------
.text:004046F7
.text:004046F7 loc_4046F7:                             ; CODE XREF: sub_403410+11AD↑j
.text:004046F7                 mov     [esp+59Ch+State], ebx
.text:004046FB                 mov     eax, [esp+59Ch+var_508]
.text:00404702                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040470A                 mov     [esp+59Ch+Str], eax
.text:0040470D                 jmp     loc_4045D9
.text:00404712 ; ---------------------------------------------------------------------------
.text:00404712
.text:00404712 loc_404712:                             ; CODE XREF: sub_403410+1152↑j
.text:00404712                 mov     eax, (offset loc_403401+4)
.text:00404717                 mov     [esp+59Ch+var_500], eax
.text:0040471E                 jmp     loc_404568
.text:00404723 ; ---------------------------------------------------------------------------
.text:00404723
.text:00404723 loc_404723:                             ; CODE XREF: sub_403410+31F↑j
.text:00404723                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404723                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 100
.text:0040472B                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404731                 mov     [esp+59Ch+var_518], edi
.text:00404738                 cmp     edi, 2
.text:0040473B                 jl      short loc_40474C
.text:0040473D
.text:0040473D loc_40473D:                             ; CODE XREF: sub_403410+1348↓j
.text:0040473D                 mov     eax, [esp+59Ch+arg_C]
.text:00404744                 mov     ecx, [eax+0Ch]
.text:00404747                 jmp     loc_403DC5
.text:0040474C ; ---------------------------------------------------------------------------
.text:0040474C
.text:0040474C loc_40474C:                             ; CODE XREF: sub_403410+132B↑j
.text:0040474C                 mov     ecx, 2
.text:00404751                 mov     [esp+59Ch+var_518], ecx
.text:00404758                 jmp     short loc_40473D
.text:00404758 ; ---------------------------------------------------------------------------
.text:0040475A                 align 10h
.text:00404760
.text:00404760 loc_404760:                             ; CODE XREF: sub_403410+31F↑j
.text:00404760                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404760                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 101
.text:00404768                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040476E                 mov     [esp+59Ch+var_518], edi
.text:00404775                 cmp     edi, 2
.text:00404778                 jl      short loc_4047B1
.text:0040477A
.text:0040477A loc_40477A:                             ; CODE XREF: sub_403410+13AD↓j
.text:0040477A                 mov     esi, [esp+59Ch+arg_C]
.text:00404781                 mov     ecx, [esi+0Ch]
.text:00404784
.text:00404784 loc_404784:                             ; CODE XREF: sub_403410+1702↓j
.text:00404784                                         ; sub_403410+1736↓j
.text:00404784                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040478C                 jz      loc_403DC5
.text:00404792                 cmp     [esp+59Ch+var_510], 2Dh ; '-'
.text:0040479A                 jz      loc_403DC5
.text:004047A0                 mov     eax, 5Fh ; '_'
.text:004047A5                 mov     [esp+59Ch+var_510], eax
.text:004047AC                 jmp     loc_403DC5
.text:004047B1 ; ---------------------------------------------------------------------------
.text:004047B1
.text:004047B1 loc_4047B1:                             ; CODE XREF: sub_403410+1368↑j
.text:004047B1                 mov     edx, 2
.text:004047B6                 mov     [esp+59Ch+var_518], edx
.text:004047BD                 jmp     short loc_40477A
.text:004047BD ; ---------------------------------------------------------------------------
.text:004047BF                 align 10h
.text:004047C0
.text:004047C0 loc_4047C0:                             ; CODE XREF: sub_403410+31F↑j
.text:004047C0                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:004047C0                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F cases 71,86,103
.text:004047C8                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004047CE                 mov     edx, [esp+59Ch+arg_C]
.text:004047D5                 mov     eax, [esp+59Ch+arg_C]
.text:004047DC                 mov     ebx, [edx+14h]
.text:004047DF                 mov     eax, [eax+18h]
.text:004047E2                 lea     esi, [ebx+76Ch]
.text:004047E8                 mov     [esp+59Ch+var_544], eax
.text:004047EC                 mov     [esp+59Ch+var_538], esi
.text:004047F0                 mov     esi, [edx+1Ch]
.text:004047F3                 mov     edx, [esp+59Ch+var_544]
.text:004047F7                 mov     [esp+59Ch+var_540], esi
.text:004047FB                 mov     eax, esi
.text:004047FD                 sub     eax, edx
.text:004047FF                 lea     esi, [eax+17Eh]
.text:00404805                 mov     edx, 92492493h
.text:0040480A                 mov     eax, esi
.text:0040480C                 imul    edx
.text:0040480E                 mov     eax, esi
.text:00404810                 sar     eax, 1Fh
.text:00404813                 add     edx, esi
.text:00404815                 sar     edx, 2
.text:00404818                 sub     edx, eax
.text:0040481A                 lea     eax, ds:0[edx*8]
.text:00404821                 sub     eax, edx
.text:00404823                 mov     edx, [esp+59Ch+var_540]
.text:00404827                 sub     esi, eax
.text:00404829                 sub     edx, esi
.text:0040482B                 add     edx, 3
.text:0040482E                 mov     [esp+59Ch+var_53C], edx
.text:00404832                 js      loc_4049D6
.text:00404838                 test    byte ptr [esp+59Ch+var_538], 3
.text:0040483D                 mov     [esp+59Ch+var_54C], 0
.text:00404845                 jnz     short loc_404899
.text:00404847                 mov     eax, [esp+59Ch+var_538]
.text:0040484B                 mov     ebx, 51EB851Fh
.text:00404850                 imul    ebx
.text:00404852                 mov     eax, [esp+59Ch+var_538]
.text:00404856                 mov     esi, edx
.text:00404858                 sar     edx, 5
.text:0040485B                 mov     [esp+59Ch+var_570], edx
.text:0040485F                 cdq
.text:00404860                 sub     [esp+59Ch+var_570], edx
.text:00404864                 mov     ebx, [esp+59Ch+var_570]
.text:00404868                 lea     eax, [ebx+ebx*4]
.text:0040486B                 lea     ebx, [eax+eax*4]
.text:0040486E                 mov     [esp+59Ch+var_57C], ebx
.text:00404872                 shl     ebx, 2
.text:00404875                 cmp     [esp+59Ch+var_538], ebx
.text:00404879                 jnz     short loc_404891
.text:0040487B                 mov     ebx, esi
.text:0040487D                 sar     ebx, 7
.text:00404880                 sub     ebx, edx
.text:00404882                 lea     esi, [ebx+ebx*4]
.text:00404885                 lea     edx, [esi+esi*4]
.text:00404888                 shl     edx, 4
.text:0040488B                 cmp     [esp+59Ch+var_538], edx
.text:0040488F                 jnz     short loc_404899
.text:00404891
.text:00404891 loc_404891:                             ; CODE XREF: sub_403410+1469↑j
.text:00404891                 mov     [esp+59Ch+var_54C], 1
.text:00404899
.text:00404899 loc_404899:                             ; CODE XREF: sub_403410+1435↑j
.text:00404899                                         ; sub_403410+147F↑j
.text:00404899                 mov     esi, [esp+59Ch+var_54C]
.text:0040489D                 mov     eax, [esp+59Ch+var_544]
.text:004048A1                 sub     [esp+59Ch+var_540], esi
.text:004048A5                 mov     ebx, [esp+59Ch+var_540]
.text:004048A9                 sub     ebx, 16Dh
.text:004048AF                 mov     edx, ebx
.text:004048B1                 sub     edx, eax
.text:004048B3                 lea     esi, [edx+17Eh]
.text:004048B9                 mov     eax, 92492493h
.text:004048BE                 imul    esi
.text:004048C0                 mov     eax, esi
.text:004048C2                 sar     eax, 1Fh
.text:004048C5                 lea     edx, [edx+esi]
.text:004048C8                 sar     edx, 2
.text:004048CB                 sub     edx, eax
.text:004048CD                 lea     eax, ds:0[edx*8]
.text:004048D4                 sub     eax, edx
.text:004048D6                 sub     esi, eax
.text:004048D8                 sub     ebx, esi
.text:004048DA                 mov     eax, ebx
.text:004048DC                 add     eax, 3
.text:004048DF                 js      short loc_4048E9
.text:004048E1                 inc     [esp+59Ch+var_538]
.text:004048E5                 mov     [esp+59Ch+var_53C], eax
.text:004048E9
.text:004048E9 loc_4048E9:                             ; CODE XREF: sub_403410+14CF↑j
.text:004048E9                                         ; sub_403410+1674↓j
.text:004048E9                 movsx   eax, cl
.text:004048EC                 cmp     eax, 47h ; 'G'
.text:004048EF                 jz      loc_4049B3
.text:004048F5                 cmp     eax, 67h ; 'g'
.text:004048F8                 jz      short loc_404940
.text:004048FA                 mov     [esp+59Ch+var_518], edi
.text:00404901                 cmp     edi, 2
.text:00404904                 jl      short loc_40492B
.text:00404906
.text:00404906 loc_404906:                             ; CODE XREF: sub_403410+1527↓j
.text:00404906                 mov     eax, [esp+59Ch+var_53C]
.text:0040490A                 mov     ebx, 92492493h
.text:0040490F                 mov     esi, [esp+59Ch+var_53C]
.text:00404913                 mov     ecx, [esp+59Ch+var_53C]
.text:00404917                 imul    ebx
.text:00404919                 sar     ecx, 1Fh
.text:0040491C                 add     edx, esi
.text:0040491E                 sar     edx, 2
.text:00404921                 sub     edx, ecx
.text:00404923                 lea     ecx, [edx+1]
.text:00404926                 jmp     loc_403DC5
.text:0040492B ; ---------------------------------------------------------------------------
.text:0040492B
.text:0040492B loc_40492B:                             ; CODE XREF: sub_403410+14F4↑j
.text:0040492B                 mov     ebx, 2
.text:00404930                 mov     [esp+59Ch+var_518], ebx
.text:00404937                 jmp     short loc_404906
.text:00404937 ; ---------------------------------------------------------------------------
.text:00404939                 align 10h
.text:00404940
.text:00404940 loc_404940:                             ; CODE XREF: sub_403410+14E8↑j
.text:00404940                 mov     [esp+59Ch+var_518], edi
.text:00404947                 cmp     edi, 2
.text:0040494A                 jl      short loc_4049A5
.text:0040494C
.text:0040494C loc_40494C:                             ; CODE XREF: sub_403410+15A1↓j
.text:0040494C                 mov     eax, [esp+59Ch+var_538]
.text:00404950                 mov     ebx, 51EB851Fh
.text:00404955                 imul    ebx
.text:00404957                 mov     eax, [esp+59Ch+var_538]
.text:0040495B                 mov     [esp+59Ch+var_578], edx
.text:0040495F                 mov     esi, [esp+59Ch+var_578]
.text:00404963                 cdq
.text:00404964                 sar     esi, 5
.text:00404967                 sub     esi, edx
.text:00404969                 lea     edx, [esi+esi*4]
.text:0040496C                 lea     ecx, [edx+edx*4]
.text:0040496F                 shl     ecx, 2
.text:00404972                 sub     [esp+59Ch+var_538], ecx
.text:00404976                 mov     esi, [esp+59Ch+var_538]
.text:0040497A
.text:0040497A loc_40497A:                             ; CODE XREF: sub_403410+1A3F↓j
.text:0040497A                 add     esi, 64h ; 'd'
.text:0040497D                 mov     eax, esi
.text:0040497F                 imul    ebx
.text:00404981                 mov     [esp+59Ch+var_578], edx
.text:00404985                 mov     ecx, [esp+59Ch+var_578]
.text:00404989                 mov     [esp+59Ch+var_57C], eax
.text:0040498D                 mov     eax, esi
.text:0040498F                 cdq
.text:00404990                 sar     ecx, 5
.text:00404993                 sub     ecx, edx
.text:00404995                 lea     edx, [ecx+ecx*4]
.text:00404998                 lea     eax, [edx+edx*4]
.text:0040499B                 mov     ecx, esi
.text:0040499D                 shl     eax, 2
.text:004049A0                 jmp     loc_40442D
.text:004049A5 ; ---------------------------------------------------------------------------
.text:004049A5
.text:004049A5 loc_4049A5:                             ; CODE XREF: sub_403410+153A↑j
.text:004049A5                 mov     ebx, 2
.text:004049AA                 mov     [esp+59Ch+var_518], ebx
.text:004049B1                 jmp     short loc_40494C
.text:004049B3 ; ---------------------------------------------------------------------------
.text:004049B3
.text:004049B3 loc_4049B3:                             ; CODE XREF: sub_403410+14DF↑j
.text:004049B3                 mov     [esp+59Ch+var_518], edi
.text:004049BA                 cmp     edi, 1
.text:004049BD                 jl      short loc_4049C8
.text:004049BF
.text:004049BF loc_4049BF:                             ; CODE XREF: sub_403410+15C4↓j
.text:004049BF                 mov     ecx, [esp+59Ch+var_538]
.text:004049C3                 jmp     loc_403DC5
.text:004049C8 ; ---------------------------------------------------------------------------
.text:004049C8
.text:004049C8 loc_4049C8:                             ; CODE XREF: sub_403410+15AD↑j
.text:004049C8                 mov     eax, 1
.text:004049CD                 mov     [esp+59Ch+var_518], eax
.text:004049D4                 jmp     short loc_4049BF
.text:004049D6 ; ---------------------------------------------------------------------------
.text:004049D6
.text:004049D6 loc_4049D6:                             ; CODE XREF: sub_403410+1422↑j
.text:004049D6                 mov     [esp+59Ch+var_548], 0
.text:004049DE                 add     ebx, 76Bh
.text:004049E4                 mov     [esp+59Ch+var_538], ebx
.text:004049E8                 test    byte ptr [esp+59Ch+var_538], 3
.text:004049ED                 jnz     short loc_404A3F
.text:004049EF                 mov     esi, 51EB851Fh
.text:004049F4                 mov     eax, ebx
.text:004049F6                 imul    esi
.text:004049F8                 mov     eax, [esp+59Ch+var_538]
.text:004049FC                 mov     esi, edx
.text:004049FE                 sar     edx, 5
.text:00404A01                 mov     [esp+59Ch+var_570], edx
.text:00404A05                 cdq
.text:00404A06                 sub     [esp+59Ch+var_570], edx
.text:00404A0A                 mov     ebx, [esp+59Ch+var_570]
.text:00404A0E                 lea     eax, [ebx+ebx*4]
.text:00404A11                 lea     ebx, [eax+eax*4]
.text:00404A14                 mov     [esp+59Ch+var_57C], ebx
.text:00404A18                 shl     ebx, 2
.text:00404A1B                 cmp     [esp+59Ch+var_538], ebx
.text:00404A1F                 jnz     short loc_404A37
.text:00404A21                 mov     ebx, esi
.text:00404A23                 sar     ebx, 7
.text:00404A26                 sub     ebx, edx
.text:00404A28                 lea     esi, [ebx+ebx*4]
.text:00404A2B                 lea     edx, [esi+esi*4]
.text:00404A2E                 shl     edx, 4
.text:00404A31                 cmp     [esp+59Ch+var_538], edx
.text:00404A35                 jnz     short loc_404A3F
.text:00404A37
.text:00404A37 loc_404A37:                             ; CODE XREF: sub_403410+160F↑j
.text:00404A37                 mov     [esp+59Ch+var_548], 1
.text:00404A3F
.text:00404A3F loc_404A3F:                             ; CODE XREF: sub_403410+15DD↑j
.text:00404A3F                                         ; sub_403410+1625↑j
.text:00404A3F                 mov     eax, [esp+59Ch+var_540]
.text:00404A43                 mov     esi, [esp+59Ch+var_548]
.text:00404A47                 lea     ebx, [esi+eax+16Dh]
.text:00404A4E                 mov     esi, [esp+59Ch+var_544]
.text:00404A52                 mov     eax, ebx
.text:00404A54                 sub     eax, esi
.text:00404A56                 lea     esi, [eax+17Eh]
.text:00404A5C                 mov     eax, 92492493h
.text:00404A61                 imul    esi
.text:00404A63                 mov     eax, esi
.text:00404A65                 sar     eax, 1Fh
.text:00404A68                 lea     edx, [edx+esi]
.text:00404A6B                 sar     edx, 2
.text:00404A6E                 sub     edx, eax
.text:00404A70                 lea     eax, ds:0[edx*8]
.text:00404A77                 sub     eax, edx
.text:00404A79                 sub     esi, eax
.text:00404A7B                 sub     ebx, esi
.text:00404A7D                 add     ebx, 3
.text:00404A80                 mov     [esp+59Ch+var_53C], ebx
.text:00404A84                 jmp     loc_4048E9
.text:00404A84 ; ---------------------------------------------------------------------------
.text:00404A89                 align 10h
.text:00404A90
.text:00404A90 loc_404A90:                             ; CODE XREF: sub_403410+31F↑j
.text:00404A90                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404A90                 test    ebx, ebx        ; jumptable 0040372F cases 98,104
.text:00404A92                 jz      short loc_404AA4
.text:00404A94                 mov     [esp+59Ch+var_528], 1
.text:00404A9C                 mov     [esp+59Ch+var_524], 0
.text:00404AA4
.text:00404AA4 loc_404AA4:                             ; CODE XREF: sub_403410+1682↑j
.text:00404AA4                 mov     esi, [esp+59Ch+var_514]
.text:00404AAB                 test    esi, esi
.text:00404AAD                 jz      loc_403B3B      ; jumptable 0040372F case 114
.text:00404AB3                 jmp     def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404AB8 ; ---------------------------------------------------------------------------
.text:00404AB8
.text:00404AB8 loc_404AB8:                             ; CODE XREF: sub_403410+31F↑j
.text:00404AB8                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404AB8                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 106
.text:00404AC0                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404AC6                 mov     [esp+59Ch+var_518], edi
.text:00404ACD                 cmp     edi, 3
.text:00404AD0                 jge     short loc_404ADE
.text:00404AD2                 mov     esi, 3
.text:00404AD7                 mov     [esp+59Ch+var_518], esi
.text:00404ADE
.text:00404ADE loc_404ADE:                             ; CODE XREF: sub_403410+16C0↑j
.text:00404ADE                 mov     ebx, [esp+59Ch+arg_C]
.text:00404AE5                 mov     ecx, [ebx+1Ch]
.text:00404AE8
.text:00404AE8 loc_404AE8:                             ; CODE XREF: sub_403410+1774↓j
.text:00404AE8                 inc     ecx
.text:00404AE9                 jmp     loc_403DC5
.text:00404AEE ; ---------------------------------------------------------------------------
.text:00404AEE
.text:00404AEE loc_404AEE:                             ; CODE XREF: sub_403410+31F↑j
.text:00404AEE                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404AEE                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 107
.text:00404AF6                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404AFC                 mov     [esp+59Ch+var_518], edi
.text:00404B03                 cmp     edi, 2
.text:00404B06                 jl      short loc_404B17
.text:00404B08
.text:00404B08 loc_404B08:                             ; CODE XREF: sub_403410+1713↓j
.text:00404B08                 mov     eax, [esp+59Ch+arg_C]
.text:00404B0F                 mov     ecx, [eax+8]
.text:00404B12                 jmp     loc_404784
.text:00404B17 ; ---------------------------------------------------------------------------
.text:00404B17
.text:00404B17 loc_404B17:                             ; CODE XREF: sub_403410+16F6↑j
.text:00404B17                 mov     ecx, 2
.text:00404B1C                 mov     [esp+59Ch+var_518], ecx
.text:00404B23                 jmp     short loc_404B08
.text:00404B25 ; ---------------------------------------------------------------------------
.text:00404B25
.text:00404B25 loc_404B25:                             ; CODE XREF: sub_403410+31F↑j
.text:00404B25                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404B25                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 108
.text:00404B2D                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404B33                 mov     [esp+59Ch+var_518], edi
.text:00404B3A                 cmp     edi, 2
.text:00404B3D                 jl      short loc_404B4B
.text:00404B3F
.text:00404B3F loc_404B3F:                             ; CODE XREF: sub_403410+1747↓j
.text:00404B3F                 mov     ecx, [esp+59Ch+var_4FC]
.text:00404B46                 jmp     loc_404784
.text:00404B4B ; ---------------------------------------------------------------------------
.text:00404B4B
.text:00404B4B loc_404B4B:                             ; CODE XREF: sub_403410+172D↑j
.text:00404B4B                 mov     edx, 2
.text:00404B50                 mov     [esp+59Ch+var_518], edx
.text:00404B57                 jmp     short loc_404B3F
.text:00404B57 ; ---------------------------------------------------------------------------
.text:00404B59                 align 10h
.text:00404B60
.text:00404B60 loc_404B60:                             ; CODE XREF: sub_403410+31F↑j
.text:00404B60                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404B60                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 109
.text:00404B68                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404B6E                 mov     [esp+59Ch+var_518], edi
.text:00404B75                 cmp     edi, 2
.text:00404B78                 jl      short loc_404B89
.text:00404B7A
.text:00404B7A loc_404B7A:                             ; CODE XREF: sub_403410+1785↓j
.text:00404B7A                 mov     esi, [esp+59Ch+arg_C]
.text:00404B81                 mov     ecx, [esi+10h]
.text:00404B84                 jmp     loc_404AE8
.text:00404B89 ; ---------------------------------------------------------------------------
.text:00404B89
.text:00404B89 loc_404B89:                             ; CODE XREF: sub_403410+1768↑j
.text:00404B89                 mov     edx, 2
.text:00404B8E                 mov     [esp+59Ch+var_518], edx
.text:00404B95                 jmp     short loc_404B7A
.text:00404B97 ; ---------------------------------------------------------------------------
.text:00404B97
.text:00404B97 loc_404B97:                             ; CODE XREF: sub_403410+31F↑j
.text:00404B97                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404B97                 lea     ebx, [edi-1]    ; jumptable 0040372F case 110
.text:00404B9A                 mov     edx, [esp+59Ch+var_504]
.text:00404BA1                 mov     ecx, ebx
.text:00404BA3                 shr     ecx, 1Fh
.text:00404BA6                 mov     edi, [esp+59Ch+arg_4]
.text:00404BAD                 dec     ecx
.text:00404BAE                 and     ecx, ebx
.text:00404BB0                 sub     edi, edx
.text:00404BB2                 lea     esi, [ecx+1]
.text:00404BB5                 xor     edx, edx
.text:00404BB7                 cmp     esi, edi
.text:00404BB9                 jnb     loc_403567
.text:00404BBF                 mov     eax, [esp+59Ch+var_508]
.text:00404BC6                 test    eax, eax
.text:00404BC8                 jz      loc_4039AB
.text:00404BCE                 test    ebx, ebx
.text:00404BD0                 jle     short loc_404BFE
.text:00404BD2                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00404BDA                 jz      short loc_404C0D
.text:00404BDC                 mov     [esp+59Ch+State], ebx ; Size
.text:00404BE0                 mov     edx, [esp+59Ch+var_508]
.text:00404BE7                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00404BEF                 mov     [esp+59Ch+Str], edx ; void *
.text:00404BF2
.text:00404BF2 loc_404BF2:                             ; CODE XREF: sub_403410+1813↓j
.text:00404BF2                 call    memset
.text:00404BF7                 add     [esp+59Ch+var_508], ebx
.text:00404BFE
.text:00404BFE loc_404BFE:                             ; CODE XREF: sub_403410+17C0↑j
.text:00404BFE                 mov     eax, [esp+59Ch+var_508]
.text:00404C05                 mov     byte ptr [eax], 0Ah
.text:00404C08                 jmp     loc_4039A3
.text:00404C0D ; ---------------------------------------------------------------------------
.text:00404C0D
.text:00404C0D loc_404C0D:                             ; CODE XREF: sub_403410+17CA↑j
.text:00404C0D                 mov     [esp+59Ch+State], ebx
.text:00404C11                 mov     edi, [esp+59Ch+var_508]
.text:00404C18                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:00404C20                 mov     [esp+59Ch+Str], edi
.text:00404C23                 jmp     short loc_404BF2
.text:00404C25 ; ---------------------------------------------------------------------------
.text:00404C25
.text:00404C25 loc_404C25:                             ; CODE XREF: sub_403410+31F↑j
.text:00404C25                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404C25                 mov     ebx, [esp+59Ch+arg_C] ; jumptable 0040372F case 115
.text:00404C2C                 mov     ecx, [ebx]
.text:00404C2E                 mov     [esp+59Ch+var_45C.tm_sec], ecx
.text:00404C35                 mov     esi, [ebx+4]
.text:00404C38                 mov     [esp+59Ch+var_45C.tm_min], esi
.text:00404C3F                 mov     edx, [ebx+8]
.text:00404C42                 mov     [esp+59Ch+var_45C.tm_hour], edx
.text:00404C49                 mov     ecx, [ebx+0Ch]
.text:00404C4C                 mov     [esp+59Ch+var_45C.tm_mday], ecx
.text:00404C53                 mov     esi, [ebx+10h]
.text:00404C56                 mov     [esp+59Ch+var_45C.tm_mon], esi
.text:00404C5D                 mov     edx, [ebx+14h]
.text:00404C60                 mov     [esp+59Ch+var_45C.tm_year], edx
.text:00404C67                 mov     ecx, [ebx+18h]
.text:00404C6A                 mov     [esp+59Ch+var_45C.tm_wday], ecx
.text:00404C71                 mov     esi, [ebx+1Ch]
.text:00404C74                 lea     ecx, [esp+59Ch+var_45C]
.text:00404C7B                 mov     [esp+59Ch+var_45C.tm_yday], esi
.text:00404C82                 mov     edx, [ebx+20h]
.text:00404C85                 lea     esi, [esp+59Ch+var_20]
.text:00404C8C                 mov     [esp+59Ch+Str], ecx ; Tm
.text:00404C8F                 mov     ebx, 66666667h
.text:00404C94                 mov     [esp+59Ch+var_45C.tm_isdst], edx
.text:00404C9B                 call    mktime
.text:00404CA0                 mov     ecx, eax
.text:00404CA2                 shr     eax, 1Fh
.text:00404CA5                 mov     [esp+59Ch+var_51C], eax
.text:00404CAC
.text:00404CAC loc_404CAC:                             ; CODE XREF: sub_403410+18D4↓j
.text:00404CAC                 mov     eax, ecx
.text:00404CAE                 imul    ebx
.text:00404CB0                 mov     eax, ecx
.text:00404CB2                 sar     eax, 1Fh
.text:00404CB5                 sar     edx, 2
.text:00404CB8                 sub     edx, eax
.text:00404CBA                 lea     eax, [edx+edx*4]
.text:00404CBD                 add     eax, eax
.text:00404CBF                 sub     ecx, eax
.text:00404CC1                 mov     eax, ecx
.text:00404CC3                 cmp     [esp+59Ch+var_51C], 0
.text:00404CCB                 mov     ecx, edx
.text:00404CCD                 jz      short loc_404CD1
.text:00404CCF                 neg     eax
.text:00404CD1
.text:00404CD1 loc_404CD1:                             ; CODE XREF: sub_403410+18BD↑j
.text:00404CD1                 add     al, 30h ; '0'
.text:00404CD3                 dec     esi
.text:00404CD4                 test    edx, edx
.text:00404CD6                 mov     [esi], al
.text:00404CD8                 mov     eax, 1
.text:00404CDD                 mov     [esp+59Ch+var_518], eax
.text:00404CE4                 jnz     short loc_404CAC
.text:00404CE6                 jmp     loc_403E0C
.text:00404CEB ; ---------------------------------------------------------------------------
.text:00404CEB
.text:00404CEB loc_404CEB:                             ; CODE XREF: sub_403410+31F↑j
.text:00404CEB                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404CEB                 lea     ebx, [edi-1]    ; jumptable 0040372F case 116
.text:00404CEE                 mov     eax, [esp+59Ch+var_504]
.text:00404CF5                 mov     edx, ebx
.text:00404CF7                 shr     edx, 1Fh
.text:00404CFA                 mov     edi, [esp+59Ch+arg_4]
.text:00404D01                 dec     edx
.text:00404D02                 and     edx, ebx
.text:00404D04                 lea     esi, [edx+1]
.text:00404D07                 sub     edi, eax
.text:00404D09                 xor     edx, edx
.text:00404D0B                 cmp     esi, edi
.text:00404D0D                 jnb     loc_403567
.text:00404D13                 mov     ecx, [esp+59Ch+var_508]
.text:00404D1A                 test    ecx, ecx
.text:00404D1C                 jz      loc_4039AB
.text:00404D22                 test    ebx, ebx
.text:00404D24                 jle     short loc_404D52
.text:00404D26                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00404D2E                 jz      short loc_404D61
.text:00404D30                 mov     [esp+59Ch+State], ebx ; Size
.text:00404D34                 mov     eax, [esp+59Ch+var_508]
.text:00404D3B                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00404D43                 mov     [esp+59Ch+Str], eax ; void *
.text:00404D46
.text:00404D46 loc_404D46:                             ; CODE XREF: sub_403410+1967↓j
.text:00404D46                 call    memset
.text:00404D4B                 add     [esp+59Ch+var_508], ebx
.text:00404D52
.text:00404D52 loc_404D52:                             ; CODE XREF: sub_403410+1914↑j
.text:00404D52                 mov     eax, [esp+59Ch+var_508]
.text:00404D59                 mov     byte ptr [eax], 9
.text:00404D5C                 jmp     loc_4039A3
.text:00404D61 ; ---------------------------------------------------------------------------
.text:00404D61
.text:00404D61 loc_404D61:                             ; CODE XREF: sub_403410+191E↑j
.text:00404D61                 mov     [esp+59Ch+State], ebx
.text:00404D65                 mov     edi, [esp+59Ch+var_508]
.text:00404D6C                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:00404D74                 mov     [esp+59Ch+Str], edi
.text:00404D77                 jmp     short loc_404D46
.text:00404D77 ; ---------------------------------------------------------------------------
.text:00404D79                 align 10h
.text:00404D80
.text:00404D80 loc_404D80:                             ; CODE XREF: sub_403410+31F↑j
.text:00404D80                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404D80                 mov     [esp+59Ch+var_518], edi ; jumptable 0040372F case 117
.text:00404D87                 cmp     edi, 1
.text:00404D8A                 jl      short loc_404DC0
.text:00404D8C
.text:00404D8C loc_404D8C:                             ; CODE XREF: sub_403410+19BC↓j
.text:00404D8C                 mov     eax, [esp+59Ch+arg_C]
.text:00404D93                 mov     esi, [eax+18h]
.text:00404D96                 mov     eax, 92492493h
.text:00404D9B                 add     esi, 6
.text:00404D9E                 imul    esi
.text:00404DA0                 mov     ebx, esi
.text:00404DA2                 sar     ebx, 1Fh
.text:00404DA5                 lea     ecx, [edx+esi]
.text:00404DA8                 sar     ecx, 2
.text:00404DAB                 sub     ecx, ebx
.text:00404DAD                 lea     ebx, ds:0[ecx*8]
.text:00404DB4                 sub     ebx, ecx
.text:00404DB6                 sub     esi, ebx
.text:00404DB8                 lea     ecx, [esi+1]
.text:00404DBB                 jmp     loc_403DC5
.text:00404DC0 ; ---------------------------------------------------------------------------
.text:00404DC0
.text:00404DC0 loc_404DC0:                             ; CODE XREF: sub_403410+197A↑j
.text:00404DC0                 mov     esi, 1
.text:00404DC5                 mov     [esp+59Ch+var_518], esi
.text:00404DCC                 jmp     short loc_404D8C
.text:00404DCE ; ---------------------------------------------------------------------------
.text:00404DCE
.text:00404DCE loc_404DCE:                             ; CODE XREF: sub_403410+31F↑j
.text:00404DCE                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404DCE                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 119
.text:00404DD6                 jz      def_40372F      ; jumptable 0040372F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404DDC                 mov     [esp+59Ch+var_518], edi
.text:00404DE3                 cmp     edi, 1
.text:00404DE6                 jl      short loc_404DF7
.text:00404DE8
.text:00404DE8 loc_404DE8:                             ; CODE XREF: sub_403410+19F3↓j
.text:00404DE8                 mov     eax, [esp+59Ch+arg_C]
.text:00404DEF                 mov     ecx, [eax+18h]
.text:00404DF2                 jmp     loc_403DC5
.text:00404DF7 ; ---------------------------------------------------------------------------
.text:00404DF7
.text:00404DF7 loc_404DF7:                             ; CODE XREF: sub_403410+19D6↑j
.text:00404DF7                 mov     ebx, 1
.text:00404DFC                 mov     [esp+59Ch+var_518], ebx
.text:00404E03                 jmp     short loc_404DE8
.text:00404E05 ; ---------------------------------------------------------------------------
.text:00404E05
.text:00404E05 loc_404E05:                             ; CODE XREF: sub_403410+31F↑j
.text:00404E05                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404E05                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040372F case 121
.text:00404E0D                 jz      loc_403B3B      ; jumptable 0040372F case 114
.text:00404E13                 mov     [esp+59Ch+var_518], edi
.text:00404E1A                 cmp     edi, 2
.text:00404E1D                 jl      short loc_404E54
.text:00404E1F
.text:00404E1F loc_404E1F:                             ; CODE XREF: sub_403410+1A50↓j
.text:00404E1F                 mov     ebx, [esp+59Ch+arg_C]
.text:00404E26                 mov     esi, [ebx+14h]
.text:00404E29                 mov     ebx, 51EB851Fh
.text:00404E2E                 mov     eax, esi
.text:00404E30                 imul    ebx
.text:00404E32                 mov     eax, esi
.text:00404E34                 sar     edx, 5
.text:00404E37                 mov     [esp+59Ch+var_57C], edx
.text:00404E3B                 cdq
.text:00404E3C                 sub     [esp+59Ch+var_57C], edx
.text:00404E40                 mov     eax, [esp+59Ch+var_57C]
.text:00404E44                 lea     ecx, [eax+eax*4]
.text:00404E47                 lea     edx, [ecx+ecx*4]
.text:00404E4A                 shl     edx, 2
.text:00404E4D                 sub     esi, edx
.text:00404E4F                 jmp     loc_40497A
.text:00404E54 ; ---------------------------------------------------------------------------
.text:00404E54
.text:00404E54 loc_404E54:                             ; CODE XREF: sub_403410+1A0D↑j
.text:00404E54                 mov     ecx, 2
.text:00404E59                 mov     [esp+59Ch+var_518], ecx
.text:00404E60                 jmp     short loc_404E1F
.text:00404E62 ; ---------------------------------------------------------------------------
.text:00404E62
.text:00404E62 loc_404E62:                             ; CODE XREF: sub_403410+31F↑j
.text:00404E62                                         ; DATA XREF: sub_403410:jpt_40372F↑o
.text:00404E62                 mov     eax, [esp+59Ch+arg_C] ; jumptable 0040372F case 122
.text:00404E69                 mov     edx, [eax+20h]
.text:00404E6C                 test    edx, edx
.text:00404E6E                 js      loc_40352A
.text:00404E74                 mov     [esp+59Ch+var_550], 0
.text:00404E7C                 mov     esi, [esp+59Ch+arg_10]
.text:00404E83                 test    esi, esi
.text:00404E85                 jz      loc_404F88
.text:00404E8B
.text:00404E8B loc_404E8B:                             ; CODE XREF: sub_403410+1D33↓j
.text:00404E8B                 lea     ebx, [edi-1]
.text:00404E8E                 mov     ecx, [esp+59Ch+arg_4]
.text:00404E95                 mov     edx, ebx
.text:00404E97                 shr     edx, 1Fh
.text:00404E9A                 mov     eax, [esp+59Ch+var_504]
.text:00404EA1                 dec     edx
.text:00404EA2                 and     edx, ebx
.text:00404EA4                 lea     esi, [edx+1]
.text:00404EA7                 sub     ecx, eax
.text:00404EA9                 xor     edx, edx
.text:00404EAB                 cmp     esi, ecx
.text:00404EAD                 jnb     loc_403567
.text:00404EB3                 mov     ecx, [esp+59Ch+var_508]
.text:00404EBA                 test    ecx, ecx
.text:00404EBC                 jz      short loc_404F04
.text:00404EBE                 test    ebx, ebx
.text:00404EC0                 jle     short loc_404EF2
.text:00404EC2                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00404ECA                 jz      loc_404F6D
.text:00404ED0                 mov     [esp+59Ch+State], ebx ; Size
.text:00404ED4                 mov     eax, [esp+59Ch+var_508]
.text:00404EDB                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00404EE3                 mov     [esp+59Ch+Str], eax ; void *
.text:00404EE6
.text:00404EE6 loc_404EE6:                             ; CODE XREF: sub_403410+1B73↓j
.text:00404EE6                 call    memset
.text:00404EEB                 add     [esp+59Ch+var_508], ebx
.text:00404EF2
.text:00404EF2 loc_404EF2:                             ; CODE XREF: sub_403410+1AB0↑j
.text:00404EF2                 mov     ebx, [esp+59Ch+var_508]
.text:00404EF9                 mov     byte ptr [ebx], 2Bh ; '+'
.text:00404EFC                 inc     ebx
.text:00404EFD                 mov     [esp+59Ch+var_508], ebx
.text:00404F04
.text:00404F04 loc_404F04:                             ; CODE XREF: sub_403410+1AAC↑j
.text:00404F04                 add     [esp+59Ch+var_504], esi
.text:00404F0B
.text:00404F0B loc_404F0B:                             ; CODE XREF: sub_403410+1DB9↓j
.text:00404F0B                 mov     [esp+59Ch+var_518], edi
.text:00404F12                 mov     eax, [esp+59Ch+var_550]
.text:00404F16                 mov     ecx, 88888889h
.text:00404F1B                 mov     ebx, [esp+59Ch+var_550]
.text:00404F1F                 imul    ecx
.text:00404F21                 lea     esi, [ebx+edx]
.text:00404F24                 sar     esi, 5
.text:00404F27                 sar     ebx, 1Fh
.text:00404F2A                 sub     esi, ebx
.text:00404F2C                 cmp     edi, 4
.text:00404F2F                 jge     short loc_404F3D
.text:00404F31                 mov     edx, 4
.text:00404F36                 mov     [esp+59Ch+var_518], edx
.text:00404F3D
.text:00404F3D loc_404F3D:                             ; CODE XREF: sub_403410+1B1F↑j
.text:00404F3D                 mov     eax, esi
.text:00404F3F                 mov     ebx, esi
.text:00404F41                 sar     ebx, 1Fh
.text:00404F44                 imul    ecx
.text:00404F46                 add     edx, esi
.text:00404F48                 sar     edx, 5
.text:00404F4B                 sub     edx, ebx
.text:00404F4D                 lea     eax, [edx+edx*4]
.text:00404F50                 lea     ebx, [eax+eax*4]
.text:00404F53                 mov     eax, edx
.text:00404F55                 shl     eax, 4
.text:00404F58                 sub     eax, edx
.text:00404F5A                 lea     ecx, ds:0[eax*4]
.text:00404F61                 mov     eax, esi
.text:00404F63                 sub     eax, ecx
.text:00404F65                 lea     ecx, [eax+ebx*4]
.text:00404F68                 jmp     loc_403DC5
.text:00404F6D ; ---------------------------------------------------------------------------
.text:00404F6D
.text:00404F6D loc_404F6D:                             ; CODE XREF: sub_403410+1ABA↑j
.text:00404F6D                 mov     [esp+59Ch+State], ebx
.text:00404F71                 mov     edx, [esp+59Ch+var_508]
.text:00404F78                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:00404F80                 mov     [esp+59Ch+Str], edx
.text:00404F83                 jmp     loc_404EE6
.text:00404F88 ; ---------------------------------------------------------------------------
.text:00404F88
.text:00404F88 loc_404F88:                             ; CODE XREF: sub_403410+1A75↑j
.text:00404F88                 mov     ecx, [eax]
.text:00404F8A                 mov     [esp+59Ch+var_4BC.tm_sec], ecx
.text:00404F91                 mov     ebx, [eax+4]
.text:00404F94                 mov     [esp+59Ch+var_4BC.tm_min], ebx
.text:00404F9B                 mov     ecx, [eax+8]
.text:00404F9E                 mov     [esp+59Ch+var_4BC.tm_hour], ecx
.text:00404FA5                 mov     ebx, [eax+0Ch]
.text:00404FA8                 mov     [esp+59Ch+var_4BC.tm_mday], ebx
.text:00404FAF                 mov     ecx, [eax+10h]
.text:00404FB2                 mov     [esp+59Ch+var_4BC.tm_mon], ecx
.text:00404FB9                 mov     ebx, [eax+14h]
.text:00404FBC                 mov     [esp+59Ch+var_4BC.tm_year], ebx
.text:00404FC3                 mov     ecx, [eax+18h]
.text:00404FC6                 mov     [esp+59Ch+var_4BC.tm_wday], ecx
.text:00404FCD                 mov     ebx, [eax+1Ch]
.text:00404FD0                 lea     ecx, [esp+59Ch+var_4BC]
.text:00404FD7                 mov     [esp+59Ch+var_4BC.tm_isdst], edx
.text:00404FDE                 mov     [esp+59Ch+Str], ecx ; Tm
.text:00404FE1                 mov     [esp+59Ch+var_4BC.tm_yday], ebx
.text:00404FE8                 lea     ebx, [esp+59Ch+var_4F8]
.text:00404FEF                 call    mktime
.text:00404FF4                 mov     [esp+59Ch+var_4F8], eax
.text:00404FFB                 inc     eax
.text:00404FFC                 jz      loc_405204
.text:00405002
.text:00405002 loc_405002:                             ; CODE XREF: sub_403410+1E7F↓j
.text:00405002                 mov     [esp+59Ch+Str], ebx ; __time32_t *
.text:00405005                 lea     esi, [esp+59Ch+var_48C]
.text:0040500C                 mov     [esp+59Ch+SizeInBytes], esi ; int
.text:00405010                 call    sub_40A970
.text:00405015                 test    eax, eax
.text:00405017                 jz      loc_40352A
.text:0040501D                 mov     eax, [esp+59Ch+var_4BC.tm_year]
.text:00405024                 test    al, 3
.text:00405026                 jnz     loc_4051F7
.text:0040502C                 sar     eax, 2
.text:0040502F                 add     eax, 1DAh
.text:00405034
.text:00405034 loc_405034:                             ; CODE XREF: sub_403410+1DEF↓j
.text:00405034                 mov     [esp+59Ch+var_554], eax
.text:00405038                 mov     ecx, [esp+59Ch+var_478]
.text:0040503F                 test    cl, 3
.text:00405042                 mov     [esp+59Ch+var_55C], ecx
.text:00405046                 jnz     loc_4051E6
.text:0040504C                 mov     eax, ecx
.text:0040504E                 sar     eax, 2
.text:00405051                 add     eax, 1DAh
.text:00405056
.text:00405056 loc_405056:                             ; CODE XREF: sub_403410+1DE2↓j
.text:00405056                 mov     [esp+59Ch+var_558], eax
.text:0040505A                 mov     ecx, 51EB851Fh
.text:0040505F                 mov     esi, [esp+59Ch+var_554]
.text:00405063                 mov     eax, [esp+59Ch+var_554]
.text:00405067                 sar     esi, 1Fh
.text:0040506A                 imul    ecx
.text:0040506C                 mov     eax, [esp+59Ch+var_558]
.text:00405070                 sar     edx, 3
.text:00405073                 sub     edx, esi
.text:00405075                 lea     ebx, [edx+edx*4]
.text:00405078                 lea     esi, [ebx+ebx*4]
.text:0040507B                 mov     ebx, [esp+59Ch+var_554]
.text:0040507F                 sub     ebx, esi
.text:00405081                 shr     ebx, 1Fh
.text:00405084                 sub     edx, ebx
.text:00405086                 mov     esi, edx
.text:00405088                 mov     ebx, [esp+59Ch+var_558]
.text:0040508C                 imul    ecx
.text:0040508E                 sar     ebx, 1Fh
.text:00405091                 sar     edx, 3
.text:00405094                 sub     edx, ebx
.text:00405096                 lea     ecx, [edx+edx*4]
.text:00405099                 lea     ebx, [ecx+ecx*4]
.text:0040509C                 mov     ecx, [esp+59Ch+var_558]
.text:004050A0                 sub     ecx, ebx
.text:004050A2                 mov     ebx, ecx
.text:004050A4                 shr     ebx, 1Fh
.text:004050A7                 mov     ecx, [esp+59Ch+var_558]
.text:004050AB                 sub     edx, ebx
.text:004050AD                 sub     [esp+59Ch+var_554], ecx
.text:004050B1                 mov     eax, edx
.text:004050B3                 mov     ebx, esi
.text:004050B5                 sub     esi, eax
.text:004050B7                 sar     edx, 2
.text:004050BA                 mov     eax, [esp+59Ch+var_4BC.tm_year]
.text:004050C1                 sub     [esp+59Ch+var_554], esi
.text:004050C5                 sar     ebx, 2
.text:004050C8                 sub     ebx, edx
.text:004050CA                 mov     edx, [esp+59Ch+var_55C]
.text:004050CE                 mov     ecx, [esp+59Ch+var_554]
.text:004050D2                 sub     eax, edx
.text:004050D4                 lea     esi, [eax+eax*8]
.text:004050D7                 add     ebx, ecx
.text:004050D9                 mov     edx, [esp+59Ch+var_470]
.text:004050E0                 lea     ecx, [eax+esi*8]
.text:004050E3                 lea     esi, [ecx+ecx*4]
.text:004050E6                 mov     eax, [esp+59Ch+var_488]
.text:004050ED                 add     esi, ebx
.text:004050EF                 mov     ebx, [esp+59Ch+var_4BC.tm_yday]
.text:004050F6                 sub     ebx, edx
.text:004050F8                 add     esi, ebx
.text:004050FA                 mov     edx, [esp+59Ch+var_4BC.tm_hour]
.text:00405101                 mov     ebx, [esp+59Ch+var_484]
.text:00405108                 lea     ecx, [esi+esi*2]
.text:0040510B                 sub     edx, ebx
.text:0040510D                 lea     ebx, [edx+ecx*8]
.text:00405110                 mov     edx, [esp+59Ch+var_4BC.tm_min]
.text:00405117                 mov     esi, ebx
.text:00405119                 shl     esi, 4
.text:0040511C                 sub     esi, ebx
.text:0040511E                 sub     edx, eax
.text:00405120                 mov     ebx, [esp+59Ch+var_4BC.tm_sec]
.text:00405127                 lea     ecx, [edx+esi*4]
.text:0040512A                 mov     eax, [esp+59Ch+var_48C]
.text:00405131                 mov     esi, ecx
.text:00405133                 shl     esi, 4
.text:00405136                 sub     esi, ecx
.text:00405138                 sub     ebx, eax
.text:0040513A                 lea     edx, [ebx+esi*4]
.text:0040513D                 test    edx, edx
.text:0040513F                 mov     [esp+59Ch+var_550], edx
.text:00405143                 jns     loc_404E8B
.text:00405149                 lea     ebx, [edi-1]
.text:0040514C                 mov     ecx, [esp+59Ch+arg_4]
.text:00405153                 mov     edx, ebx
.text:00405155                 shr     edx, 1Fh
.text:00405158                 mov     eax, [esp+59Ch+var_504]
.text:0040515F                 dec     edx
.text:00405160                 and     edx, ebx
.text:00405162                 lea     esi, [edx+1]
.text:00405165                 sub     ecx, eax
.text:00405167                 xor     edx, edx
.text:00405169                 cmp     esi, ecx
.text:0040516B                 jnb     loc_403567
.text:00405171                 mov     eax, [esp+59Ch+var_508]
.text:00405178                 test    eax, eax
.text:0040517A                 jz      short loc_4051BE
.text:0040517C                 test    ebx, ebx
.text:0040517E                 jle     short loc_4051AC
.text:00405180                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00405188                 jz      short loc_4051CE
.text:0040518A                 mov     [esp+59Ch+State], ebx ; Size
.text:0040518E                 mov     eax, [esp+59Ch+var_508]
.text:00405195                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040519D                 mov     [esp+59Ch+Str], eax ; void *
.text:004051A0
.text:004051A0 loc_4051A0:                             ; CODE XREF: sub_403410+1DD4↓j
.text:004051A0                 call    memset
.text:004051A5                 add     [esp+59Ch+var_508], ebx
.text:004051AC
.text:004051AC loc_4051AC:                             ; CODE XREF: sub_403410+1D6E↑j
.text:004051AC                 mov     ebx, [esp+59Ch+var_508]
.text:004051B3                 mov     byte ptr [ebx], 2Dh ; '-'
.text:004051B6                 inc     ebx
.text:004051B7                 mov     [esp+59Ch+var_508], ebx
.text:004051BE
.text:004051BE loc_4051BE:                             ; CODE XREF: sub_403410+1D6A↑j
.text:004051BE                 add     [esp+59Ch+var_504], esi
.text:004051C5                 neg     [esp+59Ch+var_550]
.text:004051C9                 jmp     loc_404F0B
.text:004051CE ; ---------------------------------------------------------------------------
.text:004051CE
.text:004051CE loc_4051CE:                             ; CODE XREF: sub_403410+1D78↑j
.text:004051CE                 mov     [esp+59Ch+State], ebx
.text:004051D2                 mov     ecx, [esp+59Ch+var_508]
.text:004051D9                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:004051E1                 mov     [esp+59Ch+Str], ecx
.text:004051E4                 jmp     short loc_4051A0
.text:004051E6 ; ---------------------------------------------------------------------------
.text:004051E6
.text:004051E6 loc_4051E6:                             ; CODE XREF: sub_403410+1C36↑j
.text:004051E6                 mov     eax, [esp+59Ch+var_55C]
.text:004051EA                 sar     eax, 2
.text:004051ED                 add     eax, 1DBh
.text:004051F2                 jmp     loc_405056
.text:004051F7 ; ---------------------------------------------------------------------------
.text:004051F7
.text:004051F7 loc_4051F7:                             ; CODE XREF: sub_403410+1C16↑j
.text:004051F7                 sar     eax, 2
.text:004051FA                 add     eax, 1DBh
.text:004051FF                 jmp     loc_405034
.text:00405204 ; ---------------------------------------------------------------------------
.text:00405204
.text:00405204 loc_405204:                             ; CODE XREF: sub_403410+1BEC↑j
.text:00405204                 mov     [esp+59Ch+Str], ebx ; __time32_t *
.text:00405207                 lea     edx, [esp+59Ch+var_4F0._Byte]
.text:0040520E                 mov     [esp+59Ch+SizeInBytes], edx ; int
.text:00405212                 call    sub_40A9D0
.text:00405217                 test    eax, eax
.text:00405219                 jz      loc_40352A
.text:0040521F                 mov     ecx, [esp+59Ch+var_4BC.tm_sec]
.text:00405226                 mov     eax, [esp+59Ch+var_4BC.tm_min]
.text:0040522D                 mov     edx, dword ptr [esp+59Ch+var_4F0._Byte]
.text:00405234                 mov     esi, [esp+59Ch+var_4E8]
.text:0040523B                 xor     edx, ecx
.text:0040523D                 xor     esi, eax
.text:0040523F                 mov     ecx, [esp+59Ch+var_4E4]
.text:00405246                 or      edx, esi
.text:00405248                 mov     eax, [esp+59Ch+var_4BC.tm_hour]
.text:0040524F                 mov     esi, [esp+59Ch+var_4E0]
.text:00405256                 xor     ecx, eax
.text:00405258                 mov     eax, [esp+59Ch+var_4BC.tm_mday]
.text:0040525F                 or      edx, ecx
.text:00405261                 mov     ecx, [esp+59Ch+var_4DC]
.text:00405268                 xor     esi, eax
.text:0040526A                 mov     eax, [esp+59Ch+var_4BC.tm_mon]
.text:00405271                 or      edx, esi
.text:00405273                 mov     esi, [esp+59Ch+var_4D8]
.text:0040527A                 xor     ecx, eax
.text:0040527C                 mov     eax, [esp+59Ch+var_4BC.tm_year]
.text:00405283                 or      edx, ecx
.text:00405285                 xor     esi, eax
.text:00405287                 or      edx, esi
.text:00405289                 jnz     loc_40352A
.text:0040528F                 jmp     loc_405002
.text:00405294 ; ---------------------------------------------------------------------------
.text:00405294
.text:00405294 loc_405294:                             ; CODE XREF: sub_403410+2F7↑j
.text:00405294                                         ; sub_403410+309↑j
.text:00405294                 mov     [esp+59Ch+var_514], eax
.text:0040529B                 inc     ebp
.text:0040529C                 movzx   ecx, byte ptr [ebp+0]
.text:004052A0                 jmp     loc_40371F
.text:004052A5 ; ---------------------------------------------------------------------------
.text:004052A5
.text:004052A5 loc_4052A5:                             ; CODE XREF: sub_403410+2D1↑j
.text:004052A5                 movsx   esi, cl
.text:004052A8                 sub     esi, 30h ; '0'
.text:004052AB                 cmp     esi, 7
.text:004052AE                 jle     loc_4036E7
.text:004052B4
.text:004052B4 loc_4052B4:                             ; CODE XREF: sub_403410+2C5↑j
.text:004052B4                 mov     edi, 7FFFFFFFh
.text:004052B9                 jmp     loc_4036F1
.text:004052B9 ; ---------------------------------------------------------------------------
.text:004052BE                 align 10h
.text:004052C0
.text:004052C0 loc_4052C0:                             ; CODE XREF: sub_403410+29B↑j
.text:004052C0                 mov     ebx, 1
.text:004052C5                 jmp     loc_403690
.text:004052C5 ; ---------------------------------------------------------------------------
.text:004052CA                 align 10h
.text:004052D0
.text:004052D0 loc_4052D0:                             ; CODE XREF: sub_403410+292↑j
.text:004052D0                 cmp     edx, 5Eh ; '^'
.text:004052D3                 jz      short loc_4052E0
.text:004052D5                 cmp     edx, 5Fh ; '_'
.text:004052D8                 jmp     loc_4036B4
.text:004052D8 ; ---------------------------------------------------------------------------
.text:004052DD                 align 10h
.text:004052E0
.text:004052E0 loc_4052E0:                             ; CODE XREF: sub_403410+1EC3↑j
.text:004052E0                 mov     [esp+59Ch+var_528], 1
.text:004052E8                 jmp     loc_403690
.text:004052E8 ; ---------------------------------------------------------------------------
.text:004052ED                 align 10h
.text:004052F0
.text:004052F0 loc_4052F0:                             ; CODE XREF: sub_403410+B0↑j
.text:004052F0                 cmp     eax, 41h ; 'A'
.text:004052F3                 jl      loc_403574
.text:004052F9                 cmp     eax, 5Fh ; '_'
.text:004052FC                 jle     loc_4034F0
.text:00405302                 sub     eax, 61h ; 'a'
.text:00405305                 cmp     eax, 1Dh
.text:00405308                 jmp     loc_4034DF
.text:00405308 ; ---------------------------------------------------------------------------
.text:0040530D                 align 10h
.text:00405310
.text:00405310 loc_405310:                             ; CODE XREF: sub_403410+67↑j
.text:00405310                 mov     edx, [esp+59Ch+var_4FC]
.text:00405317                 test    edx, edx
.text:00405319                 jnz     loc_403485
.text:0040531F                 mov     ecx, 0Ch
.text:00405324                 mov     [esp+59Ch+var_4FC], ecx
.text:0040532B                 jmp     loc_403485
.text:00405330 ; ---------------------------------------------------------------------------
.text:00405330
.text:00405330 loc_405330:                             ; CODE XREF: sub_403410+4D↑j
.text:00405330                 call    _tzset
.text:00405335                 jmp     loc_40346F
.text:00405335 sub_403410      endp
.text:00405335
.text:00405335 ; ---------------------------------------------------------------------------
.text:0040533A                 align 10h
.text:00405340 dword_405340    dd 90002D2Dh, 7 dup(90909090h)
.text:00405340                                         ; DATA XREF: sub_405590+E4↓o
.text:00405360 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00405360                                         ; DATA XREF: sub_405590+2FC↓o
.text:0040538D                 align 20h
.text:004053A0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004053A0                                         ; DATA XREF: sub_405590:loc_4058F2↓o
.text:004053CD                 align 20h
.text:004053E0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004053E0                                         ; DATA XREF: sub_405590:loc_405990↓o
.text:004053E0                                         ; sub_405590:loc_405D57↓o
.text:00405406                 align 20h
.text:00405420 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00405420                                         ; DATA XREF: sub_405590+48E↓o
.text:00405440 dword_405440    dd 90909000h, 7 dup(90909090h)
.text:00405440                                         ; DATA XREF: sub_405590:loc_405A61↓o
.text:00405460 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00405460                                         ; DATA XREF: sub_405590:loc_405A7A↓o
.text:00405480 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00405480                                         ; DATA XREF: sub_405590:loc_405B5F↓o
.text:00405480                                         ; sub_405590:loc_405E8C↓o
.text:004054A7                 align 20h
.text:004054C0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004054C0                                         ; DATA XREF: sub_405590:loc_405CD3↓o
.text:004054EE                 align 20h
.text:00405500 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00405500                                         ; DATA XREF: sub_405590:loc_405DBF↓o
.text:00405521 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00405521                                         ; DATA XREF: sub_405590+93F↓o
.text:0040553B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040553B                                         ; DATA XREF: sub_405590:loc_405F07↓o
.text:00405555 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00405555                                         ; DATA XREF: sub_405590:loc_405F2E↓o
.text:00405573 ; const char VarName[]
.text:00405573 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_405590:loc_4060E0↓o
.text:00405583                 align 10h
.text:00405590
.text:00405590 ; =============== S U B R O U T I N E =======================================
.text:00405590
.text:00405590
.text:00405590 ; int __cdecl sub_405590(int, int, char *Str, int, int, int, int, int)
.text:00405590 sub_405590      proc near               ; CODE XREF: sub_406120+5A↓p
.text:00405590                                         ; .text:0040620A↓p ...
.text:00405590
.text:00405590 Str1            = dword ptr -5Ch
.text:00405590 Str2            = dword ptr -58h
.text:00405590 MaxCount        = dword ptr -54h
.text:00405590 var_50          = dword ptr -50h
.text:00405590 var_4C          = dword ptr -4Ch
.text:00405590 var_3C          = dword ptr -3Ch
.text:00405590 var_38          = dword ptr -38h
.text:00405590 var_34          = dword ptr -34h
.text:00405590 var_30          = dword ptr -30h
.text:00405590 var_2C          = dword ptr -2Ch
.text:00405590 var_28          = dword ptr -28h
.text:00405590 var_24          = dword ptr -24h
.text:00405590 var_20          = dword ptr -20h
.text:00405590 var_1C          = dword ptr -1Ch
.text:00405590 var_18          = dword ptr -18h
.text:00405590 var_14          = dword ptr -14h
.text:00405590 arg_0           = dword ptr  4
.text:00405590 arg_4           = dword ptr  8
.text:00405590 Str             = dword ptr  0Ch
.text:00405590 arg_C           = dword ptr  10h
.text:00405590 arg_10          = dword ptr  14h
.text:00405590 arg_14          = dword ptr  18h
.text:00405590 arg_18          = dword ptr  1Ch
.text:00405590 arg_1C          = dword ptr  20h
.text:00405590
.text:00405590                 push    ebp
.text:00405591                 mov     eax, 0FFFFFFFFh
.text:00405596                 push    edi
.text:00405597                 push    esi
.text:00405598                 push    ebx
.text:00405599                 sub     esp, 4Ch
.text:0040559C                 mov     esi, [esp+5Ch+Str]
.text:004055A0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004055A4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004055A7                 mov     ebx, [ebp+4]
.text:004055AA                 setz    dl
.text:004055AD                 movzx   ecx, dl
.text:004055B0                 dec     ecx
.text:004055B1                 and     ecx, ebx
.text:004055B3                 mov     [esp+5Ch+var_14], ecx
.text:004055B7                 mov     ecx, [esp+5Ch+arg_0]
.text:004055BB                 test    ecx, ecx
.text:004055BD                 jle     loc_4056E7
.text:004055C3                 mov     dword ptr [ebp+0Ch], 0
.text:004055CA                 mov     ebx, [ebp+0]
.text:004055CD                 test    ebx, ebx
.text:004055CF                 jz      loc_406100
.text:004055D5                 mov     edi, [ebp+10h]
.text:004055D8                 test    edi, edi
.text:004055DA                 jnz     short loc_405633
.text:004055DC                 lea     esi, [esi+0]
.text:004055E0
.text:004055E0 loc_4055E0:                             ; CODE XREF: sub_405590+B7C↓j
.text:004055E0                 mov     [ebp+24h], ebx
.text:004055E3                 mov     esi, [esp+5Ch+Str]
.text:004055E7                 mov     [ebp+20h], ebx
.text:004055EA                 mov     ecx, [esp+5Ch+arg_18]
.text:004055EE                 xor     ebx, ebx
.text:004055F0                 mov     dword ptr [ebp+14h], 0
.text:004055F7                 test    ecx, ecx
.text:004055F9                 jz      loc_4060E0
.text:004055FF
.text:004055FF loc_4055FF:                             ; CODE XREF: sub_405590+B64↓j
.text:004055FF                 mov     ebx, 1
.text:00405604
.text:00405604 loc_405604:                             ; CODE XREF: sub_405590+B5E↓j
.text:00405604                 mov     [ebp+1Ch], ebx
.text:00405607                 mov     ecx, [esp+5Ch+Str]
.text:0040560B                 movzx   eax, byte ptr [ecx]
.text:0040560E                 cmp     al, 2Dh ; '-'
.text:00405610                 jz      loc_4060D0
.text:00405616                 cmp     al, 2Bh ; '+'
.text:00405618                 jz      loc_4060B9
.text:0040561E                 xor     edx, edx
.text:00405620                 test    ebx, ebx
.text:00405622                 setz    dl
.text:00405625                 mov     [ebp+18h], edx
.text:00405628
.text:00405628 loc_405628:                             ; CODE XREF: sub_405590+B35↓j
.text:00405628                 mov     [esp+5Ch+Str], esi
.text:0040562C                 mov     dword ptr [ebp+10h], 1
.text:00405633
.text:00405633 loc_405633:                             ; CODE XREF: sub_405590+4A↑j
.text:00405633                 mov     eax, [ebp+14h]
.text:00405636                 test    eax, eax
.text:00405638                 jz      short loc_405643
.text:0040563A                 cmp     byte ptr [eax], 0
.text:0040563D                 jnz     loc_405720
.text:00405643
.text:00405643 loc_405643:                             ; CODE XREF: sub_405590+A8↑j
.text:00405643                 mov     ebx, [ebp+0]
.text:00405646                 cmp     [ebp+24h], ebx
.text:00405649                 jle     short loc_40564E
.text:0040564B                 mov     [ebp+24h], ebx
.text:0040564E
.text:0040564E loc_40564E:                             ; CODE XREF: sub_405590+B9↑j
.text:0040564E                 cmp     [ebp+20h], ebx
.text:00405651                 jle     short loc_405656
.text:00405653                 mov     [ebp+20h], ebx
.text:00405656
.text:00405656 loc_405656:                             ; CODE XREF: sub_405590+C1↑j
.text:00405656                 cmp     dword ptr [ebp+18h], 1
.text:0040565A                 jz      loc_406030
.text:00405660
.text:00405660 loc_405660:                             ; CODE XREF: sub_405590+B13↓j
.text:00405660                 cmp     ebx, [esp+5Ch+arg_0]
.text:00405664                 jz      loc_406014
.text:0040566A                 cld
.text:0040566B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040566F                 mov     edx, 3
.text:00405674                 mov     edi, offset dword_405340
.text:00405679                 mov     esi, [ecx+ebx*4]
.text:0040567C                 mov     ecx, edx
.text:0040567E                 repe cmpsb
.text:00405680                 jnz     short loc_4056BC
.text:00405682                 mov     edx, [ebp+24h]
.text:00405685                 lea     eax, [ebx+1]
.text:00405688                 cmp     [ebp+20h], edx
.text:0040568B                 mov     [ebp+0], eax
.text:0040568E                 jz      loc_406028
.text:00405694                 cmp     edx, eax
.text:00405696                 jz      short loc_4056B0
.text:00405698                 mov     [esp+5Ch+Str2], ebp
.text:0040569C                 mov     ebx, [esp+5Ch+arg_4]
.text:004056A0                 mov     [esp+5Ch+Str1], ebx
.text:004056A3                 call    sub_406240
.text:004056A8                 nop
.text:004056A9                 lea     esi, [esi+0]
.text:004056B0
.text:004056B0 loc_4056B0:                             ; CODE XREF: sub_405590+106↑j
.text:004056B0                                         ; sub_405590+A9B↓j
.text:004056B0                 mov     eax, [esp+5Ch+arg_0]
.text:004056B4                 mov     ebx, eax
.text:004056B6                 mov     [ebp+24h], eax
.text:004056B9                 mov     [ebp+0], eax
.text:004056BC
.text:004056BC loc_4056BC:                             ; CODE XREF: sub_405590+F0↑j
.text:004056BC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004056C0                 jz      loc_406014
.text:004056C6                 mov     esi, [esp+5Ch+arg_4]
.text:004056CA                 mov     eax, [esi+ebx*4]
.text:004056CD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004056D0                 jz      short loc_4056F7
.text:004056D2
.text:004056D2 loc_4056D2:                             ; CODE XREF: sub_405590+16D↓j
.text:004056D2                 mov     edx, [ebp+18h]
.text:004056D5                 test    edx, edx
.text:004056D7                 jz      short loc_4056F0
.text:004056D9                 mov     [ebp+0Ch], eax
.text:004056DC                 lea     edi, [ebx+1]
.text:004056DF                 mov     eax, 1
.text:004056E4                 mov     [ebp+0], edi
.text:004056E7
.text:004056E7 loc_4056E7:                             ; CODE XREF: sub_405590+2D↑j
.text:004056E7                                         ; sub_405590+165↓j ...
.text:004056E7                 add     esp, 4Ch
.text:004056EA                 pop     ebx
.text:004056EB                 pop     esi
.text:004056EC                 pop     edi
.text:004056ED                 pop     ebp
.text:004056EE                 retn
.text:004056EE ; ---------------------------------------------------------------------------
.text:004056EF                 align 10h
.text:004056F0
.text:004056F0 loc_4056F0:                             ; CODE XREF: sub_405590+147↑j
.text:004056F0                                         ; sub_405590+A8A↓j ...
.text:004056F0                 mov     eax, 0FFFFFFFFh
.text:004056F5                 jmp     short loc_4056E7
.text:004056F7 ; ---------------------------------------------------------------------------
.text:004056F7
.text:004056F7 loc_4056F7:                             ; CODE XREF: sub_405590+140↑j
.text:004056F7                 movzx   edx, byte ptr [eax+1]
.text:004056FB                 test    dl, dl
.text:004056FD                 jz      short loc_4056D2
.text:004056FF                 mov     ebx, [esp+5Ch+arg_C]
.text:00405703                 xor     ecx, ecx
.text:00405705                 test    ebx, ebx
.text:00405707                 jz      short loc_405712
.text:00405709                 cmp     dl, 2Dh ; '-'
.text:0040570C                 jz      loc_40600A
.text:00405712
.text:00405712 loc_405712:                             ; CODE XREF: sub_405590+177↑j
.text:00405712                                         ; sub_405590+A7F↓j
.text:00405712                 lea     esi, [ecx+eax+1]
.text:00405716                 mov     [ebp+14h], esi
.text:00405719                 lea     esi, [esi+0]
.text:00405720
.text:00405720 loc_405720:                             ; CODE XREF: sub_405590+AD↑j
.text:00405720                 mov     ecx, [esp+5Ch+arg_C]
.text:00405724                 test    ecx, ecx
.text:00405726                 jz      loc_405AB0
.text:0040572C                 mov     edx, [ebp+0]
.text:0040572F                 mov     edi, [esp+5Ch+arg_4]
.text:00405733                 mov     eax, [edi+edx*4]
.text:00405736                 movzx   edx, byte ptr [eax+1]
.text:0040573A                 cmp     dl, 2Dh ; '-'
.text:0040573D                 jz      short loc_405755
.text:0040573F                 mov     ebx, [esp+5Ch+arg_14]
.text:00405743                 test    ebx, ebx
.text:00405745                 jz      loc_405AB0
.text:0040574B                 cmp     byte ptr [eax+2], 0
.text:0040574F                 jz      loc_405FEA
.text:00405755
.text:00405755 loc_405755:                             ; CODE XREF: sub_405590+1AD↑j
.text:00405755                                         ; sub_405590+A75↓j
.text:00405755                 mov     [esp+5Ch+var_18], 0
.text:0040575D                 mov     ecx, [ebp+14h]
.text:00405760                 mov     [esp+5Ch+var_1C], 0
.text:00405768                 mov     [esp+5Ch+var_20], 0
.text:00405770                 mov     edi, ecx
.text:00405772                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040577A                 movzx   eax, byte ptr [ecx]
.text:0040577D                 test    al, al
.text:0040577F                 jz      short loc_40579C
.text:00405781                 cmp     al, 3Dh ; '='
.text:00405783                 jz      short loc_40579C
.text:00405785                 lea     esi, [esi+0]
.text:00405789                 lea     edi, [edi+0]
.text:00405790
.text:00405790 loc_405790:                             ; CODE XREF: sub_405590+20A↓j
.text:00405790                 inc     edi
.text:00405791                 movzx   eax, byte ptr [edi]
.text:00405794                 test    al, al
.text:00405796                 jz      short loc_40579C
.text:00405798                 cmp     al, 3Dh ; '='
.text:0040579A                 jnz     short loc_405790
.text:0040579C
.text:0040579C loc_40579C:                             ; CODE XREF: sub_405590+1EF↑j
.text:0040579C                                         ; sub_405590+1F3↑j ...
.text:0040579C                 mov     [esp+5Ch+var_28], 0
.text:004057A4                 mov     esi, [esp+5Ch+arg_C]
.text:004057A8                 mov     ebx, [esi]
.text:004057AA                 test    ebx, ebx
.text:004057AC                 mov     edx, ebx
.text:004057AE                 jz      loc_4059D0
.text:004057B4                 lea     esi, [esi+0]
.text:004057BA                 lea     edi, [edi+0]
.text:004057C0
.text:004057C0 loc_4057C0:                             ; CODE XREF: sub_405590+25E↓j
.text:004057C0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004057C4                 mov     ebx, edi
.text:004057C6                 sub     ebx, ecx
.text:004057C8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004057CC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004057CF                 call    strncmp
.text:004057D4                 test    eax, eax
.text:004057D6                 jz      loc_405F66
.text:004057DC
.text:004057DC loc_4057DC:                             ; CODE XREF: sub_405590+A0F↓j
.text:004057DC                                         ; sub_405590+A24↓j ...
.text:004057DC                 inc     [esp+5Ch+var_28]
.text:004057E0                 add     esi, 10h
.text:004057E3                 mov     ecx, [esi]
.text:004057E5                 test    ecx, ecx
.text:004057E7                 mov     edx, ecx
.text:004057E9                 jz      short loc_4057F0
.text:004057EB                 mov     ecx, [ebp+14h]
.text:004057EE                 jmp     short loc_4057C0
.text:004057F0 ; ---------------------------------------------------------------------------
.text:004057F0
.text:004057F0 loc_4057F0:                             ; CODE XREF: sub_405590+259↑j
.text:004057F0                                         ; sub_405590+A55↓j
.text:004057F0                 mov     esi, [esp+5Ch+var_20]
.text:004057F4                 test    esi, esi
.text:004057F6                 jz      short loc_405804
.text:004057F8                 mov     edx, [esp+5Ch+var_1C]
.text:004057FC                 test    edx, edx
.text:004057FE                 jz      loc_405F10
.text:00405804
.text:00405804 loc_405804:                             ; CODE XREF: sub_405590+266↑j
.text:00405804                 mov     eax, [esp+5Ch+var_18]
.text:00405808                 test    eax, eax
.text:0040580A                 jz      loc_4059D0
.text:00405810                 mov     ecx, [ebp+0]
.text:00405813                 lea     eax, [ecx+1]
.text:00405816                 mov     [ebp+0], eax
.text:00405819                 cmp     byte ptr [edi], 0
.text:0040581C                 jz      loc_405930
.text:00405822                 mov     ecx, [esp+5Ch+var_18]
.text:00405826                 mov     esi, [ecx+4]
.text:00405829                 test    esi, esi
.text:0040582B                 jz      short loc_405876
.text:0040582D                 lea     ebx, [edi+1]
.text:00405830                 mov     [ebp+0Ch], ebx
.text:00405833
.text:00405833 loc_405833:                             ; CODE XREF: sub_405590+3A8↓j
.text:00405833                                         ; sub_405590+3C4↓j
.text:00405833                 mov     ebx, [ebp+14h]
.text:00405836                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00405839                 call    strlen
.text:0040583E                 add     [ebp+14h], eax
.text:00405841                 mov     esi, [esp+5Ch+arg_10]
.text:00405845                 test    esi, esi
.text:00405847                 jz      short loc_405853
.text:00405849                 mov     ebp, [esp+5Ch+var_24]
.text:0040584D                 mov     ecx, [esp+5Ch+arg_10]
.text:00405851                 mov     [ecx], ebp
.text:00405853
.text:00405853 loc_405853:                             ; CODE XREF: sub_405590+2B7↑j
.text:00405853                 mov     eax, [esp+5Ch+var_18]
.text:00405857                 mov     ecx, [eax+8]
.text:0040585A                 test    ecx, ecx
.text:0040585C                 jnz     short loc_40586A
.text:0040585E                 mov     ecx, [esp+5Ch+var_18]
.text:00405862
.text:00405862 loc_405862:                             ; CODE XREF: sub_405590+723↓j
.text:00405862                 mov     eax, [ecx+0Ch]
.text:00405865                 jmp     loc_4056E7
.text:0040586A ; ---------------------------------------------------------------------------
.text:0040586A
.text:0040586A loc_40586A:                             ; CODE XREF: sub_405590+2CC↑j
.text:0040586A                                         ; sub_405590+719↓j
.text:0040586A                 mov     esi, [eax+0Ch]
.text:0040586D                 xor     eax, eax
.text:0040586F                 mov     [ecx], esi
.text:00405871                 jmp     loc_4056E7
.text:00405876 ; ---------------------------------------------------------------------------
.text:00405876
.text:00405876 loc_405876:                             ; CODE XREF: sub_405590+29B↑j
.text:00405876                 mov     edi, [esp+5Ch+var_14]
.text:0040587A                 test    edi, edi
.text:0040587C                 jz      short loc_4058D0
.text:0040587E                 mov     esi, [esp+5Ch+arg_4]
.text:00405882                 mov     edx, [esi+eax*4-4]
.text:00405886                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040588A                 jz      short loc_4058F2
.text:0040588C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00405893                 call    ds:libintl_gettext
.text:00405899                 mov     edx, [esp+5Ch+var_18]
.text:0040589D                 mov     edi, [edx]
.text:0040589F                 mov     [esp+5Ch+var_4C], edi
.text:004058A3                 mov     ebx, [ebp+0]
.text:004058A6                 mov     edi, [esp+5Ch+arg_4]
.text:004058AA                 mov     ecx, [edi+ebx*4-4]
.text:004058AE                 movsx   esi, byte ptr [ecx]
.text:004058B1                 mov     ecx, ds:_iob
.text:004058B7                 add     ecx, 40h ; '@'
.text:004058BA                 mov     [esp+5Ch+var_50], esi
.text:004058BE                 mov     ebx, [edi]
.text:004058C0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004058C4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004058C7                 mov     [esp+5Ch+MaxCount], ebx
.text:004058CB                 call    fprintf
.text:004058D0
.text:004058D0 loc_4058D0:                             ; CODE XREF: sub_405590+2EC↑j
.text:004058D0                                         ; sub_405590+398↓j
.text:004058D0                 mov     ecx, [ebp+14h]
.text:004058D3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004058D6                 call    strlen
.text:004058DB                 add     [ebp+14h], eax
.text:004058DE                 mov     eax, [esp+5Ch+var_18]
.text:004058E2                 mov     esi, [eax+0Ch]
.text:004058E5                 mov     [ebp+8], esi
.text:004058E8
.text:004058E8 loc_4058E8:                             ; CODE XREF: sub_405590+4E5↓j
.text:004058E8                                         ; sub_405590+73E↓j ...
.text:004058E8                 mov     eax, 3Fh ; '?'
.text:004058ED                 jmp     loc_4056E7
.text:004058F2 ; ---------------------------------------------------------------------------
.text:004058F2
.text:004058F2 loc_4058F2:                             ; CODE XREF: sub_405590+2FA↑j
.text:004058F2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:004058F9                 call    ds:libintl_gettext
.text:004058FF                 mov     edx, [esp+5Ch+var_18]
.text:00405903                 mov     edi, [esp+5Ch+arg_4]
.text:00405907                 mov     ecx, ds:_iob
.text:0040590D                 mov     esi, [edx]
.text:0040590F                 add     ecx, 40h ; '@'
.text:00405912                 mov     [esp+5Ch+var_50], esi
.text:00405916                 mov     ebx, [edi]
.text:00405918                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040591C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040591F                 mov     [esp+5Ch+MaxCount], ebx
.text:00405923                 call    fprintf
.text:00405928                 jmp     short loc_4058D0
.text:00405928 ; ---------------------------------------------------------------------------
.text:0040592A                 align 10h
.text:00405930
.text:00405930 loc_405930:                             ; CODE XREF: sub_405590+28C↑j
.text:00405930                 mov     ebx, [esp+5Ch+var_18]
.text:00405934                 cmp     dword ptr [ebx+4], 1
.text:00405938                 jnz     loc_405833
.text:0040593E                 cmp     eax, [esp+5Ch+arg_0]
.text:00405942                 jge     short loc_405959
.text:00405944                 mov     ebx, [esp+5Ch+arg_4]
.text:00405948                 lea     edi, [ecx+2]
.text:0040594B                 mov     [ebp+0], edi
.text:0040594E                 mov     esi, [ebx+eax*4]
.text:00405951                 mov     [ebp+0Ch], esi
.text:00405954                 jmp     loc_405833
.text:00405959 ; ---------------------------------------------------------------------------
.text:00405959
.text:00405959 loc_405959:                             ; CODE XREF: sub_405590+3B2↑j
.text:00405959                 mov     edx, [esp+5Ch+var_14]
.text:0040595D                 test    edx, edx
.text:0040595F                 jnz     short loc_405990
.text:00405961
.text:00405961 loc_405961:                             ; CODE XREF: sub_405590+437↓j
.text:00405961                 mov     edx, [ebp+14h]
.text:00405964                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405967                 call    strlen
.text:0040596C                 add     [ebp+14h], eax
.text:0040596F                 mov     eax, [esp+5Ch+var_18]
.text:00405973                 mov     edi, [eax+0Ch]
.text:00405976                 mov     [ebp+8], edi
.text:00405979
.text:00405979 loc_405979:                             ; CODE XREF: sub_405590+7C2↓j
.text:00405979                 mov     ebp, [esp+5Ch+Str]
.text:0040597D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00405981                 setnz   bl
.text:00405984                 movzx   esi, bl
.text:00405987                 lea     eax, [esi+esi*4+3Ah]
.text:0040598B                 jmp     loc_4056E7
.text:00405990 ; ---------------------------------------------------------------------------
.text:00405990
.text:00405990 loc_405990:                             ; CODE XREF: sub_405590+3CF↑j
.text:00405990                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00405997                 call    ds:libintl_gettext
.text:0040599D                 mov     ecx, [ebp+0]
.text:004059A0                 mov     esi, [esp+5Ch+arg_4]
.text:004059A4                 mov     ebx, [esi+ecx*4-4]
.text:004059A8                 mov     ecx, ds:_iob
.text:004059AE                 mov     [esp+5Ch+var_50], ebx
.text:004059B2                 mov     edi, [esi]
.text:004059B4                 add     ecx, 40h ; '@'
.text:004059B7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004059BB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004059BE                 mov     [esp+5Ch+MaxCount], edi
.text:004059C2                 call    fprintf
.text:004059C7                 jmp     short loc_405961
.text:004059C7 ; ---------------------------------------------------------------------------
.text:004059C9                 align 10h
.text:004059D0
.text:004059D0 loc_4059D0:                             ; CODE XREF: sub_405590+21E↑j
.text:004059D0                                         ; sub_405590+27A↑j
.text:004059D0                 mov     eax, [esp+5Ch+arg_14]
.text:004059D4                 test    eax, eax
.text:004059D6                 jz      short loc_405A06
.text:004059D8                 mov     ebx, [ebp+0]
.text:004059DB                 mov     esi, [esp+5Ch+arg_4]
.text:004059DF                 mov     edi, [esi+ebx*4]
.text:004059E2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004059E6                 jz      short loc_405A09
.text:004059E8                 mov     ecx, [ebp+14h]
.text:004059EB                 mov     edx, [esp+5Ch+Str]
.text:004059EF                 movsx   ebx, byte ptr [ecx]
.text:004059F2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004059F5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004059F9                 call    strchr
.text:004059FE                 test    eax, eax
.text:00405A00                 jnz     loc_405AB0
.text:00405A06
.text:00405A06 loc_405A06:                             ; CODE XREF: sub_405590+446↑j
.text:00405A06                 mov     ebx, [ebp+0]
.text:00405A09
.text:00405A09 loc_405A09:                             ; CODE XREF: sub_405590+456↑j
.text:00405A09                 mov     eax, [esp+5Ch+var_14]
.text:00405A0D                 test    eax, eax
.text:00405A0F                 jz      short loc_405A61
.text:00405A11                 mov     esi, [esp+5Ch+arg_4]
.text:00405A15                 mov     edi, [esi+ebx*4]
.text:00405A18                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00405A1C                 jz      short loc_405A7A
.text:00405A1E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00405A25                 call    ds:libintl_gettext
.text:00405A2B                 mov     edi, [ebp+14h]
.text:00405A2E                 mov     [esp+5Ch+var_4C], edi
.text:00405A32                 mov     ebx, [ebp+0]
.text:00405A35                 mov     edi, [esp+5Ch+arg_4]
.text:00405A39                 mov     esi, [edi+ebx*4]
.text:00405A3C                 movsx   ecx, byte ptr [esi]
.text:00405A3F                 mov     esi, ds:_iob
.text:00405A45                 add     esi, 40h ; '@'
.text:00405A48                 mov     [esp+5Ch+var_50], ecx
.text:00405A4C                 mov     ebx, [edi]
.text:00405A4E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405A52                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00405A55                 mov     [esp+5Ch+MaxCount], ebx
.text:00405A59                 call    fprintf
.text:00405A5E
.text:00405A5E loc_405A5E:                             ; CODE XREF: sub_405590+51D↓j
.text:00405A5E                 mov     ebx, [ebp+0]
.text:00405A61
.text:00405A61 loc_405A61:                             ; CODE XREF: sub_405590+47F↑j
.text:00405A61                 mov     dword ptr [ebp+14h], offset dword_405440
.text:00405A68                 lea     edx, [ebx+1]
.text:00405A6B                 mov     [ebp+0], edx
.text:00405A6E
.text:00405A6E loc_405A6E:                             ; CODE XREF: sub_405590+999↓j
.text:00405A6E                 mov     dword ptr [ebp+8], 0
.text:00405A75                 jmp     loc_4058E8
.text:00405A7A ; ---------------------------------------------------------------------------
.text:00405A7A
.text:00405A7A loc_405A7A:                             ; CODE XREF: sub_405590+48C↑j
.text:00405A7A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00405A81                 call    ds:libintl_gettext
.text:00405A87                 mov     ecx, [ebp+14h]
.text:00405A8A                 mov     edi, [esp+5Ch+arg_4]
.text:00405A8E                 mov     edx, ds:_iob
.text:00405A94                 mov     [esp+5Ch+var_50], ecx
.text:00405A98                 mov     ebx, [edi]
.text:00405A9A                 add     edx, 40h ; '@'
.text:00405A9D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405AA1                 mov     [esp+5Ch+MaxCount], ebx
.text:00405AA5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00405AA8                 call    fprintf
.text:00405AAD                 jmp     short loc_405A5E
.text:00405AAD ; ---------------------------------------------------------------------------
.text:00405AAF                 align 10h
.text:00405AB0
.text:00405AB0 loc_405AB0:                             ; CODE XREF: sub_405590+196↑j
.text:00405AB0                                         ; sub_405590+1B5↑j ...
.text:00405AB0                 mov     esi, [ebp+14h]
.text:00405AB3                 movzx   ebx, byte ptr [esi]
.text:00405AB6                 inc     esi
.text:00405AB7                 mov     [ebp+14h], esi
.text:00405ABA                 mov     ecx, [esp+5Ch+Str]
.text:00405ABE                 movsx   esi, bl
.text:00405AC1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00405AC5                 mov     edi, esi
.text:00405AC7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00405ACA                 call    strchr
.text:00405ACF                 mov     ecx, [ebp+14h]
.text:00405AD2                 cmp     byte ptr [ecx], 0
.text:00405AD5                 jnz     short loc_405ADA
.text:00405AD7                 inc     dword ptr [ebp+0]
.text:00405ADA
.text:00405ADA loc_405ADA:                             ; CODE XREF: sub_405590+545↑j
.text:00405ADA                 test    eax, eax
.text:00405ADC                 jz      loc_405EC0
.text:00405AE2                 cmp     bl, 3Ah ; ':'
.text:00405AE5                 jz      loc_405EC0
.text:00405AEB                 cmp     byte ptr [eax], 57h ; 'W'
.text:00405AEE                 jz      loc_405BA6
.text:00405AF4                 movzx   edx, byte ptr [eax+1]
.text:00405AF8
.text:00405AF8 loc_405AF8:                             ; CODE XREF: sub_405590+61D↓j
.text:00405AF8                 cmp     dl, 3Ah ; ':'
.text:00405AFB                 jz      short loc_405B04
.text:00405AFD
.text:00405AFD loc_405AFD:                             ; CODE XREF: sub_405590+590↓j
.text:00405AFD                 mov     eax, esi
.text:00405AFF                 jmp     loc_4056E7
.text:00405B04 ; ---------------------------------------------------------------------------
.text:00405B04
.text:00405B04 loc_405B04:                             ; CODE XREF: sub_405590+56B↑j
.text:00405B04                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00405B08                 jz      loc_405B91
.text:00405B0E                 cmp     byte ptr [ecx], 0
.text:00405B11                 jz      short loc_405B22
.text:00405B13
.text:00405B13 loc_405B13:                             ; CODE XREF: sub_405590+604↓j
.text:00405B13                 inc     dword ptr [ebp+0]
.text:00405B16                 mov     [ebp+0Ch], ecx
.text:00405B19
.text:00405B19 loc_405B19:                             ; CODE XREF: sub_405590+5AB↓j
.text:00405B19                                         ; sub_405590+5C6↓j ...
.text:00405B19                 mov     dword ptr [ebp+14h], 0
.text:00405B20                 jmp     short loc_405AFD
.text:00405B22 ; ---------------------------------------------------------------------------
.text:00405B22
.text:00405B22 loc_405B22:                             ; CODE XREF: sub_405590+581↑j
.text:00405B22                 mov     ecx, [ebp+0]
.text:00405B25                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405B29                 jz      short loc_405B3D
.text:00405B2B                 mov     eax, [esp+5Ch+arg_4]
.text:00405B2F                 lea     edx, [ecx+1]
.text:00405B32                 mov     [ebp+0], edx
.text:00405B35                 mov     ebx, [eax+ecx*4]
.text:00405B38                 mov     [ebp+0Ch], ebx
.text:00405B3B                 jmp     short loc_405B19
.text:00405B3D ; ---------------------------------------------------------------------------
.text:00405B3D
.text:00405B3D loc_405B3D:                             ; CODE XREF: sub_405590+599↑j
.text:00405B3D                 mov     ecx, [esp+5Ch+var_14]
.text:00405B41                 test    ecx, ecx
.text:00405B43                 jnz     short loc_405B5F
.text:00405B45
.text:00405B45 loc_405B45:                             ; CODE XREF: sub_405590+5FF↓j
.text:00405B45                 mov     [ebp+8], edi
.text:00405B48                 mov     edi, [esp+5Ch+Str]
.text:00405B4C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00405B4F                 jz      short loc_405B58
.text:00405B51                 mov     esi, 3Fh ; '?'
.text:00405B56                 jmp     short loc_405B19
.text:00405B58 ; ---------------------------------------------------------------------------
.text:00405B58
.text:00405B58 loc_405B58:                             ; CODE XREF: sub_405590+5BF↑j
.text:00405B58                 mov     esi, 3Ah ; ':'
.text:00405B5D                 jmp     short loc_405B19
.text:00405B5F ; ---------------------------------------------------------------------------
.text:00405B5F
.text:00405B5F loc_405B5F:                             ; CODE XREF: sub_405590+5B3↑j
.text:00405B5F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00405B66                 call    ds:libintl_gettext
.text:00405B6C                 mov     [esp+5Ch+var_50], edi
.text:00405B70                 mov     ebx, [esp+5Ch+arg_4]
.text:00405B74                 mov     edx, ds:_iob
.text:00405B7A                 mov     esi, [ebx]
.text:00405B7C                 add     edx, 40h ; '@'
.text:00405B7F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405B83                 mov     [esp+5Ch+MaxCount], esi
.text:00405B87                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00405B8A                 call    fprintf
.text:00405B8F                 jmp     short loc_405B45
.text:00405B91 ; ---------------------------------------------------------------------------
.text:00405B91
.text:00405B91 loc_405B91:                             ; CODE XREF: sub_405590+578↑j
.text:00405B91                 cmp     byte ptr [ecx], 0
.text:00405B94                 jnz     loc_405B13
.text:00405B9A                 mov     dword ptr [ebp+0Ch], 0
.text:00405BA1                 jmp     loc_405B19
.text:00405BA6 ; ---------------------------------------------------------------------------
.text:00405BA6
.text:00405BA6 loc_405BA6:                             ; CODE XREF: sub_405590+55E↑j
.text:00405BA6                 movzx   edx, byte ptr [eax+1]
.text:00405BAA                 cmp     dl, 3Bh ; ';'
.text:00405BAD                 jnz     loc_405AF8
.text:00405BB3                 mov     [esp+5Ch+var_2C], 0
.text:00405BBB                 mov     [esp+5Ch+var_30], 0
.text:00405BC3                 mov     [esp+5Ch+var_34], 0
.text:00405BCB                 mov     [esp+5Ch+var_38], 0
.text:00405BD3                 cmp     byte ptr [ecx], 0
.text:00405BD6                 jz      loc_405E4B
.text:00405BDC                 inc     dword ptr [ebp+0]
.text:00405BDF                 mov     [ebp+0Ch], ecx
.text:00405BE2
.text:00405BE2 loc_405BE2:                             ; CODE XREF: sub_405590+8D4↓j
.text:00405BE2                 mov     edi, [ebp+0Ch]
.text:00405BE5                 mov     [ebp+14h], edi
.text:00405BE8                 movzx   eax, byte ptr [edi]
.text:00405BEB                 test    al, al
.text:00405BED                 jz      short loc_405BFF
.text:00405BEF                 cmp     al, 3Dh ; '='
.text:00405BF1                 jz      short loc_405BFF
.text:00405BF3
.text:00405BF3 loc_405BF3:                             ; CODE XREF: sub_405590+66D↓j
.text:00405BF3                 inc     edi
.text:00405BF4                 movzx   eax, byte ptr [edi]
.text:00405BF7                 test    al, al
.text:00405BF9                 jz      short loc_405BFF
.text:00405BFB                 cmp     al, 3Dh ; '='
.text:00405BFD                 jnz     short loc_405BF3
.text:00405BFF
.text:00405BFF loc_405BFF:                             ; CODE XREF: sub_405590+65D↑j
.text:00405BFF                                         ; sub_405590+661↑j ...
.text:00405BFF                 mov     [esp+5Ch+var_3C], 0
.text:00405C07                 mov     esi, [esp+5Ch+arg_C]
.text:00405C0B                 mov     eax, [esi]
.text:00405C0D                 test    eax, eax
.text:00405C0F                 jz      loc_405D90
.text:00405C15                 mov     ecx, eax
.text:00405C17
.text:00405C17 loc_405C17:                             ; CODE XREF: sub_405590+6B3↓j
.text:00405C17                 mov     ebx, [ebp+14h]
.text:00405C1A                 mov     eax, edi
.text:00405C1C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00405C1F                 sub     eax, ebx
.text:00405C21                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00405C25                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00405C29                 call    strncmp
.text:00405C2E                 test    eax, eax
.text:00405C30                 jz      loc_405DF7
.text:00405C36
.text:00405C36 loc_405C36:                             ; CODE XREF: sub_405590+88C↓j
.text:00405C36                                         ; sub_405590+89D↓j
.text:00405C36                 inc     [esp+5Ch+var_3C]
.text:00405C3A                 add     esi, 10h
.text:00405C3D                 mov     edx, [esi]
.text:00405C3F                 test    edx, edx
.text:00405C41                 mov     ecx, edx
.text:00405C43                 jnz     short loc_405C17
.text:00405C45
.text:00405C45 loc_405C45:                             ; CODE XREF: sub_405590+8B6↓j
.text:00405C45                 mov     esi, [esp+5Ch+var_34]
.text:00405C49                 test    esi, esi
.text:00405C4B                 jz      short loc_405C59
.text:00405C4D                 mov     ebx, [esp+5Ch+var_30]
.text:00405C51                 test    ebx, ebx
.text:00405C53                 jz      loc_405DA1
.text:00405C59
.text:00405C59 loc_405C59:                             ; CODE XREF: sub_405590+6BB↑j
.text:00405C59                 mov     esi, [esp+5Ch+var_2C]
.text:00405C5D                 test    esi, esi
.text:00405C5F                 jz      loc_405D90
.text:00405C65                 cmp     byte ptr [edi], 0
.text:00405C68                 jz      loc_405D10
.text:00405C6E                 mov     ecx, [esp+5Ch+var_2C]
.text:00405C72                 mov     ebx, [ecx+4]
.text:00405C75                 test    ebx, ebx
.text:00405C77                 jz      short loc_405CB8
.text:00405C79                 lea     edx, [edi+1]
.text:00405C7C                 mov     [ebp+0Ch], edx
.text:00405C7F
.text:00405C7F loc_405C7F:                             ; CODE XREF: sub_405590+788↓j
.text:00405C7F                                         ; sub_405590+7A7↓j
.text:00405C7F                 mov     edi, [ebp+14h]
.text:00405C82                 mov     [esp+5Ch+Str1], edi ; Str
.text:00405C85                 call    strlen
.text:00405C8A                 add     [ebp+14h], eax
.text:00405C8D                 mov     eax, [esp+5Ch+arg_10]
.text:00405C91                 test    eax, eax
.text:00405C93                 jz      short loc_405CA0
.text:00405C95                 mov     edx, [esp+5Ch+var_38]
.text:00405C99                 mov     ebp, [esp+5Ch+arg_10]
.text:00405C9D                 mov     [ebp+0], edx
.text:00405CA0
.text:00405CA0 loc_405CA0:                             ; CODE XREF: sub_405590+703↑j
.text:00405CA0                 mov     eax, [esp+5Ch+var_2C]
.text:00405CA4                 mov     ecx, [eax+8]
.text:00405CA7                 test    ecx, ecx
.text:00405CA9                 jnz     loc_40586A
.text:00405CAF                 mov     ecx, [esp+5Ch+var_2C]
.text:00405CB3                 jmp     loc_405862
.text:00405CB8 ; ---------------------------------------------------------------------------
.text:00405CB8
.text:00405CB8 loc_405CB8:                             ; CODE XREF: sub_405590+6E7↑j
.text:00405CB8                 mov     eax, [esp+5Ch+var_14]
.text:00405CBC                 test    eax, eax
.text:00405CBE                 jnz     short loc_405CD3
.text:00405CC0
.text:00405CC0 loc_405CC0:                             ; CODE XREF: sub_405590+779↓j
.text:00405CC0                 mov     ecx, [ebp+14h]
.text:00405CC3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00405CC6                 call    strlen
.text:00405CCB                 add     [ebp+14h], eax
.text:00405CCE                 jmp     loc_4058E8
.text:00405CD3 ; ---------------------------------------------------------------------------
.text:00405CD3
.text:00405CD3 loc_405CD3:                             ; CODE XREF: sub_405590+72E↑j
.text:00405CD3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00405CDA                 call    ds:libintl_gettext
.text:00405CE0                 mov     edx, [esp+5Ch+var_2C]
.text:00405CE4                 mov     ebx, [esp+5Ch+arg_4]
.text:00405CE8                 mov     edi, [edx]
.text:00405CEA                 mov     [esp+5Ch+var_50], edi
.text:00405CEE                 mov     edi, ds:_iob
.text:00405CF4                 mov     esi, [ebx]
.text:00405CF6                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405CFA                 add     edi, 40h ; '@'
.text:00405CFD                 mov     [esp+5Ch+MaxCount], esi
.text:00405D01                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00405D04                 call    fprintf
.text:00405D09                 jmp     short loc_405CC0
.text:00405D09 ; ---------------------------------------------------------------------------
.text:00405D0B                 align 10h
.text:00405D10
.text:00405D10 loc_405D10:                             ; CODE XREF: sub_405590+6D8↑j
.text:00405D10                 mov     esi, [esp+5Ch+var_2C]
.text:00405D14                 cmp     dword ptr [esi+4], 1
.text:00405D18                 jnz     loc_405C7F
.text:00405D1E                 mov     ecx, [ebp+0]
.text:00405D21                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405D25                 jge     short loc_405D3C
.text:00405D27                 mov     eax, [esp+5Ch+arg_4]
.text:00405D2B                 lea     ebx, [ecx+1]
.text:00405D2E                 mov     [ebp+0], ebx
.text:00405D31                 mov     edi, [eax+ecx*4]
.text:00405D34                 mov     [ebp+0Ch], edi
.text:00405D37                 jmp     loc_405C7F
.text:00405D3C ; ---------------------------------------------------------------------------
.text:00405D3C
.text:00405D3C loc_405D3C:                             ; CODE XREF: sub_405590+795↑j
.text:00405D3C                 mov     edx, [esp+5Ch+var_14]
.text:00405D40                 test    edx, edx
.text:00405D42                 jnz     short loc_405D57
.text:00405D44
.text:00405D44 loc_405D44:                             ; CODE XREF: sub_405590+7FE↓j
.text:00405D44                 mov     edx, [ebp+14h]
.text:00405D47                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405D4A                 call    strlen
.text:00405D4F                 add     [ebp+14h], eax
.text:00405D52                 jmp     loc_405979
.text:00405D57 ; ---------------------------------------------------------------------------
.text:00405D57
.text:00405D57 loc_405D57:                             ; CODE XREF: sub_405590+7B2↑j
.text:00405D57                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00405D5E                 call    ds:libintl_gettext
.text:00405D64                 mov     ecx, [ebp+0]
.text:00405D67                 mov     ebx, [esp+5Ch+arg_4]
.text:00405D6B                 mov     edi, [ebx+ecx*4-4]
.text:00405D6F                 mov     ecx, ds:_iob
.text:00405D75                 mov     [esp+5Ch+var_50], edi
.text:00405D79                 mov     esi, [ebx]
.text:00405D7B                 add     ecx, 40h ; '@'
.text:00405D7E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405D82                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405D85                 mov     [esp+5Ch+MaxCount], esi
.text:00405D89                 call    fprintf
.text:00405D8E                 jmp     short loc_405D44
.text:00405D90 ; ---------------------------------------------------------------------------
.text:00405D90
.text:00405D90 loc_405D90:                             ; CODE XREF: sub_405590+67F↑j
.text:00405D90                                         ; sub_405590+6CF↑j
.text:00405D90                 mov     dword ptr [ebp+14h], 0
.text:00405D97                 mov     eax, 57h ; 'W'
.text:00405D9C                 jmp     loc_4056E7
.text:00405DA1 ; ---------------------------------------------------------------------------
.text:00405DA1
.text:00405DA1 loc_405DA1:                             ; CODE XREF: sub_405590+6C3↑j
.text:00405DA1                 mov     edi, [esp+5Ch+var_14]
.text:00405DA5                 test    edi, edi
.text:00405DA7                 jnz     short loc_405DBF
.text:00405DA9
.text:00405DA9 loc_405DA9:                             ; CODE XREF: sub_405590+865↓j
.text:00405DA9                 mov     edx, [ebp+14h]
.text:00405DAC                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405DAF                 call    strlen
.text:00405DB4                 add     [ebp+14h], eax
.text:00405DB7                 inc     dword ptr [ebp+0]
.text:00405DBA                 jmp     loc_4058E8
.text:00405DBF ; ---------------------------------------------------------------------------
.text:00405DBF
.text:00405DBF loc_405DBF:                             ; CODE XREF: sub_405590+817↑j
.text:00405DBF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00405DC6                 call    ds:libintl_gettext
.text:00405DCC                 mov     ecx, [ebp+0]
.text:00405DCF                 mov     ebx, [esp+5Ch+arg_4]
.text:00405DD3                 mov     edi, [ebx+ecx*4]
.text:00405DD6                 mov     ecx, ds:_iob
.text:00405DDC                 mov     [esp+5Ch+var_50], edi
.text:00405DE0                 mov     esi, [ebx]
.text:00405DE2                 add     ecx, 40h ; '@'
.text:00405DE5                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405DE9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405DEC                 mov     [esp+5Ch+MaxCount], esi
.text:00405DF0                 call    fprintf
.text:00405DF5                 jmp     short loc_405DA9
.text:00405DF7 ; ---------------------------------------------------------------------------
.text:00405DF7
.text:00405DF7 loc_405DF7:                             ; CODE XREF: sub_405590+6A0↑j
.text:00405DF7                 mov     edx, [ebp+14h]
.text:00405DFA                 mov     ebx, edi
.text:00405DFC                 mov     ecx, [esi]
.text:00405DFE                 sub     ebx, edx
.text:00405E00                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00405E03                 call    strlen
.text:00405E08                 cmp     ebx, eax
.text:00405E0A                 jz      short loc_405E32
.text:00405E0C                 mov     ebx, [esp+5Ch+var_2C]
.text:00405E10                 test    ebx, ebx
.text:00405E12                 jz      short loc_405E21
.text:00405E14                 mov     [esp+5Ch+var_34], 1
.text:00405E1C                 jmp     loc_405C36
.text:00405E21 ; ---------------------------------------------------------------------------
.text:00405E21
.text:00405E21 loc_405E21:                             ; CODE XREF: sub_405590+882↑j
.text:00405E21                 mov     [esp+5Ch+var_2C], esi
.text:00405E25                 mov     ecx, [esp+5Ch+var_3C]
.text:00405E29                 mov     [esp+5Ch+var_38], ecx
.text:00405E2D                 jmp     loc_405C36
.text:00405E32 ; ---------------------------------------------------------------------------
.text:00405E32
.text:00405E32 loc_405E32:                             ; CODE XREF: sub_405590+87A↑j
.text:00405E32                 mov     [esp+5Ch+var_2C], esi
.text:00405E36                 mov     eax, [esp+5Ch+var_3C]
.text:00405E3A                 mov     [esp+5Ch+var_30], 1
.text:00405E42                 mov     [esp+5Ch+var_38], eax
.text:00405E46                 jmp     loc_405C45
.text:00405E4B ; ---------------------------------------------------------------------------
.text:00405E4B
.text:00405E4B loc_405E4B:                             ; CODE XREF: sub_405590+646↑j
.text:00405E4B                 mov     edx, [ebp+0]
.text:00405E4E                 cmp     edx, [esp+5Ch+arg_0]
.text:00405E52                 jz      short loc_405E69
.text:00405E54                 mov     ebx, [esp+5Ch+arg_4]
.text:00405E58                 lea     esi, [edx+1]
.text:00405E5B                 mov     [ebp+0], esi
.text:00405E5E                 mov     edi, [ebx+edx*4]
.text:00405E61                 mov     [ebp+0Ch], edi
.text:00405E64                 jmp     loc_405BE2
.text:00405E69 ; ---------------------------------------------------------------------------
.text:00405E69
.text:00405E69 loc_405E69:                             ; CODE XREF: sub_405590+8C2↑j
.text:00405E69                 mov     edi, [esp+5Ch+var_14]
.text:00405E6D                 test    edi, edi
.text:00405E6F                 jnz     short loc_405E8C
.text:00405E71
.text:00405E71 loc_405E71:                             ; CODE XREF: sub_405590+92C↓j
.text:00405E71                 mov     [ebp+8], esi
.text:00405E74                 mov     ebp, [esp+5Ch+Str]
.text:00405E78                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00405E7C                 jz      short loc_405E88
.text:00405E7E                 mov     bl, 3Fh ; '?'
.text:00405E80
.text:00405E80 loc_405E80:                             ; CODE XREF: sub_405590+8FA↓j
.text:00405E80                 movsx   eax, bl
.text:00405E83                 jmp     loc_4056E7
.text:00405E88 ; ---------------------------------------------------------------------------
.text:00405E88
.text:00405E88 loc_405E88:                             ; CODE XREF: sub_405590+8EC↑j
.text:00405E88                 mov     bl, 3Ah ; ':'
.text:00405E8A                 jmp     short loc_405E80
.text:00405E8C ; ---------------------------------------------------------------------------
.text:00405E8C
.text:00405E8C loc_405E8C:                             ; CODE XREF: sub_405590+8DF↑j
.text:00405E8C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00405E93                 call    ds:libintl_gettext
.text:00405E99                 mov     [esp+5Ch+var_50], esi
.text:00405E9D                 mov     edx, [esp+5Ch+arg_4]
.text:00405EA1                 mov     ecx, ds:_iob
.text:00405EA7                 mov     ebx, [edx]
.text:00405EA9                 add     ecx, 40h ; '@'
.text:00405EAC                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405EB0                 mov     [esp+5Ch+MaxCount], ebx
.text:00405EB4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405EB7                 call    fprintf
.text:00405EBC                 jmp     short loc_405E71
.text:00405EBC ; ---------------------------------------------------------------------------
.text:00405EBE                 align 10h
.text:00405EC0
.text:00405EC0 loc_405EC0:                             ; CODE XREF: sub_405590+54C↑j
.text:00405EC0                                         ; sub_405590+555↑j
.text:00405EC0                 mov     eax, [esp+5Ch+var_14]
.text:00405EC4                 test    eax, eax
.text:00405EC6                 jz      short loc_405EFF
.text:00405EC8                 mov     ebx, [ebp+1Ch]
.text:00405ECB                 test    ebx, ebx
.text:00405ECD                 jz      short loc_405F07
.text:00405ECF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00405ED6
.text:00405ED6 loc_405ED6:                             ; CODE XREF: sub_405590+97E↓j
.text:00405ED6                 call    ds:libintl_gettext
.text:00405EDC                 mov     [esp+5Ch+var_50], esi
.text:00405EE0                 mov     ebx, [esp+5Ch+arg_4]
.text:00405EE4                 mov     edx, ds:_iob
.text:00405EEA                 mov     esi, [ebx]
.text:00405EEC                 add     edx, 40h ; '@'
.text:00405EEF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405EF3                 mov     [esp+5Ch+MaxCount], esi
.text:00405EF7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00405EFA                 call    fprintf
.text:00405EFF
.text:00405EFF loc_405EFF:                             ; CODE XREF: sub_405590+936↑j
.text:00405EFF                 mov     [ebp+8], edi
.text:00405F02                 jmp     loc_4058E8
.text:00405F07 ; ---------------------------------------------------------------------------
.text:00405F07
.text:00405F07 loc_405F07:                             ; CODE XREF: sub_405590+93D↑j
.text:00405F07                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00405F0E                 jmp     short loc_405ED6
.text:00405F10 ; ---------------------------------------------------------------------------
.text:00405F10
.text:00405F10 loc_405F10:                             ; CODE XREF: sub_405590+26E↑j
.text:00405F10                 mov     edi, [esp+5Ch+var_14]
.text:00405F14                 test    edi, edi
.text:00405F16                 jnz     short loc_405F2E
.text:00405F18
.text:00405F18 loc_405F18:                             ; CODE XREF: sub_405590+9D4↓j
.text:00405F18                 mov     edx, [ebp+14h]
.text:00405F1B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405F1E                 call    strlen
.text:00405F23                 add     [ebp+14h], eax
.text:00405F26                 inc     dword ptr [ebp+0]
.text:00405F29                 jmp     loc_405A6E
.text:00405F2E ; ---------------------------------------------------------------------------
.text:00405F2E
.text:00405F2E loc_405F2E:                             ; CODE XREF: sub_405590+986↑j
.text:00405F2E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00405F35                 call    ds:libintl_gettext
.text:00405F3B                 mov     ebx, [ebp+0]
.text:00405F3E                 mov     edi, [esp+5Ch+arg_4]
.text:00405F42                 mov     ecx, [edi+ebx*4]
.text:00405F45                 mov     ebx, ds:_iob
.text:00405F4B                 mov     [esp+5Ch+var_50], ecx
.text:00405F4F                 mov     esi, [edi]
.text:00405F51                 add     ebx, 40h ; '@'
.text:00405F54                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405F58                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00405F5B                 mov     [esp+5Ch+MaxCount], esi
.text:00405F5F                 call    fprintf
.text:00405F64                 jmp     short loc_405F18
.text:00405F66 ; ---------------------------------------------------------------------------
.text:00405F66
.text:00405F66 loc_405F66:                             ; CODE XREF: sub_405590+246↑j
.text:00405F66                 mov     ecx, [ebp+14h]
.text:00405F69                 mov     ebx, edi
.text:00405F6B                 mov     edx, [esi]
.text:00405F6D                 sub     ebx, ecx
.text:00405F6F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405F72                 call    strlen
.text:00405F77                 cmp     ebx, eax
.text:00405F79                 jz      short loc_405FD1
.text:00405F7B                 mov     ebx, [esp+5Ch+var_18]
.text:00405F7F                 test    ebx, ebx
.text:00405F81                 jz      short loc_405FC0
.text:00405F83                 mov     edx, [esp+5Ch+arg_14]
.text:00405F87                 test    edx, edx
.text:00405F89                 jnz     short loc_405F97
.text:00405F8B                 mov     ecx, [esp+5Ch+var_18]
.text:00405F8F                 mov     ebx, [esi+4]
.text:00405F92                 cmp     [ecx+4], ebx
.text:00405F95                 jz      short loc_405FA4
.text:00405F97
.text:00405F97 loc_405F97:                             ; CODE XREF: sub_405590+9F9↑j
.text:00405F97                                         ; sub_405590+A1A↓j ...
.text:00405F97                 mov     [esp+5Ch+var_20], 1
.text:00405F9F                 jmp     loc_4057DC
.text:00405FA4 ; ---------------------------------------------------------------------------
.text:00405FA4
.text:00405FA4 loc_405FA4:                             ; CODE XREF: sub_405590+A05↑j
.text:00405FA4                 mov     edx, [esi+8]
.text:00405FA7                 cmp     [ecx+8], edx
.text:00405FAA                 jnz     short loc_405F97
.text:00405FAC                 mov     ebx, [esi+0Ch]
.text:00405FAF                 cmp     [ecx+0Ch], ebx
.text:00405FB2                 jnz     short loc_405F97
.text:00405FB4                 jmp     loc_4057DC
.text:00405FB4 ; ---------------------------------------------------------------------------
.text:00405FB9                 align 10h
.text:00405FC0
.text:00405FC0 loc_405FC0:                             ; CODE XREF: sub_405590+9F1↑j
.text:00405FC0                 mov     [esp+5Ch+var_18], esi
.text:00405FC4                 mov     eax, [esp+5Ch+var_28]
.text:00405FC8                 mov     [esp+5Ch+var_24], eax
.text:00405FCC                 jmp     loc_4057DC
.text:00405FD1 ; ---------------------------------------------------------------------------
.text:00405FD1
.text:00405FD1 loc_405FD1:                             ; CODE XREF: sub_405590+9E9↑j
.text:00405FD1                 mov     [esp+5Ch+var_18], esi
.text:00405FD5                 mov     ecx, [esp+5Ch+var_28]
.text:00405FD9                 mov     [esp+5Ch+var_1C], 1
.text:00405FE1                 mov     [esp+5Ch+var_24], ecx
.text:00405FE5                 jmp     loc_4057F0
.text:00405FEA ; ---------------------------------------------------------------------------
.text:00405FEA
.text:00405FEA loc_405FEA:                             ; CODE XREF: sub_405590+1BF↑j
.text:00405FEA                 mov     eax, [esp+5Ch+Str]
.text:00405FEE                 movsx   esi, dl
.text:00405FF1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00405FF5                 mov     [esp+5Ch+Str1], eax ; Str
.text:00405FF8                 call    strchr
.text:00405FFD                 test    eax, eax
.text:00405FFF                 jnz     loc_405AB0
.text:00406005                 jmp     loc_405755
.text:0040600A ; ---------------------------------------------------------------------------
.text:0040600A
.text:0040600A loc_40600A:                             ; CODE XREF: sub_405590+17C↑j
.text:0040600A                 mov     ecx, 1
.text:0040600F                 jmp     loc_405712
.text:00406014 ; ---------------------------------------------------------------------------
.text:00406014
.text:00406014 loc_406014:                             ; CODE XREF: sub_405590+D4↑j
.text:00406014                                         ; sub_405590+130↑j
.text:00406014                 mov     eax, [ebp+20h]
.text:00406017                 cmp     eax, [ebp+24h]
.text:0040601A                 jz      loc_4056F0
.text:00406020                 mov     [ebp+0], eax
.text:00406023                 jmp     loc_4056F0
.text:00406028 ; ---------------------------------------------------------------------------
.text:00406028
.text:00406028 loc_406028:                             ; CODE XREF: sub_405590+FE↑j
.text:00406028                 mov     [ebp+20h], eax
.text:0040602B                 jmp     loc_4056B0
.text:00406030 ; ---------------------------------------------------------------------------
.text:00406030
.text:00406030 loc_406030:                             ; CODE XREF: sub_405590+CA↑j
.text:00406030                 mov     edx, [ebp+20h]
.text:00406033                 mov     eax, [ebp+24h]
.text:00406036                 cmp     edx, eax
.text:00406038                 jz      short loc_4060B0
.text:0040603A                 cmp     eax, ebx
.text:0040603C                 jz      short loc_406051
.text:0040603E                 mov     [esp+5Ch+Str2], ebp
.text:00406042                 mov     ebx, [esp+5Ch+arg_4]
.text:00406046                 mov     [esp+5Ch+Str1], ebx
.text:00406049                 call    sub_406240
.text:0040604E                 mov     ebx, [ebp+0]
.text:00406051
.text:00406051 loc_406051:                             ; CODE XREF: sub_405590+AAC↑j
.text:00406051                                         ; sub_405590+B22↓j ...
.text:00406051                 cmp     ebx, [esp+5Ch+arg_0]
.text:00406055                 jge     short loc_4060A0
.text:00406057                 mov     esi, [esp+5Ch+arg_4]
.text:0040605B                 mov     eax, [esi+ebx*4]
.text:0040605E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00406061                 jz      short loc_4060A8
.text:00406063                 lea     esi, [esi+0]
.text:00406069                 lea     edi, [edi+0]
.text:00406070
.text:00406070 loc_406070:                             ; CODE XREF: sub_405590+AFC↓j
.text:00406070                                         ; sub_405590+B1C↓j
.text:00406070                 lea     eax, [ebx+1]
.text:00406073                 mov     ebx, eax
.text:00406075                 mov     [ebp+0], eax
.text:00406078                 cmp     eax, [esp+5Ch+arg_0]
.text:0040607C                 jge     short loc_4060A0
.text:0040607E                 mov     edi, [esp+5Ch+arg_4]
.text:00406082                 mov     edx, [edi+eax*4]
.text:00406085                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00406088                 jz      short loc_406090
.text:0040608A
.text:0040608A loc_40608A:                             ; CODE XREF: sub_405590+B04↓j
.text:0040608A                 mov     ebx, eax
.text:0040608C                 jmp     short loc_406070
.text:0040608C ; ---------------------------------------------------------------------------
.text:0040608E                 align 10h
.text:00406090
.text:00406090 loc_406090:                             ; CODE XREF: sub_405590+AF8↑j
.text:00406090                 cmp     byte ptr [edx+1], 0
.text:00406094                 jz      short loc_40608A
.text:00406096                 lea     esi, [esi+0]
.text:00406099                 lea     edi, [edi+0]
.text:004060A0
.text:004060A0 loc_4060A0:                             ; CODE XREF: sub_405590+AC5↑j
.text:004060A0                                         ; sub_405590+AEC↑j ...
.text:004060A0                 mov     [ebp+24h], ebx
.text:004060A3                 jmp     loc_405660
.text:004060A8 ; ---------------------------------------------------------------------------
.text:004060A8
.text:004060A8 loc_4060A8:                             ; CODE XREF: sub_405590+AD1↑j
.text:004060A8                 cmp     byte ptr [eax+1], 0
.text:004060AC                 jz      short loc_406070
.text:004060AE                 jmp     short loc_4060A0
.text:004060B0 ; ---------------------------------------------------------------------------
.text:004060B0
.text:004060B0 loc_4060B0:                             ; CODE XREF: sub_405590+AA8↑j
.text:004060B0                 cmp     edx, ebx
.text:004060B2                 jz      short loc_406051
.text:004060B4                 mov     [ebp+20h], ebx
.text:004060B7                 jmp     short loc_406051
.text:004060B9 ; ---------------------------------------------------------------------------
.text:004060B9
.text:004060B9 loc_4060B9:                             ; CODE XREF: sub_405590+88↑j
.text:004060B9                 mov     dword ptr [ebp+18h], 0
.text:004060C0                 mov     esi, [esp+5Ch+Str]
.text:004060C4
.text:004060C4 loc_4060C4:                             ; CODE XREF: sub_405590+B49↓j
.text:004060C4                 inc     esi
.text:004060C5                 jmp     loc_405628
.text:004060C5 ; ---------------------------------------------------------------------------
.text:004060CA                 align 10h
.text:004060D0
.text:004060D0 loc_4060D0:                             ; CODE XREF: sub_405590+80↑j
.text:004060D0                 mov     dword ptr [ebp+18h], 2
.text:004060D7                 mov     esi, ecx
.text:004060D9                 jmp     short loc_4060C4
.text:004060D9 ; ---------------------------------------------------------------------------
.text:004060DB                 align 10h
.text:004060E0
.text:004060E0 loc_4060E0:                             ; CODE XREF: sub_405590+69↑j
.text:004060E0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004060E7                 call    getenv
.text:004060EC                 test    eax, eax
.text:004060EE                 jz      loc_405604
.text:004060F4                 jmp     loc_4055FF
.text:004060F4 ; ---------------------------------------------------------------------------
.text:004060F9                 align 10h
.text:00406100
.text:00406100 loc_406100:                             ; CODE XREF: sub_405590+3F↑j
.text:00406100                 mov     dword ptr [ebp+0], 1
.text:00406107                 mov     ebx, 1
.text:0040610C                 jmp     loc_4055E0
.text:0040610C sub_405590      endp
.text:0040610C
.text:00406111 ; ---------------------------------------------------------------------------
.text:00406111                 jmp     short sub_406120
.text:00406111 ; ---------------------------------------------------------------------------
.text:00406113                 align 10h
.text:00406120
.text:00406120 ; =============== S U B R O U T I N E =======================================
.text:00406120
.text:00406120
.text:00406120 ; int __cdecl sub_406120(int, int, char *, int, int, int, int)
.text:00406120 sub_406120      proc near               ; CODE XREF: .text:00406111↑j
.text:00406120                                         ; sub_4076D0+3A↓p ...
.text:00406120
.text:00406120 var_2C          = dword ptr -2Ch
.text:00406120 var_28          = dword ptr -28h
.text:00406120 Str             = dword ptr -24h
.text:00406120 var_20          = dword ptr -20h
.text:00406120 var_1C          = dword ptr -1Ch
.text:00406120 var_18          = dword ptr -18h
.text:00406120 var_14          = dword ptr -14h
.text:00406120 var_10          = dword ptr -10h
.text:00406120 arg_0           = dword ptr  4
.text:00406120 arg_4           = dword ptr  8
.text:00406120 arg_8           = dword ptr  0Ch
.text:00406120 arg_C           = dword ptr  10h
.text:00406120 arg_10          = dword ptr  14h
.text:00406120 arg_14          = dword ptr  18h
.text:00406120 arg_18          = dword ptr  1Ch
.text:00406120
.text:00406120                 sub     esp, 2Ch
.text:00406123                 mov     edx, dword_41E010
.text:00406129                 mov     [esp+2Ch+var_10], offset dword_41F030 ; int
.text:00406131                 mov     ecx, dword_41E014
.text:00406137                 mov     ds:dword_41F030, edx
.text:0040613D                 mov     edx, [esp+2Ch+arg_18]
.text:00406141                 mov     ds:dword_41F034, ecx
.text:00406147                 mov     ecx, [esp+2Ch+arg_14]
.text:0040614B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040614F                 mov     edx, [esp+2Ch+arg_10]
.text:00406153                 mov     [esp+2Ch+var_18], ecx ; int
.text:00406157                 mov     ecx, [esp+2Ch+arg_C]
.text:0040615B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040615F                 mov     edx, [esp+2Ch+arg_8]
.text:00406163                 mov     [esp+2Ch+var_20], ecx ; int
.text:00406167                 mov     ecx, [esp+2Ch+arg_4]
.text:0040616B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040616F                 mov     edx, [esp+2Ch+arg_0]
.text:00406173                 mov     [esp+2Ch+var_28], ecx ; int
.text:00406177                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040617A                 call    sub_405590
.text:0040617F                 mov     ecx, ds:dword_41F030
.text:00406185                 mov     dword_41E010, ecx
.text:0040618B                 mov     ecx, ds:dword_41F03C
.text:00406191                 mov     ds:dword_41F530, ecx
.text:00406197                 mov     ecx, ds:dword_41F038
.text:0040619D                 mov     dword_41E018, ecx
.text:004061A3                 add     esp, 2Ch
.text:004061A6                 retn
.text:004061A6 sub_406120      endp
.text:004061A6
.text:004061A6 ; ---------------------------------------------------------------------------
.text:004061A7                 align 10h
.text:004061B0                 sub     esp, 2Ch
.text:004061B3                 mov     edx, dword_41E010
.text:004061B9                 mov     dword ptr [esp+1Ch], offset dword_41F030
.text:004061C1                 mov     ecx, dword_41E014
.text:004061C7                 mov     dword ptr [esp+18h], 1
.text:004061CF                 mov     ds:dword_41F030, edx
.text:004061D5                 mov     edx, [esp+38h]
.text:004061D9                 mov     ds:dword_41F034, ecx
.text:004061DF                 mov     ecx, [esp+34h]
.text:004061E3                 mov     [esp+8], edx
.text:004061E7                 mov     edx, [esp+30h]
.text:004061EB                 mov     [esp+4], ecx
.text:004061EF                 mov     dword ptr [esp+14h], 0
.text:004061F7                 mov     dword ptr [esp+10h], 0
.text:004061FF                 mov     dword ptr [esp+0Ch], 0
.text:00406207                 mov     [esp], edx
.text:0040620A                 call    sub_405590
.text:0040620F                 mov     ecx, ds:dword_41F030
.text:00406215                 mov     dword_41E010, ecx
.text:0040621B                 mov     ecx, ds:dword_41F03C
.text:00406221                 mov     ds:dword_41F530, ecx
.text:00406227                 mov     ecx, ds:dword_41F038
.text:0040622D                 mov     dword_41E018, ecx
.text:00406233                 add     esp, 2Ch
.text:00406236                 retn
.text:00406236 ; ---------------------------------------------------------------------------
.text:00406237                 align 10h
.text:00406240
.text:00406240 ; =============== S U B R O U T I N E =======================================
.text:00406240
.text:00406240
.text:00406240 sub_406240      proc near               ; CODE XREF: sub_405590+113↑p
.text:00406240                                         ; sub_405590+AB9↑p
.text:00406240
.text:00406240 var_2C          = dword ptr -2Ch
.text:00406240 var_28          = dword ptr -28h
.text:00406240 var_24          = dword ptr -24h
.text:00406240 var_20          = dword ptr -20h
.text:00406240 var_1C          = dword ptr -1Ch
.text:00406240 var_18          = dword ptr -18h
.text:00406240 var_14          = dword ptr -14h
.text:00406240 arg_0           = dword ptr  4
.text:00406240 arg_4           = dword ptr  8
.text:00406240
.text:00406240                 push    ebp
.text:00406241                 push    edi
.text:00406242                 push    esi
.text:00406243                 push    ebx
.text:00406244                 sub     esp, 1Ch
.text:00406247                 mov     ecx, [esp+2Ch+arg_4]
.text:0040624B                 mov     eax, [esp+2Ch+arg_4]
.text:0040624F                 mov     ebx, [esp+2Ch+arg_4]
.text:00406253                 mov     edx, [ecx+20h]
.text:00406256                 mov     edi, [esp+2Ch+arg_0]
.text:0040625A                 mov     ecx, [ebx]
.text:0040625C                 mov     [esp+2Ch+var_2C], edx
.text:0040625F                 mov     [esp+2Ch+var_14], edx
.text:00406263                 mov     edx, [eax+24h]
.text:00406266                 mov     [esp+2Ch+var_28], ecx
.text:0040626A                 mov     [esp+2Ch+var_1C], ecx
.text:0040626E                 cmp     ecx, edx
.text:00406270                 mov     [esp+2Ch+var_18], edx
.text:00406274                 jle     short loc_4062F0
.text:00406276                 mov     esi, [esp+2Ch+var_2C]
.text:00406279                 cmp     edx, esi
.text:0040627B                 jle     short loc_4062F0
.text:0040627D                 lea     esi, [esi+0]
.text:00406280
.text:00406280 loc_406280:                             ; CODE XREF: sub_406240+A1↓j
.text:00406280                 mov     ebx, [esp+2Ch+var_1C]
.text:00406284                 mov     edx, [esp+2Ch+var_18]
.text:00406288                 mov     ebp, [esp+2Ch+var_18]
.text:0040628C                 mov     eax, [esp+2Ch+var_14]
.text:00406290                 sub     ebx, edx
.text:00406292                 mov     [esp+2Ch+var_20], ebx
.text:00406296                 sub     ebp, eax
.text:00406298                 cmp     ebx, ebp
.text:0040629A                 jle     short loc_406315
.text:0040629C                 xor     esi, esi
.text:0040629E                 cmp     esi, ebp
.text:004062A0                 jge     short loc_4062CD
.text:004062A2                 mov     ecx, [esp+2Ch+var_1C]
.text:004062A6                 sub     ecx, ebp
.text:004062A8                 mov     [esp+2Ch+var_24], ecx
.text:004062AC                 lea     esi, [esi+0]
.text:004062B0
.text:004062B0 loc_4062B0:                             ; CODE XREF: sub_406240+8B↓j
.text:004062B0                 mov     ecx, [esp+2Ch+var_14]
.text:004062B4                 mov     edx, [esp+2Ch+var_24]
.text:004062B8                 add     ecx, esi
.text:004062BA                 add     edx, esi
.text:004062BC                 mov     ebx, [edi+ecx*4]
.text:004062BF                 mov     eax, [edi+edx*4]
.text:004062C2                 inc     esi
.text:004062C3                 cmp     esi, ebp
.text:004062C5                 mov     [edi+ecx*4], eax
.text:004062C8                 mov     [edi+edx*4], ebx
.text:004062CB                 jl      short loc_4062B0
.text:004062CD
.text:004062CD loc_4062CD:                             ; CODE XREF: sub_406240+60↑j
.text:004062CD                 sub     [esp+2Ch+var_1C], ebp
.text:004062D1
.text:004062D1 loc_4062D1:                             ; CODE XREF: sub_406240+107↓j
.text:004062D1                 mov     eax, [esp+2Ch+var_18]
.text:004062D5                 cmp     [esp+2Ch+var_1C], eax
.text:004062D9                 jle     short loc_4062F0
.text:004062DB                 mov     ebp, [esp+2Ch+var_14]
.text:004062DF                 cmp     eax, ebp
.text:004062E1                 jg      short loc_406280
.text:004062E3                 lea     esi, [esi+0]
.text:004062E9                 lea     edi, [edi+0]
.text:004062F0
.text:004062F0 loc_4062F0:                             ; CODE XREF: sub_406240+34↑j
.text:004062F0                                         ; sub_406240+3B↑j ...
.text:004062F0                 mov     esi, [esp+2Ch+var_28]
.text:004062F4                 mov     ecx, [esp+2Ch+var_18]
.text:004062F8                 mov     eax, [esp+2Ch+var_2C]
.text:004062FB                 mov     edi, [esp+2Ch+arg_4]
.text:004062FF                 mov     edx, [esp+2Ch+var_28]
.text:00406303                 sub     esi, ecx
.text:00406305                 add     esi, eax
.text:00406307                 mov     [edi+20h], esi
.text:0040630A                 mov     [edi+24h], edx
.text:0040630D                 add     esp, 1Ch
.text:00406310                 pop     ebx
.text:00406311                 pop     esi
.text:00406312                 pop     edi
.text:00406313                 pop     ebp
.text:00406314                 retn
.text:00406315 ; ---------------------------------------------------------------------------
.text:00406315
.text:00406315 loc_406315:                             ; CODE XREF: sub_406240+5A↑j
.text:00406315                 xor     esi, esi
.text:00406317                 cmp     esi, [esp+2Ch+var_20]
.text:0040631B                 jge     short loc_40633F
.text:0040631D                 lea     esi, [esi+0]
.text:00406320
.text:00406320 loc_406320:                             ; CODE XREF: sub_406240+FD↓j
.text:00406320                 mov     ebx, [esp+2Ch+var_14]
.text:00406324                 mov     ebp, [esp+2Ch+var_18]
.text:00406328                 add     ebx, esi
.text:0040632A                 add     ebp, esi
.text:0040632C                 mov     edx, [edi+ebx*4]
.text:0040632F                 inc     esi
.text:00406330                 cmp     esi, [esp+2Ch+var_20]
.text:00406334                 mov     ecx, [edi+ebp*4]
.text:00406337                 mov     [edi+ebx*4], ecx
.text:0040633A                 mov     [edi+ebp*4], edx
.text:0040633D                 jl      short loc_406320
.text:0040633F
.text:0040633F loc_40633F:                             ; CODE XREF: sub_406240+DB↑j
.text:0040633F                 mov     esi, [esp+2Ch+var_20]
.text:00406343                 add     [esp+2Ch+var_14], esi
.text:00406347                 jmp     short loc_4062D1
.text:00406347 sub_406240      endp
.text:00406347
.text:00406347 ; ---------------------------------------------------------------------------
.text:00406349                 align 20h
.text:00406360
.text:00406360 ; =============== S U B R O U T I N E =======================================
.text:00406360
.text:00406360
.text:00406360 ; int __cdecl sub_406360(char *, int, int, int)
.text:00406360 sub_406360      proc near               ; CODE XREF: sub_406680+32↓p
.text:00406360
.text:00406360 Str             = dword ptr -2Ch
.text:00406360 Str2            = dword ptr -28h
.text:00406360 MaxCount        = dword ptr -24h
.text:00406360 var_20          = dword ptr -20h
.text:00406360 var_19          = byte ptr -19h
.text:00406360 var_18          = dword ptr -18h
.text:00406360 var_14          = dword ptr -14h
.text:00406360 arg_0           = dword ptr  4
.text:00406360 arg_4           = dword ptr  8
.text:00406360 arg_8           = dword ptr  0Ch
.text:00406360 arg_C           = dword ptr  10h
.text:00406360
.text:00406360                 push    ebp
.text:00406361                 push    edi
.text:00406362                 push    esi
.text:00406363                 push    ebx
.text:00406364                 sub     esp, 1Ch
.text:00406367                 xor     ebx, ebx
.text:00406369                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00406371                 mov     edx, [esp+2Ch+arg_0]
.text:00406375                 mov     ebp, [esp+2Ch+arg_C]
.text:00406379                 mov     [esp+2Ch+var_19], 0
.text:0040637E                 mov     [esp+2Ch+Str], edx ; Str
.text:00406381                 call    strlen
.text:00406386                 mov     [esp+2Ch+var_14], eax
.text:0040638A                 mov     ecx, [esp+2Ch+arg_4]
.text:0040638E                 mov     eax, [ecx]
.text:00406390                 test    eax, eax
.text:00406392                 jz      short loc_4063D8
.text:00406394                 mov     [esp+2Ch+var_20], 0
.text:0040639C                 lea     esi, [esi+0]
.text:004063A0
.text:004063A0 loc_4063A0:                             ; CODE XREF: sub_406360+6A↓j
.text:004063A0                 mov     [esp+2Ch+Str], eax ; Str1
.text:004063A3                 mov     esi, [esp+2Ch+var_14]
.text:004063A7                 mov     ecx, [esp+2Ch+arg_0]
.text:004063AB                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:004063AF                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:004063B3                 call    strncmp
.text:004063B8                 test    eax, eax
.text:004063BA                 jz      short loc_4063E6
.text:004063BC
.text:004063BC loc_4063BC:                             ; CODE XREF: sub_406360+CA↓j
.text:004063BC                                         ; sub_406360+D1↓j ...
.text:004063BC                 add     [esp+2Ch+var_20], ebp
.text:004063C0                 inc     ebx
.text:004063C1                 mov     esi, [esp+2Ch+arg_4]
.text:004063C5                 mov     eax, [esi+ebx*4]
.text:004063C8                 test    eax, eax
.text:004063CA                 jnz     short loc_4063A0
.text:004063CC                 cmp     [esp+2Ch+var_19], 0
.text:004063D1                 mov     edx, 0FFFFFFFEh
.text:004063D6                 jnz     short loc_4063DC
.text:004063D8
.text:004063D8 loc_4063D8:                             ; CODE XREF: sub_406360+32↑j
.text:004063D8                 mov     edx, [esp+2Ch+var_18]
.text:004063DC
.text:004063DC loc_4063DC:                             ; CODE XREF: sub_406360+76↑j
.text:004063DC                                         ; sub_406360+9B↓j
.text:004063DC                 add     esp, 1Ch
.text:004063DF                 mov     eax, edx
.text:004063E1                 pop     ebx
.text:004063E2                 pop     esi
.text:004063E3                 pop     edi
.text:004063E4                 pop     ebp
.text:004063E5                 retn
.text:004063E6 ; ---------------------------------------------------------------------------
.text:004063E6
.text:004063E6 loc_4063E6:                             ; CODE XREF: sub_406360+5A↑j
.text:004063E6                 mov     eax, [esp+2Ch+arg_4]
.text:004063EA                 mov     edi, [eax+ebx*4]
.text:004063ED                 mov     [esp+2Ch+Str], edi ; Str
.text:004063F0                 call    strlen
.text:004063F5                 cmp     eax, [esp+2Ch+var_14]
.text:004063F9                 mov     edx, ebx
.text:004063FB                 jz      short loc_4063DC
.text:004063FD                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00406402                 jz      short loc_406433
.text:00406404                 mov     ecx, [esp+2Ch+arg_8]
.text:00406408                 test    ecx, ecx
.text:0040640A                 jz      short loc_40642C
.text:0040640C                 cld
.text:0040640D                 mov     edi, [esp+2Ch+var_18]
.text:00406411                 mov     ecx, ebp
.text:00406413                 mov     esi, [esp+2Ch+arg_8]
.text:00406417                 mov     edx, [esp+2Ch+var_20]
.text:0040641B                 imul    edi, ebp
.text:0040641E                 add     esi, edi
.text:00406420                 mov     edi, [esp+2Ch+arg_8]
.text:00406424                 add     edi, edx
.text:00406426                 cmp     ebp, ebp
.text:00406428                 repe cmpsb
.text:0040642A                 jz      short loc_4063BC
.text:0040642C
.text:0040642C loc_40642C:                             ; CODE XREF: sub_406360+AA↑j
.text:0040642C                 mov     [esp+2Ch+var_19], 1
.text:00406431                 jmp     short loc_4063BC
.text:00406433 ; ---------------------------------------------------------------------------
.text:00406433
.text:00406433 loc_406433:                             ; CODE XREF: sub_406360+A2↑j
.text:00406433                 mov     [esp+2Ch+var_18], ebx
.text:00406437                 jmp     short loc_4063BC
.text:00406437 sub_406360      endp
.text:00406437
.text:00406437 ; ---------------------------------------------------------------------------
.text:00406439 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:00406439                                         ; DATA XREF: .text:00406492↓o
.text:00406439                                         ; sub_406680+5A↓o
.text:00406456 aInvalidArgumen db 'invalid argument %s for %s',0
.text:00406456                                         ; DATA XREF: .text:loc_406500↓o
.text:00406456                                         ; sub_406680:loc_406876↓o
.text:00406471 ; ---------------------------------------------------------------------------
.text:00406471                 jmp     short loc_406480
.text:00406471 ; ---------------------------------------------------------------------------
.text:00406473                 align 10h
.text:00406480
.text:00406480 loc_406480:                             ; CODE XREF: .text:00406471↑j
.text:00406480                 sub     esp, 1Ch
.text:00406483                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:00406488                 mov     [esp+14h], ebx
.text:0040648C                 mov     [esp+18h], esi
.text:00406490                 jz      short loc_406500
.text:00406492                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00406499
.text:00406499 loc_406499:                             ; CODE XREF: .text:00406507↓j
.text:00406499                 call    ds:libintl_gettext
.text:0040649F                 mov     dword ptr [esp], 1
.text:004064A6                 mov     edx, [esp+20h]
.text:004064AA                 mov     esi, eax
.text:004064AC                 mov     [esp+4], edx
.text:004064B0                 call    sub_40A8B0
.text:004064B5                 mov     dword ptr [esp+4], 5
.text:004064BD                 mov     edx, [esp+24h]
.text:004064C1                 mov     ebx, eax
.text:004064C3                 mov     dword ptr [esp], 0
.text:004064CA                 mov     [esp+8], edx
.text:004064CE                 call    sub_40B7F0
.text:004064D3                 mov     [esp+0Ch], eax
.text:004064D7                 mov     [esp+10h], ebx
.text:004064DB                 mov     [esp+8], esi
.text:004064DF                 mov     dword ptr [esp+4], 0
.text:004064E7                 mov     dword ptr [esp], 0
.text:004064EE                 call    sub_40BE20
.text:004064F3                 mov     ebx, [esp+14h]
.text:004064F7                 mov     esi, [esp+18h]
.text:004064FB                 add     esp, 1Ch
.text:004064FE                 retn
.text:004064FE ; ---------------------------------------------------------------------------
.text:004064FF                 align 10h
.text:00406500
.text:00406500 loc_406500:                             ; CODE XREF: .text:00406490↑j
.text:00406500                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00406507                 jmp     short loc_406499
.text:00406507 ; ---------------------------------------------------------------------------
.text:00406509 aValidArguments db 'Valid arguments are:',0
.text:00406509                                         ; DATA XREF: .text:00406553↓o
.text:00406509                                         ; sub_406680+CB↓o
.text:0040651E ; const char Format[]
.text:0040651E Format          db 0Ah                  ; DATA XREF: .text:004065CD↓o
.text:0040651E                                         ; sub_406680:loc_4067B8↓o
.text:0040651E                 db '  - `%s',27h,0
.text:00406528 ; const char aS_1[]
.text:00406528 aS_1            db ', `%s',27h,0        ; DATA XREF: .text:0040665A↓o
.text:00406528                                         ; sub_406680:loc_406850↓o
.text:0040652F                 align 10h
.text:00406530                 push    ebp
.text:00406531                 push    edi
.text:00406532                 push    esi
.text:00406533                 push    ebx
.text:00406534                 sub     esp, 2Ch
.text:00406537                 mov     ecx, [esp+40h]
.text:0040653B                 mov     dword ptr [esp+1Ch], 0
.text:00406543                 mov     eax, [esp+44h]
.text:00406547                 mov     ebp, [esp+48h]
.text:0040654B                 mov     [esp+28h], ecx
.text:0040654F                 mov     [esp+24h], eax
.text:00406553                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:0040655A                 call    ds:libintl_gettext
.text:00406560                 mov     edx, ds:_iob
.text:00406566                 add     edx, 40h ; '@'
.text:00406569                 mov     [esp], edx
.text:0040656C                 mov     [esp+4], eax
.text:00406570                 call    fprintf
.text:00406575                 mov     dword ptr [esp+20h], 0
.text:0040657D                 mov     edx, [esp+28h]
.text:00406581                 mov     eax, [edx]
.text:00406583                 test    eax, eax
.text:00406585                 jz      short loc_406605
.text:00406587                 mov     dword ptr [esp+14h], 0
.text:0040658F                 mov     esi, [esp+24h]
.text:00406593                 mov     ebx, eax
.text:00406595                 mov     [esp+18h], esi
.text:00406599                 lea     esi, [esi+0]
.text:004065A0
.text:004065A0 loc_4065A0:                             ; CODE XREF: .text:00406603↓j
.text:004065A0                 mov     edi, [esp+20h]
.text:004065A4                 test    edi, edi
.text:004065A6                 jz      short loc_4065C3
.text:004065A8                 cld
.text:004065A9                 mov     edi, [esp+24h]
.text:004065AD                 mov     ecx, ebp
.text:004065AF                 mov     edx, [esp+14h]
.text:004065B3                 mov     esi, [esp+1Ch]
.text:004065B7                 add     edi, edx
.text:004065B9                 cmp     ebp, ebp
.text:004065BB                 repe cmpsb
.text:004065BD                 jz      loc_406650
.text:004065C3
.text:004065C3 loc_4065C3:                             ; CODE XREF: .text:004065A6↑j
.text:004065C3                 mov     [esp+8], ebx
.text:004065C7                 mov     ecx, ds:_iob
.text:004065CD                 mov     dword ptr [esp+4], offset Format ; "\n  - `%s'"
.text:004065D5                 add     ecx, 40h ; '@'
.text:004065D8                 mov     [esp], ecx
.text:004065DB                 call    fprintf
.text:004065E0                 mov     ebx, [esp+18h]
.text:004065E4                 mov     [esp+1Ch], ebx
.text:004065E8
.text:004065E8 loc_4065E8:                             ; CODE XREF: .text:0040666D↓j
.text:004065E8                 inc     dword ptr [esp+20h]
.text:004065EC                 mov     eax, [esp+28h]
.text:004065F0                 add     [esp+14h], ebp
.text:004065F4                 mov     edx, [esp+20h]
.text:004065F8                 add     [esp+18h], ebp
.text:004065FC                 mov     edi, [eax+edx*4]
.text:004065FF                 test    edi, edi
.text:00406601                 mov     ebx, edi
.text:00406603                 jnz     short loc_4065A0
.text:00406605
.text:00406605 loc_406605:                             ; CODE XREF: .text:00406585↑j
.text:00406605                 mov     ebx, ds:_iob
.text:0040660B                 mov     ebp, [ebx+44h]
.text:0040660E                 dec     ebp
.text:0040660F                 mov     [ebx+44h], ebp
.text:00406612                 test    ebp, ebp
.text:00406614                 js      short loc_40662D
.text:00406616                 mov     ecx, ds:_iob
.text:0040661C                 mov     esi, [ecx+40h]
.text:0040661F                 mov     byte ptr [esi], 0Ah
.text:00406622                 inc     dword ptr [ecx+40h]
.text:00406625                 add     esp, 2Ch
.text:00406628                 pop     ebx
.text:00406629                 pop     esi
.text:0040662A                 pop     edi
.text:0040662B                 pop     ebp
.text:0040662C                 retn
.text:0040662D ; ---------------------------------------------------------------------------
.text:0040662D
.text:0040662D loc_40662D:                             ; CODE XREF: .text:00406614↑j
.text:0040662D                 mov     dword ptr [esp+40h], 0Ah
.text:00406635                 mov     edi, ds:_iob
.text:0040663B                 add     edi, 40h ; '@'
.text:0040663E                 mov     [esp+44h], edi
.text:00406642                 add     esp, 2Ch
.text:00406645                 pop     ebx
.text:00406646                 pop     esi
.text:00406647                 pop     edi
.text:00406648                 pop     ebp
.text:00406649                 jmp     _flsbuf
.text:00406649 ; ---------------------------------------------------------------------------
.text:0040664E                 align 10h
.text:00406650
.text:00406650 loc_406650:                             ; CODE XREF: .text:004065BD↑j
.text:00406650                 mov     [esp+8], ebx
.text:00406654                 mov     esi, ds:_iob
.text:0040665A                 mov     dword ptr [esp+4], offset aS_1 ; ", `%s'"
.text:00406662                 add     esi, 40h ; '@'
.text:00406665                 mov     [esp], esi
.text:00406668                 call    fprintf
.text:0040666D                 jmp     loc_4065E8
.text:0040666D ; ---------------------------------------------------------------------------
.text:00406672                 align 10h
.text:00406680
.text:00406680 ; =============== S U B R O U T I N E =======================================
.text:00406680
.text:00406680
.text:00406680 ; int __cdecl sub_406680(char *, char *, int, int, int, int)
.text:00406680 sub_406680      proc near               ; CODE XREF: sub_402430+192↑p
.text:00406680
.text:00406680 Stream          = dword ptr -4Ch
.text:00406680 Format          = dword ptr -48h
.text:00406680 var_44          = dword ptr -44h
.text:00406680 var_40          = byte ptr -40h
.text:00406680 var_3C          = dword ptr -3Ch
.text:00406680 var_2C          = dword ptr -2Ch
.text:00406680 var_28          = dword ptr -28h
.text:00406680 var_24          = dword ptr -24h
.text:00406680 var_20          = dword ptr -20h
.text:00406680 var_1C          = dword ptr -1Ch
.text:00406680 var_18          = dword ptr -18h
.text:00406680 var_14          = dword ptr -14h
.text:00406680 var_10          = dword ptr -10h
.text:00406680 var_C           = dword ptr -0Ch
.text:00406680 var_8           = dword ptr -8
.text:00406680 var_4           = dword ptr -4
.text:00406680 arg_0           = dword ptr  4
.text:00406680 arg_4           = dword ptr  8
.text:00406680 arg_8           = dword ptr  0Ch
.text:00406680 arg_C           = dword ptr  10h
.text:00406680 arg_10          = dword ptr  14h
.text:00406680 arg_14          = dword ptr  18h
.text:00406680
.text:00406680                 sub     esp, 4Ch
.text:00406683                 mov     edx, [esp+4Ch+arg_10]
.text:00406687                 mov     [esp+4Ch+var_10], ebx
.text:0040668B                 mov     ebx, [esp+4Ch+arg_C]
.text:0040668F                 mov     [esp+4Ch+var_C], esi
.text:00406693                 mov     esi, [esp+4Ch+arg_4]
.text:00406697                 mov     [esp+4Ch+var_4], ebp
.text:0040669B                 mov     ebp, [esp+4Ch+arg_8]
.text:0040669F                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:004066A3                 mov     [esp+4Ch+var_8], edi
.text:004066A7                 mov     [esp+4Ch+var_44], ebx ; int
.text:004066AB                 mov     [esp+4Ch+Format], ebp ; int
.text:004066AF                 mov     [esp+4Ch+Stream], esi ; char *
.text:004066B2                 call    sub_406360
.text:004066B7                 test    eax, eax
.text:004066B9                 mov     edx, eax
.text:004066BB                 js      short loc_4066D3
.text:004066BD
.text:004066BD loc_4066BD:                             ; CODE XREF: sub_406680+1AA↓j
.text:004066BD                 mov     ebx, [esp+4Ch+var_10]
.text:004066C1                 mov     eax, edx
.text:004066C3                 mov     esi, [esp+4Ch+var_C]
.text:004066C7                 mov     edi, [esp+4Ch+var_8]
.text:004066CB                 mov     ebp, [esp+4Ch+var_4]
.text:004066CF                 add     esp, 4Ch
.text:004066D2                 retn
.text:004066D3 ; ---------------------------------------------------------------------------
.text:004066D3
.text:004066D3 loc_4066D3:                             ; CODE XREF: sub_406680+3B↑j
.text:004066D3                 inc     eax
.text:004066D4                 jz      loc_406876
.text:004066DA                 mov     [esp+4Ch+Stream], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:004066E1
.text:004066E1 loc_4066E1:                             ; CODE XREF: sub_406680+1FD↓j
.text:004066E1                 call    ds:libintl_gettext
.text:004066E7                 mov     [esp+4Ch+Stream], 1 ; int
.text:004066EE                 mov     edi, [esp+4Ch+arg_0]
.text:004066F2                 mov     [esp+4Ch+var_14], eax
.text:004066F6                 mov     [esp+4Ch+Format], edi ; char *
.text:004066FA                 call    sub_40A8B0
.text:004066FF                 mov     [esp+4Ch+var_18], eax
.text:00406703                 mov     [esp+4Ch+var_44], esi ; char *
.text:00406707                 mov     [esp+4Ch+Format], 5 ; int
.text:0040670F                 mov     [esp+4Ch+Stream], 0 ; int
.text:00406716                 call    sub_40B7F0
.text:0040671B                 mov     dword ptr [esp+4Ch+var_40], eax ; char
.text:0040671F                 mov     ecx, [esp+4Ch+var_18]
.text:00406723                 mov     eax, [esp+4Ch+var_14]
.text:00406727                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:0040672F                 mov     [esp+4Ch+var_3C], ecx
.text:00406733                 mov     [esp+4Ch+var_44], eax ; char *
.text:00406737                 mov     [esp+4Ch+Stream], 0 ; Code
.text:0040673E                 call    sub_40BE20
.text:00406743                 mov     [esp+4Ch+var_20], 0
.text:0040674B                 mov     [esp+4Ch+Stream], offset aValidArguments ; "Valid arguments are:"
.text:00406752                 call    ds:libintl_gettext
.text:00406758                 mov     edx, ds:_iob
.text:0040675E                 add     edx, 40h ; '@'
.text:00406761                 mov     [esp+4Ch+Format], eax ; Format
.text:00406765                 mov     [esp+4Ch+Stream], edx ; Stream
.text:00406768                 call    fprintf
.text:0040676D                 mov     [esp+4Ch+var_1C], 0
.text:00406775                 mov     eax, [ebp+0]
.text:00406778                 test    eax, eax
.text:0040677A                 jz      loc_406801
.text:00406780                 mov     [esp+4Ch+var_24], eax
.text:00406784                 mov     [esp+4Ch+var_28], ebx
.text:00406788                 mov     [esp+4Ch+var_2C], 0
.text:00406790
.text:00406790 loc_406790:                             ; CODE XREF: sub_406680+17F↓j
.text:00406790                 mov     esi, [esp+4Ch+var_1C]
.text:00406794                 test    esi, esi
.text:00406796                 jz      short loc_4067B8
.text:00406798                 cld
.text:00406799                 mov     eax, [esp+4Ch+var_2C]
.text:0040679D                 mov     edx, [esp+4Ch+arg_10]
.text:004067A1                 mov     esi, [esp+4Ch+var_20]
.text:004067A5                 lea     ecx, [eax+ebx]
.text:004067A8                 mov     edi, ecx
.text:004067AA                 mov     ecx, [esp+4Ch+arg_10]
.text:004067AE                 cmp     edx, edx
.text:004067B0                 repe cmpsb
.text:004067B2                 jz      loc_406850
.text:004067B8
.text:004067B8 loc_4067B8:                             ; CODE XREF: sub_406680+116↑j
.text:004067B8                 mov     [esp+4Ch+Format], offset Format ; "\n  - `%s'"
.text:004067C0                 mov     esi, ds:_iob
.text:004067C6                 mov     ecx, [esp+4Ch+var_24]
.text:004067CA                 add     esi, 40h ; '@'
.text:004067CD                 mov     [esp+4Ch+var_44], ecx
.text:004067D1                 mov     [esp+4Ch+Stream], esi ; Stream
.text:004067D4                 call    fprintf
.text:004067D9                 mov     edi, [esp+4Ch+var_28]
.text:004067DD                 mov     [esp+4Ch+var_20], edi
.text:004067E1
.text:004067E1 loc_4067E1:                             ; CODE XREF: sub_406680+1F1↓j
.text:004067E1                 inc     [esp+4Ch+var_1C]
.text:004067E5                 mov     ecx, [esp+4Ch+arg_10]
.text:004067E9                 add     [esp+4Ch+var_2C], ecx
.text:004067ED                 mov     esi, [esp+4Ch+var_1C]
.text:004067F1                 add     [esp+4Ch+var_28], ecx
.text:004067F5                 mov     edi, [ebp+esi*4+0]
.text:004067F9                 test    edi, edi
.text:004067FB                 mov     [esp+4Ch+var_24], edi
.text:004067FF                 jnz     short loc_406790
.text:00406801
.text:00406801 loc_406801:                             ; CODE XREF: sub_406680+FA↑j
.text:00406801                 mov     ebp, ds:_iob
.text:00406807                 mov     ebx, [ebp+44h]
.text:0040680A                 dec     ebx
.text:0040680B                 mov     [ebp+44h], ebx
.text:0040680E                 test    ebx, ebx
.text:00406810                 js      short loc_40682F
.text:00406812                 mov     edi, ds:_iob
.text:00406818                 mov     eax, [edi+40h]
.text:0040681B                 mov     byte ptr [eax], 0Ah
.text:0040681E                 inc     dword ptr [edi+40h]
.text:00406821
.text:00406821 loc_406821:                             ; CODE XREF: sub_406680+1C8↓j
.text:00406821                 call    [esp+4Ch+arg_14]
.text:00406825                 mov     edx, 0FFFFFFFFh
.text:0040682A                 jmp     loc_4066BD
.text:0040682F ; ---------------------------------------------------------------------------
.text:0040682F
.text:0040682F loc_40682F:                             ; CODE XREF: sub_406680+190↑j
.text:0040682F                 mov     [esp+4Ch+Stream], 0Ah ; Ch
.text:00406836                 mov     edx, ds:_iob
.text:0040683C                 add     edx, 40h ; '@'
.text:0040683F                 mov     [esp+4Ch+Format], edx ; File
.text:00406843                 call    _flsbuf
.text:00406848                 jmp     short loc_406821
.text:00406848 ; ---------------------------------------------------------------------------
.text:0040684A                 align 10h
.text:00406850
.text:00406850 loc_406850:                             ; CODE XREF: sub_406680+132↑j
.text:00406850                 mov     [esp+4Ch+Format], offset aS_1 ; ", `%s'"
.text:00406858                 mov     edx, ds:_iob
.text:0040685E                 mov     eax, [esp+4Ch+var_24]
.text:00406862                 add     edx, 40h ; '@'
.text:00406865                 mov     [esp+4Ch+var_44], eax
.text:00406869                 mov     [esp+4Ch+Stream], edx ; Stream
.text:0040686C                 call    fprintf
.text:00406871                 jmp     loc_4067E1
.text:00406876 ; ---------------------------------------------------------------------------
.text:00406876
.text:00406876 loc_406876:                             ; CODE XREF: sub_406680+54↑j
.text:00406876                 mov     [esp+4Ch+Stream], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040687D                 jmp     loc_4066E1
.text:0040687D sub_406680      endp
.text:0040687D
.text:0040687D ; ---------------------------------------------------------------------------
.text:00406882                 align 10h
.text:00406890                 push    ebp
.text:00406891                 push    edi
.text:00406892                 push    esi
.text:00406893                 push    ebx
.text:00406894                 sub     esp, 4
.text:00406897                 mov     ecx, [esp+1Ch]
.text:0040689B                 mov     dword ptr [esp], 0
.text:004068A2                 mov     ebx, [esp+24h]
.text:004068A6                 mov     edx, [ecx]
.text:004068A8                 test    edx, edx
.text:004068AA                 jz      short loc_4068D5
.text:004068AC                 cld
.text:004068AD                 xor     ebp, ebp
.text:004068AF                 nop
.text:004068B0
.text:004068B0 loc_4068B0:                             ; CODE XREF: .text:004068D3↓j
.text:004068B0                 mov     edi, [esp+20h]
.text:004068B4                 mov     ecx, ebx
.text:004068B6                 mov     esi, [esp+18h]
.text:004068BA                 add     edi, ebp
.text:004068BC                 cmp     ebx, ebx
.text:004068BE                 repe cmpsb
.text:004068C0                 jz      short loc_4068DD
.text:004068C2                 inc     dword ptr [esp]
.text:004068C5                 add     ebp, ebx
.text:004068C7                 mov     eax, [esp+1Ch]
.text:004068CB                 mov     ecx, [esp]
.text:004068CE                 mov     edi, [eax+ecx*4]
.text:004068D1                 test    edi, edi
.text:004068D3                 jnz     short loc_4068B0
.text:004068D5
.text:004068D5 loc_4068D5:                             ; CODE XREF: .text:004068AA↑j
.text:004068D5                 xor     eax, eax
.text:004068D7
.text:004068D7 loc_4068D7:                             ; CODE XREF: .text:004068E7↓j
.text:004068D7                 pop     ebp
.text:004068D8                 pop     ebx
.text:004068D9                 pop     esi
.text:004068DA                 pop     edi
.text:004068DB                 pop     ebp
.text:004068DC                 retn
.text:004068DD ; ---------------------------------------------------------------------------
.text:004068DD
.text:004068DD loc_4068DD:                             ; CODE XREF: .text:004068C0↑j
.text:004068DD                 mov     esi, [esp]
.text:004068E0                 mov     ebx, [esp+1Ch]
.text:004068E4                 mov     eax, [ebx+esi*4]
.text:004068E7                 jmp     short loc_4068D7
.text:004068E7 ; ---------------------------------------------------------------------------
.text:004068E9                 align 10h
.text:004068F0
.text:004068F0 ; =============== S U B R O U T I N E =======================================
.text:004068F0
.text:004068F0 ; Attributes: noreturn
.text:004068F0
.text:004068F0 sub_4068F0      proc near               ; DATA XREF: .data:off_41E020↓o
.text:004068F0
.text:004068F0 Code            = dword ptr -0Ch
.text:004068F0
.text:004068F0                 sub     esp, 0Ch
.text:004068F3                 mov     [esp+0Ch+Code], 1 ; Code
.text:004068FA                 call    sub_402F50
.text:004068FA sub_4068F0      endp
.text:004068FA
.text:004068FA ; ---------------------------------------------------------------------------
.text:004068FF                 db  83h ; ƒ
.text:00406900                 db 0C4h ; Ä
.text:00406901                 db  0Ch
.text:00406902                 db 0C3h ; Ã
.text:00406903                 align 10h
.text:00406910                 sub     esp, 0Ch
.text:00406913                 xor     edx, edx
.text:00406915                 mov     ecx, [esp+14h]
.text:00406919                 mov     [esp+8], ebx
.text:0040691D                 mov     eax, 0FFFFFFFFh
.text:00406922                 mov     ebx, [esp+10h]
.text:00406926                 div     ecx
.text:00406928                 cmp     eax, ebx
.text:0040692A                 jb      short loc_406949
.text:0040692C                 mov     edx, ebx
.text:0040692E                 imul    edx, ecx
.text:00406931                 mov     [esp], edx
.text:00406934                 call    malloc
.text:00406939                 test    eax, eax
.text:0040693B                 jz      short loc_406945
.text:0040693D
.text:0040693D loc_40693D:                             ; CODE XREF: .text:00406947↓j
.text:0040693D                 mov     ebx, [esp+8]
.text:00406941                 add     esp, 0Ch
.text:00406944                 retn
.text:00406945 ; ---------------------------------------------------------------------------
.text:00406945
.text:00406945 loc_406945:                             ; CODE XREF: .text:0040693B↑j
.text:00406945                 test    ebx, ebx
.text:00406947                 jz      short loc_40693D
.text:00406949
.text:00406949 loc_406949:                             ; CODE XREF: .text:0040692A↑j
.text:00406949                 call    sub_407690
.text:00406949 ; ---------------------------------------------------------------------------
.text:0040694E                 align 10h
.text:00406950
.text:00406950 ; =============== S U B R O U T I N E =======================================
.text:00406950
.text:00406950
.text:00406950 ; int __cdecl sub_406950(size_t)
.text:00406950 sub_406950      proc near               ; CODE XREF: sub_4097F0+D0C↓p
.text:00406950                                         ; .text:0040B539↓p ...
.text:00406950
.text:00406950 Size            = dword ptr -0Ch
.text:00406950 var_4           = dword ptr -4
.text:00406950 arg_0           = dword ptr  4
.text:00406950
.text:00406950                 sub     esp, 0Ch
.text:00406953                 mov     [esp+0Ch+var_4], ebx
.text:00406957                 mov     ebx, [esp+0Ch+arg_0]
.text:0040695B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040695E                 call    malloc
.text:00406963                 test    eax, eax
.text:00406965                 jz      short loc_406970
.text:00406967
.text:00406967 loc_406967:                             ; CODE XREF: sub_406950+22↓j
.text:00406967                 mov     ebx, [esp+0Ch+var_4]
.text:0040696B                 add     esp, 0Ch
.text:0040696E                 retn
.text:0040696E ; ---------------------------------------------------------------------------
.text:0040696F                 align 10h
.text:00406970
.text:00406970 loc_406970:                             ; CODE XREF: sub_406950+15↑j
.text:00406970                 test    ebx, ebx
.text:00406972                 jz      short loc_406967
.text:00406974                 call    sub_407690
.text:00406974 sub_406950      endp
.text:00406974
.text:00406974 ; ---------------------------------------------------------------------------
.text:00406979                 align 10h
.text:00406980                 sub     esp, 1Ch
.text:00406983                 xor     edx, edx
.text:00406985                 mov     eax, 0FFFFFFFFh
.text:0040698A                 mov     [esp+14h], ebx
.text:0040698E                 mov     ecx, [esp+20h]
.text:00406992                 mov     ebx, [esp+28h]
.text:00406996                 mov     [esp+18h], esi
.text:0040699A                 mov     esi, [esp+24h]
.text:0040699E                 div     ebx
.text:004069A0                 cmp     eax, esi
.text:004069A2                 jb      short loc_4069D4
.text:004069A4                 mov     [esp], ecx
.text:004069A7                 mov     edx, esi
.text:004069A9                 imul    edx, ebx
.text:004069AC                 mov     [esp+4], edx
.text:004069B0                 call    realloc
.text:004069B5                 test    eax, eax
.text:004069B7                 mov     ecx, eax
.text:004069B9                 jz      short loc_4069D0
.text:004069BB
.text:004069BB loc_4069BB:                             ; CODE XREF: .text:004069D2↓j
.text:004069BB                 mov     ebx, [esp+14h]
.text:004069BF                 mov     eax, ecx
.text:004069C1                 mov     esi, [esp+18h]
.text:004069C5                 add     esp, 1Ch
.text:004069C8                 retn
.text:004069C8 ; ---------------------------------------------------------------------------
.text:004069C9                 align 10h
.text:004069D0
.text:004069D0 loc_4069D0:                             ; CODE XREF: .text:004069B9↑j
.text:004069D0                 test    esi, esi
.text:004069D2                 jz      short loc_4069BB
.text:004069D4
.text:004069D4 loc_4069D4:                             ; CODE XREF: .text:004069A2↑j
.text:004069D4                 call    sub_407690
.text:004069D4 ; ---------------------------------------------------------------------------
.text:004069D9                 align 10h
.text:004069E0
.text:004069E0 ; =============== S U B R O U T I N E =======================================
.text:004069E0
.text:004069E0
.text:004069E0 ; int __cdecl sub_4069E0(void *, size_t)
.text:004069E0 sub_4069E0      proc near               ; CODE XREF: sub_40BC00+5B↓p
.text:004069E0
.text:004069E0 Block           = dword ptr -0Ch
.text:004069E0 Size            = dword ptr -8
.text:004069E0 var_4           = dword ptr -4
.text:004069E0 arg_0           = dword ptr  4
.text:004069E0 arg_4           = dword ptr  8
.text:004069E0
.text:004069E0                 sub     esp, 0Ch
.text:004069E3                 mov     edx, [esp+0Ch+arg_0]
.text:004069E7                 mov     [esp+0Ch+var_4], ebx
.text:004069EB                 mov     ebx, [esp+0Ch+arg_4]
.text:004069EF                 mov     [esp+0Ch+Block], edx ; Block
.text:004069F2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004069F6                 call    realloc
.text:004069FB                 test    eax, eax
.text:004069FD                 jz      short loc_406A07
.text:004069FF
.text:004069FF loc_4069FF:                             ; CODE XREF: sub_4069E0+29↓j
.text:004069FF                 mov     ebx, [esp+0Ch+var_4]
.text:00406A03                 add     esp, 0Ch
.text:00406A06                 retn
.text:00406A07 ; ---------------------------------------------------------------------------
.text:00406A07
.text:00406A07 loc_406A07:                             ; CODE XREF: sub_4069E0+1D↑j
.text:00406A07                 test    ebx, ebx
.text:00406A09                 jz      short loc_4069FF
.text:00406A0B                 call    sub_407690
.text:00406A0B sub_4069E0      endp
.text:00406A0B
.text:00406A10
.text:00406A10 ; =============== S U B R O U T I N E =======================================
.text:00406A10
.text:00406A10 ; Attributes: thunk
.text:00406A10
.text:00406A10 ; int __cdecl sub_406A10(void *, int, int)
.text:00406A10 sub_406A10      proc near               ; CODE XREF: sub_402D90+63↑p
.text:00406A10                 jmp     sub_406B60
.text:00406A10 sub_406A10      endp
.text:00406A10
.text:00406A10 ; ---------------------------------------------------------------------------
.text:00406A15                 align 10h
.text:00406A20                 sub     esp, 0Ch
.text:00406A23                 mov     edx, [esp+14h]
.text:00406A27                 mov     dword ptr [esp+8], 1
.text:00406A2F                 mov     [esp+4], edx
.text:00406A33                 mov     edx, [esp+10h]
.text:00406A37                 mov     [esp], edx
.text:00406A3A                 call    sub_406B60
.text:00406A3F                 add     esp, 0Ch
.text:00406A42                 retn
.text:00406A42 ; ---------------------------------------------------------------------------
.text:00406A43                 align 10h
.text:00406A50                 sub     esp, 1Ch
.text:00406A53                 mov     [esp+18h], ebx
.text:00406A57                 mov     ebx, [esp+20h]
.text:00406A5B                 mov     [esp], ebx
.text:00406A5E                 call    malloc
.text:00406A63                 test    eax, eax
.text:00406A65                 jz      short loc_406A83
.text:00406A67
.text:00406A67 loc_406A67:                             ; CODE XREF: .text:00406A85↓j
.text:00406A67                 mov     [esp+8], ebx
.text:00406A6B                 mov     dword ptr [esp+4], 0
.text:00406A73                 mov     [esp], eax
.text:00406A76                 call    memset
.text:00406A7B                 mov     ebx, [esp+18h]
.text:00406A7F                 add     esp, 1Ch
.text:00406A82                 retn
.text:00406A83 ; ---------------------------------------------------------------------------
.text:00406A83
.text:00406A83 loc_406A83:                             ; CODE XREF: .text:00406A65↑j
.text:00406A83                 test    ebx, ebx
.text:00406A85                 jz      short loc_406A67
.text:00406A87                 call    sub_407690
.text:00406A87 ; ---------------------------------------------------------------------------
.text:00406A8C                 align 10h
.text:00406A90                 sub     esp, 0Ch
.text:00406A93                 xor     edx, edx
.text:00406A95                 mov     ecx, [esp+14h]
.text:00406A99                 mov     [esp+8], ebx
.text:00406A9D                 mov     eax, 0FFFFFFFFh
.text:00406AA2                 mov     ebx, [esp+10h]
.text:00406AA6                 div     ecx
.text:00406AA8                 cmp     eax, ebx
.text:00406AAA                 jb      short loc_406AC8
.text:00406AAC                 mov     [esp+4], ecx
.text:00406AB0                 mov     [esp], ebx
.text:00406AB3                 call    calloc
.text:00406AB8                 test    eax, eax
.text:00406ABA                 jz      short loc_406AC4
.text:00406ABC
.text:00406ABC loc_406ABC:                             ; CODE XREF: .text:00406AC6↓j
.text:00406ABC                 mov     ebx, [esp+8]
.text:00406AC0                 add     esp, 0Ch
.text:00406AC3                 retn
.text:00406AC4 ; ---------------------------------------------------------------------------
.text:00406AC4
.text:00406AC4 loc_406AC4:                             ; CODE XREF: .text:00406ABA↑j
.text:00406AC4                 test    ebx, ebx
.text:00406AC6                 jz      short loc_406ABC
.text:00406AC8
.text:00406AC8 loc_406AC8:                             ; CODE XREF: .text:00406AAA↑j
.text:00406AC8                 call    sub_407690
.text:00406AC8 ; ---------------------------------------------------------------------------
.text:00406ACD                 align 10h
.text:00406AD0
.text:00406AD0 ; =============== S U B R O U T I N E =======================================
.text:00406AD0
.text:00406AD0
.text:00406AD0 ; int __cdecl sub_406AD0(void *, size_t)
.text:00406AD0 sub_406AD0      proc near               ; CODE XREF: sub_4097F0+B20↓p
.text:00406AD0                                         ; sub_4097F0+D1F↓p
.text:00406AD0
.text:00406AD0 Size            = dword ptr -1Ch
.text:00406AD0 Src             = dword ptr -18h
.text:00406AD0 var_14          = dword ptr -14h
.text:00406AD0 var_4           = dword ptr -4
.text:00406AD0 arg_0           = dword ptr  4
.text:00406AD0 arg_4           = dword ptr  8
.text:00406AD0
.text:00406AD0                 sub     esp, 1Ch
.text:00406AD3                 mov     [esp+1Ch+var_4], ebx
.text:00406AD7                 mov     ebx, [esp+1Ch+arg_4]
.text:00406ADB                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406ADE                 call    malloc
.text:00406AE3                 test    eax, eax
.text:00406AE5                 mov     edx, eax
.text:00406AE7                 jz      short loc_406B05
.text:00406AE9
.text:00406AE9 loc_406AE9:                             ; CODE XREF: sub_406AD0+37↓j
.text:00406AE9                 mov     [esp+1Ch+var_14], ebx ; Size
.text:00406AED                 mov     ecx, [esp+1Ch+arg_0]
.text:00406AF1                 mov     [esp+1Ch+Size], edx ; void *
.text:00406AF4                 mov     [esp+1Ch+Src], ecx ; Src
.text:00406AF8                 call    memcpy
.text:00406AFD                 mov     ebx, [esp+1Ch+var_4]
.text:00406B01                 add     esp, 1Ch
.text:00406B04                 retn
.text:00406B05 ; ---------------------------------------------------------------------------
.text:00406B05
.text:00406B05 loc_406B05:                             ; CODE XREF: sub_406AD0+17↑j
.text:00406B05                 test    ebx, ebx
.text:00406B07                 jz      short loc_406AE9
.text:00406B09                 call    sub_407690
.text:00406B09 sub_406AD0      endp
.text:00406B09
.text:00406B09 ; ---------------------------------------------------------------------------
.text:00406B0E                 align 10h
.text:00406B10                 sub     esp, 1Ch
.text:00406B13                 mov     [esp+18h], esi
.text:00406B17                 mov     esi, [esp+20h]
.text:00406B1B                 mov     [esp+14h], ebx
.text:00406B1F                 mov     [esp], esi
.text:00406B22                 call    strlen
.text:00406B27                 lea     ebx, [eax+1]
.text:00406B2A                 mov     [esp], ebx
.text:00406B2D                 call    malloc
.text:00406B32                 test    eax, eax
.text:00406B34                 jz      short loc_406B52
.text:00406B36
.text:00406B36 loc_406B36:                             ; CODE XREF: .text:00406B54↓j
.text:00406B36                 mov     [esp+8], ebx
.text:00406B3A                 mov     [esp+4], esi
.text:00406B3E                 mov     [esp], eax
.text:00406B41                 call    memcpy
.text:00406B46                 mov     ebx, [esp+14h]
.text:00406B4A                 mov     esi, [esp+18h]
.text:00406B4E                 add     esp, 1Ch
.text:00406B51                 retn
.text:00406B52 ; ---------------------------------------------------------------------------
.text:00406B52
.text:00406B52 loc_406B52:                             ; CODE XREF: .text:00406B34↑j
.text:00406B52                 test    ebx, ebx
.text:00406B54                 jz      short loc_406B36
.text:00406B56                 call    sub_407690
.text:00406B56 ; ---------------------------------------------------------------------------
.text:00406B5B                 align 10h
.text:00406B60
.text:00406B60 ; =============== S U B R O U T I N E =======================================
.text:00406B60
.text:00406B60
.text:00406B60 ; int __cdecl sub_406B60(void *, int, int)
.text:00406B60 sub_406B60      proc near               ; CODE XREF: sub_406A10↑j
.text:00406B60                                         ; .text:00406A3A↑p
.text:00406B60
.text:00406B60 Block           = dword ptr -1Ch
.text:00406B60 Size            = dword ptr -18h
.text:00406B60 var_C           = dword ptr -0Ch
.text:00406B60 var_8           = dword ptr -8
.text:00406B60 var_4           = dword ptr -4
.text:00406B60 arg_0           = dword ptr  4
.text:00406B60 arg_4           = dword ptr  8
.text:00406B60 arg_8           = dword ptr  0Ch
.text:00406B60
.text:00406B60                 sub     esp, 1Ch
.text:00406B63                 mov     [esp+1Ch+var_8], esi
.text:00406B67                 mov     esi, [esp+1Ch+arg_0]
.text:00406B6B                 mov     [esp+1Ch+var_4], edi
.text:00406B6F                 mov     edi, [esp+1Ch+arg_4]
.text:00406B73                 test    esi, esi
.text:00406B75                 mov     [esp+1Ch+var_C], ebx
.text:00406B79                 mov     ecx, [edi]
.text:00406B7B                 mov     ebx, [esp+1Ch+arg_8]
.text:00406B7F                 jz      short loc_406BC0
.text:00406B81                 xor     edx, edx
.text:00406B83                 mov     eax, 7FFFFFFFh
.text:00406B88                 div     ebx
.text:00406B8A                 cmp     eax, ecx
.text:00406B8C                 jb      short loc_406BB9
.text:00406B8E                 add     ecx, ecx
.text:00406B90
.text:00406B90 loc_406B90:                             ; CODE XREF: sub_406B60+62↓j
.text:00406B90                                         ; sub_406B60+71↓j ...
.text:00406B90                 mov     [edi], ecx
.text:00406B92                 imul    ebx, ecx
.text:00406B95                 mov     [esp+1Ch+Block], esi ; Block
.text:00406B98                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406B9C                 call    realloc
.text:00406BA1                 test    eax, eax
.text:00406BA3                 jz      short loc_406BB5
.text:00406BA5
.text:00406BA5 loc_406BA5:                             ; CODE XREF: sub_406B60+57↓j
.text:00406BA5                 mov     ebx, [esp+1Ch+var_C]
.text:00406BA9                 mov     esi, [esp+1Ch+var_8]
.text:00406BAD                 mov     edi, [esp+1Ch+var_4]
.text:00406BB1                 add     esp, 1Ch
.text:00406BB4                 retn
.text:00406BB5 ; ---------------------------------------------------------------------------
.text:00406BB5
.text:00406BB5 loc_406BB5:                             ; CODE XREF: sub_406B60+43↑j
.text:00406BB5                 test    ebx, ebx
.text:00406BB7                 jz      short loc_406BA5
.text:00406BB9
.text:00406BB9 loc_406BB9:                             ; CODE XREF: sub_406B60+2C↑j
.text:00406BB9                 call    sub_407690
.text:00406BB9 ; ---------------------------------------------------------------------------
.text:00406BBE                 align 10h
.text:00406BC0
.text:00406BC0 loc_406BC0:                             ; CODE XREF: sub_406B60+1F↑j
.text:00406BC0                 test    ecx, ecx
.text:00406BC2                 jnz     short loc_406B90
.text:00406BC4                 xor     edx, edx
.text:00406BC6                 mov     eax, 40h ; '@'
.text:00406BCB                 div     ebx
.text:00406BCD                 test    eax, eax
.text:00406BCF                 mov     ecx, eax
.text:00406BD1                 jnz     short loc_406B90
.text:00406BD3                 mov     ecx, 1
.text:00406BD8                 jmp     short loc_406B90
.text:00406BD8 sub_406B60      endp
.text:00406BD8
.text:00406BD8 ; ---------------------------------------------------------------------------
.text:00406BDA                 align 10h
.text:00406BE0
.text:00406BE0 ; =============== S U B R O U T I N E =======================================
.text:00406BE0
.text:00406BE0
.text:00406BE0 sub_406BE0      proc near               ; CODE XREF: sub_402D90+124↑p
.text:00406BE0
.text:00406BE0 var_1C          = dword ptr -1Ch
.text:00406BE0 var_18          = dword ptr -18h
.text:00406BE0 var_14          = dword ptr -14h
.text:00406BE0 var_10          = dword ptr -10h
.text:00406BE0 arg_0           = dword ptr  4
.text:00406BE0 arg_4           = dword ptr  8
.text:00406BE0 arg_8           = dword ptr  0Ch
.text:00406BE0
.text:00406BE0                 push    edi
.text:00406BE1                 push    esi
.text:00406BE2                 push    ebx
.text:00406BE3                 sub     esp, 10h
.text:00406BE6                 mov     esi, [esp+1Ch+arg_4]
.text:00406BEA                 mov     edx, [esp+1Ch+arg_8]
.text:00406BEE                 mov     ebx, [esp+1Ch+arg_0]
.text:00406BF2                 test    esi, esi
.text:00406BF4                 mov     byte ptr [edx+15h], 0
.text:00406BF8                 lea     edi, [edx+15h]
.text:00406BFB                 js      short loc_406C50
.text:00406BFD                 lea     esi, [esi+0]
.text:00406C00
.text:00406C00 loc_406C00:                             ; CODE XREF: sub_406BE0+65↓j
.text:00406C00                 mov     [esp+1Ch+var_1C], ebx
.text:00406C03                 dec     edi
.text:00406C04                 mov     [esp+1Ch+var_18], esi
.text:00406C08                 mov     [esp+1Ch+var_14], 0Ah
.text:00406C10                 mov     [esp+1Ch+var_10], 0
.text:00406C18                 call    sub_41CE60
.text:00406C1D                 add     al, 30h ; '0'
.text:00406C1F                 mov     [edi], al
.text:00406C21                 mov     [esp+1Ch+var_1C], ebx
.text:00406C24                 mov     [esp+1Ch+var_18], esi
.text:00406C28                 mov     [esp+1Ch+var_14], 0Ah
.text:00406C30                 mov     [esp+1Ch+var_10], 0
.text:00406C38                 call    sub_41D020
.text:00406C3D                 mov     ebx, eax
.text:00406C3F                 mov     esi, edx
.text:00406C41                 mov     eax, edx
.text:00406C43                 or      eax, ebx
.text:00406C45                 jnz     short loc_406C00
.text:00406C47
.text:00406C47 loc_406C47:                             ; CODE XREF: sub_406BE0+BB↓j
.text:00406C47                 add     esp, 10h
.text:00406C4A                 mov     eax, edi
.text:00406C4C                 pop     ebx
.text:00406C4D                 pop     esi
.text:00406C4E                 pop     edi
.text:00406C4F                 retn
.text:00406C50 ; ---------------------------------------------------------------------------
.text:00406C50
.text:00406C50 loc_406C50:                             ; CODE XREF: sub_406BE0+1B↑j
.text:00406C50                                         ; sub_406BE0+B5↓j
.text:00406C50                 mov     [esp+1Ch+var_1C], ebx
.text:00406C53                 dec     edi
.text:00406C54                 mov     [esp+1Ch+var_18], esi
.text:00406C58                 mov     [esp+1Ch+var_14], 0Ah
.text:00406C60                 mov     [esp+1Ch+var_10], 0
.text:00406C68                 call    sub_41CE60
.text:00406C6D                 mov     cl, 30h ; '0'
.text:00406C6F                 sub     cl, al
.text:00406C71                 mov     [edi], cl
.text:00406C73                 mov     [esp+1Ch+var_1C], ebx
.text:00406C76                 mov     [esp+1Ch+var_18], esi
.text:00406C7A                 mov     [esp+1Ch+var_14], 0Ah
.text:00406C82                 mov     [esp+1Ch+var_10], 0
.text:00406C8A                 call    sub_41D020
.text:00406C8F                 mov     ebx, eax
.text:00406C91                 mov     esi, edx
.text:00406C93                 or      edx, ebx
.text:00406C95                 jnz     short loc_406C50
.text:00406C97                 dec     edi
.text:00406C98                 mov     byte ptr [edi], 2Dh ; '-'
.text:00406C9B                 jmp     short loc_406C47
.text:00406C9B sub_406BE0      endp
.text:00406C9B
.text:00406C9B ; ---------------------------------------------------------------------------
.text:00406C9D                 align 10h
.text:00406CA0
.text:00406CA0 ; =============== S U B R O U T I N E =======================================
.text:00406CA0
.text:00406CA0
.text:00406CA0 sub_406CA0      proc near               ; CODE XREF: sub_402430+645↑p
.text:00406CA0
.text:00406CA0 var_1C          = dword ptr -1Ch
.text:00406CA0 var_18          = dword ptr -18h
.text:00406CA0 var_14          = dword ptr -14h
.text:00406CA0 var_10          = dword ptr -10h
.text:00406CA0 var_8           = dword ptr -8
.text:00406CA0 var_4           = dword ptr -4
.text:00406CA0 arg_0           = dword ptr  4
.text:00406CA0
.text:00406CA0                 sub     esp, 1Ch
.text:00406CA3                 mov     [esp+1Ch+var_4], esi
.text:00406CA7                 mov     esi, [esp+1Ch+arg_0]
.text:00406CAB                 mov     [esp+1Ch+var_8], ebx
.text:00406CAF                 mov     [esp+1Ch+var_1C], 0
.text:00406CB6                 mov     [esp+1Ch+var_18], esi
.text:00406CBA                 call    sub_40C450
.text:00406CBF                 test    eax, eax
.text:00406CC1                 mov     ebx, eax
.text:00406CC3                 jnz     short loc_406CD3
.text:00406CC5
.text:00406CC5 loc_406CC5:                             ; CODE XREF: sub_406CA0+3B↓j
.text:00406CC5                                         ; sub_406CA0+75↓j ...
.text:00406CC5                 mov     eax, ebx
.text:00406CC7
.text:00406CC7 loc_406CC7:                             ; CODE XREF: sub_406CA0+89↓j
.text:00406CC7                 mov     ebx, [esp+1Ch+var_8]
.text:00406CCB                 mov     esi, [esp+1Ch+var_4]
.text:00406CCF                 add     esp, 1Ch
.text:00406CD2                 retn
.text:00406CD3 ; ---------------------------------------------------------------------------
.text:00406CD3
.text:00406CD3 loc_406CD3:                             ; CODE XREF: sub_406CA0+23↑j
.text:00406CD3                 call    _errno
.text:00406CD8                 cmp     dword ptr [eax], 1
.text:00406CDB                 jz      short loc_406CC5
.text:00406CDD                 mov     edx, [esi]
.text:00406CDF                 mov     ebx, 10624DD3h
.text:00406CE4                 mov     [esp+1Ch+var_14], edx
.text:00406CE8                 mov     ecx, [esi+4]
.text:00406CEB                 mov     [esp+1Ch+var_18], 0
.text:00406CF3                 mov     eax, ecx
.text:00406CF5                 imul    ebx
.text:00406CF7                 mov     ebx, ecx
.text:00406CF9                 sar     ebx, 1Fh
.text:00406CFC                 sar     edx, 6
.text:00406CFF                 sub     edx, ebx
.text:00406D01                 mov     [esp+1Ch+var_10], edx
.text:00406D05                 lea     edx, [esp+1Ch+var_14]
.text:00406D09                 mov     [esp+1Ch+var_1C], edx
.text:00406D0C                 call    sub_40C410
.text:00406D11                 test    eax, eax
.text:00406D13                 mov     ebx, eax
.text:00406D15                 jz      short loc_406CC5
.text:00406D17                 call    _errno
.text:00406D1C                 cmp     dword ptr [eax], 1
.text:00406D1F                 jz      short loc_406CC5
.text:00406D21                 mov     [esp+1Ch+var_1C], esi
.text:00406D24                 call    sub_40C3C0
.text:00406D29                 jmp     short loc_406CC7
.text:00406D29 sub_406CA0      endp
.text:00406D29
.text:00406D29 ; ---------------------------------------------------------------------------
.text:00406D2B                 align 10h
.text:00406D30
.text:00406D30 ; =============== S U B R O U T I N E =======================================
.text:00406D30
.text:00406D30
.text:00406D30 sub_406D30      proc near               ; CODE XREF: sub_402430+5D9↑p
.text:00406D30                                         ; sub_4097F0+D6E↓p
.text:00406D30
.text:00406D30 Time            = dword ptr -1Ch
.text:00406D30 var_18          = dword ptr -18h
.text:00406D30 var_C           = dword ptr -0Ch
.text:00406D30 var_8           = dword ptr -8
.text:00406D30 var_4           = dword ptr -4
.text:00406D30 arg_0           = dword ptr  4
.text:00406D30
.text:00406D30                 sub     esp, 1Ch
.text:00406D33                 mov     [esp+1Ch+var_4], ebx
.text:00406D37                 mov     ebx, [esp+1Ch+arg_0]
.text:00406D3B                 mov     [esp+1Ch+Time], 0
.text:00406D42                 mov     [esp+1Ch+var_18], ebx
.text:00406D46                 call    sub_40C570
.text:00406D4B                 xor     edx, edx
.text:00406D4D                 test    eax, eax
.text:00406D4F                 jnz     short loc_406D60
.text:00406D51
.text:00406D51 loc_406D51:                             ; CODE XREF: sub_406D30+5D↓j
.text:00406D51                                         ; sub_406D30+73↓j
.text:00406D51                 mov     ebx, [esp+1Ch+var_4]
.text:00406D55                 mov     eax, edx
.text:00406D57                 add     esp, 1Ch
.text:00406D5A                 retn
.text:00406D5A ; ---------------------------------------------------------------------------
.text:00406D5B                 align 10h
.text:00406D60
.text:00406D60 loc_406D60:                             ; CODE XREF: sub_406D30+1F↑j
.text:00406D60                 mov     [esp+1Ch+var_18], 0
.text:00406D68                 lea     edx, [esp+1Ch+var_C]
.text:00406D6C                 mov     [esp+1Ch+Time], edx
.text:00406D6F                 call    sub_40C510
.text:00406D74                 test    eax, eax
.text:00406D76                 jnz     short loc_406D8F
.text:00406D78                 mov     ecx, [esp+1Ch+var_C]
.text:00406D7C                 mov     [ebx], ecx
.text:00406D7E                 mov     edx, [esp+1Ch+var_8]
.text:00406D82                 imul    edx, 3E8h
.text:00406D88                 mov     [ebx+4], edx
.text:00406D8B
.text:00406D8B loc_406D8B:                             ; CODE XREF: sub_406D30+7E↓j
.text:00406D8B                 xor     edx, edx
.text:00406D8D                 jmp     short loc_406D51
.text:00406D8F ; ---------------------------------------------------------------------------
.text:00406D8F
.text:00406D8F loc_406D8F:                             ; CODE XREF: sub_406D30+46↑j
.text:00406D8F                 mov     [esp+1Ch+Time], 0 ; Time
.text:00406D96                 call    time
.text:00406D9B                 cmp     eax, 0FFFFFFFFh
.text:00406D9E                 mov     edx, 0FFFFFFFFh
.text:00406DA3                 jz      short loc_406D51
.text:00406DA5                 mov     [ebx], eax
.text:00406DA7                 mov     dword ptr [ebx+4], 0
.text:00406DAE                 jmp     short loc_406D8B
.text:00406DAE sub_406D30      endp
.text:00406DAE
.text:00406DB0
.text:00406DB0 ; =============== S U B R O U T I N E =======================================
.text:00406DB0
.text:00406DB0
.text:00406DB0 ; int __cdecl sub_406DB0(int, char *, int)
.text:00406DB0 sub_406DB0      proc near               ; CODE XREF: sub_402430+6F8↑p
.text:00406DB0
.text:00406DB0 Tm              = dword ptr -8Ch
.text:00406DB0 var_88          = dword ptr -88h
.text:00406DB0 var_84          = dword ptr -84h
.text:00406DB0 Time            = dword ptr -70h
.text:00406DB0 var_6C          = tm ptr -6Ch
.text:00406DB0 var_3C          = dword ptr -3Ch
.text:00406DB0 var_38          = dword ptr -38h
.text:00406DB0 var_34          = dword ptr -34h
.text:00406DB0 var_30          = dword ptr -30h
.text:00406DB0 var_2C          = dword ptr -2Ch
.text:00406DB0 var_28          = dword ptr -28h
.text:00406DB0 var_24          = dword ptr -24h
.text:00406DB0 var_20          = dword ptr -20h
.text:00406DB0 var_4           = dword ptr -4
.text:00406DB0 arg_0           = dword ptr  4
.text:00406DB0 arg_4           = dword ptr  8
.text:00406DB0 arg_8           = dword ptr  0Ch
.text:00406DB0
.text:00406DB0                 sub     esp, 8Ch
.text:00406DB6                 mov     edx, [esp+8Ch+arg_4]
.text:00406DBD                 mov     [esp+8Ch+var_4], ebx
.text:00406DC4                 mov     ecx, [esp+8Ch+arg_8]
.text:00406DCB                 xor     ebx, ebx
.text:00406DCD                 mov     [esp+8Ch+var_88], edx ; char *
.text:00406DD1                 lea     edx, [esp+8Ch+var_3C]
.text:00406DD5                 mov     [esp+8Ch+var_84], ecx ; int
.text:00406DD9                 mov     [esp+8Ch+Tm], edx ; int
.text:00406DDC                 call    sub_406ED0
.text:00406DE1                 test    eax, eax
.text:00406DE3                 jz      short loc_406DF5
.text:00406DE5
.text:00406DE5 loc_406DE5:                             ; CODE XREF: sub_406DB0+E3↓j
.text:00406DE5                                         ; sub_406DB0+FB↓j ...
.text:00406DE5                 mov     eax, ebx
.text:00406DE7                 mov     ebx, [esp+8Ch+var_4]
.text:00406DEE                 add     esp, 8Ch
.text:00406DF4                 retn
.text:00406DF5 ; ---------------------------------------------------------------------------
.text:00406DF5
.text:00406DF5 loc_406DF5:                             ; CODE XREF: sub_406DB0+33↑j
.text:00406DF5                 mov     [esp+8Ch+var_6C.tm_isdst], 0FFFFFFFFh
.text:00406DFD                 mov     ebx, [esp+8Ch+var_38]
.text:00406E01                 mov     edx, [esp+8Ch+var_3C]
.text:00406E05                 mov     ecx, [esp+8Ch+var_34]
.text:00406E09                 mov     [esp+8Ch+var_6C.tm_min], ebx
.text:00406E0D                 mov     ebx, [esp+8Ch+var_2C]
.text:00406E11                 mov     [esp+8Ch+var_6C.tm_sec], edx
.text:00406E15                 mov     edx, [esp+8Ch+var_30]
.text:00406E19                 mov     [esp+8Ch+var_6C.tm_mon], ebx
.text:00406E1D                 mov     ebx, [esp+8Ch+var_20]
.text:00406E21                 mov     [esp+8Ch+var_6C.tm_hour], ecx
.text:00406E25                 mov     ecx, [esp+8Ch+var_28]
.text:00406E29                 mov     [esp+8Ch+var_6C.tm_mday], edx
.text:00406E2D                 mov     edx, [esp+8Ch+var_24]
.text:00406E31                 mov     [esp+8Ch+var_6C.tm_yday], ebx
.text:00406E35                 lea     ebx, [esp+8Ch+var_6C]
.text:00406E39                 mov     [esp+8Ch+var_6C.tm_year], ecx
.text:00406E3D                 mov     [esp+8Ch+var_6C.tm_wday], edx
.text:00406E41                 mov     [esp+8Ch+Tm], ebx ; Tm
.text:00406E44                 call    mktime
.text:00406E49                 mov     [esp+8Ch+Time], eax
.text:00406E4D                 mov     ecx, ebx
.text:00406E4F                 inc     eax
.text:00406E50                 jz      short loc_406EB0
.text:00406E52
.text:00406E52 loc_406E52:                             ; CODE XREF: sub_406DB0+112↓j
.text:00406E52                 mov     ebx, [esp+8Ch+var_28]
.text:00406E56                 mov     edx, [ecx+14h]
.text:00406E59                 mov     eax, [ecx+10h]
.text:00406E5C                 xor     edx, ebx
.text:00406E5E                 mov     ebx, [esp+8Ch+var_2C]
.text:00406E62                 xor     eax, ebx
.text:00406E64                 or      edx, eax
.text:00406E66                 mov     ebx, [esp+8Ch+var_30]
.text:00406E6A                 mov     eax, [ecx+0Ch]
.text:00406E6D                 xor     eax, ebx
.text:00406E6F                 or      edx, eax
.text:00406E71                 mov     ebx, [esp+8Ch+var_34]
.text:00406E75                 mov     eax, [ecx+8]
.text:00406E78                 xor     eax, ebx
.text:00406E7A                 or      edx, eax
.text:00406E7C                 mov     ebx, [esp+8Ch+var_38]
.text:00406E80                 mov     eax, [ecx+4]
.text:00406E83                 xor     eax, ebx
.text:00406E85                 or      edx, eax
.text:00406E87                 mov     ebx, [esp+8Ch+var_3C]
.text:00406E8B                 mov     eax, [ecx]
.text:00406E8D                 xor     eax, ebx
.text:00406E8F                 xor     ebx, ebx
.text:00406E91                 or      edx, eax
.text:00406E93                 jnz     loc_406DE5
.text:00406E99                 mov     eax, [esp+8Ch+Time]
.text:00406E9D                 mov     ebx, 1
.text:00406EA2                 mov     ecx, [esp+8Ch+arg_0]
.text:00406EA9                 mov     [ecx], eax
.text:00406EAB                 jmp     loc_406DE5
.text:00406EB0 ; ---------------------------------------------------------------------------
.text:00406EB0
.text:00406EB0 loc_406EB0:                             ; CODE XREF: sub_406DB0+A0↑j
.text:00406EB0                 lea     ecx, [esp+8Ch+Time]
.text:00406EB4                 xor     ebx, ebx
.text:00406EB6                 mov     [esp+8Ch+Tm], ecx ; Time
.text:00406EB9                 call    localtime
.text:00406EBE                 test    eax, eax
.text:00406EC0                 mov     ecx, eax
.text:00406EC2                 jnz     short loc_406E52
.text:00406EC4                 jmp     loc_406DE5
.text:00406EC4 sub_406DB0      endp
.text:00406EC4
.text:00406EC4 ; ---------------------------------------------------------------------------
.text:00406EC9                 align 10h
.text:00406ED0
.text:00406ED0 ; =============== S U B R O U T I N E =======================================
.text:00406ED0
.text:00406ED0
.text:00406ED0 ; int __cdecl sub_406ED0(int, char *, int)
.text:00406ED0 sub_406ED0      proc near               ; CODE XREF: sub_406DB0+2C↑p
.text:00406ED0
.text:00406ED0 Str             = dword ptr -5Ch
.text:00406ED0 Val             = dword ptr -58h
.text:00406ED0 var_54          = dword ptr -54h
.text:00406ED0 var_50          = dword ptr -50h
.text:00406ED0 var_44          = dword ptr -44h
.text:00406ED0 var_40          = dword ptr -40h
.text:00406ED0 var_3C          = dword ptr -3Ch
.text:00406ED0 arg_0           = dword ptr  4
.text:00406ED0 arg_4           = dword ptr  8
.text:00406ED0 arg_8           = dword ptr  0Ch
.text:00406ED0
.text:00406ED0                 push    ebp
.text:00406ED1                 push    edi
.text:00406ED2                 push    esi
.text:00406ED3                 push    ebx
.text:00406ED4                 sub     esp, 4Ch
.text:00406ED7                 mov     ebp, [esp+5Ch+arg_4]
.text:00406EDB                 mov     [esp+5Ch+var_40], 0
.text:00406EE3                 mov     edi, [esp+5Ch+arg_8]
.text:00406EE7                 mov     [esp+5Ch+Str], ebp ; Str
.text:00406EEA                 call    strlen
.text:00406EEF                 test    edi, 8
.text:00406EF5                 mov     esi, eax
.text:00406EF7                 jnz     loc_4070A0
.text:00406EFD
.text:00406EFD loc_406EFD:                             ; CODE XREF: sub_406ED0+1E6↓j
.text:00406EFD                 mov     ebx, esi
.text:00406EFF
.text:00406EFF loc_406EFF:                             ; CODE XREF: sub_406ED0+1F0↓j
.text:00406EFF                 cmp     ebx, 8
.text:00406F02                 jz      short loc_406F20
.text:00406F04                 cmp     ebx, 0Ah
.text:00406F07                 jz      short loc_406F20
.text:00406F09                 cmp     ebx, 0Ch
.text:00406F0C                 mov     edx, 1
.text:00406F11                 jz      short loc_406F20
.text:00406F13
.text:00406F13 loc_406F13:                             ; CODE XREF: sub_406ED0+63↓j
.text:00406F13                                         ; sub_406ED0+6A↓j ...
.text:00406F13                 add     esp, 4Ch
.text:00406F16                 mov     eax, edx
.text:00406F18                 pop     ebx
.text:00406F19                 pop     esi
.text:00406F1A                 pop     edi
.text:00406F1B                 pop     ebp
.text:00406F1C                 retn
.text:00406F1C ; ---------------------------------------------------------------------------
.text:00406F1D                 align 10h
.text:00406F20
.text:00406F20 loc_406F20:                             ; CODE XREF: sub_406ED0+32↑j
.text:00406F20                                         ; sub_406ED0+37↑j ...
.text:00406F20                 mov     edx, [esp+5Ch+var_40]
.text:00406F24                 test    edx, edx
.text:00406F26                 jz      short loc_406F3C
.text:00406F28                 test    edi, 8
.text:00406F2E                 mov     edx, 1
.text:00406F33                 jz      short loc_406F13
.text:00406F35                 sub     esi, ebx
.text:00406F37                 cmp     esi, 3
.text:00406F3A                 jnz     short loc_406F13
.text:00406F3C
.text:00406F3C loc_406F3C:                             ; CODE XREF: sub_406ED0+56↑j
.text:00406F3C                 xor     ecx, ecx
.text:00406F3E                 cmp     ecx, ebx
.text:00406F40                 jnb     short loc_406F66
.text:00406F42                 lea     esi, [esi+0]
.text:00406F49                 lea     edi, [edi+0]
.text:00406F50
.text:00406F50 loc_406F50:                             ; CODE XREF: sub_406ED0+94↓j
.text:00406F50                 movsx   esi, byte ptr [ecx+ebp]
.text:00406F54                 mov     edx, 1
.text:00406F59                 sub     esi, 30h ; '0'
.text:00406F5C                 cmp     esi, 9
.text:00406F5F                 ja      short loc_406F13
.text:00406F61                 inc     ecx
.text:00406F62                 cmp     ecx, ebx
.text:00406F64                 jb      short loc_406F50
.text:00406F66
.text:00406F66 loc_406F66:                             ; CODE XREF: sub_406ED0+70↑j
.text:00406F66                 shr     ebx, 1
.text:00406F68                 xor     ecx, ecx
.text:00406F6A                 cmp     ecx, ebx
.text:00406F6C                 mov     [esp+5Ch+var_44], ebx
.text:00406F70                 jnb     short loc_406F9F
.text:00406F72                 lea     esi, [esi+0]
.text:00406F79                 lea     edi, [edi+0]
.text:00406F80
.text:00406F80 loc_406F80:                             ; CODE XREF: sub_406ED0+CD↓j
.text:00406F80                 movsx   edx, byte ptr [ebp+ecx*2+0]
.text:00406F85                 lea     eax, [edx+edx*4]
.text:00406F88                 movsx   edx, byte ptr [ebp+ecx*2+1]
.text:00406F8D                 lea     esi, [edx+eax*2-210h]
.text:00406F94                 mov     [esp+ecx*4+5Ch+var_3C], esi
.text:00406F98                 inc     ecx
.text:00406F99                 cmp     ecx, [esp+5Ch+var_44]
.text:00406F9D                 jb      short loc_406F80
.text:00406F9F
.text:00406F9F loc_406F9F:                             ; CODE XREF: sub_406ED0+A0↑j
.text:00406F9F                 test    edi, 1
.text:00406FA5                 lea     esi, [esp+5Ch+var_3C]
.text:00406FA9                 jnz     loc_40705D
.text:00406FAF
.text:00406FAF loc_406FAF:                             ; CODE XREF: sub_406ED0+1CB↓j
.text:00406FAF                 mov     ebp, [esi]
.text:00406FB1                 sub     ebx, 4
.text:00406FB4                 add     esi, 4
.text:00406FB7                 mov     edx, [esp+5Ch+arg_0]
.text:00406FBB                 dec     ebp
.text:00406FBC                 mov     [edx+10h], ebp
.text:00406FBF                 mov     ecx, [esi]
.text:00406FC1                 add     esi, 4
.text:00406FC4                 mov     [edx+0Ch], ecx
.text:00406FC7                 mov     ebp, [esi]
.text:00406FC9                 add     esi, 4
.text:00406FCC                 mov     [edx+8], ebp
.text:00406FCF                 mov     ecx, [esi]
.text:00406FD1                 add     esi, 4
.text:00406FD4                 test    edi, 2
.text:00406FDA                 mov     [edx+4], ecx
.text:00406FDD                 jnz     short loc_407037
.text:00406FDF
.text:00406FDF loc_406FDF:                             ; CODE XREF: sub_406ED0+18B↓j
.text:00406FDF                 mov     edi, [esp+5Ch+var_40]
.text:00406FE3                 test    edi, edi
.text:00406FE5                 jz      short loc_40702B
.text:00406FE7                 inc     [esp+5Ch+var_40]
.text:00406FEB                 mov     ecx, [esp+5Ch+var_40]
.text:00406FEF                 movsx   edx, byte ptr [ecx]
.text:00406FF2                 lea     ebx, [edx-30h]
.text:00406FF5                 cmp     ebx, 9
.text:00406FF8                 ja      short loc_40700A
.text:00406FFA                 mov     edi, [esp+5Ch+var_40]
.text:00406FFE                 movsx   ecx, byte ptr [edi+1]
.text:00407002                 lea     ebp, [ecx-30h]
.text:00407005                 cmp     ebp, 9
.text:00407008                 jbe     short loc_407014
.text:0040700A
.text:0040700A loc_40700A:                             ; CODE XREF: sub_406ED0+128↑j
.text:0040700A                 mov     edx, 1
.text:0040700F                 jmp     loc_406F13
.text:00407014 ; ---------------------------------------------------------------------------
.text:00407014
.text:00407014 loc_407014:                             ; CODE XREF: sub_406ED0+138↑j
.text:00407014                 mov     esi, [esp+5Ch+arg_0]
.text:00407018                 lea     ebx, [edx+edx*4]
.text:0040701B                 lea     edx, [ecx+ebx*2-210h]
.text:00407022                 mov     [esi], edx
.text:00407024
.text:00407024 loc_407024:                             ; CODE XREF: sub_406ED0+165↓j
.text:00407024                 xor     edx, edx
.text:00407026                 jmp     loc_406F13
.text:0040702B ; ---------------------------------------------------------------------------
.text:0040702B
.text:0040702B loc_40702B:                             ; CODE XREF: sub_406ED0+115↑j
.text:0040702B                 mov     esi, [esp+5Ch+arg_0]
.text:0040702F                 mov     dword ptr [esi], 0
.text:00407035                 jmp     short loc_407024
.text:00407037 ; ---------------------------------------------------------------------------
.text:00407037
.text:00407037 loc_407037:                             ; CODE XREF: sub_406ED0+10D↑j
.text:00407037                 mov     [esp+5Ch+Str], edx
.text:0040703A                 and     edi, 4
.text:0040703D                 mov     [esp+5Ch+var_50], edi
.text:00407041                 mov     [esp+5Ch+var_54], ebx
.text:00407045                 mov     [esp+5Ch+Val], esi
.text:00407049                 call    sub_4070D0
.text:0040704E                 test    eax, eax
.text:00407050                 mov     edx, 1
.text:00407055                 jnz     loc_406F13
.text:0040705B                 jmp     short loc_406FDF
.text:0040705D ; ---------------------------------------------------------------------------
.text:0040705D
.text:0040705D loc_40705D:                             ; CODE XREF: sub_406ED0+D9↑j
.text:0040705D                 mov     [esp+5Ch+Val], esi
.text:00407061                 mov     ebx, [esp+5Ch+var_44]
.text:00407065                 mov     ebp, edi
.text:00407067                 mov     ecx, [esp+5Ch+arg_0]
.text:0040706B                 and     ebp, 4
.text:0040706E                 mov     [esp+5Ch+var_50], ebp
.text:00407072                 sub     ebx, 4
.text:00407075                 mov     [esp+5Ch+var_54], ebx
.text:00407079                 mov     [esp+5Ch+Str], ecx
.text:0040707C                 call    sub_4070D0
.text:00407081                 test    eax, eax
.text:00407083                 mov     edx, 1
.text:00407088                 jnz     loc_406F13
.text:0040708E                 mov     eax, [esp+5Ch+var_44]
.text:00407092                 mov     ebx, 4
.text:00407097                 lea     esi, [esi+eax*4-10h]
.text:0040709B                 jmp     loc_406FAF
.text:004070A0 ; ---------------------------------------------------------------------------
.text:004070A0
.text:004070A0 loc_4070A0:                             ; CODE XREF: sub_406ED0+27↑j
.text:004070A0                 mov     [esp+5Ch+Val], 2Eh ; '.' ; Val
.text:004070A8                 mov     [esp+5Ch+Str], ebp ; Str
.text:004070AB                 call    strchr
.text:004070B0                 mov     [esp+5Ch+var_40], eax
.text:004070B4                 test    eax, eax
.text:004070B6                 jz      loc_406EFD
.text:004070BC                 mov     ebx, eax
.text:004070BE                 sub     ebx, ebp
.text:004070C0                 jmp     loc_406EFF
.text:004070C0 sub_406ED0      endp
.text:004070C0
.text:004070C0 ; ---------------------------------------------------------------------------
.text:004070C5                 align 10h
.text:004070D0
.text:004070D0 ; =============== S U B R O U T I N E =======================================
.text:004070D0
.text:004070D0
.text:004070D0 sub_4070D0      proc near               ; CODE XREF: sub_406ED0+179↑p
.text:004070D0                                         ; sub_406ED0+1AC↑p
.text:004070D0
.text:004070D0 Time            = dword ptr -1Ch
.text:004070D0 var_C           = dword ptr -0Ch
.text:004070D0 var_8           = dword ptr -8
.text:004070D0 var_4           = dword ptr -4
.text:004070D0 arg_0           = dword ptr  4
.text:004070D0 arg_4           = dword ptr  8
.text:004070D0 arg_8           = dword ptr  0Ch
.text:004070D0 arg_C           = dword ptr  10h
.text:004070D0
.text:004070D0                 sub     esp, 1Ch
.text:004070D3                 mov     eax, [esp+1Ch+arg_8]
.text:004070D7                 mov     [esp+1Ch+var_4], esi
.text:004070DB                 mov     edx, [esp+1Ch+arg_4]
.text:004070DF                 mov     [esp+1Ch+var_8], ebx
.text:004070E3                 mov     esi, [esp+1Ch+arg_0]
.text:004070E7                 cmp     eax, 1
.text:004070EA                 jz      short loc_407150
.text:004070EC                 cmp     eax, 1
.text:004070EF                 jb      short loc_407126
.text:004070F1                 cmp     eax, 2
.text:004070F4                 jnz     short loc_40715F
.text:004070F6                 mov     ebx, [esp+1Ch+arg_C]
.text:004070FA                 mov     eax, 1
.text:004070FF                 test    ebx, ebx
.text:00407101                 jz      short loc_40711A
.text:00407103                 mov     ecx, [edx]
.text:00407105                 lea     ebx, [ecx+ecx*4]
.text:00407108                 lea     ecx, [ebx+ebx*4]
.text:0040710B                 mov     ebx, [edx+4]
.text:0040710E                 lea     eax, [ebx+ecx*4-76Ch]
.text:00407115
.text:00407115 loc_407115:                             ; CODE XREF: sub_4070D0+78↓j
.text:00407115                                         ; sub_4070D0+8D↓j
.text:00407115                 mov     [esi+14h], eax
.text:00407118
.text:00407118 loc_407118:                             ; CODE XREF: sub_4070D0+88↓j
.text:00407118                 xor     eax, eax
.text:0040711A
.text:0040711A loc_40711A:                             ; CODE XREF: sub_4070D0+31↑j
.text:0040711A                                         ; sub_4070D0+73↓j
.text:0040711A                 mov     ebx, [esp+1Ch+var_8]
.text:0040711E                 mov     esi, [esp+1Ch+var_4]
.text:00407122                 add     esp, 1Ch
.text:00407125                 retn
.text:00407126 ; ---------------------------------------------------------------------------
.text:00407126
.text:00407126 loc_407126:                             ; CODE XREF: sub_4070D0+1F↑j
.text:00407126                 lea     ebx, [esp+1Ch+var_C]
.text:0040712A                 mov     [esp+1Ch+Time], ebx ; Time
.text:0040712D                 call    time
.text:00407132                 mov     [esp+1Ch+Time], ebx ; Time
.text:00407135                 call    localtime
.text:0040713A                 mov     edx, eax
.text:0040713C                 test    edx, edx
.text:0040713E                 mov     eax, 1
.text:00407143                 jz      short loc_40711A
.text:00407145                 mov     eax, [edx+14h]
.text:00407148                 jmp     short loc_407115
.text:00407148 ; ---------------------------------------------------------------------------
.text:0040714A                 align 10h
.text:00407150
.text:00407150 loc_407150:                             ; CODE XREF: sub_4070D0+1A↑j
.text:00407150                 mov     eax, [edx]
.text:00407152                 mov     [esi+14h], eax
.text:00407155                 cmp     dword ptr [edx], 44h ; 'D'
.text:00407158                 jg      short loc_407118
.text:0040715A                 add     eax, 64h ; 'd'
.text:0040715D                 jmp     short loc_407115
.text:0040715F ; ---------------------------------------------------------------------------
.text:0040715F
.text:0040715F loc_40715F:                             ; CODE XREF: sub_4070D0+24↑j
.text:0040715F                 call    abort
.text:0040715F sub_4070D0      endp
.text:0040715F
.text:0040715F ; ---------------------------------------------------------------------------
.text:00407164                 align 10h
.text:00407170 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00407170                                         ; DATA XREF: .data:Buffer↓o
.text:004071A2 ; const char aSSS[12]
.text:004071A2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_407460+50↓o
.text:004071AE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004071BE                 db 12h dup(90h)
.text:004071D0
.text:004071D0 ; =============== S U B R O U T I N E =======================================
.text:004071D0
.text:004071D0
.text:004071D0 sub_4071D0      proc near               ; DATA XREF: sub_407460+100↓o
.text:004071D0                 push    esp
.text:004071D1                 push    69207369h
.text:004071D6                 jnb     short loc_4071F8
.text:004071D8                 db      66h
.text:004071D8                 jb      short near ptr 7240h
.text:004071DB                 and     gs:[ebx+6Fh], dh
.text:004071DF                 db      66h
.text:004071DF                 jz      short near ptr 7259h
.text:004071E2                 popa
.text:004071E3                 jb      short loc_40724A
.text:004071E5                 cmp     esp, [eax]
.text:004071E7                 jnb     short near ptr loc_40724C+2
.text:004071E9                 and     gs:[eax+ebp*2+65h], dh
.text:004071EE                 and     [ebx+6Fh], dh
.text:004071F1                 jnz     short loc_407265
.text:004071F3                 arpl    [ebp+20h], sp
.text:004071F6                 outsw
.text:004071F8
.text:004071F8 loc_4071F8:                             ; CODE XREF: sub_4071D0+6↑j
.text:004071F8                 jb      short loc_40721A
.text:004071FA                 arpl    [edi+70h], bp
.text:004071FD                 jns     short loc_407268
.text:004071FF                 outsb
.text:00407200                 and     [bp+di+6Fh], ah
.text:00407204                 outsb
.text:00407205                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:0040720E                 and     [eax+ebp*2+65h], dl
.text:00407212                 jb      short near ptr loc_407278+1
.text:00407214                 and     [ecx+73h], ch
.text:00407217                 and     [esi+4Fh], cl
.text:0040721A
.text:0040721A loc_40721A:                             ; CODE XREF: sub_4071D0:loc_4071F8↑j
.text:0040721A                 or      dh, [edi+61h]
.text:0040721D                 jb      short loc_407291
.text:0040721F                 popa
.text:00407220                 outsb
.text:00407221                 jz      short loc_40729C
.text:00407223                 cmp     esp, [eax]
.text:00407225                 outsb
.text:00407226                 outsd
.text:00407227                 jz      short loc_407249
.text:00407229                 db      65h
.text:00407229                 jbe     short loc_407291
.text:0040722C                 outsb
.text:0040722D                 and     [esi+6Fh], ah
.text:00407230                 jb      short near ptr loc_407250+2
.text:00407232                 dec     ebp
.text:00407233                 inc     ebp
.text:00407234                 push    edx
.text:00407235                 inc     ebx
.text:00407236                 dec     eax
.text:00407237                 inc     ecx
.text:00407238                 dec     esi
.text:00407239                 push    esp
.text:0040723A                 inc     ecx
.text:0040723B                 inc     edx
.text:0040723C                 dec     ecx
.text:0040723D                 dec     esp
.text:0040723E                 dec     ecx
.text:0040723F                 push    esp
.text:00407240                 pop     ecx
.text:00407241                 and     [edi+72h], ch
.text:00407244                 and     [esi+49h], al
.text:00407247                 push    esp
.text:00407248                 dec     esi
.text:00407249
.text:00407249 loc_407249:                             ; CODE XREF: sub_4071D0+57↑j
.text:00407249                 inc     ebp
.text:0040724A
.text:0040724A loc_40724A:                             ; CODE XREF: sub_4071D0+13↑j
.text:0040724A                 push    ebx
.text:0040724B                 push    ebx
.text:0040724C
.text:0040724C loc_40724C:                             ; CODE XREF: sub_4071D0+17↑j
.text:0040724C                 and     [esi+4Fh], al
.text:0040724F                 push    edx
.text:00407250
.text:00407250 loc_407250:                             ; CODE XREF: sub_4071D0+60↑j
.text:00407250                 and     [ecx+20h], al
.text:00407253                 push    eax
.text:00407254                 inc     ecx
.text:00407255                 push    edx
.text:00407256                 push    esp
.text:00407257                 dec     ecx
.text:00407258                 inc     ebx
.text:00407259                 push    ebp
.text:0040725A                 dec     esp
.text:0040725B                 inc     ecx
.text:0040725C                 push    edx
.text:0040725D                 and     [eax+55h], dl
.text:00407260                 push    edx
.text:00407261                 push    eax
.text:00407262                 dec     edi
.text:00407263                 push    ebx
.text:00407264                 inc     ebp
.text:00407265
.text:00407265 loc_407265:                             ; CODE XREF: sub_4071D0+21↑j
.text:00407265                 or      al, cs:[eax]
.text:00407268
.text:00407268 loc_407268:                             ; CODE XREF: sub_4071D0+2D↑j
.text:00407268                                         ; DATA XREF: sub_407460:loc_4075A1↓o
.text:00407268                 push    edi
.text:00407269                 jb      short near ptr loc_4072D3+1
.text:0040726B                 jz      short near ptr loc_4072E0+1
.text:0040726D                 outs    dx, byte ptr gs:[esi]
.text:0040726F                 and     [edx+79h], ah
.text:00407272                 and     ds:6E612073h, ah
.text:00407278
.text:00407278 loc_407278:                             ; CODE XREF: sub_4071D0+42↑j
.text:00407278                 and     fs:0A2E73h, ah
.text:0040727F
.text:0040727F loc_40727F:                             ; DATA XREF: sub_407460:loc_4075AD↓o
.text:0040727F                 push    edi
.text:00407280                 jb      short near ptr loc_4072EA+1
.text:00407282                 jz      short loc_4072F8
.text:00407284                 outs    dx, byte ptr gs:[esi]
.text:00407286                 and     [edx+79h], ah
.text:00407289                 and     ds:25202C73h, ah
.text:0040728F                 jnb     short near ptr loc_4072BA+3
.text:00407291
.text:00407291 loc_407291:                             ; CODE XREF: sub_4071D0+4D↑j
.text:00407291                                         ; sub_4071D0+59↑j
.text:00407291                 and     [ecx+6Eh], ah
.text:00407294                 and     fs:0A2E73h, ah
.text:0040729B                 nop
.text:0040729C
.text:0040729C loc_40729C:                             ; CODE XREF: sub_4071D0+51↑j
.text:0040729C                 nop
.text:0040729D                 nop
.text:0040729E                 nop
.text:0040729F                 nop
.text:004072A0                 nop
.text:004072A1                 nop
.text:004072A2                 nop
.text:004072A3                 nop
.text:004072A4                 nop
.text:004072A5                 nop
.text:004072A6                 nop
.text:004072A7                 nop
.text:004072A8                 nop
.text:004072A9                 nop
.text:004072AA                 nop
.text:004072AB                 nop
.text:004072AC                 nop
.text:004072AD                 nop
.text:004072AE                 nop
.text:004072AF                 nop
.text:004072AF sub_4071D0      endp ; sp-analysis failed
.text:004072AF
.text:004072B0
.text:004072B0 ; =============== S U B R O U T I N E =======================================
.text:004072B0
.text:004072B0
.text:004072B0 sub_4072B0      proc near               ; DATA XREF: sub_407460:loc_4075B9↓o
.text:004072B0                 push    edi
.text:004072B1                 jb      short near ptr loc_40731A+2
.text:004072B3                 jz      short near ptr loc_407328+1
.text:004072B5                 outs    dx, byte ptr gs:[esi]
.text:004072B7                 and     [edx+79h], ah
.text:004072BA
.text:004072BA loc_4072BA:                             ; CODE XREF: sub_4071D0+BF↑j
.text:004072BA                 and     ds:25202C73h, ah
.text:004072C0                 jnb     short near ptr loc_4072ED+1
.text:004072C2                 and     ds:610A2C73h, ah
.text:004072C8                 outsb
.text:004072C9                 and     fs:0A2E73h, ah
.text:004072D0
.text:004072D0 loc_4072D0:                             ; DATA XREF: sub_407460:loc_4075C5↓o
.text:004072D0                 push    edi
.text:004072D1                 jb      short loc_40733C
.text:004072D3
.text:004072D3 loc_4072D3:                             ; CODE XREF: sub_4071D0+99↑j
.text:004072D3                 jz      short loc_407349
.text:004072D5                 outs    dx, byte ptr gs:[esi]
.text:004072D7                 and     [edx+79h], ah
.text:004072DA                 and     ds:25202C73h, ah
.text:004072E0
.text:004072E0 loc_4072E0:                             ; CODE XREF: sub_4071D0+9B↑j
.text:004072E0                 jnb     short loc_40730E
.text:004072E2                 and     ds:250A2C73h, ah
.text:004072E8                 jnb     short near ptr loc_407315+1
.text:004072EA
.text:004072EA loc_4072EA:                             ; CODE XREF: sub_4071D0+B0↑j
.text:004072EA                 and     [ecx+6Eh], ah
.text:004072ED
.text:004072ED loc_4072ED:                             ; CODE XREF: sub_4072B0+10↑j
.text:004072ED                 and     fs:0A2E73h, ah
.text:004072F4                 nop
.text:004072F5                 nop
.text:004072F6                 nop
.text:004072F7                 nop
.text:004072F8
.text:004072F8 loc_4072F8:                             ; CODE XREF: sub_4071D0+B2↑j
.text:004072F8                 nop
.text:004072F9                 nop
.text:004072FA                 nop
.text:004072FB                 nop
.text:004072FC                 nop
.text:004072FD                 nop
.text:004072FE                 nop
.text:004072FF                 nop
.text:00407300                 nop
.text:00407301                 nop
.text:00407302                 nop
.text:00407303                 nop
.text:00407304                 nop
.text:00407305                 nop
.text:00407306                 nop
.text:00407307                 nop
.text:00407308                 nop
.text:00407309                 nop
.text:0040730A                 nop
.text:0040730B                 nop
.text:0040730C                 nop
.text:0040730D                 nop
.text:0040730E
.text:0040730E loc_40730E:                             ; CODE XREF: sub_4072B0:loc_4072E0↑j
.text:0040730E                 nop
.text:0040730F                 nop
.text:0040730F sub_4072B0      endp ; sp-analysis failed
.text:0040730F
.text:00407310
.text:00407310 ; =============== S U B R O U T I N E =======================================
.text:00407310
.text:00407310
.text:00407310 sub_407310      proc near               ; DATA XREF: sub_407460:loc_4075D1↓o
.text:00407310                 push    edi
.text:00407311                 jb      short loc_40737C
.text:00407313                 jz      short loc_407389
.text:00407315
.text:00407315 loc_407315:                             ; CODE XREF: sub_4072B0+38↑j
.text:00407315                 outs    dx, byte ptr gs:[esi]
.text:00407317                 and     [edx+79h], ah
.text:0040731A
.text:0040731A loc_40731A:                             ; CODE XREF: sub_4072B0+1↑j
.text:0040731A                 and     ds:25202C73h, ah
.text:00407320                 jnb     short loc_40734E
.text:00407322                 and     ds:250A2C73h, ah
.text:00407328
.text:00407328 loc_407328:                             ; CODE XREF: sub_4072B0+3↑j
.text:00407328                 jnb     short near ptr loc_407355+1
.text:0040732A                 and     ds:61202C73h, ah
.text:00407330                 outsb
.text:00407331                 and     fs:0A2E73h, ah
.text:00407338                 nop
.text:00407339                 nop
.text:0040733A                 nop
.text:0040733B                 nop
.text:0040733C
.text:0040733C loc_40733C:                             ; CODE XREF: sub_4072B0+21↑j
.text:0040733C                 nop
.text:0040733D                 nop
.text:0040733E                 nop
.text:0040733F                 nop
.text:00407340                 nop
.text:00407341                 nop
.text:00407342                 nop
.text:00407343                 nop
.text:00407344                 nop
.text:00407345                 nop
.text:00407346                 nop
.text:00407347                 nop
.text:00407348                 nop
.text:00407349
.text:00407349 loc_407349:                             ; CODE XREF: sub_4072B0:loc_4072D3↑j
.text:00407349                 nop
.text:0040734A                 nop
.text:0040734B                 nop
.text:0040734C                 nop
.text:0040734D                 nop
.text:0040734E
.text:0040734E loc_40734E:                             ; CODE XREF: sub_407310+10↑j
.text:0040734E                 nop
.text:0040734F                 nop
.text:0040734F sub_407310      endp ; sp-analysis failed
.text:0040734F
.text:00407350
.text:00407350 ; =============== S U B R O U T I N E =======================================
.text:00407350
.text:00407350
.text:00407350 sub_407350      proc near               ; DATA XREF: sub_407460:loc_4075DD↓o
.text:00407350                 push    edi
.text:00407351                 jb      short near ptr loc_4073B9+3
.text:00407353                 jz      short loc_4073C9
.text:00407355
.text:00407355 loc_407355:                             ; CODE XREF: sub_407310:loc_407328↑j
.text:00407355                 outs    dx, byte ptr gs:[esi]
.text:00407357                 and     [edx+79h], ah
.text:0040735A                 and     ds:25202C73h, ah
.text:00407360                 jnb     short loc_40738E
.text:00407362                 and     ds:250A2C73h, ah
.text:00407368                 jnb     short near ptr loc_407395+1
.text:0040736A                 and     ds:25202C73h, ah
.text:00407370                 jnb     short near ptr loc_40739A+4
.text:00407372                 and     [ecx+6Eh], ah
.text:00407375                 and     fs:0A2E73h, ah
.text:0040737C
.text:0040737C loc_40737C:                             ; CODE XREF: sub_407310+1↑j
.text:0040737C                 nop
.text:0040737D                 nop
.text:0040737E                 nop
.text:0040737F                 nop
.text:00407380                 nop
.text:00407381                 nop
.text:00407382                 nop
.text:00407383                 nop
.text:00407384                 nop
.text:00407385                 nop
.text:00407386                 nop
.text:00407387                 nop
.text:00407388                 nop
.text:00407389
.text:00407389 loc_407389:                             ; CODE XREF: sub_407310+3↑j
.text:00407389                 nop
.text:0040738A                 nop
.text:0040738B                 nop
.text:0040738C                 nop
.text:0040738D                 nop
.text:0040738E
.text:0040738E loc_40738E:                             ; CODE XREF: sub_407350+10↑j
.text:0040738E                 nop
.text:0040738F                 nop
.text:0040738F sub_407350      endp ; sp-analysis failed
.text:0040738F
.text:00407390
.text:00407390 ; =============== S U B R O U T I N E =======================================
.text:00407390
.text:00407390
.text:00407390 sub_407390      proc near               ; DATA XREF: sub_407460:loc_4075E9↓o
.text:00407390                 push    edi
.text:00407391                 jb      short near ptr loc_4073FA+2
.text:00407393                 jz      short near ptr loc_407404+5
.text:00407395
.text:00407395 loc_407395:                             ; CODE XREF: sub_407350+18↑j
.text:00407395                 outs    dx, byte ptr gs:[esi]
.text:00407397                 and     [edx+79h], ah
.text:0040739A
.text:0040739A loc_40739A:                             ; CODE XREF: sub_407350+20↑j
.text:0040739A                 and     ds:25202C73h, ah
.text:004073A0                 jnb     short loc_4073CE
.text:004073A2                 and     ds:250A2C73h, ah
.text:004073A8                 jnb     short near ptr loc_4073D5+1
.text:004073AA                 and     ds:25202C73h, ah
.text:004073B0                 jnb     short near ptr loc_4073DA+4
.text:004073B2                 and     ds:610A2C73h, ah
.text:004073B8                 outsb
.text:004073B9
.text:004073B9 loc_4073B9:                             ; CODE XREF: sub_407350+1↑j
.text:004073B9                 and     fs:0A2E73h, ah
.text:004073C0                 nop
.text:004073C1                 nop
.text:004073C2                 nop
.text:004073C3                 nop
.text:004073C4                 nop
.text:004073C5                 nop
.text:004073C6                 nop
.text:004073C7                 nop
.text:004073C8                 nop
.text:004073C9
.text:004073C9 loc_4073C9:                             ; CODE XREF: sub_407350+3↑j
.text:004073C9                 nop
.text:004073CA                 nop
.text:004073CB                 nop
.text:004073CC                 nop
.text:004073CD                 nop
.text:004073CE
.text:004073CE loc_4073CE:                             ; CODE XREF: sub_407390+10↑j
.text:004073CE                 nop
.text:004073CF                 nop
.text:004073CF sub_407390      endp ; sp-analysis failed
.text:004073CF
.text:004073D0
.text:004073D0 ; =============== S U B R O U T I N E =======================================
.text:004073D0
.text:004073D0
.text:004073D0 sub_4073D0      proc near               ; DATA XREF: sub_407460:loc_4075F5↓o
.text:004073D0                 push    edi
.text:004073D1                 jb      short near ptr loc_40743A+2
.text:004073D3                 jz      short near ptr loc_407445+4
.text:004073D5
.text:004073D5 loc_4073D5:                             ; CODE XREF: sub_407390+18↑j
.text:004073D5                 outs    dx, byte ptr gs:[esi]
.text:004073D7                 and     [edx+79h], ah
.text:004073DA
.text:004073DA loc_4073DA:                             ; CODE XREF: sub_407390+20↑j
.text:004073DA                 and     ds:25202C73h, ah
.text:004073E0                 jnb     short near ptr loc_40740A+4
.text:004073E2                 and     ds:250A2C73h, ah
.text:004073E8                 jnb     short near ptr loc_407415+1
.text:004073EA                 and     ds:25202C73h, ah
.text:004073F0                 jnb     short near ptr loc_40741A+4
.text:004073F2                 and     ds:250A2C73h, ah
.text:004073F8                 jnb     short near ptr loc_407422+4
.text:004073FA
.text:004073FA loc_4073FA:                             ; CODE XREF: sub_407390+1↑j
.text:004073FA                 and     [ecx+6Eh], ah
.text:004073FD                 and     fs:0A2E73h, ah
.text:00407404
.text:00407404 loc_407404:                             ; CODE XREF: sub_407390+3↑j
.text:00407404                 lea     esi, [esi+0]
.text:0040740A
.text:0040740A loc_40740A:                             ; CODE XREF: sub_4073D0+10↑j
.text:0040740A                 lea     edi, [edi+0]
.text:00407410
.text:00407410 loc_407410:                             ; DATA XREF: sub_407460:def_4074CD↓o
.text:00407410                 push    edi
.text:00407411                 jb      short near ptr loc_40747B+1
.text:00407413                 jz      short near ptr loc_407488+1
.text:00407415
.text:00407415 loc_407415:                             ; CODE XREF: sub_4073D0+18↑j
.text:00407415                 outs    dx, byte ptr gs:[esi]
.text:00407417                 and     [edx+79h], ah
.text:0040741A
.text:0040741A loc_40741A:                             ; CODE XREF: sub_4073D0+20↑j
.text:0040741A                 and     ds:25202C73h, ah
.text:00407420                 jnb     short near ptr loc_40744C+2
.text:00407422
.text:00407422 loc_407422:                             ; CODE XREF: sub_4073D0+28↑j
.text:00407422                 and     ds:250A2C73h, ah
.text:00407428                 jnb     short near ptr loc_407453+3
.text:0040742A                 and     ds:25202C73h, ah
.text:00407430                 jnb     short near ptr loc_407459+5
.text:00407432                 and     ds:250A2C73h, ah
.text:00407438                 jnb     short near ptr loc_407464+2
.text:0040743A
.text:0040743A loc_40743A:                             ; CODE XREF: sub_4073D0+1↑j
.text:0040743A                 and     ds:61202C73h, ah
.text:00407440                 outsb
.text:00407441                 and     fs:[edi+74h], ch
.text:00407445
.text:00407445 loc_407445:                             ; CODE XREF: sub_4073D0+3↑j
.text:00407445                 push    2E737265h
.text:0040744A                 or      al, [eax]
.text:0040744C
.text:0040744C loc_40744C:                             ; CODE XREF: sub_4073D0+50↑j
.text:0040744C                                         ; DATA XREF: sub_407460+1B5↓o
.text:0040744C                 and     eax, 73252073h
.text:00407451                 or      al, [eax]
.text:00407453
.text:00407453 loc_407453:                             ; CODE XREF: sub_4073D0+58↑j
.text:00407453                 lea     esi, [esi+0]
.text:00407459
.text:00407459 loc_407459:                             ; CODE XREF: sub_4073D0+60↑j
.text:00407459                 lea     edi, [edi+0]
.text:00407459 sub_4073D0      endp ; sp-analysis failed
.text:00407459
.text:00407460
.text:00407460 ; =============== S U B R O U T I N E =======================================
.text:00407460
.text:00407460
.text:00407460 ; int __cdecl sub_407460(FILE *, FILE *, int, int, va_list)
.text:00407460 sub_407460      proc near               ; CODE XREF: sub_407630+2A↓p
.text:00407460
.text:00407460 Stream          = dword ptr -2Ch
.text:00407460 Format          = dword ptr -28h
.text:00407460 ArgList         = dword ptr -24h
.text:00407460 var_20          = dword ptr -20h
.text:00407460 var_1C          = dword ptr -1Ch
.text:00407460 var_14          = dword ptr -14h
.text:00407460 arg_0           = dword ptr  4
.text:00407460 arg_4           = dword ptr  8
.text:00407460 arg_8           = dword ptr  0Ch
.text:00407460 arg_C           = dword ptr  10h
.text:00407460 arg_10          = dword ptr  14h
.text:00407460
.text:00407460                 push    ebp
.text:00407461                 push    edi
.text:00407462                 push    esi
.text:00407463                 push    ebx
.text:00407464
.text:00407464 loc_407464:                             ; CODE XREF: sub_4073D0+68↑j
.text:00407464                 sub     esp, 1Ch
.text:00407467                 xor     ebx, ebx
.text:00407469                 mov     edi, [esp+2Ch+arg_10]
.text:0040746D                 mov     edx, [esp+2Ch+arg_8]
.text:00407471                 mov     esi, [esp+2Ch+arg_0]
.text:00407475                 mov     eax, [edi]
.text:00407477                 mov     ecx, [esp+2Ch+arg_4]
.text:0040747B
.text:0040747B loc_40747B:                             ; CODE XREF: sub_4073D0+41↑j
.text:0040747B                 mov     [esp+2Ch+var_14], edx
.text:0040747F                 mov     ebp, [esp+2Ch+arg_C]
.text:00407483                 lea     edx, [edi+4]
.text:00407486                 test    eax, eax
.text:00407488
.text:00407488 loc_407488:                             ; CODE XREF: sub_4073D0+43↑j
.text:00407488                 jz      short loc_40749C
.text:0040748A                 lea     esi, [esi+0]
.text:00407490
.text:00407490 loc_407490:                             ; CODE XREF: sub_407460+3A↓j
.text:00407490                 mov     eax, edx
.text:00407492                 inc     ebx
.text:00407493                 mov     eax, [eax]
.text:00407495                 add     edx, 4
.text:00407498                 test    eax, eax
.text:0040749A                 jnz     short loc_407490
.text:0040749C
.text:0040749C loc_40749C:                             ; CODE XREF: sub_407460:loc_407488↑j
.text:0040749C                 test    ecx, ecx
.text:0040749E                 jz      loc_40760D
.text:004074A4                 mov     [esp+2Ch+var_1C], ebp
.text:004074A8                 mov     edx, [esp+2Ch+var_14]
.text:004074AC                 mov     [esp+2Ch+ArgList], ecx
.text:004074B0                 mov     [esp+2Ch+Format], offset aSSS ; Format
.text:004074B8                 mov     [esp+2Ch+var_20], edx
.text:004074BC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004074BF                 call    fprintf
.text:004074C4
.text:004074C4 loc_4074C4:                             ; CODE XREF: sub_407460+1C9↓j
.text:004074C4                 cmp     ebx, 9          ; switch 10 cases
.text:004074C7                 ja      def_4074CD      ; jumptable 004074CD default case
.text:004074CD                 jmp     ds:jpt_4074CD[ebx*4] ; switch jump
.text:004074CD ; ---------------------------------------------------------------------------
.text:004074D4 jpt_4074CD      dd offset loc_4074FC    ; DATA XREF: sub_407460+6D↑r
.text:004074D4                 dd offset loc_407501    ; jump table for switch statement
.text:004074D4                 dd offset loc_4075A1
.text:004074D4                 dd offset loc_4075AD
.text:004074D4                 dd offset loc_4075B9
.text:004074D4                 dd offset loc_4075C5
.text:004074D4                 dd offset loc_4075D1
.text:004074D4                 dd offset loc_4075DD
.text:004074D4                 dd offset loc_4075E9
.text:004074D4                 dd offset loc_4075F5
.text:004074FC ; ---------------------------------------------------------------------------
.text:004074FC
.text:004074FC loc_4074FC:                             ; CODE XREF: sub_407460+6D↑j
.text:004074FC                                         ; DATA XREF: sub_407460:jpt_4074CD↑o
.text:004074FC                 call    abort           ; jumptable 004074CD case 0
.text:00407501 ; ---------------------------------------------------------------------------
.text:00407501
.text:00407501 loc_407501:                             ; CODE XREF: sub_407460+6D↑j
.text:00407501                                         ; DATA XREF: sub_407460:jpt_4074CD↑o
.text:00407501                 mov     [esp+2Ch+Stream], 4071AEh ; jumptable 004074CD case 1
.text:00407508                 nop
.text:00407509                 lea     esi, [esi+0]
.text:00407510
.text:00407510 loc_407510:                             ; CODE XREF: sub_407460+148↓j
.text:00407510                                         ; sub_407460+154↓j ...
.text:00407510                 call    ds:libintl_gettext
.text:00407516                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040751A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040751D                 mov     [esp+2Ch+Format], eax ; Format
.text:00407521                 call    vfprintf
.text:00407526                 mov     ebx, [esi+4]
.text:00407529                 dec     ebx
.text:0040752A                 test    ebx, ebx
.text:0040752C                 mov     [esi+4], ebx
.text:0040752F                 js      short loc_40758F
.text:00407531                 mov     edi, [esi]
.text:00407533                 mov     byte ptr [edi], 0Ah
.text:00407536                 inc     dword ptr [esi]
.text:00407538
.text:00407538 loc_407538:                             ; CODE XREF: sub_407460+13F↓j
.text:00407538                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040753C                 mov     edx, Buffer
.text:00407542                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00407545                 call    fputs
.text:0040754A                 mov     ebp, [esi+4]
.text:0040754D                 dec     ebp
.text:0040754E                 test    ebp, ebp
.text:00407550                 mov     [esi+4], ebp
.text:00407553                 js      short loc_40757D
.text:00407555                 mov     ecx, [esi]
.text:00407557                 mov     byte ptr [ecx], 0Ah
.text:0040755A                 inc     dword ptr [esi]
.text:0040755C
.text:0040755C loc_40755C:                             ; CODE XREF: sub_407460+12D↓j
.text:0040755C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00407560                 mov     [esp+2Ch+Stream], offset sub_4071D0
.text:00407567                 call    ds:libintl_gettext
.text:0040756D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00407571                 add     esp, 1Ch
.text:00407574                 pop     ebx
.text:00407575                 pop     esi
.text:00407576                 pop     edi
.text:00407577                 pop     ebp
.text:00407578                 jmp     fputs
.text:0040757D ; ---------------------------------------------------------------------------
.text:0040757D
.text:0040757D loc_40757D:                             ; CODE XREF: sub_407460+F3↑j
.text:0040757D                 mov     [esp+2Ch+Format], esi ; File
.text:00407581                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00407588                 call    _flsbuf
.text:0040758D                 jmp     short loc_40755C
.text:0040758F ; ---------------------------------------------------------------------------
.text:0040758F
.text:0040758F loc_40758F:                             ; CODE XREF: sub_407460+CF↑j
.text:0040758F                 mov     [esp+2Ch+Format], esi ; File
.text:00407593                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040759A                 call    _flsbuf
.text:0040759F                 jmp     short loc_407538
.text:004075A1 ; ---------------------------------------------------------------------------
.text:004075A1
.text:004075A1 loc_4075A1:                             ; CODE XREF: sub_407460+6D↑j
.text:004075A1                                         ; DATA XREF: sub_407460:jpt_4074CD↑o
.text:004075A1                 mov     [esp+2Ch+Stream], offset loc_407268 ; jumptable 004074CD case 2
.text:004075A8                 jmp     loc_407510
.text:004075AD ; ---------------------------------------------------------------------------
.text:004075AD
.text:004075AD loc_4075AD:                             ; CODE XREF: sub_407460+6D↑j
.text:004075AD                                         ; DATA XREF: sub_407460:jpt_4074CD↑o
.text:004075AD                 mov     [esp+2Ch+Stream], offset loc_40727F ; jumptable 004074CD case 3
.text:004075B4                 jmp     loc_407510
.text:004075B9 ; ---------------------------------------------------------------------------
.text:004075B9
.text:004075B9 loc_4075B9:                             ; CODE XREF: sub_407460+6D↑j
.text:004075B9                                         ; DATA XREF: sub_407460:jpt_4074CD↑o
.text:004075B9                 mov     [esp+2Ch+Stream], offset sub_4072B0 ; jumptable 004074CD case 4
.text:004075C0                 jmp     loc_407510
.text:004075C5 ; ---------------------------------------------------------------------------
.text:004075C5
.text:004075C5 loc_4075C5:                             ; CODE XREF: sub_407460+6D↑j
.text:004075C5                                         ; DATA XREF: sub_407460:jpt_4074CD↑o
.text:004075C5                 mov     [esp+2Ch+Stream], offset loc_4072D0 ; jumptable 004074CD case 5
.text:004075CC                 jmp     loc_407510
.text:004075D1 ; ---------------------------------------------------------------------------
.text:004075D1
.text:004075D1 loc_4075D1:                             ; CODE XREF: sub_407460+6D↑j
.text:004075D1                                         ; DATA XREF: sub_407460:jpt_4074CD↑o
.text:004075D1                 mov     [esp+2Ch+Stream], offset sub_407310 ; jumptable 004074CD case 6
.text:004075D8                 jmp     loc_407510
.text:004075DD ; ---------------------------------------------------------------------------
.text:004075DD
.text:004075DD loc_4075DD:                             ; CODE XREF: sub_407460+6D↑j
.text:004075DD                                         ; DATA XREF: sub_407460:jpt_4074CD↑o
.text:004075DD                 mov     [esp+2Ch+Stream], offset sub_407350 ; jumptable 004074CD case 7
.text:004075E4                 jmp     loc_407510
.text:004075E9 ; ---------------------------------------------------------------------------
.text:004075E9
.text:004075E9 loc_4075E9:                             ; CODE XREF: sub_407460+6D↑j
.text:004075E9                                         ; DATA XREF: sub_407460:jpt_4074CD↑o
.text:004075E9                 mov     [esp+2Ch+Stream], offset sub_407390 ; jumptable 004074CD case 8
.text:004075F0                 jmp     loc_407510
.text:004075F5 ; ---------------------------------------------------------------------------
.text:004075F5
.text:004075F5 loc_4075F5:                             ; CODE XREF: sub_407460+6D↑j
.text:004075F5                                         ; DATA XREF: sub_407460:jpt_4074CD↑o
.text:004075F5                 mov     [esp+2Ch+Stream], offset sub_4073D0 ; jumptable 004074CD case 9
.text:004075FC                 jmp     loc_407510
.text:00407601 ; ---------------------------------------------------------------------------
.text:00407601
.text:00407601 def_4074CD:                             ; CODE XREF: sub_407460+67↑j
.text:00407601                 mov     [esp+2Ch+Stream], offset loc_407410 ; jumptable 004074CD default case
.text:00407608                 jmp     loc_407510
.text:0040760D ; ---------------------------------------------------------------------------
.text:0040760D
.text:0040760D loc_40760D:                             ; CODE XREF: sub_407460+3E↑j
.text:0040760D                 mov     [esp+2Ch+var_20], ebp
.text:00407611                 mov     ecx, [esp+2Ch+var_14]
.text:00407615                 mov     [esp+2Ch+Format], offset loc_40744C ; Format
.text:0040761D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407620                 mov     [esp+2Ch+ArgList], ecx
.text:00407624                 call    fprintf
.text:00407629                 jmp     loc_4074C4
.text:00407629 sub_407460      endp
.text:00407629
.text:00407629 ; ---------------------------------------------------------------------------
.text:0040762E                 align 10h
.text:00407630
.text:00407630 ; =============== S U B R O U T I N E =======================================
.text:00407630
.text:00407630
.text:00407630 ; int __cdecl sub_407630(FILE *, FILE *, int, int, char)
.text:00407630 sub_407630      proc near               ; CODE XREF: sub_402430+1DF↑p
.text:00407630
.text:00407630 var_1C          = dword ptr -1Ch
.text:00407630 var_18          = dword ptr -18h
.text:00407630 var_14          = dword ptr -14h
.text:00407630 var_10          = dword ptr -10h
.text:00407630 var_C           = dword ptr -0Ch
.text:00407630 arg_0           = dword ptr  4
.text:00407630 arg_4           = dword ptr  8
.text:00407630 arg_8           = dword ptr  0Ch
.text:00407630 arg_C           = dword ptr  10h
.text:00407630 arg_10          = byte ptr  14h
.text:00407630
.text:00407630                 sub     esp, 1Ch
.text:00407633                 mov     edx, [esp+1Ch+arg_C]
.text:00407637                 lea     ecx, [esp+1Ch+arg_10]
.text:0040763B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040763F                 mov     ecx, [esp+1Ch+arg_8]
.text:00407643                 mov     [esp+1Ch+var_10], edx ; int
.text:00407647                 mov     edx, [esp+1Ch+arg_4]
.text:0040764B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040764F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00407653                 mov     edx, [esp+1Ch+arg_0]
.text:00407657                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040765A                 call    sub_407460
.text:0040765F                 add     esp, 1Ch
.text:00407662                 retn
.text:00407662 sub_407630      endp
.text:00407662
.text:00407662 ; ---------------------------------------------------------------------------
.text:00407663                 align 10h
.text:00407670 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_407690+3↓o
.text:00407681 ; const char aS_2[]
.text:00407681 aS_2            db '%s',0               ; DATA XREF: sub_407690+10↓o
.text:00407684                 align 10h
.text:00407690
.text:00407690 ; =============== S U B R O U T I N E =======================================
.text:00407690
.text:00407690 ; Attributes: noreturn
.text:00407690
.text:00407690 sub_407690      proc near               ; CODE XREF: sub_402430:loc_402CD7↑p
.text:00407690                                         ; .text:loc_406949↑p ...
.text:00407690
.text:00407690 Code            = dword ptr -1Ch
.text:00407690 ErrorMessage    = dword ptr -18h
.text:00407690 var_14          = dword ptr -14h
.text:00407690 var_10          = byte ptr -10h
.text:00407690
.text:00407690                 sub     esp, 1Ch
.text:00407693                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040769A                 call    ds:libintl_gettext
.text:004076A0                 mov     [esp+1Ch+var_14], offset aS_2 ; "%s"
.text:004076A8                 mov     edx, Code
.text:004076AE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004076B6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004076BA                 mov     [esp+1Ch+Code], edx ; Code
.text:004076BD                 call    sub_40BE20
.text:004076C2                 call    abort
.text:004076C2 sub_407690      endp
.text:004076C2
.text:004076C2 ; ---------------------------------------------------------------------------
.text:004076C7                 align 10h
.text:004076D0
.text:004076D0 ; =============== S U B R O U T I N E =======================================
.text:004076D0
.text:004076D0
.text:004076D0 ; int __cdecl sub_4076D0(int, int, char *, int, int)
.text:004076D0 sub_4076D0      proc near               ; CODE XREF: sub_402430+CB↑p
.text:004076D0
.text:004076D0 var_1C          = dword ptr -1Ch
.text:004076D0 var_18          = dword ptr -18h
.text:004076D0 var_14          = dword ptr -14h
.text:004076D0 var_10          = dword ptr -10h
.text:004076D0 var_C           = dword ptr -0Ch
.text:004076D0 var_8           = dword ptr -8
.text:004076D0 var_4           = dword ptr -4
.text:004076D0 arg_0           = dword ptr  4
.text:004076D0 arg_4           = dword ptr  8
.text:004076D0 arg_8           = dword ptr  0Ch
.text:004076D0 arg_C           = dword ptr  10h
.text:004076D0 arg_10          = dword ptr  14h
.text:004076D0
.text:004076D0                 sub     esp, 1Ch
.text:004076D3                 mov     edx, [esp+1Ch+arg_C]
.text:004076D7                 mov     [esp+1Ch+var_4], 0 ; int
.text:004076DF                 mov     ecx, [esp+1Ch+arg_10]
.text:004076E3                 mov     [esp+1Ch+var_8], 0 ; int
.text:004076EB                 mov     [esp+1Ch+var_10], edx ; int
.text:004076EF                 mov     edx, [esp+1Ch+arg_4]
.text:004076F3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004076F7                 mov     ecx, [esp+1Ch+arg_8]
.text:004076FB                 mov     [esp+1Ch+var_18], edx ; int
.text:004076FF                 mov     edx, [esp+1Ch+arg_0]
.text:00407703                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00407707                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040770A                 call    sub_406120
.text:0040770F                 add     esp, 1Ch
.text:00407712                 retn
.text:00407712 sub_4076D0      endp
.text:00407712
.text:00407712 ; ---------------------------------------------------------------------------
.text:00407713                 align 10h
.text:00407720                 sub     esp, 2Ch
.text:00407723                 mov     edx, [esp+44h]
.text:00407727                 mov     dword ptr [esp+18h], 0
.text:0040772F                 mov     ecx, [esp+40h]
.text:00407733                 mov     dword ptr [esp+14h], 0
.text:0040773B                 mov     [esp+1Ch], edx
.text:0040773F                 mov     edx, [esp+3Ch]
.text:00407743                 mov     [esp+10h], ecx
.text:00407747                 mov     ecx, [esp+38h]
.text:0040774B                 mov     [esp+0Ch], edx
.text:0040774F                 mov     edx, [esp+34h]
.text:00407753                 mov     [esp+8], ecx
.text:00407757                 mov     [esp+4], edx
.text:0040775B                 mov     edx, [esp+30h]
.text:0040775F                 mov     [esp], edx
.text:00407762                 call    sub_405590
.text:00407767                 add     esp, 2Ch
.text:0040776A                 retn
.text:0040776A ; ---------------------------------------------------------------------------
.text:0040776B                 align 10h
.text:00407770                 sub     esp, 1Ch
.text:00407773                 mov     edx, [esp+2Ch]
.text:00407777                 mov     dword ptr [esp+18h], 0
.text:0040777F                 mov     ecx, [esp+30h]
.text:00407783                 mov     dword ptr [esp+14h], 1
.text:0040778B                 mov     [esp+0Ch], edx
.text:0040778F                 mov     edx, [esp+24h]
.text:00407793                 mov     [esp+10h], ecx
.text:00407797                 mov     ecx, [esp+28h]
.text:0040779B                 mov     [esp+4], edx
.text:0040779F                 mov     edx, [esp+20h]
.text:004077A3                 mov     [esp+8], ecx
.text:004077A7                 mov     [esp], edx
.text:004077AA                 call    sub_406120
.text:004077AF                 add     esp, 1Ch
.text:004077B2                 retn
.text:004077B2 ; ---------------------------------------------------------------------------
.text:004077B3                 align 10h
.text:004077C0                 sub     esp, 2Ch
.text:004077C3                 mov     edx, [esp+44h]
.text:004077C7                 mov     dword ptr [esp+18h], 0
.text:004077CF                 mov     ecx, [esp+40h]
.text:004077D3                 mov     dword ptr [esp+14h], 1
.text:004077DB                 mov     [esp+1Ch], edx
.text:004077DF                 mov     edx, [esp+3Ch]
.text:004077E3                 mov     [esp+10h], ecx
.text:004077E7                 mov     ecx, [esp+38h]
.text:004077EB                 mov     [esp+0Ch], edx
.text:004077EF                 mov     edx, [esp+34h]
.text:004077F3                 mov     [esp+8], ecx
.text:004077F7                 mov     [esp+4], edx
.text:004077FB                 mov     edx, [esp+30h]
.text:004077FF                 mov     [esp], edx
.text:00407802                 call    sub_405590
.text:00407807                 add     esp, 2Ch
.text:0040780A                 retn
.text:0040780A ; ---------------------------------------------------------------------------
.text:0040780B                 align 10h
.text:00407810                 mov     edx, [esp+4]
.text:00407814                 mov     ds:dword_41F060, edx
.text:0040781A                 retn
.text:0040781A ; ---------------------------------------------------------------------------
.text:0040781B aWriteError     db 'write error',0      ; DATA XREF: sub_407840:loc_407889↓o
.text:00407827 ; const char aSS[]
.text:00407827 aSS             db '%s: %s',0           ; DATA XREF: sub_407840+77↓o
.text:0040782E ; const char aS_5[]
.text:0040782E aS_5            db '%s',0               ; DATA XREF: sub_407840+A0↓o
.text:00407831 ; ---------------------------------------------------------------------------
.text:00407831                 jmp     short sub_407840
.text:00407831 ; ---------------------------------------------------------------------------
.text:00407833                 align 10h
.text:00407840
.text:00407840 ; =============== S U B R O U T I N E =======================================
.text:00407840
.text:00407840
.text:00407840 ; void __cdecl sub_407840()
.text:00407840 sub_407840      proc near               ; CODE XREF: .text:00407831↑j
.text:00407840                                         ; DATA XREF: sub_402430+9C↑o
.text:00407840
.text:00407840 Stream          = dword ptr -2Ch
.text:00407840 ErrorMessage    = dword ptr -28h
.text:00407840 var_24          = dword ptr -24h
.text:00407840 var_20          = byte ptr -20h
.text:00407840 var_1C          = dword ptr -1Ch
.text:00407840 var_9           = byte ptr -9
.text:00407840
.text:00407840                 push    esi
.text:00407841                 push    ebx
.text:00407842                 sub     esp, 24h
.text:00407845                 mov     edx, ds:_iob
.text:0040784B                 mov     ecx, [edx+2Ch]
.text:0040784E                 lea     esi, [edx+20h]
.text:00407851                 shr     ecx, 5
.text:00407854                 mov     bl, cl
.text:00407856                 mov     ecx, [edx+20h]
.text:00407859                 and     bl, 1
.text:0040785C                 cmp     ecx, [esi+8]
.text:0040785F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407862                 setz    [esp+2Ch+var_9]
.text:00407867                 call    fclose
.text:0040786C                 test    eax, eax
.text:0040786E                 setnz   al
.text:00407871                 test    bl, bl
.text:00407873                 jnz     loc_407903
.text:00407879                 test    al, al
.text:0040787B                 jz      short loc_4078D0
.text:0040787D
.text:0040787D loc_40787D:                             ; CODE XREF: sub_407840+CD↓j
.text:0040787D                 call    _errno
.text:00407882                 mov     esi, [eax]
.text:00407884
.text:00407884 loc_407884:                             ; CODE XREF: sub_407840+C7↓j
.text:00407884                 cmp     esi, 9
.text:00407887                 jz      short loc_4078F6
.text:00407889
.text:00407889 loc_407889:                             ; CODE XREF: sub_407840+B8↓j
.text:00407889                                         ; sub_407840+C1↓j
.text:00407889                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00407890                 call    ds:libintl_gettext
.text:00407896                 mov     ebx, eax
.text:00407898                 mov     eax, ds:dword_41F060
.text:0040789D                 test    eax, eax
.text:0040789F                 jz      short loc_4078D6
.text:004078A1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004078A4                 call    sub_40BB60
.text:004078A9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004078AD                 mov     edx, Code
.text:004078B3                 mov     [esp+2Ch+var_1C], ebx
.text:004078B7                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:004078BF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004078C3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004078C6                 call    sub_40BE20
.text:004078CB                 nop
.text:004078CC                 lea     esi, [esi+0]
.text:004078D0
.text:004078D0 loc_4078D0:                             ; CODE XREF: sub_407840+3B↑j
.text:004078D0                                         ; sub_407840+B4↓j ...
.text:004078D0                 add     esp, 24h
.text:004078D3                 pop     ebx
.text:004078D4                 pop     esi
.text:004078D5                 retn
.text:004078D6 ; ---------------------------------------------------------------------------
.text:004078D6
.text:004078D6 loc_4078D6:                             ; CODE XREF: sub_407840+5F↑j
.text:004078D6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004078DA                 mov     ebx, Code
.text:004078E0                 mov     [esp+2Ch+var_24], offset aS_5 ; "%s"
.text:004078E8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004078EC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004078EF                 call    sub_40BE20
.text:004078F4                 jmp     short loc_4078D0
.text:004078F6 ; ---------------------------------------------------------------------------
.text:004078F6
.text:004078F6 loc_4078F6:                             ; CODE XREF: sub_407840+47↑j
.text:004078F6                 test    bl, bl
.text:004078F8                 jnz     short loc_407889
.text:004078FA                 cmp     [esp+2Ch+var_9], 0
.text:004078FF                 jnz     short loc_4078D0
.text:00407901                 jmp     short loc_407889
.text:00407903 ; ---------------------------------------------------------------------------
.text:00407903
.text:00407903 loc_407903:                             ; CODE XREF: sub_407840+33↑j
.text:00407903                 xor     esi, esi
.text:00407905                 test    al, al
.text:00407907                 jz      loc_407884
.text:0040790D                 jmp     loc_40787D
.text:0040790D sub_407840      endp
.text:0040790D
.text:0040790D ; ---------------------------------------------------------------------------
.text:00407912                 align 10h
.text:00407920 ; const char aPosix2Version[]
.text:00407920 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: sub_407930+C↓o
.text:00407930
.text:00407930 ; =============== S U B R O U T I N E =======================================
.text:00407930
.text:00407930
.text:00407930 sub_407930      proc near               ; CODE XREF: sub_402430+4D↑p
.text:00407930
.text:00407930 VarName         = dword ptr -1Ch
.text:00407930 EndPtr          = dword ptr -18h
.text:00407930 Radix           = dword ptr -14h
.text:00407930 var_8           = dword ptr -8
.text:00407930 var_4           = dword ptr -4
.text:00407930
.text:00407930                 sub     esp, 1Ch
.text:00407933                 mov     [esp+1Ch+var_4], ebx
.text:00407937                 mov     ebx, 30A29h
.text:0040793C                 mov     [esp+1Ch+VarName], offset aPosix2Version ; "_POSIX2_VERSION"
.text:00407943                 call    getenv
.text:00407948                 test    eax, eax
.text:0040794A                 jz      short loc_407951
.text:0040794C                 cmp     byte ptr [eax], 0
.text:0040794F                 jnz     short loc_407960
.text:00407951
.text:00407951 loc_407951:                             ; CODE XREF: sub_407930+1A↑j
.text:00407951                                         ; sub_407930+4F↓j ...
.text:00407951                 mov     eax, ebx
.text:00407953                 mov     ebx, [esp+1Ch+var_4]
.text:00407957                 add     esp, 1Ch
.text:0040795A                 retn
.text:0040795A ; ---------------------------------------------------------------------------
.text:0040795B                 align 10h
.text:00407960
.text:00407960 loc_407960:                             ; CODE XREF: sub_407930+1F↑j
.text:00407960                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:00407968                 lea     ecx, [esp+1Ch+var_8]
.text:0040796C                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:00407970                 mov     [esp+1Ch+VarName], eax ; String
.text:00407973                 call    strtol
.text:00407978                 mov     ecx, [esp+1Ch+var_8]
.text:0040797C                 cmp     byte ptr [ecx], 0
.text:0040797F                 jnz     short loc_407951
.text:00407981                 mov     ebx, eax
.text:00407983                 jmp     short loc_407951
.text:00407983 sub_407930      endp
.text:00407983
.text:00407983 ; ---------------------------------------------------------------------------
.text:00407985                 align 10h
.text:00407990 byte_407990     db 0                    ; DATA XREF: sub_407DC0+1A3↓r
.text:00407991                 db 3 dup(2)
.text:00407994                 dd 0Ah dup(2020202h), 19020218h, 2 dup(2020202h), 2170202h
.text:00407994                 dd 2020202h, 2020216h, 2Fh dup(2020202h), 4030201h, 8070605h
.text:00407994                 dd 0C0B0A09h, 100F0E0Dh, 14131211h, 26748D15h, 27BC8D00h
.text:00407994                 dd 0
.text:00407AB0 byte_407AB0     db 0                    ; DATA XREF: sub_407DC0:def_407FC6↓r
.text:00407AB1                 db 1Ah, 2 dup(1Bh)
.text:00407AB4                 dd 1E1D1D1Ch, 1E1E1E1Eh, 1F1F1E1Eh, 201F1F1Fh, 21212120h
.text:00407AB4                 dd 22222221h, 23232322h, 23232323h, 24242323h, 6 dup(25252525h)
.text:00407AB4                 dd 26262525h, 28282727h, 2B2A2A29h, 9090902Bh, 4 dup(90909090h)
.text:00407B10 byte_407B10     db 0                    ; DATA XREF: sub_407DC0:loc_407F8F↓r
.text:00407B11                 db 2, 2 dup(1)
.text:00407B14                 dd 1020002h, 1010101h, 4020101h, 1070605h, 1030102h, 2020102h
.text:00407B14                 dd 3050302h, 4020303h, 1020302h, 5 dup(1020202h), 2020202h
.text:00407B14                 dd 1010102h, 1010101h, 20001h, 90909001h, 4 dup(90909090h)
.text:00407B70 byte_407B70     db 5                    ; DATA XREF: sub_407DC0:loc_407F80↓r
.text:00407B71                 db 2 dup(0), 2
.text:00407B74                 dd 44474503h, 43420446h, 17331901h, 3B1337h, 2B41002Fh
.text:00407B74                 dd 480015h, 8070600h, 0C0A0B09h, 141A0D27h, 301B2200h
.text:00407B74                 dd 3C2C3834h, 32491828h, 3E2E3A36h, 35311C2Ah, 2D24390Eh
.text:00407B74                 dd 293Dh
.text:00407BB4 dword_407BB4    dd 26403F00h, 16000021h, 4B1F2520h, 4C4A231Dh, 0F0049h
.text:00407BB4                                         ; DATA XREF: sub_407DC0:loc_408154↓r
.text:00407BB4                 dd 491E4B10h, 2FF1211h, 1E1D0403h, 2221201Fh, 0A092423h
.text:00407BB4                 dd 564B250Bh, 4 dup(90909090h)
.text:00407BF0 byte_407BF0     db 0F3h                 ; DATA XREF: sub_407DC0:loc_407F2D↓r
.text:00407BF0                                         ; sub_407DC0:loc_408890↓r
.text:00407BF1                 db 2Ah, 2Bh, 0BEh
.text:00407BF4                 dd 0BEBEBE10h, 0BEBEBEBEh, 0BEBE1DBEh, 0FCBE36BEh, 0BEBE21BEh
.text:00407BF4                 dd 31FB27FEh, 0BEBEBE32h, 0BEBEBEBEh, 0BEBEBE3Fh, 0BEBE2C33h
.text:00407BF4                 dd 0BEBEBEBEh, 0BE2FBEBEh, 2 dup(0BEBEBEBEh), 0BE26BEBEh
.text:00407BF4                 dd 3035BEBEh
.text:00407C34 dword_407C34    dd 0BEBEBE37h, 0BE3938BEh, 0FABEBEBEh, 0BEBEBE34h, 3BBE152Fh
.text:00407C34                                         ; DATA XREF: sub_407DC0+36D↓r
.text:00407C34                 dd 2FBE29BEh, 4 dup(0BEBEBEBEh), 0EFBFBEF4h, 4 dup(90909090h)
.text:00407C70 byte_407C70     db 39h                  ; DATA XREF: sub_407DC0:loc_408163↓r
.text:00407C70                                         ; sub_407DC0:loc_4088F0↓r ...
.text:00407C71                 db 3Ah, 31h, 3Bh
.text:00407C74                 dd 3E3D3C53h, 4140013Fh, 29284254h, 58435532h, 0F0E0D44h
.text:00407C74                 dd 125D1110h, 16151413h, 1A191817h, 2B2A1C1Bh, 0C082C06h
.text:00407C74                 dd 342E332Dh, 5335302Fh, 38372636h, 5B274D4Ch, 8070605h
.text:00407C74                 dd 4F474645h, 4E4A4849h, 5150595Ch, 905A5752h, 4 dup(90909090h)
.text:00407CD0 byte_407CD0     db 5                    ; DATA XREF: sub_407DC0+1B1↓r
.text:00407CD0                                         ; sub_407DC0+389↓r ...
.text:00407CD1                 db 6, 4, 8
.text:00407CD4                 dd 0C0B0A0Ah, 100F160Dh, 13121212h, 54171712h, 7060519h
.text:00407CD4                 dd 0B5B0908h, 0F0E0D0Ch, 13121110h, 6051514h, 150813h
.text:00407CD4                 dd 80D060Bh, 0A0B100Fh, 100F180Dh, 12041312h, 15141312h
.text:00407CD4                 dd 13030F0Fh, 12171218h, 13135559h, 90131913h, 4 dup(90909090h)
.text:00407CD4                 dd 1C1B1600h, 1413121Dh, 28272615h, 7060500h, 0C0B0908h
.text:00407CD4                 dd 100F0E0Dh, 14131211h, 201F1E15h, 24232221h, 4182925h
.text:00407CD4                 dd 6051312h, 0F0D0B08h, 6120410h, 0F0D0B08h, 8060510h
.text:00407CD4                 dd 0D0C0B0Ah, 1712100Fh, 30F0F19h, 2A171812h, 13121312h
.text:00407CD4                 dd 0A131313h, 192B1712h, 1213282Ah
.text:00407D8C                 db 2Bh, 2Ah
.text:00407D8E aSyntaxError    db 'syntax error',0     ; DATA XREF: sub_407DC0:loc_408960↓o
.text:00407D9B aParserStackOve db 'parser stack overflow',0
.text:00407D9B                                         ; DATA XREF: sub_407DC0:loc_408A16↓o
.text:00407DB1 ; ---------------------------------------------------------------------------
.text:00407DB1                 jmp     short sub_407DC0
.text:00407DB1 ; ---------------------------------------------------------------------------
.text:00407DB3                 align 10h
.text:00407DC0
.text:00407DC0 ; =============== S U B R O U T I N E =======================================
.text:00407DC0
.text:00407DC0
.text:00407DC0 sub_407DC0      proc near               ; CODE XREF: .text:00407DB1↑j
.text:00407DC0                                         ; sub_4097F0+22D↓p
.text:00407DC0
.text:00407DC0 Size            = dword ptr -1ACh
.text:00407DC0 Src             = dword ptr -1A8h
.text:00407DC0 var_1A4         = dword ptr -1A4h
.text:00407DC0 var_1A0         = dword ptr -1A0h
.text:00407DC0 var_190         = dword ptr -190h
.text:00407DC0 var_18C         = dword ptr -18Ch
.text:00407DC0 var_188         = dword ptr -188h
.text:00407DC0 var_180         = dword ptr -180h
.text:00407DC0 Block           = dword ptr -178h
.text:00407DC0 var_174         = dword ptr -174h
.text:00407DC0 var_170         = dword ptr -170h
.text:00407DC0 var_16C         = dword ptr -16Ch
.text:00407DC0 var_168         = dword ptr -168h
.text:00407DC0 var_164         = dword ptr -164h
.text:00407DC0 var_160         = dword ptr -160h
.text:00407DC0 var_15C         = dword ptr -15Ch
.text:00407DC0 var_158         = dword ptr -158h
.text:00407DC0 var_154         = dword ptr -154h
.text:00407DC0 var_14C         = byte ptr -14Ch
.text:00407DC0 var_5C          = byte ptr -5Ch
.text:00407DC0 var_2C          = dword ptr -2Ch
.text:00407DC0 var_28          = dword ptr -28h
.text:00407DC0 var_24          = dword ptr -24h
.text:00407DC0 arg_0           = dword ptr  4
.text:00407DC0
.text:00407DC0                 push    ebp
.text:00407DC1                 xor     ebp, ebp
.text:00407DC3                 push    edi
.text:00407DC4                 push    esi
.text:00407DC5                 push    ebx
.text:00407DC6                 sub     esp, 19Ch
.text:00407DCC                 lea     edx, [esp+1ACh+var_5C]
.text:00407DD3                 mov     [esp+1ACh+var_168], edx
.text:00407DD7                 lea     ecx, [esp+1ACh+var_14C]
.text:00407DDB                 mov     edi, edx
.text:00407DDD                 mov     [esp+1ACh+var_16C], ecx
.text:00407DE1                 mov     ebx, ecx
.text:00407DE3                 mov     [esp+1ACh+var_170], 14h
.text:00407DEB                 mov     [esp+1ACh+var_164], 0
.text:00407DF3                 mov     [esp+1ACh+var_160], 0FFFFFFFEh
.text:00407DFB
.text:00407DFB loc_407DFB:                             ; CODE XREF: sub_407DC0+39E↓j
.text:00407DFB                 mov     [edi], bp
.text:00407DFE                 mov     edx, [esp+1ACh+var_170]
.text:00407E02                 mov     ecx, [esp+1ACh+var_168]
.text:00407E06                 add     edx, edx
.text:00407E08                 lea     esi, [edx+ecx-2]
.text:00407E0C                 cmp     esi, edi
.text:00407E0E                 ja      loc_407F2D
.text:00407E14                 sub     edi, ecx
.text:00407E16                 sar     edi, 1
.text:00407E18                 inc     edi
.text:00407E19                 cmp     [esp+1ACh+var_170], 13h
.text:00407E1E                 mov     [esp+1ACh+var_174], edi
.text:00407E22                 ja      loc_408A16
.text:00407E28                 mov     [esp+1ACh+var_170], edx
.text:00407E2C                 cmp     edx, 14h
.text:00407E2F                 jbe     short loc_407E39
.text:00407E31                 mov     [esp+1ACh+var_170], 14h
.text:00407E39
.text:00407E39 loc_407E39:                             ; CODE XREF: sub_407DC0+6F↑j
.text:00407E39                 mov     ebx, [esp+1ACh+var_170]
.text:00407E3D                 mov     eax, [esp+1ACh+var_170]
.text:00407E41                 mov     edi, [esp+1ACh+var_168]
.text:00407E45                 shl     ebx, 3
.text:00407E48                 sub     ebx, eax
.text:00407E4A                 lea     ecx, [ebx+ebx+0Bh]
.text:00407E4E                 mov     [esp+1ACh+Block], edi
.text:00407E52                 mov     [esp+1ACh+Size], ecx ; Size
.text:00407E55                 call    malloc
.text:00407E5A                 mov     [esp+1ACh+var_180], eax
.text:00407E5E                 test    eax, eax
.text:00407E60                 jz      loc_408A16
.text:00407E66                 mov     ebx, [esp+1ACh+var_174]
.text:00407E6A                 mov     esi, [esp+1ACh+var_168]
.text:00407E6E                 mov     eax, [esp+1ACh+var_180]
.text:00407E72                 add     ebx, ebx
.text:00407E74                 mov     [esp+1ACh+var_1A4], ebx ; Size
.text:00407E78                 mov     [esp+1ACh+Src], esi ; Src
.text:00407E7C                 mov     [esp+1ACh+Size], eax ; void *
.text:00407E7F                 call    memcpy
.text:00407E84                 mov     edx, [esp+1ACh+var_170]
.text:00407E88                 mov     eax, 0AAAAAAABh
.text:00407E8D                 mov     edi, [esp+1ACh+var_180]
.text:00407E91                 lea     ecx, [edx+edx+0Bh]
.text:00407E95                 mul     ecx
.text:00407E97                 mov     ecx, [esp+1ACh+var_174]
.text:00407E9B                 mov     [esp+1ACh+var_168], edi
.text:00407E9F                 shr     edx, 3
.text:00407EA2                 add     ebx, ecx
.text:00407EA4                 lea     esi, [edx+edx*2]
.text:00407EA7                 lea     edx, ds:0[ebx*4]
.text:00407EAE                 lea     eax, [edi+esi*4]
.text:00407EB1                 mov     [esp+1ACh+var_180], eax
.text:00407EB5                 cmp     edx, 7
.text:00407EB8                 mov     edi, eax
.text:00407EBA                 mov     eax, [esp+1ACh+var_16C]
.text:00407EBE                 jbe     short loc_407ED4
.text:00407EC0                 test    byte ptr [esp+1ACh+var_180], 4
.text:00407EC5                 jz      short loc_407ED4
.text:00407EC7                 mov     esi, [eax]
.text:00407EC9                 sub     edx, 4
.text:00407ECC                 add     eax, 4
.text:00407ECF                 mov     [edi], esi
.text:00407ED1                 add     edi, 4
.text:00407ED4
.text:00407ED4 loc_407ED4:                             ; CODE XREF: sub_407DC0+FE↑j
.text:00407ED4                                         ; sub_407DC0+105↑j
.text:00407ED4                 cld
.text:00407ED5                 mov     ecx, edx
.text:00407ED7                 shr     ecx, 2
.text:00407EDA                 mov     esi, eax
.text:00407EDC                 rep movsd
.text:00407EDE                 lea     edi, [esp+1ACh+var_5C]
.text:00407EE5                 mov     esi, [esp+1ACh+var_170]
.text:00407EE9                 mov     edx, [esp+1ACh+var_180]
.text:00407EED                 add     esi, esi
.text:00407EEF                 cmp     [esp+1ACh+Block], edi
.text:00407EF3                 mov     [esp+1ACh+var_16C], edx
.text:00407EF7                 jz      short loc_407F05
.text:00407EF9                 mov     eax, [esp+1ACh+Block]
.text:00407EFD                 mov     [esp+1ACh+Size], eax ; Block
.text:00407F00                 call    free
.text:00407F05
.text:00407F05 loc_407F05:                             ; CODE XREF: sub_407DC0+137↑j
.text:00407F05                 mov     eax, [esp+1ACh+var_174]
.text:00407F09                 mov     edx, [esp+1ACh+var_168]
.text:00407F0D                 mov     ebx, [esp+1ACh+var_174]
.text:00407F11                 mov     ecx, [esp+1ACh+var_16C]
.text:00407F15                 add     eax, eax
.text:00407F17                 lea     edi, [eax+edx-2]
.text:00407F1B                 add     eax, ebx
.text:00407F1D                 lea     ebx, [ecx+eax*4-0Ch]
.text:00407F21                 lea     ecx, [esi+edx-2]
.text:00407F25                 cmp     ecx, edi
.text:00407F27                 jbe     loc_4088C1
.text:00407F2D
.text:00407F2D loc_407F2D:                             ; CODE XREF: sub_407DC0+4E↑j
.text:00407F2D                 movsx   esi, ss:byte_407BF0[ebp]
.text:00407F34                 cmp     esi, 0FFFFFFBEh
.text:00407F37                 jz      short loc_407F80
.text:00407F39                 cmp     [esp+1ACh+var_160], 0FFFFFFFEh
.text:00407F3E                 jz      loc_4089F3
.text:00407F44
.text:00407F44 loc_407F44:                             ; CODE XREF: sub_407DC0+C51↓j
.text:00407F44                 mov     edx, [esp+1ACh+var_160]
.text:00407F48                 test    edx, edx
.text:00407F4A                 jle     loc_4089E4
.text:00407F50                 cmp     [esp+1ACh+var_160], 114h
.text:00407F58                 mov     edx, 2
.text:00407F5D                 ja      short loc_407F6A
.text:00407F5F                 mov     eax, [esp+1ACh+var_160]
.text:00407F63                 movzx   edx, ds:byte_407990[eax]
.text:00407F6A
.text:00407F6A loc_407F6A:                             ; CODE XREF: sub_407DC0+19D↑j
.text:00407F6A                                         ; sub_407DC0+C2E↓j
.text:00407F6A                 add     esi, edx
.text:00407F6C                 cmp     esi, 4Eh ; 'N'
.text:00407F6F                 ja      short loc_407F80
.text:00407F71                 movzx   ecx, ds:byte_407CD0[esi]
.text:00407F78                 cmp     ecx, edx
.text:00407F7A                 jz      loc_40897C
.text:00407F80
.text:00407F80 loc_407F80:                             ; CODE XREF: sub_407DC0+177↑j
.text:00407F80                                         ; sub_407DC0+1AF↑j
.text:00407F80                 movzx   esi, ss:byte_407B70[ebp]
.text:00407F87                 test    esi, esi
.text:00407F89                 jz      loc_408866
.text:00407F8F
.text:00407F8F loc_407F8F:                             ; CODE XREF: sub_407DC0+C1F↓j
.text:00407F8F                 movzx   ebp, ds:byte_407B10[esi]
.text:00407F96                 mov     edx, 1
.text:00407F9B                 sub     edx, ebp
.text:00407F9D                 lea     eax, [edx+edx*2]
.text:00407FA0                 shl     eax, 2
.text:00407FA3                 mov     ecx, [ebx+eax]
.text:00407FA6                 mov     [esp+1ACh+var_15C], ecx
.text:00407FAA                 mov     ecx, [ebx+eax+4]
.text:00407FAE                 mov     [esp+1ACh+var_158], ecx
.text:00407FB2                 mov     ecx, [ebx+eax+8]
.text:00407FB6                 lea     eax, [esi-4]    ; switch 73 cases
.text:00407FB9                 cmp     eax, 48h
.text:00407FBC                 mov     [esp+1ACh+var_154], ecx
.text:00407FC0                 ja      def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00407FC6                 jmp     ds:jpt_407FC6[eax*4] ; switch jump
.text:00407FC6 ; ---------------------------------------------------------------------------
.text:00407FCD                 align 10h
.text:00407FD0 jpt_407FC6      dd offset loc_4080F4, offset def_407FC6, offset def_407FC6
.text:00407FD0                                         ; DATA XREF: sub_407DC0+206↑r
.text:00407FD0                 dd offset loc_40816C, offset loc_408178, offset loc_408184 ; jump table for switch statement
.text:00407FD0                 dd offset loc_408193, offset loc_4081A2, offset loc_4081B1
.text:00407FD0                 dd offset def_407FC6, offset loc_4081C0, offset loc_4081EC
.text:00407FD0                 dd offset loc_40820F, offset loc_408268, offset loc_408293
.text:00407FD0                 dd offset loc_4082F1, offset loc_408302, offset loc_408320
.text:00407FD0                 dd offset loc_408324, offset loc_40834D, offset loc_408354
.text:00407FD0                 dd offset loc_40835F, offset loc_40837E, offset loc_408397
.text:00407FD0                 dd offset loc_4083A6, offset loc_4083B7, offset loc_4083CF
.text:00407FD0                 dd offset loc_408428, offset loc_408450, offset loc_40846A
.text:00407FD0                 dd offset loc_408492, offset loc_40849A, offset loc_4084B7
.text:00407FD0                 dd offset loc_4084CE, offset loc_4084E3, offset def_407FC6
.text:00407FD0                 dd offset loc_408504, offset loc_40851B, offset loc_408532
.text:00407FD0                 dd offset loc_408539, offset loc_40853D, offset loc_408554
.text:00407FD0                 dd offset loc_40856B, offset loc_408572, offset loc_408576
.text:00407FD0                 dd offset loc_40858D, offset loc_4085A4, offset loc_4085AB
.text:00407FD0                 dd offset loc_4085AF, offset loc_4085C6, offset loc_4085DD
.text:00407FD0                 dd offset loc_4085E4, offset loc_4085E8, offset loc_4085FF
.text:00407FD0                 dd offset loc_408616, offset loc_40861D, offset loc_408621
.text:00407FD0                 dd offset loc_408638, offset loc_40864F, offset loc_408656
.text:00407FD0                 dd offset loc_408678, offset loc_40869A, offset def_407FC6
.text:00407FD0                 dd offset def_407FC6, offset def_407FC6, offset loc_40869E
.text:00407FD0                 dd offset def_407FC6, offset loc_40869E, offset loc_4086B2
.text:00407FD0                 dd offset loc_40883C, offset loc_408849, offset loc_408855
.text:00407FD0                 dd offset loc_408862
.text:004080F4 ; ---------------------------------------------------------------------------
.text:004080F4
.text:004080F4 loc_4080F4:                             ; CODE XREF: sub_407DC0+206↑j
.text:004080F4                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004080F4                 mov     eax, [ebx]      ; jumptable 00407FC6 case 4
.text:004080F6                 mov     edx, [ebx+4]
.text:004080F9                 mov     ecx, [esp+1ACh+arg_0]
.text:00408100                 mov     [ecx+34h], eax
.text:00408103                 mov     [ecx+38h], edx
.text:00408106                 mov     byte ptr [ecx+58h], 1
.text:0040810A
.text:0040810A def_407FC6:                             ; CODE XREF: sub_407DC0+200↑j
.text:0040810A                                         ; sub_407DC0+206↑j ...
.text:0040810A                 movzx   esi, ds:byte_407AB0[esi] ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408111                 lea     ecx, [ebp+ebp+0]
.text:00408115                 lea     edx, [ebp+ecx+0]
.text:00408119                 shl     edx, 2
.text:0040811C                 sub     edi, ecx
.text:0040811E                 mov     ecx, [esp+1ACh+var_15C]
.text:00408122                 sub     ebx, edx
.text:00408124                 add     ebx, 0Ch
.text:00408127                 mov     [ebx], ecx
.text:00408129                 mov     edx, [esp+1ACh+var_158]
.text:0040812D                 movsx   ecx, byte ptr ds:dword_407C34[esi]
.text:00408134                 mov     [ebx+4], edx
.text:00408137                 mov     ebp, [esp+1ACh+var_154]
.text:0040813B                 movsx   edx, word ptr [edi]
.text:0040813E                 mov     [ebx+8], ebp
.text:00408141                 lea     ebp, [edx+ecx]
.text:00408144                 cmp     ebp, 4Eh ; 'N'
.text:00408147                 ja      short loc_408154
.text:00408149                 movzx   ecx, ss:byte_407CD0[ebp]
.text:00408150                 cmp     ecx, edx
.text:00408152                 jz      short loc_408163
.text:00408154
.text:00408154 loc_408154:                             ; CODE XREF: sub_407DC0+387↑j
.text:00408154                 movsx   ebp, byte ptr ds:dword_407BB4[esi]
.text:0040815B
.text:0040815B loc_40815B:                             ; CODE XREF: sub_407DC0+3AA↓j
.text:0040815B                                         ; sub_407DC0+B62↓j
.text:0040815B                 add     edi, 2
.text:0040815E                 jmp     loc_407DFB
.text:00408163 ; ---------------------------------------------------------------------------
.text:00408163
.text:00408163 loc_408163:                             ; CODE XREF: sub_407DC0+392↑j
.text:00408163                 movzx   ebp, ss:byte_407C70[ebp]
.text:0040816A                 jmp     short loc_40815B
.text:0040816C ; ---------------------------------------------------------------------------
.text:0040816C
.text:0040816C loc_40816C:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040816C                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040816C                 mov     ecx, [esp+1ACh+arg_0] ; jumptable 00407FC6 case 7
.text:00408173                 inc     dword ptr [ecx+6Ch]
.text:00408176                 jmp     short def_407FC6 ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408178 ; ---------------------------------------------------------------------------
.text:00408178
.text:00408178 loc_408178:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408178                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408178                 mov     eax, [esp+1ACh+arg_0] ; jumptable 00407FC6 case 8
.text:0040817F                 inc     dword ptr [eax+64h]
.text:00408182                 jmp     short def_407FC6 ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408184 ; ---------------------------------------------------------------------------
.text:00408184
.text:00408184 loc_408184:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408184                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408184                 mov     edx, [esp+1ACh+arg_0] ; jumptable 00407FC6 case 9
.text:0040818B                 inc     dword ptr [edx+70h]
.text:0040818E                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408193 ; ---------------------------------------------------------------------------
.text:00408193
.text:00408193 loc_408193:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408193                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408193                 mov     ecx, [esp+1ACh+arg_0] ; jumptable 00407FC6 case 10
.text:0040819A                 inc     dword ptr [ecx+5Ch]
.text:0040819D                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004081A2 ; ---------------------------------------------------------------------------
.text:004081A2
.text:004081A2 loc_4081A2:                             ; CODE XREF: sub_407DC0+206↑j
.text:004081A2                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004081A2                 mov     eax, [esp+1ACh+arg_0] ; jumptable 00407FC6 case 11
.text:004081A9                 inc     dword ptr [eax+60h]
.text:004081AC                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004081B1 ; ---------------------------------------------------------------------------
.text:004081B1
.text:004081B1 loc_4081B1:                             ; CODE XREF: sub_407DC0+206↑j
.text:004081B1                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004081B1                 mov     edx, [esp+1ACh+arg_0] ; jumptable 00407FC6 case 12
.text:004081B8                 inc     dword ptr [edx+68h]
.text:004081BB                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004081C0 ; ---------------------------------------------------------------------------
.text:004081C0
.text:004081C0 loc_4081C0:                             ; CODE XREF: sub_407DC0+206↑j
.text:004081C0                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004081C0                 mov     edx, [ebx-8]    ; jumptable 00407FC6 case 14
.text:004081C3                 mov     ecx, [esp+1ACh+arg_0]
.text:004081CA                 mov     [ecx+2Ch], edx
.text:004081CD                 mov     dword ptr [ecx+30h], 0
.text:004081D4                 mov     dword ptr [ecx+34h], 0
.text:004081DB                 mov     dword ptr [ecx+38h], 0
.text:004081E2
.text:004081E2 loc_4081E2:                             ; CODE XREF: sub_407DC0+44D↓j
.text:004081E2                                         ; sub_407DC0+4CE↓j
.text:004081E2                 mov     edx, [ebx]
.text:004081E4                 mov     [ecx+14h], edx
.text:004081E7                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004081EC ; ---------------------------------------------------------------------------
.text:004081EC
.text:004081EC loc_4081EC:                             ; CODE XREF: sub_407DC0+206↑j
.text:004081EC                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004081EC                 mov     edx, [ebx-20h]  ; jumptable 00407FC6 case 15
.text:004081EF                 mov     ecx, [esp+1ACh+arg_0]
.text:004081F6                 mov     [ecx+2Ch], edx
.text:004081F9                 mov     edx, [ebx-8]
.text:004081FC                 mov     dword ptr [ecx+34h], 0
.text:00408203                 mov     dword ptr [ecx+38h], 0
.text:0040820A                 mov     [ecx+30h], edx
.text:0040820D                 jmp     short loc_4081E2
.text:0040820F ; ---------------------------------------------------------------------------
.text:0040820F
.text:0040820F loc_40820F:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040820F                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040820F                 mov     edx, [ebx-2Ch]  ; jumptable 00407FC6 case 16
.text:00408212                 mov     ecx, [esp+1ACh+arg_0]
.text:00408219                 mov     [ecx+2Ch], edx
.text:0040821C                 mov     edx, [ebx-14h]
.text:0040821F                 inc     dword ptr [ecx+70h]
.text:00408222                 mov     dword ptr [ecx+34h], 0
.text:00408229                 mov     [ecx+30h], edx
.text:0040822C                 mov     dword ptr [ecx+38h], 0
.text:00408233                 mov     dword ptr [ecx+14h], 2
.text:0040823A                 mov     edx, [ebx]
.text:0040823C                 mov     [esp+1ACh+var_1A0], edx
.text:00408240                 mov     ecx, [ebx-0Ch]
.text:00408243                 mov     [esp+1ACh+Size], ecx
.text:00408246                 mov     edx, [ebx-8]
.text:00408249                 mov     [esp+1ACh+Src], edx
.text:0040824D                 mov     ecx, [ebx-4]
.text:00408250                 mov     [esp+1ACh+var_1A4], ecx
.text:00408254                 call    sub_409390
.text:00408259
.text:00408259 loc_408259:                             ; CODE XREF: sub_407DC0+588↓j
.text:00408259                                         ; sub_407DC0+59A↓j
.text:00408259                 mov     edx, [esp+1ACh+arg_0]
.text:00408260                 mov     [edx+10h], eax
.text:00408263                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408268 ; ---------------------------------------------------------------------------
.text:00408268
.text:00408268 loc_408268:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408268                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408268                 mov     edx, [ebx-38h]  ; jumptable 00407FC6 case 17
.text:0040826B                 mov     ecx, [esp+1ACh+arg_0]
.text:00408272                 mov     [ecx+2Ch], edx
.text:00408275                 mov     edx, [ebx-20h]
.text:00408278                 mov     [ecx+30h], edx
.text:0040827B                 mov     eax, [ebx-0Ch]
.text:0040827E                 mov     edx, [ebx-8]
.text:00408281                 mov     ecx, [esp+1ACh+arg_0]
.text:00408288                 mov     [ecx+34h], eax
.text:0040828B                 mov     [ecx+38h], edx
.text:0040828E                 jmp     loc_4081E2
.text:00408293 ; ---------------------------------------------------------------------------
.text:00408293
.text:00408293 loc_408293:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408293                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408293                 mov     edx, [ebx-44h]  ; jumptable 00407FC6 case 18
.text:00408296                 mov     ecx, [esp+1ACh+arg_0]
.text:0040829D                 mov     [ecx+2Ch], edx
.text:004082A0                 mov     edx, [ebx-2Ch]
.text:004082A3                 mov     [ecx+30h], edx
.text:004082A6                 mov     ecx, [esp+1ACh+arg_0]
.text:004082AD                 mov     edx, [ebx-14h]
.text:004082B0                 mov     eax, [ebx-18h]
.text:004082B3                 inc     dword ptr [ecx+70h]
.text:004082B6                 mov     [ecx+38h], edx
.text:004082B9                 mov     [ecx+34h], eax
.text:004082BC                 mov     dword ptr [ecx+14h], 2
.text:004082C3                 mov     edx, [ebx]
.text:004082C5                 mov     [esp+1ACh+var_1A0], edx
.text:004082C9                 mov     ecx, [ebx-0Ch]
.text:004082CC                 mov     [esp+1ACh+Size], ecx
.text:004082CF                 mov     edx, [ebx-8]
.text:004082D2                 mov     [esp+1ACh+Src], edx
.text:004082D6                 mov     ecx, [ebx-4]
.text:004082D9                 mov     [esp+1ACh+var_1A4], ecx
.text:004082DD                 call    sub_409390
.text:004082E2
.text:004082E2 loc_4082E2:                             ; CODE XREF: sub_407DC0+562↓j
.text:004082E2                                         ; sub_407DC0+592↓j
.text:004082E2                 mov     ecx, [esp+1ACh+arg_0]
.text:004082E9                 mov     [ecx+10h], eax
.text:004082EC                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004082F1 ; ---------------------------------------------------------------------------
.text:004082F1
.text:004082F1 loc_4082F1:                             ; CODE XREF: sub_407DC0+206↑j
.text:004082F1                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004082F1                 mov     ecx, [ebx]      ; jumptable 00407FC6 case 19
.text:004082F3                 mov     edx, [esp+1ACh+arg_0]
.text:004082FA                 mov     [edx+0Ch], ecx
.text:004082FD                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408302 ; ---------------------------------------------------------------------------
.text:00408302
.text:00408302 loc_408302:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408302                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408302                 mov     eax, [ebx-0Ch]  ; jumptable 00407FC6 case 20
.text:00408305                 mov     edx, 1
.text:0040830A                 test    eax, eax
.text:0040830C                 js      short loc_408311
.text:0040830E                 lea     edx, [eax+1]
.text:00408311
.text:00408311 loc_408311:                             ; CODE XREF: sub_407DC0+54C↑j
.text:00408311                 mov     ecx, [esp+1ACh+arg_0]
.text:00408318                 mov     [ecx+0Ch], edx
.text:0040831B                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408320 ; ---------------------------------------------------------------------------
.text:00408320
.text:00408320 loc_408320:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408320                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408320                 mov     eax, [ebx]      ; jumptable 00407FC6 case 21
.text:00408322                 jmp     short loc_4082E2
.text:00408324 ; ---------------------------------------------------------------------------
.text:00408324
.text:00408324 loc_408324:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408324                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408324                 mov     ecx, [ebx]      ; jumptable 00407FC6 case 22
.text:00408326                 mov     [esp+1ACh+var_1A0], ecx
.text:0040832A                 mov     edx, [ebx-0Ch]
.text:0040832D                 mov     [esp+1ACh+Size], edx
.text:00408330                 mov     ecx, [ebx-8]
.text:00408333                 mov     [esp+1ACh+Src], ecx
.text:00408337                 mov     edx, [ebx-4]
.text:0040833A                 mov     [esp+1ACh+var_1A4], edx
.text:0040833E                 call    sub_409390
.text:00408343                 mov     ecx, [ebx-18h]
.text:00408346                 add     eax, ecx
.text:00408348                 jmp     loc_408259
.text:0040834D ; ---------------------------------------------------------------------------
.text:0040834D
.text:0040834D loc_40834D:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040834D                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040834D                 mov     eax, [ebx]      ; jumptable 00407FC6 case 23
.text:0040834F                 add     eax, 3Ch ; '<'
.text:00408352                 jmp     short loc_4082E2
.text:00408354 ; ---------------------------------------------------------------------------
.text:00408354
.text:00408354 loc_408354:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408354                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408354                 mov     eax, [ebx-0Ch]  ; jumptable 00407FC6 case 24
.text:00408357                 add     eax, 3Ch ; '<'
.text:0040835A                 jmp     loc_408259
.text:0040835F ; ---------------------------------------------------------------------------
.text:0040835F
.text:0040835F loc_40835F:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040835F                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040835F                 mov     ecx, [esp+1ACh+arg_0] ; jumptable 00407FC6 case 25
.text:00408366                 mov     edx, [esp+1ACh+arg_0]
.text:0040836D                 mov     dword ptr [ecx+4], 1
.text:00408374
.text:00408374 loc_408374:                             ; CODE XREF: sub_407DC0+5E4↓j
.text:00408374                 mov     eax, [ebx]
.text:00408376                 mov     [edx+8], eax
.text:00408379                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:0040837E ; ---------------------------------------------------------------------------
.text:0040837E
.text:0040837E loc_40837E:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040837E                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040837E                 mov     ecx, [esp+1ACh+arg_0] ; jumptable 00407FC6 case 26
.text:00408385                 mov     dword ptr [ecx+4], 1
.text:0040838C                 mov     eax, [ebx-0Ch]
.text:0040838F
.text:0040838F loc_40838F:                             ; CODE XREF: sub_407DC0+5F5↓j
.text:0040838F                 mov     [ecx+8], eax
.text:00408392                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408397 ; ---------------------------------------------------------------------------
.text:00408397
.text:00408397 loc_408397:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408397                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408397                 mov     ecx, [ebx-0Ch]  ; jumptable 00407FC6 case 27
.text:0040839A                 mov     edx, [esp+1ACh+arg_0]
.text:004083A1                 mov     [edx+4], ecx
.text:004083A4                 jmp     short loc_408374
.text:004083A6 ; ---------------------------------------------------------------------------
.text:004083A6
.text:004083A6 loc_4083A6:                             ; CODE XREF: sub_407DC0+206↑j
.text:004083A6                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004083A6                 mov     edx, [ebx-8]    ; jumptable 00407FC6 case 28
.text:004083A9                 mov     ecx, [esp+1ACh+arg_0]
.text:004083B0                 mov     [ecx+4], edx
.text:004083B3                 mov     eax, [ebx]
.text:004083B5                 jmp     short loc_40838F
.text:004083B7 ; ---------------------------------------------------------------------------
.text:004083B7
.text:004083B7 loc_4083B7:                             ; CODE XREF: sub_407DC0+206↑j
.text:004083B7                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004083B7                 mov     eax, [ebx-14h]  ; jumptable 00407FC6 case 29
.text:004083BA
.text:004083BA loc_4083BA:                             ; CODE XREF: sub_407DC0+6D5↓j
.text:004083BA                 mov     ecx, [esp+1ACh+arg_0]
.text:004083C1                 mov     [ecx+24h], eax
.text:004083C4                 mov     edx, [ebx+4]
.text:004083C7                 mov     [ecx+28h], edx
.text:004083CA                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004083CF ; ---------------------------------------------------------------------------
.text:004083CF
.text:004083CF loc_4083CF:                             ; CODE XREF: sub_407DC0+206↑j
.text:004083CF                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004083CF                 cmp     dword ptr [ebx-28h], 3 ; jumptable 00407FC6 case 30
.text:004083D3                 jbe     short loc_4083FF
.text:004083D5                 mov     edx, [ebx-30h]
.text:004083D8                 mov     ecx, [esp+1ACh+arg_0]
.text:004083DF                 mov     [ecx+18h], edx
.text:004083E2                 mov     edx, [ebx-2Ch]
.text:004083E5                 mov     [ecx+1Ch], edx
.text:004083E8                 mov     edx, [ebx-28h]
.text:004083EB                 mov     [ecx+20h], edx
.text:004083EE                 mov     edx, [ebx-14h]
.text:004083F1                 mov     [ecx+24h], edx
.text:004083F4                 mov     eax, [ebx+4]
.text:004083F7
.text:004083F7 loc_4083F7:                             ; CODE XREF: sub_407DC0+68E↓j
.text:004083F7                 mov     [ecx+28h], eax
.text:004083FA                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004083FF ; ---------------------------------------------------------------------------
.text:004083FF
.text:004083FF loc_4083FF:                             ; CODE XREF: sub_407DC0+613↑j
.text:004083FF                 mov     ecx, [ebx-2Ch]
.text:00408402                 mov     edx, [esp+1ACh+arg_0]
.text:00408409                 mov     [edx+24h], ecx
.text:0040840C                 mov     ecx, [ebx-14h]
.text:0040840F                 mov     [edx+28h], ecx
.text:00408412                 mov     ecx, [ebx]
.text:00408414                 mov     [edx+18h], ecx
.text:00408417                 mov     eax, [ebx+4]
.text:0040841A
.text:0040841A loc_40841A:                             ; CODE XREF: sub_407DC0+6A8↓j
.text:0040841A                 mov     [edx+1Ch], eax
.text:0040841D                 mov     ecx, [ebx+8]
.text:00408420                 mov     [edx+20h], ecx
.text:00408423                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408428 ; ---------------------------------------------------------------------------
.text:00408428
.text:00408428 loc_408428:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408428                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408428                 mov     edx, [ebx-18h]  ; jumptable 00407FC6 case 31
.text:0040842B                 mov     ecx, [esp+1ACh+arg_0]
.text:00408432                 mov     [ecx+18h], edx
.text:00408435                 mov     edx, [ebx-14h]
.text:00408438                 mov     [ecx+1Ch], edx
.text:0040843B                 mov     edx, [ebx-10h]
.text:0040843E                 mov     [ecx+20h], edx
.text:00408441                 mov     edx, [ebx-8]
.text:00408444                 neg     edx
.text:00408446                 mov     [ecx+24h], edx
.text:00408449                 mov     eax, [ebx+4]
.text:0040844C                 neg     eax
.text:0040844E                 jmp     short loc_4083F7
.text:00408450 ; ---------------------------------------------------------------------------
.text:00408450
.text:00408450 loc_408450:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408450                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408450                 mov     ecx, [ebx-14h]  ; jumptable 00407FC6 case 32
.text:00408453                 mov     edx, [esp+1ACh+arg_0]
.text:0040845A                 mov     [edx+28h], ecx
.text:0040845D                 mov     ecx, [ebx-0Ch]
.text:00408460                 mov     [edx+24h], ecx
.text:00408463                 mov     eax, [ebx+4]
.text:00408466                 neg     eax
.text:00408468                 jmp     short loc_40841A
.text:0040846A ; ---------------------------------------------------------------------------
.text:0040846A
.text:0040846A loc_40846A:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040846A                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040846A                 mov     edx, [ebx-18h]  ; jumptable 00407FC6 case 33
.text:0040846D                 mov     ecx, [esp+1ACh+arg_0]
.text:00408474                 mov     [ecx+24h], edx
.text:00408477                 mov     edx, [ebx-8]
.text:0040847A                 neg     edx
.text:0040847C                 mov     [ecx+28h], edx
.text:0040847F                 mov     eax, [ebx+4]
.text:00408482                 neg     eax
.text:00408484
.text:00408484 loc_408484:                             ; CODE XREF: sub_407DC0+6F5↓j
.text:00408484                 mov     [ecx+1Ch], eax
.text:00408487                 mov     eax, [ebx+8]
.text:0040848A
.text:0040848A loc_40848A:                             ; CODE XREF: sub_407DC0+9E0↓j
.text:0040848A                 mov     [ecx+20h], eax
.text:0040848D                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408492 ; ---------------------------------------------------------------------------
.text:00408492
.text:00408492 loc_408492:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408492                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408492                 mov     eax, [ebx-0Ch]  ; jumptable 00407FC6 case 34
.text:00408495                 jmp     loc_4083BA
.text:0040849A ; ---------------------------------------------------------------------------
.text:0040849A
.text:0040849A loc_40849A:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040849A                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040849A                 mov     edx, [ebx-24h]  ; jumptable 00407FC6 case 35
.text:0040849D                 mov     ecx, [esp+1ACh+arg_0]
.text:004084A4                 mov     [ecx+24h], edx
.text:004084A7                 mov     edx, [ebx-14h]
.text:004084AA                 mov     [ecx+28h], edx
.text:004084AD
.text:004084AD loc_4084AD:                             ; CODE XREF: sub_407DC0+721↓j
.text:004084AD                 mov     eax, [ebx]
.text:004084AF
.text:004084AF loc_4084AF:                             ; CODE XREF: sub_407DC0+927↓j
.text:004084AF                 mov     [ecx+18h], eax
.text:004084B2                 mov     eax, [ebx+4]
.text:004084B5                 jmp     short loc_408484
.text:004084B7 ; ---------------------------------------------------------------------------
.text:004084B7
.text:004084B7 loc_4084B7:                             ; CODE XREF: sub_407DC0+206↑j
.text:004084B7                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004084B7                 mov     edx, [ebx-8]    ; jumptable 00407FC6 case 36
.text:004084BA                 mov     ecx, [esp+1ACh+arg_0]
.text:004084C1                 mov     [ecx+28h], edx
.text:004084C4                 mov     edx, [ebx]
.text:004084C6                 mov     [ecx+24h], edx
.text:004084C9                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004084CE ; ---------------------------------------------------------------------------
.text:004084CE
.text:004084CE loc_4084CE:                             ; CODE XREF: sub_407DC0+206↑j
.text:004084CE                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004084CE                 mov     edx, [ebx-14h]  ; jumptable 00407FC6 case 37
.text:004084D1                 mov     ecx, [esp+1ACh+arg_0]
.text:004084D8                 mov     [ecx+28h], edx
.text:004084DB                 mov     edx, [ebx-0Ch]
.text:004084DE                 mov     [ecx+24h], edx
.text:004084E1                 jmp     short loc_4084AD
.text:004084E3 ; ---------------------------------------------------------------------------
.text:004084E3
.text:004084E3 loc_4084E3:                             ; CODE XREF: sub_407DC0+206↑j
.text:004084E3                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004084E3                 mov     ecx, [esp+1ACh+arg_0] ; jumptable 00407FC6 case 38
.text:004084EA                 neg     dword ptr [ecx+54h]
.text:004084ED                 neg     dword ptr [ecx+50h]
.text:004084F0                 neg     dword ptr [ecx+4Ch]
.text:004084F3                 neg     dword ptr [ecx+48h]
.text:004084F6                 neg     dword ptr [ecx+44h]
.text:004084F9                 neg     dword ptr [ecx+40h]
.text:004084FC                 neg     dword ptr [ecx+3Ch]
.text:004084FF                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408504 ; ---------------------------------------------------------------------------
.text:00408504
.text:00408504 loc_408504:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408504                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408504                 mov     eax, [ebx]      ; jumptable 00407FC6 case 40
.text:00408506                 mov     edx, [ebx-0Ch]
.text:00408509
.text:00408509 loc_408509:                             ; CODE XREF: sub_407DC0+777↓j
.text:00408509                 imul    eax, edx
.text:0040850C                 mov     ecx, [esp+1ACh+arg_0]
.text:00408513                 add     [ecx+3Ch], eax
.text:00408516                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:0040851B ; ---------------------------------------------------------------------------
.text:0040851B
.text:0040851B loc_40851B:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040851B                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040851B                 mov     eax, [ebx]      ; jumptable 00407FC6 case 41
.text:0040851D                 mov     ecx, [ebx-8]
.text:00408520                 imul    eax, ecx
.text:00408523
.text:00408523 loc_408523:                             ; CODE XREF: sub_407DC0+77B↓j
.text:00408523                 mov     edx, [esp+1ACh+arg_0]
.text:0040852A                 add     [edx+3Ch], eax
.text:0040852D                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408532 ; ---------------------------------------------------------------------------
.text:00408532
.text:00408532 loc_408532:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408532                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408532                 mov     eax, [ebx]      ; jumptable 00407FC6 case 42
.text:00408534                 mov     edx, [ebx-8]
.text:00408537                 jmp     short loc_408509
.text:00408539 ; ---------------------------------------------------------------------------
.text:00408539
.text:00408539 loc_408539:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408539                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408539                 mov     eax, [ebx]      ; jumptable 00407FC6 case 43
.text:0040853B                 jmp     short loc_408523
.text:0040853D ; ---------------------------------------------------------------------------
.text:0040853D
.text:0040853D loc_40853D:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040853D                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040853D                 mov     eax, [ebx]      ; jumptable 00407FC6 case 44
.text:0040853F                 mov     ecx, [ebx-0Ch]
.text:00408542
.text:00408542 loc_408542:                             ; CODE XREF: sub_407DC0+7B0↓j
.text:00408542                 imul    eax, ecx
.text:00408545                 mov     ecx, [esp+1ACh+arg_0]
.text:0040854C                 add     [ecx+40h], eax
.text:0040854F                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408554 ; ---------------------------------------------------------------------------
.text:00408554
.text:00408554 loc_408554:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408554                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408554                 mov     eax, [ebx]      ; jumptable 00407FC6 case 45
.text:00408556                 mov     edx, [ebx-8]
.text:00408559                 imul    eax, edx
.text:0040855C
.text:0040855C loc_40855C:                             ; CODE XREF: sub_407DC0+7B4↓j
.text:0040855C                 mov     edx, [esp+1ACh+arg_0]
.text:00408563                 add     [edx+40h], eax
.text:00408566                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:0040856B ; ---------------------------------------------------------------------------
.text:0040856B
.text:0040856B loc_40856B:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040856B                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040856B                 mov     eax, [ebx]      ; jumptable 00407FC6 case 46
.text:0040856D                 mov     ecx, [ebx-8]
.text:00408570                 jmp     short loc_408542
.text:00408572 ; ---------------------------------------------------------------------------
.text:00408572
.text:00408572 loc_408572:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408572                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408572                 mov     eax, [ebx]      ; jumptable 00407FC6 case 47
.text:00408574                 jmp     short loc_40855C
.text:00408576 ; ---------------------------------------------------------------------------
.text:00408576
.text:00408576 loc_408576:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408576                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408576                 mov     eax, [ebx]      ; jumptable 00407FC6 case 48
.text:00408578                 mov     edx, [ebx-0Ch]
.text:0040857B
.text:0040857B loc_40857B:                             ; CODE XREF: sub_407DC0+7E9↓j
.text:0040857B                 imul    eax, edx
.text:0040857E                 mov     ecx, [esp+1ACh+arg_0]
.text:00408585                 add     [ecx+44h], eax
.text:00408588                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:0040858D ; ---------------------------------------------------------------------------
.text:0040858D
.text:0040858D loc_40858D:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040858D                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040858D                 mov     eax, [ebx]      ; jumptable 00407FC6 case 49
.text:0040858F                 mov     ecx, [ebx-8]
.text:00408592                 imul    eax, ecx
.text:00408595
.text:00408595 loc_408595:                             ; CODE XREF: sub_407DC0+7ED↓j
.text:00408595                 mov     edx, [esp+1ACh+arg_0]
.text:0040859C                 add     [edx+44h], eax
.text:0040859F                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004085A4 ; ---------------------------------------------------------------------------
.text:004085A4
.text:004085A4 loc_4085A4:                             ; CODE XREF: sub_407DC0+206↑j
.text:004085A4                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004085A4                 mov     eax, [ebx]      ; jumptable 00407FC6 case 50
.text:004085A6                 mov     edx, [ebx-8]
.text:004085A9                 jmp     short loc_40857B
.text:004085AB ; ---------------------------------------------------------------------------
.text:004085AB
.text:004085AB loc_4085AB:                             ; CODE XREF: sub_407DC0+206↑j
.text:004085AB                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004085AB                 mov     eax, [ebx]      ; jumptable 00407FC6 case 51
.text:004085AD                 jmp     short loc_408595
.text:004085AF ; ---------------------------------------------------------------------------
.text:004085AF
.text:004085AF loc_4085AF:                             ; CODE XREF: sub_407DC0+206↑j
.text:004085AF                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004085AF                 mov     eax, [ebx]      ; jumptable 00407FC6 case 52
.text:004085B1                 mov     ecx, [ebx-0Ch]
.text:004085B4
.text:004085B4 loc_4085B4:                             ; CODE XREF: sub_407DC0+822↓j
.text:004085B4                 imul    eax, ecx
.text:004085B7                 mov     ecx, [esp+1ACh+arg_0]
.text:004085BE                 add     [ecx+48h], eax
.text:004085C1                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004085C6 ; ---------------------------------------------------------------------------
.text:004085C6
.text:004085C6 loc_4085C6:                             ; CODE XREF: sub_407DC0+206↑j
.text:004085C6                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004085C6                 mov     eax, [ebx]      ; jumptable 00407FC6 case 53
.text:004085C8                 mov     edx, [ebx-8]
.text:004085CB                 imul    eax, edx
.text:004085CE
.text:004085CE loc_4085CE:                             ; CODE XREF: sub_407DC0+826↓j
.text:004085CE                 mov     edx, [esp+1ACh+arg_0]
.text:004085D5                 add     [edx+48h], eax
.text:004085D8                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004085DD ; ---------------------------------------------------------------------------
.text:004085DD
.text:004085DD loc_4085DD:                             ; CODE XREF: sub_407DC0+206↑j
.text:004085DD                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004085DD                 mov     eax, [ebx]      ; jumptable 00407FC6 case 54
.text:004085DF                 mov     ecx, [ebx-8]
.text:004085E2                 jmp     short loc_4085B4
.text:004085E4 ; ---------------------------------------------------------------------------
.text:004085E4
.text:004085E4 loc_4085E4:                             ; CODE XREF: sub_407DC0+206↑j
.text:004085E4                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004085E4                 mov     eax, [ebx]      ; jumptable 00407FC6 case 55
.text:004085E6                 jmp     short loc_4085CE
.text:004085E8 ; ---------------------------------------------------------------------------
.text:004085E8
.text:004085E8 loc_4085E8:                             ; CODE XREF: sub_407DC0+206↑j
.text:004085E8                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004085E8                 mov     eax, [ebx]      ; jumptable 00407FC6 case 56
.text:004085EA                 mov     edx, [ebx-0Ch]
.text:004085ED
.text:004085ED loc_4085ED:                             ; CODE XREF: sub_407DC0+85B↓j
.text:004085ED                 imul    eax, edx
.text:004085F0                 mov     ecx, [esp+1ACh+arg_0]
.text:004085F7                 add     [ecx+4Ch], eax
.text:004085FA                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004085FF ; ---------------------------------------------------------------------------
.text:004085FF
.text:004085FF loc_4085FF:                             ; CODE XREF: sub_407DC0+206↑j
.text:004085FF                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004085FF                 mov     eax, [ebx]      ; jumptable 00407FC6 case 57
.text:00408601                 mov     ecx, [ebx-8]
.text:00408604                 imul    eax, ecx
.text:00408607
.text:00408607 loc_408607:                             ; CODE XREF: sub_407DC0+85F↓j
.text:00408607                 mov     edx, [esp+1ACh+arg_0]
.text:0040860E                 add     [edx+4Ch], eax
.text:00408611                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408616 ; ---------------------------------------------------------------------------
.text:00408616
.text:00408616 loc_408616:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408616                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408616                 mov     eax, [ebx]      ; jumptable 00407FC6 case 58
.text:00408618                 mov     edx, [ebx-8]
.text:0040861B                 jmp     short loc_4085ED
.text:0040861D ; ---------------------------------------------------------------------------
.text:0040861D
.text:0040861D loc_40861D:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040861D                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040861D                 mov     eax, [ebx]      ; jumptable 00407FC6 case 59
.text:0040861F                 jmp     short loc_408607
.text:00408621 ; ---------------------------------------------------------------------------
.text:00408621
.text:00408621 loc_408621:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408621                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408621                 mov     eax, [ebx]      ; jumptable 00407FC6 case 60
.text:00408623                 mov     ecx, [ebx-0Ch]
.text:00408626
.text:00408626 loc_408626:                             ; CODE XREF: sub_407DC0+894↓j
.text:00408626                 imul    eax, ecx
.text:00408629                 mov     ecx, [esp+1ACh+arg_0]
.text:00408630                 add     [ecx+50h], eax
.text:00408633                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408638 ; ---------------------------------------------------------------------------
.text:00408638
.text:00408638 loc_408638:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408638                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408638                 mov     eax, [ebx]      ; jumptable 00407FC6 case 61
.text:0040863A                 mov     edx, [ebx-8]
.text:0040863D                 imul    eax, edx
.text:00408640
.text:00408640 loc_408640:                             ; CODE XREF: sub_407DC0+8DC↓j
.text:00408640                 mov     edx, [esp+1ACh+arg_0]
.text:00408647                 add     [edx+50h], eax
.text:0040864A                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:0040864F ; ---------------------------------------------------------------------------
.text:0040864F
.text:0040864F loc_40864F:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040864F                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040864F                 mov     eax, [ebx]      ; jumptable 00407FC6 case 62
.text:00408651                 mov     ecx, [ebx-8]
.text:00408654                 jmp     short loc_408626
.text:00408656 ; ---------------------------------------------------------------------------
.text:00408656
.text:00408656 loc_408656:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408656                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408656                 mov     eax, [ebx-0Ch]  ; jumptable 00407FC6 case 63
.text:00408659                 mov     edx, [ebx]
.text:0040865B                 mov     ecx, [esp+1ACh+arg_0]
.text:00408662                 imul    edx, eax
.text:00408665                 add     [ecx+50h], edx
.text:00408668                 mov     eax, [ebx]
.text:0040866A                 mov     edx, [ebx-8]
.text:0040866D                 imul    eax, edx
.text:00408670                 add     [ecx+54h], eax
.text:00408673                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408678 ; ---------------------------------------------------------------------------
.text:00408678
.text:00408678 loc_408678:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408678                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408678                 mov     eax, [ebx-0Ch]  ; jumptable 00407FC6 case 64
.text:0040867B                 mov     ecx, [ebx]
.text:0040867D                 mov     edx, [esp+1ACh+arg_0]
.text:00408684                 imul    ecx, eax
.text:00408687                 add     [edx+50h], ecx
.text:0040868A                 mov     eax, [ebx]
.text:0040868C                 mov     ecx, [ebx-8]
.text:0040868F                 imul    eax, ecx
.text:00408692                 add     [edx+54h], eax
.text:00408695                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:0040869A ; ---------------------------------------------------------------------------
.text:0040869A
.text:0040869A loc_40869A:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040869A                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040869A                 mov     eax, [ebx]      ; jumptable 00407FC6 case 65
.text:0040869C                 jmp     short loc_408640
.text:0040869E ; ---------------------------------------------------------------------------
.text:0040869E
.text:0040869E loc_40869E:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040869E                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040869E                 mov     ecx, [ebx+4]    ; jumptable 00407FC6 cases 69,71
.text:004086A1                 mov     [esp+1ACh+var_158], 0
.text:004086A9                 mov     [esp+1ACh+var_15C], ecx
.text:004086AD                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004086B2 ; ---------------------------------------------------------------------------
.text:004086B2
.text:004086B2 loc_4086B2:                             ; CODE XREF: sub_407DC0+206↑j
.text:004086B2                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:004086B2                 mov     edx, [esp+1ACh+arg_0] ; jumptable 00407FC6 case 72
.text:004086B9                 mov     eax, [edx+5Ch]
.text:004086BC                 test    eax, eax
.text:004086BE                 jz      loc_408834
.text:004086C4                 mov     ecx, [edx+68h]
.text:004086C7                 test    ecx, ecx
.text:004086C9                 jnz     loc_408834
.text:004086CF                 mov     ecx, [edx+6Ch]
.text:004086D2                 test    ecx, ecx
.text:004086D4                 jnz     short loc_4086DE
.text:004086D6                 mov     edx, [ebx+8]
.text:004086D9                 cmp     edx, 2
.text:004086DC                 jbe     short loc_4086EC
.text:004086DE
.text:004086DE loc_4086DE:                             ; CODE XREF: sub_407DC0+914↑j
.text:004086DE                 mov     eax, [ebx]
.text:004086E0                 mov     ecx, [esp+1ACh+arg_0]
.text:004086E7                 jmp     loc_4084AF
.text:004086EC ; ---------------------------------------------------------------------------
.text:004086EC
.text:004086EC loc_4086EC:                             ; CODE XREF: sub_407DC0+91C↑j
.text:004086EC                                         ; sub_407DC0+A77↓j
.text:004086EC                 cmp     edx, 4
.text:004086EF                 jbe     loc_4087A5
.text:004086F5                 mov     ecx, [esp+1ACh+arg_0]
.text:004086FC                 inc     eax
.text:004086FD                 mov     [ecx+5Ch], eax
.text:00408700                 mov     ecx, [ebx+4]
.text:00408703                 mov     eax, 51EB851Fh
.text:00408708                 imul    ecx
.text:0040870A                 mov     eax, ecx
.text:0040870C                 mov     [esp+1ACh+var_188], edx
.text:00408710                 sar     edx, 5
.text:00408713                 mov     [esp+1ACh+var_18C], edx
.text:00408717                 cdq
.text:00408718                 sub     [esp+1ACh+var_18C], edx
.text:0040871C                 mov     edx, [esp+1ACh+var_18C]
.text:00408720                 lea     eax, [edx+edx*4]
.text:00408723                 lea     edx, [eax+eax*4]
.text:00408726                 shl     edx, 2
.text:00408729                 mov     eax, 51EB851Fh
.text:0040872E                 sub     ecx, edx
.text:00408730                 mov     edx, [esp+1ACh+arg_0]
.text:00408737                 mov     [edx+28h], ecx
.text:0040873A                 mov     ecx, [ebx+4]
.text:0040873D                 imul    dword ptr [ebx+4]
.text:00408740                 mov     eax, 51EB851Fh
.text:00408745                 sar     ecx, 1Fh
.text:00408748                 sar     edx, 5
.text:0040874B                 sub     edx, ecx
.text:0040874D                 mov     [esp+1ACh+var_190], edx
.text:00408751                 imul    edx
.text:00408753                 mov     ecx, edx
.text:00408755                 mov     edx, [esp+1ACh+var_190]
.text:00408759                 sar     ecx, 5
.text:0040875C                 sar     edx, 1Fh
.text:0040875F                 sub     ecx, edx
.text:00408761                 lea     eax, [ecx+ecx*4]
.text:00408764                 mov     ecx, [esp+1ACh+var_190]
.text:00408768                 lea     edx, [eax+eax*4]
.text:0040876B                 mov     eax, [esp+1ACh+arg_0]
.text:00408772                 shl     edx, 2
.text:00408775                 sub     ecx, edx
.text:00408777                 mov     [eax+24h], ecx
.text:0040877A                 mov     edx, 68DB8BADh
.text:0040877F                 mov     ecx, [ebx+4]
.text:00408782                 mov     eax, ecx
.text:00408784                 imul    edx
.text:00408786                 mov     eax, ecx
.text:00408788                 sar     eax, 1Fh
.text:0040878B                 mov     ecx, [esp+1ACh+arg_0]
.text:00408792                 sar     edx, 0Ch
.text:00408795                 sub     edx, eax
.text:00408797                 mov     [ecx+1Ch], edx
.text:0040879A                 mov     eax, [ebx+8]
.text:0040879D                 sub     eax, 4
.text:004087A0                 jmp     loc_40848A
.text:004087A5 ; ---------------------------------------------------------------------------
.text:004087A5
.text:004087A5 loc_4087A5:                             ; CODE XREF: sub_407DC0+92F↑j
.text:004087A5                 mov     edx, [esp+1ACh+arg_0]
.text:004087AC                 inc     dword ptr [edx+6Ch]
.text:004087AF                 cmp     dword ptr [ebx+8], 2
.text:004087B3                 ja      short loc_4087EA
.text:004087B5                 mov     edx, [ebx+4]
.text:004087B8                 mov     ecx, [esp+1ACh+arg_0]
.text:004087BF                 mov     [ecx+2Ch], edx
.text:004087C2                 mov     dword ptr [ecx+30h], 0
.text:004087C9
.text:004087C9 loc_4087C9:                             ; CODE XREF: sub_407DC0+A72↓j
.text:004087C9                 mov     eax, [esp+1ACh+arg_0]
.text:004087D0                 mov     dword ptr [eax+34h], 0
.text:004087D7                 mov     dword ptr [eax+38h], 0
.text:004087DE                 mov     dword ptr [eax+14h], 2
.text:004087E5                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:004087EA ; ---------------------------------------------------------------------------
.text:004087EA
.text:004087EA loc_4087EA:                             ; CODE XREF: sub_407DC0+9F3↑j
.text:004087EA                 mov     eax, 51EB851Fh
.text:004087EF                 imul    dword ptr [ebx+4]
.text:004087F2                 mov     eax, 51EB851Fh
.text:004087F7                 mov     ecx, edx
.text:004087F9                 mov     edx, [ebx+4]
.text:004087FC                 sar     ecx, 5
.text:004087FF                 sar     edx, 1Fh
.text:00408802                 sub     ecx, edx
.text:00408804                 mov     edx, [esp+1ACh+arg_0]
.text:0040880B                 mov     [edx+2Ch], ecx
.text:0040880E                 mov     ecx, [ebx+4]
.text:00408811                 imul    ecx
.text:00408813                 mov     eax, ecx
.text:00408815                 sar     eax, 1Fh
.text:00408818                 sar     edx, 5
.text:0040881B                 sub     edx, eax
.text:0040881D                 lea     edx, [edx+edx*4]
.text:00408820                 lea     eax, [edx+edx*4]
.text:00408823                 shl     eax, 2
.text:00408826                 sub     ecx, eax
.text:00408828                 mov     eax, [esp+1ACh+arg_0]
.text:0040882F                 mov     [eax+30h], ecx
.text:00408832                 jmp     short loc_4087C9
.text:00408834 ; ---------------------------------------------------------------------------
.text:00408834
.text:00408834 loc_408834:                             ; CODE XREF: sub_407DC0+8FE↑j
.text:00408834                                         ; sub_407DC0+909↑j
.text:00408834                 mov     edx, [ebx+8]
.text:00408837                 jmp     loc_4086EC
.text:0040883C ; ---------------------------------------------------------------------------
.text:0040883C
.text:0040883C loc_40883C:                             ; CODE XREF: sub_407DC0+206↑j
.text:0040883C                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:0040883C                 mov     [esp+1ACh+var_15C], 0FFFFFFFFh ; jumptable 00407FC6 case 73
.text:00408844                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408849 ; ---------------------------------------------------------------------------
.text:00408849
.text:00408849 loc_408849:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408849                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408849                 mov     eax, [ebx+4]    ; jumptable 00407FC6 case 74
.text:0040884C
.text:0040884C loc_40884C:                             ; CODE XREF: sub_407DC0+AA4↓j
.text:0040884C                 mov     [esp+1ACh+var_15C], eax
.text:00408850                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408855 ; ---------------------------------------------------------------------------
.text:00408855
.text:00408855 loc_408855:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408855                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408855                 mov     [esp+1ACh+var_15C], 2 ; jumptable 00407FC6 case 75
.text:0040885D                 jmp     def_407FC6      ; jumptable 00407FC6 default case, cases 5,6,13,39,66-68,70
.text:00408862 ; ---------------------------------------------------------------------------
.text:00408862
.text:00408862 loc_408862:                             ; CODE XREF: sub_407DC0+206↑j
.text:00408862                                         ; DATA XREF: sub_407DC0:jpt_407FC6↑o
.text:00408862                 mov     eax, [ebx]      ; jumptable 00407FC6 case 76
.text:00408864                 jmp     short loc_40884C
.text:00408866 ; ---------------------------------------------------------------------------
.text:00408866
.text:00408866 loc_408866:                             ; CODE XREF: sub_407DC0+1C9↑j
.text:00408866                                         ; sub_407DC0+C17↓j
.text:00408866                 mov     esi, [esp+1ACh+var_164]
.text:0040886A                 test    esi, esi
.text:0040886C                 jz      loc_408960
.text:00408872
.text:00408872 loc_408872:                             ; CODE XREF: sub_407DC0+BB7↓j
.text:00408872                 cmp     [esp+1ACh+var_164], 3
.text:00408877                 jz      loc_408930
.text:0040887D
.text:0040887D loc_40887D:                             ; CODE XREF: sub_407DC0+B80↓j
.text:0040887D                                         ; sub_407DC0+B8B↓j
.text:0040887D                 mov     [esp+1ACh+var_164], 3
.text:00408885                 lea     esi, [esi+0]
.text:00408889                 lea     edi, [edi+0]
.text:00408890
.text:00408890 loc_408890:                             ; CODE XREF: sub_407DC0+AFF↓j
.text:00408890                 movsx   esi, ss:byte_407BF0[ebp]
.text:00408897                 cmp     esi, 0FFFFFFBEh
.text:0040889A                 jz      short loc_4088B0
.text:0040889C                 inc     esi
.text:0040889D                 cmp     esi, 4Eh ; 'N'
.text:004088A0                 ja      short loc_4088B0
.text:004088A2                 cmp     ds:byte_407CD0[esi], 1
.text:004088A9                 jz      short loc_4088F0
.text:004088AB                 nop
.text:004088AC                 lea     esi, [esi+0]
.text:004088B0
.text:004088B0 loc_4088B0:                             ; CODE XREF: sub_407DC0+ADA↑j
.text:004088B0                                         ; sub_407DC0+AE0↑j ...
.text:004088B0                 cmp     edi, [esp+1ACh+var_168]
.text:004088B4                 jz      short loc_4088C1
.text:004088B6                 sub     edi, 2
.text:004088B9                 sub     ebx, 0Ch
.text:004088BC                 movsx   ebp, word ptr [edi]
.text:004088BF                 jmp     short loc_408890
.text:004088C1 ; ---------------------------------------------------------------------------
.text:004088C1
.text:004088C1 loc_4088C1:                             ; CODE XREF: sub_407DC0+167↑j
.text:004088C1                                         ; sub_407DC0+AF4↑j ...
.text:004088C1                 mov     ebx, 1
.text:004088C6
.text:004088C6 loc_4088C6:                             ; CODE XREF: sub_407DC0+B69↓j
.text:004088C6                                         ; sub_407DC0+C72↓j
.text:004088C6                 lea     esi, [esp+1ACh+var_5C]
.text:004088CD                 cmp     [esp+1ACh+var_168], esi
.text:004088D1                 jz      short loc_4088DF
.text:004088D3                 mov     eax, [esp+1ACh+var_168]
.text:004088D7                 mov     [esp+1ACh+Size], eax ; Block
.text:004088DA                 call    free
.text:004088DF
.text:004088DF loc_4088DF:                             ; CODE XREF: sub_407DC0+B11↑j
.text:004088DF                 add     esp, 19Ch
.text:004088E5                 mov     eax, ebx
.text:004088E7                 pop     ebx
.text:004088E8                 pop     esi
.text:004088E9                 pop     edi
.text:004088EA                 pop     ebp
.text:004088EB                 retn
.text:004088EB ; ---------------------------------------------------------------------------
.text:004088EC                 align 10h
.text:004088F0
.text:004088F0 loc_4088F0:                             ; CODE XREF: sub_407DC0+AE9↑j
.text:004088F0                 movzx   esi, ds:byte_407C70[esi]
.text:004088F7                 test    esi, esi
.text:004088F9                 jle     short loc_4088B0
.text:004088FB                 cmp     esi, 0Ch
.text:004088FE                 jz      short loc_408927
.text:00408900                 mov     edx, [esp+1ACh+var_2C]
.text:00408907                 add     ebx, 0Ch
.text:0040890A                 mov     [ebx], edx
.text:0040890C                 mov     ecx, [esp+1ACh+var_28]
.text:00408913                 mov     [ebx+4], ecx
.text:00408916                 mov     ebp, [esp+1ACh+var_24]
.text:0040891D                 mov     [ebx+8], ebp
.text:00408920
.text:00408920 loc_408920:                             ; CODE XREF: sub_407DC0+C02↓j
.text:00408920                                         ; sub_407DC0+C0C↓j
.text:00408920                 mov     ebp, esi
.text:00408922                 jmp     loc_40815B
.text:00408927 ; ---------------------------------------------------------------------------
.text:00408927
.text:00408927 loc_408927:                             ; CODE XREF: sub_407DC0+B3E↑j
.text:00408927                                         ; sub_407DC0+BCA↓j
.text:00408927                 xor     ebx, ebx
.text:00408929                 jmp     short loc_4088C6
.text:00408929 ; ---------------------------------------------------------------------------
.text:0040892B                 align 10h
.text:00408930
.text:00408930 loc_408930:                             ; CODE XREF: sub_407DC0+AB7↑j
.text:00408930                 mov     ecx, [esp+1ACh+var_160]
.text:00408934                 test    ecx, ecx
.text:00408936                 jle     short loc_408945
.text:00408938                 mov     [esp+1ACh+var_160], 0FFFFFFFEh
.text:00408940                 jmp     loc_40887D
.text:00408945 ; ---------------------------------------------------------------------------
.text:00408945
.text:00408945 loc_408945:                             ; CODE XREF: sub_407DC0+B76↑j
.text:00408945                 mov     edx, [esp+1ACh+var_160]
.text:00408949                 test    edx, edx
.text:0040894B                 jnz     loc_40887D
.text:00408951
.text:00408951 loc_408951:                             ; CODE XREF: sub_407DC0+B98↓j
.text:00408951                 sub     edi, 2
.text:00408954                 cmp     edi, [esp+1ACh+var_168]
.text:00408958                 jnz     short loc_408951
.text:0040895A                 jmp     loc_4088C1
.text:0040895A ; ---------------------------------------------------------------------------
.text:0040895F                 align 10h
.text:00408960
.text:00408960 loc_408960:                             ; CODE XREF: sub_407DC0+AAC↑j
.text:00408960                 mov     [esp+1ACh+Src], offset aSyntaxError ; "syntax error"
.text:00408968                 mov     eax, [esp+1ACh+arg_0]
.text:0040896F                 mov     [esp+1ACh+Size], eax
.text:00408972                 call    sub_4097D0
.text:00408977                 jmp     loc_408872
.text:0040897C ; ---------------------------------------------------------------------------
.text:0040897C
.text:0040897C loc_40897C:                             ; CODE XREF: sub_407DC0+1BA↑j
.text:0040897C                 movzx   esi, ds:byte_407C70[esi]
.text:00408983                 test    esi, esi
.text:00408985                 jle     short loc_4089D1
.text:00408987                 cmp     esi, 0Ch
.text:0040898A                 jz      short loc_408927
.text:0040898C                 mov     eax, [esp+1ACh+var_160]
.text:00408990                 test    eax, eax
.text:00408992                 jz      short loc_40899C
.text:00408994                 mov     [esp+1ACh+var_160], 0FFFFFFFEh
.text:0040899C
.text:0040899C loc_40899C:                             ; CODE XREF: sub_407DC0+BD2↑j
.text:0040899C                 mov     ebp, [esp+1ACh+var_2C]
.text:004089A3                 add     ebx, 0Ch
.text:004089A6                 mov     [ebx], ebp
.text:004089A8                 mov     edx, [esp+1ACh+var_28]
.text:004089AF                 mov     ebp, [esp+1ACh+var_164]
.text:004089B3                 mov     [ebx+4], edx
.text:004089B6                 mov     ecx, [esp+1ACh+var_24]
.text:004089BD                 test    ebp, ebp
.text:004089BF                 mov     [ebx+8], ecx
.text:004089C2                 jz      loc_408920
.text:004089C8                 dec     [esp+1ACh+var_164]
.text:004089CC                 jmp     loc_408920
.text:004089D1 ; ---------------------------------------------------------------------------
.text:004089D1
.text:004089D1 loc_4089D1:                             ; CODE XREF: sub_407DC0+BC5↑j
.text:004089D1                 lea     edx, [esi+1]
.text:004089D4                 cmp     edx, 1
.text:004089D7                 jbe     loc_408866
.text:004089DD                 neg     esi
.text:004089DF                 jmp     loc_407F8F
.text:004089E4 ; ---------------------------------------------------------------------------
.text:004089E4
.text:004089E4 loc_4089E4:                             ; CODE XREF: sub_407DC0+18A↑j
.text:004089E4                 mov     [esp+1ACh+var_160], 0
.text:004089EC                 xor     edx, edx
.text:004089EE                 jmp     loc_407F6A
.text:004089F3 ; ---------------------------------------------------------------------------
.text:004089F3
.text:004089F3 loc_4089F3:                             ; CODE XREF: sub_407DC0+17E↑j
.text:004089F3                 mov     ecx, [esp+1ACh+arg_0]
.text:004089FA                 lea     edx, [esp+1ACh+var_2C]
.text:00408A01                 mov     [esp+1ACh+Size], edx
.text:00408A04                 mov     [esp+1ACh+Src], ecx
.text:00408A08                 call    sub_4093E0
.text:00408A0D                 mov     [esp+1ACh+var_160], eax
.text:00408A11                 jmp     loc_407F44
.text:00408A16 ; ---------------------------------------------------------------------------
.text:00408A16
.text:00408A16 loc_408A16:                             ; CODE XREF: sub_407DC0+62↑j
.text:00408A16                                         ; sub_407DC0+A0↑j
.text:00408A16                 mov     [esp+1ACh+Src], offset aParserStackOve ; "parser stack overflow"
.text:00408A1E                 mov     edi, [esp+1ACh+arg_0]
.text:00408A25                 mov     ebx, 2
.text:00408A2A                 mov     [esp+1ACh+Size], edi
.text:00408A2D                 call    sub_4097D0
.text:00408A32                 jmp     loc_4088C6
.text:00408A32 sub_407DC0      endp
.text:00408A32
.text:00408A32 ; ---------------------------------------------------------------------------
.text:00408A37 byte_408A37     db 41h                  ; DATA XREF: .text:Str2↓o
.text:00408A38 dword_408A38    dd 2E41004Dh, 50002E4Dh, 2E50004Dh, 89002E4Dh, 27BC8DF6h
.text:00408A38                                         ; DATA XREF: .text:00408A5C↓o
.text:00408A38                                         ; .text:00408A68↓o
.text:00408A38                 dd 0
.text:00408A50 ; char *const Str2
.text:00408A50 Str2            dd offset byte_408A37   ; DATA XREF: sub_40A580:loc_40A5D4↓r
.text:00408A50                                         ; sub_40A580+59↓o
.text:00408A54                 dd 109h, 0
.text:00408A5C                 dd offset dword_408A38+2
.text:00408A60                 dd 109h, 0
.text:00408A68                 dd offset dword_408A38+7
.text:00408A6C                 dd 109h, 1, 408A42h, 109h, 1, 3 dup(0)
.text:00408A8C dword_408A8C    dd 545344h              ; DATA XREF: .text:off_408A90↓o
.text:00408A90 ; char *const off_408A90
.text:00408A90 off_408A90      dd offset dword_408A8C  ; DATA XREF: sub_40A580+15E↓r
.text:00408A90                                         ; sub_40A580+16F↓o
.text:00408A94                 dd 103h, 0
.text:00408A9C aJanuary        db 'JANUARY',0          ; DATA XREF: .text:off_408B50↓o
.text:00408AA4 aFebruary       db 'FEBRUARY',0         ; DATA XREF: .text:00408B5C↓o
.text:00408AAD aMarch          db 'MARCH',0            ; DATA XREF: .text:00408B68↓o
.text:00408AB3 aApril          db 'APRIL',0            ; DATA XREF: .text:00408B74↓o
.text:00408AB9 aMay            db 'MAY',0              ; DATA XREF: .text:00408B80↓o
.text:00408ABD aJune           db 'JUNE',0             ; DATA XREF: .text:00408B8C↓o
.text:00408AC2 aJuly           db 'JULY',0             ; DATA XREF: .text:00408B98↓o
.text:00408AC7 aAugust         db 'AUGUST',0           ; DATA XREF: .text:00408BA4↓o
.text:00408ACE aSeptember      db 'SEPTEMBER',0        ; DATA XREF: .text:00408BB0↓o
.text:00408AD8 aSept           db 'SEPT',0             ; DATA XREF: .text:00408BBC↓o
.text:00408ADD aOctober        db 'OCTOBER',0          ; DATA XREF: .text:00408BC8↓o
.text:00408AE5 aNovember       db 'NOVEMBER',0         ; DATA XREF: .text:00408BD4↓o
.text:00408AEE aDecember       db 'DECEMBER',0         ; DATA XREF: .text:00408BE0↓o
.text:00408AF7 aSunday         db 'SUNDAY',0           ; DATA XREF: .text:00408BEC↓o
.text:00408AFE aMonday         db 'MONDAY',0           ; DATA XREF: .text:00408BF8↓o
.text:00408B05 aTuesday        db 'TUESDAY',0          ; DATA XREF: .text:00408C04↓o
.text:00408B0D aTues           db 'TUES',0             ; DATA XREF: .text:00408C10↓o
.text:00408B12 aWednesday      db 'WEDNESDAY',0        ; DATA XREF: .text:00408C1C↓o
.text:00408B1C aWednes         db 'WEDNES',0           ; DATA XREF: .text:00408C28↓o
.text:00408B23 aThursday       db 'THURSDAY',0         ; DATA XREF: .text:00408C34↓o
.text:00408B2C aThur           db 'THUR',0             ; DATA XREF: .text:00408C40↓o
.text:00408B31 aThurs          db 'THURS',0            ; DATA XREF: .text:00408C4C↓o
.text:00408B37 aFriday         db 'FRIDAY',0           ; DATA XREF: .text:00408C58↓o
.text:00408B3E aSaturday       db 'SATURDAY',0         ; DATA XREF: .text:00408C64↓o
.text:00408B47                 align 10h
.text:00408B50 off_408B50      dd offset aJanuary      ; DATA XREF: sub_40A580:loc_40A630↓r
.text:00408B50                                         ; sub_40A580+B6↓o
.text:00408B50                                         ; "JANUARY"
.text:00408B54                 dd 10Bh, 1
.text:00408B5C                 dd offset aFebruary     ; "FEBRUARY"
.text:00408B60                 dd 10Bh, 2
.text:00408B68                 dd offset aMarch        ; "MARCH"
.text:00408B6C                 dd 10Bh, 3
.text:00408B74                 dd offset aApril        ; "APRIL"
.text:00408B78                 dd 10Bh, 4
.text:00408B80                 dd offset aMay          ; "MAY"
.text:00408B84                 dd 10Bh, 5
.text:00408B8C                 dd offset aJune         ; "JUNE"
.text:00408B90                 dd 10Bh, 6
.text:00408B98                 dd offset aJuly         ; "JULY"
.text:00408B9C                 dd 10Bh, 7
.text:00408BA4                 dd offset aAugust       ; "AUGUST"
.text:00408BA8                 dd 10Bh, 8
.text:00408BB0                 dd offset aSeptember    ; "SEPTEMBER"
.text:00408BB4                 dd 10Bh, 9
.text:00408BBC                 dd offset aSept         ; "SEPT"
.text:00408BC0                 dd 10Bh, 9
.text:00408BC8                 dd offset aOctober      ; "OCTOBER"
.text:00408BCC                 dd 10Bh, 0Ah
.text:00408BD4                 dd offset aNovember     ; "NOVEMBER"
.text:00408BD8                 dd 10Bh, 0Bh
.text:00408BE0                 dd offset aDecember     ; "DECEMBER"
.text:00408BE4                 dd 10Bh, 0Ch
.text:00408BEC                 dd offset aSunday       ; "SUNDAY"
.text:00408BF0                 dd 104h, 0
.text:00408BF8                 dd offset aMonday       ; "MONDAY"
.text:00408BFC                 dd 104h, 1
.text:00408C04                 dd offset aTuesday      ; "TUESDAY"
.text:00408C08                 dd 104h, 2
.text:00408C10                 dd offset aTues         ; "TUES"
.text:00408C14                 dd 104h, 2
.text:00408C1C                 dd offset aWednesday    ; "WEDNESDAY"
.text:00408C20                 dd 104h, 3
.text:00408C28                 dd offset aWednes       ; "WEDNES"
.text:00408C2C                 dd 104h, 3
.text:00408C34                 dd offset aThursday     ; "THURSDAY"
.text:00408C38                 dd 104h, 4
.text:00408C40                 dd offset aThur         ; "THUR"
.text:00408C44                 dd 104h, 4
.text:00408C4C                 dd offset aThurs        ; "THURS"
.text:00408C50                 dd 104h, 4
.text:00408C58                 dd offset aFriday       ; "FRIDAY"
.text:00408C5C                 dd 104h, 5
.text:00408C64                 dd offset aSaturday     ; "SATURDAY"
.text:00408C68                 dd 104h, 6, 3 dup(0)
.text:00408C7C aYear           db 'YEAR',0             ; DATA XREF: .text:off_408CD0↓o
.text:00408C81 aMonth          db 'MONTH',0            ; DATA XREF: .text:00408CDC↓o
.text:00408C87 aFortnight      db 'FORTNIGHT',0        ; DATA XREF: .text:00408CE8↓o
.text:00408C91 aWeek           db 'WEEK',0             ; DATA XREF: .text:00408CF4↓o
.text:00408C96 aDay            db 'DAY',0              ; DATA XREF: .text:00408D00↓o
.text:00408C9A aHour           db 'HOUR',0             ; DATA XREF: .text:00408D0C↓o
.text:00408C9F aMinute         db 'MINUTE',0           ; DATA XREF: .text:00408D18↓o
.text:00408CA6 aMin            db 'MIN',0              ; DATA XREF: .text:00408D24↓o
.text:00408CAA aSecond         db 'SECOND',0           ; DATA XREF: .text:00408D30↓o
.text:00408CB1 aSec            db 'SEC',0              ; DATA XREF: .text:00408D3C↓o
.text:00408CB5                 db 1Bh dup(90h)
.text:00408CD0 ; char *const off_408CD0
.text:00408CD0 off_408CD0      dd offset aYear         ; DATA XREF: sub_40A580+176↓r
.text:00408CD0                                         ; sub_40A580+17B↓o ...
.text:00408CD0                                         ; "YEAR"
.text:00408CD4                 dd 10Fh, 1
.text:00408CDC                 dd offset aMonth        ; "MONTH"
.text:00408CE0                 dd 10Ch, 1
.text:00408CE8                 dd offset aFortnight    ; "FORTNIGHT"
.text:00408CEC                 dd 105h, 0Eh
.text:00408CF4                 dd offset aWeek         ; "WEEK"
.text:00408CF8                 dd 105h, 7
.text:00408D00                 dd offset aDay          ; "DAY"
.text:00408D04                 dd 105h, 1
.text:00408D0C                 dd offset aHour         ; "HOUR"
.text:00408D10                 dd 107h, 1
.text:00408D18                 dd offset aMinute       ; "MINUTE"
.text:00408D1C                 dd 10Ah, 1
.text:00408D24                 dd offset aMin          ; "MIN"
.text:00408D28                 dd 10Ah, 1
.text:00408D30                 dd offset aSecond       ; "SECOND"
.text:00408D34                 dd 10Eh, 1
.text:00408D3C                 dd offset aSec          ; "SEC"
.text:00408D40                 dd 10Eh, 1, 3 dup(0)
.text:00408D54 aTomorrow       db 'TOMORROW',0         ; DATA XREF: .text:off_408DD0↓o
.text:00408D5D aYesterday      db 'YESTERDAY',0        ; DATA XREF: .text:00408DDC↓o
.text:00408D67 aToday          db 'TODAY',0            ; DATA XREF: .text:00408DE8↓o
.text:00408D6D aNow            db 'NOW',0              ; DATA XREF: .text:00408DF4↓o
.text:00408D71 aLast           db 'LAST',0             ; DATA XREF: .text:00408E00↓o
.text:00408D76 aThis           db 'THIS',0             ; DATA XREF: .text:00408E0C↓o
.text:00408D7B aNext           db 'NEXT',0             ; DATA XREF: .text:00408E18↓o
.text:00408D80 aFirst          db 'FIRST',0            ; DATA XREF: .text:00408E24↓o
.text:00408D86 aThird          db 'THIRD',0            ; DATA XREF: .text:00408E30↓o
.text:00408D8C aFourth         db 'FOURTH',0           ; DATA XREF: .text:00408E3C↓o
.text:00408D93 aFifth          db 'FIFTH',0            ; DATA XREF: .text:00408E48↓o
.text:00408D99 aSixth          db 'SIXTH',0            ; DATA XREF: .text:00408E54↓o
.text:00408D9F aSeventh        db 'SEVENTH',0          ; DATA XREF: .text:00408E60↓o
.text:00408DA7 aEighth         db 'EIGHTH',0           ; DATA XREF: .text:00408E6C↓o
.text:00408DAE aNinth          db 'NINTH',0            ; DATA XREF: .text:00408E78↓o
.text:00408DB4 aTenth          db 'TENTH',0            ; DATA XREF: .text:00408E84↓o
.text:00408DBA aEleventh       db 'ELEVENTH',0         ; DATA XREF: .text:00408E90↓o
.text:00408DC3 aTwelfth        db 'TWELFTH',0
.text:00408DCB aAgo            db 'AGO',0
.text:00408DCF                 align 10h
.text:00408DD0 ; char *const off_408DD0
.text:00408DD0 off_408DD0      dd offset aTomorrow     ; DATA XREF: sub_40A580:loc_40A72A↓r
.text:00408DD0                                         ; sub_40A580+1AF↓o
.text:00408DD0                                         ; "TOMORROW"
.text:00408DD4                 dd 105h, 1
.text:00408DDC                 dd offset aYesterday    ; "YESTERDAY"
.text:00408DE0                 dd 105h, 0FFFFFFFFh
.text:00408DE8                 dd offset aToday        ; "TODAY"
.text:00408DEC                 dd 105h, 0
.text:00408DF4                 dd offset aNow          ; "NOW"
.text:00408DF8                 dd 105h, 0
.text:00408E00                 dd offset aLast         ; "LAST"
.text:00408E04                 dd 10Dh, 0FFFFFFFFh
.text:00408E0C                 dd offset aThis         ; "THIS"
.text:00408E10                 dd 10Dh, 0
.text:00408E18                 dd offset aNext         ; "NEXT"
.text:00408E1C                 dd 10Dh, 1
.text:00408E24                 dd offset aFirst        ; "FIRST"
.text:00408E28                 dd 10Dh, 1
.text:00408E30                 dd offset aThird        ; "THIRD"
.text:00408E34                 dd 10Dh, 3
.text:00408E3C                 dd offset aFourth       ; "FOURTH"
.text:00408E40                 dd 10Dh, 4
.text:00408E48                 dd offset aFifth        ; "FIFTH"
.text:00408E4C                 dd 10Dh, 5
.text:00408E54                 dd offset aSixth        ; "SIXTH"
.text:00408E58                 dd 10Dh, 6
.text:00408E60                 dd offset aSeventh      ; "SEVENTH"
.text:00408E64                 dd 10Dh, 7
.text:00408E6C                 dd offset aEighth       ; "EIGHTH"
.text:00408E70                 dd 10Dh, 8
.text:00408E78                 dd offset aNinth        ; "NINTH"
.text:00408E7C                 dd 10Dh, 9
.text:00408E84                 dd offset aTenth        ; "TENTH"
.text:00408E88                 dd 10Dh, 0Ah
.text:00408E90                 dd offset aEleventh     ; "ELEVENTH"
.text:00408E94                 dd 10Dh, 0Bh
.text:00408E9C ; ---------------------------------------------------------------------------
.text:00408E9C                 retn
.text:00408E9C ; ---------------------------------------------------------------------------
.text:00408E9D                 align 10h
.text:00408EA0                 dd 10Dh, 0Ch
.text:00408EA8 ; ---------------------------------------------------------------------------
.text:00408EA8                 retf
.text:00408EA8 ; ---------------------------------------------------------------------------
.text:00408EA9                 align 4
.text:00408EAC                 dd 102h, 1, 3 dup(0)
.text:00408EC0 dword_408EC0    dd 544D47h, 55005455h, 57004354h, 57005445h, 545345h, 545342h
.text:00408EC0                                         ; DATA XREF: .text:off_408FB0↓o
.text:00408EC0                                         ; .text:00408FBC↓o ...
.text:00408EC0                 dd 545241h, 545242h, 54535242h, 54534E00h, 54444E00h, 54534100h
.text:00408EC0                 dd 54444100h, 544C4300h, 534C4300h, 53450054h, 44450054h
.text:00408EC0                 dd 53430054h, 44430054h, 534D0054h, 444D0054h, 53500054h
.text:00408EC0                 dd 44500054h, 4B410054h, 41005453h, 54444Bh, 545348h, 54534148h
.text:00408EC0                 dd 44414800h, 53530054h, 41570054h, 2 dup(45430054h), 4D005453h
.text:00408EC0                 dd 4D005445h, 4D005A45h, 545345h, 5A53454Dh, 54454500h
.text:00408EC0                 dd 53454500h, 41430054h, 41530054h, 45005453h, 4D005441h
.text:00408EC0                 dd 4D004B53h, 49004453h, 53005453h, 4B005447h, 4A005453h
.text:00408EC0                 dd 47005453h, 4E005453h, 54535Ah, 54445A4Eh, 90909000h
.text:00408EC0                 dd 6 dup(90909090h)
.text:00408FB0 ; char *const off_408FB0
.text:00408FB0 off_408FB0      dd offset dword_408EC0  ; DATA XREF: sub_40A580:loc_40A69B↓r
.text:00408FB0                                         ; sub_40A580+120↓o ...
.text:00408FB4                 dd 110h, 0
.text:00408FBC                 dd offset dword_408EC0+4
.text:00408FC0                 dd 110h, 0
.text:00408FC8                 dd offset dword_408EC0+7
.text:00408FCC                 dd 110h, 0
.text:00408FD4 ; ---------------------------------------------------------------------------
.text:00408FD4                 retf
.text:00408FD4 ; ---------------------------------------------------------------------------
.text:00408FD5                 db 8Eh, 40h, 0
.text:00408FD8                 dd 110h, 0
.text:00408FE0                 dd offset dword_408EC0+0Fh
.text:00408FE4                 dd 106h, 0
.text:00408FEC                 dd offset dword_408EC0+14h
.text:00408FF0                 dd 106h, 0
.text:00408FF8                 dd offset dword_408EC0+18h
.text:00408FFC                 dd 110h, 0FFFFFF4Ch, 408EDCh, 110h, 0FFFFFF4Ch, 408EE0h
.text:00408FFC                 dd 106h, 0FFFFFF4Ch, 408EE5h, 110h, 0FFFFFF2Eh, 408EE9h
.text:00408FFC                 dd 106h, 0FFFFFF2Eh, 408EEDh, 110h, 0FFFFFF10h, 408EF1h
.text:00408FFC                 dd 106h, 0FFFFFF10h, 408EF5h, 110h, 0FFFFFF10h, 408EF9h
.text:00408FFC                 dd 106h, 0FFFFFF10h, 408EFEh, 110h, 0FFFFFED4h, 408F02h
.text:00408FFC                 dd 106h, 0FFFFFED4h, 408F06h, 110h, 0FFFFFE98h, 408F0Ah
.text:00408FFC                 dd 106h, 0FFFFFE98h, 408F0Eh, 110h, 0FFFFFE5Ch, 408F12h
.text:00408FFC                 dd 106h, 0FFFFFE5Ch, 408F16h, 110h, 0FFFFFE20h, 408F1Ah
.text:00408FFC                 dd 106h, 0FFFFFE20h, 408F1Eh, 110h, 0FFFFFDE4h, 408F23h
.text:00408FFC                 dd 106h, 0FFFFFDE4h, 408F28h, 110h, 0FFFFFDA8h, 408F2Ch
.text:00408FFC                 dd 110h, 0FFFFFDA8h, 408F31h, 106h, 0FFFFFDA8h, 408F36h
.text:00408FFC                 dd 110h, 0FFFFFD30h, 408F3Ah, 110h, 3Ch, 408F3Eh, 110h
.text:00408FFC                 dd 3Ch, 408F42h, 106h, 3Ch, 408F47h, 110h, 3Ch, 408F4Bh
.text:00408FFC                 dd 110h, 3Ch, 408F4Fh, 106h, 3Ch, 408F54h, 106h, 3Ch, 408F59h
.text:00408FFC                 dd 110h, 78h, 408F5Dh, 106h, 78h, 408F62h, 110h, 78h, 408F66h
.text:00408FFC                 dd 110h, 78h, 408F6Bh, 110h, 0B4h, 408F6Fh, 110h, 0B4h
.text:00408FFC                 dd 408F73h, 106h, 0B4h, 408F77h, 110h, 14Ah, 408F7Bh, 110h
.text:00408FFC                 dd 1E0h, 408F7Fh, 110h, 21Ch, 408F83h, 110h, 21Ch, 408F87h
.text:00408FFC                 dd 110h, 258h, 408F8Bh, 110h, 2D0h, 408F90h, 106h, 2D0h
.text:00408FFC                 dd 3 dup(0)
.text:00409214 off_409214      dd offset byte_420001+40h
.text:00409214                                         ; DATA XREF: .text:off_409250↓o
.text:00409218 aCdefghiklmnopq:                        ; DATA XREF: .text:00409268↓o
.text:00409218                 text "UTF-16LE", 'CDEFGHIKLMNOPQRSTUVWXYZ'
.text:00409246                 align 10h
.text:00409250 off_409250      dd offset off_409214    ; DATA XREF: sub_40A580:loc_40A7E1↓r
.text:00409250                                         ; sub_40A580+266↓o
.text:00409254                 dd 110h, 0FFFFFFC4h, 409216h, 110h, 0FFFFFF88h
.text:00409268                 dd offset aCdefghiklmnopq ; "CDEFGHIKLMNOPQRSTUVWXYZ"
.text:0040926C                 dd 110h, 0FFFFFF4Ch, 40921Ah, 110h, 0FFFFFF10h, 40921Ch
.text:0040926C                 dd 110h, 0FFFFFED4h, 40921Eh, 110h, 0FFFFFE98h, 409220h
.text:0040926C                 dd 110h, 0FFFFFE5Ch, 409222h, 110h, 0FFFFFE20h, 409224h
.text:0040926C                 dd 110h, 0FFFFFDE4h, 409226h, 110h, 0FFFFFDA8h, 409228h
.text:0040926C                 dd 110h, 0FFFFFD6Ch, 40922Ah, 110h, 0FFFFFD30h, 40922Ch
.text:0040926C                 dd 110h, 3Ch, 40922Eh, 110h, 78h, 409230h, 110h, 0B4h
.text:0040926C                 dd 409232h, 110h, 0F0h, 409234h, 110h, 12Ch, 409236h, 110h
.text:0040926C                 dd 168h, 409238h, 110h, 1A4h, 40923Ah, 110h, 1E0h, 40923Ch
.text:0040926C                 dd 110h, 21Ch, 40923Eh, 110h, 258h, 409240h, 110h, 294h
.text:0040926C                 dd 409242h, 110h, 2D0h, 409244h, 110h, 4 dup(0)
.text:00409388                 align 10h
.text:00409390
.text:00409390 ; =============== S U B R O U T I N E =======================================
.text:00409390
.text:00409390
.text:00409390 sub_409390      proc near               ; CODE XREF: sub_407DC0+494↑p
.text:00409390                                         ; sub_407DC0+51D↑p ...
.text:00409390
.text:00409390 arg_0           = byte ptr  4
.text:00409390 arg_4           = dword ptr  8
.text:00409390 arg_C           = dword ptr  10h
.text:00409390
.text:00409390                 mov     ecx, [esp+arg_C]
.text:00409394                 test    ecx, ecx
.text:00409396                 js      short loc_4093B3
.text:00409398                 mov     edx, [esp+arg_4]
.text:0040939C                 mov     eax, edx
.text:0040939E                 shl     eax, 4
.text:004093A1                 sub     eax, edx
.text:004093A3                 shl     eax, 2
.text:004093A6                 cmp     [esp+arg_0], 0
.text:004093AB                 jz      short loc_4093B0
.text:004093AD                 sub     eax, ecx
.text:004093AF                 retn
.text:004093B0 ; ---------------------------------------------------------------------------
.text:004093B0
.text:004093B0 loc_4093B0:                             ; CODE XREF: sub_409390+1B↑j
.text:004093B0                 add     eax, ecx
.text:004093B2                 retn
.text:004093B3 ; ---------------------------------------------------------------------------
.text:004093B3
.text:004093B3 loc_4093B3:                             ; CODE XREF: sub_409390+6↑j
.text:004093B3                 mov     ecx, [esp+arg_4]
.text:004093B7                 mov     edx, 51EB851Fh
.text:004093BC                 mov     eax, ecx
.text:004093BE                 imul    edx
.text:004093C0                 mov     eax, ecx
.text:004093C2                 sar     eax, 1Fh
.text:004093C5                 sar     edx, 5
.text:004093C8                 sub     edx, eax
.text:004093CA                 mov     eax, edx
.text:004093CC                 shl     eax, 4
.text:004093CF                 sub     eax, edx
.text:004093D1                 lea     edx, [edx+edx*4]
.text:004093D4                 lea     edx, [edx+edx*4]
.text:004093D7                 shl     edx, 2
.text:004093DA                 sub     ecx, edx
.text:004093DC                 lea     eax, [ecx+eax*4]
.text:004093DF                 retn
.text:004093DF sub_409390      endp
.text:004093DF
.text:004093E0
.text:004093E0 ; =============== S U B R O U T I N E =======================================
.text:004093E0
.text:004093E0
.text:004093E0 sub_4093E0      proc near               ; CODE XREF: sub_407DC0+C48↑p
.text:004093E0
.text:004093E0 C               = dword ptr -5Ch
.text:004093E0 Type            = dword ptr -58h
.text:004093E0 var_45          = byte ptr -45h
.text:004093E0 var_44          = dword ptr -44h
.text:004093E0 var_40          = dword ptr -40h
.text:004093E0 Str             = byte ptr -3Ch
.text:004093E0 var_29          = byte ptr -29h
.text:004093E0 arg_0           = dword ptr  4
.text:004093E0 arg_4           = dword ptr  8
.text:004093E0
.text:004093E0                 push    ebp
.text:004093E1                 push    edi
.text:004093E2                 push    esi
.text:004093E3                 push    ebx
.text:004093E4                 sub     esp, 4Ch
.text:004093E7                 mov     edi, [esp+5Ch+arg_4]
.text:004093EB                 nop
.text:004093EC                 lea     esi, [esi+0]
.text:004093F0
.text:004093F0 loc_4093F0:                             ; CODE XREF: sub_4093E0+AC↓j
.text:004093F0                                         ; sub_4093E0+1CA↓j ...
.text:004093F0                 mov     edx, [edi]
.text:004093F2                 mov     ecx, ds:__mb_cur_max
.text:004093F8                 movzx   ebx, byte ptr [edx]
.text:004093FB                 cmp     dword ptr [ecx], 1
.text:004093FE                 movzx   edx, bl
.text:00409401                 jz      loc_4097B7
.text:00409407                 mov     [esp+5Ch+Type], 8 ; Type
.text:0040940F                 mov     [esp+5Ch+C], edx ; C
.text:00409412                 call    _isctype
.text:00409417
.text:00409417 loc_409417:                             ; CODE XREF: sub_4093E0+3E6↓j
.text:00409417                 test    eax, eax
.text:00409419                 jnz     loc_4097B0
.text:0040941F                 movzx   edx, bl
.text:00409422                 lea     ebp, [edx-30h]
.text:00409425                 cmp     ebp, 9
.text:00409428                 jbe     loc_409550
.text:0040942E                 cmp     bl, 2Dh ; '-'
.text:00409431                 jz      loc_4097A2
.text:00409437                 cmp     bl, 2Bh ; '+'
.text:0040943A                 jz      loc_409550
.text:00409440                 mov     esi, ds:__mb_cur_max
.text:00409446                 cmp     dword ptr [esi], 1
.text:00409449                 jz      loc_409532
.text:0040944F                 mov     [esp+5Ch+Type], 103h ; Type
.text:00409457                 mov     [esp+5Ch+C], edx ; C
.text:0040945A                 call    _isctype
.text:0040945F
.text:0040945F loc_40945F:                             ; CODE XREF: sub_4093E0+164↓j
.text:0040945F                 test    eax, eax
.text:00409461                 jnz     short loc_4094AE
.text:00409463                 xor     edx, edx
.text:00409465                 cmp     bl, 28h ; '('
.text:00409468                 jnz     short loc_4094A1
.text:0040946A                 lea     esi, [esi+0]
.text:00409470
.text:00409470 loc_409470:                             ; CODE XREF: sub_4093E0+AA↓j
.text:00409470                 mov     ecx, [edi]
.text:00409472                 xor     ebp, ebp
.text:00409474                 movzx   ebx, byte ptr [ecx]
.text:00409477                 inc     ecx
.text:00409478                 mov     [edi], ecx
.text:0040947A                 test    bl, bl
.text:0040947C                 jz      short loc_409497
.text:0040947E                 cmp     bl, 28h ; '('
.text:00409481                 jz      short loc_409494
.text:00409483                 cmp     bl, 29h ; ')'
.text:00409486                 jz      short loc_409491
.text:00409488
.text:00409488 loc_409488:                             ; CODE XREF: sub_4093E0+B2↓j
.text:00409488                                         ; sub_4093E0+B5↓j
.text:00409488                 test    edx, edx
.text:0040948A                 jnz     short loc_409470
.text:0040948C                 jmp     loc_4093F0
.text:00409491 ; ---------------------------------------------------------------------------
.text:00409491
.text:00409491 loc_409491:                             ; CODE XREF: sub_4093E0+A6↑j
.text:00409491                 dec     edx
.text:00409492                 jmp     short loc_409488
.text:00409494 ; ---------------------------------------------------------------------------
.text:00409494
.text:00409494 loc_409494:                             ; CODE XREF: sub_4093E0+A1↑j
.text:00409494                 inc     edx
.text:00409495                 jmp     short loc_409488
.text:00409497 ; ---------------------------------------------------------------------------
.text:00409497
.text:00409497 loc_409497:                             ; CODE XREF: sub_4093E0+9C↑j
.text:00409497                                         ; sub_4093E0+CC↓j ...
.text:00409497                 add     esp, 4Ch
.text:0040949A                 mov     eax, ebp
.text:0040949C                 pop     ebx
.text:0040949D                 pop     esi
.text:0040949E                 pop     edi
.text:0040949F                 pop     ebp
.text:004094A0                 retn
.text:004094A1 ; ---------------------------------------------------------------------------
.text:004094A1
.text:004094A1 loc_4094A1:                             ; CODE XREF: sub_4093E0+88↑j
.text:004094A1                 mov     ebp, [edi]
.text:004094A3                 movsx   ebx, byte ptr [ebp+0]
.text:004094A7                 inc     ebp
.text:004094A8                 mov     [edi], ebp
.text:004094AA                 mov     ebp, ebx
.text:004094AC                 jmp     short loc_409497
.text:004094AE ; ---------------------------------------------------------------------------
.text:004094AE
.text:004094AE loc_4094AE:                             ; CODE XREF: sub_4093E0+81↑j
.text:004094AE                 lea     esi, [esp+5Ch+Str]
.text:004094B2                 lea     ebp, [esp+5Ch+var_29]
.text:004094B6
.text:004094B6 loc_4094B6:                             ; CODE XREF: sub_4093E0+108↓j
.text:004094B6                                         ; sub_4093E0+10D↓j
.text:004094B6                 cmp     esi, ebp
.text:004094B8                 jnb     short loc_4094BD
.text:004094BA                 mov     [esi], bl
.text:004094BC                 inc     esi
.text:004094BD
.text:004094BD loc_4094BD:                             ; CODE XREF: sub_4093E0+D8↑j
.text:004094BD                 mov     ecx, [edi]
.text:004094BF                 lea     ebx, [ecx+1]
.text:004094C2                 mov     [edi], ebx
.text:004094C4                 movzx   ebx, byte ptr [ecx+1]
.text:004094C8                 mov     ecx, ds:__mb_cur_max
.text:004094CE                 movzx   edx, bl
.text:004094D1                 cmp     dword ptr [ecx], 1
.text:004094D4                 jz      short loc_409520
.text:004094D6                 mov     [esp+5Ch+Type], 103h ; Type
.text:004094DE                 mov     [esp+5Ch+C], edx ; C
.text:004094E1                 call    _isctype
.text:004094E6
.text:004094E6 loc_4094E6:                             ; CODE XREF: sub_4093E0+150↓j
.text:004094E6                 test    eax, eax
.text:004094E8                 jnz     short loc_4094B6
.text:004094EA                 cmp     bl, 2Eh ; '.'
.text:004094ED                 jz      short loc_4094B6
.text:004094EF                 mov     byte ptr [esi], 0
.text:004094F2                 lea     edx, [esp+5Ch+Str]
.text:004094F6                 mov     ebp, 3Fh ; '?'
.text:004094FB                 mov     [esp+5Ch+Type], edx ; Str
.text:004094FF                 mov     [esp+5Ch+C], edi ; int
.text:00409502                 call    sub_40A580
.text:00409507                 test    eax, eax
.text:00409509                 jz      short loc_409497
.text:0040950B                 mov     esi, [eax+8]
.text:0040950E                 mov     edi, [esp+5Ch+arg_0]
.text:00409512                 mov     [edi], esi
.text:00409514                 mov     ebp, [eax+4]
.text:00409517                 jmp     loc_409497
.text:00409517 ; ---------------------------------------------------------------------------
.text:0040951C                 align 10h
.text:00409520
.text:00409520 loc_409520:                             ; CODE XREF: sub_4093E0+F4↑j
.text:00409520                 mov     eax, ds:_pctype
.text:00409525                 mov     ecx, [eax]
.text:00409527                 movzx   eax, word ptr [ecx+edx*2]
.text:0040952B                 and     eax, 103h
.text:00409530                 jmp     short loc_4094E6
.text:00409532 ; ---------------------------------------------------------------------------
.text:00409532
.text:00409532 loc_409532:                             ; CODE XREF: sub_4093E0+69↑j
.text:00409532                 mov     ebp, ds:_pctype
.text:00409538                 mov     ecx, [ebp+0]
.text:0040953B                 movzx   eax, word ptr [ecx+edx*2]
.text:0040953F                 and     eax, 103h
.text:00409544                 jmp     loc_40945F
.text:00409544 ; ---------------------------------------------------------------------------
.text:00409549                 align 10h
.text:00409550
.text:00409550 loc_409550:                             ; CODE XREF: sub_4093E0+48↑j
.text:00409550                                         ; sub_4093E0+5A↑j
.text:00409550                 cmp     bl, 2Dh ; '-'
.text:00409553                 jz      loc_4097A2
.text:00409559                 cmp     bl, 2Bh ; '+'
.text:0040955C                 jnz     loc_409795
.text:00409562                 mov     [esp+5Ch+var_40], 1
.text:0040956A                 lea     esi, [esi+0]
.text:00409570
.text:00409570 loc_409570:                             ; CODE XREF: sub_4093E0+1BF↓j
.text:00409570                                         ; sub_4093E0+3CA↓j
.text:00409570                 mov     esi, [edi]
.text:00409572                 lea     eax, [esi+1]
.text:00409575                 mov     [edi], eax
.text:00409577                 mov     ecx, ds:__mb_cur_max
.text:0040957D                 movzx   ebx, byte ptr [esi+1]
.text:00409581                 cmp     dword ptr [ecx], 1
.text:00409584                 movzx   edx, bl
.text:00409587                 jz      loc_409780
.text:0040958D                 mov     [esp+5Ch+Type], 8 ; Type
.text:00409595                 mov     [esp+5Ch+C], edx ; C
.text:00409598                 call    _isctype
.text:0040959D
.text:0040959D loc_40959D:                             ; CODE XREF: sub_4093E0+3B0↓j
.text:0040959D                 test    eax, eax
.text:0040959F                 jnz     short loc_409570
.text:004095A1                 movzx   edx, bl
.text:004095A4                 sub     edx, 30h ; '0'
.text:004095A7                 cmp     edx, 9
.text:004095AA                 ja      loc_4093F0
.text:004095B0
.text:004095B0 loc_4095B0:                             ; CODE XREF: sub_4093E0+3BD↓j
.text:004095B0                 mov     esi, [edi]
.text:004095B2                 xor     edx, edx
.text:004095B4                 lea     esi, [esi+0]
.text:004095BA                 lea     edi, [edi+0]
.text:004095C0
.text:004095C0 loc_4095C0:                             ; CODE XREF: sub_4093E0+216↓j
.text:004095C0                 movzx   ebp, bl
.text:004095C3                 lea     ecx, [ebp+edx-30h]
.text:004095C7                 cmp     ecx, edx
.text:004095C9                 mov     ebp, 3Fh ; '?'
.text:004095CE                 jb      loc_409497
.text:004095D4                 inc     esi
.text:004095D5                 movzx   ebx, byte ptr [esi]
.text:004095D8                 movzx   edx, bl
.text:004095DB                 sub     edx, 30h ; '0'
.text:004095DE                 cmp     edx, 9
.text:004095E1                 ja      short loc_4095F8
.text:004095E3                 cmp     ecx, 19999999h
.text:004095E9                 ja      loc_409497
.text:004095EF                 lea     ebp, [ecx+ecx*4]
.text:004095F2                 lea     edx, [ebp+ebp+0]
.text:004095F6                 jmp     short loc_4095C0
.text:004095F8 ; ---------------------------------------------------------------------------
.text:004095F8
.text:004095F8 loc_4095F8:                             ; CODE XREF: sub_4093E0+201↑j
.text:004095F8                 cmp     bl, 2Eh ; '.'
.text:004095FB                 jz      short loc_409664
.text:004095FD                 cmp     bl, 2Ch ; ','
.text:00409600                 jz      short loc_409664
.text:00409602
.text:00409602 loc_409602:                             ; CODE XREF: sub_4093E0+28E↓j
.text:00409602                 mov     ebx, [esp+5Ch+var_40]
.text:00409606                 mov     edx, [esp+5Ch+arg_0]
.text:0040960A                 shr     ebx, 1Fh
.text:0040960D                 mov     [edx], bl
.text:0040960F                 mov     ebp, [esp+5Ch+var_40]
.text:00409613                 test    ebp, ebp
.text:00409615                 js      short loc_40964F
.text:00409617                 mov     edx, [esp+5Ch+arg_0]
.text:0040961B                 test    ecx, ecx
.text:0040961D                 mov     ebp, 3Fh ; '?'
.text:00409622                 mov     [edx+4], ecx
.text:00409625                 js      loc_409497
.text:0040962B
.text:0040962B loc_40962B:                             ; CODE XREF: sub_4093E0+27D↓j
.text:0040962B                 mov     eax, [edi]
.text:0040962D                 mov     ebx, esi
.text:0040962F                 xor     ecx, ecx
.text:00409631                 mov     ebp, [esp+5Ch+arg_0]
.text:00409635                 sub     ebx, eax
.text:00409637                 mov     [ebp+8], ebx
.text:0040963A                 cmp     [esp+5Ch+var_40], 0
.text:0040963F                 mov     [edi], esi
.text:00409641                 setz    cl
.text:00409644                 lea     ebp, [ecx+111h]
.text:0040964A                 jmp     loc_409497
.text:0040964F ; ---------------------------------------------------------------------------
.text:0040964F
.text:0040964F loc_40964F:                             ; CODE XREF: sub_4093E0+235↑j
.text:0040964F                 mov     ebx, ecx
.text:00409651                 mov     ebp, 3Fh ; '?'
.text:00409656                 neg     ebx
.text:00409658                 mov     [edx+4], ebx
.text:0040965B                 test    ebx, ebx
.text:0040965D                 jle     short loc_40962B
.text:0040965F                 jmp     loc_409497
.text:00409664 ; ---------------------------------------------------------------------------
.text:00409664
.text:00409664 loc_409664:                             ; CODE XREF: sub_4093E0+21B↑j
.text:00409664                                         ; sub_4093E0+220↑j
.text:00409664                 movsx   ebx, byte ptr [esi+1]
.text:00409668                 sub     ebx, 30h ; '0'
.text:0040966B                 cmp     ebx, 9
.text:0040966E                 ja      short loc_409602
.text:00409670                 mov     edx, [esp+5Ch+var_40]
.text:00409674                 test    edx, edx
.text:00409676                 js      loc_409765
.text:0040967C                 mov     [esp+5Ch+var_44], ecx
.text:00409680                 test    ecx, ecx
.text:00409682                 mov     ebp, 3Fh ; '?'
.text:00409687                 js      loc_409497
.text:0040968D
.text:0040968D loc_40968D:                             ; CODE XREF: sub_4093E0+392↓j
.text:0040968D                 inc     esi
.text:0040968E                 movsx   ebp, byte ptr [esi]
.text:00409691                 inc     esi
.text:00409692                 movzx   ecx, byte ptr [esi]
.text:00409695                 lea     ebx, [ebp-30h]
.text:00409698                 mov     [esp+5Ch+var_45], cl
.text:0040969C                 mov     ecx, 7
.text:004096A1
.text:004096A1 loc_4096A1:                             ; CODE XREF: sub_4093E0+2E1↓j
.text:004096A1                 lea     edx, [ebx+ebx*4]
.text:004096A4                 lea     ebx, [edx+edx]
.text:004096A7                 movsx   edx, [esp+5Ch+var_45]
.text:004096AC                 lea     ebp, [edx-30h]
.text:004096AF                 cmp     ebp, 9
.text:004096B2                 ja      short loc_4096C0
.text:004096B4                 inc     esi
.text:004096B5                 lea     ebx, [edx+ebx-30h]
.text:004096B9                 movzx   eax, byte ptr [esi]
.text:004096BC                 mov     [esp+5Ch+var_45], al
.text:004096C0
.text:004096C0 loc_4096C0:                             ; CODE XREF: sub_4093E0+2D2↑j
.text:004096C0                 dec     ecx
.text:004096C1                 jns     short loc_4096A1
.text:004096C3                 mov     ecx, [esp+5Ch+var_40]
.text:004096C7                 test    ecx, ecx
.text:004096C9                 js      short loc_409730
.text:004096CB
.text:004096CB loc_4096CB:                             ; CODE XREF: sub_4093E0+35E↓j
.text:004096CB                                         ; sub_4093E0+37A↓j ...
.text:004096CB                 movsx   edx, [esp+5Ch+var_45]
.text:004096D0                 sub     edx, 30h ; '0'
.text:004096D3                 cmp     edx, 9
.text:004096D6                 ja      short loc_4096E4
.text:004096D8
.text:004096D8 loc_4096D8:                             ; CODE XREF: sub_4093E0+302↓j
.text:004096D8                 inc     esi
.text:004096D9                 movsx   ecx, byte ptr [esi]
.text:004096DC                 sub     ecx, 30h ; '0'
.text:004096DF                 cmp     ecx, 9
.text:004096E2                 jbe     short loc_4096D8
.text:004096E4
.text:004096E4 loc_4096E4:                             ; CODE XREF: sub_4093E0+2F6↑j
.text:004096E4                 mov     ebp, [esp+5Ch+var_40]
.text:004096E8                 test    ebp, ebp
.text:004096EA                 js      short loc_409710
.text:004096EC
.text:004096EC loc_4096EC:                             ; CODE XREF: sub_4093E0+332↓j
.text:004096EC                                         ; sub_4093E0+343↓j
.text:004096EC                 mov     eax, [esp+5Ch+var_44]
.text:004096F0                 mov     ecx, [esp+5Ch+arg_0]
.text:004096F4                 mov     [ecx+4], ebx
.text:004096F7                 xor     ebx, ebx
.text:004096F9                 mov     [ecx], eax
.text:004096FB                 cmp     [esp+5Ch+var_40], 0
.text:00409700                 mov     [edi], esi
.text:00409702                 setz    bl
.text:00409705                 lea     ebp, [ebx+113h]
.text:0040970B                 jmp     loc_409497
.text:00409710 ; ---------------------------------------------------------------------------
.text:00409710
.text:00409710 loc_409710:                             ; CODE XREF: sub_4093E0+30A↑j
.text:00409710                 test    ebx, ebx
.text:00409712                 jz      short loc_4096EC
.text:00409714                 dec     [esp+5Ch+var_44]
.text:00409718                 jns     short loc_409725
.text:0040971A                 mov     edx, 3B9ACA00h
.text:0040971F                 sub     edx, ebx
.text:00409721                 mov     ebx, edx
.text:00409723                 jmp     short loc_4096EC
.text:00409725 ; ---------------------------------------------------------------------------
.text:00409725
.text:00409725 loc_409725:                             ; CODE XREF: sub_4093E0+338↑j
.text:00409725                 mov     ebp, 3Fh ; '?'
.text:0040972A                 jmp     loc_409497
.text:0040972A ; ---------------------------------------------------------------------------
.text:0040972F                 align 10h
.text:00409730
.text:00409730 loc_409730:                             ; CODE XREF: sub_4093E0+2E9↑j
.text:00409730                 movzx   edx, [esp+5Ch+var_45]
.text:00409735                 movsx   ebp, dl
.text:00409738                 sub     ebp, 30h ; '0'
.text:0040973B                 cmp     ebp, 9
.text:0040973E                 ja      short loc_4096CB
.text:00409740
.text:00409740 loc_409740:                             ; CODE XREF: sub_4093E0+378↓j
.text:00409740                 cmp     dl, 30h ; '0'
.text:00409743                 jnz     short loc_40975F
.text:00409745                 inc     esi
.text:00409746                 movzx   eax, byte ptr [esi]
.text:00409749                 movsx   ebp, al
.text:0040974C                 mov     dl, al
.text:0040974E                 mov     [esp+5Ch+var_45], al
.text:00409752                 sub     ebp, 30h ; '0'
.text:00409755                 cmp     ebp, 9
.text:00409758                 jbe     short loc_409740
.text:0040975A                 jmp     loc_4096CB
.text:0040975F ; ---------------------------------------------------------------------------
.text:0040975F
.text:0040975F loc_40975F:                             ; CODE XREF: sub_4093E0+363↑j
.text:0040975F                 inc     ebx
.text:00409760                 jmp     loc_4096CB
.text:00409765 ; ---------------------------------------------------------------------------
.text:00409765
.text:00409765 loc_409765:                             ; CODE XREF: sub_4093E0+296↑j
.text:00409765                 neg     ecx
.text:00409767                 mov     ebp, 3Fh ; '?'
.text:0040976C                 test    ecx, ecx
.text:0040976E                 mov     [esp+5Ch+var_44], ecx
.text:00409772                 jle     loc_40968D
.text:00409778                 jmp     loc_409497
.text:00409778 ; ---------------------------------------------------------------------------
.text:0040977D                 align 10h
.text:00409780
.text:00409780 loc_409780:                             ; CODE XREF: sub_4093E0+1A7↑j
.text:00409780                 mov     ecx, ds:_pctype
.text:00409786                 mov     ebp, [ecx]
.text:00409788                 movzx   eax, word ptr [ebp+edx*2+0]
.text:0040978D                 and     eax, 8
.text:00409790                 jmp     loc_40959D
.text:00409795 ; ---------------------------------------------------------------------------
.text:00409795
.text:00409795 loc_409795:                             ; CODE XREF: sub_4093E0+17C↑j
.text:00409795                 mov     [esp+5Ch+var_40], 0
.text:0040979D                 jmp     loc_4095B0
.text:004097A2 ; ---------------------------------------------------------------------------
.text:004097A2
.text:004097A2 loc_4097A2:                             ; CODE XREF: sub_4093E0+51↑j
.text:004097A2                                         ; sub_4093E0+173↑j
.text:004097A2                 mov     [esp+5Ch+var_40], 0FFFFFFFFh
.text:004097AA                 jmp     loc_409570
.text:004097AA ; ---------------------------------------------------------------------------
.text:004097AF                 align 10h
.text:004097B0
.text:004097B0 loc_4097B0:                             ; CODE XREF: sub_4093E0+39↑j
.text:004097B0                 inc     dword ptr [edi]
.text:004097B2                 jmp     loc_4093F0
.text:004097B7 ; ---------------------------------------------------------------------------
.text:004097B7
.text:004097B7 loc_4097B7:                             ; CODE XREF: sub_4093E0+21↑j
.text:004097B7                 mov     esi, ds:_pctype
.text:004097BD                 mov     ecx, [esi]
.text:004097BF                 movzx   eax, word ptr [ecx+edx*2]
.text:004097C3                 and     eax, 8
.text:004097C6                 jmp     loc_409417
.text:004097C6 sub_4093E0      endp
.text:004097C6
.text:004097C6 ; ---------------------------------------------------------------------------
.text:004097CB                 align 10h
.text:004097D0
.text:004097D0 ; =============== S U B R O U T I N E =======================================
.text:004097D0
.text:004097D0
.text:004097D0 sub_4097D0      proc near               ; CODE XREF: sub_407DC0+BB2↑p
.text:004097D0                                         ; sub_407DC0+C6D↑p
.text:004097D0                 xor     eax, eax
.text:004097D2                 retn
.text:004097D2 sub_4097D0      endp
.text:004097D2
.text:004097D2 ; ---------------------------------------------------------------------------
.text:004097D3 aTz             db 'TZ="',0             ; DATA XREF: sub_4097F0+8E↓o
.text:004097D8 ; const char aTz_0[]
.text:004097D8 aTz_0           db 'TZ',0               ; DATA XREF: sub_4097F0+2B6↓o
.text:004097D8                                         ; sub_4097F0:loc_409AEE↓o ...
.text:004097DB ; const char aXxxSLd02d[]
.text:004097DB aXxxSLd02d      db 'XXX%s%ld:%02d',0    ; DATA XREF: sub_4097F0+551↓o
.text:004097E9 asc_4097E9      db '-',0                ; DATA XREF: sub_4097F0+55C↓o
.text:004097EB                 align 10h
.text:004097F0
.text:004097F0 ; =============== S U B R O U T I N E =======================================
.text:004097F0
.text:004097F0
.text:004097F0 ; int __cdecl sub_4097F0(int, int, __time32_t *)
.text:004097F0 sub_4097F0      proc near               ; CODE XREF: sub_402430+7F4↑p
.text:004097F0                                         ; sub_4031F0+91↑p
.text:004097F0
.text:004097F0 Time            = dword ptr -2BCh
.text:004097F0 Type            = dword ptr -2B8h
.text:004097F0 Size            = dword ptr -2B4h
.text:004097F0 var_2B0         = dword ptr -2B0h
.text:004097F0 var_2AC         = dword ptr -2ACh
.text:004097F0 var_290         = dword ptr -290h
.text:004097F0 var_28C         = dword ptr -28Ch
.text:004097F0 var_288         = dword ptr -288h
.text:004097F0 var_284         = dword ptr -284h
.text:004097F0 var_280         = dword ptr -280h
.text:004097F0 var_27C         = dword ptr -27Ch
.text:004097F0 var_278         = dword ptr -278h
.text:004097F0 var_274         = dword ptr -274h
.text:004097F0 var_270         = dword ptr -270h
.text:004097F0 var_26C         = dword ptr -26Ch
.text:004097F0 var_268         = dword ptr -268h
.text:004097F0 var_264         = dword ptr -264h
.text:004097F0 var_260         = dword ptr -260h
.text:004097F0 var_25C         = dword ptr -25Ch
.text:004097F0 var_256         = byte ptr -256h
.text:004097F0 var_255         = byte ptr -255h
.text:004097F0 var_254         = dword ptr -254h
.text:004097F0 var_24D         = byte ptr -24Dh
.text:004097F0 Block           = dword ptr -24Ch
.text:004097F0 var_245         = byte ptr -245h
.text:004097F0 var_244         = dword ptr -244h
.text:004097F0 var_240         = dword ptr -240h
.text:004097F0 var_23C         = dword ptr -23Ch
.text:004097F0 var_238         = dword ptr -238h
.text:004097F0 var_234         = byte ptr -234h
.text:004097F0 Buffer          = byte ptr -22Ch
.text:004097F0 var_20C         = dword ptr -20Ch
.text:004097F0 var_208         = dword ptr -208h
.text:004097F0 var_204         = dword ptr -204h
.text:004097F0 Source          = byte ptr -1FCh
.text:004097F0 var_18C         = byte ptr -18Ch
.text:004097F0 var_11C         = dword ptr -11Ch
.text:004097F0 var_118         = dword ptr -118h
.text:004097F0 var_114         = dword ptr -114h
.text:004097F0 var_110         = dword ptr -110h
.text:004097F0 var_10C         = dword ptr -10Ch
.text:004097F0 var_108         = dword ptr -108h
.text:004097F0 var_104         = dword ptr -104h
.text:004097F0 var_100         = dword ptr -100h
.text:004097F0 var_FC          = dword ptr -0FCh
.text:004097F0 var_F8          = dword ptr -0F8h
.text:004097F0 var_F4          = dword ptr -0F4h
.text:004097F0 var_F0          = dword ptr -0F0h
.text:004097F0 var_EC          = dword ptr -0ECh
.text:004097F0 var_E8          = dword ptr -0E8h
.text:004097F0 var_E4          = dword ptr -0E4h
.text:004097F0 var_E0          = dword ptr -0E0h
.text:004097F0 var_DC          = dword ptr -0DCh
.text:004097F0 var_D8          = dword ptr -0D8h
.text:004097F0 var_D4          = dword ptr -0D4h
.text:004097F0 var_D0          = dword ptr -0D0h
.text:004097F0 var_CC          = dword ptr -0CCh
.text:004097F0 var_C8          = dword ptr -0C8h
.text:004097F0 var_C4          = byte ptr -0C4h
.text:004097F0 var_C0          = dword ptr -0C0h
.text:004097F0 var_BC          = dword ptr -0BCh
.text:004097F0 var_B8          = dword ptr -0B8h
.text:004097F0 var_B4          = dword ptr -0B4h
.text:004097F0 var_B0          = dword ptr -0B0h
.text:004097F0 var_AC          = dword ptr -0ACh
.text:004097F0 Str1            = dword ptr -0A8h
.text:004097F0 var_A0          = dword ptr -0A0h
.text:004097F0 Str2            = dword ptr -9Ch
.text:004097F0 var_90          = dword ptr -90h
.text:004097F0 var_7C          = dword ptr -7Ch
.text:004097F0 var_78          = dword ptr -78h
.text:004097F0 var_74          = dword ptr -74h
.text:004097F0 var_70          = dword ptr -70h
.text:004097F0 var_6C          = dword ptr -6Ch
.text:004097F0 var_68          = dword ptr -68h
.text:004097F0 var_64          = dword ptr -64h
.text:004097F0 var_60          = dword ptr -60h
.text:004097F0 var_5C          = dword ptr -5Ch
.text:004097F0 Tm              = tm ptr -4Ch
.text:004097F0 arg_0           = dword ptr  4
.text:004097F0 arg_4           = dword ptr  8
.text:004097F0 arg_8           = dword ptr  0Ch
.text:004097F0
.text:004097F0                 push    ebp
.text:004097F1                 push    edi
.text:004097F2                 push    esi
.text:004097F3                 push    ebx
.text:004097F4                 sub     esp, 2ACh
.text:004097FA                 mov     eax, [esp+2BCh+arg_8]
.text:00409801                 mov     [esp+2BCh+var_245], 0
.text:00409806                 mov     [esp+2BCh+Block], 0
.text:0040980E                 test    eax, eax
.text:00409810                 mov     [esp+2BCh+var_24D], 1
.text:00409815                 jz      loc_40A554
.text:0040981B
.text:0040981B loc_40981B:                             ; CODE XREF: sub_4097F0+D7F↓j
.text:0040981B                 mov     ecx, [eax+4]
.text:0040981E                 mov     [esp+2BCh+Time], eax ; Time
.text:00409821                 mov     [esp+2BCh+var_244], ecx
.text:00409825                 call    localtime
.text:0040982A                 xor     edx, edx
.text:0040982C                 mov     ebp, eax
.text:0040982E                 test    eax, eax
.text:00409830                 jz      loc_409AE1
.text:00409836                 lea     esi, [esi+0]
.text:00409839                 lea     edi, [edi+0]
.text:00409840
.text:00409840 loc_409840:                             ; CODE XREF: sub_4097F0+84↓j
.text:00409840                 mov     ecx, ds:__mb_cur_max
.text:00409846                 mov     eax, [esp+2BCh+arg_4]
.text:0040984D                 cmp     dword ptr [ecx], 1
.text:00409850                 movzx   edx, byte ptr [eax]
.text:00409853                 jz      loc_40A540
.text:00409859                 mov     [esp+2BCh+Type], 8 ; Type
.text:00409861                 mov     [esp+2BCh+Time], edx ; C
.text:00409864                 call    _isctype
.text:00409869
.text:00409869 loc_409869:                             ; CODE XREF: sub_4097F0+D5F↓j
.text:00409869                 test    eax, eax
.text:0040986B                 jz      short loc_409876
.text:0040986D                 inc     [esp+2BCh+arg_4]
.text:00409874                 jmp     short loc_409840
.text:00409876 ; ---------------------------------------------------------------------------
.text:00409876
.text:00409876 loc_409876:                             ; CODE XREF: sub_4097F0+7B↑j
.text:00409876                 cld
.text:00409877                 mov     esi, [esp+2BCh+arg_4]
.text:0040987E                 mov     edi, offset aTz ; "TZ=\""
.text:00409883                 mov     ecx, 4
.text:00409888                 repe cmpsb
.text:0040988A                 jnz     short loc_4098CD
.text:0040988C                 mov     edx, [esp+2BCh+arg_4]
.text:00409893                 mov     edi, 1
.text:00409898                 mov     ecx, [esp+2BCh+arg_4]
.text:0040989F                 add     edx, 4
.text:004098A2                 mov     ebx, edx
.text:004098A4                 mov     [esp+2BCh+var_254], edx
.text:004098A8                 movzx   eax, byte ptr [ecx+4]
.text:004098AC                 test    al, al
.text:004098AE                 jz      short loc_4098CD
.text:004098B0
.text:004098B0 loc_4098B0:                             ; CODE XREF: sub_4097F0+DB↓j
.text:004098B0                 cmp     al, 5Ch ; '\'
.text:004098B2                 jz      loc_40A519
.text:004098B8                 cmp     al, 22h ; '"'
.text:004098BA                 lea     edx, [ebx+1]
.text:004098BD                 jz      loc_40A41E
.text:004098C3
.text:004098C3 loc_4098C3:                             ; CODE XREF: sub_4097F0+CF4↓j
.text:004098C3                                         ; sub_4097F0+D36↓j ...
.text:004098C3                 movzx   eax, byte ptr [edx]
.text:004098C6                 inc     edi
.text:004098C7                 mov     ebx, edx
.text:004098C9                 test    al, al
.text:004098CB                 jnz     short loc_4098B0
.text:004098CD
.text:004098CD loc_4098CD:                             ; CODE XREF: sub_4097F0+9A↑j
.text:004098CD                                         ; sub_4097F0+BE↑j ...
.text:004098CD                 mov     [esp+2BCh+var_C4], 0
.text:004098D5                 mov     esi, 4
.text:004098DA                 mov     ecx, [ebp+14h]
.text:004098DD                 mov     [esp+2BCh+var_FC], esi
.text:004098E4                 mov     eax, [esp+2BCh+arg_4]
.text:004098EB                 mov     ebx, [ebp+10h]
.text:004098EE                 mov     edi, [ebp+0Ch]
.text:004098F1                 add     ecx, 76Ch
.text:004098F7                 mov     edx, [ebp+8]
.text:004098FA                 mov     [esp+2BCh+var_100], ecx
.text:00409901                 inc     ebx
.text:00409902                 mov     esi, [ebp+0]
.text:00409905                 mov     [esp+2BCh+var_F8], ebx
.text:0040990C                 mov     ecx, [ebp+4]
.text:0040990F                 mov     ebx, [ebp+20h]
.text:00409912                 mov     [esp+2BCh+var_11C], eax
.text:00409919                 xor     ebp, ebp
.text:0040991B                 mov     eax, [esp+2BCh+var_244]
.text:0040991F                 mov     [esp+2BCh+var_F4], edi
.text:00409926                 mov     edi, 2
.text:0040992B                 mov     [esp+2BCh+var_F0], edx
.text:00409932                 xor     edx, edx
.text:00409934                 mov     [esp+2BCh+var_EC], ecx
.text:0040993B                 xor     ecx, ecx
.text:0040993D                 mov     [esp+2BCh+var_E8], esi
.text:00409944                 xor     esi, esi
.text:00409946                 mov     [esp+2BCh+Tm.tm_isdst], ebx
.text:0040994D                 xor     ebx, ebx
.text:0040994F                 mov     [esp+2BCh+var_108], edi
.text:00409956                 xor     edi, edi
.text:00409958                 mov     [esp+2BCh+var_E4], eax
.text:0040995F                 xor     eax, eax
.text:00409961                 mov     [esp+2BCh+var_C8], edx
.text:00409968                 xor     edx, edx
.text:0040996A                 mov     [esp+2BCh+var_CC], ecx
.text:00409971                 xor     ecx, ecx
.text:00409973                 mov     [esp+2BCh+var_D0], esi
.text:0040997A                 xor     esi, esi
.text:0040997C                 mov     [esp+2BCh+var_D4], ebx
.text:00409983                 xor     ebx, ebx
.text:00409985                 mov     [esp+2BCh+var_DC], edi
.text:0040998C                 xor     edi, edi
.text:0040998E                 mov     [esp+2BCh+var_E0], ebp
.text:00409995                 xor     ebp, ebp
.text:00409997                 mov     [esp+2BCh+var_C0], edx
.text:0040999E                 lea     edx, [esp+2BCh+var_AC]
.text:004099A5                 mov     [esp+2BCh+var_BC], ecx
.text:004099AC                 xor     ecx, ecx
.text:004099AE                 mov     [esp+2BCh+var_B0], ebx
.text:004099B5                 mov     [esp+2BCh+var_D8], eax
.text:004099BC                 mov     [esp+2BCh+var_B4], esi
.text:004099C3                 mov     [esp+2BCh+var_B8], edi
.text:004099CA                 mov     [esp+2BCh+var_AC], ebp
.text:004099D1                 mov     ebx, ds:_tzname
.text:004099D7
.text:004099D7 loc_4099D7:                             ; CODE XREF: sub_4097F0+1FE↓j
.text:004099D7                 mov     [edx+0Ch], ecx
.text:004099DA                 mov     ebp, [ebx+ecx*4]
.text:004099DD                 inc     ecx
.text:004099DE                 mov     dword ptr [edx+8], 108h
.text:004099E5                 mov     [edx+4], ebp
.text:004099E8                 add     edx, 0Ch
.text:004099EB                 cmp     ecx, 1
.text:004099EE                 jle     short loc_4099D7
.text:004099F0                 xor     edx, edx
.text:004099F2                 mov     [esp+2BCh+var_90], edx
.text:004099F9                 mov     edx, [esp+2BCh+Str1]
.text:00409A00                 test    edx, edx
.text:00409A02                 jz      short loc_409A13
.text:00409A04                 mov     eax, [esp+2BCh+Str2]
.text:00409A0B                 test    eax, eax
.text:00409A0D                 jnz     loc_40A3F0
.text:00409A13
.text:00409A13 loc_409A13:                             ; CODE XREF: sub_4097F0+212↑j
.text:00409A13                                         ; sub_4097F0+C0E↓j ...
.text:00409A13                 lea     ebx, [esp+2BCh+var_11C]
.text:00409A1A                 mov     [esp+2BCh+Time], ebx
.text:00409A1D                 call    sub_407DC0
.text:00409A22                 test    eax, eax
.text:00409A24                 jnz     short loc_409A81
.text:00409A26                 cmp     [esp+2BCh+var_C4], 0
.text:00409A2E                 jnz     loc_40A3D0
.text:00409A34                 mov     ecx, [esp+2BCh+var_B0]
.text:00409A3B                 cmp     ecx, 1
.text:00409A3E                 ja      short loc_409A81
.text:00409A40                 mov     ebx, [esp+2BCh+var_C0]
.text:00409A47                 cmp     ebx, 1
.text:00409A4A                 ja      short loc_409A81
.text:00409A4C                 mov     edi, [esp+2BCh+var_BC]
.text:00409A53                 cmp     edi, 1
.text:00409A56                 ja      short loc_409A81
.text:00409A58                 mov     ebp, [esp+2BCh+var_B8]
.text:00409A5F                 mov     eax, [esp+2BCh+var_AC]
.text:00409A66                 mov     esi, ebp
.text:00409A68                 add     esi, eax
.text:00409A6A                 cmp     esi, 1
.text:00409A6D                 ja      short loc_409A81
.text:00409A6F                 test    ebp, ebp
.text:00409A71                 jz      loc_409AFC
.text:00409A77                 cmp     [esp+2BCh+var_110], 1
.text:00409A7F                 jle     short loc_409AFC
.text:00409A81
.text:00409A81 loc_409A81:                             ; CODE XREF: sub_4097F0+234↑j
.text:00409A81                                         ; sub_4097F0+24E↑j ...
.text:00409A81                 mov     [esp+2BCh+var_24D], 0
.text:00409A86
.text:00409A86 loc_409A86:                             ; CODE XREF: sub_4097F0+945↓j
.text:00409A86                                         ; sub_4097F0+BFB↓j
.text:00409A86                 cmp     [esp+2BCh+var_245], 0
.text:00409A8B                 jz      short loc_409AC3
.text:00409A8D                 movzx   ebx, [esp+2BCh+var_24D]
.text:00409A92                 mov     edx, [esp+2BCh+Block]
.text:00409A96                 test    edx, edx
.text:00409A98                 jz      short loc_409AEE
.text:00409A9A                 mov     [esp+2BCh+Size], 1 ; int
.text:00409AA2                 mov     ecx, [esp+2BCh+Block]
.text:00409AA6                 mov     [esp+2BCh+Time], offset aTz_0 ; "TZ"
.text:00409AAD                 mov     [esp+2BCh+Type], ecx ; Source
.text:00409AB1                 call    sub_40C6C0
.text:00409AB6
.text:00409AB6 loc_409AB6:                             ; CODE XREF: sub_4097F0+30A↓j
.text:00409AB6                 mov     [esp+2BCh+var_24D], bl
.text:00409ABA                 test    eax, eax
.text:00409ABC                 jz      short loc_409AC3
.text:00409ABE                 mov     [esp+2BCh+var_24D], 0
.text:00409AC3
.text:00409AC3 loc_409AC3:                             ; CODE XREF: sub_4097F0+29B↑j
.text:00409AC3                                         ; sub_4097F0+2CC↑j
.text:00409AC3                 lea     esi, [esp+2BCh+var_18C]
.text:00409ACA                 cmp     [esp+2BCh+Block], esi
.text:00409ACE                 jz      short loc_409ADC
.text:00409AD0                 mov     edi, [esp+2BCh+Block]
.text:00409AD4                 mov     [esp+2BCh+Time], edi ; Block
.text:00409AD7                 call    free
.text:00409ADC
.text:00409ADC loc_409ADC:                             ; CODE XREF: sub_4097F0+2DE↑j
.text:00409ADC                 movzx   edx, [esp+2BCh+var_24D]
.text:00409AE1
.text:00409AE1 loc_409AE1:                             ; CODE XREF: sub_4097F0+40↑j
.text:00409AE1                                         ; sub_4097F0+D77↓j
.text:00409AE1                 add     esp, 2ACh
.text:00409AE7                 mov     eax, edx
.text:00409AE9                 pop     ebx
.text:00409AEA                 pop     esi
.text:00409AEB                 pop     edi
.text:00409AEC                 pop     ebp
.text:00409AED                 retn
.text:00409AEE ; ---------------------------------------------------------------------------
.text:00409AEE
.text:00409AEE loc_409AEE:                             ; CODE XREF: sub_4097F0+2A8↑j
.text:00409AEE                 mov     [esp+2BCh+Time], offset aTz_0 ; "TZ"
.text:00409AF5                 call    sub_40C7A0
.text:00409AFA                 jmp     short loc_409AB6
.text:00409AFC ; ---------------------------------------------------------------------------
.text:00409AFC
.text:00409AFC loc_409AFC:                             ; CODE XREF: sub_4097F0+281↑j
.text:00409AFC                                         ; sub_4097F0+28F↑j
.text:00409AFC                 mov     edx, [esp+2BCh+var_104]
.text:00409B03                 mov     eax, [esp+2BCh+var_100]
.text:00409B0A                 mov     [esp+2BCh+var_20C], edx
.text:00409B11                 mov     edx, [esp+2BCh+var_FC]
.text:00409B18                 test    eax, eax
.text:00409B1A                 mov     [esp+2BCh+var_208], eax
.text:00409B21                 mov     [esp+2BCh+var_204], edx
.text:00409B28                 js      loc_40A3C3
.text:00409B2E                 cmp     edx, 2
.text:00409B31                 jz      loc_40A3AA
.text:00409B37
.text:00409B37 loc_409B37:                             ; CODE XREF: sub_4097F0+BC4↓j
.text:00409B37                                         ; sub_4097F0+BCE↓j ...
.text:00409B37                 mov     edx, [esp+2BCh+var_F8]
.text:00409B3E                 sub     eax, 76Ch
.text:00409B43                 mov     esi, [esp+2BCh+var_F4]
.text:00409B4A                 mov     [esp+2BCh+Tm.tm_year], eax
.text:00409B51                 dec     edx
.text:00409B52                 test    ecx, ecx
.text:00409B54                 mov     [esp+2BCh+Tm.tm_mon], edx
.text:00409B5B                 mov     [esp+2BCh+Tm.tm_mday], esi
.text:00409B62                 jnz     short loc_409B83
.text:00409B64                 mov     esi, [esp+2BCh+var_B4]
.text:00409B6B                 test    esi, esi
.text:00409B6D                 jz      loc_40A381
.text:00409B73                 test    ebx, ebx
.text:00409B75                 jnz     loc_40A381
.text:00409B7B                 test    edi, edi
.text:00409B7D                 jnz     loc_40A381
.text:00409B83
.text:00409B83 loc_409B83:                             ; CODE XREF: sub_4097F0+372↑j
.text:00409B83                 mov     eax, [esp+2BCh+var_108]
.text:00409B8A                 mov     esi, [esp+2BCh+var_F0]
.text:00409B91                 cmp     eax, 1
.text:00409B94                 jz      loc_40A360
.text:00409B9A                 cmp     eax, 1
.text:00409B9D                 jle     loc_40A33C
.text:00409BA3
.text:00409BA3 loc_409BA3:                             ; CODE XREF: sub_4097F0+B4E↓j
.text:00409BA3                 cmp     esi, 18h
.text:00409BA6                 sbb     edx, edx
.text:00409BA8                 not     edx
.text:00409BAA                 or      edx, esi
.text:00409BAC
.text:00409BAC loc_409BAC:                             ; CODE XREF: sub_4097F0+B5C↓j
.text:00409BAC                                         ; sub_4097F0+B6B↓j ...
.text:00409BAC                 mov     [esp+2BCh+Tm.tm_hour], edx
.text:00409BB3                 test    edx, edx
.text:00409BB5                 js      loc_409A81
.text:00409BBB                 mov     edx, [esp+2BCh+var_EC]
.text:00409BC2                 mov     esi, [esp+2BCh+var_E8]
.text:00409BC9                 mov     [esp+2BCh+Tm.tm_min], edx
.text:00409BD0                 mov     [esp+2BCh+Tm.tm_sec], esi
.text:00409BD7
.text:00409BD7 loc_409BD7:                             ; CODE XREF: sub_4097F0+BB5↓j
.text:00409BD7                 or      ebx, edi
.text:00409BD9                 or      ebx, ecx
.text:00409BDB                 setz    bl
.text:00409BDE                 movzx   edi, bl
.text:00409BE1                 dec     edi
.text:00409BE2                 or      [esp+2BCh+Tm.tm_isdst], edi
.text:00409BE9                 test    ebp, ebp
.text:00409BEB                 jz      short loc_409BFB
.text:00409BED                 mov     ebp, [esp+2BCh+var_110]
.text:00409BF4                 mov     [esp+2BCh+Tm.tm_isdst], ebp
.text:00409BFB
.text:00409BFB loc_409BFB:                             ; CODE XREF: sub_4097F0+3FB↑j
.text:00409BFB                 mov     edi, [esp+2BCh+Tm.tm_sec]
.text:00409C02                 mov     edx, [esp+2BCh+Tm.tm_min]
.text:00409C09                 mov     esi, [esp+2BCh+Tm.tm_hour]
.text:00409C10                 mov     [esp+2BCh+var_7C], edi
.text:00409C17                 mov     ecx, [esp+2BCh+Tm.tm_mday]
.text:00409C1E                 mov     ebp, [esp+2BCh+Tm.tm_mon]
.text:00409C25                 mov     [esp+2BCh+var_78], edx
.text:00409C2C                 mov     edi, [esp+2BCh+Tm.tm_wday]
.text:00409C33                 mov     ebx, [esp+2BCh+Tm.tm_year]
.text:00409C3A                 mov     [esp+2BCh+var_74], esi
.text:00409C41                 mov     edx, [esp+2BCh+Tm.tm_yday]
.text:00409C48                 mov     esi, [esp+2BCh+Tm.tm_isdst]
.text:00409C4F                 mov     [esp+2BCh+var_70], ecx
.text:00409C56                 lea     ecx, [esp+2BCh+Tm]
.text:00409C5D                 mov     [esp+2BCh+var_6C], ebp
.text:00409C64                 mov     [esp+2BCh+var_64], edi
.text:00409C6B                 lea     edi, [esp+2BCh+var_7C]
.text:00409C72                 mov     [esp+2BCh+Time], ecx ; Tm
.text:00409C75                 mov     [esp+2BCh+var_68], ebx
.text:00409C7C                 mov     [esp+2BCh+var_60], edx
.text:00409C83                 mov     [esp+2BCh+var_5C], esi
.text:00409C8A                 call    mktime
.text:00409C8F                 mov     [esp+2BCh+var_238], eax
.text:00409C96                 cmp     eax, 0FFFFFFFFh
.text:00409C99                 mov     ebp, eax
.text:00409C9B                 lea     ecx, [esp+2BCh+Tm]
.text:00409CA2                 jz      loc_40A31E
.text:00409CA8
.text:00409CA8 loc_409CA8:                             ; CODE XREF: sub_4097F0+B41↓j
.text:00409CA8                 mov     esi, [edi]
.text:00409CAA                 mov     eax, [edi+4]
.text:00409CAD                 mov     edx, [ecx]
.text:00409CAF                 mov     ebx, [ecx+4]
.text:00409CB2                 xor     edx, esi
.text:00409CB4                 xor     ebx, eax
.text:00409CB6                 mov     esi, [ecx+8]
.text:00409CB9                 or      edx, ebx
.text:00409CBB                 mov     eax, [edi+8]
.text:00409CBE                 mov     ebx, [ecx+0Ch]
.text:00409CC1                 xor     esi, eax
.text:00409CC3                 mov     eax, [edi+0Ch]
.text:00409CC6                 or      edx, esi
.text:00409CC8                 mov     esi, [ecx+10h]
.text:00409CCB                 xor     ebx, eax
.text:00409CCD                 mov     eax, [edi+10h]
.text:00409CD0                 or      edx, ebx
.text:00409CD2                 xor     esi, eax
.text:00409CD4                 or      edx, esi
.text:00409CD6                 mov     eax, [edi+14h]
.text:00409CD9                 mov     esi, [ecx+14h]
.text:00409CDC                 xor     esi, eax
.text:00409CDE                 or      edx, esi
.text:00409CE0                 jz      loc_409E72
.text:00409CE6
.text:00409CE6 loc_409CE6:                             ; CODE XREF: sub_4097F0+B47↓j
.text:00409CE6                 mov     ebp, [esp+2BCh+var_AC]
.text:00409CED                 test    ebp, ebp
.text:00409CEF                 jz      loc_409A81
.text:00409CF5                 mov     ebp, [esp+2BCh+var_10C]
.text:00409CFC                 test    ebp, ebp
.text:00409CFE                 mov     ecx, ebp
.text:00409D00                 js      loc_40A317
.text:00409D06
.text:00409D06 loc_409D06:                             ; CODE XREF: sub_4097F0+B29↓j
.text:00409D06                 mov     esi, 88888889h
.text:00409D0B                 mov     eax, ecx
.text:00409D0D                 mov     ebx, ecx
.text:00409D0F                 imul    esi
.text:00409D11                 sar     ebx, 1Fh
.text:00409D14                 lea     esi, [ecx+edx]
.text:00409D17                 sar     esi, 5
.text:00409D1A                 sub     esi, ebx
.text:00409D1C                 mov     edx, esi
.text:00409D1E                 shl     edx, 4
.text:00409D21                 sub     edx, esi
.text:00409D23                 shl     edx, 2
.text:00409D26                 sub     ecx, edx
.text:00409D28                 cmp     [esp+2BCh+var_245], 0
.text:00409D2D                 mov     [esp+2BCh+var_25C], ecx
.text:00409D31                 jz      loc_40A2C7
.text:00409D37
.text:00409D37 loc_409D37:                             ; CODE XREF: sub_4097F0+B14↓j
.text:00409D37                 mov     [esp+2BCh+var_2B0], esi
.text:00409D3B                 mov     eax, [esp+2BCh+var_25C]
.text:00409D3F                 mov     edx, ebp
.text:00409D41                 mov     [esp+2BCh+Type], offset aXxxSLd02d ; "XXX%s%ld:%02d"
.text:00409D49                 shr     edx, 1Fh
.text:00409D4C                 add     edx, offset asc_4097E9 ; "-"
.text:00409D52                 mov     [esp+2BCh+Size], edx
.text:00409D56                 lea     ebp, [esp+2BCh+Buffer]
.text:00409D5D                 mov     [esp+2BCh+var_2AC], eax
.text:00409D61                 mov     [esp+2BCh+Time], ebp ; Buffer
.text:00409D64                 call    sprintf
.text:00409D69                 mov     [esp+2BCh+Size], 1 ; int
.text:00409D71                 mov     [esp+2BCh+Type], ebp ; Source
.text:00409D75                 mov     [esp+2BCh+Time], offset aTz_0 ; "TZ"
.text:00409D7C                 call    sub_40C6C0
.text:00409D81                 test    eax, eax
.text:00409D83                 jnz     loc_409A81
.text:00409D89                 mov     [esp+2BCh+var_245], 1
.text:00409D8E                 mov     edx, [esp+2BCh+var_7C]
.text:00409D95                 mov     ebp, [esp+2BCh+var_78]
.text:00409D9C                 mov     ecx, [esp+2BCh+var_74]
.text:00409DA3                 mov     ebx, [esp+2BCh+var_70]
.text:00409DAA                 mov     [esp+2BCh+Tm.tm_sec], edx
.text:00409DB1                 mov     esi, [esp+2BCh+var_6C]
.text:00409DB8                 mov     [esp+2BCh+Tm.tm_min], ebp
.text:00409DBF                 mov     edx, [esp+2BCh+var_68]
.text:00409DC6                 mov     [esp+2BCh+Tm.tm_hour], ecx
.text:00409DCD                 mov     ebp, [esp+2BCh+var_64]
.text:00409DD4                 mov     [esp+2BCh+Tm.tm_mday], ebx
.text:00409DDB                 mov     ecx, [esp+2BCh+var_60]
.text:00409DE2                 mov     [esp+2BCh+Tm.tm_mon], esi
.text:00409DE9                 mov     ebx, [esp+2BCh+var_5C]
.text:00409DF0                 lea     esi, [esp+2BCh+Tm]
.text:00409DF7                 mov     [esp+2BCh+Tm.tm_wday], ebp
.text:00409DFE                 mov     [esp+2BCh+Tm.tm_yday], ecx
.text:00409E05                 mov     [esp+2BCh+Tm.tm_year], edx
.text:00409E0C                 mov     [esp+2BCh+Tm.tm_isdst], ebx
.text:00409E13                 mov     [esp+2BCh+Time], esi ; Tm
.text:00409E16                 call    mktime
.text:00409E1B                 mov     [esp+2BCh+var_23C], eax
.text:00409E22                 cmp     eax, 0FFFFFFFFh
.text:00409E25                 mov     ebp, eax
.text:00409E27                 lea     ecx, [esp+2BCh+Tm]
.text:00409E2E                 jz      loc_40A2A9
.text:00409E34
.text:00409E34 loc_409E34:                             ; CODE XREF: sub_4097F0+ACC↓j
.text:00409E34                 mov     esi, [edi]
.text:00409E36                 mov     eax, [edi+4]
.text:00409E39                 mov     edx, [ecx]
.text:00409E3B                 mov     ebx, [ecx+4]
.text:00409E3E                 xor     edx, esi
.text:00409E40                 xor     ebx, eax
.text:00409E42                 mov     esi, [ecx+8]
.text:00409E45                 or      edx, ebx
.text:00409E47                 mov     eax, [edi+8]
.text:00409E4A                 mov     ebx, [ecx+0Ch]
.text:00409E4D                 xor     esi, eax
.text:00409E4F                 mov     eax, [edi+0Ch]
.text:00409E52                 or      edx, esi
.text:00409E54                 mov     esi, [ecx+10h]
.text:00409E57                 xor     ebx, eax
.text:00409E59                 mov     eax, [edi+10h]
.text:00409E5C                 or      edx, ebx
.text:00409E5E                 mov     ebx, [ecx+14h]
.text:00409E61                 xor     esi, eax
.text:00409E63                 mov     eax, [edi+14h]
.text:00409E66                 or      edx, esi
.text:00409E68                 xor     ebx, eax
.text:00409E6A                 or      edx, ebx
.text:00409E6C                 jnz     loc_409A81
.text:00409E72
.text:00409E72 loc_409E72:                             ; CODE XREF: sub_4097F0+4F0↑j
.text:00409E72                 mov     edi, [esp+2BCh+var_BC]
.text:00409E79                 test    edi, edi
.text:00409E7B                 jz      loc_409F05
.text:00409E81                 mov     ecx, [esp+2BCh+var_C0]
.text:00409E88                 test    ecx, ecx
.text:00409E8A                 jnz     short loc_409F05
.text:00409E8C                 mov     edx, [esp+2BCh+Tm.tm_wday]
.text:00409E93                 mov     eax, 92492493h
.text:00409E98                 mov     ecx, [esp+2BCh+var_114]
.text:00409E9F                 mov     ebp, [esp+2BCh+var_118]
.text:00409EA6                 sub     ecx, edx
.text:00409EA8                 add     ecx, 7
.text:00409EAB                 imul    ecx
.text:00409EAD                 mov     edi, ecx
.text:00409EAF                 sar     edi, 1Fh
.text:00409EB2                 lea     esi, [edx+ecx]
.text:00409EB5                 sar     esi, 2
.text:00409EB8                 sub     esi, edi
.text:00409EBA                 lea     ebx, ds:0[esi*8]
.text:00409EC1                 sub     ebx, esi
.text:00409EC3                 lea     edx, ds:0[ebp*8]
.text:00409ECA                 sub     ecx, ebx
.text:00409ECC                 sub     edx, ebp
.text:00409ECE                 test    ebp, ebp
.text:00409ED0                 jle     short loc_409ED5
.text:00409ED2                 sub     edx, 7
.text:00409ED5
.text:00409ED5 loc_409ED5:                             ; CODE XREF: sub_4097F0+6E0↑j
.text:00409ED5                 lea     ebp, [edx+ecx]
.text:00409ED8                 mov     ecx, 0FFFFFFFFh
.text:00409EDD                 lea     eax, [esp+2BCh+Tm]
.text:00409EE4                 add     [esp+2BCh+Tm.tm_mday], ebp
.text:00409EEB                 mov     [esp+2BCh+Tm.tm_isdst], ecx
.text:00409EF2                 mov     [esp+2BCh+Time], eax ; Tm
.text:00409EF5                 call    mktime
.text:00409EFA                 cmp     eax, 0FFFFFFFFh
.text:00409EFD                 mov     ebp, eax
.text:00409EFF                 jz      loc_409A81
.text:00409F05
.text:00409F05 loc_409F05:                             ; CODE XREF: sub_4097F0+68B↑j
.text:00409F05                                         ; sub_4097F0+69A↑j
.text:00409F05                 mov     ebx, [esp+2BCh+var_AC]
.text:00409F0C                 test    ebx, ebx
.text:00409F0E                 jnz     loc_40A142
.text:00409F14
.text:00409F14 loc_409F14:                             ; CODE XREF: sub_4097F0+A94↓j
.text:00409F14                 mov     edx, [esp+2BCh+var_E0]
.text:00409F1B                 mov     esi, [esp+2BCh+var_DC]
.text:00409F22                 mov     edi, [esp+2BCh+var_D8]
.text:00409F29                 mov     [esp+2BCh+var_26C], edx
.text:00409F2D                 or      edx, esi
.text:00409F2F                 or      edx, edi
.text:00409F31                 jz      loc_409FD3
.text:00409F37                 mov     eax, [esp+2BCh+Tm.tm_year]
.text:00409F3E                 mov     ecx, [esp+2BCh+var_26C]
.text:00409F42                 mov     edx, [esp+2BCh+Tm.tm_mon]
.text:00409F49                 lea     ebp, [ecx+eax]
.text:00409F4C                 mov     ecx, [esp+2BCh+Tm.tm_mday]
.text:00409F53                 lea     ebx, [esi+edx]
.text:00409F56                 mov     [esp+2BCh+var_270], ebx
.text:00409F5A                 lea     ebx, [edi+ecx]
.text:00409F5D                 mov     [esp+2BCh+var_274], ebx
.text:00409F61                 xor     ebx, ebx
.text:00409F63                 cmp     ebp, eax
.text:00409F65                 setl    bl
.text:00409F68                 xor     eax, eax
.text:00409F6A                 cmp     [esp+2BCh+var_270], edx
.text:00409F6E                 mov     edx, edi
.text:00409F70                 mov     edi, [esp+2BCh+var_26C]
.text:00409F74                 setl    al
.text:00409F77                 shr     esi, 1Fh
.text:00409F7A                 xor     esi, eax
.text:00409F7C                 xor     eax, eax
.text:00409F7E                 cmp     [esp+2BCh+var_274], ecx
.text:00409F82                 setl    al
.text:00409F85                 shr     edx, 1Fh
.text:00409F88                 xor     edx, eax
.text:00409F8A                 test    edi, edi
.text:00409F8C                 js      loc_40A13A
.text:00409F92
.text:00409F92 loc_409F92:                             ; CODE XREF: sub_4097F0+94D↓j
.text:00409F92                 or      ebx, esi
.text:00409F94                 or      ebx, edx
.text:00409F96                 jnz     loc_409A81
.text:00409F9C                 mov     [esp+2BCh+Tm.tm_year], ebp
.text:00409FA3                 mov     eax, [esp+2BCh+var_270]
.text:00409FA7                 lea     ebp, [esp+2BCh+Tm]
.text:00409FAE                 mov     [esp+2BCh+Time], ebp ; Tm
.text:00409FB1                 mov     esi, [esp+2BCh+var_274]
.text:00409FB5                 mov     [esp+2BCh+Tm.tm_mon], eax
.text:00409FBC                 mov     [esp+2BCh+Tm.tm_mday], esi
.text:00409FC3                 call    mktime
.text:00409FC8                 cmp     eax, 0FFFFFFFFh
.text:00409FCB                 mov     ebp, eax
.text:00409FCD                 jz      loc_409A81
.text:00409FD3
.text:00409FD3 loc_409FD3:                             ; CODE XREF: sub_4097F0+741↑j
.text:00409FD3                 mov     edi, [esp+2BCh+var_E4]
.text:00409FDA                 mov     eax, 44B82FA1h
.text:00409FDF                 mov     ebx, [esp+2BCh+var_C8]
.text:00409FE6                 add     ebx, edi
.text:00409FE8                 imul    ebx
.text:00409FEA                 mov     edi, [esp+2BCh+var_D0]
.text:00409FF1                 mov     eax, ebx
.text:00409FF3                 mov     esi, edx
.text:00409FF5                 sar     esi, 1Ch
.text:00409FF8                 cdq
.text:00409FF9                 sub     esi, edx
.text:00409FFB                 imul    esi, 3B9ACA00h
.text:0040A001                 sub     eax, esi
.text:0040A003                 mov     ecx, eax
.text:0040A005                 add     ecx, 3B9ACA00h
.text:0040A00B                 mov     eax, 44B82FA1h
.text:0040A010                 imul    ecx
.text:0040A012                 mov     eax, ecx
.text:0040A014                 mov     esi, edx
.text:0040A016                 sar     esi, 1Ch
.text:0040A019                 cdq
.text:0040A01A                 sub     esi, edx
.text:0040A01C                 mov     eax, 44B82FA1h
.text:0040A021                 imul    esi, 3B9ACA00h
.text:0040A027                 mov     edx, [esp+2BCh+var_CC]
.text:0040A02E                 sub     ecx, esi
.text:0040A030                 mov     esi, [esp+2BCh+var_D4]
.text:0040A037                 mov     [esp+2BCh+var_278], ecx
.text:0040A03B                 mov     ecx, edi
.text:0040A03D                 imul    esi, 0E10h
.text:0040A043                 shl     ecx, 4
.text:0040A046                 sub     ecx, edi
.text:0040A048                 shl     ecx, 2
.text:0040A04B                 mov     [esp+2BCh+var_27C], esi
.text:0040A04F                 add     esi, ebp
.text:0040A051                 mov     [esp+2BCh+var_280], esi
.text:0040A055                 add     esi, ecx
.text:0040A057                 mov     [esp+2BCh+var_284], esi
.text:0040A05B                 add     esi, edx
.text:0040A05D                 mov     edx, [esp+2BCh+var_278]
.text:0040A061                 mov     [esp+2BCh+var_288], esi
.text:0040A065                 mov     esi, 91A2B3C5h
.text:0040A06A                 sub     ebx, edx
.text:0040A06C                 imul    ebx
.text:0040A06E                 mov     eax, [esp+2BCh+var_288]
.text:0040A072                 sar     ebx, 1Fh
.text:0040A075                 sar     edx, 1Ch
.text:0040A078                 sub     edx, ebx
.text:0040A07A                 add     eax, edx
.text:0040A07C                 mov     [esp+2BCh+var_290], eax
.text:0040A080                 mov     eax, [esp+2BCh+var_27C]
.text:0040A084                 mov     [esp+2BCh+var_28C], edx
.text:0040A088                 imul    esi
.text:0040A08A                 mov     eax, [esp+2BCh+var_27C]
.text:0040A08E                 mov     esi, [esp+2BCh+var_27C]
.text:0040A092                 mov     ebx, edx
.text:0040A094                 add     ebx, eax
.text:0040A096                 mov     edx, [esp+2BCh+var_D4]
.text:0040A09D                 sar     esi, 1Fh
.text:0040A0A0                 mov     eax, ecx
.text:0040A0A2                 sar     ebx, 0Bh
.text:0040A0A5                 sub     ebx, esi
.text:0040A0A7                 mov     esi, 88888889h
.text:0040A0AC                 xor     ebx, edx
.text:0040A0AE                 imul    esi
.text:0040A0B0                 mov     esi, ecx
.text:0040A0B2                 sar     esi, 1Fh
.text:0040A0B5                 add     edx, ecx
.text:0040A0B7                 sar     edx, 5
.text:0040A0BA                 sub     edx, esi
.text:0040A0BC                 xor     edx, edi
.text:0040A0BE                 mov     esi, [esp+2BCh+var_284]
.text:0040A0C2                 or      ebx, edx
.text:0040A0C4                 xor     edx, edx
.text:0040A0C6                 mov     edi, [esp+2BCh+var_280]
.text:0040A0CA                 cmp     [esp+2BCh+var_280], ebp
.text:0040A0CE                 mov     ebp, [esp+2BCh+var_27C]
.text:0040A0D2                 setl    dl
.text:0040A0D5                 shr     ebp, 1Fh
.text:0040A0D8                 xor     eax, eax
.text:0040A0DA                 xor     ebp, edx
.text:0040A0DC                 or      ebx, ebp
.text:0040A0DE                 mov     ebp, [esp+2BCh+var_CC]
.text:0040A0E5                 cmp     [esp+2BCh+var_284], edi
.text:0040A0E9                 mov     edi, [esp+2BCh+var_28C]
.text:0040A0ED                 setl    al
.text:0040A0F0                 shr     ecx, 1Fh
.text:0040A0F3                 xor     edx, edx
.text:0040A0F5                 xor     ecx, eax
.text:0040A0F7                 or      ebx, ecx
.text:0040A0F9                 mov     ecx, [esp+2BCh+var_288]
.text:0040A0FD                 cmp     [esp+2BCh+var_288], esi
.text:0040A101                 setl    dl
.text:0040A104                 shr     ebp, 1Fh
.text:0040A107                 xor     ebp, edx
.text:0040A109                 or      ebx, ebp
.text:0040A10B                 xor     edx, edx
.text:0040A10D                 cmp     [esp+2BCh+var_290], ecx
.text:0040A111                 setl    dl
.text:0040A114                 shr     edi, 1Fh
.text:0040A117                 xor     edi, edx
.text:0040A119                 or      ebx, edi
.text:0040A11B                 jnz     loc_409A81
.text:0040A121                 mov     ebx, [esp+2BCh+arg_0]
.text:0040A128                 mov     eax, [esp+2BCh+var_290]
.text:0040A12C                 mov     ebp, [esp+2BCh+var_278]
.text:0040A130                 mov     [ebx], eax
.text:0040A132                 mov     [ebx+4], ebp
.text:0040A135                 jmp     loc_409A86
.text:0040A13A ; ---------------------------------------------------------------------------
.text:0040A13A
.text:0040A13A loc_40A13A:                             ; CODE XREF: sub_4097F0+79C↑j
.text:0040A13A                 xor     ebx, 1
.text:0040A13D                 jmp     loc_409F92
.text:0040A142 ; ---------------------------------------------------------------------------
.text:0040A142
.text:0040A142 loc_40A142:                             ; CODE XREF: sub_4097F0+71E↑j
.text:0040A142                 mov     [esp+2BCh+var_240], ebp
.text:0040A146                 mov     edx, [esp+2BCh+var_10C]
.text:0040A14D                 lea     esi, [esp+2BCh+var_240]
.text:0040A151                 mov     [esp+2BCh+Time], esi ; Time
.text:0040A154                 mov     edi, edx
.text:0040A156                 shl     edi, 4
.text:0040A159                 sub     edi, edx
.text:0040A15B                 shl     edi, 2
.text:0040A15E                 mov     [esp+2BCh+var_260], edi
.text:0040A162                 call    gmtime
.text:0040A167                 mov     [esp+2BCh+var_264], eax
.text:0040A16B                 test    eax, eax
.text:0040A16D                 jz      loc_409A81
.text:0040A173                 mov     eax, [esp+2BCh+Tm.tm_year]
.text:0040A17A                 test    al, 3
.text:0040A17C                 jnz     loc_40A29B
.text:0040A182                 sar     eax, 2
.text:0040A185                 lea     esi, [eax+1DAh]
.text:0040A18B
.text:0040A18B loc_40A18B:                             ; CODE XREF: sub_4097F0+AB4↓j
.text:0040A18B                 mov     ecx, [esp+2BCh+var_264]
.text:0040A18F                 mov     eax, [ecx+14h]
.text:0040A192                 test    al, 3
.text:0040A194                 mov     [esp+2BCh+var_268], eax
.text:0040A198                 jnz     loc_40A289
.text:0040A19E                 sar     eax, 2
.text:0040A1A1                 lea     edi, [eax+1DAh]
.text:0040A1A7
.text:0040A1A7 loc_40A1A7:                             ; CODE XREF: sub_4097F0+AA6↓j
.text:0040A1A7                 mov     ebx, 51EB851Fh
.text:0040A1AC                 mov     eax, esi
.text:0040A1AE                 mov     ecx, esi
.text:0040A1B0                 imul    ebx
.text:0040A1B2                 sar     ecx, 1Fh
.text:0040A1B5                 sar     edx, 3
.text:0040A1B8                 sub     edx, ecx
.text:0040A1BA                 lea     ecx, [edx+edx*4]
.text:0040A1BD                 lea     eax, [ecx+ecx*4]
.text:0040A1C0                 mov     ecx, esi
.text:0040A1C2                 sub     ecx, eax
.text:0040A1C4                 sub     esi, edi
.text:0040A1C6                 shr     ecx, 1Fh
.text:0040A1C9                 mov     eax, edi
.text:0040A1CB                 sub     edx, ecx
.text:0040A1CD                 mov     ecx, edx
.text:0040A1CF                 imul    ebx
.text:0040A1D1                 mov     ebx, edi
.text:0040A1D3                 sar     ebx, 1Fh
.text:0040A1D6                 sar     edx, 3
.text:0040A1D9                 sub     edx, ebx
.text:0040A1DB                 lea     ebx, [edx+edx*4]
.text:0040A1DE                 lea     eax, [ebx+ebx*4]
.text:0040A1E1                 mov     ebx, edi
.text:0040A1E3                 sub     ebx, eax
.text:0040A1E5                 mov     eax, ebx
.text:0040A1E7                 shr     eax, 1Fh
.text:0040A1EA                 mov     ebx, ecx
.text:0040A1EC                 sub     edx, eax
.text:0040A1EE                 sar     ebx, 2
.text:0040A1F1                 mov     eax, edx
.text:0040A1F3                 sub     ecx, eax
.text:0040A1F5                 sar     edx, 2
.text:0040A1F8                 sub     esi, ecx
.text:0040A1FA                 sub     ebx, edx
.text:0040A1FC                 lea     edi, [ebx+esi]
.text:0040A1FF                 mov     edx, [esp+2BCh+Tm.tm_year]
.text:0040A206                 mov     esi, [esp+2BCh+var_268]
.text:0040A20A                 mov     ebx, [esp+2BCh+Tm.tm_yday]
.text:0040A211                 sub     edx, esi
.text:0040A213                 lea     ecx, [edx+edx*8]
.text:0040A216                 lea     esi, [edx+ecx*8]
.text:0040A219                 lea     ecx, [esi+esi*4]
.text:0040A21C                 mov     esi, [esp+2BCh+var_264]
.text:0040A220                 add     ecx, edi
.text:0040A222                 mov     edx, [esi+1Ch]
.text:0040A225                 mov     eax, [esi+4]
.text:0040A228                 sub     ebx, edx
.text:0040A22A                 add     ecx, ebx
.text:0040A22C                 lea     edi, [ecx+ecx*2]
.text:0040A22F                 mov     edx, [esp+2BCh+Tm.tm_hour]
.text:0040A236                 mov     ecx, [esi+8]
.text:0040A239                 sub     edx, ecx
.text:0040A23B                 lea     ecx, [edx+edi*8]
.text:0040A23E                 mov     edx, [esp+2BCh+Tm.tm_min]
.text:0040A245                 mov     ebx, ecx
.text:0040A247                 shl     ebx, 4
.text:0040A24A                 sub     ebx, ecx
.text:0040A24C                 sub     edx, eax
.text:0040A24E                 mov     ecx, [esp+2BCh+Tm.tm_sec]
.text:0040A255                 lea     edi, [edx+ebx*4]
.text:0040A258                 mov     eax, [esi]
.text:0040A25A                 mov     ebx, edi
.text:0040A25C                 shl     ebx, 4
.text:0040A25F                 mov     esi, [esp+2BCh+var_260]
.text:0040A263                 sub     ebx, edi
.text:0040A265                 sub     ecx, eax
.text:0040A267                 lea     edi, [ecx+ebx*4]
.text:0040A26A                 sub     esi, edi
.text:0040A26C                 mov     ecx, ebp
.text:0040A26E                 sub     ecx, esi
.text:0040A270                 xor     edx, edx
.text:0040A272                 cmp     ebp, ecx
.text:0040A274                 setl    dl
.text:0040A277                 shr     esi, 1Fh
.text:0040A27A                 cmp     edx, esi
.text:0040A27C                 jnz     loc_409A81
.text:0040A282                 mov     ebp, ecx
.text:0040A284                 jmp     loc_409F14
.text:0040A289 ; ---------------------------------------------------------------------------
.text:0040A289
.text:0040A289 loc_40A289:                             ; CODE XREF: sub_4097F0+9A8↑j
.text:0040A289                 mov     ebx, [esp+2BCh+var_268]
.text:0040A28D                 sar     ebx, 2
.text:0040A290                 lea     edi, [ebx+1DBh]
.text:0040A296                 jmp     loc_40A1A7
.text:0040A29B ; ---------------------------------------------------------------------------
.text:0040A29B
.text:0040A29B loc_40A29B:                             ; CODE XREF: sub_4097F0+98C↑j
.text:0040A29B                 sar     eax, 2
.text:0040A29E                 lea     esi, [eax+1DBh]
.text:0040A2A4                 jmp     loc_40A18B
.text:0040A2A9 ; ---------------------------------------------------------------------------
.text:0040A2A9
.text:0040A2A9 loc_40A2A9:                             ; CODE XREF: sub_4097F0+63E↑j
.text:0040A2A9                 lea     esi, [esp+2BCh+var_23C]
.text:0040A2B0                 mov     [esp+2BCh+Time], esi ; Time
.text:0040A2B3                 call    localtime
.text:0040A2B8                 test    eax, eax
.text:0040A2BA                 mov     ecx, eax
.text:0040A2BC                 jnz     loc_409E34
.text:0040A2C2                 jmp     loc_409A81
.text:0040A2C7 ; ---------------------------------------------------------------------------
.text:0040A2C7
.text:0040A2C7 loc_40A2C7:                             ; CODE XREF: sub_4097F0+541↑j
.text:0040A2C7                 mov     [esp+2BCh+Time], offset aTz_0 ; "TZ"
.text:0040A2CE                 call    getenv
.text:0040A2D3                 test    eax, eax
.text:0040A2D5                 mov     ebx, eax
.text:0040A2D7                 jz      short loc_40A300
.text:0040A2D9                 mov     [esp+2BCh+Time], eax ; Str
.text:0040A2DC                 call    strlen
.text:0040A2E1                 inc     eax
.text:0040A2E2                 cmp     eax, 64h ; 'd'
.text:0040A2E5                 ja      short loc_40A309
.text:0040A2E7                 mov     [esp+2BCh+Size], eax ; Size
.text:0040A2EB                 lea     ecx, [esp+2BCh+var_18C]
.text:0040A2F2                 mov     [esp+2BCh+Type], ebx ; Src
.text:0040A2F6                 mov     [esp+2BCh+Time], ecx ; void *
.text:0040A2F9                 call    memcpy
.text:0040A2FE
.text:0040A2FE loc_40A2FE:                             ; CODE XREF: sub_4097F0+B25↓j
.text:0040A2FE                 mov     ebx, eax
.text:0040A300
.text:0040A300 loc_40A300:                             ; CODE XREF: sub_4097F0+AE7↑j
.text:0040A300                 mov     [esp+2BCh+Block], ebx
.text:0040A304                 jmp     loc_409D37
.text:0040A309 ; ---------------------------------------------------------------------------
.text:0040A309
.text:0040A309 loc_40A309:                             ; CODE XREF: sub_4097F0+AF5↑j
.text:0040A309                 mov     [esp+2BCh+Type], eax ; size_t
.text:0040A30D                 mov     [esp+2BCh+Time], ebx ; void *
.text:0040A310                 call    sub_406AD0
.text:0040A315                 jmp     short loc_40A2FE
.text:0040A317 ; ---------------------------------------------------------------------------
.text:0040A317
.text:0040A317 loc_40A317:                             ; CODE XREF: sub_4097F0+510↑j
.text:0040A317                 neg     ecx
.text:0040A319                 jmp     loc_409D06
.text:0040A31E ; ---------------------------------------------------------------------------
.text:0040A31E
.text:0040A31E loc_40A31E:                             ; CODE XREF: sub_4097F0+4B2↑j
.text:0040A31E                 lea     ebx, [esp+2BCh+var_238]
.text:0040A325                 mov     [esp+2BCh+Time], ebx ; Time
.text:0040A328                 call    localtime
.text:0040A32D                 test    eax, eax
.text:0040A32F                 mov     ecx, eax
.text:0040A331                 jnz     loc_409CA8
.text:0040A337                 jmp     loc_409CE6
.text:0040A33C ; ---------------------------------------------------------------------------
.text:0040A33C
.text:0040A33C loc_40A33C:                             ; CODE XREF: sub_4097F0+3AD↑j
.text:0040A33C                 test    eax, eax
.text:0040A33E                 jnz     loc_409BA3
.text:0040A344                 lea     eax, [esi-1]
.text:0040A347                 mov     edx, esi
.text:0040A349                 cmp     eax, 0Ah
.text:0040A34C                 jbe     loc_409BAC
.text:0040A352                 xor     edx, edx
.text:0040A354                 cmp     esi, 0Ch
.text:0040A357                 setz    dl
.text:0040A35A                 dec     edx
.text:0040A35B                 jmp     loc_409BAC
.text:0040A360 ; ---------------------------------------------------------------------------
.text:0040A360
.text:0040A360 loc_40A360:                             ; CODE XREF: sub_4097F0+3A4↑j
.text:0040A360                 lea     edx, [esi-1]
.text:0040A363                 cmp     edx, 0Ah
.text:0040A366                 ja      short loc_40A370
.text:0040A368                 lea     edx, [esi+0Ch]
.text:0040A36B                 jmp     loc_409BAC
.text:0040A370 ; ---------------------------------------------------------------------------
.text:0040A370
.text:0040A370 loc_40A370:                             ; CODE XREF: sub_4097F0+B76↑j
.text:0040A370                 xor     edx, edx
.text:0040A372                 cmp     esi, 0Ch
.text:0040A375                 setz    dl
.text:0040A378                 dec     edx
.text:0040A379                 or      edx, 0Ch
.text:0040A37C                 jmp     loc_409BAC
.text:0040A381 ; ---------------------------------------------------------------------------
.text:0040A381
.text:0040A381 loc_40A381:                             ; CODE XREF: sub_4097F0+37D↑j
.text:0040A381                                         ; sub_4097F0+385↑j ...
.text:0040A381                 xor     edx, edx
.text:0040A383                 xor     esi, esi
.text:0040A385                 mov     [esp+2BCh+Tm.tm_sec], edx
.text:0040A38C                 xor     edx, edx
.text:0040A38E                 mov     [esp+2BCh+Tm.tm_min], esi
.text:0040A395                 xor     esi, esi
.text:0040A397                 mov     [esp+2BCh+Tm.tm_hour], edx
.text:0040A39E                 mov     [esp+2BCh+var_E4], esi
.text:0040A3A5                 jmp     loc_409BD7
.text:0040A3AA ; ---------------------------------------------------------------------------
.text:0040A3AA
.text:0040A3AA loc_40A3AA:                             ; CODE XREF: sub_4097F0+341↑j
.text:0040A3AA                 cmp     eax, 44h ; 'D'
.text:0040A3AD                 jg      short loc_40A3B9
.text:0040A3AF                 add     eax, 7D0h
.text:0040A3B4                 jmp     loc_409B37
.text:0040A3B9 ; ---------------------------------------------------------------------------
.text:0040A3B9
.text:0040A3B9 loc_40A3B9:                             ; CODE XREF: sub_4097F0+BBD↑j
.text:0040A3B9                 add     eax, 76Ch
.text:0040A3BE                 jmp     loc_409B37
.text:0040A3C3 ; ---------------------------------------------------------------------------
.text:0040A3C3
.text:0040A3C3 loc_40A3C3:                             ; CODE XREF: sub_4097F0+338↑j
.text:0040A3C3                 neg     eax
.text:0040A3C5                 jmp     loc_409B37
.text:0040A3C5 ; ---------------------------------------------------------------------------
.text:0040A3CA                 align 10h
.text:0040A3D0
.text:0040A3D0 loc_40A3D0:                             ; CODE XREF: sub_4097F0+23E↑j
.text:0040A3D0                 mov     edx, [esp+2BCh+var_E8]
.text:0040A3D7                 mov     ecx, [esp+2BCh+var_E4]
.text:0040A3DE                 mov     ebp, [esp+2BCh+arg_0]
.text:0040A3E5                 mov     [ebp+0], edx
.text:0040A3E8                 mov     [ebp+4], ecx
.text:0040A3EB                 jmp     loc_409A86
.text:0040A3F0 ; ---------------------------------------------------------------------------
.text:0040A3F0
.text:0040A3F0 loc_40A3F0:                             ; CODE XREF: sub_4097F0+21D↑j
.text:0040A3F0                 mov     [esp+2BCh+Type], eax ; Str2
.text:0040A3F4                 mov     [esp+2BCh+Time], edx ; Str1
.text:0040A3F7                 call    strcmp
.text:0040A3FC                 test    eax, eax
.text:0040A3FE                 jnz     loc_409A13
.text:0040A404                 mov     esi, 0FFFFFFFFh
.text:0040A409                 xor     edi, edi
.text:0040A40B                 mov     [esp+2BCh+var_A0], esi
.text:0040A412                 mov     [esp+2BCh+Str2], edi
.text:0040A419                 jmp     loc_409A13
.text:0040A41E ; ---------------------------------------------------------------------------
.text:0040A41E
.text:0040A41E loc_40A41E:                             ; CODE XREF: sub_4097F0+CD↑j
.text:0040A41E                 mov     [esp+2BCh+Time], offset aTz_0 ; "TZ"
.text:0040A425                 cmp     edi, 64h ; 'd'
.text:0040A428                 setnbe  [esp+2BCh+var_255]
.text:0040A42D                 call    getenv
.text:0040A432                 test    eax, eax
.text:0040A434                 mov     ebx, eax
.text:0040A436                 jz      short loc_40A463
.text:0040A438                 mov     [esp+2BCh+Time], eax ; Str
.text:0040A43B                 call    strlen
.text:0040A440                 inc     eax
.text:0040A441                 cmp     eax, 64h ; 'd'
.text:0040A444                 ja      loc_40A508
.text:0040A44A                 mov     [esp+2BCh+Size], eax ; Size
.text:0040A44E                 lea     eax, [esp+2BCh+var_18C]
.text:0040A455                 mov     [esp+2BCh+Type], ebx ; Src
.text:0040A459                 mov     [esp+2BCh+Time], eax ; void *
.text:0040A45C                 call    memcpy
.text:0040A461
.text:0040A461 loc_40A461:                             ; CODE XREF: sub_4097F0+D24↓j
.text:0040A461                 mov     ebx, eax
.text:0040A463
.text:0040A463 loc_40A463:                             ; CODE XREF: sub_4097F0+C46↑j
.text:0040A463                 cmp     [esp+2BCh+var_255], 0
.text:0040A468                 mov     [esp+2BCh+Block], ebx
.text:0040A46C                 jnz     loc_40A4F9
.text:0040A472                 lea     esi, [esp+2BCh+Source]
.text:0040A479
.text:0040A479 loc_40A479:                             ; CODE XREF: sub_4097F0+D13↓j
.text:0040A479                 mov     ebx, [esp+2BCh+var_254]
.text:0040A47D                 mov     edx, esi
.text:0040A47F                 movzx   eax, byte ptr [ebx]
.text:0040A482                 cmp     al, 22h ; '"'
.text:0040A484                 jz      short loc_40A4A1
.text:0040A486                 lea     esi, [esi+0]
.text:0040A489                 lea     edi, [edi+0]
.text:0040A490
.text:0040A490 loc_40A490:                             ; CODE XREF: sub_4097F0+CAF↓j
.text:0040A490                 mov     ecx, edx
.text:0040A492                 inc     edx
.text:0040A493                 cmp     al, 5Ch ; '\'
.text:0040A495                 jz      short loc_40A4F3
.text:0040A497
.text:0040A497 loc_40A497:                             ; CODE XREF: sub_4097F0+D07↓j
.text:0040A497                 mov     [ecx], al
.text:0040A499                 inc     ebx
.text:0040A49A                 movzx   eax, byte ptr [ebx]
.text:0040A49D                 cmp     al, 22h ; '"'
.text:0040A49F                 jnz     short loc_40A490
.text:0040A4A1
.text:0040A4A1 loc_40A4A1:                             ; CODE XREF: sub_4097F0+C94↑j
.text:0040A4A1                 mov     byte ptr [edx], 0
.text:0040A4A4                 mov     [esp+2BCh+Size], 1 ; int
.text:0040A4AC                 mov     [esp+2BCh+Type], esi ; Source
.text:0040A4B0                 mov     [esp+2BCh+Time], offset aTz_0 ; "TZ"
.text:0040A4B7                 call    sub_40C6C0
.text:0040A4BC                 test    eax, eax
.text:0040A4BE                 setz    [esp+2BCh+var_256]
.text:0040A4C3                 cmp     [esp+2BCh+var_255], 0
.text:0040A4C8                 jnz     short loc_40A4E9
.text:0040A4CA
.text:0040A4CA loc_40A4CA:                             ; CODE XREF: sub_4097F0+D01↓j
.text:0040A4CA                 cmp     [esp+2BCh+var_256], 0
.text:0040A4CF                 jz      loc_409A81
.text:0040A4D5                 mov     [esp+2BCh+var_245], 1
.text:0040A4DA                 inc     ebx
.text:0040A4DB                 mov     edx, ebx
.text:0040A4DD                 mov     [esp+2BCh+arg_4], ebx
.text:0040A4E4                 jmp     loc_4098C3
.text:0040A4E9 ; ---------------------------------------------------------------------------
.text:0040A4E9
.text:0040A4E9 loc_40A4E9:                             ; CODE XREF: sub_4097F0+CD8↑j
.text:0040A4E9                 mov     [esp+2BCh+Time], esi ; Block
.text:0040A4EC                 call    free
.text:0040A4F1                 jmp     short loc_40A4CA
.text:0040A4F3 ; ---------------------------------------------------------------------------
.text:0040A4F3
.text:0040A4F3 loc_40A4F3:                             ; CODE XREF: sub_4097F0+CA5↑j
.text:0040A4F3                 inc     ebx
.text:0040A4F4                 movzx   eax, byte ptr [ebx]
.text:0040A4F7                 jmp     short loc_40A497
.text:0040A4F9 ; ---------------------------------------------------------------------------
.text:0040A4F9
.text:0040A4F9 loc_40A4F9:                             ; CODE XREF: sub_4097F0+C7C↑j
.text:0040A4F9                 mov     [esp+2BCh+Time], edi ; size_t
.text:0040A4FC                 call    sub_406950
.text:0040A501                 mov     esi, eax
.text:0040A503                 jmp     loc_40A479
.text:0040A508 ; ---------------------------------------------------------------------------
.text:0040A508
.text:0040A508 loc_40A508:                             ; CODE XREF: sub_4097F0+C54↑j
.text:0040A508                 mov     [esp+2BCh+Type], eax ; size_t
.text:0040A50C                 mov     [esp+2BCh+Time], ebx ; void *
.text:0040A50F                 call    sub_406AD0
.text:0040A514                 jmp     loc_40A461
.text:0040A519 ; ---------------------------------------------------------------------------
.text:0040A519
.text:0040A519 loc_40A519:                             ; CODE XREF: sub_4097F0+C2↑j
.text:0040A519                 inc     ebx
.text:0040A51A                 movzx   eax, byte ptr [ebx]
.text:0040A51D                 cmp     al, 5Ch ; '\'
.text:0040A51F                 jz      short loc_40A531
.text:0040A521                 cmp     al, 22h ; '"'
.text:0040A523                 lea     edx, [ebx+1]
.text:0040A526                 jz      loc_4098C3
.text:0040A52C                 jmp     loc_4098CD
.text:0040A531 ; ---------------------------------------------------------------------------
.text:0040A531
.text:0040A531 loc_40A531:                             ; CODE XREF: sub_4097F0+D2F↑j
.text:0040A531                 lea     edx, [ebx+1]
.text:0040A534                 jmp     loc_4098C3
.text:0040A534 ; ---------------------------------------------------------------------------
.text:0040A539                 align 10h
.text:0040A540
.text:0040A540 loc_40A540:                             ; CODE XREF: sub_4097F0+63↑j
.text:0040A540                 mov     esi, ds:_pctype
.text:0040A546                 mov     ebx, [esi]
.text:0040A548                 movzx   eax, word ptr [ebx+edx*2]
.text:0040A54C                 and     eax, 8
.text:0040A54F                 jmp     loc_409869
.text:0040A554 ; ---------------------------------------------------------------------------
.text:0040A554
.text:0040A554 loc_40A554:                             ; CODE XREF: sub_4097F0+25↑j
.text:0040A554                 lea     ebx, [esp+2BCh+var_234]
.text:0040A55B                 mov     [esp+2BCh+Time], ebx
.text:0040A55E                 call    sub_406D30
.text:0040A563                 xor     edx, edx
.text:0040A565                 test    eax, eax
.text:0040A567                 jnz     loc_409AE1
.text:0040A56D                 mov     eax, ebx
.text:0040A56F                 jmp     loc_40981B
.text:0040A56F sub_4097F0      endp
.text:0040A56F
.text:0040A56F ; ---------------------------------------------------------------------------
.text:0040A574                 align 10h
.text:0040A580
.text:0040A580 ; =============== S U B R O U T I N E =======================================
.text:0040A580
.text:0040A580
.text:0040A580 ; int __cdecl sub_40A580(int, char *Str)
.text:0040A580 sub_40A580      proc near               ; CODE XREF: sub_4093E0+122↑p
.text:0040A580
.text:0040A580 C               = dword ptr -2Ch
.text:0040A580 Type            = dword ptr -28h
.text:0040A580 MaxCount        = dword ptr -24h
.text:0040A580 var_18          = dword ptr -18h
.text:0040A580 var_11          = byte ptr -11h
.text:0040A580 arg_0           = dword ptr  4
.text:0040A580 Str             = dword ptr  8
.text:0040A580
.text:0040A580                 push    ebp
.text:0040A581                 push    edi
.text:0040A582                 push    esi
.text:0040A583                 push    ebx
.text:0040A584                 sub     esp, 1Ch
.text:0040A587                 mov     edi, [esp+2Ch+Str]
.text:0040A58B                 mov     ebp, [esp+2Ch+arg_0]
.text:0040A58F                 mov     esi, edi
.text:0040A591                 movzx   ebx, byte ptr [edi]
.text:0040A594                 test    bl, bl
.text:0040A596                 jz      short loc_40A5D4
.text:0040A598                 nop
.text:0040A599                 lea     esi, [esi+0]
.text:0040A5A0
.text:0040A5A0 loc_40A5A0:                             ; CODE XREF: sub_40A580+52↓j
.text:0040A5A0                 mov     ecx, ds:__mb_cur_max
.text:0040A5A6                 movzx   edx, bl
.text:0040A5A9                 cmp     dword ptr [ecx], 1
.text:0040A5AC                 jz      loc_40A890
.text:0040A5B2                 mov     [esp+2Ch+Type], 2 ; Type
.text:0040A5BA                 mov     [esp+2Ch+C], edx ; C
.text:0040A5BD                 call    _isctype
.text:0040A5C2
.text:0040A5C2 loc_40A5C2:                             ; CODE XREF: sub_40A580+31E↓j
.text:0040A5C2                 test    eax, eax
.text:0040A5C4                 jnz     loc_40A877
.text:0040A5CA
.text:0040A5CA loc_40A5CA:                             ; CODE XREF: sub_40A580+304↓j
.text:0040A5CA                 inc     esi
.text:0040A5CB                 movzx   ecx, byte ptr [esi]
.text:0040A5CE                 test    cl, cl
.text:0040A5D0                 mov     bl, cl
.text:0040A5D2                 jnz     short loc_40A5A0
.text:0040A5D4
.text:0040A5D4 loc_40A5D4:                             ; CODE XREF: sub_40A580+16↑j
.text:0040A5D4                 mov     eax, ds:Str2
.text:0040A5D9                 mov     ebx, offset Str2
.text:0040A5DE                 test    eax, eax
.text:0040A5E0                 jz      short loc_40A60F
.text:0040A5E2                 lea     esi, [esi+0]
.text:0040A5E9                 lea     edi, [edi+0]
.text:0040A5F0
.text:0040A5F0 loc_40A5F0:                             ; CODE XREF: sub_40A580+8D↓j
.text:0040A5F0                 mov     [esp+2Ch+Type], eax ; Str2
.text:0040A5F4                 mov     [esp+2Ch+C], edi ; Str1
.text:0040A5F7                 call    strcmp
.text:0040A5FC                 test    eax, eax
.text:0040A5FE                 mov     edx, ebx
.text:0040A600                 jz      loc_40A6D1
.text:0040A606                 add     ebx, 0Ch
.text:0040A609                 mov     eax, [ebx]
.text:0040A60B                 test    eax, eax
.text:0040A60D                 jnz     short loc_40A5F0
.text:0040A60F
.text:0040A60F loc_40A60F:                             ; CODE XREF: sub_40A580+60↑j
.text:0040A60F                 mov     [esp+2Ch+C], edi ; Str
.text:0040A612                 call    strlen
.text:0040A617                 mov     [esp+2Ch+var_11], 0
.text:0040A61C                 cmp     eax, 3
.text:0040A61F                 mov     esi, eax
.text:0040A621                 jz      loc_40A86D
.text:0040A627                 cmp     eax, 4
.text:0040A62A                 jz      loc_40A863
.text:0040A630
.text:0040A630 loc_40A630:                             ; CODE XREF: sub_40A580+2E7↓j
.text:0040A630                                         ; sub_40A580+2F2↓j
.text:0040A630                 mov     edx, ds:off_408B50 ; "JANUARY"
.text:0040A636                 mov     ebx, offset off_408B50 ; "JANUARY"
.text:0040A63B                 test    edx, edx
.text:0040A63D                 jz      short loc_40A672
.text:0040A63F                 nop
.text:0040A640
.text:0040A640 loc_40A640:                             ; CODE XREF: sub_40A580+F0↓j
.text:0040A640                 cmp     [esp+2Ch+var_11], 0
.text:0040A645                 jz      loc_40A850
.text:0040A64B                 mov     [esp+2Ch+MaxCount], 3 ; MaxCount
.text:0040A653                 mov     ecx, [ebx]
.text:0040A655                 mov     [esp+2Ch+C], edi ; Str1
.text:0040A658                 mov     [esp+2Ch+Type], ecx ; Str2
.text:0040A65C                 call    strncmp
.text:0040A661
.text:0040A661 loc_40A661:                             ; CODE XREF: sub_40A580+2DE↓j
.text:0040A661                 test    eax, eax
.text:0040A663                 jz      loc_40A808
.text:0040A669                 add     ebx, 0Ch
.text:0040A66C                 mov     ecx, [ebx]
.text:0040A66E                 test    ecx, ecx
.text:0040A670                 jnz     short loc_40A640
.text:0040A672
.text:0040A672 loc_40A672:                             ; CODE XREF: sub_40A580+BD↑j
.text:0040A672                 mov     eax, [ebp+74h]
.text:0040A675                 lea     ebx, [ebp+74h]
.text:0040A678                 mov     [esp+2Ch+var_18], ebx
.text:0040A67C                 test    eax, eax
.text:0040A67E                 jz      short loc_40A69B
.text:0040A680
.text:0040A680 loc_40A680:                             ; CODE XREF: sub_40A580+119↓j
.text:0040A680                 mov     [esp+2Ch+Type], eax ; Str2
.text:0040A684                 mov     [esp+2Ch+C], edi ; Str1
.text:0040A687                 call    strcmp
.text:0040A68C                 test    eax, eax
.text:0040A68E                 mov     edx, ebx
.text:0040A690                 jz      short loc_40A6CD
.text:0040A692                 add     ebx, 0Ch
.text:0040A695                 mov     eax, [ebx]
.text:0040A697                 test    eax, eax
.text:0040A699                 jnz     short loc_40A680
.text:0040A69B
.text:0040A69B loc_40A69B:                             ; CODE XREF: sub_40A580+FE↑j
.text:0040A69B                 mov     eax, ds:off_408FB0
.text:0040A6A0                 mov     ebx, offset off_408FB0
.text:0040A6A5                 test    eax, eax
.text:0040A6A7                 jz      short loc_40A6CB
.text:0040A6A9                 lea     esi, [esi+0]
.text:0040A6B0
.text:0040A6B0 loc_40A6B0:                             ; CODE XREF: sub_40A580+149↓j
.text:0040A6B0                 mov     [esp+2Ch+Type], eax ; Str2
.text:0040A6B4                 mov     [esp+2Ch+C], edi ; Str1
.text:0040A6B7                 call    strcmp
.text:0040A6BC                 test    eax, eax
.text:0040A6BE                 mov     edx, ebx
.text:0040A6C0                 jz      short loc_40A6CD
.text:0040A6C2                 add     ebx, 0Ch
.text:0040A6C5                 mov     eax, [ebx]
.text:0040A6C7                 test    eax, eax
.text:0040A6C9                 jnz     short loc_40A6B0
.text:0040A6CB
.text:0040A6CB loc_40A6CB:                             ; CODE XREF: sub_40A580+127↑j
.text:0040A6CB                 xor     edx, edx
.text:0040A6CD
.text:0040A6CD loc_40A6CD:                             ; CODE XREF: sub_40A580+110↑j
.text:0040A6CD                                         ; sub_40A580+140↑j
.text:0040A6CD                 test    edx, edx
.text:0040A6CF                 jz      short loc_40A6DB
.text:0040A6D1
.text:0040A6D1 loc_40A6D1:                             ; CODE XREF: sub_40A580+80↑j
.text:0040A6D1                                         ; sub_40A580+174↓j ...
.text:0040A6D1                 add     esp, 1Ch
.text:0040A6D4                 mov     eax, edx
.text:0040A6D6                 pop     ebx
.text:0040A6D7                 pop     esi
.text:0040A6D8                 pop     edi
.text:0040A6D9                 pop     ebp
.text:0040A6DA                 retn
.text:0040A6DB ; ---------------------------------------------------------------------------
.text:0040A6DB
.text:0040A6DB loc_40A6DB:                             ; CODE XREF: sub_40A580+14F↑j
.text:0040A6DB                 mov     [esp+2Ch+C], edi ; Str1
.text:0040A6DE                 mov     ebx, ds:off_408A90
.text:0040A6E4                 mov     [esp+2Ch+Type], ebx ; Str2
.text:0040A6E8                 call    strcmp
.text:0040A6ED                 test    eax, eax
.text:0040A6EF                 mov     edx, offset off_408A90
.text:0040A6F4                 jz      short loc_40A6D1
.text:0040A6F6                 mov     eax, ds:off_408CD0 ; "YEAR"
.text:0040A6FB                 mov     ebx, offset off_408CD0 ; "YEAR"
.text:0040A700                 test    eax, eax
.text:0040A702                 jz      short loc_40A71F
.text:0040A704
.text:0040A704 loc_40A704:                             ; CODE XREF: sub_40A580+19D↓j
.text:0040A704                 mov     [esp+2Ch+Type], eax ; Str2
.text:0040A708                 mov     [esp+2Ch+C], edi ; Str1
.text:0040A70B                 call    strcmp
.text:0040A710                 test    eax, eax
.text:0040A712                 mov     edx, ebx
.text:0040A714                 jz      short loc_40A6D1
.text:0040A716                 add     ebx, 0Ch
.text:0040A719                 mov     eax, [ebx]
.text:0040A71B                 test    eax, eax
.text:0040A71D                 jnz     short loc_40A704
.text:0040A71F
.text:0040A71F loc_40A71F:                             ; CODE XREF: sub_40A580+182↑j
.text:0040A71F                 cmp     byte ptr [esi+edi-1], 53h ; 'S'
.text:0040A724                 jz      loc_40A80F
.text:0040A72A
.text:0040A72A loc_40A72A:                             ; CODE XREF: sub_40A580+2C6↓j
.text:0040A72A                 mov     eax, ds:off_408DD0 ; "TOMORROW"
.text:0040A72F                 mov     ebx, offset off_408DD0 ; "TOMORROW"
.text:0040A734                 test    eax, eax
.text:0040A736                 jz      short loc_40A753
.text:0040A738
.text:0040A738 loc_40A738:                             ; CODE XREF: sub_40A580+1D1↓j
.text:0040A738                 mov     [esp+2Ch+Type], eax ; Str2
.text:0040A73C                 mov     [esp+2Ch+C], edi ; Str1
.text:0040A73F                 call    strcmp
.text:0040A744                 test    eax, eax
.text:0040A746                 mov     edx, ebx
.text:0040A748                 jz      short loc_40A6D1
.text:0040A74A                 add     ebx, 0Ch
.text:0040A74D                 mov     eax, [ebx]
.text:0040A74F                 test    eax, eax
.text:0040A751                 jnz     short loc_40A738
.text:0040A753
.text:0040A753 loc_40A753:                             ; CODE XREF: sub_40A580+1B6↑j
.text:0040A753                 dec     esi
.text:0040A754                 jz      loc_40A7E1
.text:0040A75A
.text:0040A75A loc_40A75A:                             ; CODE XREF: sub_40A580+26D↓j
.text:0040A75A                 movzx   ecx, byte ptr [edi]
.text:0040A75D
.text:0040A75D loc_40A75D:                             ; CODE XREF: sub_40A580+283↓j
.text:0040A75D                 mov     [edi], cl
.text:0040A75F                 xor     ebx, ebx
.text:0040A761                 mov     edx, edi
.text:0040A763                 test    cl, cl
.text:0040A765                 mov     esi, edi
.text:0040A767                 jz      short loc_40A7D6
.text:0040A769
.text:0040A769 loc_40A769:                             ; CODE XREF: sub_40A580+1F7↓j
.text:0040A769                 cmp     byte ptr [edx], 2Eh ; '.'
.text:0040A76C                 jz      short loc_40A7DD
.text:0040A76E                 inc     esi
.text:0040A76F
.text:0040A76F loc_40A76F:                             ; CODE XREF: sub_40A580+25F↓j
.text:0040A76F                 inc     edx
.text:0040A770                 movzx   ecx, byte ptr [edx]
.text:0040A773                 test    cl, cl
.text:0040A775                 mov     [esi], cl
.text:0040A777                 jnz     short loc_40A769
.text:0040A779                 test    bl, bl
.text:0040A77B                 jz      short loc_40A7D6
.text:0040A77D                 mov     eax, [ebp+74h]
.text:0040A780                 mov     ebx, [esp+2Ch+var_18]
.text:0040A784                 test    eax, eax
.text:0040A786                 jz      short loc_40A7A3
.text:0040A788
.text:0040A788 loc_40A788:                             ; CODE XREF: sub_40A580+221↓j
.text:0040A788                 mov     [esp+2Ch+Type], eax ; Str2
.text:0040A78C                 mov     [esp+2Ch+C], edi ; Str1
.text:0040A78F                 call    strcmp
.text:0040A794                 test    eax, eax
.text:0040A796                 mov     edx, ebx
.text:0040A798                 jz      short loc_40A7CE
.text:0040A79A                 add     ebx, 0Ch
.text:0040A79D                 mov     eax, [ebx]
.text:0040A79F                 test    eax, eax
.text:0040A7A1                 jnz     short loc_40A788
.text:0040A7A3
.text:0040A7A3 loc_40A7A3:                             ; CODE XREF: sub_40A580+206↑j
.text:0040A7A3                 mov     eax, ds:off_408FB0
.text:0040A7A8                 mov     ebx, offset off_408FB0
.text:0040A7AD                 test    eax, eax
.text:0040A7AF                 jz      short loc_40A7CC
.text:0040A7B1
.text:0040A7B1 loc_40A7B1:                             ; CODE XREF: sub_40A580+24A↓j
.text:0040A7B1                 mov     [esp+2Ch+Type], eax ; Str2
.text:0040A7B5                 mov     [esp+2Ch+C], edi ; Str1
.text:0040A7B8                 call    strcmp
.text:0040A7BD                 test    eax, eax
.text:0040A7BF                 mov     edx, ebx
.text:0040A7C1                 jz      short loc_40A7CE
.text:0040A7C3                 add     ebx, 0Ch
.text:0040A7C6                 mov     eax, [ebx]
.text:0040A7C8                 test    eax, eax
.text:0040A7CA                 jnz     short loc_40A7B1
.text:0040A7CC
.text:0040A7CC loc_40A7CC:                             ; CODE XREF: sub_40A580+22F↑j
.text:0040A7CC                 xor     edx, edx
.text:0040A7CE
.text:0040A7CE loc_40A7CE:                             ; CODE XREF: sub_40A580+218↑j
.text:0040A7CE                                         ; sub_40A580+241↑j
.text:0040A7CE                 test    edx, edx
.text:0040A7D0                 jnz     loc_40A6D1
.text:0040A7D6
.text:0040A7D6 loc_40A7D6:                             ; CODE XREF: sub_40A580+1E7↑j
.text:0040A7D6                                         ; sub_40A580+1FB↑j
.text:0040A7D6                 xor     edx, edx
.text:0040A7D8                 jmp     loc_40A6D1
.text:0040A7DD ; ---------------------------------------------------------------------------
.text:0040A7DD
.text:0040A7DD loc_40A7DD:                             ; CODE XREF: sub_40A580+1EC↑j
.text:0040A7DD                 mov     bl, 1
.text:0040A7DF                 jmp     short loc_40A76F
.text:0040A7E1 ; ---------------------------------------------------------------------------
.text:0040A7E1
.text:0040A7E1 loc_40A7E1:                             ; CODE XREF: sub_40A580+1D4↑j
.text:0040A7E1                 mov     eax, ds:off_409250
.text:0040A7E6                 mov     ebx, offset off_409250
.text:0040A7EB                 test    eax, eax
.text:0040A7ED                 jz      loc_40A75A
.text:0040A7F3                 movzx   ecx, byte ptr [edi]
.text:0040A7F6
.text:0040A7F6 loc_40A7F6:                             ; CODE XREF: sub_40A580+281↓j
.text:0040A7F6                 cmp     cl, [eax]
.text:0040A7F8                 jz      short loc_40A808
.text:0040A7FA                 add     ebx, 0Ch
.text:0040A7FD                 mov     eax, [ebx]
.text:0040A7FF                 test    eax, eax
.text:0040A801                 jnz     short loc_40A7F6
.text:0040A803                 jmp     loc_40A75D
.text:0040A808 ; ---------------------------------------------------------------------------
.text:0040A808
.text:0040A808 loc_40A808:                             ; CODE XREF: sub_40A580+E3↑j
.text:0040A808                                         ; sub_40A580+278↑j
.text:0040A808                 mov     edx, ebx
.text:0040A80A                 jmp     loc_40A6D1
.text:0040A80F ; ---------------------------------------------------------------------------
.text:0040A80F
.text:0040A80F loc_40A80F:                             ; CODE XREF: sub_40A580+1A4↑j
.text:0040A80F                 mov     byte ptr [esi+edi-1], 0
.text:0040A814                 mov     ebx, offset off_408CD0 ; "YEAR"
.text:0040A819                 mov     eax, ds:off_408CD0 ; "YEAR"
.text:0040A81E                 test    eax, eax
.text:0040A820                 jz      short loc_40A841
.text:0040A822
.text:0040A822 loc_40A822:                             ; CODE XREF: sub_40A580+2BF↓j
.text:0040A822                 mov     [esp+2Ch+Type], eax ; Str2
.text:0040A826                 mov     [esp+2Ch+C], edi ; Str1
.text:0040A829                 call    strcmp
.text:0040A82E                 test    eax, eax
.text:0040A830                 mov     edx, ebx
.text:0040A832                 jz      loc_40A6D1
.text:0040A838                 add     ebx, 0Ch
.text:0040A83B                 mov     eax, [ebx]
.text:0040A83D                 test    eax, eax
.text:0040A83F                 jnz     short loc_40A822
.text:0040A841
.text:0040A841 loc_40A841:                             ; CODE XREF: sub_40A580+2A0↑j
.text:0040A841                 mov     byte ptr [esi+edi-1], 53h ; 'S'
.text:0040A846                 jmp     loc_40A72A
.text:0040A846 ; ---------------------------------------------------------------------------
.text:0040A84B                 align 10h
.text:0040A850
.text:0040A850 loc_40A850:                             ; CODE XREF: sub_40A580+C5↑j
.text:0040A850                 mov     edx, [ebx]
.text:0040A852                 mov     [esp+2Ch+C], edi ; Str1
.text:0040A855                 mov     [esp+2Ch+Type], edx ; Str2
.text:0040A859                 call    strcmp
.text:0040A85E                 jmp     loc_40A661
.text:0040A863 ; ---------------------------------------------------------------------------
.text:0040A863
.text:0040A863 loc_40A863:                             ; CODE XREF: sub_40A580+AA↑j
.text:0040A863                 cmp     byte ptr [edi+3], 2Eh ; '.'
.text:0040A867                 jnz     loc_40A630
.text:0040A86D
.text:0040A86D loc_40A86D:                             ; CODE XREF: sub_40A580+A1↑j
.text:0040A86D                 mov     [esp+2Ch+var_11], 1
.text:0040A872                 jmp     loc_40A630
.text:0040A877 ; ---------------------------------------------------------------------------
.text:0040A877
.text:0040A877 loc_40A877:                             ; CODE XREF: sub_40A580+44↑j
.text:0040A877                 movzx   edx, bl
.text:0040A87A                 mov     [esp+2Ch+C], edx ; C
.text:0040A87D                 call    toupper
.text:0040A882                 mov     [esi], al
.text:0040A884                 jmp     loc_40A5CA
.text:0040A884 ; ---------------------------------------------------------------------------
.text:0040A889                 align 10h
.text:0040A890
.text:0040A890 loc_40A890:                             ; CODE XREF: sub_40A580+2C↑j
.text:0040A890                 mov     eax, ds:_pctype
.text:0040A895                 mov     ecx, [eax]
.text:0040A897                 movzx   eax, word ptr [ecx+edx*2]
.text:0040A89B                 and     eax, 2
.text:0040A89E                 jmp     loc_40A5C2
.text:0040A89E sub_40A580      endp
.text:0040A89E
.text:0040A89E ; ---------------------------------------------------------------------------
.text:0040A8A3                 align 10h
.text:0040A8B0
.text:0040A8B0 ; =============== S U B R O U T I N E =======================================
.text:0040A8B0
.text:0040A8B0
.text:0040A8B0 ; int __cdecl sub_40A8B0(int, char *)
.text:0040A8B0 sub_40A8B0      proc near               ; CODE XREF: .text:004064B0↑p
.text:0040A8B0                                         ; sub_406680+7A↑p
.text:0040A8B0
.text:0040A8B0 var_C           = dword ptr -0Ch
.text:0040A8B0 var_8           = dword ptr -8
.text:0040A8B0 var_4           = dword ptr -4
.text:0040A8B0 arg_0           = dword ptr  4
.text:0040A8B0 arg_4           = dword ptr  8
.text:0040A8B0
.text:0040A8B0                 sub     esp, 0Ch
.text:0040A8B3                 mov     edx, [esp+0Ch+arg_4]
.text:0040A8B7                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040A8BF                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040A8C3                 mov     edx, [esp+0Ch+arg_0]
.text:0040A8C7                 mov     [esp+0Ch+var_C], edx ; int
.text:0040A8CA                 call    sub_40B7F0
.text:0040A8CF                 add     esp, 0Ch
.text:0040A8D2                 retn
.text:0040A8D2 sub_40A8B0      endp
.text:0040A8D2
.text:0040A8D2 ; ---------------------------------------------------------------------------
.text:0040A8D3                 align 10h
.text:0040A8E0
.text:0040A8E0 ; =============== S U B R O U T I N E =======================================
.text:0040A8E0
.text:0040A8E0
.text:0040A8E0 ; int __cdecl sub_40A8E0(char *)
.text:0040A8E0 sub_40A8E0      proc near               ; CODE XREF: sub_402430+875↑p
.text:0040A8E0                                         ; sub_4031F0+15A↑p ...
.text:0040A8E0
.text:0040A8E0 var_C           = dword ptr -0Ch
.text:0040A8E0 var_8           = dword ptr -8
.text:0040A8E0 var_4           = dword ptr -4
.text:0040A8E0 arg_0           = dword ptr  4
.text:0040A8E0
.text:0040A8E0                 sub     esp, 0Ch
.text:0040A8E3                 mov     edx, [esp+0Ch+arg_0]
.text:0040A8E7                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040A8EF                 mov     [esp+0Ch+var_C], 0 ; int
.text:0040A8F6                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040A8FA                 call    sub_40B7F0
.text:0040A8FF                 add     esp, 0Ch
.text:0040A902                 retn
.text:0040A902 sub_40A8E0      endp
.text:0040A902
.text:0040A902 ; ---------------------------------------------------------------------------
.text:0040A903                 align 10h
.text:0040A910                 sub     esp, 0Ch
.text:0040A913                 mov     edx, [esp+10h]
.text:0040A917                 mov     [esp], edx
.text:0040A91A                 call    asctime
.text:0040A91F                 xor     edx, edx
.text:0040A921                 test    eax, eax
.text:0040A923                 jz      short loc_40A937
.text:0040A925                 mov     [esp+4], eax
.text:0040A929                 mov     edx, [esp+14h]
.text:0040A92D                 mov     [esp], edx
.text:0040A930                 call    strcpy
.text:0040A935                 mov     edx, eax
.text:0040A937
.text:0040A937 loc_40A937:                             ; CODE XREF: .text:0040A923↑j
.text:0040A937                 mov     eax, edx
.text:0040A939                 add     esp, 0Ch
.text:0040A93C                 retn
.text:0040A93C ; ---------------------------------------------------------------------------
.text:0040A93D                 align 10h
.text:0040A940                 sub     esp, 0Ch
.text:0040A943                 mov     edx, [esp+10h]
.text:0040A947                 mov     [esp], edx
.text:0040A94A                 call    ctime
.text:0040A94F                 xor     edx, edx
.text:0040A951                 test    eax, eax
.text:0040A953                 jz      short loc_40A967
.text:0040A955                 mov     [esp+4], eax
.text:0040A959                 mov     edx, [esp+14h]
.text:0040A95D                 mov     [esp], edx
.text:0040A960                 call    strcpy
.text:0040A965                 mov     edx, eax
.text:0040A967
.text:0040A967 loc_40A967:                             ; CODE XREF: .text:0040A953↑j
.text:0040A967                 mov     eax, edx
.text:0040A969                 add     esp, 0Ch
.text:0040A96C                 retn
.text:0040A96C ; ---------------------------------------------------------------------------
.text:0040A96D                 align 10h
.text:0040A970
.text:0040A970 ; =============== S U B R O U T I N E =======================================
.text:0040A970
.text:0040A970
.text:0040A970 ; int __cdecl sub_40A970(__time32_t *, int)
.text:0040A970 sub_40A970      proc near               ; CODE XREF: sub_403410+1C00↑p
.text:0040A970
.text:0040A970 Time            = dword ptr -0Ch
.text:0040A970 var_4           = dword ptr -4
.text:0040A970 arg_0           = dword ptr  4
.text:0040A970 arg_4           = dword ptr  8
.text:0040A970
.text:0040A970                 sub     esp, 0Ch
.text:0040A973                 mov     edx, [esp+0Ch+arg_0]
.text:0040A977                 mov     [esp+0Ch+var_4], ebx
.text:0040A97B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040A97F                 mov     [esp+0Ch+Time], edx ; Time
.text:0040A982                 call    gmtime
.text:0040A987                 mov     edx, eax
.text:0040A989                 xor     eax, eax
.text:0040A98B                 test    edx, edx
.text:0040A98D                 jz      short loc_40A9C5
.text:0040A98F                 mov     ecx, [edx]
.text:0040A991                 mov     eax, ebx
.text:0040A993                 mov     [ebx], ecx
.text:0040A995                 mov     ecx, [edx+4]
.text:0040A998                 mov     [ebx+4], ecx
.text:0040A99B                 mov     ecx, [edx+8]
.text:0040A99E                 mov     [ebx+8], ecx
.text:0040A9A1                 mov     ecx, [edx+0Ch]
.text:0040A9A4                 mov     [ebx+0Ch], ecx
.text:0040A9A7                 mov     ecx, [edx+10h]
.text:0040A9AA                 mov     [ebx+10h], ecx
.text:0040A9AD                 mov     ecx, [edx+14h]
.text:0040A9B0                 mov     [ebx+14h], ecx
.text:0040A9B3                 mov     ecx, [edx+18h]
.text:0040A9B6                 mov     [ebx+18h], ecx
.text:0040A9B9                 mov     ecx, [edx+1Ch]
.text:0040A9BC                 mov     [ebx+1Ch], ecx
.text:0040A9BF                 mov     ecx, [edx+20h]
.text:0040A9C2                 mov     [ebx+20h], ecx
.text:0040A9C5
.text:0040A9C5 loc_40A9C5:                             ; CODE XREF: sub_40A970+1D↑j
.text:0040A9C5                 mov     ebx, [esp+0Ch+var_4]
.text:0040A9C9                 add     esp, 0Ch
.text:0040A9CC                 retn
.text:0040A9CC sub_40A970      endp
.text:0040A9CC
.text:0040A9CC ; ---------------------------------------------------------------------------
.text:0040A9CD                 align 10h
.text:0040A9D0
.text:0040A9D0 ; =============== S U B R O U T I N E =======================================
.text:0040A9D0
.text:0040A9D0
.text:0040A9D0 ; int __cdecl sub_40A9D0(__time32_t *, int)
.text:0040A9D0 sub_40A9D0      proc near               ; CODE XREF: sub_403410+1E02↑p
.text:0040A9D0
.text:0040A9D0 Time            = dword ptr -0Ch
.text:0040A9D0 var_4           = dword ptr -4
.text:0040A9D0 arg_0           = dword ptr  4
.text:0040A9D0 arg_4           = dword ptr  8
.text:0040A9D0
.text:0040A9D0                 sub     esp, 0Ch
.text:0040A9D3                 mov     edx, [esp+0Ch+arg_0]
.text:0040A9D7                 mov     [esp+0Ch+var_4], ebx
.text:0040A9DB                 mov     ebx, [esp+0Ch+arg_4]
.text:0040A9DF                 mov     [esp+0Ch+Time], edx ; Time
.text:0040A9E2                 call    localtime
.text:0040A9E7                 mov     edx, eax
.text:0040A9E9                 xor     eax, eax
.text:0040A9EB                 test    edx, edx
.text:0040A9ED                 jz      short loc_40AA25
.text:0040A9EF                 mov     ecx, [edx]
.text:0040A9F1                 mov     eax, ebx
.text:0040A9F3                 mov     [ebx], ecx
.text:0040A9F5                 mov     ecx, [edx+4]
.text:0040A9F8                 mov     [ebx+4], ecx
.text:0040A9FB                 mov     ecx, [edx+8]
.text:0040A9FE                 mov     [ebx+8], ecx
.text:0040AA01                 mov     ecx, [edx+0Ch]
.text:0040AA04                 mov     [ebx+0Ch], ecx
.text:0040AA07                 mov     ecx, [edx+10h]
.text:0040AA0A                 mov     [ebx+10h], ecx
.text:0040AA0D                 mov     ecx, [edx+14h]
.text:0040AA10                 mov     [ebx+14h], ecx
.text:0040AA13                 mov     ecx, [edx+18h]
.text:0040AA16                 mov     [ebx+18h], ecx
.text:0040AA19                 mov     ecx, [edx+1Ch]
.text:0040AA1C                 mov     [ebx+1Ch], ecx
.text:0040AA1F                 mov     ecx, [edx+20h]
.text:0040AA22                 mov     [ebx+20h], ecx
.text:0040AA25
.text:0040AA25 loc_40AA25:                             ; CODE XREF: sub_40A9D0+1D↑j
.text:0040AA25                 mov     ebx, [esp+0Ch+var_4]
.text:0040AA29                 add     esp, 0Ch
.text:0040AA2C                 retn
.text:0040AA2C sub_40A9D0      endp
.text:0040AA2C
.text:0040AA2C ; ---------------------------------------------------------------------------
.text:0040AA2D                 align 10h
.text:0040AA30 aLiteral        db 'literal',0          ; DATA XREF: .text:0040AA70↓o
.text:0040AA38 aShell          db 'shell',0            ; DATA XREF: .text:0040AA74↓o
.text:0040AA3E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:0040AA78↓o
.text:0040AA4B aC              db 'c',0                ; DATA XREF: .text:0040AA7C↓o
.text:0040AA4D aEscape         db 'escape',0           ; DATA XREF: .text:0040AA80↓o
.text:0040AA54 aLocale         db 'locale',0           ; DATA XREF: .text:0040AA84↓o
.text:0040AA5B aClocale        db 'clocale',0          ; DATA XREF: .text:0040AA88↓o
.text:0040AA63                 align 10h
.text:0040AA70                 dd offset aLiteral      ; "literal"
.text:0040AA74                 dd offset aShell        ; "shell"
.text:0040AA78                 dd offset aShellAlways  ; "shell-always"
.text:0040AA7C                 dd offset aC            ; "c"
.text:0040AA80                 dd offset aEscape       ; "escape"
.text:0040AA84                 dd offset aLocale       ; "locale"
.text:0040AA88                 dd offset aClocale      ; "clocale"
.text:0040AA8C                 dd 2 dup(0)
.text:0040AA94                 dd 1, 2, 3, 4, 5, 6
.text:0040AAAC asc_40AAAC:                             ; DATA XREF: sub_40AAC0+7E↓o
.text:0040AAAC                                         ; sub_40AAC0+A39↓o ...
.text:0040AAAC                 text "UTF-16LE", '"',27h,'`'
.text:0040AAB2                 align 10h
.text:0040AAC0
.text:0040AAC0 ; =============== S U B R O U T I N E =======================================
.text:0040AAC0
.text:0040AAC0
.text:0040AAC0 ; int __cdecl sub_40AAC0(int, int, char *Str, int, int, int)
.text:0040AAC0 sub_40AAC0      proc near               ; CODE XREF: sub_40AAC0+43A↓p
.text:0040AAC0                                         ; .text:0040B683↓p ...
.text:0040AAC0
.text:0040AAC0 C               = dword ptr -4Ch
.text:0040AAC0 Type            = dword ptr -48h
.text:0040AAC0 SizeInBytes     = dword ptr -44h
.text:0040AAC0 State           = dword ptr -40h
.text:0040AAC0 var_3C          = dword ptr -3Ch
.text:0040AAC0 var_38          = dword ptr -38h
.text:0040AAC0 var_34          = dword ptr -34h
.text:0040AAC0 var_30          = dword ptr -30h
.text:0040AAC0 var_29          = byte ptr -29h
.text:0040AAC0 var_28          = dword ptr -28h
.text:0040AAC0 var_22          = byte ptr -22h
.text:0040AAC0 var_21          = byte ptr -21h
.text:0040AAC0 var_20          = dword ptr -20h
.text:0040AAC0 var_1C          = dword ptr -1Ch
.text:0040AAC0 var_18          = mbstate_t ptr -18h
.text:0040AAC0 arg_0           = dword ptr  4
.text:0040AAC0 arg_4           = dword ptr  8
.text:0040AAC0 Str             = dword ptr  0Ch
.text:0040AAC0 arg_C           = dword ptr  10h
.text:0040AAC0 arg_10          = dword ptr  14h
.text:0040AAC0 arg_14          = dword ptr  18h
.text:0040AAC0
.text:0040AAC0                 push    ebp
.text:0040AAC1                 push    edi
.text:0040AAC2                 push    esi
.text:0040AAC3                 push    ebx
.text:0040AAC4                 sub     esp, 3Ch
.text:0040AAC7                 mov     edx, ds:__mb_cur_max
.text:0040AACD                 mov     [esp+4Ch+var_34], 0
.text:0040AAD5                 mov     [esp+4Ch+var_1C], 0
.text:0040AADD                 cmp     dword ptr [edx], 1
.text:0040AAE0                 mov     [esp+4Ch+var_20], 0
.text:0040AAE8                 mov     [esp+4Ch+var_21], 0
.text:0040AAED                 setz    [esp+4Ch+var_22]
.text:0040AAF2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:0040AAF7                 ja      short def_40AAFD ; jumptable 0040AAFD default case, cases 0,1
.text:0040AAF9                 mov     edx, [esp+4Ch+arg_10]
.text:0040AAFD                 jmp     ds:jpt_40AAFD[edx*4] ; switch jump
.text:0040AAFD ; ---------------------------------------------------------------------------
.text:0040AB04 jpt_40AAFD      dd offset def_40AAFD    ; DATA XREF: sub_40AAC0+3D↑r
.text:0040AB04                 dd offset def_40AAFD    ; jump table for switch statement
.text:0040AB04                 dd offset loc_40B445
.text:0040AB04                 dd offset loc_40AB20
.text:0040AB04                 dd offset loc_40B46B
.text:0040AB04                 dd offset loc_40B475
.text:0040AB04                 dd offset loc_40B475
.text:0040AB20 ; ---------------------------------------------------------------------------
.text:0040AB20
.text:0040AB20 loc_40AB20:                             ; CODE XREF: sub_40AAC0+3D↑j
.text:0040AB20                                         ; DATA XREF: sub_40AAC0:jpt_40AAFD↑o
.text:0040AB20                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040AAFD case 3
.text:0040AB24                 cmp     [esp+4Ch+var_34], eax
.text:0040AB28                 jnb     short loc_40AB31
.text:0040AB2A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040AB2E                 mov     byte ptr [ebx], 22h ; '"'
.text:0040AB31
.text:0040AB31 loc_40AB31:                             ; CODE XREF: sub_40AAC0+68↑j
.text:0040AB31                 mov     [esp+4Ch+var_34], 1
.text:0040AB39                 mov     [esp+4Ch+var_21], 1
.text:0040AB3E                 mov     [esp+4Ch+var_1C], offset asc_40AAAC ; "\"'`"
.text:0040AB46
.text:0040AB46 loc_40AB46:                             ; CODE XREF: sub_40AAC0+9A6↓j
.text:0040AB46                 mov     [esp+4Ch+var_20], 1
.text:0040AB4E
.text:0040AB4E def_40AAFD:                             ; CODE XREF: sub_40AAC0+37↑j
.text:0040AB4E                                         ; sub_40AAC0+3D↑j ...
.text:0040AB4E                 xor     ebp, ebp        ; jumptable 0040AAFD default case, cases 0,1
.text:0040AB50
.text:0040AB50 loc_40AB50:                             ; CODE XREF: sub_40AAC0+3DB↓j
.text:0040AB50                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040AB55                 jz      loc_40B437
.text:0040AB5B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040AB5F
.text:0040AB5F loc_40AB5F:                             ; CODE XREF: sub_40AAC0+980↓j
.text:0040AB5F                 jz      loc_40B3CE
.text:0040AB65                 cmp     [esp+4Ch+var_21], 0
.text:0040AB6A                 jz      short loc_40ABB0
.text:0040AB6C                 mov     esi, [esp+4Ch+var_20]
.text:0040AB70                 test    esi, esi
.text:0040AB72                 jz      short loc_40ABB0
.text:0040AB74                 mov     ecx, [esp+4Ch+var_20]
.text:0040AB78                 lea     edi, [ecx+ebp]
.text:0040AB7B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040AB7F                 ja      short loc_40ABB0
.text:0040AB81                 cld
.text:0040AB82                 mov     ebx, [esp+4Ch+Str]
.text:0040AB86                 mov     edi, [esp+4Ch+var_1C]
.text:0040AB8A                 add     ebx, ebp
.text:0040AB8C                 mov     esi, ebx
.text:0040AB8E                 cmp     ecx, ecx
.text:0040AB90                 repe cmpsb
.text:0040AB92                 jnz     short loc_40ABB0
.text:0040AB94                 mov     edx, [esp+4Ch+arg_4]
.text:0040AB98                 cmp     [esp+4Ch+var_34], edx
.text:0040AB9C                 jnb     short loc_40ABAA
.text:0040AB9E                 mov     ecx, [esp+4Ch+arg_0]
.text:0040ABA2                 mov     eax, [esp+4Ch+var_34]
.text:0040ABA6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040ABAA
.text:0040ABAA loc_40ABAA:                             ; CODE XREF: sub_40AAC0+DC↑j
.text:0040ABAA                 inc     [esp+4Ch+var_34]
.text:0040ABAE                 mov     esi, esi
.text:0040ABB0
.text:0040ABB0 loc_40ABB0:                             ; CODE XREF: sub_40AAC0+AA↑j
.text:0040ABB0                                         ; sub_40AAC0+B2↑j ...
.text:0040ABB0                 mov     edi, [esp+4Ch+Str]
.text:0040ABB4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:0040ABB9                 movzx   eax, bl
.text:0040ABBC                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040ABBF                 ja      def_40ABC5      ; jumptable 0040ABC5 default case, cases 1-6,14-31,64
.text:0040ABC5                 jmp     ds:jpt_40ABC5[eax*4] ; switch jump
.text:0040ABC5 ; ---------------------------------------------------------------------------
.text:0040ABCC jpt_40ABC5      dd offset loc_40ADC8, offset def_40ABC5, offset def_40ABC5
.text:0040ABCC                                         ; DATA XREF: sub_40AAC0+105↑r
.text:0040ABCC                 dd offset def_40ABC5, offset def_40ABC5, offset def_40ABC5 ; jump table for switch statement
.text:0040ABCC                 dd offset def_40ABC5, offset loc_40AEA0, offset loc_40AEBE
.text:0040ABCC                 dd offset loc_40AEC2, offset loc_40AF07, offset loc_40AF0B
.text:0040ABCC                 dd offset loc_40AF0F, offset loc_40AF13, offset def_40ABC5
.text:0040ABCC                 dd offset def_40ABC5, offset def_40ABC5, offset def_40ABC5
.text:0040ABCC                 dd offset def_40ABC5, offset def_40ABC5, offset def_40ABC5
.text:0040ABCC                 dd offset def_40ABC5, offset def_40ABC5, offset def_40ABC5
.text:0040ABCC                 dd offset def_40ABC5, offset def_40ABC5, offset def_40ABC5
.text:0040ABCC                 dd offset def_40ABC5, offset def_40ABC5, offset def_40ABC5
.text:0040ABCC                 dd offset def_40ABC5, offset def_40ABC5, offset loc_40B398
.text:0040ABCC                 dd offset loc_40B398, offset loc_40B398, offset loc_40B3BA
.text:0040ABCC                 dd offset loc_40B398, offset def_40AFC2, offset loc_40B398
.text:0040ABCC                 dd offset loc_40AF17, offset loc_40B398, offset loc_40B398
.text:0040ABCC                 dd offset loc_40B398, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset loc_40B398
.text:0040ABCC                 dd offset loc_40B398, offset loc_40B398, offset loc_40B398
.text:0040ABCC                 dd offset loc_40AF7C, offset def_40ABC5, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset loc_40B398, offset loc_40B391
.text:0040ABCC                 dd offset def_40AFC2, offset loc_40B398, offset def_40AFC2
.text:0040ABCC                 dd offset loc_40B398, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset def_40AFC2, offset def_40AFC2, offset def_40AFC2
.text:0040ABCC                 dd offset loc_40B3A8, offset loc_40B398, offset loc_40B3A8
.text:0040ABCC                 dd offset loc_40B3BA
.text:0040ADC8 ; ---------------------------------------------------------------------------
.text:0040ADC8
.text:0040ADC8 loc_40ADC8:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040ADC8                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040ADC8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 0040ABC5 case 0
.text:0040ADCD                 lea     eax, [ebp+1]
.text:0040ADD0                 jz      loc_40AE80
.text:0040ADD6                 mov     esi, [esp+4Ch+arg_4]
.text:0040ADDA                 cmp     [esp+4Ch+var_34], esi
.text:0040ADDE                 jnb     short loc_40ADEC
.text:0040ADE0                 mov     eax, [esp+4Ch+arg_0]
.text:0040ADE4                 mov     ebx, [esp+4Ch+var_34]
.text:0040ADE8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040ADEC
.text:0040ADEC loc_40ADEC:                             ; CODE XREF: sub_40AAC0+31E↑j
.text:0040ADEC                 inc     [esp+4Ch+var_34]
.text:0040ADF0                 mov     edx, [esp+4Ch+arg_4]
.text:0040ADF4                 cmp     [esp+4Ch+var_34], edx
.text:0040ADF8                 jnb     short loc_40AE06
.text:0040ADFA                 mov     edi, [esp+4Ch+arg_0]
.text:0040ADFE                 mov     ecx, [esp+4Ch+var_34]
.text:0040AE02                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:0040AE06
.text:0040AE06 loc_40AE06:                             ; CODE XREF: sub_40AAC0+338↑j
.text:0040AE06                 inc     [esp+4Ch+var_34]
.text:0040AE0A                 mov     esi, [esp+4Ch+arg_4]
.text:0040AE0E                 cmp     [esp+4Ch+var_34], esi
.text:0040AE12                 jnb     short loc_40AE20
.text:0040AE14                 mov     ebx, [esp+4Ch+arg_0]
.text:0040AE18                 mov     eax, [esp+4Ch+var_34]
.text:0040AE1C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:0040AE20
.text:0040AE20 loc_40AE20:                             ; CODE XREF: sub_40AAC0+352↑j
.text:0040AE20                 inc     [esp+4Ch+var_34]
.text:0040AE24                 mov     bl, 30h ; '0'
.text:0040AE26                 lea     esi, [esi+0]
.text:0040AE29                 lea     edi, [edi+0]
.text:0040AE30
.text:0040AE30 def_40AFC2:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040AE30                                         ; sub_40AAC0+463↓j ...
.text:0040AE30                 cmp     [esp+4Ch+var_21], 0 ; jumptable 0040ABC5 cases 37,43-58,65-90,93,95,97-122
.text:0040AE30                                         ; jumptable 0040AFC2 default case, cases 34-38,42-44,46,48-59
.text:0040AE35                 lea     eax, [ebp+1]
.text:0040AE38                 jz      short loc_40AE80
.text:0040AE3A                 mov     cl, bl
.text:0040AE3C                 mov     edi, [esp+4Ch+arg_14]
.text:0040AE40                 mov     esi, 1
.text:0040AE45                 shr     cl, 5
.text:0040AE48                 movzx   edx, cl
.text:0040AE4B                 mov     ecx, ebx
.text:0040AE4D                 and     ecx, 1Fh
.text:0040AE50                 shl     esi, cl
.text:0040AE52                 test    [edi+edx*4+4], esi
.text:0040AE56                 jz      short loc_40AE72
.text:0040AE58
.text:0040AE58 loc_40AE58:                             ; CODE XREF: sub_40AAC0+3FC↓j
.text:0040AE58                 mov     edx, [esp+4Ch+arg_4]
.text:0040AE5C                 cmp     [esp+4Ch+var_34], edx
.text:0040AE60                 jnb     short loc_40AE6E
.text:0040AE62                 mov     edi, [esp+4Ch+arg_0]
.text:0040AE66                 mov     esi, [esp+4Ch+var_34]
.text:0040AE6A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040AE6E
.text:0040AE6E loc_40AE6E:                             ; CODE XREF: sub_40AAC0+3A0↑j
.text:0040AE6E                 inc     [esp+4Ch+var_34]
.text:0040AE72
.text:0040AE72 loc_40AE72:                             ; CODE XREF: sub_40AAC0+396↑j
.text:0040AE72                 lea     eax, [ebp+1]
.text:0040AE75                 lea     esi, [esi+0]
.text:0040AE79                 lea     edi, [edi+0]
.text:0040AE80
.text:0040AE80 loc_40AE80:                             ; CODE XREF: sub_40AAC0+310↑j
.text:0040AE80                                         ; sub_40AAC0+378↑j ...
.text:0040AE80                 mov     ebp, [esp+4Ch+arg_4]
.text:0040AE84                 cmp     [esp+4Ch+var_34], ebp
.text:0040AE88                 jnb     short loc_40AE95
.text:0040AE8A                 mov     edx, [esp+4Ch+arg_0]
.text:0040AE8E                 mov     ecx, [esp+4Ch+var_34]
.text:0040AE92                 mov     [ecx+edx], bl
.text:0040AE95
.text:0040AE95 loc_40AE95:                             ; CODE XREF: sub_40AAC0+3C8↑j
.text:0040AE95                 inc     [esp+4Ch+var_34]
.text:0040AE99                 mov     ebp, eax
.text:0040AE9B                 jmp     loc_40AB50
.text:0040AEA0 ; ---------------------------------------------------------------------------
.text:0040AEA0
.text:0040AEA0 loc_40AEA0:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040AEA0                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040AEA0                 mov     dl, 61h ; 'a'   ; jumptable 0040ABC5 case 7
.text:0040AEA2                 lea     esi, [esi+0]
.text:0040AEA9                 lea     edi, [edi+0]
.text:0040AEB0
.text:0040AEB0 loc_40AEB0:                             ; CODE XREF: sub_40AAC0+400↓j
.text:0040AEB0                                         ; sub_40AAC0+409↓j ...
.text:0040AEB0                 cmp     [esp+4Ch+var_21], 0
.text:0040AEB5                 lea     eax, [ebp+1]
.text:0040AEB8                 jz      short loc_40AE80
.text:0040AEBA                 mov     bl, dl
.text:0040AEBC                 jmp     short loc_40AE58
.text:0040AEBE ; ---------------------------------------------------------------------------
.text:0040AEBE
.text:0040AEBE loc_40AEBE:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040AEBE                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040AEBE                 mov     dl, 62h ; 'b'   ; jumptable 0040ABC5 case 8
.text:0040AEC0                 jmp     short loc_40AEB0
.text:0040AEC2 ; ---------------------------------------------------------------------------
.text:0040AEC2
.text:0040AEC2 loc_40AEC2:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040AEC2                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040AEC2                 mov     dl, 74h ; 't'   ; jumptable 0040ABC5 case 9
.text:0040AEC4
.text:0040AEC4 loc_40AEC4:                             ; CODE XREF: sub_40AAC0+449↓j
.text:0040AEC4                                         ; sub_40AAC0+455↓j ...
.text:0040AEC4                 cmp     [esp+4Ch+arg_10], 1
.text:0040AEC9                 jnz     short loc_40AEB0
.text:0040AECB
.text:0040AECB loc_40AECB:                             ; CODE XREF: sub_40AAC0+45C↓j
.text:0040AECB                                         ; sub_40AAC0+4C1↓j ...
.text:0040AECB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 0040B292 cases 91,92,94,96,124
.text:0040AED3                 mov     eax, [esp+4Ch+arg_14]
.text:0040AED7                 mov     edx, [esp+4Ch+arg_C]
.text:0040AEDB                 mov     ecx, [esp+4Ch+Str]
.text:0040AEDF                 mov     ebx, [esp+4Ch+arg_4]
.text:0040AEE3                 mov     [esp+4Ch+var_38], eax ; int
.text:0040AEE7                 mov     ebp, [esp+4Ch+arg_0]
.text:0040AEEB                 mov     [esp+4Ch+State], edx ; int
.text:0040AEEF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:0040AEF3                 mov     [esp+4Ch+Type], ebx ; int
.text:0040AEF7                 mov     [esp+4Ch+C], ebp ; int
.text:0040AEFA                 call    sub_40AAC0
.text:0040AEFF
.text:0040AEFF loc_40AEFF:                             ; CODE XREF: sub_40AAC0+972↓j
.text:0040AEFF                 add     esp, 3Ch
.text:0040AF02                 pop     ebx
.text:0040AF03                 pop     esi
.text:0040AF04                 pop     edi
.text:0040AF05                 pop     ebp
.text:0040AF06                 retn
.text:0040AF07 ; ---------------------------------------------------------------------------
.text:0040AF07
.text:0040AF07 loc_40AF07:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040AF07                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040AF07                 mov     dl, 6Eh ; 'n'   ; jumptable 0040ABC5 case 10
.text:0040AF09                 jmp     short loc_40AEC4
.text:0040AF0B ; ---------------------------------------------------------------------------
.text:0040AF0B
.text:0040AF0B loc_40AF0B:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040AF0B                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040AF0B                 mov     dl, 76h ; 'v'   ; jumptable 0040ABC5 case 11
.text:0040AF0D                 jmp     short loc_40AEB0
.text:0040AF0F ; ---------------------------------------------------------------------------
.text:0040AF0F
.text:0040AF0F loc_40AF0F:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040AF0F                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040AF0F                 mov     dl, 66h ; 'f'   ; jumptable 0040ABC5 case 12
.text:0040AF11                 jmp     short loc_40AEB0
.text:0040AF13 ; ---------------------------------------------------------------------------
.text:0040AF13
.text:0040AF13 loc_40AF13:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040AF13                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040AF13                 mov     dl, 72h ; 'r'   ; jumptable 0040ABC5 case 13
.text:0040AF15                 jmp     short loc_40AEC4
.text:0040AF17 ; ---------------------------------------------------------------------------
.text:0040AF17
.text:0040AF17 loc_40AF17:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040AF17                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040AF17                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040ABC5 case 39
.text:0040AF1C                 jz      short loc_40AECB ; jumptable 0040B292 cases 91,92,94,96,124
.text:0040AF1E                 cmp     [esp+4Ch+arg_10], 2
.text:0040AF23                 jnz     def_40AFC2      ; jumptable 0040ABC5 cases 37,43-58,65-90,93,95,97-122
.text:0040AF23                                         ; jumptable 0040AFC2 default case, cases 34-38,42-44,46,48-59
.text:0040AF29                 mov     edx, [esp+4Ch+arg_4]
.text:0040AF2D                 cmp     [esp+4Ch+var_34], edx
.text:0040AF31                 jnb     short loc_40AF3F
.text:0040AF33                 mov     ecx, [esp+4Ch+arg_0]
.text:0040AF37                 mov     edi, [esp+4Ch+var_34]
.text:0040AF3B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040AF3F
.text:0040AF3F loc_40AF3F:                             ; CODE XREF: sub_40AAC0+471↑j
.text:0040AF3F                 inc     [esp+4Ch+var_34]
.text:0040AF43                 mov     eax, [esp+4Ch+arg_4]
.text:0040AF47                 cmp     [esp+4Ch+var_34], eax
.text:0040AF4B                 jnb     short loc_40AF59
.text:0040AF4D                 mov     esi, [esp+4Ch+arg_0]
.text:0040AF51                 mov     edx, [esp+4Ch+var_34]
.text:0040AF55                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:0040AF59
.text:0040AF59 loc_40AF59:                             ; CODE XREF: sub_40AAC0+48B↑j
.text:0040AF59                 inc     [esp+4Ch+var_34]
.text:0040AF5D                 mov     edi, [esp+4Ch+arg_4]
.text:0040AF61                 cmp     [esp+4Ch+var_34], edi
.text:0040AF65                 jnb     short loc_40AF73
.text:0040AF67                 mov     ecx, [esp+4Ch+arg_0]
.text:0040AF6B                 mov     eax, [esp+4Ch+var_34]
.text:0040AF6F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:0040AF73
.text:0040AF73 loc_40AF73:                             ; CODE XREF: sub_40AAC0+4A5↑j
.text:0040AF73                                         ; sub_40AAC0+5C4↓j ...
.text:0040AF73                 inc     [esp+4Ch+var_34]
.text:0040AF77                 jmp     def_40AFC2      ; jumptable 0040ABC5 cases 37,43-58,65-90,93,95,97-122
.text:0040AF77                                         ; jumptable 0040AFC2 default case, cases 34-38,42-44,46,48-59
.text:0040AF7C ; ---------------------------------------------------------------------------
.text:0040AF7C
.text:0040AF7C loc_40AF7C:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040AF7C                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040AF7C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040ABC5 case 63
.text:0040AF81                 jz      loc_40AECB      ; jumptable 0040B292 cases 91,92,94,96,124
.text:0040AF87                 cmp     [esp+4Ch+arg_10], 3
.text:0040AF8C                 jnz     def_40AFC2      ; jumptable 0040ABC5 cases 37,43-58,65-90,93,95,97-122
.text:0040AF8C                                         ; jumptable 0040AFC2 default case, cases 34-38,42-44,46,48-59
.text:0040AF92                 lea     edx, [ebp+2]
.text:0040AF95                 cmp     edx, [esp+4Ch+arg_C]
.text:0040AF99                 jnb     def_40AFC2      ; jumptable 0040ABC5 cases 37,43-58,65-90,93,95,97-122
.text:0040AF99                                         ; jumptable 0040AFC2 default case, cases 34-38,42-44,46,48-59
.text:0040AF9F                 mov     esi, [esp+4Ch+Str]
.text:0040AFA3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:0040AFA8                 jnz     def_40AFC2      ; jumptable 0040ABC5 cases 37,43-58,65-90,93,95,97-122
.text:0040AFA8                                         ; jumptable 0040AFC2 default case, cases 34-38,42-44,46,48-59
.text:0040AFAE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:0040AFB3                 movsx   eax, cl
.text:0040AFB6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:0040AFB9                 cmp     eax, 1Dh
.text:0040AFBC                 ja      def_40AFC2      ; jumptable 0040ABC5 cases 37,43-58,65-90,93,95,97-122
.text:0040AFBC                                         ; jumptable 0040AFC2 default case, cases 34-38,42-44,46,48-59
.text:0040AFC2                 jmp     ds:jpt_40AFC2[eax*4] ; switch jump
.text:0040AFC2 ; ---------------------------------------------------------------------------
.text:0040AFC9                 align 4
.text:0040AFCC jpt_40AFC2      dd offset loc_40B044    ; DATA XREF: sub_40AAC0+502↑r
.text:0040AFCC                 dd offset def_40AFC2    ; jump table for switch statement
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset loc_40B044
.text:0040AFCC                 dd offset loc_40B044
.text:0040AFCC                 dd offset loc_40B044
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset loc_40B044
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset loc_40B044
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset def_40AFC2
.text:0040AFCC                 dd offset loc_40B044
.text:0040AFCC                 dd offset loc_40B044
.text:0040AFCC                 dd offset loc_40B044
.text:0040B044 ; ---------------------------------------------------------------------------
.text:0040B044
.text:0040B044 loc_40B044:                             ; CODE XREF: sub_40AAC0+502↑j
.text:0040B044                                         ; DATA XREF: sub_40AAC0:jpt_40AFC2↑o
.text:0040B044                 mov     ebp, edx        ; jumptable 0040AFC2 cases 33,39-41,45,47,60-62
.text:0040B046                 mov     bl, cl
.text:0040B048                 mov     edx, [esp+4Ch+arg_4]
.text:0040B04C                 cmp     [esp+4Ch+var_34], edx
.text:0040B050                 jnb     short loc_40B05E
.text:0040B052                 mov     ecx, [esp+4Ch+arg_0]
.text:0040B056                 mov     edi, [esp+4Ch+var_34]
.text:0040B05A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040B05E
.text:0040B05E loc_40B05E:                             ; CODE XREF: sub_40AAC0+590↑j
.text:0040B05E                 inc     [esp+4Ch+var_34]
.text:0040B062                 mov     eax, [esp+4Ch+arg_4]
.text:0040B066                 cmp     [esp+4Ch+var_34], eax
.text:0040B06A                 jnb     short loc_40B078
.text:0040B06C                 mov     edx, [esp+4Ch+arg_0]
.text:0040B070                 mov     esi, [esp+4Ch+var_34]
.text:0040B074                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:0040B078
.text:0040B078 loc_40B078:                             ; CODE XREF: sub_40AAC0+5AA↑j
.text:0040B078                 inc     [esp+4Ch+var_34]
.text:0040B07C                 mov     edi, [esp+4Ch+arg_4]
.text:0040B080                 cmp     [esp+4Ch+var_34], edi
.text:0040B084                 jnb     loc_40AF73
.text:0040B08A                 mov     eax, [esp+4Ch+arg_0]
.text:0040B08E                 mov     ecx, [esp+4Ch+var_34]
.text:0040B092                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:0040B096                 jmp     loc_40AF73
.text:0040B096 ; ---------------------------------------------------------------------------
.text:0040B09B                 align 10h
.text:0040B0A0
.text:0040B0A0 def_40ABC5:                             ; CODE XREF: sub_40AAC0+FF↑j
.text:0040B0A0                                         ; sub_40AAC0+105↑j
.text:0040B0A0                                         ; DATA XREF: ...
.text:0040B0A0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 0040ABC5 default case, cases 1-6,14-31,64
.text:0040B0A5                 jz      loc_40B1D0
.text:0040B0AB                 mov     [esp+4Ch+var_28], 1
.text:0040B0B3                 mov     esi, ds:__mb_cur_max
.text:0040B0B9                 movzx   edx, bl
.text:0040B0BC                 cmp     dword ptr [esi], 1
.text:0040B0BF                 jz      loc_40B1B4
.text:0040B0C5                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040B0CD                 mov     [esp+4Ch+C], edx ; C
.text:0040B0D0                 call    _isctype
.text:0040B0D5
.text:0040B0D5 loc_40B0D5:                             ; CODE XREF: sub_40AAC0+705↓j
.text:0040B0D5                 test    eax, eax
.text:0040B0D7                 setnz   [esp+4Ch+var_29]
.text:0040B0DC
.text:0040B0DC loc_40B0DC:                             ; CODE XREF: sub_40AAC0+7A5↓j
.text:0040B0DC                 cmp     [esp+4Ch+var_21], 0
.text:0040B0E1                 lea     eax, [ebp+1]
.text:0040B0E4                 jz      loc_40AE80
.text:0040B0EA                 cmp     [esp+4Ch+var_29], 0
.text:0040B0EF                 jnz     def_40AFC2      ; jumptable 0040ABC5 cases 37,43-58,65-90,93,95,97-122
.text:0040B0EF                                         ; jumptable 0040AFC2 default case, cases 34-38,42-44,46,48-59
.text:0040B0F5
.text:0040B0F5 loc_40B0F5:                             ; CODE XREF: sub_40AAC0+7AB↓j
.text:0040B0F5                 mov     eax, [esp+4Ch+var_28]
.text:0040B0F9                 lea     edx, [eax+ebp]
.text:0040B0FC                 lea     esi, [esi+0]
.text:0040B100
.text:0040B100 loc_40B100:                             ; CODE XREF: sub_40AAC0+6EF↓j
.text:0040B100                 cmp     [esp+4Ch+var_21], 0
.text:0040B105                 jz      short loc_40B180
.text:0040B107                 cmp     [esp+4Ch+var_29], 0
.text:0040B10C                 jnz     short loc_40B180
.text:0040B10E                 mov     edi, [esp+4Ch+arg_4]
.text:0040B112                 cmp     [esp+4Ch+var_34], edi
.text:0040B116                 jnb     short loc_40B124
.text:0040B118                 mov     esi, [esp+4Ch+arg_0]
.text:0040B11C                 mov     eax, [esp+4Ch+var_34]
.text:0040B120                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:0040B124
.text:0040B124 loc_40B124:                             ; CODE XREF: sub_40AAC0+656↑j
.text:0040B124                 inc     [esp+4Ch+var_34]
.text:0040B128                 mov     ecx, [esp+4Ch+arg_4]
.text:0040B12C                 cmp     [esp+4Ch+var_34], ecx
.text:0040B130                 jnb     short loc_40B145
.text:0040B132                 mov     cl, bl
.text:0040B134                 mov     esi, [esp+4Ch+arg_0]
.text:0040B138                 mov     edi, [esp+4Ch+var_34]
.text:0040B13C                 shr     cl, 6
.text:0040B13F                 add     cl, 30h ; '0'
.text:0040B142                 mov     [edi+esi], cl
.text:0040B145
.text:0040B145 loc_40B145:                             ; CODE XREF: sub_40AAC0+670↑j
.text:0040B145                 inc     [esp+4Ch+var_34]
.text:0040B149                 mov     edi, [esp+4Ch+arg_4]
.text:0040B14D                 cmp     [esp+4Ch+var_34], edi
.text:0040B151                 jnb     short loc_40B169
.text:0040B153                 mov     cl, bl
.text:0040B155                 mov     esi, [esp+4Ch+arg_0]
.text:0040B159                 shr     cl, 3
.text:0040B15C                 mov     edi, [esp+4Ch+var_34]
.text:0040B160                 and     cl, 7
.text:0040B163                 add     cl, 30h ; '0'
.text:0040B166                 mov     [edi+esi], cl
.text:0040B169
.text:0040B169 loc_40B169:                             ; CODE XREF: sub_40AAC0+691↑j
.text:0040B169                 inc     [esp+4Ch+var_34]
.text:0040B16D                 and     bl, 7
.text:0040B170                 add     bl, 30h ; '0'
.text:0040B173                 lea     esi, [esi+0]
.text:0040B179                 lea     edi, [edi+0]
.text:0040B180
.text:0040B180 loc_40B180:                             ; CODE XREF: sub_40AAC0+645↑j
.text:0040B180                                         ; sub_40AAC0+64C↑j
.text:0040B180                 lea     eax, [ebp+1]
.text:0040B183                 cmp     edx, eax
.text:0040B185                 jbe     loc_40AE80
.text:0040B18B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040B18F                 cmp     [esp+4Ch+var_34], ebp
.text:0040B193                 jnb     short loc_40B1A0
.text:0040B195                 mov     ecx, [esp+4Ch+arg_0]
.text:0040B199                 mov     edi, [esp+4Ch+var_34]
.text:0040B19D                 mov     [edi+ecx], bl
.text:0040B1A0
.text:0040B1A0 loc_40B1A0:                             ; CODE XREF: sub_40AAC0+6D3↑j
.text:0040B1A0                 inc     [esp+4Ch+var_34]
.text:0040B1A4                 mov     ebp, eax
.text:0040B1A6                 mov     eax, [esp+4Ch+Str]
.text:0040B1AA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040B1AF                 jmp     loc_40B100
.text:0040B1B4 ; ---------------------------------------------------------------------------
.text:0040B1B4
.text:0040B1B4 loc_40B1B4:                             ; CODE XREF: sub_40AAC0+5FF↑j
.text:0040B1B4                 mov     ecx, ds:_pctype
.text:0040B1BA                 mov     edi, [ecx]
.text:0040B1BC                 movzx   eax, word ptr [edi+edx*2]
.text:0040B1C0                 and     eax, 157h
.text:0040B1C5                 jmp     loc_40B0D5
.text:0040B1C5 ; ---------------------------------------------------------------------------
.text:0040B1CA                 align 10h
.text:0040B1D0
.text:0040B1D0 loc_40B1D0:                             ; CODE XREF: sub_40AAC0+5E5↑j
.text:0040B1D0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040B1D5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040B1DD                 mov     [esp+4Ch+var_28], 0
.text:0040B1E5                 mov     [esp+4Ch+var_29], 1
.text:0040B1EA                 jz      loc_40B37C
.text:0040B1F0
.text:0040B1F0 loc_40B1F0:                             ; CODE XREF: sub_40AAC0+8CC↓j
.text:0040B1F0                 mov     ecx, [esp+4Ch+arg_C]
.text:0040B1F4                 lea     edx, [esp+4Ch+var_18]
.text:0040B1F8                 mov     edi, [esp+4Ch+Str]
.text:0040B1FC                 mov     [esp+4Ch+State], edx ; State
.text:0040B200                 lea     esi, [esp+4Ch+var_18._State]
.text:0040B204                 sub     ecx, ebp
.text:0040B206                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040B20A                 add     edi, ebp
.text:0040B20C                 mov     [esp+4Ch+var_30], edi
.text:0040B210                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:0040B214                 mov     [esp+4Ch+C], esi ; DstCh
.text:0040B217                 call    mbrtowc
.text:0040B21C                 test    eax, eax
.text:0040B21E                 mov     edi, eax
.text:0040B220                 jz      short loc_40B260
.text:0040B222                 cmp     eax, 0FFFFFFFFh
.text:0040B225                 jz      loc_40B372
.text:0040B22B                 cmp     eax, 0FFFFFFFEh
.text:0040B22E                 jz      loc_40B332
.text:0040B234                 cmp     [esp+4Ch+arg_10], 1
.text:0040B239                 jz      short loc_40B270
.text:0040B23B
.text:0040B23B loc_40B23B:                             ; CODE XREF: sub_40AAC0+7B9↓j
.text:0040B23B                                         ; sub_40AAC0+86D↓j
.text:0040B23B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:0040B240                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040B248                 mov     [esp+4Ch+C], ecx ; C
.text:0040B24B                 call    iswctype
.text:0040B250                 test    eax, eax
.text:0040B252                 jnz     short loc_40B259
.text:0040B254                 mov     [esp+4Ch+var_29], 0
.text:0040B259
.text:0040B259 loc_40B259:                             ; CODE XREF: sub_40AAC0+792↑j
.text:0040B259                 mov     [esp+4Ch+var_28], edi
.text:0040B25D                 lea     esi, [esi+0]
.text:0040B260
.text:0040B260 loc_40B260:                             ; CODE XREF: sub_40AAC0+760↑j
.text:0040B260                                         ; sub_40AAC0+87B↓j ...
.text:0040B260                 cmp     [esp+4Ch+var_28], 1
.text:0040B265                 jbe     loc_40B0DC
.text:0040B26B                 jmp     loc_40B0F5
.text:0040B270 ; ---------------------------------------------------------------------------
.text:0040B270
.text:0040B270 loc_40B270:                             ; CODE XREF: sub_40AAC0+779↑j
.text:0040B270                 cmp     [esp+4Ch+arg_10], eax
.text:0040B274                 mov     edx, 1
.text:0040B279                 jnb     short loc_40B23B
.text:0040B27B
.text:0040B27B loc_40B27B:                             ; CODE XREF: sub_40AAC0+867↓j
.text:0040B27B                 mov     ecx, [esp+4Ch+Str]
.text:0040B27F                 lea     esi, [edx+ebp]
.text:0040B282                 movsx   eax, byte ptr [esi+ecx]
.text:0040B286                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:0040B289                 cmp     eax, 21h
.text:0040B28C                 ja      def_40B292      ; jumptable 0040B292 default case, cases 93,95,97-123
.text:0040B292                 jmp     ds:jpt_40B292[eax*4] ; switch jump
.text:0040B292 ; ---------------------------------------------------------------------------
.text:0040B299                 align 4
.text:0040B29C jpt_40B292      dd offset loc_40AECB    ; DATA XREF: sub_40AAC0+7D2↑r
.text:0040B29C                 dd offset loc_40AECB    ; jump table for switch statement
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset loc_40AECB
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset loc_40AECB
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset def_40B292
.text:0040B29C                 dd offset loc_40AECB
.text:0040B324 ; ---------------------------------------------------------------------------
.text:0040B324
.text:0040B324 def_40B292:                             ; CODE XREF: sub_40AAC0+7CC↑j
.text:0040B324                                         ; sub_40AAC0+7D2↑j
.text:0040B324                                         ; DATA XREF: ...
.text:0040B324                 inc     edx             ; jumptable 0040B292 default case, cases 93,95,97-123
.text:0040B325                 cmp     edx, edi
.text:0040B327                 jb      loc_40B27B
.text:0040B32D                 jmp     loc_40B23B
.text:0040B332 ; ---------------------------------------------------------------------------
.text:0040B332
.text:0040B332 loc_40B332:                             ; CODE XREF: sub_40AAC0+76E↑j
.text:0040B332                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040B336                 mov     [esp+4Ch+var_29], 0
.text:0040B33B                 jnb     loc_40B260
.text:0040B341                 mov     eax, [esp+4Ch+var_30]
.text:0040B345                 cmp     byte ptr [eax], 0
.text:0040B348                 jz      loc_40B260
.text:0040B34E
.text:0040B34E loc_40B34E:                             ; CODE XREF: sub_40AAC0+8AB↓j
.text:0040B34E                 inc     [esp+4Ch+var_28]
.text:0040B352                 mov     esi, [esp+4Ch+var_28]
.text:0040B356                 lea     eax, [esi+ebp]
.text:0040B359                 cmp     eax, [esp+4Ch+arg_C]
.text:0040B35D                 jnb     loc_40B260
.text:0040B363                 mov     edi, [esp+4Ch+Str]
.text:0040B367                 cmp     byte ptr [eax+edi], 0
.text:0040B36B                 jnz     short loc_40B34E
.text:0040B36D                 jmp     loc_40B260
.text:0040B372 ; ---------------------------------------------------------------------------
.text:0040B372
.text:0040B372 loc_40B372:                             ; CODE XREF: sub_40AAC0+765↑j
.text:0040B372                 mov     [esp+4Ch+var_29], 0
.text:0040B377                 jmp     loc_40B260
.text:0040B37C ; ---------------------------------------------------------------------------
.text:0040B37C
.text:0040B37C loc_40B37C:                             ; CODE XREF: sub_40AAC0+72A↑j
.text:0040B37C                 mov     edx, [esp+4Ch+Str]
.text:0040B380                 mov     [esp+4Ch+C], edx ; Str
.text:0040B383                 call    strlen
.text:0040B388                 mov     [esp+4Ch+arg_C], eax
.text:0040B38C                 jmp     loc_40B1F0
.text:0040B391 ; ---------------------------------------------------------------------------
.text:0040B391
.text:0040B391 loc_40B391:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040B391                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040B391                 mov     dl, bl          ; jumptable 0040ABC5 case 92
.text:0040B393                 jmp     loc_40AEC4
.text:0040B398 ; ---------------------------------------------------------------------------
.text:0040B398
.text:0040B398 loc_40B398:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040B398                                         ; sub_40AAC0+902↓j
.text:0040B398                                         ; DATA XREF: ...
.text:0040B398                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040ABC5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040B39D                 jnz     def_40AFC2      ; jumptable 0040ABC5 cases 37,43-58,65-90,93,95,97-122
.text:0040B39D                                         ; jumptable 0040AFC2 default case, cases 34-38,42-44,46,48-59
.text:0040B3A3                 jmp     loc_40AECB      ; jumptable 0040B292 cases 91,92,94,96,124
.text:0040B3A8 ; ---------------------------------------------------------------------------
.text:0040B3A8
.text:0040B3A8 loc_40B3A8:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040B3A8                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040B3A8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 0040ABC5 cases 123,125
.text:0040B3AD                 jz      short loc_40B3C4
.text:0040B3AF                 cmp     [esp+4Ch+arg_C], 1
.text:0040B3B4
.text:0040B3B4 loc_40B3B4:                             ; CODE XREF: sub_40AAC0+90C↓j
.text:0040B3B4                 jnz     def_40AFC2      ; jumptable 0040ABC5 cases 37,43-58,65-90,93,95,97-122
.text:0040B3B4                                         ; jumptable 0040AFC2 default case, cases 34-38,42-44,46,48-59
.text:0040B3BA
.text:0040B3BA loc_40B3BA:                             ; CODE XREF: sub_40AAC0+105↑j
.text:0040B3BA                                         ; DATA XREF: sub_40AAC0:jpt_40ABC5↑o
.text:0040B3BA                 test    ebp, ebp        ; jumptable 0040ABC5 cases 35,126
.text:0040B3BC                 jnz     def_40AFC2      ; jumptable 0040ABC5 cases 37,43-58,65-90,93,95,97-122
.text:0040B3BC                                         ; jumptable 0040AFC2 default case, cases 34-38,42-44,46,48-59
.text:0040B3C2                 jmp     short loc_40B398 ; jumptable 0040ABC5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040B3C4 ; ---------------------------------------------------------------------------
.text:0040B3C4
.text:0040B3C4 loc_40B3C4:                             ; CODE XREF: sub_40AAC0+8ED↑j
.text:0040B3C4                 mov     esi, [esp+4Ch+Str]
.text:0040B3C8                 cmp     byte ptr [esi+1], 0
.text:0040B3CC                 jmp     short loc_40B3B4
.text:0040B3CE ; ---------------------------------------------------------------------------
.text:0040B3CE
.text:0040B3CE loc_40B3CE:                             ; CODE XREF: sub_40AAC0:loc_40AB5F↑j
.text:0040B3CE                 test    ebp, ebp
.text:0040B3D0                 jnz     short loc_40B3DD
.text:0040B3D2                 cmp     [esp+4Ch+arg_10], 1
.text:0040B3D7                 jz      loc_40AECB      ; jumptable 0040B292 cases 91,92,94,96,124
.text:0040B3DD
.text:0040B3DD loc_40B3DD:                             ; CODE XREF: sub_40AAC0+910↑j
.text:0040B3DD                 mov     esi, [esp+4Ch+var_1C]
.text:0040B3E1                 test    esi, esi
.text:0040B3E3                 jz      short loc_40B418
.text:0040B3E5                 mov     edi, [esp+4Ch+var_1C]
.text:0040B3E9                 movzx   eax, byte ptr [edi]
.text:0040B3EC                 test    al, al
.text:0040B3EE                 jz      short loc_40B418
.text:0040B3F0
.text:0040B3F0 loc_40B3F0:                             ; CODE XREF: sub_40AAC0+956↓j
.text:0040B3F0                 mov     ebp, [esp+4Ch+arg_4]
.text:0040B3F4                 cmp     [esp+4Ch+var_34], ebp
.text:0040B3F8                 jnb     short loc_40B405
.text:0040B3FA                 mov     ecx, [esp+4Ch+arg_0]
.text:0040B3FE                 mov     ebx, [esp+4Ch+var_34]
.text:0040B402                 mov     [ebx+ecx], al
.text:0040B405
.text:0040B405 loc_40B405:                             ; CODE XREF: sub_40AAC0+938↑j
.text:0040B405                 inc     [esp+4Ch+var_1C]
.text:0040B409                 inc     [esp+4Ch+var_34]
.text:0040B40D                 mov     edx, [esp+4Ch+var_1C]
.text:0040B411                 movzx   eax, byte ptr [edx]
.text:0040B414                 test    al, al
.text:0040B416                 jnz     short loc_40B3F0
.text:0040B418
.text:0040B418 loc_40B418:                             ; CODE XREF: sub_40AAC0+923↑j
.text:0040B418                                         ; sub_40AAC0+92E↑j
.text:0040B418                 mov     eax, [esp+4Ch+arg_4]
.text:0040B41C                 cmp     [esp+4Ch+var_34], eax
.text:0040B420                 jnb     short loc_40B42E
.text:0040B422                 mov     edi, [esp+4Ch+arg_0]
.text:0040B426                 mov     esi, [esp+4Ch+var_34]
.text:0040B42A                 mov     byte ptr [esi+edi], 0
.text:0040B42E
.text:0040B42E loc_40B42E:                             ; CODE XREF: sub_40AAC0+960↑j
.text:0040B42E                 mov     eax, [esp+4Ch+var_34]
.text:0040B432                 jmp     loc_40AEFF
.text:0040B437 ; ---------------------------------------------------------------------------
.text:0040B437
.text:0040B437 loc_40B437:                             ; CODE XREF: sub_40AAC0+95↑j
.text:0040B437                 mov     ebx, [esp+4Ch+Str]
.text:0040B43B                 cmp     byte ptr [ebp+ebx+0], 0
.text:0040B440                 jmp     loc_40AB5F
.text:0040B445 ; ---------------------------------------------------------------------------
.text:0040B445
.text:0040B445 loc_40B445:                             ; CODE XREF: sub_40AAC0+3D↑j
.text:0040B445                                         ; DATA XREF: sub_40AAC0:jpt_40AAFD↑o
.text:0040B445                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040AAFD case 2
.text:0040B449                 cmp     [esp+4Ch+var_34], edx
.text:0040B44D                 jnb     short loc_40B456
.text:0040B44F                 mov     ecx, [esp+4Ch+arg_0]
.text:0040B453                 mov     byte ptr [ecx], 27h ; '''
.text:0040B456
.text:0040B456 loc_40B456:                             ; CODE XREF: sub_40AAC0+98D↑j
.text:0040B456                 mov     [esp+4Ch+var_34], 1
.text:0040B45E                 mov     [esp+4Ch+var_1C], 40AAAEh
.text:0040B466                 jmp     loc_40AB46
.text:0040B46B ; ---------------------------------------------------------------------------
.text:0040B46B
.text:0040B46B loc_40B46B:                             ; CODE XREF: sub_40AAC0+3D↑j
.text:0040B46B                                         ; DATA XREF: sub_40AAC0:jpt_40AAFD↑o
.text:0040B46B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040AAFD case 4
.text:0040B470                 jmp     def_40AAFD      ; jumptable 0040AAFD default case, cases 0,1
.text:0040B475 ; ---------------------------------------------------------------------------
.text:0040B475
.text:0040B475 loc_40B475:                             ; CODE XREF: sub_40AAC0+3D↑j
.text:0040B475                                         ; DATA XREF: sub_40AAC0:jpt_40AAFD↑o
.text:0040B475                 mov     [esp+4Ch+C], 40AAB0h ; jumptable 0040AAFD cases 5,6
.text:0040B47C                 call    ds:libintl_gettext
.text:0040B482                 cmp     eax, 40AAB0h
.text:0040B487                 mov     edi, eax
.text:0040B489                 jz      short loc_40B500
.text:0040B48B
.text:0040B48B loc_40B48B:                             ; CODE XREF: sub_40AAC0+A45↓j
.text:0040B48B                                         ; sub_40AAC0+A4C↓j
.text:0040B48B                 mov     [esp+4Ch+C], 40AAAEh
.text:0040B492                 call    ds:libintl_gettext
.text:0040B498                 cmp     eax, 40AAAEh
.text:0040B49D                 mov     edx, eax
.text:0040B49F                 jz      short loc_40B4F2
.text:0040B4A1
.text:0040B4A1 loc_40B4A1:                             ; CODE XREF: sub_40AAC0+A37↓j
.text:0040B4A1                                         ; sub_40AAC0+A3E↓j
.text:0040B4A1                 mov     [esp+4Ch+var_1C], edi
.text:0040B4A5                 cmp     byte ptr [edi], 0
.text:0040B4A8                 jz      short loc_40B4D8
.text:0040B4AA
.text:0040B4AA loc_40B4AA:                             ; CODE XREF: sub_40AAC0+A16↓j
.text:0040B4AA                 mov     ecx, [esp+4Ch+arg_4]
.text:0040B4AE                 cmp     [esp+4Ch+var_34], ecx
.text:0040B4B2                 jnb     short loc_40B4C7
.text:0040B4B4                 mov     ebp, [esp+4Ch+var_1C]
.text:0040B4B8                 mov     edi, [esp+4Ch+arg_0]
.text:0040B4BC                 mov     esi, [esp+4Ch+var_34]
.text:0040B4C0                 movzx   ebx, byte ptr [ebp+0]
.text:0040B4C4                 mov     [esi+edi], bl
.text:0040B4C7
.text:0040B4C7 loc_40B4C7:                             ; CODE XREF: sub_40AAC0+9F2↑j
.text:0040B4C7                 inc     [esp+4Ch+var_1C]
.text:0040B4CB                 inc     [esp+4Ch+var_34]
.text:0040B4CF                 mov     eax, [esp+4Ch+var_1C]
.text:0040B4D3                 cmp     byte ptr [eax], 0
.text:0040B4D6                 jnz     short loc_40B4AA
.text:0040B4D8
.text:0040B4D8 loc_40B4D8:                             ; CODE XREF: sub_40AAC0+9E8↑j
.text:0040B4D8                 mov     [esp+4Ch+var_21], 1
.text:0040B4DD                 mov     [esp+4Ch+var_1C], edx
.text:0040B4E1                 mov     [esp+4Ch+C], edx ; Str
.text:0040B4E4                 call    strlen
.text:0040B4E9                 mov     [esp+4Ch+var_20], eax
.text:0040B4ED                 jmp     def_40AAFD      ; jumptable 0040AAFD default case, cases 0,1
.text:0040B4F2 ; ---------------------------------------------------------------------------
.text:0040B4F2
.text:0040B4F2 loc_40B4F2:                             ; CODE XREF: sub_40AAC0+9DF↑j
.text:0040B4F2                 cmp     [esp+4Ch+arg_10], 6
.text:0040B4F7                 jnz     short loc_40B4A1
.text:0040B4F9                 mov     edx, offset asc_40AAAC ; "\"'`"
.text:0040B4FE                 jmp     short loc_40B4A1
.text:0040B500 ; ---------------------------------------------------------------------------
.text:0040B500
.text:0040B500 loc_40B500:                             ; CODE XREF: sub_40AAC0+9C9↑j
.text:0040B500                 cmp     [esp+4Ch+arg_10], 6
.text:0040B505                 jnz     short loc_40B48B
.text:0040B507                 mov     edi, offset asc_40AAAC ; "\"'`"
.text:0040B50C                 jmp     loc_40B48B
.text:0040B50C sub_40AAC0      endp
.text:0040B50C
.text:0040B511 ; ---------------------------------------------------------------------------
.text:0040B511                 jmp     short loc_40B520
.text:0040B511 ; ---------------------------------------------------------------------------
.text:0040B513                 align 10h
.text:0040B520
.text:0040B520 loc_40B520:                             ; CODE XREF: .text:0040B511↑j
.text:0040B520                 sub     esp, 0Ch
.text:0040B523                 mov     [esp+4], ebx
.text:0040B527                 mov     [esp+8], esi
.text:0040B52B                 call    _errno
.text:0040B530                 mov     esi, [eax]
.text:0040B532                 mov     dword ptr [esp], 24h ; '$'
.text:0040B539                 call    sub_406950
.text:0040B53E                 mov     edx, [esp+10h]
.text:0040B542                 mov     ebx, eax
.text:0040B544                 test    edx, edx
.text:0040B546                 jz      short loc_40B591
.text:0040B548
.text:0040B548 loc_40B548:                             ; CODE XREF: .text:0040B596↓j
.text:0040B548                 mov     ecx, [edx]
.text:0040B54A                 mov     [ebx], ecx
.text:0040B54C                 mov     ecx, [edx+4]
.text:0040B54F                 mov     [ebx+4], ecx
.text:0040B552                 mov     ecx, [edx+8]
.text:0040B555                 mov     [ebx+8], ecx
.text:0040B558                 mov     ecx, [edx+0Ch]
.text:0040B55B                 mov     [ebx+0Ch], ecx
.text:0040B55E                 mov     ecx, [edx+10h]
.text:0040B561                 mov     [ebx+10h], ecx
.text:0040B564                 mov     ecx, [edx+14h]
.text:0040B567                 mov     [ebx+14h], ecx
.text:0040B56A                 mov     ecx, [edx+18h]
.text:0040B56D                 mov     [ebx+18h], ecx
.text:0040B570                 mov     ecx, [edx+1Ch]
.text:0040B573                 mov     [ebx+1Ch], ecx
.text:0040B576                 mov     ecx, [edx+20h]
.text:0040B579                 mov     [ebx+20h], ecx
.text:0040B57C                 call    _errno
.text:0040B581                 mov     [eax], esi
.text:0040B583                 mov     esi, [esp+8]
.text:0040B587                 mov     eax, ebx
.text:0040B589                 mov     ebx, [esp+4]
.text:0040B58D                 add     esp, 0Ch
.text:0040B590                 retn
.text:0040B591 ; ---------------------------------------------------------------------------
.text:0040B591
.text:0040B591 loc_40B591:                             ; CODE XREF: .text:0040B546↑j
.text:0040B591                 mov     edx, offset dword_41F170
.text:0040B596                 jmp     short loc_40B548
.text:0040B596 ; ---------------------------------------------------------------------------
.text:0040B598                 align 10h
.text:0040B5A0                 mov     eax, [esp+4]
.text:0040B5A4                 test    eax, eax
.text:0040B5A6                 jz      short loc_40B5B0
.text:0040B5A8
.text:0040B5A8 loc_40B5A8:                             ; CODE XREF: .text:0040B5B5↓j
.text:0040B5A8                 mov     eax, [eax]
.text:0040B5AA                 retn
.text:0040B5AA ; ---------------------------------------------------------------------------
.text:0040B5AB                 align 10h
.text:0040B5B0
.text:0040B5B0 loc_40B5B0:                             ; CODE XREF: .text:0040B5A6↑j
.text:0040B5B0                 mov     eax, offset dword_41F170
.text:0040B5B5                 jmp     short loc_40B5A8
.text:0040B5B5 ; ---------------------------------------------------------------------------
.text:0040B5B7                 align 10h
.text:0040B5C0                 mov     edx, [esp+4]
.text:0040B5C4                 test    edx, edx
.text:0040B5C6                 jz      short loc_40B5D0
.text:0040B5C8
.text:0040B5C8 loc_40B5C8:                             ; CODE XREF: .text:0040B5D5↓j
.text:0040B5C8                 mov     ecx, [esp+8]
.text:0040B5CC                 mov     [edx], ecx
.text:0040B5CE                 retn
.text:0040B5CE ; ---------------------------------------------------------------------------
.text:0040B5CF                 align 10h
.text:0040B5D0
.text:0040B5D0 loc_40B5D0:                             ; CODE XREF: .text:0040B5C6↑j
.text:0040B5D0                 mov     edx, offset dword_41F170
.text:0040B5D5                 jmp     short loc_40B5C8
.text:0040B5D5 ; ---------------------------------------------------------------------------
.text:0040B5D7                 align 10h
.text:0040B5E0                 sub     esp, 8
.text:0040B5E3                 mov     eax, [esp+0Ch]
.text:0040B5E7                 movzx   ecx, byte ptr [esp+10h]
.text:0040B5EC                 mov     [esp], ebx
.text:0040B5EF                 mov     ebx, [esp+14h]
.text:0040B5F3                 mov     [esp+4], esi
.text:0040B5F7                 mov     dl, cl
.text:0040B5F9                 shr     dl, 5
.text:0040B5FC                 movzx   edx, dl
.text:0040B5FF                 shl     edx, 2
.text:0040B602                 test    eax, eax
.text:0040B604                 lea     esi, [edx+eax+4]
.text:0040B608                 jz      short loc_40B630
.text:0040B60A
.text:0040B60A loc_40B60A:                             ; CODE XREF: .text:0040B636↓j
.text:0040B60A                 mov     edx, [esi]
.text:0040B60C                 and     ecx, 1Fh
.text:0040B60F                 and     ebx, 1
.text:0040B612                 mov     eax, edx
.text:0040B614                 shr     eax, cl
.text:0040B616                 and     eax, 1
.text:0040B619                 xor     ebx, eax
.text:0040B61B                 shl     ebx, cl
.text:0040B61D                 xor     edx, ebx
.text:0040B61F                 mov     [esi], edx
.text:0040B621                 mov     ebx, [esp]
.text:0040B624                 mov     esi, [esp+4]
.text:0040B628                 add     esp, 8
.text:0040B62B                 retn
.text:0040B62B ; ---------------------------------------------------------------------------
.text:0040B62C                 align 10h
.text:0040B630
.text:0040B630 loc_40B630:                             ; CODE XREF: .text:0040B608↑j
.text:0040B630                 lea     esi, dword_41F174[edx]
.text:0040B636                 jmp     short loc_40B60A
.text:0040B636 ; ---------------------------------------------------------------------------
.text:0040B638                 align 10h
.text:0040B640                 sub     esp, 2Ch
.text:0040B643                 mov     [esp+24h], ebx
.text:0040B647                 mov     ebx, [esp+40h]
.text:0040B64B                 mov     [esp+28h], esi
.text:0040B64F                 test    ebx, ebx
.text:0040B651                 jz      short loc_40B6A0
.text:0040B653
.text:0040B653 loc_40B653:                             ; CODE XREF: .text:0040B6A5↓j
.text:0040B653                 call    _errno
.text:0040B658                 mov     esi, [eax]
.text:0040B65A                 mov     [esp+14h], ebx
.text:0040B65E                 mov     edx, [ebx]
.text:0040B660                 mov     ecx, [esp+38h]
.text:0040B664                 mov     ebx, [esp+3Ch]
.text:0040B668                 mov     [esp+10h], edx
.text:0040B66C                 mov     edx, [esp+34h]
.text:0040B670                 mov     [esp+0Ch], ebx
.text:0040B674                 mov     [esp+8], ecx
.text:0040B678                 mov     [esp+4], edx
.text:0040B67C                 mov     edx, [esp+30h]
.text:0040B680                 mov     [esp], edx
.text:0040B683                 call    sub_40AAC0
.text:0040B688                 mov     ebx, eax
.text:0040B68A                 call    _errno
.text:0040B68F                 mov     [eax], esi
.text:0040B691                 mov     esi, [esp+28h]
.text:0040B695                 mov     eax, ebx
.text:0040B697                 mov     ebx, [esp+24h]
.text:0040B69B                 add     esp, 2Ch
.text:0040B69E                 retn
.text:0040B69E ; ---------------------------------------------------------------------------
.text:0040B69F                 align 10h
.text:0040B6A0
.text:0040B6A0 loc_40B6A0:                             ; CODE XREF: .text:0040B651↑j
.text:0040B6A0                 mov     ebx, offset dword_41F170
.text:0040B6A5                 jmp     short loc_40B653
.text:0040B6A5 ; ---------------------------------------------------------------------------
.text:0040B6A7                 align 10h
.text:0040B6B0                 push    ebp
.text:0040B6B1                 push    edi
.text:0040B6B2                 push    esi
.text:0040B6B3                 push    ebx
.text:0040B6B4                 sub     esp, 2Ch
.text:0040B6B7                 mov     ebp, [esp+48h]
.text:0040B6BB                 call    _errno
.text:0040B6C0                 mov     edx, [eax]
.text:0040B6C2                 test    ebp, ebp
.text:0040B6C4                 mov     ebx, ebp
.text:0040B6C6                 mov     [esp+28h], edx
.text:0040B6CA                 jz      loc_40B780
.text:0040B6D0
.text:0040B6D0 loc_40B6D0:                             ; CODE XREF: .text:0040B785↓j
.text:0040B6D0                 call    _errno
.text:0040B6D5                 mov     edi, [eax]
.text:0040B6D7                 mov     esi, ebp
.text:0040B6D9                 mov     [esp+14h], ebx
.text:0040B6DD                 mov     ecx, [ebx]
.text:0040B6DF                 mov     dword ptr [esp], 0
.text:0040B6E6                 mov     edx, [esp+44h]
.text:0040B6EA                 mov     dword ptr [esp+4], 0
.text:0040B6F2                 mov     eax, [esp+40h]
.text:0040B6F6                 mov     [esp+10h], ecx
.text:0040B6FA                 mov     [esp+0Ch], edx
.text:0040B6FE                 mov     [esp+8], eax
.text:0040B702                 call    sub_40AAC0
.text:0040B707                 mov     ebx, eax
.text:0040B709                 call    _errno
.text:0040B70E                 mov     [eax], edi
.text:0040B710                 lea     edi, [ebx+1]
.text:0040B713                 mov     [esp], edi
.text:0040B716                 call    sub_406950
.text:0040B71B                 mov     [esp+24h], eax
.text:0040B71F                 test    ebp, ebp
.text:0040B721                 jz      short loc_40B772
.text:0040B723
.text:0040B723 loc_40B723:                             ; CODE XREF: .text:0040B777↓j
.text:0040B723                 call    _errno
.text:0040B728                 mov     ebp, [eax]
.text:0040B72A                 mov     [esp+14h], esi
.text:0040B72E                 mov     ecx, [esi]
.text:0040B730                 mov     [esp+4], edi
.text:0040B734                 mov     edx, [esp+44h]
.text:0040B738                 mov     esi, [esp+24h]
.text:0040B73C                 mov     [esp+10h], ecx
.text:0040B740                 mov     eax, [esp+40h]
.text:0040B744                 mov     [esp+0Ch], edx
.text:0040B748                 mov     [esp], esi
.text:0040B74B                 mov     [esp+8], eax
.text:0040B74F                 call    sub_40AAC0
.text:0040B754                 call    _errno
.text:0040B759                 mov     [eax], ebp
.text:0040B75B                 call    _errno
.text:0040B760                 mov     ebx, [esp+28h]
.text:0040B764                 mov     [eax], ebx
.text:0040B766                 mov     eax, [esp+24h]
.text:0040B76A                 add     esp, 2Ch
.text:0040B76D                 pop     ebx
.text:0040B76E                 pop     esi
.text:0040B76F                 pop     edi
.text:0040B770                 pop     ebp
.text:0040B771                 retn
.text:0040B772 ; ---------------------------------------------------------------------------
.text:0040B772
.text:0040B772 loc_40B772:                             ; CODE XREF: .text:0040B721↑j
.text:0040B772                 mov     esi, offset dword_41F170
.text:0040B777                 jmp     short loc_40B723
.text:0040B777 ; ---------------------------------------------------------------------------
.text:0040B779                 align 10h
.text:0040B780
.text:0040B780 loc_40B780:                             ; CODE XREF: .text:0040B6CA↑j
.text:0040B780                 mov     ebx, offset dword_41F170
.text:0040B785                 jmp     loc_40B6D0
.text:0040B785 ; ---------------------------------------------------------------------------
.text:0040B78A                 align 10h
.text:0040B790                 sub     esp, 1Ch
.text:0040B793                 mov     edx, [esp+24h]
.text:0040B797                 mov     dword ptr [esp+0Ch], offset dword_41F170
.text:0040B79F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040B7A7                 mov     [esp+4], edx
.text:0040B7AB                 mov     edx, [esp+20h]
.text:0040B7AF                 mov     [esp], edx
.text:0040B7B2                 call    sub_40BC00
.text:0040B7B7                 add     esp, 1Ch
.text:0040B7BA                 retn
.text:0040B7BA ; ---------------------------------------------------------------------------
.text:0040B7BB                 align 10h
.text:0040B7C0                 sub     esp, 1Ch
.text:0040B7C3                 mov     edx, [esp+20h]
.text:0040B7C7                 mov     dword ptr [esp+0Ch], offset dword_41F170
.text:0040B7CF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040B7D7                 mov     [esp+4], edx
.text:0040B7DB                 mov     dword ptr [esp], 0
.text:0040B7E2                 call    sub_40BC00
.text:0040B7E7                 add     esp, 1Ch
.text:0040B7EA                 retn
.text:0040B7EA ; ---------------------------------------------------------------------------
.text:0040B7EB                 align 10h
.text:0040B7F0
.text:0040B7F0 ; =============== S U B R O U T I N E =======================================
.text:0040B7F0
.text:0040B7F0
.text:0040B7F0 ; int __cdecl sub_40B7F0(int, int, char *)
.text:0040B7F0 sub_40B7F0      proc near               ; CODE XREF: .text:004064CE↑p
.text:0040B7F0                                         ; sub_406680+96↑p ...
.text:0040B7F0
.text:0040B7F0 var_BC          = dword ptr -0BCh
.text:0040B7F0 var_B8          = dword ptr -0B8h
.text:0040B7F0 var_B4          = dword ptr -0B4h
.text:0040B7F0 var_B0          = dword ptr -0B0h
.text:0040B7F0 var_AC          = dword ptr -0ACh
.text:0040B7F0 var_A8          = dword ptr -0A8h
.text:0040B7F0 var_A4          = dword ptr -0A4h
.text:0040B7F0 var_A0          = dword ptr -0A0h
.text:0040B7F0 var_9C          = dword ptr -9Ch
.text:0040B7F0 var_98          = dword ptr -98h
.text:0040B7F0 var_94          = dword ptr -94h
.text:0040B7F0 var_90          = dword ptr -90h
.text:0040B7F0 var_8C          = dword ptr -8Ch
.text:0040B7F0 var_7C          = dword ptr -7Ch
.text:0040B7F0 var_78          = dword ptr -78h
.text:0040B7F0 var_74          = dword ptr -74h
.text:0040B7F0 var_70          = dword ptr -70h
.text:0040B7F0 var_6C          = dword ptr -6Ch
.text:0040B7F0 var_68          = dword ptr -68h
.text:0040B7F0 var_64          = dword ptr -64h
.text:0040B7F0 var_60          = dword ptr -60h
.text:0040B7F0 var_5C          = dword ptr -5Ch
.text:0040B7F0 var_4C          = dword ptr -4Ch
.text:0040B7F0 var_48          = dword ptr -48h
.text:0040B7F0 var_44          = dword ptr -44h
.text:0040B7F0 var_40          = dword ptr -40h
.text:0040B7F0 var_3C          = dword ptr -3Ch
.text:0040B7F0 var_38          = dword ptr -38h
.text:0040B7F0 var_34          = dword ptr -34h
.text:0040B7F0 var_30          = dword ptr -30h
.text:0040B7F0 var_2C          = dword ptr -2Ch
.text:0040B7F0 arg_0           = dword ptr  4
.text:0040B7F0 arg_4           = dword ptr  8
.text:0040B7F0 arg_8           = dword ptr  0Ch
.text:0040B7F0
.text:0040B7F0                 push    ebp
.text:0040B7F1                 xor     eax, eax
.text:0040B7F3                 mov     ecx, 8
.text:0040B7F8                 push    edi
.text:0040B7F9                 push    esi
.text:0040B7FA                 push    ebx
.text:0040B7FB                 sub     esp, 0ACh
.text:0040B801                 mov     ebp, [esp+0BCh+arg_4]
.text:0040B808                 cld
.text:0040B809                 lea     edi, [esp+0BCh+var_A8]
.text:0040B80D                 mov     [esp+0BCh+var_AC], ebp
.text:0040B811                 rep stosd
.text:0040B813                 mov     eax, [esp+0BCh+var_8C]
.text:0040B817                 mov     edi, [esp+0BCh+var_AC]
.text:0040B81B                 mov     esi, [esp+0BCh+var_A8]
.text:0040B81F                 mov     [esp+0BCh+var_5C], eax
.text:0040B823                 mov     ebp, [esp+0BCh+var_A4]
.text:0040B827                 mov     eax, [esp+0BCh+var_AC]
.text:0040B82B                 mov     [esp+0BCh+var_7C], edi
.text:0040B82F                 mov     ecx, [esp+0BCh+var_94]
.text:0040B833                 mov     edi, [esp+0BCh+var_A0]
.text:0040B837                 mov     [esp+0BCh+var_78], esi
.text:0040B83B                 mov     edx, [esp+0BCh+var_90]
.text:0040B83F                 mov     esi, [esp+0BCh+var_9C]
.text:0040B843                 mov     [esp+0BCh+var_4C], eax
.text:0040B847                 mov     ebx, [esp+0BCh+var_98]
.text:0040B84B                 mov     eax, [esp+0BCh+var_A8]
.text:0040B84F                 mov     [esp+0BCh+var_74], ebp
.text:0040B853                 mov     [esp+0BCh+var_70], edi
.text:0040B857                 mov     [esp+0BCh+var_6C], esi
.text:0040B85B                 mov     [esp+0BCh+var_68], ebx
.text:0040B85F                 mov     [esp+0BCh+var_64], ecx
.text:0040B863                 mov     [esp+0BCh+var_60], edx
.text:0040B867                 mov     [esp+0BCh+var_48], eax
.text:0040B86B                 mov     [esp+0BCh+var_44], ebp
.text:0040B86F                 mov     [esp+0BCh+var_40], edi
.text:0040B873                 mov     [esp+0BCh+var_3C], esi
.text:0040B87A                 mov     [esp+0BCh+var_38], ebx
.text:0040B881                 mov     ebx, [esp+0BCh+var_8C]
.text:0040B885                 mov     [esp+0BCh+var_30], edx
.text:0040B88C                 mov     edx, [esp+0BCh+arg_8]
.text:0040B893                 mov     [esp+0BCh+var_34], ecx
.text:0040B89A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040B89E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:0040B8A2                 mov     edx, [esp+0BCh+arg_0]
.text:0040B8A9                 mov     [esp+0BCh+var_2C], ebx
.text:0040B8B0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:0040B8B4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040B8BC                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040B8BF                 call    sub_40BC00
.text:0040B8C4                 add     esp, 0ACh
.text:0040B8CA                 pop     ebx
.text:0040B8CB                 pop     esi
.text:0040B8CC                 pop     edi
.text:0040B8CD                 pop     ebp
.text:0040B8CE                 retn
.text:0040B8CE sub_40B7F0      endp
.text:0040B8CE
.text:0040B8CE ; ---------------------------------------------------------------------------
.text:0040B8CF                 align 10h
.text:0040B8D0                 push    ebp
.text:0040B8D1                 xor     eax, eax
.text:0040B8D3                 mov     ecx, 8
.text:0040B8D8                 push    edi
.text:0040B8D9                 push    esi
.text:0040B8DA                 push    ebx
.text:0040B8DB                 sub     esp, 0ACh
.text:0040B8E1                 mov     edx, [esp+0C4h]
.text:0040B8E8                 cld
.text:0040B8E9                 lea     edi, [esp+14h]
.text:0040B8ED                 mov     [esp+10h], edx
.text:0040B8F1                 rep stosd
.text:0040B8F3                 mov     eax, [esp+30h]
.text:0040B8F7                 mov     ebp, [esp+10h]
.text:0040B8FB                 mov     edi, [esp+14h]
.text:0040B8FF                 mov     [esp+60h], eax
.text:0040B903                 mov     esi, [esp+20h]
.text:0040B907                 mov     eax, [esp+10h]
.text:0040B90B                 mov     [esp+40h], ebp
.text:0040B90F                 mov     ecx, [esp+28h]
.text:0040B913                 mov     ebp, [esp+18h]
.text:0040B917                 mov     [esp+44h], edi
.text:0040B91B                 mov     edx, [esp+2Ch]
.text:0040B91F                 mov     edi, [esp+1Ch]
.text:0040B923                 mov     [esp+70h], eax
.text:0040B927                 mov     ebx, [esp+24h]
.text:0040B92B                 mov     eax, [esp+14h]
.text:0040B92F                 mov     [esp+48h], ebp
.text:0040B933                 mov     [esp+4Ch], edi
.text:0040B937                 mov     [esp+50h], esi
.text:0040B93B                 mov     [esp+54h], ebx
.text:0040B93F                 mov     [esp+58h], ecx
.text:0040B943                 mov     [esp+5Ch], edx
.text:0040B947                 mov     [esp+74h], eax
.text:0040B94B                 mov     [esp+78h], ebp
.text:0040B94F                 mov     [esp+7Ch], edi
.text:0040B953                 mov     [esp+80h], esi
.text:0040B95A                 mov     [esp+84h], ebx
.text:0040B961                 mov     esi, [esp+30h]
.text:0040B965                 lea     ebx, [esp+70h]
.text:0040B969                 mov     [esp+8Ch], edx
.text:0040B970                 mov     edx, [esp+0C8h]
.text:0040B977                 mov     [esp+88h], ecx
.text:0040B97E                 mov     ecx, [esp+0CCh]
.text:0040B985                 mov     [esp+4], edx
.text:0040B989                 mov     edx, [esp+0C0h]
.text:0040B990                 mov     [esp+90h], esi
.text:0040B997                 mov     [esp+0Ch], ebx
.text:0040B99B                 mov     [esp+8], ecx
.text:0040B99F                 mov     [esp], edx
.text:0040B9A2                 call    sub_40BC00
.text:0040B9A7                 add     esp, 0ACh
.text:0040B9AD                 pop     ebx
.text:0040B9AE                 pop     esi
.text:0040B9AF                 pop     edi
.text:0040B9B0                 pop     ebp
.text:0040B9B1                 retn
.text:0040B9B1 ; ---------------------------------------------------------------------------
.text:0040B9B2                 align 10h
.text:0040B9C0                 push    ebp
.text:0040B9C1                 xor     eax, eax
.text:0040B9C3                 mov     ecx, 8
.text:0040B9C8                 push    edi
.text:0040B9C9                 push    esi
.text:0040B9CA                 push    ebx
.text:0040B9CB                 sub     esp, 0ACh
.text:0040B9D1                 mov     edi, [esp+0C0h]
.text:0040B9D8                 cld
.text:0040B9D9                 mov     [esp+10h], edi
.text:0040B9DD                 lea     edi, [esp+14h]
.text:0040B9E1                 rep stosd
.text:0040B9E3                 mov     eax, [esp+30h]
.text:0040B9E7                 mov     esi, [esp+10h]
.text:0040B9EB                 mov     ebx, [esp+14h]
.text:0040B9EF                 mov     [esp+60h], eax
.text:0040B9F3                 mov     ebp, [esp+18h]
.text:0040B9F7                 mov     eax, [esp+10h]
.text:0040B9FB                 mov     [esp+40h], esi
.text:0040B9FF                 mov     edi, [esp+1Ch]
.text:0040BA03                 mov     esi, [esp+20h]
.text:0040BA07                 mov     [esp+44h], ebx
.text:0040BA0B                 mov     ecx, [esp+28h]
.text:0040BA0F                 mov     edx, [esp+2Ch]
.text:0040BA13                 mov     [esp+70h], eax
.text:0040BA17                 mov     ebx, [esp+24h]
.text:0040BA1B                 mov     eax, [esp+14h]
.text:0040BA1F                 mov     [esp+48h], ebp
.text:0040BA23                 mov     [esp+4Ch], edi
.text:0040BA27                 mov     [esp+50h], esi
.text:0040BA2B                 mov     [esp+54h], ebx
.text:0040BA2F                 mov     [esp+58h], ecx
.text:0040BA33                 mov     [esp+5Ch], edx
.text:0040BA37                 mov     [esp+74h], eax
.text:0040BA3B                 mov     [esp+78h], ebp
.text:0040BA3F                 mov     [esp+7Ch], edi
.text:0040BA43                 mov     [esp+80h], esi
.text:0040BA4A                 mov     [esp+84h], ebx
.text:0040BA51                 mov     [esp+8Ch], edx
.text:0040BA58                 lea     edx, [esp+70h]
.text:0040BA5C                 mov     [esp+88h], ecx
.text:0040BA63                 mov     ecx, [esp+30h]
.text:0040BA67                 mov     [esp+0Ch], edx
.text:0040BA6B                 mov     edx, [esp+0C4h]
.text:0040BA72                 mov     [esp+90h], ecx
.text:0040BA79                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040BA81                 mov     [esp+4], edx
.text:0040BA85                 mov     dword ptr [esp], 0
.text:0040BA8C                 call    sub_40BC00
.text:0040BA91                 add     esp, 0ACh
.text:0040BA97                 pop     ebx
.text:0040BA98                 pop     esi
.text:0040BA99                 pop     edi
.text:0040BA9A                 pop     ebp
.text:0040BA9B                 retn
.text:0040BA9B ; ---------------------------------------------------------------------------
.text:0040BA9C                 align 10h
.text:0040BAA0                 push    edi
.text:0040BAA1                 push    esi
.text:0040BAA2                 push    ebx
.text:0040BAA3                 sub     esp, 40h
.text:0040BAA6                 mov     edx, ds:dword_41F17C
.text:0040BAAC                 mov     ebx, ds:dword_41F170
.text:0040BAB2                 mov     esi, ds:dword_41F178
.text:0040BAB8                 mov     edi, ds:dword_41F174
.text:0040BABE                 mov     [esp+1Ch], edx
.text:0040BAC2                 mov     ecx, ds:dword_41F180
.text:0040BAC8                 mov     edx, ds:dword_41F190
.text:0040BACE                 mov     [esp+10h], ebx
.text:0040BAD2                 mov     ebx, ds:dword_41F184
.text:0040BAD8                 mov     [esp+30h], edx
.text:0040BADC                 movzx   edx, byte ptr [esp+54h]
.text:0040BAE1                 mov     [esp+18h], esi
.text:0040BAE5                 mov     esi, ds:dword_41F18C
.text:0040BAEB                 mov     [esp+14h], edi
.text:0040BAEF                 mov     edi, ds:dword_41F188
.text:0040BAF5                 mov     [esp+20h], ecx
.text:0040BAF9                 mov     cl, dl
.text:0040BAFB                 shr     cl, 5
.text:0040BAFE                 mov     [esp+24h], ebx
.text:0040BB02                 movzx   ebx, cl
.text:0040BB05                 mov     [esp+2Ch], esi
.text:0040BB09                 lea     esi, [esp+10h]
.text:0040BB0D                 mov     [esp+28h], edi
.text:0040BB11                 lea     edi, [esi+ebx*4]
.text:0040BB14                 mov     ebx, edx
.text:0040BB16                 mov     edx, [edi+4]
.text:0040BB19                 and     ebx, 1Fh
.text:0040BB1C                 mov     cl, bl
.text:0040BB1E                 mov     eax, edx
.text:0040BB20                 shr     eax, cl
.text:0040BB22                 and     eax, 1
.text:0040BB25                 xor     eax, 1
.text:0040BB28                 shl     eax, cl
.text:0040BB2A                 xor     edx, eax
.text:0040BB2C                 mov     [edi+4], edx
.text:0040BB2F                 mov     edx, [esp+50h]
.text:0040BB33                 mov     [esp+0Ch], esi
.text:0040BB37                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040BB3F                 mov     [esp+4], edx
.text:0040BB43                 mov     dword ptr [esp], 0
.text:0040BB4A                 call    sub_40BC00
.text:0040BB4F                 add     esp, 40h
.text:0040BB52                 pop     ebx
.text:0040BB53                 pop     esi
.text:0040BB54                 pop     edi
.text:0040BB55                 retn
.text:0040BB55 ; ---------------------------------------------------------------------------
.text:0040BB56                 align 10h
.text:0040BB60
.text:0040BB60 ; =============== S U B R O U T I N E =======================================
.text:0040BB60
.text:0040BB60
.text:0040BB60 ; int __cdecl sub_40BB60(char *)
.text:0040BB60 sub_40BB60      proc near               ; CODE XREF: sub_407840+64↑p
.text:0040BB60
.text:0040BB60 var_4C          = dword ptr -4Ch
.text:0040BB60 var_48          = dword ptr -48h
.text:0040BB60 var_44          = dword ptr -44h
.text:0040BB60 var_40          = dword ptr -40h
.text:0040BB60 var_3C          = dword ptr -3Ch
.text:0040BB60 var_38          = dword ptr -38h
.text:0040BB60 var_34          = dword ptr -34h
.text:0040BB60 var_30          = dword ptr -30h
.text:0040BB60 var_2C          = dword ptr -2Ch
.text:0040BB60 var_28          = dword ptr -28h
.text:0040BB60 var_24          = dword ptr -24h
.text:0040BB60 var_20          = dword ptr -20h
.text:0040BB60 var_1C          = dword ptr -1Ch
.text:0040BB60 arg_0           = dword ptr  4
.text:0040BB60
.text:0040BB60                 sub     esp, 4Ch
.text:0040BB63                 mov     ecx, ds:dword_41F170
.text:0040BB69                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:0040BB71                 mov     edx, ds:dword_41F174
.text:0040BB77                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040BB7E                 mov     [esp+4Ch+var_3C], ecx
.text:0040BB82                 mov     ecx, ds:dword_41F17C
.text:0040BB88                 mov     [esp+4Ch+var_38], edx
.text:0040BB8C                 mov     edx, ds:dword_41F178
.text:0040BB92                 mov     [esp+4Ch+var_30], ecx
.text:0040BB96                 mov     ecx, ds:dword_41F180
.text:0040BB9C                 mov     eax, edx
.text:0040BB9E                 shr     eax, 1Ah
.text:0040BBA1                 and     eax, 1
.text:0040BBA4                 xor     eax, 1
.text:0040BBA7                 mov     [esp+4Ch+var_2C], ecx
.text:0040BBAB                 shl     eax, 1Ah
.text:0040BBAE                 mov     ecx, ds:dword_41F184
.text:0040BBB4                 xor     edx, eax
.text:0040BBB6                 mov     [esp+4Ch+var_34], edx
.text:0040BBBA                 mov     edx, [esp+4Ch+arg_0]
.text:0040BBBE                 mov     [esp+4Ch+var_28], ecx
.text:0040BBC2                 mov     ecx, ds:dword_41F188
.text:0040BBC8                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040BBCC                 mov     [esp+4Ch+var_24], ecx
.text:0040BBD0                 mov     ecx, ds:dword_41F18C
.text:0040BBD6                 mov     [esp+4Ch+var_20], ecx
.text:0040BBDA                 mov     ecx, ds:dword_41F190
.text:0040BBE0                 mov     [esp+4Ch+var_1C], ecx
.text:0040BBE4                 lea     ecx, [esp+4Ch+var_3C]
.text:0040BBE8                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040BBEC                 call    sub_40BC00
.text:0040BBF1                 add     esp, 4Ch
.text:0040BBF4                 retn
.text:0040BBF4 sub_40BB60      endp
.text:0040BBF4
.text:0040BBF4 ; ---------------------------------------------------------------------------
.text:0040BBF5                 align 10h
.text:0040BC00
.text:0040BC00 ; =============== S U B R O U T I N E =======================================
.text:0040BC00
.text:0040BC00
.text:0040BC00 ; int __cdecl sub_40BC00(int, char *, int, int)
.text:0040BC00 sub_40BC00      proc near               ; CODE XREF: .text:0040B7B2↑p
.text:0040BC00                                         ; .text:0040B7E2↑p ...
.text:0040BC00
.text:0040BC00 Block           = dword ptr -2Ch
.text:0040BC00 var_28          = dword ptr -28h
.text:0040BC00 Str             = dword ptr -24h
.text:0040BC00 var_20          = dword ptr -20h
.text:0040BC00 var_1C          = dword ptr -1Ch
.text:0040BC00 var_18          = dword ptr -18h
.text:0040BC00 var_14          = dword ptr -14h
.text:0040BC00 arg_0           = dword ptr  4
.text:0040BC00 arg_4           = dword ptr  8
.text:0040BC00 arg_8           = dword ptr  0Ch
.text:0040BC00 arg_C           = dword ptr  10h
.text:0040BC00
.text:0040BC00                 push    ebp
.text:0040BC01                 push    edi
.text:0040BC02                 push    esi
.text:0040BC03                 push    ebx
.text:0040BC04                 sub     esp, 1Ch
.text:0040BC07                 call    _errno
.text:0040BC0C                 mov     edx, [eax]
.text:0040BC0E                 mov     eax, [esp+2Ch+arg_0]
.text:0040BC12                 mov     [esp+2Ch+var_14], edx
.text:0040BC16                 test    eax, eax
.text:0040BC18                 js      loc_40BDBA
.text:0040BC1E                 mov     eax, [esp+2Ch+arg_0]
.text:0040BC22                 cmp     dword_41E040, eax
.text:0040BC28                 ja      short loc_40BCA0
.text:0040BC2A                 mov     esi, eax
.text:0040BC2C                 inc     esi
.text:0040BC2D                 cmp     esi, 1FFFFFFFh
.text:0040BC33                 ja      loc_40BDBF
.text:0040BC39                 mov     ebx, off_41E04C
.text:0040BC3F                 cmp     ebx, offset dword_41E044
.text:0040BC45                 jz      loc_40BD91
.text:0040BC4B
.text:0040BC4B loc_40BC4B:                             ; CODE XREF: sub_40BC00+1B5↓j
.text:0040BC4B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040BC4E                 lea     ecx, ds:0[esi*8]
.text:0040BC55                 mov     ebp, esi
.text:0040BC57                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040BC5B                 call    sub_4069E0
.text:0040BC60                 mov     off_41E04C, eax
.text:0040BC65                 mov     ebx, dword_41E040
.text:0040BC6B                 sub     ebp, ebx
.text:0040BC6D                 lea     edi, [eax+ebx*8]
.text:0040BC70                 lea     eax, ds:0[ebp*8]
.text:0040BC77                 cmp     eax, 7
.text:0040BC7A                 jbe     short loc_40BC90
.text:0040BC7C                 test    edi, 4
.text:0040BC82                 jz      short loc_40BC90
.text:0040BC84                 mov     dword ptr [edi], 0
.text:0040BC8A                 sub     eax, 4
.text:0040BC8D                 add     edi, 4
.text:0040BC90
.text:0040BC90 loc_40BC90:                             ; CODE XREF: sub_40BC00+7A↑j
.text:0040BC90                                         ; sub_40BC00+82↑j
.text:0040BC90                 cld
.text:0040BC91                 mov     ecx, eax
.text:0040BC93                 shr     ecx, 2
.text:0040BC96                 xor     eax, eax
.text:0040BC98                 rep stosd
.text:0040BC9A                 mov     dword_41E040, esi
.text:0040BCA0
.text:0040BCA0 loc_40BCA0:                             ; CODE XREF: sub_40BC00+28↑j
.text:0040BCA0                 mov     esi, off_41E04C
.text:0040BCA6                 mov     eax, [esp+2Ch+arg_0]
.text:0040BCAA                 mov     ebp, [esi+eax*8]
.text:0040BCAD                 mov     edi, [esi+eax*8+4]
.text:0040BCB1                 mov     esi, [esp+2Ch+arg_C]
.text:0040BCB5                 test    esi, esi
.text:0040BCB7                 jz      loc_40BD87
.text:0040BCBD
.text:0040BCBD loc_40BCBD:                             ; CODE XREF: sub_40BC00+18C↓j
.text:0040BCBD                 call    _errno
.text:0040BCC2                 mov     ebx, [eax]
.text:0040BCC4                 mov     [esp+2Ch+var_18], esi ; int
.text:0040BCC8                 mov     ecx, [esi]
.text:0040BCCA                 mov     [esp+2Ch+Block], edi ; int
.text:0040BCCD                 mov     edx, [esp+2Ch+arg_8]
.text:0040BCD1                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040BCD5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040BCD9                 mov     ecx, [esp+2Ch+arg_4]
.text:0040BCDD                 mov     [esp+2Ch+var_20], edx ; int
.text:0040BCE1                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040BCE5                 call    sub_40AAC0
.text:0040BCEA                 mov     esi, eax
.text:0040BCEC                 call    _errno
.text:0040BCF1                 mov     [eax], ebx
.text:0040BCF3                 cmp     ebp, esi
.text:0040BCF5                 ja      short loc_40BD6B
.text:0040BCF7                 lea     ebp, [esi+1]
.text:0040BCFA                 mov     ebx, off_41E04C
.text:0040BD00                 cmp     edi, offset unk_41F070
.text:0040BD06                 mov     esi, [esp+2Ch+arg_0]
.text:0040BD0A                 mov     [ebx+esi*8], ebp
.text:0040BD0D                 jz      short loc_40BD1D
.text:0040BD0F                 mov     [esp+2Ch+Block], edi ; Block
.text:0040BD12                 call    free
.text:0040BD17                 mov     ebx, off_41E04C
.text:0040BD1D
.text:0040BD1D loc_40BD1D:                             ; CODE XREF: sub_40BC00+10D↑j
.text:0040BD1D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:0040BD20                 call    sub_406950
.text:0040BD25                 mov     esi, [esp+2Ch+arg_C]
.text:0040BD29                 mov     edi, eax
.text:0040BD2B                 mov     eax, [esp+2Ch+arg_0]
.text:0040BD2F                 test    esi, esi
.text:0040BD31                 mov     [ebx+eax*8+4], edi
.text:0040BD35                 jz      short loc_40BD80
.text:0040BD37
.text:0040BD37 loc_40BD37:                             ; CODE XREF: sub_40BC00+185↓j
.text:0040BD37                 call    _errno
.text:0040BD3C                 mov     ebx, [eax]
.text:0040BD3E                 mov     [esp+2Ch+var_18], esi ; int
.text:0040BD42                 mov     ecx, [esi]
.text:0040BD44                 mov     [esp+2Ch+Block], edi ; int
.text:0040BD47                 mov     edx, [esp+2Ch+arg_8]
.text:0040BD4B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040BD4F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040BD53                 mov     ecx, [esp+2Ch+arg_4]
.text:0040BD57                 mov     [esp+2Ch+var_20], edx ; int
.text:0040BD5B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040BD5F                 call    sub_40AAC0
.text:0040BD64                 call    _errno
.text:0040BD69                 mov     [eax], ebx
.text:0040BD6B
.text:0040BD6B loc_40BD6B:                             ; CODE XREF: sub_40BC00+F5↑j
.text:0040BD6B                 call    _errno
.text:0040BD70                 mov     ebp, [esp+2Ch+var_14]
.text:0040BD74                 mov     [eax], ebp
.text:0040BD76                 add     esp, 1Ch
.text:0040BD79                 mov     eax, edi
.text:0040BD7B                 pop     ebx
.text:0040BD7C                 pop     esi
.text:0040BD7D                 pop     edi
.text:0040BD7E                 pop     ebp
.text:0040BD7F                 retn
.text:0040BD80 ; ---------------------------------------------------------------------------
.text:0040BD80
.text:0040BD80 loc_40BD80:                             ; CODE XREF: sub_40BC00+135↑j
.text:0040BD80                 mov     esi, offset dword_41F170
.text:0040BD85                 jmp     short loc_40BD37
.text:0040BD87 ; ---------------------------------------------------------------------------
.text:0040BD87
.text:0040BD87 loc_40BD87:                             ; CODE XREF: sub_40BC00+B7↑j
.text:0040BD87                 mov     esi, offset dword_41F170
.text:0040BD8C                 jmp     loc_40BCBD
.text:0040BD91 ; ---------------------------------------------------------------------------
.text:0040BD91
.text:0040BD91 loc_40BD91:                             ; CODE XREF: sub_40BC00+45↑j
.text:0040BD91                 mov     [esp+2Ch+Block], 8 ; size_t
.text:0040BD98                 call    sub_406950
.text:0040BD9D                 mov     off_41E04C, eax
.text:0040BDA2                 mov     edi, dword_41E044
.text:0040BDA8                 mov     ebx, eax
.text:0040BDAA                 mov     ecx, off_41E048
.text:0040BDB0                 mov     [eax], edi
.text:0040BDB2                 mov     [eax+4], ecx
.text:0040BDB5                 jmp     loc_40BC4B
.text:0040BDBA ; ---------------------------------------------------------------------------
.text:0040BDBA
.text:0040BDBA loc_40BDBA:                             ; CODE XREF: sub_40BC00+18↑j
.text:0040BDBA                 call    abort
.text:0040BDBF ; ---------------------------------------------------------------------------
.text:0040BDBF
.text:0040BDBF loc_40BDBF:                             ; CODE XREF: sub_40BC00+33↑j
.text:0040BDBF                 call    sub_407690
.text:0040BDBF sub_40BC00      endp
.text:0040BDBF
.text:0040BDBF ; ---------------------------------------------------------------------------
.text:0040BDC4                 align 10h
.text:0040BDD0
.text:0040BDD0 ; =============== S U B R O U T I N E =======================================
.text:0040BDD0
.text:0040BDD0 ; Attributes: thunk
.text:0040BDD0
.text:0040BDD0 libintl_bindtextdomain proc near
.text:0040BDD0                 jmp     ds:__imp_libintl_bindtextdomain
.text:0040BDD0 libintl_bindtextdomain endp
.text:0040BDD0
.text:0040BDD0 ; ---------------------------------------------------------------------------
.text:0040BDD6                 align 10h
.text:0040BDE0                 jmp     ds:libintl_textdomain
.text:0040BDE0 ; ---------------------------------------------------------------------------
.text:0040BDE6                 align 10h
.text:0040BDF0                 jmp     ds:libintl_gettext
.text:0040BDF0 ; ---------------------------------------------------------------------------
.text:0040BDF6                 align 10h
.text:0040BE00 ; const char aS_3[]
.text:0040BE00 aS_3            db ': %s',0             ; DATA XREF: sub_40BE20+B8↓o
.text:0040BE00                                         ; sub_40BF24+122↓o
.text:0040BE05 aUnknownSystemE db 'Unknown system error',0
.text:0040BE05                                         ; DATA XREF: sub_40BE20:loc_40BEED↓o
.text:0040BE05                                         ; sub_40BF24:loc_40C05E↓o
.text:0040BE1A ; const char aS_4[]
.text:0040BE1A aS_4            db '%s: ',0             ; DATA XREF: sub_40BE20:loc_40BEF4↓o
.text:0040BE1F                 align 10h
.text:0040BE20
.text:0040BE20 ; =============== S U B R O U T I N E =======================================
.text:0040BE20
.text:0040BE20
.text:0040BE20 ; int __cdecl sub_40BE20(int Code, int ErrorMessage, char *, char)
.text:0040BE20 sub_40BE20      proc near               ; CODE XREF: sub_402430+673↑p
.text:0040BE20                                         ; sub_402430+6BE↑p ...
.text:0040BE20
.text:0040BE20 Stream          = dword ptr -1Ch
.text:0040BE20 Format          = dword ptr -18h
.text:0040BE20 ArgList         = dword ptr -14h
.text:0040BE20 Code            = dword ptr  4
.text:0040BE20 ErrorMessage    = dword ptr  8
.text:0040BE20 arg_8           = dword ptr  0Ch
.text:0040BE20 arg_C           = byte ptr  10h
.text:0040BE20
.text:0040BE20                 push    esi
.text:0040BE21                 push    ebx
.text:0040BE22                 sub     esp, 14h
.text:0040BE25                 mov     edx, ds:_iob
.text:0040BE2B                 mov     esi, [esp+1Ch+Code]
.text:0040BE2F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:0040BE33                 add     edx, 20h ; ' '
.text:0040BE36                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040BE39                 call    fflush
.text:0040BE3E                 mov     eax, ds:dword_41F540
.text:0040BE43                 test    eax, eax
.text:0040BE45                 jz      loc_40BEF4
.text:0040BE4B                 call    eax ; dword_41F540
.text:0040BE4D
.text:0040BE4D loc_40BE4D:                             ; CODE XREF: sub_40BE20+F7↓j
.text:0040BE4D                 lea     edx, [esp+1Ch+arg_C]
.text:0040BE51                 mov     ecx, [esp+1Ch+arg_8]
.text:0040BE55                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:0040BE59                 mov     edx, ds:_iob
.text:0040BE5F                 mov     [esp+1Ch+Format], ecx ; Format
.text:0040BE63                 add     edx, 40h ; '@'
.text:0040BE66                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040BE69                 call    vfprintf
.text:0040BE6E                 inc     ds:dword_41F550
.text:0040BE74                 test    ebx, ebx
.text:0040BE76                 jnz     short loc_40BEC2
.text:0040BE78
.text:0040BE78 loc_40BE78:                             ; CODE XREF: sub_40BE20+CB↓j
.text:0040BE78                 mov     edx, ds:_iob
.text:0040BE7E                 lea     ecx, [edx+40h]
.text:0040BE81                 mov     ebx, [ecx+4]
.text:0040BE84                 dec     ebx
.text:0040BE85                 test    ebx, ebx
.text:0040BE87                 mov     [ecx+4], ebx
.text:0040BE8A                 js      short loc_40BEB0
.text:0040BE8C                 mov     ecx, [edx+40h]
.text:0040BE8F                 mov     byte ptr [ecx], 0Ah
.text:0040BE92                 inc     dword ptr [edx+40h]
.text:0040BE95
.text:0040BE95 loc_40BE95:                             ; CODE XREF: sub_40BE20+A0↓j
.text:0040BE95                 mov     edx, ds:_iob
.text:0040BE9B                 add     edx, 40h ; '@'
.text:0040BE9E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040BEA1                 call    fflush
.text:0040BEA6                 test    esi, esi
.text:0040BEA8                 jnz     short loc_40BF1C
.text:0040BEAA                 add     esp, 14h
.text:0040BEAD                 pop     ebx
.text:0040BEAE                 pop     esi
.text:0040BEAF                 retn
.text:0040BEB0 ; ---------------------------------------------------------------------------
.text:0040BEB0
.text:0040BEB0 loc_40BEB0:                             ; CODE XREF: sub_40BE20+6A↑j
.text:0040BEB0                 mov     [esp+1Ch+Format], ecx ; File
.text:0040BEB4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040BEBB                 call    _flsbuf
.text:0040BEC0                 jmp     short loc_40BE95
.text:0040BEC2 ; ---------------------------------------------------------------------------
.text:0040BEC2
.text:0040BEC2 loc_40BEC2:                             ; CODE XREF: sub_40BE20+56↑j
.text:0040BEC2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:0040BEC5                 call    strerror
.text:0040BECA                 test    eax, eax
.text:0040BECC                 jz      short loc_40BEED
.text:0040BECE
.text:0040BECE loc_40BECE:                             ; CODE XREF: sub_40BE20+D2↓j
.text:0040BECE                 mov     [esp+1Ch+ArgList], eax
.text:0040BED2                 mov     ebx, ds:_iob
.text:0040BED8                 mov     [esp+1Ch+Format], offset aS_3 ; ": %s"
.text:0040BEE0                 add     ebx, 40h ; '@'
.text:0040BEE3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:0040BEE6                 call    fprintf
.text:0040BEEB                 jmp     short loc_40BE78
.text:0040BEED ; ---------------------------------------------------------------------------
.text:0040BEED
.text:0040BEED loc_40BEED:                             ; CODE XREF: sub_40BE20+AC↑j
.text:0040BEED                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040BEF2                 jmp     short loc_40BECE
.text:0040BEF4 ; ---------------------------------------------------------------------------
.text:0040BEF4
.text:0040BEF4 loc_40BEF4:                             ; CODE XREF: sub_40BE20+25↑j
.text:0040BEF4                 mov     [esp+1Ch+Format], offset aS_4 ; "%s: "
.text:0040BEFC                 mov     edx, ds:_iob
.text:0040BF02                 mov     ecx, ds:dword_41F510
.text:0040BF08                 add     edx, 40h ; '@'
.text:0040BF0B                 mov     [esp+1Ch+ArgList], ecx
.text:0040BF0F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040BF12                 call    fprintf
.text:0040BF17                 jmp     loc_40BE4D
.text:0040BF1C ; ---------------------------------------------------------------------------
.text:0040BF1C
.text:0040BF1C loc_40BF1C:                             ; CODE XREF: sub_40BE20+88↑j
.text:0040BF1C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040BF1F                 call    exit
.text:0040BF1F sub_40BE20      endp
.text:0040BF1F
.text:0040BF24
.text:0040BF24 ; =============== S U B R O U T I N E =======================================
.text:0040BF24
.text:0040BF24
.text:0040BF24 ; int __cdecl sub_40BF24(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:0040BF24 sub_40BF24      proc near               ; DATA XREF: sub_40BF24+77↓o
.text:0040BF24
.text:0040BF24 Stream          = dword ptr -28h
.text:0040BF24 Format          = dword ptr -24h
.text:0040BF24 ArgList         = dword ptr -20h
.text:0040BF24 var_1C          = dword ptr -1Ch
.text:0040BF24 Code            = dword ptr  8
.text:0040BF24 ErrorMessage    = dword ptr  0Ch
.text:0040BF24 Str2            = dword ptr  10h
.text:0040BF24 arg_10          = dword ptr  14h
.text:0040BF24 arg_14          = dword ptr  18h
.text:0040BF24 arg_18          = byte ptr  1Ch
.text:0040BF24
.text:0040BF24                 and     eax, 64253A73h
.text:0040BF29                 cmp     ah, [eax]
.text:0040BF2B
.text:0040BF2B loc_40BF2B:                             ; DATA XREF: sub_40BF24:loc_40C065↓o
.text:0040BF2B                 add     ds:55003A73h, ah
.text:0040BF31                 push    edi
.text:0040BF32                 push    esi
.text:0040BF33                 push    ebx
.text:0040BF34                 sub     esp, 1Ch
.text:0040BF37                 mov     edx, ds:dword_41F580
.text:0040BF3D                 mov     ebp, [esp+28h+Code]
.text:0040BF41                 mov     edi, [esp+28h+ErrorMessage]
.text:0040BF45                 test    edx, edx
.text:0040BF47                 mov     ebx, [esp+28h+Str2]
.text:0040BF4B                 mov     esi, [esp+28h+arg_10]
.text:0040BF4F                 jz      short loc_40BF69
.text:0040BF51                 cmp     ds:dword_41F1B0, esi
.text:0040BF57                 jz      loc_40C090
.text:0040BF5D
.text:0040BF5D loc_40BF5D:                             ; CODE XREF: sub_40BF24+18D↓j
.text:0040BF5D                 mov     ds:Str1, ebx
.text:0040BF63                 mov     ds:dword_41F1B0, esi
.text:0040BF69
.text:0040BF69 loc_40BF69:                             ; CODE XREF: sub_40BF24+2B↑j
.text:0040BF69                 mov     edx, ds:_iob
.text:0040BF6F                 add     edx, 20h ; ' '
.text:0040BF72                 mov     [esp+28h+Stream], edx ; Stream
.text:0040BF75                 call    fflush
.text:0040BF7A                 mov     eax, ds:dword_41F540
.text:0040BF7F                 test    eax, eax
.text:0040BF81                 jz      loc_40C065
.text:0040BF87                 call    eax ; dword_41F540
.text:0040BF89
.text:0040BF89 loc_40BF89:                             ; CODE XREF: sub_40BF24+164↓j
.text:0040BF89                 test    ebx, ebx
.text:0040BF8B                 jz      short loc_40BFAE
.text:0040BF8D                 mov     [esp+28h+ArgList], ebx
.text:0040BF91                 mov     ebx, ds:_iob
.text:0040BF97                 mov     [esp+28h+var_1C], esi
.text:0040BF9B                 mov     [esp+28h+Format], offset sub_40BF24 ; Format
.text:0040BFA3                 add     ebx, 40h ; '@'
.text:0040BFA6                 mov     [esp+28h+Stream], ebx ; Stream
.text:0040BFA9                 call    fprintf
.text:0040BFAE
.text:0040BFAE loc_40BFAE:                             ; CODE XREF: sub_40BF24+67↑j
.text:0040BFAE                 mov     esi, ds:_iob
.text:0040BFB4                 lea     edx, [esp+28h+arg_18]
.text:0040BFB8                 mov     ecx, [esp+28h+arg_14]
.text:0040BFBC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:0040BFC0                 add     esi, 40h ; '@'
.text:0040BFC3                 mov     [esp+28h+Format], ecx ; Format
.text:0040BFC7                 mov     [esp+28h+Stream], esi ; Stream
.text:0040BFCA                 call    vfprintf
.text:0040BFCF                 inc     ds:dword_41F550
.text:0040BFD5                 test    edi, edi
.text:0040BFD7                 jnz     short loc_40C030
.text:0040BFD9
.text:0040BFD9 loc_40BFD9:                             ; CODE XREF: sub_40BF24+135↓j
.text:0040BFD9                 mov     edx, ds:_iob
.text:0040BFDF                 lea     ecx, [edx+40h]
.text:0040BFE2                 mov     ebx, [ecx+4]
.text:0040BFE5                 dec     ebx
.text:0040BFE6                 test    ebx, ebx
.text:0040BFE8                 mov     [ecx+4], ebx
.text:0040BFEB                 js      short loc_40C017
.text:0040BFED                 mov     esi, [edx+40h]
.text:0040BFF0                 mov     byte ptr [esi], 0Ah
.text:0040BFF3                 inc     dword ptr [edx+40h]
.text:0040BFF6
.text:0040BFF6 loc_40BFF6:                             ; CODE XREF: sub_40BF24+103↓j
.text:0040BFF6                 mov     ecx, ds:_iob
.text:0040BFFC                 add     ecx, 40h ; '@'
.text:0040BFFF                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040C002                 call    fflush
.text:0040C007                 test    ebp, ebp
.text:0040C009                 jnz     loc_40C0B6
.text:0040C00F
.text:0040C00F loc_40C00F:                             ; CODE XREF: sub_40BF24+173↓j
.text:0040C00F                                         ; sub_40BF24+187↓j
.text:0040C00F                 add     esp, 1Ch
.text:0040C012                 pop     ebx
.text:0040C013                 pop     esi
.text:0040C014                 pop     edi
.text:0040C015                 pop     ebp
.text:0040C016                 retn
.text:0040C017 ; ---------------------------------------------------------------------------
.text:0040C017
.text:0040C017 loc_40C017:                             ; CODE XREF: sub_40BF24+C7↑j
.text:0040C017                 mov     [esp+28h+Format], ecx ; File
.text:0040C01B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:0040C022                 call    _flsbuf
.text:0040C027                 jmp     short loc_40BFF6
.text:0040C027 ; ---------------------------------------------------------------------------
.text:0040C029                 align 10h
.text:0040C030
.text:0040C030 loc_40C030:                             ; CODE XREF: sub_40BF24+B3↑j
.text:0040C030                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:0040C033                 call    strerror
.text:0040C038                 test    eax, eax
.text:0040C03A                 jz      short loc_40C05E
.text:0040C03C
.text:0040C03C loc_40C03C:                             ; CODE XREF: sub_40BF24+13F↓j
.text:0040C03C                 mov     [esp+28h+ArgList], eax
.text:0040C040                 mov     edi, ds:_iob
.text:0040C046                 mov     [esp+28h+Format], offset aS_3 ; ": %s"
.text:0040C04E                 add     edi, 40h ; '@'
.text:0040C051                 mov     [esp+28h+Stream], edi ; Stream
.text:0040C054                 call    fprintf
.text:0040C059                 jmp     loc_40BFD9
.text:0040C05E ; ---------------------------------------------------------------------------
.text:0040C05E
.text:0040C05E loc_40C05E:                             ; CODE XREF: sub_40BF24+116↑j
.text:0040C05E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040C063                 jmp     short loc_40C03C
.text:0040C065 ; ---------------------------------------------------------------------------
.text:0040C065
.text:0040C065 loc_40C065:                             ; CODE XREF: sub_40BF24+5D↑j
.text:0040C065                 mov     [esp+28h+Format], (offset loc_40BF2B+1) ; Format
.text:0040C06D                 mov     ecx, ds:_iob
.text:0040C073                 mov     edx, ds:dword_41F510
.text:0040C079                 add     ecx, 40h ; '@'
.text:0040C07C                 mov     [esp+28h+ArgList], edx
.text:0040C080                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040C083                 call    fprintf
.text:0040C088                 jmp     loc_40BF89
.text:0040C088 ; ---------------------------------------------------------------------------
.text:0040C08D                 align 10h
.text:0040C090
.text:0040C090 loc_40C090:                             ; CODE XREF: sub_40BF24+33↑j
.text:0040C090                 mov     eax, ds:Str1
.text:0040C095                 cmp     ebx, eax
.text:0040C097                 jz      loc_40C00F
.text:0040C09D                 mov     [esp+28h+Format], ebx ; Str2
.text:0040C0A1                 mov     [esp+28h+Stream], eax ; Str1
.text:0040C0A4                 call    strcmp
.text:0040C0A9                 test    eax, eax
.text:0040C0AB                 jz      loc_40C00F
.text:0040C0B1                 jmp     loc_40BF5D
.text:0040C0B6 ; ---------------------------------------------------------------------------
.text:0040C0B6
.text:0040C0B6 loc_40C0B6:                             ; CODE XREF: sub_40BF24+E5↑j
.text:0040C0B6                 mov     [esp+28h+Stream], ebp ; Code
.text:0040C0B9                 call    exit
.text:0040C0B9 sub_40BF24      endp ; sp-analysis failed
.text:0040C0B9
.text:0040C0B9 ; ---------------------------------------------------------------------------
.text:0040C0BE                 align 10h
.text:0040C0C0
.text:0040C0C0 ; =============== S U B R O U T I N E =======================================
.text:0040C0C0
.text:0040C0C0
.text:0040C0C0 ; int __cdecl sub_40C0C0(char *, int)
.text:0040C0C0 sub_40C0C0      proc near               ; CODE XREF: sub_402430+76F↑p
.text:0040C0C0
.text:0040C0C0 var_C           = dword ptr -0Ch
.text:0040C0C0 var_8           = dword ptr -8
.text:0040C0C0 var_4           = dword ptr -4
.text:0040C0C0 arg_0           = dword ptr  4
.text:0040C0C0 arg_4           = dword ptr  8
.text:0040C0C0
.text:0040C0C0                 sub     esp, 0Ch
.text:0040C0C3                 mov     edx, [esp+0Ch+arg_4]
.text:0040C0C7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040C0CE                 mov     [esp+0Ch+var_4], edx ; int
.text:0040C0D2                 mov     edx, [esp+0Ch+arg_0]
.text:0040C0D6                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040C0DA                 call    sub_40C0F0
.text:0040C0DF                 add     esp, 0Ch
.text:0040C0E2                 retn
.text:0040C0E2 sub_40C0C0      endp
.text:0040C0E2
.text:0040C0E2 ; ---------------------------------------------------------------------------
.text:0040C0E3                 align 10h
.text:0040C0F0
.text:0040C0F0 ; =============== S U B R O U T I N E =======================================
.text:0040C0F0
.text:0040C0F0
.text:0040C0F0 ; int __cdecl sub_40C0F0(LPCSTR, char *, int)
.text:0040C0F0 sub_40C0F0      proc near               ; CODE XREF: sub_40C0C0+1A↑p
.text:0040C0F0                                         ; sub_41AF50+104↓p ...
.text:0040C0F0
.text:0040C0F0 var_13C         = dword ptr -13Ch
.text:0040C0F0 lpString1       = dword ptr -138h
.text:0040C0F0 var_134         = dword ptr -134h
.text:0040C0F0 String1         = byte ptr -12Ch
.text:0040C0F0 var_10          = dword ptr -10h
.text:0040C0F0 var_C           = dword ptr -0Ch
.text:0040C0F0 var_8           = dword ptr -8
.text:0040C0F0 var_4           = dword ptr -4
.text:0040C0F0 arg_0           = dword ptr  4
.text:0040C0F0 arg_4           = dword ptr  8
.text:0040C0F0 arg_8           = dword ptr  0Ch
.text:0040C0F0
.text:0040C0F0                 sub     esp, 13Ch
.text:0040C0F6                 mov     [esp+13Ch+var_10], ebx
.text:0040C0FD                 mov     ebx, [esp+13Ch+arg_8]
.text:0040C104                 mov     [esp+13Ch+var_C], esi
.text:0040C10B                 mov     esi, [esp+13Ch+arg_4]
.text:0040C112                 mov     [esp+13Ch+var_8], edi
.text:0040C119                 mov     edi, [esp+13Ch+arg_0]
.text:0040C120                 mov     [esp+13Ch+var_4], ebp
.text:0040C127                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040C12B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040C12F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040C132                 call    sub_40CAE0
.text:0040C137                 cmp     eax, 0FFFFFFFFh
.text:0040C13A                 mov     edx, eax
.text:0040C13C                 jz      short loc_40C14E
.text:0040C13E                 mov     ecx, [ebx]
.text:0040C140                 and     ecx, 0F000h
.text:0040C146                 cmp     ecx, 0A000h
.text:0040C14C                 jz      short loc_40C173
.text:0040C14E
.text:0040C14E loc_40C14E:                             ; CODE XREF: sub_40C0F0+4C↑j
.text:0040C14E                                         ; sub_40C0F0+A1↓j ...
.text:0040C14E                 mov     ebx, [esp+13Ch+var_10]
.text:0040C155                 mov     eax, edx
.text:0040C157                 mov     esi, [esp+13Ch+var_C]
.text:0040C15E                 mov     edi, [esp+13Ch+var_8]
.text:0040C165                 mov     ebp, [esp+13Ch+var_4]
.text:0040C16C                 add     esp, 13Ch
.text:0040C172                 retn
.text:0040C173 ; ---------------------------------------------------------------------------
.text:0040C173
.text:0040C173 loc_40C173:                             ; CODE XREF: sub_40C0F0+5C↑j
.text:0040C173                 mov     [esp+13Ch+var_134], 104h
.text:0040C17B                 lea     ebp, [esp+13Ch+String1]
.text:0040C17F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040C183                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040C186                 call    sub_40CA00
.text:0040C18B                 inc     eax
.text:0040C18C                 mov     edx, 0FFFFFFFFh
.text:0040C191                 jz      short loc_40C14E
.text:0040C193                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040C197                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040C19B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040C19E                 call    sub_40CAE0
.text:0040C1A3                 mov     edx, eax
.text:0040C1A5                 jmp     short loc_40C14E
.text:0040C1A5 sub_40C0F0      endp
.text:0040C1A5
.text:0040C1A5 ; ---------------------------------------------------------------------------
.text:0040C1A7                 align 10h
.text:0040C1B0 dword_40C1B0    dd 900DEB00h, 3 dup(90909090h)
.text:0040C1B0                                         ; DATA XREF: sub_40C1C0+13↓o
.text:0040C1C0
.text:0040C1C0 ; =============== S U B R O U T I N E =======================================
.text:0040C1C0
.text:0040C1C0
.text:0040C1C0 sub_40C1C0      proc near               ; CODE XREF: sub_402D90+1A3↑p
.text:0040C1C0
.text:0040C1C0 arg_0           = dword ptr  4
.text:0040C1C0
.text:0040C1C0                 push    ebx
.text:0040C1C1                 mov     ebx, [esp+4+arg_0]
.text:0040C1C5                 mov     edx, ebx
.text:0040C1C7                 sar     edx, 10h
.text:0040C1CA                 movzx   ecx, bx
.text:0040C1CD                 lea     eax, [edx-1]
.text:0040C1D0                 cmp     eax, 0Bh
.text:0040C1D3                 mov     ebx, offset dword_40C1B0
.text:0040C1D8                 ja      short loc_40C1F0
.text:0040C1DA                 mov     eax, off_41E0D4
.text:0040C1DF                 mov     eax, [eax+edx*4]
.text:0040C1E2                 cmp     ecx, [eax+20h]
.text:0040C1E5                 jnb     short loc_40C1F0
.text:0040C1E7                 mov     ebx, [eax+ecx*4+24h]
.text:0040C1EB                 nop
.text:0040C1EC                 lea     esi, [esi+0]
.text:0040C1F0
.text:0040C1F0 loc_40C1F0:                             ; CODE XREF: sub_40C1C0+18↑j
.text:0040C1F0                                         ; sub_40C1C0+25↑j
.text:0040C1F0                 mov     eax, ebx
.text:0040C1F2                 pop     ebx
.text:0040C1F3                 retn
.text:0040C1F3 sub_40C1C0      endp
.text:0040C1F3
.text:0040C1F3 ; ---------------------------------------------------------------------------
.text:0040C1F4                 align 10h
.text:0040C200
.text:0040C200 ; =============== S U B R O U T I N E =======================================
.text:0040C200
.text:0040C200
.text:0040C200 ; int __cdecl sub_40C200(char *EnvString)
.text:0040C200 sub_40C200      proc near               ; CODE XREF: sub_402430+46B↑p
.text:0040C200
.text:0040C200 Str             = dword ptr -0Ch
.text:0040C200 Val             = dword ptr -8
.text:0040C200 var_4           = dword ptr -4
.text:0040C200 EnvString       = dword ptr  4
.text:0040C200
.text:0040C200                 sub     esp, 0Ch
.text:0040C203                 mov     [esp+0Ch+var_4], ebx
.text:0040C207                 mov     ebx, [esp+0Ch+EnvString]
.text:0040C20B                 mov     [esp+0Ch+Val], 3Dh ; '=' ; Val
.text:0040C213                 mov     [esp+0Ch+Str], ebx ; Str
.text:0040C216                 call    strchr
.text:0040C21B                 test    eax, eax
.text:0040C21D                 jz      short loc_40C230
.text:0040C21F                 mov     [esp+0Ch+EnvString], ebx ; EnvString
.text:0040C223                 mov     ebx, [esp+0Ch+var_4]
.text:0040C227                 add     esp, 0Ch
.text:0040C22A                 jmp     _putenv
.text:0040C22A ; ---------------------------------------------------------------------------
.text:0040C22F                 align 10h
.text:0040C230
.text:0040C230 loc_40C230:                             ; CODE XREF: sub_40C200+1D↑j
.text:0040C230                 mov     [esp+0Ch+Str], ebx ; Source
.text:0040C233                 call    sub_40C7A0
.text:0040C238                 mov     ebx, [esp+0Ch+var_4]
.text:0040C23C                 xor     eax, eax
.text:0040C23E                 add     esp, 0Ch
.text:0040C241                 retn
.text:0040C241 sub_40C200      endp
.text:0040C241
.text:0040C241 ; ---------------------------------------------------------------------------
.text:0040C242                 align 10h
.text:0040C250
.text:0040C250 ; =============== S U B R O U T I N E =======================================
.text:0040C250
.text:0040C250
.text:0040C250 ; int __cdecl sub_40C250(int, int, FILE *File)
.text:0040C250 sub_40C250      proc near               ; CODE XREF: sub_4031F0+6B↑p
.text:0040C250
.text:0040C250 Block           = dword ptr -2Ch
.text:0040C250 Size            = dword ptr -28h
.text:0040C250 var_18          = dword ptr -18h
.text:0040C250 var_14          = dword ptr -14h
.text:0040C250 arg_0           = dword ptr  4
.text:0040C250 arg_4           = dword ptr  8
.text:0040C250 File            = dword ptr  0Ch
.text:0040C250
.text:0040C250                 push    ebp
.text:0040C251                 push    edi
.text:0040C252                 push    esi
.text:0040C253                 push    ebx
.text:0040C254                 sub     esp, 1Ch
.text:0040C257                 mov     eax, [esp+2Ch+arg_0]
.text:0040C25B                 mov     edi, [esp+2Ch+File]
.text:0040C25F                 test    eax, eax
.text:0040C261                 jz      loc_40C3AF
.text:0040C267                 mov     eax, [esp+2Ch+arg_4]
.text:0040C26B                 test    eax, eax
.text:0040C26D                 jz      loc_40C3AF
.text:0040C273                 test    byte ptr [edi+0Ch], 20h
.text:0040C277                 jnz     loc_40C3A8
.text:0040C27D                 mov     ecx, [esp+2Ch+arg_0]
.text:0040C281                 mov     edx, [ecx]
.text:0040C283                 test    edx, edx
.text:0040C285                 jz      loc_40C397
.text:0040C28B                 mov     ebx, [esp+2Ch+arg_4]
.text:0040C28F                 mov     eax, [ebx]
.text:0040C291                 cmp     eax, 1
.text:0040C294                 ja      short loc_40C2CC
.text:0040C296                 mov     [esp+2Ch+Size], 100h ; Size
.text:0040C29E                 mov     [esp+2Ch+Block], edx ; Block
.text:0040C2A1                 call    realloc
.text:0040C2A6
.text:0040C2A6 loc_40C2A6:                             ; CODE XREF: sub_40C250+153↓j
.text:0040C2A6                 mov     ebp, eax
.text:0040C2A8                 test    ebp, ebp
.text:0040C2AA                 mov     eax, 0FFFFFFFFh
.text:0040C2AF                 jz      loc_40C36D
.text:0040C2B5                 mov     edx, [esp+2Ch+arg_0]
.text:0040C2B9                 mov     eax, 100h
.text:0040C2BE                 mov     esi, [esp+2Ch+arg_4]
.text:0040C2C2                 mov     [edx], ebp
.text:0040C2C4                 mov     edx, ebp
.text:0040C2C6                 mov     dword ptr [esi], 100h
.text:0040C2CC
.text:0040C2CC loc_40C2CC:                             ; CODE XREF: sub_40C250+44↑j
.text:0040C2CC                 mov     [esp+2Ch+var_14], eax
.text:0040C2D0                 mov     ebp, edx
.text:0040C2D2                 mov     ebx, eax
.text:0040C2D4                 mov     esi, edx
.text:0040C2D6
.text:0040C2D6 loc_40C2D6:                             ; CODE XREF: sub_40C250+F2↓j
.text:0040C2D6                 dec     ebx
.text:0040C2D7                 test    ebx, ebx
.text:0040C2D9                 jle     short loc_40C309
.text:0040C2DB                 nop
.text:0040C2DC                 lea     esi, [esi+0]
.text:0040C2E0
.text:0040C2E0 loc_40C2E0:                             ; CODE XREF: sub_40C250+B7↓j
.text:0040C2E0                 mov     ecx, [edi+4]
.text:0040C2E3                 dec     ecx
.text:0040C2E4                 test    ecx, ecx
.text:0040C2E6                 mov     [edi+4], ecx
.text:0040C2E9                 js      loc_40C388
.text:0040C2EF                 mov     ecx, [edi]
.text:0040C2F1                 movzx   edx, byte ptr [ecx]
.text:0040C2F4                 inc     ecx
.text:0040C2F5                 mov     [edi], ecx
.text:0040C2F7
.text:0040C2F7 loc_40C2F7:                             ; CODE XREF: sub_40C250+142↓j
.text:0040C2F7                 cmp     edx, 0FFFFFFFFh
.text:0040C2FA                 jz      short loc_40C344
.text:0040C2FC                 mov     [esi], dl
.text:0040C2FE                 inc     esi
.text:0040C2FF                 cmp     dl, 0Ah
.text:0040C302                 jz      short loc_40C37F
.text:0040C304                 dec     ebx
.text:0040C305                 test    ebx, ebx
.text:0040C307                 jg      short loc_40C2E0
.text:0040C309
.text:0040C309 loc_40C309:                             ; CODE XREF: sub_40C250+89↑j
.text:0040C309                 mov     [esp+2Ch+Block], ebp ; Block
.text:0040C30C                 mov     ebx, [esp+2Ch+var_14]
.text:0040C310                 mov     eax, esi
.text:0040C312                 sub     eax, ebp
.text:0040C314                 mov     [esp+2Ch+var_18], eax
.text:0040C318                 add     ebx, ebx
.text:0040C31A                 mov     [esp+2Ch+var_14], ebx
.text:0040C31E                 mov     [esp+2Ch+Size], ebx ; Size
.text:0040C322                 call    realloc
.text:0040C327                 test    eax, eax
.text:0040C329                 mov     ebp, eax
.text:0040C32B                 jz      short loc_40C344
.text:0040C32D                 mov     esi, [esp+2Ch+arg_4]
.text:0040C331                 mov     edx, [esp+2Ch+var_18]
.text:0040C335                 mov     ecx, [esp+2Ch+arg_0]
.text:0040C339                 mov     [esi], ebx
.text:0040C33B                 lea     esi, [edx+eax]
.text:0040C33E                 sub     ebx, edx
.text:0040C340                 mov     [ecx], eax
.text:0040C342                 jmp     short loc_40C2D6
.text:0040C344 ; ---------------------------------------------------------------------------
.text:0040C344
.text:0040C344 loc_40C344:                             ; CODE XREF: sub_40C250+AA↑j
.text:0040C344                                         ; sub_40C250+DB↑j
.text:0040C344                 mov     edi, [esp+2Ch+arg_0]
.text:0040C348                 mov     eax, 0FFFFFFFFh
.text:0040C34D                 mov     edx, [edi]
.text:0040C34F                 cmp     esi, edx
.text:0040C351                 jz      short loc_40C36D
.text:0040C353
.text:0040C353 loc_40C353:                             ; CODE XREF: sub_40C250+136↓j
.text:0040C353                 lea     ebx, [esi-2]
.text:0040C356                 cmp     ebx, edx
.text:0040C358                 jb      short loc_40C360
.text:0040C35A                 cmp     byte ptr [esi-2], 0Dh
.text:0040C35E                 jz      short loc_40C375
.text:0040C360
.text:0040C360 loc_40C360:                             ; CODE XREF: sub_40C250+108↑j
.text:0040C360                                         ; sub_40C250+12D↓j
.text:0040C360                 mov     byte ptr [esi], 0
.text:0040C363                 mov     eax, esi
.text:0040C365                 mov     ecx, [esp+2Ch+arg_0]
.text:0040C369                 mov     esi, [ecx]
.text:0040C36B                 sub     eax, esi
.text:0040C36D
.text:0040C36D loc_40C36D:                             ; CODE XREF: sub_40C250+5F↑j
.text:0040C36D                                         ; sub_40C250+101↑j ...
.text:0040C36D                 add     esp, 1Ch
.text:0040C370                 pop     ebx
.text:0040C371                 pop     esi
.text:0040C372                 pop     edi
.text:0040C373                 pop     ebp
.text:0040C374                 retn
.text:0040C375 ; ---------------------------------------------------------------------------
.text:0040C375
.text:0040C375 loc_40C375:                             ; CODE XREF: sub_40C250+10E↑j
.text:0040C375                 movzx   edx, byte ptr [esi-1]
.text:0040C379                 mov     [esi-2], dl
.text:0040C37C                 dec     esi
.text:0040C37D                 jmp     short loc_40C360
.text:0040C37F ; ---------------------------------------------------------------------------
.text:0040C37F
.text:0040C37F loc_40C37F:                             ; CODE XREF: sub_40C250+B2↑j
.text:0040C37F                 mov     ebp, [esp+2Ch+arg_0]
.text:0040C383                 mov     edx, [ebp+0]
.text:0040C386                 jmp     short loc_40C353
.text:0040C388 ; ---------------------------------------------------------------------------
.text:0040C388
.text:0040C388 loc_40C388:                             ; CODE XREF: sub_40C250+99↑j
.text:0040C388                 mov     [esp+2Ch+Block], edi ; File
.text:0040C38B                 call    _filbuf
.text:0040C390                 mov     edx, eax
.text:0040C392                 jmp     loc_40C2F7
.text:0040C397 ; ---------------------------------------------------------------------------
.text:0040C397
.text:0040C397 loc_40C397:                             ; CODE XREF: sub_40C250+35↑j
.text:0040C397                 mov     [esp+2Ch+Block], 100h ; Size
.text:0040C39E                 call    malloc
.text:0040C3A3                 jmp     loc_40C2A6
.text:0040C3A8 ; ---------------------------------------------------------------------------
.text:0040C3A8
.text:0040C3A8 loc_40C3A8:                             ; CODE XREF: sub_40C250+27↑j
.text:0040C3A8                                         ; sub_40C250+16A↓j
.text:0040C3A8                 mov     eax, 0FFFFFFFFh
.text:0040C3AD                 jmp     short loc_40C36D
.text:0040C3AF ; ---------------------------------------------------------------------------
.text:0040C3AF
.text:0040C3AF loc_40C3AF:                             ; CODE XREF: sub_40C250+11↑j
.text:0040C3AF                                         ; sub_40C250+1D↑j
.text:0040C3AF                 call    _errno
.text:0040C3B4                 mov     dword ptr [eax], 16h
.text:0040C3BA                 jmp     short loc_40C3A8
.text:0040C3BA sub_40C250      endp
.text:0040C3BA
.text:0040C3BA ; ---------------------------------------------------------------------------
.text:0040C3BC                 align 10h
.text:0040C3C0
.text:0040C3C0 ; =============== S U B R O U T I N E =======================================
.text:0040C3C0
.text:0040C3C0
.text:0040C3C0 sub_40C3C0      proc near               ; CODE XREF: sub_406CA0+84↑p
.text:0040C3C0
.text:0040C3C0 var_1C          = dword ptr -1Ch
.text:0040C3C0 var_18          = dword ptr -18h
.text:0040C3C0 var_C           = dword ptr -0Ch
.text:0040C3C0 var_8           = dword ptr -8
.text:0040C3C0 arg_0           = dword ptr  4
.text:0040C3C0
.text:0040C3C0                 sub     esp, 1Ch
.text:0040C3C3                 mov     eax, [esp+1Ch+arg_0]
.text:0040C3C7                 test    eax, eax
.text:0040C3C9                 jz      short loc_40C3F1
.text:0040C3CB                 mov     edx, [eax]
.text:0040C3CD                 mov     [esp+1Ch+var_8], 0
.text:0040C3D5                 mov     [esp+1Ch+var_18], 0
.text:0040C3DD                 mov     [esp+1Ch+var_C], edx
.text:0040C3E1                 lea     edx, [esp+1Ch+var_C]
.text:0040C3E5                 mov     [esp+1Ch+var_1C], edx
.text:0040C3E8                 call    sub_40C410
.text:0040C3ED
.text:0040C3ED loc_40C3ED:                             ; CODE XREF: sub_40C3C0+41↓j
.text:0040C3ED                 add     esp, 1Ch
.text:0040C3F0                 retn
.text:0040C3F1 ; ---------------------------------------------------------------------------
.text:0040C3F1
.text:0040C3F1 loc_40C3F1:                             ; CODE XREF: sub_40C3C0+9↑j
.text:0040C3F1                 call    _errno
.text:0040C3F6                 mov     dword ptr [eax], 16h
.text:0040C3FC                 mov     eax, 0FFFFFFFFh
.text:0040C401                 jmp     short loc_40C3ED
.text:0040C401 sub_40C3C0      endp
.text:0040C401
.text:0040C401 ; ---------------------------------------------------------------------------
.text:0040C403                 align 10h
.text:0040C410
.text:0040C410 ; =============== S U B R O U T I N E =======================================
.text:0040C410
.text:0040C410
.text:0040C410 sub_40C410      proc near               ; CODE XREF: sub_406CA0+6C↑p
.text:0040C410                                         ; sub_40C3C0+28↑p
.text:0040C410
.text:0040C410 var_1C          = dword ptr -1Ch
.text:0040C410 var_18          = dword ptr -18h
.text:0040C410 var_C           = dword ptr -0Ch
.text:0040C410 var_8           = dword ptr -8
.text:0040C410 arg_0           = dword ptr  4
.text:0040C410 arg_4           = dword ptr  8
.text:0040C410
.text:0040C410                 sub     esp, 1Ch
.text:0040C413                 mov     edx, [esp+1Ch+arg_0]
.text:0040C417                 mov     ecx, [edx]
.text:0040C419                 mov     [esp+1Ch+var_C], ecx
.text:0040C41D                 mov     ecx, [edx+4]
.text:0040C420                 lea     edx, [esp+1Ch+var_C]
.text:0040C424                 mov     [esp+1Ch+var_1C], edx
.text:0040C427                 imul    ecx, 3E8h
.text:0040C42D                 mov     [esp+1Ch+var_8], ecx
.text:0040C431                 mov     ecx, [esp+1Ch+arg_4]
.text:0040C435                 mov     [esp+1Ch+var_18], ecx
.text:0040C439                 call    sub_40CB30
.text:0040C43E                 test    eax, eax
.text:0040C440                 setz    dl
.text:0040C443                 add     esp, 1Ch
.text:0040C446                 movzx   eax, dl
.text:0040C449                 dec     eax
.text:0040C44A                 retn
.text:0040C44A sub_40C410      endp
.text:0040C44A
.text:0040C44A ; ---------------------------------------------------------------------------
.text:0040C44B                 align 10h
.text:0040C450
.text:0040C450 ; =============== S U B R O U T I N E =======================================
.text:0040C450
.text:0040C450
.text:0040C450 sub_40C450      proc near               ; CODE XREF: sub_406CA0+1A↑p
.text:0040C450
.text:0040C450 var_1C          = dword ptr -1Ch
.text:0040C450 var_18          = dword ptr -18h
.text:0040C450 var_4           = dword ptr -4
.text:0040C450 arg_0           = dword ptr  4
.text:0040C450 arg_4           = dword ptr  8
.text:0040C450
.text:0040C450                 sub     esp, 1Ch
.text:0040C453                 mov     edx, [esp+1Ch+arg_4]
.text:0040C457                 mov     [esp+1Ch+var_4], ebx
.text:0040C45B                 mov     eax, [esp+1Ch+arg_0]
.text:0040C45F                 cmp     dword ptr [edx+4], 3B9AC9FFh
.text:0040C466                 ja      short loc_40C4E4
.text:0040C468                 test    eax, eax
.text:0040C46A                 jz      short loc_40C4D0
.text:0040C46C                 test    eax, eax
.text:0040C46E                 js      short loc_40C4B7
.text:0040C470                 sub     eax, 2
.text:0040C473                 cmp     eax, 1
.text:0040C476                 ja      short loc_40C4B7
.text:0040C478                 rdtsc
.text:0040C47A                 mov     ecx, ds:dword_41F1C4
.text:0040C480                 mov     ebx, ds:dword_41F1C0
.text:0040C486                 mov     eax, ecx
.text:0040C488                 or      eax, ebx
.text:0040C48A                 jz      short loc_40C49A
.text:0040C48C
.text:0040C48C loc_40C48C:                             ; CODE XREF: sub_40C450+65↓j
.text:0040C48C                 xor     ecx, ecx
.text:0040C48E                 mov     esi, esi
.text:0040C490
.text:0040C490 loc_40C490:                             ; CODE XREF: sub_40C450+63↓j
.text:0040C490                                         ; sub_40C450+77↓j ...
.text:0040C490                 mov     eax, ecx
.text:0040C492
.text:0040C492 loc_40C492:                             ; CODE XREF: sub_40C450+A4↓j
.text:0040C492                 mov     ebx, [esp+1Ch+var_4]
.text:0040C496                 add     esp, 1Ch
.text:0040C499                 retn
.text:0040C49A ; ---------------------------------------------------------------------------
.text:0040C49A
.text:0040C49A loc_40C49A:                             ; CODE XREF: sub_40C450+3A↑j
.text:0040C49A                 call    sub_40CBE0
.text:0040C49F                 mov     ds:dword_41F1C0, eax
.text:0040C4A4                 mov     ebx, edx
.text:0040C4A6                 mov     ecx, 0FFFFFFFFh
.text:0040C4AB                 mov     ds:dword_41F1C4, edx
.text:0040C4B1                 or      ebx, eax
.text:0040C4B3                 jz      short loc_40C490
.text:0040C4B5                 jmp     short loc_40C48C
.text:0040C4B7 ; ---------------------------------------------------------------------------
.text:0040C4B7
.text:0040C4B7 loc_40C4B7:                             ; CODE XREF: sub_40C450+1E↑j
.text:0040C4B7                                         ; sub_40C450+26↑j
.text:0040C4B7                 call    _errno
.text:0040C4BC                 mov     dword ptr [eax], 16h
.text:0040C4C2                 mov     ecx, 0FFFFFFFFh
.text:0040C4C7                 jmp     short loc_40C490
.text:0040C4C7 ; ---------------------------------------------------------------------------
.text:0040C4C9                 align 10h
.text:0040C4D0
.text:0040C4D0 loc_40C4D0:                             ; CODE XREF: sub_40C450+1A↑j
.text:0040C4D0                 mov     [esp+1Ch+var_18], 0
.text:0040C4D8                 mov     [esp+1Ch+var_1C], edx
.text:0040C4DB                 call    sub_40CB30
.text:0040C4E0                 mov     ecx, eax
.text:0040C4E2                 jmp     short loc_40C490
.text:0040C4E4 ; ---------------------------------------------------------------------------
.text:0040C4E4
.text:0040C4E4 loc_40C4E4:                             ; CODE XREF: sub_40C450+16↑j
.text:0040C4E4                 call    _errno
.text:0040C4E9                 mov     dword ptr [eax], 16h
.text:0040C4EF                 mov     eax, 0FFFFFFFFh
.text:0040C4F4                 jmp     short loc_40C492
.text:0040C4F4 sub_40C450      endp
.text:0040C4F4
.text:0040C4F4 ; ---------------------------------------------------------------------------
.text:0040C4F6                 align 10h
.text:0040C500                 retn
.text:0040C500 ; ---------------------------------------------------------------------------
.text:0040C501                 align 10h
.text:0040C510
.text:0040C510 ; =============== S U B R O U T I N E =======================================
.text:0040C510
.text:0040C510
.text:0040C510 sub_40C510      proc near               ; CODE XREF: sub_406D30+3F↑p
.text:0040C510                                         ; sub_41B2D0+3C2↓p
.text:0040C510
.text:0040C510 var_1C          = dword ptr -1Ch
.text:0040C510 var_18          = dword ptr -18h
.text:0040C510 var_C           = dword ptr -0Ch
.text:0040C510 var_8           = dword ptr -8
.text:0040C510 var_4           = dword ptr -4
.text:0040C510 arg_0           = dword ptr  4
.text:0040C510 arg_4           = dword ptr  8
.text:0040C510
.text:0040C510                 sub     esp, 1Ch
.text:0040C513                 mov     edx, [esp+1Ch+arg_4]
.text:0040C517                 mov     [esp+1Ch+var_4], ebx
.text:0040C51B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040C51F                 mov     [esp+1Ch+var_18], edx
.text:0040C523                 lea     edx, [esp+1Ch+var_C]
.text:0040C527                 mov     [esp+1Ch+var_1C], edx
.text:0040C52A                 call    sub_40CC40
.text:0040C52F                 test    eax, eax
.text:0040C531                 mov     edx, 0FFFFFFFFh
.text:0040C536                 jnz     short loc_40C55A
.text:0040C538                 mov     ecx, [esp+1Ch+var_C]
.text:0040C53C                 mov     edx, 10624DD3h
.text:0040C541                 mov     [ebx], ecx
.text:0040C543                 mov     ecx, [esp+1Ch+var_8]
.text:0040C547                 mov     eax, ecx
.text:0040C549                 imul    edx
.text:0040C54B                 mov     eax, ecx
.text:0040C54D                 sar     eax, 1Fh
.text:0040C550                 sar     edx, 6
.text:0040C553                 sub     edx, eax
.text:0040C555                 mov     [ebx+4], edx
.text:0040C558                 xor     edx, edx
.text:0040C55A
.text:0040C55A loc_40C55A:                             ; CODE XREF: sub_40C510+26↑j
.text:0040C55A                 mov     ebx, [esp+1Ch+var_4]
.text:0040C55E                 mov     eax, edx
.text:0040C560                 add     esp, 1Ch
.text:0040C563                 retn
.text:0040C563 sub_40C510      endp
.text:0040C563
.text:0040C563 ; ---------------------------------------------------------------------------
.text:0040C564                 align 10h
.text:0040C570
.text:0040C570 ; =============== S U B R O U T I N E =======================================
.text:0040C570
.text:0040C570
.text:0040C570 sub_40C570      proc near               ; CODE XREF: sub_406D30+16↑p
.text:0040C570
.text:0040C570 var_2C          = dword ptr -2Ch
.text:0040C570 var_28          = dword ptr -28h
.text:0040C570 var_24          = dword ptr -24h
.text:0040C570 var_20          = dword ptr -20h
.text:0040C570 var_1C          = dword ptr -1Ch
.text:0040C570 var_18          = dword ptr -18h
.text:0040C570 var_10          = dword ptr -10h
.text:0040C570 var_C           = dword ptr -0Ch
.text:0040C570 var_8           = dword ptr -8
.text:0040C570 var_4           = dword ptr -4
.text:0040C570 arg_0           = dword ptr  4
.text:0040C570 arg_4           = dword ptr  8
.text:0040C570
.text:0040C570                 sub     esp, 2Ch
.text:0040C573                 mov     eax, [esp+2Ch+arg_0]
.text:0040C577                 mov     [esp+2Ch+var_10], ebx
.text:0040C57B                 mov     ebx, 0FFFFFFFFh
.text:0040C580                 test    eax, eax
.text:0040C582                 mov     [esp+2Ch+var_C], esi
.text:0040C586                 mov     [esp+2Ch+var_8], edi
.text:0040C58A                 mov     [esp+2Ch+var_4], ebp
.text:0040C58E                 jz      loc_40C680
.text:0040C594                 test    eax, eax
.text:0040C596                 js      loc_40C673
.text:0040C59C                 sub     eax, 2
.text:0040C59F                 cmp     eax, 1
.text:0040C5A2                 ja      loc_40C673
.text:0040C5A8                 mov     ebp, ds:dword_41F1D4
.text:0040C5AE                 mov     edi, ds:dword_41F1D0
.text:0040C5B4                 mov     eax, ebp
.text:0040C5B6                 or      eax, edi
.text:0040C5B8                 jz      loc_40C656
.text:0040C5BE
.text:0040C5BE loc_40C5BE:                             ; CODE XREF: sub_40C570+FE↓j
.text:0040C5BE                 rdtsc
.text:0040C5C0                 mov     [esp+2Ch+var_24], edi
.text:0040C5C4                 mov     ebx, eax
.text:0040C5C6                 mov     esi, edx
.text:0040C5C8                 mov     [esp+2Ch+var_20], ebp
.text:0040C5CC                 mov     [esp+2Ch+var_2C], eax
.text:0040C5CF                 mov     [esp+2Ch+var_28], edx
.text:0040C5D3                 call    sub_41D180
.text:0040C5D8                 mov     edx, [esp+2Ch+arg_4]
.text:0040C5DC                 mov     [edx], eax
.text:0040C5DE                 mov     [esp+2Ch+var_2C], ebx
.text:0040C5E1                 mov     ebx, 3B9ACA00h
.text:0040C5E6                 mov     [esp+2Ch+var_24], edi
.text:0040C5EA                 mov     [esp+2Ch+var_20], ebp
.text:0040C5EE                 mov     [esp+2Ch+var_28], esi
.text:0040C5F2                 call    sub_41D2A0
.text:0040C5F7                 mov     [esp+2Ch+var_1C], eax
.text:0040C5FB                 mov     eax, [esp+2Ch+var_1C]
.text:0040C5FF                 mov     [esp+2Ch+var_18], edx
.text:0040C603                 mov     [esp+2Ch+var_24], edi
.text:0040C607                 mul     ebx
.text:0040C609                 mov     ebx, [esp+2Ch+var_18]
.text:0040C60D                 mov     [esp+2Ch+var_20], ebp
.text:0040C611                 imul    ebx, 3B9ACA00h
.text:0040C617                 mov     ecx, eax
.text:0040C619                 mov     [esp+2Ch+var_2C], ecx
.text:0040C61C                 lea     edx, [ebx+edx]
.text:0040C61F                 mov     [esp+2Ch+var_28], edx
.text:0040C623                 call    sub_41D180
.text:0040C628                 mov     ebx, [esp+2Ch+arg_4]
.text:0040C62C                 mov     [ebx+4], eax
.text:0040C62F                 xor     ebx, ebx
.text:0040C631                 jmp     short loc_40C640
.text:0040C631 ; ---------------------------------------------------------------------------
.text:0040C633                 align 10h
.text:0040C640
.text:0040C640 loc_40C640:                             ; CODE XREF: sub_40C570+C1↑j
.text:0040C640                                         ; sub_40C570+FC↓j ...
.text:0040C640                 mov     eax, ebx
.text:0040C642                 mov     esi, [esp+2Ch+var_C]
.text:0040C646                 mov     ebx, [esp+2Ch+var_10]
.text:0040C64A                 mov     edi, [esp+2Ch+var_8]
.text:0040C64E                 mov     ebp, [esp+2Ch+var_4]
.text:0040C652                 add     esp, 2Ch
.text:0040C655                 retn
.text:0040C656 ; ---------------------------------------------------------------------------
.text:0040C656
.text:0040C656 loc_40C656:                             ; CODE XREF: sub_40C570+48↑j
.text:0040C656                 call    sub_40CBE0
.text:0040C65B                 mov     ds:dword_41F1D4, edx
.text:0040C661                 mov     edi, eax
.text:0040C663                 mov     ebp, edx
.text:0040C665                 mov     ds:dword_41F1D0, eax
.text:0040C66A                 or      edx, edi
.text:0040C66C                 jz      short loc_40C640
.text:0040C66E                 jmp     loc_40C5BE
.text:0040C673 ; ---------------------------------------------------------------------------
.text:0040C673
.text:0040C673 loc_40C673:                             ; CODE XREF: sub_40C570+26↑j
.text:0040C673                                         ; sub_40C570+32↑j
.text:0040C673                 call    _errno
.text:0040C678                 mov     dword ptr [eax], 16h
.text:0040C67E                 jmp     short loc_40C640
.text:0040C680 ; ---------------------------------------------------------------------------
.text:0040C680
.text:0040C680 loc_40C680:                             ; CODE XREF: sub_40C570+1E↑j
.text:0040C680                 mov     [esp+2Ch+var_28], 0
.text:0040C688                 mov     edx, [esp+2Ch+arg_4]
.text:0040C68C                 mov     [esp+2Ch+var_2C], edx
.text:0040C68F                 call    sub_40CC40
.text:0040C694                 mov     ebx, eax
.text:0040C696                 jmp     short loc_40C640
.text:0040C696 sub_40C570      endp
.text:0040C696
.text:0040C696 ; ---------------------------------------------------------------------------
.text:0040C698                 align 10h
.text:0040C6A0                 xor     eax, eax
.text:0040C6A2                 retn
.text:0040C6A2 ; ---------------------------------------------------------------------------
.text:0040C6A3                 align 10h
.text:0040C6B0 ; const char Source[2]
.text:0040C6B0 Source          db '=',0                ; DATA XREF: sub_40C6C0+A2↓o
.text:0040C6B0                                         ; sub_40C7A0+72↓o
.text:0040C6B2                 align 10h
.text:0040C6C0
.text:0040C6C0 ; =============== S U B R O U T I N E =======================================
.text:0040C6C0
.text:0040C6C0
.text:0040C6C0 ; int __cdecl sub_40C6C0(char *VarName, char *Source, int)
.text:0040C6C0 sub_40C6C0      proc near               ; CODE XREF: sub_4097F0+2C1↑p
.text:0040C6C0                                         ; sub_4097F0+58C↑p ...
.text:0040C6C0
.text:0040C6C0 Str             = dword ptr -1Ch
.text:0040C6C0 Val             = dword ptr -18h
.text:0040C6C0 var_C           = dword ptr -0Ch
.text:0040C6C0 var_8           = dword ptr -8
.text:0040C6C0 var_4           = dword ptr -4
.text:0040C6C0 VarName         = dword ptr  4
.text:0040C6C0 Source          = dword ptr  8
.text:0040C6C0 arg_8           = dword ptr  0Ch
.text:0040C6C0
.text:0040C6C0                 sub     esp, 1Ch
.text:0040C6C3                 mov     [esp+1Ch+var_C], ebx
.text:0040C6C7                 mov     ebx, [esp+1Ch+VarName]
.text:0040C6CB                 mov     [esp+1Ch+var_4], edi
.text:0040C6CF                 mov     edi, [esp+1Ch+Source]
.text:0040C6D3                 test    ebx, ebx
.text:0040C6D5                 mov     [esp+1Ch+var_8], esi
.text:0040C6D9                 jz      short loc_40C6E0
.text:0040C6DB                 cmp     byte ptr [ebx], 0
.text:0040C6DE                 jnz     short loc_40C700
.text:0040C6E0
.text:0040C6E0 loc_40C6E0:                             ; CODE XREF: sub_40C6C0+19↑j
.text:0040C6E0                                         ; sub_40C6C0+52↓j
.text:0040C6E0                 call    _errno
.text:0040C6E5                 mov     dword ptr [eax], 16h
.text:0040C6EB                 mov     eax, 0FFFFFFFFh
.text:0040C6F0
.text:0040C6F0 loc_40C6F0:                             ; CODE XREF: sub_40C6C0+6B↓j
.text:0040C6F0                                         ; sub_40C6C0+94↓j ...
.text:0040C6F0                 mov     ebx, [esp+1Ch+var_C]
.text:0040C6F4                 mov     esi, [esp+1Ch+var_8]
.text:0040C6F8                 mov     edi, [esp+1Ch+var_4]
.text:0040C6FC                 add     esp, 1Ch
.text:0040C6FF                 retn
.text:0040C700 ; ---------------------------------------------------------------------------
.text:0040C700
.text:0040C700 loc_40C700:                             ; CODE XREF: sub_40C6C0+1E↑j
.text:0040C700                 mov     [esp+1Ch+Val], 3Dh ; '=' ; Val
.text:0040C708                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040C70B                 call    strchr
.text:0040C710                 test    eax, eax
.text:0040C712                 jnz     short loc_40C6E0
.text:0040C714                 mov     [esp+1Ch+Str], ebx ; VarName
.text:0040C717                 call    getenv
.text:0040C71C                 test    eax, eax
.text:0040C71E                 jz      short loc_40C72D
.text:0040C720                 mov     ecx, [esp+1Ch+arg_8]
.text:0040C724                 mov     eax, 0FFFFFFFFh
.text:0040C729                 test    ecx, ecx
.text:0040C72B                 jz      short loc_40C6F0
.text:0040C72D
.text:0040C72D loc_40C72D:                             ; CODE XREF: sub_40C6C0+5E↑j
.text:0040C72D                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040C730                 call    strlen
.text:0040C735                 mov     [esp+1Ch+Str], edi ; Str
.text:0040C738                 mov     esi, eax
.text:0040C73A                 call    strlen
.text:0040C73F                 lea     edx, [eax+esi+2]
.text:0040C743                 mov     [esp+1Ch+Str], edx ; Size
.text:0040C746                 call    malloc
.text:0040C74B                 mov     esi, eax
.text:0040C74D                 test    esi, esi
.text:0040C74F                 mov     eax, 0FFFFFFFFh
.text:0040C754                 jz      short loc_40C6F0
.text:0040C756                 mov     [esp+1Ch+Val], ebx ; Source
.text:0040C75A                 mov     [esp+1Ch+Str], esi ; Destination
.text:0040C75D                 call    strcpy
.text:0040C762                 mov     [esp+1Ch+Val], offset Source ; "="
.text:0040C76A                 mov     [esp+1Ch+Str], esi ; Destination
.text:0040C76D                 call    strcat
.text:0040C772                 mov     [esp+1Ch+Val], edi ; Source
.text:0040C776                 mov     [esp+1Ch+Str], esi ; Destination
.text:0040C779                 call    strcat
.text:0040C77E                 mov     [esp+1Ch+Str], esi ; EnvString
.text:0040C781                 call    _putenv
.text:0040C786                 mov     [esp+1Ch+Str], esi ; Block
.text:0040C789                 mov     edi, eax
.text:0040C78B                 call    free
.text:0040C790                 mov     eax, edi
.text:0040C792                 jmp     loc_40C6F0
.text:0040C792 sub_40C6C0      endp
.text:0040C792
.text:0040C792 ; ---------------------------------------------------------------------------
.text:0040C797                 align 10h
.text:0040C7A0
.text:0040C7A0 ; =============== S U B R O U T I N E =======================================
.text:0040C7A0
.text:0040C7A0
.text:0040C7A0 ; int __cdecl sub_40C7A0(char *Source)
.text:0040C7A0 sub_40C7A0      proc near               ; CODE XREF: sub_4097F0+305↑p
.text:0040C7A0                                         ; sub_40C200+33↑p
.text:0040C7A0
.text:0040C7A0 Str             = dword ptr -1Ch
.text:0040C7A0 Val             = dword ptr -18h
.text:0040C7A0 var_8           = dword ptr -8
.text:0040C7A0 var_4           = dword ptr -4
.text:0040C7A0 Source          = dword ptr  4
.text:0040C7A0
.text:0040C7A0                 sub     esp, 1Ch
.text:0040C7A3                 mov     [esp+1Ch+var_8], ebx
.text:0040C7A7                 mov     ebx, [esp+1Ch+Source]
.text:0040C7AB                 mov     [esp+1Ch+var_4], esi
.text:0040C7AF                 test    ebx, ebx
.text:0040C7B1                 jz      short loc_40C7B8
.text:0040C7B3                 cmp     byte ptr [ebx], 0
.text:0040C7B6                 jnz     short loc_40C7D4
.text:0040C7B8
.text:0040C7B8 loc_40C7B8:                             ; CODE XREF: sub_40C7A0+11↑j
.text:0040C7B8                                         ; sub_40C7A0+46↓j
.text:0040C7B8                 call    _errno
.text:0040C7BD                 mov     dword ptr [eax], 16h
.text:0040C7C3                 mov     eax, 0FFFFFFFFh
.text:0040C7C8
.text:0040C7C8 loc_40C7C8:                             ; CODE XREF: sub_40C7A0+64↓j
.text:0040C7C8                                         ; sub_40C7A0+96↓j
.text:0040C7C8                 mov     ebx, [esp+1Ch+var_8]
.text:0040C7CC                 mov     esi, [esp+1Ch+var_4]
.text:0040C7D0                 add     esp, 1Ch
.text:0040C7D3                 retn
.text:0040C7D4 ; ---------------------------------------------------------------------------
.text:0040C7D4
.text:0040C7D4 loc_40C7D4:                             ; CODE XREF: sub_40C7A0+16↑j
.text:0040C7D4                 mov     [esp+1Ch+Val], 3Dh ; '=' ; Val
.text:0040C7DC                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040C7DF                 call    strchr
.text:0040C7E4                 test    eax, eax
.text:0040C7E6                 jnz     short loc_40C7B8
.text:0040C7E8                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040C7EB                 call    strlen
.text:0040C7F0                 add     eax, 2
.text:0040C7F3                 mov     [esp+1Ch+Str], eax ; Size
.text:0040C7F6                 call    malloc
.text:0040C7FB                 mov     esi, eax
.text:0040C7FD                 test    esi, esi
.text:0040C7FF                 mov     eax, 0FFFFFFFFh
.text:0040C804                 jz      short loc_40C7C8
.text:0040C806                 mov     [esp+1Ch+Val], ebx ; Source
.text:0040C80A                 mov     [esp+1Ch+Str], esi ; Destination
.text:0040C80D                 call    strcpy
.text:0040C812                 mov     [esp+1Ch+Val], offset Source ; "="
.text:0040C81A                 mov     [esp+1Ch+Str], esi ; Destination
.text:0040C81D                 call    strcat
.text:0040C822                 mov     [esp+1Ch+Str], esi ; EnvString
.text:0040C825                 call    _putenv
.text:0040C82A                 mov     [esp+1Ch+Str], esi ; Block
.text:0040C82D                 mov     ebx, eax
.text:0040C82F                 call    free
.text:0040C834                 mov     eax, ebx
.text:0040C836                 jmp     short loc_40C7C8
.text:0040C836 sub_40C7A0      endp
.text:0040C836
.text:0040C836 ; ---------------------------------------------------------------------------
.text:0040C838                 align 10h
.text:0040C840                 sub     esp, 0Ch
.text:0040C843                 call    _errno
.text:0040C848                 mov     dword ptr [eax], 28h ; '('
.text:0040C84E                 mov     eax, 0FFFFFFFFh
.text:0040C853                 add     esp, 0Ch
.text:0040C856                 retn
.text:0040C856 ; ---------------------------------------------------------------------------
.text:0040C857                 align 10h
.text:0040C860                 sub     esp, 0Ch
.text:0040C863                 call    _errno
.text:0040C868                 mov     dword ptr [eax], 28h ; '('
.text:0040C86E                 add     esp, 0Ch
.text:0040C871                 retn
.text:0040C871 ; ---------------------------------------------------------------------------
.text:0040C872                 align 10h
.text:0040C880
.text:0040C880 ; =============== S U B R O U T I N E =======================================
.text:0040C880
.text:0040C880
.text:0040C880 ; int __cdecl sub_40C880(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040C880 sub_40C880      proc near               ; CODE XREF: sub_40CA00+93↓p
.text:0040C880
.text:0040C880 pvReserved      = dword ptr -35Ch
.text:0040C880 pUnkOuter       = dword ptr -358h
.text:0040C880 dwClsContext    = dword ptr -354h
.text:0040C880 riid            = dword ptr -350h
.text:0040C880 ppv             = dword ptr -34Ch
.text:0040C880 cchWideChar     = dword ptr -348h
.text:0040C880 var_334         = byte ptr -334h
.text:0040C880 var_330         = dword ptr -330h
.text:0040C880 String2         = byte ptr -32Ch
.text:0040C880 WideCharStr     = word ptr -21Ch
.text:0040C880 lpMultiByteStr  = dword ptr  4
.text:0040C880 lpString1       = dword ptr  8
.text:0040C880
.text:0040C880                 push    edi
.text:0040C881                 push    esi
.text:0040C882                 push    ebx
.text:0040C883                 sub     esp, 350h
.text:0040C889                 mov     edi, [esp+35Ch+lpString1]
.text:0040C890                 mov     byte ptr [edi], 0
.text:0040C893                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040C89A                 call    OleInitialize
.text:0040C89F                 sub     esp, 4
.text:0040C8A2                 cmp     eax, 1
.text:0040C8A5                 ja      loc_40C9DF
.text:0040C8AB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040C8B3                 lea     ecx, [esp+35Ch+var_330]
.text:0040C8B7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040C8BB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040C8C3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040C8CB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040C8D2                 call    CoCreateInstance
.text:0040C8D7                 sub     esp, 14h
.text:0040C8DA                 test    eax, eax
.text:0040C8DC                 js      loc_40C9DF
.text:0040C8E2                 mov     ebx, [esp+35Ch+var_330]
.text:0040C8E6                 lea     edx, [esp+35Ch+var_334]
.text:0040C8EA                 mov     esi, [ebx]
.text:0040C8EC                 mov     [esp+35Ch+dwClsContext], edx
.text:0040C8F0                 mov     [esp+35Ch+pvReserved], ebx
.text:0040C8F3                 xor     ebx, ebx
.text:0040C8F5                 mov     [esp+35Ch+pUnkOuter], offset dword_41C600
.text:0040C8FD                 call    dword ptr [esi]
.text:0040C8FF                 sub     esp, 0Ch
.text:0040C902                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040C909                 call    AreFileApisANSI
.text:0040C90E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040C916                 test    eax, eax
.text:0040C918                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040C91F                 setz    bl
.text:0040C922                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040C926                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040C92E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040C932                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040C93A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040C93D                 call    MultiByteToWideChar
.text:0040C942                 sub     esp, 18h
.text:0040C945                 test    eax, eax
.text:0040C947                 js      loc_40C9DF
.text:0040C94D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040C951                 mov     ebx, [edx]
.text:0040C953                 mov     [esp+35Ch+dwClsContext], 0
.text:0040C95B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040C95F                 mov     [esp+35Ch+pvReserved], edx
.text:0040C962                 call    dword ptr [ebx+14h]
.text:0040C965                 sub     esp, 0Ch
.text:0040C968                 test    eax, eax
.text:0040C96A                 js      short loc_40C9DF
.text:0040C96C                 mov     ebx, [esp+35Ch+var_330]
.text:0040C970                 lea     esi, [esp+35Ch+String2]
.text:0040C974                 mov     ecx, [ebx]
.text:0040C976                 mov     [esp+35Ch+pvReserved], ebx
.text:0040C979                 mov     [esp+35Ch+ppv], 0
.text:0040C981                 mov     [esp+35Ch+riid], 0
.text:0040C989                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040C991                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040C995                 call    dword ptr [ecx+0Ch]
.text:0040C998                 sub     esp, 14h
.text:0040C99B                 mov     ebx, eax
.text:0040C99D                 test    eax, eax
.text:0040C99F                 js      short loc_40C9DF
.text:0040C9A1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040C9A5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040C9A8                 call    lstrcpyA
.text:0040C9AD                 sub     esp, 8
.text:0040C9B0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040C9B4                 mov     ecx, [edi]
.text:0040C9B6                 mov     [esp+35Ch+pvReserved], edi
.text:0040C9B9                 call    dword ptr [ecx+8]
.text:0040C9BC                 sub     esp, 4
.text:0040C9BF                 mov     edx, [esp+35Ch+var_330]
.text:0040C9C3                 mov     esi, [edx]
.text:0040C9C5                 mov     [esp+35Ch+pvReserved], edx
.text:0040C9C8                 call    dword ptr [esi+8]
.text:0040C9CB                 sub     esp, 4
.text:0040C9CE                 call    CoUninitialize
.text:0040C9D3                 mov     eax, ebx
.text:0040C9D5
.text:0040C9D5 loc_40C9D5:                             ; CODE XREF: sub_40C880+177↓j
.text:0040C9D5                 add     esp, 350h
.text:0040C9DB                 pop     ebx
.text:0040C9DC                 pop     esi
.text:0040C9DD                 pop     edi
.text:0040C9DE                 retn
.text:0040C9DF ; ---------------------------------------------------------------------------
.text:0040C9DF
.text:0040C9DF loc_40C9DF:                             ; CODE XREF: sub_40C880+25↑j
.text:0040C9DF                                         ; sub_40C880+5C↑j ...
.text:0040C9DF                 call    sub_40D830
.text:0040C9E4                 mov     edi, eax
.text:0040C9E6                 call    _errno
.text:0040C9EB                 mov     [eax], edi
.text:0040C9ED                 call    CoUninitialize
.text:0040C9F2                 mov     eax, 0FFFFFFFFh
.text:0040C9F7                 jmp     short loc_40C9D5
.text:0040C9F7 sub_40C880      endp
.text:0040C9F7
.text:0040C9F7 ; ---------------------------------------------------------------------------
.text:0040C9F9 ; const char aLnk[]
.text:0040C9F9 aLnk            db '.lnk',0             ; DATA XREF: sub_40CA00+53↓o
.text:0040C9F9                                         ; sub_40CA00:loc_40CA65↓o
.text:0040C9FE                 align 10h
.text:0040CA00
.text:0040CA00 ; =============== S U B R O U T I N E =======================================
.text:0040CA00
.text:0040CA00
.text:0040CA00 ; int __cdecl sub_40CA00(char *, LPSTR lpString1)
.text:0040CA00 sub_40CA00      proc near               ; CODE XREF: sub_40C0F0+96↑p
.text:0040CA00
.text:0040CA00 Str             = dword ptr -1Ch
.text:0040CA00 Source          = dword ptr -18h
.text:0040CA00 Destination     = dword ptr -14h
.text:0040CA00 arg_0           = dword ptr  4
.text:0040CA00 lpString1       = dword ptr  8
.text:0040CA00
.text:0040CA00                 push    ebp
.text:0040CA01                 push    edi
.text:0040CA02                 push    esi
.text:0040CA03                 push    ebx
.text:0040CA04                 sub     esp, 0Ch
.text:0040CA07                 mov     ebx, [esp+1Ch+arg_0]
.text:0040CA0B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040CA0F                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040CA12                 call    strlen
.text:0040CA17                 add     eax, 5
.text:0040CA1A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040CA1D                 call    malloc
.text:0040CA22                 mov     [esp+1Ch+Destination], eax
.text:0040CA26                 test    eax, eax
.text:0040CA28                 jz      loc_40CAD0
.text:0040CA2E                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040CA32                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040CA35                 call    strcpy
.text:0040CA3A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040CA42                 mov     eax, [esp+1Ch+Destination]
.text:0040CA46                 mov     [esp+1Ch+Str], eax ; Str
.text:0040CA49                 call    strrchr
.text:0040CA4E                 test    eax, eax
.text:0040CA50                 jz      short loc_40CA65
.text:0040CA52                 cld
.text:0040CA53                 mov     ebx, offset aLnk ; ".lnk"
.text:0040CA58                 mov     ecx, 5
.text:0040CA5D                 mov     esi, eax
.text:0040CA5F                 mov     edi, ebx
.text:0040CA61                 repe cmpsb
.text:0040CA63                 jz      short loc_40CA79
.text:0040CA65
.text:0040CA65 loc_40CA65:                             ; CODE XREF: sub_40CA00+50↑j
.text:0040CA65                 mov     [esp+1Ch+Source], offset aLnk ; ".lnk"
.text:0040CA6D                 mov     edx, [esp+1Ch+Destination]
.text:0040CA71                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040CA74                 call    strcat
.text:0040CA79
.text:0040CA79 loc_40CA79:                             ; CODE XREF: sub_40CA00+63↑j
.text:0040CA79                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040CA80                 call    SetErrorMode
.text:0040CA85                 sub     esp, 4
.text:0040CA88                 mov     ebx, [esp+1Ch+Destination]
.text:0040CA8C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040CA90                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040CA93                 call    sub_40C880
.text:0040CA98                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040CA9B                 mov     esi, eax
.text:0040CA9D                 call    free
.text:0040CAA2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040CAA9                 call    SetErrorMode
.text:0040CAAE                 sub     esp, 4
.text:0040CAB1                 mov     [esp+1Ch+Str], ebp
.text:0040CAB4                 call    sub_40D100
.text:0040CAB9                 inc     esi
.text:0040CABA                 jz      short loc_40CAD0
.text:0040CABC                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:0040CAC0                 add     esp, 0Ch
.text:0040CAC3                 pop     ebx
.text:0040CAC4                 pop     esi
.text:0040CAC5                 pop     edi
.text:0040CAC6                 pop     ebp
.text:0040CAC7                 jmp     strlen
.text:0040CAC7 ; ---------------------------------------------------------------------------
.text:0040CACC                 align 10h
.text:0040CAD0
.text:0040CAD0 loc_40CAD0:                             ; CODE XREF: sub_40CA00+28↑j
.text:0040CAD0                                         ; sub_40CA00+BA↑j
.text:0040CAD0                 add     esp, 0Ch
.text:0040CAD3                 mov     eax, 0FFFFFFFFh
.text:0040CAD8                 pop     ebx
.text:0040CAD9                 pop     esi
.text:0040CADA                 pop     edi
.text:0040CADB                 pop     ebp
.text:0040CADC                 retn
.text:0040CADC sub_40CA00      endp
.text:0040CADC
.text:0040CADC ; ---------------------------------------------------------------------------
.text:0040CADD                 align 10h
.text:0040CAE0
.text:0040CAE0 ; =============== S U B R O U T I N E =======================================
.text:0040CAE0
.text:0040CAE0
.text:0040CAE0 ; int __cdecl sub_40CAE0(LPCSTR, int, int)
.text:0040CAE0 sub_40CAE0      proc near               ; CODE XREF: sub_40C0F0+42↑p
.text:0040CAE0                                         ; sub_40C0F0+AE↑p ...
.text:0040CAE0
.text:0040CAE0 lpFileName      = dword ptr -2Ch
.text:0040CAE0 dwDesiredAccess = dword ptr -28h
.text:0040CAE0 dwShareMode     = dword ptr -24h
.text:0040CAE0 lpSecurityAttributes= dword ptr -20h
.text:0040CAE0 dwCreationDisposition= dword ptr -1Ch
.text:0040CAE0 dwFlagsAndAttributes= dword ptr -18h
.text:0040CAE0 hTemplateFile   = dword ptr -14h
.text:0040CAE0 var_10          = dword ptr -10h
.text:0040CAE0 var_C           = dword ptr -0Ch
.text:0040CAE0 var_8           = dword ptr -8
.text:0040CAE0 var_4           = dword ptr -4
.text:0040CAE0 arg_0           = dword ptr  4
.text:0040CAE0 arg_4           = dword ptr  8
.text:0040CAE0 arg_8           = dword ptr  0Ch
.text:0040CAE0
.text:0040CAE0 ; FUNCTION CHUNK AT .text:0040F240 SIZE 0000013A BYTES
.text:0040CAE0
.text:0040CAE0                 sub     esp, 0Ch
.text:0040CAE3                 mov     ecx, [esp+0Ch+arg_0]
.text:0040CAE7                 mov     edx, [esp+0Ch+arg_4]
.text:0040CAEB                 mov     eax, [esp+0Ch+arg_8]
.text:0040CAEF                 test    ecx, ecx
.text:0040CAF1                 jnz     short loc_40CB10
.text:0040CAF3                 test    edx, edx
.text:0040CAF5                 jz      short loc_40CB10
.text:0040CAF7                 test    eax, eax
.text:0040CAF9                 jz      short loc_40CB10
.text:0040CAFB                 mov     [esp+0Ch+arg_4], eax
.text:0040CAFF                 mov     [esp+0Ch+arg_0], edx
.text:0040CB03                 add     esp, 0Ch
.text:0040CB06                 jmp     loc_40F240
.text:0040CB06 ; ---------------------------------------------------------------------------
.text:0040CB0B                 align 10h
.text:0040CB10
.text:0040CB10 loc_40CB10:                             ; CODE XREF: sub_40CAE0+11↑j
.text:0040CB10                                         ; sub_40CAE0+15↑j ...
.text:0040CB10                 call    _errno
.text:0040CB15                 mov     dword ptr [eax], 16h
.text:0040CB1B                 mov     eax, 0FFFFFFFFh
.text:0040CB20                 add     esp, 0Ch
.text:0040CB23                 retn
.text:0040CB23 sub_40CAE0      endp
.text:0040CB23
.text:0040CB23 ; ---------------------------------------------------------------------------
.text:0040CB24                 align 10h
.text:0040CB30
.text:0040CB30 ; =============== S U B R O U T I N E =======================================
.text:0040CB30
.text:0040CB30
.text:0040CB30 sub_40CB30      proc near               ; CODE XREF: sub_40C410+29↑p
.text:0040CB30                                         ; sub_40C450+8B↑p
.text:0040CB30
.text:0040CB30 lpFileTime      = dword ptr -3Ch
.text:0040CB30 lpSystemTime    = dword ptr -38h
.text:0040CB30 FileTime        = FILETIME ptr -24h
.text:0040CB30 SystemTime      = _SYSTEMTIME ptr -1Ch
.text:0040CB30 var_C           = dword ptr -0Ch
.text:0040CB30 var_8           = dword ptr -8
.text:0040CB30 var_4           = dword ptr -4
.text:0040CB30 arg_0           = dword ptr  4
.text:0040CB30
.text:0040CB30                 sub     esp, 3Ch
.text:0040CB33                 mov     [esp+3Ch+var_8], esi
.text:0040CB37                 mov     esi, [esp+3Ch+arg_0]
.text:0040CB3B                 mov     [esp+3Ch+var_C], ebx
.text:0040CB3F                 mov     [esp+3Ch+var_4], edi
.text:0040CB43                 test    esi, esi
.text:0040CB45                 jz      short loc_40CBB4
.text:0040CB47                 mov     eax, [esi]
.text:0040CB49                 mov     ebx, 989680h
.text:0040CB4E                 mov     esi, [esi+4]
.text:0040CB51                 imul    ebx
.text:0040CB53                 mov     ecx, eax
.text:0040CB55                 mov     ebx, edx
.text:0040CB57                 mov     eax, 51EB851Fh
.text:0040CB5C                 imul    esi
.text:0040CB5E                 mov     eax, esi
.text:0040CB60                 mov     edi, edx
.text:0040CB62                 sar     edi, 5
.text:0040CB65                 cdq
.text:0040CB66                 sub     edi, edx
.text:0040CB68                 lea     edx, [edi+edi*4]
.text:0040CB6B                 lea     edi, [edx+edx*4]
.text:0040CB6E                 shl     edi, 2
.text:0040CB71                 sub     esi, edi
.text:0040CB73                 mov     eax, esi
.text:0040CB75                 cdq
.text:0040CB76                 add     ecx, esi
.text:0040CB78                 lea     esi, [esp+3Ch+SystemTime]
.text:0040CB7C                 adc     ebx, edx
.text:0040CB7E                 add     ecx, 0D53E8000h
.text:0040CB84                 lea     edx, [esp+3Ch+FileTime]
.text:0040CB88                 adc     ebx, 19DB1DEh
.text:0040CB8E                 mov     [esp+3Ch+FileTime.dwLowDateTime], ecx
.text:0040CB92                 mov     [esp+3Ch+lpFileTime], edx ; lpFileTime
.text:0040CB95                 mov     [esp+3Ch+FileTime.dwHighDateTime], ebx
.text:0040CB99                 mov     [esp+3Ch+lpSystemTime], esi ; lpSystemTime
.text:0040CB9D                 call    FileTimeToSystemTime
.text:0040CBA2                 sub     esp, 8
.text:0040CBA5                 mov     [esp+3Ch+lpFileTime], esi ; lpSystemTime
.text:0040CBA8                 call    SetSystemTime
.text:0040CBAD                 sub     esp, 4
.text:0040CBB0                 test    eax, eax
.text:0040CBB2                 jz      short loc_40CBC6
.text:0040CBB4
.text:0040CBB4 loc_40CBB4:                             ; CODE XREF: sub_40CB30+15↑j
.text:0040CBB4                 xor     eax, eax
.text:0040CBB6
.text:0040CBB6 loc_40CBB6:                             ; CODE XREF: sub_40CB30+A9↓j
.text:0040CBB6                 mov     ebx, [esp+3Ch+var_C]
.text:0040CBBA                 mov     esi, [esp+3Ch+var_8]
.text:0040CBBE                 mov     edi, [esp+3Ch+var_4]
.text:0040CBC2                 add     esp, 3Ch
.text:0040CBC5                 retn
.text:0040CBC6 ; ---------------------------------------------------------------------------
.text:0040CBC6
.text:0040CBC6 loc_40CBC6:                             ; CODE XREF: sub_40CB30+82↑j
.text:0040CBC6                 call    sub_40D830
.text:0040CBCB                 mov     esi, eax
.text:0040CBCD                 call    _errno
.text:0040CBD2                 mov     [eax], esi
.text:0040CBD4                 mov     eax, 0FFFFFFFFh
.text:0040CBD9                 jmp     short loc_40CBB6
.text:0040CBD9 sub_40CB30      endp
.text:0040CBD9
.text:0040CBD9 ; ---------------------------------------------------------------------------
.text:0040CBDB                 align 10h
.text:0040CBE0
.text:0040CBE0 ; =============== S U B R O U T I N E =======================================
.text:0040CBE0
.text:0040CBE0
.text:0040CBE0 sub_40CBE0      proc near               ; CODE XREF: sub_40C450:loc_40C49A↑p
.text:0040CBE0                                         ; sub_40C570:loc_40C656↑p
.text:0040CBE0
.text:0040CBE0 lpFrequency     = dword ptr -0Ch
.text:0040CBE0 var_4           = dword ptr -4
.text:0040CBE0
.text:0040CBE0                 sub     esp, 0Ch
.text:0040CBE3                 mov     edx, dword ptr ds:Frequency+4
.text:0040CBE9                 mov     [esp+0Ch+var_4], ebx
.text:0040CBED                 mov     eax, dword ptr ds:Frequency
.text:0040CBF2                 mov     ebx, edx
.text:0040CBF4                 or      ebx, eax
.text:0040CBF6                 jz      short loc_40CC00
.text:0040CBF8
.text:0040CBF8 loc_40CBF8:                             ; CODE XREF: sub_40CBE0+3E↓j
.text:0040CBF8                                         ; sub_40CBE0+52↓j
.text:0040CBF8                 mov     ebx, [esp+0Ch+var_4]
.text:0040CBFC                 add     esp, 0Ch
.text:0040CBFF                 retn
.text:0040CC00 ; ---------------------------------------------------------------------------
.text:0040CC00
.text:0040CC00 loc_40CC00:                             ; CODE XREF: sub_40CBE0+16↑j
.text:0040CC00                 mov     [esp+0Ch+lpFrequency], offset Frequency ; lpFrequency
.text:0040CC07                 call    QueryPerformanceFrequency
.text:0040CC0C                 sub     esp, 4
.text:0040CC0F                 test    eax, eax
.text:0040CC11                 jz      short loc_40CC20
.text:0040CC13                 mov     eax, dword ptr ds:Frequency
.text:0040CC18                 mov     edx, dword ptr ds:Frequency+4
.text:0040CC1E                 jmp     short loc_40CBF8
.text:0040CC20 ; ---------------------------------------------------------------------------
.text:0040CC20
.text:0040CC20 loc_40CC20:                             ; CODE XREF: sub_40CBE0+31↑j
.text:0040CC20                 call    sub_40D830
.text:0040CC25                 mov     ebx, eax
.text:0040CC27                 call    _errno
.text:0040CC2C                 mov     [eax], ebx
.text:0040CC2E                 xor     edx, edx
.text:0040CC30                 xor     eax, eax
.text:0040CC32                 jmp     short loc_40CBF8
.text:0040CC32 sub_40CBE0      endp
.text:0040CC32
.text:0040CC32 ; ---------------------------------------------------------------------------
.text:0040CC34                 align 10h
.text:0040CC40
.text:0040CC40 ; =============== S U B R O U T I N E =======================================
.text:0040CC40
.text:0040CC40
.text:0040CC40 sub_40CC40      proc near               ; CODE XREF: sub_40C510+1A↑p
.text:0040CC40                                         ; sub_40C570+11F↑p
.text:0040CC40
.text:0040CC40 lpTimeZoneInformation= dword ptr -0DCh
.text:0040CC40 var_D8          = dword ptr -0D8h
.text:0040CC40 var_D4          = dword ptr -0D4h
.text:0040CC40 var_D0          = dword ptr -0D0h
.text:0040CC40 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040CC40 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040CC40 arg_0           = dword ptr  4
.text:0040CC40 arg_4           = dword ptr  8
.text:0040CC40
.text:0040CC40                 push    edi
.text:0040CC41                 push    esi
.text:0040CC42                 push    ebx
.text:0040CC43                 sub     esp, 0D0h
.text:0040CC49                 mov     ebx, [esp+0DCh+arg_4]
.text:0040CC50                 mov     edi, [esp+0DCh+arg_0]
.text:0040CC57                 test    ebx, ebx
.text:0040CC59                 jz      short loc_40CC84
.text:0040CC5B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040CC5F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040CC62                 call    GetTimeZoneInformation
.text:0040CC67                 sub     esp, 4
.text:0040CC6A                 cmp     eax, 0FFFFFFFFh
.text:0040CC6D                 jz      loc_40CD05
.text:0040CC73                 xor     ecx, ecx
.text:0040CC75                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040CC79                 cmp     eax, 2
.text:0040CC7C                 setz    cl
.text:0040CC7F                 mov     [ebx], esi
.text:0040CC81                 mov     [ebx+4], ecx
.text:0040CC84
.text:0040CC84 loc_40CC84:                             ; CODE XREF: sub_40CC40+19↑j
.text:0040CC84                                         ; sub_40CC40+E0↓j
.text:0040CC84                 test    edi, edi
.text:0040CC86                 jz      short loc_40CCF9
.text:0040CC88                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040CC8C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040CC8F                 call    GetSystemTimeAsFileTime
.text:0040CC94                 sub     esp, 4
.text:0040CC97                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040CC9B                 mov     [esp+0DCh+var_D4], 989680h
.text:0040CCA3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040CCA7                 mov     [esp+0DCh+var_D0], 0
.text:0040CCAF                 add     ebx, 2AC18000h
.text:0040CCB5                 adc     esi, 0FE624E21h
.text:0040CCBB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040CCBF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040CCC2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040CCC6                 mov     [esp+0DCh+var_D8], esi
.text:0040CCCA                 call    sub_41D180
.text:0040CCCF                 mov     [edi], eax
.text:0040CCD1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040CCD4                 mov     [esp+0DCh+var_D4], 989680h
.text:0040CCDC                 mov     [esp+0DCh+var_D0], 0
.text:0040CCE4                 mov     [esp+0DCh+var_D8], esi
.text:0040CCE8                 call    sub_41D2A0
.text:0040CCED                 lea     ebx, [eax+eax*4]
.text:0040CCF0                 lea     edx, [ebx+ebx*4]
.text:0040CCF3                 shl     edx, 2
.text:0040CCF6                 mov     [edi+4], edx
.text:0040CCF9
.text:0040CCF9 loc_40CCF9:                             ; CODE XREF: sub_40CC40+46↑j
.text:0040CCF9                 add     esp, 0D0h
.text:0040CCFF                 xor     eax, eax
.text:0040CD01                 pop     ebx
.text:0040CD02                 pop     esi
.text:0040CD03                 pop     edi
.text:0040CD04                 retn
.text:0040CD05 ; ---------------------------------------------------------------------------
.text:0040CD05
.text:0040CD05 loc_40CD05:                             ; CODE XREF: sub_40CC40+2D↑j
.text:0040CD05                 mov     dword ptr [ebx], 0
.text:0040CD0B                 mov     dword ptr [ebx+4], 0
.text:0040CD12                 call    sub_40D830
.text:0040CD17                 mov     esi, eax
.text:0040CD19                 call    _errno
.text:0040CD1E                 mov     [eax], esi
.text:0040CD20                 jmp     loc_40CC84
.text:0040CD20 sub_40CC40      endp
.text:0040CD20
.text:0040CD20 ; ---------------------------------------------------------------------------
.text:0040CD25                 align 10h
.text:0040CD30
.text:0040CD30 ; =============== S U B R O U T I N E =======================================
.text:0040CD30
.text:0040CD30 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040CD30
.text:0040CD30 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040CD30 _win32_longpath proc near               ; CODE XREF: .text:0040D4F4↓p
.text:0040CD30
.text:0040CD30 C               = dword ptr -278h
.text:0040CD30 lpFindFileData  = dword ptr -274h
.text:0040CD30 Destination     = byte ptr -268h
.text:0040CD30 var_267         = byte ptr -267h
.text:0040CD30 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040CD30 lpFileName      = dword ptr  8
.text:0040CD30
.text:0040CD30                 push    ebp
.text:0040CD31                 xor     eax, eax
.text:0040CD33                 push    edi
.text:0040CD34                 push    esi
.text:0040CD35                 push    ebx
.text:0040CD36                 sub     esp, 26Ch
.text:0040CD3C                 mov     esi, [esp+278h+lpFileName]
.text:0040CD43                 lea     ebp, [esp+278h+Destination]
.text:0040CD47                 test    esi, esi
.text:0040CD49                 jz      loc_40CEA7
.text:0040CD4F                 movsx   edx, byte ptr [esi]
.text:0040CD52                 mov     [esp+278h+C], edx ; C
.text:0040CD55                 call    isalpha
.text:0040CD5A                 test    eax, eax
.text:0040CD5C                 jz      short loc_40CD6F
.text:0040CD5E                 mov     eax, [esp+278h+lpFileName]
.text:0040CD65                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040CD69                 jz      loc_40D0AB
.text:0040CD6F
.text:0040CD6F loc_40CD6F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040CD6F                 mov     edx, [esp+278h+lpFileName]
.text:0040CD76                 movzx   eax, byte ptr [edx]
.text:0040CD79                 cmp     al, 2Fh ; '/'
.text:0040CD7B                 jz      loc_40CF8B
.text:0040CD81                 cmp     al, 5Ch ; '\'
.text:0040CD83                 jz      loc_40CF8B
.text:0040CD89
.text:0040CD89 loc_40CD89:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040CD89                                         ; _win32_longpath+2B1↓j ...
.text:0040CD89                 mov     [ebp+268h+Destination], 0
.text:0040CD8D                 movzx   ebx, byte ptr [esi]
.text:0040CD90                 test    bl, bl
.text:0040CD92                 jz      loc_40CE89
.text:0040CD98                 nop
.text:0040CD99                 lea     esi, [esi+0]
.text:0040CDA0
.text:0040CDA0 loc_40CDA0:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040CDA0                 cmp     bl, 2Fh ; '/'
.text:0040CDA3                 jz      loc_40CF40
.text:0040CDA9                 cmp     bl, 5Ch ; '\'
.text:0040CDAC                 jz      loc_40CF40
.text:0040CDB2
.text:0040CDB2 loc_40CDB2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040CDB2                                         ; _win32_longpath+22C↓j ...
.text:0040CDB2                 cmp     bl, 2Eh ; '.'
.text:0040CDB5                 jz      loc_40CEE0
.text:0040CDBB
.text:0040CDBB loc_40CDBB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040CDBB                                         ; _win32_longpath+203↓j
.text:0040CDBB                 test    bl, bl
.text:0040CDBD                 jz      loc_40CE89
.text:0040CDC3                 cmp     bl, 2Fh ; '/'
.text:0040CDC6                 jz      short loc_40CDE2
.text:0040CDC8                 cmp     bl, 5Ch ; '\'
.text:0040CDCB                 jz      short loc_40CDE2
.text:0040CDCD                 lea     esi, [esi+0]
.text:0040CDD0
.text:0040CDD0 loc_40CDD0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040CDD0                 inc     esi
.text:0040CDD1                 movzx   ebx, byte ptr [esi]
.text:0040CDD4                 test    bl, bl
.text:0040CDD6                 jz      short loc_40CDE2
.text:0040CDD8                 cmp     bl, 2Fh ; '/'
.text:0040CDDB                 jz      short loc_40CDE2
.text:0040CDDD                 cmp     bl, 5Ch ; '\'
.text:0040CDE0                 jnz     short loc_40CDD0
.text:0040CDE2
.text:0040CDE2 loc_40CDE2:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040CDE2                                         ; _win32_longpath+9B↑j ...
.text:0040CDE2                 mov     byte ptr [esi], 0
.text:0040CDE5                 lea     edx, [esp+278h+FindFileData]
.text:0040CDEC                 mov     eax, [esp+278h+lpFileName]
.text:0040CDF3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040CDF7                 mov     [esp+278h+C], eax ; lpFileName
.text:0040CDFA                 call    FindFirstFileA
.text:0040CDFF                 mov     [esi], bl
.text:0040CE01                 sub     esp, 8
.text:0040CE04                 mov     edi, eax
.text:0040CE06                 cmp     eax, 0FFFFFFFFh
.text:0040CE09                 jz      loc_40CECC
.text:0040CE0F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040CE16                 mov     ecx, ebx
.text:0040CE18                 nop
.text:0040CE19                 lea     esi, [esi+0]
.text:0040CE20
.text:0040CE20 loc_40CE20:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040CE20                 mov     eax, [ebx]
.text:0040CE22                 add     ebx, 4
.text:0040CE25                 lea     edx, [eax-1010101h]
.text:0040CE2B                 not     eax
.text:0040CE2D                 and     edx, eax
.text:0040CE2F                 and     edx, 80808080h
.text:0040CE35                 jz      short loc_40CE20
.text:0040CE37                 test    edx, 8080h
.text:0040CE3D                 jnz     short loc_40CE45
.text:0040CE3F                 shr     edx, 10h
.text:0040CE42                 add     ebx, 2
.text:0040CE45
.text:0040CE45 loc_40CE45:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040CE45                 add     dl, dl
.text:0040CE47                 sbb     ebx, 3
.text:0040CE4A                 sub     ebx, ecx
.text:0040CE4C                 lea     ecx, [esp+278h+Destination]
.text:0040CE50                 sub     ecx, ebp
.text:0040CE52                 add     ecx, 105h
.text:0040CE58                 cmp     ecx, ebx
.text:0040CE5A                 jle     short loc_40CEB2
.text:0040CE5C                 mov     [esp+278h+C], ebp ; Destination
.text:0040CE5F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040CE66                 add     ebp, ebx
.text:0040CE68                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040CE6C                 call    strcpy
.text:0040CE71                 mov     [esp+278h+C], edi ; hFindFile
.text:0040CE74                 call    FindClose
.text:0040CE79                 sub     esp, 4
.text:0040CE7C
.text:0040CE7C loc_40CE7C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040CE7C                 movzx   ecx, byte ptr [esi]
.text:0040CE7F                 test    cl, cl
.text:0040CE81                 mov     bl, cl
.text:0040CE83                 jnz     loc_40CDA0
.text:0040CE89
.text:0040CE89 loc_40CE89:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040CE89                                         ; _win32_longpath+8D↑j
.text:0040CE89                 mov     esi, [esp+278h+lpFileName]
.text:0040CE90                 lea     ebp, [esp+278h+Destination]
.text:0040CE94                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040CE98                 mov     [esp+278h+C], esi ; Destination
.text:0040CE9B                 call    strcpy
.text:0040CEA0                 mov     eax, [esp+278h+lpFileName]
.text:0040CEA7
.text:0040CEA7 loc_40CEA7:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040CEA7                                         ; _win32_longpath+19A↓j
.text:0040CEA7                 add     esp, 26Ch
.text:0040CEAD                 pop     ebx
.text:0040CEAE                 pop     esi
.text:0040CEAF                 pop     edi
.text:0040CEB0                 pop     ebp
.text:0040CEB1                 retn
.text:0040CEB2 ; ---------------------------------------------------------------------------
.text:0040CEB2
.text:0040CEB2 loc_40CEB2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040CEB2                 mov     [esp+278h+C], edi ; hFindFile
.text:0040CEB5                 call    FindClose
.text:0040CEBA                 sub     esp, 4
.text:0040CEBD                 call    _errno
.text:0040CEC2                 mov     dword ptr [eax], 22h ; '"'
.text:0040CEC8
.text:0040CEC8 loc_40CEC8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040CEC8                 xor     eax, eax
.text:0040CECA                 jmp     short loc_40CEA7
.text:0040CECC ; ---------------------------------------------------------------------------
.text:0040CECC
.text:0040CECC loc_40CECC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040CECC                 call    _errno
.text:0040CED1                 mov     dword ptr [eax], 16h
.text:0040CED7                 jmp     short loc_40CEC8
.text:0040CED7 ; ---------------------------------------------------------------------------
.text:0040CED9                 align 10h
.text:0040CEE0
.text:0040CEE0 loc_40CEE0:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040CEE0                 movzx   eax, byte ptr [esi+1]
.text:0040CEE4                 test    al, al
.text:0040CEE6                 jnz     short loc_40CF15
.text:0040CEE8
.text:0040CEE8 loc_40CEE8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040CEE8                                         ; _win32_longpath+1EB↓j ...
.text:0040CEE8                 test    bl, bl
.text:0040CEEA                 jz      short loc_40CF0C
.text:0040CEEC                 cmp     bl, 2Fh ; '/'
.text:0040CEEF                 jz      short loc_40CF0C
.text:0040CEF1                 cmp     bl, 5Ch ; '\'
.text:0040CEF4                 jz      short loc_40CF0C
.text:0040CEF6
.text:0040CEF6 loc_40CEF6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040CEF6                 mov     [ebp+268h+Destination], bl
.text:0040CEF9                 inc     esi
.text:0040CEFA                 inc     ebp
.text:0040CEFB                 movzx   ebx, byte ptr [esi]
.text:0040CEFE                 test    bl, bl
.text:0040CF00                 jz      short loc_40CF0C
.text:0040CF02                 cmp     bl, 2Fh ; '/'
.text:0040CF05                 jz      short loc_40CF0C
.text:0040CF07                 cmp     bl, 5Ch ; '\'
.text:0040CF0A                 jnz     short loc_40CEF6
.text:0040CF0C
.text:0040CF0C loc_40CF0C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040CF0C                                         ; _win32_longpath+1BF↑j ...
.text:0040CF0C                 mov     [ebp+268h+Destination], 0
.text:0040CF10                 jmp     loc_40CE7C
.text:0040CF15 ; ---------------------------------------------------------------------------
.text:0040CF15
.text:0040CF15 loc_40CF15:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040CF15                 cmp     al, 2Fh ; '/'
.text:0040CF17                 jz      short loc_40CEE8
.text:0040CF19                 cmp     al, 5Ch ; '\'
.text:0040CF1B                 jz      short loc_40CEE8
.text:0040CF1D                 cmp     al, 2Eh ; '.'
.text:0040CF1F                 jnz     loc_40CDBB
.text:0040CF25                 movzx   eax, byte ptr [esi+2]
.text:0040CF29                 test    al, al
.text:0040CF2B                 jz      short loc_40CEE8
.text:0040CF2D                 cmp     al, 2Fh ; '/'
.text:0040CF2F                 jz      short loc_40CEE8
.text:0040CF31                 cmp     al, 5Ch ; '\'
.text:0040CF33                 jnz     loc_40CDBB
.text:0040CF39                 jmp     short loc_40CEE8
.text:0040CF39 ; ---------------------------------------------------------------------------
.text:0040CF3B                 align 10h
.text:0040CF40
.text:0040CF40 loc_40CF40:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040CF40                                         ; _win32_longpath+7C↑j
.text:0040CF40                 mov     [ebp+268h+Destination], bl
.text:0040CF43                 inc     esi
.text:0040CF44                 inc     ebp
.text:0040CF45                 mov     [ebp+268h+Destination], 0
.text:0040CF49                 movzx   ebx, byte ptr [esi]
.text:0040CF4C                 test    bl, bl
.text:0040CF4E                 jz      loc_40CDB2
.text:0040CF54                 cmp     bl, 2Fh ; '/'
.text:0040CF57                 jz      short loc_40CF70
.text:0040CF59                 cmp     bl, 5Ch ; '\'
.text:0040CF5C                 jnz     loc_40CDB2
.text:0040CF62                 lea     esi, [esi+0]
.text:0040CF69                 lea     edi, [edi+0]
.text:0040CF70
.text:0040CF70 loc_40CF70:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040CF70                                         ; _win32_longpath+24F↓j ...
.text:0040CF70                 inc     esi
.text:0040CF71                 movzx   ebx, byte ptr [esi]
.text:0040CF74                 test    bl, bl
.text:0040CF76                 jz      loc_40CDB2
.text:0040CF7C                 cmp     bl, 2Fh ; '/'
.text:0040CF7F                 jz      short loc_40CF70
.text:0040CF81                 cmp     bl, 5Ch ; '\'
.text:0040CF84                 jz      short loc_40CF70
.text:0040CF86                 jmp     loc_40CDB2
.text:0040CF8B ; ---------------------------------------------------------------------------
.text:0040CF8B
.text:0040CF8B loc_40CF8B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040CF8B                                         ; _win32_longpath+53↑j
.text:0040CF8B                 mov     edi, [esp+278h+lpFileName]
.text:0040CF92                 movzx   edx, byte ptr [edi+1]
.text:0040CF96                 cmp     dl, 2Fh ; '/'
.text:0040CF99                 jz      short loc_40CFA4
.text:0040CF9B                 cmp     dl, 5Ch ; '\'
.text:0040CF9E                 jnz     loc_40CD89
.text:0040CFA4
.text:0040CFA4 loc_40CFA4:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040CFA4                 mov     esi, [esp+278h+lpFileName]
.text:0040CFAB                 mov     [ebp+268h+Destination], al
.text:0040CFAE                 mov     ecx, [esp+278h+lpFileName]
.text:0040CFB5                 inc     ebp
.text:0040CFB6                 add     esi, 2
.text:0040CFB9                 movzx   ebx, byte ptr [ecx+1]
.text:0040CFBD                 mov     [ebp+268h+Destination], bl
.text:0040CFC0                 inc     ebp
.text:0040CFC1                 movzx   eax, byte ptr [ecx+2]
.text:0040CFC5                 test    al, al
.text:0040CFC7                 jz      loc_40D0A3
.text:0040CFCD                 cmp     al, 2Fh ; '/'
.text:0040CFCF                 jz      loc_40D088
.text:0040CFD5                 cmp     al, 5Ch ; '\'
.text:0040CFD7                 mov     bl, al
.text:0040CFD9                 jz      loc_40D088
.text:0040CFDF
.text:0040CFDF loc_40CFDF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040CFDF                                         ; _win32_longpath+376↓j
.text:0040CFDF                 test    bl, bl
.text:0040CFE1                 jz      loc_40CD89
.text:0040CFE7                 cmp     bl, 2Fh ; '/'
.text:0040CFEA                 jz      short loc_40D00B
.text:0040CFEC                 cmp     bl, 5Ch ; '\'
.text:0040CFEF                 jz      short loc_40D00B
.text:0040CFF1
.text:0040CFF1 loc_40CFF1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040CFF1                 mov     [ebp+268h+Destination], bl
.text:0040CFF4                 inc     esi
.text:0040CFF5                 inc     ebp
.text:0040CFF6                 movzx   ebx, byte ptr [esi]
.text:0040CFF9                 test    bl, bl
.text:0040CFFB                 jz      loc_40CD89
.text:0040D001                 cmp     bl, 2Fh ; '/'
.text:0040D004                 jz      short loc_40D00B
.text:0040D006                 cmp     bl, 5Ch ; '\'
.text:0040D009                 jnz     short loc_40CFF1
.text:0040D00B
.text:0040D00B loc_40D00B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040D00B                                         ; _win32_longpath+2BF↑j ...
.text:0040D00B                 test    bl, bl
.text:0040D00D                 jz      loc_40CD89
.text:0040D013                 mov     [ebp+268h+Destination], bl
.text:0040D016                 inc     esi
.text:0040D017                 inc     ebp
.text:0040D018                 movzx   ebx, byte ptr [esi]
.text:0040D01B                 test    bl, bl
.text:0040D01D                 jz      loc_40CD89
.text:0040D023                 cmp     bl, 2Fh ; '/'
.text:0040D026                 jz      short loc_40D070
.text:0040D028                 cmp     bl, 5Ch ; '\'
.text:0040D02B                 jz      short loc_40D070
.text:0040D02D
.text:0040D02D loc_40D02D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040D02D                 test    bl, bl
.text:0040D02F                 jz      loc_40CD89
.text:0040D035                 cmp     bl, 2Fh ; '/'
.text:0040D038                 jz      loc_40CD89
.text:0040D03E                 cmp     bl, 5Ch ; '\'
.text:0040D041                 jz      loc_40CD89
.text:0040D047
.text:0040D047 loc_40D047:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040D047                 mov     [ebp+268h+Destination], bl
.text:0040D04A                 inc     esi
.text:0040D04B                 inc     ebp
.text:0040D04C                 movzx   ebx, byte ptr [esi]
.text:0040D04F                 test    bl, bl
.text:0040D051                 jz      loc_40CD89
.text:0040D057                 cmp     bl, 2Fh ; '/'
.text:0040D05A                 jz      loc_40CD89
.text:0040D060                 cmp     bl, 5Ch ; '\'
.text:0040D063                 jnz     short loc_40D047
.text:0040D065                 jmp     loc_40CD89
.text:0040D065 ; ---------------------------------------------------------------------------
.text:0040D06A                 align 10h
.text:0040D070
.text:0040D070 loc_40D070:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040D070                                         ; _win32_longpath+2FB↑j ...
.text:0040D070                 inc     esi
.text:0040D071                 movzx   ebx, byte ptr [esi]
.text:0040D074                 test    bl, bl
.text:0040D076                 jz      loc_40CD89
.text:0040D07C                 cmp     bl, 2Fh ; '/'
.text:0040D07F                 jz      short loc_40D070
.text:0040D081                 cmp     bl, 5Ch ; '\'
.text:0040D084                 jz      short loc_40D070
.text:0040D086                 jmp     short loc_40D02D
.text:0040D088 ; ---------------------------------------------------------------------------
.text:0040D088
.text:0040D088 loc_40D088:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040D088                                         ; _win32_longpath+2A9↑j ...
.text:0040D088                 inc     esi
.text:0040D089                 movzx   ebx, byte ptr [esi]
.text:0040D08C                 test    bl, bl
.text:0040D08E                 jz      loc_40CD89
.text:0040D094                 cmp     bl, 2Fh ; '/'
.text:0040D097                 jz      short loc_40D088
.text:0040D099                 cmp     bl, 5Ch ; '\'
.text:0040D09C                 jz      short loc_40D088
.text:0040D09E                 jmp     loc_40CFDF
.text:0040D0A3 ; ---------------------------------------------------------------------------
.text:0040D0A3
.text:0040D0A3 loc_40D0A3:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040D0A3                 movzx   ebx, byte ptr [esi]
.text:0040D0A6                 jmp     loc_40CFDF
.text:0040D0AB ; ---------------------------------------------------------------------------
.text:0040D0AB
.text:0040D0AB loc_40D0AB:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040D0AB                 movzx   ecx, byte ptr [eax]
.text:0040D0AE                 mov     esi, eax
.text:0040D0B0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040D0B5                 add     esi, 2
.text:0040D0B8                 lea     ebp, [esp+12h]
.text:0040D0BC                 mov     [esp+278h+Destination], cl
.text:0040D0C0                 jmp     loc_40CD89
.text:0040D0C0 _win32_longpath endp
.text:0040D0C0
.text:0040D0C0 ; ---------------------------------------------------------------------------
.text:0040D0C5                 align 10h
.text:0040D0D0                 sub     esp, 0Ch
.text:0040D0D3                 mov     edx, [esp+10h]
.text:0040D0D7                 mov     dword ptr [esp+4], 0
.text:0040D0DF                 mov     [esp], edx
.text:0040D0E2                 call    sub_4191E0
.text:0040D0E7                 inc     eax
.text:0040D0E8                 setnz   dl
.text:0040D0EB                 add     esp, 0Ch
.text:0040D0EE                 movzx   eax, dl
.text:0040D0F1                 retn
.text:0040D0F1 ; ---------------------------------------------------------------------------
.text:0040D0F2                 align 10h
.text:0040D100
.text:0040D100 ; =============== S U B R O U T I N E =======================================
.text:0040D100
.text:0040D100
.text:0040D100 sub_40D100      proc near               ; CODE XREF: sub_40CA00+B4↑p
.text:0040D100                                         ; sub_4190B0+AA↓p
.text:0040D100
.text:0040D100 arg_0           = dword ptr  4
.text:0040D100
.text:0040D100                 mov     ecx, [esp+arg_0]
.text:0040D104                 mov     edx, ecx
.text:0040D106                 movzx   eax, byte ptr [ecx]
.text:0040D109                 test    al, al
.text:0040D10B                 jz      short loc_40D11C
.text:0040D10D                 lea     esi, [esi+0]
.text:0040D110
.text:0040D110 loc_40D110:                             ; CODE XREF: sub_40D100+1A↓j
.text:0040D110                 cmp     al, 5Ch ; '\'
.text:0040D112                 jz      short loc_40D120
.text:0040D114
.text:0040D114 loc_40D114:                             ; CODE XREF: sub_40D100+23↓j
.text:0040D114                 inc     edx
.text:0040D115                 movzx   eax, byte ptr [edx]
.text:0040D118                 test    al, al
.text:0040D11A                 jnz     short loc_40D110
.text:0040D11C
.text:0040D11C loc_40D11C:                             ; CODE XREF: sub_40D100+B↑j
.text:0040D11C                 mov     eax, ecx
.text:0040D11E                 retn
.text:0040D11E ; ---------------------------------------------------------------------------
.text:0040D11F                 align 10h
.text:0040D120
.text:0040D120 loc_40D120:                             ; CODE XREF: sub_40D100+12↑j
.text:0040D120                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D123                 jmp     short loc_40D114
.text:0040D123 sub_40D100      endp
.text:0040D123
.text:0040D123 ; ---------------------------------------------------------------------------
.text:0040D125                 align 10h
.text:0040D130                 push    ebx
.text:0040D131                 sub     esp, 8
.text:0040D134                 mov     ebx, [esp+14h]
.text:0040D138                 mov     edx, [esp+10h]
.text:0040D13C                 mov     [esp], ebx
.text:0040D13F                 mov     [esp+4], edx
.text:0040D143                 call    strcpy
.text:0040D148                 movzx   eax, byte ptr [ebx]
.text:0040D14B                 mov     edx, ebx
.text:0040D14D                 test    al, al
.text:0040D14F                 jz      short loc_40D16C
.text:0040D151                 jmp     short loc_40D160
.text:0040D151 ; ---------------------------------------------------------------------------
.text:0040D153                 align 10h
.text:0040D160
.text:0040D160 loc_40D160:                             ; CODE XREF: .text:0040D151↑j
.text:0040D160                                         ; .text:0040D16A↓j
.text:0040D160                 cmp     al, 5Ch ; '\'
.text:0040D162                 jz      short loc_40D173
.text:0040D164
.text:0040D164 loc_40D164:                             ; CODE XREF: .text:0040D176↓j
.text:0040D164                 inc     edx
.text:0040D165                 movzx   eax, byte ptr [edx]
.text:0040D168                 test    al, al
.text:0040D16A                 jnz     short loc_40D160
.text:0040D16C
.text:0040D16C loc_40D16C:                             ; CODE XREF: .text:0040D14F↑j
.text:0040D16C                 add     esp, 8
.text:0040D16F                 xor     eax, eax
.text:0040D171                 pop     ebx
.text:0040D172                 retn
.text:0040D173 ; ---------------------------------------------------------------------------
.text:0040D173
.text:0040D173 loc_40D173:                             ; CODE XREF: .text:0040D162↑j
.text:0040D173                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D176                 jmp     short loc_40D164
.text:0040D176 ; ---------------------------------------------------------------------------
.text:0040D178                 align 10h
.text:0040D180
.text:0040D180 ; =============== S U B R O U T I N E =======================================
.text:0040D180
.text:0040D180
.text:0040D180 sub_40D180      proc near               ; CODE XREF: sub_40E050+16↓p
.text:0040D180                                         ; sub_40E550+1F↓p ...
.text:0040D180
.text:0040D180 arg_0           = dword ptr  4
.text:0040D180
.text:0040D180                 mov     ecx, [esp+arg_0]
.text:0040D184                 mov     edx, ecx
.text:0040D186                 movzx   eax, byte ptr [ecx]
.text:0040D189                 test    al, al
.text:0040D18B                 jz      short loc_40D19C
.text:0040D18D                 lea     esi, [esi+0]
.text:0040D190
.text:0040D190 loc_40D190:                             ; CODE XREF: sub_40D180+1A↓j
.text:0040D190                 cmp     al, 2Fh ; '/'
.text:0040D192                 jz      short loc_40D1A0
.text:0040D194
.text:0040D194 loc_40D194:                             ; CODE XREF: sub_40D180+23↓j
.text:0040D194                 inc     edx
.text:0040D195                 movzx   eax, byte ptr [edx]
.text:0040D198                 test    al, al
.text:0040D19A                 jnz     short loc_40D190
.text:0040D19C
.text:0040D19C loc_40D19C:                             ; CODE XREF: sub_40D180+B↑j
.text:0040D19C                 mov     eax, ecx
.text:0040D19E                 retn
.text:0040D19E ; ---------------------------------------------------------------------------
.text:0040D19F                 align 10h
.text:0040D1A0
.text:0040D1A0 loc_40D1A0:                             ; CODE XREF: sub_40D180+12↑j
.text:0040D1A0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D1A3                 jmp     short loc_40D194
.text:0040D1A3 sub_40D180      endp
.text:0040D1A3
.text:0040D1A3 ; ---------------------------------------------------------------------------
.text:0040D1A5                 align 10h
.text:0040D1B0                 push    ebx
.text:0040D1B1                 sub     esp, 8
.text:0040D1B4                 mov     ebx, [esp+14h]
.text:0040D1B8                 mov     edx, [esp+10h]
.text:0040D1BC                 mov     [esp], ebx
.text:0040D1BF                 mov     [esp+4], edx
.text:0040D1C3                 call    strcpy
.text:0040D1C8                 movzx   eax, byte ptr [ebx]
.text:0040D1CB                 mov     edx, ebx
.text:0040D1CD                 test    al, al
.text:0040D1CF                 jz      short loc_40D1EC
.text:0040D1D1                 jmp     short loc_40D1E0
.text:0040D1D1 ; ---------------------------------------------------------------------------
.text:0040D1D3                 align 10h
.text:0040D1E0
.text:0040D1E0 loc_40D1E0:                             ; CODE XREF: .text:0040D1D1↑j
.text:0040D1E0                                         ; .text:0040D1EA↓j
.text:0040D1E0                 cmp     al, 2Fh ; '/'
.text:0040D1E2                 jz      short loc_40D1F3
.text:0040D1E4
.text:0040D1E4 loc_40D1E4:                             ; CODE XREF: .text:0040D1F6↓j
.text:0040D1E4                 inc     edx
.text:0040D1E5                 movzx   eax, byte ptr [edx]
.text:0040D1E8                 test    al, al
.text:0040D1EA                 jnz     short loc_40D1E0
.text:0040D1EC
.text:0040D1EC loc_40D1EC:                             ; CODE XREF: .text:0040D1CF↑j
.text:0040D1EC                 add     esp, 8
.text:0040D1EF                 xor     eax, eax
.text:0040D1F1                 pop     ebx
.text:0040D1F2                 retn
.text:0040D1F3 ; ---------------------------------------------------------------------------
.text:0040D1F3
.text:0040D1F3 loc_40D1F3:                             ; CODE XREF: .text:0040D1E2↑j
.text:0040D1F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D1F6                 jmp     short loc_40D1E4
.text:0040D1F6 ; ---------------------------------------------------------------------------
.text:0040D1F8                 align 10h
.text:0040D200                 push    ebx
.text:0040D201                 sub     esp, 8
.text:0040D204                 mov     ebx, [esp+14h]
.text:0040D208                 mov     edx, [esp+10h]
.text:0040D20C                 mov     [esp+4], ebx
.text:0040D210                 mov     [esp], edx
.text:0040D213                 call    sub_419060
.text:0040D218                 movzx   eax, byte ptr [ebx]
.text:0040D21B                 mov     edx, ebx
.text:0040D21D                 test    al, al
.text:0040D21F                 jz      short loc_40D23C
.text:0040D221                 jmp     short loc_40D230
.text:0040D221 ; ---------------------------------------------------------------------------
.text:0040D223                 align 10h
.text:0040D230
.text:0040D230 loc_40D230:                             ; CODE XREF: .text:0040D221↑j
.text:0040D230                                         ; .text:0040D23A↓j
.text:0040D230                 cmp     al, 2Fh ; '/'
.text:0040D232                 jz      short loc_40D243
.text:0040D234
.text:0040D234 loc_40D234:                             ; CODE XREF: .text:0040D246↓j
.text:0040D234                 inc     edx
.text:0040D235                 movzx   eax, byte ptr [edx]
.text:0040D238                 test    al, al
.text:0040D23A                 jnz     short loc_40D230
.text:0040D23C
.text:0040D23C loc_40D23C:                             ; CODE XREF: .text:0040D21F↑j
.text:0040D23C                 add     esp, 8
.text:0040D23F                 xor     eax, eax
.text:0040D241                 pop     ebx
.text:0040D242                 retn
.text:0040D243 ; ---------------------------------------------------------------------------
.text:0040D243
.text:0040D243 loc_40D243:                             ; CODE XREF: .text:0040D232↑j
.text:0040D243                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D246                 jmp     short loc_40D234
.text:0040D246 ; ---------------------------------------------------------------------------
.text:0040D248                 align 10h
.text:0040D250                 push    ebx
.text:0040D251                 sub     esp, 8
.text:0040D254                 mov     ebx, [esp+14h]
.text:0040D258                 mov     edx, [esp+10h]
.text:0040D25C                 mov     [esp], ebx
.text:0040D25F                 mov     [esp+4], edx
.text:0040D263                 call    sub_419060
.text:0040D268                 movzx   eax, byte ptr [ebx]
.text:0040D26B                 mov     edx, ebx
.text:0040D26D                 test    al, al
.text:0040D26F                 jz      short loc_40D28C
.text:0040D271                 jmp     short loc_40D280
.text:0040D271 ; ---------------------------------------------------------------------------
.text:0040D273                 align 10h
.text:0040D280
.text:0040D280 loc_40D280:                             ; CODE XREF: .text:0040D271↑j
.text:0040D280                                         ; .text:0040D28A↓j
.text:0040D280                 cmp     al, 5Ch ; '\'
.text:0040D282                 jz      short loc_40D291
.text:0040D284
.text:0040D284 loc_40D284:                             ; CODE XREF: .text:0040D294↓j
.text:0040D284                 inc     edx
.text:0040D285                 movzx   eax, byte ptr [edx]
.text:0040D288                 test    al, al
.text:0040D28A                 jnz     short loc_40D280
.text:0040D28C
.text:0040D28C loc_40D28C:                             ; CODE XREF: .text:0040D26F↑j
.text:0040D28C                 add     esp, 8
.text:0040D28F                 pop     ebx
.text:0040D290                 retn
.text:0040D291 ; ---------------------------------------------------------------------------
.text:0040D291
.text:0040D291 loc_40D291:                             ; CODE XREF: .text:0040D282↑j
.text:0040D291                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D294                 jmp     short loc_40D284
.text:0040D294 ; ---------------------------------------------------------------------------
.text:0040D296                 align 10h
.text:0040D2A0
.text:0040D2A0 ; =============== S U B R O U T I N E =======================================
.text:0040D2A0
.text:0040D2A0
.text:0040D2A0 ; int __cdecl sub_40D2A0(LPSTR)
.text:0040D2A0 sub_40D2A0      proc near               ; CODE XREF: .text:0040D32E↓p
.text:0040D2A0                                         ; .text:0040D36E↓p ...
.text:0040D2A0
.text:0040D2A0 hModule         = dword ptr -1Ch
.text:0040D2A0 lpFilename      = dword ptr -18h
.text:0040D2A0 nSize           = dword ptr -14h
.text:0040D2A0 arg_0           = dword ptr  4
.text:0040D2A0
.text:0040D2A0                 push    esi
.text:0040D2A1                 push    ebx
.text:0040D2A2                 sub     esp, 14h
.text:0040D2A5                 mov     esi, [esp+1Ch+arg_0]
.text:0040D2A9                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040D2B1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040D2B8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040D2BC                 call    GetModuleFileNameA
.text:0040D2C1                 sub     esp, 0Ch
.text:0040D2C4                 test    eax, eax
.text:0040D2C6                 jz      short loc_40D308
.text:0040D2C8                 cmp     eax, 104h
.text:0040D2CD                 jg      short loc_40D2F9
.text:0040D2CF
.text:0040D2CF loc_40D2CF:                             ; CODE XREF: sub_40D2A0+66↓j
.text:0040D2CF                                         ; sub_40D2A0+78↓j
.text:0040D2CF                 movzx   eax, byte ptr [esi]
.text:0040D2D2                 mov     edx, esi
.text:0040D2D4                 test    al, al
.text:0040D2D6                 jz      short loc_40D2EC
.text:0040D2D8                 nop
.text:0040D2D9                 lea     esi, [esi+0]
.text:0040D2E0
.text:0040D2E0 loc_40D2E0:                             ; CODE XREF: sub_40D2A0+4A↓j
.text:0040D2E0                 cmp     al, 5Ch ; '\'
.text:0040D2E2                 jz      short loc_40D2F4
.text:0040D2E4
.text:0040D2E4 loc_40D2E4:                             ; CODE XREF: sub_40D2A0+57↓j
.text:0040D2E4                 inc     edx
.text:0040D2E5                 movzx   eax, byte ptr [edx]
.text:0040D2E8                 test    al, al
.text:0040D2EA                 jnz     short loc_40D2E0
.text:0040D2EC
.text:0040D2EC loc_40D2EC:                             ; CODE XREF: sub_40D2A0+36↑j
.text:0040D2EC                 add     esp, 14h
.text:0040D2EF                 mov     eax, esi
.text:0040D2F1                 pop     ebx
.text:0040D2F2                 pop     esi
.text:0040D2F3                 retn
.text:0040D2F4 ; ---------------------------------------------------------------------------
.text:0040D2F4
.text:0040D2F4 loc_40D2F4:                             ; CODE XREF: sub_40D2A0+42↑j
.text:0040D2F4                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040D2F7                 jmp     short loc_40D2E4
.text:0040D2F9 ; ---------------------------------------------------------------------------
.text:0040D2F9
.text:0040D2F9 loc_40D2F9:                             ; CODE XREF: sub_40D2A0+2D↑j
.text:0040D2F9                 call    _errno
.text:0040D2FE                 mov     dword ptr [eax], 26h ; '&'
.text:0040D304                 xor     esi, esi
.text:0040D306                 jmp     short loc_40D2CF
.text:0040D308 ; ---------------------------------------------------------------------------
.text:0040D308
.text:0040D308 loc_40D308:                             ; CODE XREF: sub_40D2A0+26↑j
.text:0040D308                 call    sub_40D830
.text:0040D30D                 mov     ebx, eax
.text:0040D30F                 xor     esi, esi
.text:0040D311                 call    _errno
.text:0040D316                 mov     [eax], ebx
.text:0040D318                 jmp     short loc_40D2CF
.text:0040D318 sub_40D2A0      endp
.text:0040D318
.text:0040D318 ; ---------------------------------------------------------------------------
.text:0040D31A                 align 10h
.text:0040D320                 sub     esp, 0Ch
.text:0040D323                 mov     [esp+8], ebx
.text:0040D327                 mov     ebx, [esp+10h]
.text:0040D32B                 mov     [esp], ebx
.text:0040D32E                 call    sub_40D2A0
.text:0040D333                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D33B                 mov     [esp], ebx
.text:0040D33E                 call    strrchr
.text:0040D343                 test    eax, eax
.text:0040D345                 jz      short loc_40D34A
.text:0040D347                 lea     ebx, [eax+1]
.text:0040D34A
.text:0040D34A loc_40D34A:                             ; CODE XREF: .text:0040D345↑j
.text:0040D34A                 mov     eax, ebx
.text:0040D34C                 mov     ebx, [esp+8]
.text:0040D350                 add     esp, 0Ch
.text:0040D353                 retn
.text:0040D353 ; ---------------------------------------------------------------------------
.text:0040D354                 align 10h
.text:0040D360                 sub     esp, 0Ch
.text:0040D363                 mov     [esp+8], ebx
.text:0040D367                 mov     ebx, [esp+10h]
.text:0040D36B                 mov     [esp], ebx
.text:0040D36E                 call    sub_40D2A0
.text:0040D373                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D37B                 mov     [esp], ebx
.text:0040D37E                 call    strrchr
.text:0040D383                 test    eax, eax
.text:0040D385                 jz      short loc_40D38A
.text:0040D387                 mov     byte ptr [eax], 0
.text:0040D38A
.text:0040D38A loc_40D38A:                             ; CODE XREF: .text:0040D385↑j
.text:0040D38A                 mov     eax, ebx
.text:0040D38C                 mov     ebx, [esp+8]
.text:0040D390                 add     esp, 0Ch
.text:0040D393                 retn
.text:0040D393 ; ---------------------------------------------------------------------------
.text:0040D394                 align 10h
.text:0040D3A0                 sub     esp, 0Ch
.text:0040D3A3                 mov     [esp+8], ebx
.text:0040D3A7                 mov     ebx, [esp+10h]
.text:0040D3AB                 mov     [esp], ebx
.text:0040D3AE                 call    sub_40D2A0
.text:0040D3B3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D3BB                 mov     [esp], ebx
.text:0040D3BE                 call    strrchr
.text:0040D3C3                 test    eax, eax
.text:0040D3C5                 jz      short loc_40D3CA
.text:0040D3C7                 mov     byte ptr [eax], 0
.text:0040D3CA
.text:0040D3CA loc_40D3CA:                             ; CODE XREF: .text:0040D3C5↑j
.text:0040D3CA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040D3D2                 mov     [esp], ebx
.text:0040D3D5                 call    strrchr
.text:0040D3DA                 test    eax, eax
.text:0040D3DC                 jz      short loc_40D3E1
.text:0040D3DE                 mov     byte ptr [eax], 0
.text:0040D3E1
.text:0040D3E1 loc_40D3E1:                             ; CODE XREF: .text:0040D3DC↑j
.text:0040D3E1                 mov     eax, ebx
.text:0040D3E3                 mov     ebx, [esp+8]
.text:0040D3E7                 add     esp, 0Ch
.text:0040D3EA                 retn
.text:0040D3EA ; ---------------------------------------------------------------------------
.text:0040D3EB                 align 10h
.text:0040D3F0                 sub     esp, 1Ch
.text:0040D3F3                 mov     edx, [esp+20h]
.text:0040D3F7                 mov     [esp+10h], ebx
.text:0040D3FB                 xor     ebx, ebx
.text:0040D3FD                 mov     [esp+14h], esi
.text:0040D401                 mov     [esp+18h], edi
.text:0040D405                 mov     [esp], edx
.text:0040D408                 call    sub_419090
.text:0040D40D                 mov     edx, [esp+24h]
.text:0040D411                 mov     edi, eax
.text:0040D413                 mov     [esp], edx
.text:0040D416                 call    sub_419090
.text:0040D41B                 mov     [esp+4], eax
.text:0040D41F                 mov     esi, eax
.text:0040D421                 mov     [esp], edi
.text:0040D424                 call    _stricmp_0
.text:0040D429                 mov     [esp], edi
.text:0040D42C                 test    eax, eax
.text:0040D42E                 setz    bl
.text:0040D431                 call    free
.text:0040D436                 mov     [esp], esi
.text:0040D439                 call    free
.text:0040D43E                 mov     eax, ebx
.text:0040D440                 mov     esi, [esp+14h]
.text:0040D444                 mov     ebx, [esp+10h]
.text:0040D448                 mov     edi, [esp+18h]
.text:0040D44C                 add     esp, 1Ch
.text:0040D44F                 retn
.text:0040D450 ; ---------------------------------------------------------------------------
.text:0040D450                 xor     eax, eax
.text:0040D452                 retn
.text:0040D452 ; ---------------------------------------------------------------------------
.text:0040D453 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040D487↓o
.text:0040D460 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040D496↓o
.text:0040D470 ; ---------------------------------------------------------------------------
.text:0040D470                 sub     esp, 1Ch
.text:0040D473                 mov     [esp+10h], ebx
.text:0040D477                 mov     ebx, [esp+20h]
.text:0040D47B                 mov     [esp+18h], edi
.text:0040D47F                 mov     edi, [esp+24h]
.text:0040D483                 mov     [esp+14h], esi
.text:0040D487                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040D48E                 call    GetModuleHandleA
.text:0040D493                 sub     esp, 4
.text:0040D496                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040D49E                 mov     [esp], eax
.text:0040D4A1                 call    GetProcAddress
.text:0040D4A6                 sub     esp, 8
.text:0040D4A9                 test    eax, eax
.text:0040D4AB                 jz      short loc_40D4C3
.text:0040D4AD                 mov     dword ptr [esp+8], 104h
.text:0040D4B5                 mov     [esp+4], ebx
.text:0040D4B9                 mov     [esp], edi
.text:0040D4BC                 call    eax
.text:0040D4BE                 sub     esp, 0Ch
.text:0040D4C1                 mov     esi, eax
.text:0040D4C3
.text:0040D4C3 loc_40D4C3:                             ; CODE XREF: .text:0040D4AB↑j
.text:0040D4C3                 test    esi, esi
.text:0040D4C5                 jz      short loc_40D4E0
.text:0040D4C7
.text:0040D4C7 loc_40D4C7:                             ; CODE XREF: .text:0040D4FB↓j
.text:0040D4C7                 mov     eax, ebx
.text:0040D4C9                 mov     esi, [esp+14h]
.text:0040D4CD                 mov     ebx, [esp+10h]
.text:0040D4D1                 mov     edi, [esp+18h]
.text:0040D4D5                 add     esp, 1Ch
.text:0040D4D8                 retn
.text:0040D4D8 ; ---------------------------------------------------------------------------
.text:0040D4D9                 align 10h
.text:0040D4E0
.text:0040D4E0 loc_40D4E0:                             ; CODE XREF: .text:0040D4C5↑j
.text:0040D4E0                 call    sub_418DB0
.text:0040D4E5                 mov     [esp], ebx
.text:0040D4E8                 mov     [esp+4], edi
.text:0040D4EC                 call    strcpy
.text:0040D4F1                 mov     [esp], ebx
.text:0040D4F4                 call    _win32_longpath
.text:0040D4F9                 mov     ebx, eax
.text:0040D4FB                 jmp     short loc_40D4C7
.text:0040D4FB ; ---------------------------------------------------------------------------
.text:0040D4FD                 align 10h
.text:0040D500                 sub     esp, 1Ch
.text:0040D503                 mov     [esp+18h], edi
.text:0040D507                 mov     edi, [esp+20h]
.text:0040D50B                 mov     [esp+10h], ebx
.text:0040D50F                 mov     [esp+14h], esi
.text:0040D513                 mov     dword ptr [esp+8], 0
.text:0040D51B                 mov     dword ptr [esp+4], 0
.text:0040D523                 mov     [esp], edi
.text:0040D526                 call    GetShortPathNameA
.text:0040D52B                 sub     esp, 0Ch
.text:0040D52E                 mov     ebx, eax
.text:0040D530                 test    eax, eax
.text:0040D532                 jz      short loc_40D580
.text:0040D534                 lea     edx, [eax+1]
.text:0040D537                 mov     [esp], edx
.text:0040D53A                 call    malloc
.text:0040D53F                 test    eax, eax
.text:0040D541                 mov     esi, eax
.text:0040D543                 jz      short loc_40D580
.text:0040D545                 mov     [esp+8], ebx
.text:0040D549                 mov     [esp+4], eax
.text:0040D54D                 mov     [esp], edi
.text:0040D550                 call    GetShortPathNameA
.text:0040D555                 sub     esp, 0Ch
.text:0040D558                 mov     edx, esi
.text:0040D55A                 test    eax, eax
.text:0040D55C                 jz      short loc_40D572
.text:0040D55E                 mov     esi, esi
.text:0040D560
.text:0040D560 loc_40D560:                             ; CODE XREF: .text:0040D590↓j
.text:0040D560                 mov     ebx, [esp+10h]
.text:0040D564                 mov     eax, edx
.text:0040D566                 mov     esi, [esp+14h]
.text:0040D56A                 mov     edi, [esp+18h]
.text:0040D56E                 add     esp, 1Ch
.text:0040D571                 retn
.text:0040D572 ; ---------------------------------------------------------------------------
.text:0040D572
.text:0040D572 loc_40D572:                             ; CODE XREF: .text:0040D55C↑j
.text:0040D572                 mov     [esp], esi
.text:0040D575                 call    free
.text:0040D57A                 lea     esi, [esi+0]
.text:0040D580
.text:0040D580 loc_40D580:                             ; CODE XREF: .text:0040D532↑j
.text:0040D580                                         ; .text:0040D543↑j
.text:0040D580                 call    sub_40D830
.text:0040D585                 mov     esi, eax
.text:0040D587                 call    _errno
.text:0040D58C                 mov     [eax], esi
.text:0040D58E                 mov     edx, edi
.text:0040D590                 jmp     short loc_40D560
.text:0040D590 ; ---------------------------------------------------------------------------
.text:0040D592                 align 10h
.text:0040D5A0
.text:0040D5A0 ; =============== S U B R O U T I N E =======================================
.text:0040D5A0
.text:0040D5A0 ; Attributes: info_from_lumina
.text:0040D5A0
.text:0040D5A0 ___get_errno    proc near               ; CODE XREF: sub_40D830+B↓p
.text:0040D5A0
.text:0040D5A0 arg_0           = dword ptr  4
.text:0040D5A0
.text:0040D5A0                 mov     eax, [esp+arg_0]
.text:0040D5A4                 cmp     eax, 53h ; 'S'
.text:0040D5A7                 jg      loc_40D6A0
.text:0040D5AD                 cmp     eax, 52h ; 'R'
.text:0040D5B0                 jge     short loc_40D602
.text:0040D5B2                 cmp     eax, 0Fh
.text:0040D5B5                 jz      short loc_40D5D0
.text:0040D5B7                 cmp     eax, 0Fh
.text:0040D5BA                 jg      short loc_40D630
.text:0040D5BC                 cmp     eax, 9
.text:0040D5BF                 jg      short loc_40D610
.text:0040D5C1                 cmp     eax, 7
.text:0040D5C4                 jge     short loc_40D609
.text:0040D5C6                 cmp     eax, 3
.text:0040D5C9                 jg      short loc_40D5EA
.text:0040D5CB                 cmp     eax, 2
.text:0040D5CE                 jl      short loc_40D5E3
.text:0040D5D0
.text:0040D5D0 loc_40D5D0:                             ; CODE XREF: ___get_errno+15↑j
.text:0040D5D0                                         ; ___get_errno+9D↓j ...
.text:0040D5D0                 mov     edx, 2
.text:0040D5D5                 lea     esi, [esi+0]
.text:0040D5D9                 lea     edi, [edi+0]
.text:0040D5E0
.text:0040D5E0 loc_40D5E0:                             ; CODE XREF: ___get_errno+48↓j
.text:0040D5E0                                         ; ___get_errno+59↓j ...
.text:0040D5E0                 mov     eax, edx
.text:0040D5E2                 retn
.text:0040D5E3 ; ---------------------------------------------------------------------------
.text:0040D5E3
.text:0040D5E3 loc_40D5E3:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040D5E3                                         ; ___get_errno+78↓j ...
.text:0040D5E3                 mov     edx, 16h
.text:0040D5E8                 jmp     short loc_40D5E0
.text:0040D5EA ; ---------------------------------------------------------------------------
.text:0040D5EA
.text:0040D5EA loc_40D5EA:                             ; CODE XREF: ___get_errno+29↑j
.text:0040D5EA                 cmp     eax, 5
.text:0040D5ED                 jz      short loc_40D602
.text:0040D5EF                 cmp     eax, 5
.text:0040D5F2                 jg      short loc_40D5FB
.text:0040D5F4                 mov     edx, 18h
.text:0040D5F9                 jmp     short loc_40D5E0
.text:0040D5FB ; ---------------------------------------------------------------------------
.text:0040D5FB
.text:0040D5FB loc_40D5FB:                             ; CODE XREF: ___get_errno+52↑j
.text:0040D5FB                                         ; ___get_errno+180↓j
.text:0040D5FB                 mov     edx, 9
.text:0040D600                 jmp     short loc_40D5E0
.text:0040D602 ; ---------------------------------------------------------------------------
.text:0040D602
.text:0040D602 loc_40D602:                             ; CODE XREF: ___get_errno+10↑j
.text:0040D602                                         ; ___get_errno+4D↑j ...
.text:0040D602                 mov     edx, 0Dh
.text:0040D607                 jmp     short loc_40D5E0
.text:0040D609 ; ---------------------------------------------------------------------------
.text:0040D609
.text:0040D609 loc_40D609:                             ; CODE XREF: ___get_errno+24↑j
.text:0040D609                                         ; ___get_errno+73↓j ...
.text:0040D609                 mov     edx, 0Ch
.text:0040D60E                 jmp     short loc_40D5E0
.text:0040D610 ; ---------------------------------------------------------------------------
.text:0040D610
.text:0040D610 loc_40D610:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040D610                 cmp     eax, 0Dh
.text:0040D613                 jg      short loc_40D609
.text:0040D615                 cmp     eax, 0Ch
.text:0040D618                 jge     short loc_40D5E3
.text:0040D61A                 cmp     eax, 0Ah
.text:0040D61D                 mov     edx, 7
.text:0040D622                 jz      short loc_40D5E0
.text:0040D624                 cmp     eax, 0Bh
.text:0040D627                 jnz     short loc_40D5E3
.text:0040D629
.text:0040D629 loc_40D629:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040D629                 mov     edx, 8
.text:0040D62E                 jmp     short loc_40D5E0
.text:0040D630 ; ---------------------------------------------------------------------------
.text:0040D630
.text:0040D630 loc_40D630:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040D630                 cmp     eax, 22h ; '"'
.text:0040D633                 jg      short loc_40D664
.text:0040D635                 cmp     eax, 16h
.text:0040D638                 jge     short loc_40D602
.text:0040D63A                 cmp     eax, 12h
.text:0040D63D                 jz      short loc_40D5D0
.text:0040D63F                 cmp     eax, 12h
.text:0040D642                 jg      short loc_40D655
.text:0040D644                 cmp     eax, 10h
.text:0040D647                 jz      short loc_40D602
.text:0040D649                 mov     edx, 12h
.text:0040D64E                 cmp     eax, 11h
.text:0040D651
.text:0040D651 loc_40D651:                             ; CODE XREF: ___get_errno+172↓j
.text:0040D651                                         ; ___get_errno+24C↓j ...
.text:0040D651                 jnz     short loc_40D5E3
.text:0040D653                 jmp     short loc_40D5E0
.text:0040D655 ; ---------------------------------------------------------------------------
.text:0040D655
.text:0040D655 loc_40D655:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040D655                 cmp     eax, 14h
.text:0040D658                 jle     short loc_40D602
.text:0040D65A
.text:0040D65A loc_40D65A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040D65A                 mov     edx, 10h
.text:0040D65F                 jmp     loc_40D5E0
.text:0040D664 ; ---------------------------------------------------------------------------
.text:0040D664
.text:0040D664 loc_40D664:                             ; CODE XREF: ___get_errno+93↑j
.text:0040D664                 cmp     eax, 41h ; 'A'
.text:0040D667                 jz      short loc_40D602
.text:0040D669                 cmp     eax, 41h ; 'A'
.text:0040D66C                 jg      short loc_40D681
.text:0040D66E                 cmp     eax, 24h ; '$'
.text:0040D671                 jz      short loc_40D602
.text:0040D673                 cmp     eax, 35h ; '5'
.text:0040D676                 jnz     loc_40D5E3
.text:0040D67C                 jmp     loc_40D5D0
.text:0040D681 ; ---------------------------------------------------------------------------
.text:0040D681
.text:0040D681 loc_40D681:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040D681                 cmp     eax, 43h ; 'C'
.text:0040D684                 jz      loc_40D5D0
.text:0040D68A                 cmp     eax, 50h ; 'P'
.text:0040D68D                 jnz     loc_40D5E3
.text:0040D693
.text:0040D693 loc_40D693:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040D693                 mov     edx, 11h
.text:0040D698                 jmp     loc_40D5E0
.text:0040D698 ; ---------------------------------------------------------------------------
.text:0040D69D                 align 10h
.text:0040D6A0
.text:0040D6A0 loc_40D6A0:                             ; CODE XREF: ___get_errno+7↑j
.text:0040D6A0                 cmp     eax, 0A1h ; '¡'
.text:0040D6A5                 jz      loc_40D5D0
.text:0040D6AB                 cmp     eax, 0A1h ; '¡'
.text:0040D6B0                 jg      loc_40D760
.text:0040D6B6                 cmp     eax, 81h
.text:0040D6BB                 jg      short loc_40D725
.text:0040D6BD                 cmp     eax, 80h ; '€'
.text:0040D6C2                 mov     edx, 0Ah
.text:0040D6C7                 jge     loc_40D5E0
.text:0040D6CD                 cmp     eax, 6Ch ; 'l'
.text:0040D6D0                 jz      loc_40D602
.text:0040D6D6                 cmp     eax, 6Ch ; 'l'
.text:0040D6D9                 jg      short loc_40D6F7
.text:0040D6DB                 cmp     eax, 57h ; 'W'
.text:0040D6DE                 jz      loc_40D5E3
.text:0040D6E4                 cmp     eax, 59h ; 'Y'
.text:0040D6E7                 jnz     loc_40D5E3
.text:0040D6ED
.text:0040D6ED loc_40D6ED:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040D6ED                                         ; ___get_errno+23C↓j
.text:0040D6ED                 mov     edx, 0Bh
.text:0040D6F2                 jmp     loc_40D5E0
.text:0040D6F7 ; ---------------------------------------------------------------------------
.text:0040D6F7
.text:0040D6F7 loc_40D6F7:                             ; CODE XREF: ___get_errno+139↑j
.text:0040D6F7                 cmp     eax, 70h ; 'p'
.text:0040D6FA                 mov     edx, 1Ch
.text:0040D6FF                 jz      loc_40D5E0
.text:0040D705                 cmp     eax, 70h ; 'p'
.text:0040D708                 jg      short loc_40D717
.text:0040D70A                 mov     edx, 20h ; ' '
.text:0040D70F                 cmp     eax, 6Dh ; 'm'
.text:0040D712                 jmp     loc_40D651
.text:0040D717 ; ---------------------------------------------------------------------------
.text:0040D717
.text:0040D717 loc_40D717:                             ; CODE XREF: ___get_errno+168↑j
.text:0040D717                 cmp     eax, 72h ; 'r'
.text:0040D71A
.text:0040D71A loc_40D71A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040D71A                 jnz     loc_40D5E3
.text:0040D720                 jmp     loc_40D5FB
.text:0040D725 ; ---------------------------------------------------------------------------
.text:0040D725
.text:0040D725 loc_40D725:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040D725                 cmp     eax, 84h ; '„'
.text:0040D72A                 jz      loc_40D602
.text:0040D730                 cmp     eax, 84h ; '„'
.text:0040D735                 jg      short loc_40D73E
.text:0040D737                 cmp     eax, 82h ; '‚'
.text:0040D73C                 jmp     short loc_40D71A
.text:0040D73E ; ---------------------------------------------------------------------------
.text:0040D73E
.text:0040D73E loc_40D73E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040D73E                 cmp     eax, 91h ; '‘'
.text:0040D743                 mov     edx, 29h ; ')'
.text:0040D748                 jz      loc_40D5E0
.text:0040D74E                 cmp     eax, 9Eh ; 'ž'
.text:0040D753
.text:0040D753 loc_40D753:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040D753                 jnz     loc_40D5E3
.text:0040D759                 jmp     loc_40D602
.text:0040D759 ; ---------------------------------------------------------------------------
.text:0040D75E                 align 10h
.text:0040D760
.text:0040D760 loc_40D760:                             ; CODE XREF: ___get_errno+110↑j
.text:0040D760                 cmp     eax, 0CEh ; 'Î'
.text:0040D765                 jz      loc_40D5D0
.text:0040D76B                 cmp     eax, 0CEh ; 'Î'
.text:0040D770                 jg      short loc_40D7C0
.text:0040D772                 cmp     eax, 0AAh ; 'ª'
.text:0040D777                 jz      loc_40D65A
.text:0040D77D                 cmp     eax, 0AAh ; 'ª'
.text:0040D782                 jg      short loc_40D796
.text:0040D784                 cmp     eax, 0A4h ; '¤'
.text:0040D789                 jz      loc_40D6ED
.text:0040D78F                 cmp     eax, 0A7h ; '§'
.text:0040D794                 jmp     short loc_40D753
.text:0040D796 ; ---------------------------------------------------------------------------
.text:0040D796
.text:0040D796 loc_40D796:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040D796                 cmp     eax, 0B7h ; '·'
.text:0040D79B                 jz      loc_40D693
.text:0040D7A1                 cmp     eax, 0B7h ; '·'
.text:0040D7A6                 jl      loc_40D5E3
.text:0040D7AC                 sub     eax, 0BCh ; '¼'
.text:0040D7B1                 cmp     eax, 0Eh
.text:0040D7B4                 ja      loc_40D5E3
.text:0040D7BA                 jmp     loc_40D629
.text:0040D7BA ; ---------------------------------------------------------------------------
.text:0040D7BF                 align 10h
.text:0040D7C0
.text:0040D7C0 loc_40D7C0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040D7C0                 cmp     eax, 46Bh
.text:0040D7C5                 mov     edx, 24h ; '$'
.text:0040D7CA                 jz      loc_40D5E0
.text:0040D7D0                 cmp     eax, 46Bh
.text:0040D7D5                 jg      short loc_40D7F1
.text:0040D7D7                 cmp     eax, 0D7h ; '×'
.text:0040D7DC                 jz      loc_40D6ED
.text:0040D7E2                 mov     edx, 5
.text:0040D7E7                 cmp     eax, 45Dh
.text:0040D7EC                 jmp     loc_40D651
.text:0040D7F1 ; ---------------------------------------------------------------------------
.text:0040D7F1
.text:0040D7F1 loc_40D7F1:                             ; CODE XREF: ___get_errno+235↑j
.text:0040D7F1                 cmp     eax, 4D5h
.text:0040D7F6                 mov     edx, 4
.text:0040D7FB                 jz      loc_40D5E0
.text:0040D801                 cmp     eax, 4D5h
.text:0040D806                 jg      short loc_40D817
.text:0040D808                 mov     edx, 13h
.text:0040D80D                 cmp     eax, 4B0h
.text:0040D812                 jmp     loc_40D651
.text:0040D817 ; ---------------------------------------------------------------------------
.text:0040D817
.text:0040D817 loc_40D817:                             ; CODE XREF: ___get_errno+266↑j
.text:0040D817                 cmp     eax, 718h
.text:0040D81C                 jnz     loc_40D5E3
.text:0040D822                 jmp     loc_40D609
.text:0040D822 ___get_errno    endp
.text:0040D822
.text:0040D822 ; ---------------------------------------------------------------------------
.text:0040D827                 align 10h
.text:0040D830
.text:0040D830 ; =============== S U B R O U T I N E =======================================
.text:0040D830
.text:0040D830
.text:0040D830 sub_40D830      proc near               ; CODE XREF: sub_40C880:loc_40C9DF↑p
.text:0040D830                                         ; sub_40CB30:loc_40CBC6↑p ...
.text:0040D830
.text:0040D830 var_C           = dword ptr -0Ch
.text:0040D830
.text:0040D830                 sub     esp, 0Ch
.text:0040D833                 call    GetLastError
.text:0040D838                 mov     [esp+0Ch+var_C], eax
.text:0040D83B                 call    ___get_errno
.text:0040D840                 add     esp, 0Ch
.text:0040D843                 retn
.text:0040D843 sub_40D830      endp
.text:0040D843
.text:0040D843 ; ---------------------------------------------------------------------------
.text:0040D844                 align 10h
.text:0040D850 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:0040D850                                         ; DATA XREF: .data:off_41E0E4↓o
.text:0040D864 ; const CHAR LibFileName[]
.text:0040D864 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_40D890+11↓o
.text:0040D864                                         ; sub_40DA00+C↓o ...
.text:0040D871 ; const CHAR ProcName[]
.text:0040D871 ProcName        db 'GetFileAttributesExA',0
.text:0040D871                                         ; DATA XREF: sub_40D890+28↓o
.text:0040D886                 align 10h
.text:0040D890
.text:0040D890 ; =============== S U B R O U T I N E =======================================
.text:0040D890
.text:0040D890
.text:0040D890 ; int __cdecl sub_40D890(LPCSTR lpFileName, int)
.text:0040D890 sub_40D890      proc near               ; CODE XREF: .text:0040EA34↓p
.text:0040D890                                         ; sub_40EE30+37↓p
.text:0040D890
.text:0040D890 lpModuleName    = dword ptr -18Ch
.text:0040D890 lpProcName      = dword ptr -188h
.text:0040D890 var_184         = dword ptr -184h
.text:0040D890 var_170         = dword ptr -170h
.text:0040D890 var_164         = dword ptr -164h
.text:0040D890 hModule         = dword ptr -160h
.text:0040D890 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040D890 lpFileName      = dword ptr  4
.text:0040D890 arg_4           = dword ptr  8
.text:0040D890
.text:0040D890                 push    ebp
.text:0040D891                 push    edi
.text:0040D892                 push    esi
.text:0040D893                 push    ebx
.text:0040D894                 sub     esp, 17Ch
.text:0040D89A                 mov     ebx, [esp+18Ch+arg_4]
.text:0040D8A1                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:0040D8A8                 call    GetModuleHandleA
.text:0040D8AD                 sub     esp, 4
.text:0040D8B0                 mov     [esp+18Ch+hModule], eax
.text:0040D8B4                 mov     edx, [esp+18Ch+hModule]
.text:0040D8B8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:0040D8C0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:0040D8C3                 call    GetProcAddress
.text:0040D8C8                 sub     esp, 8
.text:0040D8CB                 mov     ebp, eax
.text:0040D8CD                 mov     eax, [esp+18Ch+lpFileName]
.text:0040D8D4                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:0040D8D7                 call    GetFileAttributesA
.text:0040D8DC                 sub     esp, 4
.text:0040D8DF                 mov     [esp+18Ch+var_164], eax
.text:0040D8E3                 xor     eax, eax
.text:0040D8E5                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040D8EA                 jz      short loc_40D941
.text:0040D8EC                 cld
.text:0040D8ED                 mov     ecx, 50h ; 'P'
.text:0040D8F2                 lea     esi, [esp+18Ch+FindFileData]
.text:0040D8F6                 mov     edi, esi
.text:0040D8F8                 test    ebp, ebp
.text:0040D8FA                 rep stosd
.text:0040D8FC                 mov     [esp+18Ch+var_170], 0
.text:0040D904                 jz      short loc_40D925
.text:0040D906                 mov     [esp+18Ch+var_184], ebx
.text:0040D90A                 mov     ecx, [esp+18Ch+lpFileName]
.text:0040D911                 mov     [esp+18Ch+lpProcName], 0
.text:0040D919                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040D91C                 call    ebp
.text:0040D91E                 sub     esp, 0Ch
.text:0040D921                 mov     [esp+18Ch+var_170], eax
.text:0040D925
.text:0040D925 loc_40D925:                             ; CODE XREF: sub_40D890+74↑j
.text:0040D925                 mov     eax, [esp+18Ch+var_170]
.text:0040D929                 test    eax, eax
.text:0040D92B                 jz      short loc_40D950
.text:0040D92D
.text:0040D92D loc_40D92D:                             ; CODE XREF: sub_40D890+131↓j
.text:0040D92D                                         ; sub_40D890+14B↓j
.text:0040D92D                 mov     ebx, [esp+18Ch+hModule]
.text:0040D931                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:0040D934                 call    FreeLibrary
.text:0040D939                 sub     esp, 4
.text:0040D93C                 mov     eax, 1
.text:0040D941
.text:0040D941 loc_40D941:                             ; CODE XREF: sub_40D890+5A↑j
.text:0040D941                 add     esp, 17Ch
.text:0040D947                 pop     ebx
.text:0040D948                 pop     esi
.text:0040D949                 pop     edi
.text:0040D94A                 pop     ebp
.text:0040D94B                 retn
.text:0040D94B ; ---------------------------------------------------------------------------
.text:0040D94C                 align 10h
.text:0040D950
.text:0040D950 loc_40D950:                             ; CODE XREF: sub_40D890+9B↑j
.text:0040D950                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:0040D954                 mov     edx, [esp+18Ch+lpFileName]
.text:0040D95B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040D95E                 call    FindFirstFileA
.text:0040D963                 sub     esp, 8
.text:0040D966                 xor     ecx, ecx
.text:0040D968                 cmp     eax, 0FFFFFFFFh
.text:0040D96B                 setnz   cl
.text:0040D96E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:0040D972                 mov     [ebx], edi
.text:0040D974                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:0040D978                 mov     [esp+18Ch+var_170], ecx
.text:0040D97C                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:0040D980                 mov     [ebx+8], esi
.text:0040D983                 mov     [ebx+4], ecx
.text:0040D986                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040D98A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040D98E                 mov     [ebx+0Ch], ebp
.text:0040D991                 mov     [ebx+10h], edi
.text:0040D994                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:0040D998                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040D99C                 mov     [ebx+18h], esi
.text:0040D99F                 mov     [ebx+14h], ecx
.text:0040D9A2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:0040D9A6                 mov     [ebx+1Ch], ebp
.text:0040D9A9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040D9AD                 mov     [ebx+20h], edi
.text:0040D9B0                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:0040D9B3                 call    FindClose
.text:0040D9B8                 sub     esp, 4
.text:0040D9BB                 mov     esi, [esp+18Ch+var_170]
.text:0040D9BF                 test    esi, esi
.text:0040D9C1                 jnz     loc_40D92D
.text:0040D9C7                 cld
.text:0040D9C8                 mov     eax, [esp+18Ch+var_170]
.text:0040D9CC                 mov     ecx, 9
.text:0040D9D1                 mov     edi, ebx
.text:0040D9D3                 rep stosd
.text:0040D9D5                 mov     ebp, [esp+18Ch+var_164]
.text:0040D9D9                 mov     [ebx], ebp
.text:0040D9DB                 jmp     loc_40D92D
.text:0040D9DB sub_40D890      endp
.text:0040D9DB
.text:0040D9DB ; ---------------------------------------------------------------------------
.text:0040D9E0 ; const CHAR aFindfirstfilee[]
.text:0040D9E0 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_40DA00+23↓o
.text:0040D9F1 ; const char asc_40D9F1[]
.text:0040D9F1 asc_40D9F1      db '\*',0               ; DATA XREF: sub_40DA00:loc_40DA8D↓o
.text:0040D9F4                 align 10h
.text:0040DA00
.text:0040DA00 ; =============== S U B R O U T I N E =======================================
.text:0040DA00
.text:0040DA00
.text:0040DA00 ; int __cdecl sub_40DA00(char *Str)
.text:0040DA00 sub_40DA00      proc near               ; CODE XREF: .text:0040EB33↓p
.text:0040DA00                                         ; sub_40EE30+3FA↓p ...
.text:0040DA00
.text:0040DA00 lpLibFileName   = dword ptr -18Ch
.text:0040DA00 lpProcName      = dword ptr -188h
.text:0040DA00 var_184         = dword ptr -184h
.text:0040DA00 var_180         = dword ptr -180h
.text:0040DA00 var_17C         = dword ptr -17Ch
.text:0040DA00 var_178         = dword ptr -178h
.text:0040DA00 var_164         = dword ptr -164h
.text:0040DA00 hModule         = dword ptr -160h
.text:0040DA00 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040DA00 Str             = dword ptr  4
.text:0040DA00
.text:0040DA00                 push    ebp
.text:0040DA01                 push    edi
.text:0040DA02                 xor     edi, edi
.text:0040DA04                 push    esi
.text:0040DA05                 push    ebx
.text:0040DA06                 sub     esp, 17Ch
.text:0040DA0C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:0040DA13                 call    LoadLibraryA
.text:0040DA18                 sub     esp, 4
.text:0040DA1B                 mov     [esp+18Ch+hModule], eax
.text:0040DA1F                 mov     ecx, [esp+18Ch+hModule]
.text:0040DA23                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040DA2B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040DA2E                 call    GetProcAddress
.text:0040DA33                 sub     esp, 8
.text:0040DA36                 mov     edx, [esp+18Ch+Str]
.text:0040DA3D                 mov     [esp+18Ch+var_164], eax
.text:0040DA41                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:0040DA44                 call    strlen
.text:0040DA49                 lea     edx, [eax+5]
.text:0040DA4C                 mov     ebx, eax
.text:0040DA4E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:0040DA51                 call    malloc
.text:0040DA56                 mov     esi, eax
.text:0040DA58                 test    esi, esi
.text:0040DA5A                 mov     eax, 1
.text:0040DA5F                 jz      loc_40DB3D
.text:0040DA65                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040DA68                 mov     ebp, [esp+18Ch+Str]
.text:0040DA6F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:0040DA73                 call    strcpy
.text:0040DA78                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040DA7D                 cmp     al, 2Fh ; '/'
.text:0040DA7F                 jz      loc_40DB6B
.text:0040DA85                 cmp     al, 5Ch ; '\'
.text:0040DA87                 jz      loc_40DB6B
.text:0040DA8D
.text:0040DA8D loc_40DA8D:                             ; CODE XREF: sub_40DA00+170↓j
.text:0040DA8D                 mov     [esp+18Ch+lpProcName], offset asc_40D9F1 ; "\\*"
.text:0040DA95                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040DA98                 call    strcat
.text:0040DA9D                 mov     eax, [esp+18Ch+var_164]
.text:0040DAA1                 test    eax, eax
.text:0040DAA3                 jz      loc_40DB65
.text:0040DAA9                 mov     [esp+18Ch+var_178], 0
.text:0040DAB1                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040DAB5                 mov     [esp+18Ch+var_17C], 0
.text:0040DABD                 mov     [esp+18Ch+var_180], 1
.text:0040DAC5                 mov     [esp+18Ch+var_184], ebp
.text:0040DAC9                 mov     [esp+18Ch+lpProcName], 0
.text:0040DAD1                 mov     [esp+18Ch+lpLibFileName], esi
.text:0040DAD4                 call    [esp+18Ch+var_164]
.text:0040DAD8                 sub     esp, 18h
.text:0040DADB                 mov     ebx, eax
.text:0040DADD                 cmp     eax, 0FFFFFFFFh
.text:0040DAE0                 jz      short loc_40DB48
.text:0040DAE2                 lea     esi, [esi+0]
.text:0040DAE9                 lea     edi, [edi+0]
.text:0040DAF0
.text:0040DAF0 loc_40DAF0:                             ; CODE XREF: sub_40DA00+109↓j
.text:0040DAF0                                         ; sub_40DA00+161↓j
.text:0040DAF0                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:0040DAF5                 jz      short loc_40DAF8
.text:0040DAF7                 inc     edi
.text:0040DAF8
.text:0040DAF8 loc_40DAF8:                             ; CODE XREF: sub_40DA00+F5↑j
.text:0040DAF8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040DAFC                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040DAFF                 call    FindNextFileA
.text:0040DB04                 sub     esp, 8
.text:0040DB07                 test    eax, eax
.text:0040DB09                 jnz     short loc_40DAF0
.text:0040DB0B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040DB0E                 call    FindClose
.text:0040DB13                 sub     esp, 4
.text:0040DB16                 mov     esi, [esp+18Ch+hModule]
.text:0040DB1A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040DB1D                 call    FreeLibrary
.text:0040DB22                 sub     esp, 4
.text:0040DB25                 mov     ebx, [esp+18Ch+Str]
.text:0040DB2C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040DB2F                 call    sub_419690
.text:0040DB34                 test    eax, eax
.text:0040DB36                 jz      short loc_40DB3B
.text:0040DB38                 add     edi, 2
.text:0040DB3B
.text:0040DB3B loc_40DB3B:                             ; CODE XREF: sub_40DA00+136↑j
.text:0040DB3B                 mov     eax, edi
.text:0040DB3D
.text:0040DB3D loc_40DB3D:                             ; CODE XREF: sub_40DA00+5F↑j
.text:0040DB3D                                         ; sub_40DA00+163↓j
.text:0040DB3D                 add     esp, 17Ch
.text:0040DB43                 pop     ebx
.text:0040DB44                 pop     esi
.text:0040DB45                 pop     edi
.text:0040DB46                 pop     ebp
.text:0040DB47                 retn
.text:0040DB48 ; ---------------------------------------------------------------------------
.text:0040DB48
.text:0040DB48 loc_40DB48:                             ; CODE XREF: sub_40DA00+E0↑j
.text:0040DB48                                         ; sub_40DA00+169↓j
.text:0040DB48                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040DB4C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040DB4F                 call    FindFirstFileA
.text:0040DB54                 mov     ebx, eax
.text:0040DB56                 sub     esp, 8
.text:0040DB59                 cmp     ebx, 0FFFFFFFFh
.text:0040DB5C                 mov     eax, 2
.text:0040DB61                 jnz     short loc_40DAF0
.text:0040DB63                 jmp     short loc_40DB3D
.text:0040DB65 ; ---------------------------------------------------------------------------
.text:0040DB65
.text:0040DB65 loc_40DB65:                             ; CODE XREF: sub_40DA00+A3↑j
.text:0040DB65                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040DB69                 jmp     short loc_40DB48
.text:0040DB6B ; ---------------------------------------------------------------------------
.text:0040DB6B
.text:0040DB6B loc_40DB6B:                             ; CODE XREF: sub_40DA00+7F↑j
.text:0040DB6B                                         ; sub_40DA00+87↑j
.text:0040DB6B                 mov     byte ptr [ebx+esi-1], 0
.text:0040DB70                 jmp     loc_40DA8D
.text:0040DB70 sub_40DA00      endp
.text:0040DB70
.text:0040DB70 ; ---------------------------------------------------------------------------
.text:0040DB75                 align 10h
.text:0040DB80
.text:0040DB80 ; =============== S U B R O U T I N E =======================================
.text:0040DB80
.text:0040DB80
.text:0040DB80 ; int __cdecl sub_40DB80(HANDLE hNamedPipe, int)
.text:0040DB80 sub_40DB80      proc near               ; CODE XREF: sub_40CAE0+2817↓p
.text:0040DB80                                         ; sub_41ACC0+52↓j
.text:0040DB80
.text:0040DB80 hFile           = dword ptr -0ECh
.text:0040DB80 lpFileInformation= dword ptr -0E8h
.text:0040DB80 nBufferSize     = dword ptr -0E4h
.text:0040DB80 lpBytesRead     = dword ptr -0E0h
.text:0040DB80 lpTotalBytesAvail= dword ptr -0DCh
.text:0040DB80 lpBytesLeftThisMessage= dword ptr -0D8h
.text:0040DB80 var_C4          = dword ptr -0C4h
.text:0040DB80 var_C0          = dword ptr -0C0h
.text:0040DB80 var_BC          = dword ptr -0BCh
.text:0040DB80 var_B8          = dword ptr -0B8h
.text:0040DB80 var_B4          = dword ptr -0B4h
.text:0040DB80 var_B0          = dword ptr -0B0h
.text:0040DB80 var_AC          = dword ptr -0ACh
.text:0040DB80 var_A8          = dword ptr -0A8h
.text:0040DB80 TotalBytesAvail = dword ptr -0A0h
.text:0040DB80 var_9C          = dword ptr -9Ch
.text:0040DB80 var_98          = dword ptr -98h
.text:0040DB80 var_94          = dword ptr -94h
.text:0040DB80 var_90          = dword ptr -90h
.text:0040DB80 var_8C          = dword ptr -8Ch
.text:0040DB80 var_88          = dword ptr -88h
.text:0040DB80 var_84          = dword ptr -84h
.text:0040DB80 var_80          = dword ptr -80h
.text:0040DB80 var_7C          = dword ptr -7Ch
.text:0040DB80 var_78          = dword ptr -78h
.text:0040DB80 var_74          = dword ptr -74h
.text:0040DB80 var_70          = dword ptr -70h
.text:0040DB80 var_6C          = dword ptr -6Ch
.text:0040DB80 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:0040DB80 hNamedPipe      = dword ptr  4
.text:0040DB80 arg_4           = dword ptr  8
.text:0040DB80
.text:0040DB80                 push    ebp
.text:0040DB81                 mov     eax, 0FFFFFFFFh
.text:0040DB86                 push    edi
.text:0040DB87                 push    esi
.text:0040DB88                 push    ebx
.text:0040DB89                 sub     esp, 0DCh
.text:0040DB8F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:0040DB96                 mov     ebp, [esp+0ECh+arg_4]
.text:0040DB9D                 cmp     esi, 0FFFFFFFFh
.text:0040DBA0                 jz      loc_40DF21
.text:0040DBA6                 cld
.text:0040DBA7                 xor     eax, eax
.text:0040DBA9                 lea     ebx, [esp+0ECh+FileInformation]
.text:0040DBB0                 mov     ecx, 0Dh
.text:0040DBB5                 mov     edi, ebx
.text:0040DBB7                 rep stosd
.text:0040DBB9                 mov     dword ptr [ebp+18h], 1
.text:0040DBC0                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040DBC3                 call    GetFileType
.text:0040DBC8                 sub     esp, 4
.text:0040DBCB                 xor     edx, edx
.text:0040DBCD                 cmp     eax, 2
.text:0040DBD0                 jz      loc_40E000
.text:0040DBD6                 cmp     eax, 3
.text:0040DBD9                 jz      loc_40DFF0
.text:0040DBDF
.text:0040DBDF loc_40DBDF:                             ; CODE XREF: sub_40DB80+475↓j
.text:0040DBDF                                         ; sub_40DB80+485↓j
.text:0040DBDF                 or      [ebp+0], edx
.text:0040DBE2                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:0040DBE6                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040DBE9                 call    GetFileInformationByHandle
.text:0040DBEE                 sub     esp, 8
.text:0040DBF1                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040DBF8                 test    ecx, ecx
.text:0040DBFA                 jnz     short loc_40DC30
.text:0040DBFC                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040DC03                 test    edx, edx
.text:0040DC05                 jnz     short loc_40DC30
.text:0040DC07                 mov     edx, [ebp+0]
.text:0040DC0A                 and     edx, 0F000h
.text:0040DC10                 cmp     edx, 1000h
.text:0040DC16                 jz      loc_40DF86
.text:0040DC1C
.text:0040DC1C loc_40DC1C:                             ; CODE XREF: sub_40DB80+459↓j
.text:0040DC1C                                         ; sub_40DB80+465↓j
.text:0040DC1C                 test    ecx, ecx
.text:0040DC1E                 jnz     short loc_40DC30
.text:0040DC20                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040DC27                 test    edx, edx
.text:0040DC29                 jz      loc_40DF64
.text:0040DC2F                 nop
.text:0040DC30
.text:0040DC30 loc_40DC30:                             ; CODE XREF: sub_40DB80+7A↑j
.text:0040DC30                                         ; sub_40DB80+85↑j ...
.text:0040DC30                 cld
.text:0040DC31                 mov     esi, ebx
.text:0040DC33                 mov     dword ptr [ebp+14h], 0
.text:0040DC3A                 lea     edi, [esp+0ECh+var_9C]
.text:0040DC3E                 mov     ecx, 0Dh
.text:0040DC43                 rep movsd
.text:0040DC45                 xor     ebx, ebx
.text:0040DC47                 xor     edi, edi
.text:0040DC49                 mov     edx, [esp+0ECh+var_6C]
.text:0040DC50                 mov     esi, [esp+0ECh+var_70]
.text:0040DC54                 or      edx, ebx
.text:0040DC56                 mov     ebx, [esp+0ECh+var_9C]
.text:0040DC5A                 mov     [ebp+8], edx
.text:0040DC5D                 or      edi, esi
.text:0040DC5F                 xor     edx, edx
.text:0040DC61                 mov     [ebp+0Ch], edi
.text:0040DC64                 test    bl, 10h
.text:0040DC67                 mov     esi, [esp+0ECh+var_80]
.text:0040DC6B                 setz    dl
.text:0040DC6E                 mov     [ebp+10h], esi
.text:0040DC71                 dec     edx
.text:0040DC72                 and     edx, 0FFFFC000h
.text:0040DC78                 add     edx, 8000h
.text:0040DC7E                 or      edx, 124h
.text:0040DC84                 test    bl, 1
.text:0040DC87                 movzx   eax, dx
.text:0040DC8A                 jnz     short loc_40DC91
.text:0040DC8C                 or      eax, 92h
.text:0040DC91
.text:0040DC91 loc_40DC91:                             ; CODE XREF: sub_40DB80+10A↑j
.text:0040DC91                 or      [ebp+0], eax
.text:0040DC94                 xor     edx, edx
.text:0040DC96                 mov     ebx, [esp+0ECh+var_7C]
.text:0040DC9A                 mov     ecx, [esp+0ECh+var_78]
.text:0040DC9E                 mov     eax, edx
.text:0040DCA0                 xor     esi, esi
.text:0040DCA2                 mov     edx, [esp+0ECh+var_8C]
.text:0040DCA6                 mov     edi, ebx
.text:0040DCA8                 or      eax, edi
.text:0040DCAA                 mov     [esp+0ECh+var_A8], eax
.text:0040DCAE                 mov     ebx, ecx
.text:0040DCB0                 mov     edi, [esp+0ECh+var_74]
.text:0040DCB4                 or      ebx, esi
.text:0040DCB6                 mov     esi, [esp+0ECh+var_A8]
.text:0040DCBA                 mov     [esp+0ECh+var_AC], ebx
.text:0040DCBE                 xor     ebx, ebx
.text:0040DCC0                 mov     ecx, [esp+0ECh+var_AC]
.text:0040DCC4                 mov     [ebp+34h], esi
.text:0040DCC7                 mov     esi, [esp+0ECh+var_90]
.text:0040DCCB                 mov     [ebp+18h], edi
.text:0040DCCE                 xor     edi, edi
.text:0040DCD0                 or      esi, ebx
.text:0040DCD2                 mov     [ebp+30h], ecx
.text:0040DCD5                 or      edi, edx
.text:0040DCD7                 mov     edx, esi
.text:0040DCD9                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040DCE1                 sub     edx, 0D53E8000h
.text:0040DCE7                 mov     ebx, edi
.text:0040DCE9                 sbb     ebx, 19DB1DEh
.text:0040DCEF                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040DCF3                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040DCFB                 mov     [esp+0ECh+hFile], edx
.text:0040DCFE                 call    sub_41D180
.text:0040DD03                 mov     ecx, eax
.text:0040DD05                 shr     eax, 1Fh
.text:0040DD08                 dec     eax
.text:0040DD09                 and     ecx, eax
.text:0040DD0B                 mov     [ebp+38h], ecx
.text:0040DD0E                 mov     [esp+0ECh+hFile], esi
.text:0040DD11                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040DD15                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040DD1D                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040DD25                 call    sub_41D2A0
.text:0040DD2A                 lea     ebx, [eax+eax*4]
.text:0040DD2D                 xor     ecx, ecx
.text:0040DD2F                 lea     esi, [ebx+ebx*4]
.text:0040DD32                 shl     esi, 2
.text:0040DD35                 mov     edi, esi
.text:0040DD37                 shr     edi, 1Fh
.text:0040DD3A                 dec     edi
.text:0040DD3B                 and     edi, esi
.text:0040DD3D                 mov     [ebp+3Ch], edi
.text:0040DD40                 mov     esi, [esp+0ECh+var_98]
.text:0040DD44                 xor     edi, edi
.text:0040DD46                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040DD4E                 mov     edx, [esp+0ECh+var_94]
.text:0040DD52                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040DD5A                 or      esi, ecx
.text:0040DD5C                 or      edi, edx
.text:0040DD5E                 mov     edx, esi
.text:0040DD60                 mov     ecx, edi
.text:0040DD62                 sub     edx, 0D53E8000h
.text:0040DD68                 sbb     ecx, 19DB1DEh
.text:0040DD6E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040DD72                 mov     [esp+0ECh+hFile], edx
.text:0040DD75                 call    sub_41D180
.text:0040DD7A                 mov     ebx, eax
.text:0040DD7C                 shr     eax, 1Fh
.text:0040DD7F                 dec     eax
.text:0040DD80                 and     ebx, eax
.text:0040DD82                 mov     [ebp+48h], ebx
.text:0040DD85                 xor     ebx, ebx
.text:0040DD87                 mov     [esp+0ECh+hFile], esi
.text:0040DD8A                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040DD8E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040DD96                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040DD9E                 call    sub_41D2A0
.text:0040DDA3                 lea     ecx, [eax+eax*4]
.text:0040DDA6                 lea     esi, [ecx+ecx*4]
.text:0040DDA9                 shl     esi, 2
.text:0040DDAC                 mov     edi, esi
.text:0040DDAE                 shr     edi, 1Fh
.text:0040DDB1                 dec     edi
.text:0040DDB2                 and     edi, esi
.text:0040DDB4                 mov     [ebp+4Ch], edi
.text:0040DDB7                 mov     esi, [esp+0ECh+var_88]
.text:0040DDBB                 xor     edi, edi
.text:0040DDBD                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040DDC5                 mov     edx, [esp+0ECh+var_84]
.text:0040DDC9                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040DDD1                 or      esi, ebx
.text:0040DDD3                 or      edi, edx
.text:0040DDD5                 mov     edx, esi
.text:0040DDD7                 mov     ebx, edi
.text:0040DDD9                 sub     edx, 0D53E8000h
.text:0040DDDF                 sbb     ebx, 19DB1DEh
.text:0040DDE5                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040DDE9                 mov     [esp+0ECh+hFile], edx
.text:0040DDEC                 call    sub_41D180
.text:0040DDF1                 mov     ecx, eax
.text:0040DDF3                 shr     eax, 1Fh
.text:0040DDF6                 dec     eax
.text:0040DDF7                 and     ecx, eax
.text:0040DDF9                 mov     [ebp+40h], ecx
.text:0040DDFC                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040DE00                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040DE08                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040DE10                 mov     [esp+0ECh+hFile], esi
.text:0040DE13                 call    sub_41D2A0
.text:0040DE18                 mov     dword ptr [ebp+50h], 200h
.text:0040DE1F                 lea     ebx, [eax+eax*4]
.text:0040DE22                 mov     edi, [esp+0ECh+var_A8]
.text:0040DE26                 lea     edx, [ebx+ebx*4]
.text:0040DE29                 mov     eax, [esp+0ECh+var_AC]
.text:0040DE2D                 shl     edx, 2
.text:0040DE30                 mov     ecx, edx
.text:0040DE32                 shr     ecx, 1Fh
.text:0040DE35                 dec     ecx
.text:0040DE36                 and     ecx, edx
.text:0040DE38                 test    edi, edi
.text:0040DE3A                 mov     edx, [esp+0ECh+var_A8]
.text:0040DE3E                 mov     [ebp+44h], ecx
.text:0040DE41                 js      loc_40DF57
.text:0040DE47
.text:0040DE47 loc_40DE47:                             ; CODE XREF: sub_40DB80+3DF↓j
.text:0040DE47                 mov     edi, [esp+0ECh+var_AC]
.text:0040DE4B                 xor     esi, esi
.text:0040DE4D                 mov     ecx, eax
.text:0040DE4F                 shrd    ecx, edx, 9
.text:0040DE53                 mov     ebx, edx
.text:0040DE55                 mov     eax, esi
.text:0040DE57                 and     edi, 1FFh
.text:0040DE5D                 sar     ebx, 9
.text:0040DE60                 or      eax, edi
.text:0040DE62                 jz      short loc_40DE6A
.text:0040DE64                 add     ecx, 1
.text:0040DE67                 adc     ebx, 0
.text:0040DE6A
.text:0040DE6A loc_40DE6A:                             ; CODE XREF: sub_40DB80+2E2↑j
.text:0040DE6A                 mov     [ebp+5Ch], ebx
.text:0040DE6D                 mov     esi, dword_41E0E0
.text:0040DE73                 xor     edi, edi
.text:0040DE75                 mov     [ebp+58h], ecx
.text:0040DE78                 mov     ebx, dword_41E0E0
.text:0040DE7E                 mov     ecx, [esp+0ECh+var_A8]
.text:0040DE82                 mov     edx, [esp+0ECh+var_AC]
.text:0040DE86                 mov     [ebp+50h], ebx
.text:0040DE89                 shr     ebx, 9
.text:0040DE8C                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040DE90                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040DE94                 mov     [esp+0ECh+nBufferSize], esi
.text:0040DE98                 mov     [esp+0ECh+hFile], edx
.text:0040DE9B                 call    sub_41D180
.text:0040DEA0                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040DEA4                 mov     ecx, [esp+0ECh+var_AC]
.text:0040DEA8                 mov     edi, [esp+0ECh+var_A8]
.text:0040DEAC                 mov     [esp+0ECh+var_BC], ebx
.text:0040DEB0                 mov     [esp+0ECh+var_B4], eax
.text:0040DEB4                 mov     [esp+0ECh+var_B0], edx
.text:0040DEB8                 mov     [esp+0ECh+var_B8], 0
.text:0040DEC0                 mov     [esp+0ECh+nBufferSize], esi
.text:0040DEC4                 mov     [esp+0ECh+hFile], ecx
.text:0040DEC7                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040DECB                 call    sub_41D2A0
.text:0040DED0                 mov     ebx, edx
.text:0040DED2                 or      ebx, eax
.text:0040DED4                 jz      short loc_40DF30
.text:0040DED6                 mov     edi, [esp+0ECh+var_B4]
.text:0040DEDA                 mov     esi, [esp+0ECh+var_B0]
.text:0040DEDE                 mov     eax, [esp+0ECh+var_BC]
.text:0040DEE2                 mov     [esp+0ECh+var_C4], edi
.text:0040DEE6                 mov     ecx, [esp+0ECh+var_B8]
.text:0040DEEA                 add     [esp+0ECh+var_C4], 1
.text:0040DEEF                 mov     [esp+0ECh+var_C0], esi
.text:0040DEF3                 adc     [esp+0ECh+var_C0], 0
.text:0040DEF8                 mul     [esp+0ECh+var_C4]
.text:0040DEFC                 mov     edi, [esp+0ECh+var_C0]
.text:0040DF00                 mov     ebx, edx
.text:0040DF02                 mov     edx, [esp+0ECh+var_C4]
.text:0040DF06                 mov     esi, eax
.text:0040DF08                 mov     eax, ebx
.text:0040DF0A                 imul    ecx, edx
.text:0040DF0D                 mov     edx, [esp+0ECh+var_BC]
.text:0040DF11                 imul    edx, edi
.text:0040DF14                 add     eax, ecx
.text:0040DF16                 lea     edi, [edx+eax]
.text:0040DF19
.text:0040DF19 loc_40DF19:                             ; CODE XREF: sub_40DB80+3D5↓j
.text:0040DF19                 mov     [ebp+58h], esi
.text:0040DF1C                 xor     eax, eax
.text:0040DF1E                 mov     [ebp+5Ch], edi
.text:0040DF21
.text:0040DF21 loc_40DF21:                             ; CODE XREF: sub_40DB80+20↑j
.text:0040DF21                 add     esp, 0DCh
.text:0040DF27                 pop     ebx
.text:0040DF28                 pop     esi
.text:0040DF29                 pop     edi
.text:0040DF2A                 pop     ebp
.text:0040DF2B                 retn
.text:0040DF2B ; ---------------------------------------------------------------------------
.text:0040DF2C                 align 10h
.text:0040DF30
.text:0040DF30 loc_40DF30:                             ; CODE XREF: sub_40DB80+354↑j
.text:0040DF30                 mov     eax, [esp+0ECh+var_B4]
.text:0040DF34                 mov     edi, [esp+0ECh+var_B8]
.text:0040DF38                 mov     ebx, [esp+0ECh+var_B4]
.text:0040DF3C                 mul     [esp+0ECh+var_BC]
.text:0040DF40                 mov     ecx, [esp+0ECh+var_BC]
.text:0040DF44                 imul    ebx, edi
.text:0040DF47                 mov     esi, eax
.text:0040DF49                 mov     eax, [esp+0ECh+var_B0]
.text:0040DF4D                 add     edx, ebx
.text:0040DF4F                 imul    ecx, eax
.text:0040DF52                 lea     edi, [ecx+edx]
.text:0040DF55                 jmp     short loc_40DF19
.text:0040DF57 ; ---------------------------------------------------------------------------
.text:0040DF57
.text:0040DF57 loc_40DF57:                             ; CODE XREF: sub_40DB80+2C1↑j
.text:0040DF57                 add     eax, 1FFh
.text:0040DF5C                 adc     edx, 0
.text:0040DF5F                 jmp     loc_40DE47
.text:0040DF64 ; ---------------------------------------------------------------------------
.text:0040DF64
.text:0040DF64 loc_40DF64:                             ; CODE XREF: sub_40DB80+A9↑j
.text:0040DF64                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040DF67                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040DF6E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:0040DF72                 call    GetFileSize
.text:0040DF77                 sub     esp, 8
.text:0040DF7A                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:0040DF81                 jmp     loc_40DC30
.text:0040DF86 ; ---------------------------------------------------------------------------
.text:0040DF86
.text:0040DF86 loc_40DF86:                             ; CODE XREF: sub_40DB80+96↑j
.text:0040DF86                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:0040DF8E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040DF92                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:0040DF9A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:0040DF9E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:0040DFA6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0040DFAE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:0040DFB6                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:0040DFB9                 call    PeekNamedPipe
.text:0040DFBE                 sub     esp, 18h
.text:0040DFC1                 test    eax, eax
.text:0040DFC3                 jz      short loc_40DFDE
.text:0040DFC5                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040DFC9                 xor     eax, eax
.text:0040DFCB                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:0040DFD2                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:0040DFD9                 jmp     loc_40DC1C
.text:0040DFDE ; ---------------------------------------------------------------------------
.text:0040DFDE
.text:0040DFDE loc_40DFDE:                             ; CODE XREF: sub_40DB80+443↑j
.text:0040DFDE                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040DFE5                 jmp     loc_40DC1C
.text:0040DFE5 ; ---------------------------------------------------------------------------
.text:0040DFEA                 align 10h
.text:0040DFF0
.text:0040DFF0 loc_40DFF0:                             ; CODE XREF: sub_40DB80+59↑j
.text:0040DFF0                 mov     edx, 1000h
.text:0040DFF5                 jmp     loc_40DBDF
.text:0040DFF5 ; ---------------------------------------------------------------------------
.text:0040DFFA                 align 10h
.text:0040E000
.text:0040E000 loc_40E000:                             ; CODE XREF: sub_40DB80+50↑j
.text:0040E000                 mov     edx, 2000h
.text:0040E005                 jmp     loc_40DBDF
.text:0040E005 sub_40DB80      endp
.text:0040E005
.text:0040E005 ; ---------------------------------------------------------------------------
.text:0040E00A aLnk_0          db '.lnk',0             ; DATA XREF: sub_40E050+E0↓o
.text:0040E00A                                         ; .text:0040E6FA↓o ...
.text:0040E00F ; const CHAR aKernel32[]
.text:0040E00F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_40E050+12D↓o
.text:0040E00F                                         ; .text:0040EDAB↓o
.text:0040E018 ; const CHAR aGetcompressedf[]
.text:0040E018 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:0040E018                                         ; DATA XREF: sub_40E050+13E↓o
.text:0040E018                                         ; .text:0040EDBC↓o
.text:0040E02F ; const CHAR aGetbinarytypea[]
.text:0040E02F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_40E050+333↓o
.text:0040E02F                                         ; .text:0040E756↓o ...
.text:0040E03E ; const char aPathext[]
.text:0040E03E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_40E050:loc_40E437↓o
.text:0040E03E                                         ; .text:loc_40E800↓o ...
.text:0040E046                 align 10h
.text:0040E050
.text:0040E050 ; =============== S U B R O U T I N E =======================================
.text:0040E050
.text:0040E050
.text:0040E050 ; int __cdecl sub_40E050(char *String1, int)
.text:0040E050 sub_40E050      proc near               ; CODE XREF: sub_40EE30+3CD↓p
.text:0040E050                                         ; sub_40CAE0+2835↓p
.text:0040E050
.text:0040E050 Str             = dword ptr -6Ch
.text:0040E050 lpProcName      = dword ptr -68h
.text:0040E050 var_64          = dword ptr -64h
.text:0040E050 var_60          = dword ptr -60h
.text:0040E050 var_5C          = dword ptr -5Ch
.text:0040E050 var_4C          = dword ptr -4Ch
.text:0040E050 var_48          = dword ptr -48h
.text:0040E050 var_44          = dword ptr -44h
.text:0040E050 var_40          = dword ptr -40h
.text:0040E050 var_3C          = dword ptr -3Ch
.text:0040E050 var_38          = dword ptr -38h
.text:0040E050 lpRootPathName  = dword ptr -30h
.text:0040E050 var_2C          = byte ptr -2Ch
.text:0040E050 var_28          = dword ptr -28h
.text:0040E050 var_24          = dword ptr -24h
.text:0040E050 var_20          = dword ptr -20h
.text:0040E050 var_1C          = dword ptr -1Ch
.text:0040E050 var_18          = byte ptr -18h
.text:0040E050 String1         = dword ptr  4
.text:0040E050 arg_4           = dword ptr  8
.text:0040E050
.text:0040E050                 push    ebp
.text:0040E051                 push    edi
.text:0040E052                 push    esi
.text:0040E053                 push    ebx
.text:0040E054                 sub     esp, 5Ch
.text:0040E057                 mov     edx, [esp+6Ch+String1]
.text:0040E05B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040E05E                 call    sub_4192C0
.text:0040E063                 mov     [esp+6Ch+Str], eax
.text:0040E066                 call    sub_40D180
.text:0040E06B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040E06F                 test    eax, eax
.text:0040E071                 jz      loc_40E2A3
.text:0040E077                 mov     [esp+6Ch+Str], eax ; Str
.text:0040E07A                 call    strlen
.text:0040E07F                 mov     edx, [esp+6Ch+arg_4]
.text:0040E083                 mov     ebx, eax
.text:0040E085                 mov     esi, [edx+0Ch]
.text:0040E088                 mov     edi, [edx+8]
.text:0040E08B                 mov     eax, esi
.text:0040E08D                 or      eax, edi
.text:0040E08F                 jz      loc_40E4B0
.text:0040E095                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:0040E099                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040E09C                 call    GetDriveTypeA
.text:0040E0A1                 sub     esp, 4
.text:0040E0A4                 cmp     eax, 4
.text:0040E0A7                 jz      loc_40E4B0
.text:0040E0AD
.text:0040E0AD loc_40E0AD:                             ; CODE XREF: sub_40E050+48A↓j
.text:0040E0AD                                         ; sub_40E050+4B2↓j
.text:0040E0AD                 mov     edx, [esp+6Ch+arg_4]
.text:0040E0B1                 mov     esi, [edx+14h]
.text:0040E0B4                 mov     edi, [edx+10h]
.text:0040E0B7                 mov     ecx, esi
.text:0040E0B9                 or      ecx, edi
.text:0040E0BB                 jnz     short loc_40E0E5
.text:0040E0BD                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:0040E0C1                 xor     esi, esi
.text:0040E0C3                 xor     edi, edi
.text:0040E0C5                 test    ebp, ebp
.text:0040E0C7                 jz      short loc_40E0D7
.text:0040E0C9                 movzx   ebx, byte ptr [ebp+0]
.text:0040E0CD                 test    bl, bl
.text:0040E0CF                 mov     cl, bl
.text:0040E0D1                 jnz     loc_40E461
.text:0040E0D7
.text:0040E0D7 loc_40E0D7:                             ; CODE XREF: sub_40E050+77↑j
.text:0040E0D7                 xor     eax, eax
.text:0040E0D9                 xor     edx, edx
.text:0040E0DB
.text:0040E0DB loc_40E0DB:                             ; CODE XREF: sub_40E050+458↓j
.text:0040E0DB                 mov     ebp, [esp+6Ch+arg_4]
.text:0040E0DF                 mov     [ebp+10h], eax
.text:0040E0E2                 mov     [ebp+14h], edx
.text:0040E0E5
.text:0040E0E5 loc_40E0E5:                             ; CODE XREF: sub_40E050+6B↑j
.text:0040E0E5                 mov     edi, [esp+6Ch+String1]
.text:0040E0E9                 xor     ebx, ebx
.text:0040E0EB                 test    edi, edi
.text:0040E0ED                 jz      loc_40E363
.text:0040E0F3                 mov     esi, [esp+6Ch+String1]
.text:0040E0F7                 cmp     byte ptr [esi], 0
.text:0040E0FA                 jnz     loc_40E370
.text:0040E100
.text:0040E100 loc_40E100:                             ; CODE XREF: sub_40E050+38C↓j
.text:0040E100                                         ; sub_40E050+397↓j
.text:0040E100                 mov     ebp, [esp+6Ch+String1]
.text:0040E104                 test    ebp, ebp
.text:0040E106                 jz      loc_40E363
.text:0040E10C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040E114                 mov     edi, [esp+6Ch+String1]
.text:0040E118                 mov     [esp+6Ch+Str], edi ; Str
.text:0040E11B                 call    strrchr
.text:0040E120                 test    eax, eax
.text:0040E122                 jz      loc_40E363
.text:0040E128                 cld
.text:0040E129                 mov     ecx, 5
.text:0040E12E                 mov     esi, eax
.text:0040E130                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040E135                 repe cmpsb
.text:0040E137                 setz    cl
.text:0040E13A                 movzx   eax, cl
.text:0040E13D                 lea     esi, [esi+0]
.text:0040E140
.text:0040E140 loc_40E140:                             ; CODE XREF: sub_40E050+315↓j
.text:0040E140                 test    eax, eax
.text:0040E142                 jz      short loc_40E14A
.text:0040E144                 or      ebx, 0A000h
.text:0040E14A
.text:0040E14A loc_40E14A:                             ; CODE XREF: sub_40E050+F2↑j
.text:0040E14A                 mov     esi, [esp+6Ch+arg_4]
.text:0040E14E                 xor     ecx, ecx
.text:0040E150                 mov     edi, ds:dword_41F1F0
.text:0040E156                 or      [esi], ebx
.text:0040E158                 mov     ebx, [esi+14h]
.text:0040E15B                 mov     ebp, [esi+10h]
.text:0040E15E                 mov     eax, ebx
.text:0040E160                 xor     eax, ecx
.text:0040E162                 xor     ebp, edi
.text:0040E164                 or      eax, ebp
.text:0040E166                 jnz     loc_40E2F0
.text:0040E16C
.text:0040E16C loc_40E16C:                             ; CODE XREF: sub_40E050+30E↓j
.text:0040E16C                 mov     ecx, dword_41E0E0
.text:0040E172                 xor     esi, esi
.text:0040E174                 xor     edi, edi
.text:0040E176                 mov     edx, [esp+6Ch+arg_4]
.text:0040E17A                 mov     [edx+50h], ecx
.text:0040E17D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:0040E184                 call    LoadLibraryA
.text:0040E189                 sub     esp, 4
.text:0040E18C                 mov     ebp, eax
.text:0040E18E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040E196                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040E199                 call    GetProcAddress
.text:0040E19E                 sub     esp, 8
.text:0040E1A1                 test    eax, eax
.text:0040E1A3                 jz      short loc_40E1D8
.text:0040E1A5                 mov     ebx, [esp+6Ch+String1]
.text:0040E1A9                 lea     esi, [esp+6Ch+var_2C]
.text:0040E1AD                 mov     [esp+6Ch+lpProcName], esi
.text:0040E1B1                 mov     [esp+6Ch+Str], ebx
.text:0040E1B4                 call    eax
.text:0040E1B6                 sub     esp, 8
.text:0040E1B9                 mov     ebx, eax
.text:0040E1BB                 cmp     eax, 0FFFFFFFFh
.text:0040E1BE                 jz      loc_40E2D9
.text:0040E1C4
.text:0040E1C4 loc_40E1C4:                             ; CODE XREF: sub_40E050+29A↓j
.text:0040E1C4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:0040E1C8                 mov     ecx, ebx
.text:0040E1CA                 xor     edi, edi
.text:0040E1CC                 xor     ebx, ebx
.text:0040E1CE                 mov     edx, esi
.text:0040E1D0                 mov     esi, ecx
.text:0040E1D2                 or      esi, edi
.text:0040E1D4                 mov     edi, ebx
.text:0040E1D6                 or      edi, edx
.text:0040E1D8
.text:0040E1D8 loc_40E1D8:                             ; CODE XREF: sub_40E050+153↑j
.text:0040E1D8                                         ; sub_40E050+294↓j
.text:0040E1D8                 test    ebp, ebp
.text:0040E1DA                 jz      short loc_40E1E7
.text:0040E1DC                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040E1DF                 call    FreeLibrary
.text:0040E1E4                 sub     esp, 4
.text:0040E1E7
.text:0040E1E7 loc_40E1E7:                             ; CODE XREF: sub_40E050+18A↑j
.text:0040E1E7                 mov     ebp, edi
.text:0040E1E9                 mov     edx, ebp
.text:0040E1EB                 mov     edi, esi
.text:0040E1ED                 or      edx, esi
.text:0040E1EF                 jnz     short loc_40E1FB
.text:0040E1F1                 mov     eax, [esp+6Ch+arg_4]
.text:0040E1F5                 mov     edi, [eax+30h]
.text:0040E1F8                 mov     ebp, [eax+34h]
.text:0040E1FB
.text:0040E1FB loc_40E1FB:                             ; CODE XREF: sub_40E050+19F↑j
.text:0040E1FB                 mov     [esp+6Ch+lpProcName], ebp
.text:0040E1FF                 mov     ebx, dword_41E0E0
.text:0040E205                 xor     esi, esi
.text:0040E207                 mov     [esp+6Ch+var_60], esi
.text:0040E20B                 mov     [esp+6Ch+Str], edi
.text:0040E20E                 mov     [esp+6Ch+var_64], ebx
.text:0040E212                 call    sub_41D180
.text:0040E217                 mov     [esp+6Ch+var_3C], eax
.text:0040E21B                 mov     ecx, dword_41E0E0
.text:0040E221                 mov     [esp+6Ch+lpProcName], ebp
.text:0040E225                 mov     [esp+6Ch+var_38], edx
.text:0040E229                 shr     ecx, 9
.text:0040E22C                 mov     [esp+6Ch+var_44], ecx
.text:0040E230                 mov     [esp+6Ch+var_40], 0
.text:0040E238                 mov     [esp+6Ch+var_64], ebx
.text:0040E23C                 mov     [esp+6Ch+var_60], esi
.text:0040E240                 mov     [esp+6Ch+Str], edi
.text:0040E243                 call    sub_41D2A0
.text:0040E248                 mov     ebp, edx
.text:0040E24A                 or      ebp, eax
.text:0040E24C                 jz      short loc_40E2B0
.text:0040E24E                 mov     ebp, [esp+6Ch+var_3C]
.text:0040E252                 mov     esi, [esp+6Ch+var_38]
.text:0040E256                 mov     eax, [esp+6Ch+var_44]
.text:0040E25A                 mov     [esp+6Ch+var_4C], ebp
.text:0040E25E                 mov     ecx, [esp+6Ch+var_40]
.text:0040E262                 mov     ebx, [esp+6Ch+var_44]
.text:0040E266                 add     [esp+6Ch+var_4C], 1
.text:0040E26B                 mov     [esp+6Ch+var_48], esi
.text:0040E26F                 mov     edi, [esp+6Ch+var_4C]
.text:0040E273                 adc     [esp+6Ch+var_48], 0
.text:0040E278                 mul     [esp+6Ch+var_4C]
.text:0040E27C                 imul    ecx, edi
.text:0040E27F                 mov     esi, eax
.text:0040E281                 mov     eax, [esp+6Ch+var_48]
.text:0040E285                 add     edx, ecx
.text:0040E287                 imul    ebx, eax
.text:0040E28A                 lea     edi, [ebx+edx]
.text:0040E28D
.text:0040E28D loc_40E28D:                             ; CODE XREF: sub_40E050+287↓j
.text:0040E28D                 mov     ebx, [esp+6Ch+arg_4]
.text:0040E291                 mov     [ebx+58h], esi
.text:0040E294                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040E298                 mov     [ebx+5Ch], edi
.text:0040E29B                 mov     [esp+6Ch+Str], esi ; Block
.text:0040E29E                 call    free
.text:0040E2A3
.text:0040E2A3 loc_40E2A3:                             ; CODE XREF: sub_40E050+21↑j
.text:0040E2A3                 add     esp, 5Ch
.text:0040E2A6                 xor     eax, eax
.text:0040E2A8                 pop     ebx
.text:0040E2A9                 pop     esi
.text:0040E2AA                 pop     edi
.text:0040E2AB                 pop     ebp
.text:0040E2AC                 retn
.text:0040E2AC ; ---------------------------------------------------------------------------
.text:0040E2AD                 align 10h
.text:0040E2B0
.text:0040E2B0 loc_40E2B0:                             ; CODE XREF: sub_40E050+1FC↑j
.text:0040E2B0                 mov     eax, [esp+6Ch+var_3C]
.text:0040E2B4                 mov     edi, [esp+6Ch+var_40]
.text:0040E2B8                 mov     ecx, [esp+6Ch+var_3C]
.text:0040E2BC                 mul     [esp+6Ch+var_44]
.text:0040E2C0                 mov     ebx, [esp+6Ch+var_44]
.text:0040E2C4                 imul    ecx, edi
.text:0040E2C7                 mov     ebp, edx
.text:0040E2C9                 mov     esi, eax
.text:0040E2CB                 mov     edx, [esp+6Ch+var_38]
.text:0040E2CF                 add     ebp, ecx
.text:0040E2D1                 imul    ebx, edx
.text:0040E2D4                 lea     edi, [ebx+ebp]
.text:0040E2D7                 jmp     short loc_40E28D
.text:0040E2D9 ; ---------------------------------------------------------------------------
.text:0040E2D9
.text:0040E2D9 loc_40E2D9:                             ; CODE XREF: sub_40E050+16E↑j
.text:0040E2D9                 call    GetLastError
.text:0040E2DE                 xor     esi, esi
.text:0040E2E0                 xor     edi, edi
.text:0040E2E2                 test    eax, eax
.text:0040E2E4                 jnz     loc_40E1D8
.text:0040E2EA                 jmp     loc_40E1C4
.text:0040E2EA ; ---------------------------------------------------------------------------
.text:0040E2EF                 align 10h
.text:0040E2F0
.text:0040E2F0 loc_40E2F0:                             ; CODE XREF: sub_40E050+116↑j
.text:0040E2F0                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040E2F4                 lea     ecx, [esp+6Ch+var_20]
.text:0040E2F8                 lea     ebx, [esp+6Ch+var_1C]
.text:0040E2FC                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040E300                 lea     edi, [esp+6Ch+var_24]
.text:0040E304                 lea     ebp, [esp+6Ch+var_28]
.text:0040E308                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040E30C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040E310                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040E314                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040E317                 call    sub_419CE0
.text:0040E31C                 test    eax, eax
.text:0040E31E                 jnz     short loc_40E340
.text:0040E320                 mov     [esp+6Ch+var_28], 1
.text:0040E328                 mov     [esp+6Ch+var_24], 200h
.text:0040E330                 mov     [esp+6Ch+var_20], 0
.text:0040E338                 mov     [esp+6Ch+var_1C], 0
.text:0040E340
.text:0040E340 loc_40E340:                             ; CODE XREF: sub_40E050+2CE↑j
.text:0040E340                 mov     ebp, [esp+6Ch+var_24]
.text:0040E344                 mov     edi, [esp+6Ch+var_28]
.text:0040E348                 mov     eax, [esp+6Ch+arg_4]
.text:0040E34C                 imul    ebp, edi
.text:0040E34F                 mov     esi, [eax+10h]
.text:0040E352                 mov     dword_41E0E0, ebp
.text:0040E358                 mov     ds:dword_41F1F0, esi
.text:0040E35E                 jmp     loc_40E16C
.text:0040E363 ; ---------------------------------------------------------------------------
.text:0040E363
.text:0040E363 loc_40E363:                             ; CODE XREF: sub_40E050+9D↑j
.text:0040E363                                         ; sub_40E050+B6↑j ...
.text:0040E363                 xor     eax, eax
.text:0040E365                 jmp     loc_40E140
.text:0040E365 ; ---------------------------------------------------------------------------
.text:0040E36A                 align 10h
.text:0040E370
.text:0040E370 loc_40E370:                             ; CODE XREF: sub_40E050+AA↑j
.text:0040E370                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:0040E377                 xor     ebp, ebp
.text:0040E379                 call    GetModuleHandleA
.text:0040E37E                 sub     esp, 4
.text:0040E381                 mov     edi, eax
.text:0040E383                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040E38B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040E38E                 call    GetProcAddress
.text:0040E393                 sub     esp, 8
.text:0040E396                 mov     edx, eax
.text:0040E398                 test    eax, eax
.text:0040E39A                 jz      short loc_40E3B4
.text:0040E39C                 mov     eax, [esp+6Ch+String1]
.text:0040E3A0                 lea     ecx, [esp+6Ch+var_18]
.text:0040E3A4                 mov     [esp+6Ch+lpProcName], ecx
.text:0040E3A8                 mov     [esp+6Ch+Str], eax
.text:0040E3AB                 call    edx
.text:0040E3AD                 sub     esp, 8
.text:0040E3B0                 test    eax, eax
.text:0040E3B2                 jnz     short loc_40E418
.text:0040E3B4
.text:0040E3B4 loc_40E3B4:                             ; CODE XREF: sub_40E050+34A↑j
.text:0040E3B4                 mov     edx, ds:Str
.text:0040E3BA                 test    edx, edx
.text:0040E3BC                 jz      short loc_40E437
.text:0040E3BE
.text:0040E3BE loc_40E3BE:                             ; CODE XREF: sub_40E050+3FA↓j
.text:0040E3BE                                         ; sub_40E050+40C↓j
.text:0040E3BE                 mov     eax, [esp+6Ch+String1]
.text:0040E3C2                 test    eax, eax
.text:0040E3C4                 jz      short loc_40E3CF
.text:0040E3C6                 mov     esi, [esp+6Ch+String1]
.text:0040E3CA                 cmp     byte ptr [esi], 0
.text:0040E3CD                 jnz     short loc_40E3EC
.text:0040E3CF
.text:0040E3CF loc_40E3CF:                             ; CODE XREF: sub_40E050+374↑j
.text:0040E3CF                                         ; sub_40E050+3B0↓j ...
.text:0040E3CF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040E3D2                 call    FreeLibrary
.text:0040E3D7                 sub     esp, 4
.text:0040E3DA                 test    ebp, ebp
.text:0040E3DC                 jz      loc_40E100
.text:0040E3E2                 mov     ebx, 49h ; 'I'
.text:0040E3E7                 jmp     loc_40E100
.text:0040E3EC ; ---------------------------------------------------------------------------
.text:0040E3EC
.text:0040E3EC loc_40E3EC:                             ; CODE XREF: sub_40E050+37D↑j
.text:0040E3EC                 mov     [esp+6Ch+Str], esi ; Str
.text:0040E3EF                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040E3F7                 call    strrchr
.text:0040E3FC                 test    eax, eax
.text:0040E3FE                 mov     esi, eax
.text:0040E400                 jz      short loc_40E3CF
.text:0040E402                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040E406                 mov     ecx, ds:Str
.text:0040E40C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040E40F                 call    strstr
.text:0040E414                 test    eax, eax
.text:0040E416                 jz      short loc_40E41F
.text:0040E418
.text:0040E418 loc_40E418:                             ; CODE XREF: sub_40E050+362↑j
.text:0040E418                                         ; sub_40E050+3E5↓j
.text:0040E418                 mov     ebp, 1
.text:0040E41D                 jmp     short loc_40E3CF
.text:0040E41F ; ---------------------------------------------------------------------------
.text:0040E41F
.text:0040E41F loc_40E41F:                             ; CODE XREF: sub_40E050+3C6↑j
.text:0040E41F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040E423                 mov     edx, off_41E0E4 ; ".com;.exe;.bat;.cmd"
.text:0040E429                 mov     [esp+6Ch+Str], edx ; Str
.text:0040E42C                 call    strstr
.text:0040E431                 test    eax, eax
.text:0040E433                 jz      short loc_40E3CF
.text:0040E435                 jmp     short loc_40E418
.text:0040E437 ; ---------------------------------------------------------------------------
.text:0040E437
.text:0040E437 loc_40E437:                             ; CODE XREF: sub_40E050+36C↑j
.text:0040E437                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040E43E                 call    getenv
.text:0040E443                 mov     ds:Str, eax
.text:0040E448                 test    eax, eax
.text:0040E44A                 jnz     loc_40E3BE
.text:0040E450                 mov     esi, off_41E0E4 ; ".com;.exe;.bat;.cmd"
.text:0040E456                 mov     ds:Str, esi
.text:0040E45C                 jmp     loc_40E3BE
.text:0040E461 ; ---------------------------------------------------------------------------
.text:0040E461
.text:0040E461 loc_40E461:                             ; CODE XREF: sub_40E050+81↑j
.text:0040E461                                         ; sub_40E050+452↓j
.text:0040E461                 shld    edi, esi, 8
.text:0040E465                 movsx   eax, cl
.text:0040E468                 shl     esi, 8
.text:0040E46B                 cdq
.text:0040E46C                 add     esi, eax
.text:0040E46E                 adc     edi, edx
.text:0040E470                 mov     edx, edi
.text:0040E472                 xor     ebx, ebx
.text:0040E474                 and     edx, 0FF000000h
.text:0040E47A                 mov     eax, edx
.text:0040E47C                 or      eax, ebx
.text:0040E47E                 jz      short loc_40E499
.text:0040E480                 mov     ecx, edx
.text:0040E482                 xor     eax, eax
.text:0040E484                 shr     ecx, 10h
.text:0040E487                 mov     edx, esi
.text:0040E489                 xor     edx, ecx
.text:0040E48B                 mov     ecx, edi
.text:0040E48D                 xor     ecx, eax
.text:0040E48F                 mov     esi, edx
.text:0040E491                 mov     edi, ecx
.text:0040E493                 and     edi, 0FFFFFFh
.text:0040E499
.text:0040E499 loc_40E499:                             ; CODE XREF: sub_40E050+42E↑j
.text:0040E499                 inc     ebp
.text:0040E49A                 movzx   ebx, byte ptr [ebp+0]
.text:0040E49E                 test    bl, bl
.text:0040E4A0                 mov     cl, bl
.text:0040E4A2                 jnz     short loc_40E461
.text:0040E4A4                 mov     eax, esi
.text:0040E4A6                 mov     edx, edi
.text:0040E4A8                 jmp     loc_40E0DB
.text:0040E4A8 ; ---------------------------------------------------------------------------
.text:0040E4AD                 align 10h
.text:0040E4B0
.text:0040E4B0 loc_40E4B0:                             ; CODE XREF: sub_40E050+3F↑j
.text:0040E4B0                                         ; sub_40E050+57↑j
.text:0040E4B0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040E4B4                 mov     ebp, [esp+6Ch+String1]
.text:0040E4B8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040E4BC                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040E4BF                 call    _stricmp
.text:0040E4C4                 test    eax, eax
.text:0040E4C6                 jnz     short loc_40E4E0
.text:0040E4C8                 mov     ebx, [esp+6Ch+arg_4]
.text:0040E4CC                 mov     dword ptr [ebx+8], 5
.text:0040E4D3                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040E4DA                 jmp     loc_40E0AD
.text:0040E4DA ; ---------------------------------------------------------------------------
.text:0040E4DF                 align 10h
.text:0040E4E0
.text:0040E4E0 loc_40E4E0:                             ; CODE XREF: sub_40E050+476↑j
.text:0040E4E0                 mov     ebp, [esp+6Ch+String1]
.text:0040E4E4                 xor     esi, esi
.text:0040E4E6                 xor     edi, edi
.text:0040E4E8                 add     ebp, ebx
.text:0040E4EA                 jz      short loc_40E4F4
.text:0040E4EC                 movzx   ecx, byte ptr [ebp+0]
.text:0040E4F0                 test    cl, cl
.text:0040E4F2                 jnz     short loc_40E507
.text:0040E4F4
.text:0040E4F4 loc_40E4F4:                             ; CODE XREF: sub_40E050+49A↑j
.text:0040E4F4                 xor     eax, eax
.text:0040E4F6                 xor     edx, edx
.text:0040E4F8
.text:0040E4F8 loc_40E4F8:                             ; CODE XREF: sub_40E050+4FE↓j
.text:0040E4F8                 mov     ebp, [esp+6Ch+arg_4]
.text:0040E4FC                 mov     [ebp+8], eax
.text:0040E4FF                 mov     [ebp+0Ch], edx
.text:0040E502                 jmp     loc_40E0AD
.text:0040E507 ; ---------------------------------------------------------------------------
.text:0040E507
.text:0040E507 loc_40E507:                             ; CODE XREF: sub_40E050+4A2↑j
.text:0040E507                                         ; sub_40E050+4F8↓j
.text:0040E507                 shld    edi, esi, 8
.text:0040E50B                 movsx   eax, cl
.text:0040E50E                 shl     esi, 8
.text:0040E511                 cdq
.text:0040E512                 add     esi, eax
.text:0040E514                 adc     edi, edx
.text:0040E516                 mov     edx, edi
.text:0040E518                 xor     ebx, ebx
.text:0040E51A                 and     edx, 0FF000000h
.text:0040E520                 mov     eax, edx
.text:0040E522                 or      eax, ebx
.text:0040E524                 jz      short loc_40E53F
.text:0040E526                 mov     ecx, edx
.text:0040E528                 xor     eax, eax
.text:0040E52A                 shr     ecx, 10h
.text:0040E52D                 mov     edx, esi
.text:0040E52F                 xor     edx, ecx
.text:0040E531                 mov     ecx, edi
.text:0040E533                 xor     ecx, eax
.text:0040E535                 mov     esi, edx
.text:0040E537                 mov     edi, ecx
.text:0040E539                 and     edi, 0FFFFFFh
.text:0040E53F
.text:0040E53F loc_40E53F:                             ; CODE XREF: sub_40E050+4D4↑j
.text:0040E53F                 inc     ebp
.text:0040E540                 movzx   ebx, byte ptr [ebp+0]
.text:0040E544                 test    bl, bl
.text:0040E546                 mov     cl, bl
.text:0040E548                 jnz     short loc_40E507
.text:0040E54A                 mov     eax, esi
.text:0040E54C                 mov     edx, edi
.text:0040E54E                 jmp     short loc_40E4F8
.text:0040E54E sub_40E050      endp
.text:0040E54E
.text:0040E550
.text:0040E550 ; =============== S U B R O U T I N E =======================================
.text:0040E550
.text:0040E550
.text:0040E550 ; int __cdecl sub_40E550(LPCSTR)
.text:0040E550 sub_40E550      proc near               ; CODE XREF: sub_4193E0+CA↓p
.text:0040E550
.text:0040E550 lpRootPathName  = dword ptr -83Ch
.text:0040E550 lpVolumeNameBuffer= dword ptr -838h
.text:0040E550 nVolumeNameSize = dword ptr -834h
.text:0040E550 lpVolumeSerialNumber= dword ptr -830h
.text:0040E550 lpMaximumComponentLength= dword ptr -82Ch
.text:0040E550 lpFileSystemFlags= dword ptr -828h
.text:0040E550 lpFileSystemNameBuffer= dword ptr -824h
.text:0040E550 nFileSystemNameSize= dword ptr -820h
.text:0040E550 VolumeSerialNumber= dword ptr -818h
.text:0040E550 MaximumComponentLength= dword ptr -814h
.text:0040E550 FileSystemFlags = dword ptr -810h
.text:0040E550 FileSystemNameBuffer= byte ptr -80Ch
.text:0040E550 VolumeNameBuffer= byte ptr -40Ch
.text:0040E550 var_4           = dword ptr -4
.text:0040E550 arg_0           = dword ptr  4
.text:0040E550
.text:0040E550                 sub     esp, 83Ch
.text:0040E556                 mov     [esp+83Ch+var_4], ebx
.text:0040E55D                 mov     ebx, [esp+83Ch+arg_0]
.text:0040E564                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040E567                 call    sub_4192C0
.text:0040E56C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040E56F                 call    sub_40D180
.text:0040E574                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040E577                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040E57B                 mov     ebx, eax
.text:0040E57D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040E581                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040E585                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040E589                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040E58D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040E591                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040E595                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040E59C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040E5A0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040E5A4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040E5AC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040E5B4                 call    GetVolumeInformationA
.text:0040E5B9                 sub     esp, 20h
.text:0040E5BC                 test    eax, eax
.text:0040E5BE                 setz    cl
.text:0040E5C1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040E5C4                 movzx   edx, cl
.text:0040E5C7                 dec     edx
.text:0040E5C8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040E5CC                 call    free
.text:0040E5D1                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040E5D5                 mov     ebx, [esp+83Ch+var_4]
.text:0040E5DC                 add     esp, 83Ch
.text:0040E5E2                 retn
.text:0040E5E2 sub_40E550      endp
.text:0040E5E2
.text:0040E5E2 ; ---------------------------------------------------------------------------
.text:0040E5E3                 align 10h
.text:0040E5F0                 push    ebp
.text:0040E5F1                 push    edi
.text:0040E5F2                 xor     edi, edi
.text:0040E5F4                 push    esi
.text:0040E5F5                 xor     esi, esi
.text:0040E5F7                 push    ebx
.text:0040E5F8                 mov     ebp, [esp+14h]
.text:0040E5FC                 test    ebp, ebp
.text:0040E5FE                 jz      short loc_40E608
.text:0040E600                 movzx   ecx, byte ptr [ebp+0]
.text:0040E604                 test    cl, cl
.text:0040E606                 jnz     short loc_40E611
.text:0040E608
.text:0040E608 loc_40E608:                             ; CODE XREF: .text:0040E5FE↑j
.text:0040E608                 xor     eax, eax
.text:0040E60A                 xor     edx, edx
.text:0040E60C
.text:0040E60C loc_40E60C:                             ; CODE XREF: .text:0040E658↓j
.text:0040E60C                 pop     ebx
.text:0040E60D                 pop     esi
.text:0040E60E                 pop     edi
.text:0040E60F                 pop     ebp
.text:0040E610                 retn
.text:0040E611 ; ---------------------------------------------------------------------------
.text:0040E611
.text:0040E611 loc_40E611:                             ; CODE XREF: .text:0040E606↑j
.text:0040E611                                         ; .text:0040E652↓j
.text:0040E611                 shld    edi, esi, 8
.text:0040E615                 movsx   eax, cl
.text:0040E618                 shl     esi, 8
.text:0040E61B                 cdq
.text:0040E61C                 add     esi, eax
.text:0040E61E                 adc     edi, edx
.text:0040E620                 mov     edx, edi
.text:0040E622                 xor     ebx, ebx
.text:0040E624                 and     edx, 0FF000000h
.text:0040E62A                 mov     eax, edx
.text:0040E62C                 or      eax, ebx
.text:0040E62E                 jz      short loc_40E649
.text:0040E630                 mov     ecx, edx
.text:0040E632                 xor     eax, eax
.text:0040E634                 shr     ecx, 10h
.text:0040E637                 mov     edx, esi
.text:0040E639                 xor     edx, ecx
.text:0040E63B                 mov     ecx, edi
.text:0040E63D                 xor     ecx, eax
.text:0040E63F                 mov     esi, edx
.text:0040E641                 mov     edi, ecx
.text:0040E643                 and     edi, 0FFFFFFh
.text:0040E649
.text:0040E649 loc_40E649:                             ; CODE XREF: .text:0040E62E↑j
.text:0040E649                 inc     ebp
.text:0040E64A                 movzx   ebx, byte ptr [ebp+0]
.text:0040E64E                 test    bl, bl
.text:0040E650                 mov     cl, bl
.text:0040E652                 jnz     short loc_40E611
.text:0040E654                 mov     eax, esi
.text:0040E656                 mov     edx, edi
.text:0040E658                 jmp     short loc_40E60C
.text:0040E658 ; ---------------------------------------------------------------------------
.text:0040E65A                 align 10h
.text:0040E660                 sub     esp, 2Ch
.text:0040E663                 lea     edx, [esp+24h]
.text:0040E667                 lea     ecx, [esp+28h]
.text:0040E66B                 mov     [esp+0Ch], edx
.text:0040E66F                 lea     edx, [esp+1Ch]
.text:0040E673                 mov     [esp+4], edx
.text:0040E677                 mov     edx, [esp+30h]
.text:0040E67B                 mov     [esp+10h], ecx
.text:0040E67F                 lea     ecx, [esp+20h]
.text:0040E683                 mov     [esp+8], ecx
.text:0040E687                 mov     [esp], edx
.text:0040E68A                 call    sub_419CE0
.text:0040E68F                 test    eax, eax
.text:0040E691                 jnz     short loc_40E6B3
.text:0040E693                 mov     dword ptr [esp+1Ch], 1
.text:0040E69B                 mov     dword ptr [esp+20h], 200h
.text:0040E6A3                 mov     dword ptr [esp+24h], 0
.text:0040E6AB                 mov     dword ptr [esp+28h], 0
.text:0040E6B3
.text:0040E6B3 loc_40E6B3:                             ; CODE XREF: .text:0040E691↑j
.text:0040E6B3                 mov     eax, [esp+20h]
.text:0040E6B7                 mov     ecx, [esp+1Ch]
.text:0040E6BB                 add     esp, 2Ch
.text:0040E6BE                 imul    eax, ecx
.text:0040E6C1                 retn
.text:0040E6C1 ; ---------------------------------------------------------------------------
.text:0040E6C2                 align 10h
.text:0040E6D0                 sub     esp, 1Ch
.text:0040E6D3                 mov     eax, [esp+20h]
.text:0040E6D7                 mov     [esp+14h], esi
.text:0040E6DB                 mov     [esp+18h], edi
.text:0040E6DF                 test    eax, eax
.text:0040E6E1                 jz      short loc_40E720
.text:0040E6E3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040E6EB                 mov     [esp], eax
.text:0040E6EE                 call    strrchr
.text:0040E6F3                 test    eax, eax
.text:0040E6F5                 jz      short loc_40E720
.text:0040E6F7                 cld
.text:0040E6F8                 mov     esi, eax
.text:0040E6FA                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040E6FF                 mov     ecx, 5
.text:0040E704                 repe cmpsb
.text:0040E706                 setz    dl
.text:0040E709                 movzx   eax, dl
.text:0040E70C                 lea     esi, [esi+0]
.text:0040E710
.text:0040E710 loc_40E710:                             ; CODE XREF: .text:0040E722↓j
.text:0040E710                 mov     esi, [esp+14h]
.text:0040E714                 mov     edi, [esp+18h]
.text:0040E718                 add     esp, 1Ch
.text:0040E71B                 retn
.text:0040E71B ; ---------------------------------------------------------------------------
.text:0040E71C                 align 10h
.text:0040E720
.text:0040E720 loc_40E720:                             ; CODE XREF: .text:0040E6E1↑j
.text:0040E720                                         ; .text:0040E6F5↑j
.text:0040E720                 xor     eax, eax
.text:0040E722                 jmp     short loc_40E710
.text:0040E722 ; ---------------------------------------------------------------------------
.text:0040E724                 align 10h
.text:0040E730                 sub     esp, 1Ch
.text:0040E733                 mov     [esp+10h], ebx
.text:0040E737                 mov     ebx, [esp+20h]
.text:0040E73B                 mov     [esp+14h], esi
.text:0040E73F                 mov     [esp+18h], edi
.text:0040E743                 xor     edi, edi
.text:0040E745                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040E74C                 call    GetModuleHandleA
.text:0040E751                 sub     esp, 4
.text:0040E754                 mov     esi, eax
.text:0040E756                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040E75E                 mov     [esp], eax
.text:0040E761                 call    GetProcAddress
.text:0040E766                 sub     esp, 8
.text:0040E769                 test    eax, eax
.text:0040E76B                 jz      short loc_40E781
.text:0040E76D                 mov     [esp], ebx
.text:0040E770                 lea     ecx, [esp+0Ch]
.text:0040E774                 mov     [esp+4], ecx
.text:0040E778                 call    eax
.text:0040E77A                 sub     esp, 8
.text:0040E77D                 test    eax, eax
.text:0040E77F                 jnz     short loc_40E7E0
.text:0040E781
.text:0040E781 loc_40E781:                             ; CODE XREF: .text:0040E76B↑j
.text:0040E781                 mov     eax, ds:Str
.text:0040E786                 test    eax, eax
.text:0040E788                 jz      short loc_40E800
.text:0040E78A
.text:0040E78A loc_40E78A:                             ; CODE XREF: .text:0040E813↓j
.text:0040E78A                                         ; .text:0040E825↓j
.text:0040E78A                 test    ebx, ebx
.text:0040E78C                 jz      short loc_40E793
.text:0040E78E                 cmp     byte ptr [ebx], 0
.text:0040E791                 jnz     short loc_40E7B0
.text:0040E793
.text:0040E793 loc_40E793:                             ; CODE XREF: .text:0040E78C↑j
.text:0040E793                                         ; .text:0040E7C4↓j ...
.text:0040E793                 mov     [esp], esi
.text:0040E796                 call    FreeLibrary
.text:0040E79B                 sub     esp, 4
.text:0040E79E                 mov     eax, edi
.text:0040E7A0                 mov     ebx, [esp+10h]
.text:0040E7A4                 mov     esi, [esp+14h]
.text:0040E7A8                 mov     edi, [esp+18h]
.text:0040E7AC                 add     esp, 1Ch
.text:0040E7AF                 retn
.text:0040E7B0 ; ---------------------------------------------------------------------------
.text:0040E7B0
.text:0040E7B0 loc_40E7B0:                             ; CODE XREF: .text:0040E791↑j
.text:0040E7B0                 mov     [esp], ebx
.text:0040E7B3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040E7BB                 call    strrchr
.text:0040E7C0                 test    eax, eax
.text:0040E7C2                 mov     ebx, eax
.text:0040E7C4                 jz      short loc_40E793
.text:0040E7C6                 mov     [esp+4], eax
.text:0040E7CA                 mov     ecx, ds:Str
.text:0040E7D0                 mov     [esp], ecx
.text:0040E7D3                 call    strstr
.text:0040E7D8                 test    eax, eax
.text:0040E7DA                 jz      short loc_40E7E7
.text:0040E7DC                 lea     esi, [esi+0]
.text:0040E7E0
.text:0040E7E0 loc_40E7E0:                             ; CODE XREF: .text:0040E77F↑j
.text:0040E7E0                                         ; .text:0040E7FD↓j
.text:0040E7E0                 mov     edi, 1
.text:0040E7E5                 jmp     short loc_40E793
.text:0040E7E7 ; ---------------------------------------------------------------------------
.text:0040E7E7
.text:0040E7E7 loc_40E7E7:                             ; CODE XREF: .text:0040E7DA↑j
.text:0040E7E7                 mov     [esp+4], ebx
.text:0040E7EB                 mov     ebx, off_41E0E4 ; ".com;.exe;.bat;.cmd"
.text:0040E7F1                 mov     [esp], ebx
.text:0040E7F4                 call    strstr
.text:0040E7F9                 test    eax, eax
.text:0040E7FB                 jz      short loc_40E793
.text:0040E7FD                 jmp     short loc_40E7E0
.text:0040E7FD ; ---------------------------------------------------------------------------
.text:0040E7FF                 align 10h
.text:0040E800
.text:0040E800 loc_40E800:                             ; CODE XREF: .text:0040E788↑j
.text:0040E800                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040E807                 call    getenv
.text:0040E80C                 mov     ds:Str, eax
.text:0040E811                 test    eax, eax
.text:0040E813                 jnz     loc_40E78A
.text:0040E819                 mov     edx, off_41E0E4 ; ".com;.exe;.bat;.cmd"
.text:0040E81F                 mov     ds:Str, edx
.text:0040E825                 jmp     loc_40E78A
.text:0040E825 ; ---------------------------------------------------------------------------
.text:0040E82A                 align 10h
.text:0040E830                 sub     esp, 0Ch
.text:0040E833                 mov     edx, [esp+10h]
.text:0040E837                 mov     [esp], edx
.text:0040E83A                 call    GetFileType
.text:0040E83F                 sub     esp, 4
.text:0040E842                 xor     edx, edx
.text:0040E844                 cmp     eax, 2
.text:0040E847                 jz      short loc_40E860
.text:0040E849                 cmp     eax, 3
.text:0040E84C                 jz      short loc_40E854
.text:0040E84E
.text:0040E84E loc_40E84E:                             ; CODE XREF: .text:0040E859↓j
.text:0040E84E                                         ; .text:0040E865↓j
.text:0040E84E                 mov     eax, edx
.text:0040E850                 add     esp, 0Ch
.text:0040E853                 retn
.text:0040E854 ; ---------------------------------------------------------------------------
.text:0040E854
.text:0040E854 loc_40E854:                             ; CODE XREF: .text:0040E84C↑j
.text:0040E854                 mov     edx, 1000h
.text:0040E859                 jmp     short loc_40E84E
.text:0040E859 ; ---------------------------------------------------------------------------
.text:0040E85B                 align 10h
.text:0040E860
.text:0040E860 loc_40E860:                             ; CODE XREF: .text:0040E847↑j
.text:0040E860                 mov     edx, 2000h
.text:0040E865                 jmp     short loc_40E84E
.text:0040E865 ; ---------------------------------------------------------------------------
.text:0040E867                 align 10h
.text:0040E870                 mov     ecx, [esp+4]
.text:0040E874                 xor     edx, edx
.text:0040E876                 test    cl, 10h
.text:0040E879                 setz    dl
.text:0040E87C                 dec     edx
.text:0040E87D                 and     edx, 0FFFFC000h
.text:0040E883                 add     edx, 8000h
.text:0040E889                 or      edx, 124h
.text:0040E88F                 test    cl, 1
.text:0040E892                 movzx   eax, dx
.text:0040E895                 jnz     short locret_40E89C
.text:0040E897                 or      eax, 92h
.text:0040E89C
.text:0040E89C locret_40E89C:                          ; CODE XREF: .text:0040E895↑j
.text:0040E89C                 retn
.text:0040E89C ; ---------------------------------------------------------------------------
.text:0040E89D                 align 10h
.text:0040E8A0                 sub     esp, 2Ch
.text:0040E8A3                 mov     [esp+20h], esi
.text:0040E8A7                 mov     esi, [esp+30h]
.text:0040E8AB                 mov     [esp+1Ch], ebx
.text:0040E8AF                 xor     ebx, ebx
.text:0040E8B1                 test    esi, esi
.text:0040E8B3                 mov     [esp+24h], edi
.text:0040E8B7                 mov     [esp+28h], ebp
.text:0040E8BB                 jz      short loc_40E910
.text:0040E8BD                 cmp     byte ptr [esi], 0
.text:0040E8C0                 jnz     short loc_40E914
.text:0040E8C2
.text:0040E8C2 loc_40E8C2:                             ; CODE XREF: .text:0040E97C↓j
.text:0040E8C2                                         ; .text:0040E987↓j
.text:0040E8C2                 test    esi, esi
.text:0040E8C4                 jz      short loc_40E910
.text:0040E8C6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040E8CE                 mov     [esp], esi
.text:0040E8D1                 call    strrchr
.text:0040E8D6                 test    eax, eax
.text:0040E8D8                 jz      short loc_40E910
.text:0040E8DA                 cld
.text:0040E8DB                 mov     ecx, 5
.text:0040E8E0                 mov     esi, eax
.text:0040E8E2                 mov     edi, offset aLnk_0 ; ".lnk"
.text:0040E8E7                 repe cmpsb
.text:0040E8E9                 setz    cl
.text:0040E8EC                 movzx   eax, cl
.text:0040E8EF                 nop
.text:0040E8F0
.text:0040E8F0 loc_40E8F0:                             ; CODE XREF: .text:0040E912↓j
.text:0040E8F0                 test    eax, eax
.text:0040E8F2                 jz      short loc_40E8FA
.text:0040E8F4                 or      ebx, 0A000h
.text:0040E8FA
.text:0040E8FA loc_40E8FA:                             ; CODE XREF: .text:0040E8F2↑j
.text:0040E8FA                 mov     eax, ebx
.text:0040E8FC                 mov     esi, [esp+20h]
.text:0040E900                 mov     ebx, [esp+1Ch]
.text:0040E904                 mov     edi, [esp+24h]
.text:0040E908                 mov     ebp, [esp+28h]
.text:0040E90C                 add     esp, 2Ch
.text:0040E90F                 retn
.text:0040E910 ; ---------------------------------------------------------------------------
.text:0040E910
.text:0040E910 loc_40E910:                             ; CODE XREF: .text:0040E8BB↑j
.text:0040E910                                         ; .text:0040E8C4↑j ...
.text:0040E910                 xor     eax, eax
.text:0040E912                 jmp     short loc_40E8F0
.text:0040E914 ; ---------------------------------------------------------------------------
.text:0040E914
.text:0040E914 loc_40E914:                             ; CODE XREF: .text:0040E8C0↑j
.text:0040E914                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040E91B                 call    GetModuleHandleA
.text:0040E920                 sub     esp, 4
.text:0040E923                 mov     ebp, eax
.text:0040E925                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040E92D                 mov     [esp], eax
.text:0040E930                 call    GetProcAddress
.text:0040E935                 sub     esp, 8
.text:0040E938                 test    eax, eax
.text:0040E93A                 mov     dword ptr [esp+14h], 0
.text:0040E942                 jz      short loc_40E958
.text:0040E944                 mov     [esp], esi
.text:0040E947                 lea     ecx, [esp+18h]
.text:0040E94B                 mov     [esp+4], ecx
.text:0040E94F                 call    eax
.text:0040E951                 sub     esp, 8
.text:0040E954                 test    eax, eax
.text:0040E956                 jnz     short loc_40E9B8
.text:0040E958
.text:0040E958 loc_40E958:                             ; CODE XREF: .text:0040E942↑j
.text:0040E958                 mov     edx, ds:Str
.text:0040E95E                 test    edx, edx
.text:0040E960                 jz      short loc_40E9E0
.text:0040E962
.text:0040E962 loc_40E962:                             ; CODE XREF: .text:0040E9F3↓j
.text:0040E962                                         ; .text:0040EA05↓j
.text:0040E962                 test    esi, esi
.text:0040E964                 jz      short loc_40E96B
.text:0040E966                 cmp     byte ptr [esi], 0
.text:0040E969                 jnz     short loc_40E98C
.text:0040E96B
.text:0040E96B loc_40E96B:                             ; CODE XREF: .text:0040E964↑j
.text:0040E96B                                         ; .text:0040E9A0↓j ...
.text:0040E96B                 mov     [esp], ebp
.text:0040E96E                 call    FreeLibrary
.text:0040E973                 sub     esp, 4
.text:0040E976                 mov     eax, [esp+14h]
.text:0040E97A                 test    eax, eax
.text:0040E97C                 jz      loc_40E8C2
.text:0040E982                 mov     ebx, 49h ; 'I'
.text:0040E987                 jmp     loc_40E8C2
.text:0040E98C ; ---------------------------------------------------------------------------
.text:0040E98C
.text:0040E98C loc_40E98C:                             ; CODE XREF: .text:0040E969↑j
.text:0040E98C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040E994                 mov     [esp], esi
.text:0040E997                 call    strrchr
.text:0040E99C                 test    eax, eax
.text:0040E99E                 mov     edi, eax
.text:0040E9A0                 jz      short loc_40E96B
.text:0040E9A2                 mov     [esp+4], eax
.text:0040E9A6                 mov     edx, ds:Str
.text:0040E9AC                 mov     [esp], edx
.text:0040E9AF                 call    strstr
.text:0040E9B4                 test    eax, eax
.text:0040E9B6                 jz      short loc_40E9C2
.text:0040E9B8
.text:0040E9B8 loc_40E9B8:                             ; CODE XREF: .text:0040E956↑j
.text:0040E9B8                                         ; .text:0040E9D8↓j
.text:0040E9B8                 mov     dword ptr [esp+14h], 1
.text:0040E9C0                 jmp     short loc_40E96B
.text:0040E9C2 ; ---------------------------------------------------------------------------
.text:0040E9C2
.text:0040E9C2 loc_40E9C2:                             ; CODE XREF: .text:0040E9B6↑j
.text:0040E9C2                 mov     [esp+4], edi
.text:0040E9C6                 mov     edi, off_41E0E4 ; ".com;.exe;.bat;.cmd"
.text:0040E9CC                 mov     [esp], edi
.text:0040E9CF                 call    strstr
.text:0040E9D4                 test    eax, eax
.text:0040E9D6                 jz      short loc_40E96B
.text:0040E9D8                 jmp     short loc_40E9B8
.text:0040E9D8 ; ---------------------------------------------------------------------------
.text:0040E9DA                 align 10h
.text:0040E9E0
.text:0040E9E0 loc_40E9E0:                             ; CODE XREF: .text:0040E960↑j
.text:0040E9E0                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040E9E7                 call    getenv
.text:0040E9EC                 mov     ds:Str, eax
.text:0040E9F1                 test    eax, eax
.text:0040E9F3                 jnz     loc_40E962
.text:0040E9F9                 mov     ecx, off_41E0E4 ; ".com;.exe;.bat;.cmd"
.text:0040E9FF                 mov     ds:Str, ecx
.text:0040EA05                 jmp     loc_40E962
.text:0040EA05 ; ---------------------------------------------------------------------------
.text:0040EA0A                 align 10h
.text:0040EA10                 push    esi
.text:0040EA11                 push    ebx
.text:0040EA12                 sub     esp, 864h
.text:0040EA18                 mov     ebx, [esp+870h]
.text:0040EA1F                 lea     edx, [esp+830h]
.text:0040EA26                 mov     esi, [esp+874h]
.text:0040EA2D                 mov     [esp+4], edx
.text:0040EA31                 mov     [esp], ebx
.text:0040EA34                 call    sub_40D890
.text:0040EA39                 xor     edx, edx
.text:0040EA3B                 test    eax, eax
.text:0040EA3D                 jz      loc_40EB25
.text:0040EA43                 mov     ecx, [esp+830h]
.text:0040EA4A                 test    cl, 10h
.text:0040EA4D                 mov     [esi], ecx
.text:0040EA4F                 mov     eax, [esp+834h]
.text:0040EA56                 mov     edx, [esp+838h]
.text:0040EA5D                 mov     [esi+4], eax
.text:0040EA60                 mov     [esi+8], edx
.text:0040EA63                 mov     eax, [esp+83Ch]
.text:0040EA6A                 mov     edx, [esp+840h]
.text:0040EA71                 mov     [esi+0Ch], eax
.text:0040EA74                 mov     [esi+10h], edx
.text:0040EA77                 mov     edx, [esp+848h]
.text:0040EA7E                 mov     eax, [esp+844h]
.text:0040EA85                 mov     [esi+18h], edx
.text:0040EA88                 mov     [esi+14h], eax
.text:0040EA8B                 mov     edx, [esp+84Ch]
.text:0040EA92                 mov     [esi+20h], edx
.text:0040EA95                 mov     edx, [esp+850h]
.text:0040EA9C                 mov     [esi+24h], edx
.text:0040EA9F                 jnz     loc_40EB30
.text:0040EAA5                 mov     dword ptr [esi+28h], 1
.text:0040EAAC
.text:0040EAAC loc_40EAAC:                             ; CODE XREF: .text:0040EB3B↓j
.text:0040EAAC                 mov     [esp], ebx
.text:0040EAAF                 call    sub_4192C0
.text:0040EAB4                 mov     [esp], eax
.text:0040EAB7                 call    sub_40D180
.text:0040EABC                 mov     [esp], eax
.text:0040EABF                 lea     edx, [esp+30h]
.text:0040EAC3                 mov     ebx, eax
.text:0040EAC5                 mov     [esp+18h], edx
.text:0040EAC9                 lea     ecx, [esp+2Ch]
.text:0040EACD                 lea     edx, [esp+28h]
.text:0040EAD1                 mov     [esp+14h], ecx
.text:0040EAD5                 lea     ecx, [esp+24h]
.text:0040EAD9                 mov     [esp+10h], edx
.text:0040EADD                 lea     edx, [esp+430h]
.text:0040EAE4                 mov     [esp+0Ch], ecx
.text:0040EAE8                 mov     [esp+4], edx
.text:0040EAEC                 mov     dword ptr [esp+1Ch], 400h
.text:0040EAF4                 mov     dword ptr [esp+8], 400h
.text:0040EAFC                 call    GetVolumeInformationA
.text:0040EB01                 sub     esp, 20h
.text:0040EB04                 test    eax, eax
.text:0040EB06                 setz    cl
.text:0040EB09                 mov     [esp], ebx
.text:0040EB0C                 movzx   edx, cl
.text:0040EB0F                 dec     edx
.text:0040EB10                 and     [esp+24h], edx
.text:0040EB14                 call    free
.text:0040EB19                 mov     ecx, [esp+24h]
.text:0040EB1D                 mov     edx, 1
.text:0040EB22                 mov     [esi+1Ch], ecx
.text:0040EB25
.text:0040EB25 loc_40EB25:                             ; CODE XREF: .text:0040EA3D↑j
.text:0040EB25                 add     esp, 864h
.text:0040EB2B                 mov     eax, edx
.text:0040EB2D                 pop     ebx
.text:0040EB2E                 pop     esi
.text:0040EB2F                 retn
.text:0040EB30 ; ---------------------------------------------------------------------------
.text:0040EB30
.text:0040EB30 loc_40EB30:                             ; CODE XREF: .text:0040EA9F↑j
.text:0040EB30                 mov     [esp], ebx
.text:0040EB33                 call    sub_40DA00
.text:0040EB38                 mov     [esi+28h], eax
.text:0040EB3B                 jmp     loc_40EAAC
.text:0040EB40 ; ---------------------------------------------------------------------------
.text:0040EB40                 push    ebp
.text:0040EB41                 xor     edx, edx
.text:0040EB43                 push    edi
.text:0040EB44                 push    esi
.text:0040EB45                 xor     esi, esi
.text:0040EB47                 push    ebx
.text:0040EB48                 sub     esp, 1Ch
.text:0040EB4B                 mov     ebx, [esp+5Ch]
.text:0040EB4F                 mov     ecx, [esp+30h]
.text:0040EB53                 mov     edi, [esp+60h]
.text:0040EB57                 or      esi, ebx
.text:0040EB59                 mov     eax, [esp+4Ch]
.text:0040EB5D                 or      edi, edx
.text:0040EB5F                 mov     ebx, [esp+64h]
.text:0040EB63                 xor     edx, edx
.text:0040EB65                 test    cl, 10h
.text:0040EB68                 setz    dl
.text:0040EB6B                 mov     [ebx+10h], eax
.text:0040EB6E                 mov     [ebx+8], edi
.text:0040EB71                 mov     [ebx+0Ch], esi
.text:0040EB74                 dec     edx
.text:0040EB75                 and     edx, 0FFFFC000h
.text:0040EB7B                 mov     dword ptr [ebx+14h], 0
.text:0040EB82                 add     edx, 8000h
.text:0040EB88                 or      edx, 124h
.text:0040EB8E                 test    cl, 1
.text:0040EB91                 movzx   eax, dx
.text:0040EB94                 jnz     short loc_40EB9B
.text:0040EB96                 or      eax, 92h
.text:0040EB9B
.text:0040EB9B loc_40EB9B:                             ; CODE XREF: .text:0040EB94↑j
.text:0040EB9B                 mov     ebx, [esp+54h]
.text:0040EB9F                 xor     edx, edx
.text:0040EBA1                 xor     ebp, ebp
.text:0040EBA3                 mov     edi, [esp+50h]
.text:0040EBA7                 mov     ecx, [esp+64h]
.text:0040EBAB                 mov     esi, edi
.text:0040EBAD                 or      [ecx], eax
.text:0040EBAF                 mov     edi, ebx
.text:0040EBB1                 or      edi, ebp
.text:0040EBB3                 mov     ebp, edx
.text:0040EBB5                 mov     ebx, [esp+64h]
.text:0040EBB9                 or      ebp, esi
.text:0040EBBB                 mov     esi, [esp+58h]
.text:0040EBBF                 mov     edx, [esp+40h]
.text:0040EBC3                 mov     [ebx+30h], edi
.text:0040EBC6                 mov     [ebx+18h], esi
.text:0040EBC9                 mov     ecx, edx
.text:0040EBCB                 xor     esi, esi
.text:0040EBCD                 mov     [ebx+34h], ebp
.text:0040EBD0                 xor     edx, edx
.text:0040EBD2                 or      esi, ecx
.text:0040EBD4                 mov     dword ptr [esp+8], 989680h
.text:0040EBDC                 mov     ebx, [esp+3Ch]
.text:0040EBE0                 mov     ecx, esi
.text:0040EBE2                 mov     dword ptr [esp+0Ch], 0
.text:0040EBEA                 or      ebx, edx
.text:0040EBEC                 mov     edx, ebx
.text:0040EBEE                 sub     edx, 0D53E8000h
.text:0040EBF4                 sbb     ecx, 19DB1DEh
.text:0040EBFA                 mov     [esp+4], ecx
.text:0040EBFE                 mov     [esp], edx
.text:0040EC01                 call    sub_41D180
.text:0040EC06                 mov     edx, eax
.text:0040EC08                 mov     ecx, [esp+64h]
.text:0040EC0C                 shr     eax, 1Fh
.text:0040EC0F                 dec     eax
.text:0040EC10                 and     edx, eax
.text:0040EC12                 mov     [ecx+38h], edx
.text:0040EC15                 mov     [esp], ebx
.text:0040EC18                 mov     [esp+4], esi
.text:0040EC1C                 mov     dword ptr [esp+8], 989680h
.text:0040EC24                 mov     dword ptr [esp+0Ch], 0
.text:0040EC2C                 call    sub_41D2A0
.text:0040EC31                 lea     ecx, [eax+eax*4]
.text:0040EC34                 lea     esi, [ecx+ecx*4]
.text:0040EC37                 mov     eax, [esp+64h]
.text:0040EC3B                 shl     esi, 2
.text:0040EC3E                 mov     ebx, esi
.text:0040EC40                 shr     ebx, 1Fh
.text:0040EC43                 dec     ebx
.text:0040EC44                 and     ebx, esi
.text:0040EC46                 xor     esi, esi
.text:0040EC48                 mov     [eax+3Ch], ebx
.text:0040EC4B                 mov     edx, [esp+38h]
.text:0040EC4F                 mov     dword ptr [esp+8], 989680h
.text:0040EC57                 mov     ebx, [esp+34h]
.text:0040EC5B                 mov     dword ptr [esp+0Ch], 0
.text:0040EC63                 mov     ecx, edx
.text:0040EC65                 xor     edx, edx
.text:0040EC67                 or      ebx, edx
.text:0040EC69                 or      esi, ecx
.text:0040EC6B                 mov     edx, ebx
.text:0040EC6D                 sub     edx, 0D53E8000h
.text:0040EC73                 mov     ecx, esi
.text:0040EC75                 sbb     ecx, 19DB1DEh
.text:0040EC7B                 mov     [esp+4], ecx
.text:0040EC7F                 mov     [esp], edx
.text:0040EC82                 call    sub_41D180
.text:0040EC87                 mov     edx, eax
.text:0040EC89                 mov     ecx, [esp+64h]
.text:0040EC8D                 shr     eax, 1Fh
.text:0040EC90                 dec     eax
.text:0040EC91                 and     edx, eax
.text:0040EC93                 mov     [ecx+48h], edx
.text:0040EC96                 mov     [esp], ebx
.text:0040EC99                 mov     [esp+4], esi
.text:0040EC9D                 mov     dword ptr [esp+8], 989680h
.text:0040ECA5                 mov     dword ptr [esp+0Ch], 0
.text:0040ECAD                 call    sub_41D2A0
.text:0040ECB2                 lea     edx, [eax+eax*4]
.text:0040ECB5                 mov     ebx, [esp+64h]
.text:0040ECB9                 lea     ecx, [edx+edx*4]
.text:0040ECBC                 shl     ecx, 2
.text:0040ECBF                 mov     esi, ecx
.text:0040ECC1                 shr     esi, 1Fh
.text:0040ECC4                 dec     esi
.text:0040ECC5                 and     esi, ecx
.text:0040ECC7                 mov     [ebx+4Ch], esi
.text:0040ECCA                 mov     edx, [esp+48h]
.text:0040ECCE                 xor     esi, esi
.text:0040ECD0                 mov     dword ptr [esp+8], 989680h
.text:0040ECD8                 mov     ebx, [esp+44h]
.text:0040ECDC                 mov     dword ptr [esp+0Ch], 0
.text:0040ECE4                 mov     ecx, edx
.text:0040ECE6                 xor     edx, edx
.text:0040ECE8                 or      ebx, edx
.text:0040ECEA                 or      esi, ecx
.text:0040ECEC                 mov     edx, ebx
.text:0040ECEE                 sub     edx, 0D53E8000h
.text:0040ECF4                 mov     ecx, esi
.text:0040ECF6                 sbb     ecx, 19DB1DEh
.text:0040ECFC                 mov     [esp+4], ecx
.text:0040ED00                 mov     [esp], edx
.text:0040ED03                 call    sub_41D180
.text:0040ED08                 mov     edx, eax
.text:0040ED0A                 mov     ecx, [esp+64h]
.text:0040ED0E                 shr     eax, 1Fh
.text:0040ED11                 dec     eax
.text:0040ED12                 and     edx, eax
.text:0040ED14                 mov     [ecx+40h], edx
.text:0040ED17                 mov     [esp+4], esi
.text:0040ED1B                 mov     dword ptr [esp+8], 989680h
.text:0040ED23                 mov     dword ptr [esp+0Ch], 0
.text:0040ED2B                 mov     [esp], ebx
.text:0040ED2E                 call    sub_41D2A0
.text:0040ED33                 lea     edx, [eax+eax*4]
.text:0040ED36                 lea     esi, [edx+edx*4]
.text:0040ED39                 mov     eax, [esp+64h]
.text:0040ED3D                 shl     esi, 2
.text:0040ED40                 mov     edx, ebp
.text:0040ED42                 mov     ecx, esi
.text:0040ED44                 mov     dword ptr [eax+50h], 200h
.text:0040ED4B                 shr     ecx, 1Fh
.text:0040ED4E                 dec     ecx
.text:0040ED4F                 and     ecx, esi
.text:0040ED51                 test    ebp, ebp
.text:0040ED53                 mov     [eax+44h], ecx
.text:0040ED56                 mov     eax, edi
.text:0040ED58                 js      short loc_40ED92
.text:0040ED5A
.text:0040ED5A loc_40ED5A:                             ; CODE XREF: .text:0040ED9A↓j
.text:0040ED5A                 xor     esi, esi
.text:0040ED5C                 mov     ebp, edi
.text:0040ED5E                 mov     ecx, eax
.text:0040ED60                 shrd    ecx, edx, 9
.text:0040ED64                 mov     ebx, edx
.text:0040ED66                 and     ebp, 1FFh
.text:0040ED6C                 mov     eax, esi
.text:0040ED6E                 sar     ebx, 9
.text:0040ED71                 or      eax, ebp
.text:0040ED73                 jz      short loc_40ED7B
.text:0040ED75                 add     ecx, 1
.text:0040ED78                 adc     ebx, 0
.text:0040ED7B
.text:0040ED7B loc_40ED7B:                             ; CODE XREF: .text:0040ED73↑j
.text:0040ED7B                 mov     edx, [esp+64h]
.text:0040ED7F                 mov     eax, 1
.text:0040ED84                 mov     [edx+58h], ecx
.text:0040ED87                 mov     [edx+5Ch], ebx
.text:0040ED8A                 add     esp, 1Ch
.text:0040ED8D                 pop     ebx
.text:0040ED8E                 pop     esi
.text:0040ED8F                 pop     edi
.text:0040ED90                 pop     ebp
.text:0040ED91                 retn
.text:0040ED92 ; ---------------------------------------------------------------------------
.text:0040ED92
.text:0040ED92 loc_40ED92:                             ; CODE XREF: .text:0040ED58↑j
.text:0040ED92                 add     eax, 1FFh
.text:0040ED97                 adc     edx, 0
.text:0040ED9A                 jmp     short loc_40ED5A
.text:0040ED9A ; ---------------------------------------------------------------------------
.text:0040ED9C                 align 10h
.text:0040EDA0                 push    ebp
.text:0040EDA1                 push    edi
.text:0040EDA2                 xor     edi, edi
.text:0040EDA4                 push    esi
.text:0040EDA5                 xor     esi, esi
.text:0040EDA7                 push    ebx
.text:0040EDA8                 sub     esp, 0Ch
.text:0040EDAB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040EDB2                 call    LoadLibraryA
.text:0040EDB7                 sub     esp, 4
.text:0040EDBA                 mov     ebp, eax
.text:0040EDBC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040EDC4                 mov     [esp], eax
.text:0040EDC7                 call    GetProcAddress
.text:0040EDCC                 sub     esp, 8
.text:0040EDCF                 test    eax, eax
.text:0040EDD1                 jz      short loc_40EE02
.text:0040EDD3                 lea     ecx, [esp+8]
.text:0040EDD7                 mov     [esp+4], ecx
.text:0040EDDB                 mov     ecx, [esp+20h]
.text:0040EDDF                 mov     [esp], ecx
.text:0040EDE2                 call    eax
.text:0040EDE4                 sub     esp, 8
.text:0040EDE7                 mov     ebx, eax
.text:0040EDE9                 cmp     eax, 0FFFFFFFFh
.text:0040EDEC                 jz      short loc_40EE1D
.text:0040EDEE
.text:0040EDEE loc_40EDEE:                             ; CODE XREF: .text:0040EE26↓j
.text:0040EDEE                 mov     esi, [esp+8]
.text:0040EDF2                 mov     ecx, ebx
.text:0040EDF4                 xor     edi, edi
.text:0040EDF6                 xor     ebx, ebx
.text:0040EDF8                 mov     edx, esi
.text:0040EDFA                 mov     esi, ecx
.text:0040EDFC                 or      esi, edi
.text:0040EDFE                 mov     edi, ebx
.text:0040EE00                 or      edi, edx
.text:0040EE02
.text:0040EE02 loc_40EE02:                             ; CODE XREF: .text:0040EDD1↑j
.text:0040EE02                                         ; .text:0040EE24↓j
.text:0040EE02                 test    ebp, ebp
.text:0040EE04                 jz      short loc_40EE11
.text:0040EE06                 mov     [esp], ebp
.text:0040EE09                 call    FreeLibrary
.text:0040EE0E                 sub     esp, 4
.text:0040EE11
.text:0040EE11 loc_40EE11:                             ; CODE XREF: .text:0040EE04↑j
.text:0040EE11                 add     esp, 0Ch
.text:0040EE14                 mov     eax, esi
.text:0040EE16                 mov     edx, edi
.text:0040EE18                 pop     ebx
.text:0040EE19                 pop     esi
.text:0040EE1A                 pop     edi
.text:0040EE1B                 pop     ebp
.text:0040EE1C                 retn
.text:0040EE1D ; ---------------------------------------------------------------------------
.text:0040EE1D
.text:0040EE1D loc_40EE1D:                             ; CODE XREF: .text:0040EDEC↑j
.text:0040EE1D                 call    GetLastError
.text:0040EE22                 test    eax, eax
.text:0040EE24                 jnz     short loc_40EE02
.text:0040EE26                 jmp     short loc_40EDEE
.text:0040EE26 ; ---------------------------------------------------------------------------
.text:0040EE28                 align 10h
.text:0040EE30
.text:0040EE30 ; =============== S U B R O U T I N E =======================================
.text:0040EE30
.text:0040EE30
.text:0040EE30 ; int __cdecl sub_40EE30(LPCSTR lpFileName, int)
.text:0040EE30 sub_40EE30      proc near               ; CODE XREF: sub_40CAE0+2891↓p
.text:0040EE30
.text:0040EE30 lpRootPathName  = dword ptr -8FCh
.text:0040EE30 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040EE30 nVolumeNameSize = dword ptr -8F4h
.text:0040EE30 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040EE30 lpMaximumComponentLength= dword ptr -8ECh
.text:0040EE30 lpFileSystemFlags= dword ptr -8E8h
.text:0040EE30 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040EE30 nFileSystemNameSize= dword ptr -8E0h
.text:0040EE30 VolumeSerialNumber= dword ptr -8D8h
.text:0040EE30 MaximumComponentLength= dword ptr -8D4h
.text:0040EE30 FileSystemFlags = dword ptr -8D0h
.text:0040EE30 var_8CC         = dword ptr -8CCh
.text:0040EE30 var_8C8         = dword ptr -8C8h
.text:0040EE30 var_8C4         = dword ptr -8C4h
.text:0040EE30 var_8C0         = dword ptr -8C0h
.text:0040EE30 var_8BC         = dword ptr -8BCh
.text:0040EE30 var_8B8         = dword ptr -8B8h
.text:0040EE30 var_8B4         = dword ptr -8B4h
.text:0040EE30 var_8B0         = dword ptr -8B0h
.text:0040EE30 var_8AC         = dword ptr -8ACh
.text:0040EE30 var_8A8         = dword ptr -8A8h
.text:0040EE30 var_8A4         = dword ptr -8A4h
.text:0040EE30 var_8A0         = dword ptr -8A0h
.text:0040EE30 var_89C         = dword ptr -89Ch
.text:0040EE30 FileSystemNameBuffer= byte ptr -88Ch
.text:0040EE30 VolumeNameBuffer= byte ptr -48Ch
.text:0040EE30 var_8C          = dword ptr -8Ch
.text:0040EE30 var_88          = dword ptr -88h
.text:0040EE30 var_84          = dword ptr -84h
.text:0040EE30 var_80          = dword ptr -80h
.text:0040EE30 var_7C          = dword ptr -7Ch
.text:0040EE30 var_78          = dword ptr -78h
.text:0040EE30 var_74          = dword ptr -74h
.text:0040EE30 var_70          = dword ptr -70h
.text:0040EE30 var_6C          = dword ptr -6Ch
.text:0040EE30 var_5C          = dword ptr -5Ch
.text:0040EE30 var_58          = dword ptr -58h
.text:0040EE30 var_54          = dword ptr -54h
.text:0040EE30 var_50          = dword ptr -50h
.text:0040EE30 var_4C          = dword ptr -4Ch
.text:0040EE30 var_48          = dword ptr -48h
.text:0040EE30 var_44          = dword ptr -44h
.text:0040EE30 var_3C          = dword ptr -3Ch
.text:0040EE30 var_38          = dword ptr -38h
.text:0040EE30 var_34          = dword ptr -34h
.text:0040EE30 lpFileName      = dword ptr  4
.text:0040EE30 arg_4           = dword ptr  8
.text:0040EE30
.text:0040EE30                 push    ebp
.text:0040EE31                 xor     eax, eax
.text:0040EE33                 mov     ecx, 0Dh
.text:0040EE38                 push    edi
.text:0040EE39                 push    esi
.text:0040EE3A                 push    ebx
.text:0040EE3B                 sub     esp, 8ECh
.text:0040EE41                 lea     edi, [esp+8FCh+var_5C]
.text:0040EE48                 cld
.text:0040EE49                 lea     edx, [esp+8FCh+var_8C]
.text:0040EE50                 rep stosd
.text:0040EE52                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040EE56                 lea     esi, [esp+8FCh+var_5C]
.text:0040EE5D                 mov     edx, [esp+8FCh+lpFileName]
.text:0040EE64                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:0040EE67                 call    sub_40D890
.text:0040EE6C                 test    eax, eax
.text:0040EE6E                 mov     edx, 0FFFFFFFFh
.text:0040EE73                 jz      loc_40F204
.text:0040EE79                 mov     edx, [esp+8FCh+var_88]
.text:0040EE80                 mov     ebp, [esp+8FCh+var_84]
.text:0040EE87                 mov     edi, [esp+8FCh+var_80]
.text:0040EE8E                 mov     [esp+8FCh+var_58], edx
.text:0040EE95                 mov     ecx, [esp+8FCh+var_7C]
.text:0040EE9C                 mov     ebx, [esp+8FCh+var_8C]
.text:0040EEA3                 mov     [esp+8FCh+var_54], ebp
.text:0040EEAA                 mov     edx, [esp+8FCh+var_78]
.text:0040EEB1                 mov     ebp, [esp+8FCh+var_74]
.text:0040EEB8                 mov     [esp+8FCh+var_50], edi
.text:0040EEBF                 test    bl, 10h
.text:0040EEC2                 mov     edi, [esp+8FCh+var_70]
.text:0040EEC9                 mov     [esp+8FCh+var_4C], ecx
.text:0040EED0                 mov     ecx, [esp+8FCh+var_6C]
.text:0040EED7                 mov     [esp+8FCh+var_5C], ebx
.text:0040EEDE                 mov     [esp+8FCh+var_48], edx
.text:0040EEE5                 mov     [esp+8FCh+var_44], ebp
.text:0040EEEC                 mov     [esp+8FCh+var_3C], edi
.text:0040EEF3                 mov     [esp+8FCh+var_38], ecx
.text:0040EEFA                 jnz     loc_40F220
.text:0040EF00                 mov     ebx, 1
.text:0040EF05                 mov     [esp+8FCh+var_34], ebx
.text:0040EF0C
.text:0040EF0C loc_40EF0C:                             ; CODE XREF: sub_40EE30+406↓j
.text:0040EF0C                 mov     eax, [esp+8FCh+lpFileName]
.text:0040EF13                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040EF17                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040EF1B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040EF1E                 call    sub_4192C0
.text:0040EF23                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040EF26                 call    sub_40D180
.text:0040EF2B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040EF2F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040EF33                 mov     ebp, eax
.text:0040EF35                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040EF39                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040EF3D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040EF44                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040EF48                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040EF4C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040EF50                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040EF58                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040EF60                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040EF63                 call    GetVolumeInformationA
.text:0040EF68                 sub     esp, 20h
.text:0040EF6B                 test    eax, eax
.text:0040EF6D                 lea     edi, [esp+8FCh+var_8CC]
.text:0040EF71                 setz    bl
.text:0040EF74                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040EF77                 xor     ebp, ebp
.text:0040EF79                 movzx   edx, bl
.text:0040EF7C                 dec     edx
.text:0040EF7D                 xor     ebx, ebx
.text:0040EF7F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040EF83                 call    free
.text:0040EF88                 cld
.text:0040EF89                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040EF8D                 mov     [esi+1Ch], ecx
.text:0040EF90                 mov     ecx, 0Dh
.text:0040EF95                 rep movsd
.text:0040EF97                 mov     edi, [esp+8FCh+var_8A0]
.text:0040EF9B                 mov     edx, [esp+8FCh+var_89C]
.text:0040EF9F                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040EFA3                 or      ebp, edi
.text:0040EFA5                 mov     esi, [esp+8FCh+var_8B0]
.text:0040EFA9                 mov     edi, [esp+8FCh+arg_4]
.text:0040EFB0                 or      edx, ebx
.text:0040EFB2                 mov     [edi+8], edx
.text:0040EFB5                 xor     edx, edx
.text:0040EFB7                 test    cl, 10h
.text:0040EFBA                 setz    dl
.text:0040EFBD                 mov     [edi+0Ch], ebp
.text:0040EFC0                 mov     [edi+10h], esi
.text:0040EFC3                 mov     dword ptr [edi+14h], 0
.text:0040EFCA                 dec     edx
.text:0040EFCB                 and     edx, 0FFFFC000h
.text:0040EFD1                 add     edx, 8000h
.text:0040EFD7                 or      edx, 124h
.text:0040EFDD                 test    cl, 1
.text:0040EFE0                 movzx   eax, dx
.text:0040EFE3                 jnz     short loc_40EFEA
.text:0040EFE5                 or      eax, 92h
.text:0040EFEA
.text:0040EFEA loc_40EFEA:                             ; CODE XREF: sub_40EE30+1B3↑j
.text:0040EFEA                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040EFEE                 xor     edx, edx
.text:0040EFF0                 xor     ebp, ebp
.text:0040EFF2                 mov     edi, [esp+8FCh+var_8AC]
.text:0040EFF6                 mov     ecx, [esp+8FCh+arg_4]
.text:0040EFFD                 mov     esi, edi
.text:0040EFFF                 or      [ecx], eax
.text:0040F001                 mov     edi, ebx
.text:0040F003                 or      edi, ebp
.text:0040F005                 mov     ebp, edx
.text:0040F007                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040F00B                 or      ebp, esi
.text:0040F00D                 mov     esi, [esp+8FCh+arg_4]
.text:0040F014                 mov     edx, [esp+8FCh+var_8BC]
.text:0040F018                 mov     [esi+18h], ebx
.text:0040F01B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040F01F                 mov     ecx, edx
.text:0040F021                 mov     [esi+30h], edi
.text:0040F024                 xor     edx, edx
.text:0040F026                 mov     [esi+34h], ebp
.text:0040F029                 or      ebx, edx
.text:0040F02B                 xor     esi, esi
.text:0040F02D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040F035                 or      esi, ecx
.text:0040F037                 mov     edx, ebx
.text:0040F039                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040F041                 sub     edx, 0D53E8000h
.text:0040F047                 mov     ecx, esi
.text:0040F049                 sbb     ecx, 19DB1DEh
.text:0040F04F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040F053                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040F056                 call    sub_41D180
.text:0040F05B                 mov     edx, eax
.text:0040F05D                 mov     ecx, [esp+8FCh+arg_4]
.text:0040F064                 shr     eax, 1Fh
.text:0040F067                 dec     eax
.text:0040F068                 and     edx, eax
.text:0040F06A                 mov     [ecx+38h], edx
.text:0040F06D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040F070                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040F074                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040F07C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040F084                 call    sub_41D2A0
.text:0040F089                 lea     ecx, [eax+eax*4]
.text:0040F08C                 lea     ebx, [ecx+ecx*4]
.text:0040F08F                 mov     eax, [esp+8FCh+arg_4]
.text:0040F096                 shl     ebx, 2
.text:0040F099                 mov     esi, ebx
.text:0040F09B                 shr     esi, 1Fh
.text:0040F09E                 dec     esi
.text:0040F09F                 and     esi, ebx
.text:0040F0A1                 mov     [eax+3Ch], esi
.text:0040F0A4                 mov     edx, [esp+8FCh+var_8C4]
.text:0040F0A8                 xor     esi, esi
.text:0040F0AA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040F0B2                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040F0B6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040F0BE                 mov     ecx, edx
.text:0040F0C0                 xor     edx, edx
.text:0040F0C2                 or      ebx, edx
.text:0040F0C4                 or      esi, ecx
.text:0040F0C6                 mov     edx, ebx
.text:0040F0C8                 sub     edx, 0D53E8000h
.text:0040F0CE                 mov     ecx, esi
.text:0040F0D0                 sbb     ecx, 19DB1DEh
.text:0040F0D6                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040F0DA                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040F0DD                 call    sub_41D180
.text:0040F0E2                 mov     edx, eax
.text:0040F0E4                 mov     ecx, [esp+8FCh+arg_4]
.text:0040F0EB                 shr     eax, 1Fh
.text:0040F0EE                 dec     eax
.text:0040F0EF                 and     edx, eax
.text:0040F0F1                 mov     [ecx+48h], edx
.text:0040F0F4                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040F0F7                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040F0FB                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040F103                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040F10B                 call    sub_41D2A0
.text:0040F110                 lea     ecx, [eax+eax*4]
.text:0040F113                 lea     ebx, [ecx+ecx*4]
.text:0040F116                 mov     eax, [esp+8FCh+arg_4]
.text:0040F11D                 shl     ebx, 2
.text:0040F120                 mov     esi, ebx
.text:0040F122                 shr     esi, 1Fh
.text:0040F125                 dec     esi
.text:0040F126                 and     esi, ebx
.text:0040F128                 mov     [eax+4Ch], esi
.text:0040F12B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040F12F                 xor     esi, esi
.text:0040F131                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040F139                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040F13D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040F145                 mov     ecx, edx
.text:0040F147                 xor     edx, edx
.text:0040F149                 or      ebx, edx
.text:0040F14B                 or      esi, ecx
.text:0040F14D                 mov     edx, ebx
.text:0040F14F                 sub     edx, 0D53E8000h
.text:0040F155                 mov     ecx, esi
.text:0040F157                 sbb     ecx, 19DB1DEh
.text:0040F15D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040F161                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040F164                 call    sub_41D180
.text:0040F169                 mov     edx, eax
.text:0040F16B                 mov     ecx, [esp+8FCh+arg_4]
.text:0040F172                 shr     eax, 1Fh
.text:0040F175                 dec     eax
.text:0040F176                 and     edx, eax
.text:0040F178                 mov     [ecx+40h], edx
.text:0040F17B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040F17E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040F182                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040F18A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040F192                 call    sub_41D2A0
.text:0040F197                 lea     ebx, [eax+eax*4]
.text:0040F19A                 mov     esi, [esp+8FCh+arg_4]
.text:0040F1A1                 lea     edx, [ebx+ebx*4]
.text:0040F1A4                 shl     edx, 2
.text:0040F1A7                 mov     eax, edi
.text:0040F1A9                 mov     ecx, edx
.text:0040F1AB                 mov     dword ptr [esi+50h], 200h
.text:0040F1B2                 shr     ecx, 1Fh
.text:0040F1B5                 dec     ecx
.text:0040F1B6                 and     ecx, edx
.text:0040F1B8                 test    ebp, ebp
.text:0040F1BA                 mov     edx, ebp
.text:0040F1BC                 mov     [esi+44h], ecx
.text:0040F1BF                 js      short loc_40F211
.text:0040F1C1
.text:0040F1C1 loc_40F1C1:                             ; CODE XREF: sub_40EE30+3E9↓j
.text:0040F1C1                 xor     esi, esi
.text:0040F1C3                 mov     ebp, edi
.text:0040F1C5                 mov     ecx, eax
.text:0040F1C7                 shrd    ecx, edx, 9
.text:0040F1CB                 mov     ebx, edx
.text:0040F1CD                 and     ebp, 1FFh
.text:0040F1D3                 mov     eax, esi
.text:0040F1D5                 sar     ebx, 9
.text:0040F1D8                 or      eax, ebp
.text:0040F1DA                 jz      short loc_40F1E2
.text:0040F1DC                 add     ecx, 1
.text:0040F1DF                 adc     ebx, 0
.text:0040F1E2
.text:0040F1E2 loc_40F1E2:                             ; CODE XREF: sub_40EE30+3AA↑j
.text:0040F1E2                 mov     edx, [esp+8FCh+arg_4]
.text:0040F1E9                 mov     [edx+5Ch], ebx
.text:0040F1EC                 mov     ebx, [esp+8FCh+lpFileName]
.text:0040F1F3                 mov     [edx+58h], ecx
.text:0040F1F6                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040F1FA                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040F1FD                 call    sub_40E050
.text:0040F202                 xor     edx, edx
.text:0040F204
.text:0040F204 loc_40F204:                             ; CODE XREF: sub_40EE30+43↑j
.text:0040F204                 add     esp, 8ECh
.text:0040F20A                 mov     eax, edx
.text:0040F20C                 pop     ebx
.text:0040F20D                 pop     esi
.text:0040F20E                 pop     edi
.text:0040F20F                 pop     ebp
.text:0040F210                 retn
.text:0040F211 ; ---------------------------------------------------------------------------
.text:0040F211
.text:0040F211 loc_40F211:                             ; CODE XREF: sub_40EE30+38F↑j
.text:0040F211                 add     eax, 1FFh
.text:0040F216                 adc     edx, 0
.text:0040F219                 jmp     short loc_40F1C1
.text:0040F219 ; ---------------------------------------------------------------------------
.text:0040F21B                 align 10h
.text:0040F220
.text:0040F220 loc_40F220:                             ; CODE XREF: sub_40EE30+CA↑j
.text:0040F220                 mov     eax, [esp+8FCh+lpFileName]
.text:0040F227                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040F22A                 call    sub_40DA00
.text:0040F22F                 mov     [esp+8FCh+var_34], eax
.text:0040F236                 jmp     loc_40EF0C
.text:0040F236 sub_40EE30      endp
.text:0040F236
.text:0040F236 ; ---------------------------------------------------------------------------
.text:0040F23B                 align 10h
.text:0040F240 ; START OF FUNCTION CHUNK FOR sub_40CAE0
.text:0040F240
.text:0040F240 loc_40F240:                             ; CODE XREF: sub_40CAE0+26↑j
.text:0040F240                 cld
.text:0040F241                 sub     esp, 2Ch
.text:0040F244                 xor     eax, eax
.text:0040F246                 mov     [esp+2Ch+var_10], ebx
.text:0040F24A                 mov     ecx, 18h
.text:0040F24F                 mov     ebx, [esp+2Ch+arg_0]
.text:0040F253                 mov     [esp+2Ch+var_C], esi
.text:0040F257                 mov     esi, [esp+2Ch+arg_4]
.text:0040F25B                 test    ebx, ebx
.text:0040F25D                 mov     [esp+2Ch+var_8], edi
.text:0040F261                 mov     edi, esi
.text:0040F263                 mov     [esp+2Ch+var_4], ebp
.text:0040F267                 rep stosd
.text:0040F269                 jz      short loc_40F270
.text:0040F26B                 cmp     byte ptr [ebx], 0
.text:0040F26E                 jnz     short loc_40F288
.text:0040F270
.text:0040F270 loc_40F270:                             ; CODE XREF: sub_40CAE0+2789↑j
.text:0040F270                 xor     edx, edx
.text:0040F272
.text:0040F272 loc_40F272:                             ; CODE XREF: sub_40CAE0+27BF↓j
.text:0040F272                                         ; sub_40CAE0+2868↓j
.text:0040F272                 mov     ebx, [esp+2Ch+var_10]
.text:0040F276                 mov     eax, edx
.text:0040F278                 mov     esi, [esp+2Ch+var_C]
.text:0040F27C                 mov     edi, [esp+2Ch+var_8]
.text:0040F280                 mov     ebp, [esp+2Ch+var_4]
.text:0040F284                 add     esp, 2Ch
.text:0040F287                 retn
.text:0040F288 ; ---------------------------------------------------------------------------
.text:0040F288
.text:0040F288 loc_40F288:                             ; CODE XREF: sub_40CAE0+278E↑j
.text:0040F288                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040F290                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040F293                 call    sub_4191E0
.text:0040F298                 test    eax, eax
.text:0040F29A                 mov     edx, 0FFFFFFFFh
.text:0040F29F                 jnz     short loc_40F272
.text:0040F2A1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040F2A4                 call    sub_419090
.text:0040F2A9                 mov     [esp+2Ch+lpFileName], eax
.text:0040F2AC                 call    sub_40D180
.text:0040F2B1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040F2B4                 mov     ebp, eax
.text:0040F2B6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040F2BE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040F2C6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040F2CE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040F2D6                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040F2DE                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040F2E6                 call    CreateFileA
.text:0040F2EB                 sub     esp, 1Ch
.text:0040F2EE                 mov     ebx, eax
.text:0040F2F0                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040F2F4                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:0040F2F7                 call    sub_40DB80
.text:0040F2FC                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040F2FF                 mov     edi, eax
.text:0040F301                 call    CloseHandle
.text:0040F306                 sub     esp, 4
.text:0040F309                 cmp     edi, 0FFFFFFFFh
.text:0040F30C                 jz      short loc_40F36A
.text:0040F30E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040F312                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040F315                 call    sub_40E050
.text:0040F31A
.text:0040F31A loc_40F31A:                             ; CODE XREF: sub_40CAE0+2898↓j
.text:0040F31A                 mov     edx, [esi]
.text:0040F31C                 and     edx, 0F000h
.text:0040F322                 cmp     edx, 4000h
.text:0040F328                 jz      short loc_40F35D
.text:0040F32A
.text:0040F32A loc_40F32A:                             ; CODE XREF: sub_40CAE0+2888↓j
.text:0040F32A                 cmp     edi, 0FFFFFFFFh
.text:0040F32D                 jz      short loc_40F34D
.text:0040F32F
.text:0040F32F loc_40F32F:                             ; CODE XREF: sub_40CAE0+287B↓j
.text:0040F32F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040F336                 call    SetErrorMode
.text:0040F33B                 sub     esp, 4
.text:0040F33E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040F341                 call    free
.text:0040F346                 mov     edx, edi
.text:0040F348                 jmp     loc_40F272
.text:0040F34D ; ---------------------------------------------------------------------------
.text:0040F34D
.text:0040F34D loc_40F34D:                             ; CODE XREF: sub_40CAE0+284D↑j
.text:0040F34D                 call    sub_40D830
.text:0040F352                 mov     esi, eax
.text:0040F354                 call    _errno
.text:0040F359                 mov     [eax], esi
.text:0040F35B                 jmp     short loc_40F32F
.text:0040F35D ; ---------------------------------------------------------------------------
.text:0040F35D
.text:0040F35D loc_40F35D:                             ; CODE XREF: sub_40CAE0+2848↑j
.text:0040F35D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:0040F360                 call    sub_40DA00
.text:0040F365                 mov     [esi+18h], eax
.text:0040F368                 jmp     short loc_40F32A
.text:0040F36A ; ---------------------------------------------------------------------------
.text:0040F36A
.text:0040F36A loc_40F36A:                             ; CODE XREF: sub_40CAE0+282C↑j
.text:0040F36A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040F36E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:0040F371                 call    sub_40EE30
.text:0040F376                 mov     edi, eax
.text:0040F378                 jmp     short loc_40F31A
.text:0040F378 ; END OF FUNCTION CHUNK FOR sub_40CAE0
.text:0040F378 ; ---------------------------------------------------------------------------
.text:0040F37A                 db 6 dup(90h)
.text:0040F380 dword_40F380    dd 3020100h, 7060504h, 0B0A0908h, 0F0E0D0Ch, 13121110h
.text:0040F380                                         ; DATA XREF: .text:0040F904↓o
.text:0040F380                 dd 17161514h, 1B1A1918h, 1F1E1D1Ch, 23222120h, 27262524h
.text:0040F380                 dd 2B2A2928h, 2F2E2D2Ch, 33323130h, 37363534h, 3B3A3938h
.text:0040F380                 dd 3F3E3D3Ch, 43424140h, 47464544h, 4B4A4948h, 4F4E4D4Ch
.text:0040F380                 dd 53525150h, 57565554h, 5B5A5958h, 5F5E5D5Ch, 63626160h
.text:0040F380                 dd 67666564h, 6B6A6968h, 6F6E6D6Ch, 73727170h, 77767574h
.text:0040F380                 dd 7B7A7978h, 7F7E7D7Ch, 83828180h, 87868584h, 8B8A8988h
.text:0040F380                 dd 8F8E8D8Ch, 93929190h, 97969594h, 9B9A9998h, 9F9E9D9Ch
.text:0040F380                 dd 0A3A2A1A0h, 0A7A6A5A4h, 0ABAAA9A8h, 0AFAEADACh, 0B3B2B1B0h
.text:0040F380                 dd 0B7B6B5B4h, 0BBBAB9B8h, 0BFBEBDBCh, 0C3C2C1C0h, 0C7C6C5C4h
.text:0040F380                 dd 0CBCAC9C8h, 0CFCECDCCh, 0D3D2D1D0h, 0D7D6D5D4h, 0DBDAD9D8h
.text:0040F380                 dd 0DFDEDDDCh, 0E3E2E1E0h, 0E7E6E5E4h, 0EBEAE9E8h, 0EFEEEDECh
.text:0040F380                 dd 0F3F2F1F0h, 0F7F6F5F4h, 0FBFAF9F8h, 0FFFEFDFCh, 8, 1
.text:0040F380                 dd 8, 0
.text:0040F490                 dd 0FFh, 18h, 1Ch, 0
.text:0040F4A0                 dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:0040F4A0                 dd 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:0040F4A0                 dd 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:0040F4A0                 dd 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:0040F4A0                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:0040F4A0                 dd 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 41h, 42h, 43h, 44h, 45h
.text:0040F4A0                 dd 46h, 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h
.text:0040F4A0                 dd 51h, 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5Ah, 5Bh
.text:0040F4A0                 dd 5Ch, 5Dh, 5Eh, 5Fh, 60h, 61h, 62h, 63h, 64h, 65h, 66h
.text:0040F4A0                 dd 67h, 68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h, 71h
.text:0040F4A0                 dd 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 7Bh, 7Ch
.text:0040F4A0                 dd 7Dh, 7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h
.text:0040F4A0                 dd 88h, 89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h
.text:0040F4A0                 dd 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh
.text:0040F4A0                 dd 9Eh, 9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h
.text:0040F4A0                 dd 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
.text:0040F4A0                 dd 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.text:0040F4A0                 dd 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
.text:0040F4A0                 dd 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh
.text:0040F4A0                 dd 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
.text:0040F4A0                 dd 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh
.text:0040F4A0                 dd 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h
.text:0040F4A0                 dd 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh
.text:0040F4A0                 dd 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
.text:0040F4A0                 dd 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh, 26748Dh
.text:0040F4A0                 dd 418520h, 5 dup(0)
.text:0040F8B8                 dd 0FFFFFFFFh, 0
.text:0040F8C0                 dd 13h, 10h dup(0)
.text:0040F904                 dd offset dword_40F380
.text:0040F908                 dd offset dword_40F380+100h
.text:0040F90C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:0040F910                 db 10h dup(90h)
.text:0040F920                 dd 0
.text:0040F924 dword_40F924    dd 2, 4, 6, 8, 0Ah, 0Ch, 0Eh, 10h, 12h, 14h, 16h, 18h
.text:0040F924                 dd 1Ah, 1Ch, 1Eh, 20h, 22h, 24h, 26h, 28h, 2Ah, 2Ch, 2Eh
.text:0040F924                 dd 30h, 32h, 34h, 36h, 38h, 3Ah, 3Ch, 3Eh, 40h, 42h, 44h
.text:0040F924                 dd 46h, 48h, 4Ah, 4Ch, 4Eh, 50h, 52h, 54h, 56h, 58h, 5Ah
.text:0040F924                 dd 5Ch, 5Eh, 60h, 62h, 64h, 66h, 68h, 6Ah, 6Ch, 6Eh, 70h
.text:0040F924                 dd 72h, 74h, 76h, 78h, 7Ah, 7Ch, 7Eh, 80h, 82h, 84h, 86h
.text:0040F924                 dd 88h, 8Ah, 8Ch, 8Eh, 90h, 92h, 94h, 96h, 98h, 9Ah, 9Ch
.text:0040F924                 dd 9Eh, 0A0h, 0A2h, 0A4h, 0A6h, 0A8h, 0AAh, 0ACh, 0AEh
.text:0040F924                 dd 0B0h, 0B2h, 0B4h, 0B6h, 0B8h, 0BAh, 0BCh, 0BEh, 0C0h
.text:0040F924                 dd 0C2h, 0C4h, 0C6h, 0C8h, 0CAh, 0CCh, 0CEh, 0D0h, 0D2h
.text:0040F924                 dd 0D4h, 0D6h, 0D8h, 0DAh, 0DCh, 0DEh, 0E0h, 0E2h, 0E4h
.text:0040F924                 dd 0E6h, 0E8h, 0EAh, 0ECh, 0EEh, 0F0h, 0F2h, 0F4h, 0F6h
.text:0040F924                 dd 0F8h, 0FAh, 0FCh, 0FEh, 100h, 102h, 104h, 106h, 108h
.text:0040F924                 dd 10Ah, 10Ch, 10Eh, 110h, 112h, 114h, 116h, 118h, 11Ah
.text:0040F924                 dd 11Ch, 11Eh, 120h, 122h, 124h, 126h, 128h, 12Ah, 12Ch
.text:0040F924                 dd 12Eh, 130h, 132h, 134h, 136h, 138h, 13Ah, 13Ch, 13Eh
.text:0040F924                 dd 140h, 142h, 144h, 146h, 148h, 14Ah, 14Ch, 14Eh, 150h
.text:0040F924                 dd 152h, 154h, 156h, 158h, 15Ah, 15Ch, 15Eh, 160h, 162h
.text:0040F924                 dd 164h, 166h, 168h, 16Ah, 16Ch, 16Eh, 170h, 172h, 174h
.text:0040F924                 dd 176h, 178h, 17Ah, 17Ch, 17Eh, 180h, 182h, 184h, 186h
.text:0040F924                 dd 188h, 18Ah, 18Ch, 18Eh, 190h, 192h, 194h, 196h, 198h
.text:0040F924                 dd 19Ah, 19Ch, 19Eh, 1A0h, 1A2h, 1A4h, 1A6h, 1A8h, 1AAh
.text:0040F924                 dd 1ACh, 1AEh, 1B0h, 1B2h, 1B4h, 1B6h, 1B8h, 1BAh, 1BCh
.text:0040F924                 dd 1BEh, 1C0h, 1C2h, 1C4h, 1C6h, 1C8h, 1CAh, 1CCh, 1CEh
.text:0040F924                 dd 1D0h, 1D2h, 1D4h, 1D6h, 1D8h, 1DAh, 1DCh, 1DEh, 1E0h
.text:0040F924                 dd 1E2h, 1E4h, 1E6h, 1E8h, 1EAh, 1ECh, 1EEh, 1F0h, 1F2h
.text:0040F924                 dd 1F4h, 1F6h, 1F8h, 1FAh, 1FCh, 1FEh, 200h, 202h, 204h
.text:0040F924                 dd 206h, 208h, 20Ah, 20Ch, 20Eh, 210h, 212h, 214h, 216h
.text:0040F924                 dd 218h, 21Ah, 21Ch, 21Eh, 220h, 222h, 224h, 226h, 228h
.text:0040F924                 dd 22Ah, 22Ch, 22Eh, 230h, 232h, 234h, 236h, 238h, 23Ah
.text:0040F924                 dd 23Ch, 23Eh, 240h, 242h, 244h, 246h, 248h, 24Ah, 24Ch
.text:0040F924                 dd 24Eh, 250h, 252h, 254h, 256h, 258h, 25Ah, 25Ch, 25Eh
.text:0040F924                 dd 260h, 262h, 264h, 266h, 268h, 26Ah, 26Ch, 26Eh, 270h
.text:0040F924                 dd 272h, 274h, 276h, 278h, 27Ah, 27Ch, 27Eh, 280h, 282h
.text:0040F924                 dd 284h, 286h, 288h, 28Ah, 28Ch, 28Eh, 290h, 292h, 294h
.text:0040F924                 dd 296h, 298h, 29Ah, 29Ch, 29Eh, 2A0h, 2A2h, 2A4h, 2A6h
.text:0040F924                 dd 2A8h, 2AAh, 2ACh, 2AEh, 2B0h, 2B2h, 2B4h, 2B6h, 2B8h
.text:0040F924                 dd 2BAh, 2BCh, 2BEh, 2C0h, 2C2h, 2C4h, 2C6h, 2C8h, 2CAh
.text:0040F924                 dd 2CCh, 2CEh, 2D0h, 2D2h, 2D4h, 2D6h, 2D8h, 2DAh, 2DCh
.text:0040F924                 dd 2DEh, 2E0h, 2E2h, 2E4h, 2E6h, 2E8h, 2EAh, 2ECh, 2EEh
.text:0040F924                 dd 2F0h, 2F2h, 2F4h, 2F6h, 2F8h, 2FAh, 2FCh, 2FEh, 300h
.text:0040F924                 dd 302h, 304h, 306h, 308h, 30Ah, 30Ch, 30Eh, 310h, 312h
.text:0040F924                 dd 314h, 316h, 318h, 31Ah, 31Ch, 31Eh, 320h, 322h, 324h
.text:0040F924                 dd 326h, 328h, 32Ah, 32Ch, 32Eh, 330h, 332h, 334h, 336h
.text:0040F924                 dd 338h, 33Ah, 33Ch, 33Eh, 340h, 342h, 344h, 346h, 348h
.text:0040F924                 dd 34Ah, 34Ch, 34Eh, 350h, 352h, 354h, 356h, 358h, 35Ah
.text:0040F924                 dd 35Ch, 35Eh, 360h, 362h, 364h, 366h, 368h, 36Ah, 36Ch
.text:0040F924                 dd 36Eh, 370h, 372h, 374h, 376h, 378h, 37Ah, 37Ch, 37Eh
.text:0040F924                 dd 380h, 382h, 384h, 386h, 388h, 38Ah, 38Ch, 38Eh, 390h
.text:0040F924                 dd 392h, 394h, 396h, 398h, 39Ah, 39Ch, 39Eh, 3A0h, 3A2h
.text:0040F924                 dd 3A4h, 3A6h, 3A8h, 3AAh, 3ACh, 3AEh, 3B0h, 3B2h, 3B4h
.text:0040F924                 dd 3B6h, 3B8h, 3BAh, 3BCh, 3BEh, 3C0h, 3C2h, 3C4h, 3C6h
.text:0040F924                 dd 3C8h, 3CAh, 3CCh, 3CEh, 3D0h, 3D2h, 3D4h, 3D6h, 3D8h
.text:0040F924                 dd 3DAh, 3DCh, 3DEh, 3E0h, 3E2h, 3E4h, 3E6h, 3E8h, 3EAh
.text:0040F924                 dd 3ECh, 3EEh, 3F0h, 3F2h, 3F4h, 3F6h, 3F8h, 3FAh, 3FCh
.text:0040F924                 dd 3FEh, 400h
.text:00410124                 dd 402h, 404h, 406h, 408h, 40Ah, 40Ch, 40Eh, 410h, 412h
.text:00410124                 dd 414h, 416h, 418h, 41Ah, 41Ch, 41Eh, 420h, 422h, 424h
.text:00410124                 dd 426h, 428h, 42Ah, 42Ch, 42Eh, 430h, 432h, 434h, 436h
.text:00410124                 dd 438h, 43Ah, 43Ch, 43Eh, 440h, 442h, 444h, 446h, 448h
.text:00410124                 dd 44Ah, 44Ch, 44Eh, 450h, 452h, 454h, 456h, 458h, 45Ah
.text:00410124                 dd 45Ch, 45Eh, 460h, 462h, 464h, 466h, 468h, 46Ah, 46Ch
.text:00410124                 dd 46Eh, 470h, 472h, 474h, 476h, 478h, 47Ah, 47Ch, 47Eh
.text:00410124                 dd 480h, 482h, 484h, 486h, 488h, 48Ah, 48Ch, 48Eh, 490h
.text:00410124                 dd 492h, 494h, 496h, 498h, 49Ah, 49Ch, 49Eh, 4A0h, 4A2h
.text:00410124                 dd 4A4h, 4A6h, 4A8h, 4AAh, 4ACh, 4AEh, 4B0h, 4B2h, 4B4h
.text:00410124                 dd 4B6h, 4B8h, 4BAh, 4BCh, 4BEh, 4C0h, 4C2h, 4C4h, 4C6h
.text:00410124                 dd 4C8h, 4CAh, 4CCh, 4CEh, 4D0h, 4D2h, 4D4h, 4D6h, 4D8h
.text:00410124                 dd 4DAh, 4DCh, 4DEh, 4E0h, 4E2h, 4E4h, 4E6h, 4E8h, 4EAh
.text:00410124                 dd 4ECh, 4EEh, 4F0h, 4F2h, 4F4h, 4F6h, 4F8h, 4FAh, 4FCh
.text:00410124                 dd 4FEh, 500h, 502h, 504h, 506h, 508h, 50Ah, 50Ch, 50Eh
.text:00410124                 dd 510h, 512h, 514h, 516h, 518h, 51Ah, 51Ch, 51Eh, 520h
.text:00410124                 dd 522h, 524h, 526h, 528h, 52Ah, 52Ch, 52Eh, 530h, 532h
.text:00410124                 dd 534h, 536h, 538h, 53Ah, 53Ch, 53Eh, 540h, 542h, 544h
.text:00410124                 dd 546h, 548h, 54Ah, 54Ch, 54Eh, 550h, 552h, 554h, 556h
.text:00410124                 dd 558h, 55Ah, 55Ch, 55Eh, 560h, 562h, 564h, 566h, 568h
.text:00410124                 dd 56Ah, 56Ch, 56Eh, 570h, 572h, 574h, 576h, 578h, 57Ah
.text:00410124                 dd 57Ch, 57Eh, 580h, 582h, 584h, 586h, 588h, 58Ah, 58Ch
.text:00410124                 dd 58Eh, 590h, 592h, 594h, 596h, 598h, 59Ah, 59Ch, 59Eh
.text:00410124                 dd 5A0h, 5A2h, 5A4h, 5A6h, 5A8h, 5AAh, 5ACh, 5AEh, 5B0h
.text:00410124                 dd 5B2h, 5B4h, 5B6h, 5B8h, 5BAh, 5BCh, 5BEh, 5C0h, 5C2h
.text:00410124                 dd 5C4h, 5C6h, 5C8h, 5CAh, 5CCh, 5CEh, 5D0h, 5D2h, 5D4h
.text:00410124                 dd 5D6h, 5D8h, 5DAh, 5DCh, 5DEh, 5E0h, 5E2h, 5E4h, 5E6h
.text:00410124                 dd 5E8h, 5EAh, 5ECh, 5EEh, 5F0h, 5F2h, 5F4h, 5F6h, 5F8h
.text:00410124                 dd 5FAh, 5FCh, 5FEh, 600h, 602h, 604h, 606h, 608h, 60Ah
.text:00410124                 dd 60Ch, 60Eh, 610h, 612h, 614h, 616h, 618h, 61Ah, 61Ch
.text:00410124                 dd 61Eh, 620h, 622h, 624h, 626h, 628h, 62Ah, 62Ch, 62Eh
.text:00410124                 dd 630h, 632h, 634h, 636h, 638h, 63Ah, 63Ch, 63Eh, 640h
.text:00410124                 dd 642h, 644h, 646h, 648h, 64Ah, 64Ch, 64Eh, 650h, 652h
.text:00410124                 dd 654h, 656h, 658h, 65Ah, 65Ch, 65Eh, 660h, 662h, 664h
.text:00410124                 dd 666h, 668h, 66Ah, 66Ch, 66Eh, 670h, 672h, 674h, 676h
.text:00410124                 dd 678h, 67Ah, 67Ch, 67Eh, 680h, 682h, 684h, 686h, 688h
.text:00410124                 dd 68Ah, 68Ch, 68Eh, 690h, 692h, 694h, 696h, 698h, 69Ah
.text:00410124                 dd 69Ch, 69Eh, 6A0h, 6A2h, 6A4h, 6A6h, 6A8h, 6AAh, 6ACh
.text:00410124                 dd 6AEh, 6B0h, 6B2h, 6B4h, 6B6h, 6B8h, 6BAh, 6BCh, 6BEh
.text:00410124                 dd 6C0h, 6C2h, 6C4h, 6C6h, 6C8h, 6CAh, 6CCh, 6CEh, 6D0h
.text:00410124                 dd 6D2h, 6D4h, 6D6h, 6D8h, 6DAh, 6DCh, 6DEh, 6E0h, 6E2h
.text:00410124                 dd 6E4h, 6E6h, 6E8h, 6EAh, 6ECh, 6EEh, 6F0h, 6F2h, 6F4h
.text:00410124                 dd 6F6h, 6F8h, 6FAh, 6FCh, 6FEh, 700h, 702h, 704h, 706h
.text:00410124                 dd 708h, 70Ah, 70Ch, 70Eh, 710h, 712h, 714h, 716h, 718h
.text:00410124                 dd 71Ah, 71Ch, 71Eh, 720h, 722h, 724h, 726h, 728h, 72Ah
.text:00410124                 dd 72Ch, 72Eh, 730h, 732h, 734h, 736h, 738h, 73Ah, 73Ch
.text:00410124                 dd 73Eh, 740h, 742h, 744h, 746h, 748h, 74Ah, 74Ch, 74Eh
.text:00410124                 dd 750h, 752h, 754h, 756h, 758h, 75Ah, 75Ch, 75Eh, 760h
.text:00410124                 dd 762h, 764h, 766h, 768h, 76Ah, 76Ch, 76Eh, 770h, 772h
.text:00410124                 dd 774h, 776h, 778h, 77Ah, 77Ch, 77Eh, 780h, 782h, 784h
.text:00410124                 dd 786h, 788h, 78Ah, 78Ch, 78Eh, 790h, 792h, 794h, 796h
.text:00410124                 dd 798h, 79Ah, 79Ch, 79Eh, 7A0h, 7A2h, 7A4h, 7A6h, 7A8h
.text:00410124                 dd 7AAh, 7ACh, 7AEh, 7B0h, 7B2h, 7B4h, 7B6h, 7B8h, 7BAh
.text:00410124                 dd 7BCh, 7BEh, 7C0h, 7C2h, 7C4h, 7C6h, 7C8h, 7CAh, 7CCh
.text:00410124                 dd 7CEh, 7D0h, 7D2h, 7D4h, 7D6h, 7D8h, 7DAh, 7DCh, 7DEh
.text:00410124                 dd 7E0h, 7E2h, 7E4h, 7E6h, 7E8h, 7EAh, 7ECh, 7EEh, 7F0h
.text:00410124                 dd 7F2h, 7F4h, 7F6h, 7F8h, 7FAh, 7FCh, 7FEh, 800h
.text:00410924                 dd 802h, 804h, 806h, 808h, 80Ah, 80Ch, 80Eh, 810h, 812h
.text:00410924                 dd 814h, 816h, 818h, 81Ah, 81Ch, 81Eh, 820h, 822h, 824h
.text:00410924                 dd 826h, 828h, 82Ah, 82Ch, 82Eh, 830h, 832h, 834h, 836h
.text:00410924                 dd 838h, 83Ah, 83Ch, 83Eh, 840h, 842h, 844h, 846h, 848h
.text:00410924                 dd 84Ah, 84Ch, 84Eh, 850h, 852h, 854h, 856h, 858h, 85Ah
.text:00410924                 dd 85Ch, 85Eh, 860h, 862h, 864h, 866h, 868h, 86Ah, 86Ch
.text:00410924                 dd 86Eh, 870h, 872h, 874h, 876h, 878h, 87Ah, 87Ch, 87Eh
.text:00410924                 dd 880h, 882h, 884h, 886h, 888h, 88Ah, 88Ch, 88Eh, 890h
.text:00410924                 dd 892h, 894h, 896h, 898h, 89Ah, 89Ch, 89Eh, 8A0h, 8A2h
.text:00410924                 dd 8A4h, 8A6h, 8A8h, 8AAh, 8ACh, 8AEh, 8B0h, 8B2h, 8B4h
.text:00410924                 dd 8B6h, 8B8h, 8BAh, 8BCh, 8BEh, 8C0h, 8C2h, 8C4h, 8C6h
.text:00410924                 dd 8C8h, 8CAh, 8CCh, 8CEh, 8D0h, 8D2h, 8D4h, 8D6h, 8D8h
.text:00410924                 dd 8DAh, 8DCh, 8DEh, 8E0h, 8E2h, 8E4h, 8E6h, 8E8h, 8EAh
.text:00410924                 dd 8ECh, 8EEh, 8F0h, 8F2h, 8F4h, 8F6h, 8F8h, 8FAh, 8FCh
.text:00410924                 dd 8FEh, 900h, 902h, 904h, 906h, 908h, 90Ah, 90Ch, 90Eh
.text:00410924                 dd 910h, 912h, 914h, 916h, 918h, 91Ah, 91Ch, 91Eh, 920h
.text:00410924                 dd 922h, 924h, 926h, 928h, 92Ah, 92Ch, 92Eh, 930h, 932h
.text:00410924                 dd 934h, 936h, 938h, 93Ah, 93Ch, 93Eh, 940h, 942h, 944h
.text:00410924                 dd 946h, 948h, 94Ah, 94Ch, 94Eh, 950h, 952h, 954h, 956h
.text:00410924                 dd 958h, 95Ah, 95Ch, 95Eh, 960h, 962h, 964h, 966h, 968h
.text:00410924                 dd 96Ah, 96Ch, 96Eh, 970h, 972h, 974h, 976h, 978h, 97Ah
.text:00410924                 dd 97Ch, 97Eh, 980h, 982h, 984h, 986h, 988h, 98Ah, 98Ch
.text:00410924                 dd 98Eh, 990h, 992h, 994h, 996h, 998h, 99Ah, 99Ch, 99Eh
.text:00410924                 dd 9A0h, 9A2h, 9A4h, 9A6h, 9A8h, 9AAh, 9ACh, 9AEh, 9B0h
.text:00410924                 dd 9B2h, 9B4h, 9B6h, 9B8h, 9BAh, 9BCh, 9BEh, 9C0h, 9C2h
.text:00410924                 dd 9C4h, 9C6h, 9C8h, 9CAh, 9CCh, 9CEh, 9D0h, 9D2h, 9D4h
.text:00410924                 dd 9D6h, 9D8h, 9DAh, 9DCh, 9DEh, 9E0h, 9E2h, 9E4h, 9E6h
.text:00410924                 dd 9E8h, 9EAh, 9ECh, 9EEh, 9F0h, 9F2h, 9F4h, 9F6h, 9F8h
.text:00410924                 dd 9FAh, 9FCh, 9FEh, 0A00h, 0A02h, 0A04h, 0A06h, 0A08h
.text:00410924                 dd 0A0Ah, 0A0Ch, 0A0Eh, 0A10h, 0A12h, 0A14h, 0A16h, 0A18h
.text:00410924                 dd 0A1Ah, 0A1Ch, 0A1Eh, 0A20h, 0A22h, 0A24h, 0A26h, 0A28h
.text:00410924                 dd 0A2Ah, 0A2Ch, 0A2Eh, 0A30h, 0A32h, 0A34h, 0A36h, 0A38h
.text:00410924                 dd 0A3Ah, 0A3Ch, 0A3Eh, 0A40h, 0A42h, 0A44h, 0A46h, 0A48h
.text:00410924                 dd 0A4Ah, 0A4Ch, 0A4Eh, 0A50h, 0A52h, 0A54h, 0A56h, 0A58h
.text:00410924                 dd 0A5Ah, 0A5Ch, 0A5Eh, 0A60h, 0A62h, 0A64h, 0A66h, 0A68h
.text:00410924                 dd 0A6Ah, 0A6Ch, 0A6Eh, 0A70h, 0A72h, 0A74h, 0A76h, 0A78h
.text:00410924                 dd 0A7Ah, 0A7Ch, 0A7Eh, 0A80h, 0A82h, 0A84h, 0A86h, 0A88h
.text:00410924                 dd 0A8Ah, 0A8Ch, 0A8Eh, 0A0h, 0A9h, 0ABh, 0ADh, 0AEh, 0B5h
.text:00410924                 dd 0B8h, 0BBh, 0BCh, 0BDh, 0BEh, 0C6h, 0D7h, 0DFh, 0E6h
.text:00410924                 dd 132h, 133h, 149h, 2 dup(152h), 2 dup(153h), 17Fh, 1C7h
.text:00410924                 dd 1C8h, 1C9h, 1CAh, 1CBh, 1CCh, 1F1h, 1F2h, 1F3h, 2BCh
.text:00410924                 dd 2C6h, 2C8h, 2CBh, 2CDh, 2D0h, 2DCh, 2002h, 2003h, 2004h
.text:00410924                 dd 2005h, 2006h, 2008h, 2009h, 200Ah, 200Bh, 2010h, 2011h
.text:00410924                 dd 2012h, 2013h, 2014h, 2015h, 2018h, 2019h, 201Ah, 201Bh
.text:00410924                 dd 201Ch, 201Dh, 201Eh, 201Fh, 2020h, 2022h, 2024h, 2025h
.text:00410924                 dd 2026h, 202Fh, 2035h, 2036h, 2037h, 2039h, 203Ah, 203Ch
.text:00410924                 dd 2047h, 2048h, 2049h, 205Fh, 2060h, 2061h, 2062h, 2063h
.text:00410924                 dd 20A8h, 20ACh, 2100h, 2101h, 2102h, 2105h, 2106h, 210Ah
.text:00410924                 dd 210Bh, 210Ch, 210Dh, 210Eh, 2110h, 2111h, 2112h, 2113h
.text:00410924                 dd 2115h, 2116h, 2119h, 211Ah, 211Bh, 211Ch, 211Dh, 2121h
.text:00410924                 dd 2122h, 2124h, 2126h, 2128h, 212Ch, 212Dh, 212Eh, 212Fh
.text:00410924                 dd 2130h, 2131h, 2133h, 2134h, 2139h, 2145h, 2146h, 2147h
.text:00410924                 dd 2148h, 2149h, 2153h, 2154h, 2155h, 2156h, 2157h, 2158h
.text:00410924                 dd 2159h, 215Ah, 215Bh, 215Ch, 215Dh, 215Eh, 215Fh, 2160h
.text:00410924                 dd 2161h, 2162h, 2163h, 2164h, 2165h, 2166h, 2167h, 2168h
.text:00410924                 dd 2169h, 216Ah, 216Bh, 216Ch, 216Dh, 216Eh, 216Fh, 2170h
.text:00410924                 dd 2171h, 2172h, 2173h, 2174h, 2175h, 2176h, 2177h, 2178h
.text:00410924                 dd 2179h, 217Ah, 217Bh, 217Ch, 217Dh, 217Eh, 217Fh, 2190h
.text:00410924                 dd 2192h, 2194h, 21D0h, 21D2h, 21D4h, 2212h, 2215h, 2216h
.text:00410924                 dd 2217h, 2223h, 2236h, 223Ch, 2264h, 2265h, 226Ah, 226Bh
.text:00410924                 dd 22D8h
.text:0041112C                 dd 22D9h, 2400h, 2401h, 2402h, 2403h, 2404h, 2405h, 2406h
.text:0041112C                 dd 2407h, 2408h, 2409h, 240Ah, 240Bh, 240Ch, 240Dh, 240Eh
.text:0041112C                 dd 240Fh, 2410h, 2411h, 2412h, 2413h, 2414h, 2415h, 2416h
.text:0041112C                 dd 2417h, 2418h, 2419h, 241Ah, 241Bh, 241Ch, 241Dh, 241Eh
.text:0041112C                 dd 241Fh, 2420h, 2421h, 2423h, 2424h, 2460h, 2461h, 2462h
.text:0041112C                 dd 2463h, 2464h, 2465h, 2466h, 2467h, 2468h, 2469h, 246Ah
.text:0041112C                 dd 246Bh, 246Ch, 246Dh, 246Eh, 246Fh, 2470h, 2471h, 2472h
.text:0041112C                 dd 2473h, 2474h, 2475h, 2476h, 2477h, 2478h, 2479h, 247Ah
.text:0041112C                 dd 247Bh, 247Ch, 247Dh, 247Eh, 247Fh, 2480h, 2481h, 2482h
.text:0041112C                 dd 2483h, 2484h, 2485h, 2486h, 2487h, 2488h, 2489h, 248Ah
.text:0041112C                 dd 248Bh, 248Ch, 248Dh, 248Eh, 248Fh, 2490h, 2491h, 2492h
.text:0041112C                 dd 2493h, 2494h, 2495h, 2496h, 2497h, 2498h, 2499h, 249Ah
.text:0041112C                 dd 249Bh, 249Ch, 249Dh, 249Eh, 249Fh, 24A0h, 24A1h, 24A2h
.text:0041112C                 dd 24A3h, 24A4h, 24A5h, 24A6h, 24A7h, 24A8h, 24A9h, 24AAh
.text:0041112C                 dd 24ABh, 24ACh, 24ADh, 24AEh, 24AFh, 24B0h, 24B1h, 24B2h
.text:0041112C                 dd 24B3h, 24B4h, 24B5h, 24B6h, 24B7h, 24B8h, 24B9h, 24BAh
.text:0041112C                 dd 24BBh, 24BCh, 24BDh, 24BEh, 24BFh, 24C0h, 24C1h, 24C2h
.text:0041112C                 dd 24C3h, 24C4h, 24C5h, 24C6h, 24C7h, 24C8h, 24C9h, 24CAh
.text:0041112C                 dd 24CBh, 24CCh, 24CDh, 24CEh, 24CFh, 24D0h, 24D1h, 24D2h
.text:0041112C                 dd 24D3h, 24D4h, 24D5h, 24D6h, 24D7h, 24D8h, 24D9h, 24DAh
.text:0041112C                 dd 24DBh, 24DCh, 24DDh, 24DEh, 24DFh, 24E0h, 24E1h, 24E2h
.text:0041112C                 dd 24E3h, 24E4h, 24E5h, 24E6h, 24E7h, 24E8h, 24E9h, 24EAh
.text:0041112C                 dd 2500h, 2502h, 250Ch, 2510h, 2514h, 2518h, 251Ch, 2524h
.text:0041112C                 dd 252Ch, 2534h, 253Ch, 25E6h, 2A74h, 2A75h, 2A76h, 3000h
.text:0041112C                 dd 30A0h, 3251h, 3252h, 3253h, 3254h, 3255h, 3256h, 3257h
.text:0041112C                 dd 3258h, 3259h, 325Ah, 325Bh, 325Ch, 325Dh, 325Eh, 325Fh
.text:0041112C                 dd 32B1h, 32B2h, 32B3h, 32B4h, 32B5h, 32B6h, 32B7h, 32B8h
.text:0041112C                 dd 32B9h, 32BAh, 32BBh, 32BCh, 32BDh, 32BEh, 32BFh, 3371h
.text:0041112C                 dd 3372h, 3373h, 3374h, 3375h, 3376h, 3380h, 3381h, 3382h
.text:0041112C                 dd 3383h, 3384h, 3385h, 3386h, 3387h, 3388h, 3389h, 338Ah
.text:0041112C                 dd 338Bh, 338Ch, 338Dh, 338Eh, 338Fh, 3390h, 3391h, 3392h
.text:0041112C                 dd 3393h, 3394h, 3395h, 3396h, 3397h, 3398h, 3399h, 339Ah
.text:0041112C                 dd 339Bh, 339Ch, 339Dh, 339Eh, 339Fh, 33A0h, 33A1h, 33A2h
.text:0041112C                 dd 33A3h, 33A4h, 33A5h, 33A6h, 33A7h, 33A8h, 33A9h, 33AAh
.text:0041112C                 dd 33ABh, 33ACh, 33ADh, 33AEh, 33AFh, 33B0h, 33B1h, 33B2h
.text:0041112C                 dd 33B3h, 33B4h, 33B5h, 33B6h, 33B7h, 33B8h, 33B9h, 33BAh
.text:0041112C                 dd 33BBh, 33BCh, 33BDh, 33BEh, 33BFh, 33C2h, 33C3h, 33C4h
.text:0041112C                 dd 33C5h, 33C6h, 33C7h, 33C8h, 33C9h, 33CAh, 33CBh, 33CCh
.text:0041112C                 dd 33CDh, 33CEh, 33CFh, 33D0h, 33D1h, 33D2h, 33D3h, 33D4h
.text:0041112C                 dd 33D5h, 33D6h, 33D7h, 33D8h, 33D9h, 33DAh, 33DBh, 33DCh
.text:0041112C                 dd 33DDh, 0FB00h, 0FB01h, 0FB02h, 0FB03h, 0FB04h, 0FB06h
.text:0041112C                 dd 0FB29h, 0FE00h, 0FE01h, 0FE02h, 0FE03h, 0FE04h, 0FE05h
.text:0041112C                 dd 0FE06h, 0FE07h, 0FE08h, 0FE09h, 0FE0Ah, 0FE0Bh, 0FE0Ch
.text:0041112C                 dd 0FE0Dh, 0FE0Eh, 0FE0Fh, 0FE4Dh, 0FE4Eh, 0FE4Fh, 0FE50h
.text:0041112C                 dd 0FE52h, 0FE54h, 0FE55h, 0FE56h, 0FE57h, 0FE59h, 0FE5Ah
.text:0041112C                 dd 0FE5Bh, 0FE5Ch, 0FE5Fh, 0FE60h, 0FE61h, 0FE62h, 0FE63h
.text:0041112C                 dd 0FE64h, 0FE65h, 0FE66h, 0FE68h, 0FE69h, 0FE6Ah, 0FE6Bh
.text:0041112C                 dd 0FEFFh, 0FF01h, 0FF02h, 0FF03h, 0FF04h, 0FF05h, 0FF06h
.text:0041112C                 dd 0FF07h, 0FF08h, 0FF09h, 0FF0Ah, 0FF0Bh, 0FF0Ch, 0FF0Dh
.text:0041112C                 dd 0FF0Eh, 0FF0Fh, 0FF10h, 0FF11h, 0FF12h, 0FF13h, 0FF14h
.text:0041112C                 dd 0FF15h, 0FF16h, 0FF17h, 0FF18h, 0FF19h, 0FF1Ah, 0FF1Bh
.text:0041112C                 dd 0FF1Ch, 0FF1Dh, 0FF1Eh, 0FF1Fh, 0FF20h, 0FF21h, 0FF22h
.text:0041112C                 dd 0FF23h, 0FF24h, 0FF25h, 0FF26h, 0FF27h, 0FF28h, 0FF29h
.text:0041112C                 dd 0FF2Ah, 0FF2Bh, 0FF2Ch, 0FF2Dh, 0FF2Eh, 0FF2Fh, 0FF30h
.text:0041112C                 dd 0FF31h, 0FF32h, 0FF33h, 0FF34h, 0FF35h, 0FF36h, 0FF37h
.text:0041112C                 dd 0FF38h, 0FF39h, 0FF3Ah, 0FF3Bh, 0FF3Ch, 0FF3Dh, 0FF3Eh
.text:0041112C                 dd 0FF3Fh, 0FF40h, 0FF41h, 0FF42h, 0FF43h, 0FF44h, 0FF45h
.text:0041112C                 dd 0FF46h, 0FF47h, 0FF48h, 0FF49h, 0FF4Ah, 0FF4Bh, 0FF4Ch
.text:0041112C                 dd 0FF4Dh, 0FF4Eh, 0FF4Fh, 0FF50h, 0FF51h, 0FF52h, 0FF53h
.text:0041112C                 dd 0FF54h, 0FF55h, 0FF56h, 0FF57h, 0FF58h, 0FF59h, 0FF5Ah
.text:0041112C                 dd 0FF5Bh, 0FF5Ch, 0FF5Dh, 0FF5Eh, 0D400h, 0D401h, 0D402h
.text:0041112C                 dd 0D403h, 0D404h, 0D405h, 0D406h, 0D407h, 0D408h, 0D409h
.text:0041112C                 dd 0D40Ah, 0D40Bh, 0D40Ch, 0D40Dh, 0D40Eh, 0D40Fh, 0D410h
.text:0041112C                 dd 0D411h, 0D412h, 0D413h, 0D414h, 0D415h, 0D416h, 0D417h
.text:0041112C                 dd 0D418h, 0D419h, 0D41Ah, 0D41Bh, 0D41Ch, 0D41Dh, 0D41Eh
.text:0041112C                 dd 0D41Fh, 0D420h, 0D421h, 0D422h, 0D423h, 0D424h, 0D425h
.text:0041112C                 dd 0D426h, 0D427h, 0D428h, 0D429h, 0D42Ah, 0D42Bh, 0D42Ch
.text:0041112C                 dd 0D42Dh, 0D42Eh, 0D42Fh
.text:0041192C                 dd 0D430h, 0D431h, 0D432h, 0D433h, 0D434h, 0D435h, 0D436h
.text:0041192C                 dd 0D437h, 0D438h, 0D439h, 0D43Ah, 0D43Bh, 0D43Ch, 0D43Dh
.text:0041192C                 dd 0D43Eh, 0D43Fh, 0D440h, 0D441h, 0D442h, 0D443h, 0D444h
.text:0041192C                 dd 0D445h, 0D446h, 0D447h, 0D448h, 0D449h, 0D44Ah, 0D44Bh
.text:0041192C                 dd 0D44Ch, 0D44Dh, 0D44Eh, 0D44Fh, 0D450h, 0D451h, 0D452h
.text:0041192C                 dd 0D453h, 0D454h, 0D456h, 0D457h, 0D458h, 0D459h, 0D45Ah
.text:0041192C                 dd 0D45Bh, 0D45Ch, 0D45Dh, 0D45Eh, 0D45Fh, 0D460h, 0D461h
.text:0041192C                 dd 0D462h, 0D463h, 0D464h, 0D465h, 0D466h, 0D467h, 0D468h
.text:0041192C                 dd 0D469h, 0D46Ah, 0D46Bh, 0D46Ch, 0D46Dh, 0D46Eh, 0D46Fh
.text:0041192C                 dd 0D470h, 0D471h, 0D472h, 0D473h, 0D474h, 0D475h, 0D476h
.text:0041192C                 dd 0D477h, 0D478h, 0D479h, 0D47Ah, 0D47Bh, 0D47Ch, 0D47Dh
.text:0041192C                 dd 0D47Eh, 0D47Fh, 0D480h, 0D481h, 0D482h, 0D483h, 0D484h
.text:0041192C                 dd 0D485h, 0D486h, 0D487h, 0D488h, 0D489h, 0D48Ah, 0D48Bh
.text:0041192C                 dd 0D48Ch, 0D48Dh, 0D48Eh, 0D48Fh, 0D490h, 0D491h, 0D492h
.text:0041192C                 dd 0D493h, 0D494h, 0D495h, 0D496h, 0D497h, 0D498h, 0D499h
.text:0041192C                 dd 0D49Ah, 0D49Bh, 0D49Ch, 0D49Eh, 0D49Fh, 0D4A2h, 0D4A5h
.text:0041192C                 dd 0D4A6h, 0D4A9h, 0D4AAh, 0D4ABh, 0D4ACh, 0D4AEh, 0D4AFh
.text:0041192C                 dd 0D4B0h, 0D4B1h, 0D4B2h, 0D4B3h, 0D4B4h, 0D4B5h, 0D4B6h
.text:0041192C                 dd 0D4B7h, 0D4B8h, 0D4B9h, 0D4BBh, 0D4BDh, 0D4BEh, 0D4BFh
.text:0041192C                 dd 0D4C0h, 0D4C2h, 0D4C3h, 0D4C5h, 0D4C6h, 0D4C7h, 0D4C8h
.text:0041192C                 dd 0D4C9h, 0D4CAh, 0D4CBh, 0D4CCh, 0D4CDh, 0D4CEh, 0D4CFh
.text:0041192C                 dd 0D4D0h, 0D4D1h, 0D4D2h, 0D4D3h, 0D4D4h, 0D4D5h, 0D4D6h
.text:0041192C                 dd 0D4D7h, 0D4D8h, 0D4D9h, 0D4DAh, 0D4DBh, 0D4DCh, 0D4DDh
.text:0041192C                 dd 0D4DEh, 0D4DFh, 0D4E0h, 0D4E1h, 0D4E2h, 0D4E3h, 0D4E4h
.text:0041192C                 dd 0D4E5h, 0D4E6h, 0D4E7h, 0D4E8h, 0D4E9h, 0D4EAh, 0D4EBh
.text:0041192C                 dd 0D4ECh, 0D4EDh, 0D4EEh, 0D4EFh, 0D4F0h, 0D4F1h, 0D4F2h
.text:0041192C                 dd 0D4F3h, 0D4F4h, 0D4F5h, 0D4F6h, 0D4F7h, 0D4F8h, 0D4F9h
.text:0041192C                 dd 0D4FAh, 0D4FBh, 0D4FCh, 0D4FDh, 0D4FEh, 0D4FFh, 0D500h
.text:0041192C                 dd 0D501h, 0D502h, 0D503h, 0D504h, 0D505h, 0D507h, 0D508h
.text:0041192C                 dd 0D509h, 0D50Ah, 0D50Dh, 0D50Eh, 0D50Fh, 0D510h, 0D511h
.text:0041192C                 dd 0D512h, 0D513h, 0D514h, 0D516h, 0D517h, 0D518h, 0D519h
.text:0041192C                 dd 0D51Ah, 0D51Bh, 0D51Ch, 0D51Eh, 0D51Fh, 0D520h, 0D521h
.text:0041192C                 dd 0D522h, 0D523h, 0D524h, 0D525h, 0D526h, 0D527h, 0D528h
.text:0041192C                 dd 0D529h, 0D52Ah, 0D52Bh, 0D52Ch, 0D52Dh, 0D52Eh, 0D52Fh
.text:0041192C                 dd 0D530h, 0D531h, 0D532h, 0D533h, 0D534h, 0D535h, 0D536h
.text:0041192C                 dd 0D537h, 0D538h, 0D539h, 0D53Bh, 0D53Ch, 0D53Dh, 0D53Eh
.text:0041192C                 dd 0D540h, 0D541h, 0D542h, 0D543h, 0D544h, 0D546h, 0D54Ah
.text:0041192C                 dd 0D54Bh, 0D54Ch, 0D54Dh, 0D54Eh, 0D54Fh, 0D550h, 0D552h
.text:0041192C                 dd 0D553h, 0D554h, 0D555h, 0D556h, 0D557h, 0D558h, 0D559h
.text:0041192C                 dd 0D55Ah, 0D55Bh, 0D55Ch, 0D55Dh, 0D55Eh, 0D55Fh, 0D560h
.text:0041192C                 dd 0D561h, 0D562h, 0D563h, 0D564h, 0D565h, 0D566h, 0D567h
.text:0041192C                 dd 0D568h, 0D569h, 0D56Ah, 0D56Bh, 0D56Ch, 0D56Dh, 0D56Eh
.text:0041192C                 dd 0D56Fh, 0D570h, 0D571h, 0D572h, 0D573h, 0D574h, 0D575h
.text:0041192C                 dd 0D576h, 0D577h, 0D578h, 0D579h, 0D57Ah, 0D57Bh, 0D57Ch
.text:0041192C                 dd 0D57Dh, 0D57Eh, 0D57Fh, 0D580h, 0D581h, 0D582h, 0D583h
.text:0041192C                 dd 0D584h, 0D585h, 0D586h, 0D587h, 0D588h, 0D589h, 0D58Ah
.text:0041192C                 dd 0D58Bh, 0D58Ch, 0D58Dh, 0D58Eh, 0D58Fh, 0D590h, 0D591h
.text:0041192C                 dd 0D592h, 0D593h, 0D594h, 0D595h, 0D596h, 0D597h, 0D598h
.text:0041192C                 dd 0D599h, 0D59Ah, 0D59Bh, 0D59Ch, 0D59Dh, 0D59Eh, 0D59Fh
.text:0041192C                 dd 0D5A0h, 0D5A1h, 0D5A2h, 0D5A3h, 0D5A4h, 0D5A5h, 0D5A6h
.text:0041192C                 dd 0D5A7h, 0D5A8h, 0D5A9h, 0D5AAh, 0D5ABh, 0D5ACh, 0D5ADh
.text:0041192C                 dd 0D5AEh, 0D5AFh, 0D5B0h, 0D5B1h, 0D5B2h, 0D5B3h, 0D5B4h
.text:0041192C                 dd 0D5B5h, 0D5B6h, 0D5B7h, 0D5B8h, 0D5B9h, 0D5BAh, 0D5BBh
.text:0041192C                 dd 0D5BCh, 0D5BDh, 0D5BEh, 0D5BFh, 0D5C0h, 0D5C1h, 0D5C2h
.text:0041192C                 dd 0D5C3h, 0D5C4h, 0D5C5h, 0D5C6h, 0D5C7h, 0D5C8h, 0D5C9h
.text:0041192C                 dd 0D5CAh, 0D5CBh, 0D5CCh, 0D5CDh, 0D5CEh, 0D5CFh, 0D5D0h
.text:0041192C                 dd 0D5D1h, 0D5D2h, 0D5D3h, 0D5D4h, 0D5D5h, 0D5D6h, 0D5D7h
.text:0041192C                 dd 0D5D8h, 0D5D9h, 0D5DAh, 0D5DBh, 0D5DCh, 0D5DDh, 0D5DEh
.text:0041192C                 dd 0D5DFh, 0D5E0h, 0D5E1h, 0D5E2h, 0D5E3h, 0D5E4h, 0D5E5h
.text:0041192C                 dd 0D5E6h, 0D5E7h, 0D5E8h, 0D5E9h, 0D5EAh, 0D5EBh, 0D5ECh
.text:0041192C                 dd 0D5EDh, 0D5EEh, 0D5EFh, 0D5F0h, 0D5F1h, 0D5F2h, 0D5F3h
.text:0041192C                 dd 0D5F4h, 0D5F5h, 0D5F6h, 0D5F7h, 0D5F8h, 0D5F9h, 0D5FAh
.text:0041192C                 dd 0D5FBh, 0D5FCh, 0D5FDh, 0D5FEh, 0D5FFh, 0D600h, 0D601h
.text:0041192C                 dd 0D602h, 0D603h, 0D604h, 0D605h, 0D606h, 0D607h, 0D608h
.text:0041192C                 dd 0D609h, 0D60Ah, 0D60Bh, 0D60Ch, 0D60Dh, 0D60Eh, 0D60Fh
.text:0041192C                 dd 0D610h, 0D611h, 0D612h, 0D613h, 0D614h, 0D615h, 0D616h
.text:0041192C                 dd 0D617h, 0D618h, 0D619h, 0D61Ah, 0D61Bh, 0D61Ch, 0D61Dh
.text:0041192C                 dd 0D61Eh, 0D61Fh, 0D620h, 0D621h, 0D622h, 0D623h, 0D624h
.text:0041192C                 dd 0D625h, 0D626h, 0D627h, 0D628h, 0D629h, 0D62Ah, 0D62Bh
.text:0041192C                 dd 0D62Ch, 0D62Dh, 0D62Eh, 0D62Fh, 0D630h, 0D631h, 0D632h
.text:0041192C                 dd 0D633h, 0D634h, 0D635h, 0D636h, 0D637h, 0D638h, 0D639h
.text:0041192C                 dd 0D63Ah, 0D63Bh, 0D63Ch, 0D63Dh, 0D63Eh, 0D63Fh, 0D640h
.text:0041192C                 dd 0D641h, 0D642h, 0D643h, 0D644h, 0D645h, 0D646h, 0D647h
.text:0041192C                 dd 0D648h
.text:0041212C                 dd 0D649h, 0D64Ah, 0D64Bh, 0D64Ch, 0D64Dh, 0D64Eh, 0D64Fh
.text:0041212C                 dd 0D650h, 0D651h, 0D652h, 0D653h, 0D654h, 0D655h, 0D656h
.text:0041212C                 dd 0D657h, 0D658h, 0D659h, 0D65Ah, 0D65Bh, 0D65Ch, 0D65Dh
.text:0041212C                 dd 0D65Eh, 0D65Fh, 0D660h, 0D661h, 0D662h, 0D663h, 0D664h
.text:0041212C                 dd 0D665h, 0D666h, 0D667h, 0D668h, 0D669h, 0D66Ah, 0D66Bh
.text:0041212C                 dd 0D66Ch, 0D66Dh, 0D66Eh, 0D66Fh, 0D670h, 0D671h, 0D672h
.text:0041212C                 dd 0D673h, 0D674h, 0D675h, 0D676h, 0D677h, 0D678h, 0D679h
.text:0041212C                 dd 0D67Ah, 0D67Bh, 0D67Ch, 0D67Dh, 0D67Eh, 0D67Fh, 0D680h
.text:0041212C                 dd 0D681h, 0D682h, 0D683h, 0D684h, 0D685h, 0D686h, 0D687h
.text:0041212C                 dd 0D688h, 0D689h, 0D68Ah, 0D68Bh, 0D68Ch, 0D68Dh, 0D68Eh
.text:0041212C                 dd 0D68Fh, 0D690h, 0D691h, 0D692h, 0D693h, 0D694h, 0D695h
.text:0041212C                 dd 0D696h, 0D697h, 0D698h, 0D699h, 0D69Ah, 0D69Bh, 0D69Ch
.text:0041212C                 dd 0D69Dh, 0D69Eh, 0D69Fh, 0D6A0h, 0D6A1h, 0D6A2h, 0D6A3h
.text:0041212C                 dd 0D7CEh, 0D7CFh, 0D7D0h, 0D7D1h, 0D7D2h, 0D7D3h, 0D7D4h
.text:0041212C                 dd 0D7D5h, 0D7D6h, 0D7D7h, 0D7D8h, 0D7D9h, 0D7DAh, 0D7DBh
.text:0041212C                 dd 0D7DCh, 0D7DDh, 0D7DEh, 0D7DFh, 0D7E0h, 0D7E1h, 0D7E2h
.text:0041212C                 dd 0D7E3h, 0D7E4h, 0D7E5h, 0D7E6h, 0D7E7h, 0D7E8h, 0D7E9h
.text:0041212C                 dd 0D7EAh, 0D7EBh, 0D7ECh, 0D7EDh, 0D7EEh, 0D7EFh, 0D7F0h
.text:0041212C                 dd 0D7F1h, 0D7F2h, 0D7F3h, 0D7F4h, 0D7F5h, 0D7F6h, 0D7F7h
.text:0041212C                 dd 0D7F8h, 0D7F9h, 0D7FAh, 0D7FBh, 0D7FCh, 0D7FDh, 0D7FEh
.text:0041212C                 dd 0D7FFh, 0
.text:00412364                 dd 3, 8, 0Ch, 0Fh, 14h, 17h, 1Ah, 1Eh, 25h, 2Ch, 33h, 37h
.text:00412364                 dd 3Ah, 3Eh, 42h, 46h, 4Ah, 4Eh, 52h, 56h, 5Ah, 5Eh, 61h
.text:00412364                 dd 65h, 69h, 6Dh, 71h, 75h, 79h, 7Dh, 81h, 85h, 88h, 8Bh
.text:00412364                 dd 8Eh, 91h, 94h, 97h, 9Ah, 9Dh, 0A0h, 0A3h, 0A6h, 0A9h
.text:00412364                 dd 0ACh, 0AFh, 0B2h, 0B4h, 0B7h, 0BAh, 0BDh, 0C0h, 0C4h
.text:00412364                 dd 0C7h, 0CAh, 0CDh, 0D0h, 0D3h, 0D6h, 0D9h, 0DDh, 0E0h
.text:00412364                 dd 0E3h, 0E6h, 0E9h, 0EDh, 0F2h, 0F5h, 0F8h, 0FCh, 101h
.text:00412364                 dd 104h, 107h, 10Bh, 10Fh, 113h, 117h, 11Ah, 11Ch, 11Eh
.text:00412364                 dd 120h, 122h, 126h, 12Bh, 130h, 135h, 138h, 13Dh, 142h
.text:00412364                 dd 145h, 148h, 14Bh, 14Eh, 151h, 154h, 157h, 15Ah, 15Dh
.text:00412364                 dd 160h, 164h, 167h, 16Ah, 16Dh, 170h, 173h, 178h, 17Eh
.text:00412364                 dd 181h, 186h, 189h, 18Ch, 18Fh, 192h, 195h, 198h, 19Bh
.text:00412364                 dd 19Eh, 1A1h, 1A4h, 1A7h, 1AAh, 1ADh, 1B0h, 1B3h, 1BAh
.text:00412364                 dd 1C1h, 1C8h, 1CFh, 1D6h, 1DDh, 1E4h, 1EBh, 1F2h, 1F9h
.text:00412364                 dd 200h, 207h, 20Ch, 20Fh, 213h, 218h, 21Ch, 21Fh, 223h
.text:00412364                 dd 228h, 22Eh, 232h, 235h, 239h, 23Eh, 241h, 244h, 247h
.text:00412364                 dd 24Ah, 24Dh, 251h, 256h, 25Ah, 25Dh, 261h, 266h, 26Ch
.text:00412364                 dd 270h, 273h, 277h, 27Ch, 27Fh, 282h, 285h, 288h, 28Ch
.text:00412364                 dd 290h, 295h, 299h, 29Dh, 2A2h, 2A5h, 2A8h, 2ABh, 2AEh
.text:00412364                 dd 2B1h, 2B4h, 2B7h, 2BBh, 2BFh, 2C3h, 2C7h, 2CCh, 2D1h
.text:00412364                 dd 2D6h, 2DBh, 2E0h, 2E5h, 2EAh, 2EFh, 2F4h, 2F9h, 2FDh
.text:00412364                 dd 301h, 305h, 309h, 30Dh, 311h, 315h, 319h, 31Eh, 323h
.text:00412364                 dd 328h, 32Dh, 332h, 337h, 33Ch, 341h, 346h, 34Ah, 34Fh
.text:00412364                 dd 354h, 358h, 35Ch, 360h, 364h, 368h, 36Dh, 370h, 374h
.text:00412364                 dd 379h, 37Eh, 383h, 388h, 38Dh, 392h, 397h, 39Ch, 3A1h
.text:00412364                 dd 3A7h, 3ADh, 3B3h, 3B9h, 3BFh, 3C5h, 3CBh, 3D1h, 3D7h
.text:00412364                 dd 3DDh, 3E3h, 3E8h, 3EDh, 3F2h, 3F7h, 3FCh, 401h, 406h
.text:00412364                 dd 40Bh, 410h, 416h, 41Ch, 422h, 428h, 42Eh, 434h, 43Ah
.text:00412364                 dd 440h, 446h, 44Ch, 452h, 456h, 45Ah, 45Eh, 462h, 466h
.text:00412364                 dd 46Ah, 46Eh, 472h, 476h, 47Bh, 480h, 485h, 48Ah, 48Fh
.text:00412364                 dd 494h, 499h, 49Eh, 4A3h, 4A8h, 4ADh, 4B2h, 4B7h, 4BCh
.text:00412364                 dd 4C1h, 4C6h, 4CBh, 4D0h, 4D5h, 4DAh, 4DFh, 4E4h, 4E9h
.text:00412364                 dd 4EEh, 4F3h, 4F8h, 4FDh, 502h, 507h, 50Ch, 511h, 516h
.text:00412364                 dd 51Bh, 520h, 525h, 52Ah, 52Fh, 534h, 539h, 53Eh, 543h
.text:00412364                 dd 548h, 54Dh, 552h, 557h, 55Ch, 561h, 566h, 56Bh, 570h
.text:00412364                 dd 575h, 57Ah, 57Fh, 584h, 589h, 58Eh, 593h, 598h, 59Dh
.text:00412364                 dd 5A2h, 5A7h, 5ACh, 5B1h, 5B6h, 5BBh, 5C0h, 5C5h, 5CAh
.text:00412364                 dd 5CFh, 5D4h, 5D9h, 5DEh, 5E3h, 5E8h, 5EDh, 5F2h, 5F7h
.text:00412364                 dd 5FCh, 601h, 606h, 60Bh, 610h, 615h, 61Ah, 61Fh, 624h
.text:00412364                 dd 629h, 62Eh, 633h, 638h, 63Bh, 63Eh, 641h, 644h, 647h
.text:00412364                 dd 64Ah, 64Dh, 650h, 653h, 656h, 659h, 65Ch, 661h, 665h
.text:00412364                 dd 66Ah, 66Dh, 670h, 676h, 67Ch, 682h, 688h, 68Eh, 694h
.text:00412364                 dd 69Ah, 6A0h, 6A6h, 6ACh, 6B2h, 6B8h, 6BEh, 6C4h, 6CAh
.text:00412364                 dd 6D0h, 6D6h, 6DCh, 6E2h, 6E8h, 6EEh, 6F4h, 6FAh, 700h
.text:00412364                 dd 706h, 70Ch, 712h, 718h, 71Eh, 724h, 729h, 72Dh, 731h
.text:00412364                 dd 736h, 73Ah, 73Eh, 742h, 746h, 74Ah, 74Eh, 752h, 756h
.text:00412364                 dd 75Ah, 75Eh, 763h, 769h, 76Dh, 771h, 775h, 779h, 77Dh
.text:00412364                 dd 781h, 785h, 78Ah, 78Fh, 794h, 799h, 79Dh, 7A1h, 7A5h
.text:00412364                 dd 7A9h, 7ADh, 7B1h, 7B5h, 7B9h, 7BDh, 7C1h, 7C7h, 7CDh
.text:00412364                 dd 7D2h, 7D8h, 7DEh, 7E4h, 7E9h, 7EFh, 7F4h, 7FBh, 7FFh
.text:00412364                 dd 804h, 809h, 80Eh, 813h, 81Ah, 823h, 827h, 82Bh, 82Fh
.text:00412364                 dd 833h, 837h, 83Bh, 83Fh, 843h, 847h, 84Bh, 84Fh, 853h
.text:00412364                 dd 857h, 85Bh, 85Fh, 863h, 869h, 86Dh, 871h, 875h, 87Bh
.text:00412364                 dd 880h, 884h, 888h, 88Ch, 890h, 894h, 898h, 89Ch, 8A0h
.text:00412364                 dd 8A4h, 8A8h, 8ADh, 8B1h, 8B5h, 8BAh, 8BFh, 8C3h, 8C9h
.text:00412364                 dd 8CEh, 8D2h, 8D6h, 8DAh, 8DEh, 8E2h, 8E6h, 8EAh, 8EFh
.text:00412B64                 dd 8F4h, 8F8h, 8FBh, 8FDh, 8FFh, 901h, 903h, 905h, 907h
.text:00412B64                 dd 909h, 90Bh, 90Dh, 90Fh, 911h, 913h, 915h, 917h, 919h
.text:00412B64                 dd 91Bh, 91Eh, 921h, 924h, 927h, 92Ah, 92Dh, 930h, 933h
.text:00412B64                 dd 936h, 939h, 93Ch, 93Fh, 942h, 945h, 948h, 94Bh, 94Eh
.text:00412B64                 dd 951h, 954h, 957h, 95Ah, 95Dh, 960h, 963h, 966h, 968h
.text:00412B64                 dd 96Bh, 96Eh, 971h, 974h, 977h, 97Ah, 97Dh, 980h, 983h
.text:00412B64                 dd 986h, 989h, 98Ch, 98Fh, 992h, 995h, 998h, 99Bh, 99Eh
.text:00412B64                 dd 9A1h, 9A4h, 9A7h, 9AAh, 9ADh, 9B0h, 9B3h, 9B6h, 9B9h
.text:00412B64                 dd 9BCh, 9BFh, 9C2h, 9C5h, 9C8h, 9CBh, 9CEh, 9D1h, 9D4h
.text:00412B64                 dd 9D7h, 9DAh, 9DDh, 9E0h, 9E3h, 9E6h, 9E9h, 9ECh, 9EFh
.text:00412B64                 dd 9F2h, 9F5h, 9F8h, 9FBh, 9FEh, 0A01h, 0A04h, 0A07h, 0A0Ah
.text:00412B64                 dd 0A0Dh, 0A10h, 0A13h, 0A16h, 0A19h, 0A1Ch, 0A1Fh, 0A22h
.text:00412B64                 dd 0A25h, 0A28h, 0A2Bh, 0A2Eh, 0A31h, 0A34h, 0A37h, 0A3Ah
.text:00412B64                 dd 0A3Dh, 0A40h, 0A43h, 0A46h, 0A49h, 0A4Ch, 0A4Fh, 0A52h
.text:00412B64                 dd 0A55h, 0A58h, 0A5Bh, 0A5Eh, 0A61h, 0A64h, 0A67h, 0A6Ah
.text:00412B64                 dd 0A6Dh, 0A70h, 0A73h, 0A76h, 0A79h, 0A7Ch, 0A7Fh, 0A82h
.text:00412B64                 dd 0A85h, 0A88h, 0A8Bh, 0A8Eh, 0A91h, 0A94h, 0A97h, 0A9Ah
.text:00412B64                 dd 0A9Dh, 0AA0h, 0AA3h, 0AA6h, 0AA9h, 0AACh, 0AAFh, 0AB2h
.text:00412B64                 dd 0AB5h, 0AB8h, 0ABBh, 0ABEh, 0AC1h, 0AC4h, 0AC7h, 0ACAh
.text:00412B64                 dd 0ACDh, 0AD0h, 0AD3h, 0AD6h, 0AD9h, 0ADCh, 0ADFh, 0AE2h
.text:00412B64                 dd 0AE5h, 0AE8h, 0AEBh, 0AEEh, 0AF1h, 0AF4h, 0AF7h, 0AFAh
.text:00412B64                 dd 0AFDh, 0B00h, 0B03h, 0B06h, 0B09h, 0B0Ch, 0B0Fh, 0B12h
.text:00412B64                 dd 0B15h, 0B18h, 0B1Bh, 0B1Eh, 0B21h, 0B24h, 0B27h, 0B2Ah
.text:00412B64                 dd 0B2Dh, 0B30h, 0B33h, 0B36h, 0B39h, 0B3Ch, 0B3Fh, 0B42h
.text:00412B64                 dd 0B45h, 0B48h, 0B4Bh, 0B4Eh, 0B51h, 0B54h, 0B57h, 0B5Ah
.text:00412B64                 dd 0B5Dh, 0B60h, 0B63h, 0B66h, 0B69h, 0B6Ch, 0B6Fh, 0B72h
.text:00412B64                 dd 0B75h, 0B78h, 0B7Bh, 0B7Eh, 0B81h, 0B84h, 0B87h, 0B8Ah
.text:00412B64                 dd 0B8Dh, 0B90h, 0B93h, 0B96h, 0B99h, 0B9Ch, 0B9Fh, 0BA2h
.text:00412B64                 dd 0BA5h, 0BA8h, 0BABh, 0BAEh, 0BB1h, 0BB4h, 0BB7h, 0BBAh
.text:00412B64                 dd 0BBDh, 0BC0h, 0BC3h, 0BC6h, 0BC9h, 0BCCh, 0BCFh, 0BD2h
.text:00412B64                 dd 0BD5h, 0BD8h, 0BDBh, 0BDEh, 0BE1h, 0BE4h, 0BE7h, 0BEAh
.text:00412B64                 dd 0BEDh, 0BF0h, 0BF3h, 0BF6h, 0BF9h, 0BFCh, 0BFFh, 0C02h
.text:00412B64                 dd 0C05h, 0C08h, 0C0Bh, 0C0Eh, 0C11h, 0C14h, 0C17h, 0C1Ah
.text:00412B64                 dd 0C1Dh, 0C20h, 0C23h, 0C26h, 0C29h, 0C2Ch, 0C2Fh, 0C32h
.text:00412B64                 dd 0C35h, 0C38h, 0C3Bh, 0C3Eh, 0C41h, 0C44h, 0C47h, 0C4Ah
.text:00412B64                 dd 0C4Dh, 0C50h, 0C53h, 0C56h, 0C59h, 0C5Ch, 0C5Fh, 0C62h
.text:00412B64                 dd 0C65h, 0C68h, 0C6Bh, 0C6Eh, 0C71h, 0C74h, 0C77h, 0C7Ah
.text:00412B64                 dd 0C7Dh, 0C80h, 0C83h, 0C86h, 0C89h, 0C8Ch, 0C8Fh, 0C92h
.text:00412B64                 dd 0C95h, 0C98h, 0C9Bh, 0C9Eh, 0CA1h, 0CA4h, 0CA7h, 0CAAh
.text:00412B64                 dd 0CADh, 0CB0h, 0CB3h, 0CB6h, 0CB9h, 0CBCh, 0CBFh, 0CC2h
.text:00412B64                 dd 0CC5h, 0CC8h, 0CCBh, 0CCEh, 0CD1h, 0CD4h, 0CD7h, 0CDAh
.text:00412B64                 dd 0CDDh, 0CE0h, 0CE3h, 0CE6h, 0CE9h, 0CECh, 0CEFh, 0CF2h
.text:00412B64                 dd 0CF5h, 0CF8h, 0CFBh, 0CFEh, 0D01h, 0D04h, 0D07h, 0D0Ah
.text:00412B64                 dd 0D0Dh, 0D10h, 0D13h, 0D16h, 0D19h, 0D1Ch, 0D1Fh, 0D22h
.text:00412B64                 dd 0D25h, 0D28h, 0D2Bh, 0D2Eh, 0D31h, 0D34h, 0D37h, 0D3Ah
.text:00412B64                 dd 0D3Dh, 0D40h, 0D43h, 0D46h, 0D49h, 0D4Ch, 0D4Fh, 0D52h
.text:00412B64                 dd 0D55h, 0D58h, 0D5Bh, 0D5Eh, 0D61h, 0D64h, 0D67h, 0D6Ah
.text:00412B64                 dd 0D6Dh, 0D70h, 0D73h, 0D76h, 0D79h, 0D7Ch, 0D7Fh, 0D82h
.text:00412B64                 dd 0D85h, 0D88h, 0D8Bh, 0D8Eh, 0D91h, 0D94h, 0D97h, 0D9Ah
.text:00412B64                 dd 0D9Dh, 0DA0h, 0DA3h, 0DA6h, 0DA9h, 0DACh, 0DAFh, 0DB2h
.text:00412B64                 dd 0DB5h, 0DB8h, 0DBBh, 0DBEh, 0DC1h, 0DC4h, 0DC7h, 0DCAh
.text:00412B64                 dd 0DCDh, 0DD0h, 0DD3h, 0DD6h, 0DD9h, 0DDCh, 0DDFh, 0DE2h
.text:00412B64                 dd 0DE5h, 0DE8h, 0DEBh, 0DEEh, 0DF1h, 0DF4h, 0DF7h, 0DFAh
.text:00412B64                 dd 0DFDh, 0E00h, 0E03h, 0E06h, 0E09h, 0E0Ch, 0E0Fh, 0E12h
.text:00412B64                 dd 0E15h, 0E18h, 0E1Bh, 0E1Eh, 0E21h, 0E24h, 0E27h, 0E2Ah
.text:00412B64                 dd 0E2Dh, 0E30h, 0E33h, 0E36h, 0E39h, 0E3Ch, 0E3Fh, 0E42h
.text:00412B64                 dd 0E45h, 0E48h, 0E4Bh, 0E4Eh, 0E51h, 0E54h, 0E57h, 0E5Ah
.text:00412B64                 dd 0E5Dh, 0E60h, 0E63h, 0E66h, 0E69h, 0E6Ch, 0E6Fh, 0E72h
.text:00412B64                 dd 0E75h, 0E78h, 0E7Bh, 0E7Eh, 0E81h, 0E84h, 0E87h, 0E8Ah
.text:00412B64                 dd 0E8Dh, 0E90h, 0E93h, 0E96h, 0E99h, 0E9Ch, 0E9Fh, 0EA2h
.text:00412B64                 dd 0EA5h, 0EA8h, 0EABh, 0EAEh, 0EB1h, 0EB4h, 0EB7h, 0EBAh
.text:00412B64                 dd 0EBDh, 0EC0h, 0EC3h, 0EC6h, 0EC9h, 0ECCh, 0ECFh, 0ED2h
.text:00412B64                 dd 0ED5h, 0ED8h, 0EDBh, 0EDEh, 0EE1h
.text:00413364                 dd 0EE4h, 0EE7h, 0EEAh, 0EEDh, 0EF0h, 0EF3h, 0EF6h, 0EF9h
.text:00413364                 dd 0EFCh, 0EFFh, 0F02h, 0F05h, 0F08h, 0F0Bh, 0F0Eh, 0F11h
.text:00413364                 dd 0F14h, 0F17h, 0F1Ah, 0F1Dh, 0F20h, 0F23h, 0F26h, 0F29h
.text:00413364                 dd 0F2Ch, 0F2Fh, 0F32h, 0F35h, 0F38h, 0F3Bh, 0F3Eh, 0F41h
.text:00413364                 dd 0F44h, 0F47h, 0F4Ah, 0F4Dh, 0F50h, 0F53h, 0F56h, 0F59h
.text:00413364                 dd 0F5Ch, 0F5Fh, 0F62h, 0F65h, 0F68h, 0F6Bh, 0F6Eh, 0F71h
.text:00413364                 dd 0F74h, 0F77h, 0F7Ah, 0F7Dh, 0F80h, 0F83h, 0F86h, 0F89h
.text:00413364                 dd 0F8Ch, 0F8Fh, 0F92h, 0F95h, 0F98h, 0F9Bh, 0F9Eh, 0FA1h
.text:00413364                 dd 0FA4h, 0FA7h, 0FAAh, 0FADh, 0FB0h, 0FB3h, 0FB6h, 0FB9h
.text:00413364                 dd 0FBCh, 0FBFh, 0FC2h, 0FC5h, 0FC8h, 0FCBh, 0FCEh, 0FD1h
.text:00413364                 dd 0FD4h, 0FD7h, 0FDAh, 0FDDh, 0FE0h, 0FE3h, 0FE6h, 0FE9h
.text:00413364                 dd 0FECh, 0FEFh, 0FF2h, 0FF5h, 0FF8h, 0FFBh, 0FFEh, 1001h
.text:00413364                 dd 1004h, 1007h, 100Ah, 100Dh, 1010h, 1013h, 1016h, 1019h
.text:00413364                 dd 101Ch, 101Fh, 1022h, 1025h, 1028h, 102Bh, 102Eh, 1031h
.text:00413364                 dd 1034h, 1037h, 103Ah, 103Dh, 1040h, 1043h, 1046h, 1049h
.text:00413364                 dd 104Ch, 104Fh, 1052h, 1055h, 1058h, 105Bh, 105Eh, 1061h
.text:00413364                 dd 1064h, 1067h, 106Ah, 106Dh, 1070h, 1073h, 1076h, 1079h
.text:00413364                 dd 107Ch, 107Fh, 1082h, 1085h, 1088h, 108Bh, 108Eh, 1091h
.text:00413364                 dd 1094h, 1097h, 109Ah, 109Dh, 10A0h, 10A3h, 10A6h, 10A9h
.text:00413364                 dd 10ACh, 10AFh, 10B2h, 10B5h, 10B8h, 10BBh, 10BEh, 10C1h
.text:00413364                 dd 10C4h, 10C7h, 10CAh, 10CDh, 10D0h, 10D3h, 10D6h, 10D9h
.text:00413364                 dd 10DCh, 10DFh, 10E2h, 10E5h, 10E8h, 10EBh, 10EEh, 10F1h
.text:00413364                 dd 10F4h, 10F7h, 10FAh, 10FDh, 1100h, 1103h, 1106h, 1109h
.text:00413364                 dd 110Ch, 110Fh, 1112h, 1115h, 1118h, 111Bh, 111Eh, 1121h
.text:00413364                 dd 1124h, 1127h, 112Ah, 112Dh, 1130h, 1133h, 1136h, 1139h
.text:00413364                 dd 113Ch, 113Fh, 1142h, 1145h, 1148h, 114Bh, 114Eh, 1151h
.text:00413364                 dd 1154h, 1157h, 115Ah, 115Dh, 1160h, 1163h, 1166h, 1169h
.text:00413364                 dd 116Ch, 116Fh, 1172h, 1175h, 1178h, 117Bh, 117Eh, 1181h
.text:00413364                 dd 1184h, 1187h, 118Ah, 118Dh, 1190h, 1193h, 1196h, 1199h
.text:00413364                 dd 119Ch, 119Fh, 11A2h, 11A5h, 11A8h, 11ABh, 11AEh, 11B1h
.text:00413364                 dd 11B4h, 11B7h, 11BAh, 11BDh, 11C0h, 11C3h, 11C6h, 11C9h
.text:00413364                 dd 11CCh, 11CFh, 11D2h, 11D5h, 11D8h, 11DBh, 11DEh, 11E1h
.text:00413364                 dd 11E4h, 11E7h, 11EAh, 11EDh, 11F0h, 11F3h, 11F6h, 11F9h
.text:00413364                 dd 11FCh, 11FFh, 1202h, 1205h, 1208h, 120Bh, 120Eh, 1211h
.text:00413364                 dd 1214h, 1217h, 121Ah, 121Dh, 1220h, 1223h, 1226h, 1229h
.text:00413364                 dd 122Ch, 122Fh, 1232h, 1235h, 1238h, 123Bh, 123Eh, 1241h
.text:00413364                 dd 1244h, 1247h, 124Ah, 124Dh, 1250h, 1253h, 1256h, 1259h
.text:00413364                 dd 125Ch, 125Fh, 1262h, 1265h, 1268h, 126Bh, 126Eh, 1271h
.text:00413364                 dd 1274h, 1277h, 127Ah, 127Dh, 1280h, 1283h, 1286h, 1289h
.text:00413364                 dd 128Ch, 128Fh, 1292h, 1295h, 1298h, 129Bh, 129Eh, 12A1h
.text:00413364                 dd 12A4h, 12A7h, 12AAh, 12ADh, 12B0h, 12B3h, 12B6h, 20h
.text:00413364                 dd 280000h, 290043h, 0
.text:00413890                 text "UTF-16LE", '<<',0
.text:00413896                 align 4
.text:00413898                 text "UTF-16LE", '-',0
.text:0041389C                 dd 280000h, 290052h, 0
.text:004138A8                 dd 75h, 2C0000h, 0
.text:004138B4                 text "UTF-16LE", '>>',0
.text:004138BA                 align 4
.text:004138BC a14:
.text:004138BC                 text "UTF-16LE", ' 1/4 ',0
.text:004138C8                 dd 200000h, 2F0031h, 200032h, 0
.text:004138D8 a34:
.text:004138D8                 text "UTF-16LE", ' 3/4 ',0
.text:004138E4                 dd offset dword_40F924+6DCh
.text:004138E8                 dd 45h, 780000h, 0
.text:004138F4 aSs:
.text:004138F4                 text "UTF-16LE", 'ss',0
.text:004138FA                 align 4
.text:004138FC aAe:
.text:004138FC                 text "UTF-16LE", 'ae',0
.text:00413902                 align 4
.text:00413904 aIj:
.text:00413904                 text "UTF-16LE", 'IJ',0
.text:0041390A                 align 4
.text:0041390C aIj_0:
.text:0041390C                 text "UTF-16LE", 'ij',0
.text:00413912                 align 4
.text:00413914 aN:
.text:00413914                 text "UTF-16LE", 27h,'n',0
.text:0041391A                 align 4
.text:0041391C aOe:
.text:0041391C                 text "UTF-16LE", 'OE',0
.text:00413922                 align 4
.text:00413924 aOe_0:
.text:00413924                 text "UTF-16LE", 'OE',0
.text:0041392A                 align 4
.text:0041392C aOe_1:
.text:0041392C                 text "UTF-16LE", 'oe',0
.text:00413932                 align 4
.text:00413934 aOe_2:
.text:00413934                 text "UTF-16LE", 'oe',0
.text:0041393A                 align 4
.text:0041393C aS_0:
.text:0041393C                 text "UTF-16LE", 's',0
.text:00413940                 dd 4C0000h, 4Ah, 4C0000h, 6Ah, 6C0000h, 6Ah, 4E0000h, 4Ah
.text:00413940                 dd 4E0000h, 6Ah, 6E0000h, 6Ah, 440000h, 5Ah, 440000h, 7Ah
.text:00413940                 dd 640000h, 7Ah, 270000h, 0
.text:00413990                 dd 5Eh, 270000h, 0
.text:0041399C                 dd 60h, 5F0000h, 0
.text:004139A8                 dd 3Ah, 7E0000h, 0
.text:004139B4                 dd 20h, 200000h, 0
.text:004139C0                 dd 20h, 200000h, 0
.text:004139CC                 dd 20h, 200000h, 0
.text:004139D8                 dd 20h, 200000h, 2 dup(0)
.text:004139E8                 align 20h
.text:00413A00                 text "UTF-16LE", '--',0
.text:00413A06                 align 4
.text:00413A08                 text "UTF-16LE", '-',0
.text:00413A0C                 dd 270000h, 0
.text:00413A14                 dd 27h, 2C0000h, 0
.text:00413A20                 dd 27h, 220000h, 0
.text:00413A2C                 dd 22h, 2C0000h, 2Ch, 220000h, 0
.text:00413A40                 dd 2Bh, 6F0000h, 0
.text:00413A4C                 dd 2Eh, 2E0000h, 2Eh, 2E0000h, 2E002Eh, 0
.text:00413A64                 dd 20h, 600000h, 0
.text:00413A70                 text "UTF-16LE", '``',0
.text:00413A76                 align 4
.text:00413A78                 text "UTF-16LE", '```',0
.text:00413A80                 dd 3C0000h, 0
.text:00413A88                 dd 3Eh, 210000h, 21h, 3F0000h, 3Fh, 3F0000h, 21h, 210000h
.text:00413A88                 dd 3Fh, 200000h, 5 dup(0)
.text:00413AC4 aRs:
.text:00413AC4                 text "UTF-16LE", 'Rs',0
.text:00413ACA                 align 4
.text:00413ACC aEur:
.text:00413ACC                 text "UTF-16LE", 'EUR',0
.text:00413AD4                 dd 610000h, 63002Fh, 0
.text:00413AE0 aAS:
.text:00413AE0                 text "UTF-16LE", 'a/s',0
.text:00413AE8                 dd 430000h, 0
.text:00413AF0 aCO:
.text:00413AF0                 text "UTF-16LE", 'c/o',0
.text:00413AF8                 dd 630000h, 75002Fh, 0
.text:00413B04                 dd 67h, 480000h, 0
.text:00413B10                 dd 48h, 480000h, 0
.text:00413B1C                 dd 68h, 490000h, 0
.text:00413B28                 dd 49h, 4C0000h, 0
.text:00413B34                 dd 6Ch, 4E0000h, 0
.text:00413B40 aNo:
.text:00413B40                 text "UTF-16LE", 'No',0
.text:00413B46                 align 4
.text:00413B48 aP:
.text:00413B48                 text "UTF-16LE", 'P',0
.text:00413B4C                 dd 510000h, 0
.text:00413B54                 dd 52h, 520000h, 0
.text:00413B60                 dd 52h, 540000h, 4C0045h, 0
.text:00413B70 aTm:
.text:00413B70                 text "UTF-16LE", '(TM)',0
.text:00413B7A                 align 4
.text:00413B7C aZ:
.text:00413B7C                 text "UTF-16LE", 'Z',0
.text:00413B80                 dd 4F0000h, 6D0068h, 0
.text:00413B8C                 dd 5Ah, 420000h, 0
.text:00413B98                 dd 43h, 650000h, 0
.text:00413BA4                 dd 65h, 450000h, 0
.text:00413BB0                 dd 46h, 4D0000h, 0
.text:00413BBC                 dd 6Fh, 690000h, 0
.text:00413BC8                 dd 44h, 640000h, 0
.text:00413BD4                 dd 65h, 690000h, 0
.text:00413BE0                 dd 6Ah, 200000h, 2F0031h, 200033h, 0
.text:00413BF4 a23:
.text:00413BF4                 text "UTF-16LE", ' 2/3 ',0
.text:00413C00                 dd 200000h, 2F0031h, 200035h, 0
.text:00413C10 a25:
.text:00413C10                 text "UTF-16LE", ' 2/5 ',0
.text:00413C1C                 dd 200000h, 2F0033h, 200035h, 0
.text:00413C2C a45:
.text:00413C2C                 text "UTF-16LE", ' 4/5 ',0
.text:00413C38                 dd 200000h, 2F0031h, 200036h, 0
.text:00413C48 a56:
.text:00413C48                 text "UTF-16LE", ' 5/6 ',0
.text:00413C54                 dd 200000h, 2F0031h, 200038h, 0
.text:00413C64 a38:
.text:00413C64                 text "UTF-16LE", ' 3/8 ',0
.text:00413C70                 dd 200000h, 2F0035h, 200038h, 0
.text:00413C80 a78:
.text:00413C80                 text "UTF-16LE", ' 7/8 ',0
.text:00413C8C                 dd 200000h, 2F0031h, 0
.text:00413C98                 dd 49h, 490000h, 49h, 490000h, 490049h, 0
.text:00413CB0 aIv:
.text:00413CB0                 text "UTF-16LE", 'IV',0
.text:00413CB6                 align 4
.text:00413CB8 aV:
.text:00413CB8                 text "UTF-16LE", 'V',0
.text:00413CBC                 dd 560000h, 49h, 560000h, 490049h, 0
.text:00413CD0 aViii:
.text:00413CD0                 text "UTF-16LE", 'VIII',0
.text:00413CDA                 align 4
.text:00413CDC aIx:
.text:00413CDC                 text "UTF-16LE", 'IX',0
.text:00413CE2                 align 4
.text:00413CE4                 text "UTF-16LE", 'X',0
.text:00413CE8                 dd 580000h, 49h, 580000h, 490049h, 0
.text:00413CFC                 dd 4Ch, 430000h, 0
.text:00413D08                 dd 44h, 4D0000h, 0
.text:00413D14                 dd 69h, 690000h, 69h, 690000h, 690069h, 0
.text:00413D2C aIv_0:
.text:00413D2C                 text "UTF-16LE", 'iv',0
.text:00413D32                 align 4
.text:00413D34 aV_0:
.text:00413D34                 text "UTF-16LE", 'v',0
.text:00413D38                 dd 760000h, 69h, 760000h, 690069h, 0
.text:00413D4C aViii_0:
.text:00413D4C                 text "UTF-16LE", 'viii',0
.text:00413D56                 align 4
.text:00413D58 aIx_0:
.text:00413D58                 text "UTF-16LE", 'ix',0
.text:00413D5E                 align 10h
.text:00413D60                 text "UTF-16LE", 'x',0
.text:00413D64                 dd 780000h, 69h, 780000h, 690069h, 0
.text:00413D78                 dd 6Ch, 630000h, 0
.text:00413D84                 dd 64h, 6D0000h, 0
.text:00413D90                 text "UTF-16LE", '<-',0
.text:00413D96                 align 4
.text:00413D98                 text "UTF-16LE", '->',0
.text:00413D9E                 align 10h
.text:00413DA0                 text "UTF-16LE", '<->',0
.text:00413DA8                 dd 3C0000h, 3Dh, 3D0000h, 3Eh, 3C0000h, 3E003Dh, 0
.text:00413DC4                 db 2Dh, 4 dup(0)
.text:00413DC9                 align 2
.text:00413DCA                 dw 2Fh
.text:00413DCC                 align 10h
.text:00413DD0                 dd 5Ch, 2A0000h, 0
.text:00413DDC                 dd 7Ch, 3A0000h, 0
.text:00413DE8                 dd 7Eh, 3C0000h, 3Dh, 3E0000h, 3Dh, 3C0000h, 3Ch, 3E0000h
.text:00413DE8                 dd 3Eh, 3C0000h, 3C003Ch, 0
.text:00413E18                 text "UTF-16LE", '>>>',0
.text:00413E20                 dd 4E0000h, 4C0055h, 0
.text:00413E2C aSoh:
.text:00413E2C                 text "UTF-16LE", 'SOH',0
.text:00413E34                 dd 530000h, 580054h, 0
.text:00413E40 aEtx:
.text:00413E40                 text "UTF-16LE", 'ETX',0
.text:00413E48                 dd 450000h, 54004Fh, 0
.text:00413E54 aEnq:
.text:00413E54                 text "UTF-16LE", 'ENQ',0
.text:00413E5C                 dd offset dword_40F924+6DCh
.text:00413E60 aCk:
.text:00413E60                 text "UTF-16LE", 'CK',0
.text:00413E66                 align 4
.text:00413E68 aBel:
.text:00413E68                 text "UTF-16LE", 'BEL',0
.text:00413E70                 dd offset unk_420000
.text:00413E74                 dd 53h, 480000h, 54h, 4C0000h, 46h, 560000h, 54h, 460000h
.text:00413E74                 dd 46h, 430000h, 52h, 530000h, 4Fh, 530000h, 49h, 440000h
.text:00413E74                 dd 45004Ch, 0
.text:00413EBC aDc1:
.text:00413EBC                 text "UTF-16LE", 'DC1',0
.text:00413EC4                 dd 440000h, 320043h, 0
.text:00413ED0 aDc3:
.text:00413ED0                 text "UTF-16LE", 'DC3',0
.text:00413ED8                 dd 440000h, 340043h, 0
.text:00413EE4                 dd offset dword_40F924+72Ah
.text:00413EE8                 dd 4Bh, 530000h, 4E0059h, 0
.text:00413EF8 aEtb:
.text:00413EF8                 text "UTF-16LE", 'ETB',0
.text:00413F00                 dd 430000h, 4E0041h, 0
.text:00413F0C aEm:
.text:00413F0C                 text "UTF-16LE", 'EM',0
.text:00413F12                 align 4
.text:00413F14 aSub:
.text:00413F14                 text "UTF-16LE", 'SUB',0
.text:00413F1C                 dd 450000h, 430053h, 0
.text:00413F28 aFs:
.text:00413F28                 text "UTF-16LE", 'FS',0
.text:00413F2E                 align 10h
.text:00413F30 aGs:
.text:00413F30                 text "UTF-16LE", 'GS',0
.text:00413F36                 align 4
.text:00413F38 aRs_0:
.text:00413F38                 text "UTF-16LE", 'RS',0
.text:00413F3E                 align 10h
.text:00413F40 aUs:
.text:00413F40                 text "UTF-16LE", 'US',0
.text:00413F46                 align 4
.text:00413F48 aSp:
.text:00413F48                 text "UTF-16LE", 'SP',0
.text:00413F4E                 align 10h
.text:00413F50 aDel:
.text:00413F50                 text "UTF-16LE", 'DEL',0
.text:00413F58                 dd 5F0000h, 0
.text:00413F60 aNl:
.text:00413F60                 text "UTF-16LE", 'NL',0
.text:00413F66                 align 4
.text:00413F68 a1:
.text:00413F68                 text "UTF-16LE", '(1)',0
.text:00413F70                 dd 280000h, 290032h, 0
.text:00413F7C a3:
.text:00413F7C                 text "UTF-16LE", '(3)',0
.text:00413F84                 dd 280000h, 290034h, 0
.text:00413F90 a5:
.text:00413F90                 text "UTF-16LE", '(5)',0
.text:00413F98                 dd 280000h, 290036h, 0
.text:00413FA4 a7:
.text:00413FA4                 text "UTF-16LE", '(7)',0
.text:00413FAC                 dd 280000h, 290038h, 0
.text:00413FB8 a9:
.text:00413FB8                 text "UTF-16LE", '(9)',0
.text:00413FC0                 dd 280000h, 300031h, 29h, 280000h, 310031h, 29h, 280000h
.text:00413FC0                 dd 320031h, 29h, 280000h, 330031h, 29h, 280000h, 340031h
.text:00413FC0                 dd 29h, 280000h, 350031h, 29h, 280000h, 360031h, 29h, 280000h
.text:00413FC0                 dd 370031h, 29h, 280000h, 380031h, 29h, 280000h, 390031h
.text:00413FC0                 dd 29h, 280000h, 300032h, 29h, 280000h, 290031h, 0
.text:00414050 a2:
.text:00414050                 text "UTF-16LE", '(2)',0
.text:00414058                 dd 280000h, 290033h, 0
.text:00414064 a4:
.text:00414064                 text "UTF-16LE", '(4)',0
.text:0041406C                 dd 280000h, 290035h, 0
.text:00414078 a6:
.text:00414078                 text "UTF-16LE", '(6)',0
.text:00414080                 dd 280000h, 290037h, 0
.text:0041408C a8:
.text:0041408C                 text "UTF-16LE", '(8)',0
.text:00414094                 dd 280000h, 290039h, 0
.text:004140A0 a10:
.text:004140A0                 text "UTF-16LE", '(10)',0
.text:004140AA                 align 4
.text:004140AC a11:
.text:004140AC                 text "UTF-16LE", '(11)',0
.text:004140B6                 align 4
.text:004140B8 a12:
.text:004140B8                 text "UTF-16LE", '(12)',0
.text:004140C2                 align 4
.text:004140C4 a13:
.text:004140C4                 text "UTF-16LE", '(13)',0
.text:004140CE                 align 10h
.text:004140D0 a14_0:
.text:004140D0                 text "UTF-16LE", '(14)',0
.text:004140DA                 align 4
.text:004140DC a15:
.text:004140DC                 text "UTF-16LE", '(15)',0
.text:004140E6                 align 4
.text:004140E8 a16:
.text:004140E8                 text "UTF-16LE", '(16)',0
.text:004140F2                 align 4
.text:004140F4 a17:
.text:004140F4                 text "UTF-16LE", '(17)',0
.text:004140FE                 align 10h
.text:00414100 a18:
.text:00414100                 text "UTF-16LE", '(18)',0
.text:0041410A                 align 4
.text:0041410C a19:
.text:0041410C                 text "UTF-16LE", '(19)',0
.text:00414116                 align 4
.text:00414118 a20:
.text:00414118                 text "UTF-16LE", '(20)',0
.text:00414122                 align 4
.text:00414124 a1_0:
.text:00414124                 text "UTF-16LE", '1.',0
.text:0041412A                 align 4
.text:0041412C a2_0:
.text:0041412C                 text "UTF-16LE", '2.',0
.text:00414132                 align 4
.text:00414134 a3_0:
.text:00414134                 text "UTF-16LE", '3.',0
.text:0041413A                 align 4
.text:0041413C a4_0:
.text:0041413C                 text "UTF-16LE", '4.',0
.text:00414142                 align 4
.text:00414144 a5_0:
.text:00414144                 text "UTF-16LE", '5.',0
.text:0041414A                 align 4
.text:0041414C a6_0:
.text:0041414C                 text "UTF-16LE", '6.',0
.text:00414152                 align 4
.text:00414154 a7_0:
.text:00414154                 text "UTF-16LE", '7.',0
.text:0041415A                 align 4
.text:0041415C a8_0:
.text:0041415C                 text "UTF-16LE", '8.',0
.text:00414162                 align 4
.text:00414164 a9_0:
.text:00414164                 text "UTF-16LE", '9.',0
.text:0041416A                 align 4
.text:0041416C a10_0:
.text:0041416C                 text "UTF-16LE", '10.',0
.text:00414174                 dd 310000h, 2E0031h, 0
.text:00414180 a12_0:
.text:00414180                 text "UTF-16LE", '12.',0
.text:00414188                 dd 310000h, 2E0033h, 0
.text:00414194 a14_1:
.text:00414194                 text "UTF-16LE", '14.',0
.text:0041419C                 dd 310000h, 2E0035h, 0
.text:004141A8 a16_0:
.text:004141A8                 text "UTF-16LE", '16.',0
.text:004141B0                 dd 310000h, 2E0037h, 0
.text:004141BC a18_0:
.text:004141BC                 text "UTF-16LE", '18.',0
.text:004141C4                 dd 310000h, 2E0039h, 0
.text:004141D0 a20_0:
.text:004141D0                 text "UTF-16LE", '20.',0
.text:004141D8                 dd 280000h, 290061h, 0
.text:004141E4 aB:
.text:004141E4                 text "UTF-16LE", '(b)',0
.text:004141EC                 dd 280000h, 290063h, 0
.text:004141F8 aD:
.text:004141F8                 text "UTF-16LE", '(d)',0
.text:00414200                 dd 280000h, 290065h, 0
.text:0041420C                 text "UTF-16LE", '(f)',0
.text:00414214                 dd 280000h, 290067h, 0
.text:00414220                 text "UTF-16LE", '(h)',0
.text:00414228                 dd 280000h, 290069h, 0
.text:00414234 aJ:
.text:00414234                 text "UTF-16LE", '(j)',0
.text:0041423C                 dd 280000h, 29006Bh, 0
.text:00414248                 text "UTF-16LE", '(l)',0
.text:00414250                 dd 280000h, 29006Dh, 0
.text:0041425C aN_0:
.text:0041425C                 text "UTF-16LE", '(n)',0
.text:00414264                 dd 280000h, 29006Fh, 0
.text:00414270 aP_0:
.text:00414270                 text "UTF-16LE", '(p)',0
.text:00414278                 dd 280000h, 290071h, 0
.text:00414284 aR_0:
.text:00414284                 text "UTF-16LE", '(r)',0
.text:0041428C                 dd 280000h, 290073h, 0
.text:00414298 aT:
.text:00414298                 text "UTF-16LE", '(t)',0
.text:004142A0                 dd 280000h, 290075h, 0
.text:004142AC aV_1:
.text:004142AC                 text "UTF-16LE", '(v)',0
.text:004142B4                 dd 280000h, 290077h, 0
.text:004142C0                 text "UTF-16LE", '(x)',0
.text:004142C8                 dd 280000h, 290079h, 0
.text:004142D4 aZ_0:
.text:004142D4                 text "UTF-16LE", '(z)',0
.text:004142DC                 dd 280000h, 290041h, 0
.text:004142E8                 dd offset byte_420001+27h
.text:004142EC                 dd 29h, 280000h, 290043h, 0
.text:004142FC aD_0:
.text:004142FC                 text "UTF-16LE", '(D)',0
.text:00414304                 dd 280000h, 290045h, 0
.text:00414310                 text "UTF-16LE", '(F)',0
.text:00414318                 dd 280000h, 290047h, 0
.text:00414324                 text "UTF-16LE", '(H)',0
.text:0041432C                 dd 280000h, 290049h, 0
.text:00414338 aJ_0:
.text:00414338                 text "UTF-16LE", '(J)',0
.text:00414340                 dd 280000h, 29004Bh, 0
.text:0041434C                 text "UTF-16LE", '(L)',0
.text:00414354                 dd 280000h, 29004Dh, 0
.text:00414360 aN_1:
.text:00414360                 text "UTF-16LE", '(N)',0
.text:00414368                 dd 280000h, 29004Fh, 0
.text:00414374 aP_1:
.text:00414374                 text "UTF-16LE", '(P)',0
.text:0041437C                 dd 280000h, 290051h, 0
.text:00414388 aR_1:
.text:00414388                 text "UTF-16LE", '(R)',0
.text:00414390                 dd 280000h, 290053h, 0
.text:0041439C aT_0:
.text:0041439C                 text "UTF-16LE", '(T)',0
.text:004143A4                 dd 280000h, 290055h, 0
.text:004143B0 aV_2:
.text:004143B0                 text "UTF-16LE", '(V)',0
.text:004143B8                 dd 280000h, 290057h, 0
.text:004143C4                 text "UTF-16LE", '(X)',0
.text:004143CC                 dd 280000h, 290059h, 0
.text:004143D8 aZ_1:
.text:004143D8                 text "UTF-16LE", '(Z)',0
.text:004143E0                 dd 280000h, 290061h, 0
.text:004143EC aB_0:
.text:004143EC                 text "UTF-16LE", '(b)',0
.text:004143F4                 dd 280000h, 290063h, 0
.text:00414400 aD_1:
.text:00414400                 text "UTF-16LE", '(d)',0
.text:00414408                 dd 280000h, 290065h, 0
.text:00414414                 text "UTF-16LE", '(f)',0
.text:0041441C                 dd 280000h, 290067h, 0
.text:00414428                 text "UTF-16LE", '(h)',0
.text:00414430                 dd 280000h, 290069h, 0
.text:0041443C aJ_1:
.text:0041443C                 text "UTF-16LE", '(j)',0
.text:00414444                 dd 280000h, 29006Bh, 0
.text:00414450                 text "UTF-16LE", '(l)',0
.text:00414458                 dd 280000h, 29006Dh, 0
.text:00414464 aN_2:
.text:00414464                 text "UTF-16LE", '(n)',0
.text:0041446C                 dd 280000h, 29006Fh, 0
.text:00414478 aP_2:
.text:00414478                 text "UTF-16LE", '(p)',0
.text:00414480                 dd 280000h, 290071h, 0
.text:0041448C aR_2:
.text:0041448C                 text "UTF-16LE", '(r)',0
.text:00414494                 dd 280000h, 290073h, 0
.text:004144A0 aT_1:
.text:004144A0                 text "UTF-16LE", '(t)',0
.text:004144A8                 dd 280000h, 290075h, 0
.text:004144B4 aV_3:
.text:004144B4                 text "UTF-16LE", '(v)',0
.text:004144BC                 dd 280000h, 290077h, 0
.text:004144C8                 text "UTF-16LE", '(x)',0
.text:004144D0                 dd 280000h, 290079h, 0
.text:004144DC aZ_2:
.text:004144DC                 text "UTF-16LE", '(z)',0
.text:004144E4                 dd 280000h, 290030h, 0
.text:004144F0                 db 2Dh, 4 dup(0)
.text:004144F5                 align 2
.text:004144F6                 dw 7Ch
.text:004144F8                 dd 0
.text:004144FC                 dd 2Bh, 2B0000h, 0
.text:00414508                 dd 2Bh, 2B0000h, 0
.text:00414514                 dd 2Bh, 2B0000h, 0
.text:00414520                 dd 2Bh, 2B0000h, 0
.text:0041452C                 dd 2Bh, 6F0000h, 0
.text:00414538                 text "UTF-16LE", '::=',0
.text:00414540                 dd 3D0000h, 3Dh, 3D0000h, 3D003Dh, 0
.text:00414554                 dd 20h, 3D0000h, 0
.text:00414560 a21:
.text:00414560                 text "UTF-16LE", '(21)',0
.text:0041456A                 align 4
.text:0041456C a22:
.text:0041456C                 text "UTF-16LE", '(22)',0
.text:00414576                 align 4
.text:00414578 a23_0:
.text:00414578                 text "UTF-16LE", '(23)',0
.text:00414582                 align 4
.text:00414584 a24:
.text:00414584                 text "UTF-16LE", '(24)',0
.text:0041458E                 align 10h
.text:00414590 a25_0:
.text:00414590                 text "UTF-16LE", '(25)',0
.text:0041459A                 align 4
.text:0041459C a26:
.text:0041459C                 text "UTF-16LE", '(26)',0
.text:004145A6                 align 4
.text:004145A8 a27:
.text:004145A8                 text "UTF-16LE", '(27)',0
.text:004145B2                 align 4
.text:004145B4 a28:
.text:004145B4                 text "UTF-16LE", '(28)',0
.text:004145BE                 align 10h
.text:004145C0 a29:
.text:004145C0                 text "UTF-16LE", '(29)',0
.text:004145CA                 align 4
.text:004145CC a30:
.text:004145CC                 text "UTF-16LE", '(30)',0
.text:004145D6                 align 4
.text:004145D8 a31:
.text:004145D8                 text "UTF-16LE", '(31)',0
.text:004145E2                 align 4
.text:004145E4 a32:
.text:004145E4                 text "UTF-16LE", '(32)',0
.text:004145EE                 align 10h
.text:004145F0 a33:
.text:004145F0                 text "UTF-16LE", '(33)',0
.text:004145FA                 align 4
.text:004145FC a34_0:
.text:004145FC                 text "UTF-16LE", '(34)',0
.text:00414606                 align 4
.text:00414608 a35:
.text:00414608                 text "UTF-16LE", '(35)',0
.text:00414612                 align 4
.text:00414614 a36:
.text:00414614                 text "UTF-16LE", '(36)',0
.text:0041461E                 align 10h
.text:00414620 a37:
.text:00414620                 text "UTF-16LE", '(37)',0
.text:0041462A                 align 4
.text:0041462C a38_0:
.text:0041462C                 text "UTF-16LE", '(38)',0
.text:00414636                 align 4
.text:00414638 a39:
.text:00414638                 text "UTF-16LE", '(39)',0
.text:00414642                 align 4
.text:00414644 a40:
.text:00414644                 text "UTF-16LE", '(40)',0
.text:0041464E                 align 10h
.text:00414650 a41:
.text:00414650                 text "UTF-16LE", '(41)',0
.text:0041465A                 align 4
.text:0041465C a42:
.text:0041465C                 text "UTF-16LE", '(42)',0
.text:00414666                 align 4
.text:00414668 a43:
.text:00414668                 text "UTF-16LE", '(43)',0
.text:00414672                 align 4
.text:00414674 a44:
.text:00414674                 text "UTF-16LE", '(44)',0
.text:0041467E                 align 10h
.text:00414680 a45_0:
.text:00414680                 text "UTF-16LE", '(45)',0
.text:0041468A                 align 4
.text:0041468C a46:
.text:0041468C                 text "UTF-16LE", '(46)',0
.text:00414696                 align 4
.text:00414698 a47:
.text:00414698                 text "UTF-16LE", '(47)',0
.text:004146A2                 align 4
.text:004146A4 a48:
.text:004146A4                 text "UTF-16LE", '(48)',0
.text:004146AE                 align 10h
.text:004146B0 a49:
.text:004146B0                 text "UTF-16LE", '(49)',0
.text:004146BA                 align 4
.text:004146BC a50:
.text:004146BC                 text "UTF-16LE", '(50)',0
.text:004146C6                 align 4
.text:004146C8 aHpa:
.text:004146C8                 text "UTF-16LE", 'hPa',0
.text:004146D0                 dd 640000h, 61h, 410000h, 55h, 620000h, 720061h, 0
.text:004146EC aOv:
.text:004146EC                 text "UTF-16LE", 'oV',0
.text:004146F2                 align 4
.text:004146F4 aPc:
.text:004146F4                 text "UTF-16LE", 'pc',0
.text:004146FA                 align 4
.text:004146FC                 dd offset dword_40F924+74Ch
.text:00414700                 dd 0
.text:00414704                 dd offset dword_40F924+74Ah
.text:00414708                 dd 0
.text:0041470C                 dd offset dword_40F924+751h
.text:00414710                 dd 0
.text:00414714                 dd offset dword_40F924+749h
.text:00414718                 dd 0
.text:0041471C                 dd offset dword_40F924+747h
.text:00414720                 dd 0
.text:00414724                 dd offset byte_420001+4Ah
.text:00414728                 dd 0
.text:0041472C                 dd offset byte_420001+4Ch
.text:00414730                 dd 0
.text:00414734                 dd offset byte_420001+46h
.text:00414738                 dd 0
.text:0041473C aCal:
.text:0041473C                 text "UTF-16LE", 'cal',0
.text:00414744                 dd 6B0000h, 610063h, 6Ch, 700000h, 46h, 6E0000h, 46h, 750000h
.text:00414744                 dd 46h, 750000h, 67h, 6D0000h, 67h, 6B0000h, 67h, 480000h
.text:00414744                 dd 7Ah, 6B0000h, 7A0048h, 0
.text:00414794 aMhz:
.text:00414794                 text "UTF-16LE", 'MHz',0
.text:0041479C                 dd 470000h, 7A0048h, 0
.text:004147A8 aThz:
.text:004147A8                 text "UTF-16LE", 'THz',0
.text:004147B0                 dd 750000h, 6Ch, 6D0000h, 6Ch, 640000h, 6Ch, 6B0000h, 6Ch
.text:004147B0                 dd 660000h, 6Dh, 6E0000h, 6Dh, 750000h, 6Dh, 6D0000h, 6Dh
.text:004147B0                 dd 630000h, 6Dh, 6B0000h, 6Dh, 6D0000h, 5E006Dh, 32h, 630000h
.text:004147B0                 dd 5E006Dh, 32h, 6D0000h, 32005Eh, 0
.text:00414824 aKm2:
.text:00414824                 text "UTF-16LE", 'km^2',0
.text:0041482E                 align 10h
.text:00414830 aMm3:
.text:00414830                 text "UTF-16LE", 'mm^3',0
.text:0041483A                 align 4
.text:0041483C aCm3:
.text:0041483C                 text "UTF-16LE", 'cm^3',0
.text:00414846                 align 4
.text:00414848 aM3:
.text:00414848                 text "UTF-16LE", 'm^3',0
.text:00414850                 dd 6B0000h, 5E006Dh, 33h, 6D0000h, 73002Fh, 0
.text:00414868 aMS2:
.text:00414868                 text "UTF-16LE", 'm/s^2',0
.text:00414874                 dd 500000h, 61h, 6B0000h, 610050h, 0
.text:00414888 aMpa:
.text:00414888                 text "UTF-16LE", 'MPa',0
.text:00414890                 dd 470000h, 610050h, 0
.text:0041489C aRad:
.text:0041489C                 text "UTF-16LE", 'rad',0
.text:004148A4                 dd 720000h, 640061h, 73002Fh, 0
.text:004148B4 aRadS2:
.text:004148B4                 text "UTF-16LE", 'rad/s^2',0
.text:004148C4                 dd 700000h, 73h, 6E0000h, 73h, 750000h, 73h, 6D0000h, 73h
.text:004148C4                 dd 700000h, 56h, 6E0000h, 56h, 750000h, 56h, 6D0000h, 56h
.text:004148C4                 dd 6B0000h, 56h, 4D0000h, 56h, 700000h, 57h, 6E0000h, 57h
.text:004148C4                 dd 750000h, 57h, 6D0000h, 57h, 6B0000h, 57h, 4D0000h, 57h
.text:004148C4                 dd 610000h, 6D002Eh, 2Eh, 420000h, 71h, 630000h, 63h, 630000h
.text:004148C4                 dd 64h, 430000h, 6B002Fh, 67h, 430000h, 2E006Fh, 0
.text:00414980                 dd offset byte_420001+63h
.text:00414984                 align 8
.text:00414988 aGy:
.text:00414988                 text "UTF-16LE", 'Gy',0
.text:0041498E                 align 10h
.text:00414990 aHa:
.text:00414990                 text "UTF-16LE", 'ha',0
.text:00414996                 align 4
.text:00414998 aHp:
.text:00414998                 text "UTF-16LE", 'HP',0
.text:0041499E                 align 10h
.text:004149A0 aIn:
.text:004149A0                 text "UTF-16LE", 'in',0
.text:004149A6                 align 4
.text:004149A8 aKk:
.text:004149A8                 text "UTF-16LE", 'KK',0
.text:004149AE                 align 10h
.text:004149B0 aKm:
.text:004149B0                 text "UTF-16LE", 'KM',0
.text:004149B6                 align 4
.text:004149B8 aKt:
.text:004149B8                 text "UTF-16LE", 'kt',0
.text:004149BE                 align 10h
.text:004149C0 aLm:
.text:004149C0                 text "UTF-16LE", 'lm',0
.text:004149C6                 align 4
.text:004149C8 aLn:
.text:004149C8                 text "UTF-16LE", 'ln',0
.text:004149CE                 align 10h
.text:004149D0 aLog:
.text:004149D0                 text "UTF-16LE", 'log',0
.text:004149D8                 dd 6C0000h, 78h, 6D0000h, 62h, 6D0000h, 6C0069h, 0
.text:004149F4 aMol:
.text:004149F4                 text "UTF-16LE", 'mol',0
.text:004149FC                 dd 500000h, 48h, 700000h, 6D002Eh, 2Eh, 500000h, 4D0050h
.text:004149FC                 dd 0
.text:00414A1C aPr:
.text:00414A1C                 text "UTF-16LE", 'PR',0
.text:00414A22                 align 4
.text:00414A24 aSr:
.text:00414A24                 text "UTF-16LE", 'sr',0
.text:00414A2A                 align 4
.text:00414A2C aSv:
.text:00414A2C                 text "UTF-16LE", 'Sv',0
.text:00414A32                 align 4
.text:00414A34 aWb:
.text:00414A34                 text "UTF-16LE", 'Wb',0
.text:00414A3A                 align 4
.text:00414A3C aFf:
.text:00414A3C                 text "UTF-16LE", 'ff',0
.text:00414A42                 align 4
.text:00414A44 aFi:
.text:00414A44                 text "UTF-16LE", 'fi',0
.text:00414A4A                 align 4
.text:00414A4C aFl:
.text:00414A4C                 text "UTF-16LE", 'fl',0
.text:00414A52                 align 4
.text:00414A54 aFfi:
.text:00414A54                 text "UTF-16LE", 'ffi',0
.text:00414A5C                 dd 660000h, 6C0066h, 0
.text:00414A68 aSt:
.text:00414A68                 text "UTF-16LE", 'st',0
.text:00414A6E                 align 10h
.text:00414A70                 text "UTF-16LE", '+',0
.text:00414A74                 dd 10h dup(0)
.text:00414AB4                 dd 5F0000h, 0
.text:00414ABC                 dd 5Fh, 5F0000h, 0
.text:00414AC8                 dd 2Ch, 2E0000h, 0
.text:00414AD4                 dd 3Bh, 3A0000h, 0
.text:00414AE0                 dd 3Fh, 210000h, 0
.text:00414AEC                 dd 28h, 290000h, 0
.text:00414AF8                 dd 7Bh, 7D0000h, 0
.text:00414B04                 dd 23h, 260000h, 0
.text:00414B10                 dd 2Ah, 2B0000h, 0
.text:00414B1C                 db 2Dh, 4 dup(0)
.text:00414B21                 align 2
.text:00414B22                 dw 3Ch
.text:00414B24                 align 8
.text:00414B28                 dd 3Eh, 3D0000h, 0
.text:00414B34                 dd 5Ch, 240000h, 0
.text:00414B40                 dd 25h, 400000h, 2 dup(0)
.text:00414B50                 dd 21h, 220000h, 0
.text:00414B5C                 dd 23h, 240000h, 0
.text:00414B68                 dd 25h, 260000h, 0
.text:00414B74                 dd 27h, 280000h, 0
.text:00414B80                 dd 29h, 2A0000h, 0
.text:00414B8C                 dd 2Bh, 2C0000h, 0
.text:00414B98                 db 2Dh, 4 dup(0)
.text:00414B9D                 align 2
.text:00414B9E                 dw 2Eh
.text:00414BA0                 dd 0
.text:00414BA4                 dd 2Fh, 300000h, 0
.text:00414BB0                 dd 31h, 320000h, 0
.text:00414BBC                 dd 33h, 340000h, 0
.text:00414BC8                 dd 35h, 360000h, 0
.text:00414BD4                 dd 37h, 380000h, 0
.text:00414BE0                 dd 39h, 3A0000h, 0
.text:00414BEC                 dd 3Bh, 3C0000h, 0
.text:00414BF8                 dd 3Dh, 3E0000h, 0
.text:00414C04                 dd 3Fh, 400000h, 0
.text:00414C10                 dd 41h, 420000h, 0
.text:00414C1C                 dd 43h, 440000h, 0
.text:00414C28                 dd 45h, 460000h, 0
.text:00414C34                 dd 47h, 480000h, 0
.text:00414C40                 dd 49h, 4A0000h, 0
.text:00414C4C                 dd 4Bh, 4C0000h, 0
.text:00414C58                 dd 4Dh, 4E0000h, 0
.text:00414C64                 dd 4Fh, 500000h, 0
.text:00414C70                 dd 51h, 520000h, 0
.text:00414C7C                 dd 53h, 540000h, 0
.text:00414C88                 dd 55h, 560000h, 0
.text:00414C94                 dd 57h, 580000h, 0
.text:00414CA0                 dd 59h, 5A0000h, 0
.text:00414CAC                 dd 5Bh, 5C0000h, 0
.text:00414CB8                 dd 5Dh, 5E0000h, 0
.text:00414CC4                 dd 5Fh, 600000h, 0
.text:00414CD0                 dd 61h, 620000h, 0
.text:00414CDC                 dd 63h, 640000h, 0
.text:00414CE8                 dd 65h, 660000h, 0
.text:00414CF4                 dd 67h, 680000h, 0
.text:00414D00                 dd 69h, 6A0000h, 0
.text:00414D0C                 dd 6Bh, 6C0000h, 0
.text:00414D18                 dd 6Dh, 6E0000h, 0
.text:00414D24                 dd 6Fh, 700000h, 0
.text:00414D30                 dd 71h, 720000h, 0
.text:00414D3C                 dd 73h, 740000h, 0
.text:00414D48                 dd 75h, 760000h, 0
.text:00414D54                 dd 77h, 780000h, 0
.text:00414D60                 dd 79h, 7A0000h, 0
.text:00414D6C                 dd 7Bh, 7C0000h, 0
.text:00414D78                 dd 7Dh, 7E0000h, 0
.text:00414D84                 dd 41h, 420000h, 0
.text:00414D90                 dd 43h, 440000h, 0
.text:00414D9C                 dd 45h, 460000h, 0
.text:00414DA8                 dd 47h, 480000h, 0
.text:00414DB4                 dd 49h, 4A0000h, 0
.text:00414DC0                 dd 4Bh, 4C0000h, 0
.text:00414DCC                 dd 4Dh, 4E0000h, 0
.text:00414DD8                 dd 4Fh, 500000h, 0
.text:00414DE4                 dd 51h, 520000h, 0
.text:00414DF0                 dd 53h, 540000h, 0
.text:00414DFC                 dd 55h, 560000h, 0
.text:00414E08                 dd 57h, 580000h, 0
.text:00414E14                 dd 59h, 5A0000h, 0
.text:00414E20                 dd 61h, 620000h, 0
.text:00414E2C                 dd 63h, 640000h, 0
.text:00414E38                 dd 65h, 660000h, 0
.text:00414E44                 dd 67h, 680000h, 0
.text:00414E50                 dd 69h, 6A0000h, 0
.text:00414E5C                 dd 6Bh, 6C0000h, 0
.text:00414E68                 dd 6Dh, 6E0000h, 0
.text:00414E74                 dd 6Fh, 700000h, 0
.text:00414E80                 dd 71h, 720000h, 0
.text:00414E8C                 dd 73h, 740000h, 0
.text:00414E98                 dd 75h, 760000h, 0
.text:00414EA4                 dd 77h, 780000h, 0
.text:00414EB0                 dd 79h, 7A0000h, 0
.text:00414EBC                 dd 41h, 420000h, 0
.text:00414EC8                 dd 43h, 440000h, 0
.text:00414ED4                 dd 45h, 460000h, 0
.text:00414EE0                 dd 47h, 480000h, 0
.text:00414EEC                 dd 49h, 4A0000h, 0
.text:00414EF8                 dd 4Bh, 4C0000h, 0
.text:00414F04                 dd 4Dh, 4E0000h, 0
.text:00414F10                 dd 4Fh, 500000h, 0
.text:00414F1C                 dd 51h, 520000h, 0
.text:00414F28                 dd 53h, 540000h, 0
.text:00414F34                 dd 55h, 560000h, 0
.text:00414F40                 dd 57h, 580000h, 0
.text:00414F4C                 dd 59h, 5A0000h, 0
.text:00414F58                 dd 61h, 620000h, 0
.text:00414F64                 dd 63h, 640000h, 0
.text:00414F70                 dd 65h, 660000h, 0
.text:00414F7C                 dd 67h, 690000h, 0
.text:00414F88                 dd 6Ah, 6B0000h, 0
.text:00414F94                 dd 6Ch, 6D0000h, 0
.text:00414FA0                 dd 6Eh, 6F0000h, 0
.text:00414FAC                 dd 70h, 710000h, 0
.text:00414FB8                 dd 72h, 730000h, 0
.text:00414FC4                 dd 74h, 750000h, 0
.text:00414FD0                 dd 76h, 770000h, 0
.text:00414FDC                 dd 78h, 790000h, 0
.text:00414FE8                 dd 7Ah, 410000h, 0
.text:00414FF4                 dd 42h, 430000h, 0
.text:00415000                 dd 44h, 450000h, 0
.text:0041500C                 dd 46h, 470000h, 0
.text:00415018                 dd 48h, 490000h, 0
.text:00415024                 dd 4Ah, 4B0000h, 0
.text:00415030                 dd 4Ch, 4D0000h, 0
.text:0041503C                 dd 4Eh, 4F0000h, 0
.text:00415048                 dd 50h, 510000h, 0
.text:00415054                 dd 52h, 530000h, 0
.text:00415060                 dd 54h, 550000h, 0
.text:0041506C                 dd 56h, 570000h, 0
.text:00415078                 dd 58h, 590000h, 0
.text:00415084                 dd 5Ah, 610000h, 0
.text:00415090                 dd 62h, 630000h, 0
.text:0041509C                 dd 64h, 650000h, 0
.text:004150A8                 dd 66h, 670000h, 0
.text:004150B4                 dd 68h, 690000h, 0
.text:004150C0                 dd 6Ah, 6B0000h, 0
.text:004150CC                 dd 6Ch, 6D0000h, 0
.text:004150D8                 dd 6Eh, 6F0000h, 0
.text:004150E4                 dd 70h, 710000h, 0
.text:004150F0                 dd 72h, 730000h, 0
.text:004150FC                 dd 74h, 750000h, 0
.text:00415108                 dd 76h, 770000h, 0
.text:00415114                 dd 78h, 790000h, 0
.text:00415120                 dd 7Ah, 410000h, 0
.text:0041512C                 dd 43h, 440000h, 0
.text:00415138                 dd 47h, 4A0000h, 0
.text:00415144                 dd 4Bh, 4E0000h, 0
.text:00415150                 dd 4Fh, 500000h, 0
.text:0041515C                 dd 51h, 530000h, 0
.text:00415168                 dd 54h, 550000h, 0
.text:00415174                 dd 56h, 570000h, 0
.text:00415180                 dd 58h, 590000h, 0
.text:0041518C                 dd 5Ah, 610000h, 0
.text:00415198                 dd 62h, 630000h, 0
.text:004151A4                 dd 64h, 660000h, 0
.text:004151B0                 dd 68h, 690000h, 0
.text:004151BC                 dd 6Ah, 6B0000h, 0
.text:004151C8                 dd 6Dh, 6E0000h, 0
.text:004151D4                 dd 70h, 710000h, 0
.text:004151E0                 dd 72h, 730000h, 0
.text:004151EC                 dd 74h, 750000h, 0
.text:004151F8                 dd 76h, 770000h, 0
.text:00415204                 dd 78h, 790000h, 0
.text:00415210                 dd 7Ah, 410000h, 0
.text:0041521C                 dd 42h, 430000h, 0
.text:00415228                 dd 44h, 450000h, 0
.text:00415234                 dd 46h, 470000h, 0
.text:00415240                 dd 48h, 490000h, 0
.text:0041524C                 dd 4Ah, 4B0000h, 0
.text:00415258                 dd 4Ch, 4D0000h, 0
.text:00415264                 dd 4Eh, 4F0000h, 0
.text:00415270                 dd 50h, 510000h, 0
.text:0041527C                 dd 52h, 530000h, 0
.text:00415288                 dd 54h, 550000h, 0
.text:00415294                 dd 56h, 570000h, 0
.text:004152A0                 dd 58h, 590000h, 0
.text:004152AC                 dd 5Ah, 610000h, 0
.text:004152B8                 dd 62h, 630000h, 0
.text:004152C4                 dd 64h, 650000h, 0
.text:004152D0                 dd 66h, 670000h, 0
.text:004152DC                 dd 68h, 690000h, 0
.text:004152E8                 dd 6Ah, 6B0000h, 0
.text:004152F4                 dd 6Ch, 6D0000h, 0
.text:00415300                 dd 6Eh, 6F0000h, 0
.text:0041530C                 dd 70h, 710000h, 0
.text:00415318                 dd 72h, 730000h, 0
.text:00415324                 dd 74h, 750000h, 0
.text:00415330                 dd 76h, 770000h, 0
.text:0041533C                 dd 78h, 790000h, 0
.text:00415348                 dd 7Ah, 410000h, 0
.text:00415354                 dd 42h, 440000h, 0
.text:00415360                 dd 45h, 460000h, 0
.text:0041536C                 dd 47h, 4A0000h, 0
.text:00415378                 dd 4Bh, 4C0000h, 0
.text:00415384                 dd 4Dh, 4E0000h, 0
.text:00415390                 dd 4Fh, 500000h, 0
.text:0041539C                 dd 51h, 530000h, 0
.text:004153A8                 dd 54h, 550000h, 0
.text:004153B4                 dd 56h, 570000h, 0
.text:004153C0                 dd 58h, 590000h, 0
.text:004153CC                 dd 61h, 620000h, 0
.text:004153D8                 dd 63h, 640000h, 0
.text:004153E4                 dd 65h, 660000h, 0
.text:004153F0                 dd 67h, 680000h, 0
.text:004153FC                 dd 69h, 6A0000h, 0
.text:00415408                 dd 6Bh, 6C0000h, 0
.text:00415414                 dd 6Dh, 6E0000h, 0
.text:00415420                 dd 6Fh, 700000h, 0
.text:0041542C                 dd 71h, 720000h, 0
.text:00415438                 dd 73h, 740000h, 0
.text:00415444                 dd 75h, 760000h, 0
.text:00415450                 dd 77h, 780000h, 0
.text:0041545C                 dd 79h, 7A0000h, 0
.text:00415468                 dd 41h, 420000h, 0
.text:00415474                 dd 44h, 450000h, 0
.text:00415480                 dd 46h, 470000h, 0
.text:0041548C                 dd 49h, 4A0000h, 0
.text:00415498                 dd 4Bh, 4C0000h, 0
.text:004154A4                 dd 4Dh, 4F0000h, 0
.text:004154B0                 dd 53h, 540000h, 0
.text:004154BC                 dd 55h, 560000h, 0
.text:004154C8                 dd 57h, 580000h, 0
.text:004154D4                 dd 59h, 610000h, 0
.text:004154E0                 dd 62h, 630000h, 0
.text:004154EC                 dd 64h, 650000h, 0
.text:004154F8                 dd 66h, 670000h, 0
.text:00415504                 dd 68h, 690000h, 0
.text:00415510                 dd 6Ah, 6B0000h, 0
.text:0041551C                 dd 6Ch, 6D0000h, 0
.text:00415528                 dd 6Eh, 6F0000h, 0
.text:00415534                 dd 70h, 710000h, 0
.text:00415540                 dd 72h, 730000h, 0
.text:0041554C                 dd 74h, 750000h, 0
.text:00415558                 dd 76h, 770000h, 0
.text:00415564                 dd 78h, 790000h, 0
.text:00415570                 dd 7Ah, 410000h, 0
.text:0041557C                 dd 42h, 430000h, 0
.text:00415588                 dd 44h, 450000h, 0
.text:00415594                 dd 46h, 470000h, 0
.text:004155A0                 dd 48h, 490000h, 0
.text:004155AC                 dd 4Ah, 4B0000h, 0
.text:004155B8                 dd 4Ch, 4D0000h, 0
.text:004155C4                 dd 4Eh, 4F0000h, 0
.text:004155D0                 dd 50h, 510000h, 0
.text:004155DC                 dd 52h, 530000h, 0
.text:004155E8                 dd 54h, 550000h, 0
.text:004155F4                 dd 56h, 570000h, 0
.text:00415600                 dd 58h, 590000h, 0
.text:0041560C                 dd 5Ah, 610000h, 0
.text:00415618                 dd 62h, 630000h, 0
.text:00415624                 dd 64h, 650000h, 0
.text:00415630                 dd 66h, 670000h, 0
.text:0041563C                 dd 68h, 690000h, 0
.text:00415648                 dd 6Ah, 6B0000h, 0
.text:00415654                 dd 6Ch, 6D0000h, 0
.text:00415660                 dd 6Eh, 6F0000h, 0
.text:0041566C                 dd 70h, 710000h, 0
.text:00415678                 dd 72h, 730000h, 0
.text:00415684                 dd 74h, 750000h, 0
.text:00415690                 dd 76h, 770000h, 0
.text:0041569C                 dd 78h, 790000h, 0
.text:004156A8                 dd 7Ah, 410000h, 0
.text:004156B4                 dd 42h, 430000h, 0
.text:004156C0                 dd 44h, 450000h, 0
.text:004156CC                 dd 46h, 470000h, 0
.text:004156D8                 dd 48h, 490000h, 0
.text:004156E4                 dd 4Ah, 4B0000h, 0
.text:004156F0                 dd 4Ch, 4D0000h, 0
.text:004156FC                 dd 4Eh, 4F0000h, 0
.text:00415708                 dd 50h, 510000h, 0
.text:00415714                 dd 52h, 530000h, 0
.text:00415720                 dd 54h, 550000h, 0
.text:0041572C                 dd 56h, 570000h, 0
.text:00415738                 dd 58h, 590000h, 0
.text:00415744                 dd 5Ah, 610000h, 0
.text:00415750                 dd 62h, 630000h, 0
.text:0041575C                 dd 64h, 650000h, 0
.text:00415768                 dd 66h, 670000h, 0
.text:00415774                 dd 68h, 690000h, 0
.text:00415780                 dd 6Ah, 6B0000h, 0
.text:0041578C                 dd 6Ch, 6D0000h, 0
.text:00415798                 dd 6Eh, 6F0000h, 0
.text:004157A4                 dd 70h, 710000h, 0
.text:004157B0                 dd 72h, 730000h, 0
.text:004157BC                 dd 74h, 750000h, 0
.text:004157C8                 dd 76h, 770000h, 0
.text:004157D4                 dd 78h, 790000h, 0
.text:004157E0                 dd 7Ah, 410000h, 0
.text:004157EC                 dd 42h, 430000h, 0
.text:004157F8                 dd 44h, 450000h, 0
.text:00415804                 dd 46h, 470000h, 0
.text:00415810                 dd 48h, 490000h, 0
.text:0041581C                 dd 4Ah, 4B0000h, 0
.text:00415828                 dd 4Ch, 4D0000h, 0
.text:00415834                 dd 4Eh, 4F0000h, 0
.text:00415840                 dd 50h, 510000h, 0
.text:0041584C                 dd 52h, 530000h, 0
.text:00415858                 dd 54h, 550000h, 0
.text:00415864                 dd 56h, 570000h, 0
.text:00415870                 dd 58h, 590000h, 0
.text:0041587C                 dd 5Ah, 610000h, 0
.text:00415888                 dd 62h, 630000h, 0
.text:00415894                 dd 64h, 650000h, 0
.text:004158A0                 dd 66h, 670000h, 0
.text:004158AC                 dd 68h, 690000h, 0
.text:004158B8                 dd 6Ah, 6B0000h, 0
.text:004158C4                 dd 6Ch, 6D0000h, 0
.text:004158D0                 dd 6Eh, 6F0000h, 0
.text:004158DC                 dd 70h, 710000h, 0
.text:004158E8                 dd 72h, 730000h, 0
.text:004158F4                 dd 74h, 750000h, 0
.text:00415900                 dd 76h, 770000h, 0
.text:0041590C                 dd 78h, 790000h, 0
.text:00415918                 dd 7Ah, 410000h, 0
.text:00415924                 dd 42h, 430000h, 0
.text:00415930                 dd 44h, 450000h, 0
.text:0041593C                 dd 46h, 470000h, 0
.text:00415948                 dd 48h, 490000h, 0
.text:00415954                 dd 4Ah, 4B0000h, 0
.text:00415960                 dd 4Ch, 4D0000h, 0
.text:0041596C                 dd 4Eh, 4F0000h, 0
.text:00415978                 dd 50h, 510000h, 0
.text:00415984                 dd 52h, 530000h, 0
.text:00415990                 dd 54h, 550000h, 0
.text:0041599C                 dd 56h, 570000h, 0
.text:004159A8                 dd 58h, 590000h, 0
.text:004159B4                 dd 5Ah, 610000h, 0
.text:004159C0                 dd 62h, 630000h, 0
.text:004159CC                 dd 64h, 650000h, 0
.text:004159D8                 dd 66h, 670000h, 0
.text:004159E4                 dd 68h, 690000h, 0
.text:004159F0                 dd 6Ah, 6B0000h, 0
.text:004159FC                 dd 6Ch, 6D0000h, 0
.text:00415A08                 dd 6Eh, 6F0000h, 0
.text:00415A14                 dd 70h, 710000h, 0
.text:00415A20                 dd 72h, 730000h, 0
.text:00415A2C                 dd 74h, 750000h, 0
.text:00415A38                 dd 76h, 770000h, 0
.text:00415A44                 dd 78h, 790000h, 0
.text:00415A50                 dd 7Ah, 410000h, 0
.text:00415A5C                 dd 42h, 430000h, 0
.text:00415A68                 dd 44h, 450000h, 0
.text:00415A74                 dd 46h, 470000h, 0
.text:00415A80                 dd 48h, 490000h, 0
.text:00415A8C                 dd 4Ah, 4B0000h, 0
.text:00415A98                 dd 4Ch, 4D0000h, 0
.text:00415AA4                 dd 4Eh, 4F0000h, 0
.text:00415AB0                 dd 50h, 510000h, 0
.text:00415ABC                 dd 52h, 530000h, 0
.text:00415AC8                 dd 54h, 550000h, 0
.text:00415AD4                 dd 56h, 570000h, 0
.text:00415AE0                 dd 58h, 590000h, 0
.text:00415AEC                 dd 5Ah, 610000h, 0
.text:00415AF8                 dd 62h, 630000h, 0
.text:00415B04                 dd 64h, 650000h, 0
.text:00415B10                 dd 66h, 670000h, 0
.text:00415B1C                 dd 68h, 690000h, 0
.text:00415B28                 dd 6Ah, 6B0000h, 0
.text:00415B34                 dd 6Ch, 6D0000h, 0
.text:00415B40                 dd 6Eh, 6F0000h, 0
.text:00415B4C                 dd 70h, 710000h, 0
.text:00415B58                 dd 72h, 730000h, 0
.text:00415B64                 dd 74h, 750000h, 0
.text:00415B70                 dd 76h, 770000h, 0
.text:00415B7C                 dd 78h, 790000h, 0
.text:00415B88                 dd 7Ah, 410000h, 0
.text:00415B94                 dd 42h, 430000h, 0
.text:00415BA0                 dd 44h, 450000h, 0
.text:00415BAC                 dd 46h, 470000h, 0
.text:00415BB8                 dd 48h, 490000h, 0
.text:00415BC4                 dd 4Ah, 4B0000h, 0
.text:00415BD0                 dd 4Ch, 4D0000h, 0
.text:00415BDC                 dd 4Eh, 4F0000h, 0
.text:00415BE8                 dd 50h, 510000h, 0
.text:00415BF4                 dd 52h, 530000h, 0
.text:00415C00                 dd 54h, 550000h, 0
.text:00415C0C                 dd 56h, 570000h, 0
.text:00415C18                 dd 58h, 590000h, 0
.text:00415C24                 dd 5Ah, 610000h, 0
.text:00415C30                 dd 62h, 630000h, 0
.text:00415C3C                 dd 64h, 650000h, 0
.text:00415C48                 dd 66h, 670000h, 0
.text:00415C54                 dd 68h, 690000h, 0
.text:00415C60                 dd 6Ah, 6B0000h, 0
.text:00415C6C                 dd 6Ch, 6D0000h, 0
.text:00415C78                 dd 6Eh, 6F0000h, 0
.text:00415C84                 dd 70h, 710000h, 0
.text:00415C90                 dd 72h, 730000h, 0
.text:00415C9C                 dd 74h, 750000h, 0
.text:00415CA8                 dd 76h, 770000h, 0
.text:00415CB4                 dd 78h, 790000h, 0
.text:00415CC0                 dd 7Ah, 300000h, 0
.text:00415CCC                 dd 31h, 320000h, 0
.text:00415CD8                 dd 33h, 340000h, 0
.text:00415CE4                 dd 35h, 360000h, 0
.text:00415CF0                 dd 37h, 380000h, 0
.text:00415CFC                 dd 39h, 300000h, 0
.text:00415D08                 dd 31h, 320000h, 0
.text:00415D14                 dd 33h, 340000h, 0
.text:00415D20                 dd 35h, 360000h, 0
.text:00415D2C                 dd 37h, 380000h, 0
.text:00415D38                 dd 39h, 300000h, 0
.text:00415D44                 dd 31h, 320000h, 0
.text:00415D50                 dd 33h, 340000h, 0
.text:00415D5C                 dd 35h, 360000h, 0
.text:00415D68                 dd 37h, 380000h, 0
.text:00415D74                 dd 39h, 300000h, 0
.text:00415D80                 dd 31h, 320000h, 0
.text:00415D8C                 dd 33h, 340000h, 0
.text:00415D98                 dd 35h, 360000h, 0
.text:00415DA4                 dd 37h, 380000h, 0
.text:00415DB0                 dd 39h, 300000h, 0
.text:00415DBC                 dd 31h, 320000h, 0
.text:00415DC8                 dd 33h, 340000h, 0
.text:00415DD4                 dd 35h, 360000h, 0
.text:00415DE0                 dd 37h, 380000h, 0
.text:00415DEC                 dd 39h, 0B48D0000h, 26h, 27BC8D00h, 41h dup(0)
.text:00415F00                 dd 4 dup(20002h), 20030002h, 2 dup(20022002h), 9 dup(20002h)
.text:00415F00                 dd 0C0046001h, 7 dup(0C004C004h), 5 dup(0D808D808h), 3 dup(0C004C004h)
.text:00415F00                 dd 0D508C004h, 2 dup(0D508D508h), 0C508D508h, 9 dup(0C508C508h)
.text:00415F00                 dd 0C004C508h, 2 dup(0C004C004h), 0D608C004h, 2 dup(0D608D608h)
.text:00415F00                 dd 0C608D608h, 9 dup(0C608C608h), 0C004C608h, 0C004C004h
.text:00415F00                 dd 2C004h, 40h dup(0)
.text:00416100 dword_416100    dd 9 dup(20000h), 20030000h, 4 dup(20020000h), 12h dup(20000h)
.text:00416100                                         ; DATA XREF: .text:00417838↓o
.text:00416100                 dd 60010000h, 0Fh dup(0C0040000h), 0Ah dup(0D8080000h)
.text:00416100                 dd 7 dup(0C0040000h), 6 dup(0D5080000h), 14h dup(0C5080000h)
.text:00416100                 dd 6 dup(0C0040000h), 6 dup(0D6080000h), 14h dup(0C6080000h)
.text:00416100                 dd 4 dup(0C0040000h), 20000h, 80h dup(0)
.text:00416500 dword_416500    dd 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h, 88h, 89h, 8Ah
.text:00416500                 dd 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h, 93h, 94h, 95h
.text:00416500                 dd 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh, 9Eh, 9Fh, 0A0h
.text:00416500                 dd 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h, 0A7h, 0A8h, 0A9h
.text:00416500                 dd 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h
.text:00416500                 dd 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh
.text:00416500                 dd 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h, 0C2h, 0C3h, 0C4h
.text:00416500                 dd 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh
.text:00416500                 dd 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h
.text:00416500                 dd 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
.text:00416500                 dd 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h, 0E8h
.text:00416500                 dd 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h, 0F1h
.text:00416500                 dd 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh
.text:00416500                 dd 0FBh, 0FCh, 0FDh, 0FEh, 0FFFFFFFFh, 0
.text:00416704 dword_416704    dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:00416704                 dd 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:00416704                 dd 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:00416704                 dd 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:00416704                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:00416704                 dd 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 41h, 42h, 43h, 44h, 45h
.text:00416704                 dd 46h, 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h
.text:00416704                 dd 51h, 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5Ah, 5Bh
.text:00416704                 dd 5Ch, 5Dh, 5Eh, 5Fh, 60h, 41h, 42h, 43h, 44h, 45h, 46h
.text:00416704                 dd 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h, 51h
.text:00416704                 dd 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5Ah, 7Bh, 7Ch
.text:00416704                 dd 7Dh, 7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h
.text:00416704                 dd 88h, 89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h
.text:00416704                 dd 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh
.text:00416704                 dd 9Eh, 9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h
.text:00416704                 dd 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
.text:00416704                 dd 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.text:00416704                 dd 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
.text:00416704                 dd 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh
.text:00416704                 dd 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
.text:00416704                 dd 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh
.text:00416704                 dd 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h
.text:00416704                 dd 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh
.text:00416704                 dd 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
.text:00416704                 dd 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh, 80h
.text:00416704                 dd 81h, 82h, 83h, 84h, 85h, 86h, 87h, 88h, 89h, 8Ah, 8Bh
.text:00416704                 dd 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h, 93h, 94h, 95h, 96h
.text:00416704                 dd 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh, 9Eh, 9Fh, 0A0h, 0A1h
.text:00416704                 dd 0A2h, 0A3h, 0A4h, 0A5h, 0A6h, 0A7h, 0A8h, 0A9h, 0AAh
.text:00416704                 dd 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h
.text:00416704                 dd 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh
.text:00416704                 dd 0BDh, 0BEh, 0BFh, 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h
.text:00416704                 dd 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh
.text:00416704                 dd 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
.text:00416704                 dd 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h
.text:00416704                 dd 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h, 0E8h, 0E9h
.text:00416704                 dd 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h, 0F1h, 0F2h
.text:00416704                 dd 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh
.text:00416704                 dd 0FCh, 0FDh, 0FEh, 0FFFFFFFFh, 0
.text:00416D04                 dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:00416D04                 dd 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:00416D04                 dd 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:00416D04                 dd 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:00416D04                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:00416D04                 dd 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 61h, 62h, 63h, 64h, 65h
.text:00416D04                 dd 66h, 67h, 68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h
.text:00416D04                 dd 71h, 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 5Bh
.text:00416D04                 dd 5Ch, 5Dh, 5Eh, 5Fh, 60h, 61h, 62h, 63h, 64h, 65h, 66h
.text:00416D04                 dd 67h, 68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h, 71h
.text:00416D04                 dd 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 7Bh, 7Ch
.text:00416D04                 dd 7Dh, 7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h
.text:00416D04                 dd 88h, 89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h
.text:00416D04                 dd 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh
.text:00416D04                 dd 9Eh, 9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h
.text:00416D04                 dd 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
.text:00416D04                 dd 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.text:00416D04                 dd 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
.text:00416D04                 dd 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh
.text:00416D04                 dd 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
.text:00416D04                 dd 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh
.text:00416D04                 dd 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h
.text:00416D04                 dd 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh
.text:00416D04                 dd 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
.text:00416D04                 dd 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh, 2 dup(0)
.text:00417108                 dd 7FFFFFEh, 5 dup(0)
.text:00417120 dword_417120    dd 7, 1, 6, 2 dup(1), 18h, 0
.text:00417120                                         ; DATA XREF: .text:0041793C↓o
.text:0041713C                 dd 20h, 7FFFFFEh, 0
.text:00417148                 db 18h dup(90h)
.text:00417160                 dd 3 dup(0)
.text:0041716C                 dd 7FFFFFEh, 4 dup(0)
.text:00417180 dword_417180    dd 7, 1, 6, 2 dup(1), 18h, 0
.text:00417180                                         ; DATA XREF: .text:00417940↓o
.text:0041719C                 dd 20h, 0
.text:004171A4                 dd 7FFFFFEh, 6 dup(90909090h), 2 dup(0)
.text:004171C8                 dd 2 dup(7FFFFFEh), 4 dup(0)
.text:004171E0 dword_4171E0    dd 7, 1, 6, 2 dup(1), 18h, 0
.text:004171E0                                         ; DATA XREF: .text:00417944↓o
.text:004171FC                 dd 20h, 2 dup(7FFFFFEh), 6 dup(90909090h), 0
.text:00417224                 dd 3FF0000h, 6 dup(0)
.text:00417240 dword_417240    dd 6, 1, 6, 0           ; DATA XREF: .text:00417948↓o
.text:00417250                 dd 1, 18h, 1Ch, 0
.text:00417260                 dd 3FF0000h, 7 dup(90909090h), 0
.text:00417284                 dd 3FF0000h, 2 dup(7Eh), 4 dup(0)
.text:004172A0 dword_4172A0    dd 7, 1, 7, 0           ; DATA XREF: .text:0041794C↓o
.text:004172B0                 dd 3, 18h, 1Ch, 0
.text:004172C0                 dd 3FF0000h, 2 dup(7Eh), 5 dup(90909090h), 3E00h, 1, 6 dup(0)
.text:00417300 dword_417300    dd 6, 1, 6, 0           ; DATA XREF: .text:00417950↓o
.text:00417310                 dd 1, 18h, 1Ch, 3E00h, 1, 7 dup(90909090h), 0
.text:00417344                 dd 2 dup(0FFFFFFFFh), 7FFFFFFFh, 4 dup(0)
.text:00417360 dword_417360    dd 7, 1, 7, 0           ; DATA XREF: .text:00417954↓o
.text:00417370                 dd 3, 18h, 1Ch, 0
.text:00417380                 dd 2 dup(0FFFFFFFFh), 7FFFFFFFh, 5 dup(90909090h), 0
.text:004173A4                 dd 0FFFFFFFEh, 0FFFFFFFFh, 7FFFFFFFh, 4 dup(0)
.text:004173C0 dword_4173C0    dd 7, 1, 7, 0           ; DATA XREF: .text:00417958↓o
.text:004173D0                 dd 3, 18h, 1Ch, 0
.text:004173E0                 dd 0FFFFFFFEh, 0FFFFFFFFh, 7FFFFFFFh, 5 dup(90909090h)
.text:004173E0                 dd 200h, 1, 6 dup(0)
.text:00417420 dword_417420    dd 6, 1, 6, 0           ; DATA XREF: .text:0041795C↓o
.text:00417430                 dd 1, 18h, 1Ch, 200h, 1, 7 dup(90909090h), 0FFFFFFFFh
.text:00417430                 dd 2 dup(0)
.text:0041746C                 dd 80000000h, 4 dup(0)
.text:00417480 dword_417480    dd 7, 1, 7, 0           ; DATA XREF: .text:00417960↓o
.text:00417490                 dd 3, 18h, 1Ch, 0FFFFFFFFh, 2 dup(0)
.text:004174A8                 dd 80000000h, 5 dup(90909090h), 0
.text:004174C4                 dd 0FC00FFFEh, 0F8000001h, 78000001h, 4 dup(0)
.text:004174E0 dword_4174E0    dd 7, 1, 7, 0           ; DATA XREF: .text:00417964↓o
.text:004174F0                 dd 3, 18h, 1Ch, 0
.text:00417500                 dd 0FC00FFFEh, 0F8000001h, 78000001h, 5 dup(90909090h)
.text:00417500                 dd 0
.text:00417524                 dd 3FF0000h, 2 dup(7FFFFFEh), 4 dup(0)
.text:00417540 dword_417540    dd 7, 1, 7, 0           ; DATA XREF: .text:00417968↓o
.text:00417550                 dd 3, 18h, 1Ch, 0
.text:00417560 dword_417560    dd 3FF0000h, 2 dup(7FFFFFEh), 5 dup(90909090h), 7, 1, 5
.text:00417560                 dd 3, 1Fh, 18h, 3 dup(0)
.text:004175A4                 dd 28h, 0
.text:004175AC                 dd 1Ah dup(0FFFFFFE0h), 5 dup(0)
.text:00417628                 align 20h
.text:00417640 dword_417640    dd 7, 1, 5, 3, 1Fh, 18h, 2 dup(0)
.text:00417640                                         ; DATA XREF: .text:00417970↓o
.text:00417660                 dd 28h, 2 dup(0)
.text:0041766C                 dd 1Ah dup(20h), 5 dup(0)
.text:004176E8                 align 20h
.text:00417700 dword_417700    dd 7, 1, 4, 7, 0Fh, 18h, 38h, 0
.text:00417700                                         ; DATA XREF: .text:00417854↓o
.text:00417720 dword_417720    dd 5 dup(48h), 49h, 0FFFFFF00h, 3 dup(0FFFFFFFFh), 4 dup(1010101h)
.text:00417720                 dd 0FFh, 26748Dh, 65707075h, 6F6C0072h, 726577h, 68706C61h
.text:00417720                 dd 69640061h, 746967h, 67696478h, 73007469h, 65636170h
.text:00417720                 dd 69727000h, 6700746Eh, 68706172h, 616C6200h, 63006B6Eh
.text:00417720                 dd 6C72746Eh, 6E757000h, 61007463h, 6D756E6Ch, 6F740000h
.text:00417720                 dd 65707075h, 6F740072h, 65776F6Ch, 30000072h, 32003100h
.text:00417720                 dd 34003300h, 36003500h, 38003700h, 90003900h, 30h, 31h
.text:00417720                 dd 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Fh, 26748Dh
.text:00417720                 dd 418520h, 5 dup(0)
.text:00417818                 dd 0FFFFFFFFh, 1, 54h, 415E00h, 416500h, 0
.text:00417830                 dd offset dword_416704+3FCh
.text:00417834                 dd 0
.text:00417838                 dd offset dword_416100
.text:0041783C                 dd 4 dup(0)
.text:0041784C                 dd offset dword_417720+40h
.text:00417850                 dd offset dword_417720+8Ah
.text:00417854                 dd offset dword_417700
.text:00417858                 dd 1
.text:0041785C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00417860                 dd offset dword_416500+200h
.text:00417864                 dd offset dword_416704+5FCh
.text:00417868                 dd 46h, 52h, 1, 4177BBh, 4177BDh, 4177BFh, 4177C1h, 4177C3h
.text:00417868                 dd 4177C5h, 4177C7h, 4177C9h, 4177CBh, 4177CDh, 1, 4177D0h
.text:00417868                 dd 4177D4h, 4177D8h, 4177DCh, 4177E0h, 4177E4h, 4177E8h
.text:00417868                 dd 4177ECh, 4177F0h, 4177F4h, 4177BBh, 4177BDh, 4177BFh
.text:00417868                 dd 4177C1h, 4177C3h, 4177C5h, 4177C7h, 4177C9h, 4177CBh
.text:00417868                 dd 4177CDh, 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h
.text:00417868                 dd 39h, 548h, 40F920h, 410E40h, 412360h, 413880h, 1, 4177F8h
.text:00417868                 dd 2 dup(0)
.text:0041793C                 dd offset dword_417120
.text:00417940                 dd offset dword_417180
.text:00417944                 dd offset dword_4171E0
.text:00417948                 dd offset dword_417240
.text:0041794C                 dd offset dword_4172A0
.text:00417950                 dd offset dword_417300
.text:00417954                 dd offset dword_417360
.text:00417958                 dd offset dword_4173C0
.text:0041795C                 dd offset dword_417420
.text:00417960                 dd offset dword_417480
.text:00417964                 dd offset dword_4174E0
.text:00417968                 dd offset dword_417540
.text:0041796C                 dd offset dword_417560+20h
.text:00417970                 dd offset dword_417640
.text:00417974                 align 10h
.text:00417980                 dd 2D00007Fh, 90909000h, 6 dup(90909090h), 418520h, 5 dup(0)
.text:004179B8                 dd 0FFFFFFFFh, 0
.text:004179C0                 dd 2Eh, 7 dup(417982h), 8 dup(417980h), 417983h, 6 dup(417980h)
.text:004179C0                 dd 2 dup(417982h), 0Eh dup(417980h), 2775h, 5F5BEBFh, 2775h
.text:004179C0                 dd 5F5BEBFh, 1, 2 dup(0)
.text:00417A78                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00417A7C                 align 10h
.text:00417A80                 dd 9000002Eh, 7 dup(90909090h), 418520h, 5 dup(0)
.text:00417AB8                 dd 0FFFFFFFFh, 0
.text:00417AC0                 dd 6, 417A80h, 2 dup(417A82h), 2Eh, 0
.text:00417AD8                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00417ADC                 align 10h
.text:00417AE0                 db  53h ; S
.text:00417AE1                 db 75h, 6Eh, 0
.text:00417AE4                 db  4Dh ; M
.text:00417AE5                 db 6Fh, 6Eh, 0
.text:00417AE8                 db  54h ; T
.text:00417AE9                 db 75h, 65h, 0
.text:00417AEC                 db  57h ; W
.text:00417AED                 db 65h, 64h, 0
.text:00417AF0                 db  54h ; T
.text:00417AF1                 db 68h, 75h, 0
.text:00417AF4                 db  46h ; F
.text:00417AF5                 db 72h, 69h, 0
.text:00417AF8                 db  53h ; S
.text:00417AF9                 db 61h, 74h, 0
.text:00417AFC aSunday_0       db 'Sunday',0           ; DATA XREF: .text:00417EE0↓o
.text:00417B03 aMonday_0       db 'Monday',0           ; DATA XREF: .text:00417EE4↓o
.text:00417B0A aTuesday_0      db 'Tuesday',0          ; DATA XREF: .text:00417EE8↓o
.text:00417B12 aWednesday_0    db 'Wednesday',0        ; DATA XREF: .text:00417EEC↓o
.text:00417B1C aThursday_0     db 'Thursday',0         ; DATA XREF: .text:00417EF0↓o
.text:00417B25 aFriday_0       db 'Friday',0           ; DATA XREF: .text:00417EF4↓o
.text:00417B2C aSaturday_0     db 'Saturday',0         ; DATA XREF: .text:00417EF8↓o
.text:00417B35 aJan            db 'Jan',0              ; DATA XREF: .text:00417EFC↓o
.text:00417B39 aFeb            db 'Feb',0              ; DATA XREF: .text:00417F00↓o
.text:00417B3D aMar            db 'Mar',0              ; DATA XREF: .text:00417F04↓o
.text:00417B41 aApr            db 'Apr',0              ; DATA XREF: .text:00417F08↓o
.text:00417B45 aMay_0          db 'May',0              ; DATA XREF: .text:00417F0C↓o
.text:00417B45                                         ; .text:00417F3C↓o
.text:00417B49 aJun            db 'Jun',0              ; DATA XREF: .text:00417F10↓o
.text:00417B4D aJul            db 'Jul',0              ; DATA XREF: .text:00417F14↓o
.text:00417B51 aAug            db 'Aug',0              ; DATA XREF: .text:00417F18↓o
.text:00417B55 aSep            db 'Sep',0              ; DATA XREF: .text:00417F1C↓o
.text:00417B59 aOct            db 'Oct',0              ; DATA XREF: .text:00417F20↓o
.text:00417B5D aNov            db 'Nov',0              ; DATA XREF: .text:00417F24↓o
.text:00417B61 aDec            db 'Dec',0              ; DATA XREF: .text:00417F28↓o
.text:00417B65 aJanuary_0      db 'January',0          ; DATA XREF: .text:00417F2C↓o
.text:00417B6D aFebruary_0     db 'February',0         ; DATA XREF: .text:00417F30↓o
.text:00417B76 aMarch_0        db 'March',0            ; DATA XREF: .text:00417F34↓o
.text:00417B7C aApril_0        db 'April',0            ; DATA XREF: .text:00417F38↓o
.text:00417B82 aJune_0         db 'June',0             ; DATA XREF: .text:00417F40↓o
.text:00417B87 aJuly_0         db 'July',0             ; DATA XREF: .text:00417F44↓o
.text:00417B8C aAugust_0       db 'August',0           ; DATA XREF: .text:00417F48↓o
.text:00417B93 aSeptember_0    db 'September',0        ; DATA XREF: .text:00417F4C↓o
.text:00417B9D aOctober_0      db 'October',0          ; DATA XREF: .text:00417F50↓o
.text:00417BA5 aNovember_0     db 'November',0         ; DATA XREF: .text:00417F54↓o
.text:00417BAE aDecember_0     db 'December',0         ; DATA XREF: .text:00417F58↓o
.text:00417BB7 aAm             db 'AM',0               ; DATA XREF: .text:00417F5C↓o
.text:00417BBA aPm             db 'PM',0               ; DATA XREF: .text:00417F60↓o
.text:00417BBD aABEHMSY        db '%a %b %e %H:%M:%S %Y',0
.text:00417BBD                                         ; DATA XREF: .text:00417F64↓o
.text:00417BD2 aMDY            db '%m/%d/%y',0         ; DATA XREF: .text:00417F68↓o
.text:00417BDB aHMS            db '%H:%M:%S',0         ; DATA XREF: .text:00417F6C↓o
.text:00417BE4 aIMSP           db '%I:%M:%S %p',0      ; DATA XREF: .text:00417F70↓o
.text:00417BF0 dword_417BF0    dd 539000h, 6E0075h, 4D0000h, 6E006Fh, 540000h, 650075h
.text:00417BF0                                         ; DATA XREF: .text:00417F78↓o
.text:00417BF0                                         ; .text:00417F7C↓o ...
.text:00417BF0                 dd 570000h, 640065h, 540000h, 750068h, 460000h, 690072h
.text:00417BF0                 dd 530000h, 740061h, 530000h, 6E0075h, 610064h, 79h, 6F004Dh
.text:00417BF0                 dd 64006Eh, 790061h, 540000h, 650075h, 640073h, 790061h
.text:00417BF0                 dd 570000h, 640065h, 65006Eh, 640073h, 790061h, 540000h
.text:00417BF0                 dd 750068h, 730072h, 610064h, 79h, 720046h, 640069h, 790061h
.text:00417BF0                 dd 530000h, 740061h, 720075h, 610064h, 79h, 61004Ah, 6Eh
.text:00417BF0                 dd 650046h, 62h, 61004Dh, 72h, 700041h, 72h, 61004Dh, 79h
.text:00417BF0                 dd 75004Ah, 6Eh, 75004Ah, 6Ch, 750041h, 67h, 650053h, 70h
.text:00417BF0                 dd 63004Fh, 74h, 6F004Eh, 76h, 650044h, 63h, 61004Ah, 75006Eh
.text:00417BF0                 dd 720061h, 79h, 650046h, 720062h, 610075h, 790072h, 4D0000h
.text:00417BF0                 dd 720061h, 680063h, 410000h, 720070h, 6C0069h, 4A0000h
.text:00417BF0                 dd 6E0075h, 65h, 75004Ah, 79006Ch, 410000h, 670075h, 730075h
.text:00417BF0                 dd 74h, 650053h, 740070h, 6D0065h, 650062h, 72h, 63004Fh
.text:00417BF0                 dd 6F0074h, 650062h, 72h, 6F004Eh, 650076h, 62006Dh, 720065h
.text:00417BF0                 dd 440000h, 630065h, 6D0065h, 650062h, 72h, 4D0041h, 500000h
.text:00417BF0                 dd 4Dh, 5 dup(90909090h), 610025h, 250020h, 200062h, 650025h
.text:00417BF0                 dd 250020h, 3A0048h, 4D0025h, 25003Ah, 200053h, 590025h
.text:00417BF0                 dd 250000h, 2F006Dh, 640025h, 25002Fh, 79h, 480025h, 25003Ah
.text:00417BF0                 dd 3A004Dh, 530025h, 250000h, 3A0049h, 4D0025h, 25003Ah
.text:00417BF0                 dd 200053h, 700025h, 0
.text:00417E28 unk_417E28      db    7                 ; DATA XREF: .text:00418058↓o
.text:00417E29                 align 2
.text:00417E2A                 dw 4
.text:00417E2C                 db    1
.text:00417E2D                 align 2
.text:00417E2E aABEHMSZY_0     db '%a %b %e %H:%M:%S %Z %Y',0
.text:00417E2E                                         ; DATA XREF: .text:00418074↓o
.text:00417E46                 align 20h
.text:00417E60 aABEHMSZY_1:                            ; DATA XREF: .text:00418078↓o
.text:00417E60                 text "UTF-16LE", '%a %b %e %H:%M:%S %Z %Y',0
.text:00417E90                 align 20h
.text:00417EA0                 dd offset dword_418520
.text:00417EA4                 dd 5 dup(0)
.text:00417EB8                 dd 0FFFFFFFFh, 0
.text:00417EC0                 dd 6Fh, 417AE0h, 417AE4h, 417AE8h, 417AECh, 417AF0h, 417AF4h
.text:00417EC0                 dd 417AF8h
.text:00417EE0                 dd offset aSunday_0     ; "Sunday"
.text:00417EE4                 dd offset aMonday_0     ; "Monday"
.text:00417EE8                 dd offset aTuesday_0    ; "Tuesday"
.text:00417EEC                 dd offset aWednesday_0  ; "Wednesday"
.text:00417EF0                 dd offset aThursday_0   ; "Thursday"
.text:00417EF4                 dd offset aFriday_0     ; "Friday"
.text:00417EF8                 dd offset aSaturday_0   ; "Saturday"
.text:00417EFC                 dd offset aJan          ; "Jan"
.text:00417F00                 dd offset aFeb          ; "Feb"
.text:00417F04                 dd offset aMar          ; "Mar"
.text:00417F08                 dd offset aApr          ; "Apr"
.text:00417F0C                 dd offset aMay_0        ; "May"
.text:00417F10                 dd offset aJun          ; "Jun"
.text:00417F14                 dd offset aJul          ; "Jul"
.text:00417F18                 dd offset aAug          ; "Aug"
.text:00417F1C                 dd offset aSep          ; "Sep"
.text:00417F20                 dd offset aOct          ; "Oct"
.text:00417F24                 dd offset aNov          ; "Nov"
.text:00417F28                 dd offset aDec          ; "Dec"
.text:00417F2C                 dd offset aJanuary_0    ; "January"
.text:00417F30                 dd offset aFebruary_0   ; "February"
.text:00417F34                 dd offset aMarch_0      ; "March"
.text:00417F38                 dd offset aApril_0      ; "April"
.text:00417F3C                 dd offset aMay_0        ; "May"
.text:00417F40                 dd offset aJune_0       ; "June"
.text:00417F44                 dd offset aJuly_0       ; "July"
.text:00417F48                 dd offset aAugust_0     ; "August"
.text:00417F4C                 dd offset aSeptember_0  ; "September"
.text:00417F50                 dd offset aOctober_0    ; "October"
.text:00417F54                 dd offset aNovember_0   ; "November"
.text:00417F58                 dd offset aDecember_0   ; "December"
.text:00417F5C                 dd offset aAm           ; "AM"
.text:00417F60                 dd offset aPm           ; "PM"
.text:00417F64                 dd offset aABEHMSY      ; "%a %b %e %H:%M:%S %Y"
.text:00417F68                 dd offset aMDY          ; "%m/%d/%y"
.text:00417F6C                 dd offset aHMS          ; "%H:%M:%S"
.text:00417F70                 dd offset aIMSP         ; "%I:%M:%S %p"
.text:00417F74                 align 8
.text:00417F78                 dd offset dword_417BF0
.text:00417F7C                 dd offset dword_417BF0
.text:00417F80                 dd offset dword_417BF0
.text:00417F84                 dd offset dword_417BF0
.text:00417F88                 dd offset dword_417BF0
.text:00417F8C                 align 10h
.text:00417F90                 dd offset dword_417BF0
.text:00417F94                 dd offset dword_417BF0+2
.text:00417F98                 dd offset dword_417BF0+0Ah
.text:00417F9C                 dd offset dword_417BF0+12h
.text:00417FA0                 dd offset dword_417BF0+1Ah
.text:00417FA4                 dd offset dword_417BF0+22h
.text:00417FA8                 dd offset dword_417BF0+2Ah
.text:00417FAC                 dd offset dword_417BF0+32h
.text:00417FB0                 dd offset dword_417BF0+3Ah
.text:00417FB4                 dd offset dword_417BF0+48h
.text:00417FB8                 dd offset dword_417BF0+56h
.text:00417FBC                 dd offset dword_417BF0+66h
.text:00417FC0                 dd offset dword_417BF0+7Ah
.text:00417FC4                 dd offset dword_417BF0+8Ch
.text:00417FC8                 dd offset dword_417BF0+9Ah
.text:00417FCC                 dd offset dword_417BF0+0ACh
.text:00417FD0                 dd offset dword_417BF0+0B4h
.text:00417FD4                 dd offset dword_417BF0+0BCh
.text:00417FD8                 dd offset dword_417BF0+0C4h
.text:00417FDC                 dd offset dword_417BF0+0CCh
.text:00417FE0                 dd offset dword_417BF0+0D4h
.text:00417FE4                 dd offset dword_417BF0+0DCh
.text:00417FE8                 dd offset dword_417BF0+0E4h
.text:00417FEC                 dd offset dword_417BF0+0ECh
.text:00417FF0                 dd offset dword_417BF0+0F4h
.text:00417FF4                 dd offset dword_417BF0+0FCh
.text:00417FF8                 dd offset dword_417BF0+104h
.text:00417FFC                 dd offset dword_417BF0+10Ch
.text:00418000                 dd offset dword_417BF0+11Ch
.text:00418004                 dd offset dword_417BF0+12Eh
.text:00418008                 dd offset dword_417BF0+13Ah
.text:0041800C                 dd offset dword_417BF0+0CCh
.text:00418010                 dd offset dword_417BF0+146h
.text:00418014                 dd offset dword_417BF0+150h
.text:00418018                 dd offset dword_417BF0+15Ah
.text:0041801C                 dd offset dword_417BF0+168h
.text:00418020                 dd offset dword_417BF0+17Ch
.text:00418024                 dd offset dword_417BF0+18Ch
.text:00418028                 dd offset dword_417BF0+19Eh
.text:0041802C                 dd offset dword_417BF0+1B0h
.text:00418030                 dd offset dword_417BF0+1B6h
.text:00418034                 dd offset dword_417BF0+1D0h
.text:00418038                 dd offset dword_417BF0+1FAh
.text:0041803C                 dd offset dword_417BF0+20Ch
.text:00418040                 dd offset dword_417BF0+21Eh
.text:00418044                 dd offset dword_417BF0+236h
.text:00418048                 dd offset dword_417BF0+236h
.text:0041804C                 dd offset dword_417BF0+236h
.text:00418050                 dd offset dword_417BF0+236h
.text:00418054                 dd offset dword_417BF0+236h
.text:00418058                 dd offset unk_417E28
.text:0041805C                 dd 130BC3Ah, 417E2Ah, 417E28h, 2 dup(417E2Ch), 417BF0h
.text:00418074                 dd offset aABEHMSZY_0   ; "%a %b %e %H:%M:%S %Z %Y"
.text:00418078                 dd offset aABEHMSZY_1   ; "%a %b %e %H:%M:%S %Z %Y"
.text:0041807C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418080 aYy             db '^[yY]',0            ; DATA XREF: .text:004180C4↓o
.text:00418086 aNn             db '^[nN]',0            ; DATA XREF: .text:004180C8↓o
.text:0041808C unk_41808C      db    0                 ; DATA XREF: .text:004180CC↓o
.text:0041808C                                         ; .text:004180D0↓o
.text:0041808D                 db  90h
.text:0041808E                 db  90h
.text:0041808F                 db  90h
.text:00418090                 db  90h
.text:00418091                 db  90h
.text:00418092                 db  90h
.text:00418093                 db  90h
.text:00418094                 db  90h
.text:00418095                 db  90h
.text:00418096                 db  90h
.text:00418097                 db  90h
.text:00418098                 db  90h
.text:00418099                 db  90h
.text:0041809A                 db  90h
.text:0041809B                 db  90h
.text:0041809C                 db  90h
.text:0041809D                 db  90h
.text:0041809E                 db  90h
.text:0041809F                 db  90h
.text:004180A0                 dd offset dword_418520
.text:004180A4                 dd 5 dup(0)
.text:004180B8                 dd 0FFFFFFFFh, 0
.text:004180C0                 dd 5
.text:004180C4                 dd offset aYy           ; "^[yY]"
.text:004180C8                 dd offset aNn           ; "^[nN]"
.text:004180CC                 dd offset unk_41808C
.text:004180D0                 dd offset unk_41808C
.text:004180D4                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004180D8                 align 10h
.text:004180E0                 dd offset dword_418520
.text:004180E4                 dd 5 dup(0)
.text:004180F8                 dd 0FFFFFFFFh, 0
.text:00418100                 dd 3, 129h, 0D2h
.text:0041810C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418110                 align 20h
.text:00418120 aPTGTMTF        db '%p%t%g%t%m%t%f',0   ; DATA XREF: .text:00418164↓o
.text:0041812F unk_41812F      db    0                 ; DATA XREF: .text:00418168↓o
.text:0041812F                                         ; .text:0041816C↓o ...
.text:00418130                 db  90h
.text:00418131                 db  90h
.text:00418132                 db  90h
.text:00418133                 db  90h
.text:00418134                 db  90h
.text:00418135                 db  90h
.text:00418136                 db  90h
.text:00418137                 db  90h
.text:00418138                 db  90h
.text:00418139                 db  90h
.text:0041813A                 db  90h
.text:0041813B                 db  90h
.text:0041813C                 db  90h
.text:0041813D                 db  90h
.text:0041813E                 db  90h
.text:0041813F                 db  90h
.text:00418140                 dd offset dword_418520
.text:00418144                 dd 5 dup(0)
.text:00418158                 dd 0FFFFFFFFh, 0
.text:00418160                 dd 7
.text:00418164                 dd offset aPTGTMTF      ; "%p%t%g%t%m%t%f"
.text:00418168                 dd offset unk_41812F
.text:0041816C                 dd offset unk_41812F
.text:00418170                 dd offset unk_41812F
.text:00418174                 dd offset unk_41812F
.text:00418178                 dd offset unk_41812F
.text:0041817C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418180 aANFNDNBNSHERNC db '%a%N%f%N%d%N%b%N%s %h %e %r%N%C-%z %T%N%c%N',0
.text:00418180                                         ; DATA XREF: .text:004181E4↓o
.text:004181AC unk_4181AC      db    0                 ; DATA XREF: .text:004181E8↓o
.text:004181AC                                         ; .text:004181EC↓o ...
.text:004181AD                 db  90h
.text:004181AE                 db  90h
.text:004181AF                 db  90h
.text:004181B0                 db  90h
.text:004181B1                 db  90h
.text:004181B2                 db  90h
.text:004181B3                 db  90h
.text:004181B4                 db  90h
.text:004181B5                 db  90h
.text:004181B6                 db  90h
.text:004181B7                 db  90h
.text:004181B8                 db  90h
.text:004181B9                 db  90h
.text:004181BA                 db  90h
.text:004181BB                 db  90h
.text:004181BC                 db  90h
.text:004181BD                 db  90h
.text:004181BE                 db  90h
.text:004181BF                 db  90h
.text:004181C0                 dd offset dword_418520
.text:004181C4                 dd 5 dup(0)
.text:004181D8                 dd 0FFFFFFFFh, 0
.text:004181E0                 dd 0Dh
.text:004181E4                 dd offset aANFNDNBNSHERNC ; "%a%N%f%N%d%N%b%N%s %h %e %r%N%C-%z %T%N"...
.text:004181E8                 dd offset unk_4181AC
.text:004181EC                 dd offset unk_4181AC
.text:004181F0                 dd offset unk_4181AC
.text:004181F4                 dd offset unk_4181AC
.text:004181F8                 dd offset unk_4181AC
.text:004181FC                 dd offset unk_4181AC
.text:00418200                 dd offset unk_4181AC
.text:00418204                 dd offset unk_4181AC
.text:00418208                 dd offset unk_4181AC
.text:0041820C                 dd offset unk_4181AC
.text:00418210                 dd offset unk_4181AC
.text:00418214                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418218                 align 10h
.text:00418220 aCAL            db '+%c %a %l',0        ; DATA XREF: .text:00418264↓o
.text:0041822A unk_41822A      db    0                 ; DATA XREF: .text:00418268↓o
.text:0041822A                                         ; .text:0041826C↓o ...
.text:0041822B                 db  90h
.text:0041822C                 db  90h
.text:0041822D                 db  90h
.text:0041822E                 db  90h
.text:0041822F                 db  90h
.text:00418230                 db  90h
.text:00418231                 db  90h
.text:00418232                 db  90h
.text:00418233                 db  90h
.text:00418234                 db  90h
.text:00418235                 db  90h
.text:00418236                 db  90h
.text:00418237                 db  90h
.text:00418238                 db  90h
.text:00418239                 db  90h
.text:0041823A                 db  90h
.text:0041823B                 db  90h
.text:0041823C                 db  90h
.text:0041823D                 db  90h
.text:0041823E                 db  90h
.text:0041823F                 db  90h
.text:00418240                 dd offset dword_418520
.text:00418244                 dd 5 dup(0)
.text:00418258                 dd 0FFFFFFFFh, 0
.text:00418260                 dd 5
.text:00418264                 dd offset aCAL          ; "+%c %a %l"
.text:00418268                 dd offset unk_41822A
.text:0041826C                 dd offset unk_41822A
.text:00418270                 dd offset unk_41822A
.text:00418274                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418278                 align 10h
.text:00418280                 dd 90900001h, 7 dup(90909090h), 418520h, 5 dup(0)
.text:004182B8                 dd 0FFFFFFFFh, 0
.text:004182C0                 dd 2, 418280h
.text:004182C8                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004182CC                 align 20h
.text:004182E0 aIsoIec14652I18 db 'ISO/IEC 14652 i18n FDCC-set',0
.text:004182E0                                         ; DATA XREF: .text:004184C4↓o
.text:004182FC                 align 10h
.text:00418300 aIsoIecJtc1Sc22 db 'ISO/IEC JTC1/SC22/WG20 - internationalization',0
.text:00418300                                         ; DATA XREF: .text:004184C8↓o
.text:0041832E                 align 20h
.text:00418340 aCOKeldSimonsen db 'C/o Keld Simonsen, Skt. Jorgens Alle 8, DK-1615 Kobenhavn V',0
.text:00418340                                         ; DATA XREF: .text:004184CC↓o
.text:0041837C aKeldSimonsen   db 'Keld Simonsen',0    ; DATA XREF: .text:004184D0↓o
.text:0041838A aKeldDkuugDk    db 'keld@dkuug.dk',0    ; DATA XREF: .text:004184D4↓o
.text:00418398 a4531226543     db '+45 3122-6543',0    ; DATA XREF: .text:004184D8↓o
.text:004183A6 a4533256543     db '+45 3325-6543',0    ; DATA XREF: .text:004184DC↓o
.text:004183B4 byte_4183B4     db 0                    ; DATA XREF: .text:004184E0↓o
.text:004183B4                                         ; .text:004184E8↓o ...
.text:004183B5 byte_4183B5     db 49h, 53h, 4Fh        ; DATA XREF: .text:004184E4↓o
.text:004183B8                 db 0
.text:004183B9 byte_4183B9     db 31h, 2Eh, 30h        ; DATA XREF: .text:004184F4↓o
.text:004183BC                 db 0
.text:004183BD a19971220       db '1997-12-20',0       ; DATA XREF: .text:004184F8↓o
.text:004183C8                 align 20h
.text:004183E0 aI18n1999       db 'i18n:1999',0        ; DATA XREF: .text:004184FC↓o
.text:004183EA aI18n1999_0     db 'i18n:1999',0
.text:004183F4 aI18n1999_1     db 'i18n:1999',0
.text:004183FE aI18n1999_2     db 'i18n:1999',0
.text:00418408 aI18n1999_3     db 'i18n:1999',0
.text:00418412 aI18n1999_4     db 'i18n:1999',0
.text:0041841C                 dd 38316900h, 39313A6Eh, 69003939h, 3A6E3831h, 39393931h
.text:0041841C                 dd 38316900h, 39313A6Eh, 69003939h, 3A6E3831h, 39393931h
.text:0041841C                 dd 38316900h, 39313A6Eh, 69003939h, 3A6E3831h, 39393931h
.text:0041841C                 dd 38316900h, 39313A6Eh, 69003939h, 3A6E3831h, 39393931h
.text:0041841C                 dd 38316900h, 39313A6Eh, 69003939h, 3A6E3831h, 39393931h
.text:0041841C                 dd 90909000h, 7 dup(90909090h), 418520h, 5 dup(0)
.text:004184B8                 dd 0FFFFFFFFh, 0
.text:004184C0                 dd 10h
.text:004184C4                 dd offset aIsoIec14652I18 ; "ISO/IEC 14652 i18n FDCC-set"
.text:004184C8                 dd offset aIsoIecJtc1Sc22 ; "ISO/IEC JTC1/SC22/WG20 - internationali"...
.text:004184CC                 dd offset aCOKeldSimonsen ; "C/o Keld Simonsen, Skt. Jorgens Alle 8,"...
.text:004184D0                 dd offset aKeldSimonsen ; "Keld Simonsen"
.text:004184D4                 dd offset aKeldDkuugDk  ; "keld@dkuug.dk"
.text:004184D8                 dd offset a4531226543   ; "+45 3122-6543"
.text:004184DC                 dd offset a4533256543   ; "+45 3325-6543"
.text:004184E0                 dd offset byte_4183B4
.text:004184E4                 dd offset byte_4183B5
.text:004184E8                 dd offset byte_4183B4
.text:004184EC                 dd offset byte_4183B4
.text:004184F0                 dd offset byte_4183B4
.text:004184F4                 dd offset byte_4183B9
.text:004184F8                 dd offset a19971220     ; "1997-12-20"
.text:004184FC                 dd offset aI18n1999     ; "i18n:1999"
.text:00418500                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00418504                 align 20h
.text:00418520 dword_418520    dd 4F500043h, 584953h   ; DATA XREF: .text:00417EA0↑o
.text:00418520                                         ; .text:004180A0↑o ...
.text:00418528 aAnsiX341968    db 'ANSI_X3.4-1968',0   ; DATA XREF: .text:0040F90C↑o
.text:00418528                                         ; .text:0041785C↑o ...
.text:00418537                 align 10h
.text:00418540 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0041875F↓o
.text:0041854C aLu             db '%lu',0              ; DATA XREF: .text:0041876F↓o
.text:00418550 asc_418550      db ' ',0                ; DATA XREF: .text:loc_418858↓o
.text:00418552                 align 10h
.text:00418560 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00418560                                         ; DATA XREF: .text:0041888F↓o
.text:00418580 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_41889D↓o
.text:0041858C aServer         db ' Server',0          ; DATA XREF: .text:004188C6↓o
.text:0041858C                                         ; .text:loc_418A3E↓o
.text:00418594 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_4188D8↓o
.text:004185A5 aDatacenterServ db ' Datacenter Server',0
.text:004185A5                                         ; DATA XREF: .text:loc_4188E2↓o
.text:004185B8 aStandardEditio db ' Standard Edition',0
.text:004185B8                                         ; DATA XREF: .text:0041890A↓o
.text:004185CA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_418914↓o
.text:004185D7 aEnterpriseEdit db ' Enterprise Edition',0
.text:004185D7                                         ; DATA XREF: .text:loc_41891E↓o
.text:004185EB aDatacenterEdit db ' Datacenter Edition',0
.text:004185EB                                         ; DATA XREF: .text:loc_418928↓o
.text:004185FF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0041893B↓o
.text:0041860D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_418945↓o
.text:0041860D                                         ; .text:loc_418A50↓o
.text:0041861B                 align 10h
.text:00418620 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00418620                                         ; DATA XREF: .text:00418972↓o
.text:00418650 aProducttype    db 'ProductType',0      ; DATA XREF: .text:004189B9↓o
.text:0041865C aWinnt          db 'WINNT',0            ; DATA XREF: .text:004189F4↓o
.text:00418662 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:00418A0B↓o
.text:0041866B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00418A22↓o
.text:00418674                 align 10h
.text:00418680 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00418680                                         ; DATA XREF: .text:00418B97↓o
.text:004186A3                 align 20h
.text:004186C0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:004186C0                                         ; DATA XREF: .text:00418BF6↓o
.text:004186E6 ; ---------------------------------------------------------------------------
.text:004186E6
.text:004186E6 loc_4186E6:                             ; DATA XREF: .text:loc_418C61↓o
.text:004186E6                 and     [ebx+45h], dl
.text:004186E9                 add     [eax], ah
.text:004186EB                 push    ebx
.text:004186EC                 push    eax
.text:004186ED                 xor     [eax], eax
.text:004186EF
.text:004186EF loc_4186EF:                             ; DATA XREF: .text:loc_418CDB↓o
.text:004186EF                 and     [edi+53h], cl
.text:004186F2                 push    edx
.text:004186F3                 xor     al, [eax]
.text:004186F5                 lea     esi, [esi+0]
.text:004186F9                 lea     edi, [edi+0]
.text:00418700                 push    edi
.text:00418701                 push    esi
.text:00418702                 push    ebx
.text:00418703                 sub     esp, 130h
.text:00418709                 mov     ebx, [esp+140h]
.text:00418710                 call    sub_418E10
.text:00418715                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041871A                 cmp     eax, 1
.text:0041871D                 jz      loc_418BC0
.text:00418723                 cmp     eax, 1
.text:00418726                 jb      loc_418B96
.text:0041872C                 cmp     eax, 2
.text:0041872F                 jz      loc_4187E0
.text:00418735                 cmp     eax, 3
.text:00418738                 jz      short loc_41879F
.text:0041873A                 lea     esi, [esi+0]
.text:00418740
.text:00418740 loc_418740:                             ; CODE XREF: .text:004187D5↓j
.text:00418740                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00418746                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041874C
.text:0041874C loc_41874C:                             ; CODE XREF: .text:00418BDF↓j
.text:0041874C                 mov     [esp+10h], edx
.text:00418750                 mov     ebx, [esp+144h]
.text:00418757                 mov     [esp+0Ch], ecx
.text:0041875B                 mov     [esp+8], eax
.text:0041875F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00418767                 mov     [esp], ebx
.text:0041876A                 call    sprintf
.text:0041876F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00418777                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0041877D                 mov     ecx, [esp+148h]
.text:00418784                 mov     [esp+8], edi
.text:00418788                 mov     [esp], ecx
.text:0041878B                 call    sprintf
.text:00418790                 mov     eax, 1
.text:00418795
.text:00418795 loc_418795:                             ; CODE XREF: .text:0041898F↓j
.text:00418795                                         ; .text:004189DC↓j
.text:00418795                 add     esp, 130h
.text:0041879B                 pop     ebx
.text:0041879C                 pop     esi
.text:0041879D                 pop     edi
.text:0041879E                 retn
.text:0041879F ; ---------------------------------------------------------------------------
.text:0041879F
.text:0041879F loc_41879F:                             ; CODE XREF: .text:00418738↑j
.text:0041879F                 mov     dword ptr [ebx], 7263694Dh
.text:004187A5                 mov     dword ptr [ebx+4], 666F736Fh
.text:004187AC                 mov     dword ptr [ebx+8], 69572074h
.text:004187B3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004187BA                 mov     dword ptr [ebx+10h], 45432073h
.text:004187C1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:004187C7                 mov     esi, esi
.text:004187C9                 lea     edi, [edi+0]
.text:004187D0
.text:004187D0 loc_4187D0:                             ; CODE XREF: .text:00418878↓j
.text:004187D0                                         ; .text:00418BB9↓j ...
.text:004187D0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004187D5                 jmp     loc_418740
.text:004187D5 ; ---------------------------------------------------------------------------
.text:004187DA                 align 10h
.text:004187E0
.text:004187E0 loc_4187E0:                             ; CODE XREF: .text:0041872F↑j
.text:004187E0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:004187E6                 cmp     edx, 3
.text:004187E9                 mov     eax, edx
.text:004187EB                 jz      loc_418B55
.text:004187F1
.text:004187F1 loc_4187F1:                             ; CODE XREF: .text:00418B5C↓j
.text:004187F1                 cmp     eax, 4
.text:004187F4                 jz      loc_418B15
.text:004187FA
.text:004187FA loc_4187FA:                             ; CODE XREF: .text:00418B1D↓j
.text:004187FA                 cmp     eax, 4
.text:004187FD                 ja      loc_418A62
.text:00418803                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00418809                 test    ecx, ecx
.text:0041880B                 jnz     loc_418A62
.text:00418811                 mov     dword ptr [ebx], 7263694Dh
.text:00418817                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041881E                 mov     dword ptr [ebx+8], 69572074h
.text:00418825                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041882C                 mov     dword ptr [ebx+10h], 544E2073h
.text:00418833
.text:00418833 loc_418833:                             ; CODE XREF: .text:00418AD5↓j
.text:00418833                 mov     byte ptr [ebx+14h], 0
.text:00418837
.text:00418837 loc_418837:                             ; CODE XREF: .text:00418A65↓j
.text:00418837                                         ; .text:00418A7C↓j ...
.text:00418837                 mov     esi, dword_41E0F0
.text:0041883D                 test    esi, esi
.text:0041883F                 jz      loc_418952
.text:00418845                 movzx   eax, ds:byte_41F2BA
.text:0041884C                 cmp     al, 1
.text:0041884E                 jz      loc_418932
.text:00418854                 cmp     al, 3
.text:00418856                 jz      short loc_41887D
.text:00418858
.text:00418858 loc_418858:                             ; CODE XREF: .text:0041889B↓j
.text:00418858                                         ; .text:004188D6↓j ...
.text:00418858                 mov     dword ptr [esp+4], offset asc_418550 ; " "
.text:00418860                 mov     [esp], ebx
.text:00418863                 call    strcat
.text:00418868                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00418870                 mov     [esp], ebx
.text:00418873                 call    strcat
.text:00418878                 jmp     loc_4187D0
.text:0041887D ; ---------------------------------------------------------------------------
.text:0041887D
.text:0041887D loc_41887D:                             ; CODE XREF: .text:00418856↑j
.text:0041887D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00418884                 jz      short loc_4188A6
.text:00418886
.text:00418886 loc_418886:                             ; CODE XREF: .text:004188B2↓j
.text:00418886                 test    byte ptr ds:word_41F2B8, 2
.text:0041888D                 jz      short loc_41889D
.text:0041888F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00418896
.text:00418896 loc_418896:                             ; CODE XREF: .text:004188A4↓j
.text:00418896                 call    printf
.text:0041889B                 jmp     short loc_418858
.text:0041889D ; ---------------------------------------------------------------------------
.text:0041889D
.text:0041889D loc_41889D:                             ; CODE XREF: .text:0041888D↑j
.text:0041889D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:004188A4                 jmp     short loc_418896
.text:004188A6 ; ---------------------------------------------------------------------------
.text:004188A6
.text:004188A6 loc_4188A6:                             ; CODE XREF: .text:00418884↑j
.text:004188A6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004188AB                 cmp     eax, 2
.text:004188AE                 jz      short loc_4188F0
.text:004188B0                 test    eax, eax
.text:004188B2                 jnz     short loc_418886
.text:004188B4                 cmp     byte ptr ds:word_41F2B8, 0
.text:004188BB                 js      short loc_4188E2
.text:004188BD                 test    byte ptr ds:word_41F2B8, 2
.text:004188C4                 jnz     short loc_4188D8
.text:004188C6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:004188CE
.text:004188CE loc_4188CE:                             ; CODE XREF: .text:004188E0↓j
.text:004188CE                                         ; .text:004188EA↓j ...
.text:004188CE                 mov     [esp], ebx
.text:004188D1                 call    strcat
.text:004188D6                 jmp     short loc_418858
.text:004188D8 ; ---------------------------------------------------------------------------
.text:004188D8
.text:004188D8 loc_4188D8:                             ; CODE XREF: .text:004188C4↑j
.text:004188D8                                         ; .text:00418A39↓j
.text:004188D8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:004188E0                 jmp     short loc_4188CE
.text:004188E2 ; ---------------------------------------------------------------------------
.text:004188E2
.text:004188E2 loc_4188E2:                             ; CODE XREF: .text:004188BB↑j
.text:004188E2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:004188EA                 jmp     short loc_4188CE
.text:004188EA ; ---------------------------------------------------------------------------
.text:004188EC                 align 10h
.text:004188F0
.text:004188F0 loc_4188F0:                             ; CODE XREF: .text:004188AE↑j
.text:004188F0                 cmp     byte ptr ds:word_41F2B8, 0
.text:004188F7                 js      short loc_418928
.text:004188F9                 movzx   eax, ds:word_41F2B8
.text:00418900                 test    al, 2
.text:00418902                 jnz     short loc_41891E
.text:00418904                 cmp     ax, 400h
.text:00418908                 jz      short loc_418914
.text:0041890A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:00418912                 jmp     short loc_4188CE
.text:00418914 ; ---------------------------------------------------------------------------
.text:00418914
.text:00418914 loc_418914:                             ; CODE XREF: .text:00418908↑j
.text:00418914                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0041891C                 jmp     short loc_4188CE
.text:0041891E ; ---------------------------------------------------------------------------
.text:0041891E
.text:0041891E loc_41891E:                             ; CODE XREF: .text:00418902↑j
.text:0041891E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00418926                 jmp     short loc_4188CE
.text:00418928 ; ---------------------------------------------------------------------------
.text:00418928
.text:00418928 loc_418928:                             ; CODE XREF: .text:004188F7↑j
.text:00418928                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00418930                 jmp     short loc_4188CE
.text:00418932 ; ---------------------------------------------------------------------------
.text:00418932
.text:00418932 loc_418932:                             ; CODE XREF: .text:0041884E↑j
.text:00418932                 test    byte ptr ds:word_41F2B8+1, 2
.text:00418939                 jz      short loc_418945
.text:0041893B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00418943                 jmp     short loc_4188CE
.text:00418945 ; ---------------------------------------------------------------------------
.text:00418945
.text:00418945 loc_418945:                             ; CODE XREF: .text:00418939↑j
.text:00418945                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0041894D                 jmp     loc_4188CE
.text:00418952 ; ---------------------------------------------------------------------------
.text:00418952
.text:00418952 loc_418952:                             ; CODE XREF: .text:0041883F↑j
.text:00418952                 mov     dword ptr [esp+28h], 0FFh
.text:0041895A                 lea     edx, [esp+2Ch]
.text:0041895E                 mov     [esp+10h], edx
.text:00418962                 mov     dword ptr [esp+0Ch], 1
.text:0041896A                 mov     dword ptr [esp+8], 0
.text:00418972                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0041897A                 mov     dword ptr [esp], 80000002h
.text:00418981                 call    RegOpenKeyExA
.text:00418986                 mov     edi, eax
.text:00418988                 sub     esp, 14h
.text:0041898B                 xor     eax, eax
.text:0041898D                 test    edi, edi
.text:0041898F                 jnz     loc_418795
.text:00418995                 mov     dword ptr [esp+0Ch], 0
.text:0041899D                 mov     edi, [esp+2Ch]
.text:004189A1                 lea     esi, [esp+28h]
.text:004189A5                 mov     [esp+14h], esi
.text:004189A9                 lea     esi, [esp+30h]
.text:004189AD                 mov     [esp+10h], esi
.text:004189B1                 mov     dword ptr [esp+8], 0
.text:004189B9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:004189C1                 mov     [esp], edi
.text:004189C4                 call    RegQueryValueExA
.text:004189C9                 sub     esp, 18h
.text:004189CC                 test    eax, eax
.text:004189CE                 jnz     short loc_4189DA
.text:004189D0                 cmp     dword ptr [esp+28h], 0FFh
.text:004189D8                 jbe     short loc_4189E1
.text:004189DA
.text:004189DA loc_4189DA:                             ; CODE XREF: .text:004189CE↑j
.text:004189DA                 xor     eax, eax
.text:004189DC                 jmp     loc_418795
.text:004189E1 ; ---------------------------------------------------------------------------
.text:004189E1
.text:004189E1 loc_4189E1:                             ; CODE XREF: .text:004189D8↑j
.text:004189E1                 mov     edx, [esp+2Ch]
.text:004189E5                 mov     [esp], edx
.text:004189E8                 call    RegCloseKey
.text:004189ED                 sub     esp, 4
.text:004189F0                 mov     [esp+4], esi
.text:004189F4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:004189FB                 call    lstrcmpiA
.text:00418A00                 sub     esp, 8
.text:00418A03                 test    eax, eax
.text:00418A05                 jz      short loc_418A50
.text:00418A07
.text:00418A07 loc_418A07:                             ; CODE XREF: .text:00418A60↓j
.text:00418A07                 mov     [esp+4], esi
.text:00418A0B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:00418A12                 call    lstrcmpiA
.text:00418A17                 sub     esp, 8
.text:00418A1A                 test    eax, eax
.text:00418A1C                 jz      short loc_418A3E
.text:00418A1E
.text:00418A1E loc_418A1E:                             ; CODE XREF: .text:00418A4E↓j
.text:00418A1E                 mov     [esp+4], esi
.text:00418A22                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00418A29                 call    lstrcmpiA
.text:00418A2E                 sub     esp, 8
.text:00418A31                 test    eax, eax
.text:00418A33                 jnz     loc_418858
.text:00418A39                 jmp     loc_4188D8
.text:00418A3E ; ---------------------------------------------------------------------------
.text:00418A3E
.text:00418A3E loc_418A3E:                             ; CODE XREF: .text:00418A1C↑j
.text:00418A3E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00418A46                 mov     [esp], ebx
.text:00418A49                 call    strcat
.text:00418A4E                 jmp     short loc_418A1E
.text:00418A50 ; ---------------------------------------------------------------------------
.text:00418A50
.text:00418A50 loc_418A50:                             ; CODE XREF: .text:00418A05↑j
.text:00418A50                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00418A58                 mov     [esp], ebx
.text:00418A5B                 call    strcat
.text:00418A60                 jmp     short loc_418A07
.text:00418A62 ; ---------------------------------------------------------------------------
.text:00418A62
.text:00418A62 loc_418A62:                             ; CODE XREF: .text:004187FD↑j
.text:00418A62                                         ; .text:0041880B↑j
.text:00418A62                 cmp     eax, 5
.text:00418A65                 jnz     loc_418837
.text:00418A6B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00418A70                 cmp     eax, 2
.text:00418A73                 jz      short loc_418ADA
.text:00418A75                 cmp     eax, 1
.text:00418A78                 jz      short loc_418AB3
.text:00418A7A                 test    eax, eax
.text:00418A7C                 jnz     loc_418837
.text:00418A82                 mov     dword ptr [ebx], 7263694Dh
.text:00418A88                 mov     dword ptr [ebx+4], 666F736Fh
.text:00418A8F                 mov     dword ptr [ebx+8], 69572074h
.text:00418A96                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00418A9D                 mov     dword ptr [ebx+10h], 30322073h
.text:00418AA4                 mov     word ptr [ebx+14h], 3030h
.text:00418AAA                 mov     byte ptr [ebx+16h], 0
.text:00418AAE                 jmp     loc_418837
.text:00418AB3 ; ---------------------------------------------------------------------------
.text:00418AB3
.text:00418AB3 loc_418AB3:                             ; CODE XREF: .text:00418A78↑j
.text:00418AB3                 mov     dword ptr [ebx], 7263694Dh
.text:00418AB9                 mov     dword ptr [ebx+4], 666F736Fh
.text:00418AC0                 mov     dword ptr [ebx+8], 69572074h
.text:00418AC7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00418ACE                 mov     dword ptr [ebx+10h], 50582073h
.text:00418AD5                 jmp     loc_418833
.text:00418ADA ; ---------------------------------------------------------------------------
.text:00418ADA
.text:00418ADA loc_418ADA:                             ; CODE XREF: .text:00418A73↑j
.text:00418ADA                 mov     dword ptr [ebx], 7263694Dh
.text:00418AE0                 mov     dword ptr [ebx+4], 666F736Fh
.text:00418AE7                 mov     dword ptr [ebx+8], 69572074h
.text:00418AEE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00418AF5                 mov     dword ptr [ebx+10h], 65532073h
.text:00418AFC                 mov     dword ptr [ebx+14h], 72657672h
.text:00418B03                 mov     dword ptr [ebx+18h], 30303220h
.text:00418B0A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00418B10                 jmp     loc_418837
.text:00418B15 ; ---------------------------------------------------------------------------
.text:00418B15
.text:00418B15 loc_418B15:                             ; CODE XREF: .text:004187F4↑j
.text:00418B15                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00418B1B                 test    edx, edx
.text:00418B1D                 jnz     loc_4187FA
.text:00418B23                 mov     dword ptr [ebx], 7263694Dh
.text:00418B29                 mov     dword ptr [ebx+4], 666F736Fh
.text:00418B30                 mov     dword ptr [ebx+8], 69572074h
.text:00418B37                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00418B3E                 mov     dword ptr [ebx+10h], 544E2073h
.text:00418B45                 mov     dword ptr [ebx+14h], 302E3420h
.text:00418B4C                 mov     byte ptr [ebx+18h], 0
.text:00418B50                 jmp     loc_418837
.text:00418B55 ; ---------------------------------------------------------------------------
.text:00418B55
.text:00418B55 loc_418B55:                             ; CODE XREF: .text:004187EB↑j
.text:00418B55                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:00418B5C                 jnz     loc_4187F1
.text:00418B62                 mov     dword ptr [ebx], 7263694Dh
.text:00418B68                 mov     dword ptr [ebx+4], 666F736Fh
.text:00418B6F                 mov     dword ptr [ebx+8], 69572074h
.text:00418B76                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00418B7D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00418B84                 mov     dword ptr [ebx+14h], 352E3320h
.text:00418B8B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00418B91                 jmp     loc_418837
.text:00418B96 ; ---------------------------------------------------------------------------
.text:00418B96
.text:00418B96 loc_418B96:                             ; CODE XREF: .text:00418726↑j
.text:00418B96                 cld
.text:00418B97                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:00418B9C                 mov     ecx, 8
.text:00418BA1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00418BA8                 mov     edi, ebx
.text:00418BAA                 rep movsd
.text:00418BAC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00418BB3                 mov     [edi+2], dl
.text:00418BB6                 mov     [edi], si
.text:00418BB9                 jmp     loc_4187D0
.text:00418BB9 ; ---------------------------------------------------------------------------
.text:00418BBE                 align 10h
.text:00418BC0
.text:00418BC0 loc_418BC0:                             ; CODE XREF: .text:0041871D↑j
.text:00418BC0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00418BC6                 cmp     ecx, 4
.text:00418BC9                 jz      loc_418C80
.text:00418BCF
.text:00418BCF loc_418BCF:                             ; CODE XREF: .text:00418CD6↓j
.text:00418BCF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00418BD5
.text:00418BD5 loc_418BD5:                             ; CODE XREF: .text:00418C88↓j
.text:00418BD5                 cmp     ecx, 4
.text:00418BD8                 jz      short loc_418BE4
.text:00418BDA
.text:00418BDA loc_418BDA:                             ; CODE XREF: .text:00418BEC↓j
.text:00418BDA                                         ; .text:00418BF1↓j
.text:00418BDA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00418BDF                 jmp     loc_41874C
.text:00418BE4 ; ---------------------------------------------------------------------------
.text:00418BE4
.text:00418BE4 loc_418BE4:                             ; CODE XREF: .text:00418BD8↑j
.text:00418BE4                 cmp     edx, 0Ah
.text:00418BE7                 jz      short loc_418C11
.text:00418BE9
.text:00418BE9 loc_418BE9:                             ; CODE XREF: .text:00418C5F↓j
.text:00418BE9                 cmp     ecx, 4
.text:00418BEC                 jnz     short loc_418BDA
.text:00418BEE                 cmp     edx, 5Ah ; 'Z'
.text:00418BF1                 jnz     short loc_418BDA
.text:00418BF3                 cld
.text:00418BF4                 mov     edi, ebx
.text:00418BF6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:00418BFB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00418C02                 mov     ecx, 9
.text:00418C07                 rep movsd
.text:00418C09                 mov     [edi], bx
.text:00418C0C                 jmp     loc_4187D0
.text:00418C11 ; ---------------------------------------------------------------------------
.text:00418C11
.text:00418C11 loc_418C11:                             ; CODE XREF: .text:00418BE7↑j
.text:00418C11                 mov     dword ptr [ebx], 7263694Dh
.text:00418C17                 mov     dword ptr [ebx+4], 666F736Fh
.text:00418C1E                 mov     dword ptr [ebx+8], 69572074h
.text:00418C25                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00418C2C                 mov     dword ptr [ebx+10h], 38392073h
.text:00418C33                 mov     byte ptr [ebx+14h], 0
.text:00418C37                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00418C3D                 lea     edi, [edx-7CFh]
.text:00418C43                 cmp     edi, 0B7h ; '·'
.text:00418C49                 jbe     short loc_418C73
.text:00418C4B                 cmp     edx, 886h
.text:00418C51                 ja      short loc_418C61
.text:00418C53
.text:00418C53 loc_418C53:                             ; CODE XREF: .text:00418C71↓j
.text:00418C53                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00418C59                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00418C5F                 jmp     short loc_418BE9
.text:00418C61 ; ---------------------------------------------------------------------------
.text:00418C61
.text:00418C61 loc_418C61:                             ; CODE XREF: .text:00418C51↑j
.text:00418C61                 mov     dword ptr [esp+4], offset loc_4186E6
.text:00418C69
.text:00418C69 loc_418C69:                             ; CODE XREF: .text:00418C7B↓j
.text:00418C69                 mov     [esp], ebx
.text:00418C6C                 call    strcat
.text:00418C71                 jmp     short loc_418C53
.text:00418C73 ; ---------------------------------------------------------------------------
.text:00418C73
.text:00418C73 loc_418C73:                             ; CODE XREF: .text:00418C49↑j
.text:00418C73                 mov     dword ptr [esp+4], 4186EAh
.text:00418C7B                 jmp     short loc_418C69
.text:00418C7B ; ---------------------------------------------------------------------------
.text:00418C7D                 align 10h
.text:00418C80
.text:00418C80 loc_418C80:                             ; CODE XREF: .text:00418BC9↑j
.text:00418C80                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00418C86                 test    edx, edx
.text:00418C88                 jnz     loc_418BD5
.text:00418C8E                 mov     dword ptr [ebx], 7263694Dh
.text:00418C94                 mov     dword ptr [ebx+4], 666F736Fh
.text:00418C9B                 mov     dword ptr [ebx+8], 69572074h
.text:00418CA2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00418CA9                 mov     dword ptr [ebx+10h], 35392073h
.text:00418CB0                 mov     byte ptr [ebx+14h], 0
.text:00418CB4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00418CBA                 lea     ecx, [edx-3B7h]
.text:00418CC0                 cmp     ecx, 81h
.text:00418CC6                 jbe     short loc_418CED
.text:00418CC8                 cmp     edx, 438h
.text:00418CCE                 ja      short loc_418CDB
.text:00418CD0
.text:00418CD0 loc_418CD0:                             ; CODE XREF: .text:00418CEB↓j
.text:00418CD0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00418CD6                 jmp     loc_418BCF
.text:00418CDB ; ---------------------------------------------------------------------------
.text:00418CDB
.text:00418CDB loc_418CDB:                             ; CODE XREF: .text:00418CCE↑j
.text:00418CDB                 mov     dword ptr [esp+4], offset loc_4186EF
.text:00418CE3
.text:00418CE3 loc_418CE3:                             ; CODE XREF: .text:00418CF5↓j
.text:00418CE3                 mov     [esp], ebx
.text:00418CE6                 call    strcat
.text:00418CEB                 jmp     short loc_418CD0
.text:00418CED ; ---------------------------------------------------------------------------
.text:00418CED
.text:00418CED loc_418CED:                             ; CODE XREF: .text:00418CC6↑j
.text:00418CED                 mov     dword ptr [esp+4], 4186EAh
.text:00418CF5                 jmp     short loc_418CE3
.text:00418CF5 ; ---------------------------------------------------------------------------
.text:00418CF7                 align 10h
.text:00418D00
.text:00418D00 ; =============== S U B R O U T I N E =======================================
.text:00418D00
.text:00418D00
.text:00418D00 sub_418D00      proc near               ; CODE XREF: .text:0041985E↓p
.text:00418D00                                         ; sub_419CE0+12A↓p
.text:00418D00                 sub     esp, 0Ch
.text:00418D03                 call    sub_418E10
.text:00418D08                 mov     eax, ds:dword_41F210
.text:00418D0D                 add     esp, 0Ch
.text:00418D10                 retn
.text:00418D10 sub_418D00      endp
.text:00418D10
.text:00418D11 ; ---------------------------------------------------------------------------
.text:00418D11                 jmp     short loc_418D20
.text:00418D11 ; ---------------------------------------------------------------------------
.text:00418D13                 align 10h
.text:00418D20
.text:00418D20 loc_418D20:                             ; CODE XREF: .text:00418D11↑j
.text:00418D20                 sub     esp, 0Ch
.text:00418D23                 call    sub_418E10
.text:00418D28                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00418D2D                 add     esp, 0Ch
.text:00418D30                 retn
.text:00418D31 ; ---------------------------------------------------------------------------
.text:00418D31                 jmp     short loc_418D40
.text:00418D31 ; ---------------------------------------------------------------------------
.text:00418D33                 align 10h
.text:00418D40
.text:00418D40 loc_418D40:                             ; CODE XREF: .text:00418D31↑j
.text:00418D40                 sub     esp, 0Ch
.text:00418D43                 call    sub_418E10
.text:00418D48                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00418D4D                 add     esp, 0Ch
.text:00418D50                 retn
.text:00418D51 ; ---------------------------------------------------------------------------
.text:00418D51                 jmp     short loc_418D60
.text:00418D51 ; ---------------------------------------------------------------------------
.text:00418D53                 align 10h
.text:00418D60
.text:00418D60 loc_418D60:                             ; CODE XREF: .text:00418D51↑j
.text:00418D60                 sub     esp, 0Ch
.text:00418D63                 call    sub_418E10
.text:00418D68                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00418D6D                 add     esp, 0Ch
.text:00418D70                 retn
.text:00418D71 ; ---------------------------------------------------------------------------
.text:00418D71                 jmp     short loc_418D80
.text:00418D71 ; ---------------------------------------------------------------------------
.text:00418D73                 align 10h
.text:00418D80
.text:00418D80 loc_418D80:                             ; CODE XREF: .text:00418D71↑j
.text:00418D80                 sub     esp, 0Ch
.text:00418D83                 call    GetVersion
.text:00418D88                 shr     eax, 10h
.text:00418D8B                 add     esp, 0Ch
.text:00418D8E                 retn
.text:00418D8E ; ---------------------------------------------------------------------------
.text:00418D8F                 align 10h
.text:00418D90                 sub     esp, 0Ch
.text:00418D93                 call    sub_418E10
.text:00418D98                 xor     eax, eax
.text:00418D9A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:00418DA1                 setz    al
.text:00418DA4                 add     esp, 0Ch
.text:00418DA7                 retn
.text:00418DA7 ; ---------------------------------------------------------------------------
.text:00418DA8                 align 10h
.text:00418DB0
.text:00418DB0 ; =============== S U B R O U T I N E =======================================
.text:00418DB0
.text:00418DB0
.text:00418DB0 sub_418DB0      proc near               ; CODE XREF: .text:loc_40D4E0↑p
.text:00418DB0                                         ; .text:loc_419844↓p ...
.text:00418DB0                 sub     esp, 0Ch
.text:00418DB3                 call    sub_418E10
.text:00418DB8                 xor     eax, eax
.text:00418DBA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00418DC1                 setz    al
.text:00418DC4                 add     esp, 0Ch
.text:00418DC7                 retn
.text:00418DC7 sub_418DB0      endp
.text:00418DC7
.text:00418DC7 ; ---------------------------------------------------------------------------
.text:00418DC8                 align 10h
.text:00418DD0                 sub     esp, 0Ch
.text:00418DD3                 call    sub_418E10
.text:00418DD8                 xor     eax, eax
.text:00418DDA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:00418DE1                 setz    al
.text:00418DE4                 add     esp, 0Ch
.text:00418DE7                 retn
.text:00418DE7 ; ---------------------------------------------------------------------------
.text:00418DE8                 align 10h
.text:00418DF0                 sub     esp, 0Ch
.text:00418DF3                 call    sub_418E10
.text:00418DF8                 xor     eax, eax
.text:00418DFA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00418E01                 setz    al
.text:00418E04                 add     esp, 0Ch
.text:00418E07                 retn
.text:00418E07 ; ---------------------------------------------------------------------------
.text:00418E08                 align 10h
.text:00418E10
.text:00418E10 ; =============== S U B R O U T I N E =======================================
.text:00418E10
.text:00418E10
.text:00418E10 sub_418E10      proc near               ; CODE XREF: .text:00418710↑p
.text:00418E10                                         ; sub_418D00+3↑p ...
.text:00418E10
.text:00418E10 lpVersionInformation= dword ptr -0BCh
.text:00418E10 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00418E10
.text:00418E10                 sub     esp, 0BCh
.text:00418E16                 mov     edx, ds:dword_41F2C0
.text:00418E1C                 test    edx, edx
.text:00418E1E                 jz      short loc_418E30
.text:00418E20
.text:00418E20 loc_418E20:                             ; CODE XREF: sub_418E10+7B↓j
.text:00418E20                 mov     edx, 1
.text:00418E25
.text:00418E25 loc_418E25:                             ; CODE XREF: sub_418E10+217↓j
.text:00418E25                 mov     eax, edx
.text:00418E27                 add     esp, 0BCh
.text:00418E2D                 retn
.text:00418E2D ; ---------------------------------------------------------------------------
.text:00418E2E                 align 10h
.text:00418E30
.text:00418E30 loc_418E30:                             ; CODE XREF: sub_418E10+E↑j
.text:00418E30                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00418E37                 mov     edx, 9Ch ; 'œ'
.text:00418E3C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00418E42                 call    GetVersionExA
.text:00418E47                 sub     esp, 4
.text:00418E4A                 test    eax, eax
.text:00418E4C                 jz      loc_419004
.text:00418E52
.text:00418E52 loc_418E52:                             ; CODE XREF: sub_418E10+245↓j
.text:00418E52                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00418E59                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00418E5E                 cmp     eax, 1
.text:00418E61                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00418E67                 jz      loc_418F50
.text:00418E6D                 cmp     eax, 1
.text:00418E70                 jb      loc_418F40
.text:00418E76                 cmp     eax, 2
.text:00418E79                 jz      short loc_418E9A
.text:00418E7B                 cmp     eax, 3
.text:00418E7E                 jz      short loc_418E8D
.text:00418E80
.text:00418E80 loc_418E80:                             ; CODE XREF: sub_418E10+88↓j
.text:00418E80                                         ; sub_418E10+C0↓j ...
.text:00418E80                 mov     edx, 1
.text:00418E85                 mov     ds:dword_41F2C0, edx
.text:00418E8B                 jmp     short loc_418E20
.text:00418E8D ; ---------------------------------------------------------------------------
.text:00418E8D
.text:00418E8D loc_418E8D:                             ; CODE XREF: sub_418E10+6E↑j
.text:00418E8D                 mov     ecx, 17h
.text:00418E92
.text:00418E92 loc_418E92:                             ; CODE XREF: sub_418E10+1A7↓j
.text:00418E92                 mov     ds:dword_41F210, ecx
.text:00418E98                 jmp     short loc_418E80
.text:00418E9A ; ---------------------------------------------------------------------------
.text:00418E9A
.text:00418E9A loc_418E9A:                             ; CODE XREF: sub_418E10+69↑j
.text:00418E9A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00418E9F                 cmp     eax, 3
.text:00418EA2                 jz      short loc_418F1B
.text:00418EA4                 cmp     eax, 4
.text:00418EA7                 jz      short loc_418F0A
.text:00418EA9
.text:00418EA9 loc_418EA9:                             ; CODE XREF: sub_418E10+102↓j
.text:00418EA9                 cmp     eax, 4
.text:00418EAC                 ja      short loc_418ED2
.text:00418EAE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00418EB4                 test    ecx, ecx
.text:00418EB6                 jnz     short loc_418ED2
.text:00418EB8                 mov     edx, 1Eh
.text:00418EBD
.text:00418EBD loc_418EBD:                             ; CODE XREF: sub_418E10+DF↓j
.text:00418EBD                 mov     ds:dword_41F210, edx
.text:00418EC3
.text:00418EC3 loc_418EC3:                             ; CODE XREF: sub_418E10+C5↓j
.text:00418EC3                                         ; sub_418E10+D8↓j ...
.text:00418EC3                 movzx   ecx, ds:word_41F2B4
.text:00418ECA                 add     ds:dword_41F210, ecx
.text:00418ED0                 jmp     short loc_418E80
.text:00418ED2 ; ---------------------------------------------------------------------------
.text:00418ED2
.text:00418ED2 loc_418ED2:                             ; CODE XREF: sub_418E10+9C↑j
.text:00418ED2                                         ; sub_418E10+A6↑j
.text:00418ED2                 cmp     eax, 5
.text:00418ED5                 jnz     short loc_418EC3
.text:00418ED7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00418EDC                 cmp     eax, 2
.text:00418EDF                 jz      short loc_418EFE
.text:00418EE1                 cmp     eax, 1
.text:00418EE4                 jz      short loc_418EF1
.text:00418EE6                 test    eax, eax
.text:00418EE8                 jnz     short loc_418EC3
.text:00418EEA                 mov     edx, 32h ; '2'
.text:00418EEF                 jmp     short loc_418EBD
.text:00418EF1 ; ---------------------------------------------------------------------------
.text:00418EF1
.text:00418EF1 loc_418EF1:                             ; CODE XREF: sub_418E10+D4↑j
.text:00418EF1                 mov     ecx, 3Ch ; '<'
.text:00418EF6
.text:00418EF6 loc_418EF6:                             ; CODE XREF: sub_418E10+122↓j
.text:00418EF6                 mov     ds:dword_41F210, ecx
.text:00418EFC                 jmp     short loc_418EC3
.text:00418EFE ; ---------------------------------------------------------------------------
.text:00418EFE
.text:00418EFE loc_418EFE:                             ; CODE XREF: sub_418E10+CF↑j
.text:00418EFE                 mov     eax, 46h ; 'F'
.text:00418F03
.text:00418F03 loc_418F03:                             ; CODE XREF: sub_418E10+109↓j
.text:00418F03                                         ; sub_418E10+129↓j
.text:00418F03                 mov     ds:dword_41F210, eax
.text:00418F08                 jmp     short loc_418EC3
.text:00418F0A ; ---------------------------------------------------------------------------
.text:00418F0A
.text:00418F0A loc_418F0A:                             ; CODE XREF: sub_418E10+97↑j
.text:00418F0A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00418F10                 test    ecx, ecx
.text:00418F12                 jnz     short loc_418EA9
.text:00418F14                 mov     eax, 28h ; '('
.text:00418F19                 jmp     short loc_418F03
.text:00418F1B ; ---------------------------------------------------------------------------
.text:00418F1B
.text:00418F1B loc_418F1B:                             ; CODE XREF: sub_418E10+92↑j
.text:00418F1B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00418F20                 cmp     eax, 33h ; '3'
.text:00418F23                 jz      short loc_418F34
.text:00418F25                 cmp     eax, 5
.text:00418F28                 setz    cl
.text:00418F2B                 movzx   edx, cl
.text:00418F2E                 lea     ecx, [edx+edx*4+1Eh]
.text:00418F32                 jmp     short loc_418EF6
.text:00418F34 ; ---------------------------------------------------------------------------
.text:00418F34
.text:00418F34 loc_418F34:                             ; CODE XREF: sub_418E10+113↑j
.text:00418F34                 mov     eax, 24h ; '$'
.text:00418F39                 jmp     short loc_418F03
.text:00418F39 ; ---------------------------------------------------------------------------
.text:00418F3B                 align 10h
.text:00418F40
.text:00418F40 loc_418F40:                             ; CODE XREF: sub_418E10+60↑j
.text:00418F40                 mov     edx, 2
.text:00418F45                 mov     ds:dword_41F210, edx
.text:00418F4B                 jmp     loc_418E80
.text:00418F50 ; ---------------------------------------------------------------------------
.text:00418F50
.text:00418F50 loc_418F50:                             ; CODE XREF: sub_418E10+57↑j
.text:00418F50                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00418F56                 cmp     ecx, 4
.text:00418F59                 jnz     loc_418E80
.text:00418F5F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00418F64                 test    eax, eax
.text:00418F66                 jnz     short loc_418F8A
.text:00418F68                 mov     eax, 0Ah
.text:00418F6D                 mov     ds:dword_41F210, eax
.text:00418F72                 lea     eax, [edx-3B7h]
.text:00418F78                 cmp     eax, 81h
.text:00418F7D                 ja      short loc_418FF5
.text:00418F7F                 mov     edx, 0Bh
.text:00418F84
.text:00418F84 loc_418F84:                             ; CODE XREF: sub_418E10+1F2↓j
.text:00418F84                 mov     ds:dword_41F210, edx
.text:00418F8A
.text:00418F8A loc_418F8A:                             ; CODE XREF: sub_418E10+156↑j
.text:00418F8A                                         ; sub_418E10+1EB↓j
.text:00418F8A                 cmp     ecx, 4
.text:00418F8D                 jnz     loc_418E80
.text:00418F93                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:00418F9A                 jz      short loc_418FBC
.text:00418F9C
.text:00418F9C loc_418F9C:                             ; CODE XREF: sub_418E10+1D4↓j
.text:00418F9C                                         ; sub_418E10+1DC↓j
.text:00418F9C                 cmp     ecx, 4
.text:00418F9F                 jnz     loc_418E80
.text:00418FA5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:00418FAC                 jnz     loc_418E80
.text:00418FB2                 mov     ecx, 12h
.text:00418FB7                 jmp     loc_418E92
.text:00418FBC ; ---------------------------------------------------------------------------
.text:00418FBC
.text:00418FBC loc_418FBC:                             ; CODE XREF: sub_418E10+18A↑j
.text:00418FBC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00418FC2                 mov     eax, 0Eh
.text:00418FC7                 mov     ds:dword_41F210, eax
.text:00418FCC                 lea     eax, [edx-7CFh]
.text:00418FD2                 cmp     eax, 0B7h ; '·'
.text:00418FD7                 ja      short loc_418FE6
.text:00418FD9                 mov     edx, 0Fh
.text:00418FDE
.text:00418FDE loc_418FDE:                             ; CODE XREF: sub_418E10+1E3↓j
.text:00418FDE                 mov     ds:dword_41F210, edx
.text:00418FE4                 jmp     short loc_418F9C
.text:00418FE6 ; ---------------------------------------------------------------------------
.text:00418FE6
.text:00418FE6 loc_418FE6:                             ; CODE XREF: sub_418E10+1C7↑j
.text:00418FE6                 cmp     edx, 886h
.text:00418FEC                 jbe     short loc_418F9C
.text:00418FEE                 mov     edx, 10h
.text:00418FF3                 jmp     short loc_418FDE
.text:00418FF5 ; ---------------------------------------------------------------------------
.text:00418FF5
.text:00418FF5 loc_418FF5:                             ; CODE XREF: sub_418E10+16D↑j
.text:00418FF5                 cmp     edx, 438h
.text:00418FFB                 jbe     short loc_418F8A
.text:00418FFD                 mov     edx, 0Ch
.text:00419002                 jmp     short loc_418F84
.text:00419004 ; ---------------------------------------------------------------------------
.text:00419004
.text:00419004 loc_419004:                             ; CODE XREF: sub_418E10+3C↑j
.text:00419004                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0041900C                 xor     edx, edx
.text:0041900E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00419012                 mov     dword_41E0F0, edx
.text:00419018                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0041901B                 call    GetVersionExA
.text:00419020                 sub     esp, 4
.text:00419023                 xor     edx, edx
.text:00419025                 test    eax, eax
.text:00419027                 jz      loc_418E25
.text:0041902D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00419031                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00419035                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0041903B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0041903F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00419045                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00419049                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0041904F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00419055                 jmp     loc_418E52
.text:00419055 sub_418E10      endp
.text:00419055
.text:00419055 ; ---------------------------------------------------------------------------
.text:0041905A                 align 10h
.text:00419060
.text:00419060 ; =============== S U B R O U T I N E =======================================
.text:00419060
.text:00419060
.text:00419060 sub_419060      proc near               ; CODE XREF: .text:0040D213↑p
.text:00419060                                         ; .text:0040D263↑p
.text:00419060
.text:00419060 arg_4           = dword ptr  8
.text:00419060
.text:00419060                 sub     esp, 0Ch
.text:00419063                 mov     edx, [esp+0Ch+arg_4]
.text:00419067                 test    edx, edx
.text:00419069                 jz      short loc_419070
.text:0041906B                 add     esp, 0Ch
.text:0041906E                 jmp     short sub_4190B0
.text:00419070 ; ---------------------------------------------------------------------------
.text:00419070
.text:00419070 loc_419070:                             ; CODE XREF: sub_419060+9↑j
.text:00419070                 call    _errno
.text:00419075                 mov     dword ptr [eax], 16h
.text:0041907B                 xor     eax, eax
.text:0041907D                 add     esp, 0Ch
.text:00419080                 retn
.text:00419080 sub_419060      endp
.text:00419080
.text:00419081 ; ---------------------------------------------------------------------------
.text:00419081                 jmp     short sub_419090
.text:00419081 ; ---------------------------------------------------------------------------
.text:00419083                 align 10h
.text:00419090
.text:00419090 ; =============== S U B R O U T I N E =======================================
.text:00419090
.text:00419090
.text:00419090 ; int __cdecl sub_419090(LPCSTR)
.text:00419090 sub_419090      proc near               ; CODE XREF: .text:0040D408↑p
.text:00419090                                         ; .text:0040D416↑p ...
.text:00419090
.text:00419090 lpFileName      = dword ptr -0Ch
.text:00419090 Destination     = dword ptr -8
.text:00419090 arg_0           = dword ptr  4
.text:00419090
.text:00419090                 sub     esp, 0Ch
.text:00419093                 mov     edx, [esp+0Ch+arg_0]
.text:00419097                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0041909F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:004190A2                 call    sub_4190B0
.text:004190A7                 add     esp, 0Ch
.text:004190AA                 retn
.text:004190AA sub_419090      endp
.text:004190AA
.text:004190AA ; ---------------------------------------------------------------------------
.text:004190AB                 align 10h
.text:004190B0
.text:004190B0 ; =============== S U B R O U T I N E =======================================
.text:004190B0
.text:004190B0
.text:004190B0 ; int __cdecl sub_4190B0(LPCSTR lpFileName, char *Destination)
.text:004190B0 sub_4190B0      proc near               ; CODE XREF: sub_419060+E↑j
.text:004190B0                                         ; sub_419090+12↑p
.text:004190B0
.text:004190B0 Size            = dword ptr -2Ch
.text:004190B0 nBufferLength   = dword ptr -28h
.text:004190B0 lpBuffer        = dword ptr -24h
.text:004190B0 lpFilePart      = dword ptr -20h
.text:004190B0 FilePart        = dword ptr -14h
.text:004190B0 lpFileName      = dword ptr  4
.text:004190B0 Destination     = dword ptr  8
.text:004190B0
.text:004190B0                 push    ebp
.text:004190B1                 push    edi
.text:004190B2                 push    esi
.text:004190B3                 push    ebx
.text:004190B4                 sub     esp, 1Ch
.text:004190B7                 mov     edi, [esp+2Ch+lpFileName]
.text:004190BB                 mov     ebp, [esp+2Ch+Destination]
.text:004190BF                 test    edi, edi
.text:004190C1                 jz      loc_4191C9
.text:004190C7                 cmp     byte ptr [edi], 0
.text:004190CA                 jz      loc_4191BC
.text:004190D0                 mov     [esp+2Ch+Size], 104h ; Size
.text:004190D7                 call    malloc
.text:004190DC                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:004190E0                 lea     edx, [esp+2Ch+FilePart]
.text:004190E4                 mov     ebx, eax
.text:004190E6                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:004190EA                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:004190F2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:004190F5                 call    GetFullPathNameA
.text:004190FA                 sub     esp, 10h
.text:004190FD                 mov     esi, eax
.text:004190FF                 test    eax, eax
.text:00419101                 jz      loc_4191AA
.text:00419107                 cmp     eax, 104h
.text:0041910C                 jle     short loc_41911D
.text:0041910E                 test    ebp, ebp
.text:00419110                 jz      short loc_419179
.text:00419112                 call    _errno
.text:00419117                 mov     dword ptr [eax], 26h ; '&'
.text:0041911D
.text:0041911D loc_41911D:                             ; CODE XREF: sub_4190B0+5C↑j
.text:0041911D                                         ; sub_4190B0+F5↓j
.text:0041911D                 call    _errno
.text:00419122                 mov     edi, [eax]
.text:00419124                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0041912C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0041912F                 call    sub_4191E0
.text:00419134                 test    eax, eax
.text:00419136                 jnz     short loc_419150
.text:00419138                 movzx   eax, byte ptr [esi+ebx-1]
.text:0041913D                 cmp     al, 2Fh ; '/'
.text:0041913F                 jz      short loc_419150
.text:00419141                 cmp     al, 5Ch ; '\'
.text:00419143                 jz      short loc_419150
.text:00419145                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00419149                 mov     byte ptr [esi+ebx+1], 0
.text:0041914E                 mov     esi, esi
.text:00419150
.text:00419150 loc_419150:                             ; CODE XREF: sub_4190B0+86↑j
.text:00419150                                         ; sub_4190B0+8F↑j ...
.text:00419150                 call    _errno
.text:00419155                 mov     [eax], edi
.text:00419157                 mov     [esp+2Ch+Size], ebx
.text:0041915A                 call    sub_40D100
.text:0041915F                 test    ebp, ebp
.text:00419161                 mov     eax, ebx
.text:00419163                 jz      short loc_419171
.text:00419165                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00419169                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0041916C                 call    strcpy
.text:00419171
.text:00419171 loc_419171:                             ; CODE XREF: sub_4190B0+B3↑j
.text:00419171                                         ; sub_4190B0+10A↓j
.text:00419171                 add     esp, 1Ch
.text:00419174                 pop     ebx
.text:00419175                 pop     esi
.text:00419176                 pop     edi
.text:00419177                 pop     ebp
.text:00419178                 retn
.text:00419179 ; ---------------------------------------------------------------------------
.text:00419179
.text:00419179 loc_419179:                             ; CODE XREF: sub_4190B0+60↑j
.text:00419179                 mov     [esp+2Ch+Size], ebx ; Block
.text:0041917C                 lea     ecx, [eax+2]
.text:0041917F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00419183                 call    realloc
.text:00419188                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0041918C                 lea     edx, [esp+2Ch+FilePart]
.text:00419190                 mov     ebx, eax
.text:00419192                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00419196                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0041919A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0041919D                 call    GetFullPathNameA
.text:004191A2                 sub     esp, 10h
.text:004191A5                 jmp     loc_41911D
.text:004191AA ; ---------------------------------------------------------------------------
.text:004191AA
.text:004191AA loc_4191AA:                             ; CODE XREF: sub_4190B0+51↑j
.text:004191AA                 call    sub_40D830
.text:004191AF                 mov     esi, eax
.text:004191B1                 call    _errno
.text:004191B6                 mov     [eax], esi
.text:004191B8
.text:004191B8 loc_4191B8:                             ; CODE XREF: sub_4190B0+117↓j
.text:004191B8                                         ; sub_4190B0+124↓j
.text:004191B8                 xor     eax, eax
.text:004191BA                 jmp     short loc_419171
.text:004191BC ; ---------------------------------------------------------------------------
.text:004191BC
.text:004191BC loc_4191BC:                             ; CODE XREF: sub_4190B0+1A↑j
.text:004191BC                 call    _errno
.text:004191C1                 mov     dword ptr [eax], 2
.text:004191C7                 jmp     short loc_4191B8
.text:004191C9 ; ---------------------------------------------------------------------------
.text:004191C9
.text:004191C9 loc_4191C9:                             ; CODE XREF: sub_4190B0+11↑j
.text:004191C9                 call    _errno
.text:004191CE                 mov     dword ptr [eax], 16h
.text:004191D4                 jmp     short loc_4191B8
.text:004191D4 sub_4190B0      endp
.text:004191D4
.text:004191D4 ; ---------------------------------------------------------------------------
.text:004191D6                 align 10h
.text:004191E0
.text:004191E0 ; =============== S U B R O U T I N E =======================================
.text:004191E0
.text:004191E0
.text:004191E0 ; int __cdecl sub_4191E0(LPCSTR lpFileName, int)
.text:004191E0 sub_4191E0      proc near               ; CODE XREF: .text:0040D0E2↑p
.text:004191E0                                         ; sub_40CAE0+27B3↑p ...
.text:004191E0
.text:004191E0 uMode           = dword ptr -1Ch
.text:004191E0 var_10          = dword ptr -10h
.text:004191E0 var_C           = dword ptr -0Ch
.text:004191E0 var_8           = dword ptr -8
.text:004191E0 var_4           = dword ptr -4
.text:004191E0 lpFileName      = dword ptr  4
.text:004191E0 arg_4           = dword ptr  8
.text:004191E0
.text:004191E0                 sub     esp, 1Ch
.text:004191E3                 mov     [esp+1Ch+var_10], ebx
.text:004191E7                 mov     ebx, [esp+1Ch+lpFileName]
.text:004191EB                 mov     [esp+1Ch+var_4], ebp
.text:004191EF                 xor     ebp, ebp
.text:004191F1                 test    ebx, ebx
.text:004191F3                 mov     [esp+1Ch+var_C], esi
.text:004191F7                 mov     esi, [esp+1Ch+arg_4]
.text:004191FB                 mov     [esp+1Ch+var_8], edi
.text:004191FF                 jz      short loc_419209
.text:00419201                 test    esi, 0FFFFFFE8h
.text:00419207                 jz      short loc_419230
.text:00419209
.text:00419209 loc_419209:                             ; CODE XREF: sub_4191E0+1F↑j
.text:00419209                 call    _errno
.text:0041920E                 mov     dword ptr [eax], 16h
.text:00419214
.text:00419214 loc_419214:                             ; CODE XREF: sub_4191E0+B1↓j
.text:00419214                 mov     eax, 0FFFFFFFFh
.text:00419219
.text:00419219 loc_419219:                             ; CODE XREF: sub_4191E0+86↓j
.text:00419219                                         ; sub_4191E0+A4↓j
.text:00419219                 mov     ebx, [esp+1Ch+var_10]
.text:0041921D                 mov     esi, [esp+1Ch+var_C]
.text:00419221                 mov     edi, [esp+1Ch+var_8]
.text:00419225                 mov     ebp, [esp+1Ch+var_4]
.text:00419229                 add     esp, 1Ch
.text:0041922C                 retn
.text:0041922C ; ---------------------------------------------------------------------------
.text:0041922D                 align 10h
.text:00419230
.text:00419230 loc_419230:                             ; CODE XREF: sub_4191E0+27↑j
.text:00419230                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00419237                 call    SetErrorMode
.text:0041923C                 sub     esp, 4
.text:0041923F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00419242                 call    GetFileAttributesA
.text:00419247                 sub     esp, 4
.text:0041924A                 mov     edi, eax
.text:0041924C                 cmp     eax, 0FFFFFFFFh
.text:0041924F                 jz      short loc_419293
.text:00419251
.text:00419251 loc_419251:                             ; CODE XREF: sub_4191E0+C6↓j
.text:00419251                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00419258                 call    SetErrorMode
.text:0041925D                 sub     esp, 4
.text:00419260                 mov     eax, 0FFFFFFFFh
.text:00419265                 inc     ebp
.text:00419266                 jz      short loc_419219
.text:00419268                 test    esi, 10h
.text:0041926E                 jz      short loc_419278
.text:00419270                 test    edi, 10h
.text:00419276                 jz      short loc_419286
.text:00419278
.text:00419278 loc_419278:                             ; CODE XREF: sub_4191E0+8E↑j
.text:00419278                 and     esi, 2
.text:0041927B                 jz      short loc_419282
.text:0041927D                 and     edi, 1
.text:00419280                 jnz     short loc_419286
.text:00419282
.text:00419282 loc_419282:                             ; CODE XREF: sub_4191E0+9B↑j
.text:00419282                 xor     eax, eax
.text:00419284                 jmp     short loc_419219
.text:00419286 ; ---------------------------------------------------------------------------
.text:00419286
.text:00419286 loc_419286:                             ; CODE XREF: sub_4191E0+96↑j
.text:00419286                                         ; sub_4191E0+A0↑j
.text:00419286                 call    _errno
.text:0041928B                 mov     dword ptr [eax], 0Dh
.text:00419291                 jmp     short loc_419214
.text:00419293 ; ---------------------------------------------------------------------------
.text:00419293
.text:00419293 loc_419293:                             ; CODE XREF: sub_4191E0+6F↑j
.text:00419293                 call    sub_40D830
.text:00419298                 mov     ebp, eax
.text:0041929A                 call    _errno
.text:0041929F                 mov     [eax], ebp
.text:004192A1                 mov     ebp, 0FFFFFFFFh
.text:004192A6                 jmp     short loc_419251
.text:004192A6 sub_4191E0      endp
.text:004192A6
.text:004192A6 ; ---------------------------------------------------------------------------
.text:004192A8                 align 10h
.text:004192B0 ; const char String[4]
.text:004192B0 String          db ' :/',0              ; DATA XREF: sub_4192C0+FA↓o
.text:004192B4                 align 10h
.text:004192C0
.text:004192C0 ; =============== S U B R O U T I N E =======================================
.text:004192C0
.text:004192C0
.text:004192C0 ; int __cdecl sub_4192C0(LPCSTR)
.text:004192C0 sub_4192C0      proc near               ; CODE XREF: sub_40E050+E↑p
.text:004192C0                                         ; sub_40E550+17↑p ...
.text:004192C0
.text:004192C0 Str             = dword ptr -1Ch
.text:004192C0 Val             = dword ptr -18h
.text:004192C0 Count           = dword ptr -14h
.text:004192C0 var_10          = dword ptr -10h
.text:004192C0 var_C           = dword ptr -0Ch
.text:004192C0 var_8           = dword ptr -8
.text:004192C0 var_4           = dword ptr -4
.text:004192C0 arg_0           = dword ptr  4
.text:004192C0
.text:004192C0                 sub     esp, 1Ch
.text:004192C3                 mov     edx, [esp+1Ch+arg_0]
.text:004192C7                 mov     [esp+1Ch+var_8], edi
.text:004192CB                 mov     [esp+1Ch+var_10], ebx
.text:004192CF                 mov     [esp+1Ch+var_C], esi
.text:004192D3                 mov     [esp+1Ch+var_4], ebp
.text:004192D7                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:004192DA                 call    sub_419090
.text:004192DF                 test    eax, eax
.text:004192E1                 mov     edi, eax
.text:004192E3                 jz      short loc_419320
.text:004192E5                 mov     [esp+1Ch+Str], eax ; Str
.text:004192E8                 call    strlen
.text:004192ED                 cmp     eax, 2
.text:004192F0                 jbe     short loc_4192FC
.text:004192F2                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:004192F6                 jz      loc_4193B0
.text:004192FC
.text:004192FC loc_4192FC:                             ; CODE XREF: sub_4192C0+30↑j
.text:004192FC                                         ; sub_4192C0+F4↓j
.text:004192FC                 test    edi, edi
.text:004192FE                 jz      short loc_419320
.text:00419300                 mov     [esp+1Ch+Str], edi ; Str
.text:00419303                 call    strlen
.text:00419308                 cmp     eax, 4
.text:0041930B                 mov     ebp, eax
.text:0041930D                 jle     short loc_419320
.text:0041930F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00419312                 jz      short loc_419340
.text:00419314                 lea     esi, [esi+0]
.text:0041931A                 lea     edi, [edi+0]
.text:00419320
.text:00419320 loc_419320:                             ; CODE XREF: sub_4192C0+23↑j
.text:00419320                                         ; sub_4192C0+3E↑j ...
.text:00419320                 xor     esi, esi
.text:00419322
.text:00419322 loc_419322:                             ; CODE XREF: sub_4192C0+CD↓j
.text:00419322                                         ; sub_4192C0+115↓j
.text:00419322                 mov     [esp+1Ch+Str], edi ; Block
.text:00419325                 call    free
.text:0041932A                 mov     eax, esi
.text:0041932C                 mov     ebx, [esp+1Ch+var_10]
.text:00419330                 mov     esi, [esp+1Ch+var_C]
.text:00419334                 mov     edi, [esp+1Ch+var_8]
.text:00419338                 mov     ebp, [esp+1Ch+var_4]
.text:0041933C                 add     esp, 1Ch
.text:0041933F                 retn
.text:00419340 ; ---------------------------------------------------------------------------
.text:00419340
.text:00419340 loc_419340:                             ; CODE XREF: sub_4192C0+52↑j
.text:00419340                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00419344                 jnz     short loc_419320
.text:00419346                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0041934E                 lea     ecx, [edi+2]
.text:00419351                 mov     [esp+1Ch+Str], ecx ; Str
.text:00419354                 call    strchr
.text:00419359                 test    eax, eax
.text:0041935B                 jnz     short loc_41938F
.text:0041935D
.text:0041935D loc_41935D:                             ; CODE XREF: sub_4192C0+E2↓j
.text:0041935D                 inc     ebp
.text:0041935E
.text:0041935E loc_41935E:                             ; CODE XREF: sub_4192C0+E9↓j
.text:0041935E                 mov     [esp+1Ch+Val], 1 ; Size
.text:00419366                 lea     ebx, [ebp+1]
.text:00419369                 mov     [esp+1Ch+Str], ebx ; Count
.text:0041936C                 call    calloc
.text:00419371                 mov     [esp+1Ch+Str], eax ; Destination
.text:00419374                 mov     esi, eax
.text:00419376                 mov     [esp+1Ch+Count], ebx ; Count
.text:0041937A                 mov     [esp+1Ch+Val], edi ; Source
.text:0041937E                 call    strncpy
.text:00419383                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:00419388                 mov     byte ptr [ebp+esi+0], 0
.text:0041938D                 jmp     short loc_419322
.text:0041938F ; ---------------------------------------------------------------------------
.text:0041938F
.text:0041938F loc_41938F:                             ; CODE XREF: sub_4192C0+9B↑j
.text:0041938F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00419397                 inc     eax
.text:00419398                 mov     [esp+1Ch+Str], eax ; Str
.text:0041939B                 call    strchr
.text:004193A0                 test    eax, eax
.text:004193A2                 jz      short loc_41935D
.text:004193A4                 sub     eax, edi
.text:004193A6                 lea     ebp, [eax+1]
.text:004193A9                 jmp     short loc_41935E
.text:004193A9 ; ---------------------------------------------------------------------------
.text:004193AB                 align 10h
.text:004193B0
.text:004193B0 loc_4193B0:                             ; CODE XREF: sub_4192C0+36↑j
.text:004193B0                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:004193B4                 jnz     loc_4192FC
.text:004193BA                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:004193C1                 call    _strdup
.text:004193C6                 movsx   edx, byte ptr [edi]
.text:004193C9                 mov     esi, eax
.text:004193CB                 mov     [esp+1Ch+Str], edx ; C
.text:004193CE                 call    toupper
.text:004193D3                 mov     [esi], al
.text:004193D5                 jmp     loc_419322
.text:004193D5 sub_4192C0      endp
.text:004193D5
.text:004193D5 ; ---------------------------------------------------------------------------
.text:004193DA                 align 10h
.text:004193E0
.text:004193E0 ; =============== S U B R O U T I N E =======================================
.text:004193E0
.text:004193E0
.text:004193E0 sub_4193E0      proc near               ; CODE XREF: .text:00419534↓p
.text:004193E0                                         ; .text:00419618↓p
.text:004193E0
.text:004193E0 Str             = dword ptr -2Ch
.text:004193E0 Val             = dword ptr -28h
.text:004193E0 var_18          = dword ptr -18h
.text:004193E0 var_11          = byte ptr -11h
.text:004193E0 arg_0           = dword ptr  4
.text:004193E0
.text:004193E0                 push    ebp
.text:004193E1                 push    edi
.text:004193E2                 push    esi
.text:004193E3                 push    ebx
.text:004193E4                 sub     esp, 1Ch
.text:004193E7                 mov     edx, [esp+2Ch+arg_0]
.text:004193EB                 cmp     edx, ds:dword_41F2E0
.text:004193F1                 mov     [esp+2Ch+var_11], 0
.text:004193F6                 jz      loc_4194F4
.text:004193FC                 mov     ebx, ds:dword_41F2D0
.text:00419402                 test    ebx, ebx
.text:00419404                 jz      short loc_419472
.text:00419406
.text:00419406 loc_419406:                             ; CODE XREF: sub_4193E0+10F↓j
.text:00419406                 mov     ebx, [esp+2Ch+arg_0]
.text:0041940A                 xor     edi, edi
.text:0041940C                 xor     esi, esi
.text:0041940E                 mov     ebp, offset dword_41F2F8
.text:00419413                 lea     esi, [esi+0]
.text:00419419                 lea     edi, [edi+0]
.text:00419420
.text:00419420 loc_419420:                             ; CODE XREF: sub_4193E0+60↓j
.text:00419420                 mov     edx, [ebp+4]
.text:00419423                 mov     ecx, edi
.text:00419425                 mov     eax, [ebp+0]
.text:00419428                 shl     ecx, 4
.text:0041942B                 mov     [esp+2Ch+var_18], ecx
.text:0041942F                 mov     ecx, edx
.text:00419431                 xor     eax, ebx
.text:00419433                 xor     ecx, esi
.text:00419435                 or      ecx, eax
.text:00419437                 jz      short loc_419461
.text:00419439                 inc     edi
.text:0041943A                 add     ebp, 10h
.text:0041943D                 cmp     edi, 20h ; ' '
.text:00419440                 jle     short loc_419420
.text:00419442
.text:00419442 loc_419442:                             ; CODE XREF: sub_4193E0+90↓j
.text:00419442                 movzx   ebx, [esp+2Ch+var_11]
.text:00419447                 mov     eax, [esp+2Ch+arg_0]
.text:0041944B                 mov     byte_41E100, bl
.text:00419451                 mov     ds:dword_41F2E0, eax
.text:00419456                 movsx   eax, bl
.text:00419459
.text:00419459 loc_419459:                             ; CODE XREF: sub_4193E0+11B↓j
.text:00419459                 add     esp, 1Ch
.text:0041945C                 pop     ebx
.text:0041945D                 pop     esi
.text:0041945E                 pop     edi
.text:0041945F                 pop     ebp
.text:00419460                 retn
.text:00419461 ; ---------------------------------------------------------------------------
.text:00419461
.text:00419461 loc_419461:                             ; CODE XREF: sub_4193E0+57↑j
.text:00419461                 mov     edx, [esp+2Ch+var_18]
.text:00419465                 movzx   eax, byte ptr ds:dword_41F2F0[edx]
.text:0041946C                 mov     [esp+2Ch+var_11], al
.text:00419470                 jmp     short loc_419442
.text:00419472 ; ---------------------------------------------------------------------------
.text:00419472
.text:00419472 loc_419472:                             ; CODE XREF: sub_4193E0+24↑j
.text:00419472                 mov     [esp+2Ch+Str], 0
.text:00419479                 call    sub_41AAB0
.text:0041947E                 test    eax, eax
.text:00419480                 mov     ebx, eax
.text:00419482                 jz      short loc_4194DC
.text:00419484                 movzx   ecx, byte ptr [eax]
.text:00419487                 mov     esi, 0FFFFFFF0h
.text:0041948C                 test    cl, cl
.text:0041948E                 jz      short loc_4194DC
.text:00419490
.text:00419490 loc_419490:                             ; CODE XREF: sub_4193E0+FA↓j
.text:00419490                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:00419493                 movsx   ebp, cl
.text:00419496                 add     esi, 10h
.text:00419499                 mov     ds:dword_41F2F0[esi], ebp
.text:0041949F                 mov     edi, ebp
.text:004194A1                 sar     edi, 1Fh
.text:004194A4                 mov     ds:dword_41F2F4[esi], edi
.text:004194AA                 call    sub_40E550
.text:004194AF                 mov     ds:dword_41F2F8[esi], eax
.text:004194B5                 xor     ecx, ecx
.text:004194B7                 mov     [esp+2Ch+Str], ebx ; Str
.text:004194BA                 mov     ds:dword_41F2FC[esi], ecx
.text:004194C0                 mov     [esp+2Ch+Val], 0 ; Val
.text:004194C8                 call    strchr
.text:004194CD                 mov     ebx, eax
.text:004194CF                 inc     ebx
.text:004194D0                 jz      short loc_4194DC
.text:004194D2                 movzx   edx, byte ptr [eax+1]
.text:004194D6                 test    dl, dl
.text:004194D8                 mov     cl, dl
.text:004194DA                 jnz     short loc_419490
.text:004194DC
.text:004194DC loc_4194DC:                             ; CODE XREF: sub_4193E0+A2↑j
.text:004194DC                                         ; sub_4193E0+AE↑j ...
.text:004194DC                 mov     [esp+2Ch+Str], ebx ; Block
.text:004194DF                 mov     esi, 1
.text:004194E4                 mov     ds:dword_41F2D0, esi
.text:004194EA                 call    free
.text:004194EF                 jmp     loc_419406
.text:004194F4 ; ---------------------------------------------------------------------------
.text:004194F4
.text:004194F4 loc_4194F4:                             ; CODE XREF: sub_4193E0+16↑j
.text:004194F4                 movsx   eax, byte_41E100
.text:004194FB                 jmp     loc_419459
.text:004194FB sub_4193E0      endp
.text:004194FB
.text:004194FB ; ---------------------------------------------------------------------------
.text:00419500 dword_419500    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:00419500                                         ; DATA XREF: .text:00419523↓o
.text:00419500                                         ; .text:00419603↓o
.text:00419510 ; ---------------------------------------------------------------------------
.text:00419510                 sub     esp, 1Ch
.text:00419513                 mov     [esp+14h], esi
.text:00419517                 mov     esi, [esp+20h]
.text:0041951B                 mov     [esp+18h], edi
.text:0041951F                 mov     [esp+10h], ebx
.text:00419523                 mov     dword ptr [esp], offset dword_419500
.text:0041952A                 call    _strdup
.text:0041952F                 mov     [esp], esi
.text:00419532                 mov     edi, eax
.text:00419534                 call    sub_4193E0
.text:00419539                 mov     [edi], al
.text:0041953B                 test    al, al
.text:0041953D                 jz      short loc_419551
.text:0041953F                 mov     eax, edi
.text:00419541                 mov     ebx, [esp+10h]
.text:00419545                 mov     esi, [esp+14h]
.text:00419549                 mov     edi, [esp+18h]
.text:0041954D                 add     esp, 1Ch
.text:00419550                 retn
.text:00419551 ; ---------------------------------------------------------------------------
.text:00419551
.text:00419551 loc_419551:                             ; CODE XREF: .text:0041953D↑j
.text:00419551                 mov     [esp], edi
.text:00419554                 call    free
.text:00419559                 mov     dword ptr [esp+4], 0
.text:00419561                 mov     dword ptr [esp], 0
.text:00419568                 call    GetCurrentDirectoryA
.text:0041956D                 sub     esp, 8
.text:00419570                 lea     esi, [eax+1]
.text:00419573                 mov     [esp], esi
.text:00419576                 call    malloc
.text:0041957B                 mov     [esp+4], eax
.text:0041957F                 mov     edi, eax
.text:00419581                 mov     [esp], esi
.text:00419584                 call    GetCurrentDirectoryA
.text:00419589                 sub     esp, 8
.text:0041958C                 test    eax, eax
.text:0041958E                 jnz     short loc_4195B0
.text:00419590                 mov     dword ptr [esp+20h], 419504h
.text:00419598                 mov     ebx, [esp+10h]
.text:0041959C                 mov     esi, [esp+14h]
.text:004195A0                 mov     edi, [esp+18h]
.text:004195A4                 add     esp, 1Ch
.text:004195A7                 jmp     _strdup
.text:004195A7 ; ---------------------------------------------------------------------------
.text:004195AC                 align 10h
.text:004195B0
.text:004195B0 loc_4195B0:                             ; CODE XREF: .text:0041958E↑j
.text:004195B0                 mov     [esp+20h], edi
.text:004195B4                 mov     ebx, [esp+10h]
.text:004195B8                 mov     esi, [esp+14h]
.text:004195BC                 mov     edi, [esp+18h]
.text:004195C0                 add     esp, 1Ch
.text:004195C3                 jmp     sub_4192C0
.text:004195C3 ; ---------------------------------------------------------------------------
.text:004195C8                 align 10h
.text:004195D0                 sub     esp, 7Ch
.text:004195D3                 lea     edx, [esp+10h]
.text:004195D7                 mov     [esp+8], edx
.text:004195DB                 mov     edx, [esp+80h]
.text:004195E2                 mov     [esp+70h], ebx
.text:004195E6                 mov     [esp+74h], esi
.text:004195EA                 mov     [esp+4], edx
.text:004195EE                 mov     [esp+78h], edi
.text:004195F2                 mov     dword ptr [esp], 0
.text:004195F9                 call    sub_41ACC0
.text:004195FE                 xor     edx, edx
.text:00419600                 inc     eax
.text:00419601                 jz      short loc_419625
.text:00419603                 mov     dword ptr [esp], offset dword_419500
.text:0041960A                 mov     esi, [esp+20h]
.text:0041960E                 call    _strdup
.text:00419613                 mov     edi, eax
.text:00419615                 mov     [esp], esi
.text:00419618                 call    sub_4193E0
.text:0041961D                 mov     [edi], al
.text:0041961F                 test    al, al
.text:00419621                 mov     edx, edi
.text:00419623                 jz      short loc_419637
.text:00419625
.text:00419625 loc_419625:                             ; CODE XREF: .text:00419601↑j
.text:00419625                                         ; .text:00419684↓j
.text:00419625                 mov     ebx, [esp+70h]
.text:00419629                 mov     eax, edx
.text:0041962B                 mov     esi, [esp+74h]
.text:0041962F                 mov     edi, [esp+78h]
.text:00419633                 add     esp, 7Ch
.text:00419636                 retn
.text:00419637 ; ---------------------------------------------------------------------------
.text:00419637
.text:00419637 loc_419637:                             ; CODE XREF: .text:00419623↑j
.text:00419637                 mov     [esp], edi
.text:0041963A                 call    free
.text:0041963F                 mov     dword ptr [esp+4], 0
.text:00419647                 mov     dword ptr [esp], 0
.text:0041964E                 call    GetCurrentDirectoryA
.text:00419653                 sub     esp, 8
.text:00419656                 lea     esi, [eax+1]
.text:00419659                 mov     [esp], esi
.text:0041965C                 call    malloc
.text:00419661                 mov     [esp+4], eax
.text:00419665                 mov     edi, eax
.text:00419667                 mov     [esp], esi
.text:0041966A                 call    GetCurrentDirectoryA
.text:0041966F                 sub     esp, 8
.text:00419672                 test    eax, eax
.text:00419674                 jnz     short loc_419686
.text:00419676                 mov     dword ptr [esp], 419504h
.text:0041967D                 call    _strdup
.text:00419682
.text:00419682 loc_419682:                             ; CODE XREF: .text:0041968E↓j
.text:00419682                 mov     edx, eax
.text:00419684                 jmp     short loc_419625
.text:00419686 ; ---------------------------------------------------------------------------
.text:00419686
.text:00419686 loc_419686:                             ; CODE XREF: .text:00419674↑j
.text:00419686                 mov     [esp], edi
.text:00419689                 call    sub_4192C0
.text:0041968E                 jmp     short loc_419682
.text:00419690
.text:00419690 ; =============== S U B R O U T I N E =======================================
.text:00419690
.text:00419690
.text:00419690 ; int __cdecl sub_419690(LPCSTR)
.text:00419690 sub_419690      proc near               ; CODE XREF: sub_40DA00+12F↑p
.text:00419690
.text:00419690 String1         = dword ptr -1Ch
.text:00419690 String2         = dword ptr -18h
.text:00419690 var_C           = dword ptr -0Ch
.text:00419690 var_8           = dword ptr -8
.text:00419690 var_4           = dword ptr -4
.text:00419690 arg_0           = dword ptr  4
.text:00419690
.text:00419690                 sub     esp, 1Ch
.text:00419693                 mov     [esp+1Ch+var_4], edi
.text:00419697                 mov     edi, [esp+1Ch+arg_0]
.text:0041969B                 mov     [esp+1Ch+var_C], ebx
.text:0041969F                 mov     [esp+1Ch+var_8], esi
.text:004196A3                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:004196A6                 call    sub_419090
.text:004196AB                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:004196AE                 mov     esi, eax
.text:004196B0                 call    sub_4192C0
.text:004196B5                 mov     [esp+1Ch+String2], eax ; String2
.text:004196B9                 mov     ebx, eax
.text:004196BB                 mov     [esp+1Ch+String1], esi ; String1
.text:004196BE                 call    _stricmp
.text:004196C3                 test    eax, eax
.text:004196C5                 setz    dl
.text:004196C8                 test    esi, esi
.text:004196CA                 movzx   edi, dl
.text:004196CD                 jz      short loc_4196D7
.text:004196CF                 mov     [esp+1Ch+String1], esi ; Block
.text:004196D2                 call    free
.text:004196D7
.text:004196D7 loc_4196D7:                             ; CODE XREF: sub_419690+3D↑j
.text:004196D7                 test    ebx, ebx
.text:004196D9                 jz      short loc_4196E3
.text:004196DB                 mov     [esp+1Ch+String1], ebx ; Block
.text:004196DE                 call    free
.text:004196E3
.text:004196E3 loc_4196E3:                             ; CODE XREF: sub_419690+49↑j
.text:004196E3                 mov     eax, edi
.text:004196E5                 mov     ebx, [esp+1Ch+var_C]
.text:004196E9                 mov     esi, [esp+1Ch+var_8]
.text:004196ED                 mov     edi, [esp+1Ch+var_4]
.text:004196F1                 add     esp, 1Ch
.text:004196F4                 retn
.text:004196F4 sub_419690      endp
.text:004196F4
.text:004196F4 ; ---------------------------------------------------------------------------
.text:004196F5                 align 10h
.text:00419700 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:00419751↓o
.text:00419709 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:00419709                                         ; DATA XREF: .text:00419762↓o
.text:0041971D ; const CHAR FileName[]
.text:0041971D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:004198AC↓o
.text:0041971D                                         ; sub_419CE0+17C↓o
.text:00419728 ; ---------------------------------------------------------------------------
.text:00419728
.text:00419728 loc_419728:                             ; DATA XREF: .text:004199C2↓o
.text:00419728                 dec     esi
.text:00419729                 push    esp
.text:0041972A                 inc     esi
.text:0041972B                 push    ebx
.text:0041972C                 add     [esi+41h], al
.text:0041972F                 push    esp
.text:00419730                 xor     esi, [edx]
.text:00419732                 add     [esi+41h], al
.text:00419735                 push    esp
.text:00419736                 add     [ebx+44h], al
.text:00419739                 inc     esi
.text:0041973A                 push    ebx
.text:0041973B
.text:0041973B loc_41973B:                             ; CODE XREF: sub_419CE0+101↓p
.text:0041973B                 add     [ebp+55002674h], cl
.text:00419741                 push    edi
.text:00419742                 push    esi
.text:00419743                 push    ebx
.text:00419744                 sub     esp, 8BCh
.text:0041974A                 mov     ebp, [esp+8D0h]
.text:00419751                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:00419758                 call    LoadLibraryA
.text:0041975D                 sub     esp, 4
.text:00419760                 mov     edi, eax
.text:00419762                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0041976A                 mov     [esp], eax
.text:0041976D                 call    GetProcAddress
.text:00419772                 sub     esp, 8
.text:00419775                 mov     esi, eax
.text:00419777                 test    ebp, ebp
.text:00419779                 mov     dword ptr [esp+20h], 0
.text:00419781                 jz      loc_419CC1
.text:00419787                 mov     [esp], ebp
.text:0041978A                 call    sub_40D180
.text:0041978F                 mov     [esp], eax
.text:00419792                 mov     ebp, eax
.text:00419794                 call    strlen
.text:00419799                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0041979E                 mov     ebx, eax
.text:004197A0                 jz      short loc_4197BC
.text:004197A2                 mov     [esp], ebp
.text:004197A5                 lea     edx, [eax+1]
.text:004197A8                 mov     [esp+4], edx
.text:004197AC                 call    realloc
.text:004197B1                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004197B5                 mov     ebp, eax
.text:004197B7                 mov     byte ptr [ebx+eax+1], 0
.text:004197BC
.text:004197BC loc_4197BC:                             ; CODE XREF: .text:004197A0↑j
.text:004197BC                 mov     dword ptr [esp+1Ch], 400h
.text:004197C4                 lea     edx, [esp+0B0h]
.text:004197CB                 lea     ebx, [esp+5Ch]
.text:004197CF                 mov     [esp+18h], edx
.text:004197D3                 lea     ecx, [esp+58h]
.text:004197D7                 lea     edx, [esp+54h]
.text:004197DB                 mov     [esp+14h], ebx
.text:004197DF                 lea     eax, [esp+4B0h]
.text:004197E6                 mov     [esp+10h], ecx
.text:004197EA                 mov     [esp+0Ch], edx
.text:004197EE                 mov     dword ptr [esp+8], 400h
.text:004197F6                 mov     [esp+4], eax
.text:004197FA                 mov     [esp], ebp
.text:004197FD                 call    GetVolumeInformationA
.text:00419802                 sub     esp, 20h
.text:00419805                 test    eax, eax
.text:00419807                 jz      loc_419C9E
.text:0041980D                 test    esi, esi
.text:0041980F                 jz      short loc_419835
.text:00419811                 mov     [esp], ebp
.text:00419814                 lea     edx, [esp+48h]
.text:00419818                 lea     ebx, [esp+40h]
.text:0041981C                 mov     [esp+0Ch], edx
.text:00419820                 lea     ecx, [esp+38h]
.text:00419824                 mov     [esp+8], ebx
.text:00419828                 mov     [esp+4], ecx
.text:0041982C                 call    esi
.text:0041982E                 sub     esp, 10h
.text:00419831                 mov     [esp+20h], eax
.text:00419835
.text:00419835 loc_419835:                             ; CODE XREF: .text:0041980F↑j
.text:00419835                 test    edi, edi
.text:00419837                 jz      short loc_419844
.text:00419839                 mov     [esp], edi
.text:0041983C                 call    FreeLibrary
.text:00419841                 sub     esp, 4
.text:00419844
.text:00419844 loc_419844:                             ; CODE XREF: .text:00419837↑j
.text:00419844                 call    sub_418DB0
.text:00419849                 test    eax, eax
.text:0041984B                 lea     esi, [esp+28h]
.text:0041984F                 jz      loc_419C80
.text:00419855                 call    sub_418DB0
.text:0041985A                 test    eax, eax
.text:0041985C                 jz      short loc_41986C
.text:0041985E                 call    sub_418D00
.text:00419863                 cmp     eax, 0Bh
.text:00419866                 jle     loc_419C54
.text:0041986C
.text:0041986C loc_41986C:                             ; CODE XREF: .text:0041985C↑j
.text:0041986C                 cld
.text:0041986D                 xor     eax, eax
.text:0041986F                 lea     ebx, [esp+60h]
.text:00419873                 mov     ecx, 7
.text:00419878                 mov     edi, ebx
.text:0041987A                 rep stosd
.text:0041987C                 mov     dword ptr [esp+18h], 0
.text:00419884                 mov     dword ptr [esp+14h], 4000000h
.text:0041988C                 mov     dword ptr [esp+10h], 0
.text:00419894                 mov     dword ptr [esp+0Ch], 0
.text:0041989C                 mov     dword ptr [esp+8], 0
.text:004198A4                 mov     dword ptr [esp+4], 0
.text:004198AC                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:004198B3                 call    CreateFileA
.text:004198B8                 sub     esp, 1Ch
.text:004198BB                 mov     edi, eax
.text:004198BD                 cmp     eax, 0FFFFFFFFh
.text:004198C0                 jz      short loc_419940
.text:004198C2                 mov     [esp+10h], ebx
.text:004198C6                 lea     edx, [esp+80h]
.text:004198CD                 lea     ecx, [esp+24h]
.text:004198D1                 mov     [esp+70h], edx
.text:004198D5                 mov     [esp+18h], ecx
.text:004198D9                 mov     [esp+8], ebx
.text:004198DD                 mov     dword ptr [esp+6Ch], 7303h
.text:004198E5                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:004198ED                 mov     [esp+64h], ebp
.text:004198F1                 mov     dword ptr [esp+78h], 1
.text:004198F9                 mov     dword ptr [esp+1Ch], 0
.text:00419901                 mov     dword ptr [esp+14h], 1Ch
.text:00419909                 mov     dword ptr [esp+0Ch], 1Ch
.text:00419911                 mov     dword ptr [esp+4], 6
.text:00419919                 mov     [esp], eax
.text:0041991C                 call    DeviceIoControl
.text:00419921                 sub     esp, 20h
.text:00419924                 mov     ebx, eax
.text:00419926                 mov     [esp], edi
.text:00419929                 call    CloseHandle
.text:0041992E                 sub     esp, 4
.text:00419931                 test    ebx, ebx
.text:00419933                 jz      short loc_419940
.text:00419935                 test    byte ptr [esp+78h], 1
.text:0041993A                 jz      loc_419C20
.text:00419940
.text:00419940 loc_419940:                             ; CODE XREF: .text:004198C0↑j
.text:00419940                                         ; .text:00419933↑j
.text:00419940                 call    sub_40D830
.text:00419945                 mov     edi, eax
.text:00419947                 call    _errno
.text:0041994C                 mov     [eax], edi
.text:0041994E                 xor     eax, eax
.text:00419950
.text:00419950 loc_419950:                             ; CODE XREF: .text:00419C4F↓j
.text:00419950                                         ; .text:00419C7B↓j
.text:00419950                 test    eax, eax
.text:00419952                 jnz     short loc_419974
.text:00419954                 mov     dword ptr [esp+34h], 1
.text:0041995C                 mov     dword ptr [esp+30h], 200h
.text:00419964                 mov     dword ptr [esp+2Ch], 0
.text:0041996C                 mov     dword ptr [esp+28h], 0
.text:00419974
.text:00419974 loc_419974:                             ; CODE XREF: .text:00419952↑j
.text:00419974                 mov     edx, [esp+30h]
.text:00419978                 mov     edi, [esp+34h]
.text:0041997C                 mov     ecx, [esp+20h]
.text:00419980                 imul    edi, edx
.text:00419983                 test    ecx, ecx
.text:00419985                 jnz     short loc_4199AD
.text:00419987                 mov     eax, [esp+28h]
.text:0041998B                 mul     edi
.text:0041998D                 mov     esi, eax
.text:0041998F                 mov     eax, [esp+2Ch]
.text:00419993                 mov     [esp+44h], edx
.text:00419997                 mov     [esp+40h], esi
.text:0041999B                 mul     edi
.text:0041999D                 mov     [esp+48h], eax
.text:004199A1                 mov     [esp+4Ch], edx
.text:004199A5                 mov     [esp+38h], eax
.text:004199A9                 mov     [esp+3Ch], edx
.text:004199AD
.text:004199AD loc_4199AD:                             ; CODE XREF: .text:00419985↑j
.text:004199AD                 mov     ebx, [esp+5Ch]
.text:004199B1                 lea     edx, [esp+0B0h]
.text:004199B8                 mov     ecx, [esp+8D4h]
.text:004199BF                 mov     [ecx+48h], ebx
.text:004199C2                 mov     dword ptr [esp+4], offset loc_419728
.text:004199CA                 mov     [esp], edx
.text:004199CD                 call    _stricmp
.text:004199D2                 test    eax, eax
.text:004199D4                 jnz     loc_419B90
.text:004199DA                 mov     esi, [esp+8D4h]
.text:004199E1                 mov     dword ptr [esi], 5346544Eh
.text:004199E7
.text:004199E7 loc_4199E7:                             ; CODE XREF: .text:00419BB8↓j
.text:004199E7                                         ; .text:00419BE5↓j ...
.text:004199E7                 mov     ebx, [esp+30h]
.text:004199EB                 mov     esi, [esp+8D4h]
.text:004199F2                 mov     [esi+4], ebx
.text:004199F5                 mov     [esi+8], ebx
.text:004199F8                 mov     ebx, [esi+8]
.text:004199FB                 mov     [esi+0Ch], edi
.text:004199FE                 mov     ecx, [esp+44h]
.text:00419A02                 xor     esi, esi
.text:00419A04                 mov     [esp+8], ebx
.text:00419A08                 mov     edx, [esp+40h]
.text:00419A0C                 mov     [esp+0Ch], esi
.text:00419A10                 mov     [esp+4], ecx
.text:00419A14                 mov     [esp], edx
.text:00419A17                 call    sub_41D180
.text:00419A1C                 mov     ecx, [esp+8D4h]
.text:00419A23                 mov     [ecx+10h], eax
.text:00419A26                 mov     [ecx+14h], edx
.text:00419A29                 mov     ecx, [esp+4Ch]
.text:00419A2D                 mov     [esp+8], ebx
.text:00419A31                 mov     edx, [esp+48h]
.text:00419A35                 mov     [esp+0Ch], esi
.text:00419A39                 mov     [esp+4], ecx
.text:00419A3D                 mov     [esp], edx
.text:00419A40                 call    sub_41D180
.text:00419A45                 mov     ecx, [esp+8D4h]
.text:00419A4C                 mov     [ecx+18h], eax
.text:00419A4F                 mov     [ecx+1Ch], edx
.text:00419A52                 mov     ecx, [esp+38h]
.text:00419A56                 mov     [esp+8], ebx
.text:00419A5A                 mov     ebx, [esp+3Ch]
.text:00419A5E                 mov     [esp+0Ch], esi
.text:00419A62                 mov     [esp], ecx
.text:00419A65                 mov     [esp+4], ebx
.text:00419A69                 call    sub_41D180
.text:00419A6E                 mov     esi, [esp+8D4h]
.text:00419A75                 mov     [esi+20h], eax
.text:00419A78                 mov     [esi+24h], edx
.text:00419A7B                 mov     ecx, [esp+44h]
.text:00419A7F                 mov     esi, edi
.text:00419A81                 mov     [esp+8], esi
.text:00419A85                 mov     edx, [esp+40h]
.text:00419A89                 xor     edi, edi
.text:00419A8B                 mov     [esp+0Ch], edi
.text:00419A8F                 mov     [esp+4], ecx
.text:00419A93                 mov     [esp], edx
.text:00419A96                 call    sub_41D180
.text:00419A9B                 mov     ebx, [esp+8D4h]
.text:00419AA2                 mov     [ebx+28h], eax
.text:00419AA5                 mov     [ebx+2Ch], edx
.text:00419AA8                 mov     ecx, [esp+4Ch]
.text:00419AAC                 mov     [esp+8], esi
.text:00419AB0                 mov     edx, [esp+48h]
.text:00419AB4                 mov     [esp+0Ch], edi
.text:00419AB8                 mov     [esp+4], ecx
.text:00419ABC                 mov     [esp], edx
.text:00419ABF                 call    sub_41D180
.text:00419AC4                 mov     ebx, [esp+8D4h]
.text:00419ACB                 mov     [ebx+30h], eax
.text:00419ACE                 mov     [ebx+34h], edx
.text:00419AD1                 mov     ecx, [esp+3Ch]
.text:00419AD5                 mov     [esp+8], esi
.text:00419AD9                 mov     edx, [esp+38h]
.text:00419ADD                 mov     [esp+0Ch], edi
.text:00419AE1                 mov     [esp+4], ecx
.text:00419AE5                 mov     [esp], edx
.text:00419AE8                 call    sub_41D180
.text:00419AED                 mov     edx, [esp+8D4h]
.text:00419AF4                 lea     ecx, [esp+0B0h]
.text:00419AFB                 mov     [edx+38h], eax
.text:00419AFE                 mov     esi, [esp+58h]
.text:00419B02                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00419B09                 mov     [edx+110h], esi
.text:00419B0F                 mov     esi, edx
.text:00419B11                 add     esi, 4Ch ; 'L'
.text:00419B14                 movzx   ebx, word ptr [esp+56h]
.text:00419B19                 movzx   edi, word ptr [esp+54h]
.text:00419B1E                 mov     [edx+3Ch], ebx
.text:00419B21                 lea     ebx, [esp+4B0h]
.text:00419B28                 mov     [edx+40h], edi
.text:00419B2B                 mov     [esp+4], ecx
.text:00419B2F                 mov     dword ptr [esp+8], 10h
.text:00419B37                 mov     [esp], esi
.text:00419B3A                 call    strncpy
.text:00419B3F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00419B47                 mov     edi, [esp+8D4h]
.text:00419B4E                 mov     [esp+4], ebx
.text:00419B52                 add     edi, 5Ch ; '\'
.text:00419B55                 mov     [esp], edi
.text:00419B58                 call    strncpy
.text:00419B5D                 mov     [esp+4], ebp
.text:00419B61                 mov     ebp, [esp+8D4h]
.text:00419B68                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00419B70                 add     ebp, 0B6h ; '¶'
.text:00419B76                 mov     [esp], ebp
.text:00419B79                 call    strncpy
.text:00419B7E                 xor     eax, eax
.text:00419B80
.text:00419B80 loc_419B80:                             ; CODE XREF: .text:00419CBC↓j
.text:00419B80                 add     esp, 8BCh
.text:00419B86                 pop     ebx
.text:00419B87                 pop     esi
.text:00419B88                 pop     edi
.text:00419B89                 pop     ebp
.text:00419B8A                 retn
.text:00419B8A ; ---------------------------------------------------------------------------
.text:00419B8B                 align 10h
.text:00419B90
.text:00419B90 loc_419B90:                             ; CODE XREF: .text:004199D4↑j
.text:00419B90                 mov     dword ptr [esp+4], 41972Dh
.text:00419B98                 lea     eax, [esp+0B0h]
.text:00419B9F                 mov     [esp], eax
.text:00419BA2                 call    _stricmp
.text:00419BA7                 test    eax, eax
.text:00419BA9                 jnz     short loc_419BBD
.text:00419BAB                 mov     edx, [esp+8D4h]
.text:00419BB2                 mov     dword ptr [edx], 4008h
.text:00419BB8                 jmp     loc_4199E7
.text:00419BBD ; ---------------------------------------------------------------------------
.text:00419BBD
.text:00419BBD loc_419BBD:                             ; CODE XREF: .text:00419BA9↑j
.text:00419BBD                 mov     dword ptr [esp+4], 419733h
.text:00419BC5                 lea     ecx, [esp+0B0h]
.text:00419BCC                 mov     [esp], ecx
.text:00419BCF                 call    _stricmp
.text:00419BD4                 test    eax, eax
.text:00419BD6                 jnz     short loc_419BEA
.text:00419BD8                 mov     ebx, [esp+8D4h]
.text:00419BDF                 mov     dword ptr [ebx], 4006h
.text:00419BE5                 jmp     loc_4199E7
.text:00419BEA ; ---------------------------------------------------------------------------
.text:00419BEA
.text:00419BEA loc_419BEA:                             ; CODE XREF: .text:00419BD6↑j
.text:00419BEA                 mov     dword ptr [esp+4], 419737h
.text:00419BF2                 lea     eax, [esp+0B0h]
.text:00419BF9                 mov     [esp], eax
.text:00419BFC                 call    _stricmp
.text:00419C01                 test    eax, eax
.text:00419C03                 mov     esi, [esp+8D4h]
.text:00419C0A                 setnz   cl
.text:00419C0D                 movzx   edx, cl
.text:00419C10                 dec     edx
.text:00419C11                 and     edx, 4000h
.text:00419C17                 mov     [esi], edx
.text:00419C19                 jmp     loc_4199E7
.text:00419C19 ; ---------------------------------------------------------------------------
.text:00419C1E                 align 10h
.text:00419C20
.text:00419C20 loc_419C20:                             ; CODE XREF: .text:0041993A↑j
.text:00419C20                 mov     edi, [esp+84h]
.text:00419C27                 mov     eax, 1
.text:00419C2C                 mov     edx, [esp+88h]
.text:00419C33                 mov     ecx, [esp+8Ch]
.text:00419C3A                 mov     ebx, [esp+90h]
.text:00419C41                 mov     [esp+34h], edi
.text:00419C45                 mov     [esp+30h], edx
.text:00419C49                 mov     [esp+2Ch], ecx
.text:00419C4D                 mov     [esi], ebx
.text:00419C4F                 jmp     loc_419950
.text:00419C54 ; ---------------------------------------------------------------------------
.text:00419C54
.text:00419C54 loc_419C54:                             ; CODE XREF: .text:00419866↑j
.text:00419C54                 mov     [esp+10h], esi
.text:00419C58                 lea     eax, [esp+2Ch]
.text:00419C5C                 lea     esi, [esp+30h]
.text:00419C60                 mov     [esp+0Ch], eax
.text:00419C64                 lea     edi, [esp+34h]
.text:00419C68                 mov     [esp+8], esi
.text:00419C6C                 mov     [esp+4], edi
.text:00419C70
.text:00419C70 loc_419C70:                             ; CODE XREF: .text:00419C9C↓j
.text:00419C70                 mov     [esp], ebp
.text:00419C73                 call    GetDiskFreeSpaceA
.text:00419C78                 sub     esp, 14h
.text:00419C7B                 jmp     loc_419950
.text:00419C80 ; ---------------------------------------------------------------------------
.text:00419C80
.text:00419C80 loc_419C80:                             ; CODE XREF: .text:0041984F↑j
.text:00419C80                 mov     [esp+10h], esi
.text:00419C84                 lea     ebx, [esp+2Ch]
.text:00419C88                 lea     eax, [esp+30h]
.text:00419C8C                 mov     [esp+0Ch], ebx
.text:00419C90                 lea     esi, [esp+34h]
.text:00419C94                 mov     [esp+8], eax
.text:00419C98                 mov     [esp+4], esi
.text:00419C9C                 jmp     short loc_419C70
.text:00419C9E ; ---------------------------------------------------------------------------
.text:00419C9E
.text:00419C9E loc_419C9E:                             ; CODE XREF: .text:00419807↑j
.text:00419C9E                 mov     [esp], edi
.text:00419CA1                 call    FreeLibrary
.text:00419CA6                 sub     esp, 4
.text:00419CA9                 call    sub_40D830
.text:00419CAE                 mov     esi, eax
.text:00419CB0                 call    _errno
.text:00419CB5                 mov     [eax], esi
.text:00419CB7
.text:00419CB7 loc_419CB7:                             ; CODE XREF: .text:00419CD7↓j
.text:00419CB7                 mov     eax, 0FFFFFFFFh
.text:00419CBC                 jmp     loc_419B80
.text:00419CC1 ; ---------------------------------------------------------------------------
.text:00419CC1
.text:00419CC1 loc_419CC1:                             ; CODE XREF: .text:00419781↑j
.text:00419CC1                 mov     [esp], edi
.text:00419CC4                 call    FreeLibrary
.text:00419CC9                 sub     esp, 4
.text:00419CCC                 call    _errno
.text:00419CD1                 mov     dword ptr [eax], 2
.text:00419CD7                 jmp     short loc_419CB7
.text:00419CD7 ; ---------------------------------------------------------------------------
.text:00419CD9                 align 10h
.text:00419CE0
.text:00419CE0 ; =============== S U B R O U T I N E =======================================
.text:00419CE0
.text:00419CE0
.text:00419CE0 ; int __cdecl sub_419CE0(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00419CE0 sub_419CE0      proc near               ; CODE XREF: sub_40E050+2C7↑p
.text:00419CE0                                         ; .text:0040E68A↑p
.text:00419CE0
.text:00419CE0 lpFileName      = dword ptr -9Ch
.text:00419CE0 dwDesiredAccess = dword ptr -98h
.text:00419CE0 dwShareMode     = dword ptr -94h
.text:00419CE0 lpSecurityAttributes= dword ptr -90h
.text:00419CE0 dwCreationDisposition= dword ptr -8Ch
.text:00419CE0 dwFlagsAndAttributes= dword ptr -88h
.text:00419CE0 hTemplateFile   = dword ptr -84h
.text:00419CE0 lpOverlapped    = dword ptr -80h
.text:00419CE0 BytesReturned   = dword ptr -70h
.text:00419CE0 InBuffer        = byte ptr -6Ch
.text:00419CE0 var_68          = dword ptr -68h
.text:00419CE0 var_64          = dword ptr -64h
.text:00419CE0 var_60          = dword ptr -60h
.text:00419CE0 var_5C          = dword ptr -5Ch
.text:00419CE0 var_54          = dword ptr -54h
.text:00419CE0 var_4C          = byte ptr -4Ch
.text:00419CE0 var_48          = dword ptr -48h
.text:00419CE0 var_44          = dword ptr -44h
.text:00419CE0 var_40          = dword ptr -40h
.text:00419CE0 var_3C          = dword ptr -3Ch
.text:00419CE0 lpRootPathName  = dword ptr -2Ch
.text:00419CE0 lpSectorsPerCluster= dword ptr -28h
.text:00419CE0 lpBytesPerSector= dword ptr -24h
.text:00419CE0 lpNumberOfFreeClusters= dword ptr -20h
.text:00419CE0 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00419CE0 var_18          = dword ptr -18h
.text:00419CE0 var_14          = dword ptr -14h
.text:00419CE0 var_10          = dword ptr -10h
.text:00419CE0 var_C           = dword ptr -0Ch
.text:00419CE0 var_8           = dword ptr -8
.text:00419CE0 var_4           = dword ptr -4
.text:00419CE0 arg_0           = dword ptr  4
.text:00419CE0 arg_4           = dword ptr  8
.text:00419CE0 arg_8           = dword ptr  0Ch
.text:00419CE0 arg_C           = dword ptr  10h
.text:00419CE0 arg_10          = dword ptr  14h
.text:00419CE0
.text:00419CE0                 sub     esp, 2Ch
.text:00419CE3                 mov     edx, [esp+2Ch+arg_0]
.text:00419CE7                 mov     [esp+2Ch+var_10], ebx
.text:00419CEB                 mov     ebx, [esp+2Ch+arg_10]
.text:00419CEF                 mov     [esp+2Ch+var_C], esi
.text:00419CF3                 mov     esi, [esp+2Ch+arg_C]
.text:00419CF7                 mov     [esp+2Ch+var_8], edi
.text:00419CFB                 mov     edi, [esp+2Ch+arg_8]
.text:00419CFF                 mov     [esp+2Ch+var_4], ebp
.text:00419D03                 mov     ebp, [esp+2Ch+arg_4]
.text:00419D07                 mov     [esp+2Ch+var_14], edx
.text:00419D0B                 call    sub_418DB0
.text:00419D10                 test    eax, eax
.text:00419D12                 jz      short loc_419D44
.text:00419D14                 mov     [esp+2Ch+arg_10], ebx
.text:00419D18                 mov     edx, [esp+2Ch+var_14]
.text:00419D1C                 mov     ebx, [esp+2Ch+var_10]
.text:00419D20                 mov     [esp+2Ch+arg_C], esi
.text:00419D24                 mov     esi, [esp+2Ch+var_C]
.text:00419D28                 mov     [esp+2Ch+arg_8], edi
.text:00419D2C                 mov     edi, [esp+2Ch+var_8]
.text:00419D30                 mov     [esp+2Ch+arg_4], ebp
.text:00419D34                 mov     ebp, [esp+2Ch+var_4]
.text:00419D38                 mov     [esp+2Ch+arg_0], edx
.text:00419D3C                 add     esp, 2Ch
.text:00419D3F                 jmp     loc_419DF0
.text:00419D44 ; ---------------------------------------------------------------------------
.text:00419D44
.text:00419D44 loc_419D44:                             ; CODE XREF: sub_419CE0+32↑j
.text:00419D44                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00419D48                 mov     ecx, [esp+2Ch+var_14]
.text:00419D4C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00419D50                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00419D54                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00419D58                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:00419D5B                 call    GetDiskFreeSpaceA
.text:00419D60                 sub     esp, 14h
.text:00419D63                 mov     ebx, [esp+2Ch+var_10]
.text:00419D67                 mov     esi, [esp+2Ch+var_C]
.text:00419D6B                 mov     edi, [esp+2Ch+var_8]
.text:00419D6F                 mov     ebp, [esp+2Ch+var_4]
.text:00419D73                 add     esp, 2Ch
.text:00419D76                 retn
.text:00419D76 ; ---------------------------------------------------------------------------
.text:00419D77                 align 10h
.text:00419D80
.text:00419D80 loc_419D80:                             ; CODE XREF: .text:00419FED↓p
.text:00419D80                 sub     esp, 1Ch
.text:00419D83                 mov     [esp+1Ch+var_4], esi
.text:00419D87                 mov     esi, [esp+1Ch+arg_0]
.text:00419D8B                 mov     [esp+1Ch+var_8], ebx
.text:00419D8F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00419D92                 call    sub_4192C0
.text:00419D97                 test    eax, eax
.text:00419D99                 mov     ebx, eax
.text:00419D9B                 jz      short loc_419DB0
.text:00419D9D                 cmp     byte ptr [eax], 0
.text:00419DA0                 jz      short loc_419DB0
.text:00419DA2                 test    esi, esi
.text:00419DA4                 jz      short loc_419DB0
.text:00419DA6                 cmp     byte ptr [esi], 0
.text:00419DA9                 jnz     short loc_419DD6
.text:00419DAB                 nop
.text:00419DAC                 lea     esi, [esi+0]
.text:00419DB0
.text:00419DB0 loc_419DB0:                             ; CODE XREF: sub_419CE0+BB↑j
.text:00419DB0                                         ; sub_419CE0+C0↑j ...
.text:00419DB0                 call    _errno
.text:00419DB5                 mov     dword ptr [eax], 2
.text:00419DBB                 mov     esi, 0FFFFFFFFh
.text:00419DC0
.text:00419DC0 loc_419DC0:                             ; CODE XREF: sub_419CE0+108↓j
.text:00419DC0                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00419DC3                 call    free
.text:00419DC8                 mov     eax, esi
.text:00419DCA                 mov     ebx, [esp+1Ch+var_8]
.text:00419DCE                 mov     esi, [esp+1Ch+var_4]
.text:00419DD2                 add     esp, 1Ch
.text:00419DD5                 retn
.text:00419DD6 ; ---------------------------------------------------------------------------
.text:00419DD6
.text:00419DD6 loc_419DD6:                             ; CODE XREF: sub_419CE0+C9↑j
.text:00419DD6                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00419DD9                 mov     edx, [esp+1Ch+arg_4]
.text:00419DDD                 mov     [esp+1Ch+var_18], edx
.text:00419DE1                 call    near ptr loc_41973B+5
.text:00419DE6                 mov     esi, eax
.text:00419DE8                 jmp     short loc_419DC0
.text:00419DE8 ; ---------------------------------------------------------------------------
.text:00419DEA                 align 10h
.text:00419DF0
.text:00419DF0 loc_419DF0:                             ; CODE XREF: sub_419CE0+5F↑j
.text:00419DF0                 push    ebp
.text:00419DF1                 push    edi
.text:00419DF2                 push    esi
.text:00419DF3                 push    ebx
.text:00419DF4                 sub     esp, 8Ch
.text:00419DFA                 mov     ebp, [esp+9Ch+arg_0]
.text:00419E01                 call    sub_418DB0
.text:00419E06                 test    eax, eax
.text:00419E08                 jz      short loc_419E18
.text:00419E0A                 call    sub_418D00
.text:00419E0F                 cmp     eax, 0Bh
.text:00419E12                 jle     loc_419F40
.text:00419E18
.text:00419E18 loc_419E18:                             ; CODE XREF: sub_419CE0+128↑j
.text:00419E18                 cld
.text:00419E19                 xor     eax, eax
.text:00419E1B                 lea     ebx, [esp+9Ch+InBuffer]
.text:00419E1F                 mov     ecx, 7
.text:00419E24                 mov     edi, ebx
.text:00419E26                 lea     esi, [esp+9Ch+var_4C]
.text:00419E2A                 rep stosd
.text:00419E2C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00419E34                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:00419E3C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00419E44                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00419E4C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00419E54                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00419E5C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00419E63                 call    CreateFileA
.text:00419E68                 sub     esp, 1Ch
.text:00419E6B                 mov     edi, eax
.text:00419E6D                 cmp     eax, 0FFFFFFFFh
.text:00419E70                 jz      short loc_419EE5
.text:00419E72                 mov     [esp+9Ch+var_68], ebp
.text:00419E76                 lea     ebp, [esp+9Ch+BytesReturned]
.text:00419E7A                 mov     [esp+9Ch+var_5C], esi
.text:00419E7E                 mov     [esp+9Ch+var_60], 7303h
.text:00419E86                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:00419E8E                 mov     [esp+9Ch+var_54], 1
.text:00419E96                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:00419E9E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:00419EA2                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:00419EAA                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:00419EAE                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:00419EB6                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:00419EBA                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00419EC2                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00419EC5                 call    DeviceIoControl
.text:00419ECA                 sub     esp, 20h
.text:00419ECD                 mov     esi, eax
.text:00419ECF                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00419ED2                 call    CloseHandle
.text:00419ED7                 sub     esp, 4
.text:00419EDA                 test    esi, esi
.text:00419EDC                 jz      short loc_419EE5
.text:00419EDE                 test    byte ptr [esp+9Ch+var_54], 1
.text:00419EE3                 jz      short loc_419F00
.text:00419EE5
.text:00419EE5 loc_419EE5:                             ; CODE XREF: sub_419CE0+190↑j
.text:00419EE5                                         ; sub_419CE0+1FC↑j
.text:00419EE5                 call    sub_40D830
.text:00419EEA                 mov     edi, eax
.text:00419EEC                 call    _errno
.text:00419EF1                 mov     [eax], edi
.text:00419EF3                 xor     eax, eax
.text:00419EF5
.text:00419EF5 loc_419EF5:                             ; CODE XREF: sub_419CE0+25A↓j
.text:00419EF5                                         ; sub_419CE0+297↓j
.text:00419EF5                 add     esp, 8Ch
.text:00419EFB                 pop     ebx
.text:00419EFC                 pop     esi
.text:00419EFD                 pop     edi
.text:00419EFE                 pop     ebp
.text:00419EFF                 retn
.text:00419F00 ; ---------------------------------------------------------------------------
.text:00419F00
.text:00419F00 loc_419F00:                             ; CODE XREF: sub_419CE0+203↑j
.text:00419F00                 mov     edx, [esp+9Ch+var_48]
.text:00419F04                 mov     eax, 1
.text:00419F09                 mov     ebx, [esp+9Ch+arg_4]
.text:00419F10                 mov     ebp, [esp+9Ch+arg_8]
.text:00419F17                 mov     ecx, [esp+9Ch+arg_C]
.text:00419F1E                 mov     [ebx], edx
.text:00419F20                 mov     edi, [esp+9Ch+var_44]
.text:00419F24                 mov     ebx, [esp+9Ch+arg_10]
.text:00419F2B                 mov     [ebp+0], edi
.text:00419F2E                 mov     esi, [esp+9Ch+var_40]
.text:00419F32                 mov     [ecx], esi
.text:00419F34                 mov     edx, [esp+9Ch+var_3C]
.text:00419F38                 mov     [ebx], edx
.text:00419F3A                 jmp     short loc_419EF5
.text:00419F3A ; ---------------------------------------------------------------------------
.text:00419F3C                 align 10h
.text:00419F40
.text:00419F40 loc_419F40:                             ; CODE XREF: sub_419CE0+132↑j
.text:00419F40                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00419F43                 mov     eax, [esp+9Ch+arg_C]
.text:00419F4A                 mov     ecx, [esp+9Ch+arg_10]
.text:00419F51                 mov     edx, [esp+9Ch+arg_8]
.text:00419F58                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:00419F5C                 mov     eax, [esp+9Ch+arg_4]
.text:00419F63                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00419F67                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:00419F6B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:00419F6F                 call    GetDiskFreeSpaceA
.text:00419F74                 sub     esp, 14h
.text:00419F77                 jmp     loc_419EF5
.text:00419F77 sub_419CE0      endp ; sp-analysis failed
.text:00419F77
.text:00419F77 ; ---------------------------------------------------------------------------
.text:00419F7C                 align 10h
.text:00419F80 aNotset         db 'notset',0           ; DATA XREF: .data:off_41E110↓o
.text:00419F80                                         ; .data:off_41E114↓o
.text:00419F87 ; ---------------------------------------------------------------------------
.text:00419F87
.text:00419F87 loc_419F87:                             ; DATA XREF: .text:loc_41A025↓o
.text:00419F87                 jb      short loc_41A000
.text:00419F89                 add     [eax], ah
.text:00419F8B                 or      [eax], eax
.text:00419F8D
.text:00419F8D loc_419F8D:                             ; DATA XREF: .text:0041A078↓o
.text:00419F8D                                         ; .text:0041A0DE↓o ...
.text:00419F8D                 add     [eax], ah
.text:00419F8F                 and     eax, 64252064h
.text:00419F94                 and     [eax], al
.text:00419F96                 lea     esi, [esi+0]
.text:00419F99                 lea     edi, [edi+0]
.text:00419FA0                 push    ebp
.text:00419FA1                 push    edi
.text:00419FA2                 push    esi
.text:00419FA3                 push    ebx
.text:00419FA4                 sub     esp, 14Ch
.text:00419FAA                 mov     edx, off_41E110 ; "notset"
.text:00419FB0                 mov     edi, [esp+164h]
.text:00419FB7                 mov     ebp, [esp+168h]
.text:00419FBE                 mov     [esp+4], edx
.text:00419FC2                 mov     edx, off_41E114 ; "notset"
.text:00419FC8                 mov     [esp], edx
.text:00419FCB                 call    strcmp
.text:00419FD0                 test    eax, eax
.text:00419FD2                 jz      loc_41A3C0
.text:00419FD8
.text:00419FD8 loc_419FD8:                             ; CODE XREF: .text:0041A40C↓j
.text:00419FD8                 lea     ebx, [esp+20h]
.text:00419FDC                 lea     esi, [esi+0]
.text:00419FE0
.text:00419FE0 loc_419FE0:                             ; CODE XREF: .text:0041A016↓j
.text:00419FE0                 mov     [esp+4], ebx
.text:00419FE4                 mov     ecx, off_41E114 ; "notset"
.text:00419FEA                 mov     [esp], ecx
.text:00419FED                 call    loc_419D80
.text:00419FF2                 test    eax, eax
.text:00419FF4                 jns     short loc_41A025
.text:00419FF6                 mov     eax, off_41E114 ; "notset"
.text:00419FFB                 cmp     byte ptr [eax], 0
.text:00419FFE                 jz      short loc_41A018
.text:0041A000
.text:0041A000 loc_41A000:                             ; CODE XREF: .text:loc_419F87↑j
.text:0041A000                 mov     dword ptr [esp+4], 0
.text:0041A008                 mov     [esp], eax
.text:0041A00B                 call    strchr
.text:0041A010                 inc     eax
.text:0041A011                 mov     off_41E114, eax ; "notset"
.text:0041A016                 jmp     short loc_419FE0
.text:0041A018 ; ---------------------------------------------------------------------------
.text:0041A018
.text:0041A018 loc_41A018:                             ; CODE XREF: .text:00419FFE↑j
.text:0041A018                 xor     eax, eax
.text:0041A01A
.text:0041A01A loc_41A01A:                             ; CODE XREF: .text:0041A1DC↓j
.text:0041A01A                 add     esp, 14Ch
.text:0041A020                 pop     ebx
.text:0041A021                 pop     esi
.text:0041A022                 pop     edi
.text:0041A023                 pop     ebp
.text:0041A024                 retn
.text:0041A025 ; ---------------------------------------------------------------------------
.text:0041A025
.text:0041A025 loc_41A025:                             ; CODE XREF: .text:00419FF4↑j
.text:0041A025                 mov     dword ptr [edi+0Ch], offset loc_419F87
.text:0041A02C                 lea     ecx, [esp+0D6h]
.text:0041A033                 lea     edx, [esp+6Ch]
.text:0041A037                 mov     [edi+4], ecx
.text:0041A03A                 lea     ebx, [esp+7Ch]
.text:0041A03E                 mov     [edi+8], edx
.text:0041A041                 mov     [edi], ebx
.text:0041A043                 mov     [esp], ebp
.text:0041A046                 mov     [esp+4], edi
.text:0041A04A                 call    ___addmntentstr
.text:0041A04F                 mov     [esp], ebp
.text:0041A052                 mov     dword ptr [esp+4], 419F8Ah
.text:0041A05A                 call    strspn
.text:0041A05F                 mov     dword ptr [esp+4], 0
.text:0041A067                 mov     ebx, off_41E114 ; "notset"
.text:0041A06D                 lea     esi, [eax+ebp]
.text:0041A070                 mov     [esp+1Ch], esi
.text:0041A074                 lea     ebp, [esp+1Ch]
.text:0041A078                 mov     esi, offset loc_419F8D
.text:0041A07D                 mov     [esp], ebx
.text:0041A080                 call    strchr
.text:0041A085                 mov     dword ptr [esp+4], 419F8Ah
.text:0041A08D                 inc     eax
.text:0041A08E                 mov     off_41E114, eax ; "notset"
.text:0041A093                 mov     [esp], ebp
.text:0041A096                 call    sub_41ADE0
.text:0041A09B                 test    eax, eax
.text:0041A09D                 mov     ebx, eax
.text:0041A09F                 jz      short loc_41A0C8
.text:0041A0A1                 mov     edx, eax
.text:0041A0A3                 mov     ecx, eax
.text:0041A0A5                 lea     esi, [esi+0]
.text:0041A0A9                 lea     edi, [edi+0]
.text:0041A0B0
.text:0041A0B0 loc_41A0B0:                             ; CODE XREF: .text:0041A0C6↓j
.text:0041A0B0                 movzx   eax, byte ptr [edx]
.text:0041A0B3                 cmp     al, 5Ch ; '\'
.text:0041A0B5                 jz      loc_41A364
.text:0041A0BB
.text:0041A0BB loc_41A0BB:                             ; CODE XREF: .text:0041A36C↓j
.text:0041A0BB                                         ; .text:0041A37A↓j ...
.text:0041A0BB                 mov     [ecx], al
.text:0041A0BD
.text:0041A0BD loc_41A0BD:                             ; CODE XREF: .text:0041A38E↓j
.text:0041A0BD                 inc     ecx
.text:0041A0BE
.text:0041A0BE loc_41A0BE:                             ; CODE XREF: .text:0041A3A6↓j
.text:0041A0BE                 movzx   eax, byte ptr [edx]
.text:0041A0C1                 mov     esi, ebx
.text:0041A0C3                 inc     edx
.text:0041A0C4                 test    al, al
.text:0041A0C6                 jnz     short loc_41A0B0
.text:0041A0C8
.text:0041A0C8 loc_41A0C8:                             ; CODE XREF: .text:0041A09F↑j
.text:0041A0C8                 mov     [edi], esi
.text:0041A0CA                 mov     eax, [esp+1Ch]
.text:0041A0CE                 test    eax, eax
.text:0041A0D0                 jnz     loc_41A34B
.text:0041A0D6
.text:0041A0D6 loc_41A0D6:                             ; CODE XREF: .text:0041A35F↓j
.text:0041A0D6                 mov     dword ptr [esp+4], 419F8Ah
.text:0041A0DE                 mov     esi, offset loc_419F8D
.text:0041A0E3                 mov     [esp], ebp
.text:0041A0E6                 call    sub_41ADE0
.text:0041A0EB                 test    eax, eax
.text:0041A0ED                 mov     ebx, eax
.text:0041A0EF                 jz      short loc_41A118
.text:0041A0F1                 mov     edx, eax
.text:0041A0F3                 mov     ecx, eax
.text:0041A0F5                 lea     esi, [esi+0]
.text:0041A0F9                 lea     edi, [edi+0]
.text:0041A100
.text:0041A100 loc_41A100:                             ; CODE XREF: .text:0041A116↓j
.text:0041A100                 movzx   eax, byte ptr [edx]
.text:0041A103                 cmp     al, 5Ch ; '\'
.text:0041A105                 jz      loc_41A2F3
.text:0041A10B
.text:0041A10B loc_41A10B:                             ; CODE XREF: .text:0041A2FB↓j
.text:0041A10B                                         ; .text:0041A309↓j ...
.text:0041A10B                 mov     [ecx], al
.text:0041A10D
.text:0041A10D loc_41A10D:                             ; CODE XREF: .text:0041A31D↓j
.text:0041A10D                 inc     ecx
.text:0041A10E
.text:0041A10E loc_41A10E:                             ; CODE XREF: .text:0041A335↓j
.text:0041A10E                 movzx   eax, byte ptr [edx]
.text:0041A111                 mov     esi, ebx
.text:0041A113                 inc     edx
.text:0041A114                 test    al, al
.text:0041A116                 jnz     short loc_41A100
.text:0041A118
.text:0041A118 loc_41A118:                             ; CODE XREF: .text:0041A0EF↑j
.text:0041A118                 mov     [edi+4], esi
.text:0041A11B                 mov     eax, [esp+1Ch]
.text:0041A11F                 test    eax, eax
.text:0041A121                 jnz     loc_41A2DA
.text:0041A127
.text:0041A127 loc_41A127:                             ; CODE XREF: .text:0041A2EE↓j
.text:0041A127                 mov     dword ptr [esp+4], 419F8Ah
.text:0041A12F                 mov     esi, offset loc_419F8D
.text:0041A134                 mov     [esp], ebp
.text:0041A137                 call    sub_41ADE0
.text:0041A13C                 test    eax, eax
.text:0041A13E                 mov     ebx, eax
.text:0041A140                 jz      short loc_41A168
.text:0041A142                 mov     edx, eax
.text:0041A144                 mov     ecx, eax
.text:0041A146                 lea     esi, [esi+0]
.text:0041A149                 lea     edi, [edi+0]
.text:0041A150
.text:0041A150 loc_41A150:                             ; CODE XREF: .text:0041A166↓j
.text:0041A150                 movzx   eax, byte ptr [edx]
.text:0041A153                 cmp     al, 5Ch ; '\'
.text:0041A155                 jz      loc_41A282
.text:0041A15B
.text:0041A15B loc_41A15B:                             ; CODE XREF: .text:0041A28A↓j
.text:0041A15B                                         ; .text:0041A298↓j ...
.text:0041A15B                 mov     [ecx], al
.text:0041A15D
.text:0041A15D loc_41A15D:                             ; CODE XREF: .text:0041A2AC↓j
.text:0041A15D                 inc     ecx
.text:0041A15E
.text:0041A15E loc_41A15E:                             ; CODE XREF: .text:0041A2C4↓j
.text:0041A15E                 movzx   eax, byte ptr [edx]
.text:0041A161                 mov     esi, ebx
.text:0041A163                 inc     edx
.text:0041A164                 test    al, al
.text:0041A166                 jnz     short loc_41A150
.text:0041A168
.text:0041A168 loc_41A168:                             ; CODE XREF: .text:0041A140↑j
.text:0041A168                 mov     [edi+8], esi
.text:0041A16B                 mov     eax, [esp+1Ch]
.text:0041A16F                 test    eax, eax
.text:0041A171                 jnz     loc_41A269
.text:0041A177
.text:0041A177 loc_41A177:                             ; CODE XREF: .text:0041A27D↓j
.text:0041A177                 mov     dword ptr [esp+4], 419F8Ah
.text:0041A17F                 mov     esi, offset loc_419F8D
.text:0041A184                 mov     [esp], ebp
.text:0041A187                 call    sub_41ADE0
.text:0041A18C                 test    eax, eax
.text:0041A18E                 mov     ebx, eax
.text:0041A190                 jz      short loc_41A1B4
.text:0041A192                 mov     edx, eax
.text:0041A194                 mov     ecx, eax
.text:0041A196                 lea     esi, [esi+0]
.text:0041A199                 lea     edi, [edi+0]
.text:0041A1A0
.text:0041A1A0 loc_41A1A0:                             ; CODE XREF: .text:0041A1B2↓j
.text:0041A1A0                 movzx   eax, byte ptr [edx]
.text:0041A1A3                 cmp     al, 5Ch ; '\'
.text:0041A1A5                 jz      short loc_41A215
.text:0041A1A7
.text:0041A1A7 loc_41A1A7:                             ; CODE XREF: .text:0041A21D↓j
.text:0041A1A7                                         ; .text:0041A227↓j ...
.text:0041A1A7                 mov     [ecx], al
.text:0041A1A9
.text:0041A1A9 loc_41A1A9:                             ; CODE XREF: .text:0041A23B↓j
.text:0041A1A9                 inc     ecx
.text:0041A1AA
.text:0041A1AA loc_41A1AA:                             ; CODE XREF: .text:0041A253↓j
.text:0041A1AA                 movzx   eax, byte ptr [edx]
.text:0041A1AD                 mov     esi, ebx
.text:0041A1AF                 inc     edx
.text:0041A1B0                 test    al, al
.text:0041A1B2                 jnz     short loc_41A1A0
.text:0041A1B4
.text:0041A1B4 loc_41A1B4:                             ; CODE XREF: .text:0041A190↑j
.text:0041A1B4                 mov     [edi+0Ch], esi
.text:0041A1B7                 xor     eax, eax
.text:0041A1B9                 mov     edx, [esp+1Ch]
.text:0041A1BD                 test    edx, edx
.text:0041A1BF                 jnz     short loc_41A1F5
.text:0041A1C1
.text:0041A1C1 loc_41A1C1:                             ; CODE XREF: .text:0041A213↓j
.text:0041A1C1                 cmp     eax, 1
.text:0041A1C4                 jz      short loc_41A1EC
.text:0041A1C6                 cmp     eax, 1
.text:0041A1C9                 jle     short loc_41A1E1
.text:0041A1CB
.text:0041A1CB loc_41A1CB:                             ; CODE XREF: .text:0041A1E3↓j
.text:0041A1CB                                         ; .text:0041A1F3↓j
.text:0041A1CB                 mov     edx, [esp+160h]
.text:0041A1D2                 mov     [esp], edx
.text:0041A1D5                 call    sub_41AD80
.text:0041A1DA                 mov     eax, edi
.text:0041A1DC                 jmp     loc_41A01A
.text:0041A1E1 ; ---------------------------------------------------------------------------
.text:0041A1E1
.text:0041A1E1 loc_41A1E1:                             ; CODE XREF: .text:0041A1C9↑j
.text:0041A1E1                 test    eax, eax
.text:0041A1E3                 jnz     short loc_41A1CB
.text:0041A1E5                 mov     dword ptr [edi+10h], 0
.text:0041A1EC
.text:0041A1EC loc_41A1EC:                             ; CODE XREF: .text:0041A1C4↑j
.text:0041A1EC                 mov     dword ptr [edi+14h], 0
.text:0041A1F3                 jmp     short loc_41A1CB
.text:0041A1F5 ; ---------------------------------------------------------------------------
.text:0041A1F5
.text:0041A1F5 loc_41A1F5:                             ; CODE XREF: .text:0041A1BF↑j
.text:0041A1F5                 mov     dword ptr [esp+4], 419F8Eh
.text:0041A1FD                 lea     esi, [edi+14h]
.text:0041A200                 lea     ebp, [edi+10h]
.text:0041A203                 mov     [esp+0Ch], esi
.text:0041A207                 mov     [esp+8], ebp
.text:0041A20B                 mov     [esp], edx
.text:0041A20E                 call    sscanf
.text:0041A213                 jmp     short loc_41A1C1
.text:0041A215 ; ---------------------------------------------------------------------------
.text:0041A215
.text:0041A215 loc_41A215:                             ; CODE XREF: .text:0041A1A5↑j
.text:0041A215                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A219                 jz      short loc_41A258
.text:0041A21B
.text:0041A21B loc_41A21B:                             ; CODE XREF: .text:0041A25C↓j
.text:0041A21B                                         ; .text:0041A262↓j
.text:0041A21B                 cmp     al, 5Ch ; '\'
.text:0041A21D                 jnz     short loc_41A1A7
.text:0041A21F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A223                 jz      short loc_41A240
.text:0041A225
.text:0041A225 loc_41A225:                             ; CODE XREF: .text:0041A244↓j
.text:0041A225                                         ; .text:0041A24A↓j
.text:0041A225                 cmp     al, 5Ch ; '\'
.text:0041A227                 jnz     loc_41A1A7
.text:0041A22D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041A231                 jnz     loc_41A1A7
.text:0041A237                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041A23A                 inc     edx
.text:0041A23B                 jmp     loc_41A1A9
.text:0041A240 ; ---------------------------------------------------------------------------
.text:0041A240
.text:0041A240 loc_41A240:                             ; CODE XREF: .text:0041A223↑j
.text:0041A240                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041A244                 jnz     short loc_41A225
.text:0041A246                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041A24A                 jnz     short loc_41A225
.text:0041A24C                 mov     byte ptr [ecx], 9
.text:0041A24F
.text:0041A24F loc_41A24F:                             ; CODE XREF: .text:0041A267↓j
.text:0041A24F                 inc     ecx
.text:0041A250                 add     edx, 3
.text:0041A253                 jmp     loc_41A1AA
.text:0041A258 ; ---------------------------------------------------------------------------
.text:0041A258
.text:0041A258 loc_41A258:                             ; CODE XREF: .text:0041A219↑j
.text:0041A258                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041A25C                 jnz     short loc_41A21B
.text:0041A25E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041A262                 jnz     short loc_41A21B
.text:0041A264                 mov     byte ptr [ecx], 20h ; ' '
.text:0041A267                 jmp     short loc_41A24F
.text:0041A269 ; ---------------------------------------------------------------------------
.text:0041A269
.text:0041A269 loc_41A269:                             ; CODE XREF: .text:0041A171↑j
.text:0041A269                 mov     dword ptr [esp+4], 419F8Ah
.text:0041A271                 mov     [esp], eax
.text:0041A274                 call    strspn
.text:0041A279                 add     [esp+1Ch], eax
.text:0041A27D                 jmp     loc_41A177
.text:0041A282 ; ---------------------------------------------------------------------------
.text:0041A282
.text:0041A282 loc_41A282:                             ; CODE XREF: .text:0041A155↑j
.text:0041A282                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A286                 jz      short loc_41A2C9
.text:0041A288
.text:0041A288 loc_41A288:                             ; CODE XREF: .text:0041A2CD↓j
.text:0041A288                                         ; .text:0041A2D3↓j
.text:0041A288                 cmp     al, 5Ch ; '\'
.text:0041A28A                 jnz     loc_41A15B
.text:0041A290                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A294                 jz      short loc_41A2B1
.text:0041A296
.text:0041A296 loc_41A296:                             ; CODE XREF: .text:0041A2B5↓j
.text:0041A296                                         ; .text:0041A2BB↓j
.text:0041A296                 cmp     al, 5Ch ; '\'
.text:0041A298                 jnz     loc_41A15B
.text:0041A29E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041A2A2                 jnz     loc_41A15B
.text:0041A2A8                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041A2AB                 inc     edx
.text:0041A2AC                 jmp     loc_41A15D
.text:0041A2B1 ; ---------------------------------------------------------------------------
.text:0041A2B1
.text:0041A2B1 loc_41A2B1:                             ; CODE XREF: .text:0041A294↑j
.text:0041A2B1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041A2B5                 jnz     short loc_41A296
.text:0041A2B7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041A2BB                 jnz     short loc_41A296
.text:0041A2BD                 mov     byte ptr [ecx], 9
.text:0041A2C0
.text:0041A2C0 loc_41A2C0:                             ; CODE XREF: .text:0041A2D8↓j
.text:0041A2C0                 inc     ecx
.text:0041A2C1                 add     edx, 3
.text:0041A2C4                 jmp     loc_41A15E
.text:0041A2C9 ; ---------------------------------------------------------------------------
.text:0041A2C9
.text:0041A2C9 loc_41A2C9:                             ; CODE XREF: .text:0041A286↑j
.text:0041A2C9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041A2CD                 jnz     short loc_41A288
.text:0041A2CF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041A2D3                 jnz     short loc_41A288
.text:0041A2D5                 mov     byte ptr [ecx], 20h ; ' '
.text:0041A2D8                 jmp     short loc_41A2C0
.text:0041A2DA ; ---------------------------------------------------------------------------
.text:0041A2DA
.text:0041A2DA loc_41A2DA:                             ; CODE XREF: .text:0041A121↑j
.text:0041A2DA                 mov     dword ptr [esp+4], 419F8Ah
.text:0041A2E2                 mov     [esp], eax
.text:0041A2E5                 call    strspn
.text:0041A2EA                 add     [esp+1Ch], eax
.text:0041A2EE                 jmp     loc_41A127
.text:0041A2F3 ; ---------------------------------------------------------------------------
.text:0041A2F3
.text:0041A2F3 loc_41A2F3:                             ; CODE XREF: .text:0041A105↑j
.text:0041A2F3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A2F7                 jz      short loc_41A33A
.text:0041A2F9
.text:0041A2F9 loc_41A2F9:                             ; CODE XREF: .text:0041A33E↓j
.text:0041A2F9                                         ; .text:0041A344↓j
.text:0041A2F9                 cmp     al, 5Ch ; '\'
.text:0041A2FB                 jnz     loc_41A10B
.text:0041A301                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A305                 jz      short loc_41A322
.text:0041A307
.text:0041A307 loc_41A307:                             ; CODE XREF: .text:0041A326↓j
.text:0041A307                                         ; .text:0041A32C↓j
.text:0041A307                 cmp     al, 5Ch ; '\'
.text:0041A309                 jnz     loc_41A10B
.text:0041A30F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041A313                 jnz     loc_41A10B
.text:0041A319                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041A31C                 inc     edx
.text:0041A31D                 jmp     loc_41A10D
.text:0041A322 ; ---------------------------------------------------------------------------
.text:0041A322
.text:0041A322 loc_41A322:                             ; CODE XREF: .text:0041A305↑j
.text:0041A322                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041A326                 jnz     short loc_41A307
.text:0041A328                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041A32C                 jnz     short loc_41A307
.text:0041A32E                 mov     byte ptr [ecx], 9
.text:0041A331
.text:0041A331 loc_41A331:                             ; CODE XREF: .text:0041A349↓j
.text:0041A331                 inc     ecx
.text:0041A332                 add     edx, 3
.text:0041A335                 jmp     loc_41A10E
.text:0041A33A ; ---------------------------------------------------------------------------
.text:0041A33A
.text:0041A33A loc_41A33A:                             ; CODE XREF: .text:0041A2F7↑j
.text:0041A33A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041A33E                 jnz     short loc_41A2F9
.text:0041A340                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041A344                 jnz     short loc_41A2F9
.text:0041A346                 mov     byte ptr [ecx], 20h ; ' '
.text:0041A349                 jmp     short loc_41A331
.text:0041A34B ; ---------------------------------------------------------------------------
.text:0041A34B
.text:0041A34B loc_41A34B:                             ; CODE XREF: .text:0041A0D0↑j
.text:0041A34B                 mov     dword ptr [esp+4], 419F8Ah
.text:0041A353                 mov     [esp], eax
.text:0041A356                 call    strspn
.text:0041A35B                 add     [esp+1Ch], eax
.text:0041A35F                 jmp     loc_41A0D6
.text:0041A364 ; ---------------------------------------------------------------------------
.text:0041A364
.text:0041A364 loc_41A364:                             ; CODE XREF: .text:0041A0B5↑j
.text:0041A364                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A368                 jz      short loc_41A3AB
.text:0041A36A
.text:0041A36A loc_41A36A:                             ; CODE XREF: .text:0041A3AF↓j
.text:0041A36A                                         ; .text:0041A3B5↓j
.text:0041A36A                 cmp     al, 5Ch ; '\'
.text:0041A36C                 jnz     loc_41A0BB
.text:0041A372                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A376                 jz      short loc_41A393
.text:0041A378
.text:0041A378 loc_41A378:                             ; CODE XREF: .text:0041A397↓j
.text:0041A378                                         ; .text:0041A39D↓j
.text:0041A378                 cmp     al, 5Ch ; '\'
.text:0041A37A                 jnz     loc_41A0BB
.text:0041A380                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041A384                 jnz     loc_41A0BB
.text:0041A38A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041A38D                 inc     edx
.text:0041A38E                 jmp     loc_41A0BD
.text:0041A393 ; ---------------------------------------------------------------------------
.text:0041A393
.text:0041A393 loc_41A393:                             ; CODE XREF: .text:0041A376↑j
.text:0041A393                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041A397                 jnz     short loc_41A378
.text:0041A399                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041A39D                 jnz     short loc_41A378
.text:0041A39F                 mov     byte ptr [ecx], 9
.text:0041A3A2
.text:0041A3A2 loc_41A3A2:                             ; CODE XREF: .text:0041A3BA↓j
.text:0041A3A2                 inc     ecx
.text:0041A3A3                 add     edx, 3
.text:0041A3A6                 jmp     loc_41A0BE
.text:0041A3AB ; ---------------------------------------------------------------------------
.text:0041A3AB
.text:0041A3AB loc_41A3AB:                             ; CODE XREF: .text:0041A368↑j
.text:0041A3AB                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041A3AF                 jnz     short loc_41A36A
.text:0041A3B1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041A3B5                 jnz     short loc_41A36A
.text:0041A3B7                 mov     byte ptr [ecx], 20h ; ' '
.text:0041A3BA                 jmp     short loc_41A3A2
.text:0041A3BA ; ---------------------------------------------------------------------------
.text:0041A3BC                 align 10h
.text:0041A3C0
.text:0041A3C0 loc_41A3C0:                             ; CODE XREF: .text:00419FD2↑j
.text:0041A3C0                 mov     dword ptr [esp+4], 0
.text:0041A3C8                 mov     dword ptr [esp], 0
.text:0041A3CF                 call    GetLogicalDriveStringsA
.text:0041A3D4                 sub     esp, 8
.text:0041A3D7                 mov     ebx, eax
.text:0041A3D9                 call    GetProcessHeap
.text:0041A3DE                 mov     [esp], eax
.text:0041A3E1                 mov     [esp+8], ebx
.text:0041A3E5                 mov     dword ptr [esp+4], 0
.text:0041A3ED                 call    HeapAlloc
.text:0041A3F2                 sub     esp, 0Ch
.text:0041A3F5                 mov     esi, eax
.text:0041A3F7                 mov     [esp+4], eax
.text:0041A3FB                 mov     [esp], ebx
.text:0041A3FE                 call    GetLogicalDriveStringsA
.text:0041A403                 mov     off_41E114, esi ; "notset"
.text:0041A409                 sub     esp, 8
.text:0041A40C                 jmp     loc_419FD8
.text:0041A40C ; ---------------------------------------------------------------------------
.text:0041A411 ; const char aSSSSDD[]
.text:0041A411 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0041A411                                         ; DATA XREF: .text:0041A550↓o
.text:0041A411                                         ; ___addmntentstr+F0↓o
.text:0041A424                 align 10h
.text:0041A430                 push    esi
.text:0041A431                 push    ebx
.text:0041A432                 sub     esp, 44h
.text:0041A435                 mov     ebx, [esp+54h]
.text:0041A439                 mov     esi, [esp+50h]
.text:0041A43D                 mov     edx, [ebx]
.text:0041A43F                 mov     [esp+20h], edx
.text:0041A443                 mov     ecx, [ebx+4]
.text:0041A446                 mov     [esp+24h], ecx
.text:0041A44A                 mov     edx, [ebx+8]
.text:0041A44D                 mov     [esp+28h], edx
.text:0041A451                 mov     ecx, [ebx+0Ch]
.text:0041A454                 mov     [esp+2Ch], ecx
.text:0041A458                 mov     edx, [ebx+10h]
.text:0041A45B                 mov     [esp+30h], edx
.text:0041A45F                 mov     ecx, [ebx+14h]
.text:0041A462                 mov     dword ptr [esp+8], 2
.text:0041A46A                 mov     dword ptr [esp+4], 0
.text:0041A472                 mov     [esp+34h], ecx
.text:0041A476                 mov     [esp], esi
.text:0041A479                 call    sub_41AD70
.text:0041A47E ; ---------------------------------------------------------------------------
.text:0041A47E                 test    eax, eax
.text:0041A480                 mov     edx, 1
.text:0041A485                 jnz     loc_41A585
.text:0041A48B                 mov     ebx, [esp+20h]
.text:0041A48F                 mov     edx, ebx
.text:0041A491                 movzx   eax, byte ptr [ebx]
.text:0041A494                 test    al, al
.text:0041A496                 jz      short loc_41A4C0
.text:0041A498                 nop
.text:0041A499                 lea     esi, [esi+0]
.text:0041A4A0
.text:0041A4A0 loc_41A4A0:                             ; CODE XREF: .text:0041A4BE↓j
.text:0041A4A0                 cmp     al, 20h ; ' '
.text:0041A4A2                 jz      loc_41A6FA
.text:0041A4A8                 cmp     al, 9
.text:0041A4AA                 jz      loc_41A6FA
.text:0041A4B0                 cmp     al, 5Ch ; '\'
.text:0041A4B2                 jz      loc_41A6FA
.text:0041A4B8                 inc     ebx
.text:0041A4B9                 movzx   eax, byte ptr [ebx]
.text:0041A4BC                 test    al, al
.text:0041A4BE                 jnz     short loc_41A4A0
.text:0041A4C0
.text:0041A4C0 loc_41A4C0:                             ; CODE XREF: .text:0041A496↑j
.text:0041A4C0                                         ; .text:0041A6FC↓j ...
.text:0041A4C0                 mov     ebx, [esp+24h]
.text:0041A4C4                 mov     edx, ebx
.text:0041A4C6                 movzx   eax, byte ptr [ebx]
.text:0041A4C9                 test    al, al
.text:0041A4CB                 jz      short loc_41A4F0
.text:0041A4CD                 lea     esi, [esi+0]
.text:0041A4D0
.text:0041A4D0 loc_41A4D0:                             ; CODE XREF: .text:0041A4EE↓j
.text:0041A4D0                 cmp     al, 20h ; ' '
.text:0041A4D2                 jz      loc_41A67A
.text:0041A4D8                 cmp     al, 9
.text:0041A4DA                 jz      loc_41A67A
.text:0041A4E0                 cmp     al, 5Ch ; '\'
.text:0041A4E2                 jz      loc_41A67A
.text:0041A4E8                 inc     ebx
.text:0041A4E9                 movzx   eax, byte ptr [ebx]
.text:0041A4EC                 test    al, al
.text:0041A4EE                 jnz     short loc_41A4D0
.text:0041A4F0
.text:0041A4F0 loc_41A4F0:                             ; CODE XREF: .text:0041A4CB↑j
.text:0041A4F0                                         ; .text:0041A67C↓j ...
.text:0041A4F0                 mov     ebx, [esp+28h]
.text:0041A4F4                 mov     edx, ebx
.text:0041A4F6                 movzx   eax, byte ptr [ebx]
.text:0041A4F9                 test    al, al
.text:0041A4FB                 jz      short loc_41A520
.text:0041A4FD                 lea     esi, [esi+0]
.text:0041A500
.text:0041A500 loc_41A500:                             ; CODE XREF: .text:0041A51E↓j
.text:0041A500                 cmp     al, 20h ; ' '
.text:0041A502                 jz      loc_41A5FE
.text:0041A508                 cmp     al, 9
.text:0041A50A                 jz      loc_41A5FE
.text:0041A510                 cmp     al, 5Ch ; '\'
.text:0041A512                 jz      loc_41A5FE
.text:0041A518                 inc     ebx
.text:0041A519                 movzx   eax, byte ptr [ebx]
.text:0041A51C                 test    al, al
.text:0041A51E                 jnz     short loc_41A500
.text:0041A520
.text:0041A520 loc_41A520:                             ; CODE XREF: .text:0041A4FB↑j
.text:0041A520                                         ; .text:0041A600↓j ...
.text:0041A520                 mov     edx, [esp+2Ch]
.text:0041A524                 mov     ebx, edx
.text:0041A526                 movzx   eax, byte ptr [edx]
.text:0041A529                 test    al, al
.text:0041A52B                 jz      short loc_41A544
.text:0041A52D                 lea     esi, [esi+0]
.text:0041A530
.text:0041A530 loc_41A530:                             ; CODE XREF: .text:0041A542↓j
.text:0041A530                 cmp     al, 20h ; ' '
.text:0041A532                 jz      short loc_41A58D
.text:0041A534                 cmp     al, 9
.text:0041A536                 jz      short loc_41A58D
.text:0041A538                 cmp     al, 5Ch ; '\'
.text:0041A53A                 jz      short loc_41A58D
.text:0041A53C                 inc     ebx
.text:0041A53D                 movzx   eax, byte ptr [ebx]
.text:0041A540                 test    al, al
.text:0041A542                 jnz     short loc_41A530
.text:0041A544
.text:0041A544 loc_41A544:                             ; CODE XREF: .text:0041A52B↑j
.text:0041A544                                         ; .text:0041A58F↓j ...
.text:0041A544                 mov     [esp+14h], edx
.text:0041A548                 mov     ecx, [esp+34h]
.text:0041A54C                 mov     ebx, [esp+30h]
.text:0041A550                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0041A558                 mov     edx, [esp+24h]
.text:0041A55C                 mov     [esp+1Ch], ecx
.text:0041A560                 mov     ecx, [esp+28h]
.text:0041A564                 mov     [esp+18h], ebx
.text:0041A568                 mov     ebx, [esp+20h]
.text:0041A56C                 mov     [esp+0Ch], edx
.text:0041A570                 mov     [esp+10h], ecx
.text:0041A574                 mov     [esp+8], ebx
.text:0041A578                 mov     [esp], esi
.text:0041A57B                 call    fprintf
.text:0041A580                 mov     edx, eax
.text:0041A582                 shr     edx, 1Fh
.text:0041A585
.text:0041A585 loc_41A585:                             ; CODE XREF: .text:0041A485↑j
.text:0041A585                 add     esp, 44h
.text:0041A588                 mov     eax, edx
.text:0041A58A                 pop     ebx
.text:0041A58B                 pop     esi
.text:0041A58C                 retn
.text:0041A58D ; ---------------------------------------------------------------------------
.text:0041A58D
.text:0041A58D loc_41A58D:                             ; CODE XREF: .text:0041A532↑j
.text:0041A58D                                         ; .text:0041A536↑j ...
.text:0041A58D                 test    al, al
.text:0041A58F                 jz      short loc_41A544
.text:0041A591                 mov     [esp], edx
.text:0041A594                 mov     ebx, edx
.text:0041A596                 call    strlen
.text:0041A59B                 lea     edx, ds:1[eax*4]
.text:0041A5A2                 mov     [esp], edx
.text:0041A5A5                 call    malloc
.text:0041A5AA                 mov     [esp+2Ch], eax
.text:0041A5AE                 mov     edx, eax
.text:0041A5B0
.text:0041A5B0 loc_41A5B0:                             ; CODE XREF: .text:0041A5C8↓j
.text:0041A5B0                 movzx   eax, byte ptr [ebx]
.text:0041A5B3                 cmp     al, 20h ; ' '
.text:0041A5B5                 jz      short loc_41A5ED
.text:0041A5B7                 cmp     al, 9
.text:0041A5B9                 jz      short loc_41A5DC
.text:0041A5BB                 cmp     al, 5Ch ; '\'
.text:0041A5BD                 jz      short loc_41A5D3
.text:0041A5BF                 mov     [edx], al
.text:0041A5C1
.text:0041A5C1 loc_41A5C1:                             ; CODE XREF: .text:0041A5DA↓j
.text:0041A5C1                                         ; .text:0041A5EB↓j ...
.text:0041A5C1                 movzx   ecx, byte ptr [ebx]
.text:0041A5C4                 inc     edx
.text:0041A5C5                 inc     ebx
.text:0041A5C6                 test    cl, cl
.text:0041A5C8                 jnz     short loc_41A5B0
.text:0041A5CA                 mov     edx, [esp+2Ch]
.text:0041A5CE                 jmp     loc_41A544
.text:0041A5D3 ; ---------------------------------------------------------------------------
.text:0041A5D3
.text:0041A5D3 loc_41A5D3:                             ; CODE XREF: .text:0041A5BD↑j
.text:0041A5D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A5D6                 inc     edx
.text:0041A5D7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A5DA                 jmp     short loc_41A5C1
.text:0041A5DC ; ---------------------------------------------------------------------------
.text:0041A5DC
.text:0041A5DC loc_41A5DC:                             ; CODE XREF: .text:0041A5B9↑j
.text:0041A5DC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A5DF                 inc     edx
.text:0041A5E0                 mov     byte ptr [edx], 30h ; '0'
.text:0041A5E3                 inc     edx
.text:0041A5E4                 mov     byte ptr [edx], 31h ; '1'
.text:0041A5E7                 inc     edx
.text:0041A5E8                 mov     byte ptr [edx], 32h ; '2'
.text:0041A5EB                 jmp     short loc_41A5C1
.text:0041A5ED ; ---------------------------------------------------------------------------
.text:0041A5ED
.text:0041A5ED loc_41A5ED:                             ; CODE XREF: .text:0041A5B5↑j
.text:0041A5ED                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A5F0                 inc     edx
.text:0041A5F1                 mov     byte ptr [edx], 30h ; '0'
.text:0041A5F4                 inc     edx
.text:0041A5F5                 mov     byte ptr [edx], 34h ; '4'
.text:0041A5F8                 inc     edx
.text:0041A5F9                 mov     byte ptr [edx], 30h ; '0'
.text:0041A5FC                 jmp     short loc_41A5C1
.text:0041A5FE ; ---------------------------------------------------------------------------
.text:0041A5FE
.text:0041A5FE loc_41A5FE:                             ; CODE XREF: .text:0041A502↑j
.text:0041A5FE                                         ; .text:0041A50A↑j ...
.text:0041A5FE                 test    al, al
.text:0041A600                 jz      loc_41A520
.text:0041A606                 mov     [esp], edx
.text:0041A609                 mov     ebx, edx
.text:0041A60B                 call    strlen
.text:0041A610                 lea     edx, ds:1[eax*4]
.text:0041A617                 mov     [esp], edx
.text:0041A61A                 call    malloc
.text:0041A61F                 mov     [esp+28h], eax
.text:0041A623                 mov     edx, eax
.text:0041A625                 lea     esi, [esi+0]
.text:0041A629                 lea     edi, [edi+0]
.text:0041A630
.text:0041A630 loc_41A630:                             ; CODE XREF: .text:0041A648↓j
.text:0041A630                 movzx   eax, byte ptr [ebx]
.text:0041A633                 cmp     al, 20h ; ' '
.text:0041A635                 jz      short loc_41A669
.text:0041A637                 cmp     al, 9
.text:0041A639                 jz      short loc_41A658
.text:0041A63B                 cmp     al, 5Ch ; '\'
.text:0041A63D                 jz      short loc_41A64F
.text:0041A63F                 mov     [edx], al
.text:0041A641
.text:0041A641 loc_41A641:                             ; CODE XREF: .text:0041A656↓j
.text:0041A641                                         ; .text:0041A667↓j ...
.text:0041A641                 movzx   ecx, byte ptr [ebx]
.text:0041A644                 inc     edx
.text:0041A645                 inc     ebx
.text:0041A646                 test    cl, cl
.text:0041A648                 jnz     short loc_41A630
.text:0041A64A                 jmp     loc_41A520
.text:0041A64F ; ---------------------------------------------------------------------------
.text:0041A64F
.text:0041A64F loc_41A64F:                             ; CODE XREF: .text:0041A63D↑j
.text:0041A64F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A652                 inc     edx
.text:0041A653                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A656                 jmp     short loc_41A641
.text:0041A658 ; ---------------------------------------------------------------------------
.text:0041A658
.text:0041A658 loc_41A658:                             ; CODE XREF: .text:0041A639↑j
.text:0041A658                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A65B                 inc     edx
.text:0041A65C                 mov     byte ptr [edx], 30h ; '0'
.text:0041A65F                 inc     edx
.text:0041A660                 mov     byte ptr [edx], 31h ; '1'
.text:0041A663                 inc     edx
.text:0041A664                 mov     byte ptr [edx], 32h ; '2'
.text:0041A667                 jmp     short loc_41A641
.text:0041A669 ; ---------------------------------------------------------------------------
.text:0041A669
.text:0041A669 loc_41A669:                             ; CODE XREF: .text:0041A635↑j
.text:0041A669                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A66C                 inc     edx
.text:0041A66D                 mov     byte ptr [edx], 30h ; '0'
.text:0041A670                 inc     edx
.text:0041A671                 mov     byte ptr [edx], 34h ; '4'
.text:0041A674                 inc     edx
.text:0041A675                 mov     byte ptr [edx], 30h ; '0'
.text:0041A678                 jmp     short loc_41A641
.text:0041A67A ; ---------------------------------------------------------------------------
.text:0041A67A
.text:0041A67A loc_41A67A:                             ; CODE XREF: .text:0041A4D2↑j
.text:0041A67A                                         ; .text:0041A4DA↑j ...
.text:0041A67A                 test    al, al
.text:0041A67C                 jz      loc_41A4F0
.text:0041A682                 mov     [esp], edx
.text:0041A685                 mov     ebx, edx
.text:0041A687                 call    strlen
.text:0041A68C                 lea     edx, ds:1[eax*4]
.text:0041A693                 mov     [esp], edx
.text:0041A696                 call    malloc
.text:0041A69B                 mov     [esp+24h], eax
.text:0041A69F                 mov     edx, eax
.text:0041A6A1                 jmp     short loc_41A6B0
.text:0041A6A1 ; ---------------------------------------------------------------------------
.text:0041A6A3                 align 10h
.text:0041A6B0
.text:0041A6B0 loc_41A6B0:                             ; CODE XREF: .text:0041A6A1↑j
.text:0041A6B0                                         ; .text:0041A6C8↓j
.text:0041A6B0                 movzx   eax, byte ptr [ebx]
.text:0041A6B3                 cmp     al, 20h ; ' '
.text:0041A6B5                 jz      short loc_41A6E9
.text:0041A6B7                 cmp     al, 9
.text:0041A6B9                 jz      short loc_41A6D8
.text:0041A6BB                 cmp     al, 5Ch ; '\'
.text:0041A6BD                 jz      short loc_41A6CF
.text:0041A6BF                 mov     [edx], al
.text:0041A6C1
.text:0041A6C1 loc_41A6C1:                             ; CODE XREF: .text:0041A6D6↓j
.text:0041A6C1                                         ; .text:0041A6E7↓j ...
.text:0041A6C1                 movzx   ecx, byte ptr [ebx]
.text:0041A6C4                 inc     edx
.text:0041A6C5                 inc     ebx
.text:0041A6C6                 test    cl, cl
.text:0041A6C8                 jnz     short loc_41A6B0
.text:0041A6CA                 jmp     loc_41A4F0
.text:0041A6CF ; ---------------------------------------------------------------------------
.text:0041A6CF
.text:0041A6CF loc_41A6CF:                             ; CODE XREF: .text:0041A6BD↑j
.text:0041A6CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A6D2                 inc     edx
.text:0041A6D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A6D6                 jmp     short loc_41A6C1
.text:0041A6D8 ; ---------------------------------------------------------------------------
.text:0041A6D8
.text:0041A6D8 loc_41A6D8:                             ; CODE XREF: .text:0041A6B9↑j
.text:0041A6D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A6DB                 inc     edx
.text:0041A6DC                 mov     byte ptr [edx], 30h ; '0'
.text:0041A6DF                 inc     edx
.text:0041A6E0                 mov     byte ptr [edx], 31h ; '1'
.text:0041A6E3                 inc     edx
.text:0041A6E4                 mov     byte ptr [edx], 32h ; '2'
.text:0041A6E7                 jmp     short loc_41A6C1
.text:0041A6E9 ; ---------------------------------------------------------------------------
.text:0041A6E9
.text:0041A6E9 loc_41A6E9:                             ; CODE XREF: .text:0041A6B5↑j
.text:0041A6E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A6EC                 inc     edx
.text:0041A6ED                 mov     byte ptr [edx], 30h ; '0'
.text:0041A6F0                 inc     edx
.text:0041A6F1                 mov     byte ptr [edx], 34h ; '4'
.text:0041A6F4                 inc     edx
.text:0041A6F5                 mov     byte ptr [edx], 30h ; '0'
.text:0041A6F8                 jmp     short loc_41A6C1
.text:0041A6FA ; ---------------------------------------------------------------------------
.text:0041A6FA
.text:0041A6FA loc_41A6FA:                             ; CODE XREF: .text:0041A4A2↑j
.text:0041A6FA                                         ; .text:0041A4AA↑j ...
.text:0041A6FA                 test    al, al
.text:0041A6FC                 jz      loc_41A4C0
.text:0041A702                 mov     [esp], edx
.text:0041A705                 mov     ebx, edx
.text:0041A707                 call    strlen
.text:0041A70C                 lea     ecx, ds:1[eax*4]
.text:0041A713                 mov     [esp], ecx
.text:0041A716                 call    malloc
.text:0041A71B                 mov     [esp+20h], eax
.text:0041A71F                 mov     edx, eax
.text:0041A721                 jmp     short loc_41A730
.text:0041A721 ; ---------------------------------------------------------------------------
.text:0041A723                 align 10h
.text:0041A730
.text:0041A730 loc_41A730:                             ; CODE XREF: .text:0041A721↑j
.text:0041A730                                         ; .text:0041A748↓j
.text:0041A730                 movzx   eax, byte ptr [ebx]
.text:0041A733                 cmp     al, 20h ; ' '
.text:0041A735                 jz      short loc_41A769
.text:0041A737                 cmp     al, 9
.text:0041A739                 jz      short loc_41A758
.text:0041A73B                 cmp     al, 5Ch ; '\'
.text:0041A73D                 jz      short loc_41A74F
.text:0041A73F                 mov     [edx], al
.text:0041A741
.text:0041A741 loc_41A741:                             ; CODE XREF: .text:0041A756↓j
.text:0041A741                                         ; .text:0041A767↓j ...
.text:0041A741                 movzx   ecx, byte ptr [ebx]
.text:0041A744                 inc     edx
.text:0041A745                 inc     ebx
.text:0041A746                 test    cl, cl
.text:0041A748                 jnz     short loc_41A730
.text:0041A74A                 jmp     loc_41A4C0
.text:0041A74F ; ---------------------------------------------------------------------------
.text:0041A74F
.text:0041A74F loc_41A74F:                             ; CODE XREF: .text:0041A73D↑j
.text:0041A74F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A752                 inc     edx
.text:0041A753                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A756                 jmp     short loc_41A741
.text:0041A758 ; ---------------------------------------------------------------------------
.text:0041A758
.text:0041A758 loc_41A758:                             ; CODE XREF: .text:0041A739↑j
.text:0041A758                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A75B                 inc     edx
.text:0041A75C                 mov     byte ptr [edx], 30h ; '0'
.text:0041A75F                 inc     edx
.text:0041A760                 mov     byte ptr [edx], 31h ; '1'
.text:0041A763                 inc     edx
.text:0041A764                 mov     byte ptr [edx], 32h ; '2'
.text:0041A767                 jmp     short loc_41A741
.text:0041A769 ; ---------------------------------------------------------------------------
.text:0041A769
.text:0041A769 loc_41A769:                             ; CODE XREF: .text:0041A735↑j
.text:0041A769                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A76C                 inc     edx
.text:0041A76D                 mov     byte ptr [edx], 30h ; '0'
.text:0041A770                 inc     edx
.text:0041A771                 mov     byte ptr [edx], 34h ; '4'
.text:0041A774                 inc     edx
.text:0041A775                 mov     byte ptr [edx], 30h ; '0'
.text:0041A778                 jmp     short loc_41A741
.text:0041A778 ; ---------------------------------------------------------------------------
.text:0041A77A                 align 10h
.text:0041A780
.text:0041A780 ; =============== S U B R O U T I N E =======================================
.text:0041A780
.text:0041A780 ; Attributes: info_from_lumina
.text:0041A780
.text:0041A780 ; int __cdecl __addmntentstr(char *, int)
.text:0041A780 ___addmntentstr proc near               ; CODE XREF: .text:0041A04A↑p
.text:0041A780
.text:0041A780 Buffer          = dword ptr -4Ch
.text:0041A780 Format          = dword ptr -48h
.text:0041A780 var_44          = dword ptr -44h
.text:0041A780 var_40          = dword ptr -40h
.text:0041A780 var_3C          = dword ptr -3Ch
.text:0041A780 var_38          = dword ptr -38h
.text:0041A780 var_34          = dword ptr -34h
.text:0041A780 var_30          = dword ptr -30h
.text:0041A780 var_2C          = dword ptr -2Ch
.text:0041A780 var_28          = dword ptr -28h
.text:0041A780 var_24          = dword ptr -24h
.text:0041A780 Str             = dword ptr -20h
.text:0041A780 var_1C          = dword ptr -1Ch
.text:0041A780 var_18          = dword ptr -18h
.text:0041A780 arg_0           = dword ptr  4
.text:0041A780 arg_4           = dword ptr  8
.text:0041A780
.text:0041A780                 push    ebx
.text:0041A781                 sub     esp, 48h
.text:0041A784                 mov     edx, [esp+4Ch+arg_4]
.text:0041A788                 mov     ecx, [edx]
.text:0041A78A                 mov     [esp+4Ch+var_2C], ecx
.text:0041A78E                 mov     ebx, [edx+4]
.text:0041A791                 mov     [esp+4Ch+var_28], ebx
.text:0041A795                 mov     ebx, [edx+8]
.text:0041A798                 mov     [esp+4Ch+var_24], ebx
.text:0041A79C                 mov     ebx, [edx+0Ch]
.text:0041A79F                 mov     [esp+4Ch+Str], ebx
.text:0041A7A3                 mov     ebx, [edx+10h]
.text:0041A7A6                 mov     [esp+4Ch+var_1C], ebx
.text:0041A7AA                 mov     ebx, [edx+14h]
.text:0041A7AD                 mov     [esp+4Ch+var_18], ebx
.text:0041A7B1                 mov     ebx, ecx
.text:0041A7B3                 movzx   eax, byte ptr [ecx]
.text:0041A7B6                 test    al, al
.text:0041A7B8                 jz      loc_41AAA1
.text:0041A7BE                 mov     esi, esi
.text:0041A7C0
.text:0041A7C0 loc_41A7C0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0041A7C0                 cmp     al, 20h ; ' '
.text:0041A7C2                 jz      loc_41AA20
.text:0041A7C8                 cmp     al, 9
.text:0041A7CA                 jz      loc_41AA20
.text:0041A7D0                 cmp     al, 5Ch ; '\'
.text:0041A7D2                 jz      loc_41AA20
.text:0041A7D8                 inc     ebx
.text:0041A7D9                 movzx   eax, byte ptr [ebx]
.text:0041A7DC                 test    al, al
.text:0041A7DE                 jnz     short loc_41A7C0
.text:0041A7E0
.text:0041A7E0 loc_41A7E0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0041A7E0                                         ; ___addmntentstr+2EA↓j
.text:0041A7E0                 mov     ebx, [esp+4Ch+var_28]
.text:0041A7E4                 mov     edx, ebx
.text:0041A7E6                 movzx   eax, byte ptr [ebx]
.text:0041A7E9                 test    al, al
.text:0041A7EB                 jz      short loc_41A810
.text:0041A7ED                 lea     esi, [esi+0]
.text:0041A7F0
.text:0041A7F0 loc_41A7F0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0041A7F0                 cmp     al, 20h ; ' '
.text:0041A7F2                 jz      loc_41A99A
.text:0041A7F8                 cmp     al, 9
.text:0041A7FA                 jz      loc_41A99A
.text:0041A800                 cmp     al, 5Ch ; '\'
.text:0041A802                 jz      loc_41A99A
.text:0041A808                 inc     ebx
.text:0041A809                 movzx   eax, byte ptr [ebx]
.text:0041A80C                 test    al, al
.text:0041A80E                 jnz     short loc_41A7F0
.text:0041A810
.text:0041A810 loc_41A810:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0041A810                                         ; ___addmntentstr+21C↓j ...
.text:0041A810                 mov     ebx, [esp+4Ch+var_24]
.text:0041A814                 mov     edx, ebx
.text:0041A816                 movzx   eax, byte ptr [ebx]
.text:0041A819                 test    al, al
.text:0041A81B                 jz      short loc_41A840
.text:0041A81D                 lea     esi, [esi+0]
.text:0041A820
.text:0041A820 loc_41A820:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0041A820                 cmp     al, 20h ; ' '
.text:0041A822                 jz      loc_41A91E
.text:0041A828                 cmp     al, 9
.text:0041A82A                 jz      loc_41A91E
.text:0041A830                 cmp     al, 5Ch ; '\'
.text:0041A832                 jz      loc_41A91E
.text:0041A838                 inc     ebx
.text:0041A839                 movzx   eax, byte ptr [ebx]
.text:0041A83C                 test    al, al
.text:0041A83E                 jnz     short loc_41A820
.text:0041A840
.text:0041A840 loc_41A840:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0041A840                                         ; ___addmntentstr+1A0↓j ...
.text:0041A840                 mov     edx, [esp+4Ch+Str]
.text:0041A844                 mov     ebx, edx
.text:0041A846                 movzx   eax, byte ptr [edx]
.text:0041A849                 test    al, al
.text:0041A84B                 jz      short loc_41A864
.text:0041A84D                 lea     esi, [esi+0]
.text:0041A850
.text:0041A850 loc_41A850:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0041A850                 cmp     al, 20h ; ' '
.text:0041A852                 jz      short loc_41A8AC
.text:0041A854                 cmp     al, 9
.text:0041A856                 jz      short loc_41A8AC
.text:0041A858                 cmp     al, 5Ch ; '\'
.text:0041A85A                 jz      short loc_41A8AC
.text:0041A85C                 inc     ebx
.text:0041A85D                 movzx   eax, byte ptr [ebx]
.text:0041A860                 test    al, al
.text:0041A862                 jnz     short loc_41A850
.text:0041A864
.text:0041A864 loc_41A864:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0041A864                                         ; ___addmntentstr+12E↓j ...
.text:0041A864                 mov     [esp+4Ch+var_38], edx
.text:0041A868                 mov     ebx, [esp+4Ch+var_18]
.text:0041A86C                 mov     ecx, [esp+4Ch+var_1C]
.text:0041A870                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0041A878                 mov     edx, [esp+4Ch+var_2C]
.text:0041A87C                 mov     [esp+4Ch+var_30], ebx
.text:0041A880                 mov     ebx, [esp+4Ch+var_24]
.text:0041A884                 mov     [esp+4Ch+var_34], ecx
.text:0041A888                 mov     ecx, [esp+4Ch+var_28]
.text:0041A88C                 mov     [esp+4Ch+var_3C], ebx
.text:0041A890                 mov     ebx, [esp+4Ch+arg_0]
.text:0041A894                 mov     [esp+4Ch+var_40], ecx
.text:0041A898                 mov     [esp+4Ch+var_44], edx
.text:0041A89C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0041A89F                 call    sprintf
.text:0041A8A4                 add     esp, 48h
.text:0041A8A7                 shr     eax, 1Fh
.text:0041A8AA                 pop     ebx
.text:0041A8AB                 retn
.text:0041A8AC ; ---------------------------------------------------------------------------
.text:0041A8AC
.text:0041A8AC loc_41A8AC:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0041A8AC                                         ; ___addmntentstr+D6↑j ...
.text:0041A8AC                 test    al, al
.text:0041A8AE                 jz      short loc_41A864
.text:0041A8B0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041A8B3                 mov     ebx, edx
.text:0041A8B5                 call    strlen
.text:0041A8BA                 lea     edx, ds:1[eax*4]
.text:0041A8C1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041A8C4                 call    malloc
.text:0041A8C9                 mov     [esp+4Ch+Str], eax
.text:0041A8CD                 mov     edx, eax
.text:0041A8CF                 nop
.text:0041A8D0
.text:0041A8D0 loc_41A8D0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0041A8D0                 movzx   eax, byte ptr [ebx]
.text:0041A8D3                 cmp     al, 20h ; ' '
.text:0041A8D5                 jz      short loc_41A90D
.text:0041A8D7                 cmp     al, 9
.text:0041A8D9                 jz      short loc_41A8FC
.text:0041A8DB                 cmp     al, 5Ch ; '\'
.text:0041A8DD                 jz      short loc_41A8F3
.text:0041A8DF                 mov     [edx], al
.text:0041A8E1
.text:0041A8E1 loc_41A8E1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0041A8E1                                         ; ___addmntentstr+18B↓j ...
.text:0041A8E1                 movzx   ecx, byte ptr [ebx]
.text:0041A8E4                 inc     edx
.text:0041A8E5                 inc     ebx
.text:0041A8E6                 test    cl, cl
.text:0041A8E8                 jnz     short loc_41A8D0
.text:0041A8EA                 mov     edx, [esp+4Ch+Str]
.text:0041A8EE                 jmp     loc_41A864
.text:0041A8F3 ; ---------------------------------------------------------------------------
.text:0041A8F3
.text:0041A8F3 loc_41A8F3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0041A8F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A8F6                 inc     edx
.text:0041A8F7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A8FA                 jmp     short loc_41A8E1
.text:0041A8FC ; ---------------------------------------------------------------------------
.text:0041A8FC
.text:0041A8FC loc_41A8FC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0041A8FC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A8FF                 inc     edx
.text:0041A900                 mov     byte ptr [edx], 30h ; '0'
.text:0041A903                 inc     edx
.text:0041A904                 mov     byte ptr [edx], 31h ; '1'
.text:0041A907                 inc     edx
.text:0041A908                 mov     byte ptr [edx], 32h ; '2'
.text:0041A90B                 jmp     short loc_41A8E1
.text:0041A90D ; ---------------------------------------------------------------------------
.text:0041A90D
.text:0041A90D loc_41A90D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0041A90D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A910                 inc     edx
.text:0041A911                 mov     byte ptr [edx], 30h ; '0'
.text:0041A914                 inc     edx
.text:0041A915                 mov     byte ptr [edx], 34h ; '4'
.text:0041A918                 inc     edx
.text:0041A919                 mov     byte ptr [edx], 30h ; '0'
.text:0041A91C                 jmp     short loc_41A8E1
.text:0041A91E ; ---------------------------------------------------------------------------
.text:0041A91E
.text:0041A91E loc_41A91E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0041A91E                                         ; ___addmntentstr+AA↑j ...
.text:0041A91E                 test    al, al
.text:0041A920                 jz      loc_41A840
.text:0041A926                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041A929                 mov     ebx, edx
.text:0041A92B                 call    strlen
.text:0041A930                 lea     edx, ds:1[eax*4]
.text:0041A937                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041A93A                 call    malloc
.text:0041A93F                 mov     [esp+4Ch+var_24], eax
.text:0041A943                 mov     edx, eax
.text:0041A945                 lea     esi, [esi+0]
.text:0041A949                 lea     edi, [edi+0]
.text:0041A950
.text:0041A950 loc_41A950:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0041A950                 movzx   eax, byte ptr [ebx]
.text:0041A953                 cmp     al, 20h ; ' '
.text:0041A955                 jz      short loc_41A989
.text:0041A957                 cmp     al, 9
.text:0041A959                 jz      short loc_41A978
.text:0041A95B                 cmp     al, 5Ch ; '\'
.text:0041A95D                 jz      short loc_41A96F
.text:0041A95F                 mov     [edx], al
.text:0041A961
.text:0041A961 loc_41A961:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0041A961                                         ; ___addmntentstr+207↓j ...
.text:0041A961                 movzx   ecx, byte ptr [ebx]
.text:0041A964                 inc     edx
.text:0041A965                 inc     ebx
.text:0041A966                 test    cl, cl
.text:0041A968                 jnz     short loc_41A950
.text:0041A96A                 jmp     loc_41A840
.text:0041A96F ; ---------------------------------------------------------------------------
.text:0041A96F
.text:0041A96F loc_41A96F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0041A96F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A972                 inc     edx
.text:0041A973                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A976                 jmp     short loc_41A961
.text:0041A978 ; ---------------------------------------------------------------------------
.text:0041A978
.text:0041A978 loc_41A978:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0041A978                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A97B                 inc     edx
.text:0041A97C                 mov     byte ptr [edx], 30h ; '0'
.text:0041A97F                 inc     edx
.text:0041A980                 mov     byte ptr [edx], 31h ; '1'
.text:0041A983                 inc     edx
.text:0041A984                 mov     byte ptr [edx], 32h ; '2'
.text:0041A987                 jmp     short loc_41A961
.text:0041A989 ; ---------------------------------------------------------------------------
.text:0041A989
.text:0041A989 loc_41A989:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0041A989                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A98C                 inc     edx
.text:0041A98D                 mov     byte ptr [edx], 30h ; '0'
.text:0041A990                 inc     edx
.text:0041A991                 mov     byte ptr [edx], 34h ; '4'
.text:0041A994                 inc     edx
.text:0041A995                 mov     byte ptr [edx], 30h ; '0'
.text:0041A998                 jmp     short loc_41A961
.text:0041A99A ; ---------------------------------------------------------------------------
.text:0041A99A
.text:0041A99A loc_41A99A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0041A99A                                         ; ___addmntentstr+7A↑j ...
.text:0041A99A                 test    al, al
.text:0041A99C                 jz      loc_41A810
.text:0041A9A2                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041A9A5                 mov     ebx, edx
.text:0041A9A7                 call    strlen
.text:0041A9AC                 lea     edx, ds:1[eax*4]
.text:0041A9B3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041A9B6                 call    malloc
.text:0041A9BB                 mov     [esp+4Ch+var_28], eax
.text:0041A9BF                 mov     edx, eax
.text:0041A9C1                 jmp     short loc_41A9D0
.text:0041A9C1 ; ---------------------------------------------------------------------------
.text:0041A9C3                 align 10h
.text:0041A9D0
.text:0041A9D0 loc_41A9D0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0041A9D0                                         ; ___addmntentstr+268↓j
.text:0041A9D0                 movzx   eax, byte ptr [ebx]
.text:0041A9D3                 cmp     al, 20h ; ' '
.text:0041A9D5                 jz      short loc_41AA09
.text:0041A9D7                 cmp     al, 9
.text:0041A9D9                 jz      short loc_41A9F8
.text:0041A9DB                 cmp     al, 5Ch ; '\'
.text:0041A9DD                 jz      short loc_41A9EF
.text:0041A9DF                 mov     [edx], al
.text:0041A9E1
.text:0041A9E1 loc_41A9E1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0041A9E1                                         ; ___addmntentstr+287↓j ...
.text:0041A9E1                 movzx   ecx, byte ptr [ebx]
.text:0041A9E4                 inc     edx
.text:0041A9E5                 inc     ebx
.text:0041A9E6                 test    cl, cl
.text:0041A9E8                 jnz     short loc_41A9D0
.text:0041A9EA                 jmp     loc_41A810
.text:0041A9EF ; ---------------------------------------------------------------------------
.text:0041A9EF
.text:0041A9EF loc_41A9EF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0041A9EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A9F2                 inc     edx
.text:0041A9F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A9F6                 jmp     short loc_41A9E1
.text:0041A9F8 ; ---------------------------------------------------------------------------
.text:0041A9F8
.text:0041A9F8 loc_41A9F8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0041A9F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A9FB                 inc     edx
.text:0041A9FC                 mov     byte ptr [edx], 30h ; '0'
.text:0041A9FF                 inc     edx
.text:0041AA00                 mov     byte ptr [edx], 31h ; '1'
.text:0041AA03                 inc     edx
.text:0041AA04                 mov     byte ptr [edx], 32h ; '2'
.text:0041AA07                 jmp     short loc_41A9E1
.text:0041AA09 ; ---------------------------------------------------------------------------
.text:0041AA09
.text:0041AA09 loc_41AA09:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0041AA09                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041AA0C                 inc     edx
.text:0041AA0D                 mov     byte ptr [edx], 30h ; '0'
.text:0041AA10                 inc     edx
.text:0041AA11                 mov     byte ptr [edx], 34h ; '4'
.text:0041AA14                 inc     edx
.text:0041AA15                 mov     byte ptr [edx], 30h ; '0'
.text:0041AA18                 jmp     short loc_41A9E1
.text:0041AA18 ; ---------------------------------------------------------------------------
.text:0041AA1A                 align 10h
.text:0041AA20
.text:0041AA20 loc_41AA20:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0041AA20                                         ; ___addmntentstr+4A↑j ...
.text:0041AA20                 test    al, al
.text:0041AA22                 jz      loc_41A7E0
.text:0041AA28                 mov     ebx, [esp+4Ch+var_2C]
.text:0041AA2C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0041AA2F                 call    strlen
.text:0041AA34                 lea     edx, ds:1[eax*4]
.text:0041AA3B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041AA3E                 call    malloc
.text:0041AA43                 mov     [esp+4Ch+var_2C], eax
.text:0041AA47                 mov     edx, eax
.text:0041AA49                 lea     esi, [esi+0]
.text:0041AA50
.text:0041AA50 loc_41AA50:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0041AA50                 movzx   eax, byte ptr [ebx]
.text:0041AA53                 cmp     al, 20h ; ' '
.text:0041AA55                 jz      short loc_41AA90
.text:0041AA57                 cmp     al, 9
.text:0041AA59                 jz      short loc_41AA78
.text:0041AA5B                 cmp     al, 5Ch ; '\'
.text:0041AA5D                 jz      short loc_41AA6F
.text:0041AA5F                 mov     [edx], al
.text:0041AA61
.text:0041AA61 loc_41AA61:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0041AA61                                         ; ___addmntentstr+307↓j ...
.text:0041AA61                 movzx   ecx, byte ptr [ebx]
.text:0041AA64                 inc     edx
.text:0041AA65                 inc     ebx
.text:0041AA66                 test    cl, cl
.text:0041AA68                 jnz     short loc_41AA50
.text:0041AA6A                 jmp     loc_41A7E0
.text:0041AA6F ; ---------------------------------------------------------------------------
.text:0041AA6F
.text:0041AA6F loc_41AA6F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0041AA6F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041AA72                 inc     edx
.text:0041AA73                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041AA76                 jmp     short loc_41AA61
.text:0041AA78 ; ---------------------------------------------------------------------------
.text:0041AA78
.text:0041AA78 loc_41AA78:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0041AA78                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041AA7B                 inc     edx
.text:0041AA7C                 mov     byte ptr [edx], 30h ; '0'
.text:0041AA7F                 inc     edx
.text:0041AA80                 mov     byte ptr [edx], 31h ; '1'
.text:0041AA83                 inc     edx
.text:0041AA84                 mov     byte ptr [edx], 32h ; '2'
.text:0041AA87                 jmp     short loc_41AA61
.text:0041AA87 ; ---------------------------------------------------------------------------
.text:0041AA89                 align 10h
.text:0041AA90
.text:0041AA90 loc_41AA90:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0041AA90                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041AA93                 inc     edx
.text:0041AA94                 mov     byte ptr [edx], 30h ; '0'
.text:0041AA97                 inc     edx
.text:0041AA98                 mov     byte ptr [edx], 34h ; '4'
.text:0041AA9B                 inc     edx
.text:0041AA9C                 mov     byte ptr [edx], 30h ; '0'
.text:0041AA9F                 jmp     short loc_41AA61
.text:0041AAA1 ; ---------------------------------------------------------------------------
.text:0041AAA1
.text:0041AAA1 loc_41AAA1:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0041AAA1                 movzx   eax, byte ptr [ecx]
.text:0041AAA4                 jmp     loc_41AA20
.text:0041AAA4 ___addmntentstr endp
.text:0041AAA4
.text:0041AAA4 ; ---------------------------------------------------------------------------
.text:0041AAA9                 align 10h
.text:0041AAB0
.text:0041AAB0 ; =============== S U B R O U T I N E =======================================
.text:0041AAB0
.text:0041AAB0
.text:0041AAB0 sub_41AAB0      proc near               ; CODE XREF: sub_4193E0+99↑p
.text:0041AAB0
.text:0041AAB0 nBufferLength   = dword ptr -1Ch
.text:0041AAB0 lpBuffer        = dword ptr -18h
.text:0041AAB0 dwBytes         = dword ptr -14h
.text:0041AAB0 var_8           = dword ptr -8
.text:0041AAB0 var_4           = dword ptr -4
.text:0041AAB0
.text:0041AAB0                 sub     esp, 1Ch
.text:0041AAB3                 mov     [esp+1Ch+var_8], ebx
.text:0041AAB7                 mov     [esp+1Ch+var_4], esi
.text:0041AABB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0041AAC3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0041AACA                 call    GetLogicalDriveStringsA
.text:0041AACF                 sub     esp, 8
.text:0041AAD2                 mov     ebx, eax
.text:0041AAD4                 call    GetProcessHeap
.text:0041AAD9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0041AADC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0041AAE0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0041AAE8                 call    HeapAlloc
.text:0041AAED                 sub     esp, 0Ch
.text:0041AAF0                 mov     esi, eax
.text:0041AAF2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0041AAF5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0041AAF9                 call    GetLogicalDriveStringsA
.text:0041AAFE                 sub     esp, 8
.text:0041AB01                 mov     eax, esi
.text:0041AB03                 mov     ebx, [esp+1Ch+var_8]
.text:0041AB07                 mov     esi, [esp+1Ch+var_4]
.text:0041AB0B                 add     esp, 1Ch
.text:0041AB0E                 retn
.text:0041AB0E sub_41AAB0      endp
.text:0041AB0E
.text:0041AB0F
.text:0041AB0F ; =============== S U B R O U T I N E =======================================
.text:0041AB0F
.text:0041AB0F
.text:0041AB0F ; int __cdecl sub_41AB0F(char *, char *)
.text:0041AB0F sub_41AB0F      proc near               ; DATA XREF: sub_41AB0F:loc_41AB9D↓o
.text:0041AB0F
.text:0041AB0F FileName        = dword ptr -1Ch
.text:0041AB0F Mode            = dword ptr -18h
.text:0041AB0F dwBytes         = dword ptr -14h
.text:0041AB0F arg_0           = dword ptr  4
.text:0041AB0F arg_4           = dword ptr  8
.text:0041AB0F
.text:0041AB0F                 ja      short $+2
.text:0041AB11
.text:0041AB11 loc_41AB11:                             ; CODE XREF: sub_41AB0F↑j
.text:0041AB11                 jmp     short loc_41AB20
.text:0041AB11 ; ---------------------------------------------------------------------------
.text:0041AB13                 align 10h
.text:0041AB20
.text:0041AB20 loc_41AB20:                             ; CODE XREF: sub_41AB0F:loc_41AB11↑j
.text:0041AB20                 push    edi
.text:0041AB21                 push    esi
.text:0041AB22                 push    ebx
.text:0041AB23                 sub     esp, 10h
.text:0041AB26                 mov     ebx, [esp+1Ch+arg_0]
.text:0041AB2A                 mov     edx, [esp+1Ch+arg_4]
.text:0041AB2E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0041AB31                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0041AB35                 call    fopen
.text:0041AB3A                 test    eax, eax
.text:0041AB3C                 mov     edi, eax
.text:0041AB3E                 jz      short loc_41AB9D
.text:0041AB40
.text:0041AB40 loc_41AB40:                             ; CODE XREF: sub_41AB0F+A2↓j
.text:0041AB40                                         ; sub_41AB0F+AB↓j
.text:0041AB40                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0041AB48                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0041AB4F                 call    GetLogicalDriveStringsA
.text:0041AB54                 sub     esp, 8
.text:0041AB57                 mov     esi, eax
.text:0041AB59                 call    GetProcessHeap
.text:0041AB5E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0041AB61                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0041AB65                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0041AB6D                 call    HeapAlloc
.text:0041AB72                 sub     esp, 0Ch
.text:0041AB75                 mov     ebx, eax
.text:0041AB77                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0041AB7A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0041AB7E                 call    GetLogicalDriveStringsA
.text:0041AB83                 mov     off_41E114, ebx ; "notset"
.text:0041AB89                 sub     esp, 8
.text:0041AB8C                 xor     eax, eax
.text:0041AB8E                 test    ebx, ebx
.text:0041AB90                 setz    al
.text:0041AB93                 add     esp, 10h
.text:0041AB96                 pop     ebx
.text:0041AB97                 dec     eax
.text:0041AB98                 and     eax, edi
.text:0041AB9A                 pop     esi
.text:0041AB9B                 pop     edi
.text:0041AB9C                 retn
.text:0041AB9D ; ---------------------------------------------------------------------------
.text:0041AB9D
.text:0041AB9D loc_41AB9D:                             ; CODE XREF: sub_41AB0F+2F↑j
.text:0041AB9D                 mov     [esp+1Ch+Mode], offset sub_41AB0F ; Mode
.text:0041ABA5                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0041ABA8                 call    fopen
.text:0041ABAD                 test    eax, eax
.text:0041ABAF                 mov     edi, eax
.text:0041ABB1                 jnz     short loc_41AB40
.text:0041ABB3                 call    sub_41AE80
.text:0041ABB8                 mov     edi, eax
.text:0041ABBA                 jmp     short loc_41AB40
.text:0041ABBA sub_41AB0F      endp
.text:0041ABBA
.text:0041ABBA ; ---------------------------------------------------------------------------
.text:0041ABBC                 align 10h
.text:0041ABC0                 sub     esp, 0Ch
.text:0041ABC3                 mov     eax, [esp+10h]
.text:0041ABC7                 test    eax, eax
.text:0041ABC9                 jz      short loc_41ABD3
.text:0041ABCB                 mov     [esp], eax
.text:0041ABCE                 call    fclose
.text:0041ABD3
.text:0041ABD3 loc_41ABD3:                             ; CODE XREF: .text:0041ABC9↑j
.text:0041ABD3                 call    GetProcessHeap
.text:0041ABD8                 mov     [esp], eax
.text:0041ABDB                 mov     ecx, off_41E114 ; "notset"
.text:0041ABE1                 mov     dword ptr [esp+4], 0
.text:0041ABE9                 mov     [esp+8], ecx
.text:0041ABED                 call    HeapFree
.text:0041ABF2                 mov     edx, off_41E110 ; "notset"
.text:0041ABF8                 sub     esp, 0Ch
.text:0041ABFB                 mov     eax, 1
.text:0041AC00                 mov     off_41E114, edx ; "notset"
.text:0041AC06                 add     esp, 0Ch
.text:0041AC09                 retn
.text:0041AC09 ; ---------------------------------------------------------------------------
.text:0041AC0A                 align 10h
.text:0041AC10                 push    edi
.text:0041AC11                 push    esi
.text:0041AC12                 push    ebx
.text:0041AC13                 sub     esp, 10h
.text:0041AC16                 mov     edi, [esp+24h]
.text:0041AC1A                 mov     [esp], edi
.text:0041AC1D                 call    strlen
.text:0041AC22                 mov     edx, [esp+20h]
.text:0041AC26                 mov     esi, eax
.text:0041AC28                 mov     ebx, [edx+0Ch]
.text:0041AC2B                 nop
.text:0041AC2C                 lea     esi, [esi+0]
.text:0041AC30
.text:0041AC30 loc_41AC30:                             ; CODE XREF: .text:0041AC61↓j
.text:0041AC30                 mov     [esp+4], edi
.text:0041AC34                 mov     [esp], ebx
.text:0041AC37                 call    strstr
.text:0041AC3C                 test    eax, eax
.text:0041AC3E                 jz      short loc_41AC63
.text:0041AC40                 cmp     eax, ebx
.text:0041AC42                 jz      short loc_41AC65
.text:0041AC44                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0041AC48                 jz      short loc_41AC70
.text:0041AC4A
.text:0041AC4A loc_41AC4A:                             ; CODE XREF: .text:0041AC80↓j
.text:0041AC4A                 mov     [esp], ebx
.text:0041AC4D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0041AC55                 call    strchr
.text:0041AC5A                 test    eax, eax
.text:0041AC5C                 mov     ebx, eax
.text:0041AC5E                 jz      short loc_41AC63
.text:0041AC60                 inc     ebx
.text:0041AC61                 jmp     short loc_41AC30
.text:0041AC63 ; ---------------------------------------------------------------------------
.text:0041AC63
.text:0041AC63 loc_41AC63:                             ; CODE XREF: .text:0041AC3E↑j
.text:0041AC63                                         ; .text:0041AC5E↑j
.text:0041AC63                 xor     eax, eax
.text:0041AC65
.text:0041AC65 loc_41AC65:                             ; CODE XREF: .text:0041AC42↑j
.text:0041AC65                                         ; .text:0041AC76↓j ...
.text:0041AC65                 add     esp, 10h
.text:0041AC68                 pop     ebx
.text:0041AC69                 pop     esi
.text:0041AC6A                 pop     edi
.text:0041AC6B                 retn
.text:0041AC6B ; ---------------------------------------------------------------------------
.text:0041AC6C                 align 10h
.text:0041AC70
.text:0041AC70 loc_41AC70:                             ; CODE XREF: .text:0041AC48↑j
.text:0041AC70                 movzx   edx, byte ptr [esi+eax]
.text:0041AC74                 test    dl, dl
.text:0041AC76                 jz      short loc_41AC65
.text:0041AC78                 cmp     dl, 3Dh ; '='
.text:0041AC7B                 jz      short loc_41AC65
.text:0041AC7D                 cmp     dl, 2Ch ; ','
.text:0041AC80                 jnz     short loc_41AC4A
.text:0041AC82                 jmp     short loc_41AC65
.text:0041AC82 ; ---------------------------------------------------------------------------
.text:0041AC84                 align 10h
.text:0041AC90 ; const char aFxstat64BadFil[]
.text:0041AC90 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0041AC90                                         ; DATA XREF: sub_41ACC0+7B↓o
.text:0041ACB4                 align 10h
.text:0041ACC0
.text:0041ACC0 ; =============== S U B R O U T I N E =======================================
.text:0041ACC0
.text:0041ACC0
.text:0041ACC0 ; int __cdecl sub_41ACC0(HANDLE hNamedPipe, int, int)
.text:0041ACC0 sub_41ACC0      proc near               ; CODE XREF: .text:004195F9↑p
.text:0041ACC0
.text:0041ACC0 FileHandle      = dword ptr -1Ch
.text:0041ACC0 var_18          = dword ptr -18h
.text:0041ACC0 var_C           = dword ptr -0Ch
.text:0041ACC0 var_8           = dword ptr -8
.text:0041ACC0 var_4           = dword ptr -4
.text:0041ACC0 hNamedPipe      = dword ptr  4
.text:0041ACC0 arg_4           = dword ptr  8
.text:0041ACC0 arg_8           = dword ptr  0Ch
.text:0041ACC0
.text:0041ACC0                 sub     esp, 1Ch
.text:0041ACC3                 mov     edx, [esp+1Ch+arg_4]
.text:0041ACC7                 mov     [esp+1Ch+var_C], ebx
.text:0041ACCB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0041ACCF                 mov     [esp+1Ch+var_8], esi
.text:0041ACD3                 mov     esi, [esp+1Ch+arg_8]
.text:0041ACD7                 test    ebx, ebx
.text:0041ACD9                 mov     [esp+1Ch+var_4], edi
.text:0041ACDD                 jnz     short loc_41AD17
.text:0041ACDF                 test    edx, edx
.text:0041ACE1                 js      short loc_41AD37
.text:0041ACE3                 test    esi, esi
.text:0041ACE5                 jz      short loc_41AD17
.text:0041ACE7                 cld
.text:0041ACE8                 mov     eax, ebx
.text:0041ACEA                 mov     edi, esi
.text:0041ACEC                 mov     ecx, 18h
.text:0041ACF1                 rep stosd
.text:0041ACF3                 mov     [esp+1Ch+arg_4], esi ; int
.text:0041ACF7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0041ACFA                 call    _get_osfhandle
.text:0041ACFF                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0041AD03                 mov     ebx, [esp+1Ch+var_C]
.text:0041AD07                 mov     esi, [esp+1Ch+var_8]
.text:0041AD0B                 mov     edi, [esp+1Ch+var_4]
.text:0041AD0F                 add     esp, 1Ch
.text:0041AD12                 jmp     sub_40DB80
.text:0041AD17 ; ---------------------------------------------------------------------------
.text:0041AD17
.text:0041AD17 loc_41AD17:                             ; CODE XREF: sub_41ACC0+1D↑j
.text:0041AD17                                         ; sub_41ACC0+25↑j
.text:0041AD17                 call    _errno
.text:0041AD1C                 mov     dword ptr [eax], 16h
.text:0041AD22
.text:0041AD22 loc_41AD22:                             ; CODE XREF: sub_41ACC0+92↓j
.text:0041AD22                 mov     ebx, [esp+1Ch+var_C]
.text:0041AD26                 mov     eax, 0FFFFFFFFh
.text:0041AD2B                 mov     esi, [esp+1Ch+var_8]
.text:0041AD2F                 mov     edi, [esp+1Ch+var_4]
.text:0041AD33                 add     esp, 1Ch
.text:0041AD36                 retn
.text:0041AD37 ; ---------------------------------------------------------------------------
.text:0041AD37
.text:0041AD37 loc_41AD37:                             ; CODE XREF: sub_41ACC0+21↑j
.text:0041AD37                 mov     [esp+1Ch+var_18], edx
.text:0041AD3B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0041AD42                 call    printf
.text:0041AD47                 call    _errno
.text:0041AD4C                 mov     dword ptr [eax], 9
.text:0041AD52                 jmp     short loc_41AD22
.text:0041AD52 sub_41ACC0      endp
.text:0041AD52
.text:0041AD52 ; ---------------------------------------------------------------------------
.text:0041AD54                 db 1Ch dup(90h)
.text:0041AD70
.text:0041AD70 ; =============== S U B R O U T I N E =======================================
.text:0041AD70
.text:0041AD70 ; Attributes: noreturn
.text:0041AD70
.text:0041AD70 sub_41AD70      proc near               ; CODE XREF: .text:0041A479↑p
.text:0041AD70                                         ; sub_41AD70↓j
.text:0041AD70                 jmp     short sub_41AD70
.text:0041AD70 sub_41AD70      endp
.text:0041AD70
.text:0041AD70 ; ---------------------------------------------------------------------------
.text:0041AD72                 align 10h
.text:0041AD80
.text:0041AD80 ; =============== S U B R O U T I N E =======================================
.text:0041AD80
.text:0041AD80
.text:0041AD80 sub_41AD80      proc near               ; CODE XREF: .text:0041A1D5↑p
.text:0041AD80
.text:0041AD80 FileHandle      = dword ptr -1Ch
.text:0041AD80 dwFileOffsetLow = dword ptr -18h
.text:0041AD80 dwFileOffsetHigh= dword ptr -14h
.text:0041AD80 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0041AD80 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0041AD80 var_8           = dword ptr -8
.text:0041AD80 var_4           = dword ptr -4
.text:0041AD80 arg_0           = dword ptr  4
.text:0041AD80
.text:0041AD80                 sub     esp, 1Ch
.text:0041AD83                 mov     edx, [esp+1Ch+arg_0]
.text:0041AD87                 mov     [esp+1Ch+var_4], esi
.text:0041AD8B                 mov     [esp+1Ch+var_8], ebx
.text:0041AD8F                 mov     ebx, [edx+10h]
.text:0041AD92                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041AD95                 call    _get_osfhandle
.text:0041AD9A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041AD9D                 mov     esi, eax
.text:0041AD9F                 call    _filelengthi64
.text:0041ADA4                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0041ADA8                 cdq
.text:0041ADA9                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0041ADAC                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0041ADB0                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0041ADB8                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0041ADC0                 call    UnlockFile
.text:0041ADC5                 sub     esp, 14h
.text:0041ADC8                 mov     ebx, [esp+1Ch+var_8]
.text:0041ADCC                 mov     esi, [esp+1Ch+var_4]
.text:0041ADD0                 add     esp, 1Ch
.text:0041ADD3                 retn
.text:0041ADD3 sub_41AD80      endp
.text:0041ADD3
.text:0041ADD3 ; ---------------------------------------------------------------------------
.text:0041ADD4                 align 10h
.text:0041ADE0
.text:0041ADE0 ; =============== S U B R O U T I N E =======================================
.text:0041ADE0
.text:0041ADE0
.text:0041ADE0 ; int __cdecl sub_41ADE0(int, char *Control)
.text:0041ADE0 sub_41ADE0      proc near               ; CODE XREF: .text:0041A096↑p
.text:0041ADE0                                         ; .text:0041A0E6↑p ...
.text:0041ADE0
.text:0041ADE0 Str             = dword ptr -1Ch
.text:0041ADE0 Val             = dword ptr -18h
.text:0041ADE0 var_8           = dword ptr -8
.text:0041ADE0 var_4           = dword ptr -4
.text:0041ADE0 arg_0           = dword ptr  4
.text:0041ADE0 Control         = dword ptr  8
.text:0041ADE0
.text:0041ADE0                 sub     esp, 1Ch
.text:0041ADE3                 xor     eax, eax
.text:0041ADE5                 mov     edx, [esp+1Ch+Control]
.text:0041ADE9                 mov     [esp+1Ch+var_4], esi
.text:0041ADED                 mov     esi, [esp+1Ch+arg_0]
.text:0041ADF1                 mov     [esp+1Ch+var_8], ebx
.text:0041ADF5                 mov     ebx, [esi]
.text:0041ADF7                 test    ebx, ebx
.text:0041ADF9                 jz      short loc_41AE28
.text:0041ADFB                 movzx   eax, byte ptr [edx]
.text:0041ADFE                 test    al, al
.text:0041AE00                 jz      short loc_41AE20
.text:0041AE02                 cmp     byte ptr [edx+1], 0
.text:0041AE06                 jnz     short loc_41AE60
.text:0041AE08                 movzx   ecx, byte ptr [ebx]
.text:0041AE0B                 mov     edx, ebx
.text:0041AE0D                 cmp     cl, al
.text:0041AE0F                 jz      short loc_41AE52
.text:0041AE11                 test    cl, cl
.text:0041AE13                 jnz     short loc_41AE34
.text:0041AE15                 lea     esi, [esi+0]
.text:0041AE19                 lea     edi, [edi+0]
.text:0041AE20
.text:0041AE20 loc_41AE20:                             ; CODE XREF: sub_41ADE0+20↑j
.text:0041AE20                                         ; sub_41ADE0+74↓j
.text:0041AE20                 mov     dword ptr [esi], 0
.text:0041AE26
.text:0041AE26 loc_41AE26:                             ; CODE XREF: sub_41ADE0+7C↓j
.text:0041AE26                 mov     eax, ebx
.text:0041AE28
.text:0041AE28 loc_41AE28:                             ; CODE XREF: sub_41ADE0+19↑j
.text:0041AE28                 mov     ebx, [esp+1Ch+var_8]
.text:0041AE2C                 mov     esi, [esp+1Ch+var_4]
.text:0041AE30                 add     esp, 1Ch
.text:0041AE33                 retn
.text:0041AE34 ; ---------------------------------------------------------------------------
.text:0041AE34
.text:0041AE34 loc_41AE34:                             ; CODE XREF: sub_41ADE0+33↑j
.text:0041AE34                 movsx   edx, al
.text:0041AE37                 mov     [esp+1Ch+Val], edx ; Val
.text:0041AE3B                 lea     edx, [ebx+1]
.text:0041AE3E                 mov     [esp+1Ch+Str], edx ; Str
.text:0041AE41                 call    strchr
.text:0041AE46                 lea     esi, [esi+0]
.text:0041AE49                 lea     edi, [edi+0]
.text:0041AE50
.text:0041AE50 loc_41AE50:                             ; CODE XREF: sub_41ADE0+8C↓j
.text:0041AE50                 mov     edx, eax
.text:0041AE52
.text:0041AE52 loc_41AE52:                             ; CODE XREF: sub_41ADE0+2F↑j
.text:0041AE52                 test    edx, edx
.text:0041AE54                 jz      short loc_41AE20
.text:0041AE56                 mov     byte ptr [edx], 0
.text:0041AE59                 inc     edx
.text:0041AE5A                 mov     [esi], edx
.text:0041AE5C                 jmp     short loc_41AE26
.text:0041AE5C ; ---------------------------------------------------------------------------
.text:0041AE5E                 align 10h
.text:0041AE60
.text:0041AE60 loc_41AE60:                             ; CODE XREF: sub_41ADE0+26↑j
.text:0041AE60                 mov     [esp+1Ch+Val], edx ; Control
.text:0041AE64                 mov     [esp+1Ch+Str], ebx ; Str
.text:0041AE67                 call    strpbrk
.text:0041AE6C                 jmp     short loc_41AE50
.text:0041AE6C sub_41ADE0      endp
.text:0041AE6C
.text:0041AE6C ; ---------------------------------------------------------------------------
.text:0041AE6E                 align 10h
.text:0041AE70 ; const char aTmpf[]
.text:0041AE70 aTmpf           db 'tmpf',0             ; DATA XREF: sub_41AE80+20↓o
.text:0041AE75 ; const char aWBd[]
.text:0041AE75 aWBd            db 'w+bD',0             ; DATA XREF: sub_41AE80+5E↓o
.text:0041AE7A                 align 10h
.text:0041AE80
.text:0041AE80 ; =============== S U B R O U T I N E =======================================
.text:0041AE80
.text:0041AE80
.text:0041AE80 sub_41AE80      proc near               ; CODE XREF: sub_41AB0F+A4↑p
.text:0041AE80
.text:0041AE80 FileHandle      = dword ptr -13Ch
.text:0041AE80 Format          = dword ptr -138h
.text:0041AE80 var_134         = dword ptr -134h
.text:0041AE80 var_130         = dword ptr -130h
.text:0041AE80 var_12C         = dword ptr -12Ch
.text:0041AE80 FileName        = byte ptr -11Ch
.text:0041AE80 var_8           = dword ptr -8
.text:0041AE80 var_4           = dword ptr -4
.text:0041AE80
.text:0041AE80                 sub     esp, 13Ch
.text:0041AE86                 mov     [esp+13Ch+var_8], ebx
.text:0041AE8D                 lea     ebx, [esp+13Ch+FileName]
.text:0041AE91                 mov     [esp+13Ch+var_4], esi
.text:0041AE98                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0041AEA0                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0041AEA8                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0041AEB0                 mov     [esp+13Ch+Format], 104h ; int
.text:0041AEB8                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0041AEBB                 call    sub_41AF50
.text:0041AEC0                 xor     edx, edx
.text:0041AEC2                 test    eax, eax
.text:0041AEC4                 jnz     short loc_41AEF6
.text:0041AEC6                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0041AEC9                 mov     [esp+13Ch+Format], 0 ; int
.text:0041AED1                 call    sub_41B2D0
.text:0041AED6                 xor     edx, edx
.text:0041AED8                 mov     ebx, eax
.text:0041AEDA                 test    eax, eax
.text:0041AEDC                 js      short loc_41AEF6
.text:0041AEDE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0041AEE6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0041AEE9                 call    _fdopen
.text:0041AEEE                 test    eax, eax
.text:0041AEF0                 mov     esi, eax
.text:0041AEF2                 jz      short loc_41AF0D
.text:0041AEF4
.text:0041AEF4 loc_41AEF4:                             ; CODE XREF: sub_41AE80+95↓j
.text:0041AEF4                 mov     edx, esi
.text:0041AEF6
.text:0041AEF6 loc_41AEF6:                             ; CODE XREF: sub_41AE80+44↑j
.text:0041AEF6                                         ; sub_41AE80+5C↑j
.text:0041AEF6                 mov     ebx, [esp+13Ch+var_8]
.text:0041AEFD                 mov     eax, edx
.text:0041AEFF                 mov     esi, [esp+13Ch+var_4]
.text:0041AF06                 add     esp, 13Ch
.text:0041AF0C                 retn
.text:0041AF0D ; ---------------------------------------------------------------------------
.text:0041AF0D
.text:0041AF0D loc_41AF0D:                             ; CODE XREF: sub_41AE80+72↑j
.text:0041AF0D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0041AF10                 call    _close
.text:0041AF15                 jmp     short loc_41AEF4
.text:0041AF15 sub_41AE80      endp
.text:0041AF15
.text:0041AF15 ; ---------------------------------------------------------------------------
.text:0041AF17                 align 10h
.text:0041AF20 aFile           db 'file',0             ; DATA XREF: sub_41AF50:loc_41AF7C↓o
.text:0041AF25 ; const char aSSxxxxxx[]
.text:0041AF25 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_41AF50+9B↓o
.text:0041AF35 ; const char aTemp[]
.text:0041AF35 aTemp           db 'TEMP',0             ; DATA XREF: sub_41AF50:loc_41B032↓o
.text:0041AF35                                         ; sub_41AF50:loc_41B072↓o ...
.text:0041AF3A ; const char aTmp[]
.text:0041AF3A aTmp            db '/tmp',0             ; DATA XREF: sub_41AF50+12F↓o
.text:0041AF3A                                         ; sub_41AF50+141↓o ...
.text:0041AF3F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_41AF50:loc_41B0F0↓o
.text:0041AF46 aTmp_0          db 'TMP',0              ; DATA XREF: sub_41AF50:loc_41B180↓o
.text:0041AF4A                 align 10h
.text:0041AF50
.text:0041AF50 ; =============== S U B R O U T I N E =======================================
.text:0041AF50
.text:0041AF50
.text:0041AF50 ; int __cdecl sub_41AF50(char *Buffer, int, char *, char *, int)
.text:0041AF50 sub_41AF50      proc near               ; CODE XREF: sub_41AE80+3B↑p
.text:0041AF50
.text:0041AF50 Str             = dword ptr -1BCh
.text:0041AF50 Format          = dword ptr -1B8h
.text:0041AF50 var_1B4         = dword ptr -1B4h
.text:0041AF50 var_1B0         = dword ptr -1B0h
.text:0041AF50 var_1AC         = dword ptr -1ACh
.text:0041AF50 var_1A8         = dword ptr -1A8h
.text:0041AF50 var_19C         = dword ptr -19Ch
.text:0041AF50 var_13C         = dword ptr -13Ch
.text:0041AF50 var_DC          = dword ptr -0DCh
.text:0041AF50 var_7C          = dword ptr -7Ch
.text:0041AF50 Buffer          = dword ptr  4
.text:0041AF50 arg_4           = dword ptr  8
.text:0041AF50 arg_8           = dword ptr  0Ch
.text:0041AF50 arg_C           = dword ptr  10h
.text:0041AF50 arg_10          = dword ptr  14h
.text:0041AF50
.text:0041AF50                 push    ebp
.text:0041AF51                 push    edi
.text:0041AF52                 push    esi
.text:0041AF53                 push    ebx
.text:0041AF54                 sub     esp, 1ACh
.text:0041AF5A                 mov     eax, [esp+1BCh+arg_C]
.text:0041AF61                 mov     esi, [esp+1BCh+arg_8]
.text:0041AF68                 test    eax, eax
.text:0041AF6A                 jz      short loc_41AF7C
.text:0041AF6C                 mov     edx, [esp+1BCh+arg_C]
.text:0041AF73                 cmp     byte ptr [edx], 0
.text:0041AF76                 jnz     loc_41B1B0
.text:0041AF7C
.text:0041AF7C loc_41AF7C:                             ; CODE XREF: sub_41AF50+1A↑j
.text:0041AF7C                 mov     eax, offset aFile ; "file"
.text:0041AF81                 mov     ebp, 4
.text:0041AF86                 mov     [esp+1BCh+arg_C], eax
.text:0041AF8D
.text:0041AF8D loc_41AF8D:                             ; CODE XREF: sub_41AF50+274↓j
.text:0041AF8D                                         ; sub_41AF50+27F↓j
.text:0041AF8D                 mov     ebx, [esp+1BCh+arg_10]
.text:0041AF94                 test    ebx, ebx
.text:0041AF96                 jnz     loc_41B0F0
.text:0041AF9C
.text:0041AF9C loc_41AF9C:                             ; CODE XREF: sub_41AF50+21C↓j
.text:0041AF9C                                         ; sub_41AF50+224↓j ...
.text:0041AF9C                 test    esi, esi
.text:0041AF9E                 jz      loc_41B032
.text:0041AFA4
.text:0041AFA4 loc_41AFA4:                             ; CODE XREF: sub_41AF50+176↓j
.text:0041AFA4                                         ; sub_41AF50+19A↓j
.text:0041AFA4                 mov     [esp+1BCh+Str], esi ; Str
.text:0041AFA7                 call    strlen
.text:0041AFAC                 test    eax, eax
.text:0041AFAE                 mov     edx, eax
.text:0041AFB0                 jz      short loc_41AFC0
.text:0041AFB2                 movzx   eax, byte ptr [eax+esi-1]
.text:0041AFB7                 cmp     al, 2Fh ; '/'
.text:0041AFB9                 jz      short loc_41B020
.text:0041AFBB                 cmp     al, 5Ch ; '\'
.text:0041AFBD                 jz      short loc_41B020
.text:0041AFBF                 nop
.text:0041AFC0
.text:0041AFC0 loc_41AFC0:                             ; CODE XREF: sub_41AF50+60↑j
.text:0041AFC0                                         ; sub_41AF50+D1↓j ...
.text:0041AFC0                 lea     edi, [ebp+edx+8]
.text:0041AFC4                 cmp     [esp+1BCh+arg_4], edi
.text:0041AFCB                 jb      short loc_41B008
.text:0041AFCD                 mov     [esp+1BCh+var_1AC], ebp
.text:0041AFD1                 mov     ecx, [esp+1BCh+arg_C]
.text:0041AFD8                 mov     ebp, [esp+1BCh+Buffer]
.text:0041AFDF                 mov     [esp+1BCh+var_1B0], esi
.text:0041AFE3                 mov     [esp+1BCh+var_1A8], ecx
.text:0041AFE7                 mov     [esp+1BCh+var_1B4], edx
.text:0041AFEB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0041AFF3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0041AFF6                 call    sprintf
.text:0041AFFB                 xor     eax, eax
.text:0041AFFD
.text:0041AFFD loc_41AFFD:                             ; CODE XREF: sub_41AF50+C8↓j
.text:0041AFFD                 add     esp, 1ACh
.text:0041B003                 pop     ebx
.text:0041B004                 pop     esi
.text:0041B005                 pop     edi
.text:0041B006                 pop     ebp
.text:0041B007                 retn
.text:0041B008 ; ---------------------------------------------------------------------------
.text:0041B008
.text:0041B008 loc_41B008:                             ; CODE XREF: sub_41AF50+7B↑j
.text:0041B008                 call    _errno
.text:0041B00D                 mov     dword ptr [eax], 16h
.text:0041B013
.text:0041B013 loc_41B013:                             ; CODE XREF: sub_41AF50+187↓j
.text:0041B013                 mov     eax, 0FFFFFFFFh
.text:0041B018                 jmp     short loc_41AFFD
.text:0041B018 ; ---------------------------------------------------------------------------
.text:0041B01A                 align 10h
.text:0041B020
.text:0041B020 loc_41B020:                             ; CODE XREF: sub_41AF50+69↑j
.text:0041B020                                         ; sub_41AF50+6D↑j ...
.text:0041B020                 dec     edx
.text:0041B021                 jz      short loc_41AFC0
.text:0041B023                 movzx   eax, byte ptr [edx+esi-1]
.text:0041B028                 cmp     al, 2Fh ; '/'
.text:0041B02A                 jz      short loc_41B020
.text:0041B02C                 cmp     al, 5Ch ; '\'
.text:0041B02E                 jz      short loc_41B020
.text:0041B030                 jmp     short loc_41AFC0
.text:0041B032 ; ---------------------------------------------------------------------------
.text:0041B032
.text:0041B032 loc_41B032:                             ; CODE XREF: sub_41AF50+4E↑j
.text:0041B032                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041B039                 lea     esi, [esp+1BCh+var_13C]
.text:0041B040                 call    getenv
.text:0041B045                 mov     [esp+1BCh+Format], eax ; char *
.text:0041B049                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0041B04D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041B054                 call    sub_40C0F0
.text:0041B059                 test    eax, eax
.text:0041B05B                 jnz     short loc_41B072
.text:0041B05D                 mov     edi, [esp+1BCh+var_13C]
.text:0041B064                 and     edi, 0F000h
.text:0041B06A                 cmp     edi, 4000h
.text:0041B070                 jz      short loc_41B0DC
.text:0041B072
.text:0041B072 loc_41B072:                             ; CODE XREF: sub_41AF50+10B↑j
.text:0041B072                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041B079                 call    getenv
.text:0041B07E                 cld
.text:0041B07F                 mov     edx, offset aTmp ; "/tmp"
.text:0041B084                 mov     esi, eax
.text:0041B086                 mov     ecx, 5
.text:0041B08B                 mov     edi, edx
.text:0041B08D                 repe cmpsb
.text:0041B08F                 jz      short loc_41B0CC
.text:0041B091                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0041B099                 lea     ecx, [esp+1BCh+var_19C]
.text:0041B09D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0041B0A1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041B0A8                 call    sub_40C0F0
.text:0041B0AD                 test    eax, eax
.text:0041B0AF                 jnz     short loc_41B0CC
.text:0041B0B1                 mov     ebx, [esp+1BCh+var_19C]
.text:0041B0B5                 mov     esi, offset aTmp ; "/tmp"
.text:0041B0BA                 and     ebx, 0F000h
.text:0041B0C0                 cmp     ebx, 4000h
.text:0041B0C6                 jz      loc_41AFA4
.text:0041B0CC
.text:0041B0CC loc_41B0CC:                             ; CODE XREF: sub_41AF50+13F↑j
.text:0041B0CC                                         ; sub_41AF50+15F↑j
.text:0041B0CC                 call    _errno
.text:0041B0D1                 mov     dword ptr [eax], 2
.text:0041B0D7                 jmp     loc_41B013
.text:0041B0DC ; ---------------------------------------------------------------------------
.text:0041B0DC
.text:0041B0DC loc_41B0DC:                             ; CODE XREF: sub_41AF50+120↑j
.text:0041B0DC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041B0E3                 call    getenv
.text:0041B0E8                 mov     esi, eax
.text:0041B0EA                 jmp     loc_41AFA4
.text:0041B0EA ; ---------------------------------------------------------------------------
.text:0041B0EF                 align 10h
.text:0041B0F0
.text:0041B0F0 loc_41B0F0:                             ; CODE XREF: sub_41AF50+46↑j
.text:0041B0F0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0041B0F7                 call    sub_41B780
.text:0041B0FC                 test    eax, eax
.text:0041B0FE                 mov     ebx, eax
.text:0041B100                 jz      short loc_41B180
.text:0041B102
.text:0041B102 loc_41B102:                             ; CODE XREF: sub_41AF50+240↓j
.text:0041B102                                         ; sub_41AF50+256↓j
.text:0041B102                 mov     [esp+1BCh+Format], ebx ; char *
.text:0041B106                 lea     edi, [esp+1BCh+var_7C]
.text:0041B10D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0041B111                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041B118                 call    sub_40C0F0
.text:0041B11D                 test    eax, eax
.text:0041B11F                 jnz     short loc_41B136
.text:0041B121                 mov     edx, [esp+1BCh+var_7C]
.text:0041B128                 and     edx, 0F000h
.text:0041B12E                 cmp     edx, 4000h
.text:0041B134                 jz      short loc_41B179
.text:0041B136
.text:0041B136 loc_41B136:                             ; CODE XREF: sub_41AF50+1CF↑j
.text:0041B136                                         ; sub_41AF50+25C↓j
.text:0041B136                 test    esi, esi
.text:0041B138                 jz      short loc_41B172
.text:0041B13A                 mov     [esp+1BCh+Format], esi ; char *
.text:0041B13E                 lea     ecx, [esp+1BCh+var_DC]
.text:0041B145                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0041B149                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041B150                 call    sub_40C0F0
.text:0041B155                 test    eax, eax
.text:0041B157                 jnz     short loc_41B172
.text:0041B159                 mov     ebx, [esp+1BCh+var_DC]
.text:0041B160                 and     ebx, 0F000h
.text:0041B166                 cmp     ebx, 4000h
.text:0041B16C                 jz      loc_41AF9C
.text:0041B172
.text:0041B172 loc_41B172:                             ; CODE XREF: sub_41AF50+1E8↑j
.text:0041B172                                         ; sub_41AF50+207↑j
.text:0041B172                 xor     esi, esi
.text:0041B174                 jmp     loc_41AF9C
.text:0041B179 ; ---------------------------------------------------------------------------
.text:0041B179
.text:0041B179 loc_41B179:                             ; CODE XREF: sub_41AF50+1E4↑j
.text:0041B179                 mov     esi, ebx
.text:0041B17B                 jmp     loc_41AF9C
.text:0041B180 ; ---------------------------------------------------------------------------
.text:0041B180
.text:0041B180 loc_41B180:                             ; CODE XREF: sub_41AF50+1B0↑j
.text:0041B180                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0041B187                 call    sub_41B780
.text:0041B18C                 test    eax, eax
.text:0041B18E                 mov     ebx, eax
.text:0041B190                 jnz     loc_41B102
.text:0041B196                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041B19D                 call    sub_41B780
.text:0041B1A2                 test    eax, eax
.text:0041B1A4                 mov     ebx, eax
.text:0041B1A6                 jnz     loc_41B102
.text:0041B1AC                 jmp     short loc_41B136
.text:0041B1AC ; ---------------------------------------------------------------------------
.text:0041B1AE                 align 10h
.text:0041B1B0
.text:0041B1B0 loc_41B1B0:                             ; CODE XREF: sub_41AF50+26↑j
.text:0041B1B0                 mov     ecx, [esp+1BCh+arg_C]
.text:0041B1B7                 mov     [esp+1BCh+Str], ecx ; Str
.text:0041B1BA                 call    strlen
.text:0041B1BF                 cmp     eax, 5
.text:0041B1C2                 mov     ebp, eax
.text:0041B1C4                 jbe     loc_41AF8D
.text:0041B1CA                 mov     ebp, 5
.text:0041B1CF                 jmp     loc_41AF8D
.text:0041B1CF sub_41AF50      endp
.text:0041B1CF
.text:0041B1CF ; ---------------------------------------------------------------------------
.text:0041B1D4                 align 10h
.text:0041B1E0 byte_41B1E0     db 61h                  ; DATA XREF: sub_41B2D0+DC↓r
.text:0041B1E0                                         ; sub_41B2D0+122↓r ...
.text:0041B1E1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0041B21F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_41B2D0+39↓o
.text:0041B226                 align 20h
.text:0041B240 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0041B240                                         ; DATA XREF: sub_41B2D0:loc_41B548↓o
.text:0041B25F                 align 10h
.text:0041B260 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0041B260                                         ; DATA XREF: sub_41B2D0+405↓o
.text:0041B28B                 align 20h
.text:0041B2A0 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0041B2A0                                         ; DATA XREF: sub_41B2D0+40D↓o
.text:0041B2C3                 align 10h
.text:0041B2D0
.text:0041B2D0 ; =============== S U B R O U T I N E =======================================
.text:0041B2D0
.text:0041B2D0
.text:0041B2D0 ; int __cdecl sub_41B2D0(char *FileName, int)
.text:0041B2D0 sub_41B2D0      proc near               ; CODE XREF: sub_41AE80+51↑p
.text:0041B2D0
.text:0041B2D0 Str             = dword ptr -9Ch
.text:0041B2D0 OpenFlag        = dword ptr -98h
.text:0041B2D0 var_94          = dword ptr -94h
.text:0041B2D0 var_90          = dword ptr -90h
.text:0041B2D0 var_8C          = dword ptr -8Ch
.text:0041B2D0 var_88          = dword ptr -88h
.text:0041B2D0 var_84          = dword ptr -84h
.text:0041B2D0 var_80          = dword ptr -80h
.text:0041B2D0 var_7C          = dword ptr -7Ch
.text:0041B2D0 FileName        = dword ptr  4
.text:0041B2D0 arg_4           = dword ptr  8
.text:0041B2D0
.text:0041B2D0                 push    ebp
.text:0041B2D1                 push    edi
.text:0041B2D2                 push    esi
.text:0041B2D3                 push    ebx
.text:0041B2D4                 sub     esp, 8Ch
.text:0041B2DA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0041B2E2                 call    _errno
.text:0041B2E7                 mov     edx, [eax]
.text:0041B2E9                 mov     [esp+9Ch+var_8C], edx
.text:0041B2ED                 mov     edx, [esp+9Ch+FileName]
.text:0041B2F4                 mov     [esp+9Ch+Str], edx ; Str
.text:0041B2F7                 call    strlen
.text:0041B2FC                 cmp     eax, 5
.text:0041B2FF                 jle     short loc_41B31D
.text:0041B301                 cld
.text:0041B302                 mov     ecx, [esp+9Ch+FileName]
.text:0041B309                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0041B30E                 lea     esi, [eax+ecx-6]
.text:0041B312                 mov     ecx, 7
.text:0041B317                 mov     ebp, esi
.text:0041B319                 repe cmpsb
.text:0041B31B                 jz      short loc_41B338
.text:0041B31D
.text:0041B31D loc_41B31D:                             ; CODE XREF: sub_41B2D0+2F↑j
.text:0041B31D                 call    _errno
.text:0041B322                 mov     dword ptr [eax], 16h
.text:0041B328
.text:0041B328 loc_41B328:                             ; CODE XREF: sub_41B2D0+295↓j
.text:0041B328                                         ; sub_41B2D0+2D8↓j ...
.text:0041B328                 mov     eax, 0FFFFFFFFh
.text:0041B32D
.text:0041B32D loc_41B32D:                             ; CODE XREF: sub_41B2D0+2EF↓j
.text:0041B32D                                         ; sub_41B2D0+332↓j
.text:0041B32D                 add     esp, 8Ch
.text:0041B333                 pop     ebx
.text:0041B334                 pop     esi
.text:0041B335                 pop     edi
.text:0041B336                 pop     ebp
.text:0041B337                 retn
.text:0041B338 ; ---------------------------------------------------------------------------
.text:0041B338
.text:0041B338 loc_41B338:                             ; CODE XREF: sub_41B2D0+4B↑j
.text:0041B338                 mov     ecx, ds:dword_41F4F4
.text:0041B33E                 mov     edi, ds:dword_41F4F0
.text:0041B344                 mov     eax, ecx
.text:0041B346                 or      eax, edi
.text:0041B348                 jz      loc_41B683
.text:0041B34E
.text:0041B34E loc_41B34E:                             ; CODE XREF: sub_41B2D0+3F8↓j
.text:0041B34E                 rdtsc
.text:0041B350                 mov     edi, edx
.text:0041B352                 mov     esi, eax
.text:0041B354                 call    _getpid
.text:0041B359                 mov     ebx, eax
.text:0041B35B                 mov     edx, esi
.text:0041B35D                 sar     ebx, 1Fh
.text:0041B360                 xor     edx, eax
.text:0041B362                 mov     ecx, edi
.text:0041B364                 xor     ecx, ebx
.text:0041B366                 mov     ebx, edx
.text:0041B368                 mov     esi, ecx
.text:0041B36A                 add     ebx, ds:dword_41F4F0
.text:0041B370                 adc     esi, ds:dword_41F4F4
.text:0041B376                 xor     edi, edi
.text:0041B378                 mov     ds:dword_41F4F0, ebx
.text:0041B37E                 mov     ds:dword_41F4F4, esi
.text:0041B384                 lea     esi, [esi+0]
.text:0041B38A                 lea     edi, [edi+0]
.text:0041B390
.text:0041B390 loc_41B390:                             ; CODE XREF: sub_41B2D0+2C7↓j
.text:0041B390                 mov     [esp+9Ch+Str], ebx
.text:0041B393                 mov     [esp+9Ch+OpenFlag], esi
.text:0041B397                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041B39F                 mov     [esp+9Ch+var_90], 0
.text:0041B3A7                 call    sub_41D2A0
.text:0041B3AC                 movzx   ecx, ds:byte_41B1E0[eax]
.text:0041B3B3                 mov     [ebp+0], cl
.text:0041B3B6                 mov     [esp+9Ch+Str], ebx
.text:0041B3B9                 mov     [esp+9Ch+OpenFlag], esi
.text:0041B3BD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041B3C5                 mov     [esp+9Ch+var_90], 0
.text:0041B3CD                 call    sub_41D180
.text:0041B3D2                 mov     [esp+9Ch+Str], eax
.text:0041B3D5                 mov     ebx, eax
.text:0041B3D7                 mov     esi, edx
.text:0041B3D9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041B3E1                 mov     [esp+9Ch+var_90], 0
.text:0041B3E9                 mov     [esp+9Ch+OpenFlag], edx
.text:0041B3ED                 call    sub_41D2A0
.text:0041B3F2                 movzx   edx, ds:byte_41B1E0[eax]
.text:0041B3F9                 mov     [ebp+1], dl
.text:0041B3FC                 mov     [esp+9Ch+Str], ebx
.text:0041B3FF                 mov     [esp+9Ch+OpenFlag], esi
.text:0041B403                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041B40B                 mov     [esp+9Ch+var_90], 0
.text:0041B413                 call    sub_41D180
.text:0041B418                 mov     [esp+9Ch+Str], eax
.text:0041B41B                 mov     ebx, eax
.text:0041B41D                 mov     esi, edx
.text:0041B41F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041B427                 mov     [esp+9Ch+var_90], 0
.text:0041B42F                 mov     [esp+9Ch+OpenFlag], edx
.text:0041B433                 call    sub_41D2A0
.text:0041B438                 movzx   ecx, ds:byte_41B1E0[eax]
.text:0041B43F                 mov     [ebp+2], cl
.text:0041B442                 mov     [esp+9Ch+Str], ebx
.text:0041B445                 mov     [esp+9Ch+OpenFlag], esi
.text:0041B449                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041B451                 mov     [esp+9Ch+var_90], 0
.text:0041B459                 call    sub_41D180
.text:0041B45E                 mov     [esp+9Ch+Str], eax
.text:0041B461                 mov     ebx, eax
.text:0041B463                 mov     esi, edx
.text:0041B465                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041B46D                 mov     [esp+9Ch+var_90], 0
.text:0041B475                 mov     [esp+9Ch+OpenFlag], edx
.text:0041B479                 call    sub_41D2A0
.text:0041B47E                 movzx   edx, ds:byte_41B1E0[eax]
.text:0041B485                 mov     [ebp+3], dl
.text:0041B488                 mov     [esp+9Ch+Str], ebx
.text:0041B48B                 mov     [esp+9Ch+OpenFlag], esi
.text:0041B48F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041B497                 mov     [esp+9Ch+var_90], 0
.text:0041B49F                 call    sub_41D180
.text:0041B4A4                 mov     [esp+9Ch+Str], eax
.text:0041B4A7                 mov     ebx, eax
.text:0041B4A9                 mov     esi, edx
.text:0041B4AB                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041B4B3                 mov     [esp+9Ch+var_90], 0
.text:0041B4BB                 mov     [esp+9Ch+OpenFlag], edx
.text:0041B4BF                 call    sub_41D2A0
.text:0041B4C4                 movzx   ecx, ds:byte_41B1E0[eax]
.text:0041B4CB                 mov     [ebp+4], cl
.text:0041B4CE                 mov     [esp+9Ch+Str], ebx
.text:0041B4D1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041B4D9                 mov     [esp+9Ch+var_90], 0
.text:0041B4E1                 mov     [esp+9Ch+OpenFlag], esi
.text:0041B4E5                 call    sub_41D180
.text:0041B4EA                 mov     [esp+9Ch+Str], eax
.text:0041B4ED                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041B4F5                 mov     [esp+9Ch+var_90], 0
.text:0041B4FD                 mov     [esp+9Ch+OpenFlag], edx
.text:0041B501                 call    sub_41D2A0
.text:0041B506                 movzx   ebx, ds:byte_41B1E0[eax]
.text:0041B50D                 mov     [ebp+5], bl
.text:0041B510                 cmp     [esp+9Ch+arg_4], 1
.text:0041B518                 jz      loc_41B667
.text:0041B51E                 cmp     [esp+9Ch+arg_4], 1
.text:0041B526                 jle     loc_41B630
.text:0041B52C                 cmp     [esp+9Ch+arg_4], 2
.text:0041B534                 jz      loc_41B607
.text:0041B53A                 cmp     [esp+9Ch+arg_4], 3
.text:0041B542                 jz      loc_41B5C4
.text:0041B548
.text:0041B548 loc_41B548:                             ; CODE XREF: sub_41B2D0+369↓j
.text:0041B548                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0041B54D                 test    ebx, ebx
.text:0041B54F                 jnz     loc_41B6CD
.text:0041B555
.text:0041B555 loc_41B555:                             ; CODE XREF: sub_41B2D0+354↓j
.text:0041B555                 mov     eax, [esp+9Ch+var_88]
.text:0041B559                 test    eax, eax
.text:0041B55B                 jns     short loc_41B5B0
.text:0041B55D                 call    _errno
.text:0041B562                 cmp     dword ptr [eax], 11h
.text:0041B565                 jnz     loc_41B328
.text:0041B56B
.text:0041B56B loc_41B56B:                             ; CODE XREF: sub_41B2D0+315↓j
.text:0041B56B                 mov     edx, ds:dword_41F4F0
.text:0041B571                 mov     ecx, ds:dword_41F4F4
.text:0041B577                 add     edx, 1E61h
.text:0041B57D                 adc     ecx, 0
.text:0041B580                 mov     ebx, edx
.text:0041B582                 inc     edi
.text:0041B583                 mov     ds:dword_41F4F0, edx
.text:0041B589                 cmp     edi, 3A2F8h
.text:0041B58F                 mov     esi, ecx
.text:0041B591                 mov     ds:dword_41F4F4, ecx
.text:0041B597                 jb      loc_41B390
.text:0041B59D                 call    _errno
.text:0041B5A2                 mov     dword ptr [eax], 11h
.text:0041B5A8                 jmp     loc_41B328
.text:0041B5A8 ; ---------------------------------------------------------------------------
.text:0041B5AD                 align 10h
.text:0041B5B0
.text:0041B5B0 loc_41B5B0:                             ; CODE XREF: sub_41B2D0+28B↑j
.text:0041B5B0                 call    _errno
.text:0041B5B5                 mov     esi, [esp+9Ch+var_8C]
.text:0041B5B9                 mov     [eax], esi
.text:0041B5BB                 mov     eax, [esp+9Ch+var_88]
.text:0041B5BF                 jmp     loc_41B32D
.text:0041B5C4 ; ---------------------------------------------------------------------------
.text:0041B5C4
.text:0041B5C4 loc_41B5C4:                             ; CODE XREF: sub_41B2D0+272↑j
.text:0041B5C4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0041B5CB                 mov     ecx, [esp+9Ch+FileName]
.text:0041B5D2                 lea     esi, [esp+9Ch+var_7C]
.text:0041B5D6                 mov     [esp+9Ch+var_94], esi ; int
.text:0041B5DA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0041B5DE                 call    sub_40CAE0
.text:0041B5E3                 test    eax, eax
.text:0041B5E5                 jns     short loc_41B56B
.text:0041B5E7                 call    _errno
.text:0041B5EC                 cmp     dword ptr [eax], 2
.text:0041B5EF                 jnz     loc_41B328
.text:0041B5F5                 call    _errno
.text:0041B5FA                 mov     ebx, [esp+9Ch+var_8C]
.text:0041B5FE                 mov     [eax], ebx
.text:0041B600                 xor     eax, eax
.text:0041B602                 jmp     loc_41B32D
.text:0041B607 ; ---------------------------------------------------------------------------
.text:0041B607
.text:0041B607 loc_41B607:                             ; CODE XREF: sub_41B2D0+264↑j
.text:0041B607                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0041B60F                 mov     edx, [esp+9Ch+FileName]
.text:0041B616                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0041B619                 call    sub_41B700
.text:0041B61E                 mov     esi, esi
.text:0041B620
.text:0041B620 loc_41B620:                             ; CODE XREF: sub_41B2D0+395↓j
.text:0041B620                 mov     [esp+9Ch+var_88], eax
.text:0041B624                 jmp     loc_41B555
.text:0041B624 ; ---------------------------------------------------------------------------
.text:0041B629                 align 10h
.text:0041B630
.text:0041B630 loc_41B630:                             ; CODE XREF: sub_41B2D0+256↑j
.text:0041B630                 mov     eax, [esp+9Ch+arg_4]
.text:0041B637                 test    eax, eax
.text:0041B639                 jnz     loc_41B548
.text:0041B63F                 mov     [esp+9Ch+var_94], 180h
.text:0041B647                 mov     esi, [esp+9Ch+FileName]
.text:0041B64E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0041B656                 mov     [esp+9Ch+Str], esi ; FileName
.text:0041B659                 lea     esi, [esi+0]
.text:0041B660
.text:0041B660 loc_41B660:                             ; CODE XREF: sub_41B2D0+3B1↓j
.text:0041B660                 call    _open
.text:0041B665                 jmp     short loc_41B620
.text:0041B667 ; ---------------------------------------------------------------------------
.text:0041B667
.text:0041B667 loc_41B667:                             ; CODE XREF: sub_41B2D0+248↑j
.text:0041B667                 mov     [esp+9Ch+var_94], 180h
.text:0041B66F                 mov     ebx, [esp+9Ch+FileName]
.text:0041B676                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0041B67E                 mov     [esp+9Ch+Str], ebx
.text:0041B681                 jmp     short loc_41B660
.text:0041B683 ; ---------------------------------------------------------------------------
.text:0041B683
.text:0041B683 loc_41B683:                             ; CODE XREF: sub_41B2D0+78↑j
.text:0041B683                 mov     [esp+9Ch+OpenFlag], 0
.text:0041B68B                 lea     ebx, [esp+9Ch+var_84]
.text:0041B68F                 mov     [esp+9Ch+Str], ebx
.text:0041B692                 call    sub_40C510
.text:0041B697                 mov     edi, [esp+9Ch+var_80]
.text:0041B69B                 mov     edx, [esp+9Ch+var_84]
.text:0041B69F                 mov     ecx, edi
.text:0041B6A1                 mov     ebx, edi
.text:0041B6A3                 shl     ecx, 10h
.text:0041B6A6                 sar     ebx, 1Fh
.text:0041B6A9                 shld    ebx, edi, 10h
.text:0041B6AD                 mov     esi, edx
.text:0041B6AF                 mov     edi, edx
.text:0041B6B1                 mov     edx, ecx
.text:0041B6B3                 sar     edi, 1Fh
.text:0041B6B6                 xor     edx, esi
.text:0041B6B8                 mov     ds:dword_41F4F0, edx
.text:0041B6BE                 mov     esi, ebx
.text:0041B6C0                 xor     esi, edi
.text:0041B6C2                 mov     ds:dword_41F4F4, esi
.text:0041B6C8                 jmp     loc_41B34E
.text:0041B6CD ; ---------------------------------------------------------------------------
.text:0041B6CD
.text:0041B6CD loc_41B6CD:                             ; CODE XREF: sub_41B2D0+27F↑j
.text:0041B6CD                 mov     [esp+9Ch+var_94], 151h
.text:0041B6D5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0041B6DD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0041B6E4                 call    _assert
.text:0041B6E4 sub_41B2D0      endp
.text:0041B6E4
.text:0041B6E4 ; ---------------------------------------------------------------------------
.text:0041B6E9                 align 20h
.text:0041B700
.text:0041B700 ; =============== S U B R O U T I N E =======================================
.text:0041B700
.text:0041B700
.text:0041B700 ; int __cdecl sub_41B700(LPCSTR, int AccessMode)
.text:0041B700 sub_41B700      proc near               ; CODE XREF: sub_41B2D0+349↑p
.text:0041B700
.text:0041B700 lpPathName      = dword ptr -1Ch
.text:0041B700 lpSecurityAttributes= dword ptr -18h
.text:0041B700 var_8           = dword ptr -8
.text:0041B700 var_4           = dword ptr -4
.text:0041B700 arg_0           = dword ptr  4
.text:0041B700 AccessMode      = dword ptr  8
.text:0041B700
.text:0041B700                 sub     esp, 1Ch
.text:0041B703                 mov     [esp+1Ch+var_8], ebx
.text:0041B707                 mov     ebx, [esp+1Ch+arg_0]
.text:0041B70B                 mov     [esp+1Ch+var_4], esi
.text:0041B70F                 mov     esi, [esp+1Ch+AccessMode]
.text:0041B713                 test    ebx, ebx
.text:0041B715                 jz      short loc_41B765
.text:0041B717                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041B71F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0041B722                 call    CreateDirectoryA
.text:0041B727                 sub     esp, 8
.text:0041B72A                 test    eax, eax
.text:0041B72C                 jz      short loc_41B746
.text:0041B72E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0041B732                 mov     esi, [esp+1Ch+var_4]
.text:0041B736                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0041B73A                 mov     ebx, [esp+1Ch+var_8]
.text:0041B73E                 add     esp, 1Ch
.text:0041B741                 jmp     _chmod
.text:0041B746 ; ---------------------------------------------------------------------------
.text:0041B746
.text:0041B746 loc_41B746:                             ; CODE XREF: sub_41B700+2C↑j
.text:0041B746                 call    sub_40D830
.text:0041B74B                 mov     esi, eax
.text:0041B74D                 call    _errno
.text:0041B752                 mov     [eax], esi
.text:0041B754
.text:0041B754 loc_41B754:                             ; CODE XREF: sub_41B700+70↓j
.text:0041B754                 mov     ebx, [esp+1Ch+var_8]
.text:0041B758                 mov     eax, 0FFFFFFFFh
.text:0041B75D                 mov     esi, [esp+1Ch+var_4]
.text:0041B761                 add     esp, 1Ch
.text:0041B764                 retn
.text:0041B765 ; ---------------------------------------------------------------------------
.text:0041B765
.text:0041B765 loc_41B765:                             ; CODE XREF: sub_41B700+15↑j
.text:0041B765                 call    _errno
.text:0041B76A                 mov     dword ptr [eax], 16h
.text:0041B770                 jmp     short loc_41B754
.text:0041B770 sub_41B700      endp
.text:0041B770
.text:0041B770 ; ---------------------------------------------------------------------------
.text:0041B772                 align 10h
.text:0041B780
.text:0041B780 ; =============== S U B R O U T I N E =======================================
.text:0041B780
.text:0041B780
.text:0041B780 sub_41B780      proc near               ; CODE XREF: sub_41AF50+1A7↑p
.text:0041B780                                         ; sub_41AF50+237↑p ...
.text:0041B780                 mov     edx, ds:dword_41F500
.text:0041B786                 test    edx, edx
.text:0041B788                 jnz     short loc_41B790
.text:0041B78A                 jmp     getenv
.text:0041B78A ; ---------------------------------------------------------------------------
.text:0041B78F                 align 10h
.text:0041B790
.text:0041B790 loc_41B790:                             ; CODE XREF: sub_41B780+8↑j
.text:0041B790                 xor     eax, eax
.text:0041B792                 retn
.text:0041B792 sub_41B780      endp
.text:0041B792
.text:0041B792 ; ---------------------------------------------------------------------------
.text:0041B793                 align 10h
.text:0041B7A0                 sub     esp, 0Ch
.text:0041B7A3                 mov     [esp+4], ebx
.text:0041B7A7                 mov     [esp+8], esi
.text:0041B7AB                 xor     esi, esi
.text:0041B7AD                 call    sub_41B820
.text:0041B7B2                 mov     ebx, eax
.text:0041B7B4                 call    sub_41B810
.text:0041B7B9                 cmp     ebx, eax
.text:0041B7BB                 jz      short loc_41B7D4
.text:0041B7BD
.text:0041B7BD loc_41B7BD:                             ; CODE XREF: .text:0041B7E2↓j
.text:0041B7BD                 mov     esi, 1
.text:0041B7C2
.text:0041B7C2 loc_41B7C2:                             ; CODE XREF: .text:0041B7E4↓j
.text:0041B7C2                 mov     ds:dword_41F500, esi
.text:0041B7C8                 mov     ebx, [esp+4]
.text:0041B7CC                 mov     esi, [esp+8]
.text:0041B7D0                 add     esp, 0Ch
.text:0041B7D3                 retn
.text:0041B7D4 ; ---------------------------------------------------------------------------
.text:0041B7D4
.text:0041B7D4 loc_41B7D4:                             ; CODE XREF: .text:0041B7BB↑j
.text:0041B7D4                 call    sub_41B800
.text:0041B7D9                 mov     ebx, eax
.text:0041B7DB                 call    sub_41B7F0
.text:0041B7E0                 cmp     ebx, eax
.text:0041B7E2                 jnz     short loc_41B7BD
.text:0041B7E4                 jmp     short loc_41B7C2
.text:0041B7E4 ; ---------------------------------------------------------------------------
.text:0041B7E6                 align 10h
.text:0041B7F0
.text:0041B7F0 ; =============== S U B R O U T I N E =======================================
.text:0041B7F0
.text:0041B7F0
.text:0041B7F0 sub_41B7F0      proc near               ; CODE XREF: .text:0041B7DB↑p
.text:0041B7F0                 xor     eax, eax
.text:0041B7F2                 retn
.text:0041B7F2 sub_41B7F0      endp
.text:0041B7F2
.text:0041B7F2 ; ---------------------------------------------------------------------------
.text:0041B7F3                 align 10h
.text:0041B800
.text:0041B800 ; =============== S U B R O U T I N E =======================================
.text:0041B800
.text:0041B800
.text:0041B800 sub_41B800      proc near               ; CODE XREF: .text:loc_41B7D4↑p
.text:0041B800                 xor     eax, eax
.text:0041B802                 retn
.text:0041B802 sub_41B800      endp
.text:0041B802
.text:0041B802 ; ---------------------------------------------------------------------------
.text:0041B803                 align 10h
.text:0041B810
.text:0041B810 ; =============== S U B R O U T I N E =======================================
.text:0041B810
.text:0041B810
.text:0041B810 sub_41B810      proc near               ; CODE XREF: .text:0041B7B4↑p
.text:0041B810                 xor     eax, eax
.text:0041B812                 retn
.text:0041B812 sub_41B810      endp
.text:0041B812
.text:0041B812 ; ---------------------------------------------------------------------------
.text:0041B813                 align 10h
.text:0041B820
.text:0041B820 ; =============== S U B R O U T I N E =======================================
.text:0041B820
.text:0041B820
.text:0041B820 sub_41B820      proc near               ; CODE XREF: .text:0041B7AD↑p
.text:0041B820                 xor     eax, eax
.text:0041B822                 retn
.text:0041B822 sub_41B820      endp
.text:0041B822
.text:0041B822 ; ---------------------------------------------------------------------------
.text:0041B823                 align 10h
.text:0041B830
.text:0041B830 ; =============== S U B R O U T I N E =======================================
.text:0041B830
.text:0041B830 ; Attributes: thunk
.text:0041B830
.text:0041B830 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0041B830 OleInitialize   proc near               ; CODE XREF: sub_40C880+1A↑p
.text:0041B830
.text:0041B830 pvReserved      = dword ptr  4
.text:0041B830
.text:0041B830                 jmp     ds:__imp_OleInitialize
.text:0041B830 OleInitialize   endp
.text:0041B830
.text:0041B830 ; ---------------------------------------------------------------------------
.text:0041B836                 align 10h
.text:0041B840
.text:0041B840 ; =============== S U B R O U T I N E =======================================
.text:0041B840
.text:0041B840 ; Attributes: thunk
.text:0041B840
.text:0041B840 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0041B840 CoCreateInstance proc near              ; CODE XREF: sub_40C880+52↑p
.text:0041B840
.text:0041B840 rclsid          = dword ptr  4
.text:0041B840 pUnkOuter       = dword ptr  8
.text:0041B840 dwClsContext    = dword ptr  0Ch
.text:0041B840 riid            = dword ptr  10h
.text:0041B840 ppv             = dword ptr  14h
.text:0041B840
.text:0041B840                 jmp     ds:__imp_CoCreateInstance
.text:0041B840 CoCreateInstance endp
.text:0041B840
.text:0041B840 ; ---------------------------------------------------------------------------
.text:0041B846                 align 10h
.text:0041B850
.text:0041B850 ; =============== S U B R O U T I N E =======================================
.text:0041B850
.text:0041B850 ; Attributes: thunk
.text:0041B850
.text:0041B850 ; void __stdcall CoUninitialize()
.text:0041B850 CoUninitialize  proc near               ; CODE XREF: sub_40C880+14E↑p
.text:0041B850                                         ; sub_40C880+16D↑p
.text:0041B850                 jmp     ds:__imp_CoUninitialize
.text:0041B850 CoUninitialize  endp
.text:0041B850
.text:0041B850 ; ---------------------------------------------------------------------------
.text:0041B856                 align 10h
.text:0041B860                 add     al, 0BAh ; 'º'
.text:0041B862                 retf
.text:0041B862 ; ---------------------------------------------------------------------------
.text:0041B863                 db 7Eh
.text:0041B864                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0041B864                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0041B864                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0041B864                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0041B864                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0041B864                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0041B864                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0041B864                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0041B864                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0041B864                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0041B864                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0041B864                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0041B864                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0041B864                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0041B864                 dd 0C4426C00h, 330h, 0
.text:0041B998                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041B998                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0041B998                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0041B998                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0041B9E8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041B9E8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0041B9E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0041B9E8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0041B9E8                 dd 0BA94B00h, 1Bh, 0
.text:0041BA48                 dd 0C0h, 46000000h, 1Ch, 0
.text:0041BA58                 dd 0C0h, 46000000h, 331h, 0
.text:0041BA68                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041BA68                 dd 312h, 0
.text:0041BA88                 dd 0C0h, 46000000h, 30Eh, 0
.text:0041BA98                 dd 0C0h, 46000000h, 30Dh, 0
.text:0041BAA8                 dd 0C0h, 46000000h, 311h, 0
.text:0041BAB8                 dd 0C0h, 46000000h, 313h, 0
.text:0041BAC8                 dd 0C0h, 46000000h, 30Ch, 0
.text:0041BAD8                 dd 0C0h, 46000000h, 30Fh, 0
.text:0041BAE8                 dd 0C0h, 46000000h, 310h, 0
.text:0041BAF8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041BAF8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0041BB28                 dd 0C0h, 46000000h, 319h, 0
.text:0041BB38                 dd 0C0h, 46000000h, 315h, 0
.text:0041BB48                 dd 0C0h, 46000000h, 316h, 0
.text:0041BB58                 dd 0C0h, 46000000h, 315h, 0
.text:0041BB68                 dd 0C0h, 46000000h, 2E005h, 0
.text:0041BB78                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041BB78                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0041BB78                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0041BBB8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041BBB8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0041BBB8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0041BBB8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0041BBB8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0041BBB8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0041BBB8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0041BBB8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0041BBB8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0041BBB8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0041BBB8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0041BBB8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041BBB8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0041BBB8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0041BBB8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0041BBB8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041BBB8                 dd 2DE81h, 0
.text:0041BD08                 dd 0C0h, 46000000h, 4 dup(0)
.text:0041BD20                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0041BD20                 dd 0
.text:0041BD38                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041BD38                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0041BD38                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0041BD38                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0041BD38                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041BD38                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0041BD38                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0041BD38                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0041BD38                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0041BD38                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0041BD38                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0041BD38                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0041BD38                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0041BD38                 dd 10Fh, 0
.text:0041BE48                 dd 0C0h, 46000000h, 125h, 0
.text:0041BE58                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0041BE58                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0041BE58                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0041BE98                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0041BE98                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041BE98                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0041BE98                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0041BE98                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0041BEF8                 dd 0C0h, 46000000h, 2E012h, 0
.text:0041BF08                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0041BF08                 dd 140h, 0
.text:0041BF28                 dd 0C0h, 46000000h, 1, 0
.text:0041BF38                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0041BF38                 dd 71D3400h, 13Dh, 0
.text:0041BF58                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041BF58                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0041BF58                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0041BF58                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0041BFA8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0041BFA8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0041BFA8                 dd 20405h, 0
.text:0041BFD8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0041BFE8                 dd 0C0h, 46000000h, 20406h, 0
.text:0041BFF8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0041C008                 dd 0C0h, 46000000h, 110h, 0
.text:0041C018                 dd 0C0h, 46000000h, 10Eh, 0
.text:0041C028                 dd 0C0h, 46000000h, 123h, 0
.text:0041C038                 dd 0C0h, 46000000h, 124h, 0
.text:0041C048                 dd 0C0h, 46000000h, 13h, 0
.text:0041C058                 dd 0C0h, 46000000h, 14h, 0
.text:0041C068                 dd 0C0h, 46000000h, 15h, 0
.text:0041C078                 dd 0C0h, 46000000h, 20400h, 0
.text:0041C088                 dd 0C0h, 46000000h, 121h, 0
.text:0041C098                 dd 0C0h, 46000000h, 122h, 0
.text:0041C0A8                 dd 0C0h, 46000000h, 2E011h, 0
.text:0041C0B8                 dd 0C0h, 46000000h, 108h, 0
.text:0041C0C8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0041C0C8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041C0C8                 dd 103h, 0
.text:0041C0F8                 dd 0C0h, 46000000h, 2E000h, 0
.text:0041C108                 dd 0C0h, 46000000h, 106h, 0
.text:0041C118                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041C118                 dd 107h, 0
.text:0041C138                 dd 0C0h, 46000000h, 102h, 0
.text:0041C148                 dd 0C0h, 46000000h, 104h, 0
.text:0041C158                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0041C158                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0041C158                 dd 105h, 0
.text:0041C188                 dd 0C0h, 46000000h, 13Bh, 0
.text:0041C198                 dd 0C0h, 46000000h, 139h, 0
.text:0041C1A8                 dd 0C0h, 46000000h, 0Dh, 0
.text:0041C1B8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0041C1B8                 dd 101h, 0
.text:0041C1D8                 dd 0C0h, 46000000h, 100h, 0
.text:0041C1E8                 dd 0C0h, 46000000h, 20404h, 0
.text:0041C1F8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0041C1F8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0041C228                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0041C228                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0041C228                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0041C228                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0041C278                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041C278                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0041C278                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0041C278                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0041C278                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041C278                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0041C2F8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0041C2F8                 dd 0Ah, 0
.text:0041C318                 dd 0C0h, 46000000h, 2, 0
.text:0041C328                 dd 0C0h, 46000000h, 1Dh, 0
.text:0041C338                 dd 0C0h, 46000000h, 3, 0
.text:0041C348                 dd 0C0h, 46000000h, 16h, 0
.text:0041C358                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0041C358                 dd 1608D74Fh, 0Fh, 0
.text:0041C378                 dd 0C0h, 46000000h, 20h, 0
.text:0041C388                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0041C388                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0041C388                 dd 0
.text:0041C3B8                 dd 0C0h, 46000000h, 11Eh, 0
.text:0041C3C8                 dd 0C0h, 46000000h, 128h, 0
.text:0041C3D8                 dd 0C0h, 46000000h, 129h, 0
.text:0041C3E8                 dd 0C0h, 46000000h, 118h, 0
.text:0041C3F8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0041C3F8                 dd 70474000h, 11Bh, 0
.text:0041C418                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0041C418                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041C418                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0041C418                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0041C418                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0041C478                 dd 0C0h, 46000000h, 116h, 0
.text:0041C488                 dd 0C0h, 46000000h, 113h, 0
.text:0041C498                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0041C498                 dd 119h, 0
.text:0041C4B8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0041C4B8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0041C4B8                 dd 0
.text:0041C4E8                 dd 0C0h, 46000000h, 11Ch, 0
.text:0041C4F8                 dd 0C0h, 46000000h, 11Dh, 0
.text:0041C508                 dd 0C0h, 46000000h, 11Fh, 0
.text:0041C518                 dd 0C0h, 46000000h, 112h, 0
.text:0041C528                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0041C528                 dd 18E6000h, 120h, 0
.text:0041C548                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0041C548                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0041C548                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0041C588                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0041C588                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0041C5B8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041C5B8                 dd 11Ah, 0
.text:0041C5D8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0041C5D8                 dd 10Ch, 0
.text:0041C5F8                 dd 0C0h, 46000000h
.text:0041C600 dword_41C600    dd 10Bh, 0              ; DATA XREF: sub_40C880+75↑o
.text:0041C608                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0041C608                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0041C608                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0041C608                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0041C658                 dd 0C0h, 46000000h, 109h, 0
.text:0041C668                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0041C668                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0041C668                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0041C668                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0041C668                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0041C668                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0041C668                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0041C668                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0041C668                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041C668                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0041C668                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0041C748                 dd 0C0h, 46000000h, 138h, 0
.text:0041C758                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0041C758                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0041C758                 dd 27h, 0
.text:0041C788                 dd 0C0h, 46000000h, 8, 0
.text:0041C798                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0041C798                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0041C798                 dd 20D00h, 0
.text:0041C7C8                 dd 0C0h, 46000000h, 20D03h, 0
.text:0041C7D8                 dd 0C0h, 46000000h, 12h, 0
.text:0041C7E8                 dd 0C0h, 46000000h, 4, 0
.text:0041C7F8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041C7F8                 dd 7, 0
.text:0041C818                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041C818                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0041C848                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041C848                 dd 126h, 0
.text:0041C868                 dd 0C0h, 46000000h, 10h, 0
.text:0041C878                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0041C878                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0041C8A8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0041C8A8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0041C8A8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0041C8E8                 dd 0C0h, 46000000h, 0Bh, 0
.text:0041C8F8                 dd 0C0h, 46000000h, 0Ch, 0
.text:0041C908                 dd 0C0h, 46000000h, 26h, 0
.text:0041C918                 dd 0C0h, 46000000h, 6, 0
.text:0041C928                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0041C928                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0041C928                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0041C968                 dd 0C0h, 46000000h, 20403h, 0
.text:0041C978                 dd 0C0h, 46000000h, 20401h, 0
.text:0041C988                 dd 0C0h, 46000000h, 20412h, 0
.text:0041C998                 dd 0C0h, 46000000h, 20402h, 0
.text:0041C9A8                 dd 0C0h, 46000000h, 20411h, 0
.text:0041C9B8                 dd 0C0h, 46000000h, 2 dup(0)
.text:0041C9C8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0041C9C8                 dd 10Dh, 0
.text:0041C9E8                 dd 0C0h, 46000000h, 127h, 0
.text:0041C9F8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0041C9F8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0041C9F8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0041CA38                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0041CA38                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0041CA38                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0041CA78                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0041CA88                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0041CA98                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0041CAA8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0041CAB8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0041CAC8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0041CAD8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0041CAE8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0041CAF8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0041CB08                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0041CB18                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0041CB28                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0041CB38                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0041CB48                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0041CB58                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0041CB68                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0041CB78                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0041CB88                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0041CB98                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0041CBA8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0041CBB8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0041CBC8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0041CBD8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0041CBE8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0041CBF8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0041CC08                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0041CC18                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0041CC28                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0041CC38                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0041CC48                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0041CC58                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0041CC68                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0041CC78                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0041CC88                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0041CC98                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0041CCA8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0041CCA8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0041CCD0
.text:0041CCD0 ; =============== S U B R O U T I N E =======================================
.text:0041CCD0
.text:0041CCD0 ; Attributes: thunk
.text:0041CCD0
.text:0041CCD0 ; size_t __cdecl mbrlen(const char *Ch, size_t SizeInBytes, mbstate_t *State)
.text:0041CCD0 mbrlen          proc near               ; CODE XREF: sub_403410+19D↑p
.text:0041CCD0
.text:0041CCD0 SizeInBytes     = dword ptr  8
.text:0041CCD0 State           = dword ptr  0Ch
.text:0041CCD0
.text:0041CCD0                 jmp     ds:__imp_mbrlen
.text:0041CCD0 mbrlen          endp
.text:0041CCD0
.text:0041CCD0 ; ---------------------------------------------------------------------------
.text:0041CCD6                 align 10h
.text:0041CCE0
.text:0041CCE0 ; =============== S U B R O U T I N E =======================================
.text:0041CCE0
.text:0041CCE0 ; Attributes: thunk
.text:0041CCE0
.text:0041CCE0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0041CCE0 mbrtowc         proc near               ; CODE XREF: sub_40AAC0+757↑p
.text:0041CCE0
.text:0041CCE0 DstCh           = dword ptr  4
.text:0041CCE0 SrcCh           = dword ptr  8
.text:0041CCE0 SizeInBytes     = dword ptr  0Ch
.text:0041CCE0 State           = dword ptr  10h
.text:0041CCE0
.text:0041CCE0                 jmp     ds:__imp_mbrtowc
.text:0041CCE0 mbrtowc         endp
.text:0041CCE0
.text:0041CCE0 ; ---------------------------------------------------------------------------
.text:0041CCE6                 align 10h
.text:0041CCF0
.text:0041CCF0 ; =============== S U B R O U T I N E =======================================
.text:0041CCF0
.text:0041CCF0 ; Attributes: bp-based frame
.text:0041CCF0
.text:0041CCF0 sub_41CCF0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0041CCF0                 push    ebp
.text:0041CCF1                 mov     ecx, offset dword_41F000
.text:0041CCF6                 cmp     ecx, offset dword_41F000
.text:0041CCFC                 mov     ebp, esp
.text:0041CCFE                 jnb     short loc_41CD16
.text:0041CD00
.text:0041CD00 loc_41CD00:                             ; CODE XREF: sub_41CCF0+24↓j
.text:0041CD00                 mov     edx, [ecx+4]
.text:0041CD03                 mov     eax, [ecx]
.text:0041CD05                 add     ecx, 8
.text:0041CD08                 add     [edx+400000h], eax
.text:0041CD0E                 cmp     ecx, offset dword_41F000
.text:0041CD14                 jb      short loc_41CD00
.text:0041CD16
.text:0041CD16 loc_41CD16:                             ; CODE XREF: sub_41CCF0+E↑j
.text:0041CD16                 pop     ebp
.text:0041CD17                 retn
.text:0041CD17 sub_41CCF0      endp
.text:0041CD17
.text:0041CD17 ; ---------------------------------------------------------------------------
.text:0041CD18                 align 10h
.text:0041CD20
.text:0041CD20 ; =============== S U B R O U T I N E =======================================
.text:0041CD20
.text:0041CD20 ; Attributes: bp-based frame
.text:0041CD20
.text:0041CD20 sub_41CD20      proc near               ; CODE XREF: sub_401080+16↑p
.text:0041CD20                                         ; TopLevelExceptionFilter+D7↑p
.text:0041CD20                 push    ebp
.text:0041CD21                 mov     ebp, esp
.text:0041CD23                 fninit
.text:0041CD25                 pop     ebp
.text:0041CD26                 retn
.text:0041CD26 sub_41CD20      endp
.text:0041CD26
.text:0041CD26 ; ---------------------------------------------------------------------------
.text:0041CD27                 align 10h
.text:0041CD30
.text:0041CD30 ; =============== S U B R O U T I N E =======================================
.text:0041CD30
.text:0041CD30 ; Attributes: bp-based frame
.text:0041CD30
.text:0041CD30 ; void __cdecl sub_41CD30()
.text:0041CD30 sub_41CD30      proc near               ; DATA XREF: .text:loc_41CD79↓o
.text:0041CD30                                         ; sub_41CDC0:loc_41CDEE↓o
.text:0041CD30                 push    ebp
.text:0041CD31                 mov     ebp, esp
.text:0041CD33                 sub     esp, 8
.text:0041CD36                 mov     eax, off_41E154
.text:0041CD3B                 mov     edx, [eax]
.text:0041CD3D                 test    edx, edx
.text:0041CD3F                 jnz     short loc_41CD45
.text:0041CD41
.text:0041CD41 loc_41CD41:                             ; CODE XREF: sub_41CD30+2C↓j
.text:0041CD41                 mov     esp, ebp
.text:0041CD43                 pop     ebp
.text:0041CD44                 retn
.text:0041CD45 ; ---------------------------------------------------------------------------
.text:0041CD45
.text:0041CD45 loc_41CD45:                             ; CODE XREF: sub_41CD30+F↑j
.text:0041CD45                                         ; sub_41CD30+2A↓j
.text:0041CD45                 call    dword ptr [eax]
.text:0041CD47                 mov     edx, off_41E154
.text:0041CD4D                 mov     ecx, [edx+4]
.text:0041CD50                 lea     eax, [edx+4]
.text:0041CD53                 mov     off_41E154, eax
.text:0041CD58                 test    ecx, ecx
.text:0041CD5A                 jnz     short loc_41CD45
.text:0041CD5C                 jmp     short loc_41CD41
.text:0041CD5C sub_41CD30      endp
.text:0041CD5C
.text:0041CD5C ; ---------------------------------------------------------------------------
.text:0041CD5E                 align 10h
.text:0041CD60                 push    ebp
.text:0041CD61                 mov     ebp, esp
.text:0041CD63                 sub     esp, 8
.text:0041CD66                 mov     [ebp-4], ebx
.text:0041CD69                 mov     eax, ds:dword_41DEF0
.text:0041CD6E                 cmp     eax, 0FFFFFFFFh
.text:0041CD71                 jz      short loc_41CD9C
.text:0041CD73
.text:0041CD73 loc_41CD73:                             ; CODE XREF: .text:0041CDA6↓j
.text:0041CD73                                         ; .text:0041CDB9↓j
.text:0041CD73                 test    eax, eax
.text:0041CD75                 mov     ebx, eax
.text:0041CD77                 jnz     short loc_41CD90
.text:0041CD79
.text:0041CD79 loc_41CD79:                             ; CODE XREF: .text:0041CD9A↓j
.text:0041CD79                 mov     dword ptr [esp], offset sub_41CD30
.text:0041CD80                 call    sub_401040
.text:0041CD85                 mov     ebx, [ebp-4]
.text:0041CD88                 mov     esp, ebp
.text:0041CD8A                 pop     ebp
.text:0041CD8B                 retn
.text:0041CD8B ; ---------------------------------------------------------------------------
.text:0041CD8C                 align 10h
.text:0041CD90
.text:0041CD90 loc_41CD90:                             ; CODE XREF: .text:0041CD77↑j
.text:0041CD90                                         ; .text:0041CD98↓j
.text:0041CD90                 call    ds:dword_41DEF0[ebx*4]
.text:0041CD97                 dec     ebx
.text:0041CD98                 jnz     short loc_41CD90
.text:0041CD9A                 jmp     short loc_41CD79
.text:0041CD9C ; ---------------------------------------------------------------------------
.text:0041CD9C
.text:0041CD9C loc_41CD9C:                             ; CODE XREF: .text:0041CD71↑j
.text:0041CD9C                 mov     ecx, ds:dword_41DEF4
.text:0041CDA2                 xor     eax, eax
.text:0041CDA4                 test    ecx, ecx
.text:0041CDA6                 jz      short loc_41CD73
.text:0041CDA8                 mov     edx, offset dword_41DEF0
.text:0041CDAD                 lea     esi, [esi+0]
.text:0041CDB0
.text:0041CDB0 loc_41CDB0:                             ; CODE XREF: .text:0041CDB7↓j
.text:0041CDB0                 inc     eax
.text:0041CDB1                 mov     ecx, [edx+eax*4+4]
.text:0041CDB5                 test    ecx, ecx
.text:0041CDB7                 jnz     short loc_41CDB0
.text:0041CDB9                 jmp     short loc_41CD73
.text:0041CDB9 ; ---------------------------------------------------------------------------
.text:0041CDBB                 align 10h
.text:0041CDC0
.text:0041CDC0 ; =============== S U B R O U T I N E =======================================
.text:0041CDC0
.text:0041CDC0 ; Attributes: bp-based frame
.text:0041CDC0
.text:0041CDC0 sub_41CDC0      proc near               ; CODE XREF: sub_402430+21↑p
.text:0041CDC0
.text:0041CDC0 var_8           = dword ptr -8
.text:0041CDC0 var_4           = dword ptr -4
.text:0041CDC0
.text:0041CDC0                 push    ebp
.text:0041CDC1                 mov     ebp, esp
.text:0041CDC3                 sub     esp, 8
.text:0041CDC6                 mov     [ebp+var_4], ebx
.text:0041CDC9                 mov     edx, dword_41E150
.text:0041CDCF                 test    edx, edx
.text:0041CDD1                 jnz     short loc_41CDFA
.text:0041CDD3                 mov     eax, ds:dword_41DEF0
.text:0041CDD8                 mov     edx, 1
.text:0041CDDD                 mov     dword_41E150, edx
.text:0041CDE3                 cmp     eax, 0FFFFFFFFh
.text:0041CDE6                 jz      short loc_41CE0D
.text:0041CDE8
.text:0041CDE8 loc_41CDE8:                             ; CODE XREF: sub_41CDC0+57↓j
.text:0041CDE8                                         ; sub_41CDC0+69↓j
.text:0041CDE8                 test    eax, eax
.text:0041CDEA                 mov     ebx, eax
.text:0041CDEC                 jnz     short loc_41CE01
.text:0041CDEE
.text:0041CDEE loc_41CDEE:                             ; CODE XREF: sub_41CDC0+4B↓j
.text:0041CDEE                 mov     [esp+8+var_8], offset sub_41CD30 ; void (__cdecl *)()
.text:0041CDF5                 call    sub_401040
.text:0041CDFA
.text:0041CDFA loc_41CDFA:                             ; CODE XREF: sub_41CDC0+11↑j
.text:0041CDFA                 mov     ebx, [ebp+var_4]
.text:0041CDFD                 mov     esp, ebp
.text:0041CDFF                 pop     ebp
.text:0041CE00                 retn
.text:0041CE01 ; ---------------------------------------------------------------------------
.text:0041CE01
.text:0041CE01 loc_41CE01:                             ; CODE XREF: sub_41CDC0+2C↑j
.text:0041CE01                                         ; sub_41CDC0+49↓j
.text:0041CE01                 call    ds:dword_41DEF0[ebx*4]
.text:0041CE08                 dec     ebx
.text:0041CE09                 jnz     short loc_41CE01
.text:0041CE0B                 jmp     short loc_41CDEE
.text:0041CE0D ; ---------------------------------------------------------------------------
.text:0041CE0D
.text:0041CE0D loc_41CE0D:                             ; CODE XREF: sub_41CDC0+26↑j
.text:0041CE0D                 mov     ecx, ds:dword_41DEF4
.text:0041CE13                 xor     eax, eax
.text:0041CE15                 test    ecx, ecx
.text:0041CE17                 jz      short loc_41CDE8
.text:0041CE19                 mov     edx, offset dword_41DEF0
.text:0041CE1E                 mov     esi, esi
.text:0041CE20
.text:0041CE20 loc_41CE20:                             ; CODE XREF: sub_41CDC0+67↓j
.text:0041CE20                 inc     eax
.text:0041CE21                 mov     ebx, [edx+eax*4+4]
.text:0041CE25                 test    ebx, ebx
.text:0041CE27                 jnz     short loc_41CE20
.text:0041CE29                 jmp     short loc_41CDE8
.text:0041CE29 sub_41CDC0      endp
.text:0041CE29
.text:0041CE29 ; ---------------------------------------------------------------------------
.text:0041CE2B                 align 10h
.text:0041CE30
.text:0041CE30 ; =============== S U B R O U T I N E =======================================
.text:0041CE30
.text:0041CE30 ; Attributes: info_from_lumina
.text:0041CE30
.text:0041CE30 ; void *__cdecl _alloca(size_t Size)
.text:0041CE30 __alloca        proc near               ; CODE XREF: sub_402430+1C↑p
.text:0041CE30                 push    ecx
.text:0041CE31                 mov     ecx, esp
.text:0041CE33                 add     ecx, 8
.text:0041CE36
.text:0041CE36 loc_41CE36:                             ; CODE XREF: __alloca+1B↓j
.text:0041CE36                 cmp     eax, 1000h
.text:0041CE3B                 jb      short loc_41CE4D
.text:0041CE3D                 sub     ecx, 1000h
.text:0041CE43                 or      dword ptr [ecx], 0
.text:0041CE46                 sub     eax, 1000h
.text:0041CE4B                 jmp     short loc_41CE36
.text:0041CE4D ; ---------------------------------------------------------------------------
.text:0041CE4D
.text:0041CE4D loc_41CE4D:                             ; CODE XREF: __alloca+B↑j
.text:0041CE4D                 sub     ecx, eax
.text:0041CE4F                 or      dword ptr [ecx], 0
.text:0041CE52                 mov     eax, esp
.text:0041CE54                 mov     esp, ecx
.text:0041CE56                 mov     ecx, [eax]
.text:0041CE58                 mov     eax, [eax+4]
.text:0041CE5B                 jmp     eax
.text:0041CE5B __alloca        endp
.text:0041CE5B
.text:0041CE5B ; ---------------------------------------------------------------------------
.text:0041CE5D                 align 10h
.text:0041CE60
.text:0041CE60 ; =============== S U B R O U T I N E =======================================
.text:0041CE60
.text:0041CE60 ; Attributes: bp-based frame
.text:0041CE60
.text:0041CE60 sub_41CE60      proc near               ; CODE XREF: sub_406BE0+38↑p
.text:0041CE60                                         ; sub_406BE0+88↑p
.text:0041CE60
.text:0041CE60 var_3C          = dword ptr -3Ch
.text:0041CE60 var_34          = dword ptr -34h
.text:0041CE60 var_30          = dword ptr -30h
.text:0041CE60 var_2C          = dword ptr -2Ch
.text:0041CE60 var_28          = dword ptr -28h
.text:0041CE60 var_24          = dword ptr -24h
.text:0041CE60 var_1C          = dword ptr -1Ch
.text:0041CE60 var_18          = dword ptr -18h
.text:0041CE60 var_14          = dword ptr -14h
.text:0041CE60 arg_0           = dword ptr  8
.text:0041CE60 arg_4           = dword ptr  0Ch
.text:0041CE60 arg_8           = dword ptr  10h
.text:0041CE60 arg_C           = dword ptr  14h
.text:0041CE60
.text:0041CE60                 push    ebp
.text:0041CE61                 mov     ebp, esp
.text:0041CE63                 push    edi
.text:0041CE64                 push    esi
.text:0041CE65                 push    ebx
.text:0041CE66                 sub     esp, 34h
.text:0041CE69                 mov     ebx, [ebp+arg_4]
.text:0041CE6C                 mov     [ebp+var_28], 0
.text:0041CE73                 mov     ecx, [ebp+arg_0]
.text:0041CE76                 mov     eax, [ebp+arg_8]
.text:0041CE79                 mov     [ebp+var_24], 0
.text:0041CE80                 test    ebx, ebx
.text:0041CE82                 mov     edx, [ebp+arg_C]
.text:0041CE85                 mov     [ebp+var_1C], 0
.text:0041CE8C                 js      loc_41D004
.text:0041CE92
.text:0041CE92 loc_41CE92:                             ; CODE XREF: sub_41CE60+1B2↓j
.text:0041CE92                 test    edx, edx
.text:0041CE94                 js      loc_41CFF8
.text:0041CE9A
.text:0041CE9A loc_41CE9A:                             ; CODE XREF: sub_41CE60+19F↓j
.text:0041CE9A                 mov     [ebp+var_2C], edx
.text:0041CE9D                 test    edx, edx
.text:0041CE9F                 mov     esi, eax
.text:0041CEA1                 mov     [ebp+var_30], ecx
.text:0041CEA4                 mov     edi, ebx
.text:0041CEA6                 jnz     short loc_41CF11
.text:0041CEA8                 cmp     eax, ebx
.text:0041CEAA                 jbe     short loc_41CEF4
.text:0041CEAC                 mov     eax, ecx
.text:0041CEAE                 mov     edx, ebx
.text:0041CEB0                 div     esi
.text:0041CEB2
.text:0041CEB2 loc_41CEB2:                             ; CODE XREF: sub_41CE60+AF↓j
.text:0041CEB2                 mov     [ebp+var_30], edx
.text:0041CEB5                 lea     ecx, [ebp+var_18]
.text:0041CEB8                 test    ecx, ecx
.text:0041CEBA                 jz      short loc_41CED5
.text:0041CEBC                 mov     [ebp+var_24], 0
.text:0041CEC3
.text:0041CEC3 loc_41CEC3:                             ; CODE XREF: sub_41CE60+FE↓j
.text:0041CEC3                 mov     eax, [ebp+var_30]
.text:0041CEC6                 mov     [ebp+var_28], eax
.text:0041CEC9                 mov     edx, [ebp+var_28]
.text:0041CECC                 mov     ecx, [ebp+var_24]
.text:0041CECF                 mov     [ebp+var_18], edx
.text:0041CED2                 mov     [ebp+var_14], ecx
.text:0041CED5
.text:0041CED5 loc_41CED5:                             ; CODE XREF: sub_41CE60+5A↑j
.text:0041CED5                                         ; sub_41CE60+C8↓j ...
.text:0041CED5                 mov     eax, [ebp+var_1C]
.text:0041CED8                 test    eax, eax
.text:0041CEDA                 jz      short loc_41CEE6
.text:0041CEDC                 neg     [ebp+var_18]
.text:0041CEDF                 adc     [ebp+var_14], 0
.text:0041CEE3                 neg     [ebp+var_14]
.text:0041CEE6
.text:0041CEE6 loc_41CEE6:                             ; CODE XREF: sub_41CE60+7A↑j
.text:0041CEE6                 mov     eax, [ebp+var_18]
.text:0041CEE9                 mov     edx, [ebp+var_14]
.text:0041CEEC                 add     esp, 34h
.text:0041CEEF                 pop     ebx
.text:0041CEF0                 pop     esi
.text:0041CEF1                 pop     edi
.text:0041CEF2                 pop     ebp
.text:0041CEF3                 retn
.text:0041CEF4 ; ---------------------------------------------------------------------------
.text:0041CEF4
.text:0041CEF4 loc_41CEF4:                             ; CODE XREF: sub_41CE60+4A↑j
.text:0041CEF4                 test    eax, eax
.text:0041CEF6                 jnz     short loc_41CF03
.text:0041CEF8                 mov     eax, 1
.text:0041CEFD                 xor     edx, edx
.text:0041CEFF                 div     esi
.text:0041CF01                 mov     esi, eax
.text:0041CF03
.text:0041CF03 loc_41CF03:                             ; CODE XREF: sub_41CE60+96↑j
.text:0041CF03                 mov     eax, edi
.text:0041CF05                 mov     edx, [ebp+var_2C]
.text:0041CF08                 div     esi
.text:0041CF0A                 mov     eax, [ebp+var_30]
.text:0041CF0D                 div     esi
.text:0041CF0F                 jmp     short loc_41CEB2
.text:0041CF11 ; ---------------------------------------------------------------------------
.text:0041CF11
.text:0041CF11 loc_41CF11:                             ; CODE XREF: sub_41CE60+46↑j
.text:0041CF11                 cmp     [ebp+var_2C], ebx
.text:0041CF14                 jbe     short loc_41CF30
.text:0041CF16                 mov     [ebp+var_28], ecx
.text:0041CF19
.text:0041CF19 loc_41CF19:                             ; CODE XREF: sub_41CE60+17E↓j
.text:0041CF19                 mov     [ebp+var_24], edi
.text:0041CF1C                 mov     eax, [ebp+var_28]
.text:0041CF1F                 mov     edx, [ebp+var_24]
.text:0041CF22                 mov     [ebp+var_18], eax
.text:0041CF25                 mov     [ebp+var_14], edx
.text:0041CF28                 jmp     short loc_41CED5
.text:0041CF28 ; ---------------------------------------------------------------------------
.text:0041CF2A                 align 10h
.text:0041CF30
.text:0041CF30 loc_41CF30:                             ; CODE XREF: sub_41CE60+B4↑j
.text:0041CF30                 bsr     eax, [ebp+var_2C]
.text:0041CF34                 mov     ebx, eax
.text:0041CF36                 xor     ebx, 1Fh
.text:0041CF39                 jnz     short loc_41CF63
.text:0041CF3B                 cmp     edi, [ebp+var_2C]
.text:0041CF3E                 ja      short loc_41CF45
.text:0041CF40                 cmp     [ebp+var_30], esi
.text:0041CF43                 jb      short loc_41CF50
.text:0041CF45
.text:0041CF45 loc_41CF45:                             ; CODE XREF: sub_41CE60+DE↑j
.text:0041CF45                 mov     edx, [ebp+var_30]
.text:0041CF48                 sub     edx, esi
.text:0041CF4A                 sbb     edi, [ebp+var_2C]
.text:0041CF4D                 mov     [ebp+var_30], edx
.text:0041CF50
.text:0041CF50 loc_41CF50:                             ; CODE XREF: sub_41CE60+E3↑j
.text:0041CF50                 lea     ecx, [ebp+var_18]
.text:0041CF53                 test    ecx, ecx
.text:0041CF55                 jz      loc_41CED5
.text:0041CF5B                 mov     [ebp+var_24], edi
.text:0041CF5E                 jmp     loc_41CEC3
.text:0041CF63 ; ---------------------------------------------------------------------------
.text:0041CF63
.text:0041CF63 loc_41CF63:                             ; CODE XREF: sub_41CE60+D9↑j
.text:0041CF63                 mov     edx, [ebp+var_2C]
.text:0041CF66                 mov     eax, 20h ; ' '
.text:0041CF6B                 mov     cl, bl
.text:0041CF6D                 sub     eax, ebx
.text:0041CF6F                 mov     [ebp+var_34], eax
.text:0041CF72                 shl     edx, cl
.text:0041CF74                 mov     eax, esi
.text:0041CF76                 movzx   ecx, byte ptr [ebp+var_34]
.text:0041CF7A                 shr     eax, cl
.text:0041CF7C                 mov     cl, bl
.text:0041CF7E                 shl     esi, cl
.text:0041CF80                 or      edx, eax
.text:0041CF82                 mov     eax, [ebp+var_30]
.text:0041CF85                 movzx   ecx, byte ptr [ebp+var_34]
.text:0041CF89                 mov     [ebp+var_2C], edx
.text:0041CF8C                 mov     edx, edi
.text:0041CF8E                 shr     edx, cl
.text:0041CF90                 mov     cl, bl
.text:0041CF92                 shl     edi, cl
.text:0041CF94                 movzx   ecx, byte ptr [ebp+var_34]
.text:0041CF98                 shr     eax, cl
.text:0041CF9A                 or      edi, eax
.text:0041CF9C                 mov     eax, edi
.text:0041CF9E                 mov     cl, bl
.text:0041CFA0                 div     [ebp+var_2C]
.text:0041CFA3                 shl     [ebp+var_30], cl
.text:0041CFA6                 mov     edi, edx
.text:0041CFA8                 mul     esi
.text:0041CFAA                 mov     [ebp+var_3C], eax
.text:0041CFAD                 cmp     edx, edi
.text:0041CFAF                 ja      short loc_41CFEB
.text:0041CFB1                 cmp     edx, edi
.text:0041CFB3                 jz      short loc_41CFE3
.text:0041CFB5
.text:0041CFB5 loc_41CFB5:                             ; CODE XREF: sub_41CE60+189↓j
.text:0041CFB5                                         ; sub_41CE60+196↓j
.text:0041CFB5                 lea     eax, [ebp+var_18]
.text:0041CFB8                 test    eax, eax
.text:0041CFBA                 jz      loc_41CED5
.text:0041CFC0                 movzx   ecx, byte ptr [ebp+var_34]
.text:0041CFC4                 mov     eax, [ebp+var_30]
.text:0041CFC7                 sub     eax, [ebp+var_3C]
.text:0041CFCA                 sbb     edi, edx
.text:0041CFCC                 mov     [ebp+var_30], eax
.text:0041CFCF                 mov     edx, edi
.text:0041CFD1                 shl     edx, cl
.text:0041CFD3                 mov     cl, bl
.text:0041CFD5                 shr     eax, cl
.text:0041CFD7                 or      edx, eax
.text:0041CFD9                 mov     [ebp+var_28], edx
.text:0041CFDC                 shr     edi, cl
.text:0041CFDE                 jmp     loc_41CF19
.text:0041CFE3 ; ---------------------------------------------------------------------------
.text:0041CFE3
.text:0041CFE3 loc_41CFE3:                             ; CODE XREF: sub_41CE60+153↑j
.text:0041CFE3                 mov     eax, [ebp+var_30]
.text:0041CFE6                 cmp     [ebp+var_3C], eax
.text:0041CFE9                 jbe     short loc_41CFB5
.text:0041CFEB
.text:0041CFEB loc_41CFEB:                             ; CODE XREF: sub_41CE60+14F↑j
.text:0041CFEB                 mov     ecx, [ebp+var_3C]
.text:0041CFEE                 sub     ecx, esi
.text:0041CFF0                 sbb     edx, [ebp+var_2C]
.text:0041CFF3                 mov     [ebp+var_3C], ecx
.text:0041CFF6                 jmp     short loc_41CFB5
.text:0041CFF8 ; ---------------------------------------------------------------------------
.text:0041CFF8
.text:0041CFF8 loc_41CFF8:                             ; CODE XREF: sub_41CE60+34↑j
.text:0041CFF8                 neg     eax
.text:0041CFFA                 adc     edx, 0
.text:0041CFFD                 neg     edx
.text:0041CFFF                 jmp     loc_41CE9A
.text:0041D004 ; ---------------------------------------------------------------------------
.text:0041D004
.text:0041D004 loc_41D004:                             ; CODE XREF: sub_41CE60+2C↑j
.text:0041D004                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:0041D00B                 neg     ecx
.text:0041D00D                 adc     ebx, 0
.text:0041D010                 neg     ebx
.text:0041D012                 jmp     loc_41CE92
.text:0041D012 sub_41CE60      endp
.text:0041D012
.text:0041D012 ; ---------------------------------------------------------------------------
.text:0041D017                 align 10h
.text:0041D020
.text:0041D020 ; =============== S U B R O U T I N E =======================================
.text:0041D020
.text:0041D020 ; Attributes: bp-based frame
.text:0041D020
.text:0041D020 sub_41D020      proc near               ; CODE XREF: sub_406BE0+58↑p
.text:0041D020                                         ; sub_406BE0+AA↑p
.text:0041D020
.text:0041D020 var_2C          = dword ptr -2Ch
.text:0041D020 var_28          = dword ptr -28h
.text:0041D020 var_24          = dword ptr -24h
.text:0041D020 var_20          = dword ptr -20h
.text:0041D020 var_1C          = dword ptr -1Ch
.text:0041D020 var_14          = dword ptr -14h
.text:0041D020 arg_0           = dword ptr  8
.text:0041D020 arg_4           = dword ptr  0Ch
.text:0041D020 arg_8           = dword ptr  10h
.text:0041D020 arg_C           = dword ptr  14h
.text:0041D020
.text:0041D020                 push    ebp
.text:0041D021                 mov     ebp, esp
.text:0041D023                 push    edi
.text:0041D024                 push    esi
.text:0041D025                 push    ebx
.text:0041D026                 sub     esp, 24h
.text:0041D029                 mov     ebx, [ebp+arg_4]
.text:0041D02C                 mov     [ebp+var_20], 0
.text:0041D033                 mov     ecx, [ebp+arg_0]
.text:0041D036                 mov     eax, [ebp+arg_8]
.text:0041D039                 mov     [ebp+var_1C], 0
.text:0041D040                 test    ebx, ebx
.text:0041D042                 mov     edx, [ebp+arg_C]
.text:0041D045                 mov     [ebp+var_14], 0
.text:0041D04C                 js      loc_41D160
.text:0041D052
.text:0041D052 loc_41D052:                             ; CODE XREF: sub_41D020+14E↓j
.text:0041D052                 test    edx, edx
.text:0041D054                 js      loc_41D150
.text:0041D05A
.text:0041D05A loc_41D05A:                             ; CODE XREF: sub_41D020+13A↓j
.text:0041D05A                 mov     [ebp+var_24], ecx
.text:0041D05D                 test    edx, edx
.text:0041D05F                 mov     esi, eax
.text:0041D061                 jnz     short loc_41D0B6
.text:0041D063                 cmp     eax, ebx
.text:0041D065                 jbe     short loc_41D094
.text:0041D067                 mov     eax, ecx
.text:0041D069                 mov     edx, ebx
.text:0041D06B                 div     esi
.text:0041D06D                 mov     edi, eax
.text:0041D06F                 nop
.text:0041D070
.text:0041D070 loc_41D070:                             ; CODE XREF: sub_41D020+9C↓j
.text:0041D070                                         ; sub_41D020+B4↓j ...
.text:0041D070                 xor     ecx, ecx
.text:0041D072
.text:0041D072 loc_41D072:                             ; CODE XREF: sub_41D020+94↓j
.text:0041D072                 mov     [ebp+var_1C], ecx
.text:0041D075                 mov     ecx, [ebp+var_14]
.text:0041D078                 mov     [ebp+var_20], edi
.text:0041D07B                 mov     eax, [ebp+var_20]
.text:0041D07E                 mov     edx, [ebp+var_1C]
.text:0041D081                 test    ecx, ecx
.text:0041D083                 jz      short loc_41D08C
.text:0041D085                 neg     eax
.text:0041D087                 adc     edx, 0
.text:0041D08A                 neg     edx
.text:0041D08C
.text:0041D08C loc_41D08C:                             ; CODE XREF: sub_41D020+63↑j
.text:0041D08C                 add     esp, 24h
.text:0041D08F                 pop     ebx
.text:0041D090                 pop     esi
.text:0041D091                 pop     edi
.text:0041D092                 pop     ebp
.text:0041D093                 retn
.text:0041D094 ; ---------------------------------------------------------------------------
.text:0041D094
.text:0041D094 loc_41D094:                             ; CODE XREF: sub_41D020+45↑j
.text:0041D094                 test    eax, eax
.text:0041D096                 jnz     short loc_41D0A5
.text:0041D098                 mov     eax, 1
.text:0041D09D                 xor     ecx, ecx
.text:0041D09F                 xor     edx, edx
.text:0041D0A1                 div     ecx
.text:0041D0A3                 mov     esi, eax
.text:0041D0A5
.text:0041D0A5 loc_41D0A5:                             ; CODE XREF: sub_41D020+76↑j
.text:0041D0A5                 mov     eax, ebx
.text:0041D0A7                 xor     edx, edx
.text:0041D0A9                 div     esi
.text:0041D0AB                 mov     ecx, eax
.text:0041D0AD                 mov     eax, [ebp+var_24]
.text:0041D0B0                 div     esi
.text:0041D0B2                 mov     edi, eax
.text:0041D0B4                 jmp     short loc_41D072
.text:0041D0B6 ; ---------------------------------------------------------------------------
.text:0041D0B6
.text:0041D0B6 loc_41D0B6:                             ; CODE XREF: sub_41D020+41↑j
.text:0041D0B6                 cmp     edx, ebx
.text:0041D0B8                 jbe     short loc_41D0C0
.text:0041D0BA                 xor     edi, edi
.text:0041D0BC                 jmp     short loc_41D070
.text:0041D0BC ; ---------------------------------------------------------------------------
.text:0041D0BE                 align 10h
.text:0041D0C0
.text:0041D0C0 loc_41D0C0:                             ; CODE XREF: sub_41D020+98↑j
.text:0041D0C0                 bsr     eax, edx
.text:0041D0C3                 xor     eax, 1Fh
.text:0041D0C6                 mov     [ebp+var_28], eax
.text:0041D0C9                 jnz     short loc_41D0E0
.text:0041D0CB                 cmp     ebx, edx
.text:0041D0CD                 ja      short loc_41D0D6
.text:0041D0CF                 xor     edi, edi
.text:0041D0D1                 cmp     [ebp+var_24], esi
.text:0041D0D4                 jb      short loc_41D070
.text:0041D0D6
.text:0041D0D6 loc_41D0D6:                             ; CODE XREF: sub_41D020+AD↑j
.text:0041D0D6                 mov     edi, 1
.text:0041D0DB                 jmp     short loc_41D070
.text:0041D0DB ; ---------------------------------------------------------------------------
.text:0041D0DD                 align 10h
.text:0041D0E0
.text:0041D0E0 loc_41D0E0:                             ; CODE XREF: sub_41D020+A9↑j
.text:0041D0E0                 mov     eax, [ebp+var_28]
.text:0041D0E3                 mov     ecx, 20h ; ' '
.text:0041D0E8                 sub     ecx, eax
.text:0041D0EA                 mov     [ebp+var_2C], ecx
.text:0041D0ED                 mov     eax, esi
.text:0041D0EF                 movzx   ecx, byte ptr [ebp+var_28]
.text:0041D0F3                 shl     edx, cl
.text:0041D0F5                 mov     edi, edx
.text:0041D0F7                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041D0FB                 mov     edx, ebx
.text:0041D0FD                 shr     eax, cl
.text:0041D0FF                 movzx   ecx, byte ptr [ebp+var_28]
.text:0041D103                 or      edi, eax
.text:0041D105                 mov     eax, [ebp+var_24]
.text:0041D108                 shl     esi, cl
.text:0041D10A                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041D10E                 shr     edx, cl
.text:0041D110                 movzx   ecx, byte ptr [ebp+var_28]
.text:0041D114                 shl     ebx, cl
.text:0041D116                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041D11A                 shr     eax, cl
.text:0041D11C                 or      ebx, eax
.text:0041D11E                 movzx   ecx, byte ptr [ebp+var_28]
.text:0041D122                 mov     eax, ebx
.text:0041D124                 div     edi
.text:0041D126                 mov     ebx, edx
.text:0041D128                 mov     edi, eax
.text:0041D12A                 shl     [ebp+var_24], cl
.text:0041D12D                 mul     esi
.text:0041D12F                 cmp     edx, ebx
.text:0041D131                 ja      short loc_41D144
.text:0041D133                 cmp     edx, ebx
.text:0041D135                 jnz     loc_41D070
.text:0041D13B                 cmp     eax, [ebp+var_24]
.text:0041D13E                 jbe     loc_41D070
.text:0041D144
.text:0041D144 loc_41D144:                             ; CODE XREF: sub_41D020+111↑j
.text:0041D144                 dec     edi
.text:0041D145                 jmp     loc_41D070
.text:0041D145 ; ---------------------------------------------------------------------------
.text:0041D14A                 align 10h
.text:0041D150
.text:0041D150 loc_41D150:                             ; CODE XREF: sub_41D020+34↑j
.text:0041D150                 not     [ebp+var_14]
.text:0041D153                 neg     eax
.text:0041D155                 adc     edx, 0
.text:0041D158                 neg     edx
.text:0041D15A                 jmp     loc_41D05A
.text:0041D15A ; ---------------------------------------------------------------------------
.text:0041D15F                 align 10h
.text:0041D160
.text:0041D160 loc_41D160:                             ; CODE XREF: sub_41D020+2C↑j
.text:0041D160                 mov     [ebp+var_14], 0FFFFFFFFh
.text:0041D167                 neg     ecx
.text:0041D169                 adc     ebx, 0
.text:0041D16C                 neg     ebx
.text:0041D16E                 jmp     loc_41D052
.text:0041D16E sub_41D020      endp
.text:0041D16E
.text:0041D16E ; ---------------------------------------------------------------------------
.text:0041D173                 align 10h
.text:0041D180
.text:0041D180 ; =============== S U B R O U T I N E =======================================
.text:0041D180
.text:0041D180 ; Attributes: bp-based frame
.text:0041D180
.text:0041D180 sub_41D180      proc near               ; CODE XREF: sub_40C570+63↑p
.text:0041D180                                         ; sub_40C570+B3↑p ...
.text:0041D180
.text:0041D180 var_24          = dword ptr -24h
.text:0041D180 var_20          = dword ptr -20h
.text:0041D180 var_1C          = dword ptr -1Ch
.text:0041D180 var_18          = dword ptr -18h
.text:0041D180 var_14          = dword ptr -14h
.text:0041D180 var_C           = dword ptr -0Ch
.text:0041D180 var_8           = dword ptr -8
.text:0041D180 var_4           = dword ptr -4
.text:0041D180 arg_0           = dword ptr  8
.text:0041D180 arg_4           = dword ptr  0Ch
.text:0041D180 arg_8           = dword ptr  10h
.text:0041D180 arg_C           = dword ptr  14h
.text:0041D180
.text:0041D180                 push    ebp
.text:0041D181                 mov     ebp, esp
.text:0041D183                 sub     esp, 28h
.text:0041D186                 mov     [ebp+var_C], ebx
.text:0041D189                 mov     edx, [ebp+arg_C]
.text:0041D18C                 mov     ecx, [ebp+arg_0]
.text:0041D18F                 mov     [ebp+var_8], esi
.text:0041D192                 mov     eax, [ebp+arg_8]
.text:0041D195                 test    edx, edx
.text:0041D197                 mov     [ebp+var_4], edi
.text:0041D19A                 mov     ebx, [ebp+arg_4]
.text:0041D19D                 mov     esi, eax
.text:0041D19F                 mov     [ebp+var_18], 0
.text:0041D1A6                 mov     [ebp+var_14], 0
.text:0041D1AD                 mov     [ebp+var_1C], ecx
.text:0041D1B0                 jnz     short loc_41D202
.text:0041D1B2                 cmp     eax, ebx
.text:0041D1B4                 jbe     short loc_41D1E0
.text:0041D1B6                 mov     eax, ecx
.text:0041D1B8                 mov     edx, ebx
.text:0041D1BA                 div     esi
.text:0041D1BC                 mov     edi, eax
.text:0041D1BE                 mov     esi, esi
.text:0041D1C0
.text:0041D1C0 loc_41D1C0:                             ; CODE XREF: sub_41D180+88↓j
.text:0041D1C0                                         ; sub_41D180+A4↓j ...
.text:0041D1C0                 xor     ecx, ecx
.text:0041D1C2
.text:0041D1C2 loc_41D1C2:                             ; CODE XREF: sub_41D180+80↓j
.text:0041D1C2                 mov     [ebp+var_18], edi
.text:0041D1C5                 mov     ebx, [ebp+var_C]
.text:0041D1C8                 mov     eax, [ebp+var_18]
.text:0041D1CB                 mov     [ebp+var_14], ecx
.text:0041D1CE                 mov     esi, [ebp+var_8]
.text:0041D1D1                 mov     edx, [ebp+var_14]
.text:0041D1D4                 mov     edi, [ebp+var_4]
.text:0041D1D7                 mov     esp, ebp
.text:0041D1D9                 pop     ebp
.text:0041D1DA                 retn
.text:0041D1DA ; ---------------------------------------------------------------------------
.text:0041D1DB                 align 10h
.text:0041D1E0
.text:0041D1E0 loc_41D1E0:                             ; CODE XREF: sub_41D180+34↑j
.text:0041D1E0                 test    eax, eax
.text:0041D1E2                 jnz     short loc_41D1F1
.text:0041D1E4                 mov     eax, 1
.text:0041D1E9                 xor     ecx, ecx
.text:0041D1EB                 xor     edx, edx
.text:0041D1ED                 div     ecx
.text:0041D1EF                 mov     esi, eax
.text:0041D1F1
.text:0041D1F1 loc_41D1F1:                             ; CODE XREF: sub_41D180+62↑j
.text:0041D1F1                 mov     eax, ebx
.text:0041D1F3                 xor     edx, edx
.text:0041D1F5                 div     esi
.text:0041D1F7                 mov     ecx, eax
.text:0041D1F9                 mov     eax, [ebp+var_1C]
.text:0041D1FC                 div     esi
.text:0041D1FE                 mov     edi, eax
.text:0041D200                 jmp     short loc_41D1C2
.text:0041D202 ; ---------------------------------------------------------------------------
.text:0041D202
.text:0041D202 loc_41D202:                             ; CODE XREF: sub_41D180+30↑j
.text:0041D202                 cmp     edx, ebx
.text:0041D204                 jbe     short loc_41D210
.text:0041D206                 xor     edi, edi
.text:0041D208                 jmp     short loc_41D1C0
.text:0041D208 ; ---------------------------------------------------------------------------
.text:0041D20A                 align 10h
.text:0041D210
.text:0041D210 loc_41D210:                             ; CODE XREF: sub_41D180+84↑j
.text:0041D210                 bsr     eax, edx
.text:0041D213                 xor     eax, 1Fh
.text:0041D216                 mov     [ebp+var_20], eax
.text:0041D219                 jnz     short loc_41D230
.text:0041D21B                 cmp     ebx, edx
.text:0041D21D                 ja      short loc_41D226
.text:0041D21F                 xor     edi, edi
.text:0041D221                 cmp     [ebp+var_1C], esi
.text:0041D224                 jb      short loc_41D1C0
.text:0041D226
.text:0041D226 loc_41D226:                             ; CODE XREF: sub_41D180+9D↑j
.text:0041D226                 mov     edi, 1
.text:0041D22B                 jmp     short loc_41D1C0
.text:0041D22B ; ---------------------------------------------------------------------------
.text:0041D22D                 align 10h
.text:0041D230
.text:0041D230 loc_41D230:                             ; CODE XREF: sub_41D180+99↑j
.text:0041D230                 mov     eax, [ebp+var_20]
.text:0041D233                 mov     ecx, 20h ; ' '
.text:0041D238                 sub     ecx, eax
.text:0041D23A                 mov     [ebp+var_24], ecx
.text:0041D23D                 mov     eax, esi
.text:0041D23F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041D243                 shl     edx, cl
.text:0041D245                 mov     edi, edx
.text:0041D247                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041D24B                 mov     edx, ebx
.text:0041D24D                 shr     eax, cl
.text:0041D24F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041D253                 or      edi, eax
.text:0041D255                 mov     eax, [ebp+var_1C]
.text:0041D258                 shl     esi, cl
.text:0041D25A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041D25E                 shr     edx, cl
.text:0041D260                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041D264                 shl     ebx, cl
.text:0041D266                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041D26A                 shr     eax, cl
.text:0041D26C                 or      ebx, eax
.text:0041D26E                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041D272                 mov     eax, ebx
.text:0041D274                 div     edi
.text:0041D276                 mov     ebx, edx
.text:0041D278                 mov     edi, eax
.text:0041D27A                 shl     [ebp+var_1C], cl
.text:0041D27D                 mul     esi
.text:0041D27F                 cmp     edx, ebx
.text:0041D281                 ja      short loc_41D294
.text:0041D283                 cmp     edx, ebx
.text:0041D285                 jnz     loc_41D1C0
.text:0041D28B                 cmp     eax, [ebp+var_1C]
.text:0041D28E                 jbe     loc_41D1C0
.text:0041D294
.text:0041D294 loc_41D294:                             ; CODE XREF: sub_41D180+101↑j
.text:0041D294                 dec     edi
.text:0041D295                 jmp     loc_41D1C0
.text:0041D295 sub_41D180      endp
.text:0041D295
.text:0041D295 ; ---------------------------------------------------------------------------
.text:0041D29A                 align 10h
.text:0041D2A0
.text:0041D2A0 ; =============== S U B R O U T I N E =======================================
.text:0041D2A0
.text:0041D2A0 ; Attributes: bp-based frame
.text:0041D2A0
.text:0041D2A0 sub_41D2A0      proc near               ; CODE XREF: sub_40C570+82↑p
.text:0041D2A0                                         ; sub_40CC40+A8↑p ...
.text:0041D2A0
.text:0041D2A0 var_34          = dword ptr -34h
.text:0041D2A0 var_2C          = dword ptr -2Ch
.text:0041D2A0 var_28          = dword ptr -28h
.text:0041D2A0 var_24          = dword ptr -24h
.text:0041D2A0 var_20          = dword ptr -20h
.text:0041D2A0 var_1C          = dword ptr -1Ch
.text:0041D2A0 var_18          = dword ptr -18h
.text:0041D2A0 var_14          = dword ptr -14h
.text:0041D2A0 arg_0           = dword ptr  8
.text:0041D2A0 arg_4           = dword ptr  0Ch
.text:0041D2A0 arg_8           = dword ptr  10h
.text:0041D2A0 arg_C           = dword ptr  14h
.text:0041D2A0
.text:0041D2A0                 push    ebp
.text:0041D2A1                 mov     ebp, esp
.text:0041D2A3                 push    edi
.text:0041D2A4                 push    esi
.text:0041D2A5                 push    ebx
.text:0041D2A6                 sub     esp, 2Ch
.text:0041D2A9                 mov     edx, [ebp+arg_C]
.text:0041D2AC                 mov     [ebp+var_20], 0
.text:0041D2B3                 mov     ecx, [ebp+arg_0]
.text:0041D2B6                 mov     ebx, [ebp+arg_4]
.text:0041D2B9                 mov     [ebp+var_1C], 0
.text:0041D2C0                 mov     eax, [ebp+arg_8]
.text:0041D2C3                 test    edx, edx
.text:0041D2C5                 mov     [ebp+var_24], edx
.text:0041D2C8                 mov     edi, ebx
.text:0041D2CA                 mov     esi, eax
.text:0041D2CC                 mov     [ebp+var_28], ecx
.text:0041D2CF                 jnz     short loc_41D330
.text:0041D2D1                 cmp     eax, ebx
.text:0041D2D3                 jbe     short loc_41D310
.text:0041D2D5                 mov     eax, ecx
.text:0041D2D7                 mov     edx, ebx
.text:0041D2D9                 div     esi
.text:0041D2DB
.text:0041D2DB loc_41D2DB:                             ; CODE XREF: sub_41D2A0+8B↓j
.text:0041D2DB                 mov     [ebp+var_28], edx
.text:0041D2DE                 lea     ecx, [ebp+var_18]
.text:0041D2E1                 test    ecx, ecx
.text:0041D2E3                 jz      short loc_41D2FE
.text:0041D2E5                 mov     [ebp+var_1C], 0
.text:0041D2EC
.text:0041D2EC loc_41D2EC:                             ; CODE XREF: sub_41D2A0+DA↓j
.text:0041D2EC                 mov     eax, [ebp+var_28]
.text:0041D2EF                 mov     [ebp+var_20], eax
.text:0041D2F2                 mov     edx, [ebp+var_20]
.text:0041D2F5                 mov     ecx, [ebp+var_1C]
.text:0041D2F8                 mov     [ebp+var_18], edx
.text:0041D2FB                 mov     [ebp+var_14], ecx
.text:0041D2FE
.text:0041D2FE loc_41D2FE:                             ; CODE XREF: sub_41D2A0+43↑j
.text:0041D2FE                                         ; sub_41D2A0+A7↓j ...
.text:0041D2FE                 mov     eax, [ebp+var_18]
.text:0041D301                 mov     edx, [ebp+var_14]
.text:0041D304                 add     esp, 2Ch
.text:0041D307                 pop     ebx
.text:0041D308                 pop     esi
.text:0041D309                 pop     edi
.text:0041D30A                 pop     ebp
.text:0041D30B                 retn
.text:0041D30B ; ---------------------------------------------------------------------------
.text:0041D30C                 align 10h
.text:0041D310
.text:0041D310 loc_41D310:                             ; CODE XREF: sub_41D2A0+33↑j
.text:0041D310                 test    eax, eax
.text:0041D312                 jnz     short loc_41D31F
.text:0041D314                 mov     eax, 1
.text:0041D319                 xor     edx, edx
.text:0041D31B                 div     esi
.text:0041D31D                 mov     esi, eax
.text:0041D31F
.text:0041D31F loc_41D31F:                             ; CODE XREF: sub_41D2A0+72↑j
.text:0041D31F                 mov     eax, edi
.text:0041D321                 mov     edx, [ebp+var_24]
.text:0041D324                 div     esi
.text:0041D326                 mov     eax, [ebp+var_28]
.text:0041D329                 div     esi
.text:0041D32B                 jmp     short loc_41D2DB
.text:0041D32B ; ---------------------------------------------------------------------------
.text:0041D32D                 align 10h
.text:0041D330
.text:0041D330 loc_41D330:                             ; CODE XREF: sub_41D2A0+2F↑j
.text:0041D330                 cmp     [ebp+var_24], ebx
.text:0041D333                 jbe     short loc_41D350
.text:0041D335                 mov     [ebp+var_20], ecx
.text:0041D338
.text:0041D338 loc_41D338:                             ; CODE XREF: sub_41D2A0+15B↓j
.text:0041D338                 mov     [ebp+var_1C], edi
.text:0041D33B                 mov     eax, [ebp+var_20]
.text:0041D33E                 mov     edx, [ebp+var_1C]
.text:0041D341                 mov     [ebp+var_18], eax
.text:0041D344                 mov     [ebp+var_14], edx
.text:0041D347                 jmp     short loc_41D2FE
.text:0041D347 ; ---------------------------------------------------------------------------
.text:0041D349                 align 10h
.text:0041D350
.text:0041D350 loc_41D350:                             ; CODE XREF: sub_41D2A0+93↑j
.text:0041D350                 bsr     eax, [ebp+var_24]
.text:0041D354                 mov     ebx, eax
.text:0041D356                 xor     ebx, 1Fh
.text:0041D359                 jnz     short loc_41D380
.text:0041D35B                 cmp     edi, [ebp+var_24]
.text:0041D35E                 ja      short loc_41D365
.text:0041D360                 cmp     [ebp+var_28], esi
.text:0041D363                 jb      short loc_41D370
.text:0041D365
.text:0041D365 loc_41D365:                             ; CODE XREF: sub_41D2A0+BE↑j
.text:0041D365                 mov     edx, [ebp+var_28]
.text:0041D368                 sub     edx, esi
.text:0041D36A                 sbb     edi, [ebp+var_24]
.text:0041D36D                 mov     [ebp+var_28], edx
.text:0041D370
.text:0041D370 loc_41D370:                             ; CODE XREF: sub_41D2A0+C3↑j
.text:0041D370                 lea     ecx, [ebp+var_18]
.text:0041D373                 test    ecx, ecx
.text:0041D375                 jz      short loc_41D2FE
.text:0041D377                 mov     [ebp+var_1C], edi
.text:0041D37A                 jmp     loc_41D2EC
.text:0041D37A ; ---------------------------------------------------------------------------
.text:0041D37F                 align 10h
.text:0041D380
.text:0041D380 loc_41D380:                             ; CODE XREF: sub_41D2A0+B9↑j
.text:0041D380                 mov     edx, [ebp+var_24]
.text:0041D383                 mov     eax, 20h ; ' '
.text:0041D388                 mov     cl, bl
.text:0041D38A                 sub     eax, ebx
.text:0041D38C                 mov     [ebp+var_2C], eax
.text:0041D38F                 shl     edx, cl
.text:0041D391                 mov     eax, esi
.text:0041D393                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041D397                 shr     eax, cl
.text:0041D399                 mov     cl, bl
.text:0041D39B                 shl     esi, cl
.text:0041D39D                 or      edx, eax
.text:0041D39F                 mov     eax, [ebp+var_28]
.text:0041D3A2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041D3A6                 mov     [ebp+var_24], edx
.text:0041D3A9                 mov     edx, edi
.text:0041D3AB                 shr     edx, cl
.text:0041D3AD                 mov     cl, bl
.text:0041D3AF                 shl     edi, cl
.text:0041D3B1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041D3B5                 shr     eax, cl
.text:0041D3B7                 or      edi, eax
.text:0041D3B9                 mov     eax, edi
.text:0041D3BB                 mov     cl, bl
.text:0041D3BD                 div     [ebp+var_24]
.text:0041D3C0                 shl     [ebp+var_28], cl
.text:0041D3C3                 mov     edi, edx
.text:0041D3C5                 mul     esi
.text:0041D3C7                 mov     [ebp+var_34], eax
.text:0041D3CA                 cmp     edx, edi
.text:0041D3CC                 ja      short loc_41D408
.text:0041D3CE                 cmp     edx, edi
.text:0041D3D0                 jz      short loc_41D400
.text:0041D3D2
.text:0041D3D2 loc_41D3D2:                             ; CODE XREF: sub_41D2A0+166↓j
.text:0041D3D2                                         ; sub_41D2A0+173↓j
.text:0041D3D2                 lea     eax, [ebp+var_18]
.text:0041D3D5                 test    eax, eax
.text:0041D3D7                 jz      loc_41D2FE
.text:0041D3DD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041D3E1                 mov     eax, [ebp+var_28]
.text:0041D3E4                 sub     eax, [ebp+var_34]
.text:0041D3E7                 sbb     edi, edx
.text:0041D3E9                 mov     [ebp+var_28], eax
.text:0041D3EC                 mov     edx, edi
.text:0041D3EE                 shl     edx, cl
.text:0041D3F0                 mov     cl, bl
.text:0041D3F2                 shr     eax, cl
.text:0041D3F4                 or      edx, eax
.text:0041D3F6                 mov     [ebp+var_20], edx
.text:0041D3F9                 shr     edi, cl
.text:0041D3FB                 jmp     loc_41D338
.text:0041D400 ; ---------------------------------------------------------------------------
.text:0041D400
.text:0041D400 loc_41D400:                             ; CODE XREF: sub_41D2A0+130↑j
.text:0041D400                 mov     eax, [ebp+var_28]
.text:0041D403                 cmp     [ebp+var_34], eax
.text:0041D406                 jbe     short loc_41D3D2
.text:0041D408
.text:0041D408 loc_41D408:                             ; CODE XREF: sub_41D2A0+12C↑j
.text:0041D408                 mov     ecx, [ebp+var_34]
.text:0041D40B                 sub     ecx, esi
.text:0041D40D                 sbb     edx, [ebp+var_24]
.text:0041D410                 mov     [ebp+var_34], ecx
.text:0041D413                 jmp     short loc_41D3D2
.text:0041D413 sub_41D2A0      endp
.text:0041D413
.text:0041D413 ; ---------------------------------------------------------------------------
.text:0041D415                 align 10h
.text:0041D420
.text:0041D420 ; =============== S U B R O U T I N E =======================================
.text:0041D420
.text:0041D420 ; Attributes: thunk
.text:0041D420
.text:0041D420 ; void __cdecl tzset()
.text:0041D420 _tzset          proc near               ; CODE XREF: sub_402430+478↑p
.text:0041D420                                         ; sub_403410:loc_405330↑p
.text:0041D420                 jmp     ds:__imp__tzset
.text:0041D420 _tzset          endp
.text:0041D420
.text:0041D420 ; ---------------------------------------------------------------------------
.text:0041D426                 align 10h
.text:0041D430
.text:0041D430 ; =============== S U B R O U T I N E =======================================
.text:0041D430
.text:0041D430 ; Attributes: thunk
.text:0041D430
.text:0041D430 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0041D430 _stricmp        proc near               ; CODE XREF: sub_40E050+46F↑p
.text:0041D430                                         ; sub_419690+2E↑p ...
.text:0041D430
.text:0041D430 String1         = dword ptr  4
.text:0041D430 String2         = dword ptr  8
.text:0041D430
.text:0041D430                 jmp     ds:__imp__stricmp
.text:0041D430 _stricmp        endp
.text:0041D430
.text:0041D430 ; ---------------------------------------------------------------------------
.text:0041D436                 align 10h
.text:0041D440
.text:0041D440 ; =============== S U B R O U T I N E =======================================
.text:0041D440
.text:0041D440 ; Attributes: thunk
.text:0041D440
.text:0041D440 ; char *__cdecl strdup(const char *String)
.text:0041D440 _strdup         proc near               ; CODE XREF: sub_4192C0+101↑p
.text:0041D440                                         ; .text:0041952A↑p ...
.text:0041D440
.text:0041D440 String          = dword ptr  4
.text:0041D440
.text:0041D440                 jmp     ds:__imp__strdup
.text:0041D440 _strdup         endp
.text:0041D440
.text:0041D440 ; ---------------------------------------------------------------------------
.text:0041D446                 align 10h
.text:0041D450
.text:0041D450 ; =============== S U B R O U T I N E =======================================
.text:0041D450
.text:0041D450 ; Attributes: thunk
.text:0041D450
.text:0041D450 ; int __cdecl getpid()
.text:0041D450 _getpid         proc near               ; CODE XREF: sub_41B2D0+84↑p
.text:0041D450                 jmp     ds:__imp__getpid
.text:0041D450 _getpid         endp
.text:0041D450
.text:0041D450 ; ---------------------------------------------------------------------------
.text:0041D456                 align 10h
.text:0041D460
.text:0041D460 ; =============== S U B R O U T I N E =======================================
.text:0041D460
.text:0041D460 ; Attributes: thunk
.text:0041D460
.text:0041D460 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0041D460 _chmod          proc near               ; CODE XREF: sub_41B700+41↑j
.text:0041D460
.text:0041D460 FileName        = dword ptr  4
.text:0041D460 AccessMode      = dword ptr  8
.text:0041D460
.text:0041D460                 jmp     ds:__imp__chmod
.text:0041D460 _chmod          endp
.text:0041D460
.text:0041D460 ; ---------------------------------------------------------------------------
.text:0041D466                 align 10h
.text:0041D470                 jmp     ds:__set_app_type
.text:0041D470 ; ---------------------------------------------------------------------------
.text:0041D476                 align 10h
.text:0041D480
.text:0041D480 ; =============== S U B R O U T I N E =======================================
.text:0041D480
.text:0041D480 ; Attributes: thunk
.text:0041D480
.text:0041D480 ; void __cdecl cexit()
.text:0041D480 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0041D480                 jmp     ds:__imp__cexit
.text:0041D480 _cexit          endp
.text:0041D480
.text:0041D480 ; ---------------------------------------------------------------------------
.text:0041D486                 align 10h
.text:0041D490
.text:0041D490 ; =============== S U B R O U T I N E =======================================
.text:0041D490
.text:0041D490 ; Attributes: thunk
.text:0041D490
.text:0041D490 ; char ***__cdecl _p__environ()
.text:0041D490 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0041D490                 jmp     ds:__imp___p__environ
.text:0041D490 __p__environ    endp
.text:0041D490
.text:0041D490 ; ---------------------------------------------------------------------------
.text:0041D496                 align 10h
.text:0041D4A0
.text:0041D4A0 ; =============== S U B R O U T I N E =======================================
.text:0041D4A0
.text:0041D4A0 ; Attributes: thunk
.text:0041D4A0
.text:0041D4A0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0041D4A0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0041D4A0                                         ; TopLevelExceptionFilter+88↑p ...
.text:0041D4A0
.text:0041D4A0 Signal          = dword ptr  4
.text:0041D4A0 Function        = dword ptr  8
.text:0041D4A0
.text:0041D4A0                 jmp     ds:__imp_signal
.text:0041D4A0 signal          endp
.text:0041D4A0
.text:0041D4A0 ; ---------------------------------------------------------------------------
.text:0041D4A6                 align 10h
.text:0041D4B0
.text:0041D4B0 ; =============== S U B R O U T I N E =======================================
.text:0041D4B0
.text:0041D4B0 ; Attributes: thunk
.text:0041D4B0
.text:0041D4B0 ; int *__cdecl _p__fmode()
.text:0041D4B0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0041D4B0                 jmp     ds:__imp___p__fmode
.text:0041D4B0 __p__fmode      endp
.text:0041D4B0
.text:0041D4B0 ; ---------------------------------------------------------------------------
.text:0041D4B6                 align 10h
.text:0041D4C0
.text:0041D4C0 ; =============== S U B R O U T I N E =======================================
.text:0041D4C0
.text:0041D4C0 ; Attributes: thunk
.text:0041D4C0
.text:0041D4C0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0041D4C0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0041D4C0                                         ; sub_401080+90↑p ...
.text:0041D4C0
.text:0041D4C0 FileHandle      = dword ptr  4
.text:0041D4C0 Mode            = dword ptr  8
.text:0041D4C0
.text:0041D4C0                 jmp     ds:__imp__setmode
.text:0041D4C0 _setmode        endp
.text:0041D4C0
.text:0041D4C0 ; ---------------------------------------------------------------------------
.text:0041D4C6                 align 10h
.text:0041D4D0
.text:0041D4D0 ; =============== S U B R O U T I N E =======================================
.text:0041D4D0
.text:0041D4D0 ; Attributes: thunk
.text:0041D4D0
.text:0041D4D0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0041D4D0                 jmp     ds:__imp___getmainargs
.text:0041D4D0 __getmainargs   endp
.text:0041D4D0
.text:0041D4D0 ; ---------------------------------------------------------------------------
.text:0041D4D6                 align 10h
.text:0041D4E0
.text:0041D4E0 ; =============== S U B R O U T I N E =======================================
.text:0041D4E0
.text:0041D4E0 ; Attributes: thunk
.text:0041D4E0
.text:0041D4E0 ; int __cdecl puts(const char *Buffer)
.text:0041D4E0 puts            proc near               ; CODE XREF: sub_402D90+C7↑p
.text:0041D4E0                                         ; sub_402D90+157↑p
.text:0041D4E0
.text:0041D4E0 Buffer          = dword ptr  4
.text:0041D4E0
.text:0041D4E0                 jmp     ds:__imp_puts
.text:0041D4E0 puts            endp
.text:0041D4E0
.text:0041D4E0 ; ---------------------------------------------------------------------------
.text:0041D4E6                 align 10h
.text:0041D4F0
.text:0041D4F0 ; =============== S U B R O U T I N E =======================================
.text:0041D4F0
.text:0041D4F0 ; Attributes: thunk
.text:0041D4F0
.text:0041D4F0 ; int __cdecl putchar(int Character)
.text:0041D4F0 putchar         proc near               ; CODE XREF: sub_402D90+16A↑p
.text:0041D4F0
.text:0041D4F0 Character       = dword ptr  4
.text:0041D4F0
.text:0041D4F0                 jmp     ds:__imp_putchar
.text:0041D4F0 putchar         endp
.text:0041D4F0
.text:0041D4F0 ; ---------------------------------------------------------------------------
.text:0041D4F6                 align 10h
.text:0041D500
.text:0041D500 ; =============== S U B R O U T I N E =======================================
.text:0041D500
.text:0041D500 ; Attributes: thunk
.text:0041D500
.text:0041D500 ; struct tm *__cdecl localtime(const __time32_t *const Time)
.text:0041D500 localtime       proc near               ; CODE XREF: sub_402D90+3D↑p
.text:0041D500                                         ; sub_406DB0+109↑p ...
.text:0041D500
.text:0041D500 Time            = dword ptr  4
.text:0041D500
.text:0041D500                 jmp     ds:__imp_localtime
.text:0041D500 localtime       endp
.text:0041D500
.text:0041D500 ; ---------------------------------------------------------------------------
.text:0041D506                 align 10h
.text:0041D510
.text:0041D510 ; =============== S U B R O U T I N E =======================================
.text:0041D510
.text:0041D510 ; Attributes: thunk
.text:0041D510
.text:0041D510 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0041D510 setlocale       proc near               ; CODE XREF: sub_402430+75↑p
.text:0041D510                                         ; sub_402D90+F0↑p ...
.text:0041D510
.text:0041D510 Category        = dword ptr  4
.text:0041D510 Locale          = dword ptr  8
.text:0041D510
.text:0041D510                 jmp     ds:__imp_setlocale
.text:0041D510 setlocale       endp
.text:0041D510
.text:0041D510 ; ---------------------------------------------------------------------------
.text:0041D516                 align 10h
.text:0041D520
.text:0041D520 ; =============== S U B R O U T I N E =======================================
.text:0041D520
.text:0041D520 ; Attributes: thunk
.text:0041D520
.text:0041D520 ; void __cdecl free(void *Block)
.text:0041D520 free            proc near               ; CODE XREF: sub_402D90+CF↑p
.text:0041D520                                         ; sub_4031F0+14C↑p ...
.text:0041D520
.text:0041D520 Block           = dword ptr  4
.text:0041D520
.text:0041D520                 jmp     ds:__imp_free
.text:0041D520 free            endp
.text:0041D520
.text:0041D520 ; ---------------------------------------------------------------------------
.text:0041D526                 align 10h
.text:0041D530
.text:0041D530 ; =============== S U B R O U T I N E =======================================
.text:0041D530
.text:0041D530 ; Attributes: thunk
.text:0041D530
.text:0041D530 ; int __cdecl fclose(FILE *Stream)
.text:0041D530 fclose          proc near               ; CODE XREF: sub_4031F0+12C↑p
.text:0041D530                                         ; sub_407840+27↑p ...
.text:0041D530
.text:0041D530 Stream          = dword ptr  4
.text:0041D530
.text:0041D530                 jmp     ds:__imp_fclose
.text:0041D530 fclose          endp
.text:0041D530
.text:0041D530 ; ---------------------------------------------------------------------------
.text:0041D536                 align 10h
.text:0041D540
.text:0041D540 ; =============== S U B R O U T I N E =======================================
.text:0041D540
.text:0041D540 ; Attributes: thunk
.text:0041D540
.text:0041D540 ; int *__cdecl errno()
.text:0041D540 _errno          proc near               ; CODE XREF: sub_402430+65D↑p
.text:0041D540                                         ; sub_402430+6A8↑p ...
.text:0041D540                 jmp     ds:__imp__errno
.text:0041D540 _errno          endp
.text:0041D540
.text:0041D540 ; ---------------------------------------------------------------------------
.text:0041D546                 align 10h
.text:0041D550
.text:0041D550 ; =============== S U B R O U T I N E =======================================
.text:0041D550
.text:0041D550 ; Attributes: noreturn thunk
.text:0041D550
.text:0041D550 ; void __cdecl __noreturn exit(int Code)
.text:0041D550 exit            proc near               ; CODE XREF: sub_402430:loc_402577↑p
.text:0041D550                                         ; sub_402F50+3B↑p ...
.text:0041D550
.text:0041D550 Code            = dword ptr  4
.text:0041D550
.text:0041D550                 jmp     ds:__imp_exit
.text:0041D550 exit            endp
.text:0041D550
.text:0041D550 ; ---------------------------------------------------------------------------
.text:0041D556                 align 10h
.text:0041D560
.text:0041D560 ; =============== S U B R O U T I N E =======================================
.text:0041D560
.text:0041D560 ; Attributes: thunk
.text:0041D560
.text:0041D560 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0041D560 fputs           proc near               ; CODE XREF: sub_402430+230↑p
.text:0041D560                                         ; sub_402430+252↑p ...
.text:0041D560
.text:0041D560 Buffer          = dword ptr  4
.text:0041D560 Stream          = dword ptr  8
.text:0041D560
.text:0041D560                 jmp     ds:__imp_fputs
.text:0041D560 fputs           endp
.text:0041D560
.text:0041D560 ; ---------------------------------------------------------------------------
.text:0041D566                 align 10h
.text:0041D570
.text:0041D570 ; =============== S U B R O U T I N E =======================================
.text:0041D570
.text:0041D570 ; Attributes: thunk
.text:0041D570
.text:0041D570 ; int printf(const char *const Format, ...)
.text:0041D570 printf          proc near               ; CODE XREF: sub_402430+20E↑p
.text:0041D570                                         ; sub_402430+429↑p ...
.text:0041D570
.text:0041D570 Format          = dword ptr  4
.text:0041D570
.text:0041D570                 jmp     ds:__imp_printf
.text:0041D570 printf          endp
.text:0041D570
.text:0041D570 ; ---------------------------------------------------------------------------
.text:0041D576                 align 10h
.text:0041D580
.text:0041D580 ; =============== S U B R O U T I N E =======================================
.text:0041D580
.text:0041D580 ; Attributes: thunk
.text:0041D580
.text:0041D580 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0041D580 fprintf         proc near               ; CODE XREF: sub_402430+13B↑p
.text:0041D580                                         ; sub_402F50+33↑p ...
.text:0041D580
.text:0041D580 Stream          = dword ptr  4
.text:0041D580 Format          = dword ptr  8
.text:0041D580
.text:0041D580                 jmp     ds:__imp_fprintf
.text:0041D580 fprintf         endp
.text:0041D580
.text:0041D580 ; ---------------------------------------------------------------------------
.text:0041D586                 align 10h
.text:0041D590
.text:0041D590 ; =============== S U B R O U T I N E =======================================
.text:0041D590
.text:0041D590 ; Attributes: thunk
.text:0041D590
.text:0041D590 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0041D590 fopen           proc near               ; CODE XREF: sub_4031F0+195↑p
.text:0041D590                                         ; sub_41AB0F+26↑p ...
.text:0041D590
.text:0041D590 FileName        = dword ptr  4
.text:0041D590 Mode            = dword ptr  8
.text:0041D590
.text:0041D590                 jmp     ds:__imp_fopen
.text:0041D590 fopen           endp
.text:0041D590
.text:0041D590 ; ---------------------------------------------------------------------------
.text:0041D596                 align 10h
.text:0041D5A0
.text:0041D5A0 ; =============== S U B R O U T I N E =======================================
.text:0041D5A0
.text:0041D5A0 ; Attributes: thunk
.text:0041D5A0
.text:0041D5A0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0041D5A0 memcpy          proc near               ; CODE XREF: sub_403410+227↑p
.text:0041D5A0                                         ; sub_403410+6E0↑p ...
.text:0041D5A0
.text:0041D5A0 Src             = dword ptr  8
.text:0041D5A0 Size            = dword ptr  0Ch
.text:0041D5A0
.text:0041D5A0                 jmp     ds:__imp_memcpy
.text:0041D5A0 memcpy          endp
.text:0041D5A0
.text:0041D5A0 ; ---------------------------------------------------------------------------
.text:0041D5A6                 align 10h
.text:0041D5B0
.text:0041D5B0 ; =============== S U B R O U T I N E =======================================
.text:0041D5B0
.text:0041D5B0 ; Attributes: thunk
.text:0041D5B0
.text:0041D5B0 ; __time32_t __cdecl mktime(struct tm *const Tm)
.text:0041D5B0 mktime          proc near               ; CODE XREF: sub_403410+188B↑p
.text:0041D5B0                                         ; sub_403410+1BDF↑p ...
.text:0041D5B0
.text:0041D5B0 Tm              = dword ptr  4
.text:0041D5B0
.text:0041D5B0                 jmp     ds:__imp_mktime
.text:0041D5B0 mktime          endp
.text:0041D5B0
.text:0041D5B0 ; ---------------------------------------------------------------------------
.text:0041D5B6                 align 10h
.text:0041D5C0
.text:0041D5C0 ; =============== S U B R O U T I N E =======================================
.text:0041D5C0
.text:0041D5C0 ; Attributes: thunk
.text:0041D5C0
.text:0041D5C0 ; size_t __cdecl strftime(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)
.text:0041D5C0 strftime        proc near               ; CODE XREF: sub_403410+78E↑p
.text:0041D5C0
.text:0041D5C0 Buffer          = dword ptr  4
.text:0041D5C0 SizeInBytes     = dword ptr  8
.text:0041D5C0 Format          = dword ptr  0Ch
.text:0041D5C0 Tm              = dword ptr  10h
.text:0041D5C0
.text:0041D5C0                 jmp     ds:__imp_strftime
.text:0041D5C0 strftime        endp
.text:0041D5C0
.text:0041D5C0 ; ---------------------------------------------------------------------------
.text:0041D5C6                 align 10h
.text:0041D5D0
.text:0041D5D0 ; =============== S U B R O U T I N E =======================================
.text:0041D5D0
.text:0041D5D0 ; Attributes: thunk
.text:0041D5D0
.text:0041D5D0 ; size_t __cdecl strlen(const char *Str)
.text:0041D5D0 strlen          proc near               ; CODE XREF: sub_403410+246↑p
.text:0041D5D0                                         ; sub_403410+253↑p ...
.text:0041D5D0
.text:0041D5D0 Str             = dword ptr  4
.text:0041D5D0
.text:0041D5D0                 jmp     ds:__imp_strlen
.text:0041D5D0 strlen          endp
.text:0041D5D0
.text:0041D5D0 ; ---------------------------------------------------------------------------
.text:0041D5D6                 align 10h
.text:0041D5E0
.text:0041D5E0 ; =============== S U B R O U T I N E =======================================
.text:0041D5E0
.text:0041D5E0 ; Attributes: thunk
.text:0041D5E0
.text:0041D5E0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0041D5E0 memset          proc near               ; CODE XREF: sub_403410+209↑p
.text:0041D5E0                                         ; sub_403410:loc_40398A↑p ...
.text:0041D5E0
.text:0041D5E0 Val             = dword ptr  8
.text:0041D5E0 Size            = dword ptr  0Ch
.text:0041D5E0
.text:0041D5E0                 jmp     ds:__imp_memset
.text:0041D5E0 memset          endp
.text:0041D5E0
.text:0041D5E0 ; ---------------------------------------------------------------------------
.text:0041D5E6                 align 10h
.text:0041D5F0
.text:0041D5F0 ; =============== S U B R O U T I N E =======================================
.text:0041D5F0
.text:0041D5F0 ; Attributes: thunk
.text:0041D5F0
.text:0041D5F0 ; int __cdecl toupper(int C)
.text:0041D5F0 toupper         proc near               ; CODE XREF: sub_403410+6B0↑p
.text:0041D5F0                                         ; sub_403410+8F6↑p ...
.text:0041D5F0
.text:0041D5F0 C               = dword ptr  4
.text:0041D5F0
.text:0041D5F0                 jmp     ds:__imp_toupper
.text:0041D5F0 toupper         endp
.text:0041D5F0
.text:0041D5F0 ; ---------------------------------------------------------------------------
.text:0041D5F6                 align 10h
.text:0041D600
.text:0041D600 ; =============== S U B R O U T I N E =======================================
.text:0041D600
.text:0041D600 ; Attributes: thunk
.text:0041D600
.text:0041D600 ; int __cdecl tolower(int C)
.text:0041D600 tolower         proc near               ; CODE XREF: sub_403410+87F↑p
.text:0041D600                                         ; sub_403410+123D↑p
.text:0041D600
.text:0041D600 C               = dword ptr  4
.text:0041D600
.text:0041D600                 jmp     ds:__imp_tolower
.text:0041D600 tolower         endp
.text:0041D600
.text:0041D600 ; ---------------------------------------------------------------------------
.text:0041D606                 align 10h
.text:0041D610
.text:0041D610 ; =============== S U B R O U T I N E =======================================
.text:0041D610
.text:0041D610 ; Attributes: thunk
.text:0041D610
.text:0041D610 ; int __cdecl isctype(int C, int Type)
.text:0041D610 _isctype        proc near               ; CODE XREF: sub_403410+67A↑p
.text:0041D610                                         ; sub_403410+842↑p ...
.text:0041D610
.text:0041D610 C               = dword ptr  4
.text:0041D610 Type            = dword ptr  8
.text:0041D610
.text:0041D610                 jmp     ds:__imp__isctype
.text:0041D610 _isctype        endp
.text:0041D610
.text:0041D610 ; ---------------------------------------------------------------------------
.text:0041D616                 align 10h
.text:0041D620
.text:0041D620 ; =============== S U B R O U T I N E =======================================
.text:0041D620
.text:0041D620 ; Attributes: thunk
.text:0041D620
.text:0041D620 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0041D620 strncmp         proc near               ; CODE XREF: sub_405590+23F↑p
.text:0041D620                                         ; sub_405590+699↑p ...
.text:0041D620
.text:0041D620 Str1            = dword ptr  4
.text:0041D620 Str2            = dword ptr  8
.text:0041D620 MaxCount        = dword ptr  0Ch
.text:0041D620
.text:0041D620                 jmp     ds:__imp_strncmp
.text:0041D620 strncmp         endp
.text:0041D620
.text:0041D620 ; ---------------------------------------------------------------------------
.text:0041D626                 align 10h
.text:0041D630
.text:0041D630 ; =============== S U B R O U T I N E =======================================
.text:0041D630
.text:0041D630 ; Attributes: thunk
.text:0041D630
.text:0041D630 ; char *__cdecl getenv(const char *VarName)
.text:0041D630 getenv          proc near               ; CODE XREF: sub_405590+B57↑p
.text:0041D630                                         ; sub_407930+13↑p ...
.text:0041D630
.text:0041D630 VarName         = dword ptr  4
.text:0041D630
.text:0041D630                 jmp     ds:__imp_getenv
.text:0041D630 getenv          endp
.text:0041D630
.text:0041D630 ; ---------------------------------------------------------------------------
.text:0041D636                 align 10h
.text:0041D640
.text:0041D640 ; =============== S U B R O U T I N E =======================================
.text:0041D640
.text:0041D640 ; Attributes: thunk
.text:0041D640
.text:0041D640 ; char *__cdecl strchr(const char *Str, int Val)
.text:0041D640 strchr          proc near               ; CODE XREF: sub_405590+469↑p
.text:0041D640                                         ; sub_405590+53A↑p ...
.text:0041D640
.text:0041D640 Str             = dword ptr  4
.text:0041D640 Val             = dword ptr  8
.text:0041D640
.text:0041D640                 jmp     ds:__imp_strchr
.text:0041D640 strchr          endp
.text:0041D640
.text:0041D640 ; ---------------------------------------------------------------------------
.text:0041D646                 align 10h
.text:0041D650
.text:0041D650 ; =============== S U B R O U T I N E =======================================
.text:0041D650
.text:0041D650 ; Attributes: thunk
.text:0041D650
.text:0041D650 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0041D650 _flsbuf         proc near               ; CODE XREF: .text:00406649↑j
.text:0041D650                                         ; sub_406680+1C3↑p ...
.text:0041D650
.text:0041D650 File            = dword ptr  8
.text:0041D650
.text:0041D650                 jmp     ds:__imp__flsbuf
.text:0041D650 _flsbuf         endp
.text:0041D650
.text:0041D650 ; ---------------------------------------------------------------------------
.text:0041D656                 align 10h
.text:0041D660
.text:0041D660 ; =============== S U B R O U T I N E =======================================
.text:0041D660
.text:0041D660 ; Attributes: thunk
.text:0041D660
.text:0041D660 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0041D660 calloc          proc near               ; CODE XREF: .text:00406AB3↑p
.text:0041D660                                         ; sub_4192C0+AC↑p
.text:0041D660
.text:0041D660 Count           = dword ptr  4
.text:0041D660 Size            = dword ptr  8
.text:0041D660
.text:0041D660                 jmp     ds:__imp_calloc
.text:0041D660 calloc          endp
.text:0041D660
.text:0041D660 ; ---------------------------------------------------------------------------
.text:0041D666                 align 10h
.text:0041D670
.text:0041D670 ; =============== S U B R O U T I N E =======================================
.text:0041D670
.text:0041D670 ; Attributes: thunk
.text:0041D670
.text:0041D670 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0041D670 realloc         proc near               ; CODE XREF: .text:004069B0↑p
.text:0041D670                                         ; sub_4069E0+16↑p ...
.text:0041D670
.text:0041D670 Block           = dword ptr  4
.text:0041D670 Size            = dword ptr  8
.text:0041D670
.text:0041D670                 jmp     ds:__imp_realloc
.text:0041D670 realloc         endp
.text:0041D670
.text:0041D670 ; ---------------------------------------------------------------------------
.text:0041D676                 align 10h
.text:0041D680
.text:0041D680 ; =============== S U B R O U T I N E =======================================
.text:0041D680
.text:0041D680 ; Attributes: thunk
.text:0041D680
.text:0041D680 ; void *__cdecl malloc(size_t Size)
.text:0041D680 malloc          proc near               ; CODE XREF: .text:00406934↑p
.text:0041D680                                         ; sub_406950+E↑p ...
.text:0041D680
.text:0041D680 Size            = dword ptr  4
.text:0041D680
.text:0041D680                 jmp     ds:__imp_malloc
.text:0041D680 malloc          endp
.text:0041D680
.text:0041D680 ; ---------------------------------------------------------------------------
.text:0041D686                 align 10h
.text:0041D690
.text:0041D690 ; =============== S U B R O U T I N E =======================================
.text:0041D690
.text:0041D690 ; Attributes: thunk
.text:0041D690
.text:0041D690 ; __time32_t __cdecl time(__time32_t *const Time)
.text:0041D690 time            proc near               ; CODE XREF: sub_406D30+66↑p
.text:0041D690                                         ; sub_4070D0+5D↑p
.text:0041D690
.text:0041D690 Time            = dword ptr  4
.text:0041D690
.text:0041D690                 jmp     ds:__imp_time
.text:0041D690 time            endp
.text:0041D690
.text:0041D690 ; ---------------------------------------------------------------------------
.text:0041D696                 align 10h
.text:0041D6A0
.text:0041D6A0 ; =============== S U B R O U T I N E =======================================
.text:0041D6A0
.text:0041D6A0 ; Attributes: noreturn thunk
.text:0041D6A0
.text:0041D6A0 ; void __cdecl __noreturn abort()
.text:0041D6A0 abort           proc near               ; CODE XREF: sub_4070D0:loc_40715F↑p
.text:0041D6A0                                         ; sub_407460:loc_4074FC↑p ...
.text:0041D6A0                 jmp     ds:__imp_abort
.text:0041D6A0 abort           endp
.text:0041D6A0
.text:0041D6A0 ; ---------------------------------------------------------------------------
.text:0041D6A6                 align 10h
.text:0041D6B0
.text:0041D6B0 ; =============== S U B R O U T I N E =======================================
.text:0041D6B0
.text:0041D6B0 ; Attributes: thunk
.text:0041D6B0
.text:0041D6B0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0041D6B0 vfprintf        proc near               ; CODE XREF: sub_407460+C1↑p
.text:0041D6B0                                         ; sub_40BE20+49↑p ...
.text:0041D6B0
.text:0041D6B0 Stream          = dword ptr  4
.text:0041D6B0 Format          = dword ptr  8
.text:0041D6B0 ArgList         = dword ptr  0Ch
.text:0041D6B0
.text:0041D6B0                 jmp     ds:__imp_vfprintf
.text:0041D6B0 vfprintf        endp
.text:0041D6B0
.text:0041D6B0 ; ---------------------------------------------------------------------------
.text:0041D6B6                 align 10h
.text:0041D6C0
.text:0041D6C0 ; =============== S U B R O U T I N E =======================================
.text:0041D6C0
.text:0041D6C0 ; Attributes: thunk
.text:0041D6C0
.text:0041D6C0 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:0041D6C0 strtol          proc near               ; CODE XREF: sub_407930+43↑p
.text:0041D6C0
.text:0041D6C0 String          = dword ptr  4
.text:0041D6C0 EndPtr          = dword ptr  8
.text:0041D6C0 Radix           = dword ptr  0Ch
.text:0041D6C0
.text:0041D6C0                 jmp     ds:__imp_strtol
.text:0041D6C0 strtol          endp
.text:0041D6C0
.text:0041D6C0 ; ---------------------------------------------------------------------------
.text:0041D6C6                 align 10h
.text:0041D6D0
.text:0041D6D0 ; =============== S U B R O U T I N E =======================================
.text:0041D6D0
.text:0041D6D0 ; Attributes: thunk
.text:0041D6D0
.text:0041D6D0 ; struct tm *__cdecl gmtime(const __time32_t *const Time)
.text:0041D6D0 gmtime          proc near               ; CODE XREF: sub_4097F0+972↑p
.text:0041D6D0                                         ; sub_40A970+12↑p
.text:0041D6D0
.text:0041D6D0 Time            = dword ptr  4
.text:0041D6D0
.text:0041D6D0                 jmp     ds:__imp_gmtime
.text:0041D6D0 gmtime          endp
.text:0041D6D0
.text:0041D6D0 ; ---------------------------------------------------------------------------
.text:0041D6D6                 align 10h
.text:0041D6E0
.text:0041D6E0 ; =============== S U B R O U T I N E =======================================
.text:0041D6E0
.text:0041D6E0 ; Attributes: thunk
.text:0041D6E0
.text:0041D6E0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0041D6E0 sprintf         proc near               ; CODE XREF: sub_4097F0+574↑p
.text:0041D6E0                                         ; .text:0041876A↑p ...
.text:0041D6E0
.text:0041D6E0 Buffer          = dword ptr  4
.text:0041D6E0 Format          = dword ptr  8
.text:0041D6E0
.text:0041D6E0                 jmp     ds:__imp_sprintf
.text:0041D6E0 sprintf         endp
.text:0041D6E0
.text:0041D6E0 ; ---------------------------------------------------------------------------
.text:0041D6E6                 align 10h
.text:0041D6F0
.text:0041D6F0 ; =============== S U B R O U T I N E =======================================
.text:0041D6F0
.text:0041D6F0 ; Attributes: thunk
.text:0041D6F0
.text:0041D6F0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0041D6F0 strcmp          proc near               ; CODE XREF: sub_4097F0+C07↑p
.text:0041D6F0                                         ; sub_40A580+77↑p ...
.text:0041D6F0
.text:0041D6F0 Str1            = dword ptr  4
.text:0041D6F0 Str2            = dword ptr  8
.text:0041D6F0
.text:0041D6F0                 jmp     ds:__imp_strcmp
.text:0041D6F0 strcmp          endp
.text:0041D6F0
.text:0041D6F0 ; ---------------------------------------------------------------------------
.text:0041D6F6                 align 10h
.text:0041D700
.text:0041D700 ; =============== S U B R O U T I N E =======================================
.text:0041D700
.text:0041D700 ; Attributes: thunk
.text:0041D700
.text:0041D700 ; char *__cdecl ctime(const __time32_t *const Time)
.text:0041D700 ctime           proc near               ; CODE XREF: .text:0040A94A↑p
.text:0041D700
.text:0041D700 Time            = dword ptr  4
.text:0041D700
.text:0041D700                 jmp     ds:__imp_ctime
.text:0041D700 ctime           endp
.text:0041D700
.text:0041D700 ; ---------------------------------------------------------------------------
.text:0041D706                 align 10h
.text:0041D710
.text:0041D710 ; =============== S U B R O U T I N E =======================================
.text:0041D710
.text:0041D710 ; Attributes: thunk
.text:0041D710
.text:0041D710 ; char *__cdecl asctime(const struct tm *Tm)
.text:0041D710 asctime         proc near               ; CODE XREF: .text:0040A91A↑p
.text:0041D710
.text:0041D710 Tm              = dword ptr  4
.text:0041D710
.text:0041D710                 jmp     ds:__imp_asctime
.text:0041D710 asctime         endp
.text:0041D710
.text:0041D710 ; ---------------------------------------------------------------------------
.text:0041D716                 align 10h
.text:0041D720
.text:0041D720 ; =============== S U B R O U T I N E =======================================
.text:0041D720
.text:0041D720 ; Attributes: thunk
.text:0041D720
.text:0041D720 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0041D720 strcpy          proc near               ; CODE XREF: .text:0040A930↑p
.text:0041D720                                         ; .text:0040A960↑p ...
.text:0041D720
.text:0041D720 Destination     = dword ptr  4
.text:0041D720 Source          = dword ptr  8
.text:0041D720
.text:0041D720                 jmp     ds:__imp_strcpy
.text:0041D720 strcpy          endp
.text:0041D720
.text:0041D720 ; ---------------------------------------------------------------------------
.text:0041D726                 align 10h
.text:0041D730
.text:0041D730 ; =============== S U B R O U T I N E =======================================
.text:0041D730
.text:0041D730 ; Attributes: thunk
.text:0041D730
.text:0041D730 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0041D730 iswctype        proc near               ; CODE XREF: sub_40AAC0+78B↑p
.text:0041D730
.text:0041D730 C               = word ptr  4
.text:0041D730 Type            = word ptr  8
.text:0041D730
.text:0041D730                 jmp     ds:__imp_iswctype
.text:0041D730 iswctype        endp
.text:0041D730
.text:0041D730 ; ---------------------------------------------------------------------------
.text:0041D736                 align 10h
.text:0041D740
.text:0041D740 ; =============== S U B R O U T I N E =======================================
.text:0041D740
.text:0041D740 ; Attributes: thunk
.text:0041D740
.text:0041D740 ; int __cdecl fflush(FILE *Stream)
.text:0041D740 fflush          proc near               ; CODE XREF: sub_40BE20+19↑p
.text:0041D740                                         ; sub_40BE20+81↑p ...
.text:0041D740
.text:0041D740 Stream          = dword ptr  4
.text:0041D740
.text:0041D740                 jmp     ds:__imp_fflush
.text:0041D740 fflush          endp
.text:0041D740
.text:0041D740 ; ---------------------------------------------------------------------------
.text:0041D746                 align 10h
.text:0041D750
.text:0041D750 ; =============== S U B R O U T I N E =======================================
.text:0041D750
.text:0041D750 ; Attributes: thunk
.text:0041D750
.text:0041D750 ; char *__cdecl strerror(int ErrorMessage)
.text:0041D750 strerror        proc near               ; CODE XREF: sub_40BE20+A5↑p
.text:0041D750                                         ; sub_40BF24+10F↑p
.text:0041D750
.text:0041D750 ErrorMessage    = dword ptr  4
.text:0041D750
.text:0041D750                 jmp     ds:__imp_strerror
.text:0041D750 strerror        endp
.text:0041D750
.text:0041D750 ; ---------------------------------------------------------------------------
.text:0041D756                 align 10h
.text:0041D760
.text:0041D760 ; =============== S U B R O U T I N E =======================================
.text:0041D760
.text:0041D760 ; Attributes: thunk
.text:0041D760
.text:0041D760 ; int __cdecl putenv(const char *EnvString)
.text:0041D760 _putenv         proc near               ; CODE XREF: sub_40C200+2A↑j
.text:0041D760                                         ; sub_40C6C0+C1↑p ...
.text:0041D760
.text:0041D760 EnvString       = dword ptr  4
.text:0041D760
.text:0041D760                 jmp     ds:__imp__putenv
.text:0041D760 _putenv         endp
.text:0041D760
.text:0041D760 ; ---------------------------------------------------------------------------
.text:0041D766                 align 10h
.text:0041D770
.text:0041D770 ; =============== S U B R O U T I N E =======================================
.text:0041D770
.text:0041D770 ; Attributes: thunk
.text:0041D770
.text:0041D770 ; int __cdecl filbuf(FILE *File)
.text:0041D770 _filbuf         proc near               ; CODE XREF: sub_40C250+13B↑p
.text:0041D770
.text:0041D770 File            = dword ptr  4
.text:0041D770
.text:0041D770                 jmp     ds:__imp__filbuf
.text:0041D770 _filbuf         endp
.text:0041D770
.text:0041D770 ; ---------------------------------------------------------------------------
.text:0041D776                 align 10h
.text:0041D780
.text:0041D780 ; =============== S U B R O U T I N E =======================================
.text:0041D780
.text:0041D780 ; Attributes: thunk
.text:0041D780
.text:0041D780 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0041D780 strcat          proc near               ; CODE XREF: sub_40C6C0+AD↑p
.text:0041D780                                         ; sub_40C6C0+B9↑p ...
.text:0041D780
.text:0041D780 Destination     = dword ptr  4
.text:0041D780 Source          = dword ptr  8
.text:0041D780
.text:0041D780                 jmp     ds:__imp_strcat
.text:0041D780 strcat          endp
.text:0041D780
.text:0041D780 ; ---------------------------------------------------------------------------
.text:0041D786                 align 10h
.text:0041D790
.text:0041D790 ; =============== S U B R O U T I N E =======================================
.text:0041D790
.text:0041D790 ; Attributes: thunk
.text:0041D790
.text:0041D790 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0041D790 strrchr         proc near               ; CODE XREF: sub_40CA00+49↑p
.text:0041D790                                         ; .text:0040D33E↑p ...
.text:0041D790
.text:0041D790 Str             = dword ptr  4
.text:0041D790
.text:0041D790                 jmp     ds:__imp_strrchr
.text:0041D790 strrchr         endp
.text:0041D790
.text:0041D790 ; ---------------------------------------------------------------------------
.text:0041D796                 align 10h
.text:0041D7A0
.text:0041D7A0 ; =============== S U B R O U T I N E =======================================
.text:0041D7A0
.text:0041D7A0 ; Attributes: thunk
.text:0041D7A0
.text:0041D7A0 ; int __cdecl isalpha(int C)
.text:0041D7A0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0041D7A0
.text:0041D7A0 C               = dword ptr  4
.text:0041D7A0
.text:0041D7A0                 jmp     ds:__imp_isalpha
.text:0041D7A0 isalpha         endp
.text:0041D7A0
.text:0041D7A0 ; ---------------------------------------------------------------------------
.text:0041D7A6                 align 10h
.text:0041D7B0
.text:0041D7B0 ; =============== S U B R O U T I N E =======================================
.text:0041D7B0
.text:0041D7B0 ; Attributes: thunk
.text:0041D7B0
.text:0041D7B0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0041D7B0 _stricmp_0      proc near               ; CODE XREF: .text:0040D424↑p
.text:0041D7B0
.text:0041D7B0 String1         = dword ptr  4
.text:0041D7B0 String2         = dword ptr  8
.text:0041D7B0
.text:0041D7B0                 jmp     ds:__imp__stricmp_0
.text:0041D7B0 _stricmp_0      endp
.text:0041D7B0
.text:0041D7B0 ; ---------------------------------------------------------------------------
.text:0041D7B6                 align 10h
.text:0041D7C0
.text:0041D7C0 ; =============== S U B R O U T I N E =======================================
.text:0041D7C0
.text:0041D7C0 ; Attributes: thunk
.text:0041D7C0
.text:0041D7C0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0041D7C0 strstr          proc near               ; CODE XREF: sub_40E050+3BF↑p
.text:0041D7C0                                         ; sub_40E050+3DC↑p ...
.text:0041D7C0
.text:0041D7C0 Str             = dword ptr  4
.text:0041D7C0 SubStr          = dword ptr  8
.text:0041D7C0
.text:0041D7C0                 jmp     ds:__imp_strstr
.text:0041D7C0 strstr          endp
.text:0041D7C0
.text:0041D7C0 ; ---------------------------------------------------------------------------
.text:0041D7C6                 align 10h
.text:0041D7D0
.text:0041D7D0 ; =============== S U B R O U T I N E =======================================
.text:0041D7D0
.text:0041D7D0 ; Attributes: thunk
.text:0041D7D0
.text:0041D7D0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0041D7D0 strncpy         proc near               ; CODE XREF: sub_4192C0+BE↑p
.text:0041D7D0                                         ; .text:00419B3A↑p ...
.text:0041D7D0
.text:0041D7D0 Destination     = dword ptr  4
.text:0041D7D0 Source          = dword ptr  8
.text:0041D7D0 Count           = dword ptr  0Ch
.text:0041D7D0
.text:0041D7D0                 jmp     ds:__imp_strncpy
.text:0041D7D0 strncpy         endp
.text:0041D7D0
.text:0041D7D0 ; ---------------------------------------------------------------------------
.text:0041D7D6                 align 10h
.text:0041D7E0
.text:0041D7E0 ; =============== S U B R O U T I N E =======================================
.text:0041D7E0
.text:0041D7E0 ; Attributes: thunk
.text:0041D7E0
.text:0041D7E0 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0041D7E0 sscanf          proc near               ; CODE XREF: .text:0041A20E↑p
.text:0041D7E0
.text:0041D7E0 Buffer          = dword ptr  4
.text:0041D7E0 Format          = dword ptr  8
.text:0041D7E0
.text:0041D7E0                 jmp     ds:__imp_sscanf
.text:0041D7E0 sscanf          endp
.text:0041D7E0
.text:0041D7E0 ; ---------------------------------------------------------------------------
.text:0041D7E6                 align 10h
.text:0041D7F0
.text:0041D7F0 ; =============== S U B R O U T I N E =======================================
.text:0041D7F0
.text:0041D7F0 ; Attributes: thunk
.text:0041D7F0
.text:0041D7F0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0041D7F0 strspn          proc near               ; CODE XREF: .text:0041A05A↑p
.text:0041D7F0                                         ; .text:0041A274↑p ...
.text:0041D7F0
.text:0041D7F0 Str             = dword ptr  4
.text:0041D7F0 Control         = dword ptr  8
.text:0041D7F0
.text:0041D7F0                 jmp     ds:__imp_strspn
.text:0041D7F0 strspn          endp
.text:0041D7F0
.text:0041D7F0 ; ---------------------------------------------------------------------------
.text:0041D7F6                 align 10h
.text:0041D800
.text:0041D800 ; =============== S U B R O U T I N E =======================================
.text:0041D800
.text:0041D800 ; Attributes: thunk
.text:0041D800
.text:0041D800 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0041D800 _get_osfhandle  proc near               ; CODE XREF: sub_41ACC0+3A↑p
.text:0041D800                                         ; sub_41AD80+15↑p
.text:0041D800
.text:0041D800 FileHandle      = dword ptr  4
.text:0041D800
.text:0041D800                 jmp     ds:__imp__get_osfhandle
.text:0041D800 _get_osfhandle  endp
.text:0041D800
.text:0041D800 ; ---------------------------------------------------------------------------
.text:0041D806                 align 10h
.text:0041D810
.text:0041D810 ; =============== S U B R O U T I N E =======================================
.text:0041D810
.text:0041D810 ; Attributes: thunk
.text:0041D810
.text:0041D810 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0041D810 _filelengthi64  proc near               ; CODE XREF: sub_41AD80+1F↑p
.text:0041D810
.text:0041D810 FileHandle      = dword ptr  4
.text:0041D810
.text:0041D810                 jmp     ds:__imp__filelengthi64
.text:0041D810 _filelengthi64  endp
.text:0041D810
.text:0041D810 ; ---------------------------------------------------------------------------
.text:0041D816                 align 10h
.text:0041D820
.text:0041D820 ; =============== S U B R O U T I N E =======================================
.text:0041D820
.text:0041D820 ; Attributes: thunk
.text:0041D820
.text:0041D820 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0041D820 strpbrk         proc near               ; CODE XREF: sub_41ADE0+87↑p
.text:0041D820
.text:0041D820 Str             = dword ptr  4
.text:0041D820 Control         = dword ptr  8
.text:0041D820
.text:0041D820                 jmp     ds:__imp_strpbrk
.text:0041D820 strpbrk         endp
.text:0041D820
.text:0041D820 ; ---------------------------------------------------------------------------
.text:0041D826                 align 10h
.text:0041D830
.text:0041D830 ; =============== S U B R O U T I N E =======================================
.text:0041D830
.text:0041D830 ; Attributes: thunk
.text:0041D830
.text:0041D830 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0041D830 _fdopen         proc near               ; CODE XREF: sub_41AE80+69↑p
.text:0041D830
.text:0041D830 FileHandle      = dword ptr  4
.text:0041D830 Format          = dword ptr  8
.text:0041D830
.text:0041D830                 jmp     ds:__imp__fdopen
.text:0041D830 _fdopen         endp
.text:0041D830
.text:0041D830 ; ---------------------------------------------------------------------------
.text:0041D836                 align 10h
.text:0041D840
.text:0041D840 ; =============== S U B R O U T I N E =======================================
.text:0041D840
.text:0041D840 ; Attributes: thunk
.text:0041D840
.text:0041D840 ; int __cdecl close(int FileHandle)
.text:0041D840 _close          proc near               ; CODE XREF: sub_41AE80+90↑p
.text:0041D840
.text:0041D840 FileHandle      = dword ptr  4
.text:0041D840
.text:0041D840                 jmp     ds:__imp__close
.text:0041D840 _close          endp
.text:0041D840
.text:0041D840 ; ---------------------------------------------------------------------------
.text:0041D846                 align 10h
.text:0041D850
.text:0041D850 ; =============== S U B R O U T I N E =======================================
.text:0041D850
.text:0041D850 ; Attributes: thunk
.text:0041D850
.text:0041D850 ; int open(const char *FileName, int OpenFlag, ...)
.text:0041D850 _open           proc near               ; CODE XREF: sub_41B2D0:loc_41B660↑p
.text:0041D850
.text:0041D850 FileName        = dword ptr  4
.text:0041D850 OpenFlag        = dword ptr  8
.text:0041D850
.text:0041D850                 jmp     ds:__imp__open
.text:0041D850 _open           endp
.text:0041D850
.text:0041D850 ; ---------------------------------------------------------------------------
.text:0041D856                 align 10h
.text:0041D860
.text:0041D860 ; =============== S U B R O U T I N E =======================================
.text:0041D860
.text:0041D860 ; Attributes: noreturn thunk
.text:0041D860
.text:0041D860 _assert         proc near               ; CODE XREF: sub_41B2D0+414↑p
.text:0041D860                 jmp     ds:__imp__assert
.text:0041D860 _assert         endp
.text:0041D860
.text:0041D860 ; ---------------------------------------------------------------------------
.text:0041D866                 align 10h
.text:0041D870
.text:0041D870 ; =============== S U B R O U T I N E =======================================
.text:0041D870
.text:0041D870 ; Attributes: thunk
.text:0041D870
.text:0041D870 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0041D870 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0041D870
.text:0041D870 lpTopLevelExceptionFilter= dword ptr  4
.text:0041D870
.text:0041D870                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0041D870 SetUnhandledExceptionFilter endp
.text:0041D870
.text:0041D870 ; ---------------------------------------------------------------------------
.text:0041D876                 align 10h
.text:0041D880
.text:0041D880 ; =============== S U B R O U T I N E =======================================
.text:0041D880
.text:0041D880 ; Attributes: noreturn thunk
.text:0041D880
.text:0041D880 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0041D880 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0041D880
.text:0041D880 uExitCode       = dword ptr  4
.text:0041D880
.text:0041D880                 jmp     ds:__imp_ExitProcess
.text:0041D880 ExitProcess     endp
.text:0041D880
.text:0041D880 ; ---------------------------------------------------------------------------
.text:0041D886                 align 10h
.text:0041D890
.text:0041D890 ; =============== S U B R O U T I N E =======================================
.text:0041D890
.text:0041D890 ; Attributes: thunk
.text:0041D890
.text:0041D890 ; BOOL __stdcall AreFileApisANSI()
.text:0041D890 AreFileApisANSI proc near               ; CODE XREF: sub_40C880+89↑p
.text:0041D890                 jmp     ds:__imp_AreFileApisANSI
.text:0041D890 AreFileApisANSI endp
.text:0041D890
.text:0041D890 ; ---------------------------------------------------------------------------
.text:0041D896                 align 10h
.text:0041D8A0
.text:0041D8A0 ; =============== S U B R O U T I N E =======================================
.text:0041D8A0
.text:0041D8A0 ; Attributes: thunk
.text:0041D8A0
.text:0041D8A0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0041D8A0 MultiByteToWideChar proc near           ; CODE XREF: sub_40C880+BD↑p
.text:0041D8A0
.text:0041D8A0 CodePage        = dword ptr  4
.text:0041D8A0 dwFlags         = dword ptr  8
.text:0041D8A0 lpMultiByteStr  = dword ptr  0Ch
.text:0041D8A0 cbMultiByte     = dword ptr  10h
.text:0041D8A0 lpWideCharStr   = dword ptr  14h
.text:0041D8A0 cchWideChar     = dword ptr  18h
.text:0041D8A0
.text:0041D8A0                 jmp     ds:__imp_MultiByteToWideChar
.text:0041D8A0 MultiByteToWideChar endp
.text:0041D8A0
.text:0041D8A0 ; ---------------------------------------------------------------------------
.text:0041D8A6                 align 10h
.text:0041D8B0
.text:0041D8B0 ; =============== S U B R O U T I N E =======================================
.text:0041D8B0
.text:0041D8B0 ; Attributes: thunk
.text:0041D8B0
.text:0041D8B0 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0041D8B0 lstrcpyA        proc near               ; CODE XREF: sub_40C880+128↑p
.text:0041D8B0
.text:0041D8B0 lpString1       = dword ptr  4
.text:0041D8B0 lpString2       = dword ptr  8
.text:0041D8B0
.text:0041D8B0                 jmp     ds:__imp_lstrcpyA
.text:0041D8B0 lstrcpyA        endp
.text:0041D8B0
.text:0041D8B0 ; ---------------------------------------------------------------------------
.text:0041D8B6                 align 10h
.text:0041D8C0
.text:0041D8C0 ; =============== S U B R O U T I N E =======================================
.text:0041D8C0
.text:0041D8C0 ; Attributes: thunk
.text:0041D8C0
.text:0041D8C0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0041D8C0 SetErrorMode    proc near               ; CODE XREF: sub_40CA00+80↑p
.text:0041D8C0                                         ; sub_40CA00+A9↑p ...
.text:0041D8C0
.text:0041D8C0 uMode           = dword ptr  4
.text:0041D8C0
.text:0041D8C0                 jmp     ds:__imp_SetErrorMode
.text:0041D8C0 SetErrorMode    endp
.text:0041D8C0
.text:0041D8C0 ; ---------------------------------------------------------------------------
.text:0041D8C6                 align 10h
.text:0041D8D0
.text:0041D8D0 ; =============== S U B R O U T I N E =======================================
.text:0041D8D0
.text:0041D8D0 ; Attributes: thunk
.text:0041D8D0
.text:0041D8D0 ; BOOL __stdcall FileTimeToSystemTime(const FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime)
.text:0041D8D0 FileTimeToSystemTime proc near          ; CODE XREF: sub_40CB30+6D↑p
.text:0041D8D0
.text:0041D8D0 lpFileTime      = dword ptr  4
.text:0041D8D0 lpSystemTime    = dword ptr  8
.text:0041D8D0
.text:0041D8D0                 jmp     ds:__imp_FileTimeToSystemTime
.text:0041D8D0 FileTimeToSystemTime endp
.text:0041D8D0
.text:0041D8D0 ; ---------------------------------------------------------------------------
.text:0041D8D6                 align 10h
.text:0041D8E0
.text:0041D8E0 ; =============== S U B R O U T I N E =======================================
.text:0041D8E0
.text:0041D8E0 ; Attributes: thunk
.text:0041D8E0
.text:0041D8E0 ; BOOL __stdcall SetSystemTime(const SYSTEMTIME *lpSystemTime)
.text:0041D8E0 SetSystemTime   proc near               ; CODE XREF: sub_40CB30+78↑p
.text:0041D8E0
.text:0041D8E0 lpSystemTime    = dword ptr  4
.text:0041D8E0
.text:0041D8E0                 jmp     ds:__imp_SetSystemTime
.text:0041D8E0 SetSystemTime   endp
.text:0041D8E0
.text:0041D8E0 ; ---------------------------------------------------------------------------
.text:0041D8E6                 align 10h
.text:0041D8F0
.text:0041D8F0 ; =============== S U B R O U T I N E =======================================
.text:0041D8F0
.text:0041D8F0 ; Attributes: thunk
.text:0041D8F0
.text:0041D8F0 ; BOOL __stdcall QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency)
.text:0041D8F0 QueryPerformanceFrequency proc near     ; CODE XREF: sub_40CBE0+27↑p
.text:0041D8F0
.text:0041D8F0 lpFrequency     = dword ptr  4
.text:0041D8F0
.text:0041D8F0                 jmp     ds:__imp_QueryPerformanceFrequency
.text:0041D8F0 QueryPerformanceFrequency endp
.text:0041D8F0
.text:0041D8F0 ; ---------------------------------------------------------------------------
.text:0041D8F6                 align 10h
.text:0041D900
.text:0041D900 ; =============== S U B R O U T I N E =======================================
.text:0041D900
.text:0041D900 ; Attributes: thunk
.text:0041D900
.text:0041D900 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0041D900 GetTimeZoneInformation proc near        ; CODE XREF: sub_40CC40+22↑p
.text:0041D900
.text:0041D900 lpTimeZoneInformation= dword ptr  4
.text:0041D900
.text:0041D900                 jmp     ds:__imp_GetTimeZoneInformation
.text:0041D900 GetTimeZoneInformation endp
.text:0041D900
.text:0041D900 ; ---------------------------------------------------------------------------
.text:0041D906                 align 10h
.text:0041D910
.text:0041D910 ; =============== S U B R O U T I N E =======================================
.text:0041D910
.text:0041D910 ; Attributes: thunk
.text:0041D910
.text:0041D910 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0041D910 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40CC40+4F↑p
.text:0041D910
.text:0041D910 lpSystemTimeAsFileTime= dword ptr  4
.text:0041D910
.text:0041D910                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0041D910 GetSystemTimeAsFileTime endp
.text:0041D910
.text:0041D910 ; ---------------------------------------------------------------------------
.text:0041D916                 align 10h
.text:0041D920
.text:0041D920 ; =============== S U B R O U T I N E =======================================
.text:0041D920
.text:0041D920 ; Attributes: thunk
.text:0041D920
.text:0041D920 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0041D920 FindFirstFileA  proc near               ; CODE XREF: _win32_longpath+CA↑p
.text:0041D920                                         ; sub_40D890+CE↑p ...
.text:0041D920
.text:0041D920 lpFileName      = dword ptr  4
.text:0041D920 lpFindFileData  = dword ptr  8
.text:0041D920
.text:0041D920                 jmp     ds:__imp_FindFirstFileA
.text:0041D920 FindFirstFileA  endp
.text:0041D920
.text:0041D920 ; ---------------------------------------------------------------------------
.text:0041D926                 align 10h
.text:0041D930
.text:0041D930 ; =============== S U B R O U T I N E =======================================
.text:0041D930
.text:0041D930 ; Attributes: thunk
.text:0041D930
.text:0041D930 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0041D930 FindClose       proc near               ; CODE XREF: _win32_longpath+144↑p
.text:0041D930                                         ; _win32_longpath+185↑p ...
.text:0041D930
.text:0041D930 hFindFile       = dword ptr  4
.text:0041D930
.text:0041D930                 jmp     ds:__imp_FindClose
.text:0041D930 FindClose       endp
.text:0041D930
.text:0041D930 ; ---------------------------------------------------------------------------
.text:0041D936                 align 10h
.text:0041D940
.text:0041D940 ; =============== S U B R O U T I N E =======================================
.text:0041D940
.text:0041D940 ; Attributes: thunk
.text:0041D940
.text:0041D940 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0041D940 GetModuleFileNameA proc near            ; CODE XREF: sub_40D2A0+1C↑p
.text:0041D940
.text:0041D940 hModule         = dword ptr  4
.text:0041D940 lpFilename      = dword ptr  8
.text:0041D940 nSize           = dword ptr  0Ch
.text:0041D940
.text:0041D940                 jmp     ds:__imp_GetModuleFileNameA
.text:0041D940 GetModuleFileNameA endp
.text:0041D940
.text:0041D940 ; ---------------------------------------------------------------------------
.text:0041D946                 align 10h
.text:0041D950
.text:0041D950 ; =============== S U B R O U T I N E =======================================
.text:0041D950
.text:0041D950 ; Attributes: thunk
.text:0041D950
.text:0041D950 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0041D950 GetModuleHandleA proc near              ; CODE XREF: .text:0040D48E↑p
.text:0041D950                                         ; sub_40D890+18↑p ...
.text:0041D950
.text:0041D950 lpModuleName    = dword ptr  4
.text:0041D950
.text:0041D950                 jmp     ds:__imp_GetModuleHandleA
.text:0041D950 GetModuleHandleA endp
.text:0041D950
.text:0041D950 ; ---------------------------------------------------------------------------
.text:0041D956                 align 10h
.text:0041D960
.text:0041D960 ; =============== S U B R O U T I N E =======================================
.text:0041D960
.text:0041D960 ; Attributes: thunk
.text:0041D960
.text:0041D960 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0041D960 GetProcAddress  proc near               ; CODE XREF: .text:0040D4A1↑p
.text:0041D960                                         ; sub_40D890+33↑p ...
.text:0041D960
.text:0041D960 hModule         = dword ptr  4
.text:0041D960 lpProcName      = dword ptr  8
.text:0041D960
.text:0041D960                 jmp     ds:__imp_GetProcAddress
.text:0041D960 GetProcAddress  endp
.text:0041D960
.text:0041D960 ; ---------------------------------------------------------------------------
.text:0041D966                 align 10h
.text:0041D970
.text:0041D970 ; =============== S U B R O U T I N E =======================================
.text:0041D970
.text:0041D970 ; Attributes: thunk
.text:0041D970
.text:0041D970 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0041D970 GetShortPathNameA proc near             ; CODE XREF: .text:0040D526↑p
.text:0041D970                                         ; .text:0040D550↑p
.text:0041D970
.text:0041D970 lpszLongPath    = dword ptr  4
.text:0041D970 lpszShortPath   = dword ptr  8
.text:0041D970 cchBuffer       = dword ptr  0Ch
.text:0041D970
.text:0041D970                 jmp     ds:__imp_GetShortPathNameA
.text:0041D970 GetShortPathNameA endp
.text:0041D970
.text:0041D970 ; ---------------------------------------------------------------------------
.text:0041D976                 align 10h
.text:0041D980
.text:0041D980 ; =============== S U B R O U T I N E =======================================
.text:0041D980
.text:0041D980 ; Attributes: thunk
.text:0041D980
.text:0041D980 ; DWORD __stdcall GetLastError()
.text:0041D980 GetLastError    proc near               ; CODE XREF: sub_40D830+3↑p
.text:0041D980                                         ; sub_40E050:loc_40E2D9↑p ...
.text:0041D980                 jmp     ds:__imp_GetLastError
.text:0041D980 GetLastError    endp
.text:0041D980
.text:0041D980 ; ---------------------------------------------------------------------------
.text:0041D986                 align 10h
.text:0041D990
.text:0041D990 ; =============== S U B R O U T I N E =======================================
.text:0041D990
.text:0041D990 ; Attributes: thunk
.text:0041D990
.text:0041D990 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0041D990 GetFileAttributesA proc near            ; CODE XREF: sub_40D890+47↑p
.text:0041D990                                         ; sub_4191E0+62↑p
.text:0041D990
.text:0041D990 lpFileName      = dword ptr  4
.text:0041D990
.text:0041D990                 jmp     ds:__imp_GetFileAttributesA
.text:0041D990 GetFileAttributesA endp
.text:0041D990
.text:0041D990 ; ---------------------------------------------------------------------------
.text:0041D996                 align 10h
.text:0041D9A0
.text:0041D9A0 ; =============== S U B R O U T I N E =======================================
.text:0041D9A0
.text:0041D9A0 ; Attributes: thunk
.text:0041D9A0
.text:0041D9A0 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0041D9A0 FreeLibrary     proc near               ; CODE XREF: sub_40D890+A4↑p
.text:0041D9A0                                         ; sub_40DA00+11D↑p ...
.text:0041D9A0
.text:0041D9A0 hLibModule      = dword ptr  4
.text:0041D9A0
.text:0041D9A0                 jmp     ds:__imp_FreeLibrary
.text:0041D9A0 FreeLibrary     endp
.text:0041D9A0
.text:0041D9A0 ; ---------------------------------------------------------------------------
.text:0041D9A6                 align 10h
.text:0041D9B0
.text:0041D9B0 ; =============== S U B R O U T I N E =======================================
.text:0041D9B0
.text:0041D9B0 ; Attributes: thunk
.text:0041D9B0
.text:0041D9B0 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0041D9B0 LoadLibraryA    proc near               ; CODE XREF: sub_40DA00+13↑p
.text:0041D9B0                                         ; sub_40E050+134↑p ...
.text:0041D9B0
.text:0041D9B0 lpLibFileName   = dword ptr  4
.text:0041D9B0
.text:0041D9B0                 jmp     ds:__imp_LoadLibraryA
.text:0041D9B0 LoadLibraryA    endp
.text:0041D9B0
.text:0041D9B0 ; ---------------------------------------------------------------------------
.text:0041D9B6                 align 10h
.text:0041D9C0
.text:0041D9C0 ; =============== S U B R O U T I N E =======================================
.text:0041D9C0
.text:0041D9C0 ; Attributes: thunk
.text:0041D9C0
.text:0041D9C0 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0041D9C0 FindNextFileA   proc near               ; CODE XREF: sub_40DA00+FF↑p
.text:0041D9C0
.text:0041D9C0 hFindFile       = dword ptr  4
.text:0041D9C0 lpFindFileData  = dword ptr  8
.text:0041D9C0
.text:0041D9C0                 jmp     ds:__imp_FindNextFileA
.text:0041D9C0 FindNextFileA   endp
.text:0041D9C0
.text:0041D9C0 ; ---------------------------------------------------------------------------
.text:0041D9C6                 align 10h
.text:0041D9D0
.text:0041D9D0 ; =============== S U B R O U T I N E =======================================
.text:0041D9D0
.text:0041D9D0 ; Attributes: thunk
.text:0041D9D0
.text:0041D9D0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0041D9D0 GetFileType     proc near               ; CODE XREF: sub_40DB80+43↑p
.text:0041D9D0                                         ; .text:0040E83A↑p
.text:0041D9D0
.text:0041D9D0 hFile           = dword ptr  4
.text:0041D9D0
.text:0041D9D0                 jmp     ds:__imp_GetFileType
.text:0041D9D0 GetFileType     endp
.text:0041D9D0
.text:0041D9D0 ; ---------------------------------------------------------------------------
.text:0041D9D6                 align 10h
.text:0041D9E0
.text:0041D9E0 ; =============== S U B R O U T I N E =======================================
.text:0041D9E0
.text:0041D9E0 ; Attributes: thunk
.text:0041D9E0
.text:0041D9E0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0041D9E0 GetFileInformationByHandle proc near    ; CODE XREF: sub_40DB80+69↑p
.text:0041D9E0
.text:0041D9E0 hFile           = dword ptr  4
.text:0041D9E0 lpFileInformation= dword ptr  8
.text:0041D9E0
.text:0041D9E0                 jmp     ds:__imp_GetFileInformationByHandle
.text:0041D9E0 GetFileInformationByHandle endp
.text:0041D9E0
.text:0041D9E0 ; ---------------------------------------------------------------------------
.text:0041D9E6                 align 10h
.text:0041D9F0
.text:0041D9F0 ; =============== S U B R O U T I N E =======================================
.text:0041D9F0
.text:0041D9F0 ; Attributes: thunk
.text:0041D9F0
.text:0041D9F0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0041D9F0 GetFileSize     proc near               ; CODE XREF: sub_40DB80+3F2↑p
.text:0041D9F0
.text:0041D9F0 hFile           = dword ptr  4
.text:0041D9F0 lpFileSizeHigh  = dword ptr  8
.text:0041D9F0
.text:0041D9F0                 jmp     ds:__imp_GetFileSize
.text:0041D9F0 GetFileSize     endp
.text:0041D9F0
.text:0041D9F0 ; ---------------------------------------------------------------------------
.text:0041D9F6                 align 10h
.text:0041DA00
.text:0041DA00 ; =============== S U B R O U T I N E =======================================
.text:0041DA00
.text:0041DA00 ; Attributes: thunk
.text:0041DA00
.text:0041DA00 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0041DA00 PeekNamedPipe   proc near               ; CODE XREF: sub_40DB80+439↑p
.text:0041DA00
.text:0041DA00 hNamedPipe      = dword ptr  4
.text:0041DA00 lpBuffer        = dword ptr  8
.text:0041DA00 nBufferSize     = dword ptr  0Ch
.text:0041DA00 lpBytesRead     = dword ptr  10h
.text:0041DA00 lpTotalBytesAvail= dword ptr  14h
.text:0041DA00 lpBytesLeftThisMessage= dword ptr  18h
.text:0041DA00
.text:0041DA00                 jmp     ds:__imp_PeekNamedPipe
.text:0041DA00 PeekNamedPipe   endp
.text:0041DA00
.text:0041DA00 ; ---------------------------------------------------------------------------
.text:0041DA06                 align 10h
.text:0041DA10
.text:0041DA10 ; =============== S U B R O U T I N E =======================================
.text:0041DA10
.text:0041DA10 ; Attributes: thunk
.text:0041DA10
.text:0041DA10 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0041DA10 GetDriveTypeA   proc near               ; CODE XREF: sub_40E050+4C↑p
.text:0041DA10
.text:0041DA10 lpRootPathName  = dword ptr  4
.text:0041DA10
.text:0041DA10                 jmp     ds:__imp_GetDriveTypeA
.text:0041DA10 GetDriveTypeA   endp
.text:0041DA10
.text:0041DA10 ; ---------------------------------------------------------------------------
.text:0041DA16                 align 10h
.text:0041DA20
.text:0041DA20 ; =============== S U B R O U T I N E =======================================
.text:0041DA20
.text:0041DA20 ; Attributes: thunk
.text:0041DA20
.text:0041DA20 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0041DA20 GetVolumeInformationA proc near         ; CODE XREF: sub_40E550+64↑p
.text:0041DA20                                         ; .text:0040EAFC↑p ...
.text:0041DA20
.text:0041DA20 lpRootPathName  = dword ptr  4
.text:0041DA20 lpVolumeNameBuffer= dword ptr  8
.text:0041DA20 nVolumeNameSize = dword ptr  0Ch
.text:0041DA20 lpVolumeSerialNumber= dword ptr  10h
.text:0041DA20 lpMaximumComponentLength= dword ptr  14h
.text:0041DA20 lpFileSystemFlags= dword ptr  18h
.text:0041DA20 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0041DA20 nFileSystemNameSize= dword ptr  20h
.text:0041DA20
.text:0041DA20                 jmp     ds:__imp_GetVolumeInformationA
.text:0041DA20 GetVolumeInformationA endp
.text:0041DA20
.text:0041DA20 ; ---------------------------------------------------------------------------
.text:0041DA26                 align 10h
.text:0041DA30
.text:0041DA30 ; =============== S U B R O U T I N E =======================================
.text:0041DA30
.text:0041DA30 ; Attributes: thunk
.text:0041DA30
.text:0041DA30 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0041DA30 CreateFileA     proc near               ; CODE XREF: sub_40CAE0+2806↑p
.text:0041DA30                                         ; .text:004198B3↑p ...
.text:0041DA30
.text:0041DA30 lpFileName      = dword ptr  4
.text:0041DA30 dwDesiredAccess = dword ptr  8
.text:0041DA30 dwShareMode     = dword ptr  0Ch
.text:0041DA30 lpSecurityAttributes= dword ptr  10h
.text:0041DA30 dwCreationDisposition= dword ptr  14h
.text:0041DA30 dwFlagsAndAttributes= dword ptr  18h
.text:0041DA30 hTemplateFile   = dword ptr  1Ch
.text:0041DA30
.text:0041DA30                 jmp     ds:__imp_CreateFileA
.text:0041DA30 CreateFileA     endp
.text:0041DA30
.text:0041DA30 ; ---------------------------------------------------------------------------
.text:0041DA36                 align 10h
.text:0041DA40
.text:0041DA40 ; =============== S U B R O U T I N E =======================================
.text:0041DA40
.text:0041DA40 ; Attributes: thunk
.text:0041DA40
.text:0041DA40 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0041DA40 CloseHandle     proc near               ; CODE XREF: sub_40CAE0+2821↑p
.text:0041DA40                                         ; .text:00419929↑p ...
.text:0041DA40
.text:0041DA40 hObject         = dword ptr  4
.text:0041DA40
.text:0041DA40                 jmp     ds:__imp_CloseHandle
.text:0041DA40 CloseHandle     endp
.text:0041DA40
.text:0041DA40 ; ---------------------------------------------------------------------------
.text:0041DA46                 align 10h
.text:0041DA50
.text:0041DA50 ; =============== S U B R O U T I N E =======================================
.text:0041DA50
.text:0041DA50 ; Attributes: thunk
.text:0041DA50
.text:0041DA50 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0041DA50 lstrcmpiA       proc near               ; CODE XREF: .text:004189FB↑p
.text:0041DA50                                         ; .text:00418A12↑p ...
.text:0041DA50
.text:0041DA50 lpString1       = dword ptr  4
.text:0041DA50 lpString2       = dword ptr  8
.text:0041DA50
.text:0041DA50                 jmp     ds:__imp_lstrcmpiA
.text:0041DA50 lstrcmpiA       endp
.text:0041DA50
.text:0041DA50 ; ---------------------------------------------------------------------------
.text:0041DA56                 align 10h
.text:0041DA60
.text:0041DA60 ; =============== S U B R O U T I N E =======================================
.text:0041DA60
.text:0041DA60 ; Attributes: thunk
.text:0041DA60
.text:0041DA60 ; DWORD __stdcall GetVersion()
.text:0041DA60 GetVersion      proc near               ; CODE XREF: .text:00418D83↑p
.text:0041DA60                 jmp     ds:__imp_GetVersion
.text:0041DA60 GetVersion      endp
.text:0041DA60
.text:0041DA60 ; ---------------------------------------------------------------------------
.text:0041DA66                 align 10h
.text:0041DA70
.text:0041DA70 ; =============== S U B R O U T I N E =======================================
.text:0041DA70
.text:0041DA70 ; Attributes: thunk
.text:0041DA70
.text:0041DA70 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0041DA70 GetVersionExA   proc near               ; CODE XREF: sub_418E10+32↑p
.text:0041DA70                                         ; sub_418E10+20B↑p
.text:0041DA70
.text:0041DA70 lpVersionInformation= dword ptr  4
.text:0041DA70
.text:0041DA70                 jmp     ds:__imp_GetVersionExA
.text:0041DA70 GetVersionExA   endp
.text:0041DA70
.text:0041DA70 ; ---------------------------------------------------------------------------
.text:0041DA76                 align 10h
.text:0041DA80
.text:0041DA80 ; =============== S U B R O U T I N E =======================================
.text:0041DA80
.text:0041DA80 ; Attributes: thunk
.text:0041DA80
.text:0041DA80 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0041DA80 GetFullPathNameA proc near              ; CODE XREF: sub_4190B0+45↑p
.text:0041DA80                                         ; sub_4190B0+ED↑p
.text:0041DA80
.text:0041DA80 lpFileName      = dword ptr  4
.text:0041DA80 nBufferLength   = dword ptr  8
.text:0041DA80 lpBuffer        = dword ptr  0Ch
.text:0041DA80 lpFilePart      = dword ptr  10h
.text:0041DA80
.text:0041DA80                 jmp     ds:__imp_GetFullPathNameA
.text:0041DA80 GetFullPathNameA endp
.text:0041DA80
.text:0041DA80 ; ---------------------------------------------------------------------------
.text:0041DA86                 align 10h
.text:0041DA90
.text:0041DA90 ; =============== S U B R O U T I N E =======================================
.text:0041DA90
.text:0041DA90 ; Attributes: thunk
.text:0041DA90
.text:0041DA90 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0041DA90 GetCurrentDirectoryA proc near          ; CODE XREF: .text:00419568↑p
.text:0041DA90                                         ; .text:00419584↑p ...
.text:0041DA90
.text:0041DA90 nBufferLength   = dword ptr  4
.text:0041DA90 lpBuffer        = dword ptr  8
.text:0041DA90
.text:0041DA90                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0041DA90 GetCurrentDirectoryA endp
.text:0041DA90
.text:0041DA90 ; ---------------------------------------------------------------------------
.text:0041DA96                 align 10h
.text:0041DAA0
.text:0041DAA0 ; =============== S U B R O U T I N E =======================================
.text:0041DAA0
.text:0041DAA0 ; Attributes: thunk
.text:0041DAA0
.text:0041DAA0 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0041DAA0 DeviceIoControl proc near               ; CODE XREF: .text:0041991C↑p
.text:0041DAA0                                         ; sub_419CE0+1E5↑p
.text:0041DAA0
.text:0041DAA0 hDevice         = dword ptr  4
.text:0041DAA0 dwIoControlCode = dword ptr  8
.text:0041DAA0 lpInBuffer      = dword ptr  0Ch
.text:0041DAA0 nInBufferSize   = dword ptr  10h
.text:0041DAA0 lpOutBuffer     = dword ptr  14h
.text:0041DAA0 nOutBufferSize  = dword ptr  18h
.text:0041DAA0 lpBytesReturned = dword ptr  1Ch
.text:0041DAA0 lpOverlapped    = dword ptr  20h
.text:0041DAA0
.text:0041DAA0                 jmp     ds:__imp_DeviceIoControl
.text:0041DAA0 DeviceIoControl endp
.text:0041DAA0
.text:0041DAA0 ; ---------------------------------------------------------------------------
.text:0041DAA6                 align 10h
.text:0041DAB0
.text:0041DAB0 ; =============== S U B R O U T I N E =======================================
.text:0041DAB0
.text:0041DAB0 ; Attributes: thunk
.text:0041DAB0
.text:0041DAB0 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0041DAB0 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00419C73↑p
.text:0041DAB0                                         ; sub_419CE0+7B↑p ...
.text:0041DAB0
.text:0041DAB0 lpRootPathName  = dword ptr  4
.text:0041DAB0 lpSectorsPerCluster= dword ptr  8
.text:0041DAB0 lpBytesPerSector= dword ptr  0Ch
.text:0041DAB0 lpNumberOfFreeClusters= dword ptr  10h
.text:0041DAB0 lpTotalNumberOfClusters= dword ptr  14h
.text:0041DAB0
.text:0041DAB0                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0041DAB0 GetDiskFreeSpaceA endp
.text:0041DAB0
.text:0041DAB0 ; ---------------------------------------------------------------------------
.text:0041DAB6                 align 10h
.text:0041DAC0
.text:0041DAC0 ; =============== S U B R O U T I N E =======================================
.text:0041DAC0
.text:0041DAC0 ; Attributes: thunk
.text:0041DAC0
.text:0041DAC0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0041DAC0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0041A3CF↑p
.text:0041DAC0                                         ; .text:0041A3FE↑p ...
.text:0041DAC0
.text:0041DAC0 nBufferLength   = dword ptr  4
.text:0041DAC0 lpBuffer        = dword ptr  8
.text:0041DAC0
.text:0041DAC0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0041DAC0 GetLogicalDriveStringsA endp
.text:0041DAC0
.text:0041DAC0 ; ---------------------------------------------------------------------------
.text:0041DAC6                 align 10h
.text:0041DAD0
.text:0041DAD0 ; =============== S U B R O U T I N E =======================================
.text:0041DAD0
.text:0041DAD0 ; Attributes: thunk
.text:0041DAD0
.text:0041DAD0 ; HANDLE __stdcall GetProcessHeap()
.text:0041DAD0 GetProcessHeap  proc near               ; CODE XREF: .text:0041A3D9↑p
.text:0041DAD0                                         ; sub_41AAB0+24↑p ...
.text:0041DAD0                 jmp     ds:__imp_GetProcessHeap
.text:0041DAD0 GetProcessHeap  endp
.text:0041DAD0
.text:0041DAD0 ; ---------------------------------------------------------------------------
.text:0041DAD6                 align 10h
.text:0041DAE0
.text:0041DAE0 ; =============== S U B R O U T I N E =======================================
.text:0041DAE0
.text:0041DAE0 ; Attributes: thunk
.text:0041DAE0
.text:0041DAE0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0041DAE0 HeapAlloc       proc near               ; CODE XREF: .text:0041A3ED↑p
.text:0041DAE0                                         ; sub_41AAB0+38↑p ...
.text:0041DAE0
.text:0041DAE0 hHeap           = dword ptr  4
.text:0041DAE0 dwFlags         = dword ptr  8
.text:0041DAE0 dwBytes         = dword ptr  0Ch
.text:0041DAE0
.text:0041DAE0                 jmp     ds:__imp_HeapAlloc
.text:0041DAE0 HeapAlloc       endp
.text:0041DAE0
.text:0041DAE0 ; ---------------------------------------------------------------------------
.text:0041DAE6                 align 10h
.text:0041DAF0
.text:0041DAF0 ; =============== S U B R O U T I N E =======================================
.text:0041DAF0
.text:0041DAF0 ; Attributes: thunk
.text:0041DAF0
.text:0041DAF0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0041DAF0 HeapFree        proc near               ; CODE XREF: .text:0041ABED↑p
.text:0041DAF0
.text:0041DAF0 hHeap           = dword ptr  4
.text:0041DAF0 dwFlags         = dword ptr  8
.text:0041DAF0 lpMem           = dword ptr  0Ch
.text:0041DAF0
.text:0041DAF0                 jmp     ds:__imp_HeapFree
.text:0041DAF0 HeapFree        endp
.text:0041DAF0
.text:0041DAF0 ; ---------------------------------------------------------------------------
.text:0041DAF6                 align 10h
.text:0041DB00
.text:0041DB00 ; =============== S U B R O U T I N E =======================================
.text:0041DB00
.text:0041DB00 ; Attributes: thunk
.text:0041DB00
.text:0041DB00 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0041DB00 UnlockFile      proc near               ; CODE XREF: sub_41AD80+40↑p
.text:0041DB00
.text:0041DB00 hFile           = dword ptr  4
.text:0041DB00 dwFileOffsetLow = dword ptr  8
.text:0041DB00 dwFileOffsetHigh= dword ptr  0Ch
.text:0041DB00 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0041DB00 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0041DB00
.text:0041DB00                 jmp     ds:__imp_UnlockFile
.text:0041DB00 UnlockFile      endp
.text:0041DB00
.text:0041DB00 ; ---------------------------------------------------------------------------
.text:0041DB06                 align 10h
.text:0041DB10
.text:0041DB10 ; =============== S U B R O U T I N E =======================================
.text:0041DB10
.text:0041DB10 ; Attributes: thunk
.text:0041DB10
.text:0041DB10 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0041DB10 CreateDirectoryA proc near              ; CODE XREF: sub_41B700+22↑p
.text:0041DB10
.text:0041DB10 lpPathName      = dword ptr  4
.text:0041DB10 lpSecurityAttributes= dword ptr  8
.text:0041DB10
.text:0041DB10                 jmp     ds:__imp_CreateDirectoryA
.text:0041DB10 CreateDirectoryA endp
.text:0041DB10
.text:0041DB10 ; ---------------------------------------------------------------------------
.text:0041DB16                 align 10h
.text:0041DB20
.text:0041DB20 ; =============== S U B R O U T I N E =======================================
.text:0041DB20
.text:0041DB20 ; Attributes: thunk
.text:0041DB20
.text:0041DB20 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0041DB20 RegOpenKeyExA   proc near               ; CODE XREF: .text:00418981↑p
.text:0041DB20
.text:0041DB20 hKey            = dword ptr  4
.text:0041DB20 lpSubKey        = dword ptr  8
.text:0041DB20 ulOptions       = dword ptr  0Ch
.text:0041DB20 samDesired      = dword ptr  10h
.text:0041DB20 phkResult       = dword ptr  14h
.text:0041DB20
.text:0041DB20                 jmp     ds:__imp_RegOpenKeyExA
.text:0041DB20 RegOpenKeyExA   endp
.text:0041DB20
.text:0041DB20 ; ---------------------------------------------------------------------------
.text:0041DB26                 align 10h
.text:0041DB30
.text:0041DB30 ; =============== S U B R O U T I N E =======================================
.text:0041DB30
.text:0041DB30 ; Attributes: thunk
.text:0041DB30
.text:0041DB30 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0041DB30 RegQueryValueExA proc near              ; CODE XREF: .text:004189C4↑p
.text:0041DB30
.text:0041DB30 hKey            = dword ptr  4
.text:0041DB30 lpValueName     = dword ptr  8
.text:0041DB30 lpReserved      = dword ptr  0Ch
.text:0041DB30 lpType          = dword ptr  10h
.text:0041DB30 lpData          = dword ptr  14h
.text:0041DB30 lpcbData        = dword ptr  18h
.text:0041DB30
.text:0041DB30                 jmp     ds:__imp_RegQueryValueExA
.text:0041DB30 RegQueryValueExA endp
.text:0041DB30
.text:0041DB30 ; ---------------------------------------------------------------------------
.text:0041DB36                 align 10h
.text:0041DB40
.text:0041DB40 ; =============== S U B R O U T I N E =======================================
.text:0041DB40
.text:0041DB40 ; Attributes: thunk
.text:0041DB40
.text:0041DB40 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0041DB40 RegCloseKey     proc near               ; CODE XREF: .text:004189E8↑p
.text:0041DB40
.text:0041DB40 hKey            = dword ptr  4
.text:0041DB40
.text:0041DB40                 jmp     ds:__imp_RegCloseKey
.text:0041DB40 RegCloseKey     endp
.text:0041DB40
.text:0041DB40 ; ---------------------------------------------------------------------------
.text:0041DB46                 db 2 dup(90h)
.text:0041DB48                 dd 2 dup(0)
.text:0041DB50                 dd 21400h, 0
.text:0041DB58                 dd 0C0h, 46000000h
.text:0041DB60 ; const IID rclsid
.text:0041DB60 rclsid          dd 21401h               ; Data1
.text:0041DB60                                         ; DATA XREF: sub_40C880+4B↑o
.text:0041DB60                 dw 0                    ; Data2
.text:0041DB60                 dw 0                    ; Data3
.text:0041DB60                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0041DB70                 dd 214A0h, 0
.text:0041DB78                 dd 0C0h, 46000000h, 214A1h, 0
.text:0041DB88                 dd 0C0h, 46000000h, 214D0h, 0
.text:0041DB98                 dd 0C0h, 46000000h, 214D1h, 0
.text:0041DBA8                 dd 0C0h, 46000000h, 214D2h, 0
.text:0041DBB8                 dd 0C0h, 46000000h, 214E1h, 0
.text:0041DBC8                 dd 0C0h, 46000000h, 214E2h, 0
.text:0041DBD8                 dd 0C0h, 46000000h, 214E3h, 0
.text:0041DBE8                 dd 0C0h, 46000000h, 214E4h, 0
.text:0041DBF8                 dd 0C0h, 46000000h, 21500h, 0
.text:0041DC08                 dd 0C0h, 46000000h, 214E5h, 0
.text:0041DC18                 dd 0C0h, 46000000h, 214E6h, 0
.text:0041DC28                 dd 0C0h, 46000000h, 214E8h, 0
.text:0041DC38                 dd 0C0h, 46000000h, 214E9h, 0
.text:0041DC48                 dd 0C0h, 46000000h, 214EAh, 0
.text:0041DC58                 dd 0C0h, 46000000h, 214EBh, 0
.text:0041DC68                 dd 0C0h, 46000000h
.text:0041DC70 ; const IID riid
.text:0041DC70 riid            dd 214EEh               ; Data1
.text:0041DC70                                         ; DATA XREF: sub_40C880+2B↑o
.text:0041DC70                 dw 0                    ; Data2
.text:0041DC70                 dw 0                    ; Data3
.text:0041DC70                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0041DC80                 dd 214EFh, 0
.text:0041DC88                 dd 0C0h, 46000000h, 214F0h, 0
.text:0041DC98                 dd 0C0h, 46000000h, 214F1h, 0
.text:0041DCA8                 dd 0C0h, 46000000h, 214F2h, 0
.text:0041DCB8                 dd 0C0h, 46000000h, 214F3h, 0
.text:0041DCC8                 dd 0C0h, 46000000h, 214F4h, 0
.text:0041DCD8                 dd 0C0h, 46000000h, 214F5h, 0
.text:0041DCE8                 dd 0C0h, 46000000h, 214F6h, 0
.text:0041DCF8                 dd 0C0h, 46000000h, 214F7h, 0
.text:0041DD08                 dd 0C0h, 46000000h, 214F8h, 0
.text:0041DD18                 dd 0C0h, 46000000h, 214F9h, 0
.text:0041DD28                 dd 0C0h, 46000000h, 214FAh, 0
.text:0041DD38                 dd 0C0h, 46000000h, 214FBh, 0
.text:0041DD48                 dd 0C0h, 46000000h, 214FCh, 0
.text:0041DD58                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0041DD58                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0041DD58                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0041DD58                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0041DD58                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0041DD58                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0041DD58                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0041DD58                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0041DD58                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0041DD58                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0041DE28                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0041DE38                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0041DE48                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0041DE58                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0041DE68                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0041DE68                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0041DE68                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0041DE68                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0041DE68                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0041DE68                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0041DE68                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0041DEF0 dword_41DEF0    dd 0FFFFFFFFh           ; DATA XREF: .text:0041CD69↑r
.text:0041DEF0                                         ; .text:loc_41CD90↑r ...
.text:0041DEF4 dword_41DEF4    dd 0                    ; DATA XREF: .text:loc_41CD9C↑r
.text:0041DEF4                                         ; sub_41CDC0:loc_41CE0D↑r
.text:0041DEF8                 dd 0FFFFFFFFh
.text:0041DEFC dword_41DEFC    dd 41h dup(0)           ; DATA XREF: .data:off_41E154↓o
.text:0041DEFC _text           ends
.text:0041DEFC
.data:0041E000 ; Section 2. (virtual address 0001E000)
.data:0041E000 ; Virtual size                  : 00000170 (    368.)
.data:0041E000 ; Section size in file          : 00000200 (    512.)
.data:0041E000 ; Offset to raw data for section: 0001D400
.data:0041E000 ; Flags C0000040: Data Readable Writable
.data:0041E000 ; Alignment     : default
.data:0041E000 ; ===========================================================================
.data:0041E000
.data:0041E000 ; Segment type: Pure data
.data:0041E000 ; Segment permissions: Read/Write
.data:0041E000 _data           segment para public 'DATA' use32
.data:0041E000                 assume cs:_data
.data:0041E000                 ;org 41E000h
.data:0041E000 dword_41E000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0041E000                                         ; sub_401080+CC↑r
.data:0041E004 dword_41E004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0041E004                                         ; sub_401080+D4↑r
.data:0041E008                 align 10h
.data:0041E010 dword_41E010    dd 1                    ; DATA XREF: sub_402430:loc_4028F2↑r
.data:0041E010                                         ; sub_402430:loc_402AB4↑r ...
.data:0041E014 dword_41E014    dd 1                    ; DATA XREF: sub_406120+11↑r
.data:0041E014                                         ; .text:004061C1↑r
.data:0041E018 dword_41E018    dd 3Fh                  ; DATA XREF: sub_406120+7D↑w
.data:0041E018                                         ; .text:0040622D↑w
.data:0041E01C                 align 10h
.data:0041E020 ; int off_41E020
.data:0041E020 off_41E020      dd offset sub_4068F0    ; DATA XREF: sub_402430+16D↑r
.data:0041E024                 align 10h
.data:0041E030 ; char *Buffer
.data:0041E030 Buffer          dd offset aCopyrightC2005
.data:0041E030                                         ; DATA XREF: sub_407460+DC↑r
.data:0041E030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0041E034                 align 10h
.data:0041E040 dword_41E040    dd 1                    ; DATA XREF: sub_40BC00+22↑r
.data:0041E040                                         ; sub_40BC00+65↑r ...
.data:0041E044 dword_41E044    dd 100h                 ; DATA XREF: sub_40BC00+3F↑o
.data:0041E044                                         ; sub_40BC00+1A2↑r ...
.data:0041E048 off_41E048      dd offset unk_41F070    ; DATA XREF: sub_40BC00+1AA↑r
.data:0041E04C ; void *off_41E04C
.data:0041E04C off_41E04C      dd offset dword_41E044  ; DATA XREF: sub_40BC00+39↑r
.data:0041E04C                                         ; sub_40BC00+60↑w ...
.data:0041E050 ; int Code
.data:0041E050 Code            dd 1                    ; DATA XREF: sub_407690+18↑r
.data:0041E050                                         ; sub_407840+6D↑r ...
.data:0041E054                 align 10h
.data:0041E060 unk_41E060      db    0                 ; DATA XREF: .data:off_41E0D4↓o
.data:0041E061                 db    0
.data:0041E062                 db    0
.data:0041E063                 db    0
.data:0041E064                 db 0A0h ;  
.data:0041E065                 db 0F8h ; ø
.data:0041E066                 db  40h ; @
.data:0041E067                 db    0
.data:0041E068                 db    0
.data:0041E069                 db  78h ; x
.data:0041E06A                 db  41h ; A
.data:0041E06B                 db    0
.data:0041E06C                 db 0A0h ;  
.data:0041E06D                 db  79h ; y
.data:0041E06E                 db  41h ; A
.data:0041E06F                 db    0
.data:0041E070                 db 0A0h ;  
.data:0041E071                 db  7Ah ; z
.data:0041E072                 db  41h ; A
.data:0041E073                 db    0
.data:0041E074                 db 0A0h ;  
.data:0041E075                 db  7Eh ; ~
.data:0041E076                 db  41h ; A
.data:0041E077                 db    0
.data:0041E078                 db 0A0h ;  
.data:0041E079                 db  80h ; €
.data:0041E07A                 db  41h ; A
.data:0041E07B                 db    0
.data:0041E07C                 db 0E0h ; à
.data:0041E07D                 db  80h ; €
.data:0041E07E                 db  41h ; A
.data:0041E07F                 db    0
.data:0041E080                 db  40h ; @
.data:0041E081                 db  81h
.data:0041E082                 db  41h ; A
.data:0041E083                 db    0
.data:0041E084                 db 0C0h ; À
.data:0041E085                 db  81h
.data:0041E086                 db  41h ; A
.data:0041E087                 db    0
.data:0041E088                 db  40h ; @
.data:0041E089                 db  82h ; ‚
.data:0041E08A                 db  41h ; A
.data:0041E08B                 db    0
.data:0041E08C                 db 0A0h ;  
.data:0041E08D                 db  82h ; ‚
.data:0041E08E                 db  41h ; A
.data:0041E08F                 db    0
.data:0041E090                 db 0A0h ;  
.data:0041E091                 db  84h ; „
.data:0041E092                 db  41h ; A
.data:0041E093                 db    0
.data:0041E094                 db    0
.data:0041E095                 db  5Fh ; _
.data:0041E096                 db  41h ; A
.data:0041E097                 db    0
.data:0041E098                 db    0
.data:0041E099                 db  6Dh ; m
.data:0041E09A                 db  41h ; A
.data:0041E09B                 db    0
.data:0041E09C                 db    0
.data:0041E09D                 db  67h ; g
.data:0041E09E                 db  41h ; A
.data:0041E09F                 db    0
.data:0041E0A0                 db  20h
.data:0041E0A1                 db  85h ; …
.data:0041E0A2                 db  41h ; A
.data:0041E0A3                 db    0
.data:0041E0A4                 db  20h
.data:0041E0A5                 db  85h ; …
.data:0041E0A6                 db  41h ; A
.data:0041E0A7                 db    0
.data:0041E0A8                 db  20h
.data:0041E0A9                 db  85h ; …
.data:0041E0AA                 db  41h ; A
.data:0041E0AB                 db    0
.data:0041E0AC                 db  20h
.data:0041E0AD                 db  85h ; …
.data:0041E0AE                 db  41h ; A
.data:0041E0AF                 db    0
.data:0041E0B0                 db  20h
.data:0041E0B1                 db  85h ; …
.data:0041E0B2                 db  41h ; A
.data:0041E0B3                 db    0
.data:0041E0B4                 db  20h
.data:0041E0B5                 db  85h ; …
.data:0041E0B6                 db  41h ; A
.data:0041E0B7                 db    0
.data:0041E0B8                 db  20h
.data:0041E0B9                 db  85h ; …
.data:0041E0BA                 db  41h ; A
.data:0041E0BB                 db    0
.data:0041E0BC                 db  20h
.data:0041E0BD                 db  85h ; …
.data:0041E0BE                 db  41h ; A
.data:0041E0BF                 db    0
.data:0041E0C0                 db  20h
.data:0041E0C1                 db  85h ; …
.data:0041E0C2                 db  41h ; A
.data:0041E0C3                 db    0
.data:0041E0C4                 db  20h
.data:0041E0C5                 db  85h ; …
.data:0041E0C6                 db  41h ; A
.data:0041E0C7                 db    0
.data:0041E0C8                 db  20h
.data:0041E0C9                 db  85h ; …
.data:0041E0CA                 db  41h ; A
.data:0041E0CB                 db    0
.data:0041E0CC                 db  20h
.data:0041E0CD                 db  85h ; …
.data:0041E0CE                 db  41h ; A
.data:0041E0CF                 db    0
.data:0041E0D0                 db  20h
.data:0041E0D1                 db  85h ; …
.data:0041E0D2                 db  41h ; A
.data:0041E0D3                 db    0
.data:0041E0D4 off_41E0D4      dd offset unk_41E060    ; DATA XREF: sub_40C1C0+1A↑r
.data:0041E0D8                 align 10h
.data:0041E0E0 dword_41E0E0    dd 200h                 ; DATA XREF: sub_40DB80+2ED↑r
.data:0041E0E0                                         ; sub_40DB80+2F8↑r ...
.data:0041E0E4 ; char *off_41E0E4
.data:0041E0E4 off_41E0E4      dd offset aComExeBatCmd ; DATA XREF: sub_40E050+3D3↑r
.data:0041E0E4                                         ; sub_40E050+400↑r ...
.data:0041E0E4                                         ; ".com;.exe;.bat;.cmd"
.data:0041E0E8                 align 10h
.data:0041E0F0 dword_41E0F0    dd 1                    ; DATA XREF: .text:loc_418837↑r
.data:0041E0F0                                         ; sub_418E10+202↑w
.data:0041E0F4                 align 10h
.data:0041E100 byte_41E100     db 41h                  ; DATA XREF: sub_4193E0+6B↑w
.data:0041E100                                         ; sub_4193E0:loc_4194F4↑r
.data:0041E101                 align 10h
.data:0041E110 off_41E110      dd offset aNotset       ; DATA XREF: .text:00419FAA↑r
.data:0041E110                                         ; .text:0041ABF2↑r
.data:0041E110                                         ; "notset"
.data:0041E114 off_41E114      dd offset aNotset       ; DATA XREF: .text:00419FC2↑r
.data:0041E114                                         ; .text:00419FE4↑r ...
.data:0041E114                                         ; "notset"
.data:0041E118                 align 10h
.data:0041E120 dword_41E120    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0041E124                 align 10h
.data:0041E130 ; int Mode
.data:0041E130 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0041E130                                         ; sub_401080+80↑r ...
.data:0041E134                 align 10h
.data:0041E140 dword_41E140    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0041E140                                         ; sub_401080+BA↑r
.data:0041E144                 align 10h
.data:0041E150 dword_41E150    dd 0                    ; DATA XREF: sub_41CDC0+9↑r
.data:0041E150                                         ; sub_41CDC0+1D↑w
.data:0041E154 off_41E154      dd offset dword_41DEFC  ; DATA XREF: sub_41CD30+6↑r
.data:0041E154                                         ; sub_41CD30+17↑r ...
.data:0041E158                 align 1000h
.data:0041E158 _data           ends
.data:0041E158
.bss:0041F000 ; Section 3. (virtual address 0001F000)
.bss:0041F000 ; Virtual size                  : 000005B0 (   1456.)
.bss:0041F000 ; Section size in file          : 00000000 (      0.)
.bss:0041F000 ; Offset to raw data for section: 00000000
.bss:0041F000 ; Flags C0000080: Bss Readable Writable
.bss:0041F000 ; Alignment     : default
.bss:0041F000 ; ===========================================================================
.bss:0041F000
.bss:0041F000 ; Segment type: Uninitialized
.bss:0041F000 ; Segment permissions: Read/Write
.bss:0041F000 _bss            segment para public 'BSS' use32
.bss:0041F000                 assume cs:_bss
.bss:0041F000                 ;org 41F000h
.bss:0041F000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0041F000 dword_41F000    dd ?                    ; DATA XREF: sub_402430:loc_40258B↑w
.bss:0041F000                                         ; sub_402D90:loc_402F17↑r ...
.bss:0041F004                 align 10h
.bss:0041F010 byte_41F010     db ?                    ; DATA XREF: sub_402430+10B↑w
.bss:0041F010                                         ; sub_402430:loc_402957↑r ...
.bss:0041F011                 align 10h
.bss:0041F020 dword_41F020    dd ?                    ; DATA XREF: sub_403410+16D↑r
.bss:0041F024                 align 10h
.bss:0041F030 dword_41F030    dd ?                    ; DATA XREF: sub_406120+9↑o
.bss:0041F030                                         ; sub_406120+17↑w ...
.bss:0041F034 dword_41F034    dd ?                    ; DATA XREF: sub_406120+21↑w
.bss:0041F034                                         ; .text:004061D9↑w
.bss:0041F038 dword_41F038    dd ?                    ; DATA XREF: sub_406120+77↑r
.bss:0041F038                                         ; .text:00406227↑r
.bss:0041F03C dword_41F03C    dd ?                    ; DATA XREF: sub_406120+6B↑r
.bss:0041F03C                                         ; .text:0040621B↑r
.bss:0041F040                 db    ? ;
.bss:0041F041                 db    ? ;
.bss:0041F042                 db    ? ;
.bss:0041F043                 db    ? ;
.bss:0041F044                 db    ? ;
.bss:0041F045                 db    ? ;
.bss:0041F046                 db    ? ;
.bss:0041F047                 db    ? ;
.bss:0041F048                 db    ? ;
.bss:0041F049                 db    ? ;
.bss:0041F04A                 db    ? ;
.bss:0041F04B                 db    ? ;
.bss:0041F04C                 db    ? ;
.bss:0041F04D                 db    ? ;
.bss:0041F04E                 db    ? ;
.bss:0041F04F                 db    ? ;
.bss:0041F050                 db    ? ;
.bss:0041F051                 db    ? ;
.bss:0041F052                 db    ? ;
.bss:0041F053                 db    ? ;
.bss:0041F054                 db    ? ;
.bss:0041F055                 db    ? ;
.bss:0041F056                 db    ? ;
.bss:0041F057                 db    ? ;
.bss:0041F058                 db    ? ;
.bss:0041F059                 db    ? ;
.bss:0041F05A                 db    ? ;
.bss:0041F05B                 db    ? ;
.bss:0041F05C                 db    ? ;
.bss:0041F05D                 db    ? ;
.bss:0041F05E                 db    ? ;
.bss:0041F05F                 db    ? ;
.bss:0041F060 ; char *dword_41F060
.bss:0041F060 dword_41F060    dd ?                    ; DATA XREF: .text:00407814↑w
.bss:0041F060                                         ; sub_407840+58↑r
.bss:0041F064                 align 10h
.bss:0041F070 unk_41F070      db    ? ;               ; DATA XREF: sub_40BC00+100↑o
.bss:0041F070                                         ; .data:off_41E048↑o
.bss:0041F071                 db    ? ;
.bss:0041F072                 db    ? ;
.bss:0041F073                 db    ? ;
.bss:0041F074                 db    ? ;
.bss:0041F075                 db    ? ;
.bss:0041F076                 db    ? ;
.bss:0041F077                 db    ? ;
.bss:0041F078                 db    ? ;
.bss:0041F079                 db    ? ;
.bss:0041F07A                 db    ? ;
.bss:0041F07B                 db    ? ;
.bss:0041F07C                 db    ? ;
.bss:0041F07D                 db    ? ;
.bss:0041F07E                 db    ? ;
.bss:0041F07F                 db    ? ;
.bss:0041F080                 db    ? ;
.bss:0041F081                 db    ? ;
.bss:0041F082                 db    ? ;
.bss:0041F083                 db    ? ;
.bss:0041F084                 db    ? ;
.bss:0041F085                 db    ? ;
.bss:0041F086                 db    ? ;
.bss:0041F087                 db    ? ;
.bss:0041F088                 db    ? ;
.bss:0041F089                 db    ? ;
.bss:0041F08A                 db    ? ;
.bss:0041F08B                 db    ? ;
.bss:0041F08C                 db    ? ;
.bss:0041F08D                 db    ? ;
.bss:0041F08E                 db    ? ;
.bss:0041F08F                 db    ? ;
.bss:0041F090                 db    ? ;
.bss:0041F091                 db    ? ;
.bss:0041F092                 db    ? ;
.bss:0041F093                 db    ? ;
.bss:0041F094                 db    ? ;
.bss:0041F095                 db    ? ;
.bss:0041F096                 db    ? ;
.bss:0041F097                 db    ? ;
.bss:0041F098                 db    ? ;
.bss:0041F099                 db    ? ;
.bss:0041F09A                 db    ? ;
.bss:0041F09B                 db    ? ;
.bss:0041F09C                 db    ? ;
.bss:0041F09D                 db    ? ;
.bss:0041F09E                 db    ? ;
.bss:0041F09F                 db    ? ;
.bss:0041F0A0                 db    ? ;
.bss:0041F0A1                 db    ? ;
.bss:0041F0A2                 db    ? ;
.bss:0041F0A3                 db    ? ;
.bss:0041F0A4                 db    ? ;
.bss:0041F0A5                 db    ? ;
.bss:0041F0A6                 db    ? ;
.bss:0041F0A7                 db    ? ;
.bss:0041F0A8                 db    ? ;
.bss:0041F0A9                 db    ? ;
.bss:0041F0AA                 db    ? ;
.bss:0041F0AB                 db    ? ;
.bss:0041F0AC                 db    ? ;
.bss:0041F0AD                 db    ? ;
.bss:0041F0AE                 db    ? ;
.bss:0041F0AF                 db    ? ;
.bss:0041F0B0                 db    ? ;
.bss:0041F0B1                 db    ? ;
.bss:0041F0B2                 db    ? ;
.bss:0041F0B3                 db    ? ;
.bss:0041F0B4                 db    ? ;
.bss:0041F0B5                 db    ? ;
.bss:0041F0B6                 db    ? ;
.bss:0041F0B7                 db    ? ;
.bss:0041F0B8                 db    ? ;
.bss:0041F0B9                 db    ? ;
.bss:0041F0BA                 db    ? ;
.bss:0041F0BB                 db    ? ;
.bss:0041F0BC                 db    ? ;
.bss:0041F0BD                 db    ? ;
.bss:0041F0BE                 db    ? ;
.bss:0041F0BF                 db    ? ;
.bss:0041F0C0                 db    ? ;
.bss:0041F0C1                 db    ? ;
.bss:0041F0C2                 db    ? ;
.bss:0041F0C3                 db    ? ;
.bss:0041F0C4                 db    ? ;
.bss:0041F0C5                 db    ? ;
.bss:0041F0C6                 db    ? ;
.bss:0041F0C7                 db    ? ;
.bss:0041F0C8                 db    ? ;
.bss:0041F0C9                 db    ? ;
.bss:0041F0CA                 db    ? ;
.bss:0041F0CB                 db    ? ;
.bss:0041F0CC                 db    ? ;
.bss:0041F0CD                 db    ? ;
.bss:0041F0CE                 db    ? ;
.bss:0041F0CF                 db    ? ;
.bss:0041F0D0                 db    ? ;
.bss:0041F0D1                 db    ? ;
.bss:0041F0D2                 db    ? ;
.bss:0041F0D3                 db    ? ;
.bss:0041F0D4                 db    ? ;
.bss:0041F0D5                 db    ? ;
.bss:0041F0D6                 db    ? ;
.bss:0041F0D7                 db    ? ;
.bss:0041F0D8                 db    ? ;
.bss:0041F0D9                 db    ? ;
.bss:0041F0DA                 db    ? ;
.bss:0041F0DB                 db    ? ;
.bss:0041F0DC                 db    ? ;
.bss:0041F0DD                 db    ? ;
.bss:0041F0DE                 db    ? ;
.bss:0041F0DF                 db    ? ;
.bss:0041F0E0                 db    ? ;
.bss:0041F0E1                 db    ? ;
.bss:0041F0E2                 db    ? ;
.bss:0041F0E3                 db    ? ;
.bss:0041F0E4                 db    ? ;
.bss:0041F0E5                 db    ? ;
.bss:0041F0E6                 db    ? ;
.bss:0041F0E7                 db    ? ;
.bss:0041F0E8                 db    ? ;
.bss:0041F0E9                 db    ? ;
.bss:0041F0EA                 db    ? ;
.bss:0041F0EB                 db    ? ;
.bss:0041F0EC                 db    ? ;
.bss:0041F0ED                 db    ? ;
.bss:0041F0EE                 db    ? ;
.bss:0041F0EF                 db    ? ;
.bss:0041F0F0                 db    ? ;
.bss:0041F0F1                 db    ? ;
.bss:0041F0F2                 db    ? ;
.bss:0041F0F3                 db    ? ;
.bss:0041F0F4                 db    ? ;
.bss:0041F0F5                 db    ? ;
.bss:0041F0F6                 db    ? ;
.bss:0041F0F7                 db    ? ;
.bss:0041F0F8                 db    ? ;
.bss:0041F0F9                 db    ? ;
.bss:0041F0FA                 db    ? ;
.bss:0041F0FB                 db    ? ;
.bss:0041F0FC                 db    ? ;
.bss:0041F0FD                 db    ? ;
.bss:0041F0FE                 db    ? ;
.bss:0041F0FF                 db    ? ;
.bss:0041F100                 db    ? ;
.bss:0041F101                 db    ? ;
.bss:0041F102                 db    ? ;
.bss:0041F103                 db    ? ;
.bss:0041F104                 db    ? ;
.bss:0041F105                 db    ? ;
.bss:0041F106                 db    ? ;
.bss:0041F107                 db    ? ;
.bss:0041F108                 db    ? ;
.bss:0041F109                 db    ? ;
.bss:0041F10A                 db    ? ;
.bss:0041F10B                 db    ? ;
.bss:0041F10C                 db    ? ;
.bss:0041F10D                 db    ? ;
.bss:0041F10E                 db    ? ;
.bss:0041F10F                 db    ? ;
.bss:0041F110                 db    ? ;
.bss:0041F111                 db    ? ;
.bss:0041F112                 db    ? ;
.bss:0041F113                 db    ? ;
.bss:0041F114                 db    ? ;
.bss:0041F115                 db    ? ;
.bss:0041F116                 db    ? ;
.bss:0041F117                 db    ? ;
.bss:0041F118                 db    ? ;
.bss:0041F119                 db    ? ;
.bss:0041F11A                 db    ? ;
.bss:0041F11B                 db    ? ;
.bss:0041F11C                 db    ? ;
.bss:0041F11D                 db    ? ;
.bss:0041F11E                 db    ? ;
.bss:0041F11F                 db    ? ;
.bss:0041F120                 db    ? ;
.bss:0041F121                 db    ? ;
.bss:0041F122                 db    ? ;
.bss:0041F123                 db    ? ;
.bss:0041F124                 db    ? ;
.bss:0041F125                 db    ? ;
.bss:0041F126                 db    ? ;
.bss:0041F127                 db    ? ;
.bss:0041F128                 db    ? ;
.bss:0041F129                 db    ? ;
.bss:0041F12A                 db    ? ;
.bss:0041F12B                 db    ? ;
.bss:0041F12C                 db    ? ;
.bss:0041F12D                 db    ? ;
.bss:0041F12E                 db    ? ;
.bss:0041F12F                 db    ? ;
.bss:0041F130                 db    ? ;
.bss:0041F131                 db    ? ;
.bss:0041F132                 db    ? ;
.bss:0041F133                 db    ? ;
.bss:0041F134                 db    ? ;
.bss:0041F135                 db    ? ;
.bss:0041F136                 db    ? ;
.bss:0041F137                 db    ? ;
.bss:0041F138                 db    ? ;
.bss:0041F139                 db    ? ;
.bss:0041F13A                 db    ? ;
.bss:0041F13B                 db    ? ;
.bss:0041F13C                 db    ? ;
.bss:0041F13D                 db    ? ;
.bss:0041F13E                 db    ? ;
.bss:0041F13F                 db    ? ;
.bss:0041F140                 db    ? ;
.bss:0041F141                 db    ? ;
.bss:0041F142                 db    ? ;
.bss:0041F143                 db    ? ;
.bss:0041F144                 db    ? ;
.bss:0041F145                 db    ? ;
.bss:0041F146                 db    ? ;
.bss:0041F147                 db    ? ;
.bss:0041F148                 db    ? ;
.bss:0041F149                 db    ? ;
.bss:0041F14A                 db    ? ;
.bss:0041F14B                 db    ? ;
.bss:0041F14C                 db    ? ;
.bss:0041F14D                 db    ? ;
.bss:0041F14E                 db    ? ;
.bss:0041F14F                 db    ? ;
.bss:0041F150                 db    ? ;
.bss:0041F151                 db    ? ;
.bss:0041F152                 db    ? ;
.bss:0041F153                 db    ? ;
.bss:0041F154                 db    ? ;
.bss:0041F155                 db    ? ;
.bss:0041F156                 db    ? ;
.bss:0041F157                 db    ? ;
.bss:0041F158                 db    ? ;
.bss:0041F159                 db    ? ;
.bss:0041F15A                 db    ? ;
.bss:0041F15B                 db    ? ;
.bss:0041F15C                 db    ? ;
.bss:0041F15D                 db    ? ;
.bss:0041F15E                 db    ? ;
.bss:0041F15F                 db    ? ;
.bss:0041F160                 db    ? ;
.bss:0041F161                 db    ? ;
.bss:0041F162                 db    ? ;
.bss:0041F163                 db    ? ;
.bss:0041F164                 db    ? ;
.bss:0041F165                 db    ? ;
.bss:0041F166                 db    ? ;
.bss:0041F167                 db    ? ;
.bss:0041F168                 db    ? ;
.bss:0041F169                 db    ? ;
.bss:0041F16A                 db    ? ;
.bss:0041F16B                 db    ? ;
.bss:0041F16C                 db    ? ;
.bss:0041F16D                 db    ? ;
.bss:0041F16E                 db    ? ;
.bss:0041F16F                 db    ? ;
.bss:0041F170 dword_41F170    dd ?                    ; DATA XREF: .text:loc_40B591↑o
.bss:0041F170                                         ; .text:loc_40B5B0↑o ...
.bss:0041F174 dword_41F174    dd ?                    ; DATA XREF: .text:loc_40B630↑o
.bss:0041F174                                         ; .text:0040BAB8↑r ...
.bss:0041F178 dword_41F178    dd ?                    ; DATA XREF: .text:0040BAB2↑r
.bss:0041F178                                         ; sub_40BB60+2C↑r
.bss:0041F17C dword_41F17C    dd ?                    ; DATA XREF: .text:0040BAA6↑r
.bss:0041F17C                                         ; sub_40BB60+22↑r
.bss:0041F180 dword_41F180    dd ?                    ; DATA XREF: .text:0040BAC2↑r
.bss:0041F180                                         ; sub_40BB60+36↑r
.bss:0041F184 dword_41F184    dd ?                    ; DATA XREF: .text:0040BAD2↑r
.bss:0041F184                                         ; sub_40BB60+4E↑r
.bss:0041F188 dword_41F188    dd ?                    ; DATA XREF: .text:0040BAEF↑r
.bss:0041F188                                         ; sub_40BB60+62↑r
.bss:0041F18C dword_41F18C    dd ?                    ; DATA XREF: .text:0040BAE5↑r
.bss:0041F18C                                         ; sub_40BB60+70↑r
.bss:0041F190 dword_41F190    dd ?                    ; DATA XREF: .text:0040BAC8↑r
.bss:0041F190                                         ; sub_40BB60+7A↑r
.bss:0041F194                 align 10h
.bss:0041F1A0 ; char *Str1
.bss:0041F1A0 Str1            dd ?                    ; DATA XREF: sub_40BF24:loc_40BF5D↑w
.bss:0041F1A0                                         ; sub_40BF24:loc_40C090↑r
.bss:0041F1A4                 align 10h
.bss:0041F1B0 dword_41F1B0    dd ?                    ; DATA XREF: sub_40BF24+2D↑r
.bss:0041F1B0                                         ; sub_40BF24+3F↑w
.bss:0041F1B4                 align 10h
.bss:0041F1C0 dword_41F1C0    dd ?                    ; DATA XREF: sub_40C450+30↑r
.bss:0041F1C0                                         ; sub_40C450+4F↑w
.bss:0041F1C4 dword_41F1C4    dd ?                    ; DATA XREF: sub_40C450+2A↑r
.bss:0041F1C4                                         ; sub_40C450+5B↑w
.bss:0041F1C8                 align 10h
.bss:0041F1D0 dword_41F1D0    dd ?                    ; DATA XREF: sub_40C570+3E↑r
.bss:0041F1D0                                         ; sub_40C570+F5↑w
.bss:0041F1D4 dword_41F1D4    dd ?                    ; DATA XREF: sub_40C570+38↑r
.bss:0041F1D4                                         ; sub_40C570+EB↑w
.bss:0041F1D8                 align 10h
.bss:0041F1E0 ; LARGE_INTEGER Frequency
.bss:0041F1E0 Frequency       LARGE_INTEGER <?>       ; DATA XREF: sub_40CBE0+D↑r
.bss:0041F1E0                                         ; sub_40CBE0:loc_40CC00↑o ...
.bss:0041F1E8                 align 10h
.bss:0041F1F0 dword_41F1F0    dd ?                    ; DATA XREF: sub_40E050+100↑r
.bss:0041F1F0                                         ; sub_40E050+308↑w
.bss:0041F1F4                 align 10h
.bss:0041F200 ; char *Str
.bss:0041F200 Str             dd ?                    ; DATA XREF: sub_40E050:loc_40E3B4↑r
.bss:0041F200                                         ; sub_40E050+3B6↑r ...
.bss:0041F204                 align 10h
.bss:0041F210 dword_41F210    dd ?                    ; DATA XREF: sub_418D00+8↑r
.bss:0041F210                                         ; sub_418E10:loc_418E92↑w ...
.bss:0041F214                 align 10h
.bss:0041F220 ; struct _OSVERSIONINFOA VersionInformation
.bss:0041F220 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_418E10:loc_418E30↑o
.bss:0041F220                                         ; sub_418E10+2C↑w ...
.bss:0041F2B4 word_41F2B4     dw ?                    ; DATA XREF: sub_418E10:loc_418EC3↑r
.bss:0041F2B6                 align 4
.bss:0041F2B8 word_41F2B8     dw ?                    ; DATA XREF: .text:loc_418886↑r
.bss:0041F2B8                                         ; .text:004188B4↑r ...
.bss:0041F2BA byte_41F2BA     db ?                    ; DATA XREF: .text:00418845↑r
.bss:0041F2BB                 align 10h
.bss:0041F2C0 dword_41F2C0    dd ?                    ; DATA XREF: sub_418E10+6↑r
.bss:0041F2C0                                         ; sub_418E10+75↑w
.bss:0041F2C4                 align 10h
.bss:0041F2D0 dword_41F2D0    dd ?                    ; DATA XREF: sub_4193E0+1C↑r
.bss:0041F2D0                                         ; sub_4193E0+104↑w
.bss:0041F2D4                 align 10h
.bss:0041F2E0 dword_41F2E0    dd ?                    ; DATA XREF: sub_4193E0+B↑r
.bss:0041F2E0                                         ; sub_4193E0+71↑w
.bss:0041F2E4                 align 10h
.bss:0041F2F0 dword_41F2F0    dd ?                    ; DATA XREF: sub_4193E0+85↑r
.bss:0041F2F0                                         ; sub_4193E0+B9↑w
.bss:0041F2F4 dword_41F2F4    dd ?                    ; DATA XREF: sub_4193E0+C4↑w
.bss:0041F2F8 dword_41F2F8    dd ?                    ; DATA XREF: sub_4193E0+2E↑o
.bss:0041F2F8                                         ; sub_4193E0+CF↑w
.bss:0041F2FC dword_41F2FC    dd ?                    ; DATA XREF: sub_4193E0+DA↑w
.bss:0041F300                 db    ? ;
.bss:0041F301                 db    ? ;
.bss:0041F302                 db    ? ;
.bss:0041F303                 db    ? ;
.bss:0041F304                 db    ? ;
.bss:0041F305                 db    ? ;
.bss:0041F306                 db    ? ;
.bss:0041F307                 db    ? ;
.bss:0041F308                 db    ? ;
.bss:0041F309                 db    ? ;
.bss:0041F30A                 db    ? ;
.bss:0041F30B                 db    ? ;
.bss:0041F30C                 db    ? ;
.bss:0041F30D                 db    ? ;
.bss:0041F30E                 db    ? ;
.bss:0041F30F                 db    ? ;
.bss:0041F310                 db    ? ;
.bss:0041F311                 db    ? ;
.bss:0041F312                 db    ? ;
.bss:0041F313                 db    ? ;
.bss:0041F314                 db    ? ;
.bss:0041F315                 db    ? ;
.bss:0041F316                 db    ? ;
.bss:0041F317                 db    ? ;
.bss:0041F318                 db    ? ;
.bss:0041F319                 db    ? ;
.bss:0041F31A                 db    ? ;
.bss:0041F31B                 db    ? ;
.bss:0041F31C                 db    ? ;
.bss:0041F31D                 db    ? ;
.bss:0041F31E                 db    ? ;
.bss:0041F31F                 db    ? ;
.bss:0041F320                 db    ? ;
.bss:0041F321                 db    ? ;
.bss:0041F322                 db    ? ;
.bss:0041F323                 db    ? ;
.bss:0041F324                 db    ? ;
.bss:0041F325                 db    ? ;
.bss:0041F326                 db    ? ;
.bss:0041F327                 db    ? ;
.bss:0041F328                 db    ? ;
.bss:0041F329                 db    ? ;
.bss:0041F32A                 db    ? ;
.bss:0041F32B                 db    ? ;
.bss:0041F32C                 db    ? ;
.bss:0041F32D                 db    ? ;
.bss:0041F32E                 db    ? ;
.bss:0041F32F                 db    ? ;
.bss:0041F330                 db    ? ;
.bss:0041F331                 db    ? ;
.bss:0041F332                 db    ? ;
.bss:0041F333                 db    ? ;
.bss:0041F334                 db    ? ;
.bss:0041F335                 db    ? ;
.bss:0041F336                 db    ? ;
.bss:0041F337                 db    ? ;
.bss:0041F338                 db    ? ;
.bss:0041F339                 db    ? ;
.bss:0041F33A                 db    ? ;
.bss:0041F33B                 db    ? ;
.bss:0041F33C                 db    ? ;
.bss:0041F33D                 db    ? ;
.bss:0041F33E                 db    ? ;
.bss:0041F33F                 db    ? ;
.bss:0041F340                 db    ? ;
.bss:0041F341                 db    ? ;
.bss:0041F342                 db    ? ;
.bss:0041F343                 db    ? ;
.bss:0041F344                 db    ? ;
.bss:0041F345                 db    ? ;
.bss:0041F346                 db    ? ;
.bss:0041F347                 db    ? ;
.bss:0041F348                 db    ? ;
.bss:0041F349                 db    ? ;
.bss:0041F34A                 db    ? ;
.bss:0041F34B                 db    ? ;
.bss:0041F34C                 db    ? ;
.bss:0041F34D                 db    ? ;
.bss:0041F34E                 db    ? ;
.bss:0041F34F                 db    ? ;
.bss:0041F350                 db    ? ;
.bss:0041F351                 db    ? ;
.bss:0041F352                 db    ? ;
.bss:0041F353                 db    ? ;
.bss:0041F354                 db    ? ;
.bss:0041F355                 db    ? ;
.bss:0041F356                 db    ? ;
.bss:0041F357                 db    ? ;
.bss:0041F358                 db    ? ;
.bss:0041F359                 db    ? ;
.bss:0041F35A                 db    ? ;
.bss:0041F35B                 db    ? ;
.bss:0041F35C                 db    ? ;
.bss:0041F35D                 db    ? ;
.bss:0041F35E                 db    ? ;
.bss:0041F35F                 db    ? ;
.bss:0041F360                 db    ? ;
.bss:0041F361                 db    ? ;
.bss:0041F362                 db    ? ;
.bss:0041F363                 db    ? ;
.bss:0041F364                 db    ? ;
.bss:0041F365                 db    ? ;
.bss:0041F366                 db    ? ;
.bss:0041F367                 db    ? ;
.bss:0041F368                 db    ? ;
.bss:0041F369                 db    ? ;
.bss:0041F36A                 db    ? ;
.bss:0041F36B                 db    ? ;
.bss:0041F36C                 db    ? ;
.bss:0041F36D                 db    ? ;
.bss:0041F36E                 db    ? ;
.bss:0041F36F                 db    ? ;
.bss:0041F370                 db    ? ;
.bss:0041F371                 db    ? ;
.bss:0041F372                 db    ? ;
.bss:0041F373                 db    ? ;
.bss:0041F374                 db    ? ;
.bss:0041F375                 db    ? ;
.bss:0041F376                 db    ? ;
.bss:0041F377                 db    ? ;
.bss:0041F378                 db    ? ;
.bss:0041F379                 db    ? ;
.bss:0041F37A                 db    ? ;
.bss:0041F37B                 db    ? ;
.bss:0041F37C                 db    ? ;
.bss:0041F37D                 db    ? ;
.bss:0041F37E                 db    ? ;
.bss:0041F37F                 db    ? ;
.bss:0041F380                 db    ? ;
.bss:0041F381                 db    ? ;
.bss:0041F382                 db    ? ;
.bss:0041F383                 db    ? ;
.bss:0041F384                 db    ? ;
.bss:0041F385                 db    ? ;
.bss:0041F386                 db    ? ;
.bss:0041F387                 db    ? ;
.bss:0041F388                 db    ? ;
.bss:0041F389                 db    ? ;
.bss:0041F38A                 db    ? ;
.bss:0041F38B                 db    ? ;
.bss:0041F38C                 db    ? ;
.bss:0041F38D                 db    ? ;
.bss:0041F38E                 db    ? ;
.bss:0041F38F                 db    ? ;
.bss:0041F390                 db    ? ;
.bss:0041F391                 db    ? ;
.bss:0041F392                 db    ? ;
.bss:0041F393                 db    ? ;
.bss:0041F394                 db    ? ;
.bss:0041F395                 db    ? ;
.bss:0041F396                 db    ? ;
.bss:0041F397                 db    ? ;
.bss:0041F398                 db    ? ;
.bss:0041F399                 db    ? ;
.bss:0041F39A                 db    ? ;
.bss:0041F39B                 db    ? ;
.bss:0041F39C                 db    ? ;
.bss:0041F39D                 db    ? ;
.bss:0041F39E                 db    ? ;
.bss:0041F39F                 db    ? ;
.bss:0041F3A0                 db    ? ;
.bss:0041F3A1                 db    ? ;
.bss:0041F3A2                 db    ? ;
.bss:0041F3A3                 db    ? ;
.bss:0041F3A4                 db    ? ;
.bss:0041F3A5                 db    ? ;
.bss:0041F3A6                 db    ? ;
.bss:0041F3A7                 db    ? ;
.bss:0041F3A8                 db    ? ;
.bss:0041F3A9                 db    ? ;
.bss:0041F3AA                 db    ? ;
.bss:0041F3AB                 db    ? ;
.bss:0041F3AC                 db    ? ;
.bss:0041F3AD                 db    ? ;
.bss:0041F3AE                 db    ? ;
.bss:0041F3AF                 db    ? ;
.bss:0041F3B0                 db    ? ;
.bss:0041F3B1                 db    ? ;
.bss:0041F3B2                 db    ? ;
.bss:0041F3B3                 db    ? ;
.bss:0041F3B4                 db    ? ;
.bss:0041F3B5                 db    ? ;
.bss:0041F3B6                 db    ? ;
.bss:0041F3B7                 db    ? ;
.bss:0041F3B8                 db    ? ;
.bss:0041F3B9                 db    ? ;
.bss:0041F3BA                 db    ? ;
.bss:0041F3BB                 db    ? ;
.bss:0041F3BC                 db    ? ;
.bss:0041F3BD                 db    ? ;
.bss:0041F3BE                 db    ? ;
.bss:0041F3BF                 db    ? ;
.bss:0041F3C0                 db    ? ;
.bss:0041F3C1                 db    ? ;
.bss:0041F3C2                 db    ? ;
.bss:0041F3C3                 db    ? ;
.bss:0041F3C4                 db    ? ;
.bss:0041F3C5                 db    ? ;
.bss:0041F3C6                 db    ? ;
.bss:0041F3C7                 db    ? ;
.bss:0041F3C8                 db    ? ;
.bss:0041F3C9                 db    ? ;
.bss:0041F3CA                 db    ? ;
.bss:0041F3CB                 db    ? ;
.bss:0041F3CC                 db    ? ;
.bss:0041F3CD                 db    ? ;
.bss:0041F3CE                 db    ? ;
.bss:0041F3CF                 db    ? ;
.bss:0041F3D0                 db    ? ;
.bss:0041F3D1                 db    ? ;
.bss:0041F3D2                 db    ? ;
.bss:0041F3D3                 db    ? ;
.bss:0041F3D4                 db    ? ;
.bss:0041F3D5                 db    ? ;
.bss:0041F3D6                 db    ? ;
.bss:0041F3D7                 db    ? ;
.bss:0041F3D8                 db    ? ;
.bss:0041F3D9                 db    ? ;
.bss:0041F3DA                 db    ? ;
.bss:0041F3DB                 db    ? ;
.bss:0041F3DC                 db    ? ;
.bss:0041F3DD                 db    ? ;
.bss:0041F3DE                 db    ? ;
.bss:0041F3DF                 db    ? ;
.bss:0041F3E0                 db    ? ;
.bss:0041F3E1                 db    ? ;
.bss:0041F3E2                 db    ? ;
.bss:0041F3E3                 db    ? ;
.bss:0041F3E4                 db    ? ;
.bss:0041F3E5                 db    ? ;
.bss:0041F3E6                 db    ? ;
.bss:0041F3E7                 db    ? ;
.bss:0041F3E8                 db    ? ;
.bss:0041F3E9                 db    ? ;
.bss:0041F3EA                 db    ? ;
.bss:0041F3EB                 db    ? ;
.bss:0041F3EC                 db    ? ;
.bss:0041F3ED                 db    ? ;
.bss:0041F3EE                 db    ? ;
.bss:0041F3EF                 db    ? ;
.bss:0041F3F0                 db    ? ;
.bss:0041F3F1                 db    ? ;
.bss:0041F3F2                 db    ? ;
.bss:0041F3F3                 db    ? ;
.bss:0041F3F4                 db    ? ;
.bss:0041F3F5                 db    ? ;
.bss:0041F3F6                 db    ? ;
.bss:0041F3F7                 db    ? ;
.bss:0041F3F8                 db    ? ;
.bss:0041F3F9                 db    ? ;
.bss:0041F3FA                 db    ? ;
.bss:0041F3FB                 db    ? ;
.bss:0041F3FC                 db    ? ;
.bss:0041F3FD                 db    ? ;
.bss:0041F3FE                 db    ? ;
.bss:0041F3FF                 db    ? ;
.bss:0041F400                 db    ? ;
.bss:0041F401                 db    ? ;
.bss:0041F402                 db    ? ;
.bss:0041F403                 db    ? ;
.bss:0041F404                 db    ? ;
.bss:0041F405                 db    ? ;
.bss:0041F406                 db    ? ;
.bss:0041F407                 db    ? ;
.bss:0041F408                 db    ? ;
.bss:0041F409                 db    ? ;
.bss:0041F40A                 db    ? ;
.bss:0041F40B                 db    ? ;
.bss:0041F40C                 db    ? ;
.bss:0041F40D                 db    ? ;
.bss:0041F40E                 db    ? ;
.bss:0041F40F                 db    ? ;
.bss:0041F410                 db    ? ;
.bss:0041F411                 db    ? ;
.bss:0041F412                 db    ? ;
.bss:0041F413                 db    ? ;
.bss:0041F414                 db    ? ;
.bss:0041F415                 db    ? ;
.bss:0041F416                 db    ? ;
.bss:0041F417                 db    ? ;
.bss:0041F418                 db    ? ;
.bss:0041F419                 db    ? ;
.bss:0041F41A                 db    ? ;
.bss:0041F41B                 db    ? ;
.bss:0041F41C                 db    ? ;
.bss:0041F41D                 db    ? ;
.bss:0041F41E                 db    ? ;
.bss:0041F41F                 db    ? ;
.bss:0041F420                 db    ? ;
.bss:0041F421                 db    ? ;
.bss:0041F422                 db    ? ;
.bss:0041F423                 db    ? ;
.bss:0041F424                 db    ? ;
.bss:0041F425                 db    ? ;
.bss:0041F426                 db    ? ;
.bss:0041F427                 db    ? ;
.bss:0041F428                 db    ? ;
.bss:0041F429                 db    ? ;
.bss:0041F42A                 db    ? ;
.bss:0041F42B                 db    ? ;
.bss:0041F42C                 db    ? ;
.bss:0041F42D                 db    ? ;
.bss:0041F42E                 db    ? ;
.bss:0041F42F                 db    ? ;
.bss:0041F430                 db    ? ;
.bss:0041F431                 db    ? ;
.bss:0041F432                 db    ? ;
.bss:0041F433                 db    ? ;
.bss:0041F434                 db    ? ;
.bss:0041F435                 db    ? ;
.bss:0041F436                 db    ? ;
.bss:0041F437                 db    ? ;
.bss:0041F438                 db    ? ;
.bss:0041F439                 db    ? ;
.bss:0041F43A                 db    ? ;
.bss:0041F43B                 db    ? ;
.bss:0041F43C                 db    ? ;
.bss:0041F43D                 db    ? ;
.bss:0041F43E                 db    ? ;
.bss:0041F43F                 db    ? ;
.bss:0041F440                 db    ? ;
.bss:0041F441                 db    ? ;
.bss:0041F442                 db    ? ;
.bss:0041F443                 db    ? ;
.bss:0041F444                 db    ? ;
.bss:0041F445                 db    ? ;
.bss:0041F446                 db    ? ;
.bss:0041F447                 db    ? ;
.bss:0041F448                 db    ? ;
.bss:0041F449                 db    ? ;
.bss:0041F44A                 db    ? ;
.bss:0041F44B                 db    ? ;
.bss:0041F44C                 db    ? ;
.bss:0041F44D                 db    ? ;
.bss:0041F44E                 db    ? ;
.bss:0041F44F                 db    ? ;
.bss:0041F450                 db    ? ;
.bss:0041F451                 db    ? ;
.bss:0041F452                 db    ? ;
.bss:0041F453                 db    ? ;
.bss:0041F454                 db    ? ;
.bss:0041F455                 db    ? ;
.bss:0041F456                 db    ? ;
.bss:0041F457                 db    ? ;
.bss:0041F458                 db    ? ;
.bss:0041F459                 db    ? ;
.bss:0041F45A                 db    ? ;
.bss:0041F45B                 db    ? ;
.bss:0041F45C                 db    ? ;
.bss:0041F45D                 db    ? ;
.bss:0041F45E                 db    ? ;
.bss:0041F45F                 db    ? ;
.bss:0041F460                 db    ? ;
.bss:0041F461                 db    ? ;
.bss:0041F462                 db    ? ;
.bss:0041F463                 db    ? ;
.bss:0041F464                 db    ? ;
.bss:0041F465                 db    ? ;
.bss:0041F466                 db    ? ;
.bss:0041F467                 db    ? ;
.bss:0041F468                 db    ? ;
.bss:0041F469                 db    ? ;
.bss:0041F46A                 db    ? ;
.bss:0041F46B                 db    ? ;
.bss:0041F46C                 db    ? ;
.bss:0041F46D                 db    ? ;
.bss:0041F46E                 db    ? ;
.bss:0041F46F                 db    ? ;
.bss:0041F470                 db    ? ;
.bss:0041F471                 db    ? ;
.bss:0041F472                 db    ? ;
.bss:0041F473                 db    ? ;
.bss:0041F474                 db    ? ;
.bss:0041F475                 db    ? ;
.bss:0041F476                 db    ? ;
.bss:0041F477                 db    ? ;
.bss:0041F478                 db    ? ;
.bss:0041F479                 db    ? ;
.bss:0041F47A                 db    ? ;
.bss:0041F47B                 db    ? ;
.bss:0041F47C                 db    ? ;
.bss:0041F47D                 db    ? ;
.bss:0041F47E                 db    ? ;
.bss:0041F47F                 db    ? ;
.bss:0041F480                 db    ? ;
.bss:0041F481                 db    ? ;
.bss:0041F482                 db    ? ;
.bss:0041F483                 db    ? ;
.bss:0041F484                 db    ? ;
.bss:0041F485                 db    ? ;
.bss:0041F486                 db    ? ;
.bss:0041F487                 db    ? ;
.bss:0041F488                 db    ? ;
.bss:0041F489                 db    ? ;
.bss:0041F48A                 db    ? ;
.bss:0041F48B                 db    ? ;
.bss:0041F48C                 db    ? ;
.bss:0041F48D                 db    ? ;
.bss:0041F48E                 db    ? ;
.bss:0041F48F                 db    ? ;
.bss:0041F490                 db    ? ;
.bss:0041F491                 db    ? ;
.bss:0041F492                 db    ? ;
.bss:0041F493                 db    ? ;
.bss:0041F494                 db    ? ;
.bss:0041F495                 db    ? ;
.bss:0041F496                 db    ? ;
.bss:0041F497                 db    ? ;
.bss:0041F498                 db    ? ;
.bss:0041F499                 db    ? ;
.bss:0041F49A                 db    ? ;
.bss:0041F49B                 db    ? ;
.bss:0041F49C                 db    ? ;
.bss:0041F49D                 db    ? ;
.bss:0041F49E                 db    ? ;
.bss:0041F49F                 db    ? ;
.bss:0041F4A0                 db    ? ;
.bss:0041F4A1                 db    ? ;
.bss:0041F4A2                 db    ? ;
.bss:0041F4A3                 db    ? ;
.bss:0041F4A4                 db    ? ;
.bss:0041F4A5                 db    ? ;
.bss:0041F4A6                 db    ? ;
.bss:0041F4A7                 db    ? ;
.bss:0041F4A8                 db    ? ;
.bss:0041F4A9                 db    ? ;
.bss:0041F4AA                 db    ? ;
.bss:0041F4AB                 db    ? ;
.bss:0041F4AC                 db    ? ;
.bss:0041F4AD                 db    ? ;
.bss:0041F4AE                 db    ? ;
.bss:0041F4AF                 db    ? ;
.bss:0041F4B0                 db    ? ;
.bss:0041F4B1                 db    ? ;
.bss:0041F4B2                 db    ? ;
.bss:0041F4B3                 db    ? ;
.bss:0041F4B4                 db    ? ;
.bss:0041F4B5                 db    ? ;
.bss:0041F4B6                 db    ? ;
.bss:0041F4B7                 db    ? ;
.bss:0041F4B8                 db    ? ;
.bss:0041F4B9                 db    ? ;
.bss:0041F4BA                 db    ? ;
.bss:0041F4BB                 db    ? ;
.bss:0041F4BC                 db    ? ;
.bss:0041F4BD                 db    ? ;
.bss:0041F4BE                 db    ? ;
.bss:0041F4BF                 db    ? ;
.bss:0041F4C0                 db    ? ;
.bss:0041F4C1                 db    ? ;
.bss:0041F4C2                 db    ? ;
.bss:0041F4C3                 db    ? ;
.bss:0041F4C4                 db    ? ;
.bss:0041F4C5                 db    ? ;
.bss:0041F4C6                 db    ? ;
.bss:0041F4C7                 db    ? ;
.bss:0041F4C8                 db    ? ;
.bss:0041F4C9                 db    ? ;
.bss:0041F4CA                 db    ? ;
.bss:0041F4CB                 db    ? ;
.bss:0041F4CC                 db    ? ;
.bss:0041F4CD                 db    ? ;
.bss:0041F4CE                 db    ? ;
.bss:0041F4CF                 db    ? ;
.bss:0041F4D0                 db    ? ;
.bss:0041F4D1                 db    ? ;
.bss:0041F4D2                 db    ? ;
.bss:0041F4D3                 db    ? ;
.bss:0041F4D4                 db    ? ;
.bss:0041F4D5                 db    ? ;
.bss:0041F4D6                 db    ? ;
.bss:0041F4D7                 db    ? ;
.bss:0041F4D8                 db    ? ;
.bss:0041F4D9                 db    ? ;
.bss:0041F4DA                 db    ? ;
.bss:0041F4DB                 db    ? ;
.bss:0041F4DC                 db    ? ;
.bss:0041F4DD                 db    ? ;
.bss:0041F4DE                 db    ? ;
.bss:0041F4DF                 db    ? ;
.bss:0041F4E0                 db    ? ;
.bss:0041F4E1                 db    ? ;
.bss:0041F4E2                 db    ? ;
.bss:0041F4E3                 db    ? ;
.bss:0041F4E4                 db    ? ;
.bss:0041F4E5                 db    ? ;
.bss:0041F4E6                 db    ? ;
.bss:0041F4E7                 db    ? ;
.bss:0041F4E8                 db    ? ;
.bss:0041F4E9                 db    ? ;
.bss:0041F4EA                 db    ? ;
.bss:0041F4EB                 db    ? ;
.bss:0041F4EC                 db    ? ;
.bss:0041F4ED                 db    ? ;
.bss:0041F4EE                 db    ? ;
.bss:0041F4EF                 db    ? ;
.bss:0041F4F0 dword_41F4F0    dd ?                    ; DATA XREF: sub_41B2D0+6E↑r
.bss:0041F4F0                                         ; sub_41B2D0+9A↑r ...
.bss:0041F4F4 dword_41F4F4    dd ?                    ; DATA XREF: sub_41B2D0:loc_41B338↑r
.bss:0041F4F4                                         ; sub_41B2D0+A0↑r ...
.bss:0041F4F8                 align 10h
.bss:0041F500 dword_41F500    dd ?                    ; DATA XREF: sub_41B780↑r
.bss:0041F500                                         ; .text:loc_41B7C2↑w
.bss:0041F504                 align 10h
.bss:0041F510 dword_41F510    dd ?                    ; DATA XREF: sub_402430+6F↑w
.bss:0041F510                                         ; sub_402430+127↑r ...
.bss:0041F514                 db    ? ;
.bss:0041F515                 db    ? ;
.bss:0041F516                 db    ? ;
.bss:0041F517                 db    ? ;
.bss:0041F518                 db    ? ;
.bss:0041F519                 db    ? ;
.bss:0041F51A                 db    ? ;
.bss:0041F51B                 db    ? ;
.bss:0041F51C                 db    ? ;
.bss:0041F51D                 db    ? ;
.bss:0041F51E                 db    ? ;
.bss:0041F51F                 db    ? ;
.bss:0041F520                 db    ? ;
.bss:0041F521                 db    ? ;
.bss:0041F522                 db    ? ;
.bss:0041F523                 db    ? ;
.bss:0041F524                 db    ? ;
.bss:0041F525                 db    ? ;
.bss:0041F526                 db    ? ;
.bss:0041F527                 db    ? ;
.bss:0041F528                 db    ? ;
.bss:0041F529                 db    ? ;
.bss:0041F52A                 db    ? ;
.bss:0041F52B                 db    ? ;
.bss:0041F52C                 db    ? ;
.bss:0041F52D                 db    ? ;
.bss:0041F52E                 db    ? ;
.bss:0041F52F                 db    ? ;
.bss:0041F530 ; char *dword_41F530
.bss:0041F530 dword_41F530    dd ?                    ; DATA XREF: sub_402430:loc_40257C↑r
.bss:0041F530                                         ; sub_402430+446↑r ...
.bss:0041F534                 align 10h
.bss:0041F540 dword_41F540    dd ?                    ; CODE XREF: sub_40BF24+63↑p
.bss:0041F540                                         ; DATA XREF: sub_40BE20+1E↑r ...
.bss:0041F544                 align 10h
.bss:0041F550 dword_41F550    dd ?                    ; DATA XREF: sub_40BE20+4E↑w
.bss:0041F550                                         ; sub_40BF24+AB↑w
.bss:0041F554                 align 40h
.bss:0041F580 dword_41F580    dd ?                    ; DATA XREF: sub_40BF24+13↑r
.bss:0041F584                 align 1000h
.bss:0041F584 _bss            ends
.bss:0041F584
.idata:00420000 ; Section 4. (virtual address 00020000)
.idata:00420000 ; Virtual size                  : 00000F10 (   3856.)
.idata:00420000 ; Section size in file          : 00001000 (   4096.)
.idata:00420000 ; Offset to raw data for section: 0001D600
.idata:00420000 ; Flags C0000040: Data Readable Writable
.idata:00420000 ; Alignment     : default
.idata:00420000 ; ===========================================================================
.idata:00420000
.idata:00420000 ; Segment type: Externs
.idata:00420000 ; _idata
.idata:00420000                 extrn unk_420000        ; DATA XREF: .text:00413E70↑o
.idata:00420001                 extrn byte_420001:byte:2DFh
.idata:004202E0 ;
.idata:004202E0 ; Imports from libintl3.dll
.idata:004202E0 ;
.idata:004202E0                 extrn __imp_libintl_bindtextdomain:dword
.idata:004202E0                                         ; CODE XREF: sub_402430+89↑p
.idata:004202E0                                         ; DATA XREF: sub_402430+89↑r ...
.idata:004202E4                 extrn libintl_gettext:dword
.idata:004202E4                                         ; CODE XREF: sub_402430+11B↑p
.idata:004202E4                                         ; sub_402430+1F7↑p ...
.idata:004202E8                 extrn libintl_textdomain:dword
.idata:004202E8                                         ; CODE XREF: sub_402430+96↑p
.idata:004202E8                                         ; DATA XREF: sub_402430+96↑r ...
.idata:004202EC
.idata:004202F4 ;
.idata:004202F4 ; Imports from ADVAPI32.DLL
.idata:004202F4 ;
.idata:004202F4 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004202F4                 extrn __imp_RegCloseKey:dword
.idata:004202F4                                         ; DATA XREF: RegCloseKey↑r
.idata:004202F8 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004202F8                 extrn __imp_RegOpenKeyExA:dword
.idata:004202F8                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004202FC ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004202FC                 extrn __imp_RegQueryValueExA:dword
.idata:004202FC                                         ; DATA XREF: RegQueryValueExA↑r
.idata:00420300
.idata:00420308 ;
.idata:00420308 ; Imports from KERNEL32.dll
.idata:00420308 ;
.idata:00420308 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:00420308                 extrn __imp_AreFileApisANSI:dword
.idata:00420308                                         ; DATA XREF: AreFileApisANSI↑r
.idata:0042030C ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:0042030C                 extrn __imp_CloseHandle:dword
.idata:0042030C                                         ; DATA XREF: CloseHandle↑r
.idata:00420310 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:00420310                 extrn __imp_CreateDirectoryA:dword
.idata:00420310                                         ; DATA XREF: CreateDirectoryA↑r
.idata:00420314 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:00420314                 extrn __imp_CreateFileA:dword
.idata:00420314                                         ; DATA XREF: CreateFileA↑r
.idata:00420318 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:00420318                 extrn __imp_DeviceIoControl:dword
.idata:00420318                                         ; DATA XREF: DeviceIoControl↑r
.idata:0042031C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0042031C                 extrn __imp_ExitProcess:dword
.idata:0042031C                                         ; DATA XREF: ExitProcess↑r
.idata:00420320 ; BOOL (__stdcall *FileTimeToSystemTime)(const FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime)
.idata:00420320                 extrn __imp_FileTimeToSystemTime:dword
.idata:00420320                                         ; DATA XREF: FileTimeToSystemTime↑r
.idata:00420324 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00420324                 extrn __imp_FindClose:dword
.idata:00420324                                         ; DATA XREF: FindClose↑r
.idata:00420328 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00420328                 extrn __imp_FindFirstFileA:dword
.idata:00420328                                         ; DATA XREF: FindFirstFileA↑r
.idata:0042032C ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0042032C                 extrn __imp_FindNextFileA:dword
.idata:0042032C                                         ; DATA XREF: FindNextFileA↑r
.idata:00420330 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00420330                 extrn __imp_FreeLibrary:dword
.idata:00420330                                         ; DATA XREF: FreeLibrary↑r
.idata:00420334 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00420334                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00420334                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00420338 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00420338                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00420338                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0042033C ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0042033C                 extrn __imp_GetDriveTypeA:dword
.idata:0042033C                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00420340 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00420340                 extrn __imp_GetFileAttributesA:dword
.idata:00420340                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00420344 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00420344                 extrn __imp_GetFileInformationByHandle:dword
.idata:00420344                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00420348 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00420348                 extrn __imp_GetFileSize:dword
.idata:00420348                                         ; DATA XREF: GetFileSize↑r
.idata:0042034C ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0042034C                 extrn __imp_GetFileType:dword
.idata:0042034C                                         ; DATA XREF: GetFileType↑r
.idata:00420350 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00420350                 extrn __imp_GetFullPathNameA:dword
.idata:00420350                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00420354 ; DWORD (__stdcall *GetLastError)()
.idata:00420354                 extrn __imp_GetLastError:dword
.idata:00420354                                         ; DATA XREF: GetLastError↑r
.idata:00420358 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00420358                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00420358                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0042035C ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0042035C                 extrn __imp_GetModuleFileNameA:dword
.idata:0042035C                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00420360 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00420360                 extrn __imp_GetModuleHandleA:dword
.idata:00420360                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00420364 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00420364                 extrn __imp_GetProcAddress:dword
.idata:00420364                                         ; DATA XREF: GetProcAddress↑r
.idata:00420368 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00420368                 extrn __imp_GetProcessHeap:dword
.idata:00420368                                         ; DATA XREF: GetProcessHeap↑r
.idata:0042036C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0042036C                 extrn __imp_GetShortPathNameA:dword
.idata:0042036C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00420370 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00420370                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00420370                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00420374 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00420374                 extrn __imp_GetTimeZoneInformation:dword
.idata:00420374                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00420378 ; DWORD (__stdcall *GetVersion)()
.idata:00420378                 extrn __imp_GetVersion:dword
.idata:00420378                                         ; DATA XREF: GetVersion↑r
.idata:0042037C ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0042037C                 extrn __imp_GetVersionExA:dword
.idata:0042037C                                         ; DATA XREF: GetVersionExA↑r
.idata:00420380 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00420380                 extrn __imp_GetVolumeInformationA:dword
.idata:00420380                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00420384 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00420384                 extrn __imp_HeapAlloc:dword
.idata:00420384                                         ; DATA XREF: HeapAlloc↑r
.idata:00420388 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00420388                 extrn __imp_HeapFree:dword
.idata:00420388                                         ; DATA XREF: HeapFree↑r
.idata:0042038C ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0042038C                 extrn __imp_LoadLibraryA:dword
.idata:0042038C                                         ; DATA XREF: LoadLibraryA↑r
.idata:00420390 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00420390                 extrn __imp_MultiByteToWideChar:dword
.idata:00420390                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00420394 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00420394                 extrn __imp_PeekNamedPipe:dword
.idata:00420394                                         ; DATA XREF: PeekNamedPipe↑r
.idata:00420398 ; BOOL (__stdcall *QueryPerformanceFrequency)(LARGE_INTEGER *lpFrequency)
.idata:00420398                 extrn __imp_QueryPerformanceFrequency:dword
.idata:00420398                                         ; DATA XREF: QueryPerformanceFrequency↑r
.idata:0042039C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0042039C                 extrn __imp_SetErrorMode:dword
.idata:0042039C                                         ; DATA XREF: SetErrorMode↑r
.idata:004203A0 ; BOOL (__stdcall *SetSystemTime)(const SYSTEMTIME *lpSystemTime)
.idata:004203A0                 extrn __imp_SetSystemTime:dword
.idata:004203A0                                         ; DATA XREF: SetSystemTime↑r
.idata:004203A4 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:004203A4                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:004203A4                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:004203A8 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:004203A8                 extrn __imp_UnlockFile:dword
.idata:004203A8                                         ; DATA XREF: UnlockFile↑r
.idata:004203AC ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:004203AC                 extrn __imp_lstrcmpiA:dword
.idata:004203AC                                         ; DATA XREF: lstrcmpiA↑r
.idata:004203B0 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:004203B0                 extrn __imp_lstrcpyA:dword
.idata:004203B0                                         ; DATA XREF: lstrcpyA↑r
.idata:004203B4
.idata:004203BC ;
.idata:004203BC ; Imports from msvcrt.dll
.idata:004203BC ;
.idata:004203BC ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:004203BC                 extrn __imp__chmod:dword
.idata:004203BC                                         ; DATA XREF: _chmod↑r
.idata:004203C0 ; int (__cdecl *_getpid)()
.idata:004203C0                 extrn __imp__getpid:dword
.idata:004203C0                                         ; DATA XREF: _getpid↑r
.idata:004203C4 ; char *(__cdecl *_strdup)(const char *String)
.idata:004203C4                 extrn __imp__strdup:dword
.idata:004203C4                                         ; DATA XREF: _strdup↑r
.idata:004203C8 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004203C8                 extrn __imp__stricmp:dword
.idata:004203C8                                         ; DATA XREF: _stricmp↑r
.idata:004203CC ; char *tzname[2]
.idata:004203CC                 extrn _tzname:dword     ; DATA XREF: sub_403410+1139↑r
.idata:004203CC                                         ; sub_4097F0+1E1↑r
.idata:004203D0 ; void (__cdecl *_tzset)()
.idata:004203D0                 extrn __imp__tzset:dword
.idata:004203D0                                         ; DATA XREF: _tzset↑r
.idata:004203D4
.idata:004203DC ;
.idata:004203DC ; Imports from MSVCP60.DLL
.idata:004203DC ;
.idata:004203DC ; size_t (__cdecl *mbrlen)(const char *Ch, size_t SizeInBytes, mbstate_t *State)
.idata:004203DC                 extrn __imp_mbrlen:dword
.idata:004203DC                                         ; DATA XREF: mbrlen↑r
.idata:004203E0 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004203E0                 extrn __imp_mbrtowc:dword
.idata:004203E0                                         ; DATA XREF: mbrtowc↑r
.idata:004203E4
.idata:004203EC ;
.idata:004203EC ; Imports from msvcrt.dll
.idata:004203EC ;
.idata:004203EC                 extrn __imp___getmainargs:dword
.idata:004203EC                                         ; DATA XREF: __getmainargs↑r
.idata:004203F0 ; int _mb_cur_max
.idata:004203F0                 extrn __mb_cur_max:dword
.idata:004203F0                                         ; DATA XREF: sub_403410+662↑r
.idata:004203F0                                         ; sub_403410+82A↑r ...
.idata:004203F4 ; char ***(__cdecl *__p__environ)()
.idata:004203F4                 extrn __imp___p__environ:dword
.idata:004203F4                                         ; DATA XREF: __p__environ↑r
.idata:004203F8 ; int *(__cdecl *__p__fmode)()
.idata:004203F8                 extrn __imp___p__fmode:dword
.idata:004203F8                                         ; DATA XREF: __p__fmode↑r
.idata:004203FC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004203FC                 extrn __set_app_type:dword
.idata:004203FC                                         ; CODE XREF: start+D↑p
.idata:004203FC                                         ; .text:0040102D↑p
.idata:004203FC                                         ; DATA XREF: ...
.idata:00420400                 extrn __imp__assert:dword
.idata:00420400                                         ; DATA XREF: _assert↑r
.idata:00420404 ; void (__cdecl *_cexit)()
.idata:00420404                 extrn __imp__cexit:dword
.idata:00420404                                         ; DATA XREF: _cexit↑r
.idata:00420408 ; int (__cdecl *_close)(int FileHandle)
.idata:00420408                 extrn __imp__close:dword
.idata:00420408                                         ; DATA XREF: _close↑r
.idata:0042040C ; int *(__cdecl *_errno)()
.idata:0042040C                 extrn __imp__errno:dword
.idata:0042040C                                         ; DATA XREF: _errno↑r
.idata:00420410 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:00420410                 extrn __imp__fdopen:dword
.idata:00420410                                         ; DATA XREF: _fdopen↑r
.idata:00420414 ; int (__cdecl *_filbuf)(FILE *File)
.idata:00420414                 extrn __imp__filbuf:dword
.idata:00420414                                         ; DATA XREF: _filbuf↑r
.idata:00420418 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:00420418                 extrn __imp__filelengthi64:dword
.idata:00420418                                         ; DATA XREF: _filelengthi64↑r
.idata:0042041C ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0042041C                 extrn __imp__flsbuf:dword
.idata:0042041C                                         ; DATA XREF: _flsbuf↑r
.idata:00420420 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:00420420                 extrn __imp__get_osfhandle:dword
.idata:00420420                                         ; DATA XREF: _get_osfhandle↑r
.idata:00420424 ; FILE iob[]
.idata:00420424                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00420424                                         ; sub_401080+75↑r ...
.idata:00420428 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00420428                 extrn __imp__isctype:dword
.idata:00420428                                         ; DATA XREF: _isctype↑r
.idata:0042042C ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0042042C                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0042042C                                         ; DATA XREF: .text:0040106C↑r
.idata:00420430 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:00420430                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:00420434 ; const unsigned __int16 *pctype
.idata:00420434                 extrn _pctype:dword     ; DATA XREF: sub_403410:loc_403AC9↑r
.idata:00420434                                         ; sub_403410:loc_403C98↑r ...
.idata:00420438 ; int (__cdecl *_putenv)(const char *EnvString)
.idata:00420438                 extrn __imp__putenv:dword
.idata:00420438                                         ; DATA XREF: _putenv↑r
.idata:0042043C ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0042043C                 extrn __imp__setmode:dword
.idata:0042043C                                         ; DATA XREF: _setmode↑r
.idata:00420440 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00420440                 extrn __imp__stricmp_0:dword
.idata:00420440                                         ; DATA XREF: _stricmp_0↑r
.idata:00420444 ; void (__cdecl __noreturn *abort)()
.idata:00420444                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00420448 ; char *(__cdecl *asctime)(const struct tm *Tm)
.idata:00420448                 extrn __imp_asctime:dword
.idata:00420448                                         ; DATA XREF: asctime↑r
.idata:0042044C ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0042044C                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0042044C                                         ; DATA XREF: sub_401040+C↑r
.idata:00420450 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00420450                 extrn __imp_calloc:dword
.idata:00420450                                         ; DATA XREF: calloc↑r
.idata:00420454 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:00420454                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00420458 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00420458                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0042045C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0042045C                 extrn __imp_fclose:dword
.idata:0042045C                                         ; DATA XREF: fclose↑r
.idata:00420460 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00420460                 extrn __imp_fflush:dword
.idata:00420460                                         ; DATA XREF: fflush↑r
.idata:00420464 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00420464                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00420468 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00420468                 extrn __imp_fprintf:dword
.idata:00420468                                         ; DATA XREF: fprintf↑r
.idata:0042046C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0042046C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00420470 ; void (__cdecl *free)(void *Block)
.idata:00420470                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00420474 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00420474                 extrn __imp_getenv:dword
.idata:00420474                                         ; DATA XREF: getenv↑r
.idata:00420478 ; struct tm *(__cdecl *gmtime)(const __time32_t *const Time)
.idata:00420478                 extrn __imp_gmtime:dword
.idata:00420478                                         ; DATA XREF: gmtime↑r
.idata:0042047C ; int (__cdecl *isalpha)(int C)
.idata:0042047C                 extrn __imp_isalpha:dword
.idata:0042047C                                         ; DATA XREF: isalpha↑r
.idata:00420480 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00420480                 extrn __imp_iswctype:dword
.idata:00420480                                         ; DATA XREF: iswctype↑r
.idata:00420484 ; struct tm *(__cdecl *localtime)(const __time32_t *const Time)
.idata:00420484                 extrn __imp_localtime:dword
.idata:00420484                                         ; DATA XREF: localtime↑r
.idata:00420488 ; void *(__cdecl *malloc)(size_t Size)
.idata:00420488                 extrn __imp_malloc:dword
.idata:00420488                                         ; DATA XREF: malloc↑r
.idata:0042048C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0042048C                 extrn __imp_memcpy:dword
.idata:0042048C                                         ; DATA XREF: memcpy↑r
.idata:00420490 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00420490                 extrn __imp_memset:dword
.idata:00420490                                         ; DATA XREF: memset↑r
.idata:00420494 ; __time32_t (__cdecl *mktime)(struct tm *const Tm)
.idata:00420494                 extrn __imp_mktime:dword
.idata:00420494                                         ; DATA XREF: mktime↑r
.idata:00420498 ; int (*printf)(const char *const Format, ...)
.idata:00420498                 extrn __imp_printf:dword
.idata:00420498                                         ; DATA XREF: printf↑r
.idata:0042049C ; int (__cdecl *putchar)(int Character)
.idata:0042049C                 extrn __imp_putchar:dword
.idata:0042049C                                         ; DATA XREF: putchar↑r
.idata:004204A0 ; int (__cdecl *puts)(const char *Buffer)
.idata:004204A0                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:004204A4 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004204A4                 extrn __imp_realloc:dword
.idata:004204A4                                         ; DATA XREF: realloc↑r
.idata:004204A8 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004204A8                 extrn __imp_setlocale:dword
.idata:004204A8                                         ; DATA XREF: setlocale↑r
.idata:004204AC ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004204AC                 extrn __imp_signal:dword
.idata:004204AC                                         ; DATA XREF: signal↑r
.idata:004204B0 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:004204B0                 extrn __imp_sprintf:dword
.idata:004204B0                                         ; DATA XREF: sprintf↑r
.idata:004204B4 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:004204B4                 extrn __imp_sscanf:dword
.idata:004204B4                                         ; DATA XREF: sscanf↑r
.idata:004204B8 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:004204B8                 extrn __imp_strcat:dword
.idata:004204B8                                         ; DATA XREF: strcat↑r
.idata:004204BC ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004204BC                 extrn __imp_strchr:dword
.idata:004204BC                                         ; DATA XREF: strchr↑r
.idata:004204C0 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004204C0                 extrn __imp_strcmp:dword
.idata:004204C0                                         ; DATA XREF: strcmp↑r
.idata:004204C4 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:004204C4                 extrn __imp_strcpy:dword
.idata:004204C4                                         ; DATA XREF: strcpy↑r
.idata:004204C8 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004204C8                 extrn __imp_strerror:dword
.idata:004204C8                                         ; DATA XREF: strerror↑r
.idata:004204CC ; size_t (__cdecl *strftime)(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)
.idata:004204CC                 extrn __imp_strftime:dword
.idata:004204CC                                         ; DATA XREF: strftime↑r
.idata:004204D0 ; size_t (__cdecl *strlen)(const char *Str)
.idata:004204D0                 extrn __imp_strlen:dword
.idata:004204D0                                         ; DATA XREF: strlen↑r
.idata:004204D4 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004204D4                 extrn __imp_strncmp:dword
.idata:004204D4                                         ; DATA XREF: strncmp↑r
.idata:004204D8 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:004204D8                 extrn __imp_strncpy:dword
.idata:004204D8                                         ; DATA XREF: strncpy↑r
.idata:004204DC ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:004204DC                 extrn __imp_strpbrk:dword
.idata:004204DC                                         ; DATA XREF: strpbrk↑r
.idata:004204E0 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:004204E0                 extrn __imp_strrchr:dword
.idata:004204E0                                         ; DATA XREF: strrchr↑r
.idata:004204E4 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:004204E4                 extrn __imp_strspn:dword
.idata:004204E4                                         ; DATA XREF: strspn↑r
.idata:004204E8 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:004204E8                 extrn __imp_strstr:dword
.idata:004204E8                                         ; DATA XREF: strstr↑r
.idata:004204EC ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:004204EC                 extrn __imp_strtol:dword
.idata:004204EC                                         ; DATA XREF: strtol↑r
.idata:004204F0 ; __time32_t (__cdecl *time)(__time32_t *const Time)
.idata:004204F0                 extrn __imp_time:dword  ; DATA XREF: time↑r
.idata:004204F4 ; int (__cdecl *tolower)(int C)
.idata:004204F4                 extrn __imp_tolower:dword
.idata:004204F4                                         ; DATA XREF: tolower↑r
.idata:004204F8 ; int (__cdecl *toupper)(int C)
.idata:004204F8                 extrn __imp_toupper:dword
.idata:004204F8                                         ; DATA XREF: toupper↑r
.idata:004204FC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004204FC                 extrn __imp_vfprintf:dword
.idata:004204FC                                         ; DATA XREF: vfprintf↑r
.idata:00420500
.idata:00420508 ;
.idata:00420508 ; Imports from OLE32.dll
.idata:00420508 ;
.idata:00420508 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00420508                 extrn __imp_CoCreateInstance:dword
.idata:00420508                                         ; DATA XREF: CoCreateInstance↑r
.idata:0042050C ; void (__stdcall *CoUninitialize)()
.idata:0042050C                 extrn __imp_CoUninitialize:dword
.idata:0042050C                                         ; DATA XREF: CoUninitialize↑r
.idata:00420510 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00420510                 extrn __imp_OleInitialize:dword
.idata:00420510                                         ; DATA XREF: OleInitialize↑r
.idata:00420514
.idata:00420514
.idata:00420514
.idata:00420514                 end start
