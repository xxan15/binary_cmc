.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 366F0B32420D5E840502FE06DF16C08160EAFCBA3CBE44D76F72690561179255
.text:00401000 ; Input MD5    : AB7C4ACABE2A54557FD61FE8F8BBCEF6
.text:00401000 ; Input CRC32  : 18395E55
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/pwd.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A26E (Wed Apr 20 18:41:50 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000CA60 (  51808.)
.text:00401000 ; Section size in file          : 0000CC00 (  52224.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401380+66↓p
.text:00401040                                         ; .text:0040CCC0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40CC60
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_40E000
.text:004010A2                 mov     edx, dword_40E090
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_40E004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_40E0B0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_40E0B0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40CC30
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_40E000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_40E004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401380
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40CC60
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401380+23↓o
.text:00401280                                         ; sub_401380+B7↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401380+3D↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401380+45↓o
.text:004012C3                                         ; sub_401380+52↓o
.text:004012CD aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401380+73↓o
.text:004012DA a530            db '5.3.0',0            ; DATA XREF: sub_401380+83↓o
.text:004012E0 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401380+8B↓o
.text:004012EE ; const FILE stru_4012EE
.text:004012EE stru_4012EE     FILE <647770h, 26B48Dh, 8D000000h, 27BCh, 72540000h, 25602079h, \
.text:004012EE                                         ; DATA XREF: sub_401380+93↓o
.text:004012EE                       2D2D2073h, 706C6568h>
.text:0040130E                 db  27h ; '
.text:0040130F                 db  20h
.text:00401310                 db  66h ; f
.text:00401311                 db  6Fh ; o
.text:00401312                 db  72h ; r
.text:00401313                 db  20h
.text:00401314                 db  6Dh ; m
.text:00401315                 db  6Fh ; o
.text:00401316                 db  72h ; r
.text:00401317                 db  65h ; e
.text:00401318                 db  20h
.text:00401319                 db  69h ; i
.text:0040131A                 db  6Eh ; n
.text:0040131B                 db  66h ; f
.text:0040131C                 db  6Fh ; o
.text:0040131D                 db  72h ; r
.text:0040131E                 db  6Dh ; m
.text:0040131F                 db  61h ; a
.text:00401320                 db  74h ; t
.text:00401321                 db  69h ; i
.text:00401322                 db  6Fh ; o
.text:00401323                 db  6Eh ; n
.text:00401324                 db  2Eh ; .
.text:00401325                 db  0Ah
.text:00401326                 db    0
.text:00401327 ; const char asc_401327[]
.text:00401327 asc_401327      db '.',0                ; DATA XREF: sub_401380:loc_401518↓o
.text:00401327                                         ; sub_401380:loc_401674↓o ...
.text:00401329 ; const char Src[]
.text:00401329 Src             db '/',0                ; DATA XREF: sub_401380+24C↓o
.text:00401329                                         ; sub_401380:loc_4016B5↓o
.text:0040132B aFailedToStatS  db 'failed to stat %s',0
.text:0040132B                                         ; DATA XREF: sub_401380+300↓o
.text:0040132B                                         ; sub_4019A0+3E6↓o
.text:0040133D                 align 10h
.text:00401340 aFailedToGetAtt db 'failed to get attributes of %s',0
.text:00401340                                         ; DATA XREF: sub_401380+341↓o
.text:0040135F aIgnoringNonOpt db 'ignoring non-option arguments',0
.text:0040135F                                         ; DATA XREF: sub_401380:loc_4016F6↓o
.text:0040137D                 align 10h
.text:00401380
.text:00401380 ; =============== S U B R O U T I N E =======================================
.text:00401380
.text:00401380 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401380
.text:00401380 sub_401380      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401380
.text:00401380 Category        = dword ptr -0C8h
.text:00401380 Locale          = dword ptr -0C4h
.text:00401380 Size            = dword ptr -0C0h
.text:00401380 var_BC          = byte ptr -0BCh
.text:00401380 var_B8          = dword ptr -0B8h
.text:00401380 var_B4          = dword ptr -0B4h
.text:00401380 var_B0          = byte ptr -0B0h
.text:00401380 var_AC          = dword ptr -0ACh
.text:00401380 var_A0          = dword ptr -0A0h
.text:00401380 var_9C          = dword ptr -9Ch
.text:00401380 var_98          = dword ptr -98h
.text:00401380 var_90          = dword ptr -90h
.text:00401380 var_8C          = dword ptr -8Ch
.text:00401380 var_88          = dword ptr -88h
.text:00401380 var_84          = dword ptr -84h
.text:00401380 var_28          = byte ptr -28h
.text:00401380 arg_0           = dword ptr  8
.text:00401380 arg_4           = dword ptr  0Ch
.text:00401380
.text:00401380                 push    ebp
.text:00401381                 xor     eax, eax
.text:00401383                 mov     ebp, esp
.text:00401385                 push    edi
.text:00401386                 push    esi
.text:00401387                 push    ebx
.text:00401388                 sub     esp, 0BCh
.text:0040138E                 mov     edi, [ebp+arg_4]
.text:00401391                 and     esp, 0FFFFFFF0h
.text:00401394                 mov     esi, [ebp+arg_0]
.text:00401397                 call    __alloca
.text:0040139C                 call    sub_40CD00
.text:004013A1                 mov     edx, [edi]
.text:004013A3                 mov     [esp+0C8h+Locale], offset Locale ; Locale
.text:004013AB                 mov     [esp+0C8h+Category], 0 ; Category
.text:004013B2                 mov     ds:dword_40F4B0, edx
.text:004013B8                 call    setlocale
.text:004013BD                 mov     [esp+0C8h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004013C5                 mov     [esp+0C8h+Category], offset aCoreutils ; "coreutils"
.text:004013CC                 call    ds:__imp_libintl_bindtextdomain
.text:004013D2                 mov     [esp+0C8h+Category], offset aCoreutils ; "coreutils"
.text:004013D9                 call    ds:libintl_textdomain
.text:004013DF                 mov     [esp+0C8h+Category], offset sub_403240 ; void (__cdecl *)()
.text:004013E6                 call    sub_401040
.text:004013EB                 mov     [esp+0C8h+var_AC], 0
.text:004013F3                 mov     dword ptr [esp+0C8h+var_B0], offset aJimMeyering ; "Jim Meyering"
.text:004013FB                 mov     [esp+0C8h+var_B4], offset sub_401830 ; int
.text:00401403                 mov     [esp+0C8h+var_B8], offset a530 ; "5.3.0"
.text:0040140B                 mov     dword ptr [esp+0C8h+var_BC], offset aGnuCoreutils ; "GNU coreutils"
.text:00401413                 mov     [esp+0C8h+Size], offset stru_4012EE ; FILE *
.text:0040141B                 mov     [esp+0C8h+Locale], edi ; int
.text:0040141F                 mov     [esp+0C8h+Category], esi ; int
.text:00401422                 call    sub_403150
.text:00401427                 mov     [esp+0C8h+var_B8], 0 ; int
.text:0040142F                 mov     dword ptr [esp+0C8h+var_BC], 0 ; char
.text:00401437                 mov     [esp+0C8h+Size], offset Locale ; char *
.text:0040143F                 mov     [esp+0C8h+Locale], edi ; int
.text:00401443                 mov     [esp+0C8h+Category], esi ; int
.text:00401446                 call    sub_402FB0
.text:0040144B                 inc     eax
.text:0040144C                 jz      short loc_401486
.text:0040144E                 mov     [esp+0C8h+Category], (offset stru_4012EE._file+2)
.text:00401455                 call    ds:libintl_gettext
.text:0040145B                 mov     ecx, ds:_iob
.text:00401461                 mov     ebx, ds:dword_40F4B0
.text:00401467                 add     ecx, 40h ; '@'
.text:0040146A                 mov     [esp+0C8h+Size], ebx
.text:0040146E                 mov     [esp+0C8h+Locale], eax ; Format
.text:00401472                 mov     [esp+0C8h+Category], ecx ; Stream
.text:00401475                 call    fprintf
.text:0040147A                 mov     [esp+0C8h+Category], 1 ; Code
.text:00401481
.text:00401481 loc_401481:                             ; CODE XREF: sub_401380+134↓j
.text:00401481                 call    exit
.text:00401486 ; ---------------------------------------------------------------------------
.text:00401486
.text:00401486 loc_401486:                             ; CODE XREF: sub_401380+CC↑j
.text:00401486                 cmp     dword_40E010, esi
.text:0040148C                 jl      loc_4016F6
.text:00401492
.text:00401492 loc_401492:                             ; CODE XREF: sub_401380+39B↓j
.text:00401492                 call    sub_402F70
.text:00401497                 test    eax, eax
.text:00401499                 mov     ebx, eax
.text:0040149B                 jz      short loc_4014B6
.text:0040149D                 mov     [esp+0C8h+Category], eax ; Buffer
.text:004014A0                 call    puts
.text:004014A5                 mov     [esp+0C8h+Category], ebx ; Block
.text:004014A8
.text:004014A8 loc_4014A8:                             ; CODE XREF: sub_401380+287↓j
.text:004014A8                 call    free
.text:004014AD                 mov     [esp+0C8h+Category], 0
.text:004014B4                 jmp     short loc_401481
.text:004014B6 ; ---------------------------------------------------------------------------
.text:004014B6
.text:004014B6 loc_4014B6:                             ; CODE XREF: sub_401380+11B↑j
.text:004014B6                 mov     [esp+0C8h+Category], 0Ch ; size_t
.text:004014BD                 call    sub_4033E0
.text:004014C2                 mov     dword ptr [eax+4], 800h
.text:004014C9                 mov     [ebp+var_9C], eax
.text:004014CF                 mov     [esp+0C8h+Category], 800h ; size_t
.text:004014D6                 call    sub_4033E0
.text:004014DB                 mov     esi, [ebp+var_9C]
.text:004014E1                 mov     edi, [ebp+var_9C]
.text:004014E7                 mov     ebx, [esi+4]
.text:004014EA                 mov     [esi], eax
.text:004014EC                 lea     esi, [ebp+var_28]
.text:004014EF                 add     eax, ebx
.text:004014F1                 lea     ecx, [eax-1]
.text:004014F4                 mov     [edi+8], ecx
.text:004014F7                 mov     byte ptr [eax-1], 0
.text:004014FB                 mov     eax, 1
.text:00401500                 mov     [ebp+var_A0], eax
.text:00401506                 mov     [esp+0C8h+Category], esi
.text:00401509                 call    sub_401EF0
.text:0040150E                 test    eax, eax
.text:00401510                 mov     edi, eax
.text:00401512                 jz      loc_4016B5
.text:00401518
.text:00401518 loc_401518:                             ; CODE XREF: sub_401380+371↓j
.text:00401518                 mov     [esp+0C8h+Category], offset asc_401327 ; "."
.text:0040151F                 lea     ecx, [ebp+var_98]
.text:00401525                 mov     [esp+0C8h+Locale], ecx ; int
.text:00401529                 call    sub_407FE0
.text:0040152E                 test    eax, eax
.text:00401530                 js      loc_401674
.text:00401536
.text:00401536 loc_401536:                             ; CODE XREF: sub_401380+216↓j
.text:00401536                                         ; sub_401380+330↓j
.text:00401536                 mov     ebx, [ebp+var_8C]
.text:0040153C                 mov     ecx, [ebp+var_90]
.text:00401542                 mov     eax, [edi]
.text:00401544                 mov     edx, [edi+4]
.text:00401547                 mov     esi, ebx
.text:00401549                 xor     eax, ecx
.text:0040154B                 xor     esi, edx
.text:0040154D                 or      esi, eax
.text:0040154F                 jnz     short loc_40156D
.text:00401551                 mov     ebx, [ebp+var_84]
.text:00401557                 mov     ecx, [ebp+var_88]
.text:0040155D                 mov     eax, [edi+8]
.text:00401560                 mov     edx, [edi+0Ch]
.text:00401563                 mov     esi, ebx
.text:00401565                 xor     eax, ecx
.text:00401567                 xor     esi, edx
.text:00401569                 or      esi, eax
.text:0040156B                 jz      short loc_401598
.text:0040156D
.text:0040156D loc_40156D:                             ; CODE XREF: sub_401380+1CF↑j
.text:0040156D                 mov     ecx, [ebp+var_A0]
.text:00401573                 lea     esi, [ebp+var_98]
.text:00401579                 mov     eax, [ebp+var_9C]
.text:0040157F                 mov     [esp+0C8h+Category], esi
.text:00401582                 mov     [esp+0C8h+Size], ecx
.text:00401586                 inc     ecx
.text:00401587                 mov     [ebp+var_A0], ecx
.text:0040158D                 mov     [esp+0C8h+Locale], eax
.text:00401591                 call    sub_4019A0
.text:00401596                 jmp     short loc_401536
.text:00401598 ; ---------------------------------------------------------------------------
.text:00401598
.text:00401598 loc_401598:                             ; CODE XREF: sub_401380+1EB↑j
.text:00401598                 mov     ecx, [ebp+var_9C]
.text:0040159E                 mov     edx, [ecx+8]
.text:004015A1                 cmp     byte ptr [edx], 0
.text:004015A4                 jnz     short loc_4015E6
.text:004015A6                 mov     ebx, [ecx]
.text:004015A8                 mov     edi, edx
.text:004015AA                 sub     edi, ebx
.text:004015AC                 cmp     edi, 2
.text:004015AF                 jb      short loc_40160C
.text:004015B1
.text:004015B1 loc_4015B1:                             ; CODE XREF: sub_401380+2EF↓j
.text:004015B1                 mov     ebx, [ebp+var_9C]
.text:004015B7                 lea     edi, [edx-2]
.text:004015BA                 mov     [ebx+8], edi
.text:004015BD                 mov     byte ptr [edx-2], 2Fh ; '/'
.text:004015C1                 mov     edx, [ebx+8]
.text:004015C4                 mov     [esp+0C8h+Size], 1 ; Size
.text:004015CC                 mov     [esp+0C8h+Locale], offset Src ; "/"
.text:004015D4                 inc     edx
.text:004015D5                 mov     [esp+0C8h+Category], edx ; void *
.text:004015D8                 call    memcpy
.text:004015DD                 mov     esi, [ebp+var_9C]
.text:004015E3                 mov     edx, [esi+8]
.text:004015E6
.text:004015E6 loc_4015E6:                             ; CODE XREF: sub_401380+224↑j
.text:004015E6                 mov     [esp+0C8h+Category], edx ; Buffer
.text:004015E9                 call    puts
.text:004015EE                 mov     esi, [ebp+var_9C]
.text:004015F4                 mov     ecx, [esi]
.text:004015F6                 mov     [esp+0C8h+Category], ecx ; Block
.text:004015F9                 call    free
.text:004015FE                 mov     eax, [ebp+var_9C]
.text:00401604                 mov     [esp+0C8h+Category], eax
.text:00401607                 jmp     loc_4014A8
.text:0040160C ; ---------------------------------------------------------------------------
.text:0040160C
.text:0040160C loc_40160C:                             ; CODE XREF: sub_401380+22F↑j
.text:0040160C                 mov     ebx, [ecx+4]
.text:0040160F                 mov     [esp+0C8h+Category], 2
.text:00401616                 add     ebx, 2
.text:00401619                 mov     [esp+0C8h+Locale], ebx
.text:0040161D                 add     ebx, ebx
.text:0040161F                 call    sub_4033A0
.text:00401624                 mov     ecx, [ebp+var_9C]
.text:0040162A                 mov     esi, eax
.text:0040162C                 lea     eax, [ebx+eax]
.text:0040162F                 mov     edx, [ecx+4]
.text:00401632                 mov     ecx, [ebp+var_9C]
.text:00401638                 sub     edx, edi
.text:0040163A                 add     edi, [ecx]
.text:0040163C                 sub     eax, edx
.text:0040163E                 mov     [ecx+8], eax
.text:00401641                 mov     [esp+0C8h+Size], edx ; Size
.text:00401645                 mov     [esp+0C8h+Category], eax ; void *
.text:00401648                 mov     [esp+0C8h+Locale], edi ; Src
.text:0040164C                 call    memcpy
.text:00401651                 mov     eax, [ebp+var_9C]
.text:00401657                 mov     ecx, [eax]
.text:00401659                 mov     [esp+0C8h+Category], ecx ; Block
.text:0040165C                 call    free
.text:00401661                 mov     edi, [ebp+var_9C]
.text:00401667                 mov     edx, [edi+8]
.text:0040166A                 mov     [edi], esi
.text:0040166C                 mov     [edi+4], ebx
.text:0040166F                 jmp     loc_4015B1
.text:00401674 ; ---------------------------------------------------------------------------
.text:00401674
.text:00401674 loc_401674:                             ; CODE XREF: sub_401380+1B0↑j
.text:00401674                 mov     [esp+0C8h+Category], offset asc_401327 ; "."
.text:0040167B                 call    sub_403370
.text:00401680                 mov     [esp+0C8h+Category], offset aFailedToStatS ; "failed to stat %s"
.text:00401687                 mov     esi, eax
.text:00401689                 call    ds:libintl_gettext
.text:0040168F                 mov     ebx, eax
.text:00401691                 call    _errno
.text:00401696                 mov     dword ptr [esp+0C8h+var_BC], esi ; char
.text:0040169A                 mov     [esp+0C8h+Size], ebx ; char *
.text:0040169E                 mov     ebx, [eax]
.text:004016A0                 mov     [esp+0C8h+Category], 1 ; Code
.text:004016A7                 mov     [esp+0C8h+Locale], ebx ; ErrorMessage
.text:004016AB                 call    sub_404FC0
.text:004016B0                 jmp     loc_401536
.text:004016B5 ; ---------------------------------------------------------------------------
.text:004016B5
.text:004016B5 loc_4016B5:                             ; CODE XREF: sub_401380+192↑j
.text:004016B5                 mov     [esp+0C8h+Category], offset Src ; "/"
.text:004016BC                 call    sub_403370
.text:004016C1                 mov     [esp+0C8h+Category], offset aFailedToGetAtt ; "failed to get attributes of %s"
.text:004016C8                 mov     esi, eax
.text:004016CA                 call    ds:libintl_gettext
.text:004016D0                 mov     ebx, eax
.text:004016D2                 call    _errno
.text:004016D7                 mov     dword ptr [esp+0C8h+var_BC], esi ; char
.text:004016DB                 mov     [esp+0C8h+Size], ebx ; char *
.text:004016DF                 mov     edx, [eax]
.text:004016E1                 mov     [esp+0C8h+Category], 1 ; Code
.text:004016E8                 mov     [esp+0C8h+Locale], edx ; ErrorMessage
.text:004016EC                 call    sub_404FC0
.text:004016F1                 jmp     loc_401518
.text:004016F6 ; ---------------------------------------------------------------------------
.text:004016F6
.text:004016F6 loc_4016F6:                             ; CODE XREF: sub_401380+10C↑j
.text:004016F6                 mov     [esp+0C8h+Category], offset aIgnoringNonOpt ; "ignoring non-option arguments"
.text:004016FD                 call    ds:libintl_gettext
.text:00401703                 mov     [esp+0C8h+Locale], 0 ; ErrorMessage
.text:0040170B                 mov     [esp+0C8h+Category], 0 ; Code
.text:00401712                 mov     [esp+0C8h+Size], eax ; char *
.text:00401716                 call    sub_404FC0
.text:0040171B                 jmp     loc_401492
.text:0040171B sub_401380      endp
.text:0040171B
.text:0040171B ; ---------------------------------------------------------------------------
.text:00401720 aUsageSOption   db 'Usage: %s [OPTION]',0Ah,0
.text:00401720                                         ; DATA XREF: sub_401830:loc_401873↓o
.text:00401734                 align 10h
.text:00401740 aPrintTheFullFi db 'Print the full filename of the current working directory.',0Ah
.text:00401740                                         ; DATA XREF: sub_401830+62↓o
.text:00401740                 db 0Ah,0
.text:0040177C                 align 10h
.text:00401780 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401780                                         ; DATA XREF: sub_401830+84↓o
.text:004017AD                 align 20h
.text:004017C0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004017C0                                         ; DATA XREF: sub_401830+A6↓o
.text:004017F6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401830+C8↓o
.text:004017F6                 db 'Report bugs to <%s>.',0Ah,0
.text:0040180D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040180D                                         ; DATA XREF: sub_401830+D5↓o
.text:00401823                 align 10h
.text:00401830
.text:00401830 ; =============== S U B R O U T I N E =======================================
.text:00401830
.text:00401830 ; Attributes: noreturn
.text:00401830
.text:00401830 ; void __cdecl __noreturn sub_401830(int Code)
.text:00401830 sub_401830      proc near               ; DATA XREF: sub_401380+7B↑o
.text:00401830
.text:00401830 Stream          = dword ptr -1Ch
.text:00401830 Format          = dword ptr -18h
.text:00401830 var_14          = dword ptr -14h
.text:00401830 var_4           = dword ptr -4
.text:00401830 Code            = dword ptr  4
.text:00401830
.text:00401830                 sub     esp, 1Ch
.text:00401833                 mov     [esp+1Ch+var_4], ebx
.text:00401837                 mov     ebx, [esp+1Ch+Code]
.text:0040183B                 test    ebx, ebx
.text:0040183D                 jz      short loc_401873
.text:0040183F                 mov     [esp+1Ch+Stream], (offset stru_4012EE._file+2)
.text:00401846                 call    ds:libintl_gettext
.text:0040184C                 mov     edx, ds:_iob
.text:00401852                 mov     ecx, ds:dword_40F4B0
.text:00401858                 add     edx, 40h ; '@'
.text:0040185B                 mov     [esp+1Ch+var_14], ecx
.text:0040185F                 mov     [esp+1Ch+Format], eax ; Format
.text:00401863                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401866                 call    fprintf
.text:0040186B
.text:0040186B loc_40186B:                             ; CODE XREF: sub_401830+E5↓j
.text:0040186B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040186E                 call    exit
.text:00401873 ; ---------------------------------------------------------------------------
.text:00401873
.text:00401873 loc_401873:                             ; CODE XREF: sub_401830+D↑j
.text:00401873                 mov     [esp+1Ch+Stream], offset aUsageSOption ; "Usage: %s [OPTION]\n"
.text:0040187A                 call    ds:libintl_gettext
.text:00401880                 mov     ecx, ds:dword_40F4B0
.text:00401886                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401889                 mov     [esp+1Ch+Format], ecx
.text:0040188D                 call    printf
.text:00401892                 mov     [esp+1Ch+Stream], offset aPrintTheFullFi ; "Print the full filename of the current "...
.text:00401899                 call    ds:libintl_gettext
.text:0040189F                 mov     ecx, ds:_iob
.text:004018A5                 add     ecx, 20h ; ' '
.text:004018A8                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004018AC                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004018AF                 call    fputs
.text:004018B4                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004018BB                 call    ds:libintl_gettext
.text:004018C1                 mov     ecx, ds:_iob
.text:004018C7                 add     ecx, 20h ; ' '
.text:004018CA                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004018CE                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004018D1                 call    fputs
.text:004018D6                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:004018DD                 call    ds:libintl_gettext
.text:004018E3                 mov     ecx, ds:_iob
.text:004018E9                 add     ecx, 20h ; ' '
.text:004018EC                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004018F0                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004018F3                 call    fputs
.text:004018F8                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004018FF                 call    ds:libintl_gettext
.text:00401905                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040190D                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401910                 call    printf
.text:00401915                 jmp     loc_40186B
.text:00401915 sub_401830      endp
.text:00401915
.text:00401915 ; ---------------------------------------------------------------------------
.text:0040191A ; const CHAR word_40191A[]
.text:0040191A word_40191A     dw 2E2Eh                ; DATA XREF: sub_4019A0+A↓o
.text:0040191A                                         ; sub_4019A0:loc_401E52↓o
.text:0040191C                 align 10h
.text:00401920 aCouldnTFindDir db 'couldn',27h,'t find directory entry in %s with matching i-node',0
.text:00401920                                         ; DATA XREF: sub_4019A0+24B↓o
.text:00401959 aReadingDirecto db 'reading directory %s',0
.text:00401959                                         ; DATA XREF: sub_4019A0+2C2↓o
.text:0040196E aFailedToChdirT db 'failed to chdir to %s',0
.text:0040196E                                         ; DATA XREF: sub_4019A0+47D↓o
.text:00401984 aCannotOpenDire db 'cannot open directory %s',0
.text:00401984                                         ; DATA XREF: sub_4019A0+509↓o
.text:0040199D                 align 10h
.text:004019A0
.text:004019A0 ; =============== S U B R O U T I N E =======================================
.text:004019A0
.text:004019A0
.text:004019A0 sub_4019A0      proc near               ; CODE XREF: sub_401380+211↑p
.text:004019A0
.text:004019A0 Block           = dword ptr -11Ch
.text:004019A0 Src             = dword ptr -118h
.text:004019A0 Size            = dword ptr -114h
.text:004019A0 var_110         = byte ptr -110h
.text:004019A0 var_108         = dword ptr -108h
.text:004019A0 var_104         = dword ptr -104h
.text:004019A0 var_FE          = byte ptr -0FEh
.text:004019A0 var_FD          = byte ptr -0FDh
.text:004019A0 var_FC          = byte ptr -0FCh
.text:004019A0 var_F4          = dword ptr -0F4h
.text:004019A0 var_F0          = dword ptr -0F0h
.text:004019A0 var_EC          = dword ptr -0ECh
.text:004019A0 var_E8          = dword ptr -0E8h
.text:004019A0 var_8C          = dword ptr -8Ch
.text:004019A0 var_7C          = dword ptr -7Ch
.text:004019A0 var_78          = dword ptr -78h
.text:004019A0 arg_0           = dword ptr  4
.text:004019A0 arg_4           = dword ptr  8
.text:004019A0 arg_8           = dword ptr  0Ch
.text:004019A0
.text:004019A0                 push    ebp
.text:004019A1                 push    edi
.text:004019A2                 push    esi
.text:004019A3                 push    ebx
.text:004019A4                 sub     esp, 10Ch
.text:004019AA                 mov     [esp+11Ch+Block], offset word_40191A ; LPCSTR
.text:004019B1                 call    sub_408A10
.text:004019B6                 test    eax, eax
.text:004019B8                 mov     ebp, eax
.text:004019BA                 jz      loc_401E63
.text:004019C0
.text:004019C0 loc_4019C0:                             ; CODE XREF: sub_4019A0+539↓j
.text:004019C0                 mov     edi, [ebp+0]
.text:004019C3                 test    edi, edi
.text:004019C5                 js      loc_401E52
.text:004019CB                 mov     [esp+11Ch+Block], edi
.text:004019CE                 call    sub_403320
.text:004019D3
.text:004019D3 loc_4019D3:                             ; CODE XREF: sub_4019A0+4BE↓j
.text:004019D3                 test    eax, eax
.text:004019D5                 js      loc_401DD7
.text:004019DB
.text:004019DB loc_4019DB:                             ; CODE XREF: sub_4019A0+4AD↓j
.text:004019DB                 test    edi, edi
.text:004019DD                 js      loc_401DBB
.text:004019E3                 mov     [esp+11Ch+Block], edi
.text:004019E6                 lea     esi, [esp+11Ch+var_8C]
.text:004019ED                 mov     [esp+11Ch+Src], esi
.text:004019F1                 call    sub_405260
.text:004019F6
.text:004019F6 loc_4019F6:                             ; CODE XREF: sub_4019A0+432↓j
.text:004019F6                 test    eax, eax
.text:004019F8                 js      loc_401D40
.text:004019FE
.text:004019FE loc_4019FE:                             ; CODE XREF: sub_4019A0+416↓j
.text:004019FE                 mov     [esp+11Ch+var_FE], 0
.text:00401A03                 mov     ecx, [esp+11Ch+arg_0]
.text:00401A0A                 mov     edx, [esp+11Ch+var_7C]
.text:00401A11                 mov     edi, [esp+11Ch+var_78]
.text:00401A18                 mov     ebx, [ecx+10h]
.text:00401A1B                 mov     eax, [ecx+14h]
.text:00401A1E                 xor     edx, ebx
.text:00401A20                 xor     edi, eax
.text:00401A22                 or      edx, edi
.text:00401A24                 setnz   [esp+11Ch+var_FD]
.text:00401A29
.text:00401A29 loc_401A29:                             ; CODE XREF: sub_4019A0+F6↓j
.text:00401A29                                         ; sub_4019A0+115↓j ...
.text:00401A29                 call    _errno
.text:00401A2E                 mov     dword ptr [eax], 0
.text:00401A34                 lea     esi, [esi+0]
.text:00401A3A                 lea     edi, [edi+0]
.text:00401A40
.text:00401A40 loc_401A40:                             ; CODE XREF: sub_4019A0+BC↓j
.text:00401A40                                         ; sub_4019A0+CD↓j
.text:00401A40                 mov     [esp+11Ch+Block], ebp
.text:00401A43                 call    sub_4079B0
.text:00401A48                 test    eax, eax
.text:00401A4A                 mov     edi, eax
.text:00401A4C                 jz      loc_401D16
.text:00401A52                 cmp     byte ptr [eax+0Ch], 2Eh ; '.'
.text:00401A56                 jnz     short loc_401A6F
.text:00401A58                 cmp     byte ptr [eax+0Dh], 0
.text:00401A5C                 jz      short loc_401A40
.text:00401A5E                 mov     esi, [eax+0Ch]
.text:00401A61                 and     esi, 0FFFF00h
.text:00401A67                 cmp     esi, 2E00h
.text:00401A6D                 jz      short loc_401A40
.text:00401A6F
.text:00401A6F loc_401A6F:                             ; CODE XREF: sub_4019A0+B6↑j
.text:00401A6F                 mov     esi, [edi+4]
.text:00401A72                 mov     ebx, [edi]
.text:00401A74                 mov     ecx, esi
.text:00401A76                 or      ecx, ebx
.text:00401A78                 jz      short loc_401A81
.text:00401A7A                 cmp     [esp+11Ch+var_FD], 0
.text:00401A7F                 jz      short loc_401AA0
.text:00401A81
.text:00401A81 loc_401A81:                             ; CODE XREF: sub_4019A0+D8↑j
.text:00401A81                 lea     esi, [esp+11Ch+var_FC]
.text:00401A85                 lea     ebx, [edi+0Ch]
.text:00401A88                 mov     [esp+11Ch+Src], esi
.text:00401A8C                 mov     [esp+11Ch+Block], ebx
.text:00401A8F                 call    sub_4070B0
.text:00401A94                 test    eax, eax
.text:00401A96                 js      short loc_401A29
.text:00401A98                 mov     ebx, [esp+11Ch+var_F4]
.text:00401A9C                 mov     esi, [esp+11Ch+var_F0]
.text:00401AA0
.text:00401AA0 loc_401AA0:                             ; CODE XREF: sub_4019A0+DF↑j
.text:00401AA0                 mov     ecx, [esp+11Ch+arg_0]
.text:00401AA7                 mov     eax, [ecx+8]
.text:00401AAA                 mov     edx, [ecx+0Ch]
.text:00401AAD                 mov     ecx, esi
.text:00401AAF                 xor     eax, ebx
.text:00401AB1                 xor     ecx, edx
.text:00401AB3                 or      ecx, eax
.text:00401AB5                 jnz     loc_401A29
.text:00401ABB                 cmp     [esp+11Ch+var_FD], 0
.text:00401AC0                 jz      short loc_401AE5
.text:00401AC2                 mov     esi, [esp+11Ch+arg_0]
.text:00401AC9                 mov     ebx, [esp+11Ch+var_E8]
.text:00401ACD                 mov     ecx, [esp+11Ch+var_EC]
.text:00401AD1                 mov     eax, [esi+10h]
.text:00401AD4                 mov     edx, [esi+14h]
.text:00401AD7                 mov     esi, ebx
.text:00401AD9                 xor     eax, ecx
.text:00401ADB                 xor     esi, edx
.text:00401ADD                 or      esi, eax
.text:00401ADF                 jnz     loc_401A29
.text:00401AE5
.text:00401AE5 loc_401AE5:                             ; CODE XREF: sub_4019A0+120↑j
.text:00401AE5                 add     edi, 0Ch
.text:00401AE8                 mov     [esp+11Ch+var_104], edi
.text:00401AEC
.text:00401AEC loc_401AEC:                             ; CODE XREF: sub_4019A0+161↓j
.text:00401AEC                 mov     ecx, [edi]
.text:00401AEE                 add     edi, 4
.text:00401AF1                 lea     edx, [ecx-1010101h]
.text:00401AF7                 not     ecx
.text:00401AF9                 and     edx, ecx
.text:00401AFB                 and     edx, 80808080h
.text:00401B01                 jz      short loc_401AEC
.text:00401B03                 test    edx, 8080h
.text:00401B09                 jnz     short loc_401B11
.text:00401B0B                 shr     edx, 10h
.text:00401B0E                 add     edi, 2
.text:00401B11
.text:00401B11 loc_401B11:                             ; CODE XREF: sub_4019A0+169↑j
.text:00401B11                 mov     ebx, [esp+11Ch+arg_4]
.text:00401B18                 add     dl, dl
.text:00401B1A                 mov     eax, [esp+11Ch+var_104]
.text:00401B1E                 sbb     edi, 3
.text:00401B21                 mov     edx, [ebx+8]
.text:00401B24                 mov     ecx, [ebx]
.text:00401B26                 sub     edi, eax
.text:00401B28                 mov     esi, edx
.text:00401B2A                 lea     ebx, [edi+1]
.text:00401B2D                 sub     esi, ecx
.text:00401B2F                 cmp     esi, ebx
.text:00401B31                 mov     [esp+11Ch+var_108], esi
.text:00401B35                 jb      loc_401C97
.text:00401B3B
.text:00401B3B loc_401B3B:                             ; CODE XREF: sub_4019A0+371↓j
.text:00401B3B                 mov     esi, [esp+11Ch+arg_4]
.text:00401B42                 mov     ecx, edx
.text:00401B44                 sub     ecx, edi
.text:00401B46                 lea     eax, [ecx-1]
.text:00401B49                 mov     [esi+8], eax
.text:00401B4C                 mov     byte ptr [ecx-1], 2Fh ; '/'
.text:00401B50                 mov     ebx, [esi+8]
.text:00401B53                 mov     [esp+11Ch+Size], edi ; Size
.text:00401B57                 mov     edi, [esp+11Ch+var_104]
.text:00401B5B                 inc     ebx
.text:00401B5C                 mov     [esp+11Ch+Block], ebx ; void *
.text:00401B5F                 mov     [esp+11Ch+Src], edi ; Src
.text:00401B63                 call    memcpy
.text:00401B68                 mov     [esp+11Ch+var_FE], 1
.text:00401B6D
.text:00401B6D loc_401B6D:                             ; CODE XREF: sub_4019A0+37F↓j
.text:00401B6D                 test    ebp, ebp
.text:00401B6F                 jz      loc_401C1B
.text:00401B75                 mov     [esp+11Ch+Block], ebp ; void *
.text:00401B78                 call    sub_408950
.text:00401B7D
.text:00401B7D loc_401B7D:                             ; CODE XREF: sub_4019A0+2F2↓j
.text:00401B7D                 cmp     [esp+11Ch+var_FE], 0
.text:00401B82                 jz      short loc_401BA5
.text:00401B84
.text:00401B84 loc_401B84:                             ; CODE XREF: sub_4019A0+276↓j
.text:00401B84                 cld
.text:00401B85                 mov     edi, [esp+11Ch+arg_0]
.text:00401B8C                 mov     ecx, 1Ah
.text:00401B91                 lea     esi, [esp+11Ch+var_8C]
.text:00401B98                 rep movsd
.text:00401B9A                 add     esp, 10Ch
.text:00401BA0                 pop     ebx
.text:00401BA1                 pop     esi
.text:00401BA2                 pop     edi
.text:00401BA3                 pop     ebp
.text:00401BA4                 retn
.text:00401BA5 ; ---------------------------------------------------------------------------
.text:00401BA5
.text:00401BA5 loc_401BA5:                             ; CODE XREF: sub_4019A0+1E2↑j
.text:00401BA5                 mov     [esp+11Ch+Block], 3
.text:00401BAC                 mov     esi, [esp+11Ch+arg_8]
.text:00401BB3                 mov     [esp+11Ch+Src], esi
.text:00401BB7                 call    sub_4033A0
.text:00401BBC                 xor     ecx, ecx
.text:00401BBE                 mov     edx, eax
.text:00401BC0                 cmp     ecx, [esp+11Ch+arg_8]
.text:00401BC7                 jnb     short loc_401BDF
.text:00401BC9
.text:00401BC9 loc_401BC9:                             ; CODE XREF: sub_4019A0+23D↓j
.text:00401BC9                 mov     word ptr [edx], 2E2Eh
.text:00401BCE                 inc     ecx
.text:00401BCF                 mov     byte ptr [edx+2], 2Fh ; '/'
.text:00401BD3                 add     edx, 3
.text:00401BD6                 cmp     ecx, [esp+11Ch+arg_8]
.text:00401BDD                 jb      short loc_401BC9
.text:00401BDF
.text:00401BDF loc_401BDF:                             ; CODE XREF: sub_4019A0+227↑j
.text:00401BDF                 mov     byte ptr [edx-1], 0
.text:00401BE3                 mov     [esp+11Ch+Block], eax ; char *
.text:00401BE6                 call    sub_403370
.text:00401BEB                 mov     [esp+11Ch+Block], offset aCouldnTFindDir ; "couldn't find directory entry in %s wit"...
.text:00401BF2                 mov     ebp, eax
.text:00401BF4                 call    ds:libintl_gettext
.text:00401BFA                 mov     dword ptr [esp+11Ch+var_110], ebp ; char
.text:00401BFE                 mov     [esp+11Ch+Src], 0 ; ErrorMessage
.text:00401C06                 mov     [esp+11Ch+Block], 1 ; Code
.text:00401C0D                 mov     [esp+11Ch+Size], eax ; char *
.text:00401C11                 call    sub_404FC0
.text:00401C16                 jmp     loc_401B84
.text:00401C1B ; ---------------------------------------------------------------------------
.text:00401C1B
.text:00401C1B loc_401C1B:                             ; CODE XREF: sub_4019A0+1CF↑j
.text:00401C1B                                         ; sub_4019A0+39B↓j
.text:00401C1B                 mov     [esp+11Ch+Block], 3
.text:00401C22                 mov     ebp, [esp+11Ch+arg_8]
.text:00401C29                 mov     [esp+11Ch+Src], ebp
.text:00401C2D                 call    sub_4033A0
.text:00401C32                 xor     ecx, ecx
.text:00401C34                 mov     edx, eax
.text:00401C36                 cmp     ecx, [esp+11Ch+arg_8]
.text:00401C3D                 jnb     short loc_401C56
.text:00401C3F                 nop
.text:00401C40
.text:00401C40 loc_401C40:                             ; CODE XREF: sub_4019A0+2B4↓j
.text:00401C40                 mov     word ptr [edx], 2E2Eh
.text:00401C45                 inc     ecx
.text:00401C46                 mov     byte ptr [edx+2], 2Fh ; '/'
.text:00401C4A                 add     edx, 3
.text:00401C4D                 cmp     ecx, [esp+11Ch+arg_8]
.text:00401C54                 jb      short loc_401C40
.text:00401C56
.text:00401C56 loc_401C56:                             ; CODE XREF: sub_4019A0+29D↑j
.text:00401C56                 mov     byte ptr [edx-1], 0
.text:00401C5A                 mov     [esp+11Ch+Block], eax ; char *
.text:00401C5D                 call    sub_403370
.text:00401C62                 mov     [esp+11Ch+Block], offset aReadingDirecto ; "reading directory %s"
.text:00401C69                 mov     ebx, eax
.text:00401C6B                 call    ds:libintl_gettext
.text:00401C71                 mov     edi, eax
.text:00401C73                 call    _errno
.text:00401C78                 mov     dword ptr [esp+11Ch+var_110], ebx ; char
.text:00401C7C                 mov     [esp+11Ch+Size], edi ; char *
.text:00401C80                 mov     edx, [eax]
.text:00401C82                 mov     [esp+11Ch+Block], 1 ; Code
.text:00401C89                 mov     [esp+11Ch+Src], edx ; ErrorMessage
.text:00401C8D                 call    sub_404FC0
.text:00401C92                 jmp     loc_401B7D
.text:00401C97 ; ---------------------------------------------------------------------------
.text:00401C97
.text:00401C97 loc_401C97:                             ; CODE XREF: sub_4019A0+195↑j
.text:00401C97                 mov     edx, [esp+11Ch+arg_4]
.text:00401C9E                 mov     ebx, [edx+4]
.text:00401CA1                 mov     [esp+11Ch+Block], 2
.text:00401CA8                 add     ebx, edi
.text:00401CAA                 inc     ebx
.text:00401CAB                 mov     [esp+11Ch+Src], ebx
.text:00401CAF                 add     ebx, ebx
.text:00401CB1                 call    sub_4033A0
.text:00401CB6                 mov     ecx, [esp+11Ch+arg_4]
.text:00401CBD                 mov     esi, eax
.text:00401CBF                 lea     eax, [ebx+eax]
.text:00401CC2                 mov     edx, [ecx+4]
.text:00401CC5                 mov     ecx, [esp+11Ch+var_108]
.text:00401CC9                 sub     edx, ecx
.text:00401CCB                 mov     ecx, [esp+11Ch+arg_4]
.text:00401CD2                 sub     eax, edx
.text:00401CD4                 mov     [ecx+8], eax
.text:00401CD7                 mov     ecx, [ecx]
.text:00401CD9                 add     [esp+11Ch+var_108], ecx
.text:00401CDD                 mov     [esp+11Ch+Size], edx ; Size
.text:00401CE1                 mov     [esp+11Ch+Block], eax ; void *
.text:00401CE4                 mov     ecx, [esp+11Ch+var_108]
.text:00401CE8                 mov     [esp+11Ch+Src], ecx ; Src
.text:00401CEC                 call    memcpy
.text:00401CF1                 mov     eax, [esp+11Ch+arg_4]
.text:00401CF8                 mov     edx, [eax]
.text:00401CFA                 mov     [esp+11Ch+Block], edx ; Block
.text:00401CFD                 call    free
.text:00401D02                 mov     ecx, [esp+11Ch+arg_4]
.text:00401D09                 mov     edx, [ecx+8]
.text:00401D0C                 mov     [ecx], esi
.text:00401D0E                 mov     [ecx+4], ebx
.text:00401D11                 jmp     loc_401B3B
.text:00401D16 ; ---------------------------------------------------------------------------
.text:00401D16
.text:00401D16 loc_401D16:                             ; CODE XREF: sub_4019A0+AC↑j
.text:00401D16                 call    _errno
.text:00401D1B                 mov     edx, [eax]
.text:00401D1D                 test    edx, edx
.text:00401D1F                 jz      loc_401B6D
.text:00401D25                 call    _errno
.text:00401D2A                 mov     edi, [eax]
.text:00401D2C                 mov     [esp+11Ch+Block], ebp ; void *
.text:00401D2F                 call    sub_408950
.text:00401D34                 call    _errno
.text:00401D39                 mov     [eax], edi
.text:00401D3B                 jmp     loc_401C1B
.text:00401D40 ; ---------------------------------------------------------------------------
.text:00401D40
.text:00401D40 loc_401D40:                             ; CODE XREF: sub_4019A0+58↑j
.text:00401D40                 mov     [esp+11Ch+Block], 3
.text:00401D47                 mov     edi, [esp+11Ch+arg_8]
.text:00401D4E                 mov     [esp+11Ch+Src], edi
.text:00401D52                 call    sub_4033A0
.text:00401D57                 xor     ecx, ecx
.text:00401D59                 mov     edx, eax
.text:00401D5B                 cmp     ecx, [esp+11Ch+arg_8]
.text:00401D62                 jnb     short loc_401D7A
.text:00401D64
.text:00401D64 loc_401D64:                             ; CODE XREF: sub_4019A0+3D8↓j
.text:00401D64                 mov     word ptr [edx], 2E2Eh
.text:00401D69                 inc     ecx
.text:00401D6A                 mov     byte ptr [edx+2], 2Fh ; '/'
.text:00401D6E                 add     edx, 3
.text:00401D71                 cmp     ecx, [esp+11Ch+arg_8]
.text:00401D78                 jb      short loc_401D64
.text:00401D7A
.text:00401D7A loc_401D7A:                             ; CODE XREF: sub_4019A0+3C2↑j
.text:00401D7A                 mov     byte ptr [edx-1], 0
.text:00401D7E                 mov     [esp+11Ch+Block], eax ; char *
.text:00401D81                 call    sub_403370
.text:00401D86                 mov     [esp+11Ch+Block], offset aFailedToStatS ; "failed to stat %s"
.text:00401D8D                 mov     ebx, eax
.text:00401D8F                 call    ds:libintl_gettext
.text:00401D95                 mov     edi, eax
.text:00401D97                 call    _errno
.text:00401D9C                 mov     dword ptr [esp+11Ch+var_110], ebx ; char
.text:00401DA0                 mov     [esp+11Ch+Size], edi ; char *
.text:00401DA4                 mov     ebx, [eax]
.text:00401DA6                 mov     [esp+11Ch+Block], 1 ; Code
.text:00401DAD                 mov     [esp+11Ch+Src], ebx ; ErrorMessage
.text:00401DB1                 call    sub_404FC0
.text:00401DB6                 jmp     loc_4019FE
.text:00401DBB ; ---------------------------------------------------------------------------
.text:00401DBB
.text:00401DBB loc_401DBB:                             ; CODE XREF: sub_4019A0+3D↑j
.text:00401DBB                 mov     [esp+11Ch+Block], offset asc_401327 ; "."
.text:00401DC2                 lea     edx, [esp+11Ch+var_8C]
.text:00401DC9                 mov     [esp+11Ch+Src], edx ; int
.text:00401DCD                 call    sub_407FE0
.text:00401DD2                 jmp     loc_4019F6
.text:00401DD7 ; ---------------------------------------------------------------------------
.text:00401DD7
.text:00401DD7 loc_401DD7:                             ; CODE XREF: sub_4019A0+35↑j
.text:00401DD7                 mov     [esp+11Ch+Block], 3
.text:00401DDE                 mov     eax, [esp+11Ch+arg_8]
.text:00401DE5                 mov     [esp+11Ch+Src], eax
.text:00401DE9                 call    sub_4033A0
.text:00401DEE                 xor     ecx, ecx
.text:00401DF0                 mov     edx, eax
.text:00401DF2                 cmp     ecx, [esp+11Ch+arg_8]
.text:00401DF9                 jnb     short loc_401E11
.text:00401DFB
.text:00401DFB loc_401DFB:                             ; CODE XREF: sub_4019A0+46F↓j
.text:00401DFB                 mov     word ptr [edx], 2E2Eh
.text:00401E00                 inc     ecx
.text:00401E01                 mov     byte ptr [edx+2], 2Fh ; '/'
.text:00401E05                 add     edx, 3
.text:00401E08                 cmp     ecx, [esp+11Ch+arg_8]
.text:00401E0F                 jb      short loc_401DFB
.text:00401E11
.text:00401E11 loc_401E11:                             ; CODE XREF: sub_4019A0+459↑j
.text:00401E11                 mov     byte ptr [edx-1], 0
.text:00401E15                 mov     [esp+11Ch+Block], eax ; char *
.text:00401E18                 call    sub_403370
.text:00401E1D                 mov     [esp+11Ch+Block], offset aFailedToChdirT ; "failed to chdir to %s"
.text:00401E24                 mov     esi, eax
.text:00401E26                 call    ds:libintl_gettext
.text:00401E2C                 mov     ebx, eax
.text:00401E2E                 call    _errno
.text:00401E33                 mov     dword ptr [esp+11Ch+var_110], esi ; char
.text:00401E37                 mov     [esp+11Ch+Size], ebx ; char *
.text:00401E3B                 mov     ecx, [eax]
.text:00401E3D                 mov     [esp+11Ch+Block], 1 ; Code
.text:00401E44                 mov     [esp+11Ch+Src], ecx ; ErrorMessage
.text:00401E48                 call    sub_404FC0
.text:00401E4D                 jmp     loc_4019DB
.text:00401E52 ; ---------------------------------------------------------------------------
.text:00401E52
.text:00401E52 loc_401E52:                             ; CODE XREF: sub_4019A0+25↑j
.text:00401E52                 mov     [esp+11Ch+Block], offset word_40191A ; LPCSTR
.text:00401E59                 call    sub_4089B0
.text:00401E5E                 jmp     loc_4019D3
.text:00401E63 ; ---------------------------------------------------------------------------
.text:00401E63
.text:00401E63 loc_401E63:                             ; CODE XREF: sub_4019A0+1A↑j
.text:00401E63                 mov     [esp+11Ch+Block], 3
.text:00401E6A                 mov     edx, [esp+11Ch+arg_8]
.text:00401E71                 mov     [esp+11Ch+Src], edx
.text:00401E75                 call    sub_4033A0
.text:00401E7A                 xor     ecx, ecx
.text:00401E7C                 mov     edx, eax
.text:00401E7E                 cmp     ebp, [esp+11Ch+arg_8]
.text:00401E85                 jnb     short loc_401E9D
.text:00401E87
.text:00401E87 loc_401E87:                             ; CODE XREF: sub_4019A0+4FB↓j
.text:00401E87                 mov     word ptr [edx], 2E2Eh
.text:00401E8C                 inc     ecx
.text:00401E8D                 mov     byte ptr [edx+2], 2Fh ; '/'
.text:00401E91                 add     edx, 3
.text:00401E94                 cmp     ecx, [esp+11Ch+arg_8]
.text:00401E9B                 jb      short loc_401E87
.text:00401E9D
.text:00401E9D loc_401E9D:                             ; CODE XREF: sub_4019A0+4E5↑j
.text:00401E9D                 mov     byte ptr [edx-1], 0
.text:00401EA1                 mov     [esp+11Ch+Block], eax ; char *
.text:00401EA4                 call    sub_403370
.text:00401EA9                 mov     [esp+11Ch+Block], offset aCannotOpenDire ; "cannot open directory %s"
.text:00401EB0                 mov     ebx, eax
.text:00401EB2                 call    ds:libintl_gettext
.text:00401EB8                 mov     edi, eax
.text:00401EBA                 call    _errno
.text:00401EBF                 mov     dword ptr [esp+11Ch+var_110], ebx ; char
.text:00401EC3                 mov     [esp+11Ch+Size], edi ; char *
.text:00401EC7                 mov     edx, [eax]
.text:00401EC9                 mov     [esp+11Ch+Block], 1 ; Code
.text:00401ED0                 mov     [esp+11Ch+Src], edx ; ErrorMessage
.text:00401ED4                 call    sub_404FC0
.text:00401ED9                 jmp     loc_4019C0
.text:00401ED9 sub_4019A0      endp
.text:00401ED9
.text:00401ED9 ; ---------------------------------------------------------------------------
.text:00401EDE                 align 10h
.text:00401EE0 dword_401EE0    dd 0B48D002Fh, 26h, 27BC8D00h, 0
.text:00401EE0                                         ; DATA XREF: sub_401EF0+1C↓o
.text:00401EF0
.text:00401EF0 ; =============== S U B R O U T I N E =======================================
.text:00401EF0
.text:00401EF0
.text:00401EF0 sub_401EF0      proc near               ; CODE XREF: sub_401380+189↑p
.text:00401EF0
.text:00401EF0 var_8C          = dword ptr -8Ch
.text:00401EF0 var_88          = dword ptr -88h
.text:00401EF0 var_7C          = byte ptr -7Ch
.text:00401EF0 var_74          = dword ptr -74h
.text:00401EF0 var_70          = dword ptr -70h
.text:00401EF0 var_6C          = dword ptr -6Ch
.text:00401EF0 var_68          = dword ptr -68h
.text:00401EF0 var_4           = dword ptr -4
.text:00401EF0 arg_0           = dword ptr  4
.text:00401EF0
.text:00401EF0                 sub     esp, 8Ch
.text:00401EF6                 lea     edx, [esp+8Ch+var_7C]
.text:00401EFA                 mov     [esp+8Ch+var_4], ebx
.text:00401F01                 mov     ebx, [esp+8Ch+arg_0]
.text:00401F08                 mov     [esp+8Ch+var_88], edx
.text:00401F0C                 mov     [esp+8Ch+var_8C], offset dword_401EE0
.text:00401F13                 call    sub_4070B0
.text:00401F18                 xor     edx, edx
.text:00401F1A                 test    eax, eax
.text:00401F1C                 jnz     short loc_401F3B
.text:00401F1E                 mov     edx, [esp+8Ch+var_74]
.text:00401F22                 mov     ecx, [esp+8Ch+var_70]
.text:00401F26                 mov     [ebx], edx
.text:00401F28                 mov     [ebx+4], ecx
.text:00401F2B                 mov     edx, [esp+8Ch+var_6C]
.text:00401F2F                 mov     ecx, [esp+8Ch+var_68]
.text:00401F33                 mov     [ebx+8], edx
.text:00401F36                 mov     edx, ebx
.text:00401F38                 mov     [ebx+0Ch], ecx
.text:00401F3B
.text:00401F3B loc_401F3B:                             ; CODE XREF: sub_401EF0+2C↑j
.text:00401F3B                 mov     ebx, [esp+8Ch+var_4]
.text:00401F42                 mov     eax, edx
.text:00401F44                 add     esp, 8Ch
.text:00401F4A                 retn
.text:00401F4A sub_401EF0      endp
.text:00401F4A
.text:00401F4A ; ---------------------------------------------------------------------------
.text:00401F4B                 align 10h
.text:00401F50 dword_401F50    dd 90002D2Dh, 7 dup(90909090h)
.text:00401F50                                         ; DATA XREF: sub_4021A0+E4↓o
.text:00401F70 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401F70                                         ; DATA XREF: sub_4021A0+2FC↓o
.text:00401F9D                 db 13h dup(90h)
.text:00401FB0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401FB0                                         ; DATA XREF: sub_4021A0:loc_402502↓o
.text:00401FDD                 db 13h dup(90h)
.text:00401FF0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401FF0                                         ; DATA XREF: sub_4021A0:loc_4025A0↓o
.text:00401FF0                                         ; sub_4021A0:loc_402967↓o
.text:00402016                 db 1Ah dup(90h)
.text:00402030 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402030                                         ; DATA XREF: sub_4021A0+48E↓o
.text:00402050 dword_402050    dd 90909000h, 7 dup(90909090h)
.text:00402050                                         ; DATA XREF: sub_4021A0:loc_402671↓o
.text:00402070 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402070                                         ; DATA XREF: sub_4021A0:loc_40268A↓o
.text:00402090 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402090                                         ; DATA XREF: sub_4021A0:loc_40276F↓o
.text:00402090                                         ; sub_4021A0:loc_402A9C↓o
.text:004020B7                 db 19h dup(90h)
.text:004020D0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004020D0                                         ; DATA XREF: sub_4021A0:loc_4028E3↓o
.text:004020FE                 db 12h dup(90h)
.text:00402110 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402110                                         ; DATA XREF: sub_4021A0:loc_4029CF↓o
.text:00402131 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402131                                         ; DATA XREF: sub_4021A0+93F↓o
.text:0040214B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040214B                                         ; DATA XREF: sub_4021A0:loc_402B17↓o
.text:00402165 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402165                                         ; DATA XREF: sub_4021A0:loc_402B3E↓o
.text:00402183 ; const char VarName[]
.text:00402183 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4021A0:loc_402CF0↓o
.text:00402193                 align 10h
.text:004021A0
.text:004021A0 ; =============== S U B R O U T I N E =======================================
.text:004021A0
.text:004021A0
.text:004021A0 ; int __cdecl sub_4021A0(int, int, char *Str, int, int, int, int, int)
.text:004021A0 sub_4021A0      proc near               ; CODE XREF: sub_402D30+5A↓p
.text:004021A0                                         ; .text:00402E1A↓p ...
.text:004021A0
.text:004021A0 Str1            = dword ptr -5Ch
.text:004021A0 Str2            = dword ptr -58h
.text:004021A0 MaxCount        = dword ptr -54h
.text:004021A0 var_50          = dword ptr -50h
.text:004021A0 var_4C          = dword ptr -4Ch
.text:004021A0 var_3C          = dword ptr -3Ch
.text:004021A0 var_38          = dword ptr -38h
.text:004021A0 var_34          = dword ptr -34h
.text:004021A0 var_30          = dword ptr -30h
.text:004021A0 var_2C          = dword ptr -2Ch
.text:004021A0 var_28          = dword ptr -28h
.text:004021A0 var_24          = dword ptr -24h
.text:004021A0 var_20          = dword ptr -20h
.text:004021A0 var_1C          = dword ptr -1Ch
.text:004021A0 var_18          = dword ptr -18h
.text:004021A0 var_14          = dword ptr -14h
.text:004021A0 arg_0           = dword ptr  4
.text:004021A0 arg_4           = dword ptr  8
.text:004021A0 Str             = dword ptr  0Ch
.text:004021A0 arg_C           = dword ptr  10h
.text:004021A0 arg_10          = dword ptr  14h
.text:004021A0 arg_14          = dword ptr  18h
.text:004021A0 arg_18          = dword ptr  1Ch
.text:004021A0 arg_1C          = dword ptr  20h
.text:004021A0
.text:004021A0                 push    ebp
.text:004021A1                 mov     eax, 0FFFFFFFFh
.text:004021A6                 push    edi
.text:004021A7                 push    esi
.text:004021A8                 push    ebx
.text:004021A9                 sub     esp, 4Ch
.text:004021AC                 mov     esi, [esp+5Ch+Str]
.text:004021B0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004021B4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004021B7                 mov     ebx, [ebp+4]
.text:004021BA                 setz    dl
.text:004021BD                 movzx   ecx, dl
.text:004021C0                 dec     ecx
.text:004021C1                 and     ecx, ebx
.text:004021C3                 mov     [esp+5Ch+var_14], ecx
.text:004021C7                 mov     ecx, [esp+5Ch+arg_0]
.text:004021CB                 test    ecx, ecx
.text:004021CD                 jle     loc_4022F7
.text:004021D3                 mov     dword ptr [ebp+0Ch], 0
.text:004021DA                 mov     ebx, [ebp+0]
.text:004021DD                 test    ebx, ebx
.text:004021DF                 jz      loc_402D10
.text:004021E5                 mov     edi, [ebp+10h]
.text:004021E8                 test    edi, edi
.text:004021EA                 jnz     short loc_402243
.text:004021EC                 lea     esi, [esi+0]
.text:004021F0
.text:004021F0 loc_4021F0:                             ; CODE XREF: sub_4021A0+B7C↓j
.text:004021F0                 mov     [ebp+24h], ebx
.text:004021F3                 mov     esi, [esp+5Ch+Str]
.text:004021F7                 mov     [ebp+20h], ebx
.text:004021FA                 mov     ecx, [esp+5Ch+arg_18]
.text:004021FE                 xor     ebx, ebx
.text:00402200                 mov     dword ptr [ebp+14h], 0
.text:00402207                 test    ecx, ecx
.text:00402209                 jz      loc_402CF0
.text:0040220F
.text:0040220F loc_40220F:                             ; CODE XREF: sub_4021A0+B64↓j
.text:0040220F                 mov     ebx, 1
.text:00402214
.text:00402214 loc_402214:                             ; CODE XREF: sub_4021A0+B5E↓j
.text:00402214                 mov     [ebp+1Ch], ebx
.text:00402217                 mov     ecx, [esp+5Ch+Str]
.text:0040221B                 movzx   eax, byte ptr [ecx]
.text:0040221E                 cmp     al, 2Dh ; '-'
.text:00402220                 jz      loc_402CE0
.text:00402226                 cmp     al, 2Bh ; '+'
.text:00402228                 jz      loc_402CC9
.text:0040222E                 xor     edx, edx
.text:00402230                 test    ebx, ebx
.text:00402232                 setz    dl
.text:00402235                 mov     [ebp+18h], edx
.text:00402238
.text:00402238 loc_402238:                             ; CODE XREF: sub_4021A0+B35↓j
.text:00402238                 mov     [esp+5Ch+Str], esi
.text:0040223C                 mov     dword ptr [ebp+10h], 1
.text:00402243
.text:00402243 loc_402243:                             ; CODE XREF: sub_4021A0+4A↑j
.text:00402243                 mov     eax, [ebp+14h]
.text:00402246                 test    eax, eax
.text:00402248                 jz      short loc_402253
.text:0040224A                 cmp     byte ptr [eax], 0
.text:0040224D                 jnz     loc_402330
.text:00402253
.text:00402253 loc_402253:                             ; CODE XREF: sub_4021A0+A8↑j
.text:00402253                 mov     ebx, [ebp+0]
.text:00402256                 cmp     [ebp+24h], ebx
.text:00402259                 jle     short loc_40225E
.text:0040225B                 mov     [ebp+24h], ebx
.text:0040225E
.text:0040225E loc_40225E:                             ; CODE XREF: sub_4021A0+B9↑j
.text:0040225E                 cmp     [ebp+20h], ebx
.text:00402261                 jle     short loc_402266
.text:00402263                 mov     [ebp+20h], ebx
.text:00402266
.text:00402266 loc_402266:                             ; CODE XREF: sub_4021A0+C1↑j
.text:00402266                 cmp     dword ptr [ebp+18h], 1
.text:0040226A                 jz      loc_402C40
.text:00402270
.text:00402270 loc_402270:                             ; CODE XREF: sub_4021A0+B13↓j
.text:00402270                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402274                 jz      loc_402C24
.text:0040227A                 cld
.text:0040227B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040227F                 mov     edx, 3
.text:00402284                 mov     edi, offset dword_401F50
.text:00402289                 mov     esi, [ecx+ebx*4]
.text:0040228C                 mov     ecx, edx
.text:0040228E                 repe cmpsb
.text:00402290                 jnz     short loc_4022CC
.text:00402292                 mov     edx, [ebp+24h]
.text:00402295                 lea     eax, [ebx+1]
.text:00402298                 cmp     [ebp+20h], edx
.text:0040229B                 mov     [ebp+0], eax
.text:0040229E                 jz      loc_402C38
.text:004022A4                 cmp     edx, eax
.text:004022A6                 jz      short loc_4022C0
.text:004022A8                 mov     [esp+5Ch+Str2], ebp
.text:004022AC                 mov     ebx, [esp+5Ch+arg_4]
.text:004022B0                 mov     [esp+5Ch+Str1], ebx
.text:004022B3                 call    sub_402E50
.text:004022B8                 nop
.text:004022B9                 lea     esi, [esi+0]
.text:004022C0
.text:004022C0 loc_4022C0:                             ; CODE XREF: sub_4021A0+106↑j
.text:004022C0                                         ; sub_4021A0+A9B↓j
.text:004022C0                 mov     eax, [esp+5Ch+arg_0]
.text:004022C4                 mov     ebx, eax
.text:004022C6                 mov     [ebp+24h], eax
.text:004022C9                 mov     [ebp+0], eax
.text:004022CC
.text:004022CC loc_4022CC:                             ; CODE XREF: sub_4021A0+F0↑j
.text:004022CC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004022D0                 jz      loc_402C24
.text:004022D6                 mov     esi, [esp+5Ch+arg_4]
.text:004022DA                 mov     eax, [esi+ebx*4]
.text:004022DD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004022E0                 jz      short loc_402307
.text:004022E2
.text:004022E2 loc_4022E2:                             ; CODE XREF: sub_4021A0+16D↓j
.text:004022E2                 mov     edx, [ebp+18h]
.text:004022E5                 test    edx, edx
.text:004022E7                 jz      short loc_402300
.text:004022E9                 mov     [ebp+0Ch], eax
.text:004022EC                 lea     edi, [ebx+1]
.text:004022EF                 mov     eax, 1
.text:004022F4                 mov     [ebp+0], edi
.text:004022F7
.text:004022F7 loc_4022F7:                             ; CODE XREF: sub_4021A0+2D↑j
.text:004022F7                                         ; sub_4021A0+165↓j ...
.text:004022F7                 add     esp, 4Ch
.text:004022FA                 pop     ebx
.text:004022FB                 pop     esi
.text:004022FC                 pop     edi
.text:004022FD                 pop     ebp
.text:004022FE                 retn
.text:004022FE ; ---------------------------------------------------------------------------
.text:004022FF                 align 10h
.text:00402300
.text:00402300 loc_402300:                             ; CODE XREF: sub_4021A0+147↑j
.text:00402300                                         ; sub_4021A0+A8A↓j ...
.text:00402300                 mov     eax, 0FFFFFFFFh
.text:00402305                 jmp     short loc_4022F7
.text:00402307 ; ---------------------------------------------------------------------------
.text:00402307
.text:00402307 loc_402307:                             ; CODE XREF: sub_4021A0+140↑j
.text:00402307                 movzx   edx, byte ptr [eax+1]
.text:0040230B                 test    dl, dl
.text:0040230D                 jz      short loc_4022E2
.text:0040230F                 mov     ebx, [esp+5Ch+arg_C]
.text:00402313                 xor     ecx, ecx
.text:00402315                 test    ebx, ebx
.text:00402317                 jz      short loc_402322
.text:00402319                 cmp     dl, 2Dh ; '-'
.text:0040231C                 jz      loc_402C1A
.text:00402322
.text:00402322 loc_402322:                             ; CODE XREF: sub_4021A0+177↑j
.text:00402322                                         ; sub_4021A0+A7F↓j
.text:00402322                 lea     esi, [ecx+eax+1]
.text:00402326                 mov     [ebp+14h], esi
.text:00402329                 lea     esi, [esi+0]
.text:00402330
.text:00402330 loc_402330:                             ; CODE XREF: sub_4021A0+AD↑j
.text:00402330                 mov     ecx, [esp+5Ch+arg_C]
.text:00402334                 test    ecx, ecx
.text:00402336                 jz      loc_4026C0
.text:0040233C                 mov     edx, [ebp+0]
.text:0040233F                 mov     edi, [esp+5Ch+arg_4]
.text:00402343                 mov     eax, [edi+edx*4]
.text:00402346                 movzx   edx, byte ptr [eax+1]
.text:0040234A                 cmp     dl, 2Dh ; '-'
.text:0040234D                 jz      short loc_402365
.text:0040234F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402353                 test    ebx, ebx
.text:00402355                 jz      loc_4026C0
.text:0040235B                 cmp     byte ptr [eax+2], 0
.text:0040235F                 jz      loc_402BFA
.text:00402365
.text:00402365 loc_402365:                             ; CODE XREF: sub_4021A0+1AD↑j
.text:00402365                                         ; sub_4021A0+A75↓j
.text:00402365                 mov     [esp+5Ch+var_18], 0
.text:0040236D                 mov     ecx, [ebp+14h]
.text:00402370                 mov     [esp+5Ch+var_1C], 0
.text:00402378                 mov     [esp+5Ch+var_20], 0
.text:00402380                 mov     edi, ecx
.text:00402382                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040238A                 movzx   eax, byte ptr [ecx]
.text:0040238D                 test    al, al
.text:0040238F                 jz      short loc_4023AC
.text:00402391                 cmp     al, 3Dh ; '='
.text:00402393                 jz      short loc_4023AC
.text:00402395                 lea     esi, [esi+0]
.text:00402399                 lea     edi, [edi+0]
.text:004023A0
.text:004023A0 loc_4023A0:                             ; CODE XREF: sub_4021A0+20A↓j
.text:004023A0                 inc     edi
.text:004023A1                 movzx   eax, byte ptr [edi]
.text:004023A4                 test    al, al
.text:004023A6                 jz      short loc_4023AC
.text:004023A8                 cmp     al, 3Dh ; '='
.text:004023AA                 jnz     short loc_4023A0
.text:004023AC
.text:004023AC loc_4023AC:                             ; CODE XREF: sub_4021A0+1EF↑j
.text:004023AC                                         ; sub_4021A0+1F3↑j ...
.text:004023AC                 mov     [esp+5Ch+var_28], 0
.text:004023B4                 mov     esi, [esp+5Ch+arg_C]
.text:004023B8                 mov     ebx, [esi]
.text:004023BA                 test    ebx, ebx
.text:004023BC                 mov     edx, ebx
.text:004023BE                 jz      loc_4025E0
.text:004023C4                 lea     esi, [esi+0]
.text:004023CA                 lea     edi, [edi+0]
.text:004023D0
.text:004023D0 loc_4023D0:                             ; CODE XREF: sub_4021A0+25E↓j
.text:004023D0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004023D4                 mov     ebx, edi
.text:004023D6                 sub     ebx, ecx
.text:004023D8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004023DC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004023DF                 call    strncmp
.text:004023E4                 test    eax, eax
.text:004023E6                 jz      loc_402B76
.text:004023EC
.text:004023EC loc_4023EC:                             ; CODE XREF: sub_4021A0+A0F↓j
.text:004023EC                                         ; sub_4021A0+A24↓j ...
.text:004023EC                 inc     [esp+5Ch+var_28]
.text:004023F0                 add     esi, 10h
.text:004023F3                 mov     ecx, [esi]
.text:004023F5                 test    ecx, ecx
.text:004023F7                 mov     edx, ecx
.text:004023F9                 jz      short loc_402400
.text:004023FB                 mov     ecx, [ebp+14h]
.text:004023FE                 jmp     short loc_4023D0
.text:00402400 ; ---------------------------------------------------------------------------
.text:00402400
.text:00402400 loc_402400:                             ; CODE XREF: sub_4021A0+259↑j
.text:00402400                                         ; sub_4021A0+A55↓j
.text:00402400                 mov     esi, [esp+5Ch+var_20]
.text:00402404                 test    esi, esi
.text:00402406                 jz      short loc_402414
.text:00402408                 mov     edx, [esp+5Ch+var_1C]
.text:0040240C                 test    edx, edx
.text:0040240E                 jz      loc_402B20
.text:00402414
.text:00402414 loc_402414:                             ; CODE XREF: sub_4021A0+266↑j
.text:00402414                 mov     eax, [esp+5Ch+var_18]
.text:00402418                 test    eax, eax
.text:0040241A                 jz      loc_4025E0
.text:00402420                 mov     ecx, [ebp+0]
.text:00402423                 lea     eax, [ecx+1]
.text:00402426                 mov     [ebp+0], eax
.text:00402429                 cmp     byte ptr [edi], 0
.text:0040242C                 jz      loc_402540
.text:00402432                 mov     ecx, [esp+5Ch+var_18]
.text:00402436                 mov     esi, [ecx+4]
.text:00402439                 test    esi, esi
.text:0040243B                 jz      short loc_402486
.text:0040243D                 lea     ebx, [edi+1]
.text:00402440                 mov     [ebp+0Ch], ebx
.text:00402443
.text:00402443 loc_402443:                             ; CODE XREF: sub_4021A0+3A8↓j
.text:00402443                                         ; sub_4021A0+3C4↓j
.text:00402443                 mov     ebx, [ebp+14h]
.text:00402446                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402449                 call    strlen
.text:0040244E                 add     [ebp+14h], eax
.text:00402451                 mov     esi, [esp+5Ch+arg_10]
.text:00402455                 test    esi, esi
.text:00402457                 jz      short loc_402463
.text:00402459                 mov     ebp, [esp+5Ch+var_24]
.text:0040245D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402461                 mov     [ecx], ebp
.text:00402463
.text:00402463 loc_402463:                             ; CODE XREF: sub_4021A0+2B7↑j
.text:00402463                 mov     eax, [esp+5Ch+var_18]
.text:00402467                 mov     ecx, [eax+8]
.text:0040246A                 test    ecx, ecx
.text:0040246C                 jnz     short loc_40247A
.text:0040246E                 mov     ecx, [esp+5Ch+var_18]
.text:00402472
.text:00402472 loc_402472:                             ; CODE XREF: sub_4021A0+723↓j
.text:00402472                 mov     eax, [ecx+0Ch]
.text:00402475                 jmp     loc_4022F7
.text:0040247A ; ---------------------------------------------------------------------------
.text:0040247A
.text:0040247A loc_40247A:                             ; CODE XREF: sub_4021A0+2CC↑j
.text:0040247A                                         ; sub_4021A0+719↓j
.text:0040247A                 mov     esi, [eax+0Ch]
.text:0040247D                 xor     eax, eax
.text:0040247F                 mov     [ecx], esi
.text:00402481                 jmp     loc_4022F7
.text:00402486 ; ---------------------------------------------------------------------------
.text:00402486
.text:00402486 loc_402486:                             ; CODE XREF: sub_4021A0+29B↑j
.text:00402486                 mov     edi, [esp+5Ch+var_14]
.text:0040248A                 test    edi, edi
.text:0040248C                 jz      short loc_4024E0
.text:0040248E                 mov     esi, [esp+5Ch+arg_4]
.text:00402492                 mov     edx, [esi+eax*4-4]
.text:00402496                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040249A                 jz      short loc_402502
.text:0040249C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004024A3                 call    ds:libintl_gettext
.text:004024A9                 mov     edx, [esp+5Ch+var_18]
.text:004024AD                 mov     edi, [edx]
.text:004024AF                 mov     [esp+5Ch+var_4C], edi
.text:004024B3                 mov     ebx, [ebp+0]
.text:004024B6                 mov     edi, [esp+5Ch+arg_4]
.text:004024BA                 mov     ecx, [edi+ebx*4-4]
.text:004024BE                 movsx   esi, byte ptr [ecx]
.text:004024C1                 mov     ecx, ds:_iob
.text:004024C7                 add     ecx, 40h ; '@'
.text:004024CA                 mov     [esp+5Ch+var_50], esi
.text:004024CE                 mov     ebx, [edi]
.text:004024D0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004024D4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004024D7                 mov     [esp+5Ch+MaxCount], ebx
.text:004024DB                 call    fprintf
.text:004024E0
.text:004024E0 loc_4024E0:                             ; CODE XREF: sub_4021A0+2EC↑j
.text:004024E0                                         ; sub_4021A0+398↓j
.text:004024E0                 mov     ecx, [ebp+14h]
.text:004024E3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004024E6                 call    strlen
.text:004024EB                 add     [ebp+14h], eax
.text:004024EE                 mov     eax, [esp+5Ch+var_18]
.text:004024F2                 mov     esi, [eax+0Ch]
.text:004024F5                 mov     [ebp+8], esi
.text:004024F8
.text:004024F8 loc_4024F8:                             ; CODE XREF: sub_4021A0+4E5↓j
.text:004024F8                                         ; sub_4021A0+73E↓j ...
.text:004024F8                 mov     eax, 3Fh ; '?'
.text:004024FD                 jmp     loc_4022F7
.text:00402502 ; ---------------------------------------------------------------------------
.text:00402502
.text:00402502 loc_402502:                             ; CODE XREF: sub_4021A0+2FA↑j
.text:00402502                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402509                 call    ds:libintl_gettext
.text:0040250F                 mov     edx, [esp+5Ch+var_18]
.text:00402513                 mov     edi, [esp+5Ch+arg_4]
.text:00402517                 mov     ecx, ds:_iob
.text:0040251D                 mov     esi, [edx]
.text:0040251F                 add     ecx, 40h ; '@'
.text:00402522                 mov     [esp+5Ch+var_50], esi
.text:00402526                 mov     ebx, [edi]
.text:00402528                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040252C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040252F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402533                 call    fprintf
.text:00402538                 jmp     short loc_4024E0
.text:00402538 ; ---------------------------------------------------------------------------
.text:0040253A                 align 10h
.text:00402540
.text:00402540 loc_402540:                             ; CODE XREF: sub_4021A0+28C↑j
.text:00402540                 mov     ebx, [esp+5Ch+var_18]
.text:00402544                 cmp     dword ptr [ebx+4], 1
.text:00402548                 jnz     loc_402443
.text:0040254E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402552                 jge     short loc_402569
.text:00402554                 mov     ebx, [esp+5Ch+arg_4]
.text:00402558                 lea     edi, [ecx+2]
.text:0040255B                 mov     [ebp+0], edi
.text:0040255E                 mov     esi, [ebx+eax*4]
.text:00402561                 mov     [ebp+0Ch], esi
.text:00402564                 jmp     loc_402443
.text:00402569 ; ---------------------------------------------------------------------------
.text:00402569
.text:00402569 loc_402569:                             ; CODE XREF: sub_4021A0+3B2↑j
.text:00402569                 mov     edx, [esp+5Ch+var_14]
.text:0040256D                 test    edx, edx
.text:0040256F                 jnz     short loc_4025A0
.text:00402571
.text:00402571 loc_402571:                             ; CODE XREF: sub_4021A0+437↓j
.text:00402571                 mov     edx, [ebp+14h]
.text:00402574                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402577                 call    strlen
.text:0040257C                 add     [ebp+14h], eax
.text:0040257F                 mov     eax, [esp+5Ch+var_18]
.text:00402583                 mov     edi, [eax+0Ch]
.text:00402586                 mov     [ebp+8], edi
.text:00402589
.text:00402589 loc_402589:                             ; CODE XREF: sub_4021A0+7C2↓j
.text:00402589                 mov     ebp, [esp+5Ch+Str]
.text:0040258D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402591                 setnz   bl
.text:00402594                 movzx   esi, bl
.text:00402597                 lea     eax, [esi+esi*4+3Ah]
.text:0040259B                 jmp     loc_4022F7
.text:004025A0 ; ---------------------------------------------------------------------------
.text:004025A0
.text:004025A0 loc_4025A0:                             ; CODE XREF: sub_4021A0+3CF↑j
.text:004025A0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004025A7                 call    ds:libintl_gettext
.text:004025AD                 mov     ecx, [ebp+0]
.text:004025B0                 mov     esi, [esp+5Ch+arg_4]
.text:004025B4                 mov     ebx, [esi+ecx*4-4]
.text:004025B8                 mov     ecx, ds:_iob
.text:004025BE                 mov     [esp+5Ch+var_50], ebx
.text:004025C2                 mov     edi, [esi]
.text:004025C4                 add     ecx, 40h ; '@'
.text:004025C7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025CB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004025CE                 mov     [esp+5Ch+MaxCount], edi
.text:004025D2                 call    fprintf
.text:004025D7                 jmp     short loc_402571
.text:004025D7 ; ---------------------------------------------------------------------------
.text:004025D9                 align 10h
.text:004025E0
.text:004025E0 loc_4025E0:                             ; CODE XREF: sub_4021A0+21E↑j
.text:004025E0                                         ; sub_4021A0+27A↑j
.text:004025E0                 mov     eax, [esp+5Ch+arg_14]
.text:004025E4                 test    eax, eax
.text:004025E6                 jz      short loc_402616
.text:004025E8                 mov     ebx, [ebp+0]
.text:004025EB                 mov     esi, [esp+5Ch+arg_4]
.text:004025EF                 mov     edi, [esi+ebx*4]
.text:004025F2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004025F6                 jz      short loc_402619
.text:004025F8                 mov     ecx, [ebp+14h]
.text:004025FB                 mov     edx, [esp+5Ch+Str]
.text:004025FF                 movsx   ebx, byte ptr [ecx]
.text:00402602                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402605                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402609                 call    strchr
.text:0040260E                 test    eax, eax
.text:00402610                 jnz     loc_4026C0
.text:00402616
.text:00402616 loc_402616:                             ; CODE XREF: sub_4021A0+446↑j
.text:00402616                 mov     ebx, [ebp+0]
.text:00402619
.text:00402619 loc_402619:                             ; CODE XREF: sub_4021A0+456↑j
.text:00402619                 mov     eax, [esp+5Ch+var_14]
.text:0040261D                 test    eax, eax
.text:0040261F                 jz      short loc_402671
.text:00402621                 mov     esi, [esp+5Ch+arg_4]
.text:00402625                 mov     edi, [esi+ebx*4]
.text:00402628                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040262C                 jz      short loc_40268A
.text:0040262E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402635                 call    ds:libintl_gettext
.text:0040263B                 mov     edi, [ebp+14h]
.text:0040263E                 mov     [esp+5Ch+var_4C], edi
.text:00402642                 mov     ebx, [ebp+0]
.text:00402645                 mov     edi, [esp+5Ch+arg_4]
.text:00402649                 mov     esi, [edi+ebx*4]
.text:0040264C                 movsx   ecx, byte ptr [esi]
.text:0040264F                 mov     esi, ds:_iob
.text:00402655                 add     esi, 40h ; '@'
.text:00402658                 mov     [esp+5Ch+var_50], ecx
.text:0040265C                 mov     ebx, [edi]
.text:0040265E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402662                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402665                 mov     [esp+5Ch+MaxCount], ebx
.text:00402669                 call    fprintf
.text:0040266E
.text:0040266E loc_40266E:                             ; CODE XREF: sub_4021A0+51D↓j
.text:0040266E                 mov     ebx, [ebp+0]
.text:00402671
.text:00402671 loc_402671:                             ; CODE XREF: sub_4021A0+47F↑j
.text:00402671                 mov     dword ptr [ebp+14h], offset dword_402050
.text:00402678                 lea     edx, [ebx+1]
.text:0040267B                 mov     [ebp+0], edx
.text:0040267E
.text:0040267E loc_40267E:                             ; CODE XREF: sub_4021A0+999↓j
.text:0040267E                 mov     dword ptr [ebp+8], 0
.text:00402685                 jmp     loc_4024F8
.text:0040268A ; ---------------------------------------------------------------------------
.text:0040268A
.text:0040268A loc_40268A:                             ; CODE XREF: sub_4021A0+48C↑j
.text:0040268A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402691                 call    ds:libintl_gettext
.text:00402697                 mov     ecx, [ebp+14h]
.text:0040269A                 mov     edi, [esp+5Ch+arg_4]
.text:0040269E                 mov     edx, ds:_iob
.text:004026A4                 mov     [esp+5Ch+var_50], ecx
.text:004026A8                 mov     ebx, [edi]
.text:004026AA                 add     edx, 40h ; '@'
.text:004026AD                 mov     [esp+5Ch+Str2], eax ; Format
.text:004026B1                 mov     [esp+5Ch+MaxCount], ebx
.text:004026B5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004026B8                 call    fprintf
.text:004026BD                 jmp     short loc_40266E
.text:004026BD ; ---------------------------------------------------------------------------
.text:004026BF                 align 10h
.text:004026C0
.text:004026C0 loc_4026C0:                             ; CODE XREF: sub_4021A0+196↑j
.text:004026C0                                         ; sub_4021A0+1B5↑j ...
.text:004026C0                 mov     esi, [ebp+14h]
.text:004026C3                 movzx   ebx, byte ptr [esi]
.text:004026C6                 inc     esi
.text:004026C7                 mov     [ebp+14h], esi
.text:004026CA                 mov     ecx, [esp+5Ch+Str]
.text:004026CE                 movsx   esi, bl
.text:004026D1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004026D5                 mov     edi, esi
.text:004026D7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004026DA                 call    strchr
.text:004026DF                 mov     ecx, [ebp+14h]
.text:004026E2                 cmp     byte ptr [ecx], 0
.text:004026E5                 jnz     short loc_4026EA
.text:004026E7                 inc     dword ptr [ebp+0]
.text:004026EA
.text:004026EA loc_4026EA:                             ; CODE XREF: sub_4021A0+545↑j
.text:004026EA                 test    eax, eax
.text:004026EC                 jz      loc_402AD0
.text:004026F2                 cmp     bl, 3Ah ; ':'
.text:004026F5                 jz      loc_402AD0
.text:004026FB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004026FE                 jz      loc_4027B6
.text:00402704                 movzx   edx, byte ptr [eax+1]
.text:00402708
.text:00402708 loc_402708:                             ; CODE XREF: sub_4021A0+61D↓j
.text:00402708                 cmp     dl, 3Ah ; ':'
.text:0040270B                 jz      short loc_402714
.text:0040270D
.text:0040270D loc_40270D:                             ; CODE XREF: sub_4021A0+590↓j
.text:0040270D                 mov     eax, esi
.text:0040270F                 jmp     loc_4022F7
.text:00402714 ; ---------------------------------------------------------------------------
.text:00402714
.text:00402714 loc_402714:                             ; CODE XREF: sub_4021A0+56B↑j
.text:00402714                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402718                 jz      loc_4027A1
.text:0040271E                 cmp     byte ptr [ecx], 0
.text:00402721                 jz      short loc_402732
.text:00402723
.text:00402723 loc_402723:                             ; CODE XREF: sub_4021A0+604↓j
.text:00402723                 inc     dword ptr [ebp+0]
.text:00402726                 mov     [ebp+0Ch], ecx
.text:00402729
.text:00402729 loc_402729:                             ; CODE XREF: sub_4021A0+5AB↓j
.text:00402729                                         ; sub_4021A0+5C6↓j ...
.text:00402729                 mov     dword ptr [ebp+14h], 0
.text:00402730                 jmp     short loc_40270D
.text:00402732 ; ---------------------------------------------------------------------------
.text:00402732
.text:00402732 loc_402732:                             ; CODE XREF: sub_4021A0+581↑j
.text:00402732                 mov     ecx, [ebp+0]
.text:00402735                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402739                 jz      short loc_40274D
.text:0040273B                 mov     eax, [esp+5Ch+arg_4]
.text:0040273F                 lea     edx, [ecx+1]
.text:00402742                 mov     [ebp+0], edx
.text:00402745                 mov     ebx, [eax+ecx*4]
.text:00402748                 mov     [ebp+0Ch], ebx
.text:0040274B                 jmp     short loc_402729
.text:0040274D ; ---------------------------------------------------------------------------
.text:0040274D
.text:0040274D loc_40274D:                             ; CODE XREF: sub_4021A0+599↑j
.text:0040274D                 mov     ecx, [esp+5Ch+var_14]
.text:00402751                 test    ecx, ecx
.text:00402753                 jnz     short loc_40276F
.text:00402755
.text:00402755 loc_402755:                             ; CODE XREF: sub_4021A0+5FF↓j
.text:00402755                 mov     [ebp+8], edi
.text:00402758                 mov     edi, [esp+5Ch+Str]
.text:0040275C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040275F                 jz      short loc_402768
.text:00402761                 mov     esi, 3Fh ; '?'
.text:00402766                 jmp     short loc_402729
.text:00402768 ; ---------------------------------------------------------------------------
.text:00402768
.text:00402768 loc_402768:                             ; CODE XREF: sub_4021A0+5BF↑j
.text:00402768                 mov     esi, 3Ah ; ':'
.text:0040276D                 jmp     short loc_402729
.text:0040276F ; ---------------------------------------------------------------------------
.text:0040276F
.text:0040276F loc_40276F:                             ; CODE XREF: sub_4021A0+5B3↑j
.text:0040276F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402776                 call    ds:libintl_gettext
.text:0040277C                 mov     [esp+5Ch+var_50], edi
.text:00402780                 mov     ebx, [esp+5Ch+arg_4]
.text:00402784                 mov     edx, ds:_iob
.text:0040278A                 mov     esi, [ebx]
.text:0040278C                 add     edx, 40h ; '@'
.text:0040278F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402793                 mov     [esp+5Ch+MaxCount], esi
.text:00402797                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040279A                 call    fprintf
.text:0040279F                 jmp     short loc_402755
.text:004027A1 ; ---------------------------------------------------------------------------
.text:004027A1
.text:004027A1 loc_4027A1:                             ; CODE XREF: sub_4021A0+578↑j
.text:004027A1                 cmp     byte ptr [ecx], 0
.text:004027A4                 jnz     loc_402723
.text:004027AA                 mov     dword ptr [ebp+0Ch], 0
.text:004027B1                 jmp     loc_402729
.text:004027B6 ; ---------------------------------------------------------------------------
.text:004027B6
.text:004027B6 loc_4027B6:                             ; CODE XREF: sub_4021A0+55E↑j
.text:004027B6                 movzx   edx, byte ptr [eax+1]
.text:004027BA                 cmp     dl, 3Bh ; ';'
.text:004027BD                 jnz     loc_402708
.text:004027C3                 mov     [esp+5Ch+var_2C], 0
.text:004027CB                 mov     [esp+5Ch+var_30], 0
.text:004027D3                 mov     [esp+5Ch+var_34], 0
.text:004027DB                 mov     [esp+5Ch+var_38], 0
.text:004027E3                 cmp     byte ptr [ecx], 0
.text:004027E6                 jz      loc_402A5B
.text:004027EC                 inc     dword ptr [ebp+0]
.text:004027EF                 mov     [ebp+0Ch], ecx
.text:004027F2
.text:004027F2 loc_4027F2:                             ; CODE XREF: sub_4021A0+8D4↓j
.text:004027F2                 mov     edi, [ebp+0Ch]
.text:004027F5                 mov     [ebp+14h], edi
.text:004027F8                 movzx   eax, byte ptr [edi]
.text:004027FB                 test    al, al
.text:004027FD                 jz      short loc_40280F
.text:004027FF                 cmp     al, 3Dh ; '='
.text:00402801                 jz      short loc_40280F
.text:00402803
.text:00402803 loc_402803:                             ; CODE XREF: sub_4021A0+66D↓j
.text:00402803                 inc     edi
.text:00402804                 movzx   eax, byte ptr [edi]
.text:00402807                 test    al, al
.text:00402809                 jz      short loc_40280F
.text:0040280B                 cmp     al, 3Dh ; '='
.text:0040280D                 jnz     short loc_402803
.text:0040280F
.text:0040280F loc_40280F:                             ; CODE XREF: sub_4021A0+65D↑j
.text:0040280F                                         ; sub_4021A0+661↑j ...
.text:0040280F                 mov     [esp+5Ch+var_3C], 0
.text:00402817                 mov     esi, [esp+5Ch+arg_C]
.text:0040281B                 mov     eax, [esi]
.text:0040281D                 test    eax, eax
.text:0040281F                 jz      loc_4029A0
.text:00402825                 mov     ecx, eax
.text:00402827
.text:00402827 loc_402827:                             ; CODE XREF: sub_4021A0+6B3↓j
.text:00402827                 mov     ebx, [ebp+14h]
.text:0040282A                 mov     eax, edi
.text:0040282C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040282F                 sub     eax, ebx
.text:00402831                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402835                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402839                 call    strncmp
.text:0040283E                 test    eax, eax
.text:00402840                 jz      loc_402A07
.text:00402846
.text:00402846 loc_402846:                             ; CODE XREF: sub_4021A0+88C↓j
.text:00402846                                         ; sub_4021A0+89D↓j
.text:00402846                 inc     [esp+5Ch+var_3C]
.text:0040284A                 add     esi, 10h
.text:0040284D                 mov     edx, [esi]
.text:0040284F                 test    edx, edx
.text:00402851                 mov     ecx, edx
.text:00402853                 jnz     short loc_402827
.text:00402855
.text:00402855 loc_402855:                             ; CODE XREF: sub_4021A0+8B6↓j
.text:00402855                 mov     esi, [esp+5Ch+var_34]
.text:00402859                 test    esi, esi
.text:0040285B                 jz      short loc_402869
.text:0040285D                 mov     ebx, [esp+5Ch+var_30]
.text:00402861                 test    ebx, ebx
.text:00402863                 jz      loc_4029B1
.text:00402869
.text:00402869 loc_402869:                             ; CODE XREF: sub_4021A0+6BB↑j
.text:00402869                 mov     esi, [esp+5Ch+var_2C]
.text:0040286D                 test    esi, esi
.text:0040286F                 jz      loc_4029A0
.text:00402875                 cmp     byte ptr [edi], 0
.text:00402878                 jz      loc_402920
.text:0040287E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402882                 mov     ebx, [ecx+4]
.text:00402885                 test    ebx, ebx
.text:00402887                 jz      short loc_4028C8
.text:00402889                 lea     edx, [edi+1]
.text:0040288C                 mov     [ebp+0Ch], edx
.text:0040288F
.text:0040288F loc_40288F:                             ; CODE XREF: sub_4021A0+788↓j
.text:0040288F                                         ; sub_4021A0+7A7↓j
.text:0040288F                 mov     edi, [ebp+14h]
.text:00402892                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402895                 call    strlen
.text:0040289A                 add     [ebp+14h], eax
.text:0040289D                 mov     eax, [esp+5Ch+arg_10]
.text:004028A1                 test    eax, eax
.text:004028A3                 jz      short loc_4028B0
.text:004028A5                 mov     edx, [esp+5Ch+var_38]
.text:004028A9                 mov     ebp, [esp+5Ch+arg_10]
.text:004028AD                 mov     [ebp+0], edx
.text:004028B0
.text:004028B0 loc_4028B0:                             ; CODE XREF: sub_4021A0+703↑j
.text:004028B0                 mov     eax, [esp+5Ch+var_2C]
.text:004028B4                 mov     ecx, [eax+8]
.text:004028B7                 test    ecx, ecx
.text:004028B9                 jnz     loc_40247A
.text:004028BF                 mov     ecx, [esp+5Ch+var_2C]
.text:004028C3                 jmp     loc_402472
.text:004028C8 ; ---------------------------------------------------------------------------
.text:004028C8
.text:004028C8 loc_4028C8:                             ; CODE XREF: sub_4021A0+6E7↑j
.text:004028C8                 mov     eax, [esp+5Ch+var_14]
.text:004028CC                 test    eax, eax
.text:004028CE                 jnz     short loc_4028E3
.text:004028D0
.text:004028D0 loc_4028D0:                             ; CODE XREF: sub_4021A0+779↓j
.text:004028D0                 mov     ecx, [ebp+14h]
.text:004028D3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004028D6                 call    strlen
.text:004028DB                 add     [ebp+14h], eax
.text:004028DE                 jmp     loc_4024F8
.text:004028E3 ; ---------------------------------------------------------------------------
.text:004028E3
.text:004028E3 loc_4028E3:                             ; CODE XREF: sub_4021A0+72E↑j
.text:004028E3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004028EA                 call    ds:libintl_gettext
.text:004028F0                 mov     edx, [esp+5Ch+var_2C]
.text:004028F4                 mov     ebx, [esp+5Ch+arg_4]
.text:004028F8                 mov     edi, [edx]
.text:004028FA                 mov     [esp+5Ch+var_50], edi
.text:004028FE                 mov     edi, ds:_iob
.text:00402904                 mov     esi, [ebx]
.text:00402906                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040290A                 add     edi, 40h ; '@'
.text:0040290D                 mov     [esp+5Ch+MaxCount], esi
.text:00402911                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402914                 call    fprintf
.text:00402919                 jmp     short loc_4028D0
.text:00402919 ; ---------------------------------------------------------------------------
.text:0040291B                 align 10h
.text:00402920
.text:00402920 loc_402920:                             ; CODE XREF: sub_4021A0+6D8↑j
.text:00402920                 mov     esi, [esp+5Ch+var_2C]
.text:00402924                 cmp     dword ptr [esi+4], 1
.text:00402928                 jnz     loc_40288F
.text:0040292E                 mov     ecx, [ebp+0]
.text:00402931                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402935                 jge     short loc_40294C
.text:00402937                 mov     eax, [esp+5Ch+arg_4]
.text:0040293B                 lea     ebx, [ecx+1]
.text:0040293E                 mov     [ebp+0], ebx
.text:00402941                 mov     edi, [eax+ecx*4]
.text:00402944                 mov     [ebp+0Ch], edi
.text:00402947                 jmp     loc_40288F
.text:0040294C ; ---------------------------------------------------------------------------
.text:0040294C
.text:0040294C loc_40294C:                             ; CODE XREF: sub_4021A0+795↑j
.text:0040294C                 mov     edx, [esp+5Ch+var_14]
.text:00402950                 test    edx, edx
.text:00402952                 jnz     short loc_402967
.text:00402954
.text:00402954 loc_402954:                             ; CODE XREF: sub_4021A0+7FE↓j
.text:00402954                 mov     edx, [ebp+14h]
.text:00402957                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040295A                 call    strlen
.text:0040295F                 add     [ebp+14h], eax
.text:00402962                 jmp     loc_402589
.text:00402967 ; ---------------------------------------------------------------------------
.text:00402967
.text:00402967 loc_402967:                             ; CODE XREF: sub_4021A0+7B2↑j
.text:00402967                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040296E                 call    ds:libintl_gettext
.text:00402974                 mov     ecx, [ebp+0]
.text:00402977                 mov     ebx, [esp+5Ch+arg_4]
.text:0040297B                 mov     edi, [ebx+ecx*4-4]
.text:0040297F                 mov     ecx, ds:_iob
.text:00402985                 mov     [esp+5Ch+var_50], edi
.text:00402989                 mov     esi, [ebx]
.text:0040298B                 add     ecx, 40h ; '@'
.text:0040298E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402992                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402995                 mov     [esp+5Ch+MaxCount], esi
.text:00402999                 call    fprintf
.text:0040299E                 jmp     short loc_402954
.text:004029A0 ; ---------------------------------------------------------------------------
.text:004029A0
.text:004029A0 loc_4029A0:                             ; CODE XREF: sub_4021A0+67F↑j
.text:004029A0                                         ; sub_4021A0+6CF↑j
.text:004029A0                 mov     dword ptr [ebp+14h], 0
.text:004029A7                 mov     eax, 57h ; 'W'
.text:004029AC                 jmp     loc_4022F7
.text:004029B1 ; ---------------------------------------------------------------------------
.text:004029B1
.text:004029B1 loc_4029B1:                             ; CODE XREF: sub_4021A0+6C3↑j
.text:004029B1                 mov     edi, [esp+5Ch+var_14]
.text:004029B5                 test    edi, edi
.text:004029B7                 jnz     short loc_4029CF
.text:004029B9
.text:004029B9 loc_4029B9:                             ; CODE XREF: sub_4021A0+865↓j
.text:004029B9                 mov     edx, [ebp+14h]
.text:004029BC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004029BF                 call    strlen
.text:004029C4                 add     [ebp+14h], eax
.text:004029C7                 inc     dword ptr [ebp+0]
.text:004029CA                 jmp     loc_4024F8
.text:004029CF ; ---------------------------------------------------------------------------
.text:004029CF
.text:004029CF loc_4029CF:                             ; CODE XREF: sub_4021A0+817↑j
.text:004029CF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004029D6                 call    ds:libintl_gettext
.text:004029DC                 mov     ecx, [ebp+0]
.text:004029DF                 mov     ebx, [esp+5Ch+arg_4]
.text:004029E3                 mov     edi, [ebx+ecx*4]
.text:004029E6                 mov     ecx, ds:_iob
.text:004029EC                 mov     [esp+5Ch+var_50], edi
.text:004029F0                 mov     esi, [ebx]
.text:004029F2                 add     ecx, 40h ; '@'
.text:004029F5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004029F9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004029FC                 mov     [esp+5Ch+MaxCount], esi
.text:00402A00                 call    fprintf
.text:00402A05                 jmp     short loc_4029B9
.text:00402A07 ; ---------------------------------------------------------------------------
.text:00402A07
.text:00402A07 loc_402A07:                             ; CODE XREF: sub_4021A0+6A0↑j
.text:00402A07                 mov     edx, [ebp+14h]
.text:00402A0A                 mov     ebx, edi
.text:00402A0C                 mov     ecx, [esi]
.text:00402A0E                 sub     ebx, edx
.text:00402A10                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402A13                 call    strlen
.text:00402A18                 cmp     ebx, eax
.text:00402A1A                 jz      short loc_402A42
.text:00402A1C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402A20                 test    ebx, ebx
.text:00402A22                 jz      short loc_402A31
.text:00402A24                 mov     [esp+5Ch+var_34], 1
.text:00402A2C                 jmp     loc_402846
.text:00402A31 ; ---------------------------------------------------------------------------
.text:00402A31
.text:00402A31 loc_402A31:                             ; CODE XREF: sub_4021A0+882↑j
.text:00402A31                 mov     [esp+5Ch+var_2C], esi
.text:00402A35                 mov     ecx, [esp+5Ch+var_3C]
.text:00402A39                 mov     [esp+5Ch+var_38], ecx
.text:00402A3D                 jmp     loc_402846
.text:00402A42 ; ---------------------------------------------------------------------------
.text:00402A42
.text:00402A42 loc_402A42:                             ; CODE XREF: sub_4021A0+87A↑j
.text:00402A42                 mov     [esp+5Ch+var_2C], esi
.text:00402A46                 mov     eax, [esp+5Ch+var_3C]
.text:00402A4A                 mov     [esp+5Ch+var_30], 1
.text:00402A52                 mov     [esp+5Ch+var_38], eax
.text:00402A56                 jmp     loc_402855
.text:00402A5B ; ---------------------------------------------------------------------------
.text:00402A5B
.text:00402A5B loc_402A5B:                             ; CODE XREF: sub_4021A0+646↑j
.text:00402A5B                 mov     edx, [ebp+0]
.text:00402A5E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402A62                 jz      short loc_402A79
.text:00402A64                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A68                 lea     esi, [edx+1]
.text:00402A6B                 mov     [ebp+0], esi
.text:00402A6E                 mov     edi, [ebx+edx*4]
.text:00402A71                 mov     [ebp+0Ch], edi
.text:00402A74                 jmp     loc_4027F2
.text:00402A79 ; ---------------------------------------------------------------------------
.text:00402A79
.text:00402A79 loc_402A79:                             ; CODE XREF: sub_4021A0+8C2↑j
.text:00402A79                 mov     edi, [esp+5Ch+var_14]
.text:00402A7D                 test    edi, edi
.text:00402A7F                 jnz     short loc_402A9C
.text:00402A81
.text:00402A81 loc_402A81:                             ; CODE XREF: sub_4021A0+92C↓j
.text:00402A81                 mov     [ebp+8], esi
.text:00402A84                 mov     ebp, [esp+5Ch+Str]
.text:00402A88                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402A8C                 jz      short loc_402A98
.text:00402A8E                 mov     bl, 3Fh ; '?'
.text:00402A90
.text:00402A90 loc_402A90:                             ; CODE XREF: sub_4021A0+8FA↓j
.text:00402A90                 movsx   eax, bl
.text:00402A93                 jmp     loc_4022F7
.text:00402A98 ; ---------------------------------------------------------------------------
.text:00402A98
.text:00402A98 loc_402A98:                             ; CODE XREF: sub_4021A0+8EC↑j
.text:00402A98                 mov     bl, 3Ah ; ':'
.text:00402A9A                 jmp     short loc_402A90
.text:00402A9C ; ---------------------------------------------------------------------------
.text:00402A9C
.text:00402A9C loc_402A9C:                             ; CODE XREF: sub_4021A0+8DF↑j
.text:00402A9C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402AA3                 call    ds:libintl_gettext
.text:00402AA9                 mov     [esp+5Ch+var_50], esi
.text:00402AAD                 mov     edx, [esp+5Ch+arg_4]
.text:00402AB1                 mov     ecx, ds:_iob
.text:00402AB7                 mov     ebx, [edx]
.text:00402AB9                 add     ecx, 40h ; '@'
.text:00402ABC                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402AC0                 mov     [esp+5Ch+MaxCount], ebx
.text:00402AC4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402AC7                 call    fprintf
.text:00402ACC                 jmp     short loc_402A81
.text:00402ACC ; ---------------------------------------------------------------------------
.text:00402ACE                 align 10h
.text:00402AD0
.text:00402AD0 loc_402AD0:                             ; CODE XREF: sub_4021A0+54C↑j
.text:00402AD0                                         ; sub_4021A0+555↑j
.text:00402AD0                 mov     eax, [esp+5Ch+var_14]
.text:00402AD4                 test    eax, eax
.text:00402AD6                 jz      short loc_402B0F
.text:00402AD8                 mov     ebx, [ebp+1Ch]
.text:00402ADB                 test    ebx, ebx
.text:00402ADD                 jz      short loc_402B17
.text:00402ADF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402AE6
.text:00402AE6 loc_402AE6:                             ; CODE XREF: sub_4021A0+97E↓j
.text:00402AE6                 call    ds:libintl_gettext
.text:00402AEC                 mov     [esp+5Ch+var_50], esi
.text:00402AF0                 mov     ebx, [esp+5Ch+arg_4]
.text:00402AF4                 mov     edx, ds:_iob
.text:00402AFA                 mov     esi, [ebx]
.text:00402AFC                 add     edx, 40h ; '@'
.text:00402AFF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B03                 mov     [esp+5Ch+MaxCount], esi
.text:00402B07                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402B0A                 call    fprintf
.text:00402B0F
.text:00402B0F loc_402B0F:                             ; CODE XREF: sub_4021A0+936↑j
.text:00402B0F                 mov     [ebp+8], edi
.text:00402B12                 jmp     loc_4024F8
.text:00402B17 ; ---------------------------------------------------------------------------
.text:00402B17
.text:00402B17 loc_402B17:                             ; CODE XREF: sub_4021A0+93D↑j
.text:00402B17                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402B1E                 jmp     short loc_402AE6
.text:00402B20 ; ---------------------------------------------------------------------------
.text:00402B20
.text:00402B20 loc_402B20:                             ; CODE XREF: sub_4021A0+26E↑j
.text:00402B20                 mov     edi, [esp+5Ch+var_14]
.text:00402B24                 test    edi, edi
.text:00402B26                 jnz     short loc_402B3E
.text:00402B28
.text:00402B28 loc_402B28:                             ; CODE XREF: sub_4021A0+9D4↓j
.text:00402B28                 mov     edx, [ebp+14h]
.text:00402B2B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402B2E                 call    strlen
.text:00402B33                 add     [ebp+14h], eax
.text:00402B36                 inc     dword ptr [ebp+0]
.text:00402B39                 jmp     loc_40267E
.text:00402B3E ; ---------------------------------------------------------------------------
.text:00402B3E
.text:00402B3E loc_402B3E:                             ; CODE XREF: sub_4021A0+986↑j
.text:00402B3E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402B45                 call    ds:libintl_gettext
.text:00402B4B                 mov     ebx, [ebp+0]
.text:00402B4E                 mov     edi, [esp+5Ch+arg_4]
.text:00402B52                 mov     ecx, [edi+ebx*4]
.text:00402B55                 mov     ebx, ds:_iob
.text:00402B5B                 mov     [esp+5Ch+var_50], ecx
.text:00402B5F                 mov     esi, [edi]
.text:00402B61                 add     ebx, 40h ; '@'
.text:00402B64                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402B68                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402B6B                 mov     [esp+5Ch+MaxCount], esi
.text:00402B6F                 call    fprintf
.text:00402B74                 jmp     short loc_402B28
.text:00402B76 ; ---------------------------------------------------------------------------
.text:00402B76
.text:00402B76 loc_402B76:                             ; CODE XREF: sub_4021A0+246↑j
.text:00402B76                 mov     ecx, [ebp+14h]
.text:00402B79                 mov     ebx, edi
.text:00402B7B                 mov     edx, [esi]
.text:00402B7D                 sub     ebx, ecx
.text:00402B7F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402B82                 call    strlen
.text:00402B87                 cmp     ebx, eax
.text:00402B89                 jz      short loc_402BE1
.text:00402B8B                 mov     ebx, [esp+5Ch+var_18]
.text:00402B8F                 test    ebx, ebx
.text:00402B91                 jz      short loc_402BD0
.text:00402B93                 mov     edx, [esp+5Ch+arg_14]
.text:00402B97                 test    edx, edx
.text:00402B99                 jnz     short loc_402BA7
.text:00402B9B                 mov     ecx, [esp+5Ch+var_18]
.text:00402B9F                 mov     ebx, [esi+4]
.text:00402BA2                 cmp     [ecx+4], ebx
.text:00402BA5                 jz      short loc_402BB4
.text:00402BA7
.text:00402BA7 loc_402BA7:                             ; CODE XREF: sub_4021A0+9F9↑j
.text:00402BA7                                         ; sub_4021A0+A1A↓j ...
.text:00402BA7                 mov     [esp+5Ch+var_20], 1
.text:00402BAF                 jmp     loc_4023EC
.text:00402BB4 ; ---------------------------------------------------------------------------
.text:00402BB4
.text:00402BB4 loc_402BB4:                             ; CODE XREF: sub_4021A0+A05↑j
.text:00402BB4                 mov     edx, [esi+8]
.text:00402BB7                 cmp     [ecx+8], edx
.text:00402BBA                 jnz     short loc_402BA7
.text:00402BBC                 mov     ebx, [esi+0Ch]
.text:00402BBF                 cmp     [ecx+0Ch], ebx
.text:00402BC2                 jnz     short loc_402BA7
.text:00402BC4                 jmp     loc_4023EC
.text:00402BC4 ; ---------------------------------------------------------------------------
.text:00402BC9                 align 10h
.text:00402BD0
.text:00402BD0 loc_402BD0:                             ; CODE XREF: sub_4021A0+9F1↑j
.text:00402BD0                 mov     [esp+5Ch+var_18], esi
.text:00402BD4                 mov     eax, [esp+5Ch+var_28]
.text:00402BD8                 mov     [esp+5Ch+var_24], eax
.text:00402BDC                 jmp     loc_4023EC
.text:00402BE1 ; ---------------------------------------------------------------------------
.text:00402BE1
.text:00402BE1 loc_402BE1:                             ; CODE XREF: sub_4021A0+9E9↑j
.text:00402BE1                 mov     [esp+5Ch+var_18], esi
.text:00402BE5                 mov     ecx, [esp+5Ch+var_28]
.text:00402BE9                 mov     [esp+5Ch+var_1C], 1
.text:00402BF1                 mov     [esp+5Ch+var_24], ecx
.text:00402BF5                 jmp     loc_402400
.text:00402BFA ; ---------------------------------------------------------------------------
.text:00402BFA
.text:00402BFA loc_402BFA:                             ; CODE XREF: sub_4021A0+1BF↑j
.text:00402BFA                 mov     eax, [esp+5Ch+Str]
.text:00402BFE                 movsx   esi, dl
.text:00402C01                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402C05                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402C08                 call    strchr
.text:00402C0D                 test    eax, eax
.text:00402C0F                 jnz     loc_4026C0
.text:00402C15                 jmp     loc_402365
.text:00402C1A ; ---------------------------------------------------------------------------
.text:00402C1A
.text:00402C1A loc_402C1A:                             ; CODE XREF: sub_4021A0+17C↑j
.text:00402C1A                 mov     ecx, 1
.text:00402C1F                 jmp     loc_402322
.text:00402C24 ; ---------------------------------------------------------------------------
.text:00402C24
.text:00402C24 loc_402C24:                             ; CODE XREF: sub_4021A0+D4↑j
.text:00402C24                                         ; sub_4021A0+130↑j
.text:00402C24                 mov     eax, [ebp+20h]
.text:00402C27                 cmp     eax, [ebp+24h]
.text:00402C2A                 jz      loc_402300
.text:00402C30                 mov     [ebp+0], eax
.text:00402C33                 jmp     loc_402300
.text:00402C38 ; ---------------------------------------------------------------------------
.text:00402C38
.text:00402C38 loc_402C38:                             ; CODE XREF: sub_4021A0+FE↑j
.text:00402C38                 mov     [ebp+20h], eax
.text:00402C3B                 jmp     loc_4022C0
.text:00402C40 ; ---------------------------------------------------------------------------
.text:00402C40
.text:00402C40 loc_402C40:                             ; CODE XREF: sub_4021A0+CA↑j
.text:00402C40                 mov     edx, [ebp+20h]
.text:00402C43                 mov     eax, [ebp+24h]
.text:00402C46                 cmp     edx, eax
.text:00402C48                 jz      short loc_402CC0
.text:00402C4A                 cmp     eax, ebx
.text:00402C4C                 jz      short loc_402C61
.text:00402C4E                 mov     [esp+5Ch+Str2], ebp
.text:00402C52                 mov     ebx, [esp+5Ch+arg_4]
.text:00402C56                 mov     [esp+5Ch+Str1], ebx
.text:00402C59                 call    sub_402E50
.text:00402C5E                 mov     ebx, [ebp+0]
.text:00402C61
.text:00402C61 loc_402C61:                             ; CODE XREF: sub_4021A0+AAC↑j
.text:00402C61                                         ; sub_4021A0+B22↓j ...
.text:00402C61                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402C65                 jge     short loc_402CB0
.text:00402C67                 mov     esi, [esp+5Ch+arg_4]
.text:00402C6B                 mov     eax, [esi+ebx*4]
.text:00402C6E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402C71                 jz      short loc_402CB8
.text:00402C73                 lea     esi, [esi+0]
.text:00402C79                 lea     edi, [edi+0]
.text:00402C80
.text:00402C80 loc_402C80:                             ; CODE XREF: sub_4021A0+AFC↓j
.text:00402C80                                         ; sub_4021A0+B1C↓j
.text:00402C80                 lea     eax, [ebx+1]
.text:00402C83                 mov     ebx, eax
.text:00402C85                 mov     [ebp+0], eax
.text:00402C88                 cmp     eax, [esp+5Ch+arg_0]
.text:00402C8C                 jge     short loc_402CB0
.text:00402C8E                 mov     edi, [esp+5Ch+arg_4]
.text:00402C92                 mov     edx, [edi+eax*4]
.text:00402C95                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402C98                 jz      short loc_402CA0
.text:00402C9A
.text:00402C9A loc_402C9A:                             ; CODE XREF: sub_4021A0+B04↓j
.text:00402C9A                 mov     ebx, eax
.text:00402C9C                 jmp     short loc_402C80
.text:00402C9C ; ---------------------------------------------------------------------------
.text:00402C9E                 align 10h
.text:00402CA0
.text:00402CA0 loc_402CA0:                             ; CODE XREF: sub_4021A0+AF8↑j
.text:00402CA0                 cmp     byte ptr [edx+1], 0
.text:00402CA4                 jz      short loc_402C9A
.text:00402CA6                 lea     esi, [esi+0]
.text:00402CA9                 lea     edi, [edi+0]
.text:00402CB0
.text:00402CB0 loc_402CB0:                             ; CODE XREF: sub_4021A0+AC5↑j
.text:00402CB0                                         ; sub_4021A0+AEC↑j ...
.text:00402CB0                 mov     [ebp+24h], ebx
.text:00402CB3                 jmp     loc_402270
.text:00402CB8 ; ---------------------------------------------------------------------------
.text:00402CB8
.text:00402CB8 loc_402CB8:                             ; CODE XREF: sub_4021A0+AD1↑j
.text:00402CB8                 cmp     byte ptr [eax+1], 0
.text:00402CBC                 jz      short loc_402C80
.text:00402CBE                 jmp     short loc_402CB0
.text:00402CC0 ; ---------------------------------------------------------------------------
.text:00402CC0
.text:00402CC0 loc_402CC0:                             ; CODE XREF: sub_4021A0+AA8↑j
.text:00402CC0                 cmp     edx, ebx
.text:00402CC2                 jz      short loc_402C61
.text:00402CC4                 mov     [ebp+20h], ebx
.text:00402CC7                 jmp     short loc_402C61
.text:00402CC9 ; ---------------------------------------------------------------------------
.text:00402CC9
.text:00402CC9 loc_402CC9:                             ; CODE XREF: sub_4021A0+88↑j
.text:00402CC9                 mov     dword ptr [ebp+18h], 0
.text:00402CD0                 mov     esi, [esp+5Ch+Str]
.text:00402CD4
.text:00402CD4 loc_402CD4:                             ; CODE XREF: sub_4021A0+B49↓j
.text:00402CD4                 inc     esi
.text:00402CD5                 jmp     loc_402238
.text:00402CD5 ; ---------------------------------------------------------------------------
.text:00402CDA                 align 10h
.text:00402CE0
.text:00402CE0 loc_402CE0:                             ; CODE XREF: sub_4021A0+80↑j
.text:00402CE0                 mov     dword ptr [ebp+18h], 2
.text:00402CE7                 mov     esi, ecx
.text:00402CE9                 jmp     short loc_402CD4
.text:00402CE9 ; ---------------------------------------------------------------------------
.text:00402CEB                 align 10h
.text:00402CF0
.text:00402CF0 loc_402CF0:                             ; CODE XREF: sub_4021A0+69↑j
.text:00402CF0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402CF7                 call    getenv
.text:00402CFC                 test    eax, eax
.text:00402CFE                 jz      loc_402214
.text:00402D04                 jmp     loc_40220F
.text:00402D04 ; ---------------------------------------------------------------------------
.text:00402D09                 align 10h
.text:00402D10
.text:00402D10 loc_402D10:                             ; CODE XREF: sub_4021A0+3F↑j
.text:00402D10                 mov     dword ptr [ebp+0], 1
.text:00402D17                 mov     ebx, 1
.text:00402D1C                 jmp     loc_4021F0
.text:00402D1C sub_4021A0      endp
.text:00402D1C
.text:00402D21 ; ---------------------------------------------------------------------------
.text:00402D21                 jmp     short sub_402D30
.text:00402D21 ; ---------------------------------------------------------------------------
.text:00402D23                 align 10h
.text:00402D30
.text:00402D30 ; =============== S U B R O U T I N E =======================================
.text:00402D30
.text:00402D30
.text:00402D30 ; int __cdecl sub_402D30(int, int, char *, int, int, int, int)
.text:00402D30 sub_402D30      proc near               ; CODE XREF: .text:00402D21↑j
.text:00402D30                                         ; sub_402FB0+3A↓p ...
.text:00402D30
.text:00402D30 var_2C          = dword ptr -2Ch
.text:00402D30 var_28          = dword ptr -28h
.text:00402D30 Str             = dword ptr -24h
.text:00402D30 var_20          = dword ptr -20h
.text:00402D30 var_1C          = dword ptr -1Ch
.text:00402D30 var_18          = dword ptr -18h
.text:00402D30 var_14          = dword ptr -14h
.text:00402D30 var_10          = dword ptr -10h
.text:00402D30 arg_0           = dword ptr  4
.text:00402D30 arg_4           = dword ptr  8
.text:00402D30 arg_8           = dword ptr  0Ch
.text:00402D30 arg_C           = dword ptr  10h
.text:00402D30 arg_10          = dword ptr  14h
.text:00402D30 arg_14          = dword ptr  18h
.text:00402D30 arg_18          = dword ptr  1Ch
.text:00402D30
.text:00402D30                 sub     esp, 2Ch
.text:00402D33                 mov     edx, dword_40E010
.text:00402D39                 mov     [esp+2Ch+var_10], offset dword_40F000 ; int
.text:00402D41                 mov     ecx, dword_40E014
.text:00402D47                 mov     ds:dword_40F000, edx
.text:00402D4D                 mov     edx, [esp+2Ch+arg_18]
.text:00402D51                 mov     ds:dword_40F004, ecx
.text:00402D57                 mov     ecx, [esp+2Ch+arg_14]
.text:00402D5B                 mov     [esp+2Ch+var_14], edx ; int
.text:00402D5F                 mov     edx, [esp+2Ch+arg_10]
.text:00402D63                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402D67                 mov     ecx, [esp+2Ch+arg_C]
.text:00402D6B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00402D6F                 mov     edx, [esp+2Ch+arg_8]
.text:00402D73                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402D77                 mov     ecx, [esp+2Ch+arg_4]
.text:00402D7B                 mov     [esp+2Ch+Str], edx ; Str
.text:00402D7F                 mov     edx, [esp+2Ch+arg_0]
.text:00402D83                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402D87                 mov     [esp+2Ch+var_2C], edx ; int
.text:00402D8A                 call    sub_4021A0
.text:00402D8F                 mov     ecx, ds:dword_40F000
.text:00402D95                 mov     dword_40E010, ecx
.text:00402D9B                 mov     ecx, ds:dword_40F00C
.text:00402DA1                 mov     ds:dword_40F4D0, ecx
.text:00402DA7                 mov     ecx, ds:dword_40F008
.text:00402DAD                 mov     dword_40E018, ecx
.text:00402DB3                 add     esp, 2Ch
.text:00402DB6                 retn
.text:00402DB6 sub_402D30      endp
.text:00402DB6
.text:00402DB6 ; ---------------------------------------------------------------------------
.text:00402DB7                 align 10h
.text:00402DC0                 sub     esp, 2Ch
.text:00402DC3                 mov     edx, dword_40E010
.text:00402DC9                 mov     dword ptr [esp+1Ch], offset dword_40F000
.text:00402DD1                 mov     ecx, dword_40E014
.text:00402DD7                 mov     dword ptr [esp+18h], 1
.text:00402DDF                 mov     ds:dword_40F000, edx
.text:00402DE5                 mov     edx, [esp+38h]
.text:00402DE9                 mov     ds:dword_40F004, ecx
.text:00402DEF                 mov     ecx, [esp+34h]
.text:00402DF3                 mov     [esp+8], edx
.text:00402DF7                 mov     edx, [esp+30h]
.text:00402DFB                 mov     [esp+4], ecx
.text:00402DFF                 mov     dword ptr [esp+14h], 0
.text:00402E07                 mov     dword ptr [esp+10h], 0
.text:00402E0F                 mov     dword ptr [esp+0Ch], 0
.text:00402E17                 mov     [esp], edx
.text:00402E1A                 call    sub_4021A0
.text:00402E1F                 mov     ecx, ds:dword_40F000
.text:00402E25                 mov     dword_40E010, ecx
.text:00402E2B                 mov     ecx, ds:dword_40F00C
.text:00402E31                 mov     ds:dword_40F4D0, ecx
.text:00402E37                 mov     ecx, ds:dword_40F008
.text:00402E3D                 mov     dword_40E018, ecx
.text:00402E43                 add     esp, 2Ch
.text:00402E46                 retn
.text:00402E46 ; ---------------------------------------------------------------------------
.text:00402E47                 align 10h
.text:00402E50
.text:00402E50 ; =============== S U B R O U T I N E =======================================
.text:00402E50
.text:00402E50
.text:00402E50 sub_402E50      proc near               ; CODE XREF: sub_4021A0+113↑p
.text:00402E50                                         ; sub_4021A0+AB9↑p
.text:00402E50
.text:00402E50 var_2C          = dword ptr -2Ch
.text:00402E50 var_28          = dword ptr -28h
.text:00402E50 var_24          = dword ptr -24h
.text:00402E50 var_20          = dword ptr -20h
.text:00402E50 var_1C          = dword ptr -1Ch
.text:00402E50 var_18          = dword ptr -18h
.text:00402E50 var_14          = dword ptr -14h
.text:00402E50 arg_0           = dword ptr  4
.text:00402E50 arg_4           = dword ptr  8
.text:00402E50
.text:00402E50                 push    ebp
.text:00402E51                 push    edi
.text:00402E52                 push    esi
.text:00402E53                 push    ebx
.text:00402E54                 sub     esp, 1Ch
.text:00402E57                 mov     ecx, [esp+2Ch+arg_4]
.text:00402E5B                 mov     eax, [esp+2Ch+arg_4]
.text:00402E5F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402E63                 mov     edx, [ecx+20h]
.text:00402E66                 mov     edi, [esp+2Ch+arg_0]
.text:00402E6A                 mov     ecx, [ebx]
.text:00402E6C                 mov     [esp+2Ch+var_2C], edx
.text:00402E6F                 mov     [esp+2Ch+var_14], edx
.text:00402E73                 mov     edx, [eax+24h]
.text:00402E76                 mov     [esp+2Ch+var_28], ecx
.text:00402E7A                 mov     [esp+2Ch+var_1C], ecx
.text:00402E7E                 cmp     ecx, edx
.text:00402E80                 mov     [esp+2Ch+var_18], edx
.text:00402E84                 jle     short loc_402F00
.text:00402E86                 mov     esi, [esp+2Ch+var_2C]
.text:00402E89                 cmp     edx, esi
.text:00402E8B                 jle     short loc_402F00
.text:00402E8D                 lea     esi, [esi+0]
.text:00402E90
.text:00402E90 loc_402E90:                             ; CODE XREF: sub_402E50+A1↓j
.text:00402E90                 mov     ebx, [esp+2Ch+var_1C]
.text:00402E94                 mov     edx, [esp+2Ch+var_18]
.text:00402E98                 mov     ebp, [esp+2Ch+var_18]
.text:00402E9C                 mov     eax, [esp+2Ch+var_14]
.text:00402EA0                 sub     ebx, edx
.text:00402EA2                 mov     [esp+2Ch+var_20], ebx
.text:00402EA6                 sub     ebp, eax
.text:00402EA8                 cmp     ebx, ebp
.text:00402EAA                 jle     short loc_402F25
.text:00402EAC                 xor     esi, esi
.text:00402EAE                 cmp     esi, ebp
.text:00402EB0                 jge     short loc_402EDD
.text:00402EB2                 mov     ecx, [esp+2Ch+var_1C]
.text:00402EB6                 sub     ecx, ebp
.text:00402EB8                 mov     [esp+2Ch+var_24], ecx
.text:00402EBC                 lea     esi, [esi+0]
.text:00402EC0
.text:00402EC0 loc_402EC0:                             ; CODE XREF: sub_402E50+8B↓j
.text:00402EC0                 mov     ecx, [esp+2Ch+var_14]
.text:00402EC4                 mov     edx, [esp+2Ch+var_24]
.text:00402EC8                 add     ecx, esi
.text:00402ECA                 add     edx, esi
.text:00402ECC                 mov     ebx, [edi+ecx*4]
.text:00402ECF                 mov     eax, [edi+edx*4]
.text:00402ED2                 inc     esi
.text:00402ED3                 cmp     esi, ebp
.text:00402ED5                 mov     [edi+ecx*4], eax
.text:00402ED8                 mov     [edi+edx*4], ebx
.text:00402EDB                 jl      short loc_402EC0
.text:00402EDD
.text:00402EDD loc_402EDD:                             ; CODE XREF: sub_402E50+60↑j
.text:00402EDD                 sub     [esp+2Ch+var_1C], ebp
.text:00402EE1
.text:00402EE1 loc_402EE1:                             ; CODE XREF: sub_402E50+107↓j
.text:00402EE1                 mov     eax, [esp+2Ch+var_18]
.text:00402EE5                 cmp     [esp+2Ch+var_1C], eax
.text:00402EE9                 jle     short loc_402F00
.text:00402EEB                 mov     ebp, [esp+2Ch+var_14]
.text:00402EEF                 cmp     eax, ebp
.text:00402EF1                 jg      short loc_402E90
.text:00402EF3                 lea     esi, [esi+0]
.text:00402EF9                 lea     edi, [edi+0]
.text:00402F00
.text:00402F00 loc_402F00:                             ; CODE XREF: sub_402E50+34↑j
.text:00402F00                                         ; sub_402E50+3B↑j ...
.text:00402F00                 mov     esi, [esp+2Ch+var_28]
.text:00402F04                 mov     ecx, [esp+2Ch+var_18]
.text:00402F08                 mov     eax, [esp+2Ch+var_2C]
.text:00402F0B                 mov     edi, [esp+2Ch+arg_4]
.text:00402F0F                 mov     edx, [esp+2Ch+var_28]
.text:00402F13                 sub     esi, ecx
.text:00402F15                 add     esi, eax
.text:00402F17                 mov     [edi+20h], esi
.text:00402F1A                 mov     [edi+24h], edx
.text:00402F1D                 add     esp, 1Ch
.text:00402F20                 pop     ebx
.text:00402F21                 pop     esi
.text:00402F22                 pop     edi
.text:00402F23                 pop     ebp
.text:00402F24                 retn
.text:00402F25 ; ---------------------------------------------------------------------------
.text:00402F25
.text:00402F25 loc_402F25:                             ; CODE XREF: sub_402E50+5A↑j
.text:00402F25                 xor     esi, esi
.text:00402F27                 cmp     esi, [esp+2Ch+var_20]
.text:00402F2B                 jge     short loc_402F4F
.text:00402F2D                 lea     esi, [esi+0]
.text:00402F30
.text:00402F30 loc_402F30:                             ; CODE XREF: sub_402E50+FD↓j
.text:00402F30                 mov     ebx, [esp+2Ch+var_14]
.text:00402F34                 mov     ebp, [esp+2Ch+var_18]
.text:00402F38                 add     ebx, esi
.text:00402F3A                 add     ebp, esi
.text:00402F3C                 mov     edx, [edi+ebx*4]
.text:00402F3F                 inc     esi
.text:00402F40                 cmp     esi, [esp+2Ch+var_20]
.text:00402F44                 mov     ecx, [edi+ebp*4]
.text:00402F47                 mov     [edi+ebx*4], ecx
.text:00402F4A                 mov     [edi+ebp*4], edx
.text:00402F4D                 jl      short loc_402F30
.text:00402F4F
.text:00402F4F loc_402F4F:                             ; CODE XREF: sub_402E50+DB↑j
.text:00402F4F                 mov     esi, [esp+2Ch+var_20]
.text:00402F53                 add     [esp+2Ch+var_14], esi
.text:00402F57                 jmp     short loc_402EE1
.text:00402F57 sub_402E50      endp
.text:00402F57
.text:00402F57 ; ---------------------------------------------------------------------------
.text:00402F59                 db 17h dup(90h)
.text:00402F70
.text:00402F70 ; =============== S U B R O U T I N E =======================================
.text:00402F70
.text:00402F70
.text:00402F70 sub_402F70      proc near               ; CODE XREF: sub_401380:loc_401492↑p
.text:00402F70
.text:00402F70 DstBuf          = dword ptr -0Ch
.text:00402F70 SizeInBytes     = dword ptr -8
.text:00402F70 var_4           = dword ptr -4
.text:00402F70
.text:00402F70                 sub     esp, 0Ch
.text:00402F73                 mov     [esp+0Ch+var_4], ebx
.text:00402F77                 mov     [esp+0Ch+SizeInBytes], 0 ; SizeInBytes
.text:00402F7F                 mov     [esp+0Ch+DstBuf], 0 ; DstBuf
.text:00402F86                 call    j__getcwd
.text:00402F8B                 test    eax, eax
.text:00402F8D                 mov     ebx, eax
.text:00402F8F                 jz      short loc_402F9B
.text:00402F91
.text:00402F91 loc_402F91:                             ; CODE XREF: sub_402F70+33↓j
.text:00402F91                 mov     eax, ebx
.text:00402F93                 mov     ebx, [esp+0Ch+var_4]
.text:00402F97                 add     esp, 0Ch
.text:00402F9A                 retn
.text:00402F9B ; ---------------------------------------------------------------------------
.text:00402F9B
.text:00402F9B loc_402F9B:                             ; CODE XREF: sub_402F70+1F↑j
.text:00402F9B                 call    _errno
.text:00402FA0                 cmp     dword ptr [eax], 0Ch
.text:00402FA3                 jnz     short loc_402F91
.text:00402FA5                 call    sub_403690
.text:00402FA5 sub_402F70      endp
.text:00402FA5
.text:00402FA5 ; ---------------------------------------------------------------------------
.text:00402FAA                 align 10h
.text:00402FB0
.text:00402FB0 ; =============== S U B R O U T I N E =======================================
.text:00402FB0
.text:00402FB0
.text:00402FB0 ; int __cdecl sub_402FB0(int, int, char *, int, int)
.text:00402FB0 sub_402FB0      proc near               ; CODE XREF: sub_401380+C6↑p
.text:00402FB0                                         ; sub_403150+58↓p
.text:00402FB0
.text:00402FB0 var_1C          = dword ptr -1Ch
.text:00402FB0 var_18          = dword ptr -18h
.text:00402FB0 var_14          = dword ptr -14h
.text:00402FB0 var_10          = dword ptr -10h
.text:00402FB0 var_C           = dword ptr -0Ch
.text:00402FB0 var_8           = dword ptr -8
.text:00402FB0 var_4           = dword ptr -4
.text:00402FB0 arg_0           = dword ptr  4
.text:00402FB0 arg_4           = dword ptr  8
.text:00402FB0 arg_8           = dword ptr  0Ch
.text:00402FB0 arg_C           = dword ptr  10h
.text:00402FB0 arg_10          = dword ptr  14h
.text:00402FB0
.text:00402FB0                 sub     esp, 1Ch
.text:00402FB3                 mov     edx, [esp+1Ch+arg_C]
.text:00402FB7                 mov     [esp+1Ch+var_4], 0 ; int
.text:00402FBF                 mov     ecx, [esp+1Ch+arg_10]
.text:00402FC3                 mov     [esp+1Ch+var_8], 0 ; int
.text:00402FCB                 mov     [esp+1Ch+var_10], edx ; int
.text:00402FCF                 mov     edx, [esp+1Ch+arg_4]
.text:00402FD3                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402FD7                 mov     ecx, [esp+1Ch+arg_8]
.text:00402FDB                 mov     [esp+1Ch+var_18], edx ; int
.text:00402FDF                 mov     edx, [esp+1Ch+arg_0]
.text:00402FE3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402FE7                 mov     [esp+1Ch+var_1C], edx ; int
.text:00402FEA                 call    sub_402D30
.text:00402FEF                 add     esp, 1Ch
.text:00402FF2                 retn
.text:00402FF2 sub_402FB0      endp
.text:00402FF2
.text:00402FF2 ; ---------------------------------------------------------------------------
.text:00402FF3                 align 10h
.text:00403000                 sub     esp, 2Ch
.text:00403003                 mov     edx, [esp+44h]
.text:00403007                 mov     dword ptr [esp+18h], 0
.text:0040300F                 mov     ecx, [esp+40h]
.text:00403013                 mov     dword ptr [esp+14h], 0
.text:0040301B                 mov     [esp+1Ch], edx
.text:0040301F                 mov     edx, [esp+3Ch]
.text:00403023                 mov     [esp+10h], ecx
.text:00403027                 mov     ecx, [esp+38h]
.text:0040302B                 mov     [esp+0Ch], edx
.text:0040302F                 mov     edx, [esp+34h]
.text:00403033                 mov     [esp+8], ecx
.text:00403037                 mov     [esp+4], edx
.text:0040303B                 mov     edx, [esp+30h]
.text:0040303F                 mov     [esp], edx
.text:00403042                 call    sub_4021A0
.text:00403047                 add     esp, 2Ch
.text:0040304A                 retn
.text:0040304A ; ---------------------------------------------------------------------------
.text:0040304B                 align 10h
.text:00403050                 sub     esp, 1Ch
.text:00403053                 mov     edx, [esp+2Ch]
.text:00403057                 mov     dword ptr [esp+18h], 0
.text:0040305F                 mov     ecx, [esp+30h]
.text:00403063                 mov     dword ptr [esp+14h], 1
.text:0040306B                 mov     [esp+0Ch], edx
.text:0040306F                 mov     edx, [esp+24h]
.text:00403073                 mov     [esp+10h], ecx
.text:00403077                 mov     ecx, [esp+28h]
.text:0040307B                 mov     [esp+4], edx
.text:0040307F                 mov     edx, [esp+20h]
.text:00403083                 mov     [esp+8], ecx
.text:00403087                 mov     [esp], edx
.text:0040308A                 call    sub_402D30
.text:0040308F                 add     esp, 1Ch
.text:00403092                 retn
.text:00403092 ; ---------------------------------------------------------------------------
.text:00403093                 align 10h
.text:004030A0                 sub     esp, 2Ch
.text:004030A3                 mov     edx, [esp+44h]
.text:004030A7                 mov     dword ptr [esp+18h], 0
.text:004030AF                 mov     ecx, [esp+40h]
.text:004030B3                 mov     dword ptr [esp+14h], 1
.text:004030BB                 mov     [esp+1Ch], edx
.text:004030BF                 mov     edx, [esp+3Ch]
.text:004030C3                 mov     [esp+10h], ecx
.text:004030C7                 mov     ecx, [esp+38h]
.text:004030CB                 mov     [esp+0Ch], edx
.text:004030CF                 mov     edx, [esp+34h]
.text:004030D3                 mov     [esp+8], ecx
.text:004030D7                 mov     [esp+4], edx
.text:004030DB                 mov     edx, [esp+30h]
.text:004030DF                 mov     [esp], edx
.text:004030E2                 call    sub_4021A0
.text:004030E7                 add     esp, 2Ch
.text:004030EA                 retn
.text:004030EA ; ---------------------------------------------------------------------------
.text:004030EB                 align 10h
.text:004030F0 aHelp           db 'help',0             ; DATA XREF: .text:off_403110↓o
.text:004030F5 aVersion        db 'version',0          ; DATA XREF: .text:00403120↓o
.text:004030FD                 db 13h dup(90h)
.text:00403110 off_403110      dd offset aHelp         ; DATA XREF: sub_403150+3D↓o
.text:00403110                                         ; "help"
.text:00403114                 dd 2 dup(0)
.text:0040311C                 dd 68h
.text:00403120                 dd offset aVersion      ; "version"
.text:00403124                 dd 2 dup(0)
.text:0040312C                 dd 76h, 4 dup(0)
.text:00403140 ; ---------------------------------------------------------------------------
.text:00403140
.text:00403140 loc_403140:                             ; DATA XREF: sub_403150+45↓o
.text:00403140                 sub     eax, [eax]
.text:00403142                 lea     esi, [esi+0]
.text:00403149                 lea     edi, [edi+0]
.text:00403150
.text:00403150 ; =============== S U B R O U T I N E =======================================
.text:00403150
.text:00403150
.text:00403150 ; int __cdecl sub_403150(int, int, FILE *, int, int, int, char)
.text:00403150 sub_403150      proc near               ; CODE XREF: sub_401380+A2↑p
.text:00403150
.text:00403150 Code            = dword ptr -1Ch
.text:00403150 var_18          = dword ptr -18h
.text:00403150 var_14          = dword ptr -14h
.text:00403150 var_10          = dword ptr -10h
.text:00403150 var_C           = dword ptr -0Ch
.text:00403150 var_4           = dword ptr -4
.text:00403150 arg_0           = dword ptr  4
.text:00403150 arg_4           = dword ptr  8
.text:00403150 arg_8           = dword ptr  0Ch
.text:00403150 arg_C           = dword ptr  10h
.text:00403150 arg_10          = dword ptr  14h
.text:00403150 arg_14          = dword ptr  18h
.text:00403150 arg_18          = byte ptr  1Ch
.text:00403150
.text:00403150                 sub     esp, 1Ch
.text:00403153                 xor     eax, eax
.text:00403155                 cmp     [esp+1Ch+arg_0], 2
.text:0040315A                 mov     [esp+1Ch+var_4], ebx
.text:0040315E                 mov     ebx, dword_40E014
.text:00403164                 mov     dword_40E014, eax
.text:00403169                 jz      short loc_403181
.text:0040316B
.text:0040316B loc_40316B:                             ; CODE XREF: sub_403150+60↓j
.text:0040316B                                         ; sub_403150+6A↓j
.text:0040316B                 mov     dword_40E014, ebx
.text:00403171                 xor     edx, edx
.text:00403173                 mov     ebx, [esp+1Ch+var_4]
.text:00403177                 mov     dword_40E010, edx
.text:0040317D                 add     esp, 1Ch
.text:00403180                 retn
.text:00403181 ; ---------------------------------------------------------------------------
.text:00403181
.text:00403181 loc_403181:                             ; CODE XREF: sub_403150+19↑j
.text:00403181                 mov     [esp+1Ch+var_C], 0 ; int
.text:00403189                 mov     edx, [esp+1Ch+arg_4]
.text:0040318D                 mov     [esp+1Ch+var_10], offset off_403110 ; int
.text:00403195                 mov     [esp+1Ch+var_14], offset loc_403140 ; char *
.text:0040319D                 mov     [esp+1Ch+var_18], edx ; int
.text:004031A1                 mov     [esp+1Ch+Code], 2 ; int
.text:004031A8                 call    sub_402FB0
.text:004031AD                 cmp     eax, 0FFFFFFFFh
.text:004031B0                 jz      short loc_40316B
.text:004031B2                 cmp     eax, 68h ; 'h'
.text:004031B5                 jz      short loc_4031BE
.text:004031B7                 cmp     eax, 76h ; 'v'
.text:004031BA                 jnz     short loc_40316B
.text:004031BC                 jmp     short loc_4031C9
.text:004031BE ; ---------------------------------------------------------------------------
.text:004031BE
.text:004031BE loc_4031BE:                             ; CODE XREF: sub_403150+65↑j
.text:004031BE                 mov     [esp+1Ch+Code], 0
.text:004031C5                 call    [esp+1Ch+arg_14]
.text:004031C9
.text:004031C9 loc_4031C9:                             ; CODE XREF: sub_403150+6C↑j
.text:004031C9                 mov     ecx, [esp+1Ch+arg_10]
.text:004031CD                 lea     ebx, [esp+1Ch+arg_18]
.text:004031D1                 mov     edx, [esp+1Ch+arg_C]
.text:004031D5                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:004031D9                 mov     ebx, [esp+1Ch+arg_8]
.text:004031DD                 mov     [esp+1Ch+var_10], ecx ; int
.text:004031E1                 mov     ecx, ds:_iob
.text:004031E7                 mov     [esp+1Ch+var_14], edx ; int
.text:004031EB                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:004031EF                 add     ecx, 20h ; ' '
.text:004031F2                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:004031F5                 call    sub_4039C0
.text:004031FA                 mov     [esp+1Ch+Code], 0 ; Code
.text:00403201                 call    exit
.text:00403201 sub_403150      endp
.text:00403201
.text:00403201 ; ---------------------------------------------------------------------------
.text:00403206                 align 10h
.text:00403210                 mov     edx, [esp+4]
.text:00403214                 mov     ds:dword_40F030, edx
.text:0040321A                 retn
.text:0040321A ; ---------------------------------------------------------------------------
.text:0040321B aWriteError     db 'write error',0      ; DATA XREF: sub_403240:loc_403289↓o
.text:00403227 ; const char aSS[]
.text:00403227 aSS             db '%s: %s',0           ; DATA XREF: sub_403240+77↓o
.text:0040322E ; const char aS_2[]
.text:0040322E aS_2            db '%s',0               ; DATA XREF: sub_403240+A0↓o
.text:00403231 ; ---------------------------------------------------------------------------
.text:00403231                 jmp     short sub_403240
.text:00403231 ; ---------------------------------------------------------------------------
.text:00403233                 align 10h
.text:00403240
.text:00403240 ; =============== S U B R O U T I N E =======================================
.text:00403240
.text:00403240
.text:00403240 ; void __cdecl sub_403240()
.text:00403240 sub_403240      proc near               ; CODE XREF: .text:00403231↑j
.text:00403240                                         ; DATA XREF: sub_401380+5F↑o
.text:00403240
.text:00403240 Stream          = dword ptr -2Ch
.text:00403240 ErrorMessage    = dword ptr -28h
.text:00403240 var_24          = dword ptr -24h
.text:00403240 var_20          = byte ptr -20h
.text:00403240 var_1C          = dword ptr -1Ch
.text:00403240 var_9           = byte ptr -9
.text:00403240
.text:00403240                 push    esi
.text:00403241                 push    ebx
.text:00403242                 sub     esp, 24h
.text:00403245                 mov     edx, ds:_iob
.text:0040324B                 mov     ecx, [edx+2Ch]
.text:0040324E                 lea     esi, [edx+20h]
.text:00403251                 shr     ecx, 5
.text:00403254                 mov     bl, cl
.text:00403256                 mov     ecx, [edx+20h]
.text:00403259                 and     bl, 1
.text:0040325C                 cmp     ecx, [esi+8]
.text:0040325F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403262                 setz    [esp+2Ch+var_9]
.text:00403267                 call    fclose
.text:0040326C                 test    eax, eax
.text:0040326E                 setnz   al
.text:00403271                 test    bl, bl
.text:00403273                 jnz     loc_403303
.text:00403279                 test    al, al
.text:0040327B                 jz      short loc_4032D0
.text:0040327D
.text:0040327D loc_40327D:                             ; CODE XREF: sub_403240+CD↓j
.text:0040327D                 call    _errno
.text:00403282                 mov     esi, [eax]
.text:00403284
.text:00403284 loc_403284:                             ; CODE XREF: sub_403240+C7↓j
.text:00403284                 cmp     esi, 9
.text:00403287                 jz      short loc_4032F6
.text:00403289
.text:00403289 loc_403289:                             ; CODE XREF: sub_403240+B8↓j
.text:00403289                                         ; sub_403240+C1↓j
.text:00403289                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403290                 call    ds:libintl_gettext
.text:00403296                 mov     ebx, eax
.text:00403298                 mov     eax, ds:dword_40F030
.text:0040329D                 test    eax, eax
.text:0040329F                 jz      short loc_4032D6
.text:004032A1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004032A4                 call    sub_404D00
.text:004032A9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004032AD                 mov     edx, Code
.text:004032B3                 mov     [esp+2Ch+var_1C], ebx
.text:004032B7                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:004032BF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004032C3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004032C6                 call    sub_404FC0
.text:004032CB                 nop
.text:004032CC                 lea     esi, [esi+0]
.text:004032D0
.text:004032D0 loc_4032D0:                             ; CODE XREF: sub_403240+3B↑j
.text:004032D0                                         ; sub_403240+B4↓j ...
.text:004032D0                 add     esp, 24h
.text:004032D3                 pop     ebx
.text:004032D4                 pop     esi
.text:004032D5                 retn
.text:004032D6 ; ---------------------------------------------------------------------------
.text:004032D6
.text:004032D6 loc_4032D6:                             ; CODE XREF: sub_403240+5F↑j
.text:004032D6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004032DA                 mov     ebx, Code
.text:004032E0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:004032E8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004032EC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004032EF                 call    sub_404FC0
.text:004032F4                 jmp     short loc_4032D0
.text:004032F6 ; ---------------------------------------------------------------------------
.text:004032F6
.text:004032F6 loc_4032F6:                             ; CODE XREF: sub_403240+47↑j
.text:004032F6                 test    bl, bl
.text:004032F8                 jnz     short loc_403289
.text:004032FA                 cmp     [esp+2Ch+var_9], 0
.text:004032FF                 jnz     short loc_4032D0
.text:00403301                 jmp     short loc_403289
.text:00403303 ; ---------------------------------------------------------------------------
.text:00403303
.text:00403303 loc_403303:                             ; CODE XREF: sub_403240+33↑j
.text:00403303                 xor     esi, esi
.text:00403305                 test    al, al
.text:00403307                 jz      loc_403284
.text:0040330D                 jmp     loc_40327D
.text:0040330D sub_403240      endp
.text:0040330D
.text:0040330D ; ---------------------------------------------------------------------------
.text:00403312                 align 10h
.text:00403320
.text:00403320 ; =============== S U B R O U T I N E =======================================
.text:00403320
.text:00403320
.text:00403320 sub_403320      proc near               ; CODE XREF: sub_4019A0+2E↑p
.text:00403320                 sub     esp, 0Ch
.text:00403323                 call    _errno
.text:00403328                 mov     dword ptr [eax], 28h ; '('
.text:0040332E                 mov     eax, 0FFFFFFFFh
.text:00403333                 add     esp, 0Ch
.text:00403336                 retn
.text:00403336 sub_403320      endp
.text:00403336
.text:00403336 ; ---------------------------------------------------------------------------
.text:00403337                 align 10h
.text:00403340                 sub     esp, 0Ch
.text:00403343                 mov     edx, [esp+14h]
.text:00403347                 mov     dword ptr [esp+4], 5
.text:0040334F                 mov     [esp+8], edx
.text:00403353                 mov     edx, [esp+10h]
.text:00403357                 mov     [esp], edx
.text:0040335A                 call    sub_404990
.text:0040335F                 add     esp, 0Ch
.text:00403362                 retn
.text:00403362 ; ---------------------------------------------------------------------------
.text:00403363                 align 10h
.text:00403370
.text:00403370 ; =============== S U B R O U T I N E =======================================
.text:00403370
.text:00403370
.text:00403370 ; int __cdecl sub_403370(char *)
.text:00403370 sub_403370      proc near               ; CODE XREF: sub_401380+2FB↑p
.text:00403370                                         ; sub_401380+33C↑p ...
.text:00403370
.text:00403370 var_C           = dword ptr -0Ch
.text:00403370 var_8           = dword ptr -8
.text:00403370 var_4           = dword ptr -4
.text:00403370 arg_0           = dword ptr  4
.text:00403370
.text:00403370                 sub     esp, 0Ch
.text:00403373                 mov     edx, [esp+0Ch+arg_0]
.text:00403377                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040337F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00403386                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040338A                 call    sub_404990
.text:0040338F                 add     esp, 0Ch
.text:00403392                 retn
.text:00403392 sub_403370      endp
.text:00403392
.text:00403392 ; ---------------------------------------------------------------------------
.text:00403393                 align 10h
.text:004033A0
.text:004033A0 ; =============== S U B R O U T I N E =======================================
.text:004033A0
.text:004033A0
.text:004033A0 sub_4033A0      proc near               ; CODE XREF: sub_401380+29F↑p
.text:004033A0                                         ; sub_4019A0+217↑p ...
.text:004033A0
.text:004033A0 Size            = dword ptr -0Ch
.text:004033A0 var_4           = dword ptr -4
.text:004033A0 arg_0           = dword ptr  4
.text:004033A0 arg_4           = dword ptr  8
.text:004033A0
.text:004033A0                 sub     esp, 0Ch
.text:004033A3                 xor     edx, edx
.text:004033A5                 mov     ecx, [esp+0Ch+arg_4]
.text:004033A9                 mov     [esp+0Ch+var_4], ebx
.text:004033AD                 mov     eax, 0FFFFFFFFh
.text:004033B2                 mov     ebx, [esp+0Ch+arg_0]
.text:004033B6                 div     ecx
.text:004033B8                 cmp     eax, ebx
.text:004033BA                 jb      short loc_4033D9
.text:004033BC                 mov     edx, ebx
.text:004033BE                 imul    edx, ecx
.text:004033C1                 mov     [esp+0Ch+Size], edx ; Size
.text:004033C4                 call    malloc
.text:004033C9                 test    eax, eax
.text:004033CB                 jz      short loc_4033D5
.text:004033CD
.text:004033CD loc_4033CD:                             ; CODE XREF: sub_4033A0+37↓j
.text:004033CD                 mov     ebx, [esp+0Ch+var_4]
.text:004033D1                 add     esp, 0Ch
.text:004033D4                 retn
.text:004033D5 ; ---------------------------------------------------------------------------
.text:004033D5
.text:004033D5 loc_4033D5:                             ; CODE XREF: sub_4033A0+2B↑j
.text:004033D5                 test    ebx, ebx
.text:004033D7                 jz      short loc_4033CD
.text:004033D9
.text:004033D9 loc_4033D9:                             ; CODE XREF: sub_4033A0+1A↑j
.text:004033D9                 call    sub_403690
.text:004033D9 sub_4033A0      endp
.text:004033D9
.text:004033D9 ; ---------------------------------------------------------------------------
.text:004033DE                 align 10h
.text:004033E0
.text:004033E0 ; =============== S U B R O U T I N E =======================================
.text:004033E0
.text:004033E0
.text:004033E0 ; int __cdecl sub_4033E0(size_t)
.text:004033E0 sub_4033E0      proc near               ; CODE XREF: sub_401380+13D↑p
.text:004033E0                                         ; sub_401380+156↑p ...
.text:004033E0
.text:004033E0 Size            = dword ptr -0Ch
.text:004033E0 var_4           = dword ptr -4
.text:004033E0 arg_0           = dword ptr  4
.text:004033E0
.text:004033E0                 sub     esp, 0Ch
.text:004033E3                 mov     [esp+0Ch+var_4], ebx
.text:004033E7                 mov     ebx, [esp+0Ch+arg_0]
.text:004033EB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004033EE                 call    malloc
.text:004033F3                 test    eax, eax
.text:004033F5                 jz      short loc_403400
.text:004033F7
.text:004033F7 loc_4033F7:                             ; CODE XREF: sub_4033E0+22↓j
.text:004033F7                 mov     ebx, [esp+0Ch+var_4]
.text:004033FB                 add     esp, 0Ch
.text:004033FE                 retn
.text:004033FE ; ---------------------------------------------------------------------------
.text:004033FF                 align 10h
.text:00403400
.text:00403400 loc_403400:                             ; CODE XREF: sub_4033E0+15↑j
.text:00403400                 test    ebx, ebx
.text:00403402                 jz      short loc_4033F7
.text:00403404                 call    sub_403690
.text:00403404 sub_4033E0      endp
.text:00403404
.text:00403404 ; ---------------------------------------------------------------------------
.text:00403409                 align 10h
.text:00403410                 sub     esp, 1Ch
.text:00403413                 xor     edx, edx
.text:00403415                 mov     eax, 0FFFFFFFFh
.text:0040341A                 mov     [esp+14h], ebx
.text:0040341E                 mov     ecx, [esp+20h]
.text:00403422                 mov     ebx, [esp+28h]
.text:00403426                 mov     [esp+18h], esi
.text:0040342A                 mov     esi, [esp+24h]
.text:0040342E                 div     ebx
.text:00403430                 cmp     eax, esi
.text:00403432                 jb      short loc_403464
.text:00403434                 mov     [esp], ecx
.text:00403437                 mov     edx, esi
.text:00403439                 imul    edx, ebx
.text:0040343C                 mov     [esp+4], edx
.text:00403440                 call    realloc
.text:00403445                 test    eax, eax
.text:00403447                 mov     ecx, eax
.text:00403449                 jz      short loc_403460
.text:0040344B
.text:0040344B loc_40344B:                             ; CODE XREF: .text:00403462↓j
.text:0040344B                 mov     ebx, [esp+14h]
.text:0040344F                 mov     eax, ecx
.text:00403451                 mov     esi, [esp+18h]
.text:00403455                 add     esp, 1Ch
.text:00403458                 retn
.text:00403458 ; ---------------------------------------------------------------------------
.text:00403459                 align 10h
.text:00403460
.text:00403460 loc_403460:                             ; CODE XREF: .text:00403449↑j
.text:00403460                 test    esi, esi
.text:00403462                 jz      short loc_40344B
.text:00403464
.text:00403464 loc_403464:                             ; CODE XREF: .text:00403432↑j
.text:00403464                 call    sub_403690
.text:00403464 ; ---------------------------------------------------------------------------
.text:00403469                 align 10h
.text:00403470
.text:00403470 ; =============== S U B R O U T I N E =======================================
.text:00403470
.text:00403470
.text:00403470 ; int __cdecl sub_403470(void *, size_t)
.text:00403470 sub_403470      proc near               ; CODE XREF: sub_404DA0+5B↓p
.text:00403470
.text:00403470 Block           = dword ptr -0Ch
.text:00403470 Size            = dword ptr -8
.text:00403470 var_4           = dword ptr -4
.text:00403470 arg_0           = dword ptr  4
.text:00403470 arg_4           = dword ptr  8
.text:00403470
.text:00403470                 sub     esp, 0Ch
.text:00403473                 mov     edx, [esp+0Ch+arg_0]
.text:00403477                 mov     [esp+0Ch+var_4], ebx
.text:0040347B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040347F                 mov     [esp+0Ch+Block], edx ; Block
.text:00403482                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403486                 call    realloc
.text:0040348B                 test    eax, eax
.text:0040348D                 jz      short loc_403497
.text:0040348F
.text:0040348F loc_40348F:                             ; CODE XREF: sub_403470+29↓j
.text:0040348F                 mov     ebx, [esp+0Ch+var_4]
.text:00403493                 add     esp, 0Ch
.text:00403496                 retn
.text:00403497 ; ---------------------------------------------------------------------------
.text:00403497
.text:00403497 loc_403497:                             ; CODE XREF: sub_403470+1D↑j
.text:00403497                 test    ebx, ebx
.text:00403499                 jz      short loc_40348F
.text:0040349B                 call    sub_403690
.text:0040349B sub_403470      endp
.text:0040349B
.text:004034A0 ; ---------------------------------------------------------------------------
.text:004034A0                 jmp     sub_4035F0
.text:004034A0 ; ---------------------------------------------------------------------------
.text:004034A5                 align 10h
.text:004034B0                 sub     esp, 0Ch
.text:004034B3                 mov     edx, [esp+14h]
.text:004034B7                 mov     dword ptr [esp+8], 1
.text:004034BF                 mov     [esp+4], edx
.text:004034C3                 mov     edx, [esp+10h]
.text:004034C7                 mov     [esp], edx
.text:004034CA                 call    sub_4035F0
.text:004034CF                 add     esp, 0Ch
.text:004034D2                 retn
.text:004034D2 ; ---------------------------------------------------------------------------
.text:004034D3                 align 10h
.text:004034E0                 sub     esp, 1Ch
.text:004034E3                 mov     [esp+18h], ebx
.text:004034E7                 mov     ebx, [esp+20h]
.text:004034EB                 mov     [esp], ebx
.text:004034EE                 call    malloc
.text:004034F3                 test    eax, eax
.text:004034F5                 jz      short loc_403513
.text:004034F7
.text:004034F7 loc_4034F7:                             ; CODE XREF: .text:00403515↓j
.text:004034F7                 mov     [esp+8], ebx
.text:004034FB                 mov     dword ptr [esp+4], 0
.text:00403503                 mov     [esp], eax
.text:00403506                 call    memset
.text:0040350B                 mov     ebx, [esp+18h]
.text:0040350F                 add     esp, 1Ch
.text:00403512                 retn
.text:00403513 ; ---------------------------------------------------------------------------
.text:00403513
.text:00403513 loc_403513:                             ; CODE XREF: .text:004034F5↑j
.text:00403513                 test    ebx, ebx
.text:00403515                 jz      short loc_4034F7
.text:00403517                 call    sub_403690
.text:00403517 ; ---------------------------------------------------------------------------
.text:0040351C                 align 10h
.text:00403520                 sub     esp, 0Ch
.text:00403523                 xor     edx, edx
.text:00403525                 mov     ecx, [esp+14h]
.text:00403529                 mov     [esp+8], ebx
.text:0040352D                 mov     eax, 0FFFFFFFFh
.text:00403532                 mov     ebx, [esp+10h]
.text:00403536                 div     ecx
.text:00403538                 cmp     eax, ebx
.text:0040353A                 jb      short loc_403558
.text:0040353C                 mov     [esp+4], ecx
.text:00403540                 mov     [esp], ebx
.text:00403543                 call    calloc
.text:00403548                 test    eax, eax
.text:0040354A                 jz      short loc_403554
.text:0040354C
.text:0040354C loc_40354C:                             ; CODE XREF: .text:00403556↓j
.text:0040354C                 mov     ebx, [esp+8]
.text:00403550                 add     esp, 0Ch
.text:00403553                 retn
.text:00403554 ; ---------------------------------------------------------------------------
.text:00403554
.text:00403554 loc_403554:                             ; CODE XREF: .text:0040354A↑j
.text:00403554                 test    ebx, ebx
.text:00403556                 jz      short loc_40354C
.text:00403558
.text:00403558 loc_403558:                             ; CODE XREF: .text:0040353A↑j
.text:00403558                 call    sub_403690
.text:00403558 ; ---------------------------------------------------------------------------
.text:0040355D                 align 10h
.text:00403560                 sub     esp, 1Ch
.text:00403563                 mov     [esp+18h], ebx
.text:00403567                 mov     ebx, [esp+24h]
.text:0040356B                 mov     [esp], ebx
.text:0040356E                 call    malloc
.text:00403573                 test    eax, eax
.text:00403575                 mov     edx, eax
.text:00403577                 jz      short loc_403595
.text:00403579
.text:00403579 loc_403579:                             ; CODE XREF: .text:00403597↓j
.text:00403579                 mov     [esp+8], ebx
.text:0040357D                 mov     ecx, [esp+20h]
.text:00403581                 mov     [esp], edx
.text:00403584                 mov     [esp+4], ecx
.text:00403588                 call    memcpy
.text:0040358D                 mov     ebx, [esp+18h]
.text:00403591                 add     esp, 1Ch
.text:00403594                 retn
.text:00403595 ; ---------------------------------------------------------------------------
.text:00403595
.text:00403595 loc_403595:                             ; CODE XREF: .text:00403577↑j
.text:00403595                 test    ebx, ebx
.text:00403597                 jz      short loc_403579
.text:00403599                 call    sub_403690
.text:00403599 ; ---------------------------------------------------------------------------
.text:0040359E                 align 10h
.text:004035A0                 sub     esp, 1Ch
.text:004035A3                 mov     [esp+18h], esi
.text:004035A7                 mov     esi, [esp+20h]
.text:004035AB                 mov     [esp+14h], ebx
.text:004035AF                 mov     [esp], esi
.text:004035B2                 call    strlen
.text:004035B7                 lea     ebx, [eax+1]
.text:004035BA                 mov     [esp], ebx
.text:004035BD                 call    malloc
.text:004035C2                 test    eax, eax
.text:004035C4                 jz      short loc_4035E2
.text:004035C6
.text:004035C6 loc_4035C6:                             ; CODE XREF: .text:004035E4↓j
.text:004035C6                 mov     [esp+8], ebx
.text:004035CA                 mov     [esp+4], esi
.text:004035CE                 mov     [esp], eax
.text:004035D1                 call    memcpy
.text:004035D6                 mov     ebx, [esp+14h]
.text:004035DA                 mov     esi, [esp+18h]
.text:004035DE                 add     esp, 1Ch
.text:004035E1                 retn
.text:004035E2 ; ---------------------------------------------------------------------------
.text:004035E2
.text:004035E2 loc_4035E2:                             ; CODE XREF: .text:004035C4↑j
.text:004035E2                 test    ebx, ebx
.text:004035E4                 jz      short loc_4035C6
.text:004035E6                 call    sub_403690
.text:004035E6 ; ---------------------------------------------------------------------------
.text:004035EB                 align 10h
.text:004035F0
.text:004035F0 ; =============== S U B R O U T I N E =======================================
.text:004035F0
.text:004035F0
.text:004035F0 ; int __cdecl sub_4035F0(void *, int, int)
.text:004035F0 sub_4035F0      proc near               ; CODE XREF: .text:004034A0↑j
.text:004035F0                                         ; .text:004034CA↑p
.text:004035F0
.text:004035F0 Block           = dword ptr -1Ch
.text:004035F0 Size            = dword ptr -18h
.text:004035F0 var_C           = dword ptr -0Ch
.text:004035F0 var_8           = dword ptr -8
.text:004035F0 var_4           = dword ptr -4
.text:004035F0 arg_0           = dword ptr  4
.text:004035F0 arg_4           = dword ptr  8
.text:004035F0 arg_8           = dword ptr  0Ch
.text:004035F0
.text:004035F0                 sub     esp, 1Ch
.text:004035F3                 mov     [esp+1Ch+var_8], esi
.text:004035F7                 mov     esi, [esp+1Ch+arg_0]
.text:004035FB                 mov     [esp+1Ch+var_4], edi
.text:004035FF                 mov     edi, [esp+1Ch+arg_4]
.text:00403603                 test    esi, esi
.text:00403605                 mov     [esp+1Ch+var_C], ebx
.text:00403609                 mov     ecx, [edi]
.text:0040360B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040360F                 jz      short loc_403650
.text:00403611                 xor     edx, edx
.text:00403613                 mov     eax, 7FFFFFFFh
.text:00403618                 div     ebx
.text:0040361A                 cmp     eax, ecx
.text:0040361C                 jb      short loc_403649
.text:0040361E                 add     ecx, ecx
.text:00403620
.text:00403620 loc_403620:                             ; CODE XREF: sub_4035F0+62↓j
.text:00403620                                         ; sub_4035F0+71↓j ...
.text:00403620                 mov     [edi], ecx
.text:00403622                 imul    ebx, ecx
.text:00403625                 mov     [esp+1Ch+Block], esi ; Block
.text:00403628                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040362C                 call    realloc
.text:00403631                 test    eax, eax
.text:00403633                 jz      short loc_403645
.text:00403635
.text:00403635 loc_403635:                             ; CODE XREF: sub_4035F0+57↓j
.text:00403635                 mov     ebx, [esp+1Ch+var_C]
.text:00403639                 mov     esi, [esp+1Ch+var_8]
.text:0040363D                 mov     edi, [esp+1Ch+var_4]
.text:00403641                 add     esp, 1Ch
.text:00403644                 retn
.text:00403645 ; ---------------------------------------------------------------------------
.text:00403645
.text:00403645 loc_403645:                             ; CODE XREF: sub_4035F0+43↑j
.text:00403645                 test    ebx, ebx
.text:00403647                 jz      short loc_403635
.text:00403649
.text:00403649 loc_403649:                             ; CODE XREF: sub_4035F0+2C↑j
.text:00403649                 call    sub_403690
.text:00403649 ; ---------------------------------------------------------------------------
.text:0040364E                 align 10h
.text:00403650
.text:00403650 loc_403650:                             ; CODE XREF: sub_4035F0+1F↑j
.text:00403650                 test    ecx, ecx
.text:00403652                 jnz     short loc_403620
.text:00403654                 xor     edx, edx
.text:00403656                 mov     eax, 40h ; '@'
.text:0040365B                 div     ebx
.text:0040365D                 test    eax, eax
.text:0040365F                 mov     ecx, eax
.text:00403661                 jnz     short loc_403620
.text:00403663                 mov     ecx, 1
.text:00403668                 jmp     short loc_403620
.text:00403668 sub_4035F0      endp
.text:00403668
.text:00403668 ; ---------------------------------------------------------------------------
.text:0040366A                 align 10h
.text:00403670 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_403690+3↓o
.text:00403681 ; const char aS[]
.text:00403681 aS              db '%s',0               ; DATA XREF: sub_403690+10↓o
.text:00403684                 align 10h
.text:00403690
.text:00403690 ; =============== S U B R O U T I N E =======================================
.text:00403690
.text:00403690 ; Attributes: noreturn
.text:00403690
.text:00403690 sub_403690      proc near               ; CODE XREF: sub_402F70+35↑p
.text:00403690                                         ; sub_4033A0:loc_4033D9↑p ...
.text:00403690
.text:00403690 Code            = dword ptr -1Ch
.text:00403690 ErrorMessage    = dword ptr -18h
.text:00403690 var_14          = dword ptr -14h
.text:00403690 var_10          = byte ptr -10h
.text:00403690
.text:00403690                 sub     esp, 1Ch
.text:00403693                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040369A                 call    ds:libintl_gettext
.text:004036A0                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:004036A8                 mov     edx, Code
.text:004036AE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004036B6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004036BA                 mov     [esp+1Ch+Code], edx ; Code
.text:004036BD                 call    sub_404FC0
.text:004036C2                 call    abort
.text:004036C2 sub_403690      endp
.text:004036C2
.text:004036C2 ; ---------------------------------------------------------------------------
.text:004036C7                 align 10h
.text:004036D0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004036D0                                         ; DATA XREF: .data:Buffer↓o
.text:00403702 ; const char Format[12]
.text:00403702 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4039C0+50↓o
.text:0040370E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040371E                 db 12h dup(90h)
.text:00403730
.text:00403730 ; =============== S U B R O U T I N E =======================================
.text:00403730
.text:00403730
.text:00403730 sub_403730      proc near               ; DATA XREF: sub_4039C0+100↓o
.text:00403730                 push    esp
.text:00403731                 push    69207369h
.text:00403736                 jnb     short loc_403758
.text:00403738                 db      66h
.text:00403738                 jb      short near ptr 37A0h
.text:0040373B                 and     gs:[ebx+6Fh], dh
.text:0040373F                 db      66h
.text:0040373F                 jz      short near ptr 37B9h
.text:00403742                 popa
.text:00403743                 jb      short loc_4037AA
.text:00403745                 cmp     esp, [eax]
.text:00403747                 jnb     short near ptr loc_4037AC+2
.text:00403749                 and     gs:[eax+ebp*2+65h], dh
.text:0040374E                 and     [ebx+6Fh], dh
.text:00403751                 jnz     short loc_4037C5
.text:00403753                 arpl    [ebp+20h], sp
.text:00403756                 outsw
.text:00403758
.text:00403758 loc_403758:                             ; CODE XREF: sub_403730+6↑j
.text:00403758                 jb      short loc_40377A
.text:0040375A                 arpl    [edi+70h], bp
.text:0040375D                 jns     short loc_4037C8
.text:0040375F                 outsb
.text:00403760                 and     [bp+di+6Fh], ah
.text:00403764                 outsb
.text:00403765                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:0040376E                 and     [eax+ebp*2+65h], dl
.text:00403772                 jb      short near ptr loc_4037D8+1
.text:00403774                 and     [ecx+73h], ch
.text:00403777                 and     [esi+4Fh], cl
.text:0040377A
.text:0040377A loc_40377A:                             ; CODE XREF: sub_403730:loc_403758↑j
.text:0040377A                 or      dh, [edi+61h]
.text:0040377D                 jb      short loc_4037F1
.text:0040377F                 popa
.text:00403780                 outsb
.text:00403781                 jz      short loc_4037FC
.text:00403783                 cmp     esp, [eax]
.text:00403785                 outsb
.text:00403786                 outsd
.text:00403787                 jz      short loc_4037A9
.text:00403789                 db      65h
.text:00403789                 jbe     short loc_4037F1
.text:0040378C                 outsb
.text:0040378D                 and     [esi+6Fh], ah
.text:00403790                 jb      short near ptr loc_4037B0+2
.text:00403792                 dec     ebp
.text:00403793                 inc     ebp
.text:00403794                 push    edx
.text:00403795                 inc     ebx
.text:00403796                 dec     eax
.text:00403797                 inc     ecx
.text:00403798                 dec     esi
.text:00403799                 push    esp
.text:0040379A                 inc     ecx
.text:0040379B                 inc     edx
.text:0040379C                 dec     ecx
.text:0040379D                 dec     esp
.text:0040379E                 dec     ecx
.text:0040379F                 push    esp
.text:004037A0                 pop     ecx
.text:004037A1                 and     [edi+72h], ch
.text:004037A4                 and     [esi+49h], al
.text:004037A7                 push    esp
.text:004037A8                 dec     esi
.text:004037A9
.text:004037A9 loc_4037A9:                             ; CODE XREF: sub_403730+57↑j
.text:004037A9                 inc     ebp
.text:004037AA
.text:004037AA loc_4037AA:                             ; CODE XREF: sub_403730+13↑j
.text:004037AA                 push    ebx
.text:004037AB                 push    ebx
.text:004037AC
.text:004037AC loc_4037AC:                             ; CODE XREF: sub_403730+17↑j
.text:004037AC                 and     [esi+4Fh], al
.text:004037AF                 push    edx
.text:004037B0
.text:004037B0 loc_4037B0:                             ; CODE XREF: sub_403730+60↑j
.text:004037B0                 and     [ecx+20h], al
.text:004037B3                 push    eax
.text:004037B4                 inc     ecx
.text:004037B5                 push    edx
.text:004037B6                 push    esp
.text:004037B7                 dec     ecx
.text:004037B8                 inc     ebx
.text:004037B9                 push    ebp
.text:004037BA                 dec     esp
.text:004037BB                 inc     ecx
.text:004037BC                 push    edx
.text:004037BD                 and     [eax+55h], dl
.text:004037C0                 push    edx
.text:004037C1                 push    eax
.text:004037C2                 dec     edi
.text:004037C3                 push    ebx
.text:004037C4                 inc     ebp
.text:004037C5
.text:004037C5 loc_4037C5:                             ; CODE XREF: sub_403730+21↑j
.text:004037C5                 or      al, cs:[eax]
.text:004037C8
.text:004037C8 loc_4037C8:                             ; CODE XREF: sub_403730+2D↑j
.text:004037C8                                         ; DATA XREF: sub_4039C0:loc_403B01↓o
.text:004037C8                 push    edi
.text:004037C9                 jb      short near ptr loc_403833+1
.text:004037CB                 jz      short near ptr loc_403840+1
.text:004037CD                 outs    dx, byte ptr gs:[esi]
.text:004037CF                 and     [edx+79h], ah
.text:004037D2                 and     ds:6E612073h, ah
.text:004037D8
.text:004037D8 loc_4037D8:                             ; CODE XREF: sub_403730+42↑j
.text:004037D8                 and     fs:0A2E73h, ah
.text:004037DF
.text:004037DF loc_4037DF:                             ; DATA XREF: sub_4039C0:loc_403B0D↓o
.text:004037DF                 push    edi
.text:004037E0                 jb      short near ptr loc_40384A+1
.text:004037E2                 jz      short loc_403858
.text:004037E4                 outs    dx, byte ptr gs:[esi]
.text:004037E6                 and     [edx+79h], ah
.text:004037E9                 and     ds:25202C73h, ah
.text:004037EF                 jnb     short near ptr loc_40381A+3
.text:004037F1
.text:004037F1 loc_4037F1:                             ; CODE XREF: sub_403730+4D↑j
.text:004037F1                                         ; sub_403730+59↑j
.text:004037F1                 and     [ecx+6Eh], ah
.text:004037F4                 and     fs:0A2E73h, ah
.text:004037FB                 nop
.text:004037FC
.text:004037FC loc_4037FC:                             ; CODE XREF: sub_403730+51↑j
.text:004037FC                 nop
.text:004037FD                 nop
.text:004037FE                 nop
.text:004037FF                 nop
.text:00403800                 nop
.text:00403801                 nop
.text:00403802                 nop
.text:00403803                 nop
.text:00403804                 nop
.text:00403805                 nop
.text:00403806                 nop
.text:00403807                 nop
.text:00403808                 nop
.text:00403809                 nop
.text:0040380A                 nop
.text:0040380B                 nop
.text:0040380C                 nop
.text:0040380D                 nop
.text:0040380E                 nop
.text:0040380F                 nop
.text:0040380F sub_403730      endp ; sp-analysis failed
.text:0040380F
.text:00403810
.text:00403810 ; =============== S U B R O U T I N E =======================================
.text:00403810
.text:00403810
.text:00403810 sub_403810      proc near               ; DATA XREF: sub_4039C0:loc_403B19↓o
.text:00403810                 push    edi
.text:00403811                 jb      short near ptr loc_40387A+2
.text:00403813                 jz      short near ptr loc_403888+1
.text:00403815                 outs    dx, byte ptr gs:[esi]
.text:00403817                 and     [edx+79h], ah
.text:0040381A
.text:0040381A loc_40381A:                             ; CODE XREF: sub_403730+BF↑j
.text:0040381A                 and     ds:25202C73h, ah
.text:00403820                 jnb     short near ptr loc_40384D+1
.text:00403822                 and     ds:610A2C73h, ah
.text:00403828                 outsb
.text:00403829                 and     fs:0A2E73h, ah
.text:00403830
.text:00403830 loc_403830:                             ; DATA XREF: sub_4039C0:loc_403B25↓o
.text:00403830                 push    edi
.text:00403831                 jb      short loc_40389C
.text:00403833
.text:00403833 loc_403833:                             ; CODE XREF: sub_403730+99↑j
.text:00403833                 jz      short loc_4038A9
.text:00403835                 outs    dx, byte ptr gs:[esi]
.text:00403837                 and     [edx+79h], ah
.text:0040383A                 and     ds:25202C73h, ah
.text:00403840
.text:00403840 loc_403840:                             ; CODE XREF: sub_403730+9B↑j
.text:00403840                 jnb     short loc_40386E
.text:00403842                 and     ds:250A2C73h, ah
.text:00403848                 jnb     short near ptr loc_403875+1
.text:0040384A
.text:0040384A loc_40384A:                             ; CODE XREF: sub_403730+B0↑j
.text:0040384A                 and     [ecx+6Eh], ah
.text:0040384D
.text:0040384D loc_40384D:                             ; CODE XREF: sub_403810+10↑j
.text:0040384D                 and     fs:0A2E73h, ah
.text:00403854                 nop
.text:00403855                 nop
.text:00403856                 nop
.text:00403857                 nop
.text:00403858
.text:00403858 loc_403858:                             ; CODE XREF: sub_403730+B2↑j
.text:00403858                 nop
.text:00403859                 nop
.text:0040385A                 nop
.text:0040385B                 nop
.text:0040385C                 nop
.text:0040385D                 nop
.text:0040385E                 nop
.text:0040385F                 nop
.text:00403860                 nop
.text:00403861                 nop
.text:00403862                 nop
.text:00403863                 nop
.text:00403864                 nop
.text:00403865                 nop
.text:00403866                 nop
.text:00403867                 nop
.text:00403868                 nop
.text:00403869                 nop
.text:0040386A                 nop
.text:0040386B                 nop
.text:0040386C                 nop
.text:0040386D                 nop
.text:0040386E
.text:0040386E loc_40386E:                             ; CODE XREF: sub_403810:loc_403840↑j
.text:0040386E                 nop
.text:0040386F                 nop
.text:0040386F sub_403810      endp ; sp-analysis failed
.text:0040386F
.text:00403870
.text:00403870 ; =============== S U B R O U T I N E =======================================
.text:00403870
.text:00403870
.text:00403870 sub_403870      proc near               ; DATA XREF: sub_4039C0:loc_403B31↓o
.text:00403870                 push    edi
.text:00403871                 jb      short loc_4038DC
.text:00403873                 jz      short loc_4038E9
.text:00403875
.text:00403875 loc_403875:                             ; CODE XREF: sub_403810+38↑j
.text:00403875                 outs    dx, byte ptr gs:[esi]
.text:00403877                 and     [edx+79h], ah
.text:0040387A
.text:0040387A loc_40387A:                             ; CODE XREF: sub_403810+1↑j
.text:0040387A                 and     ds:25202C73h, ah
.text:00403880                 jnb     short loc_4038AE
.text:00403882                 and     ds:250A2C73h, ah
.text:00403888
.text:00403888 loc_403888:                             ; CODE XREF: sub_403810+3↑j
.text:00403888                 jnb     short near ptr loc_4038B5+1
.text:0040388A                 and     ds:61202C73h, ah
.text:00403890                 outsb
.text:00403891                 and     fs:0A2E73h, ah
.text:00403898                 nop
.text:00403899                 nop
.text:0040389A                 nop
.text:0040389B                 nop
.text:0040389C
.text:0040389C loc_40389C:                             ; CODE XREF: sub_403810+21↑j
.text:0040389C                 nop
.text:0040389D                 nop
.text:0040389E                 nop
.text:0040389F                 nop
.text:004038A0                 nop
.text:004038A1                 nop
.text:004038A2                 nop
.text:004038A3                 nop
.text:004038A4                 nop
.text:004038A5                 nop
.text:004038A6                 nop
.text:004038A7                 nop
.text:004038A8                 nop
.text:004038A9
.text:004038A9 loc_4038A9:                             ; CODE XREF: sub_403810:loc_403833↑j
.text:004038A9                 nop
.text:004038AA                 nop
.text:004038AB                 nop
.text:004038AC                 nop
.text:004038AD                 nop
.text:004038AE
.text:004038AE loc_4038AE:                             ; CODE XREF: sub_403870+10↑j
.text:004038AE                 nop
.text:004038AF                 nop
.text:004038AF sub_403870      endp ; sp-analysis failed
.text:004038AF
.text:004038B0
.text:004038B0 ; =============== S U B R O U T I N E =======================================
.text:004038B0
.text:004038B0
.text:004038B0 sub_4038B0      proc near               ; DATA XREF: sub_4039C0:loc_403B3D↓o
.text:004038B0                 push    edi
.text:004038B1                 jb      short near ptr loc_403919+3
.text:004038B3                 jz      short loc_403929
.text:004038B5
.text:004038B5 loc_4038B5:                             ; CODE XREF: sub_403870:loc_403888↑j
.text:004038B5                 outs    dx, byte ptr gs:[esi]
.text:004038B7                 and     [edx+79h], ah
.text:004038BA                 and     ds:25202C73h, ah
.text:004038C0                 jnb     short loc_4038EE
.text:004038C2                 and     ds:250A2C73h, ah
.text:004038C8                 jnb     short near ptr loc_4038F5+1
.text:004038CA                 and     ds:25202C73h, ah
.text:004038D0                 jnb     short near ptr loc_4038FA+4
.text:004038D2                 and     [ecx+6Eh], ah
.text:004038D5                 and     fs:0A2E73h, ah
.text:004038DC
.text:004038DC loc_4038DC:                             ; CODE XREF: sub_403870+1↑j
.text:004038DC                 nop
.text:004038DD                 nop
.text:004038DE                 nop
.text:004038DF                 nop
.text:004038E0                 nop
.text:004038E1                 nop
.text:004038E2                 nop
.text:004038E3                 nop
.text:004038E4                 nop
.text:004038E5                 nop
.text:004038E6                 nop
.text:004038E7                 nop
.text:004038E8                 nop
.text:004038E9
.text:004038E9 loc_4038E9:                             ; CODE XREF: sub_403870+3↑j
.text:004038E9                 nop
.text:004038EA                 nop
.text:004038EB                 nop
.text:004038EC                 nop
.text:004038ED                 nop
.text:004038EE
.text:004038EE loc_4038EE:                             ; CODE XREF: sub_4038B0+10↑j
.text:004038EE                 nop
.text:004038EF                 nop
.text:004038EF sub_4038B0      endp ; sp-analysis failed
.text:004038EF
.text:004038F0
.text:004038F0 ; =============== S U B R O U T I N E =======================================
.text:004038F0
.text:004038F0
.text:004038F0 sub_4038F0      proc near               ; DATA XREF: sub_4039C0:loc_403B49↓o
.text:004038F0                 push    edi
.text:004038F1                 jb      short near ptr loc_40395A+2
.text:004038F3                 jz      short near ptr loc_403964+5
.text:004038F5
.text:004038F5 loc_4038F5:                             ; CODE XREF: sub_4038B0+18↑j
.text:004038F5                 outs    dx, byte ptr gs:[esi]
.text:004038F7                 and     [edx+79h], ah
.text:004038FA
.text:004038FA loc_4038FA:                             ; CODE XREF: sub_4038B0+20↑j
.text:004038FA                 and     ds:25202C73h, ah
.text:00403900                 jnb     short loc_40392E
.text:00403902                 and     ds:250A2C73h, ah
.text:00403908                 jnb     short near ptr loc_403935+1
.text:0040390A                 and     ds:25202C73h, ah
.text:00403910                 jnb     short near ptr loc_40393A+4
.text:00403912                 and     ds:610A2C73h, ah
.text:00403918                 outsb
.text:00403919
.text:00403919 loc_403919:                             ; CODE XREF: sub_4038B0+1↑j
.text:00403919                 and     fs:0A2E73h, ah
.text:00403920                 nop
.text:00403921                 nop
.text:00403922                 nop
.text:00403923                 nop
.text:00403924                 nop
.text:00403925                 nop
.text:00403926                 nop
.text:00403927                 nop
.text:00403928                 nop
.text:00403929
.text:00403929 loc_403929:                             ; CODE XREF: sub_4038B0+3↑j
.text:00403929                 nop
.text:0040392A                 nop
.text:0040392B                 nop
.text:0040392C                 nop
.text:0040392D                 nop
.text:0040392E
.text:0040392E loc_40392E:                             ; CODE XREF: sub_4038F0+10↑j
.text:0040392E                 nop
.text:0040392F                 nop
.text:0040392F sub_4038F0      endp ; sp-analysis failed
.text:0040392F
.text:00403930
.text:00403930 ; =============== S U B R O U T I N E =======================================
.text:00403930
.text:00403930
.text:00403930 sub_403930      proc near               ; DATA XREF: sub_4039C0:loc_403B55↓o
.text:00403930                 push    edi
.text:00403931                 jb      short near ptr loc_40399A+2
.text:00403933                 jz      short near ptr loc_4039A5+4
.text:00403935
.text:00403935 loc_403935:                             ; CODE XREF: sub_4038F0+18↑j
.text:00403935                 outs    dx, byte ptr gs:[esi]
.text:00403937                 and     [edx+79h], ah
.text:0040393A
.text:0040393A loc_40393A:                             ; CODE XREF: sub_4038F0+20↑j
.text:0040393A                 and     ds:25202C73h, ah
.text:00403940                 jnb     short near ptr loc_40396A+4
.text:00403942                 and     ds:250A2C73h, ah
.text:00403948                 jnb     short near ptr loc_403975+1
.text:0040394A                 and     ds:25202C73h, ah
.text:00403950                 jnb     short near ptr loc_40397A+4
.text:00403952                 and     ds:250A2C73h, ah
.text:00403958                 jnb     short near ptr loc_403982+4
.text:0040395A
.text:0040395A loc_40395A:                             ; CODE XREF: sub_4038F0+1↑j
.text:0040395A                 and     [ecx+6Eh], ah
.text:0040395D                 and     fs:0A2E73h, ah
.text:00403964
.text:00403964 loc_403964:                             ; CODE XREF: sub_4038F0+3↑j
.text:00403964                 lea     esi, [esi+0]
.text:0040396A
.text:0040396A loc_40396A:                             ; CODE XREF: sub_403930+10↑j
.text:0040396A                 lea     edi, [edi+0]
.text:00403970
.text:00403970 loc_403970:                             ; DATA XREF: sub_4039C0:def_403A2D↓o
.text:00403970                 push    edi
.text:00403971                 jb      short near ptr loc_4039DB+1
.text:00403973                 jz      short near ptr loc_4039E8+1
.text:00403975
.text:00403975 loc_403975:                             ; CODE XREF: sub_403930+18↑j
.text:00403975                 outs    dx, byte ptr gs:[esi]
.text:00403977                 and     [edx+79h], ah
.text:0040397A
.text:0040397A loc_40397A:                             ; CODE XREF: sub_403930+20↑j
.text:0040397A                 and     ds:25202C73h, ah
.text:00403980                 jnb     short near ptr loc_4039AC+2
.text:00403982
.text:00403982 loc_403982:                             ; CODE XREF: sub_403930+28↑j
.text:00403982                 and     ds:250A2C73h, ah
.text:00403988                 jnb     short near ptr loc_4039B3+3
.text:0040398A                 and     ds:25202C73h, ah
.text:00403990                 jnb     short near ptr loc_4039B9+5
.text:00403992                 and     ds:250A2C73h, ah
.text:00403998                 jnb     short near ptr loc_4039C4+2
.text:0040399A
.text:0040399A loc_40399A:                             ; CODE XREF: sub_403930+1↑j
.text:0040399A                 and     ds:61202C73h, ah
.text:004039A0                 outsb
.text:004039A1                 and     fs:[edi+74h], ch
.text:004039A5
.text:004039A5 loc_4039A5:                             ; CODE XREF: sub_403930+3↑j
.text:004039A5                 push    2E737265h
.text:004039AA                 or      al, [eax]
.text:004039AC
.text:004039AC loc_4039AC:                             ; CODE XREF: sub_403930+50↑j
.text:004039AC                                         ; DATA XREF: sub_4039C0+1B5↓o
.text:004039AC                 and     eax, 73252073h
.text:004039B1                 or      al, [eax]
.text:004039B3
.text:004039B3 loc_4039B3:                             ; CODE XREF: sub_403930+58↑j
.text:004039B3                 lea     esi, [esi+0]
.text:004039B9
.text:004039B9 loc_4039B9:                             ; CODE XREF: sub_403930+60↑j
.text:004039B9                 lea     edi, [edi+0]
.text:004039B9 sub_403930      endp ; sp-analysis failed
.text:004039B9
.text:004039C0
.text:004039C0 ; =============== S U B R O U T I N E =======================================
.text:004039C0
.text:004039C0
.text:004039C0 ; int __cdecl sub_4039C0(FILE *, FILE *, int, int, va_list)
.text:004039C0 sub_4039C0      proc near               ; CODE XREF: sub_403150+A5↑p
.text:004039C0                                         ; .text:00403BBA↓p
.text:004039C0
.text:004039C0 Stream          = dword ptr -2Ch
.text:004039C0 Format          = dword ptr -28h
.text:004039C0 ArgList         = dword ptr -24h
.text:004039C0 var_20          = dword ptr -20h
.text:004039C0 var_1C          = dword ptr -1Ch
.text:004039C0 var_14          = dword ptr -14h
.text:004039C0 arg_0           = dword ptr  4
.text:004039C0 arg_4           = dword ptr  8
.text:004039C0 arg_8           = dword ptr  0Ch
.text:004039C0 arg_C           = dword ptr  10h
.text:004039C0 arg_10          = dword ptr  14h
.text:004039C0
.text:004039C0                 push    ebp
.text:004039C1                 push    edi
.text:004039C2                 push    esi
.text:004039C3                 push    ebx
.text:004039C4
.text:004039C4 loc_4039C4:                             ; CODE XREF: sub_403930+68↑j
.text:004039C4                 sub     esp, 1Ch
.text:004039C7                 xor     ebx, ebx
.text:004039C9                 mov     edi, [esp+2Ch+arg_10]
.text:004039CD                 mov     edx, [esp+2Ch+arg_8]
.text:004039D1                 mov     esi, [esp+2Ch+arg_0]
.text:004039D5                 mov     eax, [edi]
.text:004039D7                 mov     ecx, [esp+2Ch+arg_4]
.text:004039DB
.text:004039DB loc_4039DB:                             ; CODE XREF: sub_403930+41↑j
.text:004039DB                 mov     [esp+2Ch+var_14], edx
.text:004039DF                 mov     ebp, [esp+2Ch+arg_C]
.text:004039E3                 lea     edx, [edi+4]
.text:004039E6                 test    eax, eax
.text:004039E8
.text:004039E8 loc_4039E8:                             ; CODE XREF: sub_403930+43↑j
.text:004039E8                 jz      short loc_4039FC
.text:004039EA                 lea     esi, [esi+0]
.text:004039F0
.text:004039F0 loc_4039F0:                             ; CODE XREF: sub_4039C0+3A↓j
.text:004039F0                 mov     eax, edx
.text:004039F2                 inc     ebx
.text:004039F3                 mov     eax, [eax]
.text:004039F5                 add     edx, 4
.text:004039F8                 test    eax, eax
.text:004039FA                 jnz     short loc_4039F0
.text:004039FC
.text:004039FC loc_4039FC:                             ; CODE XREF: sub_4039C0:loc_4039E8↑j
.text:004039FC                 test    ecx, ecx
.text:004039FE                 jz      loc_403B6D
.text:00403A04                 mov     [esp+2Ch+var_1C], ebp
.text:00403A08                 mov     edx, [esp+2Ch+var_14]
.text:00403A0C                 mov     [esp+2Ch+ArgList], ecx
.text:00403A10                 mov     [esp+2Ch+Format], offset Format ; Format
.text:00403A18                 mov     [esp+2Ch+var_20], edx
.text:00403A1C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403A1F                 call    fprintf
.text:00403A24
.text:00403A24 loc_403A24:                             ; CODE XREF: sub_4039C0+1C9↓j
.text:00403A24                 cmp     ebx, 9          ; switch 10 cases
.text:00403A27                 ja      def_403A2D      ; jumptable 00403A2D default case
.text:00403A2D                 jmp     ds:jpt_403A2D[ebx*4] ; switch jump
.text:00403A2D ; ---------------------------------------------------------------------------
.text:00403A34 jpt_403A2D      dd offset loc_403A5C    ; DATA XREF: sub_4039C0+6D↑r
.text:00403A34                 dd offset loc_403A61    ; jump table for switch statement
.text:00403A34                 dd offset loc_403B01
.text:00403A34                 dd offset loc_403B0D
.text:00403A34                 dd offset loc_403B19
.text:00403A34                 dd offset loc_403B25
.text:00403A34                 dd offset loc_403B31
.text:00403A34                 dd offset loc_403B3D
.text:00403A34                 dd offset loc_403B49
.text:00403A34                 dd offset loc_403B55
.text:00403A5C ; ---------------------------------------------------------------------------
.text:00403A5C
.text:00403A5C loc_403A5C:                             ; CODE XREF: sub_4039C0+6D↑j
.text:00403A5C                                         ; DATA XREF: sub_4039C0:jpt_403A2D↑o
.text:00403A5C                 call    abort           ; jumptable 00403A2D case 0
.text:00403A61 ; ---------------------------------------------------------------------------
.text:00403A61
.text:00403A61 loc_403A61:                             ; CODE XREF: sub_4039C0+6D↑j
.text:00403A61                                         ; DATA XREF: sub_4039C0:jpt_403A2D↑o
.text:00403A61                 mov     [esp+2Ch+Stream], 40370Eh ; jumptable 00403A2D case 1
.text:00403A68                 nop
.text:00403A69                 lea     esi, [esi+0]
.text:00403A70
.text:00403A70 loc_403A70:                             ; CODE XREF: sub_4039C0+148↓j
.text:00403A70                                         ; sub_4039C0+154↓j ...
.text:00403A70                 call    ds:libintl_gettext
.text:00403A76                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00403A7A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403A7D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403A81                 call    vfprintf
.text:00403A86                 mov     ebx, [esi+4]
.text:00403A89                 dec     ebx
.text:00403A8A                 test    ebx, ebx
.text:00403A8C                 mov     [esi+4], ebx
.text:00403A8F                 js      short loc_403AEF
.text:00403A91                 mov     edi, [esi]
.text:00403A93                 mov     byte ptr [edi], 0Ah
.text:00403A96                 inc     dword ptr [esi]
.text:00403A98
.text:00403A98 loc_403A98:                             ; CODE XREF: sub_4039C0+13F↓j
.text:00403A98                 mov     [esp+2Ch+Format], esi ; Stream
.text:00403A9C                 mov     edx, Buffer
.text:00403AA2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403AA5                 call    fputs
.text:00403AAA                 mov     ebp, [esi+4]
.text:00403AAD                 dec     ebp
.text:00403AAE                 test    ebp, ebp
.text:00403AB0                 mov     [esi+4], ebp
.text:00403AB3                 js      short loc_403ADD
.text:00403AB5                 mov     ecx, [esi]
.text:00403AB7                 mov     byte ptr [ecx], 0Ah
.text:00403ABA                 inc     dword ptr [esi]
.text:00403ABC
.text:00403ABC loc_403ABC:                             ; CODE XREF: sub_4039C0+12D↓j
.text:00403ABC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403AC0                 mov     [esp+2Ch+Stream], offset sub_403730
.text:00403AC7                 call    ds:libintl_gettext
.text:00403ACD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403AD1                 add     esp, 1Ch
.text:00403AD4                 pop     ebx
.text:00403AD5                 pop     esi
.text:00403AD6                 pop     edi
.text:00403AD7                 pop     ebp
.text:00403AD8                 jmp     fputs
.text:00403ADD ; ---------------------------------------------------------------------------
.text:00403ADD
.text:00403ADD loc_403ADD:                             ; CODE XREF: sub_4039C0+F3↑j
.text:00403ADD                 mov     [esp+2Ch+Format], esi ; File
.text:00403AE1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403AE8                 call    _flsbuf
.text:00403AED                 jmp     short loc_403ABC
.text:00403AEF ; ---------------------------------------------------------------------------
.text:00403AEF
.text:00403AEF loc_403AEF:                             ; CODE XREF: sub_4039C0+CF↑j
.text:00403AEF                 mov     [esp+2Ch+Format], esi ; File
.text:00403AF3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403AFA                 call    _flsbuf
.text:00403AFF                 jmp     short loc_403A98
.text:00403B01 ; ---------------------------------------------------------------------------
.text:00403B01
.text:00403B01 loc_403B01:                             ; CODE XREF: sub_4039C0+6D↑j
.text:00403B01                                         ; DATA XREF: sub_4039C0:jpt_403A2D↑o
.text:00403B01                 mov     [esp+2Ch+Stream], offset loc_4037C8 ; jumptable 00403A2D case 2
.text:00403B08                 jmp     loc_403A70
.text:00403B0D ; ---------------------------------------------------------------------------
.text:00403B0D
.text:00403B0D loc_403B0D:                             ; CODE XREF: sub_4039C0+6D↑j
.text:00403B0D                                         ; DATA XREF: sub_4039C0:jpt_403A2D↑o
.text:00403B0D                 mov     [esp+2Ch+Stream], offset loc_4037DF ; jumptable 00403A2D case 3
.text:00403B14                 jmp     loc_403A70
.text:00403B19 ; ---------------------------------------------------------------------------
.text:00403B19
.text:00403B19 loc_403B19:                             ; CODE XREF: sub_4039C0+6D↑j
.text:00403B19                                         ; DATA XREF: sub_4039C0:jpt_403A2D↑o
.text:00403B19                 mov     [esp+2Ch+Stream], offset sub_403810 ; jumptable 00403A2D case 4
.text:00403B20                 jmp     loc_403A70
.text:00403B25 ; ---------------------------------------------------------------------------
.text:00403B25
.text:00403B25 loc_403B25:                             ; CODE XREF: sub_4039C0+6D↑j
.text:00403B25                                         ; DATA XREF: sub_4039C0:jpt_403A2D↑o
.text:00403B25                 mov     [esp+2Ch+Stream], offset loc_403830 ; jumptable 00403A2D case 5
.text:00403B2C                 jmp     loc_403A70
.text:00403B31 ; ---------------------------------------------------------------------------
.text:00403B31
.text:00403B31 loc_403B31:                             ; CODE XREF: sub_4039C0+6D↑j
.text:00403B31                                         ; DATA XREF: sub_4039C0:jpt_403A2D↑o
.text:00403B31                 mov     [esp+2Ch+Stream], offset sub_403870 ; jumptable 00403A2D case 6
.text:00403B38                 jmp     loc_403A70
.text:00403B3D ; ---------------------------------------------------------------------------
.text:00403B3D
.text:00403B3D loc_403B3D:                             ; CODE XREF: sub_4039C0+6D↑j
.text:00403B3D                                         ; DATA XREF: sub_4039C0:jpt_403A2D↑o
.text:00403B3D                 mov     [esp+2Ch+Stream], offset sub_4038B0 ; jumptable 00403A2D case 7
.text:00403B44                 jmp     loc_403A70
.text:00403B49 ; ---------------------------------------------------------------------------
.text:00403B49
.text:00403B49 loc_403B49:                             ; CODE XREF: sub_4039C0+6D↑j
.text:00403B49                                         ; DATA XREF: sub_4039C0:jpt_403A2D↑o
.text:00403B49                 mov     [esp+2Ch+Stream], offset sub_4038F0 ; jumptable 00403A2D case 8
.text:00403B50                 jmp     loc_403A70
.text:00403B55 ; ---------------------------------------------------------------------------
.text:00403B55
.text:00403B55 loc_403B55:                             ; CODE XREF: sub_4039C0+6D↑j
.text:00403B55                                         ; DATA XREF: sub_4039C0:jpt_403A2D↑o
.text:00403B55                 mov     [esp+2Ch+Stream], offset sub_403930 ; jumptable 00403A2D case 9
.text:00403B5C                 jmp     loc_403A70
.text:00403B61 ; ---------------------------------------------------------------------------
.text:00403B61
.text:00403B61 def_403A2D:                             ; CODE XREF: sub_4039C0+67↑j
.text:00403B61                 mov     [esp+2Ch+Stream], offset loc_403970 ; jumptable 00403A2D default case
.text:00403B68                 jmp     loc_403A70
.text:00403B6D ; ---------------------------------------------------------------------------
.text:00403B6D
.text:00403B6D loc_403B6D:                             ; CODE XREF: sub_4039C0+3E↑j
.text:00403B6D                 mov     [esp+2Ch+var_20], ebp
.text:00403B71                 mov     ecx, [esp+2Ch+var_14]
.text:00403B75                 mov     [esp+2Ch+Format], offset loc_4039AC ; Format
.text:00403B7D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403B80                 mov     [esp+2Ch+ArgList], ecx
.text:00403B84                 call    fprintf
.text:00403B89                 jmp     loc_403A24
.text:00403B89 sub_4039C0      endp
.text:00403B89
.text:00403B89 ; ---------------------------------------------------------------------------
.text:00403B8E                 align 10h
.text:00403B90                 sub     esp, 1Ch
.text:00403B93                 mov     edx, [esp+2Ch]
.text:00403B97                 lea     ecx, [esp+30h]
.text:00403B9B                 mov     [esp+10h], ecx
.text:00403B9F                 mov     ecx, [esp+28h]
.text:00403BA3                 mov     [esp+0Ch], edx
.text:00403BA7                 mov     edx, [esp+24h]
.text:00403BAB                 mov     [esp+8], ecx
.text:00403BAF                 mov     [esp+4], edx
.text:00403BB3                 mov     edx, [esp+20h]
.text:00403BB7                 mov     [esp], edx
.text:00403BBA                 call    sub_4039C0
.text:00403BBF                 add     esp, 1Ch
.text:00403BC2                 retn
.text:00403BC2 ; ---------------------------------------------------------------------------
.text:00403BC3                 align 10h
.text:00403BD0 aLiteral        db 'literal',0          ; DATA XREF: .text:00403C10↓o
.text:00403BD8 aShell          db 'shell',0
.text:00403BDE aShellAlways    db 'shell-always',0
.text:00403BEB aC              db 'c',0
.text:00403BED aEscape         db 'escape',0           ; DATA XREF: .text:00403C20↓o
.text:00403BF4 aLocale         db 'locale',0           ; DATA XREF: .text:00403C24↓o
.text:00403BFB aClocale        db 'clocale',0          ; DATA XREF: .text:00403C28↓o
.text:00403C03                 align 10h
.text:00403C10                 dd offset aLiteral      ; "literal"
.text:00403C14 ; ---------------------------------------------------------------------------
.text:00403C14                 fdivr   dword ptr [ebx]
.text:00403C16                 inc     eax
.text:00403C17                 add     dh, bl
.text:00403C19                 cmp     eax, [eax+0]
.text:00403C1C                 jmp     short loc_403C59
.text:00403C1C ; ---------------------------------------------------------------------------
.text:00403C1E                 dw 40h
.text:00403C20                 dd offset aEscape       ; "escape"
.text:00403C24                 dd offset aLocale       ; "locale"
.text:00403C28                 dd offset aClocale      ; "clocale"
.text:00403C2C                 dd 2 dup(0)
.text:00403C34                 dd 1, 2, 3, 4, 5, 6
.text:00403C4C asc_403C4C:                             ; DATA XREF: sub_403C60+7E↓o
.text:00403C4C                                         ; sub_403C60+A39↓o ...
.text:00403C4C                 text "UTF-16LE", '"',27h,'`'
.text:00403C52                 db 8Dh, 0B4h, 26h, 4 dup(0)
.text:00403C59 ; ---------------------------------------------------------------------------
.text:00403C59
.text:00403C59 loc_403C59:                             ; CODE XREF: .text:00403C1C↑j
.text:00403C59                 lea     edi, [edi+0]
.text:00403C60
.text:00403C60 ; =============== S U B R O U T I N E =======================================
.text:00403C60
.text:00403C60
.text:00403C60 ; int __cdecl sub_403C60(int, int, char *Str, int, int, int)
.text:00403C60 sub_403C60      proc near               ; CODE XREF: sub_403C60+43A↓p
.text:00403C60                                         ; .text:00404823↓p ...
.text:00403C60
.text:00403C60 C               = dword ptr -4Ch
.text:00403C60 Type            = dword ptr -48h
.text:00403C60 SizeInBytes     = dword ptr -44h
.text:00403C60 State           = dword ptr -40h
.text:00403C60 var_3C          = dword ptr -3Ch
.text:00403C60 var_38          = dword ptr -38h
.text:00403C60 var_34          = dword ptr -34h
.text:00403C60 var_30          = dword ptr -30h
.text:00403C60 var_29          = byte ptr -29h
.text:00403C60 var_28          = dword ptr -28h
.text:00403C60 var_22          = byte ptr -22h
.text:00403C60 var_21          = byte ptr -21h
.text:00403C60 var_20          = dword ptr -20h
.text:00403C60 var_1C          = dword ptr -1Ch
.text:00403C60 var_18          = mbstate_t ptr -18h
.text:00403C60 arg_0           = dword ptr  4
.text:00403C60 arg_4           = dword ptr  8
.text:00403C60 Str             = dword ptr  0Ch
.text:00403C60 arg_C           = dword ptr  10h
.text:00403C60 arg_10          = dword ptr  14h
.text:00403C60 arg_14          = dword ptr  18h
.text:00403C60
.text:00403C60                 push    ebp
.text:00403C61                 push    edi
.text:00403C62                 push    esi
.text:00403C63                 push    ebx
.text:00403C64                 sub     esp, 3Ch
.text:00403C67                 mov     edx, ds:__mb_cur_max
.text:00403C6D                 mov     [esp+4Ch+var_34], 0
.text:00403C75                 mov     [esp+4Ch+var_1C], 0
.text:00403C7D                 cmp     dword ptr [edx], 1
.text:00403C80                 mov     [esp+4Ch+var_20], 0
.text:00403C88                 mov     [esp+4Ch+var_21], 0
.text:00403C8D                 setz    [esp+4Ch+var_22]
.text:00403C92                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403C97                 ja      short def_403C9D ; jumptable 00403C9D default case, cases 0,1
.text:00403C99                 mov     edx, [esp+4Ch+arg_10]
.text:00403C9D                 jmp     ds:jpt_403C9D[edx*4] ; switch jump
.text:00403C9D ; ---------------------------------------------------------------------------
.text:00403CA4 jpt_403C9D      dd offset def_403C9D    ; DATA XREF: sub_403C60+3D↑r
.text:00403CA4                 dd offset def_403C9D    ; jump table for switch statement
.text:00403CA4                 dd offset loc_4045E5
.text:00403CA4                 dd offset loc_403CC0
.text:00403CA4                 dd offset loc_40460B
.text:00403CA4                 dd offset loc_404615
.text:00403CA4                 dd offset loc_404615
.text:00403CC0 ; ---------------------------------------------------------------------------
.text:00403CC0
.text:00403CC0 loc_403CC0:                             ; CODE XREF: sub_403C60+3D↑j
.text:00403CC0                                         ; DATA XREF: sub_403C60:jpt_403C9D↑o
.text:00403CC0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00403C9D case 3
.text:00403CC4                 cmp     [esp+4Ch+var_34], eax
.text:00403CC8                 jnb     short loc_403CD1
.text:00403CCA                 mov     ebx, [esp+4Ch+arg_0]
.text:00403CCE                 mov     byte ptr [ebx], 22h ; '"'
.text:00403CD1
.text:00403CD1 loc_403CD1:                             ; CODE XREF: sub_403C60+68↑j
.text:00403CD1                 mov     [esp+4Ch+var_34], 1
.text:00403CD9                 mov     [esp+4Ch+var_21], 1
.text:00403CDE                 mov     [esp+4Ch+var_1C], offset asc_403C4C ; "\"'`"
.text:00403CE6
.text:00403CE6 loc_403CE6:                             ; CODE XREF: sub_403C60+9A6↓j
.text:00403CE6                 mov     [esp+4Ch+var_20], 1
.text:00403CEE
.text:00403CEE def_403C9D:                             ; CODE XREF: sub_403C60+37↑j
.text:00403CEE                                         ; sub_403C60+3D↑j ...
.text:00403CEE                 xor     ebp, ebp        ; jumptable 00403C9D default case, cases 0,1
.text:00403CF0
.text:00403CF0 loc_403CF0:                             ; CODE XREF: sub_403C60+3DB↓j
.text:00403CF0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403CF5                 jz      loc_4045D7
.text:00403CFB                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403CFF
.text:00403CFF loc_403CFF:                             ; CODE XREF: sub_403C60+980↓j
.text:00403CFF                 jz      loc_40456E
.text:00403D05                 cmp     [esp+4Ch+var_21], 0
.text:00403D0A                 jz      short loc_403D50
.text:00403D0C                 mov     esi, [esp+4Ch+var_20]
.text:00403D10                 test    esi, esi
.text:00403D12                 jz      short loc_403D50
.text:00403D14                 mov     ecx, [esp+4Ch+var_20]
.text:00403D18                 lea     edi, [ecx+ebp]
.text:00403D1B                 cmp     edi, [esp+4Ch+arg_C]
.text:00403D1F                 ja      short loc_403D50
.text:00403D21                 cld
.text:00403D22                 mov     ebx, [esp+4Ch+Str]
.text:00403D26                 mov     edi, [esp+4Ch+var_1C]
.text:00403D2A                 add     ebx, ebp
.text:00403D2C                 mov     esi, ebx
.text:00403D2E                 cmp     ecx, ecx
.text:00403D30                 repe cmpsb
.text:00403D32                 jnz     short loc_403D50
.text:00403D34                 mov     edx, [esp+4Ch+arg_4]
.text:00403D38                 cmp     [esp+4Ch+var_34], edx
.text:00403D3C                 jnb     short loc_403D4A
.text:00403D3E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403D42                 mov     eax, [esp+4Ch+var_34]
.text:00403D46                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00403D4A
.text:00403D4A loc_403D4A:                             ; CODE XREF: sub_403C60+DC↑j
.text:00403D4A                 inc     [esp+4Ch+var_34]
.text:00403D4E                 mov     esi, esi
.text:00403D50
.text:00403D50 loc_403D50:                             ; CODE XREF: sub_403C60+AA↑j
.text:00403D50                                         ; sub_403C60+B2↑j ...
.text:00403D50                 mov     edi, [esp+4Ch+Str]
.text:00403D54                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00403D59                 movzx   eax, bl
.text:00403D5C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00403D5F                 ja      def_403D65      ; jumptable 00403D65 default case, cases 1-6,14-31,64
.text:00403D65                 jmp     ds:jpt_403D65[eax*4] ; switch jump
.text:00403D65 ; ---------------------------------------------------------------------------
.text:00403D6C jpt_403D65      dd offset loc_403F68, offset def_403D65, offset def_403D65
.text:00403D6C                                         ; DATA XREF: sub_403C60+105↑r
.text:00403D6C                 dd offset def_403D65, offset def_403D65, offset def_403D65 ; jump table for switch statement
.text:00403D6C                 dd offset def_403D65, offset loc_404040, offset loc_40405E
.text:00403D6C                 dd offset loc_404062, offset loc_4040A7, offset loc_4040AB
.text:00403D6C                 dd offset loc_4040AF, offset loc_4040B3, offset def_403D65
.text:00403D6C                 dd offset def_403D65, offset def_403D65, offset def_403D65
.text:00403D6C                 dd offset def_403D65, offset def_403D65, offset def_403D65
.text:00403D6C                 dd offset def_403D65, offset def_403D65, offset def_403D65
.text:00403D6C                 dd offset def_403D65, offset def_403D65, offset def_403D65
.text:00403D6C                 dd offset def_403D65, offset def_403D65, offset def_403D65
.text:00403D6C                 dd offset def_403D65, offset def_403D65, offset loc_404538
.text:00403D6C                 dd offset loc_404538, offset loc_404538, offset loc_40455A
.text:00403D6C                 dd offset loc_404538, offset def_404162, offset loc_404538
.text:00403D6C                 dd offset loc_4040B7, offset loc_404538, offset loc_404538
.text:00403D6C                 dd offset loc_404538, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset loc_404538
.text:00403D6C                 dd offset loc_404538, offset loc_404538, offset loc_404538
.text:00403D6C                 dd offset loc_40411C, offset def_403D65, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset loc_404538, offset loc_404531
.text:00403D6C                 dd offset def_404162, offset loc_404538, offset def_404162
.text:00403D6C                 dd offset loc_404538, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset def_404162, offset def_404162, offset def_404162
.text:00403D6C                 dd offset loc_404548, offset loc_404538, offset loc_404548
.text:00403D6C                 dd offset loc_40455A
.text:00403F68 ; ---------------------------------------------------------------------------
.text:00403F68
.text:00403F68 loc_403F68:                             ; CODE XREF: sub_403C60+105↑j
.text:00403F68                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:00403F68                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403D65 case 0
.text:00403F6D                 lea     eax, [ebp+1]
.text:00403F70                 jz      loc_404020
.text:00403F76                 mov     esi, [esp+4Ch+arg_4]
.text:00403F7A                 cmp     [esp+4Ch+var_34], esi
.text:00403F7E                 jnb     short loc_403F8C
.text:00403F80                 mov     eax, [esp+4Ch+arg_0]
.text:00403F84                 mov     ebx, [esp+4Ch+var_34]
.text:00403F88                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00403F8C
.text:00403F8C loc_403F8C:                             ; CODE XREF: sub_403C60+31E↑j
.text:00403F8C                 inc     [esp+4Ch+var_34]
.text:00403F90                 mov     edx, [esp+4Ch+arg_4]
.text:00403F94                 cmp     [esp+4Ch+var_34], edx
.text:00403F98                 jnb     short loc_403FA6
.text:00403F9A                 mov     edi, [esp+4Ch+arg_0]
.text:00403F9E                 mov     ecx, [esp+4Ch+var_34]
.text:00403FA2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403FA6
.text:00403FA6 loc_403FA6:                             ; CODE XREF: sub_403C60+338↑j
.text:00403FA6                 inc     [esp+4Ch+var_34]
.text:00403FAA                 mov     esi, [esp+4Ch+arg_4]
.text:00403FAE                 cmp     [esp+4Ch+var_34], esi
.text:00403FB2                 jnb     short loc_403FC0
.text:00403FB4                 mov     ebx, [esp+4Ch+arg_0]
.text:00403FB8                 mov     eax, [esp+4Ch+var_34]
.text:00403FBC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403FC0
.text:00403FC0 loc_403FC0:                             ; CODE XREF: sub_403C60+352↑j
.text:00403FC0                 inc     [esp+4Ch+var_34]
.text:00403FC4                 mov     bl, 30h ; '0'
.text:00403FC6                 lea     esi, [esi+0]
.text:00403FC9                 lea     edi, [edi+0]
.text:00403FD0
.text:00403FD0 def_404162:                             ; CODE XREF: sub_403C60+105↑j
.text:00403FD0                                         ; sub_403C60+463↓j ...
.text:00403FD0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403D65 cases 37,43-58,65-90,93,95,97-122
.text:00403FD0                                         ; jumptable 00404162 default case, cases 34-38,42-44,46,48-59
.text:00403FD5                 lea     eax, [ebp+1]
.text:00403FD8                 jz      short loc_404020
.text:00403FDA                 mov     cl, bl
.text:00403FDC                 mov     edi, [esp+4Ch+arg_14]
.text:00403FE0                 mov     esi, 1
.text:00403FE5                 shr     cl, 5
.text:00403FE8                 movzx   edx, cl
.text:00403FEB                 mov     ecx, ebx
.text:00403FED                 and     ecx, 1Fh
.text:00403FF0                 shl     esi, cl
.text:00403FF2                 test    [edi+edx*4+4], esi
.text:00403FF6                 jz      short loc_404012
.text:00403FF8
.text:00403FF8 loc_403FF8:                             ; CODE XREF: sub_403C60+3FC↓j
.text:00403FF8                 mov     edx, [esp+4Ch+arg_4]
.text:00403FFC                 cmp     [esp+4Ch+var_34], edx
.text:00404000                 jnb     short loc_40400E
.text:00404002                 mov     edi, [esp+4Ch+arg_0]
.text:00404006                 mov     esi, [esp+4Ch+var_34]
.text:0040400A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040400E
.text:0040400E loc_40400E:                             ; CODE XREF: sub_403C60+3A0↑j
.text:0040400E                 inc     [esp+4Ch+var_34]
.text:00404012
.text:00404012 loc_404012:                             ; CODE XREF: sub_403C60+396↑j
.text:00404012                 lea     eax, [ebp+1]
.text:00404015                 lea     esi, [esi+0]
.text:00404019                 lea     edi, [edi+0]
.text:00404020
.text:00404020 loc_404020:                             ; CODE XREF: sub_403C60+310↑j
.text:00404020                                         ; sub_403C60+378↑j ...
.text:00404020                 mov     ebp, [esp+4Ch+arg_4]
.text:00404024                 cmp     [esp+4Ch+var_34], ebp
.text:00404028                 jnb     short loc_404035
.text:0040402A                 mov     edx, [esp+4Ch+arg_0]
.text:0040402E                 mov     ecx, [esp+4Ch+var_34]
.text:00404032                 mov     [ecx+edx], bl
.text:00404035
.text:00404035 loc_404035:                             ; CODE XREF: sub_403C60+3C8↑j
.text:00404035                 inc     [esp+4Ch+var_34]
.text:00404039                 mov     ebp, eax
.text:0040403B                 jmp     loc_403CF0
.text:00404040 ; ---------------------------------------------------------------------------
.text:00404040
.text:00404040 loc_404040:                             ; CODE XREF: sub_403C60+105↑j
.text:00404040                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:00404040                 mov     dl, 61h ; 'a'   ; jumptable 00403D65 case 7
.text:00404042                 lea     esi, [esi+0]
.text:00404049                 lea     edi, [edi+0]
.text:00404050
.text:00404050 loc_404050:                             ; CODE XREF: sub_403C60+400↓j
.text:00404050                                         ; sub_403C60+409↓j ...
.text:00404050                 cmp     [esp+4Ch+var_21], 0
.text:00404055                 lea     eax, [ebp+1]
.text:00404058                 jz      short loc_404020
.text:0040405A                 mov     bl, dl
.text:0040405C                 jmp     short loc_403FF8
.text:0040405E ; ---------------------------------------------------------------------------
.text:0040405E
.text:0040405E loc_40405E:                             ; CODE XREF: sub_403C60+105↑j
.text:0040405E                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:0040405E                 mov     dl, 62h ; 'b'   ; jumptable 00403D65 case 8
.text:00404060                 jmp     short loc_404050
.text:00404062 ; ---------------------------------------------------------------------------
.text:00404062
.text:00404062 loc_404062:                             ; CODE XREF: sub_403C60+105↑j
.text:00404062                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:00404062                 mov     dl, 74h ; 't'   ; jumptable 00403D65 case 9
.text:00404064
.text:00404064 loc_404064:                             ; CODE XREF: sub_403C60+449↓j
.text:00404064                                         ; sub_403C60+455↓j ...
.text:00404064                 cmp     [esp+4Ch+arg_10], 1
.text:00404069                 jnz     short loc_404050
.text:0040406B
.text:0040406B loc_40406B:                             ; CODE XREF: sub_403C60+45C↓j
.text:0040406B                                         ; sub_403C60+4C1↓j ...
.text:0040406B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404432 cases 91,92,94,96,124
.text:00404073                 mov     eax, [esp+4Ch+arg_14]
.text:00404077                 mov     edx, [esp+4Ch+arg_C]
.text:0040407B                 mov     ecx, [esp+4Ch+Str]
.text:0040407F                 mov     ebx, [esp+4Ch+arg_4]
.text:00404083                 mov     [esp+4Ch+var_38], eax ; int
.text:00404087                 mov     ebp, [esp+4Ch+arg_0]
.text:0040408B                 mov     [esp+4Ch+State], edx ; int
.text:0040408F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00404093                 mov     [esp+4Ch+Type], ebx ; int
.text:00404097                 mov     [esp+4Ch+C], ebp ; int
.text:0040409A                 call    sub_403C60
.text:0040409F
.text:0040409F loc_40409F:                             ; CODE XREF: sub_403C60+972↓j
.text:0040409F                 add     esp, 3Ch
.text:004040A2                 pop     ebx
.text:004040A3                 pop     esi
.text:004040A4                 pop     edi
.text:004040A5                 pop     ebp
.text:004040A6                 retn
.text:004040A7 ; ---------------------------------------------------------------------------
.text:004040A7
.text:004040A7 loc_4040A7:                             ; CODE XREF: sub_403C60+105↑j
.text:004040A7                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:004040A7                 mov     dl, 6Eh ; 'n'   ; jumptable 00403D65 case 10
.text:004040A9                 jmp     short loc_404064
.text:004040AB ; ---------------------------------------------------------------------------
.text:004040AB
.text:004040AB loc_4040AB:                             ; CODE XREF: sub_403C60+105↑j
.text:004040AB                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:004040AB                 mov     dl, 76h ; 'v'   ; jumptable 00403D65 case 11
.text:004040AD                 jmp     short loc_404050
.text:004040AF ; ---------------------------------------------------------------------------
.text:004040AF
.text:004040AF loc_4040AF:                             ; CODE XREF: sub_403C60+105↑j
.text:004040AF                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:004040AF                 mov     dl, 66h ; 'f'   ; jumptable 00403D65 case 12
.text:004040B1                 jmp     short loc_404050
.text:004040B3 ; ---------------------------------------------------------------------------
.text:004040B3
.text:004040B3 loc_4040B3:                             ; CODE XREF: sub_403C60+105↑j
.text:004040B3                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:004040B3                 mov     dl, 72h ; 'r'   ; jumptable 00403D65 case 13
.text:004040B5                 jmp     short loc_404064
.text:004040B7 ; ---------------------------------------------------------------------------
.text:004040B7
.text:004040B7 loc_4040B7:                             ; CODE XREF: sub_403C60+105↑j
.text:004040B7                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:004040B7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403D65 case 39
.text:004040BC                 jz      short loc_40406B ; jumptable 00404432 cases 91,92,94,96,124
.text:004040BE                 cmp     [esp+4Ch+arg_10], 2
.text:004040C3                 jnz     def_404162      ; jumptable 00403D65 cases 37,43-58,65-90,93,95,97-122
.text:004040C3                                         ; jumptable 00404162 default case, cases 34-38,42-44,46,48-59
.text:004040C9                 mov     edx, [esp+4Ch+arg_4]
.text:004040CD                 cmp     [esp+4Ch+var_34], edx
.text:004040D1                 jnb     short loc_4040DF
.text:004040D3                 mov     ecx, [esp+4Ch+arg_0]
.text:004040D7                 mov     edi, [esp+4Ch+var_34]
.text:004040DB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004040DF
.text:004040DF loc_4040DF:                             ; CODE XREF: sub_403C60+471↑j
.text:004040DF                 inc     [esp+4Ch+var_34]
.text:004040E3                 mov     eax, [esp+4Ch+arg_4]
.text:004040E7                 cmp     [esp+4Ch+var_34], eax
.text:004040EB                 jnb     short loc_4040F9
.text:004040ED                 mov     esi, [esp+4Ch+arg_0]
.text:004040F1                 mov     edx, [esp+4Ch+var_34]
.text:004040F5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004040F9
.text:004040F9 loc_4040F9:                             ; CODE XREF: sub_403C60+48B↑j
.text:004040F9                 inc     [esp+4Ch+var_34]
.text:004040FD                 mov     edi, [esp+4Ch+arg_4]
.text:00404101                 cmp     [esp+4Ch+var_34], edi
.text:00404105                 jnb     short loc_404113
.text:00404107                 mov     ecx, [esp+4Ch+arg_0]
.text:0040410B                 mov     eax, [esp+4Ch+var_34]
.text:0040410F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404113
.text:00404113 loc_404113:                             ; CODE XREF: sub_403C60+4A5↑j
.text:00404113                                         ; sub_403C60+5C4↓j ...
.text:00404113                 inc     [esp+4Ch+var_34]
.text:00404117                 jmp     def_404162      ; jumptable 00403D65 cases 37,43-58,65-90,93,95,97-122
.text:00404117                                         ; jumptable 00404162 default case, cases 34-38,42-44,46,48-59
.text:0040411C ; ---------------------------------------------------------------------------
.text:0040411C
.text:0040411C loc_40411C:                             ; CODE XREF: sub_403C60+105↑j
.text:0040411C                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:0040411C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403D65 case 63
.text:00404121                 jz      loc_40406B      ; jumptable 00404432 cases 91,92,94,96,124
.text:00404127                 cmp     [esp+4Ch+arg_10], 3
.text:0040412C                 jnz     def_404162      ; jumptable 00403D65 cases 37,43-58,65-90,93,95,97-122
.text:0040412C                                         ; jumptable 00404162 default case, cases 34-38,42-44,46,48-59
.text:00404132                 lea     edx, [ebp+2]
.text:00404135                 cmp     edx, [esp+4Ch+arg_C]
.text:00404139                 jnb     def_404162      ; jumptable 00403D65 cases 37,43-58,65-90,93,95,97-122
.text:00404139                                         ; jumptable 00404162 default case, cases 34-38,42-44,46,48-59
.text:0040413F                 mov     esi, [esp+4Ch+Str]
.text:00404143                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404148                 jnz     def_404162      ; jumptable 00403D65 cases 37,43-58,65-90,93,95,97-122
.text:00404148                                         ; jumptable 00404162 default case, cases 34-38,42-44,46,48-59
.text:0040414E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404153                 movsx   eax, cl
.text:00404156                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404159                 cmp     eax, 1Dh
.text:0040415C                 ja      def_404162      ; jumptable 00403D65 cases 37,43-58,65-90,93,95,97-122
.text:0040415C                                         ; jumptable 00404162 default case, cases 34-38,42-44,46,48-59
.text:00404162                 jmp     ds:jpt_404162[eax*4] ; switch jump
.text:00404162 ; ---------------------------------------------------------------------------
.text:00404169                 align 4
.text:0040416C jpt_404162      dd offset loc_4041E4    ; DATA XREF: sub_403C60+502↑r
.text:0040416C                 dd offset def_404162    ; jump table for switch statement
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset loc_4041E4
.text:0040416C                 dd offset loc_4041E4
.text:0040416C                 dd offset loc_4041E4
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset loc_4041E4
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset loc_4041E4
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset def_404162
.text:0040416C                 dd offset loc_4041E4
.text:0040416C                 dd offset loc_4041E4
.text:0040416C                 dd offset loc_4041E4
.text:004041E4 ; ---------------------------------------------------------------------------
.text:004041E4
.text:004041E4 loc_4041E4:                             ; CODE XREF: sub_403C60+502↑j
.text:004041E4                                         ; DATA XREF: sub_403C60:jpt_404162↑o
.text:004041E4                 mov     ebp, edx        ; jumptable 00404162 cases 33,39-41,45,47,60-62
.text:004041E6                 mov     bl, cl
.text:004041E8                 mov     edx, [esp+4Ch+arg_4]
.text:004041EC                 cmp     [esp+4Ch+var_34], edx
.text:004041F0                 jnb     short loc_4041FE
.text:004041F2                 mov     ecx, [esp+4Ch+arg_0]
.text:004041F6                 mov     edi, [esp+4Ch+var_34]
.text:004041FA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004041FE
.text:004041FE loc_4041FE:                             ; CODE XREF: sub_403C60+590↑j
.text:004041FE                 inc     [esp+4Ch+var_34]
.text:00404202                 mov     eax, [esp+4Ch+arg_4]
.text:00404206                 cmp     [esp+4Ch+var_34], eax
.text:0040420A                 jnb     short loc_404218
.text:0040420C                 mov     edx, [esp+4Ch+arg_0]
.text:00404210                 mov     esi, [esp+4Ch+var_34]
.text:00404214                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404218
.text:00404218 loc_404218:                             ; CODE XREF: sub_403C60+5AA↑j
.text:00404218                 inc     [esp+4Ch+var_34]
.text:0040421C                 mov     edi, [esp+4Ch+arg_4]
.text:00404220                 cmp     [esp+4Ch+var_34], edi
.text:00404224                 jnb     loc_404113
.text:0040422A                 mov     eax, [esp+4Ch+arg_0]
.text:0040422E                 mov     ecx, [esp+4Ch+var_34]
.text:00404232                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404236                 jmp     loc_404113
.text:00404236 ; ---------------------------------------------------------------------------
.text:0040423B                 align 10h
.text:00404240
.text:00404240 def_403D65:                             ; CODE XREF: sub_403C60+FF↑j
.text:00404240                                         ; sub_403C60+105↑j
.text:00404240                                         ; DATA XREF: ...
.text:00404240                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403D65 default case, cases 1-6,14-31,64
.text:00404245                 jz      loc_404370
.text:0040424B                 mov     [esp+4Ch+var_28], 1
.text:00404253                 mov     esi, ds:__mb_cur_max
.text:00404259                 movzx   edx, bl
.text:0040425C                 cmp     dword ptr [esi], 1
.text:0040425F                 jz      loc_404354
.text:00404265                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040426D                 mov     [esp+4Ch+C], edx ; C
.text:00404270                 call    _isctype
.text:00404275
.text:00404275 loc_404275:                             ; CODE XREF: sub_403C60+705↓j
.text:00404275                 test    eax, eax
.text:00404277                 setnz   [esp+4Ch+var_29]
.text:0040427C
.text:0040427C loc_40427C:                             ; CODE XREF: sub_403C60+7A5↓j
.text:0040427C                 cmp     [esp+4Ch+var_21], 0
.text:00404281                 lea     eax, [ebp+1]
.text:00404284                 jz      loc_404020
.text:0040428A                 cmp     [esp+4Ch+var_29], 0
.text:0040428F                 jnz     def_404162      ; jumptable 00403D65 cases 37,43-58,65-90,93,95,97-122
.text:0040428F                                         ; jumptable 00404162 default case, cases 34-38,42-44,46,48-59
.text:00404295
.text:00404295 loc_404295:                             ; CODE XREF: sub_403C60+7AB↓j
.text:00404295                 mov     eax, [esp+4Ch+var_28]
.text:00404299                 lea     edx, [eax+ebp]
.text:0040429C                 lea     esi, [esi+0]
.text:004042A0
.text:004042A0 loc_4042A0:                             ; CODE XREF: sub_403C60+6EF↓j
.text:004042A0                 cmp     [esp+4Ch+var_21], 0
.text:004042A5                 jz      short loc_404320
.text:004042A7                 cmp     [esp+4Ch+var_29], 0
.text:004042AC                 jnz     short loc_404320
.text:004042AE                 mov     edi, [esp+4Ch+arg_4]
.text:004042B2                 cmp     [esp+4Ch+var_34], edi
.text:004042B6                 jnb     short loc_4042C4
.text:004042B8                 mov     esi, [esp+4Ch+arg_0]
.text:004042BC                 mov     eax, [esp+4Ch+var_34]
.text:004042C0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004042C4
.text:004042C4 loc_4042C4:                             ; CODE XREF: sub_403C60+656↑j
.text:004042C4                 inc     [esp+4Ch+var_34]
.text:004042C8                 mov     ecx, [esp+4Ch+arg_4]
.text:004042CC                 cmp     [esp+4Ch+var_34], ecx
.text:004042D0                 jnb     short loc_4042E5
.text:004042D2                 mov     cl, bl
.text:004042D4                 mov     esi, [esp+4Ch+arg_0]
.text:004042D8                 mov     edi, [esp+4Ch+var_34]
.text:004042DC                 shr     cl, 6
.text:004042DF                 add     cl, 30h ; '0'
.text:004042E2                 mov     [edi+esi], cl
.text:004042E5
.text:004042E5 loc_4042E5:                             ; CODE XREF: sub_403C60+670↑j
.text:004042E5                 inc     [esp+4Ch+var_34]
.text:004042E9                 mov     edi, [esp+4Ch+arg_4]
.text:004042ED                 cmp     [esp+4Ch+var_34], edi
.text:004042F1                 jnb     short loc_404309
.text:004042F3                 mov     cl, bl
.text:004042F5                 mov     esi, [esp+4Ch+arg_0]
.text:004042F9                 shr     cl, 3
.text:004042FC                 mov     edi, [esp+4Ch+var_34]
.text:00404300                 and     cl, 7
.text:00404303                 add     cl, 30h ; '0'
.text:00404306                 mov     [edi+esi], cl
.text:00404309
.text:00404309 loc_404309:                             ; CODE XREF: sub_403C60+691↑j
.text:00404309                 inc     [esp+4Ch+var_34]
.text:0040430D                 and     bl, 7
.text:00404310                 add     bl, 30h ; '0'
.text:00404313                 lea     esi, [esi+0]
.text:00404319                 lea     edi, [edi+0]
.text:00404320
.text:00404320 loc_404320:                             ; CODE XREF: sub_403C60+645↑j
.text:00404320                                         ; sub_403C60+64C↑j
.text:00404320                 lea     eax, [ebp+1]
.text:00404323                 cmp     edx, eax
.text:00404325                 jbe     loc_404020
.text:0040432B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040432F                 cmp     [esp+4Ch+var_34], ebp
.text:00404333                 jnb     short loc_404340
.text:00404335                 mov     ecx, [esp+4Ch+arg_0]
.text:00404339                 mov     edi, [esp+4Ch+var_34]
.text:0040433D                 mov     [edi+ecx], bl
.text:00404340
.text:00404340 loc_404340:                             ; CODE XREF: sub_403C60+6D3↑j
.text:00404340                 inc     [esp+4Ch+var_34]
.text:00404344                 mov     ebp, eax
.text:00404346                 mov     eax, [esp+4Ch+Str]
.text:0040434A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040434F                 jmp     loc_4042A0
.text:00404354 ; ---------------------------------------------------------------------------
.text:00404354
.text:00404354 loc_404354:                             ; CODE XREF: sub_403C60+5FF↑j
.text:00404354                 mov     ecx, ds:_pctype
.text:0040435A                 mov     edi, [ecx]
.text:0040435C                 movzx   eax, word ptr [edi+edx*2]
.text:00404360                 and     eax, 157h
.text:00404365                 jmp     loc_404275
.text:00404365 ; ---------------------------------------------------------------------------
.text:0040436A                 align 10h
.text:00404370
.text:00404370 loc_404370:                             ; CODE XREF: sub_403C60+5E5↑j
.text:00404370                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404375                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040437D                 mov     [esp+4Ch+var_28], 0
.text:00404385                 mov     [esp+4Ch+var_29], 1
.text:0040438A                 jz      loc_40451C
.text:00404390
.text:00404390 loc_404390:                             ; CODE XREF: sub_403C60+8CC↓j
.text:00404390                 mov     ecx, [esp+4Ch+arg_C]
.text:00404394                 lea     edx, [esp+4Ch+var_18]
.text:00404398                 mov     edi, [esp+4Ch+Str]
.text:0040439C                 mov     [esp+4Ch+State], edx ; State
.text:004043A0                 lea     esi, [esp+4Ch+var_18._State]
.text:004043A4                 sub     ecx, ebp
.text:004043A6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004043AA                 add     edi, ebp
.text:004043AC                 mov     [esp+4Ch+var_30], edi
.text:004043B0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004043B4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004043B7                 call    mbrtowc
.text:004043BC                 test    eax, eax
.text:004043BE                 mov     edi, eax
.text:004043C0                 jz      short loc_404400
.text:004043C2                 cmp     eax, 0FFFFFFFFh
.text:004043C5                 jz      loc_404512
.text:004043CB                 cmp     eax, 0FFFFFFFEh
.text:004043CE                 jz      loc_4044D2
.text:004043D4                 cmp     [esp+4Ch+arg_10], 1
.text:004043D9                 jz      short loc_404410
.text:004043DB
.text:004043DB loc_4043DB:                             ; CODE XREF: sub_403C60+7B9↓j
.text:004043DB                                         ; sub_403C60+86D↓j
.text:004043DB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004043E0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004043E8                 mov     [esp+4Ch+C], ecx ; C
.text:004043EB                 call    iswctype
.text:004043F0                 test    eax, eax
.text:004043F2                 jnz     short loc_4043F9
.text:004043F4                 mov     [esp+4Ch+var_29], 0
.text:004043F9
.text:004043F9 loc_4043F9:                             ; CODE XREF: sub_403C60+792↑j
.text:004043F9                 mov     [esp+4Ch+var_28], edi
.text:004043FD                 lea     esi, [esi+0]
.text:00404400
.text:00404400 loc_404400:                             ; CODE XREF: sub_403C60+760↑j
.text:00404400                                         ; sub_403C60+87B↓j ...
.text:00404400                 cmp     [esp+4Ch+var_28], 1
.text:00404405                 jbe     loc_40427C
.text:0040440B                 jmp     loc_404295
.text:00404410 ; ---------------------------------------------------------------------------
.text:00404410
.text:00404410 loc_404410:                             ; CODE XREF: sub_403C60+779↑j
.text:00404410                 cmp     [esp+4Ch+arg_10], eax
.text:00404414                 mov     edx, 1
.text:00404419                 jnb     short loc_4043DB
.text:0040441B
.text:0040441B loc_40441B:                             ; CODE XREF: sub_403C60+867↓j
.text:0040441B                 mov     ecx, [esp+4Ch+Str]
.text:0040441F                 lea     esi, [edx+ebp]
.text:00404422                 movsx   eax, byte ptr [esi+ecx]
.text:00404426                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404429                 cmp     eax, 21h
.text:0040442C                 ja      def_404432      ; jumptable 00404432 default case, cases 93,95,97-123
.text:00404432                 jmp     ds:jpt_404432[eax*4] ; switch jump
.text:00404432 ; ---------------------------------------------------------------------------
.text:00404439                 align 4
.text:0040443C jpt_404432      dd offset loc_40406B    ; DATA XREF: sub_403C60+7D2↑r
.text:0040443C                 dd offset loc_40406B    ; jump table for switch statement
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset loc_40406B
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset loc_40406B
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset def_404432
.text:0040443C                 dd offset loc_40406B
.text:004044C4 ; ---------------------------------------------------------------------------
.text:004044C4
.text:004044C4 def_404432:                             ; CODE XREF: sub_403C60+7CC↑j
.text:004044C4                                         ; sub_403C60+7D2↑j
.text:004044C4                                         ; DATA XREF: ...
.text:004044C4                 inc     edx             ; jumptable 00404432 default case, cases 93,95,97-123
.text:004044C5                 cmp     edx, edi
.text:004044C7                 jb      loc_40441B
.text:004044CD                 jmp     loc_4043DB
.text:004044D2 ; ---------------------------------------------------------------------------
.text:004044D2
.text:004044D2 loc_4044D2:                             ; CODE XREF: sub_403C60+76E↑j
.text:004044D2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004044D6                 mov     [esp+4Ch+var_29], 0
.text:004044DB                 jnb     loc_404400
.text:004044E1                 mov     eax, [esp+4Ch+var_30]
.text:004044E5                 cmp     byte ptr [eax], 0
.text:004044E8                 jz      loc_404400
.text:004044EE
.text:004044EE loc_4044EE:                             ; CODE XREF: sub_403C60+8AB↓j
.text:004044EE                 inc     [esp+4Ch+var_28]
.text:004044F2                 mov     esi, [esp+4Ch+var_28]
.text:004044F6                 lea     eax, [esi+ebp]
.text:004044F9                 cmp     eax, [esp+4Ch+arg_C]
.text:004044FD                 jnb     loc_404400
.text:00404503                 mov     edi, [esp+4Ch+Str]
.text:00404507                 cmp     byte ptr [eax+edi], 0
.text:0040450B                 jnz     short loc_4044EE
.text:0040450D                 jmp     loc_404400
.text:00404512 ; ---------------------------------------------------------------------------
.text:00404512
.text:00404512 loc_404512:                             ; CODE XREF: sub_403C60+765↑j
.text:00404512                 mov     [esp+4Ch+var_29], 0
.text:00404517                 jmp     loc_404400
.text:0040451C ; ---------------------------------------------------------------------------
.text:0040451C
.text:0040451C loc_40451C:                             ; CODE XREF: sub_403C60+72A↑j
.text:0040451C                 mov     edx, [esp+4Ch+Str]
.text:00404520                 mov     [esp+4Ch+C], edx ; Str
.text:00404523                 call    strlen
.text:00404528                 mov     [esp+4Ch+arg_C], eax
.text:0040452C                 jmp     loc_404390
.text:00404531 ; ---------------------------------------------------------------------------
.text:00404531
.text:00404531 loc_404531:                             ; CODE XREF: sub_403C60+105↑j
.text:00404531                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:00404531                 mov     dl, bl          ; jumptable 00403D65 case 92
.text:00404533                 jmp     loc_404064
.text:00404538 ; ---------------------------------------------------------------------------
.text:00404538
.text:00404538 loc_404538:                             ; CODE XREF: sub_403C60+105↑j
.text:00404538                                         ; sub_403C60+902↓j
.text:00404538                                         ; DATA XREF: ...
.text:00404538                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403D65 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040453D                 jnz     def_404162      ; jumptable 00403D65 cases 37,43-58,65-90,93,95,97-122
.text:0040453D                                         ; jumptable 00404162 default case, cases 34-38,42-44,46,48-59
.text:00404543                 jmp     loc_40406B      ; jumptable 00404432 cases 91,92,94,96,124
.text:00404548 ; ---------------------------------------------------------------------------
.text:00404548
.text:00404548 loc_404548:                             ; CODE XREF: sub_403C60+105↑j
.text:00404548                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:00404548                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403D65 cases 123,125
.text:0040454D                 jz      short loc_404564
.text:0040454F                 cmp     [esp+4Ch+arg_C], 1
.text:00404554
.text:00404554 loc_404554:                             ; CODE XREF: sub_403C60+90C↓j
.text:00404554                 jnz     def_404162      ; jumptable 00403D65 cases 37,43-58,65-90,93,95,97-122
.text:00404554                                         ; jumptable 00404162 default case, cases 34-38,42-44,46,48-59
.text:0040455A
.text:0040455A loc_40455A:                             ; CODE XREF: sub_403C60+105↑j
.text:0040455A                                         ; DATA XREF: sub_403C60:jpt_403D65↑o
.text:0040455A                 test    ebp, ebp        ; jumptable 00403D65 cases 35,126
.text:0040455C                 jnz     def_404162      ; jumptable 00403D65 cases 37,43-58,65-90,93,95,97-122
.text:0040455C                                         ; jumptable 00404162 default case, cases 34-38,42-44,46,48-59
.text:00404562                 jmp     short loc_404538 ; jumptable 00403D65 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404564 ; ---------------------------------------------------------------------------
.text:00404564
.text:00404564 loc_404564:                             ; CODE XREF: sub_403C60+8ED↑j
.text:00404564                 mov     esi, [esp+4Ch+Str]
.text:00404568                 cmp     byte ptr [esi+1], 0
.text:0040456C                 jmp     short loc_404554
.text:0040456E ; ---------------------------------------------------------------------------
.text:0040456E
.text:0040456E loc_40456E:                             ; CODE XREF: sub_403C60:loc_403CFF↑j
.text:0040456E                 test    ebp, ebp
.text:00404570                 jnz     short loc_40457D
.text:00404572                 cmp     [esp+4Ch+arg_10], 1
.text:00404577                 jz      loc_40406B      ; jumptable 00404432 cases 91,92,94,96,124
.text:0040457D
.text:0040457D loc_40457D:                             ; CODE XREF: sub_403C60+910↑j
.text:0040457D                 mov     esi, [esp+4Ch+var_1C]
.text:00404581                 test    esi, esi
.text:00404583                 jz      short loc_4045B8
.text:00404585                 mov     edi, [esp+4Ch+var_1C]
.text:00404589                 movzx   eax, byte ptr [edi]
.text:0040458C                 test    al, al
.text:0040458E                 jz      short loc_4045B8
.text:00404590
.text:00404590 loc_404590:                             ; CODE XREF: sub_403C60+956↓j
.text:00404590                 mov     ebp, [esp+4Ch+arg_4]
.text:00404594                 cmp     [esp+4Ch+var_34], ebp
.text:00404598                 jnb     short loc_4045A5
.text:0040459A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040459E                 mov     ebx, [esp+4Ch+var_34]
.text:004045A2                 mov     [ebx+ecx], al
.text:004045A5
.text:004045A5 loc_4045A5:                             ; CODE XREF: sub_403C60+938↑j
.text:004045A5                 inc     [esp+4Ch+var_1C]
.text:004045A9                 inc     [esp+4Ch+var_34]
.text:004045AD                 mov     edx, [esp+4Ch+var_1C]
.text:004045B1                 movzx   eax, byte ptr [edx]
.text:004045B4                 test    al, al
.text:004045B6                 jnz     short loc_404590
.text:004045B8
.text:004045B8 loc_4045B8:                             ; CODE XREF: sub_403C60+923↑j
.text:004045B8                                         ; sub_403C60+92E↑j
.text:004045B8                 mov     eax, [esp+4Ch+arg_4]
.text:004045BC                 cmp     [esp+4Ch+var_34], eax
.text:004045C0                 jnb     short loc_4045CE
.text:004045C2                 mov     edi, [esp+4Ch+arg_0]
.text:004045C6                 mov     esi, [esp+4Ch+var_34]
.text:004045CA                 mov     byte ptr [esi+edi], 0
.text:004045CE
.text:004045CE loc_4045CE:                             ; CODE XREF: sub_403C60+960↑j
.text:004045CE                 mov     eax, [esp+4Ch+var_34]
.text:004045D2                 jmp     loc_40409F
.text:004045D7 ; ---------------------------------------------------------------------------
.text:004045D7
.text:004045D7 loc_4045D7:                             ; CODE XREF: sub_403C60+95↑j
.text:004045D7                 mov     ebx, [esp+4Ch+Str]
.text:004045DB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004045E0                 jmp     loc_403CFF
.text:004045E5 ; ---------------------------------------------------------------------------
.text:004045E5
.text:004045E5 loc_4045E5:                             ; CODE XREF: sub_403C60+3D↑j
.text:004045E5                                         ; DATA XREF: sub_403C60:jpt_403C9D↑o
.text:004045E5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00403C9D case 2
.text:004045E9                 cmp     [esp+4Ch+var_34], edx
.text:004045ED                 jnb     short loc_4045F6
.text:004045EF                 mov     ecx, [esp+4Ch+arg_0]
.text:004045F3                 mov     byte ptr [ecx], 27h ; '''
.text:004045F6
.text:004045F6 loc_4045F6:                             ; CODE XREF: sub_403C60+98D↑j
.text:004045F6                 mov     [esp+4Ch+var_34], 1
.text:004045FE                 mov     [esp+4Ch+var_1C], 403C4Eh
.text:00404606                 jmp     loc_403CE6
.text:0040460B ; ---------------------------------------------------------------------------
.text:0040460B
.text:0040460B loc_40460B:                             ; CODE XREF: sub_403C60+3D↑j
.text:0040460B                                         ; DATA XREF: sub_403C60:jpt_403C9D↑o
.text:0040460B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00403C9D case 4
.text:00404610                 jmp     def_403C9D      ; jumptable 00403C9D default case, cases 0,1
.text:00404615 ; ---------------------------------------------------------------------------
.text:00404615
.text:00404615 loc_404615:                             ; CODE XREF: sub_403C60+3D↑j
.text:00404615                                         ; DATA XREF: sub_403C60:jpt_403C9D↑o
.text:00404615                 mov     [esp+4Ch+C], 403C50h ; jumptable 00403C9D cases 5,6
.text:0040461C                 call    ds:libintl_gettext
.text:00404622                 cmp     eax, 403C50h
.text:00404627                 mov     edi, eax
.text:00404629                 jz      short loc_4046A0
.text:0040462B
.text:0040462B loc_40462B:                             ; CODE XREF: sub_403C60+A45↓j
.text:0040462B                                         ; sub_403C60+A4C↓j
.text:0040462B                 mov     [esp+4Ch+C], 403C4Eh
.text:00404632                 call    ds:libintl_gettext
.text:00404638                 cmp     eax, 403C4Eh
.text:0040463D                 mov     edx, eax
.text:0040463F                 jz      short loc_404692
.text:00404641
.text:00404641 loc_404641:                             ; CODE XREF: sub_403C60+A37↓j
.text:00404641                                         ; sub_403C60+A3E↓j
.text:00404641                 mov     [esp+4Ch+var_1C], edi
.text:00404645                 cmp     byte ptr [edi], 0
.text:00404648                 jz      short loc_404678
.text:0040464A
.text:0040464A loc_40464A:                             ; CODE XREF: sub_403C60+A16↓j
.text:0040464A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040464E                 cmp     [esp+4Ch+var_34], ecx
.text:00404652                 jnb     short loc_404667
.text:00404654                 mov     ebp, [esp+4Ch+var_1C]
.text:00404658                 mov     edi, [esp+4Ch+arg_0]
.text:0040465C                 mov     esi, [esp+4Ch+var_34]
.text:00404660                 movzx   ebx, byte ptr [ebp+0]
.text:00404664                 mov     [esi+edi], bl
.text:00404667
.text:00404667 loc_404667:                             ; CODE XREF: sub_403C60+9F2↑j
.text:00404667                 inc     [esp+4Ch+var_1C]
.text:0040466B                 inc     [esp+4Ch+var_34]
.text:0040466F                 mov     eax, [esp+4Ch+var_1C]
.text:00404673                 cmp     byte ptr [eax], 0
.text:00404676                 jnz     short loc_40464A
.text:00404678
.text:00404678 loc_404678:                             ; CODE XREF: sub_403C60+9E8↑j
.text:00404678                 mov     [esp+4Ch+var_21], 1
.text:0040467D                 mov     [esp+4Ch+var_1C], edx
.text:00404681                 mov     [esp+4Ch+C], edx ; Str
.text:00404684                 call    strlen
.text:00404689                 mov     [esp+4Ch+var_20], eax
.text:0040468D                 jmp     def_403C9D      ; jumptable 00403C9D default case, cases 0,1
.text:00404692 ; ---------------------------------------------------------------------------
.text:00404692
.text:00404692 loc_404692:                             ; CODE XREF: sub_403C60+9DF↑j
.text:00404692                 cmp     [esp+4Ch+arg_10], 6
.text:00404697                 jnz     short loc_404641
.text:00404699                 mov     edx, offset asc_403C4C ; "\"'`"
.text:0040469E                 jmp     short loc_404641
.text:004046A0 ; ---------------------------------------------------------------------------
.text:004046A0
.text:004046A0 loc_4046A0:                             ; CODE XREF: sub_403C60+9C9↑j
.text:004046A0                 cmp     [esp+4Ch+arg_10], 6
.text:004046A5                 jnz     short loc_40462B
.text:004046A7                 mov     edi, offset asc_403C4C ; "\"'`"
.text:004046AC                 jmp     loc_40462B
.text:004046AC sub_403C60      endp
.text:004046AC
.text:004046B1 ; ---------------------------------------------------------------------------
.text:004046B1                 jmp     short loc_4046C0
.text:004046B1 ; ---------------------------------------------------------------------------
.text:004046B3                 align 10h
.text:004046C0
.text:004046C0 loc_4046C0:                             ; CODE XREF: .text:004046B1↑j
.text:004046C0                 sub     esp, 0Ch
.text:004046C3                 mov     [esp+4], ebx
.text:004046C7                 mov     [esp+8], esi
.text:004046CB                 call    _errno
.text:004046D0                 mov     esi, [eax]
.text:004046D2                 mov     dword ptr [esp], 24h ; '$'
.text:004046D9                 call    sub_4033E0
.text:004046DE                 mov     edx, [esp+10h]
.text:004046E2                 mov     ebx, eax
.text:004046E4                 test    edx, edx
.text:004046E6                 jz      short loc_404731
.text:004046E8
.text:004046E8 loc_4046E8:                             ; CODE XREF: .text:00404736↓j
.text:004046E8                 mov     ecx, [edx]
.text:004046EA                 mov     [ebx], ecx
.text:004046EC                 mov     ecx, [edx+4]
.text:004046EF                 mov     [ebx+4], ecx
.text:004046F2                 mov     ecx, [edx+8]
.text:004046F5                 mov     [ebx+8], ecx
.text:004046F8                 mov     ecx, [edx+0Ch]
.text:004046FB                 mov     [ebx+0Ch], ecx
.text:004046FE                 mov     ecx, [edx+10h]
.text:00404701                 mov     [ebx+10h], ecx
.text:00404704                 mov     ecx, [edx+14h]
.text:00404707                 mov     [ebx+14h], ecx
.text:0040470A                 mov     ecx, [edx+18h]
.text:0040470D                 mov     [ebx+18h], ecx
.text:00404710                 mov     ecx, [edx+1Ch]
.text:00404713                 mov     [ebx+1Ch], ecx
.text:00404716                 mov     ecx, [edx+20h]
.text:00404719                 mov     [ebx+20h], ecx
.text:0040471C                 call    _errno
.text:00404721                 mov     [eax], esi
.text:00404723                 mov     esi, [esp+8]
.text:00404727                 mov     eax, ebx
.text:00404729                 mov     ebx, [esp+4]
.text:0040472D                 add     esp, 0Ch
.text:00404730                 retn
.text:00404731 ; ---------------------------------------------------------------------------
.text:00404731
.text:00404731 loc_404731:                             ; CODE XREF: .text:004046E6↑j
.text:00404731                 mov     edx, offset dword_40F140
.text:00404736                 jmp     short loc_4046E8
.text:00404736 ; ---------------------------------------------------------------------------
.text:00404738                 align 10h
.text:00404740                 mov     eax, [esp+4]
.text:00404744                 test    eax, eax
.text:00404746                 jz      short loc_404750
.text:00404748
.text:00404748 loc_404748:                             ; CODE XREF: .text:00404755↓j
.text:00404748                 mov     eax, [eax]
.text:0040474A                 retn
.text:0040474A ; ---------------------------------------------------------------------------
.text:0040474B                 align 10h
.text:00404750
.text:00404750 loc_404750:                             ; CODE XREF: .text:00404746↑j
.text:00404750                 mov     eax, offset dword_40F140
.text:00404755                 jmp     short loc_404748
.text:00404755 ; ---------------------------------------------------------------------------
.text:00404757                 align 10h
.text:00404760                 mov     edx, [esp+4]
.text:00404764                 test    edx, edx
.text:00404766                 jz      short loc_404770
.text:00404768
.text:00404768 loc_404768:                             ; CODE XREF: .text:00404775↓j
.text:00404768                 mov     ecx, [esp+8]
.text:0040476C                 mov     [edx], ecx
.text:0040476E                 retn
.text:0040476E ; ---------------------------------------------------------------------------
.text:0040476F                 align 10h
.text:00404770
.text:00404770 loc_404770:                             ; CODE XREF: .text:00404766↑j
.text:00404770                 mov     edx, offset dword_40F140
.text:00404775                 jmp     short loc_404768
.text:00404775 ; ---------------------------------------------------------------------------
.text:00404777                 align 10h
.text:00404780                 sub     esp, 8
.text:00404783                 mov     eax, [esp+0Ch]
.text:00404787                 movzx   ecx, byte ptr [esp+10h]
.text:0040478C                 mov     [esp], ebx
.text:0040478F                 mov     ebx, [esp+14h]
.text:00404793                 mov     [esp+4], esi
.text:00404797                 mov     dl, cl
.text:00404799                 shr     dl, 5
.text:0040479C                 movzx   edx, dl
.text:0040479F                 shl     edx, 2
.text:004047A2                 test    eax, eax
.text:004047A4                 lea     esi, [edx+eax+4]
.text:004047A8                 jz      short loc_4047D0
.text:004047AA
.text:004047AA loc_4047AA:                             ; CODE XREF: .text:004047D6↓j
.text:004047AA                 mov     edx, [esi]
.text:004047AC                 and     ecx, 1Fh
.text:004047AF                 and     ebx, 1
.text:004047B2                 mov     eax, edx
.text:004047B4                 shr     eax, cl
.text:004047B6                 and     eax, 1
.text:004047B9                 xor     ebx, eax
.text:004047BB                 shl     ebx, cl
.text:004047BD                 xor     edx, ebx
.text:004047BF                 mov     [esi], edx
.text:004047C1                 mov     ebx, [esp]
.text:004047C4                 mov     esi, [esp+4]
.text:004047C8                 add     esp, 8
.text:004047CB                 retn
.text:004047CB ; ---------------------------------------------------------------------------
.text:004047CC                 align 10h
.text:004047D0
.text:004047D0 loc_4047D0:                             ; CODE XREF: .text:004047A8↑j
.text:004047D0                 lea     esi, dword_40F144[edx]
.text:004047D6                 jmp     short loc_4047AA
.text:004047D6 ; ---------------------------------------------------------------------------
.text:004047D8                 align 10h
.text:004047E0                 sub     esp, 2Ch
.text:004047E3                 mov     [esp+24h], ebx
.text:004047E7                 mov     ebx, [esp+40h]
.text:004047EB                 mov     [esp+28h], esi
.text:004047EF                 test    ebx, ebx
.text:004047F1                 jz      short loc_404840
.text:004047F3
.text:004047F3 loc_4047F3:                             ; CODE XREF: .text:00404845↓j
.text:004047F3                 call    _errno
.text:004047F8                 mov     esi, [eax]
.text:004047FA                 mov     [esp+14h], ebx
.text:004047FE                 mov     edx, [ebx]
.text:00404800                 mov     ecx, [esp+38h]
.text:00404804                 mov     ebx, [esp+3Ch]
.text:00404808                 mov     [esp+10h], edx
.text:0040480C                 mov     edx, [esp+34h]
.text:00404810                 mov     [esp+0Ch], ebx
.text:00404814                 mov     [esp+8], ecx
.text:00404818                 mov     [esp+4], edx
.text:0040481C                 mov     edx, [esp+30h]
.text:00404820                 mov     [esp], edx
.text:00404823                 call    sub_403C60
.text:00404828                 mov     ebx, eax
.text:0040482A                 call    _errno
.text:0040482F                 mov     [eax], esi
.text:00404831                 mov     esi, [esp+28h]
.text:00404835                 mov     eax, ebx
.text:00404837                 mov     ebx, [esp+24h]
.text:0040483B                 add     esp, 2Ch
.text:0040483E                 retn
.text:0040483E ; ---------------------------------------------------------------------------
.text:0040483F                 align 10h
.text:00404840
.text:00404840 loc_404840:                             ; CODE XREF: .text:004047F1↑j
.text:00404840                 mov     ebx, offset dword_40F140
.text:00404845                 jmp     short loc_4047F3
.text:00404845 ; ---------------------------------------------------------------------------
.text:00404847                 align 10h
.text:00404850                 push    ebp
.text:00404851                 push    edi
.text:00404852                 push    esi
.text:00404853                 push    ebx
.text:00404854                 sub     esp, 2Ch
.text:00404857                 mov     ebp, [esp+48h]
.text:0040485B                 call    _errno
.text:00404860                 mov     edx, [eax]
.text:00404862                 test    ebp, ebp
.text:00404864                 mov     ebx, ebp
.text:00404866                 mov     [esp+28h], edx
.text:0040486A                 jz      loc_404920
.text:00404870
.text:00404870 loc_404870:                             ; CODE XREF: .text:00404925↓j
.text:00404870                 call    _errno
.text:00404875                 mov     edi, [eax]
.text:00404877                 mov     esi, ebp
.text:00404879                 mov     [esp+14h], ebx
.text:0040487D                 mov     ecx, [ebx]
.text:0040487F                 mov     dword ptr [esp], 0
.text:00404886                 mov     edx, [esp+44h]
.text:0040488A                 mov     dword ptr [esp+4], 0
.text:00404892                 mov     eax, [esp+40h]
.text:00404896                 mov     [esp+10h], ecx
.text:0040489A                 mov     [esp+0Ch], edx
.text:0040489E                 mov     [esp+8], eax
.text:004048A2                 call    sub_403C60
.text:004048A7                 mov     ebx, eax
.text:004048A9                 call    _errno
.text:004048AE                 mov     [eax], edi
.text:004048B0                 lea     edi, [ebx+1]
.text:004048B3                 mov     [esp], edi
.text:004048B6                 call    sub_4033E0
.text:004048BB                 mov     [esp+24h], eax
.text:004048BF                 test    ebp, ebp
.text:004048C1                 jz      short loc_404912
.text:004048C3
.text:004048C3 loc_4048C3:                             ; CODE XREF: .text:00404917↓j
.text:004048C3                 call    _errno
.text:004048C8                 mov     ebp, [eax]
.text:004048CA                 mov     [esp+14h], esi
.text:004048CE                 mov     ecx, [esi]
.text:004048D0                 mov     [esp+4], edi
.text:004048D4                 mov     edx, [esp+44h]
.text:004048D8                 mov     esi, [esp+24h]
.text:004048DC                 mov     [esp+10h], ecx
.text:004048E0                 mov     eax, [esp+40h]
.text:004048E4                 mov     [esp+0Ch], edx
.text:004048E8                 mov     [esp], esi
.text:004048EB                 mov     [esp+8], eax
.text:004048EF                 call    sub_403C60
.text:004048F4                 call    _errno
.text:004048F9                 mov     [eax], ebp
.text:004048FB                 call    _errno
.text:00404900                 mov     ebx, [esp+28h]
.text:00404904                 mov     [eax], ebx
.text:00404906                 mov     eax, [esp+24h]
.text:0040490A                 add     esp, 2Ch
.text:0040490D                 pop     ebx
.text:0040490E                 pop     esi
.text:0040490F                 pop     edi
.text:00404910                 pop     ebp
.text:00404911                 retn
.text:00404912 ; ---------------------------------------------------------------------------
.text:00404912
.text:00404912 loc_404912:                             ; CODE XREF: .text:004048C1↑j
.text:00404912                 mov     esi, offset dword_40F140
.text:00404917                 jmp     short loc_4048C3
.text:00404917 ; ---------------------------------------------------------------------------
.text:00404919                 align 10h
.text:00404920
.text:00404920 loc_404920:                             ; CODE XREF: .text:0040486A↑j
.text:00404920                 mov     ebx, offset dword_40F140
.text:00404925                 jmp     loc_404870
.text:00404925 ; ---------------------------------------------------------------------------
.text:0040492A                 align 10h
.text:00404930                 sub     esp, 1Ch
.text:00404933                 mov     edx, [esp+24h]
.text:00404937                 mov     dword ptr [esp+0Ch], offset dword_40F140
.text:0040493F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404947                 mov     [esp+4], edx
.text:0040494B                 mov     edx, [esp+20h]
.text:0040494F                 mov     [esp], edx
.text:00404952                 call    sub_404DA0
.text:00404957                 add     esp, 1Ch
.text:0040495A                 retn
.text:0040495A ; ---------------------------------------------------------------------------
.text:0040495B                 align 10h
.text:00404960                 sub     esp, 1Ch
.text:00404963                 mov     edx, [esp+20h]
.text:00404967                 mov     dword ptr [esp+0Ch], offset dword_40F140
.text:0040496F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404977                 mov     [esp+4], edx
.text:0040497B                 mov     dword ptr [esp], 0
.text:00404982                 call    sub_404DA0
.text:00404987                 add     esp, 1Ch
.text:0040498A                 retn
.text:0040498A ; ---------------------------------------------------------------------------
.text:0040498B                 align 10h
.text:00404990
.text:00404990 ; =============== S U B R O U T I N E =======================================
.text:00404990
.text:00404990
.text:00404990 ; int __cdecl sub_404990(int, int, char *)
.text:00404990 sub_404990      proc near               ; CODE XREF: .text:0040335A↑p
.text:00404990                                         ; sub_403370+1A↑p
.text:00404990
.text:00404990 var_BC          = dword ptr -0BCh
.text:00404990 var_B8          = dword ptr -0B8h
.text:00404990 var_B4          = dword ptr -0B4h
.text:00404990 var_B0          = dword ptr -0B0h
.text:00404990 var_AC          = dword ptr -0ACh
.text:00404990 var_A8          = dword ptr -0A8h
.text:00404990 var_A4          = dword ptr -0A4h
.text:00404990 var_A0          = dword ptr -0A0h
.text:00404990 var_9C          = dword ptr -9Ch
.text:00404990 var_98          = dword ptr -98h
.text:00404990 var_94          = dword ptr -94h
.text:00404990 var_90          = dword ptr -90h
.text:00404990 var_8C          = dword ptr -8Ch
.text:00404990 var_7C          = dword ptr -7Ch
.text:00404990 var_78          = dword ptr -78h
.text:00404990 var_74          = dword ptr -74h
.text:00404990 var_70          = dword ptr -70h
.text:00404990 var_6C          = dword ptr -6Ch
.text:00404990 var_68          = dword ptr -68h
.text:00404990 var_64          = dword ptr -64h
.text:00404990 var_60          = dword ptr -60h
.text:00404990 var_5C          = dword ptr -5Ch
.text:00404990 var_4C          = dword ptr -4Ch
.text:00404990 var_48          = dword ptr -48h
.text:00404990 var_44          = dword ptr -44h
.text:00404990 var_40          = dword ptr -40h
.text:00404990 var_3C          = dword ptr -3Ch
.text:00404990 var_38          = dword ptr -38h
.text:00404990 var_34          = dword ptr -34h
.text:00404990 var_30          = dword ptr -30h
.text:00404990 var_2C          = dword ptr -2Ch
.text:00404990 arg_0           = dword ptr  4
.text:00404990 arg_4           = dword ptr  8
.text:00404990 arg_8           = dword ptr  0Ch
.text:00404990
.text:00404990                 push    ebp
.text:00404991                 xor     eax, eax
.text:00404993                 mov     ecx, 8
.text:00404998                 push    edi
.text:00404999                 push    esi
.text:0040499A                 push    ebx
.text:0040499B                 sub     esp, 0ACh
.text:004049A1                 mov     ebp, [esp+0BCh+arg_4]
.text:004049A8                 cld
.text:004049A9                 lea     edi, [esp+0BCh+var_A8]
.text:004049AD                 mov     [esp+0BCh+var_AC], ebp
.text:004049B1                 rep stosd
.text:004049B3                 mov     eax, [esp+0BCh+var_8C]
.text:004049B7                 mov     edi, [esp+0BCh+var_AC]
.text:004049BB                 mov     esi, [esp+0BCh+var_A8]
.text:004049BF                 mov     [esp+0BCh+var_5C], eax
.text:004049C3                 mov     ebp, [esp+0BCh+var_A4]
.text:004049C7                 mov     eax, [esp+0BCh+var_AC]
.text:004049CB                 mov     [esp+0BCh+var_7C], edi
.text:004049CF                 mov     ecx, [esp+0BCh+var_94]
.text:004049D3                 mov     edi, [esp+0BCh+var_A0]
.text:004049D7                 mov     [esp+0BCh+var_78], esi
.text:004049DB                 mov     edx, [esp+0BCh+var_90]
.text:004049DF                 mov     esi, [esp+0BCh+var_9C]
.text:004049E3                 mov     [esp+0BCh+var_4C], eax
.text:004049E7                 mov     ebx, [esp+0BCh+var_98]
.text:004049EB                 mov     eax, [esp+0BCh+var_A8]
.text:004049EF                 mov     [esp+0BCh+var_74], ebp
.text:004049F3                 mov     [esp+0BCh+var_70], edi
.text:004049F7                 mov     [esp+0BCh+var_6C], esi
.text:004049FB                 mov     [esp+0BCh+var_68], ebx
.text:004049FF                 mov     [esp+0BCh+var_64], ecx
.text:00404A03                 mov     [esp+0BCh+var_60], edx
.text:00404A07                 mov     [esp+0BCh+var_48], eax
.text:00404A0B                 mov     [esp+0BCh+var_44], ebp
.text:00404A0F                 mov     [esp+0BCh+var_40], edi
.text:00404A13                 mov     [esp+0BCh+var_3C], esi
.text:00404A1A                 mov     [esp+0BCh+var_38], ebx
.text:00404A21                 mov     ebx, [esp+0BCh+var_8C]
.text:00404A25                 mov     [esp+0BCh+var_30], edx
.text:00404A2C                 mov     edx, [esp+0BCh+arg_8]
.text:00404A33                 mov     [esp+0BCh+var_34], ecx
.text:00404A3A                 lea     ecx, [esp+0BCh+var_4C]
.text:00404A3E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00404A42                 mov     edx, [esp+0BCh+arg_0]
.text:00404A49                 mov     [esp+0BCh+var_2C], ebx
.text:00404A50                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00404A54                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00404A5C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00404A5F                 call    sub_404DA0
.text:00404A64                 add     esp, 0ACh
.text:00404A6A                 pop     ebx
.text:00404A6B                 pop     esi
.text:00404A6C                 pop     edi
.text:00404A6D                 pop     ebp
.text:00404A6E                 retn
.text:00404A6E sub_404990      endp
.text:00404A6E
.text:00404A6E ; ---------------------------------------------------------------------------
.text:00404A6F                 align 10h
.text:00404A70                 push    ebp
.text:00404A71                 xor     eax, eax
.text:00404A73                 mov     ecx, 8
.text:00404A78                 push    edi
.text:00404A79                 push    esi
.text:00404A7A                 push    ebx
.text:00404A7B                 sub     esp, 0ACh
.text:00404A81                 mov     edx, [esp+0C4h]
.text:00404A88                 cld
.text:00404A89                 lea     edi, [esp+14h]
.text:00404A8D                 mov     [esp+10h], edx
.text:00404A91                 rep stosd
.text:00404A93                 mov     eax, [esp+30h]
.text:00404A97                 mov     ebp, [esp+10h]
.text:00404A9B                 mov     edi, [esp+14h]
.text:00404A9F                 mov     [esp+60h], eax
.text:00404AA3                 mov     esi, [esp+20h]
.text:00404AA7                 mov     eax, [esp+10h]
.text:00404AAB                 mov     [esp+40h], ebp
.text:00404AAF                 mov     ecx, [esp+28h]
.text:00404AB3                 mov     ebp, [esp+18h]
.text:00404AB7                 mov     [esp+44h], edi
.text:00404ABB                 mov     edx, [esp+2Ch]
.text:00404ABF                 mov     edi, [esp+1Ch]
.text:00404AC3                 mov     [esp+70h], eax
.text:00404AC7                 mov     ebx, [esp+24h]
.text:00404ACB                 mov     eax, [esp+14h]
.text:00404ACF                 mov     [esp+48h], ebp
.text:00404AD3                 mov     [esp+4Ch], edi
.text:00404AD7                 mov     [esp+50h], esi
.text:00404ADB                 mov     [esp+54h], ebx
.text:00404ADF                 mov     [esp+58h], ecx
.text:00404AE3                 mov     [esp+5Ch], edx
.text:00404AE7                 mov     [esp+74h], eax
.text:00404AEB                 mov     [esp+78h], ebp
.text:00404AEF                 mov     [esp+7Ch], edi
.text:00404AF3                 mov     [esp+80h], esi
.text:00404AFA                 mov     [esp+84h], ebx
.text:00404B01                 mov     esi, [esp+30h]
.text:00404B05                 lea     ebx, [esp+70h]
.text:00404B09                 mov     [esp+8Ch], edx
.text:00404B10                 mov     edx, [esp+0C8h]
.text:00404B17                 mov     [esp+88h], ecx
.text:00404B1E                 mov     ecx, [esp+0CCh]
.text:00404B25                 mov     [esp+4], edx
.text:00404B29                 mov     edx, [esp+0C0h]
.text:00404B30                 mov     [esp+90h], esi
.text:00404B37                 mov     [esp+0Ch], ebx
.text:00404B3B                 mov     [esp+8], ecx
.text:00404B3F                 mov     [esp], edx
.text:00404B42                 call    sub_404DA0
.text:00404B47                 add     esp, 0ACh
.text:00404B4D                 pop     ebx
.text:00404B4E                 pop     esi
.text:00404B4F                 pop     edi
.text:00404B50                 pop     ebp
.text:00404B51                 retn
.text:00404B51 ; ---------------------------------------------------------------------------
.text:00404B52                 align 10h
.text:00404B60                 push    ebp
.text:00404B61                 xor     eax, eax
.text:00404B63                 mov     ecx, 8
.text:00404B68                 push    edi
.text:00404B69                 push    esi
.text:00404B6A                 push    ebx
.text:00404B6B                 sub     esp, 0ACh
.text:00404B71                 mov     edi, [esp+0C0h]
.text:00404B78                 cld
.text:00404B79                 mov     [esp+10h], edi
.text:00404B7D                 lea     edi, [esp+14h]
.text:00404B81                 rep stosd
.text:00404B83                 mov     eax, [esp+30h]
.text:00404B87                 mov     esi, [esp+10h]
.text:00404B8B                 mov     ebx, [esp+14h]
.text:00404B8F                 mov     [esp+60h], eax
.text:00404B93                 mov     ebp, [esp+18h]
.text:00404B97                 mov     eax, [esp+10h]
.text:00404B9B                 mov     [esp+40h], esi
.text:00404B9F                 mov     edi, [esp+1Ch]
.text:00404BA3                 mov     esi, [esp+20h]
.text:00404BA7                 mov     [esp+44h], ebx
.text:00404BAB                 mov     ecx, [esp+28h]
.text:00404BAF                 mov     edx, [esp+2Ch]
.text:00404BB3                 mov     [esp+70h], eax
.text:00404BB7                 mov     ebx, [esp+24h]
.text:00404BBB                 mov     eax, [esp+14h]
.text:00404BBF                 mov     [esp+48h], ebp
.text:00404BC3                 mov     [esp+4Ch], edi
.text:00404BC7                 mov     [esp+50h], esi
.text:00404BCB                 mov     [esp+54h], ebx
.text:00404BCF                 mov     [esp+58h], ecx
.text:00404BD3                 mov     [esp+5Ch], edx
.text:00404BD7                 mov     [esp+74h], eax
.text:00404BDB                 mov     [esp+78h], ebp
.text:00404BDF                 mov     [esp+7Ch], edi
.text:00404BE3                 mov     [esp+80h], esi
.text:00404BEA                 mov     [esp+84h], ebx
.text:00404BF1                 mov     [esp+8Ch], edx
.text:00404BF8                 lea     edx, [esp+70h]
.text:00404BFC                 mov     [esp+88h], ecx
.text:00404C03                 mov     ecx, [esp+30h]
.text:00404C07                 mov     [esp+0Ch], edx
.text:00404C0B                 mov     edx, [esp+0C4h]
.text:00404C12                 mov     [esp+90h], ecx
.text:00404C19                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404C21                 mov     [esp+4], edx
.text:00404C25                 mov     dword ptr [esp], 0
.text:00404C2C                 call    sub_404DA0
.text:00404C31                 add     esp, 0ACh
.text:00404C37                 pop     ebx
.text:00404C38                 pop     esi
.text:00404C39                 pop     edi
.text:00404C3A                 pop     ebp
.text:00404C3B                 retn
.text:00404C3B ; ---------------------------------------------------------------------------
.text:00404C3C                 align 10h
.text:00404C40                 push    edi
.text:00404C41                 push    esi
.text:00404C42                 push    ebx
.text:00404C43                 sub     esp, 40h
.text:00404C46                 mov     edx, ds:dword_40F14C
.text:00404C4C                 mov     ebx, ds:dword_40F140
.text:00404C52                 mov     esi, ds:dword_40F148
.text:00404C58                 mov     edi, ds:dword_40F144
.text:00404C5E                 mov     [esp+1Ch], edx
.text:00404C62                 mov     ecx, ds:dword_40F150
.text:00404C68                 mov     edx, ds:dword_40F160
.text:00404C6E                 mov     [esp+10h], ebx
.text:00404C72                 mov     ebx, ds:dword_40F154
.text:00404C78                 mov     [esp+30h], edx
.text:00404C7C                 movzx   edx, byte ptr [esp+54h]
.text:00404C81                 mov     [esp+18h], esi
.text:00404C85                 mov     esi, ds:dword_40F15C
.text:00404C8B                 mov     [esp+14h], edi
.text:00404C8F                 mov     edi, ds:dword_40F158
.text:00404C95                 mov     [esp+20h], ecx
.text:00404C99                 mov     cl, dl
.text:00404C9B                 shr     cl, 5
.text:00404C9E                 mov     [esp+24h], ebx
.text:00404CA2                 movzx   ebx, cl
.text:00404CA5                 mov     [esp+2Ch], esi
.text:00404CA9                 lea     esi, [esp+10h]
.text:00404CAD                 mov     [esp+28h], edi
.text:00404CB1                 lea     edi, [esi+ebx*4]
.text:00404CB4                 mov     ebx, edx
.text:00404CB6                 mov     edx, [edi+4]
.text:00404CB9                 and     ebx, 1Fh
.text:00404CBC                 mov     cl, bl
.text:00404CBE                 mov     eax, edx
.text:00404CC0                 shr     eax, cl
.text:00404CC2                 and     eax, 1
.text:00404CC5                 xor     eax, 1
.text:00404CC8                 shl     eax, cl
.text:00404CCA                 xor     edx, eax
.text:00404CCC                 mov     [edi+4], edx
.text:00404CCF                 mov     edx, [esp+50h]
.text:00404CD3                 mov     [esp+0Ch], esi
.text:00404CD7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404CDF                 mov     [esp+4], edx
.text:00404CE3                 mov     dword ptr [esp], 0
.text:00404CEA                 call    sub_404DA0
.text:00404CEF                 add     esp, 40h
.text:00404CF2                 pop     ebx
.text:00404CF3                 pop     esi
.text:00404CF4                 pop     edi
.text:00404CF5                 retn
.text:00404CF5 ; ---------------------------------------------------------------------------
.text:00404CF6                 align 10h
.text:00404D00
.text:00404D00 ; =============== S U B R O U T I N E =======================================
.text:00404D00
.text:00404D00
.text:00404D00 ; int __cdecl sub_404D00(char *)
.text:00404D00 sub_404D00      proc near               ; CODE XREF: sub_403240+64↑p
.text:00404D00
.text:00404D00 var_4C          = dword ptr -4Ch
.text:00404D00 var_48          = dword ptr -48h
.text:00404D00 var_44          = dword ptr -44h
.text:00404D00 var_40          = dword ptr -40h
.text:00404D00 var_3C          = dword ptr -3Ch
.text:00404D00 var_38          = dword ptr -38h
.text:00404D00 var_34          = dword ptr -34h
.text:00404D00 var_30          = dword ptr -30h
.text:00404D00 var_2C          = dword ptr -2Ch
.text:00404D00 var_28          = dword ptr -28h
.text:00404D00 var_24          = dword ptr -24h
.text:00404D00 var_20          = dword ptr -20h
.text:00404D00 var_1C          = dword ptr -1Ch
.text:00404D00 arg_0           = dword ptr  4
.text:00404D00
.text:00404D00                 sub     esp, 4Ch
.text:00404D03                 mov     ecx, ds:dword_40F140
.text:00404D09                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404D11                 mov     edx, ds:dword_40F144
.text:00404D17                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00404D1E                 mov     [esp+4Ch+var_3C], ecx
.text:00404D22                 mov     ecx, ds:dword_40F14C
.text:00404D28                 mov     [esp+4Ch+var_38], edx
.text:00404D2C                 mov     edx, ds:dword_40F148
.text:00404D32                 mov     [esp+4Ch+var_30], ecx
.text:00404D36                 mov     ecx, ds:dword_40F150
.text:00404D3C                 mov     eax, edx
.text:00404D3E                 shr     eax, 1Ah
.text:00404D41                 and     eax, 1
.text:00404D44                 xor     eax, 1
.text:00404D47                 mov     [esp+4Ch+var_2C], ecx
.text:00404D4B                 shl     eax, 1Ah
.text:00404D4E                 mov     ecx, ds:dword_40F154
.text:00404D54                 xor     edx, eax
.text:00404D56                 mov     [esp+4Ch+var_34], edx
.text:00404D5A                 mov     edx, [esp+4Ch+arg_0]
.text:00404D5E                 mov     [esp+4Ch+var_28], ecx
.text:00404D62                 mov     ecx, ds:dword_40F158
.text:00404D68                 mov     [esp+4Ch+var_48], edx ; char *
.text:00404D6C                 mov     [esp+4Ch+var_24], ecx
.text:00404D70                 mov     ecx, ds:dword_40F15C
.text:00404D76                 mov     [esp+4Ch+var_20], ecx
.text:00404D7A                 mov     ecx, ds:dword_40F160
.text:00404D80                 mov     [esp+4Ch+var_1C], ecx
.text:00404D84                 lea     ecx, [esp+4Ch+var_3C]
.text:00404D88                 mov     [esp+4Ch+var_40], ecx ; int
.text:00404D8C                 call    sub_404DA0
.text:00404D91                 add     esp, 4Ch
.text:00404D94                 retn
.text:00404D94 sub_404D00      endp
.text:00404D94
.text:00404D94 ; ---------------------------------------------------------------------------
.text:00404D95                 align 10h
.text:00404DA0
.text:00404DA0 ; =============== S U B R O U T I N E =======================================
.text:00404DA0
.text:00404DA0
.text:00404DA0 ; int __cdecl sub_404DA0(int, char *, int, int)
.text:00404DA0 sub_404DA0      proc near               ; CODE XREF: .text:00404952↑p
.text:00404DA0                                         ; .text:00404982↑p ...
.text:00404DA0
.text:00404DA0 Block           = dword ptr -2Ch
.text:00404DA0 var_28          = dword ptr -28h
.text:00404DA0 Str             = dword ptr -24h
.text:00404DA0 var_20          = dword ptr -20h
.text:00404DA0 var_1C          = dword ptr -1Ch
.text:00404DA0 var_18          = dword ptr -18h
.text:00404DA0 var_14          = dword ptr -14h
.text:00404DA0 arg_0           = dword ptr  4
.text:00404DA0 arg_4           = dword ptr  8
.text:00404DA0 arg_8           = dword ptr  0Ch
.text:00404DA0 arg_C           = dword ptr  10h
.text:00404DA0
.text:00404DA0                 push    ebp
.text:00404DA1                 push    edi
.text:00404DA2                 push    esi
.text:00404DA3                 push    ebx
.text:00404DA4                 sub     esp, 1Ch
.text:00404DA7                 call    _errno
.text:00404DAC                 mov     edx, [eax]
.text:00404DAE                 mov     eax, [esp+2Ch+arg_0]
.text:00404DB2                 mov     [esp+2Ch+var_14], edx
.text:00404DB6                 test    eax, eax
.text:00404DB8                 js      loc_404F5A
.text:00404DBE                 mov     eax, [esp+2Ch+arg_0]
.text:00404DC2                 cmp     dword_40E040, eax
.text:00404DC8                 ja      short loc_404E40
.text:00404DCA                 mov     esi, eax
.text:00404DCC                 inc     esi
.text:00404DCD                 cmp     esi, 1FFFFFFFh
.text:00404DD3                 ja      loc_404F5F
.text:00404DD9                 mov     ebx, off_40E04C
.text:00404DDF                 cmp     ebx, offset dword_40E044
.text:00404DE5                 jz      loc_404F31
.text:00404DEB
.text:00404DEB loc_404DEB:                             ; CODE XREF: sub_404DA0+1B5↓j
.text:00404DEB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00404DEE                 lea     ecx, ds:0[esi*8]
.text:00404DF5                 mov     ebp, esi
.text:00404DF7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00404DFB                 call    sub_403470
.text:00404E00                 mov     off_40E04C, eax
.text:00404E05                 mov     ebx, dword_40E040
.text:00404E0B                 sub     ebp, ebx
.text:00404E0D                 lea     edi, [eax+ebx*8]
.text:00404E10                 lea     eax, ds:0[ebp*8]
.text:00404E17                 cmp     eax, 7
.text:00404E1A                 jbe     short loc_404E30
.text:00404E1C                 test    edi, 4
.text:00404E22                 jz      short loc_404E30
.text:00404E24                 mov     dword ptr [edi], 0
.text:00404E2A                 sub     eax, 4
.text:00404E2D                 add     edi, 4
.text:00404E30
.text:00404E30 loc_404E30:                             ; CODE XREF: sub_404DA0+7A↑j
.text:00404E30                                         ; sub_404DA0+82↑j
.text:00404E30                 cld
.text:00404E31                 mov     ecx, eax
.text:00404E33                 shr     ecx, 2
.text:00404E36                 xor     eax, eax
.text:00404E38                 rep stosd
.text:00404E3A                 mov     dword_40E040, esi
.text:00404E40
.text:00404E40 loc_404E40:                             ; CODE XREF: sub_404DA0+28↑j
.text:00404E40                 mov     esi, off_40E04C
.text:00404E46                 mov     eax, [esp+2Ch+arg_0]
.text:00404E4A                 mov     ebp, [esi+eax*8]
.text:00404E4D                 mov     edi, [esi+eax*8+4]
.text:00404E51                 mov     esi, [esp+2Ch+arg_C]
.text:00404E55                 test    esi, esi
.text:00404E57                 jz      loc_404F27
.text:00404E5D
.text:00404E5D loc_404E5D:                             ; CODE XREF: sub_404DA0+18C↓j
.text:00404E5D                 call    _errno
.text:00404E62                 mov     ebx, [eax]
.text:00404E64                 mov     [esp+2Ch+var_18], esi ; int
.text:00404E68                 mov     ecx, [esi]
.text:00404E6A                 mov     [esp+2Ch+Block], edi ; int
.text:00404E6D                 mov     edx, [esp+2Ch+arg_8]
.text:00404E71                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404E75                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404E79                 mov     ecx, [esp+2Ch+arg_4]
.text:00404E7D                 mov     [esp+2Ch+var_20], edx ; int
.text:00404E81                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404E85                 call    sub_403C60
.text:00404E8A                 mov     esi, eax
.text:00404E8C                 call    _errno
.text:00404E91                 mov     [eax], ebx
.text:00404E93                 cmp     ebp, esi
.text:00404E95                 ja      short loc_404F0B
.text:00404E97                 lea     ebp, [esi+1]
.text:00404E9A                 mov     ebx, off_40E04C
.text:00404EA0                 cmp     edi, offset unk_40F040
.text:00404EA6                 mov     esi, [esp+2Ch+arg_0]
.text:00404EAA                 mov     [ebx+esi*8], ebp
.text:00404EAD                 jz      short loc_404EBD
.text:00404EAF                 mov     [esp+2Ch+Block], edi ; Block
.text:00404EB2                 call    free
.text:00404EB7                 mov     ebx, off_40E04C
.text:00404EBD
.text:00404EBD loc_404EBD:                             ; CODE XREF: sub_404DA0+10D↑j
.text:00404EBD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404EC0                 call    sub_4033E0
.text:00404EC5                 mov     esi, [esp+2Ch+arg_C]
.text:00404EC9                 mov     edi, eax
.text:00404ECB                 mov     eax, [esp+2Ch+arg_0]
.text:00404ECF                 test    esi, esi
.text:00404ED1                 mov     [ebx+eax*8+4], edi
.text:00404ED5                 jz      short loc_404F20
.text:00404ED7
.text:00404ED7 loc_404ED7:                             ; CODE XREF: sub_404DA0+185↓j
.text:00404ED7                 call    _errno
.text:00404EDC                 mov     ebx, [eax]
.text:00404EDE                 mov     [esp+2Ch+var_18], esi ; int
.text:00404EE2                 mov     ecx, [esi]
.text:00404EE4                 mov     [esp+2Ch+Block], edi ; int
.text:00404EE7                 mov     edx, [esp+2Ch+arg_8]
.text:00404EEB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404EEF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404EF3                 mov     ecx, [esp+2Ch+arg_4]
.text:00404EF7                 mov     [esp+2Ch+var_20], edx ; int
.text:00404EFB                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404EFF                 call    sub_403C60
.text:00404F04                 call    _errno
.text:00404F09                 mov     [eax], ebx
.text:00404F0B
.text:00404F0B loc_404F0B:                             ; CODE XREF: sub_404DA0+F5↑j
.text:00404F0B                 call    _errno
.text:00404F10                 mov     ebp, [esp+2Ch+var_14]
.text:00404F14                 mov     [eax], ebp
.text:00404F16                 add     esp, 1Ch
.text:00404F19                 mov     eax, edi
.text:00404F1B                 pop     ebx
.text:00404F1C                 pop     esi
.text:00404F1D                 pop     edi
.text:00404F1E                 pop     ebp
.text:00404F1F                 retn
.text:00404F20 ; ---------------------------------------------------------------------------
.text:00404F20
.text:00404F20 loc_404F20:                             ; CODE XREF: sub_404DA0+135↑j
.text:00404F20                 mov     esi, offset dword_40F140
.text:00404F25                 jmp     short loc_404ED7
.text:00404F27 ; ---------------------------------------------------------------------------
.text:00404F27
.text:00404F27 loc_404F27:                             ; CODE XREF: sub_404DA0+B7↑j
.text:00404F27                 mov     esi, offset dword_40F140
.text:00404F2C                 jmp     loc_404E5D
.text:00404F31 ; ---------------------------------------------------------------------------
.text:00404F31
.text:00404F31 loc_404F31:                             ; CODE XREF: sub_404DA0+45↑j
.text:00404F31                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404F38                 call    sub_4033E0
.text:00404F3D                 mov     off_40E04C, eax
.text:00404F42                 mov     edi, dword_40E044
.text:00404F48                 mov     ebx, eax
.text:00404F4A                 mov     ecx, off_40E048
.text:00404F50                 mov     [eax], edi
.text:00404F52                 mov     [eax+4], ecx
.text:00404F55                 jmp     loc_404DEB
.text:00404F5A ; ---------------------------------------------------------------------------
.text:00404F5A
.text:00404F5A loc_404F5A:                             ; CODE XREF: sub_404DA0+18↑j
.text:00404F5A                 call    abort
.text:00404F5F ; ---------------------------------------------------------------------------
.text:00404F5F
.text:00404F5F loc_404F5F:                             ; CODE XREF: sub_404DA0+33↑j
.text:00404F5F                 call    sub_403690
.text:00404F5F sub_404DA0      endp
.text:00404F5F
.text:00404F5F ; ---------------------------------------------------------------------------
.text:00404F64                 align 10h
.text:00404F70
.text:00404F70 ; =============== S U B R O U T I N E =======================================
.text:00404F70
.text:00404F70 ; Attributes: thunk
.text:00404F70
.text:00404F70 libintl_bindtextdomain proc near
.text:00404F70                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404F70 libintl_bindtextdomain endp
.text:00404F70
.text:00404F70 ; ---------------------------------------------------------------------------
.text:00404F76                 align 10h
.text:00404F80                 jmp     ds:libintl_textdomain
.text:00404F80 ; ---------------------------------------------------------------------------
.text:00404F86                 align 10h
.text:00404F90                 jmp     ds:libintl_gettext
.text:00404F90 ; ---------------------------------------------------------------------------
.text:00404F96                 align 10h
.text:00404FA0 ; const char aS_0[]
.text:00404FA0 aS_0            db ': %s',0             ; DATA XREF: sub_404FC0+B8↓o
.text:00404FA0                                         ; sub_4050C4+122↓o
.text:00404FA5 aUnknownSystemE db 'Unknown system error',0
.text:00404FA5                                         ; DATA XREF: sub_404FC0:loc_40508D↓o
.text:00404FA5                                         ; sub_4050C4:loc_4051FE↓o
.text:00404FBA ; const char aS_1[]
.text:00404FBA aS_1            db '%s: ',0             ; DATA XREF: sub_404FC0:loc_405094↓o
.text:00404FBF                 align 10h
.text:00404FC0
.text:00404FC0 ; =============== S U B R O U T I N E =======================================
.text:00404FC0
.text:00404FC0
.text:00404FC0 ; int __cdecl sub_404FC0(int Code, int ErrorMessage, char *, char)
.text:00404FC0 sub_404FC0      proc near               ; CODE XREF: sub_401380+32B↑p
.text:00404FC0                                         ; sub_401380+36C↑p ...
.text:00404FC0
.text:00404FC0 Stream          = dword ptr -1Ch
.text:00404FC0 Format          = dword ptr -18h
.text:00404FC0 ArgList         = dword ptr -14h
.text:00404FC0 Code            = dword ptr  4
.text:00404FC0 ErrorMessage    = dword ptr  8
.text:00404FC0 arg_8           = dword ptr  0Ch
.text:00404FC0 arg_C           = byte ptr  10h
.text:00404FC0
.text:00404FC0                 push    esi
.text:00404FC1                 push    ebx
.text:00404FC2                 sub     esp, 14h
.text:00404FC5                 mov     edx, ds:_iob
.text:00404FCB                 mov     esi, [esp+1Ch+Code]
.text:00404FCF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404FD3                 add     edx, 20h ; ' '
.text:00404FD6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404FD9                 call    fflush
.text:00404FDE                 mov     eax, ds:dword_40F4E0
.text:00404FE3                 test    eax, eax
.text:00404FE5                 jz      loc_405094
.text:00404FEB                 call    eax ; dword_40F4E0
.text:00404FED
.text:00404FED loc_404FED:                             ; CODE XREF: sub_404FC0+F7↓j
.text:00404FED                 lea     edx, [esp+1Ch+arg_C]
.text:00404FF1                 mov     ecx, [esp+1Ch+arg_8]
.text:00404FF5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404FF9                 mov     edx, ds:_iob
.text:00404FFF                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405003                 add     edx, 40h ; '@'
.text:00405006                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405009                 call    vfprintf
.text:0040500E                 inc     ds:dword_40F4F0
.text:00405014                 test    ebx, ebx
.text:00405016                 jnz     short loc_405062
.text:00405018
.text:00405018 loc_405018:                             ; CODE XREF: sub_404FC0+CB↓j
.text:00405018                 mov     edx, ds:_iob
.text:0040501E                 lea     ecx, [edx+40h]
.text:00405021                 mov     ebx, [ecx+4]
.text:00405024                 dec     ebx
.text:00405025                 test    ebx, ebx
.text:00405027                 mov     [ecx+4], ebx
.text:0040502A                 js      short loc_405050
.text:0040502C                 mov     ecx, [edx+40h]
.text:0040502F                 mov     byte ptr [ecx], 0Ah
.text:00405032                 inc     dword ptr [edx+40h]
.text:00405035
.text:00405035 loc_405035:                             ; CODE XREF: sub_404FC0+A0↓j
.text:00405035                 mov     edx, ds:_iob
.text:0040503B                 add     edx, 40h ; '@'
.text:0040503E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405041                 call    fflush
.text:00405046                 test    esi, esi
.text:00405048                 jnz     short loc_4050BC
.text:0040504A                 add     esp, 14h
.text:0040504D                 pop     ebx
.text:0040504E                 pop     esi
.text:0040504F                 retn
.text:00405050 ; ---------------------------------------------------------------------------
.text:00405050
.text:00405050 loc_405050:                             ; CODE XREF: sub_404FC0+6A↑j
.text:00405050                 mov     [esp+1Ch+Format], ecx ; File
.text:00405054                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040505B                 call    _flsbuf
.text:00405060                 jmp     short loc_405035
.text:00405062 ; ---------------------------------------------------------------------------
.text:00405062
.text:00405062 loc_405062:                             ; CODE XREF: sub_404FC0+56↑j
.text:00405062                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00405065                 call    strerror
.text:0040506A                 test    eax, eax
.text:0040506C                 jz      short loc_40508D
.text:0040506E
.text:0040506E loc_40506E:                             ; CODE XREF: sub_404FC0+D2↓j
.text:0040506E                 mov     [esp+1Ch+ArgList], eax
.text:00405072                 mov     ebx, ds:_iob
.text:00405078                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00405080                 add     ebx, 40h ; '@'
.text:00405083                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405086                 call    fprintf
.text:0040508B                 jmp     short loc_405018
.text:0040508D ; ---------------------------------------------------------------------------
.text:0040508D
.text:0040508D loc_40508D:                             ; CODE XREF: sub_404FC0+AC↑j
.text:0040508D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405092                 jmp     short loc_40506E
.text:00405094 ; ---------------------------------------------------------------------------
.text:00405094
.text:00405094 loc_405094:                             ; CODE XREF: sub_404FC0+25↑j
.text:00405094                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040509C                 mov     edx, ds:_iob
.text:004050A2                 mov     ecx, ds:dword_40F4B0
.text:004050A8                 add     edx, 40h ; '@'
.text:004050AB                 mov     [esp+1Ch+ArgList], ecx
.text:004050AF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004050B2                 call    fprintf
.text:004050B7                 jmp     loc_404FED
.text:004050BC ; ---------------------------------------------------------------------------
.text:004050BC
.text:004050BC loc_4050BC:                             ; CODE XREF: sub_404FC0+88↑j
.text:004050BC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004050BF                 call    exit
.text:004050BF sub_404FC0      endp
.text:004050BF
.text:004050C4
.text:004050C4 ; =============== S U B R O U T I N E =======================================
.text:004050C4
.text:004050C4
.text:004050C4 ; int __cdecl sub_4050C4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004050C4 sub_4050C4      proc near               ; DATA XREF: sub_4050C4+77↓o
.text:004050C4
.text:004050C4 Stream          = dword ptr -28h
.text:004050C4 Format          = dword ptr -24h
.text:004050C4 ArgList         = dword ptr -20h
.text:004050C4 var_1C          = dword ptr -1Ch
.text:004050C4 Code            = dword ptr  8
.text:004050C4 ErrorMessage    = dword ptr  0Ch
.text:004050C4 Str2            = dword ptr  10h
.text:004050C4 arg_10          = dword ptr  14h
.text:004050C4 arg_14          = dword ptr  18h
.text:004050C4 arg_18          = byte ptr  1Ch
.text:004050C4
.text:004050C4                 and     eax, 64253A73h
.text:004050C9                 cmp     ah, [eax]
.text:004050CB
.text:004050CB loc_4050CB:                             ; DATA XREF: sub_4050C4:loc_405205↓o
.text:004050CB                 add     ds:55003A73h, ah
.text:004050D1                 push    edi
.text:004050D2                 push    esi
.text:004050D3                 push    ebx
.text:004050D4                 sub     esp, 1Ch
.text:004050D7                 mov     edx, ds:dword_40F520
.text:004050DD                 mov     ebp, [esp+28h+Code]
.text:004050E1                 mov     edi, [esp+28h+ErrorMessage]
.text:004050E5                 test    edx, edx
.text:004050E7                 mov     ebx, [esp+28h+Str2]
.text:004050EB                 mov     esi, [esp+28h+arg_10]
.text:004050EF                 jz      short loc_405109
.text:004050F1                 cmp     ds:dword_40F180, esi
.text:004050F7                 jz      loc_405230
.text:004050FD
.text:004050FD loc_4050FD:                             ; CODE XREF: sub_4050C4+18D↓j
.text:004050FD                 mov     ds:Str1, ebx
.text:00405103                 mov     ds:dword_40F180, esi
.text:00405109
.text:00405109 loc_405109:                             ; CODE XREF: sub_4050C4+2B↑j
.text:00405109                 mov     edx, ds:_iob
.text:0040510F                 add     edx, 20h ; ' '
.text:00405112                 mov     [esp+28h+Stream], edx ; Stream
.text:00405115                 call    fflush
.text:0040511A                 mov     eax, ds:dword_40F4E0
.text:0040511F                 test    eax, eax
.text:00405121                 jz      loc_405205
.text:00405127                 call    eax ; dword_40F4E0
.text:00405129
.text:00405129 loc_405129:                             ; CODE XREF: sub_4050C4+164↓j
.text:00405129                 test    ebx, ebx
.text:0040512B                 jz      short loc_40514E
.text:0040512D                 mov     [esp+28h+ArgList], ebx
.text:00405131                 mov     ebx, ds:_iob
.text:00405137                 mov     [esp+28h+var_1C], esi
.text:0040513B                 mov     [esp+28h+Format], offset sub_4050C4 ; Format
.text:00405143                 add     ebx, 40h ; '@'
.text:00405146                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405149                 call    fprintf
.text:0040514E
.text:0040514E loc_40514E:                             ; CODE XREF: sub_4050C4+67↑j
.text:0040514E                 mov     esi, ds:_iob
.text:00405154                 lea     edx, [esp+28h+arg_18]
.text:00405158                 mov     ecx, [esp+28h+arg_14]
.text:0040515C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00405160                 add     esi, 40h ; '@'
.text:00405163                 mov     [esp+28h+Format], ecx ; Format
.text:00405167                 mov     [esp+28h+Stream], esi ; Stream
.text:0040516A                 call    vfprintf
.text:0040516F                 inc     ds:dword_40F4F0
.text:00405175                 test    edi, edi
.text:00405177                 jnz     short loc_4051D0
.text:00405179
.text:00405179 loc_405179:                             ; CODE XREF: sub_4050C4+135↓j
.text:00405179                 mov     edx, ds:_iob
.text:0040517F                 lea     ecx, [edx+40h]
.text:00405182                 mov     ebx, [ecx+4]
.text:00405185                 dec     ebx
.text:00405186                 test    ebx, ebx
.text:00405188                 mov     [ecx+4], ebx
.text:0040518B                 js      short loc_4051B7
.text:0040518D                 mov     esi, [edx+40h]
.text:00405190                 mov     byte ptr [esi], 0Ah
.text:00405193                 inc     dword ptr [edx+40h]
.text:00405196
.text:00405196 loc_405196:                             ; CODE XREF: sub_4050C4+103↓j
.text:00405196                 mov     ecx, ds:_iob
.text:0040519C                 add     ecx, 40h ; '@'
.text:0040519F                 mov     [esp+28h+Stream], ecx ; Stream
.text:004051A2                 call    fflush
.text:004051A7                 test    ebp, ebp
.text:004051A9                 jnz     loc_405256
.text:004051AF
.text:004051AF loc_4051AF:                             ; CODE XREF: sub_4050C4+173↓j
.text:004051AF                                         ; sub_4050C4+187↓j
.text:004051AF                 add     esp, 1Ch
.text:004051B2                 pop     ebx
.text:004051B3                 pop     esi
.text:004051B4                 pop     edi
.text:004051B5                 pop     ebp
.text:004051B6                 retn
.text:004051B7 ; ---------------------------------------------------------------------------
.text:004051B7
.text:004051B7 loc_4051B7:                             ; CODE XREF: sub_4050C4+C7↑j
.text:004051B7                 mov     [esp+28h+Format], ecx ; File
.text:004051BB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004051C2                 call    _flsbuf
.text:004051C7                 jmp     short loc_405196
.text:004051C7 ; ---------------------------------------------------------------------------
.text:004051C9                 align 10h
.text:004051D0
.text:004051D0 loc_4051D0:                             ; CODE XREF: sub_4050C4+B3↑j
.text:004051D0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004051D3                 call    strerror
.text:004051D8                 test    eax, eax
.text:004051DA                 jz      short loc_4051FE
.text:004051DC
.text:004051DC loc_4051DC:                             ; CODE XREF: sub_4050C4+13F↓j
.text:004051DC                 mov     [esp+28h+ArgList], eax
.text:004051E0                 mov     edi, ds:_iob
.text:004051E6                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:004051EE                 add     edi, 40h ; '@'
.text:004051F1                 mov     [esp+28h+Stream], edi ; Stream
.text:004051F4                 call    fprintf
.text:004051F9                 jmp     loc_405179
.text:004051FE ; ---------------------------------------------------------------------------
.text:004051FE
.text:004051FE loc_4051FE:                             ; CODE XREF: sub_4050C4+116↑j
.text:004051FE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405203                 jmp     short loc_4051DC
.text:00405205 ; ---------------------------------------------------------------------------
.text:00405205
.text:00405205 loc_405205:                             ; CODE XREF: sub_4050C4+5D↑j
.text:00405205                 mov     [esp+28h+Format], (offset loc_4050CB+1) ; Format
.text:0040520D                 mov     ecx, ds:_iob
.text:00405213                 mov     edx, ds:dword_40F4B0
.text:00405219                 add     ecx, 40h ; '@'
.text:0040521C                 mov     [esp+28h+ArgList], edx
.text:00405220                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405223                 call    fprintf
.text:00405228                 jmp     loc_405129
.text:00405228 ; ---------------------------------------------------------------------------
.text:0040522D                 align 10h
.text:00405230
.text:00405230 loc_405230:                             ; CODE XREF: sub_4050C4+33↑j
.text:00405230                 mov     eax, ds:Str1
.text:00405235                 cmp     ebx, eax
.text:00405237                 jz      loc_4051AF
.text:0040523D                 mov     [esp+28h+Format], ebx ; Str2
.text:00405241                 mov     [esp+28h+Stream], eax ; Str1
.text:00405244                 call    strcmp
.text:00405249                 test    eax, eax
.text:0040524B                 jz      loc_4051AF
.text:00405251                 jmp     loc_4050FD
.text:00405256 ; ---------------------------------------------------------------------------
.text:00405256
.text:00405256 loc_405256:                             ; CODE XREF: sub_4050C4+E5↑j
.text:00405256                 mov     [esp+28h+Stream], ebp ; Code
.text:00405259                 call    exit
.text:00405259 sub_4050C4      endp ; sp-analysis failed
.text:00405259
.text:00405259 ; ---------------------------------------------------------------------------
.text:0040525E                 align 10h
.text:00405260
.text:00405260 ; =============== S U B R O U T I N E =======================================
.text:00405260
.text:00405260
.text:00405260 sub_405260      proc near               ; CODE XREF: sub_4019A0+51↑p
.text:00405260
.text:00405260 hNamedPipe      = dword ptr -0Ch
.text:00405260 var_8           = dword ptr -8
.text:00405260 var_4           = dword ptr -4
.text:00405260 arg_0           = dword ptr  4
.text:00405260 arg_4           = dword ptr  8
.text:00405260
.text:00405260                 sub     esp, 0Ch
.text:00405263                 mov     edx, [esp+0Ch+arg_4]
.text:00405267                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:0040526E                 mov     [esp+0Ch+var_4], edx ; int
.text:00405272                 mov     edx, [esp+0Ch+arg_0]
.text:00405276                 mov     [esp+0Ch+var_8], edx ; int
.text:0040527A                 call    sub_4054D0
.text:0040527F                 add     esp, 0Ch
.text:00405282                 retn
.text:00405282 sub_405260      endp
.text:00405282
.text:00405282 ; ---------------------------------------------------------------------------
.text:00405283 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:00405283                                         ; DATA XREF: .text:0040536E↓o
.text:00405296 aModeO          db 'mode:      %#o',0Ah,0
.text:00405296                                         ; DATA XREF: .text:00405384↓o
.text:004052A6 aUidLd          db 'uid:       %ld',0Ah,0
.text:004052A6                                         ; DATA XREF: .text:00405397↓o
.text:004052B6 aGidLd          db 'gid:       %ld',0Ah,0
.text:004052B6                                         ; DATA XREF: .text:004053AA↓o
.text:004052C6 aDevLu          db 'dev:       %lu',0Ah,0
.text:004052C6                                         ; DATA XREF: .text:004053BD↓o
.text:004052D6 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:004052D6                                         ; DATA XREF: .text:004053D0↓o
.text:004052E6 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:004052E6                                         ; DATA XREF: .text:004053E6↓o
.text:004052F8 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:004052F8                                         ; DATA XREF: .text:004053FD↓o
.text:00405307 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:00405307                                         ; DATA XREF: .text:00405413↓o
.text:00405319 aAtimeLdS       db 'atime:     %ld: %s',0
.text:00405319                                         ; DATA XREF: .text:00405439↓o
.text:0040532C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0040532C                                         ; DATA XREF: .text:0040545B↓o
.text:0040533F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:0040533F                                         ; DATA XREF: .text:0040547D↓o
.text:00405353                 align 10h
.text:00405360                 push    ebx
.text:00405361                 sub     esp, 18h
.text:00405364                 mov     ebx, [esp+20h]
.text:00405368                 mov     edx, [ebx+8]
.text:0040536B                 mov     ecx, [ebx+0Ch]
.text:0040536E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:00405375                 mov     [esp+4], edx
.text:00405379                 mov     [esp+8], ecx
.text:0040537D                 call    printf
.text:00405382                 mov     ecx, [ebx]
.text:00405384                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:0040538B                 mov     [esp+4], ecx
.text:0040538F                 call    printf
.text:00405394                 mov     edx, [ebx+1Ch]
.text:00405397                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:0040539E                 mov     [esp+4], edx
.text:004053A2                 call    printf
.text:004053A7                 mov     ecx, [ebx+20h]
.text:004053AA                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:004053B1                 mov     [esp+4], ecx
.text:004053B5                 call    printf
.text:004053BA                 mov     edx, [ebx+10h]
.text:004053BD                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:004053C4                 mov     [esp+4], edx
.text:004053C8                 call    printf
.text:004053CD                 mov     ecx, [ebx+18h]
.text:004053D0                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:004053D7                 mov     [esp+4], ecx
.text:004053DB                 call    printf
.text:004053E0                 mov     edx, [ebx+30h]
.text:004053E3                 mov     ecx, [ebx+34h]
.text:004053E6                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:004053ED                 mov     [esp+4], edx
.text:004053F1                 mov     [esp+8], ecx
.text:004053F5                 call    printf
.text:004053FA                 mov     ecx, [ebx+50h]
.text:004053FD                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:00405404                 mov     [esp+4], ecx
.text:00405408                 call    printf
.text:0040540D                 mov     ecx, [ebx+5Ch]
.text:00405410                 mov     edx, [ebx+58h]
.text:00405413                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0040541A                 mov     [esp+8], ecx
.text:0040541E                 mov     [esp+4], edx
.text:00405422                 call    printf
.text:00405427                 lea     edx, [ebx+38h]
.text:0040542A                 mov     [esp], edx
.text:0040542D                 call    ctime
.text:00405432                 mov     [esp+8], eax
.text:00405436                 mov     ecx, [ebx+38h]
.text:00405439                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:00405440                 mov     [esp+4], ecx
.text:00405444                 call    printf
.text:00405449                 lea     edx, [ebx+40h]
.text:0040544C                 mov     [esp], edx
.text:0040544F                 call    ctime
.text:00405454                 mov     [esp+8], eax
.text:00405458                 mov     ecx, [ebx+40h]
.text:0040545B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:00405462                 mov     [esp+4], ecx
.text:00405466                 call    printf
.text:0040546B                 lea     edx, [ebx+48h]
.text:0040546E                 mov     [esp], edx
.text:00405471                 call    ctime
.text:00405476                 mov     [esp+8], eax
.text:0040547A                 mov     edx, [ebx+48h]
.text:0040547D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:00405484                 mov     [esp+4], edx
.text:00405488                 call    printf
.text:0040548D                 add     esp, 18h
.text:00405490                 xor     eax, eax
.text:00405492                 pop     ebx
.text:00405493                 retn
.text:00405493 ; ---------------------------------------------------------------------------
.text:00405494                 align 10h
.text:004054A0 ; const char aFxstat64BadFil[]
.text:004054A0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:004054A0                                         ; DATA XREF: sub_4054D0+7B↓o
.text:004054C4                 align 10h
.text:004054D0
.text:004054D0 ; =============== S U B R O U T I N E =======================================
.text:004054D0
.text:004054D0
.text:004054D0 ; int __cdecl sub_4054D0(HANDLE hNamedPipe, int, int)
.text:004054D0 sub_4054D0      proc near               ; CODE XREF: sub_405260+1A↑p
.text:004054D0                                         ; .text:00407ED9↓p
.text:004054D0
.text:004054D0 FileHandle      = dword ptr -1Ch
.text:004054D0 var_18          = dword ptr -18h
.text:004054D0 var_C           = dword ptr -0Ch
.text:004054D0 var_8           = dword ptr -8
.text:004054D0 var_4           = dword ptr -4
.text:004054D0 hNamedPipe      = dword ptr  4
.text:004054D0 arg_4           = dword ptr  8
.text:004054D0 arg_8           = dword ptr  0Ch
.text:004054D0
.text:004054D0                 sub     esp, 1Ch
.text:004054D3                 mov     edx, [esp+1Ch+arg_4]
.text:004054D7                 mov     [esp+1Ch+var_C], ebx
.text:004054DB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:004054DF                 mov     [esp+1Ch+var_8], esi
.text:004054E3                 mov     esi, [esp+1Ch+arg_8]
.text:004054E7                 test    ebx, ebx
.text:004054E9                 mov     [esp+1Ch+var_4], edi
.text:004054ED                 jnz     short loc_405527
.text:004054EF                 test    edx, edx
.text:004054F1                 js      short loc_405547
.text:004054F3                 test    esi, esi
.text:004054F5                 jz      short loc_405527
.text:004054F7                 cld
.text:004054F8                 mov     eax, ebx
.text:004054FA                 mov     edi, esi
.text:004054FC                 mov     ecx, 18h
.text:00405501                 rep stosd
.text:00405503                 mov     [esp+1Ch+arg_4], esi ; int
.text:00405507                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040550A                 call    _get_osfhandle
.text:0040550F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:00405513                 mov     ebx, [esp+1Ch+var_C]
.text:00405517                 mov     esi, [esp+1Ch+var_8]
.text:0040551B                 mov     edi, [esp+1Ch+var_4]
.text:0040551F                 add     esp, 1Ch
.text:00405522                 jmp     sub_4058B0
.text:00405527 ; ---------------------------------------------------------------------------
.text:00405527
.text:00405527 loc_405527:                             ; CODE XREF: sub_4054D0+1D↑j
.text:00405527                                         ; sub_4054D0+25↑j
.text:00405527                 call    _errno
.text:0040552C                 mov     dword ptr [eax], 16h
.text:00405532
.text:00405532 loc_405532:                             ; CODE XREF: sub_4054D0+92↓j
.text:00405532                 mov     ebx, [esp+1Ch+var_C]
.text:00405536                 mov     eax, 0FFFFFFFFh
.text:0040553B                 mov     esi, [esp+1Ch+var_8]
.text:0040553F                 mov     edi, [esp+1Ch+var_4]
.text:00405543                 add     esp, 1Ch
.text:00405546                 retn
.text:00405547 ; ---------------------------------------------------------------------------
.text:00405547
.text:00405547 loc_405547:                             ; CODE XREF: sub_4054D0+21↑j
.text:00405547                 mov     [esp+1Ch+var_18], edx
.text:0040554B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:00405552                 call    printf
.text:00405557                 call    _errno
.text:0040555C                 mov     dword ptr [eax], 9
.text:00405562                 jmp     short loc_405532
.text:00405562 sub_4054D0      endp
.text:00405562
.text:00405562 ; ---------------------------------------------------------------------------
.text:00405564                 align 20h
.text:00405580 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00405580                                         ; DATA XREF: .data:off_40E054↓o
.text:00405594 ; const CHAR LibFileName[]
.text:00405594 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_4055C0+11↓o
.text:00405594                                         ; sub_405730+C↓o ...
.text:004055A1 ; const CHAR ProcName[]
.text:004055A1 ProcName        db 'GetFileAttributesExA',0
.text:004055A1                                         ; DATA XREF: sub_4055C0+28↓o
.text:004055B6                 align 10h
.text:004055C0
.text:004055C0 ; =============== S U B R O U T I N E =======================================
.text:004055C0
.text:004055C0
.text:004055C0 ; int __cdecl sub_4055C0(LPCSTR lpFileName, int)
.text:004055C0 sub_4055C0      proc near               ; CODE XREF: .text:00406764↓p
.text:004055C0                                         ; sub_406B60+37↓p
.text:004055C0
.text:004055C0 lpModuleName    = dword ptr -18Ch
.text:004055C0 lpProcName      = dword ptr -188h
.text:004055C0 var_184         = dword ptr -184h
.text:004055C0 var_170         = dword ptr -170h
.text:004055C0 var_164         = dword ptr -164h
.text:004055C0 hModule         = dword ptr -160h
.text:004055C0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004055C0 lpFileName      = dword ptr  4
.text:004055C0 arg_4           = dword ptr  8
.text:004055C0
.text:004055C0                 push    ebp
.text:004055C1                 push    edi
.text:004055C2                 push    esi
.text:004055C3                 push    ebx
.text:004055C4                 sub     esp, 17Ch
.text:004055CA                 mov     ebx, [esp+18Ch+arg_4]
.text:004055D1                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:004055D8                 call    GetModuleHandleA
.text:004055DD                 sub     esp, 4
.text:004055E0                 mov     [esp+18Ch+hModule], eax
.text:004055E4                 mov     edx, [esp+18Ch+hModule]
.text:004055E8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:004055F0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:004055F3                 call    GetProcAddress
.text:004055F8                 sub     esp, 8
.text:004055FB                 mov     ebp, eax
.text:004055FD                 mov     eax, [esp+18Ch+lpFileName]
.text:00405604                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00405607                 call    GetFileAttributesA
.text:0040560C                 sub     esp, 4
.text:0040560F                 mov     [esp+18Ch+var_164], eax
.text:00405613                 xor     eax, eax
.text:00405615                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040561A                 jz      short loc_405671
.text:0040561C                 cld
.text:0040561D                 mov     ecx, 50h ; 'P'
.text:00405622                 lea     esi, [esp+18Ch+FindFileData]
.text:00405626                 mov     edi, esi
.text:00405628                 test    ebp, ebp
.text:0040562A                 rep stosd
.text:0040562C                 mov     [esp+18Ch+var_170], 0
.text:00405634                 jz      short loc_405655
.text:00405636                 mov     [esp+18Ch+var_184], ebx
.text:0040563A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00405641                 mov     [esp+18Ch+lpProcName], 0
.text:00405649                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040564C                 call    ebp
.text:0040564E                 sub     esp, 0Ch
.text:00405651                 mov     [esp+18Ch+var_170], eax
.text:00405655
.text:00405655 loc_405655:                             ; CODE XREF: sub_4055C0+74↑j
.text:00405655                 mov     eax, [esp+18Ch+var_170]
.text:00405659                 test    eax, eax
.text:0040565B                 jz      short loc_405680
.text:0040565D
.text:0040565D loc_40565D:                             ; CODE XREF: sub_4055C0+131↓j
.text:0040565D                                         ; sub_4055C0+14B↓j
.text:0040565D                 mov     ebx, [esp+18Ch+hModule]
.text:00405661                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00405664                 call    FreeLibrary
.text:00405669                 sub     esp, 4
.text:0040566C                 mov     eax, 1
.text:00405671
.text:00405671 loc_405671:                             ; CODE XREF: sub_4055C0+5A↑j
.text:00405671                 add     esp, 17Ch
.text:00405677                 pop     ebx
.text:00405678                 pop     esi
.text:00405679                 pop     edi
.text:0040567A                 pop     ebp
.text:0040567B                 retn
.text:0040567B ; ---------------------------------------------------------------------------
.text:0040567C                 align 10h
.text:00405680
.text:00405680 loc_405680:                             ; CODE XREF: sub_4055C0+9B↑j
.text:00405680                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:00405684                 mov     edx, [esp+18Ch+lpFileName]
.text:0040568B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040568E                 call    FindFirstFileA
.text:00405693                 sub     esp, 8
.text:00405696                 xor     ecx, ecx
.text:00405698                 cmp     eax, 0FFFFFFFFh
.text:0040569B                 setnz   cl
.text:0040569E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:004056A2                 mov     [ebx], edi
.text:004056A4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:004056A8                 mov     [esp+18Ch+var_170], ecx
.text:004056AC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:004056B0                 mov     [ebx+8], esi
.text:004056B3                 mov     [ebx+4], ecx
.text:004056B6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:004056BA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:004056BE                 mov     [ebx+0Ch], ebp
.text:004056C1                 mov     [ebx+10h], edi
.text:004056C4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:004056C8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:004056CC                 mov     [ebx+18h], esi
.text:004056CF                 mov     [ebx+14h], ecx
.text:004056D2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:004056D6                 mov     [ebx+1Ch], ebp
.text:004056D9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:004056DD                 mov     [ebx+20h], edi
.text:004056E0                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:004056E3                 call    FindClose
.text:004056E8                 sub     esp, 4
.text:004056EB                 mov     esi, [esp+18Ch+var_170]
.text:004056EF                 test    esi, esi
.text:004056F1                 jnz     loc_40565D
.text:004056F7                 cld
.text:004056F8                 mov     eax, [esp+18Ch+var_170]
.text:004056FC                 mov     ecx, 9
.text:00405701                 mov     edi, ebx
.text:00405703                 rep stosd
.text:00405705                 mov     ebp, [esp+18Ch+var_164]
.text:00405709                 mov     [ebx], ebp
.text:0040570B                 jmp     loc_40565D
.text:0040570B sub_4055C0      endp
.text:0040570B
.text:0040570B ; ---------------------------------------------------------------------------
.text:00405710 ; const CHAR aFindfirstfilee[]
.text:00405710 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_405730+23↓o
.text:00405721 ; const char Source[]
.text:00405721 Source          db '\*',0               ; DATA XREF: sub_405730:loc_4057BD↓o
.text:00405724                 align 10h
.text:00405730
.text:00405730 ; =============== S U B R O U T I N E =======================================
.text:00405730
.text:00405730
.text:00405730 ; int __cdecl sub_405730(char *Str)
.text:00405730 sub_405730      proc near               ; CODE XREF: .text:00406863↓p
.text:00405730                                         ; sub_406B60+3FA↓p ...
.text:00405730
.text:00405730 lpLibFileName   = dword ptr -18Ch
.text:00405730 lpProcName      = dword ptr -188h
.text:00405730 var_184         = dword ptr -184h
.text:00405730 var_180         = dword ptr -180h
.text:00405730 var_17C         = dword ptr -17Ch
.text:00405730 var_178         = dword ptr -178h
.text:00405730 var_164         = dword ptr -164h
.text:00405730 hModule         = dword ptr -160h
.text:00405730 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00405730 Str             = dword ptr  4
.text:00405730
.text:00405730                 push    ebp
.text:00405731                 push    edi
.text:00405732                 xor     edi, edi
.text:00405734                 push    esi
.text:00405735                 push    ebx
.text:00405736                 sub     esp, 17Ch
.text:0040573C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00405743                 call    LoadLibraryA
.text:00405748                 sub     esp, 4
.text:0040574B                 mov     [esp+18Ch+hModule], eax
.text:0040574F                 mov     ecx, [esp+18Ch+hModule]
.text:00405753                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040575B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040575E                 call    GetProcAddress
.text:00405763                 sub     esp, 8
.text:00405766                 mov     edx, [esp+18Ch+Str]
.text:0040576D                 mov     [esp+18Ch+var_164], eax
.text:00405771                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00405774                 call    strlen
.text:00405779                 lea     edx, [eax+5]
.text:0040577C                 mov     ebx, eax
.text:0040577E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00405781                 call    malloc
.text:00405786                 mov     esi, eax
.text:00405788                 test    esi, esi
.text:0040578A                 mov     eax, 1
.text:0040578F                 jz      loc_40586D
.text:00405795                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00405798                 mov     ebp, [esp+18Ch+Str]
.text:0040579F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:004057A3                 call    strcpy
.text:004057A8                 movzx   eax, byte ptr [ebx+esi-1]
.text:004057AD                 cmp     al, 2Fh ; '/'
.text:004057AF                 jz      loc_40589B
.text:004057B5                 cmp     al, 5Ch ; '\'
.text:004057B7                 jz      loc_40589B
.text:004057BD
.text:004057BD loc_4057BD:                             ; CODE XREF: sub_405730+170↓j
.text:004057BD                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:004057C5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:004057C8                 call    strcat
.text:004057CD                 mov     eax, [esp+18Ch+var_164]
.text:004057D1                 test    eax, eax
.text:004057D3                 jz      loc_405895
.text:004057D9                 mov     [esp+18Ch+var_178], 0
.text:004057E1                 lea     ebp, [esp+18Ch+FindFileData]
.text:004057E5                 mov     [esp+18Ch+var_17C], 0
.text:004057ED                 mov     [esp+18Ch+var_180], 1
.text:004057F5                 mov     [esp+18Ch+var_184], ebp
.text:004057F9                 mov     [esp+18Ch+lpProcName], 0
.text:00405801                 mov     [esp+18Ch+lpLibFileName], esi
.text:00405804                 call    [esp+18Ch+var_164]
.text:00405808                 sub     esp, 18h
.text:0040580B                 mov     ebx, eax
.text:0040580D                 cmp     eax, 0FFFFFFFFh
.text:00405810                 jz      short loc_405878
.text:00405812                 lea     esi, [esi+0]
.text:00405819                 lea     edi, [edi+0]
.text:00405820
.text:00405820 loc_405820:                             ; CODE XREF: sub_405730+109↓j
.text:00405820                                         ; sub_405730+161↓j
.text:00405820                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00405825                 jz      short loc_405828
.text:00405827                 inc     edi
.text:00405828
.text:00405828 loc_405828:                             ; CODE XREF: sub_405730+F5↑j
.text:00405828                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040582C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040582F                 call    FindNextFileA
.text:00405834                 sub     esp, 8
.text:00405837                 test    eax, eax
.text:00405839                 jnz     short loc_405820
.text:0040583B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040583E                 call    FindClose
.text:00405843                 sub     esp, 4
.text:00405846                 mov     esi, [esp+18Ch+hModule]
.text:0040584A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040584D                 call    FreeLibrary
.text:00405852                 sub     esp, 4
.text:00405855                 mov     ebx, [esp+18Ch+Str]
.text:0040585C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040585F                 call    sub_407F70
.text:00405864                 test    eax, eax
.text:00405866                 jz      short loc_40586B
.text:00405868                 add     edi, 2
.text:0040586B
.text:0040586B loc_40586B:                             ; CODE XREF: sub_405730+136↑j
.text:0040586B                 mov     eax, edi
.text:0040586D
.text:0040586D loc_40586D:                             ; CODE XREF: sub_405730+5F↑j
.text:0040586D                                         ; sub_405730+163↓j
.text:0040586D                 add     esp, 17Ch
.text:00405873                 pop     ebx
.text:00405874                 pop     esi
.text:00405875                 pop     edi
.text:00405876                 pop     ebp
.text:00405877                 retn
.text:00405878 ; ---------------------------------------------------------------------------
.text:00405878
.text:00405878 loc_405878:                             ; CODE XREF: sub_405730+E0↑j
.text:00405878                                         ; sub_405730+169↓j
.text:00405878                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040587C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040587F                 call    FindFirstFileA
.text:00405884                 mov     ebx, eax
.text:00405886                 sub     esp, 8
.text:00405889                 cmp     ebx, 0FFFFFFFFh
.text:0040588C                 mov     eax, 2
.text:00405891                 jnz     short loc_405820
.text:00405893                 jmp     short loc_40586D
.text:00405895 ; ---------------------------------------------------------------------------
.text:00405895
.text:00405895 loc_405895:                             ; CODE XREF: sub_405730+A3↑j
.text:00405895                 lea     ebp, [esp+18Ch+FindFileData]
.text:00405899                 jmp     short loc_405878
.text:0040589B ; ---------------------------------------------------------------------------
.text:0040589B
.text:0040589B loc_40589B:                             ; CODE XREF: sub_405730+7F↑j
.text:0040589B                                         ; sub_405730+87↑j
.text:0040589B                 mov     byte ptr [ebx+esi-1], 0
.text:004058A0                 jmp     loc_4057BD
.text:004058A0 sub_405730      endp
.text:004058A0
.text:004058A0 ; ---------------------------------------------------------------------------
.text:004058A5                 align 10h
.text:004058B0
.text:004058B0 ; =============== S U B R O U T I N E =======================================
.text:004058B0
.text:004058B0
.text:004058B0 ; int __cdecl sub_4058B0(HANDLE hNamedPipe, int)
.text:004058B0 sub_4058B0      proc near               ; CODE XREF: sub_4054D0+52↑j
.text:004058B0                                         ; sub_4070E0-B9↓p
.text:004058B0
.text:004058B0 hFile           = dword ptr -0ECh
.text:004058B0 lpFileInformation= dword ptr -0E8h
.text:004058B0 nBufferSize     = dword ptr -0E4h
.text:004058B0 lpBytesRead     = dword ptr -0E0h
.text:004058B0 lpTotalBytesAvail= dword ptr -0DCh
.text:004058B0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:004058B0 var_C4          = dword ptr -0C4h
.text:004058B0 var_C0          = dword ptr -0C0h
.text:004058B0 var_BC          = dword ptr -0BCh
.text:004058B0 var_B8          = dword ptr -0B8h
.text:004058B0 var_B4          = dword ptr -0B4h
.text:004058B0 var_B0          = dword ptr -0B0h
.text:004058B0 var_AC          = dword ptr -0ACh
.text:004058B0 var_A8          = dword ptr -0A8h
.text:004058B0 TotalBytesAvail = dword ptr -0A0h
.text:004058B0 var_9C          = dword ptr -9Ch
.text:004058B0 var_98          = dword ptr -98h
.text:004058B0 var_94          = dword ptr -94h
.text:004058B0 var_90          = dword ptr -90h
.text:004058B0 var_8C          = dword ptr -8Ch
.text:004058B0 var_88          = dword ptr -88h
.text:004058B0 var_84          = dword ptr -84h
.text:004058B0 var_80          = dword ptr -80h
.text:004058B0 var_7C          = dword ptr -7Ch
.text:004058B0 var_78          = dword ptr -78h
.text:004058B0 var_74          = dword ptr -74h
.text:004058B0 var_70          = dword ptr -70h
.text:004058B0 var_6C          = dword ptr -6Ch
.text:004058B0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:004058B0 hNamedPipe      = dword ptr  4
.text:004058B0 arg_4           = dword ptr  8
.text:004058B0
.text:004058B0                 push    ebp
.text:004058B1                 mov     eax, 0FFFFFFFFh
.text:004058B6                 push    edi
.text:004058B7                 push    esi
.text:004058B8                 push    ebx
.text:004058B9                 sub     esp, 0DCh
.text:004058BF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:004058C6                 mov     ebp, [esp+0ECh+arg_4]
.text:004058CD                 cmp     esi, 0FFFFFFFFh
.text:004058D0                 jz      loc_405C51
.text:004058D6                 cld
.text:004058D7                 xor     eax, eax
.text:004058D9                 lea     ebx, [esp+0ECh+FileInformation]
.text:004058E0                 mov     ecx, 0Dh
.text:004058E5                 mov     edi, ebx
.text:004058E7                 rep stosd
.text:004058E9                 mov     dword ptr [ebp+18h], 1
.text:004058F0                 mov     [esp+0ECh+hFile], esi ; hFile
.text:004058F3                 call    GetFileType
.text:004058F8                 sub     esp, 4
.text:004058FB                 xor     edx, edx
.text:004058FD                 cmp     eax, 2
.text:00405900                 jz      loc_405D30
.text:00405906                 cmp     eax, 3
.text:00405909                 jz      loc_405D20
.text:0040590F
.text:0040590F loc_40590F:                             ; CODE XREF: sub_4058B0+475↓j
.text:0040590F                                         ; sub_4058B0+485↓j
.text:0040590F                 or      [ebp+0], edx
.text:00405912                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00405916                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00405919                 call    GetFileInformationByHandle
.text:0040591E                 sub     esp, 8
.text:00405921                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00405928                 test    ecx, ecx
.text:0040592A                 jnz     short loc_405960
.text:0040592C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00405933                 test    edx, edx
.text:00405935                 jnz     short loc_405960
.text:00405937                 mov     edx, [ebp+0]
.text:0040593A                 and     edx, 0F000h
.text:00405940                 cmp     edx, 1000h
.text:00405946                 jz      loc_405CB6
.text:0040594C
.text:0040594C loc_40594C:                             ; CODE XREF: sub_4058B0+459↓j
.text:0040594C                                         ; sub_4058B0+465↓j
.text:0040594C                 test    ecx, ecx
.text:0040594E                 jnz     short loc_405960
.text:00405950                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00405957                 test    edx, edx
.text:00405959                 jz      loc_405C94
.text:0040595F                 nop
.text:00405960
.text:00405960 loc_405960:                             ; CODE XREF: sub_4058B0+7A↑j
.text:00405960                                         ; sub_4058B0+85↑j ...
.text:00405960                 cld
.text:00405961                 mov     esi, ebx
.text:00405963                 mov     dword ptr [ebp+14h], 0
.text:0040596A                 lea     edi, [esp+0ECh+var_9C]
.text:0040596E                 mov     ecx, 0Dh
.text:00405973                 rep movsd
.text:00405975                 xor     ebx, ebx
.text:00405977                 xor     edi, edi
.text:00405979                 mov     edx, [esp+0ECh+var_6C]
.text:00405980                 mov     esi, [esp+0ECh+var_70]
.text:00405984                 or      edx, ebx
.text:00405986                 mov     ebx, [esp+0ECh+var_9C]
.text:0040598A                 mov     [ebp+8], edx
.text:0040598D                 or      edi, esi
.text:0040598F                 xor     edx, edx
.text:00405991                 mov     [ebp+0Ch], edi
.text:00405994                 test    bl, 10h
.text:00405997                 mov     esi, [esp+0ECh+var_80]
.text:0040599B                 setz    dl
.text:0040599E                 mov     [ebp+10h], esi
.text:004059A1                 dec     edx
.text:004059A2                 and     edx, 0FFFFC000h
.text:004059A8                 add     edx, 8000h
.text:004059AE                 or      edx, 124h
.text:004059B4                 test    bl, 1
.text:004059B7                 movzx   eax, dx
.text:004059BA                 jnz     short loc_4059C1
.text:004059BC                 or      eax, 92h
.text:004059C1
.text:004059C1 loc_4059C1:                             ; CODE XREF: sub_4058B0+10A↑j
.text:004059C1                 or      [ebp+0], eax
.text:004059C4                 xor     edx, edx
.text:004059C6                 mov     ebx, [esp+0ECh+var_7C]
.text:004059CA                 mov     ecx, [esp+0ECh+var_78]
.text:004059CE                 mov     eax, edx
.text:004059D0                 xor     esi, esi
.text:004059D2                 mov     edx, [esp+0ECh+var_8C]
.text:004059D6                 mov     edi, ebx
.text:004059D8                 or      eax, edi
.text:004059DA                 mov     [esp+0ECh+var_A8], eax
.text:004059DE                 mov     ebx, ecx
.text:004059E0                 mov     edi, [esp+0ECh+var_74]
.text:004059E4                 or      ebx, esi
.text:004059E6                 mov     esi, [esp+0ECh+var_A8]
.text:004059EA                 mov     [esp+0ECh+var_AC], ebx
.text:004059EE                 xor     ebx, ebx
.text:004059F0                 mov     ecx, [esp+0ECh+var_AC]
.text:004059F4                 mov     [ebp+34h], esi
.text:004059F7                 mov     esi, [esp+0ECh+var_90]
.text:004059FB                 mov     [ebp+18h], edi
.text:004059FE                 xor     edi, edi
.text:00405A00                 or      esi, ebx
.text:00405A02                 mov     [ebp+30h], ecx
.text:00405A05                 or      edi, edx
.text:00405A07                 mov     edx, esi
.text:00405A09                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405A11                 sub     edx, 0D53E8000h
.text:00405A17                 mov     ebx, edi
.text:00405A19                 sbb     ebx, 19DB1DEh
.text:00405A1F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00405A23                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405A2B                 mov     [esp+0ECh+hFile], edx
.text:00405A2E                 call    sub_40CDA0
.text:00405A33                 mov     ecx, eax
.text:00405A35                 shr     eax, 1Fh
.text:00405A38                 dec     eax
.text:00405A39                 and     ecx, eax
.text:00405A3B                 mov     [ebp+38h], ecx
.text:00405A3E                 mov     [esp+0ECh+hFile], esi
.text:00405A41                 mov     [esp+0ECh+lpFileInformation], edi
.text:00405A45                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405A4D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405A55                 call    sub_40CEC0
.text:00405A5A                 lea     ebx, [eax+eax*4]
.text:00405A5D                 xor     ecx, ecx
.text:00405A5F                 lea     esi, [ebx+ebx*4]
.text:00405A62                 shl     esi, 2
.text:00405A65                 mov     edi, esi
.text:00405A67                 shr     edi, 1Fh
.text:00405A6A                 dec     edi
.text:00405A6B                 and     edi, esi
.text:00405A6D                 mov     [ebp+3Ch], edi
.text:00405A70                 mov     esi, [esp+0ECh+var_98]
.text:00405A74                 xor     edi, edi
.text:00405A76                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405A7E                 mov     edx, [esp+0ECh+var_94]
.text:00405A82                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405A8A                 or      esi, ecx
.text:00405A8C                 or      edi, edx
.text:00405A8E                 mov     edx, esi
.text:00405A90                 mov     ecx, edi
.text:00405A92                 sub     edx, 0D53E8000h
.text:00405A98                 sbb     ecx, 19DB1DEh
.text:00405A9E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00405AA2                 mov     [esp+0ECh+hFile], edx
.text:00405AA5                 call    sub_40CDA0
.text:00405AAA                 mov     ebx, eax
.text:00405AAC                 shr     eax, 1Fh
.text:00405AAF                 dec     eax
.text:00405AB0                 and     ebx, eax
.text:00405AB2                 mov     [ebp+48h], ebx
.text:00405AB5                 xor     ebx, ebx
.text:00405AB7                 mov     [esp+0ECh+hFile], esi
.text:00405ABA                 mov     [esp+0ECh+lpFileInformation], edi
.text:00405ABE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405AC6                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405ACE                 call    sub_40CEC0
.text:00405AD3                 lea     ecx, [eax+eax*4]
.text:00405AD6                 lea     esi, [ecx+ecx*4]
.text:00405AD9                 shl     esi, 2
.text:00405ADC                 mov     edi, esi
.text:00405ADE                 shr     edi, 1Fh
.text:00405AE1                 dec     edi
.text:00405AE2                 and     edi, esi
.text:00405AE4                 mov     [ebp+4Ch], edi
.text:00405AE7                 mov     esi, [esp+0ECh+var_88]
.text:00405AEB                 xor     edi, edi
.text:00405AED                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405AF5                 mov     edx, [esp+0ECh+var_84]
.text:00405AF9                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405B01                 or      esi, ebx
.text:00405B03                 or      edi, edx
.text:00405B05                 mov     edx, esi
.text:00405B07                 mov     ebx, edi
.text:00405B09                 sub     edx, 0D53E8000h
.text:00405B0F                 sbb     ebx, 19DB1DEh
.text:00405B15                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00405B19                 mov     [esp+0ECh+hFile], edx
.text:00405B1C                 call    sub_40CDA0
.text:00405B21                 mov     ecx, eax
.text:00405B23                 shr     eax, 1Fh
.text:00405B26                 dec     eax
.text:00405B27                 and     ecx, eax
.text:00405B29                 mov     [ebp+40h], ecx
.text:00405B2C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00405B30                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00405B38                 mov     [esp+0ECh+lpBytesRead], 0
.text:00405B40                 mov     [esp+0ECh+hFile], esi
.text:00405B43                 call    sub_40CEC0
.text:00405B48                 mov     dword ptr [ebp+50h], 200h
.text:00405B4F                 lea     ebx, [eax+eax*4]
.text:00405B52                 mov     edi, [esp+0ECh+var_A8]
.text:00405B56                 lea     edx, [ebx+ebx*4]
.text:00405B59                 mov     eax, [esp+0ECh+var_AC]
.text:00405B5D                 shl     edx, 2
.text:00405B60                 mov     ecx, edx
.text:00405B62                 shr     ecx, 1Fh
.text:00405B65                 dec     ecx
.text:00405B66                 and     ecx, edx
.text:00405B68                 test    edi, edi
.text:00405B6A                 mov     edx, [esp+0ECh+var_A8]
.text:00405B6E                 mov     [ebp+44h], ecx
.text:00405B71                 js      loc_405C87
.text:00405B77
.text:00405B77 loc_405B77:                             ; CODE XREF: sub_4058B0+3DF↓j
.text:00405B77                 mov     edi, [esp+0ECh+var_AC]
.text:00405B7B                 xor     esi, esi
.text:00405B7D                 mov     ecx, eax
.text:00405B7F                 shrd    ecx, edx, 9
.text:00405B83                 mov     ebx, edx
.text:00405B85                 mov     eax, esi
.text:00405B87                 and     edi, 1FFh
.text:00405B8D                 sar     ebx, 9
.text:00405B90                 or      eax, edi
.text:00405B92                 jz      short loc_405B9A
.text:00405B94                 add     ecx, 1
.text:00405B97                 adc     ebx, 0
.text:00405B9A
.text:00405B9A loc_405B9A:                             ; CODE XREF: sub_4058B0+2E2↑j
.text:00405B9A                 mov     [ebp+5Ch], ebx
.text:00405B9D                 mov     esi, dword_40E050
.text:00405BA3                 xor     edi, edi
.text:00405BA5                 mov     [ebp+58h], ecx
.text:00405BA8                 mov     ebx, dword_40E050
.text:00405BAE                 mov     ecx, [esp+0ECh+var_A8]
.text:00405BB2                 mov     edx, [esp+0ECh+var_AC]
.text:00405BB6                 mov     [ebp+50h], ebx
.text:00405BB9                 shr     ebx, 9
.text:00405BBC                 mov     [esp+0ECh+lpBytesRead], edi
.text:00405BC0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00405BC4                 mov     [esp+0ECh+nBufferSize], esi
.text:00405BC8                 mov     [esp+0ECh+hFile], edx
.text:00405BCB                 call    sub_40CDA0
.text:00405BD0                 mov     [esp+0ECh+lpBytesRead], edi
.text:00405BD4                 mov     ecx, [esp+0ECh+var_AC]
.text:00405BD8                 mov     edi, [esp+0ECh+var_A8]
.text:00405BDC                 mov     [esp+0ECh+var_BC], ebx
.text:00405BE0                 mov     [esp+0ECh+var_B4], eax
.text:00405BE4                 mov     [esp+0ECh+var_B0], edx
.text:00405BE8                 mov     [esp+0ECh+var_B8], 0
.text:00405BF0                 mov     [esp+0ECh+nBufferSize], esi
.text:00405BF4                 mov     [esp+0ECh+hFile], ecx
.text:00405BF7                 mov     [esp+0ECh+lpFileInformation], edi
.text:00405BFB                 call    sub_40CEC0
.text:00405C00                 mov     ebx, edx
.text:00405C02                 or      ebx, eax
.text:00405C04                 jz      short loc_405C60
.text:00405C06                 mov     edi, [esp+0ECh+var_B4]
.text:00405C0A                 mov     esi, [esp+0ECh+var_B0]
.text:00405C0E                 mov     eax, [esp+0ECh+var_BC]
.text:00405C12                 mov     [esp+0ECh+var_C4], edi
.text:00405C16                 mov     ecx, [esp+0ECh+var_B8]
.text:00405C1A                 add     [esp+0ECh+var_C4], 1
.text:00405C1F                 mov     [esp+0ECh+var_C0], esi
.text:00405C23                 adc     [esp+0ECh+var_C0], 0
.text:00405C28                 mul     [esp+0ECh+var_C4]
.text:00405C2C                 mov     edi, [esp+0ECh+var_C0]
.text:00405C30                 mov     ebx, edx
.text:00405C32                 mov     edx, [esp+0ECh+var_C4]
.text:00405C36                 mov     esi, eax
.text:00405C38                 mov     eax, ebx
.text:00405C3A                 imul    ecx, edx
.text:00405C3D                 mov     edx, [esp+0ECh+var_BC]
.text:00405C41                 imul    edx, edi
.text:00405C44                 add     eax, ecx
.text:00405C46                 lea     edi, [edx+eax]
.text:00405C49
.text:00405C49 loc_405C49:                             ; CODE XREF: sub_4058B0+3D5↓j
.text:00405C49                 mov     [ebp+58h], esi
.text:00405C4C                 xor     eax, eax
.text:00405C4E                 mov     [ebp+5Ch], edi
.text:00405C51
.text:00405C51 loc_405C51:                             ; CODE XREF: sub_4058B0+20↑j
.text:00405C51                 add     esp, 0DCh
.text:00405C57                 pop     ebx
.text:00405C58                 pop     esi
.text:00405C59                 pop     edi
.text:00405C5A                 pop     ebp
.text:00405C5B                 retn
.text:00405C5B ; ---------------------------------------------------------------------------
.text:00405C5C                 align 10h
.text:00405C60
.text:00405C60 loc_405C60:                             ; CODE XREF: sub_4058B0+354↑j
.text:00405C60                 mov     eax, [esp+0ECh+var_B4]
.text:00405C64                 mov     edi, [esp+0ECh+var_B8]
.text:00405C68                 mov     ebx, [esp+0ECh+var_B4]
.text:00405C6C                 mul     [esp+0ECh+var_BC]
.text:00405C70                 mov     ecx, [esp+0ECh+var_BC]
.text:00405C74                 imul    ebx, edi
.text:00405C77                 mov     esi, eax
.text:00405C79                 mov     eax, [esp+0ECh+var_B0]
.text:00405C7D                 add     edx, ebx
.text:00405C7F                 imul    ecx, eax
.text:00405C82                 lea     edi, [ecx+edx]
.text:00405C85                 jmp     short loc_405C49
.text:00405C87 ; ---------------------------------------------------------------------------
.text:00405C87
.text:00405C87 loc_405C87:                             ; CODE XREF: sub_4058B0+2C1↑j
.text:00405C87                 add     eax, 1FFh
.text:00405C8C                 adc     edx, 0
.text:00405C8F                 jmp     loc_405B77
.text:00405C94 ; ---------------------------------------------------------------------------
.text:00405C94
.text:00405C94 loc_405C94:                             ; CODE XREF: sub_4058B0+A9↑j
.text:00405C94                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00405C97                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00405C9E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00405CA2                 call    GetFileSize
.text:00405CA7                 sub     esp, 8
.text:00405CAA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:00405CB1                 jmp     loc_405960
.text:00405CB6 ; ---------------------------------------------------------------------------
.text:00405CB6
.text:00405CB6 loc_405CB6:                             ; CODE XREF: sub_4058B0+96↑j
.text:00405CB6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:00405CBE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:00405CC2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:00405CCA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:00405CCE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00405CD6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:00405CDE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00405CE6                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00405CE9                 call    PeekNamedPipe
.text:00405CEE                 sub     esp, 18h
.text:00405CF1                 test    eax, eax
.text:00405CF3                 jz      short loc_405D0E
.text:00405CF5                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00405CF9                 xor     eax, eax
.text:00405CFB                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00405D02                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00405D09                 jmp     loc_40594C
.text:00405D0E ; ---------------------------------------------------------------------------
.text:00405D0E
.text:00405D0E loc_405D0E:                             ; CODE XREF: sub_4058B0+443↑j
.text:00405D0E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00405D15                 jmp     loc_40594C
.text:00405D15 ; ---------------------------------------------------------------------------
.text:00405D1A                 align 10h
.text:00405D20
.text:00405D20 loc_405D20:                             ; CODE XREF: sub_4058B0+59↑j
.text:00405D20                 mov     edx, 1000h
.text:00405D25                 jmp     loc_40590F
.text:00405D25 ; ---------------------------------------------------------------------------
.text:00405D2A                 align 10h
.text:00405D30
.text:00405D30 loc_405D30:                             ; CODE XREF: sub_4058B0+50↑j
.text:00405D30                 mov     edx, 2000h
.text:00405D35                 jmp     loc_40590F
.text:00405D35 sub_4058B0      endp
.text:00405D35
.text:00405D35 ; ---------------------------------------------------------------------------
.text:00405D3A aLnk            db '.lnk',0             ; DATA XREF: sub_405D80+E0↓o
.text:00405D3A                                         ; .text:0040642A↓o ...
.text:00405D3F ; const CHAR aKernel32[]
.text:00405D3F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_405D80+12D↓o
.text:00405D3F                                         ; .text:00406ADB↓o
.text:00405D48 ; const CHAR aGetcompressedf[]
.text:00405D48 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00405D48                                         ; DATA XREF: sub_405D80+13E↓o
.text:00405D48                                         ; .text:00406AEC↓o
.text:00405D5F ; const CHAR aGetbinarytypea[]
.text:00405D5F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_405D80+333↓o
.text:00405D5F                                         ; .text:00406486↓o ...
.text:00405D6E ; const char aPathext[]
.text:00405D6E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_405D80:loc_406167↓o
.text:00405D6E                                         ; .text:loc_406530↓o ...
.text:00405D76                 align 10h
.text:00405D80
.text:00405D80 ; =============== S U B R O U T I N E =======================================
.text:00405D80
.text:00405D80
.text:00405D80 ; int __cdecl sub_405D80(char *String1, int)
.text:00405D80 sub_405D80      proc near               ; CODE XREF: sub_406B60+3CD↓p
.text:00405D80                                         ; sub_4070E0-9B↓p
.text:00405D80
.text:00405D80 Str             = dword ptr -6Ch
.text:00405D80 lpProcName      = dword ptr -68h
.text:00405D80 var_64          = dword ptr -64h
.text:00405D80 var_60          = dword ptr -60h
.text:00405D80 var_5C          = dword ptr -5Ch
.text:00405D80 var_4C          = dword ptr -4Ch
.text:00405D80 var_48          = dword ptr -48h
.text:00405D80 var_44          = dword ptr -44h
.text:00405D80 var_40          = dword ptr -40h
.text:00405D80 var_3C          = dword ptr -3Ch
.text:00405D80 var_38          = dword ptr -38h
.text:00405D80 lpRootPathName  = dword ptr -30h
.text:00405D80 var_2C          = byte ptr -2Ch
.text:00405D80 var_28          = dword ptr -28h
.text:00405D80 var_24          = dword ptr -24h
.text:00405D80 var_20          = dword ptr -20h
.text:00405D80 var_1C          = dword ptr -1Ch
.text:00405D80 var_18          = byte ptr -18h
.text:00405D80 String1         = dword ptr  4
.text:00405D80 arg_4           = dword ptr  8
.text:00405D80
.text:00405D80                 push    ebp
.text:00405D81                 push    edi
.text:00405D82                 push    esi
.text:00405D83                 push    ebx
.text:00405D84                 sub     esp, 5Ch
.text:00405D87                 mov     edx, [esp+6Ch+String1]
.text:00405D8B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00405D8E                 call    sub_407BA0
.text:00405D93                 mov     [esp+6Ch+Str], eax
.text:00405D96                 call    sub_407580
.text:00405D9B                 mov     [esp+6Ch+lpRootPathName], eax
.text:00405D9F                 test    eax, eax
.text:00405DA1                 jz      loc_405FD3
.text:00405DA7                 mov     [esp+6Ch+Str], eax ; Str
.text:00405DAA                 call    strlen
.text:00405DAF                 mov     edx, [esp+6Ch+arg_4]
.text:00405DB3                 mov     ebx, eax
.text:00405DB5                 mov     esi, [edx+0Ch]
.text:00405DB8                 mov     edi, [edx+8]
.text:00405DBB                 mov     eax, esi
.text:00405DBD                 or      eax, edi
.text:00405DBF                 jz      loc_4061E0
.text:00405DC5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00405DC9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:00405DCC                 call    GetDriveTypeA
.text:00405DD1                 sub     esp, 4
.text:00405DD4                 cmp     eax, 4
.text:00405DD7                 jz      loc_4061E0
.text:00405DDD
.text:00405DDD loc_405DDD:                             ; CODE XREF: sub_405D80+48A↓j
.text:00405DDD                                         ; sub_405D80+4B2↓j
.text:00405DDD                 mov     edx, [esp+6Ch+arg_4]
.text:00405DE1                 mov     esi, [edx+14h]
.text:00405DE4                 mov     edi, [edx+10h]
.text:00405DE7                 mov     ecx, esi
.text:00405DE9                 or      ecx, edi
.text:00405DEB                 jnz     short loc_405E15
.text:00405DED                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00405DF1                 xor     esi, esi
.text:00405DF3                 xor     edi, edi
.text:00405DF5                 test    ebp, ebp
.text:00405DF7                 jz      short loc_405E07
.text:00405DF9                 movzx   ebx, byte ptr [ebp+0]
.text:00405DFD                 test    bl, bl
.text:00405DFF                 mov     cl, bl
.text:00405E01                 jnz     loc_406191
.text:00405E07
.text:00405E07 loc_405E07:                             ; CODE XREF: sub_405D80+77↑j
.text:00405E07                 xor     eax, eax
.text:00405E09                 xor     edx, edx
.text:00405E0B
.text:00405E0B loc_405E0B:                             ; CODE XREF: sub_405D80+458↓j
.text:00405E0B                 mov     ebp, [esp+6Ch+arg_4]
.text:00405E0F                 mov     [ebp+10h], eax
.text:00405E12                 mov     [ebp+14h], edx
.text:00405E15
.text:00405E15 loc_405E15:                             ; CODE XREF: sub_405D80+6B↑j
.text:00405E15                 mov     edi, [esp+6Ch+String1]
.text:00405E19                 xor     ebx, ebx
.text:00405E1B                 test    edi, edi
.text:00405E1D                 jz      loc_406093
.text:00405E23                 mov     esi, [esp+6Ch+String1]
.text:00405E27                 cmp     byte ptr [esi], 0
.text:00405E2A                 jnz     loc_4060A0
.text:00405E30
.text:00405E30 loc_405E30:                             ; CODE XREF: sub_405D80+38C↓j
.text:00405E30                                         ; sub_405D80+397↓j
.text:00405E30                 mov     ebp, [esp+6Ch+String1]
.text:00405E34                 test    ebp, ebp
.text:00405E36                 jz      loc_406093
.text:00405E3C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00405E44                 mov     edi, [esp+6Ch+String1]
.text:00405E48                 mov     [esp+6Ch+Str], edi ; Str
.text:00405E4B                 call    strrchr
.text:00405E50                 test    eax, eax
.text:00405E52                 jz      loc_406093
.text:00405E58                 cld
.text:00405E59                 mov     ecx, 5
.text:00405E5E                 mov     esi, eax
.text:00405E60                 mov     edi, offset aLnk ; ".lnk"
.text:00405E65                 repe cmpsb
.text:00405E67                 setz    cl
.text:00405E6A                 movzx   eax, cl
.text:00405E6D                 lea     esi, [esi+0]
.text:00405E70
.text:00405E70 loc_405E70:                             ; CODE XREF: sub_405D80+315↓j
.text:00405E70                 test    eax, eax
.text:00405E72                 jz      short loc_405E7A
.text:00405E74                 or      ebx, 0A000h
.text:00405E7A
.text:00405E7A loc_405E7A:                             ; CODE XREF: sub_405D80+F2↑j
.text:00405E7A                 mov     esi, [esp+6Ch+arg_4]
.text:00405E7E                 xor     ecx, ecx
.text:00405E80                 mov     edi, ds:dword_40F190
.text:00405E86                 or      [esi], ebx
.text:00405E88                 mov     ebx, [esi+14h]
.text:00405E8B                 mov     ebp, [esi+10h]
.text:00405E8E                 mov     eax, ebx
.text:00405E90                 xor     eax, ecx
.text:00405E92                 xor     ebp, edi
.text:00405E94                 or      eax, ebp
.text:00405E96                 jnz     loc_406020
.text:00405E9C
.text:00405E9C loc_405E9C:                             ; CODE XREF: sub_405D80+30E↓j
.text:00405E9C                 mov     ecx, dword_40E050
.text:00405EA2                 xor     esi, esi
.text:00405EA4                 xor     edi, edi
.text:00405EA6                 mov     edx, [esp+6Ch+arg_4]
.text:00405EAA                 mov     [edx+50h], ecx
.text:00405EAD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:00405EB4                 call    LoadLibraryA
.text:00405EB9                 sub     esp, 4
.text:00405EBC                 mov     ebp, eax
.text:00405EBE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00405EC6                 mov     [esp+6Ch+Str], eax ; hModule
.text:00405EC9                 call    GetProcAddress
.text:00405ECE                 sub     esp, 8
.text:00405ED1                 test    eax, eax
.text:00405ED3                 jz      short loc_405F08
.text:00405ED5                 mov     ebx, [esp+6Ch+String1]
.text:00405ED9                 lea     esi, [esp+6Ch+var_2C]
.text:00405EDD                 mov     [esp+6Ch+lpProcName], esi
.text:00405EE1                 mov     [esp+6Ch+Str], ebx
.text:00405EE4                 call    eax
.text:00405EE6                 sub     esp, 8
.text:00405EE9                 mov     ebx, eax
.text:00405EEB                 cmp     eax, 0FFFFFFFFh
.text:00405EEE                 jz      loc_406009
.text:00405EF4
.text:00405EF4 loc_405EF4:                             ; CODE XREF: sub_405D80+29A↓j
.text:00405EF4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00405EF8                 mov     ecx, ebx
.text:00405EFA                 xor     edi, edi
.text:00405EFC                 xor     ebx, ebx
.text:00405EFE                 mov     edx, esi
.text:00405F00                 mov     esi, ecx
.text:00405F02                 or      esi, edi
.text:00405F04                 mov     edi, ebx
.text:00405F06                 or      edi, edx
.text:00405F08
.text:00405F08 loc_405F08:                             ; CODE XREF: sub_405D80+153↑j
.text:00405F08                                         ; sub_405D80+294↓j
.text:00405F08                 test    ebp, ebp
.text:00405F0A                 jz      short loc_405F17
.text:00405F0C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:00405F0F                 call    FreeLibrary
.text:00405F14                 sub     esp, 4
.text:00405F17
.text:00405F17 loc_405F17:                             ; CODE XREF: sub_405D80+18A↑j
.text:00405F17                 mov     ebp, edi
.text:00405F19                 mov     edx, ebp
.text:00405F1B                 mov     edi, esi
.text:00405F1D                 or      edx, esi
.text:00405F1F                 jnz     short loc_405F2B
.text:00405F21                 mov     eax, [esp+6Ch+arg_4]
.text:00405F25                 mov     edi, [eax+30h]
.text:00405F28                 mov     ebp, [eax+34h]
.text:00405F2B
.text:00405F2B loc_405F2B:                             ; CODE XREF: sub_405D80+19F↑j
.text:00405F2B                 mov     [esp+6Ch+lpProcName], ebp
.text:00405F2F                 mov     ebx, dword_40E050
.text:00405F35                 xor     esi, esi
.text:00405F37                 mov     [esp+6Ch+var_60], esi
.text:00405F3B                 mov     [esp+6Ch+Str], edi
.text:00405F3E                 mov     [esp+6Ch+var_64], ebx
.text:00405F42                 call    sub_40CDA0
.text:00405F47                 mov     [esp+6Ch+var_3C], eax
.text:00405F4B                 mov     ecx, dword_40E050
.text:00405F51                 mov     [esp+6Ch+lpProcName], ebp
.text:00405F55                 mov     [esp+6Ch+var_38], edx
.text:00405F59                 shr     ecx, 9
.text:00405F5C                 mov     [esp+6Ch+var_44], ecx
.text:00405F60                 mov     [esp+6Ch+var_40], 0
.text:00405F68                 mov     [esp+6Ch+var_64], ebx
.text:00405F6C                 mov     [esp+6Ch+var_60], esi
.text:00405F70                 mov     [esp+6Ch+Str], edi
.text:00405F73                 call    sub_40CEC0
.text:00405F78                 mov     ebp, edx
.text:00405F7A                 or      ebp, eax
.text:00405F7C                 jz      short loc_405FE0
.text:00405F7E                 mov     ebp, [esp+6Ch+var_3C]
.text:00405F82                 mov     esi, [esp+6Ch+var_38]
.text:00405F86                 mov     eax, [esp+6Ch+var_44]
.text:00405F8A                 mov     [esp+6Ch+var_4C], ebp
.text:00405F8E                 mov     ecx, [esp+6Ch+var_40]
.text:00405F92                 mov     ebx, [esp+6Ch+var_44]
.text:00405F96                 add     [esp+6Ch+var_4C], 1
.text:00405F9B                 mov     [esp+6Ch+var_48], esi
.text:00405F9F                 mov     edi, [esp+6Ch+var_4C]
.text:00405FA3                 adc     [esp+6Ch+var_48], 0
.text:00405FA8                 mul     [esp+6Ch+var_4C]
.text:00405FAC                 imul    ecx, edi
.text:00405FAF                 mov     esi, eax
.text:00405FB1                 mov     eax, [esp+6Ch+var_48]
.text:00405FB5                 add     edx, ecx
.text:00405FB7                 imul    ebx, eax
.text:00405FBA                 lea     edi, [ebx+edx]
.text:00405FBD
.text:00405FBD loc_405FBD:                             ; CODE XREF: sub_405D80+287↓j
.text:00405FBD                 mov     ebx, [esp+6Ch+arg_4]
.text:00405FC1                 mov     [ebx+58h], esi
.text:00405FC4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00405FC8                 mov     [ebx+5Ch], edi
.text:00405FCB                 mov     [esp+6Ch+Str], esi ; Block
.text:00405FCE                 call    free
.text:00405FD3
.text:00405FD3 loc_405FD3:                             ; CODE XREF: sub_405D80+21↑j
.text:00405FD3                 add     esp, 5Ch
.text:00405FD6                 xor     eax, eax
.text:00405FD8                 pop     ebx
.text:00405FD9                 pop     esi
.text:00405FDA                 pop     edi
.text:00405FDB                 pop     ebp
.text:00405FDC                 retn
.text:00405FDC ; ---------------------------------------------------------------------------
.text:00405FDD                 align 10h
.text:00405FE0
.text:00405FE0 loc_405FE0:                             ; CODE XREF: sub_405D80+1FC↑j
.text:00405FE0                 mov     eax, [esp+6Ch+var_3C]
.text:00405FE4                 mov     edi, [esp+6Ch+var_40]
.text:00405FE8                 mov     ecx, [esp+6Ch+var_3C]
.text:00405FEC                 mul     [esp+6Ch+var_44]
.text:00405FF0                 mov     ebx, [esp+6Ch+var_44]
.text:00405FF4                 imul    ecx, edi
.text:00405FF7                 mov     ebp, edx
.text:00405FF9                 mov     esi, eax
.text:00405FFB                 mov     edx, [esp+6Ch+var_38]
.text:00405FFF                 add     ebp, ecx
.text:00406001                 imul    ebx, edx
.text:00406004                 lea     edi, [ebx+ebp]
.text:00406007                 jmp     short loc_405FBD
.text:00406009 ; ---------------------------------------------------------------------------
.text:00406009
.text:00406009 loc_406009:                             ; CODE XREF: sub_405D80+16E↑j
.text:00406009                 call    GetLastError
.text:0040600E                 xor     esi, esi
.text:00406010                 xor     edi, edi
.text:00406012                 test    eax, eax
.text:00406014                 jnz     loc_405F08
.text:0040601A                 jmp     loc_405EF4
.text:0040601A ; ---------------------------------------------------------------------------
.text:0040601F                 align 10h
.text:00406020
.text:00406020 loc_406020:                             ; CODE XREF: sub_405D80+116↑j
.text:00406020                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00406024                 lea     ecx, [esp+6Ch+var_20]
.text:00406028                 lea     ebx, [esp+6Ch+var_1C]
.text:0040602C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00406030                 lea     edi, [esp+6Ch+var_24]
.text:00406034                 lea     ebp, [esp+6Ch+var_28]
.text:00406038                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040603C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00406040                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00406044                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00406047                 call    sub_4085F0
.text:0040604C                 test    eax, eax
.text:0040604E                 jnz     short loc_406070
.text:00406050                 mov     [esp+6Ch+var_28], 1
.text:00406058                 mov     [esp+6Ch+var_24], 200h
.text:00406060                 mov     [esp+6Ch+var_20], 0
.text:00406068                 mov     [esp+6Ch+var_1C], 0
.text:00406070
.text:00406070 loc_406070:                             ; CODE XREF: sub_405D80+2CE↑j
.text:00406070                 mov     ebp, [esp+6Ch+var_24]
.text:00406074                 mov     edi, [esp+6Ch+var_28]
.text:00406078                 mov     eax, [esp+6Ch+arg_4]
.text:0040607C                 imul    ebp, edi
.text:0040607F                 mov     esi, [eax+10h]
.text:00406082                 mov     dword_40E050, ebp
.text:00406088                 mov     ds:dword_40F190, esi
.text:0040608E                 jmp     loc_405E9C
.text:00406093 ; ---------------------------------------------------------------------------
.text:00406093
.text:00406093 loc_406093:                             ; CODE XREF: sub_405D80+9D↑j
.text:00406093                                         ; sub_405D80+B6↑j ...
.text:00406093                 xor     eax, eax
.text:00406095                 jmp     loc_405E70
.text:00406095 ; ---------------------------------------------------------------------------
.text:0040609A                 align 10h
.text:004060A0
.text:004060A0 loc_4060A0:                             ; CODE XREF: sub_405D80+AA↑j
.text:004060A0                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:004060A7                 xor     ebp, ebp
.text:004060A9                 call    GetModuleHandleA
.text:004060AE                 sub     esp, 4
.text:004060B1                 mov     edi, eax
.text:004060B3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004060BB                 mov     [esp+6Ch+Str], eax ; hModule
.text:004060BE                 call    GetProcAddress
.text:004060C3                 sub     esp, 8
.text:004060C6                 mov     edx, eax
.text:004060C8                 test    eax, eax
.text:004060CA                 jz      short loc_4060E4
.text:004060CC                 mov     eax, [esp+6Ch+String1]
.text:004060D0                 lea     ecx, [esp+6Ch+var_18]
.text:004060D4                 mov     [esp+6Ch+lpProcName], ecx
.text:004060D8                 mov     [esp+6Ch+Str], eax
.text:004060DB                 call    edx
.text:004060DD                 sub     esp, 8
.text:004060E0                 test    eax, eax
.text:004060E2                 jnz     short loc_406148
.text:004060E4
.text:004060E4 loc_4060E4:                             ; CODE XREF: sub_405D80+34A↑j
.text:004060E4                 mov     edx, ds:Str
.text:004060EA                 test    edx, edx
.text:004060EC                 jz      short loc_406167
.text:004060EE
.text:004060EE loc_4060EE:                             ; CODE XREF: sub_405D80+3FA↓j
.text:004060EE                                         ; sub_405D80+40C↓j
.text:004060EE                 mov     eax, [esp+6Ch+String1]
.text:004060F2                 test    eax, eax
.text:004060F4                 jz      short loc_4060FF
.text:004060F6                 mov     esi, [esp+6Ch+String1]
.text:004060FA                 cmp     byte ptr [esi], 0
.text:004060FD                 jnz     short loc_40611C
.text:004060FF
.text:004060FF loc_4060FF:                             ; CODE XREF: sub_405D80+374↑j
.text:004060FF                                         ; sub_405D80+3B0↓j ...
.text:004060FF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00406102                 call    FreeLibrary
.text:00406107                 sub     esp, 4
.text:0040610A                 test    ebp, ebp
.text:0040610C                 jz      loc_405E30
.text:00406112                 mov     ebx, 49h ; 'I'
.text:00406117                 jmp     loc_405E30
.text:0040611C ; ---------------------------------------------------------------------------
.text:0040611C
.text:0040611C loc_40611C:                             ; CODE XREF: sub_405D80+37D↑j
.text:0040611C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040611F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00406127                 call    strrchr
.text:0040612C                 test    eax, eax
.text:0040612E                 mov     esi, eax
.text:00406130                 jz      short loc_4060FF
.text:00406132                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00406136                 mov     ecx, ds:Str
.text:0040613C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040613F                 call    strstr
.text:00406144                 test    eax, eax
.text:00406146                 jz      short loc_40614F
.text:00406148
.text:00406148 loc_406148:                             ; CODE XREF: sub_405D80+362↑j
.text:00406148                                         ; sub_405D80+3E5↓j
.text:00406148                 mov     ebp, 1
.text:0040614D                 jmp     short loc_4060FF
.text:0040614F ; ---------------------------------------------------------------------------
.text:0040614F
.text:0040614F loc_40614F:                             ; CODE XREF: sub_405D80+3C6↑j
.text:0040614F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00406153                 mov     edx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:00406159                 mov     [esp+6Ch+Str], edx ; Str
.text:0040615C                 call    strstr
.text:00406161                 test    eax, eax
.text:00406163                 jz      short loc_4060FF
.text:00406165                 jmp     short loc_406148
.text:00406167 ; ---------------------------------------------------------------------------
.text:00406167
.text:00406167 loc_406167:                             ; CODE XREF: sub_405D80+36C↑j
.text:00406167                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040616E                 call    getenv
.text:00406173                 mov     ds:Str, eax
.text:00406178                 test    eax, eax
.text:0040617A                 jnz     loc_4060EE
.text:00406180                 mov     esi, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:00406186                 mov     ds:Str, esi
.text:0040618C                 jmp     loc_4060EE
.text:00406191 ; ---------------------------------------------------------------------------
.text:00406191
.text:00406191 loc_406191:                             ; CODE XREF: sub_405D80+81↑j
.text:00406191                                         ; sub_405D80+452↓j
.text:00406191                 shld    edi, esi, 8
.text:00406195                 movsx   eax, cl
.text:00406198                 shl     esi, 8
.text:0040619B                 cdq
.text:0040619C                 add     esi, eax
.text:0040619E                 adc     edi, edx
.text:004061A0                 mov     edx, edi
.text:004061A2                 xor     ebx, ebx
.text:004061A4                 and     edx, 0FF000000h
.text:004061AA                 mov     eax, edx
.text:004061AC                 or      eax, ebx
.text:004061AE                 jz      short loc_4061C9
.text:004061B0                 mov     ecx, edx
.text:004061B2                 xor     eax, eax
.text:004061B4                 shr     ecx, 10h
.text:004061B7                 mov     edx, esi
.text:004061B9                 xor     edx, ecx
.text:004061BB                 mov     ecx, edi
.text:004061BD                 xor     ecx, eax
.text:004061BF                 mov     esi, edx
.text:004061C1                 mov     edi, ecx
.text:004061C3                 and     edi, 0FFFFFFh
.text:004061C9
.text:004061C9 loc_4061C9:                             ; CODE XREF: sub_405D80+42E↑j
.text:004061C9                 inc     ebp
.text:004061CA                 movzx   ebx, byte ptr [ebp+0]
.text:004061CE                 test    bl, bl
.text:004061D0                 mov     cl, bl
.text:004061D2                 jnz     short loc_406191
.text:004061D4                 mov     eax, esi
.text:004061D6                 mov     edx, edi
.text:004061D8                 jmp     loc_405E0B
.text:004061D8 ; ---------------------------------------------------------------------------
.text:004061DD                 align 10h
.text:004061E0
.text:004061E0 loc_4061E0:                             ; CODE XREF: sub_405D80+3F↑j
.text:004061E0                                         ; sub_405D80+57↑j
.text:004061E0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:004061E4                 mov     ebp, [esp+6Ch+String1]
.text:004061E8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:004061EC                 mov     [esp+6Ch+Str], ebp ; String1
.text:004061EF                 call    _stricmp
.text:004061F4                 test    eax, eax
.text:004061F6                 jnz     short loc_406210
.text:004061F8                 mov     ebx, [esp+6Ch+arg_4]
.text:004061FC                 mov     dword ptr [ebx+8], 5
.text:00406203                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040620A                 jmp     loc_405DDD
.text:0040620A ; ---------------------------------------------------------------------------
.text:0040620F                 align 10h
.text:00406210
.text:00406210 loc_406210:                             ; CODE XREF: sub_405D80+476↑j
.text:00406210                 mov     ebp, [esp+6Ch+String1]
.text:00406214                 xor     esi, esi
.text:00406216                 xor     edi, edi
.text:00406218                 add     ebp, ebx
.text:0040621A                 jz      short loc_406224
.text:0040621C                 movzx   ecx, byte ptr [ebp+0]
.text:00406220                 test    cl, cl
.text:00406222                 jnz     short loc_406237
.text:00406224
.text:00406224 loc_406224:                             ; CODE XREF: sub_405D80+49A↑j
.text:00406224                 xor     eax, eax
.text:00406226                 xor     edx, edx
.text:00406228
.text:00406228 loc_406228:                             ; CODE XREF: sub_405D80+4FE↓j
.text:00406228                 mov     ebp, [esp+6Ch+arg_4]
.text:0040622C                 mov     [ebp+8], eax
.text:0040622F                 mov     [ebp+0Ch], edx
.text:00406232                 jmp     loc_405DDD
.text:00406237 ; ---------------------------------------------------------------------------
.text:00406237
.text:00406237 loc_406237:                             ; CODE XREF: sub_405D80+4A2↑j
.text:00406237                                         ; sub_405D80+4F8↓j
.text:00406237                 shld    edi, esi, 8
.text:0040623B                 movsx   eax, cl
.text:0040623E                 shl     esi, 8
.text:00406241                 cdq
.text:00406242                 add     esi, eax
.text:00406244                 adc     edi, edx
.text:00406246                 mov     edx, edi
.text:00406248                 xor     ebx, ebx
.text:0040624A                 and     edx, 0FF000000h
.text:00406250                 mov     eax, edx
.text:00406252                 or      eax, ebx
.text:00406254                 jz      short loc_40626F
.text:00406256                 mov     ecx, edx
.text:00406258                 xor     eax, eax
.text:0040625A                 shr     ecx, 10h
.text:0040625D                 mov     edx, esi
.text:0040625F                 xor     edx, ecx
.text:00406261                 mov     ecx, edi
.text:00406263                 xor     ecx, eax
.text:00406265                 mov     esi, edx
.text:00406267                 mov     edi, ecx
.text:00406269                 and     edi, 0FFFFFFh
.text:0040626F
.text:0040626F loc_40626F:                             ; CODE XREF: sub_405D80+4D4↑j
.text:0040626F                 inc     ebp
.text:00406270                 movzx   ebx, byte ptr [ebp+0]
.text:00406274                 test    bl, bl
.text:00406276                 mov     cl, bl
.text:00406278                 jnz     short loc_406237
.text:0040627A                 mov     eax, esi
.text:0040627C                 mov     edx, edi
.text:0040627E                 jmp     short loc_406228
.text:0040627E sub_405D80      endp
.text:0040627E
.text:00406280
.text:00406280 ; =============== S U B R O U T I N E =======================================
.text:00406280
.text:00406280
.text:00406280 ; int __cdecl sub_406280(LPCSTR)
.text:00406280 sub_406280      proc near               ; CODE XREF: sub_407CC0+CA↓p
.text:00406280
.text:00406280 lpRootPathName  = dword ptr -83Ch
.text:00406280 lpVolumeNameBuffer= dword ptr -838h
.text:00406280 nVolumeNameSize = dword ptr -834h
.text:00406280 lpVolumeSerialNumber= dword ptr -830h
.text:00406280 lpMaximumComponentLength= dword ptr -82Ch
.text:00406280 lpFileSystemFlags= dword ptr -828h
.text:00406280 lpFileSystemNameBuffer= dword ptr -824h
.text:00406280 nFileSystemNameSize= dword ptr -820h
.text:00406280 VolumeSerialNumber= dword ptr -818h
.text:00406280 MaximumComponentLength= dword ptr -814h
.text:00406280 FileSystemFlags = dword ptr -810h
.text:00406280 FileSystemNameBuffer= byte ptr -80Ch
.text:00406280 VolumeNameBuffer= byte ptr -40Ch
.text:00406280 var_4           = dword ptr -4
.text:00406280 arg_0           = dword ptr  4
.text:00406280
.text:00406280                 sub     esp, 83Ch
.text:00406286                 mov     [esp+83Ch+var_4], ebx
.text:0040628D                 mov     ebx, [esp+83Ch+arg_0]
.text:00406294                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00406297                 call    sub_407BA0
.text:0040629C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040629F                 call    sub_407580
.text:004062A4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:004062A7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:004062AB                 mov     ebx, eax
.text:004062AD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:004062B1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:004062B5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:004062B9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:004062BD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:004062C1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004062C5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:004062CC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004062D0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:004062D4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004062DC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:004062E4                 call    GetVolumeInformationA
.text:004062E9                 sub     esp, 20h
.text:004062EC                 test    eax, eax
.text:004062EE                 setz    cl
.text:004062F1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:004062F4                 movzx   edx, cl
.text:004062F7                 dec     edx
.text:004062F8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:004062FC                 call    free
.text:00406301                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00406305                 mov     ebx, [esp+83Ch+var_4]
.text:0040630C                 add     esp, 83Ch
.text:00406312                 retn
.text:00406312 sub_406280      endp
.text:00406312
.text:00406312 ; ---------------------------------------------------------------------------
.text:00406313                 align 10h
.text:00406320                 push    ebp
.text:00406321                 push    edi
.text:00406322                 xor     edi, edi
.text:00406324                 push    esi
.text:00406325                 xor     esi, esi
.text:00406327                 push    ebx
.text:00406328                 mov     ebp, [esp+14h]
.text:0040632C                 test    ebp, ebp
.text:0040632E                 jz      short loc_406338
.text:00406330                 movzx   ecx, byte ptr [ebp+0]
.text:00406334                 test    cl, cl
.text:00406336                 jnz     short loc_406341
.text:00406338
.text:00406338 loc_406338:                             ; CODE XREF: .text:0040632E↑j
.text:00406338                 xor     eax, eax
.text:0040633A                 xor     edx, edx
.text:0040633C
.text:0040633C loc_40633C:                             ; CODE XREF: .text:00406388↓j
.text:0040633C                 pop     ebx
.text:0040633D                 pop     esi
.text:0040633E                 pop     edi
.text:0040633F                 pop     ebp
.text:00406340                 retn
.text:00406341 ; ---------------------------------------------------------------------------
.text:00406341
.text:00406341 loc_406341:                             ; CODE XREF: .text:00406336↑j
.text:00406341                                         ; .text:00406382↓j
.text:00406341                 shld    edi, esi, 8
.text:00406345                 movsx   eax, cl
.text:00406348                 shl     esi, 8
.text:0040634B                 cdq
.text:0040634C                 add     esi, eax
.text:0040634E                 adc     edi, edx
.text:00406350                 mov     edx, edi
.text:00406352                 xor     ebx, ebx
.text:00406354                 and     edx, 0FF000000h
.text:0040635A                 mov     eax, edx
.text:0040635C                 or      eax, ebx
.text:0040635E                 jz      short loc_406379
.text:00406360                 mov     ecx, edx
.text:00406362                 xor     eax, eax
.text:00406364                 shr     ecx, 10h
.text:00406367                 mov     edx, esi
.text:00406369                 xor     edx, ecx
.text:0040636B                 mov     ecx, edi
.text:0040636D                 xor     ecx, eax
.text:0040636F                 mov     esi, edx
.text:00406371                 mov     edi, ecx
.text:00406373                 and     edi, 0FFFFFFh
.text:00406379
.text:00406379 loc_406379:                             ; CODE XREF: .text:0040635E↑j
.text:00406379                 inc     ebp
.text:0040637A                 movzx   ebx, byte ptr [ebp+0]
.text:0040637E                 test    bl, bl
.text:00406380                 mov     cl, bl
.text:00406382                 jnz     short loc_406341
.text:00406384                 mov     eax, esi
.text:00406386                 mov     edx, edi
.text:00406388                 jmp     short loc_40633C
.text:00406388 ; ---------------------------------------------------------------------------
.text:0040638A                 align 10h
.text:00406390                 sub     esp, 2Ch
.text:00406393                 lea     edx, [esp+24h]
.text:00406397                 lea     ecx, [esp+28h]
.text:0040639B                 mov     [esp+0Ch], edx
.text:0040639F                 lea     edx, [esp+1Ch]
.text:004063A3                 mov     [esp+4], edx
.text:004063A7                 mov     edx, [esp+30h]
.text:004063AB                 mov     [esp+10h], ecx
.text:004063AF                 lea     ecx, [esp+20h]
.text:004063B3                 mov     [esp+8], ecx
.text:004063B7                 mov     [esp], edx
.text:004063BA                 call    sub_4085F0
.text:004063BF                 test    eax, eax
.text:004063C1                 jnz     short loc_4063E3
.text:004063C3                 mov     dword ptr [esp+1Ch], 1
.text:004063CB                 mov     dword ptr [esp+20h], 200h
.text:004063D3                 mov     dword ptr [esp+24h], 0
.text:004063DB                 mov     dword ptr [esp+28h], 0
.text:004063E3
.text:004063E3 loc_4063E3:                             ; CODE XREF: .text:004063C1↑j
.text:004063E3                 mov     eax, [esp+20h]
.text:004063E7                 mov     ecx, [esp+1Ch]
.text:004063EB                 add     esp, 2Ch
.text:004063EE                 imul    eax, ecx
.text:004063F1                 retn
.text:004063F1 ; ---------------------------------------------------------------------------
.text:004063F2                 align 10h
.text:00406400                 sub     esp, 1Ch
.text:00406403                 mov     eax, [esp+20h]
.text:00406407                 mov     [esp+14h], esi
.text:0040640B                 mov     [esp+18h], edi
.text:0040640F                 test    eax, eax
.text:00406411                 jz      short loc_406450
.text:00406413                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040641B                 mov     [esp], eax
.text:0040641E                 call    strrchr
.text:00406423                 test    eax, eax
.text:00406425                 jz      short loc_406450
.text:00406427                 cld
.text:00406428                 mov     esi, eax
.text:0040642A                 mov     edi, offset aLnk ; ".lnk"
.text:0040642F                 mov     ecx, 5
.text:00406434                 repe cmpsb
.text:00406436                 setz    dl
.text:00406439                 movzx   eax, dl
.text:0040643C                 lea     esi, [esi+0]
.text:00406440
.text:00406440 loc_406440:                             ; CODE XREF: .text:00406452↓j
.text:00406440                 mov     esi, [esp+14h]
.text:00406444                 mov     edi, [esp+18h]
.text:00406448                 add     esp, 1Ch
.text:0040644B                 retn
.text:0040644B ; ---------------------------------------------------------------------------
.text:0040644C                 align 10h
.text:00406450
.text:00406450 loc_406450:                             ; CODE XREF: .text:00406411↑j
.text:00406450                                         ; .text:00406425↑j
.text:00406450                 xor     eax, eax
.text:00406452                 jmp     short loc_406440
.text:00406452 ; ---------------------------------------------------------------------------
.text:00406454                 align 10h
.text:00406460                 sub     esp, 1Ch
.text:00406463                 mov     [esp+10h], ebx
.text:00406467                 mov     ebx, [esp+20h]
.text:0040646B                 mov     [esp+14h], esi
.text:0040646F                 mov     [esp+18h], edi
.text:00406473                 xor     edi, edi
.text:00406475                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040647C                 call    GetModuleHandleA
.text:00406481                 sub     esp, 4
.text:00406484                 mov     esi, eax
.text:00406486                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040648E                 mov     [esp], eax
.text:00406491                 call    GetProcAddress
.text:00406496                 sub     esp, 8
.text:00406499                 test    eax, eax
.text:0040649B                 jz      short loc_4064B1
.text:0040649D                 mov     [esp], ebx
.text:004064A0                 lea     ecx, [esp+0Ch]
.text:004064A4                 mov     [esp+4], ecx
.text:004064A8                 call    eax
.text:004064AA                 sub     esp, 8
.text:004064AD                 test    eax, eax
.text:004064AF                 jnz     short loc_406510
.text:004064B1
.text:004064B1 loc_4064B1:                             ; CODE XREF: .text:0040649B↑j
.text:004064B1                 mov     eax, ds:Str
.text:004064B6                 test    eax, eax
.text:004064B8                 jz      short loc_406530
.text:004064BA
.text:004064BA loc_4064BA:                             ; CODE XREF: .text:00406543↓j
.text:004064BA                                         ; .text:00406555↓j
.text:004064BA                 test    ebx, ebx
.text:004064BC                 jz      short loc_4064C3
.text:004064BE                 cmp     byte ptr [ebx], 0
.text:004064C1                 jnz     short loc_4064E0
.text:004064C3
.text:004064C3 loc_4064C3:                             ; CODE XREF: .text:004064BC↑j
.text:004064C3                                         ; .text:004064F4↓j ...
.text:004064C3                 mov     [esp], esi
.text:004064C6                 call    FreeLibrary
.text:004064CB                 sub     esp, 4
.text:004064CE                 mov     eax, edi
.text:004064D0                 mov     ebx, [esp+10h]
.text:004064D4                 mov     esi, [esp+14h]
.text:004064D8                 mov     edi, [esp+18h]
.text:004064DC                 add     esp, 1Ch
.text:004064DF                 retn
.text:004064E0 ; ---------------------------------------------------------------------------
.text:004064E0
.text:004064E0 loc_4064E0:                             ; CODE XREF: .text:004064C1↑j
.text:004064E0                 mov     [esp], ebx
.text:004064E3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004064EB                 call    strrchr
.text:004064F0                 test    eax, eax
.text:004064F2                 mov     ebx, eax
.text:004064F4                 jz      short loc_4064C3
.text:004064F6                 mov     [esp+4], eax
.text:004064FA                 mov     ecx, ds:Str
.text:00406500                 mov     [esp], ecx
.text:00406503                 call    strstr
.text:00406508                 test    eax, eax
.text:0040650A                 jz      short loc_406517
.text:0040650C                 lea     esi, [esi+0]
.text:00406510
.text:00406510 loc_406510:                             ; CODE XREF: .text:004064AF↑j
.text:00406510                                         ; .text:0040652D↓j
.text:00406510                 mov     edi, 1
.text:00406515                 jmp     short loc_4064C3
.text:00406517 ; ---------------------------------------------------------------------------
.text:00406517
.text:00406517 loc_406517:                             ; CODE XREF: .text:0040650A↑j
.text:00406517                 mov     [esp+4], ebx
.text:0040651B                 mov     ebx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:00406521                 mov     [esp], ebx
.text:00406524                 call    strstr
.text:00406529                 test    eax, eax
.text:0040652B                 jz      short loc_4064C3
.text:0040652D                 jmp     short loc_406510
.text:0040652D ; ---------------------------------------------------------------------------
.text:0040652F                 align 10h
.text:00406530
.text:00406530 loc_406530:                             ; CODE XREF: .text:004064B8↑j
.text:00406530                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00406537                 call    getenv
.text:0040653C                 mov     ds:Str, eax
.text:00406541                 test    eax, eax
.text:00406543                 jnz     loc_4064BA
.text:00406549                 mov     edx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:0040654F                 mov     ds:Str, edx
.text:00406555                 jmp     loc_4064BA
.text:00406555 ; ---------------------------------------------------------------------------
.text:0040655A                 align 10h
.text:00406560                 sub     esp, 0Ch
.text:00406563                 mov     edx, [esp+10h]
.text:00406567                 mov     [esp], edx
.text:0040656A                 call    GetFileType
.text:0040656F                 sub     esp, 4
.text:00406572                 xor     edx, edx
.text:00406574                 cmp     eax, 2
.text:00406577                 jz      short loc_406590
.text:00406579                 cmp     eax, 3
.text:0040657C                 jz      short loc_406584
.text:0040657E
.text:0040657E loc_40657E:                             ; CODE XREF: .text:00406589↓j
.text:0040657E                                         ; .text:00406595↓j
.text:0040657E                 mov     eax, edx
.text:00406580                 add     esp, 0Ch
.text:00406583                 retn
.text:00406584 ; ---------------------------------------------------------------------------
.text:00406584
.text:00406584 loc_406584:                             ; CODE XREF: .text:0040657C↑j
.text:00406584                 mov     edx, 1000h
.text:00406589                 jmp     short loc_40657E
.text:00406589 ; ---------------------------------------------------------------------------
.text:0040658B                 align 10h
.text:00406590
.text:00406590 loc_406590:                             ; CODE XREF: .text:00406577↑j
.text:00406590                 mov     edx, 2000h
.text:00406595                 jmp     short loc_40657E
.text:00406595 ; ---------------------------------------------------------------------------
.text:00406597                 align 10h
.text:004065A0                 mov     ecx, [esp+4]
.text:004065A4                 xor     edx, edx
.text:004065A6                 test    cl, 10h
.text:004065A9                 setz    dl
.text:004065AC                 dec     edx
.text:004065AD                 and     edx, 0FFFFC000h
.text:004065B3                 add     edx, 8000h
.text:004065B9                 or      edx, 124h
.text:004065BF                 test    cl, 1
.text:004065C2                 movzx   eax, dx
.text:004065C5                 jnz     short locret_4065CC
.text:004065C7                 or      eax, 92h
.text:004065CC
.text:004065CC locret_4065CC:                          ; CODE XREF: .text:004065C5↑j
.text:004065CC                 retn
.text:004065CC ; ---------------------------------------------------------------------------
.text:004065CD                 align 10h
.text:004065D0                 sub     esp, 2Ch
.text:004065D3                 mov     [esp+20h], esi
.text:004065D7                 mov     esi, [esp+30h]
.text:004065DB                 mov     [esp+1Ch], ebx
.text:004065DF                 xor     ebx, ebx
.text:004065E1                 test    esi, esi
.text:004065E3                 mov     [esp+24h], edi
.text:004065E7                 mov     [esp+28h], ebp
.text:004065EB                 jz      short loc_406640
.text:004065ED                 cmp     byte ptr [esi], 0
.text:004065F0                 jnz     short loc_406644
.text:004065F2
.text:004065F2 loc_4065F2:                             ; CODE XREF: .text:004066AC↓j
.text:004065F2                                         ; .text:004066B7↓j
.text:004065F2                 test    esi, esi
.text:004065F4                 jz      short loc_406640
.text:004065F6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004065FE                 mov     [esp], esi
.text:00406601                 call    strrchr
.text:00406606                 test    eax, eax
.text:00406608                 jz      short loc_406640
.text:0040660A                 cld
.text:0040660B                 mov     ecx, 5
.text:00406610                 mov     esi, eax
.text:00406612                 mov     edi, offset aLnk ; ".lnk"
.text:00406617                 repe cmpsb
.text:00406619                 setz    cl
.text:0040661C                 movzx   eax, cl
.text:0040661F                 nop
.text:00406620
.text:00406620 loc_406620:                             ; CODE XREF: .text:00406642↓j
.text:00406620                 test    eax, eax
.text:00406622                 jz      short loc_40662A
.text:00406624                 or      ebx, 0A000h
.text:0040662A
.text:0040662A loc_40662A:                             ; CODE XREF: .text:00406622↑j
.text:0040662A                 mov     eax, ebx
.text:0040662C                 mov     esi, [esp+20h]
.text:00406630                 mov     ebx, [esp+1Ch]
.text:00406634                 mov     edi, [esp+24h]
.text:00406638                 mov     ebp, [esp+28h]
.text:0040663C                 add     esp, 2Ch
.text:0040663F                 retn
.text:00406640 ; ---------------------------------------------------------------------------
.text:00406640
.text:00406640 loc_406640:                             ; CODE XREF: .text:004065EB↑j
.text:00406640                                         ; .text:004065F4↑j ...
.text:00406640                 xor     eax, eax
.text:00406642                 jmp     short loc_406620
.text:00406644 ; ---------------------------------------------------------------------------
.text:00406644
.text:00406644 loc_406644:                             ; CODE XREF: .text:004065F0↑j
.text:00406644                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040664B                 call    GetModuleHandleA
.text:00406650                 sub     esp, 4
.text:00406653                 mov     ebp, eax
.text:00406655                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040665D                 mov     [esp], eax
.text:00406660                 call    GetProcAddress
.text:00406665                 sub     esp, 8
.text:00406668                 test    eax, eax
.text:0040666A                 mov     dword ptr [esp+14h], 0
.text:00406672                 jz      short loc_406688
.text:00406674                 mov     [esp], esi
.text:00406677                 lea     ecx, [esp+18h]
.text:0040667B                 mov     [esp+4], ecx
.text:0040667F                 call    eax
.text:00406681                 sub     esp, 8
.text:00406684                 test    eax, eax
.text:00406686                 jnz     short loc_4066E8
.text:00406688
.text:00406688 loc_406688:                             ; CODE XREF: .text:00406672↑j
.text:00406688                 mov     edx, ds:Str
.text:0040668E                 test    edx, edx
.text:00406690                 jz      short loc_406710
.text:00406692
.text:00406692 loc_406692:                             ; CODE XREF: .text:00406723↓j
.text:00406692                                         ; .text:00406735↓j
.text:00406692                 test    esi, esi
.text:00406694                 jz      short loc_40669B
.text:00406696                 cmp     byte ptr [esi], 0
.text:00406699                 jnz     short loc_4066BC
.text:0040669B
.text:0040669B loc_40669B:                             ; CODE XREF: .text:00406694↑j
.text:0040669B                                         ; .text:004066D0↓j ...
.text:0040669B                 mov     [esp], ebp
.text:0040669E                 call    FreeLibrary
.text:004066A3                 sub     esp, 4
.text:004066A6                 mov     eax, [esp+14h]
.text:004066AA                 test    eax, eax
.text:004066AC                 jz      loc_4065F2
.text:004066B2                 mov     ebx, 49h ; 'I'
.text:004066B7                 jmp     loc_4065F2
.text:004066BC ; ---------------------------------------------------------------------------
.text:004066BC
.text:004066BC loc_4066BC:                             ; CODE XREF: .text:00406699↑j
.text:004066BC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004066C4                 mov     [esp], esi
.text:004066C7                 call    strrchr
.text:004066CC                 test    eax, eax
.text:004066CE                 mov     edi, eax
.text:004066D0                 jz      short loc_40669B
.text:004066D2                 mov     [esp+4], eax
.text:004066D6                 mov     edx, ds:Str
.text:004066DC                 mov     [esp], edx
.text:004066DF                 call    strstr
.text:004066E4                 test    eax, eax
.text:004066E6                 jz      short loc_4066F2
.text:004066E8
.text:004066E8 loc_4066E8:                             ; CODE XREF: .text:00406686↑j
.text:004066E8                                         ; .text:00406708↓j
.text:004066E8                 mov     dword ptr [esp+14h], 1
.text:004066F0                 jmp     short loc_40669B
.text:004066F2 ; ---------------------------------------------------------------------------
.text:004066F2
.text:004066F2 loc_4066F2:                             ; CODE XREF: .text:004066E6↑j
.text:004066F2                 mov     [esp+4], edi
.text:004066F6                 mov     edi, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:004066FC                 mov     [esp], edi
.text:004066FF                 call    strstr
.text:00406704                 test    eax, eax
.text:00406706                 jz      short loc_40669B
.text:00406708                 jmp     short loc_4066E8
.text:00406708 ; ---------------------------------------------------------------------------
.text:0040670A                 align 10h
.text:00406710
.text:00406710 loc_406710:                             ; CODE XREF: .text:00406690↑j
.text:00406710                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00406717                 call    getenv
.text:0040671C                 mov     ds:Str, eax
.text:00406721                 test    eax, eax
.text:00406723                 jnz     loc_406692
.text:00406729                 mov     ecx, off_40E054 ; ".com;.exe;.bat;.cmd"
.text:0040672F                 mov     ds:Str, ecx
.text:00406735                 jmp     loc_406692
.text:00406735 ; ---------------------------------------------------------------------------
.text:0040673A                 align 10h
.text:00406740                 push    esi
.text:00406741                 push    ebx
.text:00406742                 sub     esp, 864h
.text:00406748                 mov     ebx, [esp+870h]
.text:0040674F                 lea     edx, [esp+830h]
.text:00406756                 mov     esi, [esp+874h]
.text:0040675D                 mov     [esp+4], edx
.text:00406761                 mov     [esp], ebx
.text:00406764                 call    sub_4055C0
.text:00406769                 xor     edx, edx
.text:0040676B                 test    eax, eax
.text:0040676D                 jz      loc_406855
.text:00406773                 mov     ecx, [esp+830h]
.text:0040677A                 test    cl, 10h
.text:0040677D                 mov     [esi], ecx
.text:0040677F                 mov     eax, [esp+834h]
.text:00406786                 mov     edx, [esp+838h]
.text:0040678D                 mov     [esi+4], eax
.text:00406790                 mov     [esi+8], edx
.text:00406793                 mov     eax, [esp+83Ch]
.text:0040679A                 mov     edx, [esp+840h]
.text:004067A1                 mov     [esi+0Ch], eax
.text:004067A4                 mov     [esi+10h], edx
.text:004067A7                 mov     edx, [esp+848h]
.text:004067AE                 mov     eax, [esp+844h]
.text:004067B5                 mov     [esi+18h], edx
.text:004067B8                 mov     [esi+14h], eax
.text:004067BB                 mov     edx, [esp+84Ch]
.text:004067C2                 mov     [esi+20h], edx
.text:004067C5                 mov     edx, [esp+850h]
.text:004067CC                 mov     [esi+24h], edx
.text:004067CF                 jnz     loc_406860
.text:004067D5                 mov     dword ptr [esi+28h], 1
.text:004067DC
.text:004067DC loc_4067DC:                             ; CODE XREF: .text:0040686B↓j
.text:004067DC                 mov     [esp], ebx
.text:004067DF                 call    sub_407BA0
.text:004067E4                 mov     [esp], eax
.text:004067E7                 call    sub_407580
.text:004067EC                 mov     [esp], eax
.text:004067EF                 lea     edx, [esp+30h]
.text:004067F3                 mov     ebx, eax
.text:004067F5                 mov     [esp+18h], edx
.text:004067F9                 lea     ecx, [esp+2Ch]
.text:004067FD                 lea     edx, [esp+28h]
.text:00406801                 mov     [esp+14h], ecx
.text:00406805                 lea     ecx, [esp+24h]
.text:00406809                 mov     [esp+10h], edx
.text:0040680D                 lea     edx, [esp+430h]
.text:00406814                 mov     [esp+0Ch], ecx
.text:00406818                 mov     [esp+4], edx
.text:0040681C                 mov     dword ptr [esp+1Ch], 400h
.text:00406824                 mov     dword ptr [esp+8], 400h
.text:0040682C                 call    GetVolumeInformationA
.text:00406831                 sub     esp, 20h
.text:00406834                 test    eax, eax
.text:00406836                 setz    cl
.text:00406839                 mov     [esp], ebx
.text:0040683C                 movzx   edx, cl
.text:0040683F                 dec     edx
.text:00406840                 and     [esp+24h], edx
.text:00406844                 call    free
.text:00406849                 mov     ecx, [esp+24h]
.text:0040684D                 mov     edx, 1
.text:00406852                 mov     [esi+1Ch], ecx
.text:00406855
.text:00406855 loc_406855:                             ; CODE XREF: .text:0040676D↑j
.text:00406855                 add     esp, 864h
.text:0040685B                 mov     eax, edx
.text:0040685D                 pop     ebx
.text:0040685E                 pop     esi
.text:0040685F                 retn
.text:00406860 ; ---------------------------------------------------------------------------
.text:00406860
.text:00406860 loc_406860:                             ; CODE XREF: .text:004067CF↑j
.text:00406860                 mov     [esp], ebx
.text:00406863                 call    sub_405730
.text:00406868                 mov     [esi+28h], eax
.text:0040686B                 jmp     loc_4067DC
.text:00406870 ; ---------------------------------------------------------------------------
.text:00406870                 push    ebp
.text:00406871                 xor     edx, edx
.text:00406873                 push    edi
.text:00406874                 push    esi
.text:00406875                 xor     esi, esi
.text:00406877                 push    ebx
.text:00406878                 sub     esp, 1Ch
.text:0040687B                 mov     ebx, [esp+5Ch]
.text:0040687F                 mov     ecx, [esp+30h]
.text:00406883                 mov     edi, [esp+60h]
.text:00406887                 or      esi, ebx
.text:00406889                 mov     eax, [esp+4Ch]
.text:0040688D                 or      edi, edx
.text:0040688F                 mov     ebx, [esp+64h]
.text:00406893                 xor     edx, edx
.text:00406895                 test    cl, 10h
.text:00406898                 setz    dl
.text:0040689B                 mov     [ebx+10h], eax
.text:0040689E                 mov     [ebx+8], edi
.text:004068A1                 mov     [ebx+0Ch], esi
.text:004068A4                 dec     edx
.text:004068A5                 and     edx, 0FFFFC000h
.text:004068AB                 mov     dword ptr [ebx+14h], 0
.text:004068B2                 add     edx, 8000h
.text:004068B8                 or      edx, 124h
.text:004068BE                 test    cl, 1
.text:004068C1                 movzx   eax, dx
.text:004068C4                 jnz     short loc_4068CB
.text:004068C6                 or      eax, 92h
.text:004068CB
.text:004068CB loc_4068CB:                             ; CODE XREF: .text:004068C4↑j
.text:004068CB                 mov     ebx, [esp+54h]
.text:004068CF                 xor     edx, edx
.text:004068D1                 xor     ebp, ebp
.text:004068D3                 mov     edi, [esp+50h]
.text:004068D7                 mov     ecx, [esp+64h]
.text:004068DB                 mov     esi, edi
.text:004068DD                 or      [ecx], eax
.text:004068DF                 mov     edi, ebx
.text:004068E1                 or      edi, ebp
.text:004068E3                 mov     ebp, edx
.text:004068E5                 mov     ebx, [esp+64h]
.text:004068E9                 or      ebp, esi
.text:004068EB                 mov     esi, [esp+58h]
.text:004068EF                 mov     edx, [esp+40h]
.text:004068F3                 mov     [ebx+30h], edi
.text:004068F6                 mov     [ebx+18h], esi
.text:004068F9                 mov     ecx, edx
.text:004068FB                 xor     esi, esi
.text:004068FD                 mov     [ebx+34h], ebp
.text:00406900                 xor     edx, edx
.text:00406902                 or      esi, ecx
.text:00406904                 mov     dword ptr [esp+8], 989680h
.text:0040690C                 mov     ebx, [esp+3Ch]
.text:00406910                 mov     ecx, esi
.text:00406912                 mov     dword ptr [esp+0Ch], 0
.text:0040691A                 or      ebx, edx
.text:0040691C                 mov     edx, ebx
.text:0040691E                 sub     edx, 0D53E8000h
.text:00406924                 sbb     ecx, 19DB1DEh
.text:0040692A                 mov     [esp+4], ecx
.text:0040692E                 mov     [esp], edx
.text:00406931                 call    sub_40CDA0
.text:00406936                 mov     edx, eax
.text:00406938                 mov     ecx, [esp+64h]
.text:0040693C                 shr     eax, 1Fh
.text:0040693F                 dec     eax
.text:00406940                 and     edx, eax
.text:00406942                 mov     [ecx+38h], edx
.text:00406945                 mov     [esp], ebx
.text:00406948                 mov     [esp+4], esi
.text:0040694C                 mov     dword ptr [esp+8], 989680h
.text:00406954                 mov     dword ptr [esp+0Ch], 0
.text:0040695C                 call    sub_40CEC0
.text:00406961                 lea     ecx, [eax+eax*4]
.text:00406964                 lea     esi, [ecx+ecx*4]
.text:00406967                 mov     eax, [esp+64h]
.text:0040696B                 shl     esi, 2
.text:0040696E                 mov     ebx, esi
.text:00406970                 shr     ebx, 1Fh
.text:00406973                 dec     ebx
.text:00406974                 and     ebx, esi
.text:00406976                 xor     esi, esi
.text:00406978                 mov     [eax+3Ch], ebx
.text:0040697B                 mov     edx, [esp+38h]
.text:0040697F                 mov     dword ptr [esp+8], 989680h
.text:00406987                 mov     ebx, [esp+34h]
.text:0040698B                 mov     dword ptr [esp+0Ch], 0
.text:00406993                 mov     ecx, edx
.text:00406995                 xor     edx, edx
.text:00406997                 or      ebx, edx
.text:00406999                 or      esi, ecx
.text:0040699B                 mov     edx, ebx
.text:0040699D                 sub     edx, 0D53E8000h
.text:004069A3                 mov     ecx, esi
.text:004069A5                 sbb     ecx, 19DB1DEh
.text:004069AB                 mov     [esp+4], ecx
.text:004069AF                 mov     [esp], edx
.text:004069B2                 call    sub_40CDA0
.text:004069B7                 mov     edx, eax
.text:004069B9                 mov     ecx, [esp+64h]
.text:004069BD                 shr     eax, 1Fh
.text:004069C0                 dec     eax
.text:004069C1                 and     edx, eax
.text:004069C3                 mov     [ecx+48h], edx
.text:004069C6                 mov     [esp], ebx
.text:004069C9                 mov     [esp+4], esi
.text:004069CD                 mov     dword ptr [esp+8], 989680h
.text:004069D5                 mov     dword ptr [esp+0Ch], 0
.text:004069DD                 call    sub_40CEC0
.text:004069E2                 lea     edx, [eax+eax*4]
.text:004069E5                 mov     ebx, [esp+64h]
.text:004069E9                 lea     ecx, [edx+edx*4]
.text:004069EC                 shl     ecx, 2
.text:004069EF                 mov     esi, ecx
.text:004069F1                 shr     esi, 1Fh
.text:004069F4                 dec     esi
.text:004069F5                 and     esi, ecx
.text:004069F7                 mov     [ebx+4Ch], esi
.text:004069FA                 mov     edx, [esp+48h]
.text:004069FE                 xor     esi, esi
.text:00406A00                 mov     dword ptr [esp+8], 989680h
.text:00406A08                 mov     ebx, [esp+44h]
.text:00406A0C                 mov     dword ptr [esp+0Ch], 0
.text:00406A14                 mov     ecx, edx
.text:00406A16                 xor     edx, edx
.text:00406A18                 or      ebx, edx
.text:00406A1A                 or      esi, ecx
.text:00406A1C                 mov     edx, ebx
.text:00406A1E                 sub     edx, 0D53E8000h
.text:00406A24                 mov     ecx, esi
.text:00406A26                 sbb     ecx, 19DB1DEh
.text:00406A2C                 mov     [esp+4], ecx
.text:00406A30                 mov     [esp], edx
.text:00406A33                 call    sub_40CDA0
.text:00406A38                 mov     edx, eax
.text:00406A3A                 mov     ecx, [esp+64h]
.text:00406A3E                 shr     eax, 1Fh
.text:00406A41                 dec     eax
.text:00406A42                 and     edx, eax
.text:00406A44                 mov     [ecx+40h], edx
.text:00406A47                 mov     [esp+4], esi
.text:00406A4B                 mov     dword ptr [esp+8], 989680h
.text:00406A53                 mov     dword ptr [esp+0Ch], 0
.text:00406A5B                 mov     [esp], ebx
.text:00406A5E                 call    sub_40CEC0
.text:00406A63                 lea     edx, [eax+eax*4]
.text:00406A66                 lea     esi, [edx+edx*4]
.text:00406A69                 mov     eax, [esp+64h]
.text:00406A6D                 shl     esi, 2
.text:00406A70                 mov     edx, ebp
.text:00406A72                 mov     ecx, esi
.text:00406A74                 mov     dword ptr [eax+50h], 200h
.text:00406A7B                 shr     ecx, 1Fh
.text:00406A7E                 dec     ecx
.text:00406A7F                 and     ecx, esi
.text:00406A81                 test    ebp, ebp
.text:00406A83                 mov     [eax+44h], ecx
.text:00406A86                 mov     eax, edi
.text:00406A88                 js      short loc_406AC2
.text:00406A8A
.text:00406A8A loc_406A8A:                             ; CODE XREF: .text:00406ACA↓j
.text:00406A8A                 xor     esi, esi
.text:00406A8C                 mov     ebp, edi
.text:00406A8E                 mov     ecx, eax
.text:00406A90                 shrd    ecx, edx, 9
.text:00406A94                 mov     ebx, edx
.text:00406A96                 and     ebp, 1FFh
.text:00406A9C                 mov     eax, esi
.text:00406A9E                 sar     ebx, 9
.text:00406AA1                 or      eax, ebp
.text:00406AA3                 jz      short loc_406AAB
.text:00406AA5                 add     ecx, 1
.text:00406AA8                 adc     ebx, 0
.text:00406AAB
.text:00406AAB loc_406AAB:                             ; CODE XREF: .text:00406AA3↑j
.text:00406AAB                 mov     edx, [esp+64h]
.text:00406AAF                 mov     eax, 1
.text:00406AB4                 mov     [edx+58h], ecx
.text:00406AB7                 mov     [edx+5Ch], ebx
.text:00406ABA                 add     esp, 1Ch
.text:00406ABD                 pop     ebx
.text:00406ABE                 pop     esi
.text:00406ABF                 pop     edi
.text:00406AC0                 pop     ebp
.text:00406AC1                 retn
.text:00406AC2 ; ---------------------------------------------------------------------------
.text:00406AC2
.text:00406AC2 loc_406AC2:                             ; CODE XREF: .text:00406A88↑j
.text:00406AC2                 add     eax, 1FFh
.text:00406AC7                 adc     edx, 0
.text:00406ACA                 jmp     short loc_406A8A
.text:00406ACA ; ---------------------------------------------------------------------------
.text:00406ACC                 align 10h
.text:00406AD0                 push    ebp
.text:00406AD1                 push    edi
.text:00406AD2                 xor     edi, edi
.text:00406AD4                 push    esi
.text:00406AD5                 xor     esi, esi
.text:00406AD7                 push    ebx
.text:00406AD8                 sub     esp, 0Ch
.text:00406ADB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00406AE2                 call    LoadLibraryA
.text:00406AE7                 sub     esp, 4
.text:00406AEA                 mov     ebp, eax
.text:00406AEC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00406AF4                 mov     [esp], eax
.text:00406AF7                 call    GetProcAddress
.text:00406AFC                 sub     esp, 8
.text:00406AFF                 test    eax, eax
.text:00406B01                 jz      short loc_406B32
.text:00406B03                 lea     ecx, [esp+8]
.text:00406B07                 mov     [esp+4], ecx
.text:00406B0B                 mov     ecx, [esp+20h]
.text:00406B0F                 mov     [esp], ecx
.text:00406B12                 call    eax
.text:00406B14                 sub     esp, 8
.text:00406B17                 mov     ebx, eax
.text:00406B19                 cmp     eax, 0FFFFFFFFh
.text:00406B1C                 jz      short loc_406B4D
.text:00406B1E
.text:00406B1E loc_406B1E:                             ; CODE XREF: .text:00406B56↓j
.text:00406B1E                 mov     esi, [esp+8]
.text:00406B22                 mov     ecx, ebx
.text:00406B24                 xor     edi, edi
.text:00406B26                 xor     ebx, ebx
.text:00406B28                 mov     edx, esi
.text:00406B2A                 mov     esi, ecx
.text:00406B2C                 or      esi, edi
.text:00406B2E                 mov     edi, ebx
.text:00406B30                 or      edi, edx
.text:00406B32
.text:00406B32 loc_406B32:                             ; CODE XREF: .text:00406B01↑j
.text:00406B32                                         ; .text:00406B54↓j
.text:00406B32                 test    ebp, ebp
.text:00406B34                 jz      short loc_406B41
.text:00406B36                 mov     [esp], ebp
.text:00406B39                 call    FreeLibrary
.text:00406B3E                 sub     esp, 4
.text:00406B41
.text:00406B41 loc_406B41:                             ; CODE XREF: .text:00406B34↑j
.text:00406B41                 add     esp, 0Ch
.text:00406B44                 mov     eax, esi
.text:00406B46                 mov     edx, edi
.text:00406B48                 pop     ebx
.text:00406B49                 pop     esi
.text:00406B4A                 pop     edi
.text:00406B4B                 pop     ebp
.text:00406B4C                 retn
.text:00406B4D ; ---------------------------------------------------------------------------
.text:00406B4D
.text:00406B4D loc_406B4D:                             ; CODE XREF: .text:00406B1C↑j
.text:00406B4D                 call    GetLastError
.text:00406B52                 test    eax, eax
.text:00406B54                 jnz     short loc_406B32
.text:00406B56                 jmp     short loc_406B1E
.text:00406B56 ; ---------------------------------------------------------------------------
.text:00406B58                 align 10h
.text:00406B60
.text:00406B60 ; =============== S U B R O U T I N E =======================================
.text:00406B60
.text:00406B60
.text:00406B60 ; int __cdecl sub_406B60(LPCSTR lpFileName, int)
.text:00406B60 sub_406B60      proc near               ; CODE XREF: sub_4070E0-3F↓p
.text:00406B60
.text:00406B60 lpRootPathName  = dword ptr -8FCh
.text:00406B60 lpVolumeNameBuffer= dword ptr -8F8h
.text:00406B60 nVolumeNameSize = dword ptr -8F4h
.text:00406B60 lpVolumeSerialNumber= dword ptr -8F0h
.text:00406B60 lpMaximumComponentLength= dword ptr -8ECh
.text:00406B60 lpFileSystemFlags= dword ptr -8E8h
.text:00406B60 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00406B60 nFileSystemNameSize= dword ptr -8E0h
.text:00406B60 VolumeSerialNumber= dword ptr -8D8h
.text:00406B60 MaximumComponentLength= dword ptr -8D4h
.text:00406B60 FileSystemFlags = dword ptr -8D0h
.text:00406B60 var_8CC         = dword ptr -8CCh
.text:00406B60 var_8C8         = dword ptr -8C8h
.text:00406B60 var_8C4         = dword ptr -8C4h
.text:00406B60 var_8C0         = dword ptr -8C0h
.text:00406B60 var_8BC         = dword ptr -8BCh
.text:00406B60 var_8B8         = dword ptr -8B8h
.text:00406B60 var_8B4         = dword ptr -8B4h
.text:00406B60 var_8B0         = dword ptr -8B0h
.text:00406B60 var_8AC         = dword ptr -8ACh
.text:00406B60 var_8A8         = dword ptr -8A8h
.text:00406B60 var_8A4         = dword ptr -8A4h
.text:00406B60 var_8A0         = dword ptr -8A0h
.text:00406B60 var_89C         = dword ptr -89Ch
.text:00406B60 FileSystemNameBuffer= byte ptr -88Ch
.text:00406B60 VolumeNameBuffer= byte ptr -48Ch
.text:00406B60 var_8C          = dword ptr -8Ch
.text:00406B60 var_88          = dword ptr -88h
.text:00406B60 var_84          = dword ptr -84h
.text:00406B60 var_80          = dword ptr -80h
.text:00406B60 var_7C          = dword ptr -7Ch
.text:00406B60 var_78          = dword ptr -78h
.text:00406B60 var_74          = dword ptr -74h
.text:00406B60 var_70          = dword ptr -70h
.text:00406B60 var_6C          = dword ptr -6Ch
.text:00406B60 var_5C          = dword ptr -5Ch
.text:00406B60 var_58          = dword ptr -58h
.text:00406B60 var_54          = dword ptr -54h
.text:00406B60 var_50          = dword ptr -50h
.text:00406B60 var_4C          = dword ptr -4Ch
.text:00406B60 var_48          = dword ptr -48h
.text:00406B60 var_44          = dword ptr -44h
.text:00406B60 var_3C          = dword ptr -3Ch
.text:00406B60 var_38          = dword ptr -38h
.text:00406B60 var_34          = dword ptr -34h
.text:00406B60 lpFileName      = dword ptr  4
.text:00406B60 arg_4           = dword ptr  8
.text:00406B60
.text:00406B60                 push    ebp
.text:00406B61                 xor     eax, eax
.text:00406B63                 mov     ecx, 0Dh
.text:00406B68                 push    edi
.text:00406B69                 push    esi
.text:00406B6A                 push    ebx
.text:00406B6B                 sub     esp, 8ECh
.text:00406B71                 lea     edi, [esp+8FCh+var_5C]
.text:00406B78                 cld
.text:00406B79                 lea     edx, [esp+8FCh+var_8C]
.text:00406B80                 rep stosd
.text:00406B82                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00406B86                 lea     esi, [esp+8FCh+var_5C]
.text:00406B8D                 mov     edx, [esp+8FCh+lpFileName]
.text:00406B94                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00406B97                 call    sub_4055C0
.text:00406B9C                 test    eax, eax
.text:00406B9E                 mov     edx, 0FFFFFFFFh
.text:00406BA3                 jz      loc_406F34
.text:00406BA9                 mov     edx, [esp+8FCh+var_88]
.text:00406BB0                 mov     ebp, [esp+8FCh+var_84]
.text:00406BB7                 mov     edi, [esp+8FCh+var_80]
.text:00406BBE                 mov     [esp+8FCh+var_58], edx
.text:00406BC5                 mov     ecx, [esp+8FCh+var_7C]
.text:00406BCC                 mov     ebx, [esp+8FCh+var_8C]
.text:00406BD3                 mov     [esp+8FCh+var_54], ebp
.text:00406BDA                 mov     edx, [esp+8FCh+var_78]
.text:00406BE1                 mov     ebp, [esp+8FCh+var_74]
.text:00406BE8                 mov     [esp+8FCh+var_50], edi
.text:00406BEF                 test    bl, 10h
.text:00406BF2                 mov     edi, [esp+8FCh+var_70]
.text:00406BF9                 mov     [esp+8FCh+var_4C], ecx
.text:00406C00                 mov     ecx, [esp+8FCh+var_6C]
.text:00406C07                 mov     [esp+8FCh+var_5C], ebx
.text:00406C0E                 mov     [esp+8FCh+var_48], edx
.text:00406C15                 mov     [esp+8FCh+var_44], ebp
.text:00406C1C                 mov     [esp+8FCh+var_3C], edi
.text:00406C23                 mov     [esp+8FCh+var_38], ecx
.text:00406C2A                 jnz     loc_406F50
.text:00406C30                 mov     ebx, 1
.text:00406C35                 mov     [esp+8FCh+var_34], ebx
.text:00406C3C
.text:00406C3C loc_406C3C:                             ; CODE XREF: sub_406B60+406↓j
.text:00406C3C                 mov     eax, [esp+8FCh+lpFileName]
.text:00406C43                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00406C47                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:00406C4B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:00406C4E                 call    sub_407BA0
.text:00406C53                 mov     [esp+8FCh+lpRootPathName], eax
.text:00406C56                 call    sub_407580
.text:00406C5B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:00406C5F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00406C63                 mov     ebp, eax
.text:00406C65                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00406C69                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:00406C6D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00406C74                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00406C78                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00406C7C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00406C80                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00406C88                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00406C90                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00406C93                 call    GetVolumeInformationA
.text:00406C98                 sub     esp, 20h
.text:00406C9B                 test    eax, eax
.text:00406C9D                 lea     edi, [esp+8FCh+var_8CC]
.text:00406CA1                 setz    bl
.text:00406CA4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00406CA7                 xor     ebp, ebp
.text:00406CA9                 movzx   edx, bl
.text:00406CAC                 dec     edx
.text:00406CAD                 xor     ebx, ebx
.text:00406CAF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:00406CB3                 call    free
.text:00406CB8                 cld
.text:00406CB9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00406CBD                 mov     [esi+1Ch], ecx
.text:00406CC0                 mov     ecx, 0Dh
.text:00406CC5                 rep movsd
.text:00406CC7                 mov     edi, [esp+8FCh+var_8A0]
.text:00406CCB                 mov     edx, [esp+8FCh+var_89C]
.text:00406CCF                 mov     ecx, [esp+8FCh+var_8CC]
.text:00406CD3                 or      ebp, edi
.text:00406CD5                 mov     esi, [esp+8FCh+var_8B0]
.text:00406CD9                 mov     edi, [esp+8FCh+arg_4]
.text:00406CE0                 or      edx, ebx
.text:00406CE2                 mov     [edi+8], edx
.text:00406CE5                 xor     edx, edx
.text:00406CE7                 test    cl, 10h
.text:00406CEA                 setz    dl
.text:00406CED                 mov     [edi+0Ch], ebp
.text:00406CF0                 mov     [edi+10h], esi
.text:00406CF3                 mov     dword ptr [edi+14h], 0
.text:00406CFA                 dec     edx
.text:00406CFB                 and     edx, 0FFFFC000h
.text:00406D01                 add     edx, 8000h
.text:00406D07                 or      edx, 124h
.text:00406D0D                 test    cl, 1
.text:00406D10                 movzx   eax, dx
.text:00406D13                 jnz     short loc_406D1A
.text:00406D15                 or      eax, 92h
.text:00406D1A
.text:00406D1A loc_406D1A:                             ; CODE XREF: sub_406B60+1B3↑j
.text:00406D1A                 mov     ebx, [esp+8FCh+var_8A8]
.text:00406D1E                 xor     edx, edx
.text:00406D20                 xor     ebp, ebp
.text:00406D22                 mov     edi, [esp+8FCh+var_8AC]
.text:00406D26                 mov     ecx, [esp+8FCh+arg_4]
.text:00406D2D                 mov     esi, edi
.text:00406D2F                 or      [ecx], eax
.text:00406D31                 mov     edi, ebx
.text:00406D33                 or      edi, ebp
.text:00406D35                 mov     ebp, edx
.text:00406D37                 mov     ebx, [esp+8FCh+var_8A4]
.text:00406D3B                 or      ebp, esi
.text:00406D3D                 mov     esi, [esp+8FCh+arg_4]
.text:00406D44                 mov     edx, [esp+8FCh+var_8BC]
.text:00406D48                 mov     [esi+18h], ebx
.text:00406D4B                 mov     ebx, [esp+8FCh+var_8C0]
.text:00406D4F                 mov     ecx, edx
.text:00406D51                 mov     [esi+30h], edi
.text:00406D54                 xor     edx, edx
.text:00406D56                 mov     [esi+34h], ebp
.text:00406D59                 or      ebx, edx
.text:00406D5B                 xor     esi, esi
.text:00406D5D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00406D65                 or      esi, ecx
.text:00406D67                 mov     edx, ebx
.text:00406D69                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00406D71                 sub     edx, 0D53E8000h
.text:00406D77                 mov     ecx, esi
.text:00406D79                 sbb     ecx, 19DB1DEh
.text:00406D7F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00406D83                 mov     [esp+8FCh+lpRootPathName], edx
.text:00406D86                 call    sub_40CDA0
.text:00406D8B                 mov     edx, eax
.text:00406D8D                 mov     ecx, [esp+8FCh+arg_4]
.text:00406D94                 shr     eax, 1Fh
.text:00406D97                 dec     eax
.text:00406D98                 and     edx, eax
.text:00406D9A                 mov     [ecx+38h], edx
.text:00406D9D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00406DA0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00406DA4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00406DAC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00406DB4                 call    sub_40CEC0
.text:00406DB9                 lea     ecx, [eax+eax*4]
.text:00406DBC                 lea     ebx, [ecx+ecx*4]
.text:00406DBF                 mov     eax, [esp+8FCh+arg_4]
.text:00406DC6                 shl     ebx, 2
.text:00406DC9                 mov     esi, ebx
.text:00406DCB                 shr     esi, 1Fh
.text:00406DCE                 dec     esi
.text:00406DCF                 and     esi, ebx
.text:00406DD1                 mov     [eax+3Ch], esi
.text:00406DD4                 mov     edx, [esp+8FCh+var_8C4]
.text:00406DD8                 xor     esi, esi
.text:00406DDA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00406DE2                 mov     ebx, [esp+8FCh+var_8C8]
.text:00406DE6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00406DEE                 mov     ecx, edx
.text:00406DF0                 xor     edx, edx
.text:00406DF2                 or      ebx, edx
.text:00406DF4                 or      esi, ecx
.text:00406DF6                 mov     edx, ebx
.text:00406DF8                 sub     edx, 0D53E8000h
.text:00406DFE                 mov     ecx, esi
.text:00406E00                 sbb     ecx, 19DB1DEh
.text:00406E06                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00406E0A                 mov     [esp+8FCh+lpRootPathName], edx
.text:00406E0D                 call    sub_40CDA0
.text:00406E12                 mov     edx, eax
.text:00406E14                 mov     ecx, [esp+8FCh+arg_4]
.text:00406E1B                 shr     eax, 1Fh
.text:00406E1E                 dec     eax
.text:00406E1F                 and     edx, eax
.text:00406E21                 mov     [ecx+48h], edx
.text:00406E24                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00406E27                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00406E2B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00406E33                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00406E3B                 call    sub_40CEC0
.text:00406E40                 lea     ecx, [eax+eax*4]
.text:00406E43                 lea     ebx, [ecx+ecx*4]
.text:00406E46                 mov     eax, [esp+8FCh+arg_4]
.text:00406E4D                 shl     ebx, 2
.text:00406E50                 mov     esi, ebx
.text:00406E52                 shr     esi, 1Fh
.text:00406E55                 dec     esi
.text:00406E56                 and     esi, ebx
.text:00406E58                 mov     [eax+4Ch], esi
.text:00406E5B                 mov     edx, [esp+8FCh+var_8B4]
.text:00406E5F                 xor     esi, esi
.text:00406E61                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00406E69                 mov     ebx, [esp+8FCh+var_8B8]
.text:00406E6D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00406E75                 mov     ecx, edx
.text:00406E77                 xor     edx, edx
.text:00406E79                 or      ebx, edx
.text:00406E7B                 or      esi, ecx
.text:00406E7D                 mov     edx, ebx
.text:00406E7F                 sub     edx, 0D53E8000h
.text:00406E85                 mov     ecx, esi
.text:00406E87                 sbb     ecx, 19DB1DEh
.text:00406E8D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00406E91                 mov     [esp+8FCh+lpRootPathName], edx
.text:00406E94                 call    sub_40CDA0
.text:00406E99                 mov     edx, eax
.text:00406E9B                 mov     ecx, [esp+8FCh+arg_4]
.text:00406EA2                 shr     eax, 1Fh
.text:00406EA5                 dec     eax
.text:00406EA6                 and     edx, eax
.text:00406EA8                 mov     [ecx+40h], edx
.text:00406EAB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00406EAE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00406EB2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00406EBA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00406EC2                 call    sub_40CEC0
.text:00406EC7                 lea     ebx, [eax+eax*4]
.text:00406ECA                 mov     esi, [esp+8FCh+arg_4]
.text:00406ED1                 lea     edx, [ebx+ebx*4]
.text:00406ED4                 shl     edx, 2
.text:00406ED7                 mov     eax, edi
.text:00406ED9                 mov     ecx, edx
.text:00406EDB                 mov     dword ptr [esi+50h], 200h
.text:00406EE2                 shr     ecx, 1Fh
.text:00406EE5                 dec     ecx
.text:00406EE6                 and     ecx, edx
.text:00406EE8                 test    ebp, ebp
.text:00406EEA                 mov     edx, ebp
.text:00406EEC                 mov     [esi+44h], ecx
.text:00406EEF                 js      short loc_406F41
.text:00406EF1
.text:00406EF1 loc_406EF1:                             ; CODE XREF: sub_406B60+3E9↓j
.text:00406EF1                 xor     esi, esi
.text:00406EF3                 mov     ebp, edi
.text:00406EF5                 mov     ecx, eax
.text:00406EF7                 shrd    ecx, edx, 9
.text:00406EFB                 mov     ebx, edx
.text:00406EFD                 and     ebp, 1FFh
.text:00406F03                 mov     eax, esi
.text:00406F05                 sar     ebx, 9
.text:00406F08                 or      eax, ebp
.text:00406F0A                 jz      short loc_406F12
.text:00406F0C                 add     ecx, 1
.text:00406F0F                 adc     ebx, 0
.text:00406F12
.text:00406F12 loc_406F12:                             ; CODE XREF: sub_406B60+3AA↑j
.text:00406F12                 mov     edx, [esp+8FCh+arg_4]
.text:00406F19                 mov     [edx+5Ch], ebx
.text:00406F1C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00406F23                 mov     [edx+58h], ecx
.text:00406F26                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00406F2A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:00406F2D                 call    sub_405D80
.text:00406F32                 xor     edx, edx
.text:00406F34
.text:00406F34 loc_406F34:                             ; CODE XREF: sub_406B60+43↑j
.text:00406F34                 add     esp, 8ECh
.text:00406F3A                 mov     eax, edx
.text:00406F3C                 pop     ebx
.text:00406F3D                 pop     esi
.text:00406F3E                 pop     edi
.text:00406F3F                 pop     ebp
.text:00406F40                 retn
.text:00406F41 ; ---------------------------------------------------------------------------
.text:00406F41
.text:00406F41 loc_406F41:                             ; CODE XREF: sub_406B60+38F↑j
.text:00406F41                 add     eax, 1FFh
.text:00406F46                 adc     edx, 0
.text:00406F49                 jmp     short loc_406EF1
.text:00406F49 ; ---------------------------------------------------------------------------
.text:00406F4B                 align 10h
.text:00406F50
.text:00406F50 loc_406F50:                             ; CODE XREF: sub_406B60+CA↑j
.text:00406F50                 mov     eax, [esp+8FCh+lpFileName]
.text:00406F57                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:00406F5A                 call    sub_405730
.text:00406F5F                 mov     [esp+8FCh+var_34], eax
.text:00406F66                 jmp     loc_406C3C
.text:00406F66 sub_406B60      endp
.text:00406F66
.text:00406F66 ; ---------------------------------------------------------------------------
.text:00406F6B                 align 10h
.text:00406F70 ; START OF FUNCTION CHUNK FOR sub_4070E0
.text:00406F70
.text:00406F70 loc_406F70:                             ; CODE XREF: sub_4070E0+26↓j
.text:00406F70                 cld
.text:00406F71                 sub     esp, 2Ch
.text:00406F74                 xor     eax, eax
.text:00406F76                 mov     [esp+2Ch+var_10], ebx
.text:00406F7A                 mov     ecx, 18h
.text:00406F7F                 mov     ebx, [esp+2Ch+arg_0]
.text:00406F83                 mov     [esp+2Ch+var_C], esi
.text:00406F87                 mov     esi, [esp+2Ch+arg_4]
.text:00406F8B                 test    ebx, ebx
.text:00406F8D                 mov     [esp+2Ch+var_8], edi
.text:00406F91                 mov     edi, esi
.text:00406F93                 mov     [esp+2Ch+var_4], ebp
.text:00406F97                 rep stosd
.text:00406F99                 jz      short loc_406FA0
.text:00406F9B                 cmp     byte ptr [ebx], 0
.text:00406F9E                 jnz     short loc_406FB8
.text:00406FA0
.text:00406FA0 loc_406FA0:                             ; CODE XREF: sub_4070E0-147↑j
.text:00406FA0                 xor     edx, edx
.text:00406FA2
.text:00406FA2 loc_406FA2:                             ; CODE XREF: sub_4070E0-111↓j
.text:00406FA2                                         ; sub_4070E0-68↓j
.text:00406FA2                 mov     ebx, [esp+2Ch+var_10]
.text:00406FA6                 mov     eax, edx
.text:00406FA8                 mov     esi, [esp+2Ch+var_C]
.text:00406FAC                 mov     edi, [esp+2Ch+var_8]
.text:00406FB0                 mov     ebp, [esp+2Ch+var_4]
.text:00406FB4                 add     esp, 2Ch
.text:00406FB7                 retn
.text:00406FB8 ; ---------------------------------------------------------------------------
.text:00406FB8
.text:00406FB8 loc_406FB8:                             ; CODE XREF: sub_4070E0-142↑j
.text:00406FB8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00406FC0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00406FC3                 call    sub_408FB0
.text:00406FC8                 test    eax, eax
.text:00406FCA                 mov     edx, 0FFFFFFFFh
.text:00406FCF                 jnz     short loc_406FA2
.text:00406FD1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00406FD4                 call    sub_408E60
.text:00406FD9                 mov     [esp+2Ch+lpFileName], eax
.text:00406FDC                 call    sub_407580
.text:00406FE1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00406FE4                 mov     ebp, eax
.text:00406FE6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:00406FEE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00406FF6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:00406FFE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00407006                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040700E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00407016                 call    CreateFileA
.text:0040701B                 sub     esp, 1Ch
.text:0040701E                 mov     ebx, eax
.text:00407020                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00407024                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00407027                 call    sub_4058B0
.text:0040702C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040702F                 mov     edi, eax
.text:00407031                 call    CloseHandle
.text:00407036                 sub     esp, 4
.text:00407039                 cmp     edi, 0FFFFFFFFh
.text:0040703C                 jz      short loc_40709A
.text:0040703E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00407042                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00407045                 call    sub_405D80
.text:0040704A
.text:0040704A loc_40704A:                             ; CODE XREF: sub_4070E0-38↓j
.text:0040704A                 mov     edx, [esi]
.text:0040704C                 and     edx, 0F000h
.text:00407052                 cmp     edx, 4000h
.text:00407058                 jz      short loc_40708D
.text:0040705A
.text:0040705A loc_40705A:                             ; CODE XREF: sub_4070E0-48↓j
.text:0040705A                 cmp     edi, 0FFFFFFFFh
.text:0040705D                 jz      short loc_40707D
.text:0040705F
.text:0040705F loc_40705F:                             ; CODE XREF: sub_4070E0-55↓j
.text:0040705F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00407066                 call    SetErrorMode
.text:0040706B                 sub     esp, 4
.text:0040706E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00407071                 call    free
.text:00407076                 mov     edx, edi
.text:00407078                 jmp     loc_406FA2
.text:0040707D ; ---------------------------------------------------------------------------
.text:0040707D
.text:0040707D loc_40707D:                             ; CODE XREF: sub_4070E0-83↑j
.text:0040707D                 call    sub_408E10
.text:00407082                 mov     esi, eax
.text:00407084                 call    _errno
.text:00407089                 mov     [eax], esi
.text:0040708B                 jmp     short loc_40705F
.text:0040708D ; ---------------------------------------------------------------------------
.text:0040708D
.text:0040708D loc_40708D:                             ; CODE XREF: sub_4070E0-88↑j
.text:0040708D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00407090                 call    sub_405730
.text:00407095                 mov     [esi+18h], eax
.text:00407098                 jmp     short loc_40705A
.text:0040709A ; ---------------------------------------------------------------------------
.text:0040709A
.text:0040709A loc_40709A:                             ; CODE XREF: sub_4070E0-A4↑j
.text:0040709A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040709E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:004070A1                 call    sub_406B60
.text:004070A6                 mov     edi, eax
.text:004070A8                 jmp     short loc_40704A
.text:004070A8 ; END OF FUNCTION CHUNK FOR sub_4070E0
.text:004070A8 ; ---------------------------------------------------------------------------
.text:004070AA                 align 10h
.text:004070B0
.text:004070B0 ; =============== S U B R O U T I N E =======================================
.text:004070B0
.text:004070B0
.text:004070B0 sub_4070B0      proc near               ; CODE XREF: sub_4019A0+EF↑p
.text:004070B0                                         ; sub_401EF0+23↑p
.text:004070B0
.text:004070B0 var_C           = dword ptr -0Ch
.text:004070B0 var_8           = dword ptr -8
.text:004070B0 var_4           = dword ptr -4
.text:004070B0 arg_0           = dword ptr  4
.text:004070B0 arg_4           = dword ptr  8
.text:004070B0
.text:004070B0                 sub     esp, 0Ch
.text:004070B3                 mov     edx, [esp+0Ch+arg_4]
.text:004070B7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:004070BE                 mov     [esp+0Ch+var_4], edx ; int
.text:004070C2                 mov     edx, [esp+0Ch+arg_0]
.text:004070C6                 mov     [esp+0Ch+var_8], edx ; int
.text:004070CA                 call    sub_4070E0
.text:004070CF                 add     esp, 0Ch
.text:004070D2                 retn
.text:004070D2 sub_4070B0      endp
.text:004070D2
.text:004070D2 ; ---------------------------------------------------------------------------
.text:004070D3                 align 10h
.text:004070E0
.text:004070E0 ; =============== S U B R O U T I N E =======================================
.text:004070E0
.text:004070E0
.text:004070E0 ; int __cdecl sub_4070E0(LPCSTR, int, int)
.text:004070E0 sub_4070E0      proc near               ; CODE XREF: sub_4070B0+1A↑p
.text:004070E0                                         ; sub_4079B0+90↓p ...
.text:004070E0
.text:004070E0 lpFileName      = dword ptr -2Ch
.text:004070E0 dwDesiredAccess = dword ptr -28h
.text:004070E0 dwShareMode     = dword ptr -24h
.text:004070E0 lpSecurityAttributes= dword ptr -20h
.text:004070E0 dwCreationDisposition= dword ptr -1Ch
.text:004070E0 dwFlagsAndAttributes= dword ptr -18h
.text:004070E0 hTemplateFile   = dword ptr -14h
.text:004070E0 var_10          = dword ptr -10h
.text:004070E0 var_C           = dword ptr -0Ch
.text:004070E0 var_8           = dword ptr -8
.text:004070E0 var_4           = dword ptr -4
.text:004070E0 arg_0           = dword ptr  4
.text:004070E0 arg_4           = dword ptr  8
.text:004070E0 arg_8           = dword ptr  0Ch
.text:004070E0
.text:004070E0 ; FUNCTION CHUNK AT .text:00406F70 SIZE 0000013A BYTES
.text:004070E0
.text:004070E0                 sub     esp, 0Ch
.text:004070E3                 mov     ecx, [esp+0Ch+arg_0]
.text:004070E7                 mov     edx, [esp+0Ch+arg_4]
.text:004070EB                 mov     eax, [esp+0Ch+arg_8]
.text:004070EF                 test    ecx, ecx
.text:004070F1                 jnz     short loc_407110
.text:004070F3                 test    edx, edx
.text:004070F5                 jz      short loc_407110
.text:004070F7                 test    eax, eax
.text:004070F9                 jz      short loc_407110
.text:004070FB                 mov     [esp+0Ch+arg_4], eax
.text:004070FF                 mov     [esp+0Ch+arg_0], edx
.text:00407103                 add     esp, 0Ch
.text:00407106                 jmp     loc_406F70
.text:00407106 ; ---------------------------------------------------------------------------
.text:0040710B                 align 10h
.text:00407110
.text:00407110 loc_407110:                             ; CODE XREF: sub_4070E0+11↑j
.text:00407110                                         ; sub_4070E0+15↑j ...
.text:00407110                 call    _errno
.text:00407115                 mov     dword ptr [eax], 16h
.text:0040711B                 mov     eax, 0FFFFFFFFh
.text:00407120                 add     esp, 0Ch
.text:00407123                 retn
.text:00407123 sub_4070E0      endp
.text:00407123
.text:00407123 ; ---------------------------------------------------------------------------
.text:00407124                 align 10h
.text:00407130
.text:00407130 ; =============== S U B R O U T I N E =======================================
.text:00407130
.text:00407130 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00407130
.text:00407130 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00407130 _win32_longpath proc near               ; CODE XREF: .text:004078F4↓p
.text:00407130
.text:00407130 C               = dword ptr -278h
.text:00407130 lpFindFileData  = dword ptr -274h
.text:00407130 Destination     = byte ptr -268h
.text:00407130 var_267         = byte ptr -267h
.text:00407130 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00407130 lpFileName      = dword ptr  8
.text:00407130
.text:00407130                 push    ebp
.text:00407131                 xor     eax, eax
.text:00407133                 push    edi
.text:00407134                 push    esi
.text:00407135                 push    ebx
.text:00407136                 sub     esp, 26Ch
.text:0040713C                 mov     esi, [esp+278h+lpFileName]
.text:00407143                 lea     ebp, [esp+278h+Destination]
.text:00407147                 test    esi, esi
.text:00407149                 jz      loc_4072A7
.text:0040714F                 movsx   edx, byte ptr [esi]
.text:00407152                 mov     [esp+278h+C], edx ; C
.text:00407155                 call    isalpha
.text:0040715A                 test    eax, eax
.text:0040715C                 jz      short loc_40716F
.text:0040715E                 mov     eax, [esp+278h+lpFileName]
.text:00407165                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00407169                 jz      loc_4074AB
.text:0040716F
.text:0040716F loc_40716F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040716F                 mov     edx, [esp+278h+lpFileName]
.text:00407176                 movzx   eax, byte ptr [edx]
.text:00407179                 cmp     al, 2Fh ; '/'
.text:0040717B                 jz      loc_40738B
.text:00407181                 cmp     al, 5Ch ; '\'
.text:00407183                 jz      loc_40738B
.text:00407189
.text:00407189 loc_407189:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00407189                                         ; _win32_longpath+2B1↓j ...
.text:00407189                 mov     [ebp+268h+Destination], 0
.text:0040718D                 movzx   ebx, byte ptr [esi]
.text:00407190                 test    bl, bl
.text:00407192                 jz      loc_407289
.text:00407198                 nop
.text:00407199                 lea     esi, [esi+0]
.text:004071A0
.text:004071A0 loc_4071A0:                             ; CODE XREF: _win32_longpath+153↓j
.text:004071A0                 cmp     bl, 2Fh ; '/'
.text:004071A3                 jz      loc_407340
.text:004071A9                 cmp     bl, 5Ch ; '\'
.text:004071AC                 jz      loc_407340
.text:004071B2
.text:004071B2 loc_4071B2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:004071B2                                         ; _win32_longpath+22C↓j ...
.text:004071B2                 cmp     bl, 2Eh ; '.'
.text:004071B5                 jz      loc_4072E0
.text:004071BB
.text:004071BB loc_4071BB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:004071BB                                         ; _win32_longpath+203↓j
.text:004071BB                 test    bl, bl
.text:004071BD                 jz      loc_407289
.text:004071C3                 cmp     bl, 2Fh ; '/'
.text:004071C6                 jz      short loc_4071E2
.text:004071C8                 cmp     bl, 5Ch ; '\'
.text:004071CB                 jz      short loc_4071E2
.text:004071CD                 lea     esi, [esi+0]
.text:004071D0
.text:004071D0 loc_4071D0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:004071D0                 inc     esi
.text:004071D1                 movzx   ebx, byte ptr [esi]
.text:004071D4                 test    bl, bl
.text:004071D6                 jz      short loc_4071E2
.text:004071D8                 cmp     bl, 2Fh ; '/'
.text:004071DB                 jz      short loc_4071E2
.text:004071DD                 cmp     bl, 5Ch ; '\'
.text:004071E0                 jnz     short loc_4071D0
.text:004071E2
.text:004071E2 loc_4071E2:                             ; CODE XREF: _win32_longpath+96↑j
.text:004071E2                                         ; _win32_longpath+9B↑j ...
.text:004071E2                 mov     byte ptr [esi], 0
.text:004071E5                 lea     edx, [esp+278h+FindFileData]
.text:004071EC                 mov     eax, [esp+278h+lpFileName]
.text:004071F3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:004071F7                 mov     [esp+278h+C], eax ; lpFileName
.text:004071FA                 call    FindFirstFileA
.text:004071FF                 mov     [esi], bl
.text:00407201                 sub     esp, 8
.text:00407204                 mov     edi, eax
.text:00407206                 cmp     eax, 0FFFFFFFFh
.text:00407209                 jz      loc_4072CC
.text:0040720F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00407216                 mov     ecx, ebx
.text:00407218                 nop
.text:00407219                 lea     esi, [esi+0]
.text:00407220
.text:00407220 loc_407220:                             ; CODE XREF: _win32_longpath+105↓j
.text:00407220                 mov     eax, [ebx]
.text:00407222                 add     ebx, 4
.text:00407225                 lea     edx, [eax-1010101h]
.text:0040722B                 not     eax
.text:0040722D                 and     edx, eax
.text:0040722F                 and     edx, 80808080h
.text:00407235                 jz      short loc_407220
.text:00407237                 test    edx, 8080h
.text:0040723D                 jnz     short loc_407245
.text:0040723F                 shr     edx, 10h
.text:00407242                 add     ebx, 2
.text:00407245
.text:00407245 loc_407245:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00407245                 add     dl, dl
.text:00407247                 sbb     ebx, 3
.text:0040724A                 sub     ebx, ecx
.text:0040724C                 lea     ecx, [esp+278h+Destination]
.text:00407250                 sub     ecx, ebp
.text:00407252                 add     ecx, 105h
.text:00407258                 cmp     ecx, ebx
.text:0040725A                 jle     short loc_4072B2
.text:0040725C                 mov     [esp+278h+C], ebp ; Destination
.text:0040725F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00407266                 add     ebp, ebx
.text:00407268                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040726C                 call    strcpy
.text:00407271                 mov     [esp+278h+C], edi ; hFindFile
.text:00407274                 call    FindClose
.text:00407279                 sub     esp, 4
.text:0040727C
.text:0040727C loc_40727C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040727C                 movzx   ecx, byte ptr [esi]
.text:0040727F                 test    cl, cl
.text:00407281                 mov     bl, cl
.text:00407283                 jnz     loc_4071A0
.text:00407289
.text:00407289 loc_407289:                             ; CODE XREF: _win32_longpath+62↑j
.text:00407289                                         ; _win32_longpath+8D↑j
.text:00407289                 mov     esi, [esp+278h+lpFileName]
.text:00407290                 lea     ebp, [esp+278h+Destination]
.text:00407294                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00407298                 mov     [esp+278h+C], esi ; Destination
.text:0040729B                 call    strcpy
.text:004072A0                 mov     eax, [esp+278h+lpFileName]
.text:004072A7
.text:004072A7 loc_4072A7:                             ; CODE XREF: _win32_longpath+19↑j
.text:004072A7                                         ; _win32_longpath+19A↓j
.text:004072A7                 add     esp, 26Ch
.text:004072AD                 pop     ebx
.text:004072AE                 pop     esi
.text:004072AF                 pop     edi
.text:004072B0                 pop     ebp
.text:004072B1                 retn
.text:004072B2 ; ---------------------------------------------------------------------------
.text:004072B2
.text:004072B2 loc_4072B2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:004072B2                 mov     [esp+278h+C], edi ; hFindFile
.text:004072B5                 call    FindClose
.text:004072BA                 sub     esp, 4
.text:004072BD                 call    _errno
.text:004072C2                 mov     dword ptr [eax], 22h ; '"'
.text:004072C8
.text:004072C8 loc_4072C8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:004072C8                 xor     eax, eax
.text:004072CA                 jmp     short loc_4072A7
.text:004072CC ; ---------------------------------------------------------------------------
.text:004072CC
.text:004072CC loc_4072CC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:004072CC                 call    _errno
.text:004072D1                 mov     dword ptr [eax], 16h
.text:004072D7                 jmp     short loc_4072C8
.text:004072D7 ; ---------------------------------------------------------------------------
.text:004072D9                 align 10h
.text:004072E0
.text:004072E0 loc_4072E0:                             ; CODE XREF: _win32_longpath+85↑j
.text:004072E0                 movzx   eax, byte ptr [esi+1]
.text:004072E4                 test    al, al
.text:004072E6                 jnz     short loc_407315
.text:004072E8
.text:004072E8 loc_4072E8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:004072E8                                         ; _win32_longpath+1EB↓j ...
.text:004072E8                 test    bl, bl
.text:004072EA                 jz      short loc_40730C
.text:004072EC                 cmp     bl, 2Fh ; '/'
.text:004072EF                 jz      short loc_40730C
.text:004072F1                 cmp     bl, 5Ch ; '\'
.text:004072F4                 jz      short loc_40730C
.text:004072F6
.text:004072F6 loc_4072F6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:004072F6                 mov     [ebp+268h+Destination], bl
.text:004072F9                 inc     esi
.text:004072FA                 inc     ebp
.text:004072FB                 movzx   ebx, byte ptr [esi]
.text:004072FE                 test    bl, bl
.text:00407300                 jz      short loc_40730C
.text:00407302                 cmp     bl, 2Fh ; '/'
.text:00407305                 jz      short loc_40730C
.text:00407307                 cmp     bl, 5Ch ; '\'
.text:0040730A                 jnz     short loc_4072F6
.text:0040730C
.text:0040730C loc_40730C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040730C                                         ; _win32_longpath+1BF↑j ...
.text:0040730C                 mov     [ebp+268h+Destination], 0
.text:00407310                 jmp     loc_40727C
.text:00407315 ; ---------------------------------------------------------------------------
.text:00407315
.text:00407315 loc_407315:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00407315                 cmp     al, 2Fh ; '/'
.text:00407317                 jz      short loc_4072E8
.text:00407319                 cmp     al, 5Ch ; '\'
.text:0040731B                 jz      short loc_4072E8
.text:0040731D                 cmp     al, 2Eh ; '.'
.text:0040731F                 jnz     loc_4071BB
.text:00407325                 movzx   eax, byte ptr [esi+2]
.text:00407329                 test    al, al
.text:0040732B                 jz      short loc_4072E8
.text:0040732D                 cmp     al, 2Fh ; '/'
.text:0040732F                 jz      short loc_4072E8
.text:00407331                 cmp     al, 5Ch ; '\'
.text:00407333                 jnz     loc_4071BB
.text:00407339                 jmp     short loc_4072E8
.text:00407339 ; ---------------------------------------------------------------------------
.text:0040733B                 align 10h
.text:00407340
.text:00407340 loc_407340:                             ; CODE XREF: _win32_longpath+73↑j
.text:00407340                                         ; _win32_longpath+7C↑j
.text:00407340                 mov     [ebp+268h+Destination], bl
.text:00407343                 inc     esi
.text:00407344                 inc     ebp
.text:00407345                 mov     [ebp+268h+Destination], 0
.text:00407349                 movzx   ebx, byte ptr [esi]
.text:0040734C                 test    bl, bl
.text:0040734E                 jz      loc_4071B2
.text:00407354                 cmp     bl, 2Fh ; '/'
.text:00407357                 jz      short loc_407370
.text:00407359                 cmp     bl, 5Ch ; '\'
.text:0040735C                 jnz     loc_4071B2
.text:00407362                 lea     esi, [esi+0]
.text:00407369                 lea     edi, [edi+0]
.text:00407370
.text:00407370 loc_407370:                             ; CODE XREF: _win32_longpath+227↑j
.text:00407370                                         ; _win32_longpath+24F↓j ...
.text:00407370                 inc     esi
.text:00407371                 movzx   ebx, byte ptr [esi]
.text:00407374                 test    bl, bl
.text:00407376                 jz      loc_4071B2
.text:0040737C                 cmp     bl, 2Fh ; '/'
.text:0040737F                 jz      short loc_407370
.text:00407381                 cmp     bl, 5Ch ; '\'
.text:00407384                 jz      short loc_407370
.text:00407386                 jmp     loc_4071B2
.text:0040738B ; ---------------------------------------------------------------------------
.text:0040738B
.text:0040738B loc_40738B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040738B                                         ; _win32_longpath+53↑j
.text:0040738B                 mov     edi, [esp+278h+lpFileName]
.text:00407392                 movzx   edx, byte ptr [edi+1]
.text:00407396                 cmp     dl, 2Fh ; '/'
.text:00407399                 jz      short loc_4073A4
.text:0040739B                 cmp     dl, 5Ch ; '\'
.text:0040739E                 jnz     loc_407189
.text:004073A4
.text:004073A4 loc_4073A4:                             ; CODE XREF: _win32_longpath+269↑j
.text:004073A4                 mov     esi, [esp+278h+lpFileName]
.text:004073AB                 mov     [ebp+268h+Destination], al
.text:004073AE                 mov     ecx, [esp+278h+lpFileName]
.text:004073B5                 inc     ebp
.text:004073B6                 add     esi, 2
.text:004073B9                 movzx   ebx, byte ptr [ecx+1]
.text:004073BD                 mov     [ebp+268h+Destination], bl
.text:004073C0                 inc     ebp
.text:004073C1                 movzx   eax, byte ptr [ecx+2]
.text:004073C5                 test    al, al
.text:004073C7                 jz      loc_4074A3
.text:004073CD                 cmp     al, 2Fh ; '/'
.text:004073CF                 jz      loc_407488
.text:004073D5                 cmp     al, 5Ch ; '\'
.text:004073D7                 mov     bl, al
.text:004073D9                 jz      loc_407488
.text:004073DF
.text:004073DF loc_4073DF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:004073DF                                         ; _win32_longpath+376↓j
.text:004073DF                 test    bl, bl
.text:004073E1                 jz      loc_407189
.text:004073E7                 cmp     bl, 2Fh ; '/'
.text:004073EA                 jz      short loc_40740B
.text:004073EC                 cmp     bl, 5Ch ; '\'
.text:004073EF                 jz      short loc_40740B
.text:004073F1
.text:004073F1 loc_4073F1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:004073F1                 mov     [ebp+268h+Destination], bl
.text:004073F4                 inc     esi
.text:004073F5                 inc     ebp
.text:004073F6                 movzx   ebx, byte ptr [esi]
.text:004073F9                 test    bl, bl
.text:004073FB                 jz      loc_407189
.text:00407401                 cmp     bl, 2Fh ; '/'
.text:00407404                 jz      short loc_40740B
.text:00407406                 cmp     bl, 5Ch ; '\'
.text:00407409                 jnz     short loc_4073F1
.text:0040740B
.text:0040740B loc_40740B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040740B                                         ; _win32_longpath+2BF↑j ...
.text:0040740B                 test    bl, bl
.text:0040740D                 jz      loc_407189
.text:00407413                 mov     [ebp+268h+Destination], bl
.text:00407416                 inc     esi
.text:00407417                 inc     ebp
.text:00407418                 movzx   ebx, byte ptr [esi]
.text:0040741B                 test    bl, bl
.text:0040741D                 jz      loc_407189
.text:00407423                 cmp     bl, 2Fh ; '/'
.text:00407426                 jz      short loc_407470
.text:00407428                 cmp     bl, 5Ch ; '\'
.text:0040742B                 jz      short loc_407470
.text:0040742D
.text:0040742D loc_40742D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040742D                 test    bl, bl
.text:0040742F                 jz      loc_407189
.text:00407435                 cmp     bl, 2Fh ; '/'
.text:00407438                 jz      loc_407189
.text:0040743E                 cmp     bl, 5Ch ; '\'
.text:00407441                 jz      loc_407189
.text:00407447
.text:00407447 loc_407447:                             ; CODE XREF: _win32_longpath+333↓j
.text:00407447                 mov     [ebp+268h+Destination], bl
.text:0040744A                 inc     esi
.text:0040744B                 inc     ebp
.text:0040744C                 movzx   ebx, byte ptr [esi]
.text:0040744F                 test    bl, bl
.text:00407451                 jz      loc_407189
.text:00407457                 cmp     bl, 2Fh ; '/'
.text:0040745A                 jz      loc_407189
.text:00407460                 cmp     bl, 5Ch ; '\'
.text:00407463                 jnz     short loc_407447
.text:00407465                 jmp     loc_407189
.text:00407465 ; ---------------------------------------------------------------------------
.text:0040746A                 align 10h
.text:00407470
.text:00407470 loc_407470:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00407470                                         ; _win32_longpath+2FB↑j ...
.text:00407470                 inc     esi
.text:00407471                 movzx   ebx, byte ptr [esi]
.text:00407474                 test    bl, bl
.text:00407476                 jz      loc_407189
.text:0040747C                 cmp     bl, 2Fh ; '/'
.text:0040747F                 jz      short loc_407470
.text:00407481                 cmp     bl, 5Ch ; '\'
.text:00407484                 jz      short loc_407470
.text:00407486                 jmp     short loc_40742D
.text:00407488 ; ---------------------------------------------------------------------------
.text:00407488
.text:00407488 loc_407488:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00407488                                         ; _win32_longpath+2A9↑j ...
.text:00407488                 inc     esi
.text:00407489                 movzx   ebx, byte ptr [esi]
.text:0040748C                 test    bl, bl
.text:0040748E                 jz      loc_407189
.text:00407494                 cmp     bl, 2Fh ; '/'
.text:00407497                 jz      short loc_407488
.text:00407499                 cmp     bl, 5Ch ; '\'
.text:0040749C                 jz      short loc_407488
.text:0040749E                 jmp     loc_4073DF
.text:004074A3 ; ---------------------------------------------------------------------------
.text:004074A3
.text:004074A3 loc_4074A3:                             ; CODE XREF: _win32_longpath+297↑j
.text:004074A3                 movzx   ebx, byte ptr [esi]
.text:004074A6                 jmp     loc_4073DF
.text:004074AB ; ---------------------------------------------------------------------------
.text:004074AB
.text:004074AB loc_4074AB:                             ; CODE XREF: _win32_longpath+39↑j
.text:004074AB                 movzx   ecx, byte ptr [eax]
.text:004074AE                 mov     esi, eax
.text:004074B0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:004074B5                 add     esi, 2
.text:004074B8                 lea     ebp, [esp+12h]
.text:004074BC                 mov     [esp+278h+Destination], cl
.text:004074C0                 jmp     loc_407189
.text:004074C0 _win32_longpath endp
.text:004074C0
.text:004074C0 ; ---------------------------------------------------------------------------
.text:004074C5                 align 10h
.text:004074D0                 sub     esp, 0Ch
.text:004074D3                 mov     edx, [esp+10h]
.text:004074D7                 mov     dword ptr [esp+4], 0
.text:004074DF                 mov     [esp], edx
.text:004074E2                 call    sub_408FB0
.text:004074E7                 inc     eax
.text:004074E8                 setnz   dl
.text:004074EB                 add     esp, 0Ch
.text:004074EE                 movzx   eax, dl
.text:004074F1                 retn
.text:004074F1 ; ---------------------------------------------------------------------------
.text:004074F2                 align 10h
.text:00407500
.text:00407500 ; =============== S U B R O U T I N E =======================================
.text:00407500
.text:00407500
.text:00407500 sub_407500      proc near               ; CODE XREF: sub_408E80+AA↓p
.text:00407500                                         ; sub_40AA30+B4↓p
.text:00407500
.text:00407500 arg_0           = dword ptr  4
.text:00407500
.text:00407500                 mov     ecx, [esp+arg_0]
.text:00407504                 mov     edx, ecx
.text:00407506                 movzx   eax, byte ptr [ecx]
.text:00407509                 test    al, al
.text:0040750B                 jz      short loc_40751C
.text:0040750D                 lea     esi, [esi+0]
.text:00407510
.text:00407510 loc_407510:                             ; CODE XREF: sub_407500+1A↓j
.text:00407510                 cmp     al, 5Ch ; '\'
.text:00407512                 jz      short loc_407520
.text:00407514
.text:00407514 loc_407514:                             ; CODE XREF: sub_407500+23↓j
.text:00407514                 inc     edx
.text:00407515                 movzx   eax, byte ptr [edx]
.text:00407518                 test    al, al
.text:0040751A                 jnz     short loc_407510
.text:0040751C
.text:0040751C loc_40751C:                             ; CODE XREF: sub_407500+B↑j
.text:0040751C                 mov     eax, ecx
.text:0040751E                 retn
.text:0040751E ; ---------------------------------------------------------------------------
.text:0040751F                 align 10h
.text:00407520
.text:00407520 loc_407520:                             ; CODE XREF: sub_407500+12↑j
.text:00407520                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407523                 jmp     short loc_407514
.text:00407523 sub_407500      endp
.text:00407523
.text:00407523 ; ---------------------------------------------------------------------------
.text:00407525                 align 10h
.text:00407530                 push    ebx
.text:00407531                 sub     esp, 8
.text:00407534                 mov     ebx, [esp+14h]
.text:00407538                 mov     edx, [esp+10h]
.text:0040753C                 mov     [esp], ebx
.text:0040753F                 mov     [esp+4], edx
.text:00407543                 call    strcpy
.text:00407548                 movzx   eax, byte ptr [ebx]
.text:0040754B                 mov     edx, ebx
.text:0040754D                 test    al, al
.text:0040754F                 jz      short loc_40756C
.text:00407551                 jmp     short loc_407560
.text:00407551 ; ---------------------------------------------------------------------------
.text:00407553                 align 10h
.text:00407560
.text:00407560 loc_407560:                             ; CODE XREF: .text:00407551↑j
.text:00407560                                         ; .text:0040756A↓j
.text:00407560                 cmp     al, 5Ch ; '\'
.text:00407562                 jz      short loc_407573
.text:00407564
.text:00407564 loc_407564:                             ; CODE XREF: .text:00407576↓j
.text:00407564                 inc     edx
.text:00407565                 movzx   eax, byte ptr [edx]
.text:00407568                 test    al, al
.text:0040756A                 jnz     short loc_407560
.text:0040756C
.text:0040756C loc_40756C:                             ; CODE XREF: .text:0040754F↑j
.text:0040756C                 add     esp, 8
.text:0040756F                 xor     eax, eax
.text:00407571                 pop     ebx
.text:00407572                 retn
.text:00407573 ; ---------------------------------------------------------------------------
.text:00407573
.text:00407573 loc_407573:                             ; CODE XREF: .text:00407562↑j
.text:00407573                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407576                 jmp     short loc_407564
.text:00407576 ; ---------------------------------------------------------------------------
.text:00407578                 align 10h
.text:00407580
.text:00407580 ; =============== S U B R O U T I N E =======================================
.text:00407580
.text:00407580
.text:00407580 sub_407580      proc near               ; CODE XREF: sub_405D80+16↑p
.text:00407580                                         ; sub_406280+1F↑p ...
.text:00407580
.text:00407580 arg_0           = dword ptr  4
.text:00407580
.text:00407580                 mov     ecx, [esp+arg_0]
.text:00407584                 mov     edx, ecx
.text:00407586                 movzx   eax, byte ptr [ecx]
.text:00407589                 test    al, al
.text:0040758B                 jz      short loc_40759C
.text:0040758D                 lea     esi, [esi+0]
.text:00407590
.text:00407590 loc_407590:                             ; CODE XREF: sub_407580+1A↓j
.text:00407590                 cmp     al, 2Fh ; '/'
.text:00407592                 jz      short loc_4075A0
.text:00407594
.text:00407594 loc_407594:                             ; CODE XREF: sub_407580+23↓j
.text:00407594                 inc     edx
.text:00407595                 movzx   eax, byte ptr [edx]
.text:00407598                 test    al, al
.text:0040759A                 jnz     short loc_407590
.text:0040759C
.text:0040759C loc_40759C:                             ; CODE XREF: sub_407580+B↑j
.text:0040759C                 mov     eax, ecx
.text:0040759E                 retn
.text:0040759E ; ---------------------------------------------------------------------------
.text:0040759F                 align 10h
.text:004075A0
.text:004075A0 loc_4075A0:                             ; CODE XREF: sub_407580+12↑j
.text:004075A0                 mov     byte ptr [edx], 5Ch ; '\'
.text:004075A3                 jmp     short loc_407594
.text:004075A3 sub_407580      endp
.text:004075A3
.text:004075A3 ; ---------------------------------------------------------------------------
.text:004075A5                 align 10h
.text:004075B0                 push    ebx
.text:004075B1                 sub     esp, 8
.text:004075B4                 mov     ebx, [esp+14h]
.text:004075B8                 mov     edx, [esp+10h]
.text:004075BC                 mov     [esp], ebx
.text:004075BF                 mov     [esp+4], edx
.text:004075C3                 call    strcpy
.text:004075C8                 movzx   eax, byte ptr [ebx]
.text:004075CB                 mov     edx, ebx
.text:004075CD                 test    al, al
.text:004075CF                 jz      short loc_4075EC
.text:004075D1                 jmp     short loc_4075E0
.text:004075D1 ; ---------------------------------------------------------------------------
.text:004075D3                 align 10h
.text:004075E0
.text:004075E0 loc_4075E0:                             ; CODE XREF: .text:004075D1↑j
.text:004075E0                                         ; .text:004075EA↓j
.text:004075E0                 cmp     al, 2Fh ; '/'
.text:004075E2                 jz      short loc_4075F3
.text:004075E4
.text:004075E4 loc_4075E4:                             ; CODE XREF: .text:004075F6↓j
.text:004075E4                 inc     edx
.text:004075E5                 movzx   eax, byte ptr [edx]
.text:004075E8                 test    al, al
.text:004075EA                 jnz     short loc_4075E0
.text:004075EC
.text:004075EC loc_4075EC:                             ; CODE XREF: .text:004075CF↑j
.text:004075EC                 add     esp, 8
.text:004075EF                 xor     eax, eax
.text:004075F1                 pop     ebx
.text:004075F2                 retn
.text:004075F3 ; ---------------------------------------------------------------------------
.text:004075F3
.text:004075F3 loc_4075F3:                             ; CODE XREF: .text:004075E2↑j
.text:004075F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004075F6                 jmp     short loc_4075E4
.text:004075F6 ; ---------------------------------------------------------------------------
.text:004075F8                 align 10h
.text:00407600                 push    ebx
.text:00407601                 sub     esp, 8
.text:00407604                 mov     ebx, [esp+14h]
.text:00407608                 mov     edx, [esp+10h]
.text:0040760C                 mov     [esp+4], ebx
.text:00407610                 mov     [esp], edx
.text:00407613                 call    sub_408E30
.text:00407618                 movzx   eax, byte ptr [ebx]
.text:0040761B                 mov     edx, ebx
.text:0040761D                 test    al, al
.text:0040761F                 jz      short loc_40763C
.text:00407621                 jmp     short loc_407630
.text:00407621 ; ---------------------------------------------------------------------------
.text:00407623                 align 10h
.text:00407630
.text:00407630 loc_407630:                             ; CODE XREF: .text:00407621↑j
.text:00407630                                         ; .text:0040763A↓j
.text:00407630                 cmp     al, 2Fh ; '/'
.text:00407632                 jz      short loc_407643
.text:00407634
.text:00407634 loc_407634:                             ; CODE XREF: .text:00407646↓j
.text:00407634                 inc     edx
.text:00407635                 movzx   eax, byte ptr [edx]
.text:00407638                 test    al, al
.text:0040763A                 jnz     short loc_407630
.text:0040763C
.text:0040763C loc_40763C:                             ; CODE XREF: .text:0040761F↑j
.text:0040763C                 add     esp, 8
.text:0040763F                 xor     eax, eax
.text:00407641                 pop     ebx
.text:00407642                 retn
.text:00407643 ; ---------------------------------------------------------------------------
.text:00407643
.text:00407643 loc_407643:                             ; CODE XREF: .text:00407632↑j
.text:00407643                 mov     byte ptr [edx], 5Ch ; '\'
.text:00407646                 jmp     short loc_407634
.text:00407646 ; ---------------------------------------------------------------------------
.text:00407648                 align 10h
.text:00407650                 push    ebx
.text:00407651                 sub     esp, 8
.text:00407654                 mov     ebx, [esp+14h]
.text:00407658                 mov     edx, [esp+10h]
.text:0040765C                 mov     [esp], ebx
.text:0040765F                 mov     [esp+4], edx
.text:00407663                 call    sub_408E30
.text:00407668                 movzx   eax, byte ptr [ebx]
.text:0040766B                 mov     edx, ebx
.text:0040766D                 test    al, al
.text:0040766F                 jz      short loc_40768C
.text:00407671                 jmp     short loc_407680
.text:00407671 ; ---------------------------------------------------------------------------
.text:00407673                 align 10h
.text:00407680
.text:00407680 loc_407680:                             ; CODE XREF: .text:00407671↑j
.text:00407680                                         ; .text:0040768A↓j
.text:00407680                 cmp     al, 5Ch ; '\'
.text:00407682                 jz      short loc_407691
.text:00407684
.text:00407684 loc_407684:                             ; CODE XREF: .text:00407694↓j
.text:00407684                 inc     edx
.text:00407685                 movzx   eax, byte ptr [edx]
.text:00407688                 test    al, al
.text:0040768A                 jnz     short loc_407680
.text:0040768C
.text:0040768C loc_40768C:                             ; CODE XREF: .text:0040766F↑j
.text:0040768C                 add     esp, 8
.text:0040768F                 pop     ebx
.text:00407690                 retn
.text:00407691 ; ---------------------------------------------------------------------------
.text:00407691
.text:00407691 loc_407691:                             ; CODE XREF: .text:00407682↑j
.text:00407691                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407694                 jmp     short loc_407684
.text:00407694 ; ---------------------------------------------------------------------------
.text:00407696                 align 10h
.text:004076A0
.text:004076A0 ; =============== S U B R O U T I N E =======================================
.text:004076A0
.text:004076A0
.text:004076A0 ; int __cdecl sub_4076A0(LPSTR)
.text:004076A0 sub_4076A0      proc near               ; CODE XREF: .text:0040772E↓p
.text:004076A0                                         ; .text:0040776E↓p ...
.text:004076A0
.text:004076A0 hModule         = dword ptr -1Ch
.text:004076A0 lpFilename      = dword ptr -18h
.text:004076A0 nSize           = dword ptr -14h
.text:004076A0 arg_0           = dword ptr  4
.text:004076A0
.text:004076A0                 push    esi
.text:004076A1                 push    ebx
.text:004076A2                 sub     esp, 14h
.text:004076A5                 mov     esi, [esp+1Ch+arg_0]
.text:004076A9                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:004076B1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:004076B8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:004076BC                 call    GetModuleFileNameA
.text:004076C1                 sub     esp, 0Ch
.text:004076C4                 test    eax, eax
.text:004076C6                 jz      short loc_407708
.text:004076C8                 cmp     eax, 104h
.text:004076CD                 jg      short loc_4076F9
.text:004076CF
.text:004076CF loc_4076CF:                             ; CODE XREF: sub_4076A0+66↓j
.text:004076CF                                         ; sub_4076A0+78↓j
.text:004076CF                 movzx   eax, byte ptr [esi]
.text:004076D2                 mov     edx, esi
.text:004076D4                 test    al, al
.text:004076D6                 jz      short loc_4076EC
.text:004076D8                 nop
.text:004076D9                 lea     esi, [esi+0]
.text:004076E0
.text:004076E0 loc_4076E0:                             ; CODE XREF: sub_4076A0+4A↓j
.text:004076E0                 cmp     al, 5Ch ; '\'
.text:004076E2                 jz      short loc_4076F4
.text:004076E4
.text:004076E4 loc_4076E4:                             ; CODE XREF: sub_4076A0+57↓j
.text:004076E4                 inc     edx
.text:004076E5                 movzx   eax, byte ptr [edx]
.text:004076E8                 test    al, al
.text:004076EA                 jnz     short loc_4076E0
.text:004076EC
.text:004076EC loc_4076EC:                             ; CODE XREF: sub_4076A0+36↑j
.text:004076EC                 add     esp, 14h
.text:004076EF                 mov     eax, esi
.text:004076F1                 pop     ebx
.text:004076F2                 pop     esi
.text:004076F3                 retn
.text:004076F4 ; ---------------------------------------------------------------------------
.text:004076F4
.text:004076F4 loc_4076F4:                             ; CODE XREF: sub_4076A0+42↑j
.text:004076F4                 mov     byte ptr [edx], 2Fh ; '/'
.text:004076F7                 jmp     short loc_4076E4
.text:004076F9 ; ---------------------------------------------------------------------------
.text:004076F9
.text:004076F9 loc_4076F9:                             ; CODE XREF: sub_4076A0+2D↑j
.text:004076F9                 call    _errno
.text:004076FE                 mov     dword ptr [eax], 26h ; '&'
.text:00407704                 xor     esi, esi
.text:00407706                 jmp     short loc_4076CF
.text:00407708 ; ---------------------------------------------------------------------------
.text:00407708
.text:00407708 loc_407708:                             ; CODE XREF: sub_4076A0+26↑j
.text:00407708                 call    sub_408E10
.text:0040770D                 mov     ebx, eax
.text:0040770F                 xor     esi, esi
.text:00407711                 call    _errno
.text:00407716                 mov     [eax], ebx
.text:00407718                 jmp     short loc_4076CF
.text:00407718 sub_4076A0      endp
.text:00407718
.text:00407718 ; ---------------------------------------------------------------------------
.text:0040771A                 align 10h
.text:00407720                 sub     esp, 0Ch
.text:00407723                 mov     [esp+8], ebx
.text:00407727                 mov     ebx, [esp+10h]
.text:0040772B                 mov     [esp], ebx
.text:0040772E                 call    sub_4076A0
.text:00407733                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040773B                 mov     [esp], ebx
.text:0040773E                 call    strrchr
.text:00407743                 test    eax, eax
.text:00407745                 jz      short loc_40774A
.text:00407747                 lea     ebx, [eax+1]
.text:0040774A
.text:0040774A loc_40774A:                             ; CODE XREF: .text:00407745↑j
.text:0040774A                 mov     eax, ebx
.text:0040774C                 mov     ebx, [esp+8]
.text:00407750                 add     esp, 0Ch
.text:00407753                 retn
.text:00407753 ; ---------------------------------------------------------------------------
.text:00407754                 align 10h
.text:00407760                 sub     esp, 0Ch
.text:00407763                 mov     [esp+8], ebx
.text:00407767                 mov     ebx, [esp+10h]
.text:0040776B                 mov     [esp], ebx
.text:0040776E                 call    sub_4076A0
.text:00407773                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040777B                 mov     [esp], ebx
.text:0040777E                 call    strrchr
.text:00407783                 test    eax, eax
.text:00407785                 jz      short loc_40778A
.text:00407787                 mov     byte ptr [eax], 0
.text:0040778A
.text:0040778A loc_40778A:                             ; CODE XREF: .text:00407785↑j
.text:0040778A                 mov     eax, ebx
.text:0040778C                 mov     ebx, [esp+8]
.text:00407790                 add     esp, 0Ch
.text:00407793                 retn
.text:00407793 ; ---------------------------------------------------------------------------
.text:00407794                 align 10h
.text:004077A0                 sub     esp, 0Ch
.text:004077A3                 mov     [esp+8], ebx
.text:004077A7                 mov     ebx, [esp+10h]
.text:004077AB                 mov     [esp], ebx
.text:004077AE                 call    sub_4076A0
.text:004077B3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004077BB                 mov     [esp], ebx
.text:004077BE                 call    strrchr
.text:004077C3                 test    eax, eax
.text:004077C5                 jz      short loc_4077CA
.text:004077C7                 mov     byte ptr [eax], 0
.text:004077CA
.text:004077CA loc_4077CA:                             ; CODE XREF: .text:004077C5↑j
.text:004077CA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004077D2                 mov     [esp], ebx
.text:004077D5                 call    strrchr
.text:004077DA                 test    eax, eax
.text:004077DC                 jz      short loc_4077E1
.text:004077DE                 mov     byte ptr [eax], 0
.text:004077E1
.text:004077E1 loc_4077E1:                             ; CODE XREF: .text:004077DC↑j
.text:004077E1                 mov     eax, ebx
.text:004077E3                 mov     ebx, [esp+8]
.text:004077E7                 add     esp, 0Ch
.text:004077EA                 retn
.text:004077EA ; ---------------------------------------------------------------------------
.text:004077EB                 align 10h
.text:004077F0                 sub     esp, 1Ch
.text:004077F3                 mov     edx, [esp+20h]
.text:004077F7                 mov     [esp+10h], ebx
.text:004077FB                 xor     ebx, ebx
.text:004077FD                 mov     [esp+14h], esi
.text:00407801                 mov     [esp+18h], edi
.text:00407805                 mov     [esp], edx
.text:00407808                 call    sub_408E60
.text:0040780D                 mov     edx, [esp+24h]
.text:00407811                 mov     edi, eax
.text:00407813                 mov     [esp], edx
.text:00407816                 call    sub_408E60
.text:0040781B                 mov     [esp+4], eax
.text:0040781F                 mov     esi, eax
.text:00407821                 mov     [esp], edi
.text:00407824                 call    _stricmp_0
.text:00407829                 mov     [esp], edi
.text:0040782C                 test    eax, eax
.text:0040782E                 setz    bl
.text:00407831                 call    free
.text:00407836                 mov     [esp], esi
.text:00407839                 call    free
.text:0040783E                 mov     eax, ebx
.text:00407840                 mov     esi, [esp+14h]
.text:00407844                 mov     ebx, [esp+10h]
.text:00407848                 mov     edi, [esp+18h]
.text:0040784C                 add     esp, 1Ch
.text:0040784F                 retn
.text:00407850 ; ---------------------------------------------------------------------------
.text:00407850                 xor     eax, eax
.text:00407852                 retn
.text:00407852 ; ---------------------------------------------------------------------------
.text:00407853 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00407887↓o
.text:00407860 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00407896↓o
.text:00407870 ; ---------------------------------------------------------------------------
.text:00407870                 sub     esp, 1Ch
.text:00407873                 mov     [esp+10h], ebx
.text:00407877                 mov     ebx, [esp+20h]
.text:0040787B                 mov     [esp+18h], edi
.text:0040787F                 mov     edi, [esp+24h]
.text:00407883                 mov     [esp+14h], esi
.text:00407887                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040788E                 call    GetModuleHandleA
.text:00407893                 sub     esp, 4
.text:00407896                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040789E                 mov     [esp], eax
.text:004078A1                 call    GetProcAddress
.text:004078A6                 sub     esp, 8
.text:004078A9                 test    eax, eax
.text:004078AB                 jz      short loc_4078C3
.text:004078AD                 mov     dword ptr [esp+8], 104h
.text:004078B5                 mov     [esp+4], ebx
.text:004078B9                 mov     [esp], edi
.text:004078BC                 call    eax
.text:004078BE                 sub     esp, 0Ch
.text:004078C1                 mov     esi, eax
.text:004078C3
.text:004078C3 loc_4078C3:                             ; CODE XREF: .text:004078AB↑j
.text:004078C3                 test    esi, esi
.text:004078C5                 jz      short loc_4078E0
.text:004078C7
.text:004078C7 loc_4078C7:                             ; CODE XREF: .text:004078FB↓j
.text:004078C7                 mov     eax, ebx
.text:004078C9                 mov     esi, [esp+14h]
.text:004078CD                 mov     ebx, [esp+10h]
.text:004078D1                 mov     edi, [esp+18h]
.text:004078D5                 add     esp, 1Ch
.text:004078D8                 retn
.text:004078D8 ; ---------------------------------------------------------------------------
.text:004078D9                 align 10h
.text:004078E0
.text:004078E0 loc_4078E0:                             ; CODE XREF: .text:004078C5↑j
.text:004078E0                 call    sub_4098F0
.text:004078E5                 mov     [esp], ebx
.text:004078E8                 mov     [esp+4], edi
.text:004078EC                 call    strcpy
.text:004078F1                 mov     [esp], ebx
.text:004078F4                 call    _win32_longpath
.text:004078F9                 mov     ebx, eax
.text:004078FB                 jmp     short loc_4078C7
.text:004078FB ; ---------------------------------------------------------------------------
.text:004078FD                 align 10h
.text:00407900                 sub     esp, 1Ch
.text:00407903                 mov     [esp+18h], edi
.text:00407907                 mov     edi, [esp+20h]
.text:0040790B                 mov     [esp+10h], ebx
.text:0040790F                 mov     [esp+14h], esi
.text:00407913                 mov     dword ptr [esp+8], 0
.text:0040791B                 mov     dword ptr [esp+4], 0
.text:00407923                 mov     [esp], edi
.text:00407926                 call    GetShortPathNameA
.text:0040792B                 sub     esp, 0Ch
.text:0040792E                 mov     ebx, eax
.text:00407930                 test    eax, eax
.text:00407932                 jz      short loc_407980
.text:00407934                 lea     edx, [eax+1]
.text:00407937                 mov     [esp], edx
.text:0040793A                 call    malloc
.text:0040793F                 test    eax, eax
.text:00407941                 mov     esi, eax
.text:00407943                 jz      short loc_407980
.text:00407945                 mov     [esp+8], ebx
.text:00407949                 mov     [esp+4], eax
.text:0040794D                 mov     [esp], edi
.text:00407950                 call    GetShortPathNameA
.text:00407955                 sub     esp, 0Ch
.text:00407958                 mov     edx, esi
.text:0040795A                 test    eax, eax
.text:0040795C                 jz      short loc_407972
.text:0040795E                 mov     esi, esi
.text:00407960
.text:00407960 loc_407960:                             ; CODE XREF: .text:00407990↓j
.text:00407960                 mov     ebx, [esp+10h]
.text:00407964                 mov     eax, edx
.text:00407966                 mov     esi, [esp+14h]
.text:0040796A                 mov     edi, [esp+18h]
.text:0040796E                 add     esp, 1Ch
.text:00407971                 retn
.text:00407972 ; ---------------------------------------------------------------------------
.text:00407972
.text:00407972 loc_407972:                             ; CODE XREF: .text:0040795C↑j
.text:00407972                 mov     [esp], esi
.text:00407975                 call    free
.text:0040797A                 lea     esi, [esi+0]
.text:00407980
.text:00407980 loc_407980:                             ; CODE XREF: .text:00407932↑j
.text:00407980                                         ; .text:00407943↑j
.text:00407980                 call    sub_408E10
.text:00407985                 mov     esi, eax
.text:00407987                 call    _errno
.text:0040798C                 mov     [eax], esi
.text:0040798E                 mov     edx, edi
.text:00407990                 jmp     short loc_407960
.text:00407990 ; ---------------------------------------------------------------------------
.text:00407992                 align 10h
.text:004079A0
.text:004079A0 ; =============== S U B R O U T I N E =======================================
.text:004079A0
.text:004079A0
.text:004079A0 sub_4079A0      proc near               ; DATA XREF: sub_4079B0+186↓o
.text:004079A0                 sub     al, [eax]
.text:004079A2                 lea     esi, [esi+0]
.text:004079A9                 lea     edi, [edi+0]
.text:004079A9 sub_4079A0      endp
.text:004079A9
.text:004079B0
.text:004079B0 ; =============== S U B R O U T I N E =======================================
.text:004079B0
.text:004079B0
.text:004079B0 sub_4079B0      proc near               ; CODE XREF: sub_4019A0+A3↑p
.text:004079B0
.text:004079B0 hFindFile       = dword ptr -2DCh
.text:004079B0 lpFindFileData  = dword ptr -2D8h
.text:004079B0 Count           = dword ptr -2D4h
.text:004079B0 Destination     = byte ptr -2CCh
.text:004079B0 var_1BC         = dword ptr -1BCh
.text:004079B0 var_1B4         = dword ptr -1B4h
.text:004079B0 var_1B0         = dword ptr -1B0h
.text:004079B0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004079B0 arg_0           = dword ptr  4
.text:004079B0
.text:004079B0                 push    ebp
.text:004079B1                 push    edi
.text:004079B2                 push    esi
.text:004079B3                 push    ebx
.text:004079B4                 sub     esp, 2CCh
.text:004079BA                 mov     ebp, [esp+2DCh+arg_0]
.text:004079C1                 test    ebp, ebp
.text:004079C3                 mov     ebx, [ebp+4]
.text:004079C6                 jz      loc_407B7D
.text:004079CC                 mov     edx, [ebp+0]
.text:004079CF                 cmp     edx, 0FFFFFFFFh
.text:004079D2                 jz      loc_407B07
.text:004079D8                 mov     [esp+2DCh+hFindFile], edx ; hFindFile
.text:004079DB                 lea     ecx, [esp+2DCh+FindFileData]
.text:004079E2                 mov     [esp+2DCh+lpFindFileData], ecx ; lpFindFileData
.text:004079E6                 call    FindNextFileA
.text:004079EB                 sub     esp, 8
.text:004079EE                 test    eax, eax
.text:004079F0                 jz      loc_407AFB
.text:004079F6
.text:004079F6 loc_4079F6:                             ; CODE XREF: sub_4079B0+1BC↓j
.text:004079F6                 mov     [esp+2DCh+Count], 104h ; Count
.text:004079FE                 lea     edi, [esp+2DCh+FindFileData.cFileName]
.text:00407A05                 mov     esi, [ebx]
.text:00407A07                 mov     [esp+2DCh+lpFindFileData], esi ; Source
.text:00407A0B                 lea     esi, [ebx+14h]
.text:00407A0E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00407A11                 call    strncpy
.text:00407A16                 mov     [esp+2DCh+Count], 104h ; Count
.text:00407A1E                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:00407A22                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00407A25                 call    strncat
.text:00407A2A                 mov     [esp+2DCh+lpFindFileData], esi ; int
.text:00407A2E                 lea     edx, [esp+2DCh+var_1BC]
.text:00407A35                 mov     [esp+2DCh+Count], edx ; int
.text:00407A39                 mov     [esp+2DCh+hFindFile], 0 ; LPCSTR
.text:00407A40                 call    sub_4070E0
.text:00407A45                 test    eax, eax
.text:00407A47                 jnz     loc_407AE9
.text:00407A4D                 mov     ecx, [esp+2DCh+var_1BC]
.text:00407A54                 and     ecx, 0F000h
.text:00407A5A                 shr     ecx, 0Ch
.text:00407A5D                 mov     [ebx+12h], cl
.text:00407A60                 mov     ecx, edi
.text:00407A62                 lea     esi, [esi+0]
.text:00407A69                 lea     edi, [edi+0]
.text:00407A70
.text:00407A70 loc_407A70:                             ; CODE XREF: sub_4079B0+D5↓j
.text:00407A70                 mov     eax, [ecx]
.text:00407A72                 add     ecx, 4
.text:00407A75                 lea     edx, [eax-1010101h]
.text:00407A7B                 not     eax
.text:00407A7D                 and     edx, eax
.text:00407A7F                 and     edx, 80808080h
.text:00407A85                 jz      short loc_407A70
.text:00407A87                 test    edx, 8080h
.text:00407A8D                 jnz     short loc_407A95
.text:00407A8F                 shr     edx, 10h
.text:00407A92                 add     ecx, 2
.text:00407A95
.text:00407A95 loc_407A95:                             ; CODE XREF: sub_4079B0+DD↑j
.text:00407A95                 mov     word ptr [ebx+10h], 110h
.text:00407A9B                 add     dl, dl
.text:00407A9D                 sbb     ecx, 3
.text:00407AA0                 sub     ecx, edi
.text:00407AA2                 mov     [ebx+13h], cl
.text:00407AA5                 mov     edx, [esp+2DCh+var_1B4]
.text:00407AAC                 mov     ecx, [esp+2DCh+var_1B0]
.text:00407AB3                 mov     [ebx+8], edx
.text:00407AB6                 mov     [ebx+0Ch], ecx
.text:00407AB9                 mov     [esp+2DCh+Count], 104h ; Count
.text:00407AC1                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:00407AC5                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00407AC8                 call    strncpy
.text:00407ACD                 inc     dword ptr [ebp+14h]
.text:00407AD0                 call    _errno
.text:00407AD5                 mov     dword ptr [eax], 0
.text:00407ADB                 lea     eax, [ebx+8]
.text:00407ADE
.text:00407ADE loc_407ADE:                             ; CODE XREF: sub_4079B0+149↓j
.text:00407ADE                 add     esp, 2CCh
.text:00407AE4                 pop     ebx
.text:00407AE5                 pop     esi
.text:00407AE6                 pop     edi
.text:00407AE7                 pop     ebp
.text:00407AE8                 retn
.text:00407AE9 ; ---------------------------------------------------------------------------
.text:00407AE9
.text:00407AE9 loc_407AE9:                             ; CODE XREF: sub_4079B0+97↑j
.text:00407AE9                                         ; sub_4079B0+153↓j ...
.text:00407AE9                 call    sub_408E10
.text:00407AEE                 mov     ebp, eax
.text:00407AF0                 call    _errno
.text:00407AF5                 mov     [eax], ebp
.text:00407AF7
.text:00407AF7 loc_407AF7:                             ; CODE XREF: sub_4079B0+155↓j
.text:00407AF7                                         ; sub_4079B0+1D8↓j
.text:00407AF7                 xor     eax, eax
.text:00407AF9                 jmp     short loc_407ADE
.text:00407AFB ; ---------------------------------------------------------------------------
.text:00407AFB
.text:00407AFB loc_407AFB:                             ; CODE XREF: sub_4079B0+40↑j
.text:00407AFB                 call    GetLastError
.text:00407B00                 cmp     eax, 12h
.text:00407B03                 jnz     short loc_407AE9
.text:00407B05                 jmp     short loc_407AF7
.text:00407B07 ; ---------------------------------------------------------------------------
.text:00407B07
.text:00407B07 loc_407B07:                             ; CODE XREF: sub_4079B0+22↑j
.text:00407B07                 mov     edx, [ebx]
.text:00407B09                 lea     esi, [esp+2DCh+Destination]
.text:00407B0D                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00407B10                 mov     [esp+2DCh+lpFindFileData], edx ; Source
.text:00407B14                 call    strcpy
.text:00407B19                 mov     ecx, esi
.text:00407B1B                 nop
.text:00407B1C                 lea     esi, [esi+0]
.text:00407B20
.text:00407B20 loc_407B20:                             ; CODE XREF: sub_4079B0+184↓j
.text:00407B20                 mov     edi, [ecx]
.text:00407B22                 add     ecx, 4
.text:00407B25                 lea     eax, [edi-1010101h]
.text:00407B2B                 not     edi
.text:00407B2D                 and     eax, edi
.text:00407B2F                 test    eax, 80808080h
.text:00407B34                 jz      short loc_407B20
.text:00407B36                 mov     [esp+2DCh+lpFindFileData], offset sub_4079A0 ; Source
.text:00407B3E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00407B41                 call    strcat
.text:00407B46                 mov     [esp+2DCh+hFindFile], esi
.text:00407B49                 call    sub_407580
.text:00407B4E                 mov     [esp+2DCh+hFindFile], esi ; lpFileName
.text:00407B51                 lea     edx, [esp+2DCh+FindFileData]
.text:00407B58                 mov     [esp+2DCh+lpFindFileData], edx ; lpFindFileData
.text:00407B5C                 call    FindFirstFileA
.text:00407B61                 sub     esp, 8
.text:00407B64                 cmp     eax, 0FFFFFFFFh
.text:00407B67                 jz      short loc_407B71
.text:00407B69                 mov     [ebp+0], eax
.text:00407B6C                 jmp     loc_4079F6
.text:00407B71 ; ---------------------------------------------------------------------------
.text:00407B71
.text:00407B71 loc_407B71:                             ; CODE XREF: sub_4079B0+1B7↑j
.text:00407B71                 mov     dword ptr [ebp+0], 0FFFFFFFFh
.text:00407B78                 jmp     loc_407AE9
.text:00407B7D ; ---------------------------------------------------------------------------
.text:00407B7D
.text:00407B7D loc_407B7D:                             ; CODE XREF: sub_4079B0+16↑j
.text:00407B7D                 call    _errno
.text:00407B82                 mov     dword ptr [eax], 9
.text:00407B88                 jmp     loc_407AF7
.text:00407B88 sub_4079B0      endp
.text:00407B88
.text:00407B88 ; ---------------------------------------------------------------------------
.text:00407B8D                 align 10h
.text:00407B90 ; const char String[4]
.text:00407B90 String          db ' :/',0              ; DATA XREF: sub_407BA0+FA↓o
.text:00407B94                 align 10h
.text:00407BA0
.text:00407BA0 ; =============== S U B R O U T I N E =======================================
.text:00407BA0
.text:00407BA0
.text:00407BA0 ; int __cdecl sub_407BA0(LPCSTR)
.text:00407BA0 sub_407BA0      proc near               ; CODE XREF: sub_405D80+E↑p
.text:00407BA0                                         ; sub_406280+17↑p ...
.text:00407BA0
.text:00407BA0 Str             = dword ptr -1Ch
.text:00407BA0 Val             = dword ptr -18h
.text:00407BA0 Count           = dword ptr -14h
.text:00407BA0 var_10          = dword ptr -10h
.text:00407BA0 var_C           = dword ptr -0Ch
.text:00407BA0 var_8           = dword ptr -8
.text:00407BA0 var_4           = dword ptr -4
.text:00407BA0 arg_0           = dword ptr  4
.text:00407BA0
.text:00407BA0                 sub     esp, 1Ch
.text:00407BA3                 mov     edx, [esp+1Ch+arg_0]
.text:00407BA7                 mov     [esp+1Ch+var_8], edi
.text:00407BAB                 mov     [esp+1Ch+var_10], ebx
.text:00407BAF                 mov     [esp+1Ch+var_C], esi
.text:00407BB3                 mov     [esp+1Ch+var_4], ebp
.text:00407BB7                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:00407BBA                 call    sub_408E60
.text:00407BBF                 test    eax, eax
.text:00407BC1                 mov     edi, eax
.text:00407BC3                 jz      short loc_407C00
.text:00407BC5                 mov     [esp+1Ch+Str], eax ; Str
.text:00407BC8                 call    strlen
.text:00407BCD                 cmp     eax, 2
.text:00407BD0                 jbe     short loc_407BDC
.text:00407BD2                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00407BD6                 jz      loc_407C90
.text:00407BDC
.text:00407BDC loc_407BDC:                             ; CODE XREF: sub_407BA0+30↑j
.text:00407BDC                                         ; sub_407BA0+F4↓j
.text:00407BDC                 test    edi, edi
.text:00407BDE                 jz      short loc_407C00
.text:00407BE0                 mov     [esp+1Ch+Str], edi ; Str
.text:00407BE3                 call    strlen
.text:00407BE8                 cmp     eax, 4
.text:00407BEB                 mov     ebp, eax
.text:00407BED                 jle     short loc_407C00
.text:00407BEF                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00407BF2                 jz      short loc_407C20
.text:00407BF4                 lea     esi, [esi+0]
.text:00407BFA                 lea     edi, [edi+0]
.text:00407C00
.text:00407C00 loc_407C00:                             ; CODE XREF: sub_407BA0+23↑j
.text:00407C00                                         ; sub_407BA0+3E↑j ...
.text:00407C00                 xor     esi, esi
.text:00407C02
.text:00407C02 loc_407C02:                             ; CODE XREF: sub_407BA0+CD↓j
.text:00407C02                                         ; sub_407BA0+115↓j
.text:00407C02                 mov     [esp+1Ch+Str], edi ; Block
.text:00407C05                 call    free
.text:00407C0A                 mov     eax, esi
.text:00407C0C                 mov     ebx, [esp+1Ch+var_10]
.text:00407C10                 mov     esi, [esp+1Ch+var_C]
.text:00407C14                 mov     edi, [esp+1Ch+var_8]
.text:00407C18                 mov     ebp, [esp+1Ch+var_4]
.text:00407C1C                 add     esp, 1Ch
.text:00407C1F                 retn
.text:00407C20 ; ---------------------------------------------------------------------------
.text:00407C20
.text:00407C20 loc_407C20:                             ; CODE XREF: sub_407BA0+52↑j
.text:00407C20                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00407C24                 jnz     short loc_407C00
.text:00407C26                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00407C2E                 lea     ecx, [edi+2]
.text:00407C31                 mov     [esp+1Ch+Str], ecx ; Str
.text:00407C34                 call    strchr
.text:00407C39                 test    eax, eax
.text:00407C3B                 jnz     short loc_407C6F
.text:00407C3D
.text:00407C3D loc_407C3D:                             ; CODE XREF: sub_407BA0+E2↓j
.text:00407C3D                 inc     ebp
.text:00407C3E
.text:00407C3E loc_407C3E:                             ; CODE XREF: sub_407BA0+E9↓j
.text:00407C3E                 mov     [esp+1Ch+Val], 1 ; Size
.text:00407C46                 lea     ebx, [ebp+1]
.text:00407C49                 mov     [esp+1Ch+Str], ebx ; Count
.text:00407C4C                 call    calloc
.text:00407C51                 mov     [esp+1Ch+Str], eax ; Destination
.text:00407C54                 mov     esi, eax
.text:00407C56                 mov     [esp+1Ch+Count], ebx ; Count
.text:00407C5A                 mov     [esp+1Ch+Val], edi ; Source
.text:00407C5E                 call    strncpy
.text:00407C63                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:00407C68                 mov     byte ptr [ebp+esi+0], 0
.text:00407C6D                 jmp     short loc_407C02
.text:00407C6F ; ---------------------------------------------------------------------------
.text:00407C6F
.text:00407C6F loc_407C6F:                             ; CODE XREF: sub_407BA0+9B↑j
.text:00407C6F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00407C77                 inc     eax
.text:00407C78                 mov     [esp+1Ch+Str], eax ; Str
.text:00407C7B                 call    strchr
.text:00407C80                 test    eax, eax
.text:00407C82                 jz      short loc_407C3D
.text:00407C84                 sub     eax, edi
.text:00407C86                 lea     ebp, [eax+1]
.text:00407C89                 jmp     short loc_407C3E
.text:00407C89 ; ---------------------------------------------------------------------------
.text:00407C8B                 align 10h
.text:00407C90
.text:00407C90 loc_407C90:                             ; CODE XREF: sub_407BA0+36↑j
.text:00407C90                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:00407C94                 jnz     loc_407BDC
.text:00407C9A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:00407CA1                 call    _strdup
.text:00407CA6                 movsx   edx, byte ptr [edi]
.text:00407CA9                 mov     esi, eax
.text:00407CAB                 mov     [esp+1Ch+Str], edx ; C
.text:00407CAE                 call    toupper
.text:00407CB3                 mov     [esi], al
.text:00407CB5                 jmp     loc_407C02
.text:00407CB5 sub_407BA0      endp
.text:00407CB5
.text:00407CB5 ; ---------------------------------------------------------------------------
.text:00407CBA                 align 10h
.text:00407CC0
.text:00407CC0 ; =============== S U B R O U T I N E =======================================
.text:00407CC0
.text:00407CC0
.text:00407CC0 sub_407CC0      proc near               ; CODE XREF: .text:00407E14↓p
.text:00407CC0                                         ; .text:00407EF8↓p
.text:00407CC0
.text:00407CC0 Str             = dword ptr -2Ch
.text:00407CC0 Val             = dword ptr -28h
.text:00407CC0 var_18          = dword ptr -18h
.text:00407CC0 var_11          = byte ptr -11h
.text:00407CC0 arg_0           = dword ptr  4
.text:00407CC0
.text:00407CC0                 push    ebp
.text:00407CC1                 push    edi
.text:00407CC2                 push    esi
.text:00407CC3                 push    ebx
.text:00407CC4                 sub     esp, 1Ch
.text:00407CC7                 mov     edx, [esp+2Ch+arg_0]
.text:00407CCB                 cmp     edx, ds:dword_40F1C0
.text:00407CD1                 mov     [esp+2Ch+var_11], 0
.text:00407CD6                 jz      loc_407DD4
.text:00407CDC                 mov     ebx, ds:dword_40F1B0
.text:00407CE2                 test    ebx, ebx
.text:00407CE4                 jz      short loc_407D52
.text:00407CE6
.text:00407CE6 loc_407CE6:                             ; CODE XREF: sub_407CC0+10F↓j
.text:00407CE6                 mov     ebx, [esp+2Ch+arg_0]
.text:00407CEA                 xor     edi, edi
.text:00407CEC                 xor     esi, esi
.text:00407CEE                 mov     ebp, offset dword_40F1D8
.text:00407CF3                 lea     esi, [esi+0]
.text:00407CF9                 lea     edi, [edi+0]
.text:00407D00
.text:00407D00 loc_407D00:                             ; CODE XREF: sub_407CC0+60↓j
.text:00407D00                 mov     edx, [ebp+4]
.text:00407D03                 mov     ecx, edi
.text:00407D05                 mov     eax, [ebp+0]
.text:00407D08                 shl     ecx, 4
.text:00407D0B                 mov     [esp+2Ch+var_18], ecx
.text:00407D0F                 mov     ecx, edx
.text:00407D11                 xor     eax, ebx
.text:00407D13                 xor     ecx, esi
.text:00407D15                 or      ecx, eax
.text:00407D17                 jz      short loc_407D41
.text:00407D19                 inc     edi
.text:00407D1A                 add     ebp, 10h
.text:00407D1D                 cmp     edi, 20h ; ' '
.text:00407D20                 jle     short loc_407D00
.text:00407D22
.text:00407D22 loc_407D22:                             ; CODE XREF: sub_407CC0+90↓j
.text:00407D22                 movzx   ebx, [esp+2Ch+var_11]
.text:00407D27                 mov     eax, [esp+2Ch+arg_0]
.text:00407D2B                 mov     byte_40E060, bl
.text:00407D31                 mov     ds:dword_40F1C0, eax
.text:00407D36                 movsx   eax, bl
.text:00407D39
.text:00407D39 loc_407D39:                             ; CODE XREF: sub_407CC0+11B↓j
.text:00407D39                 add     esp, 1Ch
.text:00407D3C                 pop     ebx
.text:00407D3D                 pop     esi
.text:00407D3E                 pop     edi
.text:00407D3F                 pop     ebp
.text:00407D40                 retn
.text:00407D41 ; ---------------------------------------------------------------------------
.text:00407D41
.text:00407D41 loc_407D41:                             ; CODE XREF: sub_407CC0+57↑j
.text:00407D41                 mov     edx, [esp+2Ch+var_18]
.text:00407D45                 movzx   eax, byte ptr ds:dword_40F1D0[edx]
.text:00407D4C                 mov     [esp+2Ch+var_11], al
.text:00407D50                 jmp     short loc_407D22
.text:00407D52 ; ---------------------------------------------------------------------------
.text:00407D52
.text:00407D52 loc_407D52:                             ; CODE XREF: sub_407CC0+24↑j
.text:00407D52                 mov     [esp+2Ch+Str], 0
.text:00407D59                 call    sub_40A6D0
.text:00407D5E                 test    eax, eax
.text:00407D60                 mov     ebx, eax
.text:00407D62                 jz      short loc_407DBC
.text:00407D64                 movzx   ecx, byte ptr [eax]
.text:00407D67                 mov     esi, 0FFFFFFF0h
.text:00407D6C                 test    cl, cl
.text:00407D6E                 jz      short loc_407DBC
.text:00407D70
.text:00407D70 loc_407D70:                             ; CODE XREF: sub_407CC0+FA↓j
.text:00407D70                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:00407D73                 movsx   ebp, cl
.text:00407D76                 add     esi, 10h
.text:00407D79                 mov     ds:dword_40F1D0[esi], ebp
.text:00407D7F                 mov     edi, ebp
.text:00407D81                 sar     edi, 1Fh
.text:00407D84                 mov     ds:dword_40F1D4[esi], edi
.text:00407D8A                 call    sub_406280
.text:00407D8F                 mov     ds:dword_40F1D8[esi], eax
.text:00407D95                 xor     ecx, ecx
.text:00407D97                 mov     [esp+2Ch+Str], ebx ; Str
.text:00407D9A                 mov     ds:dword_40F1DC[esi], ecx
.text:00407DA0                 mov     [esp+2Ch+Val], 0 ; Val
.text:00407DA8                 call    strchr
.text:00407DAD                 mov     ebx, eax
.text:00407DAF                 inc     ebx
.text:00407DB0                 jz      short loc_407DBC
.text:00407DB2                 movzx   edx, byte ptr [eax+1]
.text:00407DB6                 test    dl, dl
.text:00407DB8                 mov     cl, dl
.text:00407DBA                 jnz     short loc_407D70
.text:00407DBC
.text:00407DBC loc_407DBC:                             ; CODE XREF: sub_407CC0+A2↑j
.text:00407DBC                                         ; sub_407CC0+AE↑j ...
.text:00407DBC                 mov     [esp+2Ch+Str], ebx ; Block
.text:00407DBF                 mov     esi, 1
.text:00407DC4                 mov     ds:dword_40F1B0, esi
.text:00407DCA                 call    free
.text:00407DCF                 jmp     loc_407CE6
.text:00407DD4 ; ---------------------------------------------------------------------------
.text:00407DD4
.text:00407DD4 loc_407DD4:                             ; CODE XREF: sub_407CC0+16↑j
.text:00407DD4                 movsx   eax, byte_40E060
.text:00407DDB                 jmp     loc_407D39
.text:00407DDB sub_407CC0      endp
.text:00407DDB
.text:00407DDB ; ---------------------------------------------------------------------------
.text:00407DE0 dword_407DE0    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:00407DE0                                         ; DATA XREF: .text:00407E03↓o
.text:00407DE0                                         ; .text:00407EE3↓o
.text:00407DF0 ; ---------------------------------------------------------------------------
.text:00407DF0                 sub     esp, 1Ch
.text:00407DF3                 mov     [esp+14h], esi
.text:00407DF7                 mov     esi, [esp+20h]
.text:00407DFB                 mov     [esp+18h], edi
.text:00407DFF                 mov     [esp+10h], ebx
.text:00407E03                 mov     dword ptr [esp], offset dword_407DE0
.text:00407E0A                 call    _strdup
.text:00407E0F                 mov     [esp], esi
.text:00407E12                 mov     edi, eax
.text:00407E14                 call    sub_407CC0
.text:00407E19                 mov     [edi], al
.text:00407E1B                 test    al, al
.text:00407E1D                 jz      short loc_407E31
.text:00407E1F                 mov     eax, edi
.text:00407E21                 mov     ebx, [esp+10h]
.text:00407E25                 mov     esi, [esp+14h]
.text:00407E29                 mov     edi, [esp+18h]
.text:00407E2D                 add     esp, 1Ch
.text:00407E30                 retn
.text:00407E31 ; ---------------------------------------------------------------------------
.text:00407E31
.text:00407E31 loc_407E31:                             ; CODE XREF: .text:00407E1D↑j
.text:00407E31                 mov     [esp], edi
.text:00407E34                 call    free
.text:00407E39                 mov     dword ptr [esp+4], 0
.text:00407E41                 mov     dword ptr [esp], 0
.text:00407E48                 call    GetCurrentDirectoryA
.text:00407E4D                 sub     esp, 8
.text:00407E50                 lea     esi, [eax+1]
.text:00407E53                 mov     [esp], esi
.text:00407E56                 call    malloc
.text:00407E5B                 mov     [esp+4], eax
.text:00407E5F                 mov     edi, eax
.text:00407E61                 mov     [esp], esi
.text:00407E64                 call    GetCurrentDirectoryA
.text:00407E69                 sub     esp, 8
.text:00407E6C                 test    eax, eax
.text:00407E6E                 jnz     short loc_407E90
.text:00407E70                 mov     dword ptr [esp+20h], 407DE4h
.text:00407E78                 mov     ebx, [esp+10h]
.text:00407E7C                 mov     esi, [esp+14h]
.text:00407E80                 mov     edi, [esp+18h]
.text:00407E84                 add     esp, 1Ch
.text:00407E87                 jmp     _strdup
.text:00407E87 ; ---------------------------------------------------------------------------
.text:00407E8C                 align 10h
.text:00407E90
.text:00407E90 loc_407E90:                             ; CODE XREF: .text:00407E6E↑j
.text:00407E90                 mov     [esp+20h], edi
.text:00407E94                 mov     ebx, [esp+10h]
.text:00407E98                 mov     esi, [esp+14h]
.text:00407E9C                 mov     edi, [esp+18h]
.text:00407EA0                 add     esp, 1Ch
.text:00407EA3                 jmp     sub_407BA0
.text:00407EA3 ; ---------------------------------------------------------------------------
.text:00407EA8                 align 10h
.text:00407EB0                 sub     esp, 7Ch
.text:00407EB3                 lea     edx, [esp+10h]
.text:00407EB7                 mov     [esp+8], edx
.text:00407EBB                 mov     edx, [esp+80h]
.text:00407EC2                 mov     [esp+70h], ebx
.text:00407EC6                 mov     [esp+74h], esi
.text:00407ECA                 mov     [esp+4], edx
.text:00407ECE                 mov     [esp+78h], edi
.text:00407ED2                 mov     dword ptr [esp], 0
.text:00407ED9                 call    sub_4054D0
.text:00407EDE                 xor     edx, edx
.text:00407EE0                 inc     eax
.text:00407EE1                 jz      short loc_407F05
.text:00407EE3                 mov     dword ptr [esp], offset dword_407DE0
.text:00407EEA                 mov     esi, [esp+20h]
.text:00407EEE                 call    _strdup
.text:00407EF3                 mov     edi, eax
.text:00407EF5                 mov     [esp], esi
.text:00407EF8                 call    sub_407CC0
.text:00407EFD                 mov     [edi], al
.text:00407EFF                 test    al, al
.text:00407F01                 mov     edx, edi
.text:00407F03                 jz      short loc_407F17
.text:00407F05
.text:00407F05 loc_407F05:                             ; CODE XREF: .text:00407EE1↑j
.text:00407F05                                         ; .text:00407F64↓j
.text:00407F05                 mov     ebx, [esp+70h]
.text:00407F09                 mov     eax, edx
.text:00407F0B                 mov     esi, [esp+74h]
.text:00407F0F                 mov     edi, [esp+78h]
.text:00407F13                 add     esp, 7Ch
.text:00407F16                 retn
.text:00407F17 ; ---------------------------------------------------------------------------
.text:00407F17
.text:00407F17 loc_407F17:                             ; CODE XREF: .text:00407F03↑j
.text:00407F17                 mov     [esp], edi
.text:00407F1A                 call    free
.text:00407F1F                 mov     dword ptr [esp+4], 0
.text:00407F27                 mov     dword ptr [esp], 0
.text:00407F2E                 call    GetCurrentDirectoryA
.text:00407F33                 sub     esp, 8
.text:00407F36                 lea     esi, [eax+1]
.text:00407F39                 mov     [esp], esi
.text:00407F3C                 call    malloc
.text:00407F41                 mov     [esp+4], eax
.text:00407F45                 mov     edi, eax
.text:00407F47                 mov     [esp], esi
.text:00407F4A                 call    GetCurrentDirectoryA
.text:00407F4F                 sub     esp, 8
.text:00407F52                 test    eax, eax
.text:00407F54                 jnz     short loc_407F66
.text:00407F56                 mov     dword ptr [esp], 407DE4h
.text:00407F5D                 call    _strdup
.text:00407F62
.text:00407F62 loc_407F62:                             ; CODE XREF: .text:00407F6E↓j
.text:00407F62                 mov     edx, eax
.text:00407F64                 jmp     short loc_407F05
.text:00407F66 ; ---------------------------------------------------------------------------
.text:00407F66
.text:00407F66 loc_407F66:                             ; CODE XREF: .text:00407F54↑j
.text:00407F66                 mov     [esp], edi
.text:00407F69                 call    sub_407BA0
.text:00407F6E                 jmp     short loc_407F62
.text:00407F70
.text:00407F70 ; =============== S U B R O U T I N E =======================================
.text:00407F70
.text:00407F70
.text:00407F70 ; int __cdecl sub_407F70(LPCSTR)
.text:00407F70 sub_407F70      proc near               ; CODE XREF: sub_405730+12F↑p
.text:00407F70
.text:00407F70 String1         = dword ptr -1Ch
.text:00407F70 String2         = dword ptr -18h
.text:00407F70 var_C           = dword ptr -0Ch
.text:00407F70 var_8           = dword ptr -8
.text:00407F70 var_4           = dword ptr -4
.text:00407F70 arg_0           = dword ptr  4
.text:00407F70
.text:00407F70                 sub     esp, 1Ch
.text:00407F73                 mov     [esp+1Ch+var_4], edi
.text:00407F77                 mov     edi, [esp+1Ch+arg_0]
.text:00407F7B                 mov     [esp+1Ch+var_C], ebx
.text:00407F7F                 mov     [esp+1Ch+var_8], esi
.text:00407F83                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00407F86                 call    sub_408E60
.text:00407F8B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00407F8E                 mov     esi, eax
.text:00407F90                 call    sub_407BA0
.text:00407F95                 mov     [esp+1Ch+String2], eax ; String2
.text:00407F99                 mov     ebx, eax
.text:00407F9B                 mov     [esp+1Ch+String1], esi ; String1
.text:00407F9E                 call    _stricmp
.text:00407FA3                 test    eax, eax
.text:00407FA5                 setz    dl
.text:00407FA8                 test    esi, esi
.text:00407FAA                 movzx   edi, dl
.text:00407FAD                 jz      short loc_407FB7
.text:00407FAF                 mov     [esp+1Ch+String1], esi ; Block
.text:00407FB2                 call    free
.text:00407FB7
.text:00407FB7 loc_407FB7:                             ; CODE XREF: sub_407F70+3D↑j
.text:00407FB7                 test    ebx, ebx
.text:00407FB9                 jz      short loc_407FC3
.text:00407FBB                 mov     [esp+1Ch+String1], ebx ; Block
.text:00407FBE                 call    free
.text:00407FC3
.text:00407FC3 loc_407FC3:                             ; CODE XREF: sub_407F70+49↑j
.text:00407FC3                 mov     eax, edi
.text:00407FC5                 mov     ebx, [esp+1Ch+var_C]
.text:00407FC9                 mov     esi, [esp+1Ch+var_8]
.text:00407FCD                 mov     edi, [esp+1Ch+var_4]
.text:00407FD1                 add     esp, 1Ch
.text:00407FD4                 retn
.text:00407FD4 sub_407F70      endp
.text:00407FD4
.text:00407FD4 ; ---------------------------------------------------------------------------
.text:00407FD5                 align 10h
.text:00407FE0
.text:00407FE0 ; =============== S U B R O U T I N E =======================================
.text:00407FE0
.text:00407FE0
.text:00407FE0 ; int __cdecl sub_407FE0(char *, int)
.text:00407FE0 sub_407FE0      proc near               ; CODE XREF: sub_401380+1A9↑p
.text:00407FE0                                         ; sub_4019A0+42D↑p
.text:00407FE0
.text:00407FE0 var_C           = dword ptr -0Ch
.text:00407FE0 var_8           = dword ptr -8
.text:00407FE0 var_4           = dword ptr -4
.text:00407FE0 arg_0           = dword ptr  4
.text:00407FE0 arg_4           = dword ptr  8
.text:00407FE0
.text:00407FE0                 sub     esp, 0Ch
.text:00407FE3                 mov     edx, [esp+0Ch+arg_4]
.text:00407FE7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:00407FEE                 mov     [esp+0Ch+var_4], edx ; int
.text:00407FF2                 mov     edx, [esp+0Ch+arg_0]
.text:00407FF6                 mov     [esp+0Ch+var_8], edx ; char *
.text:00407FFA                 call    sub_408890
.text:00407FFF                 add     esp, 0Ch
.text:00408002                 retn
.text:00408002 sub_407FE0      endp
.text:00408002
.text:00408002 ; ---------------------------------------------------------------------------
.text:00408003                 align 10h
.text:00408010 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:00408061↓o
.text:00408019 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:00408019                                         ; DATA XREF: .text:00408072↓o
.text:0040802D ; const CHAR FileName[]
.text:0040802D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:004081BC↓o
.text:0040802D                                         ; sub_4085F0+17C↓o
.text:00408038 ; ---------------------------------------------------------------------------
.text:00408038
.text:00408038 loc_408038:                             ; DATA XREF: .text:004082D2↓o
.text:00408038                 dec     esi
.text:00408039                 push    esp
.text:0040803A                 inc     esi
.text:0040803B                 push    ebx
.text:0040803C                 add     [esi+41h], al
.text:0040803F                 push    esp
.text:00408040                 xor     esi, [edx]
.text:00408042                 add     [esi+41h], al
.text:00408045                 push    esp
.text:00408046                 add     [ebx+44h], al
.text:00408049                 inc     esi
.text:0040804A                 push    ebx
.text:0040804B
.text:0040804B loc_40804B:                             ; CODE XREF: sub_4085F0+101↓p
.text:0040804B                 add     [ebp+55002674h], cl
.text:00408051                 push    edi
.text:00408052                 push    esi
.text:00408053                 push    ebx
.text:00408054                 sub     esp, 8BCh
.text:0040805A                 mov     ebp, [esp+8D0h]
.text:00408061                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:00408068                 call    LoadLibraryA
.text:0040806D                 sub     esp, 4
.text:00408070                 mov     edi, eax
.text:00408072                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040807A                 mov     [esp], eax
.text:0040807D                 call    GetProcAddress
.text:00408082                 sub     esp, 8
.text:00408085                 mov     esi, eax
.text:00408087                 test    ebp, ebp
.text:00408089                 mov     dword ptr [esp+20h], 0
.text:00408091                 jz      loc_4085D1
.text:00408097                 mov     [esp], ebp
.text:0040809A                 call    sub_407580
.text:0040809F                 mov     [esp], eax
.text:004080A2                 mov     ebp, eax
.text:004080A4                 call    strlen
.text:004080A9                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:004080AE                 mov     ebx, eax
.text:004080B0                 jz      short loc_4080CC
.text:004080B2                 mov     [esp], ebp
.text:004080B5                 lea     edx, [eax+1]
.text:004080B8                 mov     [esp+4], edx
.text:004080BC                 call    realloc
.text:004080C1                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004080C5                 mov     ebp, eax
.text:004080C7                 mov     byte ptr [ebx+eax+1], 0
.text:004080CC
.text:004080CC loc_4080CC:                             ; CODE XREF: .text:004080B0↑j
.text:004080CC                 mov     dword ptr [esp+1Ch], 400h
.text:004080D4                 lea     edx, [esp+0B0h]
.text:004080DB                 lea     ebx, [esp+5Ch]
.text:004080DF                 mov     [esp+18h], edx
.text:004080E3                 lea     ecx, [esp+58h]
.text:004080E7                 lea     edx, [esp+54h]
.text:004080EB                 mov     [esp+14h], ebx
.text:004080EF                 lea     eax, [esp+4B0h]
.text:004080F6                 mov     [esp+10h], ecx
.text:004080FA                 mov     [esp+0Ch], edx
.text:004080FE                 mov     dword ptr [esp+8], 400h
.text:00408106                 mov     [esp+4], eax
.text:0040810A                 mov     [esp], ebp
.text:0040810D                 call    GetVolumeInformationA
.text:00408112                 sub     esp, 20h
.text:00408115                 test    eax, eax
.text:00408117                 jz      loc_4085AE
.text:0040811D                 test    esi, esi
.text:0040811F                 jz      short loc_408145
.text:00408121                 mov     [esp], ebp
.text:00408124                 lea     edx, [esp+48h]
.text:00408128                 lea     ebx, [esp+40h]
.text:0040812C                 mov     [esp+0Ch], edx
.text:00408130                 lea     ecx, [esp+38h]
.text:00408134                 mov     [esp+8], ebx
.text:00408138                 mov     [esp+4], ecx
.text:0040813C                 call    esi
.text:0040813E                 sub     esp, 10h
.text:00408141                 mov     [esp+20h], eax
.text:00408145
.text:00408145 loc_408145:                             ; CODE XREF: .text:0040811F↑j
.text:00408145                 test    edi, edi
.text:00408147                 jz      short loc_408154
.text:00408149                 mov     [esp], edi
.text:0040814C                 call    FreeLibrary
.text:00408151                 sub     esp, 4
.text:00408154
.text:00408154 loc_408154:                             ; CODE XREF: .text:00408147↑j
.text:00408154                 call    sub_4098F0
.text:00408159                 test    eax, eax
.text:0040815B                 lea     esi, [esp+28h]
.text:0040815F                 jz      loc_408590
.text:00408165                 call    sub_4098F0
.text:0040816A                 test    eax, eax
.text:0040816C                 jz      short loc_40817C
.text:0040816E                 call    sub_409840
.text:00408173                 cmp     eax, 0Bh
.text:00408176                 jle     loc_408564
.text:0040817C
.text:0040817C loc_40817C:                             ; CODE XREF: .text:0040816C↑j
.text:0040817C                 cld
.text:0040817D                 xor     eax, eax
.text:0040817F                 lea     ebx, [esp+60h]
.text:00408183                 mov     ecx, 7
.text:00408188                 mov     edi, ebx
.text:0040818A                 rep stosd
.text:0040818C                 mov     dword ptr [esp+18h], 0
.text:00408194                 mov     dword ptr [esp+14h], 4000000h
.text:0040819C                 mov     dword ptr [esp+10h], 0
.text:004081A4                 mov     dword ptr [esp+0Ch], 0
.text:004081AC                 mov     dword ptr [esp+8], 0
.text:004081B4                 mov     dword ptr [esp+4], 0
.text:004081BC                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:004081C3                 call    CreateFileA
.text:004081C8                 sub     esp, 1Ch
.text:004081CB                 mov     edi, eax
.text:004081CD                 cmp     eax, 0FFFFFFFFh
.text:004081D0                 jz      short loc_408250
.text:004081D2                 mov     [esp+10h], ebx
.text:004081D6                 lea     edx, [esp+80h]
.text:004081DD                 lea     ecx, [esp+24h]
.text:004081E1                 mov     [esp+70h], edx
.text:004081E5                 mov     [esp+18h], ecx
.text:004081E9                 mov     [esp+8], ebx
.text:004081ED                 mov     dword ptr [esp+6Ch], 7303h
.text:004081F5                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:004081FD                 mov     [esp+64h], ebp
.text:00408201                 mov     dword ptr [esp+78h], 1
.text:00408209                 mov     dword ptr [esp+1Ch], 0
.text:00408211                 mov     dword ptr [esp+14h], 1Ch
.text:00408219                 mov     dword ptr [esp+0Ch], 1Ch
.text:00408221                 mov     dword ptr [esp+4], 6
.text:00408229                 mov     [esp], eax
.text:0040822C                 call    DeviceIoControl
.text:00408231                 sub     esp, 20h
.text:00408234                 mov     ebx, eax
.text:00408236                 mov     [esp], edi
.text:00408239                 call    CloseHandle
.text:0040823E                 sub     esp, 4
.text:00408241                 test    ebx, ebx
.text:00408243                 jz      short loc_408250
.text:00408245                 test    byte ptr [esp+78h], 1
.text:0040824A                 jz      loc_408530
.text:00408250
.text:00408250 loc_408250:                             ; CODE XREF: .text:004081D0↑j
.text:00408250                                         ; .text:00408243↑j
.text:00408250                 call    sub_408E10
.text:00408255                 mov     edi, eax
.text:00408257                 call    _errno
.text:0040825C                 mov     [eax], edi
.text:0040825E                 xor     eax, eax
.text:00408260
.text:00408260 loc_408260:                             ; CODE XREF: .text:0040855F↓j
.text:00408260                                         ; .text:0040858B↓j
.text:00408260                 test    eax, eax
.text:00408262                 jnz     short loc_408284
.text:00408264                 mov     dword ptr [esp+34h], 1
.text:0040826C                 mov     dword ptr [esp+30h], 200h
.text:00408274                 mov     dword ptr [esp+2Ch], 0
.text:0040827C                 mov     dword ptr [esp+28h], 0
.text:00408284
.text:00408284 loc_408284:                             ; CODE XREF: .text:00408262↑j
.text:00408284                 mov     edx, [esp+30h]
.text:00408288                 mov     edi, [esp+34h]
.text:0040828C                 mov     ecx, [esp+20h]
.text:00408290                 imul    edi, edx
.text:00408293                 test    ecx, ecx
.text:00408295                 jnz     short loc_4082BD
.text:00408297                 mov     eax, [esp+28h]
.text:0040829B                 mul     edi
.text:0040829D                 mov     esi, eax
.text:0040829F                 mov     eax, [esp+2Ch]
.text:004082A3                 mov     [esp+44h], edx
.text:004082A7                 mov     [esp+40h], esi
.text:004082AB                 mul     edi
.text:004082AD                 mov     [esp+48h], eax
.text:004082B1                 mov     [esp+4Ch], edx
.text:004082B5                 mov     [esp+38h], eax
.text:004082B9                 mov     [esp+3Ch], edx
.text:004082BD
.text:004082BD loc_4082BD:                             ; CODE XREF: .text:00408295↑j
.text:004082BD                 mov     ebx, [esp+5Ch]
.text:004082C1                 lea     edx, [esp+0B0h]
.text:004082C8                 mov     ecx, [esp+8D4h]
.text:004082CF                 mov     [ecx+48h], ebx
.text:004082D2                 mov     dword ptr [esp+4], offset loc_408038
.text:004082DA                 mov     [esp], edx
.text:004082DD                 call    _stricmp
.text:004082E2                 test    eax, eax
.text:004082E4                 jnz     loc_4084A0
.text:004082EA                 mov     esi, [esp+8D4h]
.text:004082F1                 mov     dword ptr [esi], 5346544Eh
.text:004082F7
.text:004082F7 loc_4082F7:                             ; CODE XREF: .text:004084C8↓j
.text:004082F7                                         ; .text:004084F5↓j ...
.text:004082F7                 mov     ebx, [esp+30h]
.text:004082FB                 mov     esi, [esp+8D4h]
.text:00408302                 mov     [esi+4], ebx
.text:00408305                 mov     [esi+8], ebx
.text:00408308                 mov     ebx, [esi+8]
.text:0040830B                 mov     [esi+0Ch], edi
.text:0040830E                 mov     ecx, [esp+44h]
.text:00408312                 xor     esi, esi
.text:00408314                 mov     [esp+8], ebx
.text:00408318                 mov     edx, [esp+40h]
.text:0040831C                 mov     [esp+0Ch], esi
.text:00408320                 mov     [esp+4], ecx
.text:00408324                 mov     [esp], edx
.text:00408327                 call    sub_40CDA0
.text:0040832C                 mov     ecx, [esp+8D4h]
.text:00408333                 mov     [ecx+10h], eax
.text:00408336                 mov     [ecx+14h], edx
.text:00408339                 mov     ecx, [esp+4Ch]
.text:0040833D                 mov     [esp+8], ebx
.text:00408341                 mov     edx, [esp+48h]
.text:00408345                 mov     [esp+0Ch], esi
.text:00408349                 mov     [esp+4], ecx
.text:0040834D                 mov     [esp], edx
.text:00408350                 call    sub_40CDA0
.text:00408355                 mov     ecx, [esp+8D4h]
.text:0040835C                 mov     [ecx+18h], eax
.text:0040835F                 mov     [ecx+1Ch], edx
.text:00408362                 mov     ecx, [esp+38h]
.text:00408366                 mov     [esp+8], ebx
.text:0040836A                 mov     ebx, [esp+3Ch]
.text:0040836E                 mov     [esp+0Ch], esi
.text:00408372                 mov     [esp], ecx
.text:00408375                 mov     [esp+4], ebx
.text:00408379                 call    sub_40CDA0
.text:0040837E                 mov     esi, [esp+8D4h]
.text:00408385                 mov     [esi+20h], eax
.text:00408388                 mov     [esi+24h], edx
.text:0040838B                 mov     ecx, [esp+44h]
.text:0040838F                 mov     esi, edi
.text:00408391                 mov     [esp+8], esi
.text:00408395                 mov     edx, [esp+40h]
.text:00408399                 xor     edi, edi
.text:0040839B                 mov     [esp+0Ch], edi
.text:0040839F                 mov     [esp+4], ecx
.text:004083A3                 mov     [esp], edx
.text:004083A6                 call    sub_40CDA0
.text:004083AB                 mov     ebx, [esp+8D4h]
.text:004083B2                 mov     [ebx+28h], eax
.text:004083B5                 mov     [ebx+2Ch], edx
.text:004083B8                 mov     ecx, [esp+4Ch]
.text:004083BC                 mov     [esp+8], esi
.text:004083C0                 mov     edx, [esp+48h]
.text:004083C4                 mov     [esp+0Ch], edi
.text:004083C8                 mov     [esp+4], ecx
.text:004083CC                 mov     [esp], edx
.text:004083CF                 call    sub_40CDA0
.text:004083D4                 mov     ebx, [esp+8D4h]
.text:004083DB                 mov     [ebx+30h], eax
.text:004083DE                 mov     [ebx+34h], edx
.text:004083E1                 mov     ecx, [esp+3Ch]
.text:004083E5                 mov     [esp+8], esi
.text:004083E9                 mov     edx, [esp+38h]
.text:004083ED                 mov     [esp+0Ch], edi
.text:004083F1                 mov     [esp+4], ecx
.text:004083F5                 mov     [esp], edx
.text:004083F8                 call    sub_40CDA0
.text:004083FD                 mov     edx, [esp+8D4h]
.text:00408404                 lea     ecx, [esp+0B0h]
.text:0040840B                 mov     [edx+38h], eax
.text:0040840E                 mov     esi, [esp+58h]
.text:00408412                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00408419                 mov     [edx+110h], esi
.text:0040841F                 mov     esi, edx
.text:00408421                 add     esi, 4Ch ; 'L'
.text:00408424                 movzx   ebx, word ptr [esp+56h]
.text:00408429                 movzx   edi, word ptr [esp+54h]
.text:0040842E                 mov     [edx+3Ch], ebx
.text:00408431                 lea     ebx, [esp+4B0h]
.text:00408438                 mov     [edx+40h], edi
.text:0040843B                 mov     [esp+4], ecx
.text:0040843F                 mov     dword ptr [esp+8], 10h
.text:00408447                 mov     [esp], esi
.text:0040844A                 call    strncpy
.text:0040844F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00408457                 mov     edi, [esp+8D4h]
.text:0040845E                 mov     [esp+4], ebx
.text:00408462                 add     edi, 5Ch ; '\'
.text:00408465                 mov     [esp], edi
.text:00408468                 call    strncpy
.text:0040846D                 mov     [esp+4], ebp
.text:00408471                 mov     ebp, [esp+8D4h]
.text:00408478                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00408480                 add     ebp, 0B6h ; '¶'
.text:00408486                 mov     [esp], ebp
.text:00408489                 call    strncpy
.text:0040848E                 xor     eax, eax
.text:00408490
.text:00408490 loc_408490:                             ; CODE XREF: .text:004085CC↓j
.text:00408490                 add     esp, 8BCh
.text:00408496                 pop     ebx
.text:00408497                 pop     esi
.text:00408498                 pop     edi
.text:00408499                 pop     ebp
.text:0040849A                 retn
.text:0040849A ; ---------------------------------------------------------------------------
.text:0040849B                 align 10h
.text:004084A0
.text:004084A0 loc_4084A0:                             ; CODE XREF: .text:004082E4↑j
.text:004084A0                 mov     dword ptr [esp+4], 40803Dh
.text:004084A8                 lea     eax, [esp+0B0h]
.text:004084AF                 mov     [esp], eax
.text:004084B2                 call    _stricmp
.text:004084B7                 test    eax, eax
.text:004084B9                 jnz     short loc_4084CD
.text:004084BB                 mov     edx, [esp+8D4h]
.text:004084C2                 mov     dword ptr [edx], 4008h
.text:004084C8                 jmp     loc_4082F7
.text:004084CD ; ---------------------------------------------------------------------------
.text:004084CD
.text:004084CD loc_4084CD:                             ; CODE XREF: .text:004084B9↑j
.text:004084CD                 mov     dword ptr [esp+4], 408043h
.text:004084D5                 lea     ecx, [esp+0B0h]
.text:004084DC                 mov     [esp], ecx
.text:004084DF                 call    _stricmp
.text:004084E4                 test    eax, eax
.text:004084E6                 jnz     short loc_4084FA
.text:004084E8                 mov     ebx, [esp+8D4h]
.text:004084EF                 mov     dword ptr [ebx], 4006h
.text:004084F5                 jmp     loc_4082F7
.text:004084FA ; ---------------------------------------------------------------------------
.text:004084FA
.text:004084FA loc_4084FA:                             ; CODE XREF: .text:004084E6↑j
.text:004084FA                 mov     dword ptr [esp+4], 408047h
.text:00408502                 lea     eax, [esp+0B0h]
.text:00408509                 mov     [esp], eax
.text:0040850C                 call    _stricmp
.text:00408511                 test    eax, eax
.text:00408513                 mov     esi, [esp+8D4h]
.text:0040851A                 setnz   cl
.text:0040851D                 movzx   edx, cl
.text:00408520                 dec     edx
.text:00408521                 and     edx, 4000h
.text:00408527                 mov     [esi], edx
.text:00408529                 jmp     loc_4082F7
.text:00408529 ; ---------------------------------------------------------------------------
.text:0040852E                 align 10h
.text:00408530
.text:00408530 loc_408530:                             ; CODE XREF: .text:0040824A↑j
.text:00408530                 mov     edi, [esp+84h]
.text:00408537                 mov     eax, 1
.text:0040853C                 mov     edx, [esp+88h]
.text:00408543                 mov     ecx, [esp+8Ch]
.text:0040854A                 mov     ebx, [esp+90h]
.text:00408551                 mov     [esp+34h], edi
.text:00408555                 mov     [esp+30h], edx
.text:00408559                 mov     [esp+2Ch], ecx
.text:0040855D                 mov     [esi], ebx
.text:0040855F                 jmp     loc_408260
.text:00408564 ; ---------------------------------------------------------------------------
.text:00408564
.text:00408564 loc_408564:                             ; CODE XREF: .text:00408176↑j
.text:00408564                 mov     [esp+10h], esi
.text:00408568                 lea     eax, [esp+2Ch]
.text:0040856C                 lea     esi, [esp+30h]
.text:00408570                 mov     [esp+0Ch], eax
.text:00408574                 lea     edi, [esp+34h]
.text:00408578                 mov     [esp+8], esi
.text:0040857C                 mov     [esp+4], edi
.text:00408580
.text:00408580 loc_408580:                             ; CODE XREF: .text:004085AC↓j
.text:00408580                 mov     [esp], ebp
.text:00408583                 call    GetDiskFreeSpaceA
.text:00408588                 sub     esp, 14h
.text:0040858B                 jmp     loc_408260
.text:00408590 ; ---------------------------------------------------------------------------
.text:00408590
.text:00408590 loc_408590:                             ; CODE XREF: .text:0040815F↑j
.text:00408590                 mov     [esp+10h], esi
.text:00408594                 lea     ebx, [esp+2Ch]
.text:00408598                 lea     eax, [esp+30h]
.text:0040859C                 mov     [esp+0Ch], ebx
.text:004085A0                 lea     esi, [esp+34h]
.text:004085A4                 mov     [esp+8], eax
.text:004085A8                 mov     [esp+4], esi
.text:004085AC                 jmp     short loc_408580
.text:004085AE ; ---------------------------------------------------------------------------
.text:004085AE
.text:004085AE loc_4085AE:                             ; CODE XREF: .text:00408117↑j
.text:004085AE                 mov     [esp], edi
.text:004085B1                 call    FreeLibrary
.text:004085B6                 sub     esp, 4
.text:004085B9                 call    sub_408E10
.text:004085BE                 mov     esi, eax
.text:004085C0                 call    _errno
.text:004085C5                 mov     [eax], esi
.text:004085C7
.text:004085C7 loc_4085C7:                             ; CODE XREF: .text:004085E7↓j
.text:004085C7                 mov     eax, 0FFFFFFFFh
.text:004085CC                 jmp     loc_408490
.text:004085D1 ; ---------------------------------------------------------------------------
.text:004085D1
.text:004085D1 loc_4085D1:                             ; CODE XREF: .text:00408091↑j
.text:004085D1                 mov     [esp], edi
.text:004085D4                 call    FreeLibrary
.text:004085D9                 sub     esp, 4
.text:004085DC                 call    _errno
.text:004085E1                 mov     dword ptr [eax], 2
.text:004085E7                 jmp     short loc_4085C7
.text:004085E7 ; ---------------------------------------------------------------------------
.text:004085E9                 align 10h
.text:004085F0
.text:004085F0 ; =============== S U B R O U T I N E =======================================
.text:004085F0
.text:004085F0
.text:004085F0 ; int __cdecl sub_4085F0(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:004085F0 sub_4085F0      proc near               ; CODE XREF: sub_405D80+2C7↑p
.text:004085F0                                         ; .text:004063BA↑p
.text:004085F0
.text:004085F0 lpFileName      = dword ptr -9Ch
.text:004085F0 dwDesiredAccess = dword ptr -98h
.text:004085F0 dwShareMode     = dword ptr -94h
.text:004085F0 lpSecurityAttributes= dword ptr -90h
.text:004085F0 dwCreationDisposition= dword ptr -8Ch
.text:004085F0 dwFlagsAndAttributes= dword ptr -88h
.text:004085F0 hTemplateFile   = dword ptr -84h
.text:004085F0 lpOverlapped    = dword ptr -80h
.text:004085F0 BytesReturned   = dword ptr -70h
.text:004085F0 InBuffer        = byte ptr -6Ch
.text:004085F0 var_68          = dword ptr -68h
.text:004085F0 var_64          = dword ptr -64h
.text:004085F0 var_60          = dword ptr -60h
.text:004085F0 var_5C          = dword ptr -5Ch
.text:004085F0 var_54          = dword ptr -54h
.text:004085F0 var_4C          = byte ptr -4Ch
.text:004085F0 var_48          = dword ptr -48h
.text:004085F0 var_44          = dword ptr -44h
.text:004085F0 var_40          = dword ptr -40h
.text:004085F0 var_3C          = dword ptr -3Ch
.text:004085F0 lpRootPathName  = dword ptr -2Ch
.text:004085F0 lpSectorsPerCluster= dword ptr -28h
.text:004085F0 lpBytesPerSector= dword ptr -24h
.text:004085F0 lpNumberOfFreeClusters= dword ptr -20h
.text:004085F0 lpTotalNumberOfClusters= dword ptr -1Ch
.text:004085F0 var_18          = dword ptr -18h
.text:004085F0 var_14          = dword ptr -14h
.text:004085F0 var_10          = dword ptr -10h
.text:004085F0 var_C           = dword ptr -0Ch
.text:004085F0 var_8           = dword ptr -8
.text:004085F0 var_4           = dword ptr -4
.text:004085F0 arg_0           = dword ptr  4
.text:004085F0 arg_4           = dword ptr  8
.text:004085F0 arg_8           = dword ptr  0Ch
.text:004085F0 arg_C           = dword ptr  10h
.text:004085F0 arg_10          = dword ptr  14h
.text:004085F0
.text:004085F0                 sub     esp, 2Ch
.text:004085F3                 mov     edx, [esp+2Ch+arg_0]
.text:004085F7                 mov     [esp+2Ch+var_10], ebx
.text:004085FB                 mov     ebx, [esp+2Ch+arg_10]
.text:004085FF                 mov     [esp+2Ch+var_C], esi
.text:00408603                 mov     esi, [esp+2Ch+arg_C]
.text:00408607                 mov     [esp+2Ch+var_8], edi
.text:0040860B                 mov     edi, [esp+2Ch+arg_8]
.text:0040860F                 mov     [esp+2Ch+var_4], ebp
.text:00408613                 mov     ebp, [esp+2Ch+arg_4]
.text:00408617                 mov     [esp+2Ch+var_14], edx
.text:0040861B                 call    sub_4098F0
.text:00408620                 test    eax, eax
.text:00408622                 jz      short loc_408654
.text:00408624                 mov     [esp+2Ch+arg_10], ebx
.text:00408628                 mov     edx, [esp+2Ch+var_14]
.text:0040862C                 mov     ebx, [esp+2Ch+var_10]
.text:00408630                 mov     [esp+2Ch+arg_C], esi
.text:00408634                 mov     esi, [esp+2Ch+var_C]
.text:00408638                 mov     [esp+2Ch+arg_8], edi
.text:0040863C                 mov     edi, [esp+2Ch+var_8]
.text:00408640                 mov     [esp+2Ch+arg_4], ebp
.text:00408644                 mov     ebp, [esp+2Ch+var_4]
.text:00408648                 mov     [esp+2Ch+arg_0], edx
.text:0040864C                 add     esp, 2Ch
.text:0040864F                 jmp     loc_408700
.text:00408654 ; ---------------------------------------------------------------------------
.text:00408654
.text:00408654 loc_408654:                             ; CODE XREF: sub_4085F0+32↑j
.text:00408654                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00408658                 mov     ecx, [esp+2Ch+var_14]
.text:0040865C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00408660                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00408664                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00408668                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040866B                 call    GetDiskFreeSpaceA
.text:00408670                 sub     esp, 14h
.text:00408673                 mov     ebx, [esp+2Ch+var_10]
.text:00408677                 mov     esi, [esp+2Ch+var_C]
.text:0040867B                 mov     edi, [esp+2Ch+var_8]
.text:0040867F                 mov     ebp, [esp+2Ch+var_4]
.text:00408683                 add     esp, 2Ch
.text:00408686                 retn
.text:00408686 ; ---------------------------------------------------------------------------
.text:00408687                 align 10h
.text:00408690
.text:00408690 loc_408690:                             ; CODE XREF: .text:00409C0D↓p
.text:00408690                 sub     esp, 1Ch
.text:00408693                 mov     [esp+1Ch+var_4], esi
.text:00408697                 mov     esi, [esp+1Ch+arg_0]
.text:0040869B                 mov     [esp+1Ch+var_8], ebx
.text:0040869F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:004086A2                 call    sub_407BA0
.text:004086A7                 test    eax, eax
.text:004086A9                 mov     ebx, eax
.text:004086AB                 jz      short loc_4086C0
.text:004086AD                 cmp     byte ptr [eax], 0
.text:004086B0                 jz      short loc_4086C0
.text:004086B2                 test    esi, esi
.text:004086B4                 jz      short loc_4086C0
.text:004086B6                 cmp     byte ptr [esi], 0
.text:004086B9                 jnz     short loc_4086E6
.text:004086BB                 nop
.text:004086BC                 lea     esi, [esi+0]
.text:004086C0
.text:004086C0 loc_4086C0:                             ; CODE XREF: sub_4085F0+BB↑j
.text:004086C0                                         ; sub_4085F0+C0↑j ...
.text:004086C0                 call    _errno
.text:004086C5                 mov     dword ptr [eax], 2
.text:004086CB                 mov     esi, 0FFFFFFFFh
.text:004086D0
.text:004086D0 loc_4086D0:                             ; CODE XREF: sub_4085F0+108↓j
.text:004086D0                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:004086D3                 call    free
.text:004086D8                 mov     eax, esi
.text:004086DA                 mov     ebx, [esp+1Ch+var_8]
.text:004086DE                 mov     esi, [esp+1Ch+var_4]
.text:004086E2                 add     esp, 1Ch
.text:004086E5                 retn
.text:004086E6 ; ---------------------------------------------------------------------------
.text:004086E6
.text:004086E6 loc_4086E6:                             ; CODE XREF: sub_4085F0+C9↑j
.text:004086E6                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:004086E9                 mov     edx, [esp+1Ch+arg_4]
.text:004086ED                 mov     [esp+1Ch+var_18], edx
.text:004086F1                 call    near ptr loc_40804B+5
.text:004086F6                 mov     esi, eax
.text:004086F8                 jmp     short loc_4086D0
.text:004086F8 ; ---------------------------------------------------------------------------
.text:004086FA                 align 10h
.text:00408700
.text:00408700 loc_408700:                             ; CODE XREF: sub_4085F0+5F↑j
.text:00408700                 push    ebp
.text:00408701                 push    edi
.text:00408702                 push    esi
.text:00408703                 push    ebx
.text:00408704                 sub     esp, 8Ch
.text:0040870A                 mov     ebp, [esp+9Ch+arg_0]
.text:00408711                 call    sub_4098F0
.text:00408716                 test    eax, eax
.text:00408718                 jz      short loc_408728
.text:0040871A                 call    sub_409840
.text:0040871F                 cmp     eax, 0Bh
.text:00408722                 jle     loc_408850
.text:00408728
.text:00408728 loc_408728:                             ; CODE XREF: sub_4085F0+128↑j
.text:00408728                 cld
.text:00408729                 xor     eax, eax
.text:0040872B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040872F                 mov     ecx, 7
.text:00408734                 mov     edi, ebx
.text:00408736                 lea     esi, [esp+9Ch+var_4C]
.text:0040873A                 rep stosd
.text:0040873C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00408744                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040874C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00408754                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040875C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00408764                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040876C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00408773                 call    CreateFileA
.text:00408778                 sub     esp, 1Ch
.text:0040877B                 mov     edi, eax
.text:0040877D                 cmp     eax, 0FFFFFFFFh
.text:00408780                 jz      short loc_4087F5
.text:00408782                 mov     [esp+9Ch+var_68], ebp
.text:00408786                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040878A                 mov     [esp+9Ch+var_5C], esi
.text:0040878E                 mov     [esp+9Ch+var_60], 7303h
.text:00408796                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040879E                 mov     [esp+9Ch+var_54], 1
.text:004087A6                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:004087AE                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:004087B2                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:004087BA                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:004087BE                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:004087C6                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:004087CA                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:004087D2                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:004087D5                 call    DeviceIoControl
.text:004087DA                 sub     esp, 20h
.text:004087DD                 mov     esi, eax
.text:004087DF                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:004087E2                 call    CloseHandle
.text:004087E7                 sub     esp, 4
.text:004087EA                 test    esi, esi
.text:004087EC                 jz      short loc_4087F5
.text:004087EE                 test    byte ptr [esp+9Ch+var_54], 1
.text:004087F3                 jz      short loc_408810
.text:004087F5
.text:004087F5 loc_4087F5:                             ; CODE XREF: sub_4085F0+190↑j
.text:004087F5                                         ; sub_4085F0+1FC↑j
.text:004087F5                 call    sub_408E10
.text:004087FA                 mov     edi, eax
.text:004087FC                 call    _errno
.text:00408801                 mov     [eax], edi
.text:00408803                 xor     eax, eax
.text:00408805
.text:00408805 loc_408805:                             ; CODE XREF: sub_4085F0+25A↓j
.text:00408805                                         ; sub_4085F0+297↓j
.text:00408805                 add     esp, 8Ch
.text:0040880B                 pop     ebx
.text:0040880C                 pop     esi
.text:0040880D                 pop     edi
.text:0040880E                 pop     ebp
.text:0040880F                 retn
.text:00408810 ; ---------------------------------------------------------------------------
.text:00408810
.text:00408810 loc_408810:                             ; CODE XREF: sub_4085F0+203↑j
.text:00408810                 mov     edx, [esp+9Ch+var_48]
.text:00408814                 mov     eax, 1
.text:00408819                 mov     ebx, [esp+9Ch+arg_4]
.text:00408820                 mov     ebp, [esp+9Ch+arg_8]
.text:00408827                 mov     ecx, [esp+9Ch+arg_C]
.text:0040882E                 mov     [ebx], edx
.text:00408830                 mov     edi, [esp+9Ch+var_44]
.text:00408834                 mov     ebx, [esp+9Ch+arg_10]
.text:0040883B                 mov     [ebp+0], edi
.text:0040883E                 mov     esi, [esp+9Ch+var_40]
.text:00408842                 mov     [ecx], esi
.text:00408844                 mov     edx, [esp+9Ch+var_3C]
.text:00408848                 mov     [ebx], edx
.text:0040884A                 jmp     short loc_408805
.text:0040884A ; ---------------------------------------------------------------------------
.text:0040884C                 align 10h
.text:00408850
.text:00408850 loc_408850:                             ; CODE XREF: sub_4085F0+132↑j
.text:00408850                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00408853                 mov     eax, [esp+9Ch+arg_C]
.text:0040885A                 mov     ecx, [esp+9Ch+arg_10]
.text:00408861                 mov     edx, [esp+9Ch+arg_8]
.text:00408868                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040886C                 mov     eax, [esp+9Ch+arg_4]
.text:00408873                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00408877                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040887B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040887F                 call    GetDiskFreeSpaceA
.text:00408884                 sub     esp, 14h
.text:00408887                 jmp     loc_408805
.text:00408887 sub_4085F0      endp ; sp-analysis failed
.text:00408887
.text:00408887 ; ---------------------------------------------------------------------------
.text:0040888C                 align 10h
.text:00408890
.text:00408890 ; =============== S U B R O U T I N E =======================================
.text:00408890
.text:00408890
.text:00408890 ; int __cdecl sub_408890(LPCSTR, char *, int)
.text:00408890 sub_408890      proc near               ; CODE XREF: sub_407FE0+1A↑p
.text:00408890                                         ; sub_40AD50+104↓p ...
.text:00408890
.text:00408890 var_13C         = dword ptr -13Ch
.text:00408890 lpString1       = dword ptr -138h
.text:00408890 var_134         = dword ptr -134h
.text:00408890 String1         = byte ptr -12Ch
.text:00408890 var_10          = dword ptr -10h
.text:00408890 var_C           = dword ptr -0Ch
.text:00408890 var_8           = dword ptr -8
.text:00408890 var_4           = dword ptr -4
.text:00408890 arg_0           = dword ptr  4
.text:00408890 arg_4           = dword ptr  8
.text:00408890 arg_8           = dword ptr  0Ch
.text:00408890
.text:00408890                 sub     esp, 13Ch
.text:00408896                 mov     [esp+13Ch+var_10], ebx
.text:0040889D                 mov     ebx, [esp+13Ch+arg_8]
.text:004088A4                 mov     [esp+13Ch+var_C], esi
.text:004088AB                 mov     esi, [esp+13Ch+arg_4]
.text:004088B2                 mov     [esp+13Ch+var_8], edi
.text:004088B9                 mov     edi, [esp+13Ch+arg_0]
.text:004088C0                 mov     [esp+13Ch+var_4], ebp
.text:004088C7                 mov     [esp+13Ch+var_134], ebx ; int
.text:004088CB                 mov     [esp+13Ch+lpString1], esi ; int
.text:004088CF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004088D2                 call    sub_4070E0
.text:004088D7                 cmp     eax, 0FFFFFFFFh
.text:004088DA                 mov     edx, eax
.text:004088DC                 jz      short loc_4088EE
.text:004088DE                 mov     ecx, [ebx]
.text:004088E0                 and     ecx, 0F000h
.text:004088E6                 cmp     ecx, 0A000h
.text:004088EC                 jz      short loc_408913
.text:004088EE
.text:004088EE loc_4088EE:                             ; CODE XREF: sub_408890+4C↑j
.text:004088EE                                         ; sub_408890+A1↓j ...
.text:004088EE                 mov     ebx, [esp+13Ch+var_10]
.text:004088F5                 mov     eax, edx
.text:004088F7                 mov     esi, [esp+13Ch+var_C]
.text:004088FE                 mov     edi, [esp+13Ch+var_8]
.text:00408905                 mov     ebp, [esp+13Ch+var_4]
.text:0040890C                 add     esp, 13Ch
.text:00408912                 retn
.text:00408913 ; ---------------------------------------------------------------------------
.text:00408913
.text:00408913 loc_408913:                             ; CODE XREF: sub_408890+5C↑j
.text:00408913                 mov     [esp+13Ch+var_134], 104h
.text:0040891B                 lea     ebp, [esp+13Ch+String1]
.text:0040891F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00408923                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00408926                 call    sub_40AA30
.text:0040892B                 inc     eax
.text:0040892C                 mov     edx, 0FFFFFFFFh
.text:00408931                 jz      short loc_4088EE
.text:00408933                 mov     [esp+13Ch+var_134], ebx ; int
.text:00408937                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040893B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040893E                 call    sub_4070E0
.text:00408943                 mov     edx, eax
.text:00408945                 jmp     short loc_4088EE
.text:00408945 sub_408890      endp
.text:00408945
.text:00408945 ; ---------------------------------------------------------------------------
.text:00408947                 align 10h
.text:00408950
.text:00408950 ; =============== S U B R O U T I N E =======================================
.text:00408950
.text:00408950
.text:00408950 ; int __cdecl sub_408950(void *)
.text:00408950 sub_408950      proc near               ; CODE XREF: sub_4019A0+1D8↑p
.text:00408950                                         ; sub_4019A0+38F↑p
.text:00408950
.text:00408950 Block           = dword ptr -0Ch
.text:00408950 var_4           = dword ptr -4
.text:00408950 arg_0           = dword ptr  4
.text:00408950
.text:00408950                 sub     esp, 0Ch
.text:00408953                 mov     [esp+0Ch+var_4], ebx
.text:00408957                 mov     ebx, [esp+0Ch+arg_0]
.text:0040895B                 test    ebx, ebx
.text:0040895D                 jz      short loc_40899B
.text:0040895F                 cmp     dword ptr [ebx], 0FFFFFFFFh
.text:00408962                 jz      short loc_408989
.text:00408964                 mov     [esp+0Ch+Block], ebx
.text:00408967                 call    sub_40AB10
.text:0040896C                 mov     edx, [ebx+4]
.text:0040896F                 mov     [esp+0Ch+Block], edx ; Block
.text:00408972                 call    free
.text:00408977                 mov     [esp+0Ch+Block], ebx ; Block
.text:0040897A                 call    free
.text:0040897F                 xor     eax, eax
.text:00408981
.text:00408981 loc_408981:                             ; CODE XREF: sub_408950+49↓j
.text:00408981                 mov     ebx, [esp+0Ch+var_4]
.text:00408985                 add     esp, 0Ch
.text:00408988                 retn
.text:00408989 ; ---------------------------------------------------------------------------
.text:00408989
.text:00408989 loc_408989:                             ; CODE XREF: sub_408950+12↑j
.text:00408989                 call    _errno
.text:0040898E                 mov     dword ptr [eax], 9
.text:00408994
.text:00408994 loc_408994:                             ; CODE XREF: sub_408950+56↓j
.text:00408994                 mov     eax, 0FFFFFFFFh
.text:00408999                 jmp     short loc_408981
.text:0040899B ; ---------------------------------------------------------------------------
.text:0040899B
.text:0040899B loc_40899B:                             ; CODE XREF: sub_408950+D↑j
.text:0040899B                 call    _errno
.text:004089A0                 mov     dword ptr [eax], 16h
.text:004089A6                 jmp     short loc_408994
.text:004089A6 sub_408950      endp
.text:004089A6
.text:004089A6 ; ---------------------------------------------------------------------------
.text:004089A8                 align 10h
.text:004089B0
.text:004089B0 ; =============== S U B R O U T I N E =======================================
.text:004089B0
.text:004089B0
.text:004089B0 ; int __cdecl sub_4089B0(LPCSTR)
.text:004089B0 sub_4089B0      proc near               ; CODE XREF: sub_4019A0+4B9↑p
.text:004089B0
.text:004089B0 lpPathName      = dword ptr -0Ch
.text:004089B0 var_4           = dword ptr -4
.text:004089B0 arg_0           = dword ptr  4
.text:004089B0
.text:004089B0                 sub     esp, 0Ch
.text:004089B3                 mov     eax, [esp+0Ch+arg_0]
.text:004089B7                 mov     [esp+0Ch+var_4], ebx
.text:004089BB                 test    eax, eax
.text:004089BD                 jz      short loc_4089EF
.text:004089BF                 mov     [esp+0Ch+lpPathName], eax ; lpPathName
.text:004089C2                 call    SetCurrentDirectoryA
.text:004089C7                 sub     esp, 4
.text:004089CA                 xor     edx, edx
.text:004089CC                 test    eax, eax
.text:004089CE                 jz      short loc_4089DA
.text:004089D0
.text:004089D0 loc_4089D0:                             ; CODE XREF: sub_4089B0+3D↓j
.text:004089D0                 mov     ebx, [esp+0Ch+var_4]
.text:004089D4                 mov     eax, edx
.text:004089D6                 add     esp, 0Ch
.text:004089D9                 retn
.text:004089DA ; ---------------------------------------------------------------------------
.text:004089DA
.text:004089DA loc_4089DA:                             ; CODE XREF: sub_4089B0+1E↑j
.text:004089DA                 call    sub_408E10
.text:004089DF                 mov     ebx, eax
.text:004089E1                 call    _errno
.text:004089E6                 mov     [eax], ebx
.text:004089E8
.text:004089E8 loc_4089E8:                             ; CODE XREF: sub_4089B0+4A↓j
.text:004089E8                 mov     edx, 0FFFFFFFFh
.text:004089ED                 jmp     short loc_4089D0
.text:004089EF ; ---------------------------------------------------------------------------
.text:004089EF
.text:004089EF loc_4089EF:                             ; CODE XREF: sub_4089B0+D↑j
.text:004089EF                 call    _errno
.text:004089F4                 mov     dword ptr [eax], 16h
.text:004089FA                 jmp     short loc_4089E8
.text:004089FA sub_4089B0      endp
.text:004089FA
.text:004089FA ; ---------------------------------------------------------------------------
.text:004089FC                 align 10h
.text:00408A00 ; const char asc_408A00[2]
.text:00408A00 asc_408A00      db '\',0                ; DATA XREF: sub_408A10+D2↓o
.text:00408A02                 align 10h
.text:00408A10
.text:00408A10 ; =============== S U B R O U T I N E =======================================
.text:00408A10
.text:00408A10
.text:00408A10 ; int __cdecl sub_408A10(LPCSTR)
.text:00408A10 sub_408A10      proc near               ; CODE XREF: sub_4019A0+11↑p
.text:00408A10
.text:00408A10 lpFileName      = dword ptr -13Ch
.text:00408A10 Source          = dword ptr -138h
.text:00408A10 Destination     = byte ptr -12Ch
.text:00408A10 var_10          = dword ptr -10h
.text:00408A10 var_C           = dword ptr -0Ch
.text:00408A10 var_8           = dword ptr -8
.text:00408A10 var_4           = dword ptr -4
.text:00408A10 arg_0           = dword ptr  4
.text:00408A10
.text:00408A10                 sub     esp, 13Ch
.text:00408A16                 mov     [esp+13Ch+var_C], esi
.text:00408A1D                 mov     esi, [esp+13Ch+arg_0]
.text:00408A24                 mov     [esp+13Ch+var_10], ebx
.text:00408A2B                 mov     [esp+13Ch+var_8], edi
.text:00408A32                 test    esi, esi
.text:00408A34                 mov     [esp+13Ch+var_4], ebp
.text:00408A3B                 jz      short loc_408A42
.text:00408A3D                 cmp     byte ptr [esi], 0
.text:00408A40                 jnz     short loc_408A72
.text:00408A42
.text:00408A42 loc_408A42:                             ; CODE XREF: sub_408A10+2B↑j
.text:00408A42                 call    _errno
.text:00408A47                 mov     dword ptr [eax], 2
.text:00408A4D
.text:00408A4D loc_408A4D:                             ; CODE XREF: sub_408A10+139↓j
.text:00408A4D                                         ; sub_408A10+14C↓j
.text:00408A4D                 xor     eax, eax
.text:00408A4F
.text:00408A4F loc_408A4F:                             ; CODE XREF: sub_408A10+90↓j
.text:00408A4F                                         ; sub_408A10+A4↓j ...
.text:00408A4F                 mov     ebx, [esp+13Ch+var_10]
.text:00408A56                 mov     esi, [esp+13Ch+var_C]
.text:00408A5D                 mov     edi, [esp+13Ch+var_8]
.text:00408A64                 mov     ebp, [esp+13Ch+var_4]
.text:00408A6B                 add     esp, 13Ch
.text:00408A71                 retn
.text:00408A72 ; ---------------------------------------------------------------------------
.text:00408A72
.text:00408A72 loc_408A72:                             ; CODE XREF: sub_408A10+30↑j
.text:00408A72                 mov     [esp+13Ch+lpFileName], esi ; lpFileName
.text:00408A75                 call    GetFileAttributesA
.text:00408A7A                 sub     esp, 4
.text:00408A7D                 cmp     eax, 0FFFFFFFFh
.text:00408A80                 jz      loc_408B4E
.text:00408A86                 test    al, 10h
.text:00408A88                 jz      loc_408B3E
.text:00408A8E                 mov     [esp+13Ch+lpFileName], 18h ; Size
.text:00408A95                 call    malloc
.text:00408A9A                 mov     ebx, eax
.text:00408A9C                 xor     eax, eax
.text:00408A9E                 test    ebx, ebx
.text:00408AA0                 jz      short loc_408A4F
.text:00408AA2                 mov     [esp+13Ch+lpFileName], 118h ; Size
.text:00408AA9                 call    malloc
.text:00408AAE                 mov     edi, eax
.text:00408AB0                 xor     eax, eax
.text:00408AB2                 test    edi, edi
.text:00408AB4                 jz      short loc_408A4F
.text:00408AB6                 mov     [esp+13Ch+Source], esi ; Source
.text:00408ABA                 lea     ebp, [esp+13Ch+Destination]
.text:00408ABE                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:00408AC1                 call    strcpy
.text:00408AC6                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:00408AC9                 call    strlen
.text:00408ACE                 cmp     byte ptr [eax+esi], 2Fh ; '/'
.text:00408AD2                 jz      short loc_408B00
.text:00408AD4                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:00408AD7                 call    strlen
.text:00408ADC                 cmp     byte ptr [eax+esi], 5Ch ; '\'
.text:00408AE0                 jz      short loc_408B00
.text:00408AE2                 mov     [esp+13Ch+Source], offset asc_408A00 ; "\\"
.text:00408AEA                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:00408AED                 call    strcat
.text:00408AF2                 lea     esi, [esi+0]
.text:00408AF9                 lea     edi, [edi+0]
.text:00408B00
.text:00408B00 loc_408B00:                             ; CODE XREF: sub_408A10+C2↑j
.text:00408B00                                         ; sub_408A10+D0↑j
.text:00408B00                 mov     [esp+13Ch+lpFileName], esi ; LPCSTR
.text:00408B03                 call    sub_408E60
.text:00408B08                 mov     [esp+13Ch+lpFileName], eax
.text:00408B0B                 call    sub_407580
.text:00408B10                 mov     [edi], eax
.text:00408B12                 mov     eax, ebx
.text:00408B14                 mov     [ebx+4], edi
.text:00408B17                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:00408B1D                 mov     dword ptr [ebx+8], 118h
.text:00408B24                 mov     dword ptr [ebx+0Ch], 118h
.text:00408B2B                 mov     dword ptr [ebx+10h], 8
.text:00408B32                 mov     dword ptr [ebx+14h], 1
.text:00408B39                 jmp     loc_408A4F
.text:00408B3E ; ---------------------------------------------------------------------------
.text:00408B3E
.text:00408B3E loc_408B3E:                             ; CODE XREF: sub_408A10+78↑j
.text:00408B3E                 call    _errno
.text:00408B43                 mov     dword ptr [eax], 14h
.text:00408B49                 jmp     loc_408A4D
.text:00408B4E ; ---------------------------------------------------------------------------
.text:00408B4E
.text:00408B4E loc_408B4E:                             ; CODE XREF: sub_408A10+70↑j
.text:00408B4E                 call    sub_408E10
.text:00408B53                 mov     esi, eax
.text:00408B55                 call    _errno
.text:00408B5A                 mov     [eax], esi
.text:00408B5C                 jmp     loc_408A4D
.text:00408B5C sub_408A10      endp
.text:00408B5C
.text:00408B5C ; ---------------------------------------------------------------------------
.text:00408B61                 align 10h
.text:00408B70
.text:00408B70 ; =============== S U B R O U T I N E =======================================
.text:00408B70
.text:00408B70 ; Attributes: thunk
.text:00408B70
.text:00408B70 ; char *__cdecl j__getcwd(char *DstBuf, int SizeInBytes)
.text:00408B70 j__getcwd       proc near               ; CODE XREF: sub_402F70+16↑p
.text:00408B70
.text:00408B70 DstBuf          = dword ptr  4
.text:00408B70 SizeInBytes     = dword ptr  8
.text:00408B70
.text:00408B70                 jmp     _getcwd
.text:00408B70 j__getcwd       endp
.text:00408B70
.text:00408B70 ; ---------------------------------------------------------------------------
.text:00408B75                 align 10h
.text:00408B80
.text:00408B80 ; =============== S U B R O U T I N E =======================================
.text:00408B80
.text:00408B80 ; Attributes: info_from_lumina
.text:00408B80
.text:00408B80 ___get_errno    proc near               ; CODE XREF: sub_408E10+B↓p
.text:00408B80
.text:00408B80 arg_0           = dword ptr  4
.text:00408B80
.text:00408B80                 mov     eax, [esp+arg_0]
.text:00408B84                 cmp     eax, 53h ; 'S'
.text:00408B87                 jg      loc_408C80
.text:00408B8D                 cmp     eax, 52h ; 'R'
.text:00408B90                 jge     short loc_408BE2
.text:00408B92                 cmp     eax, 0Fh
.text:00408B95                 jz      short loc_408BB0
.text:00408B97                 cmp     eax, 0Fh
.text:00408B9A                 jg      short loc_408C10
.text:00408B9C                 cmp     eax, 9
.text:00408B9F                 jg      short loc_408BF0
.text:00408BA1                 cmp     eax, 7
.text:00408BA4                 jge     short loc_408BE9
.text:00408BA6                 cmp     eax, 3
.text:00408BA9                 jg      short loc_408BCA
.text:00408BAB                 cmp     eax, 2
.text:00408BAE                 jl      short loc_408BC3
.text:00408BB0
.text:00408BB0 loc_408BB0:                             ; CODE XREF: ___get_errno+15↑j
.text:00408BB0                                         ; ___get_errno+9D↓j ...
.text:00408BB0                 mov     edx, 2
.text:00408BB5                 lea     esi, [esi+0]
.text:00408BB9                 lea     edi, [edi+0]
.text:00408BC0
.text:00408BC0 loc_408BC0:                             ; CODE XREF: ___get_errno+48↓j
.text:00408BC0                                         ; ___get_errno+59↓j ...
.text:00408BC0                 mov     eax, edx
.text:00408BC2                 retn
.text:00408BC3 ; ---------------------------------------------------------------------------
.text:00408BC3
.text:00408BC3 loc_408BC3:                             ; CODE XREF: ___get_errno+2E↑j
.text:00408BC3                                         ; ___get_errno+78↓j ...
.text:00408BC3                 mov     edx, 16h
.text:00408BC8                 jmp     short loc_408BC0
.text:00408BCA ; ---------------------------------------------------------------------------
.text:00408BCA
.text:00408BCA loc_408BCA:                             ; CODE XREF: ___get_errno+29↑j
.text:00408BCA                 cmp     eax, 5
.text:00408BCD                 jz      short loc_408BE2
.text:00408BCF                 cmp     eax, 5
.text:00408BD2                 jg      short loc_408BDB
.text:00408BD4                 mov     edx, 18h
.text:00408BD9                 jmp     short loc_408BC0
.text:00408BDB ; ---------------------------------------------------------------------------
.text:00408BDB
.text:00408BDB loc_408BDB:                             ; CODE XREF: ___get_errno+52↑j
.text:00408BDB                                         ; ___get_errno+180↓j
.text:00408BDB                 mov     edx, 9
.text:00408BE0                 jmp     short loc_408BC0
.text:00408BE2 ; ---------------------------------------------------------------------------
.text:00408BE2
.text:00408BE2 loc_408BE2:                             ; CODE XREF: ___get_errno+10↑j
.text:00408BE2                                         ; ___get_errno+4D↑j ...
.text:00408BE2                 mov     edx, 0Dh
.text:00408BE7                 jmp     short loc_408BC0
.text:00408BE9 ; ---------------------------------------------------------------------------
.text:00408BE9
.text:00408BE9 loc_408BE9:                             ; CODE XREF: ___get_errno+24↑j
.text:00408BE9                                         ; ___get_errno+73↓j ...
.text:00408BE9                 mov     edx, 0Ch
.text:00408BEE                 jmp     short loc_408BC0
.text:00408BF0 ; ---------------------------------------------------------------------------
.text:00408BF0
.text:00408BF0 loc_408BF0:                             ; CODE XREF: ___get_errno+1F↑j
.text:00408BF0                 cmp     eax, 0Dh
.text:00408BF3                 jg      short loc_408BE9
.text:00408BF5                 cmp     eax, 0Ch
.text:00408BF8                 jge     short loc_408BC3
.text:00408BFA                 cmp     eax, 0Ah
.text:00408BFD                 mov     edx, 7
.text:00408C02                 jz      short loc_408BC0
.text:00408C04                 cmp     eax, 0Bh
.text:00408C07                 jnz     short loc_408BC3
.text:00408C09
.text:00408C09 loc_408C09:                             ; CODE XREF: ___get_errno+21A↓j
.text:00408C09                 mov     edx, 8
.text:00408C0E                 jmp     short loc_408BC0
.text:00408C10 ; ---------------------------------------------------------------------------
.text:00408C10
.text:00408C10 loc_408C10:                             ; CODE XREF: ___get_errno+1A↑j
.text:00408C10                 cmp     eax, 22h ; '"'
.text:00408C13                 jg      short loc_408C44
.text:00408C15                 cmp     eax, 16h
.text:00408C18                 jge     short loc_408BE2
.text:00408C1A                 cmp     eax, 12h
.text:00408C1D                 jz      short loc_408BB0
.text:00408C1F                 cmp     eax, 12h
.text:00408C22                 jg      short loc_408C35
.text:00408C24                 cmp     eax, 10h
.text:00408C27                 jz      short loc_408BE2
.text:00408C29                 mov     edx, 12h
.text:00408C2E                 cmp     eax, 11h
.text:00408C31
.text:00408C31 loc_408C31:                             ; CODE XREF: ___get_errno+172↓j
.text:00408C31                                         ; ___get_errno+24C↓j ...
.text:00408C31                 jnz     short loc_408BC3
.text:00408C33                 jmp     short loc_408BC0
.text:00408C35 ; ---------------------------------------------------------------------------
.text:00408C35
.text:00408C35 loc_408C35:                             ; CODE XREF: ___get_errno+A2↑j
.text:00408C35                 cmp     eax, 14h
.text:00408C38                 jle     short loc_408BE2
.text:00408C3A
.text:00408C3A loc_408C3A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00408C3A                 mov     edx, 10h
.text:00408C3F                 jmp     loc_408BC0
.text:00408C44 ; ---------------------------------------------------------------------------
.text:00408C44
.text:00408C44 loc_408C44:                             ; CODE XREF: ___get_errno+93↑j
.text:00408C44                 cmp     eax, 41h ; 'A'
.text:00408C47                 jz      short loc_408BE2
.text:00408C49                 cmp     eax, 41h ; 'A'
.text:00408C4C                 jg      short loc_408C61
.text:00408C4E                 cmp     eax, 24h ; '$'
.text:00408C51                 jz      short loc_408BE2
.text:00408C53                 cmp     eax, 35h ; '5'
.text:00408C56                 jnz     loc_408BC3
.text:00408C5C                 jmp     loc_408BB0
.text:00408C61 ; ---------------------------------------------------------------------------
.text:00408C61
.text:00408C61 loc_408C61:                             ; CODE XREF: ___get_errno+CC↑j
.text:00408C61                 cmp     eax, 43h ; 'C'
.text:00408C64                 jz      loc_408BB0
.text:00408C6A                 cmp     eax, 50h ; 'P'
.text:00408C6D                 jnz     loc_408BC3
.text:00408C73
.text:00408C73 loc_408C73:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00408C73                 mov     edx, 11h
.text:00408C78                 jmp     loc_408BC0
.text:00408C78 ; ---------------------------------------------------------------------------
.text:00408C7D                 align 10h
.text:00408C80
.text:00408C80 loc_408C80:                             ; CODE XREF: ___get_errno+7↑j
.text:00408C80                 cmp     eax, 0A1h ; '¡'
.text:00408C85                 jz      loc_408BB0
.text:00408C8B                 cmp     eax, 0A1h ; '¡'
.text:00408C90                 jg      loc_408D40
.text:00408C96                 cmp     eax, 81h
.text:00408C9B                 jg      short loc_408D05
.text:00408C9D                 cmp     eax, 80h ; '€'
.text:00408CA2                 mov     edx, 0Ah
.text:00408CA7                 jge     loc_408BC0
.text:00408CAD                 cmp     eax, 6Ch ; 'l'
.text:00408CB0                 jz      loc_408BE2
.text:00408CB6                 cmp     eax, 6Ch ; 'l'
.text:00408CB9                 jg      short loc_408CD7
.text:00408CBB                 cmp     eax, 57h ; 'W'
.text:00408CBE                 jz      loc_408BC3
.text:00408CC4                 cmp     eax, 59h ; 'Y'
.text:00408CC7                 jnz     loc_408BC3
.text:00408CCD
.text:00408CCD loc_408CCD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00408CCD                                         ; ___get_errno+23C↓j
.text:00408CCD                 mov     edx, 0Bh
.text:00408CD2                 jmp     loc_408BC0
.text:00408CD7 ; ---------------------------------------------------------------------------
.text:00408CD7
.text:00408CD7 loc_408CD7:                             ; CODE XREF: ___get_errno+139↑j
.text:00408CD7                 cmp     eax, 70h ; 'p'
.text:00408CDA                 mov     edx, 1Ch
.text:00408CDF                 jz      loc_408BC0
.text:00408CE5                 cmp     eax, 70h ; 'p'
.text:00408CE8                 jg      short loc_408CF7
.text:00408CEA                 mov     edx, 20h ; ' '
.text:00408CEF                 cmp     eax, 6Dh ; 'm'
.text:00408CF2                 jmp     loc_408C31
.text:00408CF7 ; ---------------------------------------------------------------------------
.text:00408CF7
.text:00408CF7 loc_408CF7:                             ; CODE XREF: ___get_errno+168↑j
.text:00408CF7                 cmp     eax, 72h ; 'r'
.text:00408CFA
.text:00408CFA loc_408CFA:                             ; CODE XREF: ___get_errno+19C↓j
.text:00408CFA                 jnz     loc_408BC3
.text:00408D00                 jmp     loc_408BDB
.text:00408D05 ; ---------------------------------------------------------------------------
.text:00408D05
.text:00408D05 loc_408D05:                             ; CODE XREF: ___get_errno+11B↑j
.text:00408D05                 cmp     eax, 84h ; '„'
.text:00408D0A                 jz      loc_408BE2
.text:00408D10                 cmp     eax, 84h ; '„'
.text:00408D15                 jg      short loc_408D1E
.text:00408D17                 cmp     eax, 82h ; '‚'
.text:00408D1C                 jmp     short loc_408CFA
.text:00408D1E ; ---------------------------------------------------------------------------
.text:00408D1E
.text:00408D1E loc_408D1E:                             ; CODE XREF: ___get_errno+195↑j
.text:00408D1E                 cmp     eax, 91h ; '‘'
.text:00408D23                 mov     edx, 29h ; ')'
.text:00408D28                 jz      loc_408BC0
.text:00408D2E                 cmp     eax, 9Eh ; 'ž'
.text:00408D33
.text:00408D33 loc_408D33:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00408D33                 jnz     loc_408BC3
.text:00408D39                 jmp     loc_408BE2
.text:00408D39 ; ---------------------------------------------------------------------------
.text:00408D3E                 align 10h
.text:00408D40
.text:00408D40 loc_408D40:                             ; CODE XREF: ___get_errno+110↑j
.text:00408D40                 cmp     eax, 0CEh ; 'Î'
.text:00408D45                 jz      loc_408BB0
.text:00408D4B                 cmp     eax, 0CEh ; 'Î'
.text:00408D50                 jg      short loc_408DA0
.text:00408D52                 cmp     eax, 0AAh ; 'ª'
.text:00408D57                 jz      loc_408C3A
.text:00408D5D                 cmp     eax, 0AAh ; 'ª'
.text:00408D62                 jg      short loc_408D76
.text:00408D64                 cmp     eax, 0A4h ; '¤'
.text:00408D69                 jz      loc_408CCD
.text:00408D6F                 cmp     eax, 0A7h ; '§'
.text:00408D74                 jmp     short loc_408D33
.text:00408D76 ; ---------------------------------------------------------------------------
.text:00408D76
.text:00408D76 loc_408D76:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00408D76                 cmp     eax, 0B7h ; '·'
.text:00408D7B                 jz      loc_408C73
.text:00408D81                 cmp     eax, 0B7h ; '·'
.text:00408D86                 jl      loc_408BC3
.text:00408D8C                 sub     eax, 0BCh ; '¼'
.text:00408D91                 cmp     eax, 0Eh
.text:00408D94                 ja      loc_408BC3
.text:00408D9A                 jmp     loc_408C09
.text:00408D9A ; ---------------------------------------------------------------------------
.text:00408D9F                 align 10h
.text:00408DA0
.text:00408DA0 loc_408DA0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00408DA0                 cmp     eax, 46Bh
.text:00408DA5                 mov     edx, 24h ; '$'
.text:00408DAA                 jz      loc_408BC0
.text:00408DB0                 cmp     eax, 46Bh
.text:00408DB5                 jg      short loc_408DD1
.text:00408DB7                 cmp     eax, 0D7h ; '×'
.text:00408DBC                 jz      loc_408CCD
.text:00408DC2                 mov     edx, 5
.text:00408DC7                 cmp     eax, 45Dh
.text:00408DCC                 jmp     loc_408C31
.text:00408DD1 ; ---------------------------------------------------------------------------
.text:00408DD1
.text:00408DD1 loc_408DD1:                             ; CODE XREF: ___get_errno+235↑j
.text:00408DD1                 cmp     eax, 4D5h
.text:00408DD6                 mov     edx, 4
.text:00408DDB                 jz      loc_408BC0
.text:00408DE1                 cmp     eax, 4D5h
.text:00408DE6                 jg      short loc_408DF7
.text:00408DE8                 mov     edx, 13h
.text:00408DED                 cmp     eax, 4B0h
.text:00408DF2                 jmp     loc_408C31
.text:00408DF7 ; ---------------------------------------------------------------------------
.text:00408DF7
.text:00408DF7 loc_408DF7:                             ; CODE XREF: ___get_errno+266↑j
.text:00408DF7                 cmp     eax, 718h
.text:00408DFC                 jnz     loc_408BC3
.text:00408E02                 jmp     loc_408BE9
.text:00408E02 ___get_errno    endp
.text:00408E02
.text:00408E02 ; ---------------------------------------------------------------------------
.text:00408E07                 align 10h
.text:00408E10
.text:00408E10 ; =============== S U B R O U T I N E =======================================
.text:00408E10
.text:00408E10
.text:00408E10 sub_408E10      proc near               ; CODE XREF: sub_4070E0:loc_40707D↑p
.text:00408E10                                         ; sub_4076A0:loc_407708↑p ...
.text:00408E10
.text:00408E10 var_C           = dword ptr -0Ch
.text:00408E10
.text:00408E10                 sub     esp, 0Ch
.text:00408E13                 call    GetLastError
.text:00408E18                 mov     [esp+0Ch+var_C], eax
.text:00408E1B                 call    ___get_errno
.text:00408E20                 add     esp, 0Ch
.text:00408E23                 retn
.text:00408E23 sub_408E10      endp
.text:00408E23
.text:00408E23 ; ---------------------------------------------------------------------------
.text:00408E24                 align 10h
.text:00408E30
.text:00408E30 ; =============== S U B R O U T I N E =======================================
.text:00408E30
.text:00408E30
.text:00408E30 sub_408E30      proc near               ; CODE XREF: .text:00407613↑p
.text:00408E30                                         ; .text:00407663↑p
.text:00408E30
.text:00408E30 arg_4           = dword ptr  8
.text:00408E30
.text:00408E30                 sub     esp, 0Ch
.text:00408E33                 mov     edx, [esp+0Ch+arg_4]
.text:00408E37                 test    edx, edx
.text:00408E39                 jz      short loc_408E40
.text:00408E3B                 add     esp, 0Ch
.text:00408E3E                 jmp     short sub_408E80
.text:00408E40 ; ---------------------------------------------------------------------------
.text:00408E40
.text:00408E40 loc_408E40:                             ; CODE XREF: sub_408E30+9↑j
.text:00408E40                 call    _errno
.text:00408E45                 mov     dword ptr [eax], 16h
.text:00408E4B                 xor     eax, eax
.text:00408E4D                 add     esp, 0Ch
.text:00408E50                 retn
.text:00408E50 sub_408E30      endp
.text:00408E50
.text:00408E51 ; ---------------------------------------------------------------------------
.text:00408E51                 jmp     short sub_408E60
.text:00408E51 ; ---------------------------------------------------------------------------
.text:00408E53                 align 10h
.text:00408E60
.text:00408E60 ; =============== S U B R O U T I N E =======================================
.text:00408E60
.text:00408E60
.text:00408E60 ; int __cdecl sub_408E60(LPCSTR)
.text:00408E60 sub_408E60      proc near               ; CODE XREF: sub_4070E0-10C↑p
.text:00408E60                                         ; .text:00407808↑p ...
.text:00408E60
.text:00408E60 lpFileName      = dword ptr -0Ch
.text:00408E60 Destination     = dword ptr -8
.text:00408E60 arg_0           = dword ptr  4
.text:00408E60
.text:00408E60                 sub     esp, 0Ch
.text:00408E63                 mov     edx, [esp+0Ch+arg_0]
.text:00408E67                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:00408E6F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:00408E72                 call    sub_408E80
.text:00408E77                 add     esp, 0Ch
.text:00408E7A                 retn
.text:00408E7A sub_408E60      endp
.text:00408E7A
.text:00408E7A ; ---------------------------------------------------------------------------
.text:00408E7B                 align 10h
.text:00408E80
.text:00408E80 ; =============== S U B R O U T I N E =======================================
.text:00408E80
.text:00408E80
.text:00408E80 ; int __cdecl sub_408E80(LPCSTR lpFileName, char *Destination)
.text:00408E80 sub_408E80      proc near               ; CODE XREF: sub_408E30+E↑j
.text:00408E80                                         ; sub_408E60+12↑p
.text:00408E80
.text:00408E80 Size            = dword ptr -2Ch
.text:00408E80 nBufferLength   = dword ptr -28h
.text:00408E80 lpBuffer        = dword ptr -24h
.text:00408E80 lpFilePart      = dword ptr -20h
.text:00408E80 FilePart        = dword ptr -14h
.text:00408E80 lpFileName      = dword ptr  4
.text:00408E80 Destination     = dword ptr  8
.text:00408E80
.text:00408E80                 push    ebp
.text:00408E81                 push    edi
.text:00408E82                 push    esi
.text:00408E83                 push    ebx
.text:00408E84                 sub     esp, 1Ch
.text:00408E87                 mov     edi, [esp+2Ch+lpFileName]
.text:00408E8B                 mov     ebp, [esp+2Ch+Destination]
.text:00408E8F                 test    edi, edi
.text:00408E91                 jz      loc_408F99
.text:00408E97                 cmp     byte ptr [edi], 0
.text:00408E9A                 jz      loc_408F8C
.text:00408EA0                 mov     [esp+2Ch+Size], 104h ; Size
.text:00408EA7                 call    malloc
.text:00408EAC                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00408EB0                 lea     edx, [esp+2Ch+FilePart]
.text:00408EB4                 mov     ebx, eax
.text:00408EB6                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00408EBA                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:00408EC2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00408EC5                 call    GetFullPathNameA
.text:00408ECA                 sub     esp, 10h
.text:00408ECD                 mov     esi, eax
.text:00408ECF                 test    eax, eax
.text:00408ED1                 jz      loc_408F7A
.text:00408ED7                 cmp     eax, 104h
.text:00408EDC                 jle     short loc_408EED
.text:00408EDE                 test    ebp, ebp
.text:00408EE0                 jz      short loc_408F49
.text:00408EE2                 call    _errno
.text:00408EE7                 mov     dword ptr [eax], 26h ; '&'
.text:00408EED
.text:00408EED loc_408EED:                             ; CODE XREF: sub_408E80+5C↑j
.text:00408EED                                         ; sub_408E80+F5↓j
.text:00408EED                 call    _errno
.text:00408EF2                 mov     edi, [eax]
.text:00408EF4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:00408EFC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:00408EFF                 call    sub_408FB0
.text:00408F04                 test    eax, eax
.text:00408F06                 jnz     short loc_408F20
.text:00408F08                 movzx   eax, byte ptr [esi+ebx-1]
.text:00408F0D                 cmp     al, 2Fh ; '/'
.text:00408F0F                 jz      short loc_408F20
.text:00408F11                 cmp     al, 5Ch ; '\'
.text:00408F13                 jz      short loc_408F20
.text:00408F15                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00408F19                 mov     byte ptr [esi+ebx+1], 0
.text:00408F1E                 mov     esi, esi
.text:00408F20
.text:00408F20 loc_408F20:                             ; CODE XREF: sub_408E80+86↑j
.text:00408F20                                         ; sub_408E80+8F↑j ...
.text:00408F20                 call    _errno
.text:00408F25                 mov     [eax], edi
.text:00408F27                 mov     [esp+2Ch+Size], ebx
.text:00408F2A                 call    sub_407500
.text:00408F2F                 test    ebp, ebp
.text:00408F31                 mov     eax, ebx
.text:00408F33                 jz      short loc_408F41
.text:00408F35                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00408F39                 mov     [esp+2Ch+Size], ebp ; Destination
.text:00408F3C                 call    strcpy
.text:00408F41
.text:00408F41 loc_408F41:                             ; CODE XREF: sub_408E80+B3↑j
.text:00408F41                                         ; sub_408E80+10A↓j
.text:00408F41                 add     esp, 1Ch
.text:00408F44                 pop     ebx
.text:00408F45                 pop     esi
.text:00408F46                 pop     edi
.text:00408F47                 pop     ebp
.text:00408F48                 retn
.text:00408F49 ; ---------------------------------------------------------------------------
.text:00408F49
.text:00408F49 loc_408F49:                             ; CODE XREF: sub_408E80+60↑j
.text:00408F49                 mov     [esp+2Ch+Size], ebx ; Block
.text:00408F4C                 lea     ecx, [eax+2]
.text:00408F4F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00408F53                 call    realloc
.text:00408F58                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00408F5C                 lea     edx, [esp+2Ch+FilePart]
.text:00408F60                 mov     ebx, eax
.text:00408F62                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00408F66                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:00408F6A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00408F6D                 call    GetFullPathNameA
.text:00408F72                 sub     esp, 10h
.text:00408F75                 jmp     loc_408EED
.text:00408F7A ; ---------------------------------------------------------------------------
.text:00408F7A
.text:00408F7A loc_408F7A:                             ; CODE XREF: sub_408E80+51↑j
.text:00408F7A                 call    sub_408E10
.text:00408F7F                 mov     esi, eax
.text:00408F81                 call    _errno
.text:00408F86                 mov     [eax], esi
.text:00408F88
.text:00408F88 loc_408F88:                             ; CODE XREF: sub_408E80+117↓j
.text:00408F88                                         ; sub_408E80+124↓j
.text:00408F88                 xor     eax, eax
.text:00408F8A                 jmp     short loc_408F41
.text:00408F8C ; ---------------------------------------------------------------------------
.text:00408F8C
.text:00408F8C loc_408F8C:                             ; CODE XREF: sub_408E80+1A↑j
.text:00408F8C                 call    _errno
.text:00408F91                 mov     dword ptr [eax], 2
.text:00408F97                 jmp     short loc_408F88
.text:00408F99 ; ---------------------------------------------------------------------------
.text:00408F99
.text:00408F99 loc_408F99:                             ; CODE XREF: sub_408E80+11↑j
.text:00408F99                 call    _errno
.text:00408F9E                 mov     dword ptr [eax], 16h
.text:00408FA4                 jmp     short loc_408F88
.text:00408FA4 sub_408E80      endp
.text:00408FA4
.text:00408FA4 ; ---------------------------------------------------------------------------
.text:00408FA6                 align 10h
.text:00408FB0
.text:00408FB0 ; =============== S U B R O U T I N E =======================================
.text:00408FB0
.text:00408FB0
.text:00408FB0 ; int __cdecl sub_408FB0(LPCSTR lpFileName, int)
.text:00408FB0 sub_408FB0      proc near               ; CODE XREF: sub_4070E0-11D↑p
.text:00408FB0                                         ; .text:004074E2↑p ...
.text:00408FB0
.text:00408FB0 uMode           = dword ptr -1Ch
.text:00408FB0 var_10          = dword ptr -10h
.text:00408FB0 var_C           = dword ptr -0Ch
.text:00408FB0 var_8           = dword ptr -8
.text:00408FB0 var_4           = dword ptr -4
.text:00408FB0 lpFileName      = dword ptr  4
.text:00408FB0 arg_4           = dword ptr  8
.text:00408FB0
.text:00408FB0                 sub     esp, 1Ch
.text:00408FB3                 mov     [esp+1Ch+var_10], ebx
.text:00408FB7                 mov     ebx, [esp+1Ch+lpFileName]
.text:00408FBB                 mov     [esp+1Ch+var_4], ebp
.text:00408FBF                 xor     ebp, ebp
.text:00408FC1                 test    ebx, ebx
.text:00408FC3                 mov     [esp+1Ch+var_C], esi
.text:00408FC7                 mov     esi, [esp+1Ch+arg_4]
.text:00408FCB                 mov     [esp+1Ch+var_8], edi
.text:00408FCF                 jz      short loc_408FD9
.text:00408FD1                 test    esi, 0FFFFFFE8h
.text:00408FD7                 jz      short loc_409000
.text:00408FD9
.text:00408FD9 loc_408FD9:                             ; CODE XREF: sub_408FB0+1F↑j
.text:00408FD9                 call    _errno
.text:00408FDE                 mov     dword ptr [eax], 16h
.text:00408FE4
.text:00408FE4 loc_408FE4:                             ; CODE XREF: sub_408FB0+B1↓j
.text:00408FE4                 mov     eax, 0FFFFFFFFh
.text:00408FE9
.text:00408FE9 loc_408FE9:                             ; CODE XREF: sub_408FB0+86↓j
.text:00408FE9                                         ; sub_408FB0+A4↓j
.text:00408FE9                 mov     ebx, [esp+1Ch+var_10]
.text:00408FED                 mov     esi, [esp+1Ch+var_C]
.text:00408FF1                 mov     edi, [esp+1Ch+var_8]
.text:00408FF5                 mov     ebp, [esp+1Ch+var_4]
.text:00408FF9                 add     esp, 1Ch
.text:00408FFC                 retn
.text:00408FFC ; ---------------------------------------------------------------------------
.text:00408FFD                 align 10h
.text:00409000
.text:00409000 loc_409000:                             ; CODE XREF: sub_408FB0+27↑j
.text:00409000                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00409007                 call    SetErrorMode
.text:0040900C                 sub     esp, 4
.text:0040900F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00409012                 call    GetFileAttributesA
.text:00409017                 sub     esp, 4
.text:0040901A                 mov     edi, eax
.text:0040901C                 cmp     eax, 0FFFFFFFFh
.text:0040901F                 jz      short loc_409063
.text:00409021
.text:00409021 loc_409021:                             ; CODE XREF: sub_408FB0+C6↓j
.text:00409021                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00409028                 call    SetErrorMode
.text:0040902D                 sub     esp, 4
.text:00409030                 mov     eax, 0FFFFFFFFh
.text:00409035                 inc     ebp
.text:00409036                 jz      short loc_408FE9
.text:00409038                 test    esi, 10h
.text:0040903E                 jz      short loc_409048
.text:00409040                 test    edi, 10h
.text:00409046                 jz      short loc_409056
.text:00409048
.text:00409048 loc_409048:                             ; CODE XREF: sub_408FB0+8E↑j
.text:00409048                 and     esi, 2
.text:0040904B                 jz      short loc_409052
.text:0040904D                 and     edi, 1
.text:00409050                 jnz     short loc_409056
.text:00409052
.text:00409052 loc_409052:                             ; CODE XREF: sub_408FB0+9B↑j
.text:00409052                 xor     eax, eax
.text:00409054                 jmp     short loc_408FE9
.text:00409056 ; ---------------------------------------------------------------------------
.text:00409056
.text:00409056 loc_409056:                             ; CODE XREF: sub_408FB0+96↑j
.text:00409056                                         ; sub_408FB0+A0↑j
.text:00409056                 call    _errno
.text:0040905B                 mov     dword ptr [eax], 0Dh
.text:00409061                 jmp     short loc_408FE4
.text:00409063 ; ---------------------------------------------------------------------------
.text:00409063
.text:00409063 loc_409063:                             ; CODE XREF: sub_408FB0+6F↑j
.text:00409063                 call    sub_408E10
.text:00409068                 mov     ebp, eax
.text:0040906A                 call    _errno
.text:0040906F                 mov     [eax], ebp
.text:00409071                 mov     ebp, 0FFFFFFFFh
.text:00409076                 jmp     short loc_409021
.text:00409076 sub_408FB0      endp
.text:00409076
.text:00409076 ; ---------------------------------------------------------------------------
.text:00409078                 align 10h
.text:00409080 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040929F↓o
.text:0040908C aLu             db '%lu',0              ; DATA XREF: .text:004092AF↓o
.text:00409090 asc_409090      db ' ',0                ; DATA XREF: .text:loc_409398↓o
.text:00409092                 align 10h
.text:004090A0 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:004090A0                                         ; DATA XREF: .text:004093CF↓o
.text:004090C0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_4093DD↓o
.text:004090CC aServer         db ' Server',0          ; DATA XREF: .text:00409406↓o
.text:004090CC                                         ; .text:loc_40957E↓o
.text:004090D4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_409418↓o
.text:004090E5 aDatacenterServ db ' Datacenter Server',0
.text:004090E5                                         ; DATA XREF: .text:loc_409422↓o
.text:004090F8 aStandardEditio db ' Standard Edition',0
.text:004090F8                                         ; DATA XREF: .text:0040944A↓o
.text:0040910A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_409454↓o
.text:00409117 aEnterpriseEdit db ' Enterprise Edition',0
.text:00409117                                         ; DATA XREF: .text:loc_40945E↓o
.text:0040912B aDatacenterEdit db ' Datacenter Edition',0
.text:0040912B                                         ; DATA XREF: .text:loc_409468↓o
.text:0040913F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040947B↓o
.text:0040914D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_409485↓o
.text:0040914D                                         ; .text:loc_409590↓o
.text:0040915B                 align 10h
.text:00409160 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00409160                                         ; DATA XREF: .text:004094B2↓o
.text:00409190 aProducttype    db 'ProductType',0      ; DATA XREF: .text:004094F9↓o
.text:0040919C aWinnt          db 'WINNT',0            ; DATA XREF: .text:00409534↓o
.text:004091A2 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040954B↓o
.text:004091AB aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00409562↓o
.text:004091B4                 align 10h
.text:004091C0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:004091C0                                         ; DATA XREF: .text:004096D7↓o
.text:004091E3                 align 20h
.text:00409200 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:00409200                                         ; DATA XREF: .text:00409736↓o
.text:00409226 ; ---------------------------------------------------------------------------
.text:00409226
.text:00409226 loc_409226:                             ; DATA XREF: .text:loc_4097A1↓o
.text:00409226                 and     [ebx+45h], dl
.text:00409229                 add     [eax], ah
.text:0040922B                 push    ebx
.text:0040922C                 push    eax
.text:0040922D                 xor     [eax], eax
.text:0040922F
.text:0040922F loc_40922F:                             ; DATA XREF: .text:loc_40981B↓o
.text:0040922F                 and     [edi+53h], cl
.text:00409232                 push    edx
.text:00409233                 xor     al, [eax]
.text:00409235                 lea     esi, [esi+0]
.text:00409239                 lea     edi, [edi+0]
.text:00409240                 push    edi
.text:00409241                 push    esi
.text:00409242                 push    ebx
.text:00409243                 sub     esp, 130h
.text:00409249                 mov     ebx, [esp+140h]
.text:00409250                 call    sub_409950
.text:00409255                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040925A                 cmp     eax, 1
.text:0040925D                 jz      loc_409700
.text:00409263                 cmp     eax, 1
.text:00409266                 jb      loc_4096D6
.text:0040926C                 cmp     eax, 2
.text:0040926F                 jz      loc_409320
.text:00409275                 cmp     eax, 3
.text:00409278                 jz      short loc_4092DF
.text:0040927A                 lea     esi, [esi+0]
.text:00409280
.text:00409280 loc_409280:                             ; CODE XREF: .text:00409315↓j
.text:00409280                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409286                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040928C
.text:0040928C loc_40928C:                             ; CODE XREF: .text:0040971F↓j
.text:0040928C                 mov     [esp+10h], edx
.text:00409290                 mov     ebx, [esp+144h]
.text:00409297                 mov     [esp+0Ch], ecx
.text:0040929B                 mov     [esp+8], eax
.text:0040929F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:004092A7                 mov     [esp], ebx
.text:004092AA                 call    sprintf
.text:004092AF                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:004092B7                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:004092BD                 mov     ecx, [esp+148h]
.text:004092C4                 mov     [esp+8], edi
.text:004092C8                 mov     [esp], ecx
.text:004092CB                 call    sprintf
.text:004092D0                 mov     eax, 1
.text:004092D5
.text:004092D5 loc_4092D5:                             ; CODE XREF: .text:004094CF↓j
.text:004092D5                                         ; .text:0040951C↓j
.text:004092D5                 add     esp, 130h
.text:004092DB                 pop     ebx
.text:004092DC                 pop     esi
.text:004092DD                 pop     edi
.text:004092DE                 retn
.text:004092DF ; ---------------------------------------------------------------------------
.text:004092DF
.text:004092DF loc_4092DF:                             ; CODE XREF: .text:00409278↑j
.text:004092DF                 mov     dword ptr [ebx], 7263694Dh
.text:004092E5                 mov     dword ptr [ebx+4], 666F736Fh
.text:004092EC                 mov     dword ptr [ebx+8], 69572074h
.text:004092F3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004092FA                 mov     dword ptr [ebx+10h], 45432073h
.text:00409301                 mov     word ptr [ebx+14h], 20h ; ' '
.text:00409307                 mov     esi, esi
.text:00409309                 lea     edi, [edi+0]
.text:00409310
.text:00409310 loc_409310:                             ; CODE XREF: .text:004093B8↓j
.text:00409310                                         ; .text:004096F9↓j ...
.text:00409310                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409315                 jmp     loc_409280
.text:00409315 ; ---------------------------------------------------------------------------
.text:0040931A                 align 10h
.text:00409320
.text:00409320 loc_409320:                             ; CODE XREF: .text:0040926F↑j
.text:00409320                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:00409326                 cmp     edx, 3
.text:00409329                 mov     eax, edx
.text:0040932B                 jz      loc_409695
.text:00409331
.text:00409331 loc_409331:                             ; CODE XREF: .text:0040969C↓j
.text:00409331                 cmp     eax, 4
.text:00409334                 jz      loc_409655
.text:0040933A
.text:0040933A loc_40933A:                             ; CODE XREF: .text:0040965D↓j
.text:0040933A                 cmp     eax, 4
.text:0040933D                 ja      loc_4095A2
.text:00409343                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00409349                 test    ecx, ecx
.text:0040934B                 jnz     loc_4095A2
.text:00409351                 mov     dword ptr [ebx], 7263694Dh
.text:00409357                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040935E                 mov     dword ptr [ebx+8], 69572074h
.text:00409365                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040936C                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409373
.text:00409373 loc_409373:                             ; CODE XREF: .text:00409615↓j
.text:00409373                 mov     byte ptr [ebx+14h], 0
.text:00409377
.text:00409377 loc_409377:                             ; CODE XREF: .text:004095A5↓j
.text:00409377                                         ; .text:004095BC↓j ...
.text:00409377                 mov     esi, dword_40E070
.text:0040937D                 test    esi, esi
.text:0040937F                 jz      loc_409492
.text:00409385                 movzx   eax, ds:byte_40F47A
.text:0040938C                 cmp     al, 1
.text:0040938E                 jz      loc_409472
.text:00409394                 cmp     al, 3
.text:00409396                 jz      short loc_4093BD
.text:00409398
.text:00409398 loc_409398:                             ; CODE XREF: .text:004093DB↓j
.text:00409398                                         ; .text:00409416↓j ...
.text:00409398                 mov     dword ptr [esp+4], offset asc_409090 ; " "
.text:004093A0                 mov     [esp], ebx
.text:004093A3                 call    strcat
.text:004093A8                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:004093B0                 mov     [esp], ebx
.text:004093B3                 call    strcat
.text:004093B8                 jmp     loc_409310
.text:004093BD ; ---------------------------------------------------------------------------
.text:004093BD
.text:004093BD loc_4093BD:                             ; CODE XREF: .text:00409396↑j
.text:004093BD                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:004093C4                 jz      short loc_4093E6
.text:004093C6
.text:004093C6 loc_4093C6:                             ; CODE XREF: .text:004093F2↓j
.text:004093C6                 test    byte ptr ds:word_40F478, 2
.text:004093CD                 jz      short loc_4093DD
.text:004093CF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:004093D6
.text:004093D6 loc_4093D6:                             ; CODE XREF: .text:004093E4↓j
.text:004093D6                 call    printf
.text:004093DB                 jmp     short loc_409398
.text:004093DD ; ---------------------------------------------------------------------------
.text:004093DD
.text:004093DD loc_4093DD:                             ; CODE XREF: .text:004093CD↑j
.text:004093DD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:004093E4                 jmp     short loc_4093D6
.text:004093E6 ; ---------------------------------------------------------------------------
.text:004093E6
.text:004093E6 loc_4093E6:                             ; CODE XREF: .text:004093C4↑j
.text:004093E6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004093EB                 cmp     eax, 2
.text:004093EE                 jz      short loc_409430
.text:004093F0                 test    eax, eax
.text:004093F2                 jnz     short loc_4093C6
.text:004093F4                 cmp     byte ptr ds:word_40F478, 0
.text:004093FB                 js      short loc_409422
.text:004093FD                 test    byte ptr ds:word_40F478, 2
.text:00409404                 jnz     short loc_409418
.text:00409406                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040940E
.text:0040940E loc_40940E:                             ; CODE XREF: .text:00409420↓j
.text:0040940E                                         ; .text:0040942A↓j ...
.text:0040940E                 mov     [esp], ebx
.text:00409411                 call    strcat
.text:00409416                 jmp     short loc_409398
.text:00409418 ; ---------------------------------------------------------------------------
.text:00409418
.text:00409418 loc_409418:                             ; CODE XREF: .text:00409404↑j
.text:00409418                                         ; .text:00409579↓j
.text:00409418                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:00409420                 jmp     short loc_40940E
.text:00409422 ; ---------------------------------------------------------------------------
.text:00409422
.text:00409422 loc_409422:                             ; CODE XREF: .text:004093FB↑j
.text:00409422                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040942A                 jmp     short loc_40940E
.text:0040942A ; ---------------------------------------------------------------------------
.text:0040942C                 align 10h
.text:00409430
.text:00409430 loc_409430:                             ; CODE XREF: .text:004093EE↑j
.text:00409430                 cmp     byte ptr ds:word_40F478, 0
.text:00409437                 js      short loc_409468
.text:00409439                 movzx   eax, ds:word_40F478
.text:00409440                 test    al, 2
.text:00409442                 jnz     short loc_40945E
.text:00409444                 cmp     ax, 400h
.text:00409448                 jz      short loc_409454
.text:0040944A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:00409452                 jmp     short loc_40940E
.text:00409454 ; ---------------------------------------------------------------------------
.text:00409454
.text:00409454 loc_409454:                             ; CODE XREF: .text:00409448↑j
.text:00409454                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040945C                 jmp     short loc_40940E
.text:0040945E ; ---------------------------------------------------------------------------
.text:0040945E
.text:0040945E loc_40945E:                             ; CODE XREF: .text:00409442↑j
.text:0040945E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00409466                 jmp     short loc_40940E
.text:00409468 ; ---------------------------------------------------------------------------
.text:00409468
.text:00409468 loc_409468:                             ; CODE XREF: .text:00409437↑j
.text:00409468                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00409470                 jmp     short loc_40940E
.text:00409472 ; ---------------------------------------------------------------------------
.text:00409472
.text:00409472 loc_409472:                             ; CODE XREF: .text:0040938E↑j
.text:00409472                 test    byte ptr ds:word_40F478+1, 2
.text:00409479                 jz      short loc_409485
.text:0040947B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00409483                 jmp     short loc_40940E
.text:00409485 ; ---------------------------------------------------------------------------
.text:00409485
.text:00409485 loc_409485:                             ; CODE XREF: .text:00409479↑j
.text:00409485                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040948D                 jmp     loc_40940E
.text:00409492 ; ---------------------------------------------------------------------------
.text:00409492
.text:00409492 loc_409492:                             ; CODE XREF: .text:0040937F↑j
.text:00409492                 mov     dword ptr [esp+28h], 0FFh
.text:0040949A                 lea     edx, [esp+2Ch]
.text:0040949E                 mov     [esp+10h], edx
.text:004094A2                 mov     dword ptr [esp+0Ch], 1
.text:004094AA                 mov     dword ptr [esp+8], 0
.text:004094B2                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:004094BA                 mov     dword ptr [esp], 80000002h
.text:004094C1                 call    RegOpenKeyExA
.text:004094C6                 mov     edi, eax
.text:004094C8                 sub     esp, 14h
.text:004094CB                 xor     eax, eax
.text:004094CD                 test    edi, edi
.text:004094CF                 jnz     loc_4092D5
.text:004094D5                 mov     dword ptr [esp+0Ch], 0
.text:004094DD                 mov     edi, [esp+2Ch]
.text:004094E1                 lea     esi, [esp+28h]
.text:004094E5                 mov     [esp+14h], esi
.text:004094E9                 lea     esi, [esp+30h]
.text:004094ED                 mov     [esp+10h], esi
.text:004094F1                 mov     dword ptr [esp+8], 0
.text:004094F9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:00409501                 mov     [esp], edi
.text:00409504                 call    RegQueryValueExA
.text:00409509                 sub     esp, 18h
.text:0040950C                 test    eax, eax
.text:0040950E                 jnz     short loc_40951A
.text:00409510                 cmp     dword ptr [esp+28h], 0FFh
.text:00409518                 jbe     short loc_409521
.text:0040951A
.text:0040951A loc_40951A:                             ; CODE XREF: .text:0040950E↑j
.text:0040951A                 xor     eax, eax
.text:0040951C                 jmp     loc_4092D5
.text:00409521 ; ---------------------------------------------------------------------------
.text:00409521
.text:00409521 loc_409521:                             ; CODE XREF: .text:00409518↑j
.text:00409521                 mov     edx, [esp+2Ch]
.text:00409525                 mov     [esp], edx
.text:00409528                 call    RegCloseKey
.text:0040952D                 sub     esp, 4
.text:00409530                 mov     [esp+4], esi
.text:00409534                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040953B                 call    lstrcmpiA
.text:00409540                 sub     esp, 8
.text:00409543                 test    eax, eax
.text:00409545                 jz      short loc_409590
.text:00409547
.text:00409547 loc_409547:                             ; CODE XREF: .text:004095A0↓j
.text:00409547                 mov     [esp+4], esi
.text:0040954B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:00409552                 call    lstrcmpiA
.text:00409557                 sub     esp, 8
.text:0040955A                 test    eax, eax
.text:0040955C                 jz      short loc_40957E
.text:0040955E
.text:0040955E loc_40955E:                             ; CODE XREF: .text:0040958E↓j
.text:0040955E                 mov     [esp+4], esi
.text:00409562                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00409569                 call    lstrcmpiA
.text:0040956E                 sub     esp, 8
.text:00409571                 test    eax, eax
.text:00409573                 jnz     loc_409398
.text:00409579                 jmp     loc_409418
.text:0040957E ; ---------------------------------------------------------------------------
.text:0040957E
.text:0040957E loc_40957E:                             ; CODE XREF: .text:0040955C↑j
.text:0040957E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00409586                 mov     [esp], ebx
.text:00409589                 call    strcat
.text:0040958E                 jmp     short loc_40955E
.text:00409590 ; ---------------------------------------------------------------------------
.text:00409590
.text:00409590 loc_409590:                             ; CODE XREF: .text:00409545↑j
.text:00409590                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00409598                 mov     [esp], ebx
.text:0040959B                 call    strcat
.text:004095A0                 jmp     short loc_409547
.text:004095A2 ; ---------------------------------------------------------------------------
.text:004095A2
.text:004095A2 loc_4095A2:                             ; CODE XREF: .text:0040933D↑j
.text:004095A2                                         ; .text:0040934B↑j
.text:004095A2                 cmp     eax, 5
.text:004095A5                 jnz     loc_409377
.text:004095AB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004095B0                 cmp     eax, 2
.text:004095B3                 jz      short loc_40961A
.text:004095B5                 cmp     eax, 1
.text:004095B8                 jz      short loc_4095F3
.text:004095BA                 test    eax, eax
.text:004095BC                 jnz     loc_409377
.text:004095C2                 mov     dword ptr [ebx], 7263694Dh
.text:004095C8                 mov     dword ptr [ebx+4], 666F736Fh
.text:004095CF                 mov     dword ptr [ebx+8], 69572074h
.text:004095D6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004095DD                 mov     dword ptr [ebx+10h], 30322073h
.text:004095E4                 mov     word ptr [ebx+14h], 3030h
.text:004095EA                 mov     byte ptr [ebx+16h], 0
.text:004095EE                 jmp     loc_409377
.text:004095F3 ; ---------------------------------------------------------------------------
.text:004095F3
.text:004095F3 loc_4095F3:                             ; CODE XREF: .text:004095B8↑j
.text:004095F3                 mov     dword ptr [ebx], 7263694Dh
.text:004095F9                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409600                 mov     dword ptr [ebx+8], 69572074h
.text:00409607                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040960E                 mov     dword ptr [ebx+10h], 50582073h
.text:00409615                 jmp     loc_409373
.text:0040961A ; ---------------------------------------------------------------------------
.text:0040961A
.text:0040961A loc_40961A:                             ; CODE XREF: .text:004095B3↑j
.text:0040961A                 mov     dword ptr [ebx], 7263694Dh
.text:00409620                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409627                 mov     dword ptr [ebx+8], 69572074h
.text:0040962E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409635                 mov     dword ptr [ebx+10h], 65532073h
.text:0040963C                 mov     dword ptr [ebx+14h], 72657672h
.text:00409643                 mov     dword ptr [ebx+18h], 30303220h
.text:0040964A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00409650                 jmp     loc_409377
.text:00409655 ; ---------------------------------------------------------------------------
.text:00409655
.text:00409655 loc_409655:                             ; CODE XREF: .text:00409334↑j
.text:00409655                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040965B                 test    edx, edx
.text:0040965D                 jnz     loc_40933A
.text:00409663                 mov     dword ptr [ebx], 7263694Dh
.text:00409669                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409670                 mov     dword ptr [ebx+8], 69572074h
.text:00409677                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040967E                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409685                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040968C                 mov     byte ptr [ebx+18h], 0
.text:00409690                 jmp     loc_409377
.text:00409695 ; ---------------------------------------------------------------------------
.text:00409695
.text:00409695 loc_409695:                             ; CODE XREF: .text:0040932B↑j
.text:00409695                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040969C                 jnz     loc_409331
.text:004096A2                 mov     dword ptr [ebx], 7263694Dh
.text:004096A8                 mov     dword ptr [ebx+4], 666F736Fh
.text:004096AF                 mov     dword ptr [ebx+8], 69572074h
.text:004096B6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004096BD                 mov     dword ptr [ebx+10h], 544E2073h
.text:004096C4                 mov     dword ptr [ebx+14h], 352E3320h
.text:004096CB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:004096D1                 jmp     loc_409377
.text:004096D6 ; ---------------------------------------------------------------------------
.text:004096D6
.text:004096D6 loc_4096D6:                             ; CODE XREF: .text:00409266↑j
.text:004096D6                 cld
.text:004096D7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:004096DC                 mov     ecx, 8
.text:004096E1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:004096E8                 mov     edi, ebx
.text:004096EA                 rep movsd
.text:004096EC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:004096F3                 mov     [edi+2], dl
.text:004096F6                 mov     [edi], si
.text:004096F9                 jmp     loc_409310
.text:004096F9 ; ---------------------------------------------------------------------------
.text:004096FE                 align 10h
.text:00409700
.text:00409700 loc_409700:                             ; CODE XREF: .text:0040925D↑j
.text:00409700                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409706                 cmp     ecx, 4
.text:00409709                 jz      loc_4097C0
.text:0040970F
.text:0040970F loc_40970F:                             ; CODE XREF: .text:00409816↓j
.text:0040970F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409715
.text:00409715 loc_409715:                             ; CODE XREF: .text:004097C8↓j
.text:00409715                 cmp     ecx, 4
.text:00409718                 jz      short loc_409724
.text:0040971A
.text:0040971A loc_40971A:                             ; CODE XREF: .text:0040972C↓j
.text:0040971A                                         ; .text:00409731↓j
.text:0040971A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040971F                 jmp     loc_40928C
.text:00409724 ; ---------------------------------------------------------------------------
.text:00409724
.text:00409724 loc_409724:                             ; CODE XREF: .text:00409718↑j
.text:00409724                 cmp     edx, 0Ah
.text:00409727                 jz      short loc_409751
.text:00409729
.text:00409729 loc_409729:                             ; CODE XREF: .text:0040979F↓j
.text:00409729                 cmp     ecx, 4
.text:0040972C                 jnz     short loc_40971A
.text:0040972E                 cmp     edx, 5Ah ; 'Z'
.text:00409731                 jnz     short loc_40971A
.text:00409733                 cld
.text:00409734                 mov     edi, ebx
.text:00409736                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040973B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00409742                 mov     ecx, 9
.text:00409747                 rep movsd
.text:00409749                 mov     [edi], bx
.text:0040974C                 jmp     loc_409310
.text:00409751 ; ---------------------------------------------------------------------------
.text:00409751
.text:00409751 loc_409751:                             ; CODE XREF: .text:00409727↑j
.text:00409751                 mov     dword ptr [ebx], 7263694Dh
.text:00409757                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040975E                 mov     dword ptr [ebx+8], 69572074h
.text:00409765                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040976C                 mov     dword ptr [ebx+10h], 38392073h
.text:00409773                 mov     byte ptr [ebx+14h], 0
.text:00409777                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040977D                 lea     edi, [edx-7CFh]
.text:00409783                 cmp     edi, 0B7h ; '·'
.text:00409789                 jbe     short loc_4097B3
.text:0040978B                 cmp     edx, 886h
.text:00409791                 ja      short loc_4097A1
.text:00409793
.text:00409793 loc_409793:                             ; CODE XREF: .text:004097B1↓j
.text:00409793                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409799                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040979F                 jmp     short loc_409729
.text:004097A1 ; ---------------------------------------------------------------------------
.text:004097A1
.text:004097A1 loc_4097A1:                             ; CODE XREF: .text:00409791↑j
.text:004097A1                 mov     dword ptr [esp+4], offset loc_409226
.text:004097A9
.text:004097A9 loc_4097A9:                             ; CODE XREF: .text:004097BB↓j
.text:004097A9                 mov     [esp], ebx
.text:004097AC                 call    strcat
.text:004097B1                 jmp     short loc_409793
.text:004097B3 ; ---------------------------------------------------------------------------
.text:004097B3
.text:004097B3 loc_4097B3:                             ; CODE XREF: .text:00409789↑j
.text:004097B3                 mov     dword ptr [esp+4], 40922Ah
.text:004097BB                 jmp     short loc_4097A9
.text:004097BB ; ---------------------------------------------------------------------------
.text:004097BD                 align 10h
.text:004097C0
.text:004097C0 loc_4097C0:                             ; CODE XREF: .text:00409709↑j
.text:004097C0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004097C6                 test    edx, edx
.text:004097C8                 jnz     loc_409715
.text:004097CE                 mov     dword ptr [ebx], 7263694Dh
.text:004097D4                 mov     dword ptr [ebx+4], 666F736Fh
.text:004097DB                 mov     dword ptr [ebx+8], 69572074h
.text:004097E2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004097E9                 mov     dword ptr [ebx+10h], 35392073h
.text:004097F0                 mov     byte ptr [ebx+14h], 0
.text:004097F4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004097FA                 lea     ecx, [edx-3B7h]
.text:00409800                 cmp     ecx, 81h
.text:00409806                 jbe     short loc_40982D
.text:00409808                 cmp     edx, 438h
.text:0040980E                 ja      short loc_40981B
.text:00409810
.text:00409810 loc_409810:                             ; CODE XREF: .text:0040982B↓j
.text:00409810                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409816                 jmp     loc_40970F
.text:0040981B ; ---------------------------------------------------------------------------
.text:0040981B
.text:0040981B loc_40981B:                             ; CODE XREF: .text:0040980E↑j
.text:0040981B                 mov     dword ptr [esp+4], offset loc_40922F
.text:00409823
.text:00409823 loc_409823:                             ; CODE XREF: .text:00409835↓j
.text:00409823                 mov     [esp], ebx
.text:00409826                 call    strcat
.text:0040982B                 jmp     short loc_409810
.text:0040982D ; ---------------------------------------------------------------------------
.text:0040982D
.text:0040982D loc_40982D:                             ; CODE XREF: .text:00409806↑j
.text:0040982D                 mov     dword ptr [esp+4], 40922Ah
.text:00409835                 jmp     short loc_409823
.text:00409835 ; ---------------------------------------------------------------------------
.text:00409837                 align 10h
.text:00409840
.text:00409840 ; =============== S U B R O U T I N E =======================================
.text:00409840
.text:00409840
.text:00409840 sub_409840      proc near               ; CODE XREF: .text:0040816E↑p
.text:00409840                                         ; sub_4085F0+12A↑p
.text:00409840                 sub     esp, 0Ch
.text:00409843                 call    sub_409950
.text:00409848                 mov     eax, ds:dword_40F3D0
.text:0040984D                 add     esp, 0Ch
.text:00409850                 retn
.text:00409850 sub_409840      endp
.text:00409850
.text:00409851 ; ---------------------------------------------------------------------------
.text:00409851                 jmp     short loc_409860
.text:00409851 ; ---------------------------------------------------------------------------
.text:00409853                 align 10h
.text:00409860
.text:00409860 loc_409860:                             ; CODE XREF: .text:00409851↑j
.text:00409860                 sub     esp, 0Ch
.text:00409863                 call    sub_409950
.text:00409868                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040986D                 add     esp, 0Ch
.text:00409870                 retn
.text:00409871 ; ---------------------------------------------------------------------------
.text:00409871                 jmp     short loc_409880
.text:00409871 ; ---------------------------------------------------------------------------
.text:00409873                 align 10h
.text:00409880
.text:00409880 loc_409880:                             ; CODE XREF: .text:00409871↑j
.text:00409880                 sub     esp, 0Ch
.text:00409883                 call    sub_409950
.text:00409888                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040988D                 add     esp, 0Ch
.text:00409890                 retn
.text:00409891 ; ---------------------------------------------------------------------------
.text:00409891                 jmp     short loc_4098A0
.text:00409891 ; ---------------------------------------------------------------------------
.text:00409893                 align 10h
.text:004098A0
.text:004098A0 loc_4098A0:                             ; CODE XREF: .text:00409891↑j
.text:004098A0                 sub     esp, 0Ch
.text:004098A3                 call    sub_409950
.text:004098A8                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004098AD                 add     esp, 0Ch
.text:004098B0                 retn
.text:004098B1 ; ---------------------------------------------------------------------------
.text:004098B1                 jmp     short loc_4098C0
.text:004098B1 ; ---------------------------------------------------------------------------
.text:004098B3                 align 10h
.text:004098C0
.text:004098C0 loc_4098C0:                             ; CODE XREF: .text:004098B1↑j
.text:004098C0                 sub     esp, 0Ch
.text:004098C3                 call    GetVersion
.text:004098C8                 shr     eax, 10h
.text:004098CB                 add     esp, 0Ch
.text:004098CE                 retn
.text:004098CE ; ---------------------------------------------------------------------------
.text:004098CF                 align 10h
.text:004098D0                 sub     esp, 0Ch
.text:004098D3                 call    sub_409950
.text:004098D8                 xor     eax, eax
.text:004098DA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:004098E1                 setz    al
.text:004098E4                 add     esp, 0Ch
.text:004098E7                 retn
.text:004098E7 ; ---------------------------------------------------------------------------
.text:004098E8                 align 10h
.text:004098F0
.text:004098F0 ; =============== S U B R O U T I N E =======================================
.text:004098F0
.text:004098F0
.text:004098F0 sub_4098F0      proc near               ; CODE XREF: .text:loc_4078E0↑p
.text:004098F0                                         ; .text:loc_408154↑p ...
.text:004098F0                 sub     esp, 0Ch
.text:004098F3                 call    sub_409950
.text:004098F8                 xor     eax, eax
.text:004098FA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00409901                 setz    al
.text:00409904                 add     esp, 0Ch
.text:00409907                 retn
.text:00409907 sub_4098F0      endp
.text:00409907
.text:00409907 ; ---------------------------------------------------------------------------
.text:00409908                 align 10h
.text:00409910                 sub     esp, 0Ch
.text:00409913                 call    sub_409950
.text:00409918                 xor     eax, eax
.text:0040991A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:00409921                 setz    al
.text:00409924                 add     esp, 0Ch
.text:00409927                 retn
.text:00409927 ; ---------------------------------------------------------------------------
.text:00409928                 align 10h
.text:00409930                 sub     esp, 0Ch
.text:00409933                 call    sub_409950
.text:00409938                 xor     eax, eax
.text:0040993A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00409941                 setz    al
.text:00409944                 add     esp, 0Ch
.text:00409947                 retn
.text:00409947 ; ---------------------------------------------------------------------------
.text:00409948                 align 10h
.text:00409950
.text:00409950 ; =============== S U B R O U T I N E =======================================
.text:00409950
.text:00409950
.text:00409950 sub_409950      proc near               ; CODE XREF: .text:00409250↑p
.text:00409950                                         ; sub_409840+3↑p ...
.text:00409950
.text:00409950 lpVersionInformation= dword ptr -0BCh
.text:00409950 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00409950
.text:00409950                 sub     esp, 0BCh
.text:00409956                 mov     edx, ds:dword_40F480
.text:0040995C                 test    edx, edx
.text:0040995E                 jz      short loc_409970
.text:00409960
.text:00409960 loc_409960:                             ; CODE XREF: sub_409950+7B↓j
.text:00409960                 mov     edx, 1
.text:00409965
.text:00409965 loc_409965:                             ; CODE XREF: sub_409950+217↓j
.text:00409965                 mov     eax, edx
.text:00409967                 add     esp, 0BCh
.text:0040996D                 retn
.text:0040996D ; ---------------------------------------------------------------------------
.text:0040996E                 align 10h
.text:00409970
.text:00409970 loc_409970:                             ; CODE XREF: sub_409950+E↑j
.text:00409970                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00409977                 mov     edx, 9Ch ; 'œ'
.text:0040997C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00409982                 call    GetVersionExA
.text:00409987                 sub     esp, 4
.text:0040998A                 test    eax, eax
.text:0040998C                 jz      loc_409B44
.text:00409992
.text:00409992 loc_409992:                             ; CODE XREF: sub_409950+245↓j
.text:00409992                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00409999                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040999E                 cmp     eax, 1
.text:004099A1                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:004099A7                 jz      loc_409A90
.text:004099AD                 cmp     eax, 1
.text:004099B0                 jb      loc_409A80
.text:004099B6                 cmp     eax, 2
.text:004099B9                 jz      short loc_4099DA
.text:004099BB                 cmp     eax, 3
.text:004099BE                 jz      short loc_4099CD
.text:004099C0
.text:004099C0 loc_4099C0:                             ; CODE XREF: sub_409950+88↓j
.text:004099C0                                         ; sub_409950+C0↓j ...
.text:004099C0                 mov     edx, 1
.text:004099C5                 mov     ds:dword_40F480, edx
.text:004099CB                 jmp     short loc_409960
.text:004099CD ; ---------------------------------------------------------------------------
.text:004099CD
.text:004099CD loc_4099CD:                             ; CODE XREF: sub_409950+6E↑j
.text:004099CD                 mov     ecx, 17h
.text:004099D2
.text:004099D2 loc_4099D2:                             ; CODE XREF: sub_409950+1A7↓j
.text:004099D2                 mov     ds:dword_40F3D0, ecx
.text:004099D8                 jmp     short loc_4099C0
.text:004099DA ; ---------------------------------------------------------------------------
.text:004099DA
.text:004099DA loc_4099DA:                             ; CODE XREF: sub_409950+69↑j
.text:004099DA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:004099DF                 cmp     eax, 3
.text:004099E2                 jz      short loc_409A5B
.text:004099E4                 cmp     eax, 4
.text:004099E7                 jz      short loc_409A4A
.text:004099E9
.text:004099E9 loc_4099E9:                             ; CODE XREF: sub_409950+102↓j
.text:004099E9                 cmp     eax, 4
.text:004099EC                 ja      short loc_409A12
.text:004099EE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004099F4                 test    ecx, ecx
.text:004099F6                 jnz     short loc_409A12
.text:004099F8                 mov     edx, 1Eh
.text:004099FD
.text:004099FD loc_4099FD:                             ; CODE XREF: sub_409950+DF↓j
.text:004099FD                 mov     ds:dword_40F3D0, edx
.text:00409A03
.text:00409A03 loc_409A03:                             ; CODE XREF: sub_409950+C5↓j
.text:00409A03                                         ; sub_409950+D8↓j ...
.text:00409A03                 movzx   ecx, ds:word_40F474
.text:00409A0A                 add     ds:dword_40F3D0, ecx
.text:00409A10                 jmp     short loc_4099C0
.text:00409A12 ; ---------------------------------------------------------------------------
.text:00409A12
.text:00409A12 loc_409A12:                             ; CODE XREF: sub_409950+9C↑j
.text:00409A12                                         ; sub_409950+A6↑j
.text:00409A12                 cmp     eax, 5
.text:00409A15                 jnz     short loc_409A03
.text:00409A17                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409A1C                 cmp     eax, 2
.text:00409A1F                 jz      short loc_409A3E
.text:00409A21                 cmp     eax, 1
.text:00409A24                 jz      short loc_409A31
.text:00409A26                 test    eax, eax
.text:00409A28                 jnz     short loc_409A03
.text:00409A2A                 mov     edx, 32h ; '2'
.text:00409A2F                 jmp     short loc_4099FD
.text:00409A31 ; ---------------------------------------------------------------------------
.text:00409A31
.text:00409A31 loc_409A31:                             ; CODE XREF: sub_409950+D4↑j
.text:00409A31                 mov     ecx, 3Ch ; '<'
.text:00409A36
.text:00409A36 loc_409A36:                             ; CODE XREF: sub_409950+122↓j
.text:00409A36                 mov     ds:dword_40F3D0, ecx
.text:00409A3C                 jmp     short loc_409A03
.text:00409A3E ; ---------------------------------------------------------------------------
.text:00409A3E
.text:00409A3E loc_409A3E:                             ; CODE XREF: sub_409950+CF↑j
.text:00409A3E                 mov     eax, 46h ; 'F'
.text:00409A43
.text:00409A43 loc_409A43:                             ; CODE XREF: sub_409950+109↓j
.text:00409A43                                         ; sub_409950+129↓j
.text:00409A43                 mov     ds:dword_40F3D0, eax
.text:00409A48                 jmp     short loc_409A03
.text:00409A4A ; ---------------------------------------------------------------------------
.text:00409A4A
.text:00409A4A loc_409A4A:                             ; CODE XREF: sub_409950+97↑j
.text:00409A4A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00409A50                 test    ecx, ecx
.text:00409A52                 jnz     short loc_4099E9
.text:00409A54                 mov     eax, 28h ; '('
.text:00409A59                 jmp     short loc_409A43
.text:00409A5B ; ---------------------------------------------------------------------------
.text:00409A5B
.text:00409A5B loc_409A5B:                             ; CODE XREF: sub_409950+92↑j
.text:00409A5B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409A60                 cmp     eax, 33h ; '3'
.text:00409A63                 jz      short loc_409A74
.text:00409A65                 cmp     eax, 5
.text:00409A68                 setz    cl
.text:00409A6B                 movzx   edx, cl
.text:00409A6E                 lea     ecx, [edx+edx*4+1Eh]
.text:00409A72                 jmp     short loc_409A36
.text:00409A74 ; ---------------------------------------------------------------------------
.text:00409A74
.text:00409A74 loc_409A74:                             ; CODE XREF: sub_409950+113↑j
.text:00409A74                 mov     eax, 24h ; '$'
.text:00409A79                 jmp     short loc_409A43
.text:00409A79 ; ---------------------------------------------------------------------------
.text:00409A7B                 align 10h
.text:00409A80
.text:00409A80 loc_409A80:                             ; CODE XREF: sub_409950+60↑j
.text:00409A80                 mov     edx, 2
.text:00409A85                 mov     ds:dword_40F3D0, edx
.text:00409A8B                 jmp     loc_4099C0
.text:00409A90 ; ---------------------------------------------------------------------------
.text:00409A90
.text:00409A90 loc_409A90:                             ; CODE XREF: sub_409950+57↑j
.text:00409A90                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409A96                 cmp     ecx, 4
.text:00409A99                 jnz     loc_4099C0
.text:00409A9F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409AA4                 test    eax, eax
.text:00409AA6                 jnz     short loc_409ACA
.text:00409AA8                 mov     eax, 0Ah
.text:00409AAD                 mov     ds:dword_40F3D0, eax
.text:00409AB2                 lea     eax, [edx-3B7h]
.text:00409AB8                 cmp     eax, 81h
.text:00409ABD                 ja      short loc_409B35
.text:00409ABF                 mov     edx, 0Bh
.text:00409AC4
.text:00409AC4 loc_409AC4:                             ; CODE XREF: sub_409950+1F2↓j
.text:00409AC4                 mov     ds:dword_40F3D0, edx
.text:00409ACA
.text:00409ACA loc_409ACA:                             ; CODE XREF: sub_409950+156↑j
.text:00409ACA                                         ; sub_409950+1EB↓j
.text:00409ACA                 cmp     ecx, 4
.text:00409ACD                 jnz     loc_4099C0
.text:00409AD3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:00409ADA                 jz      short loc_409AFC
.text:00409ADC
.text:00409ADC loc_409ADC:                             ; CODE XREF: sub_409950+1D4↓j
.text:00409ADC                                         ; sub_409950+1DC↓j
.text:00409ADC                 cmp     ecx, 4
.text:00409ADF                 jnz     loc_4099C0
.text:00409AE5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:00409AEC                 jnz     loc_4099C0
.text:00409AF2                 mov     ecx, 12h
.text:00409AF7                 jmp     loc_4099D2
.text:00409AFC ; ---------------------------------------------------------------------------
.text:00409AFC
.text:00409AFC loc_409AFC:                             ; CODE XREF: sub_409950+18A↑j
.text:00409AFC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00409B02                 mov     eax, 0Eh
.text:00409B07                 mov     ds:dword_40F3D0, eax
.text:00409B0C                 lea     eax, [edx-7CFh]
.text:00409B12                 cmp     eax, 0B7h ; '·'
.text:00409B17                 ja      short loc_409B26
.text:00409B19                 mov     edx, 0Fh
.text:00409B1E
.text:00409B1E loc_409B1E:                             ; CODE XREF: sub_409950+1E3↓j
.text:00409B1E                 mov     ds:dword_40F3D0, edx
.text:00409B24                 jmp     short loc_409ADC
.text:00409B26 ; ---------------------------------------------------------------------------
.text:00409B26
.text:00409B26 loc_409B26:                             ; CODE XREF: sub_409950+1C7↑j
.text:00409B26                 cmp     edx, 886h
.text:00409B2C                 jbe     short loc_409ADC
.text:00409B2E                 mov     edx, 10h
.text:00409B33                 jmp     short loc_409B1E
.text:00409B35 ; ---------------------------------------------------------------------------
.text:00409B35
.text:00409B35 loc_409B35:                             ; CODE XREF: sub_409950+16D↑j
.text:00409B35                 cmp     edx, 438h
.text:00409B3B                 jbe     short loc_409ACA
.text:00409B3D                 mov     edx, 0Ch
.text:00409B42                 jmp     short loc_409AC4
.text:00409B44 ; ---------------------------------------------------------------------------
.text:00409B44
.text:00409B44 loc_409B44:                             ; CODE XREF: sub_409950+3C↑j
.text:00409B44                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:00409B4C                 xor     edx, edx
.text:00409B4E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00409B52                 mov     dword_40E070, edx
.text:00409B58                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:00409B5B                 call    GetVersionExA
.text:00409B60                 sub     esp, 4
.text:00409B63                 xor     edx, edx
.text:00409B65                 test    eax, eax
.text:00409B67                 jz      loc_409965
.text:00409B6D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00409B71                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00409B75                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:00409B7B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:00409B7F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00409B85                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00409B89                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00409B8F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00409B95                 jmp     loc_409992
.text:00409B95 sub_409950      endp
.text:00409B95
.text:00409B95 ; ---------------------------------------------------------------------------
.text:00409B9A                 align 10h
.text:00409BA0 aNotset         db 'notset',0           ; DATA XREF: .data:off_40E080↓o
.text:00409BA0                                         ; .data:off_40E084↓o
.text:00409BA7 ; ---------------------------------------------------------------------------
.text:00409BA7
.text:00409BA7 loc_409BA7:                             ; DATA XREF: .text:loc_409C45↓o
.text:00409BA7                 jb      short loc_409C20
.text:00409BA9                 add     [eax], ah
.text:00409BAB                 or      [eax], eax
.text:00409BAD
.text:00409BAD loc_409BAD:                             ; DATA XREF: .text:00409C98↓o
.text:00409BAD                                         ; .text:00409CFE↓o ...
.text:00409BAD                 add     [eax], ah
.text:00409BAF                 and     eax, 64252064h
.text:00409BB4                 and     [eax], al
.text:00409BB6                 lea     esi, [esi+0]
.text:00409BB9                 lea     edi, [edi+0]
.text:00409BC0                 push    ebp
.text:00409BC1                 push    edi
.text:00409BC2                 push    esi
.text:00409BC3                 push    ebx
.text:00409BC4                 sub     esp, 14Ch
.text:00409BCA                 mov     edx, off_40E080 ; "notset"
.text:00409BD0                 mov     edi, [esp+164h]
.text:00409BD7                 mov     ebp, [esp+168h]
.text:00409BDE                 mov     [esp+4], edx
.text:00409BE2                 mov     edx, off_40E084 ; "notset"
.text:00409BE8                 mov     [esp], edx
.text:00409BEB                 call    strcmp
.text:00409BF0                 test    eax, eax
.text:00409BF2                 jz      loc_409FE0
.text:00409BF8
.text:00409BF8 loc_409BF8:                             ; CODE XREF: .text:0040A02C↓j
.text:00409BF8                 lea     ebx, [esp+20h]
.text:00409BFC                 lea     esi, [esi+0]
.text:00409C00
.text:00409C00 loc_409C00:                             ; CODE XREF: .text:00409C36↓j
.text:00409C00                 mov     [esp+4], ebx
.text:00409C04                 mov     ecx, off_40E084 ; "notset"
.text:00409C0A                 mov     [esp], ecx
.text:00409C0D                 call    loc_408690
.text:00409C12                 test    eax, eax
.text:00409C14                 jns     short loc_409C45
.text:00409C16                 mov     eax, off_40E084 ; "notset"
.text:00409C1B                 cmp     byte ptr [eax], 0
.text:00409C1E                 jz      short loc_409C38
.text:00409C20
.text:00409C20 loc_409C20:                             ; CODE XREF: .text:loc_409BA7↑j
.text:00409C20                 mov     dword ptr [esp+4], 0
.text:00409C28                 mov     [esp], eax
.text:00409C2B                 call    strchr
.text:00409C30                 inc     eax
.text:00409C31                 mov     off_40E084, eax ; "notset"
.text:00409C36                 jmp     short loc_409C00
.text:00409C38 ; ---------------------------------------------------------------------------
.text:00409C38
.text:00409C38 loc_409C38:                             ; CODE XREF: .text:00409C1E↑j
.text:00409C38                 xor     eax, eax
.text:00409C3A
.text:00409C3A loc_409C3A:                             ; CODE XREF: .text:00409DFC↓j
.text:00409C3A                 add     esp, 14Ch
.text:00409C40                 pop     ebx
.text:00409C41                 pop     esi
.text:00409C42                 pop     edi
.text:00409C43                 pop     ebp
.text:00409C44                 retn
.text:00409C45 ; ---------------------------------------------------------------------------
.text:00409C45
.text:00409C45 loc_409C45:                             ; CODE XREF: .text:00409C14↑j
.text:00409C45                 mov     dword ptr [edi+0Ch], offset loc_409BA7
.text:00409C4C                 lea     ecx, [esp+0D6h]
.text:00409C53                 lea     edx, [esp+6Ch]
.text:00409C57                 mov     [edi+4], ecx
.text:00409C5A                 lea     ebx, [esp+7Ch]
.text:00409C5E                 mov     [edi+8], edx
.text:00409C61                 mov     [edi], ebx
.text:00409C63                 mov     [esp], ebp
.text:00409C66                 mov     [esp+4], edi
.text:00409C6A                 call    ___addmntentstr
.text:00409C6F                 mov     [esp], ebp
.text:00409C72                 mov     dword ptr [esp+4], 409BAAh
.text:00409C7A                 call    strspn
.text:00409C7F                 mov     dword ptr [esp+4], 0
.text:00409C87                 mov     ebx, off_40E084 ; "notset"
.text:00409C8D                 lea     esi, [eax+ebp]
.text:00409C90                 mov     [esp+1Ch], esi
.text:00409C94                 lea     ebp, [esp+1Ch]
.text:00409C98                 mov     esi, offset loc_409BAD
.text:00409C9D                 mov     [esp], ebx
.text:00409CA0                 call    strchr
.text:00409CA5                 mov     dword ptr [esp+4], 409BAAh
.text:00409CAD                 inc     eax
.text:00409CAE                 mov     off_40E084, eax ; "notset"
.text:00409CB3                 mov     [esp], ebp
.text:00409CB6                 call    sub_40ABE0
.text:00409CBB                 test    eax, eax
.text:00409CBD                 mov     ebx, eax
.text:00409CBF                 jz      short loc_409CE8
.text:00409CC1                 mov     edx, eax
.text:00409CC3                 mov     ecx, eax
.text:00409CC5                 lea     esi, [esi+0]
.text:00409CC9                 lea     edi, [edi+0]
.text:00409CD0
.text:00409CD0 loc_409CD0:                             ; CODE XREF: .text:00409CE6↓j
.text:00409CD0                 movzx   eax, byte ptr [edx]
.text:00409CD3                 cmp     al, 5Ch ; '\'
.text:00409CD5                 jz      loc_409F84
.text:00409CDB
.text:00409CDB loc_409CDB:                             ; CODE XREF: .text:00409F8C↓j
.text:00409CDB                                         ; .text:00409F9A↓j ...
.text:00409CDB                 mov     [ecx], al
.text:00409CDD
.text:00409CDD loc_409CDD:                             ; CODE XREF: .text:00409FAE↓j
.text:00409CDD                 inc     ecx
.text:00409CDE
.text:00409CDE loc_409CDE:                             ; CODE XREF: .text:00409FC6↓j
.text:00409CDE                 movzx   eax, byte ptr [edx]
.text:00409CE1                 mov     esi, ebx
.text:00409CE3                 inc     edx
.text:00409CE4                 test    al, al
.text:00409CE6                 jnz     short loc_409CD0
.text:00409CE8
.text:00409CE8 loc_409CE8:                             ; CODE XREF: .text:00409CBF↑j
.text:00409CE8                 mov     [edi], esi
.text:00409CEA                 mov     eax, [esp+1Ch]
.text:00409CEE                 test    eax, eax
.text:00409CF0                 jnz     loc_409F6B
.text:00409CF6
.text:00409CF6 loc_409CF6:                             ; CODE XREF: .text:00409F7F↓j
.text:00409CF6                 mov     dword ptr [esp+4], 409BAAh
.text:00409CFE                 mov     esi, offset loc_409BAD
.text:00409D03                 mov     [esp], ebp
.text:00409D06                 call    sub_40ABE0
.text:00409D0B                 test    eax, eax
.text:00409D0D                 mov     ebx, eax
.text:00409D0F                 jz      short loc_409D38
.text:00409D11                 mov     edx, eax
.text:00409D13                 mov     ecx, eax
.text:00409D15                 lea     esi, [esi+0]
.text:00409D19                 lea     edi, [edi+0]
.text:00409D20
.text:00409D20 loc_409D20:                             ; CODE XREF: .text:00409D36↓j
.text:00409D20                 movzx   eax, byte ptr [edx]
.text:00409D23                 cmp     al, 5Ch ; '\'
.text:00409D25                 jz      loc_409F13
.text:00409D2B
.text:00409D2B loc_409D2B:                             ; CODE XREF: .text:00409F1B↓j
.text:00409D2B                                         ; .text:00409F29↓j ...
.text:00409D2B                 mov     [ecx], al
.text:00409D2D
.text:00409D2D loc_409D2D:                             ; CODE XREF: .text:00409F3D↓j
.text:00409D2D                 inc     ecx
.text:00409D2E
.text:00409D2E loc_409D2E:                             ; CODE XREF: .text:00409F55↓j
.text:00409D2E                 movzx   eax, byte ptr [edx]
.text:00409D31                 mov     esi, ebx
.text:00409D33                 inc     edx
.text:00409D34                 test    al, al
.text:00409D36                 jnz     short loc_409D20
.text:00409D38
.text:00409D38 loc_409D38:                             ; CODE XREF: .text:00409D0F↑j
.text:00409D38                 mov     [edi+4], esi
.text:00409D3B                 mov     eax, [esp+1Ch]
.text:00409D3F                 test    eax, eax
.text:00409D41                 jnz     loc_409EFA
.text:00409D47
.text:00409D47 loc_409D47:                             ; CODE XREF: .text:00409F0E↓j
.text:00409D47                 mov     dword ptr [esp+4], 409BAAh
.text:00409D4F                 mov     esi, offset loc_409BAD
.text:00409D54                 mov     [esp], ebp
.text:00409D57                 call    sub_40ABE0
.text:00409D5C                 test    eax, eax
.text:00409D5E                 mov     ebx, eax
.text:00409D60                 jz      short loc_409D88
.text:00409D62                 mov     edx, eax
.text:00409D64                 mov     ecx, eax
.text:00409D66                 lea     esi, [esi+0]
.text:00409D69                 lea     edi, [edi+0]
.text:00409D70
.text:00409D70 loc_409D70:                             ; CODE XREF: .text:00409D86↓j
.text:00409D70                 movzx   eax, byte ptr [edx]
.text:00409D73                 cmp     al, 5Ch ; '\'
.text:00409D75                 jz      loc_409EA2
.text:00409D7B
.text:00409D7B loc_409D7B:                             ; CODE XREF: .text:00409EAA↓j
.text:00409D7B                                         ; .text:00409EB8↓j ...
.text:00409D7B                 mov     [ecx], al
.text:00409D7D
.text:00409D7D loc_409D7D:                             ; CODE XREF: .text:00409ECC↓j
.text:00409D7D                 inc     ecx
.text:00409D7E
.text:00409D7E loc_409D7E:                             ; CODE XREF: .text:00409EE4↓j
.text:00409D7E                 movzx   eax, byte ptr [edx]
.text:00409D81                 mov     esi, ebx
.text:00409D83                 inc     edx
.text:00409D84                 test    al, al
.text:00409D86                 jnz     short loc_409D70
.text:00409D88
.text:00409D88 loc_409D88:                             ; CODE XREF: .text:00409D60↑j
.text:00409D88                 mov     [edi+8], esi
.text:00409D8B                 mov     eax, [esp+1Ch]
.text:00409D8F                 test    eax, eax
.text:00409D91                 jnz     loc_409E89
.text:00409D97
.text:00409D97 loc_409D97:                             ; CODE XREF: .text:00409E9D↓j
.text:00409D97                 mov     dword ptr [esp+4], 409BAAh
.text:00409D9F                 mov     esi, offset loc_409BAD
.text:00409DA4                 mov     [esp], ebp
.text:00409DA7                 call    sub_40ABE0
.text:00409DAC                 test    eax, eax
.text:00409DAE                 mov     ebx, eax
.text:00409DB0                 jz      short loc_409DD4
.text:00409DB2                 mov     edx, eax
.text:00409DB4                 mov     ecx, eax
.text:00409DB6                 lea     esi, [esi+0]
.text:00409DB9                 lea     edi, [edi+0]
.text:00409DC0
.text:00409DC0 loc_409DC0:                             ; CODE XREF: .text:00409DD2↓j
.text:00409DC0                 movzx   eax, byte ptr [edx]
.text:00409DC3                 cmp     al, 5Ch ; '\'
.text:00409DC5                 jz      short loc_409E35
.text:00409DC7
.text:00409DC7 loc_409DC7:                             ; CODE XREF: .text:00409E3D↓j
.text:00409DC7                                         ; .text:00409E47↓j ...
.text:00409DC7                 mov     [ecx], al
.text:00409DC9
.text:00409DC9 loc_409DC9:                             ; CODE XREF: .text:00409E5B↓j
.text:00409DC9                 inc     ecx
.text:00409DCA
.text:00409DCA loc_409DCA:                             ; CODE XREF: .text:00409E73↓j
.text:00409DCA                 movzx   eax, byte ptr [edx]
.text:00409DCD                 mov     esi, ebx
.text:00409DCF                 inc     edx
.text:00409DD0                 test    al, al
.text:00409DD2                 jnz     short loc_409DC0
.text:00409DD4
.text:00409DD4 loc_409DD4:                             ; CODE XREF: .text:00409DB0↑j
.text:00409DD4                 mov     [edi+0Ch], esi
.text:00409DD7                 xor     eax, eax
.text:00409DD9                 mov     edx, [esp+1Ch]
.text:00409DDD                 test    edx, edx
.text:00409DDF                 jnz     short loc_409E15
.text:00409DE1
.text:00409DE1 loc_409DE1:                             ; CODE XREF: .text:00409E33↓j
.text:00409DE1                 cmp     eax, 1
.text:00409DE4                 jz      short loc_409E0C
.text:00409DE6                 cmp     eax, 1
.text:00409DE9                 jle     short loc_409E01
.text:00409DEB
.text:00409DEB loc_409DEB:                             ; CODE XREF: .text:00409E03↓j
.text:00409DEB                                         ; .text:00409E13↓j
.text:00409DEB                 mov     edx, [esp+160h]
.text:00409DF2                 mov     [esp], edx
.text:00409DF5                 call    sub_40AB80
.text:00409DFA                 mov     eax, edi
.text:00409DFC                 jmp     loc_409C3A
.text:00409E01 ; ---------------------------------------------------------------------------
.text:00409E01
.text:00409E01 loc_409E01:                             ; CODE XREF: .text:00409DE9↑j
.text:00409E01                 test    eax, eax
.text:00409E03                 jnz     short loc_409DEB
.text:00409E05                 mov     dword ptr [edi+10h], 0
.text:00409E0C
.text:00409E0C loc_409E0C:                             ; CODE XREF: .text:00409DE4↑j
.text:00409E0C                 mov     dword ptr [edi+14h], 0
.text:00409E13                 jmp     short loc_409DEB
.text:00409E15 ; ---------------------------------------------------------------------------
.text:00409E15
.text:00409E15 loc_409E15:                             ; CODE XREF: .text:00409DDF↑j
.text:00409E15                 mov     dword ptr [esp+4], 409BAEh
.text:00409E1D                 lea     esi, [edi+14h]
.text:00409E20                 lea     ebp, [edi+10h]
.text:00409E23                 mov     [esp+0Ch], esi
.text:00409E27                 mov     [esp+8], ebp
.text:00409E2B                 mov     [esp], edx
.text:00409E2E                 call    sscanf
.text:00409E33                 jmp     short loc_409DE1
.text:00409E35 ; ---------------------------------------------------------------------------
.text:00409E35
.text:00409E35 loc_409E35:                             ; CODE XREF: .text:00409DC5↑j
.text:00409E35                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409E39                 jz      short loc_409E78
.text:00409E3B
.text:00409E3B loc_409E3B:                             ; CODE XREF: .text:00409E7C↓j
.text:00409E3B                                         ; .text:00409E82↓j
.text:00409E3B                 cmp     al, 5Ch ; '\'
.text:00409E3D                 jnz     short loc_409DC7
.text:00409E3F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409E43                 jz      short loc_409E60
.text:00409E45
.text:00409E45 loc_409E45:                             ; CODE XREF: .text:00409E64↓j
.text:00409E45                                         ; .text:00409E6A↓j
.text:00409E45                 cmp     al, 5Ch ; '\'
.text:00409E47                 jnz     loc_409DC7
.text:00409E4D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00409E51                 jnz     loc_409DC7
.text:00409E57                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00409E5A                 inc     edx
.text:00409E5B                 jmp     loc_409DC9
.text:00409E60 ; ---------------------------------------------------------------------------
.text:00409E60
.text:00409E60 loc_409E60:                             ; CODE XREF: .text:00409E43↑j
.text:00409E60                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00409E64                 jnz     short loc_409E45
.text:00409E66                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00409E6A                 jnz     short loc_409E45
.text:00409E6C                 mov     byte ptr [ecx], 9
.text:00409E6F
.text:00409E6F loc_409E6F:                             ; CODE XREF: .text:00409E87↓j
.text:00409E6F                 inc     ecx
.text:00409E70                 add     edx, 3
.text:00409E73                 jmp     loc_409DCA
.text:00409E78 ; ---------------------------------------------------------------------------
.text:00409E78
.text:00409E78 loc_409E78:                             ; CODE XREF: .text:00409E39↑j
.text:00409E78                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00409E7C                 jnz     short loc_409E3B
.text:00409E7E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00409E82                 jnz     short loc_409E3B
.text:00409E84                 mov     byte ptr [ecx], 20h ; ' '
.text:00409E87                 jmp     short loc_409E6F
.text:00409E89 ; ---------------------------------------------------------------------------
.text:00409E89
.text:00409E89 loc_409E89:                             ; CODE XREF: .text:00409D91↑j
.text:00409E89                 mov     dword ptr [esp+4], 409BAAh
.text:00409E91                 mov     [esp], eax
.text:00409E94                 call    strspn
.text:00409E99                 add     [esp+1Ch], eax
.text:00409E9D                 jmp     loc_409D97
.text:00409EA2 ; ---------------------------------------------------------------------------
.text:00409EA2
.text:00409EA2 loc_409EA2:                             ; CODE XREF: .text:00409D75↑j
.text:00409EA2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409EA6                 jz      short loc_409EE9
.text:00409EA8
.text:00409EA8 loc_409EA8:                             ; CODE XREF: .text:00409EED↓j
.text:00409EA8                                         ; .text:00409EF3↓j
.text:00409EA8                 cmp     al, 5Ch ; '\'
.text:00409EAA                 jnz     loc_409D7B
.text:00409EB0                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409EB4                 jz      short loc_409ED1
.text:00409EB6
.text:00409EB6 loc_409EB6:                             ; CODE XREF: .text:00409ED5↓j
.text:00409EB6                                         ; .text:00409EDB↓j
.text:00409EB6                 cmp     al, 5Ch ; '\'
.text:00409EB8                 jnz     loc_409D7B
.text:00409EBE                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00409EC2                 jnz     loc_409D7B
.text:00409EC8                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00409ECB                 inc     edx
.text:00409ECC                 jmp     loc_409D7D
.text:00409ED1 ; ---------------------------------------------------------------------------
.text:00409ED1
.text:00409ED1 loc_409ED1:                             ; CODE XREF: .text:00409EB4↑j
.text:00409ED1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00409ED5                 jnz     short loc_409EB6
.text:00409ED7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00409EDB                 jnz     short loc_409EB6
.text:00409EDD                 mov     byte ptr [ecx], 9
.text:00409EE0
.text:00409EE0 loc_409EE0:                             ; CODE XREF: .text:00409EF8↓j
.text:00409EE0                 inc     ecx
.text:00409EE1                 add     edx, 3
.text:00409EE4                 jmp     loc_409D7E
.text:00409EE9 ; ---------------------------------------------------------------------------
.text:00409EE9
.text:00409EE9 loc_409EE9:                             ; CODE XREF: .text:00409EA6↑j
.text:00409EE9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00409EED                 jnz     short loc_409EA8
.text:00409EEF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00409EF3                 jnz     short loc_409EA8
.text:00409EF5                 mov     byte ptr [ecx], 20h ; ' '
.text:00409EF8                 jmp     short loc_409EE0
.text:00409EFA ; ---------------------------------------------------------------------------
.text:00409EFA
.text:00409EFA loc_409EFA:                             ; CODE XREF: .text:00409D41↑j
.text:00409EFA                 mov     dword ptr [esp+4], 409BAAh
.text:00409F02                 mov     [esp], eax
.text:00409F05                 call    strspn
.text:00409F0A                 add     [esp+1Ch], eax
.text:00409F0E                 jmp     loc_409D47
.text:00409F13 ; ---------------------------------------------------------------------------
.text:00409F13
.text:00409F13 loc_409F13:                             ; CODE XREF: .text:00409D25↑j
.text:00409F13                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409F17                 jz      short loc_409F5A
.text:00409F19
.text:00409F19 loc_409F19:                             ; CODE XREF: .text:00409F5E↓j
.text:00409F19                                         ; .text:00409F64↓j
.text:00409F19                 cmp     al, 5Ch ; '\'
.text:00409F1B                 jnz     loc_409D2B
.text:00409F21                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409F25                 jz      short loc_409F42
.text:00409F27
.text:00409F27 loc_409F27:                             ; CODE XREF: .text:00409F46↓j
.text:00409F27                                         ; .text:00409F4C↓j
.text:00409F27                 cmp     al, 5Ch ; '\'
.text:00409F29                 jnz     loc_409D2B
.text:00409F2F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00409F33                 jnz     loc_409D2B
.text:00409F39                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00409F3C                 inc     edx
.text:00409F3D                 jmp     loc_409D2D
.text:00409F42 ; ---------------------------------------------------------------------------
.text:00409F42
.text:00409F42 loc_409F42:                             ; CODE XREF: .text:00409F25↑j
.text:00409F42                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00409F46                 jnz     short loc_409F27
.text:00409F48                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00409F4C                 jnz     short loc_409F27
.text:00409F4E                 mov     byte ptr [ecx], 9
.text:00409F51
.text:00409F51 loc_409F51:                             ; CODE XREF: .text:00409F69↓j
.text:00409F51                 inc     ecx
.text:00409F52                 add     edx, 3
.text:00409F55                 jmp     loc_409D2E
.text:00409F5A ; ---------------------------------------------------------------------------
.text:00409F5A
.text:00409F5A loc_409F5A:                             ; CODE XREF: .text:00409F17↑j
.text:00409F5A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00409F5E                 jnz     short loc_409F19
.text:00409F60                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00409F64                 jnz     short loc_409F19
.text:00409F66                 mov     byte ptr [ecx], 20h ; ' '
.text:00409F69                 jmp     short loc_409F51
.text:00409F6B ; ---------------------------------------------------------------------------
.text:00409F6B
.text:00409F6B loc_409F6B:                             ; CODE XREF: .text:00409CF0↑j
.text:00409F6B                 mov     dword ptr [esp+4], 409BAAh
.text:00409F73                 mov     [esp], eax
.text:00409F76                 call    strspn
.text:00409F7B                 add     [esp+1Ch], eax
.text:00409F7F                 jmp     loc_409CF6
.text:00409F84 ; ---------------------------------------------------------------------------
.text:00409F84
.text:00409F84 loc_409F84:                             ; CODE XREF: .text:00409CD5↑j
.text:00409F84                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409F88                 jz      short loc_409FCB
.text:00409F8A
.text:00409F8A loc_409F8A:                             ; CODE XREF: .text:00409FCF↓j
.text:00409F8A                                         ; .text:00409FD5↓j
.text:00409F8A                 cmp     al, 5Ch ; '\'
.text:00409F8C                 jnz     loc_409CDB
.text:00409F92                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00409F96                 jz      short loc_409FB3
.text:00409F98
.text:00409F98 loc_409F98:                             ; CODE XREF: .text:00409FB7↓j
.text:00409F98                                         ; .text:00409FBD↓j
.text:00409F98                 cmp     al, 5Ch ; '\'
.text:00409F9A                 jnz     loc_409CDB
.text:00409FA0                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00409FA4                 jnz     loc_409CDB
.text:00409FAA                 mov     byte ptr [ecx], 5Ch ; '\'
.text:00409FAD                 inc     edx
.text:00409FAE                 jmp     loc_409CDD
.text:00409FB3 ; ---------------------------------------------------------------------------
.text:00409FB3
.text:00409FB3 loc_409FB3:                             ; CODE XREF: .text:00409F96↑j
.text:00409FB3                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00409FB7                 jnz     short loc_409F98
.text:00409FB9                 cmp     byte ptr [edx+3], 32h ; '2'
.text:00409FBD                 jnz     short loc_409F98
.text:00409FBF                 mov     byte ptr [ecx], 9
.text:00409FC2
.text:00409FC2 loc_409FC2:                             ; CODE XREF: .text:00409FDA↓j
.text:00409FC2                 inc     ecx
.text:00409FC3                 add     edx, 3
.text:00409FC6                 jmp     loc_409CDE
.text:00409FCB ; ---------------------------------------------------------------------------
.text:00409FCB
.text:00409FCB loc_409FCB:                             ; CODE XREF: .text:00409F88↑j
.text:00409FCB                 cmp     byte ptr [edx+2], 34h ; '4'
.text:00409FCF                 jnz     short loc_409F8A
.text:00409FD1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00409FD5                 jnz     short loc_409F8A
.text:00409FD7                 mov     byte ptr [ecx], 20h ; ' '
.text:00409FDA                 jmp     short loc_409FC2
.text:00409FDA ; ---------------------------------------------------------------------------
.text:00409FDC                 align 10h
.text:00409FE0
.text:00409FE0 loc_409FE0:                             ; CODE XREF: .text:00409BF2↑j
.text:00409FE0                 mov     dword ptr [esp+4], 0
.text:00409FE8                 mov     dword ptr [esp], 0
.text:00409FEF                 call    GetLogicalDriveStringsA
.text:00409FF4                 sub     esp, 8
.text:00409FF7                 mov     ebx, eax
.text:00409FF9                 call    GetProcessHeap
.text:00409FFE                 mov     [esp], eax
.text:0040A001                 mov     [esp+8], ebx
.text:0040A005                 mov     dword ptr [esp+4], 0
.text:0040A00D                 call    HeapAlloc
.text:0040A012                 sub     esp, 0Ch
.text:0040A015                 mov     esi, eax
.text:0040A017                 mov     [esp+4], eax
.text:0040A01B                 mov     [esp], ebx
.text:0040A01E                 call    GetLogicalDriveStringsA
.text:0040A023                 mov     off_40E084, esi ; "notset"
.text:0040A029                 sub     esp, 8
.text:0040A02C                 jmp     loc_409BF8
.text:0040A02C ; ---------------------------------------------------------------------------
.text:0040A031 ; const char aSSSSDD[]
.text:0040A031 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040A031                                         ; DATA XREF: .text:0040A170↓o
.text:0040A031                                         ; ___addmntentstr+F0↓o
.text:0040A044                 align 10h
.text:0040A050                 push    esi
.text:0040A051                 push    ebx
.text:0040A052                 sub     esp, 44h
.text:0040A055                 mov     ebx, [esp+54h]
.text:0040A059                 mov     esi, [esp+50h]
.text:0040A05D                 mov     edx, [ebx]
.text:0040A05F                 mov     [esp+20h], edx
.text:0040A063                 mov     ecx, [ebx+4]
.text:0040A066                 mov     [esp+24h], ecx
.text:0040A06A                 mov     edx, [ebx+8]
.text:0040A06D                 mov     [esp+28h], edx
.text:0040A071                 mov     ecx, [ebx+0Ch]
.text:0040A074                 mov     [esp+2Ch], ecx
.text:0040A078                 mov     edx, [ebx+10h]
.text:0040A07B                 mov     [esp+30h], edx
.text:0040A07F                 mov     ecx, [ebx+14h]
.text:0040A082                 mov     dword ptr [esp+8], 2
.text:0040A08A                 mov     dword ptr [esp+4], 0
.text:0040A092                 mov     [esp+34h], ecx
.text:0040A096                 mov     [esp], esi
.text:0040A099                 call    sub_40AB70
.text:0040A09E ; ---------------------------------------------------------------------------
.text:0040A09E                 test    eax, eax
.text:0040A0A0                 mov     edx, 1
.text:0040A0A5                 jnz     loc_40A1A5
.text:0040A0AB                 mov     ebx, [esp+20h]
.text:0040A0AF                 mov     edx, ebx
.text:0040A0B1                 movzx   eax, byte ptr [ebx]
.text:0040A0B4                 test    al, al
.text:0040A0B6                 jz      short loc_40A0E0
.text:0040A0B8                 nop
.text:0040A0B9                 lea     esi, [esi+0]
.text:0040A0C0
.text:0040A0C0 loc_40A0C0:                             ; CODE XREF: .text:0040A0DE↓j
.text:0040A0C0                 cmp     al, 20h ; ' '
.text:0040A0C2                 jz      loc_40A31A
.text:0040A0C8                 cmp     al, 9
.text:0040A0CA                 jz      loc_40A31A
.text:0040A0D0                 cmp     al, 5Ch ; '\'
.text:0040A0D2                 jz      loc_40A31A
.text:0040A0D8                 inc     ebx
.text:0040A0D9                 movzx   eax, byte ptr [ebx]
.text:0040A0DC                 test    al, al
.text:0040A0DE                 jnz     short loc_40A0C0
.text:0040A0E0
.text:0040A0E0 loc_40A0E0:                             ; CODE XREF: .text:0040A0B6↑j
.text:0040A0E0                                         ; .text:0040A31C↓j ...
.text:0040A0E0                 mov     ebx, [esp+24h]
.text:0040A0E4                 mov     edx, ebx
.text:0040A0E6                 movzx   eax, byte ptr [ebx]
.text:0040A0E9                 test    al, al
.text:0040A0EB                 jz      short loc_40A110
.text:0040A0ED                 lea     esi, [esi+0]
.text:0040A0F0
.text:0040A0F0 loc_40A0F0:                             ; CODE XREF: .text:0040A10E↓j
.text:0040A0F0                 cmp     al, 20h ; ' '
.text:0040A0F2                 jz      loc_40A29A
.text:0040A0F8                 cmp     al, 9
.text:0040A0FA                 jz      loc_40A29A
.text:0040A100                 cmp     al, 5Ch ; '\'
.text:0040A102                 jz      loc_40A29A
.text:0040A108                 inc     ebx
.text:0040A109                 movzx   eax, byte ptr [ebx]
.text:0040A10C                 test    al, al
.text:0040A10E                 jnz     short loc_40A0F0
.text:0040A110
.text:0040A110 loc_40A110:                             ; CODE XREF: .text:0040A0EB↑j
.text:0040A110                                         ; .text:0040A29C↓j ...
.text:0040A110                 mov     ebx, [esp+28h]
.text:0040A114                 mov     edx, ebx
.text:0040A116                 movzx   eax, byte ptr [ebx]
.text:0040A119                 test    al, al
.text:0040A11B                 jz      short loc_40A140
.text:0040A11D                 lea     esi, [esi+0]
.text:0040A120
.text:0040A120 loc_40A120:                             ; CODE XREF: .text:0040A13E↓j
.text:0040A120                 cmp     al, 20h ; ' '
.text:0040A122                 jz      loc_40A21E
.text:0040A128                 cmp     al, 9
.text:0040A12A                 jz      loc_40A21E
.text:0040A130                 cmp     al, 5Ch ; '\'
.text:0040A132                 jz      loc_40A21E
.text:0040A138                 inc     ebx
.text:0040A139                 movzx   eax, byte ptr [ebx]
.text:0040A13C                 test    al, al
.text:0040A13E                 jnz     short loc_40A120
.text:0040A140
.text:0040A140 loc_40A140:                             ; CODE XREF: .text:0040A11B↑j
.text:0040A140                                         ; .text:0040A220↓j ...
.text:0040A140                 mov     edx, [esp+2Ch]
.text:0040A144                 mov     ebx, edx
.text:0040A146                 movzx   eax, byte ptr [edx]
.text:0040A149                 test    al, al
.text:0040A14B                 jz      short loc_40A164
.text:0040A14D                 lea     esi, [esi+0]
.text:0040A150
.text:0040A150 loc_40A150:                             ; CODE XREF: .text:0040A162↓j
.text:0040A150                 cmp     al, 20h ; ' '
.text:0040A152                 jz      short loc_40A1AD
.text:0040A154                 cmp     al, 9
.text:0040A156                 jz      short loc_40A1AD
.text:0040A158                 cmp     al, 5Ch ; '\'
.text:0040A15A                 jz      short loc_40A1AD
.text:0040A15C                 inc     ebx
.text:0040A15D                 movzx   eax, byte ptr [ebx]
.text:0040A160                 test    al, al
.text:0040A162                 jnz     short loc_40A150
.text:0040A164
.text:0040A164 loc_40A164:                             ; CODE XREF: .text:0040A14B↑j
.text:0040A164                                         ; .text:0040A1AF↓j ...
.text:0040A164                 mov     [esp+14h], edx
.text:0040A168                 mov     ecx, [esp+34h]
.text:0040A16C                 mov     ebx, [esp+30h]
.text:0040A170                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040A178                 mov     edx, [esp+24h]
.text:0040A17C                 mov     [esp+1Ch], ecx
.text:0040A180                 mov     ecx, [esp+28h]
.text:0040A184                 mov     [esp+18h], ebx
.text:0040A188                 mov     ebx, [esp+20h]
.text:0040A18C                 mov     [esp+0Ch], edx
.text:0040A190                 mov     [esp+10h], ecx
.text:0040A194                 mov     [esp+8], ebx
.text:0040A198                 mov     [esp], esi
.text:0040A19B                 call    fprintf
.text:0040A1A0                 mov     edx, eax
.text:0040A1A2                 shr     edx, 1Fh
.text:0040A1A5
.text:0040A1A5 loc_40A1A5:                             ; CODE XREF: .text:0040A0A5↑j
.text:0040A1A5                 add     esp, 44h
.text:0040A1A8                 mov     eax, edx
.text:0040A1AA                 pop     ebx
.text:0040A1AB                 pop     esi
.text:0040A1AC                 retn
.text:0040A1AD ; ---------------------------------------------------------------------------
.text:0040A1AD
.text:0040A1AD loc_40A1AD:                             ; CODE XREF: .text:0040A152↑j
.text:0040A1AD                                         ; .text:0040A156↑j ...
.text:0040A1AD                 test    al, al
.text:0040A1AF                 jz      short loc_40A164
.text:0040A1B1                 mov     [esp], edx
.text:0040A1B4                 mov     ebx, edx
.text:0040A1B6                 call    strlen
.text:0040A1BB                 lea     edx, ds:1[eax*4]
.text:0040A1C2                 mov     [esp], edx
.text:0040A1C5                 call    malloc
.text:0040A1CA                 mov     [esp+2Ch], eax
.text:0040A1CE                 mov     edx, eax
.text:0040A1D0
.text:0040A1D0 loc_40A1D0:                             ; CODE XREF: .text:0040A1E8↓j
.text:0040A1D0                 movzx   eax, byte ptr [ebx]
.text:0040A1D3                 cmp     al, 20h ; ' '
.text:0040A1D5                 jz      short loc_40A20D
.text:0040A1D7                 cmp     al, 9
.text:0040A1D9                 jz      short loc_40A1FC
.text:0040A1DB                 cmp     al, 5Ch ; '\'
.text:0040A1DD                 jz      short loc_40A1F3
.text:0040A1DF                 mov     [edx], al
.text:0040A1E1
.text:0040A1E1 loc_40A1E1:                             ; CODE XREF: .text:0040A1FA↓j
.text:0040A1E1                                         ; .text:0040A20B↓j ...
.text:0040A1E1                 movzx   ecx, byte ptr [ebx]
.text:0040A1E4                 inc     edx
.text:0040A1E5                 inc     ebx
.text:0040A1E6                 test    cl, cl
.text:0040A1E8                 jnz     short loc_40A1D0
.text:0040A1EA                 mov     edx, [esp+2Ch]
.text:0040A1EE                 jmp     loc_40A164
.text:0040A1F3 ; ---------------------------------------------------------------------------
.text:0040A1F3
.text:0040A1F3 loc_40A1F3:                             ; CODE XREF: .text:0040A1DD↑j
.text:0040A1F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A1F6                 inc     edx
.text:0040A1F7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A1FA                 jmp     short loc_40A1E1
.text:0040A1FC ; ---------------------------------------------------------------------------
.text:0040A1FC
.text:0040A1FC loc_40A1FC:                             ; CODE XREF: .text:0040A1D9↑j
.text:0040A1FC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A1FF                 inc     edx
.text:0040A200                 mov     byte ptr [edx], 30h ; '0'
.text:0040A203                 inc     edx
.text:0040A204                 mov     byte ptr [edx], 31h ; '1'
.text:0040A207                 inc     edx
.text:0040A208                 mov     byte ptr [edx], 32h ; '2'
.text:0040A20B                 jmp     short loc_40A1E1
.text:0040A20D ; ---------------------------------------------------------------------------
.text:0040A20D
.text:0040A20D loc_40A20D:                             ; CODE XREF: .text:0040A1D5↑j
.text:0040A20D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A210                 inc     edx
.text:0040A211                 mov     byte ptr [edx], 30h ; '0'
.text:0040A214                 inc     edx
.text:0040A215                 mov     byte ptr [edx], 34h ; '4'
.text:0040A218                 inc     edx
.text:0040A219                 mov     byte ptr [edx], 30h ; '0'
.text:0040A21C                 jmp     short loc_40A1E1
.text:0040A21E ; ---------------------------------------------------------------------------
.text:0040A21E
.text:0040A21E loc_40A21E:                             ; CODE XREF: .text:0040A122↑j
.text:0040A21E                                         ; .text:0040A12A↑j ...
.text:0040A21E                 test    al, al
.text:0040A220                 jz      loc_40A140
.text:0040A226                 mov     [esp], edx
.text:0040A229                 mov     ebx, edx
.text:0040A22B                 call    strlen
.text:0040A230                 lea     edx, ds:1[eax*4]
.text:0040A237                 mov     [esp], edx
.text:0040A23A                 call    malloc
.text:0040A23F                 mov     [esp+28h], eax
.text:0040A243                 mov     edx, eax
.text:0040A245                 lea     esi, [esi+0]
.text:0040A249                 lea     edi, [edi+0]
.text:0040A250
.text:0040A250 loc_40A250:                             ; CODE XREF: .text:0040A268↓j
.text:0040A250                 movzx   eax, byte ptr [ebx]
.text:0040A253                 cmp     al, 20h ; ' '
.text:0040A255                 jz      short loc_40A289
.text:0040A257                 cmp     al, 9
.text:0040A259                 jz      short loc_40A278
.text:0040A25B                 cmp     al, 5Ch ; '\'
.text:0040A25D                 jz      short loc_40A26F
.text:0040A25F                 mov     [edx], al
.text:0040A261
.text:0040A261 loc_40A261:                             ; CODE XREF: .text:0040A276↓j
.text:0040A261                                         ; .text:0040A287↓j ...
.text:0040A261                 movzx   ecx, byte ptr [ebx]
.text:0040A264                 inc     edx
.text:0040A265                 inc     ebx
.text:0040A266                 test    cl, cl
.text:0040A268                 jnz     short loc_40A250
.text:0040A26A                 jmp     loc_40A140
.text:0040A26F ; ---------------------------------------------------------------------------
.text:0040A26F
.text:0040A26F loc_40A26F:                             ; CODE XREF: .text:0040A25D↑j
.text:0040A26F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A272                 inc     edx
.text:0040A273                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A276                 jmp     short loc_40A261
.text:0040A278 ; ---------------------------------------------------------------------------
.text:0040A278
.text:0040A278 loc_40A278:                             ; CODE XREF: .text:0040A259↑j
.text:0040A278                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A27B                 inc     edx
.text:0040A27C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A27F                 inc     edx
.text:0040A280                 mov     byte ptr [edx], 31h ; '1'
.text:0040A283                 inc     edx
.text:0040A284                 mov     byte ptr [edx], 32h ; '2'
.text:0040A287                 jmp     short loc_40A261
.text:0040A289 ; ---------------------------------------------------------------------------
.text:0040A289
.text:0040A289 loc_40A289:                             ; CODE XREF: .text:0040A255↑j
.text:0040A289                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A28C                 inc     edx
.text:0040A28D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A290                 inc     edx
.text:0040A291                 mov     byte ptr [edx], 34h ; '4'
.text:0040A294                 inc     edx
.text:0040A295                 mov     byte ptr [edx], 30h ; '0'
.text:0040A298                 jmp     short loc_40A261
.text:0040A29A ; ---------------------------------------------------------------------------
.text:0040A29A
.text:0040A29A loc_40A29A:                             ; CODE XREF: .text:0040A0F2↑j
.text:0040A29A                                         ; .text:0040A0FA↑j ...
.text:0040A29A                 test    al, al
.text:0040A29C                 jz      loc_40A110
.text:0040A2A2                 mov     [esp], edx
.text:0040A2A5                 mov     ebx, edx
.text:0040A2A7                 call    strlen
.text:0040A2AC                 lea     edx, ds:1[eax*4]
.text:0040A2B3                 mov     [esp], edx
.text:0040A2B6                 call    malloc
.text:0040A2BB                 mov     [esp+24h], eax
.text:0040A2BF                 mov     edx, eax
.text:0040A2C1                 jmp     short loc_40A2D0
.text:0040A2C1 ; ---------------------------------------------------------------------------
.text:0040A2C3                 align 10h
.text:0040A2D0
.text:0040A2D0 loc_40A2D0:                             ; CODE XREF: .text:0040A2C1↑j
.text:0040A2D0                                         ; .text:0040A2E8↓j
.text:0040A2D0                 movzx   eax, byte ptr [ebx]
.text:0040A2D3                 cmp     al, 20h ; ' '
.text:0040A2D5                 jz      short loc_40A309
.text:0040A2D7                 cmp     al, 9
.text:0040A2D9                 jz      short loc_40A2F8
.text:0040A2DB                 cmp     al, 5Ch ; '\'
.text:0040A2DD                 jz      short loc_40A2EF
.text:0040A2DF                 mov     [edx], al
.text:0040A2E1
.text:0040A2E1 loc_40A2E1:                             ; CODE XREF: .text:0040A2F6↓j
.text:0040A2E1                                         ; .text:0040A307↓j ...
.text:0040A2E1                 movzx   ecx, byte ptr [ebx]
.text:0040A2E4                 inc     edx
.text:0040A2E5                 inc     ebx
.text:0040A2E6                 test    cl, cl
.text:0040A2E8                 jnz     short loc_40A2D0
.text:0040A2EA                 jmp     loc_40A110
.text:0040A2EF ; ---------------------------------------------------------------------------
.text:0040A2EF
.text:0040A2EF loc_40A2EF:                             ; CODE XREF: .text:0040A2DD↑j
.text:0040A2EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A2F2                 inc     edx
.text:0040A2F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A2F6                 jmp     short loc_40A2E1
.text:0040A2F8 ; ---------------------------------------------------------------------------
.text:0040A2F8
.text:0040A2F8 loc_40A2F8:                             ; CODE XREF: .text:0040A2D9↑j
.text:0040A2F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A2FB                 inc     edx
.text:0040A2FC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A2FF                 inc     edx
.text:0040A300                 mov     byte ptr [edx], 31h ; '1'
.text:0040A303                 inc     edx
.text:0040A304                 mov     byte ptr [edx], 32h ; '2'
.text:0040A307                 jmp     short loc_40A2E1
.text:0040A309 ; ---------------------------------------------------------------------------
.text:0040A309
.text:0040A309 loc_40A309:                             ; CODE XREF: .text:0040A2D5↑j
.text:0040A309                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A30C                 inc     edx
.text:0040A30D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A310                 inc     edx
.text:0040A311                 mov     byte ptr [edx], 34h ; '4'
.text:0040A314                 inc     edx
.text:0040A315                 mov     byte ptr [edx], 30h ; '0'
.text:0040A318                 jmp     short loc_40A2E1
.text:0040A31A ; ---------------------------------------------------------------------------
.text:0040A31A
.text:0040A31A loc_40A31A:                             ; CODE XREF: .text:0040A0C2↑j
.text:0040A31A                                         ; .text:0040A0CA↑j ...
.text:0040A31A                 test    al, al
.text:0040A31C                 jz      loc_40A0E0
.text:0040A322                 mov     [esp], edx
.text:0040A325                 mov     ebx, edx
.text:0040A327                 call    strlen
.text:0040A32C                 lea     ecx, ds:1[eax*4]
.text:0040A333                 mov     [esp], ecx
.text:0040A336                 call    malloc
.text:0040A33B                 mov     [esp+20h], eax
.text:0040A33F                 mov     edx, eax
.text:0040A341                 jmp     short loc_40A350
.text:0040A341 ; ---------------------------------------------------------------------------
.text:0040A343                 align 10h
.text:0040A350
.text:0040A350 loc_40A350:                             ; CODE XREF: .text:0040A341↑j
.text:0040A350                                         ; .text:0040A368↓j
.text:0040A350                 movzx   eax, byte ptr [ebx]
.text:0040A353                 cmp     al, 20h ; ' '
.text:0040A355                 jz      short loc_40A389
.text:0040A357                 cmp     al, 9
.text:0040A359                 jz      short loc_40A378
.text:0040A35B                 cmp     al, 5Ch ; '\'
.text:0040A35D                 jz      short loc_40A36F
.text:0040A35F                 mov     [edx], al
.text:0040A361
.text:0040A361 loc_40A361:                             ; CODE XREF: .text:0040A376↓j
.text:0040A361                                         ; .text:0040A387↓j ...
.text:0040A361                 movzx   ecx, byte ptr [ebx]
.text:0040A364                 inc     edx
.text:0040A365                 inc     ebx
.text:0040A366                 test    cl, cl
.text:0040A368                 jnz     short loc_40A350
.text:0040A36A                 jmp     loc_40A0E0
.text:0040A36F ; ---------------------------------------------------------------------------
.text:0040A36F
.text:0040A36F loc_40A36F:                             ; CODE XREF: .text:0040A35D↑j
.text:0040A36F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A372                 inc     edx
.text:0040A373                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A376                 jmp     short loc_40A361
.text:0040A378 ; ---------------------------------------------------------------------------
.text:0040A378
.text:0040A378 loc_40A378:                             ; CODE XREF: .text:0040A359↑j
.text:0040A378                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A37B                 inc     edx
.text:0040A37C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A37F                 inc     edx
.text:0040A380                 mov     byte ptr [edx], 31h ; '1'
.text:0040A383                 inc     edx
.text:0040A384                 mov     byte ptr [edx], 32h ; '2'
.text:0040A387                 jmp     short loc_40A361
.text:0040A389 ; ---------------------------------------------------------------------------
.text:0040A389
.text:0040A389 loc_40A389:                             ; CODE XREF: .text:0040A355↑j
.text:0040A389                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A38C                 inc     edx
.text:0040A38D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A390                 inc     edx
.text:0040A391                 mov     byte ptr [edx], 34h ; '4'
.text:0040A394                 inc     edx
.text:0040A395                 mov     byte ptr [edx], 30h ; '0'
.text:0040A398                 jmp     short loc_40A361
.text:0040A398 ; ---------------------------------------------------------------------------
.text:0040A39A                 align 10h
.text:0040A3A0
.text:0040A3A0 ; =============== S U B R O U T I N E =======================================
.text:0040A3A0
.text:0040A3A0 ; Attributes: info_from_lumina
.text:0040A3A0
.text:0040A3A0 ; int __cdecl __addmntentstr(char *, int)
.text:0040A3A0 ___addmntentstr proc near               ; CODE XREF: .text:00409C6A↑p
.text:0040A3A0
.text:0040A3A0 Buffer          = dword ptr -4Ch
.text:0040A3A0 Format          = dword ptr -48h
.text:0040A3A0 var_44          = dword ptr -44h
.text:0040A3A0 var_40          = dword ptr -40h
.text:0040A3A0 var_3C          = dword ptr -3Ch
.text:0040A3A0 var_38          = dword ptr -38h
.text:0040A3A0 var_34          = dword ptr -34h
.text:0040A3A0 var_30          = dword ptr -30h
.text:0040A3A0 var_2C          = dword ptr -2Ch
.text:0040A3A0 var_28          = dword ptr -28h
.text:0040A3A0 var_24          = dword ptr -24h
.text:0040A3A0 Str             = dword ptr -20h
.text:0040A3A0 var_1C          = dword ptr -1Ch
.text:0040A3A0 var_18          = dword ptr -18h
.text:0040A3A0 arg_0           = dword ptr  4
.text:0040A3A0 arg_4           = dword ptr  8
.text:0040A3A0
.text:0040A3A0                 push    ebx
.text:0040A3A1                 sub     esp, 48h
.text:0040A3A4                 mov     edx, [esp+4Ch+arg_4]
.text:0040A3A8                 mov     ecx, [edx]
.text:0040A3AA                 mov     [esp+4Ch+var_2C], ecx
.text:0040A3AE                 mov     ebx, [edx+4]
.text:0040A3B1                 mov     [esp+4Ch+var_28], ebx
.text:0040A3B5                 mov     ebx, [edx+8]
.text:0040A3B8                 mov     [esp+4Ch+var_24], ebx
.text:0040A3BC                 mov     ebx, [edx+0Ch]
.text:0040A3BF                 mov     [esp+4Ch+Str], ebx
.text:0040A3C3                 mov     ebx, [edx+10h]
.text:0040A3C6                 mov     [esp+4Ch+var_1C], ebx
.text:0040A3CA                 mov     ebx, [edx+14h]
.text:0040A3CD                 mov     [esp+4Ch+var_18], ebx
.text:0040A3D1                 mov     ebx, ecx
.text:0040A3D3                 movzx   eax, byte ptr [ecx]
.text:0040A3D6                 test    al, al
.text:0040A3D8                 jz      loc_40A6C1
.text:0040A3DE                 mov     esi, esi
.text:0040A3E0
.text:0040A3E0 loc_40A3E0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040A3E0                 cmp     al, 20h ; ' '
.text:0040A3E2                 jz      loc_40A640
.text:0040A3E8                 cmp     al, 9
.text:0040A3EA                 jz      loc_40A640
.text:0040A3F0                 cmp     al, 5Ch ; '\'
.text:0040A3F2                 jz      loc_40A640
.text:0040A3F8                 inc     ebx
.text:0040A3F9                 movzx   eax, byte ptr [ebx]
.text:0040A3FC                 test    al, al
.text:0040A3FE                 jnz     short loc_40A3E0
.text:0040A400
.text:0040A400 loc_40A400:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040A400                                         ; ___addmntentstr+2EA↓j
.text:0040A400                 mov     ebx, [esp+4Ch+var_28]
.text:0040A404                 mov     edx, ebx
.text:0040A406                 movzx   eax, byte ptr [ebx]
.text:0040A409                 test    al, al
.text:0040A40B                 jz      short loc_40A430
.text:0040A40D                 lea     esi, [esi+0]
.text:0040A410
.text:0040A410 loc_40A410:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040A410                 cmp     al, 20h ; ' '
.text:0040A412                 jz      loc_40A5BA
.text:0040A418                 cmp     al, 9
.text:0040A41A                 jz      loc_40A5BA
.text:0040A420                 cmp     al, 5Ch ; '\'
.text:0040A422                 jz      loc_40A5BA
.text:0040A428                 inc     ebx
.text:0040A429                 movzx   eax, byte ptr [ebx]
.text:0040A42C                 test    al, al
.text:0040A42E                 jnz     short loc_40A410
.text:0040A430
.text:0040A430 loc_40A430:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040A430                                         ; ___addmntentstr+21C↓j ...
.text:0040A430                 mov     ebx, [esp+4Ch+var_24]
.text:0040A434                 mov     edx, ebx
.text:0040A436                 movzx   eax, byte ptr [ebx]
.text:0040A439                 test    al, al
.text:0040A43B                 jz      short loc_40A460
.text:0040A43D                 lea     esi, [esi+0]
.text:0040A440
.text:0040A440 loc_40A440:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040A440                 cmp     al, 20h ; ' '
.text:0040A442                 jz      loc_40A53E
.text:0040A448                 cmp     al, 9
.text:0040A44A                 jz      loc_40A53E
.text:0040A450                 cmp     al, 5Ch ; '\'
.text:0040A452                 jz      loc_40A53E
.text:0040A458                 inc     ebx
.text:0040A459                 movzx   eax, byte ptr [ebx]
.text:0040A45C                 test    al, al
.text:0040A45E                 jnz     short loc_40A440
.text:0040A460
.text:0040A460 loc_40A460:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040A460                                         ; ___addmntentstr+1A0↓j ...
.text:0040A460                 mov     edx, [esp+4Ch+Str]
.text:0040A464                 mov     ebx, edx
.text:0040A466                 movzx   eax, byte ptr [edx]
.text:0040A469                 test    al, al
.text:0040A46B                 jz      short loc_40A484
.text:0040A46D                 lea     esi, [esi+0]
.text:0040A470
.text:0040A470 loc_40A470:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040A470                 cmp     al, 20h ; ' '
.text:0040A472                 jz      short loc_40A4CC
.text:0040A474                 cmp     al, 9
.text:0040A476                 jz      short loc_40A4CC
.text:0040A478                 cmp     al, 5Ch ; '\'
.text:0040A47A                 jz      short loc_40A4CC
.text:0040A47C                 inc     ebx
.text:0040A47D                 movzx   eax, byte ptr [ebx]
.text:0040A480                 test    al, al
.text:0040A482                 jnz     short loc_40A470
.text:0040A484
.text:0040A484 loc_40A484:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040A484                                         ; ___addmntentstr+12E↓j ...
.text:0040A484                 mov     [esp+4Ch+var_38], edx
.text:0040A488                 mov     ebx, [esp+4Ch+var_18]
.text:0040A48C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040A490                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040A498                 mov     edx, [esp+4Ch+var_2C]
.text:0040A49C                 mov     [esp+4Ch+var_30], ebx
.text:0040A4A0                 mov     ebx, [esp+4Ch+var_24]
.text:0040A4A4                 mov     [esp+4Ch+var_34], ecx
.text:0040A4A8                 mov     ecx, [esp+4Ch+var_28]
.text:0040A4AC                 mov     [esp+4Ch+var_3C], ebx
.text:0040A4B0                 mov     ebx, [esp+4Ch+arg_0]
.text:0040A4B4                 mov     [esp+4Ch+var_40], ecx
.text:0040A4B8                 mov     [esp+4Ch+var_44], edx
.text:0040A4BC                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040A4BF                 call    sprintf
.text:0040A4C4                 add     esp, 48h
.text:0040A4C7                 shr     eax, 1Fh
.text:0040A4CA                 pop     ebx
.text:0040A4CB                 retn
.text:0040A4CC ; ---------------------------------------------------------------------------
.text:0040A4CC
.text:0040A4CC loc_40A4CC:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040A4CC                                         ; ___addmntentstr+D6↑j ...
.text:0040A4CC                 test    al, al
.text:0040A4CE                 jz      short loc_40A484
.text:0040A4D0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A4D3                 mov     ebx, edx
.text:0040A4D5                 call    strlen
.text:0040A4DA                 lea     edx, ds:1[eax*4]
.text:0040A4E1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A4E4                 call    malloc
.text:0040A4E9                 mov     [esp+4Ch+Str], eax
.text:0040A4ED                 mov     edx, eax
.text:0040A4EF                 nop
.text:0040A4F0
.text:0040A4F0 loc_40A4F0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040A4F0                 movzx   eax, byte ptr [ebx]
.text:0040A4F3                 cmp     al, 20h ; ' '
.text:0040A4F5                 jz      short loc_40A52D
.text:0040A4F7                 cmp     al, 9
.text:0040A4F9                 jz      short loc_40A51C
.text:0040A4FB                 cmp     al, 5Ch ; '\'
.text:0040A4FD                 jz      short loc_40A513
.text:0040A4FF                 mov     [edx], al
.text:0040A501
.text:0040A501 loc_40A501:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040A501                                         ; ___addmntentstr+18B↓j ...
.text:0040A501                 movzx   ecx, byte ptr [ebx]
.text:0040A504                 inc     edx
.text:0040A505                 inc     ebx
.text:0040A506                 test    cl, cl
.text:0040A508                 jnz     short loc_40A4F0
.text:0040A50A                 mov     edx, [esp+4Ch+Str]
.text:0040A50E                 jmp     loc_40A484
.text:0040A513 ; ---------------------------------------------------------------------------
.text:0040A513
.text:0040A513 loc_40A513:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040A513                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A516                 inc     edx
.text:0040A517                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A51A                 jmp     short loc_40A501
.text:0040A51C ; ---------------------------------------------------------------------------
.text:0040A51C
.text:0040A51C loc_40A51C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040A51C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A51F                 inc     edx
.text:0040A520                 mov     byte ptr [edx], 30h ; '0'
.text:0040A523                 inc     edx
.text:0040A524                 mov     byte ptr [edx], 31h ; '1'
.text:0040A527                 inc     edx
.text:0040A528                 mov     byte ptr [edx], 32h ; '2'
.text:0040A52B                 jmp     short loc_40A501
.text:0040A52D ; ---------------------------------------------------------------------------
.text:0040A52D
.text:0040A52D loc_40A52D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040A52D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A530                 inc     edx
.text:0040A531                 mov     byte ptr [edx], 30h ; '0'
.text:0040A534                 inc     edx
.text:0040A535                 mov     byte ptr [edx], 34h ; '4'
.text:0040A538                 inc     edx
.text:0040A539                 mov     byte ptr [edx], 30h ; '0'
.text:0040A53C                 jmp     short loc_40A501
.text:0040A53E ; ---------------------------------------------------------------------------
.text:0040A53E
.text:0040A53E loc_40A53E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040A53E                                         ; ___addmntentstr+AA↑j ...
.text:0040A53E                 test    al, al
.text:0040A540                 jz      loc_40A460
.text:0040A546                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A549                 mov     ebx, edx
.text:0040A54B                 call    strlen
.text:0040A550                 lea     edx, ds:1[eax*4]
.text:0040A557                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A55A                 call    malloc
.text:0040A55F                 mov     [esp+4Ch+var_24], eax
.text:0040A563                 mov     edx, eax
.text:0040A565                 lea     esi, [esi+0]
.text:0040A569                 lea     edi, [edi+0]
.text:0040A570
.text:0040A570 loc_40A570:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040A570                 movzx   eax, byte ptr [ebx]
.text:0040A573                 cmp     al, 20h ; ' '
.text:0040A575                 jz      short loc_40A5A9
.text:0040A577                 cmp     al, 9
.text:0040A579                 jz      short loc_40A598
.text:0040A57B                 cmp     al, 5Ch ; '\'
.text:0040A57D                 jz      short loc_40A58F
.text:0040A57F                 mov     [edx], al
.text:0040A581
.text:0040A581 loc_40A581:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040A581                                         ; ___addmntentstr+207↓j ...
.text:0040A581                 movzx   ecx, byte ptr [ebx]
.text:0040A584                 inc     edx
.text:0040A585                 inc     ebx
.text:0040A586                 test    cl, cl
.text:0040A588                 jnz     short loc_40A570
.text:0040A58A                 jmp     loc_40A460
.text:0040A58F ; ---------------------------------------------------------------------------
.text:0040A58F
.text:0040A58F loc_40A58F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040A58F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A592                 inc     edx
.text:0040A593                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A596                 jmp     short loc_40A581
.text:0040A598 ; ---------------------------------------------------------------------------
.text:0040A598
.text:0040A598 loc_40A598:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040A598                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A59B                 inc     edx
.text:0040A59C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A59F                 inc     edx
.text:0040A5A0                 mov     byte ptr [edx], 31h ; '1'
.text:0040A5A3                 inc     edx
.text:0040A5A4                 mov     byte ptr [edx], 32h ; '2'
.text:0040A5A7                 jmp     short loc_40A581
.text:0040A5A9 ; ---------------------------------------------------------------------------
.text:0040A5A9
.text:0040A5A9 loc_40A5A9:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040A5A9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A5AC                 inc     edx
.text:0040A5AD                 mov     byte ptr [edx], 30h ; '0'
.text:0040A5B0                 inc     edx
.text:0040A5B1                 mov     byte ptr [edx], 34h ; '4'
.text:0040A5B4                 inc     edx
.text:0040A5B5                 mov     byte ptr [edx], 30h ; '0'
.text:0040A5B8                 jmp     short loc_40A581
.text:0040A5BA ; ---------------------------------------------------------------------------
.text:0040A5BA
.text:0040A5BA loc_40A5BA:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040A5BA                                         ; ___addmntentstr+7A↑j ...
.text:0040A5BA                 test    al, al
.text:0040A5BC                 jz      loc_40A430
.text:0040A5C2                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A5C5                 mov     ebx, edx
.text:0040A5C7                 call    strlen
.text:0040A5CC                 lea     edx, ds:1[eax*4]
.text:0040A5D3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A5D6                 call    malloc
.text:0040A5DB                 mov     [esp+4Ch+var_28], eax
.text:0040A5DF                 mov     edx, eax
.text:0040A5E1                 jmp     short loc_40A5F0
.text:0040A5E1 ; ---------------------------------------------------------------------------
.text:0040A5E3                 align 10h
.text:0040A5F0
.text:0040A5F0 loc_40A5F0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040A5F0                                         ; ___addmntentstr+268↓j
.text:0040A5F0                 movzx   eax, byte ptr [ebx]
.text:0040A5F3                 cmp     al, 20h ; ' '
.text:0040A5F5                 jz      short loc_40A629
.text:0040A5F7                 cmp     al, 9
.text:0040A5F9                 jz      short loc_40A618
.text:0040A5FB                 cmp     al, 5Ch ; '\'
.text:0040A5FD                 jz      short loc_40A60F
.text:0040A5FF                 mov     [edx], al
.text:0040A601
.text:0040A601 loc_40A601:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040A601                                         ; ___addmntentstr+287↓j ...
.text:0040A601                 movzx   ecx, byte ptr [ebx]
.text:0040A604                 inc     edx
.text:0040A605                 inc     ebx
.text:0040A606                 test    cl, cl
.text:0040A608                 jnz     short loc_40A5F0
.text:0040A60A                 jmp     loc_40A430
.text:0040A60F ; ---------------------------------------------------------------------------
.text:0040A60F
.text:0040A60F loc_40A60F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040A60F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A612                 inc     edx
.text:0040A613                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A616                 jmp     short loc_40A601
.text:0040A618 ; ---------------------------------------------------------------------------
.text:0040A618
.text:0040A618 loc_40A618:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040A618                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A61B                 inc     edx
.text:0040A61C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A61F                 inc     edx
.text:0040A620                 mov     byte ptr [edx], 31h ; '1'
.text:0040A623                 inc     edx
.text:0040A624                 mov     byte ptr [edx], 32h ; '2'
.text:0040A627                 jmp     short loc_40A601
.text:0040A629 ; ---------------------------------------------------------------------------
.text:0040A629
.text:0040A629 loc_40A629:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040A629                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A62C                 inc     edx
.text:0040A62D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A630                 inc     edx
.text:0040A631                 mov     byte ptr [edx], 34h ; '4'
.text:0040A634                 inc     edx
.text:0040A635                 mov     byte ptr [edx], 30h ; '0'
.text:0040A638                 jmp     short loc_40A601
.text:0040A638 ; ---------------------------------------------------------------------------
.text:0040A63A                 align 10h
.text:0040A640
.text:0040A640 loc_40A640:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040A640                                         ; ___addmntentstr+4A↑j ...
.text:0040A640                 test    al, al
.text:0040A642                 jz      loc_40A400
.text:0040A648                 mov     ebx, [esp+4Ch+var_2C]
.text:0040A64C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040A64F                 call    strlen
.text:0040A654                 lea     edx, ds:1[eax*4]
.text:0040A65B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A65E                 call    malloc
.text:0040A663                 mov     [esp+4Ch+var_2C], eax
.text:0040A667                 mov     edx, eax
.text:0040A669                 lea     esi, [esi+0]
.text:0040A670
.text:0040A670 loc_40A670:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040A670                 movzx   eax, byte ptr [ebx]
.text:0040A673                 cmp     al, 20h ; ' '
.text:0040A675                 jz      short loc_40A6B0
.text:0040A677                 cmp     al, 9
.text:0040A679                 jz      short loc_40A698
.text:0040A67B                 cmp     al, 5Ch ; '\'
.text:0040A67D                 jz      short loc_40A68F
.text:0040A67F                 mov     [edx], al
.text:0040A681
.text:0040A681 loc_40A681:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040A681                                         ; ___addmntentstr+307↓j ...
.text:0040A681                 movzx   ecx, byte ptr [ebx]
.text:0040A684                 inc     edx
.text:0040A685                 inc     ebx
.text:0040A686                 test    cl, cl
.text:0040A688                 jnz     short loc_40A670
.text:0040A68A                 jmp     loc_40A400
.text:0040A68F ; ---------------------------------------------------------------------------
.text:0040A68F
.text:0040A68F loc_40A68F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040A68F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A692                 inc     edx
.text:0040A693                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A696                 jmp     short loc_40A681
.text:0040A698 ; ---------------------------------------------------------------------------
.text:0040A698
.text:0040A698 loc_40A698:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040A698                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A69B                 inc     edx
.text:0040A69C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A69F                 inc     edx
.text:0040A6A0                 mov     byte ptr [edx], 31h ; '1'
.text:0040A6A3                 inc     edx
.text:0040A6A4                 mov     byte ptr [edx], 32h ; '2'
.text:0040A6A7                 jmp     short loc_40A681
.text:0040A6A7 ; ---------------------------------------------------------------------------
.text:0040A6A9                 align 10h
.text:0040A6B0
.text:0040A6B0 loc_40A6B0:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040A6B0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A6B3                 inc     edx
.text:0040A6B4                 mov     byte ptr [edx], 30h ; '0'
.text:0040A6B7                 inc     edx
.text:0040A6B8                 mov     byte ptr [edx], 34h ; '4'
.text:0040A6BB                 inc     edx
.text:0040A6BC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A6BF                 jmp     short loc_40A681
.text:0040A6C1 ; ---------------------------------------------------------------------------
.text:0040A6C1
.text:0040A6C1 loc_40A6C1:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040A6C1                 movzx   eax, byte ptr [ecx]
.text:0040A6C4                 jmp     loc_40A640
.text:0040A6C4 ___addmntentstr endp
.text:0040A6C4
.text:0040A6C4 ; ---------------------------------------------------------------------------
.text:0040A6C9                 align 10h
.text:0040A6D0
.text:0040A6D0 ; =============== S U B R O U T I N E =======================================
.text:0040A6D0
.text:0040A6D0
.text:0040A6D0 sub_40A6D0      proc near               ; CODE XREF: sub_407CC0+99↑p
.text:0040A6D0
.text:0040A6D0 nBufferLength   = dword ptr -1Ch
.text:0040A6D0 lpBuffer        = dword ptr -18h
.text:0040A6D0 dwBytes         = dword ptr -14h
.text:0040A6D0 var_8           = dword ptr -8
.text:0040A6D0 var_4           = dword ptr -4
.text:0040A6D0
.text:0040A6D0                 sub     esp, 1Ch
.text:0040A6D3                 mov     [esp+1Ch+var_8], ebx
.text:0040A6D7                 mov     [esp+1Ch+var_4], esi
.text:0040A6DB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040A6E3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040A6EA                 call    GetLogicalDriveStringsA
.text:0040A6EF                 sub     esp, 8
.text:0040A6F2                 mov     ebx, eax
.text:0040A6F4                 call    GetProcessHeap
.text:0040A6F9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040A6FC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040A700                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040A708                 call    HeapAlloc
.text:0040A70D                 sub     esp, 0Ch
.text:0040A710                 mov     esi, eax
.text:0040A712                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040A715                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040A719                 call    GetLogicalDriveStringsA
.text:0040A71E                 sub     esp, 8
.text:0040A721                 mov     eax, esi
.text:0040A723                 mov     ebx, [esp+1Ch+var_8]
.text:0040A727                 mov     esi, [esp+1Ch+var_4]
.text:0040A72B                 add     esp, 1Ch
.text:0040A72E                 retn
.text:0040A72E sub_40A6D0      endp
.text:0040A72E
.text:0040A72F
.text:0040A72F ; =============== S U B R O U T I N E =======================================
.text:0040A72F
.text:0040A72F
.text:0040A72F ; int __cdecl sub_40A72F(char *, char *)
.text:0040A72F sub_40A72F      proc near               ; DATA XREF: sub_40A72F:loc_40A7BD↓o
.text:0040A72F
.text:0040A72F FileName        = dword ptr -1Ch
.text:0040A72F Mode            = dword ptr -18h
.text:0040A72F dwBytes         = dword ptr -14h
.text:0040A72F arg_0           = dword ptr  4
.text:0040A72F arg_4           = dword ptr  8
.text:0040A72F
.text:0040A72F                 ja      short $+2
.text:0040A731
.text:0040A731 loc_40A731:                             ; CODE XREF: sub_40A72F↑j
.text:0040A731                 jmp     short loc_40A740
.text:0040A731 ; ---------------------------------------------------------------------------
.text:0040A733                 align 10h
.text:0040A740
.text:0040A740 loc_40A740:                             ; CODE XREF: sub_40A72F:loc_40A731↑j
.text:0040A740                 push    edi
.text:0040A741                 push    esi
.text:0040A742                 push    ebx
.text:0040A743                 sub     esp, 10h
.text:0040A746                 mov     ebx, [esp+1Ch+arg_0]
.text:0040A74A                 mov     edx, [esp+1Ch+arg_4]
.text:0040A74E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040A751                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040A755                 call    fopen
.text:0040A75A                 test    eax, eax
.text:0040A75C                 mov     edi, eax
.text:0040A75E                 jz      short loc_40A7BD
.text:0040A760
.text:0040A760 loc_40A760:                             ; CODE XREF: sub_40A72F+A2↓j
.text:0040A760                                         ; sub_40A72F+AB↓j
.text:0040A760                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040A768                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040A76F                 call    GetLogicalDriveStringsA
.text:0040A774                 sub     esp, 8
.text:0040A777                 mov     esi, eax
.text:0040A779                 call    GetProcessHeap
.text:0040A77E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040A781                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040A785                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040A78D                 call    HeapAlloc
.text:0040A792                 sub     esp, 0Ch
.text:0040A795                 mov     ebx, eax
.text:0040A797                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040A79A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040A79E                 call    GetLogicalDriveStringsA
.text:0040A7A3                 mov     off_40E084, ebx ; "notset"
.text:0040A7A9                 sub     esp, 8
.text:0040A7AC                 xor     eax, eax
.text:0040A7AE                 test    ebx, ebx
.text:0040A7B0                 setz    al
.text:0040A7B3                 add     esp, 10h
.text:0040A7B6                 pop     ebx
.text:0040A7B7                 dec     eax
.text:0040A7B8                 and     eax, edi
.text:0040A7BA                 pop     esi
.text:0040A7BB                 pop     edi
.text:0040A7BC                 retn
.text:0040A7BD ; ---------------------------------------------------------------------------
.text:0040A7BD
.text:0040A7BD loc_40A7BD:                             ; CODE XREF: sub_40A72F+2F↑j
.text:0040A7BD                 mov     [esp+1Ch+Mode], offset sub_40A72F ; Mode
.text:0040A7C5                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040A7C8                 call    fopen
.text:0040A7CD                 test    eax, eax
.text:0040A7CF                 mov     edi, eax
.text:0040A7D1                 jnz     short loc_40A760
.text:0040A7D3                 call    sub_40AC80
.text:0040A7D8                 mov     edi, eax
.text:0040A7DA                 jmp     short loc_40A760
.text:0040A7DA sub_40A72F      endp
.text:0040A7DA
.text:0040A7DA ; ---------------------------------------------------------------------------
.text:0040A7DC                 align 10h
.text:0040A7E0                 sub     esp, 0Ch
.text:0040A7E3                 mov     eax, [esp+10h]
.text:0040A7E7                 test    eax, eax
.text:0040A7E9                 jz      short loc_40A7F3
.text:0040A7EB                 mov     [esp], eax
.text:0040A7EE                 call    fclose
.text:0040A7F3
.text:0040A7F3 loc_40A7F3:                             ; CODE XREF: .text:0040A7E9↑j
.text:0040A7F3                 call    GetProcessHeap
.text:0040A7F8                 mov     [esp], eax
.text:0040A7FB                 mov     ecx, off_40E084 ; "notset"
.text:0040A801                 mov     dword ptr [esp+4], 0
.text:0040A809                 mov     [esp+8], ecx
.text:0040A80D                 call    HeapFree
.text:0040A812                 mov     edx, off_40E080 ; "notset"
.text:0040A818                 sub     esp, 0Ch
.text:0040A81B                 mov     eax, 1
.text:0040A820                 mov     off_40E084, edx ; "notset"
.text:0040A826                 add     esp, 0Ch
.text:0040A829                 retn
.text:0040A829 ; ---------------------------------------------------------------------------
.text:0040A82A                 align 10h
.text:0040A830                 push    edi
.text:0040A831                 push    esi
.text:0040A832                 push    ebx
.text:0040A833                 sub     esp, 10h
.text:0040A836                 mov     edi, [esp+24h]
.text:0040A83A                 mov     [esp], edi
.text:0040A83D                 call    strlen
.text:0040A842                 mov     edx, [esp+20h]
.text:0040A846                 mov     esi, eax
.text:0040A848                 mov     ebx, [edx+0Ch]
.text:0040A84B                 nop
.text:0040A84C                 lea     esi, [esi+0]
.text:0040A850
.text:0040A850 loc_40A850:                             ; CODE XREF: .text:0040A881↓j
.text:0040A850                 mov     [esp+4], edi
.text:0040A854                 mov     [esp], ebx
.text:0040A857                 call    strstr
.text:0040A85C                 test    eax, eax
.text:0040A85E                 jz      short loc_40A883
.text:0040A860                 cmp     eax, ebx
.text:0040A862                 jz      short loc_40A885
.text:0040A864                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040A868                 jz      short loc_40A890
.text:0040A86A
.text:0040A86A loc_40A86A:                             ; CODE XREF: .text:0040A8A0↓j
.text:0040A86A                 mov     [esp], ebx
.text:0040A86D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040A875                 call    strchr
.text:0040A87A                 test    eax, eax
.text:0040A87C                 mov     ebx, eax
.text:0040A87E                 jz      short loc_40A883
.text:0040A880                 inc     ebx
.text:0040A881                 jmp     short loc_40A850
.text:0040A883 ; ---------------------------------------------------------------------------
.text:0040A883
.text:0040A883 loc_40A883:                             ; CODE XREF: .text:0040A85E↑j
.text:0040A883                                         ; .text:0040A87E↑j
.text:0040A883                 xor     eax, eax
.text:0040A885
.text:0040A885 loc_40A885:                             ; CODE XREF: .text:0040A862↑j
.text:0040A885                                         ; .text:0040A896↓j ...
.text:0040A885                 add     esp, 10h
.text:0040A888                 pop     ebx
.text:0040A889                 pop     esi
.text:0040A88A                 pop     edi
.text:0040A88B                 retn
.text:0040A88B ; ---------------------------------------------------------------------------
.text:0040A88C                 align 10h
.text:0040A890
.text:0040A890 loc_40A890:                             ; CODE XREF: .text:0040A868↑j
.text:0040A890                 movzx   edx, byte ptr [esi+eax]
.text:0040A894                 test    dl, dl
.text:0040A896                 jz      short loc_40A885
.text:0040A898                 cmp     dl, 3Dh ; '='
.text:0040A89B                 jz      short loc_40A885
.text:0040A89D                 cmp     dl, 2Ch ; ','
.text:0040A8A0                 jnz     short loc_40A86A
.text:0040A8A2                 jmp     short loc_40A885
.text:0040A8A2 ; ---------------------------------------------------------------------------
.text:0040A8A4                 align 10h
.text:0040A8B0
.text:0040A8B0 ; =============== S U B R O U T I N E =======================================
.text:0040A8B0
.text:0040A8B0
.text:0040A8B0 ; int __cdecl sub_40A8B0(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040A8B0 sub_40A8B0      proc near               ; CODE XREF: sub_40AA30+93↓p
.text:0040A8B0
.text:0040A8B0 pvReserved      = dword ptr -35Ch
.text:0040A8B0 pUnkOuter       = dword ptr -358h
.text:0040A8B0 dwClsContext    = dword ptr -354h
.text:0040A8B0 riid            = dword ptr -350h
.text:0040A8B0 ppv             = dword ptr -34Ch
.text:0040A8B0 cchWideChar     = dword ptr -348h
.text:0040A8B0 var_334         = byte ptr -334h
.text:0040A8B0 var_330         = dword ptr -330h
.text:0040A8B0 String2         = byte ptr -32Ch
.text:0040A8B0 WideCharStr     = word ptr -21Ch
.text:0040A8B0 lpMultiByteStr  = dword ptr  4
.text:0040A8B0 lpString1       = dword ptr  8
.text:0040A8B0
.text:0040A8B0                 push    edi
.text:0040A8B1                 push    esi
.text:0040A8B2                 push    ebx
.text:0040A8B3                 sub     esp, 350h
.text:0040A8B9                 mov     edi, [esp+35Ch+lpString1]
.text:0040A8C0                 mov     byte ptr [edi], 0
.text:0040A8C3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040A8CA                 call    OleInitialize
.text:0040A8CF                 sub     esp, 4
.text:0040A8D2                 cmp     eax, 1
.text:0040A8D5                 ja      loc_40AA0F
.text:0040A8DB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040A8E3                 lea     ecx, [esp+35Ch+var_330]
.text:0040A8E7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040A8EB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040A8F3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040A8FB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040A902                 call    CoCreateInstance
.text:0040A907                 sub     esp, 14h
.text:0040A90A                 test    eax, eax
.text:0040A90C                 js      loc_40AA0F
.text:0040A912                 mov     ebx, [esp+35Ch+var_330]
.text:0040A916                 lea     edx, [esp+35Ch+var_334]
.text:0040A91A                 mov     esi, [ebx]
.text:0040A91C                 mov     [esp+35Ch+dwClsContext], edx
.text:0040A920                 mov     [esp+35Ch+pvReserved], ebx
.text:0040A923                 xor     ebx, ebx
.text:0040A925                 mov     [esp+35Ch+pUnkOuter], offset dword_40C550
.text:0040A92D                 call    dword ptr [esi]
.text:0040A92F                 sub     esp, 0Ch
.text:0040A932                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040A939                 call    AreFileApisANSI
.text:0040A93E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040A946                 test    eax, eax
.text:0040A948                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040A94F                 setz    bl
.text:0040A952                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040A956                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040A95E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040A962                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040A96A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040A96D                 call    MultiByteToWideChar
.text:0040A972                 sub     esp, 18h
.text:0040A975                 test    eax, eax
.text:0040A977                 js      loc_40AA0F
.text:0040A97D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040A981                 mov     ebx, [edx]
.text:0040A983                 mov     [esp+35Ch+dwClsContext], 0
.text:0040A98B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040A98F                 mov     [esp+35Ch+pvReserved], edx
.text:0040A992                 call    dword ptr [ebx+14h]
.text:0040A995                 sub     esp, 0Ch
.text:0040A998                 test    eax, eax
.text:0040A99A                 js      short loc_40AA0F
.text:0040A99C                 mov     ebx, [esp+35Ch+var_330]
.text:0040A9A0                 lea     esi, [esp+35Ch+String2]
.text:0040A9A4                 mov     ecx, [ebx]
.text:0040A9A6                 mov     [esp+35Ch+pvReserved], ebx
.text:0040A9A9                 mov     [esp+35Ch+ppv], 0
.text:0040A9B1                 mov     [esp+35Ch+riid], 0
.text:0040A9B9                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040A9C1                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040A9C5                 call    dword ptr [ecx+0Ch]
.text:0040A9C8                 sub     esp, 14h
.text:0040A9CB                 mov     ebx, eax
.text:0040A9CD                 test    eax, eax
.text:0040A9CF                 js      short loc_40AA0F
.text:0040A9D1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040A9D5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040A9D8                 call    lstrcpyA
.text:0040A9DD                 sub     esp, 8
.text:0040A9E0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040A9E4                 mov     ecx, [edi]
.text:0040A9E6                 mov     [esp+35Ch+pvReserved], edi
.text:0040A9E9                 call    dword ptr [ecx+8]
.text:0040A9EC                 sub     esp, 4
.text:0040A9EF                 mov     edx, [esp+35Ch+var_330]
.text:0040A9F3                 mov     esi, [edx]
.text:0040A9F5                 mov     [esp+35Ch+pvReserved], edx
.text:0040A9F8                 call    dword ptr [esi+8]
.text:0040A9FB                 sub     esp, 4
.text:0040A9FE                 call    CoUninitialize
.text:0040AA03                 mov     eax, ebx
.text:0040AA05
.text:0040AA05 loc_40AA05:                             ; CODE XREF: sub_40A8B0+177↓j
.text:0040AA05                 add     esp, 350h
.text:0040AA0B                 pop     ebx
.text:0040AA0C                 pop     esi
.text:0040AA0D                 pop     edi
.text:0040AA0E                 retn
.text:0040AA0F ; ---------------------------------------------------------------------------
.text:0040AA0F
.text:0040AA0F loc_40AA0F:                             ; CODE XREF: sub_40A8B0+25↑j
.text:0040AA0F                                         ; sub_40A8B0+5C↑j ...
.text:0040AA0F                 call    sub_408E10
.text:0040AA14                 mov     edi, eax
.text:0040AA16                 call    _errno
.text:0040AA1B                 mov     [eax], edi
.text:0040AA1D                 call    CoUninitialize
.text:0040AA22                 mov     eax, 0FFFFFFFFh
.text:0040AA27                 jmp     short loc_40AA05
.text:0040AA27 sub_40A8B0      endp
.text:0040AA27
.text:0040AA27 ; ---------------------------------------------------------------------------
.text:0040AA29 ; const char aLnk_0[]
.text:0040AA29 aLnk_0          db '.lnk',0             ; DATA XREF: sub_40AA30+53↓o
.text:0040AA29                                         ; sub_40AA30:loc_40AA95↓o
.text:0040AA2E                 align 10h
.text:0040AA30
.text:0040AA30 ; =============== S U B R O U T I N E =======================================
.text:0040AA30
.text:0040AA30
.text:0040AA30 ; int __cdecl sub_40AA30(char *, LPSTR lpString1)
.text:0040AA30 sub_40AA30      proc near               ; CODE XREF: sub_408890+96↑p
.text:0040AA30
.text:0040AA30 Str             = dword ptr -1Ch
.text:0040AA30 Source          = dword ptr -18h
.text:0040AA30 Destination     = dword ptr -14h
.text:0040AA30 arg_0           = dword ptr  4
.text:0040AA30 lpString1       = dword ptr  8
.text:0040AA30
.text:0040AA30                 push    ebp
.text:0040AA31                 push    edi
.text:0040AA32                 push    esi
.text:0040AA33                 push    ebx
.text:0040AA34                 sub     esp, 0Ch
.text:0040AA37                 mov     ebx, [esp+1Ch+arg_0]
.text:0040AA3B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040AA3F                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040AA42                 call    strlen
.text:0040AA47                 add     eax, 5
.text:0040AA4A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040AA4D                 call    malloc
.text:0040AA52                 mov     [esp+1Ch+Destination], eax
.text:0040AA56                 test    eax, eax
.text:0040AA58                 jz      loc_40AB00
.text:0040AA5E                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040AA62                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040AA65                 call    strcpy
.text:0040AA6A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040AA72                 mov     eax, [esp+1Ch+Destination]
.text:0040AA76                 mov     [esp+1Ch+Str], eax ; Str
.text:0040AA79                 call    strrchr
.text:0040AA7E                 test    eax, eax
.text:0040AA80                 jz      short loc_40AA95
.text:0040AA82                 cld
.text:0040AA83                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:0040AA88                 mov     ecx, 5
.text:0040AA8D                 mov     esi, eax
.text:0040AA8F                 mov     edi, ebx
.text:0040AA91                 repe cmpsb
.text:0040AA93                 jz      short loc_40AAA9
.text:0040AA95
.text:0040AA95 loc_40AA95:                             ; CODE XREF: sub_40AA30+50↑j
.text:0040AA95                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0040AA9D                 mov     edx, [esp+1Ch+Destination]
.text:0040AAA1                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040AAA4                 call    strcat
.text:0040AAA9
.text:0040AAA9 loc_40AAA9:                             ; CODE XREF: sub_40AA30+63↑j
.text:0040AAA9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040AAB0                 call    SetErrorMode
.text:0040AAB5                 sub     esp, 4
.text:0040AAB8                 mov     ebx, [esp+1Ch+Destination]
.text:0040AABC                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040AAC0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040AAC3                 call    sub_40A8B0
.text:0040AAC8                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040AACB                 mov     esi, eax
.text:0040AACD                 call    free
.text:0040AAD2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040AAD9                 call    SetErrorMode
.text:0040AADE                 sub     esp, 4
.text:0040AAE1                 mov     [esp+1Ch+Str], ebp
.text:0040AAE4                 call    sub_407500
.text:0040AAE9                 inc     esi
.text:0040AAEA                 jz      short loc_40AB00
.text:0040AAEC                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:0040AAF0                 add     esp, 0Ch
.text:0040AAF3                 pop     ebx
.text:0040AAF4                 pop     esi
.text:0040AAF5                 pop     edi
.text:0040AAF6                 pop     ebp
.text:0040AAF7                 jmp     strlen
.text:0040AAF7 ; ---------------------------------------------------------------------------
.text:0040AAFC                 align 10h
.text:0040AB00
.text:0040AB00 loc_40AB00:                             ; CODE XREF: sub_40AA30+28↑j
.text:0040AB00                                         ; sub_40AA30+BA↑j
.text:0040AB00                 add     esp, 0Ch
.text:0040AB03                 mov     eax, 0FFFFFFFFh
.text:0040AB08                 pop     ebx
.text:0040AB09                 pop     esi
.text:0040AB0A                 pop     edi
.text:0040AB0B                 pop     ebp
.text:0040AB0C                 retn
.text:0040AB0C sub_40AA30      endp
.text:0040AB0C
.text:0040AB0C ; ---------------------------------------------------------------------------
.text:0040AB0D                 align 10h
.text:0040AB10
.text:0040AB10 ; =============== S U B R O U T I N E =======================================
.text:0040AB10
.text:0040AB10
.text:0040AB10 sub_40AB10      proc near               ; CODE XREF: sub_408950+17↑p
.text:0040AB10
.text:0040AB10 hFindFile       = dword ptr -0Ch
.text:0040AB10 var_8           = dword ptr -8
.text:0040AB10 var_4           = dword ptr -4
.text:0040AB10 arg_0           = dword ptr  4
.text:0040AB10
.text:0040AB10                 sub     esp, 0Ch
.text:0040AB13                 mov     [esp+0Ch+var_4], esi
.text:0040AB17                 mov     esi, [esp+0Ch+arg_0]
.text:0040AB1B                 mov     [esp+0Ch+var_8], ebx
.text:0040AB1F                 test    esi, esi
.text:0040AB21                 jz      short loc_40AB62
.text:0040AB23                 mov     eax, [esi]
.text:0040AB25                 cmp     eax, 0FFFFFFFFh
.text:0040AB28                 jz      short loc_40AB3F
.text:0040AB2A                 mov     [esp+0Ch+hFindFile], eax ; hFindFile
.text:0040AB2D                 call    FindClose
.text:0040AB32                 sub     esp, 4
.text:0040AB35                 test    eax, eax
.text:0040AB37                 jz      short loc_40AB52
.text:0040AB39
.text:0040AB39 loc_40AB39:                             ; CODE XREF: sub_40AB10+50↓j
.text:0040AB39                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040AB3F
.text:0040AB3F loc_40AB3F:                             ; CODE XREF: sub_40AB10+18↑j
.text:0040AB3F                 mov     dword ptr [esi+14h], 1
.text:0040AB46
.text:0040AB46 loc_40AB46:                             ; CODE XREF: sub_40AB10+5D↓j
.text:0040AB46                 mov     ebx, [esp+0Ch+var_8]
.text:0040AB4A                 mov     esi, [esp+0Ch+var_4]
.text:0040AB4E                 add     esp, 0Ch
.text:0040AB51                 retn
.text:0040AB52 ; ---------------------------------------------------------------------------
.text:0040AB52
.text:0040AB52 loc_40AB52:                             ; CODE XREF: sub_40AB10+27↑j
.text:0040AB52                 call    sub_408E10
.text:0040AB57                 mov     ebx, eax
.text:0040AB59                 call    _errno
.text:0040AB5E                 mov     [eax], ebx
.text:0040AB60                 jmp     short loc_40AB39
.text:0040AB62 ; ---------------------------------------------------------------------------
.text:0040AB62
.text:0040AB62 loc_40AB62:                             ; CODE XREF: sub_40AB10+11↑j
.text:0040AB62                 call    _errno
.text:0040AB67                 mov     dword ptr [eax], 16h
.text:0040AB6D                 jmp     short loc_40AB46
.text:0040AB6D sub_40AB10      endp
.text:0040AB6D
.text:0040AB6D ; ---------------------------------------------------------------------------
.text:0040AB6F                 align 10h
.text:0040AB70
.text:0040AB70 ; =============== S U B R O U T I N E =======================================
.text:0040AB70
.text:0040AB70 ; Attributes: noreturn
.text:0040AB70
.text:0040AB70 sub_40AB70      proc near               ; CODE XREF: .text:0040A099↑p
.text:0040AB70                                         ; sub_40AB70↓j
.text:0040AB70                 jmp     short sub_40AB70
.text:0040AB70 sub_40AB70      endp
.text:0040AB70
.text:0040AB70 ; ---------------------------------------------------------------------------
.text:0040AB72                 align 10h
.text:0040AB80
.text:0040AB80 ; =============== S U B R O U T I N E =======================================
.text:0040AB80
.text:0040AB80
.text:0040AB80 sub_40AB80      proc near               ; CODE XREF: .text:00409DF5↑p
.text:0040AB80
.text:0040AB80 FileHandle      = dword ptr -1Ch
.text:0040AB80 dwFileOffsetLow = dword ptr -18h
.text:0040AB80 dwFileOffsetHigh= dword ptr -14h
.text:0040AB80 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040AB80 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040AB80 var_8           = dword ptr -8
.text:0040AB80 var_4           = dword ptr -4
.text:0040AB80 arg_0           = dword ptr  4
.text:0040AB80
.text:0040AB80                 sub     esp, 1Ch
.text:0040AB83                 mov     edx, [esp+1Ch+arg_0]
.text:0040AB87                 mov     [esp+1Ch+var_4], esi
.text:0040AB8B                 mov     [esp+1Ch+var_8], ebx
.text:0040AB8F                 mov     ebx, [edx+10h]
.text:0040AB92                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040AB95                 call    _get_osfhandle
.text:0040AB9A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040AB9D                 mov     esi, eax
.text:0040AB9F                 call    _filelengthi64
.text:0040ABA4                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040ABA8                 cdq
.text:0040ABA9                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040ABAC                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040ABB0                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040ABB8                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040ABC0                 call    UnlockFile
.text:0040ABC5                 sub     esp, 14h
.text:0040ABC8                 mov     ebx, [esp+1Ch+var_8]
.text:0040ABCC                 mov     esi, [esp+1Ch+var_4]
.text:0040ABD0                 add     esp, 1Ch
.text:0040ABD3                 retn
.text:0040ABD3 sub_40AB80      endp
.text:0040ABD3
.text:0040ABD3 ; ---------------------------------------------------------------------------
.text:0040ABD4                 align 10h
.text:0040ABE0
.text:0040ABE0 ; =============== S U B R O U T I N E =======================================
.text:0040ABE0
.text:0040ABE0
.text:0040ABE0 ; int __cdecl sub_40ABE0(int, char *Control)
.text:0040ABE0 sub_40ABE0      proc near               ; CODE XREF: .text:00409CB6↑p
.text:0040ABE0                                         ; .text:00409D06↑p ...
.text:0040ABE0
.text:0040ABE0 Str             = dword ptr -1Ch
.text:0040ABE0 Val             = dword ptr -18h
.text:0040ABE0 var_8           = dword ptr -8
.text:0040ABE0 var_4           = dword ptr -4
.text:0040ABE0 arg_0           = dword ptr  4
.text:0040ABE0 Control         = dword ptr  8
.text:0040ABE0
.text:0040ABE0                 sub     esp, 1Ch
.text:0040ABE3                 xor     eax, eax
.text:0040ABE5                 mov     edx, [esp+1Ch+Control]
.text:0040ABE9                 mov     [esp+1Ch+var_4], esi
.text:0040ABED                 mov     esi, [esp+1Ch+arg_0]
.text:0040ABF1                 mov     [esp+1Ch+var_8], ebx
.text:0040ABF5                 mov     ebx, [esi]
.text:0040ABF7                 test    ebx, ebx
.text:0040ABF9                 jz      short loc_40AC28
.text:0040ABFB                 movzx   eax, byte ptr [edx]
.text:0040ABFE                 test    al, al
.text:0040AC00                 jz      short loc_40AC20
.text:0040AC02                 cmp     byte ptr [edx+1], 0
.text:0040AC06                 jnz     short loc_40AC60
.text:0040AC08                 movzx   ecx, byte ptr [ebx]
.text:0040AC0B                 mov     edx, ebx
.text:0040AC0D                 cmp     cl, al
.text:0040AC0F                 jz      short loc_40AC52
.text:0040AC11                 test    cl, cl
.text:0040AC13                 jnz     short loc_40AC34
.text:0040AC15                 lea     esi, [esi+0]
.text:0040AC19                 lea     edi, [edi+0]
.text:0040AC20
.text:0040AC20 loc_40AC20:                             ; CODE XREF: sub_40ABE0+20↑j
.text:0040AC20                                         ; sub_40ABE0+74↓j
.text:0040AC20                 mov     dword ptr [esi], 0
.text:0040AC26
.text:0040AC26 loc_40AC26:                             ; CODE XREF: sub_40ABE0+7C↓j
.text:0040AC26                 mov     eax, ebx
.text:0040AC28
.text:0040AC28 loc_40AC28:                             ; CODE XREF: sub_40ABE0+19↑j
.text:0040AC28                 mov     ebx, [esp+1Ch+var_8]
.text:0040AC2C                 mov     esi, [esp+1Ch+var_4]
.text:0040AC30                 add     esp, 1Ch
.text:0040AC33                 retn
.text:0040AC34 ; ---------------------------------------------------------------------------
.text:0040AC34
.text:0040AC34 loc_40AC34:                             ; CODE XREF: sub_40ABE0+33↑j
.text:0040AC34                 movsx   edx, al
.text:0040AC37                 mov     [esp+1Ch+Val], edx ; Val
.text:0040AC3B                 lea     edx, [ebx+1]
.text:0040AC3E                 mov     [esp+1Ch+Str], edx ; Str
.text:0040AC41                 call    strchr
.text:0040AC46                 lea     esi, [esi+0]
.text:0040AC49                 lea     edi, [edi+0]
.text:0040AC50
.text:0040AC50 loc_40AC50:                             ; CODE XREF: sub_40ABE0+8C↓j
.text:0040AC50                 mov     edx, eax
.text:0040AC52
.text:0040AC52 loc_40AC52:                             ; CODE XREF: sub_40ABE0+2F↑j
.text:0040AC52                 test    edx, edx
.text:0040AC54                 jz      short loc_40AC20
.text:0040AC56                 mov     byte ptr [edx], 0
.text:0040AC59                 inc     edx
.text:0040AC5A                 mov     [esi], edx
.text:0040AC5C                 jmp     short loc_40AC26
.text:0040AC5C ; ---------------------------------------------------------------------------
.text:0040AC5E                 align 10h
.text:0040AC60
.text:0040AC60 loc_40AC60:                             ; CODE XREF: sub_40ABE0+26↑j
.text:0040AC60                 mov     [esp+1Ch+Val], edx ; Control
.text:0040AC64                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040AC67                 call    strpbrk
.text:0040AC6C                 jmp     short loc_40AC50
.text:0040AC6C sub_40ABE0      endp
.text:0040AC6C
.text:0040AC6C ; ---------------------------------------------------------------------------
.text:0040AC6E                 align 10h
.text:0040AC70 ; const char aTmpf[]
.text:0040AC70 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40AC80+20↓o
.text:0040AC75 ; const char aWBd[]
.text:0040AC75 aWBd            db 'w+bD',0             ; DATA XREF: sub_40AC80+5E↓o
.text:0040AC7A                 align 10h
.text:0040AC80
.text:0040AC80 ; =============== S U B R O U T I N E =======================================
.text:0040AC80
.text:0040AC80
.text:0040AC80 sub_40AC80      proc near               ; CODE XREF: sub_40A72F+A4↑p
.text:0040AC80
.text:0040AC80 FileHandle      = dword ptr -13Ch
.text:0040AC80 Format          = dword ptr -138h
.text:0040AC80 var_134         = dword ptr -134h
.text:0040AC80 var_130         = dword ptr -130h
.text:0040AC80 var_12C         = dword ptr -12Ch
.text:0040AC80 Buffer          = byte ptr -11Ch
.text:0040AC80 var_8           = dword ptr -8
.text:0040AC80 var_4           = dword ptr -4
.text:0040AC80
.text:0040AC80                 sub     esp, 13Ch
.text:0040AC86                 mov     [esp+13Ch+var_8], ebx
.text:0040AC8D                 lea     ebx, [esp+13Ch+Buffer]
.text:0040AC91                 mov     [esp+13Ch+var_4], esi
.text:0040AC98                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040ACA0                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040ACA8                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040ACB0                 mov     [esp+13Ch+Format], 104h ; int
.text:0040ACB8                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040ACBB                 call    sub_40AD50
.text:0040ACC0                 xor     edx, edx
.text:0040ACC2                 test    eax, eax
.text:0040ACC4                 jnz     short loc_40ACF6
.text:0040ACC6                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040ACC9                 mov     [esp+13Ch+Format], 0 ; int
.text:0040ACD1                 call    sub_40B0D0
.text:0040ACD6                 xor     edx, edx
.text:0040ACD8                 mov     ebx, eax
.text:0040ACDA                 test    eax, eax
.text:0040ACDC                 js      short loc_40ACF6
.text:0040ACDE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040ACE6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040ACE9                 call    _fdopen
.text:0040ACEE                 test    eax, eax
.text:0040ACF0                 mov     esi, eax
.text:0040ACF2                 jz      short loc_40AD0D
.text:0040ACF4
.text:0040ACF4 loc_40ACF4:                             ; CODE XREF: sub_40AC80+95↓j
.text:0040ACF4                 mov     edx, esi
.text:0040ACF6
.text:0040ACF6 loc_40ACF6:                             ; CODE XREF: sub_40AC80+44↑j
.text:0040ACF6                                         ; sub_40AC80+5C↑j
.text:0040ACF6                 mov     ebx, [esp+13Ch+var_8]
.text:0040ACFD                 mov     eax, edx
.text:0040ACFF                 mov     esi, [esp+13Ch+var_4]
.text:0040AD06                 add     esp, 13Ch
.text:0040AD0C                 retn
.text:0040AD0D ; ---------------------------------------------------------------------------
.text:0040AD0D
.text:0040AD0D loc_40AD0D:                             ; CODE XREF: sub_40AC80+72↑j
.text:0040AD0D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040AD10                 call    _close
.text:0040AD15                 jmp     short loc_40ACF4
.text:0040AD15 sub_40AC80      endp
.text:0040AD15
.text:0040AD15 ; ---------------------------------------------------------------------------
.text:0040AD17                 align 10h
.text:0040AD20 aFile           db 'file',0             ; DATA XREF: sub_40AD50:loc_40AD7C↓o
.text:0040AD25 ; const char aSSxxxxxx[]
.text:0040AD25 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40AD50+9B↓o
.text:0040AD35 ; const char aTemp[]
.text:0040AD35 aTemp           db 'TEMP',0             ; DATA XREF: sub_40AD50:loc_40AE32↓o
.text:0040AD35                                         ; sub_40AD50:loc_40AE72↓o ...
.text:0040AD3A ; const char aTmp[]
.text:0040AD3A aTmp            db '/tmp',0             ; DATA XREF: sub_40AD50+12F↓o
.text:0040AD3A                                         ; sub_40AD50+141↓o ...
.text:0040AD3F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40AD50:loc_40AEF0↓o
.text:0040AD46 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40AD50:loc_40AF80↓o
.text:0040AD4A                 align 10h
.text:0040AD50
.text:0040AD50 ; =============== S U B R O U T I N E =======================================
.text:0040AD50
.text:0040AD50
.text:0040AD50 ; int __cdecl sub_40AD50(char *Buffer, int, char *, char *, int)
.text:0040AD50 sub_40AD50      proc near               ; CODE XREF: sub_40AC80+3B↑p
.text:0040AD50
.text:0040AD50 Str             = dword ptr -1BCh
.text:0040AD50 Format          = dword ptr -1B8h
.text:0040AD50 var_1B4         = dword ptr -1B4h
.text:0040AD50 var_1B0         = dword ptr -1B0h
.text:0040AD50 var_1AC         = dword ptr -1ACh
.text:0040AD50 var_1A8         = dword ptr -1A8h
.text:0040AD50 var_19C         = dword ptr -19Ch
.text:0040AD50 var_13C         = dword ptr -13Ch
.text:0040AD50 var_DC          = dword ptr -0DCh
.text:0040AD50 var_7C          = dword ptr -7Ch
.text:0040AD50 Buffer          = dword ptr  4
.text:0040AD50 arg_4           = dword ptr  8
.text:0040AD50 arg_8           = dword ptr  0Ch
.text:0040AD50 arg_C           = dword ptr  10h
.text:0040AD50 arg_10          = dword ptr  14h
.text:0040AD50
.text:0040AD50                 push    ebp
.text:0040AD51                 push    edi
.text:0040AD52                 push    esi
.text:0040AD53                 push    ebx
.text:0040AD54                 sub     esp, 1ACh
.text:0040AD5A                 mov     eax, [esp+1BCh+arg_C]
.text:0040AD61                 mov     esi, [esp+1BCh+arg_8]
.text:0040AD68                 test    eax, eax
.text:0040AD6A                 jz      short loc_40AD7C
.text:0040AD6C                 mov     edx, [esp+1BCh+arg_C]
.text:0040AD73                 cmp     byte ptr [edx], 0
.text:0040AD76                 jnz     loc_40AFB0
.text:0040AD7C
.text:0040AD7C loc_40AD7C:                             ; CODE XREF: sub_40AD50+1A↑j
.text:0040AD7C                 mov     eax, offset aFile ; "file"
.text:0040AD81                 mov     ebp, 4
.text:0040AD86                 mov     [esp+1BCh+arg_C], eax
.text:0040AD8D
.text:0040AD8D loc_40AD8D:                             ; CODE XREF: sub_40AD50+274↓j
.text:0040AD8D                                         ; sub_40AD50+27F↓j
.text:0040AD8D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040AD94                 test    ebx, ebx
.text:0040AD96                 jnz     loc_40AEF0
.text:0040AD9C
.text:0040AD9C loc_40AD9C:                             ; CODE XREF: sub_40AD50+21C↓j
.text:0040AD9C                                         ; sub_40AD50+224↓j ...
.text:0040AD9C                 test    esi, esi
.text:0040AD9E                 jz      loc_40AE32
.text:0040ADA4
.text:0040ADA4 loc_40ADA4:                             ; CODE XREF: sub_40AD50+176↓j
.text:0040ADA4                                         ; sub_40AD50+19A↓j
.text:0040ADA4                 mov     [esp+1BCh+Str], esi ; Str
.text:0040ADA7                 call    strlen
.text:0040ADAC                 test    eax, eax
.text:0040ADAE                 mov     edx, eax
.text:0040ADB0                 jz      short loc_40ADC0
.text:0040ADB2                 movzx   eax, byte ptr [eax+esi-1]
.text:0040ADB7                 cmp     al, 2Fh ; '/'
.text:0040ADB9                 jz      short loc_40AE20
.text:0040ADBB                 cmp     al, 5Ch ; '\'
.text:0040ADBD                 jz      short loc_40AE20
.text:0040ADBF                 nop
.text:0040ADC0
.text:0040ADC0 loc_40ADC0:                             ; CODE XREF: sub_40AD50+60↑j
.text:0040ADC0                                         ; sub_40AD50+D1↓j ...
.text:0040ADC0                 lea     edi, [ebp+edx+8]
.text:0040ADC4                 cmp     [esp+1BCh+arg_4], edi
.text:0040ADCB                 jb      short loc_40AE08
.text:0040ADCD                 mov     [esp+1BCh+var_1AC], ebp
.text:0040ADD1                 mov     ecx, [esp+1BCh+arg_C]
.text:0040ADD8                 mov     ebp, [esp+1BCh+Buffer]
.text:0040ADDF                 mov     [esp+1BCh+var_1B0], esi
.text:0040ADE3                 mov     [esp+1BCh+var_1A8], ecx
.text:0040ADE7                 mov     [esp+1BCh+var_1B4], edx
.text:0040ADEB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040ADF3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040ADF6                 call    sprintf
.text:0040ADFB                 xor     eax, eax
.text:0040ADFD
.text:0040ADFD loc_40ADFD:                             ; CODE XREF: sub_40AD50+C8↓j
.text:0040ADFD                 add     esp, 1ACh
.text:0040AE03                 pop     ebx
.text:0040AE04                 pop     esi
.text:0040AE05                 pop     edi
.text:0040AE06                 pop     ebp
.text:0040AE07                 retn
.text:0040AE08 ; ---------------------------------------------------------------------------
.text:0040AE08
.text:0040AE08 loc_40AE08:                             ; CODE XREF: sub_40AD50+7B↑j
.text:0040AE08                 call    _errno
.text:0040AE0D                 mov     dword ptr [eax], 16h
.text:0040AE13
.text:0040AE13 loc_40AE13:                             ; CODE XREF: sub_40AD50+187↓j
.text:0040AE13                 mov     eax, 0FFFFFFFFh
.text:0040AE18                 jmp     short loc_40ADFD
.text:0040AE18 ; ---------------------------------------------------------------------------
.text:0040AE1A                 align 10h
.text:0040AE20
.text:0040AE20 loc_40AE20:                             ; CODE XREF: sub_40AD50+69↑j
.text:0040AE20                                         ; sub_40AD50+6D↑j ...
.text:0040AE20                 dec     edx
.text:0040AE21                 jz      short loc_40ADC0
.text:0040AE23                 movzx   eax, byte ptr [edx+esi-1]
.text:0040AE28                 cmp     al, 2Fh ; '/'
.text:0040AE2A                 jz      short loc_40AE20
.text:0040AE2C                 cmp     al, 5Ch ; '\'
.text:0040AE2E                 jz      short loc_40AE20
.text:0040AE30                 jmp     short loc_40ADC0
.text:0040AE32 ; ---------------------------------------------------------------------------
.text:0040AE32
.text:0040AE32 loc_40AE32:                             ; CODE XREF: sub_40AD50+4E↑j
.text:0040AE32                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AE39                 lea     esi, [esp+1BCh+var_13C]
.text:0040AE40                 call    getenv
.text:0040AE45                 mov     [esp+1BCh+Format], eax ; char *
.text:0040AE49                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040AE4D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AE54                 call    sub_408890
.text:0040AE59                 test    eax, eax
.text:0040AE5B                 jnz     short loc_40AE72
.text:0040AE5D                 mov     edi, [esp+1BCh+var_13C]
.text:0040AE64                 and     edi, 0F000h
.text:0040AE6A                 cmp     edi, 4000h
.text:0040AE70                 jz      short loc_40AEDC
.text:0040AE72
.text:0040AE72 loc_40AE72:                             ; CODE XREF: sub_40AD50+10B↑j
.text:0040AE72                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AE79                 call    getenv
.text:0040AE7E                 cld
.text:0040AE7F                 mov     edx, offset aTmp ; "/tmp"
.text:0040AE84                 mov     esi, eax
.text:0040AE86                 mov     ecx, 5
.text:0040AE8B                 mov     edi, edx
.text:0040AE8D                 repe cmpsb
.text:0040AE8F                 jz      short loc_40AECC
.text:0040AE91                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040AE99                 lea     ecx, [esp+1BCh+var_19C]
.text:0040AE9D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040AEA1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AEA8                 call    sub_408890
.text:0040AEAD                 test    eax, eax
.text:0040AEAF                 jnz     short loc_40AECC
.text:0040AEB1                 mov     ebx, [esp+1BCh+var_19C]
.text:0040AEB5                 mov     esi, offset aTmp ; "/tmp"
.text:0040AEBA                 and     ebx, 0F000h
.text:0040AEC0                 cmp     ebx, 4000h
.text:0040AEC6                 jz      loc_40ADA4
.text:0040AECC
.text:0040AECC loc_40AECC:                             ; CODE XREF: sub_40AD50+13F↑j
.text:0040AECC                                         ; sub_40AD50+15F↑j
.text:0040AECC                 call    _errno
.text:0040AED1                 mov     dword ptr [eax], 2
.text:0040AED7                 jmp     loc_40AE13
.text:0040AEDC ; ---------------------------------------------------------------------------
.text:0040AEDC
.text:0040AEDC loc_40AEDC:                             ; CODE XREF: sub_40AD50+120↑j
.text:0040AEDC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AEE3                 call    getenv
.text:0040AEE8                 mov     esi, eax
.text:0040AEEA                 jmp     loc_40ADA4
.text:0040AEEA ; ---------------------------------------------------------------------------
.text:0040AEEF                 align 10h
.text:0040AEF0
.text:0040AEF0 loc_40AEF0:                             ; CODE XREF: sub_40AD50+46↑j
.text:0040AEF0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040AEF7                 call    sub_40B5E0
.text:0040AEFC                 test    eax, eax
.text:0040AEFE                 mov     ebx, eax
.text:0040AF00                 jz      short loc_40AF80
.text:0040AF02
.text:0040AF02 loc_40AF02:                             ; CODE XREF: sub_40AD50+240↓j
.text:0040AF02                                         ; sub_40AD50+256↓j
.text:0040AF02                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040AF06                 lea     edi, [esp+1BCh+var_7C]
.text:0040AF0D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040AF11                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AF18                 call    sub_408890
.text:0040AF1D                 test    eax, eax
.text:0040AF1F                 jnz     short loc_40AF36
.text:0040AF21                 mov     edx, [esp+1BCh+var_7C]
.text:0040AF28                 and     edx, 0F000h
.text:0040AF2E                 cmp     edx, 4000h
.text:0040AF34                 jz      short loc_40AF79
.text:0040AF36
.text:0040AF36 loc_40AF36:                             ; CODE XREF: sub_40AD50+1CF↑j
.text:0040AF36                                         ; sub_40AD50+25C↓j
.text:0040AF36                 test    esi, esi
.text:0040AF38                 jz      short loc_40AF72
.text:0040AF3A                 mov     [esp+1BCh+Format], esi ; char *
.text:0040AF3E                 lea     ecx, [esp+1BCh+var_DC]
.text:0040AF45                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040AF49                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AF50                 call    sub_408890
.text:0040AF55                 test    eax, eax
.text:0040AF57                 jnz     short loc_40AF72
.text:0040AF59                 mov     ebx, [esp+1BCh+var_DC]
.text:0040AF60                 and     ebx, 0F000h
.text:0040AF66                 cmp     ebx, 4000h
.text:0040AF6C                 jz      loc_40AD9C
.text:0040AF72
.text:0040AF72 loc_40AF72:                             ; CODE XREF: sub_40AD50+1E8↑j
.text:0040AF72                                         ; sub_40AD50+207↑j
.text:0040AF72                 xor     esi, esi
.text:0040AF74                 jmp     loc_40AD9C
.text:0040AF79 ; ---------------------------------------------------------------------------
.text:0040AF79
.text:0040AF79 loc_40AF79:                             ; CODE XREF: sub_40AD50+1E4↑j
.text:0040AF79                 mov     esi, ebx
.text:0040AF7B                 jmp     loc_40AD9C
.text:0040AF80 ; ---------------------------------------------------------------------------
.text:0040AF80
.text:0040AF80 loc_40AF80:                             ; CODE XREF: sub_40AD50+1B0↑j
.text:0040AF80                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040AF87                 call    sub_40B5E0
.text:0040AF8C                 test    eax, eax
.text:0040AF8E                 mov     ebx, eax
.text:0040AF90                 jnz     loc_40AF02
.text:0040AF96                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AF9D                 call    sub_40B5E0
.text:0040AFA2                 test    eax, eax
.text:0040AFA4                 mov     ebx, eax
.text:0040AFA6                 jnz     loc_40AF02
.text:0040AFAC                 jmp     short loc_40AF36
.text:0040AFAC ; ---------------------------------------------------------------------------
.text:0040AFAE                 align 10h
.text:0040AFB0
.text:0040AFB0 loc_40AFB0:                             ; CODE XREF: sub_40AD50+26↑j
.text:0040AFB0                 mov     ecx, [esp+1BCh+arg_C]
.text:0040AFB7                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040AFBA                 call    strlen
.text:0040AFBF                 cmp     eax, 5
.text:0040AFC2                 mov     ebp, eax
.text:0040AFC4                 jbe     loc_40AD8D
.text:0040AFCA                 mov     ebp, 5
.text:0040AFCF                 jmp     loc_40AD8D
.text:0040AFCF sub_40AD50      endp
.text:0040AFCF
.text:0040AFCF ; ---------------------------------------------------------------------------
.text:0040AFD4                 align 10h
.text:0040AFE0 byte_40AFE0     db 61h                  ; DATA XREF: sub_40B0D0+DC↓r
.text:0040AFE0                                         ; sub_40B0D0+122↓r ...
.text:0040AFE1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040B01F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40B0D0+39↓o
.text:0040B026                 align 20h
.text:0040B040 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040B040                                         ; DATA XREF: sub_40B0D0:loc_40B348↓o
.text:0040B05F                 align 10h
.text:0040B060 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040B060                                         ; DATA XREF: sub_40B0D0+405↓o
.text:0040B08B                 align 20h
.text:0040B0A0 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040B0A0                                         ; DATA XREF: sub_40B0D0+40D↓o
.text:0040B0C3                 align 10h
.text:0040B0D0
.text:0040B0D0 ; =============== S U B R O U T I N E =======================================
.text:0040B0D0
.text:0040B0D0
.text:0040B0D0 ; int __cdecl sub_40B0D0(char *FileName, int)
.text:0040B0D0 sub_40B0D0      proc near               ; CODE XREF: sub_40AC80+51↑p
.text:0040B0D0
.text:0040B0D0 Str             = dword ptr -9Ch
.text:0040B0D0 OpenFlag        = dword ptr -98h
.text:0040B0D0 var_94          = dword ptr -94h
.text:0040B0D0 var_90          = dword ptr -90h
.text:0040B0D0 var_8C          = dword ptr -8Ch
.text:0040B0D0 var_88          = dword ptr -88h
.text:0040B0D0 var_84          = dword ptr -84h
.text:0040B0D0 var_80          = dword ptr -80h
.text:0040B0D0 var_7C          = dword ptr -7Ch
.text:0040B0D0 FileName        = dword ptr  4
.text:0040B0D0 arg_4           = dword ptr  8
.text:0040B0D0
.text:0040B0D0                 push    ebp
.text:0040B0D1                 push    edi
.text:0040B0D2                 push    esi
.text:0040B0D3                 push    ebx
.text:0040B0D4                 sub     esp, 8Ch
.text:0040B0DA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040B0E2                 call    _errno
.text:0040B0E7                 mov     edx, [eax]
.text:0040B0E9                 mov     [esp+9Ch+var_8C], edx
.text:0040B0ED                 mov     edx, [esp+9Ch+FileName]
.text:0040B0F4                 mov     [esp+9Ch+Str], edx ; Str
.text:0040B0F7                 call    strlen
.text:0040B0FC                 cmp     eax, 5
.text:0040B0FF                 jle     short loc_40B11D
.text:0040B101                 cld
.text:0040B102                 mov     ecx, [esp+9Ch+FileName]
.text:0040B109                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040B10E                 lea     esi, [eax+ecx-6]
.text:0040B112                 mov     ecx, 7
.text:0040B117                 mov     ebp, esi
.text:0040B119                 repe cmpsb
.text:0040B11B                 jz      short loc_40B138
.text:0040B11D
.text:0040B11D loc_40B11D:                             ; CODE XREF: sub_40B0D0+2F↑j
.text:0040B11D                 call    _errno
.text:0040B122                 mov     dword ptr [eax], 16h
.text:0040B128
.text:0040B128 loc_40B128:                             ; CODE XREF: sub_40B0D0+295↓j
.text:0040B128                                         ; sub_40B0D0+2D8↓j ...
.text:0040B128                 mov     eax, 0FFFFFFFFh
.text:0040B12D
.text:0040B12D loc_40B12D:                             ; CODE XREF: sub_40B0D0+2EF↓j
.text:0040B12D                                         ; sub_40B0D0+332↓j
.text:0040B12D                 add     esp, 8Ch
.text:0040B133                 pop     ebx
.text:0040B134                 pop     esi
.text:0040B135                 pop     edi
.text:0040B136                 pop     ebp
.text:0040B137                 retn
.text:0040B138 ; ---------------------------------------------------------------------------
.text:0040B138
.text:0040B138 loc_40B138:                             ; CODE XREF: sub_40B0D0+4B↑j
.text:0040B138                 mov     ecx, ds:dword_40F494
.text:0040B13E                 mov     edi, ds:dword_40F490
.text:0040B144                 mov     eax, ecx
.text:0040B146                 or      eax, edi
.text:0040B148                 jz      loc_40B483
.text:0040B14E
.text:0040B14E loc_40B14E:                             ; CODE XREF: sub_40B0D0+3F8↓j
.text:0040B14E                 rdtsc
.text:0040B150                 mov     edi, edx
.text:0040B152                 mov     esi, eax
.text:0040B154                 call    _getpid
.text:0040B159                 mov     ebx, eax
.text:0040B15B                 mov     edx, esi
.text:0040B15D                 sar     ebx, 1Fh
.text:0040B160                 xor     edx, eax
.text:0040B162                 mov     ecx, edi
.text:0040B164                 xor     ecx, ebx
.text:0040B166                 mov     ebx, edx
.text:0040B168                 mov     esi, ecx
.text:0040B16A                 add     ebx, ds:dword_40F490
.text:0040B170                 adc     esi, ds:dword_40F494
.text:0040B176                 xor     edi, edi
.text:0040B178                 mov     ds:dword_40F490, ebx
.text:0040B17E                 mov     ds:dword_40F494, esi
.text:0040B184                 lea     esi, [esi+0]
.text:0040B18A                 lea     edi, [edi+0]
.text:0040B190
.text:0040B190 loc_40B190:                             ; CODE XREF: sub_40B0D0+2C7↓j
.text:0040B190                 mov     [esp+9Ch+Str], ebx
.text:0040B193                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B197                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B19F                 mov     [esp+9Ch+var_90], 0
.text:0040B1A7                 call    sub_40CEC0
.text:0040B1AC                 movzx   ecx, ds:byte_40AFE0[eax]
.text:0040B1B3                 mov     [ebp+0], cl
.text:0040B1B6                 mov     [esp+9Ch+Str], ebx
.text:0040B1B9                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B1BD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B1C5                 mov     [esp+9Ch+var_90], 0
.text:0040B1CD                 call    sub_40CDA0
.text:0040B1D2                 mov     [esp+9Ch+Str], eax
.text:0040B1D5                 mov     ebx, eax
.text:0040B1D7                 mov     esi, edx
.text:0040B1D9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B1E1                 mov     [esp+9Ch+var_90], 0
.text:0040B1E9                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B1ED                 call    sub_40CEC0
.text:0040B1F2                 movzx   edx, ds:byte_40AFE0[eax]
.text:0040B1F9                 mov     [ebp+1], dl
.text:0040B1FC                 mov     [esp+9Ch+Str], ebx
.text:0040B1FF                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B203                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B20B                 mov     [esp+9Ch+var_90], 0
.text:0040B213                 call    sub_40CDA0
.text:0040B218                 mov     [esp+9Ch+Str], eax
.text:0040B21B                 mov     ebx, eax
.text:0040B21D                 mov     esi, edx
.text:0040B21F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B227                 mov     [esp+9Ch+var_90], 0
.text:0040B22F                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B233                 call    sub_40CEC0
.text:0040B238                 movzx   ecx, ds:byte_40AFE0[eax]
.text:0040B23F                 mov     [ebp+2], cl
.text:0040B242                 mov     [esp+9Ch+Str], ebx
.text:0040B245                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B249                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B251                 mov     [esp+9Ch+var_90], 0
.text:0040B259                 call    sub_40CDA0
.text:0040B25E                 mov     [esp+9Ch+Str], eax
.text:0040B261                 mov     ebx, eax
.text:0040B263                 mov     esi, edx
.text:0040B265                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B26D                 mov     [esp+9Ch+var_90], 0
.text:0040B275                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B279                 call    sub_40CEC0
.text:0040B27E                 movzx   edx, ds:byte_40AFE0[eax]
.text:0040B285                 mov     [ebp+3], dl
.text:0040B288                 mov     [esp+9Ch+Str], ebx
.text:0040B28B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B28F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B297                 mov     [esp+9Ch+var_90], 0
.text:0040B29F                 call    sub_40CDA0
.text:0040B2A4                 mov     [esp+9Ch+Str], eax
.text:0040B2A7                 mov     ebx, eax
.text:0040B2A9                 mov     esi, edx
.text:0040B2AB                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B2B3                 mov     [esp+9Ch+var_90], 0
.text:0040B2BB                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B2BF                 call    sub_40CEC0
.text:0040B2C4                 movzx   ecx, ds:byte_40AFE0[eax]
.text:0040B2CB                 mov     [ebp+4], cl
.text:0040B2CE                 mov     [esp+9Ch+Str], ebx
.text:0040B2D1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B2D9                 mov     [esp+9Ch+var_90], 0
.text:0040B2E1                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B2E5                 call    sub_40CDA0
.text:0040B2EA                 mov     [esp+9Ch+Str], eax
.text:0040B2ED                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B2F5                 mov     [esp+9Ch+var_90], 0
.text:0040B2FD                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B301                 call    sub_40CEC0
.text:0040B306                 movzx   ebx, ds:byte_40AFE0[eax]
.text:0040B30D                 mov     [ebp+5], bl
.text:0040B310                 cmp     [esp+9Ch+arg_4], 1
.text:0040B318                 jz      loc_40B467
.text:0040B31E                 cmp     [esp+9Ch+arg_4], 1
.text:0040B326                 jle     loc_40B430
.text:0040B32C                 cmp     [esp+9Ch+arg_4], 2
.text:0040B334                 jz      loc_40B407
.text:0040B33A                 cmp     [esp+9Ch+arg_4], 3
.text:0040B342                 jz      loc_40B3C4
.text:0040B348
.text:0040B348 loc_40B348:                             ; CODE XREF: sub_40B0D0+369↓j
.text:0040B348                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040B34D                 test    ebx, ebx
.text:0040B34F                 jnz     loc_40B4CD
.text:0040B355
.text:0040B355 loc_40B355:                             ; CODE XREF: sub_40B0D0+354↓j
.text:0040B355                 mov     eax, [esp+9Ch+var_88]
.text:0040B359                 test    eax, eax
.text:0040B35B                 jns     short loc_40B3B0
.text:0040B35D                 call    _errno
.text:0040B362                 cmp     dword ptr [eax], 11h
.text:0040B365                 jnz     loc_40B128
.text:0040B36B
.text:0040B36B loc_40B36B:                             ; CODE XREF: sub_40B0D0+315↓j
.text:0040B36B                 mov     edx, ds:dword_40F490
.text:0040B371                 mov     ecx, ds:dword_40F494
.text:0040B377                 add     edx, 1E61h
.text:0040B37D                 adc     ecx, 0
.text:0040B380                 mov     ebx, edx
.text:0040B382                 inc     edi
.text:0040B383                 mov     ds:dword_40F490, edx
.text:0040B389                 cmp     edi, 3A2F8h
.text:0040B38F                 mov     esi, ecx
.text:0040B391                 mov     ds:dword_40F494, ecx
.text:0040B397                 jb      loc_40B190
.text:0040B39D                 call    _errno
.text:0040B3A2                 mov     dword ptr [eax], 11h
.text:0040B3A8                 jmp     loc_40B128
.text:0040B3A8 ; ---------------------------------------------------------------------------
.text:0040B3AD                 align 10h
.text:0040B3B0
.text:0040B3B0 loc_40B3B0:                             ; CODE XREF: sub_40B0D0+28B↑j
.text:0040B3B0                 call    _errno
.text:0040B3B5                 mov     esi, [esp+9Ch+var_8C]
.text:0040B3B9                 mov     [eax], esi
.text:0040B3BB                 mov     eax, [esp+9Ch+var_88]
.text:0040B3BF                 jmp     loc_40B12D
.text:0040B3C4 ; ---------------------------------------------------------------------------
.text:0040B3C4
.text:0040B3C4 loc_40B3C4:                             ; CODE XREF: sub_40B0D0+272↑j
.text:0040B3C4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040B3CB                 mov     ecx, [esp+9Ch+FileName]
.text:0040B3D2                 lea     esi, [esp+9Ch+var_7C]
.text:0040B3D6                 mov     [esp+9Ch+var_94], esi ; int
.text:0040B3DA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040B3DE                 call    sub_4070E0
.text:0040B3E3                 test    eax, eax
.text:0040B3E5                 jns     short loc_40B36B
.text:0040B3E7                 call    _errno
.text:0040B3EC                 cmp     dword ptr [eax], 2
.text:0040B3EF                 jnz     loc_40B128
.text:0040B3F5                 call    _errno
.text:0040B3FA                 mov     ebx, [esp+9Ch+var_8C]
.text:0040B3FE                 mov     [eax], ebx
.text:0040B400                 xor     eax, eax
.text:0040B402                 jmp     loc_40B12D
.text:0040B407 ; ---------------------------------------------------------------------------
.text:0040B407
.text:0040B407 loc_40B407:                             ; CODE XREF: sub_40B0D0+264↑j
.text:0040B407                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040B40F                 mov     edx, [esp+9Ch+FileName]
.text:0040B416                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040B419                 call    sub_40B500
.text:0040B41E                 mov     esi, esi
.text:0040B420
.text:0040B420 loc_40B420:                             ; CODE XREF: sub_40B0D0+395↓j
.text:0040B420                 mov     [esp+9Ch+var_88], eax
.text:0040B424                 jmp     loc_40B355
.text:0040B424 ; ---------------------------------------------------------------------------
.text:0040B429                 align 10h
.text:0040B430
.text:0040B430 loc_40B430:                             ; CODE XREF: sub_40B0D0+256↑j
.text:0040B430                 mov     eax, [esp+9Ch+arg_4]
.text:0040B437                 test    eax, eax
.text:0040B439                 jnz     loc_40B348
.text:0040B43F                 mov     [esp+9Ch+var_94], 180h
.text:0040B447                 mov     esi, [esp+9Ch+FileName]
.text:0040B44E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040B456                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040B459                 lea     esi, [esi+0]
.text:0040B460
.text:0040B460 loc_40B460:                             ; CODE XREF: sub_40B0D0+3B1↓j
.text:0040B460                 call    _open
.text:0040B465                 jmp     short loc_40B420
.text:0040B467 ; ---------------------------------------------------------------------------
.text:0040B467
.text:0040B467 loc_40B467:                             ; CODE XREF: sub_40B0D0+248↑j
.text:0040B467                 mov     [esp+9Ch+var_94], 180h
.text:0040B46F                 mov     ebx, [esp+9Ch+FileName]
.text:0040B476                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040B47E                 mov     [esp+9Ch+Str], ebx
.text:0040B481                 jmp     short loc_40B460
.text:0040B483 ; ---------------------------------------------------------------------------
.text:0040B483
.text:0040B483 loc_40B483:                             ; CODE XREF: sub_40B0D0+78↑j
.text:0040B483                 mov     [esp+9Ch+OpenFlag], 0
.text:0040B48B                 lea     ebx, [esp+9Ch+var_84]
.text:0040B48F                 mov     [esp+9Ch+Str], ebx
.text:0040B492                 call    sub_40B580
.text:0040B497                 mov     edi, [esp+9Ch+var_80]
.text:0040B49B                 mov     edx, [esp+9Ch+var_84]
.text:0040B49F                 mov     ecx, edi
.text:0040B4A1                 mov     ebx, edi
.text:0040B4A3                 shl     ecx, 10h
.text:0040B4A6                 sar     ebx, 1Fh
.text:0040B4A9                 shld    ebx, edi, 10h
.text:0040B4AD                 mov     esi, edx
.text:0040B4AF                 mov     edi, edx
.text:0040B4B1                 mov     edx, ecx
.text:0040B4B3                 sar     edi, 1Fh
.text:0040B4B6                 xor     edx, esi
.text:0040B4B8                 mov     ds:dword_40F490, edx
.text:0040B4BE                 mov     esi, ebx
.text:0040B4C0                 xor     esi, edi
.text:0040B4C2                 mov     ds:dword_40F494, esi
.text:0040B4C8                 jmp     loc_40B14E
.text:0040B4CD ; ---------------------------------------------------------------------------
.text:0040B4CD
.text:0040B4CD loc_40B4CD:                             ; CODE XREF: sub_40B0D0+27F↑j
.text:0040B4CD                 mov     [esp+9Ch+var_94], 151h
.text:0040B4D5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040B4DD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040B4E4                 call    _assert
.text:0040B4E4 sub_40B0D0      endp
.text:0040B4E4
.text:0040B4E4 ; ---------------------------------------------------------------------------
.text:0040B4E9                 align 20h
.text:0040B500
.text:0040B500 ; =============== S U B R O U T I N E =======================================
.text:0040B500
.text:0040B500
.text:0040B500 ; int __cdecl sub_40B500(LPCSTR, int AccessMode)
.text:0040B500 sub_40B500      proc near               ; CODE XREF: sub_40B0D0+349↑p
.text:0040B500
.text:0040B500 lpPathName      = dword ptr -1Ch
.text:0040B500 lpSecurityAttributes= dword ptr -18h
.text:0040B500 var_8           = dword ptr -8
.text:0040B500 var_4           = dword ptr -4
.text:0040B500 arg_0           = dword ptr  4
.text:0040B500 AccessMode      = dword ptr  8
.text:0040B500
.text:0040B500                 sub     esp, 1Ch
.text:0040B503                 mov     [esp+1Ch+var_8], ebx
.text:0040B507                 mov     ebx, [esp+1Ch+arg_0]
.text:0040B50B                 mov     [esp+1Ch+var_4], esi
.text:0040B50F                 mov     esi, [esp+1Ch+AccessMode]
.text:0040B513                 test    ebx, ebx
.text:0040B515                 jz      short loc_40B565
.text:0040B517                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040B51F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040B522                 call    CreateDirectoryA
.text:0040B527                 sub     esp, 8
.text:0040B52A                 test    eax, eax
.text:0040B52C                 jz      short loc_40B546
.text:0040B52E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040B532                 mov     esi, [esp+1Ch+var_4]
.text:0040B536                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040B53A                 mov     ebx, [esp+1Ch+var_8]
.text:0040B53E                 add     esp, 1Ch
.text:0040B541                 jmp     _chmod
.text:0040B546 ; ---------------------------------------------------------------------------
.text:0040B546
.text:0040B546 loc_40B546:                             ; CODE XREF: sub_40B500+2C↑j
.text:0040B546                 call    sub_408E10
.text:0040B54B                 mov     esi, eax
.text:0040B54D                 call    _errno
.text:0040B552                 mov     [eax], esi
.text:0040B554
.text:0040B554 loc_40B554:                             ; CODE XREF: sub_40B500+70↓j
.text:0040B554                 mov     ebx, [esp+1Ch+var_8]
.text:0040B558                 mov     eax, 0FFFFFFFFh
.text:0040B55D                 mov     esi, [esp+1Ch+var_4]
.text:0040B561                 add     esp, 1Ch
.text:0040B564                 retn
.text:0040B565 ; ---------------------------------------------------------------------------
.text:0040B565
.text:0040B565 loc_40B565:                             ; CODE XREF: sub_40B500+15↑j
.text:0040B565                 call    _errno
.text:0040B56A                 mov     dword ptr [eax], 16h
.text:0040B570                 jmp     short loc_40B554
.text:0040B570 sub_40B500      endp
.text:0040B570
.text:0040B570 ; ---------------------------------------------------------------------------
.text:0040B572                 align 10h
.text:0040B580
.text:0040B580 ; =============== S U B R O U T I N E =======================================
.text:0040B580
.text:0040B580
.text:0040B580 sub_40B580      proc near               ; CODE XREF: sub_40B0D0+3C2↑p
.text:0040B580
.text:0040B580 var_1C          = dword ptr -1Ch
.text:0040B580 var_18          = dword ptr -18h
.text:0040B580 var_C           = dword ptr -0Ch
.text:0040B580 var_8           = dword ptr -8
.text:0040B580 var_4           = dword ptr -4
.text:0040B580 arg_0           = dword ptr  4
.text:0040B580 arg_4           = dword ptr  8
.text:0040B580
.text:0040B580                 sub     esp, 1Ch
.text:0040B583                 mov     edx, [esp+1Ch+arg_4]
.text:0040B587                 mov     [esp+1Ch+var_4], ebx
.text:0040B58B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040B58F                 mov     [esp+1Ch+var_18], edx
.text:0040B593                 lea     edx, [esp+1Ch+var_C]
.text:0040B597                 mov     [esp+1Ch+var_1C], edx
.text:0040B59A                 call    sub_40B600
.text:0040B59F                 test    eax, eax
.text:0040B5A1                 mov     edx, 0FFFFFFFFh
.text:0040B5A6                 jnz     short loc_40B5CA
.text:0040B5A8                 mov     ecx, [esp+1Ch+var_C]
.text:0040B5AC                 mov     edx, 10624DD3h
.text:0040B5B1                 mov     [ebx], ecx
.text:0040B5B3                 mov     ecx, [esp+1Ch+var_8]
.text:0040B5B7                 mov     eax, ecx
.text:0040B5B9                 imul    edx
.text:0040B5BB                 mov     eax, ecx
.text:0040B5BD                 sar     eax, 1Fh
.text:0040B5C0                 sar     edx, 6
.text:0040B5C3                 sub     edx, eax
.text:0040B5C5                 mov     [ebx+4], edx
.text:0040B5C8                 xor     edx, edx
.text:0040B5CA
.text:0040B5CA loc_40B5CA:                             ; CODE XREF: sub_40B580+26↑j
.text:0040B5CA                 mov     ebx, [esp+1Ch+var_4]
.text:0040B5CE                 mov     eax, edx
.text:0040B5D0                 add     esp, 1Ch
.text:0040B5D3                 retn
.text:0040B5D3 sub_40B580      endp
.text:0040B5D3
.text:0040B5D3 ; ---------------------------------------------------------------------------
.text:0040B5D4                 align 10h
.text:0040B5E0
.text:0040B5E0 ; =============== S U B R O U T I N E =======================================
.text:0040B5E0
.text:0040B5E0
.text:0040B5E0 sub_40B5E0      proc near               ; CODE XREF: sub_40AD50+1A7↑p
.text:0040B5E0                                         ; sub_40AD50+237↑p ...
.text:0040B5E0                 mov     edx, ds:dword_40F4A0
.text:0040B5E6                 test    edx, edx
.text:0040B5E8                 jnz     short loc_40B5F0
.text:0040B5EA                 jmp     getenv
.text:0040B5EA ; ---------------------------------------------------------------------------
.text:0040B5EF                 align 10h
.text:0040B5F0
.text:0040B5F0 loc_40B5F0:                             ; CODE XREF: sub_40B5E0+8↑j
.text:0040B5F0                 xor     eax, eax
.text:0040B5F2                 retn
.text:0040B5F2 sub_40B5E0      endp
.text:0040B5F2
.text:0040B5F2 ; ---------------------------------------------------------------------------
.text:0040B5F3                 align 10h
.text:0040B600
.text:0040B600 ; =============== S U B R O U T I N E =======================================
.text:0040B600
.text:0040B600
.text:0040B600 sub_40B600      proc near               ; CODE XREF: sub_40B580+1A↑p
.text:0040B600
.text:0040B600 lpTimeZoneInformation= dword ptr -0DCh
.text:0040B600 var_D8          = dword ptr -0D8h
.text:0040B600 var_D4          = dword ptr -0D4h
.text:0040B600 var_D0          = dword ptr -0D0h
.text:0040B600 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040B600 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040B600 arg_0           = dword ptr  4
.text:0040B600 arg_4           = dword ptr  8
.text:0040B600
.text:0040B600                 push    edi
.text:0040B601                 push    esi
.text:0040B602                 push    ebx
.text:0040B603                 sub     esp, 0D0h
.text:0040B609                 mov     ebx, [esp+0DCh+arg_4]
.text:0040B610                 mov     edi, [esp+0DCh+arg_0]
.text:0040B617                 test    ebx, ebx
.text:0040B619                 jz      short loc_40B644
.text:0040B61B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040B61F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040B622                 call    GetTimeZoneInformation
.text:0040B627                 sub     esp, 4
.text:0040B62A                 cmp     eax, 0FFFFFFFFh
.text:0040B62D                 jz      loc_40B6C5
.text:0040B633                 xor     ecx, ecx
.text:0040B635                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040B639                 cmp     eax, 2
.text:0040B63C                 setz    cl
.text:0040B63F                 mov     [ebx], esi
.text:0040B641                 mov     [ebx+4], ecx
.text:0040B644
.text:0040B644 loc_40B644:                             ; CODE XREF: sub_40B600+19↑j
.text:0040B644                                         ; sub_40B600+E0↓j
.text:0040B644                 test    edi, edi
.text:0040B646                 jz      short loc_40B6B9
.text:0040B648                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040B64C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040B64F                 call    GetSystemTimeAsFileTime
.text:0040B654                 sub     esp, 4
.text:0040B657                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040B65B                 mov     [esp+0DCh+var_D4], 989680h
.text:0040B663                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040B667                 mov     [esp+0DCh+var_D0], 0
.text:0040B66F                 add     ebx, 2AC18000h
.text:0040B675                 adc     esi, 0FE624E21h
.text:0040B67B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040B67F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040B682                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040B686                 mov     [esp+0DCh+var_D8], esi
.text:0040B68A                 call    sub_40CDA0
.text:0040B68F                 mov     [edi], eax
.text:0040B691                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040B694                 mov     [esp+0DCh+var_D4], 989680h
.text:0040B69C                 mov     [esp+0DCh+var_D0], 0
.text:0040B6A4                 mov     [esp+0DCh+var_D8], esi
.text:0040B6A8                 call    sub_40CEC0
.text:0040B6AD                 lea     ebx, [eax+eax*4]
.text:0040B6B0                 lea     edx, [ebx+ebx*4]
.text:0040B6B3                 shl     edx, 2
.text:0040B6B6                 mov     [edi+4], edx
.text:0040B6B9
.text:0040B6B9 loc_40B6B9:                             ; CODE XREF: sub_40B600+46↑j
.text:0040B6B9                 add     esp, 0D0h
.text:0040B6BF                 xor     eax, eax
.text:0040B6C1                 pop     ebx
.text:0040B6C2                 pop     esi
.text:0040B6C3                 pop     edi
.text:0040B6C4                 retn
.text:0040B6C5 ; ---------------------------------------------------------------------------
.text:0040B6C5
.text:0040B6C5 loc_40B6C5:                             ; CODE XREF: sub_40B600+2D↑j
.text:0040B6C5                 mov     dword ptr [ebx], 0
.text:0040B6CB                 mov     dword ptr [ebx+4], 0
.text:0040B6D2                 call    sub_408E10
.text:0040B6D7                 mov     esi, eax
.text:0040B6D9                 call    _errno
.text:0040B6DE                 mov     [eax], esi
.text:0040B6E0                 jmp     loc_40B644
.text:0040B6E0 sub_40B600      endp
.text:0040B6E0
.text:0040B6E0 ; ---------------------------------------------------------------------------
.text:0040B6E5                 align 10h
.text:0040B6F0                 sub     esp, 0Ch
.text:0040B6F3                 mov     [esp+4], ebx
.text:0040B6F7                 mov     [esp+8], esi
.text:0040B6FB                 xor     esi, esi
.text:0040B6FD                 call    sub_40B770
.text:0040B702                 mov     ebx, eax
.text:0040B704                 call    sub_40B760
.text:0040B709                 cmp     ebx, eax
.text:0040B70B                 jz      short loc_40B724
.text:0040B70D
.text:0040B70D loc_40B70D:                             ; CODE XREF: .text:0040B732↓j
.text:0040B70D                 mov     esi, 1
.text:0040B712
.text:0040B712 loc_40B712:                             ; CODE XREF: .text:0040B734↓j
.text:0040B712                 mov     ds:dword_40F4A0, esi
.text:0040B718                 mov     ebx, [esp+4]
.text:0040B71C                 mov     esi, [esp+8]
.text:0040B720                 add     esp, 0Ch
.text:0040B723                 retn
.text:0040B724 ; ---------------------------------------------------------------------------
.text:0040B724
.text:0040B724 loc_40B724:                             ; CODE XREF: .text:0040B70B↑j
.text:0040B724                 call    sub_40B750
.text:0040B729                 mov     ebx, eax
.text:0040B72B                 call    sub_40B740
.text:0040B730                 cmp     ebx, eax
.text:0040B732                 jnz     short loc_40B70D
.text:0040B734                 jmp     short loc_40B712
.text:0040B734 ; ---------------------------------------------------------------------------
.text:0040B736                 align 10h
.text:0040B740
.text:0040B740 ; =============== S U B R O U T I N E =======================================
.text:0040B740
.text:0040B740
.text:0040B740 sub_40B740      proc near               ; CODE XREF: .text:0040B72B↑p
.text:0040B740                 xor     eax, eax
.text:0040B742                 retn
.text:0040B742 sub_40B740      endp
.text:0040B742
.text:0040B742 ; ---------------------------------------------------------------------------
.text:0040B743                 align 10h
.text:0040B750
.text:0040B750 ; =============== S U B R O U T I N E =======================================
.text:0040B750
.text:0040B750
.text:0040B750 sub_40B750      proc near               ; CODE XREF: .text:loc_40B724↑p
.text:0040B750                 xor     eax, eax
.text:0040B752                 retn
.text:0040B752 sub_40B750      endp
.text:0040B752
.text:0040B752 ; ---------------------------------------------------------------------------
.text:0040B753                 align 10h
.text:0040B760
.text:0040B760 ; =============== S U B R O U T I N E =======================================
.text:0040B760
.text:0040B760
.text:0040B760 sub_40B760      proc near               ; CODE XREF: .text:0040B704↑p
.text:0040B760                 xor     eax, eax
.text:0040B762                 retn
.text:0040B762 sub_40B760      endp
.text:0040B762
.text:0040B762 ; ---------------------------------------------------------------------------
.text:0040B763                 align 10h
.text:0040B770
.text:0040B770 ; =============== S U B R O U T I N E =======================================
.text:0040B770
.text:0040B770
.text:0040B770 sub_40B770      proc near               ; CODE XREF: .text:0040B6FD↑p
.text:0040B770                 xor     eax, eax
.text:0040B772                 retn
.text:0040B772 sub_40B770      endp
.text:0040B772
.text:0040B772 ; ---------------------------------------------------------------------------
.text:0040B773                 align 10h
.text:0040B780
.text:0040B780 ; =============== S U B R O U T I N E =======================================
.text:0040B780
.text:0040B780 ; Attributes: thunk
.text:0040B780
.text:0040B780 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040B780 OleInitialize   proc near               ; CODE XREF: sub_40A8B0+1A↑p
.text:0040B780
.text:0040B780 pvReserved      = dword ptr  4
.text:0040B780
.text:0040B780                 jmp     ds:__imp_OleInitialize
.text:0040B780 OleInitialize   endp
.text:0040B780
.text:0040B780 ; ---------------------------------------------------------------------------
.text:0040B786                 align 10h
.text:0040B790
.text:0040B790 ; =============== S U B R O U T I N E =======================================
.text:0040B790
.text:0040B790 ; Attributes: thunk
.text:0040B790
.text:0040B790 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040B790 CoCreateInstance proc near              ; CODE XREF: sub_40A8B0+52↑p
.text:0040B790
.text:0040B790 rclsid          = dword ptr  4
.text:0040B790 pUnkOuter       = dword ptr  8
.text:0040B790 dwClsContext    = dword ptr  0Ch
.text:0040B790 riid            = dword ptr  10h
.text:0040B790 ppv             = dword ptr  14h
.text:0040B790
.text:0040B790                 jmp     ds:__imp_CoCreateInstance
.text:0040B790 CoCreateInstance endp
.text:0040B790
.text:0040B790 ; ---------------------------------------------------------------------------
.text:0040B796                 align 10h
.text:0040B7A0
.text:0040B7A0 ; =============== S U B R O U T I N E =======================================
.text:0040B7A0
.text:0040B7A0 ; Attributes: thunk
.text:0040B7A0
.text:0040B7A0 ; void __stdcall CoUninitialize()
.text:0040B7A0 CoUninitialize  proc near               ; CODE XREF: sub_40A8B0+14E↑p
.text:0040B7A0                                         ; sub_40A8B0+16D↑p
.text:0040B7A0                 jmp     ds:__imp_CoUninitialize
.text:0040B7A0 CoUninitialize  endp
.text:0040B7A0
.text:0040B7A0 ; ---------------------------------------------------------------------------
.text:0040B7A6                 align 10h
.text:0040B7B0                 add     al, 0BAh ; 'º'
.text:0040B7B2                 retf
.text:0040B7B2 ; ---------------------------------------------------------------------------
.text:0040B7B3                 db 7Eh
.text:0040B7B4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040B7B4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040B7B4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040B7B4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040B7B4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040B7B4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040B7B4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040B7B4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040B7B4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040B7B4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040B7B4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040B7B4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040B7B4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040B7B4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040B7B4                 dd 0C4426C00h, 330h, 0
.text:0040B8E8                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040B8E8                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040B8E8                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040B8E8                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040B938                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B938                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040B938                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040B938                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040B938                 dd 0BA94B00h, 1Bh, 0
.text:0040B998                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040B9A8                 dd 0C0h, 46000000h, 331h, 0
.text:0040B9B8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040B9B8                 dd 312h, 0
.text:0040B9D8                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040B9E8                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040B9F8                 dd 0C0h, 46000000h, 311h, 0
.text:0040BA08                 dd 0C0h, 46000000h, 313h, 0
.text:0040BA18                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040BA28                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040BA38                 dd 0C0h, 46000000h, 310h, 0
.text:0040BA48                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040BA48                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040BA78                 dd 0C0h, 46000000h, 319h, 0
.text:0040BA88                 dd 0C0h, 46000000h, 315h, 0
.text:0040BA98                 dd 0C0h, 46000000h, 316h, 0
.text:0040BAA8                 dd 0C0h, 46000000h, 315h, 0
.text:0040BAB8                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040BAC8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040BAC8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040BAC8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040BB08                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040BB08                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040BB08                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040BB08                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040BB08                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040BB08                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040BB08                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040BB08                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040BB08                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040BB08                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040BB08                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040BB08                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040BB08                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040BB08                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040BB08                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040BB08                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040BB08                 dd 2DE81h, 0
.text:0040BC58                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040BC70                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040BC70                 dd 0
.text:0040BC88                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040BC88                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040BC88                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040BC88                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040BC88                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040BC88                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040BC88                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040BC88                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040BC88                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040BC88                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040BC88                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040BC88                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040BC88                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040BC88                 dd 10Fh, 0
.text:0040BD98                 dd 0C0h, 46000000h, 125h, 0
.text:0040BDA8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040BDA8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040BDA8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040BDE8                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040BDE8                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040BDE8                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040BDE8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040BDE8                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040BE48                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040BE58                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040BE58                 dd 140h, 0
.text:0040BE78                 dd 0C0h, 46000000h, 1, 0
.text:0040BE88                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040BE88                 dd 71D3400h, 13Dh, 0
.text:0040BEA8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040BEA8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040BEA8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040BEA8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040BEF8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040BEF8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040BEF8                 dd 20405h, 0
.text:0040BF28                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040BF38                 dd 0C0h, 46000000h, 20406h, 0
.text:0040BF48                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040BF58                 dd 0C0h, 46000000h, 110h, 0
.text:0040BF68                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040BF78                 dd 0C0h, 46000000h, 123h, 0
.text:0040BF88                 dd 0C0h, 46000000h, 124h, 0
.text:0040BF98                 dd 0C0h, 46000000h, 13h, 0
.text:0040BFA8                 dd 0C0h, 46000000h, 14h, 0
.text:0040BFB8                 dd 0C0h, 46000000h, 15h, 0
.text:0040BFC8                 dd 0C0h, 46000000h, 20400h, 0
.text:0040BFD8                 dd 0C0h, 46000000h, 121h, 0
.text:0040BFE8                 dd 0C0h, 46000000h, 122h, 0
.text:0040BFF8                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040C008                 dd 0C0h, 46000000h, 108h, 0
.text:0040C018                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040C018                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040C018                 dd 103h, 0
.text:0040C048                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040C058                 dd 0C0h, 46000000h, 106h, 0
.text:0040C068                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C068                 dd 107h, 0
.text:0040C088                 dd 0C0h, 46000000h, 102h, 0
.text:0040C098                 dd 0C0h, 46000000h, 104h, 0
.text:0040C0A8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040C0A8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040C0A8                 dd 105h, 0
.text:0040C0D8                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040C0E8                 dd 0C0h, 46000000h, 139h, 0
.text:0040C0F8                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040C108                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040C108                 dd 101h, 0
.text:0040C128                 dd 0C0h, 46000000h, 100h, 0
.text:0040C138                 dd 0C0h, 46000000h, 20404h, 0
.text:0040C148                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040C148                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040C178                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040C178                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040C178                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040C178                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040C1C8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C1C8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040C1C8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040C1C8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040C1C8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C1C8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040C248                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040C248                 dd 0Ah, 0
.text:0040C268                 dd 0C0h, 46000000h, 2, 0
.text:0040C278                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040C288                 dd 0C0h, 46000000h, 3, 0
.text:0040C298                 dd 0C0h, 46000000h, 16h, 0
.text:0040C2A8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040C2A8                 dd 1608D74Fh, 0Fh, 0
.text:0040C2C8                 dd 0C0h, 46000000h, 20h, 0
.text:0040C2D8                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040C2D8                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040C2D8                 dd 0
.text:0040C308                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040C318                 dd 0C0h, 46000000h, 128h, 0
.text:0040C328                 dd 0C0h, 46000000h, 129h, 0
.text:0040C338                 dd 0C0h, 46000000h, 118h, 0
.text:0040C348                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040C348                 dd 70474000h, 11Bh, 0
.text:0040C368                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040C368                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040C368                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040C368                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040C368                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040C3C8                 dd 0C0h, 46000000h, 116h, 0
.text:0040C3D8                 dd 0C0h, 46000000h, 113h, 0
.text:0040C3E8                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040C3E8                 dd 119h, 0
.text:0040C408                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040C408                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040C408                 dd 0
.text:0040C438                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040C448                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040C458                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040C468                 dd 0C0h, 46000000h, 112h, 0
.text:0040C478                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040C478                 dd 18E6000h, 120h, 0
.text:0040C498                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040C498                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040C498                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040C4D8                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040C4D8                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040C508                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C508                 dd 11Ah, 0
.text:0040C528                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040C528                 dd 10Ch, 0
.text:0040C548                 dd 0C0h, 46000000h
.text:0040C550 dword_40C550    dd 10Bh, 0              ; DATA XREF: sub_40A8B0+75↑o
.text:0040C558                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040C558                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040C558                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040C558                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040C5A8                 dd 0C0h, 46000000h, 109h, 0
.text:0040C5B8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040C5B8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040C5B8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040C5B8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040C5B8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040C5B8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040C5B8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040C5B8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040C5B8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040C5B8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040C5B8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040C698                 dd 0C0h, 46000000h, 138h, 0
.text:0040C6A8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040C6A8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040C6A8                 dd 27h, 0
.text:0040C6D8                 dd 0C0h, 46000000h, 8, 0
.text:0040C6E8                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040C6E8                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040C6E8                 dd 20D00h, 0
.text:0040C718                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040C728                 dd 0C0h, 46000000h, 12h, 0
.text:0040C738                 dd 0C0h, 46000000h, 4, 0
.text:0040C748                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C748                 dd 7, 0
.text:0040C768                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C768                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040C798                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C798                 dd 126h, 0
.text:0040C7B8                 dd 0C0h, 46000000h, 10h, 0
.text:0040C7C8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040C7C8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040C7F8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040C7F8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040C7F8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040C838                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040C848                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040C858                 dd 0C0h, 46000000h, 26h, 0
.text:0040C868                 dd 0C0h, 46000000h, 6, 0
.text:0040C878                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040C878                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040C878                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040C8B8                 dd 0C0h, 46000000h, 20403h, 0
.text:0040C8C8                 dd 0C0h, 46000000h, 20401h, 0
.text:0040C8D8                 dd 0C0h, 46000000h, 20412h, 0
.text:0040C8E8                 dd 0C0h, 46000000h, 20402h, 0
.text:0040C8F8                 dd 0C0h, 46000000h, 20411h, 0
.text:0040C908                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040C918                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040C918                 dd 10Dh, 0
.text:0040C938                 dd 0C0h, 46000000h, 127h, 0
.text:0040C948                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040C948                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040C948                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040C988                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040C988                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040C988                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040C9C8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040C9D8                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040C9E8                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040C9F8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040CA08                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040CA18                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040CA28                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040CA38                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040CA48                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040CA58                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040CA68                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040CA78                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040CA88                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040CA98                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040CAA8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040CAB8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040CAC8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040CAD8                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040CAE8                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040CAF8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040CB08                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040CB18                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040CB28                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040CB38                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040CB48                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040CB58                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040CB68                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040CB78                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040CB88                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040CB98                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040CBA8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040CBB8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040CBC8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040CBD8                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040CBE8                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040CBF8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040CBF8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040CC20
.text:0040CC20 ; =============== S U B R O U T I N E =======================================
.text:0040CC20
.text:0040CC20 ; Attributes: thunk
.text:0040CC20
.text:0040CC20 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040CC20 mbrtowc         proc near               ; CODE XREF: sub_403C60+757↑p
.text:0040CC20
.text:0040CC20 DstCh           = dword ptr  4
.text:0040CC20 SrcCh           = dword ptr  8
.text:0040CC20 SizeInBytes     = dword ptr  0Ch
.text:0040CC20 State           = dword ptr  10h
.text:0040CC20
.text:0040CC20                 jmp     ds:__imp_mbrtowc
.text:0040CC20 mbrtowc         endp
.text:0040CC20
.text:0040CC20 ; ---------------------------------------------------------------------------
.text:0040CC26                 align 10h
.text:0040CC30
.text:0040CC30 ; =============== S U B R O U T I N E =======================================
.text:0040CC30
.text:0040CC30 ; Attributes: bp-based frame
.text:0040CC30
.text:0040CC30 sub_40CC30      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040CC30                 push    ebp
.text:0040CC31                 mov     ecx, offset dword_40F000
.text:0040CC36                 cmp     ecx, offset dword_40F000
.text:0040CC3C                 mov     ebp, esp
.text:0040CC3E                 jnb     short loc_40CC56
.text:0040CC40
.text:0040CC40 loc_40CC40:                             ; CODE XREF: sub_40CC30+24↓j
.text:0040CC40                 mov     edx, [ecx+4]
.text:0040CC43                 mov     eax, [ecx]
.text:0040CC45                 add     ecx, 8
.text:0040CC48                 add     [edx+400000h], eax
.text:0040CC4E                 cmp     ecx, offset dword_40F000
.text:0040CC54                 jb      short loc_40CC40
.text:0040CC56
.text:0040CC56 loc_40CC56:                             ; CODE XREF: sub_40CC30+E↑j
.text:0040CC56                 pop     ebp
.text:0040CC57                 retn
.text:0040CC57 sub_40CC30      endp
.text:0040CC57
.text:0040CC57 ; ---------------------------------------------------------------------------
.text:0040CC58                 align 10h
.text:0040CC60
.text:0040CC60 ; =============== S U B R O U T I N E =======================================
.text:0040CC60
.text:0040CC60 ; Attributes: bp-based frame
.text:0040CC60
.text:0040CC60 sub_40CC60      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040CC60                                         ; TopLevelExceptionFilter+D7↑p
.text:0040CC60                 push    ebp
.text:0040CC61                 mov     ebp, esp
.text:0040CC63                 fninit
.text:0040CC65                 pop     ebp
.text:0040CC66                 retn
.text:0040CC66 sub_40CC60      endp
.text:0040CC66
.text:0040CC66 ; ---------------------------------------------------------------------------
.text:0040CC67                 align 10h
.text:0040CC70
.text:0040CC70 ; =============== S U B R O U T I N E =======================================
.text:0040CC70
.text:0040CC70 ; Attributes: bp-based frame
.text:0040CC70
.text:0040CC70 ; void __cdecl sub_40CC70()
.text:0040CC70 sub_40CC70      proc near               ; DATA XREF: .text:loc_40CCB9↓o
.text:0040CC70                                         ; sub_40CD00:loc_40CD2E↓o
.text:0040CC70                 push    ebp
.text:0040CC71                 mov     ebp, esp
.text:0040CC73                 sub     esp, 8
.text:0040CC76                 mov     eax, off_40E0C4
.text:0040CC7B                 mov     edx, [eax]
.text:0040CC7D                 test    edx, edx
.text:0040CC7F                 jnz     short loc_40CC85
.text:0040CC81
.text:0040CC81 loc_40CC81:                             ; CODE XREF: sub_40CC70+2C↓j
.text:0040CC81                 mov     esp, ebp
.text:0040CC83                 pop     ebp
.text:0040CC84                 retn
.text:0040CC85 ; ---------------------------------------------------------------------------
.text:0040CC85
.text:0040CC85 loc_40CC85:                             ; CODE XREF: sub_40CC70+F↑j
.text:0040CC85                                         ; sub_40CC70+2A↓j
.text:0040CC85                 call    dword ptr [eax]
.text:0040CC87                 mov     edx, off_40E0C4
.text:0040CC8D                 mov     ecx, [edx+4]
.text:0040CC90                 lea     eax, [edx+4]
.text:0040CC93                 mov     off_40E0C4, eax
.text:0040CC98                 test    ecx, ecx
.text:0040CC9A                 jnz     short loc_40CC85
.text:0040CC9C                 jmp     short loc_40CC81
.text:0040CC9C sub_40CC70      endp
.text:0040CC9C
.text:0040CC9C ; ---------------------------------------------------------------------------
.text:0040CC9E                 align 10h
.text:0040CCA0                 push    ebp
.text:0040CCA1                 mov     ebp, esp
.text:0040CCA3                 sub     esp, 8
.text:0040CCA6                 mov     [ebp-4], ebx
.text:0040CCA9                 mov     eax, ds:dword_40DA50
.text:0040CCAE                 cmp     eax, 0FFFFFFFFh
.text:0040CCB1                 jz      short loc_40CCDC
.text:0040CCB3
.text:0040CCB3 loc_40CCB3:                             ; CODE XREF: .text:0040CCE6↓j
.text:0040CCB3                                         ; .text:0040CCF9↓j
.text:0040CCB3                 test    eax, eax
.text:0040CCB5                 mov     ebx, eax
.text:0040CCB7                 jnz     short loc_40CCD0
.text:0040CCB9
.text:0040CCB9 loc_40CCB9:                             ; CODE XREF: .text:0040CCDA↓j
.text:0040CCB9                 mov     dword ptr [esp], offset sub_40CC70
.text:0040CCC0                 call    sub_401040
.text:0040CCC5                 mov     ebx, [ebp-4]
.text:0040CCC8                 mov     esp, ebp
.text:0040CCCA                 pop     ebp
.text:0040CCCB                 retn
.text:0040CCCB ; ---------------------------------------------------------------------------
.text:0040CCCC                 align 10h
.text:0040CCD0
.text:0040CCD0 loc_40CCD0:                             ; CODE XREF: .text:0040CCB7↑j
.text:0040CCD0                                         ; .text:0040CCD8↓j
.text:0040CCD0                 call    ds:dword_40DA50[ebx*4]
.text:0040CCD7                 dec     ebx
.text:0040CCD8                 jnz     short loc_40CCD0
.text:0040CCDA                 jmp     short loc_40CCB9
.text:0040CCDC ; ---------------------------------------------------------------------------
.text:0040CCDC
.text:0040CCDC loc_40CCDC:                             ; CODE XREF: .text:0040CCB1↑j
.text:0040CCDC                 mov     ecx, ds:dword_40DA54
.text:0040CCE2                 xor     eax, eax
.text:0040CCE4                 test    ecx, ecx
.text:0040CCE6                 jz      short loc_40CCB3
.text:0040CCE8                 mov     edx, offset dword_40DA50
.text:0040CCED                 lea     esi, [esi+0]
.text:0040CCF0
.text:0040CCF0 loc_40CCF0:                             ; CODE XREF: .text:0040CCF7↓j
.text:0040CCF0                 inc     eax
.text:0040CCF1                 mov     ecx, [edx+eax*4+4]
.text:0040CCF5                 test    ecx, ecx
.text:0040CCF7                 jnz     short loc_40CCF0
.text:0040CCF9                 jmp     short loc_40CCB3
.text:0040CCF9 ; ---------------------------------------------------------------------------
.text:0040CCFB                 align 10h
.text:0040CD00
.text:0040CD00 ; =============== S U B R O U T I N E =======================================
.text:0040CD00
.text:0040CD00 ; Attributes: bp-based frame
.text:0040CD00
.text:0040CD00 sub_40CD00      proc near               ; CODE XREF: sub_401380+1C↑p
.text:0040CD00
.text:0040CD00 var_8           = dword ptr -8
.text:0040CD00 var_4           = dword ptr -4
.text:0040CD00
.text:0040CD00                 push    ebp
.text:0040CD01                 mov     ebp, esp
.text:0040CD03                 sub     esp, 8
.text:0040CD06                 mov     [ebp+var_4], ebx
.text:0040CD09                 mov     edx, dword_40E0C0
.text:0040CD0F                 test    edx, edx
.text:0040CD11                 jnz     short loc_40CD3A
.text:0040CD13                 mov     eax, ds:dword_40DA50
.text:0040CD18                 mov     edx, 1
.text:0040CD1D                 mov     dword_40E0C0, edx
.text:0040CD23                 cmp     eax, 0FFFFFFFFh
.text:0040CD26                 jz      short loc_40CD4D
.text:0040CD28
.text:0040CD28 loc_40CD28:                             ; CODE XREF: sub_40CD00+57↓j
.text:0040CD28                                         ; sub_40CD00+69↓j
.text:0040CD28                 test    eax, eax
.text:0040CD2A                 mov     ebx, eax
.text:0040CD2C                 jnz     short loc_40CD41
.text:0040CD2E
.text:0040CD2E loc_40CD2E:                             ; CODE XREF: sub_40CD00+4B↓j
.text:0040CD2E                 mov     [esp+8+var_8], offset sub_40CC70 ; void (__cdecl *)()
.text:0040CD35                 call    sub_401040
.text:0040CD3A
.text:0040CD3A loc_40CD3A:                             ; CODE XREF: sub_40CD00+11↑j
.text:0040CD3A                 mov     ebx, [ebp+var_4]
.text:0040CD3D                 mov     esp, ebp
.text:0040CD3F                 pop     ebp
.text:0040CD40                 retn
.text:0040CD41 ; ---------------------------------------------------------------------------
.text:0040CD41
.text:0040CD41 loc_40CD41:                             ; CODE XREF: sub_40CD00+2C↑j
.text:0040CD41                                         ; sub_40CD00+49↓j
.text:0040CD41                 call    ds:dword_40DA50[ebx*4]
.text:0040CD48                 dec     ebx
.text:0040CD49                 jnz     short loc_40CD41
.text:0040CD4B                 jmp     short loc_40CD2E
.text:0040CD4D ; ---------------------------------------------------------------------------
.text:0040CD4D
.text:0040CD4D loc_40CD4D:                             ; CODE XREF: sub_40CD00+26↑j
.text:0040CD4D                 mov     ecx, ds:dword_40DA54
.text:0040CD53                 xor     eax, eax
.text:0040CD55                 test    ecx, ecx
.text:0040CD57                 jz      short loc_40CD28
.text:0040CD59                 mov     edx, offset dword_40DA50
.text:0040CD5E                 mov     esi, esi
.text:0040CD60
.text:0040CD60 loc_40CD60:                             ; CODE XREF: sub_40CD00+67↓j
.text:0040CD60                 inc     eax
.text:0040CD61                 mov     ebx, [edx+eax*4+4]
.text:0040CD65                 test    ebx, ebx
.text:0040CD67                 jnz     short loc_40CD60
.text:0040CD69                 jmp     short loc_40CD28
.text:0040CD69 sub_40CD00      endp
.text:0040CD69
.text:0040CD69 ; ---------------------------------------------------------------------------
.text:0040CD6B                 align 10h
.text:0040CD70
.text:0040CD70 ; =============== S U B R O U T I N E =======================================
.text:0040CD70
.text:0040CD70 ; Attributes: info_from_lumina
.text:0040CD70
.text:0040CD70 ; void *__cdecl _alloca(size_t Size)
.text:0040CD70 __alloca        proc near               ; CODE XREF: sub_401380+17↑p
.text:0040CD70                 push    ecx
.text:0040CD71                 mov     ecx, esp
.text:0040CD73                 add     ecx, 8
.text:0040CD76
.text:0040CD76 loc_40CD76:                             ; CODE XREF: __alloca+1B↓j
.text:0040CD76                 cmp     eax, 1000h
.text:0040CD7B                 jb      short loc_40CD8D
.text:0040CD7D                 sub     ecx, 1000h
.text:0040CD83                 or      dword ptr [ecx], 0
.text:0040CD86                 sub     eax, 1000h
.text:0040CD8B                 jmp     short loc_40CD76
.text:0040CD8D ; ---------------------------------------------------------------------------
.text:0040CD8D
.text:0040CD8D loc_40CD8D:                             ; CODE XREF: __alloca+B↑j
.text:0040CD8D                 sub     ecx, eax
.text:0040CD8F                 or      dword ptr [ecx], 0
.text:0040CD92                 mov     eax, esp
.text:0040CD94                 mov     esp, ecx
.text:0040CD96                 mov     ecx, [eax]
.text:0040CD98                 mov     eax, [eax+4]
.text:0040CD9B                 jmp     eax
.text:0040CD9B __alloca        endp
.text:0040CD9B
.text:0040CD9B ; ---------------------------------------------------------------------------
.text:0040CD9D                 align 10h
.text:0040CDA0
.text:0040CDA0 ; =============== S U B R O U T I N E =======================================
.text:0040CDA0
.text:0040CDA0 ; Attributes: bp-based frame
.text:0040CDA0
.text:0040CDA0 sub_40CDA0      proc near               ; CODE XREF: sub_4058B0+17E↑p
.text:0040CDA0                                         ; sub_4058B0+1F5↑p ...
.text:0040CDA0
.text:0040CDA0 var_24          = dword ptr -24h
.text:0040CDA0 var_20          = dword ptr -20h
.text:0040CDA0 var_1C          = dword ptr -1Ch
.text:0040CDA0 var_18          = dword ptr -18h
.text:0040CDA0 var_14          = dword ptr -14h
.text:0040CDA0 var_C           = dword ptr -0Ch
.text:0040CDA0 var_8           = dword ptr -8
.text:0040CDA0 var_4           = dword ptr -4
.text:0040CDA0 arg_0           = dword ptr  8
.text:0040CDA0 arg_4           = dword ptr  0Ch
.text:0040CDA0 arg_8           = dword ptr  10h
.text:0040CDA0 arg_C           = dword ptr  14h
.text:0040CDA0
.text:0040CDA0                 push    ebp
.text:0040CDA1                 mov     ebp, esp
.text:0040CDA3                 sub     esp, 28h
.text:0040CDA6                 mov     [ebp+var_C], ebx
.text:0040CDA9                 mov     edx, [ebp+arg_C]
.text:0040CDAC                 mov     ecx, [ebp+arg_0]
.text:0040CDAF                 mov     [ebp+var_8], esi
.text:0040CDB2                 mov     eax, [ebp+arg_8]
.text:0040CDB5                 test    edx, edx
.text:0040CDB7                 mov     [ebp+var_4], edi
.text:0040CDBA                 mov     ebx, [ebp+arg_4]
.text:0040CDBD                 mov     esi, eax
.text:0040CDBF                 mov     [ebp+var_18], 0
.text:0040CDC6                 mov     [ebp+var_14], 0
.text:0040CDCD                 mov     [ebp+var_1C], ecx
.text:0040CDD0                 jnz     short loc_40CE22
.text:0040CDD2                 cmp     eax, ebx
.text:0040CDD4                 jbe     short loc_40CE00
.text:0040CDD6                 mov     eax, ecx
.text:0040CDD8                 mov     edx, ebx
.text:0040CDDA                 div     esi
.text:0040CDDC                 mov     edi, eax
.text:0040CDDE                 mov     esi, esi
.text:0040CDE0
.text:0040CDE0 loc_40CDE0:                             ; CODE XREF: sub_40CDA0+88↓j
.text:0040CDE0                                         ; sub_40CDA0+A4↓j ...
.text:0040CDE0                 xor     ecx, ecx
.text:0040CDE2
.text:0040CDE2 loc_40CDE2:                             ; CODE XREF: sub_40CDA0+80↓j
.text:0040CDE2                 mov     [ebp+var_18], edi
.text:0040CDE5                 mov     ebx, [ebp+var_C]
.text:0040CDE8                 mov     eax, [ebp+var_18]
.text:0040CDEB                 mov     [ebp+var_14], ecx
.text:0040CDEE                 mov     esi, [ebp+var_8]
.text:0040CDF1                 mov     edx, [ebp+var_14]
.text:0040CDF4                 mov     edi, [ebp+var_4]
.text:0040CDF7                 mov     esp, ebp
.text:0040CDF9                 pop     ebp
.text:0040CDFA                 retn
.text:0040CDFA ; ---------------------------------------------------------------------------
.text:0040CDFB                 align 10h
.text:0040CE00
.text:0040CE00 loc_40CE00:                             ; CODE XREF: sub_40CDA0+34↑j
.text:0040CE00                 test    eax, eax
.text:0040CE02                 jnz     short loc_40CE11
.text:0040CE04                 mov     eax, 1
.text:0040CE09                 xor     ecx, ecx
.text:0040CE0B                 xor     edx, edx
.text:0040CE0D                 div     ecx
.text:0040CE0F                 mov     esi, eax
.text:0040CE11
.text:0040CE11 loc_40CE11:                             ; CODE XREF: sub_40CDA0+62↑j
.text:0040CE11                 mov     eax, ebx
.text:0040CE13                 xor     edx, edx
.text:0040CE15                 div     esi
.text:0040CE17                 mov     ecx, eax
.text:0040CE19                 mov     eax, [ebp+var_1C]
.text:0040CE1C                 div     esi
.text:0040CE1E                 mov     edi, eax
.text:0040CE20                 jmp     short loc_40CDE2
.text:0040CE22 ; ---------------------------------------------------------------------------
.text:0040CE22
.text:0040CE22 loc_40CE22:                             ; CODE XREF: sub_40CDA0+30↑j
.text:0040CE22                 cmp     edx, ebx
.text:0040CE24                 jbe     short loc_40CE30
.text:0040CE26                 xor     edi, edi
.text:0040CE28                 jmp     short loc_40CDE0
.text:0040CE28 ; ---------------------------------------------------------------------------
.text:0040CE2A                 align 10h
.text:0040CE30
.text:0040CE30 loc_40CE30:                             ; CODE XREF: sub_40CDA0+84↑j
.text:0040CE30                 bsr     eax, edx
.text:0040CE33                 xor     eax, 1Fh
.text:0040CE36                 mov     [ebp+var_20], eax
.text:0040CE39                 jnz     short loc_40CE50
.text:0040CE3B                 cmp     ebx, edx
.text:0040CE3D                 ja      short loc_40CE46
.text:0040CE3F                 xor     edi, edi
.text:0040CE41                 cmp     [ebp+var_1C], esi
.text:0040CE44                 jb      short loc_40CDE0
.text:0040CE46
.text:0040CE46 loc_40CE46:                             ; CODE XREF: sub_40CDA0+9D↑j
.text:0040CE46                 mov     edi, 1
.text:0040CE4B                 jmp     short loc_40CDE0
.text:0040CE4B ; ---------------------------------------------------------------------------
.text:0040CE4D                 align 10h
.text:0040CE50
.text:0040CE50 loc_40CE50:                             ; CODE XREF: sub_40CDA0+99↑j
.text:0040CE50                 mov     eax, [ebp+var_20]
.text:0040CE53                 mov     ecx, 20h ; ' '
.text:0040CE58                 sub     ecx, eax
.text:0040CE5A                 mov     [ebp+var_24], ecx
.text:0040CE5D                 mov     eax, esi
.text:0040CE5F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040CE63                 shl     edx, cl
.text:0040CE65                 mov     edi, edx
.text:0040CE67                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040CE6B                 mov     edx, ebx
.text:0040CE6D                 shr     eax, cl
.text:0040CE6F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040CE73                 or      edi, eax
.text:0040CE75                 mov     eax, [ebp+var_1C]
.text:0040CE78                 shl     esi, cl
.text:0040CE7A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040CE7E                 shr     edx, cl
.text:0040CE80                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040CE84                 shl     ebx, cl
.text:0040CE86                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040CE8A                 shr     eax, cl
.text:0040CE8C                 or      ebx, eax
.text:0040CE8E                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040CE92                 mov     eax, ebx
.text:0040CE94                 div     edi
.text:0040CE96                 mov     ebx, edx
.text:0040CE98                 mov     edi, eax
.text:0040CE9A                 shl     [ebp+var_1C], cl
.text:0040CE9D                 mul     esi
.text:0040CE9F                 cmp     edx, ebx
.text:0040CEA1                 ja      short loc_40CEB4
.text:0040CEA3                 cmp     edx, ebx
.text:0040CEA5                 jnz     loc_40CDE0
.text:0040CEAB                 cmp     eax, [ebp+var_1C]
.text:0040CEAE                 jbe     loc_40CDE0
.text:0040CEB4
.text:0040CEB4 loc_40CEB4:                             ; CODE XREF: sub_40CDA0+101↑j
.text:0040CEB4                 dec     edi
.text:0040CEB5                 jmp     loc_40CDE0
.text:0040CEB5 sub_40CDA0      endp
.text:0040CEB5
.text:0040CEB5 ; ---------------------------------------------------------------------------
.text:0040CEBA                 align 10h
.text:0040CEC0
.text:0040CEC0 ; =============== S U B R O U T I N E =======================================
.text:0040CEC0
.text:0040CEC0 ; Attributes: bp-based frame
.text:0040CEC0
.text:0040CEC0 sub_40CEC0      proc near               ; CODE XREF: sub_4058B0+1A5↑p
.text:0040CEC0                                         ; sub_4058B0+21E↑p ...
.text:0040CEC0
.text:0040CEC0 var_34          = dword ptr -34h
.text:0040CEC0 var_2C          = dword ptr -2Ch
.text:0040CEC0 var_28          = dword ptr -28h
.text:0040CEC0 var_24          = dword ptr -24h
.text:0040CEC0 var_20          = dword ptr -20h
.text:0040CEC0 var_1C          = dword ptr -1Ch
.text:0040CEC0 var_18          = dword ptr -18h
.text:0040CEC0 var_14          = dword ptr -14h
.text:0040CEC0 arg_0           = dword ptr  8
.text:0040CEC0 arg_4           = dword ptr  0Ch
.text:0040CEC0 arg_8           = dword ptr  10h
.text:0040CEC0 arg_C           = dword ptr  14h
.text:0040CEC0
.text:0040CEC0                 push    ebp
.text:0040CEC1                 mov     ebp, esp
.text:0040CEC3                 push    edi
.text:0040CEC4                 push    esi
.text:0040CEC5                 push    ebx
.text:0040CEC6                 sub     esp, 2Ch
.text:0040CEC9                 mov     edx, [ebp+arg_C]
.text:0040CECC                 mov     [ebp+var_20], 0
.text:0040CED3                 mov     ecx, [ebp+arg_0]
.text:0040CED6                 mov     ebx, [ebp+arg_4]
.text:0040CED9                 mov     [ebp+var_1C], 0
.text:0040CEE0                 mov     eax, [ebp+arg_8]
.text:0040CEE3                 test    edx, edx
.text:0040CEE5                 mov     [ebp+var_24], edx
.text:0040CEE8                 mov     edi, ebx
.text:0040CEEA                 mov     esi, eax
.text:0040CEEC                 mov     [ebp+var_28], ecx
.text:0040CEEF                 jnz     short loc_40CF50
.text:0040CEF1                 cmp     eax, ebx
.text:0040CEF3                 jbe     short loc_40CF30
.text:0040CEF5                 mov     eax, ecx
.text:0040CEF7                 mov     edx, ebx
.text:0040CEF9                 div     esi
.text:0040CEFB
.text:0040CEFB loc_40CEFB:                             ; CODE XREF: sub_40CEC0+8B↓j
.text:0040CEFB                 mov     [ebp+var_28], edx
.text:0040CEFE                 lea     ecx, [ebp+var_18]
.text:0040CF01                 test    ecx, ecx
.text:0040CF03                 jz      short loc_40CF1E
.text:0040CF05                 mov     [ebp+var_1C], 0
.text:0040CF0C
.text:0040CF0C loc_40CF0C:                             ; CODE XREF: sub_40CEC0+DA↓j
.text:0040CF0C                 mov     eax, [ebp+var_28]
.text:0040CF0F                 mov     [ebp+var_20], eax
.text:0040CF12                 mov     edx, [ebp+var_20]
.text:0040CF15                 mov     ecx, [ebp+var_1C]
.text:0040CF18                 mov     [ebp+var_18], edx
.text:0040CF1B                 mov     [ebp+var_14], ecx
.text:0040CF1E
.text:0040CF1E loc_40CF1E:                             ; CODE XREF: sub_40CEC0+43↑j
.text:0040CF1E                                         ; sub_40CEC0+A7↓j ...
.text:0040CF1E                 mov     eax, [ebp+var_18]
.text:0040CF21                 mov     edx, [ebp+var_14]
.text:0040CF24                 add     esp, 2Ch
.text:0040CF27                 pop     ebx
.text:0040CF28                 pop     esi
.text:0040CF29                 pop     edi
.text:0040CF2A                 pop     ebp
.text:0040CF2B                 retn
.text:0040CF2B ; ---------------------------------------------------------------------------
.text:0040CF2C                 align 10h
.text:0040CF30
.text:0040CF30 loc_40CF30:                             ; CODE XREF: sub_40CEC0+33↑j
.text:0040CF30                 test    eax, eax
.text:0040CF32                 jnz     short loc_40CF3F
.text:0040CF34                 mov     eax, 1
.text:0040CF39                 xor     edx, edx
.text:0040CF3B                 div     esi
.text:0040CF3D                 mov     esi, eax
.text:0040CF3F
.text:0040CF3F loc_40CF3F:                             ; CODE XREF: sub_40CEC0+72↑j
.text:0040CF3F                 mov     eax, edi
.text:0040CF41                 mov     edx, [ebp+var_24]
.text:0040CF44                 div     esi
.text:0040CF46                 mov     eax, [ebp+var_28]
.text:0040CF49                 div     esi
.text:0040CF4B                 jmp     short loc_40CEFB
.text:0040CF4B ; ---------------------------------------------------------------------------
.text:0040CF4D                 align 10h
.text:0040CF50
.text:0040CF50 loc_40CF50:                             ; CODE XREF: sub_40CEC0+2F↑j
.text:0040CF50                 cmp     [ebp+var_24], ebx
.text:0040CF53                 jbe     short loc_40CF70
.text:0040CF55                 mov     [ebp+var_20], ecx
.text:0040CF58
.text:0040CF58 loc_40CF58:                             ; CODE XREF: sub_40CEC0+15B↓j
.text:0040CF58                 mov     [ebp+var_1C], edi
.text:0040CF5B                 mov     eax, [ebp+var_20]
.text:0040CF5E                 mov     edx, [ebp+var_1C]
.text:0040CF61                 mov     [ebp+var_18], eax
.text:0040CF64                 mov     [ebp+var_14], edx
.text:0040CF67                 jmp     short loc_40CF1E
.text:0040CF67 ; ---------------------------------------------------------------------------
.text:0040CF69                 align 10h
.text:0040CF70
.text:0040CF70 loc_40CF70:                             ; CODE XREF: sub_40CEC0+93↑j
.text:0040CF70                 bsr     eax, [ebp+var_24]
.text:0040CF74                 mov     ebx, eax
.text:0040CF76                 xor     ebx, 1Fh
.text:0040CF79                 jnz     short loc_40CFA0
.text:0040CF7B                 cmp     edi, [ebp+var_24]
.text:0040CF7E                 ja      short loc_40CF85
.text:0040CF80                 cmp     [ebp+var_28], esi
.text:0040CF83                 jb      short loc_40CF90
.text:0040CF85
.text:0040CF85 loc_40CF85:                             ; CODE XREF: sub_40CEC0+BE↑j
.text:0040CF85                 mov     edx, [ebp+var_28]
.text:0040CF88                 sub     edx, esi
.text:0040CF8A                 sbb     edi, [ebp+var_24]
.text:0040CF8D                 mov     [ebp+var_28], edx
.text:0040CF90
.text:0040CF90 loc_40CF90:                             ; CODE XREF: sub_40CEC0+C3↑j
.text:0040CF90                 lea     ecx, [ebp+var_18]
.text:0040CF93                 test    ecx, ecx
.text:0040CF95                 jz      short loc_40CF1E
.text:0040CF97                 mov     [ebp+var_1C], edi
.text:0040CF9A                 jmp     loc_40CF0C
.text:0040CF9A ; ---------------------------------------------------------------------------
.text:0040CF9F                 align 10h
.text:0040CFA0
.text:0040CFA0 loc_40CFA0:                             ; CODE XREF: sub_40CEC0+B9↑j
.text:0040CFA0                 mov     edx, [ebp+var_24]
.text:0040CFA3                 mov     eax, 20h ; ' '
.text:0040CFA8                 mov     cl, bl
.text:0040CFAA                 sub     eax, ebx
.text:0040CFAC                 mov     [ebp+var_2C], eax
.text:0040CFAF                 shl     edx, cl
.text:0040CFB1                 mov     eax, esi
.text:0040CFB3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040CFB7                 shr     eax, cl
.text:0040CFB9                 mov     cl, bl
.text:0040CFBB                 shl     esi, cl
.text:0040CFBD                 or      edx, eax
.text:0040CFBF                 mov     eax, [ebp+var_28]
.text:0040CFC2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040CFC6                 mov     [ebp+var_24], edx
.text:0040CFC9                 mov     edx, edi
.text:0040CFCB                 shr     edx, cl
.text:0040CFCD                 mov     cl, bl
.text:0040CFCF                 shl     edi, cl
.text:0040CFD1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040CFD5                 shr     eax, cl
.text:0040CFD7                 or      edi, eax
.text:0040CFD9                 mov     eax, edi
.text:0040CFDB                 mov     cl, bl
.text:0040CFDD                 div     [ebp+var_24]
.text:0040CFE0                 shl     [ebp+var_28], cl
.text:0040CFE3                 mov     edi, edx
.text:0040CFE5                 mul     esi
.text:0040CFE7                 mov     [ebp+var_34], eax
.text:0040CFEA                 cmp     edx, edi
.text:0040CFEC                 ja      short loc_40D028
.text:0040CFEE                 cmp     edx, edi
.text:0040CFF0                 jz      short loc_40D020
.text:0040CFF2
.text:0040CFF2 loc_40CFF2:                             ; CODE XREF: sub_40CEC0+166↓j
.text:0040CFF2                                         ; sub_40CEC0+173↓j
.text:0040CFF2                 lea     eax, [ebp+var_18]
.text:0040CFF5                 test    eax, eax
.text:0040CFF7                 jz      loc_40CF1E
.text:0040CFFD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040D001                 mov     eax, [ebp+var_28]
.text:0040D004                 sub     eax, [ebp+var_34]
.text:0040D007                 sbb     edi, edx
.text:0040D009                 mov     [ebp+var_28], eax
.text:0040D00C                 mov     edx, edi
.text:0040D00E                 shl     edx, cl
.text:0040D010                 mov     cl, bl
.text:0040D012                 shr     eax, cl
.text:0040D014                 or      edx, eax
.text:0040D016                 mov     [ebp+var_20], edx
.text:0040D019                 shr     edi, cl
.text:0040D01B                 jmp     loc_40CF58
.text:0040D020 ; ---------------------------------------------------------------------------
.text:0040D020
.text:0040D020 loc_40D020:                             ; CODE XREF: sub_40CEC0+130↑j
.text:0040D020                 mov     eax, [ebp+var_28]
.text:0040D023                 cmp     [ebp+var_34], eax
.text:0040D026                 jbe     short loc_40CFF2
.text:0040D028
.text:0040D028 loc_40D028:                             ; CODE XREF: sub_40CEC0+12C↑j
.text:0040D028                 mov     ecx, [ebp+var_34]
.text:0040D02B                 sub     ecx, esi
.text:0040D02D                 sbb     edx, [ebp+var_24]
.text:0040D030                 mov     [ebp+var_34], ecx
.text:0040D033                 jmp     short loc_40CFF2
.text:0040D033 sub_40CEC0      endp
.text:0040D033
.text:0040D033 ; ---------------------------------------------------------------------------
.text:0040D035                 align 10h
.text:0040D040
.text:0040D040 ; =============== S U B R O U T I N E =======================================
.text:0040D040
.text:0040D040 ; Attributes: thunk
.text:0040D040
.text:0040D040 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040D040 _stricmp        proc near               ; CODE XREF: sub_405D80+46F↑p
.text:0040D040                                         ; sub_407F70+2E↑p ...
.text:0040D040
.text:0040D040 String1         = dword ptr  4
.text:0040D040 String2         = dword ptr  8
.text:0040D040
.text:0040D040                 jmp     ds:__imp__stricmp
.text:0040D040 _stricmp        endp
.text:0040D040
.text:0040D040 ; ---------------------------------------------------------------------------
.text:0040D046                 align 10h
.text:0040D050
.text:0040D050 ; =============== S U B R O U T I N E =======================================
.text:0040D050
.text:0040D050 ; Attributes: thunk
.text:0040D050
.text:0040D050 ; char *__cdecl strdup(const char *String)
.text:0040D050 _strdup         proc near               ; CODE XREF: sub_407BA0+101↑p
.text:0040D050                                         ; .text:00407E0A↑p ...
.text:0040D050
.text:0040D050 String          = dword ptr  4
.text:0040D050
.text:0040D050                 jmp     ds:__imp__strdup
.text:0040D050 _strdup         endp
.text:0040D050
.text:0040D050 ; ---------------------------------------------------------------------------
.text:0040D056                 align 10h
.text:0040D060
.text:0040D060 ; =============== S U B R O U T I N E =======================================
.text:0040D060
.text:0040D060 ; Attributes: thunk
.text:0040D060
.text:0040D060 ; int __cdecl getpid()
.text:0040D060 _getpid         proc near               ; CODE XREF: sub_40B0D0+84↑p
.text:0040D060                 jmp     ds:__imp__getpid
.text:0040D060 _getpid         endp
.text:0040D060
.text:0040D060 ; ---------------------------------------------------------------------------
.text:0040D066                 align 10h
.text:0040D070
.text:0040D070 ; =============== S U B R O U T I N E =======================================
.text:0040D070
.text:0040D070 ; Attributes: thunk
.text:0040D070
.text:0040D070 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040D070 _chmod          proc near               ; CODE XREF: sub_40B500+41↑j
.text:0040D070
.text:0040D070 FileName        = dword ptr  4
.text:0040D070 AccessMode      = dword ptr  8
.text:0040D070
.text:0040D070                 jmp     ds:__imp__chmod
.text:0040D070 _chmod          endp
.text:0040D070
.text:0040D070 ; ---------------------------------------------------------------------------
.text:0040D076                 align 10h
.text:0040D080                 jmp     ds:__set_app_type
.text:0040D080 ; ---------------------------------------------------------------------------
.text:0040D086                 align 10h
.text:0040D090
.text:0040D090 ; =============== S U B R O U T I N E =======================================
.text:0040D090
.text:0040D090 ; Attributes: thunk
.text:0040D090
.text:0040D090 ; void __cdecl cexit()
.text:0040D090 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040D090                 jmp     ds:__imp__cexit
.text:0040D090 _cexit          endp
.text:0040D090
.text:0040D090 ; ---------------------------------------------------------------------------
.text:0040D096                 align 10h
.text:0040D0A0
.text:0040D0A0 ; =============== S U B R O U T I N E =======================================
.text:0040D0A0
.text:0040D0A0 ; Attributes: thunk
.text:0040D0A0
.text:0040D0A0 ; char ***__cdecl _p__environ()
.text:0040D0A0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040D0A0                 jmp     ds:__imp___p__environ
.text:0040D0A0 __p__environ    endp
.text:0040D0A0
.text:0040D0A0 ; ---------------------------------------------------------------------------
.text:0040D0A6                 align 10h
.text:0040D0B0
.text:0040D0B0 ; =============== S U B R O U T I N E =======================================
.text:0040D0B0
.text:0040D0B0 ; Attributes: thunk
.text:0040D0B0
.text:0040D0B0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040D0B0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040D0B0                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040D0B0
.text:0040D0B0 Signal          = dword ptr  4
.text:0040D0B0 Function        = dword ptr  8
.text:0040D0B0
.text:0040D0B0                 jmp     ds:__imp_signal
.text:0040D0B0 signal          endp
.text:0040D0B0
.text:0040D0B0 ; ---------------------------------------------------------------------------
.text:0040D0B6                 align 10h
.text:0040D0C0
.text:0040D0C0 ; =============== S U B R O U T I N E =======================================
.text:0040D0C0
.text:0040D0C0 ; Attributes: thunk
.text:0040D0C0
.text:0040D0C0 ; int *__cdecl _p__fmode()
.text:0040D0C0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040D0C0                 jmp     ds:__imp___p__fmode
.text:0040D0C0 __p__fmode      endp
.text:0040D0C0
.text:0040D0C0 ; ---------------------------------------------------------------------------
.text:0040D0C6                 align 10h
.text:0040D0D0
.text:0040D0D0 ; =============== S U B R O U T I N E =======================================
.text:0040D0D0
.text:0040D0D0 ; Attributes: thunk
.text:0040D0D0
.text:0040D0D0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040D0D0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040D0D0                                         ; sub_401080+90↑p ...
.text:0040D0D0
.text:0040D0D0 FileHandle      = dword ptr  4
.text:0040D0D0 Mode            = dword ptr  8
.text:0040D0D0
.text:0040D0D0                 jmp     ds:__imp__setmode
.text:0040D0D0 _setmode        endp
.text:0040D0D0
.text:0040D0D0 ; ---------------------------------------------------------------------------
.text:0040D0D6                 align 10h
.text:0040D0E0
.text:0040D0E0 ; =============== S U B R O U T I N E =======================================
.text:0040D0E0
.text:0040D0E0 ; Attributes: thunk
.text:0040D0E0
.text:0040D0E0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040D0E0                 jmp     ds:__imp___getmainargs
.text:0040D0E0 __getmainargs   endp
.text:0040D0E0
.text:0040D0E0 ; ---------------------------------------------------------------------------
.text:0040D0E6                 align 10h
.text:0040D0F0
.text:0040D0F0 ; =============== S U B R O U T I N E =======================================
.text:0040D0F0
.text:0040D0F0 ; Attributes: thunk
.text:0040D0F0
.text:0040D0F0 ; int __cdecl puts(const char *Buffer)
.text:0040D0F0 puts            proc near               ; CODE XREF: sub_401380+120↑p
.text:0040D0F0                                         ; sub_401380+269↑p
.text:0040D0F0
.text:0040D0F0 Buffer          = dword ptr  4
.text:0040D0F0
.text:0040D0F0                 jmp     ds:__imp_puts
.text:0040D0F0 puts            endp
.text:0040D0F0
.text:0040D0F0 ; ---------------------------------------------------------------------------
.text:0040D0F6                 align 10h
.text:0040D100
.text:0040D100 ; =============== S U B R O U T I N E =======================================
.text:0040D100
.text:0040D100 ; Attributes: thunk
.text:0040D100
.text:0040D100 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040D100 setlocale       proc near               ; CODE XREF: sub_401380+38↑p
.text:0040D100
.text:0040D100 Category        = dword ptr  4
.text:0040D100 Locale          = dword ptr  8
.text:0040D100
.text:0040D100                 jmp     ds:__imp_setlocale
.text:0040D100 setlocale       endp
.text:0040D100
.text:0040D100 ; ---------------------------------------------------------------------------
.text:0040D106                 align 10h
.text:0040D110
.text:0040D110 ; =============== S U B R O U T I N E =======================================
.text:0040D110
.text:0040D110 ; Attributes: thunk
.text:0040D110
.text:0040D110 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040D110 memcpy          proc near               ; CODE XREF: sub_401380+258↑p
.text:0040D110                                         ; sub_401380+2CC↑p ...
.text:0040D110
.text:0040D110 Src             = dword ptr  8
.text:0040D110 Size            = dword ptr  0Ch
.text:0040D110
.text:0040D110                 jmp     ds:__imp_memcpy
.text:0040D110 memcpy          endp
.text:0040D110
.text:0040D110 ; ---------------------------------------------------------------------------
.text:0040D116                 align 10h
.text:0040D120
.text:0040D120 ; =============== S U B R O U T I N E =======================================
.text:0040D120
.text:0040D120 ; Attributes: thunk
.text:0040D120
.text:0040D120 ; int *__cdecl errno()
.text:0040D120 _errno          proc near               ; CODE XREF: sub_401380+311↑p
.text:0040D120                                         ; sub_401380+352↑p ...
.text:0040D120                 jmp     ds:__imp__errno
.text:0040D120 _errno          endp
.text:0040D120
.text:0040D120 ; ---------------------------------------------------------------------------
.text:0040D126                 align 10h
.text:0040D130
.text:0040D130 ; =============== S U B R O U T I N E =======================================
.text:0040D130
.text:0040D130 ; Attributes: thunk
.text:0040D130
.text:0040D130 ; void __cdecl free(void *Block)
.text:0040D130 free            proc near               ; CODE XREF: sub_401380:loc_4014A8↑p
.text:0040D130                                         ; sub_401380+279↑p ...
.text:0040D130
.text:0040D130 Block           = dword ptr  4
.text:0040D130
.text:0040D130                 jmp     ds:__imp_free
.text:0040D130 free            endp
.text:0040D130
.text:0040D130 ; ---------------------------------------------------------------------------
.text:0040D136                 align 10h
.text:0040D140
.text:0040D140 ; =============== S U B R O U T I N E =======================================
.text:0040D140
.text:0040D140 ; Attributes: noreturn thunk
.text:0040D140
.text:0040D140 ; void __cdecl __noreturn exit(int Code)
.text:0040D140 exit            proc near               ; CODE XREF: sub_401380:loc_401481↑p
.text:0040D140                                         ; sub_401830+3E↑p ...
.text:0040D140
.text:0040D140 Code            = dword ptr  4
.text:0040D140
.text:0040D140                 jmp     ds:__imp_exit
.text:0040D140 exit            endp
.text:0040D140
.text:0040D140 ; ---------------------------------------------------------------------------
.text:0040D146                 align 10h
.text:0040D150
.text:0040D150 ; =============== S U B R O U T I N E =======================================
.text:0040D150
.text:0040D150 ; Attributes: thunk
.text:0040D150
.text:0040D150 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040D150 fputs           proc near               ; CODE XREF: sub_401830+7F↑p
.text:0040D150                                         ; sub_401830+A1↑p ...
.text:0040D150
.text:0040D150 Buffer          = dword ptr  4
.text:0040D150 Stream          = dword ptr  8
.text:0040D150
.text:0040D150                 jmp     ds:__imp_fputs
.text:0040D150 fputs           endp
.text:0040D150
.text:0040D150 ; ---------------------------------------------------------------------------
.text:0040D156                 align 10h
.text:0040D160
.text:0040D160 ; =============== S U B R O U T I N E =======================================
.text:0040D160
.text:0040D160 ; Attributes: thunk
.text:0040D160
.text:0040D160 ; int printf(const char *const Format, ...)
.text:0040D160 printf          proc near               ; CODE XREF: sub_401830+5D↑p
.text:0040D160                                         ; sub_401830+E0↑p ...
.text:0040D160
.text:0040D160 Format          = dword ptr  4
.text:0040D160
.text:0040D160                 jmp     ds:__imp_printf
.text:0040D160 printf          endp
.text:0040D160
.text:0040D160 ; ---------------------------------------------------------------------------
.text:0040D166                 align 10h
.text:0040D170
.text:0040D170 ; =============== S U B R O U T I N E =======================================
.text:0040D170
.text:0040D170 ; Attributes: thunk
.text:0040D170
.text:0040D170 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040D170 fprintf         proc near               ; CODE XREF: sub_401380+F5↑p
.text:0040D170                                         ; sub_401830+36↑p ...
.text:0040D170
.text:0040D170 Stream          = dword ptr  4
.text:0040D170 Format          = dword ptr  8
.text:0040D170
.text:0040D170                 jmp     ds:__imp_fprintf
.text:0040D170 fprintf         endp
.text:0040D170
.text:0040D170 ; ---------------------------------------------------------------------------
.text:0040D176                 align 10h
.text:0040D180
.text:0040D180 ; =============== S U B R O U T I N E =======================================
.text:0040D180
.text:0040D180 ; Attributes: thunk
.text:0040D180
.text:0040D180 ; size_t __cdecl strlen(const char *Str)
.text:0040D180 strlen          proc near               ; CODE XREF: sub_4021A0+2A9↑p
.text:0040D180                                         ; sub_4021A0+346↑p ...
.text:0040D180
.text:0040D180 Str             = dword ptr  4
.text:0040D180
.text:0040D180                 jmp     ds:__imp_strlen
.text:0040D180 strlen          endp
.text:0040D180
.text:0040D180 ; ---------------------------------------------------------------------------
.text:0040D186                 align 10h
.text:0040D190
.text:0040D190 ; =============== S U B R O U T I N E =======================================
.text:0040D190
.text:0040D190 ; Attributes: thunk
.text:0040D190
.text:0040D190 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040D190 strncmp         proc near               ; CODE XREF: sub_4021A0+23F↑p
.text:0040D190                                         ; sub_4021A0+699↑p
.text:0040D190
.text:0040D190 Str1            = dword ptr  4
.text:0040D190 Str2            = dword ptr  8
.text:0040D190 MaxCount        = dword ptr  0Ch
.text:0040D190
.text:0040D190                 jmp     ds:__imp_strncmp
.text:0040D190 strncmp         endp
.text:0040D190
.text:0040D190 ; ---------------------------------------------------------------------------
.text:0040D196                 align 10h
.text:0040D1A0
.text:0040D1A0 ; =============== S U B R O U T I N E =======================================
.text:0040D1A0
.text:0040D1A0 ; Attributes: thunk
.text:0040D1A0
.text:0040D1A0 ; char *__cdecl getenv(const char *VarName)
.text:0040D1A0 getenv          proc near               ; CODE XREF: sub_4021A0+B57↑p
.text:0040D1A0                                         ; sub_405D80+3EE↑p ...
.text:0040D1A0
.text:0040D1A0 VarName         = dword ptr  4
.text:0040D1A0
.text:0040D1A0                 jmp     ds:__imp_getenv
.text:0040D1A0 getenv          endp
.text:0040D1A0
.text:0040D1A0 ; ---------------------------------------------------------------------------
.text:0040D1A6                 align 10h
.text:0040D1B0
.text:0040D1B0 ; =============== S U B R O U T I N E =======================================
.text:0040D1B0
.text:0040D1B0 ; Attributes: thunk
.text:0040D1B0
.text:0040D1B0 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040D1B0 strchr          proc near               ; CODE XREF: sub_4021A0+469↑p
.text:0040D1B0                                         ; sub_4021A0+53A↑p ...
.text:0040D1B0
.text:0040D1B0 Str             = dword ptr  4
.text:0040D1B0 Val             = dword ptr  8
.text:0040D1B0
.text:0040D1B0                 jmp     ds:__imp_strchr
.text:0040D1B0 strchr          endp
.text:0040D1B0
.text:0040D1B0 ; ---------------------------------------------------------------------------
.text:0040D1B6                 align 10h
.text:0040D1C0
.text:0040D1C0 ; =============== S U B R O U T I N E =======================================
.text:0040D1C0
.text:0040D1C0 ; Attributes: thunk
.text:0040D1C0
.text:0040D1C0 ; int __cdecl fclose(FILE *Stream)
.text:0040D1C0 fclose          proc near               ; CODE XREF: sub_403240+27↑p
.text:0040D1C0                                         ; .text:0040A7EE↑p
.text:0040D1C0
.text:0040D1C0 Stream          = dword ptr  4
.text:0040D1C0
.text:0040D1C0                 jmp     ds:__imp_fclose
.text:0040D1C0 fclose          endp
.text:0040D1C0
.text:0040D1C0 ; ---------------------------------------------------------------------------
.text:0040D1C6                 align 10h
.text:0040D1D0
.text:0040D1D0 ; =============== S U B R O U T I N E =======================================
.text:0040D1D0
.text:0040D1D0 ; Attributes: thunk
.text:0040D1D0
.text:0040D1D0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040D1D0 memset          proc near               ; CODE XREF: .text:00403506↑p
.text:0040D1D0
.text:0040D1D0 Val             = dword ptr  8
.text:0040D1D0 Size            = dword ptr  0Ch
.text:0040D1D0
.text:0040D1D0                 jmp     ds:__imp_memset
.text:0040D1D0 memset          endp
.text:0040D1D0
.text:0040D1D0 ; ---------------------------------------------------------------------------
.text:0040D1D6                 align 10h
.text:0040D1E0
.text:0040D1E0 ; =============== S U B R O U T I N E =======================================
.text:0040D1E0
.text:0040D1E0 ; Attributes: thunk
.text:0040D1E0
.text:0040D1E0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040D1E0 calloc          proc near               ; CODE XREF: .text:00403543↑p
.text:0040D1E0                                         ; sub_407BA0+AC↑p
.text:0040D1E0
.text:0040D1E0 Count           = dword ptr  4
.text:0040D1E0 Size            = dword ptr  8
.text:0040D1E0
.text:0040D1E0                 jmp     ds:__imp_calloc
.text:0040D1E0 calloc          endp
.text:0040D1E0
.text:0040D1E0 ; ---------------------------------------------------------------------------
.text:0040D1E6                 align 10h
.text:0040D1F0
.text:0040D1F0 ; =============== S U B R O U T I N E =======================================
.text:0040D1F0
.text:0040D1F0 ; Attributes: thunk
.text:0040D1F0
.text:0040D1F0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040D1F0 realloc         proc near               ; CODE XREF: .text:00403440↑p
.text:0040D1F0                                         ; sub_403470+16↑p ...
.text:0040D1F0
.text:0040D1F0 Block           = dword ptr  4
.text:0040D1F0 Size            = dword ptr  8
.text:0040D1F0
.text:0040D1F0                 jmp     ds:__imp_realloc
.text:0040D1F0 realloc         endp
.text:0040D1F0
.text:0040D1F0 ; ---------------------------------------------------------------------------
.text:0040D1F6                 align 10h
.text:0040D200
.text:0040D200 ; =============== S U B R O U T I N E =======================================
.text:0040D200
.text:0040D200 ; Attributes: thunk
.text:0040D200
.text:0040D200 ; void *__cdecl malloc(size_t Size)
.text:0040D200 malloc          proc near               ; CODE XREF: sub_4033A0+24↑p
.text:0040D200                                         ; sub_4033E0+E↑p ...
.text:0040D200
.text:0040D200 Size            = dword ptr  4
.text:0040D200
.text:0040D200                 jmp     ds:__imp_malloc
.text:0040D200 malloc          endp
.text:0040D200
.text:0040D200 ; ---------------------------------------------------------------------------
.text:0040D206                 align 10h
.text:0040D210
.text:0040D210 ; =============== S U B R O U T I N E =======================================
.text:0040D210
.text:0040D210 ; Attributes: noreturn thunk
.text:0040D210
.text:0040D210 ; void __cdecl __noreturn abort()
.text:0040D210 abort           proc near               ; CODE XREF: sub_403690+32↑p
.text:0040D210                                         ; sub_4039C0:loc_403A5C↑p ...
.text:0040D210                 jmp     ds:__imp_abort
.text:0040D210 abort           endp
.text:0040D210
.text:0040D210 ; ---------------------------------------------------------------------------
.text:0040D216                 align 10h
.text:0040D220
.text:0040D220 ; =============== S U B R O U T I N E =======================================
.text:0040D220
.text:0040D220 ; Attributes: thunk
.text:0040D220
.text:0040D220 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040D220 vfprintf        proc near               ; CODE XREF: sub_4039C0+C1↑p
.text:0040D220                                         ; sub_404FC0+49↑p ...
.text:0040D220
.text:0040D220 Stream          = dword ptr  4
.text:0040D220 Format          = dword ptr  8
.text:0040D220 ArgList         = dword ptr  0Ch
.text:0040D220
.text:0040D220                 jmp     ds:__imp_vfprintf
.text:0040D220 vfprintf        endp
.text:0040D220
.text:0040D220 ; ---------------------------------------------------------------------------
.text:0040D226                 align 10h
.text:0040D230
.text:0040D230 ; =============== S U B R O U T I N E =======================================
.text:0040D230
.text:0040D230 ; Attributes: thunk
.text:0040D230
.text:0040D230 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040D230 _flsbuf         proc near               ; CODE XREF: sub_4039C0+128↑p
.text:0040D230                                         ; sub_4039C0+13A↑p ...
.text:0040D230
.text:0040D230 File            = dword ptr  8
.text:0040D230
.text:0040D230                 jmp     ds:__imp__flsbuf
.text:0040D230 _flsbuf         endp
.text:0040D230
.text:0040D230 ; ---------------------------------------------------------------------------
.text:0040D236                 align 10h
.text:0040D240
.text:0040D240 ; =============== S U B R O U T I N E =======================================
.text:0040D240
.text:0040D240 ; Attributes: thunk
.text:0040D240
.text:0040D240 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040D240 iswctype        proc near               ; CODE XREF: sub_403C60+78B↑p
.text:0040D240
.text:0040D240 C               = word ptr  4
.text:0040D240 Type            = word ptr  8
.text:0040D240
.text:0040D240                 jmp     ds:__imp_iswctype
.text:0040D240 iswctype        endp
.text:0040D240
.text:0040D240 ; ---------------------------------------------------------------------------
.text:0040D246                 align 10h
.text:0040D250
.text:0040D250 ; =============== S U B R O U T I N E =======================================
.text:0040D250
.text:0040D250 ; Attributes: thunk
.text:0040D250
.text:0040D250 ; int __cdecl isctype(int C, int Type)
.text:0040D250 _isctype        proc near               ; CODE XREF: sub_403C60+610↑p
.text:0040D250
.text:0040D250 C               = dword ptr  4
.text:0040D250 Type            = dword ptr  8
.text:0040D250
.text:0040D250                 jmp     ds:__imp__isctype
.text:0040D250 _isctype        endp
.text:0040D250
.text:0040D250 ; ---------------------------------------------------------------------------
.text:0040D256                 align 10h
.text:0040D260
.text:0040D260 ; =============== S U B R O U T I N E =======================================
.text:0040D260
.text:0040D260 ; Attributes: thunk
.text:0040D260
.text:0040D260 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040D260 strcmp          proc near               ; CODE XREF: sub_4050C4+180↑p
.text:0040D260                                         ; .text:00409BEB↑p
.text:0040D260
.text:0040D260 Str1            = dword ptr  4
.text:0040D260 Str2            = dword ptr  8
.text:0040D260
.text:0040D260                 jmp     ds:__imp_strcmp
.text:0040D260 strcmp          endp
.text:0040D260
.text:0040D260 ; ---------------------------------------------------------------------------
.text:0040D266                 align 10h
.text:0040D270
.text:0040D270 ; =============== S U B R O U T I N E =======================================
.text:0040D270
.text:0040D270 ; Attributes: thunk
.text:0040D270
.text:0040D270 ; int __cdecl fflush(FILE *Stream)
.text:0040D270 fflush          proc near               ; CODE XREF: sub_404FC0+19↑p
.text:0040D270                                         ; sub_404FC0+81↑p ...
.text:0040D270
.text:0040D270 Stream          = dword ptr  4
.text:0040D270
.text:0040D270                 jmp     ds:__imp_fflush
.text:0040D270 fflush          endp
.text:0040D270
.text:0040D270 ; ---------------------------------------------------------------------------
.text:0040D276                 align 10h
.text:0040D280
.text:0040D280 ; =============== S U B R O U T I N E =======================================
.text:0040D280
.text:0040D280 ; Attributes: thunk
.text:0040D280
.text:0040D280 ; char *__cdecl strerror(int ErrorMessage)
.text:0040D280 strerror        proc near               ; CODE XREF: sub_404FC0+A5↑p
.text:0040D280                                         ; sub_4050C4+10F↑p
.text:0040D280
.text:0040D280 ErrorMessage    = dword ptr  4
.text:0040D280
.text:0040D280                 jmp     ds:__imp_strerror
.text:0040D280 strerror        endp
.text:0040D280
.text:0040D280 ; ---------------------------------------------------------------------------
.text:0040D286                 align 10h
.text:0040D290
.text:0040D290 ; =============== S U B R O U T I N E =======================================
.text:0040D290
.text:0040D290 ; Attributes: thunk
.text:0040D290
.text:0040D290 ; char *__cdecl ctime(const __time32_t *const Time)
.text:0040D290 ctime           proc near               ; CODE XREF: .text:0040542D↑p
.text:0040D290                                         ; .text:0040544F↑p ...
.text:0040D290
.text:0040D290 Time            = dword ptr  4
.text:0040D290
.text:0040D290                 jmp     ds:__imp_ctime
.text:0040D290 ctime           endp
.text:0040D290
.text:0040D290 ; ---------------------------------------------------------------------------
.text:0040D296                 align 10h
.text:0040D2A0
.text:0040D2A0 ; =============== S U B R O U T I N E =======================================
.text:0040D2A0
.text:0040D2A0 ; Attributes: thunk
.text:0040D2A0
.text:0040D2A0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040D2A0 _get_osfhandle  proc near               ; CODE XREF: sub_4054D0+3A↑p
.text:0040D2A0                                         ; sub_40AB80+15↑p
.text:0040D2A0
.text:0040D2A0 FileHandle      = dword ptr  4
.text:0040D2A0
.text:0040D2A0                 jmp     ds:__imp__get_osfhandle
.text:0040D2A0 _get_osfhandle  endp
.text:0040D2A0
.text:0040D2A0 ; ---------------------------------------------------------------------------
.text:0040D2A6                 align 10h
.text:0040D2B0
.text:0040D2B0 ; =============== S U B R O U T I N E =======================================
.text:0040D2B0
.text:0040D2B0 ; Attributes: thunk
.text:0040D2B0
.text:0040D2B0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0040D2B0 strcat          proc near               ; CODE XREF: sub_405730+98↑p
.text:0040D2B0                                         ; sub_4079B0+191↑p ...
.text:0040D2B0
.text:0040D2B0 Destination     = dword ptr  4
.text:0040D2B0 Source          = dword ptr  8
.text:0040D2B0
.text:0040D2B0                 jmp     ds:__imp_strcat
.text:0040D2B0 strcat          endp
.text:0040D2B0
.text:0040D2B0 ; ---------------------------------------------------------------------------
.text:0040D2B6                 align 10h
.text:0040D2C0
.text:0040D2C0 ; =============== S U B R O U T I N E =======================================
.text:0040D2C0
.text:0040D2C0 ; Attributes: thunk
.text:0040D2C0
.text:0040D2C0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0040D2C0 strcpy          proc near               ; CODE XREF: sub_405730+73↑p
.text:0040D2C0                                         ; _win32_longpath+13C↑p ...
.text:0040D2C0
.text:0040D2C0 Destination     = dword ptr  4
.text:0040D2C0 Source          = dword ptr  8
.text:0040D2C0
.text:0040D2C0                 jmp     ds:__imp_strcpy
.text:0040D2C0 strcpy          endp
.text:0040D2C0
.text:0040D2C0 ; ---------------------------------------------------------------------------
.text:0040D2C6                 align 10h
.text:0040D2D0
.text:0040D2D0 ; =============== S U B R O U T I N E =======================================
.text:0040D2D0
.text:0040D2D0 ; Attributes: thunk
.text:0040D2D0
.text:0040D2D0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0040D2D0 strstr          proc near               ; CODE XREF: sub_405D80+3BF↑p
.text:0040D2D0                                         ; sub_405D80+3DC↑p ...
.text:0040D2D0
.text:0040D2D0 Str             = dword ptr  4
.text:0040D2D0 SubStr          = dword ptr  8
.text:0040D2D0
.text:0040D2D0                 jmp     ds:__imp_strstr
.text:0040D2D0 strstr          endp
.text:0040D2D0
.text:0040D2D0 ; ---------------------------------------------------------------------------
.text:0040D2D6                 align 10h
.text:0040D2E0
.text:0040D2E0 ; =============== S U B R O U T I N E =======================================
.text:0040D2E0
.text:0040D2E0 ; Attributes: thunk
.text:0040D2E0
.text:0040D2E0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0040D2E0 strrchr         proc near               ; CODE XREF: sub_405D80+CB↑p
.text:0040D2E0                                         ; sub_405D80+3A7↑p ...
.text:0040D2E0
.text:0040D2E0 Str             = dword ptr  4
.text:0040D2E0
.text:0040D2E0                 jmp     ds:__imp_strrchr
.text:0040D2E0 strrchr         endp
.text:0040D2E0
.text:0040D2E0 ; ---------------------------------------------------------------------------
.text:0040D2E6                 align 10h
.text:0040D2F0
.text:0040D2F0 ; =============== S U B R O U T I N E =======================================
.text:0040D2F0
.text:0040D2F0 ; Attributes: thunk
.text:0040D2F0
.text:0040D2F0 ; int __cdecl isalpha(int C)
.text:0040D2F0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0040D2F0
.text:0040D2F0 C               = dword ptr  4
.text:0040D2F0
.text:0040D2F0                 jmp     ds:__imp_isalpha
.text:0040D2F0 isalpha         endp
.text:0040D2F0
.text:0040D2F0 ; ---------------------------------------------------------------------------
.text:0040D2F6                 align 10h
.text:0040D300
.text:0040D300 ; =============== S U B R O U T I N E =======================================
.text:0040D300
.text:0040D300 ; Attributes: thunk
.text:0040D300
.text:0040D300 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0040D300 _stricmp_0      proc near               ; CODE XREF: .text:00407824↑p
.text:0040D300
.text:0040D300 String1         = dword ptr  4
.text:0040D300 String2         = dword ptr  8
.text:0040D300
.text:0040D300                 jmp     ds:__imp__stricmp_0
.text:0040D300 _stricmp_0      endp
.text:0040D300
.text:0040D300 ; ---------------------------------------------------------------------------
.text:0040D306                 align 10h
.text:0040D310
.text:0040D310 ; =============== S U B R O U T I N E =======================================
.text:0040D310
.text:0040D310 ; Attributes: thunk
.text:0040D310
.text:0040D310 ; char *__cdecl strncat(char *Destination, const char *Source, size_t Count)
.text:0040D310 strncat         proc near               ; CODE XREF: sub_4079B0+75↑p
.text:0040D310
.text:0040D310 Destination     = dword ptr  4
.text:0040D310 Source          = dword ptr  8
.text:0040D310 Count           = dword ptr  0Ch
.text:0040D310
.text:0040D310                 jmp     ds:__imp_strncat
.text:0040D310 strncat         endp
.text:0040D310
.text:0040D310 ; ---------------------------------------------------------------------------
.text:0040D316                 align 10h
.text:0040D320
.text:0040D320 ; =============== S U B R O U T I N E =======================================
.text:0040D320
.text:0040D320 ; Attributes: thunk
.text:0040D320
.text:0040D320 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040D320 strncpy         proc near               ; CODE XREF: sub_4079B0+61↑p
.text:0040D320                                         ; sub_4079B0+118↑p ...
.text:0040D320
.text:0040D320 Destination     = dword ptr  4
.text:0040D320 Source          = dword ptr  8
.text:0040D320 Count           = dword ptr  0Ch
.text:0040D320
.text:0040D320                 jmp     ds:__imp_strncpy
.text:0040D320 strncpy         endp
.text:0040D320
.text:0040D320 ; ---------------------------------------------------------------------------
.text:0040D326                 align 10h
.text:0040D330
.text:0040D330 ; =============== S U B R O U T I N E =======================================
.text:0040D330
.text:0040D330 ; Attributes: thunk
.text:0040D330
.text:0040D330 ; int __cdecl toupper(int C)
.text:0040D330 toupper         proc near               ; CODE XREF: sub_407BA0+10E↑p
.text:0040D330
.text:0040D330 C               = dword ptr  4
.text:0040D330
.text:0040D330                 jmp     ds:__imp_toupper
.text:0040D330 toupper         endp
.text:0040D330
.text:0040D330 ; ---------------------------------------------------------------------------
.text:0040D336                 align 10h
.text:0040D340
.text:0040D340 ; =============== S U B R O U T I N E =======================================
.text:0040D340
.text:0040D340 ; Attributes: thunk
.text:0040D340
.text:0040D340 ; char *__cdecl getcwd(char *DstBuf, int SizeInBytes)
.text:0040D340 _getcwd         proc near               ; CODE XREF: j__getcwd↑j
.text:0040D340
.text:0040D340 DstBuf          = dword ptr  4
.text:0040D340 SizeInBytes     = dword ptr  8
.text:0040D340
.text:0040D340                 jmp     ds:__imp__getcwd
.text:0040D340 _getcwd         endp
.text:0040D340
.text:0040D340 ; ---------------------------------------------------------------------------
.text:0040D346                 align 10h
.text:0040D350
.text:0040D350 ; =============== S U B R O U T I N E =======================================
.text:0040D350
.text:0040D350 ; Attributes: thunk
.text:0040D350
.text:0040D350 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0040D350 sprintf         proc near               ; CODE XREF: .text:004092AA↑p
.text:0040D350                                         ; .text:004092CB↑p ...
.text:0040D350
.text:0040D350 Buffer          = dword ptr  4
.text:0040D350 Format          = dword ptr  8
.text:0040D350
.text:0040D350                 jmp     ds:__imp_sprintf
.text:0040D350 sprintf         endp
.text:0040D350
.text:0040D350 ; ---------------------------------------------------------------------------
.text:0040D356                 align 10h
.text:0040D360
.text:0040D360 ; =============== S U B R O U T I N E =======================================
.text:0040D360
.text:0040D360 ; Attributes: thunk
.text:0040D360
.text:0040D360 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040D360 sscanf          proc near               ; CODE XREF: .text:00409E2E↑p
.text:0040D360
.text:0040D360 Buffer          = dword ptr  4
.text:0040D360 Format          = dword ptr  8
.text:0040D360
.text:0040D360                 jmp     ds:__imp_sscanf
.text:0040D360 sscanf          endp
.text:0040D360
.text:0040D360 ; ---------------------------------------------------------------------------
.text:0040D366                 align 10h
.text:0040D370
.text:0040D370 ; =============== S U B R O U T I N E =======================================
.text:0040D370
.text:0040D370 ; Attributes: thunk
.text:0040D370
.text:0040D370 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0040D370 strspn          proc near               ; CODE XREF: .text:00409C7A↑p
.text:0040D370                                         ; .text:00409E94↑p ...
.text:0040D370
.text:0040D370 Str             = dword ptr  4
.text:0040D370 Control         = dword ptr  8
.text:0040D370
.text:0040D370                 jmp     ds:__imp_strspn
.text:0040D370 strspn          endp
.text:0040D370
.text:0040D370 ; ---------------------------------------------------------------------------
.text:0040D376                 align 10h
.text:0040D380
.text:0040D380 ; =============== S U B R O U T I N E =======================================
.text:0040D380
.text:0040D380 ; Attributes: thunk
.text:0040D380
.text:0040D380 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0040D380 fopen           proc near               ; CODE XREF: sub_40A72F+26↑p
.text:0040D380                                         ; sub_40A72F+99↑p
.text:0040D380
.text:0040D380 FileName        = dword ptr  4
.text:0040D380 Mode            = dword ptr  8
.text:0040D380
.text:0040D380                 jmp     ds:__imp_fopen
.text:0040D380 fopen           endp
.text:0040D380
.text:0040D380 ; ---------------------------------------------------------------------------
.text:0040D386                 align 10h
.text:0040D390
.text:0040D390 ; =============== S U B R O U T I N E =======================================
.text:0040D390
.text:0040D390 ; Attributes: thunk
.text:0040D390
.text:0040D390 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040D390 _filelengthi64  proc near               ; CODE XREF: sub_40AB80+1F↑p
.text:0040D390
.text:0040D390 FileHandle      = dword ptr  4
.text:0040D390
.text:0040D390                 jmp     ds:__imp__filelengthi64
.text:0040D390 _filelengthi64  endp
.text:0040D390
.text:0040D390 ; ---------------------------------------------------------------------------
.text:0040D396                 align 10h
.text:0040D3A0
.text:0040D3A0 ; =============== S U B R O U T I N E =======================================
.text:0040D3A0
.text:0040D3A0 ; Attributes: thunk
.text:0040D3A0
.text:0040D3A0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0040D3A0 strpbrk         proc near               ; CODE XREF: sub_40ABE0+87↑p
.text:0040D3A0
.text:0040D3A0 Str             = dword ptr  4
.text:0040D3A0 Control         = dword ptr  8
.text:0040D3A0
.text:0040D3A0                 jmp     ds:__imp_strpbrk
.text:0040D3A0 strpbrk         endp
.text:0040D3A0
.text:0040D3A0 ; ---------------------------------------------------------------------------
.text:0040D3A6                 align 10h
.text:0040D3B0
.text:0040D3B0 ; =============== S U B R O U T I N E =======================================
.text:0040D3B0
.text:0040D3B0 ; Attributes: thunk
.text:0040D3B0
.text:0040D3B0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0040D3B0 _fdopen         proc near               ; CODE XREF: sub_40AC80+69↑p
.text:0040D3B0
.text:0040D3B0 FileHandle      = dword ptr  4
.text:0040D3B0 Format          = dword ptr  8
.text:0040D3B0
.text:0040D3B0                 jmp     ds:__imp__fdopen
.text:0040D3B0 _fdopen         endp
.text:0040D3B0
.text:0040D3B0 ; ---------------------------------------------------------------------------
.text:0040D3B6                 align 10h
.text:0040D3C0
.text:0040D3C0 ; =============== S U B R O U T I N E =======================================
.text:0040D3C0
.text:0040D3C0 ; Attributes: thunk
.text:0040D3C0
.text:0040D3C0 ; int __cdecl close(int FileHandle)
.text:0040D3C0 _close          proc near               ; CODE XREF: sub_40AC80+90↑p
.text:0040D3C0
.text:0040D3C0 FileHandle      = dword ptr  4
.text:0040D3C0
.text:0040D3C0                 jmp     ds:__imp__close
.text:0040D3C0 _close          endp
.text:0040D3C0
.text:0040D3C0 ; ---------------------------------------------------------------------------
.text:0040D3C6                 align 10h
.text:0040D3D0
.text:0040D3D0 ; =============== S U B R O U T I N E =======================================
.text:0040D3D0
.text:0040D3D0 ; Attributes: thunk
.text:0040D3D0
.text:0040D3D0 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040D3D0 _open           proc near               ; CODE XREF: sub_40B0D0:loc_40B460↑p
.text:0040D3D0
.text:0040D3D0 FileName        = dword ptr  4
.text:0040D3D0 OpenFlag        = dword ptr  8
.text:0040D3D0
.text:0040D3D0                 jmp     ds:__imp__open
.text:0040D3D0 _open           endp
.text:0040D3D0
.text:0040D3D0 ; ---------------------------------------------------------------------------
.text:0040D3D6                 align 10h
.text:0040D3E0
.text:0040D3E0 ; =============== S U B R O U T I N E =======================================
.text:0040D3E0
.text:0040D3E0 ; Attributes: noreturn thunk
.text:0040D3E0
.text:0040D3E0 _assert         proc near               ; CODE XREF: sub_40B0D0+414↑p
.text:0040D3E0                 jmp     ds:__imp__assert
.text:0040D3E0 _assert         endp
.text:0040D3E0
.text:0040D3E0 ; ---------------------------------------------------------------------------
.text:0040D3E6                 align 10h
.text:0040D3F0
.text:0040D3F0 ; =============== S U B R O U T I N E =======================================
.text:0040D3F0
.text:0040D3F0 ; Attributes: thunk
.text:0040D3F0
.text:0040D3F0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040D3F0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040D3F0
.text:0040D3F0 lpTopLevelExceptionFilter= dword ptr  4
.text:0040D3F0
.text:0040D3F0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040D3F0 SetUnhandledExceptionFilter endp
.text:0040D3F0
.text:0040D3F0 ; ---------------------------------------------------------------------------
.text:0040D3F6                 align 10h
.text:0040D400
.text:0040D400 ; =============== S U B R O U T I N E =======================================
.text:0040D400
.text:0040D400 ; Attributes: noreturn thunk
.text:0040D400
.text:0040D400 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040D400 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040D400
.text:0040D400 uExitCode       = dword ptr  4
.text:0040D400
.text:0040D400                 jmp     ds:__imp_ExitProcess
.text:0040D400 ExitProcess     endp
.text:0040D400
.text:0040D400 ; ---------------------------------------------------------------------------
.text:0040D406                 align 10h
.text:0040D410
.text:0040D410 ; =============== S U B R O U T I N E =======================================
.text:0040D410
.text:0040D410 ; Attributes: thunk
.text:0040D410
.text:0040D410 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0040D410 GetModuleHandleA proc near              ; CODE XREF: sub_4055C0+18↑p
.text:0040D410                                         ; sub_405D80+329↑p ...
.text:0040D410
.text:0040D410 lpModuleName    = dword ptr  4
.text:0040D410
.text:0040D410                 jmp     ds:__imp_GetModuleHandleA
.text:0040D410 GetModuleHandleA endp
.text:0040D410
.text:0040D410 ; ---------------------------------------------------------------------------
.text:0040D416                 align 10h
.text:0040D420
.text:0040D420 ; =============== S U B R O U T I N E =======================================
.text:0040D420
.text:0040D420 ; Attributes: thunk
.text:0040D420
.text:0040D420 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0040D420 GetProcAddress  proc near               ; CODE XREF: sub_4055C0+33↑p
.text:0040D420                                         ; sub_405730+2E↑p ...
.text:0040D420
.text:0040D420 hModule         = dword ptr  4
.text:0040D420 lpProcName      = dword ptr  8
.text:0040D420
.text:0040D420                 jmp     ds:__imp_GetProcAddress
.text:0040D420 GetProcAddress  endp
.text:0040D420
.text:0040D420 ; ---------------------------------------------------------------------------
.text:0040D426                 align 10h
.text:0040D430
.text:0040D430 ; =============== S U B R O U T I N E =======================================
.text:0040D430
.text:0040D430 ; Attributes: thunk
.text:0040D430
.text:0040D430 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0040D430 GetFileAttributesA proc near            ; CODE XREF: sub_4055C0+47↑p
.text:0040D430                                         ; sub_408A10+65↑p ...
.text:0040D430
.text:0040D430 lpFileName      = dword ptr  4
.text:0040D430
.text:0040D430                 jmp     ds:__imp_GetFileAttributesA
.text:0040D430 GetFileAttributesA endp
.text:0040D430
.text:0040D430 ; ---------------------------------------------------------------------------
.text:0040D436                 align 10h
.text:0040D440
.text:0040D440 ; =============== S U B R O U T I N E =======================================
.text:0040D440
.text:0040D440 ; Attributes: thunk
.text:0040D440
.text:0040D440 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0040D440 FreeLibrary     proc near               ; CODE XREF: sub_4055C0+A4↑p
.text:0040D440                                         ; sub_405730+11D↑p ...
.text:0040D440
.text:0040D440 hLibModule      = dword ptr  4
.text:0040D440
.text:0040D440                 jmp     ds:__imp_FreeLibrary
.text:0040D440 FreeLibrary     endp
.text:0040D440
.text:0040D440 ; ---------------------------------------------------------------------------
.text:0040D446                 align 10h
.text:0040D450
.text:0040D450 ; =============== S U B R O U T I N E =======================================
.text:0040D450
.text:0040D450 ; Attributes: thunk
.text:0040D450
.text:0040D450 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040D450 FindFirstFileA  proc near               ; CODE XREF: sub_4055C0+CE↑p
.text:0040D450                                         ; sub_405730+14F↑p ...
.text:0040D450
.text:0040D450 lpFileName      = dword ptr  4
.text:0040D450 lpFindFileData  = dword ptr  8
.text:0040D450
.text:0040D450                 jmp     ds:__imp_FindFirstFileA
.text:0040D450 FindFirstFileA  endp
.text:0040D450
.text:0040D450 ; ---------------------------------------------------------------------------
.text:0040D456                 align 10h
.text:0040D460
.text:0040D460 ; =============== S U B R O U T I N E =======================================
.text:0040D460
.text:0040D460 ; Attributes: thunk
.text:0040D460
.text:0040D460 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0040D460 FindClose       proc near               ; CODE XREF: sub_4055C0+123↑p
.text:0040D460                                         ; sub_405730+10E↑p ...
.text:0040D460
.text:0040D460 hFindFile       = dword ptr  4
.text:0040D460
.text:0040D460                 jmp     ds:__imp_FindClose
.text:0040D460 FindClose       endp
.text:0040D460
.text:0040D460 ; ---------------------------------------------------------------------------
.text:0040D466                 align 10h
.text:0040D470
.text:0040D470 ; =============== S U B R O U T I N E =======================================
.text:0040D470
.text:0040D470 ; Attributes: thunk
.text:0040D470
.text:0040D470 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0040D470 LoadLibraryA    proc near               ; CODE XREF: sub_405730+13↑p
.text:0040D470                                         ; sub_405D80+134↑p ...
.text:0040D470
.text:0040D470 lpLibFileName   = dword ptr  4
.text:0040D470
.text:0040D470                 jmp     ds:__imp_LoadLibraryA
.text:0040D470 LoadLibraryA    endp
.text:0040D470
.text:0040D470 ; ---------------------------------------------------------------------------
.text:0040D476                 align 10h
.text:0040D480
.text:0040D480 ; =============== S U B R O U T I N E =======================================
.text:0040D480
.text:0040D480 ; Attributes: thunk
.text:0040D480
.text:0040D480 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040D480 FindNextFileA   proc near               ; CODE XREF: sub_405730+FF↑p
.text:0040D480                                         ; sub_4079B0+36↑p
.text:0040D480
.text:0040D480 hFindFile       = dword ptr  4
.text:0040D480 lpFindFileData  = dword ptr  8
.text:0040D480
.text:0040D480                 jmp     ds:__imp_FindNextFileA
.text:0040D480 FindNextFileA   endp
.text:0040D480
.text:0040D480 ; ---------------------------------------------------------------------------
.text:0040D486                 align 10h
.text:0040D490
.text:0040D490 ; =============== S U B R O U T I N E =======================================
.text:0040D490
.text:0040D490 ; Attributes: thunk
.text:0040D490
.text:0040D490 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0040D490 GetFileType     proc near               ; CODE XREF: sub_4058B0+43↑p
.text:0040D490                                         ; .text:0040656A↑p
.text:0040D490
.text:0040D490 hFile           = dword ptr  4
.text:0040D490
.text:0040D490                 jmp     ds:__imp_GetFileType
.text:0040D490 GetFileType     endp
.text:0040D490
.text:0040D490 ; ---------------------------------------------------------------------------
.text:0040D496                 align 10h
.text:0040D4A0
.text:0040D4A0 ; =============== S U B R O U T I N E =======================================
.text:0040D4A0
.text:0040D4A0 ; Attributes: thunk
.text:0040D4A0
.text:0040D4A0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0040D4A0 GetFileInformationByHandle proc near    ; CODE XREF: sub_4058B0+69↑p
.text:0040D4A0
.text:0040D4A0 hFile           = dword ptr  4
.text:0040D4A0 lpFileInformation= dword ptr  8
.text:0040D4A0
.text:0040D4A0                 jmp     ds:__imp_GetFileInformationByHandle
.text:0040D4A0 GetFileInformationByHandle endp
.text:0040D4A0
.text:0040D4A0 ; ---------------------------------------------------------------------------
.text:0040D4A6                 align 10h
.text:0040D4B0
.text:0040D4B0 ; =============== S U B R O U T I N E =======================================
.text:0040D4B0
.text:0040D4B0 ; Attributes: thunk
.text:0040D4B0
.text:0040D4B0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0040D4B0 GetFileSize     proc near               ; CODE XREF: sub_4058B0+3F2↑p
.text:0040D4B0
.text:0040D4B0 hFile           = dword ptr  4
.text:0040D4B0 lpFileSizeHigh  = dword ptr  8
.text:0040D4B0
.text:0040D4B0                 jmp     ds:__imp_GetFileSize
.text:0040D4B0 GetFileSize     endp
.text:0040D4B0
.text:0040D4B0 ; ---------------------------------------------------------------------------
.text:0040D4B6                 align 10h
.text:0040D4C0
.text:0040D4C0 ; =============== S U B R O U T I N E =======================================
.text:0040D4C0
.text:0040D4C0 ; Attributes: thunk
.text:0040D4C0
.text:0040D4C0 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0040D4C0 PeekNamedPipe   proc near               ; CODE XREF: sub_4058B0+439↑p
.text:0040D4C0
.text:0040D4C0 hNamedPipe      = dword ptr  4
.text:0040D4C0 lpBuffer        = dword ptr  8
.text:0040D4C0 nBufferSize     = dword ptr  0Ch
.text:0040D4C0 lpBytesRead     = dword ptr  10h
.text:0040D4C0 lpTotalBytesAvail= dword ptr  14h
.text:0040D4C0 lpBytesLeftThisMessage= dword ptr  18h
.text:0040D4C0
.text:0040D4C0                 jmp     ds:__imp_PeekNamedPipe
.text:0040D4C0 PeekNamedPipe   endp
.text:0040D4C0
.text:0040D4C0 ; ---------------------------------------------------------------------------
.text:0040D4C6                 align 10h
.text:0040D4D0
.text:0040D4D0 ; =============== S U B R O U T I N E =======================================
.text:0040D4D0
.text:0040D4D0 ; Attributes: thunk
.text:0040D4D0
.text:0040D4D0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0040D4D0 GetDriveTypeA   proc near               ; CODE XREF: sub_405D80+4C↑p
.text:0040D4D0
.text:0040D4D0 lpRootPathName  = dword ptr  4
.text:0040D4D0
.text:0040D4D0                 jmp     ds:__imp_GetDriveTypeA
.text:0040D4D0 GetDriveTypeA   endp
.text:0040D4D0
.text:0040D4D0 ; ---------------------------------------------------------------------------
.text:0040D4D6                 align 10h
.text:0040D4E0
.text:0040D4E0 ; =============== S U B R O U T I N E =======================================
.text:0040D4E0
.text:0040D4E0 ; Attributes: thunk
.text:0040D4E0
.text:0040D4E0 ; DWORD __stdcall GetLastError()
.text:0040D4E0 GetLastError    proc near               ; CODE XREF: sub_405D80:loc_406009↑p
.text:0040D4E0                                         ; .text:loc_406B4D↑p ...
.text:0040D4E0                 jmp     ds:__imp_GetLastError
.text:0040D4E0 GetLastError    endp
.text:0040D4E0
.text:0040D4E0 ; ---------------------------------------------------------------------------
.text:0040D4E6                 align 10h
.text:0040D4F0
.text:0040D4F0 ; =============== S U B R O U T I N E =======================================
.text:0040D4F0
.text:0040D4F0 ; Attributes: thunk
.text:0040D4F0
.text:0040D4F0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0040D4F0 GetVolumeInformationA proc near         ; CODE XREF: sub_406280+64↑p
.text:0040D4F0                                         ; .text:0040682C↑p ...
.text:0040D4F0
.text:0040D4F0 lpRootPathName  = dword ptr  4
.text:0040D4F0 lpVolumeNameBuffer= dword ptr  8
.text:0040D4F0 nVolumeNameSize = dword ptr  0Ch
.text:0040D4F0 lpVolumeSerialNumber= dword ptr  10h
.text:0040D4F0 lpMaximumComponentLength= dword ptr  14h
.text:0040D4F0 lpFileSystemFlags= dword ptr  18h
.text:0040D4F0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0040D4F0 nFileSystemNameSize= dword ptr  20h
.text:0040D4F0
.text:0040D4F0                 jmp     ds:__imp_GetVolumeInformationA
.text:0040D4F0 GetVolumeInformationA endp
.text:0040D4F0
.text:0040D4F0 ; ---------------------------------------------------------------------------
.text:0040D4F6                 align 10h
.text:0040D500
.text:0040D500 ; =============== S U B R O U T I N E =======================================
.text:0040D500
.text:0040D500 ; Attributes: thunk
.text:0040D500
.text:0040D500 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0040D500 CreateFileA     proc near               ; CODE XREF: sub_4070E0-CA↑p
.text:0040D500                                         ; .text:004081C3↑p ...
.text:0040D500
.text:0040D500 lpFileName      = dword ptr  4
.text:0040D500 dwDesiredAccess = dword ptr  8
.text:0040D500 dwShareMode     = dword ptr  0Ch
.text:0040D500 lpSecurityAttributes= dword ptr  10h
.text:0040D500 dwCreationDisposition= dword ptr  14h
.text:0040D500 dwFlagsAndAttributes= dword ptr  18h
.text:0040D500 hTemplateFile   = dword ptr  1Ch
.text:0040D500
.text:0040D500                 jmp     ds:__imp_CreateFileA
.text:0040D500 CreateFileA     endp
.text:0040D500
.text:0040D500 ; ---------------------------------------------------------------------------
.text:0040D506                 align 10h
.text:0040D510
.text:0040D510 ; =============== S U B R O U T I N E =======================================
.text:0040D510
.text:0040D510 ; Attributes: thunk
.text:0040D510
.text:0040D510 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0040D510 CloseHandle     proc near               ; CODE XREF: sub_4070E0-AF↑p
.text:0040D510                                         ; .text:00408239↑p ...
.text:0040D510
.text:0040D510 hObject         = dword ptr  4
.text:0040D510
.text:0040D510                 jmp     ds:__imp_CloseHandle
.text:0040D510 CloseHandle     endp
.text:0040D510
.text:0040D510 ; ---------------------------------------------------------------------------
.text:0040D516                 align 10h
.text:0040D520
.text:0040D520 ; =============== S U B R O U T I N E =======================================
.text:0040D520
.text:0040D520 ; Attributes: thunk
.text:0040D520
.text:0040D520 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0040D520 SetErrorMode    proc near               ; CODE XREF: sub_4070E0-7A↑p
.text:0040D520                                         ; sub_408FB0+57↑p ...
.text:0040D520
.text:0040D520 uMode           = dword ptr  4
.text:0040D520
.text:0040D520                 jmp     ds:__imp_SetErrorMode
.text:0040D520 SetErrorMode    endp
.text:0040D520
.text:0040D520 ; ---------------------------------------------------------------------------
.text:0040D526                 align 10h
.text:0040D530
.text:0040D530 ; =============== S U B R O U T I N E =======================================
.text:0040D530
.text:0040D530 ; Attributes: thunk
.text:0040D530
.text:0040D530 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0040D530 GetModuleFileNameA proc near            ; CODE XREF: sub_4076A0+1C↑p
.text:0040D530
.text:0040D530 hModule         = dword ptr  4
.text:0040D530 lpFilename      = dword ptr  8
.text:0040D530 nSize           = dword ptr  0Ch
.text:0040D530
.text:0040D530                 jmp     ds:__imp_GetModuleFileNameA
.text:0040D530 GetModuleFileNameA endp
.text:0040D530
.text:0040D530 ; ---------------------------------------------------------------------------
.text:0040D536                 align 10h
.text:0040D540
.text:0040D540 ; =============== S U B R O U T I N E =======================================
.text:0040D540
.text:0040D540 ; Attributes: thunk
.text:0040D540
.text:0040D540 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0040D540 GetShortPathNameA proc near             ; CODE XREF: .text:00407926↑p
.text:0040D540                                         ; .text:00407950↑p
.text:0040D540
.text:0040D540 lpszLongPath    = dword ptr  4
.text:0040D540 lpszShortPath   = dword ptr  8
.text:0040D540 cchBuffer       = dword ptr  0Ch
.text:0040D540
.text:0040D540                 jmp     ds:__imp_GetShortPathNameA
.text:0040D540 GetShortPathNameA endp
.text:0040D540
.text:0040D540 ; ---------------------------------------------------------------------------
.text:0040D546                 align 10h
.text:0040D550
.text:0040D550 ; =============== S U B R O U T I N E =======================================
.text:0040D550
.text:0040D550 ; Attributes: thunk
.text:0040D550
.text:0040D550 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040D550 GetCurrentDirectoryA proc near          ; CODE XREF: .text:00407E48↑p
.text:0040D550                                         ; .text:00407E64↑p ...
.text:0040D550
.text:0040D550 nBufferLength   = dword ptr  4
.text:0040D550 lpBuffer        = dword ptr  8
.text:0040D550
.text:0040D550                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0040D550 GetCurrentDirectoryA endp
.text:0040D550
.text:0040D550 ; ---------------------------------------------------------------------------
.text:0040D556                 align 10h
.text:0040D560
.text:0040D560 ; =============== S U B R O U T I N E =======================================
.text:0040D560
.text:0040D560 ; Attributes: thunk
.text:0040D560
.text:0040D560 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0040D560 DeviceIoControl proc near               ; CODE XREF: .text:0040822C↑p
.text:0040D560                                         ; sub_4085F0+1E5↑p
.text:0040D560
.text:0040D560 hDevice         = dword ptr  4
.text:0040D560 dwIoControlCode = dword ptr  8
.text:0040D560 lpInBuffer      = dword ptr  0Ch
.text:0040D560 nInBufferSize   = dword ptr  10h
.text:0040D560 lpOutBuffer     = dword ptr  14h
.text:0040D560 nOutBufferSize  = dword ptr  18h
.text:0040D560 lpBytesReturned = dword ptr  1Ch
.text:0040D560 lpOverlapped    = dword ptr  20h
.text:0040D560
.text:0040D560                 jmp     ds:__imp_DeviceIoControl
.text:0040D560 DeviceIoControl endp
.text:0040D560
.text:0040D560 ; ---------------------------------------------------------------------------
.text:0040D566                 align 10h
.text:0040D570
.text:0040D570 ; =============== S U B R O U T I N E =======================================
.text:0040D570
.text:0040D570 ; Attributes: thunk
.text:0040D570
.text:0040D570 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040D570 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00408583↑p
.text:0040D570                                         ; sub_4085F0+7B↑p ...
.text:0040D570
.text:0040D570 lpRootPathName  = dword ptr  4
.text:0040D570 lpSectorsPerCluster= dword ptr  8
.text:0040D570 lpBytesPerSector= dword ptr  0Ch
.text:0040D570 lpNumberOfFreeClusters= dword ptr  10h
.text:0040D570 lpTotalNumberOfClusters= dword ptr  14h
.text:0040D570
.text:0040D570                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0040D570 GetDiskFreeSpaceA endp
.text:0040D570
.text:0040D570 ; ---------------------------------------------------------------------------
.text:0040D576                 align 10h
.text:0040D580
.text:0040D580 ; =============== S U B R O U T I N E =======================================
.text:0040D580
.text:0040D580 ; Attributes: thunk
.text:0040D580
.text:0040D580 ; BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName)
.text:0040D580 SetCurrentDirectoryA proc near          ; CODE XREF: sub_4089B0+12↑p
.text:0040D580
.text:0040D580 lpPathName      = dword ptr  4
.text:0040D580
.text:0040D580                 jmp     ds:__imp_SetCurrentDirectoryA
.text:0040D580 SetCurrentDirectoryA endp
.text:0040D580
.text:0040D580 ; ---------------------------------------------------------------------------
.text:0040D586                 align 10h
.text:0040D590
.text:0040D590 ; =============== S U B R O U T I N E =======================================
.text:0040D590
.text:0040D590 ; Attributes: thunk
.text:0040D590
.text:0040D590 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0040D590 GetFullPathNameA proc near              ; CODE XREF: sub_408E80+45↑p
.text:0040D590                                         ; sub_408E80+ED↑p
.text:0040D590
.text:0040D590 lpFileName      = dword ptr  4
.text:0040D590 nBufferLength   = dword ptr  8
.text:0040D590 lpBuffer        = dword ptr  0Ch
.text:0040D590 lpFilePart      = dword ptr  10h
.text:0040D590
.text:0040D590                 jmp     ds:__imp_GetFullPathNameA
.text:0040D590 GetFullPathNameA endp
.text:0040D590
.text:0040D590 ; ---------------------------------------------------------------------------
.text:0040D596                 align 10h
.text:0040D5A0
.text:0040D5A0 ; =============== S U B R O U T I N E =======================================
.text:0040D5A0
.text:0040D5A0 ; Attributes: thunk
.text:0040D5A0
.text:0040D5A0 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0040D5A0 lstrcmpiA       proc near               ; CODE XREF: .text:0040953B↑p
.text:0040D5A0                                         ; .text:00409552↑p ...
.text:0040D5A0
.text:0040D5A0 lpString1       = dword ptr  4
.text:0040D5A0 lpString2       = dword ptr  8
.text:0040D5A0
.text:0040D5A0                 jmp     ds:__imp_lstrcmpiA
.text:0040D5A0 lstrcmpiA       endp
.text:0040D5A0
.text:0040D5A0 ; ---------------------------------------------------------------------------
.text:0040D5A6                 align 10h
.text:0040D5B0
.text:0040D5B0 ; =============== S U B R O U T I N E =======================================
.text:0040D5B0
.text:0040D5B0 ; Attributes: thunk
.text:0040D5B0
.text:0040D5B0 ; DWORD __stdcall GetVersion()
.text:0040D5B0 GetVersion      proc near               ; CODE XREF: .text:004098C3↑p
.text:0040D5B0                 jmp     ds:__imp_GetVersion
.text:0040D5B0 GetVersion      endp
.text:0040D5B0
.text:0040D5B0 ; ---------------------------------------------------------------------------
.text:0040D5B6                 align 10h
.text:0040D5C0
.text:0040D5C0 ; =============== S U B R O U T I N E =======================================
.text:0040D5C0
.text:0040D5C0 ; Attributes: thunk
.text:0040D5C0
.text:0040D5C0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0040D5C0 GetVersionExA   proc near               ; CODE XREF: sub_409950+32↑p
.text:0040D5C0                                         ; sub_409950+20B↑p
.text:0040D5C0
.text:0040D5C0 lpVersionInformation= dword ptr  4
.text:0040D5C0
.text:0040D5C0                 jmp     ds:__imp_GetVersionExA
.text:0040D5C0 GetVersionExA   endp
.text:0040D5C0
.text:0040D5C0 ; ---------------------------------------------------------------------------
.text:0040D5C6                 align 10h
.text:0040D5D0
.text:0040D5D0 ; =============== S U B R O U T I N E =======================================
.text:0040D5D0
.text:0040D5D0 ; Attributes: thunk
.text:0040D5D0
.text:0040D5D0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040D5D0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:00409FEF↑p
.text:0040D5D0                                         ; .text:0040A01E↑p ...
.text:0040D5D0
.text:0040D5D0 nBufferLength   = dword ptr  4
.text:0040D5D0 lpBuffer        = dword ptr  8
.text:0040D5D0
.text:0040D5D0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0040D5D0 GetLogicalDriveStringsA endp
.text:0040D5D0
.text:0040D5D0 ; ---------------------------------------------------------------------------
.text:0040D5D6                 align 10h
.text:0040D5E0
.text:0040D5E0 ; =============== S U B R O U T I N E =======================================
.text:0040D5E0
.text:0040D5E0 ; Attributes: thunk
.text:0040D5E0
.text:0040D5E0 ; HANDLE __stdcall GetProcessHeap()
.text:0040D5E0 GetProcessHeap  proc near               ; CODE XREF: .text:00409FF9↑p
.text:0040D5E0                                         ; sub_40A6D0+24↑p ...
.text:0040D5E0                 jmp     ds:__imp_GetProcessHeap
.text:0040D5E0 GetProcessHeap  endp
.text:0040D5E0
.text:0040D5E0 ; ---------------------------------------------------------------------------
.text:0040D5E6                 align 10h
.text:0040D5F0
.text:0040D5F0 ; =============== S U B R O U T I N E =======================================
.text:0040D5F0
.text:0040D5F0 ; Attributes: thunk
.text:0040D5F0
.text:0040D5F0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0040D5F0 HeapAlloc       proc near               ; CODE XREF: .text:0040A00D↑p
.text:0040D5F0                                         ; sub_40A6D0+38↑p ...
.text:0040D5F0
.text:0040D5F0 hHeap           = dword ptr  4
.text:0040D5F0 dwFlags         = dword ptr  8
.text:0040D5F0 dwBytes         = dword ptr  0Ch
.text:0040D5F0
.text:0040D5F0                 jmp     ds:__imp_HeapAlloc
.text:0040D5F0 HeapAlloc       endp
.text:0040D5F0
.text:0040D5F0 ; ---------------------------------------------------------------------------
.text:0040D5F6                 align 10h
.text:0040D600
.text:0040D600 ; =============== S U B R O U T I N E =======================================
.text:0040D600
.text:0040D600 ; Attributes: thunk
.text:0040D600
.text:0040D600 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0040D600 HeapFree        proc near               ; CODE XREF: .text:0040A80D↑p
.text:0040D600
.text:0040D600 hHeap           = dword ptr  4
.text:0040D600 dwFlags         = dword ptr  8
.text:0040D600 lpMem           = dword ptr  0Ch
.text:0040D600
.text:0040D600                 jmp     ds:__imp_HeapFree
.text:0040D600 HeapFree        endp
.text:0040D600
.text:0040D600 ; ---------------------------------------------------------------------------
.text:0040D606                 align 10h
.text:0040D610
.text:0040D610 ; =============== S U B R O U T I N E =======================================
.text:0040D610
.text:0040D610 ; Attributes: thunk
.text:0040D610
.text:0040D610 ; BOOL __stdcall AreFileApisANSI()
.text:0040D610 AreFileApisANSI proc near               ; CODE XREF: sub_40A8B0+89↑p
.text:0040D610                 jmp     ds:__imp_AreFileApisANSI
.text:0040D610 AreFileApisANSI endp
.text:0040D610
.text:0040D610 ; ---------------------------------------------------------------------------
.text:0040D616                 align 10h
.text:0040D620
.text:0040D620 ; =============== S U B R O U T I N E =======================================
.text:0040D620
.text:0040D620 ; Attributes: thunk
.text:0040D620
.text:0040D620 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0040D620 MultiByteToWideChar proc near           ; CODE XREF: sub_40A8B0+BD↑p
.text:0040D620
.text:0040D620 CodePage        = dword ptr  4
.text:0040D620 dwFlags         = dword ptr  8
.text:0040D620 lpMultiByteStr  = dword ptr  0Ch
.text:0040D620 cbMultiByte     = dword ptr  10h
.text:0040D620 lpWideCharStr   = dword ptr  14h
.text:0040D620 cchWideChar     = dword ptr  18h
.text:0040D620
.text:0040D620                 jmp     ds:__imp_MultiByteToWideChar
.text:0040D620 MultiByteToWideChar endp
.text:0040D620
.text:0040D620 ; ---------------------------------------------------------------------------
.text:0040D626                 align 10h
.text:0040D630
.text:0040D630 ; =============== S U B R O U T I N E =======================================
.text:0040D630
.text:0040D630 ; Attributes: thunk
.text:0040D630
.text:0040D630 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0040D630 lstrcpyA        proc near               ; CODE XREF: sub_40A8B0+128↑p
.text:0040D630
.text:0040D630 lpString1       = dword ptr  4
.text:0040D630 lpString2       = dword ptr  8
.text:0040D630
.text:0040D630                 jmp     ds:__imp_lstrcpyA
.text:0040D630 lstrcpyA        endp
.text:0040D630
.text:0040D630 ; ---------------------------------------------------------------------------
.text:0040D636                 align 10h
.text:0040D640
.text:0040D640 ; =============== S U B R O U T I N E =======================================
.text:0040D640
.text:0040D640 ; Attributes: thunk
.text:0040D640
.text:0040D640 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0040D640 UnlockFile      proc near               ; CODE XREF: sub_40AB80+40↑p
.text:0040D640
.text:0040D640 hFile           = dword ptr  4
.text:0040D640 dwFileOffsetLow = dword ptr  8
.text:0040D640 dwFileOffsetHigh= dword ptr  0Ch
.text:0040D640 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0040D640 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0040D640
.text:0040D640                 jmp     ds:__imp_UnlockFile
.text:0040D640 UnlockFile      endp
.text:0040D640
.text:0040D640 ; ---------------------------------------------------------------------------
.text:0040D646                 align 10h
.text:0040D650
.text:0040D650 ; =============== S U B R O U T I N E =======================================
.text:0040D650
.text:0040D650 ; Attributes: thunk
.text:0040D650
.text:0040D650 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040D650 CreateDirectoryA proc near              ; CODE XREF: sub_40B500+22↑p
.text:0040D650
.text:0040D650 lpPathName      = dword ptr  4
.text:0040D650 lpSecurityAttributes= dword ptr  8
.text:0040D650
.text:0040D650                 jmp     ds:__imp_CreateDirectoryA
.text:0040D650 CreateDirectoryA endp
.text:0040D650
.text:0040D650 ; ---------------------------------------------------------------------------
.text:0040D656                 align 10h
.text:0040D660
.text:0040D660 ; =============== S U B R O U T I N E =======================================
.text:0040D660
.text:0040D660 ; Attributes: thunk
.text:0040D660
.text:0040D660 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0040D660 GetTimeZoneInformation proc near        ; CODE XREF: sub_40B600+22↑p
.text:0040D660
.text:0040D660 lpTimeZoneInformation= dword ptr  4
.text:0040D660
.text:0040D660                 jmp     ds:__imp_GetTimeZoneInformation
.text:0040D660 GetTimeZoneInformation endp
.text:0040D660
.text:0040D660 ; ---------------------------------------------------------------------------
.text:0040D666                 align 10h
.text:0040D670
.text:0040D670 ; =============== S U B R O U T I N E =======================================
.text:0040D670
.text:0040D670 ; Attributes: thunk
.text:0040D670
.text:0040D670 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0040D670 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40B600+4F↑p
.text:0040D670
.text:0040D670 lpSystemTimeAsFileTime= dword ptr  4
.text:0040D670
.text:0040D670                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0040D670 GetSystemTimeAsFileTime endp
.text:0040D670
.text:0040D670 ; ---------------------------------------------------------------------------
.text:0040D676                 align 10h
.text:0040D680
.text:0040D680 ; =============== S U B R O U T I N E =======================================
.text:0040D680
.text:0040D680 ; Attributes: thunk
.text:0040D680
.text:0040D680 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0040D680 RegOpenKeyExA   proc near               ; CODE XREF: .text:004094C1↑p
.text:0040D680
.text:0040D680 hKey            = dword ptr  4
.text:0040D680 lpSubKey        = dword ptr  8
.text:0040D680 ulOptions       = dword ptr  0Ch
.text:0040D680 samDesired      = dword ptr  10h
.text:0040D680 phkResult       = dword ptr  14h
.text:0040D680
.text:0040D680                 jmp     ds:__imp_RegOpenKeyExA
.text:0040D680 RegOpenKeyExA   endp
.text:0040D680
.text:0040D680 ; ---------------------------------------------------------------------------
.text:0040D686                 align 10h
.text:0040D690
.text:0040D690 ; =============== S U B R O U T I N E =======================================
.text:0040D690
.text:0040D690 ; Attributes: thunk
.text:0040D690
.text:0040D690 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0040D690 RegQueryValueExA proc near              ; CODE XREF: .text:00409504↑p
.text:0040D690
.text:0040D690 hKey            = dword ptr  4
.text:0040D690 lpValueName     = dword ptr  8
.text:0040D690 lpReserved      = dword ptr  0Ch
.text:0040D690 lpType          = dword ptr  10h
.text:0040D690 lpData          = dword ptr  14h
.text:0040D690 lpcbData        = dword ptr  18h
.text:0040D690
.text:0040D690                 jmp     ds:__imp_RegQueryValueExA
.text:0040D690 RegQueryValueExA endp
.text:0040D690
.text:0040D690 ; ---------------------------------------------------------------------------
.text:0040D696                 align 10h
.text:0040D6A0
.text:0040D6A0 ; =============== S U B R O U T I N E =======================================
.text:0040D6A0
.text:0040D6A0 ; Attributes: thunk
.text:0040D6A0
.text:0040D6A0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0040D6A0 RegCloseKey     proc near               ; CODE XREF: .text:00409528↑p
.text:0040D6A0
.text:0040D6A0 hKey            = dword ptr  4
.text:0040D6A0
.text:0040D6A0                 jmp     ds:__imp_RegCloseKey
.text:0040D6A0 RegCloseKey     endp
.text:0040D6A0
.text:0040D6A0 ; ---------------------------------------------------------------------------
.text:0040D6A6                 db 2 dup(90h)
.text:0040D6A8                 dd 2 dup(0)
.text:0040D6B0                 dd 21400h, 0
.text:0040D6B8                 dd 0C0h, 46000000h
.text:0040D6C0 ; const IID rclsid
.text:0040D6C0 rclsid          dd 21401h               ; Data1
.text:0040D6C0                                         ; DATA XREF: sub_40A8B0+4B↑o
.text:0040D6C0                 dw 0                    ; Data2
.text:0040D6C0                 dw 0                    ; Data3
.text:0040D6C0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040D6D0                 dd 214A0h, 0
.text:0040D6D8                 dd 0C0h, 46000000h, 214A1h, 0
.text:0040D6E8                 dd 0C0h, 46000000h, 214D0h, 0
.text:0040D6F8                 dd 0C0h, 46000000h, 214D1h, 0
.text:0040D708                 dd 0C0h, 46000000h, 214D2h, 0
.text:0040D718                 dd 0C0h, 46000000h, 214E1h, 0
.text:0040D728                 dd 0C0h, 46000000h, 214E2h, 0
.text:0040D738                 dd 0C0h, 46000000h, 214E3h, 0
.text:0040D748                 dd 0C0h, 46000000h, 214E4h, 0
.text:0040D758                 dd 0C0h, 46000000h, 21500h, 0
.text:0040D768                 dd 0C0h, 46000000h, 214E5h, 0
.text:0040D778                 dd 0C0h, 46000000h, 214E6h, 0
.text:0040D788                 dd 0C0h, 46000000h, 214E8h, 0
.text:0040D798                 dd 0C0h, 46000000h, 214E9h, 0
.text:0040D7A8                 dd 0C0h, 46000000h, 214EAh, 0
.text:0040D7B8                 dd 0C0h, 46000000h, 214EBh, 0
.text:0040D7C8                 dd 0C0h, 46000000h
.text:0040D7D0 ; const IID riid
.text:0040D7D0 riid            dd 214EEh               ; Data1
.text:0040D7D0                                         ; DATA XREF: sub_40A8B0+2B↑o
.text:0040D7D0                 dw 0                    ; Data2
.text:0040D7D0                 dw 0                    ; Data3
.text:0040D7D0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040D7E0                 dd 214EFh, 0
.text:0040D7E8                 dd 0C0h, 46000000h, 214F0h, 0
.text:0040D7F8                 dd 0C0h, 46000000h, 214F1h, 0
.text:0040D808                 dd 0C0h, 46000000h, 214F2h, 0
.text:0040D818                 dd 0C0h, 46000000h, 214F3h, 0
.text:0040D828                 dd 0C0h, 46000000h, 214F4h, 0
.text:0040D838                 dd 0C0h, 46000000h, 214F5h, 0
.text:0040D848                 dd 0C0h, 46000000h, 214F6h, 0
.text:0040D858                 dd 0C0h, 46000000h, 214F7h, 0
.text:0040D868                 dd 0C0h, 46000000h, 214F8h, 0
.text:0040D878                 dd 0C0h, 46000000h, 214F9h, 0
.text:0040D888                 dd 0C0h, 46000000h, 214FAh, 0
.text:0040D898                 dd 0C0h, 46000000h, 214FBh, 0
.text:0040D8A8                 dd 0C0h, 46000000h, 214FCh, 0
.text:0040D8B8                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0040D8B8                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0040D8B8                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0040D8B8                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0040D8B8                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040D8B8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0040D8B8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0040D8B8                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040D8B8                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0040D8B8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0040D988                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0040D998                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0040D9A8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0040D9B8                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0040D9C8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0040D9C8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0040D9C8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0040D9C8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0040D9C8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0040D9C8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0040D9C8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0040DA50 dword_40DA50    dd 0FFFFFFFFh           ; DATA XREF: .text:0040CCA9↑r
.text:0040DA50                                         ; .text:loc_40CCD0↑r ...
.text:0040DA54 dword_40DA54    dd 0                    ; DATA XREF: .text:loc_40CCDC↑r
.text:0040DA54                                         ; sub_40CD00:loc_40CD4D↑r
.text:0040DA58                 dd 0FFFFFFFFh
.text:0040DA5C dword_40DA5C    dd 69h dup(0)           ; DATA XREF: .data:off_40E0C4↓o
.text:0040DC00                 dd 100h dup(?)
.text:0040DC00 _text           ends
.text:0040DC00
.data:0040E000 ; Section 2. (virtual address 0000E000)
.data:0040E000 ; Virtual size                  : 000000E0 (    224.)
.data:0040E000 ; Section size in file          : 00000200 (    512.)
.data:0040E000 ; Offset to raw data for section: 0000D000
.data:0040E000 ; Flags C0000040: Data Readable Writable
.data:0040E000 ; Alignment     : default
.data:0040E000 ; ===========================================================================
.data:0040E000
.data:0040E000 ; Segment type: Pure data
.data:0040E000 ; Segment permissions: Read/Write
.data:0040E000 _data           segment para public 'DATA' use32
.data:0040E000                 assume cs:_data
.data:0040E000                 ;org 40E000h
.data:0040E000 dword_40E000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0040E000                                         ; sub_401080+CC↑r
.data:0040E004 dword_40E004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0040E004                                         ; sub_401080+D4↑r
.data:0040E008                 align 10h
.data:0040E010 dword_40E010    dd 1                    ; DATA XREF: sub_401380:loc_401486↑r
.data:0040E010                                         ; sub_402D30+3↑r ...
.data:0040E014 dword_40E014    dd 1                    ; DATA XREF: sub_402D30+11↑r
.data:0040E014                                         ; .text:00402DD1↑r ...
.data:0040E018 dword_40E018    dd 3Fh                  ; DATA XREF: sub_402D30+7D↑w
.data:0040E018                                         ; .text:00402E3D↑w
.data:0040E01C                 align 10h
.data:0040E020 ; char *Buffer
.data:0040E020 Buffer          dd offset aCopyrightC2005
.data:0040E020                                         ; DATA XREF: sub_4039C0+DC↑r
.data:0040E020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0040E024                 align 10h
.data:0040E030 ; int Code
.data:0040E030 Code            dd 1                    ; DATA XREF: sub_403240+6D↑r
.data:0040E030                                         ; sub_403240+9A↑r ...
.data:0040E034                 align 10h
.data:0040E040 dword_40E040    dd 1                    ; DATA XREF: sub_404DA0+22↑r
.data:0040E040                                         ; sub_404DA0+65↑r ...
.data:0040E044 dword_40E044    dd 100h                 ; DATA XREF: sub_404DA0+3F↑o
.data:0040E044                                         ; sub_404DA0+1A2↑r ...
.data:0040E048 off_40E048      dd offset unk_40F040    ; DATA XREF: sub_404DA0+1AA↑r
.data:0040E04C ; void *off_40E04C
.data:0040E04C off_40E04C      dd offset dword_40E044  ; DATA XREF: sub_404DA0+39↑r
.data:0040E04C                                         ; sub_404DA0+60↑w ...
.data:0040E050 dword_40E050    dd 200h                 ; DATA XREF: sub_4058B0+2ED↑r
.data:0040E050                                         ; sub_4058B0+2F8↑r ...
.data:0040E054 ; char *off_40E054
.data:0040E054 off_40E054      dd offset aComExeBatCmd ; DATA XREF: sub_405D80+3D3↑r
.data:0040E054                                         ; sub_405D80+400↑r ...
.data:0040E054                                         ; ".com;.exe;.bat;.cmd"
.data:0040E058                 align 10h
.data:0040E060 byte_40E060     db 41h                  ; DATA XREF: sub_407CC0+6B↑w
.data:0040E060                                         ; sub_407CC0:loc_407DD4↑r
.data:0040E061                 align 10h
.data:0040E070 dword_40E070    dd 1                    ; DATA XREF: .text:loc_409377↑r
.data:0040E070                                         ; sub_409950+202↑w
.data:0040E074                 align 10h
.data:0040E080 off_40E080      dd offset aNotset       ; DATA XREF: .text:00409BCA↑r
.data:0040E080                                         ; .text:0040A812↑r
.data:0040E080                                         ; "notset"
.data:0040E084 off_40E084      dd offset aNotset       ; DATA XREF: .text:00409BE2↑r
.data:0040E084                                         ; .text:00409C04↑r ...
.data:0040E084                                         ; "notset"
.data:0040E088                 align 10h
.data:0040E090 dword_40E090    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0040E094                 align 10h
.data:0040E0A0 ; int Mode
.data:0040E0A0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0040E0A0                                         ; sub_401080+80↑r ...
.data:0040E0A4                 align 10h
.data:0040E0B0 dword_40E0B0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0040E0B0                                         ; sub_401080+BA↑r
.data:0040E0B4                 align 10h
.data:0040E0C0 dword_40E0C0    dd 0                    ; DATA XREF: sub_40CD00+9↑r
.data:0040E0C0                                         ; sub_40CD00+1D↑w
.data:0040E0C4 off_40E0C4      dd offset dword_40DA5C  ; DATA XREF: sub_40CC70+6↑r
.data:0040E0C4                                         ; sub_40CC70+17↑r ...
.data:0040E0C8                 align 1000h
.data:0040E0C8 _data           ends
.data:0040E0C8
.bss:0040F000 ; Section 3. (virtual address 0000F000)
.bss:0040F000 ; Virtual size                  : 00000550 (   1360.)
.bss:0040F000 ; Section size in file          : 00000000 (      0.)
.bss:0040F000 ; Offset to raw data for section: 00000000
.bss:0040F000 ; Flags C0000080: Bss Readable Writable
.bss:0040F000 ; Alignment     : default
.bss:0040F000 ; ===========================================================================
.bss:0040F000
.bss:0040F000 ; Segment type: Uninitialized
.bss:0040F000 ; Segment permissions: Read/Write
.bss:0040F000 _bss            segment para public 'BSS' use32
.bss:0040F000                 assume cs:_bss
.bss:0040F000                 ;org 40F000h
.bss:0040F000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0040F000 dword_40F000    dd ?                    ; DATA XREF: sub_402D30+9↑o
.bss:0040F000                                         ; sub_402D30+17↑w ...
.bss:0040F004 dword_40F004    dd ?                    ; DATA XREF: sub_402D30+21↑w
.bss:0040F004                                         ; .text:00402DE9↑w
.bss:0040F008 dword_40F008    dd ?                    ; DATA XREF: sub_402D30+77↑r
.bss:0040F008                                         ; .text:00402E37↑r
.bss:0040F00C dword_40F00C    dd ?                    ; DATA XREF: sub_402D30+6B↑r
.bss:0040F00C                                         ; .text:00402E2B↑r
.bss:0040F010                 db    ? ;
.bss:0040F011                 db    ? ;
.bss:0040F012                 db    ? ;
.bss:0040F013                 db    ? ;
.bss:0040F014                 db    ? ;
.bss:0040F015                 db    ? ;
.bss:0040F016                 db    ? ;
.bss:0040F017                 db    ? ;
.bss:0040F018                 db    ? ;
.bss:0040F019                 db    ? ;
.bss:0040F01A                 db    ? ;
.bss:0040F01B                 db    ? ;
.bss:0040F01C                 db    ? ;
.bss:0040F01D                 db    ? ;
.bss:0040F01E                 db    ? ;
.bss:0040F01F                 db    ? ;
.bss:0040F020                 db    ? ;
.bss:0040F021                 db    ? ;
.bss:0040F022                 db    ? ;
.bss:0040F023                 db    ? ;
.bss:0040F024                 db    ? ;
.bss:0040F025                 db    ? ;
.bss:0040F026                 db    ? ;
.bss:0040F027                 db    ? ;
.bss:0040F028                 db    ? ;
.bss:0040F029                 db    ? ;
.bss:0040F02A                 db    ? ;
.bss:0040F02B                 db    ? ;
.bss:0040F02C                 db    ? ;
.bss:0040F02D                 db    ? ;
.bss:0040F02E                 db    ? ;
.bss:0040F02F                 db    ? ;
.bss:0040F030 ; char *dword_40F030
.bss:0040F030 dword_40F030    dd ?                    ; DATA XREF: .text:00403214↑w
.bss:0040F030                                         ; sub_403240+58↑r
.bss:0040F034                 align 10h
.bss:0040F040 unk_40F040      db    ? ;               ; DATA XREF: sub_404DA0+100↑o
.bss:0040F040                                         ; .data:off_40E048↑o
.bss:0040F041                 db    ? ;
.bss:0040F042                 db    ? ;
.bss:0040F043                 db    ? ;
.bss:0040F044                 db    ? ;
.bss:0040F045                 db    ? ;
.bss:0040F046                 db    ? ;
.bss:0040F047                 db    ? ;
.bss:0040F048                 db    ? ;
.bss:0040F049                 db    ? ;
.bss:0040F04A                 db    ? ;
.bss:0040F04B                 db    ? ;
.bss:0040F04C                 db    ? ;
.bss:0040F04D                 db    ? ;
.bss:0040F04E                 db    ? ;
.bss:0040F04F                 db    ? ;
.bss:0040F050                 db    ? ;
.bss:0040F051                 db    ? ;
.bss:0040F052                 db    ? ;
.bss:0040F053                 db    ? ;
.bss:0040F054                 db    ? ;
.bss:0040F055                 db    ? ;
.bss:0040F056                 db    ? ;
.bss:0040F057                 db    ? ;
.bss:0040F058                 db    ? ;
.bss:0040F059                 db    ? ;
.bss:0040F05A                 db    ? ;
.bss:0040F05B                 db    ? ;
.bss:0040F05C                 db    ? ;
.bss:0040F05D                 db    ? ;
.bss:0040F05E                 db    ? ;
.bss:0040F05F                 db    ? ;
.bss:0040F060                 db    ? ;
.bss:0040F061                 db    ? ;
.bss:0040F062                 db    ? ;
.bss:0040F063                 db    ? ;
.bss:0040F064                 db    ? ;
.bss:0040F065                 db    ? ;
.bss:0040F066                 db    ? ;
.bss:0040F067                 db    ? ;
.bss:0040F068                 db    ? ;
.bss:0040F069                 db    ? ;
.bss:0040F06A                 db    ? ;
.bss:0040F06B                 db    ? ;
.bss:0040F06C                 db    ? ;
.bss:0040F06D                 db    ? ;
.bss:0040F06E                 db    ? ;
.bss:0040F06F                 db    ? ;
.bss:0040F070                 db    ? ;
.bss:0040F071                 db    ? ;
.bss:0040F072                 db    ? ;
.bss:0040F073                 db    ? ;
.bss:0040F074                 db    ? ;
.bss:0040F075                 db    ? ;
.bss:0040F076                 db    ? ;
.bss:0040F077                 db    ? ;
.bss:0040F078                 db    ? ;
.bss:0040F079                 db    ? ;
.bss:0040F07A                 db    ? ;
.bss:0040F07B                 db    ? ;
.bss:0040F07C                 db    ? ;
.bss:0040F07D                 db    ? ;
.bss:0040F07E                 db    ? ;
.bss:0040F07F                 db    ? ;
.bss:0040F080                 db    ? ;
.bss:0040F081                 db    ? ;
.bss:0040F082                 db    ? ;
.bss:0040F083                 db    ? ;
.bss:0040F084                 db    ? ;
.bss:0040F085                 db    ? ;
.bss:0040F086                 db    ? ;
.bss:0040F087                 db    ? ;
.bss:0040F088                 db    ? ;
.bss:0040F089                 db    ? ;
.bss:0040F08A                 db    ? ;
.bss:0040F08B                 db    ? ;
.bss:0040F08C                 db    ? ;
.bss:0040F08D                 db    ? ;
.bss:0040F08E                 db    ? ;
.bss:0040F08F                 db    ? ;
.bss:0040F090                 db    ? ;
.bss:0040F091                 db    ? ;
.bss:0040F092                 db    ? ;
.bss:0040F093                 db    ? ;
.bss:0040F094                 db    ? ;
.bss:0040F095                 db    ? ;
.bss:0040F096                 db    ? ;
.bss:0040F097                 db    ? ;
.bss:0040F098                 db    ? ;
.bss:0040F099                 db    ? ;
.bss:0040F09A                 db    ? ;
.bss:0040F09B                 db    ? ;
.bss:0040F09C                 db    ? ;
.bss:0040F09D                 db    ? ;
.bss:0040F09E                 db    ? ;
.bss:0040F09F                 db    ? ;
.bss:0040F0A0                 db    ? ;
.bss:0040F0A1                 db    ? ;
.bss:0040F0A2                 db    ? ;
.bss:0040F0A3                 db    ? ;
.bss:0040F0A4                 db    ? ;
.bss:0040F0A5                 db    ? ;
.bss:0040F0A6                 db    ? ;
.bss:0040F0A7                 db    ? ;
.bss:0040F0A8                 db    ? ;
.bss:0040F0A9                 db    ? ;
.bss:0040F0AA                 db    ? ;
.bss:0040F0AB                 db    ? ;
.bss:0040F0AC                 db    ? ;
.bss:0040F0AD                 db    ? ;
.bss:0040F0AE                 db    ? ;
.bss:0040F0AF                 db    ? ;
.bss:0040F0B0                 db    ? ;
.bss:0040F0B1                 db    ? ;
.bss:0040F0B2                 db    ? ;
.bss:0040F0B3                 db    ? ;
.bss:0040F0B4                 db    ? ;
.bss:0040F0B5                 db    ? ;
.bss:0040F0B6                 db    ? ;
.bss:0040F0B7                 db    ? ;
.bss:0040F0B8                 db    ? ;
.bss:0040F0B9                 db    ? ;
.bss:0040F0BA                 db    ? ;
.bss:0040F0BB                 db    ? ;
.bss:0040F0BC                 db    ? ;
.bss:0040F0BD                 db    ? ;
.bss:0040F0BE                 db    ? ;
.bss:0040F0BF                 db    ? ;
.bss:0040F0C0                 db    ? ;
.bss:0040F0C1                 db    ? ;
.bss:0040F0C2                 db    ? ;
.bss:0040F0C3                 db    ? ;
.bss:0040F0C4                 db    ? ;
.bss:0040F0C5                 db    ? ;
.bss:0040F0C6                 db    ? ;
.bss:0040F0C7                 db    ? ;
.bss:0040F0C8                 db    ? ;
.bss:0040F0C9                 db    ? ;
.bss:0040F0CA                 db    ? ;
.bss:0040F0CB                 db    ? ;
.bss:0040F0CC                 db    ? ;
.bss:0040F0CD                 db    ? ;
.bss:0040F0CE                 db    ? ;
.bss:0040F0CF                 db    ? ;
.bss:0040F0D0                 db    ? ;
.bss:0040F0D1                 db    ? ;
.bss:0040F0D2                 db    ? ;
.bss:0040F0D3                 db    ? ;
.bss:0040F0D4                 db    ? ;
.bss:0040F0D5                 db    ? ;
.bss:0040F0D6                 db    ? ;
.bss:0040F0D7                 db    ? ;
.bss:0040F0D8                 db    ? ;
.bss:0040F0D9                 db    ? ;
.bss:0040F0DA                 db    ? ;
.bss:0040F0DB                 db    ? ;
.bss:0040F0DC                 db    ? ;
.bss:0040F0DD                 db    ? ;
.bss:0040F0DE                 db    ? ;
.bss:0040F0DF                 db    ? ;
.bss:0040F0E0                 db    ? ;
.bss:0040F0E1                 db    ? ;
.bss:0040F0E2                 db    ? ;
.bss:0040F0E3                 db    ? ;
.bss:0040F0E4                 db    ? ;
.bss:0040F0E5                 db    ? ;
.bss:0040F0E6                 db    ? ;
.bss:0040F0E7                 db    ? ;
.bss:0040F0E8                 db    ? ;
.bss:0040F0E9                 db    ? ;
.bss:0040F0EA                 db    ? ;
.bss:0040F0EB                 db    ? ;
.bss:0040F0EC                 db    ? ;
.bss:0040F0ED                 db    ? ;
.bss:0040F0EE                 db    ? ;
.bss:0040F0EF                 db    ? ;
.bss:0040F0F0                 db    ? ;
.bss:0040F0F1                 db    ? ;
.bss:0040F0F2                 db    ? ;
.bss:0040F0F3                 db    ? ;
.bss:0040F0F4                 db    ? ;
.bss:0040F0F5                 db    ? ;
.bss:0040F0F6                 db    ? ;
.bss:0040F0F7                 db    ? ;
.bss:0040F0F8                 db    ? ;
.bss:0040F0F9                 db    ? ;
.bss:0040F0FA                 db    ? ;
.bss:0040F0FB                 db    ? ;
.bss:0040F0FC                 db    ? ;
.bss:0040F0FD                 db    ? ;
.bss:0040F0FE                 db    ? ;
.bss:0040F0FF                 db    ? ;
.bss:0040F100                 db    ? ;
.bss:0040F101                 db    ? ;
.bss:0040F102                 db    ? ;
.bss:0040F103                 db    ? ;
.bss:0040F104                 db    ? ;
.bss:0040F105                 db    ? ;
.bss:0040F106                 db    ? ;
.bss:0040F107                 db    ? ;
.bss:0040F108                 db    ? ;
.bss:0040F109                 db    ? ;
.bss:0040F10A                 db    ? ;
.bss:0040F10B                 db    ? ;
.bss:0040F10C                 db    ? ;
.bss:0040F10D                 db    ? ;
.bss:0040F10E                 db    ? ;
.bss:0040F10F                 db    ? ;
.bss:0040F110                 db    ? ;
.bss:0040F111                 db    ? ;
.bss:0040F112                 db    ? ;
.bss:0040F113                 db    ? ;
.bss:0040F114                 db    ? ;
.bss:0040F115                 db    ? ;
.bss:0040F116                 db    ? ;
.bss:0040F117                 db    ? ;
.bss:0040F118                 db    ? ;
.bss:0040F119                 db    ? ;
.bss:0040F11A                 db    ? ;
.bss:0040F11B                 db    ? ;
.bss:0040F11C                 db    ? ;
.bss:0040F11D                 db    ? ;
.bss:0040F11E                 db    ? ;
.bss:0040F11F                 db    ? ;
.bss:0040F120                 db    ? ;
.bss:0040F121                 db    ? ;
.bss:0040F122                 db    ? ;
.bss:0040F123                 db    ? ;
.bss:0040F124                 db    ? ;
.bss:0040F125                 db    ? ;
.bss:0040F126                 db    ? ;
.bss:0040F127                 db    ? ;
.bss:0040F128                 db    ? ;
.bss:0040F129                 db    ? ;
.bss:0040F12A                 db    ? ;
.bss:0040F12B                 db    ? ;
.bss:0040F12C                 db    ? ;
.bss:0040F12D                 db    ? ;
.bss:0040F12E                 db    ? ;
.bss:0040F12F                 db    ? ;
.bss:0040F130                 db    ? ;
.bss:0040F131                 db    ? ;
.bss:0040F132                 db    ? ;
.bss:0040F133                 db    ? ;
.bss:0040F134                 db    ? ;
.bss:0040F135                 db    ? ;
.bss:0040F136                 db    ? ;
.bss:0040F137                 db    ? ;
.bss:0040F138                 db    ? ;
.bss:0040F139                 db    ? ;
.bss:0040F13A                 db    ? ;
.bss:0040F13B                 db    ? ;
.bss:0040F13C                 db    ? ;
.bss:0040F13D                 db    ? ;
.bss:0040F13E                 db    ? ;
.bss:0040F13F                 db    ? ;
.bss:0040F140 dword_40F140    dd ?                    ; DATA XREF: .text:loc_404731↑o
.bss:0040F140                                         ; .text:loc_404750↑o ...
.bss:0040F144 dword_40F144    dd ?                    ; DATA XREF: .text:loc_4047D0↑o
.bss:0040F144                                         ; .text:00404C58↑r ...
.bss:0040F148 dword_40F148    dd ?                    ; DATA XREF: .text:00404C52↑r
.bss:0040F148                                         ; sub_404D00+2C↑r
.bss:0040F14C dword_40F14C    dd ?                    ; DATA XREF: .text:00404C46↑r
.bss:0040F14C                                         ; sub_404D00+22↑r
.bss:0040F150 dword_40F150    dd ?                    ; DATA XREF: .text:00404C62↑r
.bss:0040F150                                         ; sub_404D00+36↑r
.bss:0040F154 dword_40F154    dd ?                    ; DATA XREF: .text:00404C72↑r
.bss:0040F154                                         ; sub_404D00+4E↑r
.bss:0040F158 dword_40F158    dd ?                    ; DATA XREF: .text:00404C8F↑r
.bss:0040F158                                         ; sub_404D00+62↑r
.bss:0040F15C dword_40F15C    dd ?                    ; DATA XREF: .text:00404C85↑r
.bss:0040F15C                                         ; sub_404D00+70↑r
.bss:0040F160 dword_40F160    dd ?                    ; DATA XREF: .text:00404C68↑r
.bss:0040F160                                         ; sub_404D00+7A↑r
.bss:0040F164                 align 10h
.bss:0040F170 ; char *Str1
.bss:0040F170 Str1            dd ?                    ; DATA XREF: sub_4050C4:loc_4050FD↑w
.bss:0040F170                                         ; sub_4050C4:loc_405230↑r
.bss:0040F174                 align 10h
.bss:0040F180 dword_40F180    dd ?                    ; DATA XREF: sub_4050C4+2D↑r
.bss:0040F180                                         ; sub_4050C4+3F↑w
.bss:0040F184                 align 10h
.bss:0040F190 dword_40F190    dd ?                    ; DATA XREF: sub_405D80+100↑r
.bss:0040F190                                         ; sub_405D80+308↑w
.bss:0040F194                 align 10h
.bss:0040F1A0 ; char *Str
.bss:0040F1A0 Str             dd ?                    ; DATA XREF: sub_405D80:loc_4060E4↑r
.bss:0040F1A0                                         ; sub_405D80+3B6↑r ...
.bss:0040F1A4                 align 10h
.bss:0040F1B0 dword_40F1B0    dd ?                    ; DATA XREF: sub_407CC0+1C↑r
.bss:0040F1B0                                         ; sub_407CC0+104↑w
.bss:0040F1B4                 align 10h
.bss:0040F1C0 dword_40F1C0    dd ?                    ; DATA XREF: sub_407CC0+B↑r
.bss:0040F1C0                                         ; sub_407CC0+71↑w
.bss:0040F1C4                 align 10h
.bss:0040F1D0 dword_40F1D0    dd ?                    ; DATA XREF: sub_407CC0+85↑r
.bss:0040F1D0                                         ; sub_407CC0+B9↑w
.bss:0040F1D4 dword_40F1D4    dd ?                    ; DATA XREF: sub_407CC0+C4↑w
.bss:0040F1D8 dword_40F1D8    dd ?                    ; DATA XREF: sub_407CC0+2E↑o
.bss:0040F1D8                                         ; sub_407CC0+CF↑w
.bss:0040F1DC dword_40F1DC    dd ?                    ; DATA XREF: sub_407CC0+DA↑w
.bss:0040F1E0                 db    ? ;
.bss:0040F1E1                 db    ? ;
.bss:0040F1E2                 db    ? ;
.bss:0040F1E3                 db    ? ;
.bss:0040F1E4                 db    ? ;
.bss:0040F1E5                 db    ? ;
.bss:0040F1E6                 db    ? ;
.bss:0040F1E7                 db    ? ;
.bss:0040F1E8                 db    ? ;
.bss:0040F1E9                 db    ? ;
.bss:0040F1EA                 db    ? ;
.bss:0040F1EB                 db    ? ;
.bss:0040F1EC                 db    ? ;
.bss:0040F1ED                 db    ? ;
.bss:0040F1EE                 db    ? ;
.bss:0040F1EF                 db    ? ;
.bss:0040F1F0                 db    ? ;
.bss:0040F1F1                 db    ? ;
.bss:0040F1F2                 db    ? ;
.bss:0040F1F3                 db    ? ;
.bss:0040F1F4                 db    ? ;
.bss:0040F1F5                 db    ? ;
.bss:0040F1F6                 db    ? ;
.bss:0040F1F7                 db    ? ;
.bss:0040F1F8                 db    ? ;
.bss:0040F1F9                 db    ? ;
.bss:0040F1FA                 db    ? ;
.bss:0040F1FB                 db    ? ;
.bss:0040F1FC                 db    ? ;
.bss:0040F1FD                 db    ? ;
.bss:0040F1FE                 db    ? ;
.bss:0040F1FF                 db    ? ;
.bss:0040F200                 db    ? ;
.bss:0040F201                 db    ? ;
.bss:0040F202                 db    ? ;
.bss:0040F203                 db    ? ;
.bss:0040F204                 db    ? ;
.bss:0040F205                 db    ? ;
.bss:0040F206                 db    ? ;
.bss:0040F207                 db    ? ;
.bss:0040F208                 db    ? ;
.bss:0040F209                 db    ? ;
.bss:0040F20A                 db    ? ;
.bss:0040F20B                 db    ? ;
.bss:0040F20C                 db    ? ;
.bss:0040F20D                 db    ? ;
.bss:0040F20E                 db    ? ;
.bss:0040F20F                 db    ? ;
.bss:0040F210                 db    ? ;
.bss:0040F211                 db    ? ;
.bss:0040F212                 db    ? ;
.bss:0040F213                 db    ? ;
.bss:0040F214                 db    ? ;
.bss:0040F215                 db    ? ;
.bss:0040F216                 db    ? ;
.bss:0040F217                 db    ? ;
.bss:0040F218                 db    ? ;
.bss:0040F219                 db    ? ;
.bss:0040F21A                 db    ? ;
.bss:0040F21B                 db    ? ;
.bss:0040F21C                 db    ? ;
.bss:0040F21D                 db    ? ;
.bss:0040F21E                 db    ? ;
.bss:0040F21F                 db    ? ;
.bss:0040F220                 db    ? ;
.bss:0040F221                 db    ? ;
.bss:0040F222                 db    ? ;
.bss:0040F223                 db    ? ;
.bss:0040F224                 db    ? ;
.bss:0040F225                 db    ? ;
.bss:0040F226                 db    ? ;
.bss:0040F227                 db    ? ;
.bss:0040F228                 db    ? ;
.bss:0040F229                 db    ? ;
.bss:0040F22A                 db    ? ;
.bss:0040F22B                 db    ? ;
.bss:0040F22C                 db    ? ;
.bss:0040F22D                 db    ? ;
.bss:0040F22E                 db    ? ;
.bss:0040F22F                 db    ? ;
.bss:0040F230                 db    ? ;
.bss:0040F231                 db    ? ;
.bss:0040F232                 db    ? ;
.bss:0040F233                 db    ? ;
.bss:0040F234                 db    ? ;
.bss:0040F235                 db    ? ;
.bss:0040F236                 db    ? ;
.bss:0040F237                 db    ? ;
.bss:0040F238                 db    ? ;
.bss:0040F239                 db    ? ;
.bss:0040F23A                 db    ? ;
.bss:0040F23B                 db    ? ;
.bss:0040F23C                 db    ? ;
.bss:0040F23D                 db    ? ;
.bss:0040F23E                 db    ? ;
.bss:0040F23F                 db    ? ;
.bss:0040F240                 db    ? ;
.bss:0040F241                 db    ? ;
.bss:0040F242                 db    ? ;
.bss:0040F243                 db    ? ;
.bss:0040F244                 db    ? ;
.bss:0040F245                 db    ? ;
.bss:0040F246                 db    ? ;
.bss:0040F247                 db    ? ;
.bss:0040F248                 db    ? ;
.bss:0040F249                 db    ? ;
.bss:0040F24A                 db    ? ;
.bss:0040F24B                 db    ? ;
.bss:0040F24C                 db    ? ;
.bss:0040F24D                 db    ? ;
.bss:0040F24E                 db    ? ;
.bss:0040F24F                 db    ? ;
.bss:0040F250                 db    ? ;
.bss:0040F251                 db    ? ;
.bss:0040F252                 db    ? ;
.bss:0040F253                 db    ? ;
.bss:0040F254                 db    ? ;
.bss:0040F255                 db    ? ;
.bss:0040F256                 db    ? ;
.bss:0040F257                 db    ? ;
.bss:0040F258                 db    ? ;
.bss:0040F259                 db    ? ;
.bss:0040F25A                 db    ? ;
.bss:0040F25B                 db    ? ;
.bss:0040F25C                 db    ? ;
.bss:0040F25D                 db    ? ;
.bss:0040F25E                 db    ? ;
.bss:0040F25F                 db    ? ;
.bss:0040F260                 db    ? ;
.bss:0040F261                 db    ? ;
.bss:0040F262                 db    ? ;
.bss:0040F263                 db    ? ;
.bss:0040F264                 db    ? ;
.bss:0040F265                 db    ? ;
.bss:0040F266                 db    ? ;
.bss:0040F267                 db    ? ;
.bss:0040F268                 db    ? ;
.bss:0040F269                 db    ? ;
.bss:0040F26A                 db    ? ;
.bss:0040F26B                 db    ? ;
.bss:0040F26C                 db    ? ;
.bss:0040F26D                 db    ? ;
.bss:0040F26E                 db    ? ;
.bss:0040F26F                 db    ? ;
.bss:0040F270                 db    ? ;
.bss:0040F271                 db    ? ;
.bss:0040F272                 db    ? ;
.bss:0040F273                 db    ? ;
.bss:0040F274                 db    ? ;
.bss:0040F275                 db    ? ;
.bss:0040F276                 db    ? ;
.bss:0040F277                 db    ? ;
.bss:0040F278                 db    ? ;
.bss:0040F279                 db    ? ;
.bss:0040F27A                 db    ? ;
.bss:0040F27B                 db    ? ;
.bss:0040F27C                 db    ? ;
.bss:0040F27D                 db    ? ;
.bss:0040F27E                 db    ? ;
.bss:0040F27F                 db    ? ;
.bss:0040F280                 db    ? ;
.bss:0040F281                 db    ? ;
.bss:0040F282                 db    ? ;
.bss:0040F283                 db    ? ;
.bss:0040F284                 db    ? ;
.bss:0040F285                 db    ? ;
.bss:0040F286                 db    ? ;
.bss:0040F287                 db    ? ;
.bss:0040F288                 db    ? ;
.bss:0040F289                 db    ? ;
.bss:0040F28A                 db    ? ;
.bss:0040F28B                 db    ? ;
.bss:0040F28C                 db    ? ;
.bss:0040F28D                 db    ? ;
.bss:0040F28E                 db    ? ;
.bss:0040F28F                 db    ? ;
.bss:0040F290                 db    ? ;
.bss:0040F291                 db    ? ;
.bss:0040F292                 db    ? ;
.bss:0040F293                 db    ? ;
.bss:0040F294                 db    ? ;
.bss:0040F295                 db    ? ;
.bss:0040F296                 db    ? ;
.bss:0040F297                 db    ? ;
.bss:0040F298                 db    ? ;
.bss:0040F299                 db    ? ;
.bss:0040F29A                 db    ? ;
.bss:0040F29B                 db    ? ;
.bss:0040F29C                 db    ? ;
.bss:0040F29D                 db    ? ;
.bss:0040F29E                 db    ? ;
.bss:0040F29F                 db    ? ;
.bss:0040F2A0                 db    ? ;
.bss:0040F2A1                 db    ? ;
.bss:0040F2A2                 db    ? ;
.bss:0040F2A3                 db    ? ;
.bss:0040F2A4                 db    ? ;
.bss:0040F2A5                 db    ? ;
.bss:0040F2A6                 db    ? ;
.bss:0040F2A7                 db    ? ;
.bss:0040F2A8                 db    ? ;
.bss:0040F2A9                 db    ? ;
.bss:0040F2AA                 db    ? ;
.bss:0040F2AB                 db    ? ;
.bss:0040F2AC                 db    ? ;
.bss:0040F2AD                 db    ? ;
.bss:0040F2AE                 db    ? ;
.bss:0040F2AF                 db    ? ;
.bss:0040F2B0                 db    ? ;
.bss:0040F2B1                 db    ? ;
.bss:0040F2B2                 db    ? ;
.bss:0040F2B3                 db    ? ;
.bss:0040F2B4                 db    ? ;
.bss:0040F2B5                 db    ? ;
.bss:0040F2B6                 db    ? ;
.bss:0040F2B7                 db    ? ;
.bss:0040F2B8                 db    ? ;
.bss:0040F2B9                 db    ? ;
.bss:0040F2BA                 db    ? ;
.bss:0040F2BB                 db    ? ;
.bss:0040F2BC                 db    ? ;
.bss:0040F2BD                 db    ? ;
.bss:0040F2BE                 db    ? ;
.bss:0040F2BF                 db    ? ;
.bss:0040F2C0                 db    ? ;
.bss:0040F2C1                 db    ? ;
.bss:0040F2C2                 db    ? ;
.bss:0040F2C3                 db    ? ;
.bss:0040F2C4                 db    ? ;
.bss:0040F2C5                 db    ? ;
.bss:0040F2C6                 db    ? ;
.bss:0040F2C7                 db    ? ;
.bss:0040F2C8                 db    ? ;
.bss:0040F2C9                 db    ? ;
.bss:0040F2CA                 db    ? ;
.bss:0040F2CB                 db    ? ;
.bss:0040F2CC                 db    ? ;
.bss:0040F2CD                 db    ? ;
.bss:0040F2CE                 db    ? ;
.bss:0040F2CF                 db    ? ;
.bss:0040F2D0                 db    ? ;
.bss:0040F2D1                 db    ? ;
.bss:0040F2D2                 db    ? ;
.bss:0040F2D3                 db    ? ;
.bss:0040F2D4                 db    ? ;
.bss:0040F2D5                 db    ? ;
.bss:0040F2D6                 db    ? ;
.bss:0040F2D7                 db    ? ;
.bss:0040F2D8                 db    ? ;
.bss:0040F2D9                 db    ? ;
.bss:0040F2DA                 db    ? ;
.bss:0040F2DB                 db    ? ;
.bss:0040F2DC                 db    ? ;
.bss:0040F2DD                 db    ? ;
.bss:0040F2DE                 db    ? ;
.bss:0040F2DF                 db    ? ;
.bss:0040F2E0                 db    ? ;
.bss:0040F2E1                 db    ? ;
.bss:0040F2E2                 db    ? ;
.bss:0040F2E3                 db    ? ;
.bss:0040F2E4                 db    ? ;
.bss:0040F2E5                 db    ? ;
.bss:0040F2E6                 db    ? ;
.bss:0040F2E7                 db    ? ;
.bss:0040F2E8                 db    ? ;
.bss:0040F2E9                 db    ? ;
.bss:0040F2EA                 db    ? ;
.bss:0040F2EB                 db    ? ;
.bss:0040F2EC                 db    ? ;
.bss:0040F2ED                 db    ? ;
.bss:0040F2EE                 db    ? ;
.bss:0040F2EF                 db    ? ;
.bss:0040F2F0                 db    ? ;
.bss:0040F2F1                 db    ? ;
.bss:0040F2F2                 db    ? ;
.bss:0040F2F3                 db    ? ;
.bss:0040F2F4                 db    ? ;
.bss:0040F2F5                 db    ? ;
.bss:0040F2F6                 db    ? ;
.bss:0040F2F7                 db    ? ;
.bss:0040F2F8                 db    ? ;
.bss:0040F2F9                 db    ? ;
.bss:0040F2FA                 db    ? ;
.bss:0040F2FB                 db    ? ;
.bss:0040F2FC                 db    ? ;
.bss:0040F2FD                 db    ? ;
.bss:0040F2FE                 db    ? ;
.bss:0040F2FF                 db    ? ;
.bss:0040F300                 db    ? ;
.bss:0040F301                 db    ? ;
.bss:0040F302                 db    ? ;
.bss:0040F303                 db    ? ;
.bss:0040F304                 db    ? ;
.bss:0040F305                 db    ? ;
.bss:0040F306                 db    ? ;
.bss:0040F307                 db    ? ;
.bss:0040F308                 db    ? ;
.bss:0040F309                 db    ? ;
.bss:0040F30A                 db    ? ;
.bss:0040F30B                 db    ? ;
.bss:0040F30C                 db    ? ;
.bss:0040F30D                 db    ? ;
.bss:0040F30E                 db    ? ;
.bss:0040F30F                 db    ? ;
.bss:0040F310                 db    ? ;
.bss:0040F311                 db    ? ;
.bss:0040F312                 db    ? ;
.bss:0040F313                 db    ? ;
.bss:0040F314                 db    ? ;
.bss:0040F315                 db    ? ;
.bss:0040F316                 db    ? ;
.bss:0040F317                 db    ? ;
.bss:0040F318                 db    ? ;
.bss:0040F319                 db    ? ;
.bss:0040F31A                 db    ? ;
.bss:0040F31B                 db    ? ;
.bss:0040F31C                 db    ? ;
.bss:0040F31D                 db    ? ;
.bss:0040F31E                 db    ? ;
.bss:0040F31F                 db    ? ;
.bss:0040F320                 db    ? ;
.bss:0040F321                 db    ? ;
.bss:0040F322                 db    ? ;
.bss:0040F323                 db    ? ;
.bss:0040F324                 db    ? ;
.bss:0040F325                 db    ? ;
.bss:0040F326                 db    ? ;
.bss:0040F327                 db    ? ;
.bss:0040F328                 db    ? ;
.bss:0040F329                 db    ? ;
.bss:0040F32A                 db    ? ;
.bss:0040F32B                 db    ? ;
.bss:0040F32C                 db    ? ;
.bss:0040F32D                 db    ? ;
.bss:0040F32E                 db    ? ;
.bss:0040F32F                 db    ? ;
.bss:0040F330                 db    ? ;
.bss:0040F331                 db    ? ;
.bss:0040F332                 db    ? ;
.bss:0040F333                 db    ? ;
.bss:0040F334                 db    ? ;
.bss:0040F335                 db    ? ;
.bss:0040F336                 db    ? ;
.bss:0040F337                 db    ? ;
.bss:0040F338                 db    ? ;
.bss:0040F339                 db    ? ;
.bss:0040F33A                 db    ? ;
.bss:0040F33B                 db    ? ;
.bss:0040F33C                 db    ? ;
.bss:0040F33D                 db    ? ;
.bss:0040F33E                 db    ? ;
.bss:0040F33F                 db    ? ;
.bss:0040F340                 db    ? ;
.bss:0040F341                 db    ? ;
.bss:0040F342                 db    ? ;
.bss:0040F343                 db    ? ;
.bss:0040F344                 db    ? ;
.bss:0040F345                 db    ? ;
.bss:0040F346                 db    ? ;
.bss:0040F347                 db    ? ;
.bss:0040F348                 db    ? ;
.bss:0040F349                 db    ? ;
.bss:0040F34A                 db    ? ;
.bss:0040F34B                 db    ? ;
.bss:0040F34C                 db    ? ;
.bss:0040F34D                 db    ? ;
.bss:0040F34E                 db    ? ;
.bss:0040F34F                 db    ? ;
.bss:0040F350                 db    ? ;
.bss:0040F351                 db    ? ;
.bss:0040F352                 db    ? ;
.bss:0040F353                 db    ? ;
.bss:0040F354                 db    ? ;
.bss:0040F355                 db    ? ;
.bss:0040F356                 db    ? ;
.bss:0040F357                 db    ? ;
.bss:0040F358                 db    ? ;
.bss:0040F359                 db    ? ;
.bss:0040F35A                 db    ? ;
.bss:0040F35B                 db    ? ;
.bss:0040F35C                 db    ? ;
.bss:0040F35D                 db    ? ;
.bss:0040F35E                 db    ? ;
.bss:0040F35F                 db    ? ;
.bss:0040F360                 db    ? ;
.bss:0040F361                 db    ? ;
.bss:0040F362                 db    ? ;
.bss:0040F363                 db    ? ;
.bss:0040F364                 db    ? ;
.bss:0040F365                 db    ? ;
.bss:0040F366                 db    ? ;
.bss:0040F367                 db    ? ;
.bss:0040F368                 db    ? ;
.bss:0040F369                 db    ? ;
.bss:0040F36A                 db    ? ;
.bss:0040F36B                 db    ? ;
.bss:0040F36C                 db    ? ;
.bss:0040F36D                 db    ? ;
.bss:0040F36E                 db    ? ;
.bss:0040F36F                 db    ? ;
.bss:0040F370                 db    ? ;
.bss:0040F371                 db    ? ;
.bss:0040F372                 db    ? ;
.bss:0040F373                 db    ? ;
.bss:0040F374                 db    ? ;
.bss:0040F375                 db    ? ;
.bss:0040F376                 db    ? ;
.bss:0040F377                 db    ? ;
.bss:0040F378                 db    ? ;
.bss:0040F379                 db    ? ;
.bss:0040F37A                 db    ? ;
.bss:0040F37B                 db    ? ;
.bss:0040F37C                 db    ? ;
.bss:0040F37D                 db    ? ;
.bss:0040F37E                 db    ? ;
.bss:0040F37F                 db    ? ;
.bss:0040F380                 db    ? ;
.bss:0040F381                 db    ? ;
.bss:0040F382                 db    ? ;
.bss:0040F383                 db    ? ;
.bss:0040F384                 db    ? ;
.bss:0040F385                 db    ? ;
.bss:0040F386                 db    ? ;
.bss:0040F387                 db    ? ;
.bss:0040F388                 db    ? ;
.bss:0040F389                 db    ? ;
.bss:0040F38A                 db    ? ;
.bss:0040F38B                 db    ? ;
.bss:0040F38C                 db    ? ;
.bss:0040F38D                 db    ? ;
.bss:0040F38E                 db    ? ;
.bss:0040F38F                 db    ? ;
.bss:0040F390                 db    ? ;
.bss:0040F391                 db    ? ;
.bss:0040F392                 db    ? ;
.bss:0040F393                 db    ? ;
.bss:0040F394                 db    ? ;
.bss:0040F395                 db    ? ;
.bss:0040F396                 db    ? ;
.bss:0040F397                 db    ? ;
.bss:0040F398                 db    ? ;
.bss:0040F399                 db    ? ;
.bss:0040F39A                 db    ? ;
.bss:0040F39B                 db    ? ;
.bss:0040F39C                 db    ? ;
.bss:0040F39D                 db    ? ;
.bss:0040F39E                 db    ? ;
.bss:0040F39F                 db    ? ;
.bss:0040F3A0                 db    ? ;
.bss:0040F3A1                 db    ? ;
.bss:0040F3A2                 db    ? ;
.bss:0040F3A3                 db    ? ;
.bss:0040F3A4                 db    ? ;
.bss:0040F3A5                 db    ? ;
.bss:0040F3A6                 db    ? ;
.bss:0040F3A7                 db    ? ;
.bss:0040F3A8                 db    ? ;
.bss:0040F3A9                 db    ? ;
.bss:0040F3AA                 db    ? ;
.bss:0040F3AB                 db    ? ;
.bss:0040F3AC                 db    ? ;
.bss:0040F3AD                 db    ? ;
.bss:0040F3AE                 db    ? ;
.bss:0040F3AF                 db    ? ;
.bss:0040F3B0                 db    ? ;
.bss:0040F3B1                 db    ? ;
.bss:0040F3B2                 db    ? ;
.bss:0040F3B3                 db    ? ;
.bss:0040F3B4                 db    ? ;
.bss:0040F3B5                 db    ? ;
.bss:0040F3B6                 db    ? ;
.bss:0040F3B7                 db    ? ;
.bss:0040F3B8                 db    ? ;
.bss:0040F3B9                 db    ? ;
.bss:0040F3BA                 db    ? ;
.bss:0040F3BB                 db    ? ;
.bss:0040F3BC                 db    ? ;
.bss:0040F3BD                 db    ? ;
.bss:0040F3BE                 db    ? ;
.bss:0040F3BF                 db    ? ;
.bss:0040F3C0                 db    ? ;
.bss:0040F3C1                 db    ? ;
.bss:0040F3C2                 db    ? ;
.bss:0040F3C3                 db    ? ;
.bss:0040F3C4                 db    ? ;
.bss:0040F3C5                 db    ? ;
.bss:0040F3C6                 db    ? ;
.bss:0040F3C7                 db    ? ;
.bss:0040F3C8                 db    ? ;
.bss:0040F3C9                 db    ? ;
.bss:0040F3CA                 db    ? ;
.bss:0040F3CB                 db    ? ;
.bss:0040F3CC                 db    ? ;
.bss:0040F3CD                 db    ? ;
.bss:0040F3CE                 db    ? ;
.bss:0040F3CF                 db    ? ;
.bss:0040F3D0 dword_40F3D0    dd ?                    ; DATA XREF: sub_409840+8↑r
.bss:0040F3D0                                         ; sub_409950:loc_4099D2↑w ...
.bss:0040F3D4                 align 10h
.bss:0040F3E0 ; struct _OSVERSIONINFOA VersionInformation
.bss:0040F3E0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_409950:loc_409970↑o
.bss:0040F3E0                                         ; sub_409950+2C↑w ...
.bss:0040F474 word_40F474     dw ?                    ; DATA XREF: sub_409950:loc_409A03↑r
.bss:0040F476                 align 4
.bss:0040F478 word_40F478     dw ?                    ; DATA XREF: .text:loc_4093C6↑r
.bss:0040F478                                         ; .text:004093F4↑r ...
.bss:0040F47A byte_40F47A     db ?                    ; DATA XREF: .text:00409385↑r
.bss:0040F47B                 align 10h
.bss:0040F480 dword_40F480    dd ?                    ; DATA XREF: sub_409950+6↑r
.bss:0040F480                                         ; sub_409950+75↑w
.bss:0040F484                 align 10h
.bss:0040F490 dword_40F490    dd ?                    ; DATA XREF: sub_40B0D0+6E↑r
.bss:0040F490                                         ; sub_40B0D0+9A↑r ...
.bss:0040F494 dword_40F494    dd ?                    ; DATA XREF: sub_40B0D0:loc_40B138↑r
.bss:0040F494                                         ; sub_40B0D0+A0↑r ...
.bss:0040F498                 align 10h
.bss:0040F4A0 dword_40F4A0    dd ?                    ; DATA XREF: sub_40B5E0↑r
.bss:0040F4A0                                         ; .text:loc_40B712↑w
.bss:0040F4A4                 align 10h
.bss:0040F4B0 dword_40F4B0    dd ?                    ; DATA XREF: sub_401380+32↑w
.bss:0040F4B0                                         ; sub_401380+E1↑r ...
.bss:0040F4B4                 db    ? ;
.bss:0040F4B5                 db    ? ;
.bss:0040F4B6                 db    ? ;
.bss:0040F4B7                 db    ? ;
.bss:0040F4B8                 db    ? ;
.bss:0040F4B9                 db    ? ;
.bss:0040F4BA                 db    ? ;
.bss:0040F4BB                 db    ? ;
.bss:0040F4BC                 db    ? ;
.bss:0040F4BD                 db    ? ;
.bss:0040F4BE                 db    ? ;
.bss:0040F4BF                 db    ? ;
.bss:0040F4C0                 db    ? ;
.bss:0040F4C1                 db    ? ;
.bss:0040F4C2                 db    ? ;
.bss:0040F4C3                 db    ? ;
.bss:0040F4C4                 db    ? ;
.bss:0040F4C5                 db    ? ;
.bss:0040F4C6                 db    ? ;
.bss:0040F4C7                 db    ? ;
.bss:0040F4C8                 db    ? ;
.bss:0040F4C9                 db    ? ;
.bss:0040F4CA                 db    ? ;
.bss:0040F4CB                 db    ? ;
.bss:0040F4CC                 db    ? ;
.bss:0040F4CD                 db    ? ;
.bss:0040F4CE                 db    ? ;
.bss:0040F4CF                 db    ? ;
.bss:0040F4D0 dword_40F4D0    dd ?                    ; DATA XREF: sub_402D30+71↑w
.bss:0040F4D0                                         ; .text:00402E31↑w
.bss:0040F4D4                 align 10h
.bss:0040F4E0 dword_40F4E0    dd ?                    ; CODE XREF: sub_4050C4+63↑p
.bss:0040F4E0                                         ; DATA XREF: sub_404FC0+1E↑r ...
.bss:0040F4E4                 align 10h
.bss:0040F4F0 dword_40F4F0    dd ?                    ; DATA XREF: sub_404FC0+4E↑w
.bss:0040F4F0                                         ; sub_4050C4+AB↑w
.bss:0040F4F4                 db    ? ;
.bss:0040F4F5                 db    ? ;
.bss:0040F4F6                 db    ? ;
.bss:0040F4F7                 db    ? ;
.bss:0040F4F8                 db    ? ;
.bss:0040F4F9                 db    ? ;
.bss:0040F4FA                 db    ? ;
.bss:0040F4FB                 db    ? ;
.bss:0040F4FC                 db    ? ;
.bss:0040F4FD                 db    ? ;
.bss:0040F4FE                 db    ? ;
.bss:0040F4FF                 db    ? ;
.bss:0040F500                 db    ? ;
.bss:0040F501                 db    ? ;
.bss:0040F502                 db    ? ;
.bss:0040F503                 db    ? ;
.bss:0040F504                 db    ? ;
.bss:0040F505                 db    ? ;
.bss:0040F506                 db    ? ;
.bss:0040F507                 db    ? ;
.bss:0040F508                 db    ? ;
.bss:0040F509                 db    ? ;
.bss:0040F50A                 db    ? ;
.bss:0040F50B                 db    ? ;
.bss:0040F50C                 db    ? ;
.bss:0040F50D                 db    ? ;
.bss:0040F50E                 db    ? ;
.bss:0040F50F                 db    ? ;
.bss:0040F510                 db    ? ;
.bss:0040F511                 db    ? ;
.bss:0040F512                 db    ? ;
.bss:0040F513                 db    ? ;
.bss:0040F514                 db    ? ;
.bss:0040F515                 db    ? ;
.bss:0040F516                 db    ? ;
.bss:0040F517                 db    ? ;
.bss:0040F518                 db    ? ;
.bss:0040F519                 db    ? ;
.bss:0040F51A                 db    ? ;
.bss:0040F51B                 db    ? ;
.bss:0040F51C                 db    ? ;
.bss:0040F51D                 db    ? ;
.bss:0040F51E                 db    ? ;
.bss:0040F51F                 db    ? ;
.bss:0040F520 dword_40F520    dd ?                    ; DATA XREF: sub_4050C4+13↑r
.bss:0040F524                 align 1000h
.bss:0040F524 _bss            ends
.bss:0040F524
.idata:00410000 ; Section 4. (virtual address 00010000)
.idata:00410000 ; Virtual size                  : 00000DB0 (   3504.)
.idata:00410000 ; Section size in file          : 00000E00 (   3584.)
.idata:00410000 ; Offset to raw data for section: 0000D200
.idata:00410000 ; Flags C0000040: Data Readable Writable
.idata:00410000 ; Alignment     : default
.idata:00410000 ; ===========================================================================
.idata:00410000
.idata:00410000 ; Segment type: Externs
.idata:00410000 ; _idata
.idata:00410000
.idata:00410001
.idata:004102A8 ;
.idata:004102A8 ; Imports from libintl3.dll
.idata:004102A8 ;
.idata:004102A8                 extrn __imp_libintl_bindtextdomain:dword
.idata:004102A8                                         ; CODE XREF: sub_401380+4C↑p
.idata:004102A8                                         ; DATA XREF: sub_401380+4C↑r ...
.idata:004102AC                 extrn libintl_gettext:dword
.idata:004102AC                                         ; CODE XREF: sub_401380+D5↑p
.idata:004102AC                                         ; sub_401380+309↑p ...
.idata:004102B0                 extrn libintl_textdomain:dword
.idata:004102B0                                         ; CODE XREF: sub_401380+59↑p
.idata:004102B0                                         ; DATA XREF: sub_401380+59↑r ...
.idata:004102B4
.idata:004102BC ;
.idata:004102BC ; Imports from ADVAPI32.DLL
.idata:004102BC ;
.idata:004102BC ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004102BC                 extrn __imp_RegCloseKey:dword
.idata:004102BC                                         ; DATA XREF: RegCloseKey↑r
.idata:004102C0 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004102C0                 extrn __imp_RegOpenKeyExA:dword
.idata:004102C0                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004102C4 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004102C4                 extrn __imp_RegQueryValueExA:dword
.idata:004102C4                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004102C8
.idata:004102D0 ;
.idata:004102D0 ; Imports from KERNEL32.dll
.idata:004102D0 ;
.idata:004102D0 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004102D0                 extrn __imp_AreFileApisANSI:dword
.idata:004102D0                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004102D4 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004102D4                 extrn __imp_CloseHandle:dword
.idata:004102D4                                         ; DATA XREF: CloseHandle↑r
.idata:004102D8 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004102D8                 extrn __imp_CreateDirectoryA:dword
.idata:004102D8                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004102DC ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004102DC                 extrn __imp_CreateFileA:dword
.idata:004102DC                                         ; DATA XREF: CreateFileA↑r
.idata:004102E0 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004102E0                 extrn __imp_DeviceIoControl:dword
.idata:004102E0                                         ; DATA XREF: DeviceIoControl↑r
.idata:004102E4 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004102E4                 extrn __imp_ExitProcess:dword
.idata:004102E4                                         ; DATA XREF: ExitProcess↑r
.idata:004102E8 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004102E8                 extrn __imp_FindClose:dword
.idata:004102E8                                         ; DATA XREF: FindClose↑r
.idata:004102EC ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004102EC                 extrn __imp_FindFirstFileA:dword
.idata:004102EC                                         ; DATA XREF: FindFirstFileA↑r
.idata:004102F0 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004102F0                 extrn __imp_FindNextFileA:dword
.idata:004102F0                                         ; DATA XREF: FindNextFileA↑r
.idata:004102F4 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:004102F4                 extrn __imp_FreeLibrary:dword
.idata:004102F4                                         ; DATA XREF: FreeLibrary↑r
.idata:004102F8 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:004102F8                 extrn __imp_GetCurrentDirectoryA:dword
.idata:004102F8                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:004102FC ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:004102FC                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:004102FC                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00410300 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00410300                 extrn __imp_GetDriveTypeA:dword
.idata:00410300                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00410304 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00410304                 extrn __imp_GetFileAttributesA:dword
.idata:00410304                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00410308 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00410308                 extrn __imp_GetFileInformationByHandle:dword
.idata:00410308                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041030C ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041030C                 extrn __imp_GetFileSize:dword
.idata:0041030C                                         ; DATA XREF: GetFileSize↑r
.idata:00410310 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00410310                 extrn __imp_GetFileType:dword
.idata:00410310                                         ; DATA XREF: GetFileType↑r
.idata:00410314 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00410314                 extrn __imp_GetFullPathNameA:dword
.idata:00410314                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00410318 ; DWORD (__stdcall *GetLastError)()
.idata:00410318                 extrn __imp_GetLastError:dword
.idata:00410318                                         ; DATA XREF: GetLastError↑r
.idata:0041031C ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041031C                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041031C                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00410320 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00410320                 extrn __imp_GetModuleFileNameA:dword
.idata:00410320                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00410324 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00410324                 extrn __imp_GetModuleHandleA:dword
.idata:00410324                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00410328 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00410328                 extrn __imp_GetProcAddress:dword
.idata:00410328                                         ; DATA XREF: GetProcAddress↑r
.idata:0041032C ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041032C                 extrn __imp_GetProcessHeap:dword
.idata:0041032C                                         ; DATA XREF: GetProcessHeap↑r
.idata:00410330 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00410330                 extrn __imp_GetShortPathNameA:dword
.idata:00410330                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00410334 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00410334                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00410334                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00410338 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00410338                 extrn __imp_GetTimeZoneInformation:dword
.idata:00410338                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041033C ; DWORD (__stdcall *GetVersion)()
.idata:0041033C                 extrn __imp_GetVersion:dword
.idata:0041033C                                         ; DATA XREF: GetVersion↑r
.idata:00410340 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00410340                 extrn __imp_GetVersionExA:dword
.idata:00410340                                         ; DATA XREF: GetVersionExA↑r
.idata:00410344 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00410344                 extrn __imp_GetVolumeInformationA:dword
.idata:00410344                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00410348 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00410348                 extrn __imp_HeapAlloc:dword
.idata:00410348                                         ; DATA XREF: HeapAlloc↑r
.idata:0041034C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041034C                 extrn __imp_HeapFree:dword
.idata:0041034C                                         ; DATA XREF: HeapFree↑r
.idata:00410350 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00410350                 extrn __imp_LoadLibraryA:dword
.idata:00410350                                         ; DATA XREF: LoadLibraryA↑r
.idata:00410354 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00410354                 extrn __imp_MultiByteToWideChar:dword
.idata:00410354                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00410358 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00410358                 extrn __imp_PeekNamedPipe:dword
.idata:00410358                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041035C ; BOOL (__stdcall *SetCurrentDirectoryA)(LPCSTR lpPathName)
.idata:0041035C                 extrn __imp_SetCurrentDirectoryA:dword
.idata:0041035C                                         ; DATA XREF: SetCurrentDirectoryA↑r
.idata:00410360 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:00410360                 extrn __imp_SetErrorMode:dword
.idata:00410360                                         ; DATA XREF: SetErrorMode↑r
.idata:00410364 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00410364                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00410364                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00410368 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00410368                 extrn __imp_UnlockFile:dword
.idata:00410368                                         ; DATA XREF: UnlockFile↑r
.idata:0041036C ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041036C                 extrn __imp_lstrcmpiA:dword
.idata:0041036C                                         ; DATA XREF: lstrcmpiA↑r
.idata:00410370 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:00410370                 extrn __imp_lstrcpyA:dword
.idata:00410370                                         ; DATA XREF: lstrcpyA↑r
.idata:00410374
.idata:0041037C ;
.idata:0041037C ; Imports from msvcrt.dll
.idata:0041037C ;
.idata:0041037C ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041037C                 extrn __imp__chmod:dword
.idata:0041037C                                         ; DATA XREF: _chmod↑r
.idata:00410380 ; int (__cdecl *_getpid)()
.idata:00410380                 extrn __imp__getpid:dword
.idata:00410380                                         ; DATA XREF: _getpid↑r
.idata:00410384 ; char *(__cdecl *_strdup)(const char *String)
.idata:00410384                 extrn __imp__strdup:dword
.idata:00410384                                         ; DATA XREF: _strdup↑r
.idata:00410388 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:00410388                 extrn __imp__stricmp:dword
.idata:00410388                                         ; DATA XREF: _stricmp↑r
.idata:0041038C
.idata:00410394 ;
.idata:00410394 ; Imports from MSVCP60.DLL
.idata:00410394 ;
.idata:00410394 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00410394                 extrn __imp_mbrtowc:dword
.idata:00410394                                         ; DATA XREF: mbrtowc↑r
.idata:00410398
.idata:004103A0 ;
.idata:004103A0 ; Imports from msvcrt.dll
.idata:004103A0 ;
.idata:004103A0                 extrn __imp___getmainargs:dword
.idata:004103A0                                         ; DATA XREF: __getmainargs↑r
.idata:004103A4 ; int _mb_cur_max
.idata:004103A4                 extrn __mb_cur_max:dword
.idata:004103A4                                         ; DATA XREF: sub_403C60+7↑r
.idata:004103A4                                         ; sub_403C60+5F3↑r
.idata:004103A8 ; char ***(__cdecl *__p__environ)()
.idata:004103A8                 extrn __imp___p__environ:dword
.idata:004103A8                                         ; DATA XREF: __p__environ↑r
.idata:004103AC ; int *(__cdecl *__p__fmode)()
.idata:004103AC                 extrn __imp___p__fmode:dword
.idata:004103AC                                         ; DATA XREF: __p__fmode↑r
.idata:004103B0 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004103B0                 extrn __set_app_type:dword
.idata:004103B0                                         ; CODE XREF: start+D↑p
.idata:004103B0                                         ; .text:0040102D↑p
.idata:004103B0                                         ; DATA XREF: ...
.idata:004103B4                 extrn __imp__assert:dword
.idata:004103B4                                         ; DATA XREF: _assert↑r
.idata:004103B8 ; void (__cdecl *_cexit)()
.idata:004103B8                 extrn __imp__cexit:dword
.idata:004103B8                                         ; DATA XREF: _cexit↑r
.idata:004103BC ; int (__cdecl *_close)(int FileHandle)
.idata:004103BC                 extrn __imp__close:dword
.idata:004103BC                                         ; DATA XREF: _close↑r
.idata:004103C0 ; int *(__cdecl *_errno)()
.idata:004103C0                 extrn __imp__errno:dword
.idata:004103C0                                         ; DATA XREF: _errno↑r
.idata:004103C4 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004103C4                 extrn __imp__fdopen:dword
.idata:004103C4                                         ; DATA XREF: _fdopen↑r
.idata:004103C8 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004103C8                 extrn __imp__filelengthi64:dword
.idata:004103C8                                         ; DATA XREF: _filelengthi64↑r
.idata:004103CC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004103CC                 extrn __imp__flsbuf:dword
.idata:004103CC                                         ; DATA XREF: _flsbuf↑r
.idata:004103D0 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004103D0                 extrn __imp__get_osfhandle:dword
.idata:004103D0                                         ; DATA XREF: _get_osfhandle↑r
.idata:004103D4 ; char *(__cdecl *_getcwd)(char *DstBuf, int SizeInBytes)
.idata:004103D4                 extrn __imp__getcwd:dword
.idata:004103D4                                         ; DATA XREF: _getcwd↑r
.idata:004103D8 ; FILE iob[]
.idata:004103D8                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004103D8                                         ; sub_401080+75↑r ...
.idata:004103DC ; int (__cdecl *_isctype)(int C, int Type)
.idata:004103DC                 extrn __imp__isctype:dword
.idata:004103DC                                         ; DATA XREF: _isctype↑r
.idata:004103E0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004103E0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004103E0                                         ; DATA XREF: .text:0040106C↑r
.idata:004103E4 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004103E4                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004103E8 ; const unsigned __int16 *pctype
.idata:004103E8                 extrn _pctype:dword     ; DATA XREF: sub_403C60:loc_404354↑r
.idata:004103EC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004103EC                 extrn __imp__setmode:dword
.idata:004103EC                                         ; DATA XREF: _setmode↑r
.idata:004103F0 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:004103F0                 extrn __imp__stricmp_0:dword
.idata:004103F0                                         ; DATA XREF: _stricmp_0↑r
.idata:004103F4 ; void (__cdecl __noreturn *abort)()
.idata:004103F4                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004103F8 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004103F8                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004103F8                                         ; DATA XREF: sub_401040+C↑r
.idata:004103FC ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004103FC                 extrn __imp_calloc:dword
.idata:004103FC                                         ; DATA XREF: calloc↑r
.idata:00410400 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:00410400                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00410404 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00410404                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00410408 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00410408                 extrn __imp_fclose:dword
.idata:00410408                                         ; DATA XREF: fclose↑r
.idata:0041040C ; int (__cdecl *fflush)(FILE *Stream)
.idata:0041040C                 extrn __imp_fflush:dword
.idata:0041040C                                         ; DATA XREF: fflush↑r
.idata:00410410 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00410410                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00410414 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00410414                 extrn __imp_fprintf:dword
.idata:00410414                                         ; DATA XREF: fprintf↑r
.idata:00410418 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00410418                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0041041C ; void (__cdecl *free)(void *Block)
.idata:0041041C                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00410420 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00410420                 extrn __imp_getenv:dword
.idata:00410420                                         ; DATA XREF: getenv↑r
.idata:00410424 ; int (__cdecl *isalpha)(int C)
.idata:00410424                 extrn __imp_isalpha:dword
.idata:00410424                                         ; DATA XREF: isalpha↑r
.idata:00410428 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00410428                 extrn __imp_iswctype:dword
.idata:00410428                                         ; DATA XREF: iswctype↑r
.idata:0041042C ; void *(__cdecl *malloc)(size_t Size)
.idata:0041042C                 extrn __imp_malloc:dword
.idata:0041042C                                         ; DATA XREF: malloc↑r
.idata:00410430 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00410430                 extrn __imp_memcpy:dword
.idata:00410430                                         ; DATA XREF: memcpy↑r
.idata:00410434 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00410434                 extrn __imp_memset:dword
.idata:00410434                                         ; DATA XREF: memset↑r
.idata:00410438 ; int (*printf)(const char *const Format, ...)
.idata:00410438                 extrn __imp_printf:dword
.idata:00410438                                         ; DATA XREF: printf↑r
.idata:0041043C ; int (__cdecl *puts)(const char *Buffer)
.idata:0041043C                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:00410440 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00410440                 extrn __imp_realloc:dword
.idata:00410440                                         ; DATA XREF: realloc↑r
.idata:00410444 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00410444                 extrn __imp_setlocale:dword
.idata:00410444                                         ; DATA XREF: setlocale↑r
.idata:00410448 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00410448                 extrn __imp_signal:dword
.idata:00410448                                         ; DATA XREF: signal↑r
.idata:0041044C ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0041044C                 extrn __imp_sprintf:dword
.idata:0041044C                                         ; DATA XREF: sprintf↑r
.idata:00410450 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00410450                 extrn __imp_sscanf:dword
.idata:00410450                                         ; DATA XREF: sscanf↑r
.idata:00410454 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00410454                 extrn __imp_strcat:dword
.idata:00410454                                         ; DATA XREF: strcat↑r
.idata:00410458 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00410458                 extrn __imp_strchr:dword
.idata:00410458                                         ; DATA XREF: strchr↑r
.idata:0041045C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0041045C                 extrn __imp_strcmp:dword
.idata:0041045C                                         ; DATA XREF: strcmp↑r
.idata:00410460 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00410460                 extrn __imp_strcpy:dword
.idata:00410460                                         ; DATA XREF: strcpy↑r
.idata:00410464 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00410464                 extrn __imp_strerror:dword
.idata:00410464                                         ; DATA XREF: strerror↑r
.idata:00410468 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00410468                 extrn __imp_strlen:dword
.idata:00410468                                         ; DATA XREF: strlen↑r
.idata:0041046C ; char *(__cdecl *strncat)(char *Destination, const char *Source, size_t Count)
.idata:0041046C                 extrn __imp_strncat:dword
.idata:0041046C                                         ; DATA XREF: strncat↑r
.idata:00410470 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00410470                 extrn __imp_strncmp:dword
.idata:00410470                                         ; DATA XREF: strncmp↑r
.idata:00410474 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00410474                 extrn __imp_strncpy:dword
.idata:00410474                                         ; DATA XREF: strncpy↑r
.idata:00410478 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:00410478                 extrn __imp_strpbrk:dword
.idata:00410478                                         ; DATA XREF: strpbrk↑r
.idata:0041047C ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:0041047C                 extrn __imp_strrchr:dword
.idata:0041047C                                         ; DATA XREF: strrchr↑r
.idata:00410480 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00410480                 extrn __imp_strspn:dword
.idata:00410480                                         ; DATA XREF: strspn↑r
.idata:00410484 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:00410484                 extrn __imp_strstr:dword
.idata:00410484                                         ; DATA XREF: strstr↑r
.idata:00410488 ; int (__cdecl *toupper)(int C)
.idata:00410488                 extrn __imp_toupper:dword
.idata:00410488                                         ; DATA XREF: toupper↑r
.idata:0041048C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041048C                 extrn __imp_vfprintf:dword
.idata:0041048C                                         ; DATA XREF: vfprintf↑r
.idata:00410490
.idata:00410498 ;
.idata:00410498 ; Imports from OLE32.dll
.idata:00410498 ;
.idata:00410498 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00410498                 extrn __imp_CoCreateInstance:dword
.idata:00410498                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041049C ; void (__stdcall *CoUninitialize)()
.idata:0041049C                 extrn __imp_CoUninitialize:dword
.idata:0041049C                                         ; DATA XREF: CoUninitialize↑r
.idata:004104A0 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:004104A0                 extrn __imp_OleInitialize:dword
.idata:004104A0                                         ; DATA XREF: OleInitialize↑r
.idata:004104A4
.idata:004104A4
.idata:004104A4
.idata:004104A4                 end start
