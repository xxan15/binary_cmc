.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 187FF522C257A89988603660B0EF9CCD7AAE3766F106EDC128B115EE8DDC2C2B
.text:00401000 ; Input MD5    : AA0C9DD4E8628AD3BBFDEC501060F1F9
.text:00401000 ; Input CRC32  : D8A6655F
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/tac.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A25F (Wed Apr 20 18:41:35 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00014040 (  81984.)
.text:00401000 ; Section size in file          : 00014200 (  82432.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4016C0+62↓p
.text:00401040                                         ; sub_402680+156↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_414020
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_416000
.text:004010A2                 mov     edx, dword_4160A0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_416004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4160C0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4160C0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_413FF0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_416000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_416004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx ; char *
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx ; char
.text:00401165                 call    sub_4016C0
.text:00401165 sub_401080      endp
.text:00401165
.text:00401165 ; ---------------------------------------------------------------------------
.text:0040116A                 db  89h ; ‰
.text:0040116B                 db 0C3h ; Ã
.text:0040116C                 db 0E8h ; è
.text:0040116D                 db 0EFh ; ï
.text:0040116E                 db  34h ; 4
.text:0040116F                 db    1
.text:00401170                 db    0
.text:00401171                 db  89h ; ‰
.text:00401172                 db  1Ch
.text:00401173                 db  24h ; $
.text:00401174                 db 0E8h ; è
.text:00401175                 db  67h ; g
.text:00401176                 db  38h ; 8
.text:00401177                 db    1
.text:00401178                 db    0
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_414020
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aBefore         db 'before',0           ; DATA XREF: .text:off_4012C0↓o
.text:00401287 aRegex          db 'regex',0            ; DATA XREF: .text:004012D0↓o
.text:0040128D aSeparator      db 'separator',0        ; DATA XREF: .text:004012E0↓o
.text:00401297 aHelp           db 'help',0             ; DATA XREF: .text:004012F0↓o
.text:0040129C aVersion        db 'version',0          ; DATA XREF: .text:00401300↓o
.text:004012A4                 align 20h
.text:004012C0 off_4012C0      dd offset aBefore       ; DATA XREF: sub_4016C0+98↓o
.text:004012C0                                         ; "before"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 62h
.text:004012D0                 dd offset aRegex        ; "regex"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 72h
.text:004012E0                 dd offset aSeparator    ; "separator"
.text:004012E4                 dd 1, 0
.text:004012EC                 dd 73h
.text:004012F0                 dd offset aHelp         ; "help"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 0FFFFFF7Eh
.text:00401300                 dd offset aVersion      ; "version"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401320 ; const char dword_401320[]
.text:00401320 dword_401320    dd 0F689002Dh           ; DATA XREF: .text:off_401324↓o
.text:00401320                                         ; sub_4016C0+463↓o ...
.text:00401324 off_401324      dd offset dword_401320  ; DATA XREF: sub_4016C0+3C7↓o
.text:00401328                 dd 0
.text:0040132C ; const char Locale
.text:0040132C Locale          db 0                    ; DATA XREF: sub_4016C0+1F↓o
.text:0040132D                 align 20h
.text:00401340 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401340                                         ; DATA XREF: sub_4016C0+39↓o
.text:00401363 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4016C0+41↓o
.text:00401363                                         ; sub_4016C0+4E↓o
.text:0040136D asc_40136D      db 0Ah,0                ; DATA XREF: sub_4016C0+6E↓o
.text:0040136F aBrs            db 'brs:',0             ; DATA XREF: sub_4016C0+A0↓o
.text:00401374 aSeparatorCanno db 'separator cannot be empty',0
.text:00401374                                         ; DATA XREF: sub_4016C0+EA↓o
.text:0040138E                 align 20h
.text:004013A0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004013A0                                         ; DATA XREF: sub_4016C0:loc_4017D4↓o
.text:004013A0                                         ; .text:00401B8C↓o
.text:004013C7                 align 20h
.text:004013E0 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.text:004013E0                                         ; DATA XREF: sub_4016C0+16F↓o
.text:004013E0                                         ; .text:loc_401BC0↓o
.text:00401401                 align 20h
.text:00401420 aWriteEachFileT db 'Write each FILE to standard output, last line first.',0Ah
.text:00401420                                         ; DATA XREF: sub_4016C0+18E↓o
.text:00401420                                         ; .text:00401BDF↓o
.text:00401420                 db 'With no FILE, or when FILE is -, read standard input.',0Ah
.text:00401420                 db 0Ah,0
.text:0040148D                 align 20h
.text:004014A0 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:004014A0                                         ; DATA XREF: sub_4016C0+1B0↓o
.text:004014A0                                         ; .text:00401C01↓o
.text:004014A0                 db 'ns too.',0Ah,0
.text:004014EA                 align 20h
.text:00401500 aBBeforeAttachT db '  -b, --before             attach the separator before instead of'
.text:00401500                                         ; DATA XREF: sub_4016C0+1D2↓o
.text:00401500                                         ; .text:00401C23↓o
.text:00401500                 db ' after',0Ah
.text:00401500                 db '  -r, --regex              interpret the separator as a regular e'
.text:00401500                 db 'xpression',0Ah
.text:00401500                 db '  -s, --separator=STRING   use STRING as the separator instead of'
.text:00401500                 db ' newline',0Ah,0
.text:004015DE                 align 10h
.text:004015E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004015E0                                         ; DATA XREF: sub_4016C0+1F4↓o
.text:004015E0                                         ; .text:00401C45↓o
.text:0040160D                 align 20h
.text:00401620 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401620                                         ; DATA XREF: sub_4016C0+216↓o
.text:00401620                                         ; .text:00401C67↓o
.text:00401656 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4016C0+238↓o
.text:00401656                                         ; .text:00401C89↓o
.text:00401656                 db 'Report bugs to <%s>.',0Ah,0
.text:0040166D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040166D                                         ; DATA XREF: sub_4016C0+245↓o
.text:0040166D                                         ; .text:00401C96↓o
.text:00401683 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4016C0+26F↓o
.text:00401693 aJayLepreau     db 'Jay Lepreau',0      ; DATA XREF: sub_4016C0+277↓o
.text:0040169F a530            db '5.3.0',0            ; DATA XREF: sub_4016C0+282↓o
.text:004016A5 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4016C0+28A↓o
.text:004016B3 ; const FILE aTac
.text:004016B3 aTac            db 'tac',0              ; DATA XREF: sub_4016C0+292↓o
.text:004016B7 ; const char aS[3]
.text:004016B7 aS              db '%s',0               ; DATA XREF: sub_4016C0+323↓o
.text:004016BA                 db  8Dh
.text:004016BB                 db 0B6h ; ¶
.text:004016BC                 db    0
.text:004016BD                 db    0
.text:004016BE                 db    0
.text:004016BF                 db    0
.text:004016C0
.text:004016C0 ; =============== S U B R O U T I N E =======================================
.text:004016C0
.text:004016C0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004016C0
.text:004016C0 ; void __cdecl __noreturn sub_4016C0(char *, char)
.text:004016C0 sub_4016C0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004016C0
.text:004016C0 Category        = dword ptr -28h
.text:004016C0 Locale          = dword ptr -24h
.text:004016C0 ElementCount    = dword ptr -20h
.text:004016C0 Stream          = dword ptr -1Ch
.text:004016C0 var_18          = byte ptr -18h
.text:004016C0 var_14          = dword ptr -14h
.text:004016C0 var_10          = dword ptr -10h
.text:004016C0 var_A           = byte ptr -0Ah
.text:004016C0 var_9           = byte ptr -9
.text:004016C0 arg_0           = dword ptr  8
.text:004016C0 arg_4           = dword ptr  0Ch
.text:004016C0
.text:004016C0                 push    ebp
.text:004016C1                 xor     eax, eax
.text:004016C3                 mov     ebp, esp
.text:004016C5                 push    esi
.text:004016C6                 push    ebx
.text:004016C7                 sub     esp, 20h
.text:004016CA                 mov     ebx, [ebp+arg_4]
.text:004016CD                 and     esp, 0FFFFFFF0h
.text:004016D0                 mov     esi, [ebp+arg_0]
.text:004016D3                 call    __alloca
.text:004016D8                 call    sub_4140C0
.text:004016DD                 mov     edx, [ebx]
.text:004016DF                 mov     [esp+28h+Locale], offset Locale ; Locale
.text:004016E7                 mov     [esp+28h+Category], 0 ; Category
.text:004016EE                 mov     ds:dword_4196C0, edx
.text:004016F4                 call    setlocale
.text:004016F9                 mov     [esp+28h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401701                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:00401708                 call    ds:libintl_bindtextdomain
.text:0040170E                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:00401715                 call    ds:libintl_textdomain
.text:0040171B                 mov     [esp+28h+Category], offset sub_40BF50 ; void (__cdecl *)()
.text:00401722                 call    sub_401040
.text:00401727                 mov     ds:byte_419050, 1
.text:0040172E                 mov     eax, offset asc_40136D ; "\n"
.text:00401733                 mov     edx, 1
.text:00401738                 mov     ds:Str, eax
.text:0040173D                 mov     ds:dword_419060, edx
.text:00401743                 lea     esi, [esi+0]
.text:00401749                 lea     edi, [edi+0]
.text:00401750
.text:00401750 loc_401750:                             ; CODE XREF: sub_4016C0+E8↓j
.text:00401750                                         ; sub_4016C0+10F↓j ...
.text:00401750                 mov     dword ptr [esp+28h+var_18], 0
.text:00401758                 mov     [esp+28h+Stream], offset off_4012C0 ; char
.text:00401760                 mov     [esp+28h+ElementCount], offset aBrs ; "brs:"
.text:00401768                 mov     [esp+28h+Locale], ebx
.text:0040176C                 mov     [esp+28h+Category], esi
.text:0040176F                 call    sub_40BDE0
.text:00401774                 cmp     eax, 0FFFFFFFFh
.text:00401777                 jz      loc_401970
.text:0040177D                 cmp     eax, 62h ; 'b'
.text:00401780                 jz      loc_401964
.text:00401786                 cmp     eax, 62h ; 'b'
.text:00401789                 jle     loc_40181D
.text:0040178F                 cmp     eax, 72h ; 'r'
.text:00401792                 jz      short loc_401810
.text:00401794                 cmp     eax, 73h ; 's'
.text:00401797                 jnz     short loc_4017D4
.text:00401799                 mov     edx, ds:dword_4196F0
.text:0040179F                 mov     ds:Str, edx
.text:004017A5                 cmp     byte ptr [edx], 0
.text:004017A8                 jnz     short loc_401750
.text:004017AA                 mov     [esp+28h+Category], offset aSeparatorCanno ; "separator cannot be empty"
.text:004017B1                 call    ds:libintl_gettext
.text:004017B7                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:004017BF                 mov     [esp+28h+Category], 1 ; Code
.text:004017C6                 mov     [esp+28h+ElementCount], eax ; char *
.text:004017CA                 call    sub_40C480
.text:004017CF                 jmp     loc_401750
.text:004017D4 ; ---------------------------------------------------------------------------
.text:004017D4
.text:004017D4 loc_4017D4:                             ; CODE XREF: sub_4016C0+D7↑j
.text:004017D4                                         ; sub_4016C0+16D↓j
.text:004017D4                 mov     [esp+28h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004017DB                 call    ds:libintl_gettext
.text:004017E1                 mov     ebx, ds:_iob
.text:004017E7                 mov     esi, ds:dword_4196C0
.text:004017ED                 add     ebx, 40h ; '@'
.text:004017F0                 mov     [esp+28h+ElementCount], esi
.text:004017F4                 mov     [esp+28h+Locale], eax ; Format
.text:004017F8                 mov     [esp+28h+Category], ebx ; Stream
.text:004017FB                 call    fprintf
.text:00401800                 mov     [esp+28h+Category], 1 ; Code
.text:00401807
.text:00401807 loc_401807:                             ; CODE XREF: sub_4016C0+25C↓j
.text:00401807                                         ; sub_4016C0+449↓j
.text:00401807                 call    exit
.text:00401807 ; ---------------------------------------------------------------------------
.text:0040180C                 align 10h
.text:00401810
.text:00401810 loc_401810:                             ; CODE XREF: sub_4016C0+D2↑j
.text:00401810                 xor     ecx, ecx
.text:00401812                 mov     ds:dword_419060, ecx
.text:00401818                 jmp     loc_401750
.text:0040181D ; ---------------------------------------------------------------------------
.text:0040181D
.text:0040181D loc_40181D:                             ; CODE XREF: sub_4016C0+C9↑j
.text:0040181D                 cmp     eax, 0FFFFFF7Dh
.text:00401822                 jz      loc_401921
.text:00401828                 cmp     eax, 0FFFFFF7Eh
.text:0040182D                 jnz     short loc_4017D4
.text:0040182F                 mov     [esp+28h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:00401836                 call    ds:libintl_gettext
.text:0040183C                 mov     ecx, ds:dword_4196C0
.text:00401842                 mov     [esp+28h+Category], eax ; Format
.text:00401845                 mov     [esp+28h+Locale], ecx
.text:00401849                 call    printf
.text:0040184E                 mov     [esp+28h+Category], offset aWriteEachFileT ; "Write each FILE to standard output, las"...
.text:00401855                 call    ds:libintl_gettext
.text:0040185B                 mov     esi, ds:_iob
.text:00401861                 add     esi, 20h ; ' '
.text:00401864                 mov     [esp+28h+Locale], esi ; Stream
.text:00401868                 mov     [esp+28h+Category], eax ; Buffer
.text:0040186B                 call    fputs
.text:00401870                 mov     [esp+28h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401877                 call    ds:libintl_gettext
.text:0040187D                 mov     ebx, ds:_iob
.text:00401883                 add     ebx, 20h ; ' '
.text:00401886                 mov     [esp+28h+Locale], ebx ; Stream
.text:0040188A                 mov     [esp+28h+Category], eax ; Buffer
.text:0040188D                 call    fputs
.text:00401892                 mov     [esp+28h+Category], offset aBBeforeAttachT ; "  -b, --before             attach the s"...
.text:00401899                 call    ds:libintl_gettext
.text:0040189F                 mov     ecx, ds:_iob
.text:004018A5                 add     ecx, 20h ; ' '
.text:004018A8                 mov     [esp+28h+Locale], ecx ; Stream
.text:004018AC                 mov     [esp+28h+Category], eax ; Buffer
.text:004018AF                 call    fputs
.text:004018B4                 mov     [esp+28h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004018BB                 call    ds:libintl_gettext
.text:004018C1                 mov     esi, ds:_iob
.text:004018C7                 add     esi, 20h ; ' '
.text:004018CA                 mov     [esp+28h+Locale], esi ; Stream
.text:004018CE                 mov     [esp+28h+Category], eax ; Buffer
.text:004018D1                 call    fputs
.text:004018D6                 mov     [esp+28h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004018DD                 call    ds:libintl_gettext
.text:004018E3                 mov     ebx, ds:_iob
.text:004018E9                 add     ebx, 20h ; ' '
.text:004018EC                 mov     [esp+28h+Locale], ebx ; Stream
.text:004018F0                 mov     [esp+28h+Category], eax ; Buffer
.text:004018F3                 call    fputs
.text:004018F8                 mov     [esp+28h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004018FF                 call    ds:libintl_gettext
.text:00401905                 mov     [esp+28h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040190D                 mov     [esp+28h+Category], eax ; Format
.text:00401910                 call    printf
.text:00401915
.text:00401915 loc_401915:                             ; CODE XREF: sub_4016C0+2A2↓j
.text:00401915                 mov     [esp+28h+Category], 0
.text:0040191C                 jmp     loc_401807
.text:00401921 ; ---------------------------------------------------------------------------
.text:00401921
.text:00401921 loc_401921:                             ; CODE XREF: sub_4016C0+162↑j
.text:00401921                 mov     [esp+28h+var_10], 0
.text:00401929                 mov     edx, ds:_iob
.text:0040192F                 mov     [esp+28h+var_14], offset aDavidMackenzie ; "David MacKenzie"
.text:00401937                 mov     dword ptr [esp+28h+var_18], offset aJayLepreau ; "Jay Lepreau"
.text:0040193F                 add     edx, 20h ; ' '
.text:00401942                 mov     [esp+28h+Stream], offset a530 ; "5.3.0"
.text:0040194A                 mov     [esp+28h+ElementCount], offset aGnuCoreutils ; "GNU coreutils"
.text:00401952                 mov     [esp+28h+Locale], offset aTac ; FILE *
.text:0040195A                 mov     [esp+28h+Category], edx ; FILE *
.text:0040195D                 call    sub_40BDA0
.text:00401962                 jmp     short loc_401915
.text:00401964 ; ---------------------------------------------------------------------------
.text:00401964
.text:00401964 loc_401964:                             ; CODE XREF: sub_4016C0+C0↑j
.text:00401964                 mov     ds:byte_419050, 0
.text:0040196B                 jmp     loc_401750
.text:00401970 ; ---------------------------------------------------------------------------
.text:00401970
.text:00401970 loc_401970:                             ; CODE XREF: sub_4016C0+B7↑j
.text:00401970                 mov     ecx, ds:dword_419060
.text:00401976                 test    ecx, ecx
.text:00401978                 jnz     loc_401B63
.text:0040197E                 mov     [esp+28h+Category], 64h ; 'd' ; size_t
.text:00401985                 mov     ecx, 64h ; 'd'
.text:0040198A                 mov     ds:dword_4190B4, ecx
.text:00401990                 call    sub_40C0D0
.text:00401995                 mov     ds:dword_4190B0, eax
.text:0040199A                 mov     [esp+28h+Category], 100h ; size_t
.text:004019A1                 call    sub_40C0D0
.text:004019A6                 mov     ds:dword_4190C0, eax
.text:004019AB                 mov     ecx, ds:Str
.text:004019B1                 xor     edx, edx
.text:004019B3                 mov     ds:dword_4190C4, edx
.text:004019B9                 mov     [esp+28h+Category], ecx ; Str
.text:004019BC                 call    strlen
.text:004019C1                 mov     [esp+28h+Locale], eax
.text:004019C5                 mov     edx, ds:Str
.text:004019CB                 mov     [esp+28h+ElementCount], offset dword_4190B0
.text:004019D3                 mov     [esp+28h+Category], edx
.text:004019D6                 call    sub_406D40
.text:004019DB                 test    eax, eax
.text:004019DD                 jz      short loc_4019FF
.text:004019DF                 mov     [esp+28h+Stream], eax ; char
.text:004019E3                 mov     [esp+28h+ElementCount], offset aS ; "%s"
.text:004019EB                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:004019F3                 mov     [esp+28h+Category], 1 ; Code
.text:004019FA                 call    sub_40C480
.text:004019FF
.text:004019FF loc_4019FF:                             ; CODE XREF: sub_4016C0+31D↑j
.text:004019FF                                         ; sub_4016C0+4BB↓j
.text:004019FF                 mov     edx, ds:dword_419060
.text:00401A05                 mov     ecx, 2000h
.text:00401A0A                 mov     ds:dword_419090, ecx
.text:00401A10                 cmp     edx, 1000h
.text:00401A16                 jb      short loc_401A36
.text:00401A18                 nop
.text:00401A19                 lea     esi, [esi+0]
.text:00401A20
.text:00401A20 loc_401A20:                             ; CODE XREF: sub_4016C0+374↓j
.text:00401A20                 mov     eax, ds:dword_419090
.text:00401A25                 test    eax, eax
.text:00401A27                 js      short loc_401A50
.text:00401A29                 add     eax, eax
.text:00401A2B                 mov     ds:dword_419090, eax
.text:00401A30                 shr     eax, 1
.text:00401A32                 cmp     edx, eax
.text:00401A34                 jnb     short loc_401A20
.text:00401A36
.text:00401A36 loc_401A36:                             ; CODE XREF: sub_4016C0+356↑j
.text:00401A36                 mov     eax, ds:dword_419090
.text:00401A3B                 lea     edx, [edx+eax+1]
.text:00401A3F                 lea     ecx, [edx+edx]
.text:00401A42                 mov     ds:dword_4190A0, ecx
.text:00401A48                 cmp     eax, edx
.text:00401A4A                 jnb     short loc_401A50
.text:00401A4C                 cmp     edx, ecx
.text:00401A4E                 jb      short loc_401A55
.text:00401A50
.text:00401A50 loc_401A50:                             ; CODE XREF: sub_4016C0+367↑j
.text:00401A50                                         ; sub_4016C0+38A↑j
.text:00401A50                 call    sub_40C380
.text:00401A55 ; ---------------------------------------------------------------------------
.text:00401A55
.text:00401A55 loc_401A55:                             ; CODE XREF: sub_4016C0+38E↑j
.text:00401A55                 mov     [esp+28h+Category], ecx ; size_t
.text:00401A58                 call    sub_40C0D0
.text:00401A5D                 mov     ds:Buffer, eax
.text:00401A62                 mov     edx, eax
.text:00401A64                 mov     eax, ds:dword_419060
.text:00401A69                 test    eax, eax
.text:00401A6B                 jnz     loc_401B40
.text:00401A71                 lea     ecx, [edx+1]
.text:00401A74                 mov     ds:Buffer, ecx
.text:00401A7A
.text:00401A7A loc_401A7A:                             ; CODE XREF: sub_4016C0+49E↓j
.text:00401A7A                 mov     edx, dword_416030
.text:00401A80                 cmp     edx, esi
.text:00401A82                 lea     ebx, [ebx+edx*4]
.text:00401A85                 jl      short loc_401A8C
.text:00401A87                 mov     ebx, offset off_401324
.text:00401A8C
.text:00401A8C loc_401A8C:                             ; CODE XREF: sub_4016C0+3C5↑j
.text:00401A8C                 mov     [ebp+var_9], 1
.text:00401A90                 mov     eax, [ebx]
.text:00401A92                 xor     esi, esi
.text:00401A94                 test    eax, eax
.text:00401A96                 jz      short loc_401AC1
.text:00401A98
.text:00401A98 loc_401A98:                             ; CODE XREF: sub_4016C0+3FF↓j
.text:00401A98                 mov     [ebp+var_A], 0
.text:00401A9C                 mov     [esp+28h+Category], eax ; FileName
.text:00401A9F                 call    sub_401CF0
.text:00401AA4                 test    al, al
.text:00401AA6                 jz      short loc_401AB2
.text:00401AA8                 cmp     [ebp+var_9], 0
.text:00401AAC                 jz      short loc_401AB2
.text:00401AAE                 mov     [ebp+var_A], 1
.text:00401AB2
.text:00401AB2 loc_401AB2:                             ; CODE XREF: sub_4016C0+3E6↑j
.text:00401AB2                                         ; sub_4016C0+3EC↑j
.text:00401AB2                 movzx   ecx, [ebp+var_A]
.text:00401AB6                 inc     esi
.text:00401AB7                 mov     eax, [ebx+esi*4]
.text:00401ABA                 mov     [ebp+var_9], cl
.text:00401ABD                 test    eax, eax
.text:00401ABF                 jnz     short loc_401A98
.text:00401AC1
.text:00401AC1 loc_401AC1:                             ; CODE XREF: sub_4016C0+3D6↑j
.text:00401AC1                 mov     [esp+28h+Locale], 1 ; ElementSize
.text:00401AC9                 mov     edx, ds:_iob
.text:00401ACF                 xor     ebx, ebx
.text:00401AD1                 mov     [esp+28h+Category], offset unk_417010 ; Buffer
.text:00401AD8                 mov     esi, ds:ElementCount
.text:00401ADE                 add     edx, 20h ; ' '
.text:00401AE1                 mov     [esp+28h+Stream], edx ; char
.text:00401AE5                 mov     [esp+28h+ElementCount], esi ; ElementCount
.text:00401AE9                 call    fwrite
.text:00401AEE                 mov     ds:ElementCount, ebx
.text:00401AF4                 cmp     ds:byte_417000, 0
.text:00401AFB                 jnz     short loc_401B0E
.text:00401AFD
.text:00401AFD loc_401AFD:                             ; CODE XREF: sub_4016C0+45C↓j
.text:00401AFD                                         ; sub_4016C0+47D↓j
.text:00401AFD                 xor     ebx, ebx
.text:00401AFF                 cmp     [ebp+var_9], 0
.text:00401B03                 setz    bl
.text:00401B06                 mov     [esp+28h+Category], ebx
.text:00401B09                 jmp     loc_401807
.text:00401B0E ; ---------------------------------------------------------------------------
.text:00401B0E
.text:00401B0E loc_401B0E:                             ; CODE XREF: sub_4016C0+43B↑j
.text:00401B0E                 mov     [esp+28h+Category], 0 ; FileHandle
.text:00401B15                 call    _close
.text:00401B1A                 test    eax, eax
.text:00401B1C                 jns     short loc_401AFD
.text:00401B1E                 call    _errno
.text:00401B23                 mov     [esp+28h+ElementCount], offset dword_401320 ; char *
.text:00401B2B                 mov     ecx, [eax]
.text:00401B2D                 mov     [esp+28h+Category], 1 ; Code
.text:00401B34                 mov     [esp+28h+Locale], ecx ; ErrorMessage
.text:00401B38                 call    sub_40C480
.text:00401B3D                 jmp     short loc_401AFD
.text:00401B3D ; ---------------------------------------------------------------------------
.text:00401B3F                 align 10h
.text:00401B40
.text:00401B40 loc_401B40:                             ; CODE XREF: sub_4016C0+3AB↑j
.text:00401B40                 mov     [esp+28h+Category], edx ; Destination
.text:00401B43                 mov     ecx, ds:Str
.text:00401B49                 mov     [esp+28h+Locale], ecx ; Source
.text:00401B4D                 call    strcpy
.text:00401B52                 mov     edx, ds:dword_419060
.text:00401B58                 add     ds:Buffer, edx
.text:00401B5E                 jmp     loc_401A7A
.text:00401B63 ; ---------------------------------------------------------------------------
.text:00401B63
.text:00401B63 loc_401B63:                             ; CODE XREF: sub_4016C0+2B8↑j
.text:00401B63                 mov     edx, ds:Str
.text:00401B69                 mov     [esp+28h+Category], edx ; Str
.text:00401B6C                 call    strlen
.text:00401B71                 mov     ds:dword_419060, eax
.text:00401B76                 mov     ds:dword_419070, eax
.text:00401B7B                 jmp     loc_4019FF
.text:00401B7B sub_4016C0      endp
.text:00401B7B
.text:00401B80 ; ---------------------------------------------------------------------------
.text:00401B80                 push    ebx
.text:00401B81                 sub     esp, 18h
.text:00401B84                 mov     ebx, [esp+20h]
.text:00401B88                 test    ebx, ebx
.text:00401B8A                 jz      short loc_401BC0
.text:00401B8C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401B93                 call    ds:libintl_gettext
.text:00401B99                 mov     edx, ds:_iob
.text:00401B9F                 mov     ecx, ds:dword_4196C0
.text:00401BA5                 add     edx, 40h ; '@'
.text:00401BA8                 mov     [esp+8], ecx
.text:00401BAC                 mov     [esp+4], eax
.text:00401BB0                 mov     [esp], edx
.text:00401BB3                 call    fprintf
.text:00401BB8
.text:00401BB8 loc_401BB8:                             ; CODE XREF: .text:00401CA6↓j
.text:00401BB8                 mov     [esp], ebx
.text:00401BBB                 call    exit
.text:00401BC0 ; ---------------------------------------------------------------------------
.text:00401BC0
.text:00401BC0 loc_401BC0:                             ; CODE XREF: .text:00401B8A↑j
.text:00401BC0                 mov     dword ptr [esp], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:00401BC7                 call    ds:libintl_gettext
.text:00401BCD                 mov     ecx, ds:dword_4196C0
.text:00401BD3                 mov     [esp], eax
.text:00401BD6                 mov     [esp+4], ecx
.text:00401BDA                 call    printf
.text:00401BDF                 mov     dword ptr [esp], offset aWriteEachFileT ; "Write each FILE to standard output, las"...
.text:00401BE6                 call    ds:libintl_gettext
.text:00401BEC                 mov     ecx, ds:_iob
.text:00401BF2                 add     ecx, 20h ; ' '
.text:00401BF5                 mov     [esp+4], ecx
.text:00401BF9                 mov     [esp], eax
.text:00401BFC                 call    fputs
.text:00401C01                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401C08                 call    ds:libintl_gettext
.text:00401C0E                 mov     ecx, ds:_iob
.text:00401C14                 add     ecx, 20h ; ' '
.text:00401C17                 mov     [esp+4], ecx
.text:00401C1B                 mov     [esp], eax
.text:00401C1E                 call    fputs
.text:00401C23                 mov     dword ptr [esp], offset aBBeforeAttachT ; "  -b, --before             attach the s"...
.text:00401C2A                 call    ds:libintl_gettext
.text:00401C30                 mov     ecx, ds:_iob
.text:00401C36                 add     ecx, 20h ; ' '
.text:00401C39                 mov     [esp+4], ecx
.text:00401C3D                 mov     [esp], eax
.text:00401C40                 call    fputs
.text:00401C45                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401C4C                 call    ds:libintl_gettext
.text:00401C52                 mov     ecx, ds:_iob
.text:00401C58                 add     ecx, 20h ; ' '
.text:00401C5B                 mov     [esp+4], ecx
.text:00401C5F                 mov     [esp], eax
.text:00401C62                 call    fputs
.text:00401C67                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401C6E                 call    ds:libintl_gettext
.text:00401C74                 mov     ecx, ds:_iob
.text:00401C7A                 add     ecx, 20h ; ' '
.text:00401C7D                 mov     [esp+4], ecx
.text:00401C81                 mov     [esp], eax
.text:00401C84                 call    fputs
.text:00401C89                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401C90                 call    ds:libintl_gettext
.text:00401C96                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401C9E                 mov     [esp], eax
.text:00401CA1                 call    printf
.text:00401CA6                 jmp     loc_401BB8
.text:00401CA6 ; ---------------------------------------------------------------------------
.text:00401CAB aStandardInput  db 'standard input',0   ; DATA XREF: sub_401CF0+29↓o
.text:00401CBA aSReadError     db '%s: read error',0   ; DATA XREF: sub_401CF0+A3↓o
.text:00401CBA                                         ; sub_401F00+F3↓o ...
.text:00401CC9 aCannotOpenSFor db 'cannot open %s for reading',0
.text:00401CC9                                         ; DATA XREF: sub_401CF0+182↓o
.text:00401CE4                 align 10h
.text:00401CF0
.text:00401CF0 ; =============== S U B R O U T I N E =======================================
.text:00401CF0
.text:00401CF0
.text:00401CF0 ; int __cdecl sub_401CF0(char *FileName)
.text:00401CF0 sub_401CF0      proc near               ; CODE XREF: sub_4016C0+3DF↑p
.text:00401CF0
.text:00401CF0 FileHandle      = dword ptr -2Ch
.text:00401CF0 Offset          = qword ptr -28h
.text:00401CF0 Origin          = dword ptr -20h
.text:00401CF0 var_18          = dword ptr -18h
.text:00401CF0 var_14          = dword ptr -14h
.text:00401CF0 FileName        = dword ptr  4
.text:00401CF0
.text:00401CF0                 push    ebp
.text:00401CF1                 mov     ecx, 2
.text:00401CF6                 push    edi
.text:00401CF7                 mov     edi, offset dword_401320
.text:00401CFC                 push    esi
.text:00401CFD                 push    ebx
.text:00401CFE                 sub     esp, 1Ch
.text:00401D01                 mov     ebp, [esp+2Ch+FileName]
.text:00401D05                 cld
.text:00401D06                 mov     esi, ebp
.text:00401D08                 repe cmpsb
.text:00401D0A                 jnz     loc_401E50
.text:00401D10                 mov     ds:byte_417000, 1
.text:00401D17                 xor     esi, esi
.text:00401D19                 mov     [esp+2Ch+FileHandle], offset aStandardInput ; "standard input"
.text:00401D20                 call    ds:libintl_gettext
.text:00401D26                 mov     ebp, eax
.text:00401D28
.text:00401D28 loc_401D28:                             ; CODE XREF: sub_401CF0+174↓j
.text:00401D28                 mov     [esp+2Ch+FileHandle], esi ; FileHandle
.text:00401D2B                 call    _isatty
.text:00401D30                 test    eax, eax
.text:00401D32                 jz      loc_401E10
.text:00401D38
.text:00401D38 loc_401D38:                             ; CODE XREF: sub_401CF0+13E↓j
.text:00401D38                                         ; sub_401CF0+158↓j
.text:00401D38                 mov     [esp+2Ch+Origin], 2 ; Origin
.text:00401D40                 mov     dword ptr [esp+2Ch+Offset], 0 ; Offset
.text:00401D48                 mov     dword ptr [esp+2Ch+Offset+4], 0
.text:00401D50                 mov     [esp+2Ch+FileHandle], esi ; FileHandle
.text:00401D53                 call    _lseeki64
.text:00401D58                 test    edx, edx
.text:00401D5A                 js      short loc_401DC7
.text:00401D5C                 mov     dword ptr [esp+2Ch+Offset], ebp ; char *
.text:00401D60                 mov     [esp+2Ch+FileHandle], esi ; int
.text:00401D63                 call    sub_401F00
.text:00401D68                 test    al, al
.text:00401D6A                 setnz   bl
.text:00401D6D
.text:00401D6D loc_401D6D:                             ; CODE XREF: sub_401CF0+F7↓j
.text:00401D6D                                         ; sub_401CF0+112↓j ...
.text:00401D6D                 test    esi, esi
.text:00401D6F                 jnz     short loc_401D80
.text:00401D71
.text:00401D71 loc_401D71:                             ; CODE XREF: sub_401CF0+99↓j
.text:00401D71                                         ; sub_401CF0+D5↓j
.text:00401D71                 movzx   eax, bl
.text:00401D74
.text:00401D74 loc_401D74:                             ; CODE XREF: sub_401CF0+1B4↓j
.text:00401D74                 add     esp, 1Ch
.text:00401D77                 pop     ebx
.text:00401D78                 pop     esi
.text:00401D79                 pop     edi
.text:00401D7A                 pop     ebp
.text:00401D7B                 retn
.text:00401D7B ; ---------------------------------------------------------------------------
.text:00401D7C                 align 10h
.text:00401D80
.text:00401D80 loc_401D80:                             ; CODE XREF: sub_401CF0+7F↑j
.text:00401D80                 mov     [esp+2Ch+FileHandle], esi ; FileHandle
.text:00401D83                 call    _close
.text:00401D88                 inc     eax
.text:00401D89                 jnz     short loc_401D71
.text:00401D8B                 mov     [esp+2Ch+FileHandle], ebp ; char *
.text:00401D8E                 call    sub_403A30
.text:00401D93                 mov     [esp+2Ch+FileHandle], offset aSReadError ; "%s: read error"
.text:00401D9A                 mov     ebx, eax
.text:00401D9C                 call    ds:libintl_gettext
.text:00401DA2                 mov     ebp, eax
.text:00401DA4                 call    _errno
.text:00401DA9                 mov     [esp+2Ch+Origin], ebx ; char
.text:00401DAD                 xor     ebx, ebx
.text:00401DAF                 mov     dword ptr [esp+2Ch+Offset+4], ebp ; char *
.text:00401DB3                 mov     esi, [eax]
.text:00401DB5                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:00401DBC                 mov     dword ptr [esp+2Ch+Offset], esi ; ErrorMessage
.text:00401DC0                 call    sub_40C480
.text:00401DC5                 jmp     short loc_401D71
.text:00401DC7 ; ---------------------------------------------------------------------------
.text:00401DC7
.text:00401DC7 loc_401DC7:                             ; CODE XREF: sub_401CF0+6A↑j
.text:00401DC7                 mov     [esp+2Ch+Origin], ebp ; char *
.text:00401DCB                 lea     ecx, [esp+2Ch+var_14]
.text:00401DCF                 xor     ebx, ebx
.text:00401DD1                 mov     dword ptr [esp+2Ch+Offset+4], esi ; int
.text:00401DD5                 lea     edx, [esp+2Ch+var_18]
.text:00401DD9                 mov     dword ptr [esp+2Ch+Offset], ecx ; int
.text:00401DDD                 mov     [esp+2Ch+FileHandle], edx ; int
.text:00401DE0                 call    sub_402680
.text:00401DE5                 test    al, al
.text:00401DE7                 jz      short loc_401D6D
.text:00401DE9                 mov     ecx, [esp+2Ch+var_14]
.text:00401DED                 mov     edx, [esp+2Ch+var_18]
.text:00401DF1                 mov     dword ptr [esp+2Ch+Offset], ecx ; char *
.text:00401DF5                 mov     edi, [edx+10h]
.text:00401DF8                 mov     [esp+2Ch+FileHandle], edi ; int
.text:00401DFB                 call    sub_401F00
.text:00401E00                 test    al, al
.text:00401E02                 jz      loc_401D6D
.text:00401E08                 mov     bl, 1
.text:00401E0A                 jmp     loc_401D6D
.text:00401E0A ; ---------------------------------------------------------------------------
.text:00401E0F                 align 10h
.text:00401E10
.text:00401E10 loc_401E10:                             ; CODE XREF: sub_401CF0+42↑j
.text:00401E10                 mov     dword ptr [esp+2Ch+Offset], 8000h ; Mode
.text:00401E18                 mov     [esp+2Ch+FileHandle], esi ; FileHandle
.text:00401E1B                 call    _setmode
.text:00401E20                 mov     [esp+2Ch+FileHandle], 1 ; FileHandle
.text:00401E27                 call    _isatty
.text:00401E2C                 test    eax, eax
.text:00401E2E                 jnz     loc_401D38
.text:00401E34                 mov     dword ptr [esp+2Ch+Offset], 8000h ; Mode
.text:00401E3C                 mov     [esp+2Ch+FileHandle], 1 ; FileHandle
.text:00401E43                 call    _setmode
.text:00401E48                 jmp     loc_401D38
.text:00401E48 ; ---------------------------------------------------------------------------
.text:00401E4D                 align 10h
.text:00401E50
.text:00401E50 loc_401E50:                             ; CODE XREF: sub_401CF0+1A↑j
.text:00401E50                 mov     dword ptr [esp+2Ch+Offset], 0 ; OpenFlag
.text:00401E58                 mov     [esp+2Ch+FileHandle], ebp ; FileName
.text:00401E5B                 call    _open
.text:00401E60                 test    eax, eax
.text:00401E62                 mov     esi, eax
.text:00401E64                 jns     loc_401D28
.text:00401E6A                 mov     [esp+2Ch+FileHandle], ebp ; char *
.text:00401E6D                 call    sub_40C060
.text:00401E72                 mov     [esp+2Ch+FileHandle], offset aCannotOpenSFor ; "cannot open %s for reading"
.text:00401E79                 mov     ebx, eax
.text:00401E7B                 call    ds:libintl_gettext
.text:00401E81                 mov     edi, eax
.text:00401E83                 call    _errno
.text:00401E88                 mov     [esp+2Ch+Origin], ebx ; char
.text:00401E8C                 mov     dword ptr [esp+2Ch+Offset+4], edi ; char *
.text:00401E90                 mov     edx, [eax]
.text:00401E92                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:00401E99                 mov     dword ptr [esp+2Ch+Offset], edx ; ErrorMessage
.text:00401E9D                 call    sub_40C480
.text:00401EA2                 xor     eax, eax
.text:00401EA4                 jmp     loc_401D74
.text:00401EA4 sub_401CF0      endp
.text:00401EA4
.text:00401EA4 ; ---------------------------------------------------------------------------
.text:00401EA9 aSSeekFailed    db '%s: seek failed',0  ; DATA XREF: sub_401F00+3D5↓o
.text:00401EA9                                         ; sub_401F00+6B6↓o
.text:00401EB9                 align 10h
.text:00401EC0 aErrorInRegular db 'error in regular expression search',0
.text:00401EC0                                         ; DATA XREF: sub_401F00:loc_402509↓o
.text:00401EE3 aRecordTooLarge db 'record too large',0 ; DATA XREF: sub_401F00:loc_402547↓o
.text:00401EF4                 align 10h
.text:00401F00
.text:00401F00 ; =============== S U B R O U T I N E =======================================
.text:00401F00
.text:00401F00
.text:00401F00 ; int __cdecl sub_401F00(int, char *)
.text:00401F00 sub_401F00      proc near               ; CODE XREF: sub_401CF0+73↑p
.text:00401F00                                         ; sub_401CF0+10B↑p
.text:00401F00
.text:00401F00 FileHandle      = dword ptr -6Ch
.text:00401F00 Offset          = qword ptr -68h
.text:00401F00 Origin          = dword ptr -60h
.text:00401F00 var_5C          = dword ptr -5Ch
.text:00401F00 var_58          = dword ptr -58h
.text:00401F00 Src             = dword ptr -44h
.text:00401F00 MaxCount        = dword ptr -40h
.text:00401F00 Str2            = dword ptr -3Ch
.text:00401F00 var_36          = byte ptr -36h
.text:00401F00 var_35          = byte ptr -35h
.text:00401F00 var_34          = qword ptr -34h
.text:00401F00 var_2C          = byte ptr -2Ch
.text:00401F00 var_28          = dword ptr -28h
.text:00401F00 var_24          = dword ptr -24h
.text:00401F00 arg_0           = dword ptr  4
.text:00401F00 arg_4           = dword ptr  8
.text:00401F00
.text:00401F00                 push    ebp
.text:00401F01                 push    edi
.text:00401F02                 push    esi
.text:00401F03                 push    ebx
.text:00401F04                 sub     esp, 5Ch
.text:00401F07                 mov     ecx, ds:Str
.text:00401F0D                 mov     [esp+6Ch+var_35], 1
.text:00401F12                 mov     edx, ds:dword_419070
.text:00401F18                 mov     eax, [esp+6Ch+arg_0]
.text:00401F1C                 movzx   ebx, byte ptr [ecx]
.text:00401F1F                 dec     edx
.text:00401F20                 inc     ecx
.text:00401F21                 mov     [esp+6Ch+Str2], ecx
.text:00401F25                 mov     [esp+6Ch+MaxCount], edx
.text:00401F29                 mov     [esp+6Ch+var_36], bl
.text:00401F2D                 mov     [esp+6Ch+Origin], 2 ; Origin
.text:00401F35                 mov     dword ptr [esp+6Ch+Offset], 0 ; Offset
.text:00401F3D                 mov     dword ptr [esp+6Ch+Offset+4], 0
.text:00401F45                 mov     [esp+6Ch+FileHandle], eax ; FileHandle
.text:00401F48                 call    _lseeki64
.text:00401F4D                 mov     dword ptr [esp+6Ch+var_34+4], edx
.text:00401F51                 mov     edx, dword ptr [esp+6Ch+var_34+4]
.text:00401F55                 mov     dword ptr [esp+6Ch+var_34], eax
.text:00401F59                 test    edx, edx
.text:00401F5B                 jle     loc_4025EB
.text:00401F61
.text:00401F61 loc_401F61:                             ; CODE XREF: sub_401F00+702↓j
.text:00401F61                 mov     [esp+6Ch+Origin], 0
.text:00401F69                 mov     edx, ds:dword_419090
.text:00401F6F                 mov     edi, dword ptr [esp+6Ch+var_34+4]
.text:00401F73                 mov     ebp, dword ptr [esp+6Ch+var_34]
.text:00401F77                 mov     dword ptr [esp+6Ch+Offset+4], edx
.text:00401F7B                 mov     dword ptr [esp+6Ch+Offset], edi
.text:00401F7F                 mov     [esp+6Ch+FileHandle], ebp
.text:00401F82                 call    sub_414130
.text:00401F87                 test    eax, eax
.text:00401F89                 mov     edi, eax
.text:00401F8B                 jnz     short loc_401F93
.text:00401F8D                 mov     edi, ds:dword_419090
.text:00401F93
.text:00401F93 loc_401F93:                             ; CODE XREF: sub_401F00+8B↑j
.text:00401F93                 mov     [esp+6Ch+Origin], 0 ; char
.text:00401F9B                 xor     esi, esi
.text:00401F9D                 mov     eax, [esp+6Ch+arg_0]
.text:00401FA1                 sub     dword ptr [esp+6Ch+var_34], edi
.text:00401FA5                 mov     [esp+6Ch+FileHandle], eax ; FileHandle
.text:00401FA8                 mov     ebx, dword ptr [esp+6Ch+var_34]
.text:00401FAC                 sbb     dword ptr [esp+6Ch+var_34+4], esi
.text:00401FB0                 mov     dword ptr [esp+6Ch+Offset], ebx ; Offset
.text:00401FB4                 mov     ecx, dword ptr [esp+6Ch+var_34+4]
.text:00401FB8                 mov     dword ptr [esp+6Ch+Offset+4], ecx
.text:00401FBC                 call    _lseeki64
.text:00401FC1                 test    edx, edx
.text:00401FC3                 js      loc_4025AA
.text:00401FC9
.text:00401FC9 loc_401FC9:                             ; CODE XREF: sub_401F00+6E6↓j
.text:00401FC9                 mov     dword ptr [esp+6Ch+Offset+4], edi
.text:00401FCD                 mov     esi, ds:Buffer
.text:00401FD3                 mov     eax, [esp+6Ch+arg_0]
.text:00401FD7                 mov     dword ptr [esp+6Ch+Offset], esi
.text:00401FDB                 mov     [esp+6Ch+FileHandle], eax
.text:00401FDE                 call    sub_40C3C0
.text:00401FE3                 cmp     eax, edi
.text:00401FE5                 jz      short loc_402030
.text:00401FE7
.text:00401FE7 loc_401FE7:                             ; CODE XREF: sub_401F00+3B4↓j
.text:00401FE7                 mov     esi, [esp+6Ch+arg_4]
.text:00401FEB                 mov     [esp+6Ch+FileHandle], esi ; char *
.text:00401FEE                 call    sub_403A30
.text:00401FF3                 mov     [esp+6Ch+FileHandle], offset aSReadError ; "%s: read error"
.text:00401FFA                 mov     ebx, eax
.text:00401FFC                 call    ds:libintl_gettext
.text:00402002                 mov     edi, eax
.text:00402004                 call    _errno
.text:00402009                 mov     [esp+6Ch+Origin], ebx ; char
.text:0040200D                 mov     dword ptr [esp+6Ch+Offset+4], edi ; char *
.text:00402011                 mov     ebp, [eax]
.text:00402013                 mov     [esp+6Ch+FileHandle], 0 ; Code
.text:0040201A                 mov     dword ptr [esp+6Ch+Offset], ebp ; ErrorMessage
.text:0040201E                 call    sub_40C480
.text:00402023                 xor     eax, eax
.text:00402025
.text:00402025 loc_402025:                             ; CODE XREF: sub_401F00+289↓j
.text:00402025                 add     esp, 5Ch
.text:00402028                 pop     ebx
.text:00402029                 pop     esi
.text:0040202A                 pop     edi
.text:0040202B                 pop     ebp
.text:0040202C                 retn
.text:0040202C ; ---------------------------------------------------------------------------
.text:0040202D                 align 10h
.text:00402030
.text:00402030 loc_402030:                             ; CODE XREF: sub_401F00+E5↑j
.text:00402030                 mov     ebp, ds:Buffer
.text:00402036                 mov     edx, ds:dword_419060
.text:0040203C                 add     ebp, edi
.text:0040203E                 test    edx, edx
.text:00402040                 mov     esi, ebp
.text:00402042                 jz      short loc_402060
.text:00402044                 mov     edi, [esp+6Ch+MaxCount]
.text:00402048                 sub     esi, edi
.text:0040204A
.text:0040204A loc_40204A:                             ; CODE XREF: sub_401F00+3C0↓j
.text:0040204A                                         ; sub_401F00+508↓j
.text:0040204A                 test    edx, edx
.text:0040204C                 jnz     loc_402577
.text:00402052                 lea     esi, [esi+0]
.text:00402059                 lea     edi, [edi+0]
.text:00402060
.text:00402060 loc_402060:                             ; CODE XREF: sub_401F00+142↑j
.text:00402060                                         ; sub_401F00+4F5↓j
.text:00402060                 mov     ecx, ds:Buffer
.text:00402066                 mov     ebx, esi
.text:00402068                 sub     ebx, ecx
.text:0040206A                 cmp     ebx, 80000000h
.text:00402070                 jz      loc_402547
.text:00402076
.text:00402076 loc_402076:                             ; CODE XREF: sub_401F00+672↓j
.text:00402076                 mov     dword ptr [esp+6Ch+Offset+4], ebx
.text:0040207A                 lea     edx, [esp+6Ch+var_2C]
.text:0040207E                 mov     edi, ebx
.text:00402080                 mov     [esp+6Ch+var_58], edx
.text:00402084                 neg     edi
.text:00402086                 lea     edx, [ebx-1]
.text:00402089                 mov     [esp+6Ch+var_5C], edi
.text:0040208D                 mov     [esp+6Ch+Origin], edx ; char
.text:00402091                 mov     dword ptr [esp+6Ch+Offset], ecx
.text:00402095                 mov     [esp+6Ch+FileHandle], offset dword_4190B0
.text:0040209C                 call    sub_406C80
.text:004020A1                 cmp     eax, 0FFFFFFFFh
.text:004020A4                 jz      loc_402539
.text:004020AA                 cmp     eax, 0FFFFFFFEh
.text:004020AD                 jz      loc_402509
.text:004020B3                 mov     esi, [esp+6Ch+var_28]
.text:004020B7                 mov     edx, [esp+6Ch+var_24]
.text:004020BB                 mov     ecx, ds:Buffer
.text:004020C1                 mov     edi, [esi]
.text:004020C3                 mov     ebx, [edx]
.text:004020C5                 lea     esi, [edi+ecx]
.text:004020C8                 sub     ebx, edi
.text:004020CA                 mov     ds:dword_419070, ebx
.text:004020D0
.text:004020D0 loc_4020D0:                             ; CODE XREF: sub_401F00+634↓j
.text:004020D0                                         ; sub_401F00+642↓j
.text:004020D0                 cmp     esi, ecx
.text:004020D2                 jnb     loc_402328
.text:004020D8                 mov     esi, dword ptr [esp+6Ch+var_34+4]
.text:004020DC                 or      esi, dword ptr [esp+6Ch+var_34]
.text:004020E0                 jnz     loc_4021BD
.text:004020E6                 mov     edx, ds:ElementCount
.text:004020EC                 mov     edi, ebp
.text:004020EE                 mov     ebx, 2000h
.text:004020F3                 sub     edi, ecx
.text:004020F5                 mov     esi, ecx
.text:004020F7                 sub     ebx, edx
.text:004020F9                 test    ecx, ecx
.text:004020FB                 jz      loc_40218E
.text:00402101                 jmp     short loc_402110
.text:00402101 ; ---------------------------------------------------------------------------
.text:00402103                 align 10h
.text:00402110
.text:00402110 loc_402110:                             ; CODE XREF: sub_401F00+201↑j
.text:00402110                                         ; sub_401F00+266↓j
.text:00402110                 cmp     edi, ebx
.text:00402112                 jb      short loc_402168
.text:00402114                 mov     dword ptr [esp+6Ch+Offset+4], ebx ; Size
.text:00402118                 lea     ebp, unk_417010[edx]
.text:0040211E                 sub     edi, ebx
.text:00402120                 mov     dword ptr [esp+6Ch+Offset], esi ; Src
.text:00402124                 add     esi, ebx
.text:00402126                 xor     ebx, ebx
.text:00402128                 mov     [esp+6Ch+FileHandle], ebp ; void *
.text:0040212B                 call    memcpy
.text:00402130                 mov     dword ptr [esp+6Ch+Offset+4], 2000h ; ElementCount
.text:00402138                 mov     edx, ds:_iob
.text:0040213E                 mov     dword ptr [esp+6Ch+Offset], 1 ; ElementSize
.text:00402146                 mov     [esp+6Ch+FileHandle], offset unk_417010 ; Buffer
.text:0040214D                 add     edx, 20h ; ' '
.text:00402150                 mov     [esp+6Ch+Origin], edx ; Stream
.text:00402154                 call    fwrite
.text:00402159                 mov     ds:ElementCount, ebx
.text:0040215F                 xor     edx, edx
.text:00402161                 mov     ebx, 2000h
.text:00402166                 jmp     short loc_402110
.text:00402168 ; ---------------------------------------------------------------------------
.text:00402168
.text:00402168 loc_402168:                             ; CODE XREF: sub_401F00+212↑j
.text:00402168                 mov     dword ptr [esp+6Ch+Offset+4], edi ; Size
.text:0040216C                 lea     ecx, unk_417010[edx]
.text:00402172                 mov     dword ptr [esp+6Ch+Offset], esi ; Src
.text:00402176                 mov     [esp+6Ch+FileHandle], ecx ; void *
.text:00402179                 call    memcpy
.text:0040217E                 add     ds:ElementCount, edi
.text:00402184
.text:00402184 loc_402184:                             ; CODE XREF: sub_401F00+2BB↓j
.text:00402184                                         ; sub_401F00+6F1↓j ...
.text:00402184                 mov     eax, 1
.text:00402189                 jmp     loc_402025
.text:0040218E ; ---------------------------------------------------------------------------
.text:0040218E
.text:0040218E loc_40218E:                             ; CODE XREF: sub_401F00+1FB↑j
.text:0040218E                 mov     dword ptr [esp+6Ch+Offset+4], edx ; ElementCount
.text:00402192                 mov     ecx, ds:_iob
.text:00402198                 xor     ebp, ebp
.text:0040219A                 mov     dword ptr [esp+6Ch+Offset], 1 ; ElementSize
.text:004021A2                 mov     [esp+6Ch+FileHandle], offset unk_417010 ; Buffer
.text:004021A9                 add     ecx, 20h ; ' '
.text:004021AC                 mov     [esp+6Ch+Origin], ecx ; Stream
.text:004021B0                 call    fwrite
.text:004021B5                 mov     ds:ElementCount, ebp
.text:004021BB                 jmp     short loc_402184
.text:004021BD ; ---------------------------------------------------------------------------
.text:004021BD
.text:004021BD loc_4021BD:                             ; CODE XREF: sub_401F00+1E0↑j
.text:004021BD                 mov     ebx, ds:dword_419090
.text:004021C3                 mov     edi, ebp
.text:004021C5                 sub     edi, ecx
.text:004021C7                 cmp     edi, ebx
.text:004021C9                 jbe     short loc_402212
.text:004021CB                 mov     esi, ds:dword_419060
.text:004021D1                 test    esi, esi
.text:004021D3                 mov     ebp, esi
.text:004021D5                 jnz     short loc_4021DC
.text:004021D7                 mov     esi, 1
.text:004021DC
.text:004021DC loc_4021DC:                             ; CODE XREF: sub_401F00+2D5↑j
.text:004021DC                 mov     edx, ds:dword_4190A0
.text:004021E2                 lea     eax, [ebx+ebx]
.text:004021E5                 mov     ds:dword_419090, eax
.text:004021EA                 lea     eax, [ebp+ebx*4+2]
.text:004021EE                 cmp     eax, edx
.text:004021F0                 mov     ds:dword_4190A0, eax
.text:004021F5                 jb      loc_402607
.text:004021FB                 mov     dword ptr [esp+6Ch+Offset], eax ; size_t
.text:004021FF                 sub     ecx, esi
.text:00402201                 mov     [esp+6Ch+FileHandle], ecx ; void *
.text:00402204                 call    sub_40C160
.text:00402209                 lea     ebx, [esi+eax]
.text:0040220C                 mov     ds:Buffer, ebx
.text:00402212
.text:00402212 loc_402212:                             ; CODE XREF: sub_401F00+2C9↑j
.text:00402212                 xor     edx, edx
.text:00402214                 mov     eax, ds:dword_419090
.text:00402219                 cmp     dword ptr [esp+6Ch+var_34+4], edx
.text:0040221D                 jl      loc_40230A
.text:00402223                 jg      short loc_40222F
.text:00402225                 cmp     dword ptr [esp+6Ch+var_34], eax
.text:00402229                 jb      loc_40230A
.text:0040222F
.text:0040222F loc_40222F:                             ; CODE XREF: sub_401F00+323↑j
.text:0040222F                 sub     dword ptr [esp+6Ch+var_34], eax
.text:00402233                 sbb     dword ptr [esp+6Ch+var_34+4], edx
.text:00402237
.text:00402237 loc_402237:                             ; CODE XREF: sub_401F00+423↓j
.text:00402237                 mov     [esp+6Ch+Origin], 0 ; Origin
.text:0040223F                 mov     edx, dword ptr [esp+6Ch+var_34]
.text:00402243                 mov     ebp, dword ptr [esp+6Ch+var_34+4]
.text:00402247                 mov     esi, [esp+6Ch+arg_0]
.text:0040224B                 mov     dword ptr [esp+6Ch+Offset], edx ; Offset
.text:0040224F                 mov     dword ptr [esp+6Ch+Offset+4], ebp
.text:00402253                 mov     [esp+6Ch+FileHandle], esi ; FileHandle
.text:00402256                 call    _lseeki64
.text:0040225B                 test    edx, edx
.text:0040225D                 js      short loc_4022C9
.text:0040225F
.text:0040225F loc_40225F:                             ; CODE XREF: sub_401F00+405↓j
.text:0040225F                 mov     dword ptr [esp+6Ch+Offset+4], edi ; Size
.text:00402263                 mov     edx, ds:Buffer
.text:00402269                 mov     eax, ds:dword_419090
.text:0040226E                 mov     dword ptr [esp+6Ch+Offset], edx ; Src
.text:00402272                 add     edx, eax
.text:00402274                 mov     [esp+6Ch+FileHandle], edx ; void *
.text:00402277                 call    memmove
.text:0040227C                 mov     ecx, ds:Buffer
.text:00402282                 mov     edx, ds:dword_419090
.text:00402288                 lea     eax, [edx+ecx]
.text:0040228B                 lea     ebp, [edi+eax]
.text:0040228E                 mov     edi, ds:dword_419060
.text:00402294                 test    edi, edi
.text:00402296                 jz      short loc_4022C5
.text:00402298                 mov     esi, eax
.text:0040229A
.text:0040229A loc_40229A:                             ; CODE XREF: sub_401F00+3C7↓j
.text:0040229A                 mov     dword ptr [esp+6Ch+Offset], ecx
.text:0040229E                 mov     ecx, [esp+6Ch+arg_0]
.text:004022A2                 mov     dword ptr [esp+6Ch+Offset+4], edx
.text:004022A6                 mov     [esp+6Ch+FileHandle], ecx
.text:004022A9                 call    sub_40C3C0
.text:004022AE                 cmp     eax, ds:dword_419090
.text:004022B4                 jnz     loc_401FE7
.text:004022BA                 mov     edx, ds:dword_419060
.text:004022C0                 jmp     loc_40204A
.text:004022C5 ; ---------------------------------------------------------------------------
.text:004022C5
.text:004022C5 loc_4022C5:                             ; CODE XREF: sub_401F00+396↑j
.text:004022C5                 mov     esi, ebp
.text:004022C7                 jmp     short loc_40229A
.text:004022C9 ; ---------------------------------------------------------------------------
.text:004022C9
.text:004022C9 loc_4022C9:                             ; CODE XREF: sub_401F00+35D↑j
.text:004022C9                 mov     esi, [esp+6Ch+arg_4]
.text:004022CD                 mov     [esp+6Ch+FileHandle], esi ; char *
.text:004022D0                 call    sub_403A30
.text:004022D5                 mov     [esp+6Ch+FileHandle], offset aSSeekFailed ; "%s: seek failed"
.text:004022DC                 mov     ebx, eax
.text:004022DE                 call    ds:libintl_gettext
.text:004022E4                 mov     ebp, eax
.text:004022E6                 call    _errno
.text:004022EB                 mov     [esp+6Ch+Origin], ebx ; char
.text:004022EF                 mov     dword ptr [esp+6Ch+Offset+4], ebp ; char *
.text:004022F3                 mov     ecx, [eax]
.text:004022F5                 mov     [esp+6Ch+FileHandle], 0 ; Code
.text:004022FC                 mov     dword ptr [esp+6Ch+Offset], ecx ; ErrorMessage
.text:00402300                 call    sub_40C480
.text:00402305                 jmp     loc_40225F
.text:0040230A ; ---------------------------------------------------------------------------
.text:0040230A
.text:0040230A loc_40230A:                             ; CODE XREF: sub_401F00+31D↑j
.text:0040230A                                         ; sub_401F00+329↑j
.text:0040230A                 mov     dword ptr [esp+6Ch+var_34+4], 0
.text:00402312                 mov     eax, dword ptr [esp+6Ch+var_34]
.text:00402316                 mov     dword ptr [esp+6Ch+var_34], 0
.text:0040231E                 mov     ds:dword_419090, eax
.text:00402323                 jmp     loc_402237
.text:00402328 ; ---------------------------------------------------------------------------
.text:00402328
.text:00402328 loc_402328:                             ; CODE XREF: sub_401F00+1D2↑j
.text:00402328                 cmp     ds:byte_419050, 0
.text:0040232F                 jz      loc_402440
.text:00402335                 mov     edx, ds:dword_419070
.text:0040233B                 add     edx, esi
.text:0040233D                 cmp     [esp+6Ch+var_35], 0
.text:00402342                 mov     [esp+6Ch+Src], edx
.text:00402346                 jz      short loc_402350
.text:00402348                 cmp     edx, ebp
.text:0040234A                 jz      loc_4023E4
.text:00402350
.text:00402350 loc_402350:                             ; CODE XREF: sub_401F00+446↑j
.text:00402350                 mov     edi, [esp+6Ch+Src]
.text:00402354                 mov     ebx, 2000h
.text:00402359                 mov     edx, ds:ElementCount
.text:0040235F                 sub     ebp, edi
.text:00402361                 sub     ebx, edx
.text:00402363                 test    edi, edi
.text:00402365                 jz      loc_40240D
.text:0040236B                 nop
.text:0040236C                 lea     esi, [esi+0]
.text:00402370
.text:00402370 loc_402370:                             ; CODE XREF: sub_401F00+4C6↓j
.text:00402370                 cmp     ebp, ebx
.text:00402372                 jb      short loc_4023C8
.text:00402374                 mov     dword ptr [esp+6Ch+Offset+4], ebx ; Size
.text:00402378                 lea     ecx, unk_417010[edx]
.text:0040237E                 sub     ebp, ebx
.text:00402380                 mov     dword ptr [esp+6Ch+Offset], edi ; Src
.text:00402384                 add     edi, ebx
.text:00402386                 xor     ebx, ebx
.text:00402388                 mov     [esp+6Ch+FileHandle], ecx ; void *
.text:0040238B                 call    memcpy
.text:00402390                 mov     dword ptr [esp+6Ch+Offset+4], 2000h ; ElementCount
.text:00402398                 mov     edx, ds:_iob
.text:0040239E                 mov     dword ptr [esp+6Ch+Offset], 1 ; ElementSize
.text:004023A6                 mov     [esp+6Ch+FileHandle], offset unk_417010 ; Buffer
.text:004023AD                 add     edx, 20h ; ' '
.text:004023B0                 mov     [esp+6Ch+Origin], edx ; Stream
.text:004023B4                 call    fwrite
.text:004023B9                 mov     ds:ElementCount, ebx
.text:004023BF                 xor     edx, edx
.text:004023C1                 mov     ebx, 2000h
.text:004023C6                 jmp     short loc_402370
.text:004023C8 ; ---------------------------------------------------------------------------
.text:004023C8
.text:004023C8 loc_4023C8:                             ; CODE XREF: sub_401F00+472↑j
.text:004023C8                 mov     dword ptr [esp+6Ch+Offset+4], ebp ; Size
.text:004023CC                 lea     ebx, unk_417010[edx]
.text:004023D2                 mov     dword ptr [esp+6Ch+Offset], edi ; Src
.text:004023D6                 mov     [esp+6Ch+FileHandle], ebx ; void *
.text:004023D9                 call    memcpy
.text:004023DE                 add     ds:ElementCount, ebp
.text:004023E4
.text:004023E4 loc_4023E4:                             ; CODE XREF: sub_401F00+44A↑j
.text:004023E4                                         ; sub_401F00+53A↓j
.text:004023E4                 mov     [esp+6Ch+var_35], 0
.text:004023E9                 mov     ebp, [esp+6Ch+Src]
.text:004023ED
.text:004023ED loc_4023ED:                             ; CODE XREF: sub_401F00+5D6↓j
.text:004023ED                 mov     edx, ds:dword_419060
.text:004023F3                 test    edx, edx
.text:004023F5                 jz      loc_402060
.text:004023FB                 mov     edi, esi
.text:004023FD                 mov     esi, ds:dword_419070
.text:00402403                 sub     edi, esi
.text:00402405                 lea     esi, [edi+1]
.text:00402408                 jmp     loc_40204A
.text:0040240D ; ---------------------------------------------------------------------------
.text:0040240D
.text:0040240D loc_40240D:                             ; CODE XREF: sub_401F00+465↑j
.text:0040240D                 mov     dword ptr [esp+6Ch+Offset+4], edx ; ElementCount
.text:00402411                 mov     ecx, ds:_iob
.text:00402417                 mov     dword ptr [esp+6Ch+Offset], 1 ; ElementSize
.text:0040241F                 mov     [esp+6Ch+FileHandle], offset unk_417010 ; Buffer
.text:00402426                 add     ecx, 20h ; ' '
.text:00402429                 mov     [esp+6Ch+Origin], ecx ; Stream
.text:0040242D                 call    fwrite
.text:00402432                 xor     edx, edx
.text:00402434                 mov     ds:ElementCount, edx
.text:0040243A                 jmp     short loc_4023E4
.text:0040243A ; ---------------------------------------------------------------------------
.text:0040243C                 align 10h
.text:00402440
.text:00402440 loc_402440:                             ; CODE XREF: sub_401F00+42F↑j
.text:00402440                 mov     edx, ds:ElementCount
.text:00402446                 mov     ebx, 2000h
.text:0040244B                 sub     ebp, esi
.text:0040244D                 mov     edi, esi
.text:0040244F                 sub     ebx, edx
.text:00402451                 test    esi, esi
.text:00402453                 jz      loc_4024DB
.text:00402459                 lea     esi, [esi+0]
.text:00402460
.text:00402460 loc_402460:                             ; CODE XREF: sub_401F00+5B6↓j
.text:00402460                 cmp     ebp, ebx
.text:00402462                 jb      short loc_4024B8
.text:00402464                 mov     dword ptr [esp+6Ch+Offset+4], ebx ; Size
.text:00402468                 lea     ecx, unk_417010[edx]
.text:0040246E                 sub     ebp, ebx
.text:00402470                 mov     [esp+6Ch+FileHandle], ecx ; void *
.text:00402473                 mov     dword ptr [esp+6Ch+Offset], edi ; Src
.text:00402477                 add     edi, ebx
.text:00402479                 mov     ebx, 2000h
.text:0040247E                 call    memcpy
.text:00402483                 mov     dword ptr [esp+6Ch+Offset+4], 2000h ; ElementCount
.text:0040248B                 mov     edx, ds:_iob
.text:00402491                 mov     dword ptr [esp+6Ch+Offset], 1 ; ElementSize
.text:00402499                 mov     [esp+6Ch+FileHandle], offset unk_417010 ; Buffer
.text:004024A0                 add     edx, 20h ; ' '
.text:004024A3                 mov     [esp+6Ch+Origin], edx ; Stream
.text:004024A7                 call    fwrite
.text:004024AC                 xor     ecx, ecx
.text:004024AE                 xor     edx, edx
.text:004024B0                 mov     ds:ElementCount, ecx
.text:004024B6                 jmp     short loc_402460
.text:004024B8 ; ---------------------------------------------------------------------------
.text:004024B8
.text:004024B8 loc_4024B8:                             ; CODE XREF: sub_401F00+562↑j
.text:004024B8                 mov     dword ptr [esp+6Ch+Offset+4], ebp ; Size
.text:004024BC                 lea     ebx, unk_417010[edx]
.text:004024C2                 mov     dword ptr [esp+6Ch+Offset], edi ; Src
.text:004024C6                 mov     [esp+6Ch+FileHandle], ebx ; void *
.text:004024C9                 call    memcpy
.text:004024CE                 add     ds:ElementCount, ebp
.text:004024D4
.text:004024D4 loc_4024D4:                             ; CODE XREF: sub_401F00+607↓j
.text:004024D4                 mov     ebp, esi
.text:004024D6                 jmp     loc_4023ED
.text:004024DB ; ---------------------------------------------------------------------------
.text:004024DB
.text:004024DB loc_4024DB:                             ; CODE XREF: sub_401F00+553↑j
.text:004024DB                 mov     dword ptr [esp+6Ch+Offset+4], edx ; ElementCount
.text:004024DF                 mov     ebp, ds:_iob
.text:004024E5                 mov     dword ptr [esp+6Ch+Offset], 1 ; ElementSize
.text:004024ED                 mov     [esp+6Ch+FileHandle], offset unk_417010 ; Buffer
.text:004024F4                 add     ebp, 20h ; ' '
.text:004024F7                 mov     [esp+6Ch+Origin], ebp ; Stream
.text:004024FB                 call    fwrite
.text:00402500                 xor     eax, eax
.text:00402502                 mov     ds:ElementCount, eax
.text:00402507                 jmp     short loc_4024D4
.text:00402509 ; ---------------------------------------------------------------------------
.text:00402509
.text:00402509 loc_402509:                             ; CODE XREF: sub_401F00+1AD↑j
.text:00402509                 mov     [esp+6Ch+FileHandle], offset aErrorInRegular ; "error in regular expression search"
.text:00402510                 call    ds:libintl_gettext
.text:00402516                 mov     dword ptr [esp+6Ch+Offset], 0 ; ErrorMessage
.text:0040251E                 mov     [esp+6Ch+FileHandle], 1 ; Code
.text:00402525                 mov     dword ptr [esp+6Ch+Offset+4], eax ; char *
.text:00402529                 call    sub_40C480
.text:0040252E
.text:0040252E loc_40252E:                             ; CODE XREF: sub_401F00+687↓j
.text:0040252E                                         ; sub_401F00+6A8↓j
.text:0040252E                 mov     ecx, ds:Buffer
.text:00402534                 jmp     loc_4020D0
.text:00402539 ; ---------------------------------------------------------------------------
.text:00402539
.text:00402539 loc_402539:                             ; CODE XREF: sub_401F00+1A4↑j
.text:00402539                 mov     ecx, ds:Buffer
.text:0040253F                 lea     esi, [ecx-1]
.text:00402542                 jmp     loc_4020D0
.text:00402547 ; ---------------------------------------------------------------------------
.text:00402547
.text:00402547 loc_402547:                             ; CODE XREF: sub_401F00+170↑j
.text:00402547                 mov     [esp+6Ch+FileHandle], offset aRecordTooLarge ; "record too large"
.text:0040254E                 call    ds:libintl_gettext
.text:00402554                 mov     dword ptr [esp+6Ch+Offset], 0 ; ErrorMessage
.text:0040255C                 mov     [esp+6Ch+FileHandle], 1 ; Code
.text:00402563                 mov     dword ptr [esp+6Ch+Offset+4], eax ; char *
.text:00402567                 call    sub_40C480
.text:0040256C                 mov     ecx, ds:Buffer
.text:00402572                 jmp     loc_402076
.text:00402577 ; ---------------------------------------------------------------------------
.text:00402577
.text:00402577 loc_402577:                             ; CODE XREF: sub_401F00+14C↑j
.text:00402577                                         ; sub_401F00+67F↓j ...
.text:00402577                 movzx   ecx, [esp+6Ch+var_36]
.text:0040257C                 dec     esi
.text:0040257D                 cmp     [esi], cl
.text:0040257F                 jnz     short loc_402577
.text:00402581                 mov     ebx, [esp+6Ch+MaxCount]
.text:00402585                 test    ebx, ebx
.text:00402587                 jz      short loc_40252E
.text:00402589                 mov     edx, [esp+6Ch+MaxCount]
.text:0040258D                 lea     edi, [esi+1]
.text:00402590                 mov     eax, [esp+6Ch+Str2]
.text:00402594                 mov     [esp+6Ch+FileHandle], edi ; Str1
.text:00402597                 mov     dword ptr [esp+6Ch+Offset+4], edx ; MaxCount
.text:0040259B                 mov     dword ptr [esp+6Ch+Offset], eax ; Str2
.text:0040259F                 call    strncmp
.text:004025A4                 test    eax, eax
.text:004025A6                 jnz     short loc_402577
.text:004025A8                 jmp     short loc_40252E
.text:004025AA ; ---------------------------------------------------------------------------
.text:004025AA
.text:004025AA loc_4025AA:                             ; CODE XREF: sub_401F00+C3↑j
.text:004025AA                 mov     ecx, [esp+6Ch+arg_4]
.text:004025AE                 mov     [esp+6Ch+FileHandle], ecx ; char *
.text:004025B1                 call    sub_403A30
.text:004025B6                 mov     [esp+6Ch+FileHandle], offset aSSeekFailed ; "%s: seek failed"
.text:004025BD                 mov     ebx, eax
.text:004025BF                 call    ds:libintl_gettext
.text:004025C5                 mov     ebp, eax
.text:004025C7                 call    _errno
.text:004025CC                 mov     [esp+6Ch+Origin], ebx ; char
.text:004025D0                 mov     dword ptr [esp+6Ch+Offset+4], ebp ; char *
.text:004025D4                 mov     edx, [eax]
.text:004025D6                 mov     [esp+6Ch+FileHandle], 0 ; Code
.text:004025DD                 mov     dword ptr [esp+6Ch+Offset], edx ; ErrorMessage
.text:004025E1                 call    sub_40C480
.text:004025E6                 jmp     loc_401FC9
.text:004025EB ; ---------------------------------------------------------------------------
.text:004025EB
.text:004025EB loc_4025EB:                             ; CODE XREF: sub_401F00+5B↑j
.text:004025EB                 mov     esi, dword ptr [esp+6Ch+var_34+4]
.text:004025EF                 test    esi, esi
.text:004025F1                 js      loc_402184
.text:004025F7                 cmp     dword ptr [esp+6Ch+var_34], 0
.text:004025FC                 jbe     loc_402184
.text:00402602                 jmp     loc_401F61
.text:00402607 ; ---------------------------------------------------------------------------
.text:00402607
.text:00402607 loc_402607:                             ; CODE XREF: sub_401F00+2F5↑j
.text:00402607                 call    sub_40C380
.text:00402607 sub_401F00      endp
.text:00402607
.text:00402607 ; ---------------------------------------------------------------------------
.text:0040260C ; const char Format[3]
.text:0040260C Format          db 'w+',0               ; DATA XREF: sub_402680+28↓o
.text:0040260F aSWriteError    db '%s: write error',0
.text:0040261F aCannotOpenSFor_0 db 'cannot open %s for writing',0
.text:0040261F                                         ; DATA XREF: sub_402680+168↓o
.text:0040263A                 align 10h
.text:00402640 aCannotCreateTe db 'cannot create temporary file %s',0
.text:00402640                                         ; DATA XREF: sub_402680+1B5↓o
.text:00402660 ; const char VarName[]
.text:00402660 VarName         db 'TMPDIR',0           ; DATA XREF: sub_402680:loc_40286A↓o
.text:00402667 aTmp            db '/tmp',0             ; DATA XREF: sub_402680+1FF↓o
.text:0040266C ; const char aSTacxxxxxx[]
.text:0040266C aSTacxxxxxx     db '%s/tacXXXXXX',0     ; DATA XREF: sub_402680+22D↓o
.text:00402679                 align 10h
.text:00402680
.text:00402680 ; =============== S U B R O U T I N E =======================================
.text:00402680
.text:00402680
.text:00402680 ; int __cdecl sub_402680(int, int, int, char *)
.text:00402680 sub_402680      proc near               ; CODE XREF: sub_401CF0+F0↑p
.text:00402680
.text:00402680 FileHandle      = dword ptr -2Ch
.text:00402680 Format          = dword ptr -28h
.text:00402680 ElementCount    = dword ptr -24h
.text:00402680 Stream          = dword ptr -20h
.text:00402680 arg_0           = dword ptr  4
.text:00402680 arg_4           = dword ptr  8
.text:00402680 arg_8           = dword ptr  0Ch
.text:00402680 arg_C           = dword ptr  10h
.text:00402680
.text:00402680                 push    ebp
.text:00402681                 push    edi
.text:00402682                 push    esi
.text:00402683                 push    ebx
.text:00402684                 sub     esp, 1Ch
.text:00402687                 mov     esi, ds:dword_419020
.text:0040268D                 test    esi, esi
.text:0040268F                 jz      loc_40286A
.text:00402695
.text:00402695 loc_402695:                             ; CODE XREF: sub_402680+247↓j
.text:00402695                 mov     [esp+2Ch+FileHandle], esi ; char *
.text:00402698                 call    sub_40C7D0
.text:0040269D                 cmp     eax, 0FFFFFFFFh
.text:004026A0                 mov     edi, eax
.text:004026A2                 jz      loc_40282D
.text:004026A8                 mov     [esp+2Ch+Format], offset Format ; "w+"
.text:004026B0                 mov     [esp+2Ch+FileHandle], eax ; FileHandle
.text:004026B3                 call    _fdopen
.text:004026B8                 test    eax, eax
.text:004026BA                 mov     ebp, eax
.text:004026BC                 jz      loc_4027E0
.text:004026C2                 mov     edi, ds:dword_4190D0
.text:004026C8                 test    edi, edi
.text:004026CA                 jz      loc_4027C4
.text:004026D0
.text:004026D0 loc_4026D0:                             ; CODE XREF: sub_402680+9F↓j
.text:004026D0                                         ; sub_402680+15B↓j
.text:004026D0                 mov     ebx, ds:Buffer
.text:004026D6                 mov     edx, ds:dword_419090
.text:004026DC                 mov     ecx, [esp+2Ch+arg_8]
.text:004026E0                 mov     [esp+2Ch+Format], ebx
.text:004026E4                 mov     [esp+2Ch+ElementCount], edx
.text:004026E8                 mov     [esp+2Ch+FileHandle], ecx
.text:004026EB                 call    sub_40C3C0
.text:004026F0                 test    eax, eax
.text:004026F2                 mov     ebx, eax
.text:004026F4                 jz      loc_402780
.text:004026FA                 cmp     eax, 0FFFFFFFFh
.text:004026FD                 jz      short loc_40276B
.text:004026FF                 mov     [esp+2Ch+Stream], ebp ; Stream
.text:00402703                 mov     edi, ds:Buffer
.text:00402709                 mov     [esp+2Ch+ElementCount], eax ; ElementCount
.text:0040270D                 mov     [esp+2Ch+Format], 1 ; ElementSize
.text:00402715                 mov     [esp+2Ch+FileHandle], edi ; Buffer
.text:00402718                 call    fwrite
.text:0040271D                 cmp     eax, ebx
.text:0040271F                 jz      short loc_4026D0
.text:00402721
.text:00402721 loc_402721:                             ; CODE XREF: sub_402680+10A↓j
.text:00402721                 mov     [esp+2Ch+FileHandle], esi ; char *
.text:00402724                 call    sub_403A30
.text:00402729                 mov     [esp+2Ch+FileHandle], 40260Fh
.text:00402730
.text:00402730 loc_402730:                             ; CODE XREF: sub_402680+FE↓j
.text:00402730                 mov     edi, eax
.text:00402732                 call    ds:libintl_gettext
.text:00402738                 mov     esi, eax
.text:0040273A                 call    _errno
.text:0040273F                 mov     [esp+2Ch+Stream], edi ; char
.text:00402743                 mov     [esp+2Ch+ElementCount], esi ; char *
.text:00402747                 mov     edi, [eax]
.text:00402749                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:00402750                 mov     [esp+2Ch+Format], edi ; ErrorMessage
.text:00402754                 call    sub_40C480
.text:00402759                 mov     [esp+2Ch+FileHandle], ebp ; Stream
.text:0040275C                 call    fclose
.text:00402761
.text:00402761 loc_402761:                             ; CODE XREF: sub_402680+1A8↓j
.text:00402761                                         ; sub_402680+1E5↓j
.text:00402761                 xor     eax, eax
.text:00402763
.text:00402763 loc_402763:                             ; CODE XREF: sub_402680+12D↓j
.text:00402763                 add     esp, 1Ch
.text:00402766                 pop     ebx
.text:00402767                 pop     esi
.text:00402768                 pop     edi
.text:00402769                 pop     ebp
.text:0040276A                 retn
.text:0040276B ; ---------------------------------------------------------------------------
.text:0040276B
.text:0040276B loc_40276B:                             ; CODE XREF: sub_402680+7D↑j
.text:0040276B                 mov     esi, [esp+2Ch+arg_C]
.text:0040276F                 mov     [esp+2Ch+FileHandle], esi ; char *
.text:00402772                 call    sub_403A30
.text:00402777                 mov     [esp+2Ch+FileHandle], offset aSReadError ; "%s: read error"
.text:0040277E                 jmp     short loc_402730
.text:00402780 ; ---------------------------------------------------------------------------
.text:00402780
.text:00402780 loc_402780:                             ; CODE XREF: sub_402680+74↑j
.text:00402780                 mov     [esp+2Ch+FileHandle], ebp ; Stream
.text:00402783                 call    fflush
.text:00402788                 test    eax, eax
.text:0040278A                 jnz     short loc_402721
.text:0040278C                 mov     ecx, [ebp+10h]
.text:0040278F                 mov     [esp+2Ch+FileHandle], ecx ; FileHandle
.text:00402792                 call    _isatty
.text:00402797                 test    eax, eax
.text:00402799                 jz      short loc_4027AF
.text:0040279B
.text:0040279B loc_40279B:                             ; CODE XREF: sub_402680+142↓j
.text:0040279B                 mov     edx, [esp+2Ch+arg_0]
.text:0040279F                 mov     eax, 1
.text:004027A4                 mov     [edx], ebp
.text:004027A6                 mov     ebp, [esp+2Ch+arg_4]
.text:004027AA                 mov     [ebp+0], esi
.text:004027AD                 jmp     short loc_402763
.text:004027AF ; ---------------------------------------------------------------------------
.text:004027AF
.text:004027AF loc_4027AF:                             ; CODE XREF: sub_402680+119↑j
.text:004027AF                 mov     [esp+2Ch+Format], 8000h ; Mode
.text:004027B7                 mov     ebx, [ebp+10h]
.text:004027BA                 mov     [esp+2Ch+FileHandle], ebx ; FileHandle
.text:004027BD                 call    _setmode
.text:004027C2                 jmp     short loc_40279B
.text:004027C4 ; ---------------------------------------------------------------------------
.text:004027C4
.text:004027C4 loc_4027C4:                             ; CODE XREF: sub_402680+4A↑j
.text:004027C4                 mov     ds:dword_4190D0, esi
.text:004027CA                 mov     ds:Stream, eax
.text:004027CF                 mov     [esp+2Ch+FileHandle], offset sub_4028D0 ; void (__cdecl *)()
.text:004027D6                 call    sub_401040
.text:004027DB                 jmp     loc_4026D0
.text:004027E0 ; ---------------------------------------------------------------------------
.text:004027E0
.text:004027E0 loc_4027E0:                             ; CODE XREF: sub_402680+3C↑j
.text:004027E0                 mov     [esp+2Ch+FileHandle], esi ; char *
.text:004027E3                 call    sub_40C060
.text:004027E8                 mov     [esp+2Ch+FileHandle], offset aCannotOpenSFor_0 ; "cannot open %s for writing"
.text:004027EF                 mov     ebp, eax
.text:004027F1                 call    ds:libintl_gettext
.text:004027F7                 mov     ebx, eax
.text:004027F9                 call    _errno
.text:004027FE                 mov     [esp+2Ch+Stream], ebp ; char
.text:00402802                 mov     [esp+2Ch+ElementCount], ebx ; char *
.text:00402806                 mov     edx, [eax]
.text:00402808                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:0040280F                 mov     [esp+2Ch+Format], edx ; ErrorMessage
.text:00402813                 call    sub_40C480
.text:00402818                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040281B                 call    _close
.text:00402820                 mov     [esp+2Ch+FileHandle], esi ; LPCSTR
.text:00402823                 call    sub_40C720
.text:00402828                 jmp     loc_402761
.text:0040282D ; ---------------------------------------------------------------------------
.text:0040282D
.text:0040282D loc_40282D:                             ; CODE XREF: sub_402680+22↑j
.text:0040282D                 mov     [esp+2Ch+FileHandle], esi ; char *
.text:00402830                 call    sub_40C060
.text:00402835                 mov     [esp+2Ch+FileHandle], offset aCannotCreateTe ; "cannot create temporary file %s"
.text:0040283C                 mov     ebx, eax
.text:0040283E                 call    ds:libintl_gettext
.text:00402844                 mov     ebp, eax
.text:00402846                 call    _errno
.text:0040284B                 mov     [esp+2Ch+Stream], ebx ; char
.text:0040284F                 mov     [esp+2Ch+ElementCount], ebp ; char *
.text:00402853                 mov     esi, [eax]
.text:00402855                 mov     [esp+2Ch+FileHandle], 0 ; Code
.text:0040285C                 mov     [esp+2Ch+Format], esi ; ErrorMessage
.text:00402860                 call    sub_40C480
.text:00402865                 jmp     loc_402761
.text:0040286A ; ---------------------------------------------------------------------------
.text:0040286A
.text:0040286A loc_40286A:                             ; CODE XREF: sub_402680+F↑j
.text:0040286A                 mov     [esp+2Ch+FileHandle], offset VarName ; "TMPDIR"
.text:00402871                 call    getenv
.text:00402876                 mov     ds:dword_419030, eax
.text:0040287B                 test    eax, eax
.text:0040287D                 jnz     short loc_402889
.text:0040287F                 mov     eax, offset aTmp ; "/tmp"
.text:00402884                 mov     ds:dword_419030, eax
.text:00402889
.text:00402889 loc_402889:                             ; CODE XREF: sub_402680+1FD↑j
.text:00402889                 mov     ebx, ds:dword_419030
.text:0040288F                 mov     [esp+2Ch+FileHandle], ebx ; Str
.text:00402892                 call    strlen
.text:00402897                 add     eax, 0Bh
.text:0040289A                 mov     [esp+2Ch+FileHandle], eax ; size_t
.text:0040289D                 call    sub_40C0D0
.text:004028A2                 mov     ds:dword_419020, eax
.text:004028A7                 mov     ecx, ds:dword_419030
.text:004028AD                 mov     [esp+2Ch+Format], offset aSTacxxxxxx ; "%s/tacXXXXXX"
.text:004028B5                 mov     [esp+2Ch+FileHandle], eax ; Buffer
.text:004028B8                 mov     [esp+2Ch+ElementCount], ecx
.text:004028BC                 call    sprintf
.text:004028C1                 mov     esi, ds:dword_419020
.text:004028C7                 jmp     loc_402695
.text:004028C7 sub_402680      endp
.text:004028C7
.text:004028C7 ; ---------------------------------------------------------------------------
.text:004028CC                 align 10h
.text:004028D0
.text:004028D0 ; =============== S U B R O U T I N E =======================================
.text:004028D0
.text:004028D0
.text:004028D0 ; void __cdecl sub_4028D0()
.text:004028D0 sub_4028D0      proc near               ; DATA XREF: sub_402680+14F↑o
.text:004028D0
.text:004028D0 Stream          = dword ptr -0Ch
.text:004028D0
.text:004028D0                 sub     esp, 0Ch
.text:004028D3                 mov     edx, ds:Stream
.text:004028D9                 mov     [esp+0Ch+Stream], edx ; Stream
.text:004028DC                 call    fclose
.text:004028E1                 mov     edx, ds:dword_4190D0
.text:004028E7                 mov     [esp+0Ch+Stream], edx ; LPCSTR
.text:004028EA                 call    sub_40C720
.text:004028EF                 add     esp, 0Ch
.text:004028F2                 retn
.text:004028F2 sub_4028D0      endp
.text:004028F2
.text:004028F2 ; ---------------------------------------------------------------------------
.text:004028F3                 align 10h
.text:00402900 aLiteral        db 'literal',0          ; DATA XREF: .text:00402940↓o
.text:00402908 aShell          db 'shell',0            ; DATA XREF: .text:00402944↓o
.text:0040290E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00402948↓o
.text:0040291B aC              db 'c',0                ; DATA XREF: .text:0040294C↓o
.text:0040291D aEscape         db 'escape',0           ; DATA XREF: .text:00402950↓o
.text:00402924 aLocale         db 'locale',0           ; DATA XREF: .text:00402954↓o
.text:0040292B aClocale        db 'clocale',0          ; DATA XREF: .text:00402958↓o
.text:00402933                 db 8Dh, 0B6h, 4 dup(0)
.text:00402939                 db 8Dh, 0BCh, 27h, 4 dup(0)
.text:00402940                 dd offset aLiteral      ; "literal"
.text:00402944                 dd offset aShell        ; "shell"
.text:00402948                 dd offset aShellAlways  ; "shell-always"
.text:0040294C                 dd offset aC            ; "c"
.text:00402950                 dd offset aEscape       ; "escape"
.text:00402954                 dd offset aLocale       ; "locale"
.text:00402958                 dd offset aClocale      ; "clocale"
.text:0040295C                 dd 2 dup(0)
.text:00402964                 dd 1, 2, 3, 4, 5, 6
.text:0040297C asc_40297C:                             ; DATA XREF: sub_402990+7E↓o
.text:0040297C                                         ; sub_402990+A39↓o ...
.text:0040297C                 text "UTF-16LE", '"',27h,'`'
.text:00402982                 align 10h
.text:00402990
.text:00402990 ; =============== S U B R O U T I N E =======================================
.text:00402990
.text:00402990
.text:00402990 ; int __cdecl sub_402990(int, int, char *Str, int, int, int)
.text:00402990 sub_402990      proc near               ; CODE XREF: sub_402990+43A↓p
.text:00402990                                         ; .text:00403553↓p ...
.text:00402990
.text:00402990 C               = dword ptr -4Ch
.text:00402990 Type            = dword ptr -48h
.text:00402990 SizeInBytes     = dword ptr -44h
.text:00402990 State           = dword ptr -40h
.text:00402990 var_3C          = dword ptr -3Ch
.text:00402990 var_38          = dword ptr -38h
.text:00402990 var_34          = dword ptr -34h
.text:00402990 var_30          = dword ptr -30h
.text:00402990 var_29          = byte ptr -29h
.text:00402990 var_28          = dword ptr -28h
.text:00402990 var_22          = byte ptr -22h
.text:00402990 var_21          = byte ptr -21h
.text:00402990 var_20          = dword ptr -20h
.text:00402990 var_1C          = dword ptr -1Ch
.text:00402990 var_18          = mbstate_t ptr -18h
.text:00402990 arg_0           = dword ptr  4
.text:00402990 arg_4           = dword ptr  8
.text:00402990 Str             = dword ptr  0Ch
.text:00402990 arg_C           = dword ptr  10h
.text:00402990 arg_10          = dword ptr  14h
.text:00402990 arg_14          = dword ptr  18h
.text:00402990
.text:00402990                 push    ebp
.text:00402991                 push    edi
.text:00402992                 push    esi
.text:00402993                 push    ebx
.text:00402994                 sub     esp, 3Ch
.text:00402997                 mov     edx, ds:__mb_cur_max
.text:0040299D                 mov     [esp+4Ch+var_34], 0
.text:004029A5                 mov     [esp+4Ch+var_1C], 0
.text:004029AD                 cmp     dword ptr [edx], 1
.text:004029B0                 mov     [esp+4Ch+var_20], 0
.text:004029B8                 mov     [esp+4Ch+var_21], 0
.text:004029BD                 setz    [esp+4Ch+var_22]
.text:004029C2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004029C7                 ja      short def_4029CD ; jumptable 004029CD default case, cases 0,1
.text:004029C9                 mov     edx, [esp+4Ch+arg_10]
.text:004029CD                 jmp     ds:jpt_4029CD[edx*4] ; switch jump
.text:004029CD ; ---------------------------------------------------------------------------
.text:004029D4 jpt_4029CD      dd offset def_4029CD    ; DATA XREF: sub_402990+3D↑r
.text:004029D4                 dd offset def_4029CD    ; jump table for switch statement
.text:004029D4                 dd offset loc_403315
.text:004029D4                 dd offset loc_4029F0
.text:004029D4                 dd offset loc_40333B
.text:004029D4                 dd offset loc_403345
.text:004029D4                 dd offset loc_403345
.text:004029F0 ; ---------------------------------------------------------------------------
.text:004029F0
.text:004029F0 loc_4029F0:                             ; CODE XREF: sub_402990+3D↑j
.text:004029F0                                         ; DATA XREF: sub_402990:jpt_4029CD↑o
.text:004029F0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004029CD case 3
.text:004029F4                 cmp     [esp+4Ch+var_34], eax
.text:004029F8                 jnb     short loc_402A01
.text:004029FA                 mov     ebx, [esp+4Ch+arg_0]
.text:004029FE                 mov     byte ptr [ebx], 22h ; '"'
.text:00402A01
.text:00402A01 loc_402A01:                             ; CODE XREF: sub_402990+68↑j
.text:00402A01                 mov     [esp+4Ch+var_34], 1
.text:00402A09                 mov     [esp+4Ch+var_21], 1
.text:00402A0E                 mov     [esp+4Ch+var_1C], offset asc_40297C ; "\"'`"
.text:00402A16
.text:00402A16 loc_402A16:                             ; CODE XREF: sub_402990+9A6↓j
.text:00402A16                 mov     [esp+4Ch+var_20], 1
.text:00402A1E
.text:00402A1E def_4029CD:                             ; CODE XREF: sub_402990+37↑j
.text:00402A1E                                         ; sub_402990+3D↑j ...
.text:00402A1E                 xor     ebp, ebp        ; jumptable 004029CD default case, cases 0,1
.text:00402A20
.text:00402A20 loc_402A20:                             ; CODE XREF: sub_402990+3DB↓j
.text:00402A20                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00402A25                 jz      loc_403307
.text:00402A2B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00402A2F
.text:00402A2F loc_402A2F:                             ; CODE XREF: sub_402990+980↓j
.text:00402A2F                 jz      loc_40329E
.text:00402A35                 cmp     [esp+4Ch+var_21], 0
.text:00402A3A                 jz      short loc_402A80
.text:00402A3C                 mov     esi, [esp+4Ch+var_20]
.text:00402A40                 test    esi, esi
.text:00402A42                 jz      short loc_402A80
.text:00402A44                 mov     ecx, [esp+4Ch+var_20]
.text:00402A48                 lea     edi, [ecx+ebp]
.text:00402A4B                 cmp     edi, [esp+4Ch+arg_C]
.text:00402A4F                 ja      short loc_402A80
.text:00402A51                 cld
.text:00402A52                 mov     ebx, [esp+4Ch+Str]
.text:00402A56                 mov     edi, [esp+4Ch+var_1C]
.text:00402A5A                 add     ebx, ebp
.text:00402A5C                 mov     esi, ebx
.text:00402A5E                 cmp     ecx, ecx
.text:00402A60                 repe cmpsb
.text:00402A62                 jnz     short loc_402A80
.text:00402A64                 mov     edx, [esp+4Ch+arg_4]
.text:00402A68                 cmp     [esp+4Ch+var_34], edx
.text:00402A6C                 jnb     short loc_402A7A
.text:00402A6E                 mov     ecx, [esp+4Ch+arg_0]
.text:00402A72                 mov     eax, [esp+4Ch+var_34]
.text:00402A76                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00402A7A
.text:00402A7A loc_402A7A:                             ; CODE XREF: sub_402990+DC↑j
.text:00402A7A                 inc     [esp+4Ch+var_34]
.text:00402A7E                 mov     esi, esi
.text:00402A80
.text:00402A80 loc_402A80:                             ; CODE XREF: sub_402990+AA↑j
.text:00402A80                                         ; sub_402990+B2↑j ...
.text:00402A80                 mov     edi, [esp+4Ch+Str]
.text:00402A84                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00402A89                 movzx   eax, bl
.text:00402A8C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00402A8F                 ja      def_402A95      ; jumptable 00402A95 default case, cases 1-6,14-31,64
.text:00402A95                 jmp     ds:jpt_402A95[eax*4] ; switch jump
.text:00402A95 ; ---------------------------------------------------------------------------
.text:00402A9C jpt_402A95      dd offset loc_402C98, offset def_402A95, offset def_402A95
.text:00402A9C                                         ; DATA XREF: sub_402990+105↑r
.text:00402A9C                 dd offset def_402A95, offset def_402A95, offset def_402A95 ; jump table for switch statement
.text:00402A9C                 dd offset def_402A95, offset loc_402D70, offset loc_402D8E
.text:00402A9C                 dd offset loc_402D92, offset loc_402DD7, offset loc_402DDB
.text:00402A9C                 dd offset loc_402DDF, offset loc_402DE3, offset def_402A95
.text:00402A9C                 dd offset def_402A95, offset def_402A95, offset def_402A95
.text:00402A9C                 dd offset def_402A95, offset def_402A95, offset def_402A95
.text:00402A9C                 dd offset def_402A95, offset def_402A95, offset def_402A95
.text:00402A9C                 dd offset def_402A95, offset def_402A95, offset def_402A95
.text:00402A9C                 dd offset def_402A95, offset def_402A95, offset def_402A95
.text:00402A9C                 dd offset def_402A95, offset def_402A95, offset loc_403268
.text:00402A9C                 dd offset loc_403268, offset loc_403268, offset loc_40328A
.text:00402A9C                 dd offset loc_403268, offset def_402E92, offset loc_403268
.text:00402A9C                 dd offset loc_402DE7, offset loc_403268, offset loc_403268
.text:00402A9C                 dd offset loc_403268, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset loc_403268
.text:00402A9C                 dd offset loc_403268, offset loc_403268, offset loc_403268
.text:00402A9C                 dd offset loc_402E4C, offset def_402A95, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset loc_403268, offset loc_403261
.text:00402A9C                 dd offset def_402E92, offset loc_403268, offset def_402E92
.text:00402A9C                 dd offset loc_403268, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset def_402E92, offset def_402E92, offset def_402E92
.text:00402A9C                 dd offset loc_403278, offset loc_403268, offset loc_403278
.text:00402A9C                 dd offset loc_40328A
.text:00402C98 ; ---------------------------------------------------------------------------
.text:00402C98
.text:00402C98 loc_402C98:                             ; CODE XREF: sub_402990+105↑j
.text:00402C98                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:00402C98                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402A95 case 0
.text:00402C9D                 lea     eax, [ebp+1]
.text:00402CA0                 jz      loc_402D50
.text:00402CA6                 mov     esi, [esp+4Ch+arg_4]
.text:00402CAA                 cmp     [esp+4Ch+var_34], esi
.text:00402CAE                 jnb     short loc_402CBC
.text:00402CB0                 mov     eax, [esp+4Ch+arg_0]
.text:00402CB4                 mov     ebx, [esp+4Ch+var_34]
.text:00402CB8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00402CBC
.text:00402CBC loc_402CBC:                             ; CODE XREF: sub_402990+31E↑j
.text:00402CBC                 inc     [esp+4Ch+var_34]
.text:00402CC0                 mov     edx, [esp+4Ch+arg_4]
.text:00402CC4                 cmp     [esp+4Ch+var_34], edx
.text:00402CC8                 jnb     short loc_402CD6
.text:00402CCA                 mov     edi, [esp+4Ch+arg_0]
.text:00402CCE                 mov     ecx, [esp+4Ch+var_34]
.text:00402CD2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00402CD6
.text:00402CD6 loc_402CD6:                             ; CODE XREF: sub_402990+338↑j
.text:00402CD6                 inc     [esp+4Ch+var_34]
.text:00402CDA                 mov     esi, [esp+4Ch+arg_4]
.text:00402CDE                 cmp     [esp+4Ch+var_34], esi
.text:00402CE2                 jnb     short loc_402CF0
.text:00402CE4                 mov     ebx, [esp+4Ch+arg_0]
.text:00402CE8                 mov     eax, [esp+4Ch+var_34]
.text:00402CEC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00402CF0
.text:00402CF0 loc_402CF0:                             ; CODE XREF: sub_402990+352↑j
.text:00402CF0                 inc     [esp+4Ch+var_34]
.text:00402CF4                 mov     bl, 30h ; '0'
.text:00402CF6                 lea     esi, [esi+0]
.text:00402CF9                 lea     edi, [edi+0]
.text:00402D00
.text:00402D00 def_402E92:                             ; CODE XREF: sub_402990+105↑j
.text:00402D00                                         ; sub_402990+463↓j ...
.text:00402D00                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402A95 cases 37,43-58,65-90,93,95,97-122
.text:00402D00                                         ; jumptable 00402E92 default case, cases 34-38,42-44,46,48-59
.text:00402D05                 lea     eax, [ebp+1]
.text:00402D08                 jz      short loc_402D50
.text:00402D0A                 mov     cl, bl
.text:00402D0C                 mov     edi, [esp+4Ch+arg_14]
.text:00402D10                 mov     esi, 1
.text:00402D15                 shr     cl, 5
.text:00402D18                 movzx   edx, cl
.text:00402D1B                 mov     ecx, ebx
.text:00402D1D                 and     ecx, 1Fh
.text:00402D20                 shl     esi, cl
.text:00402D22                 test    [edi+edx*4+4], esi
.text:00402D26                 jz      short loc_402D42
.text:00402D28
.text:00402D28 loc_402D28:                             ; CODE XREF: sub_402990+3FC↓j
.text:00402D28                 mov     edx, [esp+4Ch+arg_4]
.text:00402D2C                 cmp     [esp+4Ch+var_34], edx
.text:00402D30                 jnb     short loc_402D3E
.text:00402D32                 mov     edi, [esp+4Ch+arg_0]
.text:00402D36                 mov     esi, [esp+4Ch+var_34]
.text:00402D3A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00402D3E
.text:00402D3E loc_402D3E:                             ; CODE XREF: sub_402990+3A0↑j
.text:00402D3E                 inc     [esp+4Ch+var_34]
.text:00402D42
.text:00402D42 loc_402D42:                             ; CODE XREF: sub_402990+396↑j
.text:00402D42                 lea     eax, [ebp+1]
.text:00402D45                 lea     esi, [esi+0]
.text:00402D49                 lea     edi, [edi+0]
.text:00402D50
.text:00402D50 loc_402D50:                             ; CODE XREF: sub_402990+310↑j
.text:00402D50                                         ; sub_402990+378↑j ...
.text:00402D50                 mov     ebp, [esp+4Ch+arg_4]
.text:00402D54                 cmp     [esp+4Ch+var_34], ebp
.text:00402D58                 jnb     short loc_402D65
.text:00402D5A                 mov     edx, [esp+4Ch+arg_0]
.text:00402D5E                 mov     ecx, [esp+4Ch+var_34]
.text:00402D62                 mov     [ecx+edx], bl
.text:00402D65
.text:00402D65 loc_402D65:                             ; CODE XREF: sub_402990+3C8↑j
.text:00402D65                 inc     [esp+4Ch+var_34]
.text:00402D69                 mov     ebp, eax
.text:00402D6B                 jmp     loc_402A20
.text:00402D70 ; ---------------------------------------------------------------------------
.text:00402D70
.text:00402D70 loc_402D70:                             ; CODE XREF: sub_402990+105↑j
.text:00402D70                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:00402D70                 mov     dl, 61h ; 'a'   ; jumptable 00402A95 case 7
.text:00402D72                 lea     esi, [esi+0]
.text:00402D79                 lea     edi, [edi+0]
.text:00402D80
.text:00402D80 loc_402D80:                             ; CODE XREF: sub_402990+400↓j
.text:00402D80                                         ; sub_402990+409↓j ...
.text:00402D80                 cmp     [esp+4Ch+var_21], 0
.text:00402D85                 lea     eax, [ebp+1]
.text:00402D88                 jz      short loc_402D50
.text:00402D8A                 mov     bl, dl
.text:00402D8C                 jmp     short loc_402D28
.text:00402D8E ; ---------------------------------------------------------------------------
.text:00402D8E
.text:00402D8E loc_402D8E:                             ; CODE XREF: sub_402990+105↑j
.text:00402D8E                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:00402D8E                 mov     dl, 62h ; 'b'   ; jumptable 00402A95 case 8
.text:00402D90                 jmp     short loc_402D80
.text:00402D92 ; ---------------------------------------------------------------------------
.text:00402D92
.text:00402D92 loc_402D92:                             ; CODE XREF: sub_402990+105↑j
.text:00402D92                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:00402D92                 mov     dl, 74h ; 't'   ; jumptable 00402A95 case 9
.text:00402D94
.text:00402D94 loc_402D94:                             ; CODE XREF: sub_402990+449↓j
.text:00402D94                                         ; sub_402990+455↓j ...
.text:00402D94                 cmp     [esp+4Ch+arg_10], 1
.text:00402D99                 jnz     short loc_402D80
.text:00402D9B
.text:00402D9B loc_402D9B:                             ; CODE XREF: sub_402990+45C↓j
.text:00402D9B                                         ; sub_402990+4C1↓j ...
.text:00402D9B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403162 cases 91,92,94,96,124
.text:00402DA3                 mov     eax, [esp+4Ch+arg_14]
.text:00402DA7                 mov     edx, [esp+4Ch+arg_C]
.text:00402DAB                 mov     ecx, [esp+4Ch+Str]
.text:00402DAF                 mov     ebx, [esp+4Ch+arg_4]
.text:00402DB3                 mov     [esp+4Ch+var_38], eax ; int
.text:00402DB7                 mov     ebp, [esp+4Ch+arg_0]
.text:00402DBB                 mov     [esp+4Ch+State], edx ; int
.text:00402DBF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00402DC3                 mov     [esp+4Ch+Type], ebx ; int
.text:00402DC7                 mov     [esp+4Ch+C], ebp ; int
.text:00402DCA                 call    sub_402990
.text:00402DCF
.text:00402DCF loc_402DCF:                             ; CODE XREF: sub_402990+972↓j
.text:00402DCF                 add     esp, 3Ch
.text:00402DD2                 pop     ebx
.text:00402DD3                 pop     esi
.text:00402DD4                 pop     edi
.text:00402DD5                 pop     ebp
.text:00402DD6                 retn
.text:00402DD7 ; ---------------------------------------------------------------------------
.text:00402DD7
.text:00402DD7 loc_402DD7:                             ; CODE XREF: sub_402990+105↑j
.text:00402DD7                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:00402DD7                 mov     dl, 6Eh ; 'n'   ; jumptable 00402A95 case 10
.text:00402DD9                 jmp     short loc_402D94
.text:00402DDB ; ---------------------------------------------------------------------------
.text:00402DDB
.text:00402DDB loc_402DDB:                             ; CODE XREF: sub_402990+105↑j
.text:00402DDB                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:00402DDB                 mov     dl, 76h ; 'v'   ; jumptable 00402A95 case 11
.text:00402DDD                 jmp     short loc_402D80
.text:00402DDF ; ---------------------------------------------------------------------------
.text:00402DDF
.text:00402DDF loc_402DDF:                             ; CODE XREF: sub_402990+105↑j
.text:00402DDF                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:00402DDF                 mov     dl, 66h ; 'f'   ; jumptable 00402A95 case 12
.text:00402DE1                 jmp     short loc_402D80
.text:00402DE3 ; ---------------------------------------------------------------------------
.text:00402DE3
.text:00402DE3 loc_402DE3:                             ; CODE XREF: sub_402990+105↑j
.text:00402DE3                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:00402DE3                 mov     dl, 72h ; 'r'   ; jumptable 00402A95 case 13
.text:00402DE5                 jmp     short loc_402D94
.text:00402DE7 ; ---------------------------------------------------------------------------
.text:00402DE7
.text:00402DE7 loc_402DE7:                             ; CODE XREF: sub_402990+105↑j
.text:00402DE7                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:00402DE7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402A95 case 39
.text:00402DEC                 jz      short loc_402D9B ; jumptable 00403162 cases 91,92,94,96,124
.text:00402DEE                 cmp     [esp+4Ch+arg_10], 2
.text:00402DF3                 jnz     def_402E92      ; jumptable 00402A95 cases 37,43-58,65-90,93,95,97-122
.text:00402DF3                                         ; jumptable 00402E92 default case, cases 34-38,42-44,46,48-59
.text:00402DF9                 mov     edx, [esp+4Ch+arg_4]
.text:00402DFD                 cmp     [esp+4Ch+var_34], edx
.text:00402E01                 jnb     short loc_402E0F
.text:00402E03                 mov     ecx, [esp+4Ch+arg_0]
.text:00402E07                 mov     edi, [esp+4Ch+var_34]
.text:00402E0B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00402E0F
.text:00402E0F loc_402E0F:                             ; CODE XREF: sub_402990+471↑j
.text:00402E0F                 inc     [esp+4Ch+var_34]
.text:00402E13                 mov     eax, [esp+4Ch+arg_4]
.text:00402E17                 cmp     [esp+4Ch+var_34], eax
.text:00402E1B                 jnb     short loc_402E29
.text:00402E1D                 mov     esi, [esp+4Ch+arg_0]
.text:00402E21                 mov     edx, [esp+4Ch+var_34]
.text:00402E25                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00402E29
.text:00402E29 loc_402E29:                             ; CODE XREF: sub_402990+48B↑j
.text:00402E29                 inc     [esp+4Ch+var_34]
.text:00402E2D                 mov     edi, [esp+4Ch+arg_4]
.text:00402E31                 cmp     [esp+4Ch+var_34], edi
.text:00402E35                 jnb     short loc_402E43
.text:00402E37                 mov     ecx, [esp+4Ch+arg_0]
.text:00402E3B                 mov     eax, [esp+4Ch+var_34]
.text:00402E3F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00402E43
.text:00402E43 loc_402E43:                             ; CODE XREF: sub_402990+4A5↑j
.text:00402E43                                         ; sub_402990+5C4↓j ...
.text:00402E43                 inc     [esp+4Ch+var_34]
.text:00402E47                 jmp     def_402E92      ; jumptable 00402A95 cases 37,43-58,65-90,93,95,97-122
.text:00402E47                                         ; jumptable 00402E92 default case, cases 34-38,42-44,46,48-59
.text:00402E4C ; ---------------------------------------------------------------------------
.text:00402E4C
.text:00402E4C loc_402E4C:                             ; CODE XREF: sub_402990+105↑j
.text:00402E4C                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:00402E4C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402A95 case 63
.text:00402E51                 jz      loc_402D9B      ; jumptable 00403162 cases 91,92,94,96,124
.text:00402E57                 cmp     [esp+4Ch+arg_10], 3
.text:00402E5C                 jnz     def_402E92      ; jumptable 00402A95 cases 37,43-58,65-90,93,95,97-122
.text:00402E5C                                         ; jumptable 00402E92 default case, cases 34-38,42-44,46,48-59
.text:00402E62                 lea     edx, [ebp+2]
.text:00402E65                 cmp     edx, [esp+4Ch+arg_C]
.text:00402E69                 jnb     def_402E92      ; jumptable 00402A95 cases 37,43-58,65-90,93,95,97-122
.text:00402E69                                         ; jumptable 00402E92 default case, cases 34-38,42-44,46,48-59
.text:00402E6F                 mov     esi, [esp+4Ch+Str]
.text:00402E73                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00402E78                 jnz     def_402E92      ; jumptable 00402A95 cases 37,43-58,65-90,93,95,97-122
.text:00402E78                                         ; jumptable 00402E92 default case, cases 34-38,42-44,46,48-59
.text:00402E7E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00402E83                 movsx   eax, cl
.text:00402E86                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00402E89                 cmp     eax, 1Dh
.text:00402E8C                 ja      def_402E92      ; jumptable 00402A95 cases 37,43-58,65-90,93,95,97-122
.text:00402E8C                                         ; jumptable 00402E92 default case, cases 34-38,42-44,46,48-59
.text:00402E92                 jmp     ds:jpt_402E92[eax*4] ; switch jump
.text:00402E92 ; ---------------------------------------------------------------------------
.text:00402E99                 align 4
.text:00402E9C jpt_402E92      dd offset loc_402F14    ; DATA XREF: sub_402990+502↑r
.text:00402E9C                 dd offset def_402E92    ; jump table for switch statement
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset loc_402F14
.text:00402E9C                 dd offset loc_402F14
.text:00402E9C                 dd offset loc_402F14
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset loc_402F14
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset loc_402F14
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset def_402E92
.text:00402E9C                 dd offset loc_402F14
.text:00402E9C                 dd offset loc_402F14
.text:00402E9C                 dd offset loc_402F14
.text:00402F14 ; ---------------------------------------------------------------------------
.text:00402F14
.text:00402F14 loc_402F14:                             ; CODE XREF: sub_402990+502↑j
.text:00402F14                                         ; DATA XREF: sub_402990:jpt_402E92↑o
.text:00402F14                 mov     ebp, edx        ; jumptable 00402E92 cases 33,39-41,45,47,60-62
.text:00402F16                 mov     bl, cl
.text:00402F18                 mov     edx, [esp+4Ch+arg_4]
.text:00402F1C                 cmp     [esp+4Ch+var_34], edx
.text:00402F20                 jnb     short loc_402F2E
.text:00402F22                 mov     ecx, [esp+4Ch+arg_0]
.text:00402F26                 mov     edi, [esp+4Ch+var_34]
.text:00402F2A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00402F2E
.text:00402F2E loc_402F2E:                             ; CODE XREF: sub_402990+590↑j
.text:00402F2E                 inc     [esp+4Ch+var_34]
.text:00402F32                 mov     eax, [esp+4Ch+arg_4]
.text:00402F36                 cmp     [esp+4Ch+var_34], eax
.text:00402F3A                 jnb     short loc_402F48
.text:00402F3C                 mov     edx, [esp+4Ch+arg_0]
.text:00402F40                 mov     esi, [esp+4Ch+var_34]
.text:00402F44                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00402F48
.text:00402F48 loc_402F48:                             ; CODE XREF: sub_402990+5AA↑j
.text:00402F48                 inc     [esp+4Ch+var_34]
.text:00402F4C                 mov     edi, [esp+4Ch+arg_4]
.text:00402F50                 cmp     [esp+4Ch+var_34], edi
.text:00402F54                 jnb     loc_402E43
.text:00402F5A                 mov     eax, [esp+4Ch+arg_0]
.text:00402F5E                 mov     ecx, [esp+4Ch+var_34]
.text:00402F62                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00402F66                 jmp     loc_402E43
.text:00402F66 ; ---------------------------------------------------------------------------
.text:00402F6B                 align 10h
.text:00402F70
.text:00402F70 def_402A95:                             ; CODE XREF: sub_402990+FF↑j
.text:00402F70                                         ; sub_402990+105↑j
.text:00402F70                                         ; DATA XREF: ...
.text:00402F70                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00402A95 default case, cases 1-6,14-31,64
.text:00402F75                 jz      loc_4030A0
.text:00402F7B                 mov     [esp+4Ch+var_28], 1
.text:00402F83                 mov     esi, ds:__mb_cur_max
.text:00402F89                 movzx   edx, bl
.text:00402F8C                 cmp     dword ptr [esi], 1
.text:00402F8F                 jz      loc_403084
.text:00402F95                 mov     [esp+4Ch+Type], 157h ; Type
.text:00402F9D                 mov     [esp+4Ch+C], edx ; C
.text:00402FA0                 call    _isctype
.text:00402FA5
.text:00402FA5 loc_402FA5:                             ; CODE XREF: sub_402990+705↓j
.text:00402FA5                 test    eax, eax
.text:00402FA7                 setnz   [esp+4Ch+var_29]
.text:00402FAC
.text:00402FAC loc_402FAC:                             ; CODE XREF: sub_402990+7A5↓j
.text:00402FAC                 cmp     [esp+4Ch+var_21], 0
.text:00402FB1                 lea     eax, [ebp+1]
.text:00402FB4                 jz      loc_402D50
.text:00402FBA                 cmp     [esp+4Ch+var_29], 0
.text:00402FBF                 jnz     def_402E92      ; jumptable 00402A95 cases 37,43-58,65-90,93,95,97-122
.text:00402FBF                                         ; jumptable 00402E92 default case, cases 34-38,42-44,46,48-59
.text:00402FC5
.text:00402FC5 loc_402FC5:                             ; CODE XREF: sub_402990+7AB↓j
.text:00402FC5                 mov     eax, [esp+4Ch+var_28]
.text:00402FC9                 lea     edx, [eax+ebp]
.text:00402FCC                 lea     esi, [esi+0]
.text:00402FD0
.text:00402FD0 loc_402FD0:                             ; CODE XREF: sub_402990+6EF↓j
.text:00402FD0                 cmp     [esp+4Ch+var_21], 0
.text:00402FD5                 jz      short loc_403050
.text:00402FD7                 cmp     [esp+4Ch+var_29], 0
.text:00402FDC                 jnz     short loc_403050
.text:00402FDE                 mov     edi, [esp+4Ch+arg_4]
.text:00402FE2                 cmp     [esp+4Ch+var_34], edi
.text:00402FE6                 jnb     short loc_402FF4
.text:00402FE8                 mov     esi, [esp+4Ch+arg_0]
.text:00402FEC                 mov     eax, [esp+4Ch+var_34]
.text:00402FF0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00402FF4
.text:00402FF4 loc_402FF4:                             ; CODE XREF: sub_402990+656↑j
.text:00402FF4                 inc     [esp+4Ch+var_34]
.text:00402FF8                 mov     ecx, [esp+4Ch+arg_4]
.text:00402FFC                 cmp     [esp+4Ch+var_34], ecx
.text:00403000                 jnb     short loc_403015
.text:00403002                 mov     cl, bl
.text:00403004                 mov     esi, [esp+4Ch+arg_0]
.text:00403008                 mov     edi, [esp+4Ch+var_34]
.text:0040300C                 shr     cl, 6
.text:0040300F                 add     cl, 30h ; '0'
.text:00403012                 mov     [edi+esi], cl
.text:00403015
.text:00403015 loc_403015:                             ; CODE XREF: sub_402990+670↑j
.text:00403015                 inc     [esp+4Ch+var_34]
.text:00403019                 mov     edi, [esp+4Ch+arg_4]
.text:0040301D                 cmp     [esp+4Ch+var_34], edi
.text:00403021                 jnb     short loc_403039
.text:00403023                 mov     cl, bl
.text:00403025                 mov     esi, [esp+4Ch+arg_0]
.text:00403029                 shr     cl, 3
.text:0040302C                 mov     edi, [esp+4Ch+var_34]
.text:00403030                 and     cl, 7
.text:00403033                 add     cl, 30h ; '0'
.text:00403036                 mov     [edi+esi], cl
.text:00403039
.text:00403039 loc_403039:                             ; CODE XREF: sub_402990+691↑j
.text:00403039                 inc     [esp+4Ch+var_34]
.text:0040303D                 and     bl, 7
.text:00403040                 add     bl, 30h ; '0'
.text:00403043                 lea     esi, [esi+0]
.text:00403049                 lea     edi, [edi+0]
.text:00403050
.text:00403050 loc_403050:                             ; CODE XREF: sub_402990+645↑j
.text:00403050                                         ; sub_402990+64C↑j
.text:00403050                 lea     eax, [ebp+1]
.text:00403053                 cmp     edx, eax
.text:00403055                 jbe     loc_402D50
.text:0040305B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040305F                 cmp     [esp+4Ch+var_34], ebp
.text:00403063                 jnb     short loc_403070
.text:00403065                 mov     ecx, [esp+4Ch+arg_0]
.text:00403069                 mov     edi, [esp+4Ch+var_34]
.text:0040306D                 mov     [edi+ecx], bl
.text:00403070
.text:00403070 loc_403070:                             ; CODE XREF: sub_402990+6D3↑j
.text:00403070                 inc     [esp+4Ch+var_34]
.text:00403074                 mov     ebp, eax
.text:00403076                 mov     eax, [esp+4Ch+Str]
.text:0040307A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040307F                 jmp     loc_402FD0
.text:00403084 ; ---------------------------------------------------------------------------
.text:00403084
.text:00403084 loc_403084:                             ; CODE XREF: sub_402990+5FF↑j
.text:00403084                 mov     ecx, ds:_pctype
.text:0040308A                 mov     edi, [ecx]
.text:0040308C                 movzx   eax, word ptr [edi+edx*2]
.text:00403090                 and     eax, 157h
.text:00403095                 jmp     loc_402FA5
.text:00403095 ; ---------------------------------------------------------------------------
.text:0040309A                 align 10h
.text:004030A0
.text:004030A0 loc_4030A0:                             ; CODE XREF: sub_402990+5E5↑j
.text:004030A0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004030A5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004030AD                 mov     [esp+4Ch+var_28], 0
.text:004030B5                 mov     [esp+4Ch+var_29], 1
.text:004030BA                 jz      loc_40324C
.text:004030C0
.text:004030C0 loc_4030C0:                             ; CODE XREF: sub_402990+8CC↓j
.text:004030C0                 mov     ecx, [esp+4Ch+arg_C]
.text:004030C4                 lea     edx, [esp+4Ch+var_18]
.text:004030C8                 mov     edi, [esp+4Ch+Str]
.text:004030CC                 mov     [esp+4Ch+State], edx ; State
.text:004030D0                 lea     esi, [esp+4Ch+var_18._State]
.text:004030D4                 sub     ecx, ebp
.text:004030D6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004030DA                 add     edi, ebp
.text:004030DC                 mov     [esp+4Ch+var_30], edi
.text:004030E0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004030E4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004030E7                 call    mbrtowc
.text:004030EC                 test    eax, eax
.text:004030EE                 mov     edi, eax
.text:004030F0                 jz      short loc_403130
.text:004030F2                 cmp     eax, 0FFFFFFFFh
.text:004030F5                 jz      loc_403242
.text:004030FB                 cmp     eax, 0FFFFFFFEh
.text:004030FE                 jz      loc_403202
.text:00403104                 cmp     [esp+4Ch+arg_10], 1
.text:00403109                 jz      short loc_403140
.text:0040310B
.text:0040310B loc_40310B:                             ; CODE XREF: sub_402990+7B9↓j
.text:0040310B                                         ; sub_402990+86D↓j
.text:0040310B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403110                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403118                 mov     [esp+4Ch+C], ecx ; C
.text:0040311B                 call    iswctype
.text:00403120                 test    eax, eax
.text:00403122                 jnz     short loc_403129
.text:00403124                 mov     [esp+4Ch+var_29], 0
.text:00403129
.text:00403129 loc_403129:                             ; CODE XREF: sub_402990+792↑j
.text:00403129                 mov     [esp+4Ch+var_28], edi
.text:0040312D                 lea     esi, [esi+0]
.text:00403130
.text:00403130 loc_403130:                             ; CODE XREF: sub_402990+760↑j
.text:00403130                                         ; sub_402990+87B↓j ...
.text:00403130                 cmp     [esp+4Ch+var_28], 1
.text:00403135                 jbe     loc_402FAC
.text:0040313B                 jmp     loc_402FC5
.text:00403140 ; ---------------------------------------------------------------------------
.text:00403140
.text:00403140 loc_403140:                             ; CODE XREF: sub_402990+779↑j
.text:00403140                 cmp     [esp+4Ch+arg_10], eax
.text:00403144                 mov     edx, 1
.text:00403149                 jnb     short loc_40310B
.text:0040314B
.text:0040314B loc_40314B:                             ; CODE XREF: sub_402990+867↓j
.text:0040314B                 mov     ecx, [esp+4Ch+Str]
.text:0040314F                 lea     esi, [edx+ebp]
.text:00403152                 movsx   eax, byte ptr [esi+ecx]
.text:00403156                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403159                 cmp     eax, 21h
.text:0040315C                 ja      def_403162      ; jumptable 00403162 default case, cases 93,95,97-123
.text:00403162                 jmp     ds:jpt_403162[eax*4] ; switch jump
.text:00403162 ; ---------------------------------------------------------------------------
.text:00403169                 align 4
.text:0040316C jpt_403162      dd offset loc_402D9B    ; DATA XREF: sub_402990+7D2↑r
.text:0040316C                 dd offset loc_402D9B    ; jump table for switch statement
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset loc_402D9B
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset loc_402D9B
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset def_403162
.text:0040316C                 dd offset loc_402D9B
.text:004031F4 ; ---------------------------------------------------------------------------
.text:004031F4
.text:004031F4 def_403162:                             ; CODE XREF: sub_402990+7CC↑j
.text:004031F4                                         ; sub_402990+7D2↑j
.text:004031F4                                         ; DATA XREF: ...
.text:004031F4                 inc     edx             ; jumptable 00403162 default case, cases 93,95,97-123
.text:004031F5                 cmp     edx, edi
.text:004031F7                 jb      loc_40314B
.text:004031FD                 jmp     loc_40310B
.text:00403202 ; ---------------------------------------------------------------------------
.text:00403202
.text:00403202 loc_403202:                             ; CODE XREF: sub_402990+76E↑j
.text:00403202                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403206                 mov     [esp+4Ch+var_29], 0
.text:0040320B                 jnb     loc_403130
.text:00403211                 mov     eax, [esp+4Ch+var_30]
.text:00403215                 cmp     byte ptr [eax], 0
.text:00403218                 jz      loc_403130
.text:0040321E
.text:0040321E loc_40321E:                             ; CODE XREF: sub_402990+8AB↓j
.text:0040321E                 inc     [esp+4Ch+var_28]
.text:00403222                 mov     esi, [esp+4Ch+var_28]
.text:00403226                 lea     eax, [esi+ebp]
.text:00403229                 cmp     eax, [esp+4Ch+arg_C]
.text:0040322D                 jnb     loc_403130
.text:00403233                 mov     edi, [esp+4Ch+Str]
.text:00403237                 cmp     byte ptr [eax+edi], 0
.text:0040323B                 jnz     short loc_40321E
.text:0040323D                 jmp     loc_403130
.text:00403242 ; ---------------------------------------------------------------------------
.text:00403242
.text:00403242 loc_403242:                             ; CODE XREF: sub_402990+765↑j
.text:00403242                 mov     [esp+4Ch+var_29], 0
.text:00403247                 jmp     loc_403130
.text:0040324C ; ---------------------------------------------------------------------------
.text:0040324C
.text:0040324C loc_40324C:                             ; CODE XREF: sub_402990+72A↑j
.text:0040324C                 mov     edx, [esp+4Ch+Str]
.text:00403250                 mov     [esp+4Ch+C], edx ; Str
.text:00403253                 call    strlen
.text:00403258                 mov     [esp+4Ch+arg_C], eax
.text:0040325C                 jmp     loc_4030C0
.text:00403261 ; ---------------------------------------------------------------------------
.text:00403261
.text:00403261 loc_403261:                             ; CODE XREF: sub_402990+105↑j
.text:00403261                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:00403261                 mov     dl, bl          ; jumptable 00402A95 case 92
.text:00403263                 jmp     loc_402D94
.text:00403268 ; ---------------------------------------------------------------------------
.text:00403268
.text:00403268 loc_403268:                             ; CODE XREF: sub_402990+105↑j
.text:00403268                                         ; sub_402990+902↓j
.text:00403268                                         ; DATA XREF: ...
.text:00403268                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402A95 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040326D                 jnz     def_402E92      ; jumptable 00402A95 cases 37,43-58,65-90,93,95,97-122
.text:0040326D                                         ; jumptable 00402E92 default case, cases 34-38,42-44,46,48-59
.text:00403273                 jmp     loc_402D9B      ; jumptable 00403162 cases 91,92,94,96,124
.text:00403278 ; ---------------------------------------------------------------------------
.text:00403278
.text:00403278 loc_403278:                             ; CODE XREF: sub_402990+105↑j
.text:00403278                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:00403278                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00402A95 cases 123,125
.text:0040327D                 jz      short loc_403294
.text:0040327F                 cmp     [esp+4Ch+arg_C], 1
.text:00403284
.text:00403284 loc_403284:                             ; CODE XREF: sub_402990+90C↓j
.text:00403284                 jnz     def_402E92      ; jumptable 00402A95 cases 37,43-58,65-90,93,95,97-122
.text:00403284                                         ; jumptable 00402E92 default case, cases 34-38,42-44,46,48-59
.text:0040328A
.text:0040328A loc_40328A:                             ; CODE XREF: sub_402990+105↑j
.text:0040328A                                         ; DATA XREF: sub_402990:jpt_402A95↑o
.text:0040328A                 test    ebp, ebp        ; jumptable 00402A95 cases 35,126
.text:0040328C                 jnz     def_402E92      ; jumptable 00402A95 cases 37,43-58,65-90,93,95,97-122
.text:0040328C                                         ; jumptable 00402E92 default case, cases 34-38,42-44,46,48-59
.text:00403292                 jmp     short loc_403268 ; jumptable 00402A95 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403294 ; ---------------------------------------------------------------------------
.text:00403294
.text:00403294 loc_403294:                             ; CODE XREF: sub_402990+8ED↑j
.text:00403294                 mov     esi, [esp+4Ch+Str]
.text:00403298                 cmp     byte ptr [esi+1], 0
.text:0040329C                 jmp     short loc_403284
.text:0040329E ; ---------------------------------------------------------------------------
.text:0040329E
.text:0040329E loc_40329E:                             ; CODE XREF: sub_402990:loc_402A2F↑j
.text:0040329E                 test    ebp, ebp
.text:004032A0                 jnz     short loc_4032AD
.text:004032A2                 cmp     [esp+4Ch+arg_10], 1
.text:004032A7                 jz      loc_402D9B      ; jumptable 00403162 cases 91,92,94,96,124
.text:004032AD
.text:004032AD loc_4032AD:                             ; CODE XREF: sub_402990+910↑j
.text:004032AD                 mov     esi, [esp+4Ch+var_1C]
.text:004032B1                 test    esi, esi
.text:004032B3                 jz      short loc_4032E8
.text:004032B5                 mov     edi, [esp+4Ch+var_1C]
.text:004032B9                 movzx   eax, byte ptr [edi]
.text:004032BC                 test    al, al
.text:004032BE                 jz      short loc_4032E8
.text:004032C0
.text:004032C0 loc_4032C0:                             ; CODE XREF: sub_402990+956↓j
.text:004032C0                 mov     ebp, [esp+4Ch+arg_4]
.text:004032C4                 cmp     [esp+4Ch+var_34], ebp
.text:004032C8                 jnb     short loc_4032D5
.text:004032CA                 mov     ecx, [esp+4Ch+arg_0]
.text:004032CE                 mov     ebx, [esp+4Ch+var_34]
.text:004032D2                 mov     [ebx+ecx], al
.text:004032D5
.text:004032D5 loc_4032D5:                             ; CODE XREF: sub_402990+938↑j
.text:004032D5                 inc     [esp+4Ch+var_1C]
.text:004032D9                 inc     [esp+4Ch+var_34]
.text:004032DD                 mov     edx, [esp+4Ch+var_1C]
.text:004032E1                 movzx   eax, byte ptr [edx]
.text:004032E4                 test    al, al
.text:004032E6                 jnz     short loc_4032C0
.text:004032E8
.text:004032E8 loc_4032E8:                             ; CODE XREF: sub_402990+923↑j
.text:004032E8                                         ; sub_402990+92E↑j
.text:004032E8                 mov     eax, [esp+4Ch+arg_4]
.text:004032EC                 cmp     [esp+4Ch+var_34], eax
.text:004032F0                 jnb     short loc_4032FE
.text:004032F2                 mov     edi, [esp+4Ch+arg_0]
.text:004032F6                 mov     esi, [esp+4Ch+var_34]
.text:004032FA                 mov     byte ptr [esi+edi], 0
.text:004032FE
.text:004032FE loc_4032FE:                             ; CODE XREF: sub_402990+960↑j
.text:004032FE                 mov     eax, [esp+4Ch+var_34]
.text:00403302                 jmp     loc_402DCF
.text:00403307 ; ---------------------------------------------------------------------------
.text:00403307
.text:00403307 loc_403307:                             ; CODE XREF: sub_402990+95↑j
.text:00403307                 mov     ebx, [esp+4Ch+Str]
.text:0040330B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403310                 jmp     loc_402A2F
.text:00403315 ; ---------------------------------------------------------------------------
.text:00403315
.text:00403315 loc_403315:                             ; CODE XREF: sub_402990+3D↑j
.text:00403315                                         ; DATA XREF: sub_402990:jpt_4029CD↑o
.text:00403315                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004029CD case 2
.text:00403319                 cmp     [esp+4Ch+var_34], edx
.text:0040331D                 jnb     short loc_403326
.text:0040331F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403323                 mov     byte ptr [ecx], 27h ; '''
.text:00403326
.text:00403326 loc_403326:                             ; CODE XREF: sub_402990+98D↑j
.text:00403326                 mov     [esp+4Ch+var_34], 1
.text:0040332E                 mov     [esp+4Ch+var_1C], 40297Eh
.text:00403336                 jmp     loc_402A16
.text:0040333B ; ---------------------------------------------------------------------------
.text:0040333B
.text:0040333B loc_40333B:                             ; CODE XREF: sub_402990+3D↑j
.text:0040333B                                         ; DATA XREF: sub_402990:jpt_4029CD↑o
.text:0040333B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004029CD case 4
.text:00403340                 jmp     def_4029CD      ; jumptable 004029CD default case, cases 0,1
.text:00403345 ; ---------------------------------------------------------------------------
.text:00403345
.text:00403345 loc_403345:                             ; CODE XREF: sub_402990+3D↑j
.text:00403345                                         ; DATA XREF: sub_402990:jpt_4029CD↑o
.text:00403345                 mov     [esp+4Ch+C], 402980h ; jumptable 004029CD cases 5,6
.text:0040334C                 call    ds:libintl_gettext
.text:00403352                 cmp     eax, 402980h
.text:00403357                 mov     edi, eax
.text:00403359                 jz      short loc_4033D0
.text:0040335B
.text:0040335B loc_40335B:                             ; CODE XREF: sub_402990+A45↓j
.text:0040335B                                         ; sub_402990+A4C↓j
.text:0040335B                 mov     [esp+4Ch+C], 40297Eh
.text:00403362                 call    ds:libintl_gettext
.text:00403368                 cmp     eax, 40297Eh
.text:0040336D                 mov     edx, eax
.text:0040336F                 jz      short loc_4033C2
.text:00403371
.text:00403371 loc_403371:                             ; CODE XREF: sub_402990+A37↓j
.text:00403371                                         ; sub_402990+A3E↓j
.text:00403371                 mov     [esp+4Ch+var_1C], edi
.text:00403375                 cmp     byte ptr [edi], 0
.text:00403378                 jz      short loc_4033A8
.text:0040337A
.text:0040337A loc_40337A:                             ; CODE XREF: sub_402990+A16↓j
.text:0040337A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040337E                 cmp     [esp+4Ch+var_34], ecx
.text:00403382                 jnb     short loc_403397
.text:00403384                 mov     ebp, [esp+4Ch+var_1C]
.text:00403388                 mov     edi, [esp+4Ch+arg_0]
.text:0040338C                 mov     esi, [esp+4Ch+var_34]
.text:00403390                 movzx   ebx, byte ptr [ebp+0]
.text:00403394                 mov     [esi+edi], bl
.text:00403397
.text:00403397 loc_403397:                             ; CODE XREF: sub_402990+9F2↑j
.text:00403397                 inc     [esp+4Ch+var_1C]
.text:0040339B                 inc     [esp+4Ch+var_34]
.text:0040339F                 mov     eax, [esp+4Ch+var_1C]
.text:004033A3                 cmp     byte ptr [eax], 0
.text:004033A6                 jnz     short loc_40337A
.text:004033A8
.text:004033A8 loc_4033A8:                             ; CODE XREF: sub_402990+9E8↑j
.text:004033A8                 mov     [esp+4Ch+var_21], 1
.text:004033AD                 mov     [esp+4Ch+var_1C], edx
.text:004033B1                 mov     [esp+4Ch+C], edx ; Str
.text:004033B4                 call    strlen
.text:004033B9                 mov     [esp+4Ch+var_20], eax
.text:004033BD                 jmp     def_4029CD      ; jumptable 004029CD default case, cases 0,1
.text:004033C2 ; ---------------------------------------------------------------------------
.text:004033C2
.text:004033C2 loc_4033C2:                             ; CODE XREF: sub_402990+9DF↑j
.text:004033C2                 cmp     [esp+4Ch+arg_10], 6
.text:004033C7                 jnz     short loc_403371
.text:004033C9                 mov     edx, offset asc_40297C ; "\"'`"
.text:004033CE                 jmp     short loc_403371
.text:004033D0 ; ---------------------------------------------------------------------------
.text:004033D0
.text:004033D0 loc_4033D0:                             ; CODE XREF: sub_402990+9C9↑j
.text:004033D0                 cmp     [esp+4Ch+arg_10], 6
.text:004033D5                 jnz     short loc_40335B
.text:004033D7                 mov     edi, offset asc_40297C ; "\"'`"
.text:004033DC                 jmp     loc_40335B
.text:004033DC sub_402990      endp
.text:004033DC
.text:004033E1 ; ---------------------------------------------------------------------------
.text:004033E1                 jmp     short loc_4033F0
.text:004033E1 ; ---------------------------------------------------------------------------
.text:004033E3                 align 10h
.text:004033F0
.text:004033F0 loc_4033F0:                             ; CODE XREF: .text:004033E1↑j
.text:004033F0                 sub     esp, 0Ch
.text:004033F3                 mov     [esp+4], ebx
.text:004033F7                 mov     [esp+8], esi
.text:004033FB                 call    _errno
.text:00403400                 mov     esi, [eax]
.text:00403402                 mov     dword ptr [esp], 24h ; '$'
.text:00403409                 call    sub_40C0D0
.text:0040340E                 mov     edx, [esp+10h]
.text:00403412                 mov     ebx, eax
.text:00403414                 test    edx, edx
.text:00403416                 jz      short loc_403461
.text:00403418
.text:00403418 loc_403418:                             ; CODE XREF: .text:00403466↓j
.text:00403418                 mov     ecx, [edx]
.text:0040341A                 mov     [ebx], ecx
.text:0040341C                 mov     ecx, [edx+4]
.text:0040341F                 mov     [ebx+4], ecx
.text:00403422                 mov     ecx, [edx+8]
.text:00403425                 mov     [ebx+8], ecx
.text:00403428                 mov     ecx, [edx+0Ch]
.text:0040342B                 mov     [ebx+0Ch], ecx
.text:0040342E                 mov     ecx, [edx+10h]
.text:00403431                 mov     [ebx+10h], ecx
.text:00403434                 mov     ecx, [edx+14h]
.text:00403437                 mov     [ebx+14h], ecx
.text:0040343A                 mov     ecx, [edx+18h]
.text:0040343D                 mov     [ebx+18h], ecx
.text:00403440                 mov     ecx, [edx+1Ch]
.text:00403443                 mov     [ebx+1Ch], ecx
.text:00403446                 mov     ecx, [edx+20h]
.text:00403449                 mov     [ebx+20h], ecx
.text:0040344C                 call    _errno
.text:00403451                 mov     [eax], esi
.text:00403453                 mov     esi, [esp+8]
.text:00403457                 mov     eax, ebx
.text:00403459                 mov     ebx, [esp+4]
.text:0040345D                 add     esp, 0Ch
.text:00403460                 retn
.text:00403461 ; ---------------------------------------------------------------------------
.text:00403461
.text:00403461 loc_403461:                             ; CODE XREF: .text:00403416↑j
.text:00403461                 mov     edx, offset dword_4191F0
.text:00403466                 jmp     short loc_403418
.text:00403466 ; ---------------------------------------------------------------------------
.text:00403468                 align 10h
.text:00403470                 mov     eax, [esp+4]
.text:00403474                 test    eax, eax
.text:00403476                 jz      short loc_403480
.text:00403478
.text:00403478 loc_403478:                             ; CODE XREF: .text:00403485↓j
.text:00403478                 mov     eax, [eax]
.text:0040347A                 retn
.text:0040347A ; ---------------------------------------------------------------------------
.text:0040347B                 align 10h
.text:00403480
.text:00403480 loc_403480:                             ; CODE XREF: .text:00403476↑j
.text:00403480                 mov     eax, offset dword_4191F0
.text:00403485                 jmp     short loc_403478
.text:00403485 ; ---------------------------------------------------------------------------
.text:00403487                 align 10h
.text:00403490                 mov     edx, [esp+4]
.text:00403494                 test    edx, edx
.text:00403496                 jz      short loc_4034A0
.text:00403498
.text:00403498 loc_403498:                             ; CODE XREF: .text:004034A5↓j
.text:00403498                 mov     ecx, [esp+8]
.text:0040349C                 mov     [edx], ecx
.text:0040349E                 retn
.text:0040349E ; ---------------------------------------------------------------------------
.text:0040349F                 align 10h
.text:004034A0
.text:004034A0 loc_4034A0:                             ; CODE XREF: .text:00403496↑j
.text:004034A0                 mov     edx, offset dword_4191F0
.text:004034A5                 jmp     short loc_403498
.text:004034A5 ; ---------------------------------------------------------------------------
.text:004034A7                 align 10h
.text:004034B0                 sub     esp, 8
.text:004034B3                 mov     eax, [esp+0Ch]
.text:004034B7                 movzx   ecx, byte ptr [esp+10h]
.text:004034BC                 mov     [esp], ebx
.text:004034BF                 mov     ebx, [esp+14h]
.text:004034C3                 mov     [esp+4], esi
.text:004034C7                 mov     dl, cl
.text:004034C9                 shr     dl, 5
.text:004034CC                 movzx   edx, dl
.text:004034CF                 shl     edx, 2
.text:004034D2                 test    eax, eax
.text:004034D4                 lea     esi, [edx+eax+4]
.text:004034D8                 jz      short loc_403500
.text:004034DA
.text:004034DA loc_4034DA:                             ; CODE XREF: .text:00403506↓j
.text:004034DA                 mov     edx, [esi]
.text:004034DC                 and     ecx, 1Fh
.text:004034DF                 and     ebx, 1
.text:004034E2                 mov     eax, edx
.text:004034E4                 shr     eax, cl
.text:004034E6                 and     eax, 1
.text:004034E9                 xor     ebx, eax
.text:004034EB                 shl     ebx, cl
.text:004034ED                 xor     edx, ebx
.text:004034EF                 mov     [esi], edx
.text:004034F1                 mov     ebx, [esp]
.text:004034F4                 mov     esi, [esp+4]
.text:004034F8                 add     esp, 8
.text:004034FB                 retn
.text:004034FB ; ---------------------------------------------------------------------------
.text:004034FC                 align 10h
.text:00403500
.text:00403500 loc_403500:                             ; CODE XREF: .text:004034D8↑j
.text:00403500                 lea     esi, dword_4191F4[edx]
.text:00403506                 jmp     short loc_4034DA
.text:00403506 ; ---------------------------------------------------------------------------
.text:00403508                 align 10h
.text:00403510                 sub     esp, 2Ch
.text:00403513                 mov     [esp+24h], ebx
.text:00403517                 mov     ebx, [esp+40h]
.text:0040351B                 mov     [esp+28h], esi
.text:0040351F                 test    ebx, ebx
.text:00403521                 jz      short loc_403570
.text:00403523
.text:00403523 loc_403523:                             ; CODE XREF: .text:00403575↓j
.text:00403523                 call    _errno
.text:00403528                 mov     esi, [eax]
.text:0040352A                 mov     [esp+14h], ebx
.text:0040352E                 mov     edx, [ebx]
.text:00403530                 mov     ecx, [esp+38h]
.text:00403534                 mov     ebx, [esp+3Ch]
.text:00403538                 mov     [esp+10h], edx
.text:0040353C                 mov     edx, [esp+34h]
.text:00403540                 mov     [esp+0Ch], ebx
.text:00403544                 mov     [esp+8], ecx
.text:00403548                 mov     [esp+4], edx
.text:0040354C                 mov     edx, [esp+30h]
.text:00403550                 mov     [esp], edx
.text:00403553                 call    sub_402990
.text:00403558                 mov     ebx, eax
.text:0040355A                 call    _errno
.text:0040355F                 mov     [eax], esi
.text:00403561                 mov     esi, [esp+28h]
.text:00403565                 mov     eax, ebx
.text:00403567                 mov     ebx, [esp+24h]
.text:0040356B                 add     esp, 2Ch
.text:0040356E                 retn
.text:0040356E ; ---------------------------------------------------------------------------
.text:0040356F                 align 10h
.text:00403570
.text:00403570 loc_403570:                             ; CODE XREF: .text:00403521↑j
.text:00403570                 mov     ebx, offset dword_4191F0
.text:00403575                 jmp     short loc_403523
.text:00403575 ; ---------------------------------------------------------------------------
.text:00403577                 align 10h
.text:00403580                 push    ebp
.text:00403581                 push    edi
.text:00403582                 push    esi
.text:00403583                 push    ebx
.text:00403584                 sub     esp, 2Ch
.text:00403587                 mov     ebp, [esp+48h]
.text:0040358B                 call    _errno
.text:00403590                 mov     edx, [eax]
.text:00403592                 test    ebp, ebp
.text:00403594                 mov     ebx, ebp
.text:00403596                 mov     [esp+28h], edx
.text:0040359A                 jz      loc_403650
.text:004035A0
.text:004035A0 loc_4035A0:                             ; CODE XREF: .text:00403655↓j
.text:004035A0                 call    _errno
.text:004035A5                 mov     edi, [eax]
.text:004035A7                 mov     esi, ebp
.text:004035A9                 mov     [esp+14h], ebx
.text:004035AD                 mov     ecx, [ebx]
.text:004035AF                 mov     dword ptr [esp], 0
.text:004035B6                 mov     edx, [esp+44h]
.text:004035BA                 mov     dword ptr [esp+4], 0
.text:004035C2                 mov     eax, [esp+40h]
.text:004035C6                 mov     [esp+10h], ecx
.text:004035CA                 mov     [esp+0Ch], edx
.text:004035CE                 mov     [esp+8], eax
.text:004035D2                 call    sub_402990
.text:004035D7                 mov     ebx, eax
.text:004035D9                 call    _errno
.text:004035DE                 mov     [eax], edi
.text:004035E0                 lea     edi, [ebx+1]
.text:004035E3                 mov     [esp], edi
.text:004035E6                 call    sub_40C0D0
.text:004035EB                 mov     [esp+24h], eax
.text:004035EF                 test    ebp, ebp
.text:004035F1                 jz      short loc_403642
.text:004035F3
.text:004035F3 loc_4035F3:                             ; CODE XREF: .text:00403647↓j
.text:004035F3                 call    _errno
.text:004035F8                 mov     ebp, [eax]
.text:004035FA                 mov     [esp+14h], esi
.text:004035FE                 mov     ecx, [esi]
.text:00403600                 mov     [esp+4], edi
.text:00403604                 mov     edx, [esp+44h]
.text:00403608                 mov     esi, [esp+24h]
.text:0040360C                 mov     [esp+10h], ecx
.text:00403610                 mov     eax, [esp+40h]
.text:00403614                 mov     [esp+0Ch], edx
.text:00403618                 mov     [esp], esi
.text:0040361B                 mov     [esp+8], eax
.text:0040361F                 call    sub_402990
.text:00403624                 call    _errno
.text:00403629                 mov     [eax], ebp
.text:0040362B                 call    _errno
.text:00403630                 mov     ebx, [esp+28h]
.text:00403634                 mov     [eax], ebx
.text:00403636                 mov     eax, [esp+24h]
.text:0040363A                 add     esp, 2Ch
.text:0040363D                 pop     ebx
.text:0040363E                 pop     esi
.text:0040363F                 pop     edi
.text:00403640                 pop     ebp
.text:00403641                 retn
.text:00403642 ; ---------------------------------------------------------------------------
.text:00403642
.text:00403642 loc_403642:                             ; CODE XREF: .text:004035F1↑j
.text:00403642                 mov     esi, offset dword_4191F0
.text:00403647                 jmp     short loc_4035F3
.text:00403647 ; ---------------------------------------------------------------------------
.text:00403649                 align 10h
.text:00403650
.text:00403650 loc_403650:                             ; CODE XREF: .text:0040359A↑j
.text:00403650                 mov     ebx, offset dword_4191F0
.text:00403655                 jmp     loc_4035A0
.text:00403655 ; ---------------------------------------------------------------------------
.text:0040365A                 align 10h
.text:00403660                 sub     esp, 1Ch
.text:00403663                 mov     edx, [esp+24h]
.text:00403667                 mov     dword ptr [esp+0Ch], offset dword_4191F0
.text:0040366F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403677                 mov     [esp+4], edx
.text:0040367B                 mov     edx, [esp+20h]
.text:0040367F                 mov     [esp], edx
.text:00403682                 call    sub_403AD0
.text:00403687                 add     esp, 1Ch
.text:0040368A                 retn
.text:0040368A ; ---------------------------------------------------------------------------
.text:0040368B                 align 10h
.text:00403690                 sub     esp, 1Ch
.text:00403693                 mov     edx, [esp+20h]
.text:00403697                 mov     dword ptr [esp+0Ch], offset dword_4191F0
.text:0040369F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004036A7                 mov     [esp+4], edx
.text:004036AB                 mov     dword ptr [esp], 0
.text:004036B2                 call    sub_403AD0
.text:004036B7                 add     esp, 1Ch
.text:004036BA                 retn
.text:004036BA ; ---------------------------------------------------------------------------
.text:004036BB                 align 10h
.text:004036C0
.text:004036C0 ; =============== S U B R O U T I N E =======================================
.text:004036C0
.text:004036C0
.text:004036C0 ; int __cdecl sub_4036C0(int, int, char *)
.text:004036C0 sub_4036C0      proc near               ; CODE XREF: .text:0040C04A↓p
.text:004036C0                                         ; sub_40C060+1A↓p
.text:004036C0
.text:004036C0 var_BC          = dword ptr -0BCh
.text:004036C0 var_B8          = dword ptr -0B8h
.text:004036C0 var_B4          = dword ptr -0B4h
.text:004036C0 var_B0          = dword ptr -0B0h
.text:004036C0 var_AC          = dword ptr -0ACh
.text:004036C0 var_A8          = dword ptr -0A8h
.text:004036C0 var_A4          = dword ptr -0A4h
.text:004036C0 var_A0          = dword ptr -0A0h
.text:004036C0 var_9C          = dword ptr -9Ch
.text:004036C0 var_98          = dword ptr -98h
.text:004036C0 var_94          = dword ptr -94h
.text:004036C0 var_90          = dword ptr -90h
.text:004036C0 var_8C          = dword ptr -8Ch
.text:004036C0 var_7C          = dword ptr -7Ch
.text:004036C0 var_78          = dword ptr -78h
.text:004036C0 var_74          = dword ptr -74h
.text:004036C0 var_70          = dword ptr -70h
.text:004036C0 var_6C          = dword ptr -6Ch
.text:004036C0 var_68          = dword ptr -68h
.text:004036C0 var_64          = dword ptr -64h
.text:004036C0 var_60          = dword ptr -60h
.text:004036C0 var_5C          = dword ptr -5Ch
.text:004036C0 var_4C          = dword ptr -4Ch
.text:004036C0 var_48          = dword ptr -48h
.text:004036C0 var_44          = dword ptr -44h
.text:004036C0 var_40          = dword ptr -40h
.text:004036C0 var_3C          = dword ptr -3Ch
.text:004036C0 var_38          = dword ptr -38h
.text:004036C0 var_34          = dword ptr -34h
.text:004036C0 var_30          = dword ptr -30h
.text:004036C0 var_2C          = dword ptr -2Ch
.text:004036C0 arg_0           = dword ptr  4
.text:004036C0 arg_4           = dword ptr  8
.text:004036C0 arg_8           = dword ptr  0Ch
.text:004036C0
.text:004036C0                 push    ebp
.text:004036C1                 xor     eax, eax
.text:004036C3                 mov     ecx, 8
.text:004036C8                 push    edi
.text:004036C9                 push    esi
.text:004036CA                 push    ebx
.text:004036CB                 sub     esp, 0ACh
.text:004036D1                 mov     ebp, [esp+0BCh+arg_4]
.text:004036D8                 cld
.text:004036D9                 lea     edi, [esp+0BCh+var_A8]
.text:004036DD                 mov     [esp+0BCh+var_AC], ebp
.text:004036E1                 rep stosd
.text:004036E3                 mov     eax, [esp+0BCh+var_8C]
.text:004036E7                 mov     edi, [esp+0BCh+var_AC]
.text:004036EB                 mov     esi, [esp+0BCh+var_A8]
.text:004036EF                 mov     [esp+0BCh+var_5C], eax
.text:004036F3                 mov     ebp, [esp+0BCh+var_A4]
.text:004036F7                 mov     eax, [esp+0BCh+var_AC]
.text:004036FB                 mov     [esp+0BCh+var_7C], edi
.text:004036FF                 mov     ecx, [esp+0BCh+var_94]
.text:00403703                 mov     edi, [esp+0BCh+var_A0]
.text:00403707                 mov     [esp+0BCh+var_78], esi
.text:0040370B                 mov     edx, [esp+0BCh+var_90]
.text:0040370F                 mov     esi, [esp+0BCh+var_9C]
.text:00403713                 mov     [esp+0BCh+var_4C], eax
.text:00403717                 mov     ebx, [esp+0BCh+var_98]
.text:0040371B                 mov     eax, [esp+0BCh+var_A8]
.text:0040371F                 mov     [esp+0BCh+var_74], ebp
.text:00403723                 mov     [esp+0BCh+var_70], edi
.text:00403727                 mov     [esp+0BCh+var_6C], esi
.text:0040372B                 mov     [esp+0BCh+var_68], ebx
.text:0040372F                 mov     [esp+0BCh+var_64], ecx
.text:00403733                 mov     [esp+0BCh+var_60], edx
.text:00403737                 mov     [esp+0BCh+var_48], eax
.text:0040373B                 mov     [esp+0BCh+var_44], ebp
.text:0040373F                 mov     [esp+0BCh+var_40], edi
.text:00403743                 mov     [esp+0BCh+var_3C], esi
.text:0040374A                 mov     [esp+0BCh+var_38], ebx
.text:00403751                 mov     ebx, [esp+0BCh+var_8C]
.text:00403755                 mov     [esp+0BCh+var_30], edx
.text:0040375C                 mov     edx, [esp+0BCh+arg_8]
.text:00403763                 mov     [esp+0BCh+var_34], ecx
.text:0040376A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040376E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00403772                 mov     edx, [esp+0BCh+arg_0]
.text:00403779                 mov     [esp+0BCh+var_2C], ebx
.text:00403780                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00403784                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040378C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040378F                 call    sub_403AD0
.text:00403794                 add     esp, 0ACh
.text:0040379A                 pop     ebx
.text:0040379B                 pop     esi
.text:0040379C                 pop     edi
.text:0040379D                 pop     ebp
.text:0040379E                 retn
.text:0040379E sub_4036C0      endp
.text:0040379E
.text:0040379E ; ---------------------------------------------------------------------------
.text:0040379F                 align 10h
.text:004037A0                 push    ebp
.text:004037A1                 xor     eax, eax
.text:004037A3                 mov     ecx, 8
.text:004037A8                 push    edi
.text:004037A9                 push    esi
.text:004037AA                 push    ebx
.text:004037AB                 sub     esp, 0ACh
.text:004037B1                 mov     edx, [esp+0C4h]
.text:004037B8                 cld
.text:004037B9                 lea     edi, [esp+14h]
.text:004037BD                 mov     [esp+10h], edx
.text:004037C1                 rep stosd
.text:004037C3                 mov     eax, [esp+30h]
.text:004037C7                 mov     ebp, [esp+10h]
.text:004037CB                 mov     edi, [esp+14h]
.text:004037CF                 mov     [esp+60h], eax
.text:004037D3                 mov     esi, [esp+20h]
.text:004037D7                 mov     eax, [esp+10h]
.text:004037DB                 mov     [esp+40h], ebp
.text:004037DF                 mov     ecx, [esp+28h]
.text:004037E3                 mov     ebp, [esp+18h]
.text:004037E7                 mov     [esp+44h], edi
.text:004037EB                 mov     edx, [esp+2Ch]
.text:004037EF                 mov     edi, [esp+1Ch]
.text:004037F3                 mov     [esp+70h], eax
.text:004037F7                 mov     ebx, [esp+24h]
.text:004037FB                 mov     eax, [esp+14h]
.text:004037FF                 mov     [esp+48h], ebp
.text:00403803                 mov     [esp+4Ch], edi
.text:00403807                 mov     [esp+50h], esi
.text:0040380B                 mov     [esp+54h], ebx
.text:0040380F                 mov     [esp+58h], ecx
.text:00403813                 mov     [esp+5Ch], edx
.text:00403817                 mov     [esp+74h], eax
.text:0040381B                 mov     [esp+78h], ebp
.text:0040381F                 mov     [esp+7Ch], edi
.text:00403823                 mov     [esp+80h], esi
.text:0040382A                 mov     [esp+84h], ebx
.text:00403831                 mov     esi, [esp+30h]
.text:00403835                 lea     ebx, [esp+70h]
.text:00403839                 mov     [esp+8Ch], edx
.text:00403840                 mov     edx, [esp+0C8h]
.text:00403847                 mov     [esp+88h], ecx
.text:0040384E                 mov     ecx, [esp+0CCh]
.text:00403855                 mov     [esp+4], edx
.text:00403859                 mov     edx, [esp+0C0h]
.text:00403860                 mov     [esp+90h], esi
.text:00403867                 mov     [esp+0Ch], ebx
.text:0040386B                 mov     [esp+8], ecx
.text:0040386F                 mov     [esp], edx
.text:00403872                 call    sub_403AD0
.text:00403877                 add     esp, 0ACh
.text:0040387D                 pop     ebx
.text:0040387E                 pop     esi
.text:0040387F                 pop     edi
.text:00403880                 pop     ebp
.text:00403881                 retn
.text:00403881 ; ---------------------------------------------------------------------------
.text:00403882                 align 10h
.text:00403890                 push    ebp
.text:00403891                 xor     eax, eax
.text:00403893                 mov     ecx, 8
.text:00403898                 push    edi
.text:00403899                 push    esi
.text:0040389A                 push    ebx
.text:0040389B                 sub     esp, 0ACh
.text:004038A1                 mov     edi, [esp+0C0h]
.text:004038A8                 cld
.text:004038A9                 mov     [esp+10h], edi
.text:004038AD                 lea     edi, [esp+14h]
.text:004038B1                 rep stosd
.text:004038B3                 mov     eax, [esp+30h]
.text:004038B7                 mov     esi, [esp+10h]
.text:004038BB                 mov     ebx, [esp+14h]
.text:004038BF                 mov     [esp+60h], eax
.text:004038C3                 mov     ebp, [esp+18h]
.text:004038C7                 mov     eax, [esp+10h]
.text:004038CB                 mov     [esp+40h], esi
.text:004038CF                 mov     edi, [esp+1Ch]
.text:004038D3                 mov     esi, [esp+20h]
.text:004038D7                 mov     [esp+44h], ebx
.text:004038DB                 mov     ecx, [esp+28h]
.text:004038DF                 mov     edx, [esp+2Ch]
.text:004038E3                 mov     [esp+70h], eax
.text:004038E7                 mov     ebx, [esp+24h]
.text:004038EB                 mov     eax, [esp+14h]
.text:004038EF                 mov     [esp+48h], ebp
.text:004038F3                 mov     [esp+4Ch], edi
.text:004038F7                 mov     [esp+50h], esi
.text:004038FB                 mov     [esp+54h], ebx
.text:004038FF                 mov     [esp+58h], ecx
.text:00403903                 mov     [esp+5Ch], edx
.text:00403907                 mov     [esp+74h], eax
.text:0040390B                 mov     [esp+78h], ebp
.text:0040390F                 mov     [esp+7Ch], edi
.text:00403913                 mov     [esp+80h], esi
.text:0040391A                 mov     [esp+84h], ebx
.text:00403921                 mov     [esp+8Ch], edx
.text:00403928                 lea     edx, [esp+70h]
.text:0040392C                 mov     [esp+88h], ecx
.text:00403933                 mov     ecx, [esp+30h]
.text:00403937                 mov     [esp+0Ch], edx
.text:0040393B                 mov     edx, [esp+0C4h]
.text:00403942                 mov     [esp+90h], ecx
.text:00403949                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403951                 mov     [esp+4], edx
.text:00403955                 mov     dword ptr [esp], 0
.text:0040395C                 call    sub_403AD0
.text:00403961                 add     esp, 0ACh
.text:00403967                 pop     ebx
.text:00403968                 pop     esi
.text:00403969                 pop     edi
.text:0040396A                 pop     ebp
.text:0040396B                 retn
.text:0040396B ; ---------------------------------------------------------------------------
.text:0040396C                 align 10h
.text:00403970                 push    edi
.text:00403971                 push    esi
.text:00403972                 push    ebx
.text:00403973                 sub     esp, 40h
.text:00403976                 mov     edx, ds:dword_4191FC
.text:0040397C                 mov     ebx, ds:dword_4191F0
.text:00403982                 mov     esi, ds:dword_4191F8
.text:00403988                 mov     edi, ds:dword_4191F4
.text:0040398E                 mov     [esp+1Ch], edx
.text:00403992                 mov     ecx, ds:dword_419200
.text:00403998                 mov     edx, ds:dword_419210
.text:0040399E                 mov     [esp+10h], ebx
.text:004039A2                 mov     ebx, ds:dword_419204
.text:004039A8                 mov     [esp+30h], edx
.text:004039AC                 movzx   edx, byte ptr [esp+54h]
.text:004039B1                 mov     [esp+18h], esi
.text:004039B5                 mov     esi, ds:dword_41920C
.text:004039BB                 mov     [esp+14h], edi
.text:004039BF                 mov     edi, ds:dword_419208
.text:004039C5                 mov     [esp+20h], ecx
.text:004039C9                 mov     cl, dl
.text:004039CB                 shr     cl, 5
.text:004039CE                 mov     [esp+24h], ebx
.text:004039D2                 movzx   ebx, cl
.text:004039D5                 mov     [esp+2Ch], esi
.text:004039D9                 lea     esi, [esp+10h]
.text:004039DD                 mov     [esp+28h], edi
.text:004039E1                 lea     edi, [esi+ebx*4]
.text:004039E4                 mov     ebx, edx
.text:004039E6                 mov     edx, [edi+4]
.text:004039E9                 and     ebx, 1Fh
.text:004039EC                 mov     cl, bl
.text:004039EE                 mov     eax, edx
.text:004039F0                 shr     eax, cl
.text:004039F2                 and     eax, 1
.text:004039F5                 xor     eax, 1
.text:004039F8                 shl     eax, cl
.text:004039FA                 xor     edx, eax
.text:004039FC                 mov     [edi+4], edx
.text:004039FF                 mov     edx, [esp+50h]
.text:00403A03                 mov     [esp+0Ch], esi
.text:00403A07                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403A0F                 mov     [esp+4], edx
.text:00403A13                 mov     dword ptr [esp], 0
.text:00403A1A                 call    sub_403AD0
.text:00403A1F                 add     esp, 40h
.text:00403A22                 pop     ebx
.text:00403A23                 pop     esi
.text:00403A24                 pop     edi
.text:00403A25                 retn
.text:00403A25 ; ---------------------------------------------------------------------------
.text:00403A26                 align 10h
.text:00403A30
.text:00403A30 ; =============== S U B R O U T I N E =======================================
.text:00403A30
.text:00403A30
.text:00403A30 ; int __cdecl sub_403A30(char *)
.text:00403A30 sub_403A30      proc near               ; CODE XREF: sub_401CF0+9E↑p
.text:00403A30                                         ; sub_401F00+EE↑p ...
.text:00403A30
.text:00403A30 var_4C          = dword ptr -4Ch
.text:00403A30 var_48          = dword ptr -48h
.text:00403A30 var_44          = dword ptr -44h
.text:00403A30 var_40          = dword ptr -40h
.text:00403A30 var_3C          = dword ptr -3Ch
.text:00403A30 var_38          = dword ptr -38h
.text:00403A30 var_34          = dword ptr -34h
.text:00403A30 var_30          = dword ptr -30h
.text:00403A30 var_2C          = dword ptr -2Ch
.text:00403A30 var_28          = dword ptr -28h
.text:00403A30 var_24          = dword ptr -24h
.text:00403A30 var_20          = dword ptr -20h
.text:00403A30 var_1C          = dword ptr -1Ch
.text:00403A30 arg_0           = dword ptr  4
.text:00403A30
.text:00403A30                 sub     esp, 4Ch
.text:00403A33                 mov     ecx, ds:dword_4191F0
.text:00403A39                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00403A41                 mov     edx, ds:dword_4191F4
.text:00403A47                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00403A4E                 mov     [esp+4Ch+var_3C], ecx
.text:00403A52                 mov     ecx, ds:dword_4191FC
.text:00403A58                 mov     [esp+4Ch+var_38], edx
.text:00403A5C                 mov     edx, ds:dword_4191F8
.text:00403A62                 mov     [esp+4Ch+var_30], ecx
.text:00403A66                 mov     ecx, ds:dword_419200
.text:00403A6C                 mov     eax, edx
.text:00403A6E                 shr     eax, 1Ah
.text:00403A71                 and     eax, 1
.text:00403A74                 xor     eax, 1
.text:00403A77                 mov     [esp+4Ch+var_2C], ecx
.text:00403A7B                 shl     eax, 1Ah
.text:00403A7E                 mov     ecx, ds:dword_419204
.text:00403A84                 xor     edx, eax
.text:00403A86                 mov     [esp+4Ch+var_34], edx
.text:00403A8A                 mov     edx, [esp+4Ch+arg_0]
.text:00403A8E                 mov     [esp+4Ch+var_28], ecx
.text:00403A92                 mov     ecx, ds:dword_419208
.text:00403A98                 mov     [esp+4Ch+var_48], edx ; char *
.text:00403A9C                 mov     [esp+4Ch+var_24], ecx
.text:00403AA0                 mov     ecx, ds:dword_41920C
.text:00403AA6                 mov     [esp+4Ch+var_20], ecx
.text:00403AAA                 mov     ecx, ds:dword_419210
.text:00403AB0                 mov     [esp+4Ch+var_1C], ecx
.text:00403AB4                 lea     ecx, [esp+4Ch+var_3C]
.text:00403AB8                 mov     [esp+4Ch+var_40], ecx ; int
.text:00403ABC                 call    sub_403AD0
.text:00403AC1                 add     esp, 4Ch
.text:00403AC4                 retn
.text:00403AC4 sub_403A30      endp
.text:00403AC4
.text:00403AC4 ; ---------------------------------------------------------------------------
.text:00403AC5                 align 10h
.text:00403AD0
.text:00403AD0 ; =============== S U B R O U T I N E =======================================
.text:00403AD0
.text:00403AD0
.text:00403AD0 ; int __cdecl sub_403AD0(int, char *, int, int)
.text:00403AD0 sub_403AD0      proc near               ; CODE XREF: .text:00403682↑p
.text:00403AD0                                         ; .text:004036B2↑p ...
.text:00403AD0
.text:00403AD0 Block           = dword ptr -2Ch
.text:00403AD0 var_28          = dword ptr -28h
.text:00403AD0 Str             = dword ptr -24h
.text:00403AD0 var_20          = dword ptr -20h
.text:00403AD0 var_1C          = dword ptr -1Ch
.text:00403AD0 var_18          = dword ptr -18h
.text:00403AD0 var_14          = dword ptr -14h
.text:00403AD0 arg_0           = dword ptr  4
.text:00403AD0 arg_4           = dword ptr  8
.text:00403AD0 arg_8           = dword ptr  0Ch
.text:00403AD0 arg_C           = dword ptr  10h
.text:00403AD0
.text:00403AD0                 push    ebp
.text:00403AD1                 push    edi
.text:00403AD2                 push    esi
.text:00403AD3                 push    ebx
.text:00403AD4                 sub     esp, 1Ch
.text:00403AD7                 call    _errno
.text:00403ADC                 mov     edx, [eax]
.text:00403ADE                 mov     eax, [esp+2Ch+arg_0]
.text:00403AE2                 mov     [esp+2Ch+var_14], edx
.text:00403AE6                 test    eax, eax
.text:00403AE8                 js      loc_403C8A
.text:00403AEE                 mov     eax, [esp+2Ch+arg_0]
.text:00403AF2                 cmp     dword_416010, eax
.text:00403AF8                 ja      short loc_403B70
.text:00403AFA                 mov     esi, eax
.text:00403AFC                 inc     esi
.text:00403AFD                 cmp     esi, 1FFFFFFFh
.text:00403B03                 ja      loc_403C8F
.text:00403B09                 mov     ebx, off_41601C
.text:00403B0F                 cmp     ebx, offset dword_416014
.text:00403B15                 jz      loc_403C61
.text:00403B1B
.text:00403B1B loc_403B1B:                             ; CODE XREF: sub_403AD0+1B5↓j
.text:00403B1B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00403B1E                 lea     ecx, ds:0[esi*8]
.text:00403B25                 mov     ebp, esi
.text:00403B27                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00403B2B                 call    sub_40C160
.text:00403B30                 mov     off_41601C, eax
.text:00403B35                 mov     ebx, dword_416010
.text:00403B3B                 sub     ebp, ebx
.text:00403B3D                 lea     edi, [eax+ebx*8]
.text:00403B40                 lea     eax, ds:0[ebp*8]
.text:00403B47                 cmp     eax, 7
.text:00403B4A                 jbe     short loc_403B60
.text:00403B4C                 test    edi, 4
.text:00403B52                 jz      short loc_403B60
.text:00403B54                 mov     dword ptr [edi], 0
.text:00403B5A                 sub     eax, 4
.text:00403B5D                 add     edi, 4
.text:00403B60
.text:00403B60 loc_403B60:                             ; CODE XREF: sub_403AD0+7A↑j
.text:00403B60                                         ; sub_403AD0+82↑j
.text:00403B60                 cld
.text:00403B61                 mov     ecx, eax
.text:00403B63                 shr     ecx, 2
.text:00403B66                 xor     eax, eax
.text:00403B68                 rep stosd
.text:00403B6A                 mov     dword_416010, esi
.text:00403B70
.text:00403B70 loc_403B70:                             ; CODE XREF: sub_403AD0+28↑j
.text:00403B70                 mov     esi, off_41601C
.text:00403B76                 mov     eax, [esp+2Ch+arg_0]
.text:00403B7A                 mov     ebp, [esi+eax*8]
.text:00403B7D                 mov     edi, [esi+eax*8+4]
.text:00403B81                 mov     esi, [esp+2Ch+arg_C]
.text:00403B85                 test    esi, esi
.text:00403B87                 jz      loc_403C57
.text:00403B8D
.text:00403B8D loc_403B8D:                             ; CODE XREF: sub_403AD0+18C↓j
.text:00403B8D                 call    _errno
.text:00403B92                 mov     ebx, [eax]
.text:00403B94                 mov     [esp+2Ch+var_18], esi ; int
.text:00403B98                 mov     ecx, [esi]
.text:00403B9A                 mov     [esp+2Ch+Block], edi ; int
.text:00403B9D                 mov     edx, [esp+2Ch+arg_8]
.text:00403BA1                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403BA5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403BA9                 mov     ecx, [esp+2Ch+arg_4]
.text:00403BAD                 mov     [esp+2Ch+var_20], edx ; int
.text:00403BB1                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403BB5                 call    sub_402990
.text:00403BBA                 mov     esi, eax
.text:00403BBC                 call    _errno
.text:00403BC1                 mov     [eax], ebx
.text:00403BC3                 cmp     ebp, esi
.text:00403BC5                 ja      short loc_403C3B
.text:00403BC7                 lea     ebp, [esi+1]
.text:00403BCA                 mov     ebx, off_41601C
.text:00403BD0                 cmp     edi, offset unk_4190F0
.text:00403BD6                 mov     esi, [esp+2Ch+arg_0]
.text:00403BDA                 mov     [ebx+esi*8], ebp
.text:00403BDD                 jz      short loc_403BED
.text:00403BDF                 mov     [esp+2Ch+Block], edi ; Block
.text:00403BE2                 call    free
.text:00403BE7                 mov     ebx, off_41601C
.text:00403BED
.text:00403BED loc_403BED:                             ; CODE XREF: sub_403AD0+10D↑j
.text:00403BED                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00403BF0                 call    sub_40C0D0
.text:00403BF5                 mov     esi, [esp+2Ch+arg_C]
.text:00403BF9                 mov     edi, eax
.text:00403BFB                 mov     eax, [esp+2Ch+arg_0]
.text:00403BFF                 test    esi, esi
.text:00403C01                 mov     [ebx+eax*8+4], edi
.text:00403C05                 jz      short loc_403C50
.text:00403C07
.text:00403C07 loc_403C07:                             ; CODE XREF: sub_403AD0+185↓j
.text:00403C07                 call    _errno
.text:00403C0C                 mov     ebx, [eax]
.text:00403C0E                 mov     [esp+2Ch+var_18], esi ; int
.text:00403C12                 mov     ecx, [esi]
.text:00403C14                 mov     [esp+2Ch+Block], edi ; int
.text:00403C17                 mov     edx, [esp+2Ch+arg_8]
.text:00403C1B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403C1F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403C23                 mov     ecx, [esp+2Ch+arg_4]
.text:00403C27                 mov     [esp+2Ch+var_20], edx ; int
.text:00403C2B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403C2F                 call    sub_402990
.text:00403C34                 call    _errno
.text:00403C39                 mov     [eax], ebx
.text:00403C3B
.text:00403C3B loc_403C3B:                             ; CODE XREF: sub_403AD0+F5↑j
.text:00403C3B                 call    _errno
.text:00403C40                 mov     ebp, [esp+2Ch+var_14]
.text:00403C44                 mov     [eax], ebp
.text:00403C46                 add     esp, 1Ch
.text:00403C49                 mov     eax, edi
.text:00403C4B                 pop     ebx
.text:00403C4C                 pop     esi
.text:00403C4D                 pop     edi
.text:00403C4E                 pop     ebp
.text:00403C4F                 retn
.text:00403C50 ; ---------------------------------------------------------------------------
.text:00403C50
.text:00403C50 loc_403C50:                             ; CODE XREF: sub_403AD0+135↑j
.text:00403C50                 mov     esi, offset dword_4191F0
.text:00403C55                 jmp     short loc_403C07
.text:00403C57 ; ---------------------------------------------------------------------------
.text:00403C57
.text:00403C57 loc_403C57:                             ; CODE XREF: sub_403AD0+B7↑j
.text:00403C57                 mov     esi, offset dword_4191F0
.text:00403C5C                 jmp     loc_403B8D
.text:00403C61 ; ---------------------------------------------------------------------------
.text:00403C61
.text:00403C61 loc_403C61:                             ; CODE XREF: sub_403AD0+45↑j
.text:00403C61                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00403C68                 call    sub_40C0D0
.text:00403C6D                 mov     off_41601C, eax
.text:00403C72                 mov     edi, dword_416014
.text:00403C78                 mov     ebx, eax
.text:00403C7A                 mov     ecx, off_416018
.text:00403C80                 mov     [eax], edi
.text:00403C82                 mov     [eax+4], ecx
.text:00403C85                 jmp     loc_403B1B
.text:00403C8A ; ---------------------------------------------------------------------------
.text:00403C8A
.text:00403C8A loc_403C8A:                             ; CODE XREF: sub_403AD0+18↑j
.text:00403C8A                 call    abort
.text:00403C8F ; ---------------------------------------------------------------------------
.text:00403C8F
.text:00403C8F loc_403C8F:                             ; CODE XREF: sub_403AD0+33↑j
.text:00403C8F                 call    sub_40C380
.text:00403C8F sub_403AD0      endp
.text:00403C8F
.text:00403C8F ; ---------------------------------------------------------------------------
.text:00403C94                 align 10h
.text:00403CA0
.text:00403CA0 ; =============== S U B R O U T I N E =======================================
.text:00403CA0
.text:00403CA0
.text:00403CA0 sub_403CA0      proc near               ; CODE XREF: sub_403CF0+3A↓j
.text:00403CA0                                         ; sub_406ED0+46B↓p ...
.text:00403CA0
.text:00403CA0 arg_0           = dword ptr  4
.text:00403CA0 arg_4           = dword ptr  8
.text:00403CA0 arg_8           = dword ptr  0Ch
.text:00403CA0
.text:00403CA0                 mov     edx, [esp+arg_8]
.text:00403CA4                 mov     ecx, [esp+arg_4]
.text:00403CA8                 mov     eax, [esp+arg_0]
.text:00403CAC                 mov     [ecx+1], dl
.text:00403CAF                 sar     edx, 8
.text:00403CB2                 mov     [ecx], al
.text:00403CB4                 mov     [ecx+2], dl
.text:00403CB7                 retn
.text:00403CB7 sub_403CA0      endp
.text:00403CB7
.text:00403CB7 ; ---------------------------------------------------------------------------
.text:00403CB8                 align 10h
.text:00403CC0
.text:00403CC0 ; =============== S U B R O U T I N E =======================================
.text:00403CC0
.text:00403CC0
.text:00403CC0 sub_403CC0      proc near               ; CODE XREF: sub_403D30+3F↓j
.text:00403CC0                                         ; sub_406ED0+313B↓p
.text:00403CC0
.text:00403CC0 arg_0           = dword ptr  4
.text:00403CC0 arg_4           = dword ptr  8
.text:00403CC0 arg_8           = dword ptr  0Ch
.text:00403CC0 arg_C           = dword ptr  10h
.text:00403CC0
.text:00403CC0                 push    ebx
.text:00403CC1                 mov     edx, [esp+4+arg_8]
.text:00403CC5                 mov     ebx, [esp+4+arg_C]
.text:00403CC9                 mov     ecx, [esp+4+arg_4]
.text:00403CCD                 mov     eax, [esp+4+arg_0]
.text:00403CD1                 mov     [ecx+1], dl
.text:00403CD4                 sar     edx, 8
.text:00403CD7                 mov     [ecx+3], bl
.text:00403CDA                 sar     ebx, 8
.text:00403CDD                 mov     [ecx], al
.text:00403CDF                 mov     [ecx+2], dl
.text:00403CE2                 mov     [ecx+4], bl
.text:00403CE5                 pop     ebx
.text:00403CE6                 retn
.text:00403CE6 sub_403CC0      endp
.text:00403CE6
.text:00403CE6 ; ---------------------------------------------------------------------------
.text:00403CE7                 align 10h
.text:00403CF0
.text:00403CF0 ; =============== S U B R O U T I N E =======================================
.text:00403CF0
.text:00403CF0
.text:00403CF0 sub_403CF0      proc near               ; CODE XREF: sub_406ED0+967↓p
.text:00403CF0                                         ; sub_406ED0+137C↓p ...
.text:00403CF0
.text:00403CF0 arg_0           = dword ptr  4
.text:00403CF0 arg_4           = dword ptr  8
.text:00403CF0 arg_8           = dword ptr  0Ch
.text:00403CF0 arg_C           = dword ptr  10h
.text:00403CF0
.text:00403CF0                 push    edi
.text:00403CF1                 push    esi
.text:00403CF2                 push    ebx
.text:00403CF3                 mov     edx, [esp+0Ch+arg_C]
.text:00403CF7                 mov     ebx, [esp+0Ch+arg_4]
.text:00403CFB                 mov     edi, [esp+0Ch+arg_0]
.text:00403CFF                 mov     esi, [esp+0Ch+arg_8]
.text:00403D03                 lea     ecx, [edx+3]
.text:00403D06                 cmp     edx, ebx
.text:00403D08                 jz      short loc_403D1B
.text:00403D0A                 lea     esi, [esi+0]
.text:00403D10
.text:00403D10 loc_403D10:                             ; CODE XREF: sub_403CF0+29↓j
.text:00403D10                 dec     edx
.text:00403D11                 dec     ecx
.text:00403D12                 cmp     edx, ebx
.text:00403D14                 movzx   eax, byte ptr [edx]
.text:00403D17                 mov     [ecx], al
.text:00403D19                 jnz     short loc_403D10
.text:00403D1B
.text:00403D1B loc_403D1B:                             ; CODE XREF: sub_403CF0+18↑j
.text:00403D1B                 mov     [esp+0Ch+arg_8], esi
.text:00403D1F                 mov     [esp+0Ch+arg_0], edi
.text:00403D23                 mov     [esp+0Ch+arg_4], ebx
.text:00403D27                 pop     ebx
.text:00403D28                 pop     esi
.text:00403D29                 pop     edi
.text:00403D2A                 jmp     sub_403CA0
.text:00403D2A sub_403CF0      endp
.text:00403D2A
.text:00403D2A ; ---------------------------------------------------------------------------
.text:00403D2F                 align 10h
.text:00403D30
.text:00403D30 ; =============== S U B R O U T I N E =======================================
.text:00403D30
.text:00403D30
.text:00403D30 sub_403D30      proc near               ; CODE XREF: sub_406ED0+30CC↓p
.text:00403D30                                         ; sub_406ED0+30F8↓p ...
.text:00403D30
.text:00403D30 arg_0           = dword ptr  4
.text:00403D30 arg_4           = dword ptr  8
.text:00403D30 arg_8           = dword ptr  0Ch
.text:00403D30 arg_C           = dword ptr  10h
.text:00403D30 arg_10          = dword ptr  14h
.text:00403D30
.text:00403D30                 push    ebp
.text:00403D31                 push    edi
.text:00403D32                 push    esi
.text:00403D33                 push    ebx
.text:00403D34                 mov     edx, [esp+10h+arg_10]
.text:00403D38                 mov     ebx, [esp+10h+arg_4]
.text:00403D3C                 mov     ebp, [esp+10h+arg_0]
.text:00403D40                 mov     edi, [esp+10h+arg_8]
.text:00403D44                 lea     ecx, [edx+5]
.text:00403D47                 cmp     edx, ebx
.text:00403D49                 mov     esi, [esp+10h+arg_C]
.text:00403D4D                 jz      short loc_403D5B
.text:00403D4F                 nop
.text:00403D50
.text:00403D50 loc_403D50:                             ; CODE XREF: sub_403D30+29↓j
.text:00403D50                 dec     edx
.text:00403D51                 dec     ecx
.text:00403D52                 cmp     edx, ebx
.text:00403D54                 movzx   eax, byte ptr [edx]
.text:00403D57                 mov     [ecx], al
.text:00403D59                 jnz     short loc_403D50
.text:00403D5B
.text:00403D5B loc_403D5B:                             ; CODE XREF: sub_403D30+1D↑j
.text:00403D5B                 mov     [esp+10h+arg_C], esi
.text:00403D5F                 mov     [esp+10h+arg_8], edi
.text:00403D63                 mov     [esp+10h+arg_0], ebp
.text:00403D67                 mov     [esp+10h+arg_4], ebx
.text:00403D6B                 pop     ebx
.text:00403D6C                 pop     esi
.text:00403D6D                 pop     edi
.text:00403D6E                 pop     ebp
.text:00403D6F                 jmp     sub_403CC0
.text:00403D6F sub_403D30      endp
.text:00403D6F
.text:00403D6F ; ---------------------------------------------------------------------------
.text:00403D74                 align 10h
.text:00403D80
.text:00403D80 ; =============== S U B R O U T I N E =======================================
.text:00403D80
.text:00403D80
.text:00403D80 sub_403D80      proc near               ; CODE XREF: sub_406ED0+5C6↓p
.text:00403D80
.text:00403D80 arg_0           = dword ptr  4
.text:00403D80 arg_4           = dword ptr  8
.text:00403D80 arg_8           = dword ptr  0Ch
.text:00403D80
.text:00403D80                 push    ebx
.text:00403D81                 mov     edx, [esp+4+arg_4]
.text:00403D85                 xor     ebx, ebx
.text:00403D87                 mov     ecx, [esp+4+arg_8]
.text:00403D8B                 sub     edx, 2
.text:00403D8E                 cmp     edx, [esp+4+arg_0]
.text:00403D92                 jbe     short loc_403D9A
.text:00403D94                 cmp     byte ptr [edx-1], 5Ch ; '\'
.text:00403D98                 jz      short loc_403DD2
.text:00403D9A
.text:00403D9A loc_403D9A:                             ; CODE XREF: sub_403D80+12↑j
.text:00403D9A                                         ; sub_403D80+54↓j
.text:00403D9A                 movzx   edx, byte ptr [edx]
.text:00403D9D                 xor     eax, eax
.text:00403D9F                 cmp     dl, 28h ; '('
.text:00403DA2                 jz      short loc_403DC7
.text:00403DA4
.text:00403DA4 loc_403DA4:                             ; CODE XREF: sub_403D80+50↓j
.text:00403DA4                 cmp     dl, 7Ch ; '|'
.text:00403DA7                 jz      short loc_403DB0
.text:00403DA9
.text:00403DA9 loc_403DA9:                             ; CODE XREF: sub_403D80+3D↓j
.text:00403DA9                                         ; sub_403D80+45↓j
.text:00403DA9                 pop     ebx
.text:00403DAA                 retn
.text:00403DAA ; ---------------------------------------------------------------------------
.text:00403DAB                 align 10h
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: sub_403D80+27↑j
.text:00403DB0                 and     ecx, 0FFFF8000h
.text:00403DB6                 test    cx, cx
.text:00403DB9                 jnz     short loc_403DC0
.text:00403DBB                 test    bl, bl
.text:00403DBD                 jz      short loc_403DA9
.text:00403DBF                 nop
.text:00403DC0
.text:00403DC0 loc_403DC0:                             ; CODE XREF: sub_403D80+39↑j
.text:00403DC0                                         ; sub_403D80+4A↓j ...
.text:00403DC0                 mov     eax, 1
.text:00403DC5                 jmp     short loc_403DA9
.text:00403DC7 ; ---------------------------------------------------------------------------
.text:00403DC7
.text:00403DC7 loc_403DC7:                             ; CODE XREF: sub_403D80+22↑j
.text:00403DC7                 test    ch, 20h
.text:00403DCA                 jnz     short loc_403DC0
.text:00403DCC                 test    bl, bl
.text:00403DCE                 jnz     short loc_403DC0
.text:00403DD0                 jmp     short loc_403DA4
.text:00403DD2 ; ---------------------------------------------------------------------------
.text:00403DD2
.text:00403DD2 loc_403DD2:                             ; CODE XREF: sub_403D80+18↑j
.text:00403DD2                 mov     bl, 1
.text:00403DD4                 jmp     short loc_403D9A
.text:00403DD4 sub_403D80      endp
.text:00403DD4
.text:00403DD4 ; ---------------------------------------------------------------------------
.text:00403DD6                 align 10h
.text:00403DE0
.text:00403DE0 ; =============== S U B R O U T I N E =======================================
.text:00403DE0
.text:00403DE0
.text:00403DE0 sub_403DE0      proc near               ; CODE XREF: sub_406ED0+B9A↓p
.text:00403DE0
.text:00403DE0 var_9           = byte ptr -9
.text:00403DE0 var_8           = dword ptr -8
.text:00403DE0 var_4           = dword ptr -4
.text:00403DE0 arg_0           = dword ptr  4
.text:00403DE0 arg_4           = dword ptr  8
.text:00403DE0 arg_8           = dword ptr  0Ch
.text:00403DE0
.text:00403DE0                 sub     esp, 0Ch
.text:00403DE3                 mov     edx, [esp+0Ch+arg_8]
.text:00403DE7                 mov     [esp+0Ch+var_4], esi
.text:00403DEB                 mov     esi, [esp+0Ch+arg_0]
.text:00403DEF                 mov     [esp+0Ch+var_8], ebx
.text:00403DF3                 lea     eax, [esi+1]
.text:00403DF6                 movzx   ebx, byte ptr [esi]
.text:00403DF9                 cmp     bl, 5Ch ; '\'
.text:00403DFC                 setz    [esp+0Ch+var_9]
.text:00403E01                 cmp     eax, [esp+0Ch+arg_4]
.text:00403E05                 sbb     ecx, ecx
.text:00403E07                 and     ecx, eax
.text:00403E09                 xor     eax, eax
.text:00403E0B                 test    dh, 20h
.text:00403E0E                 jz      short loc_403E48
.text:00403E10                 cmp     bl, 29h ; ')'
.text:00403E13
.text:00403E13 loc_403E13:                             ; CODE XREF: sub_403DE0+76↓j
.text:00403E13                 jz      short loc_403E31
.text:00403E15
.text:00403E15 loc_403E15:                             ; CODE XREF: sub_403DE0+6D↓j
.text:00403E15                                         ; sub_403DE0+71↓j
.text:00403E15                 and     edx, 0FFFF8000h
.text:00403E1B                 test    dx, dx
.text:00403E1E                 jz      short loc_403E38
.text:00403E20                 cmp     byte ptr [esi], 7Ch ; '|'
.text:00403E23
.text:00403E23 loc_403E23:                             ; CODE XREF: sub_403DE0+66↓j
.text:00403E23                 jz      short loc_403E31
.text:00403E25
.text:00403E25 loc_403E25:                             ; CODE XREF: sub_403DE0+56↓j
.text:00403E25                                         ; sub_403DE0+5D↓j ...
.text:00403E25                 mov     ebx, [esp+0Ch+var_8]
.text:00403E29                 mov     esi, [esp+0Ch+var_4]
.text:00403E2D                 add     esp, 0Ch
.text:00403E30                 retn
.text:00403E31 ; ---------------------------------------------------------------------------
.text:00403E31
.text:00403E31 loc_403E31:                             ; CODE XREF: sub_403DE0:loc_403E13↑j
.text:00403E31                                         ; sub_403DE0:loc_403E23↑j
.text:00403E31                 mov     eax, 1
.text:00403E36                 jmp     short loc_403E25
.text:00403E38 ; ---------------------------------------------------------------------------
.text:00403E38
.text:00403E38 loc_403E38:                             ; CODE XREF: sub_403DE0+3E↑j
.text:00403E38                 cmp     [esp+0Ch+var_9], 0
.text:00403E3D                 jz      short loc_403E25
.text:00403E3F                 test    ecx, ecx
.text:00403E41                 jz      short loc_403E25
.text:00403E43                 cmp     byte ptr [ecx], 7Ch ; '|'
.text:00403E46                 jmp     short loc_403E23
.text:00403E48 ; ---------------------------------------------------------------------------
.text:00403E48
.text:00403E48 loc_403E48:                             ; CODE XREF: sub_403DE0+2E↑j
.text:00403E48                 cmp     [esp+0Ch+var_9], 0
.text:00403E4D                 jz      short loc_403E15
.text:00403E4F                 test    ecx, ecx
.text:00403E51                 jz      short loc_403E15
.text:00403E53                 cmp     byte ptr [ecx], 29h ; ')'
.text:00403E56                 jmp     short loc_403E13
.text:00403E56 sub_403DE0      endp
.text:00403E56
.text:00403E56 ; ---------------------------------------------------------------------------
.text:00403E58                 align 10h
.text:00403E60
.text:00403E60 ; =============== S U B R O U T I N E =======================================
.text:00403E60
.text:00403E60
.text:00403E60 sub_403E60      proc near               ; CODE XREF: sub_406ED0:loc_408FB3↓p
.text:00403E60
.text:00403E60 arg_0           = dword ptr  4
.text:00403E60 arg_4           = dword ptr  8
.text:00403E60 arg_8           = dword ptr  0Ch
.text:00403E60 arg_C           = dword ptr  10h
.text:00403E60 arg_10          = dword ptr  14h
.text:00403E60 arg_14          = dword ptr  18h
.text:00403E60
.text:00403E60                 push    ebp
.text:00403E61                 push    edi
.text:00403E62                 push    esi
.text:00403E63                 push    ebx
.text:00403E64                 mov     ecx, [esp+10h+arg_4]
.text:00403E68                 mov     esi, [esp+10h+arg_0]
.text:00403E6C                 mov     ebx, [esp+10h+arg_C]
.text:00403E70                 mov     edx, [ecx]
.text:00403E72                 cmp     edx, [esp+10h+arg_8]
.text:00403E76                 jz      loc_403F2A
.text:00403E7C                 lea     edi, [edx+1]
.text:00403E7F                 mov     [ecx], edi
.text:00403E81                 xor     ecx, ecx
.text:00403E83                 test    [esp+10h+arg_10], 10000h
.text:00403E8B                 setz    cl
.text:00403E8E                 dec     ecx
.text:00403E8F                 and     ecx, 0Bh
.text:00403E92                 test    ebx, ebx
.text:00403E94                 jz      loc_403F25
.text:00403E9A                 movzx   edi, byte ptr [edx]
.text:00403E9D                 and     esi, 0FFh
.text:00403EA3                 movsx   esi, byte ptr [esi+ebx]
.text:00403EA7                 movzx   ebp, byte ptr [edi+ebx]
.text:00403EAB
.text:00403EAB loc_403EAB:                             ; CODE XREF: sub_403E60+C8↓j
.text:00403EAB                 cmp     esi, ebp
.text:00403EAD                 mov     edx, esi
.text:00403EAF                 ja      short loc_403F1E
.text:00403EB1                 jmp     short loc_403EC0
.text:00403EB1 ; ---------------------------------------------------------------------------
.text:00403EB3                 align 10h
.text:00403EC0
.text:00403EC0 loc_403EC0:                             ; CODE XREF: sub_403E60+51↑j
.text:00403EC0                                         ; sub_403E60+BC↓j
.text:00403EC0                 test    ebx, ebx
.text:00403EC2                 movzx   eax, dl
.text:00403EC5                 jz      short loc_403ECE
.text:00403EC7                 movzx   ecx, dl
.text:00403ECA                 movzx   eax, byte ptr [ecx+ebx]
.text:00403ECE
.text:00403ECE loc_403ECE:                             ; CODE XREF: sub_403E60+65↑j
.text:00403ECE                 mov     edi, [esp+10h+arg_14]
.text:00403ED2                 sar     eax, 3
.text:00403ED5                 add     edi, eax
.text:00403ED7                 test    ebx, ebx
.text:00403ED9                 movzx   eax, dl
.text:00403EDC                 jz      short loc_403EE5
.text:00403EDE                 movzx   esi, dl
.text:00403EE1                 movzx   eax, byte ptr [esi+ebx]
.text:00403EE5
.text:00403EE5 loc_403EE5:                             ; CODE XREF: sub_403E60+7C↑j
.text:00403EE5                 mov     esi, [esp+10h+arg_14]
.text:00403EE9                 sar     eax, 3
.text:00403EEC                 movzx   ecx, dl
.text:00403EEF                 add     eax, esi
.text:00403EF1                 test    ebx, ebx
.text:00403EF3                 movzx   esi, byte ptr [eax]
.text:00403EF6                 jz      short loc_403EFF
.text:00403EF8                 movzx   eax, dl
.text:00403EFB                 movzx   ecx, byte ptr [eax+ebx]
.text:00403EFF
.text:00403EFF loc_403EFF:                             ; CODE XREF: sub_403E60+96↑j
.text:00403EFF                 mov     eax, ecx
.text:00403F01                 inc     edx
.text:00403F02                 and     eax, 1F8h
.text:00403F07                 sub     ecx, eax
.text:00403F09                 mov     eax, 1
.text:00403F0E                 shl     eax, cl
.text:00403F10                 mov     ecx, eax
.text:00403F12                 mov     eax, esi
.text:00403F14                 or      al, cl
.text:00403F16                 mov     [edi], al
.text:00403F18                 xor     ecx, ecx
.text:00403F1A                 cmp     edx, ebp
.text:00403F1C                 jbe     short loc_403EC0
.text:00403F1E
.text:00403F1E loc_403F1E:                             ; CODE XREF: sub_403E60+4F↑j
.text:00403F1E                 mov     eax, ecx
.text:00403F20
.text:00403F20 loc_403F20:                             ; CODE XREF: sub_403E60+CF↓j
.text:00403F20                 pop     ebx
.text:00403F21                 pop     esi
.text:00403F22                 pop     edi
.text:00403F23                 pop     ebp
.text:00403F24                 retn
.text:00403F25 ; ---------------------------------------------------------------------------
.text:00403F25
.text:00403F25 loc_403F25:                             ; CODE XREF: sub_403E60+34↑j
.text:00403F25                 movzx   ebp, byte ptr [edx]
.text:00403F28                 jmp     short loc_403EAB
.text:00403F2A ; ---------------------------------------------------------------------------
.text:00403F2A
.text:00403F2A loc_403F2A:                             ; CODE XREF: sub_403E60+16↑j
.text:00403F2A                 mov     eax, 0Bh
.text:00403F2F                 jmp     short loc_403F20
.text:00403F2F sub_403E60      endp
.text:00403F2F
.text:00403F2F ; ---------------------------------------------------------------------------
.text:00403F31                 db 0EBh, 0Dh, 90h
.text:00403F34                 align 10h
.text:00403F40 jpt_404237      dd offset loc_4047EB    ; DATA XREF: sub_403FC0:loc_404230↓r
.text:00403F40                                         ; sub_403FC0+BEF↓r ...
.text:00403F40                 dd offset loc_404803    ; jump table for switch statement
.text:00403F40                 dd offset loc_404808
.text:00403F40                 dd offset loc_404903
.text:00403F40                 dd offset loc_406166
.text:00403F40                 dd offset loc_406070
.text:00403F58 jpt_4049C4      dd offset loc_405F84    ; DATA XREF: sub_403FC0+9FD↓r
.text:00403F58                 dd offset loc_405B80    ; jump table for switch statement
.text:00403F60                 dd offset loc_4059E3
.text:00403F64                 dd offset loc_405999
.text:00403F68                 dd offset loc_40593D
.text:00403F6C                 dd offset loc_405900
.text:00403F70                 dd offset loc_4058E6
.text:00403F74                 dd offset loc_404F5A
.text:00403F78                 dd offset loc_4058E1
.text:00403F7C                 dd offset loc_4058DC
.text:00403F80                 dd offset loc_405761
.text:00403F84                 dd offset loc_405565
.text:00403F88                 dd offset loc_4054CC
.text:00403F8C                 dd offset loc_405346
.text:00403F90                 dd offset loc_4051C0
.text:00403F94                 dd offset loc_404F78
.text:00403F98                 dd offset loc_404F2F
.text:00403F9C                 dd offset loc_404ED7
.text:00403FA0                 dd offset loc_404E27
.text:00403FA4                 dd offset loc_404D76
.text:00403FA8                 dd offset loc_404C8A
.text:00403FAC                 dd offset loc_404BB8
.text:00403FB0                 dd offset loc_404AB2
.text:00403FB4                 dd offset loc_4049C6
.text:00403FB8                 align 10h
.text:00403FC0
.text:00403FC0 ; =============== S U B R O U T I N E =======================================
.text:00403FC0
.text:00403FC0
.text:00403FC0 sub_403FC0      proc near               ; CODE XREF: .text:00406D1E↓p
.text:00403FC0                                         ; .text:00406D30↓j ...
.text:00403FC0
.text:00403FC0 Size            = dword ptr -0BCh
.text:00403FC0 var_B8          = dword ptr -0B8h
.text:00403FC0 var_B4          = dword ptr -0B4h
.text:00403FC0 var_B0          = dword ptr -0B0h
.text:00403FC0 var_A5          = byte ptr -0A5h
.text:00403FC0 var_A4          = dword ptr -0A4h
.text:00403FC0 var_A0          = dword ptr -0A0h
.text:00403FC0 var_9C          = dword ptr -9Ch
.text:00403FC0 var_97          = byte ptr -97h
.text:00403FC0 var_96          = byte ptr -96h
.text:00403FC0 var_95          = byte ptr -95h
.text:00403FC0 var_94          = dword ptr -94h
.text:00403FC0 var_90          = dword ptr -90h
.text:00403FC0 var_8C          = dword ptr -8Ch
.text:00403FC0 var_88          = dword ptr -88h
.text:00403FC0 var_84          = dword ptr -84h
.text:00403FC0 var_80          = dword ptr -80h
.text:00403FC0 var_7C          = dword ptr -7Ch
.text:00403FC0 var_78          = dword ptr -78h
.text:00403FC0 var_74          = dword ptr -74h
.text:00403FC0 var_70          = dword ptr -70h
.text:00403FC0 var_6C          = dword ptr -6Ch
.text:00403FC0 var_68          = dword ptr -68h
.text:00403FC0 var_64          = dword ptr -64h
.text:00403FC0 var_60          = dword ptr -60h
.text:00403FC0 var_5C          = dword ptr -5Ch
.text:00403FC0 var_58          = dword ptr -58h
.text:00403FC0 var_54          = dword ptr -54h
.text:00403FC0 var_50          = dword ptr -50h
.text:00403FC0 var_4C          = dword ptr -4Ch
.text:00403FC0 var_48          = dword ptr -48h
.text:00403FC0 var_44          = dword ptr -44h
.text:00403FC0 var_40          = dword ptr -40h
.text:00403FC0 var_3C          = dword ptr -3Ch
.text:00403FC0 var_38          = dword ptr -38h
.text:00403FC0 var_34          = dword ptr -34h
.text:00403FC0 var_30          = dword ptr -30h
.text:00403FC0 Src             = dword ptr -2Ch
.text:00403FC0 var_28          = dword ptr -28h
.text:00403FC0 var_24          = dword ptr -24h
.text:00403FC0 arg_0           = dword ptr  4
.text:00403FC0 arg_4           = dword ptr  8
.text:00403FC0 arg_8           = dword ptr  0Ch
.text:00403FC0 arg_C           = dword ptr  10h
.text:00403FC0 arg_10          = dword ptr  14h
.text:00403FC0 arg_14          = dword ptr  18h
.text:00403FC0 arg_18          = dword ptr  1Ch
.text:00403FC0 arg_1C          = dword ptr  20h
.text:00403FC0
.text:00403FC0                 push    ebp
.text:00403FC1                 push    edi
.text:00403FC2                 push    esi
.text:00403FC3                 push    ebx
.text:00403FC4                 sub     esp, 0ACh
.text:00403FCA                 mov     ebx, [esp+0BCh+arg_0]
.text:00403FD1                 mov     [esp+0BCh+var_54], 0
.text:00403FD9                 mov     ecx, [esp+0BCh+arg_0]
.text:00403FE0                 mov     esi, [esp+0BCh+arg_1C]
.text:00403FE7                 mov     [esp+0BCh+var_60], 101h
.text:00403FEF                 mov     ebp, [ebx+8]
.text:00403FF2                 mov     edi, [ecx]
.text:00403FF4                 mov     [esp+0BCh+var_64], 100h
.text:00403FFC                 mov     eax, [ebx+18h]
.text:00403FFF                 mov     edx, [ebx+14h]
.text:00404002                 mov     [esp+0BCh+var_4C], edi
.text:00404006                 inc     eax
.text:00404007                 add     edi, ebp
.text:00404009                 mov     [esp+0BCh+var_58], edx
.text:0040400D                 mov     [esp+0BCh+var_50], edi
.text:00404011                 mov     [esp+0BCh+var_5C], eax
.text:00404015                 mov     [esp+0BCh+var_7C], 0
.text:0040401D                 mov     [esp+0BCh+var_88], 0
.text:00404025                 mov     [esp+0BCh+var_8C], 0
.text:0040402D                 mov     [esp+0BCh+Size], 14h ; Size
.text:00404034                 call    malloc
.text:00404039                 mov     [esp+0BCh+Src], eax
.text:00404040                 mov     edx, eax
.text:00404042                 test    edx, edx
.text:00404044                 mov     eax, 0FFFFFFFEh
.text:00404049                 jz      loc_404717
.text:0040404F                 mov     edx, [esp+0BCh+arg_0]
.text:00404056                 xor     edi, edi
.text:00404058                 mov     ebp, 5
.text:0040405D                 mov     [esp+0BCh+var_28], ebp
.text:00404064                 mov     [esp+0BCh+var_24], edi
.text:0040406B                 mov     ebx, [edx+18h]
.text:0040406E                 test    ebx, ebx
.text:00404070                 jnz     loc_406257
.text:00404076                 mov     [esp+0BCh+var_90], 0
.text:0040407E                 mov     [esp+0BCh+var_84], 0
.text:00404086                 mov     [esp+0BCh+var_80], 0
.text:0040408E                 mov     [esp+0BCh+var_74], 0
.text:00404096                 mov     [esp+0BCh+var_70], 0
.text:0040409E                 mov     [esp+0BCh+var_6C], 0
.text:004040A6                 mov     [esp+0BCh+var_68], 0
.text:004040AE                 mov     [esp+0BCh+var_94], 0
.text:004040B6                 mov     [esp+0BCh+var_78], 0
.text:004040BE
.text:004040BE loc_4040BE:                             ; CODE XREF: sub_403FC0+236C↓j
.text:004040BE                 mov     eax, [esp+0BCh+arg_14]
.text:004040C5                 test    eax, eax
.text:004040C7                 js      loc_4047B5
.text:004040CD                 mov     ebp, [esp+0BCh+arg_8]
.text:004040D4                 mov     ecx, [esp+0BCh+arg_10]
.text:004040DB                 add     ebp, ecx
.text:004040DD                 cmp     [esp+0BCh+arg_14], ebp
.text:004040E4                 jg      loc_4047B5
.text:004040EA                 mov     ebp, 1
.text:004040EF                 cmp     ebp, [esp+0BCh+var_5C]
.text:004040F3                 jnb     short loc_404138
.text:004040F5                 mov     eax, [esp+0BCh+var_78]
.text:004040F9                 add     eax, 4
.text:004040FC
.text:004040FC loc_4040FC:                             ; CODE XREF: sub_403FC0+176↓j
.text:004040FC                 mov     ecx, [esp+0BCh+var_74]
.text:00404100                 mov     ebx, [esp+0BCh+var_70]
.text:00404104                 mov     edx, [esp+0BCh+var_6C]
.text:00404108                 mov     dword ptr [ecx+ebp*4], offset unk_419330
.text:0040410F                 mov     edi, [esp+0BCh+var_68]
.text:00404113                 mov     dword ptr [ebx+ebp*4], offset unk_419330
.text:0040411A                 mov     dword ptr [edx+ebp*4], offset unk_419330
.text:00404121                 mov     dword ptr [edi+ebp*4], offset unk_419330
.text:00404128                 inc     ebp
.text:00404129                 or      dword ptr [eax], 3
.text:0040412C                 and     byte ptr [eax], 0E3h
.text:0040412F                 add     eax, 4
.text:00404132                 cmp     ebp, [esp+0BCh+var_5C]
.text:00404136                 jb      short loc_4040FC
.text:00404138
.text:00404138 loc_404138:                             ; CODE XREF: sub_403FC0+133↑j
.text:00404138                 mov     eax, [esp+0BCh+arg_10]
.text:0040413F                 test    eax, eax
.text:00404141                 jnz     short loc_40417C
.text:00404143                 mov     ebp, [esp+0BCh+arg_4]
.text:0040414A                 test    ebp, ebp
.text:0040414C                 jz      short loc_40417C
.text:0040414E                 mov     ebx, [esp+0BCh+arg_4]
.text:00404155                 xor     edx, edx
.text:00404157                 xor     edi, edi
.text:00404159                 mov     [esp+0BCh+arg_4], edx
.text:00404160                 mov     ecx, [esp+0BCh+arg_8]
.text:00404167                 mov     [esp+0BCh+arg_8], edi
.text:0040416E                 mov     [esp+0BCh+arg_C], ebx
.text:00404175                 mov     [esp+0BCh+arg_10], ecx
.text:0040417C
.text:0040417C loc_40417C:                             ; CODE XREF: sub_403FC0+181↑j
.text:0040417C                                         ; sub_403FC0+18C↑j
.text:0040417C                 mov     ecx, [esp+0BCh+arg_4]
.text:00404183                 mov     eax, [esp+0BCh+arg_8]
.text:0040418A                 mov     ebp, [esp+0BCh+arg_C]
.text:00404191                 mov     edi, [esp+0BCh+arg_10]
.text:00404198                 add     ecx, eax
.text:0040419A                 mov     [esp+0BCh+var_34], ecx
.text:004041A1                 add     ebp, edi
.text:004041A3                 cmp     esi, [esp+0BCh+arg_8]
.text:004041AA                 mov     [esp+0BCh+var_38], ebp
.text:004041B1                 jg      loc_406232
.text:004041B7                 mov     edx, [esp+0BCh+arg_4]
.text:004041BE                 add     esi, edx
.text:004041C0                 mov     [esp+0BCh+var_3C], esi
.text:004041C7                 mov     esi, [esp+0BCh+arg_C]
.text:004041CE
.text:004041CE loc_4041CE:                             ; CODE XREF: sub_403FC0+2292↓j
.text:004041CE                 mov     [esp+0BCh+var_40], esi
.text:004041D2                 mov     ecx, [esp+0BCh+arg_8]
.text:004041D9                 test    ecx, ecx
.text:004041DB                 jle     loc_406208
.text:004041E1                 mov     eax, [esp+0BCh+arg_8]
.text:004041E8                 cmp     [esp+0BCh+arg_14], eax
.text:004041EF                 jg      loc_406208
.text:004041F5                 mov     edx, [esp+0BCh+arg_4]
.text:004041FC                 mov     ebx, [esp+0BCh+arg_14]
.text:00404203                 mov     esi, [esp+0BCh+var_3C]
.text:0040420A                 add     edx, ebx
.text:0040420C                 mov     [esp+0BCh+var_44], edx
.text:00404210                 mov     [esp+0BCh+var_48], esi
.text:00404214
.text:00404214 loc_404214:                             ; CODE XREF: sub_403FC0+469↓j
.text:00404214                                         ; sub_403FC0+47A↓j ...
.text:00404214                 mov     edx, [esp+0BCh+var_50]
.text:00404218                 mov     eax, offset loc_404239
.text:0040421D                 cmp     [esp+0BCh+var_4C], edx
.text:00404221                 jz      short loc_404237
.text:00404223
.text:00404223 loc_404223:                             ; CODE XREF: sub_403FC0+838↓j
.text:00404223                 mov     ebp, [esp+0BCh+var_4C]
.text:00404227                 movzx   ebx, byte ptr [ebp+0]
.text:0040422B                 inc     ebp
.text:0040422C                 mov     [esp+0BCh+var_4C], ebp
.text:00404230
.text:00404230 loc_404230:                             ; CODE XREF: sub_403FC0+1CA0↓j
.text:00404230                 mov     eax, ds:jpt_404237[ebx*4] ; switch 6 cases
.text:00404237
.text:00404237 loc_404237:                             ; CODE XREF: sub_403FC0+261↑j
.text:00404237                                         ; sub_403FC0+83E↓j ...
.text:00404237                 jmp     eax             ; switch jump
.text:00404239 ; ---------------------------------------------------------------------------
.text:00404239
.text:00404239 loc_404239:                             ; DATA XREF: sub_403FC0+258↑o
.text:00404239                                         ; sub_403FC0+82F↓o ...
.text:00404239                 mov     eax, [esp+0BCh+var_40]
.text:0040423D                 cmp     [esp+0BCh+var_44], eax
.text:00404241                 jz      loc_4044C9
.text:00404247                 mov     edi, [esp+0BCh+arg_8]
.text:0040424E                 xor     edx, edx
.text:00404250                 test    edi, edi
.text:00404252                 jz      short loc_40426C
.text:00404254                 mov     eax, [esp+0BCh+var_88]
.text:00404258                 cmp     [esp+0BCh+arg_4], eax
.text:0040425F                 ja      short loc_40426C
.text:00404261                 mov     esi, [esp+0BCh+var_34]
.text:00404268                 cmp     eax, esi
.text:0040426A                 jbe     short loc_40426E
.text:0040426C
.text:0040426C loc_40426C:                             ; CODE XREF: sub_403FC0+292↑j
.text:0040426C                                         ; sub_403FC0+29F↑j
.text:0040426C                 mov     dl, 1
.text:0040426E
.text:0040426E loc_40426E:                             ; CODE XREF: sub_403FC0+2AA↑j
.text:0040426E                 mov     ebp, [esp+0BCh+var_3C]
.text:00404275                 cmp     [esp+0BCh+var_48], ebp
.text:00404279                 setz    cl
.text:0040427C                 cmp     dl, cl
.text:0040427E                 jz      loc_4047D8
.text:00404284                 mov     edx, [esp+0BCh+var_88]
.text:00404288                 cmp     [esp+0BCh+var_44], edx
.text:0040428C                 setnbe  al
.text:0040428F
.text:0040428F loc_40428F:                             ; CODE XREF: sub_403FC0+826↓j
.text:0040428F                 mov     esi, [esp+0BCh+var_24]
.text:00404296                 test    esi, esi
.text:00404298                 jz      loc_4047BF
.text:0040429E                 mov     ecx, [esp+0BCh+var_7C]
.text:004042A2                 test    ecx, ecx
.text:004042A4                 jz      short loc_4042AA
.text:004042A6                 test    al, al
.text:004042A8                 jz      short loc_4042F0
.text:004042AA
.text:004042AA loc_4042AA:                             ; CODE XREF: sub_403FC0+2E4↑j
.text:004042AA                 mov     [esp+0BCh+var_7C], 1
.text:004042B2                 mov     eax, [esp+0BCh+var_5C]
.text:004042B6                 mov     ebp, 1
.text:004042BB                 mov     edi, [esp+0BCh+var_44]
.text:004042BF                 cmp     ebp, eax
.text:004042C1                 mov     [esp+0BCh+var_88], edi
.text:004042C5                 jnb     short loc_4042F0
.text:004042C7
.text:004042C7 loc_4042C7:                             ; CODE XREF: sub_403FC0+328↓j
.text:004042C7                 mov     edx, [esp+0BCh+var_68]
.text:004042CB                 mov     ecx, [esp+0BCh+var_80]
.text:004042CF                 mov     eax, [esp+0BCh+var_6C]
.text:004042D3                 mov     edi, [edx+ebp*4]
.text:004042D6                 mov     edx, [esp+0BCh+var_84]
.text:004042DA                 mov     [ecx+ebp*4], edi
.text:004042DD                 mov     ebx, [eax+ebp*4]
.text:004042E0                 mov     [edx+ebp*4], ebx
.text:004042E3                 inc     ebp
.text:004042E4                 cmp     ebp, [esp+0BCh+var_5C]
.text:004042E8                 jb      short loc_4042C7
.text:004042EA                 lea     esi, [esi+0]
.text:004042F0
.text:004042F0 loc_4042F0:                             ; CODE XREF: sub_403FC0+2E8↑j
.text:004042F0                                         ; sub_403FC0+305↑j ...
.text:004042F0                 test    esi, esi
.text:004042F2                 mov     eax, esi
.text:004042F4                 jz      loc_40445E
.text:004042FA                 mov     ebx, [esp+0BCh+Src]
.text:00404301                 dec     esi
.text:00404302                 mov     [esp+0BCh+var_24], esi
.text:00404309                 mov     esi, [ebx+esi*4]
.text:0040430C                 test    esi, esi
.text:0040430E                 jz      short loc_404314
.text:00404310                 mov     [esp+0BCh+var_44], esi
.text:00404314
.text:00404314 loc_404314:                             ; CODE XREF: sub_403FC0+34E↑j
.text:00404314                 lea     ecx, [eax-2]
.text:00404317                 lea     edx, [eax-3]
.text:0040431A                 mov     [esp+0BCh+var_24], ecx
.text:00404321                 mov     ebp, [ebx+ecx*4]
.text:00404324                 lea     ecx, [eax-4]
.text:00404327                 mov     [esp+0BCh+var_24], edx
.text:0040432E                 mov     [esp+0BCh+var_4C], ebp
.text:00404332                 mov     edi, [ebx+edx*4]
.text:00404335                 mov     [esp+0BCh+var_24], ecx
.text:0040433C                 mov     [esp+0BCh+var_64], edi
.text:00404340                 mov     ebp, [ebx+ecx*4]
.text:00404343                 mov     ecx, [esp+0BCh+var_64]
.text:00404347                 mov     [esp+0BCh+var_60], ebp
.text:0040434B                 cmp     ecx, ebp
.text:0040434D                 jb      short loc_4043A9
.text:0040434F                 nop
.text:00404350
.text:00404350 loc_404350:                             ; CODE XREF: sub_403FC0+3E7↓j
.text:00404350                 mov     eax, [esp+0BCh+var_24]
.text:00404357                 mov     ebp, [esp+0BCh+var_78]
.text:0040435B                 dec     eax
.text:0040435C                 mov     [esp+0BCh+var_24], eax
.text:00404363                 mov     edi, [ebx+eax*4]
.text:00404366                 mov     [ebp+ecx*4+0], edi
.text:0040436A                 mov     ebp, [esp+0BCh+var_24]
.text:00404371                 mov     esi, [esp+0BCh+Src]
.text:00404378                 lea     edx, [ebp-1]
.text:0040437B                 sub     ebp, 2
.text:0040437E                 mov     ebx, esi
.text:00404380                 mov     [esp+0BCh+var_24], edx
.text:00404387                 mov     edi, [esi+edx*4]
.text:0040438A                 mov     edx, [esp+0BCh+var_6C]
.text:0040438E                 mov     [esp+0BCh+var_24], ebp
.text:00404395                 mov     [edx+ecx*4], edi
.text:00404398                 mov     edi, [esi+ebp*4]
.text:0040439B                 mov     esi, [esp+0BCh+var_68]
.text:0040439F                 mov     [esi+ecx*4], edi
.text:004043A2                 dec     ecx
.text:004043A3                 cmp     ecx, [esp+0BCh+var_60]
.text:004043A7                 jnb     short loc_404350
.text:004043A9
.text:004043A9 loc_4043A9:                             ; CODE XREF: sub_403FC0+38D↑j
.text:004043A9                 mov     [esp+0BCh+var_8C], 0
.text:004043B1                 mov     ebx, [esp+0BCh+var_4C]
.text:004043B5                 test    ebx, ebx
.text:004043B7                 jz      short loc_404412
.text:004043B9                 mov     edx, [esp+0BCh+var_50]
.text:004043BD                 cmp     [esp+0BCh+var_4C], edx
.text:004043C1                 jnb     short loc_40441E
.text:004043C3                 mov     ecx, [esp+0BCh+var_4C]
.text:004043C7                 xor     edx, edx
.text:004043C9                 movzx   eax, byte ptr [ecx]
.text:004043CC                 cmp     eax, 12h
.text:004043CF                 ja      loc_404455
.text:004043D5                 cmp     eax, 11h
.text:004043D8                 jnb     short loc_4043E0
.text:004043DA                 cmp     eax, 0Dh
.text:004043DD                 jnz     short loc_40441E
.text:004043DF                 nop
.text:004043E0
.text:004043E0 loc_4043E0:                             ; CODE XREF: sub_403FC0+418↑j
.text:004043E0                                         ; sub_403FC0+49C↓j
.text:004043E0                 mov     ebp, [esp+0BCh+var_4C]
.text:004043E4                 mov     ecx, [esp+0BCh+var_4C]
.text:004043E8                 inc     ebp
.text:004043E9                 mov     [esp+0BCh+var_30], ebp
.text:004043F0                 movsx   esi, byte ptr [ebp+1]
.text:004043F4                 movzx   eax, byte ptr [ecx+1]
.text:004043F8                 shl     esi, 8
.text:004043FB                 lea     edi, [esi+eax]
.text:004043FE                 lea     eax, [edi+ecx+3]
.text:00404402                 test    dl, dl
.text:00404404                 mov     [esp+0BCh+var_30], eax
.text:0040440B                 jz      short loc_404450
.text:0040440D                 cmp     byte ptr [eax], 15h
.text:00404410
.text:00404410 loc_404410:                             ; CODE XREF: sub_403FC0+493↓j
.text:00404410                 jnz     short loc_40441E
.text:00404412
.text:00404412 loc_404412:                             ; CODE XREF: sub_403FC0+3F7↑j
.text:00404412                                         ; sub_403FC0+889↓j ...
.text:00404412                 mov     esi, [esp+0BCh+var_24]
.text:00404419                 jmp     loc_4042F0
.text:0040441E ; ---------------------------------------------------------------------------
.text:0040441E
.text:0040441E loc_40441E:                             ; CODE XREF: sub_403FC0+401↑j
.text:0040441E                                         ; sub_403FC0+41D↑j ...
.text:0040441E                 mov     ebx, [esp+0BCh+arg_4]
.text:00404425                 cmp     [esp+0BCh+var_44], ebx
.text:00404429                 jb      loc_404214
.text:0040442F                 mov     edi, [esp+0BCh+var_34]
.text:00404436                 cmp     [esp+0BCh+var_44], edi
.text:0040443A                 ja      loc_404214
.text:00404440                 mov     edx, [esp+0BCh+var_3C]
.text:00404447                 mov     [esp+0BCh+var_48], edx
.text:0040444B                 jmp     loc_404214
.text:00404450 ; ---------------------------------------------------------------------------
.text:00404450
.text:00404450 loc_404450:                             ; CODE XREF: sub_403FC0+44B↑j
.text:00404450                 cmp     byte ptr [eax], 0Fh
.text:00404453                 jmp     short loc_404410
.text:00404455 ; ---------------------------------------------------------------------------
.text:00404455
.text:00404455 loc_404455:                             ; CODE XREF: sub_403FC0+40F↑j
.text:00404455                 cmp     eax, 16h
.text:00404458                 jnz     short loc_40441E
.text:0040445A                 mov     dl, 1
.text:0040445C                 jmp     short loc_4043E0
.text:0040445E ; ---------------------------------------------------------------------------
.text:0040445E
.text:0040445E loc_40445E:                             ; CODE XREF: sub_403FC0+334↑j
.text:0040445E                 mov     ecx, [esp+0BCh+var_7C]
.text:00404462                 test    ecx, ecx
.text:00404464                 jz      loc_4047B5
.text:0040446A
.text:0040446A loc_40446A:                             ; CODE XREF: sub_403FC0+813↓j
.text:0040446A                 mov     esi, [esp+0BCh+var_88]
.text:0040446E                 mov     ebx, [esp+0BCh+arg_4]
.text:00404475                 mov     [esp+0BCh+var_44], esi
.text:00404479                 cmp     esi, ebx
.text:0040447B                 jb      short loc_404493
.text:0040447D                 mov     eax, [esp+0BCh+var_34]
.text:00404484                 mov     ecx, [esp+0BCh+var_3C]
.text:0040448B                 cmp     esi, eax
.text:0040448D                 mov     [esp+0BCh+var_48], ecx
.text:00404491                 jbe     short loc_40449B
.text:00404493
.text:00404493 loc_404493:                             ; CODE XREF: sub_403FC0+4BB↑j
.text:00404493                 mov     esi, [esp+0BCh+var_40]
.text:00404497                 mov     [esp+0BCh+var_48], esi
.text:0040449B
.text:0040449B loc_40449B:                             ; CODE XREF: sub_403FC0+4D1↑j
.text:0040449B                 mov     ebp, 1
.text:004044A0                 cmp     ebp, [esp+0BCh+var_5C]
.text:004044A4                 jnb     short loc_4044C9
.text:004044A6
.text:004044A6 loc_4044A6:                             ; CODE XREF: sub_403FC0+507↓j
.text:004044A6                 mov     eax, [esp+0BCh+var_80]
.text:004044AA                 mov     ecx, [esp+0BCh+var_68]
.text:004044AE                 mov     ebx, [esp+0BCh+var_84]
.text:004044B2                 mov     edi, [eax+ebp*4]
.text:004044B5                 mov     [ecx+ebp*4], edi
.text:004044B8                 mov     edx, [ebx+ebp*4]
.text:004044BB                 mov     edi, [esp+0BCh+var_6C]
.text:004044BF                 mov     [edi+ebp*4], edx
.text:004044C2                 inc     ebp
.text:004044C3                 cmp     ebp, [esp+0BCh+var_5C]
.text:004044C7                 jb      short loc_4044A6
.text:004044C9
.text:004044C9 loc_4044C9:                             ; CODE XREF: sub_403FC0+281↑j
.text:004044C9                                         ; sub_403FC0+4E4↑j ...
.text:004044C9                 mov     ebp, [esp+0BCh+arg_18]
.text:004044D0                 test    ebp, ebp
.text:004044D2                 jz      loc_4046E2
.text:004044D8                 mov     edx, [esp+0BCh+arg_0]
.text:004044DF                 movzx   eax, byte ptr [edx+1Ch]
.text:004044E3                 test    al, 10h
.text:004044E5                 jnz     loc_4046E2
.text:004044EB                 shr     al, 1
.text:004044ED                 and     eax, 3
.text:004044F0                 jnz     loc_404748
.text:004044F6                 mov     eax, [esp+0BCh+var_5C]
.text:004044FA                 inc     eax
.text:004044FB                 cmp     eax, 1Eh
.text:004044FE                 jnb     short loc_404505
.text:00404500                 mov     eax, 1Eh
.text:00404505
.text:00404505 loc_404505:                             ; CODE XREF: sub_403FC0+53E↑j
.text:00404505                 mov     ebp, [esp+0BCh+arg_18]
.text:0040450C                 mov     [ebp+0], eax
.text:0040450F                 shl     eax, 2
.text:00404512                 mov     [esp+0BCh+Size], eax ; Size
.text:00404515                 call    malloc
.text:0040451A                 mov     edi, [esp+0BCh+arg_18]
.text:00404521                 mov     ebx, [edi]
.text:00404523                 mov     [edi+4], eax
.text:00404526                 shl     ebx, 2
.text:00404529                 mov     [esp+0BCh+Size], ebx ; Size
.text:0040452C                 call    malloc
.text:00404531                 mov     ecx, [esp+0BCh+arg_18]
.text:00404538                 mov     esi, [ecx+4]
.text:0040453B                 mov     [ecx+8], eax
.text:0040453E                 test    esi, esi
.text:00404540                 jz      loc_404741
.text:00404546                 test    eax, eax
.text:00404548                 jz      loc_404741
.text:0040454E                 mov     edx, [esp+0BCh+arg_0]
.text:00404555                 movzx   ecx, byte ptr [edx+1Ch]
.text:00404559                 and     cl, 0F9h
.text:0040455C                 or      cl, 2
.text:0040455F                 mov     [edx+1Ch], cl
.text:00404562
.text:00404562 loc_404562:                             ; CODE XREF: sub_403FC0+7ED↓j
.text:00404562                 mov     ecx, [esp+0BCh+arg_18]
.text:00404569                 mov     edx, [ecx]
.text:0040456B
.text:0040456B loc_40456B:                             ; CODE XREF: sub_403FC0+794↓j
.text:0040456B                                         ; sub_403FC0+7A9↓j
.text:0040456B                 test    edx, edx
.text:0040456D                 jz      short loc_4045B8
.text:0040456F                 mov     esi, [esp+0BCh+arg_18]
.text:00404576                 mov     edi, [esp+0BCh+var_3C]
.text:0040457D                 mov     edx, [esp+0BCh+arg_14]
.text:00404584                 cmp     [esp+0BCh+var_48], edi
.text:00404588                 mov     ebp, [esi+4]
.text:0040458B                 mov     [ebp+0], edx
.text:0040458E                 mov     edx, [esi+8]
.text:00404591                 jz      loc_40472F
.text:00404597                 mov     eax, [esp+0BCh+var_44]
.text:0040459B                 mov     esi, [esp+0BCh+arg_C]
.text:004045A2                 mov     ecx, [esp+0BCh+arg_8]
.text:004045A9                 sub     eax, esi
.text:004045AB                 add     eax, ecx
.text:004045AD
.text:004045AD loc_4045AD:                             ; CODE XREF: sub_403FC0+77C↓j
.text:004045AD                 mov     [edx], eax
.text:004045AF                 mov     edi, [esp+0BCh+arg_18]
.text:004045B6                 mov     edx, [edi]
.text:004045B8
.text:004045B8 loc_4045B8:                             ; CODE XREF: sub_403FC0+5AD↑j
.text:004045B8                 mov     ebp, 1
.text:004045BD
.text:004045BD loc_4045BD:                             ; CODE XREF: sub_403FC0+6A8↓j
.text:004045BD                 cmp     edx, [esp+0BCh+var_5C]
.text:004045C1                 mov     eax, edx
.text:004045C3                 jbe     short loc_4045C9
.text:004045C5                 mov     eax, [esp+0BCh+var_5C]
.text:004045C9
.text:004045C9 loc_4045C9:                             ; CODE XREF: sub_403FC0+603↑j
.text:004045C9                 cmp     ebp, eax
.text:004045CB                 jnb     loc_4046B3
.text:004045D1                 mov     ebx, [esp+0BCh+var_68]
.text:004045D5                 mov     eax, [ebx+ebp*4]
.text:004045D8                 cmp     eax, offset unk_419330
.text:004045DD                 jz      loc_404696
.text:004045E3                 mov     esi, [esp+0BCh+var_6C]
.text:004045E7                 mov     edx, [esi+ebp*4]
.text:004045EA                 cmp     edx, offset unk_419330
.text:004045F0                 jz      loc_404696
.text:004045F6                 mov     edi, [esp+0BCh+arg_8]
.text:004045FD                 mov     ebx, [esp+0BCh+arg_18]
.text:00404604                 test    edi, edi
.text:00404606                 mov     ecx, [ebx+4]
.text:00404609                 jz      short loc_404682
.text:0040460B                 cmp     [esp+0BCh+arg_4], eax
.text:00404612                 ja      short loc_404682
.text:00404614                 cmp     eax, [esp+0BCh+var_34]
.text:0040461B                 ja      short loc_404682
.text:0040461D                 mov     esi, [esp+0BCh+arg_4]
.text:00404624                 sub     eax, esi
.text:00404626
.text:00404626 loc_404626:                             ; CODE XREF: sub_403FC0+6D4↓j
.text:00404626                 mov     [ecx+ebp*4], eax
.text:00404629                 mov     esi, [esp+0BCh+arg_18]
.text:00404630                 mov     eax, [esp+0BCh+arg_8]
.text:00404637                 mov     ecx, [esi+8]
.text:0040463A                 test    eax, eax
.text:0040463C                 jz      short loc_40466D
.text:0040463E                 cmp     [esp+0BCh+arg_4], edx
.text:00404645                 ja      short loc_40466D
.text:00404647                 cmp     edx, [esp+0BCh+var_34]
.text:0040464E                 ja      short loc_40466D
.text:00404650                 mov     eax, edx
.text:00404652                 mov     edx, [esp+0BCh+arg_4]
.text:00404659                 sub     eax, edx
.text:0040465B
.text:0040465B loc_40465B:                             ; CODE XREF: sub_403FC0+6C0↓j
.text:0040465B                 mov     [ecx+ebp*4], eax
.text:0040465E
.text:0040465E loc_40465E:                             ; CODE XREF: sub_403FC0+6F1↓j
.text:0040465E                 mov     ecx, [esp+0BCh+arg_18]
.text:00404665                 inc     ebp
.text:00404666                 mov     edx, [ecx]
.text:00404668                 jmp     loc_4045BD
.text:0040466D ; ---------------------------------------------------------------------------
.text:0040466D
.text:0040466D loc_40466D:                             ; CODE XREF: sub_403FC0+67C↑j
.text:0040466D                                         ; sub_403FC0+685↑j ...
.text:0040466D                 mov     eax, [esp+0BCh+arg_C]
.text:00404674                 mov     edi, [esp+0BCh+arg_8]
.text:0040467B                 sub     edx, eax
.text:0040467D                 lea     eax, [edi+edx]
.text:00404680                 jmp     short loc_40465B
.text:00404682 ; ---------------------------------------------------------------------------
.text:00404682
.text:00404682 loc_404682:                             ; CODE XREF: sub_403FC0+649↑j
.text:00404682                                         ; sub_403FC0+652↑j ...
.text:00404682                 mov     ebx, [esp+0BCh+arg_C]
.text:00404689                 mov     edi, [esp+0BCh+arg_8]
.text:00404690                 sub     eax, ebx
.text:00404692                 add     eax, edi
.text:00404694                 jmp     short loc_404626
.text:00404696 ; ---------------------------------------------------------------------------
.text:00404696
.text:00404696 loc_404696:                             ; CODE XREF: sub_403FC0+61D↑j
.text:00404696                                         ; sub_403FC0+630↑j
.text:00404696                 mov     eax, [esp+0BCh+arg_18]
.text:0040469D                 mov     ecx, [eax+4]
.text:004046A0                 mov     edx, [eax+8]
.text:004046A3                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:004046AA                 mov     dword ptr [ecx+ebp*4], 0FFFFFFFFh
.text:004046B1                 jmp     short loc_40465E
.text:004046B3 ; ---------------------------------------------------------------------------
.text:004046B3
.text:004046B3 loc_4046B3:                             ; CODE XREF: sub_403FC0+60B↑j
.text:004046B3                 mov     ebp, [esp+0BCh+var_5C]
.text:004046B7                 cmp     ebp, edx
.text:004046B9                 jnb     short loc_4046E2
.text:004046BB                 mov     esi, [esp+0BCh+arg_18]
.text:004046C2                 mov     edx, [esi+4]
.text:004046C5                 mov     eax, [esi+8]
.text:004046C8
.text:004046C8 loc_4046C8:                             ; CODE XREF: sub_403FC0+720↓j
.text:004046C8                 mov     dword ptr [eax+ebp*4], 0FFFFFFFFh
.text:004046CF                 mov     edi, [esp+0BCh+arg_18]
.text:004046D6                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:004046DD                 inc     ebp
.text:004046DE                 cmp     ebp, [edi]
.text:004046E0                 jb      short loc_4046C8
.text:004046E2
.text:004046E2 loc_4046E2:                             ; CODE XREF: sub_403FC0+512↑j
.text:004046E2                                         ; sub_403FC0+525↑j ...
.text:004046E2                 mov     eax, [esp+0BCh+var_44]
.text:004046E6                 mov     ecx, [esp+0BCh+arg_14]
.text:004046ED                 mov     ebp, [esp+0BCh+var_3C]
.text:004046F4                 sub     eax, ecx
.text:004046F6                 cmp     [esp+0BCh+var_48], ebp
.text:004046FA                 jz      short loc_404722
.text:004046FC                 mov     ebx, [esp+0BCh+arg_8]
.text:00404703                 mov     ebp, eax
.text:00404705                 sub     [esp+0BCh+arg_C], ebx
.text:0040470C                 mov     edx, [esp+0BCh+arg_C]
.text:00404713                 sub     ebp, edx
.text:00404715
.text:00404715 loc_404715:                             ; CODE XREF: sub_403FC0+76D↓j
.text:00404715                 mov     eax, ebp
.text:00404717
.text:00404717 loc_404717:                             ; CODE XREF: sub_403FC0+89↑j
.text:00404717                                         ; sub_403FC0+786↓j ...
.text:00404717                 add     esp, 0ACh
.text:0040471D                 pop     ebx
.text:0040471E                 pop     esi
.text:0040471F                 pop     edi
.text:00404720                 pop     ebp
.text:00404721                 retn
.text:00404722 ; ---------------------------------------------------------------------------
.text:00404722
.text:00404722 loc_404722:                             ; CODE XREF: sub_403FC0+73A↑j
.text:00404722                 mov     esi, [esp+0BCh+arg_4]
.text:00404729                 mov     ebp, eax
.text:0040472B                 sub     ebp, esi
.text:0040472D                 jmp     short loc_404715
.text:0040472F ; ---------------------------------------------------------------------------
.text:0040472F
.text:0040472F loc_40472F:                             ; CODE XREF: sub_403FC0+5D1↑j
.text:0040472F                 mov     eax, [esp+0BCh+var_44]
.text:00404733                 mov     ebx, [esp+0BCh+arg_4]
.text:0040473A                 sub     eax, ebx
.text:0040473C                 jmp     loc_4045AD
.text:00404741 ; ---------------------------------------------------------------------------
.text:00404741
.text:00404741 loc_404741:                             ; CODE XREF: sub_403FC0+580↑j
.text:00404741                                         ; sub_403FC0+588↑j ...
.text:00404741                 mov     eax, 0FFFFFFFEh
.text:00404746                 jmp     short loc_404717
.text:00404748 ; ---------------------------------------------------------------------------
.text:00404748
.text:00404748 loc_404748:                             ; CODE XREF: sub_403FC0+530↑j
.text:00404748                 dec     eax
.text:00404749                 jz      short loc_404759
.text:0040474B                 mov     eax, [esp+0BCh+arg_18]
.text:00404752                 mov     edx, [eax]
.text:00404754                 jmp     loc_40456B
.text:00404759 ; ---------------------------------------------------------------------------
.text:00404759
.text:00404759 loc_404759:                             ; CODE XREF: sub_403FC0+789↑j
.text:00404759                 mov     ecx, [esp+0BCh+arg_18]
.text:00404760                 mov     eax, [esp+0BCh+var_5C]
.text:00404764                 mov     edx, [ecx]
.text:00404766                 inc     eax
.text:00404767                 cmp     edx, eax
.text:00404769                 jnb     loc_40456B
.text:0040476F                 mov     [ecx], eax
.text:00404771                 shl     eax, 2
.text:00404774                 mov     [esp+0BCh+var_B8], eax ; Size
.text:00404778                 mov     edx, [ecx+4]
.text:0040477B                 mov     [esp+0BCh+Size], edx ; Block
.text:0040477E                 call    realloc
.text:00404783                 mov     edi, [esp+0BCh+arg_18]
.text:0040478A                 mov     ebp, [edi]
.text:0040478C                 mov     [edi+4], eax
.text:0040478F                 shl     ebp, 2
.text:00404792                 mov     [esp+0BCh+var_B8], ebp ; Size
.text:00404796                 mov     ebx, [edi+8]
.text:00404799                 mov     [esp+0BCh+Size], ebx ; Block
.text:0040479C                 call    realloc
.text:004047A1                 mov     [edi+8], eax
.text:004047A4                 mov     esi, [edi+4]
.text:004047A7                 test    esi, esi
.text:004047A9                 jz      short loc_404741
.text:004047AB                 test    eax, eax
.text:004047AD                 jnz     loc_404562
.text:004047B3                 jmp     short loc_404741
.text:004047B5 ; ---------------------------------------------------------------------------
.text:004047B5
.text:004047B5 loc_4047B5:                             ; CODE XREF: sub_403FC0+107↑j
.text:004047B5                                         ; sub_403FC0+124↑j ...
.text:004047B5                 mov     eax, 0FFFFFFFFh
.text:004047BA                 jmp     loc_404717
.text:004047BF ; ---------------------------------------------------------------------------
.text:004047BF
.text:004047BF loc_4047BF:                             ; CODE XREF: sub_403FC0+2D8↑j
.text:004047BF                 mov     ebp, [esp+0BCh+var_7C]
.text:004047C3                 test    ebp, ebp
.text:004047C5                 jz      loc_4044C9
.text:004047CB                 test    al, al
.text:004047CD                 jnz     loc_4044C9
.text:004047D3                 jmp     loc_40446A
.text:004047D8 ; ---------------------------------------------------------------------------
.text:004047D8
.text:004047D8 loc_4047D8:                             ; CODE XREF: sub_403FC0+2BE↑j
.text:004047D8                 mov     ebx, [esp+0BCh+var_3C]
.text:004047DF                 cmp     [esp+0BCh+var_48], ebx
.text:004047E3                 setnz   al
.text:004047E6                 jmp     loc_40428F
.text:004047EB ; ---------------------------------------------------------------------------
.text:004047EB
.text:004047EB loc_4047EB:                             ; CODE XREF: sub_403FC0:loc_404237↑j
.text:004047EB                                         ; sub_403FC0+898↓j ...
.text:004047EB                 mov     edx, [esp+0BCh+var_50] ; jumptable 00404237 case 0
.text:004047EB                                         ; jumptable 00404BB6 case 0
.text:004047EB                                         ; jumptable 00404C88 case 0
.text:004047EF                 mov     eax, offset loc_404239
.text:004047F4                 cmp     [esp+0BCh+var_4C], edx
.text:004047F8                 jnz     loc_404223
.text:004047FE                 jmp     loc_404237
.text:00404803 ; ---------------------------------------------------------------------------
.text:00404803
.text:00404803 loc_404803:                             ; CODE XREF: sub_403FC0:loc_404237↑j
.text:00404803                                         ; sub_403FC0+BF6↓j ...
.text:00404803                 jmp     loc_4044C9      ; jumptable 00404237 case 1
.text:00404803                                         ; jumptable 00404BB6 case 1
.text:00404803                                         ; jumptable 00404C88 case 1
.text:00404808 ; ---------------------------------------------------------------------------
.text:00404808
.text:00404808 loc_404808:                             ; CODE XREF: sub_403FC0:loc_404237↑j
.text:00404808                                         ; sub_403FC0+BF6↓j ...
.text:00404808                 mov     eax, [esp+0BCh+var_4C] ; jumptable 00404237 case 2
.text:00404808                                         ; jumptable 00404BB6 case 2
.text:00404808                                         ; jumptable 00404C88 case 2
.text:0040480C                 mov     edi, [esp+0BCh+var_58]
.text:00404810                 movzx   ebp, byte ptr [eax]
.text:00404813                 inc     eax
.text:00404814                 test    edi, edi
.text:00404816                 mov     [esp+0BCh+var_4C], eax
.text:0040481A                 jz      loc_4048A9
.text:00404820
.text:00404820 loc_404820:                             ; CODE XREF: sub_403FC0+890↓j
.text:00404820                 mov     ecx, [esp+0BCh+var_48]
.text:00404824                 cmp     [esp+0BCh+var_44], ecx
.text:00404828                 jz      short loc_404886
.text:0040482A
.text:0040482A loc_40482A:                             ; CODE XREF: sub_403FC0+8E7↓j
.text:0040482A                 mov     ecx, [esp+0BCh+var_44]
.text:0040482E                 mov     ebx, [esp+0BCh+var_4C]
.text:00404832                 mov     edx, [esp+0BCh+var_58]
.text:00404836                 movzx   edi, byte ptr [ecx]
.text:00404839                 inc     ecx
.text:0040483A                 movzx   eax, byte ptr [ebx]
.text:0040483D                 inc     ebx
.text:0040483E                 mov     [esp+0BCh+var_4C], ebx
.text:00404842                 mov     [esp+0BCh+var_44], ecx
.text:00404846                 cmp     [edi+edx], al
.text:00404849                 jnz     loc_404412
.text:0040484F                 dec     ebp
.text:00404850                 jnz     short loc_404820
.text:00404852
.text:00404852 loc_404852:                             ; CODE XREF: sub_403FC0+916↓j
.text:00404852                 mov     ebp, [esp+0BCh+var_8C]
.text:00404856                 test    ebp, ebp
.text:00404858                 jnz     short loc_4047EB ; jumptable 00404237 case 0
.text:00404858                                         ; jumptable 00404BB6 case 0
.text:00404858                                         ; jumptable 00404C88 case 0
.text:0040485A                 mov     [esp+0BCh+var_8C], 1
.text:00404862                 mov     eax, [esp+0BCh+var_60]
.text:00404866                 mov     edx, [esp+0BCh+var_64]
.text:0040486A                 cmp     eax, edx
.text:0040486C                 ja      loc_4047EB      ; jumptable 00404237 case 0
.text:0040486C                                         ; jumptable 00404BB6 case 0
.text:0040486C                                         ; jumptable 00404C88 case 0
.text:00404872
.text:00404872 loc_404872:                             ; CODE XREF: sub_403FC0+8BF↓j
.text:00404872                 mov     esi, [esp+0BCh+var_78]
.text:00404876                 or      byte ptr [esi+eax*4], 18h
.text:0040487A                 inc     eax
.text:0040487B                 cmp     eax, [esp+0BCh+var_64]
.text:0040487F                 jbe     short loc_404872
.text:00404881                 jmp     loc_4047EB      ; jumptable 00404237 case 0
.text:00404881                                         ; jumptable 00404BB6 case 0
.text:00404881                                         ; jumptable 00404C88 case 0
.text:00404886 ; ---------------------------------------------------------------------------
.text:00404886
.text:00404886 loc_404886:                             ; CODE XREF: sub_403FC0+868↑j
.text:00404886                                         ; sub_403FC0+8E5↓j
.text:00404886                 mov     edx, [esp+0BCh+var_40]
.text:0040488A                 cmp     [esp+0BCh+var_48], edx
.text:0040488E                 jz      loc_404412
.text:00404894                 mov     [esp+0BCh+var_48], edx
.text:00404898                 mov     ebx, [esp+0BCh+arg_C]
.text:0040489F                 cmp     ebx, edx
.text:004048A1                 mov     [esp+0BCh+var_44], ebx
.text:004048A5                 jz      short loc_404886
.text:004048A7                 jmp     short loc_40482A
.text:004048A9 ; ---------------------------------------------------------------------------
.text:004048A9
.text:004048A9 loc_4048A9:                             ; CODE XREF: sub_403FC0+85A↑j
.text:004048A9                                         ; sub_403FC0+914↓j
.text:004048A9                 mov     esi, [esp+0BCh+var_48]
.text:004048AD                 cmp     [esp+0BCh+var_44], esi
.text:004048B1                 jz      short loc_4048E0
.text:004048B3
.text:004048B3 loc_4048B3:                             ; CODE XREF: sub_403FC0+941↓j
.text:004048B3                 mov     ebx, [esp+0BCh+var_4C]
.text:004048B7                 mov     eax, [esp+0BCh+var_44]
.text:004048BB                 movzx   edx, byte ptr [ebx]
.text:004048BE                 inc     ebx
.text:004048BF                 mov     [esp+0BCh+var_4C], ebx
.text:004048C3                 movzx   ecx, byte ptr [eax]
.text:004048C6                 inc     eax
.text:004048C7                 mov     [esp+0BCh+var_44], eax
.text:004048CB                 cmp     cl, dl
.text:004048CD                 jnz     loc_404412
.text:004048D3                 dec     ebp
.text:004048D4                 jnz     short loc_4048A9
.text:004048D6                 jmp     loc_404852
.text:004048D6 ; ---------------------------------------------------------------------------
.text:004048DB                 align 10h
.text:004048E0
.text:004048E0 loc_4048E0:                             ; CODE XREF: sub_403FC0+8F1↑j
.text:004048E0                                         ; sub_403FC0+93F↓j
.text:004048E0                 mov     esi, [esp+0BCh+var_40]
.text:004048E4                 cmp     [esp+0BCh+var_48], esi
.text:004048E8                 jz      loc_404412
.text:004048EE                 mov     [esp+0BCh+var_48], esi
.text:004048F2                 mov     edi, [esp+0BCh+arg_C]
.text:004048F9                 cmp     edi, esi
.text:004048FB                 mov     [esp+0BCh+var_44], edi
.text:004048FF                 jz      short loc_4048E0
.text:00404901                 jmp     short loc_4048B3
.text:00404903 ; ---------------------------------------------------------------------------
.text:00404903
.text:00404903 loc_404903:                             ; CODE XREF: sub_403FC0:loc_404237↑j
.text:00404903                                         ; sub_403FC0+BF6↓j ...
.text:00404903                 mov     edi, [esp+0BCh+var_48] ; jumptable 00404237 case 3
.text:00404903                                         ; jumptable 00404BB6 case 3
.text:00404903                                         ; jumptable 00404C88 case 3
.text:00404907                 cmp     [esp+0BCh+var_44], edi
.text:0040490B                 jz      loc_4061E2
.text:00404911
.text:00404911 loc_404911:                             ; CODE XREF: sub_403FC0+2243↓j
.text:00404911                 mov     eax, [esp+0BCh+arg_0]
.text:00404918                 test    byte ptr [eax+0Ch], 40h
.text:0040491C                 jnz     short loc_404940
.text:0040491E                 mov     ebx, [esp+0BCh+var_58]
.text:00404922                 test    ebx, ebx
.text:00404924                 jz      loc_4061D6
.text:0040492A                 mov     esi, [esp+0BCh+var_44]
.text:0040492E                 mov     edx, [esp+0BCh+var_58]
.text:00404932                 movzx   ebp, byte ptr [esi]
.text:00404935                 cmp     byte ptr [ebp+edx+0], 0Ah
.text:0040493A
.text:0040493A loc_40493A:                             ; CODE XREF: sub_403FC0+221D↓j
.text:0040493A                 jz      loc_404412
.text:00404940
.text:00404940 loc_404940:                             ; CODE XREF: sub_403FC0+95C↑j
.text:00404940                 mov     ecx, [esp+0BCh+arg_0]
.text:00404947                 cmp     byte ptr [ecx+0Ch], 0
.text:0040494B                 jns     short loc_40496F
.text:0040494D                 mov     ebx, [esp+0BCh+var_58]
.text:00404951                 test    ebx, ebx
.text:00404953                 jz      loc_4061CA
.text:00404959                 mov     edx, [esp+0BCh+var_44]
.text:0040495D                 mov     eax, [esp+0BCh+var_58]
.text:00404961                 movzx   ebp, byte ptr [edx]
.text:00404964                 cmp     byte ptr [ebp+eax+0], 0
.text:00404969
.text:00404969 loc_404969:                             ; CODE XREF: sub_403FC0+2211↓j
.text:00404969                 jz      loc_404412
.text:0040496F
.text:0040496F loc_40496F:                             ; CODE XREF: sub_403FC0+98B↑j
.text:0040496F                 mov     esi, [esp+0BCh+var_8C]
.text:00404973                 test    esi, esi
.text:00404975                 jnz     short loc_40499A
.text:00404977                 mov     [esp+0BCh+var_8C], 1
.text:0040497F                 mov     eax, [esp+0BCh+var_60]
.text:00404983                 mov     ecx, [esp+0BCh+var_64]
.text:00404987                 cmp     eax, ecx
.text:00404989                 ja      short loc_40499A
.text:0040498B
.text:0040498B loc_40498B:                             ; CODE XREF: sub_403FC0+9D8↓j
.text:0040498B                 mov     ebx, [esp+0BCh+var_78]
.text:0040498F                 or      byte ptr [ebx+eax*4], 18h
.text:00404993                 inc     eax
.text:00404994                 cmp     eax, [esp+0BCh+var_64]
.text:00404998                 jbe     short loc_40498B
.text:0040499A
.text:0040499A loc_40499A:                             ; CODE XREF: sub_403FC0+9B5↑j
.text:0040499A                                         ; sub_403FC0+9C9↑j
.text:0040499A                 inc     [esp+0BCh+var_44]
.text:0040499E
.text:0040499E loc_40499E:                             ; CODE XREF: sub_403FC0:loc_404A64↓j
.text:0040499E                                         ; sub_403FC0+B8C↓j ...
.text:0040499E                 mov     edx, [esp+0BCh+var_50]
.text:004049A2                 mov     eax, offset loc_404239
.text:004049A7                 cmp     [esp+0BCh+var_4C], edx
.text:004049AB                 jz      loc_404237
.text:004049B1                 mov     esi, [esp+0BCh+var_4C]
.text:004049B5
.text:004049B5 loc_4049B5:                             ; CODE XREF: sub_403FC0+F64↓j
.text:004049B5                 movzx   edi, byte ptr [esi]
.text:004049B8                 inc     esi
.text:004049B9                 mov     [esp+0BCh+var_4C], esi
.text:004049BD                 mov     eax, ds:(jpt_4049C4-18h)[edi*4] ; switch 2 cases
.text:004049C4                 jmp     eax             ; switch jump
.text:004049C6 ; ---------------------------------------------------------------------------
.text:004049C6
.text:004049C6 loc_4049C6:                             ; DATA XREF: .text:00403FB4↑o
.text:004049C6                 mov     edx, [esp+0BCh+arg_8]
.text:004049CD                 test    edx, edx
.text:004049CF                 jz      loc_404AA2
.text:004049D5                 mov     edi, [esp+0BCh+arg_4]
.text:004049DC                 cmp     [esp+0BCh+var_44], edi
.text:004049E0
.text:004049E0 loc_4049E0:                             ; CODE XREF: sub_403FC0+AED↓j
.text:004049E0                 jz      loc_404412
.text:004049E6                 mov     ecx, [esp+0BCh+arg_10]
.text:004049ED                 test    ecx, ecx
.text:004049EF                 jz      loc_404412
.text:004049F5                 mov     ebp, [esp+0BCh+var_38]
.text:004049FC                 cmp     [esp+0BCh+var_44], ebp
.text:00404A00                 jz      loc_404412
.text:00404A06                 mov     edx, [esp+0BCh+var_44]
.text:00404A0A                 dec     edx
.text:00404A0B                 cmp     edx, [esp+0BCh+var_34]
.text:00404A12                 jz      loc_404A96
.text:00404A18                 mov     ebx, [esp+0BCh+arg_C]
.text:00404A1F                 dec     ebx
.text:00404A20                 cmp     edx, ebx
.text:00404A22                 jz      short loc_404A89
.text:00404A24                 mov     edi, [esp+0BCh+var_44]
.text:00404A28                 movzx   eax, byte ptr [edi-1]
.text:00404A2C
.text:00404A2C loc_404A2C:                             ; CODE XREF: sub_403FC0+AD4↓j
.text:00404A2C                                         ; sub_403FC0+AE0↓j
.text:00404A2C                 cmp     ds:byte_419230[eax], 1
.text:00404A33                 mov     eax, [esp+0BCh+var_34]
.text:00404A3A                 setz    dl
.text:00404A3D                 cmp     [esp+0BCh+var_44], eax
.text:00404A41                 jz      short loc_404A7D
.text:00404A43                 mov     ebp, [esp+0BCh+arg_C]
.text:00404A4A                 dec     ebp
.text:00404A4B                 cmp     [esp+0BCh+var_44], ebp
.text:00404A4F                 jz      short loc_404A70
.text:00404A51                 mov     esi, [esp+0BCh+var_44]
.text:00404A55                 movzx   eax, byte ptr [esi]
.text:00404A58
.text:00404A58 loc_404A58:                             ; CODE XREF: sub_403FC0+ABB↓j
.text:00404A58                                         ; sub_403FC0+AC7↓j
.text:00404A58                 cmp     ds:byte_419230[eax], 1
.text:00404A5F                 setz    cl
.text:00404A62                 cmp     dl, cl
.text:00404A64
.text:00404A64 loc_404A64:                             ; CODE XREF: sub_403FC0+1A07↓j
.text:00404A64                 jz      loc_40499E
.text:00404A6A                 jmp     loc_404412
.text:00404A6A ; ---------------------------------------------------------------------------
.text:00404A6F                 align 10h
.text:00404A70
.text:00404A70 loc_404A70:                             ; CODE XREF: sub_403FC0+A8F↑j
.text:00404A70                 mov     ebx, [esp+0BCh+var_34]
.text:00404A77                 movzx   eax, byte ptr [ebx-1]
.text:00404A7B                 jmp     short loc_404A58
.text:00404A7D ; ---------------------------------------------------------------------------
.text:00404A7D
.text:00404A7D loc_404A7D:                             ; CODE XREF: sub_403FC0+A81↑j
.text:00404A7D                 mov     ecx, [esp+0BCh+arg_C]
.text:00404A84                 movzx   eax, byte ptr [ecx]
.text:00404A87                 jmp     short loc_404A58
.text:00404A89 ; ---------------------------------------------------------------------------
.text:00404A89
.text:00404A89 loc_404A89:                             ; CODE XREF: sub_403FC0+A62↑j
.text:00404A89                 mov     edx, [esp+0BCh+var_34]
.text:00404A90                 movzx   eax, byte ptr [edx-1]
.text:00404A94                 jmp     short loc_404A2C
.text:00404A96 ; ---------------------------------------------------------------------------
.text:00404A96
.text:00404A96 loc_404A96:                             ; CODE XREF: sub_403FC0+A52↑j
.text:00404A96                 mov     esi, [esp+0BCh+arg_C]
.text:00404A9D                 movzx   eax, byte ptr [esi]
.text:00404AA0                 jmp     short loc_404A2C
.text:00404AA2 ; ---------------------------------------------------------------------------
.text:00404AA2
.text:00404AA2 loc_404AA2:                             ; CODE XREF: sub_403FC0+A0F↑j
.text:00404AA2                 mov     eax, [esp+0BCh+arg_C]
.text:00404AA9                 cmp     [esp+0BCh+var_44], eax
.text:00404AAD                 jmp     loc_4049E0
.text:00404AB2 ; ---------------------------------------------------------------------------
.text:00404AB2
.text:00404AB2 loc_404AB2:                             ; DATA XREF: .text:00403FB0↑o
.text:00404AB2                 mov     esi, [esp+0BCh+arg_8]
.text:00404AB9                 test    esi, esi
.text:00404ABB                 jz      loc_4061BA
.text:00404AC1                 mov     ebp, [esp+0BCh+arg_4]
.text:00404AC8                 cmp     [esp+0BCh+var_44], ebp
.text:00404ACC
.text:00404ACC loc_404ACC:                             ; CODE XREF: sub_403FC0+2205↓j
.text:00404ACC                 jz      loc_404B90
.text:00404AD2                 mov     edi, [esp+0BCh+arg_10]
.text:00404AD9                 test    edi, edi
.text:00404ADB                 jz      loc_404B90
.text:00404AE1                 mov     edx, [esp+0BCh+var_38]
.text:00404AE8                 cmp     [esp+0BCh+var_44], edx
.text:00404AEC                 jz      loc_404B90
.text:00404AF2                 mov     edx, [esp+0BCh+var_44]
.text:00404AF6                 dec     edx
.text:00404AF7                 cmp     edx, [esp+0BCh+var_34]
.text:00404AFE                 jz      short loc_404B7D
.text:00404B00                 mov     esi, [esp+0BCh+arg_C]
.text:00404B07                 dec     esi
.text:00404B08                 cmp     edx, esi
.text:00404B0A                 jz      short loc_404B70
.text:00404B0C                 mov     ebx, [esp+0BCh+var_44]
.text:00404B10                 movzx   eax, byte ptr [ebx-1]
.text:00404B14
.text:00404B14 loc_404B14:                             ; CODE XREF: sub_403FC0+BBB↓j
.text:00404B14                                         ; sub_403FC0+BC7↓j
.text:00404B14                 cmp     ds:byte_419230[eax], 1
.text:00404B1B                 mov     eax, [esp+0BCh+var_34]
.text:00404B22                 setz    dl
.text:00404B25                 cmp     [esp+0BCh+var_44], eax
.text:00404B29                 jz      short loc_404B64
.text:00404B2B                 mov     ecx, [esp+0BCh+arg_C]
.text:00404B32                 dec     ecx
.text:00404B33                 cmp     [esp+0BCh+var_44], ecx
.text:00404B37                 jz      short loc_404B57
.text:00404B39                 mov     esi, [esp+0BCh+var_44]
.text:00404B3D                 movzx   eax, byte ptr [esi]
.text:00404B40
.text:00404B40 loc_404B40:                             ; CODE XREF: sub_403FC0+BA2↓j
.text:00404B40                                         ; sub_403FC0+BAE↓j
.text:00404B40                 cmp     ds:byte_419230[eax], 1
.text:00404B47                 setz    bl
.text:00404B4A                 cmp     dl, bl
.text:00404B4C                 jnz     loc_40499E
.text:00404B52                 jmp     loc_404412
.text:00404B57 ; ---------------------------------------------------------------------------
.text:00404B57
.text:00404B57 loc_404B57:                             ; CODE XREF: sub_403FC0+B77↑j
.text:00404B57                 mov     ebp, [esp+0BCh+var_34]
.text:00404B5E                 movzx   eax, byte ptr [ebp-1]
.text:00404B62                 jmp     short loc_404B40
.text:00404B64 ; ---------------------------------------------------------------------------
.text:00404B64
.text:00404B64 loc_404B64:                             ; CODE XREF: sub_403FC0+B69↑j
.text:00404B64                 mov     edi, [esp+0BCh+arg_C]
.text:00404B6B                 movzx   eax, byte ptr [edi]
.text:00404B6E                 jmp     short loc_404B40
.text:00404B70 ; ---------------------------------------------------------------------------
.text:00404B70
.text:00404B70 loc_404B70:                             ; CODE XREF: sub_403FC0+B4A↑j
.text:00404B70                 mov     ebp, [esp+0BCh+var_34]
.text:00404B77                 movzx   eax, byte ptr [ebp-1]
.text:00404B7B                 jmp     short loc_404B14
.text:00404B7D ; ---------------------------------------------------------------------------
.text:00404B7D
.text:00404B7D loc_404B7D:                             ; CODE XREF: sub_403FC0+B3E↑j
.text:00404B7D                 mov     ecx, [esp+0BCh+arg_C]
.text:00404B84                 movzx   eax, byte ptr [ecx]
.text:00404B87                 jmp     short loc_404B14
.text:00404B87 ; ---------------------------------------------------------------------------
.text:00404B89                 align 10h
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: sub_403FC0:loc_404ACC↑j
.text:00404B90                                         ; sub_403FC0+B1B↑j ...
.text:00404B90                 mov     ebp, [esp+0BCh+var_50]
.text:00404B94                 mov     eax, offset loc_404239
.text:00404B99                 cmp     [esp+0BCh+var_4C], ebp
.text:00404B9D                 jz      loc_404237
.text:00404BA3                 mov     ebx, [esp+0BCh+var_4C]
.text:00404BA7                 movzx   esi, byte ptr [ebx]
.text:00404BAA                 inc     ebx
.text:00404BAB                 mov     [esp+0BCh+var_4C], ebx
.text:00404BAF                 mov     eax, ds:jpt_404237[esi*4] ; switch 6 cases
.text:00404BB6                 jmp     eax             ; switch jump
.text:00404BB8 ; ---------------------------------------------------------------------------
.text:00404BB8
.text:00404BB8 loc_404BB8:                             ; DATA XREF: .text:00403FAC↑o
.text:00404BB8                 mov     ecx, [esp+0BCh+arg_8]
.text:00404BBF                 test    ecx, ecx
.text:00404BC1                 jz      loc_4061AA
.text:00404BC7                 mov     eax, [esp+0BCh+arg_4]
.text:00404BCE                 cmp     [esp+0BCh+var_44], eax
.text:00404BD2
.text:00404BD2 loc_404BD2:                             ; CODE XREF: sub_403FC0+21F5↓j
.text:00404BD2                 jz      loc_404412
.text:00404BD8                 mov     edi, [esp+0BCh+arg_10]
.text:00404BDF                 test    edi, edi
.text:00404BE1                 jz      loc_404412
.text:00404BE7                 mov     edx, [esp+0BCh+var_44]
.text:00404BEB                 dec     edx
.text:00404BEC                 cmp     edx, [esp+0BCh+var_34]
.text:00404BF3                 jz      loc_40619A
.text:00404BF9                 mov     ebx, [esp+0BCh+arg_C]
.text:00404C00                 dec     ebx
.text:00404C01                 cmp     edx, ebx
.text:00404C03                 jz      loc_40618A
.text:00404C09                 mov     ecx, [esp+0BCh+var_44]
.text:00404C0D                 movzx   eax, byte ptr [ecx-1]
.text:00404C11
.text:00404C11 loc_404C11:                             ; CODE XREF: sub_403FC0+21D5↓j
.text:00404C11                                         ; sub_403FC0+21E5↓j
.text:00404C11                 cmp     ds:byte_419230[eax], 1
.text:00404C18                 jnz     loc_404412
.text:00404C1E                 mov     eax, [esp+0BCh+var_38]
.text:00404C25                 cmp     [esp+0BCh+var_44], eax
.text:00404C29                 jz      short loc_404C62
.text:00404C2B                 mov     edx, [esp+0BCh+var_34]
.text:00404C32                 cmp     [esp+0BCh+var_44], edx
.text:00404C36                 jz      loc_40617B
.text:00404C3C                 mov     ebp, [esp+0BCh+arg_C]
.text:00404C43                 dec     ebp
.text:00404C44                 cmp     [esp+0BCh+var_44], ebp
.text:00404C48                 jz      loc_40616B
.text:00404C4E                 mov     esi, [esp+0BCh+var_44]
.text:00404C52                 movzx   eax, byte ptr [esi]
.text:00404C55
.text:00404C55 loc_404C55:                             ; CODE XREF: sub_403FC0+21B6↓j
.text:00404C55                                         ; sub_403FC0+21C5↓j
.text:00404C55                 cmp     ds:byte_419230[eax], 1
.text:00404C5C                 jz      loc_404412
.text:00404C62
.text:00404C62 loc_404C62:                             ; CODE XREF: sub_403FC0+C69↑j
.text:00404C62                                         ; sub_403FC0+E23↓j ...
.text:00404C62                 mov     ecx, [esp+0BCh+var_50]
.text:00404C66                 mov     eax, offset loc_404239
.text:00404C6B                 cmp     [esp+0BCh+var_4C], ecx
.text:00404C6F                 jz      loc_404237
.text:00404C75                 mov     edi, [esp+0BCh+var_4C]
.text:00404C79                 movzx   edx, byte ptr [edi]
.text:00404C7C                 inc     edi
.text:00404C7D                 mov     [esp+0BCh+var_4C], edi
.text:00404C81                 mov     eax, ds:jpt_404237[edx*4] ; switch 6 cases
.text:00404C88                 jmp     eax             ; switch jump
.text:00404C8A ; ---------------------------------------------------------------------------
.text:00404C8A
.text:00404C8A loc_404C8A:                             ; DATA XREF: .text:00403FA8↑o
.text:00404C8A                 mov     ebp, [esp+0BCh+var_38]
.text:00404C91                 cmp     [esp+0BCh+var_44], ebp
.text:00404C95                 jz      loc_404412
.text:00404C9B                 mov     eax, [esp+0BCh+var_34]
.text:00404CA2                 cmp     [esp+0BCh+var_44], eax
.text:00404CA6                 jz      loc_404D67
.text:00404CAC                 mov     esi, [esp+0BCh+arg_C]
.text:00404CB3                 dec     esi
.text:00404CB4                 cmp     [esp+0BCh+var_44], esi
.text:00404CB8                 jz      loc_404D57
.text:00404CBE                 mov     edx, [esp+0BCh+var_44]
.text:00404CC2                 movzx   eax, byte ptr [edx]
.text:00404CC5
.text:00404CC5 loc_404CC5:                             ; CODE XREF: sub_403FC0+DA2↓j
.text:00404CC5                                         ; sub_403FC0+DB1↓j
.text:00404CC5                 cmp     ds:byte_419230[eax], 1
.text:00404CCC                 jnz     loc_404412
.text:00404CD2                 mov     edi, [esp+0BCh+arg_8]
.text:00404CD9                 test    edi, edi
.text:00404CDB                 jz      short loc_404D4A
.text:00404CDD                 mov     ebp, [esp+0BCh+arg_4]
.text:00404CE4                 cmp     [esp+0BCh+var_44], ebp
.text:00404CE8
.text:00404CE8 loc_404CE8:                             ; CODE XREF: sub_403FC0+D95↓j
.text:00404CE8                 jz      loc_404B90
.text:00404CEE                 mov     ebx, [esp+0BCh+arg_10]
.text:00404CF5                 test    ebx, ebx
.text:00404CF7                 jz      loc_404B90
.text:00404CFD                 mov     edx, [esp+0BCh+var_44]
.text:00404D01                 dec     edx
.text:00404D02                 cmp     edx, [esp+0BCh+var_34]
.text:00404D09                 jz      short loc_404D3E
.text:00404D0B                 mov     ecx, [esp+0BCh+arg_C]
.text:00404D12                 dec     ecx
.text:00404D13                 cmp     edx, ecx
.text:00404D15                 jz      short loc_404D31
.text:00404D17                 mov     edi, [esp+0BCh+var_44]
.text:00404D1B                 movzx   eax, byte ptr [edi-1]
.text:00404D1F
.text:00404D1F loc_404D1F:                             ; CODE XREF: sub_403FC0+D7C↓j
.text:00404D1F                                         ; sub_403FC0+D88↓j
.text:00404D1F                 cmp     ds:byte_419230[eax], 1
.text:00404D26                 jnz     loc_404B90
.text:00404D2C                 jmp     loc_404412
.text:00404D31 ; ---------------------------------------------------------------------------
.text:00404D31
.text:00404D31 loc_404D31:                             ; CODE XREF: sub_403FC0+D55↑j
.text:00404D31                 mov     edx, [esp+0BCh+var_34]
.text:00404D38                 movzx   eax, byte ptr [edx-1]
.text:00404D3C                 jmp     short loc_404D1F
.text:00404D3E ; ---------------------------------------------------------------------------
.text:00404D3E
.text:00404D3E loc_404D3E:                             ; CODE XREF: sub_403FC0+D49↑j
.text:00404D3E                 mov     esi, [esp+0BCh+arg_C]
.text:00404D45                 movzx   eax, byte ptr [esi]
.text:00404D48                 jmp     short loc_404D1F
.text:00404D4A ; ---------------------------------------------------------------------------
.text:00404D4A
.text:00404D4A loc_404D4A:                             ; CODE XREF: sub_403FC0+D1B↑j
.text:00404D4A                 mov     eax, [esp+0BCh+arg_C]
.text:00404D51                 cmp     [esp+0BCh+var_44], eax
.text:00404D55                 jmp     short loc_404CE8
.text:00404D57 ; ---------------------------------------------------------------------------
.text:00404D57
.text:00404D57 loc_404D57:                             ; CODE XREF: sub_403FC0+CF8↑j
.text:00404D57                 mov     ecx, [esp+0BCh+var_34]
.text:00404D5E                 movzx   eax, byte ptr [ecx-1]
.text:00404D62                 jmp     loc_404CC5
.text:00404D67 ; ---------------------------------------------------------------------------
.text:00404D67
.text:00404D67 loc_404D67:                             ; CODE XREF: sub_403FC0+CE6↑j
.text:00404D67                 mov     ebx, [esp+0BCh+arg_C]
.text:00404D6E                 movzx   eax, byte ptr [ebx]
.text:00404D71                 jmp     loc_404CC5
.text:00404D76 ; ---------------------------------------------------------------------------
.text:00404D76
.text:00404D76 loc_404D76:                             ; DATA XREF: .text:00403FA4↑o
.text:00404D76                 mov     ebp, [esp+0BCh+var_48]
.text:00404D7A                 cmp     [esp+0BCh+var_44], ebp
.text:00404D7E                 jz      loc_404E01
.text:00404D84
.text:00404D84 loc_404D84:                             ; CODE XREF: sub_403FC0+E62↓j
.text:00404D84                 mov     esi, [esp+0BCh+var_34]
.text:00404D8B                 cmp     [esp+0BCh+var_44], esi
.text:00404D8F                 jz      short loc_404DF5
.text:00404D91                 mov     edi, [esp+0BCh+arg_C]
.text:00404D98                 dec     edi
.text:00404D99                 cmp     [esp+0BCh+var_44], edi
.text:00404D9D                 jz      short loc_404DE8
.text:00404D9F                 mov     ebp, [esp+0BCh+var_44]
.text:00404DA3                 movzx   eax, byte ptr [ebp+0]
.text:00404DA7
.text:00404DA7 loc_404DA7:                             ; CODE XREF: sub_403FC0+E33↓j
.text:00404DA7                                         ; sub_403FC0+E3F↓j
.text:00404DA7                 cmp     ds:byte_419230[eax], 1
.text:00404DAE                 jz      loc_404412
.text:00404DB4                 mov     eax, [esp+0BCh+var_8C]
.text:00404DB8                 test    eax, eax
.text:00404DBA                 jnz     short loc_404DDF
.text:00404DBC                 mov     [esp+0BCh+var_8C], 1
.text:00404DC4                 mov     eax, [esp+0BCh+var_60]
.text:00404DC8                 mov     ebx, [esp+0BCh+var_64]
.text:00404DCC                 cmp     eax, ebx
.text:00404DCE                 ja      short loc_404DDF
.text:00404DD0
.text:00404DD0 loc_404DD0:                             ; CODE XREF: sub_403FC0+E1D↓j
.text:00404DD0                 mov     esi, [esp+0BCh+var_78]
.text:00404DD4                 or      byte ptr [esi+eax*4], 18h
.text:00404DD8                 inc     eax
.text:00404DD9                 cmp     eax, [esp+0BCh+var_64]
.text:00404DDD                 jbe     short loc_404DD0
.text:00404DDF
.text:00404DDF loc_404DDF:                             ; CODE XREF: sub_403FC0+DFA↑j
.text:00404DDF                                         ; sub_403FC0+E0E↑j ...
.text:00404DDF                 inc     [esp+0BCh+var_44]
.text:00404DE3                 jmp     loc_404C62
.text:00404DE8 ; ---------------------------------------------------------------------------
.text:00404DE8
.text:00404DE8 loc_404DE8:                             ; CODE XREF: sub_403FC0+DDD↑j
.text:00404DE8                 mov     edx, [esp+0BCh+var_34]
.text:00404DEF                 movzx   eax, byte ptr [edx-1]
.text:00404DF3                 jmp     short loc_404DA7
.text:00404DF5 ; ---------------------------------------------------------------------------
.text:00404DF5
.text:00404DF5 loc_404DF5:                             ; CODE XREF: sub_403FC0+DCF↑j
.text:00404DF5                 mov     ecx, [esp+0BCh+arg_C]
.text:00404DFC                 movzx   eax, byte ptr [ecx]
.text:00404DFF                 jmp     short loc_404DA7
.text:00404E01 ; ---------------------------------------------------------------------------
.text:00404E01
.text:00404E01 loc_404E01:                             ; CODE XREF: sub_403FC0+DBE↑j
.text:00404E01                                         ; sub_403FC0+E60↓j
.text:00404E01                 mov     eax, [esp+0BCh+var_40]
.text:00404E05                 cmp     [esp+0BCh+var_48], eax
.text:00404E09                 jz      loc_404412
.text:00404E0F                 mov     [esp+0BCh+var_48], eax
.text:00404E13                 mov     ebx, [esp+0BCh+arg_C]
.text:00404E1A                 cmp     ebx, eax
.text:00404E1C                 mov     [esp+0BCh+var_44], ebx
.text:00404E20                 jz      short loc_404E01
.text:00404E22                 jmp     loc_404D84
.text:00404E27 ; ---------------------------------------------------------------------------
.text:00404E27
.text:00404E27 loc_404E27:                             ; DATA XREF: .text:00403FA0↑o
.text:00404E27                 mov     eax, [esp+0BCh+var_48]
.text:00404E2B                 cmp     [esp+0BCh+var_44], eax
.text:00404E2F                 jz      loc_404EB1
.text:00404E35
.text:00404E35 loc_404E35:                             ; CODE XREF: sub_403FC0+F12↓j
.text:00404E35                 mov     edx, [esp+0BCh+var_34]
.text:00404E3C                 cmp     [esp+0BCh+var_44], edx
.text:00404E40                 jz      short loc_404EA5
.text:00404E42                 mov     ebp, [esp+0BCh+arg_C]
.text:00404E49                 dec     ebp
.text:00404E4A                 cmp     [esp+0BCh+var_44], ebp
.text:00404E4E                 jz      short loc_404E98
.text:00404E50                 mov     esi, [esp+0BCh+var_44]
.text:00404E54                 movzx   eax, byte ptr [esi]
.text:00404E57
.text:00404E57 loc_404E57:                             ; CODE XREF: sub_403FC0+EE3↓j
.text:00404E57                                         ; sub_403FC0+EEF↓j
.text:00404E57                 cmp     ds:byte_419230[eax], 1
.text:00404E5E                 jnz     loc_404412
.text:00404E64                 mov     eax, [esp+0BCh+var_8C]
.text:00404E68                 test    eax, eax
.text:00404E6A                 jnz     short loc_404E8F
.text:00404E6C                 mov     [esp+0BCh+var_8C], 1
.text:00404E74                 mov     eax, [esp+0BCh+var_60]
.text:00404E78                 mov     ecx, [esp+0BCh+var_64]
.text:00404E7C                 cmp     eax, ecx
.text:00404E7E                 ja      short loc_404E8F
.text:00404E80
.text:00404E80 loc_404E80:                             ; CODE XREF: sub_403FC0+ECD↓j
.text:00404E80                 mov     edi, [esp+0BCh+var_78]
.text:00404E84                 or      byte ptr [edi+eax*4], 18h
.text:00404E88                 inc     eax
.text:00404E89                 cmp     eax, [esp+0BCh+var_64]
.text:00404E8D                 jbe     short loc_404E80
.text:00404E8F
.text:00404E8F loc_404E8F:                             ; CODE XREF: sub_403FC0+EAA↑j
.text:00404E8F                                         ; sub_403FC0+EBE↑j
.text:00404E8F                 inc     [esp+0BCh+var_44]
.text:00404E93                 jmp     loc_4047EB      ; jumptable 00404237 case 0
.text:00404E93                                         ; jumptable 00404BB6 case 0
.text:00404E93                                         ; jumptable 00404C88 case 0
.text:00404E98 ; ---------------------------------------------------------------------------
.text:00404E98
.text:00404E98 loc_404E98:                             ; CODE XREF: sub_403FC0+E8E↑j
.text:00404E98                 mov     ebx, [esp+0BCh+var_34]
.text:00404E9F                 movzx   eax, byte ptr [ebx-1]
.text:00404EA3                 jmp     short loc_404E57
.text:00404EA5 ; ---------------------------------------------------------------------------
.text:00404EA5
.text:00404EA5 loc_404EA5:                             ; CODE XREF: sub_403FC0+E80↑j
.text:00404EA5                 mov     edi, [esp+0BCh+arg_C]
.text:00404EAC                 movzx   eax, byte ptr [edi]
.text:00404EAF                 jmp     short loc_404E57
.text:00404EB1 ; ---------------------------------------------------------------------------
.text:00404EB1
.text:00404EB1 loc_404EB1:                             ; CODE XREF: sub_403FC0+E6F↑j
.text:00404EB1                                         ; sub_403FC0+F10↓j
.text:00404EB1                 mov     ebx, [esp+0BCh+var_40]
.text:00404EB5                 cmp     [esp+0BCh+var_48], ebx
.text:00404EB9                 jz      loc_404412
.text:00404EBF                 mov     [esp+0BCh+var_48], ebx
.text:00404EC3                 mov     ecx, [esp+0BCh+arg_C]
.text:00404ECA                 cmp     ecx, ebx
.text:00404ECC                 mov     [esp+0BCh+var_44], ecx
.text:00404ED0                 jz      short loc_404EB1
.text:00404ED2                 jmp     loc_404E35
.text:00404ED7 ; ---------------------------------------------------------------------------
.text:00404ED7
.text:00404ED7 loc_404ED7:                             ; DATA XREF: .text:00403F9C↑o
.text:00404ED7                 mov     esi, [esp+0BCh+var_4C]
.text:00404EDB                 movsx   ecx, byte ptr [esi+1]
.text:00404EDF                 movzx   eax, byte ptr [esi]
.text:00404EE2                 add     esi, 2
.text:00404EE5                 mov     ebp, esi
.text:00404EE7                 shl     ecx, 8
.text:00404EEA                 lea     edi, [ecx+eax]
.text:00404EED                 add     ebp, edi
.text:00404EEF                 mov     [esp+0BCh+var_30], ebp
.text:00404EF6                 mov     eax, offset loc_404239
.text:00404EFB                 movsx   edx, byte ptr [esi+1]
.text:00404EFF                 movzx   ecx, byte ptr [esi]
.text:00404F02                 add     esi, 2
.text:00404F05                 mov     [esp+0BCh+var_4C], esi
.text:00404F09                 shl     edx, 8
.text:00404F0C                 add     ecx, edx
.text:00404F0E                 mov     [ebp+0], cl
.text:00404F11                 mov     edi, [esp+0BCh+var_30]
.text:00404F18                 sar     ecx, 8
.text:00404F1B                 mov     [edi+1], cl
.text:00404F1E                 mov     edx, [esp+0BCh+var_50]
.text:00404F22                 cmp     esi, edx
.text:00404F24                 jnz     loc_4049B5
.text:00404F2A                 jmp     loc_404237
.text:00404F2F ; ---------------------------------------------------------------------------
.text:00404F2F
.text:00404F2F loc_404F2F:                             ; DATA XREF: .text:00403F98↑o
.text:00404F2F                 mov     esi, [esp+0BCh+var_4C]
.text:00404F33                 movsx   edi, byte ptr [esi+3]
.text:00404F37                 movzx   ebp, byte ptr [esi+2]
.text:00404F3B                 shl     edi, 8
.text:00404F3E                 add     ebp, edi
.text:00404F40                 jnz     short loc_404F4C
.text:00404F42                 add     [esp+0BCh+var_4C], 4
.text:00404F47                 jmp     loc_4047EB      ; jumptable 00404237 case 0
.text:00404F47                                         ; jumptable 00404BB6 case 0
.text:00404F47                                         ; jumptable 00404C88 case 0
.text:00404F4C ; ---------------------------------------------------------------------------
.text:00404F4C
.text:00404F4C loc_404F4C:                             ; CODE XREF: sub_403FC0+F80↑j
.text:00404F4C                 dec     ebp
.text:00404F4D                 mov     ebx, ebp
.text:00404F4F                 sar     ebp, 8
.text:00404F52                 mov     [esi+2], bl
.text:00404F55                 mov     ecx, ebp
.text:00404F57                 mov     [esi+3], cl
.text:00404F5A
.text:00404F5A loc_404F5A:                             ; CODE XREF: sub_403FC0+14FE↓j
.text:00404F5A                                         ; sub_403FC0+15A0↓j ...
.text:00404F5A                 mov     ebx, [esp+0BCh+var_4C]
.text:00404F5E                 movsx   ecx, byte ptr [ebx+1]
.text:00404F62                 movzx   edx, byte ptr [ebx]
.text:00404F65                 shl     ecx, 8
.text:00404F68                 lea     esi, [ecx+edx]
.text:00404F6B                 lea     edi, [esi+ebx+2]
.text:00404F6F                 mov     [esp+0BCh+var_4C], edi
.text:00404F73                 jmp     loc_40499E
.text:00404F78 ; ---------------------------------------------------------------------------
.text:00404F78
.text:00404F78 loc_404F78:                             ; DATA XREF: .text:00403F94↑o
.text:00404F78                 mov     ecx, [esp+0BCh+var_4C]
.text:00404F7C                 movsx   ebx, byte ptr [ecx+3]
.text:00404F80                 movzx   ebp, byte ptr [ecx+2]
.text:00404F84                 shl     ebx, 8
.text:00404F87                 add     ebp, ebx
.text:00404F89                 test    ebp, ebp
.text:00404F8B                 jle     short loc_404FA9
.text:00404F8D                 dec     ebp
.text:00404F8E                 add     ecx, 2
.text:00404F91                 mov     eax, ebp
.text:00404F93                 mov     [ecx], al
.text:00404F95                 sar     ebp, 8
.text:00404F98                 mov     edx, ebp
.text:00404F9A                 mov     [ecx+1], dl
.text:00404F9D                 add     ecx, 2
.text:00404FA0                 mov     [esp+0BCh+var_4C], ecx
.text:00404FA4                 jmp     loc_4047EB      ; jumptable 00404237 case 0
.text:00404FA4                                         ; jumptable 00404BB6 case 0
.text:00404FA4                                         ; jumptable 00404C88 case 0
.text:00404FA9 ; ---------------------------------------------------------------------------
.text:00404FA9
.text:00404FA9 loc_404FA9:                             ; CODE XREF: sub_403FC0+FCB↑j
.text:00404FA9                 test    ebp, ebp
.text:00404FAB                 jnz     loc_4047EB      ; jumptable 00404237 case 0
.text:00404FAB                                         ; jumptable 00404BB6 case 0
.text:00404FAB                                         ; jumptable 00404C88 case 0
.text:00404FB1                 mov     ebp, [esp+0BCh+var_4C]
.text:00404FB5                 mov     byte ptr [ebp+2], 0
.text:00404FB9                 mov     byte ptr [ebp+3], 0
.text:00404FBD
.text:00404FBD loc_404FBD:                             ; CODE XREF: sub_403FC0:loc_4058DC↓j
.text:00404FBD                 mov     edx, [esp+0BCh+var_4C]
.text:00404FC1                 movsx   ecx, byte ptr [edx+1]
.text:00404FC5                 movzx   ebp, byte ptr [edx]
.text:00404FC8                 add     edx, 2
.text:00404FCB                 mov     ebx, edx
.text:00404FCD                 mov     [esp+0BCh+var_4C], edx
.text:00404FD1                 shl     ecx, 8
.text:00404FD4                 add     ebp, ecx
.text:00404FD6                 cmp     edx, [esp+0BCh+var_50]
.text:00404FDA                 mov     [esp+0BCh+var_30], edx
.text:00404FE1                 jnb     short loc_405012
.text:00404FE3                 cmp     byte ptr [edx], 0
.text:00404FE6                 jnz     short loc_405003
.text:00404FE8                 lea     eax, [edx+1]
.text:00404FEB
.text:00404FEB loc_404FEB:                             ; CODE XREF: sub_403FC0+1041↓j
.text:00404FEB                 mov     [esp+0BCh+var_30], eax
.text:00404FF2                 mov     ebx, eax
.text:00404FF4                 lea     eax, [eax+1]
.text:00404FF7                 cmp     ebx, [esp+0BCh+var_50]
.text:00404FFB                 jnb     short loc_405012
.text:00404FFD                 cmp     byte ptr [eax-1], 0
.text:00405001                 jz      short loc_404FEB
.text:00405003
.text:00405003 loc_405003:                             ; CODE XREF: sub_403FC0+1026↑j
.text:00405003                 cmp     ebx, [esp+0BCh+var_50]
.text:00405007                 jnb     short loc_405012
.text:00405009                 cmp     byte ptr [ebx], 6
.text:0040500C                 jz      loc_40519A
.text:00405012
.text:00405012 loc_405012:                             ; CODE XREF: sub_403FC0+1021↑j
.text:00405012                                         ; sub_403FC0+103B↑j ...
.text:00405012                 mov     edi, [esp+0BCh+var_60]
.text:00405016                 mov     ebx, [esp+0BCh+var_64]
.text:0040501A                 mov     ecx, [esp+0BCh+var_28]
.text:00405021                 mov     esi, [esp+0BCh+var_24]
.text:00405028                 sub     ebx, edi
.text:0040502A                 mov     edx, ecx
.text:0040502C                 lea     edi, [ebx+ebx]
.text:0040502F                 sub     edx, esi
.text:00405031                 lea     eax, [ebx+edi+7]
.text:00405035                 cmp     edx, eax
.text:00405037                 jnb     short loc_4050AD
.text:00405039                 mov     edi, eax
.text:0040503B
.text:0040503B loc_40503B:                             ; CODE XREF: sub_403FC0+10EB↓j
.text:0040503B                 mov     edx, dword_416020
.text:00405041                 lea     ebx, [edx+edx*8]
.text:00405044                 lea     esi, [edx+ebx*2]
.text:00405047                 cmp     ecx, esi
.text:00405049                 ja      loc_404741
.text:0040504F                 lea     edx, ds:0[ecx*8]
.text:00405056                 mov     [esp+0BCh+Size], edx ; Size
.text:00405059                 call    malloc
.text:0040505E                 mov     [esp+0BCh+Size], eax ; void *
.text:00405061                 mov     ebx, [esp+0BCh+var_28]
.text:00405068                 mov     esi, [esp+0BCh+Src]
.text:0040506F                 shl     ebx, 2
.text:00405072                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:00405076                 mov     [esp+0BCh+var_B8], esi ; Src
.text:0040507A                 call    memcpy
.text:0040507F                 mov     [esp+0BCh+Src], eax
.text:00405086                 test    eax, eax
.text:00405088                 jz      loc_404741
.text:0040508E                 mov     ebx, [esp+0BCh+var_28]
.text:00405095                 mov     esi, [esp+0BCh+var_24]
.text:0040509C                 add     ebx, ebx
.text:0040509E                 mov     [esp+0BCh+var_28], ebx
.text:004050A5                 mov     ecx, ebx
.text:004050A7                 sub     ebx, esi
.text:004050A9                 cmp     ebx, edi
.text:004050AB                 jb      short loc_40503B
.text:004050AD
.text:004050AD loc_4050AD:                             ; CODE XREF: sub_403FC0+1077↑j
.text:004050AD                 mov     ecx, [esp+0BCh+var_60]
.text:004050B1                 mov     eax, [esp+0BCh+var_64]
.text:004050B5                 cmp     ecx, eax
.text:004050B7                 ja      loc_405191
.text:004050BD                 mov     ebx, [esp+0BCh+Src]
.text:004050C4
.text:004050C4 loc_4050C4:                             ; CODE XREF: sub_403FC0+1162↓j
.text:004050C4                 mov     eax, [esp+0BCh+var_68]
.text:004050C8                 mov     edi, [eax+ecx*4]
.text:004050CB                 mov     [ebx+esi*4], edi
.text:004050CE                 mov     edx, [esp+0BCh+var_6C]
.text:004050D2                 mov     edi, [esp+0BCh+var_24]
.text:004050D9                 mov     ebx, [esp+0BCh+Src]
.text:004050E0                 mov     esi, [edx+ecx*4]
.text:004050E3                 inc     edi
.text:004050E4                 mov     [esp+0BCh+var_24], edi
.text:004050EB                 mov     [ebx+edi*4], esi
.text:004050EE                 mov     edi, [esp+0BCh+var_24]
.text:004050F5                 mov     eax, [esp+0BCh+var_78]
.text:004050F9                 mov     ebx, [esp+0BCh+Src]
.text:00405100                 inc     edi
.text:00405101                 mov     [esp+0BCh+var_24], edi
.text:00405108                 mov     esi, [eax+ecx*4]
.text:0040510B                 inc     ecx
.text:0040510C                 mov     [ebx+edi*4], esi
.text:0040510F                 mov     esi, [esp+0BCh+var_24]
.text:00405116                 inc     esi
.text:00405117                 cmp     ecx, [esp+0BCh+var_64]
.text:0040511B                 mov     [esp+0BCh+var_24], esi
.text:00405122                 jbe     short loc_4050C4
.text:00405124
.text:00405124 loc_405124:                             ; CODE XREF: sub_403FC0+11D8↓j
.text:00405124                 mov     eax, [esp+0BCh+var_60]
.text:00405128                 mov     [ebx+esi*4], eax
.text:0040512B                 mov     ecx, [esp+0BCh+var_24]
.text:00405132                 mov     edi, [esp+0BCh+var_64]
.text:00405136                 mov     edx, [esp+0BCh+Src]
.text:0040513D                 inc     ecx
.text:0040513E                 mov     [esp+0BCh+var_24], ecx
.text:00405145                 mov     [edx+ecx*4], edi
.text:00405148                 mov     eax, [esp+0BCh+var_24]
.text:0040514F                 mov     esi, [esp+0BCh+var_4C]
.text:00405153                 mov     edi, [esp+0BCh+Src]
.text:0040515A                 inc     eax
.text:0040515B                 add     esi, ebp
.text:0040515D                 mov     [esp+0BCh+var_24], eax
.text:00405164                 mov     [edi+eax*4], esi
.text:00405167                 mov     ecx, [esp+0BCh+var_24]
.text:0040516E                 mov     ebp, [esp+0BCh+Src]
.text:00405175                 mov     ebx, [esp+0BCh+var_44]
.text:00405179                 inc     ecx
.text:0040517A                 mov     [esp+0BCh+var_24], ecx
.text:00405181                 mov     [ebp+ecx*4+0], ebx
.text:00405185                 inc     [esp+0BCh+var_24]
.text:0040518C                 jmp     loc_4047EB      ; jumptable 00404237 case 0
.text:0040518C                                         ; jumptable 00404BB6 case 0
.text:0040518C                                         ; jumptable 00404C88 case 0
.text:00405191 ; ---------------------------------------------------------------------------
.text:00405191
.text:00405191 loc_405191:                             ; CODE XREF: sub_403FC0+10F7↑j
.text:00405191                 mov     ebx, [esp+0BCh+Src]
.text:00405198                 jmp     short loc_405124
.text:0040519A ; ---------------------------------------------------------------------------
.text:0040519A
.text:0040519A loc_40519A:                             ; CODE XREF: sub_403FC0+104C↑j
.text:0040519A                 movzx   edx, byte ptr [ebx+1]
.text:0040519E                 movzx   edi, byte ptr [ebx+2]
.text:004051A2                 cmp     [esp+0BCh+var_60], 101h
.text:004051AA                 lea     ebx, [edi+edx]
.text:004051AD                 mov     [esp+0BCh+var_64], ebx
.text:004051B1                 jnz     loc_405012
.text:004051B7                 mov     [esp+0BCh+var_60], edx
.text:004051BB                 jmp     loc_405012
.text:004051C0 ; ---------------------------------------------------------------------------
.text:004051C0
.text:004051C0 loc_4051C0:                             ; DATA XREF: .text:00403F90↑o
.text:004051C0                 mov     eax, [esp+0BCh+var_60]
.text:004051C4                 mov     edx, [esp+0BCh+var_64]
.text:004051C8                 mov     ecx, [esp+0BCh+var_28]
.text:004051CF                 mov     esi, [esp+0BCh+var_24]
.text:004051D6                 sub     edx, eax
.text:004051D8                 mov     ebp, ecx
.text:004051DA                 lea     ebx, [edx+edx]
.text:004051DD                 sub     ebp, esi
.text:004051DF                 lea     eax, [edx+ebx+7]
.text:004051E3                 cmp     ebp, eax
.text:004051E5                 jnb     short loc_40525B
.text:004051E7                 mov     edi, eax
.text:004051E9
.text:004051E9 loc_4051E9:                             ; CODE XREF: sub_403FC0+1299↓j
.text:004051E9                 mov     edx, dword_416020
.text:004051EF                 lea     ebp, [edx+edx*8]
.text:004051F2                 lea     esi, [edx+ebp*2]
.text:004051F5                 cmp     ecx, esi
.text:004051F7                 ja      loc_404741
.text:004051FD                 lea     ebp, ds:0[ecx*8]
.text:00405204                 mov     [esp+0BCh+Size], ebp ; Size
.text:00405207                 call    malloc
.text:0040520C                 mov     [esp+0BCh+Size], eax ; void *
.text:0040520F                 mov     esi, [esp+0BCh+var_28]
.text:00405216                 mov     ebx, [esp+0BCh+Src]
.text:0040521D                 shl     esi, 2
.text:00405220                 mov     [esp+0BCh+var_B4], esi ; Size
.text:00405224                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:00405228                 call    memcpy
.text:0040522D                 mov     [esp+0BCh+Src], eax
.text:00405234                 test    eax, eax
.text:00405236                 jz      loc_404741
.text:0040523C                 mov     edx, [esp+0BCh+var_28]
.text:00405243                 mov     esi, [esp+0BCh+var_24]
.text:0040524A                 add     edx, edx
.text:0040524C                 mov     [esp+0BCh+var_28], edx
.text:00405253                 mov     ecx, edx
.text:00405255                 sub     edx, esi
.text:00405257                 cmp     edx, edi
.text:00405259                 jb      short loc_4051E9
.text:0040525B
.text:0040525B loc_40525B:                             ; CODE XREF: sub_403FC0+1225↑j
.text:0040525B                 mov     ecx, [esp+0BCh+var_60]
.text:0040525F                 mov     edi, [esp+0BCh+var_64]
.text:00405263                 cmp     ecx, edi
.text:00405265                 ja      loc_40533D
.text:0040526B                 mov     ebx, [esp+0BCh+Src]
.text:00405272
.text:00405272 loc_405272:                             ; CODE XREF: sub_403FC0+1310↓j
.text:00405272                 mov     eax, [esp+0BCh+var_68]
.text:00405276                 mov     edi, [eax+ecx*4]
.text:00405279                 mov     [ebx+esi*4], edi
.text:0040527C                 mov     edx, [esp+0BCh+var_6C]
.text:00405280                 mov     edi, [esp+0BCh+var_24]
.text:00405287                 mov     ebx, [esp+0BCh+Src]
.text:0040528E                 mov     ebp, [edx+ecx*4]
.text:00405291                 inc     edi
.text:00405292                 mov     [esp+0BCh+var_24], edi
.text:00405299                 mov     [ebx+edi*4], ebp
.text:0040529C                 mov     ebp, [esp+0BCh+var_24]
.text:004052A3                 mov     eax, [esp+0BCh+var_78]
.text:004052A7                 mov     ebx, [esp+0BCh+Src]
.text:004052AE                 inc     ebp
.text:004052AF                 mov     [esp+0BCh+var_24], ebp
.text:004052B6                 mov     esi, [eax+ecx*4]
.text:004052B9                 inc     ecx
.text:004052BA                 mov     [ebx+ebp*4], esi
.text:004052BD                 mov     esi, [esp+0BCh+var_24]
.text:004052C4                 inc     esi
.text:004052C5                 cmp     ecx, [esp+0BCh+var_64]
.text:004052C9                 mov     [esp+0BCh+var_24], esi
.text:004052D0                 jbe     short loc_405272
.text:004052D2
.text:004052D2 loc_4052D2:                             ; CODE XREF: sub_403FC0+1384↓j
.text:004052D2                 mov     edi, [esp+0BCh+var_60]
.text:004052D6                 mov     [ebx+esi*4], edi
.text:004052D9                 mov     edx, [esp+0BCh+var_24]
.text:004052E0                 mov     ebp, [esp+0BCh+Src]
.text:004052E7                 mov     esi, [esp+0BCh+var_64]
.text:004052EB                 inc     edx
.text:004052EC                 mov     [esp+0BCh+var_24], edx
.text:004052F3                 mov     [ebp+edx*4+0], esi
.text:004052F7                 mov     ebx, [esp+0BCh+var_24]
.text:004052FE                 mov     ecx, [esp+0BCh+Src]
.text:00405305                 inc     ebx
.text:00405306                 mov     [esp+0BCh+var_24], ebx
.text:0040530D                 mov     dword ptr [ecx+ebx*4], 0
.text:00405314
.text:00405314 loc_405314:                             ; CODE XREF: sub_403FC0+190E↓j
.text:00405314                 mov     eax, [esp+0BCh+var_24]
.text:0040531B                 mov     ecx, [esp+0BCh+Src]
.text:00405322                 inc     eax
.text:00405323                 mov     [esp+0BCh+var_24], eax
.text:0040532A                 mov     dword ptr [ecx+eax*4], 0
.text:00405331                 inc     [esp+0BCh+var_24]
.text:00405338                 jmp     loc_404C62
.text:0040533D ; ---------------------------------------------------------------------------
.text:0040533D
.text:0040533D loc_40533D:                             ; CODE XREF: sub_403FC0+12A5↑j
.text:0040533D                 mov     ebx, [esp+0BCh+Src]
.text:00405344                 jmp     short loc_4052D2
.text:00405346 ; ---------------------------------------------------------------------------
.text:00405346
.text:00405346 loc_405346:                             ; DATA XREF: .text:00403F8C↑o
.text:00405346                 mov     eax, [esp+0BCh+var_60]
.text:0040534A                 mov     ebx, [esp+0BCh+var_64]
.text:0040534E                 mov     ecx, [esp+0BCh+var_28]
.text:00405355                 mov     esi, [esp+0BCh+var_24]
.text:0040535C                 sub     ebx, eax
.text:0040535E                 mov     edx, ecx
.text:00405360                 lea     ebp, [ebx+ebx]
.text:00405363                 sub     edx, esi
.text:00405365                 lea     eax, [ebx+ebp+7]
.text:00405369                 cmp     edx, eax
.text:0040536B                 jnb     short loc_4053E1
.text:0040536D                 mov     edi, eax
.text:0040536F
.text:0040536F loc_40536F:                             ; CODE XREF: sub_403FC0+141F↓j
.text:0040536F                 mov     edx, dword_416020
.text:00405375                 lea     ebx, [edx+edx*8]
.text:00405378                 lea     esi, [edx+ebx*2]
.text:0040537B                 cmp     ecx, esi
.text:0040537D                 ja      loc_404741
.text:00405383                 lea     ebx, ds:0[ecx*8]
.text:0040538A                 mov     [esp+0BCh+Size], ebx ; Size
.text:0040538D                 call    malloc
.text:00405392                 mov     [esp+0BCh+Size], eax ; void *
.text:00405395                 mov     esi, [esp+0BCh+var_28]
.text:0040539C                 mov     ebp, [esp+0BCh+Src]
.text:004053A3                 shl     esi, 2
.text:004053A6                 mov     [esp+0BCh+var_B4], esi ; Size
.text:004053AA                 mov     [esp+0BCh+var_B8], ebp ; Src
.text:004053AE                 call    memcpy
.text:004053B3                 mov     [esp+0BCh+Src], eax
.text:004053BA                 test    eax, eax
.text:004053BC                 jz      loc_404741
.text:004053C2                 mov     edx, [esp+0BCh+var_28]
.text:004053C9                 mov     esi, [esp+0BCh+var_24]
.text:004053D0                 add     edx, edx
.text:004053D2                 mov     [esp+0BCh+var_28], edx
.text:004053D9                 mov     ecx, edx
.text:004053DB                 sub     edx, esi
.text:004053DD                 cmp     edx, edi
.text:004053DF                 jb      short loc_40536F
.text:004053E1
.text:004053E1 loc_4053E1:                             ; CODE XREF: sub_403FC0+13AB↑j
.text:004053E1                 mov     ecx, [esp+0BCh+var_60]
.text:004053E5                 mov     edi, [esp+0BCh+var_64]
.text:004053E9                 cmp     ecx, edi
.text:004053EB                 ja      loc_4054C3
.text:004053F1                 mov     ebx, [esp+0BCh+Src]
.text:004053F8
.text:004053F8 loc_4053F8:                             ; CODE XREF: sub_403FC0+1496↓j
.text:004053F8                 mov     eax, [esp+0BCh+var_68]
.text:004053FC                 mov     edi, [eax+ecx*4]
.text:004053FF                 mov     [ebx+esi*4], edi
.text:00405402                 mov     edx, [esp+0BCh+var_6C]
.text:00405406                 mov     edi, [esp+0BCh+var_24]
.text:0040540D                 mov     ebx, [esp+0BCh+Src]
.text:00405414                 mov     ebp, [edx+ecx*4]
.text:00405417                 inc     edi
.text:00405418                 mov     [esp+0BCh+var_24], edi
.text:0040541F                 mov     [ebx+edi*4], ebp
.text:00405422                 mov     ebp, [esp+0BCh+var_24]
.text:00405429                 mov     eax, [esp+0BCh+var_78]
.text:0040542D                 mov     ebx, [esp+0BCh+Src]
.text:00405434                 inc     ebp
.text:00405435                 mov     [esp+0BCh+var_24], ebp
.text:0040543C                 mov     esi, [eax+ecx*4]
.text:0040543F                 inc     ecx
.text:00405440                 mov     [ebx+ebp*4], esi
.text:00405443                 mov     esi, [esp+0BCh+var_24]
.text:0040544A                 inc     esi
.text:0040544B                 cmp     ecx, [esp+0BCh+var_64]
.text:0040544F                 mov     [esp+0BCh+var_24], esi
.text:00405456                 jbe     short loc_4053F8
.text:00405458
.text:00405458 loc_405458:                             ; CODE XREF: sub_403FC0+150A↓j
.text:00405458                 mov     ebp, [esp+0BCh+var_60]
.text:0040545C                 mov     [ebx+esi*4], ebp
.text:0040545F                 mov     eax, [esp+0BCh+var_24]
.text:00405466                 mov     edi, [esp+0BCh+Src]
.text:0040546D                 mov     esi, [esp+0BCh+var_64]
.text:00405471                 inc     eax
.text:00405472                 mov     [esp+0BCh+var_24], eax
.text:00405479                 mov     [edi+eax*4], esi
.text:0040547C                 mov     edx, [esp+0BCh+var_24]
.text:00405483                 mov     ebp, [esp+0BCh+Src]
.text:0040548A                 inc     edx
.text:0040548B                 mov     [esp+0BCh+var_24], edx
.text:00405492                 mov     dword ptr [ebp+edx*4+0], 0
.text:0040549A                 mov     ebx, [esp+0BCh+var_24]
.text:004054A1                 mov     ecx, [esp+0BCh+Src]
.text:004054A8                 inc     ebx
.text:004054A9                 mov     [esp+0BCh+var_24], ebx
.text:004054B0                 mov     dword ptr [ecx+ebx*4], 0
.text:004054B7                 inc     [esp+0BCh+var_24]
.text:004054BE                 jmp     loc_404F5A
.text:004054C3 ; ---------------------------------------------------------------------------
.text:004054C3
.text:004054C3 loc_4054C3:                             ; CODE XREF: sub_403FC0+142B↑j
.text:004054C3                 mov     ebx, [esp+0BCh+Src]
.text:004054CA                 jmp     short loc_405458
.text:004054CC ; ---------------------------------------------------------------------------
.text:004054CC
.text:004054CC loc_4054CC:                             ; DATA XREF: .text:00403F88↑o
.text:004054CC                 mov     esi, [esp+0BCh+var_4C]
.text:004054D0                 movsx   ebx, byte ptr [esi+1]
.text:004054D4                 movzx   ebp, byte ptr [esi]
.text:004054D7                 add     esi, 2
.text:004054DA                 mov     [esp+0BCh+var_4C], esi
.text:004054DE                 shl     ebx, 8
.text:004054E1                 add     ebp, ebx
.text:004054E3
.text:004054E3 loc_4054E3:                             ; CODE XREF: sub_403FC0+153A↓j
.text:004054E3                                         ; sub_403FC0+154C↓j
.text:004054E3                 lea     edx, [esi+2]
.text:004054E6                 cmp     edx, [esp+0BCh+var_50]
.text:004054EA                 jnb     short def_4049C4 ; jumptable 004049C4 default case
.text:004054EC                 movzx   ecx, byte ptr [esi]
.text:004054EF                 sub     cl, 6
.text:004054F2                 cmp     cl, 1
.text:004054F5                 ja      short def_4049C4 ; jumptable 004049C4 default case
.text:004054F7                 add     esi, 3
.text:004054FA                 jmp     short loc_4054E3
.text:004054FC ; ---------------------------------------------------------------------------
.text:004054FC
.text:004054FC def_4049C4:                             ; CODE XREF: sub_403FC0+152A↑j
.text:004054FC                                         ; sub_403FC0+1535↑j
.text:004054FC                 lea     eax, [esi+6]    ; jumptable 004049C4 default case
.text:004054FF                 cmp     eax, [esp+0BCh+var_50]
.text:00405503                 jnb     short loc_40550E
.text:00405505                 cmp     byte ptr [esi], 13h
.text:00405508                 jnz     short loc_40550E
.text:0040550A                 mov     esi, eax
.text:0040550C                 jmp     short loc_4054E3
.text:0040550E ; ---------------------------------------------------------------------------
.text:0040550E
.text:0040550E loc_40550E:                             ; CODE XREF: sub_403FC0+1543↑j
.text:0040550E                                         ; sub_403FC0+1548↑j
.text:0040550E                 mov     edi, [esp+0BCh+var_4C]
.text:00405512                 add     edi, ebp
.text:00405514                 cmp     esi, [esp+0BCh+var_50]
.text:00405518                 mov     [esp+0BCh+var_30], edi
.text:0040551F                 jz      loc_4056A5
.text:00405525                 movzx   eax, byte ptr [esi]
.text:00405528                 cmp     al, 2
.text:0040552A                 jz      loc_40575B
.text:00405530                 mov     ebp, [esp+0BCh+arg_0]
.text:00405537                 test    byte ptr [ebp+1Ch], 80h
.text:0040553B                 jz      short loc_405545
.text:0040553D                 cmp     al, 0Ah
.text:0040553F                 jz      loc_4056EB
.text:00405545
.text:00405545 loc_405545:                             ; CODE XREF: sub_403FC0+157B↑j
.text:00405545                 cmp     al, 4
.text:00405547                 jz      loc_4055F5
.text:0040554D
.text:0040554D loc_40554D:                             ; CODE XREF: sub_403FC0+1652↓j
.text:0040554D                                         ; sub_403FC0:loc_405654↓j ...
.text:0040554D                 sub     [esp+0BCh+var_4C], 2
.text:00405552                 mov     esi, [esp+0BCh+var_4C]
.text:00405556                 cmp     byte ptr [esi-1], 11h
.text:0040555A                 jz      short loc_405565
.text:0040555C                 mov     byte ptr [esi-1], 0Dh
.text:00405560                 jmp     loc_404F5A
.text:00405565 ; ---------------------------------------------------------------------------
.text:00405565
.text:00405565 loc_405565:                             ; CODE XREF: sub_403FC0+159A↑j
.text:00405565                                         ; DATA XREF: .text:00403F84↑o
.text:00405565                 mov     edi, [esp+0BCh+var_24]
.text:0040556C                 mov     ebx, [esp+0BCh+Src]
.text:00405573                 lea     eax, [edi-3]
.text:00405576                 mov     [esp+0BCh+var_24], eax
.text:0040557D                 lea     ecx, [edi-4]
.text:00405580                 mov     ebp, [ebx+eax*4]
.text:00405583                 mov     [esp+0BCh+var_24], ecx
.text:0040558A                 mov     edi, [ebx+ecx*4]
.text:0040558D                 mov     ecx, ebp
.text:0040558F                 cmp     ebp, edi
.text:00405591                 jb      short loc_4055E8
.text:00405593
.text:00405593 loc_405593:                             ; CODE XREF: sub_403FC0+1626↓j
.text:00405593                 mov     eax, [esp+0BCh+var_24]
.text:0040559A                 dec     eax
.text:0040559B                 mov     [esp+0BCh+var_24], eax
.text:004055A2                 mov     edx, [ebx+eax*4]
.text:004055A5                 mov     ebx, [esp+0BCh+var_94]
.text:004055A9                 mov     [ebx+ecx*4], edx
.text:004055AC                 mov     edx, [esp+0BCh+var_24]
.text:004055B3                 mov     ebx, [esp+0BCh+Src]
.text:004055BA                 mov     esi, [esp+0BCh+var_90]
.text:004055BE                 lea     ebp, [edx-1]
.text:004055C1                 mov     [esp+0BCh+var_24], ebp
.text:004055C8                 mov     eax, [ebx+ebp*4]
.text:004055CB                 mov     ebp, [esp+0BCh+var_90]
.text:004055CF                 mov     [ebp+ecx*4+0], eax
.text:004055D3                 lea     ebp, [edx-2]
.text:004055D6                 mov     [esp+0BCh+var_24], ebp
.text:004055DD                 mov     edx, [ebx+ebp*4]
.text:004055E0                 mov     [esi+ecx*4], edx
.text:004055E3                 dec     ecx
.text:004055E4                 cmp     ecx, edi
.text:004055E6                 jnb     short loc_405593
.text:004055E8
.text:004055E8 loc_4055E8:                             ; CODE XREF: sub_403FC0+15D1↑j
.text:004055E8                 mov     [esp+0BCh+var_8C], 0
.text:004055F0                 jmp     loc_404F5A
.text:004055F5 ; ---------------------------------------------------------------------------
.text:004055F5
.text:004055F5 loc_4055F5:                             ; CODE XREF: sub_403FC0+1587↑j
.text:004055F5                 mov     ebx, [esp+0BCh+var_30]
.text:004055FC                 mov     edi, ebx
.text:004055FE                 cmp     byte ptr [ebx+3], 2
.text:00405602                 jz      loc_4056B2
.text:00405608
.text:00405608 loc_405608:                             ; CODE XREF: sub_403FC0+1718↓j
.text:00405608                 movzx   eax, byte ptr [edi+3]
.text:0040560C                 cmp     al, 5
.text:0040560E                 jz      short loc_405667
.text:00405610                 cmp     al, 4
.text:00405612                 jnz     loc_40554D
.text:00405618                 movzx   eax, byte ptr [esi+1]
.text:0040561C                 xor     edx, edx
.text:0040561E                 movzx   ebx, al
.text:00405621                 mov     [esp+0BCh+var_A5], al
.text:00405625                 cmp     edx, ebx
.text:00405627                 jge     short loc_405645
.text:00405629                 movzx   ecx, byte ptr [edi+4]
.text:0040562D                 cmp     edx, ecx
.text:0040562F                 jge     short loc_405645
.text:00405631
.text:00405631 loc_405631:                             ; CODE XREF: sub_403FC0+1683↓j
.text:00405631                 movzx   eax, byte ptr [edx+edi+5]
.text:00405636                 test    [edx+esi+2], al
.text:0040563A                 jnz     short loc_405645
.text:0040563C                 inc     edx
.text:0040563D                 cmp     edx, ebx
.text:0040563F                 jge     short loc_405645
.text:00405641                 cmp     edx, ecx
.text:00405643                 jl      short loc_405631
.text:00405645
.text:00405645 loc_405645:                             ; CODE XREF: sub_403FC0+1667↑j
.text:00405645                                         ; sub_403FC0+166F↑j ...
.text:00405645                 movzx   ebp, [esp+0BCh+var_A5]
.text:0040564A                 cmp     edx, ebp
.text:0040564C                 jz      short loc_40565A
.text:0040564E                 movzx   ebx, byte ptr [edi+4]
.text:00405652                 cmp     edx, ebx
.text:00405654
.text:00405654 loc_405654:                             ; CODE XREF: sub_403FC0+1784↓j
.text:00405654                 jnz     loc_40554D
.text:0040565A
.text:0040565A loc_40565A:                             ; CODE XREF: sub_403FC0+168C↑j
.text:0040565A                 mov     edx, [esp+0BCh+var_4C]
.text:0040565E                 mov     byte ptr [edx-3], 11h
.text:00405662                 jmp     loc_40554D
.text:00405667 ; ---------------------------------------------------------------------------
.text:00405667
.text:00405667 loc_405667:                             ; CODE XREF: sub_403FC0+164E↑j
.text:00405667                 movzx   ebx, byte ptr [esi+1]
.text:0040566B                 xor     ecx, ecx
.text:0040566D                 movzx   eax, bl
.text:00405670                 cmp     ecx, eax
.text:00405672                 jge     short loc_40569A
.text:00405674                 mov     ebp, eax
.text:00405676
.text:00405676 loc_405676:                             ; CODE XREF: sub_403FC0+16D8↓j
.text:00405676                 movzx   edx, byte ptr [ecx+esi+2]
.text:0040567B                 test    dl, dl
.text:0040567D                 jz      short loc_405695
.text:0040567F                 movzx   eax, byte ptr [edi+4]
.text:00405683                 cmp     ecx, eax
.text:00405685                 jge     short loc_40569A
.text:00405687                 movzx   eax, byte ptr [ecx+edi+5]
.text:0040568C                 movzx   edx, dl
.text:0040568F                 not     eax
.text:00405691                 test    eax, edx
.text:00405693                 jnz     short loc_40569A
.text:00405695
.text:00405695 loc_405695:                             ; CODE XREF: sub_403FC0+16BD↑j
.text:00405695                 inc     ecx
.text:00405696                 cmp     ecx, ebp
.text:00405698                 jl      short loc_405676
.text:0040569A
.text:0040569A loc_40569A:                             ; CODE XREF: sub_403FC0+16B2↑j
.text:0040569A                                         ; sub_403FC0+16C5↑j ...
.text:0040569A                 movzx   esi, bl
.text:0040569D                 cmp     ecx, esi
.text:0040569F                 jnz     loc_40554D
.text:004056A5
.text:004056A5 loc_4056A5:                             ; CODE XREF: sub_403FC0+155F↑j
.text:004056A5                 mov     ecx, [esp+0BCh+var_4C]
.text:004056A9                 mov     byte ptr [ecx-3], 11h
.text:004056AD                 jmp     loc_40554D
.text:004056B2 ; ---------------------------------------------------------------------------
.text:004056B2
.text:004056B2 loc_4056B2:                             ; CODE XREF: sub_403FC0+1642↑j
.text:004056B2                 movzx   edx, byte ptr [esi+1]
.text:004056B6                 movzx   ecx, byte ptr [ebx+5]
.text:004056BA                 shl     edx, 3
.text:004056BD                 movzx   ebp, cl
.text:004056C0                 cmp     edx, ebp
.text:004056C2                 jle     short loc_4056DE
.text:004056C4                 mov     dl, cl
.text:004056C6                 shr     dl, 3
.text:004056C9                 and     ecx, 7
.text:004056CC                 movzx   ebx, dl
.text:004056CF                 movzx   eax, byte ptr [ebx+esi+2]
.text:004056D4                 sar     eax, cl
.text:004056D6                 test    al, 1
.text:004056D8                 jnz     loc_405608
.text:004056DE
.text:004056DE loc_4056DE:                             ; CODE XREF: sub_403FC0+1702↑j
.text:004056DE                 mov     edi, [esp+0BCh+var_4C]
.text:004056E2                 mov     byte ptr [edi-3], 11h
.text:004056E6                 jmp     loc_40554D
.text:004056EB ; ---------------------------------------------------------------------------
.text:004056EB
.text:004056EB loc_4056EB:                             ; CODE XREF: sub_403FC0+157F↑j
.text:004056EB                 mov     cl, 0Ah
.text:004056ED
.text:004056ED loc_4056ED:                             ; CODE XREF: sub_403FC0+179F↓j
.text:004056ED                 mov     ebx, [esp+0BCh+var_30]
.text:004056F4                 mov     esi, ebx
.text:004056F6                 cmp     byte ptr [ebx+3], 2
.text:004056FA                 jz      short loc_405749
.text:004056FC
.text:004056FC loc_4056FC:                             ; CODE XREF: sub_403FC0+178C↓j
.text:004056FC                 movzx   edx, byte ptr [esi+3]
.text:00405700                 mov     bl, dl
.text:00405702                 sub     bl, 4
.text:00405705                 cmp     bl, 1
.text:00405708                 ja      loc_40554D
.text:0040570E                 movzx   edi, byte ptr [esi+4]
.text:00405712                 xor     ebx, ebx
.text:00405714                 cmp     dl, 5
.text:00405717                 setz    bl
.text:0040571A                 movzx   eax, cl
.text:0040571D                 shl     edi, 3
.text:00405720                 cmp     eax, edi
.text:00405722                 jnb     short loc_405742
.text:00405724                 mov     al, cl
.text:00405726                 shr     al, 3
.text:00405729                 and     ecx, 7
.text:0040572C                 movzx   edx, al
.text:0040572F                 movzx   eax, byte ptr [edx+esi+5]
.text:00405734                 sar     eax, cl
.text:00405736                 test    al, 1
.text:00405738                 jz      short loc_405742
.text:0040573A                 test    ebx, ebx
.text:0040573C                 setz    cl
.text:0040573F                 movzx   ebx, cl
.text:00405742
.text:00405742 loc_405742:                             ; CODE XREF: sub_403FC0+1762↑j
.text:00405742                                         ; sub_403FC0+1778↑j
.text:00405742                 test    ebx, ebx
.text:00405744                 jmp     loc_405654
.text:00405749 ; ---------------------------------------------------------------------------
.text:00405749
.text:00405749 loc_405749:                             ; CODE XREF: sub_403FC0+173A↑j
.text:00405749                 cmp     [ebx+5], cl
.text:0040574C                 jz      short loc_4056FC
.text:0040574E                 mov     esi, [esp+0BCh+var_4C]
.text:00405752                 mov     byte ptr [esi-3], 11h
.text:00405756                 jmp     loc_40554D
.text:0040575B ; ---------------------------------------------------------------------------
.text:0040575B
.text:0040575B loc_40575B:                             ; CODE XREF: sub_403FC0+156A↑j
.text:0040575B                 movzx   ecx, byte ptr [esi+2]
.text:0040575F                 jmp     short loc_4056ED
.text:00405761 ; ---------------------------------------------------------------------------
.text:00405761
.text:00405761 loc_405761:                             ; DATA XREF: .text:00403F80↑o
.text:00405761                 mov     edx, [esp+0BCh+var_4C]
.text:00405765                 mov     edi, [esp+0BCh+var_60]
.text:00405769                 mov     ebx, [esp+0BCh+var_64]
.text:0040576D                 movsx   ecx, byte ptr [edx+1]
.text:00405771                 mov     esi, [esp+0BCh+var_24]
.text:00405778                 sub     ebx, edi
.text:0040577A                 movzx   ebp, byte ptr [edx]
.text:0040577D                 lea     edi, [ebx+ebx]
.text:00405780                 shl     ecx, 8
.text:00405783                 add     edx, 2
.text:00405786                 lea     eax, [ebx+edi+7]
.text:0040578A                 mov     [esp+0BCh+var_4C], edx
.text:0040578E                 add     ebp, ecx
.text:00405790                 mov     ecx, [esp+0BCh+var_28]
.text:00405797                 mov     edx, ecx
.text:00405799                 sub     edx, esi
.text:0040579B                 cmp     edx, eax
.text:0040579D                 jnb     short loc_405813
.text:0040579F                 mov     edi, eax
.text:004057A1
.text:004057A1 loc_4057A1:                             ; CODE XREF: sub_403FC0+1851↓j
.text:004057A1                 mov     edx, dword_416020
.text:004057A7                 lea     esi, [edx+edx*8]
.text:004057AA                 lea     ebx, [edx+esi*2]
.text:004057AD                 cmp     ecx, ebx
.text:004057AF                 ja      loc_404741
.text:004057B5                 lea     edx, ds:0[ecx*8]
.text:004057BC                 mov     [esp+0BCh+Size], edx ; Size
.text:004057BF                 call    malloc
.text:004057C4                 mov     [esp+0BCh+Size], eax ; void *
.text:004057C7                 mov     esi, [esp+0BCh+var_28]
.text:004057CE                 mov     ebx, [esp+0BCh+Src]
.text:004057D5                 shl     esi, 2
.text:004057D8                 mov     [esp+0BCh+var_B4], esi ; Size
.text:004057DC                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:004057E0                 call    memcpy
.text:004057E5                 mov     [esp+0BCh+Src], eax
.text:004057EC                 test    eax, eax
.text:004057EE                 jz      loc_404741
.text:004057F4                 mov     ebx, [esp+0BCh+var_28]
.text:004057FB                 mov     esi, [esp+0BCh+var_24]
.text:00405802                 add     ebx, ebx
.text:00405804                 mov     [esp+0BCh+var_28], ebx
.text:0040580B                 mov     ecx, ebx
.text:0040580D                 sub     ebx, esi
.text:0040580F                 cmp     ebx, edi
.text:00405811                 jb      short loc_4057A1
.text:00405813
.text:00405813 loc_405813:                             ; CODE XREF: sub_403FC0+17DD↑j
.text:00405813                 mov     ecx, [esp+0BCh+var_60]
.text:00405817                 mov     eax, [esp+0BCh+var_64]
.text:0040581B                 cmp     ecx, eax
.text:0040581D                 ja      loc_4058D3
.text:00405823                 mov     ebx, [esp+0BCh+Src]
.text:0040582A
.text:0040582A loc_40582A:                             ; CODE XREF: sub_403FC0+18C8↓j
.text:0040582A                 mov     eax, [esp+0BCh+var_68]
.text:0040582E                 mov     edi, [eax+ecx*4]
.text:00405831                 mov     [ebx+esi*4], edi
.text:00405834                 mov     edx, [esp+0BCh+var_6C]
.text:00405838                 mov     edi, [esp+0BCh+var_24]
.text:0040583F                 mov     ebx, [esp+0BCh+Src]
.text:00405846                 mov     esi, [edx+ecx*4]
.text:00405849                 inc     edi
.text:0040584A                 mov     [esp+0BCh+var_24], edi
.text:00405851                 mov     [ebx+edi*4], esi
.text:00405854                 mov     edi, [esp+0BCh+var_24]
.text:0040585B                 mov     eax, [esp+0BCh+var_78]
.text:0040585F                 mov     ebx, [esp+0BCh+Src]
.text:00405866                 inc     edi
.text:00405867                 mov     [esp+0BCh+var_24], edi
.text:0040586E                 mov     esi, [eax+ecx*4]
.text:00405871                 inc     ecx
.text:00405872                 mov     [ebx+edi*4], esi
.text:00405875                 mov     esi, [esp+0BCh+var_24]
.text:0040587C                 inc     esi
.text:0040587D                 cmp     ecx, [esp+0BCh+var_64]
.text:00405881                 mov     [esp+0BCh+var_24], esi
.text:00405888                 jbe     short loc_40582A
.text:0040588A
.text:0040588A loc_40588A:                             ; CODE XREF: sub_403FC0+191A↓j
.text:0040588A                 mov     eax, [esp+0BCh+var_60]
.text:0040588E                 mov     [ebx+esi*4], eax
.text:00405891                 mov     edi, [esp+0BCh+var_24]
.text:00405898                 mov     edx, [esp+0BCh+Src]
.text:0040589F                 mov     esi, [esp+0BCh+var_64]
.text:004058A3                 inc     edi
.text:004058A4                 mov     [esp+0BCh+var_24], edi
.text:004058AB                 mov     [edx+edi*4], esi
.text:004058AE                 mov     ebx, [esp+0BCh+var_4C]
.text:004058B2                 mov     ecx, [esp+0BCh+var_24]
.text:004058B9                 add     ebx, ebp
.text:004058BB                 mov     ebp, [esp+0BCh+Src]
.text:004058C2                 inc     ecx
.text:004058C3                 mov     [esp+0BCh+var_24], ecx
.text:004058CA                 mov     [ebp+ecx*4+0], ebx
.text:004058CE                 jmp     loc_405314
.text:004058D3 ; ---------------------------------------------------------------------------
.text:004058D3
.text:004058D3 loc_4058D3:                             ; CODE XREF: sub_403FC0+185D↑j
.text:004058D3                 mov     ebx, [esp+0BCh+Src]
.text:004058DA                 jmp     short loc_40588A
.text:004058DC ; ---------------------------------------------------------------------------
.text:004058DC
.text:004058DC loc_4058DC:                             ; DATA XREF: .text:00403F7C↑o
.text:004058DC                 jmp     loc_404FBD
.text:004058E1 ; ---------------------------------------------------------------------------
.text:004058E1
.text:004058E1 loc_4058E1:                             ; DATA XREF: .text:00403F78↑o
.text:004058E1                 jmp     loc_404F5A
.text:004058E6 ; ---------------------------------------------------------------------------
.text:004058E6
.text:004058E6 loc_4058E6:                             ; DATA XREF: .text:00403F70↑o
.text:004058E6                 mov     eax, [esp+0BCh+var_38]
.text:004058ED                 cmp     [esp+0BCh+var_44], eax
.text:004058F1                 jz      loc_404C62
.text:004058F7                 jmp     loc_404412
.text:004058F7 ; ---------------------------------------------------------------------------
.text:004058FC                 align 10h
.text:00405900
.text:00405900 loc_405900:                             ; DATA XREF: .text:00403F6C↑o
.text:00405900                 mov     ecx, [esp+0BCh+arg_8]
.text:00405907                 test    ecx, ecx
.text:00405909                 jz      short loc_405930
.text:0040590B                 mov     ebx, [esp+0BCh+arg_4]
.text:00405912                 cmp     [esp+0BCh+var_44], ebx
.text:00405916
.text:00405916 loc_405916:                             ; CODE XREF: sub_403FC0+197B↓j
.text:00405916                 jz      loc_404B90
.text:0040591C                 mov     edi, [esp+0BCh+arg_10]
.text:00405923                 test    edi, edi
.text:00405925
.text:00405925 loc_405925:                             ; CODE XREF: sub_403FC0+19D7↓j
.text:00405925                 jz      loc_404B90
.text:0040592B                 jmp     loc_404412
.text:00405930 ; ---------------------------------------------------------------------------
.text:00405930
.text:00405930 loc_405930:                             ; CODE XREF: sub_403FC0+1949↑j
.text:00405930                 mov     esi, [esp+0BCh+arg_C]
.text:00405937                 cmp     [esp+0BCh+var_44], esi
.text:0040593B                 jmp     short loc_405916
.text:0040593D ; ---------------------------------------------------------------------------
.text:0040593D
.text:0040593D loc_40593D:                             ; DATA XREF: .text:00403F68↑o
.text:0040593D                 mov     ebx, [esp+0BCh+var_38]
.text:00405944                 cmp     [esp+0BCh+var_44], ebx
.text:00405948                 jz      short loc_40598C
.text:0040594A                 mov     edi, [esp+0BCh+var_34]
.text:00405951                 cmp     [esp+0BCh+var_44], edi
.text:00405955                 jz      short loc_405980
.text:00405957                 mov     edx, [esp+0BCh+var_44]
.text:0040595B                 cmp     byte ptr [edx], 0Ah
.text:0040595E
.text:0040595E loc_40595E:                             ; CODE XREF: sub_403FC0+19CA↓j
.text:0040595E                                         ; sub_403FC0+1A14↓j
.text:0040595E                 jnz     loc_404412
.text:00405964                 mov     ebp, [esp+0BCh+arg_0]
.text:0040596B                 test    byte ptr [ebp+1Ch], 80h
.text:0040596F                 jnz     loc_4047EB      ; jumptable 00404237 case 0
.text:0040596F                                         ; jumptable 00404BB6 case 0
.text:0040596F                                         ; jumptable 00404C88 case 0
.text:00405975                 jmp     loc_404412
.text:00405975 ; ---------------------------------------------------------------------------
.text:0040597A                 align 10h
.text:00405980
.text:00405980 loc_405980:                             ; CODE XREF: sub_403FC0+1995↑j
.text:00405980                 mov     eax, [esp+0BCh+arg_C]
.text:00405987                 cmp     byte ptr [eax], 0Ah
.text:0040598A                 jmp     short loc_40595E
.text:0040598C ; ---------------------------------------------------------------------------
.text:0040598C
.text:0040598C loc_40598C:                             ; CODE XREF: sub_403FC0+1988↑j
.text:0040598C                 mov     esi, [esp+0BCh+arg_0]
.text:00405993                 test    byte ptr [esi+1Ch], 40h
.text:00405997                 jmp     short loc_405925
.text:00405999 ; ---------------------------------------------------------------------------
.text:00405999
.text:00405999 loc_405999:                             ; DATA XREF: .text:00403F64↑o
.text:00405999                 mov     ebx, [esp+0BCh+arg_8]
.text:004059A0                 test    ebx, ebx
.text:004059A2                 jz      short loc_4059D6
.text:004059A4                 mov     edi, [esp+0BCh+arg_4]
.text:004059AB                 cmp     [esp+0BCh+var_44], edi
.text:004059AF
.text:004059AF loc_4059AF:                             ; CODE XREF: sub_403FC0+1A21↓j
.text:004059AF                 jz      short loc_4059BC
.text:004059B1                 mov     edx, [esp+0BCh+arg_10]
.text:004059B8                 test    edx, edx
.text:004059BA                 jnz     short loc_4059CC
.text:004059BC
.text:004059BC loc_4059BC:                             ; CODE XREF: sub_403FC0:loc_4059AF↑j
.text:004059BC                 mov     ebp, [esp+0BCh+arg_0]
.text:004059C3                 test    byte ptr [ebp+1Ch], 20h
.text:004059C7                 jmp     loc_404A64
.text:004059CC ; ---------------------------------------------------------------------------
.text:004059CC
.text:004059CC loc_4059CC:                             ; CODE XREF: sub_403FC0+19FA↑j
.text:004059CC                 mov     ecx, [esp+0BCh+var_44]
.text:004059D0                 cmp     byte ptr [ecx-1], 0Ah
.text:004059D4                 jmp     short loc_40595E
.text:004059D6 ; ---------------------------------------------------------------------------
.text:004059D6
.text:004059D6 loc_4059D6:                             ; CODE XREF: sub_403FC0+19E2↑j
.text:004059D6                 mov     eax, [esp+0BCh+arg_C]
.text:004059DD                 cmp     [esp+0BCh+var_44], eax
.text:004059E1                 jmp     short loc_4059AF
.text:004059E3 ; ---------------------------------------------------------------------------
.text:004059E3
.text:004059E3 loc_4059E3:                             ; DATA XREF: .text:00403F60↑o
.text:004059E3                 mov     eax, [esp+0BCh+var_4C]
.text:004059E7                 mov     ecx, [esp+0BCh+var_68]
.text:004059EB                 movzx   esi, byte ptr [eax]
.text:004059EE                 inc     [esp+0BCh+var_4C]
.text:004059F2                 mov     edi, [ecx+esi*4]
.text:004059F5                 mov     [esp+0BCh+var_A4], esi
.text:004059F9                 cmp     edi, offset unk_419330
.text:004059FF                 jz      loc_404412
.text:00405A05                 mov     ebp, [esp+0BCh+var_6C]
.text:00405A09                 mov     eax, [ebp+esi*4+0]
.text:00405A0D                 cmp     eax, offset unk_419330
.text:00405A12                 jz      loc_404412
.text:00405A18                 mov     [esp+0BCh+var_A0], edi
.text:00405A1C                 mov     esi, [esp+0BCh+arg_8]
.text:00405A23                 xor     ecx, ecx
.text:00405A25                 test    esi, esi
.text:00405A27                 jz      short loc_405A3D
.text:00405A29                 cmp     [esp+0BCh+arg_4], edi
.text:00405A30                 ja      short loc_405A3D
.text:00405A32                 mov     edx, [esp+0BCh+var_34]
.text:00405A39                 cmp     edi, edx
.text:00405A3B                 jbe     short loc_405A42
.text:00405A3D
.text:00405A3D loc_405A3D:                             ; CODE XREF: sub_403FC0+1A67↑j
.text:00405A3D                                         ; sub_403FC0+1A70↑j
.text:00405A3D                 mov     ecx, 1
.text:00405A42
.text:00405A42 loc_405A42:                             ; CODE XREF: sub_403FC0+1A7B↑j
.text:00405A42                 mov     edi, [esp+0BCh+arg_8]
.text:00405A49                 xor     edx, edx
.text:00405A4B                 test    edi, edi
.text:00405A4D                 jz      short loc_405A66
.text:00405A4F                 cmp     [esp+0BCh+arg_4], eax
.text:00405A56                 ja      short loc_405A66
.text:00405A58                 cmp     eax, [esp+0BCh+var_34]
.text:00405A5F                 ja      short loc_405A66
.text:00405A61                 mov     edx, 1
.text:00405A66
.text:00405A66 loc_405A66:                             ; CODE XREF: sub_403FC0+1A8D↑j
.text:00405A66                                         ; sub_403FC0+1A96↑j ...
.text:00405A66                 cmp     ecx, edx
.text:00405A68                 mov     ebx, eax
.text:00405A6A                 jnz     short loc_405A73
.text:00405A6C                 mov     ebx, [esp+0BCh+var_3C]
.text:00405A73
.text:00405A73 loc_405A73:                             ; CODE XREF: sub_403FC0+1AAA↑j
.text:00405A73                                         ; sub_403FC0+1B21↓j ...
.text:00405A73                 cmp     [esp+0BCh+var_A0], ebx
.text:00405A77                 jz      loc_405B46
.text:00405A7D
.text:00405A7D loc_405A7D:                             ; CODE XREF: sub_403FC0+1BAC↓j
.text:00405A7D                                         ; sub_403FC0+1BB5↓j
.text:00405A7D                 mov     eax, [esp+0BCh+var_48]
.text:00405A81                 cmp     [esp+0BCh+var_44], eax
.text:00405A85                 jz      loc_405B20
.text:00405A8B
.text:00405A8B loc_405A8B:                             ; CODE XREF: sub_403FC0+1B81↓j
.text:00405A8B                 mov     ecx, [esp+0BCh+var_44]
.text:00405A8F                 mov     ebp, [esp+0BCh+var_48]
.text:00405A93                 mov     edx, [esp+0BCh+var_A0]
.text:00405A97                 sub     ebp, ecx
.text:00405A99                 mov     ecx, ebx
.text:00405A9B                 sub     ecx, edx
.text:00405A9D                 cmp     ebp, ecx
.text:00405A9F                 jle     short loc_405AA3
.text:00405AA1                 mov     ebp, ecx
.text:00405AA3
.text:00405AA3 loc_405AA3:                             ; CODE XREF: sub_403FC0+1ADF↑j
.text:00405AA3                 mov     esi, [esp+0BCh+var_58]
.text:00405AA7                 test    esi, esi
.text:00405AA9                 jz      short loc_405B0F
.text:00405AAB                 mov     [esp+0BCh+var_B4], ebp
.text:00405AAF                 mov     edx, [esp+0BCh+var_58]
.text:00405AB3                 mov     eax, [esp+0BCh+var_A0]
.text:00405AB7                 mov     edi, [esp+0BCh+var_44]
.text:00405ABB                 mov     [esp+0BCh+var_B0], edx
.text:00405ABF                 mov     [esp+0BCh+var_B8], eax
.text:00405AC3                 mov     [esp+0BCh+Size], edi
.text:00405AC6                 call    sub_406680
.text:00405ACB                 test    eax, eax
.text:00405ACD
.text:00405ACD loc_405ACD:                             ; CODE XREF: sub_403FC0+1B5E↓j
.text:00405ACD                 jnz     loc_404412
.text:00405AD3                 add     [esp+0BCh+var_44], ebp
.text:00405AD7                 add     [esp+0BCh+var_A0], ebp
.text:00405ADB                 mov     ebp, [esp+0BCh+var_8C]
.text:00405ADF                 test    ebp, ebp
.text:00405AE1                 jnz     short loc_405A73
.text:00405AE3                 mov     [esp+0BCh+var_8C], 1
.text:00405AEB                 mov     eax, [esp+0BCh+var_60]
.text:00405AEF                 mov     ecx, [esp+0BCh+var_64]
.text:00405AF3                 cmp     eax, ecx
.text:00405AF5                 ja      loc_405A73
.text:00405AFB
.text:00405AFB loc_405AFB:                             ; CODE XREF: sub_403FC0+1B48↓j
.text:00405AFB                 mov     esi, [esp+0BCh+var_78]
.text:00405AFF                 or      byte ptr [esi+eax*4], 18h
.text:00405B03                 inc     eax
.text:00405B04                 cmp     eax, [esp+0BCh+var_64]
.text:00405B08                 jbe     short loc_405AFB
.text:00405B0A                 jmp     loc_405A73
.text:00405B0F ; ---------------------------------------------------------------------------
.text:00405B0F
.text:00405B0F loc_405B0F:                             ; CODE XREF: sub_403FC0+1AE9↑j
.text:00405B0F                 cld
.text:00405B10                 mov     esi, [esp+0BCh+var_44]
.text:00405B14                 cmp     ebp, ebp
.text:00405B16                 mov     edi, [esp+0BCh+var_A0]
.text:00405B1A                 mov     ecx, ebp
.text:00405B1C                 repe cmpsb
.text:00405B1E                 jmp     short loc_405ACD
.text:00405B20 ; ---------------------------------------------------------------------------
.text:00405B20
.text:00405B20 loc_405B20:                             ; CODE XREF: sub_403FC0+1AC5↑j
.text:00405B20                                         ; sub_403FC0+1B7F↓j
.text:00405B20                 mov     eax, [esp+0BCh+var_40]
.text:00405B24                 cmp     [esp+0BCh+var_48], eax
.text:00405B28                 jz      loc_404412
.text:00405B2E                 mov     [esp+0BCh+var_48], eax
.text:00405B32                 mov     edi, [esp+0BCh+arg_C]
.text:00405B39                 cmp     edi, eax
.text:00405B3B                 mov     [esp+0BCh+var_44], edi
.text:00405B3F                 jz      short loc_405B20
.text:00405B41                 jmp     loc_405A8B
.text:00405B46 ; ---------------------------------------------------------------------------
.text:00405B46
.text:00405B46 loc_405B46:                             ; CODE XREF: sub_403FC0+1AB7↑j
.text:00405B46                                         ; sub_403FC0+1BAA↓j
.text:00405B46                 cmp     ebx, [esp+0BCh+var_40]
.text:00405B4A                 jz      short loc_405B71
.text:00405B4C                 mov     ebp, [esp+0BCh+var_A4]
.text:00405B50                 mov     ecx, [esp+0BCh+var_6C]
.text:00405B54                 mov     eax, [ecx+ebp*4]
.text:00405B57                 cmp     ebx, eax
.text:00405B59                 jz      short loc_405B71
.text:00405B5B                 mov     esi, [esp+0BCh+arg_C]
.text:00405B62                 mov     ebx, eax
.text:00405B64                 cmp     esi, eax
.text:00405B66                 mov     [esp+0BCh+var_A0], esi
.text:00405B6A                 jz      short loc_405B46
.text:00405B6C                 jmp     loc_405A7D
.text:00405B71 ; ---------------------------------------------------------------------------
.text:00405B71
.text:00405B71 loc_405B71:                             ; CODE XREF: sub_403FC0+1B8A↑j
.text:00405B71                                         ; sub_403FC0+1B99↑j
.text:00405B71                 cmp     [esp+0BCh+var_A0], ebx
.text:00405B75                 jnz     loc_405A7D
.text:00405B7B                 jmp     loc_40499E
.text:00405B80 ; ---------------------------------------------------------------------------
.text:00405B80
.text:00405B80 loc_405B80:                             ; CODE XREF: sub_403FC0+A04↑j
.text:00405B80                                         ; DATA XREF: .text:jpt_4049C4↑o
.text:00405B80                 mov     esi, [esp+0BCh+var_4C] ; jumptable 004049C4 case 7
.text:00405B84                 mov     ebx, [esp+0BCh+var_78]
.text:00405B88                 movzx   edx, byte ptr [esi]
.text:00405B8B                 test    byte ptr [ebx+edx*4], 3
.text:00405B8F                 jz      loc_405F77
.text:00405B95                 mov     edi, [esp+0BCh+var_6C]
.text:00405B99                 mov     eax, [edi+edx*4]
.text:00405B9C                 cmp     eax, offset unk_419330
.text:00405BA1                 jz      loc_405F6E
.text:00405BA7
.text:00405BA7 loc_405BA7:                             ; CODE XREF: sub_403FC0+1FB2↓j
.text:00405BA7                                         ; sub_403FC0+1FBF↓j
.text:00405BA7                 mov     ecx, [esp+0BCh+var_74]
.text:00405BAB                 mov     edi, [esp+0BCh+var_6C]
.text:00405BAF                 mov     ebx, [esp+0BCh+var_78]
.text:00405BB3                 mov     [ecx+edx*4], eax
.text:00405BB6                 mov     edx, [esp+0BCh+var_4C]
.text:00405BBA                 mov     eax, [esp+0BCh+var_44]
.text:00405BBE                 movzx   ebp, byte ptr [edx]
.text:00405BC1                 mov     [edi+ebp*4], eax
.text:00405BC4                 movzx   esi, byte ptr [edx]
.text:00405BC7                 and     byte ptr [ebx+esi*4], 0FBh
.text:00405BCB                 mov     [esp+0BCh+var_8C], 0
.text:00405BD3                 mov     ecx, [esp+0BCh+var_64]
.text:00405BD7                 cmp     [esp+0BCh+var_60], ecx
.text:00405BDB                 jz      loc_405F56
.text:00405BE1                 mov     ebx, [esp+0BCh+var_4C]
.text:00405BE5                 movzx   ecx, byte ptr [ebx]
.text:00405BE8                 mov     dl, cl
.text:00405BEA                 dec     dl
.text:00405BEC                 jz      short loc_405C15
.text:00405BEE                 mov     esi, [esp+0BCh+var_78]
.text:00405BF2                 movzx   edi, dl
.text:00405BF5                 test    byte ptr [esi+edi*4], 4
.text:00405BF9                 jnz     short loc_405C0D
.text:00405BFB
.text:00405BFB loc_405BFB:                             ; CODE XREF: sub_403FC0+1C4B↓j
.text:00405BFB                 dec     dl
.text:00405BFD                 jz      short loc_405C15
.text:00405BFF                 mov     ebp, [esp+0BCh+var_78]
.text:00405C03                 movzx   ebx, dl
.text:00405C06                 test    byte ptr [ebp+ebx*4+0], 4
.text:00405C0B                 jz      short loc_405BFB
.text:00405C0D
.text:00405C0D loc_405C0D:                             ; CODE XREF: sub_403FC0+1C39↑j
.text:00405C0D                 test    dl, dl
.text:00405C0F                 jnz     loc_405F4A
.text:00405C15
.text:00405C15 loc_405C15:                             ; CODE XREF: sub_403FC0+1C2C↑j
.text:00405C15                                         ; sub_403FC0+1C3D↑j
.text:00405C15                 mov     [esp+0BCh+var_60], 101h
.text:00405C1D                 mov     [esp+0BCh+var_64], 100h
.text:00405C25
.text:00405C25 loc_405C25:                             ; CODE XREF: sub_403FC0+1F91↓j
.text:00405C25                                         ; sub_403FC0+1FA9↓j
.text:00405C25                 movzx   edx, cl
.text:00405C28                 mov     ecx, [esp+0BCh+var_78]
.text:00405C2C                 test    byte ptr [ecx+edx*4], 8
.text:00405C30                 jz      short loc_405C65
.text:00405C32                 mov     esi, [esp+0BCh+var_4C]
.text:00405C36                 mov     edi, [esp+0BCh+var_4C]
.text:00405C3A                 dec     esi
.text:00405C3B                 cmp     [esp+0BCh+var_54], esi
.text:00405C3F                 lea     ecx, [edi+2]
.text:00405C42                 jz      short loc_405C65
.text:00405C44
.text:00405C44 loc_405C44:                             ; CODE XREF: sub_403FC0+1CB0↓j
.text:00405C44                                         ; sub_403FC0+1D01↓j ...
.text:00405C44                 mov     [esp+0BCh+var_4C], ecx
.text:00405C48                 mov     ebp, [esp+0BCh+var_50]
.text:00405C4C                 mov     eax, offset loc_404239
.text:00405C51                 cmp     ecx, ebp
.text:00405C53                 jz      loc_404237
.text:00405C59                 movzx   ebx, byte ptr [ecx]
.text:00405C5C                 inc     [esp+0BCh+var_4C]
.text:00405C60                 jmp     loc_404230
.text:00405C65 ; ---------------------------------------------------------------------------
.text:00405C65
.text:00405C65 loc_405C65:                             ; CODE XREF: sub_403FC0+1C70↑j
.text:00405C65                                         ; sub_403FC0+1C82↑j
.text:00405C65                 mov     ecx, [esp+0BCh+var_4C]
.text:00405C69                 add     ecx, 2
.text:00405C6C                 cmp     ecx, [esp+0BCh+var_50]
.text:00405C70                 jnb     short loc_405C44
.text:00405C72                 mov     [esp+0BCh+var_30], ecx
.text:00405C79                 mov     ebx, [esp+0BCh+var_4C]
.text:00405C7D                 xor     ebp, ebp
.text:00405C7F                 mov     [esp+0BCh+var_97], 0
.text:00405C84                 mov     edx, ebx
.text:00405C86                 add     edx, 3
.text:00405C89                 movzx   eax, byte ptr [ebx+2]
.text:00405C8D                 mov     [esp+0BCh+var_30], edx
.text:00405C94                 cmp     eax, 13h
.text:00405C97                 ja      loc_405F3A
.text:00405C9D                 cmp     eax, 11h
.text:00405CA0                 jnb     loc_405F03
.text:00405CA6                 cmp     eax, 0Dh
.text:00405CA9                 jz      loc_405F03
.text:00405CAF
.text:00405CAF loc_405CAF:                             ; CODE XREF: sub_403FC0+1F65↓j
.text:00405CAF                                         ; sub_403FC0+1F75↓j ...
.text:00405CAF                 mov     ebx, [esp+0BCh+var_30]
.text:00405CB6                 add     ebx, ebp
.text:00405CB8                 test    ebp, ebp
.text:00405CBA                 mov     [esp+0BCh+var_30], ebx
.text:00405CC1                 jns     short loc_405C44
.text:00405CC3                 cmp     byte ptr [ebx], 0Fh
.text:00405CC6                 jnz     loc_405C44
.text:00405CCC                 cmp     byte ptr [ebx+3], 6
.text:00405CD0                 jnz     loc_405C44
.text:00405CD6                 movzx   eax, byte ptr [ebx+4]
.text:00405CDA                 mov     ebp, [esp+0BCh+var_4C]
.text:00405CDE                 cmp     al, [ebp+0]
.text:00405CE1                 jnz     loc_405C44
.text:00405CE7                 mov     ecx, [esp+0BCh+var_78]
.text:00405CEB                 movzx   edx, al
.text:00405CEE                 movzx   eax, byte ptr [ecx+edx*4]
.text:00405CF2                 test    al, 10h
.text:00405CF4                 jz      short loc_405D48
.text:00405CF6                 and     al, 0EFh
.text:00405CF8                 mov     [ecx+edx*4], al
.text:00405CFB                 mov     eax, [esp+0BCh+var_4C]
.text:00405CFF                 movzx   ecx, byte ptr [eax]
.text:00405D02                 movzx   esi, byte ptr [eax+1]
.text:00405D06                 lea     edx, [esi+ecx]
.text:00405D09                 cmp     ecx, edx
.text:00405D0B                 jnb     short loc_405D41
.text:00405D0D
.text:00405D0D loc_405D0D:                             ; CODE XREF: sub_403FC0+1D7F↓j
.text:00405D0D                 mov     edx, [esp+0BCh+var_70]
.text:00405D11                 mov     ebx, [esp+0BCh+var_68]
.text:00405D15                 mov     ebp, [esp+0BCh+var_74]
.text:00405D19                 mov     edi, [edx+ecx*4]
.text:00405D1C                 mov     [ebx+ecx*4], edi
.text:00405D1F                 mov     edx, [ebp+ecx*4+0]
.text:00405D23                 cmp     edx, edi
.text:00405D25                 jb      short loc_405D2E
.text:00405D27                 mov     eax, [esp+0BCh+var_6C]
.text:00405D2B                 mov     [eax+ecx*4], edx
.text:00405D2E
.text:00405D2E loc_405D2E:                             ; CODE XREF: sub_403FC0+1D65↑j
.text:00405D2E                 mov     ebp, [esp+0BCh+var_4C]
.text:00405D32                 inc     ecx
.text:00405D33                 movzx   esi, byte ptr [ebp+0]
.text:00405D37                 movzx   edi, byte ptr [ebp+1]
.text:00405D3B                 add     esi, edi
.text:00405D3D                 cmp     ecx, esi
.text:00405D3F                 jb      short loc_405D0D
.text:00405D41
.text:00405D41 loc_405D41:                             ; CODE XREF: sub_403FC0+1D4B↑j
.text:00405D41                 mov     ebx, [esp+0BCh+var_30]
.text:00405D48
.text:00405D48 loc_405D48:                             ; CODE XREF: sub_403FC0+1D34↑j
.text:00405D48                 mov     esi, ebx
.text:00405D4A                 mov     eax, [esp+0BCh+var_60]
.text:00405D4E                 inc     ebx
.text:00405D4F                 mov     [esp+0BCh+var_30], ebx
.text:00405D56                 lea     ecx, [esi+3]
.text:00405D59                 mov     edi, [esp+0BCh+var_28]
.text:00405D60                 movsx   edx, byte ptr [ebx+1]
.text:00405D64                 movzx   ebp, byte ptr [esi+1]
.text:00405D68                 mov     esi, [esp+0BCh+var_24]
.text:00405D6F                 mov     [esp+0BCh+var_30], ecx
.text:00405D76                 mov     ecx, [esp+0BCh+var_64]
.text:00405D7A                 shl     edx, 8
.text:00405D7D                 add     ebp, edx
.text:00405D7F                 mov     edx, edi
.text:00405D81                 sub     ecx, eax
.text:00405D83                 lea     ebx, [ecx+ecx]
.text:00405D86                 sub     edx, esi
.text:00405D88                 lea     eax, [ecx+ebx+7]
.text:00405D8C                 cmp     edx, eax
.text:00405D8E                 jnb     short loc_405E08
.text:00405D90                 mov     [esp+0BCh+var_9C], eax
.text:00405D94
.text:00405D94 loc_405D94:                             ; CODE XREF: sub_403FC0+1E46↓j
.text:00405D94                 mov     edx, dword_416020
.text:00405D9A                 lea     esi, [edx+edx*8]
.text:00405D9D                 lea     ebx, [edx+esi*2]
.text:00405DA0                 cmp     edi, ebx
.text:00405DA2                 ja      loc_404741
.text:00405DA8                 lea     esi, ds:0[edi*8]
.text:00405DAF                 mov     [esp+0BCh+Size], esi ; Size
.text:00405DB2                 call    malloc
.text:00405DB7                 mov     [esp+0BCh+Size], eax ; void *
.text:00405DBA                 mov     ebx, [esp+0BCh+var_28]
.text:00405DC1                 mov     ecx, [esp+0BCh+Src]
.text:00405DC8                 shl     ebx, 2
.text:00405DCB                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:00405DCF                 mov     [esp+0BCh+var_B8], ecx ; Src
.text:00405DD3                 call    memcpy
.text:00405DD8                 mov     [esp+0BCh+Src], eax
.text:00405DDF                 test    eax, eax
.text:00405DE1                 jz      loc_404741
.text:00405DE7                 mov     edx, [esp+0BCh+var_28]
.text:00405DEE                 mov     esi, [esp+0BCh+var_24]
.text:00405DF5                 add     edx, edx
.text:00405DF7                 mov     [esp+0BCh+var_28], edx
.text:00405DFE                 mov     edi, edx
.text:00405E00                 sub     edx, esi
.text:00405E02                 cmp     edx, [esp+0BCh+var_9C]
.text:00405E06                 jb      short loc_405D94
.text:00405E08
.text:00405E08 loc_405E08:                             ; CODE XREF: sub_403FC0+1DCE↑j
.text:00405E08                 mov     ecx, [esp+0BCh+var_60]
.text:00405E0C                 mov     eax, [esp+0BCh+var_64]
.text:00405E10                 cmp     ecx, eax
.text:00405E12                 ja      loc_405EF7
.text:00405E18                 mov     ebx, [esp+0BCh+Src]
.text:00405E1F
.text:00405E1F loc_405E1F:                             ; CODE XREF: sub_403FC0+1EBD↓j
.text:00405E1F                 mov     eax, [esp+0BCh+var_68]
.text:00405E23                 mov     edi, [eax+ecx*4]
.text:00405E26                 mov     [ebx+esi*4], edi
.text:00405E29                 mov     edx, [esp+0BCh+var_6C]
.text:00405E2D                 mov     edi, [esp+0BCh+var_24]
.text:00405E34                 mov     ebx, [esp+0BCh+Src]
.text:00405E3B                 mov     esi, [edx+ecx*4]
.text:00405E3E                 inc     edi
.text:00405E3F                 mov     [esp+0BCh+var_24], edi
.text:00405E46                 mov     [ebx+edi*4], esi
.text:00405E49                 mov     edi, [esp+0BCh+var_24]
.text:00405E50                 mov     eax, [esp+0BCh+var_78]
.text:00405E54                 mov     ebx, [esp+0BCh+Src]
.text:00405E5B                 inc     edi
.text:00405E5C                 mov     [esp+0BCh+var_24], edi
.text:00405E63                 mov     esi, [eax+ecx*4]
.text:00405E66                 inc     ecx
.text:00405E67                 mov     [ebx+edi*4], esi
.text:00405E6A                 mov     esi, [esp+0BCh+var_24]
.text:00405E71                 inc     esi
.text:00405E72                 cmp     ecx, [esp+0BCh+var_64]
.text:00405E76                 mov     [esp+0BCh+var_24], esi
.text:00405E7D                 jbe     short loc_405E1F
.text:00405E7F
.text:00405E7F loc_405E7F:                             ; CODE XREF: sub_403FC0+1F3E↓j
.text:00405E7F                 mov     edi, [esp+0BCh+var_60]
.text:00405E83                 mov     [ebx+esi*4], edi
.text:00405E86                 mov     eax, [esp+0BCh+var_24]
.text:00405E8D                 mov     ecx, [esp+0BCh+Src]
.text:00405E94                 mov     edx, [esp+0BCh+var_64]
.text:00405E98                 inc     eax
.text:00405E99                 mov     [esp+0BCh+var_24], eax
.text:00405EA0                 mov     [ecx+eax*4], edx
.text:00405EA3                 mov     edi, [esp+0BCh+var_24]
.text:00405EAA                 mov     esi, [esp+0BCh+var_30]
.text:00405EB1                 mov     edx, [esp+0BCh+Src]
.text:00405EB8                 inc     edi
.text:00405EB9                 add     ebp, esi
.text:00405EBB                 mov     [esp+0BCh+var_24], edi
.text:00405EC2                 mov     [edx+edi*4], ebp
.text:00405EC5                 mov     ecx, [esp+0BCh+var_24]
.text:00405ECC                 mov     ebp, [esp+0BCh+Src]
.text:00405ED3                 mov     ebx, [esp+0BCh+var_44]
.text:00405ED7                 inc     ecx
.text:00405ED8                 mov     [esp+0BCh+var_24], ecx
.text:00405EDF                 mov     [ebp+ecx*4+0], ebx
.text:00405EE3                 mov     esi, [esp+0BCh+var_24]
.text:00405EEA                 inc     esi
.text:00405EEB                 mov     [esp+0BCh+var_24], esi
.text:00405EF2                 jmp     loc_4042F0
.text:00405EF7 ; ---------------------------------------------------------------------------
.text:00405EF7
.text:00405EF7 loc_405EF7:                             ; CODE XREF: sub_403FC0+1E52↑j
.text:00405EF7                 mov     ebx, [esp+0BCh+Src]
.text:00405EFE                 jmp     loc_405E7F
.text:00405F03 ; ---------------------------------------------------------------------------
.text:00405F03
.text:00405F03 loc_405F03:                             ; CODE XREF: sub_403FC0+1CE0↑j
.text:00405F03                                         ; sub_403FC0+1CE9↑j ...
.text:00405F03                 mov     edx, [esp+0BCh+var_30]
.text:00405F0A                 lea     eax, [edx+2]
.text:00405F0D                 movsx   esi, byte ptr [edx+1]
.text:00405F11                 movzx   ebp, byte ptr [edx]
.text:00405F14                 mov     [esp+0BCh+var_30], eax
.text:00405F1B                 shl     esi, 8
.text:00405F1E                 add     ebp, esi
.text:00405F20                 cmp     [esp+0BCh+var_97], 0
.text:00405F25                 jz      loc_405CAF
.text:00405F2B                 lea     edi, [edx+4]
.text:00405F2E                 mov     [esp+0BCh+var_30], edi
.text:00405F35                 jmp     loc_405CAF
.text:00405F3A ; ---------------------------------------------------------------------------
.text:00405F3A
.text:00405F3A loc_405F3A:                             ; CODE XREF: sub_403FC0+1CD7↑j
.text:00405F3A                 cmp     eax, 16h
.text:00405F3D                 jnz     loc_405CAF
.text:00405F43                 mov     [esp+0BCh+var_97], 1
.text:00405F48                 jmp     short loc_405F03
.text:00405F4A ; ---------------------------------------------------------------------------
.text:00405F4A
.text:00405F4A loc_405F4A:                             ; CODE XREF: sub_403FC0+1C4F↑j
.text:00405F4A                 movzx   eax, dl
.text:00405F4D                 mov     [esp+0BCh+var_64], eax
.text:00405F51                 jmp     loc_405C25
.text:00405F56 ; ---------------------------------------------------------------------------
.text:00405F56
.text:00405F56 loc_405F56:                             ; CODE XREF: sub_403FC0+1C1B↑j
.text:00405F56                 mov     [esp+0BCh+var_60], 101h
.text:00405F5E                 mov     [esp+0BCh+var_64], 100h
.text:00405F66                 movzx   ecx, byte ptr [edx]
.text:00405F69                 jmp     loc_405C25
.text:00405F6E ; ---------------------------------------------------------------------------
.text:00405F6E
.text:00405F6E loc_405F6E:                             ; CODE XREF: sub_403FC0+1BE1↑j
.text:00405F6E                 mov     eax, [esp+0BCh+var_44]
.text:00405F72                 jmp     loc_405BA7
.text:00405F77 ; ---------------------------------------------------------------------------
.text:00405F77
.text:00405F77 loc_405F77:                             ; CODE XREF: sub_403FC0+1BCF↑j
.text:00405F77                 mov     ebp, [esp+0BCh+var_6C]
.text:00405F7B                 mov     eax, [ebp+edx*4+0]
.text:00405F7F                 jmp     loc_405BA7
.text:00405F84 ; ---------------------------------------------------------------------------
.text:00405F84
.text:00405F84 loc_405F84:                             ; CODE XREF: sub_403FC0+A04↑j
.text:00405F84                                         ; DATA XREF: .text:jpt_4049C4↑o
.text:00405F84                 mov     ebx, [esp+0BCh+var_4C] ; jumptable 004049C4 case 6
.text:00405F88                 mov     edx, [esp+0BCh+var_78]
.text:00405F8C                 mov     [esp+0BCh+var_30], ebx
.text:00405F93                 movzx   ecx, byte ptr [ebx]
.text:00405F96                 movzx   esi, cl
.text:00405F99                 movzx   ebp, byte ptr [edx+esi*4]
.text:00405F9D                 and     ebp, 3
.text:00405FA0                 cmp     ebp, 3
.text:00405FA3                 jz      loc_406034
.text:00405FA9
.text:00405FA9 loc_405FA9:                             ; CODE XREF: sub_403FC0+20A6↓j
.text:00405FA9                 mov     esi, [esp+0BCh+var_78]
.text:00405FAD                 movzx   edx, cl
.text:00405FB0                 test    byte ptr [esi+edx*4], 3
.text:00405FB4                 jz      short loc_40602B
.text:00405FB6                 mov     ebx, [esp+0BCh+var_68]
.text:00405FBA                 mov     eax, [ebx+edx*4]
.text:00405FBD                 cmp     eax, offset unk_419330
.text:00405FC2                 jz      short loc_406025
.text:00405FC4
.text:00405FC4 loc_405FC4:                             ; CODE XREF: sub_403FC0+2069↓j
.text:00405FC4                                         ; sub_403FC0+2072↓j
.text:00405FC4                 mov     ebp, [esp+0BCh+var_70]
.text:00405FC8                 mov     ebx, [esp+0BCh+var_68]
.text:00405FCC                 mov     ecx, [esp+0BCh+var_78]
.text:00405FD0                 mov     [ebp+edx*4+0], eax
.text:00405FD4                 mov     ebp, [esp+0BCh+var_4C]
.text:00405FD8                 mov     eax, [esp+0BCh+var_44]
.text:00405FDC                 movzx   edi, byte ptr [ebp+0]
.text:00405FE0                 mov     [ebx+edi*4], eax
.text:00405FE3                 movzx   esi, byte ptr [ebp+0]
.text:00405FE7                 or      byte ptr [ecx+esi*4], 4
.text:00405FEB                 movzx   edx, byte ptr [ebp+0]
.text:00405FEF                 and     byte ptr [ecx+edx*4], 0F7h
.text:00405FF3                 mov     [esp+0BCh+var_8C], 0
.text:00405FFB                 movzx   esi, byte ptr [ebp+0]
.text:00405FFF                 cmp     [esp+0BCh+var_60], 101h
.text:00406007                 mov     [esp+0BCh+var_64], esi
.text:0040600B                 jz      short loc_40601F
.text:0040600D
.text:0040600D loc_40600D:                             ; CODE XREF: sub_403FC0+2063↓j
.text:0040600D                 add     [esp+0BCh+var_4C], 2
.text:00406012                 mov     ecx, [esp+0BCh+var_4C]
.text:00406016                 mov     [esp+0BCh+var_54], ecx
.text:0040601A                 jmp     loc_404B90
.text:0040601F ; ---------------------------------------------------------------------------
.text:0040601F
.text:0040601F loc_40601F:                             ; CODE XREF: sub_403FC0+204B↑j
.text:0040601F                 mov     [esp+0BCh+var_60], esi
.text:00406023                 jmp     short loc_40600D
.text:00406025 ; ---------------------------------------------------------------------------
.text:00406025
.text:00406025 loc_406025:                             ; CODE XREF: sub_403FC0+2002↑j
.text:00406025                 mov     eax, [esp+0BCh+var_44]
.text:00406029                 jmp     short loc_405FC4
.text:0040602B ; ---------------------------------------------------------------------------
.text:0040602B
.text:0040602B loc_40602B:                             ; CODE XREF: sub_403FC0+1FF4↑j
.text:0040602B                 mov     edi, [esp+0BCh+var_68]
.text:0040602F                 mov     eax, [edi+edx*4]
.text:00406032                 jmp     short loc_405FC4
.text:00406034 ; ---------------------------------------------------------------------------
.text:00406034
.text:00406034 loc_406034:                             ; CODE XREF: sub_403FC0+1FE3↑j
.text:00406034                 mov     [esp+0BCh+var_B4], edx
.text:00406038                 mov     eax, [esp+0BCh+var_50]
.text:0040603C                 lea     edx, [esp+0BCh+var_30]
.text:00406043                 mov     [esp+0BCh+Size], edx
.text:00406046                 mov     [esp+0BCh+var_B8], eax
.text:0040604A                 call    sub_406340
.text:0040604F                 mov     edi, [esp+0BCh+var_78]
.text:00406053                 mov     ebp, eax
.text:00406055                 and     ebp, 3
.text:00406058                 mov     ecx, [edi+esi*4]
.text:0040605B                 and     ecx, 0FFFFFFFCh
.text:0040605E                 or      ecx, ebp
.text:00406060                 mov     [edi+esi*4], ecx
.text:00406063                 movzx   ecx, byte ptr [ebx]
.text:00406066                 jmp     loc_405FA9
.text:00406066 ; ---------------------------------------------------------------------------
.text:0040606B                 align 10h
.text:00406070
.text:00406070 loc_406070:                             ; CODE XREF: sub_403FC0:loc_404237↑j
.text:00406070                                         ; sub_403FC0+BF6↑j ...
.text:00406070                 mov     edx, [esp+0BCh+var_4C] ; jumptable 00404237 case 5
.text:00406070                                         ; jumptable 00404BB6 case 5
.text:00406070                                         ; jumptable 00404C88 case 5
.text:00406074                 mov     ebp, [esp+0BCh+var_48]
.text:00406078                 cmp     byte ptr [edx-1], 5
.text:0040607C                 setz    [esp+0BCh+var_95]
.text:00406081                 cmp     [esp+0BCh+var_44], ebp
.text:00406085                 jz      loc_406140
.text:0040608B
.text:0040608B loc_40608B:                             ; CODE XREF: sub_403FC0+21A1↓j
.text:0040608B                 mov     esi, [esp+0BCh+var_58]
.text:0040608F                 test    esi, esi
.text:00406091                 jz      loc_40612F
.text:00406097                 mov     ebx, [esp+0BCh+var_44]
.text:0040609B                 mov     ecx, [esp+0BCh+var_58]
.text:0040609F                 movzx   edi, byte ptr [ebx]
.text:004060A2                 movzx   ebx, byte ptr [edi+ecx]
.text:004060A6
.text:004060A6 loc_4060A6:                             ; CODE XREF: sub_403FC0+2177↓j
.text:004060A6                 mov     esi, [esp+0BCh+var_4C]
.text:004060AA                 movzx   eax, bl
.text:004060AD                 movzx   edx, byte ptr [esi]
.text:004060B0                 movzx   edi, dl
.text:004060B3                 shl     edi, 3
.text:004060B6                 mov     [esp+0BCh+var_96], dl
.text:004060BA                 cmp     eax, edi
.text:004060BC                 jnb     short loc_4060DB
.text:004060BE                 mov     dl, bl
.text:004060C0                 shr     dl, 3
.text:004060C3                 movzx   ecx, dl
.text:004060C6                 movzx   eax, byte ptr [ecx+esi+1]
.text:004060CB                 mov     ecx, ebx
.text:004060CD                 and     ecx, 7
.text:004060D0                 sar     eax, cl
.text:004060D2                 test    al, 1
.text:004060D4                 jz      short loc_4060DB
.text:004060D6                 xor     [esp+0BCh+var_95], 1
.text:004060DB
.text:004060DB loc_4060DB:                             ; CODE XREF: sub_403FC0+20FC↑j
.text:004060DB                                         ; sub_403FC0+2114↑j
.text:004060DB                 movzx   ebx, [esp+0BCh+var_96]
.text:004060E0                 mov     ebp, [esp+0BCh+var_4C]
.text:004060E4                 cmp     [esp+0BCh+var_95], 0
.text:004060E9                 lea     esi, [ebx+ebp+1]
.text:004060ED                 mov     [esp+0BCh+var_4C], esi
.text:004060F1                 jz      loc_404412
.text:004060F7                 mov     edi, [esp+0BCh+var_8C]
.text:004060FB                 test    edi, edi
.text:004060FD                 jnz     loc_404DDF
.text:00406103                 mov     [esp+0BCh+var_8C], 1
.text:0040610B                 mov     eax, [esp+0BCh+var_60]
.text:0040610F                 mov     edx, [esp+0BCh+var_64]
.text:00406113                 cmp     eax, edx
.text:00406115                 ja      loc_404DDF
.text:0040611B
.text:0040611B loc_40611B:                             ; CODE XREF: sub_403FC0+2168↓j
.text:0040611B                 mov     ecx, [esp+0BCh+var_78]
.text:0040611F                 or      byte ptr [ecx+eax*4], 18h
.text:00406123                 inc     eax
.text:00406124                 cmp     eax, [esp+0BCh+var_64]
.text:00406128                 jbe     short loc_40611B
.text:0040612A                 jmp     loc_404DDF
.text:0040612F ; ---------------------------------------------------------------------------
.text:0040612F
.text:0040612F loc_40612F:                             ; CODE XREF: sub_403FC0+20D1↑j
.text:0040612F                 mov     ebp, [esp+0BCh+var_44]
.text:00406133                 movzx   ebx, byte ptr [ebp+0]
.text:00406137                 jmp     loc_4060A6
.text:00406137 ; ---------------------------------------------------------------------------
.text:0040613C                 align 10h
.text:00406140
.text:00406140 loc_406140:                             ; CODE XREF: sub_403FC0+20C5↑j
.text:00406140                                         ; sub_403FC0+219F↓j
.text:00406140                 mov     ecx, [esp+0BCh+var_40]
.text:00406144                 cmp     [esp+0BCh+var_48], ecx
.text:00406148                 jz      loc_404412
.text:0040614E                 mov     [esp+0BCh+var_48], ecx
.text:00406152                 mov     eax, [esp+0BCh+arg_C]
.text:00406159                 cmp     eax, ecx
.text:0040615B                 mov     [esp+0BCh+var_44], eax
.text:0040615F                 jz      short loc_406140
.text:00406161                 jmp     loc_40608B
.text:00406166 ; ---------------------------------------------------------------------------
.text:00406166
.text:00406166 loc_406166:                             ; CODE XREF: sub_403FC0:loc_404237↑j
.text:00406166                                         ; sub_403FC0+BF6↑j ...
.text:00406166                 jmp     loc_406070      ; jumptable 00404237 case 4
.text:00406166                                         ; jumptable 00404BB6 case 4
.text:00406166                                         ; jumptable 00404C88 case 4
.text:0040616B ; ---------------------------------------------------------------------------
.text:0040616B
.text:0040616B loc_40616B:                             ; CODE XREF: sub_403FC0+C88↑j
.text:0040616B                 mov     ebx, [esp+0BCh+var_34]
.text:00406172                 movzx   eax, byte ptr [ebx-1]
.text:00406176                 jmp     loc_404C55
.text:0040617B ; ---------------------------------------------------------------------------
.text:0040617B
.text:0040617B loc_40617B:                             ; CODE XREF: sub_403FC0+C76↑j
.text:0040617B                 mov     edi, [esp+0BCh+arg_C]
.text:00406182                 movzx   eax, byte ptr [edi]
.text:00406185                 jmp     loc_404C55
.text:0040618A ; ---------------------------------------------------------------------------
.text:0040618A
.text:0040618A loc_40618A:                             ; CODE XREF: sub_403FC0+C43↑j
.text:0040618A                 mov     esi, [esp+0BCh+var_34]
.text:00406191                 movzx   eax, byte ptr [esi-1]
.text:00406195                 jmp     loc_404C11
.text:0040619A ; ---------------------------------------------------------------------------
.text:0040619A
.text:0040619A loc_40619A:                             ; CODE XREF: sub_403FC0+C33↑j
.text:0040619A                 mov     ebp, [esp+0BCh+arg_C]
.text:004061A1                 movzx   eax, byte ptr [ebp+0]
.text:004061A5                 jmp     loc_404C11
.text:004061AA ; ---------------------------------------------------------------------------
.text:004061AA
.text:004061AA loc_4061AA:                             ; CODE XREF: sub_403FC0+C01↑j
.text:004061AA                 mov     edx, [esp+0BCh+arg_C]
.text:004061B1                 cmp     [esp+0BCh+var_44], edx
.text:004061B5                 jmp     loc_404BD2
.text:004061BA ; ---------------------------------------------------------------------------
.text:004061BA
.text:004061BA loc_4061BA:                             ; CODE XREF: sub_403FC0+AFB↑j
.text:004061BA                 mov     ebx, [esp+0BCh+arg_C]
.text:004061C1                 cmp     [esp+0BCh+var_44], ebx
.text:004061C5                 jmp     loc_404ACC
.text:004061CA ; ---------------------------------------------------------------------------
.text:004061CA
.text:004061CA loc_4061CA:                             ; CODE XREF: sub_403FC0+993↑j
.text:004061CA                 mov     edi, [esp+0BCh+var_44]
.text:004061CE                 cmp     byte ptr [edi], 0
.text:004061D1                 jmp     loc_404969
.text:004061D6 ; ---------------------------------------------------------------------------
.text:004061D6
.text:004061D6 loc_4061D6:                             ; CODE XREF: sub_403FC0+964↑j
.text:004061D6                 mov     edi, [esp+0BCh+var_44]
.text:004061DA                 cmp     byte ptr [edi], 0Ah
.text:004061DD                 jmp     loc_40493A
.text:004061E2 ; ---------------------------------------------------------------------------
.text:004061E2
.text:004061E2 loc_4061E2:                             ; CODE XREF: sub_403FC0+94B↑j
.text:004061E2                                         ; sub_403FC0+2241↓j
.text:004061E2                 mov     eax, [esp+0BCh+var_40]
.text:004061E6                 cmp     [esp+0BCh+var_48], eax
.text:004061EA                 jz      loc_404412
.text:004061F0                 mov     [esp+0BCh+var_48], eax
.text:004061F4                 mov     ecx, [esp+0BCh+arg_C]
.text:004061FB                 cmp     ecx, eax
.text:004061FD                 mov     [esp+0BCh+var_44], ecx
.text:00406201                 jz      short loc_4061E2
.text:00406203                 jmp     loc_404911
.text:00406208 ; ---------------------------------------------------------------------------
.text:00406208
.text:00406208 loc_406208:                             ; CODE XREF: sub_403FC0+21B↑j
.text:00406208                                         ; sub_403FC0+22F↑j
.text:00406208                 mov     edi, [esp+0BCh+arg_C]
.text:0040620F                 mov     esi, [esp+0BCh+arg_14]
.text:00406216                 mov     ecx, [esp+0BCh+arg_8]
.text:0040621D                 mov     ebp, [esp+0BCh+var_40]
.text:00406221                 add     edi, esi
.text:00406223                 sub     edi, ecx
.text:00406225                 mov     [esp+0BCh+var_44], edi
.text:00406229                 mov     [esp+0BCh+var_48], ebp
.text:0040622D                 jmp     loc_404214
.text:00406232 ; ---------------------------------------------------------------------------
.text:00406232
.text:00406232 loc_406232:                             ; CODE XREF: sub_403FC0+1F1↑j
.text:00406232                 mov     ebp, [esp+0BCh+arg_C]
.text:00406239                 mov     ebx, [esp+0BCh+arg_8]
.text:00406240                 mov     edi, [esp+0BCh+var_34]
.text:00406247                 add     esi, ebp
.text:00406249                 sub     esi, ebx
.text:0040624B                 mov     [esp+0BCh+var_3C], edi
.text:00406252                 jmp     loc_4041CE
.text:00406257 ; ---------------------------------------------------------------------------
.text:00406257
.text:00406257 loc_406257:                             ; CODE XREF: sub_403FC0+B0↑j
.text:00406257                 mov     edi, [esp+0BCh+var_5C]
.text:0040625B                 shl     edi, 2
.text:0040625E                 mov     [esp+0BCh+Size], edi ; Size
.text:00406261                 call    malloc
.text:00406266                 mov     [esp+0BCh+var_68], eax
.text:0040626A                 mov     [esp+0BCh+Size], edi ; Size
.text:0040626D                 call    malloc
.text:00406272                 mov     [esp+0BCh+var_6C], eax
.text:00406276                 mov     [esp+0BCh+Size], edi ; Size
.text:00406279                 call    malloc
.text:0040627E                 mov     [esp+0BCh+var_70], eax
.text:00406282                 mov     [esp+0BCh+Size], edi ; Size
.text:00406285                 call    malloc
.text:0040628A                 mov     [esp+0BCh+var_74], eax
.text:0040628E                 mov     [esp+0BCh+Size], edi ; Size
.text:00406291                 call    malloc
.text:00406296                 mov     [esp+0BCh+var_80], eax
.text:0040629A                 mov     [esp+0BCh+Size], edi ; Size
.text:0040629D                 call    malloc
.text:004062A2                 mov     [esp+0BCh+var_84], eax
.text:004062A6                 mov     [esp+0BCh+Size], edi ; Size
.text:004062A9                 call    malloc
.text:004062AE                 mov     [esp+0BCh+var_78], eax
.text:004062B2                 mov     [esp+0BCh+Size], edi ; Size
.text:004062B5                 call    malloc
.text:004062BA                 mov     [esp+0BCh+var_90], eax
.text:004062BE                 mov     [esp+0BCh+Size], edi ; Size
.text:004062C1                 call    malloc
.text:004062C6                 mov     [esp+0BCh+var_94], eax
.text:004062CA                 mov     ecx, [esp+0BCh+var_68]
.text:004062CE                 test    ecx, ecx
.text:004062D0                 jz      loc_404741
.text:004062D6                 mov     ebx, [esp+0BCh+var_6C]
.text:004062DA                 test    ebx, ebx
.text:004062DC                 jz      loc_404741
.text:004062E2                 mov     edx, [esp+0BCh+var_70]
.text:004062E6                 test    edx, edx
.text:004062E8                 jz      loc_404741
.text:004062EE                 mov     ebp, [esp+0BCh+var_74]
.text:004062F2                 test    ebp, ebp
.text:004062F4                 jz      loc_404741
.text:004062FA                 mov     ecx, [esp+0BCh+var_78]
.text:004062FE                 test    ecx, ecx
.text:00406300                 jz      loc_404741
.text:00406306                 mov     edi, [esp+0BCh+var_80]
.text:0040630A                 test    edi, edi
.text:0040630C                 jz      loc_404741
.text:00406312                 mov     ebx, [esp+0BCh+var_84]
.text:00406316                 test    ebx, ebx
.text:00406318                 jz      loc_404741
.text:0040631E                 mov     edx, [esp+0BCh+var_90]
.text:00406322                 test    edx, edx
.text:00406324                 jz      loc_404741
.text:0040632A                 test    eax, eax
.text:0040632C                 jnz     loc_4040BE
.text:00406332                 jmp     loc_404741
.text:00406332 sub_403FC0      endp
.text:00406332
.text:00406332 ; ---------------------------------------------------------------------------
.text:00406337                 align 10h
.text:00406340
.text:00406340 ; =============== S U B R O U T I N E =======================================
.text:00406340
.text:00406340
.text:00406340 sub_406340      proc near               ; CODE XREF: sub_403FC0+208A↑p
.text:00406340                                         ; sub_4064F0+CA↓p
.text:00406340
.text:00406340 var_2C          = dword ptr -2Ch
.text:00406340 var_28          = dword ptr -28h
.text:00406340 var_24          = dword ptr -24h
.text:00406340 var_14          = dword ptr -14h
.text:00406340 arg_0           = dword ptr  4
.text:00406340 arg_4           = dword ptr  8
.text:00406340 arg_8           = dword ptr  0Ch
.text:00406340
.text:00406340                 push    ebp
.text:00406341                 push    edi
.text:00406342                 push    esi
.text:00406343                 push    ebx
.text:00406344                 sub     esp, 1Ch
.text:00406347                 mov     ebp, [esp+2Ch+arg_0]
.text:0040634B                 mov     edi, [esp+2Ch+arg_4]
.text:0040634F                 mov     esi, [esp+2Ch+arg_8]
.text:00406353                 mov     eax, [ebp+0]
.text:00406356                 add     eax, 2
.text:00406359                 cmp     eax, edi
.text:0040635B                 mov     ecx, eax
.text:0040635D                 mov     [esp+2Ch+var_14], eax
.text:00406361                 jnb     short loc_4063A3
.text:00406363                 lea     esi, [esi+0]
.text:00406369                 lea     edi, [edi+0]
.text:00406370
.text:00406370 loc_406370:                             ; CODE XREF: sub_406340+61↓j
.text:00406370                 movzx   eax, byte ptr [ecx]
.text:00406373                 cmp     eax, 7
.text:00406376                 jz      loc_406453
.text:0040637C                 cmp     eax, 0Fh
.text:0040637F                 jz      short loc_4063B0
.text:00406381                 mov     [esp+2Ch+var_24], esi
.text:00406385                 lea     ebx, [esp+2Ch+var_14]
.text:00406389                 mov     [esp+2Ch+var_28], edi
.text:0040638D                 mov     [esp+2Ch+var_2C], ebx
.text:00406390                 call    sub_4064F0
.text:00406395                 xor     edx, edx
.text:00406397                 test    al, al
.text:00406399                 jz      short loc_4063A5
.text:0040639B
.text:0040639B loc_40639B:                             ; CODE XREF: sub_406340+8B↓j
.text:0040639B                                         ; sub_406340+BE↓j
.text:0040639B                 mov     ecx, [esp+2Ch+var_14]
.text:0040639F                 cmp     ecx, edi
.text:004063A1                 jb      short loc_406370
.text:004063A3
.text:004063A3 loc_4063A3:                             ; CODE XREF: sub_406340+21↑j
.text:004063A3                 xor     edx, edx
.text:004063A5
.text:004063A5 loc_4063A5:                             ; CODE XREF: sub_406340+59↑j
.text:004063A5                                         ; sub_406340+B8↓j ...
.text:004063A5                 add     esp, 1Ch
.text:004063A8                 mov     eax, edx
.text:004063AA                 pop     ebx
.text:004063AB                 pop     esi
.text:004063AC                 pop     edi
.text:004063AD                 pop     ebp
.text:004063AE                 retn
.text:004063AE ; ---------------------------------------------------------------------------
.text:004063AF                 align 10h
.text:004063B0
.text:004063B0 loc_4063B0:                             ; CODE XREF: sub_406340+3F↑j
.text:004063B0                 lea     edx, [ecx+1]
.text:004063B3                 mov     [esp+2Ch+var_14], edx
.text:004063B7                 movsx   eax, byte ptr [edx+1]
.text:004063BB                 lea     edx, [ecx+3]
.text:004063BE                 movzx   ebx, byte ptr [ecx+1]
.text:004063C2                 mov     [esp+2Ch+var_14], edx
.text:004063C6                 shl     eax, 8
.text:004063C9                 add     ebx, eax
.text:004063CB                 js      short loc_40639B
.text:004063CD                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:004063D2                 jz      short loc_406400
.text:004063D4
.text:004063D4 loc_4063D4:                             ; CODE XREF: sub_406340+E9↓j
.text:004063D4                                         ; sub_406340+111↓j
.text:004063D4                 movsx   ecx, byte ptr [edx-1]
.text:004063D8                 movzx   ebx, byte ptr [edx-2]
.text:004063DC                 mov     [esp+2Ch+var_2C], edx
.text:004063DF                 mov     [esp+2Ch+var_24], esi
.text:004063E3                 shl     ecx, 8
.text:004063E6                 add     ebx, ecx
.text:004063E8                 lea     ecx, [ebx+edx]
.text:004063EB                 mov     [esp+2Ch+var_28], ecx
.text:004063EF                 call    sub_406470
.text:004063F4                 xor     edx, edx
.text:004063F6                 test    al, al
.text:004063F8                 jz      short loc_4063A5
.text:004063FA                 add     [esp+2Ch+var_14], ebx
.text:004063FE                 jmp     short loc_40639B
.text:00406400 ; ---------------------------------------------------------------------------
.text:00406400
.text:00406400 loc_406400:                             ; CODE XREF: sub_406340+92↑j
.text:00406400                                         ; sub_406340+109↓j
.text:00406400                 mov     [esp+2Ch+var_2C], edx
.text:00406403                 lea     ecx, [ebx+edx-3]
.text:00406407                 mov     [esp+2Ch+var_24], esi
.text:0040640B                 mov     [esp+2Ch+var_28], ecx
.text:0040640F                 call    sub_406470
.text:00406414                 xor     edx, edx
.text:00406416                 test    al, al
.text:00406418                 jz      short loc_4063A5
.text:0040641A                 mov     ecx, [esp+2Ch+var_14]
.text:0040641E                 add     ecx, ebx
.text:00406420                 mov     edx, ecx
.text:00406422                 mov     [esp+2Ch+var_14], ecx
.text:00406426                 cmp     byte ptr [ecx], 0Fh
.text:00406429                 jnz     short loc_4063D4
.text:0040642B                 inc     edx
.text:0040642C                 mov     [esp+2Ch+var_14], edx
.text:00406430                 movsx   eax, byte ptr [edx+1]
.text:00406434                 lea     edx, [ecx+3]
.text:00406437                 movzx   ebx, byte ptr [ecx+1]
.text:0040643B                 mov     [esp+2Ch+var_14], edx
.text:0040643F                 shl     eax, 8
.text:00406442                 add     ebx, eax
.text:00406444                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:00406449                 jz      short loc_406400
.text:0040644B                 mov     [esp+2Ch+var_14], ecx
.text:0040644F                 mov     edx, ecx
.text:00406451                 jmp     short loc_4063D4
.text:00406453 ; ---------------------------------------------------------------------------
.text:00406453
.text:00406453 loc_406453:                             ; CODE XREF: sub_406340+36↑j
.text:00406453                 lea     edx, [ecx+2]
.text:00406456                 mov     [ebp+0], edx
.text:00406459                 mov     edx, 1
.text:0040645E                 jmp     loc_4063A5
.text:0040645E sub_406340      endp
.text:0040645E
.text:0040645E ; ---------------------------------------------------------------------------
.text:00406463                 align 10h
.text:00406470
.text:00406470 ; =============== S U B R O U T I N E =======================================
.text:00406470
.text:00406470
.text:00406470 sub_406470      proc near               ; CODE XREF: sub_406340+AF↑p
.text:00406470                                         ; sub_406340+CF↑p
.text:00406470
.text:00406470 var_1C          = dword ptr -1Ch
.text:00406470 var_18          = dword ptr -18h
.text:00406470 var_14          = dword ptr -14h
.text:00406470 var_C           = dword ptr -0Ch
.text:00406470 arg_0           = dword ptr  4
.text:00406470 arg_4           = dword ptr  8
.text:00406470 arg_8           = dword ptr  0Ch
.text:00406470
.text:00406470                 push    esi
.text:00406471                 push    ebx
.text:00406472                 sub     esp, 14h
.text:00406475                 mov     edx, [esp+1Ch+arg_0]
.text:00406479                 mov     ebx, [esp+1Ch+arg_4]
.text:0040647D                 mov     esi, [esp+1Ch+arg_8]
.text:00406481                 mov     ecx, edx
.text:00406483                 mov     [esp+1Ch+var_C], edx
.text:00406487                 cmp     edx, ebx
.text:00406489                 jnb     short loc_4064B7
.text:0040648B                 nop
.text:0040648C                 lea     esi, [esi+0]
.text:00406490
.text:00406490 loc_406490:                             ; CODE XREF: sub_406470+45↓j
.text:00406490                 cmp     byte ptr [ecx], 0Fh
.text:00406493                 jz      short loc_4064C4
.text:00406495                 mov     [esp+1Ch+var_14], esi
.text:00406499                 lea     edx, [esp+1Ch+var_C]
.text:0040649D                 mov     [esp+1Ch+var_1C], edx
.text:004064A0                 mov     [esp+1Ch+var_18], ebx
.text:004064A4                 call    sub_4064F0
.text:004064A9                 xor     edx, edx
.text:004064AB                 test    al, al
.text:004064AD                 jz      short loc_4064BC
.text:004064AF
.text:004064AF loc_4064AF:                             ; CODE XREF: sub_406470+70↓j
.text:004064AF                 mov     ecx, [esp+1Ch+var_C]
.text:004064B3                 cmp     ecx, ebx
.text:004064B5                 jb      short loc_406490
.text:004064B7
.text:004064B7 loc_4064B7:                             ; CODE XREF: sub_406470+19↑j
.text:004064B7                 mov     edx, 1
.text:004064BC
.text:004064BC loc_4064BC:                             ; CODE XREF: sub_406470+3D↑j
.text:004064BC                 add     esp, 14h
.text:004064BF                 mov     eax, edx
.text:004064C1                 pop     ebx
.text:004064C2                 pop     esi
.text:004064C3                 retn
.text:004064C4 ; ---------------------------------------------------------------------------
.text:004064C4
.text:004064C4 loc_4064C4:                             ; CODE XREF: sub_406470+23↑j
.text:004064C4                 lea     eax, [ecx+1]
.text:004064C7                 mov     [esp+1Ch+var_C], eax
.text:004064CB                 movsx   eax, byte ptr [eax+1]
.text:004064CF                 movzx   edx, byte ptr [ecx+1]
.text:004064D3                 shl     eax, 8
.text:004064D6                 add     edx, eax
.text:004064D8                 lea     eax, [edx+ecx+3]
.text:004064DC                 mov     [esp+1Ch+var_C], eax
.text:004064E0                 jmp     short loc_4064AF
.text:004064E0 sub_406470      endp
.text:004064E0
.text:004064E0 ; ---------------------------------------------------------------------------
.text:004064E2                 align 10h
.text:004064F0
.text:004064F0 ; =============== S U B R O U T I N E =======================================
.text:004064F0
.text:004064F0
.text:004064F0 sub_4064F0      proc near               ; CODE XREF: sub_406340+50↑p
.text:004064F0                                         ; sub_406470+34↑p
.text:004064F0
.text:004064F0 var_1C          = dword ptr -1Ch
.text:004064F0 var_18          = dword ptr -18h
.text:004064F0 var_14          = dword ptr -14h
.text:004064F0 var_10          = dword ptr -10h
.text:004064F0 var_C           = dword ptr -0Ch
.text:004064F0 var_8           = dword ptr -8
.text:004064F0 var_4           = dword ptr -4
.text:004064F0 arg_0           = dword ptr  4
.text:004064F0 arg_4           = dword ptr  8
.text:004064F0 arg_8           = dword ptr  0Ch
.text:004064F0
.text:004064F0                 sub     esp, 1Ch
.text:004064F3                 mov     [esp+1Ch+var_4], edi
.text:004064F7                 mov     edi, [esp+1Ch+arg_0]
.text:004064FB                 mov     [esp+1Ch+var_C], ebx
.text:004064FF                 mov     ebx, [esp+1Ch+arg_8]
.text:00406503                 mov     [esp+1Ch+var_8], esi
.text:00406507                 mov     edx, [edi]
.text:00406509                 mov     [esp+1Ch+var_10], edx
.text:0040650D                 movzx   eax, byte ptr [edx]
.text:00406510                 inc     edx
.text:00406511                 mov     [esp+1Ch+var_10], edx
.text:00406515                 cmp     eax, 1Dh        ; switch 30 cases
.text:00406518                 ja      def_40651E      ; jumptable 0040651E default case, cases 1-5,7,14-20,22,24,25
.text:0040651E                 jmp     ds:jpt_40651E[eax*4] ; switch jump
.text:0040651E ; ---------------------------------------------------------------------------
.text:00406525                 align 4
.text:00406528 jpt_40651E      dd offset loc_4065D3    ; DATA XREF: sub_4064F0+2E↑r
.text:00406528                 dd offset def_40651E    ; jump table for switch statement
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset loc_4065A0
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset loc_406602
.text:00406528                 dd offset loc_4065D3
.text:00406528                 dd offset loc_4065D3
.text:00406528                 dd offset loc_4065D3
.text:00406528                 dd offset loc_4065D3
.text:00406528                 dd offset loc_406614
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset loc_406635
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset loc_406671
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset def_40651E
.text:00406528                 dd offset loc_4065D3
.text:00406528                 dd offset loc_4065D3
.text:00406528                 dd offset loc_4065D3
.text:00406528                 dd offset loc_4065D3
.text:004065A0 ; ---------------------------------------------------------------------------
.text:004065A0
.text:004065A0 loc_4065A0:                             ; CODE XREF: sub_4064F0+2E↑j
.text:004065A0                                         ; DATA XREF: sub_4064F0:jpt_40651E↑o
.text:004065A0                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0040651E case 6
.text:004065A4                 mov     edx, [esp+1Ch+arg_4]
.text:004065A8                 movzx   esi, byte ptr [ecx]
.text:004065AB                 lea     ecx, [esp+1Ch+var_10]
.text:004065AF                 mov     [esp+1Ch+var_18], edx
.text:004065B3                 mov     [esp+1Ch+var_1C], ecx
.text:004065B6                 mov     [esp+1Ch+var_14], ebx
.text:004065BA                 call    sub_406340
.text:004065BF                 movzx   edx, byte ptr [ebx+esi*4]
.text:004065C3                 mov     cl, al
.text:004065C5                 and     edx, 3
.text:004065C8                 cmp     edx, 3
.text:004065CB                 jz      short loc_4065F0
.text:004065CD
.text:004065CD loc_4065CD:                             ; CODE XREF: sub_4064F0+110↓j
.text:004065CD                 xor     eax, eax
.text:004065CF                 test    cl, cl
.text:004065D1                 jz      short loc_4065E0
.text:004065D3
.text:004065D3 loc_4065D3:                             ; CODE XREF: sub_4064F0+2E↑j
.text:004065D3                                         ; DATA XREF: sub_4064F0:jpt_40651E↑o
.text:004065D3                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0040651E cases 0,9-12,26-29
.text:004065D7
.text:004065D7 loc_4065D7:                             ; CODE XREF: sub_4064F0+11D↓j
.text:004065D7                                         ; sub_4064F0+143↓j
.text:004065D7                 mov     [edi], ecx
.text:004065D9                 mov     eax, 1
.text:004065DE                 mov     esi, esi
.text:004065E0
.text:004065E0 loc_4065E0:                             ; CODE XREF: sub_4064F0+E1↑j
.text:004065E0                                         ; sub_4064F0+122↓j ...
.text:004065E0                 mov     ebx, [esp+1Ch+var_C]
.text:004065E4                 mov     esi, [esp+1Ch+var_8]
.text:004065E8                 mov     edi, [esp+1Ch+var_4]
.text:004065EC                 add     esp, 1Ch
.text:004065EF                 retn
.text:004065F0 ; ---------------------------------------------------------------------------
.text:004065F0
.text:004065F0 loc_4065F0:                             ; CODE XREF: sub_4064F0+DB↑j
.text:004065F0                 mov     eax, [ebx+esi*4]
.text:004065F3                 mov     edx, ecx
.text:004065F5                 and     edx, 3
.text:004065F8                 and     eax, 0FFFFFFFCh
.text:004065FB                 or      eax, edx
.text:004065FD                 mov     [ebx+esi*4], eax
.text:00406600                 jmp     short loc_4065CD
.text:00406602 ; ---------------------------------------------------------------------------
.text:00406602
.text:00406602 loc_406602:                             ; CODE XREF: sub_4064F0+2E↑j
.text:00406602                                         ; DATA XREF: sub_4064F0:jpt_40651E↑o
.text:00406602                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0040651E case 8
.text:00406606                 movzx   esi, byte ptr [ecx]
.text:00406609                 test    byte ptr [ebx+esi*4], 3
.text:0040660D                 jnz     short loc_4065D7
.text:0040660F                 nop
.text:00406610
.text:00406610 def_40651E:                             ; CODE XREF: sub_4064F0+28↑j
.text:00406610                                         ; sub_4064F0+2E↑j ...
.text:00406610                 xor     eax, eax        ; jumptable 0040651E default case, cases 1-5,7,14-20,22,24,25
.text:00406612                 jmp     short loc_4065E0
.text:00406614 ; ---------------------------------------------------------------------------
.text:00406614
.text:00406614 loc_406614:                             ; CODE XREF: sub_4064F0+2E↑j
.text:00406614                                         ; DATA XREF: sub_4064F0:jpt_40651E↑o
.text:00406614                 mov     edx, [esp+1Ch+var_10] ; jumptable 0040651E case 13
.text:00406618                 lea     ecx, [edx+2]
.text:0040661B                 movsx   esi, byte ptr [edx+1]
.text:0040661F                 movzx   ebx, byte ptr [edx]
.text:00406622                 mov     [esp+1Ch+var_10], ecx
.text:00406626                 shl     esi, 8
.text:00406629                 add     ebx, esi
.text:0040662B                 js      short def_40651E ; jumptable 0040651E default case, cases 1-5,7,14-20,22,24,25
.text:0040662D                 add     ecx, ebx
.text:0040662F
.text:0040662F loc_40662F:                             ; CODE XREF: sub_4064F0+17F↓j
.text:0040662F                 mov     [esp+1Ch+var_10], ecx
.text:00406633                 jmp     short loc_4065D7
.text:00406635 ; ---------------------------------------------------------------------------
.text:00406635
.text:00406635 loc_406635:                             ; CODE XREF: sub_4064F0+2E↑j
.text:00406635                                         ; DATA XREF: sub_4064F0:jpt_40651E↑o
.text:00406635                 mov     edx, [esp+1Ch+var_10] ; jumptable 0040651E case 21
.text:00406639                 lea     esi, [edx+2]
.text:0040663C                 mov     [esp+1Ch+var_10], esi
.text:00406640                 movsx   eax, byte ptr [esi+1]
.text:00406644                 movzx   ebx, byte ptr [edx+2]
.text:00406648                 shl     eax, 8
.text:0040664B                 add     ebx, eax
.text:0040664D                 lea     eax, [edx+4]
.text:00406650                 mov     [esp+1Ch+var_10], eax
.text:00406654                 xor     eax, eax
.text:00406656                 test    ebx, ebx
.text:00406658                 jnz     short loc_4065E0
.text:0040665A                 mov     [esp+1Ch+var_10], edx
.text:0040665E                 mov     eax, edx
.text:00406660                 movsx   ebx, byte ptr [eax+1]
.text:00406664                 movzx   edx, byte ptr [edx]
.text:00406667                 shl     ebx, 8
.text:0040666A                 add     edx, ebx
.text:0040666C                 lea     ecx, [edx+esi]
.text:0040666F                 jmp     short loc_40662F
.text:00406671 ; ---------------------------------------------------------------------------
.text:00406671
.text:00406671 loc_406671:                             ; CODE XREF: sub_4064F0+2E↑j
.text:00406671                                         ; DATA XREF: sub_4064F0:jpt_40651E↑o
.text:00406671                 add     [esp+1Ch+var_10], 4 ; jumptable 0040651E case 23
.text:00406676                 jmp     short def_40651E ; jumptable 0040651E default case, cases 1-5,7,14-20,22,24,25
.text:00406676 sub_4064F0      endp
.text:00406676
.text:00406676 ; ---------------------------------------------------------------------------
.text:00406678                 align 10h
.text:00406680
.text:00406680 ; =============== S U B R O U T I N E =======================================
.text:00406680
.text:00406680
.text:00406680 sub_406680      proc near               ; CODE XREF: sub_403FC0+1B06↑p
.text:00406680
.text:00406680 arg_0           = dword ptr  4
.text:00406680 arg_4           = dword ptr  8
.text:00406680 arg_8           = dword ptr  0Ch
.text:00406680 arg_C           = dword ptr  10h
.text:00406680
.text:00406680                 push    edi
.text:00406681                 push    esi
.text:00406682                 push    ebx
.text:00406683                 mov     esi, [esp+0Ch+arg_8]
.text:00406687                 mov     edi, [esp+0Ch+arg_C]
.text:0040668B                 mov     ebx, [esp+0Ch+arg_0]
.text:0040668F                 test    esi, esi
.text:00406691                 mov     ecx, [esp+0Ch+arg_4]
.text:00406695                 jz      short loc_4066B4
.text:00406697                 mov     esi, esi
.text:00406699                 lea     edi, [edi+0]
.text:004066A0
.text:004066A0 loc_4066A0:                             ; CODE XREF: sub_406680+32↓j
.text:004066A0                 movzx   eax, byte ptr [ecx]
.text:004066A3                 inc     ecx
.text:004066A4                 movzx   edx, byte ptr [ebx]
.text:004066A7                 inc     ebx
.text:004066A8                 movzx   eax, byte ptr [eax+edi]
.text:004066AC                 cmp     [edx+edi], al
.text:004066AF                 jnz     short loc_4066BA
.text:004066B1                 dec     esi
.text:004066B2                 jnz     short loc_4066A0
.text:004066B4
.text:004066B4 loc_4066B4:                             ; CODE XREF: sub_406680+15↑j
.text:004066B4                 xor     eax, eax
.text:004066B6
.text:004066B6 loc_4066B6:                             ; CODE XREF: sub_406680+3F↓j
.text:004066B6                 pop     ebx
.text:004066B7                 pop     esi
.text:004066B8                 pop     edi
.text:004066B9                 retn
.text:004066BA ; ---------------------------------------------------------------------------
.text:004066BA
.text:004066BA loc_4066BA:                             ; CODE XREF: sub_406680+2F↑j
.text:004066BA                 mov     eax, 1
.text:004066BF                 jmp     short loc_4066B6
.text:004066BF sub_406680      endp
.text:004066BF
.text:004066BF ; ---------------------------------------------------------------------------
.text:004066C1                 align 20h
.text:004066E0 aSuccess        db 'Success',0          ; DATA XREF: sub_406D40+41↓o
.text:004066E0                                         ; .text:00406DCB↓o
.text:004066E8 aNoMatch        db 'No match',0
.text:004066F1 aInvalidRegular db 'Invalid regular expression',0
.text:0040670C aInvalidCollati db 'Invalid collation character',0
.text:00406728 aInvalidCharact db 'Invalid character class name',0
.text:00406745 aTrailingBacksl db 'Trailing backslash',0
.text:00406758 aInvalidBackRef db 'Invalid back reference',0
.text:0040676F aUnmatchedOr    db 'Unmatched [ or [^',0
.text:00406781 aUnmatchedOr_0  db 'Unmatched ( or \(',0
.text:00406793 aUnmatched      db 'Unmatched \{',0
.text:004067A0 aInvalidContent db 'Invalid content of \{\}',0
.text:004067B8 aInvalidRangeEn db 'Invalid range end',0
.text:004067CA aMemoryExhauste_0 db 'Memory exhausted',0
.text:004067DB aInvalidPrecedi db 'Invalid preceding regular expression',0
.text:00406800 aPrematureEndOf db 'Premature end of regular expression',0
.text:00406824 aRegularExpress db 'Regular expression too big',0
.text:0040683F aUnmatchedOr_1  db 'Unmatched ) or \)',0
.text:00406851                 db 0EBh, 0Dh, 90h
.text:00406854                 align 10h
.text:00406860 dword_406860    dd 0                    ; DATA XREF: sub_406D40+3A↓r
.text:00406860                                         ; .text:00406DC4↓r
.text:00406864                 dd 8, 11h, 2Ch, 48h, 65h, 78h, 8Fh, 0A1h, 0B3h, 0C0h, 0D8h
.text:00406864                 dd 0EAh, 0FBh, 120h, 144h, 15Fh, 0B68Dh, 0BF8D0000h, 0
.text:004068B0
.text:004068B0 ; =============== S U B R O U T I N E =======================================
.text:004068B0
.text:004068B0
.text:004068B0 sub_4068B0      proc near               ; CODE XREF: sub_406ED0+25A0↓p
.text:004068B0
.text:004068B0 arg_0           = dword ptr  4
.text:004068B0 arg_8           = dword ptr  0Ch
.text:004068B0 arg_C           = dword ptr  10h
.text:004068B0
.text:004068B0                 mov     edx, [esp+arg_8]
.text:004068B4                 mov     ecx, [esp+arg_C]
.text:004068B8                 dec     edx
.text:004068B9                 js      short loc_4068DA
.text:004068BB                 lea     eax, [edx+edx*4]
.text:004068BE                 shl     eax, 2
.text:004068C1                 add     eax, [esp+arg_0]
.text:004068C5                 add     eax, 10h
.text:004068C8                 nop
.text:004068C9                 lea     esi, [esi+0]
.text:004068D0
.text:004068D0 loc_4068D0:                             ; CODE XREF: sub_4068B0+28↓j
.text:004068D0                 cmp     [eax], ecx
.text:004068D2                 jz      short loc_4068DD
.text:004068D4                 sub     eax, 14h
.text:004068D7                 dec     edx
.text:004068D8                 jns     short loc_4068D0
.text:004068DA
.text:004068DA loc_4068DA:                             ; CODE XREF: sub_4068B0+9↑j
.text:004068DA                 xor     eax, eax
.text:004068DC                 retn
.text:004068DD ; ---------------------------------------------------------------------------
.text:004068DD
.text:004068DD loc_4068DD:                             ; CODE XREF: sub_4068B0+22↑j
.text:004068DD                 mov     eax, 1
.text:004068E2                 retn
.text:004068E2 sub_4068B0      endp
.text:004068E2
.text:004068E2 ; ---------------------------------------------------------------------------
.text:004068E3                 align 10h
.text:004068F0
.text:004068F0 ; =============== S U B R O U T I N E =======================================
.text:004068F0
.text:004068F0 ; Attributes: thunk
.text:004068F0
.text:004068F0 sub_4068F0      proc near               ; CODE XREF: .text:004069D1↓p
.text:004068F0                                         ; sub_40A240+258↓p
.text:004068F0                 jmp     sub_40A4E0
.text:004068F0 sub_4068F0      endp
.text:004068F0
.text:004068F0 ; ---------------------------------------------------------------------------
.text:004068F5                 align 10h
.text:00406900                 push    ebp
.text:00406901                 push    edi
.text:00406902                 push    esi
.text:00406903                 push    ebx
.text:00406904                 sub     esp, 1Ch
.text:00406907                 mov     edi, [esp+30h]
.text:0040690B                 test    byte ptr [esp+38h], 1
.text:00406910                 mov     dword ptr [edi], 0
.text:00406916                 setnz   dl
.text:00406919                 mov     dword ptr [edi+4], 0
.text:00406920                 mov     dword ptr [edi+8], 0
.text:00406927                 mov     dword ptr [esp], 100h
.text:0040692E                 movzx   ebp, dl
.text:00406931                 dec     ebp
.text:00406932                 and     ebp, 0FFFD4FCAh
.text:00406938                 add     ebp, 3B2FCh
.text:0040693E                 call    malloc
.text:00406943                 test    byte ptr [esp+38h], 2
.text:00406948                 mov     [edi+10h], eax
.text:0040694B                 jnz     loc_406A00
.text:00406951                 mov     dword ptr [edi+14h], 0
.text:00406958
.text:00406958 loc_406958:                             ; CODE XREF: .text:00406A50↓j
.text:00406958                 test    byte ptr [esp+38h], 4
.text:0040695D                 jz      loc_4069F7
.text:00406963                 or      byte ptr [edi+1Ch], 80h
.text:00406967                 and     ebp, 0FFFFFFBFh
.text:0040696A                 or      ebp, 100h
.text:00406970
.text:00406970 loc_406970:                             ; CODE XREF: .text:004069FB↓j
.text:00406970                 shr     dword ptr [esp+38h], 3
.text:00406975                 movzx   edx, byte ptr [esp+38h]
.text:0040697A                 movzx   ecx, byte ptr [edi+1Ch]
.text:0040697E                 and     dl, 1
.text:00406981                 shl     dl, 4
.text:00406984                 and     cl, 0EFh
.text:00406987                 or      cl, dl
.text:00406989                 mov     [edi+1Ch], cl
.text:0040698C                 mov     esi, [esp+34h]
.text:00406990                 mov     [esp], esi
.text:00406993                 call    strlen
.text:00406998                 mov     [esp+4], eax
.text:0040699C                 mov     ebx, [esp+34h]
.text:004069A0                 mov     [esp+0Ch], edi
.text:004069A4                 mov     [esp+8], ebp
.text:004069A8                 mov     [esp], ebx
.text:004069AB                 call    sub_406ED0
.text:004069B0                 cmp     eax, 10h
.text:004069B3                 mov     ebx, eax
.text:004069B5                 jz      short loc_4069F0
.text:004069B7
.text:004069B7 loc_4069B7:                             ; CODE XREF: .text:004069F5↓j
.text:004069B7                 test    ebx, ebx
.text:004069B9                 jnz     short loc_4069C2
.text:004069BB                 mov     ebp, [edi+10h]
.text:004069BE                 test    ebp, ebp
.text:004069C0                 jnz     short loc_4069CE
.text:004069C2
.text:004069C2 loc_4069C2:                             ; CODE XREF: .text:004069B9↑j
.text:004069C2                                         ; .text:004069D9↓j ...
.text:004069C2                 mov     edx, ebx
.text:004069C4
.text:004069C4 loc_4069C4:                             ; CODE XREF: .text:00406A16↓j
.text:004069C4                 add     esp, 1Ch
.text:004069C7                 mov     eax, edx
.text:004069C9                 pop     ebx
.text:004069CA                 pop     esi
.text:004069CB                 pop     edi
.text:004069CC                 pop     ebp
.text:004069CD                 retn
.text:004069CE ; ---------------------------------------------------------------------------
.text:004069CE
.text:004069CE loc_4069CE:                             ; CODE XREF: .text:004069C0↑j
.text:004069CE                 mov     [esp], edi
.text:004069D1                 call    sub_4068F0
.text:004069D6                 cmp     eax, 0FFFFFFFEh
.text:004069D9                 jnz     short loc_4069C2
.text:004069DB                 mov     esi, [edi+10h]
.text:004069DE                 mov     [esp], esi
.text:004069E1                 call    free
.text:004069E6                 mov     dword ptr [edi+10h], 0
.text:004069ED                 jmp     short loc_4069C2
.text:004069ED ; ---------------------------------------------------------------------------
.text:004069EF                 align 10h
.text:004069F0
.text:004069F0 loc_4069F0:                             ; CODE XREF: .text:004069B5↑j
.text:004069F0                 mov     ebx, 8
.text:004069F5                 jmp     short loc_4069B7
.text:004069F7 ; ---------------------------------------------------------------------------
.text:004069F7
.text:004069F7 loc_4069F7:                             ; CODE XREF: .text:0040695D↑j
.text:004069F7                 and     byte ptr [edi+1Ch], 7Fh
.text:004069FB                 jmp     loc_406970
.text:00406A00 ; ---------------------------------------------------------------------------
.text:00406A00
.text:00406A00 loc_406A00:                             ; CODE XREF: .text:0040694B↑j
.text:00406A00                 mov     dword ptr [esp], 100h
.text:00406A07                 call    malloc
.text:00406A0C                 mov     [edi+14h], eax
.text:00406A0F                 test    eax, eax
.text:00406A11                 mov     edx, 0Ch
.text:00406A16                 jz      short loc_4069C4
.text:00406A18                 xor     ebx, ebx
.text:00406A1A                 lea     esi, [esi+0]
.text:00406A20
.text:00406A20 loc_406A20:                             ; CODE XREF: .text:00406A4E↓j
.text:00406A20                 mov     edx, ds:__mb_cur_max
.text:00406A26                 mov     esi, [edi+14h]
.text:00406A29                 cmp     dword ptr [edx], 1
.text:00406A2C                 jz      short loc_406A61
.text:00406A2E                 mov     dword ptr [esp+4], 1
.text:00406A36                 mov     [esp], ebx
.text:00406A39                 call    _isctype
.text:00406A3E
.text:00406A3E loc_406A3E:                             ; CODE XREF: .text:00406A70↓j
.text:00406A3E                 test    eax, eax
.text:00406A40                 mov     dl, bl
.text:00406A42                 jnz     short loc_406A55
.text:00406A44
.text:00406A44 loc_406A44:                             ; CODE XREF: .text:00406A5F↓j
.text:00406A44                 mov     [ebx+esi], dl
.text:00406A47                 inc     ebx
.text:00406A48                 cmp     ebx, 0FFh
.text:00406A4E                 jbe     short loc_406A20
.text:00406A50                 jmp     loc_406958
.text:00406A55 ; ---------------------------------------------------------------------------
.text:00406A55
.text:00406A55 loc_406A55:                             ; CODE XREF: .text:00406A42↑j
.text:00406A55                 mov     [esp], ebx
.text:00406A58                 call    tolower
.text:00406A5D                 mov     dl, al
.text:00406A5F                 jmp     short loc_406A44
.text:00406A61 ; ---------------------------------------------------------------------------
.text:00406A61
.text:00406A61 loc_406A61:                             ; CODE XREF: .text:00406A2C↑j
.text:00406A61                 mov     edx, ds:_pctype
.text:00406A67                 mov     ecx, [edx]
.text:00406A69                 movzx   eax, word ptr [ecx+ebx*2]
.text:00406A6D                 and     eax, 1
.text:00406A70                 jmp     short loc_406A3E
.text:00406A70 ; ---------------------------------------------------------------------------
.text:00406A72                 align 10h
.text:00406A80                 push    ebp
.text:00406A81                 push    edi
.text:00406A82                 push    esi
.text:00406A83                 push    ebx
.text:00406A84                 sub     esp, 7Ch
.text:00406A87                 mov     ebx, [esp+90h]
.text:00406A8E                 mov     edx, [esp+94h]
.text:00406A95                 mov     ebp, [esp+98h]
.text:00406A9C                 mov     esi, [esp+0A0h]
.text:00406AA3                 mov     [esp], edx
.text:00406AA6                 call    strlen
.text:00406AAB                 test    byte ptr [ebx+1Ch], 10h
.text:00406AAF                 mov     edi, eax
.text:00406AB1                 mov     byte ptr [esp+3Fh], 0
.text:00406AB6                 jnz     short loc_406AD0
.text:00406AB8                 test    ebp, ebp
.text:00406ABA                 jz      short loc_406AD0
.text:00406ABC                 mov     byte ptr [esp+3Fh], 1
.text:00406AC1                 jmp     short loc_406AD0
.text:00406AC1 ; ---------------------------------------------------------------------------
.text:00406AC3                 align 10h
.text:00406AD0
.text:00406AD0 loc_406AD0:                             ; CODE XREF: .text:00406AB6↑j
.text:00406AD0                                         ; .text:00406ABA↑j ...
.text:00406AD0                 mov     edx, [ebx]
.text:00406AD2                 mov     [esp+40h], edx
.text:00406AD6                 mov     ecx, [ebx+4]
.text:00406AD9                 mov     [esp+44h], ecx
.text:00406ADD                 mov     edx, [ebx+8]
.text:00406AE0                 mov     [esp+48h], edx
.text:00406AE4                 mov     ecx, [ebx+0Ch]
.text:00406AE7                 mov     [esp+4Ch], ecx
.text:00406AEB                 mov     edx, [ebx+10h]
.text:00406AEE                 mov     [esp+50h], edx
.text:00406AF2                 mov     ecx, [ebx+14h]
.text:00406AF5                 mov     [esp+54h], ecx
.text:00406AF9                 mov     edx, [ebx+18h]
.text:00406AFC                 mov     [esp+58h], edx
.text:00406B00                 mov     ecx, [ebx+1Ch]
.text:00406B03                 mov     edx, esi
.text:00406B05                 shr     esi, 1
.text:00406B07                 and     dl, 1
.text:00406B0A                 mov     eax, esi
.text:00406B0C                 mov     [esp+5Ch], ecx
.text:00406B10                 shl     dl, 5
.text:00406B13                 and     al, 1
.text:00406B15                 movzx   ebx, byte ptr [esp+5Ch]
.text:00406B1A                 shl     al, 6
.text:00406B1D                 and     bl, 9Fh
.text:00406B20                 or      bl, dl
.text:00406B22                 or      bl, al
.text:00406B24                 and     bl, 0F9h
.text:00406B27                 or      bl, 4
.text:00406B2A                 cmp     byte ptr [esp+3Fh], 0
.text:00406B2F                 mov     [esp+5Ch], bl
.text:00406B33                 jnz     loc_406BE6
.text:00406B39
.text:00406B39 loc_406B39:                             ; CODE XREF: .text:00406C0F↓j
.text:00406B39                 movzx   ecx, byte ptr [esp+3Fh]
.text:00406B3E                 lea     esi, [esp+60h]
.text:00406B42                 mov     [esp+20h], edi
.text:00406B46                 lea     ebx, [esp+40h]
.text:00406B4A                 mov     [esp+18h], edi
.text:00406B4E                 mov     dword ptr [esp+14h], 0
.text:00406B56                 xor     cl, 1
.text:00406B59                 movzx   edx, cl
.text:00406B5C                 mov     [esp+10h], edi
.text:00406B60                 mov     ecx, [esp+94h]
.text:00406B67                 dec     edx
.text:00406B68                 mov     dword ptr [esp+8], 0
.text:00406B70                 and     esi, edx
.text:00406B72                 mov     [esp+1Ch], esi
.text:00406B76                 mov     [esp+0Ch], ecx
.text:00406B7A                 mov     dword ptr [esp+4], 0
.text:00406B82                 mov     [esp], ebx
.text:00406B85                 call    sub_40A240
.text:00406B8A                 cmp     byte ptr [esp+3Fh], 0
.text:00406B8F                 mov     esi, eax
.text:00406B91                 jz      short loc_406BD1
.text:00406B93                 test    eax, eax
.text:00406B95                 js      short loc_406BE0
.text:00406B97                 xor     edx, edx
.text:00406B99                 cmp     edx, ebp
.text:00406B9B                 jnb     short loc_406BE0
.text:00406B9D                 mov     ecx, [esp+64h]
.text:00406BA1                 mov     ebx, [esp+68h]
.text:00406BA5                 lea     esi, [esi+0]
.text:00406BA9                 lea     edi, [edi+0]
.text:00406BB0
.text:00406BB0 loc_406BB0:                             ; CODE XREF: .text:00406BC7↓j
.text:00406BB0                 mov     eax, [ecx+edx*4]
.text:00406BB3                 mov     edi, [esp+9Ch]
.text:00406BBA                 mov     [edi+edx*8], eax
.text:00406BBD                 mov     eax, [ebx+edx*4]
.text:00406BC0                 mov     [edi+edx*8+4], eax
.text:00406BC4                 inc     edx
.text:00406BC5                 cmp     edx, ebp
.text:00406BC7                 jb      short loc_406BB0
.text:00406BC9
.text:00406BC9 loc_406BC9:                             ; CODE XREF: .text:00406BE4↓j
.text:00406BC9                 mov     [esp], ecx
.text:00406BCC                 call    free
.text:00406BD1
.text:00406BD1 loc_406BD1:                             ; CODE XREF: .text:00406B91↑j
.text:00406BD1                 mov     eax, esi
.text:00406BD3                 shr     eax, 1Fh
.text:00406BD6
.text:00406BD6 loc_406BD6:                             ; CODE XREF: .text:00406C06↓j
.text:00406BD6                 add     esp, 7Ch
.text:00406BD9                 pop     ebx
.text:00406BDA                 pop     esi
.text:00406BDB                 pop     edi
.text:00406BDC                 pop     ebp
.text:00406BDD                 retn
.text:00406BDD ; ---------------------------------------------------------------------------
.text:00406BDE                 align 10h
.text:00406BE0
.text:00406BE0 loc_406BE0:                             ; CODE XREF: .text:00406B95↑j
.text:00406BE0                                         ; .text:00406B9B↑j
.text:00406BE0                 mov     ecx, [esp+64h]
.text:00406BE4                 jmp     short loc_406BC9
.text:00406BE6 ; ---------------------------------------------------------------------------
.text:00406BE6
.text:00406BE6 loc_406BE6:                             ; CODE XREF: .text:00406B33↑j
.text:00406BE6                 mov     [esp+60h], ebp
.text:00406BEA                 lea     esi, ds:0[ebp*8]
.text:00406BF1                 mov     [esp], esi
.text:00406BF4                 call    malloc
.text:00406BF9                 mov     [esp+64h], eax
.text:00406BFD                 mov     ecx, eax
.text:00406BFF                 test    ecx, ecx
.text:00406C01                 mov     eax, 1
.text:00406C06                 jz      short loc_406BD6
.text:00406C08                 lea     eax, [ecx+ebp*4]
.text:00406C0B                 mov     [esp+68h], eax
.text:00406C0F                 jmp     loc_406B39
.text:00406C0F ; ---------------------------------------------------------------------------
.text:00406C14                 align 10h
.text:00406C20                 mov     eax, ds:dword_4196E0
.text:00406C25                 mov     ecx, [esp+4]
.text:00406C29                 mov     ds:dword_4196E0, ecx
.text:00406C2F                 retn
.text:00406C30 ; ---------------------------------------------------------------------------
.text:00406C30                 push    ebx
.text:00406C31                 mov     ebx, [esp+10h]
.text:00406C35                 mov     edx, [esp+8]
.text:00406C39                 mov     ecx, [esp+0Ch]
.text:00406C3D                 test    ebx, ebx
.text:00406C3F                 jz      short loc_406C60
.text:00406C41                 movzx   eax, byte ptr [edx+1Ch]
.text:00406C45                 and     al, 0F9h
.text:00406C47                 or      al, 2
.text:00406C49                 mov     [edx+1Ch], al
.text:00406C4C                 mov     edx, [esp+14h]
.text:00406C50                 mov     [ecx], ebx
.text:00406C52                 mov     [ecx+4], edx
.text:00406C55                 mov     edx, [esp+18h]
.text:00406C59                 mov     [ecx+8], edx
.text:00406C5C
.text:00406C5C loc_406C5C:                             ; CODE XREF: .text:00406C78↓j
.text:00406C5C                 pop     ebx
.text:00406C5D                 retn
.text:00406C5D ; ---------------------------------------------------------------------------
.text:00406C5E                 align 10h
.text:00406C60
.text:00406C60 loc_406C60:                             ; CODE XREF: .text:00406C3F↑j
.text:00406C60                 and     byte ptr [edx+1Ch], 0F9h
.text:00406C64                 mov     dword ptr [ecx], 0
.text:00406C6A                 mov     dword ptr [ecx+8], 0
.text:00406C71                 mov     dword ptr [ecx+4], 0
.text:00406C78                 jmp     short loc_406C5C
.text:00406C78 ; ---------------------------------------------------------------------------
.text:00406C7A                 align 10h
.text:00406C80
.text:00406C80 ; =============== S U B R O U T I N E =======================================
.text:00406C80
.text:00406C80
.text:00406C80 sub_406C80      proc near               ; CODE XREF: sub_401F00+19C↑p
.text:00406C80
.text:00406C80 var_2C          = dword ptr -2Ch
.text:00406C80 var_28          = dword ptr -28h
.text:00406C80 var_24          = dword ptr -24h
.text:00406C80 var_20          = dword ptr -20h
.text:00406C80 var_1C          = dword ptr -1Ch
.text:00406C80 var_18          = dword ptr -18h
.text:00406C80 var_14          = dword ptr -14h
.text:00406C80 var_10          = dword ptr -10h
.text:00406C80 var_C           = dword ptr -0Ch
.text:00406C80 arg_0           = dword ptr  4
.text:00406C80 arg_4           = dword ptr  8
.text:00406C80 arg_8           = dword ptr  0Ch
.text:00406C80 arg_C           = dword ptr  10h
.text:00406C80 arg_10          = dword ptr  14h
.text:00406C80 arg_14          = dword ptr  18h
.text:00406C80
.text:00406C80                 sub     esp, 2Ch
.text:00406C83                 mov     edx, [esp+2Ch+arg_14]
.text:00406C87                 mov     [esp+2Ch+var_24], 0
.text:00406C8F                 mov     ecx, [esp+2Ch+arg_8]
.text:00406C93                 mov     [esp+2Ch+var_28], 0
.text:00406C9B                 mov     [esp+2Ch+var_10], edx
.text:00406C9F                 mov     edx, [esp+2Ch+arg_10]
.text:00406CA3                 mov     [esp+2Ch+var_C], ecx
.text:00406CA7                 mov     [esp+2Ch+var_1C], ecx
.text:00406CAB                 mov     [esp+2Ch+var_14], edx
.text:00406CAF                 mov     edx, [esp+2Ch+arg_C]
.text:00406CB3                 mov     [esp+2Ch+var_18], edx
.text:00406CB7                 mov     edx, [esp+2Ch+arg_4]
.text:00406CBB                 mov     [esp+2Ch+var_20], edx
.text:00406CBF                 mov     edx, [esp+2Ch+arg_0]
.text:00406CC3                 mov     [esp+2Ch+var_2C], edx
.text:00406CC6                 call    sub_40A240
.text:00406CCB                 add     esp, 2Ch
.text:00406CCE                 retn
.text:00406CCE sub_406C80      endp
.text:00406CCE
.text:00406CCE ; ---------------------------------------------------------------------------
.text:00406CCF                 align 10h
.text:00406CD0                 jmp     sub_40A240
.text:00406CD0 ; ---------------------------------------------------------------------------
.text:00406CD5                 align 10h
.text:00406CE0                 sub     esp, 2Ch
.text:00406CE3                 mov     edx, [esp+40h]
.text:00406CE7                 mov     dword ptr [esp+8], 0
.text:00406CEF                 mov     ecx, [esp+38h]
.text:00406CF3                 mov     dword ptr [esp+4], 0
.text:00406CFB                 mov     [esp+18h], edx
.text:00406CFF                 mov     edx, [esp+3Ch]
.text:00406D03                 mov     [esp+1Ch], ecx
.text:00406D07                 mov     [esp+10h], ecx
.text:00406D0B                 mov     [esp+14h], edx
.text:00406D0F                 mov     edx, [esp+34h]
.text:00406D13                 mov     [esp+0Ch], edx
.text:00406D17                 mov     edx, [esp+30h]
.text:00406D1B                 mov     [esp], edx
.text:00406D1E                 call    sub_403FC0
.text:00406D23                 add     esp, 2Ch
.text:00406D26                 retn
.text:00406D26 ; ---------------------------------------------------------------------------
.text:00406D27                 align 10h
.text:00406D30                 jmp     sub_403FC0
.text:00406D30 ; ---------------------------------------------------------------------------
.text:00406D35                 align 10h
.text:00406D40
.text:00406D40 ; =============== S U B R O U T I N E =======================================
.text:00406D40
.text:00406D40
.text:00406D40 sub_406D40      proc near               ; CODE XREF: sub_4016C0+316↑p
.text:00406D40
.text:00406D40 var_1C          = dword ptr -1Ch
.text:00406D40 var_18          = dword ptr -18h
.text:00406D40 var_14          = dword ptr -14h
.text:00406D40 var_10          = dword ptr -10h
.text:00406D40 arg_0           = dword ptr  4
.text:00406D40 arg_4           = dword ptr  8
.text:00406D40 arg_8           = dword ptr  0Ch
.text:00406D40
.text:00406D40                 sub     esp, 1Ch
.text:00406D43                 mov     ecx, [esp+1Ch+arg_8]
.text:00406D47                 movzx   edx, byte ptr [ecx+1Ch]
.text:00406D4B                 and     dl, 0E9h
.text:00406D4E                 or      dl, 80h
.text:00406D51                 mov     [ecx+1Ch], dl
.text:00406D54                 mov     edx, [esp+1Ch+arg_4]
.text:00406D58                 mov     [esp+1Ch+var_10], ecx
.text:00406D5C                 mov     ecx, ds:dword_4196E0
.text:00406D62                 mov     [esp+1Ch+var_18], edx
.text:00406D66                 mov     edx, [esp+1Ch+arg_0]
.text:00406D6A                 mov     [esp+1Ch+var_14], ecx
.text:00406D6E                 mov     [esp+1Ch+var_1C], edx
.text:00406D71                 call    sub_406ED0
.text:00406D76                 test    eax, eax
.text:00406D78                 jz      short loc_406D94
.text:00406D7A                 mov     ecx, ds:dword_406860[eax*4]
.text:00406D81                 add     ecx, offset aSuccess ; "Success"
.text:00406D87                 mov     [esp+1Ch+arg_0], ecx
.text:00406D8B                 add     esp, 1Ch
.text:00406D8E                 jmp     ds:libintl_gettext
.text:00406D94 ; ---------------------------------------------------------------------------
.text:00406D94
.text:00406D94 loc_406D94:                             ; CODE XREF: sub_406D40+38↑j
.text:00406D94                 xor     eax, eax
.text:00406D96                 add     esp, 1Ch
.text:00406D99                 retn
.text:00406D99 sub_406D40      endp
.text:00406D99
.text:00406D99 ; ---------------------------------------------------------------------------
.text:00406D9A                 align 10h
.text:00406DA0                 sub     esp, 1Ch
.text:00406DA3                 mov     eax, [esp+20h]
.text:00406DA7                 mov     [esp+14h], edi
.text:00406DAB                 mov     edi, [esp+2Ch]
.text:00406DAF                 cmp     eax, 10h
.text:00406DB2                 mov     [esp+18h], ebp
.text:00406DB6                 mov     ebp, [esp+28h]
.text:00406DBA                 mov     [esp+0Ch], ebx
.text:00406DBE                 mov     [esp+10h], esi
.text:00406DC2                 ja      short loc_406E38
.text:00406DC4                 mov     edx, ds:dword_406860[eax*4]
.text:00406DCB                 add     edx, offset aSuccess ; "Success"
.text:00406DD1                 mov     [esp], edx
.text:00406DD4                 call    ds:libintl_gettext
.text:00406DDA                 mov     [esp], eax
.text:00406DDD                 mov     ebx, eax
.text:00406DDF                 call    strlen
.text:00406DE4                 test    edi, edi
.text:00406DE6                 lea     esi, [eax+1]
.text:00406DE9                 jz      short loc_406E10
.text:00406DEB                 cmp     esi, edi
.text:00406DED                 jbe     short loc_406E26
.text:00406DEF                 mov     [esp+4], ebx
.text:00406DF3                 lea     edx, [edi-1]
.text:00406DF6                 mov     [esp+8], edx
.text:00406DFA                 mov     [esp], ebp
.text:00406DFD                 call    sub_40C7F0
.text:00406E02                 mov     byte ptr [eax], 0
.text:00406E05                 lea     esi, [esi+0]
.text:00406E09                 lea     edi, [edi+0]
.text:00406E10
.text:00406E10 loc_406E10:                             ; CODE XREF: .text:00406DE9↑j
.text:00406E10                                         ; .text:00406E36↓j
.text:00406E10                 mov     eax, esi
.text:00406E12                 mov     ebx, [esp+0Ch]
.text:00406E16                 mov     esi, [esp+10h]
.text:00406E1A                 mov     edi, [esp+14h]
.text:00406E1E                 mov     ebp, [esp+18h]
.text:00406E22                 add     esp, 1Ch
.text:00406E25                 retn
.text:00406E26 ; ---------------------------------------------------------------------------
.text:00406E26
.text:00406E26 loc_406E26:                             ; CODE XREF: .text:00406DED↑j
.text:00406E26                 mov     [esp+8], esi
.text:00406E2A                 mov     [esp+4], ebx
.text:00406E2E                 mov     [esp], ebp
.text:00406E31                 call    memcpy
.text:00406E36                 jmp     short loc_406E10
.text:00406E38 ; ---------------------------------------------------------------------------
.text:00406E38
.text:00406E38 loc_406E38:                             ; CODE XREF: .text:00406DC2↑j
.text:00406E38                 call    abort
.text:00406E38 ; ---------------------------------------------------------------------------
.text:00406E3D                 align 10h
.text:00406E40                 sub     esp, 0Ch
.text:00406E43                 mov     [esp+8], ebx
.text:00406E47                 mov     ebx, [esp+10h]
.text:00406E4B                 mov     eax, [ebx]
.text:00406E4D                 test    eax, eax
.text:00406E4F                 jnz     short loc_406EB0
.text:00406E51
.text:00406E51 loc_406E51:                             ; CODE XREF: .text:00406EB8↓j
.text:00406E51                 mov     dword ptr [ebx], 0
.text:00406E57                 mov     eax, [ebx+10h]
.text:00406E5A                 mov     dword ptr [ebx+4], 0
.text:00406E61                 mov     dword ptr [ebx+8], 0
.text:00406E68                 test    eax, eax
.text:00406E6A                 jnz     short loc_406EA0
.text:00406E6C
.text:00406E6C loc_406E6C:                             ; CODE XREF: .text:00406EA8↓j
.text:00406E6C                 and     byte ptr [ebx+1Ch], 0F7h
.text:00406E70                 mov     eax, [ebx+14h]
.text:00406E73                 mov     dword ptr [ebx+10h], 0
.text:00406E7A                 test    eax, eax
.text:00406E7C                 jnz     short loc_406E90
.text:00406E7E
.text:00406E7E loc_406E7E:                             ; CODE XREF: .text:00406E98↓j
.text:00406E7E                 mov     dword ptr [ebx+14h], 0
.text:00406E85                 mov     ebx, [esp+8]
.text:00406E89                 add     esp, 0Ch
.text:00406E8C                 retn
.text:00406E8C ; ---------------------------------------------------------------------------
.text:00406E8D                 align 10h
.text:00406E90
.text:00406E90 loc_406E90:                             ; CODE XREF: .text:00406E7C↑j
.text:00406E90                 mov     [esp], eax
.text:00406E93                 call    free
.text:00406E98                 jmp     short loc_406E7E
.text:00406E98 ; ---------------------------------------------------------------------------
.text:00406E9A                 align 10h
.text:00406EA0
.text:00406EA0 loc_406EA0:                             ; CODE XREF: .text:00406E6A↑j
.text:00406EA0                 mov     [esp], eax
.text:00406EA3                 call    free
.text:00406EA8                 jmp     short loc_406E6C
.text:00406EA8 ; ---------------------------------------------------------------------------
.text:00406EAA                 align 10h
.text:00406EB0
.text:00406EB0 loc_406EB0:                             ; CODE XREF: .text:00406E4F↑j
.text:00406EB0                 mov     [esp], eax
.text:00406EB3                 call    free
.text:00406EB8                 jmp     short loc_406E51
.text:00406EB8 ; ---------------------------------------------------------------------------
.text:00406EBA aLower          db 'lower',0            ; DATA XREF: sub_406ED0+1EEB↓o
.text:00406EC0 aUpper          db 'upper',0            ; DATA XREF: sub_406ED0+1F11↓o
.text:00406EC6                 align 10h
.text:00406ED0
.text:00406ED0 ; =============== S U B R O U T I N E =======================================
.text:00406ED0
.text:00406ED0
.text:00406ED0 sub_406ED0      proc near               ; CODE XREF: .text:004069AB↑p
.text:00406ED0                                         ; sub_406D40+31↑p
.text:00406ED0
.text:00406ED0 Size            = dword ptr -97Ch
.text:00406ED0 var_978         = dword ptr -978h
.text:00406ED0 var_974         = dword ptr -974h
.text:00406ED0 var_970         = dword ptr -970h
.text:00406ED0 var_96C         = dword ptr -96Ch
.text:00406ED0 var_968         = dword ptr -968h
.text:00406ED0 var_950         = dword ptr -950h
.text:00406ED0 var_940         = dword ptr -940h
.text:00406ED0 var_93C         = dword ptr -93Ch
.text:00406ED0 var_938         = dword ptr -938h
.text:00406ED0 var_934         = dword ptr -934h
.text:00406ED0 var_930         = dword ptr -930h
.text:00406ED0 Type            = word ptr -92Ch
.text:00406ED0 var_926         = byte ptr -926h
.text:00406ED0 var_925         = byte ptr -925h
.text:00406ED0 var_924         = dword ptr -924h
.text:00406ED0 var_91E         = byte ptr -91Eh
.text:00406ED0 var_91D         = byte ptr -91Dh
.text:00406ED0 var_91C         = byte ptr -91Ch
.text:00406ED0 var_90C         = dword ptr -90Ch
.text:00406ED0 var_908         = dword ptr -908h
.text:00406ED0 var_904         = dword ptr -904h
.text:00406ED0 var_900         = dword ptr -900h
.text:00406ED0 var_8FC         = dword ptr -8FCh
.text:00406ED0 var_8F8         = dword ptr -8F8h
.text:00406ED0 var_8F4         = dword ptr -8F4h
.text:00406ED0 var_8F0         = dword ptr -8F0h
.text:00406ED0 var_8EC         = byte ptr -8ECh
.text:00406ED0 var_8D0         = dword ptr -8D0h
.text:00406ED0 var_8CC         = byte ptr -8CCh
.text:00406ED0 var_84C         = byte ptr -84Ch
.text:00406ED0 name            = byte ptr -83Ch
.text:00406ED0 Block           = dword ptr -2Ch
.text:00406ED0 var_28          = dword ptr -28h
.text:00406ED0 var_24          = dword ptr -24h
.text:00406ED0 arg_0           = dword ptr  4
.text:00406ED0 arg_4           = dword ptr  8
.text:00406ED0 arg_8           = dword ptr  0Ch
.text:00406ED0 arg_C           = dword ptr  10h
.text:00406ED0
.text:00406ED0                 push    ebp
.text:00406ED1                 mov     ebp, 0Ch
.text:00406ED6                 push    edi
.text:00406ED7                 push    esi
.text:00406ED8                 push    ebx
.text:00406ED9                 sub     esp, 96Ch
.text:00406EDF                 mov     eax, [esp+97Ch+arg_0]
.text:00406EE6                 mov     [esp+97Ch+var_900], 0
.text:00406EEE                 mov     ecx, [esp+97Ch+arg_C]
.text:00406EF5                 mov     ebx, [esp+97Ch+arg_4]
.text:00406EFC                 mov     [esp+97Ch+var_8D0], eax
.text:00406F03                 mov     edx, [ecx+14h]
.text:00406F06                 add     eax, ebx
.text:00406F08                 mov     [esp+97Ch+var_8F4], eax
.text:00406F0F                 xor     eax, eax
.text:00406F11                 mov     [esp+97Ch+var_8F8], edx
.text:00406F18                 mov     [esp+97Ch+var_8FC], eax
.text:00406F1F                 mov     [esp+97Ch+var_908], 0
.text:00406F27                 mov     [esp+97Ch+var_90C], 0
.text:00406F2F                 mov     [esp+97Ch+Size], 280h ; Size
.text:00406F36                 call    malloc
.text:00406F3B                 mov     [esp+97Ch+Block], eax
.text:00406F42                 test    eax, eax
.text:00406F44                 jz      loc_4072E6
.text:00406F4A                 mov     edi, [esp+97Ch+arg_C]
.text:00406F51                 xor     edx, edx
.text:00406F53                 mov     ecx, 20h ; ' '
.text:00406F58                 mov     [esp+97Ch+var_28], ecx
.text:00406F5F                 mov     ebp, [esp+97Ch+arg_8]
.text:00406F66                 mov     [esp+97Ch+var_24], edx
.text:00406F6D                 and     byte ptr [edi+1Ch], 97h
.text:00406F71                 mov     [edi+0Ch], ebp
.text:00406F74                 mov     dword ptr [edi+8], 0
.text:00406F7B                 mov     esi, ds:dword_419220
.text:00406F81                 mov     dword ptr [edi+18h], 0
.text:00406F88                 test    esi, esi
.text:00406F8A                 jz      loc_40A1C1
.text:00406F90
.text:00406F90 loc_406F90:                             ; CODE XREF: sub_406ED0+3351↓j
.text:00406F90                 mov     ebx, [esp+97Ch+arg_C]
.text:00406F97                 mov     edx, [ebx+4]
.text:00406F9A                 test    edx, edx
.text:00406F9C                 jnz     loc_40A1B2
.text:00406FA2                 mov     eax, [ebx]
.text:00406FA4                 test    eax, eax
.text:00406FA6                 jz      loc_40A198
.text:00406FAC                 mov     [esp+97Ch+var_978], 20h ; ' ' ; Size
.text:00406FB4                 mov     [esp+97Ch+Size], eax ; Block
.text:00406FB7                 call    realloc
.text:00406FBC                 mov     [ebx], eax
.text:00406FBE
.text:00406FBE loc_406FBE:                             ; CODE XREF: sub_406ED0+32DD↓j
.text:00406FBE                 mov     esi, [esp+97Ch+arg_C]
.text:00406FC5                 mov     edi, [esi]
.text:00406FC7                 test    edi, edi
.text:00406FC9                 jz      loc_40A187
.text:00406FCF                 mov     eax, [esp+97Ch+arg_C]
.text:00406FD6                 mov     dword ptr [eax+4], 20h ; ' '
.text:00406FDD
.text:00406FDD loc_406FDD:                             ; CODE XREF: sub_406ED0+32EC↓j
.text:00406FDD                 mov     [esp+97Ch+var_950], edi
.text:00406FE1                 mov     [esp+97Ch+var_904], edi
.text:00406FE5                 mov     edi, [esp+97Ch+var_8D0]
.text:00406FEC                 cmp     edi, [esp+97Ch+var_8F4]
.text:00406FF3                 jz      loc_407340
.text:00406FF9
.text:00406FF9 loc_406FF9:                             ; CODE XREF: sub_406ED0+43D↓j
.text:00406FF9                 movzx   ebx, byte ptr [edi]
.text:00406FFC                 inc     edi
.text:00406FFD                 mov     edx, [esp+97Ch+var_8F8]
.text:00407004                 mov     [esp+97Ch+var_8D0], edi
.text:0040700B                 test    edx, edx
.text:0040700D                 mov     [esp+97Ch+var_8EC], bl
.text:00407014                 jz      short loc_40702B
.text:00407016                 mov     edi, [esp+97Ch+var_8F8]
.text:0040701D                 movzx   ecx, bl
.text:00407020                 movzx   ebx, byte ptr [ecx+edi]
.text:00407024                 mov     [esp+97Ch+var_8EC], bl
.text:0040702B
.text:0040702B loc_40702B:                             ; CODE XREF: sub_406ED0+144↑j
.text:0040702B                 movzx   eax, [esp+97Ch+var_8EC]
.text:00407033                 sub     eax, 0Ah        ; switch 115 cases
.text:00407036                 cmp     eax, 72h
.text:00407039                 ja      def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040703F                 jmp     ds:jpt_40703F[eax*4] ; switch jump
.text:0040703F ; ---------------------------------------------------------------------------
.text:00407046                 align 4
.text:00407048 jpt_40703F      dd offset loc_407735, offset def_40703F, offset def_40703F
.text:00407048                                         ; DATA XREF: sub_406ED0+16F↑r
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F ; jump table for switch statement
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset loc_40796D
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset loc_407A7C, offset loc_407C66, offset loc_407F30
.text:00407048                 dd offset loc_4085A4, offset def_40703F, offset def_40703F
.text:00407048                 dd offset loc_4084C0, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset loc_4085A4
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset loc_4085BA, offset loc_409146, offset def_40703F
.text:00407048                 dd offset loc_407214, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset def_40703F
.text:00407048                 dd offset def_40703F, offset def_40703F, offset loc_40A154
.text:00407048                 dd offset loc_40A172
.text:00407214 ; ---------------------------------------------------------------------------
.text:00407214
.text:00407214 loc_407214:                             ; CODE XREF: sub_406ED0+16F↑j
.text:00407214                                         ; DATA XREF: sub_406ED0:jpt_40703F↑o
.text:00407214                 mov     esi, [esp+97Ch+arg_0] ; jumptable 0040703F case 94
.text:0040721B                 mov     edx, [esp+97Ch+var_8D0]
.text:00407222                 inc     esi
.text:00407223                 cmp     edx, esi
.text:00407225                 jz      short loc_407235
.text:00407227                 test    byte ptr [esp+97Ch+arg_8], 8
.text:0040722F                 jz      loc_40747D
.text:00407235
.text:00407235 loc_407235:                             ; CODE XREF: sub_406ED0+355↑j
.text:00407235                                         ; sub_406ED0+3D7↓j ...
.text:00407235                 mov     eax, [esp+97Ch+arg_C]
.text:0040723C                 mov     ebp, [esp+97Ch+var_950]
.text:00407240                 mov     edi, [eax]
.text:00407242                 mov     edx, [eax+4]
.text:00407245                 sub     ebp, edi
.text:00407247                 inc     ebp
.text:00407248                 cmp     ebp, edx
.text:0040724A                 jbe     loc_4072F3
.text:00407250                 cmp     edx, 10000h
.text:00407256                 mov     ebp, 0Fh
.text:0040725B                 jz      loc_4072E6
.text:00407261                 lea     ebx, [edx+edx]
.text:00407264                 mov     edx, [esp+97Ch+arg_C]
.text:0040726B                 cmp     ebx, 10000h
.text:00407271                 mov     [edx+4], ebx
.text:00407274                 jbe     short loc_40727D
.text:00407276                 mov     dword ptr [edx+4], 10000h
.text:0040727D
.text:0040727D loc_40727D:                             ; CODE XREF: sub_406ED0+3A4↑j
.text:0040727D                 mov     ebp, [esp+97Ch+arg_C]
.text:00407284                 mov     esi, [ebp+4]
.text:00407287                 mov     ebp, 0Ch
.text:0040728C                 mov     [esp+97Ch+Size], edi ; Block
.text:0040728F                 mov     [esp+97Ch+var_978], esi ; Size
.text:00407293                 call    realloc
.text:00407298                 mov     edx, [esp+97Ch+arg_C]
.text:0040729F                 test    eax, eax
.text:004072A1                 mov     [edx], eax
.text:004072A3                 jz      short loc_4072E6
.text:004072A5                 cmp     edi, eax
.text:004072A7                 jz      short loc_407235
.text:004072A9                 mov     ecx, [esp+97Ch+var_908]
.text:004072AD                 sub     eax, edi
.text:004072AF                 add     [esp+97Ch+var_950], eax
.text:004072B3                 add     [esp+97Ch+var_904], eax
.text:004072B7                 test    ecx, ecx
.text:004072B9                 jz      short loc_4072BF
.text:004072BB                 add     [esp+97Ch+var_908], eax
.text:004072BF
.text:004072BF loc_4072BF:                             ; CODE XREF: sub_406ED0+3E9↑j
.text:004072BF                 mov     ebx, [esp+97Ch+var_900]
.text:004072C3                 test    ebx, ebx
.text:004072C5                 jz      short loc_4072CB
.text:004072C7                 add     [esp+97Ch+var_900], eax
.text:004072CB
.text:004072CB loc_4072CB:                             ; CODE XREF: sub_406ED0+3F5↑j
.text:004072CB                 mov     edi, [esp+97Ch+var_8FC]
.text:004072D2                 test    edi, edi
.text:004072D4                 jz      loc_407235
.text:004072DA                 add     [esp+97Ch+var_8FC], eax
.text:004072E1                 jmp     loc_407235
.text:004072E6 ; ---------------------------------------------------------------------------
.text:004072E6
.text:004072E6 loc_4072E6:                             ; CODE XREF: sub_406ED0+74↑j
.text:004072E6                                         ; sub_406ED0+38B↑j ...
.text:004072E6                 add     esp, 96Ch
.text:004072EC                 mov     eax, ebp
.text:004072EE                 pop     ebx
.text:004072EF                 pop     esi
.text:004072F0                 pop     edi
.text:004072F1                 pop     ebp
.text:004072F2                 retn
.text:004072F3 ; ---------------------------------------------------------------------------
.text:004072F3
.text:004072F3 loc_4072F3:                             ; CODE XREF: sub_406ED0+37A↑j
.text:004072F3                 mov     edi, [esp+97Ch+var_950]
.text:004072F7                 mov     byte ptr [edi], 9
.text:004072FA
.text:004072FA loc_4072FA:                             ; CODE XREF: sub_406ED0+16CF↓j
.text:004072FA                                         ; sub_406ED0+2518↓j ...
.text:004072FA                 inc     edi
.text:004072FB
.text:004072FB loc_4072FB:                             ; CODE XREF: sub_406ED0+1496↓j
.text:004072FB                 mov     [esp+97Ch+var_950], edi
.text:004072FF
.text:004072FF loc_4072FF:                             ; CODE XREF: sub_406ED0+7DA↓j
.text:004072FF                                         ; sub_406ED0+A98↓j ...
.text:004072FF                 mov     edi, [esp+97Ch+var_8D0]
.text:00407306                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040730D                 jnz     loc_406FF9
.text:00407313                 mov     ebx, [esp+97Ch+var_908]
.text:00407317                 test    ebx, ebx
.text:00407319                 jz      short loc_407340
.text:0040731B                 mov     [esp+97Ch+Size], 0Eh
.text:00407322                 mov     ebp, [esp+97Ch+var_950]
.text:00407326                 mov     edx, [esp+97Ch+var_908]
.text:0040732A                 mov     esi, [esp+97Ch+var_908]
.text:0040732E                 sub     ebp, edx
.text:00407330                 sub     ebp, 3
.text:00407333                 mov     [esp+97Ch+var_974], ebp
.text:00407337                 mov     [esp+97Ch+var_978], esi
.text:0040733B                 call    sub_403CA0
.text:00407340
.text:00407340 loc_407340:                             ; CODE XREF: sub_406ED0+123↑j
.text:00407340                                         ; sub_406ED0+449↑j
.text:00407340                 mov     eax, [esp+97Ch+var_24]
.text:00407347                 test    eax, eax
.text:00407349                 jnz     loc_407464
.text:0040734F                 test    [esp+97Ch+arg_8], 40000h
.text:0040735A                 jz      loc_407433
.text:00407360                 mov     ecx, [esp+97Ch+arg_C]
.text:00407367                 mov     ebp, [esp+97Ch+var_950]
.text:0040736B                 mov     ebx, [ecx]
.text:0040736D                 mov     edx, [ecx+4]
.text:00407370                 sub     ebp, ebx
.text:00407372                 mov     edi, ebx
.text:00407374                 inc     ebp
.text:00407375                 cmp     ebp, edx
.text:00407377                 jbe     loc_407427
.text:0040737D
.text:0040737D loc_40737D:                             ; CODE XREF: sub_406ED0+551↓j
.text:0040737D                 cmp     edx, 10000h
.text:00407383                 mov     ebp, 0Fh
.text:00407388                 jz      loc_4072E6
.text:0040738E                 mov     esi, [esp+97Ch+arg_C]
.text:00407395                 lea     ebp, [edx+edx]
.text:00407398                 cmp     ebp, 10000h
.text:0040739E                 mov     [esi+4], ebp
.text:004073A1                 jbe     short loc_4073AA
.text:004073A3                 mov     dword ptr [esi+4], 10000h
.text:004073AA
.text:004073AA loc_4073AA:                             ; CODE XREF: sub_406ED0+4D1↑j
.text:004073AA                 mov     eax, [esp+97Ch+arg_C]
.text:004073B1                 mov     ebp, 0Ch
.text:004073B6                 mov     esi, [eax+4]
.text:004073B9                 mov     [esp+97Ch+Size], edi ; Block
.text:004073BC                 mov     [esp+97Ch+var_978], esi ; Size
.text:004073C0                 call    realloc
.text:004073C5                 mov     edx, [esp+97Ch+arg_C]
.text:004073CC                 test    eax, eax
.text:004073CE                 mov     [edx], eax
.text:004073D0                 jz      loc_4072E6
.text:004073D6                 cmp     ebx, eax
.text:004073D8                 jz      short loc_40740A
.text:004073DA                 mov     edi, [esp+97Ch+var_908]
.text:004073DE                 sub     eax, ebx
.text:004073E0                 add     [esp+97Ch+var_950], eax
.text:004073E4                 test    edi, edi
.text:004073E6                 jz      short loc_4073EC
.text:004073E8                 add     [esp+97Ch+var_908], eax
.text:004073EC
.text:004073EC loc_4073EC:                             ; CODE XREF: sub_406ED0+516↑j
.text:004073EC                 mov     ebx, [esp+97Ch+var_900]
.text:004073F0                 test    ebx, ebx
.text:004073F2                 jz      short loc_4073F8
.text:004073F4                 add     [esp+97Ch+var_900], eax
.text:004073F8
.text:004073F8 loc_4073F8:                             ; CODE XREF: sub_406ED0+522↑j
.text:004073F8                 mov     ecx, [esp+97Ch+var_8FC]
.text:004073FF                 test    ecx, ecx
.text:00407401                 jz      short loc_40740A
.text:00407403                 add     [esp+97Ch+var_8FC], eax
.text:0040740A
.text:0040740A loc_40740A:                             ; CODE XREF: sub_406ED0+508↑j
.text:0040740A                                         ; sub_406ED0+531↑j
.text:0040740A                 mov     eax, [esp+97Ch+arg_C]
.text:00407411                 mov     ebp, [esp+97Ch+var_950]
.text:00407415                 mov     ebx, [eax]
.text:00407417                 mov     edx, [eax+4]
.text:0040741A                 sub     ebp, ebx
.text:0040741C                 mov     edi, ebx
.text:0040741E                 inc     ebp
.text:0040741F                 cmp     ebp, edx
.text:00407421                 ja      loc_40737D
.text:00407427
.text:00407427 loc_407427:                             ; CODE XREF: sub_406ED0+4A7↑j
.text:00407427                 mov     edx, [esp+97Ch+var_950]
.text:0040742B                 mov     byte ptr [edx], 1
.text:0040742E                 inc     edx
.text:0040742F                 mov     [esp+97Ch+var_950], edx
.text:00407433
.text:00407433 loc_407433:                             ; CODE XREF: sub_406ED0+48A↑j
.text:00407433                 mov     ebp, [esp+97Ch+Block]
.text:0040743A                 mov     [esp+97Ch+Size], ebp ; Block
.text:0040743D                 xor     ebp, ebp
.text:0040743F                 call    free
.text:00407444                 mov     ecx, [esp+97Ch+arg_C]
.text:0040744B                 mov     esi, [esp+97Ch+arg_C]
.text:00407452                 mov     ebx, [ecx]
.text:00407454                 sub     [esp+97Ch+var_950], ebx
.text:00407458                 mov     edi, [esp+97Ch+var_950]
.text:0040745C                 mov     [esi+8], edi
.text:0040745F                 jmp     loc_4072E6
.text:00407464 ; ---------------------------------------------------------------------------
.text:00407464
.text:00407464 loc_407464:                             ; CODE XREF: sub_406ED0+479↑j
.text:00407464                 mov     edi, [esp+97Ch+Block]
.text:0040746B                 mov     ebp, 8
.text:00407470
.text:00407470 loc_407470:                             ; CODE XREF: sub_406ED0+15BC↓j
.text:00407470                                         ; sub_406ED0+32C3↓j
.text:00407470                 mov     [esp+97Ch+Size], edi ; Block
.text:00407473
.text:00407473 loc_407473:                             ; CODE XREF: sub_406ED0+EDF↓j
.text:00407473                                         ; sub_406ED0+1C4C↓j ...
.text:00407473                 call    free
.text:00407478                 jmp     loc_4072E6
.text:0040747D ; ---------------------------------------------------------------------------
.text:0040747D
.text:0040747D loc_40747D:                             ; CODE XREF: sub_406ED0+35F↑j
.text:0040747D                 mov     [esp+97Ch+var_978], edx
.text:00407481                 mov     eax, [esp+97Ch+arg_8]
.text:00407488                 mov     ebp, [esp+97Ch+arg_0]
.text:0040748F                 mov     [esp+97Ch+var_974], eax
.text:00407493                 mov     [esp+97Ch+Size], ebp
.text:00407496                 call    sub_403D80
.text:0040749B                 test    al, al
.text:0040749D                 jnz     loc_407235
.text:004074A3
.text:004074A3 def_40703F:                             ; CODE XREF: sub_406ED0+169↑j
.text:004074A3                                         ; sub_406ED0+16F↑j ...
.text:004074A3                 mov     edx, [esp+97Ch+var_8FC] ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004074AA                 test    edx, edx
.text:004074AC                 jz      short loc_4074C9
.text:004074AE                 mov     eax, [esp+97Ch+var_8FC]
.text:004074B5                 movzx   edx, byte ptr [eax]
.text:004074B8                 movzx   ebx, dl
.text:004074BB                 lea     ebp, [ebx+eax+1]
.text:004074BF                 cmp     ebp, [esp+97Ch+var_950]
.text:004074C3                 jz      loc_4076AF
.text:004074C9
.text:004074C9 loc_4074C9:                             ; CODE XREF: sub_406ED0+5DC↑j
.text:004074C9                                         ; sub_406ED0+7E1↓j ...
.text:004074C9                 mov     edi, [esp+97Ch+var_950]
.text:004074CD                 mov     ebp, [esp+97Ch+arg_C]
.text:004074D4                 mov     ecx, [esp+97Ch+var_950]
.text:004074D8                 mov     [esp+97Ch+var_900], edi
.text:004074DC                 mov     edi, [ebp+0]
.text:004074DF                 mov     edx, [ebp+4]
.text:004074E2                 sub     ecx, edi
.text:004074E4                 mov     ebx, edi
.text:004074E6                 add     ecx, 2
.text:004074E9                 cmp     ecx, edx
.text:004074EB                 jbe     loc_4075A8
.text:004074F1
.text:004074F1 loc_4074F1:                             ; CODE XREF: sub_406ED0+6D2↓j
.text:004074F1                 cmp     edx, 10000h
.text:004074F7                 mov     ebp, 0Fh
.text:004074FC                 jz      loc_4072E6
.text:00407502                 lea     esi, [edx+edx]
.text:00407505                 mov     edx, [esp+97Ch+arg_C]
.text:0040750C                 cmp     esi, 10000h
.text:00407512                 mov     [edx+4], esi
.text:00407515                 jbe     short loc_40751E
.text:00407517                 mov     dword ptr [edx+4], 10000h
.text:0040751E
.text:0040751E loc_40751E:                             ; CODE XREF: sub_406ED0+645↑j
.text:0040751E                 mov     eax, [esp+97Ch+arg_C]
.text:00407525                 mov     ebp, [eax+4]
.text:00407528                 mov     [esp+97Ch+Size], edi ; Block
.text:0040752B                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040752F                 mov     ebp, 0Ch
.text:00407534                 call    realloc
.text:00407539                 mov     edx, [esp+97Ch+arg_C]
.text:00407540                 test    eax, eax
.text:00407542                 mov     [edx], eax
.text:00407544                 jz      loc_4072E6
.text:0040754A                 cmp     ebx, eax
.text:0040754C                 jz      short loc_407582
.text:0040754E                 sub     eax, ebx
.text:00407550                 mov     ebx, [esp+97Ch+var_908]
.text:00407554                 add     [esp+97Ch+var_950], eax
.text:00407558                 add     [esp+97Ch+var_904], eax
.text:0040755C                 test    ebx, ebx
.text:0040755E                 jz      short loc_407564
.text:00407560                 add     [esp+97Ch+var_908], eax
.text:00407564
.text:00407564 loc_407564:                             ; CODE XREF: sub_406ED0+68E↑j
.text:00407564                 mov     ecx, [esp+97Ch+var_900]
.text:00407568                 test    ecx, ecx
.text:0040756A                 jz      short loc_407570
.text:0040756C                 add     [esp+97Ch+var_900], eax
.text:00407570
.text:00407570 loc_407570:                             ; CODE XREF: sub_406ED0+69A↑j
.text:00407570                 mov     edi, [esp+97Ch+var_8FC]
.text:00407577                 test    edi, edi
.text:00407579                 jz      short loc_407582
.text:0040757B                 add     [esp+97Ch+var_8FC], eax
.text:00407582
.text:00407582 loc_407582:                             ; CODE XREF: sub_406ED0+67C↑j
.text:00407582                                         ; sub_406ED0+6A9↑j
.text:00407582                 mov     edx, [esp+97Ch+arg_C]
.text:00407589                 mov     ebp, [esp+97Ch+arg_C]
.text:00407590                 mov     esi, [esp+97Ch+var_950]
.text:00407594                 mov     edi, [edx]
.text:00407596                 mov     edx, [ebp+4]
.text:00407599                 sub     esi, edi
.text:0040759B                 add     esi, 2
.text:0040759E                 mov     ebx, edi
.text:004075A0                 cmp     esi, edx
.text:004075A2                 ja      loc_4074F1
.text:004075A8
.text:004075A8 loc_4075A8:                             ; CODE XREF: sub_406ED0+61B↑j
.text:004075A8                 mov     eax, [esp+97Ch+var_950]
.text:004075AC                 mov     byte ptr [eax], 2
.text:004075AF                 inc     eax
.text:004075B0                 mov     byte ptr [eax], 0
.text:004075B3                 mov     ecx, [esp+97Ch+arg_C]
.text:004075BA                 inc     eax
.text:004075BB                 mov     [esp+97Ch+var_950], eax
.text:004075BF                 dec     eax
.text:004075C0                 mov     edi, [ecx]
.text:004075C2                 mov     [esp+97Ch+var_8FC], eax
.text:004075C9                 mov     edx, [ecx+4]
.text:004075CC                 mov     eax, [esp+97Ch+var_950]
.text:004075D0                 mov     ebx, edi
.text:004075D2                 sub     eax, edi
.text:004075D4
.text:004075D4 loc_4075D4:                             ; CODE XREF: sub_406ED0+7B9↓j
.text:004075D4                 inc     eax
.text:004075D5                 cmp     eax, edx
.text:004075D7                 jbe     loc_40768E
.text:004075DD                 cmp     edx, 10000h
.text:004075E3                 mov     ebp, 0Fh
.text:004075E8                 jz      loc_4072E6
.text:004075EE                 lea     esi, [edx+edx]
.text:004075F1                 mov     edx, [esp+97Ch+arg_C]
.text:004075F8                 cmp     esi, 10000h
.text:004075FE                 mov     [edx+4], esi
.text:00407601                 jbe     short loc_40760A
.text:00407603                 mov     dword ptr [edx+4], 10000h
.text:0040760A
.text:0040760A loc_40760A:                             ; CODE XREF: sub_406ED0+731↑j
.text:0040760A                 mov     edx, [esp+97Ch+arg_C]
.text:00407611                 mov     ebp, [edx+4]
.text:00407614                 mov     [esp+97Ch+Size], edi ; Block
.text:00407617                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040761B                 mov     ebp, 0Ch
.text:00407620                 call    realloc
.text:00407625                 mov     edi, [esp+97Ch+arg_C]
.text:0040762C                 test    eax, eax
.text:0040762E                 mov     [edi], eax
.text:00407630                 jz      loc_4072E6
.text:00407636                 cmp     ebx, eax
.text:00407638                 jz      short loc_40766E
.text:0040763A                 mov     ecx, [esp+97Ch+var_908]
.text:0040763E                 sub     eax, ebx
.text:00407640                 add     [esp+97Ch+var_950], eax
.text:00407644                 add     [esp+97Ch+var_904], eax
.text:00407648                 test    ecx, ecx
.text:0040764A                 jz      short loc_407650
.text:0040764C                 add     [esp+97Ch+var_908], eax
.text:00407650
.text:00407650 loc_407650:                             ; CODE XREF: sub_406ED0+77A↑j
.text:00407650                 mov     ebx, [esp+97Ch+var_900]
.text:00407654                 test    ebx, ebx
.text:00407656                 jz      short loc_40765C
.text:00407658                 add     [esp+97Ch+var_900], eax
.text:0040765C
.text:0040765C loc_40765C:                             ; CODE XREF: sub_406ED0+786↑j
.text:0040765C                 mov     esi, [esp+97Ch+var_8FC]
.text:00407663                 test    esi, esi
.text:00407665                 jz      short loc_40766E
.text:00407667                 add     [esp+97Ch+var_8FC], eax
.text:0040766E
.text:0040766E loc_40766E:                             ; CODE XREF: sub_406ED0+768↑j
.text:0040766E                                         ; sub_406ED0+795↑j ...
.text:0040766E                 mov     edx, [esp+97Ch+arg_C]
.text:00407675                 mov     ebp, [esp+97Ch+arg_C]
.text:0040767C                 mov     eax, [esp+97Ch+var_950]
.text:00407680                 mov     edi, [edx]
.text:00407682                 mov     edx, [ebp+4]
.text:00407685                 sub     eax, edi
.text:00407687                 mov     ebx, edi
.text:00407689                 jmp     loc_4075D4
.text:0040768E ; ---------------------------------------------------------------------------
.text:0040768E
.text:0040768E loc_40768E:                             ; CODE XREF: sub_406ED0+707↑j
.text:0040768E                 movzx   ecx, [esp+97Ch+var_8EC]
.text:00407696                 mov     edi, [esp+97Ch+var_950]
.text:0040769A                 mov     [edi], cl
.text:0040769C                 mov     eax, [esp+97Ch+var_8FC]
.text:004076A3                 inc     edi
.text:004076A4                 mov     [esp+97Ch+var_950], edi
.text:004076A8                 inc     byte ptr [eax]
.text:004076AA                 jmp     loc_4072FF
.text:004076AF ; ---------------------------------------------------------------------------
.text:004076AF
.text:004076AF loc_4076AF:                             ; CODE XREF: sub_406ED0+5F3↑j
.text:004076AF                 inc     dl
.text:004076B1                 jz      loc_4074C9
.text:004076B7                 mov     edi, [esp+97Ch+var_8D0]
.text:004076BE                 mov     edx, edi
.text:004076C0                 movzx   eax, byte ptr [edi]
.text:004076C3                 cmp     al, 2Ah ; '*'
.text:004076C5                 jz      loc_4074C9
.text:004076CB                 cmp     al, 5Eh ; '^'
.text:004076CD                 jz      loc_4074C9
.text:004076D3                 test    byte ptr [esp+97Ch+arg_8], 2
.text:004076DB                 jz      short loc_407724
.text:004076DD                 cmp     al, 5Ch ; '\'
.text:004076DF                 jz      short loc_407720
.text:004076E1
.text:004076E1 loc_4076E1:                             ; CODE XREF: sub_406ED0+85E↓j
.text:004076E1                 test    [esp+97Ch+arg_8], 200h
.text:004076EC                 jz      short loc_40766E
.text:004076EE                 test    [esp+97Ch+arg_8], 1000h
.text:004076F9                 jz      short loc_407710
.text:004076FB                 cmp     byte ptr [edx], 7Bh ; '{'
.text:004076FE
.text:004076FE loc_4076FE:                             ; CODE XREF: sub_406ED0+84D↓j
.text:004076FE                 jnz     loc_40766E
.text:00407704                 jmp     loc_4074C9
.text:00407704 ; ---------------------------------------------------------------------------
.text:00407709                 align 10h
.text:00407710
.text:00407710 loc_407710:                             ; CODE XREF: sub_406ED0+829↑j
.text:00407710                 cmp     byte ptr [edx], 5Ch ; '\'
.text:00407713                 jnz     loc_40766E
.text:00407719                 cmp     byte ptr [edx+1], 7Bh ; '{'
.text:0040771D                 jmp     short loc_4076FE
.text:0040771D ; ---------------------------------------------------------------------------
.text:0040771F                 align 10h
.text:00407720
.text:00407720 loc_407720:                             ; CODE XREF: sub_406ED0+80F↑j
.text:00407720                 movzx   eax, byte ptr [edi+1]
.text:00407724
.text:00407724 loc_407724:                             ; CODE XREF: sub_406ED0+80B↑j
.text:00407724                 cmp     al, 2Bh ; '+'
.text:00407726                 jz      loc_4074C9
.text:0040772C                 cmp     al, 3Fh ; '?'
.text:0040772E                 jnz     short loc_4076E1
.text:00407730                 jmp     loc_4074C9
.text:00407735 ; ---------------------------------------------------------------------------
.text:00407735
.text:00407735 loc_407735:                             ; CODE XREF: sub_406ED0+16F↑j
.text:00407735                                         ; DATA XREF: sub_406ED0:jpt_40703F↑o
.text:00407735                 test    [esp+97Ch+arg_8], 800h ; jumptable 0040703F case 10
.text:00407740
.text:00407740 loc_407740:                             ; CODE XREF: sub_406ED0+32B2↓j
.text:00407740                 jz      def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00407746
.text:00407746 loc_407746:                             ; CODE XREF: sub_406ED0+3279↓j
.text:00407746                 test    [esp+97Ch+arg_8], 400h
.text:00407751                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00407757
.text:00407757 loc_407757:                             ; CODE XREF: sub_406ED0+8FF↓j
.text:00407757                                         ; sub_406ED0+92C↓j ...
.text:00407757                 mov     eax, [esp+97Ch+arg_C]
.text:0040775E                 mov     ebp, [esp+97Ch+var_950]
.text:00407762                 mov     edi, [eax]
.text:00407764                 mov     edx, [eax+4]
.text:00407767                 sub     ebp, edi
.text:00407769                 add     ebp, 3
.text:0040776C                 cmp     ebp, edx
.text:0040776E                 jbe     loc_40780E
.text:00407774                 cmp     edx, 10000h
.text:0040777A                 mov     ebp, 0Fh
.text:0040777F                 jz      loc_4072E6
.text:00407785                 lea     ebx, [edx+edx]
.text:00407788                 mov     edx, [esp+97Ch+arg_C]
.text:0040778F                 cmp     ebx, 10000h
.text:00407795                 mov     [edx+4], ebx
.text:00407798                 jbe     short loc_4077A1
.text:0040779A                 mov     dword ptr [edx+4], 10000h
.text:004077A1
.text:004077A1 loc_4077A1:                             ; CODE XREF: sub_406ED0+8C8↑j
.text:004077A1                 mov     eax, [esp+97Ch+arg_C]
.text:004077A8                 mov     ebp, [eax+4]
.text:004077AB                 mov     [esp+97Ch+Size], edi ; Block
.text:004077AE                 mov     [esp+97Ch+var_978], ebp ; Size
.text:004077B2                 mov     ebp, 0Ch
.text:004077B7                 call    realloc
.text:004077BC                 mov     esi, [esp+97Ch+arg_C]
.text:004077C3                 test    eax, eax
.text:004077C5                 mov     [esi], eax
.text:004077C7                 jz      loc_4072E6
.text:004077CD                 cmp     edi, eax
.text:004077CF                 jz      short loc_407757
.text:004077D1                 mov     ecx, [esp+97Ch+var_908]
.text:004077D5                 sub     eax, edi
.text:004077D7                 add     [esp+97Ch+var_950], eax
.text:004077DB                 add     [esp+97Ch+var_904], eax
.text:004077DF                 test    ecx, ecx
.text:004077E1                 jz      short loc_4077E7
.text:004077E3                 add     [esp+97Ch+var_908], eax
.text:004077E7
.text:004077E7 loc_4077E7:                             ; CODE XREF: sub_406ED0+911↑j
.text:004077E7                 mov     edx, [esp+97Ch+var_900]
.text:004077EB                 test    edx, edx
.text:004077ED                 jz      short loc_4077F3
.text:004077EF                 add     [esp+97Ch+var_900], eax
.text:004077F3
.text:004077F3 loc_4077F3:                             ; CODE XREF: sub_406ED0+91D↑j
.text:004077F3                 mov     ebx, [esp+97Ch+var_8FC]
.text:004077FA                 test    ebx, ebx
.text:004077FC                 jz      loc_407757
.text:00407802                 add     [esp+97Ch+var_8FC], eax
.text:00407809                 jmp     loc_407757
.text:0040780E ; ---------------------------------------------------------------------------
.text:0040780E
.text:0040780E loc_40780E:                             ; CODE XREF: sub_406ED0+89E↑j
.text:0040780E                 mov     [esp+97Ch+Size], 0Fh
.text:00407815                 mov     edi, [esp+97Ch+var_950]
.text:00407819                 mov     ebp, [esp+97Ch+var_904]
.text:0040781D                 mov     edx, [esp+97Ch+var_904]
.text:00407821                 mov     ebx, edi
.text:00407823                 sub     ebx, ebp
.text:00407825                 mov     [esp+97Ch+var_970], edi
.text:00407829                 add     ebx, 3
.text:0040782C                 add     edi, 3
.text:0040782F                 mov     [esp+97Ch+var_974], ebx
.text:00407833                 mov     [esp+97Ch+var_978], edx
.text:00407837                 call    sub_403CF0
.text:0040783C                 mov     [esp+97Ch+var_950], edi
.text:00407840                 mov     esi, [esp+97Ch+var_908]
.text:00407844                 xor     ecx, ecx
.text:00407846                 mov     [esp+97Ch+var_8FC], ecx
.text:0040784D                 test    esi, esi
.text:0040784F                 jz      short loc_407874
.text:00407851                 mov     [esp+97Ch+Size], 0Eh
.text:00407858                 mov     eax, [esp+97Ch+var_908]
.text:0040785C                 mov     esi, edi
.text:0040785E                 mov     edi, [esp+97Ch+var_908]
.text:00407862                 sub     esi, eax
.text:00407864                 sub     esi, 3
.text:00407867                 mov     [esp+97Ch+var_974], esi
.text:0040786B                 mov     [esp+97Ch+var_978], edi
.text:0040786F                 call    sub_403CA0
.text:00407874
.text:00407874 loc_407874:                             ; CODE XREF: sub_406ED0+97F↑j
.text:00407874                 mov     esi, [esp+97Ch+arg_C]
.text:0040787B                 mov     edx, [esp+97Ch+var_950]
.text:0040787F                 mov     ecx, [esp+97Ch+arg_C]
.text:00407886                 mov     edi, [esi]
.text:00407888                 mov     ebp, edx
.text:0040788A                 mov     [esp+97Ch+var_908], edx
.text:0040788E                 mov     edx, [ecx+4]
.text:00407891                 sub     ebp, edi
.text:00407893                 add     ebp, 3
.text:00407896                 mov     ebx, edi
.text:00407898                 cmp     ebp, edx
.text:0040789A                 jbe     loc_407953
.text:004078A0
.text:004078A0 loc_4078A0:                             ; CODE XREF: sub_406ED0+A7D↓j
.text:004078A0                 cmp     edx, 10000h
.text:004078A6                 mov     ebp, 0Fh
.text:004078AB                 jz      loc_4072E6
.text:004078B1                 lea     ebp, [edx+edx]
.text:004078B4                 mov     edx, [esp+97Ch+arg_C]
.text:004078BB                 cmp     ebp, 10000h
.text:004078C1                 mov     [edx+4], ebp
.text:004078C4                 jbe     short loc_4078CD
.text:004078C6                 mov     dword ptr [edx+4], 10000h
.text:004078CD
.text:004078CD loc_4078CD:                             ; CODE XREF: sub_406ED0+9F4↑j
.text:004078CD                 mov     eax, [esp+97Ch+arg_C]
.text:004078D4                 mov     ebp, 0Ch
.text:004078D9                 mov     edx, [eax+4]
.text:004078DC                 mov     [esp+97Ch+Size], edi ; Block
.text:004078DF                 mov     [esp+97Ch+var_978], edx ; Size
.text:004078E3                 call    realloc
.text:004078E8                 mov     edi, [esp+97Ch+arg_C]
.text:004078EF                 test    eax, eax
.text:004078F1                 mov     [edi], eax
.text:004078F3                 jz      loc_4072E6
.text:004078F9                 cmp     ebx, eax
.text:004078FB                 jz      short loc_40792D
.text:004078FD                 sub     eax, ebx
.text:004078FF                 mov     ebx, [esp+97Ch+var_908]
.text:00407903                 add     [esp+97Ch+var_950], eax
.text:00407907                 test    ebx, ebx
.text:00407909                 jz      short loc_40790F
.text:0040790B                 add     [esp+97Ch+var_908], eax
.text:0040790F
.text:0040790F loc_40790F:                             ; CODE XREF: sub_406ED0+A39↑j
.text:0040790F                 mov     ecx, [esp+97Ch+var_900]
.text:00407913                 test    ecx, ecx
.text:00407915                 jz      short loc_40791B
.text:00407917                 add     [esp+97Ch+var_900], eax
.text:0040791B
.text:0040791B loc_40791B:                             ; CODE XREF: sub_406ED0+A45↑j
.text:0040791B                 mov     ebp, [esp+97Ch+var_8FC]
.text:00407922                 test    ebp, ebp
.text:00407924                 jz      short loc_40792D
.text:00407926                 add     [esp+97Ch+var_8FC], eax
.text:0040792D
.text:0040792D loc_40792D:                             ; CODE XREF: sub_406ED0+A2B↑j
.text:0040792D                                         ; sub_406ED0+A54↑j
.text:0040792D                 mov     edx, [esp+97Ch+arg_C]
.text:00407934                 mov     eax, [esp+97Ch+arg_C]
.text:0040793B                 mov     esi, [esp+97Ch+var_950]
.text:0040793F                 mov     edi, [edx]
.text:00407941                 mov     edx, [eax+4]
.text:00407944                 sub     esi, edi
.text:00407946                 add     esi, 3
.text:00407949                 mov     ebx, edi
.text:0040794B                 cmp     esi, edx
.text:0040794D                 ja      loc_4078A0
.text:00407953
.text:00407953 loc_407953:                             ; CODE XREF: sub_406ED0+9CA↑j
.text:00407953                 add     [esp+97Ch+var_950], 3
.text:00407958                 mov     [esp+97Ch+var_900], 0
.text:00407960                 mov     edi, [esp+97Ch+var_950]
.text:00407964                 mov     [esp+97Ch+var_904], edi
.text:00407968                 jmp     loc_4072FF
.text:0040796D ; ---------------------------------------------------------------------------
.text:0040796D
.text:0040796D loc_40796D:                             ; CODE XREF: sub_406ED0+16F↑j
.text:0040796D                                         ; DATA XREF: sub_406ED0:jpt_40703F↑o
.text:0040796D                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 0040703F case 36
.text:00407974                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040797B                 jz      short loc_40798B
.text:0040797D                 test    byte ptr [esp+97Ch+arg_8], 8
.text:00407985                 jz      loc_407A51
.text:0040798B
.text:0040798B loc_40798B:                             ; CODE XREF: sub_406ED0+AAB↑j
.text:0040798B                                         ; sub_406ED0+B31↓j ...
.text:0040798B                 mov     ecx, [esp+97Ch+arg_C]
.text:00407992                 mov     eax, [esp+97Ch+arg_C]
.text:00407999                 mov     ebx, [esp+97Ch+var_950]
.text:0040799D                 mov     edi, [ecx]
.text:0040799F                 mov     edx, [eax+4]
.text:004079A2                 sub     ebx, edi
.text:004079A4                 inc     ebx
.text:004079A5                 cmp     ebx, edx
.text:004079A7                 jbe     loc_407A40
.text:004079AD                 cmp     edx, 10000h
.text:004079B3                 mov     ebp, 0Fh
.text:004079B8                 jz      loc_4072E6
.text:004079BE                 mov     ebx, [esp+97Ch+arg_C]
.text:004079C5                 lea     ecx, [edx+edx]
.text:004079C8                 cmp     ecx, 10000h
.text:004079CE                 mov     [ebx+4], ecx
.text:004079D1                 jbe     short loc_4079DA
.text:004079D3                 mov     dword ptr [ebx+4], 10000h
.text:004079DA
.text:004079DA loc_4079DA:                             ; CODE XREF: sub_406ED0+B01↑j
.text:004079DA                 mov     ebx, [esp+97Ch+arg_C]
.text:004079E1                 mov     ebp, [ebx+4]
.text:004079E4                 mov     [esp+97Ch+Size], edi ; Block
.text:004079E7                 mov     [esp+97Ch+var_978], ebp ; Size
.text:004079EB                 mov     ebp, 0Ch
.text:004079F0                 call    realloc
.text:004079F5                 mov     [ebx], eax
.text:004079F7                 test    eax, eax
.text:004079F9                 jz      loc_4072E6
.text:004079FF                 cmp     edi, eax
.text:00407A01                 jz      short loc_40798B
.text:00407A03                 sub     eax, edi
.text:00407A05                 mov     edi, [esp+97Ch+var_908]
.text:00407A09                 add     [esp+97Ch+var_950], eax
.text:00407A0D                 add     [esp+97Ch+var_904], eax
.text:00407A11                 test    edi, edi
.text:00407A13                 jz      short loc_407A19
.text:00407A15                 add     [esp+97Ch+var_908], eax
.text:00407A19
.text:00407A19 loc_407A19:                             ; CODE XREF: sub_406ED0+B43↑j
.text:00407A19                 mov     edx, [esp+97Ch+var_900]
.text:00407A1D                 test    edx, edx
.text:00407A1F                 jz      short loc_407A25
.text:00407A21                 add     [esp+97Ch+var_900], eax
.text:00407A25
.text:00407A25 loc_407A25:                             ; CODE XREF: sub_406ED0+B4F↑j
.text:00407A25                 mov     esi, [esp+97Ch+var_8FC]
.text:00407A2C                 test    esi, esi
.text:00407A2E                 jz      loc_40798B
.text:00407A34                 add     [esp+97Ch+var_8FC], eax
.text:00407A3B                 jmp     loc_40798B
.text:00407A40 ; ---------------------------------------------------------------------------
.text:00407A40
.text:00407A40 loc_407A40:                             ; CODE XREF: sub_406ED0+AD7↑j
.text:00407A40                 mov     ebx, [esp+97Ch+var_950]
.text:00407A44                 mov     byte ptr [ebx], 0Ah
.text:00407A47
.text:00407A47 loc_407A47:                             ; CODE XREF: sub_406ED0+1059↓j
.text:00407A47                 inc     ebx
.text:00407A48                 mov     [esp+97Ch+var_950], ebx
.text:00407A4C                 jmp     loc_4072FF
.text:00407A51 ; ---------------------------------------------------------------------------
.text:00407A51
.text:00407A51 loc_407A51:                             ; CODE XREF: sub_406ED0+AB5↑j
.text:00407A51                 mov     [esp+97Ch+Size], eax
.text:00407A54                 mov     esi, [esp+97Ch+arg_8]
.text:00407A5B                 mov     edx, [esp+97Ch+var_8F4]
.text:00407A62                 mov     [esp+97Ch+var_974], esi
.text:00407A66                 mov     [esp+97Ch+var_978], edx
.text:00407A6A                 call    sub_403DE0
.text:00407A6F                 test    al, al
.text:00407A71                 jnz     loc_40798B
.text:00407A77                 jmp     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00407A7C ; ---------------------------------------------------------------------------
.text:00407A7C
.text:00407A7C loc_407A7C:                             ; CODE XREF: sub_406ED0+16F↑j
.text:00407A7C                                         ; DATA XREF: sub_406ED0:jpt_40703F↑o
.text:00407A7C                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040703F case 40
.text:00407A87                 jz      def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00407A8D
.text:00407A8D loc_407A8D:                             ; CODE XREF: sub_406ED0+2417↓j
.text:00407A8D                 inc     [esp+97Ch+var_90C]
.text:00407A91                 mov     eax, [esp+97Ch+arg_C]
.text:00407A98                 inc     dword ptr [eax+18h]
.text:00407A9B                 mov     ecx, [esp+97Ch+var_24]
.text:00407AA2                 cmp     ecx, [esp+97Ch+var_28]
.text:00407AA9                 jz      loc_407C26
.text:00407AAF
.text:00407AAF loc_407AAF:                             ; CODE XREF: sub_406ED0+D91↓j
.text:00407AAF                 mov     edx, [esp+97Ch+arg_C]
.text:00407AB6                 lea     edi, [ecx+ecx*4]
.text:00407AB9                 xor     eax, eax
.text:00407ABB                 lea     ebp, ds:0[edi*4]
.text:00407AC2                 mov     ebx, [esp+97Ch+Block]
.text:00407AC9                 mov     edi, [edx]
.text:00407ACB                 sub     [esp+97Ch+var_904], edi
.text:00407ACF                 mov     edx, edi
.text:00407AD1                 mov     esi, [esp+97Ch+var_904]
.text:00407AD5                 mov     [ebx+ebp], esi
.text:00407AD8                 mov     esi, [esp+97Ch+var_908]
.text:00407ADC                 test    esi, esi
.text:00407ADE                 jz      short loc_407AE7
.text:00407AE0                 mov     eax, [esp+97Ch+var_908]
.text:00407AE4                 sub     eax, edi
.text:00407AE6                 inc     eax
.text:00407AE7
.text:00407AE7 loc_407AE7:                             ; CODE XREF: sub_406ED0+C0E↑j
.text:00407AE7                 mov     [ebx+ebp+4], eax
.text:00407AEB                 lea     esi, [ecx+ecx*4]
.text:00407AEE                 mov     ebp, [esp+97Ch+var_90C]
.text:00407AF2                 mov     ecx, [esp+97Ch+var_950]
.text:00407AF6                 shl     esi, 2
.text:00407AF9                 mov     [ebx+esi+10h], ebp
.text:00407AFD                 sub     ecx, edx
.text:00407AFF                 cmp     ebp, 0FFh
.text:00407B05                 mov     [ebx+esi+0Ch], ecx
.text:00407B09                 ja      loc_407BF9
.text:00407B0F                 mov     edx, [esp+97Ch+var_24]
.text:00407B16                 lea     esi, [ecx+2]
.text:00407B19                 mov     eax, [esp+97Ch+arg_C]
.text:00407B20                 lea     ebp, [edx+edx*4]
.text:00407B23                 lea     edx, [ecx+3]
.text:00407B26                 mov     [ebx+ebp*4+8], esi
.text:00407B2A                 mov     ecx, [eax+4]
.text:00407B2D                 cmp     edx, ecx
.text:00407B2F                 jbe     loc_407BE1
.text:00407B35
.text:00407B35 loc_407B35:                             ; CODE XREF: sub_406ED0+D0B↓j
.text:00407B35                 cmp     ecx, 10000h
.text:00407B3B                 mov     ebp, 0Fh
.text:00407B40                 jz      loc_4072E6
.text:00407B46                 mov     esi, [esp+97Ch+arg_C]
.text:00407B4D                 lea     ebx, [ecx+ecx]
.text:00407B50                 cmp     ebx, 10000h
.text:00407B56                 mov     [esi+4], ebx
.text:00407B59                 jbe     short loc_407B62
.text:00407B5B                 mov     dword ptr [esi+4], 10000h
.text:00407B62
.text:00407B62 loc_407B62:                             ; CODE XREF: sub_406ED0+C89↑j
.text:00407B62                 mov     eax, [esp+97Ch+arg_C]
.text:00407B69                 mov     ecx, [eax+4]
.text:00407B6C                 mov     [esp+97Ch+Size], edi ; Block
.text:00407B6F                 mov     [esp+97Ch+var_978], ecx ; Size
.text:00407B73                 call    realloc
.text:00407B78                 mov     ebp, [esp+97Ch+arg_C]
.text:00407B7F                 test    eax, eax
.text:00407B81                 mov     [ebp+0], eax
.text:00407B84                 mov     ebp, 0Ch
.text:00407B89                 jz      loc_4072E6
.text:00407B8F                 cmp     edi, eax
.text:00407B91                 jz      short loc_407BC3
.text:00407B93                 sub     eax, edi
.text:00407B95                 mov     edi, [esp+97Ch+var_908]
.text:00407B99                 add     [esp+97Ch+var_950], eax
.text:00407B9D                 test    edi, edi
.text:00407B9F                 jz      short loc_407BA5
.text:00407BA1                 add     [esp+97Ch+var_908], eax
.text:00407BA5
.text:00407BA5 loc_407BA5:                             ; CODE XREF: sub_406ED0+CCF↑j
.text:00407BA5                 mov     esi, [esp+97Ch+var_900]
.text:00407BA9                 test    esi, esi
.text:00407BAB                 jz      short loc_407BB1
.text:00407BAD                 add     [esp+97Ch+var_900], eax
.text:00407BB1
.text:00407BB1 loc_407BB1:                             ; CODE XREF: sub_406ED0+CDB↑j
.text:00407BB1                 mov     ebx, [esp+97Ch+var_8FC]
.text:00407BB8                 test    ebx, ebx
.text:00407BBA                 jz      short loc_407BC3
.text:00407BBC                 add     [esp+97Ch+var_8FC], eax
.text:00407BC3
.text:00407BC3 loc_407BC3:                             ; CODE XREF: sub_406ED0+CC1↑j
.text:00407BC3                                         ; sub_406ED0+CEA↑j
.text:00407BC3                 mov     ebp, [esp+97Ch+arg_C]
.text:00407BCA                 mov     edx, [esp+97Ch+var_950]
.text:00407BCE                 mov     edi, [ebp+0]
.text:00407BD1                 mov     ecx, [ebp+4]
.text:00407BD4                 sub     edx, edi
.text:00407BD6                 add     edx, 3
.text:00407BD9                 cmp     edx, ecx
.text:00407BDB                 ja      loc_407B35
.text:00407BE1
.text:00407BE1 loc_407BE1:                             ; CODE XREF: sub_406ED0+C5F↑j
.text:00407BE1                 mov     ecx, [esp+97Ch+var_950]
.text:00407BE5                 mov     byte ptr [ecx], 6
.text:00407BE8                 inc     ecx
.text:00407BE9                 movzx   ebx, byte ptr [esp+97Ch+var_90C]
.text:00407BEE                 mov     [ecx], bl
.text:00407BF0                 inc     ecx
.text:00407BF1                 mov     byte ptr [ecx], 0
.text:00407BF4                 inc     ecx
.text:00407BF5                 mov     [esp+97Ch+var_950], ecx
.text:00407BF9
.text:00407BF9 loc_407BF9:                             ; CODE XREF: sub_406ED0+C39↑j
.text:00407BF9                 inc     [esp+97Ch+var_24]
.text:00407C00                 mov     eax, [esp+97Ch+var_950]
.text:00407C04                 mov     [esp+97Ch+var_908], 0
.text:00407C0C                 mov     [esp+97Ch+var_900], 0
.text:00407C14                 mov     [esp+97Ch+var_904], eax
.text:00407C18
.text:00407C18 loc_407C18:                             ; CODE XREF: sub_406ED0+2F9A↓j
.text:00407C18                                         ; sub_406ED0+3107↓j ...
.text:00407C18                 xor     eax, eax
.text:00407C1A                 mov     [esp+97Ch+var_8FC], eax
.text:00407C21                 jmp     loc_4072FF
.text:00407C26 ; ---------------------------------------------------------------------------
.text:00407C26
.text:00407C26 loc_407C26:                             ; CODE XREF: sub_406ED0+BD9↑j
.text:00407C26                 mov     ebp, [esp+97Ch+Block]
.text:00407C2D                 lea     edi, [ecx+ecx*4]
.text:00407C30                 shl     edi, 3
.text:00407C33                 mov     [esp+97Ch+var_978], edi ; Size
.text:00407C37                 mov     [esp+97Ch+Size], ebp ; Block
.text:00407C3A                 mov     ebp, 0Ch
.text:00407C3F                 call    realloc
.text:00407C44                 mov     [esp+97Ch+Block], eax
.text:00407C4B                 test    eax, eax
.text:00407C4D                 jz      loc_4072E6
.text:00407C53                 shl     [esp+97Ch+var_28], 1
.text:00407C5A                 mov     ecx, [esp+97Ch+var_24]
.text:00407C61                 jmp     loc_407AAF
.text:00407C66 ; ---------------------------------------------------------------------------
.text:00407C66
.text:00407C66 loc_407C66:                             ; CODE XREF: sub_406ED0+16F↑j
.text:00407C66                                         ; DATA XREF: sub_406ED0:jpt_40703F↑o
.text:00407C66                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040703F case 41
.text:00407C71                 jz      def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00407C77
.text:00407C77 loc_407C77:                             ; CODE XREF: sub_406ED0+2537↓j
.text:00407C77                 mov     esi, [esp+97Ch+var_908]
.text:00407C7B                 test    esi, esi
.text:00407C7D                 jz      loc_407D84
.text:00407C83                 mov     eax, [esp+97Ch+arg_C]
.text:00407C8A                 mov     ebp, [esp+97Ch+var_950]
.text:00407C8E                 mov     edi, [eax]
.text:00407C90                 mov     edx, [eax+4]
.text:00407C93                 sub     ebp, edi
.text:00407C95                 mov     ebx, edi
.text:00407C97                 inc     ebp
.text:00407C98                 cmp     ebp, edx
.text:00407C9A                 jbe     loc_407D55
.text:00407CA0
.text:00407CA0 loc_407CA0:                             ; CODE XREF: sub_406ED0+E7F↓j
.text:00407CA0                 cmp     edx, 10000h
.text:00407CA6                 mov     ebp, 0Fh
.text:00407CAB                 jz      loc_4072E6
.text:00407CB1                 mov     esi, [esp+97Ch+arg_C]
.text:00407CB8                 lea     ecx, [edx+edx]
.text:00407CBB                 cmp     ecx, 10000h
.text:00407CC1                 mov     [esi+4], ecx
.text:00407CC4                 jbe     short loc_407CCD
.text:00407CC6                 mov     dword ptr [esi+4], 10000h
.text:00407CCD
.text:00407CCD loc_407CCD:                             ; CODE XREF: sub_406ED0+DF4↑j
.text:00407CCD                 mov     ebp, [esp+97Ch+arg_C]
.text:00407CD4                 mov     esi, [ebp+4]
.text:00407CD7                 mov     ebp, 0Ch
.text:00407CDC                 mov     [esp+97Ch+Size], edi ; Block
.text:00407CDF                 mov     [esp+97Ch+var_978], esi ; Size
.text:00407CE3                 call    realloc
.text:00407CE8                 mov     edx, [esp+97Ch+arg_C]
.text:00407CEF                 test    eax, eax
.text:00407CF1                 mov     [edx], eax
.text:00407CF3                 jz      loc_4072E6
.text:00407CF9                 cmp     ebx, eax
.text:00407CFB                 jz      short loc_407D31
.text:00407CFD                 sub     eax, ebx
.text:00407CFF                 mov     ebx, [esp+97Ch+var_908]
.text:00407D03                 add     [esp+97Ch+var_950], eax
.text:00407D07                 add     [esp+97Ch+var_904], eax
.text:00407D0B                 test    ebx, ebx
.text:00407D0D                 jz      short loc_407D13
.text:00407D0F                 add     [esp+97Ch+var_908], eax
.text:00407D13
.text:00407D13 loc_407D13:                             ; CODE XREF: sub_406ED0+E3D↑j
.text:00407D13                 mov     edi, [esp+97Ch+var_900]
.text:00407D17                 test    edi, edi
.text:00407D19                 jz      short loc_407D1F
.text:00407D1B                 add     [esp+97Ch+var_900], eax
.text:00407D1F
.text:00407D1F loc_407D1F:                             ; CODE XREF: sub_406ED0+E49↑j
.text:00407D1F                 mov     edx, [esp+97Ch+var_8FC]
.text:00407D26                 test    edx, edx
.text:00407D28                 jz      short loc_407D31
.text:00407D2A                 add     [esp+97Ch+var_8FC], eax
.text:00407D31
.text:00407D31 loc_407D31:                             ; CODE XREF: sub_406ED0+E2B↑j
.text:00407D31                                         ; sub_406ED0+E58↑j
.text:00407D31                 mov     esi, [esp+97Ch+arg_C]
.text:00407D38                 mov     eax, [esp+97Ch+arg_C]
.text:00407D3F                 mov     ecx, [esp+97Ch+var_950]
.text:00407D43                 mov     edi, [esi]
.text:00407D45                 mov     edx, [eax+4]
.text:00407D48                 sub     ecx, edi
.text:00407D4A                 inc     ecx
.text:00407D4B                 mov     ebx, edi
.text:00407D4D                 cmp     ecx, edx
.text:00407D4F                 ja      loc_407CA0
.text:00407D55
.text:00407D55 loc_407D55:                             ; CODE XREF: sub_406ED0+DCA↑j
.text:00407D55                 mov     edx, [esp+97Ch+var_950]
.text:00407D59                 mov     byte ptr [edx], 14h
.text:00407D5C                 mov     edi, [esp+97Ch+var_908]
.text:00407D60                 inc     edx
.text:00407D61                 mov     [esp+97Ch+var_950], edx
.text:00407D65                 mov     ebx, edx
.text:00407D67                 mov     ebp, [esp+97Ch+var_908]
.text:00407D6B                 mov     [esp+97Ch+Size], 0Eh
.text:00407D72                 sub     ebx, edi
.text:00407D74                 sub     ebx, 4
.text:00407D77                 mov     [esp+97Ch+var_974], ebx
.text:00407D7B                 mov     [esp+97Ch+var_978], ebp
.text:00407D7F                 call    sub_403CA0
.text:00407D84
.text:00407D84 loc_407D84:                             ; CODE XREF: sub_406ED0+DAD↑j
.text:00407D84                 mov     eax, [esp+97Ch+var_24]
.text:00407D8B                 test    eax, eax
.text:00407D8D                 jnz     short loc_407DB4
.text:00407D8F                 test    [esp+97Ch+arg_8], 20000h
.text:00407D9A                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00407DA0
.text:00407DA0 loc_407DA0:                             ; CODE XREF: sub_406ED0+254E↓j
.text:00407DA0                 mov     ecx, [esp+97Ch+Block]
.text:00407DA7                 mov     ebp, 10h
.text:00407DAC
.text:00407DAC loc_407DAC:                             ; CODE XREF: sub_406ED0+15EA↓j
.text:00407DAC                                         ; sub_406ED0+21AF↓j
.text:00407DAC                 mov     [esp+97Ch+Size], ecx
.text:00407DAF                 jmp     loc_407473
.text:00407DB4 ; ---------------------------------------------------------------------------
.text:00407DB4
.text:00407DB4 loc_407DB4:                             ; CODE XREF: sub_406ED0+EBD↑j
.text:00407DB4                 dec     eax
.text:00407DB5                 mov     edx, [esp+97Ch+Block]
.text:00407DBC                 mov     ebp, [esp+97Ch+arg_C]
.text:00407DC3                 mov     [esp+97Ch+var_24], eax
.text:00407DCA                 lea     esi, [eax+eax*4]
.text:00407DCD                 shl     esi, 2
.text:00407DD0                 mov     ebx, [ebp+0]
.text:00407DD3                 mov     edi, [edx+esi]
.text:00407DD6                 mov     ebp, [edx+esi+4]
.text:00407DDA                 mov     ecx, ebx
.text:00407DDC                 add     edi, ebx
.text:00407DDE                 test    ebp, ebp
.text:00407DE0                 mov     [esp+97Ch+var_904], edi
.text:00407DE4                 lea     edi, [ebp+ebx-1]
.text:00407DE8                 setz    bl
.text:00407DEB                 movzx   esi, bl
.text:00407DEE                 mov     ebx, [esp+97Ch+var_24]
.text:00407DF5                 dec     esi
.text:00407DF6                 and     edi, esi
.text:00407DF8                 lea     eax, [ebx+ebx*4]
.text:00407DFB                 mov     [esp+97Ch+var_908], edi
.text:00407DFF                 shl     eax, 2
.text:00407E02                 xor     esi, esi
.text:00407E04                 mov     [esp+97Ch+var_8FC], esi
.text:00407E0B                 mov     ebx, [edx+eax+10h]
.text:00407E0F                 mov     ebp, [edx+eax+0Ch]
.text:00407E13                 mov     [esp+97Ch+var_930], ebx
.text:00407E17                 add     ebp, ecx
.text:00407E19                 cmp     ebx, 0FFh
.text:00407E1F                 mov     [esp+97Ch+var_900], ebp
.text:00407E23                 ja      loc_4072FF
.text:00407E29                 mov     esi, [edx+eax+8]
.text:00407E2D                 movzx   edx, byte ptr [esp+97Ch+var_90C]
.text:00407E32                 add     ecx, esi
.text:00407E34                 sub     dl, bl
.text:00407E36                 mov     [ecx], dl
.text:00407E38                 mov     eax, [esp+97Ch+arg_C]
.text:00407E3F                 mov     ecx, [esp+97Ch+var_950]
.text:00407E43                 mov     edi, [eax]
.text:00407E45                 mov     edx, [eax+4]
.text:00407E48                 sub     ecx, edi
.text:00407E4A                 add     ecx, 3
.text:00407E4D                 mov     ebx, edi
.text:00407E4F                 cmp     ecx, edx
.text:00407E51                 jbe     loc_407F0E
.text:00407E57
.text:00407E57 loc_407E57:                             ; CODE XREF: sub_406ED0+1038↓j
.text:00407E57                 cmp     edx, 10000h
.text:00407E5D                 mov     ebp, 0Fh
.text:00407E62                 jz      loc_4072E6
.text:00407E68                 lea     ebp, [edx+edx]
.text:00407E6B                 mov     edx, [esp+97Ch+arg_C]
.text:00407E72                 cmp     ebp, 10000h
.text:00407E78                 mov     [edx+4], ebp
.text:00407E7B                 jbe     short loc_407E84
.text:00407E7D                 mov     dword ptr [edx+4], 10000h
.text:00407E84
.text:00407E84 loc_407E84:                             ; CODE XREF: sub_406ED0+FAB↑j
.text:00407E84                 mov     eax, [esp+97Ch+arg_C]
.text:00407E8B                 mov     ebp, 0Ch
.text:00407E90                 mov     edx, [eax+4]
.text:00407E93                 mov     [esp+97Ch+Size], edi ; Block
.text:00407E96                 mov     [esp+97Ch+var_978], edx ; Size
.text:00407E9A                 call    realloc
.text:00407E9F                 mov     edi, [esp+97Ch+arg_C]
.text:00407EA6                 test    eax, eax
.text:00407EA8                 mov     [edi], eax
.text:00407EAA                 jz      loc_4072E6
.text:00407EB0                 cmp     ebx, eax
.text:00407EB2                 jz      short loc_407EE8
.text:00407EB4                 sub     eax, ebx
.text:00407EB6                 mov     ebx, [esp+97Ch+var_908]
.text:00407EBA                 add     [esp+97Ch+var_950], eax
.text:00407EBE                 add     [esp+97Ch+var_904], eax
.text:00407EC2                 test    ebx, ebx
.text:00407EC4                 jz      short loc_407ECA
.text:00407EC6                 add     [esp+97Ch+var_908], eax
.text:00407ECA
.text:00407ECA loc_407ECA:                             ; CODE XREF: sub_406ED0+FF4↑j
.text:00407ECA                 mov     ecx, [esp+97Ch+var_900]
.text:00407ECE                 test    ecx, ecx
.text:00407ED0                 jz      short loc_407ED6
.text:00407ED2                 add     [esp+97Ch+var_900], eax
.text:00407ED6
.text:00407ED6 loc_407ED6:                             ; CODE XREF: sub_406ED0+1000↑j
.text:00407ED6                 mov     esi, [esp+97Ch+var_8FC]
.text:00407EDD                 test    esi, esi
.text:00407EDF                 jz      short loc_407EE8
.text:00407EE1                 add     [esp+97Ch+var_8FC], eax
.text:00407EE8
.text:00407EE8 loc_407EE8:                             ; CODE XREF: sub_406ED0+FE2↑j
.text:00407EE8                                         ; sub_406ED0+100F↑j
.text:00407EE8                 mov     edx, [esp+97Ch+arg_C]
.text:00407EEF                 mov     eax, [esp+97Ch+arg_C]
.text:00407EF6                 mov     ebp, [esp+97Ch+var_950]
.text:00407EFA                 mov     edi, [edx]
.text:00407EFC                 mov     edx, [eax+4]
.text:00407EFF                 sub     ebp, edi
.text:00407F01                 add     ebp, 3
.text:00407F04                 mov     ebx, edi
.text:00407F06                 cmp     ebp, edx
.text:00407F08                 ja      loc_407E57
.text:00407F0E
.text:00407F0E loc_407F0E:                             ; CODE XREF: sub_406ED0+F81↑j
.text:00407F0E                 mov     ebx, [esp+97Ch+var_950]
.text:00407F12                 mov     byte ptr [ebx], 7
.text:00407F15                 inc     ebx
.text:00407F16                 movzx   edx, byte ptr [esp+97Ch+var_930]
.text:00407F1B                 mov     [ebx], dl
.text:00407F1D                 inc     ebx
.text:00407F1E                 movzx   ecx, byte ptr [esp+97Ch+var_90C]
.text:00407F23                 sub     cl, byte ptr [esp+97Ch+var_930]
.text:00407F27                 mov     [ebx], cl
.text:00407F29                 jmp     loc_407A47
.text:00407F29 ; ---------------------------------------------------------------------------
.text:00407F2E                 align 10h
.text:00407F30
.text:00407F30 loc_407F30:                             ; CODE XREF: sub_406ED0+16F↑j
.text:00407F30                                         ; sub_406ED0+16DF↓j ...
.text:00407F30                 mov     ebp, [esp+97Ch+var_900] ; jumptable 0040703F case 42
.text:00407F34                 test    ebp, ebp
.text:00407F36                 jz      loc_408491
.text:00407F3C
.text:00407F3C loc_407F3C:                             ; CODE XREF: sub_406ED0+15D3↓j
.text:00407F3C                 mov     [esp+97Ch+var_91C], 0
.text:00407F41                 xor     ecx, ecx
.text:00407F43                 mov     [esp+97Ch+var_91D], 0
.text:00407F48
.text:00407F48 loc_407F48:                             ; CODE XREF: sub_406ED0+10ED↓j
.text:00407F48                                         ; sub_406ED0+1105↓j ...
.text:00407F48                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:00407F50                 movsx   eax, [esp+97Ch+var_91D]
.text:00407F55                 jz      short loc_407F5A
.text:00407F57                 or      eax, 1
.text:00407F5A
.text:00407F5A loc_407F5A:                             ; CODE XREF: sub_406ED0+1085↑j
.text:00407F5A                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:00407F62                 mov     [esp+97Ch+var_91D], al
.text:00407F66                 movsx   eax, cl
.text:00407F69                 jz      short loc_407F6E
.text:00407F6B                 or      eax, 1
.text:00407F6E
.text:00407F6E loc_407F6E:                             ; CODE XREF: sub_406ED0+1099↑j
.text:00407F6E                 mov     edx, [esp+97Ch+var_8D0]
.text:00407F75                 mov     cl, al
.text:00407F77                 cmp     edx, [esp+97Ch+var_8F4]
.text:00407F7E                 jz      short loc_407FF0
.text:00407F80                 movzx   eax, byte ptr [edx]
.text:00407F83                 lea     edi, [edx+1]
.text:00407F86                 mov     esi, [esp+97Ch+var_8F8]
.text:00407F8D                 mov     [esp+97Ch+var_8D0], edi
.text:00407F94                 test    esi, esi
.text:00407F96                 mov     [esp+97Ch+var_8EC], al
.text:00407F9D                 jz      short loc_407FB5
.text:00407F9F                 mov     esi, [esp+97Ch+var_8F8]
.text:00407FA6                 movzx   ebp, al
.text:00407FA9                 movzx   eax, byte ptr [ebp+esi+0]
.text:00407FAE                 mov     [esp+97Ch+var_8EC], al
.text:00407FB5
.text:00407FB5 loc_407FB5:                             ; CODE XREF: sub_406ED0+10CD↑j
.text:00407FB5                 cmp     [esp+97Ch+var_8EC], 2Ah ; '*'
.text:00407FBD                 jz      short loc_407F48
.text:00407FBF                 test    byte ptr [esp+97Ch+arg_8], 2
.text:00407FC7                 jnz     loc_408420
.text:00407FCD                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:00407FD5                 jz      loc_407F48
.text:00407FDB                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:00407FE3                 jz      loc_407F48
.text:00407FE9
.text:00407FE9 loc_407FE9:                             ; CODE XREF: sub_406ED0+1558↓j
.text:00407FE9                 dec     [esp+97Ch+var_8D0]
.text:00407FF0
.text:00407FF0 loc_407FF0:                             ; CODE XREF: sub_406ED0+10AE↑j
.text:00407FF0                                         ; sub_406ED0+15AB↓j
.text:00407FF0                 mov     edx, [esp+97Ch+var_900]
.text:00407FF4                 test    edx, edx
.text:00407FF6                 jz      loc_4072FF
.text:00407FFC                 test    cl, cl
.text:00407FFE                 jz      loc_408203
.text:00408004                 mov     ebx, [esp+97Ch+arg_C]
.text:0040800B                 mov     ebp, [esp+97Ch+arg_C]
.text:00408012                 mov     esi, [esp+97Ch+var_950]
.text:00408016                 mov     edi, [ebx]
.text:00408018                 mov     edx, [ebp+4]
.text:0040801B                 sub     esi, edi
.text:0040801D                 add     esi, 3
.text:00408020                 mov     ebx, edi
.text:00408022                 cmp     esi, edx
.text:00408024                 jbe     loc_4080E1
.text:0040802A
.text:0040802A loc_40802A:                             ; CODE XREF: sub_406ED0+120B↓j
.text:0040802A                 cmp     edx, 10000h
.text:00408030                 mov     ebp, 0Fh
.text:00408035                 jz      loc_4072E6
.text:0040803B                 mov     esi, [esp+97Ch+arg_C]
.text:00408042                 lea     ecx, [edx+edx]
.text:00408045                 cmp     ecx, 10000h
.text:0040804B                 mov     [esi+4], ecx
.text:0040804E                 jbe     short loc_408057
.text:00408050                 mov     dword ptr [esi+4], 10000h
.text:00408057
.text:00408057 loc_408057:                             ; CODE XREF: sub_406ED0+117E↑j
.text:00408057                 mov     eax, [esp+97Ch+arg_C]
.text:0040805E                 mov     ebp, 0Ch
.text:00408063                 mov     esi, [eax+4]
.text:00408066                 mov     [esp+97Ch+Size], edi ; Block
.text:00408069                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040806D                 call    realloc
.text:00408072                 mov     edi, [esp+97Ch+arg_C]
.text:00408079                 test    eax, eax
.text:0040807B                 mov     [edi], eax
.text:0040807D                 jz      loc_4072E6
.text:00408083                 cmp     ebx, eax
.text:00408085                 jz      short loc_4080BB
.text:00408087                 mov     edx, [esp+97Ch+var_908]
.text:0040808B                 sub     eax, ebx
.text:0040808D                 add     [esp+97Ch+var_950], eax
.text:00408091                 add     [esp+97Ch+var_904], eax
.text:00408095                 test    edx, edx
.text:00408097                 jz      short loc_40809D
.text:00408099                 add     [esp+97Ch+var_908], eax
.text:0040809D
.text:0040809D loc_40809D:                             ; CODE XREF: sub_406ED0+11C7↑j
.text:0040809D                 mov     ebp, [esp+97Ch+var_900]
.text:004080A1                 test    ebp, ebp
.text:004080A3                 jz      short loc_4080A9
.text:004080A5                 add     [esp+97Ch+var_900], eax
.text:004080A9
.text:004080A9 loc_4080A9:                             ; CODE XREF: sub_406ED0+11D3↑j
.text:004080A9                 mov     ebx, [esp+97Ch+var_8FC]
.text:004080B0                 test    ebx, ebx
.text:004080B2                 jz      short loc_4080BB
.text:004080B4                 add     [esp+97Ch+var_8FC], eax
.text:004080BB
.text:004080BB loc_4080BB:                             ; CODE XREF: sub_406ED0+11B5↑j
.text:004080BB                                         ; sub_406ED0+11E2↑j
.text:004080BB                 mov     esi, [esp+97Ch+arg_C]
.text:004080C2                 mov     eax, [esp+97Ch+arg_C]
.text:004080C9                 mov     ecx, [esp+97Ch+var_950]
.text:004080CD                 mov     edi, [esi]
.text:004080CF                 mov     edx, [eax+4]
.text:004080D2                 sub     ecx, edi
.text:004080D4                 add     ecx, 3
.text:004080D7                 mov     ebx, edi
.text:004080D9                 cmp     ecx, edx
.text:004080DB                 ja      loc_40802A
.text:004080E1
.text:004080E1 loc_4080E1:                             ; CODE XREF: sub_406ED0+1154↑j
.text:004080E1                 mov     edi, [esp+97Ch+var_8F8]
.text:004080E8                 test    edi, edi
.text:004080EA                 jz      loc_40840A
.text:004080F0                 mov     edi, [esp+97Ch+var_8D0]
.text:004080F7                 mov     ebx, [esp+97Ch+var_8F8]
.text:004080FE                 movzx   ebp, byte ptr [edi-2]
.text:00408102                 movsx   edx, byte ptr [ebp+ebx+0]
.text:00408107
.text:00408107 loc_408107:                             ; CODE XREF: sub_406ED0+1545↓j
.text:00408107                 mov     ecx, [esp+97Ch+var_8F8]
.text:0040810E                 test    ecx, ecx
.text:00408110                 jz      loc_408402
.text:00408116                 mov     eax, [esp+97Ch+var_8F8]
.text:0040811D                 movsx   esi, byte ptr [eax+2Eh]
.text:00408121                 cmp     edx, esi
.text:00408123
.text:00408123 loc_408123:                             ; CODE XREF: sub_406ED0+1535↓j
.text:00408123                 jz      loc_40836B
.text:00408129
.text:00408129 loc_408129:                             ; CODE XREF: sub_406ED0+14A0↓j
.text:00408129                                         ; sub_406ED0+14AD↓j ...
.text:00408129                 mov     [esp+97Ch+Size], 12h
.text:00408130                 mov     ebx, [esp+97Ch+var_900]
.text:00408134                 mov     ecx, [esp+97Ch+var_950]
.text:00408138                 mov     edi, [esp+97Ch+var_950]
.text:0040813C                 sub     ebx, ecx
.text:0040813E                 sub     ebx, 6
.text:00408141                 mov     [esp+97Ch+var_974], ebx
.text:00408145                 mov     [esp+97Ch+var_978], edi
.text:00408149                 call    sub_403CA0
.text:0040814E
.text:0040814E loc_40814E:                             ; CODE XREF: sub_406ED0+1523↓j
.text:0040814E                 add     [esp+97Ch+var_950], 3
.text:00408153                 mov     esi, [esp+97Ch+arg_C]
.text:0040815A                 mov     eax, [esp+97Ch+var_950]
.text:0040815E                 mov     edi, [esi]
.text:00408160                 mov     edx, [esi+4]
.text:00408163
.text:00408163 loc_408163:                             ; CODE XREF: sub_406ED0+134A↓j
.text:00408163                 sub     eax, edi
.text:00408165                 mov     ebx, edi
.text:00408167                 add     eax, 3
.text:0040816A                 cmp     eax, edx
.text:0040816C                 jbe     loc_40821F
.text:00408172                 cmp     edx, 10000h
.text:00408178                 mov     ebp, 0Fh
.text:0040817D                 jz      loc_4072E6
.text:00408183                 mov     esi, [esp+97Ch+arg_C]
.text:0040818A                 lea     ebp, [edx+edx]
.text:0040818D                 cmp     ebp, 10000h
.text:00408193                 mov     [esi+4], ebp
.text:00408196                 jbe     short loc_40819F
.text:00408198                 mov     dword ptr [esi+4], 10000h
.text:0040819F
.text:0040819F loc_40819F:                             ; CODE XREF: sub_406ED0+12C6↑j
.text:0040819F                 mov     eax, [esp+97Ch+arg_C]
.text:004081A6                 mov     ebp, 0Ch
.text:004081AB                 mov     ecx, [eax+4]
.text:004081AE                 mov     [esp+97Ch+Size], edi ; Block
.text:004081B1                 mov     [esp+97Ch+var_978], ecx ; Size
.text:004081B5                 call    realloc
.text:004081BA                 mov     edx, [esp+97Ch+arg_C]
.text:004081C1                 test    eax, eax
.text:004081C3                 mov     [edx], eax
.text:004081C5                 jz      loc_4072E6
.text:004081CB                 cmp     ebx, eax
.text:004081CD                 jz      short loc_408203
.text:004081CF                 mov     edi, [esp+97Ch+var_908]
.text:004081D3                 sub     eax, ebx
.text:004081D5                 add     [esp+97Ch+var_950], eax
.text:004081D9                 add     [esp+97Ch+var_904], eax
.text:004081DD                 test    edi, edi
.text:004081DF                 jz      short loc_4081E5
.text:004081E1                 add     [esp+97Ch+var_908], eax
.text:004081E5
.text:004081E5 loc_4081E5:                             ; CODE XREF: sub_406ED0+130F↑j
.text:004081E5                 mov     ebx, [esp+97Ch+var_900]
.text:004081E9                 test    ebx, ebx
.text:004081EB                 jz      short loc_4081F1
.text:004081ED                 add     [esp+97Ch+var_900], eax
.text:004081F1
.text:004081F1 loc_4081F1:                             ; CODE XREF: sub_406ED0+131B↑j
.text:004081F1                 mov     esi, [esp+97Ch+var_8FC]
.text:004081F8                 test    esi, esi
.text:004081FA                 jz      short loc_408203
.text:004081FC                 add     [esp+97Ch+var_8FC], eax
.text:00408203
.text:00408203 loc_408203:                             ; CODE XREF: sub_406ED0+112E↑j
.text:00408203                                         ; sub_406ED0+12FD↑j ...
.text:00408203                 mov     edx, [esp+97Ch+arg_C]
.text:0040820A                 mov     ebp, [esp+97Ch+arg_C]
.text:00408211                 mov     eax, [esp+97Ch+var_950]
.text:00408215                 mov     edi, [edx]
.text:00408217                 mov     edx, [ebp+4]
.text:0040821A                 jmp     loc_408163
.text:0040821F ; ---------------------------------------------------------------------------
.text:0040821F
.text:0040821F loc_40821F:                             ; CODE XREF: sub_406ED0+129C↑j
.text:0040821F                 movzx   edx, [esp+97Ch+var_91C]
.text:00408224                 mov     ebx, [esp+97Ch+var_950]
.text:00408228                 mov     eax, [esp+97Ch+var_900]
.text:0040822C                 mov     edi, [esp+97Ch+var_900]
.text:00408230                 mov     esi, ebx
.text:00408232                 and     edx, 1
.text:00408235                 mov     [esp+97Ch+var_970], ebx
.text:00408239                 sub     esi, eax
.text:0040823B                 add     edx, 0Fh
.text:0040823E                 mov     [esp+97Ch+var_974], esi
.text:00408242                 add     ebx, 3
.text:00408245                 mov     [esp+97Ch+var_978], edi
.text:00408249                 mov     [esp+97Ch+Size], edx
.text:0040824C                 call    sub_403CF0
.text:00408251                 mov     [esp+97Ch+var_950], ebx
.text:00408255                 xor     ecx, ecx
.text:00408257                 cmp     [esp+97Ch+var_91D], 0
.text:0040825C                 mov     [esp+97Ch+var_8FC], ecx
.text:00408263                 jnz     loc_4072FF
.text:00408269                 mov     ecx, [esp+97Ch+arg_C]
.text:00408270                 mov     ebp, [esp+97Ch+var_950]
.text:00408274                 mov     edi, [ecx]
.text:00408276                 mov     edx, [ecx+4]
.text:00408279                 sub     ebp, edi
.text:0040827B                 mov     ebx, edi
.text:0040827D                 add     ebp, 3
.text:00408280                 cmp     ebp, edx
.text:00408282                 jbe     loc_40833F
.text:00408288
.text:00408288 loc_408288:                             ; CODE XREF: sub_406ED0+1469↓j
.text:00408288                 cmp     edx, 10000h
.text:0040828E                 mov     ebp, 0Fh
.text:00408293                 jz      loc_4072E6
.text:00408299                 mov     esi, [esp+97Ch+arg_C]
.text:004082A0                 lea     ebp, [edx+edx]
.text:004082A3                 cmp     ebp, 10000h
.text:004082A9                 mov     [esi+4], ebp
.text:004082AC                 jbe     short loc_4082B5
.text:004082AE                 mov     dword ptr [esi+4], 10000h
.text:004082B5
.text:004082B5 loc_4082B5:                             ; CODE XREF: sub_406ED0+13DC↑j
.text:004082B5                 mov     eax, [esp+97Ch+arg_C]
.text:004082BC                 mov     ebp, 0Ch
.text:004082C1                 mov     esi, [eax+4]
.text:004082C4                 mov     [esp+97Ch+Size], edi ; Block
.text:004082C7                 mov     [esp+97Ch+var_978], esi ; Size
.text:004082CB                 call    realloc
.text:004082D0                 mov     edx, [esp+97Ch+arg_C]
.text:004082D7                 test    eax, eax
.text:004082D9                 mov     [edx], eax
.text:004082DB                 jz      loc_4072E6
.text:004082E1                 cmp     ebx, eax
.text:004082E3                 jz      short loc_408319
.text:004082E5                 mov     edi, [esp+97Ch+var_908]
.text:004082E9                 sub     eax, ebx
.text:004082EB                 add     [esp+97Ch+var_950], eax
.text:004082EF                 add     [esp+97Ch+var_904], eax
.text:004082F3                 test    edi, edi
.text:004082F5                 jz      short loc_4082FB
.text:004082F7                 add     [esp+97Ch+var_908], eax
.text:004082FB
.text:004082FB loc_4082FB:                             ; CODE XREF: sub_406ED0+1425↑j
.text:004082FB                 mov     ebx, [esp+97Ch+var_900]
.text:004082FF                 test    ebx, ebx
.text:00408301                 jz      short loc_408307
.text:00408303                 add     [esp+97Ch+var_900], eax
.text:00408307
.text:00408307 loc_408307:                             ; CODE XREF: sub_406ED0+1431↑j
.text:00408307                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040830E                 test    ecx, ecx
.text:00408310                 jz      short loc_408319
.text:00408312                 add     [esp+97Ch+var_8FC], eax
.text:00408319
.text:00408319 loc_408319:                             ; CODE XREF: sub_406ED0+1413↑j
.text:00408319                                         ; sub_406ED0+1440↑j
.text:00408319                 mov     edx, [esp+97Ch+arg_C]
.text:00408320                 mov     eax, [esp+97Ch+arg_C]
.text:00408327                 mov     ebp, [esp+97Ch+var_950]
.text:0040832B                 mov     edi, [edx]
.text:0040832D                 mov     edx, [eax+4]
.text:00408330                 sub     ebp, edi
.text:00408332                 add     ebp, 3
.text:00408335                 mov     ebx, edi
.text:00408337                 cmp     ebp, edx
.text:00408339                 ja      loc_408288
.text:0040833F
.text:0040833F loc_40833F:                             ; CODE XREF: sub_406ED0+13B2↑j
.text:0040833F                 mov     [esp+97Ch+var_974], 3
.text:00408347                 mov     edi, [esp+97Ch+var_950]
.text:0040834B                 mov     esi, [esp+97Ch+var_900]
.text:0040834F                 mov     [esp+97Ch+Size], 13h
.text:00408356                 mov     [esp+97Ch+var_970], edi
.text:0040835A                 add     edi, 3
.text:0040835D                 mov     [esp+97Ch+var_978], esi
.text:00408361                 call    sub_403CF0
.text:00408366                 jmp     loc_4072FB
.text:0040836B ; ---------------------------------------------------------------------------
.text:0040836B
.text:0040836B loc_40836B:                             ; CODE XREF: sub_406ED0:loc_408123↑j
.text:0040836B                 cmp     [esp+97Ch+var_91D], 0
.text:00408370                 jz      loc_408129
.text:00408376                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040837D                 jnb     loc_408129
.text:00408383                 mov     edx, [esp+97Ch+var_8F8]
.text:0040838A                 test    edx, edx
.text:0040838C                 jz      short loc_4083FD
.text:0040838E                 movzx   ebp, byte ptr [edi]
.text:00408391                 mov     edi, [esp+97Ch+var_8F8]
.text:00408398                 movsx   edx, byte ptr [ebp+edi+0]
.text:0040839D
.text:0040839D loc_40839D:                             ; CODE XREF: sub_406ED0+1530↓j
.text:0040839D                 mov     ebx, [esp+97Ch+var_8F8]
.text:004083A4                 test    ebx, ebx
.text:004083A6                 jz      short loc_4083F8
.text:004083A8                 mov     esi, [esp+97Ch+var_8F8]
.text:004083AF                 movsx   ecx, byte ptr [esi+0Ah]
.text:004083B3                 cmp     edx, ecx
.text:004083B5
.text:004083B5 loc_4083B5:                             ; CODE XREF: sub_406ED0+152B↓j
.text:004083B5                 jnz     loc_408129
.text:004083BB                 test    byte ptr [esp+97Ch+arg_8], 40h
.text:004083C3                 jnz     loc_408129
.text:004083C9                 mov     [esp+97Ch+Size], 0Dh
.text:004083D0                 mov     ebp, [esp+97Ch+var_900]
.text:004083D4                 mov     eax, [esp+97Ch+var_950]
.text:004083D8                 mov     edx, [esp+97Ch+var_950]
.text:004083DC                 sub     ebp, eax
.text:004083DE                 sub     ebp, 3
.text:004083E1                 mov     [esp+97Ch+var_974], ebp
.text:004083E5                 mov     [esp+97Ch+var_978], edx
.text:004083E9                 call    sub_403CA0
.text:004083EE                 mov     [esp+97Ch+var_91C], 1
.text:004083F3                 jmp     loc_40814E
.text:004083F8 ; ---------------------------------------------------------------------------
.text:004083F8
.text:004083F8 loc_4083F8:                             ; CODE XREF: sub_406ED0+14D6↑j
.text:004083F8                 cmp     edx, 0Ah
.text:004083FB                 jmp     short loc_4083B5
.text:004083FD ; ---------------------------------------------------------------------------
.text:004083FD
.text:004083FD loc_4083FD:                             ; CODE XREF: sub_406ED0+14BC↑j
.text:004083FD                 movsx   edx, byte ptr [edi]
.text:00408400                 jmp     short loc_40839D
.text:00408402 ; ---------------------------------------------------------------------------
.text:00408402
.text:00408402 loc_408402:                             ; CODE XREF: sub_406ED0+1240↑j
.text:00408402                 cmp     edx, 2Eh ; '.'
.text:00408405                 jmp     loc_408123
.text:0040840A ; ---------------------------------------------------------------------------
.text:0040840A
.text:0040840A loc_40840A:                             ; CODE XREF: sub_406ED0+121A↑j
.text:0040840A                 mov     edi, [esp+97Ch+var_8D0]
.text:00408411                 movsx   edx, byte ptr [edi-2]
.text:00408415                 jmp     loc_408107
.text:00408415 ; ---------------------------------------------------------------------------
.text:0040841A                 align 10h
.text:00408420
.text:00408420 loc_408420:                             ; CODE XREF: sub_406ED0+10F7↑j
.text:00408420                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:00408428                 jnz     loc_407FE9
.text:0040842E                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408435                 jz      short loc_408480
.text:00408437                 movzx   ebx, byte ptr [edx+1]
.text:0040843B                 lea     ebp, [edx+2]
.text:0040843E                 mov     eax, [esp+97Ch+var_8F8]
.text:00408445                 mov     [esp+97Ch+var_8D0], ebp
.text:0040844C                 test    eax, eax
.text:0040844E                 jz      short loc_40845E
.text:00408450                 mov     eax, [esp+97Ch+var_8F8]
.text:00408457                 movzx   edi, bl
.text:0040845A                 movzx   ebx, byte ptr [edi+eax]
.text:0040845E
.text:0040845E loc_40845E:                             ; CODE XREF: sub_406ED0+157E↑j
.text:0040845E                 cmp     bl, 2Bh ; '+'
.text:00408461                 jz      short loc_408468
.text:00408463                 cmp     bl, 3Fh ; '?'
.text:00408466                 jnz     short loc_408474
.text:00408468
.text:00408468 loc_408468:                             ; CODE XREF: sub_406ED0+1591↑j
.text:00408468                 mov     [esp+97Ch+var_8EC], bl
.text:0040846F                 jmp     loc_407F48
.text:00408474 ; ---------------------------------------------------------------------------
.text:00408474
.text:00408474 loc_408474:                             ; CODE XREF: sub_406ED0+1596↑j
.text:00408474                 mov     [esp+97Ch+var_8D0], edx
.text:0040847B                 jmp     loc_407FF0
.text:00408480 ; ---------------------------------------------------------------------------
.text:00408480
.text:00408480 loc_408480:                             ; CODE XREF: sub_406ED0+1565↑j
.text:00408480                                         ; sub_406ED0+21FF↓j ...
.text:00408480                 mov     edi, [esp+97Ch+Block]
.text:00408487                 mov     ebp, 5
.text:0040848C                 jmp     loc_407470
.text:00408491 ; ---------------------------------------------------------------------------
.text:00408491
.text:00408491 loc_408491:                             ; CODE XREF: sub_406ED0+1066↑j
.text:00408491                 test    byte ptr [esp+97Ch+arg_8], 20h
.text:00408499                 jnz     short loc_4084AE
.text:0040849B                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:004084A3                 jnz     loc_407F3C
.text:004084A9                 jmp     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004084AE ; ---------------------------------------------------------------------------
.text:004084AE
.text:004084AE loc_4084AE:                             ; CODE XREF: sub_406ED0+15C9↑j
.text:004084AE                                         ; sub_406ED0+31A3↓j
.text:004084AE                 mov     ecx, [esp+97Ch+Block]
.text:004084B5                 mov     ebp, 0Dh
.text:004084BA                 jmp     loc_407DAC
.text:004084BA ; ---------------------------------------------------------------------------
.text:004084BF                 align 10h
.text:004084C0
.text:004084C0 loc_4084C0:                             ; CODE XREF: sub_406ED0+16F↑j
.text:004084C0                                         ; DATA XREF: sub_406ED0:jpt_40703F↑o
.text:004084C0                 mov     eax, [esp+97Ch+arg_C] ; jumptable 0040703F case 46
.text:004084C7                 mov     ecx, [esp+97Ch+var_950]
.text:004084CB                 mov     edi, [eax]
.text:004084CD                 mov     [esp+97Ch+var_900], ecx
.text:004084D1                 mov     ebp, ecx
.text:004084D3                 mov     edx, [eax+4]
.text:004084D6                 sub     ebp, edi
.text:004084D8                 mov     ebx, edi
.text:004084DA                 inc     ebp
.text:004084DB                 cmp     ebp, edx
.text:004084DD                 jbe     loc_408598
.text:004084E3
.text:004084E3 loc_4084E3:                             ; CODE XREF: sub_406ED0+16C2↓j
.text:004084E3                 cmp     edx, 10000h
.text:004084E9                 mov     ebp, 0Fh
.text:004084EE                 jz      loc_4072E6
.text:004084F4                 mov     esi, [esp+97Ch+arg_C]
.text:004084FB                 lea     ebp, [edx+edx]
.text:004084FE                 cmp     ebp, 10000h
.text:00408504                 mov     [esi+4], ebp
.text:00408507                 jbe     short loc_408510
.text:00408509                 mov     dword ptr [esi+4], 10000h
.text:00408510
.text:00408510 loc_408510:                             ; CODE XREF: sub_406ED0+1637↑j
.text:00408510                 mov     eax, [esp+97Ch+arg_C]
.text:00408517                 mov     ebp, 0Ch
.text:0040851C                 mov     esi, [eax+4]
.text:0040851F                 mov     [esp+97Ch+Size], edi ; Block
.text:00408522                 mov     [esp+97Ch+var_978], esi ; Size
.text:00408526                 call    realloc
.text:0040852B                 mov     edi, [esp+97Ch+arg_C]
.text:00408532                 test    eax, eax
.text:00408534                 mov     [edi], eax
.text:00408536                 jz      loc_4072E6
.text:0040853C                 cmp     ebx, eax
.text:0040853E                 jz      short loc_408574
.text:00408540                 sub     eax, ebx
.text:00408542                 mov     ebx, [esp+97Ch+var_908]
.text:00408546                 add     [esp+97Ch+var_950], eax
.text:0040854A                 add     [esp+97Ch+var_904], eax
.text:0040854E                 test    ebx, ebx
.text:00408550                 jz      short loc_408556
.text:00408552                 add     [esp+97Ch+var_908], eax
.text:00408556
.text:00408556 loc_408556:                             ; CODE XREF: sub_406ED0+1680↑j
.text:00408556                 mov     edx, [esp+97Ch+var_900]
.text:0040855A                 test    edx, edx
.text:0040855C                 jz      short loc_408562
.text:0040855E                 add     [esp+97Ch+var_900], eax
.text:00408562
.text:00408562 loc_408562:                             ; CODE XREF: sub_406ED0+168C↑j
.text:00408562                 mov     ecx, [esp+97Ch+var_8FC]
.text:00408569                 test    ecx, ecx
.text:0040856B                 jz      short loc_408574
.text:0040856D                 add     [esp+97Ch+var_8FC], eax
.text:00408574
.text:00408574 loc_408574:                             ; CODE XREF: sub_406ED0+166E↑j
.text:00408574                                         ; sub_406ED0+169B↑j
.text:00408574                 mov     esi, [esp+97Ch+arg_C]
.text:0040857B                 mov     eax, [esp+97Ch+arg_C]
.text:00408582                 mov     ebp, [esp+97Ch+var_950]
.text:00408586                 mov     edi, [esi]
.text:00408588                 mov     edx, [eax+4]
.text:0040858B                 sub     ebp, edi
.text:0040858D                 inc     ebp
.text:0040858E                 mov     ebx, edi
.text:00408590                 cmp     ebp, edx
.text:00408592                 ja      loc_4084E3
.text:00408598
.text:00408598 loc_408598:                             ; CODE XREF: sub_406ED0+160D↑j
.text:00408598                 mov     edi, [esp+97Ch+var_950]
.text:0040859C                 mov     byte ptr [edi], 3
.text:0040859F                 jmp     loc_4072FA
.text:004085A4 ; ---------------------------------------------------------------------------
.text:004085A4
.text:004085A4 loc_4085A4:                             ; CODE XREF: sub_406ED0+16F↑j
.text:004085A4                                         ; DATA XREF: sub_406ED0:jpt_40703F↑o
.text:004085A4                 test    [esp+97Ch+arg_8], 402h ; jumptable 0040703F cases 43,63
.text:004085AF                 jz      loc_407F30      ; jumptable 0040703F case 42
.text:004085B5                 jmp     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004085BA ; ---------------------------------------------------------------------------
.text:004085BA
.text:004085BA loc_4085BA:                             ; CODE XREF: sub_406ED0+16F↑j
.text:004085BA                                         ; DATA XREF: sub_406ED0:jpt_40703F↑o
.text:004085BA                 mov     [esp+97Ch+var_91E], 0 ; jumptable 0040703F case 91
.text:004085BF                 mov     edi, [esp+97Ch+var_8F4]
.text:004085C6                 cmp     [esp+97Ch+var_8D0], edi
.text:004085CD                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:004085D5                 jz      loc_408B2F
.text:004085DB
.text:004085DB loc_4085DB:                             ; CODE XREF: sub_406ED0+1784↓j
.text:004085DB                                         ; sub_406ED0+17B1↓j ...
.text:004085DB                 mov     ebp, [esp+97Ch+arg_C]
.text:004085E2                 mov     ecx, [esp+97Ch+var_950]
.text:004085E6                 mov     edi, [ebp+0]
.text:004085E9                 mov     edx, [ebp+4]
.text:004085EC                 sub     ecx, edi
.text:004085EE                 lea     ebx, [ecx+22h]
.text:004085F1                 cmp     ebx, edx
.text:004085F3                 jbe     loc_408693
.text:004085F9                 cmp     edx, 10000h
.text:004085FF                 mov     ebp, 0Fh
.text:00408604                 jz      loc_4072E6
.text:0040860A                 lea     ebx, [edx+edx]
.text:0040860D                 mov     edx, [esp+97Ch+arg_C]
.text:00408614                 cmp     ebx, 10000h
.text:0040861A                 mov     [edx+4], ebx
.text:0040861D                 jbe     short loc_408626
.text:0040861F                 mov     dword ptr [edx+4], 10000h
.text:00408626
.text:00408626 loc_408626:                             ; CODE XREF: sub_406ED0+174D↑j
.text:00408626                 mov     eax, [esp+97Ch+arg_C]
.text:0040862D                 mov     ebp, [eax+4]
.text:00408630                 mov     [esp+97Ch+Size], edi ; Block
.text:00408633                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00408637                 mov     ebp, 0Ch
.text:0040863C                 call    realloc
.text:00408641                 mov     edx, [esp+97Ch+arg_C]
.text:00408648                 test    eax, eax
.text:0040864A                 mov     [edx], eax
.text:0040864C                 jz      loc_4072E6
.text:00408652                 cmp     edi, eax
.text:00408654                 jz      short loc_4085DB
.text:00408656                 mov     ecx, [esp+97Ch+var_908]
.text:0040865A                 sub     eax, edi
.text:0040865C                 add     [esp+97Ch+var_950], eax
.text:00408660                 add     [esp+97Ch+var_904], eax
.text:00408664                 test    ecx, ecx
.text:00408666                 jz      short loc_40866C
.text:00408668                 add     [esp+97Ch+var_908], eax
.text:0040866C
.text:0040866C loc_40866C:                             ; CODE XREF: sub_406ED0+1796↑j
.text:0040866C                 mov     esi, [esp+97Ch+var_900]
.text:00408670                 test    esi, esi
.text:00408672                 jz      short loc_408678
.text:00408674                 add     [esp+97Ch+var_900], eax
.text:00408678
.text:00408678 loc_408678:                             ; CODE XREF: sub_406ED0+17A2↑j
.text:00408678                 mov     edi, [esp+97Ch+var_8FC]
.text:0040867F                 test    edi, edi
.text:00408681                 jz      loc_4085DB
.text:00408687                 add     [esp+97Ch+var_8FC], eax
.text:0040868E                 jmp     loc_4085DB
.text:00408693 ; ---------------------------------------------------------------------------
.text:00408693
.text:00408693 loc_408693:                             ; CODE XREF: sub_406ED0+1723↑j
.text:00408693                 mov     ebx, [esp+97Ch+var_950]
.text:00408697                 lea     esi, [ecx+1]
.text:0040869A                 cmp     esi, edx
.text:0040869C                 mov     [esp+97Ch+var_900], ebx
.text:004086A0                 mov     ebx, edi
.text:004086A2                 jbe     loc_40875D
.text:004086A8
.text:004086A8 loc_4086A8:                             ; CODE XREF: sub_406ED0+1887↓j
.text:004086A8                 cmp     edx, 10000h
.text:004086AE                 mov     ebp, 0Fh
.text:004086B3                 jz      loc_4072E6
.text:004086B9                 lea     ecx, [edx+edx]
.text:004086BC                 mov     edx, [esp+97Ch+arg_C]
.text:004086C3                 cmp     ecx, 10000h
.text:004086C9                 mov     [edx+4], ecx
.text:004086CC                 jbe     short loc_4086D5
.text:004086CE                 mov     dword ptr [edx+4], 10000h
.text:004086D5
.text:004086D5 loc_4086D5:                             ; CODE XREF: sub_406ED0+17FC↑j
.text:004086D5                 mov     eax, [esp+97Ch+arg_C]
.text:004086DC                 mov     ebp, [eax+4]
.text:004086DF                 mov     [esp+97Ch+Size], edi ; Block
.text:004086E2                 mov     [esp+97Ch+var_978], ebp ; Size
.text:004086E6                 mov     ebp, 0Ch
.text:004086EB                 call    realloc
.text:004086F0                 mov     edx, [esp+97Ch+arg_C]
.text:004086F7                 test    eax, eax
.text:004086F9                 mov     [edx], eax
.text:004086FB                 jz      loc_4072E6
.text:00408701                 cmp     ebx, eax
.text:00408703                 jz      short loc_408739
.text:00408705                 mov     edi, [esp+97Ch+var_908]
.text:00408709                 sub     eax, ebx
.text:0040870B                 add     [esp+97Ch+var_950], eax
.text:0040870F                 add     [esp+97Ch+var_904], eax
.text:00408713                 test    edi, edi
.text:00408715                 jz      short loc_40871B
.text:00408717                 add     [esp+97Ch+var_908], eax
.text:0040871B
.text:0040871B loc_40871B:                             ; CODE XREF: sub_406ED0+1845↑j
.text:0040871B                 mov     esi, [esp+97Ch+var_900]
.text:0040871F                 test    esi, esi
.text:00408721                 jz      short loc_408727
.text:00408723                 add     [esp+97Ch+var_900], eax
.text:00408727
.text:00408727 loc_408727:                             ; CODE XREF: sub_406ED0+1851↑j
.text:00408727                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040872E                 test    ebx, ebx
.text:00408730                 jz      short loc_408739
.text:00408732                 add     [esp+97Ch+var_8FC], eax
.text:00408739
.text:00408739 loc_408739:                             ; CODE XREF: sub_406ED0+1833↑j
.text:00408739                                         ; sub_406ED0+1860↑j
.text:00408739                 mov     ecx, [esp+97Ch+arg_C]
.text:00408740                 mov     eax, [esp+97Ch+arg_C]
.text:00408747                 mov     ebp, [esp+97Ch+var_950]
.text:0040874B                 mov     edi, [ecx]
.text:0040874D                 mov     edx, [eax+4]
.text:00408750                 sub     ebp, edi
.text:00408752                 inc     ebp
.text:00408753                 mov     ebx, edi
.text:00408755                 cmp     ebp, edx
.text:00408757                 ja      loc_4086A8
.text:0040875D
.text:0040875D loc_40875D:                             ; CODE XREF: sub_406ED0+17D2↑j
.text:0040875D                 mov     edi, [esp+97Ch+var_950]
.text:00408761                 mov     bl, 5
.text:00408763                 mov     edx, [esp+97Ch+var_8D0]
.text:0040876A                 inc     [esp+97Ch+var_950]
.text:0040876E                 cmp     byte ptr [edx], 5Eh ; '^'
.text:00408771                 setnz   al
.text:00408774                 sub     bl, al
.text:00408776                 mov     [edi], bl
.text:00408778                 mov     edi, [esp+97Ch+var_8D0]
.text:0040877F                 cmp     byte ptr [edi], 5Eh ; '^'
.text:00408782                 jz      loc_409139
.text:00408788
.text:00408788 loc_408788:                             ; CODE XREF: sub_406ED0+2271↓j
.text:00408788                 mov     [esp+97Ch+var_8F0], edi
.text:0040878F                 mov     esi, [esp+97Ch+arg_C]
.text:00408796                 mov     ecx, [esp+97Ch+arg_C]
.text:0040879D                 mov     ebp, [esp+97Ch+var_950]
.text:004087A1                 mov     edi, [esi]
.text:004087A3                 mov     edx, [ecx+4]
.text:004087A6                 sub     ebp, edi
.text:004087A8                 mov     ebx, edi
.text:004087AA                 inc     ebp
.text:004087AB                 cmp     ebp, edx
.text:004087AD                 jbe     loc_408868
.text:004087B3
.text:004087B3 loc_4087B3:                             ; CODE XREF: sub_406ED0+1992↓j
.text:004087B3                 cmp     edx, 10000h
.text:004087B9                 mov     ebp, 0Fh
.text:004087BE                 jz      loc_4072E6
.text:004087C4                 lea     ebp, [edx+edx]
.text:004087C7                 mov     edx, [esp+97Ch+arg_C]
.text:004087CE                 cmp     ebp, 10000h
.text:004087D4                 mov     [edx+4], ebp
.text:004087D7                 jbe     short loc_4087E0
.text:004087D9                 mov     dword ptr [edx+4], 10000h
.text:004087E0
.text:004087E0 loc_4087E0:                             ; CODE XREF: sub_406ED0+1907↑j
.text:004087E0                 mov     eax, [esp+97Ch+arg_C]
.text:004087E7                 mov     ebp, 0Ch
.text:004087EC                 mov     edx, [eax+4]
.text:004087EF                 mov     [esp+97Ch+Size], edi ; Block
.text:004087F2                 mov     [esp+97Ch+var_978], edx ; Size
.text:004087F6                 call    realloc
.text:004087FB                 mov     edi, [esp+97Ch+arg_C]
.text:00408802                 test    eax, eax
.text:00408804                 mov     [edi], eax
.text:00408806                 jz      loc_4072E6
.text:0040880C                 cmp     ebx, eax
.text:0040880E                 jz      short loc_408844
.text:00408810                 mov     ecx, [esp+97Ch+var_908]
.text:00408814                 sub     eax, ebx
.text:00408816                 add     [esp+97Ch+var_950], eax
.text:0040881A                 add     [esp+97Ch+var_904], eax
.text:0040881E                 test    ecx, ecx
.text:00408820                 jz      short loc_408826
.text:00408822                 add     [esp+97Ch+var_908], eax
.text:00408826
.text:00408826 loc_408826:                             ; CODE XREF: sub_406ED0+1950↑j
.text:00408826                 mov     ebx, [esp+97Ch+var_900]
.text:0040882A                 test    ebx, ebx
.text:0040882C                 jz      short loc_408832
.text:0040882E                 add     [esp+97Ch+var_900], eax
.text:00408832
.text:00408832 loc_408832:                             ; CODE XREF: sub_406ED0+195C↑j
.text:00408832                 mov     esi, [esp+97Ch+var_8FC]
.text:00408839                 test    esi, esi
.text:0040883B                 jz      short loc_408844
.text:0040883D                 add     [esp+97Ch+var_8FC], eax
.text:00408844
.text:00408844 loc_408844:                             ; CODE XREF: sub_406ED0+193E↑j
.text:00408844                                         ; sub_406ED0+196B↑j
.text:00408844                 mov     edx, [esp+97Ch+arg_C]
.text:0040884B                 mov     eax, [esp+97Ch+arg_C]
.text:00408852                 mov     ebp, [esp+97Ch+var_950]
.text:00408856                 mov     edi, [edx]
.text:00408858                 mov     edx, [eax+4]
.text:0040885B                 sub     ebp, edi
.text:0040885D                 inc     ebp
.text:0040885E                 mov     ebx, edi
.text:00408860                 cmp     ebp, edx
.text:00408862                 ja      loc_4087B3
.text:00408868
.text:00408868 loc_408868:                             ; CODE XREF: sub_406ED0+18DD↑j
.text:00408868                 cld
.text:00408869                 mov     ebx, [esp+97Ch+var_950]
.text:0040886D                 xor     eax, eax
.text:0040886F                 mov     ecx, 8
.text:00408874                 mov     byte ptr [ebx], 20h ; ' '
.text:00408877                 inc     ebx
.text:00408878                 mov     edi, ebx
.text:0040887A                 mov     [esp+97Ch+var_950], ebx
.text:0040887E                 rep stosd
.text:00408880                 cmp     byte ptr [ebx-2], 5
.text:00408884                 jz      loc_40911F
.text:0040888A
.text:0040888A loc_40888A:                             ; CODE XREF: sub_406ED0+1ACD↓j
.text:0040888A                                         ; sub_406ED0+1BD8↓j ...
.text:0040888A                 mov     edx, [esp+97Ch+var_8D0]
.text:00408891                 cmp     edx, [esp+97Ch+var_8F4]
.text:00408898                 jz      loc_408B2F
.text:0040889E                 movzx   eax, byte ptr [edx]
.text:004088A1                 lea     edi, [edx+1]
.text:004088A4                 mov     ecx, [esp+97Ch+var_8F8]
.text:004088AB                 mov     [esp+97Ch+var_8D0], edi
.text:004088B2                 test    ecx, ecx
.text:004088B4                 mov     [esp+97Ch+var_8EC], al
.text:004088BB                 jz      short loc_4088D2
.text:004088BD                 mov     ebp, [esp+97Ch+var_8F8]
.text:004088C4                 movzx   esi, al
.text:004088C7                 movzx   ebx, byte ptr [esi+ebp]
.text:004088CB                 mov     [esp+97Ch+var_8EC], bl
.text:004088D2
.text:004088D2 loc_4088D2:                             ; CODE XREF: sub_406ED0+19EB↑j
.text:004088D2                 test    byte ptr [esp+97Ch+arg_8], 1
.text:004088DA                 jz      short loc_4088EA
.text:004088DC                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:004088E4                 jz      loc_4090C8
.text:004088EA
.text:004088EA loc_4088EA:                             ; CODE XREF: sub_406ED0+1A0A↑j
.text:004088EA                 cmp     [esp+97Ch+var_8EC], 5Dh ; ']'
.text:004088F2                 jz      loc_409084
.text:004088F8                 mov     edi, [esp+97Ch+var_8D0]
.text:004088FF
.text:004088FF loc_4088FF:                             ; CODE XREF: sub_406ED0+21C5↓j
.text:004088FF                 cmp     [esp+97Ch+var_91E], 0
.text:00408904                 jz      loc_408FE9
.text:0040890A                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:00408912                 jz      loc_408FE0
.text:00408918
.text:00408918 loc_408918:                             ; CODE XREF: sub_406ED0+2121↓j
.text:00408918                                         ; sub_406ED0+2137↓j ...
.text:00408918                 cmp     byte ptr [edi], 2Dh ; '-'
.text:0040891B                 jz      loc_408F50
.text:00408921
.text:00408921 loc_408921:                             ; CODE XREF: sub_406ED0+2084↓j
.text:00408921                 test    byte ptr [esp+97Ch+arg_8], 4
.text:00408929                 jz      short loc_408939
.text:0040892B                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:00408933                 jz      loc_408CB6
.text:00408939
.text:00408939 loc_408939:                             ; CODE XREF: sub_406ED0+1A59↑j
.text:00408939                                         ; sub_406ED0+1DE9↓j
.text:00408939                 test    byte ptr [esp+97Ch+arg_8], 4
.text:00408941                 jz      short loc_408951
.text:00408943                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:0040894B                 jz      loc_408B43
.text:00408951
.text:00408951 loc_408951:                             ; CODE XREF: sub_406ED0+1A71↑j
.text:00408951                                         ; sub_406ED0+1C76↓j
.text:00408951                 test    byte ptr [esp+97Ch+arg_8], 4
.text:00408959                 jz      short loc_408965
.text:0040895B                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:00408963                 jz      short loc_4089A2
.text:00408965
.text:00408965 loc_408965:                             ; CODE XREF: sub_406ED0+1A89↑j
.text:00408965                                         ; sub_406ED0+1AD5↓j
.text:00408965                 movzx   ecx, [esp+97Ch+var_8EC]
.text:0040896D                 mov     edx, 1
.text:00408972                 mov     [esp+97Ch+var_91E], 0
.text:00408977                 mov     esi, [esp+97Ch+var_950]
.text:0040897B                 shr     cl, 3
.text:0040897E                 movzx   edi, cl
.text:00408981                 movzx   ecx, [esp+97Ch+var_8EC]
.text:00408989                 and     ecx, 7
.text:0040898C                 shl     edx, cl
.text:0040898E                 or      [edi+esi], dl
.text:00408991                 movzx   ebx, [esp+97Ch+var_8EC]
.text:00408999
.text:00408999 loc_408999:                             ; CODE XREF: sub_406ED0+224A↓j
.text:00408999                 mov     [esp+97Ch+var_924], ebx
.text:0040899D                 jmp     loc_40888A
.text:004089A2 ; ---------------------------------------------------------------------------
.text:004089A2
.text:004089A2 loc_4089A2:                             ; CODE XREF: sub_406ED0+1A93↑j
.text:004089A2                 cmp     byte ptr [edi], 2Eh ; '.'
.text:004089A5                 jnz     short loc_408965
.text:004089A7                 cmp     edi, [esp+97Ch+var_8F4]
.text:004089AE                 mov     ebp, 0Eh
.text:004089B3                 jz      loc_4072E6
.text:004089B9                 inc     edi
.text:004089BA                 xor     ebx, ebx
.text:004089BC                 cmp     edi, [esp+97Ch+var_8F4]
.text:004089C3                 mov     [esp+97Ch+var_8D0], edi
.text:004089CA                 jz      loc_408B2F
.text:004089D0
.text:004089D0 loc_4089D0:                             ; CODE XREF: sub_406ED0+1B75↓j
.text:004089D0                 movzx   eax, byte ptr [edi]
.text:004089D3                 inc     edi
.text:004089D4                 mov     esi, [esp+97Ch+var_8F8]
.text:004089DB                 mov     [esp+97Ch+var_8D0], edi
.text:004089E2                 test    esi, esi
.text:004089E4                 mov     [esp+97Ch+var_8EC], al
.text:004089EB                 jz      short loc_408A03
.text:004089ED                 mov     esi, [esp+97Ch+var_8F8]
.text:004089F4                 movzx   ebp, al
.text:004089F7                 movzx   ecx, byte ptr [ebp+esi+0]
.text:004089FC                 mov     [esp+97Ch+var_8EC], cl
.text:00408A03
.text:00408A03 loc_408A03:                             ; CODE XREF: sub_406ED0+1B1B↑j
.text:00408A03                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:00408A0B                 jz      loc_408B21
.text:00408A11
.text:00408A11 loc_408A11:                             ; CODE XREF: sub_406ED0+1C54↓j
.text:00408A11                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408A18                 jz      short loc_408A5A
.text:00408A1A                 test    bl, bl
.text:00408A1C                 js      short loc_408A50
.text:00408A1E                 movzx   eax, [esp+97Ch+var_8EC]
.text:00408A26                 movzx   edx, bl
.text:00408A29                 inc     bl
.text:00408A2B                 mov     [esp+edx+97Ch+var_8CC], al
.text:00408A32                 mov     edi, [esp+97Ch+var_8D0]
.text:00408A39
.text:00408A39 loc_408A39:                             ; CODE XREF: sub_406ED0+1B88↓j
.text:00408A39                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408A40                 mov     ebp, 0Eh
.text:00408A45                 jnz     short loc_4089D0
.text:00408A47                 jmp     loc_4072E6
.text:00408A47 ; ---------------------------------------------------------------------------
.text:00408A4C                 align 10h
.text:00408A50
.text:00408A50 loc_408A50:                             ; CODE XREF: sub_406ED0+1B4C↑j
.text:00408A50                 mov     [esp+97Ch+var_8CC], 0
.text:00408A58                 jmp     short loc_408A39
.text:00408A5A ; ---------------------------------------------------------------------------
.text:00408A5A
.text:00408A5A loc_408A5A:                             ; CODE XREF: sub_406ED0+1B48↑j
.text:00408A5A                                         ; sub_406ED0+1C5A↓j
.text:00408A5A                 xor     ecx, ecx
.text:00408A5C                 movzx   edi, bl
.text:00408A5F                 mov     [esp+edi+97Ch+var_8CC], cl
.text:00408A66                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:00408A6E                 jz      short loc_408AAD
.text:00408A70
.text:00408A70 loc_408A70:                             ; CODE XREF: sub_406ED0+1BE7↓j
.text:00408A70                                         ; sub_406ED0+1BF3↓j
.text:00408A70                 cmp     bl, 0FFh
.text:00408A73                 jz      short loc_408A8F
.text:00408A75                 mov     eax, [esp+97Ch+var_8D0]
.text:00408A7C
.text:00408A7C loc_408A7C:                             ; CODE XREF: sub_406ED0+1BB6↓j
.text:00408A7C                 dec     bl
.text:00408A7E                 lea     edi, [eax-1]
.text:00408A81                 cmp     bl, 0FFh
.text:00408A84                 mov     eax, edi
.text:00408A86                 jnz     short loc_408A7C
.text:00408A88                 mov     [esp+97Ch+var_8D0], edi
.text:00408A8F
.text:00408A8F loc_408A8F:                             ; CODE XREF: sub_406ED0+1BA3↑j
.text:00408A8F                 mov     eax, [esp+97Ch+var_950]
.text:00408A93                 or      byte ptr [eax+0Bh], 8
.text:00408A97                 or      byte ptr [eax+5], 40h
.text:00408A9B                 mov     [esp+97Ch+var_924], 2Eh ; '.'
.text:00408AA3
.text:00408AA3 loc_408AA3:                             ; CODE XREF: sub_406ED0+1C3B↓j
.text:00408AA3                                         ; sub_406ED0+1D73↓j ...
.text:00408AA3                 mov     [esp+97Ch+var_91E], 0
.text:00408AA8                 jmp     loc_40888A
.text:00408AAD ; ---------------------------------------------------------------------------
.text:00408AAD
.text:00408AAD loc_408AAD:                             ; CODE XREF: sub_406ED0+1B9E↑j
.text:00408AAD                 mov     eax, [esp+97Ch+var_8D0]
.text:00408AB4                 cmp     byte ptr [eax], 5Dh ; ']'
.text:00408AB7                 jnz     short loc_408A70
.text:00408AB9                 movzx   ecx, [esp+97Ch+var_8CC]
.text:00408AC1                 test    cl, cl
.text:00408AC3                 jz      short loc_408A70
.text:00408AC5                 dec     bl
.text:00408AC7                 jnz     short loc_408B0D
.text:00408AC9                 cmp     eax, [esp+97Ch+var_8F4]
.text:00408AD0                 mov     ebp, 0Eh
.text:00408AD5                 jz      loc_4072E6
.text:00408ADB                 mov     bl, cl
.text:00408ADD                 mov     esi, [esp+97Ch+var_950]
.text:00408AE1                 lea     ebp, [eax+1]
.text:00408AE4                 mov     [esp+97Ch+var_8D0], ebp
.text:00408AEB                 shr     bl, 3
.text:00408AEE                 and     ecx, 7
.text:00408AF1                 mov     edx, 1
.text:00408AF6                 movzx   ebp, bl
.text:00408AF9                 shl     edx, cl
.text:00408AFB                 or      [ebp+esi+0], dl
.text:00408AFF                 movzx   ebx, [esp+97Ch+var_8CC]
.text:00408B07                 mov     [esp+97Ch+var_924], ebx
.text:00408B0B                 jmp     short loc_408AA3
.text:00408B0D ; ---------------------------------------------------------------------------
.text:00408B0D
.text:00408B0D loc_408B0D:                             ; CODE XREF: sub_406ED0+1BF7↑j
.text:00408B0D                                         ; sub_406ED0+1D92↓j
.text:00408B0D                 mov     edx, [esp+97Ch+Block]
.text:00408B14                 mov     ebp, 3
.text:00408B19                 mov     [esp+97Ch+Size], edx
.text:00408B1C                 jmp     loc_407473
.text:00408B21 ; ---------------------------------------------------------------------------
.text:00408B21
.text:00408B21 loc_408B21:                             ; CODE XREF: sub_406ED0+1B3B↑j
.text:00408B21                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00408B24                 jnz     loc_408A11
.text:00408B2A                 jmp     loc_408A5A
.text:00408B2F ; ---------------------------------------------------------------------------
.text:00408B2F
.text:00408B2F loc_408B2F:                             ; CODE XREF: sub_406ED0+1705↑j
.text:00408B2F                                         ; sub_406ED0+19C8↑j ...
.text:00408B2F                 mov     ebp, [esp+97Ch+Block]
.text:00408B36                 mov     [esp+97Ch+Size], ebp
.text:00408B39                 mov     ebp, 7
.text:00408B3E                 jmp     loc_407473
.text:00408B43 ; ---------------------------------------------------------------------------
.text:00408B43
.text:00408B43 loc_408B43:                             ; CODE XREF: sub_406ED0+1A7B↑j
.text:00408B43                 cmp     byte ptr [edi], 3Dh ; '='
.text:00408B46                 jnz     loc_408951
.text:00408B4C                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408B53                 mov     ebp, 0Eh
.text:00408B58                 jz      loc_4072E6
.text:00408B5E                 inc     edi
.text:00408B5F                 xor     ebx, ebx
.text:00408B61                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408B68                 mov     [esp+97Ch+var_8D0], edi
.text:00408B6F                 jz      short loc_408B2F
.text:00408B71
.text:00408B71 loc_408B71:                             ; CODE XREF: sub_406ED0+1D17↓j
.text:00408B71                 movzx   eax, byte ptr [edi]
.text:00408B74                 inc     edi
.text:00408B75                 mov     esi, [esp+97Ch+var_8F8]
.text:00408B7C                 mov     [esp+97Ch+var_8D0], edi
.text:00408B83                 test    esi, esi
.text:00408B85                 mov     [esp+97Ch+var_8EC], al
.text:00408B8C                 jz      short loc_408BA4
.text:00408B8E                 mov     esi, [esp+97Ch+var_8F8]
.text:00408B95                 movzx   ebp, al
.text:00408B98                 movzx   ecx, byte ptr [ebp+esi+0]
.text:00408B9D                 mov     [esp+97Ch+var_8EC], cl
.text:00408BA4
.text:00408BA4 loc_408BA4:                             ; CODE XREF: sub_406ED0+1CBC↑j
.text:00408BA4                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:00408BAC                 jz      loc_408CA8
.text:00408BB2
.text:00408BB2 loc_408BB2:                             ; CODE XREF: sub_406ED0+1DDB↓j
.text:00408BB2                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408BB9                 jz      short loc_408BFA
.text:00408BBB                 cmp     bl, 1
.text:00408BBE                 ja      short loc_408BF0
.text:00408BC0                 movzx   edx, [esp+97Ch+var_8EC]
.text:00408BC8                 movzx   edi, bl
.text:00408BCB                 inc     bl
.text:00408BCD                 mov     [esp+edi+97Ch+var_84C], dl
.text:00408BD4                 mov     edi, [esp+97Ch+var_8D0]
.text:00408BDB
.text:00408BDB loc_408BDB:                             ; CODE XREF: sub_406ED0+1D28↓j
.text:00408BDB                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408BE2                 mov     ebp, 0Eh
.text:00408BE7                 jnz     short loc_408B71
.text:00408BE9                 jmp     loc_4072E6
.text:00408BE9 ; ---------------------------------------------------------------------------
.text:00408BEE                 align 10h
.text:00408BF0
.text:00408BF0 loc_408BF0:                             ; CODE XREF: sub_406ED0+1CEE↑j
.text:00408BF0                 mov     [esp+97Ch+var_84C], 0
.text:00408BF8                 jmp     short loc_408BDB
.text:00408BFA ; ---------------------------------------------------------------------------
.text:00408BFA
.text:00408BFA loc_408BFA:                             ; CODE XREF: sub_406ED0+1CE9↑j
.text:00408BFA                                         ; sub_406ED0+1DE1↓j
.text:00408BFA                 xor     eax, eax
.text:00408BFC                 movzx   ecx, bl
.text:00408BFF                 mov     [esp+ecx+97Ch+var_84C], al
.text:00408C06                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:00408C0E                 jz      short loc_408C48
.text:00408C10
.text:00408C10 loc_408C10:                             ; CODE XREF: sub_406ED0+1D82↓j
.text:00408C10                                         ; sub_406ED0+1D8E↓j
.text:00408C10                 cmp     bl, 0FFh
.text:00408C13                 jz      short loc_408C2F
.text:00408C15                 mov     eax, [esp+97Ch+var_8D0]
.text:00408C1C
.text:00408C1C loc_408C1C:                             ; CODE XREF: sub_406ED0+1D56↓j
.text:00408C1C                 dec     bl
.text:00408C1E                 lea     edi, [eax-1]
.text:00408C21                 cmp     bl, 0FFh
.text:00408C24                 mov     eax, edi
.text:00408C26                 jnz     short loc_408C1C
.text:00408C28                 mov     [esp+97Ch+var_8D0], edi
.text:00408C2F
.text:00408C2F loc_408C2F:                             ; CODE XREF: sub_406ED0+1D43↑j
.text:00408C2F                 mov     edi, [esp+97Ch+var_950]
.text:00408C33                 or      byte ptr [edi+0Bh], 8
.text:00408C37                 or      byte ptr [edi+7], 20h
.text:00408C3B                 mov     [esp+97Ch+var_924], 3Dh ; '='
.text:00408C43                 jmp     loc_408AA3
.text:00408C48 ; ---------------------------------------------------------------------------
.text:00408C48
.text:00408C48 loc_408C48:                             ; CODE XREF: sub_406ED0+1D3E↑j
.text:00408C48                 mov     eax, [esp+97Ch+var_8D0]
.text:00408C4F                 cmp     byte ptr [eax], 5Dh ; ']'
.text:00408C52                 jnz     short loc_408C10
.text:00408C54                 movzx   ecx, [esp+97Ch+var_84C]
.text:00408C5C                 test    cl, cl
.text:00408C5E                 jz      short loc_408C10
.text:00408C60                 dec     bl
.text:00408C62                 jnz     loc_408B0D
.text:00408C68                 cmp     eax, [esp+97Ch+var_8F4]
.text:00408C6F                 mov     ebp, 0Eh
.text:00408C74                 jz      loc_4072E6
.text:00408C7A                 mov     dl, cl
.text:00408C7C                 mov     esi, [esp+97Ch+var_950]
.text:00408C80                 lea     ebp, [eax+1]
.text:00408C83                 mov     [esp+97Ch+var_8D0], ebp
.text:00408C8A                 shr     dl, 3
.text:00408C8D                 and     ecx, 7
.text:00408C90                 mov     ebx, 1
.text:00408C95                 movzx   ebp, dl
.text:00408C98                 shl     ebx, cl
.text:00408C9A                 or      [ebp+esi+0], bl
.text:00408C9E                 mov     [esp+97Ch+var_91E], 1
.text:00408CA3                 jmp     loc_40888A
.text:00408CA8 ; ---------------------------------------------------------------------------
.text:00408CA8
.text:00408CA8 loc_408CA8:                             ; CODE XREF: sub_406ED0+1CDC↑j
.text:00408CA8                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00408CAB                 jnz     loc_408BB2
.text:00408CB1                 jmp     loc_408BFA
.text:00408CB6 ; ---------------------------------------------------------------------------
.text:00408CB6
.text:00408CB6 loc_408CB6:                             ; CODE XREF: sub_406ED0+1A63↑j
.text:00408CB6                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00408CB9                 jnz     loc_408939
.text:00408CBF                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408CC6                 mov     ebp, 0Eh
.text:00408CCB                 jz      loc_4072E6
.text:00408CD1                 inc     edi
.text:00408CD2                 xor     ebx, ebx
.text:00408CD4                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408CDB                 mov     [esp+97Ch+var_8D0], edi
.text:00408CE2                 jz      loc_408B2F
.text:00408CE8
.text:00408CE8 loc_408CE8:                             ; CODE XREF: sub_406ED0+1E89↓j
.text:00408CE8                 movzx   ecx, byte ptr [edi]
.text:00408CEB                 inc     edi
.text:00408CEC                 mov     ebp, [esp+97Ch+var_8F8]
.text:00408CF3                 mov     [esp+97Ch+var_8D0], edi
.text:00408CFA                 test    ebp, ebp
.text:00408CFC                 mov     [esp+97Ch+var_8EC], cl
.text:00408D03                 jz      short loc_408D1B
.text:00408D05                 movzx   ebp, cl
.text:00408D08                 mov     ecx, [esp+97Ch+var_8F8]
.text:00408D0F                 movzx   edx, byte ptr [ebp+ecx+0]
.text:00408D14                 mov     [esp+97Ch+var_8EC], dl
.text:00408D1B
.text:00408D1B loc_408D1B:                             ; CODE XREF: sub_406ED0+1E33↑j
.text:00408D1B                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:00408D23                 jz      loc_408F40
.text:00408D29
.text:00408D29 loc_408D29:                             ; CODE XREF: sub_406ED0+2073↓j
.text:00408D29                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408D30                 jz      short loc_408D60
.text:00408D32                 movzx   eax, [esp+97Ch+var_8EC]
.text:00408D3A                 movzx   esi, bl
.text:00408D3D                 inc     bl
.text:00408D3F                 mov     ebp, 0Eh
.text:00408D44                 mov     [esp+esi+97Ch+name], al
.text:00408D4B                 mov     edi, [esp+97Ch+var_8D0]
.text:00408D52                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408D59                 jnz     short loc_408CE8
.text:00408D5B                 jmp     loc_4072E6
.text:00408D60 ; ---------------------------------------------------------------------------
.text:00408D60
.text:00408D60 loc_408D60:                             ; CODE XREF: sub_406ED0+1E60↑j
.text:00408D60                                         ; sub_406ED0+2079↓j
.text:00408D60                 xor     eax, eax
.text:00408D62                 movzx   edi, bl
.text:00408D65                 mov     [esp+edi+97Ch+name], al
.text:00408D6C                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:00408D74                 jz      short loc_408DAE
.text:00408D76
.text:00408D76 loc_408D76:                             ; CODE XREF: sub_406ED0+1EE8↓j
.text:00408D76                 cmp     bl, 0FFh
.text:00408D79                 jz      short loc_408D95
.text:00408D7B                 mov     eax, [esp+97Ch+var_8D0]
.text:00408D82
.text:00408D82 loc_408D82:                             ; CODE XREF: sub_406ED0+1EBC↓j
.text:00408D82                 dec     bl
.text:00408D84                 lea     edi, [eax-1]
.text:00408D87                 cmp     bl, 0FFh
.text:00408D8A                 mov     eax, edi
.text:00408D8C                 jnz     short loc_408D82
.text:00408D8E                 mov     [esp+97Ch+var_8D0], edi
.text:00408D95
.text:00408D95 loc_408D95:                             ; CODE XREF: sub_406ED0+1EA9↑j
.text:00408D95                 mov     eax, [esp+97Ch+var_950]
.text:00408D99                 or      byte ptr [eax+0Bh], 8
.text:00408D9D                 or      byte ptr [eax+7], 4
.text:00408DA1                 mov     [esp+97Ch+var_924], 3Ah ; ':'
.text:00408DA9                 jmp     loc_408AA3
.text:00408DAE ; ---------------------------------------------------------------------------
.text:00408DAE
.text:00408DAE loc_408DAE:                             ; CODE XREF: sub_406ED0+1EA4↑j
.text:00408DAE                 mov     esi, [esp+97Ch+var_8D0]
.text:00408DB5                 cmp     byte ptr [esi], 5Dh ; ']'
.text:00408DB8                 jnz     short loc_408D76
.text:00408DBA                 cld
.text:00408DBB                 mov     edi, offset aLower ; "lower"
.text:00408DC0                 lea     ebx, [esp+97Ch+name]
.text:00408DC7                 mov     esi, ebx
.text:00408DC9                 mov     ecx, 6
.text:00408DCE                 lea     ebp, [esp+97Ch+name]
.text:00408DD5                 repe cmpsb
.text:00408DD7                 setz    [esp+97Ch+var_925]
.text:00408DDC                 mov     ecx, 6
.text:00408DE1                 mov     edi, offset aUpper ; "upper"
.text:00408DE6                 mov     esi, ebp
.text:00408DE8                 lea     edx, [esp+97Ch+name]
.text:00408DEF                 repe cmpsb
.text:00408DF1                 setz    [esp+97Ch+var_926]
.text:00408DF6                 mov     [esp+97Ch+Size], edx ; name
.text:00408DF9                 call    wctype
.text:00408DFE                 movzx   ebx, ax
.text:00408E01                 test    bx, bx
.text:00408E04                 mov     dword ptr [esp+97Ch+Type], ebx
.text:00408E08                 jz      loc_408F2C
.text:00408E0E                 mov     eax, [esp+97Ch+var_8D0]
.text:00408E15                 mov     ebp, 0Eh
.text:00408E1A                 cmp     eax, [esp+97Ch+var_8F4]
.text:00408E21                 jz      loc_4072E6
.text:00408E27                 lea     ecx, [eax+1]
.text:00408E2A                 cmp     ecx, [esp+97Ch+var_8F4]
.text:00408E31                 mov     [esp+97Ch+var_8D0], ecx
.text:00408E38                 jz      loc_408B2F
.text:00408E3E                 xor     edi, edi
.text:00408E40
.text:00408E40 loc_408E40:                             ; CODE XREF: sub_406ED0+202E↓j
.text:00408E40                 mov     [esp+97Ch+Size], edi ; Ch
.text:00408E43                 call    btowc
.text:00408E48                 mov     ebp, dword ptr [esp+97Ch+Type]
.text:00408E4C                 movzx   esi, ax
.text:00408E4F                 mov     [esp+97Ch+Size], esi ; C
.text:00408E52                 mov     [esp+97Ch+var_978], ebp ; Type
.text:00408E56                 call    iswctype
.text:00408E5B                 test    eax, eax
.text:00408E5D                 jz      short loc_408E7C
.text:00408E5F                 mov     ecx, edi
.text:00408E61                 mov     ebx, edi
.text:00408E63                 mov     edx, [esp+97Ch+var_950]
.text:00408E67                 shr     cl, 3
.text:00408E6A                 movzx   esi, cl
.text:00408E6D                 mov     ecx, ebx
.text:00408E6F                 and     ecx, 7
.text:00408E72                 mov     ebx, 1
.text:00408E77                 shl     ebx, cl
.text:00408E79                 or      [esi+edx], bl
.text:00408E7C
.text:00408E7C loc_408E7C:                             ; CODE XREF: sub_406ED0+1F8D↑j
.text:00408E7C                 mov     eax, [esp+97Ch+var_8F8]
.text:00408E83                 test    eax, eax
.text:00408E85                 jz      short loc_408EF2
.text:00408E87                 cmp     [esp+97Ch+var_926], 0
.text:00408E8C                 jnz     short loc_408E95
.text:00408E8E                 cmp     [esp+97Ch+var_925], 0
.text:00408E93                 jz      short loc_408EF2
.text:00408E95
.text:00408E95 loc_408E95:                             ; CODE XREF: sub_406ED0+1FBC↑j
.text:00408E95                 mov     ebp, ds:__mb_cur_max
.text:00408E9B                 cmp     dword ptr [ebp+0], 1
.text:00408E9F                 jz      short loc_408F1B
.text:00408EA1                 mov     [esp+97Ch+var_978], 1 ; Type
.text:00408EA9                 mov     [esp+97Ch+Size], edi ; C
.text:00408EAC                 call    _isctype
.text:00408EB1
.text:00408EB1 loc_408EB1:                             ; CODE XREF: sub_406ED0+205A↓j
.text:00408EB1                 test    eax, eax
.text:00408EB3                 jnz     short loc_408ED4
.text:00408EB5                 mov     ebx, ds:__mb_cur_max
.text:00408EBB                 cmp     dword ptr [ebx], 1
.text:00408EBE                 jz      short loc_408F09
.text:00408EC0                 mov     [esp+97Ch+var_978], 2 ; Type
.text:00408EC8                 mov     [esp+97Ch+Size], edi ; C
.text:00408ECB                 call    _isctype
.text:00408ED0
.text:00408ED0 loc_408ED0:                             ; CODE XREF: sub_406ED0+2049↓j
.text:00408ED0                 test    eax, eax
.text:00408ED2                 jz      short loc_408EF2
.text:00408ED4
.text:00408ED4 loc_408ED4:                             ; CODE XREF: sub_406ED0+1FE3↑j
.text:00408ED4                 mov     ecx, edi
.text:00408ED6                 mov     ebx, edi
.text:00408ED8                 mov     edx, [esp+97Ch+var_950]
.text:00408EDC                 shr     cl, 3
.text:00408EDF                 movzx   ebp, cl
.text:00408EE2                 mov     ecx, ebx
.text:00408EE4                 and     ecx, 7
.text:00408EE7                 mov     ebx, 1
.text:00408EEC                 shl     ebx, cl
.text:00408EEE                 or      [ebp+edx+0], bl
.text:00408EF2
.text:00408EF2 loc_408EF2:                             ; CODE XREF: sub_406ED0+1FB5↑j
.text:00408EF2                                         ; sub_406ED0+1FC3↑j ...
.text:00408EF2                 mov     [esp+97Ch+var_91E], 1
.text:00408EF7                 inc     edi
.text:00408EF8                 cmp     edi, 0FFh
.text:00408EFE                 jle     loc_408E40
.text:00408F04                 jmp     loc_40888A
.text:00408F09 ; ---------------------------------------------------------------------------
.text:00408F09
.text:00408F09 loc_408F09:                             ; CODE XREF: sub_406ED0+1FEE↑j
.text:00408F09                 mov     ebp, ds:_pctype
.text:00408F0F                 mov     ecx, [ebp+0]
.text:00408F12                 movzx   eax, word ptr [ecx+edi*2]
.text:00408F16                 and     eax, 2
.text:00408F19                 jmp     short loc_408ED0
.text:00408F1B ; ---------------------------------------------------------------------------
.text:00408F1B
.text:00408F1B loc_408F1B:                             ; CODE XREF: sub_406ED0+1FCF↑j
.text:00408F1B                 mov     edx, ds:_pctype
.text:00408F21                 mov     esi, [edx]
.text:00408F23                 movzx   eax, word ptr [esi+edi*2]
.text:00408F27                 and     eax, 1
.text:00408F2A                 jmp     short loc_408EB1
.text:00408F2C ; ---------------------------------------------------------------------------
.text:00408F2C
.text:00408F2C loc_408F2C:                             ; CODE XREF: sub_406ED0+1F38↑j
.text:00408F2C                 mov     ebx, [esp+97Ch+Block]
.text:00408F33                 mov     ebp, 4
.text:00408F38
.text:00408F38 loc_408F38:                             ; CODE XREF: sub_406ED0+26A5↓j
.text:00408F38                 mov     [esp+97Ch+Size], ebx
.text:00408F3B                 jmp     loc_407473
.text:00408F40 ; ---------------------------------------------------------------------------
.text:00408F40
.text:00408F40 loc_408F40:                             ; CODE XREF: sub_406ED0+1E53↑j
.text:00408F40                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00408F43                 jnz     loc_408D29
.text:00408F49                 jmp     loc_408D60
.text:00408F49 ; ---------------------------------------------------------------------------
.text:00408F4E                 align 10h
.text:00408F50
.text:00408F50 loc_408F50:                             ; CODE XREF: sub_406ED0+1A4B↑j
.text:00408F50                 cmp     byte ptr [edi+1], 5Dh ; ']'
.text:00408F54                 jz      loc_408921
.text:00408F5A                 cmp     edi, [esp+97Ch+var_8F4]
.text:00408F61                 mov     ebp, 0Eh
.text:00408F66                 jz      loc_4072E6
.text:00408F6C                 movzx   ebp, [esp+97Ch+var_8EC]
.text:00408F74                 inc     edi
.text:00408F75                 mov     ecx, [esp+97Ch+var_950]
.text:00408F79                 mov     [esp+97Ch+var_8D0], edi
.text:00408F80                 mov     edx, [esp+97Ch+arg_8]
.text:00408F87                 lea     edi, [esp+97Ch+var_8D0]
.text:00408F8E                 mov     [esp+97Ch+var_978], edi
.text:00408F92                 mov     ebx, [esp+97Ch+var_8F8]
.text:00408F99                 mov     eax, [esp+97Ch+var_8F4]
.text:00408FA0                 mov     [esp+97Ch+var_968], ecx
.text:00408FA4                 mov     [esp+97Ch+var_96C], edx
.text:00408FA8                 mov     [esp+97Ch+var_970], ebx
.text:00408FAC                 mov     [esp+97Ch+var_974], eax
.text:00408FB0                 mov     [esp+97Ch+Size], ebp
.text:00408FB3
.text:00408FB3 loc_408FB3:                             ; CODE XREF: sub_406ED0+2193↓j
.text:00408FB3                 call    sub_403E60
.text:00408FB8                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:00408FC0                 test    eax, eax
.text:00408FC2                 mov     ebx, eax
.text:00408FC4                 jz      loc_40888A
.text:00408FCA                 mov     esi, [esp+97Ch+Block]
.text:00408FD1                 mov     ebp, ebx
.text:00408FD3
.text:00408FD3 loc_408FD3:                             ; CODE XREF: sub_406ED0+318E↓j
.text:00408FD3                 mov     [esp+97Ch+Size], esi
.text:00408FD6                 jmp     loc_407473
.text:00408FD6 ; ---------------------------------------------------------------------------
.text:00408FDB                 align 10h
.text:00408FE0
.text:00408FE0 loc_408FE0:                             ; CODE XREF: sub_406ED0+1A42↑j
.text:00408FE0                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00408FE3                 jnz     loc_409073
.text:00408FE9
.text:00408FE9 loc_408FE9:                             ; CODE XREF: sub_406ED0+1A34↑j
.text:00408FE9                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:00408FF1                 jnz     loc_408918
.text:00408FF7                 lea     esi, [edi-2]
.text:00408FFA                 cmp     esi, [esp+97Ch+arg_0]
.text:00409001                 jb      short loc_40900D
.text:00409003                 cmp     byte ptr [edi-2], 5Bh ; '['
.text:00409007                 jz      loc_408918
.text:0040900D
.text:0040900D loc_40900D:                             ; CODE XREF: sub_406ED0+2131↑j
.text:0040900D                 lea     ebp, [edi-3]
.text:00409010                 cmp     ebp, [esp+97Ch+arg_0]
.text:00409017                 jb      short loc_40901F
.text:00409019                 cmp     byte ptr [edi-3], 5Bh ; '['
.text:0040901D                 jz      short loc_409068
.text:0040901F
.text:0040901F loc_40901F:                             ; CODE XREF: sub_406ED0+2147↑j
.text:0040901F                                         ; sub_406ED0+219C↓j
.text:0040901F                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00409022                 jz      loc_408918
.text:00409028                 mov     esi, [esp+97Ch+var_950]
.text:0040902C                 lea     edi, [esp+97Ch+var_8D0]
.text:00409033                 mov     ecx, [esp+97Ch+arg_8]
.text:0040903A                 mov     [esp+97Ch+var_978], edi
.text:0040903E                 mov     ebx, [esp+97Ch+var_8F8]
.text:00409045                 mov     edx, [esp+97Ch+var_8F4]
.text:0040904C                 mov     [esp+97Ch+var_968], esi
.text:00409050                 mov     eax, [esp+97Ch+var_924]
.text:00409054                 mov     [esp+97Ch+var_96C], ecx
.text:00409058                 mov     [esp+97Ch+var_970], ebx
.text:0040905C                 mov     [esp+97Ch+var_974], edx
.text:00409060                 mov     [esp+97Ch+Size], eax
.text:00409063                 jmp     loc_408FB3
.text:00409068 ; ---------------------------------------------------------------------------
.text:00409068
.text:00409068 loc_409068:                             ; CODE XREF: sub_406ED0+214D↑j
.text:00409068                 cmp     byte ptr [edi-2], 5Eh ; '^'
.text:0040906C                 jnz     short loc_40901F
.text:0040906E                 jmp     loc_408918
.text:00409073 ; ---------------------------------------------------------------------------
.text:00409073
.text:00409073 loc_409073:                             ; CODE XREF: sub_406ED0+2113↑j
.text:00409073                 mov     ecx, [esp+97Ch+Block]
.text:0040907A                 mov     ebp, 0Bh
.text:0040907F                 jmp     loc_407DAC
.text:00409084 ; ---------------------------------------------------------------------------
.text:00409084
.text:00409084 loc_409084:                             ; CODE XREF: sub_406ED0+1A22↑j
.text:00409084                 mov     ebx, [esp+97Ch+var_8F0]
.text:0040908B                 mov     edi, [esp+97Ch+var_8D0]
.text:00409092                 inc     ebx
.text:00409093                 cmp     edi, ebx
.text:00409095                 jz      loc_4088FF
.text:0040909B
.text:0040909B loc_40909B:                             ; CODE XREF: sub_406ED0+21EA↓j
.text:0040909B                 mov     edi, [esp+97Ch+var_950]
.text:0040909F                 movzx   edx, byte ptr [edi-1]
.text:004090A3                 test    dl, dl
.text:004090A5                 jz      short loc_4090BC
.text:004090A7                 movzx   ebp, dl
.text:004090AA                 cmp     byte ptr [ebp+edi-1], 0
.text:004090AF                 jnz     short loc_4090BC
.text:004090B1                 mov     ebx, [esp+97Ch+var_950]
.text:004090B5                 dec     dl
.text:004090B7                 mov     [ebx-1], dl
.text:004090BA                 jmp     short loc_40909B
.text:004090BC ; ---------------------------------------------------------------------------
.text:004090BC
.text:004090BC loc_4090BC:                             ; CODE XREF: sub_406ED0+21D5↑j
.text:004090BC                                         ; sub_406ED0+21DF↑j
.text:004090BC                 movzx   edi, dl
.text:004090BF                 add     [esp+97Ch+var_950], edi
.text:004090C3                 jmp     loc_4072FF
.text:004090C8 ; ---------------------------------------------------------------------------
.text:004090C8
.text:004090C8 loc_4090C8:                             ; CODE XREF: sub_406ED0+1A14↑j
.text:004090C8                 cmp     edi, [esp+97Ch+var_8F4]
.text:004090CF                 jz      loc_408480
.text:004090D5                 movzx   ebx, byte ptr [edx+1]
.text:004090D9                 lea     ecx, [edx+2]
.text:004090DC                 mov     eax, [esp+97Ch+var_8F8]
.text:004090E3                 mov     [esp+97Ch+var_8D0], ecx
.text:004090EA                 test    eax, eax
.text:004090EC                 jz      short loc_4090FC
.text:004090EE                 mov     edx, [esp+97Ch+var_8F8]
.text:004090F5                 movzx   edi, bl
.text:004090F8                 movzx   ebx, byte ptr [edi+edx]
.text:004090FC
.text:004090FC loc_4090FC:                             ; CODE XREF: sub_406ED0+221C↑j
.text:004090FC                 mov     cl, bl
.text:004090FE                 mov     ebp, [esp+97Ch+var_950]
.text:00409102                 mov     edx, 1
.text:00409107                 shr     cl, 3
.text:0040910A                 movzx   esi, cl
.text:0040910D                 mov     ecx, ebx
.text:0040910F                 and     ecx, 7
.text:00409112                 movzx   ebx, bl
.text:00409115                 shl     edx, cl
.text:00409117                 or      [esi+ebp], dl
.text:0040911A                 jmp     loc_408999
.text:0040911F ; ---------------------------------------------------------------------------
.text:0040911F
.text:0040911F loc_40911F:                             ; CODE XREF: sub_406ED0+19B4↑j
.text:0040911F                 test    [esp+97Ch+arg_8], 100h
.text:0040912A                 jz      loc_40888A
.text:00409130                 or      byte ptr [ebx+1], 4
.text:00409134                 jmp     loc_40888A
.text:00409139 ; ---------------------------------------------------------------------------
.text:00409139
.text:00409139 loc_409139:                             ; CODE XREF: sub_406ED0+18B2↑j
.text:00409139                 inc     edi
.text:0040913A                 mov     [esp+97Ch+var_8D0], edi
.text:00409141                 jmp     loc_408788
.text:00409146 ; ---------------------------------------------------------------------------
.text:00409146
.text:00409146 loc_409146:                             ; CODE XREF: sub_406ED0+16F↑j
.text:00409146                                         ; DATA XREF: sub_406ED0:jpt_40703F↑o
.text:00409146                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 0040703F case 92
.text:0040914D                 cmp     eax, [esp+97Ch+var_8F4]
.text:00409154                 jz      loc_408480
.text:0040915A                 movzx   ecx, byte ptr [eax]
.text:0040915D                 lea     ebx, [eax+1]
.text:00409160                 mov     [esp+97Ch+var_8D0], ebx
.text:00409167                 movzx   eax, cl
.text:0040916A                 sub     eax, 27h ; '''  ; switch 86 cases
.text:0040916D                 mov     [esp+97Ch+var_8EC], cl
.text:00409174                 cmp     eax, 55h
.text:00409177                 ja      def_40917D      ; jumptable 0040917D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040917D                 jmp     ds:jpt_40917D[eax*4] ; switch jump
.text:0040917D ; ---------------------------------------------------------------------------
.text:00409184 jpt_40917D      dd offset loc_40931B, offset loc_4092DC, offset loc_4093ED
.text:00409184                                         ; DATA XREF: sub_406ED0+22AD↑r
.text:00409184                 dd offset def_40917D, offset loc_40971E, offset def_40917D ; jump table for switch statement
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset loc_409423, offset loc_409423
.text:00409184                 dd offset loc_409423, offset loc_409423, offset loc_409423
.text:00409184                 dd offset loc_409423, offset loc_409423, offset loc_409423
.text:00409184                 dd offset loc_409423, offset def_40917D, offset def_40917D
.text:00409184                 dd offset loc_40957A, offset def_40917D, offset loc_40964C
.text:00409184                 dd offset loc_40971E, offset def_40917D, offset def_40917D
.text:00409184                 dd offset loc_409731, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset loc_409803, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset loc_4098F6, offset def_40917D, offset loc_4099C8
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset def_40917D, offset def_40917D, offset loc_409A9A
.text:00409184                 dd offset def_40917D, offset def_40917D, offset def_40917D
.text:00409184                 dd offset loc_409B8F, offset loc_40A139
.text:004092DC ; ---------------------------------------------------------------------------
.text:004092DC
.text:004092DC loc_4092DC:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:004092DC                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:004092DC                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040917D case 40
.text:004092E7                 jz      loc_407A8D
.text:004092ED
.text:004092ED def_40917D:                             ; CODE XREF: sub_406ED0+22A7↑j
.text:004092ED                                         ; sub_406ED0+22AD↑j ...
.text:004092ED                 mov     ebx, [esp+97Ch+var_8F8] ; jumptable 0040917D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:004092F4                 test    ebx, ebx
.text:004092F6                 jz      def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004092FC                 movzx   edi, [esp+97Ch+var_8EC]
.text:00409304                 mov     esi, [esp+97Ch+var_8F8]
.text:0040930B                 movzx   ecx, byte ptr [edi+esi]
.text:0040930F                 mov     [esp+97Ch+var_8EC], cl
.text:00409316                 jmp     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040931B ; ---------------------------------------------------------------------------
.text:0040931B
.text:0040931B loc_40931B:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:0040931B                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:0040931B                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040917D case 39
.text:00409326                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040932C
.text:0040932C loc_40932C:                             ; CODE XREF: sub_406ED0+24D2↓j
.text:0040932C                                         ; sub_406ED0+24FF↓j ...
.text:0040932C                 mov     eax, [esp+97Ch+arg_C]
.text:00409333                 mov     ebp, [esp+97Ch+var_950]
.text:00409337                 mov     edi, [eax]
.text:00409339                 mov     edx, [eax+4]
.text:0040933C                 sub     ebp, edi
.text:0040933E                 inc     ebp
.text:0040933F                 cmp     ebp, edx
.text:00409341                 jbe     loc_4093E1
.text:00409347                 cmp     edx, 10000h
.text:0040934D                 mov     ebp, 0Fh
.text:00409352                 jz      loc_4072E6
.text:00409358                 lea     ebp, [edx+edx]
.text:0040935B                 mov     edx, [esp+97Ch+arg_C]
.text:00409362                 cmp     ebp, 10000h
.text:00409368                 mov     [edx+4], ebp
.text:0040936B                 jbe     short loc_409374
.text:0040936D                 mov     dword ptr [edx+4], 10000h
.text:00409374
.text:00409374 loc_409374:                             ; CODE XREF: sub_406ED0+249B↑j
.text:00409374                 mov     ebx, [esp+97Ch+arg_C]
.text:0040937B                 mov     ebp, 0Ch
.text:00409380                 mov     esi, [ebx+4]
.text:00409383                 mov     [esp+97Ch+Size], edi ; Block
.text:00409386                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040938A                 call    realloc
.text:0040938F                 mov     edx, [esp+97Ch+arg_C]
.text:00409396                 test    eax, eax
.text:00409398                 mov     [edx], eax
.text:0040939A                 jz      loc_4072E6
.text:004093A0                 cmp     edi, eax
.text:004093A2                 jz      short loc_40932C
.text:004093A4                 sub     eax, edi
.text:004093A6                 mov     edi, [esp+97Ch+var_908]
.text:004093AA                 add     [esp+97Ch+var_950], eax
.text:004093AE                 add     [esp+97Ch+var_904], eax
.text:004093B2                 test    edi, edi
.text:004093B4                 jz      short loc_4093BA
.text:004093B6                 add     [esp+97Ch+var_908], eax
.text:004093BA
.text:004093BA loc_4093BA:                             ; CODE XREF: sub_406ED0+24E4↑j
.text:004093BA                 mov     ecx, [esp+97Ch+var_900]
.text:004093BE                 test    ecx, ecx
.text:004093C0                 jz      short loc_4093C6
.text:004093C2                 add     [esp+97Ch+var_900], eax
.text:004093C6
.text:004093C6 loc_4093C6:                             ; CODE XREF: sub_406ED0+24F0↑j
.text:004093C6                 mov     edx, [esp+97Ch+var_8FC]
.text:004093CD                 test    edx, edx
.text:004093CF                 jz      loc_40932C
.text:004093D5                 add     [esp+97Ch+var_8FC], eax
.text:004093DC                 jmp     loc_40932C
.text:004093E1 ; ---------------------------------------------------------------------------
.text:004093E1
.text:004093E1 loc_4093E1:                             ; CODE XREF: sub_406ED0+2471↑j
.text:004093E1                 mov     edi, [esp+97Ch+var_950]
.text:004093E5                 mov     byte ptr [edi], 0Ch
.text:004093E8                 jmp     loc_4072FA
.text:004093ED ; ---------------------------------------------------------------------------
.text:004093ED
.text:004093ED loc_4093ED:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:004093ED                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:004093ED                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040917D case 41
.text:004093F8                 jnz     def_40917D      ; jumptable 0040917D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:004093FE                 mov     edi, [esp+97Ch+var_24]
.text:00409405                 test    edi, edi
.text:00409407                 jnz     loc_407C77
.text:0040940D                 test    [esp+97Ch+arg_8], 20000h
.text:00409418                 jnz     def_40917D      ; jumptable 0040917D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040941E                 jmp     loc_407DA0
.text:00409423 ; ---------------------------------------------------------------------------
.text:00409423
.text:00409423 loc_409423:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:00409423                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:00409423                 test    [esp+97Ch+arg_8], 4000h ; jumptable 0040917D cases 49-57
.text:0040942E                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00409434                 movzx   ebx, [esp+97Ch+var_8EC]
.text:0040943C                 sub     bl, 30h ; '0'
.text:0040943F                 movzx   eax, bl
.text:00409442                 cmp     eax, [esp+97Ch+var_90C]
.text:00409446                 ja      loc_409569
.text:0040944C                 mov     [esp+97Ch+var_970], eax
.text:00409450                 mov     ecx, [esp+97Ch+Block]
.text:00409457                 mov     edi, [esp+97Ch+var_28]
.text:0040945E                 mov     esi, [esp+97Ch+var_24]
.text:00409465                 mov     [esp+97Ch+Size], ecx
.text:00409468                 mov     [esp+97Ch+var_978], edi
.text:0040946C                 mov     [esp+97Ch+var_974], esi
.text:00409470                 call    sub_4068B0
.text:00409475                 test    al, al
.text:00409477                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040947D                 mov     esi, [esp+97Ch+arg_C]
.text:00409484                 mov     ebp, [esp+97Ch+var_950]
.text:00409488                 mov     edi, [esi]
.text:0040948A                 mov     [esp+97Ch+var_900], ebp
.text:0040948E                 mov     edx, [esi+4]
.text:00409491                 sub     ebp, edi
.text:00409493                 mov     [esp+97Ch+var_940], edi
.text:00409497                 add     ebp, 2
.text:0040949A                 cmp     ebp, edx
.text:0040949C                 jbe     loc_40955A
.text:004094A2
.text:004094A2 loc_4094A2:                             ; CODE XREF: sub_406ED0+2684↓j
.text:004094A2                 cmp     edx, 10000h
.text:004094A8                 mov     ebp, 0Fh
.text:004094AD                 jz      loc_4072E6
.text:004094B3                 mov     esi, [esp+97Ch+arg_C]
.text:004094BA                 lea     ecx, [edx+edx]
.text:004094BD                 cmp     ecx, 10000h
.text:004094C3                 mov     [esi+4], ecx
.text:004094C6                 jbe     short loc_4094CF
.text:004094C8                 mov     dword ptr [esi+4], 10000h
.text:004094CF
.text:004094CF loc_4094CF:                             ; CODE XREF: sub_406ED0+25F6↑j
.text:004094CF                 mov     eax, [esp+97Ch+arg_C]
.text:004094D6                 mov     ebp, [eax+4]
.text:004094D9                 mov     [esp+97Ch+Size], edi ; Block
.text:004094DC                 mov     [esp+97Ch+var_978], ebp ; Size
.text:004094E0                 mov     ebp, 0Ch
.text:004094E5                 call    realloc
.text:004094EA                 mov     edx, [esp+97Ch+arg_C]
.text:004094F1                 test    eax, eax
.text:004094F3                 mov     [edx], eax
.text:004094F5                 jz      loc_4072E6
.text:004094FB                 cmp     [esp+97Ch+var_940], eax
.text:004094FF                 jz      short loc_409539
.text:00409501                 mov     esi, [esp+97Ch+var_940]
.text:00409505                 mov     edi, [esp+97Ch+var_908]
.text:00409509                 sub     eax, esi
.text:0040950B                 add     [esp+97Ch+var_950], eax
.text:0040950F                 add     [esp+97Ch+var_904], eax
.text:00409513                 test    edi, edi
.text:00409515                 jz      short loc_40951B
.text:00409517                 add     [esp+97Ch+var_908], eax
.text:0040951B
.text:0040951B loc_40951B:                             ; CODE XREF: sub_406ED0+2645↑j
.text:0040951B                 mov     edx, [esp+97Ch+var_900]
.text:0040951F                 test    edx, edx
.text:00409521                 jz      short loc_409527
.text:00409523                 add     [esp+97Ch+var_900], eax
.text:00409527
.text:00409527 loc_409527:                             ; CODE XREF: sub_406ED0+2651↑j
.text:00409527                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040952E                 test    ecx, ecx
.text:00409530                 jz      short loc_409539
.text:00409532                 add     [esp+97Ch+var_8FC], eax
.text:00409539
.text:00409539 loc_409539:                             ; CODE XREF: sub_406ED0+262F↑j
.text:00409539                                         ; sub_406ED0+2660↑j
.text:00409539                 mov     eax, [esp+97Ch+arg_C]
.text:00409540                 mov     ebp, [esp+97Ch+var_950]
.text:00409544                 mov     edi, [eax]
.text:00409546                 mov     edx, [eax+4]
.text:00409549                 sub     ebp, edi
.text:0040954B                 add     ebp, 2
.text:0040954E                 mov     [esp+97Ch+var_940], edi
.text:00409552                 cmp     ebp, edx
.text:00409554                 ja      loc_4094A2
.text:0040955A
.text:0040955A loc_40955A:                             ; CODE XREF: sub_406ED0+25CC↑j
.text:0040955A                 mov     edi, [esp+97Ch+var_950]
.text:0040955E                 mov     byte ptr [edi], 8
.text:00409561                 inc     edi
.text:00409562                 mov     [edi], bl
.text:00409564                 jmp     loc_4072FA
.text:00409569 ; ---------------------------------------------------------------------------
.text:00409569
.text:00409569 loc_409569:                             ; CODE XREF: sub_406ED0+2576↑j
.text:00409569                 mov     ebx, [esp+97Ch+Block]
.text:00409570                 mov     ebp, 6
.text:00409575                 jmp     loc_408F38
.text:0040957A ; ---------------------------------------------------------------------------
.text:0040957A
.text:0040957A loc_40957A:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:0040957A                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:0040957A                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040917D case 60
.text:00409585                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040958B
.text:0040958B loc_40958B:                             ; CODE XREF: sub_406ED0+2731↓j
.text:0040958B                                         ; sub_406ED0+275E↓j ...
.text:0040958B                 mov     eax, [esp+97Ch+arg_C]
.text:00409592                 mov     ebx, [esp+97Ch+var_950]
.text:00409596                 mov     edi, [eax]
.text:00409598                 mov     edx, [eax+4]
.text:0040959B                 sub     ebx, edi
.text:0040959D                 inc     ebx
.text:0040959E                 cmp     ebx, edx
.text:004095A0                 jbe     loc_409640
.text:004095A6                 cmp     edx, 10000h
.text:004095AC                 mov     ebp, 0Fh
.text:004095B1                 jz      loc_4072E6
.text:004095B7                 lea     ebx, [edx+edx]
.text:004095BA                 mov     edx, [esp+97Ch+arg_C]
.text:004095C1                 cmp     ebx, 10000h
.text:004095C7                 mov     [edx+4], ebx
.text:004095CA                 jbe     short loc_4095D3
.text:004095CC                 mov     dword ptr [edx+4], 10000h
.text:004095D3
.text:004095D3 loc_4095D3:                             ; CODE XREF: sub_406ED0+26FA↑j
.text:004095D3                 mov     ebp, [esp+97Ch+arg_C]
.text:004095DA                 mov     edx, [ebp+4]
.text:004095DD                 mov     ebp, 0Ch
.text:004095E2                 mov     [esp+97Ch+Size], edi ; Block
.text:004095E5                 mov     [esp+97Ch+var_978], edx ; Size
.text:004095E9                 call    realloc
.text:004095EE                 mov     ecx, [esp+97Ch+arg_C]
.text:004095F5                 test    eax, eax
.text:004095F7                 mov     [ecx], eax
.text:004095F9                 jz      loc_4072E6
.text:004095FF                 cmp     edi, eax
.text:00409601                 jz      short loc_40958B
.text:00409603                 mov     esi, [esp+97Ch+var_908]
.text:00409607                 sub     eax, edi
.text:00409609                 add     [esp+97Ch+var_950], eax
.text:0040960D                 add     [esp+97Ch+var_904], eax
.text:00409611                 test    esi, esi
.text:00409613                 jz      short loc_409619
.text:00409615                 add     [esp+97Ch+var_908], eax
.text:00409619
.text:00409619 loc_409619:                             ; CODE XREF: sub_406ED0+2743↑j
.text:00409619                 mov     edi, [esp+97Ch+var_900]
.text:0040961D                 test    edi, edi
.text:0040961F                 jz      short loc_409625
.text:00409621                 add     [esp+97Ch+var_900], eax
.text:00409625
.text:00409625 loc_409625:                             ; CODE XREF: sub_406ED0+274F↑j
.text:00409625                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040962C                 test    ecx, ecx
.text:0040962E                 jz      loc_40958B
.text:00409634                 add     [esp+97Ch+var_8FC], eax
.text:0040963B                 jmp     loc_40958B
.text:00409640 ; ---------------------------------------------------------------------------
.text:00409640
.text:00409640 loc_409640:                             ; CODE XREF: sub_406ED0+26D0↑j
.text:00409640                 mov     edi, [esp+97Ch+var_950]
.text:00409644                 mov     byte ptr [edi], 1Ah
.text:00409647                 jmp     loc_4072FA
.text:0040964C ; ---------------------------------------------------------------------------
.text:0040964C
.text:0040964C loc_40964C:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:0040964C                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:0040964C                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040917D case 62
.text:00409657                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040965D
.text:0040965D loc_40965D:                             ; CODE XREF: sub_406ED0+2803↓j
.text:0040965D                                         ; sub_406ED0+2830↓j ...
.text:0040965D                 mov     eax, [esp+97Ch+arg_C]
.text:00409664                 mov     ebp, [esp+97Ch+var_950]
.text:00409668                 mov     edi, [eax]
.text:0040966A                 mov     edx, [eax+4]
.text:0040966D                 sub     ebp, edi
.text:0040966F                 inc     ebp
.text:00409670                 cmp     ebp, edx
.text:00409672                 jbe     loc_409712
.text:00409678                 cmp     edx, 10000h
.text:0040967E                 mov     ebp, 0Fh
.text:00409683                 jz      loc_4072E6
.text:00409689                 lea     ebp, [edx+edx]
.text:0040968C                 mov     edx, [esp+97Ch+arg_C]
.text:00409693                 cmp     ebp, 10000h
.text:00409699                 mov     [edx+4], ebp
.text:0040969C                 jbe     short loc_4096A5
.text:0040969E                 mov     dword ptr [edx+4], 10000h
.text:004096A5
.text:004096A5 loc_4096A5:                             ; CODE XREF: sub_406ED0+27CC↑j
.text:004096A5                 mov     ebx, [esp+97Ch+arg_C]
.text:004096AC                 mov     ebp, 0Ch
.text:004096B1                 mov     esi, [ebx+4]
.text:004096B4                 mov     [esp+97Ch+Size], edi ; Block
.text:004096B7                 mov     [esp+97Ch+var_978], esi ; Size
.text:004096BB                 call    realloc
.text:004096C0                 mov     edx, [esp+97Ch+arg_C]
.text:004096C7                 test    eax, eax
.text:004096C9                 mov     [edx], eax
.text:004096CB                 jz      loc_4072E6
.text:004096D1                 cmp     edi, eax
.text:004096D3                 jz      short loc_40965D
.text:004096D5                 sub     eax, edi
.text:004096D7                 mov     edi, [esp+97Ch+var_908]
.text:004096DB                 add     [esp+97Ch+var_950], eax
.text:004096DF                 add     [esp+97Ch+var_904], eax
.text:004096E3                 test    edi, edi
.text:004096E5                 jz      short loc_4096EB
.text:004096E7                 add     [esp+97Ch+var_908], eax
.text:004096EB
.text:004096EB loc_4096EB:                             ; CODE XREF: sub_406ED0+2815↑j
.text:004096EB                 mov     ecx, [esp+97Ch+var_900]
.text:004096EF                 test    ecx, ecx
.text:004096F1                 jz      short loc_4096F7
.text:004096F3                 add     [esp+97Ch+var_900], eax
.text:004096F7
.text:004096F7 loc_4096F7:                             ; CODE XREF: sub_406ED0+2821↑j
.text:004096F7                 mov     edx, [esp+97Ch+var_8FC]
.text:004096FE                 test    edx, edx
.text:00409700                 jz      loc_40965D
.text:00409706                 add     [esp+97Ch+var_8FC], eax
.text:0040970D                 jmp     loc_40965D
.text:00409712 ; ---------------------------------------------------------------------------
.text:00409712
.text:00409712 loc_409712:                             ; CODE XREF: sub_406ED0+27A2↑j
.text:00409712                 mov     edi, [esp+97Ch+var_950]
.text:00409716                 mov     byte ptr [edi], 1Bh
.text:00409719                 jmp     loc_4072FA
.text:0040971E ; ---------------------------------------------------------------------------
.text:0040971E
.text:0040971E loc_40971E:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:0040971E                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:0040971E                 test    byte ptr [esp+97Ch+arg_8], 2 ; jumptable 0040917D cases 43,63
.text:00409726                 jz      def_40917D      ; jumptable 0040917D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040972C                 jmp     loc_407F30      ; jumptable 0040703F case 42
.text:00409731 ; ---------------------------------------------------------------------------
.text:00409731
.text:00409731 loc_409731:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:00409731                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:00409731                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040917D case 66
.text:0040973C                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00409742
.text:00409742 loc_409742:                             ; CODE XREF: sub_406ED0+28E8↓j
.text:00409742                                         ; sub_406ED0+2915↓j ...
.text:00409742                 mov     eax, [esp+97Ch+arg_C]
.text:00409749                 mov     ebp, [esp+97Ch+var_950]
.text:0040974D                 mov     edi, [eax]
.text:0040974F                 mov     edx, [eax+4]
.text:00409752                 sub     ebp, edi
.text:00409754                 inc     ebp
.text:00409755                 cmp     ebp, edx
.text:00409757                 jbe     loc_4097F7
.text:0040975D                 cmp     edx, 10000h
.text:00409763                 mov     ebp, 0Fh
.text:00409768                 jz      loc_4072E6
.text:0040976E                 lea     ebx, [edx+edx]
.text:00409771                 mov     edx, [esp+97Ch+arg_C]
.text:00409778                 cmp     ebx, 10000h
.text:0040977E                 mov     [edx+4], ebx
.text:00409781                 jbe     short loc_40978A
.text:00409783                 mov     dword ptr [edx+4], 10000h
.text:0040978A
.text:0040978A loc_40978A:                             ; CODE XREF: sub_406ED0+28B1↑j
.text:0040978A                 mov     esi, [esp+97Ch+arg_C]
.text:00409791                 mov     ebp, [esi+4]
.text:00409794                 mov     [esp+97Ch+Size], edi ; Block
.text:00409797                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040979B                 mov     ebp, 0Ch
.text:004097A0                 call    realloc
.text:004097A5                 mov     edx, [esp+97Ch+arg_C]
.text:004097AC                 test    eax, eax
.text:004097AE                 mov     [edx], eax
.text:004097B0                 jz      loc_4072E6
.text:004097B6                 cmp     edi, eax
.text:004097B8                 jz      short loc_409742
.text:004097BA                 sub     eax, edi
.text:004097BC                 mov     edi, [esp+97Ch+var_908]
.text:004097C0                 add     [esp+97Ch+var_950], eax
.text:004097C4                 add     [esp+97Ch+var_904], eax
.text:004097C8                 test    edi, edi
.text:004097CA                 jz      short loc_4097D0
.text:004097CC                 add     [esp+97Ch+var_908], eax
.text:004097D0
.text:004097D0 loc_4097D0:                             ; CODE XREF: sub_406ED0+28FA↑j
.text:004097D0                 mov     ecx, [esp+97Ch+var_900]
.text:004097D4                 test    ecx, ecx
.text:004097D6                 jz      short loc_4097DC
.text:004097D8                 add     [esp+97Ch+var_900], eax
.text:004097DC
.text:004097DC loc_4097DC:                             ; CODE XREF: sub_406ED0+2906↑j
.text:004097DC                 mov     ebx, [esp+97Ch+var_8FC]
.text:004097E3                 test    ebx, ebx
.text:004097E5                 jz      loc_409742
.text:004097EB                 add     [esp+97Ch+var_8FC], eax
.text:004097F2                 jmp     loc_409742
.text:004097F7 ; ---------------------------------------------------------------------------
.text:004097F7
.text:004097F7 loc_4097F7:                             ; CODE XREF: sub_406ED0+2887↑j
.text:004097F7                 mov     edi, [esp+97Ch+var_950]
.text:004097FB                 mov     byte ptr [edi], 1Dh
.text:004097FE                 jmp     loc_4072FA
.text:00409803 ; ---------------------------------------------------------------------------
.text:00409803
.text:00409803 loc_409803:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:00409803                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:00409803                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040917D case 87
.text:0040980E                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00409814                 mov     ecx, [esp+97Ch+arg_C]
.text:0040981B                 mov     esi, [esp+97Ch+var_950]
.text:0040981F                 mov     edi, [ecx]
.text:00409821                 mov     [esp+97Ch+var_900], esi
.text:00409825                 mov     edx, [ecx+4]
.text:00409828                 sub     esi, edi
.text:0040982A                 inc     esi
.text:0040982B                 mov     ebx, edi
.text:0040982D                 cmp     esi, edx
.text:0040982F                 jbe     loc_4098EA
.text:00409835
.text:00409835 loc_409835:                             ; CODE XREF: sub_406ED0+2A14↓j
.text:00409835                 cmp     edx, 10000h
.text:0040983B                 mov     ebp, 0Fh
.text:00409840                 jz      loc_4072E6
.text:00409846                 mov     esi, [esp+97Ch+arg_C]
.text:0040984D                 lea     ebp, [edx+edx]
.text:00409850                 cmp     ebp, 10000h
.text:00409856                 mov     [esi+4], ebp
.text:00409859                 jbe     short loc_409862
.text:0040985B                 mov     dword ptr [esi+4], 10000h
.text:00409862
.text:00409862 loc_409862:                             ; CODE XREF: sub_406ED0+2989↑j
.text:00409862                 mov     eax, [esp+97Ch+arg_C]
.text:00409869                 mov     ebp, 0Ch
.text:0040986E                 mov     esi, [eax+4]
.text:00409871                 mov     [esp+97Ch+Size], edi ; Block
.text:00409874                 mov     [esp+97Ch+var_978], esi ; Size
.text:00409878                 call    realloc
.text:0040987D                 mov     edi, [esp+97Ch+arg_C]
.text:00409884                 test    eax, eax
.text:00409886                 mov     [edi], eax
.text:00409888                 jz      loc_4072E6
.text:0040988E                 cmp     ebx, eax
.text:00409890                 jz      short loc_4098C6
.text:00409892                 sub     eax, ebx
.text:00409894                 mov     ebx, [esp+97Ch+var_908]
.text:00409898                 add     [esp+97Ch+var_950], eax
.text:0040989C                 add     [esp+97Ch+var_904], eax
.text:004098A0                 test    ebx, ebx
.text:004098A2                 jz      short loc_4098A8
.text:004098A4                 add     [esp+97Ch+var_908], eax
.text:004098A8
.text:004098A8 loc_4098A8:                             ; CODE XREF: sub_406ED0+29D2↑j
.text:004098A8                 mov     ecx, [esp+97Ch+var_900]
.text:004098AC                 test    ecx, ecx
.text:004098AE                 jz      short loc_4098B4
.text:004098B0                 add     [esp+97Ch+var_900], eax
.text:004098B4
.text:004098B4 loc_4098B4:                             ; CODE XREF: sub_406ED0+29DE↑j
.text:004098B4                 mov     edx, [esp+97Ch+var_8FC]
.text:004098BB                 test    edx, edx
.text:004098BD                 jz      short loc_4098C6
.text:004098BF                 add     [esp+97Ch+var_8FC], eax
.text:004098C6
.text:004098C6 loc_4098C6:                             ; CODE XREF: sub_406ED0+29C0↑j
.text:004098C6                                         ; sub_406ED0+29ED↑j
.text:004098C6                 mov     esi, [esp+97Ch+arg_C]
.text:004098CD                 mov     eax, [esp+97Ch+arg_C]
.text:004098D4                 mov     ebp, [esp+97Ch+var_950]
.text:004098D8                 mov     edi, [esi]
.text:004098DA                 mov     edx, [eax+4]
.text:004098DD                 sub     ebp, edi
.text:004098DF                 inc     ebp
.text:004098E0                 mov     ebx, edi
.text:004098E2                 cmp     ebp, edx
.text:004098E4                 ja      loc_409835
.text:004098EA
.text:004098EA loc_4098EA:                             ; CODE XREF: sub_406ED0+295F↑j
.text:004098EA                 mov     edi, [esp+97Ch+var_950]
.text:004098EE                 mov     byte ptr [edi], 19h
.text:004098F1                 jmp     loc_4072FA
.text:004098F6 ; ---------------------------------------------------------------------------
.text:004098F6
.text:004098F6 loc_4098F6:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:004098F6                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:004098F6                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040917D case 96
.text:00409901                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00409907
.text:00409907 loc_409907:                             ; CODE XREF: sub_406ED0+2AAD↓j
.text:00409907                                         ; sub_406ED0+2ADA↓j ...
.text:00409907                 mov     eax, [esp+97Ch+arg_C]
.text:0040990E                 mov     ebx, [esp+97Ch+var_950]
.text:00409912                 mov     edi, [eax]
.text:00409914                 mov     edx, [eax+4]
.text:00409917                 sub     ebx, edi
.text:00409919                 inc     ebx
.text:0040991A                 cmp     ebx, edx
.text:0040991C                 jbe     loc_4099BC
.text:00409922                 cmp     edx, 10000h
.text:00409928                 mov     ebp, 0Fh
.text:0040992D                 jz      loc_4072E6
.text:00409933                 lea     esi, [edx+edx]
.text:00409936                 mov     edx, [esp+97Ch+arg_C]
.text:0040993D                 cmp     esi, 10000h
.text:00409943                 mov     [edx+4], esi
.text:00409946                 jbe     short loc_40994F
.text:00409948                 mov     dword ptr [edx+4], 10000h
.text:0040994F
.text:0040994F loc_40994F:                             ; CODE XREF: sub_406ED0+2A76↑j
.text:0040994F                 mov     ebp, [esp+97Ch+arg_C]
.text:00409956                 mov     ebx, [ebp+4]
.text:00409959                 mov     ebp, 0Ch
.text:0040995E                 mov     [esp+97Ch+Size], edi ; Block
.text:00409961                 mov     [esp+97Ch+var_978], ebx ; Size
.text:00409965                 call    realloc
.text:0040996A                 mov     edx, [esp+97Ch+arg_C]
.text:00409971                 test    eax, eax
.text:00409973                 mov     [edx], eax
.text:00409975                 jz      loc_4072E6
.text:0040997B                 cmp     edi, eax
.text:0040997D                 jz      short loc_409907
.text:0040997F                 mov     ecx, [esp+97Ch+var_908]
.text:00409983                 sub     eax, edi
.text:00409985                 add     [esp+97Ch+var_950], eax
.text:00409989                 add     [esp+97Ch+var_904], eax
.text:0040998D                 test    ecx, ecx
.text:0040998F                 jz      short loc_409995
.text:00409991                 add     [esp+97Ch+var_908], eax
.text:00409995
.text:00409995 loc_409995:                             ; CODE XREF: sub_406ED0+2ABF↑j
.text:00409995                 mov     edi, [esp+97Ch+var_900]
.text:00409999                 test    edi, edi
.text:0040999B                 jz      short loc_4099A1
.text:0040999D                 add     [esp+97Ch+var_900], eax
.text:004099A1
.text:004099A1 loc_4099A1:                             ; CODE XREF: sub_406ED0+2ACB↑j
.text:004099A1                 mov     esi, [esp+97Ch+var_8FC]
.text:004099A8                 test    esi, esi
.text:004099AA                 jz      loc_409907
.text:004099B0                 add     [esp+97Ch+var_8FC], eax
.text:004099B7                 jmp     loc_409907
.text:004099BC ; ---------------------------------------------------------------------------
.text:004099BC
.text:004099BC loc_4099BC:                             ; CODE XREF: sub_406ED0+2A4C↑j
.text:004099BC                 mov     edi, [esp+97Ch+var_950]
.text:004099C0                 mov     byte ptr [edi], 0Bh
.text:004099C3                 jmp     loc_4072FA
.text:004099C8 ; ---------------------------------------------------------------------------
.text:004099C8
.text:004099C8 loc_4099C8:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:004099C8                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:004099C8                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040917D case 98
.text:004099D3                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004099D9
.text:004099D9 loc_4099D9:                             ; CODE XREF: sub_406ED0+2B7F↓j
.text:004099D9                                         ; sub_406ED0+2BAC↓j ...
.text:004099D9                 mov     eax, [esp+97Ch+arg_C]
.text:004099E0                 mov     ecx, [esp+97Ch+var_950]
.text:004099E4                 mov     edi, [eax]
.text:004099E6                 mov     edx, [eax+4]
.text:004099E9                 sub     ecx, edi
.text:004099EB                 inc     ecx
.text:004099EC                 cmp     ecx, edx
.text:004099EE                 jbe     loc_409A8E
.text:004099F4                 cmp     edx, 10000h
.text:004099FA                 mov     ebp, 0Fh
.text:004099FF                 jz      loc_4072E6
.text:00409A05                 lea     esi, [edx+edx]
.text:00409A08                 mov     edx, [esp+97Ch+arg_C]
.text:00409A0F                 cmp     esi, 10000h
.text:00409A15                 mov     [edx+4], esi
.text:00409A18                 jbe     short loc_409A21
.text:00409A1A                 mov     dword ptr [edx+4], 10000h
.text:00409A21
.text:00409A21 loc_409A21:                             ; CODE XREF: sub_406ED0+2B48↑j
.text:00409A21                 mov     edx, [esp+97Ch+arg_C]
.text:00409A28                 mov     ebp, 0Ch
.text:00409A2D                 mov     ebx, [edx+4]
.text:00409A30                 mov     [esp+97Ch+Size], edi ; Block
.text:00409A33                 mov     [esp+97Ch+var_978], ebx ; Size
.text:00409A37                 call    realloc
.text:00409A3C                 mov     ecx, [esp+97Ch+arg_C]
.text:00409A43                 test    eax, eax
.text:00409A45                 mov     [ecx], eax
.text:00409A47                 jz      loc_4072E6
.text:00409A4D                 cmp     edi, eax
.text:00409A4F                 jz      short loc_4099D9
.text:00409A51                 mov     ebp, [esp+97Ch+var_908]
.text:00409A55                 sub     eax, edi
.text:00409A57                 add     [esp+97Ch+var_950], eax
.text:00409A5B                 add     [esp+97Ch+var_904], eax
.text:00409A5F                 test    ebp, ebp
.text:00409A61                 jz      short loc_409A67
.text:00409A63                 add     [esp+97Ch+var_908], eax
.text:00409A67
.text:00409A67 loc_409A67:                             ; CODE XREF: sub_406ED0+2B91↑j
.text:00409A67                 mov     edi, [esp+97Ch+var_900]
.text:00409A6B                 test    edi, edi
.text:00409A6D                 jz      short loc_409A73
.text:00409A6F                 add     [esp+97Ch+var_900], eax
.text:00409A73
.text:00409A73 loc_409A73:                             ; CODE XREF: sub_406ED0+2B9D↑j
.text:00409A73                 mov     esi, [esp+97Ch+var_8FC]
.text:00409A7A                 test    esi, esi
.text:00409A7C                 jz      loc_4099D9
.text:00409A82                 add     [esp+97Ch+var_8FC], eax
.text:00409A89                 jmp     loc_4099D9
.text:00409A8E ; ---------------------------------------------------------------------------
.text:00409A8E
.text:00409A8E loc_409A8E:                             ; CODE XREF: sub_406ED0+2B1E↑j
.text:00409A8E                 mov     edi, [esp+97Ch+var_950]
.text:00409A92                 mov     byte ptr [edi], 1Ch
.text:00409A95                 jmp     loc_4072FA
.text:00409A9A ; ---------------------------------------------------------------------------
.text:00409A9A
.text:00409A9A loc_409A9A:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:00409A9A                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:00409A9A                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040917D case 119
.text:00409AA5                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00409AAB                 mov     eax, [esp+97Ch+arg_C]
.text:00409AB2                 mov     ecx, [esp+97Ch+var_950]
.text:00409AB6                 mov     edi, [eax]
.text:00409AB8                 mov     [esp+97Ch+var_900], ecx
.text:00409ABC                 mov     esi, ecx
.text:00409ABE                 mov     edx, [eax+4]
.text:00409AC1                 sub     esi, edi
.text:00409AC3                 mov     ebx, edi
.text:00409AC5                 inc     esi
.text:00409AC6                 cmp     esi, edx
.text:00409AC8                 jbe     loc_409B83
.text:00409ACE
.text:00409ACE loc_409ACE:                             ; CODE XREF: sub_406ED0+2CAD↓j
.text:00409ACE                 cmp     edx, 10000h
.text:00409AD4                 mov     ebp, 0Fh
.text:00409AD9                 jz      loc_4072E6
.text:00409ADF                 mov     esi, [esp+97Ch+arg_C]
.text:00409AE6                 lea     ebp, [edx+edx]
.text:00409AE9                 cmp     ebp, 10000h
.text:00409AEF                 mov     [esi+4], ebp
.text:00409AF2                 jbe     short loc_409AFB
.text:00409AF4                 mov     dword ptr [esi+4], 10000h
.text:00409AFB
.text:00409AFB loc_409AFB:                             ; CODE XREF: sub_406ED0+2C22↑j
.text:00409AFB                 mov     eax, [esp+97Ch+arg_C]
.text:00409B02                 mov     ebp, 0Ch
.text:00409B07                 mov     esi, [eax+4]
.text:00409B0A                 mov     [esp+97Ch+Size], edi ; Block
.text:00409B0D                 mov     [esp+97Ch+var_978], esi ; Size
.text:00409B11                 call    realloc
.text:00409B16                 mov     edx, [esp+97Ch+arg_C]
.text:00409B1D                 test    eax, eax
.text:00409B1F                 mov     [edx], eax
.text:00409B21                 jz      loc_4072E6
.text:00409B27                 cmp     ebx, eax
.text:00409B29                 jz      short loc_409B5F
.text:00409B2B                 sub     eax, ebx
.text:00409B2D                 mov     ebx, [esp+97Ch+var_908]
.text:00409B31                 add     [esp+97Ch+var_950], eax
.text:00409B35                 add     [esp+97Ch+var_904], eax
.text:00409B39                 test    ebx, ebx
.text:00409B3B                 jz      short loc_409B41
.text:00409B3D                 add     [esp+97Ch+var_908], eax
.text:00409B41
.text:00409B41 loc_409B41:                             ; CODE XREF: sub_406ED0+2C6B↑j
.text:00409B41                 mov     edi, [esp+97Ch+var_900]
.text:00409B45                 test    edi, edi
.text:00409B47                 jz      short loc_409B4D
.text:00409B49                 add     [esp+97Ch+var_900], eax
.text:00409B4D
.text:00409B4D loc_409B4D:                             ; CODE XREF: sub_406ED0+2C77↑j
.text:00409B4D                 mov     ecx, [esp+97Ch+var_8FC]
.text:00409B54                 test    ecx, ecx
.text:00409B56                 jz      short loc_409B5F
.text:00409B58                 add     [esp+97Ch+var_8FC], eax
.text:00409B5F
.text:00409B5F loc_409B5F:                             ; CODE XREF: sub_406ED0+2C59↑j
.text:00409B5F                                         ; sub_406ED0+2C86↑j
.text:00409B5F                 mov     edx, [esp+97Ch+arg_C]
.text:00409B66                 mov     eax, [esp+97Ch+arg_C]
.text:00409B6D                 mov     ebp, [esp+97Ch+var_950]
.text:00409B71                 mov     edi, [edx]
.text:00409B73                 mov     edx, [eax+4]
.text:00409B76                 sub     ebp, edi
.text:00409B78                 inc     ebp
.text:00409B79                 mov     ebx, edi
.text:00409B7B                 cmp     ebp, edx
.text:00409B7D                 ja      loc_409ACE
.text:00409B83
.text:00409B83 loc_409B83:                             ; CODE XREF: sub_406ED0+2BF8↑j
.text:00409B83                 mov     edi, [esp+97Ch+var_950]
.text:00409B87                 mov     byte ptr [edi], 18h
.text:00409B8A                 jmp     loc_4072FA
.text:00409B8F ; ---------------------------------------------------------------------------
.text:00409B8F
.text:00409B8F loc_409B8F:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:00409B8F                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:00409B8F                 mov     ebx, [esp+97Ch+arg_8] ; jumptable 0040917D case 123
.text:00409B96                 and     ebx, 1200h
.text:00409B9C                 cmp     ebx, 200h
.text:00409BA2                 jnz     def_40917D      ; jumptable 0040917D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00409BA8
.text:00409BA8 loc_409BA8:                             ; CODE XREF: sub_406ED0+329D↓j
.text:00409BA8                 mov     [esp+97Ch+var_934], 0FFFFFFFFh
.text:00409BB0                 mov     edi, [esp+97Ch+var_8D0]
.text:00409BB7                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409BBE                 mov     [esp+97Ch+var_938], 0FFFFFFFFh
.text:00409BC6                 mov     ecx, edi
.text:00409BC8                 jz      loc_409C89
.text:00409BCE
.text:00409BCE loc_409BCE:                             ; CODE XREF: sub_406ED0+2D74↓j
.text:00409BCE                 movzx   eax, byte ptr [edi]
.text:00409BD1                 inc     edi
.text:00409BD2                 mov     ebp, [esp+97Ch+var_8F8]
.text:00409BD9                 mov     [esp+97Ch+var_8D0], edi
.text:00409BE0                 test    ebp, ebp
.text:00409BE2                 mov     [esp+97Ch+var_8EC], al
.text:00409BE9                 jz      short loc_409C00
.text:00409BEB                 mov     ebp, [esp+97Ch+var_8F8]
.text:00409BF2                 movzx   esi, al
.text:00409BF5                 movzx   ebx, byte ptr [esi+ebp]
.text:00409BF9                 mov     [esp+97Ch+var_8EC], bl
.text:00409C00
.text:00409C00 loc_409C00:                             ; CODE XREF: sub_406ED0+2D19↑j
.text:00409C00                 movzx   edx, [esp+97Ch+var_8EC]
.text:00409C08                 sub     dl, 30h ; '0'
.text:00409C0B                 cmp     dl, 9
.text:00409C0E                 ja      short loc_409C46
.text:00409C10                 cmp     [esp+97Ch+var_934], 7FFFh
.text:00409C18                 jg      short loc_409C3D
.text:00409C1A                 movzx   ebp, [esp+97Ch+var_8EC]
.text:00409C22                 mov     edx, [esp+97Ch+var_934]
.text:00409C26                 shr     edx, 1Fh
.text:00409C29                 dec     edx
.text:00409C2A                 and     [esp+97Ch+var_934], edx
.text:00409C2E                 mov     eax, [esp+97Ch+var_934]
.text:00409C32                 lea     esi, [eax+eax*4]
.text:00409C35                 lea     ebx, [ebp+esi*2-30h]
.text:00409C39                 mov     [esp+97Ch+var_934], ebx
.text:00409C3D
.text:00409C3D loc_409C3D:                             ; CODE XREF: sub_406ED0+2D48↑j
.text:00409C3D                 cmp     edi, [esp+97Ch+var_8F4]
.text:00409C44                 jnz     short loc_409BCE
.text:00409C46
.text:00409C46 loc_409C46:                             ; CODE XREF: sub_406ED0+2D3E↑j
.text:00409C46                 cmp     [esp+97Ch+var_8EC], 2Ch ; ','
.text:00409C4E                 jz      loc_40A094
.text:00409C54                 mov     ebx, [esp+97Ch+var_934]
.text:00409C58                 mov     [esp+97Ch+var_938], ebx
.text:00409C5C
.text:00409C5C loc_409C5C:                             ; CODE XREF: sub_406ED0+3256↓j
.text:00409C5C                                         ; sub_406ED0+3264↓j
.text:00409C5C                 mov     esi, [esp+97Ch+var_934]
.text:00409C60                 test    esi, esi
.text:00409C62                 js      short loc_409C89
.text:00409C64                 mov     ebp, [esp+97Ch+var_938]
.text:00409C68                 cmp     [esp+97Ch+var_934], ebp
.text:00409C6C                 jg      short loc_409C89
.text:00409C6E                 test    [esp+97Ch+arg_8], 1000h
.text:00409C79                 jnz     loc_409D2A
.text:00409C7F                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:00409C87                 jz      short loc_409CE6
.text:00409C89
.text:00409C89 loc_409C89:                             ; CODE XREF: sub_406ED0+2CF8↑j
.text:00409C89                                         ; sub_406ED0+2D92↑j ...
.text:00409C89                 test    [esp+97Ch+arg_8], 200000h
.text:00409C94                 jz      short loc_409CBB
.text:00409C96
.text:00409C96 loc_409C96:                             ; CODE XREF: sub_406ED0+31B1↓j
.text:00409C96                 test    [esp+97Ch+arg_8], 1000h
.text:00409CA1                 mov     [esp+97Ch+var_8D0], ecx
.text:00409CA8                 mov     [esp+97Ch+var_8EC], 7Bh ; '{'
.text:00409CB0                 jz      def_40917D      ; jumptable 0040917D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00409CB6                 jmp     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00409CBB ; ---------------------------------------------------------------------------
.text:00409CBB
.text:00409CBB loc_409CBB:                             ; CODE XREF: sub_406ED0+2DC4↑j
.text:00409CBB                 mov     edi, [esp+97Ch+Block]
.text:00409CC2                 mov     [esp+97Ch+Size], edi ; Block
.text:00409CC5                 call    free
.text:00409CCA                 mov     ebp, [esp+97Ch+var_8F4]
.text:00409CD1                 cmp     [esp+97Ch+var_8D0], ebp
.text:00409CD8                 setnz   cl
.text:00409CDB                 movzx   ebx, cl
.text:00409CDE                 lea     ebp, [ebx+9]
.text:00409CE1                 jmp     loc_4072E6
.text:00409CE6 ; ---------------------------------------------------------------------------
.text:00409CE6
.text:00409CE6 loc_409CE6:                             ; CODE XREF: sub_406ED0+2DB7↑j
.text:00409CE6                 mov     eax, [esp+97Ch+var_8D0]
.text:00409CED                 cmp     eax, [esp+97Ch+var_8F4]
.text:00409CF4                 jz      short loc_409C89
.text:00409CF6                 movzx   edx, byte ptr [eax]
.text:00409CF9                 lea     ebx, [eax+1]
.text:00409CFC                 mov     eax, [esp+97Ch+var_8F8]
.text:00409D03                 mov     [esp+97Ch+var_8D0], ebx
.text:00409D0A                 test    eax, eax
.text:00409D0C                 mov     [esp+97Ch+var_8EC], dl
.text:00409D13                 jz      short loc_409D2A
.text:00409D15                 mov     esi, [esp+97Ch+var_8F8]
.text:00409D1C                 movzx   edi, dl
.text:00409D1F                 movzx   edx, byte ptr [edi+esi]
.text:00409D23                 mov     [esp+97Ch+var_8EC], dl
.text:00409D2A
.text:00409D2A loc_409D2A:                             ; CODE XREF: sub_406ED0+2DA9↑j
.text:00409D2A                                         ; sub_406ED0+2E43↑j
.text:00409D2A                 cmp     [esp+97Ch+var_8EC], 7Dh ; '}'
.text:00409D32                 jnz     loc_409C89
.text:00409D38                 mov     ebp, [esp+97Ch+var_900]
.text:00409D3C                 test    ebp, ebp
.text:00409D3E                 jz      loc_40A063
.text:00409D44
.text:00409D44 loc_409D44:                             ; CODE XREF: sub_406ED0+31BF↓j
.text:00409D44                 cmp     [esp+97Ch+var_938], 7FFFh
.text:00409D4C                 jg      loc_40A052
.text:00409D52                 mov     eax, [esp+97Ch+var_938]
.text:00409D56                 test    eax, eax
.text:00409D58                 jnz     loc_409E6F
.text:00409D5E                 mov     edx, [esp+97Ch+arg_C]
.text:00409D65                 mov     ebp, [esp+97Ch+arg_C]
.text:00409D6C                 mov     esi, [esp+97Ch+var_950]
.text:00409D70                 mov     edi, [edx]
.text:00409D72                 mov     edx, [ebp+4]
.text:00409D75                 sub     esi, edi
.text:00409D77                 add     esi, 3
.text:00409D7A                 mov     ebx, edi
.text:00409D7C                 cmp     esi, edx
.text:00409D7E                 jbe     loc_409E3B
.text:00409D84
.text:00409D84 loc_409D84:                             ; CODE XREF: sub_406ED0+2F65↓j
.text:00409D84                 cmp     edx, 10000h
.text:00409D8A                 mov     ebp, 0Fh
.text:00409D8F                 jz      loc_4072E6
.text:00409D95                 mov     esi, [esp+97Ch+arg_C]
.text:00409D9C                 lea     ecx, [edx+edx]
.text:00409D9F                 cmp     ecx, 10000h
.text:00409DA5                 mov     [esi+4], ecx
.text:00409DA8                 jbe     short loc_409DB1
.text:00409DAA                 mov     dword ptr [esi+4], 10000h
.text:00409DB1
.text:00409DB1 loc_409DB1:                             ; CODE XREF: sub_406ED0+2ED8↑j
.text:00409DB1                 mov     eax, [esp+97Ch+arg_C]
.text:00409DB8                 mov     ebp, 0Ch
.text:00409DBD                 mov     esi, [eax+4]
.text:00409DC0                 mov     [esp+97Ch+Size], edi ; Block
.text:00409DC3                 mov     [esp+97Ch+var_978], esi ; Size
.text:00409DC7                 call    realloc
.text:00409DCC                 mov     edi, [esp+97Ch+arg_C]
.text:00409DD3                 test    eax, eax
.text:00409DD5                 mov     [edi], eax
.text:00409DD7                 jz      loc_4072E6
.text:00409DDD                 cmp     ebx, eax
.text:00409DDF                 jz      short loc_409E15
.text:00409DE1                 sub     eax, ebx
.text:00409DE3                 mov     ebx, [esp+97Ch+var_908]
.text:00409DE7                 add     [esp+97Ch+var_950], eax
.text:00409DEB                 add     [esp+97Ch+var_904], eax
.text:00409DEF                 test    ebx, ebx
.text:00409DF1                 jz      short loc_409DF7
.text:00409DF3                 add     [esp+97Ch+var_908], eax
.text:00409DF7
.text:00409DF7 loc_409DF7:                             ; CODE XREF: sub_406ED0+2F21↑j
.text:00409DF7                 mov     edx, [esp+97Ch+var_900]
.text:00409DFB                 test    edx, edx
.text:00409DFD                 jz      short loc_409E03
.text:00409DFF                 add     [esp+97Ch+var_900], eax
.text:00409E03
.text:00409E03 loc_409E03:                             ; CODE XREF: sub_406ED0+2F2D↑j
.text:00409E03                 mov     ebp, [esp+97Ch+var_8FC]
.text:00409E0A                 test    ebp, ebp
.text:00409E0C                 jz      short loc_409E15
.text:00409E0E                 add     [esp+97Ch+var_8FC], eax
.text:00409E15
.text:00409E15 loc_409E15:                             ; CODE XREF: sub_406ED0+2F0F↑j
.text:00409E15                                         ; sub_406ED0+2F3C↑j
.text:00409E15                 mov     esi, [esp+97Ch+arg_C]
.text:00409E1C                 mov     eax, [esp+97Ch+arg_C]
.text:00409E23                 mov     ecx, [esp+97Ch+var_950]
.text:00409E27                 mov     edi, [esi]
.text:00409E29                 mov     edx, [eax+4]
.text:00409E2C                 sub     ecx, edi
.text:00409E2E                 add     ecx, 3
.text:00409E31                 mov     ebx, edi
.text:00409E33                 cmp     ecx, edx
.text:00409E35                 ja      loc_409D84
.text:00409E3B
.text:00409E3B loc_409E3B:                             ; CODE XREF: sub_406ED0+2EAE↑j
.text:00409E3B                 mov     [esp+97Ch+Size], 0Dh
.text:00409E42                 mov     ebx, [esp+97Ch+var_950]
.text:00409E46                 mov     ebp, [esp+97Ch+var_900]
.text:00409E4A                 mov     edi, [esp+97Ch+var_900]
.text:00409E4E                 mov     edx, ebx
.text:00409E50                 sub     edx, ebp
.text:00409E52                 mov     [esp+97Ch+var_970], ebx
.text:00409E56                 add     ebx, 3
.text:00409E59                 mov     [esp+97Ch+var_974], edx
.text:00409E5D                 mov     [esp+97Ch+var_978], edi
.text:00409E61                 call    sub_403CF0
.text:00409E66                 mov     [esp+97Ch+var_950], ebx
.text:00409E6A                 jmp     loc_407C18
.text:00409E6F ; ---------------------------------------------------------------------------
.text:00409E6F
.text:00409E6F loc_409E6F:                             ; CODE XREF: sub_406ED0+2E88↑j
.text:00409E6F                 cmp     [esp+97Ch+var_938], 1
.text:00409E74                 mov     [esp+97Ch+var_93C], 14h
.text:00409E7C                 jg      loc_409F3A
.text:00409E82                 mov     [esp+97Ch+var_93C], 0Ah
.text:00409E8A                 mov     ecx, [esp+97Ch+arg_C]
.text:00409E91                 mov     eax, [esp+97Ch+var_950]
.text:00409E95                 mov     edi, [ecx]
.text:00409E97                 mov     edx, [ecx+4]
.text:00409E9A                 sub     eax, edi
.text:00409E9C                 mov     ebx, edi
.text:00409E9E                 add     eax, 0Ah
.text:00409EA1
.text:00409EA1 loc_409EA1:                             ; CODE XREF: sub_406ED0+308B↓j
.text:00409EA1                 cmp     eax, edx
.text:00409EA3                 jbe     loc_409F60
.text:00409EA9                 cmp     edx, 10000h
.text:00409EAF                 mov     ebp, 0Fh
.text:00409EB4                 jz      loc_4072E6
.text:00409EBA                 mov     esi, [esp+97Ch+arg_C]
.text:00409EC1                 lea     ebp, [edx+edx]
.text:00409EC4                 cmp     ebp, 10000h
.text:00409ECA                 mov     [esi+4], ebp
.text:00409ECD                 jbe     short loc_409ED6
.text:00409ECF                 mov     dword ptr [esi+4], 10000h
.text:00409ED6
.text:00409ED6 loc_409ED6:                             ; CODE XREF: sub_406ED0+2FFD↑j
.text:00409ED6                 mov     eax, [esp+97Ch+arg_C]
.text:00409EDD                 mov     ebp, 0Ch
.text:00409EE2                 mov     esi, [eax+4]
.text:00409EE5                 mov     [esp+97Ch+Size], edi ; Block
.text:00409EE8                 mov     [esp+97Ch+var_978], esi ; Size
.text:00409EEC                 call    realloc
.text:00409EF1                 mov     edi, [esp+97Ch+arg_C]
.text:00409EF8                 test    eax, eax
.text:00409EFA                 mov     [edi], eax
.text:00409EFC                 jz      loc_4072E6
.text:00409F02                 cmp     ebx, eax
.text:00409F04                 jz      short loc_409F3A
.text:00409F06                 mov     edx, [esp+97Ch+var_908]
.text:00409F0A                 sub     eax, ebx
.text:00409F0C                 add     [esp+97Ch+var_950], eax
.text:00409F10                 add     [esp+97Ch+var_904], eax
.text:00409F14                 test    edx, edx
.text:00409F16                 jz      short loc_409F1C
.text:00409F18                 add     [esp+97Ch+var_908], eax
.text:00409F1C
.text:00409F1C loc_409F1C:                             ; CODE XREF: sub_406ED0+3046↑j
.text:00409F1C                 mov     ebx, [esp+97Ch+var_900]
.text:00409F20                 test    ebx, ebx
.text:00409F22                 jz      short loc_409F28
.text:00409F24                 add     [esp+97Ch+var_900], eax
.text:00409F28
.text:00409F28 loc_409F28:                             ; CODE XREF: sub_406ED0+3052↑j
.text:00409F28                 mov     ecx, [esp+97Ch+var_8FC]
.text:00409F2F                 test    ecx, ecx
.text:00409F31                 jz      short loc_409F3A
.text:00409F33                 add     [esp+97Ch+var_8FC], eax
.text:00409F3A
.text:00409F3A loc_409F3A:                             ; CODE XREF: sub_406ED0+2FAC↑j
.text:00409F3A                                         ; sub_406ED0+3034↑j ...
.text:00409F3A                 mov     eax, [esp+97Ch+arg_C]
.text:00409F41                 mov     ebp, [esp+97Ch+arg_C]
.text:00409F48                 mov     esi, [esp+97Ch+var_93C]
.text:00409F4C                 mov     edi, [eax]
.text:00409F4E                 mov     eax, [esp+97Ch+var_950]
.text:00409F52                 mov     edx, [ebp+4]
.text:00409F55                 mov     ebx, edi
.text:00409F57                 sub     eax, edi
.text:00409F59                 add     eax, esi
.text:00409F5B                 jmp     loc_409EA1
.text:00409F60 ; ---------------------------------------------------------------------------
.text:00409F60
.text:00409F60 loc_409F60:                             ; CODE XREF: sub_406ED0+2FD3↑j
.text:00409F60                 mov     edi, [esp+97Ch+var_950]
.text:00409F64                 mov     edx, [esp+97Ch+var_934]
.text:00409F68                 mov     [esp+97Ch+var_96C], edi
.text:00409F6C                 add     edi, 5
.text:00409F6F                 cmp     [esp+97Ch+var_938], 1
.text:00409F74                 mov     [esp+97Ch+var_970], edx
.text:00409F78                 jle     loc_40A042
.text:00409F7E                 mov     ebx, [esp+97Ch+var_900]
.text:00409F82                 mov     eax, edi
.text:00409F84                 sub     eax, ebx
.text:00409F86                 add     eax, 2
.text:00409F89
.text:00409F89 loc_409F89:                             ; CODE XREF: sub_406ED0+317D↓j
.text:00409F89                 mov     [esp+97Ch+var_974], eax
.text:00409F8D                 mov     esi, [esp+97Ch+var_900]
.text:00409F91                 mov     [esp+97Ch+Size], 15h
.text:00409F98                 mov     [esp+97Ch+var_978], esi
.text:00409F9C                 call    sub_403D30
.text:00409FA1                 mov     [esp+97Ch+var_950], edi
.text:00409FA5                 mov     ebp, [esp+97Ch+var_934]
.text:00409FA9                 mov     [esp+97Ch+var_96C], edi
.text:00409FAD                 mov     edi, [esp+97Ch+var_900]
.text:00409FB1                 mov     [esp+97Ch+var_970], ebp
.text:00409FB5                 mov     [esp+97Ch+var_974], 5
.text:00409FBD                 mov     [esp+97Ch+var_978], edi
.text:00409FC1                 mov     [esp+97Ch+Size], 17h
.text:00409FC8                 call    sub_403D30
.text:00409FCD                 add     [esp+97Ch+var_950], 5
.text:00409FD2                 cmp     [esp+97Ch+var_938], 1
.text:00409FD7                 jle     loc_407C18
.text:00409FDD                 mov     [esp+97Ch+Size], 16h
.text:00409FE4                 mov     edx, [esp+97Ch+var_900]
.text:00409FE8                 mov     esi, [esp+97Ch+var_950]
.text:00409FEC                 mov     edi, [esp+97Ch+var_938]
.text:00409FF0                 mov     ebp, [esp+97Ch+var_950]
.text:00409FF4                 sub     edx, esi
.text:00409FF6                 add     edx, 2
.text:00409FF9                 dec     edi
.text:00409FFA                 mov     [esp+97Ch+var_974], edx
.text:00409FFE                 mov     [esp+97Ch+var_978], ebp
.text:0040A002                 add     ebp, 5
.text:0040A005                 mov     ebx, ebp
.text:0040A007                 mov     [esp+97Ch+var_970], edi
.text:0040A00B                 call    sub_403CC0
.text:0040A010                 mov     [esp+97Ch+var_96C], ebp
.text:0040A014                 mov     ecx, [esp+97Ch+var_900]
.text:0040A018                 add     ebp, 5
.text:0040A01B                 mov     [esp+97Ch+var_970], edi
.text:0040A01F                 mov     eax, [esp+97Ch+var_900]
.text:0040A023                 mov     [esp+97Ch+Size], 17h
.text:0040A02A                 sub     ebx, ecx
.text:0040A02C                 mov     [esp+97Ch+var_974], ebx
.text:0040A030                 mov     [esp+97Ch+var_978], eax
.text:0040A034                 call    sub_403D30
.text:0040A039                 mov     [esp+97Ch+var_950], ebp
.text:0040A03D                 jmp     loc_407C18
.text:0040A042 ; ---------------------------------------------------------------------------
.text:0040A042
.text:0040A042 loc_40A042:                             ; CODE XREF: sub_406ED0+30A8↑j
.text:0040A042                 mov     ecx, [esp+97Ch+var_900]
.text:0040A046                 mov     eax, edi
.text:0040A048                 sub     eax, ecx
.text:0040A04A                 sub     eax, 3
.text:0040A04D                 jmp     loc_409F89
.text:0040A052 ; ---------------------------------------------------------------------------
.text:0040A052
.text:0040A052 loc_40A052:                             ; CODE XREF: sub_406ED0+2E7C↑j
.text:0040A052                 mov     esi, [esp+97Ch+Block]
.text:0040A059                 mov     ebp, 0Ah
.text:0040A05E                 jmp     loc_408FD3
.text:0040A063 ; ---------------------------------------------------------------------------
.text:0040A063
.text:0040A063 loc_40A063:                             ; CODE XREF: sub_406ED0+2E6E↑j
.text:0040A063                 mov     ebx, [esp+97Ch+arg_8]
.text:0040A06A                 and     ebx, 200020h
.text:0040A070                 cmp     ebx, 20h ; ' '
.text:0040A073                 jz      loc_4084AE
.text:0040A079                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:0040A081                 jz      loc_409C96
.text:0040A087                 mov     ecx, [esp+97Ch+var_950]
.text:0040A08B                 mov     [esp+97Ch+var_900], ecx
.text:0040A08F                 jmp     loc_409D44
.text:0040A094 ; ---------------------------------------------------------------------------
.text:0040A094
.text:0040A094 loc_40A094:                             ; CODE XREF: sub_406ED0+2D7E↑j
.text:0040A094                 mov     edi, [esp+97Ch+var_8D0]
.text:0040A09B                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040A0A2                 jz      loc_40A12C
.text:0040A0A8
.text:0040A0A8 loc_40A0A8:                             ; CODE XREF: sub_406ED0+324E↓j
.text:0040A0A8                 movzx   eax, byte ptr [edi]
.text:0040A0AB                 inc     edi
.text:0040A0AC                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040A0B3                 mov     [esp+97Ch+var_8D0], edi
.text:0040A0BA                 test    ebx, ebx
.text:0040A0BC                 mov     [esp+97Ch+var_8EC], al
.text:0040A0C3                 jz      short loc_40A0DA
.text:0040A0C5                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040A0CC                 movzx   esi, al
.text:0040A0CF                 movzx   ebx, byte ptr [esi+ebp]
.text:0040A0D3                 mov     [esp+97Ch+var_8EC], bl
.text:0040A0DA
.text:0040A0DA loc_40A0DA:                             ; CODE XREF: sub_406ED0+31F3↑j
.text:0040A0DA                 movzx   edx, [esp+97Ch+var_8EC]
.text:0040A0E2                 sub     dl, 30h ; '0'
.text:0040A0E5                 cmp     dl, 9
.text:0040A0E8                 ja      short loc_40A120
.text:0040A0EA                 cmp     [esp+97Ch+var_938], 7FFFh
.text:0040A0F2                 jg      short loc_40A117
.text:0040A0F4                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040A0FC                 mov     edx, [esp+97Ch+var_938]
.text:0040A100                 shr     edx, 1Fh
.text:0040A103                 dec     edx
.text:0040A104                 and     [esp+97Ch+var_938], edx
.text:0040A108                 mov     eax, [esp+97Ch+var_938]
.text:0040A10C                 lea     esi, [eax+eax*4]
.text:0040A10F                 lea     ebx, [ebp+esi*2-30h]
.text:0040A113                 mov     [esp+97Ch+var_938], ebx
.text:0040A117
.text:0040A117 loc_40A117:                             ; CODE XREF: sub_406ED0+3222↑j
.text:0040A117                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040A11E                 jnz     short loc_40A0A8
.text:0040A120
.text:0040A120 loc_40A120:                             ; CODE XREF: sub_406ED0+3218↑j
.text:0040A120                 mov     edi, [esp+97Ch+var_938]
.text:0040A124                 test    edi, edi
.text:0040A126                 jns     loc_409C5C
.text:0040A12C
.text:0040A12C loc_40A12C:                             ; CODE XREF: sub_406ED0+31D2↑j
.text:0040A12C                 mov     [esp+97Ch+var_938], 7FFFh
.text:0040A134                 jmp     loc_409C5C
.text:0040A139 ; ---------------------------------------------------------------------------
.text:0040A139
.text:0040A139 loc_40A139:                             ; CODE XREF: sub_406ED0+22AD↑j
.text:0040A139                                         ; DATA XREF: sub_406ED0:jpt_40917D↑o
.text:0040A139                 mov     edi, [esp+97Ch+arg_8] ; jumptable 0040917D case 124
.text:0040A140                 and     edi, 0FFFF8400h
.text:0040A146                 test    di, di
.text:0040A149                 jz      loc_407746
.text:0040A14F                 jmp     def_40917D      ; jumptable 0040917D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040A154 ; ---------------------------------------------------------------------------
.text:0040A154
.text:0040A154 loc_40A154:                             ; CODE XREF: sub_406ED0+16F↑j
.text:0040A154                                         ; DATA XREF: sub_406ED0:jpt_40703F↑o
.text:0040A154                 mov     edx, [esp+97Ch+arg_8] ; jumptable 0040703F case 123
.text:0040A15B                 and     edx, 1200h
.text:0040A161                 cmp     edx, 1200h
.text:0040A167                 jnz     def_40703F      ; jumptable 0040703F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040A16D                 jmp     loc_409BA8
.text:0040A172 ; ---------------------------------------------------------------------------
.text:0040A172
.text:0040A172 loc_40A172:                             ; CODE XREF: sub_406ED0+16F↑j
.text:0040A172                                         ; DATA XREF: sub_406ED0:jpt_40703F↑o
.text:0040A172                 mov     esi, [esp+97Ch+arg_8] ; jumptable 0040703F case 124
.text:0040A179                 and     esi, 0FFFF8000h
.text:0040A17F                 test    si, si
.text:0040A182                 jmp     loc_407740
.text:0040A187 ; ---------------------------------------------------------------------------
.text:0040A187
.text:0040A187 loc_40A187:                             ; CODE XREF: sub_406ED0+F9↑j
.text:0040A187                 mov     edi, [esp+97Ch+Block]
.text:0040A18E                 mov     ebp, 0Ch
.text:0040A193                 jmp     loc_407470
.text:0040A198 ; ---------------------------------------------------------------------------
.text:0040A198
.text:0040A198 loc_40A198:                             ; CODE XREF: sub_406ED0+D6↑j
.text:0040A198                 mov     [esp+97Ch+Size], 20h ; ' ' ; Size
.text:0040A19F                 call    malloc
.text:0040A1A4                 mov     ecx, [esp+97Ch+arg_C]
.text:0040A1AB                 mov     [ecx], eax
.text:0040A1AD                 jmp     loc_406FBE
.text:0040A1B2 ; ---------------------------------------------------------------------------
.text:0040A1B2
.text:0040A1B2 loc_40A1B2:                             ; CODE XREF: sub_406ED0+CC↑j
.text:0040A1B2                 mov     ebp, [esp+97Ch+arg_C]
.text:0040A1B9                 mov     edi, [ebp+0]
.text:0040A1BC                 jmp     loc_406FDD
.text:0040A1C1 ; ---------------------------------------------------------------------------
.text:0040A1C1
.text:0040A1C1 loc_40A1C1:                             ; CODE XREF: sub_406ED0+BA↑j
.text:0040A1C1                 mov     [esp+97Ch+var_974], 100h ; Size
.text:0040A1C9                 xor     ebx, ebx
.text:0040A1CB                 mov     [esp+97Ch+var_978], 0 ; Val
.text:0040A1D3                 mov     [esp+97Ch+Size], offset byte_419230 ; void *
.text:0040A1DA                 call    memset
.text:0040A1DF                 nop
.text:0040A1E0
.text:0040A1E0 loc_40A1E0:                             ; CODE XREF: sub_406ED0+333D↓j
.text:0040A1E0                 mov     esi, ds:__mb_cur_max
.text:0040A1E6                 cmp     dword ptr [esi], 1
.text:0040A1E9                 jz      short loc_40A226
.text:0040A1EB                 mov     [esp+97Ch+var_978], 107h ; Type
.text:0040A1F3                 mov     [esp+97Ch+Size], ebx ; C
.text:0040A1F6                 call    _isctype
.text:0040A1FB
.text:0040A1FB loc_40A1FB:                             ; CODE XREF: sub_406ED0+3368↓j
.text:0040A1FB                 test    eax, eax
.text:0040A1FD                 jz      short loc_40A206
.text:0040A1FF                 mov     ds:byte_419230[ebx], 1
.text:0040A206
.text:0040A206 loc_40A206:                             ; CODE XREF: sub_406ED0+332D↑j
.text:0040A206                 inc     ebx
.text:0040A207                 cmp     ebx, 0FFh
.text:0040A20D                 jle     short loc_40A1E0
.text:0040A20F                 mov     ds:byte_41928F, 1
.text:0040A216                 mov     ebx, 1
.text:0040A21B                 mov     ds:dword_419220, ebx
.text:0040A221                 jmp     loc_406F90
.text:0040A226 ; ---------------------------------------------------------------------------
.text:0040A226
.text:0040A226 loc_40A226:                             ; CODE XREF: sub_406ED0+3319↑j
.text:0040A226                 mov     ebp, ds:_pctype
.text:0040A22C                 mov     edi, [ebp+0]
.text:0040A22F                 movzx   eax, word ptr [edi+ebx*2]
.text:0040A233                 and     eax, 107h
.text:0040A238                 jmp     short loc_40A1FB
.text:0040A238 sub_406ED0      endp
.text:0040A238
.text:0040A238 ; ---------------------------------------------------------------------------
.text:0040A23A                 align 10h
.text:0040A240
.text:0040A240 ; =============== S U B R O U T I N E =======================================
.text:0040A240
.text:0040A240
.text:0040A240 sub_40A240      proc near               ; CODE XREF: .text:00406B85↑p
.text:0040A240                                         ; sub_406C80+46↑p ...
.text:0040A240
.text:0040A240 var_4C          = dword ptr -4Ch
.text:0040A240 var_48          = dword ptr -48h
.text:0040A240 var_44          = dword ptr -44h
.text:0040A240 var_40          = dword ptr -40h
.text:0040A240 var_3C          = dword ptr -3Ch
.text:0040A240 var_38          = dword ptr -38h
.text:0040A240 var_34          = dword ptr -34h
.text:0040A240 var_30          = dword ptr -30h
.text:0040A240 var_20          = dword ptr -20h
.text:0040A240 var_1C          = dword ptr -1Ch
.text:0040A240 var_18          = dword ptr -18h
.text:0040A240 var_14          = dword ptr -14h
.text:0040A240 arg_0           = dword ptr  4
.text:0040A240 arg_4           = dword ptr  8
.text:0040A240 arg_8           = dword ptr  0Ch
.text:0040A240 arg_C           = dword ptr  10h
.text:0040A240 arg_10          = dword ptr  14h
.text:0040A240 arg_14          = dword ptr  18h
.text:0040A240 arg_18          = dword ptr  1Ch
.text:0040A240 arg_1C          = dword ptr  20h
.text:0040A240 arg_20          = dword ptr  24h
.text:0040A240
.text:0040A240                 push    ebp
.text:0040A241                 push    edi
.text:0040A242                 push    esi
.text:0040A243                 push    ebx
.text:0040A244                 sub     esp, 3Ch
.text:0040A247                 mov     edi, [esp+4Ch+arg_0]
.text:0040A24B                 mov     ebx, [esp+4Ch+arg_14]
.text:0040A24F                 mov     ecx, [esp+4Ch+arg_10]
.text:0040A253                 mov     edx, [edi+14h]
.text:0040A256                 mov     esi, [esp+4Ch+arg_18]
.text:0040A25A                 mov     ebp, [edi+10h]
.text:0040A25D                 mov     [esp+4Ch+var_14], edx
.text:0040A261                 mov     edx, [esp+4Ch+arg_8]
.text:0040A265                 lea     eax, [esi+ebx]
.text:0040A268                 add     edx, ecx
.text:0040A26A                 test    ebx, ebx
.text:0040A26C                 mov     [esp+4Ch+var_18], edx
.text:0040A270                 js      loc_40A410
.text:0040A276                 cmp     ebx, edx
.text:0040A278                 jg      loc_40A410
.text:0040A27E                 test    eax, eax
.text:0040A280                 js      loc_40A4D1
.text:0040A286                 cmp     eax, [esp+4Ch+var_18]
.text:0040A28A                 jle     short loc_40A292
.text:0040A28C                 mov     esi, [esp+4Ch+var_18]
.text:0040A290                 sub     esi, ebx
.text:0040A292
.text:0040A292 loc_40A292:                             ; CODE XREF: sub_40A240+4A↑j
.text:0040A292                                         ; sub_40A240+295↓j
.text:0040A292                 mov     eax, [edi+8]
.text:0040A295                 test    eax, eax
.text:0040A297                 jz      short loc_40A2C0
.text:0040A299                 test    esi, esi
.text:0040A29B                 jle     short loc_40A2C0
.text:0040A29D                 mov     ecx, [edi]
.text:0040A29F                 movzx   eax, byte ptr [ecx]
.text:0040A2A2                 cmp     al, 0Bh
.text:0040A2A4                 jz      loc_40A4BA
.text:0040A2AA                 cmp     al, 9
.text:0040A2AC                 jz      loc_40A4B0
.text:0040A2B2                 lea     esi, [esi+0]
.text:0040A2B9                 lea     edi, [edi+0]
.text:0040A2C0
.text:0040A2C0 loc_40A2C0:                             ; CODE XREF: sub_40A240+57↑j
.text:0040A2C0                                         ; sub_40A240+5B↑j ...
.text:0040A2C0                 test    ebp, ebp
.text:0040A2C2                 jz      loc_40A380
.text:0040A2C8                 test    byte ptr [edi+1Ch], 8
.text:0040A2CC                 jz      loc_40A495
.text:0040A2D2
.text:0040A2D2 loc_40A2D2:                             ; CODE XREF: sub_40A240+1AF↓j
.text:0040A2D2                                         ; sub_40A240+1B6↓j ...
.text:0040A2D2                 test    ebp, ebp
.text:0040A2D4                 jz      loc_40A380
.text:0040A2DA                 cmp     ebx, [esp+4Ch+var_18]
.text:0040A2DE                 jge     loc_40A380
.text:0040A2E4                 test    byte ptr [edi+1Ch], 1
.text:0040A2E8                 jnz     loc_40A380
.text:0040A2EE                 test    esi, esi
.text:0040A2F0                 jle     loc_40A444
.text:0040A2F6                 cmp     ebx, [esp+4Ch+arg_8]
.text:0040A2FA                 mov     [esp+4Ch+var_20], 0
.text:0040A302                 mov     [esp+4Ch+var_1C], esi
.text:0040A306                 jge     loc_40A432
.text:0040A30C                 lea     edx, [esi+ebx]
.text:0040A30F                 cmp     edx, [esp+4Ch+arg_8]
.text:0040A313                 jl      short loc_40A323
.text:0040A315                 mov     ecx, [esp+4Ch+arg_8]
.text:0040A319                 mov     edx, esi
.text:0040A31B                 sub     ecx, ebx
.text:0040A31D                 sub     edx, ecx
.text:0040A31F                 mov     [esp+4Ch+var_20], edx
.text:0040A323
.text:0040A323 loc_40A323:                             ; CODE XREF: sub_40A240+D3↑j
.text:0040A323                 mov     edx, [esp+4Ch+arg_4]
.text:0040A327                 add     edx, ebx
.text:0040A329
.text:0040A329 loc_40A329:                             ; CODE XREF: sub_40A240+1FF↓j
.text:0040A329                 mov     ecx, [esp+4Ch+var_14]
.text:0040A32D                 test    ecx, ecx
.text:0040A32F                 jz      loc_40A417
.text:0040A335                 cmp     esi, [esp+4Ch+var_20]
.text:0040A339                 jle     short loc_40A369
.text:0040A33B                 movzx   eax, byte ptr [edx]
.text:0040A33E                 inc     edx
.text:0040A33F                 mov     ecx, [esp+4Ch+var_14]
.text:0040A343                 movzx   ecx, byte ptr [eax+ecx]
.text:0040A347                 cmp     byte ptr [ecx+ebp], 0
.text:0040A34B                 jnz     short loc_40A369
.text:0040A34D                 lea     esi, [esi+0]
.text:0040A350
.text:0040A350 loc_40A350:                             ; CODE XREF: sub_40A240+127↓j
.text:0040A350                 dec     esi
.text:0040A351                 cmp     esi, [esp+4Ch+var_20]
.text:0040A355                 jle     short loc_40A369
.text:0040A357                 movzx   eax, byte ptr [edx]
.text:0040A35A                 inc     edx
.text:0040A35B                 mov     ecx, [esp+4Ch+var_14]
.text:0040A35F                 movzx   eax, byte ptr [eax+ecx]
.text:0040A363                 cmp     byte ptr [eax+ebp], 0
.text:0040A367                 jz      short loc_40A350
.text:0040A369
.text:0040A369 loc_40A369:                             ; CODE XREF: sub_40A240+F9↑j
.text:0040A369                                         ; sub_40A240+10B↑j ...
.text:0040A369                 sub     [esp+4Ch+var_1C], esi
.text:0040A36D                 mov     edx, [esp+4Ch+var_1C]
.text:0040A371                 add     ebx, edx
.text:0040A373                 lea     esi, [esi+0]
.text:0040A379                 lea     edi, [edi+0]
.text:0040A380
.text:0040A380 loc_40A380:                             ; CODE XREF: sub_40A240+82↑j
.text:0040A380                                         ; sub_40A240+94↑j ...
.text:0040A380                 test    esi, esi
.text:0040A382                 js      short loc_40A38A
.text:0040A384                 cmp     ebx, [esp+4Ch+var_18]
.text:0040A388                 jz      short loc_40A400
.text:0040A38A
.text:0040A38A loc_40A38A:                             ; CODE XREF: sub_40A240+142↑j
.text:0040A38A                                         ; sub_40A240+1C2↓j ...
.text:0040A38A                 mov     [esp+4Ch+var_38], ebx
.text:0040A38E                 mov     edx, [esp+4Ch+arg_20]
.text:0040A392                 mov     ecx, [esp+4Ch+arg_1C]
.text:0040A396                 mov     [esp+4Ch+var_4C], edi
.text:0040A399                 mov     eax, [esp+4Ch+arg_10]
.text:0040A39D                 mov     [esp+4Ch+var_30], edx
.text:0040A3A1                 mov     edx, [esp+4Ch+arg_C]
.text:0040A3A5                 mov     [esp+4Ch+var_34], ecx
.text:0040A3A9                 mov     ecx, [esp+4Ch+arg_8]
.text:0040A3AD                 mov     [esp+4Ch+var_3C], eax
.text:0040A3B1                 mov     eax, [esp+4Ch+arg_4]
.text:0040A3B5                 mov     [esp+4Ch+var_40], edx
.text:0040A3B9                 mov     [esp+4Ch+var_44], ecx
.text:0040A3BD                 mov     [esp+4Ch+var_48], eax
.text:0040A3C1                 call    sub_403FC0
.text:0040A3C6                 test    eax, eax
.text:0040A3C8                 mov     edx, ebx
.text:0040A3CA                 js      short loc_40A3D6
.text:0040A3CC
.text:0040A3CC loc_40A3CC:                             ; CODE XREF: sub_40A240+19E↓j
.text:0040A3CC                                         ; sub_40A240+1A7↓j ...
.text:0040A3CC                 add     esp, 3Ch
.text:0040A3CF                 mov     eax, edx
.text:0040A3D1                 pop     ebx
.text:0040A3D2                 pop     esi
.text:0040A3D3                 pop     edi
.text:0040A3D4                 pop     ebp
.text:0040A3D5                 retn
.text:0040A3D6 ; ---------------------------------------------------------------------------
.text:0040A3D6
.text:0040A3D6 loc_40A3D6:                             ; CODE XREF: sub_40A240+18A↑j
.text:0040A3D6                 cmp     eax, 0FFFFFFFEh
.text:0040A3D9                 mov     edx, 0FFFFFFFEh
.text:0040A3DE                 jz      short loc_40A3CC
.text:0040A3E0
.text:0040A3E0 loc_40A3E0:                             ; CODE XREF: sub_40A240+241↓j
.text:0040A3E0                 test    esi, esi
.text:0040A3E2                 mov     edx, 0FFFFFFFFh
.text:0040A3E7                 jz      short loc_40A3CC
.text:0040A3E9                 test    esi, esi
.text:0040A3EB                 jle     short loc_40A3F4
.text:0040A3ED                 dec     esi
.text:0040A3EE                 inc     ebx
.text:0040A3EF                 jmp     loc_40A2D2
.text:0040A3F4 ; ---------------------------------------------------------------------------
.text:0040A3F4
.text:0040A3F4 loc_40A3F4:                             ; CODE XREF: sub_40A240+1AB↑j
.text:0040A3F4                 inc     esi
.text:0040A3F5                 dec     ebx
.text:0040A3F6                 jmp     loc_40A2D2
.text:0040A3F6 ; ---------------------------------------------------------------------------
.text:0040A3FB                 align 10h
.text:0040A400
.text:0040A400 loc_40A400:                             ; CODE XREF: sub_40A240+148↑j
.text:0040A400                 test    ebp, ebp
.text:0040A402                 jz      short loc_40A38A
.text:0040A404                 test    byte ptr [edi+1Ch], 1
.text:0040A408                 jnz     short loc_40A38A
.text:0040A40A                 lea     esi, [esi+0]
.text:0040A410
.text:0040A410 loc_40A410:                             ; CODE XREF: sub_40A240+30↑j
.text:0040A410                                         ; sub_40A240+38↑j
.text:0040A410                 mov     edx, 0FFFFFFFFh
.text:0040A415                 jmp     short loc_40A3CC
.text:0040A417 ; ---------------------------------------------------------------------------
.text:0040A417
.text:0040A417 loc_40A417:                             ; CODE XREF: sub_40A240+EF↑j
.text:0040A417                                         ; sub_40A240+1F0↓j
.text:0040A417                 cmp     esi, [esp+4Ch+var_20]
.text:0040A41B                 jle     loc_40A369
.text:0040A421                 movzx   ecx, byte ptr [edx]
.text:0040A424                 inc     edx
.text:0040A425                 cmp     byte ptr [ecx+ebp], 0
.text:0040A429                 jnz     loc_40A369
.text:0040A42F                 dec     esi
.text:0040A430                 jmp     short loc_40A417
.text:0040A432 ; ---------------------------------------------------------------------------
.text:0040A432
.text:0040A432 loc_40A432:                             ; CODE XREF: sub_40A240+C6↑j
.text:0040A432                 mov     ecx, [esp+4Ch+arg_C]
.text:0040A436                 mov     eax, [esp+4Ch+arg_8]
.text:0040A43A                 sub     ecx, eax
.text:0040A43C                 lea     edx, [ebx+ecx]
.text:0040A43F                 jmp     loc_40A329
.text:0040A444 ; ---------------------------------------------------------------------------
.text:0040A444
.text:0040A444 loc_40A444:                             ; CODE XREF: sub_40A240+B0↑j
.text:0040A444                 mov     ecx, [esp+4Ch+arg_8]
.text:0040A448                 test    ecx, ecx
.text:0040A44A                 jz      short loc_40A452
.text:0040A44C                 cmp     ebx, [esp+4Ch+arg_8]
.text:0040A450                 jl      short loc_40A48B
.text:0040A452
.text:0040A452 loc_40A452:                             ; CODE XREF: sub_40A240+20A↑j
.text:0040A452                 mov     edx, [esp+4Ch+arg_8]
.text:0040A456                 mov     eax, ebx
.text:0040A458                 mov     ecx, [esp+4Ch+arg_C]
.text:0040A45C                 sub     eax, edx
.text:0040A45E                 movzx   eax, byte ptr [eax+ecx]
.text:0040A462
.text:0040A462 loc_40A462:                             ; CODE XREF: sub_40A240+253↓j
.text:0040A462                 mov     ecx, [esp+4Ch+var_14]
.text:0040A466                 test    ecx, ecx
.text:0040A468                 jz      short loc_40A486
.text:0040A46A                 mov     edx, [esp+4Ch+var_14]
.text:0040A46E                 movzx   ecx, al
.text:0040A471                 movzx   eax, byte ptr [ecx+edx]
.text:0040A475
.text:0040A475 loc_40A475:                             ; CODE XREF: sub_40A240+249↓j
.text:0040A475                 lea     edx, [eax+ebp]
.text:0040A478                 cmp     byte ptr [edx], 0
.text:0040A47B                 jnz     loc_40A380
.text:0040A481                 jmp     loc_40A3E0
.text:0040A486 ; ---------------------------------------------------------------------------
.text:0040A486
.text:0040A486 loc_40A486:                             ; CODE XREF: sub_40A240+228↑j
.text:0040A486                 movzx   eax, al
.text:0040A489                 jmp     short loc_40A475
.text:0040A48B ; ---------------------------------------------------------------------------
.text:0040A48B
.text:0040A48B loc_40A48B:                             ; CODE XREF: sub_40A240+210↑j
.text:0040A48B                 mov     edx, [esp+4Ch+arg_4]
.text:0040A48F                 movzx   eax, byte ptr [ebx+edx]
.text:0040A493                 jmp     short loc_40A462
.text:0040A495 ; ---------------------------------------------------------------------------
.text:0040A495
.text:0040A495 loc_40A495:                             ; CODE XREF: sub_40A240+8C↑j
.text:0040A495                 mov     [esp+4Ch+var_4C], edi
.text:0040A498                 call    sub_4068F0
.text:0040A49D                 cmp     eax, 0FFFFFFFEh
.text:0040A4A0                 mov     edx, 0FFFFFFFEh
.text:0040A4A5                 jnz     loc_40A2D2
.text:0040A4AB                 jmp     loc_40A3CC
.text:0040A4B0 ; ---------------------------------------------------------------------------
.text:0040A4B0
.text:0040A4B0 loc_40A4B0:                             ; CODE XREF: sub_40A240+6C↑j
.text:0040A4B0                 test    byte ptr [edi+1Ch], 80h
.text:0040A4B4                 jnz     loc_40A2C0
.text:0040A4BA
.text:0040A4BA loc_40A4BA:                             ; CODE XREF: sub_40A240+64↑j
.text:0040A4BA                 test    ebx, ebx
.text:0040A4BC                 mov     edx, 0FFFFFFFFh
.text:0040A4C1                 jg      loc_40A3CC
.text:0040A4C7                 mov     esi, 1
.text:0040A4CC                 jmp     loc_40A2C0
.text:0040A4D1 ; ---------------------------------------------------------------------------
.text:0040A4D1
.text:0040A4D1 loc_40A4D1:                             ; CODE XREF: sub_40A240+40↑j
.text:0040A4D1                 mov     esi, ebx
.text:0040A4D3                 neg     esi
.text:0040A4D5                 jmp     loc_40A292
.text:0040A4D5 sub_40A240      endp
.text:0040A4D5
.text:0040A4D5 ; ---------------------------------------------------------------------------
.text:0040A4DA                 align 10h
.text:0040A4E0
.text:0040A4E0 ; =============== S U B R O U T I N E =======================================
.text:0040A4E0
.text:0040A4E0
.text:0040A4E0 sub_40A4E0      proc near               ; CODE XREF: sub_4068F0↑j
.text:0040A4E0
.text:0040A4E0 Size            = dword ptr -6Ch
.text:0040A4E0 Val             = dword ptr -68h
.text:0040A4E0 var_64          = dword ptr -64h
.text:0040A4E0 var_4D          = byte ptr -4Dh
.text:0040A4E0 var_4C          = byte ptr -4Ch
.text:0040A4E0 var_30          = dword ptr -30h
.text:0040A4E0 Src             = dword ptr -2Ch
.text:0040A4E0 var_28          = dword ptr -28h
.text:0040A4E0 var_24          = dword ptr -24h
.text:0040A4E0 arg_0           = dword ptr  4
.text:0040A4E0
.text:0040A4E0                 push    ebp
.text:0040A4E1                 push    edi
.text:0040A4E2                 push    esi
.text:0040A4E3                 push    ebx
.text:0040A4E4                 sub     esp, 5Ch
.text:0040A4E7                 mov     ebp, [esp+6Ch+arg_0]
.text:0040A4EB                 mov     [esp+6Ch+var_4C], 1
.text:0040A4F0                 mov     [esp+6Ch+var_4D], 0
.text:0040A4F5                 mov     ecx, [ebp+0]
.text:0040A4F8                 mov     eax, [ebp+8]
.text:0040A4FB                 mov     esi, [ebp+10h]
.text:0040A4FE                 mov     edi, ecx
.text:0040A500                 add     eax, ecx
.text:0040A502                 mov     [esp+6Ch+var_30], eax
.text:0040A506                 mov     [esp+6Ch+Size], 14h ; Size
.text:0040A50D                 call    malloc
.text:0040A512                 mov     [esp+6Ch+Src], eax
.text:0040A516                 test    eax, eax
.text:0040A518                 mov     edx, 0FFFFFFFEh
.text:0040A51D                 jz      loc_40A602
.text:0040A523                 mov     [esp+6Ch+var_28], 5
.text:0040A52B                 mov     [esp+6Ch+var_24], 0
.text:0040A533                 mov     [esp+6Ch+var_64], 100h ; Size
.text:0040A53B                 mov     [esp+6Ch+Val], 0 ; Val
.text:0040A543                 mov     [esp+6Ch+Size], esi ; void *
.text:0040A546                 call    memset
.text:0040A54B                 movzx   edx, byte ptr [ebp+1Ch]
.text:0040A54F                 or      dl, 8
.text:0040A552                 and     dl, 0FEh
.text:0040A555                 mov     [ebp+1Ch], dl
.text:0040A558
.text:0040A558 loc_40A558:                             ; CODE XREF: sub_40A4E0+9A↓j
.text:0040A558                                         ; sub_40A4E0+13D↓j ...
.text:0040A558                 cmp     edi, [esp+6Ch+var_30] ; jumptable 0040A57A cases 0,9-12,20,26-29
.text:0040A55C                 jz      loc_40A860
.text:0040A562                 movzx   eax, byte ptr [edi]
.text:0040A565                 cmp     al, 1
.text:0040A567                 jz      loc_40A860
.text:0040A56D                 movzx   eax, al
.text:0040A570                 inc     edi
.text:0040A571                 cmp     eax, 1Dh        ; switch 30 cases
.text:0040A574                 ja      def_40A57A      ; jumptable 0040A57A default case, case 1
.text:0040A57A                 jmp     ds:jpt_40A57A[eax*4] ; switch jump
.text:0040A57A ; ---------------------------------------------------------------------------
.text:0040A581                 align 4
.text:0040A584 jpt_40A57A      dd offset loc_40A558    ; DATA XREF: sub_40A4E0+9A↑r
.text:0040A584                 dd offset def_40A57A    ; jump table for switch statement
.text:0040A584                 dd offset loc_40A60C
.text:0040A584                 dd offset loc_40A622
.text:0040A584                 dd offset loc_40A650
.text:0040A584                 dd offset loc_40A688
.text:0040A584                 dd offset loc_40A6EC
.text:0040A584                 dd offset loc_40A6EC
.text:0040A584                 dd offset loc_40A5FC
.text:0040A584                 dd offset loc_40A558
.text:0040A584                 dd offset loc_40A558
.text:0040A584                 dd offset loc_40A558
.text:0040A584                 dd offset loc_40A558
.text:0040A584                 dd offset loc_40A7B5
.text:0040A584                 dd offset loc_40A7B5
.text:0040A584                 dd offset loc_40A6F4
.text:0040A584                 dd offset loc_40A6F4
.text:0040A584                 dd offset loc_40A7B5
.text:0040A584                 dd offset loc_40A7B5
.text:0040A584                 dd offset loc_40A7B5
.text:0040A584                 dd offset loc_40A558
.text:0040A584                 dd offset loc_40A78E
.text:0040A584                 dd offset loc_40A7B5
.text:0040A584                 dd offset loc_40A813
.text:0040A584                 dd offset loc_40A81B
.text:0040A584                 dd offset loc_40A83D
.text:0040A584                 dd offset loc_40A558
.text:0040A584                 dd offset loc_40A558
.text:0040A584                 dd offset loc_40A558
.text:0040A584                 dd offset loc_40A558
.text:0040A5FC ; ---------------------------------------------------------------------------
.text:0040A5FC
.text:0040A5FC loc_40A5FC:                             ; CODE XREF: sub_40A4E0+9A↑j
.text:0040A5FC                                         ; DATA XREF: sub_40A4E0:jpt_40A57A↑o
.text:0040A5FC                 or      byte ptr [ebp+1Ch], 1 ; jumptable 0040A57A case 8
.text:0040A600
.text:0040A600 loc_40A600:                             ; CODE XREF: sub_40A4E0+16E↓j
.text:0040A600                                         ; sub_40A4E0+3C8↓j
.text:0040A600                 xor     edx, edx
.text:0040A602
.text:0040A602 loc_40A602:                             ; CODE XREF: sub_40A4E0+3D↑j
.text:0040A602                                         ; sub_40A4E0+2A3↓j
.text:0040A602                 add     esp, 5Ch
.text:0040A605                 mov     eax, edx
.text:0040A607                 pop     ebx
.text:0040A608                 pop     esi
.text:0040A609                 pop     edi
.text:0040A60A                 pop     ebp
.text:0040A60B                 retn
.text:0040A60C ; ---------------------------------------------------------------------------
.text:0040A60C
.text:0040A60C loc_40A60C:                             ; CODE XREF: sub_40A4E0+9A↑j
.text:0040A60C                                         ; DATA XREF: sub_40A4E0:jpt_40A57A↑o
.text:0040A60C                 movzx   ecx, byte ptr [edi+1] ; jumptable 0040A57A case 2
.text:0040A610                 mov     byte ptr [ecx+esi], 1
.text:0040A614
.text:0040A614 loc_40A614:                             ; CODE XREF: sub_40A4E0+166↓j
.text:0040A614                                         ; sub_40A4E0+16C↓j ...
.text:0040A614                 mov     [esp+6Ch+var_4C], 0
.text:0040A619                 mov     edi, [esp+6Ch+var_30]
.text:0040A61D                 jmp     loc_40A558      ; jumptable 0040A57A cases 0,9-12,20,26-29
.text:0040A622 ; ---------------------------------------------------------------------------
.text:0040A622
.text:0040A622 loc_40A622:                             ; CODE XREF: sub_40A4E0+9A↑j
.text:0040A622                                         ; DATA XREF: sub_40A4E0:jpt_40A57A↑o
.text:0040A622                 movsx   eax, byte ptr [esi+0Ah] ; jumptable 0040A57A case 3
.text:0040A626                 xor     ebx, ebx
.text:0040A628                 nop
.text:0040A629                 lea     esi, [esi+0]
.text:0040A630
.text:0040A630 loc_40A630:                             ; CODE XREF: sub_40A4E0+15B↓j
.text:0040A630                 mov     byte ptr [ebx+esi], 1
.text:0040A634                 inc     ebx
.text:0040A635                 cmp     ebx, 0FFh
.text:0040A63B                 jle     short loc_40A630
.text:0040A63D                 test    byte ptr [ebp+0Ch], 40h
.text:0040A641                 jnz     short loc_40A648
.text:0040A643                 mov     [esi+0Ah], al
.text:0040A646                 jmp     short loc_40A614
.text:0040A648 ; ---------------------------------------------------------------------------
.text:0040A648
.text:0040A648 loc_40A648:                             ; CODE XREF: sub_40A4E0+161↑j
.text:0040A648                 test    byte ptr [ebp+1Ch], 1
.text:0040A64C                 jz      short loc_40A614
.text:0040A64E                 jmp     short loc_40A600
.text:0040A650 ; ---------------------------------------------------------------------------
.text:0040A650
.text:0040A650 loc_40A650:                             ; CODE XREF: sub_40A4E0+9A↑j
.text:0040A650                                         ; DATA XREF: sub_40A4E0:jpt_40A57A↑o
.text:0040A650                 movzx   edx, byte ptr [edi] ; jumptable 0040A57A case 4
.text:0040A653                 inc     edi
.text:0040A654                 lea     ebx, ds:0FFFFFFFFh[edx*8]
.text:0040A65B                 test    ebx, ebx
.text:0040A65D                 js      short loc_40A614
.text:0040A65F
.text:0040A65F loc_40A65F:                             ; CODE XREF: sub_40A4E0+19F↓j
.text:0040A65F                 test    ebx, ebx
.text:0040A661                 mov     eax, ebx
.text:0040A663                 js      short loc_40A683
.text:0040A665
.text:0040A665 loc_40A665:                             ; CODE XREF: sub_40A4E0+1A6↓j
.text:0040A665                 sar     eax, 3
.text:0040A668                 mov     ecx, ebx
.text:0040A66A                 movzx   edx, byte ptr [eax+edi]
.text:0040A66E                 shl     eax, 3
.text:0040A671                 sub     ecx, eax
.text:0040A673                 sar     edx, cl
.text:0040A675                 test    dl, 1
.text:0040A678                 jz      short loc_40A67E
.text:0040A67A                 mov     byte ptr [ebx+esi], 1
.text:0040A67E
.text:0040A67E loc_40A67E:                             ; CODE XREF: sub_40A4E0+198↑j
.text:0040A67E                 dec     ebx
.text:0040A67F                 jns     short loc_40A65F
.text:0040A681                 jmp     short loc_40A614
.text:0040A683 ; ---------------------------------------------------------------------------
.text:0040A683
.text:0040A683 loc_40A683:                             ; CODE XREF: sub_40A4E0+183↑j
.text:0040A683                 lea     eax, [ebx+7]
.text:0040A686                 jmp     short loc_40A665
.text:0040A688 ; ---------------------------------------------------------------------------
.text:0040A688
.text:0040A688 loc_40A688:                             ; CODE XREF: sub_40A4E0+9A↑j
.text:0040A688                                         ; DATA XREF: sub_40A4E0:jpt_40A57A↑o
.text:0040A688                 movzx   edx, byte ptr [edi] ; jumptable 0040A57A case 5
.text:0040A68B                 movzx   ecx, dl
.text:0040A68E                 lea     ebx, ds:0[ecx*8]
.text:0040A695                 cmp     ebx, 0FFh
.text:0040A69B                 jg      short loc_40A6AD
.text:0040A69D
.text:0040A69D loc_40A69D:                             ; CODE XREF: sub_40A4E0+1C8↓j
.text:0040A69D                 mov     byte ptr [ebx+esi], 1
.text:0040A6A1                 inc     ebx
.text:0040A6A2                 cmp     ebx, 0FFh
.text:0040A6A8                 jle     short loc_40A69D
.text:0040A6AA                 movzx   edx, byte ptr [edi]
.text:0040A6AD
.text:0040A6AD loc_40A6AD:                             ; CODE XREF: sub_40A4E0+1BB↑j
.text:0040A6AD                 movzx   ecx, dl
.text:0040A6B0                 inc     edi
.text:0040A6B1                 lea     ebx, ds:0FFFFFFFFh[ecx*8]
.text:0040A6B8                 test    ebx, ebx
.text:0040A6BA                 js      loc_40A614
.text:0040A6C0
.text:0040A6C0 loc_40A6C0:                             ; CODE XREF: sub_40A4E0+200↓j
.text:0040A6C0                 test    ebx, ebx
.text:0040A6C2                 mov     eax, ebx
.text:0040A6C4                 js      short loc_40A6E7
.text:0040A6C6
.text:0040A6C6 loc_40A6C6:                             ; CODE XREF: sub_40A4E0+20A↓j
.text:0040A6C6                 sar     eax, 3
.text:0040A6C9                 mov     ecx, ebx
.text:0040A6CB                 movzx   edx, byte ptr [eax+edi]
.text:0040A6CF                 shl     eax, 3
.text:0040A6D2                 sub     ecx, eax
.text:0040A6D4                 sar     edx, cl
.text:0040A6D6                 test    dl, 1
.text:0040A6D9                 jnz     short loc_40A6DF
.text:0040A6DB                 mov     byte ptr [ebx+esi], 1
.text:0040A6DF
.text:0040A6DF loc_40A6DF:                             ; CODE XREF: sub_40A4E0+1F9↑j
.text:0040A6DF                 dec     ebx
.text:0040A6E0                 jns     short loc_40A6C0
.text:0040A6E2                 jmp     loc_40A614
.text:0040A6E7 ; ---------------------------------------------------------------------------
.text:0040A6E7
.text:0040A6E7 loc_40A6E7:                             ; CODE XREF: sub_40A4E0+1E4↑j
.text:0040A6E7                 lea     eax, [ebx+7]
.text:0040A6EA                 jmp     short loc_40A6C6
.text:0040A6EC ; ---------------------------------------------------------------------------
.text:0040A6EC
.text:0040A6EC loc_40A6EC:                             ; CODE XREF: sub_40A4E0+9A↑j
.text:0040A6EC                                         ; sub_40A4E0+251↓j
.text:0040A6EC                                         ; DATA XREF: ...
.text:0040A6EC                 add     edi, 2          ; jumptable 0040A57A cases 6,7
.text:0040A6EF                 jmp     loc_40A558      ; jumptable 0040A57A cases 0,9-12,20,26-29
.text:0040A6F4 ; ---------------------------------------------------------------------------
.text:0040A6F4
.text:0040A6F4 loc_40A6F4:                             ; CODE XREF: sub_40A4E0+9A↑j
.text:0040A6F4                                         ; sub_40A4E0+2D0↓j
.text:0040A6F4                                         ; DATA XREF: ...
.text:0040A6F4                 movsx   ecx, byte ptr [edi+1] ; jumptable 0040A57A cases 15,16
.text:0040A6F8                 movzx   edx, byte ptr [edi]
.text:0040A6FB                 add     edi, 2
.text:0040A6FE                 shl     ecx, 8
.text:0040A701                 add     edx, ecx
.text:0040A703                 lea     ebx, [edx+edi]
.text:0040A706                 cmp     ebx, [esp+6Ch+var_30]
.text:0040A70A                 jnb     short loc_40A788
.text:0040A70C                 mov     ecx, [esp+6Ch+var_24]
.text:0040A710                 cmp     ecx, [esp+6Ch+var_28]
.text:0040A714                 jz      short loc_40A733
.text:0040A716
.text:0040A716 loc_40A716:                             ; CODE XREF: sub_40A4E0+29C↓j
.text:0040A716                 mov     edx, [esp+6Ch+Src]
.text:0040A71A                 mov     [edx+ecx*4], ebx
.text:0040A71D                 inc     [esp+6Ch+var_24]
.text:0040A721
.text:0040A721 loc_40A721:                             ; CODE XREF: sub_40A4E0+2AC↓j
.text:0040A721                 cmp     [esp+6Ch+var_4D], 0
.text:0040A726                 jz      loc_40A558      ; jumptable 0040A57A cases 0,9-12,20,26-29
.text:0040A72C                 mov     [esp+6Ch+var_4D], 0
.text:0040A731                 jmp     short loc_40A6EC ; jumptable 0040A57A cases 6,7
.text:0040A733 ; ---------------------------------------------------------------------------
.text:0040A733
.text:0040A733 loc_40A733:                             ; CODE XREF: sub_40A4E0+234↑j
.text:0040A733                 mov     eax, dword_416020
.text:0040A738                 lea     edx, [eax+eax*8]
.text:0040A73B                 lea     edx, [eax+edx*2]
.text:0040A73E                 cmp     ecx, edx
.text:0040A740                 ja      short loc_40A77E
.text:0040A742                 lea     edx, ds:0[ecx*8]
.text:0040A749                 mov     [esp+6Ch+Size], edx ; Size
.text:0040A74C                 call    malloc
.text:0040A751                 mov     [esp+6Ch+Size], eax ; void *
.text:0040A754                 mov     ecx, [esp+6Ch+var_28]
.text:0040A758                 shl     ecx, 2
.text:0040A75B                 mov     [esp+6Ch+var_64], ecx ; Size
.text:0040A75F                 mov     ecx, [esp+6Ch+Src]
.text:0040A763                 mov     [esp+6Ch+Val], ecx ; Src
.text:0040A767                 call    memcpy
.text:0040A76C                 mov     [esp+6Ch+Src], eax
.text:0040A770                 test    eax, eax
.text:0040A772                 jz      short loc_40A77E
.text:0040A774                 shl     [esp+6Ch+var_28], 1
.text:0040A778                 mov     ecx, [esp+6Ch+var_24]
.text:0040A77C                 jmp     short loc_40A716
.text:0040A77E ; ---------------------------------------------------------------------------
.text:0040A77E
.text:0040A77E loc_40A77E:                             ; CODE XREF: sub_40A4E0+260↑j
.text:0040A77E                                         ; sub_40A4E0+292↑j
.text:0040A77E                 mov     edx, 0FFFFFFFEh
.text:0040A783                 jmp     loc_40A602
.text:0040A788 ; ---------------------------------------------------------------------------
.text:0040A788
.text:0040A788 loc_40A788:                             ; CODE XREF: sub_40A4E0+22A↑j
.text:0040A788                 or      byte ptr [ebp+1Ch], 1
.text:0040A78C                 jmp     short loc_40A721
.text:0040A78E ; ---------------------------------------------------------------------------
.text:0040A78E
.text:0040A78E loc_40A78E:                             ; CODE XREF: sub_40A4E0+9A↑j
.text:0040A78E                                         ; DATA XREF: sub_40A4E0:jpt_40A57A↑o
.text:0040A78E                 add     edi, 2          ; jumptable 0040A57A case 21
.text:0040A791                 movsx   ecx, byte ptr [edi+1]
.text:0040A795                 movzx   ebx, byte ptr [edi]
.text:0040A798                 add     edi, 2
.text:0040A79B                 shl     ecx, 8
.text:0040A79E                 add     ebx, ecx
.text:0040A7A0                 test    ebx, ebx
.text:0040A7A2                 jnz     loc_40A558      ; jumptable 0040A57A cases 0,9-12,20,26-29
.text:0040A7A8                 mov     [esp+6Ch+var_4D], 1
.text:0040A7AD                 sub     edi, 4
.text:0040A7B0                 jmp     loc_40A6F4      ; jumptable 0040A57A cases 15,16
.text:0040A7B5 ; ---------------------------------------------------------------------------
.text:0040A7B5
.text:0040A7B5 loc_40A7B5:                             ; CODE XREF: sub_40A4E0+9A↑j
.text:0040A7B5                                         ; DATA XREF: sub_40A4E0:jpt_40A57A↑o
.text:0040A7B5                 movsx   ebx, byte ptr [edi+1] ; jumptable 0040A57A cases 13,14,17-19,22
.text:0040A7B9                 movzx   ecx, byte ptr [edi]
.text:0040A7BC                 shl     ebx, 8
.text:0040A7BF                 add     ecx, ebx
.text:0040A7C1                 test    ecx, ecx
.text:0040A7C3                 lea     edi, [ecx+edi+2]
.text:0040A7C7                 jg      loc_40A558      ; jumptable 0040A57A cases 0,9-12,20,26-29
.text:0040A7CD                 movzx   eax, byte ptr [edi]
.text:0040A7D0                 cmp     al, 0Fh
.text:0040A7D2                 jz      short loc_40A7DC
.text:0040A7D4                 cmp     al, 15h
.text:0040A7D6                 jnz     loc_40A558      ; jumptable 0040A57A cases 0,9-12,20,26-29
.text:0040A7DC
.text:0040A7DC loc_40A7DC:                             ; CODE XREF: sub_40A4E0+2F2↑j
.text:0040A7DC                 inc     edi
.text:0040A7DD                 movsx   ecx, byte ptr [edi+1]
.text:0040A7E1                 movzx   edx, byte ptr [edi]
.text:0040A7E4                 shl     ecx, 8
.text:0040A7E7                 add     edx, ecx
.text:0040A7E9                 lea     edi, [edx+edi+2]
.text:0040A7ED                 mov     edx, [esp+6Ch+var_24]
.text:0040A7F1                 test    edx, edx
.text:0040A7F3                 jz      loc_40A558      ; jumptable 0040A57A cases 0,9-12,20,26-29
.text:0040A7F9                 mov     ebx, [esp+6Ch+Src]
.text:0040A7FD                 cmp     [ebx+edx*4-4], edi
.text:0040A801                 jnz     loc_40A558      ; jumptable 0040A57A cases 0,9-12,20,26-29
.text:0040A807                 lea     eax, [edx-1]
.text:0040A80A                 mov     [esp+6Ch+var_24], eax
.text:0040A80E                 jmp     loc_40A558      ; jumptable 0040A57A cases 0,9-12,20,26-29
.text:0040A813 ; ---------------------------------------------------------------------------
.text:0040A813
.text:0040A813 loc_40A813:                             ; CODE XREF: sub_40A4E0+9A↑j
.text:0040A813                                         ; DATA XREF: sub_40A4E0:jpt_40A57A↑o
.text:0040A813                 add     edi, 4          ; jumptable 0040A57A case 23
.text:0040A816                 jmp     loc_40A558      ; jumptable 0040A57A cases 0,9-12,20,26-29
.text:0040A81B ; ---------------------------------------------------------------------------
.text:0040A81B
.text:0040A81B loc_40A81B:                             ; CODE XREF: sub_40A4E0+9A↑j
.text:0040A81B                                         ; DATA XREF: sub_40A4E0:jpt_40A57A↑o
.text:0040A81B                 xor     ebx, ebx        ; jumptable 0040A57A case 24
.text:0040A81D
.text:0040A81D loc_40A81D:                             ; CODE XREF: sub_40A4E0+350↓j
.text:0040A81D                 movzx   edi, bl
.text:0040A820                 cmp     ds:byte_419230[edi], 1
.text:0040A827                 jz      short loc_40A837
.text:0040A829
.text:0040A829 loc_40A829:                             ; CODE XREF: sub_40A4E0+35B↓j
.text:0040A829                 inc     ebx
.text:0040A82A                 cmp     ebx, 0FFh
.text:0040A830                 jle     short loc_40A81D
.text:0040A832                 jmp     loc_40A614
.text:0040A837 ; ---------------------------------------------------------------------------
.text:0040A837
.text:0040A837 loc_40A837:                             ; CODE XREF: sub_40A4E0+347↑j
.text:0040A837                 mov     byte ptr [ebx+esi], 1
.text:0040A83B                 jmp     short loc_40A829
.text:0040A83D ; ---------------------------------------------------------------------------
.text:0040A83D
.text:0040A83D loc_40A83D:                             ; CODE XREF: sub_40A4E0+9A↑j
.text:0040A83D                                         ; DATA XREF: sub_40A4E0:jpt_40A57A↑o
.text:0040A83D                 xor     ebx, ebx        ; jumptable 0040A57A case 25
.text:0040A83F
.text:0040A83F loc_40A83F:                             ; CODE XREF: sub_40A4E0+376↓j
.text:0040A83F                 movzx   edx, bl
.text:0040A842                 cmp     ds:byte_419230[edx], 1
.text:0040A849                 jz      short loc_40A84F
.text:0040A84B                 mov     byte ptr [ebx+esi], 1
.text:0040A84F
.text:0040A84F loc_40A84F:                             ; CODE XREF: sub_40A4E0+369↑j
.text:0040A84F                 inc     ebx
.text:0040A850                 cmp     ebx, 0FFh
.text:0040A856                 jle     short loc_40A83F
.text:0040A858                 jmp     loc_40A614
.text:0040A858 ; ---------------------------------------------------------------------------
.text:0040A85D                 align 10h
.text:0040A860
.text:0040A860 loc_40A860:                             ; CODE XREF: sub_40A4E0+7C↑j
.text:0040A860                                         ; sub_40A4E0+87↑j
.text:0040A860                 mov     ecx, [esp+6Ch+var_24]
.text:0040A864                 test    ecx, ecx
.text:0040A866                 jz      short loc_40A893
.text:0040A868                 movzx   ebx, byte ptr [ebp+1Ch]
.text:0040A86C                 dec     ecx
.text:0040A86D                 movzx   eax, [esp+6Ch+var_4C]
.text:0040A872                 or      eax, ebx
.text:0040A874                 and     al, 1
.text:0040A876                 and     bl, 0FEh
.text:0040A879                 or      bl, al
.text:0040A87B                 mov     [ebp+1Ch], bl
.text:0040A87E                 mov     ebx, [esp+6Ch+Src]
.text:0040A882                 mov     [esp+6Ch+var_4C], 1
.text:0040A887                 mov     [esp+6Ch+var_24], ecx
.text:0040A88B                 mov     edi, [ebx+ecx*4]
.text:0040A88E                 jmp     loc_40A558      ; jumptable 0040A57A cases 0,9-12,20,26-29
.text:0040A893 ; ---------------------------------------------------------------------------
.text:0040A893
.text:0040A893 loc_40A893:                             ; CODE XREF: sub_40A4E0+386↑j
.text:0040A893                 movzx   ebx, byte ptr [ebp+1Ch]
.text:0040A897                 movzx   eax, [esp+6Ch+var_4C]
.text:0040A89C                 or      eax, ebx
.text:0040A89E                 and     al, 1
.text:0040A8A0                 and     bl, 0FEh
.text:0040A8A3                 or      bl, al
.text:0040A8A5                 mov     [ebp+1Ch], bl
.text:0040A8A8                 jmp     loc_40A600
.text:0040A8AD ; ---------------------------------------------------------------------------
.text:0040A8AD
.text:0040A8AD def_40A57A:                             ; CODE XREF: sub_40A4E0+94↑j
.text:0040A8AD                                         ; sub_40A4E0+9A↑j
.text:0040A8AD                                         ; DATA XREF: ...
.text:0040A8AD                 call    abort           ; jumptable 0040A57A default case, case 1
.text:0040A8AD sub_40A4E0      endp
.text:0040A8AD
.text:0040A8AD ; ---------------------------------------------------------------------------
.text:0040A8B2                 align 10h
.text:0040A8C0
.text:0040A8C0 ; =============== S U B R O U T I N E =======================================
.text:0040A8C0
.text:0040A8C0
.text:0040A8C0 sub_40A8C0      proc near               ; DATA XREF: sub_40AA40+1B4↓o
.text:0040A8C0                 sub     eax, 9090002Dh
.text:0040A8C5                 nop
.text:0040A8C6                 nop
.text:0040A8C7                 nop
.text:0040A8C8                 nop
.text:0040A8C9                 nop
.text:0040A8CA                 nop
.text:0040A8CB                 nop
.text:0040A8CC                 nop
.text:0040A8CD                 nop
.text:0040A8CE                 nop
.text:0040A8CF                 nop
.text:0040A8D0                 nop
.text:0040A8D1                 nop
.text:0040A8D2                 nop
.text:0040A8D3                 nop
.text:0040A8D4                 nop
.text:0040A8D5                 nop
.text:0040A8D6                 nop
.text:0040A8D7                 nop
.text:0040A8D8                 nop
.text:0040A8D9                 nop
.text:0040A8DA                 nop
.text:0040A8DB                 nop
.text:0040A8DC                 nop
.text:0040A8DD                 nop
.text:0040A8DE                 nop
.text:0040A8DF                 nop
.text:0040A8DF sub_40A8C0      endp
.text:0040A8DF
.text:0040A8E0
.text:0040A8E0 ; =============== S U B R O U T I N E =======================================
.text:0040A8E0
.text:0040A8E0
.text:0040A8E0 sub_40A8E0      proc near               ; DATA XREF: sub_40AA40+3CC↓o
.text:0040A8E0                 and     eax, 6F203A73h
.text:0040A8E5                 jo      short loc_40A95B
.text:0040A8E7                 imul    ebp, [edi+6Eh], 63256020h
.text:0040A8EE                 and     eax, 64202773h
.text:0040A8F3                 outsd
.text:0040A8F4                 db      65h
.text:0040A8F4                 jnb     short loc_40A965
.text:0040A8F7                 daa
.text:0040A8F8                 jz      short loc_40A91A
.text:0040A8FA                 popa
.text:0040A8FB                 insb
.text:0040A8FC                 insb
.text:0040A8FD                 outsd
.text:0040A8FE                 ja      short sub_40A920
.text:0040A900                 popa
.text:0040A901                 outsb
.text:0040A902                 and     [ecx+72h], ah
.text:0040A905                 db      67h
.text:0040A905                 jnz     near ptr loc_40A974+1
.text:0040A908                 outs    dx, byte ptr gs:[esi]
.text:0040A90A                 jz      short loc_40A916
.text:0040A90C                 add     [eax-6F6F6F70h], dl
.text:0040A912                 nop
.text:0040A913                 nop
.text:0040A914                 nop
.text:0040A915                 nop
.text:0040A916
.text:0040A916 loc_40A916:                             ; CODE XREF: sub_40A8E0+2A↑j
.text:0040A916                 nop
.text:0040A917                 nop
.text:0040A918                 nop
.text:0040A919                 nop
.text:0040A91A
.text:0040A91A loc_40A91A:                             ; CODE XREF: sub_40A8E0+18↑j
.text:0040A91A                 nop
.text:0040A91B                 nop
.text:0040A91C                 nop
.text:0040A91D                 nop
.text:0040A91E                 nop
.text:0040A91F                 nop
.text:0040A91F sub_40A8E0      endp ; sp-analysis failed
.text:0040A91F
.text:0040A920
.text:0040A920 ; =============== S U B R O U T I N E =======================================
.text:0040A920
.text:0040A920
.text:0040A920 sub_40A920      proc near               ; CODE XREF: sub_40A8E0+1E↑j
.text:0040A920                                         ; DATA XREF: sub_40AA40:loc_40AE72↓o
.text:0040A920                 and     eax, 6F203A73h
.text:0040A925                 jo      short loc_40A99B
.text:0040A927                 imul    ebp, [edi+6Eh], 2D2D6020h
.text:0040A92E                 and     eax, 64202773h
.text:0040A933                 outsd
.text:0040A934                 db      65h
.text:0040A934                 jnb     short loc_40A9A5
.text:0040A937                 daa
.text:0040A938                 jz      short loc_40A95A
.text:0040A93A                 popa
.text:0040A93B                 insb
.text:0040A93C                 insb
.text:0040A93D                 outsd
.text:0040A93E                 ja      short sub_40A960
.text:0040A940                 popa
.text:0040A941                 outsb
.text:0040A942                 and     [ecx+72h], ah
.text:0040A945                 db      67h
.text:0040A945                 jnz     loc_40A9B5
.text:0040A948                 outs    dx, byte ptr gs:[esi]
.text:0040A94A                 jz      short loc_40A956
.text:0040A94C                 add     [eax-6F6F6F70h], dl
.text:0040A952                 nop
.text:0040A953                 nop
.text:0040A954                 nop
.text:0040A955                 nop
.text:0040A956
.text:0040A956 loc_40A956:                             ; CODE XREF: sub_40A920+2A↑j
.text:0040A956                 nop
.text:0040A957                 nop
.text:0040A958                 nop
.text:0040A959                 nop
.text:0040A95A
.text:0040A95A loc_40A95A:                             ; CODE XREF: sub_40A920+18↑j
.text:0040A95A                 nop
.text:0040A95B
.text:0040A95B loc_40A95B:                             ; CODE XREF: sub_40A8E0+5↑j
.text:0040A95B                 nop
.text:0040A95C                 nop
.text:0040A95D                 nop
.text:0040A95E                 nop
.text:0040A95F                 nop
.text:0040A95F sub_40A920      endp ; sp-analysis failed
.text:0040A95F
.text:0040A960
.text:0040A960 ; =============== S U B R O U T I N E =======================================
.text:0040A960
.text:0040A960
.text:0040A960 sub_40A960      proc near               ; CODE XREF: sub_40A920+1E↑j
.text:0040A960                                         ; DATA XREF: sub_40AA40:loc_40AF10↓o ...
.text:0040A960                 and     eax, 6F203A73h
.text:0040A965
.text:0040A965 loc_40A965:                             ; CODE XREF: sub_40A8E0+14↑j
.text:0040A965                 jo      short loc_40A9DB
.text:0040A967                 imul    ebp, [edi+6Eh], 73256020h
.text:0040A96E                 daa
.text:0040A96F                 and     [edx+65h], dh
.text:0040A972                 jno     short near ptr loc_40A9E8+1
.text:0040A974
.text:0040A974 loc_40A974:                             ; CODE XREF: sub_40A8E0+25↑j
.text:0040A974                 imul    esi, [edx+65h], 6E612073h
.text:0040A97B                 and     [ecx+72h], ah
.text:0040A97E                 db      67h
.text:0040A97E                 jnz     near ptr loc_40A9EC+2
.text:0040A981                 outs    dx, byte ptr gs:[esi]
.text:0040A983                 jz      short loc_40A98F
.text:0040A985                 add     [eax-6F6F6F70h], dl
.text:0040A98B                 nop
.text:0040A98C                 nop
.text:0040A98D                 nop
.text:0040A98E                 nop
.text:0040A98F
.text:0040A98F loc_40A98F:                             ; CODE XREF: sub_40A960+23↑j
.text:0040A98F                 nop
.text:0040A990                 nop
.text:0040A991                 nop
.text:0040A992                 nop
.text:0040A993                 nop
.text:0040A994                 nop
.text:0040A995                 nop
.text:0040A996                 nop
.text:0040A997                 nop
.text:0040A998                 nop
.text:0040A999                 nop
.text:0040A99A                 nop
.text:0040A99B
.text:0040A99B loc_40A99B:                             ; CODE XREF: sub_40A920+5↑j
.text:0040A99B                 nop
.text:0040A99C                 nop
.text:0040A99D                 nop
.text:0040A99E                 nop
.text:0040A99F                 nop
.text:0040A99F sub_40A960      endp
.text:0040A99F
.text:0040A9A0
.text:0040A9A0 ; =============== S U B R O U T I N E =======================================
.text:0040A9A0
.text:0040A9A0
.text:0040A9A0 sub_40A9A0      proc near               ; DATA XREF: sub_40AA40+55E↓o
.text:0040A9A0                 and     eax, 75203A73h
.text:0040A9A5
.text:0040A9A5 loc_40A9A5:                             ; CODE XREF: sub_40A920+14↑j
.text:0040A9A5                 outsb
.text:0040A9A6                 jb      short near ptr loc_40AA07+6
.text:0040A9A8                 arpl    [edi+67h], bp
.text:0040A9AB                 outsb
.text:0040A9AC                 imul    edi, [edx+65h], 706F2064h
.text:0040A9B3                 jz      short loc_40AA1E
.text:0040A9B5
.text:0040A9B5 loc_40A9B5:                             ; CODE XREF: sub_40A920+25↑j
.text:0040A9B5                 outsd
.text:0040A9B6                 outsb
.text:0040A9B7                 and     [eax+25h], ah
.text:0040A9BA                 arpl    ds:0A2773h, sp
.text:0040A9C0
.text:0040A9C0 loc_40A9C0:                             ; DATA XREF: sub_40AA40:loc_40AFE1↓o
.text:0040A9C0                 add     [eax-6F6F6F70h], dl
.text:0040A9C6                 nop
.text:0040A9C7                 nop
.text:0040A9C8                 nop
.text:0040A9C9                 nop
.text:0040A9CA                 nop
.text:0040A9CB                 nop
.text:0040A9CC                 nop
.text:0040A9CD                 nop
.text:0040A9CE                 nop
.text:0040A9CF                 nop
.text:0040A9D0                 nop
.text:0040A9D1                 nop
.text:0040A9D2                 nop
.text:0040A9D3                 nop
.text:0040A9D4                 nop
.text:0040A9D5                 nop
.text:0040A9D6                 nop
.text:0040A9D7                 nop
.text:0040A9D8                 nop
.text:0040A9D9                 nop
.text:0040A9DA                 nop
.text:0040A9DB
.text:0040A9DB loc_40A9DB:                             ; CODE XREF: sub_40A960:loc_40A965↑j
.text:0040A9DB                 nop
.text:0040A9DC                 nop
.text:0040A9DD                 nop
.text:0040A9DE                 nop
.text:0040A9DF                 nop
.text:0040A9DF sub_40A9A0      endp
.text:0040A9DF
.text:0040A9E0
.text:0040A9E0 ; =============== S U B R O U T I N E =======================================
.text:0040A9E0
.text:0040A9E0
.text:0040A9E0 sub_40A9E0      proc near               ; DATA XREF: sub_40AA40:loc_40AFFA↓o
.text:0040A9E0                 and     eax, 75203A73h
.text:0040A9E5                 outsb
.text:0040A9E6                 jb      short near ptr loc_40AA47+6
.text:0040A9E8
.text:0040A9E8 loc_40A9E8:                             ; CODE XREF: sub_40A960+12↑j
.text:0040A9E8                 arpl    [edi+67h], bp
.text:0040A9EB                 outsb
.text:0040A9EC
.text:0040A9EC loc_40A9EC:                             ; CODE XREF: sub_40A960+1E↑j
.text:0040A9EC                 imul    edi, [edx+65h], 706F2064h
.text:0040A9F3                 jz      short loc_40AA5E
.text:0040A9F5                 outsd
.text:0040A9F6                 outsb
.text:0040A9F7                 and     [eax+2Dh], ah
.text:0040A9FA                 sub     eax, 0A277325h
.text:0040A9FF                 add     ds:6F203A73h, ah
.text:0040AA05                 jo      short loc_40AA7B
.text:0040AA07
.text:0040AA07 loc_40AA07:                             ; CODE XREF: sub_40A9A0+6↑j
.text:0040AA07                 imul    ebp, [edi+6Eh], 71657220h
.text:0040AA0E                 jnz     short loc_40AA79
.text:0040AA10                 jb      short loc_40AA77
.text:0040AA12                 jnb     short loc_40AA34
.text:0040AA14                 popa
.text:0040AA15                 outsb
.text:0040AA16                 and     [ecx+72h], ah
.text:0040AA19                 db      67h
.text:0040AA19                 jnz     near ptr loc_40AA87+2
.text:0040AA1C                 outs    dx, byte ptr gs:[esi]
.text:0040AA1E
.text:0040AA1E loc_40AA1E:                             ; CODE XREF: sub_40A9A0+13↑j
.text:0040AA1E                 jz      short sub_40AA40
.text:0040AA20                 sub     eax, 6325202Dh
.text:0040AA25                 or      al, [eax]
.text:0040AA27                 nop
.text:0040AA28                 nop
.text:0040AA29                 nop
.text:0040AA2A                 nop
.text:0040AA2B                 nop
.text:0040AA2C                 nop
.text:0040AA2D                 nop
.text:0040AA2E                 nop
.text:0040AA2F                 nop
.text:0040AA30                 nop
.text:0040AA31                 nop
.text:0040AA32                 nop
.text:0040AA33                 nop
.text:0040AA34
.text:0040AA34 loc_40AA34:                             ; CODE XREF: sub_40A9E0+32↑j
.text:0040AA34                 nop
.text:0040AA35                 nop
.text:0040AA36                 nop
.text:0040AA37                 nop
.text:0040AA38                 nop
.text:0040AA39                 nop
.text:0040AA3A                 nop
.text:0040AA3B                 nop
.text:0040AA3C                 nop
.text:0040AA3D                 nop
.text:0040AA3E                 nop
.text:0040AA3F                 nop
.text:0040AA3F sub_40A9E0      endp ; sp-analysis failed
.text:0040AA3F
.text:0040AA40
.text:0040AA40 ; =============== S U B R O U T I N E =======================================
.text:0040AA40
.text:0040AA40
.text:0040AA40 ; int __cdecl sub_40AA40(char *Str2, size_t MaxCount, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char *Str, int, int, int, int)
.text:0040AA40 sub_40AA40      proc near               ; CODE XREF: sub_40A9E0:loc_40AA1E↑j
.text:0040AA40                                         ; DATA XREF: sub_40AA40:loc_40B253↓o
.text:0040AA40
.text:0040AA40 Str2            = dword ptr  4
.text:0040AA40 MaxCount        = dword ptr  8
.text:0040AA40 arg_8           = dword ptr  0Ch
.text:0040AA40 arg_C           = dword ptr  10h
.text:0040AA40 arg_1C          = dword ptr  20h
.text:0040AA40 arg_20          = dword ptr  24h
.text:0040AA40 arg_24          = dword ptr  28h
.text:0040AA40 arg_28          = dword ptr  2Ch
.text:0040AA40 arg_2C          = dword ptr  30h
.text:0040AA40 arg_30          = dword ptr  34h
.text:0040AA40 arg_34          = dword ptr  38h
.text:0040AA40 arg_38          = dword ptr  3Ch
.text:0040AA40 arg_3C          = dword ptr  40h
.text:0040AA40 arg_40          = dword ptr  44h
.text:0040AA40 arg_44          = dword ptr  48h
.text:0040AA40 arg_5C          = dword ptr  60h
.text:0040AA40 arg_60          = dword ptr  64h
.text:0040AA40 Str             = dword ptr  68h
.text:0040AA40 arg_68          = dword ptr  6Ch
.text:0040AA40 arg_6C          = dword ptr  70h
.text:0040AA40 arg_70          = dword ptr  74h
.text:0040AA40 arg_74          = dword ptr  78h
.text:0040AA40
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040AABB SIZE 00000053 BYTES
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040AB24 SIZE 0000014B BYTES
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040AC70 SIZE 0000023A BYTES
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040AEB0 SIZE 00000099 BYTES
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040AF50 SIZE 000000DF BYTES
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040B030 SIZE 0000025B BYTES
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040B290 SIZE 000001AE BYTES
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040B440 SIZE 000000F9 BYTES
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040B540 SIZE 000000CE BYTES
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040B610 SIZE 0000003A BYTES
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040B650 SIZE 0000000B BYTES
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040B660 SIZE 00000019 BYTES
.text:0040AA40 ; FUNCTION CHUNK AT .text:0040B680 SIZE 00000011 BYTES
.text:0040AA40
.text:0040AA40                 and     eax, 6F203A73h
.text:0040AA45                 jo      short loc_40AABB
.text:0040AA47
.text:0040AA47 loc_40AA47:                             ; CODE XREF: sub_40A9E0+6↑j
.text:0040AA47                 imul    ebp, [edi+6Eh], 572D6020h
.text:0040AA4E                 and     ds:64202773h, ah
.text:0040AA54                 outsd
.text:0040AA55                 db      65h
.text:0040AA55                 jnb     short near ptr loc_40AAC4+2
.text:0040AA58                 daa
.text:0040AA59                 jz      short loc_40AA7B
.text:0040AA5B                 popa
.text:0040AA5C                 insb
.text:0040AA5D                 insb
.text:0040AA5E
.text:0040AA5E loc_40AA5E:                             ; CODE XREF: sub_40A9E0+13↑j
.text:0040AA5E                 outsd
.text:0040AA5F                 ja      short near ptr sub_40AA80+1
.text:0040AA61                 popa
.text:0040AA62                 outsb
.text:0040AA63                 and     [ecx+72h], ah
.text:0040AA66                 db      67h
.text:0040AA66                 jnz     near ptr loc_40AAD5+1
.text:0040AA69                 outs    dx, byte ptr gs:[esi]
.text:0040AA6B                 jz      short loc_40AA77
.text:0040AA6D                 add     [eax-6F6F6F70h], dl
.text:0040AA73                 nop
.text:0040AA74                 nop
.text:0040AA75                 nop
.text:0040AA76                 nop
.text:0040AA77
.text:0040AA77 loc_40AA77:                             ; CODE XREF: sub_40A9E0+30↑j
.text:0040AA77                                         ; sub_40AA40+2B↑j
.text:0040AA77                 nop
.text:0040AA78                 nop
.text:0040AA79
.text:0040AA79 loc_40AA79:                             ; CODE XREF: sub_40A9E0+2E↑j
.text:0040AA79                 nop
.text:0040AA7A                 nop
.text:0040AA7B
.text:0040AA7B loc_40AA7B:                             ; CODE XREF: sub_40A9E0+25↑j
.text:0040AA7B                                         ; sub_40AA40+19↑j
.text:0040AA7B                 nop
.text:0040AA7C                 nop
.text:0040AA7D                 nop
.text:0040AA7E                 nop
.text:0040AA7F                 nop
.text:0040AA7F sub_40AA40      endp ; sp-analysis failed
.text:0040AA7F
.text:0040AA80
.text:0040AA80 ; =============== S U B R O U T I N E =======================================
.text:0040AA80
.text:0040AA80
.text:0040AA80 sub_40AA80      proc near               ; CODE XREF: sub_40AA40+1F↑j
.text:0040AA80                                         ; DATA XREF: sub_40AA40:loc_40B33F↓o
.text:0040AA80
.text:0040AA80 arg_A4          = dword ptr  0A8h
.text:0040AA80 arg_B8          = dword ptr  0BCh
.text:0040AA80
.text:0040AA80 ; FUNCTION CHUNK AT .text:0040AB1A SIZE 0000000A BYTES
.text:0040AA80
.text:0040AA80                 and     eax, 6F203A73h
.text:0040AA85                 jo      short loc_40AAFB
.text:0040AA87
.text:0040AA87 loc_40AA87:                             ; CODE XREF: sub_40A9E0+39↑j
.text:0040AA87                 imul    ebp, [edi+6Eh], 572D6020h
.text:0040AA8E                 and     ds:69202773h, ah
.text:0040AA94                 jnb     short near ptr loc_40AAB3+3
.text:0040AA96                 popa
.text:0040AA97                 insd
.text:0040AA98                 bound   ebp, [ecx+67h]
.text:0040AA9B                 jnz     short near ptr loc_40AB08+4
.text:0040AA9D                 jnz     short near ptr loc_40AB11+1
.text:0040AA9F                 or      al, [eax]
.text:0040AAA1
.text:0040AAA1 loc_40AAA1:                             ; DATA XREF: sub_40AA40+A0F↓o
.text:0040AAA1                 and     eax, 69203A73h
.text:0040AAA6                 insb
.text:0040AAA7                 insb
.text:0040AAA8                 db      65h, 67h
.text:0040AAA8                 popa
.text:0040AAAB                 insb
.text:0040AAAC                 and     [edi+70h], ch
.text:0040AAAF                 jz      short loc_40AB1A
.text:0040AAB1                 outsd
.text:0040AAB2                 outsb
.text:0040AAB3
.text:0040AAB3 loc_40AAB3:                             ; CODE XREF: sub_40AA80+14↑j
.text:0040AAB3                 and     ds:6325202Dh, ch
.text:0040AAB9                 or      al, [eax]
.text:0040AAB9 sub_40AA80      endp ; sp-analysis failed
.text:0040AAB9
.text:0040AABB ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040AABB
.text:0040AABB loc_40AABB:                             ; CODE XREF: sub_40AA40+5↑j
.text:0040AABB                                         ; DATA XREF: sub_40AA40:loc_40B487↓o
.text:0040AABB                 and     eax, 69203A73h
.text:0040AAC0                 outsb
.text:0040AAC1                 jbe     short loc_40AB24
.text:0040AAC3                 insb
.text:0040AAC4
.text:0040AAC4 loc_40AAC4:                             ; CODE XREF: sub_40AA40+15↑j
.text:0040AAC4                 imul    esp, [eax+6Fh], 6F697470h
.text:0040AACC                 outsb
.text:0040AACD                 and     ds:6325202Dh, ch
.text:0040AAD3                 or      al, [eax]
.text:0040AAD5
.text:0040AAD5 loc_40AAD5:                             ; CODE XREF: sub_40AA40+26↑j
.text:0040AAD5                                         ; DATA XREF: sub_40AA40:loc_40B4AE↓o
.text:0040AAD5                 and     eax, 6F203A73h
.text:0040AADA                 jo      short near ptr loc_40AB4F+1
.text:0040AADC                 imul    ebp, [edi+6Eh], 73256020h
.text:0040AAE3                 daa
.text:0040AAE4                 and     [ecx+73h], ch
.text:0040AAE7                 and     [ecx+6Dh], ah
.text:0040AAEA                 bound   ebp, [ecx+67h]
.text:0040AAED                 jnz     short near ptr loc_40AB5C+2
.text:0040AAEF                 jnz     short near ptr loc_40AB63+1
.text:0040AAF1                 or      al, [eax]
.text:0040AAF3
.text:0040AAF3 loc_40AAF3:                             ; DATA XREF: sub_40AA40:loc_40B660↓o
.text:0040AAF3                 push    eax
.text:0040AAF4                 dec     edi
.text:0040AAF5                 push    ebx
.text:0040AAF6                 dec     ecx
.text:0040AAF7                 pop     eax
.text:0040AAF8                 dec     esp
.text:0040AAF9                 pop     ecx
.text:0040AAFA                 pop     edi
.text:0040AAFB
.text:0040AAFB loc_40AAFB:                             ; CODE XREF: sub_40AA80+5↑j
.text:0040AAFB                 inc     ebx
.text:0040AAFC                 dec     edi
.text:0040AAFD                 push    edx
.text:0040AAFE                 push    edx
.text:0040AAFF                 inc     ebp
.text:0040AB00                 inc     ebx
.text:0040AB01                 push    esp
.text:0040AB02                 add     [ebp+0B6h], cl
.text:0040AB08
.text:0040AB08 loc_40AB08:                             ; CODE XREF: sub_40AA80+1B↑j
.text:0040AB08                 add     [ebp+27BCh], cl
.text:0040AB08 ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040AB08 ; ---------------------------------------------------------------------------
.text:0040AB0E                 dw 0
.text:0040AB10 ; ---------------------------------------------------------------------------
.text:0040AB10
.text:0040AB10 loc_40AB10:                             ; CODE XREF: sub_40B6A0+5A↓p
.text:0040AB10                                         ; .text:0040B78A↓p ...
.text:0040AB10                 push    ebp
.text:0040AB11
.text:0040AB11 loc_40AB11:                             ; CODE XREF: sub_40AA80+1D↑j
.text:0040AB11                 mov     eax, 0FFFFFFFFh
.text:0040AB16                 push    edi
.text:0040AB17                 push    esi
.text:0040AB18                 push    ebx
.text:0040AB18 ; ---------------------------------------------------------------------------
.text:0040AB19                 db 83h
.text:0040AB1A ; ---------------------------------------------------------------------------
.text:0040AB1A ; START OF FUNCTION CHUNK FOR sub_40AA80
.text:0040AB1A
.text:0040AB1A loc_40AB1A:                             ; CODE XREF: sub_40AA80+2F↑j
.text:0040AB1A                 in      al, dx
.text:0040AB1B                 dec     esp
.text:0040AB1C                 mov     esi, [esp-40h+arg_A4]
.text:0040AB20                 mov     ebp, [esp-40h+arg_B8]
.text:0040AB20 ; END OF FUNCTION CHUNK FOR sub_40AA80
.text:0040AB24 ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040AB24
.text:0040AB24 loc_40AB24:                             ; CODE XREF: sub_40AA40+81↑j
.text:0040AB24                 cmp     byte ptr [esi], 3Ah ; ':'
.text:0040AB27                 mov     ebx, [ebp+4]
.text:0040AB2A                 setz    dl
.text:0040AB2D                 movzx   ecx, dl
.text:0040AB30                 dec     ecx
.text:0040AB31                 and     ecx, ebx
.text:0040AB33                 mov     [esp+arg_44], ecx
.text:0040AB37                 mov     ecx, [esp+arg_5C]
.text:0040AB3B                 test    ecx, ecx
.text:0040AB3D                 jle     loc_40AC67
.text:0040AB43                 mov     dword ptr [ebp+0Ch], 0
.text:0040AB4A                 mov     ebx, [ebp+0]
.text:0040AB4D                 test    ebx, ebx
.text:0040AB4F
.text:0040AB4F loc_40AB4F:                             ; CODE XREF: sub_40AA40+9A↑j
.text:0040AB4F                 jz      loc_40B680
.text:0040AB55                 mov     edi, [ebp+10h]
.text:0040AB58                 test    edi, edi
.text:0040AB5A                 jnz     short loc_40ABB3
.text:0040AB5C
.text:0040AB5C loc_40AB5C:                             ; CODE XREF: sub_40AA40+AD↑j
.text:0040AB5C                 lea     esi, [esi+0]
.text:0040AB60
.text:0040AB60 loc_40AB60:                             ; CODE XREF: sub_40AA40+C4C↓j
.text:0040AB60                 mov     [ebp+24h], ebx
.text:0040AB63
.text:0040AB63 loc_40AB63:                             ; CODE XREF: sub_40AA40+AF↑j
.text:0040AB63                 mov     esi, [esp+Str]
.text:0040AB67                 mov     [ebp+20h], ebx
.text:0040AB6A                 mov     ecx, [esp+arg_74]
.text:0040AB6E                 xor     ebx, ebx
.text:0040AB70                 mov     dword ptr [ebp+14h], 0
.text:0040AB77                 test    ecx, ecx
.text:0040AB79                 jz      loc_40B660
.text:0040AB7F
.text:0040AB7F loc_40AB7F:                             ; CODE XREF: sub_40AA40+C34↓j
.text:0040AB7F                 mov     ebx, 1
.text:0040AB84
.text:0040AB84 loc_40AB84:                             ; CODE XREF: sub_40AA40+C2E↓j
.text:0040AB84                 mov     [ebp+1Ch], ebx
.text:0040AB87                 mov     ecx, [esp+Str]
.text:0040AB8B                 movzx   eax, byte ptr [ecx]
.text:0040AB8E                 cmp     al, 2Dh ; '-'
.text:0040AB90                 jz      loc_40B650
.text:0040AB96                 cmp     al, 2Bh ; '+'
.text:0040AB98                 jz      loc_40B639
.text:0040AB9E                 xor     edx, edx
.text:0040ABA0                 test    ebx, ebx
.text:0040ABA2                 setz    dl
.text:0040ABA5                 mov     [ebp+18h], edx
.text:0040ABA8
.text:0040ABA8 loc_40ABA8:                             ; CODE XREF: sub_40AA40+C05↓j
.text:0040ABA8                 mov     [esp+Str], esi
.text:0040ABAC                 mov     dword ptr [ebp+10h], 1
.text:0040ABB3
.text:0040ABB3 loc_40ABB3:                             ; CODE XREF: sub_40AA40+11A↑j
.text:0040ABB3                 mov     eax, [ebp+14h]
.text:0040ABB6                 test    eax, eax
.text:0040ABB8                 jz      short loc_40ABC3
.text:0040ABBA                 cmp     byte ptr [eax], 0
.text:0040ABBD                 jnz     loc_40ACA0
.text:0040ABC3
.text:0040ABC3 loc_40ABC3:                             ; CODE XREF: sub_40AA40+178↑j
.text:0040ABC3                 mov     ebx, [ebp+0]
.text:0040ABC6                 cmp     [ebp+24h], ebx
.text:0040ABC9                 jle     short loc_40ABCE
.text:0040ABCB                 mov     [ebp+24h], ebx
.text:0040ABCE
.text:0040ABCE loc_40ABCE:                             ; CODE XREF: sub_40AA40+189↑j
.text:0040ABCE                 cmp     [ebp+20h], ebx
.text:0040ABD1                 jle     short loc_40ABD6
.text:0040ABD3                 mov     [ebp+20h], ebx
.text:0040ABD6
.text:0040ABD6 loc_40ABD6:                             ; CODE XREF: sub_40AA40+191↑j
.text:0040ABD6                 cmp     dword ptr [ebp+18h], 1
.text:0040ABDA                 jz      loc_40B5B0
.text:0040ABE0
.text:0040ABE0 loc_40ABE0:                             ; CODE XREF: sub_40AA40+BE3↓j
.text:0040ABE0                 cmp     ebx, [esp+arg_5C]
.text:0040ABE4                 jz      loc_40B594
.text:0040ABEA                 cld
.text:0040ABEB                 mov     ecx, [esp+arg_60]
.text:0040ABEF                 mov     edx, 3
.text:0040ABF4                 mov     edi, offset sub_40A8C0
.text:0040ABF9                 mov     esi, [ecx+ebx*4]
.text:0040ABFC                 mov     ecx, edx
.text:0040ABFE                 repe cmpsb
.text:0040AC00                 jnz     short loc_40AC3C
.text:0040AC02                 mov     edx, [ebp+24h]
.text:0040AC05                 lea     eax, [ebx+1]
.text:0040AC08                 cmp     [ebp+20h], edx
.text:0040AC0B                 mov     [ebp+0], eax
.text:0040AC0E                 jz      loc_40B5A8
.text:0040AC14                 cmp     edx, eax
.text:0040AC16                 jz      short loc_40AC30
.text:0040AC18                 mov     [esp+Str2], ebp
.text:0040AC1C                 mov     ebx, [esp+arg_60]
.text:0040AC20                 mov     [esp+0], ebx
.text:0040AC23                 call    sub_40B7C0
.text:0040AC28                 nop
.text:0040AC29                 lea     esi, [esi+0]
.text:0040AC30
.text:0040AC30 loc_40AC30:                             ; CODE XREF: sub_40AA40+1D6↑j
.text:0040AC30                                         ; sub_40AA40+B6B↓j
.text:0040AC30                 mov     eax, [esp+arg_5C]
.text:0040AC34                 mov     ebx, eax
.text:0040AC36                 mov     [ebp+24h], eax
.text:0040AC39                 mov     [ebp+0], eax
.text:0040AC3C
.text:0040AC3C loc_40AC3C:                             ; CODE XREF: sub_40AA40+1C0↑j
.text:0040AC3C                 cmp     ebx, [esp+arg_5C]
.text:0040AC40                 jz      loc_40B594
.text:0040AC46                 mov     esi, [esp+arg_60]
.text:0040AC4A                 mov     eax, [esi+ebx*4]
.text:0040AC4D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:0040AC50                 jz      short loc_40AC77
.text:0040AC52
.text:0040AC52 loc_40AC52:                             ; CODE XREF: sub_40AA40+23D↓j
.text:0040AC52                 mov     edx, [ebp+18h]
.text:0040AC55                 test    edx, edx
.text:0040AC57                 jz      short loc_40AC70
.text:0040AC59                 mov     [ebp+0Ch], eax
.text:0040AC5C                 lea     edi, [ebx+1]
.text:0040AC5F                 mov     eax, 1
.text:0040AC64                 mov     [ebp+0], edi
.text:0040AC67
.text:0040AC67 loc_40AC67:                             ; CODE XREF: sub_40AA40+FD↑j
.text:0040AC67                                         ; sub_40AA40+235↓j ...
.text:0040AC67                 add     esp, 4Ch
.text:0040AC6A                 pop     ebx
.text:0040AC6B                 pop     esi
.text:0040AC6C                 pop     edi
.text:0040AC6D                 pop     ebp
.text:0040AC6E                 retn
.text:0040AC6E ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040AC6E ; ---------------------------------------------------------------------------
.text:0040AC6F                 align 10h
.text:0040AC70 ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040AC70
.text:0040AC70 loc_40AC70:                             ; CODE XREF: sub_40AA40+217↑j
.text:0040AC70                                         ; sub_40AA40+B5A↓j ...
.text:0040AC70                 mov     eax, 0FFFFFFFFh
.text:0040AC75                 jmp     short loc_40AC67
.text:0040AC77 ; ---------------------------------------------------------------------------
.text:0040AC77
.text:0040AC77 loc_40AC77:                             ; CODE XREF: sub_40AA40+210↑j
.text:0040AC77                 movzx   edx, byte ptr [eax+1]
.text:0040AC7B                 test    dl, dl
.text:0040AC7D                 jz      short loc_40AC52
.text:0040AC7F                 mov     ebx, [esp+arg_68]
.text:0040AC83                 xor     ecx, ecx
.text:0040AC85                 test    ebx, ebx
.text:0040AC87                 jz      short loc_40AC92
.text:0040AC89                 cmp     dl, 2Dh ; '-'
.text:0040AC8C                 jz      loc_40B58A
.text:0040AC92
.text:0040AC92 loc_40AC92:                             ; CODE XREF: sub_40AA40+247↑j
.text:0040AC92                                         ; sub_40AA40+B4F↓j
.text:0040AC92                 lea     esi, [ecx+eax+1]
.text:0040AC96                 mov     [ebp+14h], esi
.text:0040AC99                 lea     esi, [esi+0]
.text:0040ACA0
.text:0040ACA0 loc_40ACA0:                             ; CODE XREF: sub_40AA40+17D↑j
.text:0040ACA0                 mov     ecx, [esp+arg_68]
.text:0040ACA4                 test    ecx, ecx
.text:0040ACA6                 jz      loc_40B030
.text:0040ACAC                 mov     edx, [ebp+0]
.text:0040ACAF                 mov     edi, [esp+arg_60]
.text:0040ACB3                 mov     eax, [edi+edx*4]
.text:0040ACB6                 movzx   edx, byte ptr [eax+1]
.text:0040ACBA                 cmp     dl, 2Dh ; '-'
.text:0040ACBD                 jz      short loc_40ACD5
.text:0040ACBF                 mov     ebx, [esp+arg_70]
.text:0040ACC3                 test    ebx, ebx
.text:0040ACC5                 jz      loc_40B030
.text:0040ACCB                 cmp     byte ptr [eax+2], 0
.text:0040ACCF                 jz      loc_40B56A
.text:0040ACD5
.text:0040ACD5 loc_40ACD5:                             ; CODE XREF: sub_40AA40+27D↑j
.text:0040ACD5                                         ; sub_40AA40+B45↓j
.text:0040ACD5                 mov     [esp+arg_40], 0
.text:0040ACDD                 mov     ecx, [ebp+14h]
.text:0040ACE0                 mov     [esp+arg_3C], 0
.text:0040ACE8                 mov     [esp+arg_38], 0
.text:0040ACF0                 mov     edi, ecx
.text:0040ACF2                 mov     [esp+arg_34], 0FFFFFFFFh
.text:0040ACFA                 movzx   eax, byte ptr [ecx]
.text:0040ACFD                 test    al, al
.text:0040ACFF                 jz      short loc_40AD1C
.text:0040AD01                 cmp     al, 3Dh ; '='
.text:0040AD03                 jz      short loc_40AD1C
.text:0040AD05                 lea     esi, [esi+0]
.text:0040AD09                 lea     edi, [edi+0]
.text:0040AD10
.text:0040AD10 loc_40AD10:                             ; CODE XREF: sub_40AA40+2DA↓j
.text:0040AD10                 inc     edi
.text:0040AD11                 movzx   eax, byte ptr [edi]
.text:0040AD14                 test    al, al
.text:0040AD16                 jz      short loc_40AD1C
.text:0040AD18                 cmp     al, 3Dh ; '='
.text:0040AD1A                 jnz     short loc_40AD10
.text:0040AD1C
.text:0040AD1C loc_40AD1C:                             ; CODE XREF: sub_40AA40+2BF↑j
.text:0040AD1C                                         ; sub_40AA40+2C3↑j ...
.text:0040AD1C                 mov     [esp+arg_30], 0
.text:0040AD24                 mov     esi, [esp+arg_68]
.text:0040AD28                 mov     ebx, [esi]
.text:0040AD2A                 test    ebx, ebx
.text:0040AD2C                 mov     edx, ebx
.text:0040AD2E                 jz      loc_40AF50
.text:0040AD34                 lea     esi, [esi+0]
.text:0040AD3A                 lea     edi, [edi+0]
.text:0040AD40
.text:0040AD40 loc_40AD40:                             ; CODE XREF: sub_40AA40+32E↓j
.text:0040AD40                 mov     [esp+Str2], ecx ; Str2
.text:0040AD44                 mov     ebx, edi
.text:0040AD46                 sub     ebx, ecx
.text:0040AD48                 mov     [esp+MaxCount], ebx ; MaxCount
.text:0040AD4C                 mov     [esp+0], edx    ; Str1
.text:0040AD4F                 call    strncmp
.text:0040AD54                 test    eax, eax
.text:0040AD56                 jz      loc_40B4E6
.text:0040AD5C
.text:0040AD5C loc_40AD5C:                             ; CODE XREF: sub_40AA40+ADF↓j
.text:0040AD5C                                         ; sub_40AA40+AF4↓j ...
.text:0040AD5C                 inc     [esp+arg_30]
.text:0040AD60                 add     esi, 10h
.text:0040AD63                 mov     ecx, [esi]
.text:0040AD65                 test    ecx, ecx
.text:0040AD67                 mov     edx, ecx
.text:0040AD69                 jz      short loc_40AD70
.text:0040AD6B                 mov     ecx, [ebp+14h]
.text:0040AD6E                 jmp     short loc_40AD40
.text:0040AD70 ; ---------------------------------------------------------------------------
.text:0040AD70
.text:0040AD70 loc_40AD70:                             ; CODE XREF: sub_40AA40+329↑j
.text:0040AD70                                         ; sub_40AA40+B25↓j
.text:0040AD70                 mov     esi, [esp+arg_38]
.text:0040AD74                 test    esi, esi
.text:0040AD76                 jz      short loc_40AD84
.text:0040AD78                 mov     edx, [esp+arg_3C]
.text:0040AD7C                 test    edx, edx
.text:0040AD7E                 jz      loc_40B490
.text:0040AD84
.text:0040AD84 loc_40AD84:                             ; CODE XREF: sub_40AA40+336↑j
.text:0040AD84                 mov     eax, [esp+arg_40]
.text:0040AD88                 test    eax, eax
.text:0040AD8A                 jz      loc_40AF50
.text:0040AD90                 mov     ecx, [ebp+0]
.text:0040AD93                 lea     eax, [ecx+1]
.text:0040AD96                 mov     [ebp+0], eax
.text:0040AD99                 cmp     byte ptr [edi], 0
.text:0040AD9C                 jz      loc_40AEB0
.text:0040ADA2                 mov     ecx, [esp+arg_40]
.text:0040ADA6                 mov     esi, [ecx+4]
.text:0040ADA9                 test    esi, esi
.text:0040ADAB                 jz      short loc_40ADF6
.text:0040ADAD                 lea     ebx, [edi+1]
.text:0040ADB0                 mov     [ebp+0Ch], ebx
.text:0040ADB3
.text:0040ADB3 loc_40ADB3:                             ; CODE XREF: sub_40AA40+478↓j
.text:0040ADB3                                         ; sub_40AA40+494↓j
.text:0040ADB3                 mov     ebx, [ebp+14h]
.text:0040ADB6                 mov     [esp+0], ebx    ; Str
.text:0040ADB9                 call    strlen
.text:0040ADBE                 add     [ebp+14h], eax
.text:0040ADC1                 mov     esi, [esp+arg_6C]
.text:0040ADC5                 test    esi, esi
.text:0040ADC7                 jz      short loc_40ADD3
.text:0040ADC9                 mov     ebp, [esp+arg_34]
.text:0040ADCD                 mov     ecx, [esp+arg_6C]
.text:0040ADD1                 mov     [ecx], ebp
.text:0040ADD3
.text:0040ADD3 loc_40ADD3:                             ; CODE XREF: sub_40AA40+387↑j
.text:0040ADD3                 mov     eax, [esp+arg_40]
.text:0040ADD7                 mov     ecx, [eax+8]
.text:0040ADDA                 test    ecx, ecx
.text:0040ADDC                 jnz     short loc_40ADEA
.text:0040ADDE                 mov     ecx, [esp+arg_40]
.text:0040ADE2
.text:0040ADE2 loc_40ADE2:                             ; CODE XREF: sub_40AA40+7F3↓j
.text:0040ADE2                 mov     eax, [ecx+0Ch]
.text:0040ADE5                 jmp     loc_40AC67
.text:0040ADEA ; ---------------------------------------------------------------------------
.text:0040ADEA
.text:0040ADEA loc_40ADEA:                             ; CODE XREF: sub_40AA40+39C↑j
.text:0040ADEA                                         ; sub_40AA40+7E9↓j
.text:0040ADEA                 mov     esi, [eax+0Ch]
.text:0040ADED                 xor     eax, eax
.text:0040ADEF                 mov     [ecx], esi
.text:0040ADF1                 jmp     loc_40AC67
.text:0040ADF6 ; ---------------------------------------------------------------------------
.text:0040ADF6
.text:0040ADF6 loc_40ADF6:                             ; CODE XREF: sub_40AA40+36B↑j
.text:0040ADF6                 mov     edi, [esp+arg_44]
.text:0040ADFA                 test    edi, edi
.text:0040ADFC                 jz      short loc_40AE50
.text:0040ADFE                 mov     esi, [esp+arg_60]
.text:0040AE02                 mov     edx, [esi+eax*4-4]
.text:0040AE06                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040AE0A                 jz      short loc_40AE72
.text:0040AE0C                 mov     dword ptr [esp+0], offset sub_40A8E0
.text:0040AE13                 call    ds:libintl_gettext
.text:0040AE19                 mov     edx, [esp+arg_40]
.text:0040AE1D                 mov     edi, [edx]
.text:0040AE1F                 mov     [esp+arg_C], edi
.text:0040AE23                 mov     ebx, [ebp+0]
.text:0040AE26                 mov     edi, [esp+arg_60]
.text:0040AE2A                 mov     ecx, [edi+ebx*4-4]
.text:0040AE2E                 movsx   esi, byte ptr [ecx]
.text:0040AE31                 mov     ecx, ds:_iob
.text:0040AE37                 add     ecx, 40h ; '@'
.text:0040AE3A                 mov     [esp+arg_8], esi
.text:0040AE3E                 mov     ebx, [edi]
.text:0040AE40                 mov     [esp+Str2], eax ; Format
.text:0040AE44                 mov     [esp+0], ecx    ; Stream
.text:0040AE47                 mov     [esp+MaxCount], ebx
.text:0040AE4B                 call    fprintf
.text:0040AE50
.text:0040AE50 loc_40AE50:                             ; CODE XREF: sub_40AA40+3BC↑j
.text:0040AE50                                         ; sub_40AA40+468↓j
.text:0040AE50                 mov     ecx, [ebp+14h]
.text:0040AE53                 mov     [esp+0], ecx    ; Str
.text:0040AE56                 call    strlen
.text:0040AE5B                 add     [ebp+14h], eax
.text:0040AE5E                 mov     eax, [esp+arg_40]
.text:0040AE62                 mov     esi, [eax+0Ch]
.text:0040AE65                 mov     [ebp+8], esi
.text:0040AE68
.text:0040AE68 loc_40AE68:                             ; CODE XREF: sub_40AA40+5B5↓j
.text:0040AE68                                         ; sub_40AA40+80E↓j ...
.text:0040AE68                 mov     eax, 3Fh ; '?'
.text:0040AE6D                 jmp     loc_40AC67
.text:0040AE72 ; ---------------------------------------------------------------------------
.text:0040AE72
.text:0040AE72 loc_40AE72:                             ; CODE XREF: sub_40AA40+3CA↑j
.text:0040AE72                 mov     dword ptr [esp+0], offset sub_40A920
.text:0040AE79                 call    ds:libintl_gettext
.text:0040AE7F                 mov     edx, [esp+arg_40]
.text:0040AE83                 mov     edi, [esp+arg_60]
.text:0040AE87                 mov     ecx, ds:_iob
.text:0040AE8D                 mov     esi, [edx]
.text:0040AE8F                 add     ecx, 40h ; '@'
.text:0040AE92                 mov     [esp+arg_8], esi
.text:0040AE96                 mov     ebx, [edi]
.text:0040AE98                 mov     [esp+Str2], eax ; Format
.text:0040AE9C                 mov     [esp+0], ecx    ; Stream
.text:0040AE9F                 mov     [esp+MaxCount], ebx
.text:0040AEA3                 call    fprintf
.text:0040AEA8                 jmp     short loc_40AE50
.text:0040AEA8 ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040AEA8 ; ---------------------------------------------------------------------------
.text:0040AEAA                 align 10h
.text:0040AEB0 ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040AEB0
.text:0040AEB0 loc_40AEB0:                             ; CODE XREF: sub_40AA40+35C↑j
.text:0040AEB0                 mov     ebx, [esp+arg_40]
.text:0040AEB4                 cmp     dword ptr [ebx+4], 1
.text:0040AEB8                 jnz     loc_40ADB3
.text:0040AEBE                 cmp     eax, [esp+arg_5C]
.text:0040AEC2                 jge     short loc_40AED9
.text:0040AEC4                 mov     ebx, [esp+arg_60]
.text:0040AEC8                 lea     edi, [ecx+2]
.text:0040AECB                 mov     [ebp+0], edi
.text:0040AECE                 mov     esi, [ebx+eax*4]
.text:0040AED1                 mov     [ebp+0Ch], esi
.text:0040AED4                 jmp     loc_40ADB3
.text:0040AED9 ; ---------------------------------------------------------------------------
.text:0040AED9
.text:0040AED9 loc_40AED9:                             ; CODE XREF: sub_40AA40+482↑j
.text:0040AED9                 mov     edx, [esp+arg_44]
.text:0040AEDD                 test    edx, edx
.text:0040AEDF                 jnz     short loc_40AF10
.text:0040AEE1
.text:0040AEE1 loc_40AEE1:                             ; CODE XREF: sub_40AA40+507↓j
.text:0040AEE1                 mov     edx, [ebp+14h]
.text:0040AEE4                 mov     [esp+0], edx    ; Str
.text:0040AEE7                 call    strlen
.text:0040AEEC                 add     [ebp+14h], eax
.text:0040AEEF                 mov     eax, [esp+arg_40]
.text:0040AEF3                 mov     edi, [eax+0Ch]
.text:0040AEF6                 mov     [ebp+8], edi
.text:0040AEF9
.text:0040AEF9 loc_40AEF9:                             ; CODE XREF: sub_40AA40+892↓j
.text:0040AEF9                 mov     ebp, [esp+Str]
.text:0040AEFD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040AF01                 setnz   bl
.text:0040AF04                 movzx   esi, bl
.text:0040AF07                 lea     eax, [esi+esi*4+3Ah]
.text:0040AF0B                 jmp     loc_40AC67
.text:0040AF10 ; ---------------------------------------------------------------------------
.text:0040AF10
.text:0040AF10 loc_40AF10:                             ; CODE XREF: sub_40AA40+49F↑j
.text:0040AF10                 mov     dword ptr [esp+0], offset sub_40A960
.text:0040AF17                 call    ds:libintl_gettext
.text:0040AF1D                 mov     ecx, [ebp+0]
.text:0040AF20                 mov     esi, [esp+arg_60]
.text:0040AF24                 mov     ebx, [esi+ecx*4-4]
.text:0040AF28                 mov     ecx, ds:_iob
.text:0040AF2E                 mov     [esp+arg_8], ebx
.text:0040AF32                 mov     edi, [esi]
.text:0040AF34                 add     ecx, 40h ; '@'
.text:0040AF37                 mov     [esp+Str2], eax ; Format
.text:0040AF3B                 mov     [esp+0], ecx    ; Stream
.text:0040AF3E                 mov     [esp+MaxCount], edi
.text:0040AF42                 call    fprintf
.text:0040AF47                 jmp     short loc_40AEE1
.text:0040AF47 ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040AF47 ; ---------------------------------------------------------------------------
.text:0040AF49                 align 10h
.text:0040AF50 ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040AF50
.text:0040AF50 loc_40AF50:                             ; CODE XREF: sub_40AA40+2EE↑j
.text:0040AF50                                         ; sub_40AA40+34A↑j
.text:0040AF50                 mov     eax, [esp+arg_70]
.text:0040AF54                 test    eax, eax
.text:0040AF56                 jz      short loc_40AF86
.text:0040AF58                 mov     ebx, [ebp+0]
.text:0040AF5B                 mov     esi, [esp+arg_60]
.text:0040AF5F                 mov     edi, [esi+ebx*4]
.text:0040AF62                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040AF66                 jz      short loc_40AF89
.text:0040AF68                 mov     ecx, [ebp+14h]
.text:0040AF6B                 mov     edx, [esp+Str]
.text:0040AF6F                 movsx   ebx, byte ptr [ecx]
.text:0040AF72                 mov     [esp+0], edx    ; Str
.text:0040AF75                 mov     [esp+Str2], ebx ; Val
.text:0040AF79                 call    strchr
.text:0040AF7E                 test    eax, eax
.text:0040AF80                 jnz     loc_40B030
.text:0040AF86
.text:0040AF86 loc_40AF86:                             ; CODE XREF: sub_40AA40+516↑j
.text:0040AF86                 mov     ebx, [ebp+0]
.text:0040AF89
.text:0040AF89 loc_40AF89:                             ; CODE XREF: sub_40AA40+526↑j
.text:0040AF89                 mov     eax, [esp+arg_44]
.text:0040AF8D                 test    eax, eax
.text:0040AF8F                 jz      short loc_40AFE1
.text:0040AF91                 mov     esi, [esp+arg_60]
.text:0040AF95                 mov     edi, [esi+ebx*4]
.text:0040AF98                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040AF9C                 jz      short loc_40AFFA
.text:0040AF9E                 mov     dword ptr [esp+0], offset sub_40A9A0
.text:0040AFA5                 call    ds:libintl_gettext
.text:0040AFAB                 mov     edi, [ebp+14h]
.text:0040AFAE                 mov     [esp+arg_C], edi
.text:0040AFB2                 mov     ebx, [ebp+0]
.text:0040AFB5                 mov     edi, [esp+arg_60]
.text:0040AFB9                 mov     esi, [edi+ebx*4]
.text:0040AFBC                 movsx   ecx, byte ptr [esi]
.text:0040AFBF                 mov     esi, ds:_iob
.text:0040AFC5                 add     esi, 40h ; '@'
.text:0040AFC8                 mov     [esp+arg_8], ecx
.text:0040AFCC                 mov     ebx, [edi]
.text:0040AFCE                 mov     [esp+Str2], eax ; Format
.text:0040AFD2                 mov     [esp+0], esi    ; Stream
.text:0040AFD5                 mov     [esp+MaxCount], ebx
.text:0040AFD9                 call    fprintf
.text:0040AFDE
.text:0040AFDE loc_40AFDE:                             ; CODE XREF: sub_40AA40+5ED↓j
.text:0040AFDE                 mov     ebx, [ebp+0]
.text:0040AFE1
.text:0040AFE1 loc_40AFE1:                             ; CODE XREF: sub_40AA40+54F↑j
.text:0040AFE1                 mov     dword ptr [ebp+14h], offset loc_40A9C0
.text:0040AFE8                 lea     edx, [ebx+1]
.text:0040AFEB                 mov     [ebp+0], edx
.text:0040AFEE
.text:0040AFEE loc_40AFEE:                             ; CODE XREF: sub_40AA40+A69↓j
.text:0040AFEE                 mov     dword ptr [ebp+8], 0
.text:0040AFF5                 jmp     loc_40AE68
.text:0040AFFA ; ---------------------------------------------------------------------------
.text:0040AFFA
.text:0040AFFA loc_40AFFA:                             ; CODE XREF: sub_40AA40+55C↑j
.text:0040AFFA                 mov     dword ptr [esp+0], offset sub_40A9E0
.text:0040B001                 call    ds:libintl_gettext
.text:0040B007                 mov     ecx, [ebp+14h]
.text:0040B00A                 mov     edi, [esp+arg_60]
.text:0040B00E                 mov     edx, ds:_iob
.text:0040B014                 mov     [esp+arg_8], ecx
.text:0040B018                 mov     ebx, [edi]
.text:0040B01A                 add     edx, 40h ; '@'
.text:0040B01D                 mov     [esp+Str2], eax ; Format
.text:0040B021                 mov     [esp+MaxCount], ebx
.text:0040B025                 mov     [esp+0], edx    ; Stream
.text:0040B028                 call    fprintf
.text:0040B02D                 jmp     short loc_40AFDE
.text:0040B02D ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B02D ; ---------------------------------------------------------------------------
.text:0040B02F                 align 10h
.text:0040B030 ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B030
.text:0040B030 loc_40B030:                             ; CODE XREF: sub_40AA40+266↑j
.text:0040B030                                         ; sub_40AA40+285↑j ...
.text:0040B030                 mov     esi, [ebp+14h]
.text:0040B033                 movzx   ebx, byte ptr [esi]
.text:0040B036                 inc     esi
.text:0040B037                 mov     [ebp+14h], esi
.text:0040B03A                 mov     ecx, [esp+Str]
.text:0040B03E                 movsx   esi, bl
.text:0040B041                 mov     [esp+Str2], esi ; Val
.text:0040B045                 mov     edi, esi
.text:0040B047                 mov     [esp+0], ecx    ; Str
.text:0040B04A                 call    strchr
.text:0040B04F                 mov     ecx, [ebp+14h]
.text:0040B052                 cmp     byte ptr [ecx], 0
.text:0040B055                 jnz     short loc_40B05A
.text:0040B057                 inc     dword ptr [ebp+0]
.text:0040B05A
.text:0040B05A loc_40B05A:                             ; CODE XREF: sub_40AA40+615↑j
.text:0040B05A                 test    eax, eax
.text:0040B05C                 jz      loc_40B440
.text:0040B062                 cmp     bl, 3Ah ; ':'
.text:0040B065                 jz      loc_40B440
.text:0040B06B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040B06E                 jz      loc_40B126
.text:0040B074                 movzx   edx, byte ptr [eax+1]
.text:0040B078
.text:0040B078 loc_40B078:                             ; CODE XREF: sub_40AA40+6ED↓j
.text:0040B078                 cmp     dl, 3Ah ; ':'
.text:0040B07B                 jz      short loc_40B084
.text:0040B07D
.text:0040B07D loc_40B07D:                             ; CODE XREF: sub_40AA40+660↓j
.text:0040B07D                 mov     eax, esi
.text:0040B07F                 jmp     loc_40AC67
.text:0040B084 ; ---------------------------------------------------------------------------
.text:0040B084
.text:0040B084 loc_40B084:                             ; CODE XREF: sub_40AA40+63B↑j
.text:0040B084                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:0040B088                 jz      loc_40B111
.text:0040B08E                 cmp     byte ptr [ecx], 0
.text:0040B091                 jz      short loc_40B0A2
.text:0040B093
.text:0040B093 loc_40B093:                             ; CODE XREF: sub_40AA40+6D4↓j
.text:0040B093                 inc     dword ptr [ebp+0]
.text:0040B096                 mov     [ebp+0Ch], ecx
.text:0040B099
.text:0040B099 loc_40B099:                             ; CODE XREF: sub_40AA40+67B↓j
.text:0040B099                                         ; sub_40AA40+696↓j ...
.text:0040B099                 mov     dword ptr [ebp+14h], 0
.text:0040B0A0                 jmp     short loc_40B07D
.text:0040B0A2 ; ---------------------------------------------------------------------------
.text:0040B0A2
.text:0040B0A2 loc_40B0A2:                             ; CODE XREF: sub_40AA40+651↑j
.text:0040B0A2                 mov     ecx, [ebp+0]
.text:0040B0A5                 cmp     ecx, [esp+arg_5C]
.text:0040B0A9                 jz      short loc_40B0BD
.text:0040B0AB                 mov     eax, [esp+arg_60]
.text:0040B0AF                 lea     edx, [ecx+1]
.text:0040B0B2                 mov     [ebp+0], edx
.text:0040B0B5                 mov     ebx, [eax+ecx*4]
.text:0040B0B8                 mov     [ebp+0Ch], ebx
.text:0040B0BB                 jmp     short loc_40B099
.text:0040B0BD ; ---------------------------------------------------------------------------
.text:0040B0BD
.text:0040B0BD loc_40B0BD:                             ; CODE XREF: sub_40AA40+669↑j
.text:0040B0BD                 mov     ecx, [esp+arg_44]
.text:0040B0C1                 test    ecx, ecx
.text:0040B0C3                 jnz     short loc_40B0DF
.text:0040B0C5
.text:0040B0C5 loc_40B0C5:                             ; CODE XREF: sub_40AA40+6CF↓j
.text:0040B0C5                 mov     [ebp+8], edi
.text:0040B0C8                 mov     edi, [esp+Str]
.text:0040B0CC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040B0CF                 jz      short loc_40B0D8
.text:0040B0D1                 mov     esi, 3Fh ; '?'
.text:0040B0D6                 jmp     short loc_40B099
.text:0040B0D8 ; ---------------------------------------------------------------------------
.text:0040B0D8
.text:0040B0D8 loc_40B0D8:                             ; CODE XREF: sub_40AA40+68F↑j
.text:0040B0D8                 mov     esi, 3Ah ; ':'
.text:0040B0DD                 jmp     short loc_40B099
.text:0040B0DF ; ---------------------------------------------------------------------------
.text:0040B0DF
.text:0040B0DF loc_40B0DF:                             ; CODE XREF: sub_40AA40+683↑j
.text:0040B0DF                 mov     dword ptr [esp+0], 40AA00h
.text:0040B0E6                 call    ds:libintl_gettext
.text:0040B0EC                 mov     [esp+arg_8], edi
.text:0040B0F0                 mov     ebx, [esp+arg_60]
.text:0040B0F4                 mov     edx, ds:_iob
.text:0040B0FA                 mov     esi, [ebx]
.text:0040B0FC                 add     edx, 40h ; '@'
.text:0040B0FF                 mov     [esp+Str2], eax ; Format
.text:0040B103                 mov     [esp+MaxCount], esi
.text:0040B107                 mov     [esp+0], edx    ; Stream
.text:0040B10A                 call    fprintf
.text:0040B10F                 jmp     short loc_40B0C5
.text:0040B111 ; ---------------------------------------------------------------------------
.text:0040B111
.text:0040B111 loc_40B111:                             ; CODE XREF: sub_40AA40+648↑j
.text:0040B111                 cmp     byte ptr [ecx], 0
.text:0040B114                 jnz     loc_40B093
.text:0040B11A                 mov     dword ptr [ebp+0Ch], 0
.text:0040B121                 jmp     loc_40B099
.text:0040B126 ; ---------------------------------------------------------------------------
.text:0040B126
.text:0040B126 loc_40B126:                             ; CODE XREF: sub_40AA40+62E↑j
.text:0040B126                 movzx   edx, byte ptr [eax+1]
.text:0040B12A                 cmp     dl, 3Bh ; ';'
.text:0040B12D                 jnz     loc_40B078
.text:0040B133                 mov     [esp+arg_2C], 0
.text:0040B13B                 mov     [esp+arg_28], 0
.text:0040B143                 mov     [esp+arg_24], 0
.text:0040B14B                 mov     [esp+arg_20], 0
.text:0040B153                 cmp     byte ptr [ecx], 0
.text:0040B156                 jz      loc_40B3CB
.text:0040B15C                 inc     dword ptr [ebp+0]
.text:0040B15F                 mov     [ebp+0Ch], ecx
.text:0040B162
.text:0040B162 loc_40B162:                             ; CODE XREF: sub_40AA40+9A4↓j
.text:0040B162                 mov     edi, [ebp+0Ch]
.text:0040B165                 mov     [ebp+14h], edi
.text:0040B168                 movzx   eax, byte ptr [edi]
.text:0040B16B                 test    al, al
.text:0040B16D                 jz      short loc_40B17F
.text:0040B16F                 cmp     al, 3Dh ; '='
.text:0040B171                 jz      short loc_40B17F
.text:0040B173
.text:0040B173 loc_40B173:                             ; CODE XREF: sub_40AA40+73D↓j
.text:0040B173                 inc     edi
.text:0040B174                 movzx   eax, byte ptr [edi]
.text:0040B177                 test    al, al
.text:0040B179                 jz      short loc_40B17F
.text:0040B17B                 cmp     al, 3Dh ; '='
.text:0040B17D                 jnz     short loc_40B173
.text:0040B17F
.text:0040B17F loc_40B17F:                             ; CODE XREF: sub_40AA40+72D↑j
.text:0040B17F                                         ; sub_40AA40+731↑j ...
.text:0040B17F                 mov     [esp+arg_1C], 0
.text:0040B187                 mov     esi, [esp+arg_68]
.text:0040B18B                 mov     eax, [esi]
.text:0040B18D                 test    eax, eax
.text:0040B18F                 jz      loc_40B310
.text:0040B195                 mov     ecx, eax
.text:0040B197
.text:0040B197 loc_40B197:                             ; CODE XREF: sub_40AA40+783↓j
.text:0040B197                 mov     ebx, [ebp+14h]
.text:0040B19A                 mov     eax, edi
.text:0040B19C                 mov     [esp+0], ecx    ; Str1
.text:0040B19F                 sub     eax, ebx
.text:0040B1A1                 mov     [esp+MaxCount], eax ; MaxCount
.text:0040B1A5                 mov     [esp+Str2], ebx ; Str2
.text:0040B1A9                 call    strncmp
.text:0040B1AE                 test    eax, eax
.text:0040B1B0                 jz      loc_40B377
.text:0040B1B6
.text:0040B1B6 loc_40B1B6:                             ; CODE XREF: sub_40AA40+95C↓j
.text:0040B1B6                                         ; sub_40AA40+96D↓j
.text:0040B1B6                 inc     [esp+arg_1C]
.text:0040B1BA                 add     esi, 10h
.text:0040B1BD                 mov     edx, [esi]
.text:0040B1BF                 test    edx, edx
.text:0040B1C1                 mov     ecx, edx
.text:0040B1C3                 jnz     short loc_40B197
.text:0040B1C5
.text:0040B1C5 loc_40B1C5:                             ; CODE XREF: sub_40AA40+986↓j
.text:0040B1C5                 mov     esi, [esp+arg_24]
.text:0040B1C9                 test    esi, esi
.text:0040B1CB                 jz      short loc_40B1D9
.text:0040B1CD                 mov     ebx, [esp+arg_28]
.text:0040B1D1                 test    ebx, ebx
.text:0040B1D3                 jz      loc_40B321
.text:0040B1D9
.text:0040B1D9 loc_40B1D9:                             ; CODE XREF: sub_40AA40+78B↑j
.text:0040B1D9                 mov     esi, [esp+arg_2C]
.text:0040B1DD                 test    esi, esi
.text:0040B1DF                 jz      loc_40B310
.text:0040B1E5                 cmp     byte ptr [edi], 0
.text:0040B1E8                 jz      loc_40B290
.text:0040B1EE                 mov     ecx, [esp+arg_2C]
.text:0040B1F2                 mov     ebx, [ecx+4]
.text:0040B1F5                 test    ebx, ebx
.text:0040B1F7                 jz      short loc_40B238
.text:0040B1F9                 lea     edx, [edi+1]
.text:0040B1FC                 mov     [ebp+0Ch], edx
.text:0040B1FF
.text:0040B1FF loc_40B1FF:                             ; CODE XREF: sub_40AA40+858↓j
.text:0040B1FF                                         ; sub_40AA40+877↓j
.text:0040B1FF                 mov     edi, [ebp+14h]
.text:0040B202                 mov     [esp+0], edi    ; Str
.text:0040B205                 call    strlen
.text:0040B20A                 add     [ebp+14h], eax
.text:0040B20D                 mov     eax, [esp+arg_6C]
.text:0040B211                 test    eax, eax
.text:0040B213                 jz      short loc_40B220
.text:0040B215                 mov     edx, [esp+arg_20]
.text:0040B219                 mov     ebp, [esp+arg_6C]
.text:0040B21D                 mov     [ebp+0], edx
.text:0040B220
.text:0040B220 loc_40B220:                             ; CODE XREF: sub_40AA40+7D3↑j
.text:0040B220                 mov     eax, [esp+arg_2C]
.text:0040B224                 mov     ecx, [eax+8]
.text:0040B227                 test    ecx, ecx
.text:0040B229                 jnz     loc_40ADEA
.text:0040B22F                 mov     ecx, [esp+arg_2C]
.text:0040B233                 jmp     loc_40ADE2
.text:0040B238 ; ---------------------------------------------------------------------------
.text:0040B238
.text:0040B238 loc_40B238:                             ; CODE XREF: sub_40AA40+7B7↑j
.text:0040B238                 mov     eax, [esp+arg_44]
.text:0040B23C                 test    eax, eax
.text:0040B23E                 jnz     short loc_40B253
.text:0040B240
.text:0040B240 loc_40B240:                             ; CODE XREF: sub_40AA40+849↓j
.text:0040B240                 mov     ecx, [ebp+14h]
.text:0040B243                 mov     [esp+0], ecx    ; Str
.text:0040B246                 call    strlen
.text:0040B24B                 add     [ebp+14h], eax
.text:0040B24E                 jmp     loc_40AE68
.text:0040B253 ; ---------------------------------------------------------------------------
.text:0040B253
.text:0040B253 loc_40B253:                             ; CODE XREF: sub_40AA40+7FE↑j
.text:0040B253                 mov     dword ptr [esp+0], offset sub_40AA40
.text:0040B25A                 call    ds:libintl_gettext
.text:0040B260                 mov     edx, [esp+arg_2C]
.text:0040B264                 mov     ebx, [esp+arg_60]
.text:0040B268                 mov     edi, [edx]
.text:0040B26A                 mov     [esp+arg_8], edi
.text:0040B26E                 mov     edi, ds:_iob
.text:0040B274                 mov     esi, [ebx]
.text:0040B276                 mov     [esp+Str2], eax ; Format
.text:0040B27A                 add     edi, 40h ; '@'
.text:0040B27D                 mov     [esp+MaxCount], esi
.text:0040B281                 mov     [esp+0], edi    ; Stream
.text:0040B284                 call    fprintf
.text:0040B289                 jmp     short loc_40B240
.text:0040B289 ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B289 ; ---------------------------------------------------------------------------
.text:0040B28B                 align 10h
.text:0040B290 ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B290
.text:0040B290 loc_40B290:                             ; CODE XREF: sub_40AA40+7A8↑j
.text:0040B290                 mov     esi, [esp+arg_2C]
.text:0040B294                 cmp     dword ptr [esi+4], 1
.text:0040B298                 jnz     loc_40B1FF
.text:0040B29E                 mov     ecx, [ebp+0]
.text:0040B2A1                 cmp     ecx, [esp+arg_5C]
.text:0040B2A5                 jge     short loc_40B2BC
.text:0040B2A7                 mov     eax, [esp+arg_60]
.text:0040B2AB                 lea     ebx, [ecx+1]
.text:0040B2AE                 mov     [ebp+0], ebx
.text:0040B2B1                 mov     edi, [eax+ecx*4]
.text:0040B2B4                 mov     [ebp+0Ch], edi
.text:0040B2B7                 jmp     loc_40B1FF
.text:0040B2BC ; ---------------------------------------------------------------------------
.text:0040B2BC
.text:0040B2BC loc_40B2BC:                             ; CODE XREF: sub_40AA40+865↑j
.text:0040B2BC                 mov     edx, [esp+arg_44]
.text:0040B2C0                 test    edx, edx
.text:0040B2C2                 jnz     short loc_40B2D7
.text:0040B2C4
.text:0040B2C4 loc_40B2C4:                             ; CODE XREF: sub_40AA40+8CE↓j
.text:0040B2C4                 mov     edx, [ebp+14h]
.text:0040B2C7                 mov     [esp+0], edx    ; Str
.text:0040B2CA                 call    strlen
.text:0040B2CF                 add     [ebp+14h], eax
.text:0040B2D2                 jmp     loc_40AEF9
.text:0040B2D7 ; ---------------------------------------------------------------------------
.text:0040B2D7
.text:0040B2D7 loc_40B2D7:                             ; CODE XREF: sub_40AA40+882↑j
.text:0040B2D7                 mov     dword ptr [esp+0], offset sub_40A960
.text:0040B2DE                 call    ds:libintl_gettext
.text:0040B2E4                 mov     ecx, [ebp+0]
.text:0040B2E7                 mov     ebx, [esp+arg_60]
.text:0040B2EB                 mov     edi, [ebx+ecx*4-4]
.text:0040B2EF                 mov     ecx, ds:_iob
.text:0040B2F5                 mov     [esp+arg_8], edi
.text:0040B2F9                 mov     esi, [ebx]
.text:0040B2FB                 add     ecx, 40h ; '@'
.text:0040B2FE                 mov     [esp+Str2], eax ; Format
.text:0040B302                 mov     [esp+0], ecx    ; Stream
.text:0040B305                 mov     [esp+MaxCount], esi
.text:0040B309                 call    fprintf
.text:0040B30E                 jmp     short loc_40B2C4
.text:0040B310 ; ---------------------------------------------------------------------------
.text:0040B310
.text:0040B310 loc_40B310:                             ; CODE XREF: sub_40AA40+74F↑j
.text:0040B310                                         ; sub_40AA40+79F↑j
.text:0040B310                 mov     dword ptr [ebp+14h], 0
.text:0040B317                 mov     eax, 57h ; 'W'
.text:0040B31C                 jmp     loc_40AC67
.text:0040B321 ; ---------------------------------------------------------------------------
.text:0040B321
.text:0040B321 loc_40B321:                             ; CODE XREF: sub_40AA40+793↑j
.text:0040B321                 mov     edi, [esp+arg_44]
.text:0040B325                 test    edi, edi
.text:0040B327                 jnz     short loc_40B33F
.text:0040B329
.text:0040B329 loc_40B329:                             ; CODE XREF: sub_40AA40+935↓j
.text:0040B329                 mov     edx, [ebp+14h]
.text:0040B32C                 mov     [esp+0], edx    ; Str
.text:0040B32F                 call    strlen
.text:0040B334                 add     [ebp+14h], eax
.text:0040B337                 inc     dword ptr [ebp+0]
.text:0040B33A                 jmp     loc_40AE68
.text:0040B33F ; ---------------------------------------------------------------------------
.text:0040B33F
.text:0040B33F loc_40B33F:                             ; CODE XREF: sub_40AA40+8E7↑j
.text:0040B33F                 mov     dword ptr [esp+0], offset sub_40AA80
.text:0040B346                 call    ds:libintl_gettext
.text:0040B34C                 mov     ecx, [ebp+0]
.text:0040B34F                 mov     ebx, [esp+arg_60]
.text:0040B353                 mov     edi, [ebx+ecx*4]
.text:0040B356                 mov     ecx, ds:_iob
.text:0040B35C                 mov     [esp+arg_8], edi
.text:0040B360                 mov     esi, [ebx]
.text:0040B362                 add     ecx, 40h ; '@'
.text:0040B365                 mov     [esp+Str2], eax ; Format
.text:0040B369                 mov     [esp+0], ecx    ; Stream
.text:0040B36C                 mov     [esp+MaxCount], esi
.text:0040B370                 call    fprintf
.text:0040B375                 jmp     short loc_40B329
.text:0040B377 ; ---------------------------------------------------------------------------
.text:0040B377
.text:0040B377 loc_40B377:                             ; CODE XREF: sub_40AA40+770↑j
.text:0040B377                 mov     edx, [ebp+14h]
.text:0040B37A                 mov     ebx, edi
.text:0040B37C                 mov     ecx, [esi]
.text:0040B37E                 sub     ebx, edx
.text:0040B380                 mov     [esp+0], ecx    ; Str
.text:0040B383                 call    strlen
.text:0040B388                 cmp     ebx, eax
.text:0040B38A                 jz      short loc_40B3B2
.text:0040B38C                 mov     ebx, [esp+arg_2C]
.text:0040B390                 test    ebx, ebx
.text:0040B392                 jz      short loc_40B3A1
.text:0040B394                 mov     [esp+arg_24], 1
.text:0040B39C                 jmp     loc_40B1B6
.text:0040B3A1 ; ---------------------------------------------------------------------------
.text:0040B3A1
.text:0040B3A1 loc_40B3A1:                             ; CODE XREF: sub_40AA40+952↑j
.text:0040B3A1                 mov     [esp+arg_2C], esi
.text:0040B3A5                 mov     ecx, [esp+arg_1C]
.text:0040B3A9                 mov     [esp+arg_20], ecx
.text:0040B3AD                 jmp     loc_40B1B6
.text:0040B3B2 ; ---------------------------------------------------------------------------
.text:0040B3B2
.text:0040B3B2 loc_40B3B2:                             ; CODE XREF: sub_40AA40+94A↑j
.text:0040B3B2                 mov     [esp+arg_2C], esi
.text:0040B3B6                 mov     eax, [esp+arg_1C]
.text:0040B3BA                 mov     [esp+arg_28], 1
.text:0040B3C2                 mov     [esp+arg_20], eax
.text:0040B3C6                 jmp     loc_40B1C5
.text:0040B3CB ; ---------------------------------------------------------------------------
.text:0040B3CB
.text:0040B3CB loc_40B3CB:                             ; CODE XREF: sub_40AA40+716↑j
.text:0040B3CB                 mov     edx, [ebp+0]
.text:0040B3CE                 cmp     edx, [esp+arg_5C]
.text:0040B3D2                 jz      short loc_40B3E9
.text:0040B3D4                 mov     ebx, [esp+arg_60]
.text:0040B3D8                 lea     esi, [edx+1]
.text:0040B3DB                 mov     [ebp+0], esi
.text:0040B3DE                 mov     edi, [ebx+edx*4]
.text:0040B3E1                 mov     [ebp+0Ch], edi
.text:0040B3E4                 jmp     loc_40B162
.text:0040B3E9 ; ---------------------------------------------------------------------------
.text:0040B3E9
.text:0040B3E9 loc_40B3E9:                             ; CODE XREF: sub_40AA40+992↑j
.text:0040B3E9                 mov     edi, [esp+arg_44]
.text:0040B3ED                 test    edi, edi
.text:0040B3EF                 jnz     short loc_40B40C
.text:0040B3F1
.text:0040B3F1 loc_40B3F1:                             ; CODE XREF: sub_40AA40+9FC↓j
.text:0040B3F1                 mov     [ebp+8], esi
.text:0040B3F4                 mov     ebp, [esp+Str]
.text:0040B3F8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040B3FC                 jz      short loc_40B408
.text:0040B3FE                 mov     bl, 3Fh ; '?'
.text:0040B400
.text:0040B400 loc_40B400:                             ; CODE XREF: sub_40AA40+9CA↓j
.text:0040B400                 movsx   eax, bl
.text:0040B403                 jmp     loc_40AC67
.text:0040B408 ; ---------------------------------------------------------------------------
.text:0040B408
.text:0040B408 loc_40B408:                             ; CODE XREF: sub_40AA40+9BC↑j
.text:0040B408                 mov     bl, 3Ah ; ':'
.text:0040B40A                 jmp     short loc_40B400
.text:0040B40C ; ---------------------------------------------------------------------------
.text:0040B40C
.text:0040B40C loc_40B40C:                             ; CODE XREF: sub_40AA40+9AF↑j
.text:0040B40C                 mov     dword ptr [esp+0], 40AA00h
.text:0040B413                 call    ds:libintl_gettext
.text:0040B419                 mov     [esp+arg_8], esi
.text:0040B41D                 mov     edx, [esp+arg_60]
.text:0040B421                 mov     ecx, ds:_iob
.text:0040B427                 mov     ebx, [edx]
.text:0040B429                 add     ecx, 40h ; '@'
.text:0040B42C                 mov     [esp+Str2], eax ; Format
.text:0040B430                 mov     [esp+MaxCount], ebx
.text:0040B434                 mov     [esp+0], ecx    ; Stream
.text:0040B437                 call    fprintf
.text:0040B43C                 jmp     short loc_40B3F1
.text:0040B43C ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B43C ; ---------------------------------------------------------------------------
.text:0040B43E                 align 10h
.text:0040B440 ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B440
.text:0040B440 loc_40B440:                             ; CODE XREF: sub_40AA40+61C↑j
.text:0040B440                                         ; sub_40AA40+625↑j
.text:0040B440                 mov     eax, [esp+arg_44]
.text:0040B444                 test    eax, eax
.text:0040B446                 jz      short loc_40B47F
.text:0040B448                 mov     ebx, [ebp+1Ch]
.text:0040B44B                 test    ebx, ebx
.text:0040B44D                 jz      short loc_40B487
.text:0040B44F                 mov     dword ptr [esp+0], offset loc_40AAA1
.text:0040B456
.text:0040B456 loc_40B456:                             ; CODE XREF: sub_40AA40+A4E↓j
.text:0040B456                 call    ds:libintl_gettext
.text:0040B45C                 mov     [esp+arg_8], esi
.text:0040B460                 mov     ebx, [esp+arg_60]
.text:0040B464                 mov     edx, ds:_iob
.text:0040B46A                 mov     esi, [ebx]
.text:0040B46C                 add     edx, 40h ; '@'
.text:0040B46F                 mov     [esp+Str2], eax ; Format
.text:0040B473                 mov     [esp+MaxCount], esi
.text:0040B477                 mov     [esp+0], edx    ; Stream
.text:0040B47A                 call    fprintf
.text:0040B47F
.text:0040B47F loc_40B47F:                             ; CODE XREF: sub_40AA40+A06↑j
.text:0040B47F                 mov     [ebp+8], edi
.text:0040B482                 jmp     loc_40AE68
.text:0040B487 ; ---------------------------------------------------------------------------
.text:0040B487
.text:0040B487 loc_40B487:                             ; CODE XREF: sub_40AA40+A0D↑j
.text:0040B487                 mov     dword ptr [esp+0], offset loc_40AABB
.text:0040B48E                 jmp     short loc_40B456
.text:0040B490 ; ---------------------------------------------------------------------------
.text:0040B490
.text:0040B490 loc_40B490:                             ; CODE XREF: sub_40AA40+33E↑j
.text:0040B490                 mov     edi, [esp+arg_44]
.text:0040B494                 test    edi, edi
.text:0040B496                 jnz     short loc_40B4AE
.text:0040B498
.text:0040B498 loc_40B498:                             ; CODE XREF: sub_40AA40+AA4↓j
.text:0040B498                 mov     edx, [ebp+14h]
.text:0040B49B                 mov     [esp+0], edx    ; Str
.text:0040B49E                 call    strlen
.text:0040B4A3                 add     [ebp+14h], eax
.text:0040B4A6                 inc     dword ptr [ebp+0]
.text:0040B4A9                 jmp     loc_40AFEE
.text:0040B4AE ; ---------------------------------------------------------------------------
.text:0040B4AE
.text:0040B4AE loc_40B4AE:                             ; CODE XREF: sub_40AA40+A56↑j
.text:0040B4AE                 mov     dword ptr [esp+0], offset loc_40AAD5
.text:0040B4B5                 call    ds:libintl_gettext
.text:0040B4BB                 mov     ebx, [ebp+0]
.text:0040B4BE                 mov     edi, [esp+arg_60]
.text:0040B4C2                 mov     ecx, [edi+ebx*4]
.text:0040B4C5                 mov     ebx, ds:_iob
.text:0040B4CB                 mov     [esp+arg_8], ecx
.text:0040B4CF                 mov     esi, [edi]
.text:0040B4D1                 add     ebx, 40h ; '@'
.text:0040B4D4                 mov     [esp+Str2], eax ; Format
.text:0040B4D8                 mov     [esp+0], ebx    ; Stream
.text:0040B4DB                 mov     [esp+MaxCount], esi
.text:0040B4DF                 call    fprintf
.text:0040B4E4                 jmp     short loc_40B498
.text:0040B4E6 ; ---------------------------------------------------------------------------
.text:0040B4E6
.text:0040B4E6 loc_40B4E6:                             ; CODE XREF: sub_40AA40+316↑j
.text:0040B4E6                 mov     ecx, [ebp+14h]
.text:0040B4E9                 mov     ebx, edi
.text:0040B4EB                 mov     edx, [esi]
.text:0040B4ED                 sub     ebx, ecx
.text:0040B4EF                 mov     [esp+0], edx    ; Str
.text:0040B4F2                 call    strlen
.text:0040B4F7                 cmp     ebx, eax
.text:0040B4F9                 jz      short loc_40B551
.text:0040B4FB                 mov     ebx, [esp+arg_40]
.text:0040B4FF                 test    ebx, ebx
.text:0040B501                 jz      short loc_40B540
.text:0040B503                 mov     edx, [esp+arg_70]
.text:0040B507                 test    edx, edx
.text:0040B509                 jnz     short loc_40B517
.text:0040B50B                 mov     ecx, [esp+arg_40]
.text:0040B50F                 mov     ebx, [esi+4]
.text:0040B512                 cmp     [ecx+4], ebx
.text:0040B515                 jz      short loc_40B524
.text:0040B517
.text:0040B517 loc_40B517:                             ; CODE XREF: sub_40AA40+AC9↑j
.text:0040B517                                         ; sub_40AA40+AEA↓j ...
.text:0040B517                 mov     [esp+arg_38], 1
.text:0040B51F                 jmp     loc_40AD5C
.text:0040B524 ; ---------------------------------------------------------------------------
.text:0040B524
.text:0040B524 loc_40B524:                             ; CODE XREF: sub_40AA40+AD5↑j
.text:0040B524                 mov     edx, [esi+8]
.text:0040B527                 cmp     [ecx+8], edx
.text:0040B52A                 jnz     short loc_40B517
.text:0040B52C                 mov     ebx, [esi+0Ch]
.text:0040B52F                 cmp     [ecx+0Ch], ebx
.text:0040B532                 jnz     short loc_40B517
.text:0040B534                 jmp     loc_40AD5C
.text:0040B534 ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B534 ; ---------------------------------------------------------------------------
.text:0040B539                 align 10h
.text:0040B540 ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B540
.text:0040B540 loc_40B540:                             ; CODE XREF: sub_40AA40+AC1↑j
.text:0040B540                 mov     [esp+arg_40], esi
.text:0040B544                 mov     eax, [esp+arg_30]
.text:0040B548                 mov     [esp+arg_34], eax
.text:0040B54C                 jmp     loc_40AD5C
.text:0040B551 ; ---------------------------------------------------------------------------
.text:0040B551
.text:0040B551 loc_40B551:                             ; CODE XREF: sub_40AA40+AB9↑j
.text:0040B551                 mov     [esp+arg_40], esi
.text:0040B555                 mov     ecx, [esp+arg_30]
.text:0040B559                 mov     [esp+arg_3C], 1
.text:0040B561                 mov     [esp+arg_34], ecx
.text:0040B565                 jmp     loc_40AD70
.text:0040B56A ; ---------------------------------------------------------------------------
.text:0040B56A
.text:0040B56A loc_40B56A:                             ; CODE XREF: sub_40AA40+28F↑j
.text:0040B56A                 mov     eax, [esp+Str]
.text:0040B56E                 movsx   esi, dl
.text:0040B571                 mov     [esp+Str2], esi ; Val
.text:0040B575                 mov     [esp+0], eax    ; Str
.text:0040B578                 call    strchr
.text:0040B57D                 test    eax, eax
.text:0040B57F                 jnz     loc_40B030
.text:0040B585                 jmp     loc_40ACD5
.text:0040B58A ; ---------------------------------------------------------------------------
.text:0040B58A
.text:0040B58A loc_40B58A:                             ; CODE XREF: sub_40AA40+24C↑j
.text:0040B58A                 mov     ecx, 1
.text:0040B58F                 jmp     loc_40AC92
.text:0040B594 ; ---------------------------------------------------------------------------
.text:0040B594
.text:0040B594 loc_40B594:                             ; CODE XREF: sub_40AA40+1A4↑j
.text:0040B594                                         ; sub_40AA40+200↑j
.text:0040B594                 mov     eax, [ebp+20h]
.text:0040B597                 cmp     eax, [ebp+24h]
.text:0040B59A                 jz      loc_40AC70
.text:0040B5A0                 mov     [ebp+0], eax
.text:0040B5A3                 jmp     loc_40AC70
.text:0040B5A8 ; ---------------------------------------------------------------------------
.text:0040B5A8
.text:0040B5A8 loc_40B5A8:                             ; CODE XREF: sub_40AA40+1CE↑j
.text:0040B5A8                 mov     [ebp+20h], eax
.text:0040B5AB                 jmp     loc_40AC30
.text:0040B5B0 ; ---------------------------------------------------------------------------
.text:0040B5B0
.text:0040B5B0 loc_40B5B0:                             ; CODE XREF: sub_40AA40+19A↑j
.text:0040B5B0                 mov     edx, [ebp+20h]
.text:0040B5B3                 mov     eax, [ebp+24h]
.text:0040B5B6                 cmp     edx, eax
.text:0040B5B8                 jz      short loc_40B630
.text:0040B5BA                 cmp     eax, ebx
.text:0040B5BC                 jz      short loc_40B5D1
.text:0040B5BE                 mov     [esp+Str2], ebp
.text:0040B5C2                 mov     ebx, [esp+arg_60]
.text:0040B5C6                 mov     [esp+0], ebx
.text:0040B5C9                 call    sub_40B7C0
.text:0040B5CE                 mov     ebx, [ebp+0]
.text:0040B5D1
.text:0040B5D1 loc_40B5D1:                             ; CODE XREF: sub_40AA40+B7C↑j
.text:0040B5D1                                         ; sub_40AA40+BF2↓j ...
.text:0040B5D1                 cmp     ebx, [esp+arg_5C]
.text:0040B5D5                 jge     short loc_40B620
.text:0040B5D7                 mov     esi, [esp+arg_60]
.text:0040B5DB                 mov     eax, [esi+ebx*4]
.text:0040B5DE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:0040B5E1                 jz      short loc_40B628
.text:0040B5E3                 lea     esi, [esi+0]
.text:0040B5E9                 lea     edi, [edi+0]
.text:0040B5F0
.text:0040B5F0 loc_40B5F0:                             ; CODE XREF: sub_40AA40+BCC↓j
.text:0040B5F0                                         ; sub_40AA40+BEC↓j
.text:0040B5F0                 lea     eax, [ebx+1]
.text:0040B5F3                 mov     ebx, eax
.text:0040B5F5                 mov     [ebp+0], eax
.text:0040B5F8                 cmp     eax, [esp+arg_5C]
.text:0040B5FC                 jge     short loc_40B620
.text:0040B5FE                 mov     edi, [esp+arg_60]
.text:0040B602                 mov     edx, [edi+eax*4]
.text:0040B605                 cmp     byte ptr [edx], 2Dh ; '-'
.text:0040B608                 jz      short loc_40B610
.text:0040B60A
.text:0040B60A loc_40B60A:                             ; CODE XREF: sub_40AA40+BD4↓j
.text:0040B60A                 mov     ebx, eax
.text:0040B60C                 jmp     short loc_40B5F0
.text:0040B60C ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B60C ; ---------------------------------------------------------------------------
.text:0040B60E                 align 10h
.text:0040B610 ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B610
.text:0040B610 loc_40B610:                             ; CODE XREF: sub_40AA40+BC8↑j
.text:0040B610                 cmp     byte ptr [edx+1], 0
.text:0040B614                 jz      short loc_40B60A
.text:0040B616                 lea     esi, [esi+0]
.text:0040B619                 lea     edi, [edi+0]
.text:0040B620
.text:0040B620 loc_40B620:                             ; CODE XREF: sub_40AA40+B95↑j
.text:0040B620                                         ; sub_40AA40+BBC↑j ...
.text:0040B620                 mov     [ebp+24h], ebx
.text:0040B623                 jmp     loc_40ABE0
.text:0040B628 ; ---------------------------------------------------------------------------
.text:0040B628
.text:0040B628 loc_40B628:                             ; CODE XREF: sub_40AA40+BA1↑j
.text:0040B628                 cmp     byte ptr [eax+1], 0
.text:0040B62C                 jz      short loc_40B5F0
.text:0040B62E                 jmp     short loc_40B620
.text:0040B630 ; ---------------------------------------------------------------------------
.text:0040B630
.text:0040B630 loc_40B630:                             ; CODE XREF: sub_40AA40+B78↑j
.text:0040B630                 cmp     edx, ebx
.text:0040B632                 jz      short loc_40B5D1
.text:0040B634                 mov     [ebp+20h], ebx
.text:0040B637                 jmp     short loc_40B5D1
.text:0040B639 ; ---------------------------------------------------------------------------
.text:0040B639
.text:0040B639 loc_40B639:                             ; CODE XREF: sub_40AA40+158↑j
.text:0040B639                 mov     dword ptr [ebp+18h], 0
.text:0040B640                 mov     esi, [esp+Str]
.text:0040B644
.text:0040B644 loc_40B644:                             ; CODE XREF: sub_40AA40+C19↓j
.text:0040B644                 inc     esi
.text:0040B645                 jmp     loc_40ABA8
.text:0040B645 ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B645 ; ---------------------------------------------------------------------------
.text:0040B64A                 align 10h
.text:0040B650 ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B650
.text:0040B650 loc_40B650:                             ; CODE XREF: sub_40AA40+150↑j
.text:0040B650                 mov     dword ptr [ebp+18h], 2
.text:0040B657                 mov     esi, ecx
.text:0040B659                 jmp     short loc_40B644
.text:0040B659 ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B659 ; ---------------------------------------------------------------------------
.text:0040B65B                 align 10h
.text:0040B660 ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B660
.text:0040B660 loc_40B660:                             ; CODE XREF: sub_40AA40+139↑j
.text:0040B660                 mov     dword ptr [esp+0], offset loc_40AAF3 ; VarName
.text:0040B667                 call    getenv
.text:0040B66C                 test    eax, eax
.text:0040B66E                 jz      loc_40AB84
.text:0040B674                 jmp     loc_40AB7F
.text:0040B674 ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B674 ; ---------------------------------------------------------------------------
.text:0040B679                 align 10h
.text:0040B680 ; START OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B680
.text:0040B680 loc_40B680:                             ; CODE XREF: sub_40AA40:loc_40AB4F↑j
.text:0040B680                 mov     dword ptr [ebp+0], 1
.text:0040B687                 mov     ebx, 1
.text:0040B68C                 jmp     loc_40AB60
.text:0040B68C ; END OF FUNCTION CHUNK FOR sub_40AA40
.text:0040B691 ; ---------------------------------------------------------------------------
.text:0040B691                 jmp     short sub_40B6A0
.text:0040B691 ; ---------------------------------------------------------------------------
.text:0040B693                 align 10h
.text:0040B6A0
.text:0040B6A0 ; =============== S U B R O U T I N E =======================================
.text:0040B6A0
.text:0040B6A0
.text:0040B6A0 sub_40B6A0      proc near               ; CODE XREF: .text:0040B691↑j
.text:0040B6A0                                         ; sub_40BDE0+3A↓p ...
.text:0040B6A0
.text:0040B6A0 var_2C          = dword ptr -2Ch
.text:0040B6A0 var_28          = dword ptr -28h
.text:0040B6A0 var_24          = dword ptr -24h
.text:0040B6A0 var_20          = dword ptr -20h
.text:0040B6A0 var_1C          = dword ptr -1Ch
.text:0040B6A0 var_18          = dword ptr -18h
.text:0040B6A0 var_14          = dword ptr -14h
.text:0040B6A0 var_10          = dword ptr -10h
.text:0040B6A0 arg_0           = dword ptr  4
.text:0040B6A0 arg_4           = dword ptr  8
.text:0040B6A0 arg_8           = dword ptr  0Ch
.text:0040B6A0 arg_C           = dword ptr  10h
.text:0040B6A0 arg_10          = dword ptr  14h
.text:0040B6A0 arg_14          = dword ptr  18h
.text:0040B6A0 arg_18          = dword ptr  1Ch
.text:0040B6A0
.text:0040B6A0                 sub     esp, 2Ch
.text:0040B6A3                 mov     edx, dword_416030
.text:0040B6A9                 mov     [esp+2Ch+var_10], offset dword_419340
.text:0040B6B1                 mov     ecx, dword_416034
.text:0040B6B7                 mov     ds:dword_419340, edx
.text:0040B6BD                 mov     edx, [esp+2Ch+arg_18]
.text:0040B6C1                 mov     ds:dword_419344, ecx
.text:0040B6C7                 mov     ecx, [esp+2Ch+arg_14]
.text:0040B6CB                 mov     [esp+2Ch+var_14], edx
.text:0040B6CF                 mov     edx, [esp+2Ch+arg_10]
.text:0040B6D3                 mov     [esp+2Ch+var_18], ecx
.text:0040B6D7                 mov     ecx, [esp+2Ch+arg_C]
.text:0040B6DB                 mov     [esp+2Ch+var_1C], edx
.text:0040B6DF                 mov     edx, [esp+2Ch+arg_8]
.text:0040B6E3                 mov     [esp+2Ch+var_20], ecx
.text:0040B6E7                 mov     ecx, [esp+2Ch+arg_4]
.text:0040B6EB                 mov     [esp+2Ch+var_24], edx
.text:0040B6EF                 mov     edx, [esp+2Ch+arg_0]
.text:0040B6F3                 mov     [esp+2Ch+var_28], ecx
.text:0040B6F7                 mov     [esp+2Ch+var_2C], edx
.text:0040B6FA                 call    loc_40AB10
.text:0040B6FF                 mov     ecx, ds:dword_419340
.text:0040B705                 mov     dword_416030, ecx
.text:0040B70B                 mov     ecx, ds:dword_41934C
.text:0040B711                 mov     ds:dword_4196F0, ecx
.text:0040B717                 mov     ecx, ds:dword_419348
.text:0040B71D                 mov     dword_416038, ecx
.text:0040B723                 add     esp, 2Ch
.text:0040B726                 retn
.text:0040B726 sub_40B6A0      endp
.text:0040B726
.text:0040B726 ; ---------------------------------------------------------------------------
.text:0040B727                 align 10h
.text:0040B730                 sub     esp, 2Ch
.text:0040B733                 mov     edx, dword_416030
.text:0040B739                 mov     dword ptr [esp+1Ch], offset dword_419340
.text:0040B741                 mov     ecx, dword_416034
.text:0040B747                 mov     dword ptr [esp+18h], 1
.text:0040B74F                 mov     ds:dword_419340, edx
.text:0040B755                 mov     edx, [esp+38h]
.text:0040B759                 mov     ds:dword_419344, ecx
.text:0040B75F                 mov     ecx, [esp+34h]
.text:0040B763                 mov     [esp+8], edx
.text:0040B767                 mov     edx, [esp+30h]
.text:0040B76B                 mov     [esp+4], ecx
.text:0040B76F                 mov     dword ptr [esp+14h], 0
.text:0040B777                 mov     dword ptr [esp+10h], 0
.text:0040B77F                 mov     dword ptr [esp+0Ch], 0
.text:0040B787                 mov     [esp], edx
.text:0040B78A                 call    loc_40AB10
.text:0040B78F                 mov     ecx, ds:dword_419340
.text:0040B795                 mov     dword_416030, ecx
.text:0040B79B                 mov     ecx, ds:dword_41934C
.text:0040B7A1                 mov     ds:dword_4196F0, ecx
.text:0040B7A7                 mov     ecx, ds:dword_419348
.text:0040B7AD                 mov     dword_416038, ecx
.text:0040B7B3                 add     esp, 2Ch
.text:0040B7B6                 retn
.text:0040B7B6 ; ---------------------------------------------------------------------------
.text:0040B7B7                 align 10h
.text:0040B7C0
.text:0040B7C0 ; =============== S U B R O U T I N E =======================================
.text:0040B7C0
.text:0040B7C0
.text:0040B7C0 sub_40B7C0      proc near               ; CODE XREF: sub_40AA40+1E3↑p
.text:0040B7C0                                         ; sub_40AA40+B89↑p
.text:0040B7C0
.text:0040B7C0 var_2C          = dword ptr -2Ch
.text:0040B7C0 var_28          = dword ptr -28h
.text:0040B7C0 var_24          = dword ptr -24h
.text:0040B7C0 var_20          = dword ptr -20h
.text:0040B7C0 var_1C          = dword ptr -1Ch
.text:0040B7C0 var_18          = dword ptr -18h
.text:0040B7C0 var_14          = dword ptr -14h
.text:0040B7C0 arg_0           = dword ptr  4
.text:0040B7C0 arg_4           = dword ptr  8
.text:0040B7C0
.text:0040B7C0                 push    ebp
.text:0040B7C1                 push    edi
.text:0040B7C2                 push    esi
.text:0040B7C3                 push    ebx
.text:0040B7C4                 sub     esp, 1Ch
.text:0040B7C7                 mov     ecx, [esp+2Ch+arg_4]
.text:0040B7CB                 mov     eax, [esp+2Ch+arg_4]
.text:0040B7CF                 mov     ebx, [esp+2Ch+arg_4]
.text:0040B7D3                 mov     edx, [ecx+20h]
.text:0040B7D6                 mov     edi, [esp+2Ch+arg_0]
.text:0040B7DA                 mov     ecx, [ebx]
.text:0040B7DC                 mov     [esp+2Ch+var_2C], edx
.text:0040B7DF                 mov     [esp+2Ch+var_14], edx
.text:0040B7E3                 mov     edx, [eax+24h]
.text:0040B7E6                 mov     [esp+2Ch+var_28], ecx
.text:0040B7EA                 mov     [esp+2Ch+var_1C], ecx
.text:0040B7EE                 cmp     ecx, edx
.text:0040B7F0                 mov     [esp+2Ch+var_18], edx
.text:0040B7F4                 jle     short loc_40B870
.text:0040B7F6                 mov     esi, [esp+2Ch+var_2C]
.text:0040B7F9                 cmp     edx, esi
.text:0040B7FB                 jle     short loc_40B870
.text:0040B7FD                 lea     esi, [esi+0]
.text:0040B800
.text:0040B800 loc_40B800:                             ; CODE XREF: sub_40B7C0+A1↓j
.text:0040B800                 mov     ebx, [esp+2Ch+var_1C]
.text:0040B804                 mov     edx, [esp+2Ch+var_18]
.text:0040B808                 mov     ebp, [esp+2Ch+var_18]
.text:0040B80C                 mov     eax, [esp+2Ch+var_14]
.text:0040B810                 sub     ebx, edx
.text:0040B812                 mov     [esp+2Ch+var_20], ebx
.text:0040B816                 sub     ebp, eax
.text:0040B818                 cmp     ebx, ebp
.text:0040B81A                 jle     short loc_40B895
.text:0040B81C                 xor     esi, esi
.text:0040B81E                 cmp     esi, ebp
.text:0040B820                 jge     short loc_40B84D
.text:0040B822                 mov     ecx, [esp+2Ch+var_1C]
.text:0040B826                 sub     ecx, ebp
.text:0040B828                 mov     [esp+2Ch+var_24], ecx
.text:0040B82C                 lea     esi, [esi+0]
.text:0040B830
.text:0040B830 loc_40B830:                             ; CODE XREF: sub_40B7C0+8B↓j
.text:0040B830                 mov     ecx, [esp+2Ch+var_14]
.text:0040B834                 mov     edx, [esp+2Ch+var_24]
.text:0040B838                 add     ecx, esi
.text:0040B83A                 add     edx, esi
.text:0040B83C                 mov     ebx, [edi+ecx*4]
.text:0040B83F                 mov     eax, [edi+edx*4]
.text:0040B842                 inc     esi
.text:0040B843                 cmp     esi, ebp
.text:0040B845                 mov     [edi+ecx*4], eax
.text:0040B848                 mov     [edi+edx*4], ebx
.text:0040B84B                 jl      short loc_40B830
.text:0040B84D
.text:0040B84D loc_40B84D:                             ; CODE XREF: sub_40B7C0+60↑j
.text:0040B84D                 sub     [esp+2Ch+var_1C], ebp
.text:0040B851
.text:0040B851 loc_40B851:                             ; CODE XREF: sub_40B7C0+107↓j
.text:0040B851                 mov     eax, [esp+2Ch+var_18]
.text:0040B855                 cmp     [esp+2Ch+var_1C], eax
.text:0040B859                 jle     short loc_40B870
.text:0040B85B                 mov     ebp, [esp+2Ch+var_14]
.text:0040B85F                 cmp     eax, ebp
.text:0040B861                 jg      short loc_40B800
.text:0040B863                 lea     esi, [esi+0]
.text:0040B869                 lea     edi, [edi+0]
.text:0040B870
.text:0040B870 loc_40B870:                             ; CODE XREF: sub_40B7C0+34↑j
.text:0040B870                                         ; sub_40B7C0+3B↑j ...
.text:0040B870                 mov     esi, [esp+2Ch+var_28]
.text:0040B874                 mov     ecx, [esp+2Ch+var_18]
.text:0040B878                 mov     eax, [esp+2Ch+var_2C]
.text:0040B87B                 mov     edi, [esp+2Ch+arg_4]
.text:0040B87F                 mov     edx, [esp+2Ch+var_28]
.text:0040B883                 sub     esi, ecx
.text:0040B885                 add     esi, eax
.text:0040B887                 mov     [edi+20h], esi
.text:0040B88A                 mov     [edi+24h], edx
.text:0040B88D                 add     esp, 1Ch
.text:0040B890                 pop     ebx
.text:0040B891                 pop     esi
.text:0040B892                 pop     edi
.text:0040B893                 pop     ebp
.text:0040B894                 retn
.text:0040B895 ; ---------------------------------------------------------------------------
.text:0040B895
.text:0040B895 loc_40B895:                             ; CODE XREF: sub_40B7C0+5A↑j
.text:0040B895                 xor     esi, esi
.text:0040B897                 cmp     esi, [esp+2Ch+var_20]
.text:0040B89B                 jge     short loc_40B8BF
.text:0040B89D                 lea     esi, [esi+0]
.text:0040B8A0
.text:0040B8A0 loc_40B8A0:                             ; CODE XREF: sub_40B7C0+FD↓j
.text:0040B8A0                 mov     ebx, [esp+2Ch+var_14]
.text:0040B8A4                 mov     ebp, [esp+2Ch+var_18]
.text:0040B8A8                 add     ebx, esi
.text:0040B8AA                 add     ebp, esi
.text:0040B8AC                 mov     edx, [edi+ebx*4]
.text:0040B8AF                 inc     esi
.text:0040B8B0                 cmp     esi, [esp+2Ch+var_20]
.text:0040B8B4                 mov     ecx, [edi+ebp*4]
.text:0040B8B7                 mov     [edi+ebx*4], ecx
.text:0040B8BA                 mov     [edi+ebp*4], edx
.text:0040B8BD                 jl      short loc_40B8A0
.text:0040B8BF
.text:0040B8BF loc_40B8BF:                             ; CODE XREF: sub_40B7C0+DB↑j
.text:0040B8BF                 mov     esi, [esp+2Ch+var_20]
.text:0040B8C3                 add     [esp+2Ch+var_14], esi
.text:0040B8C7                 jmp     short loc_40B851
.text:0040B8C7 sub_40B7C0      endp
.text:0040B8C7
.text:0040B8C7 ; ---------------------------------------------------------------------------
.text:0040B8C9                 align 20h
.text:0040B8E0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:0040B8E0                                         ; DATA XREF: .data:off_416040↓o
.text:0040B912 ; const char aSSS[]
.text:0040B912 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_40BBD0+50↓o
.text:0040B91E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040B91E                                         ; DATA XREF: sub_40BBD0:loc_40BC71↓o
.text:0040B92E                 align 20h
.text:0040B940 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:0040B940                                         ; DATA XREF: sub_40BBD0+100↓o
.text:0040B940                 db 'ere is NO',0Ah
.text:0040B940                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:0040B940                 db 'R PURPOSE.',0Ah,0
.text:0040B9D8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:0040B9D8                                         ; DATA XREF: sub_40BBD0:loc_40BD11↓o
.text:0040B9EF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040B9EF                                         ; DATA XREF: sub_40BBD0:loc_40BD1D↓o
.text:0040BA0B                 align 20h
.text:0040BA20 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:0040BA20                                         ; DATA XREF: sub_40BBD0:loc_40BD29↓o
.text:0040BA20                 db 'and %s.',0Ah,0
.text:0040BA40 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:0040BA40                                         ; DATA XREF: sub_40BBD0:loc_40BD35↓o
.text:0040BA40                 db '%s, and %s.',0Ah,0
.text:0040BA64                 align 20h
.text:0040BA80 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:0040BA80                                         ; DATA XREF: sub_40BBD0:loc_40BD41↓o
.text:0040BA80                 db '%s, %s, and %s.',0Ah,0
.text:0040BAA8                 align 20h
.text:0040BAC0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:0040BAC0                                         ; DATA XREF: sub_40BBD0:loc_40BD4D↓o
.text:0040BAC0                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040BAEC                 align 20h
.text:0040BB00 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:0040BB00                                         ; DATA XREF: sub_40BBD0:loc_40BD59↓o
.text:0040BB00                 db '%s, %s, %s, %s,',0Ah
.text:0040BB00                 db 'and %s.',0Ah,0
.text:0040BB30                 align 20h
.text:0040BB40 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:0040BB40                                         ; DATA XREF: sub_40BBD0:loc_40BD65↓o
.text:0040BB40                 db '%s, %s, %s, %s,',0Ah
.text:0040BB40                 db '%s, and %s.',0Ah,0
.text:0040BB74                 align 10h
.text:0040BB80 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:0040BB80                                         ; DATA XREF: sub_40BBD0:def_40BC3D↓o
.text:0040BB80                 db '%s, %s, %s, %s,',0Ah
.text:0040BB80                 db '%s, %s, and others.',0Ah,0
.text:0040BBBC ; const char aSS[]
.text:0040BBBC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_40BBD0+1B5↓o
.text:0040BBC3                 align 10h
.text:0040BBD0
.text:0040BBD0 ; =============== S U B R O U T I N E =======================================
.text:0040BBD0
.text:0040BBD0
.text:0040BBD0 ; int __cdecl sub_40BBD0(FILE *, FILE *, int, int, va_list)
.text:0040BBD0 sub_40BBD0      proc near               ; CODE XREF: sub_40BDA0+2A↓p
.text:0040BBD0
.text:0040BBD0 Stream          = dword ptr -2Ch
.text:0040BBD0 Format          = dword ptr -28h
.text:0040BBD0 ArgList         = dword ptr -24h
.text:0040BBD0 var_20          = dword ptr -20h
.text:0040BBD0 var_1C          = dword ptr -1Ch
.text:0040BBD0 var_14          = dword ptr -14h
.text:0040BBD0 arg_0           = dword ptr  4
.text:0040BBD0 arg_4           = dword ptr  8
.text:0040BBD0 arg_8           = dword ptr  0Ch
.text:0040BBD0 arg_C           = dword ptr  10h
.text:0040BBD0 arg_10          = dword ptr  14h
.text:0040BBD0
.text:0040BBD0                 push    ebp
.text:0040BBD1                 push    edi
.text:0040BBD2                 push    esi
.text:0040BBD3                 push    ebx
.text:0040BBD4                 sub     esp, 1Ch
.text:0040BBD7                 xor     ebx, ebx
.text:0040BBD9                 mov     edi, [esp+2Ch+arg_10]
.text:0040BBDD                 mov     edx, [esp+2Ch+arg_8]
.text:0040BBE1                 mov     esi, [esp+2Ch+arg_0]
.text:0040BBE5                 mov     eax, [edi]
.text:0040BBE7                 mov     ecx, [esp+2Ch+arg_4]
.text:0040BBEB                 mov     [esp+2Ch+var_14], edx
.text:0040BBEF                 mov     ebp, [esp+2Ch+arg_C]
.text:0040BBF3                 lea     edx, [edi+4]
.text:0040BBF6                 test    eax, eax
.text:0040BBF8                 jz      short loc_40BC0C
.text:0040BBFA                 lea     esi, [esi+0]
.text:0040BC00
.text:0040BC00 loc_40BC00:                             ; CODE XREF: sub_40BBD0+3A↓j
.text:0040BC00                 mov     eax, edx
.text:0040BC02                 inc     ebx
.text:0040BC03                 mov     eax, [eax]
.text:0040BC05                 add     edx, 4
.text:0040BC08                 test    eax, eax
.text:0040BC0A                 jnz     short loc_40BC00
.text:0040BC0C
.text:0040BC0C loc_40BC0C:                             ; CODE XREF: sub_40BBD0+28↑j
.text:0040BC0C                 test    ecx, ecx
.text:0040BC0E                 jz      loc_40BD7D
.text:0040BC14                 mov     [esp+2Ch+var_1C], ebp
.text:0040BC18                 mov     edx, [esp+2Ch+var_14]
.text:0040BC1C                 mov     [esp+2Ch+ArgList], ecx
.text:0040BC20                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:0040BC28                 mov     [esp+2Ch+var_20], edx
.text:0040BC2C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040BC2F                 call    fprintf
.text:0040BC34
.text:0040BC34 loc_40BC34:                             ; CODE XREF: sub_40BBD0+1C9↓j
.text:0040BC34                 cmp     ebx, 9          ; switch 10 cases
.text:0040BC37                 ja      def_40BC3D      ; jumptable 0040BC3D default case
.text:0040BC3D                 jmp     ds:jpt_40BC3D[ebx*4] ; switch jump
.text:0040BC3D ; ---------------------------------------------------------------------------
.text:0040BC44 jpt_40BC3D      dd offset loc_40BC6C    ; DATA XREF: sub_40BBD0+6D↑r
.text:0040BC44                 dd offset loc_40BC71    ; jump table for switch statement
.text:0040BC44                 dd offset loc_40BD11
.text:0040BC44                 dd offset loc_40BD1D
.text:0040BC44                 dd offset loc_40BD29
.text:0040BC44                 dd offset loc_40BD35
.text:0040BC44                 dd offset loc_40BD41
.text:0040BC44                 dd offset loc_40BD4D
.text:0040BC44                 dd offset loc_40BD59
.text:0040BC44                 dd offset loc_40BD65
.text:0040BC6C ; ---------------------------------------------------------------------------
.text:0040BC6C
.text:0040BC6C loc_40BC6C:                             ; CODE XREF: sub_40BBD0+6D↑j
.text:0040BC6C                                         ; DATA XREF: sub_40BBD0:jpt_40BC3D↑o
.text:0040BC6C                 call    abort           ; jumptable 0040BC3D case 0
.text:0040BC71 ; ---------------------------------------------------------------------------
.text:0040BC71
.text:0040BC71 loc_40BC71:                             ; CODE XREF: sub_40BBD0+6D↑j
.text:0040BC71                                         ; DATA XREF: sub_40BBD0:jpt_40BC3D↑o
.text:0040BC71                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040BC3D case 1
.text:0040BC78                 nop
.text:0040BC79                 lea     esi, [esi+0]
.text:0040BC80
.text:0040BC80 loc_40BC80:                             ; CODE XREF: sub_40BBD0+148↓j
.text:0040BC80                                         ; sub_40BBD0+154↓j ...
.text:0040BC80                 call    ds:libintl_gettext
.text:0040BC86                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040BC8A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040BC8D                 mov     [esp+2Ch+Format], eax ; Format
.text:0040BC91                 call    vfprintf
.text:0040BC96                 mov     ebx, [esi+4]
.text:0040BC99                 dec     ebx
.text:0040BC9A                 test    ebx, ebx
.text:0040BC9C                 mov     [esi+4], ebx
.text:0040BC9F                 js      short loc_40BCFF
.text:0040BCA1                 mov     edi, [esi]
.text:0040BCA3                 mov     byte ptr [edi], 0Ah
.text:0040BCA6                 inc     dword ptr [esi]
.text:0040BCA8
.text:0040BCA8 loc_40BCA8:                             ; CODE XREF: sub_40BBD0+13F↓j
.text:0040BCA8                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040BCAC                 mov     edx, off_416040 ; "Copyright (C) 2005 Free Software Founda"...
.text:0040BCB2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:0040BCB5                 call    fputs
.text:0040BCBA                 mov     ebp, [esi+4]
.text:0040BCBD                 dec     ebp
.text:0040BCBE                 test    ebp, ebp
.text:0040BCC0                 mov     [esi+4], ebp
.text:0040BCC3                 js      short loc_40BCED
.text:0040BCC5                 mov     ecx, [esi]
.text:0040BCC7                 mov     byte ptr [ecx], 0Ah
.text:0040BCCA                 inc     dword ptr [esi]
.text:0040BCCC
.text:0040BCCC loc_40BCCC:                             ; CODE XREF: sub_40BBD0+12D↓j
.text:0040BCCC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:0040BCD0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:0040BCD7                 call    ds:libintl_gettext
.text:0040BCDD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:0040BCE1                 add     esp, 1Ch
.text:0040BCE4                 pop     ebx
.text:0040BCE5                 pop     esi
.text:0040BCE6                 pop     edi
.text:0040BCE7                 pop     ebp
.text:0040BCE8                 jmp     fputs
.text:0040BCED ; ---------------------------------------------------------------------------
.text:0040BCED
.text:0040BCED loc_40BCED:                             ; CODE XREF: sub_40BBD0+F3↑j
.text:0040BCED                 mov     [esp+2Ch+Format], esi ; File
.text:0040BCF1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040BCF8                 call    _flsbuf
.text:0040BCFD                 jmp     short loc_40BCCC
.text:0040BCFF ; ---------------------------------------------------------------------------
.text:0040BCFF
.text:0040BCFF loc_40BCFF:                             ; CODE XREF: sub_40BBD0+CF↑j
.text:0040BCFF                 mov     [esp+2Ch+Format], esi ; File
.text:0040BD03                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040BD0A                 call    _flsbuf
.text:0040BD0F                 jmp     short loc_40BCA8
.text:0040BD11 ; ---------------------------------------------------------------------------
.text:0040BD11
.text:0040BD11 loc_40BD11:                             ; CODE XREF: sub_40BBD0+6D↑j
.text:0040BD11                                         ; DATA XREF: sub_40BBD0:jpt_40BC3D↑o
.text:0040BD11                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040BC3D case 2
.text:0040BD18                 jmp     loc_40BC80
.text:0040BD1D ; ---------------------------------------------------------------------------
.text:0040BD1D
.text:0040BD1D loc_40BD1D:                             ; CODE XREF: sub_40BBD0+6D↑j
.text:0040BD1D                                         ; DATA XREF: sub_40BBD0:jpt_40BC3D↑o
.text:0040BD1D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040BC3D case 3
.text:0040BD24                 jmp     loc_40BC80
.text:0040BD29 ; ---------------------------------------------------------------------------
.text:0040BD29
.text:0040BD29 loc_40BD29:                             ; CODE XREF: sub_40BBD0+6D↑j
.text:0040BD29                                         ; DATA XREF: sub_40BBD0:jpt_40BC3D↑o
.text:0040BD29                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040BC3D case 4
.text:0040BD30                 jmp     loc_40BC80
.text:0040BD35 ; ---------------------------------------------------------------------------
.text:0040BD35
.text:0040BD35 loc_40BD35:                             ; CODE XREF: sub_40BBD0+6D↑j
.text:0040BD35                                         ; DATA XREF: sub_40BBD0:jpt_40BC3D↑o
.text:0040BD35                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040BC3D case 5
.text:0040BD3C                 jmp     loc_40BC80
.text:0040BD41 ; ---------------------------------------------------------------------------
.text:0040BD41
.text:0040BD41 loc_40BD41:                             ; CODE XREF: sub_40BBD0+6D↑j
.text:0040BD41                                         ; DATA XREF: sub_40BBD0:jpt_40BC3D↑o
.text:0040BD41                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040BC3D case 6
.text:0040BD48                 jmp     loc_40BC80
.text:0040BD4D ; ---------------------------------------------------------------------------
.text:0040BD4D
.text:0040BD4D loc_40BD4D:                             ; CODE XREF: sub_40BBD0+6D↑j
.text:0040BD4D                                         ; DATA XREF: sub_40BBD0:jpt_40BC3D↑o
.text:0040BD4D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040BC3D case 7
.text:0040BD54                 jmp     loc_40BC80
.text:0040BD59 ; ---------------------------------------------------------------------------
.text:0040BD59
.text:0040BD59 loc_40BD59:                             ; CODE XREF: sub_40BBD0+6D↑j
.text:0040BD59                                         ; DATA XREF: sub_40BBD0:jpt_40BC3D↑o
.text:0040BD59                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040BC3D case 8
.text:0040BD60                 jmp     loc_40BC80
.text:0040BD65 ; ---------------------------------------------------------------------------
.text:0040BD65
.text:0040BD65 loc_40BD65:                             ; CODE XREF: sub_40BBD0+6D↑j
.text:0040BD65                                         ; DATA XREF: sub_40BBD0:jpt_40BC3D↑o
.text:0040BD65                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040BC3D case 9
.text:0040BD6C                 jmp     loc_40BC80
.text:0040BD71 ; ---------------------------------------------------------------------------
.text:0040BD71
.text:0040BD71 def_40BC3D:                             ; CODE XREF: sub_40BBD0+67↑j
.text:0040BD71                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040BC3D default case
.text:0040BD78                 jmp     loc_40BC80
.text:0040BD7D ; ---------------------------------------------------------------------------
.text:0040BD7D
.text:0040BD7D loc_40BD7D:                             ; CODE XREF: sub_40BBD0+3E↑j
.text:0040BD7D                 mov     [esp+2Ch+var_20], ebp
.text:0040BD81                 mov     ecx, [esp+2Ch+var_14]
.text:0040BD85                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040BD8D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040BD90                 mov     [esp+2Ch+ArgList], ecx
.text:0040BD94                 call    fprintf
.text:0040BD99                 jmp     loc_40BC34
.text:0040BD99 sub_40BBD0      endp
.text:0040BD99
.text:0040BD99 ; ---------------------------------------------------------------------------
.text:0040BD9E                 align 10h
.text:0040BDA0
.text:0040BDA0 ; =============== S U B R O U T I N E =======================================
.text:0040BDA0
.text:0040BDA0
.text:0040BDA0 ; int __cdecl sub_40BDA0(FILE *, FILE *, int, int, char)
.text:0040BDA0 sub_40BDA0      proc near               ; CODE XREF: sub_4016C0+29D↑p
.text:0040BDA0
.text:0040BDA0 var_1C          = dword ptr -1Ch
.text:0040BDA0 var_18          = dword ptr -18h
.text:0040BDA0 var_14          = dword ptr -14h
.text:0040BDA0 var_10          = dword ptr -10h
.text:0040BDA0 var_C           = dword ptr -0Ch
.text:0040BDA0 arg_0           = dword ptr  4
.text:0040BDA0 arg_4           = dword ptr  8
.text:0040BDA0 arg_8           = dword ptr  0Ch
.text:0040BDA0 arg_C           = dword ptr  10h
.text:0040BDA0 arg_10          = byte ptr  14h
.text:0040BDA0
.text:0040BDA0                 sub     esp, 1Ch
.text:0040BDA3                 mov     edx, [esp+1Ch+arg_C]
.text:0040BDA7                 lea     ecx, [esp+1Ch+arg_10]
.text:0040BDAB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040BDAF                 mov     ecx, [esp+1Ch+arg_8]
.text:0040BDB3                 mov     [esp+1Ch+var_10], edx ; int
.text:0040BDB7                 mov     edx, [esp+1Ch+arg_4]
.text:0040BDBB                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040BDBF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:0040BDC3                 mov     edx, [esp+1Ch+arg_0]
.text:0040BDC7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040BDCA                 call    sub_40BBD0
.text:0040BDCF                 add     esp, 1Ch
.text:0040BDD2                 retn
.text:0040BDD2 sub_40BDA0      endp
.text:0040BDD2
.text:0040BDD2 ; ---------------------------------------------------------------------------
.text:0040BDD3                 align 10h
.text:0040BDE0
.text:0040BDE0 ; =============== S U B R O U T I N E =======================================
.text:0040BDE0
.text:0040BDE0
.text:0040BDE0 sub_40BDE0      proc near               ; CODE XREF: sub_4016C0+AF↑p
.text:0040BDE0
.text:0040BDE0 var_1C          = dword ptr -1Ch
.text:0040BDE0 var_18          = dword ptr -18h
.text:0040BDE0 var_14          = dword ptr -14h
.text:0040BDE0 var_10          = dword ptr -10h
.text:0040BDE0 var_C           = dword ptr -0Ch
.text:0040BDE0 var_8           = dword ptr -8
.text:0040BDE0 var_4           = dword ptr -4
.text:0040BDE0 arg_0           = dword ptr  4
.text:0040BDE0 arg_4           = dword ptr  8
.text:0040BDE0 arg_8           = dword ptr  0Ch
.text:0040BDE0 arg_C           = dword ptr  10h
.text:0040BDE0 arg_10          = dword ptr  14h
.text:0040BDE0
.text:0040BDE0                 sub     esp, 1Ch
.text:0040BDE3                 mov     edx, [esp+1Ch+arg_C]
.text:0040BDE7                 mov     [esp+1Ch+var_4], 0
.text:0040BDEF                 mov     ecx, [esp+1Ch+arg_10]
.text:0040BDF3                 mov     [esp+1Ch+var_8], 0
.text:0040BDFB                 mov     [esp+1Ch+var_10], edx
.text:0040BDFF                 mov     edx, [esp+1Ch+arg_4]
.text:0040BE03                 mov     [esp+1Ch+var_C], ecx
.text:0040BE07                 mov     ecx, [esp+1Ch+arg_8]
.text:0040BE0B                 mov     [esp+1Ch+var_18], edx
.text:0040BE0F                 mov     edx, [esp+1Ch+arg_0]
.text:0040BE13                 mov     [esp+1Ch+var_14], ecx
.text:0040BE17                 mov     [esp+1Ch+var_1C], edx
.text:0040BE1A                 call    sub_40B6A0
.text:0040BE1F                 add     esp, 1Ch
.text:0040BE22                 retn
.text:0040BE22 sub_40BDE0      endp
.text:0040BE22
.text:0040BE22 ; ---------------------------------------------------------------------------
.text:0040BE23                 align 10h
.text:0040BE30                 sub     esp, 2Ch
.text:0040BE33                 mov     edx, [esp+44h]
.text:0040BE37                 mov     dword ptr [esp+18h], 0
.text:0040BE3F                 mov     ecx, [esp+40h]
.text:0040BE43                 mov     dword ptr [esp+14h], 0
.text:0040BE4B                 mov     [esp+1Ch], edx
.text:0040BE4F                 mov     edx, [esp+3Ch]
.text:0040BE53                 mov     [esp+10h], ecx
.text:0040BE57                 mov     ecx, [esp+38h]
.text:0040BE5B                 mov     [esp+0Ch], edx
.text:0040BE5F                 mov     edx, [esp+34h]
.text:0040BE63                 mov     [esp+8], ecx
.text:0040BE67                 mov     [esp+4], edx
.text:0040BE6B                 mov     edx, [esp+30h]
.text:0040BE6F                 mov     [esp], edx
.text:0040BE72                 call    loc_40AB10
.text:0040BE77                 add     esp, 2Ch
.text:0040BE7A                 retn
.text:0040BE7A ; ---------------------------------------------------------------------------
.text:0040BE7B                 align 10h
.text:0040BE80                 sub     esp, 1Ch
.text:0040BE83                 mov     edx, [esp+2Ch]
.text:0040BE87                 mov     dword ptr [esp+18h], 0
.text:0040BE8F                 mov     ecx, [esp+30h]
.text:0040BE93                 mov     dword ptr [esp+14h], 1
.text:0040BE9B                 mov     [esp+0Ch], edx
.text:0040BE9F                 mov     edx, [esp+24h]
.text:0040BEA3                 mov     [esp+10h], ecx
.text:0040BEA7                 mov     ecx, [esp+28h]
.text:0040BEAB                 mov     [esp+4], edx
.text:0040BEAF                 mov     edx, [esp+20h]
.text:0040BEB3                 mov     [esp+8], ecx
.text:0040BEB7                 mov     [esp], edx
.text:0040BEBA                 call    sub_40B6A0
.text:0040BEBF                 add     esp, 1Ch
.text:0040BEC2                 retn
.text:0040BEC2 ; ---------------------------------------------------------------------------
.text:0040BEC3                 align 10h
.text:0040BED0                 sub     esp, 2Ch
.text:0040BED3                 mov     edx, [esp+44h]
.text:0040BED7                 mov     dword ptr [esp+18h], 0
.text:0040BEDF                 mov     ecx, [esp+40h]
.text:0040BEE3                 mov     dword ptr [esp+14h], 1
.text:0040BEEB                 mov     [esp+1Ch], edx
.text:0040BEEF                 mov     edx, [esp+3Ch]
.text:0040BEF3                 mov     [esp+10h], ecx
.text:0040BEF7                 mov     ecx, [esp+38h]
.text:0040BEFB                 mov     [esp+0Ch], edx
.text:0040BEFF                 mov     edx, [esp+34h]
.text:0040BF03                 mov     [esp+8], ecx
.text:0040BF07                 mov     [esp+4], edx
.text:0040BF0B                 mov     edx, [esp+30h]
.text:0040BF0F                 mov     [esp], edx
.text:0040BF12                 call    loc_40AB10
.text:0040BF17                 add     esp, 2Ch
.text:0040BF1A                 retn
.text:0040BF1A ; ---------------------------------------------------------------------------
.text:0040BF1B                 align 10h
.text:0040BF20                 mov     edx, [esp+4]
.text:0040BF24                 mov     ds:dword_419370, edx
.text:0040BF2A                 retn
.text:0040BF2A ; ---------------------------------------------------------------------------
.text:0040BF2B aWriteError     db 'write error',0      ; DATA XREF: sub_40BF50:loc_40BF99↓o
.text:0040BF37 ; const char aSS_0[]
.text:0040BF37 aSS_0           db '%s: %s',0           ; DATA XREF: sub_40BF50+77↓o
.text:0040BF3E ; const char aS_3[]
.text:0040BF3E aS_3            db '%s',0               ; DATA XREF: sub_40BF50+A0↓o
.text:0040BF41 ; ---------------------------------------------------------------------------
.text:0040BF41                 jmp     short sub_40BF50
.text:0040BF41 ; ---------------------------------------------------------------------------
.text:0040BF43                 align 10h
.text:0040BF50
.text:0040BF50 ; =============== S U B R O U T I N E =======================================
.text:0040BF50
.text:0040BF50
.text:0040BF50 ; void __cdecl sub_40BF50()
.text:0040BF50 sub_40BF50      proc near               ; CODE XREF: .text:0040BF41↑j
.text:0040BF50                                         ; DATA XREF: sub_4016C0+5B↑o
.text:0040BF50
.text:0040BF50 Stream          = dword ptr -2Ch
.text:0040BF50 ErrorMessage    = dword ptr -28h
.text:0040BF50 var_24          = dword ptr -24h
.text:0040BF50 var_20          = byte ptr -20h
.text:0040BF50 var_1C          = dword ptr -1Ch
.text:0040BF50 var_9           = byte ptr -9
.text:0040BF50
.text:0040BF50                 push    esi
.text:0040BF51                 push    ebx
.text:0040BF52                 sub     esp, 24h
.text:0040BF55                 mov     edx, ds:_iob
.text:0040BF5B                 mov     ecx, [edx+2Ch]
.text:0040BF5E                 lea     esi, [edx+20h]
.text:0040BF61                 shr     ecx, 5
.text:0040BF64                 mov     bl, cl
.text:0040BF66                 mov     ecx, [edx+20h]
.text:0040BF69                 and     bl, 1
.text:0040BF6C                 cmp     ecx, [esi+8]
.text:0040BF6F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040BF72                 setz    [esp+2Ch+var_9]
.text:0040BF77                 call    fclose
.text:0040BF7C                 test    eax, eax
.text:0040BF7E                 setnz   al
.text:0040BF81                 test    bl, bl
.text:0040BF83                 jnz     loc_40C013
.text:0040BF89                 test    al, al
.text:0040BF8B                 jz      short loc_40BFE0
.text:0040BF8D
.text:0040BF8D loc_40BF8D:                             ; CODE XREF: sub_40BF50+CD↓j
.text:0040BF8D                 call    _errno
.text:0040BF92                 mov     esi, [eax]
.text:0040BF94
.text:0040BF94 loc_40BF94:                             ; CODE XREF: sub_40BF50+C7↓j
.text:0040BF94                 cmp     esi, 9
.text:0040BF97                 jz      short loc_40C006
.text:0040BF99
.text:0040BF99 loc_40BF99:                             ; CODE XREF: sub_40BF50+B8↓j
.text:0040BF99                                         ; sub_40BF50+C1↓j
.text:0040BF99                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:0040BFA0                 call    ds:libintl_gettext
.text:0040BFA6                 mov     ebx, eax
.text:0040BFA8                 mov     eax, ds:dword_419370
.text:0040BFAD                 test    eax, eax
.text:0040BFAF                 jz      short loc_40BFE6
.text:0040BFB1                 mov     [esp+2Ch+Stream], eax ; char *
.text:0040BFB4                 call    sub_403A30
.text:0040BFB9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040BFBD                 mov     edx, Code
.text:0040BFC3                 mov     [esp+2Ch+var_1C], ebx
.text:0040BFC7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040BFCF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040BFD3                 mov     [esp+2Ch+Stream], edx ; Code
.text:0040BFD6                 call    sub_40C480
.text:0040BFDB                 nop
.text:0040BFDC                 lea     esi, [esi+0]
.text:0040BFE0
.text:0040BFE0 loc_40BFE0:                             ; CODE XREF: sub_40BF50+3B↑j
.text:0040BFE0                                         ; sub_40BF50+B4↓j ...
.text:0040BFE0                 add     esp, 24h
.text:0040BFE3                 pop     ebx
.text:0040BFE4                 pop     esi
.text:0040BFE5                 retn
.text:0040BFE6 ; ---------------------------------------------------------------------------
.text:0040BFE6
.text:0040BFE6 loc_40BFE6:                             ; CODE XREF: sub_40BF50+5F↑j
.text:0040BFE6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040BFEA                 mov     ebx, Code
.text:0040BFF0                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:0040BFF8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040BFFC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040BFFF                 call    sub_40C480
.text:0040C004                 jmp     short loc_40BFE0
.text:0040C006 ; ---------------------------------------------------------------------------
.text:0040C006
.text:0040C006 loc_40C006:                             ; CODE XREF: sub_40BF50+47↑j
.text:0040C006                 test    bl, bl
.text:0040C008                 jnz     short loc_40BF99
.text:0040C00A                 cmp     [esp+2Ch+var_9], 0
.text:0040C00F                 jnz     short loc_40BFE0
.text:0040C011                 jmp     short loc_40BF99
.text:0040C013 ; ---------------------------------------------------------------------------
.text:0040C013
.text:0040C013 loc_40C013:                             ; CODE XREF: sub_40BF50+33↑j
.text:0040C013                 xor     esi, esi
.text:0040C015                 test    al, al
.text:0040C017                 jz      loc_40BF94
.text:0040C01D                 jmp     loc_40BF8D
.text:0040C01D sub_40BF50      endp
.text:0040C01D
.text:0040C01D ; ---------------------------------------------------------------------------
.text:0040C022                 align 10h
.text:0040C030                 sub     esp, 0Ch
.text:0040C033                 mov     edx, [esp+14h]
.text:0040C037                 mov     dword ptr [esp+4], 5
.text:0040C03F                 mov     [esp+8], edx
.text:0040C043                 mov     edx, [esp+10h]
.text:0040C047                 mov     [esp], edx
.text:0040C04A                 call    sub_4036C0
.text:0040C04F                 add     esp, 0Ch
.text:0040C052                 retn
.text:0040C052 ; ---------------------------------------------------------------------------
.text:0040C053                 align 10h
.text:0040C060
.text:0040C060 ; =============== S U B R O U T I N E =======================================
.text:0040C060
.text:0040C060
.text:0040C060 ; int __cdecl sub_40C060(char *)
.text:0040C060 sub_40C060      proc near               ; CODE XREF: sub_401CF0+17D↑p
.text:0040C060                                         ; sub_402680+163↑p ...
.text:0040C060
.text:0040C060 var_C           = dword ptr -0Ch
.text:0040C060 var_8           = dword ptr -8
.text:0040C060 var_4           = dword ptr -4
.text:0040C060 arg_0           = dword ptr  4
.text:0040C060
.text:0040C060                 sub     esp, 0Ch
.text:0040C063                 mov     edx, [esp+0Ch+arg_0]
.text:0040C067                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040C06F                 mov     [esp+0Ch+var_C], 0 ; int
.text:0040C076                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040C07A                 call    sub_4036C0
.text:0040C07F                 add     esp, 0Ch
.text:0040C082                 retn
.text:0040C082 sub_40C060      endp
.text:0040C082
.text:0040C082 ; ---------------------------------------------------------------------------
.text:0040C083                 align 10h
.text:0040C090                 sub     esp, 0Ch
.text:0040C093                 xor     edx, edx
.text:0040C095                 mov     ecx, [esp+14h]
.text:0040C099                 mov     [esp+8], ebx
.text:0040C09D                 mov     eax, 0FFFFFFFFh
.text:0040C0A2                 mov     ebx, [esp+10h]
.text:0040C0A6                 div     ecx
.text:0040C0A8                 cmp     eax, ebx
.text:0040C0AA                 jb      short loc_40C0C9
.text:0040C0AC                 mov     edx, ebx
.text:0040C0AE                 imul    edx, ecx
.text:0040C0B1                 mov     [esp], edx
.text:0040C0B4                 call    malloc
.text:0040C0B9                 test    eax, eax
.text:0040C0BB                 jz      short loc_40C0C5
.text:0040C0BD
.text:0040C0BD loc_40C0BD:                             ; CODE XREF: .text:0040C0C7↓j
.text:0040C0BD                 mov     ebx, [esp+8]
.text:0040C0C1                 add     esp, 0Ch
.text:0040C0C4                 retn
.text:0040C0C5 ; ---------------------------------------------------------------------------
.text:0040C0C5
.text:0040C0C5 loc_40C0C5:                             ; CODE XREF: .text:0040C0BB↑j
.text:0040C0C5                 test    ebx, ebx
.text:0040C0C7                 jz      short loc_40C0BD
.text:0040C0C9
.text:0040C0C9 loc_40C0C9:                             ; CODE XREF: .text:0040C0AA↑j
.text:0040C0C9                 call    sub_40C380
.text:0040C0C9 ; ---------------------------------------------------------------------------
.text:0040C0CE                 align 10h
.text:0040C0D0
.text:0040C0D0 ; =============== S U B R O U T I N E =======================================
.text:0040C0D0
.text:0040C0D0
.text:0040C0D0 ; int __cdecl sub_40C0D0(size_t)
.text:0040C0D0 sub_40C0D0      proc near               ; CODE XREF: sub_4016C0+2D0↑p
.text:0040C0D0                                         ; sub_4016C0+2E1↑p ...
.text:0040C0D0
.text:0040C0D0 Size            = dword ptr -0Ch
.text:0040C0D0 var_4           = dword ptr -4
.text:0040C0D0 arg_0           = dword ptr  4
.text:0040C0D0
.text:0040C0D0                 sub     esp, 0Ch
.text:0040C0D3                 mov     [esp+0Ch+var_4], ebx
.text:0040C0D7                 mov     ebx, [esp+0Ch+arg_0]
.text:0040C0DB                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040C0DE                 call    malloc
.text:0040C0E3                 test    eax, eax
.text:0040C0E5                 jz      short loc_40C0F0
.text:0040C0E7
.text:0040C0E7 loc_40C0E7:                             ; CODE XREF: sub_40C0D0+22↓j
.text:0040C0E7                 mov     ebx, [esp+0Ch+var_4]
.text:0040C0EB                 add     esp, 0Ch
.text:0040C0EE                 retn
.text:0040C0EE ; ---------------------------------------------------------------------------
.text:0040C0EF                 align 10h
.text:0040C0F0
.text:0040C0F0 loc_40C0F0:                             ; CODE XREF: sub_40C0D0+15↑j
.text:0040C0F0                 test    ebx, ebx
.text:0040C0F2                 jz      short loc_40C0E7
.text:0040C0F4                 call    sub_40C380
.text:0040C0F4 sub_40C0D0      endp
.text:0040C0F4
.text:0040C0F4 ; ---------------------------------------------------------------------------
.text:0040C0F9                 align 10h
.text:0040C100                 sub     esp, 1Ch
.text:0040C103                 xor     edx, edx
.text:0040C105                 mov     eax, 0FFFFFFFFh
.text:0040C10A                 mov     [esp+14h], ebx
.text:0040C10E                 mov     ecx, [esp+20h]
.text:0040C112                 mov     ebx, [esp+28h]
.text:0040C116                 mov     [esp+18h], esi
.text:0040C11A                 mov     esi, [esp+24h]
.text:0040C11E                 div     ebx
.text:0040C120                 cmp     eax, esi
.text:0040C122                 jb      short loc_40C154
.text:0040C124                 mov     [esp], ecx
.text:0040C127                 mov     edx, esi
.text:0040C129                 imul    edx, ebx
.text:0040C12C                 mov     [esp+4], edx
.text:0040C130                 call    realloc
.text:0040C135                 test    eax, eax
.text:0040C137                 mov     ecx, eax
.text:0040C139                 jz      short loc_40C150
.text:0040C13B
.text:0040C13B loc_40C13B:                             ; CODE XREF: .text:0040C152↓j
.text:0040C13B                 mov     ebx, [esp+14h]
.text:0040C13F                 mov     eax, ecx
.text:0040C141                 mov     esi, [esp+18h]
.text:0040C145                 add     esp, 1Ch
.text:0040C148                 retn
.text:0040C148 ; ---------------------------------------------------------------------------
.text:0040C149                 align 10h
.text:0040C150
.text:0040C150 loc_40C150:                             ; CODE XREF: .text:0040C139↑j
.text:0040C150                 test    esi, esi
.text:0040C152                 jz      short loc_40C13B
.text:0040C154
.text:0040C154 loc_40C154:                             ; CODE XREF: .text:0040C122↑j
.text:0040C154                 call    sub_40C380
.text:0040C154 ; ---------------------------------------------------------------------------
.text:0040C159                 align 10h
.text:0040C160
.text:0040C160 ; =============== S U B R O U T I N E =======================================
.text:0040C160
.text:0040C160
.text:0040C160 ; int __cdecl sub_40C160(void *, size_t)
.text:0040C160 sub_40C160      proc near               ; CODE XREF: sub_401F00+304↑p
.text:0040C160                                         ; sub_403AD0+5B↑p
.text:0040C160
.text:0040C160 Block           = dword ptr -0Ch
.text:0040C160 Size            = dword ptr -8
.text:0040C160 var_4           = dword ptr -4
.text:0040C160 arg_0           = dword ptr  4
.text:0040C160 arg_4           = dword ptr  8
.text:0040C160
.text:0040C160                 sub     esp, 0Ch
.text:0040C163                 mov     edx, [esp+0Ch+arg_0]
.text:0040C167                 mov     [esp+0Ch+var_4], ebx
.text:0040C16B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040C16F                 mov     [esp+0Ch+Block], edx ; Block
.text:0040C172                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040C176                 call    realloc
.text:0040C17B                 test    eax, eax
.text:0040C17D                 jz      short loc_40C187
.text:0040C17F
.text:0040C17F loc_40C17F:                             ; CODE XREF: sub_40C160+29↓j
.text:0040C17F                 mov     ebx, [esp+0Ch+var_4]
.text:0040C183                 add     esp, 0Ch
.text:0040C186                 retn
.text:0040C187 ; ---------------------------------------------------------------------------
.text:0040C187
.text:0040C187 loc_40C187:                             ; CODE XREF: sub_40C160+1D↑j
.text:0040C187                 test    ebx, ebx
.text:0040C189                 jz      short loc_40C17F
.text:0040C18B                 call    sub_40C380
.text:0040C18B sub_40C160      endp
.text:0040C18B
.text:0040C190 ; ---------------------------------------------------------------------------
.text:0040C190                 jmp     sub_40C2E0
.text:0040C190 ; ---------------------------------------------------------------------------
.text:0040C195                 align 10h
.text:0040C1A0                 sub     esp, 0Ch
.text:0040C1A3                 mov     edx, [esp+14h]
.text:0040C1A7                 mov     dword ptr [esp+8], 1
.text:0040C1AF                 mov     [esp+4], edx
.text:0040C1B3                 mov     edx, [esp+10h]
.text:0040C1B7                 mov     [esp], edx
.text:0040C1BA                 call    sub_40C2E0
.text:0040C1BF                 add     esp, 0Ch
.text:0040C1C2                 retn
.text:0040C1C2 ; ---------------------------------------------------------------------------
.text:0040C1C3                 align 10h
.text:0040C1D0                 sub     esp, 1Ch
.text:0040C1D3                 mov     [esp+18h], ebx
.text:0040C1D7                 mov     ebx, [esp+20h]
.text:0040C1DB                 mov     [esp], ebx
.text:0040C1DE                 call    malloc
.text:0040C1E3                 test    eax, eax
.text:0040C1E5                 jz      short loc_40C203
.text:0040C1E7
.text:0040C1E7 loc_40C1E7:                             ; CODE XREF: .text:0040C205↓j
.text:0040C1E7                 mov     [esp+8], ebx
.text:0040C1EB                 mov     dword ptr [esp+4], 0
.text:0040C1F3                 mov     [esp], eax
.text:0040C1F6                 call    memset
.text:0040C1FB                 mov     ebx, [esp+18h]
.text:0040C1FF                 add     esp, 1Ch
.text:0040C202                 retn
.text:0040C203 ; ---------------------------------------------------------------------------
.text:0040C203
.text:0040C203 loc_40C203:                             ; CODE XREF: .text:0040C1E5↑j
.text:0040C203                 test    ebx, ebx
.text:0040C205                 jz      short loc_40C1E7
.text:0040C207                 call    sub_40C380
.text:0040C207 ; ---------------------------------------------------------------------------
.text:0040C20C                 align 10h
.text:0040C210                 sub     esp, 0Ch
.text:0040C213                 xor     edx, edx
.text:0040C215                 mov     ecx, [esp+14h]
.text:0040C219                 mov     [esp+8], ebx
.text:0040C21D                 mov     eax, 0FFFFFFFFh
.text:0040C222                 mov     ebx, [esp+10h]
.text:0040C226                 div     ecx
.text:0040C228                 cmp     eax, ebx
.text:0040C22A                 jb      short loc_40C248
.text:0040C22C                 mov     [esp+4], ecx
.text:0040C230                 mov     [esp], ebx
.text:0040C233                 call    calloc
.text:0040C238                 test    eax, eax
.text:0040C23A                 jz      short loc_40C244
.text:0040C23C
.text:0040C23C loc_40C23C:                             ; CODE XREF: .text:0040C246↓j
.text:0040C23C                 mov     ebx, [esp+8]
.text:0040C240                 add     esp, 0Ch
.text:0040C243                 retn
.text:0040C244 ; ---------------------------------------------------------------------------
.text:0040C244
.text:0040C244 loc_40C244:                             ; CODE XREF: .text:0040C23A↑j
.text:0040C244                 test    ebx, ebx
.text:0040C246                 jz      short loc_40C23C
.text:0040C248
.text:0040C248 loc_40C248:                             ; CODE XREF: .text:0040C22A↑j
.text:0040C248                 call    sub_40C380
.text:0040C248 ; ---------------------------------------------------------------------------
.text:0040C24D                 align 10h
.text:0040C250                 sub     esp, 1Ch
.text:0040C253                 mov     [esp+18h], ebx
.text:0040C257                 mov     ebx, [esp+24h]
.text:0040C25B                 mov     [esp], ebx
.text:0040C25E                 call    malloc
.text:0040C263                 test    eax, eax
.text:0040C265                 mov     edx, eax
.text:0040C267                 jz      short loc_40C285
.text:0040C269
.text:0040C269 loc_40C269:                             ; CODE XREF: .text:0040C287↓j
.text:0040C269                 mov     [esp+8], ebx
.text:0040C26D                 mov     ecx, [esp+20h]
.text:0040C271                 mov     [esp], edx
.text:0040C274                 mov     [esp+4], ecx
.text:0040C278                 call    memcpy
.text:0040C27D                 mov     ebx, [esp+18h]
.text:0040C281                 add     esp, 1Ch
.text:0040C284                 retn
.text:0040C285 ; ---------------------------------------------------------------------------
.text:0040C285
.text:0040C285 loc_40C285:                             ; CODE XREF: .text:0040C267↑j
.text:0040C285                 test    ebx, ebx
.text:0040C287                 jz      short loc_40C269
.text:0040C289                 call    sub_40C380
.text:0040C289 ; ---------------------------------------------------------------------------
.text:0040C28E                 align 10h
.text:0040C290                 sub     esp, 1Ch
.text:0040C293                 mov     [esp+18h], esi
.text:0040C297                 mov     esi, [esp+20h]
.text:0040C29B                 mov     [esp+14h], ebx
.text:0040C29F                 mov     [esp], esi
.text:0040C2A2                 call    strlen
.text:0040C2A7                 lea     ebx, [eax+1]
.text:0040C2AA                 mov     [esp], ebx
.text:0040C2AD                 call    malloc
.text:0040C2B2                 test    eax, eax
.text:0040C2B4                 jz      short loc_40C2D2
.text:0040C2B6
.text:0040C2B6 loc_40C2B6:                             ; CODE XREF: .text:0040C2D4↓j
.text:0040C2B6                 mov     [esp+8], ebx
.text:0040C2BA                 mov     [esp+4], esi
.text:0040C2BE                 mov     [esp], eax
.text:0040C2C1                 call    memcpy
.text:0040C2C6                 mov     ebx, [esp+14h]
.text:0040C2CA                 mov     esi, [esp+18h]
.text:0040C2CE                 add     esp, 1Ch
.text:0040C2D1                 retn
.text:0040C2D2 ; ---------------------------------------------------------------------------
.text:0040C2D2
.text:0040C2D2 loc_40C2D2:                             ; CODE XREF: .text:0040C2B4↑j
.text:0040C2D2                 test    ebx, ebx
.text:0040C2D4                 jz      short loc_40C2B6
.text:0040C2D6                 call    sub_40C380
.text:0040C2D6 ; ---------------------------------------------------------------------------
.text:0040C2DB                 align 10h
.text:0040C2E0
.text:0040C2E0 ; =============== S U B R O U T I N E =======================================
.text:0040C2E0
.text:0040C2E0
.text:0040C2E0 ; int __cdecl sub_40C2E0(void *, int, int)
.text:0040C2E0 sub_40C2E0      proc near               ; CODE XREF: .text:0040C190↑j
.text:0040C2E0                                         ; .text:0040C1BA↑p
.text:0040C2E0
.text:0040C2E0 Block           = dword ptr -1Ch
.text:0040C2E0 Size            = dword ptr -18h
.text:0040C2E0 var_C           = dword ptr -0Ch
.text:0040C2E0 var_8           = dword ptr -8
.text:0040C2E0 var_4           = dword ptr -4
.text:0040C2E0 arg_0           = dword ptr  4
.text:0040C2E0 arg_4           = dword ptr  8
.text:0040C2E0 arg_8           = dword ptr  0Ch
.text:0040C2E0
.text:0040C2E0                 sub     esp, 1Ch
.text:0040C2E3                 mov     [esp+1Ch+var_8], esi
.text:0040C2E7                 mov     esi, [esp+1Ch+arg_0]
.text:0040C2EB                 mov     [esp+1Ch+var_4], edi
.text:0040C2EF                 mov     edi, [esp+1Ch+arg_4]
.text:0040C2F3                 test    esi, esi
.text:0040C2F5                 mov     [esp+1Ch+var_C], ebx
.text:0040C2F9                 mov     ecx, [edi]
.text:0040C2FB                 mov     ebx, [esp+1Ch+arg_8]
.text:0040C2FF                 jz      short loc_40C340
.text:0040C301                 xor     edx, edx
.text:0040C303                 mov     eax, 7FFFFFFFh
.text:0040C308                 div     ebx
.text:0040C30A                 cmp     eax, ecx
.text:0040C30C                 jb      short loc_40C339
.text:0040C30E                 add     ecx, ecx
.text:0040C310
.text:0040C310 loc_40C310:                             ; CODE XREF: sub_40C2E0+62↓j
.text:0040C310                                         ; sub_40C2E0+71↓j ...
.text:0040C310                 mov     [edi], ecx
.text:0040C312                 imul    ebx, ecx
.text:0040C315                 mov     [esp+1Ch+Block], esi ; Block
.text:0040C318                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040C31C                 call    realloc
.text:0040C321                 test    eax, eax
.text:0040C323                 jz      short loc_40C335
.text:0040C325
.text:0040C325 loc_40C325:                             ; CODE XREF: sub_40C2E0+57↓j
.text:0040C325                 mov     ebx, [esp+1Ch+var_C]
.text:0040C329                 mov     esi, [esp+1Ch+var_8]
.text:0040C32D                 mov     edi, [esp+1Ch+var_4]
.text:0040C331                 add     esp, 1Ch
.text:0040C334                 retn
.text:0040C335 ; ---------------------------------------------------------------------------
.text:0040C335
.text:0040C335 loc_40C335:                             ; CODE XREF: sub_40C2E0+43↑j
.text:0040C335                 test    ebx, ebx
.text:0040C337                 jz      short loc_40C325
.text:0040C339
.text:0040C339 loc_40C339:                             ; CODE XREF: sub_40C2E0+2C↑j
.text:0040C339                 call    sub_40C380
.text:0040C339 ; ---------------------------------------------------------------------------
.text:0040C33E                 align 10h
.text:0040C340
.text:0040C340 loc_40C340:                             ; CODE XREF: sub_40C2E0+1F↑j
.text:0040C340                 test    ecx, ecx
.text:0040C342                 jnz     short loc_40C310
.text:0040C344                 xor     edx, edx
.text:0040C346                 mov     eax, 40h ; '@'
.text:0040C34B                 div     ebx
.text:0040C34D                 test    eax, eax
.text:0040C34F                 mov     ecx, eax
.text:0040C351                 jnz     short loc_40C310
.text:0040C353                 mov     ecx, 1
.text:0040C358                 jmp     short loc_40C310
.text:0040C358 sub_40C2E0      endp
.text:0040C358
.text:0040C358 ; ---------------------------------------------------------------------------
.text:0040C35A                 align 10h
.text:0040C360 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_40C380+3↓o
.text:0040C371 ; const char aS_0[]
.text:0040C371 aS_0            db '%s',0               ; DATA XREF: sub_40C380+10↓o
.text:0040C374                 align 10h
.text:0040C380
.text:0040C380 ; =============== S U B R O U T I N E =======================================
.text:0040C380
.text:0040C380 ; Attributes: noreturn
.text:0040C380
.text:0040C380 sub_40C380      proc near               ; CODE XREF: sub_4016C0:loc_401A50↑p
.text:0040C380                                         ; sub_401F00:loc_402607↑p ...
.text:0040C380
.text:0040C380 Code            = dword ptr -1Ch
.text:0040C380 ErrorMessage    = dword ptr -18h
.text:0040C380 var_14          = dword ptr -14h
.text:0040C380 var_10          = byte ptr -10h
.text:0040C380
.text:0040C380                 sub     esp, 1Ch
.text:0040C383                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040C38A                 call    ds:libintl_gettext
.text:0040C390                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:0040C398                 mov     edx, Code
.text:0040C39E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040C3A6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040C3AA                 mov     [esp+1Ch+Code], edx ; Code
.text:0040C3AD                 call    sub_40C480
.text:0040C3B2                 call    abort
.text:0040C3B2 sub_40C380      endp
.text:0040C3B2
.text:0040C3B2 ; ---------------------------------------------------------------------------
.text:0040C3B7                 align 10h
.text:0040C3C0
.text:0040C3C0 ; =============== S U B R O U T I N E =======================================
.text:0040C3C0
.text:0040C3C0
.text:0040C3C0 sub_40C3C0      proc near               ; CODE XREF: sub_401F00+DE↑p
.text:0040C3C0                                         ; sub_401F00+3A9↑p ...
.text:0040C3C0
.text:0040C3C0 FileHandle      = dword ptr -1Ch
.text:0040C3C0 DstBuf          = dword ptr -18h
.text:0040C3C0 MaxCharCount    = dword ptr -14h
.text:0040C3C0 arg_0           = dword ptr  4
.text:0040C3C0 arg_4           = dword ptr  8
.text:0040C3C0 arg_8           = dword ptr  0Ch
.text:0040C3C0
.text:0040C3C0                 push    ebp
.text:0040C3C1                 push    edi
.text:0040C3C2                 push    esi
.text:0040C3C3                 push    ebx
.text:0040C3C4                 sub     esp, 0Ch
.text:0040C3C7                 mov     ebp, [esp+1Ch+arg_0]
.text:0040C3CB                 mov     edi, [esp+1Ch+arg_4]
.text:0040C3CF                 mov     ebx, [esp+1Ch+arg_8]
.text:0040C3D3                 lea     esi, [esi+0]
.text:0040C3D9                 lea     edi, [edi+0]
.text:0040C3E0
.text:0040C3E0 loc_40C3E0:                             ; CODE XREF: sub_40C3C0+3E↓j
.text:0040C3E0                                         ; sub_40C3C0+57↓j
.text:0040C3E0                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:0040C3E4                 mov     [esp+1Ch+DstBuf], edi ; DstBuf
.text:0040C3E8                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:0040C3EB                 call    _read
.text:0040C3F0                 test    eax, eax
.text:0040C3F2                 mov     esi, eax
.text:0040C3F4                 jns     short loc_40C419
.text:0040C3F6                 call    _errno
.text:0040C3FB                 cmp     dword ptr [eax], 4
.text:0040C3FE                 jz      short loc_40C3E0
.text:0040C400                 call    _errno
.text:0040C405                 cmp     dword ptr [eax], 16h
.text:0040C408                 jnz     short loc_40C419
.text:0040C40A                 cmp     ebx, 7FFFE000h
.text:0040C410                 jbe     short loc_40C419
.text:0040C412                 mov     ebx, 7FFFE000h
.text:0040C417                 jmp     short loc_40C3E0
.text:0040C419 ; ---------------------------------------------------------------------------
.text:0040C419
.text:0040C419 loc_40C419:                             ; CODE XREF: sub_40C3C0+34↑j
.text:0040C419                                         ; sub_40C3C0+48↑j ...
.text:0040C419                 add     esp, 0Ch
.text:0040C41C                 mov     eax, esi
.text:0040C41E                 pop     ebx
.text:0040C41F                 pop     esi
.text:0040C420                 pop     edi
.text:0040C421                 pop     ebp
.text:0040C422                 retn
.text:0040C422 sub_40C3C0      endp
.text:0040C422
.text:0040C422 ; ---------------------------------------------------------------------------
.text:0040C423                 align 10h
.text:0040C430                 jmp     ds:libintl_bindtextdomain
.text:0040C430 ; ---------------------------------------------------------------------------
.text:0040C436                 align 10h
.text:0040C440                 jmp     ds:libintl_textdomain
.text:0040C440 ; ---------------------------------------------------------------------------
.text:0040C446                 align 10h
.text:0040C450                 jmp     ds:libintl_gettext
.text:0040C450 ; ---------------------------------------------------------------------------
.text:0040C456                 align 10h
.text:0040C460 ; const char aS_1[]
.text:0040C460 aS_1            db ': %s',0             ; DATA XREF: sub_40C480+B8↓o
.text:0040C460                                         ; sub_40C584+122↓o
.text:0040C465 aUnknownSystemE db 'Unknown system error',0
.text:0040C465                                         ; DATA XREF: sub_40C480:loc_40C54D↓o
.text:0040C465                                         ; sub_40C584:loc_40C6BE↓o
.text:0040C47A ; const char aS_2[]
.text:0040C47A aS_2            db '%s: ',0             ; DATA XREF: sub_40C480:loc_40C554↓o
.text:0040C47F                 align 10h
.text:0040C480
.text:0040C480 ; =============== S U B R O U T I N E =======================================
.text:0040C480
.text:0040C480
.text:0040C480 ; int __cdecl sub_40C480(int Code, int ErrorMessage, char *, char)
.text:0040C480 sub_40C480      proc near               ; CODE XREF: sub_4016C0+10A↑p
.text:0040C480                                         ; sub_4016C0+33A↑p ...
.text:0040C480
.text:0040C480 Stream          = dword ptr -1Ch
.text:0040C480 Format          = dword ptr -18h
.text:0040C480 ArgList         = dword ptr -14h
.text:0040C480 Code            = dword ptr  4
.text:0040C480 ErrorMessage    = dword ptr  8
.text:0040C480 arg_8           = dword ptr  0Ch
.text:0040C480 arg_C           = byte ptr  10h
.text:0040C480
.text:0040C480                 push    esi
.text:0040C481                 push    ebx
.text:0040C482                 sub     esp, 14h
.text:0040C485                 mov     edx, ds:_iob
.text:0040C48B                 mov     esi, [esp+1Ch+Code]
.text:0040C48F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:0040C493                 add     edx, 20h ; ' '
.text:0040C496                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040C499                 call    fflush
.text:0040C49E                 mov     eax, ds:dword_419700
.text:0040C4A3                 test    eax, eax
.text:0040C4A5                 jz      loc_40C554
.text:0040C4AB                 call    eax ; dword_419700
.text:0040C4AD
.text:0040C4AD loc_40C4AD:                             ; CODE XREF: sub_40C480+F7↓j
.text:0040C4AD                 lea     edx, [esp+1Ch+arg_C]
.text:0040C4B1                 mov     ecx, [esp+1Ch+arg_8]
.text:0040C4B5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:0040C4B9                 mov     edx, ds:_iob
.text:0040C4BF                 mov     [esp+1Ch+Format], ecx ; Format
.text:0040C4C3                 add     edx, 40h ; '@'
.text:0040C4C6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040C4C9                 call    vfprintf
.text:0040C4CE                 inc     ds:dword_419710
.text:0040C4D4                 test    ebx, ebx
.text:0040C4D6                 jnz     short loc_40C522
.text:0040C4D8
.text:0040C4D8 loc_40C4D8:                             ; CODE XREF: sub_40C480+CB↓j
.text:0040C4D8                 mov     edx, ds:_iob
.text:0040C4DE                 lea     ecx, [edx+40h]
.text:0040C4E1                 mov     ebx, [ecx+4]
.text:0040C4E4                 dec     ebx
.text:0040C4E5                 test    ebx, ebx
.text:0040C4E7                 mov     [ecx+4], ebx
.text:0040C4EA                 js      short loc_40C510
.text:0040C4EC                 mov     ecx, [edx+40h]
.text:0040C4EF                 mov     byte ptr [ecx], 0Ah
.text:0040C4F2                 inc     dword ptr [edx+40h]
.text:0040C4F5
.text:0040C4F5 loc_40C4F5:                             ; CODE XREF: sub_40C480+A0↓j
.text:0040C4F5                 mov     edx, ds:_iob
.text:0040C4FB                 add     edx, 40h ; '@'
.text:0040C4FE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040C501                 call    fflush
.text:0040C506                 test    esi, esi
.text:0040C508                 jnz     short loc_40C57C
.text:0040C50A                 add     esp, 14h
.text:0040C50D                 pop     ebx
.text:0040C50E                 pop     esi
.text:0040C50F                 retn
.text:0040C510 ; ---------------------------------------------------------------------------
.text:0040C510
.text:0040C510 loc_40C510:                             ; CODE XREF: sub_40C480+6A↑j
.text:0040C510                 mov     [esp+1Ch+Format], ecx ; File
.text:0040C514                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040C51B                 call    _flsbuf
.text:0040C520                 jmp     short loc_40C4F5
.text:0040C522 ; ---------------------------------------------------------------------------
.text:0040C522
.text:0040C522 loc_40C522:                             ; CODE XREF: sub_40C480+56↑j
.text:0040C522                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:0040C525                 call    strerror
.text:0040C52A                 test    eax, eax
.text:0040C52C                 jz      short loc_40C54D
.text:0040C52E
.text:0040C52E loc_40C52E:                             ; CODE XREF: sub_40C480+D2↓j
.text:0040C52E                 mov     [esp+1Ch+ArgList], eax
.text:0040C532                 mov     ebx, ds:_iob
.text:0040C538                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:0040C540                 add     ebx, 40h ; '@'
.text:0040C543                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:0040C546                 call    fprintf
.text:0040C54B                 jmp     short loc_40C4D8
.text:0040C54D ; ---------------------------------------------------------------------------
.text:0040C54D
.text:0040C54D loc_40C54D:                             ; CODE XREF: sub_40C480+AC↑j
.text:0040C54D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040C552                 jmp     short loc_40C52E
.text:0040C554 ; ---------------------------------------------------------------------------
.text:0040C554
.text:0040C554 loc_40C554:                             ; CODE XREF: sub_40C480+25↑j
.text:0040C554                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:0040C55C                 mov     edx, ds:_iob
.text:0040C562                 mov     ecx, ds:dword_4196C0
.text:0040C568                 add     edx, 40h ; '@'
.text:0040C56B                 mov     [esp+1Ch+ArgList], ecx
.text:0040C56F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040C572                 call    fprintf
.text:0040C577                 jmp     loc_40C4AD
.text:0040C57C ; ---------------------------------------------------------------------------
.text:0040C57C
.text:0040C57C loc_40C57C:                             ; CODE XREF: sub_40C480+88↑j
.text:0040C57C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040C57F                 call    exit
.text:0040C57F sub_40C480      endp
.text:0040C57F
.text:0040C584
.text:0040C584 ; =============== S U B R O U T I N E =======================================
.text:0040C584
.text:0040C584
.text:0040C584 ; int __cdecl sub_40C584(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:0040C584 sub_40C584      proc near               ; DATA XREF: sub_40C584+77↓o
.text:0040C584
.text:0040C584 Stream          = dword ptr -28h
.text:0040C584 Format          = dword ptr -24h
.text:0040C584 ArgList         = dword ptr -20h
.text:0040C584 var_1C          = dword ptr -1Ch
.text:0040C584 Code            = dword ptr  8
.text:0040C584 ErrorMessage    = dword ptr  0Ch
.text:0040C584 Str2            = dword ptr  10h
.text:0040C584 arg_10          = dword ptr  14h
.text:0040C584 arg_14          = dword ptr  18h
.text:0040C584 arg_18          = byte ptr  1Ch
.text:0040C584
.text:0040C584                 and     eax, 64253A73h
.text:0040C589                 cmp     ah, [eax]
.text:0040C58B
.text:0040C58B loc_40C58B:                             ; DATA XREF: sub_40C584:loc_40C6C5↓o
.text:0040C58B                 add     ds:55003A73h, ah
.text:0040C591                 push    edi
.text:0040C592                 push    esi
.text:0040C593                 push    ebx
.text:0040C594                 sub     esp, 1Ch
.text:0040C597                 mov     edx, ds:dword_419740
.text:0040C59D                 mov     ebp, [esp+28h+Code]
.text:0040C5A1                 mov     edi, [esp+28h+ErrorMessage]
.text:0040C5A5                 test    edx, edx
.text:0040C5A7                 mov     ebx, [esp+28h+Str2]
.text:0040C5AB                 mov     esi, [esp+28h+arg_10]
.text:0040C5AF                 jz      short loc_40C5C9
.text:0040C5B1                 cmp     ds:dword_419390, esi
.text:0040C5B7                 jz      loc_40C6F0
.text:0040C5BD
.text:0040C5BD loc_40C5BD:                             ; CODE XREF: sub_40C584+18D↓j
.text:0040C5BD                 mov     ds:Str1, ebx
.text:0040C5C3                 mov     ds:dword_419390, esi
.text:0040C5C9
.text:0040C5C9 loc_40C5C9:                             ; CODE XREF: sub_40C584+2B↑j
.text:0040C5C9                 mov     edx, ds:_iob
.text:0040C5CF                 add     edx, 20h ; ' '
.text:0040C5D2                 mov     [esp+28h+Stream], edx ; Stream
.text:0040C5D5                 call    fflush
.text:0040C5DA                 mov     eax, ds:dword_419700
.text:0040C5DF                 test    eax, eax
.text:0040C5E1                 jz      loc_40C6C5
.text:0040C5E7                 call    eax ; dword_419700
.text:0040C5E9
.text:0040C5E9 loc_40C5E9:                             ; CODE XREF: sub_40C584+164↓j
.text:0040C5E9                 test    ebx, ebx
.text:0040C5EB                 jz      short loc_40C60E
.text:0040C5ED                 mov     [esp+28h+ArgList], ebx
.text:0040C5F1                 mov     ebx, ds:_iob
.text:0040C5F7                 mov     [esp+28h+var_1C], esi
.text:0040C5FB                 mov     [esp+28h+Format], offset sub_40C584 ; Format
.text:0040C603                 add     ebx, 40h ; '@'
.text:0040C606                 mov     [esp+28h+Stream], ebx ; Stream
.text:0040C609                 call    fprintf
.text:0040C60E
.text:0040C60E loc_40C60E:                             ; CODE XREF: sub_40C584+67↑j
.text:0040C60E                 mov     esi, ds:_iob
.text:0040C614                 lea     edx, [esp+28h+arg_18]
.text:0040C618                 mov     ecx, [esp+28h+arg_14]
.text:0040C61C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:0040C620                 add     esi, 40h ; '@'
.text:0040C623                 mov     [esp+28h+Format], ecx ; Format
.text:0040C627                 mov     [esp+28h+Stream], esi ; Stream
.text:0040C62A                 call    vfprintf
.text:0040C62F                 inc     ds:dword_419710
.text:0040C635                 test    edi, edi
.text:0040C637                 jnz     short loc_40C690
.text:0040C639
.text:0040C639 loc_40C639:                             ; CODE XREF: sub_40C584+135↓j
.text:0040C639                 mov     edx, ds:_iob
.text:0040C63F                 lea     ecx, [edx+40h]
.text:0040C642                 mov     ebx, [ecx+4]
.text:0040C645                 dec     ebx
.text:0040C646                 test    ebx, ebx
.text:0040C648                 mov     [ecx+4], ebx
.text:0040C64B                 js      short loc_40C677
.text:0040C64D                 mov     esi, [edx+40h]
.text:0040C650                 mov     byte ptr [esi], 0Ah
.text:0040C653                 inc     dword ptr [edx+40h]
.text:0040C656
.text:0040C656 loc_40C656:                             ; CODE XREF: sub_40C584+103↓j
.text:0040C656                 mov     ecx, ds:_iob
.text:0040C65C                 add     ecx, 40h ; '@'
.text:0040C65F                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040C662                 call    fflush
.text:0040C667                 test    ebp, ebp
.text:0040C669                 jnz     loc_40C716
.text:0040C66F
.text:0040C66F loc_40C66F:                             ; CODE XREF: sub_40C584+173↓j
.text:0040C66F                                         ; sub_40C584+187↓j
.text:0040C66F                 add     esp, 1Ch
.text:0040C672                 pop     ebx
.text:0040C673                 pop     esi
.text:0040C674                 pop     edi
.text:0040C675                 pop     ebp
.text:0040C676                 retn
.text:0040C677 ; ---------------------------------------------------------------------------
.text:0040C677
.text:0040C677 loc_40C677:                             ; CODE XREF: sub_40C584+C7↑j
.text:0040C677                 mov     [esp+28h+Format], ecx ; File
.text:0040C67B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:0040C682                 call    _flsbuf
.text:0040C687                 jmp     short loc_40C656
.text:0040C687 ; ---------------------------------------------------------------------------
.text:0040C689                 align 10h
.text:0040C690
.text:0040C690 loc_40C690:                             ; CODE XREF: sub_40C584+B3↑j
.text:0040C690                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:0040C693                 call    strerror
.text:0040C698                 test    eax, eax
.text:0040C69A                 jz      short loc_40C6BE
.text:0040C69C
.text:0040C69C loc_40C69C:                             ; CODE XREF: sub_40C584+13F↓j
.text:0040C69C                 mov     [esp+28h+ArgList], eax
.text:0040C6A0                 mov     edi, ds:_iob
.text:0040C6A6                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:0040C6AE                 add     edi, 40h ; '@'
.text:0040C6B1                 mov     [esp+28h+Stream], edi ; Stream
.text:0040C6B4                 call    fprintf
.text:0040C6B9                 jmp     loc_40C639
.text:0040C6BE ; ---------------------------------------------------------------------------
.text:0040C6BE
.text:0040C6BE loc_40C6BE:                             ; CODE XREF: sub_40C584+116↑j
.text:0040C6BE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040C6C3                 jmp     short loc_40C69C
.text:0040C6C5 ; ---------------------------------------------------------------------------
.text:0040C6C5
.text:0040C6C5 loc_40C6C5:                             ; CODE XREF: sub_40C584+5D↑j
.text:0040C6C5                 mov     [esp+28h+Format], (offset loc_40C58B+1) ; Format
.text:0040C6CD                 mov     ecx, ds:_iob
.text:0040C6D3                 mov     edx, ds:dword_4196C0
.text:0040C6D9                 add     ecx, 40h ; '@'
.text:0040C6DC                 mov     [esp+28h+ArgList], edx
.text:0040C6E0                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040C6E3                 call    fprintf
.text:0040C6E8                 jmp     loc_40C5E9
.text:0040C6E8 ; ---------------------------------------------------------------------------
.text:0040C6ED                 align 10h
.text:0040C6F0
.text:0040C6F0 loc_40C6F0:                             ; CODE XREF: sub_40C584+33↑j
.text:0040C6F0                 mov     eax, ds:Str1
.text:0040C6F5                 cmp     ebx, eax
.text:0040C6F7                 jz      loc_40C66F
.text:0040C6FD                 mov     [esp+28h+Format], ebx ; Str2
.text:0040C701                 mov     [esp+28h+Stream], eax ; Str1
.text:0040C704                 call    strcmp
.text:0040C709                 test    eax, eax
.text:0040C70B                 jz      loc_40C66F
.text:0040C711                 jmp     loc_40C5BD
.text:0040C716 ; ---------------------------------------------------------------------------
.text:0040C716
.text:0040C716 loc_40C716:                             ; CODE XREF: sub_40C584+E5↑j
.text:0040C716                 mov     [esp+28h+Stream], ebp ; Code
.text:0040C719                 call    exit
.text:0040C719 sub_40C584      endp ; sp-analysis failed
.text:0040C719
.text:0040C719 ; ---------------------------------------------------------------------------
.text:0040C71E                 align 10h
.text:0040C720
.text:0040C720 ; =============== S U B R O U T I N E =======================================
.text:0040C720
.text:0040C720
.text:0040C720 ; int __cdecl sub_40C720(LPCSTR)
.text:0040C720 sub_40C720      proc near               ; CODE XREF: sub_402680+1A3↑p
.text:0040C720                                         ; sub_4028D0+1A↑p
.text:0040C720
.text:0040C720 lpFileName      = dword ptr -1Ch
.text:0040C720 AccessMode      = dword ptr -18h
.text:0040C720 var_8           = dword ptr -8
.text:0040C720 var_4           = dword ptr -4
.text:0040C720 arg_0           = dword ptr  4
.text:0040C720
.text:0040C720                 sub     esp, 1Ch
.text:0040C723                 mov     [esp+1Ch+var_8], ebx
.text:0040C727                 mov     ebx, [esp+1Ch+arg_0]
.text:0040C72B                 mov     [esp+1Ch+var_4], esi
.text:0040C72F                 test    ebx, ebx
.text:0040C731                 jz      loc_40C7C2
.text:0040C737                 call    _errno
.text:0040C73C                 mov     esi, [eax]
.text:0040C73E                 mov     [esp+1Ch+AccessMode], 2 ; int
.text:0040C746                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0040C749                 call    sub_40CB40
.text:0040C74E                 test    eax, eax
.text:0040C750                 jnz     short loc_40C7B0
.text:0040C752
.text:0040C752 loc_40C752:                             ; CODE XREF: sub_40C720+A0↓j
.text:0040C752                 mov     [esp+1Ch+AccessMode], 10h ; int
.text:0040C75A                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0040C75D                 call    sub_40CB40
.text:0040C762                 test    eax, eax
.text:0040C764                 jz      short loc_40C7A1
.text:0040C766                 call    _errno
.text:0040C76B                 mov     [eax], esi
.text:0040C76D                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0040C770                 call    DeleteFileA
.text:0040C775                 sub     esp, 4
.text:0040C778                 xor     edx, edx
.text:0040C77A                 test    eax, eax
.text:0040C77C                 jz      short loc_40C78C
.text:0040C77E
.text:0040C77E loc_40C77E:                             ; CODE XREF: sub_40C720+7F↓j
.text:0040C77E                 mov     ebx, [esp+1Ch+var_8]
.text:0040C782                 mov     eax, edx
.text:0040C784                 mov     esi, [esp+1Ch+var_4]
.text:0040C788                 add     esp, 1Ch
.text:0040C78B                 retn
.text:0040C78C ; ---------------------------------------------------------------------------
.text:0040C78C
.text:0040C78C loc_40C78C:                             ; CODE XREF: sub_40C720+5C↑j
.text:0040C78C                 call    sub_40CB20
.text:0040C791                 mov     esi, eax
.text:0040C793                 call    _errno
.text:0040C798                 mov     [eax], esi
.text:0040C79A
.text:0040C79A loc_40C79A:                             ; CODE XREF: sub_40C720+8C↓j
.text:0040C79A                                         ; sub_40C720+AD↓j
.text:0040C79A                 mov     edx, 0FFFFFFFFh
.text:0040C79F                 jmp     short loc_40C77E
.text:0040C7A1 ; ---------------------------------------------------------------------------
.text:0040C7A1
.text:0040C7A1 loc_40C7A1:                             ; CODE XREF: sub_40C720+44↑j
.text:0040C7A1                 call    _errno
.text:0040C7A6                 mov     dword ptr [eax], 15h
.text:0040C7AC                 jmp     short loc_40C79A
.text:0040C7AC ; ---------------------------------------------------------------------------
.text:0040C7AE                 align 10h
.text:0040C7B0
.text:0040C7B0 loc_40C7B0:                             ; CODE XREF: sub_40C720+30↑j
.text:0040C7B0                 mov     [esp+1Ch+AccessMode], 180h ; AccessMode
.text:0040C7B8                 mov     [esp+1Ch+lpFileName], ebx ; FileName
.text:0040C7BB                 call    _chmod_0
.text:0040C7C0                 jmp     short loc_40C752
.text:0040C7C2 ; ---------------------------------------------------------------------------
.text:0040C7C2
.text:0040C7C2 loc_40C7C2:                             ; CODE XREF: sub_40C720+11↑j
.text:0040C7C2                 call    _errno
.text:0040C7C7                 mov     dword ptr [eax], 16h
.text:0040C7CD                 jmp     short loc_40C79A
.text:0040C7CD sub_40C720      endp
.text:0040C7CD
.text:0040C7CD ; ---------------------------------------------------------------------------
.text:0040C7CF                 align 10h
.text:0040C7D0
.text:0040C7D0 ; =============== S U B R O U T I N E =======================================
.text:0040C7D0
.text:0040C7D0
.text:0040C7D0 ; int __cdecl sub_40C7D0(char *)
.text:0040C7D0 sub_40C7D0      proc near               ; CODE XREF: sub_402680+18↑p
.text:0040C7D0
.text:0040C7D0 FileName        = dword ptr -0Ch
.text:0040C7D0 var_8           = dword ptr -8
.text:0040C7D0 arg_0           = dword ptr  4
.text:0040C7D0
.text:0040C7D0                 sub     esp, 0Ch
.text:0040C7D3                 mov     edx, [esp+0Ch+arg_0]
.text:0040C7D7                 mov     [esp+0Ch+var_8], 1 ; int
.text:0040C7DF                 mov     [esp+0Ch+FileName], edx ; FileName
.text:0040C7E2                 call    sub_40CFC0
.text:0040C7E7                 add     esp, 0Ch
.text:0040C7EA                 retn
.text:0040C7EA sub_40C7D0      endp
.text:0040C7EA
.text:0040C7EA ; ---------------------------------------------------------------------------
.text:0040C7EB                 align 10h
.text:0040C7F0
.text:0040C7F0 ; =============== S U B R O U T I N E =======================================
.text:0040C7F0
.text:0040C7F0
.text:0040C7F0 sub_40C7F0      proc near               ; CODE XREF: .text:00406DFD↑p
.text:0040C7F0
.text:0040C7F0 var_1C          = dword ptr -1Ch
.text:0040C7F0 var_18          = dword ptr -18h
.text:0040C7F0 var_14          = dword ptr -14h
.text:0040C7F0 arg_0           = dword ptr  4
.text:0040C7F0 arg_4           = dword ptr  8
.text:0040C7F0 arg_8           = dword ptr  0Ch
.text:0040C7F0
.text:0040C7F0                 push    edi
.text:0040C7F1                 push    esi
.text:0040C7F2                 push    ebx
.text:0040C7F3                 sub     esp, 10h
.text:0040C7F6                 mov     edi, [esp+1Ch+arg_8]
.text:0040C7FA                 mov     esi, [esp+1Ch+arg_0]
.text:0040C7FE                 mov     ebx, [esp+1Ch+arg_4]
.text:0040C802                 cmp     edi, 0Fh
.text:0040C805                 jbe     short loc_40C850
.text:0040C807                 mov     ecx, esi
.text:0040C809                 neg     ecx
.text:0040C80B                 and     ecx, 3
.text:0040C80E                 sub     edi, ecx
.text:0040C810                 mov     edx, ecx
.text:0040C812                 test    ecx, ecx
.text:0040C814                 jz      short loc_40C82A
.text:0040C816                 lea     esi, [esi+0]
.text:0040C819                 lea     edi, [edi+0]
.text:0040C820
.text:0040C820 loc_40C820:                             ; CODE XREF: sub_40C7F0+38↓j
.text:0040C820                 movzx   ecx, byte ptr [ebx]
.text:0040C823                 inc     ebx
.text:0040C824                 mov     [esi], cl
.text:0040C826                 inc     esi
.text:0040C827                 dec     edx
.text:0040C828                 jnz     short loc_40C820
.text:0040C82A
.text:0040C82A loc_40C82A:                             ; CODE XREF: sub_40C7F0+24↑j
.text:0040C82A                 test    bl, 3
.text:0040C82D                 jnz     short loc_40C873
.text:0040C82F                 mov     [esp+1Ch+var_18], ebx
.text:0040C833                 mov     edx, edi
.text:0040C835                 shr     edx, 2
.text:0040C838                 mov     [esp+1Ch+var_14], edx
.text:0040C83C                 mov     [esp+1Ch+var_1C], esi
.text:0040C83F                 call    sub_40D3F0
.text:0040C844
.text:0040C844 loc_40C844:                             ; CODE XREF: sub_40C7F0+98↓j
.text:0040C844                 mov     edx, edi
.text:0040C846                 and     edx, 0FFFFFFFCh
.text:0040C849                 and     edi, 3
.text:0040C84C                 add     ebx, edx
.text:0040C84E                 add     esi, edx
.text:0040C850
.text:0040C850 loc_40C850:                             ; CODE XREF: sub_40C7F0+15↑j
.text:0040C850                 test    edi, edi
.text:0040C852                 mov     edx, edi
.text:0040C854                 jz      short loc_40C86A
.text:0040C856                 lea     esi, [esi+0]
.text:0040C859                 lea     edi, [edi+0]
.text:0040C860
.text:0040C860 loc_40C860:                             ; CODE XREF: sub_40C7F0+78↓j
.text:0040C860                 movzx   ecx, byte ptr [ebx]
.text:0040C863                 inc     ebx
.text:0040C864                 mov     [esi], cl
.text:0040C866                 inc     esi
.text:0040C867                 dec     edx
.text:0040C868                 jnz     short loc_40C860
.text:0040C86A
.text:0040C86A loc_40C86A:                             ; CODE XREF: sub_40C7F0+64↑j
.text:0040C86A                 add     esp, 10h
.text:0040C86D                 mov     eax, esi
.text:0040C86F                 pop     ebx
.text:0040C870                 pop     esi
.text:0040C871                 pop     edi
.text:0040C872                 retn
.text:0040C873 ; ---------------------------------------------------------------------------
.text:0040C873
.text:0040C873 loc_40C873:                             ; CODE XREF: sub_40C7F0+3D↑j
.text:0040C873                 mov     [esp+1Ch+var_18], ebx
.text:0040C877                 mov     ecx, edi
.text:0040C879                 shr     ecx, 2
.text:0040C87C                 mov     [esp+1Ch+var_14], ecx
.text:0040C880                 mov     [esp+1Ch+var_1C], esi
.text:0040C883                 call    sub_40D4F0
.text:0040C888                 jmp     short loc_40C844
.text:0040C888 sub_40C7F0      endp
.text:0040C888
.text:0040C888 ; ---------------------------------------------------------------------------
.text:0040C88A                 align 10h
.text:0040C890
.text:0040C890 ; =============== S U B R O U T I N E =======================================
.text:0040C890
.text:0040C890 ; Attributes: info_from_lumina
.text:0040C890
.text:0040C890 ___get_errno    proc near               ; CODE XREF: sub_40CB20+B↓p
.text:0040C890
.text:0040C890 arg_0           = dword ptr  4
.text:0040C890
.text:0040C890                 mov     eax, [esp+arg_0]
.text:0040C894                 cmp     eax, 53h ; 'S'
.text:0040C897                 jg      loc_40C990
.text:0040C89D                 cmp     eax, 52h ; 'R'
.text:0040C8A0                 jge     short loc_40C8F2
.text:0040C8A2                 cmp     eax, 0Fh
.text:0040C8A5                 jz      short loc_40C8C0
.text:0040C8A7                 cmp     eax, 0Fh
.text:0040C8AA                 jg      short loc_40C920
.text:0040C8AC                 cmp     eax, 9
.text:0040C8AF                 jg      short loc_40C900
.text:0040C8B1                 cmp     eax, 7
.text:0040C8B4                 jge     short loc_40C8F9
.text:0040C8B6                 cmp     eax, 3
.text:0040C8B9                 jg      short loc_40C8DA
.text:0040C8BB                 cmp     eax, 2
.text:0040C8BE                 jl      short loc_40C8D3
.text:0040C8C0
.text:0040C8C0 loc_40C8C0:                             ; CODE XREF: ___get_errno+15↑j
.text:0040C8C0                                         ; ___get_errno+9D↓j ...
.text:0040C8C0                 mov     edx, 2
.text:0040C8C5                 lea     esi, [esi+0]
.text:0040C8C9                 lea     edi, [edi+0]
.text:0040C8D0
.text:0040C8D0 loc_40C8D0:                             ; CODE XREF: ___get_errno+48↓j
.text:0040C8D0                                         ; ___get_errno+59↓j ...
.text:0040C8D0                 mov     eax, edx
.text:0040C8D2                 retn
.text:0040C8D3 ; ---------------------------------------------------------------------------
.text:0040C8D3
.text:0040C8D3 loc_40C8D3:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040C8D3                                         ; ___get_errno+78↓j ...
.text:0040C8D3                 mov     edx, 16h
.text:0040C8D8                 jmp     short loc_40C8D0
.text:0040C8DA ; ---------------------------------------------------------------------------
.text:0040C8DA
.text:0040C8DA loc_40C8DA:                             ; CODE XREF: ___get_errno+29↑j
.text:0040C8DA                 cmp     eax, 5
.text:0040C8DD                 jz      short loc_40C8F2
.text:0040C8DF                 cmp     eax, 5
.text:0040C8E2                 jg      short loc_40C8EB
.text:0040C8E4                 mov     edx, 18h
.text:0040C8E9                 jmp     short loc_40C8D0
.text:0040C8EB ; ---------------------------------------------------------------------------
.text:0040C8EB
.text:0040C8EB loc_40C8EB:                             ; CODE XREF: ___get_errno+52↑j
.text:0040C8EB                                         ; ___get_errno+180↓j
.text:0040C8EB                 mov     edx, 9
.text:0040C8F0                 jmp     short loc_40C8D0
.text:0040C8F2 ; ---------------------------------------------------------------------------
.text:0040C8F2
.text:0040C8F2 loc_40C8F2:                             ; CODE XREF: ___get_errno+10↑j
.text:0040C8F2                                         ; ___get_errno+4D↑j ...
.text:0040C8F2                 mov     edx, 0Dh
.text:0040C8F7                 jmp     short loc_40C8D0
.text:0040C8F9 ; ---------------------------------------------------------------------------
.text:0040C8F9
.text:0040C8F9 loc_40C8F9:                             ; CODE XREF: ___get_errno+24↑j
.text:0040C8F9                                         ; ___get_errno+73↓j ...
.text:0040C8F9                 mov     edx, 0Ch
.text:0040C8FE                 jmp     short loc_40C8D0
.text:0040C900 ; ---------------------------------------------------------------------------
.text:0040C900
.text:0040C900 loc_40C900:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040C900                 cmp     eax, 0Dh
.text:0040C903                 jg      short loc_40C8F9
.text:0040C905                 cmp     eax, 0Ch
.text:0040C908                 jge     short loc_40C8D3
.text:0040C90A                 cmp     eax, 0Ah
.text:0040C90D                 mov     edx, 7
.text:0040C912                 jz      short loc_40C8D0
.text:0040C914                 cmp     eax, 0Bh
.text:0040C917                 jnz     short loc_40C8D3
.text:0040C919
.text:0040C919 loc_40C919:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040C919                 mov     edx, 8
.text:0040C91E                 jmp     short loc_40C8D0
.text:0040C920 ; ---------------------------------------------------------------------------
.text:0040C920
.text:0040C920 loc_40C920:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040C920                 cmp     eax, 22h ; '"'
.text:0040C923                 jg      short loc_40C954
.text:0040C925                 cmp     eax, 16h
.text:0040C928                 jge     short loc_40C8F2
.text:0040C92A                 cmp     eax, 12h
.text:0040C92D                 jz      short loc_40C8C0
.text:0040C92F                 cmp     eax, 12h
.text:0040C932                 jg      short loc_40C945
.text:0040C934                 cmp     eax, 10h
.text:0040C937                 jz      short loc_40C8F2
.text:0040C939                 mov     edx, 12h
.text:0040C93E                 cmp     eax, 11h
.text:0040C941
.text:0040C941 loc_40C941:                             ; CODE XREF: ___get_errno+172↓j
.text:0040C941                                         ; ___get_errno+24C↓j ...
.text:0040C941                 jnz     short loc_40C8D3
.text:0040C943                 jmp     short loc_40C8D0
.text:0040C945 ; ---------------------------------------------------------------------------
.text:0040C945
.text:0040C945 loc_40C945:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040C945                 cmp     eax, 14h
.text:0040C948                 jle     short loc_40C8F2
.text:0040C94A
.text:0040C94A loc_40C94A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040C94A                 mov     edx, 10h
.text:0040C94F                 jmp     loc_40C8D0
.text:0040C954 ; ---------------------------------------------------------------------------
.text:0040C954
.text:0040C954 loc_40C954:                             ; CODE XREF: ___get_errno+93↑j
.text:0040C954                 cmp     eax, 41h ; 'A'
.text:0040C957                 jz      short loc_40C8F2
.text:0040C959                 cmp     eax, 41h ; 'A'
.text:0040C95C                 jg      short loc_40C971
.text:0040C95E                 cmp     eax, 24h ; '$'
.text:0040C961                 jz      short loc_40C8F2
.text:0040C963                 cmp     eax, 35h ; '5'
.text:0040C966                 jnz     loc_40C8D3
.text:0040C96C                 jmp     loc_40C8C0
.text:0040C971 ; ---------------------------------------------------------------------------
.text:0040C971
.text:0040C971 loc_40C971:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040C971                 cmp     eax, 43h ; 'C'
.text:0040C974                 jz      loc_40C8C0
.text:0040C97A                 cmp     eax, 50h ; 'P'
.text:0040C97D                 jnz     loc_40C8D3
.text:0040C983
.text:0040C983 loc_40C983:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040C983                 mov     edx, 11h
.text:0040C988                 jmp     loc_40C8D0
.text:0040C988 ; ---------------------------------------------------------------------------
.text:0040C98D                 align 10h
.text:0040C990
.text:0040C990 loc_40C990:                             ; CODE XREF: ___get_errno+7↑j
.text:0040C990                 cmp     eax, 0A1h ; '¡'
.text:0040C995                 jz      loc_40C8C0
.text:0040C99B                 cmp     eax, 0A1h ; '¡'
.text:0040C9A0                 jg      loc_40CA50
.text:0040C9A6                 cmp     eax, 81h
.text:0040C9AB                 jg      short loc_40CA15
.text:0040C9AD                 cmp     eax, 80h ; '€'
.text:0040C9B2                 mov     edx, 0Ah
.text:0040C9B7                 jge     loc_40C8D0
.text:0040C9BD                 cmp     eax, 6Ch ; 'l'
.text:0040C9C0                 jz      loc_40C8F2
.text:0040C9C6                 cmp     eax, 6Ch ; 'l'
.text:0040C9C9                 jg      short loc_40C9E7
.text:0040C9CB                 cmp     eax, 57h ; 'W'
.text:0040C9CE                 jz      loc_40C8D3
.text:0040C9D4                 cmp     eax, 59h ; 'Y'
.text:0040C9D7                 jnz     loc_40C8D3
.text:0040C9DD
.text:0040C9DD loc_40C9DD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040C9DD                                         ; ___get_errno+23C↓j
.text:0040C9DD                 mov     edx, 0Bh
.text:0040C9E2                 jmp     loc_40C8D0
.text:0040C9E7 ; ---------------------------------------------------------------------------
.text:0040C9E7
.text:0040C9E7 loc_40C9E7:                             ; CODE XREF: ___get_errno+139↑j
.text:0040C9E7                 cmp     eax, 70h ; 'p'
.text:0040C9EA                 mov     edx, 1Ch
.text:0040C9EF                 jz      loc_40C8D0
.text:0040C9F5                 cmp     eax, 70h ; 'p'
.text:0040C9F8                 jg      short loc_40CA07
.text:0040C9FA                 mov     edx, 20h ; ' '
.text:0040C9FF                 cmp     eax, 6Dh ; 'm'
.text:0040CA02                 jmp     loc_40C941
.text:0040CA07 ; ---------------------------------------------------------------------------
.text:0040CA07
.text:0040CA07 loc_40CA07:                             ; CODE XREF: ___get_errno+168↑j
.text:0040CA07                 cmp     eax, 72h ; 'r'
.text:0040CA0A
.text:0040CA0A loc_40CA0A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040CA0A                 jnz     loc_40C8D3
.text:0040CA10                 jmp     loc_40C8EB
.text:0040CA15 ; ---------------------------------------------------------------------------
.text:0040CA15
.text:0040CA15 loc_40CA15:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040CA15                 cmp     eax, 84h ; '„'
.text:0040CA1A                 jz      loc_40C8F2
.text:0040CA20                 cmp     eax, 84h ; '„'
.text:0040CA25                 jg      short loc_40CA2E
.text:0040CA27                 cmp     eax, 82h ; '‚'
.text:0040CA2C                 jmp     short loc_40CA0A
.text:0040CA2E ; ---------------------------------------------------------------------------
.text:0040CA2E
.text:0040CA2E loc_40CA2E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040CA2E                 cmp     eax, 91h ; '‘'
.text:0040CA33                 mov     edx, 29h ; ')'
.text:0040CA38                 jz      loc_40C8D0
.text:0040CA3E                 cmp     eax, 9Eh ; 'ž'
.text:0040CA43
.text:0040CA43 loc_40CA43:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040CA43                 jnz     loc_40C8D3
.text:0040CA49                 jmp     loc_40C8F2
.text:0040CA49 ; ---------------------------------------------------------------------------
.text:0040CA4E                 align 10h
.text:0040CA50
.text:0040CA50 loc_40CA50:                             ; CODE XREF: ___get_errno+110↑j
.text:0040CA50                 cmp     eax, 0CEh ; 'Î'
.text:0040CA55                 jz      loc_40C8C0
.text:0040CA5B                 cmp     eax, 0CEh ; 'Î'
.text:0040CA60                 jg      short loc_40CAB0
.text:0040CA62                 cmp     eax, 0AAh ; 'ª'
.text:0040CA67                 jz      loc_40C94A
.text:0040CA6D                 cmp     eax, 0AAh ; 'ª'
.text:0040CA72                 jg      short loc_40CA86
.text:0040CA74                 cmp     eax, 0A4h ; '¤'
.text:0040CA79                 jz      loc_40C9DD
.text:0040CA7F                 cmp     eax, 0A7h ; '§'
.text:0040CA84                 jmp     short loc_40CA43
.text:0040CA86 ; ---------------------------------------------------------------------------
.text:0040CA86
.text:0040CA86 loc_40CA86:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040CA86                 cmp     eax, 0B7h ; '·'
.text:0040CA8B                 jz      loc_40C983
.text:0040CA91                 cmp     eax, 0B7h ; '·'
.text:0040CA96                 jl      loc_40C8D3
.text:0040CA9C                 sub     eax, 0BCh ; '¼'
.text:0040CAA1                 cmp     eax, 0Eh
.text:0040CAA4                 ja      loc_40C8D3
.text:0040CAAA                 jmp     loc_40C919
.text:0040CAAA ; ---------------------------------------------------------------------------
.text:0040CAAF                 align 10h
.text:0040CAB0
.text:0040CAB0 loc_40CAB0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040CAB0                 cmp     eax, 46Bh
.text:0040CAB5                 mov     edx, 24h ; '$'
.text:0040CABA                 jz      loc_40C8D0
.text:0040CAC0                 cmp     eax, 46Bh
.text:0040CAC5                 jg      short loc_40CAE1
.text:0040CAC7                 cmp     eax, 0D7h ; '×'
.text:0040CACC                 jz      loc_40C9DD
.text:0040CAD2                 mov     edx, 5
.text:0040CAD7                 cmp     eax, 45Dh
.text:0040CADC                 jmp     loc_40C941
.text:0040CAE1 ; ---------------------------------------------------------------------------
.text:0040CAE1
.text:0040CAE1 loc_40CAE1:                             ; CODE XREF: ___get_errno+235↑j
.text:0040CAE1                 cmp     eax, 4D5h
.text:0040CAE6                 mov     edx, 4
.text:0040CAEB                 jz      loc_40C8D0
.text:0040CAF1                 cmp     eax, 4D5h
.text:0040CAF6                 jg      short loc_40CB07
.text:0040CAF8                 mov     edx, 13h
.text:0040CAFD                 cmp     eax, 4B0h
.text:0040CB02                 jmp     loc_40C941
.text:0040CB07 ; ---------------------------------------------------------------------------
.text:0040CB07
.text:0040CB07 loc_40CB07:                             ; CODE XREF: ___get_errno+266↑j
.text:0040CB07                 cmp     eax, 718h
.text:0040CB0C                 jnz     loc_40C8D3
.text:0040CB12                 jmp     loc_40C8F9
.text:0040CB12 ___get_errno    endp
.text:0040CB12
.text:0040CB12 ; ---------------------------------------------------------------------------
.text:0040CB17                 align 10h
.text:0040CB20
.text:0040CB20 ; =============== S U B R O U T I N E =======================================
.text:0040CB20
.text:0040CB20
.text:0040CB20 sub_40CB20      proc near               ; CODE XREF: sub_40C720:loc_40C78C↑p
.text:0040CB20                                         ; sub_40CB40:loc_40CBF3↓p ...
.text:0040CB20
.text:0040CB20 var_C           = dword ptr -0Ch
.text:0040CB20
.text:0040CB20                 sub     esp, 0Ch
.text:0040CB23                 call    GetLastError
.text:0040CB28                 mov     [esp+0Ch+var_C], eax
.text:0040CB2B                 call    ___get_errno
.text:0040CB30                 add     esp, 0Ch
.text:0040CB33                 retn
.text:0040CB33 sub_40CB20      endp
.text:0040CB33
.text:0040CB33 ; ---------------------------------------------------------------------------
.text:0040CB34                 align 10h
.text:0040CB40
.text:0040CB40 ; =============== S U B R O U T I N E =======================================
.text:0040CB40
.text:0040CB40
.text:0040CB40 ; int __cdecl sub_40CB40(LPCSTR lpFileName, int)
.text:0040CB40 sub_40CB40      proc near               ; CODE XREF: sub_40C720+29↑p
.text:0040CB40                                         ; sub_40C720+3D↑p ...
.text:0040CB40
.text:0040CB40 uMode           = dword ptr -1Ch
.text:0040CB40 var_10          = dword ptr -10h
.text:0040CB40 var_C           = dword ptr -0Ch
.text:0040CB40 var_8           = dword ptr -8
.text:0040CB40 var_4           = dword ptr -4
.text:0040CB40 lpFileName      = dword ptr  4
.text:0040CB40 arg_4           = dword ptr  8
.text:0040CB40
.text:0040CB40                 sub     esp, 1Ch
.text:0040CB43                 mov     [esp+1Ch+var_10], ebx
.text:0040CB47                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040CB4B                 mov     [esp+1Ch+var_4], ebp
.text:0040CB4F                 xor     ebp, ebp
.text:0040CB51                 test    ebx, ebx
.text:0040CB53                 mov     [esp+1Ch+var_C], esi
.text:0040CB57                 mov     esi, [esp+1Ch+arg_4]
.text:0040CB5B                 mov     [esp+1Ch+var_8], edi
.text:0040CB5F                 jz      short loc_40CB69
.text:0040CB61                 test    esi, 0FFFFFFE8h
.text:0040CB67                 jz      short loc_40CB90
.text:0040CB69
.text:0040CB69 loc_40CB69:                             ; CODE XREF: sub_40CB40+1F↑j
.text:0040CB69                 call    _errno
.text:0040CB6E                 mov     dword ptr [eax], 16h
.text:0040CB74
.text:0040CB74 loc_40CB74:                             ; CODE XREF: sub_40CB40+B1↓j
.text:0040CB74                 mov     eax, 0FFFFFFFFh
.text:0040CB79
.text:0040CB79 loc_40CB79:                             ; CODE XREF: sub_40CB40+86↓j
.text:0040CB79                                         ; sub_40CB40+A4↓j
.text:0040CB79                 mov     ebx, [esp+1Ch+var_10]
.text:0040CB7D                 mov     esi, [esp+1Ch+var_C]
.text:0040CB81                 mov     edi, [esp+1Ch+var_8]
.text:0040CB85                 mov     ebp, [esp+1Ch+var_4]
.text:0040CB89                 add     esp, 1Ch
.text:0040CB8C                 retn
.text:0040CB8C ; ---------------------------------------------------------------------------
.text:0040CB8D                 align 10h
.text:0040CB90
.text:0040CB90 loc_40CB90:                             ; CODE XREF: sub_40CB40+27↑j
.text:0040CB90                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040CB97                 call    SetErrorMode
.text:0040CB9C                 sub     esp, 4
.text:0040CB9F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040CBA2                 call    GetFileAttributesA
.text:0040CBA7                 sub     esp, 4
.text:0040CBAA                 mov     edi, eax
.text:0040CBAC                 cmp     eax, 0FFFFFFFFh
.text:0040CBAF                 jz      short loc_40CBF3
.text:0040CBB1
.text:0040CBB1 loc_40CBB1:                             ; CODE XREF: sub_40CB40+C6↓j
.text:0040CBB1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040CBB8                 call    SetErrorMode
.text:0040CBBD                 sub     esp, 4
.text:0040CBC0                 mov     eax, 0FFFFFFFFh
.text:0040CBC5                 inc     ebp
.text:0040CBC6                 jz      short loc_40CB79
.text:0040CBC8                 test    esi, 10h
.text:0040CBCE                 jz      short loc_40CBD8
.text:0040CBD0                 test    edi, 10h
.text:0040CBD6                 jz      short loc_40CBE6
.text:0040CBD8
.text:0040CBD8 loc_40CBD8:                             ; CODE XREF: sub_40CB40+8E↑j
.text:0040CBD8                 and     esi, 2
.text:0040CBDB                 jz      short loc_40CBE2
.text:0040CBDD                 and     edi, 1
.text:0040CBE0                 jnz     short loc_40CBE6
.text:0040CBE2
.text:0040CBE2 loc_40CBE2:                             ; CODE XREF: sub_40CB40+9B↑j
.text:0040CBE2                 xor     eax, eax
.text:0040CBE4                 jmp     short loc_40CB79
.text:0040CBE6 ; ---------------------------------------------------------------------------
.text:0040CBE6
.text:0040CBE6 loc_40CBE6:                             ; CODE XREF: sub_40CB40+96↑j
.text:0040CBE6                                         ; sub_40CB40+A0↑j
.text:0040CBE6                 call    _errno
.text:0040CBEB                 mov     dword ptr [eax], 0Dh
.text:0040CBF1                 jmp     short loc_40CB74
.text:0040CBF3 ; ---------------------------------------------------------------------------
.text:0040CBF3
.text:0040CBF3 loc_40CBF3:                             ; CODE XREF: sub_40CB40+6F↑j
.text:0040CBF3                 call    sub_40CB20
.text:0040CBF8                 mov     ebp, eax
.text:0040CBFA                 call    _errno
.text:0040CBFF                 mov     [eax], ebp
.text:0040CC01                 mov     ebp, 0FFFFFFFFh
.text:0040CC06                 jmp     short loc_40CBB1
.text:0040CC06 sub_40CB40      endp
.text:0040CC06
.text:0040CC06 ; ---------------------------------------------------------------------------
.text:0040CC08                 align 10h
.text:0040CC10 aFile           db 'file',0             ; DATA XREF: .text:loc_40CC6C↓o
.text:0040CC15 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: .text:0040CCDB↓o
.text:0040CC25 aTemp           db 'TEMP',0             ; DATA XREF: .text:loc_40CD22↓o
.text:0040CC25                                         ; .text:loc_40CD62↓o ...
.text:0040CC2A aTmp_0          db '/tmp',0             ; DATA XREF: .text:0040CD6F↓o
.text:0040CC2A                                         ; .text:0040CD81↓o ...
.text:0040CC2F ; ---------------------------------------------------------------------------
.text:0040CC2F
.text:0040CC2F loc_40CC2F:                             ; DATA XREF: .text:loc_40CDE0↓o
.text:0040CC2F                 push    esp
.text:0040CC30                 dec     ebp
.text:0040CC31                 push    eax
.text:0040CC32                 inc     esp
.text:0040CC33                 dec     ecx
.text:0040CC34                 push    edx
.text:0040CC35                 add     [ebp+ecx*2+50h], dl
.text:0040CC39                 add     [ebp+0B6h], cl
.text:0040CC3F
.text:0040CC3F loc_40CC3F:                             ; CODE XREF: sub_412A80+3B↓p
.text:0040CC3F                 add     [ebp+57h], dl
.text:0040CC42                 push    esi
.text:0040CC43                 push    ebx
.text:0040CC44                 sub     esp, 1ACh
.text:0040CC4A                 mov     eax, [esp+1CCh]
.text:0040CC51                 mov     esi, [esp+1C8h]
.text:0040CC58                 test    eax, eax
.text:0040CC5A                 jz      short loc_40CC6C
.text:0040CC5C                 mov     edx, [esp+1CCh]
.text:0040CC63                 cmp     byte ptr [edx], 0
.text:0040CC66                 jnz     loc_40CEA0
.text:0040CC6C
.text:0040CC6C loc_40CC6C:                             ; CODE XREF: .text:0040CC5A↑j
.text:0040CC6C                 mov     eax, offset aFile ; "file"
.text:0040CC71                 mov     ebp, 4
.text:0040CC76                 mov     [esp+1CCh], eax
.text:0040CC7D
.text:0040CC7D loc_40CC7D:                             ; CODE XREF: .text:0040CEB4↓j
.text:0040CC7D                                         ; .text:0040CEBF↓j
.text:0040CC7D                 mov     ebx, [esp+1D0h]
.text:0040CC84                 test    ebx, ebx
.text:0040CC86                 jnz     loc_40CDE0
.text:0040CC8C
.text:0040CC8C loc_40CC8C:                             ; CODE XREF: .text:0040CE5C↓j
.text:0040CC8C                                         ; .text:0040CE64↓j ...
.text:0040CC8C                 test    esi, esi
.text:0040CC8E                 jz      loc_40CD22
.text:0040CC94
.text:0040CC94 loc_40CC94:                             ; CODE XREF: .text:0040CDB6↓j
.text:0040CC94                                         ; .text:0040CDDA↓j
.text:0040CC94                 mov     [esp], esi
.text:0040CC97                 call    strlen
.text:0040CC9C                 test    eax, eax
.text:0040CC9E                 mov     edx, eax
.text:0040CCA0                 jz      short loc_40CCB0
.text:0040CCA2                 movzx   eax, byte ptr [eax+esi-1]
.text:0040CCA7                 cmp     al, 2Fh ; '/'
.text:0040CCA9                 jz      short loc_40CD10
.text:0040CCAB                 cmp     al, 5Ch ; '\'
.text:0040CCAD                 jz      short loc_40CD10
.text:0040CCAF                 nop
.text:0040CCB0
.text:0040CCB0 loc_40CCB0:                             ; CODE XREF: .text:0040CCA0↑j
.text:0040CCB0                                         ; .text:0040CD11↓j ...
.text:0040CCB0                 lea     edi, [ebp+edx+8]
.text:0040CCB4                 cmp     [esp+1C4h], edi
.text:0040CCBB                 jb      short loc_40CCF8
.text:0040CCBD                 mov     [esp+10h], ebp
.text:0040CCC1                 mov     ecx, [esp+1CCh]
.text:0040CCC8                 mov     ebp, [esp+1C0h]
.text:0040CCCF                 mov     [esp+0Ch], esi
.text:0040CCD3                 mov     [esp+14h], ecx
.text:0040CCD7                 mov     [esp+8], edx
.text:0040CCDB                 mov     dword ptr [esp+4], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040CCE3                 mov     [esp], ebp
.text:0040CCE6                 call    sprintf
.text:0040CCEB                 xor     eax, eax
.text:0040CCED
.text:0040CCED loc_40CCED:                             ; CODE XREF: .text:0040CD08↓j
.text:0040CCED                 add     esp, 1ACh
.text:0040CCF3                 pop     ebx
.text:0040CCF4                 pop     esi
.text:0040CCF5                 pop     edi
.text:0040CCF6                 pop     ebp
.text:0040CCF7                 retn
.text:0040CCF8 ; ---------------------------------------------------------------------------
.text:0040CCF8
.text:0040CCF8 loc_40CCF8:                             ; CODE XREF: .text:0040CCBB↑j
.text:0040CCF8                 call    _errno
.text:0040CCFD                 mov     dword ptr [eax], 16h
.text:0040CD03
.text:0040CD03 loc_40CD03:                             ; CODE XREF: .text:0040CDC7↓j
.text:0040CD03                 mov     eax, 0FFFFFFFFh
.text:0040CD08                 jmp     short loc_40CCED
.text:0040CD08 ; ---------------------------------------------------------------------------
.text:0040CD0A                 align 10h
.text:0040CD10
.text:0040CD10 loc_40CD10:                             ; CODE XREF: .text:0040CCA9↑j
.text:0040CD10                                         ; .text:0040CCAD↑j ...
.text:0040CD10                 dec     edx
.text:0040CD11                 jz      short loc_40CCB0
.text:0040CD13                 movzx   eax, byte ptr [edx+esi-1]
.text:0040CD18                 cmp     al, 2Fh ; '/'
.text:0040CD1A                 jz      short loc_40CD10
.text:0040CD1C                 cmp     al, 5Ch ; '\'
.text:0040CD1E                 jz      short loc_40CD10
.text:0040CD20                 jmp     short loc_40CCB0
.text:0040CD22 ; ---------------------------------------------------------------------------
.text:0040CD22
.text:0040CD22 loc_40CD22:                             ; CODE XREF: .text:0040CC8E↑j
.text:0040CD22                 mov     dword ptr [esp], offset aTemp ; "TEMP"
.text:0040CD29                 lea     esi, [esp+80h]
.text:0040CD30                 call    getenv
.text:0040CD35                 mov     [esp+4], eax
.text:0040CD39                 mov     [esp+8], esi
.text:0040CD3D                 mov     dword ptr [esp], 0
.text:0040CD44                 call    sub_40D9D0
.text:0040CD49                 test    eax, eax
.text:0040CD4B                 jnz     short loc_40CD62
.text:0040CD4D                 mov     edi, [esp+80h]
.text:0040CD54                 and     edi, 0F000h
.text:0040CD5A                 cmp     edi, 4000h
.text:0040CD60                 jz      short loc_40CDCC
.text:0040CD62
.text:0040CD62 loc_40CD62:                             ; CODE XREF: .text:0040CD4B↑j
.text:0040CD62                 mov     dword ptr [esp], offset aTemp ; "TEMP"
.text:0040CD69                 call    getenv
.text:0040CD6E                 cld
.text:0040CD6F                 mov     edx, offset aTmp_0 ; "/tmp"
.text:0040CD74                 mov     esi, eax
.text:0040CD76                 mov     ecx, 5
.text:0040CD7B                 mov     edi, edx
.text:0040CD7D                 repe cmpsb
.text:0040CD7F                 jz      short loc_40CDBC
.text:0040CD81                 mov     dword ptr [esp+4], offset aTmp_0 ; "/tmp"
.text:0040CD89                 lea     ecx, [esp+20h]
.text:0040CD8D                 mov     [esp+8], ecx
.text:0040CD91                 mov     dword ptr [esp], 0
.text:0040CD98                 call    sub_40D9D0
.text:0040CD9D                 test    eax, eax
.text:0040CD9F                 jnz     short loc_40CDBC
.text:0040CDA1                 mov     ebx, [esp+20h]
.text:0040CDA5                 mov     esi, offset aTmp_0 ; "/tmp"
.text:0040CDAA                 and     ebx, 0F000h
.text:0040CDB0                 cmp     ebx, 4000h
.text:0040CDB6                 jz      loc_40CC94
.text:0040CDBC
.text:0040CDBC loc_40CDBC:                             ; CODE XREF: .text:0040CD7F↑j
.text:0040CDBC                                         ; .text:0040CD9F↑j
.text:0040CDBC                 call    _errno
.text:0040CDC1                 mov     dword ptr [eax], 2
.text:0040CDC7                 jmp     loc_40CD03
.text:0040CDCC ; ---------------------------------------------------------------------------
.text:0040CDCC
.text:0040CDCC loc_40CDCC:                             ; CODE XREF: .text:0040CD60↑j
.text:0040CDCC                 mov     dword ptr [esp], offset aTemp ; "TEMP"
.text:0040CDD3                 call    getenv
.text:0040CDD8                 mov     esi, eax
.text:0040CDDA                 jmp     loc_40CC94
.text:0040CDDA ; ---------------------------------------------------------------------------
.text:0040CDDF                 align 10h
.text:0040CDE0
.text:0040CDE0 loc_40CDE0:                             ; CODE XREF: .text:0040CC86↑j
.text:0040CDE0                 mov     dword ptr [esp], offset loc_40CC2F
.text:0040CDE7                 call    sub_40D960
.text:0040CDEC                 test    eax, eax
.text:0040CDEE                 mov     ebx, eax
.text:0040CDF0                 jz      short loc_40CE70
.text:0040CDF2
.text:0040CDF2 loc_40CDF2:                             ; CODE XREF: .text:0040CE80↓j
.text:0040CDF2                                         ; .text:0040CE96↓j
.text:0040CDF2                 mov     [esp+4], ebx
.text:0040CDF6                 lea     edi, [esp+140h]
.text:0040CDFD                 mov     [esp+8], edi
.text:0040CE01                 mov     dword ptr [esp], 0
.text:0040CE08                 call    sub_40D9D0
.text:0040CE0D                 test    eax, eax
.text:0040CE0F                 jnz     short loc_40CE26
.text:0040CE11                 mov     edx, [esp+140h]
.text:0040CE18                 and     edx, 0F000h
.text:0040CE1E                 cmp     edx, 4000h
.text:0040CE24                 jz      short loc_40CE69
.text:0040CE26
.text:0040CE26 loc_40CE26:                             ; CODE XREF: .text:0040CE0F↑j
.text:0040CE26                                         ; .text:0040CE9C↓j
.text:0040CE26                 test    esi, esi
.text:0040CE28                 jz      short loc_40CE62
.text:0040CE2A                 mov     [esp+4], esi
.text:0040CE2E                 lea     ecx, [esp+0E0h]
.text:0040CE35                 mov     [esp+8], ecx
.text:0040CE39                 mov     dword ptr [esp], 0
.text:0040CE40                 call    sub_40D9D0
.text:0040CE45                 test    eax, eax
.text:0040CE47                 jnz     short loc_40CE62
.text:0040CE49                 mov     ebx, [esp+0E0h]
.text:0040CE50                 and     ebx, 0F000h
.text:0040CE56                 cmp     ebx, 4000h
.text:0040CE5C                 jz      loc_40CC8C
.text:0040CE62
.text:0040CE62 loc_40CE62:                             ; CODE XREF: .text:0040CE28↑j
.text:0040CE62                                         ; .text:0040CE47↑j
.text:0040CE62                 xor     esi, esi
.text:0040CE64                 jmp     loc_40CC8C
.text:0040CE69 ; ---------------------------------------------------------------------------
.text:0040CE69
.text:0040CE69 loc_40CE69:                             ; CODE XREF: .text:0040CE24↑j
.text:0040CE69                 mov     esi, ebx
.text:0040CE6B                 jmp     loc_40CC8C
.text:0040CE70 ; ---------------------------------------------------------------------------
.text:0040CE70
.text:0040CE70 loc_40CE70:                             ; CODE XREF: .text:0040CDF0↑j
.text:0040CE70                 mov     dword ptr [esp], 40CC36h
.text:0040CE77                 call    sub_40D960
.text:0040CE7C                 test    eax, eax
.text:0040CE7E                 mov     ebx, eax
.text:0040CE80                 jnz     loc_40CDF2
.text:0040CE86                 mov     dword ptr [esp], offset aTemp ; "TEMP"
.text:0040CE8D                 call    sub_40D960
.text:0040CE92                 test    eax, eax
.text:0040CE94                 mov     ebx, eax
.text:0040CE96                 jnz     loc_40CDF2
.text:0040CE9C                 jmp     short loc_40CE26
.text:0040CE9C ; ---------------------------------------------------------------------------
.text:0040CE9E                 align 10h
.text:0040CEA0
.text:0040CEA0 loc_40CEA0:                             ; CODE XREF: .text:0040CC66↑j
.text:0040CEA0                 mov     ecx, [esp+1CCh]
.text:0040CEA7                 mov     [esp], ecx
.text:0040CEAA                 call    strlen
.text:0040CEAF                 cmp     eax, 5
.text:0040CEB2                 mov     ebp, eax
.text:0040CEB4                 jbe     loc_40CC7D
.text:0040CEBA                 mov     ebp, 5
.text:0040CEBF                 jmp     loc_40CC7D
.text:0040CEBF ; ---------------------------------------------------------------------------
.text:0040CEC4                 align 10h
.text:0040CED0 byte_40CED0     db 61h                  ; DATA XREF: sub_40CFC0+DC↓r
.text:0040CED0                                         ; sub_40CFC0+122↓r ...
.text:0040CED1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040CF0F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40CFC0+39↓o
.text:0040CF16                 db 1Ah dup(90h)
.text:0040CF30 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040CF30                                         ; DATA XREF: sub_40CFC0:loc_40D238↓o
.text:0040CF4F                 align 10h
.text:0040CF50 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040CF50                                         ; DATA XREF: sub_40CFC0+405↓o
.text:0040CF7B                 db 15h dup(90h)
.text:0040CF90 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040CF90                                         ; DATA XREF: sub_40CFC0+40D↓o
.text:0040CFB3                 align 10h
.text:0040CFC0
.text:0040CFC0 ; =============== S U B R O U T I N E =======================================
.text:0040CFC0
.text:0040CFC0
.text:0040CFC0 ; int __cdecl sub_40CFC0(char *FileName, int)
.text:0040CFC0 sub_40CFC0      proc near               ; CODE XREF: sub_40C7D0+12↑p
.text:0040CFC0                                         ; sub_412A80+51↓p
.text:0040CFC0
.text:0040CFC0 Str             = dword ptr -9Ch
.text:0040CFC0 OpenFlag        = dword ptr -98h
.text:0040CFC0 var_94          = dword ptr -94h
.text:0040CFC0 var_90          = dword ptr -90h
.text:0040CFC0 var_8C          = dword ptr -8Ch
.text:0040CFC0 var_88          = dword ptr -88h
.text:0040CFC0 var_84          = dword ptr -84h
.text:0040CFC0 var_80          = dword ptr -80h
.text:0040CFC0 var_7C          = dword ptr -7Ch
.text:0040CFC0 FileName        = dword ptr  4
.text:0040CFC0 arg_4           = dword ptr  8
.text:0040CFC0
.text:0040CFC0                 push    ebp
.text:0040CFC1                 push    edi
.text:0040CFC2                 push    esi
.text:0040CFC3                 push    ebx
.text:0040CFC4                 sub     esp, 8Ch
.text:0040CFCA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040CFD2                 call    _errno
.text:0040CFD7                 mov     edx, [eax]
.text:0040CFD9                 mov     [esp+9Ch+var_8C], edx
.text:0040CFDD                 mov     edx, [esp+9Ch+FileName]
.text:0040CFE4                 mov     [esp+9Ch+Str], edx ; Str
.text:0040CFE7                 call    strlen
.text:0040CFEC                 cmp     eax, 5
.text:0040CFEF                 jle     short loc_40D00D
.text:0040CFF1                 cld
.text:0040CFF2                 mov     ecx, [esp+9Ch+FileName]
.text:0040CFF9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040CFFE                 lea     esi, [eax+ecx-6]
.text:0040D002                 mov     ecx, 7
.text:0040D007                 mov     ebp, esi
.text:0040D009                 repe cmpsb
.text:0040D00B                 jz      short loc_40D028
.text:0040D00D
.text:0040D00D loc_40D00D:                             ; CODE XREF: sub_40CFC0+2F↑j
.text:0040D00D                 call    _errno
.text:0040D012                 mov     dword ptr [eax], 16h
.text:0040D018
.text:0040D018 loc_40D018:                             ; CODE XREF: sub_40CFC0+295↓j
.text:0040D018                                         ; sub_40CFC0+2D8↓j ...
.text:0040D018                 mov     eax, 0FFFFFFFFh
.text:0040D01D
.text:0040D01D loc_40D01D:                             ; CODE XREF: sub_40CFC0+2EF↓j
.text:0040D01D                                         ; sub_40CFC0+332↓j
.text:0040D01D                 add     esp, 8Ch
.text:0040D023                 pop     ebx
.text:0040D024                 pop     esi
.text:0040D025                 pop     edi
.text:0040D026                 pop     ebp
.text:0040D027                 retn
.text:0040D028 ; ---------------------------------------------------------------------------
.text:0040D028
.text:0040D028 loc_40D028:                             ; CODE XREF: sub_40CFC0+4B↑j
.text:0040D028                 mov     ecx, ds:dword_4193A4
.text:0040D02E                 mov     edi, ds:dword_4193A0
.text:0040D034                 mov     eax, ecx
.text:0040D036                 or      eax, edi
.text:0040D038                 jz      loc_40D373
.text:0040D03E
.text:0040D03E loc_40D03E:                             ; CODE XREF: sub_40CFC0+3F8↓j
.text:0040D03E                 rdtsc
.text:0040D040                 mov     edi, edx
.text:0040D042                 mov     esi, eax
.text:0040D044                 call    _getpid
.text:0040D049                 mov     ebx, eax
.text:0040D04B                 mov     edx, esi
.text:0040D04D                 sar     ebx, 1Fh
.text:0040D050                 xor     edx, eax
.text:0040D052                 mov     ecx, edi
.text:0040D054                 xor     ecx, ebx
.text:0040D056                 mov     ebx, edx
.text:0040D058                 mov     esi, ecx
.text:0040D05A                 add     ebx, ds:dword_4193A0
.text:0040D060                 adc     esi, ds:dword_4193A4
.text:0040D066                 xor     edi, edi
.text:0040D068                 mov     ds:dword_4193A0, ebx
.text:0040D06E                 mov     ds:dword_4193A4, esi
.text:0040D074                 lea     esi, [esi+0]
.text:0040D07A                 lea     edi, [edi+0]
.text:0040D080
.text:0040D080 loc_40D080:                             ; CODE XREF: sub_40CFC0+2C7↓j
.text:0040D080                 mov     [esp+9Ch+Str], ebx
.text:0040D083                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D087                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D08F                 mov     [esp+9Ch+var_90], 0
.text:0040D097                 call    sub_414320
.text:0040D09C                 movzx   ecx, ds:byte_40CED0[eax]
.text:0040D0A3                 mov     [ebp+0], cl
.text:0040D0A6                 mov     [esp+9Ch+Str], ebx
.text:0040D0A9                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D0AD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D0B5                 mov     [esp+9Ch+var_90], 0
.text:0040D0BD                 call    sub_4144A0
.text:0040D0C2                 mov     [esp+9Ch+Str], eax
.text:0040D0C5                 mov     ebx, eax
.text:0040D0C7                 mov     esi, edx
.text:0040D0C9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D0D1                 mov     [esp+9Ch+var_90], 0
.text:0040D0D9                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D0DD                 call    sub_414320
.text:0040D0E2                 movzx   edx, ds:byte_40CED0[eax]
.text:0040D0E9                 mov     [ebp+1], dl
.text:0040D0EC                 mov     [esp+9Ch+Str], ebx
.text:0040D0EF                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D0F3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D0FB                 mov     [esp+9Ch+var_90], 0
.text:0040D103                 call    sub_4144A0
.text:0040D108                 mov     [esp+9Ch+Str], eax
.text:0040D10B                 mov     ebx, eax
.text:0040D10D                 mov     esi, edx
.text:0040D10F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D117                 mov     [esp+9Ch+var_90], 0
.text:0040D11F                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D123                 call    sub_414320
.text:0040D128                 movzx   ecx, ds:byte_40CED0[eax]
.text:0040D12F                 mov     [ebp+2], cl
.text:0040D132                 mov     [esp+9Ch+Str], ebx
.text:0040D135                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D139                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D141                 mov     [esp+9Ch+var_90], 0
.text:0040D149                 call    sub_4144A0
.text:0040D14E                 mov     [esp+9Ch+Str], eax
.text:0040D151                 mov     ebx, eax
.text:0040D153                 mov     esi, edx
.text:0040D155                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D15D                 mov     [esp+9Ch+var_90], 0
.text:0040D165                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D169                 call    sub_414320
.text:0040D16E                 movzx   edx, ds:byte_40CED0[eax]
.text:0040D175                 mov     [ebp+3], dl
.text:0040D178                 mov     [esp+9Ch+Str], ebx
.text:0040D17B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D17F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D187                 mov     [esp+9Ch+var_90], 0
.text:0040D18F                 call    sub_4144A0
.text:0040D194                 mov     [esp+9Ch+Str], eax
.text:0040D197                 mov     ebx, eax
.text:0040D199                 mov     esi, edx
.text:0040D19B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D1A3                 mov     [esp+9Ch+var_90], 0
.text:0040D1AB                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D1AF                 call    sub_414320
.text:0040D1B4                 movzx   ecx, ds:byte_40CED0[eax]
.text:0040D1BB                 mov     [ebp+4], cl
.text:0040D1BE                 mov     [esp+9Ch+Str], ebx
.text:0040D1C1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D1C9                 mov     [esp+9Ch+var_90], 0
.text:0040D1D1                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D1D5                 call    sub_4144A0
.text:0040D1DA                 mov     [esp+9Ch+Str], eax
.text:0040D1DD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D1E5                 mov     [esp+9Ch+var_90], 0
.text:0040D1ED                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D1F1                 call    sub_414320
.text:0040D1F6                 movzx   ebx, ds:byte_40CED0[eax]
.text:0040D1FD                 mov     [ebp+5], bl
.text:0040D200                 cmp     [esp+9Ch+arg_4], 1
.text:0040D208                 jz      loc_40D357
.text:0040D20E                 cmp     [esp+9Ch+arg_4], 1
.text:0040D216                 jle     loc_40D320
.text:0040D21C                 cmp     [esp+9Ch+arg_4], 2
.text:0040D224                 jz      loc_40D2F7
.text:0040D22A                 cmp     [esp+9Ch+arg_4], 3
.text:0040D232                 jz      loc_40D2B4
.text:0040D238
.text:0040D238 loc_40D238:                             ; CODE XREF: sub_40CFC0+369↓j
.text:0040D238                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040D23D                 test    ebx, ebx
.text:0040D23F                 jnz     loc_40D3BD
.text:0040D245
.text:0040D245 loc_40D245:                             ; CODE XREF: sub_40CFC0+354↓j
.text:0040D245                 mov     eax, [esp+9Ch+var_88]
.text:0040D249                 test    eax, eax
.text:0040D24B                 jns     short loc_40D2A0
.text:0040D24D                 call    _errno
.text:0040D252                 cmp     dword ptr [eax], 11h
.text:0040D255                 jnz     loc_40D018
.text:0040D25B
.text:0040D25B loc_40D25B:                             ; CODE XREF: sub_40CFC0+315↓j
.text:0040D25B                 mov     edx, ds:dword_4193A0
.text:0040D261                 mov     ecx, ds:dword_4193A4
.text:0040D267                 add     edx, 1E61h
.text:0040D26D                 adc     ecx, 0
.text:0040D270                 mov     ebx, edx
.text:0040D272                 inc     edi
.text:0040D273                 mov     ds:dword_4193A0, edx
.text:0040D279                 cmp     edi, 3A2F8h
.text:0040D27F                 mov     esi, ecx
.text:0040D281                 mov     ds:dword_4193A4, ecx
.text:0040D287                 jb      loc_40D080
.text:0040D28D                 call    _errno
.text:0040D292                 mov     dword ptr [eax], 11h
.text:0040D298                 jmp     loc_40D018
.text:0040D298 ; ---------------------------------------------------------------------------
.text:0040D29D                 align 10h
.text:0040D2A0
.text:0040D2A0 loc_40D2A0:                             ; CODE XREF: sub_40CFC0+28B↑j
.text:0040D2A0                 call    _errno
.text:0040D2A5                 mov     esi, [esp+9Ch+var_8C]
.text:0040D2A9                 mov     [eax], esi
.text:0040D2AB                 mov     eax, [esp+9Ch+var_88]
.text:0040D2AF                 jmp     loc_40D01D
.text:0040D2B4 ; ---------------------------------------------------------------------------
.text:0040D2B4
.text:0040D2B4 loc_40D2B4:                             ; CODE XREF: sub_40CFC0+272↑j
.text:0040D2B4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040D2BB                 mov     ecx, [esp+9Ch+FileName]
.text:0040D2C2                 lea     esi, [esp+9Ch+var_7C]
.text:0040D2C6                 mov     [esp+9Ch+var_94], esi ; int
.text:0040D2CA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040D2CE                 call    sub_40D980
.text:0040D2D3                 test    eax, eax
.text:0040D2D5                 jns     short loc_40D25B
.text:0040D2D7                 call    _errno
.text:0040D2DC                 cmp     dword ptr [eax], 2
.text:0040D2DF                 jnz     loc_40D018
.text:0040D2E5                 call    _errno
.text:0040D2EA                 mov     ebx, [esp+9Ch+var_8C]
.text:0040D2EE                 mov     [eax], ebx
.text:0040D2F0                 xor     eax, eax
.text:0040D2F2                 jmp     loc_40D01D
.text:0040D2F7 ; ---------------------------------------------------------------------------
.text:0040D2F7
.text:0040D2F7 loc_40D2F7:                             ; CODE XREF: sub_40CFC0+264↑j
.text:0040D2F7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040D2FF                 mov     edx, [esp+9Ch+FileName]
.text:0040D306                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040D309                 call    sub_40D880
.text:0040D30E                 mov     esi, esi
.text:0040D310
.text:0040D310 loc_40D310:                             ; CODE XREF: sub_40CFC0+395↓j
.text:0040D310                 mov     [esp+9Ch+var_88], eax
.text:0040D314                 jmp     loc_40D245
.text:0040D314 ; ---------------------------------------------------------------------------
.text:0040D319                 align 10h
.text:0040D320
.text:0040D320 loc_40D320:                             ; CODE XREF: sub_40CFC0+256↑j
.text:0040D320                 mov     eax, [esp+9Ch+arg_4]
.text:0040D327                 test    eax, eax
.text:0040D329                 jnz     loc_40D238
.text:0040D32F                 mov     [esp+9Ch+var_94], 180h
.text:0040D337                 mov     esi, [esp+9Ch+FileName]
.text:0040D33E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040D346                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040D349                 lea     esi, [esi+0]
.text:0040D350
.text:0040D350 loc_40D350:                             ; CODE XREF: sub_40CFC0+3B1↓j
.text:0040D350                 call    _open_0
.text:0040D355                 jmp     short loc_40D310
.text:0040D357 ; ---------------------------------------------------------------------------
.text:0040D357
.text:0040D357 loc_40D357:                             ; CODE XREF: sub_40CFC0+248↑j
.text:0040D357                 mov     [esp+9Ch+var_94], 180h
.text:0040D35F                 mov     ebx, [esp+9Ch+FileName]
.text:0040D366                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040D36E                 mov     [esp+9Ch+Str], ebx
.text:0040D371                 jmp     short loc_40D350
.text:0040D373 ; ---------------------------------------------------------------------------
.text:0040D373
.text:0040D373 loc_40D373:                             ; CODE XREF: sub_40CFC0+78↑j
.text:0040D373                 mov     [esp+9Ch+OpenFlag], 0
.text:0040D37B                 lea     ebx, [esp+9Ch+var_84]
.text:0040D37F                 mov     [esp+9Ch+Str], ebx
.text:0040D382                 call    sub_40D900
.text:0040D387                 mov     edi, [esp+9Ch+var_80]
.text:0040D38B                 mov     edx, [esp+9Ch+var_84]
.text:0040D38F                 mov     ecx, edi
.text:0040D391                 mov     ebx, edi
.text:0040D393                 shl     ecx, 10h
.text:0040D396                 sar     ebx, 1Fh
.text:0040D399                 shld    ebx, edi, 10h
.text:0040D39D                 mov     esi, edx
.text:0040D39F                 mov     edi, edx
.text:0040D3A1                 mov     edx, ecx
.text:0040D3A3                 sar     edi, 1Fh
.text:0040D3A6                 xor     edx, esi
.text:0040D3A8                 mov     ds:dword_4193A0, edx
.text:0040D3AE                 mov     esi, ebx
.text:0040D3B0                 xor     esi, edi
.text:0040D3B2                 mov     ds:dword_4193A4, esi
.text:0040D3B8                 jmp     loc_40D03E
.text:0040D3BD ; ---------------------------------------------------------------------------
.text:0040D3BD
.text:0040D3BD loc_40D3BD:                             ; CODE XREF: sub_40CFC0+27F↑j
.text:0040D3BD                 mov     [esp+9Ch+var_94], 151h
.text:0040D3C5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040D3CD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040D3D4                 call    _assert
.text:0040D3D4 sub_40CFC0      endp
.text:0040D3D4
.text:0040D3D4 ; ---------------------------------------------------------------------------
.text:0040D3D9                 db 17h dup(90h)
.text:0040D3F0
.text:0040D3F0 ; =============== S U B R O U T I N E =======================================
.text:0040D3F0
.text:0040D3F0
.text:0040D3F0 sub_40D3F0      proc near               ; CODE XREF: sub_40C7F0+4F↑p
.text:0040D3F0
.text:0040D3F0 var_8           = dword ptr -8
.text:0040D3F0 var_4           = dword ptr -4
.text:0040D3F0 arg_0           = dword ptr  4
.text:0040D3F0 arg_4           = dword ptr  8
.text:0040D3F0 arg_8           = dword ptr  0Ch
.text:0040D3F0
.text:0040D3F0                 sub     esp, 8
.text:0040D3F3                 mov     ecx, [esp+8+arg_0]
.text:0040D3F7                 mov     [esp+8+var_8], ebx
.text:0040D3FA                 mov     ebx, [esp+8+arg_8]
.text:0040D3FE                 mov     [esp+8+var_4], esi
.text:0040D402                 mov     edx, [esp+8+arg_4]
.text:0040D406                 mov     eax, ebx
.text:0040D408                 and     eax, 7
.text:0040D40B                 cmp     eax, 7          ; switch 8 cases
.text:0040D40E                 ja      short def_40D410 ; jumptable 0040D410 default case
.text:0040D410                 jmp     ds:jpt_40D410[eax*4] ; switch jump
.text:0040D410 ; ---------------------------------------------------------------------------
.text:0040D417                 align 4
.text:0040D418 jpt_40D410      dd offset loc_40D49A    ; DATA XREF: sub_40D3F0+20↑r
.text:0040D418                 dd offset loc_40D4A1    ; jump table for switch statement
.text:0040D418                 dd offset loc_40D438
.text:0040D418                 dd offset loc_40D4A9
.text:0040D418                 dd offset loc_40D4B6
.text:0040D418                 dd offset loc_40D4C3
.text:0040D418                 dd offset loc_40D4D0
.text:0040D418                 dd offset loc_40D4DD
.text:0040D438 ; ---------------------------------------------------------------------------
.text:0040D438
.text:0040D438 loc_40D438:                             ; CODE XREF: sub_40D3F0+20↑j
.text:0040D438                                         ; DATA XREF: sub_40D3F0:jpt_40D410↑o
.text:0040D438                 mov     eax, [edx]      ; jumptable 0040D410 case 2
.text:0040D43A                 sub     ecx, 1Ch
.text:0040D43D                 add     ebx, 6
.text:0040D440                 sub     edx, 18h
.text:0040D443                 lea     esi, [esi+0]
.text:0040D449                 lea     edi, [edi+0]
.text:0040D450
.text:0040D450 loc_40D450:                             ; CODE XREF: sub_40D3F0+A8↓j
.text:0040D450                 mov     esi, [edx+1Ch]
.text:0040D453                 add     edx, 20h ; ' '
.text:0040D456                 mov     [ecx+1Ch], eax
.text:0040D459                 add     ecx, 20h ; ' '
.text:0040D45C                 sub     ebx, 8
.text:0040D45F                 jnz     short def_40D410 ; jumptable 0040D410 default case
.text:0040D461                 mov     [ecx], esi
.text:0040D463                 mov     ebx, [esp+8+var_8]
.text:0040D466                 mov     esi, [esp+8+var_4]
.text:0040D46A                 add     esp, 8
.text:0040D46D                 retn
.text:0040D46D ; ---------------------------------------------------------------------------
.text:0040D46E                 align 10h
.text:0040D470
.text:0040D470 def_40D410:                             ; CODE XREF: sub_40D3F0+1E↑j
.text:0040D470                                         ; sub_40D3F0+6F↑j ...
.text:0040D470                 mov     eax, [edx]      ; jumptable 0040D410 default case
.text:0040D472                 mov     [ecx], esi
.text:0040D474
.text:0040D474 loc_40D474:                             ; CODE XREF: sub_40D3F0+AF↓j
.text:0040D474                 mov     esi, [edx+4]
.text:0040D477                 mov     [ecx+4], eax
.text:0040D47A
.text:0040D47A loc_40D47A:                             ; CODE XREF: sub_40D3F0+F6↓j
.text:0040D47A                 mov     eax, [edx+8]
.text:0040D47D                 mov     [ecx+8], esi
.text:0040D480
.text:0040D480 loc_40D480:                             ; CODE XREF: sub_40D3F0+EB↓j
.text:0040D480                 mov     esi, [edx+0Ch]
.text:0040D483                 mov     [ecx+0Ch], eax
.text:0040D486
.text:0040D486 loc_40D486:                             ; CODE XREF: sub_40D3F0+DE↓j
.text:0040D486                 mov     eax, [edx+10h]
.text:0040D489                 mov     [ecx+10h], esi
.text:0040D48C
.text:0040D48C loc_40D48C:                             ; CODE XREF: sub_40D3F0+D1↓j
.text:0040D48C                 mov     esi, [edx+14h]
.text:0040D48F                 mov     [ecx+14h], eax
.text:0040D492
.text:0040D492 loc_40D492:                             ; CODE XREF: sub_40D3F0+C4↓j
.text:0040D492                 mov     eax, [edx+18h]
.text:0040D495                 mov     [ecx+18h], esi
.text:0040D498                 jmp     short loc_40D450
.text:0040D49A ; ---------------------------------------------------------------------------
.text:0040D49A
.text:0040D49A loc_40D49A:                             ; CODE XREF: sub_40D3F0+20↑j
.text:0040D49A                                         ; DATA XREF: sub_40D3F0:jpt_40D410↑o
.text:0040D49A                 mov     eax, [edx]      ; jumptable 0040D410 case 0
.text:0040D49C                 sub     ecx, 4
.text:0040D49F                 jmp     short loc_40D474
.text:0040D4A1 ; ---------------------------------------------------------------------------
.text:0040D4A1
.text:0040D4A1 loc_40D4A1:                             ; CODE XREF: sub_40D3F0+20↑j
.text:0040D4A1                                         ; DATA XREF: sub_40D3F0:jpt_40D410↑o
.text:0040D4A1                 mov     esi, [edx]      ; jumptable 0040D410 case 1
.text:0040D4A3                 dec     ebx
.text:0040D4A4                 add     edx, 4
.text:0040D4A7                 jmp     short def_40D410 ; jumptable 0040D410 default case
.text:0040D4A9 ; ---------------------------------------------------------------------------
.text:0040D4A9
.text:0040D4A9 loc_40D4A9:                             ; CODE XREF: sub_40D3F0+20↑j
.text:0040D4A9                                         ; DATA XREF: sub_40D3F0:jpt_40D410↑o
.text:0040D4A9                 mov     esi, [edx]      ; jumptable 0040D410 case 3
.text:0040D4AB                 sub     ecx, 18h
.text:0040D4AE                 add     ebx, 5
.text:0040D4B1                 sub     edx, 14h
.text:0040D4B4                 jmp     short loc_40D492
.text:0040D4B6 ; ---------------------------------------------------------------------------
.text:0040D4B6
.text:0040D4B6 loc_40D4B6:                             ; CODE XREF: sub_40D3F0+20↑j
.text:0040D4B6                                         ; DATA XREF: sub_40D3F0:jpt_40D410↑o
.text:0040D4B6                 mov     eax, [edx]      ; jumptable 0040D410 case 4
.text:0040D4B8                 sub     ecx, 14h
.text:0040D4BB                 add     ebx, 4
.text:0040D4BE                 sub     edx, 10h
.text:0040D4C1                 jmp     short loc_40D48C
.text:0040D4C3 ; ---------------------------------------------------------------------------
.text:0040D4C3
.text:0040D4C3 loc_40D4C3:                             ; CODE XREF: sub_40D3F0+20↑j
.text:0040D4C3                                         ; DATA XREF: sub_40D3F0:jpt_40D410↑o
.text:0040D4C3                 mov     esi, [edx]      ; jumptable 0040D410 case 5
.text:0040D4C5                 sub     ecx, 10h
.text:0040D4C8                 add     ebx, 3
.text:0040D4CB                 sub     edx, 0Ch
.text:0040D4CE                 jmp     short loc_40D486
.text:0040D4D0 ; ---------------------------------------------------------------------------
.text:0040D4D0
.text:0040D4D0 loc_40D4D0:                             ; CODE XREF: sub_40D3F0+20↑j
.text:0040D4D0                                         ; DATA XREF: sub_40D3F0:jpt_40D410↑o
.text:0040D4D0                 mov     eax, [edx]      ; jumptable 0040D410 case 6
.text:0040D4D2                 sub     ecx, 0Ch
.text:0040D4D5                 add     ebx, 2
.text:0040D4D8                 sub     edx, 8
.text:0040D4DB                 jmp     short loc_40D480
.text:0040D4DD ; ---------------------------------------------------------------------------
.text:0040D4DD
.text:0040D4DD loc_40D4DD:                             ; CODE XREF: sub_40D3F0+20↑j
.text:0040D4DD                                         ; DATA XREF: sub_40D3F0:jpt_40D410↑o
.text:0040D4DD                 mov     esi, [edx]      ; jumptable 0040D410 case 7
.text:0040D4DF                 sub     ecx, 8
.text:0040D4E2                 inc     ebx
.text:0040D4E3                 sub     edx, 4
.text:0040D4E6                 jmp     short loc_40D47A
.text:0040D4E6 sub_40D3F0      endp
.text:0040D4E6
.text:0040D4E6 ; ---------------------------------------------------------------------------
.text:0040D4E8                 align 10h
.text:0040D4F0
.text:0040D4F0 ; =============== S U B R O U T I N E =======================================
.text:0040D4F0
.text:0040D4F0
.text:0040D4F0 sub_40D4F0      proc near               ; CODE XREF: sub_40C7F0+93↑p
.text:0040D4F0
.text:0040D4F0 var_1C          = dword ptr -1Ch
.text:0040D4F0 var_18          = dword ptr -18h
.text:0040D4F0 var_14          = dword ptr -14h
.text:0040D4F0 arg_0           = dword ptr  4
.text:0040D4F0 arg_4           = dword ptr  8
.text:0040D4F0 arg_8           = dword ptr  0Ch
.text:0040D4F0
.text:0040D4F0                 push    ebp
.text:0040D4F1                 push    edi
.text:0040D4F2                 push    esi
.text:0040D4F3                 push    ebx
.text:0040D4F4                 sub     esp, 0Ch
.text:0040D4F7                 mov     edx, [esp+1Ch+arg_4]
.text:0040D4FB                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:0040D503                 mov     eax, [esp+1Ch+arg_8]
.text:0040D507                 mov     esi, [esp+1Ch+arg_0]
.text:0040D50B                 mov     ecx, edx
.text:0040D50D                 and     ecx, 3
.text:0040D510                 and     eax, 3
.text:0040D513                 shl     ecx, 3
.text:0040D516                 and     edx, 0FFFFFFFCh
.text:0040D519                 sub     [esp+1Ch+var_14], ecx
.text:0040D51D                 cmp     eax, 1
.text:0040D520                 mov     [esp+1Ch+var_18], ecx
.text:0040D524                 jz      loc_40D610
.text:0040D52A                 cmp     eax, 1
.text:0040D52D                 jb      loc_40D600
.text:0040D533                 cmp     eax, 2
.text:0040D536                 jz      loc_40D5E4
.text:0040D53C                 cmp     eax, 3
.text:0040D53F                 jz      loc_40D5D3
.text:0040D545
.text:0040D545 loc_40D545:                             ; CODE XREF: sub_40D4F0+C7↓j
.text:0040D545                                         ; sub_40D4F0+12C↓j
.text:0040D545                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040D54A                 mov     eax, edi
.text:0040D54C                 mov     ebx, [edx]
.text:0040D54E                 shr     ebp, cl
.text:0040D550                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040D555                 shl     eax, cl
.text:0040D557                 or      ebp, eax
.text:0040D559                 mov     [esi], ebp
.text:0040D55B
.text:0040D55B loc_40D55B:                             ; CODE XREF: sub_40D4F0+11B↓j
.text:0040D55B                 mov     ecx, [edx+4]
.text:0040D55E                 mov     ebp, ebx
.text:0040D560                 mov     [esp+1Ch+var_1C], ecx
.text:0040D563                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040D568                 shr     edi, cl
.text:0040D56A                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040D56F                 shl     ebp, cl
.text:0040D571                 or      edi, ebp
.text:0040D573                 mov     [esi+4], edi
.text:0040D576
.text:0040D576 loc_40D576:                             ; CODE XREF: sub_40D4F0+F2↓j
.text:0040D576                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040D57B                 mov     edi, [esp+1Ch+var_1C]
.text:0040D57E                 mov     ebp, [edx+8]
.text:0040D581                 shr     ebx, cl
.text:0040D583                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040D588                 shl     edi, cl
.text:0040D58A                 or      ebx, edi
.text:0040D58C                 mov     [esi+8], ebx
.text:0040D58F
.text:0040D58F loc_40D58F:                             ; CODE XREF: sub_40D4F0+107↓j
.text:0040D58F                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040D594                 mov     ebx, ebp
.text:0040D596                 mov     edi, [edx+0Ch]
.text:0040D599                 add     edx, 10h
.text:0040D59C                 shr     [esp+1Ch+var_1C], cl
.text:0040D59F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040D5A4                 shl     ebx, cl
.text:0040D5A6                 or      [esp+1Ch+var_1C], ebx
.text:0040D5A9                 mov     ebx, [esp+1Ch+var_1C]
.text:0040D5AC                 mov     [esi+0Ch], ebx
.text:0040D5AF                 add     esi, 10h
.text:0040D5B2                 sub     [esp+1Ch+arg_8], 4
.text:0040D5B7                 jnz     short loc_40D545
.text:0040D5B9                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040D5BE                 shr     ebp, cl
.text:0040D5C0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0040D5C5                 shl     edi, cl
.text:0040D5C7                 or      ebp, edi
.text:0040D5C9                 mov     [esi], ebp
.text:0040D5CB                 add     esp, 0Ch
.text:0040D5CE                 pop     ebx
.text:0040D5CF                 pop     esi
.text:0040D5D0                 pop     edi
.text:0040D5D1                 pop     ebp
.text:0040D5D2                 retn
.text:0040D5D3 ; ---------------------------------------------------------------------------
.text:0040D5D3
.text:0040D5D3 loc_40D5D3:                             ; CODE XREF: sub_40D4F0+4F↑j
.text:0040D5D3                 inc     [esp+1Ch+arg_8]
.text:0040D5D7                 sub     esi, 8
.text:0040D5DA                 mov     eax, [edx+4]
.text:0040D5DD                 mov     ebx, [edx]
.text:0040D5DF                 mov     [esp+1Ch+var_1C], eax
.text:0040D5E2                 jmp     short loc_40D576
.text:0040D5E4 ; ---------------------------------------------------------------------------
.text:0040D5E4
.text:0040D5E4 loc_40D5E4:                             ; CODE XREF: sub_40D4F0+46↑j
.text:0040D5E4                 add     [esp+1Ch+arg_8], 2
.text:0040D5E9                 sub     esi, 0Ch
.text:0040D5EC                 mov     ecx, [edx]
.text:0040D5EE                 mov     ebp, [edx+4]
.text:0040D5F1                 sub     edx, 4
.text:0040D5F4                 mov     [esp+1Ch+var_1C], ecx
.text:0040D5F7                 jmp     short loc_40D58F
.text:0040D5F7 ; ---------------------------------------------------------------------------
.text:0040D5F9                 align 10h
.text:0040D600
.text:0040D600 loc_40D600:                             ; CODE XREF: sub_40D4F0+3D↑j
.text:0040D600                 mov     edi, [edx]
.text:0040D602                 sub     esi, 4
.text:0040D605                 mov     ebx, [edx+4]
.text:0040D608                 add     edx, 4
.text:0040D60B                 jmp     loc_40D55B
.text:0040D610 ; ---------------------------------------------------------------------------
.text:0040D610
.text:0040D610 loc_40D610:                             ; CODE XREF: sub_40D4F0+34↑j
.text:0040D610                 dec     [esp+1Ch+arg_8]
.text:0040D614                 mov     ebp, [edx]
.text:0040D616                 mov     edi, [edx+4]
.text:0040D619                 add     edx, 8
.text:0040D61C                 jmp     loc_40D545
.text:0040D61C sub_40D4F0      endp
.text:0040D61C
.text:0040D621 ; ---------------------------------------------------------------------------
.text:0040D621                 jmp     short loc_40D630
.text:0040D621 ; ---------------------------------------------------------------------------
.text:0040D623                 align 10h
.text:0040D630
.text:0040D630 loc_40D630:                             ; CODE XREF: .text:0040D621↑j
.text:0040D630                 sub     esp, 8
.text:0040D633                 mov     ecx, [esp+0Ch]
.text:0040D637                 mov     [esp+4], esi
.text:0040D63B                 mov     esi, [esp+14h]
.text:0040D63F                 mov     [esp], ebx
.text:0040D642                 mov     edx, [esp+10h]
.text:0040D646                 mov     eax, esi
.text:0040D648                 and     eax, 7
.text:0040D64B                 cmp     eax, 7          ; switch 8 cases
.text:0040D64E                 ja      short def_40D650 ; jumptable 0040D650 default case
.text:0040D650                 jmp     ds:jpt_40D650[eax*4] ; switch jump
.text:0040D650 ; ---------------------------------------------------------------------------
.text:0040D657                 align 4
.text:0040D658 jpt_40D650      dd offset loc_40D6DC    ; DATA XREF: .text:0040D650↑r
.text:0040D658                 dd offset loc_40D6E7    ; jump table for switch statement
.text:0040D658                 dd offset loc_40D678
.text:0040D658                 dd offset loc_40D6F3
.text:0040D658                 dd offset loc_40D701
.text:0040D658                 dd offset loc_40D70F
.text:0040D658                 dd offset loc_40D71D
.text:0040D658                 dd offset loc_40D72B
.text:0040D678 ; ---------------------------------------------------------------------------
.text:0040D678
.text:0040D678 loc_40D678:                             ; CODE XREF: .text:0040D650↑j
.text:0040D678                                         ; DATA XREF: .text:jpt_40D650↑o
.text:0040D678                 sub     edx, 8          ; jumptable 0040D650 case 2
.text:0040D67B                 sub     ecx, 4
.text:0040D67E                 mov     eax, [edx+4]
.text:0040D681                 add     esi, 6
.text:0040D684                 lea     esi, [esi+0]
.text:0040D68A                 lea     edi, [edi+0]
.text:0040D690
.text:0040D690 loc_40D690:                             ; CODE XREF: .text:0040D6DA↓j
.text:0040D690                 mov     ebx, [edx]
.text:0040D692                 sub     edx, 20h ; ' '
.text:0040D695                 mov     [ecx], eax
.text:0040D697                 sub     ecx, 20h ; ' '
.text:0040D69A                 sub     esi, 8
.text:0040D69D                 jnz     short def_40D650 ; jumptable 0040D650 default case
.text:0040D69F                 mov     [ecx+1Ch], ebx
.text:0040D6A2                 mov     ebx, [esp]
.text:0040D6A5                 mov     esi, [esp+4]
.text:0040D6A9                 add     esp, 8
.text:0040D6AC                 retn
.text:0040D6AC ; ---------------------------------------------------------------------------
.text:0040D6AD                 align 10h
.text:0040D6B0
.text:0040D6B0 def_40D650:                             ; CODE XREF: .text:0040D64E↑j
.text:0040D6B0                                         ; .text:0040D69D↑j ...
.text:0040D6B0                 mov     eax, [edx+1Ch]  ; jumptable 0040D650 default case
.text:0040D6B3                 mov     [ecx+1Ch], ebx
.text:0040D6B6
.text:0040D6B6 loc_40D6B6:                             ; CODE XREF: .text:0040D6E5↓j
.text:0040D6B6                 mov     ebx, [edx+18h]
.text:0040D6B9                 mov     [ecx+18h], eax
.text:0040D6BC
.text:0040D6BC loc_40D6BC:                             ; CODE XREF: .text:0040D735↓j
.text:0040D6BC                 mov     eax, [edx+14h]
.text:0040D6BF                 mov     [ecx+14h], ebx
.text:0040D6C2
.text:0040D6C2 loc_40D6C2:                             ; CODE XREF: .text:0040D729↓j
.text:0040D6C2                 mov     ebx, [edx+10h]
.text:0040D6C5                 mov     [ecx+10h], eax
.text:0040D6C8
.text:0040D6C8 loc_40D6C8:                             ; CODE XREF: .text:0040D71B↓j
.text:0040D6C8                 mov     eax, [edx+0Ch]
.text:0040D6CB                 mov     [ecx+0Ch], ebx
.text:0040D6CE
.text:0040D6CE loc_40D6CE:                             ; CODE XREF: .text:0040D70D↓j
.text:0040D6CE                 mov     ebx, [edx+8]
.text:0040D6D1                 mov     [ecx+8], eax
.text:0040D6D4
.text:0040D6D4 loc_40D6D4:                             ; CODE XREF: .text:0040D6FF↓j
.text:0040D6D4                 mov     eax, [edx+4]
.text:0040D6D7                 mov     [ecx+4], ebx
.text:0040D6DA                 jmp     short loc_40D690
.text:0040D6DC ; ---------------------------------------------------------------------------
.text:0040D6DC
.text:0040D6DC loc_40D6DC:                             ; CODE XREF: .text:0040D650↑j
.text:0040D6DC                                         ; DATA XREF: .text:jpt_40D650↑o
.text:0040D6DC                 sub     edx, 20h ; ' '  ; jumptable 0040D650 case 0
.text:0040D6DF                 sub     ecx, 1Ch
.text:0040D6E2                 mov     eax, [edx+1Ch]
.text:0040D6E5                 jmp     short loc_40D6B6
.text:0040D6E7 ; ---------------------------------------------------------------------------
.text:0040D6E7
.text:0040D6E7 loc_40D6E7:                             ; CODE XREF: .text:0040D650↑j
.text:0040D6E7                                         ; DATA XREF: .text:jpt_40D650↑o
.text:0040D6E7                 sub     edx, 24h ; '$'  ; jumptable 0040D650 case 1
.text:0040D6EA                 sub     ecx, 20h ; ' '
.text:0040D6ED                 mov     ebx, [edx+20h]
.text:0040D6F0                 dec     esi
.text:0040D6F1                 jmp     short def_40D650 ; jumptable 0040D650 default case
.text:0040D6F3 ; ---------------------------------------------------------------------------
.text:0040D6F3
.text:0040D6F3 loc_40D6F3:                             ; CODE XREF: .text:0040D650↑j
.text:0040D6F3                                         ; DATA XREF: .text:jpt_40D650↑o
.text:0040D6F3                 sub     edx, 0Ch        ; jumptable 0040D650 case 3
.text:0040D6F6                 sub     ecx, 8
.text:0040D6F9                 mov     ebx, [edx+8]
.text:0040D6FC                 add     esi, 5
.text:0040D6FF                 jmp     short loc_40D6D4
.text:0040D701 ; ---------------------------------------------------------------------------
.text:0040D701
.text:0040D701 loc_40D701:                             ; CODE XREF: .text:0040D650↑j
.text:0040D701                                         ; DATA XREF: .text:jpt_40D650↑o
.text:0040D701                 sub     edx, 10h        ; jumptable 0040D650 case 4
.text:0040D704                 sub     ecx, 0Ch
.text:0040D707                 mov     eax, [edx+0Ch]
.text:0040D70A                 add     esi, 4
.text:0040D70D                 jmp     short loc_40D6CE
.text:0040D70F ; ---------------------------------------------------------------------------
.text:0040D70F
.text:0040D70F loc_40D70F:                             ; CODE XREF: .text:0040D650↑j
.text:0040D70F                                         ; DATA XREF: .text:jpt_40D650↑o
.text:0040D70F                 sub     edx, 14h        ; jumptable 0040D650 case 5
.text:0040D712                 sub     ecx, 10h
.text:0040D715                 mov     ebx, [edx+10h]
.text:0040D718                 add     esi, 3
.text:0040D71B                 jmp     short loc_40D6C8
.text:0040D71D ; ---------------------------------------------------------------------------
.text:0040D71D
.text:0040D71D loc_40D71D:                             ; CODE XREF: .text:0040D650↑j
.text:0040D71D                                         ; DATA XREF: .text:jpt_40D650↑o
.text:0040D71D                 sub     edx, 18h        ; jumptable 0040D650 case 6
.text:0040D720                 sub     ecx, 14h
.text:0040D723                 mov     eax, [edx+14h]
.text:0040D726                 add     esi, 2
.text:0040D729                 jmp     short loc_40D6C2
.text:0040D72B ; ---------------------------------------------------------------------------
.text:0040D72B
.text:0040D72B loc_40D72B:                             ; CODE XREF: .text:0040D650↑j
.text:0040D72B                                         ; DATA XREF: .text:jpt_40D650↑o
.text:0040D72B                 sub     edx, 1Ch        ; jumptable 0040D650 case 7
.text:0040D72E                 sub     ecx, 18h
.text:0040D731                 mov     ebx, [edx+18h]
.text:0040D734                 inc     esi
.text:0040D735                 jmp     short loc_40D6BC
.text:0040D735 ; ---------------------------------------------------------------------------
.text:0040D737                 align 10h
.text:0040D740                 push    ebp
.text:0040D741                 push    edi
.text:0040D742                 push    esi
.text:0040D743                 push    ebx
.text:0040D744                 sub     esp, 8
.text:0040D747                 mov     edx, [esp+20h]
.text:0040D74B                 mov     dword ptr [esp+4], 20h ; ' '
.text:0040D753                 mov     eax, [esp+24h]
.text:0040D757                 mov     ecx, edx
.text:0040D759                 and     ecx, 3
.text:0040D75C                 and     eax, 3
.text:0040D75F                 shl     ecx, 3
.text:0040D762                 sub     [esp+4], ecx
.text:0040D766                 and     edx, 0FFFFFFFCh
.text:0040D769                 add     edx, 4
.text:0040D76C                 mov     [esp], ecx
.text:0040D76F                 cmp     eax, 1
.text:0040D772                 jz      loc_40D868
.text:0040D778                 cmp     eax, 1
.text:0040D77B                 jb      loc_40D855
.text:0040D781                 cmp     eax, 2
.text:0040D784                 jz      loc_40D840
.text:0040D78A                 cmp     eax, 3
.text:0040D78D                 jz      loc_40D82C
.text:0040D793
.text:0040D793 loc_40D793:                             ; CODE XREF: .text:0040D80C↓j
.text:0040D793                                         ; .text:0040D87A↓j
.text:0040D793                 movzx   ecx, byte ptr [esp]
.text:0040D797                 mov     eax, edi
.text:0040D799                 mov     ebx, [esp+1Ch]
.text:0040D79D                 mov     esi, [edx+0Ch]
.text:0040D7A0                 shr     eax, cl
.text:0040D7A2                 movzx   ecx, byte ptr [esp+4]
.text:0040D7A7                 shl     ebp, cl
.text:0040D7A9                 or      eax, ebp
.text:0040D7AB                 mov     [ebx+0Ch], eax
.text:0040D7AE
.text:0040D7AE loc_40D7AE:                             ; CODE XREF: .text:0040D863↓j
.text:0040D7AE                 movzx   ecx, byte ptr [esp]
.text:0040D7B2                 mov     ebp, esi
.text:0040D7B4                 mov     ebx, [edx+8]
.text:0040D7B7                 shr     ebp, cl
.text:0040D7B9                 movzx   ecx, byte ptr [esp+4]
.text:0040D7BE                 shl     edi, cl
.text:0040D7C0                 or      ebp, edi
.text:0040D7C2                 mov     edi, [esp+1Ch]
.text:0040D7C6                 mov     [edi+8], ebp
.text:0040D7C9
.text:0040D7C9 loc_40D7C9:                             ; CODE XREF: .text:0040D83E↓j
.text:0040D7C9                 movzx   ecx, byte ptr [esp]
.text:0040D7CD                 mov     edi, ebx
.text:0040D7CF                 mov     ebp, [edx+4]
.text:0040D7D2                 shr     edi, cl
.text:0040D7D4                 movzx   ecx, byte ptr [esp+4]
.text:0040D7D9                 shl     esi, cl
.text:0040D7DB                 or      edi, esi
.text:0040D7DD                 mov     esi, [esp+1Ch]
.text:0040D7E1                 mov     [esi+4], edi
.text:0040D7E4
.text:0040D7E4 loc_40D7E4:                             ; CODE XREF: .text:0040D853↓j
.text:0040D7E4                 movzx   ecx, byte ptr [esp]
.text:0040D7E8                 mov     esi, ebp
.text:0040D7EA                 mov     edi, [edx]
.text:0040D7EC                 sub     edx, 10h
.text:0040D7EF                 shr     esi, cl
.text:0040D7F1                 movzx   ecx, byte ptr [esp+4]
.text:0040D7F6                 shl     ebx, cl
.text:0040D7F8                 or      esi, ebx
.text:0040D7FA                 mov     ebx, [esp+1Ch]
.text:0040D7FE                 mov     [ebx], esi
.text:0040D800                 sub     ebx, 10h
.text:0040D803                 sub     dword ptr [esp+24h], 4
.text:0040D808                 mov     [esp+1Ch], ebx
.text:0040D80C                 jnz     short loc_40D793
.text:0040D80E                 movzx   ecx, byte ptr [esp]
.text:0040D812                 mov     edx, [esp+1Ch]
.text:0040D816                 shr     edi, cl
.text:0040D818                 movzx   ecx, byte ptr [esp+4]
.text:0040D81D                 shl     ebp, cl
.text:0040D81F                 or      edi, ebp
.text:0040D821                 mov     [edx+0Ch], edi
.text:0040D824                 add     esp, 8
.text:0040D827                 pop     ebx
.text:0040D828                 pop     esi
.text:0040D829                 pop     edi
.text:0040D82A                 pop     ebp
.text:0040D82B                 retn
.text:0040D82C ; ---------------------------------------------------------------------------
.text:0040D82C
.text:0040D82C loc_40D82C:                             ; CODE XREF: .text:0040D78D↑j
.text:0040D82C                 sub     dword ptr [esp+1Ch], 8
.text:0040D831                 sub     edx, 10h
.text:0040D834                 inc     dword ptr [esp+24h]
.text:0040D838                 mov     esi, [edx+0Ch]
.text:0040D83B                 mov     ebx, [edx+8]
.text:0040D83E                 jmp     short loc_40D7C9
.text:0040D840 ; ---------------------------------------------------------------------------
.text:0040D840
.text:0040D840 loc_40D840:                             ; CODE XREF: .text:0040D784↑j
.text:0040D840                 sub     dword ptr [esp+1Ch], 4
.text:0040D845                 sub     edx, 0Ch
.text:0040D848                 add     dword ptr [esp+24h], 2
.text:0040D84D                 mov     ebx, [edx+8]
.text:0040D850                 mov     ebp, [edx+4]
.text:0040D853                 jmp     short loc_40D7E4
.text:0040D855 ; ---------------------------------------------------------------------------
.text:0040D855
.text:0040D855 loc_40D855:                             ; CODE XREF: .text:0040D77B↑j
.text:0040D855                 sub     dword ptr [esp+1Ch], 0Ch
.text:0040D85A                 sub     edx, 14h
.text:0040D85D                 mov     edi, [edx+10h]
.text:0040D860                 mov     esi, [edx+0Ch]
.text:0040D863                 jmp     loc_40D7AE
.text:0040D868 ; ---------------------------------------------------------------------------
.text:0040D868
.text:0040D868 loc_40D868:                             ; CODE XREF: .text:0040D772↑j
.text:0040D868                 sub     dword ptr [esp+1Ch], 10h
.text:0040D86D                 sub     edx, 18h
.text:0040D870                 dec     dword ptr [esp+24h]
.text:0040D874                 mov     ebp, [edx+14h]
.text:0040D877                 mov     edi, [edx+10h]
.text:0040D87A                 jmp     loc_40D793
.text:0040D87A ; ---------------------------------------------------------------------------
.text:0040D87F                 align 10h
.text:0040D880
.text:0040D880 ; =============== S U B R O U T I N E =======================================
.text:0040D880
.text:0040D880
.text:0040D880 ; int __cdecl sub_40D880(LPCSTR, int AccessMode)
.text:0040D880 sub_40D880      proc near               ; CODE XREF: sub_40CFC0+349↑p
.text:0040D880
.text:0040D880 lpPathName      = dword ptr -1Ch
.text:0040D880 lpSecurityAttributes= dword ptr -18h
.text:0040D880 var_8           = dword ptr -8
.text:0040D880 var_4           = dword ptr -4
.text:0040D880 arg_0           = dword ptr  4
.text:0040D880 AccessMode      = dword ptr  8
.text:0040D880
.text:0040D880                 sub     esp, 1Ch
.text:0040D883                 mov     [esp+1Ch+var_8], ebx
.text:0040D887                 mov     ebx, [esp+1Ch+arg_0]
.text:0040D88B                 mov     [esp+1Ch+var_4], esi
.text:0040D88F                 mov     esi, [esp+1Ch+AccessMode]
.text:0040D893                 test    ebx, ebx
.text:0040D895                 jz      short loc_40D8E5
.text:0040D897                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040D89F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040D8A2                 call    CreateDirectoryA
.text:0040D8A7                 sub     esp, 8
.text:0040D8AA                 test    eax, eax
.text:0040D8AC                 jz      short loc_40D8C6
.text:0040D8AE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040D8B2                 mov     esi, [esp+1Ch+var_4]
.text:0040D8B6                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040D8BA                 mov     ebx, [esp+1Ch+var_8]
.text:0040D8BE                 add     esp, 1Ch
.text:0040D8C1                 jmp     _chmod
.text:0040D8C6 ; ---------------------------------------------------------------------------
.text:0040D8C6
.text:0040D8C6 loc_40D8C6:                             ; CODE XREF: sub_40D880+2C↑j
.text:0040D8C6                 call    sub_40CB20
.text:0040D8CB                 mov     esi, eax
.text:0040D8CD                 call    _errno
.text:0040D8D2                 mov     [eax], esi
.text:0040D8D4
.text:0040D8D4 loc_40D8D4:                             ; CODE XREF: sub_40D880+70↓j
.text:0040D8D4                 mov     ebx, [esp+1Ch+var_8]
.text:0040D8D8                 mov     eax, 0FFFFFFFFh
.text:0040D8DD                 mov     esi, [esp+1Ch+var_4]
.text:0040D8E1                 add     esp, 1Ch
.text:0040D8E4                 retn
.text:0040D8E5 ; ---------------------------------------------------------------------------
.text:0040D8E5
.text:0040D8E5 loc_40D8E5:                             ; CODE XREF: sub_40D880+15↑j
.text:0040D8E5                 call    _errno
.text:0040D8EA                 mov     dword ptr [eax], 16h
.text:0040D8F0                 jmp     short loc_40D8D4
.text:0040D8F0 sub_40D880      endp
.text:0040D8F0
.text:0040D8F0 ; ---------------------------------------------------------------------------
.text:0040D8F2                 align 10h
.text:0040D900
.text:0040D900 ; =============== S U B R O U T I N E =======================================
.text:0040D900
.text:0040D900
.text:0040D900 sub_40D900      proc near               ; CODE XREF: sub_40CFC0+3C2↑p
.text:0040D900
.text:0040D900 var_1C          = dword ptr -1Ch
.text:0040D900 var_18          = dword ptr -18h
.text:0040D900 var_C           = dword ptr -0Ch
.text:0040D900 var_8           = dword ptr -8
.text:0040D900 var_4           = dword ptr -4
.text:0040D900 arg_0           = dword ptr  4
.text:0040D900 arg_4           = dword ptr  8
.text:0040D900
.text:0040D900                 sub     esp, 1Ch
.text:0040D903                 mov     edx, [esp+1Ch+arg_4]
.text:0040D907                 mov     [esp+1Ch+var_4], ebx
.text:0040D90B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040D90F                 mov     [esp+1Ch+var_18], edx
.text:0040D913                 lea     edx, [esp+1Ch+var_C]
.text:0040D917                 mov     [esp+1Ch+var_1C], edx
.text:0040D91A                 call    sub_40DA90
.text:0040D91F                 test    eax, eax
.text:0040D921                 mov     edx, 0FFFFFFFFh
.text:0040D926                 jnz     short loc_40D94A
.text:0040D928                 mov     ecx, [esp+1Ch+var_C]
.text:0040D92C                 mov     edx, 10624DD3h
.text:0040D931                 mov     [ebx], ecx
.text:0040D933                 mov     ecx, [esp+1Ch+var_8]
.text:0040D937                 mov     eax, ecx
.text:0040D939                 imul    edx
.text:0040D93B                 mov     eax, ecx
.text:0040D93D                 sar     eax, 1Fh
.text:0040D940                 sar     edx, 6
.text:0040D943                 sub     edx, eax
.text:0040D945                 mov     [ebx+4], edx
.text:0040D948                 xor     edx, edx
.text:0040D94A
.text:0040D94A loc_40D94A:                             ; CODE XREF: sub_40D900+26↑j
.text:0040D94A                 mov     ebx, [esp+1Ch+var_4]
.text:0040D94E                 mov     eax, edx
.text:0040D950                 add     esp, 1Ch
.text:0040D953                 retn
.text:0040D953 sub_40D900      endp
.text:0040D953
.text:0040D953 ; ---------------------------------------------------------------------------
.text:0040D954                 align 10h
.text:0040D960
.text:0040D960 ; =============== S U B R O U T I N E =======================================
.text:0040D960
.text:0040D960
.text:0040D960 sub_40D960      proc near               ; CODE XREF: .text:0040CDE7↑p
.text:0040D960                                         ; .text:0040CE77↑p ...
.text:0040D960                 mov     edx, ds:dword_4193B0
.text:0040D966                 test    edx, edx
.text:0040D968                 jnz     short loc_40D970
.text:0040D96A                 jmp     getenv
.text:0040D96A ; ---------------------------------------------------------------------------
.text:0040D96F                 align 10h
.text:0040D970
.text:0040D970 loc_40D970:                             ; CODE XREF: sub_40D960+8↑j
.text:0040D970                 xor     eax, eax
.text:0040D972                 retn
.text:0040D972 sub_40D960      endp
.text:0040D972
.text:0040D972 ; ---------------------------------------------------------------------------
.text:0040D973                 align 10h
.text:0040D980
.text:0040D980 ; =============== S U B R O U T I N E =======================================
.text:0040D980
.text:0040D980
.text:0040D980 ; int __cdecl sub_40D980(LPCSTR, int, int)
.text:0040D980 sub_40D980      proc near               ; CODE XREF: sub_40CFC0+30E↑p
.text:0040D980                                         ; sub_40D9D0+42↓p ...
.text:0040D980
.text:0040D980 lpFileName      = dword ptr -2Ch
.text:0040D980 dwDesiredAccess = dword ptr -28h
.text:0040D980 dwShareMode     = dword ptr -24h
.text:0040D980 lpSecurityAttributes= dword ptr -20h
.text:0040D980 dwCreationDisposition= dword ptr -1Ch
.text:0040D980 dwFlagsAndAttributes= dword ptr -18h
.text:0040D980 hTemplateFile   = dword ptr -14h
.text:0040D980 var_10          = dword ptr -10h
.text:0040D980 var_C           = dword ptr -0Ch
.text:0040D980 var_8           = dword ptr -8
.text:0040D980 var_4           = dword ptr -4
.text:0040D980 arg_0           = dword ptr  4
.text:0040D980 arg_4           = dword ptr  8
.text:0040D980 arg_8           = dword ptr  0Ch
.text:0040D980
.text:0040D980 ; FUNCTION CHUNK AT .text:0040F5C0 SIZE 0000013A BYTES
.text:0040D980
.text:0040D980                 sub     esp, 0Ch
.text:0040D983                 mov     ecx, [esp+0Ch+arg_0]
.text:0040D987                 mov     edx, [esp+0Ch+arg_4]
.text:0040D98B                 mov     eax, [esp+0Ch+arg_8]
.text:0040D98F                 test    ecx, ecx
.text:0040D991                 jnz     short loc_40D9B0
.text:0040D993                 test    edx, edx
.text:0040D995                 jz      short loc_40D9B0
.text:0040D997                 test    eax, eax
.text:0040D999                 jz      short loc_40D9B0
.text:0040D99B                 mov     [esp+0Ch+arg_4], eax
.text:0040D99F                 mov     [esp+0Ch+arg_0], edx
.text:0040D9A3                 add     esp, 0Ch
.text:0040D9A6                 jmp     loc_40F5C0
.text:0040D9A6 ; ---------------------------------------------------------------------------
.text:0040D9AB                 align 10h
.text:0040D9B0
.text:0040D9B0 loc_40D9B0:                             ; CODE XREF: sub_40D980+11↑j
.text:0040D9B0                                         ; sub_40D980+15↑j ...
.text:0040D9B0                 call    _errno
.text:0040D9B5                 mov     dword ptr [eax], 16h
.text:0040D9BB                 mov     eax, 0FFFFFFFFh
.text:0040D9C0                 add     esp, 0Ch
.text:0040D9C3                 retn
.text:0040D9C3 sub_40D980      endp
.text:0040D9C3
.text:0040D9C3 ; ---------------------------------------------------------------------------
.text:0040D9C4                 align 10h
.text:0040D9D0
.text:0040D9D0 ; =============== S U B R O U T I N E =======================================
.text:0040D9D0
.text:0040D9D0
.text:0040D9D0 ; int __cdecl sub_40D9D0(LPCSTR, char *, int)
.text:0040D9D0 sub_40D9D0      proc near               ; CODE XREF: .text:0040CD44↑p
.text:0040D9D0                                         ; .text:0040CD98↑p ...
.text:0040D9D0
.text:0040D9D0 var_13C         = dword ptr -13Ch
.text:0040D9D0 lpString1       = dword ptr -138h
.text:0040D9D0 var_134         = dword ptr -134h
.text:0040D9D0 String1         = byte ptr -12Ch
.text:0040D9D0 var_10          = dword ptr -10h
.text:0040D9D0 var_C           = dword ptr -0Ch
.text:0040D9D0 var_8           = dword ptr -8
.text:0040D9D0 var_4           = dword ptr -4
.text:0040D9D0 arg_0           = dword ptr  4
.text:0040D9D0 arg_4           = dword ptr  8
.text:0040D9D0 arg_8           = dword ptr  0Ch
.text:0040D9D0
.text:0040D9D0                 sub     esp, 13Ch
.text:0040D9D6                 mov     [esp+13Ch+var_10], ebx
.text:0040D9DD                 mov     ebx, [esp+13Ch+arg_8]
.text:0040D9E4                 mov     [esp+13Ch+var_C], esi
.text:0040D9EB                 mov     esi, [esp+13Ch+arg_4]
.text:0040D9F2                 mov     [esp+13Ch+var_8], edi
.text:0040D9F9                 mov     edi, [esp+13Ch+arg_0]
.text:0040DA00                 mov     [esp+13Ch+var_4], ebp
.text:0040DA07                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040DA0B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040DA0F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040DA12                 call    sub_40D980
.text:0040DA17                 cmp     eax, 0FFFFFFFFh
.text:0040DA1A                 mov     edx, eax
.text:0040DA1C                 jz      short loc_40DA2E
.text:0040DA1E                 mov     ecx, [ebx]
.text:0040DA20                 and     ecx, 0F000h
.text:0040DA26                 cmp     ecx, 0A000h
.text:0040DA2C                 jz      short loc_40DA53
.text:0040DA2E
.text:0040DA2E loc_40DA2E:                             ; CODE XREF: sub_40D9D0+4C↑j
.text:0040DA2E                                         ; sub_40D9D0+A1↓j ...
.text:0040DA2E                 mov     ebx, [esp+13Ch+var_10]
.text:0040DA35                 mov     eax, edx
.text:0040DA37                 mov     esi, [esp+13Ch+var_C]
.text:0040DA3E                 mov     edi, [esp+13Ch+var_8]
.text:0040DA45                 mov     ebp, [esp+13Ch+var_4]
.text:0040DA4C                 add     esp, 13Ch
.text:0040DA52                 retn
.text:0040DA53 ; ---------------------------------------------------------------------------
.text:0040DA53
.text:0040DA53 loc_40DA53:                             ; CODE XREF: sub_40D9D0+5C↑j
.text:0040DA53                 mov     [esp+13Ch+var_134], 104h
.text:0040DA5B                 lea     ebp, [esp+13Ch+String1]
.text:0040DA5F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040DA63                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040DA66                 call    sub_40F880
.text:0040DA6B                 inc     eax
.text:0040DA6C                 mov     edx, 0FFFFFFFFh
.text:0040DA71                 jz      short loc_40DA2E
.text:0040DA73                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040DA77                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040DA7B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040DA7E                 call    sub_40D980
.text:0040DA83                 mov     edx, eax
.text:0040DA85                 jmp     short loc_40DA2E
.text:0040DA85 sub_40D9D0      endp
.text:0040DA85
.text:0040DA85 ; ---------------------------------------------------------------------------
.text:0040DA87                 align 10h
.text:0040DA90
.text:0040DA90 ; =============== S U B R O U T I N E =======================================
.text:0040DA90
.text:0040DA90
.text:0040DA90 sub_40DA90      proc near               ; CODE XREF: sub_40D900+1A↑p
.text:0040DA90
.text:0040DA90 lpTimeZoneInformation= dword ptr -0DCh
.text:0040DA90 var_D8          = dword ptr -0D8h
.text:0040DA90 var_D4          = dword ptr -0D4h
.text:0040DA90 var_D0          = dword ptr -0D0h
.text:0040DA90 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040DA90 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040DA90 arg_0           = dword ptr  4
.text:0040DA90 arg_4           = dword ptr  8
.text:0040DA90
.text:0040DA90                 push    edi
.text:0040DA91                 push    esi
.text:0040DA92                 push    ebx
.text:0040DA93                 sub     esp, 0D0h
.text:0040DA99                 mov     ebx, [esp+0DCh+arg_4]
.text:0040DAA0                 mov     edi, [esp+0DCh+arg_0]
.text:0040DAA7                 test    ebx, ebx
.text:0040DAA9                 jz      short loc_40DAD4
.text:0040DAAB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040DAAF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040DAB2                 call    GetTimeZoneInformation
.text:0040DAB7                 sub     esp, 4
.text:0040DABA                 cmp     eax, 0FFFFFFFFh
.text:0040DABD                 jz      loc_40DB55
.text:0040DAC3                 xor     ecx, ecx
.text:0040DAC5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040DAC9                 cmp     eax, 2
.text:0040DACC                 setz    cl
.text:0040DACF                 mov     [ebx], esi
.text:0040DAD1                 mov     [ebx+4], ecx
.text:0040DAD4
.text:0040DAD4 loc_40DAD4:                             ; CODE XREF: sub_40DA90+19↑j
.text:0040DAD4                                         ; sub_40DA90+E0↓j
.text:0040DAD4                 test    edi, edi
.text:0040DAD6                 jz      short loc_40DB49
.text:0040DAD8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040DADC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040DADF                 call    GetSystemTimeAsFileTime
.text:0040DAE4                 sub     esp, 4
.text:0040DAE7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040DAEB                 mov     [esp+0DCh+var_D4], 989680h
.text:0040DAF3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040DAF7                 mov     [esp+0DCh+var_D0], 0
.text:0040DAFF                 add     ebx, 2AC18000h
.text:0040DB05                 adc     esi, 0FE624E21h
.text:0040DB0B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040DB0F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040DB12                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040DB16                 mov     [esp+0DCh+var_D8], esi
.text:0040DB1A                 call    sub_4144A0
.text:0040DB1F                 mov     [edi], eax
.text:0040DB21                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040DB24                 mov     [esp+0DCh+var_D4], 989680h
.text:0040DB2C                 mov     [esp+0DCh+var_D0], 0
.text:0040DB34                 mov     [esp+0DCh+var_D8], esi
.text:0040DB38                 call    sub_414320
.text:0040DB3D                 lea     ebx, [eax+eax*4]
.text:0040DB40                 lea     edx, [ebx+ebx*4]
.text:0040DB43                 shl     edx, 2
.text:0040DB46                 mov     [edi+4], edx
.text:0040DB49
.text:0040DB49 loc_40DB49:                             ; CODE XREF: sub_40DA90+46↑j
.text:0040DB49                 add     esp, 0D0h
.text:0040DB4F                 xor     eax, eax
.text:0040DB51                 pop     ebx
.text:0040DB52                 pop     esi
.text:0040DB53                 pop     edi
.text:0040DB54                 retn
.text:0040DB55 ; ---------------------------------------------------------------------------
.text:0040DB55
.text:0040DB55 loc_40DB55:                             ; CODE XREF: sub_40DA90+2D↑j
.text:0040DB55                 mov     dword ptr [ebx], 0
.text:0040DB5B                 mov     dword ptr [ebx+4], 0
.text:0040DB62                 call    sub_40CB20
.text:0040DB67                 mov     esi, eax
.text:0040DB69                 call    _errno
.text:0040DB6E                 mov     [eax], esi
.text:0040DB70                 jmp     loc_40DAD4
.text:0040DB70 sub_40DA90      endp
.text:0040DB70
.text:0040DB70 ; ---------------------------------------------------------------------------
.text:0040DB75                 align 10h
.text:0040DB80                 sub     esp, 0Ch
.text:0040DB83                 mov     [esp+4], ebx
.text:0040DB87                 mov     [esp+8], esi
.text:0040DB8B                 xor     esi, esi
.text:0040DB8D                 call    sub_40F990
.text:0040DB92                 mov     ebx, eax
.text:0040DB94                 call    sub_40F980
.text:0040DB99                 cmp     ebx, eax
.text:0040DB9B                 jz      short loc_40DBB4
.text:0040DB9D
.text:0040DB9D loc_40DB9D:                             ; CODE XREF: .text:0040DBC2↓j
.text:0040DB9D                 mov     esi, 1
.text:0040DBA2
.text:0040DBA2 loc_40DBA2:                             ; CODE XREF: .text:0040DBC4↓j
.text:0040DBA2                 mov     ds:dword_4193B0, esi
.text:0040DBA8                 mov     ebx, [esp+4]
.text:0040DBAC                 mov     esi, [esp+8]
.text:0040DBB0                 add     esp, 0Ch
.text:0040DBB3                 retn
.text:0040DBB4 ; ---------------------------------------------------------------------------
.text:0040DBB4
.text:0040DBB4 loc_40DBB4:                             ; CODE XREF: .text:0040DB9B↑j
.text:0040DBB4                 call    sub_40F970
.text:0040DBB9                 mov     ebx, eax
.text:0040DBBB                 call    sub_40F960
.text:0040DBC0                 cmp     ebx, eax
.text:0040DBC2                 jnz     short loc_40DB9D
.text:0040DBC4                 jmp     short loc_40DBA2
.text:0040DBC4 ; ---------------------------------------------------------------------------
.text:0040DBC6                 align 10h
.text:0040DBD0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:0040DBD0                                         ; DATA XREF: .data:off_416064↓o
.text:0040DBE4 ; const CHAR LibFileName[]
.text:0040DBE4 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_40DC10+11↓o
.text:0040DBE4                                         ; sub_40DD80+C↓o ...
.text:0040DBF1 ; const CHAR ProcName[]
.text:0040DBF1 ProcName        db 'GetFileAttributesExA',0
.text:0040DBF1                                         ; DATA XREF: sub_40DC10+28↓o
.text:0040DC06                 align 10h
.text:0040DC10
.text:0040DC10 ; =============== S U B R O U T I N E =======================================
.text:0040DC10
.text:0040DC10
.text:0040DC10 ; int __cdecl sub_40DC10(LPCSTR lpFileName, int)
.text:0040DC10 sub_40DC10      proc near               ; CODE XREF: .text:0040EDB4↓p
.text:0040DC10                                         ; sub_40F1B0+37↓p
.text:0040DC10
.text:0040DC10 lpModuleName    = dword ptr -18Ch
.text:0040DC10 lpProcName      = dword ptr -188h
.text:0040DC10 var_184         = dword ptr -184h
.text:0040DC10 var_170         = dword ptr -170h
.text:0040DC10 var_164         = dword ptr -164h
.text:0040DC10 hModule         = dword ptr -160h
.text:0040DC10 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040DC10 lpFileName      = dword ptr  4
.text:0040DC10 arg_4           = dword ptr  8
.text:0040DC10
.text:0040DC10                 push    ebp
.text:0040DC11                 push    edi
.text:0040DC12                 push    esi
.text:0040DC13                 push    ebx
.text:0040DC14                 sub     esp, 17Ch
.text:0040DC1A                 mov     ebx, [esp+18Ch+arg_4]
.text:0040DC21                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:0040DC28                 call    GetModuleHandleA
.text:0040DC2D                 sub     esp, 4
.text:0040DC30                 mov     [esp+18Ch+hModule], eax
.text:0040DC34                 mov     edx, [esp+18Ch+hModule]
.text:0040DC38                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:0040DC40                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:0040DC43                 call    GetProcAddress
.text:0040DC48                 sub     esp, 8
.text:0040DC4B                 mov     ebp, eax
.text:0040DC4D                 mov     eax, [esp+18Ch+lpFileName]
.text:0040DC54                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:0040DC57                 call    GetFileAttributesA
.text:0040DC5C                 sub     esp, 4
.text:0040DC5F                 mov     [esp+18Ch+var_164], eax
.text:0040DC63                 xor     eax, eax
.text:0040DC65                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040DC6A                 jz      short loc_40DCC1
.text:0040DC6C                 cld
.text:0040DC6D                 mov     ecx, 50h ; 'P'
.text:0040DC72                 lea     esi, [esp+18Ch+FindFileData]
.text:0040DC76                 mov     edi, esi
.text:0040DC78                 test    ebp, ebp
.text:0040DC7A                 rep stosd
.text:0040DC7C                 mov     [esp+18Ch+var_170], 0
.text:0040DC84                 jz      short loc_40DCA5
.text:0040DC86                 mov     [esp+18Ch+var_184], ebx
.text:0040DC8A                 mov     ecx, [esp+18Ch+lpFileName]
.text:0040DC91                 mov     [esp+18Ch+lpProcName], 0
.text:0040DC99                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040DC9C                 call    ebp
.text:0040DC9E                 sub     esp, 0Ch
.text:0040DCA1                 mov     [esp+18Ch+var_170], eax
.text:0040DCA5
.text:0040DCA5 loc_40DCA5:                             ; CODE XREF: sub_40DC10+74↑j
.text:0040DCA5                 mov     eax, [esp+18Ch+var_170]
.text:0040DCA9                 test    eax, eax
.text:0040DCAB                 jz      short loc_40DCD0
.text:0040DCAD
.text:0040DCAD loc_40DCAD:                             ; CODE XREF: sub_40DC10+131↓j
.text:0040DCAD                                         ; sub_40DC10+14B↓j
.text:0040DCAD                 mov     ebx, [esp+18Ch+hModule]
.text:0040DCB1                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:0040DCB4                 call    FreeLibrary
.text:0040DCB9                 sub     esp, 4
.text:0040DCBC                 mov     eax, 1
.text:0040DCC1
.text:0040DCC1 loc_40DCC1:                             ; CODE XREF: sub_40DC10+5A↑j
.text:0040DCC1                 add     esp, 17Ch
.text:0040DCC7                 pop     ebx
.text:0040DCC8                 pop     esi
.text:0040DCC9                 pop     edi
.text:0040DCCA                 pop     ebp
.text:0040DCCB                 retn
.text:0040DCCB ; ---------------------------------------------------------------------------
.text:0040DCCC                 align 10h
.text:0040DCD0
.text:0040DCD0 loc_40DCD0:                             ; CODE XREF: sub_40DC10+9B↑j
.text:0040DCD0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:0040DCD4                 mov     edx, [esp+18Ch+lpFileName]
.text:0040DCDB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040DCDE                 call    FindFirstFileA
.text:0040DCE3                 sub     esp, 8
.text:0040DCE6                 xor     ecx, ecx
.text:0040DCE8                 cmp     eax, 0FFFFFFFFh
.text:0040DCEB                 setnz   cl
.text:0040DCEE                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:0040DCF2                 mov     [ebx], edi
.text:0040DCF4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:0040DCF8                 mov     [esp+18Ch+var_170], ecx
.text:0040DCFC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:0040DD00                 mov     [ebx+8], esi
.text:0040DD03                 mov     [ebx+4], ecx
.text:0040DD06                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040DD0A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040DD0E                 mov     [ebx+0Ch], ebp
.text:0040DD11                 mov     [ebx+10h], edi
.text:0040DD14                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:0040DD18                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040DD1C                 mov     [ebx+18h], esi
.text:0040DD1F                 mov     [ebx+14h], ecx
.text:0040DD22                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:0040DD26                 mov     [ebx+1Ch], ebp
.text:0040DD29                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040DD2D                 mov     [ebx+20h], edi
.text:0040DD30                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:0040DD33                 call    FindClose
.text:0040DD38                 sub     esp, 4
.text:0040DD3B                 mov     esi, [esp+18Ch+var_170]
.text:0040DD3F                 test    esi, esi
.text:0040DD41                 jnz     loc_40DCAD
.text:0040DD47                 cld
.text:0040DD48                 mov     eax, [esp+18Ch+var_170]
.text:0040DD4C                 mov     ecx, 9
.text:0040DD51                 mov     edi, ebx
.text:0040DD53                 rep stosd
.text:0040DD55                 mov     ebp, [esp+18Ch+var_164]
.text:0040DD59                 mov     [ebx], ebp
.text:0040DD5B                 jmp     loc_40DCAD
.text:0040DD5B sub_40DC10      endp
.text:0040DD5B
.text:0040DD5B ; ---------------------------------------------------------------------------
.text:0040DD60 ; const CHAR aFindfirstfilee[]
.text:0040DD60 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_40DD80+23↓o
.text:0040DD71 ; const char Source[]
.text:0040DD71 Source          db '\*',0               ; DATA XREF: sub_40DD80:loc_40DE0D↓o
.text:0040DD74                 align 10h
.text:0040DD80
.text:0040DD80 ; =============== S U B R O U T I N E =======================================
.text:0040DD80
.text:0040DD80
.text:0040DD80 ; int __cdecl sub_40DD80(char *Str)
.text:0040DD80 sub_40DD80      proc near               ; CODE XREF: .text:0040EEB3↓p
.text:0040DD80                                         ; sub_40F1B0+3FA↓p ...
.text:0040DD80
.text:0040DD80 lpLibFileName   = dword ptr -18Ch
.text:0040DD80 lpProcName      = dword ptr -188h
.text:0040DD80 var_184         = dword ptr -184h
.text:0040DD80 var_180         = dword ptr -180h
.text:0040DD80 var_17C         = dword ptr -17Ch
.text:0040DD80 var_178         = dword ptr -178h
.text:0040DD80 var_164         = dword ptr -164h
.text:0040DD80 hModule         = dword ptr -160h
.text:0040DD80 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040DD80 Str             = dword ptr  4
.text:0040DD80
.text:0040DD80                 push    ebp
.text:0040DD81                 push    edi
.text:0040DD82                 xor     edi, edi
.text:0040DD84                 push    esi
.text:0040DD85                 push    ebx
.text:0040DD86                 sub     esp, 17Ch
.text:0040DD8C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:0040DD93                 call    LoadLibraryA
.text:0040DD98                 sub     esp, 4
.text:0040DD9B                 mov     [esp+18Ch+hModule], eax
.text:0040DD9F                 mov     ecx, [esp+18Ch+hModule]
.text:0040DDA3                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040DDAB                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040DDAE                 call    GetProcAddress
.text:0040DDB3                 sub     esp, 8
.text:0040DDB6                 mov     edx, [esp+18Ch+Str]
.text:0040DDBD                 mov     [esp+18Ch+var_164], eax
.text:0040DDC1                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:0040DDC4                 call    strlen
.text:0040DDC9                 lea     edx, [eax+5]
.text:0040DDCC                 mov     ebx, eax
.text:0040DDCE                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:0040DDD1                 call    malloc
.text:0040DDD6                 mov     esi, eax
.text:0040DDD8                 test    esi, esi
.text:0040DDDA                 mov     eax, 1
.text:0040DDDF                 jz      loc_40DEBD
.text:0040DDE5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040DDE8                 mov     ebp, [esp+18Ch+Str]
.text:0040DDEF                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:0040DDF3                 call    strcpy
.text:0040DDF8                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040DDFD                 cmp     al, 2Fh ; '/'
.text:0040DDFF                 jz      loc_40DEEB
.text:0040DE05                 cmp     al, 5Ch ; '\'
.text:0040DE07                 jz      loc_40DEEB
.text:0040DE0D
.text:0040DE0D loc_40DE0D:                             ; CODE XREF: sub_40DD80+170↓j
.text:0040DE0D                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:0040DE15                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040DE18                 call    strcat
.text:0040DE1D                 mov     eax, [esp+18Ch+var_164]
.text:0040DE21                 test    eax, eax
.text:0040DE23                 jz      loc_40DEE5
.text:0040DE29                 mov     [esp+18Ch+var_178], 0
.text:0040DE31                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040DE35                 mov     [esp+18Ch+var_17C], 0
.text:0040DE3D                 mov     [esp+18Ch+var_180], 1
.text:0040DE45                 mov     [esp+18Ch+var_184], ebp
.text:0040DE49                 mov     [esp+18Ch+lpProcName], 0
.text:0040DE51                 mov     [esp+18Ch+lpLibFileName], esi
.text:0040DE54                 call    [esp+18Ch+var_164]
.text:0040DE58                 sub     esp, 18h
.text:0040DE5B                 mov     ebx, eax
.text:0040DE5D                 cmp     eax, 0FFFFFFFFh
.text:0040DE60                 jz      short loc_40DEC8
.text:0040DE62                 lea     esi, [esi+0]
.text:0040DE69                 lea     edi, [edi+0]
.text:0040DE70
.text:0040DE70 loc_40DE70:                             ; CODE XREF: sub_40DD80+109↓j
.text:0040DE70                                         ; sub_40DD80+161↓j
.text:0040DE70                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:0040DE75                 jz      short loc_40DE78
.text:0040DE77                 inc     edi
.text:0040DE78
.text:0040DE78 loc_40DE78:                             ; CODE XREF: sub_40DD80+F5↑j
.text:0040DE78                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040DE7C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040DE7F                 call    FindNextFileA
.text:0040DE84                 sub     esp, 8
.text:0040DE87                 test    eax, eax
.text:0040DE89                 jnz     short loc_40DE70
.text:0040DE8B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040DE8E                 call    FindClose
.text:0040DE93                 sub     esp, 4
.text:0040DE96                 mov     esi, [esp+18Ch+hModule]
.text:0040DE9A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040DE9D                 call    FreeLibrary
.text:0040DEA2                 sub     esp, 4
.text:0040DEA5                 mov     ebx, [esp+18Ch+Str]
.text:0040DEAC                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040DEAF                 call    sub_40FF00
.text:0040DEB4                 test    eax, eax
.text:0040DEB6                 jz      short loc_40DEBB
.text:0040DEB8                 add     edi, 2
.text:0040DEBB
.text:0040DEBB loc_40DEBB:                             ; CODE XREF: sub_40DD80+136↑j
.text:0040DEBB                 mov     eax, edi
.text:0040DEBD
.text:0040DEBD loc_40DEBD:                             ; CODE XREF: sub_40DD80+5F↑j
.text:0040DEBD                                         ; sub_40DD80+163↓j
.text:0040DEBD                 add     esp, 17Ch
.text:0040DEC3                 pop     ebx
.text:0040DEC4                 pop     esi
.text:0040DEC5                 pop     edi
.text:0040DEC6                 pop     ebp
.text:0040DEC7                 retn
.text:0040DEC8 ; ---------------------------------------------------------------------------
.text:0040DEC8
.text:0040DEC8 loc_40DEC8:                             ; CODE XREF: sub_40DD80+E0↑j
.text:0040DEC8                                         ; sub_40DD80+169↓j
.text:0040DEC8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040DECC                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040DECF                 call    FindFirstFileA
.text:0040DED4                 mov     ebx, eax
.text:0040DED6                 sub     esp, 8
.text:0040DED9                 cmp     ebx, 0FFFFFFFFh
.text:0040DEDC                 mov     eax, 2
.text:0040DEE1                 jnz     short loc_40DE70
.text:0040DEE3                 jmp     short loc_40DEBD
.text:0040DEE5 ; ---------------------------------------------------------------------------
.text:0040DEE5
.text:0040DEE5 loc_40DEE5:                             ; CODE XREF: sub_40DD80+A3↑j
.text:0040DEE5                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040DEE9                 jmp     short loc_40DEC8
.text:0040DEEB ; ---------------------------------------------------------------------------
.text:0040DEEB
.text:0040DEEB loc_40DEEB:                             ; CODE XREF: sub_40DD80+7F↑j
.text:0040DEEB                                         ; sub_40DD80+87↑j
.text:0040DEEB                 mov     byte ptr [ebx+esi-1], 0
.text:0040DEF0                 jmp     loc_40DE0D
.text:0040DEF0 sub_40DD80      endp
.text:0040DEF0
.text:0040DEF0 ; ---------------------------------------------------------------------------
.text:0040DEF5                 align 10h
.text:0040DF00
.text:0040DF00 ; =============== S U B R O U T I N E =======================================
.text:0040DF00
.text:0040DF00
.text:0040DF00 ; int __cdecl sub_40DF00(HANDLE hNamedPipe, int)
.text:0040DF00 sub_40DF00      proc near               ; CODE XREF: sub_40D980+1CF7↓p
.text:0040DF00                                         ; sub_411DA0+52↓j
.text:0040DF00
.text:0040DF00 hFile           = dword ptr -0ECh
.text:0040DF00 lpFileInformation= dword ptr -0E8h
.text:0040DF00 nBufferSize     = dword ptr -0E4h
.text:0040DF00 lpBytesRead     = dword ptr -0E0h
.text:0040DF00 lpTotalBytesAvail= dword ptr -0DCh
.text:0040DF00 lpBytesLeftThisMessage= dword ptr -0D8h
.text:0040DF00 var_C4          = dword ptr -0C4h
.text:0040DF00 var_C0          = dword ptr -0C0h
.text:0040DF00 var_BC          = dword ptr -0BCh
.text:0040DF00 var_B8          = dword ptr -0B8h
.text:0040DF00 var_B4          = dword ptr -0B4h
.text:0040DF00 var_B0          = dword ptr -0B0h
.text:0040DF00 var_AC          = dword ptr -0ACh
.text:0040DF00 var_A8          = dword ptr -0A8h
.text:0040DF00 TotalBytesAvail = dword ptr -0A0h
.text:0040DF00 var_9C          = dword ptr -9Ch
.text:0040DF00 var_98          = dword ptr -98h
.text:0040DF00 var_94          = dword ptr -94h
.text:0040DF00 var_90          = dword ptr -90h
.text:0040DF00 var_8C          = dword ptr -8Ch
.text:0040DF00 var_88          = dword ptr -88h
.text:0040DF00 var_84          = dword ptr -84h
.text:0040DF00 var_80          = dword ptr -80h
.text:0040DF00 var_7C          = dword ptr -7Ch
.text:0040DF00 var_78          = dword ptr -78h
.text:0040DF00 var_74          = dword ptr -74h
.text:0040DF00 var_70          = dword ptr -70h
.text:0040DF00 var_6C          = dword ptr -6Ch
.text:0040DF00 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:0040DF00 hNamedPipe      = dword ptr  4
.text:0040DF00 arg_4           = dword ptr  8
.text:0040DF00
.text:0040DF00                 push    ebp
.text:0040DF01                 mov     eax, 0FFFFFFFFh
.text:0040DF06                 push    edi
.text:0040DF07                 push    esi
.text:0040DF08                 push    ebx
.text:0040DF09                 sub     esp, 0DCh
.text:0040DF0F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:0040DF16                 mov     ebp, [esp+0ECh+arg_4]
.text:0040DF1D                 cmp     esi, 0FFFFFFFFh
.text:0040DF20                 jz      loc_40E2A1
.text:0040DF26                 cld
.text:0040DF27                 xor     eax, eax
.text:0040DF29                 lea     ebx, [esp+0ECh+FileInformation]
.text:0040DF30                 mov     ecx, 0Dh
.text:0040DF35                 mov     edi, ebx
.text:0040DF37                 rep stosd
.text:0040DF39                 mov     dword ptr [ebp+18h], 1
.text:0040DF40                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040DF43                 call    GetFileType
.text:0040DF48                 sub     esp, 4
.text:0040DF4B                 xor     edx, edx
.text:0040DF4D                 cmp     eax, 2
.text:0040DF50                 jz      loc_40E380
.text:0040DF56                 cmp     eax, 3
.text:0040DF59                 jz      loc_40E370
.text:0040DF5F
.text:0040DF5F loc_40DF5F:                             ; CODE XREF: sub_40DF00+475↓j
.text:0040DF5F                                         ; sub_40DF00+485↓j
.text:0040DF5F                 or      [ebp+0], edx
.text:0040DF62                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:0040DF66                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040DF69                 call    GetFileInformationByHandle
.text:0040DF6E                 sub     esp, 8
.text:0040DF71                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040DF78                 test    ecx, ecx
.text:0040DF7A                 jnz     short loc_40DFB0
.text:0040DF7C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040DF83                 test    edx, edx
.text:0040DF85                 jnz     short loc_40DFB0
.text:0040DF87                 mov     edx, [ebp+0]
.text:0040DF8A                 and     edx, 0F000h
.text:0040DF90                 cmp     edx, 1000h
.text:0040DF96                 jz      loc_40E306
.text:0040DF9C
.text:0040DF9C loc_40DF9C:                             ; CODE XREF: sub_40DF00+459↓j
.text:0040DF9C                                         ; sub_40DF00+465↓j
.text:0040DF9C                 test    ecx, ecx
.text:0040DF9E                 jnz     short loc_40DFB0
.text:0040DFA0                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040DFA7                 test    edx, edx
.text:0040DFA9                 jz      loc_40E2E4
.text:0040DFAF                 nop
.text:0040DFB0
.text:0040DFB0 loc_40DFB0:                             ; CODE XREF: sub_40DF00+7A↑j
.text:0040DFB0                                         ; sub_40DF00+85↑j ...
.text:0040DFB0                 cld
.text:0040DFB1                 mov     esi, ebx
.text:0040DFB3                 mov     dword ptr [ebp+14h], 0
.text:0040DFBA                 lea     edi, [esp+0ECh+var_9C]
.text:0040DFBE                 mov     ecx, 0Dh
.text:0040DFC3                 rep movsd
.text:0040DFC5                 xor     ebx, ebx
.text:0040DFC7                 xor     edi, edi
.text:0040DFC9                 mov     edx, [esp+0ECh+var_6C]
.text:0040DFD0                 mov     esi, [esp+0ECh+var_70]
.text:0040DFD4                 or      edx, ebx
.text:0040DFD6                 mov     ebx, [esp+0ECh+var_9C]
.text:0040DFDA                 mov     [ebp+8], edx
.text:0040DFDD                 or      edi, esi
.text:0040DFDF                 xor     edx, edx
.text:0040DFE1                 mov     [ebp+0Ch], edi
.text:0040DFE4                 test    bl, 10h
.text:0040DFE7                 mov     esi, [esp+0ECh+var_80]
.text:0040DFEB                 setz    dl
.text:0040DFEE                 mov     [ebp+10h], esi
.text:0040DFF1                 dec     edx
.text:0040DFF2                 and     edx, 0FFFFC000h
.text:0040DFF8                 add     edx, 8000h
.text:0040DFFE                 or      edx, 124h
.text:0040E004                 test    bl, 1
.text:0040E007                 movzx   eax, dx
.text:0040E00A                 jnz     short loc_40E011
.text:0040E00C                 or      eax, 92h
.text:0040E011
.text:0040E011 loc_40E011:                             ; CODE XREF: sub_40DF00+10A↑j
.text:0040E011                 or      [ebp+0], eax
.text:0040E014                 xor     edx, edx
.text:0040E016                 mov     ebx, [esp+0ECh+var_7C]
.text:0040E01A                 mov     ecx, [esp+0ECh+var_78]
.text:0040E01E                 mov     eax, edx
.text:0040E020                 xor     esi, esi
.text:0040E022                 mov     edx, [esp+0ECh+var_8C]
.text:0040E026                 mov     edi, ebx
.text:0040E028                 or      eax, edi
.text:0040E02A                 mov     [esp+0ECh+var_A8], eax
.text:0040E02E                 mov     ebx, ecx
.text:0040E030                 mov     edi, [esp+0ECh+var_74]
.text:0040E034                 or      ebx, esi
.text:0040E036                 mov     esi, [esp+0ECh+var_A8]
.text:0040E03A                 mov     [esp+0ECh+var_AC], ebx
.text:0040E03E                 xor     ebx, ebx
.text:0040E040                 mov     ecx, [esp+0ECh+var_AC]
.text:0040E044                 mov     [ebp+34h], esi
.text:0040E047                 mov     esi, [esp+0ECh+var_90]
.text:0040E04B                 mov     [ebp+18h], edi
.text:0040E04E                 xor     edi, edi
.text:0040E050                 or      esi, ebx
.text:0040E052                 mov     [ebp+30h], ecx
.text:0040E055                 or      edi, edx
.text:0040E057                 mov     edx, esi
.text:0040E059                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040E061                 sub     edx, 0D53E8000h
.text:0040E067                 mov     ebx, edi
.text:0040E069                 sbb     ebx, 19DB1DEh
.text:0040E06F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040E073                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040E07B                 mov     [esp+0ECh+hFile], edx
.text:0040E07E                 call    sub_4144A0
.text:0040E083                 mov     ecx, eax
.text:0040E085                 shr     eax, 1Fh
.text:0040E088                 dec     eax
.text:0040E089                 and     ecx, eax
.text:0040E08B                 mov     [ebp+38h], ecx
.text:0040E08E                 mov     [esp+0ECh+hFile], esi
.text:0040E091                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040E095                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040E09D                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040E0A5                 call    sub_414320
.text:0040E0AA                 lea     ebx, [eax+eax*4]
.text:0040E0AD                 xor     ecx, ecx
.text:0040E0AF                 lea     esi, [ebx+ebx*4]
.text:0040E0B2                 shl     esi, 2
.text:0040E0B5                 mov     edi, esi
.text:0040E0B7                 shr     edi, 1Fh
.text:0040E0BA                 dec     edi
.text:0040E0BB                 and     edi, esi
.text:0040E0BD                 mov     [ebp+3Ch], edi
.text:0040E0C0                 mov     esi, [esp+0ECh+var_98]
.text:0040E0C4                 xor     edi, edi
.text:0040E0C6                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040E0CE                 mov     edx, [esp+0ECh+var_94]
.text:0040E0D2                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040E0DA                 or      esi, ecx
.text:0040E0DC                 or      edi, edx
.text:0040E0DE                 mov     edx, esi
.text:0040E0E0                 mov     ecx, edi
.text:0040E0E2                 sub     edx, 0D53E8000h
.text:0040E0E8                 sbb     ecx, 19DB1DEh
.text:0040E0EE                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040E0F2                 mov     [esp+0ECh+hFile], edx
.text:0040E0F5                 call    sub_4144A0
.text:0040E0FA                 mov     ebx, eax
.text:0040E0FC                 shr     eax, 1Fh
.text:0040E0FF                 dec     eax
.text:0040E100                 and     ebx, eax
.text:0040E102                 mov     [ebp+48h], ebx
.text:0040E105                 xor     ebx, ebx
.text:0040E107                 mov     [esp+0ECh+hFile], esi
.text:0040E10A                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040E10E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040E116                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040E11E                 call    sub_414320
.text:0040E123                 lea     ecx, [eax+eax*4]
.text:0040E126                 lea     esi, [ecx+ecx*4]
.text:0040E129                 shl     esi, 2
.text:0040E12C                 mov     edi, esi
.text:0040E12E                 shr     edi, 1Fh
.text:0040E131                 dec     edi
.text:0040E132                 and     edi, esi
.text:0040E134                 mov     [ebp+4Ch], edi
.text:0040E137                 mov     esi, [esp+0ECh+var_88]
.text:0040E13B                 xor     edi, edi
.text:0040E13D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040E145                 mov     edx, [esp+0ECh+var_84]
.text:0040E149                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040E151                 or      esi, ebx
.text:0040E153                 or      edi, edx
.text:0040E155                 mov     edx, esi
.text:0040E157                 mov     ebx, edi
.text:0040E159                 sub     edx, 0D53E8000h
.text:0040E15F                 sbb     ebx, 19DB1DEh
.text:0040E165                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040E169                 mov     [esp+0ECh+hFile], edx
.text:0040E16C                 call    sub_4144A0
.text:0040E171                 mov     ecx, eax
.text:0040E173                 shr     eax, 1Fh
.text:0040E176                 dec     eax
.text:0040E177                 and     ecx, eax
.text:0040E179                 mov     [ebp+40h], ecx
.text:0040E17C                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040E180                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040E188                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040E190                 mov     [esp+0ECh+hFile], esi
.text:0040E193                 call    sub_414320
.text:0040E198                 mov     dword ptr [ebp+50h], 200h
.text:0040E19F                 lea     ebx, [eax+eax*4]
.text:0040E1A2                 mov     edi, [esp+0ECh+var_A8]
.text:0040E1A6                 lea     edx, [ebx+ebx*4]
.text:0040E1A9                 mov     eax, [esp+0ECh+var_AC]
.text:0040E1AD                 shl     edx, 2
.text:0040E1B0                 mov     ecx, edx
.text:0040E1B2                 shr     ecx, 1Fh
.text:0040E1B5                 dec     ecx
.text:0040E1B6                 and     ecx, edx
.text:0040E1B8                 test    edi, edi
.text:0040E1BA                 mov     edx, [esp+0ECh+var_A8]
.text:0040E1BE                 mov     [ebp+44h], ecx
.text:0040E1C1                 js      loc_40E2D7
.text:0040E1C7
.text:0040E1C7 loc_40E1C7:                             ; CODE XREF: sub_40DF00+3DF↓j
.text:0040E1C7                 mov     edi, [esp+0ECh+var_AC]
.text:0040E1CB                 xor     esi, esi
.text:0040E1CD                 mov     ecx, eax
.text:0040E1CF                 shrd    ecx, edx, 9
.text:0040E1D3                 mov     ebx, edx
.text:0040E1D5                 mov     eax, esi
.text:0040E1D7                 and     edi, 1FFh
.text:0040E1DD                 sar     ebx, 9
.text:0040E1E0                 or      eax, edi
.text:0040E1E2                 jz      short loc_40E1EA
.text:0040E1E4                 add     ecx, 1
.text:0040E1E7                 adc     ebx, 0
.text:0040E1EA
.text:0040E1EA loc_40E1EA:                             ; CODE XREF: sub_40DF00+2E2↑j
.text:0040E1EA                 mov     [ebp+5Ch], ebx
.text:0040E1ED                 mov     esi, dword_416060
.text:0040E1F3                 xor     edi, edi
.text:0040E1F5                 mov     [ebp+58h], ecx
.text:0040E1F8                 mov     ebx, dword_416060
.text:0040E1FE                 mov     ecx, [esp+0ECh+var_A8]
.text:0040E202                 mov     edx, [esp+0ECh+var_AC]
.text:0040E206                 mov     [ebp+50h], ebx
.text:0040E209                 shr     ebx, 9
.text:0040E20C                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040E210                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040E214                 mov     [esp+0ECh+nBufferSize], esi
.text:0040E218                 mov     [esp+0ECh+hFile], edx
.text:0040E21B                 call    sub_4144A0
.text:0040E220                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040E224                 mov     ecx, [esp+0ECh+var_AC]
.text:0040E228                 mov     edi, [esp+0ECh+var_A8]
.text:0040E22C                 mov     [esp+0ECh+var_BC], ebx
.text:0040E230                 mov     [esp+0ECh+var_B4], eax
.text:0040E234                 mov     [esp+0ECh+var_B0], edx
.text:0040E238                 mov     [esp+0ECh+var_B8], 0
.text:0040E240                 mov     [esp+0ECh+nBufferSize], esi
.text:0040E244                 mov     [esp+0ECh+hFile], ecx
.text:0040E247                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040E24B                 call    sub_414320
.text:0040E250                 mov     ebx, edx
.text:0040E252                 or      ebx, eax
.text:0040E254                 jz      short loc_40E2B0
.text:0040E256                 mov     edi, [esp+0ECh+var_B4]
.text:0040E25A                 mov     esi, [esp+0ECh+var_B0]
.text:0040E25E                 mov     eax, [esp+0ECh+var_BC]
.text:0040E262                 mov     [esp+0ECh+var_C4], edi
.text:0040E266                 mov     ecx, [esp+0ECh+var_B8]
.text:0040E26A                 add     [esp+0ECh+var_C4], 1
.text:0040E26F                 mov     [esp+0ECh+var_C0], esi
.text:0040E273                 adc     [esp+0ECh+var_C0], 0
.text:0040E278                 mul     [esp+0ECh+var_C4]
.text:0040E27C                 mov     edi, [esp+0ECh+var_C0]
.text:0040E280                 mov     ebx, edx
.text:0040E282                 mov     edx, [esp+0ECh+var_C4]
.text:0040E286                 mov     esi, eax
.text:0040E288                 mov     eax, ebx
.text:0040E28A                 imul    ecx, edx
.text:0040E28D                 mov     edx, [esp+0ECh+var_BC]
.text:0040E291                 imul    edx, edi
.text:0040E294                 add     eax, ecx
.text:0040E296                 lea     edi, [edx+eax]
.text:0040E299
.text:0040E299 loc_40E299:                             ; CODE XREF: sub_40DF00+3D5↓j
.text:0040E299                 mov     [ebp+58h], esi
.text:0040E29C                 xor     eax, eax
.text:0040E29E                 mov     [ebp+5Ch], edi
.text:0040E2A1
.text:0040E2A1 loc_40E2A1:                             ; CODE XREF: sub_40DF00+20↑j
.text:0040E2A1                 add     esp, 0DCh
.text:0040E2A7                 pop     ebx
.text:0040E2A8                 pop     esi
.text:0040E2A9                 pop     edi
.text:0040E2AA                 pop     ebp
.text:0040E2AB                 retn
.text:0040E2AB ; ---------------------------------------------------------------------------
.text:0040E2AC                 align 10h
.text:0040E2B0
.text:0040E2B0 loc_40E2B0:                             ; CODE XREF: sub_40DF00+354↑j
.text:0040E2B0                 mov     eax, [esp+0ECh+var_B4]
.text:0040E2B4                 mov     edi, [esp+0ECh+var_B8]
.text:0040E2B8                 mov     ebx, [esp+0ECh+var_B4]
.text:0040E2BC                 mul     [esp+0ECh+var_BC]
.text:0040E2C0                 mov     ecx, [esp+0ECh+var_BC]
.text:0040E2C4                 imul    ebx, edi
.text:0040E2C7                 mov     esi, eax
.text:0040E2C9                 mov     eax, [esp+0ECh+var_B0]
.text:0040E2CD                 add     edx, ebx
.text:0040E2CF                 imul    ecx, eax
.text:0040E2D2                 lea     edi, [ecx+edx]
.text:0040E2D5                 jmp     short loc_40E299
.text:0040E2D7 ; ---------------------------------------------------------------------------
.text:0040E2D7
.text:0040E2D7 loc_40E2D7:                             ; CODE XREF: sub_40DF00+2C1↑j
.text:0040E2D7                 add     eax, 1FFh
.text:0040E2DC                 adc     edx, 0
.text:0040E2DF                 jmp     loc_40E1C7
.text:0040E2E4 ; ---------------------------------------------------------------------------
.text:0040E2E4
.text:0040E2E4 loc_40E2E4:                             ; CODE XREF: sub_40DF00+A9↑j
.text:0040E2E4                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040E2E7                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040E2EE                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:0040E2F2                 call    GetFileSize
.text:0040E2F7                 sub     esp, 8
.text:0040E2FA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:0040E301                 jmp     loc_40DFB0
.text:0040E306 ; ---------------------------------------------------------------------------
.text:0040E306
.text:0040E306 loc_40E306:                             ; CODE XREF: sub_40DF00+96↑j
.text:0040E306                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:0040E30E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040E312                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:0040E31A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:0040E31E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:0040E326                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0040E32E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:0040E336                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:0040E339                 call    PeekNamedPipe
.text:0040E33E                 sub     esp, 18h
.text:0040E341                 test    eax, eax
.text:0040E343                 jz      short loc_40E35E
.text:0040E345                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040E349                 xor     eax, eax
.text:0040E34B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:0040E352                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:0040E359                 jmp     loc_40DF9C
.text:0040E35E ; ---------------------------------------------------------------------------
.text:0040E35E
.text:0040E35E loc_40E35E:                             ; CODE XREF: sub_40DF00+443↑j
.text:0040E35E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040E365                 jmp     loc_40DF9C
.text:0040E365 ; ---------------------------------------------------------------------------
.text:0040E36A                 align 10h
.text:0040E370
.text:0040E370 loc_40E370:                             ; CODE XREF: sub_40DF00+59↑j
.text:0040E370                 mov     edx, 1000h
.text:0040E375                 jmp     loc_40DF5F
.text:0040E375 ; ---------------------------------------------------------------------------
.text:0040E37A                 align 10h
.text:0040E380
.text:0040E380 loc_40E380:                             ; CODE XREF: sub_40DF00+50↑j
.text:0040E380                 mov     edx, 2000h
.text:0040E385                 jmp     loc_40DF5F
.text:0040E385 sub_40DF00      endp
.text:0040E385
.text:0040E385 ; ---------------------------------------------------------------------------
.text:0040E38A aLnk            db '.lnk',0             ; DATA XREF: sub_40E3D0+E0↓o
.text:0040E38A                                         ; .text:0040EA7A↓o ...
.text:0040E38F ; const CHAR aKernel32[]
.text:0040E38F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_40E3D0+12D↓o
.text:0040E38F                                         ; .text:0040F12B↓o
.text:0040E398 ; const CHAR aGetcompressedf[]
.text:0040E398 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:0040E398                                         ; DATA XREF: sub_40E3D0+13E↓o
.text:0040E398                                         ; .text:0040F13C↓o
.text:0040E3AF ; const CHAR aGetbinarytypea[]
.text:0040E3AF aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_40E3D0+333↓o
.text:0040E3AF                                         ; .text:0040EAD6↓o ...
.text:0040E3BE ; const char aPathext[]
.text:0040E3BE aPathext        db 'PATHEXT',0          ; DATA XREF: sub_40E3D0:loc_40E7B7↓o
.text:0040E3BE                                         ; .text:loc_40EB80↓o ...
.text:0040E3C6                 align 10h
.text:0040E3D0
.text:0040E3D0 ; =============== S U B R O U T I N E =======================================
.text:0040E3D0
.text:0040E3D0
.text:0040E3D0 ; int __cdecl sub_40E3D0(char *String1, int)
.text:0040E3D0 sub_40E3D0      proc near               ; CODE XREF: sub_40F1B0+3CD↓p
.text:0040E3D0                                         ; sub_40D980+1D15↓p
.text:0040E3D0
.text:0040E3D0 Str             = dword ptr -6Ch
.text:0040E3D0 lpProcName      = dword ptr -68h
.text:0040E3D0 var_64          = dword ptr -64h
.text:0040E3D0 var_60          = dword ptr -60h
.text:0040E3D0 var_5C          = dword ptr -5Ch
.text:0040E3D0 var_4C          = dword ptr -4Ch
.text:0040E3D0 var_48          = dword ptr -48h
.text:0040E3D0 var_44          = dword ptr -44h
.text:0040E3D0 var_40          = dword ptr -40h
.text:0040E3D0 var_3C          = dword ptr -3Ch
.text:0040E3D0 var_38          = dword ptr -38h
.text:0040E3D0 lpRootPathName  = dword ptr -30h
.text:0040E3D0 var_2C          = byte ptr -2Ch
.text:0040E3D0 var_28          = dword ptr -28h
.text:0040E3D0 var_24          = dword ptr -24h
.text:0040E3D0 var_20          = dword ptr -20h
.text:0040E3D0 var_1C          = dword ptr -1Ch
.text:0040E3D0 var_18          = byte ptr -18h
.text:0040E3D0 String1         = dword ptr  4
.text:0040E3D0 arg_4           = dword ptr  8
.text:0040E3D0
.text:0040E3D0                 push    ebp
.text:0040E3D1                 push    edi
.text:0040E3D2                 push    esi
.text:0040E3D3                 push    ebx
.text:0040E3D4                 sub     esp, 5Ch
.text:0040E3D7                 mov     edx, [esp+6Ch+String1]
.text:0040E3DB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040E3DE                 call    sub_40FB30
.text:0040E3E3                 mov     [esp+6Ch+Str], eax
.text:0040E3E6                 call    sub_410C40
.text:0040E3EB                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040E3EF                 test    eax, eax
.text:0040E3F1                 jz      loc_40E623
.text:0040E3F7                 mov     [esp+6Ch+Str], eax ; Str
.text:0040E3FA                 call    strlen
.text:0040E3FF                 mov     edx, [esp+6Ch+arg_4]
.text:0040E403                 mov     ebx, eax
.text:0040E405                 mov     esi, [edx+0Ch]
.text:0040E408                 mov     edi, [edx+8]
.text:0040E40B                 mov     eax, esi
.text:0040E40D                 or      eax, edi
.text:0040E40F                 jz      loc_40E830
.text:0040E415                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:0040E419                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040E41C                 call    GetDriveTypeA
.text:0040E421                 sub     esp, 4
.text:0040E424                 cmp     eax, 4
.text:0040E427                 jz      loc_40E830
.text:0040E42D
.text:0040E42D loc_40E42D:                             ; CODE XREF: sub_40E3D0+48A↓j
.text:0040E42D                                         ; sub_40E3D0+4B2↓j
.text:0040E42D                 mov     edx, [esp+6Ch+arg_4]
.text:0040E431                 mov     esi, [edx+14h]
.text:0040E434                 mov     edi, [edx+10h]
.text:0040E437                 mov     ecx, esi
.text:0040E439                 or      ecx, edi
.text:0040E43B                 jnz     short loc_40E465
.text:0040E43D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:0040E441                 xor     esi, esi
.text:0040E443                 xor     edi, edi
.text:0040E445                 test    ebp, ebp
.text:0040E447                 jz      short loc_40E457
.text:0040E449                 movzx   ebx, byte ptr [ebp+0]
.text:0040E44D                 test    bl, bl
.text:0040E44F                 mov     cl, bl
.text:0040E451                 jnz     loc_40E7E1
.text:0040E457
.text:0040E457 loc_40E457:                             ; CODE XREF: sub_40E3D0+77↑j
.text:0040E457                 xor     eax, eax
.text:0040E459                 xor     edx, edx
.text:0040E45B
.text:0040E45B loc_40E45B:                             ; CODE XREF: sub_40E3D0+458↓j
.text:0040E45B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040E45F                 mov     [ebp+10h], eax
.text:0040E462                 mov     [ebp+14h], edx
.text:0040E465
.text:0040E465 loc_40E465:                             ; CODE XREF: sub_40E3D0+6B↑j
.text:0040E465                 mov     edi, [esp+6Ch+String1]
.text:0040E469                 xor     ebx, ebx
.text:0040E46B                 test    edi, edi
.text:0040E46D                 jz      loc_40E6E3
.text:0040E473                 mov     esi, [esp+6Ch+String1]
.text:0040E477                 cmp     byte ptr [esi], 0
.text:0040E47A                 jnz     loc_40E6F0
.text:0040E480
.text:0040E480 loc_40E480:                             ; CODE XREF: sub_40E3D0+38C↓j
.text:0040E480                                         ; sub_40E3D0+397↓j
.text:0040E480                 mov     ebp, [esp+6Ch+String1]
.text:0040E484                 test    ebp, ebp
.text:0040E486                 jz      loc_40E6E3
.text:0040E48C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040E494                 mov     edi, [esp+6Ch+String1]
.text:0040E498                 mov     [esp+6Ch+Str], edi ; Str
.text:0040E49B                 call    strrchr
.text:0040E4A0                 test    eax, eax
.text:0040E4A2                 jz      loc_40E6E3
.text:0040E4A8                 cld
.text:0040E4A9                 mov     ecx, 5
.text:0040E4AE                 mov     esi, eax
.text:0040E4B0                 mov     edi, offset aLnk ; ".lnk"
.text:0040E4B5                 repe cmpsb
.text:0040E4B7                 setz    cl
.text:0040E4BA                 movzx   eax, cl
.text:0040E4BD                 lea     esi, [esi+0]
.text:0040E4C0
.text:0040E4C0 loc_40E4C0:                             ; CODE XREF: sub_40E3D0+315↓j
.text:0040E4C0                 test    eax, eax
.text:0040E4C2                 jz      short loc_40E4CA
.text:0040E4C4                 or      ebx, 0A000h
.text:0040E4CA
.text:0040E4CA loc_40E4CA:                             ; CODE XREF: sub_40E3D0+F2↑j
.text:0040E4CA                 mov     esi, [esp+6Ch+arg_4]
.text:0040E4CE                 xor     ecx, ecx
.text:0040E4D0                 mov     edi, ds:dword_4193C0
.text:0040E4D6                 or      [esi], ebx
.text:0040E4D8                 mov     ebx, [esi+14h]
.text:0040E4DB                 mov     ebp, [esi+10h]
.text:0040E4DE                 mov     eax, ebx
.text:0040E4E0                 xor     eax, ecx
.text:0040E4E2                 xor     ebp, edi
.text:0040E4E4                 or      eax, ebp
.text:0040E4E6                 jnz     loc_40E670
.text:0040E4EC
.text:0040E4EC loc_40E4EC:                             ; CODE XREF: sub_40E3D0+30E↓j
.text:0040E4EC                 mov     ecx, dword_416060
.text:0040E4F2                 xor     esi, esi
.text:0040E4F4                 xor     edi, edi
.text:0040E4F6                 mov     edx, [esp+6Ch+arg_4]
.text:0040E4FA                 mov     [edx+50h], ecx
.text:0040E4FD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:0040E504                 call    LoadLibraryA
.text:0040E509                 sub     esp, 4
.text:0040E50C                 mov     ebp, eax
.text:0040E50E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040E516                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040E519                 call    GetProcAddress
.text:0040E51E                 sub     esp, 8
.text:0040E521                 test    eax, eax
.text:0040E523                 jz      short loc_40E558
.text:0040E525                 mov     ebx, [esp+6Ch+String1]
.text:0040E529                 lea     esi, [esp+6Ch+var_2C]
.text:0040E52D                 mov     [esp+6Ch+lpProcName], esi
.text:0040E531                 mov     [esp+6Ch+Str], ebx
.text:0040E534                 call    eax
.text:0040E536                 sub     esp, 8
.text:0040E539                 mov     ebx, eax
.text:0040E53B                 cmp     eax, 0FFFFFFFFh
.text:0040E53E                 jz      loc_40E659
.text:0040E544
.text:0040E544 loc_40E544:                             ; CODE XREF: sub_40E3D0+29A↓j
.text:0040E544                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:0040E548                 mov     ecx, ebx
.text:0040E54A                 xor     edi, edi
.text:0040E54C                 xor     ebx, ebx
.text:0040E54E                 mov     edx, esi
.text:0040E550                 mov     esi, ecx
.text:0040E552                 or      esi, edi
.text:0040E554                 mov     edi, ebx
.text:0040E556                 or      edi, edx
.text:0040E558
.text:0040E558 loc_40E558:                             ; CODE XREF: sub_40E3D0+153↑j
.text:0040E558                                         ; sub_40E3D0+294↓j
.text:0040E558                 test    ebp, ebp
.text:0040E55A                 jz      short loc_40E567
.text:0040E55C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040E55F                 call    FreeLibrary
.text:0040E564                 sub     esp, 4
.text:0040E567
.text:0040E567 loc_40E567:                             ; CODE XREF: sub_40E3D0+18A↑j
.text:0040E567                 mov     ebp, edi
.text:0040E569                 mov     edx, ebp
.text:0040E56B                 mov     edi, esi
.text:0040E56D                 or      edx, esi
.text:0040E56F                 jnz     short loc_40E57B
.text:0040E571                 mov     eax, [esp+6Ch+arg_4]
.text:0040E575                 mov     edi, [eax+30h]
.text:0040E578                 mov     ebp, [eax+34h]
.text:0040E57B
.text:0040E57B loc_40E57B:                             ; CODE XREF: sub_40E3D0+19F↑j
.text:0040E57B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040E57F                 mov     ebx, dword_416060
.text:0040E585                 xor     esi, esi
.text:0040E587                 mov     [esp+6Ch+var_60], esi
.text:0040E58B                 mov     [esp+6Ch+Str], edi
.text:0040E58E                 mov     [esp+6Ch+var_64], ebx
.text:0040E592                 call    sub_4144A0
.text:0040E597                 mov     [esp+6Ch+var_3C], eax
.text:0040E59B                 mov     ecx, dword_416060
.text:0040E5A1                 mov     [esp+6Ch+lpProcName], ebp
.text:0040E5A5                 mov     [esp+6Ch+var_38], edx
.text:0040E5A9                 shr     ecx, 9
.text:0040E5AC                 mov     [esp+6Ch+var_44], ecx
.text:0040E5B0                 mov     [esp+6Ch+var_40], 0
.text:0040E5B8                 mov     [esp+6Ch+var_64], ebx
.text:0040E5BC                 mov     [esp+6Ch+var_60], esi
.text:0040E5C0                 mov     [esp+6Ch+Str], edi
.text:0040E5C3                 call    sub_414320
.text:0040E5C8                 mov     ebp, edx
.text:0040E5CA                 or      ebp, eax
.text:0040E5CC                 jz      short loc_40E630
.text:0040E5CE                 mov     ebp, [esp+6Ch+var_3C]
.text:0040E5D2                 mov     esi, [esp+6Ch+var_38]
.text:0040E5D6                 mov     eax, [esp+6Ch+var_44]
.text:0040E5DA                 mov     [esp+6Ch+var_4C], ebp
.text:0040E5DE                 mov     ecx, [esp+6Ch+var_40]
.text:0040E5E2                 mov     ebx, [esp+6Ch+var_44]
.text:0040E5E6                 add     [esp+6Ch+var_4C], 1
.text:0040E5EB                 mov     [esp+6Ch+var_48], esi
.text:0040E5EF                 mov     edi, [esp+6Ch+var_4C]
.text:0040E5F3                 adc     [esp+6Ch+var_48], 0
.text:0040E5F8                 mul     [esp+6Ch+var_4C]
.text:0040E5FC                 imul    ecx, edi
.text:0040E5FF                 mov     esi, eax
.text:0040E601                 mov     eax, [esp+6Ch+var_48]
.text:0040E605                 add     edx, ecx
.text:0040E607                 imul    ebx, eax
.text:0040E60A                 lea     edi, [ebx+edx]
.text:0040E60D
.text:0040E60D loc_40E60D:                             ; CODE XREF: sub_40E3D0+287↓j
.text:0040E60D                 mov     ebx, [esp+6Ch+arg_4]
.text:0040E611                 mov     [ebx+58h], esi
.text:0040E614                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040E618                 mov     [ebx+5Ch], edi
.text:0040E61B                 mov     [esp+6Ch+Str], esi ; Block
.text:0040E61E                 call    free
.text:0040E623
.text:0040E623 loc_40E623:                             ; CODE XREF: sub_40E3D0+21↑j
.text:0040E623                 add     esp, 5Ch
.text:0040E626                 xor     eax, eax
.text:0040E628                 pop     ebx
.text:0040E629                 pop     esi
.text:0040E62A                 pop     edi
.text:0040E62B                 pop     ebp
.text:0040E62C                 retn
.text:0040E62C ; ---------------------------------------------------------------------------
.text:0040E62D                 align 10h
.text:0040E630
.text:0040E630 loc_40E630:                             ; CODE XREF: sub_40E3D0+1FC↑j
.text:0040E630                 mov     eax, [esp+6Ch+var_3C]
.text:0040E634                 mov     edi, [esp+6Ch+var_40]
.text:0040E638                 mov     ecx, [esp+6Ch+var_3C]
.text:0040E63C                 mul     [esp+6Ch+var_44]
.text:0040E640                 mov     ebx, [esp+6Ch+var_44]
.text:0040E644                 imul    ecx, edi
.text:0040E647                 mov     ebp, edx
.text:0040E649                 mov     esi, eax
.text:0040E64B                 mov     edx, [esp+6Ch+var_38]
.text:0040E64F                 add     ebp, ecx
.text:0040E651                 imul    ebx, edx
.text:0040E654                 lea     edi, [ebx+ebp]
.text:0040E657                 jmp     short loc_40E60D
.text:0040E659 ; ---------------------------------------------------------------------------
.text:0040E659
.text:0040E659 loc_40E659:                             ; CODE XREF: sub_40E3D0+16E↑j
.text:0040E659                 call    GetLastError
.text:0040E65E                 xor     esi, esi
.text:0040E660                 xor     edi, edi
.text:0040E662                 test    eax, eax
.text:0040E664                 jnz     loc_40E558
.text:0040E66A                 jmp     loc_40E544
.text:0040E66A ; ---------------------------------------------------------------------------
.text:0040E66F                 align 10h
.text:0040E670
.text:0040E670 loc_40E670:                             ; CODE XREF: sub_40E3D0+116↑j
.text:0040E670                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040E674                 lea     ecx, [esp+6Ch+var_20]
.text:0040E678                 lea     ebx, [esp+6Ch+var_1C]
.text:0040E67C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040E680                 lea     edi, [esp+6Ch+var_24]
.text:0040E684                 lea     ebp, [esp+6Ch+var_28]
.text:0040E688                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040E68C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040E690                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040E694                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040E697                 call    sub_410550
.text:0040E69C                 test    eax, eax
.text:0040E69E                 jnz     short loc_40E6C0
.text:0040E6A0                 mov     [esp+6Ch+var_28], 1
.text:0040E6A8                 mov     [esp+6Ch+var_24], 200h
.text:0040E6B0                 mov     [esp+6Ch+var_20], 0
.text:0040E6B8                 mov     [esp+6Ch+var_1C], 0
.text:0040E6C0
.text:0040E6C0 loc_40E6C0:                             ; CODE XREF: sub_40E3D0+2CE↑j
.text:0040E6C0                 mov     ebp, [esp+6Ch+var_24]
.text:0040E6C4                 mov     edi, [esp+6Ch+var_28]
.text:0040E6C8                 mov     eax, [esp+6Ch+arg_4]
.text:0040E6CC                 imul    ebp, edi
.text:0040E6CF                 mov     esi, [eax+10h]
.text:0040E6D2                 mov     dword_416060, ebp
.text:0040E6D8                 mov     ds:dword_4193C0, esi
.text:0040E6DE                 jmp     loc_40E4EC
.text:0040E6E3 ; ---------------------------------------------------------------------------
.text:0040E6E3
.text:0040E6E3 loc_40E6E3:                             ; CODE XREF: sub_40E3D0+9D↑j
.text:0040E6E3                                         ; sub_40E3D0+B6↑j ...
.text:0040E6E3                 xor     eax, eax
.text:0040E6E5                 jmp     loc_40E4C0
.text:0040E6E5 ; ---------------------------------------------------------------------------
.text:0040E6EA                 align 10h
.text:0040E6F0
.text:0040E6F0 loc_40E6F0:                             ; CODE XREF: sub_40E3D0+AA↑j
.text:0040E6F0                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:0040E6F7                 xor     ebp, ebp
.text:0040E6F9                 call    GetModuleHandleA
.text:0040E6FE                 sub     esp, 4
.text:0040E701                 mov     edi, eax
.text:0040E703                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040E70B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040E70E                 call    GetProcAddress
.text:0040E713                 sub     esp, 8
.text:0040E716                 mov     edx, eax
.text:0040E718                 test    eax, eax
.text:0040E71A                 jz      short loc_40E734
.text:0040E71C                 mov     eax, [esp+6Ch+String1]
.text:0040E720                 lea     ecx, [esp+6Ch+var_18]
.text:0040E724                 mov     [esp+6Ch+lpProcName], ecx
.text:0040E728                 mov     [esp+6Ch+Str], eax
.text:0040E72B                 call    edx
.text:0040E72D                 sub     esp, 8
.text:0040E730                 test    eax, eax
.text:0040E732                 jnz     short loc_40E798
.text:0040E734
.text:0040E734 loc_40E734:                             ; CODE XREF: sub_40E3D0+34A↑j
.text:0040E734                 mov     edx, ds:dword_4193D0
.text:0040E73A                 test    edx, edx
.text:0040E73C                 jz      short loc_40E7B7
.text:0040E73E
.text:0040E73E loc_40E73E:                             ; CODE XREF: sub_40E3D0+3FA↓j
.text:0040E73E                                         ; sub_40E3D0+40C↓j
.text:0040E73E                 mov     eax, [esp+6Ch+String1]
.text:0040E742                 test    eax, eax
.text:0040E744                 jz      short loc_40E74F
.text:0040E746                 mov     esi, [esp+6Ch+String1]
.text:0040E74A                 cmp     byte ptr [esi], 0
.text:0040E74D                 jnz     short loc_40E76C
.text:0040E74F
.text:0040E74F loc_40E74F:                             ; CODE XREF: sub_40E3D0+374↑j
.text:0040E74F                                         ; sub_40E3D0+3B0↓j ...
.text:0040E74F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040E752                 call    FreeLibrary
.text:0040E757                 sub     esp, 4
.text:0040E75A                 test    ebp, ebp
.text:0040E75C                 jz      loc_40E480
.text:0040E762                 mov     ebx, 49h ; 'I'
.text:0040E767                 jmp     loc_40E480
.text:0040E76C ; ---------------------------------------------------------------------------
.text:0040E76C
.text:0040E76C loc_40E76C:                             ; CODE XREF: sub_40E3D0+37D↑j
.text:0040E76C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040E76F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040E777                 call    strrchr
.text:0040E77C                 test    eax, eax
.text:0040E77E                 mov     esi, eax
.text:0040E780                 jz      short loc_40E74F
.text:0040E782                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040E786                 mov     ecx, ds:dword_4193D0
.text:0040E78C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040E78F                 call    strstr
.text:0040E794                 test    eax, eax
.text:0040E796                 jz      short loc_40E79F
.text:0040E798
.text:0040E798 loc_40E798:                             ; CODE XREF: sub_40E3D0+362↑j
.text:0040E798                                         ; sub_40E3D0+3E5↓j
.text:0040E798                 mov     ebp, 1
.text:0040E79D                 jmp     short loc_40E74F
.text:0040E79F ; ---------------------------------------------------------------------------
.text:0040E79F
.text:0040E79F loc_40E79F:                             ; CODE XREF: sub_40E3D0+3C6↑j
.text:0040E79F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040E7A3                 mov     edx, off_416064 ; ".com;.exe;.bat;.cmd"
.text:0040E7A9                 mov     [esp+6Ch+Str], edx ; Str
.text:0040E7AC                 call    strstr
.text:0040E7B1                 test    eax, eax
.text:0040E7B3                 jz      short loc_40E74F
.text:0040E7B5                 jmp     short loc_40E798
.text:0040E7B7 ; ---------------------------------------------------------------------------
.text:0040E7B7
.text:0040E7B7 loc_40E7B7:                             ; CODE XREF: sub_40E3D0+36C↑j
.text:0040E7B7                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040E7BE                 call    getenv
.text:0040E7C3                 mov     ds:dword_4193D0, eax
.text:0040E7C8                 test    eax, eax
.text:0040E7CA                 jnz     loc_40E73E
.text:0040E7D0                 mov     esi, off_416064 ; ".com;.exe;.bat;.cmd"
.text:0040E7D6                 mov     ds:dword_4193D0, esi
.text:0040E7DC                 jmp     loc_40E73E
.text:0040E7E1 ; ---------------------------------------------------------------------------
.text:0040E7E1
.text:0040E7E1 loc_40E7E1:                             ; CODE XREF: sub_40E3D0+81↑j
.text:0040E7E1                                         ; sub_40E3D0+452↓j
.text:0040E7E1                 shld    edi, esi, 8
.text:0040E7E5                 movsx   eax, cl
.text:0040E7E8                 shl     esi, 8
.text:0040E7EB                 cdq
.text:0040E7EC                 add     esi, eax
.text:0040E7EE                 adc     edi, edx
.text:0040E7F0                 mov     edx, edi
.text:0040E7F2                 xor     ebx, ebx
.text:0040E7F4                 and     edx, 0FF000000h
.text:0040E7FA                 mov     eax, edx
.text:0040E7FC                 or      eax, ebx
.text:0040E7FE                 jz      short loc_40E819
.text:0040E800                 mov     ecx, edx
.text:0040E802                 xor     eax, eax
.text:0040E804                 shr     ecx, 10h
.text:0040E807                 mov     edx, esi
.text:0040E809                 xor     edx, ecx
.text:0040E80B                 mov     ecx, edi
.text:0040E80D                 xor     ecx, eax
.text:0040E80F                 mov     esi, edx
.text:0040E811                 mov     edi, ecx
.text:0040E813                 and     edi, 0FFFFFFh
.text:0040E819
.text:0040E819 loc_40E819:                             ; CODE XREF: sub_40E3D0+42E↑j
.text:0040E819                 inc     ebp
.text:0040E81A                 movzx   ebx, byte ptr [ebp+0]
.text:0040E81E                 test    bl, bl
.text:0040E820                 mov     cl, bl
.text:0040E822                 jnz     short loc_40E7E1
.text:0040E824                 mov     eax, esi
.text:0040E826                 mov     edx, edi
.text:0040E828                 jmp     loc_40E45B
.text:0040E828 ; ---------------------------------------------------------------------------
.text:0040E82D                 align 10h
.text:0040E830
.text:0040E830 loc_40E830:                             ; CODE XREF: sub_40E3D0+3F↑j
.text:0040E830                                         ; sub_40E3D0+57↑j
.text:0040E830                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040E834                 mov     ebp, [esp+6Ch+String1]
.text:0040E838                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040E83C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040E83F                 call    _stricmp
.text:0040E844                 test    eax, eax
.text:0040E846                 jnz     short loc_40E860
.text:0040E848                 mov     ebx, [esp+6Ch+arg_4]
.text:0040E84C                 mov     dword ptr [ebx+8], 5
.text:0040E853                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040E85A                 jmp     loc_40E42D
.text:0040E85A ; ---------------------------------------------------------------------------
.text:0040E85F                 align 10h
.text:0040E860
.text:0040E860 loc_40E860:                             ; CODE XREF: sub_40E3D0+476↑j
.text:0040E860                 mov     ebp, [esp+6Ch+String1]
.text:0040E864                 xor     esi, esi
.text:0040E866                 xor     edi, edi
.text:0040E868                 add     ebp, ebx
.text:0040E86A                 jz      short loc_40E874
.text:0040E86C                 movzx   ecx, byte ptr [ebp+0]
.text:0040E870                 test    cl, cl
.text:0040E872                 jnz     short loc_40E887
.text:0040E874
.text:0040E874 loc_40E874:                             ; CODE XREF: sub_40E3D0+49A↑j
.text:0040E874                 xor     eax, eax
.text:0040E876                 xor     edx, edx
.text:0040E878
.text:0040E878 loc_40E878:                             ; CODE XREF: sub_40E3D0+4FE↓j
.text:0040E878                 mov     ebp, [esp+6Ch+arg_4]
.text:0040E87C                 mov     [ebp+8], eax
.text:0040E87F                 mov     [ebp+0Ch], edx
.text:0040E882                 jmp     loc_40E42D
.text:0040E887 ; ---------------------------------------------------------------------------
.text:0040E887
.text:0040E887 loc_40E887:                             ; CODE XREF: sub_40E3D0+4A2↑j
.text:0040E887                                         ; sub_40E3D0+4F8↓j
.text:0040E887                 shld    edi, esi, 8
.text:0040E88B                 movsx   eax, cl
.text:0040E88E                 shl     esi, 8
.text:0040E891                 cdq
.text:0040E892                 add     esi, eax
.text:0040E894                 adc     edi, edx
.text:0040E896                 mov     edx, edi
.text:0040E898                 xor     ebx, ebx
.text:0040E89A                 and     edx, 0FF000000h
.text:0040E8A0                 mov     eax, edx
.text:0040E8A2                 or      eax, ebx
.text:0040E8A4                 jz      short loc_40E8BF
.text:0040E8A6                 mov     ecx, edx
.text:0040E8A8                 xor     eax, eax
.text:0040E8AA                 shr     ecx, 10h
.text:0040E8AD                 mov     edx, esi
.text:0040E8AF                 xor     edx, ecx
.text:0040E8B1                 mov     ecx, edi
.text:0040E8B3                 xor     ecx, eax
.text:0040E8B5                 mov     esi, edx
.text:0040E8B7                 mov     edi, ecx
.text:0040E8B9                 and     edi, 0FFFFFFh
.text:0040E8BF
.text:0040E8BF loc_40E8BF:                             ; CODE XREF: sub_40E3D0+4D4↑j
.text:0040E8BF                 inc     ebp
.text:0040E8C0                 movzx   ebx, byte ptr [ebp+0]
.text:0040E8C4                 test    bl, bl
.text:0040E8C6                 mov     cl, bl
.text:0040E8C8                 jnz     short loc_40E887
.text:0040E8CA                 mov     eax, esi
.text:0040E8CC                 mov     edx, edi
.text:0040E8CE                 jmp     short loc_40E878
.text:0040E8CE sub_40E3D0      endp
.text:0040E8CE
.text:0040E8D0
.text:0040E8D0 ; =============== S U B R O U T I N E =======================================
.text:0040E8D0
.text:0040E8D0
.text:0040E8D0 ; int __cdecl sub_40E8D0(LPCSTR)
.text:0040E8D0 sub_40E8D0      proc near               ; CODE XREF: sub_40FC50+CA↓p
.text:0040E8D0
.text:0040E8D0 lpRootPathName  = dword ptr -83Ch
.text:0040E8D0 lpVolumeNameBuffer= dword ptr -838h
.text:0040E8D0 nVolumeNameSize = dword ptr -834h
.text:0040E8D0 lpVolumeSerialNumber= dword ptr -830h
.text:0040E8D0 lpMaximumComponentLength= dword ptr -82Ch
.text:0040E8D0 lpFileSystemFlags= dword ptr -828h
.text:0040E8D0 lpFileSystemNameBuffer= dword ptr -824h
.text:0040E8D0 nFileSystemNameSize= dword ptr -820h
.text:0040E8D0 VolumeSerialNumber= dword ptr -818h
.text:0040E8D0 MaximumComponentLength= dword ptr -814h
.text:0040E8D0 FileSystemFlags = dword ptr -810h
.text:0040E8D0 FileSystemNameBuffer= byte ptr -80Ch
.text:0040E8D0 VolumeNameBuffer= byte ptr -40Ch
.text:0040E8D0 var_4           = dword ptr -4
.text:0040E8D0 arg_0           = dword ptr  4
.text:0040E8D0
.text:0040E8D0                 sub     esp, 83Ch
.text:0040E8D6                 mov     [esp+83Ch+var_4], ebx
.text:0040E8DD                 mov     ebx, [esp+83Ch+arg_0]
.text:0040E8E4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040E8E7                 call    sub_40FB30
.text:0040E8EC                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040E8EF                 call    sub_410C40
.text:0040E8F4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040E8F7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040E8FB                 mov     ebx, eax
.text:0040E8FD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040E901                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040E905                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040E909                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040E90D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040E911                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040E915                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040E91C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040E920                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040E924                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040E92C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040E934                 call    GetVolumeInformationA
.text:0040E939                 sub     esp, 20h
.text:0040E93C                 test    eax, eax
.text:0040E93E                 setz    cl
.text:0040E941                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040E944                 movzx   edx, cl
.text:0040E947                 dec     edx
.text:0040E948                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040E94C                 call    free
.text:0040E951                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040E955                 mov     ebx, [esp+83Ch+var_4]
.text:0040E95C                 add     esp, 83Ch
.text:0040E962                 retn
.text:0040E962 sub_40E8D0      endp
.text:0040E962
.text:0040E962 ; ---------------------------------------------------------------------------
.text:0040E963                 align 10h
.text:0040E970                 push    ebp
.text:0040E971                 push    edi
.text:0040E972                 xor     edi, edi
.text:0040E974                 push    esi
.text:0040E975                 xor     esi, esi
.text:0040E977                 push    ebx
.text:0040E978                 mov     ebp, [esp+14h]
.text:0040E97C                 test    ebp, ebp
.text:0040E97E                 jz      short loc_40E988
.text:0040E980                 movzx   ecx, byte ptr [ebp+0]
.text:0040E984                 test    cl, cl
.text:0040E986                 jnz     short loc_40E991
.text:0040E988
.text:0040E988 loc_40E988:                             ; CODE XREF: .text:0040E97E↑j
.text:0040E988                 xor     eax, eax
.text:0040E98A                 xor     edx, edx
.text:0040E98C
.text:0040E98C loc_40E98C:                             ; CODE XREF: .text:0040E9D8↓j
.text:0040E98C                 pop     ebx
.text:0040E98D                 pop     esi
.text:0040E98E                 pop     edi
.text:0040E98F                 pop     ebp
.text:0040E990                 retn
.text:0040E991 ; ---------------------------------------------------------------------------
.text:0040E991
.text:0040E991 loc_40E991:                             ; CODE XREF: .text:0040E986↑j
.text:0040E991                                         ; .text:0040E9D2↓j
.text:0040E991                 shld    edi, esi, 8
.text:0040E995                 movsx   eax, cl
.text:0040E998                 shl     esi, 8
.text:0040E99B                 cdq
.text:0040E99C                 add     esi, eax
.text:0040E99E                 adc     edi, edx
.text:0040E9A0                 mov     edx, edi
.text:0040E9A2                 xor     ebx, ebx
.text:0040E9A4                 and     edx, 0FF000000h
.text:0040E9AA                 mov     eax, edx
.text:0040E9AC                 or      eax, ebx
.text:0040E9AE                 jz      short loc_40E9C9
.text:0040E9B0                 mov     ecx, edx
.text:0040E9B2                 xor     eax, eax
.text:0040E9B4                 shr     ecx, 10h
.text:0040E9B7                 mov     edx, esi
.text:0040E9B9                 xor     edx, ecx
.text:0040E9BB                 mov     ecx, edi
.text:0040E9BD                 xor     ecx, eax
.text:0040E9BF                 mov     esi, edx
.text:0040E9C1                 mov     edi, ecx
.text:0040E9C3                 and     edi, 0FFFFFFh
.text:0040E9C9
.text:0040E9C9 loc_40E9C9:                             ; CODE XREF: .text:0040E9AE↑j
.text:0040E9C9                 inc     ebp
.text:0040E9CA                 movzx   ebx, byte ptr [ebp+0]
.text:0040E9CE                 test    bl, bl
.text:0040E9D0                 mov     cl, bl
.text:0040E9D2                 jnz     short loc_40E991
.text:0040E9D4                 mov     eax, esi
.text:0040E9D6                 mov     edx, edi
.text:0040E9D8                 jmp     short loc_40E98C
.text:0040E9D8 ; ---------------------------------------------------------------------------
.text:0040E9DA                 align 10h
.text:0040E9E0                 sub     esp, 2Ch
.text:0040E9E3                 lea     edx, [esp+24h]
.text:0040E9E7                 lea     ecx, [esp+28h]
.text:0040E9EB                 mov     [esp+0Ch], edx
.text:0040E9EF                 lea     edx, [esp+1Ch]
.text:0040E9F3                 mov     [esp+4], edx
.text:0040E9F7                 mov     edx, [esp+30h]
.text:0040E9FB                 mov     [esp+10h], ecx
.text:0040E9FF                 lea     ecx, [esp+20h]
.text:0040EA03                 mov     [esp+8], ecx
.text:0040EA07                 mov     [esp], edx
.text:0040EA0A                 call    sub_410550
.text:0040EA0F                 test    eax, eax
.text:0040EA11                 jnz     short loc_40EA33
.text:0040EA13                 mov     dword ptr [esp+1Ch], 1
.text:0040EA1B                 mov     dword ptr [esp+20h], 200h
.text:0040EA23                 mov     dword ptr [esp+24h], 0
.text:0040EA2B                 mov     dword ptr [esp+28h], 0
.text:0040EA33
.text:0040EA33 loc_40EA33:                             ; CODE XREF: .text:0040EA11↑j
.text:0040EA33                 mov     eax, [esp+20h]
.text:0040EA37                 mov     ecx, [esp+1Ch]
.text:0040EA3B                 add     esp, 2Ch
.text:0040EA3E                 imul    eax, ecx
.text:0040EA41                 retn
.text:0040EA41 ; ---------------------------------------------------------------------------
.text:0040EA42                 align 10h
.text:0040EA50                 sub     esp, 1Ch
.text:0040EA53                 mov     eax, [esp+20h]
.text:0040EA57                 mov     [esp+14h], esi
.text:0040EA5B                 mov     [esp+18h], edi
.text:0040EA5F                 test    eax, eax
.text:0040EA61                 jz      short loc_40EAA0
.text:0040EA63                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040EA6B                 mov     [esp], eax
.text:0040EA6E                 call    strrchr
.text:0040EA73                 test    eax, eax
.text:0040EA75                 jz      short loc_40EAA0
.text:0040EA77                 cld
.text:0040EA78                 mov     esi, eax
.text:0040EA7A                 mov     edi, offset aLnk ; ".lnk"
.text:0040EA7F                 mov     ecx, 5
.text:0040EA84                 repe cmpsb
.text:0040EA86                 setz    dl
.text:0040EA89                 movzx   eax, dl
.text:0040EA8C                 lea     esi, [esi+0]
.text:0040EA90
.text:0040EA90 loc_40EA90:                             ; CODE XREF: .text:0040EAA2↓j
.text:0040EA90                 mov     esi, [esp+14h]
.text:0040EA94                 mov     edi, [esp+18h]
.text:0040EA98                 add     esp, 1Ch
.text:0040EA9B                 retn
.text:0040EA9B ; ---------------------------------------------------------------------------
.text:0040EA9C                 align 10h
.text:0040EAA0
.text:0040EAA0 loc_40EAA0:                             ; CODE XREF: .text:0040EA61↑j
.text:0040EAA0                                         ; .text:0040EA75↑j
.text:0040EAA0                 xor     eax, eax
.text:0040EAA2                 jmp     short loc_40EA90
.text:0040EAA2 ; ---------------------------------------------------------------------------
.text:0040EAA4                 align 10h
.text:0040EAB0                 sub     esp, 1Ch
.text:0040EAB3                 mov     [esp+10h], ebx
.text:0040EAB7                 mov     ebx, [esp+20h]
.text:0040EABB                 mov     [esp+14h], esi
.text:0040EABF                 mov     [esp+18h], edi
.text:0040EAC3                 xor     edi, edi
.text:0040EAC5                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040EACC                 call    GetModuleHandleA
.text:0040EAD1                 sub     esp, 4
.text:0040EAD4                 mov     esi, eax
.text:0040EAD6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040EADE                 mov     [esp], eax
.text:0040EAE1                 call    GetProcAddress
.text:0040EAE6                 sub     esp, 8
.text:0040EAE9                 test    eax, eax
.text:0040EAEB                 jz      short loc_40EB01
.text:0040EAED                 mov     [esp], ebx
.text:0040EAF0                 lea     ecx, [esp+0Ch]
.text:0040EAF4                 mov     [esp+4], ecx
.text:0040EAF8                 call    eax
.text:0040EAFA                 sub     esp, 8
.text:0040EAFD                 test    eax, eax
.text:0040EAFF                 jnz     short loc_40EB60
.text:0040EB01
.text:0040EB01 loc_40EB01:                             ; CODE XREF: .text:0040EAEB↑j
.text:0040EB01                 mov     eax, ds:dword_4193D0
.text:0040EB06                 test    eax, eax
.text:0040EB08                 jz      short loc_40EB80
.text:0040EB0A
.text:0040EB0A loc_40EB0A:                             ; CODE XREF: .text:0040EB93↓j
.text:0040EB0A                                         ; .text:0040EBA5↓j
.text:0040EB0A                 test    ebx, ebx
.text:0040EB0C                 jz      short loc_40EB13
.text:0040EB0E                 cmp     byte ptr [ebx], 0
.text:0040EB11                 jnz     short loc_40EB30
.text:0040EB13
.text:0040EB13 loc_40EB13:                             ; CODE XREF: .text:0040EB0C↑j
.text:0040EB13                                         ; .text:0040EB44↓j ...
.text:0040EB13                 mov     [esp], esi
.text:0040EB16                 call    FreeLibrary
.text:0040EB1B                 sub     esp, 4
.text:0040EB1E                 mov     eax, edi
.text:0040EB20                 mov     ebx, [esp+10h]
.text:0040EB24                 mov     esi, [esp+14h]
.text:0040EB28                 mov     edi, [esp+18h]
.text:0040EB2C                 add     esp, 1Ch
.text:0040EB2F                 retn
.text:0040EB30 ; ---------------------------------------------------------------------------
.text:0040EB30
.text:0040EB30 loc_40EB30:                             ; CODE XREF: .text:0040EB11↑j
.text:0040EB30                 mov     [esp], ebx
.text:0040EB33                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040EB3B                 call    strrchr
.text:0040EB40                 test    eax, eax
.text:0040EB42                 mov     ebx, eax
.text:0040EB44                 jz      short loc_40EB13
.text:0040EB46                 mov     [esp+4], eax
.text:0040EB4A                 mov     ecx, ds:dword_4193D0
.text:0040EB50                 mov     [esp], ecx
.text:0040EB53                 call    strstr
.text:0040EB58                 test    eax, eax
.text:0040EB5A                 jz      short loc_40EB67
.text:0040EB5C                 lea     esi, [esi+0]
.text:0040EB60
.text:0040EB60 loc_40EB60:                             ; CODE XREF: .text:0040EAFF↑j
.text:0040EB60                                         ; .text:0040EB7D↓j
.text:0040EB60                 mov     edi, 1
.text:0040EB65                 jmp     short loc_40EB13
.text:0040EB67 ; ---------------------------------------------------------------------------
.text:0040EB67
.text:0040EB67 loc_40EB67:                             ; CODE XREF: .text:0040EB5A↑j
.text:0040EB67                 mov     [esp+4], ebx
.text:0040EB6B                 mov     ebx, off_416064 ; ".com;.exe;.bat;.cmd"
.text:0040EB71                 mov     [esp], ebx
.text:0040EB74                 call    strstr
.text:0040EB79                 test    eax, eax
.text:0040EB7B                 jz      short loc_40EB13
.text:0040EB7D                 jmp     short loc_40EB60
.text:0040EB7D ; ---------------------------------------------------------------------------
.text:0040EB7F                 align 10h
.text:0040EB80
.text:0040EB80 loc_40EB80:                             ; CODE XREF: .text:0040EB08↑j
.text:0040EB80                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040EB87                 call    getenv
.text:0040EB8C                 mov     ds:dword_4193D0, eax
.text:0040EB91                 test    eax, eax
.text:0040EB93                 jnz     loc_40EB0A
.text:0040EB99                 mov     edx, off_416064 ; ".com;.exe;.bat;.cmd"
.text:0040EB9F                 mov     ds:dword_4193D0, edx
.text:0040EBA5                 jmp     loc_40EB0A
.text:0040EBA5 ; ---------------------------------------------------------------------------
.text:0040EBAA                 align 10h
.text:0040EBB0                 sub     esp, 0Ch
.text:0040EBB3                 mov     edx, [esp+10h]
.text:0040EBB7                 mov     [esp], edx
.text:0040EBBA                 call    GetFileType
.text:0040EBBF                 sub     esp, 4
.text:0040EBC2                 xor     edx, edx
.text:0040EBC4                 cmp     eax, 2
.text:0040EBC7                 jz      short loc_40EBE0
.text:0040EBC9                 cmp     eax, 3
.text:0040EBCC                 jz      short loc_40EBD4
.text:0040EBCE
.text:0040EBCE loc_40EBCE:                             ; CODE XREF: .text:0040EBD9↓j
.text:0040EBCE                                         ; .text:0040EBE5↓j
.text:0040EBCE                 mov     eax, edx
.text:0040EBD0                 add     esp, 0Ch
.text:0040EBD3                 retn
.text:0040EBD4 ; ---------------------------------------------------------------------------
.text:0040EBD4
.text:0040EBD4 loc_40EBD4:                             ; CODE XREF: .text:0040EBCC↑j
.text:0040EBD4                 mov     edx, 1000h
.text:0040EBD9                 jmp     short loc_40EBCE
.text:0040EBD9 ; ---------------------------------------------------------------------------
.text:0040EBDB                 align 10h
.text:0040EBE0
.text:0040EBE0 loc_40EBE0:                             ; CODE XREF: .text:0040EBC7↑j
.text:0040EBE0                 mov     edx, 2000h
.text:0040EBE5                 jmp     short loc_40EBCE
.text:0040EBE5 ; ---------------------------------------------------------------------------
.text:0040EBE7                 align 10h
.text:0040EBF0                 mov     ecx, [esp+4]
.text:0040EBF4                 xor     edx, edx
.text:0040EBF6                 test    cl, 10h
.text:0040EBF9                 setz    dl
.text:0040EBFC                 dec     edx
.text:0040EBFD                 and     edx, 0FFFFC000h
.text:0040EC03                 add     edx, 8000h
.text:0040EC09                 or      edx, 124h
.text:0040EC0F                 test    cl, 1
.text:0040EC12                 movzx   eax, dx
.text:0040EC15                 jnz     short locret_40EC1C
.text:0040EC17                 or      eax, 92h
.text:0040EC1C
.text:0040EC1C locret_40EC1C:                          ; CODE XREF: .text:0040EC15↑j
.text:0040EC1C                 retn
.text:0040EC1C ; ---------------------------------------------------------------------------
.text:0040EC1D                 align 10h
.text:0040EC20                 sub     esp, 2Ch
.text:0040EC23                 mov     [esp+20h], esi
.text:0040EC27                 mov     esi, [esp+30h]
.text:0040EC2B                 mov     [esp+1Ch], ebx
.text:0040EC2F                 xor     ebx, ebx
.text:0040EC31                 test    esi, esi
.text:0040EC33                 mov     [esp+24h], edi
.text:0040EC37                 mov     [esp+28h], ebp
.text:0040EC3B                 jz      short loc_40EC90
.text:0040EC3D                 cmp     byte ptr [esi], 0
.text:0040EC40                 jnz     short loc_40EC94
.text:0040EC42
.text:0040EC42 loc_40EC42:                             ; CODE XREF: .text:0040ECFC↓j
.text:0040EC42                                         ; .text:0040ED07↓j
.text:0040EC42                 test    esi, esi
.text:0040EC44                 jz      short loc_40EC90
.text:0040EC46                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040EC4E                 mov     [esp], esi
.text:0040EC51                 call    strrchr
.text:0040EC56                 test    eax, eax
.text:0040EC58                 jz      short loc_40EC90
.text:0040EC5A                 cld
.text:0040EC5B                 mov     ecx, 5
.text:0040EC60                 mov     esi, eax
.text:0040EC62                 mov     edi, offset aLnk ; ".lnk"
.text:0040EC67                 repe cmpsb
.text:0040EC69                 setz    cl
.text:0040EC6C                 movzx   eax, cl
.text:0040EC6F                 nop
.text:0040EC70
.text:0040EC70 loc_40EC70:                             ; CODE XREF: .text:0040EC92↓j
.text:0040EC70                 test    eax, eax
.text:0040EC72                 jz      short loc_40EC7A
.text:0040EC74                 or      ebx, 0A000h
.text:0040EC7A
.text:0040EC7A loc_40EC7A:                             ; CODE XREF: .text:0040EC72↑j
.text:0040EC7A                 mov     eax, ebx
.text:0040EC7C                 mov     esi, [esp+20h]
.text:0040EC80                 mov     ebx, [esp+1Ch]
.text:0040EC84                 mov     edi, [esp+24h]
.text:0040EC88                 mov     ebp, [esp+28h]
.text:0040EC8C                 add     esp, 2Ch
.text:0040EC8F                 retn
.text:0040EC90 ; ---------------------------------------------------------------------------
.text:0040EC90
.text:0040EC90 loc_40EC90:                             ; CODE XREF: .text:0040EC3B↑j
.text:0040EC90                                         ; .text:0040EC44↑j ...
.text:0040EC90                 xor     eax, eax
.text:0040EC92                 jmp     short loc_40EC70
.text:0040EC94 ; ---------------------------------------------------------------------------
.text:0040EC94
.text:0040EC94 loc_40EC94:                             ; CODE XREF: .text:0040EC40↑j
.text:0040EC94                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040EC9B                 call    GetModuleHandleA
.text:0040ECA0                 sub     esp, 4
.text:0040ECA3                 mov     ebp, eax
.text:0040ECA5                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040ECAD                 mov     [esp], eax
.text:0040ECB0                 call    GetProcAddress
.text:0040ECB5                 sub     esp, 8
.text:0040ECB8                 test    eax, eax
.text:0040ECBA                 mov     dword ptr [esp+14h], 0
.text:0040ECC2                 jz      short loc_40ECD8
.text:0040ECC4                 mov     [esp], esi
.text:0040ECC7                 lea     ecx, [esp+18h]
.text:0040ECCB                 mov     [esp+4], ecx
.text:0040ECCF                 call    eax
.text:0040ECD1                 sub     esp, 8
.text:0040ECD4                 test    eax, eax
.text:0040ECD6                 jnz     short loc_40ED38
.text:0040ECD8
.text:0040ECD8 loc_40ECD8:                             ; CODE XREF: .text:0040ECC2↑j
.text:0040ECD8                 mov     edx, ds:dword_4193D0
.text:0040ECDE                 test    edx, edx
.text:0040ECE0                 jz      short loc_40ED60
.text:0040ECE2
.text:0040ECE2 loc_40ECE2:                             ; CODE XREF: .text:0040ED73↓j
.text:0040ECE2                                         ; .text:0040ED85↓j
.text:0040ECE2                 test    esi, esi
.text:0040ECE4                 jz      short loc_40ECEB
.text:0040ECE6                 cmp     byte ptr [esi], 0
.text:0040ECE9                 jnz     short loc_40ED0C
.text:0040ECEB
.text:0040ECEB loc_40ECEB:                             ; CODE XREF: .text:0040ECE4↑j
.text:0040ECEB                                         ; .text:0040ED20↓j ...
.text:0040ECEB                 mov     [esp], ebp
.text:0040ECEE                 call    FreeLibrary
.text:0040ECF3                 sub     esp, 4
.text:0040ECF6                 mov     eax, [esp+14h]
.text:0040ECFA                 test    eax, eax
.text:0040ECFC                 jz      loc_40EC42
.text:0040ED02                 mov     ebx, 49h ; 'I'
.text:0040ED07                 jmp     loc_40EC42
.text:0040ED0C ; ---------------------------------------------------------------------------
.text:0040ED0C
.text:0040ED0C loc_40ED0C:                             ; CODE XREF: .text:0040ECE9↑j
.text:0040ED0C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040ED14                 mov     [esp], esi
.text:0040ED17                 call    strrchr
.text:0040ED1C                 test    eax, eax
.text:0040ED1E                 mov     edi, eax
.text:0040ED20                 jz      short loc_40ECEB
.text:0040ED22                 mov     [esp+4], eax
.text:0040ED26                 mov     edx, ds:dword_4193D0
.text:0040ED2C                 mov     [esp], edx
.text:0040ED2F                 call    strstr
.text:0040ED34                 test    eax, eax
.text:0040ED36                 jz      short loc_40ED42
.text:0040ED38
.text:0040ED38 loc_40ED38:                             ; CODE XREF: .text:0040ECD6↑j
.text:0040ED38                                         ; .text:0040ED58↓j
.text:0040ED38                 mov     dword ptr [esp+14h], 1
.text:0040ED40                 jmp     short loc_40ECEB
.text:0040ED42 ; ---------------------------------------------------------------------------
.text:0040ED42
.text:0040ED42 loc_40ED42:                             ; CODE XREF: .text:0040ED36↑j
.text:0040ED42                 mov     [esp+4], edi
.text:0040ED46                 mov     edi, off_416064 ; ".com;.exe;.bat;.cmd"
.text:0040ED4C                 mov     [esp], edi
.text:0040ED4F                 call    strstr
.text:0040ED54                 test    eax, eax
.text:0040ED56                 jz      short loc_40ECEB
.text:0040ED58                 jmp     short loc_40ED38
.text:0040ED58 ; ---------------------------------------------------------------------------
.text:0040ED5A                 align 10h
.text:0040ED60
.text:0040ED60 loc_40ED60:                             ; CODE XREF: .text:0040ECE0↑j
.text:0040ED60                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040ED67                 call    getenv
.text:0040ED6C                 mov     ds:dword_4193D0, eax
.text:0040ED71                 test    eax, eax
.text:0040ED73                 jnz     loc_40ECE2
.text:0040ED79                 mov     ecx, off_416064 ; ".com;.exe;.bat;.cmd"
.text:0040ED7F                 mov     ds:dword_4193D0, ecx
.text:0040ED85                 jmp     loc_40ECE2
.text:0040ED85 ; ---------------------------------------------------------------------------
.text:0040ED8A                 align 10h
.text:0040ED90                 push    esi
.text:0040ED91                 push    ebx
.text:0040ED92                 sub     esp, 864h
.text:0040ED98                 mov     ebx, [esp+870h]
.text:0040ED9F                 lea     edx, [esp+830h]
.text:0040EDA6                 mov     esi, [esp+874h]
.text:0040EDAD                 mov     [esp+4], edx
.text:0040EDB1                 mov     [esp], ebx
.text:0040EDB4                 call    sub_40DC10
.text:0040EDB9                 xor     edx, edx
.text:0040EDBB                 test    eax, eax
.text:0040EDBD                 jz      loc_40EEA5
.text:0040EDC3                 mov     ecx, [esp+830h]
.text:0040EDCA                 test    cl, 10h
.text:0040EDCD                 mov     [esi], ecx
.text:0040EDCF                 mov     eax, [esp+834h]
.text:0040EDD6                 mov     edx, [esp+838h]
.text:0040EDDD                 mov     [esi+4], eax
.text:0040EDE0                 mov     [esi+8], edx
.text:0040EDE3                 mov     eax, [esp+83Ch]
.text:0040EDEA                 mov     edx, [esp+840h]
.text:0040EDF1                 mov     [esi+0Ch], eax
.text:0040EDF4                 mov     [esi+10h], edx
.text:0040EDF7                 mov     edx, [esp+848h]
.text:0040EDFE                 mov     eax, [esp+844h]
.text:0040EE05                 mov     [esi+18h], edx
.text:0040EE08                 mov     [esi+14h], eax
.text:0040EE0B                 mov     edx, [esp+84Ch]
.text:0040EE12                 mov     [esi+20h], edx
.text:0040EE15                 mov     edx, [esp+850h]
.text:0040EE1C                 mov     [esi+24h], edx
.text:0040EE1F                 jnz     loc_40EEB0
.text:0040EE25                 mov     dword ptr [esi+28h], 1
.text:0040EE2C
.text:0040EE2C loc_40EE2C:                             ; CODE XREF: .text:0040EEBB↓j
.text:0040EE2C                 mov     [esp], ebx
.text:0040EE2F                 call    sub_40FB30
.text:0040EE34                 mov     [esp], eax
.text:0040EE37                 call    sub_410C40
.text:0040EE3C                 mov     [esp], eax
.text:0040EE3F                 lea     edx, [esp+30h]
.text:0040EE43                 mov     ebx, eax
.text:0040EE45                 mov     [esp+18h], edx
.text:0040EE49                 lea     ecx, [esp+2Ch]
.text:0040EE4D                 lea     edx, [esp+28h]
.text:0040EE51                 mov     [esp+14h], ecx
.text:0040EE55                 lea     ecx, [esp+24h]
.text:0040EE59                 mov     [esp+10h], edx
.text:0040EE5D                 lea     edx, [esp+430h]
.text:0040EE64                 mov     [esp+0Ch], ecx
.text:0040EE68                 mov     [esp+4], edx
.text:0040EE6C                 mov     dword ptr [esp+1Ch], 400h
.text:0040EE74                 mov     dword ptr [esp+8], 400h
.text:0040EE7C                 call    GetVolumeInformationA
.text:0040EE81                 sub     esp, 20h
.text:0040EE84                 test    eax, eax
.text:0040EE86                 setz    cl
.text:0040EE89                 mov     [esp], ebx
.text:0040EE8C                 movzx   edx, cl
.text:0040EE8F                 dec     edx
.text:0040EE90                 and     [esp+24h], edx
.text:0040EE94                 call    free
.text:0040EE99                 mov     ecx, [esp+24h]
.text:0040EE9D                 mov     edx, 1
.text:0040EEA2                 mov     [esi+1Ch], ecx
.text:0040EEA5
.text:0040EEA5 loc_40EEA5:                             ; CODE XREF: .text:0040EDBD↑j
.text:0040EEA5                 add     esp, 864h
.text:0040EEAB                 mov     eax, edx
.text:0040EEAD                 pop     ebx
.text:0040EEAE                 pop     esi
.text:0040EEAF                 retn
.text:0040EEB0 ; ---------------------------------------------------------------------------
.text:0040EEB0
.text:0040EEB0 loc_40EEB0:                             ; CODE XREF: .text:0040EE1F↑j
.text:0040EEB0                 mov     [esp], ebx
.text:0040EEB3                 call    sub_40DD80
.text:0040EEB8                 mov     [esi+28h], eax
.text:0040EEBB                 jmp     loc_40EE2C
.text:0040EEC0 ; ---------------------------------------------------------------------------
.text:0040EEC0                 push    ebp
.text:0040EEC1                 xor     edx, edx
.text:0040EEC3                 push    edi
.text:0040EEC4                 push    esi
.text:0040EEC5                 xor     esi, esi
.text:0040EEC7                 push    ebx
.text:0040EEC8                 sub     esp, 1Ch
.text:0040EECB                 mov     ebx, [esp+5Ch]
.text:0040EECF                 mov     ecx, [esp+30h]
.text:0040EED3                 mov     edi, [esp+60h]
.text:0040EED7                 or      esi, ebx
.text:0040EED9                 mov     eax, [esp+4Ch]
.text:0040EEDD                 or      edi, edx
.text:0040EEDF                 mov     ebx, [esp+64h]
.text:0040EEE3                 xor     edx, edx
.text:0040EEE5                 test    cl, 10h
.text:0040EEE8                 setz    dl
.text:0040EEEB                 mov     [ebx+10h], eax
.text:0040EEEE                 mov     [ebx+8], edi
.text:0040EEF1                 mov     [ebx+0Ch], esi
.text:0040EEF4                 dec     edx
.text:0040EEF5                 and     edx, 0FFFFC000h
.text:0040EEFB                 mov     dword ptr [ebx+14h], 0
.text:0040EF02                 add     edx, 8000h
.text:0040EF08                 or      edx, 124h
.text:0040EF0E                 test    cl, 1
.text:0040EF11                 movzx   eax, dx
.text:0040EF14                 jnz     short loc_40EF1B
.text:0040EF16                 or      eax, 92h
.text:0040EF1B
.text:0040EF1B loc_40EF1B:                             ; CODE XREF: .text:0040EF14↑j
.text:0040EF1B                 mov     ebx, [esp+54h]
.text:0040EF1F                 xor     edx, edx
.text:0040EF21                 xor     ebp, ebp
.text:0040EF23                 mov     edi, [esp+50h]
.text:0040EF27                 mov     ecx, [esp+64h]
.text:0040EF2B                 mov     esi, edi
.text:0040EF2D                 or      [ecx], eax
.text:0040EF2F                 mov     edi, ebx
.text:0040EF31                 or      edi, ebp
.text:0040EF33                 mov     ebp, edx
.text:0040EF35                 mov     ebx, [esp+64h]
.text:0040EF39                 or      ebp, esi
.text:0040EF3B                 mov     esi, [esp+58h]
.text:0040EF3F                 mov     edx, [esp+40h]
.text:0040EF43                 mov     [ebx+30h], edi
.text:0040EF46                 mov     [ebx+18h], esi
.text:0040EF49                 mov     ecx, edx
.text:0040EF4B                 xor     esi, esi
.text:0040EF4D                 mov     [ebx+34h], ebp
.text:0040EF50                 xor     edx, edx
.text:0040EF52                 or      esi, ecx
.text:0040EF54                 mov     dword ptr [esp+8], 989680h
.text:0040EF5C                 mov     ebx, [esp+3Ch]
.text:0040EF60                 mov     ecx, esi
.text:0040EF62                 mov     dword ptr [esp+0Ch], 0
.text:0040EF6A                 or      ebx, edx
.text:0040EF6C                 mov     edx, ebx
.text:0040EF6E                 sub     edx, 0D53E8000h
.text:0040EF74                 sbb     ecx, 19DB1DEh
.text:0040EF7A                 mov     [esp+4], ecx
.text:0040EF7E                 mov     [esp], edx
.text:0040EF81                 call    sub_4144A0
.text:0040EF86                 mov     edx, eax
.text:0040EF88                 mov     ecx, [esp+64h]
.text:0040EF8C                 shr     eax, 1Fh
.text:0040EF8F                 dec     eax
.text:0040EF90                 and     edx, eax
.text:0040EF92                 mov     [ecx+38h], edx
.text:0040EF95                 mov     [esp], ebx
.text:0040EF98                 mov     [esp+4], esi
.text:0040EF9C                 mov     dword ptr [esp+8], 989680h
.text:0040EFA4                 mov     dword ptr [esp+0Ch], 0
.text:0040EFAC                 call    sub_414320
.text:0040EFB1                 lea     ecx, [eax+eax*4]
.text:0040EFB4                 lea     esi, [ecx+ecx*4]
.text:0040EFB7                 mov     eax, [esp+64h]
.text:0040EFBB                 shl     esi, 2
.text:0040EFBE                 mov     ebx, esi
.text:0040EFC0                 shr     ebx, 1Fh
.text:0040EFC3                 dec     ebx
.text:0040EFC4                 and     ebx, esi
.text:0040EFC6                 xor     esi, esi
.text:0040EFC8                 mov     [eax+3Ch], ebx
.text:0040EFCB                 mov     edx, [esp+38h]
.text:0040EFCF                 mov     dword ptr [esp+8], 989680h
.text:0040EFD7                 mov     ebx, [esp+34h]
.text:0040EFDB                 mov     dword ptr [esp+0Ch], 0
.text:0040EFE3                 mov     ecx, edx
.text:0040EFE5                 xor     edx, edx
.text:0040EFE7                 or      ebx, edx
.text:0040EFE9                 or      esi, ecx
.text:0040EFEB                 mov     edx, ebx
.text:0040EFED                 sub     edx, 0D53E8000h
.text:0040EFF3                 mov     ecx, esi
.text:0040EFF5                 sbb     ecx, 19DB1DEh
.text:0040EFFB                 mov     [esp+4], ecx
.text:0040EFFF                 mov     [esp], edx
.text:0040F002                 call    sub_4144A0
.text:0040F007                 mov     edx, eax
.text:0040F009                 mov     ecx, [esp+64h]
.text:0040F00D                 shr     eax, 1Fh
.text:0040F010                 dec     eax
.text:0040F011                 and     edx, eax
.text:0040F013                 mov     [ecx+48h], edx
.text:0040F016                 mov     [esp], ebx
.text:0040F019                 mov     [esp+4], esi
.text:0040F01D                 mov     dword ptr [esp+8], 989680h
.text:0040F025                 mov     dword ptr [esp+0Ch], 0
.text:0040F02D                 call    sub_414320
.text:0040F032                 lea     edx, [eax+eax*4]
.text:0040F035                 mov     ebx, [esp+64h]
.text:0040F039                 lea     ecx, [edx+edx*4]
.text:0040F03C                 shl     ecx, 2
.text:0040F03F                 mov     esi, ecx
.text:0040F041                 shr     esi, 1Fh
.text:0040F044                 dec     esi
.text:0040F045                 and     esi, ecx
.text:0040F047                 mov     [ebx+4Ch], esi
.text:0040F04A                 mov     edx, [esp+48h]
.text:0040F04E                 xor     esi, esi
.text:0040F050                 mov     dword ptr [esp+8], 989680h
.text:0040F058                 mov     ebx, [esp+44h]
.text:0040F05C                 mov     dword ptr [esp+0Ch], 0
.text:0040F064                 mov     ecx, edx
.text:0040F066                 xor     edx, edx
.text:0040F068                 or      ebx, edx
.text:0040F06A                 or      esi, ecx
.text:0040F06C                 mov     edx, ebx
.text:0040F06E                 sub     edx, 0D53E8000h
.text:0040F074                 mov     ecx, esi
.text:0040F076                 sbb     ecx, 19DB1DEh
.text:0040F07C                 mov     [esp+4], ecx
.text:0040F080                 mov     [esp], edx
.text:0040F083                 call    sub_4144A0
.text:0040F088                 mov     edx, eax
.text:0040F08A                 mov     ecx, [esp+64h]
.text:0040F08E                 shr     eax, 1Fh
.text:0040F091                 dec     eax
.text:0040F092                 and     edx, eax
.text:0040F094                 mov     [ecx+40h], edx
.text:0040F097                 mov     [esp+4], esi
.text:0040F09B                 mov     dword ptr [esp+8], 989680h
.text:0040F0A3                 mov     dword ptr [esp+0Ch], 0
.text:0040F0AB                 mov     [esp], ebx
.text:0040F0AE                 call    sub_414320
.text:0040F0B3                 lea     edx, [eax+eax*4]
.text:0040F0B6                 lea     esi, [edx+edx*4]
.text:0040F0B9                 mov     eax, [esp+64h]
.text:0040F0BD                 shl     esi, 2
.text:0040F0C0                 mov     edx, ebp
.text:0040F0C2                 mov     ecx, esi
.text:0040F0C4                 mov     dword ptr [eax+50h], 200h
.text:0040F0CB                 shr     ecx, 1Fh
.text:0040F0CE                 dec     ecx
.text:0040F0CF                 and     ecx, esi
.text:0040F0D1                 test    ebp, ebp
.text:0040F0D3                 mov     [eax+44h], ecx
.text:0040F0D6                 mov     eax, edi
.text:0040F0D8                 js      short loc_40F112
.text:0040F0DA
.text:0040F0DA loc_40F0DA:                             ; CODE XREF: .text:0040F11A↓j
.text:0040F0DA                 xor     esi, esi
.text:0040F0DC                 mov     ebp, edi
.text:0040F0DE                 mov     ecx, eax
.text:0040F0E0                 shrd    ecx, edx, 9
.text:0040F0E4                 mov     ebx, edx
.text:0040F0E6                 and     ebp, 1FFh
.text:0040F0EC                 mov     eax, esi
.text:0040F0EE                 sar     ebx, 9
.text:0040F0F1                 or      eax, ebp
.text:0040F0F3                 jz      short loc_40F0FB
.text:0040F0F5                 add     ecx, 1
.text:0040F0F8                 adc     ebx, 0
.text:0040F0FB
.text:0040F0FB loc_40F0FB:                             ; CODE XREF: .text:0040F0F3↑j
.text:0040F0FB                 mov     edx, [esp+64h]
.text:0040F0FF                 mov     eax, 1
.text:0040F104                 mov     [edx+58h], ecx
.text:0040F107                 mov     [edx+5Ch], ebx
.text:0040F10A                 add     esp, 1Ch
.text:0040F10D                 pop     ebx
.text:0040F10E                 pop     esi
.text:0040F10F                 pop     edi
.text:0040F110                 pop     ebp
.text:0040F111                 retn
.text:0040F112 ; ---------------------------------------------------------------------------
.text:0040F112
.text:0040F112 loc_40F112:                             ; CODE XREF: .text:0040F0D8↑j
.text:0040F112                 add     eax, 1FFh
.text:0040F117                 adc     edx, 0
.text:0040F11A                 jmp     short loc_40F0DA
.text:0040F11A ; ---------------------------------------------------------------------------
.text:0040F11C                 align 10h
.text:0040F120                 push    ebp
.text:0040F121                 push    edi
.text:0040F122                 xor     edi, edi
.text:0040F124                 push    esi
.text:0040F125                 xor     esi, esi
.text:0040F127                 push    ebx
.text:0040F128                 sub     esp, 0Ch
.text:0040F12B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040F132                 call    LoadLibraryA
.text:0040F137                 sub     esp, 4
.text:0040F13A                 mov     ebp, eax
.text:0040F13C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040F144                 mov     [esp], eax
.text:0040F147                 call    GetProcAddress
.text:0040F14C                 sub     esp, 8
.text:0040F14F                 test    eax, eax
.text:0040F151                 jz      short loc_40F182
.text:0040F153                 lea     ecx, [esp+8]
.text:0040F157                 mov     [esp+4], ecx
.text:0040F15B                 mov     ecx, [esp+20h]
.text:0040F15F                 mov     [esp], ecx
.text:0040F162                 call    eax
.text:0040F164                 sub     esp, 8
.text:0040F167                 mov     ebx, eax
.text:0040F169                 cmp     eax, 0FFFFFFFFh
.text:0040F16C                 jz      short loc_40F19D
.text:0040F16E
.text:0040F16E loc_40F16E:                             ; CODE XREF: .text:0040F1A6↓j
.text:0040F16E                 mov     esi, [esp+8]
.text:0040F172                 mov     ecx, ebx
.text:0040F174                 xor     edi, edi
.text:0040F176                 xor     ebx, ebx
.text:0040F178                 mov     edx, esi
.text:0040F17A                 mov     esi, ecx
.text:0040F17C                 or      esi, edi
.text:0040F17E                 mov     edi, ebx
.text:0040F180                 or      edi, edx
.text:0040F182
.text:0040F182 loc_40F182:                             ; CODE XREF: .text:0040F151↑j
.text:0040F182                                         ; .text:0040F1A4↓j
.text:0040F182                 test    ebp, ebp
.text:0040F184                 jz      short loc_40F191
.text:0040F186                 mov     [esp], ebp
.text:0040F189                 call    FreeLibrary
.text:0040F18E                 sub     esp, 4
.text:0040F191
.text:0040F191 loc_40F191:                             ; CODE XREF: .text:0040F184↑j
.text:0040F191                 add     esp, 0Ch
.text:0040F194                 mov     eax, esi
.text:0040F196                 mov     edx, edi
.text:0040F198                 pop     ebx
.text:0040F199                 pop     esi
.text:0040F19A                 pop     edi
.text:0040F19B                 pop     ebp
.text:0040F19C                 retn
.text:0040F19D ; ---------------------------------------------------------------------------
.text:0040F19D
.text:0040F19D loc_40F19D:                             ; CODE XREF: .text:0040F16C↑j
.text:0040F19D                 call    GetLastError
.text:0040F1A2                 test    eax, eax
.text:0040F1A4                 jnz     short loc_40F182
.text:0040F1A6                 jmp     short loc_40F16E
.text:0040F1A6 ; ---------------------------------------------------------------------------
.text:0040F1A8                 align 10h
.text:0040F1B0
.text:0040F1B0 ; =============== S U B R O U T I N E =======================================
.text:0040F1B0
.text:0040F1B0
.text:0040F1B0 ; int __cdecl sub_40F1B0(LPCSTR lpFileName, int)
.text:0040F1B0 sub_40F1B0      proc near               ; CODE XREF: sub_40D980+1D71↓p
.text:0040F1B0
.text:0040F1B0 lpRootPathName  = dword ptr -8FCh
.text:0040F1B0 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040F1B0 nVolumeNameSize = dword ptr -8F4h
.text:0040F1B0 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040F1B0 lpMaximumComponentLength= dword ptr -8ECh
.text:0040F1B0 lpFileSystemFlags= dword ptr -8E8h
.text:0040F1B0 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040F1B0 nFileSystemNameSize= dword ptr -8E0h
.text:0040F1B0 VolumeSerialNumber= dword ptr -8D8h
.text:0040F1B0 MaximumComponentLength= dword ptr -8D4h
.text:0040F1B0 FileSystemFlags = dword ptr -8D0h
.text:0040F1B0 var_8CC         = dword ptr -8CCh
.text:0040F1B0 var_8C8         = dword ptr -8C8h
.text:0040F1B0 var_8C4         = dword ptr -8C4h
.text:0040F1B0 var_8C0         = dword ptr -8C0h
.text:0040F1B0 var_8BC         = dword ptr -8BCh
.text:0040F1B0 var_8B8         = dword ptr -8B8h
.text:0040F1B0 var_8B4         = dword ptr -8B4h
.text:0040F1B0 var_8B0         = dword ptr -8B0h
.text:0040F1B0 var_8AC         = dword ptr -8ACh
.text:0040F1B0 var_8A8         = dword ptr -8A8h
.text:0040F1B0 var_8A4         = dword ptr -8A4h
.text:0040F1B0 var_8A0         = dword ptr -8A0h
.text:0040F1B0 var_89C         = dword ptr -89Ch
.text:0040F1B0 FileSystemNameBuffer= byte ptr -88Ch
.text:0040F1B0 VolumeNameBuffer= byte ptr -48Ch
.text:0040F1B0 var_8C          = dword ptr -8Ch
.text:0040F1B0 var_88          = dword ptr -88h
.text:0040F1B0 var_84          = dword ptr -84h
.text:0040F1B0 var_80          = dword ptr -80h
.text:0040F1B0 var_7C          = dword ptr -7Ch
.text:0040F1B0 var_78          = dword ptr -78h
.text:0040F1B0 var_74          = dword ptr -74h
.text:0040F1B0 var_70          = dword ptr -70h
.text:0040F1B0 var_6C          = dword ptr -6Ch
.text:0040F1B0 var_5C          = dword ptr -5Ch
.text:0040F1B0 var_58          = dword ptr -58h
.text:0040F1B0 var_54          = dword ptr -54h
.text:0040F1B0 var_50          = dword ptr -50h
.text:0040F1B0 var_4C          = dword ptr -4Ch
.text:0040F1B0 var_48          = dword ptr -48h
.text:0040F1B0 var_44          = dword ptr -44h
.text:0040F1B0 var_3C          = dword ptr -3Ch
.text:0040F1B0 var_38          = dword ptr -38h
.text:0040F1B0 var_34          = dword ptr -34h
.text:0040F1B0 lpFileName      = dword ptr  4
.text:0040F1B0 arg_4           = dword ptr  8
.text:0040F1B0
.text:0040F1B0                 push    ebp
.text:0040F1B1                 xor     eax, eax
.text:0040F1B3                 mov     ecx, 0Dh
.text:0040F1B8                 push    edi
.text:0040F1B9                 push    esi
.text:0040F1BA                 push    ebx
.text:0040F1BB                 sub     esp, 8ECh
.text:0040F1C1                 lea     edi, [esp+8FCh+var_5C]
.text:0040F1C8                 cld
.text:0040F1C9                 lea     edx, [esp+8FCh+var_8C]
.text:0040F1D0                 rep stosd
.text:0040F1D2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040F1D6                 lea     esi, [esp+8FCh+var_5C]
.text:0040F1DD                 mov     edx, [esp+8FCh+lpFileName]
.text:0040F1E4                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:0040F1E7                 call    sub_40DC10
.text:0040F1EC                 test    eax, eax
.text:0040F1EE                 mov     edx, 0FFFFFFFFh
.text:0040F1F3                 jz      loc_40F584
.text:0040F1F9                 mov     edx, [esp+8FCh+var_88]
.text:0040F200                 mov     ebp, [esp+8FCh+var_84]
.text:0040F207                 mov     edi, [esp+8FCh+var_80]
.text:0040F20E                 mov     [esp+8FCh+var_58], edx
.text:0040F215                 mov     ecx, [esp+8FCh+var_7C]
.text:0040F21C                 mov     ebx, [esp+8FCh+var_8C]
.text:0040F223                 mov     [esp+8FCh+var_54], ebp
.text:0040F22A                 mov     edx, [esp+8FCh+var_78]
.text:0040F231                 mov     ebp, [esp+8FCh+var_74]
.text:0040F238                 mov     [esp+8FCh+var_50], edi
.text:0040F23F                 test    bl, 10h
.text:0040F242                 mov     edi, [esp+8FCh+var_70]
.text:0040F249                 mov     [esp+8FCh+var_4C], ecx
.text:0040F250                 mov     ecx, [esp+8FCh+var_6C]
.text:0040F257                 mov     [esp+8FCh+var_5C], ebx
.text:0040F25E                 mov     [esp+8FCh+var_48], edx
.text:0040F265                 mov     [esp+8FCh+var_44], ebp
.text:0040F26C                 mov     [esp+8FCh+var_3C], edi
.text:0040F273                 mov     [esp+8FCh+var_38], ecx
.text:0040F27A                 jnz     loc_40F5A0
.text:0040F280                 mov     ebx, 1
.text:0040F285                 mov     [esp+8FCh+var_34], ebx
.text:0040F28C
.text:0040F28C loc_40F28C:                             ; CODE XREF: sub_40F1B0+406↓j
.text:0040F28C                 mov     eax, [esp+8FCh+lpFileName]
.text:0040F293                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040F297                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040F29B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040F29E                 call    sub_40FB30
.text:0040F2A3                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040F2A6                 call    sub_410C40
.text:0040F2AB                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040F2AF                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040F2B3                 mov     ebp, eax
.text:0040F2B5                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040F2B9                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040F2BD                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040F2C4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040F2C8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040F2CC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040F2D0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040F2D8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040F2E0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040F2E3                 call    GetVolumeInformationA
.text:0040F2E8                 sub     esp, 20h
.text:0040F2EB                 test    eax, eax
.text:0040F2ED                 lea     edi, [esp+8FCh+var_8CC]
.text:0040F2F1                 setz    bl
.text:0040F2F4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040F2F7                 xor     ebp, ebp
.text:0040F2F9                 movzx   edx, bl
.text:0040F2FC                 dec     edx
.text:0040F2FD                 xor     ebx, ebx
.text:0040F2FF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040F303                 call    free
.text:0040F308                 cld
.text:0040F309                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040F30D                 mov     [esi+1Ch], ecx
.text:0040F310                 mov     ecx, 0Dh
.text:0040F315                 rep movsd
.text:0040F317                 mov     edi, [esp+8FCh+var_8A0]
.text:0040F31B                 mov     edx, [esp+8FCh+var_89C]
.text:0040F31F                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040F323                 or      ebp, edi
.text:0040F325                 mov     esi, [esp+8FCh+var_8B0]
.text:0040F329                 mov     edi, [esp+8FCh+arg_4]
.text:0040F330                 or      edx, ebx
.text:0040F332                 mov     [edi+8], edx
.text:0040F335                 xor     edx, edx
.text:0040F337                 test    cl, 10h
.text:0040F33A                 setz    dl
.text:0040F33D                 mov     [edi+0Ch], ebp
.text:0040F340                 mov     [edi+10h], esi
.text:0040F343                 mov     dword ptr [edi+14h], 0
.text:0040F34A                 dec     edx
.text:0040F34B                 and     edx, 0FFFFC000h
.text:0040F351                 add     edx, 8000h
.text:0040F357                 or      edx, 124h
.text:0040F35D                 test    cl, 1
.text:0040F360                 movzx   eax, dx
.text:0040F363                 jnz     short loc_40F36A
.text:0040F365                 or      eax, 92h
.text:0040F36A
.text:0040F36A loc_40F36A:                             ; CODE XREF: sub_40F1B0+1B3↑j
.text:0040F36A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040F36E                 xor     edx, edx
.text:0040F370                 xor     ebp, ebp
.text:0040F372                 mov     edi, [esp+8FCh+var_8AC]
.text:0040F376                 mov     ecx, [esp+8FCh+arg_4]
.text:0040F37D                 mov     esi, edi
.text:0040F37F                 or      [ecx], eax
.text:0040F381                 mov     edi, ebx
.text:0040F383                 or      edi, ebp
.text:0040F385                 mov     ebp, edx
.text:0040F387                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040F38B                 or      ebp, esi
.text:0040F38D                 mov     esi, [esp+8FCh+arg_4]
.text:0040F394                 mov     edx, [esp+8FCh+var_8BC]
.text:0040F398                 mov     [esi+18h], ebx
.text:0040F39B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040F39F                 mov     ecx, edx
.text:0040F3A1                 mov     [esi+30h], edi
.text:0040F3A4                 xor     edx, edx
.text:0040F3A6                 mov     [esi+34h], ebp
.text:0040F3A9                 or      ebx, edx
.text:0040F3AB                 xor     esi, esi
.text:0040F3AD                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040F3B5                 or      esi, ecx
.text:0040F3B7                 mov     edx, ebx
.text:0040F3B9                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040F3C1                 sub     edx, 0D53E8000h
.text:0040F3C7                 mov     ecx, esi
.text:0040F3C9                 sbb     ecx, 19DB1DEh
.text:0040F3CF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040F3D3                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040F3D6                 call    sub_4144A0
.text:0040F3DB                 mov     edx, eax
.text:0040F3DD                 mov     ecx, [esp+8FCh+arg_4]
.text:0040F3E4                 shr     eax, 1Fh
.text:0040F3E7                 dec     eax
.text:0040F3E8                 and     edx, eax
.text:0040F3EA                 mov     [ecx+38h], edx
.text:0040F3ED                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040F3F0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040F3F4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040F3FC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040F404                 call    sub_414320
.text:0040F409                 lea     ecx, [eax+eax*4]
.text:0040F40C                 lea     ebx, [ecx+ecx*4]
.text:0040F40F                 mov     eax, [esp+8FCh+arg_4]
.text:0040F416                 shl     ebx, 2
.text:0040F419                 mov     esi, ebx
.text:0040F41B                 shr     esi, 1Fh
.text:0040F41E                 dec     esi
.text:0040F41F                 and     esi, ebx
.text:0040F421                 mov     [eax+3Ch], esi
.text:0040F424                 mov     edx, [esp+8FCh+var_8C4]
.text:0040F428                 xor     esi, esi
.text:0040F42A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040F432                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040F436                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040F43E                 mov     ecx, edx
.text:0040F440                 xor     edx, edx
.text:0040F442                 or      ebx, edx
.text:0040F444                 or      esi, ecx
.text:0040F446                 mov     edx, ebx
.text:0040F448                 sub     edx, 0D53E8000h
.text:0040F44E                 mov     ecx, esi
.text:0040F450                 sbb     ecx, 19DB1DEh
.text:0040F456                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040F45A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040F45D                 call    sub_4144A0
.text:0040F462                 mov     edx, eax
.text:0040F464                 mov     ecx, [esp+8FCh+arg_4]
.text:0040F46B                 shr     eax, 1Fh
.text:0040F46E                 dec     eax
.text:0040F46F                 and     edx, eax
.text:0040F471                 mov     [ecx+48h], edx
.text:0040F474                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040F477                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040F47B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040F483                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040F48B                 call    sub_414320
.text:0040F490                 lea     ecx, [eax+eax*4]
.text:0040F493                 lea     ebx, [ecx+ecx*4]
.text:0040F496                 mov     eax, [esp+8FCh+arg_4]
.text:0040F49D                 shl     ebx, 2
.text:0040F4A0                 mov     esi, ebx
.text:0040F4A2                 shr     esi, 1Fh
.text:0040F4A5                 dec     esi
.text:0040F4A6                 and     esi, ebx
.text:0040F4A8                 mov     [eax+4Ch], esi
.text:0040F4AB                 mov     edx, [esp+8FCh+var_8B4]
.text:0040F4AF                 xor     esi, esi
.text:0040F4B1                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040F4B9                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040F4BD                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040F4C5                 mov     ecx, edx
.text:0040F4C7                 xor     edx, edx
.text:0040F4C9                 or      ebx, edx
.text:0040F4CB                 or      esi, ecx
.text:0040F4CD                 mov     edx, ebx
.text:0040F4CF                 sub     edx, 0D53E8000h
.text:0040F4D5                 mov     ecx, esi
.text:0040F4D7                 sbb     ecx, 19DB1DEh
.text:0040F4DD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040F4E1                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040F4E4                 call    sub_4144A0
.text:0040F4E9                 mov     edx, eax
.text:0040F4EB                 mov     ecx, [esp+8FCh+arg_4]
.text:0040F4F2                 shr     eax, 1Fh
.text:0040F4F5                 dec     eax
.text:0040F4F6                 and     edx, eax
.text:0040F4F8                 mov     [ecx+40h], edx
.text:0040F4FB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040F4FE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040F502                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040F50A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040F512                 call    sub_414320
.text:0040F517                 lea     ebx, [eax+eax*4]
.text:0040F51A                 mov     esi, [esp+8FCh+arg_4]
.text:0040F521                 lea     edx, [ebx+ebx*4]
.text:0040F524                 shl     edx, 2
.text:0040F527                 mov     eax, edi
.text:0040F529                 mov     ecx, edx
.text:0040F52B                 mov     dword ptr [esi+50h], 200h
.text:0040F532                 shr     ecx, 1Fh
.text:0040F535                 dec     ecx
.text:0040F536                 and     ecx, edx
.text:0040F538                 test    ebp, ebp
.text:0040F53A                 mov     edx, ebp
.text:0040F53C                 mov     [esi+44h], ecx
.text:0040F53F                 js      short loc_40F591
.text:0040F541
.text:0040F541 loc_40F541:                             ; CODE XREF: sub_40F1B0+3E9↓j
.text:0040F541                 xor     esi, esi
.text:0040F543                 mov     ebp, edi
.text:0040F545                 mov     ecx, eax
.text:0040F547                 shrd    ecx, edx, 9
.text:0040F54B                 mov     ebx, edx
.text:0040F54D                 and     ebp, 1FFh
.text:0040F553                 mov     eax, esi
.text:0040F555                 sar     ebx, 9
.text:0040F558                 or      eax, ebp
.text:0040F55A                 jz      short loc_40F562
.text:0040F55C                 add     ecx, 1
.text:0040F55F                 adc     ebx, 0
.text:0040F562
.text:0040F562 loc_40F562:                             ; CODE XREF: sub_40F1B0+3AA↑j
.text:0040F562                 mov     edx, [esp+8FCh+arg_4]
.text:0040F569                 mov     [edx+5Ch], ebx
.text:0040F56C                 mov     ebx, [esp+8FCh+lpFileName]
.text:0040F573                 mov     [edx+58h], ecx
.text:0040F576                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040F57A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040F57D                 call    sub_40E3D0
.text:0040F582                 xor     edx, edx
.text:0040F584
.text:0040F584 loc_40F584:                             ; CODE XREF: sub_40F1B0+43↑j
.text:0040F584                 add     esp, 8ECh
.text:0040F58A                 mov     eax, edx
.text:0040F58C                 pop     ebx
.text:0040F58D                 pop     esi
.text:0040F58E                 pop     edi
.text:0040F58F                 pop     ebp
.text:0040F590                 retn
.text:0040F591 ; ---------------------------------------------------------------------------
.text:0040F591
.text:0040F591 loc_40F591:                             ; CODE XREF: sub_40F1B0+38F↑j
.text:0040F591                 add     eax, 1FFh
.text:0040F596                 adc     edx, 0
.text:0040F599                 jmp     short loc_40F541
.text:0040F599 ; ---------------------------------------------------------------------------
.text:0040F59B                 align 10h
.text:0040F5A0
.text:0040F5A0 loc_40F5A0:                             ; CODE XREF: sub_40F1B0+CA↑j
.text:0040F5A0                 mov     eax, [esp+8FCh+lpFileName]
.text:0040F5A7                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040F5AA                 call    sub_40DD80
.text:0040F5AF                 mov     [esp+8FCh+var_34], eax
.text:0040F5B6                 jmp     loc_40F28C
.text:0040F5B6 sub_40F1B0      endp
.text:0040F5B6
.text:0040F5B6 ; ---------------------------------------------------------------------------
.text:0040F5BB                 align 10h
.text:0040F5C0 ; START OF FUNCTION CHUNK FOR sub_40D980
.text:0040F5C0
.text:0040F5C0 loc_40F5C0:                             ; CODE XREF: sub_40D980+26↑j
.text:0040F5C0                 cld
.text:0040F5C1                 sub     esp, 2Ch
.text:0040F5C4                 xor     eax, eax
.text:0040F5C6                 mov     [esp+2Ch+var_10], ebx
.text:0040F5CA                 mov     ecx, 18h
.text:0040F5CF                 mov     ebx, [esp+2Ch+arg_0]
.text:0040F5D3                 mov     [esp+2Ch+var_C], esi
.text:0040F5D7                 mov     esi, [esp+2Ch+arg_4]
.text:0040F5DB                 test    ebx, ebx
.text:0040F5DD                 mov     [esp+2Ch+var_8], edi
.text:0040F5E1                 mov     edi, esi
.text:0040F5E3                 mov     [esp+2Ch+var_4], ebp
.text:0040F5E7                 rep stosd
.text:0040F5E9                 jz      short loc_40F5F0
.text:0040F5EB                 cmp     byte ptr [ebx], 0
.text:0040F5EE                 jnz     short loc_40F608
.text:0040F5F0
.text:0040F5F0 loc_40F5F0:                             ; CODE XREF: sub_40D980+1C69↑j
.text:0040F5F0                 xor     edx, edx
.text:0040F5F2
.text:0040F5F2 loc_40F5F2:                             ; CODE XREF: sub_40D980+1C9F↓j
.text:0040F5F2                                         ; sub_40D980+1D48↓j
.text:0040F5F2                 mov     ebx, [esp+2Ch+var_10]
.text:0040F5F6                 mov     eax, edx
.text:0040F5F8                 mov     esi, [esp+2Ch+var_C]
.text:0040F5FC                 mov     edi, [esp+2Ch+var_8]
.text:0040F600                 mov     ebp, [esp+2Ch+var_4]
.text:0040F604                 add     esp, 2Ch
.text:0040F607                 retn
.text:0040F608 ; ---------------------------------------------------------------------------
.text:0040F608
.text:0040F608 loc_40F608:                             ; CODE XREF: sub_40D980+1C6E↑j
.text:0040F608                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040F610                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040F613                 call    sub_40CB40
.text:0040F618                 test    eax, eax
.text:0040F61A                 mov     edx, 0FFFFFFFFh
.text:0040F61F                 jnz     short loc_40F5F2
.text:0040F621                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040F624                 call    sub_40F9D0
.text:0040F629                 mov     [esp+2Ch+lpFileName], eax
.text:0040F62C                 call    sub_410C40
.text:0040F631                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040F634                 mov     ebp, eax
.text:0040F636                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040F63E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040F646                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040F64E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040F656                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040F65E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040F666                 call    CreateFileA
.text:0040F66B                 sub     esp, 1Ch
.text:0040F66E                 mov     ebx, eax
.text:0040F670                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040F674                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:0040F677                 call    sub_40DF00
.text:0040F67C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040F67F                 mov     edi, eax
.text:0040F681                 call    CloseHandle
.text:0040F686                 sub     esp, 4
.text:0040F689                 cmp     edi, 0FFFFFFFFh
.text:0040F68C                 jz      short loc_40F6EA
.text:0040F68E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040F692                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040F695                 call    sub_40E3D0
.text:0040F69A
.text:0040F69A loc_40F69A:                             ; CODE XREF: sub_40D980+1D78↓j
.text:0040F69A                 mov     edx, [esi]
.text:0040F69C                 and     edx, 0F000h
.text:0040F6A2                 cmp     edx, 4000h
.text:0040F6A8                 jz      short loc_40F6DD
.text:0040F6AA
.text:0040F6AA loc_40F6AA:                             ; CODE XREF: sub_40D980+1D68↓j
.text:0040F6AA                 cmp     edi, 0FFFFFFFFh
.text:0040F6AD                 jz      short loc_40F6CD
.text:0040F6AF
.text:0040F6AF loc_40F6AF:                             ; CODE XREF: sub_40D980+1D5B↓j
.text:0040F6AF                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040F6B6                 call    SetErrorMode
.text:0040F6BB                 sub     esp, 4
.text:0040F6BE                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040F6C1                 call    free
.text:0040F6C6                 mov     edx, edi
.text:0040F6C8                 jmp     loc_40F5F2
.text:0040F6CD ; ---------------------------------------------------------------------------
.text:0040F6CD
.text:0040F6CD loc_40F6CD:                             ; CODE XREF: sub_40D980+1D2D↑j
.text:0040F6CD                 call    sub_40CB20
.text:0040F6D2                 mov     esi, eax
.text:0040F6D4                 call    _errno
.text:0040F6D9                 mov     [eax], esi
.text:0040F6DB                 jmp     short loc_40F6AF
.text:0040F6DD ; ---------------------------------------------------------------------------
.text:0040F6DD
.text:0040F6DD loc_40F6DD:                             ; CODE XREF: sub_40D980+1D28↑j
.text:0040F6DD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:0040F6E0                 call    sub_40DD80
.text:0040F6E5                 mov     [esi+18h], eax
.text:0040F6E8                 jmp     short loc_40F6AA
.text:0040F6EA ; ---------------------------------------------------------------------------
.text:0040F6EA
.text:0040F6EA loc_40F6EA:                             ; CODE XREF: sub_40D980+1D0C↑j
.text:0040F6EA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040F6EE                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:0040F6F1                 call    sub_40F1B0
.text:0040F6F6                 mov     edi, eax
.text:0040F6F8                 jmp     short loc_40F69A
.text:0040F6F8 ; END OF FUNCTION CHUNK FOR sub_40D980
.text:0040F6F8 ; ---------------------------------------------------------------------------
.text:0040F6FA                 align 10h
.text:0040F700
.text:0040F700 ; =============== S U B R O U T I N E =======================================
.text:0040F700
.text:0040F700
.text:0040F700 ; int __cdecl sub_40F700(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040F700 sub_40F700      proc near               ; CODE XREF: sub_40F880+93↓p
.text:0040F700
.text:0040F700 pvReserved      = dword ptr -35Ch
.text:0040F700 pUnkOuter       = dword ptr -358h
.text:0040F700 dwClsContext    = dword ptr -354h
.text:0040F700 riid            = dword ptr -350h
.text:0040F700 ppv             = dword ptr -34Ch
.text:0040F700 cchWideChar     = dword ptr -348h
.text:0040F700 var_334         = byte ptr -334h
.text:0040F700 var_330         = dword ptr -330h
.text:0040F700 String2         = byte ptr -32Ch
.text:0040F700 WideCharStr     = word ptr -21Ch
.text:0040F700 lpMultiByteStr  = dword ptr  4
.text:0040F700 lpString1       = dword ptr  8
.text:0040F700
.text:0040F700                 push    edi
.text:0040F701                 push    esi
.text:0040F702                 push    ebx
.text:0040F703                 sub     esp, 350h
.text:0040F709                 mov     edi, [esp+35Ch+lpString1]
.text:0040F710                 mov     byte ptr [edi], 0
.text:0040F713                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040F71A                 call    OleInitialize
.text:0040F71F                 sub     esp, 4
.text:0040F722                 cmp     eax, 1
.text:0040F725                 ja      loc_40F85F
.text:0040F72B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040F733                 lea     ecx, [esp+35Ch+var_330]
.text:0040F737                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040F73B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040F743                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040F74B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040F752                 call    CoCreateInstance
.text:0040F757                 sub     esp, 14h
.text:0040F75A                 test    eax, eax
.text:0040F75C                 js      loc_40F85F
.text:0040F762                 mov     ebx, [esp+35Ch+var_330]
.text:0040F766                 lea     edx, [esp+35Ch+var_334]
.text:0040F76A                 mov     esi, [ebx]
.text:0040F76C                 mov     [esp+35Ch+dwClsContext], edx
.text:0040F770                 mov     [esp+35Ch+pvReserved], ebx
.text:0040F773                 xor     ebx, ebx
.text:0040F775                 mov     [esp+35Ch+pUnkOuter], offset dword_4138F0
.text:0040F77D                 call    dword ptr [esi]
.text:0040F77F                 sub     esp, 0Ch
.text:0040F782                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040F789                 call    AreFileApisANSI
.text:0040F78E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040F796                 test    eax, eax
.text:0040F798                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040F79F                 setz    bl
.text:0040F7A2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040F7A6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040F7AE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040F7B2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040F7BA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040F7BD                 call    MultiByteToWideChar
.text:0040F7C2                 sub     esp, 18h
.text:0040F7C5                 test    eax, eax
.text:0040F7C7                 js      loc_40F85F
.text:0040F7CD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040F7D1                 mov     ebx, [edx]
.text:0040F7D3                 mov     [esp+35Ch+dwClsContext], 0
.text:0040F7DB                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040F7DF                 mov     [esp+35Ch+pvReserved], edx
.text:0040F7E2                 call    dword ptr [ebx+14h]
.text:0040F7E5                 sub     esp, 0Ch
.text:0040F7E8                 test    eax, eax
.text:0040F7EA                 js      short loc_40F85F
.text:0040F7EC                 mov     ebx, [esp+35Ch+var_330]
.text:0040F7F0                 lea     esi, [esp+35Ch+String2]
.text:0040F7F4                 mov     ecx, [ebx]
.text:0040F7F6                 mov     [esp+35Ch+pvReserved], ebx
.text:0040F7F9                 mov     [esp+35Ch+ppv], 0
.text:0040F801                 mov     [esp+35Ch+riid], 0
.text:0040F809                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040F811                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040F815                 call    dword ptr [ecx+0Ch]
.text:0040F818                 sub     esp, 14h
.text:0040F81B                 mov     ebx, eax
.text:0040F81D                 test    eax, eax
.text:0040F81F                 js      short loc_40F85F
.text:0040F821                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040F825                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040F828                 call    lstrcpyA
.text:0040F82D                 sub     esp, 8
.text:0040F830                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040F834                 mov     ecx, [edi]
.text:0040F836                 mov     [esp+35Ch+pvReserved], edi
.text:0040F839                 call    dword ptr [ecx+8]
.text:0040F83C                 sub     esp, 4
.text:0040F83F                 mov     edx, [esp+35Ch+var_330]
.text:0040F843                 mov     esi, [edx]
.text:0040F845                 mov     [esp+35Ch+pvReserved], edx
.text:0040F848                 call    dword ptr [esi+8]
.text:0040F84B                 sub     esp, 4
.text:0040F84E                 call    CoUninitialize
.text:0040F853                 mov     eax, ebx
.text:0040F855
.text:0040F855 loc_40F855:                             ; CODE XREF: sub_40F700+177↓j
.text:0040F855                 add     esp, 350h
.text:0040F85B                 pop     ebx
.text:0040F85C                 pop     esi
.text:0040F85D                 pop     edi
.text:0040F85E                 retn
.text:0040F85F ; ---------------------------------------------------------------------------
.text:0040F85F
.text:0040F85F loc_40F85F:                             ; CODE XREF: sub_40F700+25↑j
.text:0040F85F                                         ; sub_40F700+5C↑j ...
.text:0040F85F                 call    sub_40CB20
.text:0040F864                 mov     edi, eax
.text:0040F866                 call    _errno
.text:0040F86B                 mov     [eax], edi
.text:0040F86D                 call    CoUninitialize
.text:0040F872                 mov     eax, 0FFFFFFFFh
.text:0040F877                 jmp     short loc_40F855
.text:0040F877 sub_40F700      endp
.text:0040F877
.text:0040F877 ; ---------------------------------------------------------------------------
.text:0040F879 ; const char aLnk_0[]
.text:0040F879 aLnk_0          db '.lnk',0             ; DATA XREF: sub_40F880+53↓o
.text:0040F879                                         ; sub_40F880:loc_40F8E5↓o
.text:0040F87E                 align 10h
.text:0040F880
.text:0040F880 ; =============== S U B R O U T I N E =======================================
.text:0040F880
.text:0040F880
.text:0040F880 ; int __cdecl sub_40F880(char *, LPSTR lpString1)
.text:0040F880 sub_40F880      proc near               ; CODE XREF: sub_40D9D0+96↑p
.text:0040F880
.text:0040F880 Str             = dword ptr -1Ch
.text:0040F880 Source          = dword ptr -18h
.text:0040F880 Destination     = dword ptr -14h
.text:0040F880 arg_0           = dword ptr  4
.text:0040F880 lpString1       = dword ptr  8
.text:0040F880
.text:0040F880                 push    ebp
.text:0040F881                 push    edi
.text:0040F882                 push    esi
.text:0040F883                 push    ebx
.text:0040F884                 sub     esp, 0Ch
.text:0040F887                 mov     ebx, [esp+1Ch+arg_0]
.text:0040F88B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040F88F                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040F892                 call    strlen
.text:0040F897                 add     eax, 5
.text:0040F89A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040F89D                 call    malloc
.text:0040F8A2                 mov     [esp+1Ch+Destination], eax
.text:0040F8A6                 test    eax, eax
.text:0040F8A8                 jz      loc_40F950
.text:0040F8AE                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040F8B2                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040F8B5                 call    strcpy
.text:0040F8BA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040F8C2                 mov     eax, [esp+1Ch+Destination]
.text:0040F8C6                 mov     [esp+1Ch+Str], eax ; Str
.text:0040F8C9                 call    strrchr
.text:0040F8CE                 test    eax, eax
.text:0040F8D0                 jz      short loc_40F8E5
.text:0040F8D2                 cld
.text:0040F8D3                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:0040F8D8                 mov     ecx, 5
.text:0040F8DD                 mov     esi, eax
.text:0040F8DF                 mov     edi, ebx
.text:0040F8E1                 repe cmpsb
.text:0040F8E3                 jz      short loc_40F8F9
.text:0040F8E5
.text:0040F8E5 loc_40F8E5:                             ; CODE XREF: sub_40F880+50↑j
.text:0040F8E5                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0040F8ED                 mov     edx, [esp+1Ch+Destination]
.text:0040F8F1                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040F8F4                 call    strcat
.text:0040F8F9
.text:0040F8F9 loc_40F8F9:                             ; CODE XREF: sub_40F880+63↑j
.text:0040F8F9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040F900                 call    SetErrorMode
.text:0040F905                 sub     esp, 4
.text:0040F908                 mov     ebx, [esp+1Ch+Destination]
.text:0040F90C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040F910                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040F913                 call    sub_40F700
.text:0040F918                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040F91B                 mov     esi, eax
.text:0040F91D                 call    free
.text:0040F922                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040F929                 call    SetErrorMode
.text:0040F92E                 sub     esp, 4
.text:0040F931                 mov     [esp+1Ch+Str], ebp
.text:0040F934                 call    sub_410BC0
.text:0040F939                 inc     esi
.text:0040F93A                 jz      short loc_40F950
.text:0040F93C                 mov     [esp+1Ch+arg_0], ebp
.text:0040F940                 add     esp, 0Ch
.text:0040F943                 pop     ebx
.text:0040F944                 pop     esi
.text:0040F945                 pop     edi
.text:0040F946                 pop     ebp
.text:0040F947                 jmp     strlen
.text:0040F947 ; ---------------------------------------------------------------------------
.text:0040F94C                 align 10h
.text:0040F950
.text:0040F950 loc_40F950:                             ; CODE XREF: sub_40F880+28↑j
.text:0040F950                                         ; sub_40F880+BA↑j
.text:0040F950                 add     esp, 0Ch
.text:0040F953                 mov     eax, 0FFFFFFFFh
.text:0040F958                 pop     ebx
.text:0040F959                 pop     esi
.text:0040F95A                 pop     edi
.text:0040F95B                 pop     ebp
.text:0040F95C                 retn
.text:0040F95C sub_40F880      endp
.text:0040F95C
.text:0040F95C ; ---------------------------------------------------------------------------
.text:0040F95D                 align 10h
.text:0040F960
.text:0040F960 ; =============== S U B R O U T I N E =======================================
.text:0040F960
.text:0040F960
.text:0040F960 sub_40F960      proc near               ; CODE XREF: .text:0040DBBB↑p
.text:0040F960                 xor     eax, eax
.text:0040F962                 retn
.text:0040F962 sub_40F960      endp
.text:0040F962
.text:0040F962 ; ---------------------------------------------------------------------------
.text:0040F963                 align 10h
.text:0040F970
.text:0040F970 ; =============== S U B R O U T I N E =======================================
.text:0040F970
.text:0040F970
.text:0040F970 sub_40F970      proc near               ; CODE XREF: .text:loc_40DBB4↑p
.text:0040F970                 xor     eax, eax
.text:0040F972                 retn
.text:0040F972 sub_40F970      endp
.text:0040F972
.text:0040F972 ; ---------------------------------------------------------------------------
.text:0040F973                 align 10h
.text:0040F980
.text:0040F980 ; =============== S U B R O U T I N E =======================================
.text:0040F980
.text:0040F980
.text:0040F980 sub_40F980      proc near               ; CODE XREF: .text:0040DB94↑p
.text:0040F980                 xor     eax, eax
.text:0040F982                 retn
.text:0040F982 sub_40F980      endp
.text:0040F982
.text:0040F982 ; ---------------------------------------------------------------------------
.text:0040F983                 align 10h
.text:0040F990
.text:0040F990 ; =============== S U B R O U T I N E =======================================
.text:0040F990
.text:0040F990
.text:0040F990 sub_40F990      proc near               ; CODE XREF: .text:0040DB8D↑p
.text:0040F990                 xor     eax, eax
.text:0040F992                 retn
.text:0040F992 sub_40F990      endp
.text:0040F992
.text:0040F992 ; ---------------------------------------------------------------------------
.text:0040F993                 align 10h
.text:0040F9A0
.text:0040F9A0 ; =============== S U B R O U T I N E =======================================
.text:0040F9A0
.text:0040F9A0
.text:0040F9A0 sub_40F9A0      proc near               ; CODE XREF: .text:00410CD3↓p
.text:0040F9A0                                         ; .text:00410D23↓p
.text:0040F9A0
.text:0040F9A0 arg_4           = dword ptr  8
.text:0040F9A0
.text:0040F9A0                 sub     esp, 0Ch
.text:0040F9A3                 mov     edx, [esp+0Ch+arg_4]
.text:0040F9A7                 test    edx, edx
.text:0040F9A9                 jz      short loc_40F9B0
.text:0040F9AB                 add     esp, 0Ch
.text:0040F9AE                 jmp     short sub_40F9F0
.text:0040F9B0 ; ---------------------------------------------------------------------------
.text:0040F9B0
.text:0040F9B0 loc_40F9B0:                             ; CODE XREF: sub_40F9A0+9↑j
.text:0040F9B0                 call    _errno
.text:0040F9B5                 mov     dword ptr [eax], 16h
.text:0040F9BB                 xor     eax, eax
.text:0040F9BD                 add     esp, 0Ch
.text:0040F9C0                 retn
.text:0040F9C0 sub_40F9A0      endp
.text:0040F9C0
.text:0040F9C1 ; ---------------------------------------------------------------------------
.text:0040F9C1                 jmp     short sub_40F9D0
.text:0040F9C1 ; ---------------------------------------------------------------------------
.text:0040F9C3                 align 10h
.text:0040F9D0
.text:0040F9D0 ; =============== S U B R O U T I N E =======================================
.text:0040F9D0
.text:0040F9D0
.text:0040F9D0 ; int __cdecl sub_40F9D0(LPCSTR)
.text:0040F9D0 sub_40F9D0      proc near               ; CODE XREF: sub_40D980+1CA4↑p
.text:0040F9D0                                         ; .text:0040F9C1↑j ...
.text:0040F9D0
.text:0040F9D0 lpFileName      = dword ptr -0Ch
.text:0040F9D0 Destination     = dword ptr -8
.text:0040F9D0 arg_0           = dword ptr  4
.text:0040F9D0
.text:0040F9D0                 sub     esp, 0Ch
.text:0040F9D3                 mov     edx, [esp+0Ch+arg_0]
.text:0040F9D7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040F9DF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040F9E2                 call    sub_40F9F0
.text:0040F9E7                 add     esp, 0Ch
.text:0040F9EA                 retn
.text:0040F9EA sub_40F9D0      endp
.text:0040F9EA
.text:0040F9EA ; ---------------------------------------------------------------------------
.text:0040F9EB                 align 10h
.text:0040F9F0
.text:0040F9F0 ; =============== S U B R O U T I N E =======================================
.text:0040F9F0
.text:0040F9F0
.text:0040F9F0 ; int __cdecl sub_40F9F0(LPCSTR lpFileName, char *Destination)
.text:0040F9F0 sub_40F9F0      proc near               ; CODE XREF: sub_40F9A0+E↑j
.text:0040F9F0                                         ; sub_40F9D0+12↑p
.text:0040F9F0
.text:0040F9F0 Size            = dword ptr -2Ch
.text:0040F9F0 nBufferLength   = dword ptr -28h
.text:0040F9F0 lpBuffer        = dword ptr -24h
.text:0040F9F0 lpFilePart      = dword ptr -20h
.text:0040F9F0 FilePart        = dword ptr -14h
.text:0040F9F0 lpFileName      = dword ptr  4
.text:0040F9F0 Destination     = dword ptr  8
.text:0040F9F0
.text:0040F9F0                 push    ebp
.text:0040F9F1                 push    edi
.text:0040F9F2                 push    esi
.text:0040F9F3                 push    ebx
.text:0040F9F4                 sub     esp, 1Ch
.text:0040F9F7                 mov     edi, [esp+2Ch+lpFileName]
.text:0040F9FB                 mov     ebp, [esp+2Ch+Destination]
.text:0040F9FF                 test    edi, edi
.text:0040FA01                 jz      loc_40FB09
.text:0040FA07                 cmp     byte ptr [edi], 0
.text:0040FA0A                 jz      loc_40FAFC
.text:0040FA10                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040FA17                 call    malloc
.text:0040FA1C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040FA20                 lea     edx, [esp+2Ch+FilePart]
.text:0040FA24                 mov     ebx, eax
.text:0040FA26                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040FA2A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040FA32                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040FA35                 call    GetFullPathNameA
.text:0040FA3A                 sub     esp, 10h
.text:0040FA3D                 mov     esi, eax
.text:0040FA3F                 test    eax, eax
.text:0040FA41                 jz      loc_40FAEA
.text:0040FA47                 cmp     eax, 104h
.text:0040FA4C                 jle     short loc_40FA5D
.text:0040FA4E                 test    ebp, ebp
.text:0040FA50                 jz      short loc_40FAB9
.text:0040FA52                 call    _errno
.text:0040FA57                 mov     dword ptr [eax], 26h ; '&'
.text:0040FA5D
.text:0040FA5D loc_40FA5D:                             ; CODE XREF: sub_40F9F0+5C↑j
.text:0040FA5D                                         ; sub_40F9F0+F5↓j
.text:0040FA5D                 call    _errno
.text:0040FA62                 mov     edi, [eax]
.text:0040FA64                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040FA6C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040FA6F                 call    sub_40CB40
.text:0040FA74                 test    eax, eax
.text:0040FA76                 jnz     short loc_40FA90
.text:0040FA78                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040FA7D                 cmp     al, 2Fh ; '/'
.text:0040FA7F                 jz      short loc_40FA90
.text:0040FA81                 cmp     al, 5Ch ; '\'
.text:0040FA83                 jz      short loc_40FA90
.text:0040FA85                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040FA89                 mov     byte ptr [esi+ebx+1], 0
.text:0040FA8E                 mov     esi, esi
.text:0040FA90
.text:0040FA90 loc_40FA90:                             ; CODE XREF: sub_40F9F0+86↑j
.text:0040FA90                                         ; sub_40F9F0+8F↑j ...
.text:0040FA90                 call    _errno
.text:0040FA95                 mov     [eax], edi
.text:0040FA97                 mov     [esp+2Ch+Size], ebx
.text:0040FA9A                 call    sub_410BC0
.text:0040FA9F                 test    ebp, ebp
.text:0040FAA1                 mov     eax, ebx
.text:0040FAA3                 jz      short loc_40FAB1
.text:0040FAA5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040FAA9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040FAAC                 call    strcpy
.text:0040FAB1
.text:0040FAB1 loc_40FAB1:                             ; CODE XREF: sub_40F9F0+B3↑j
.text:0040FAB1                                         ; sub_40F9F0+10A↓j
.text:0040FAB1                 add     esp, 1Ch
.text:0040FAB4                 pop     ebx
.text:0040FAB5                 pop     esi
.text:0040FAB6                 pop     edi
.text:0040FAB7                 pop     ebp
.text:0040FAB8                 retn
.text:0040FAB9 ; ---------------------------------------------------------------------------
.text:0040FAB9
.text:0040FAB9 loc_40FAB9:                             ; CODE XREF: sub_40F9F0+60↑j
.text:0040FAB9                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040FABC                 lea     ecx, [eax+2]
.text:0040FABF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040FAC3                 call    realloc
.text:0040FAC8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040FACC                 lea     edx, [esp+2Ch+FilePart]
.text:0040FAD0                 mov     ebx, eax
.text:0040FAD2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040FAD6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040FADA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040FADD                 call    GetFullPathNameA
.text:0040FAE2                 sub     esp, 10h
.text:0040FAE5                 jmp     loc_40FA5D
.text:0040FAEA ; ---------------------------------------------------------------------------
.text:0040FAEA
.text:0040FAEA loc_40FAEA:                             ; CODE XREF: sub_40F9F0+51↑j
.text:0040FAEA                 call    sub_40CB20
.text:0040FAEF                 mov     esi, eax
.text:0040FAF1                 call    _errno
.text:0040FAF6                 mov     [eax], esi
.text:0040FAF8
.text:0040FAF8 loc_40FAF8:                             ; CODE XREF: sub_40F9F0+117↓j
.text:0040FAF8                                         ; sub_40F9F0+124↓j
.text:0040FAF8                 xor     eax, eax
.text:0040FAFA                 jmp     short loc_40FAB1
.text:0040FAFC ; ---------------------------------------------------------------------------
.text:0040FAFC
.text:0040FAFC loc_40FAFC:                             ; CODE XREF: sub_40F9F0+1A↑j
.text:0040FAFC                 call    _errno
.text:0040FB01                 mov     dword ptr [eax], 2
.text:0040FB07                 jmp     short loc_40FAF8
.text:0040FB09 ; ---------------------------------------------------------------------------
.text:0040FB09
.text:0040FB09 loc_40FB09:                             ; CODE XREF: sub_40F9F0+11↑j
.text:0040FB09                 call    _errno
.text:0040FB0E                 mov     dword ptr [eax], 16h
.text:0040FB14                 jmp     short loc_40FAF8
.text:0040FB14 sub_40F9F0      endp
.text:0040FB14
.text:0040FB14 ; ---------------------------------------------------------------------------
.text:0040FB16                 align 10h
.text:0040FB20 ; const char String[4]
.text:0040FB20 String          db ' :/',0              ; DATA XREF: sub_40FB30+FA↓o
.text:0040FB24                 align 10h
.text:0040FB30
.text:0040FB30 ; =============== S U B R O U T I N E =======================================
.text:0040FB30
.text:0040FB30
.text:0040FB30 ; int __cdecl sub_40FB30(LPCSTR)
.text:0040FB30 sub_40FB30      proc near               ; CODE XREF: sub_40E3D0+E↑p
.text:0040FB30                                         ; sub_40E8D0+17↑p ...
.text:0040FB30
.text:0040FB30 Str             = dword ptr -1Ch
.text:0040FB30 Val             = dword ptr -18h
.text:0040FB30 Count           = dword ptr -14h
.text:0040FB30 var_10          = dword ptr -10h
.text:0040FB30 var_C           = dword ptr -0Ch
.text:0040FB30 var_8           = dword ptr -8
.text:0040FB30 var_4           = dword ptr -4
.text:0040FB30 arg_0           = dword ptr  4
.text:0040FB30
.text:0040FB30                 sub     esp, 1Ch
.text:0040FB33                 mov     edx, [esp+1Ch+arg_0]
.text:0040FB37                 mov     [esp+1Ch+var_8], edi
.text:0040FB3B                 mov     [esp+1Ch+var_10], ebx
.text:0040FB3F                 mov     [esp+1Ch+var_C], esi
.text:0040FB43                 mov     [esp+1Ch+var_4], ebp
.text:0040FB47                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040FB4A                 call    sub_40F9D0
.text:0040FB4F                 test    eax, eax
.text:0040FB51                 mov     edi, eax
.text:0040FB53                 jz      short loc_40FB90
.text:0040FB55                 mov     [esp+1Ch+Str], eax ; Str
.text:0040FB58                 call    strlen
.text:0040FB5D                 cmp     eax, 2
.text:0040FB60                 jbe     short loc_40FB6C
.text:0040FB62                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040FB66                 jz      loc_40FC20
.text:0040FB6C
.text:0040FB6C loc_40FB6C:                             ; CODE XREF: sub_40FB30+30↑j
.text:0040FB6C                                         ; sub_40FB30+F4↓j
.text:0040FB6C                 test    edi, edi
.text:0040FB6E                 jz      short loc_40FB90
.text:0040FB70                 mov     [esp+1Ch+Str], edi ; Str
.text:0040FB73                 call    strlen
.text:0040FB78                 cmp     eax, 4
.text:0040FB7B                 mov     ebp, eax
.text:0040FB7D                 jle     short loc_40FB90
.text:0040FB7F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040FB82                 jz      short loc_40FBB0
.text:0040FB84                 lea     esi, [esi+0]
.text:0040FB8A                 lea     edi, [edi+0]
.text:0040FB90
.text:0040FB90 loc_40FB90:                             ; CODE XREF: sub_40FB30+23↑j
.text:0040FB90                                         ; sub_40FB30+3E↑j ...
.text:0040FB90                 xor     esi, esi
.text:0040FB92
.text:0040FB92 loc_40FB92:                             ; CODE XREF: sub_40FB30+CD↓j
.text:0040FB92                                         ; sub_40FB30+115↓j
.text:0040FB92                 mov     [esp+1Ch+Str], edi ; Block
.text:0040FB95                 call    free
.text:0040FB9A                 mov     eax, esi
.text:0040FB9C                 mov     ebx, [esp+1Ch+var_10]
.text:0040FBA0                 mov     esi, [esp+1Ch+var_C]
.text:0040FBA4                 mov     edi, [esp+1Ch+var_8]
.text:0040FBA8                 mov     ebp, [esp+1Ch+var_4]
.text:0040FBAC                 add     esp, 1Ch
.text:0040FBAF                 retn
.text:0040FBB0 ; ---------------------------------------------------------------------------
.text:0040FBB0
.text:0040FBB0 loc_40FBB0:                             ; CODE XREF: sub_40FB30+52↑j
.text:0040FBB0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040FBB4                 jnz     short loc_40FB90
.text:0040FBB6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040FBBE                 lea     ecx, [edi+2]
.text:0040FBC1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040FBC4                 call    strchr
.text:0040FBC9                 test    eax, eax
.text:0040FBCB                 jnz     short loc_40FBFF
.text:0040FBCD
.text:0040FBCD loc_40FBCD:                             ; CODE XREF: sub_40FB30+E2↓j
.text:0040FBCD                 inc     ebp
.text:0040FBCE
.text:0040FBCE loc_40FBCE:                             ; CODE XREF: sub_40FB30+E9↓j
.text:0040FBCE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040FBD6                 lea     ebx, [ebp+1]
.text:0040FBD9                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040FBDC                 call    calloc
.text:0040FBE1                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040FBE4                 mov     esi, eax
.text:0040FBE6                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040FBEA                 mov     [esp+1Ch+Val], edi ; Source
.text:0040FBEE                 call    strncpy
.text:0040FBF3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040FBF8                 mov     byte ptr [ebp+esi+0], 0
.text:0040FBFD                 jmp     short loc_40FB92
.text:0040FBFF ; ---------------------------------------------------------------------------
.text:0040FBFF
.text:0040FBFF loc_40FBFF:                             ; CODE XREF: sub_40FB30+9B↑j
.text:0040FBFF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040FC07                 inc     eax
.text:0040FC08                 mov     [esp+1Ch+Str], eax ; Str
.text:0040FC0B                 call    strchr
.text:0040FC10                 test    eax, eax
.text:0040FC12                 jz      short loc_40FBCD
.text:0040FC14                 sub     eax, edi
.text:0040FC16                 lea     ebp, [eax+1]
.text:0040FC19                 jmp     short loc_40FBCE
.text:0040FC19 ; ---------------------------------------------------------------------------
.text:0040FC1B                 align 10h
.text:0040FC20
.text:0040FC20 loc_40FC20:                             ; CODE XREF: sub_40FB30+36↑j
.text:0040FC20                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040FC24                 jnz     loc_40FB6C
.text:0040FC2A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040FC31                 call    _strdup
.text:0040FC36                 movsx   edx, byte ptr [edi]
.text:0040FC39                 mov     esi, eax
.text:0040FC3B                 mov     [esp+1Ch+Str], edx ; C
.text:0040FC3E                 call    toupper
.text:0040FC43                 mov     [esi], al
.text:0040FC45                 jmp     loc_40FB92
.text:0040FC45 sub_40FB30      endp
.text:0040FC45
.text:0040FC45 ; ---------------------------------------------------------------------------
.text:0040FC4A                 align 10h
.text:0040FC50
.text:0040FC50 ; =============== S U B R O U T I N E =======================================
.text:0040FC50
.text:0040FC50
.text:0040FC50 sub_40FC50      proc near               ; CODE XREF: .text:0040FDA4↓p
.text:0040FC50                                         ; .text:0040FE88↓p
.text:0040FC50
.text:0040FC50 Str             = dword ptr -2Ch
.text:0040FC50 Val             = dword ptr -28h
.text:0040FC50 var_18          = dword ptr -18h
.text:0040FC50 var_11          = byte ptr -11h
.text:0040FC50 arg_0           = dword ptr  4
.text:0040FC50
.text:0040FC50                 push    ebp
.text:0040FC51                 push    edi
.text:0040FC52                 push    esi
.text:0040FC53                 push    ebx
.text:0040FC54                 sub     esp, 1Ch
.text:0040FC57                 mov     edx, [esp+2Ch+arg_0]
.text:0040FC5B                 cmp     edx, ds:dword_4193F0
.text:0040FC61                 mov     [esp+2Ch+var_11], 0
.text:0040FC66                 jz      loc_40FD64
.text:0040FC6C                 mov     ebx, ds:dword_4193E0
.text:0040FC72                 test    ebx, ebx
.text:0040FC74                 jz      short loc_40FCE2
.text:0040FC76
.text:0040FC76 loc_40FC76:                             ; CODE XREF: sub_40FC50+10F↓j
.text:0040FC76                 mov     ebx, [esp+2Ch+arg_0]
.text:0040FC7A                 xor     edi, edi
.text:0040FC7C                 xor     esi, esi
.text:0040FC7E                 mov     ebp, offset dword_419408
.text:0040FC83                 lea     esi, [esi+0]
.text:0040FC89                 lea     edi, [edi+0]
.text:0040FC90
.text:0040FC90 loc_40FC90:                             ; CODE XREF: sub_40FC50+60↓j
.text:0040FC90                 mov     edx, [ebp+4]
.text:0040FC93                 mov     ecx, edi
.text:0040FC95                 mov     eax, [ebp+0]
.text:0040FC98                 shl     ecx, 4
.text:0040FC9B                 mov     [esp+2Ch+var_18], ecx
.text:0040FC9F                 mov     ecx, edx
.text:0040FCA1                 xor     eax, ebx
.text:0040FCA3                 xor     ecx, esi
.text:0040FCA5                 or      ecx, eax
.text:0040FCA7                 jz      short loc_40FCD1
.text:0040FCA9                 inc     edi
.text:0040FCAA                 add     ebp, 10h
.text:0040FCAD                 cmp     edi, 20h ; ' '
.text:0040FCB0                 jle     short loc_40FC90
.text:0040FCB2
.text:0040FCB2 loc_40FCB2:                             ; CODE XREF: sub_40FC50+90↓j
.text:0040FCB2                 movzx   ebx, [esp+2Ch+var_11]
.text:0040FCB7                 mov     eax, [esp+2Ch+arg_0]
.text:0040FCBB                 mov     byte_416070, bl
.text:0040FCC1                 mov     ds:dword_4193F0, eax
.text:0040FCC6                 movsx   eax, bl
.text:0040FCC9
.text:0040FCC9 loc_40FCC9:                             ; CODE XREF: sub_40FC50+11B↓j
.text:0040FCC9                 add     esp, 1Ch
.text:0040FCCC                 pop     ebx
.text:0040FCCD                 pop     esi
.text:0040FCCE                 pop     edi
.text:0040FCCF                 pop     ebp
.text:0040FCD0                 retn
.text:0040FCD1 ; ---------------------------------------------------------------------------
.text:0040FCD1
.text:0040FCD1 loc_40FCD1:                             ; CODE XREF: sub_40FC50+57↑j
.text:0040FCD1                 mov     edx, [esp+2Ch+var_18]
.text:0040FCD5                 movzx   eax, byte ptr ds:dword_419400[edx]
.text:0040FCDC                 mov     [esp+2Ch+var_11], al
.text:0040FCE0                 jmp     short loc_40FCB2
.text:0040FCE2 ; ---------------------------------------------------------------------------
.text:0040FCE2
.text:0040FCE2 loc_40FCE2:                             ; CODE XREF: sub_40FC50+24↑j
.text:0040FCE2                 mov     [esp+2Ch+Str], 0
.text:0040FCE9                 call    sub_411B90
.text:0040FCEE                 test    eax, eax
.text:0040FCF0                 mov     ebx, eax
.text:0040FCF2                 jz      short loc_40FD4C
.text:0040FCF4                 movzx   ecx, byte ptr [eax]
.text:0040FCF7                 mov     esi, 0FFFFFFF0h
.text:0040FCFC                 test    cl, cl
.text:0040FCFE                 jz      short loc_40FD4C
.text:0040FD00
.text:0040FD00 loc_40FD00:                             ; CODE XREF: sub_40FC50+FA↓j
.text:0040FD00                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040FD03                 movsx   ebp, cl
.text:0040FD06                 add     esi, 10h
.text:0040FD09                 mov     ds:dword_419400[esi], ebp
.text:0040FD0F                 mov     edi, ebp
.text:0040FD11                 sar     edi, 1Fh
.text:0040FD14                 mov     ds:dword_419404[esi], edi
.text:0040FD1A                 call    sub_40E8D0
.text:0040FD1F                 mov     ds:dword_419408[esi], eax
.text:0040FD25                 xor     ecx, ecx
.text:0040FD27                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040FD2A                 mov     ds:dword_41940C[esi], ecx
.text:0040FD30                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040FD38                 call    strchr
.text:0040FD3D                 mov     ebx, eax
.text:0040FD3F                 inc     ebx
.text:0040FD40                 jz      short loc_40FD4C
.text:0040FD42                 movzx   edx, byte ptr [eax+1]
.text:0040FD46                 test    dl, dl
.text:0040FD48                 mov     cl, dl
.text:0040FD4A                 jnz     short loc_40FD00
.text:0040FD4C
.text:0040FD4C loc_40FD4C:                             ; CODE XREF: sub_40FC50+A2↑j
.text:0040FD4C                                         ; sub_40FC50+AE↑j ...
.text:0040FD4C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040FD4F                 mov     esi, 1
.text:0040FD54                 mov     ds:dword_4193E0, esi
.text:0040FD5A                 call    free
.text:0040FD5F                 jmp     loc_40FC76
.text:0040FD64 ; ---------------------------------------------------------------------------
.text:0040FD64
.text:0040FD64 loc_40FD64:                             ; CODE XREF: sub_40FC50+16↑j
.text:0040FD64                 movsx   eax, byte_416070
.text:0040FD6B                 jmp     loc_40FCC9
.text:0040FD6B sub_40FC50      endp
.text:0040FD6B
.text:0040FD6B ; ---------------------------------------------------------------------------
.text:0040FD70 dword_40FD70    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040FD70                                         ; DATA XREF: .text:0040FD93↓o
.text:0040FD70                                         ; .text:0040FE73↓o
.text:0040FD80 ; ---------------------------------------------------------------------------
.text:0040FD80                 sub     esp, 1Ch
.text:0040FD83                 mov     [esp+14h], esi
.text:0040FD87                 mov     esi, [esp+20h]
.text:0040FD8B                 mov     [esp+18h], edi
.text:0040FD8F                 mov     [esp+10h], ebx
.text:0040FD93                 mov     dword ptr [esp], offset dword_40FD70
.text:0040FD9A                 call    _strdup
.text:0040FD9F                 mov     [esp], esi
.text:0040FDA2                 mov     edi, eax
.text:0040FDA4                 call    sub_40FC50
.text:0040FDA9                 mov     [edi], al
.text:0040FDAB                 test    al, al
.text:0040FDAD                 jz      short loc_40FDC1
.text:0040FDAF                 mov     eax, edi
.text:0040FDB1                 mov     ebx, [esp+10h]
.text:0040FDB5                 mov     esi, [esp+14h]
.text:0040FDB9                 mov     edi, [esp+18h]
.text:0040FDBD                 add     esp, 1Ch
.text:0040FDC0                 retn
.text:0040FDC1 ; ---------------------------------------------------------------------------
.text:0040FDC1
.text:0040FDC1 loc_40FDC1:                             ; CODE XREF: .text:0040FDAD↑j
.text:0040FDC1                 mov     [esp], edi
.text:0040FDC4                 call    free
.text:0040FDC9                 mov     dword ptr [esp+4], 0
.text:0040FDD1                 mov     dword ptr [esp], 0
.text:0040FDD8                 call    GetCurrentDirectoryA
.text:0040FDDD                 sub     esp, 8
.text:0040FDE0                 lea     esi, [eax+1]
.text:0040FDE3                 mov     [esp], esi
.text:0040FDE6                 call    malloc
.text:0040FDEB                 mov     [esp+4], eax
.text:0040FDEF                 mov     edi, eax
.text:0040FDF1                 mov     [esp], esi
.text:0040FDF4                 call    GetCurrentDirectoryA
.text:0040FDF9                 sub     esp, 8
.text:0040FDFC                 test    eax, eax
.text:0040FDFE                 jnz     short loc_40FE20
.text:0040FE00                 mov     dword ptr [esp+20h], 40FD74h
.text:0040FE08                 mov     ebx, [esp+10h]
.text:0040FE0C                 mov     esi, [esp+14h]
.text:0040FE10                 mov     edi, [esp+18h]
.text:0040FE14                 add     esp, 1Ch
.text:0040FE17                 jmp     _strdup
.text:0040FE17 ; ---------------------------------------------------------------------------
.text:0040FE1C                 align 10h
.text:0040FE20
.text:0040FE20 loc_40FE20:                             ; CODE XREF: .text:0040FDFE↑j
.text:0040FE20                 mov     [esp+20h], edi
.text:0040FE24                 mov     ebx, [esp+10h]
.text:0040FE28                 mov     esi, [esp+14h]
.text:0040FE2C                 mov     edi, [esp+18h]
.text:0040FE30                 add     esp, 1Ch
.text:0040FE33                 jmp     sub_40FB30
.text:0040FE33 ; ---------------------------------------------------------------------------
.text:0040FE38                 align 10h
.text:0040FE40                 sub     esp, 7Ch
.text:0040FE43                 lea     edx, [esp+10h]
.text:0040FE47                 mov     [esp+8], edx
.text:0040FE4B                 mov     edx, [esp+80h]
.text:0040FE52                 mov     [esp+70h], ebx
.text:0040FE56                 mov     [esp+74h], esi
.text:0040FE5A                 mov     [esp+4], edx
.text:0040FE5E                 mov     [esp+78h], edi
.text:0040FE62                 mov     dword ptr [esp], 0
.text:0040FE69                 call    sub_411DA0
.text:0040FE6E                 xor     edx, edx
.text:0040FE70                 inc     eax
.text:0040FE71                 jz      short loc_40FE95
.text:0040FE73                 mov     dword ptr [esp], offset dword_40FD70
.text:0040FE7A                 mov     esi, [esp+20h]
.text:0040FE7E                 call    _strdup
.text:0040FE83                 mov     edi, eax
.text:0040FE85                 mov     [esp], esi
.text:0040FE88                 call    sub_40FC50
.text:0040FE8D                 mov     [edi], al
.text:0040FE8F                 test    al, al
.text:0040FE91                 mov     edx, edi
.text:0040FE93                 jz      short loc_40FEA7
.text:0040FE95
.text:0040FE95 loc_40FE95:                             ; CODE XREF: .text:0040FE71↑j
.text:0040FE95                                         ; .text:0040FEF4↓j
.text:0040FE95                 mov     ebx, [esp+70h]
.text:0040FE99                 mov     eax, edx
.text:0040FE9B                 mov     esi, [esp+74h]
.text:0040FE9F                 mov     edi, [esp+78h]
.text:0040FEA3                 add     esp, 7Ch
.text:0040FEA6                 retn
.text:0040FEA7 ; ---------------------------------------------------------------------------
.text:0040FEA7
.text:0040FEA7 loc_40FEA7:                             ; CODE XREF: .text:0040FE93↑j
.text:0040FEA7                 mov     [esp], edi
.text:0040FEAA                 call    free
.text:0040FEAF                 mov     dword ptr [esp+4], 0
.text:0040FEB7                 mov     dword ptr [esp], 0
.text:0040FEBE                 call    GetCurrentDirectoryA
.text:0040FEC3                 sub     esp, 8
.text:0040FEC6                 lea     esi, [eax+1]
.text:0040FEC9                 mov     [esp], esi
.text:0040FECC                 call    malloc
.text:0040FED1                 mov     [esp+4], eax
.text:0040FED5                 mov     edi, eax
.text:0040FED7                 mov     [esp], esi
.text:0040FEDA                 call    GetCurrentDirectoryA
.text:0040FEDF                 sub     esp, 8
.text:0040FEE2                 test    eax, eax
.text:0040FEE4                 jnz     short loc_40FEF6
.text:0040FEE6                 mov     dword ptr [esp], 40FD74h
.text:0040FEED                 call    _strdup
.text:0040FEF2
.text:0040FEF2 loc_40FEF2:                             ; CODE XREF: .text:0040FEFE↓j
.text:0040FEF2                 mov     edx, eax
.text:0040FEF4                 jmp     short loc_40FE95
.text:0040FEF6 ; ---------------------------------------------------------------------------
.text:0040FEF6
.text:0040FEF6 loc_40FEF6:                             ; CODE XREF: .text:0040FEE4↑j
.text:0040FEF6                 mov     [esp], edi
.text:0040FEF9                 call    sub_40FB30
.text:0040FEFE                 jmp     short loc_40FEF2
.text:0040FF00
.text:0040FF00 ; =============== S U B R O U T I N E =======================================
.text:0040FF00
.text:0040FF00
.text:0040FF00 ; int __cdecl sub_40FF00(LPCSTR)
.text:0040FF00 sub_40FF00      proc near               ; CODE XREF: sub_40DD80+12F↑p
.text:0040FF00
.text:0040FF00 String1         = dword ptr -1Ch
.text:0040FF00 String2         = dword ptr -18h
.text:0040FF00 var_C           = dword ptr -0Ch
.text:0040FF00 var_8           = dword ptr -8
.text:0040FF00 var_4           = dword ptr -4
.text:0040FF00 arg_0           = dword ptr  4
.text:0040FF00
.text:0040FF00                 sub     esp, 1Ch
.text:0040FF03                 mov     [esp+1Ch+var_4], edi
.text:0040FF07                 mov     edi, [esp+1Ch+arg_0]
.text:0040FF0B                 mov     [esp+1Ch+var_C], ebx
.text:0040FF0F                 mov     [esp+1Ch+var_8], esi
.text:0040FF13                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040FF16                 call    sub_40F9D0
.text:0040FF1B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040FF1E                 mov     esi, eax
.text:0040FF20                 call    sub_40FB30
.text:0040FF25                 mov     [esp+1Ch+String2], eax ; String2
.text:0040FF29                 mov     ebx, eax
.text:0040FF2B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040FF2E                 call    _stricmp
.text:0040FF33                 test    eax, eax
.text:0040FF35                 setz    dl
.text:0040FF38                 test    esi, esi
.text:0040FF3A                 movzx   edi, dl
.text:0040FF3D                 jz      short loc_40FF47
.text:0040FF3F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040FF42                 call    free
.text:0040FF47
.text:0040FF47 loc_40FF47:                             ; CODE XREF: sub_40FF00+3D↑j
.text:0040FF47                 test    ebx, ebx
.text:0040FF49                 jz      short loc_40FF53
.text:0040FF4B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040FF4E                 call    free
.text:0040FF53
.text:0040FF53 loc_40FF53:                             ; CODE XREF: sub_40FF00+49↑j
.text:0040FF53                 mov     eax, edi
.text:0040FF55                 mov     ebx, [esp+1Ch+var_C]
.text:0040FF59                 mov     esi, [esp+1Ch+var_8]
.text:0040FF5D                 mov     edi, [esp+1Ch+var_4]
.text:0040FF61                 add     esp, 1Ch
.text:0040FF64                 retn
.text:0040FF64 sub_40FF00      endp
.text:0040FF64
.text:0040FF64 ; ---------------------------------------------------------------------------
.text:0040FF65                 align 10h
.text:0040FF70 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040FFC1↓o
.text:0040FF79 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040FF79                                         ; DATA XREF: .text:0040FFD2↓o
.text:0040FF8D ; const CHAR FileName[]
.text:0040FF8D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0041011C↓o
.text:0040FF8D                                         ; sub_410550+17C↓o
.text:0040FF98 ; ---------------------------------------------------------------------------
.text:0040FF98
.text:0040FF98 loc_40FF98:                             ; DATA XREF: .text:00410232↓o
.text:0040FF98                 dec     esi
.text:0040FF99                 push    esp
.text:0040FF9A                 inc     esi
.text:0040FF9B                 push    ebx
.text:0040FF9C                 add     [esi+41h], al
.text:0040FF9F                 push    esp
.text:0040FFA0                 xor     esi, [edx]
.text:0040FFA2                 add     [esi+41h], al
.text:0040FFA5                 push    esp
.text:0040FFA6                 add     [ebx+44h], al
.text:0040FFA9                 inc     esi
.text:0040FFAA                 push    ebx
.text:0040FFAB
.text:0040FFAB loc_40FFAB:                             ; CODE XREF: sub_410550+101↓p
.text:0040FFAB                 add     [ebp+55002674h], cl
.text:0040FFB1                 push    edi
.text:0040FFB2                 push    esi
.text:0040FFB3                 push    ebx
.text:0040FFB4                 sub     esp, 8BCh
.text:0040FFBA                 mov     ebp, [esp+8D0h]
.text:0040FFC1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040FFC8                 call    LoadLibraryA
.text:0040FFCD                 sub     esp, 4
.text:0040FFD0                 mov     edi, eax
.text:0040FFD2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040FFDA                 mov     [esp], eax
.text:0040FFDD                 call    GetProcAddress
.text:0040FFE2                 sub     esp, 8
.text:0040FFE5                 mov     esi, eax
.text:0040FFE7                 test    ebp, ebp
.text:0040FFE9                 mov     dword ptr [esp+20h], 0
.text:0040FFF1                 jz      loc_410531
.text:0040FFF7                 mov     [esp], ebp
.text:0040FFFA                 call    sub_410C40
.text:0040FFFF                 mov     [esp], eax
.text:00410002                 mov     ebp, eax
.text:00410004                 call    strlen
.text:00410009                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0041000E                 mov     ebx, eax
.text:00410010                 jz      short loc_41002C
.text:00410012                 mov     [esp], ebp
.text:00410015                 lea     edx, [eax+1]
.text:00410018                 mov     [esp+4], edx
.text:0041001C                 call    realloc
.text:00410021                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00410025                 mov     ebp, eax
.text:00410027                 mov     byte ptr [ebx+eax+1], 0
.text:0041002C
.text:0041002C loc_41002C:                             ; CODE XREF: .text:00410010↑j
.text:0041002C                 mov     dword ptr [esp+1Ch], 400h
.text:00410034                 lea     edx, [esp+0B0h]
.text:0041003B                 lea     ebx, [esp+5Ch]
.text:0041003F                 mov     [esp+18h], edx
.text:00410043                 lea     ecx, [esp+58h]
.text:00410047                 lea     edx, [esp+54h]
.text:0041004B                 mov     [esp+14h], ebx
.text:0041004F                 lea     eax, [esp+4B0h]
.text:00410056                 mov     [esp+10h], ecx
.text:0041005A                 mov     [esp+0Ch], edx
.text:0041005E                 mov     dword ptr [esp+8], 400h
.text:00410066                 mov     [esp+4], eax
.text:0041006A                 mov     [esp], ebp
.text:0041006D                 call    GetVolumeInformationA
.text:00410072                 sub     esp, 20h
.text:00410075                 test    eax, eax
.text:00410077                 jz      loc_41050E
.text:0041007D                 test    esi, esi
.text:0041007F                 jz      short loc_4100A5
.text:00410081                 mov     [esp], ebp
.text:00410084                 lea     edx, [esp+48h]
.text:00410088                 lea     ebx, [esp+40h]
.text:0041008C                 mov     [esp+0Ch], edx
.text:00410090                 lea     ecx, [esp+38h]
.text:00410094                 mov     [esp+8], ebx
.text:00410098                 mov     [esp+4], ecx
.text:0041009C                 call    esi
.text:0041009E                 sub     esp, 10h
.text:004100A1                 mov     [esp+20h], eax
.text:004100A5
.text:004100A5 loc_4100A5:                             ; CODE XREF: .text:0041007F↑j
.text:004100A5                 test    edi, edi
.text:004100A7                 jz      short loc_4100B4
.text:004100A9                 mov     [esp], edi
.text:004100AC                 call    FreeLibrary
.text:004100B1                 sub     esp, 4
.text:004100B4
.text:004100B4 loc_4100B4:                             ; CODE XREF: .text:004100A7↑j
.text:004100B4                 call    sub_4126C0
.text:004100B9                 test    eax, eax
.text:004100BB                 lea     esi, [esp+28h]
.text:004100BF                 jz      loc_4104F0
.text:004100C5                 call    sub_4126C0
.text:004100CA                 test    eax, eax
.text:004100CC                 jz      short loc_4100DC
.text:004100CE                 call    sub_412610
.text:004100D3                 cmp     eax, 0Bh
.text:004100D6                 jle     loc_4104C4
.text:004100DC
.text:004100DC loc_4100DC:                             ; CODE XREF: .text:004100CC↑j
.text:004100DC                 cld
.text:004100DD                 xor     eax, eax
.text:004100DF                 lea     ebx, [esp+60h]
.text:004100E3                 mov     ecx, 7
.text:004100E8                 mov     edi, ebx
.text:004100EA                 rep stosd
.text:004100EC                 mov     dword ptr [esp+18h], 0
.text:004100F4                 mov     dword ptr [esp+14h], 4000000h
.text:004100FC                 mov     dword ptr [esp+10h], 0
.text:00410104                 mov     dword ptr [esp+0Ch], 0
.text:0041010C                 mov     dword ptr [esp+8], 0
.text:00410114                 mov     dword ptr [esp+4], 0
.text:0041011C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00410123                 call    CreateFileA
.text:00410128                 sub     esp, 1Ch
.text:0041012B                 mov     edi, eax
.text:0041012D                 cmp     eax, 0FFFFFFFFh
.text:00410130                 jz      short loc_4101B0
.text:00410132                 mov     [esp+10h], ebx
.text:00410136                 lea     edx, [esp+80h]
.text:0041013D                 lea     ecx, [esp+24h]
.text:00410141                 mov     [esp+70h], edx
.text:00410145                 mov     [esp+18h], ecx
.text:00410149                 mov     [esp+8], ebx
.text:0041014D                 mov     dword ptr [esp+6Ch], 7303h
.text:00410155                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0041015D                 mov     [esp+64h], ebp
.text:00410161                 mov     dword ptr [esp+78h], 1
.text:00410169                 mov     dword ptr [esp+1Ch], 0
.text:00410171                 mov     dword ptr [esp+14h], 1Ch
.text:00410179                 mov     dword ptr [esp+0Ch], 1Ch
.text:00410181                 mov     dword ptr [esp+4], 6
.text:00410189                 mov     [esp], eax
.text:0041018C                 call    DeviceIoControl
.text:00410191                 sub     esp, 20h
.text:00410194                 mov     ebx, eax
.text:00410196                 mov     [esp], edi
.text:00410199                 call    CloseHandle
.text:0041019E                 sub     esp, 4
.text:004101A1                 test    ebx, ebx
.text:004101A3                 jz      short loc_4101B0
.text:004101A5                 test    byte ptr [esp+78h], 1
.text:004101AA                 jz      loc_410490
.text:004101B0
.text:004101B0 loc_4101B0:                             ; CODE XREF: .text:00410130↑j
.text:004101B0                                         ; .text:004101A3↑j
.text:004101B0                 call    sub_40CB20
.text:004101B5                 mov     edi, eax
.text:004101B7                 call    _errno
.text:004101BC                 mov     [eax], edi
.text:004101BE                 xor     eax, eax
.text:004101C0
.text:004101C0 loc_4101C0:                             ; CODE XREF: .text:004104BF↓j
.text:004101C0                                         ; .text:004104EB↓j
.text:004101C0                 test    eax, eax
.text:004101C2                 jnz     short loc_4101E4
.text:004101C4                 mov     dword ptr [esp+34h], 1
.text:004101CC                 mov     dword ptr [esp+30h], 200h
.text:004101D4                 mov     dword ptr [esp+2Ch], 0
.text:004101DC                 mov     dword ptr [esp+28h], 0
.text:004101E4
.text:004101E4 loc_4101E4:                             ; CODE XREF: .text:004101C2↑j
.text:004101E4                 mov     edx, [esp+30h]
.text:004101E8                 mov     edi, [esp+34h]
.text:004101EC                 mov     ecx, [esp+20h]
.text:004101F0                 imul    edi, edx
.text:004101F3                 test    ecx, ecx
.text:004101F5                 jnz     short loc_41021D
.text:004101F7                 mov     eax, [esp+28h]
.text:004101FB                 mul     edi
.text:004101FD                 mov     esi, eax
.text:004101FF                 mov     eax, [esp+2Ch]
.text:00410203                 mov     [esp+44h], edx
.text:00410207                 mov     [esp+40h], esi
.text:0041020B                 mul     edi
.text:0041020D                 mov     [esp+48h], eax
.text:00410211                 mov     [esp+4Ch], edx
.text:00410215                 mov     [esp+38h], eax
.text:00410219                 mov     [esp+3Ch], edx
.text:0041021D
.text:0041021D loc_41021D:                             ; CODE XREF: .text:004101F5↑j
.text:0041021D                 mov     ebx, [esp+5Ch]
.text:00410221                 lea     edx, [esp+0B0h]
.text:00410228                 mov     ecx, [esp+8D4h]
.text:0041022F                 mov     [ecx+48h], ebx
.text:00410232                 mov     dword ptr [esp+4], offset loc_40FF98
.text:0041023A                 mov     [esp], edx
.text:0041023D                 call    _stricmp
.text:00410242                 test    eax, eax
.text:00410244                 jnz     loc_410400
.text:0041024A                 mov     esi, [esp+8D4h]
.text:00410251                 mov     dword ptr [esi], 5346544Eh
.text:00410257
.text:00410257 loc_410257:                             ; CODE XREF: .text:00410428↓j
.text:00410257                                         ; .text:00410455↓j ...
.text:00410257                 mov     ebx, [esp+30h]
.text:0041025B                 mov     esi, [esp+8D4h]
.text:00410262                 mov     [esi+4], ebx
.text:00410265                 mov     [esi+8], ebx
.text:00410268                 mov     ebx, [esi+8]
.text:0041026B                 mov     [esi+0Ch], edi
.text:0041026E                 mov     ecx, [esp+44h]
.text:00410272                 xor     esi, esi
.text:00410274                 mov     [esp+8], ebx
.text:00410278                 mov     edx, [esp+40h]
.text:0041027C                 mov     [esp+0Ch], esi
.text:00410280                 mov     [esp+4], ecx
.text:00410284                 mov     [esp], edx
.text:00410287                 call    sub_4144A0
.text:0041028C                 mov     ecx, [esp+8D4h]
.text:00410293                 mov     [ecx+10h], eax
.text:00410296                 mov     [ecx+14h], edx
.text:00410299                 mov     ecx, [esp+4Ch]
.text:0041029D                 mov     [esp+8], ebx
.text:004102A1                 mov     edx, [esp+48h]
.text:004102A5                 mov     [esp+0Ch], esi
.text:004102A9                 mov     [esp+4], ecx
.text:004102AD                 mov     [esp], edx
.text:004102B0                 call    sub_4144A0
.text:004102B5                 mov     ecx, [esp+8D4h]
.text:004102BC                 mov     [ecx+18h], eax
.text:004102BF                 mov     [ecx+1Ch], edx
.text:004102C2                 mov     ecx, [esp+38h]
.text:004102C6                 mov     [esp+8], ebx
.text:004102CA                 mov     ebx, [esp+3Ch]
.text:004102CE                 mov     [esp+0Ch], esi
.text:004102D2                 mov     [esp], ecx
.text:004102D5                 mov     [esp+4], ebx
.text:004102D9                 call    sub_4144A0
.text:004102DE                 mov     esi, [esp+8D4h]
.text:004102E5                 mov     [esi+20h], eax
.text:004102E8                 mov     [esi+24h], edx
.text:004102EB                 mov     ecx, [esp+44h]
.text:004102EF                 mov     esi, edi
.text:004102F1                 mov     [esp+8], esi
.text:004102F5                 mov     edx, [esp+40h]
.text:004102F9                 xor     edi, edi
.text:004102FB                 mov     [esp+0Ch], edi
.text:004102FF                 mov     [esp+4], ecx
.text:00410303                 mov     [esp], edx
.text:00410306                 call    sub_4144A0
.text:0041030B                 mov     ebx, [esp+8D4h]
.text:00410312                 mov     [ebx+28h], eax
.text:00410315                 mov     [ebx+2Ch], edx
.text:00410318                 mov     ecx, [esp+4Ch]
.text:0041031C                 mov     [esp+8], esi
.text:00410320                 mov     edx, [esp+48h]
.text:00410324                 mov     [esp+0Ch], edi
.text:00410328                 mov     [esp+4], ecx
.text:0041032C                 mov     [esp], edx
.text:0041032F                 call    sub_4144A0
.text:00410334                 mov     ebx, [esp+8D4h]
.text:0041033B                 mov     [ebx+30h], eax
.text:0041033E                 mov     [ebx+34h], edx
.text:00410341                 mov     ecx, [esp+3Ch]
.text:00410345                 mov     [esp+8], esi
.text:00410349                 mov     edx, [esp+38h]
.text:0041034D                 mov     [esp+0Ch], edi
.text:00410351                 mov     [esp+4], ecx
.text:00410355                 mov     [esp], edx
.text:00410358                 call    sub_4144A0
.text:0041035D                 mov     edx, [esp+8D4h]
.text:00410364                 lea     ecx, [esp+0B0h]
.text:0041036B                 mov     [edx+38h], eax
.text:0041036E                 mov     esi, [esp+58h]
.text:00410372                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00410379                 mov     [edx+110h], esi
.text:0041037F                 mov     esi, edx
.text:00410381                 add     esi, 4Ch ; 'L'
.text:00410384                 movzx   ebx, word ptr [esp+56h]
.text:00410389                 movzx   edi, word ptr [esp+54h]
.text:0041038E                 mov     [edx+3Ch], ebx
.text:00410391                 lea     ebx, [esp+4B0h]
.text:00410398                 mov     [edx+40h], edi
.text:0041039B                 mov     [esp+4], ecx
.text:0041039F                 mov     dword ptr [esp+8], 10h
.text:004103A7                 mov     [esp], esi
.text:004103AA                 call    strncpy
.text:004103AF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:004103B7                 mov     edi, [esp+8D4h]
.text:004103BE                 mov     [esp+4], ebx
.text:004103C2                 add     edi, 5Ch ; '\'
.text:004103C5                 mov     [esp], edi
.text:004103C8                 call    strncpy
.text:004103CD                 mov     [esp+4], ebp
.text:004103D1                 mov     ebp, [esp+8D4h]
.text:004103D8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:004103E0                 add     ebp, 0B6h ; '¶'
.text:004103E6                 mov     [esp], ebp
.text:004103E9                 call    strncpy
.text:004103EE                 xor     eax, eax
.text:004103F0
.text:004103F0 loc_4103F0:                             ; CODE XREF: .text:0041052C↓j
.text:004103F0                 add     esp, 8BCh
.text:004103F6                 pop     ebx
.text:004103F7                 pop     esi
.text:004103F8                 pop     edi
.text:004103F9                 pop     ebp
.text:004103FA                 retn
.text:004103FA ; ---------------------------------------------------------------------------
.text:004103FB                 align 10h
.text:00410400
.text:00410400 loc_410400:                             ; CODE XREF: .text:00410244↑j
.text:00410400                 mov     dword ptr [esp+4], 40FF9Dh
.text:00410408                 lea     eax, [esp+0B0h]
.text:0041040F                 mov     [esp], eax
.text:00410412                 call    _stricmp
.text:00410417                 test    eax, eax
.text:00410419                 jnz     short loc_41042D
.text:0041041B                 mov     edx, [esp+8D4h]
.text:00410422                 mov     dword ptr [edx], 4008h
.text:00410428                 jmp     loc_410257
.text:0041042D ; ---------------------------------------------------------------------------
.text:0041042D
.text:0041042D loc_41042D:                             ; CODE XREF: .text:00410419↑j
.text:0041042D                 mov     dword ptr [esp+4], 40FFA3h
.text:00410435                 lea     ecx, [esp+0B0h]
.text:0041043C                 mov     [esp], ecx
.text:0041043F                 call    _stricmp
.text:00410444                 test    eax, eax
.text:00410446                 jnz     short loc_41045A
.text:00410448                 mov     ebx, [esp+8D4h]
.text:0041044F                 mov     dword ptr [ebx], 4006h
.text:00410455                 jmp     loc_410257
.text:0041045A ; ---------------------------------------------------------------------------
.text:0041045A
.text:0041045A loc_41045A:                             ; CODE XREF: .text:00410446↑j
.text:0041045A                 mov     dword ptr [esp+4], 40FFA7h
.text:00410462                 lea     eax, [esp+0B0h]
.text:00410469                 mov     [esp], eax
.text:0041046C                 call    _stricmp
.text:00410471                 test    eax, eax
.text:00410473                 mov     esi, [esp+8D4h]
.text:0041047A                 setnz   cl
.text:0041047D                 movzx   edx, cl
.text:00410480                 dec     edx
.text:00410481                 and     edx, 4000h
.text:00410487                 mov     [esi], edx
.text:00410489                 jmp     loc_410257
.text:00410489 ; ---------------------------------------------------------------------------
.text:0041048E                 align 10h
.text:00410490
.text:00410490 loc_410490:                             ; CODE XREF: .text:004101AA↑j
.text:00410490                 mov     edi, [esp+84h]
.text:00410497                 mov     eax, 1
.text:0041049C                 mov     edx, [esp+88h]
.text:004104A3                 mov     ecx, [esp+8Ch]
.text:004104AA                 mov     ebx, [esp+90h]
.text:004104B1                 mov     [esp+34h], edi
.text:004104B5                 mov     [esp+30h], edx
.text:004104B9                 mov     [esp+2Ch], ecx
.text:004104BD                 mov     [esi], ebx
.text:004104BF                 jmp     loc_4101C0
.text:004104C4 ; ---------------------------------------------------------------------------
.text:004104C4
.text:004104C4 loc_4104C4:                             ; CODE XREF: .text:004100D6↑j
.text:004104C4                 mov     [esp+10h], esi
.text:004104C8                 lea     eax, [esp+2Ch]
.text:004104CC                 lea     esi, [esp+30h]
.text:004104D0                 mov     [esp+0Ch], eax
.text:004104D4                 lea     edi, [esp+34h]
.text:004104D8                 mov     [esp+8], esi
.text:004104DC                 mov     [esp+4], edi
.text:004104E0
.text:004104E0 loc_4104E0:                             ; CODE XREF: .text:0041050C↓j
.text:004104E0                 mov     [esp], ebp
.text:004104E3                 call    GetDiskFreeSpaceA
.text:004104E8                 sub     esp, 14h
.text:004104EB                 jmp     loc_4101C0
.text:004104F0 ; ---------------------------------------------------------------------------
.text:004104F0
.text:004104F0 loc_4104F0:                             ; CODE XREF: .text:004100BF↑j
.text:004104F0                 mov     [esp+10h], esi
.text:004104F4                 lea     ebx, [esp+2Ch]
.text:004104F8                 lea     eax, [esp+30h]
.text:004104FC                 mov     [esp+0Ch], ebx
.text:00410500                 lea     esi, [esp+34h]
.text:00410504                 mov     [esp+8], eax
.text:00410508                 mov     [esp+4], esi
.text:0041050C                 jmp     short loc_4104E0
.text:0041050E ; ---------------------------------------------------------------------------
.text:0041050E
.text:0041050E loc_41050E:                             ; CODE XREF: .text:00410077↑j
.text:0041050E                 mov     [esp], edi
.text:00410511                 call    FreeLibrary
.text:00410516                 sub     esp, 4
.text:00410519                 call    sub_40CB20
.text:0041051E                 mov     esi, eax
.text:00410520                 call    _errno
.text:00410525                 mov     [eax], esi
.text:00410527
.text:00410527 loc_410527:                             ; CODE XREF: .text:00410547↓j
.text:00410527                 mov     eax, 0FFFFFFFFh
.text:0041052C                 jmp     loc_4103F0
.text:00410531 ; ---------------------------------------------------------------------------
.text:00410531
.text:00410531 loc_410531:                             ; CODE XREF: .text:0040FFF1↑j
.text:00410531                 mov     [esp], edi
.text:00410534                 call    FreeLibrary
.text:00410539                 sub     esp, 4
.text:0041053C                 call    _errno
.text:00410541                 mov     dword ptr [eax], 2
.text:00410547                 jmp     short loc_410527
.text:00410547 ; ---------------------------------------------------------------------------
.text:00410549                 align 10h
.text:00410550
.text:00410550 ; =============== S U B R O U T I N E =======================================
.text:00410550
.text:00410550
.text:00410550 ; int __cdecl sub_410550(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00410550 sub_410550      proc near               ; CODE XREF: sub_40E3D0+2C7↑p
.text:00410550                                         ; .text:0040EA0A↑p
.text:00410550
.text:00410550 lpFileName      = dword ptr -9Ch
.text:00410550 dwDesiredAccess = dword ptr -98h
.text:00410550 dwShareMode     = dword ptr -94h
.text:00410550 lpSecurityAttributes= dword ptr -90h
.text:00410550 dwCreationDisposition= dword ptr -8Ch
.text:00410550 dwFlagsAndAttributes= dword ptr -88h
.text:00410550 hTemplateFile   = dword ptr -84h
.text:00410550 lpOverlapped    = dword ptr -80h
.text:00410550 BytesReturned   = dword ptr -70h
.text:00410550 InBuffer        = byte ptr -6Ch
.text:00410550 var_68          = dword ptr -68h
.text:00410550 var_64          = dword ptr -64h
.text:00410550 var_60          = dword ptr -60h
.text:00410550 var_5C          = dword ptr -5Ch
.text:00410550 var_54          = dword ptr -54h
.text:00410550 var_4C          = byte ptr -4Ch
.text:00410550 var_48          = dword ptr -48h
.text:00410550 var_44          = dword ptr -44h
.text:00410550 var_40          = dword ptr -40h
.text:00410550 var_3C          = dword ptr -3Ch
.text:00410550 lpRootPathName  = dword ptr -2Ch
.text:00410550 lpSectorsPerCluster= dword ptr -28h
.text:00410550 lpBytesPerSector= dword ptr -24h
.text:00410550 lpNumberOfFreeClusters= dword ptr -20h
.text:00410550 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00410550 var_18          = dword ptr -18h
.text:00410550 var_14          = dword ptr -14h
.text:00410550 var_10          = dword ptr -10h
.text:00410550 var_C           = dword ptr -0Ch
.text:00410550 var_8           = dword ptr -8
.text:00410550 var_4           = dword ptr -4
.text:00410550 arg_0           = dword ptr  4
.text:00410550 arg_4           = dword ptr  8
.text:00410550 arg_8           = dword ptr  0Ch
.text:00410550 arg_C           = dword ptr  10h
.text:00410550 arg_10          = dword ptr  14h
.text:00410550
.text:00410550                 sub     esp, 2Ch
.text:00410553                 mov     edx, [esp+2Ch+arg_0]
.text:00410557                 mov     [esp+2Ch+var_10], ebx
.text:0041055B                 mov     ebx, [esp+2Ch+arg_10]
.text:0041055F                 mov     [esp+2Ch+var_C], esi
.text:00410563                 mov     esi, [esp+2Ch+arg_C]
.text:00410567                 mov     [esp+2Ch+var_8], edi
.text:0041056B                 mov     edi, [esp+2Ch+arg_8]
.text:0041056F                 mov     [esp+2Ch+var_4], ebp
.text:00410573                 mov     ebp, [esp+2Ch+arg_4]
.text:00410577                 mov     [esp+2Ch+var_14], edx
.text:0041057B                 call    sub_4126C0
.text:00410580                 test    eax, eax
.text:00410582                 jz      short loc_4105B4
.text:00410584                 mov     [esp+2Ch+arg_10], ebx
.text:00410588                 mov     edx, [esp+2Ch+var_14]
.text:0041058C                 mov     ebx, [esp+2Ch+var_10]
.text:00410590                 mov     [esp+2Ch+arg_C], esi
.text:00410594                 mov     esi, [esp+2Ch+var_C]
.text:00410598                 mov     [esp+2Ch+arg_8], edi
.text:0041059C                 mov     edi, [esp+2Ch+var_8]
.text:004105A0                 mov     [esp+2Ch+arg_4], ebp
.text:004105A4                 mov     ebp, [esp+2Ch+var_4]
.text:004105A8                 mov     [esp+2Ch+arg_0], edx
.text:004105AC                 add     esp, 2Ch
.text:004105AF                 jmp     loc_410660
.text:004105B4 ; ---------------------------------------------------------------------------
.text:004105B4
.text:004105B4 loc_4105B4:                             ; CODE XREF: sub_410550+32↑j
.text:004105B4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:004105B8                 mov     ecx, [esp+2Ch+var_14]
.text:004105BC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:004105C0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:004105C4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:004105C8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:004105CB                 call    GetDiskFreeSpaceA
.text:004105D0                 sub     esp, 14h
.text:004105D3                 mov     ebx, [esp+2Ch+var_10]
.text:004105D7                 mov     esi, [esp+2Ch+var_C]
.text:004105DB                 mov     edi, [esp+2Ch+var_8]
.text:004105DF                 mov     ebp, [esp+2Ch+var_4]
.text:004105E3                 add     esp, 2Ch
.text:004105E6                 retn
.text:004105E6 ; ---------------------------------------------------------------------------
.text:004105E7                 align 10h
.text:004105F0
.text:004105F0 loc_4105F0:                             ; CODE XREF: .text:004110CD↓p
.text:004105F0                 sub     esp, 1Ch
.text:004105F3                 mov     [esp+1Ch+var_4], esi
.text:004105F7                 mov     esi, [esp+1Ch+arg_0]
.text:004105FB                 mov     [esp+1Ch+var_8], ebx
.text:004105FF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00410602                 call    sub_40FB30
.text:00410607                 test    eax, eax
.text:00410609                 mov     ebx, eax
.text:0041060B                 jz      short loc_410620
.text:0041060D                 cmp     byte ptr [eax], 0
.text:00410610                 jz      short loc_410620
.text:00410612                 test    esi, esi
.text:00410614                 jz      short loc_410620
.text:00410616                 cmp     byte ptr [esi], 0
.text:00410619                 jnz     short loc_410646
.text:0041061B                 nop
.text:0041061C                 lea     esi, [esi+0]
.text:00410620
.text:00410620 loc_410620:                             ; CODE XREF: sub_410550+BB↑j
.text:00410620                                         ; sub_410550+C0↑j ...
.text:00410620                 call    _errno
.text:00410625                 mov     dword ptr [eax], 2
.text:0041062B                 mov     esi, 0FFFFFFFFh
.text:00410630
.text:00410630 loc_410630:                             ; CODE XREF: sub_410550+108↓j
.text:00410630                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00410633                 call    free
.text:00410638                 mov     eax, esi
.text:0041063A                 mov     ebx, [esp+1Ch+var_8]
.text:0041063E                 mov     esi, [esp+1Ch+var_4]
.text:00410642                 add     esp, 1Ch
.text:00410645                 retn
.text:00410646 ; ---------------------------------------------------------------------------
.text:00410646
.text:00410646 loc_410646:                             ; CODE XREF: sub_410550+C9↑j
.text:00410646                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00410649                 mov     edx, [esp+1Ch+arg_4]
.text:0041064D                 mov     [esp+1Ch+var_18], edx
.text:00410651                 call    near ptr loc_40FFAB+5
.text:00410656                 mov     esi, eax
.text:00410658                 jmp     short loc_410630
.text:00410658 ; ---------------------------------------------------------------------------
.text:0041065A                 align 10h
.text:00410660
.text:00410660 loc_410660:                             ; CODE XREF: sub_410550+5F↑j
.text:00410660                 push    ebp
.text:00410661                 push    edi
.text:00410662                 push    esi
.text:00410663                 push    ebx
.text:00410664                 sub     esp, 8Ch
.text:0041066A                 mov     ebp, [esp+9Ch+arg_0]
.text:00410671                 call    sub_4126C0
.text:00410676                 test    eax, eax
.text:00410678                 jz      short loc_410688
.text:0041067A                 call    sub_412610
.text:0041067F                 cmp     eax, 0Bh
.text:00410682                 jle     loc_4107B0
.text:00410688
.text:00410688 loc_410688:                             ; CODE XREF: sub_410550+128↑j
.text:00410688                 cld
.text:00410689                 xor     eax, eax
.text:0041068B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0041068F                 mov     ecx, 7
.text:00410694                 mov     edi, ebx
.text:00410696                 lea     esi, [esp+9Ch+var_4C]
.text:0041069A                 rep stosd
.text:0041069C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:004106A4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:004106AC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:004106B4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:004106BC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:004106C4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:004106CC                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:004106D3                 call    CreateFileA
.text:004106D8                 sub     esp, 1Ch
.text:004106DB                 mov     edi, eax
.text:004106DD                 cmp     eax, 0FFFFFFFFh
.text:004106E0                 jz      short loc_410755
.text:004106E2                 mov     [esp+9Ch+var_68], ebp
.text:004106E6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:004106EA                 mov     [esp+9Ch+var_5C], esi
.text:004106EE                 mov     [esp+9Ch+var_60], 7303h
.text:004106F6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:004106FE                 mov     [esp+9Ch+var_54], 1
.text:00410706                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0041070E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:00410712                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0041071A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0041071E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:00410726                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0041072A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00410732                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00410735                 call    DeviceIoControl
.text:0041073A                 sub     esp, 20h
.text:0041073D                 mov     esi, eax
.text:0041073F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00410742                 call    CloseHandle
.text:00410747                 sub     esp, 4
.text:0041074A                 test    esi, esi
.text:0041074C                 jz      short loc_410755
.text:0041074E                 test    byte ptr [esp+9Ch+var_54], 1
.text:00410753                 jz      short loc_410770
.text:00410755
.text:00410755 loc_410755:                             ; CODE XREF: sub_410550+190↑j
.text:00410755                                         ; sub_410550+1FC↑j
.text:00410755                 call    sub_40CB20
.text:0041075A                 mov     edi, eax
.text:0041075C                 call    _errno
.text:00410761                 mov     [eax], edi
.text:00410763                 xor     eax, eax
.text:00410765
.text:00410765 loc_410765:                             ; CODE XREF: sub_410550+25A↓j
.text:00410765                                         ; sub_410550+297↓j
.text:00410765                 add     esp, 8Ch
.text:0041076B                 pop     ebx
.text:0041076C                 pop     esi
.text:0041076D                 pop     edi
.text:0041076E                 pop     ebp
.text:0041076F                 retn
.text:00410770 ; ---------------------------------------------------------------------------
.text:00410770
.text:00410770 loc_410770:                             ; CODE XREF: sub_410550+203↑j
.text:00410770                 mov     edx, [esp+9Ch+var_48]
.text:00410774                 mov     eax, 1
.text:00410779                 mov     ebx, [esp+9Ch+arg_4]
.text:00410780                 mov     ebp, [esp+9Ch+arg_8]
.text:00410787                 mov     ecx, [esp+9Ch+arg_C]
.text:0041078E                 mov     [ebx], edx
.text:00410790                 mov     edi, [esp+9Ch+var_44]
.text:00410794                 mov     ebx, [esp+9Ch+arg_10]
.text:0041079B                 mov     [ebp+0], edi
.text:0041079E                 mov     esi, [esp+9Ch+var_40]
.text:004107A2                 mov     [ecx], esi
.text:004107A4                 mov     edx, [esp+9Ch+var_3C]
.text:004107A8                 mov     [ebx], edx
.text:004107AA                 jmp     short loc_410765
.text:004107AA ; ---------------------------------------------------------------------------
.text:004107AC                 align 10h
.text:004107B0
.text:004107B0 loc_4107B0:                             ; CODE XREF: sub_410550+132↑j
.text:004107B0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:004107B3                 mov     eax, [esp+9Ch+arg_C]
.text:004107BA                 mov     ecx, [esp+9Ch+arg_10]
.text:004107C1                 mov     edx, [esp+9Ch+arg_8]
.text:004107C8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:004107CC                 mov     eax, [esp+9Ch+arg_4]
.text:004107D3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:004107D7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:004107DB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:004107DF                 call    GetDiskFreeSpaceA
.text:004107E4                 sub     esp, 14h
.text:004107E7                 jmp     loc_410765
.text:004107E7 sub_410550      endp ; sp-analysis failed
.text:004107E7
.text:004107E7 ; ---------------------------------------------------------------------------
.text:004107EC                 align 10h
.text:004107F0
.text:004107F0 ; =============== S U B R O U T I N E =======================================
.text:004107F0
.text:004107F0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:004107F0
.text:004107F0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:004107F0 _win32_longpath proc near               ; CODE XREF: .text:00410FB4↓p
.text:004107F0
.text:004107F0 C               = dword ptr -278h
.text:004107F0 lpFindFileData  = dword ptr -274h
.text:004107F0 Destination     = byte ptr -268h
.text:004107F0 var_267         = byte ptr -267h
.text:004107F0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:004107F0 lpFileName      = dword ptr  8
.text:004107F0
.text:004107F0                 push    ebp
.text:004107F1                 xor     eax, eax
.text:004107F3                 push    edi
.text:004107F4                 push    esi
.text:004107F5                 push    ebx
.text:004107F6                 sub     esp, 26Ch
.text:004107FC                 mov     esi, [esp+278h+lpFileName]
.text:00410803                 lea     ebp, [esp+278h+Destination]
.text:00410807                 test    esi, esi
.text:00410809                 jz      loc_410967
.text:0041080F                 movsx   edx, byte ptr [esi]
.text:00410812                 mov     [esp+278h+C], edx ; C
.text:00410815                 call    isalpha
.text:0041081A                 test    eax, eax
.text:0041081C                 jz      short loc_41082F
.text:0041081E                 mov     eax, [esp+278h+lpFileName]
.text:00410825                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00410829                 jz      loc_410B6B
.text:0041082F
.text:0041082F loc_41082F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0041082F                 mov     edx, [esp+278h+lpFileName]
.text:00410836                 movzx   eax, byte ptr [edx]
.text:00410839                 cmp     al, 2Fh ; '/'
.text:0041083B                 jz      loc_410A4B
.text:00410841                 cmp     al, 5Ch ; '\'
.text:00410843                 jz      loc_410A4B
.text:00410849
.text:00410849 loc_410849:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00410849                                         ; _win32_longpath+2B1↓j ...
.text:00410849                 mov     [ebp+268h+Destination], 0
.text:0041084D                 movzx   ebx, byte ptr [esi]
.text:00410850                 test    bl, bl
.text:00410852                 jz      loc_410949
.text:00410858                 nop
.text:00410859                 lea     esi, [esi+0]
.text:00410860
.text:00410860 loc_410860:                             ; CODE XREF: _win32_longpath+153↓j
.text:00410860                 cmp     bl, 2Fh ; '/'
.text:00410863                 jz      loc_410A00
.text:00410869                 cmp     bl, 5Ch ; '\'
.text:0041086C                 jz      loc_410A00
.text:00410872
.text:00410872 loc_410872:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00410872                                         ; _win32_longpath+22C↓j ...
.text:00410872                 cmp     bl, 2Eh ; '.'
.text:00410875                 jz      loc_4109A0
.text:0041087B
.text:0041087B loc_41087B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0041087B                                         ; _win32_longpath+203↓j
.text:0041087B                 test    bl, bl
.text:0041087D                 jz      loc_410949
.text:00410883                 cmp     bl, 2Fh ; '/'
.text:00410886                 jz      short loc_4108A2
.text:00410888                 cmp     bl, 5Ch ; '\'
.text:0041088B                 jz      short loc_4108A2
.text:0041088D                 lea     esi, [esi+0]
.text:00410890
.text:00410890 loc_410890:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00410890                 inc     esi
.text:00410891                 movzx   ebx, byte ptr [esi]
.text:00410894                 test    bl, bl
.text:00410896                 jz      short loc_4108A2
.text:00410898                 cmp     bl, 2Fh ; '/'
.text:0041089B                 jz      short loc_4108A2
.text:0041089D                 cmp     bl, 5Ch ; '\'
.text:004108A0                 jnz     short loc_410890
.text:004108A2
.text:004108A2 loc_4108A2:                             ; CODE XREF: _win32_longpath+96↑j
.text:004108A2                                         ; _win32_longpath+9B↑j ...
.text:004108A2                 mov     byte ptr [esi], 0
.text:004108A5                 lea     edx, [esp+278h+FindFileData]
.text:004108AC                 mov     eax, [esp+278h+lpFileName]
.text:004108B3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:004108B7                 mov     [esp+278h+C], eax ; lpFileName
.text:004108BA                 call    FindFirstFileA
.text:004108BF                 mov     [esi], bl
.text:004108C1                 sub     esp, 8
.text:004108C4                 mov     edi, eax
.text:004108C6                 cmp     eax, 0FFFFFFFFh
.text:004108C9                 jz      loc_41098C
.text:004108CF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:004108D6                 mov     ecx, ebx
.text:004108D8                 nop
.text:004108D9                 lea     esi, [esi+0]
.text:004108E0
.text:004108E0 loc_4108E0:                             ; CODE XREF: _win32_longpath+105↓j
.text:004108E0                 mov     eax, [ebx]
.text:004108E2                 add     ebx, 4
.text:004108E5                 lea     edx, [eax-1010101h]
.text:004108EB                 not     eax
.text:004108ED                 and     edx, eax
.text:004108EF                 and     edx, 80808080h
.text:004108F5                 jz      short loc_4108E0
.text:004108F7                 test    edx, 8080h
.text:004108FD                 jnz     short loc_410905
.text:004108FF                 shr     edx, 10h
.text:00410902                 add     ebx, 2
.text:00410905
.text:00410905 loc_410905:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00410905                 add     dl, dl
.text:00410907                 sbb     ebx, 3
.text:0041090A                 sub     ebx, ecx
.text:0041090C                 lea     ecx, [esp+278h+Destination]
.text:00410910                 sub     ecx, ebp
.text:00410912                 add     ecx, 105h
.text:00410918                 cmp     ecx, ebx
.text:0041091A                 jle     short loc_410972
.text:0041091C                 mov     [esp+278h+C], ebp ; Destination
.text:0041091F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00410926                 add     ebp, ebx
.text:00410928                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0041092C                 call    strcpy
.text:00410931                 mov     [esp+278h+C], edi ; hFindFile
.text:00410934                 call    FindClose
.text:00410939                 sub     esp, 4
.text:0041093C
.text:0041093C loc_41093C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0041093C                 movzx   ecx, byte ptr [esi]
.text:0041093F                 test    cl, cl
.text:00410941                 mov     bl, cl
.text:00410943                 jnz     loc_410860
.text:00410949
.text:00410949 loc_410949:                             ; CODE XREF: _win32_longpath+62↑j
.text:00410949                                         ; _win32_longpath+8D↑j
.text:00410949                 mov     esi, [esp+278h+lpFileName]
.text:00410950                 lea     ebp, [esp+278h+Destination]
.text:00410954                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00410958                 mov     [esp+278h+C], esi ; Destination
.text:0041095B                 call    strcpy
.text:00410960                 mov     eax, [esp+278h+lpFileName]
.text:00410967
.text:00410967 loc_410967:                             ; CODE XREF: _win32_longpath+19↑j
.text:00410967                                         ; _win32_longpath+19A↓j
.text:00410967                 add     esp, 26Ch
.text:0041096D                 pop     ebx
.text:0041096E                 pop     esi
.text:0041096F                 pop     edi
.text:00410970                 pop     ebp
.text:00410971                 retn
.text:00410972 ; ---------------------------------------------------------------------------
.text:00410972
.text:00410972 loc_410972:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00410972                 mov     [esp+278h+C], edi ; hFindFile
.text:00410975                 call    FindClose
.text:0041097A                 sub     esp, 4
.text:0041097D                 call    _errno
.text:00410982                 mov     dword ptr [eax], 22h ; '"'
.text:00410988
.text:00410988 loc_410988:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00410988                 xor     eax, eax
.text:0041098A                 jmp     short loc_410967
.text:0041098C ; ---------------------------------------------------------------------------
.text:0041098C
.text:0041098C loc_41098C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0041098C                 call    _errno
.text:00410991                 mov     dword ptr [eax], 16h
.text:00410997                 jmp     short loc_410988
.text:00410997 ; ---------------------------------------------------------------------------
.text:00410999                 align 10h
.text:004109A0
.text:004109A0 loc_4109A0:                             ; CODE XREF: _win32_longpath+85↑j
.text:004109A0                 movzx   eax, byte ptr [esi+1]
.text:004109A4                 test    al, al
.text:004109A6                 jnz     short loc_4109D5
.text:004109A8
.text:004109A8 loc_4109A8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:004109A8                                         ; _win32_longpath+1EB↓j ...
.text:004109A8                 test    bl, bl
.text:004109AA                 jz      short loc_4109CC
.text:004109AC                 cmp     bl, 2Fh ; '/'
.text:004109AF                 jz      short loc_4109CC
.text:004109B1                 cmp     bl, 5Ch ; '\'
.text:004109B4                 jz      short loc_4109CC
.text:004109B6
.text:004109B6 loc_4109B6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:004109B6                 mov     [ebp+268h+Destination], bl
.text:004109B9                 inc     esi
.text:004109BA                 inc     ebp
.text:004109BB                 movzx   ebx, byte ptr [esi]
.text:004109BE                 test    bl, bl
.text:004109C0                 jz      short loc_4109CC
.text:004109C2                 cmp     bl, 2Fh ; '/'
.text:004109C5                 jz      short loc_4109CC
.text:004109C7                 cmp     bl, 5Ch ; '\'
.text:004109CA                 jnz     short loc_4109B6
.text:004109CC
.text:004109CC loc_4109CC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:004109CC                                         ; _win32_longpath+1BF↑j ...
.text:004109CC                 mov     [ebp+268h+Destination], 0
.text:004109D0                 jmp     loc_41093C
.text:004109D5 ; ---------------------------------------------------------------------------
.text:004109D5
.text:004109D5 loc_4109D5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:004109D5                 cmp     al, 2Fh ; '/'
.text:004109D7                 jz      short loc_4109A8
.text:004109D9                 cmp     al, 5Ch ; '\'
.text:004109DB                 jz      short loc_4109A8
.text:004109DD                 cmp     al, 2Eh ; '.'
.text:004109DF                 jnz     loc_41087B
.text:004109E5                 movzx   eax, byte ptr [esi+2]
.text:004109E9                 test    al, al
.text:004109EB                 jz      short loc_4109A8
.text:004109ED                 cmp     al, 2Fh ; '/'
.text:004109EF                 jz      short loc_4109A8
.text:004109F1                 cmp     al, 5Ch ; '\'
.text:004109F3                 jnz     loc_41087B
.text:004109F9                 jmp     short loc_4109A8
.text:004109F9 ; ---------------------------------------------------------------------------
.text:004109FB                 align 10h
.text:00410A00
.text:00410A00 loc_410A00:                             ; CODE XREF: _win32_longpath+73↑j
.text:00410A00                                         ; _win32_longpath+7C↑j
.text:00410A00                 mov     [ebp+268h+Destination], bl
.text:00410A03                 inc     esi
.text:00410A04                 inc     ebp
.text:00410A05                 mov     [ebp+268h+Destination], 0
.text:00410A09                 movzx   ebx, byte ptr [esi]
.text:00410A0C                 test    bl, bl
.text:00410A0E                 jz      loc_410872
.text:00410A14                 cmp     bl, 2Fh ; '/'
.text:00410A17                 jz      short loc_410A30
.text:00410A19                 cmp     bl, 5Ch ; '\'
.text:00410A1C                 jnz     loc_410872
.text:00410A22                 lea     esi, [esi+0]
.text:00410A29                 lea     edi, [edi+0]
.text:00410A30
.text:00410A30 loc_410A30:                             ; CODE XREF: _win32_longpath+227↑j
.text:00410A30                                         ; _win32_longpath+24F↓j ...
.text:00410A30                 inc     esi
.text:00410A31                 movzx   ebx, byte ptr [esi]
.text:00410A34                 test    bl, bl
.text:00410A36                 jz      loc_410872
.text:00410A3C                 cmp     bl, 2Fh ; '/'
.text:00410A3F                 jz      short loc_410A30
.text:00410A41                 cmp     bl, 5Ch ; '\'
.text:00410A44                 jz      short loc_410A30
.text:00410A46                 jmp     loc_410872
.text:00410A4B ; ---------------------------------------------------------------------------
.text:00410A4B
.text:00410A4B loc_410A4B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:00410A4B                                         ; _win32_longpath+53↑j
.text:00410A4B                 mov     edi, [esp+278h+lpFileName]
.text:00410A52                 movzx   edx, byte ptr [edi+1]
.text:00410A56                 cmp     dl, 2Fh ; '/'
.text:00410A59                 jz      short loc_410A64
.text:00410A5B                 cmp     dl, 5Ch ; '\'
.text:00410A5E                 jnz     loc_410849
.text:00410A64
.text:00410A64 loc_410A64:                             ; CODE XREF: _win32_longpath+269↑j
.text:00410A64                 mov     esi, [esp+278h+lpFileName]
.text:00410A6B                 mov     [ebp+268h+Destination], al
.text:00410A6E                 mov     ecx, [esp+278h+lpFileName]
.text:00410A75                 inc     ebp
.text:00410A76                 add     esi, 2
.text:00410A79                 movzx   ebx, byte ptr [ecx+1]
.text:00410A7D                 mov     [ebp+268h+Destination], bl
.text:00410A80                 inc     ebp
.text:00410A81                 movzx   eax, byte ptr [ecx+2]
.text:00410A85                 test    al, al
.text:00410A87                 jz      loc_410B63
.text:00410A8D                 cmp     al, 2Fh ; '/'
.text:00410A8F                 jz      loc_410B48
.text:00410A95                 cmp     al, 5Ch ; '\'
.text:00410A97                 mov     bl, al
.text:00410A99                 jz      loc_410B48
.text:00410A9F
.text:00410A9F loc_410A9F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:00410A9F                                         ; _win32_longpath+376↓j
.text:00410A9F                 test    bl, bl
.text:00410AA1                 jz      loc_410849
.text:00410AA7                 cmp     bl, 2Fh ; '/'
.text:00410AAA                 jz      short loc_410ACB
.text:00410AAC                 cmp     bl, 5Ch ; '\'
.text:00410AAF                 jz      short loc_410ACB
.text:00410AB1
.text:00410AB1 loc_410AB1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00410AB1                 mov     [ebp+268h+Destination], bl
.text:00410AB4                 inc     esi
.text:00410AB5                 inc     ebp
.text:00410AB6                 movzx   ebx, byte ptr [esi]
.text:00410AB9                 test    bl, bl
.text:00410ABB                 jz      loc_410849
.text:00410AC1                 cmp     bl, 2Fh ; '/'
.text:00410AC4                 jz      short loc_410ACB
.text:00410AC6                 cmp     bl, 5Ch ; '\'
.text:00410AC9                 jnz     short loc_410AB1
.text:00410ACB
.text:00410ACB loc_410ACB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:00410ACB                                         ; _win32_longpath+2BF↑j ...
.text:00410ACB                 test    bl, bl
.text:00410ACD                 jz      loc_410849
.text:00410AD3                 mov     [ebp+268h+Destination], bl
.text:00410AD6                 inc     esi
.text:00410AD7                 inc     ebp
.text:00410AD8                 movzx   ebx, byte ptr [esi]
.text:00410ADB                 test    bl, bl
.text:00410ADD                 jz      loc_410849
.text:00410AE3                 cmp     bl, 2Fh ; '/'
.text:00410AE6                 jz      short loc_410B30
.text:00410AE8                 cmp     bl, 5Ch ; '\'
.text:00410AEB                 jz      short loc_410B30
.text:00410AED
.text:00410AED loc_410AED:                             ; CODE XREF: _win32_longpath+356↓j
.text:00410AED                 test    bl, bl
.text:00410AEF                 jz      loc_410849
.text:00410AF5                 cmp     bl, 2Fh ; '/'
.text:00410AF8                 jz      loc_410849
.text:00410AFE                 cmp     bl, 5Ch ; '\'
.text:00410B01                 jz      loc_410849
.text:00410B07
.text:00410B07 loc_410B07:                             ; CODE XREF: _win32_longpath+333↓j
.text:00410B07                 mov     [ebp+268h+Destination], bl
.text:00410B0A                 inc     esi
.text:00410B0B                 inc     ebp
.text:00410B0C                 movzx   ebx, byte ptr [esi]
.text:00410B0F                 test    bl, bl
.text:00410B11                 jz      loc_410849
.text:00410B17                 cmp     bl, 2Fh ; '/'
.text:00410B1A                 jz      loc_410849
.text:00410B20                 cmp     bl, 5Ch ; '\'
.text:00410B23                 jnz     short loc_410B07
.text:00410B25                 jmp     loc_410849
.text:00410B25 ; ---------------------------------------------------------------------------
.text:00410B2A                 align 10h
.text:00410B30
.text:00410B30 loc_410B30:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00410B30                                         ; _win32_longpath+2FB↑j ...
.text:00410B30                 inc     esi
.text:00410B31                 movzx   ebx, byte ptr [esi]
.text:00410B34                 test    bl, bl
.text:00410B36                 jz      loc_410849
.text:00410B3C                 cmp     bl, 2Fh ; '/'
.text:00410B3F                 jz      short loc_410B30
.text:00410B41                 cmp     bl, 5Ch ; '\'
.text:00410B44                 jz      short loc_410B30
.text:00410B46                 jmp     short loc_410AED
.text:00410B48 ; ---------------------------------------------------------------------------
.text:00410B48
.text:00410B48 loc_410B48:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00410B48                                         ; _win32_longpath+2A9↑j ...
.text:00410B48                 inc     esi
.text:00410B49                 movzx   ebx, byte ptr [esi]
.text:00410B4C                 test    bl, bl
.text:00410B4E                 jz      loc_410849
.text:00410B54                 cmp     bl, 2Fh ; '/'
.text:00410B57                 jz      short loc_410B48
.text:00410B59                 cmp     bl, 5Ch ; '\'
.text:00410B5C                 jz      short loc_410B48
.text:00410B5E                 jmp     loc_410A9F
.text:00410B63 ; ---------------------------------------------------------------------------
.text:00410B63
.text:00410B63 loc_410B63:                             ; CODE XREF: _win32_longpath+297↑j
.text:00410B63                 movzx   ebx, byte ptr [esi]
.text:00410B66                 jmp     loc_410A9F
.text:00410B6B ; ---------------------------------------------------------------------------
.text:00410B6B
.text:00410B6B loc_410B6B:                             ; CODE XREF: _win32_longpath+39↑j
.text:00410B6B                 movzx   ecx, byte ptr [eax]
.text:00410B6E                 mov     esi, eax
.text:00410B70                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00410B75                 add     esi, 2
.text:00410B78                 lea     ebp, [esp+12h]
.text:00410B7C                 mov     [esp+278h+Destination], cl
.text:00410B80                 jmp     loc_410849
.text:00410B80 _win32_longpath endp
.text:00410B80
.text:00410B80 ; ---------------------------------------------------------------------------
.text:00410B85                 align 10h
.text:00410B90                 sub     esp, 0Ch
.text:00410B93                 mov     edx, [esp+10h]
.text:00410B97                 mov     dword ptr [esp+4], 0
.text:00410B9F                 mov     [esp], edx
.text:00410BA2                 call    sub_40CB40
.text:00410BA7                 inc     eax
.text:00410BA8                 setnz   dl
.text:00410BAB                 add     esp, 0Ch
.text:00410BAE                 movzx   eax, dl
.text:00410BB1                 retn
.text:00410BB1 ; ---------------------------------------------------------------------------
.text:00410BB2                 align 10h
.text:00410BC0
.text:00410BC0 ; =============== S U B R O U T I N E =======================================
.text:00410BC0
.text:00410BC0
.text:00410BC0 sub_410BC0      proc near               ; CODE XREF: sub_40F880+B4↑p
.text:00410BC0                                         ; sub_40F9F0+AA↑p
.text:00410BC0
.text:00410BC0 arg_0           = dword ptr  4
.text:00410BC0
.text:00410BC0                 mov     ecx, [esp+arg_0]
.text:00410BC4                 mov     edx, ecx
.text:00410BC6                 movzx   eax, byte ptr [ecx]
.text:00410BC9                 test    al, al
.text:00410BCB                 jz      short loc_410BDC
.text:00410BCD                 lea     esi, [esi+0]
.text:00410BD0
.text:00410BD0 loc_410BD0:                             ; CODE XREF: sub_410BC0+1A↓j
.text:00410BD0                 cmp     al, 5Ch ; '\'
.text:00410BD2                 jz      short loc_410BE0
.text:00410BD4
.text:00410BD4 loc_410BD4:                             ; CODE XREF: sub_410BC0+23↓j
.text:00410BD4                 inc     edx
.text:00410BD5                 movzx   eax, byte ptr [edx]
.text:00410BD8                 test    al, al
.text:00410BDA                 jnz     short loc_410BD0
.text:00410BDC
.text:00410BDC loc_410BDC:                             ; CODE XREF: sub_410BC0+B↑j
.text:00410BDC                 mov     eax, ecx
.text:00410BDE                 retn
.text:00410BDE ; ---------------------------------------------------------------------------
.text:00410BDF                 align 10h
.text:00410BE0
.text:00410BE0 loc_410BE0:                             ; CODE XREF: sub_410BC0+12↑j
.text:00410BE0                 mov     byte ptr [edx], 2Fh ; '/'
.text:00410BE3                 jmp     short loc_410BD4
.text:00410BE3 sub_410BC0      endp
.text:00410BE3
.text:00410BE3 ; ---------------------------------------------------------------------------
.text:00410BE5                 align 10h
.text:00410BF0                 push    ebx
.text:00410BF1                 sub     esp, 8
.text:00410BF4                 mov     ebx, [esp+14h]
.text:00410BF8                 mov     edx, [esp+10h]
.text:00410BFC                 mov     [esp], ebx
.text:00410BFF                 mov     [esp+4], edx
.text:00410C03                 call    strcpy
.text:00410C08                 movzx   eax, byte ptr [ebx]
.text:00410C0B                 mov     edx, ebx
.text:00410C0D                 test    al, al
.text:00410C0F                 jz      short loc_410C2C
.text:00410C11                 jmp     short loc_410C20
.text:00410C11 ; ---------------------------------------------------------------------------
.text:00410C13                 align 10h
.text:00410C20
.text:00410C20 loc_410C20:                             ; CODE XREF: .text:00410C11↑j
.text:00410C20                                         ; .text:00410C2A↓j
.text:00410C20                 cmp     al, 5Ch ; '\'
.text:00410C22                 jz      short loc_410C33
.text:00410C24
.text:00410C24 loc_410C24:                             ; CODE XREF: .text:00410C36↓j
.text:00410C24                 inc     edx
.text:00410C25                 movzx   eax, byte ptr [edx]
.text:00410C28                 test    al, al
.text:00410C2A                 jnz     short loc_410C20
.text:00410C2C
.text:00410C2C loc_410C2C:                             ; CODE XREF: .text:00410C0F↑j
.text:00410C2C                 add     esp, 8
.text:00410C2F                 xor     eax, eax
.text:00410C31                 pop     ebx
.text:00410C32                 retn
.text:00410C33 ; ---------------------------------------------------------------------------
.text:00410C33
.text:00410C33 loc_410C33:                             ; CODE XREF: .text:00410C22↑j
.text:00410C33                 mov     byte ptr [edx], 2Fh ; '/'
.text:00410C36                 jmp     short loc_410C24
.text:00410C36 ; ---------------------------------------------------------------------------
.text:00410C38                 align 10h
.text:00410C40
.text:00410C40 ; =============== S U B R O U T I N E =======================================
.text:00410C40
.text:00410C40
.text:00410C40 sub_410C40      proc near               ; CODE XREF: sub_40E3D0+16↑p
.text:00410C40                                         ; sub_40E8D0+1F↑p ...
.text:00410C40
.text:00410C40 arg_0           = dword ptr  4
.text:00410C40
.text:00410C40                 mov     ecx, [esp+arg_0]
.text:00410C44                 mov     edx, ecx
.text:00410C46                 movzx   eax, byte ptr [ecx]
.text:00410C49                 test    al, al
.text:00410C4B                 jz      short loc_410C5C
.text:00410C4D                 lea     esi, [esi+0]
.text:00410C50
.text:00410C50 loc_410C50:                             ; CODE XREF: sub_410C40+1A↓j
.text:00410C50                 cmp     al, 2Fh ; '/'
.text:00410C52                 jz      short loc_410C60
.text:00410C54
.text:00410C54 loc_410C54:                             ; CODE XREF: sub_410C40+23↓j
.text:00410C54                 inc     edx
.text:00410C55                 movzx   eax, byte ptr [edx]
.text:00410C58                 test    al, al
.text:00410C5A                 jnz     short loc_410C50
.text:00410C5C
.text:00410C5C loc_410C5C:                             ; CODE XREF: sub_410C40+B↑j
.text:00410C5C                 mov     eax, ecx
.text:00410C5E                 retn
.text:00410C5E ; ---------------------------------------------------------------------------
.text:00410C5F                 align 10h
.text:00410C60
.text:00410C60 loc_410C60:                             ; CODE XREF: sub_410C40+12↑j
.text:00410C60                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410C63                 jmp     short loc_410C54
.text:00410C63 sub_410C40      endp
.text:00410C63
.text:00410C63 ; ---------------------------------------------------------------------------
.text:00410C65                 align 10h
.text:00410C70                 push    ebx
.text:00410C71                 sub     esp, 8
.text:00410C74                 mov     ebx, [esp+14h]
.text:00410C78                 mov     edx, [esp+10h]
.text:00410C7C                 mov     [esp], ebx
.text:00410C7F                 mov     [esp+4], edx
.text:00410C83                 call    strcpy
.text:00410C88                 movzx   eax, byte ptr [ebx]
.text:00410C8B                 mov     edx, ebx
.text:00410C8D                 test    al, al
.text:00410C8F                 jz      short loc_410CAC
.text:00410C91                 jmp     short loc_410CA0
.text:00410C91 ; ---------------------------------------------------------------------------
.text:00410C93                 align 10h
.text:00410CA0
.text:00410CA0 loc_410CA0:                             ; CODE XREF: .text:00410C91↑j
.text:00410CA0                                         ; .text:00410CAA↓j
.text:00410CA0                 cmp     al, 2Fh ; '/'
.text:00410CA2                 jz      short loc_410CB3
.text:00410CA4
.text:00410CA4 loc_410CA4:                             ; CODE XREF: .text:00410CB6↓j
.text:00410CA4                 inc     edx
.text:00410CA5                 movzx   eax, byte ptr [edx]
.text:00410CA8                 test    al, al
.text:00410CAA                 jnz     short loc_410CA0
.text:00410CAC
.text:00410CAC loc_410CAC:                             ; CODE XREF: .text:00410C8F↑j
.text:00410CAC                 add     esp, 8
.text:00410CAF                 xor     eax, eax
.text:00410CB1                 pop     ebx
.text:00410CB2                 retn
.text:00410CB3 ; ---------------------------------------------------------------------------
.text:00410CB3
.text:00410CB3 loc_410CB3:                             ; CODE XREF: .text:00410CA2↑j
.text:00410CB3                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410CB6                 jmp     short loc_410CA4
.text:00410CB6 ; ---------------------------------------------------------------------------
.text:00410CB8                 align 10h
.text:00410CC0                 push    ebx
.text:00410CC1                 sub     esp, 8
.text:00410CC4                 mov     ebx, [esp+14h]
.text:00410CC8                 mov     edx, [esp+10h]
.text:00410CCC                 mov     [esp+4], ebx
.text:00410CD0                 mov     [esp], edx
.text:00410CD3                 call    sub_40F9A0
.text:00410CD8                 movzx   eax, byte ptr [ebx]
.text:00410CDB                 mov     edx, ebx
.text:00410CDD                 test    al, al
.text:00410CDF                 jz      short loc_410CFC
.text:00410CE1                 jmp     short loc_410CF0
.text:00410CE1 ; ---------------------------------------------------------------------------
.text:00410CE3                 align 10h
.text:00410CF0
.text:00410CF0 loc_410CF0:                             ; CODE XREF: .text:00410CE1↑j
.text:00410CF0                                         ; .text:00410CFA↓j
.text:00410CF0                 cmp     al, 2Fh ; '/'
.text:00410CF2                 jz      short loc_410D03
.text:00410CF4
.text:00410CF4 loc_410CF4:                             ; CODE XREF: .text:00410D06↓j
.text:00410CF4                 inc     edx
.text:00410CF5                 movzx   eax, byte ptr [edx]
.text:00410CF8                 test    al, al
.text:00410CFA                 jnz     short loc_410CF0
.text:00410CFC
.text:00410CFC loc_410CFC:                             ; CODE XREF: .text:00410CDF↑j
.text:00410CFC                 add     esp, 8
.text:00410CFF                 xor     eax, eax
.text:00410D01                 pop     ebx
.text:00410D02                 retn
.text:00410D03 ; ---------------------------------------------------------------------------
.text:00410D03
.text:00410D03 loc_410D03:                             ; CODE XREF: .text:00410CF2↑j
.text:00410D03                 mov     byte ptr [edx], 5Ch ; '\'
.text:00410D06                 jmp     short loc_410CF4
.text:00410D06 ; ---------------------------------------------------------------------------
.text:00410D08                 align 10h
.text:00410D10                 push    ebx
.text:00410D11                 sub     esp, 8
.text:00410D14                 mov     ebx, [esp+14h]
.text:00410D18                 mov     edx, [esp+10h]
.text:00410D1C                 mov     [esp], ebx
.text:00410D1F                 mov     [esp+4], edx
.text:00410D23                 call    sub_40F9A0
.text:00410D28                 movzx   eax, byte ptr [ebx]
.text:00410D2B                 mov     edx, ebx
.text:00410D2D                 test    al, al
.text:00410D2F                 jz      short loc_410D4C
.text:00410D31                 jmp     short loc_410D40
.text:00410D31 ; ---------------------------------------------------------------------------
.text:00410D33                 align 10h
.text:00410D40
.text:00410D40 loc_410D40:                             ; CODE XREF: .text:00410D31↑j
.text:00410D40                                         ; .text:00410D4A↓j
.text:00410D40                 cmp     al, 5Ch ; '\'
.text:00410D42                 jz      short loc_410D51
.text:00410D44
.text:00410D44 loc_410D44:                             ; CODE XREF: .text:00410D54↓j
.text:00410D44                 inc     edx
.text:00410D45                 movzx   eax, byte ptr [edx]
.text:00410D48                 test    al, al
.text:00410D4A                 jnz     short loc_410D40
.text:00410D4C
.text:00410D4C loc_410D4C:                             ; CODE XREF: .text:00410D2F↑j
.text:00410D4C                 add     esp, 8
.text:00410D4F                 pop     ebx
.text:00410D50                 retn
.text:00410D51 ; ---------------------------------------------------------------------------
.text:00410D51
.text:00410D51 loc_410D51:                             ; CODE XREF: .text:00410D42↑j
.text:00410D51                 mov     byte ptr [edx], 2Fh ; '/'
.text:00410D54                 jmp     short loc_410D44
.text:00410D54 ; ---------------------------------------------------------------------------
.text:00410D56                 align 10h
.text:00410D60
.text:00410D60 ; =============== S U B R O U T I N E =======================================
.text:00410D60
.text:00410D60
.text:00410D60 ; int __cdecl sub_410D60(LPSTR)
.text:00410D60 sub_410D60      proc near               ; CODE XREF: .text:00410DEE↓p
.text:00410D60                                         ; .text:00410E2E↓p ...
.text:00410D60
.text:00410D60 hModule         = dword ptr -1Ch
.text:00410D60 lpFilename      = dword ptr -18h
.text:00410D60 nSize           = dword ptr -14h
.text:00410D60 arg_0           = dword ptr  4
.text:00410D60
.text:00410D60                 push    esi
.text:00410D61                 push    ebx
.text:00410D62                 sub     esp, 14h
.text:00410D65                 mov     esi, [esp+1Ch+arg_0]
.text:00410D69                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00410D71                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00410D78                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:00410D7C                 call    GetModuleFileNameA
.text:00410D81                 sub     esp, 0Ch
.text:00410D84                 test    eax, eax
.text:00410D86                 jz      short loc_410DC8
.text:00410D88                 cmp     eax, 104h
.text:00410D8D                 jg      short loc_410DB9
.text:00410D8F
.text:00410D8F loc_410D8F:                             ; CODE XREF: sub_410D60+66↓j
.text:00410D8F                                         ; sub_410D60+78↓j
.text:00410D8F                 movzx   eax, byte ptr [esi]
.text:00410D92                 mov     edx, esi
.text:00410D94                 test    al, al
.text:00410D96                 jz      short loc_410DAC
.text:00410D98                 nop
.text:00410D99                 lea     esi, [esi+0]
.text:00410DA0
.text:00410DA0 loc_410DA0:                             ; CODE XREF: sub_410D60+4A↓j
.text:00410DA0                 cmp     al, 5Ch ; '\'
.text:00410DA2                 jz      short loc_410DB4
.text:00410DA4
.text:00410DA4 loc_410DA4:                             ; CODE XREF: sub_410D60+57↓j
.text:00410DA4                 inc     edx
.text:00410DA5                 movzx   eax, byte ptr [edx]
.text:00410DA8                 test    al, al
.text:00410DAA                 jnz     short loc_410DA0
.text:00410DAC
.text:00410DAC loc_410DAC:                             ; CODE XREF: sub_410D60+36↑j
.text:00410DAC                 add     esp, 14h
.text:00410DAF                 mov     eax, esi
.text:00410DB1                 pop     ebx
.text:00410DB2                 pop     esi
.text:00410DB3                 retn
.text:00410DB4 ; ---------------------------------------------------------------------------
.text:00410DB4
.text:00410DB4 loc_410DB4:                             ; CODE XREF: sub_410D60+42↑j
.text:00410DB4                 mov     byte ptr [edx], 2Fh ; '/'
.text:00410DB7                 jmp     short loc_410DA4
.text:00410DB9 ; ---------------------------------------------------------------------------
.text:00410DB9
.text:00410DB9 loc_410DB9:                             ; CODE XREF: sub_410D60+2D↑j
.text:00410DB9                 call    _errno
.text:00410DBE                 mov     dword ptr [eax], 26h ; '&'
.text:00410DC4                 xor     esi, esi
.text:00410DC6                 jmp     short loc_410D8F
.text:00410DC8 ; ---------------------------------------------------------------------------
.text:00410DC8
.text:00410DC8 loc_410DC8:                             ; CODE XREF: sub_410D60+26↑j
.text:00410DC8                 call    sub_40CB20
.text:00410DCD                 mov     ebx, eax
.text:00410DCF                 xor     esi, esi
.text:00410DD1                 call    _errno
.text:00410DD6                 mov     [eax], ebx
.text:00410DD8                 jmp     short loc_410D8F
.text:00410DD8 sub_410D60      endp
.text:00410DD8
.text:00410DD8 ; ---------------------------------------------------------------------------
.text:00410DDA                 align 10h
.text:00410DE0                 sub     esp, 0Ch
.text:00410DE3                 mov     [esp+8], ebx
.text:00410DE7                 mov     ebx, [esp+10h]
.text:00410DEB                 mov     [esp], ebx
.text:00410DEE                 call    sub_410D60
.text:00410DF3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00410DFB                 mov     [esp], ebx
.text:00410DFE                 call    strrchr
.text:00410E03                 test    eax, eax
.text:00410E05                 jz      short loc_410E0A
.text:00410E07                 lea     ebx, [eax+1]
.text:00410E0A
.text:00410E0A loc_410E0A:                             ; CODE XREF: .text:00410E05↑j
.text:00410E0A                 mov     eax, ebx
.text:00410E0C                 mov     ebx, [esp+8]
.text:00410E10                 add     esp, 0Ch
.text:00410E13                 retn
.text:00410E13 ; ---------------------------------------------------------------------------
.text:00410E14                 align 10h
.text:00410E20                 sub     esp, 0Ch
.text:00410E23                 mov     [esp+8], ebx
.text:00410E27                 mov     ebx, [esp+10h]
.text:00410E2B                 mov     [esp], ebx
.text:00410E2E                 call    sub_410D60
.text:00410E33                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00410E3B                 mov     [esp], ebx
.text:00410E3E                 call    strrchr
.text:00410E43                 test    eax, eax
.text:00410E45                 jz      short loc_410E4A
.text:00410E47                 mov     byte ptr [eax], 0
.text:00410E4A
.text:00410E4A loc_410E4A:                             ; CODE XREF: .text:00410E45↑j
.text:00410E4A                 mov     eax, ebx
.text:00410E4C                 mov     ebx, [esp+8]
.text:00410E50                 add     esp, 0Ch
.text:00410E53                 retn
.text:00410E53 ; ---------------------------------------------------------------------------
.text:00410E54                 align 10h
.text:00410E60                 sub     esp, 0Ch
.text:00410E63                 mov     [esp+8], ebx
.text:00410E67                 mov     ebx, [esp+10h]
.text:00410E6B                 mov     [esp], ebx
.text:00410E6E                 call    sub_410D60
.text:00410E73                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00410E7B                 mov     [esp], ebx
.text:00410E7E                 call    strrchr
.text:00410E83                 test    eax, eax
.text:00410E85                 jz      short loc_410E8A
.text:00410E87                 mov     byte ptr [eax], 0
.text:00410E8A
.text:00410E8A loc_410E8A:                             ; CODE XREF: .text:00410E85↑j
.text:00410E8A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00410E92                 mov     [esp], ebx
.text:00410E95                 call    strrchr
.text:00410E9A                 test    eax, eax
.text:00410E9C                 jz      short loc_410EA1
.text:00410E9E                 mov     byte ptr [eax], 0
.text:00410EA1
.text:00410EA1 loc_410EA1:                             ; CODE XREF: .text:00410E9C↑j
.text:00410EA1                 mov     eax, ebx
.text:00410EA3                 mov     ebx, [esp+8]
.text:00410EA7                 add     esp, 0Ch
.text:00410EAA                 retn
.text:00410EAA ; ---------------------------------------------------------------------------
.text:00410EAB                 align 10h
.text:00410EB0                 sub     esp, 1Ch
.text:00410EB3                 mov     edx, [esp+20h]
.text:00410EB7                 mov     [esp+10h], ebx
.text:00410EBB                 xor     ebx, ebx
.text:00410EBD                 mov     [esp+14h], esi
.text:00410EC1                 mov     [esp+18h], edi
.text:00410EC5                 mov     [esp], edx
.text:00410EC8                 call    sub_40F9D0
.text:00410ECD                 mov     edx, [esp+24h]
.text:00410ED1                 mov     edi, eax
.text:00410ED3                 mov     [esp], edx
.text:00410ED6                 call    sub_40F9D0
.text:00410EDB                 mov     [esp+4], eax
.text:00410EDF                 mov     esi, eax
.text:00410EE1                 mov     [esp], edi
.text:00410EE4                 call    _stricmp_0
.text:00410EE9                 mov     [esp], edi
.text:00410EEC                 test    eax, eax
.text:00410EEE                 setz    bl
.text:00410EF1                 call    free
.text:00410EF6                 mov     [esp], esi
.text:00410EF9                 call    free
.text:00410EFE                 mov     eax, ebx
.text:00410F00                 mov     esi, [esp+14h]
.text:00410F04                 mov     ebx, [esp+10h]
.text:00410F08                 mov     edi, [esp+18h]
.text:00410F0C                 add     esp, 1Ch
.text:00410F0F                 retn
.text:00410F10 ; ---------------------------------------------------------------------------
.text:00410F10                 xor     eax, eax
.text:00410F12                 retn
.text:00410F12 ; ---------------------------------------------------------------------------
.text:00410F13 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00410F47↓o
.text:00410F20 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00410F56↓o
.text:00410F30 ; ---------------------------------------------------------------------------
.text:00410F30                 sub     esp, 1Ch
.text:00410F33                 mov     [esp+10h], ebx
.text:00410F37                 mov     ebx, [esp+20h]
.text:00410F3B                 mov     [esp+18h], edi
.text:00410F3F                 mov     edi, [esp+24h]
.text:00410F43                 mov     [esp+14h], esi
.text:00410F47                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:00410F4E                 call    GetModuleHandleA
.text:00410F53                 sub     esp, 4
.text:00410F56                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:00410F5E                 mov     [esp], eax
.text:00410F61                 call    GetProcAddress
.text:00410F66                 sub     esp, 8
.text:00410F69                 test    eax, eax
.text:00410F6B                 jz      short loc_410F83
.text:00410F6D                 mov     dword ptr [esp+8], 104h
.text:00410F75                 mov     [esp+4], ebx
.text:00410F79                 mov     [esp], edi
.text:00410F7C                 call    eax
.text:00410F7E                 sub     esp, 0Ch
.text:00410F81                 mov     esi, eax
.text:00410F83
.text:00410F83 loc_410F83:                             ; CODE XREF: .text:00410F6B↑j
.text:00410F83                 test    esi, esi
.text:00410F85                 jz      short loc_410FA0
.text:00410F87
.text:00410F87 loc_410F87:                             ; CODE XREF: .text:00410FBB↓j
.text:00410F87                 mov     eax, ebx
.text:00410F89                 mov     esi, [esp+14h]
.text:00410F8D                 mov     ebx, [esp+10h]
.text:00410F91                 mov     edi, [esp+18h]
.text:00410F95                 add     esp, 1Ch
.text:00410F98                 retn
.text:00410F98 ; ---------------------------------------------------------------------------
.text:00410F99                 align 10h
.text:00410FA0
.text:00410FA0 loc_410FA0:                             ; CODE XREF: .text:00410F85↑j
.text:00410FA0                 call    sub_4126C0
.text:00410FA5                 mov     [esp], ebx
.text:00410FA8                 mov     [esp+4], edi
.text:00410FAC                 call    strcpy
.text:00410FB1                 mov     [esp], ebx
.text:00410FB4                 call    _win32_longpath
.text:00410FB9                 mov     ebx, eax
.text:00410FBB                 jmp     short loc_410F87
.text:00410FBB ; ---------------------------------------------------------------------------
.text:00410FBD                 align 10h
.text:00410FC0                 sub     esp, 1Ch
.text:00410FC3                 mov     [esp+18h], edi
.text:00410FC7                 mov     edi, [esp+20h]
.text:00410FCB                 mov     [esp+10h], ebx
.text:00410FCF                 mov     [esp+14h], esi
.text:00410FD3                 mov     dword ptr [esp+8], 0
.text:00410FDB                 mov     dword ptr [esp+4], 0
.text:00410FE3                 mov     [esp], edi
.text:00410FE6                 call    GetShortPathNameA
.text:00410FEB                 sub     esp, 0Ch
.text:00410FEE                 mov     ebx, eax
.text:00410FF0                 test    eax, eax
.text:00410FF2                 jz      short loc_411040
.text:00410FF4                 lea     edx, [eax+1]
.text:00410FF7                 mov     [esp], edx
.text:00410FFA                 call    malloc
.text:00410FFF                 test    eax, eax
.text:00411001                 mov     esi, eax
.text:00411003                 jz      short loc_411040
.text:00411005                 mov     [esp+8], ebx
.text:00411009                 mov     [esp+4], eax
.text:0041100D                 mov     [esp], edi
.text:00411010                 call    GetShortPathNameA
.text:00411015                 sub     esp, 0Ch
.text:00411018                 mov     edx, esi
.text:0041101A                 test    eax, eax
.text:0041101C                 jz      short loc_411032
.text:0041101E                 mov     esi, esi
.text:00411020
.text:00411020 loc_411020:                             ; CODE XREF: .text:00411050↓j
.text:00411020                 mov     ebx, [esp+10h]
.text:00411024                 mov     eax, edx
.text:00411026                 mov     esi, [esp+14h]
.text:0041102A                 mov     edi, [esp+18h]
.text:0041102E                 add     esp, 1Ch
.text:00411031                 retn
.text:00411032 ; ---------------------------------------------------------------------------
.text:00411032
.text:00411032 loc_411032:                             ; CODE XREF: .text:0041101C↑j
.text:00411032                 mov     [esp], esi
.text:00411035                 call    free
.text:0041103A                 lea     esi, [esi+0]
.text:00411040
.text:00411040 loc_411040:                             ; CODE XREF: .text:00410FF2↑j
.text:00411040                                         ; .text:00411003↑j
.text:00411040                 call    sub_40CB20
.text:00411045                 mov     esi, eax
.text:00411047                 call    _errno
.text:0041104C                 mov     [eax], esi
.text:0041104E                 mov     edx, edi
.text:00411050                 jmp     short loc_411020
.text:00411050 ; ---------------------------------------------------------------------------
.text:00411052                 align 10h
.text:00411060 aNotset         db 'notset',0           ; DATA XREF: .data:off_416080↓o
.text:00411060                                         ; .data:off_416084↓o
.text:00411067 ; ---------------------------------------------------------------------------
.text:00411067
.text:00411067 loc_411067:                             ; DATA XREF: .text:loc_411105↓o
.text:00411067                 jb      short loc_4110E0
.text:00411069                 add     [eax], ah
.text:0041106B                 or      [eax], eax
.text:0041106D
.text:0041106D loc_41106D:                             ; DATA XREF: .text:00411158↓o
.text:0041106D                                         ; .text:004111BE↓o ...
.text:0041106D                 add     [eax], ah
.text:0041106F                 and     eax, 64252064h
.text:00411074                 and     [eax], al
.text:00411076                 lea     esi, [esi+0]
.text:00411079                 lea     edi, [edi+0]
.text:00411080                 push    ebp
.text:00411081                 push    edi
.text:00411082                 push    esi
.text:00411083                 push    ebx
.text:00411084                 sub     esp, 14Ch
.text:0041108A                 mov     edx, off_416080 ; "notset"
.text:00411090                 mov     edi, [esp+164h]
.text:00411097                 mov     ebp, [esp+168h]
.text:0041109E                 mov     [esp+4], edx
.text:004110A2                 mov     edx, off_416084 ; "notset"
.text:004110A8                 mov     [esp], edx
.text:004110AB                 call    strcmp
.text:004110B0                 test    eax, eax
.text:004110B2                 jz      loc_4114A0
.text:004110B8
.text:004110B8 loc_4110B8:                             ; CODE XREF: .text:004114EC↓j
.text:004110B8                 lea     ebx, [esp+20h]
.text:004110BC                 lea     esi, [esi+0]
.text:004110C0
.text:004110C0 loc_4110C0:                             ; CODE XREF: .text:004110F6↓j
.text:004110C0                 mov     [esp+4], ebx
.text:004110C4                 mov     ecx, off_416084 ; "notset"
.text:004110CA                 mov     [esp], ecx
.text:004110CD                 call    loc_4105F0
.text:004110D2                 test    eax, eax
.text:004110D4                 jns     short loc_411105
.text:004110D6                 mov     eax, off_416084 ; "notset"
.text:004110DB                 cmp     byte ptr [eax], 0
.text:004110DE                 jz      short loc_4110F8
.text:004110E0
.text:004110E0 loc_4110E0:                             ; CODE XREF: .text:loc_411067↑j
.text:004110E0                 mov     dword ptr [esp+4], 0
.text:004110E8                 mov     [esp], eax
.text:004110EB                 call    strchr
.text:004110F0                 inc     eax
.text:004110F1                 mov     off_416084, eax ; "notset"
.text:004110F6                 jmp     short loc_4110C0
.text:004110F8 ; ---------------------------------------------------------------------------
.text:004110F8
.text:004110F8 loc_4110F8:                             ; CODE XREF: .text:004110DE↑j
.text:004110F8                 xor     eax, eax
.text:004110FA
.text:004110FA loc_4110FA:                             ; CODE XREF: .text:004112BC↓j
.text:004110FA                 add     esp, 14Ch
.text:00411100                 pop     ebx
.text:00411101                 pop     esi
.text:00411102                 pop     edi
.text:00411103                 pop     ebp
.text:00411104                 retn
.text:00411105 ; ---------------------------------------------------------------------------
.text:00411105
.text:00411105 loc_411105:                             ; CODE XREF: .text:004110D4↑j
.text:00411105                 mov     dword ptr [edi+0Ch], offset loc_411067
.text:0041110C                 lea     ecx, [esp+0D6h]
.text:00411113                 lea     edx, [esp+6Ch]
.text:00411117                 mov     [edi+4], ecx
.text:0041111A                 lea     ebx, [esp+7Ch]
.text:0041111E                 mov     [edi+8], edx
.text:00411121                 mov     [edi], ebx
.text:00411123                 mov     [esp], ebp
.text:00411126                 mov     [esp+4], edi
.text:0041112A                 call    ___addmntentstr
.text:0041112F                 mov     [esp], ebp
.text:00411132                 mov     dword ptr [esp+4], 41106Ah
.text:0041113A                 call    strspn
.text:0041113F                 mov     dword ptr [esp+4], 0
.text:00411147                 mov     ebx, off_416084 ; "notset"
.text:0041114D                 lea     esi, [eax+ebp]
.text:00411150                 mov     [esp+1Ch], esi
.text:00411154                 lea     ebp, [esp+1Ch]
.text:00411158                 mov     esi, offset loc_41106D
.text:0041115D                 mov     [esp], ebx
.text:00411160                 call    strchr
.text:00411165                 mov     dword ptr [esp+4], 41106Ah
.text:0041116D                 inc     eax
.text:0041116E                 mov     off_416084, eax ; "notset"
.text:00411173                 mov     [esp], ebp
.text:00411176                 call    sub_4129E0
.text:0041117B                 test    eax, eax
.text:0041117D                 mov     ebx, eax
.text:0041117F                 jz      short loc_4111A8
.text:00411181                 mov     edx, eax
.text:00411183                 mov     ecx, eax
.text:00411185                 lea     esi, [esi+0]
.text:00411189                 lea     edi, [edi+0]
.text:00411190
.text:00411190 loc_411190:                             ; CODE XREF: .text:004111A6↓j
.text:00411190                 movzx   eax, byte ptr [edx]
.text:00411193                 cmp     al, 5Ch ; '\'
.text:00411195                 jz      loc_411444
.text:0041119B
.text:0041119B loc_41119B:                             ; CODE XREF: .text:0041144C↓j
.text:0041119B                                         ; .text:0041145A↓j ...
.text:0041119B                 mov     [ecx], al
.text:0041119D
.text:0041119D loc_41119D:                             ; CODE XREF: .text:0041146E↓j
.text:0041119D                 inc     ecx
.text:0041119E
.text:0041119E loc_41119E:                             ; CODE XREF: .text:00411486↓j
.text:0041119E                 movzx   eax, byte ptr [edx]
.text:004111A1                 mov     esi, ebx
.text:004111A3                 inc     edx
.text:004111A4                 test    al, al
.text:004111A6                 jnz     short loc_411190
.text:004111A8
.text:004111A8 loc_4111A8:                             ; CODE XREF: .text:0041117F↑j
.text:004111A8                 mov     [edi], esi
.text:004111AA                 mov     eax, [esp+1Ch]
.text:004111AE                 test    eax, eax
.text:004111B0                 jnz     loc_41142B
.text:004111B6
.text:004111B6 loc_4111B6:                             ; CODE XREF: .text:0041143F↓j
.text:004111B6                 mov     dword ptr [esp+4], 41106Ah
.text:004111BE                 mov     esi, offset loc_41106D
.text:004111C3                 mov     [esp], ebp
.text:004111C6                 call    sub_4129E0
.text:004111CB                 test    eax, eax
.text:004111CD                 mov     ebx, eax
.text:004111CF                 jz      short loc_4111F8
.text:004111D1                 mov     edx, eax
.text:004111D3                 mov     ecx, eax
.text:004111D5                 lea     esi, [esi+0]
.text:004111D9                 lea     edi, [edi+0]
.text:004111E0
.text:004111E0 loc_4111E0:                             ; CODE XREF: .text:004111F6↓j
.text:004111E0                 movzx   eax, byte ptr [edx]
.text:004111E3                 cmp     al, 5Ch ; '\'
.text:004111E5                 jz      loc_4113D3
.text:004111EB
.text:004111EB loc_4111EB:                             ; CODE XREF: .text:004113DB↓j
.text:004111EB                                         ; .text:004113E9↓j ...
.text:004111EB                 mov     [ecx], al
.text:004111ED
.text:004111ED loc_4111ED:                             ; CODE XREF: .text:004113FD↓j
.text:004111ED                 inc     ecx
.text:004111EE
.text:004111EE loc_4111EE:                             ; CODE XREF: .text:00411415↓j
.text:004111EE                 movzx   eax, byte ptr [edx]
.text:004111F1                 mov     esi, ebx
.text:004111F3                 inc     edx
.text:004111F4                 test    al, al
.text:004111F6                 jnz     short loc_4111E0
.text:004111F8
.text:004111F8 loc_4111F8:                             ; CODE XREF: .text:004111CF↑j
.text:004111F8                 mov     [edi+4], esi
.text:004111FB                 mov     eax, [esp+1Ch]
.text:004111FF                 test    eax, eax
.text:00411201                 jnz     loc_4113BA
.text:00411207
.text:00411207 loc_411207:                             ; CODE XREF: .text:004113CE↓j
.text:00411207                 mov     dword ptr [esp+4], 41106Ah
.text:0041120F                 mov     esi, offset loc_41106D
.text:00411214                 mov     [esp], ebp
.text:00411217                 call    sub_4129E0
.text:0041121C                 test    eax, eax
.text:0041121E                 mov     ebx, eax
.text:00411220                 jz      short loc_411248
.text:00411222                 mov     edx, eax
.text:00411224                 mov     ecx, eax
.text:00411226                 lea     esi, [esi+0]
.text:00411229                 lea     edi, [edi+0]
.text:00411230
.text:00411230 loc_411230:                             ; CODE XREF: .text:00411246↓j
.text:00411230                 movzx   eax, byte ptr [edx]
.text:00411233                 cmp     al, 5Ch ; '\'
.text:00411235                 jz      loc_411362
.text:0041123B
.text:0041123B loc_41123B:                             ; CODE XREF: .text:0041136A↓j
.text:0041123B                                         ; .text:00411378↓j ...
.text:0041123B                 mov     [ecx], al
.text:0041123D
.text:0041123D loc_41123D:                             ; CODE XREF: .text:0041138C↓j
.text:0041123D                 inc     ecx
.text:0041123E
.text:0041123E loc_41123E:                             ; CODE XREF: .text:004113A4↓j
.text:0041123E                 movzx   eax, byte ptr [edx]
.text:00411241                 mov     esi, ebx
.text:00411243                 inc     edx
.text:00411244                 test    al, al
.text:00411246                 jnz     short loc_411230
.text:00411248
.text:00411248 loc_411248:                             ; CODE XREF: .text:00411220↑j
.text:00411248                 mov     [edi+8], esi
.text:0041124B                 mov     eax, [esp+1Ch]
.text:0041124F                 test    eax, eax
.text:00411251                 jnz     loc_411349
.text:00411257
.text:00411257 loc_411257:                             ; CODE XREF: .text:0041135D↓j
.text:00411257                 mov     dword ptr [esp+4], 41106Ah
.text:0041125F                 mov     esi, offset loc_41106D
.text:00411264                 mov     [esp], ebp
.text:00411267                 call    sub_4129E0
.text:0041126C                 test    eax, eax
.text:0041126E                 mov     ebx, eax
.text:00411270                 jz      short loc_411294
.text:00411272                 mov     edx, eax
.text:00411274                 mov     ecx, eax
.text:00411276                 lea     esi, [esi+0]
.text:00411279                 lea     edi, [edi+0]
.text:00411280
.text:00411280 loc_411280:                             ; CODE XREF: .text:00411292↓j
.text:00411280                 movzx   eax, byte ptr [edx]
.text:00411283                 cmp     al, 5Ch ; '\'
.text:00411285                 jz      short loc_4112F5
.text:00411287
.text:00411287 loc_411287:                             ; CODE XREF: .text:004112FD↓j
.text:00411287                                         ; .text:00411307↓j ...
.text:00411287                 mov     [ecx], al
.text:00411289
.text:00411289 loc_411289:                             ; CODE XREF: .text:0041131B↓j
.text:00411289                 inc     ecx
.text:0041128A
.text:0041128A loc_41128A:                             ; CODE XREF: .text:00411333↓j
.text:0041128A                 movzx   eax, byte ptr [edx]
.text:0041128D                 mov     esi, ebx
.text:0041128F                 inc     edx
.text:00411290                 test    al, al
.text:00411292                 jnz     short loc_411280
.text:00411294
.text:00411294 loc_411294:                             ; CODE XREF: .text:00411270↑j
.text:00411294                 mov     [edi+0Ch], esi
.text:00411297                 xor     eax, eax
.text:00411299                 mov     edx, [esp+1Ch]
.text:0041129D                 test    edx, edx
.text:0041129F                 jnz     short loc_4112D5
.text:004112A1
.text:004112A1 loc_4112A1:                             ; CODE XREF: .text:004112F3↓j
.text:004112A1                 cmp     eax, 1
.text:004112A4                 jz      short loc_4112CC
.text:004112A6                 cmp     eax, 1
.text:004112A9                 jle     short loc_4112C1
.text:004112AB
.text:004112AB loc_4112AB:                             ; CODE XREF: .text:004112C3↓j
.text:004112AB                                         ; .text:004112D3↓j
.text:004112AB                 mov     edx, [esp+160h]
.text:004112B2                 mov     [esp], edx
.text:004112B5                 call    sub_412980
.text:004112BA                 mov     eax, edi
.text:004112BC                 jmp     loc_4110FA
.text:004112C1 ; ---------------------------------------------------------------------------
.text:004112C1
.text:004112C1 loc_4112C1:                             ; CODE XREF: .text:004112A9↑j
.text:004112C1                 test    eax, eax
.text:004112C3                 jnz     short loc_4112AB
.text:004112C5                 mov     dword ptr [edi+10h], 0
.text:004112CC
.text:004112CC loc_4112CC:                             ; CODE XREF: .text:004112A4↑j
.text:004112CC                 mov     dword ptr [edi+14h], 0
.text:004112D3                 jmp     short loc_4112AB
.text:004112D5 ; ---------------------------------------------------------------------------
.text:004112D5
.text:004112D5 loc_4112D5:                             ; CODE XREF: .text:0041129F↑j
.text:004112D5                 mov     dword ptr [esp+4], 41106Eh
.text:004112DD                 lea     esi, [edi+14h]
.text:004112E0                 lea     ebp, [edi+10h]
.text:004112E3                 mov     [esp+0Ch], esi
.text:004112E7                 mov     [esp+8], ebp
.text:004112EB                 mov     [esp], edx
.text:004112EE                 call    sscanf
.text:004112F3                 jmp     short loc_4112A1
.text:004112F5 ; ---------------------------------------------------------------------------
.text:004112F5
.text:004112F5 loc_4112F5:                             ; CODE XREF: .text:00411285↑j
.text:004112F5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004112F9                 jz      short loc_411338
.text:004112FB
.text:004112FB loc_4112FB:                             ; CODE XREF: .text:0041133C↓j
.text:004112FB                                         ; .text:00411342↓j
.text:004112FB                 cmp     al, 5Ch ; '\'
.text:004112FD                 jnz     short loc_411287
.text:004112FF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411303                 jz      short loc_411320
.text:00411305
.text:00411305 loc_411305:                             ; CODE XREF: .text:00411324↓j
.text:00411305                                         ; .text:0041132A↓j
.text:00411305                 cmp     al, 5Ch ; '\'
.text:00411307                 jnz     loc_411287
.text:0041130D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00411311                 jnz     loc_411287
.text:00411317                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041131A                 inc     edx
.text:0041131B                 jmp     loc_411289
.text:00411320 ; ---------------------------------------------------------------------------
.text:00411320
.text:00411320 loc_411320:                             ; CODE XREF: .text:00411303↑j
.text:00411320                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00411324                 jnz     short loc_411305
.text:00411326                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041132A                 jnz     short loc_411305
.text:0041132C                 mov     byte ptr [ecx], 9
.text:0041132F
.text:0041132F loc_41132F:                             ; CODE XREF: .text:00411347↓j
.text:0041132F                 inc     ecx
.text:00411330                 add     edx, 3
.text:00411333                 jmp     loc_41128A
.text:00411338 ; ---------------------------------------------------------------------------
.text:00411338
.text:00411338 loc_411338:                             ; CODE XREF: .text:004112F9↑j
.text:00411338                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041133C                 jnz     short loc_4112FB
.text:0041133E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00411342                 jnz     short loc_4112FB
.text:00411344                 mov     byte ptr [ecx], 20h ; ' '
.text:00411347                 jmp     short loc_41132F
.text:00411349 ; ---------------------------------------------------------------------------
.text:00411349
.text:00411349 loc_411349:                             ; CODE XREF: .text:00411251↑j
.text:00411349                 mov     dword ptr [esp+4], 41106Ah
.text:00411351                 mov     [esp], eax
.text:00411354                 call    strspn
.text:00411359                 add     [esp+1Ch], eax
.text:0041135D                 jmp     loc_411257
.text:00411362 ; ---------------------------------------------------------------------------
.text:00411362
.text:00411362 loc_411362:                             ; CODE XREF: .text:00411235↑j
.text:00411362                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411366                 jz      short loc_4113A9
.text:00411368
.text:00411368 loc_411368:                             ; CODE XREF: .text:004113AD↓j
.text:00411368                                         ; .text:004113B3↓j
.text:00411368                 cmp     al, 5Ch ; '\'
.text:0041136A                 jnz     loc_41123B
.text:00411370                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411374                 jz      short loc_411391
.text:00411376
.text:00411376 loc_411376:                             ; CODE XREF: .text:00411395↓j
.text:00411376                                         ; .text:0041139B↓j
.text:00411376                 cmp     al, 5Ch ; '\'
.text:00411378                 jnz     loc_41123B
.text:0041137E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00411382                 jnz     loc_41123B
.text:00411388                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041138B                 inc     edx
.text:0041138C                 jmp     loc_41123D
.text:00411391 ; ---------------------------------------------------------------------------
.text:00411391
.text:00411391 loc_411391:                             ; CODE XREF: .text:00411374↑j
.text:00411391                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00411395                 jnz     short loc_411376
.text:00411397                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041139B                 jnz     short loc_411376
.text:0041139D                 mov     byte ptr [ecx], 9
.text:004113A0
.text:004113A0 loc_4113A0:                             ; CODE XREF: .text:004113B8↓j
.text:004113A0                 inc     ecx
.text:004113A1                 add     edx, 3
.text:004113A4                 jmp     loc_41123E
.text:004113A9 ; ---------------------------------------------------------------------------
.text:004113A9
.text:004113A9 loc_4113A9:                             ; CODE XREF: .text:00411366↑j
.text:004113A9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:004113AD                 jnz     short loc_411368
.text:004113AF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:004113B3                 jnz     short loc_411368
.text:004113B5                 mov     byte ptr [ecx], 20h ; ' '
.text:004113B8                 jmp     short loc_4113A0
.text:004113BA ; ---------------------------------------------------------------------------
.text:004113BA
.text:004113BA loc_4113BA:                             ; CODE XREF: .text:00411201↑j
.text:004113BA                 mov     dword ptr [esp+4], 41106Ah
.text:004113C2                 mov     [esp], eax
.text:004113C5                 call    strspn
.text:004113CA                 add     [esp+1Ch], eax
.text:004113CE                 jmp     loc_411207
.text:004113D3 ; ---------------------------------------------------------------------------
.text:004113D3
.text:004113D3 loc_4113D3:                             ; CODE XREF: .text:004111E5↑j
.text:004113D3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004113D7                 jz      short loc_41141A
.text:004113D9
.text:004113D9 loc_4113D9:                             ; CODE XREF: .text:0041141E↓j
.text:004113D9                                         ; .text:00411424↓j
.text:004113D9                 cmp     al, 5Ch ; '\'
.text:004113DB                 jnz     loc_4111EB
.text:004113E1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004113E5                 jz      short loc_411402
.text:004113E7
.text:004113E7 loc_4113E7:                             ; CODE XREF: .text:00411406↓j
.text:004113E7                                         ; .text:0041140C↓j
.text:004113E7                 cmp     al, 5Ch ; '\'
.text:004113E9                 jnz     loc_4111EB
.text:004113EF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:004113F3                 jnz     loc_4111EB
.text:004113F9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:004113FC                 inc     edx
.text:004113FD                 jmp     loc_4111ED
.text:00411402 ; ---------------------------------------------------------------------------
.text:00411402
.text:00411402 loc_411402:                             ; CODE XREF: .text:004113E5↑j
.text:00411402                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00411406                 jnz     short loc_4113E7
.text:00411408                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041140C                 jnz     short loc_4113E7
.text:0041140E                 mov     byte ptr [ecx], 9
.text:00411411
.text:00411411 loc_411411:                             ; CODE XREF: .text:00411429↓j
.text:00411411                 inc     ecx
.text:00411412                 add     edx, 3
.text:00411415                 jmp     loc_4111EE
.text:0041141A ; ---------------------------------------------------------------------------
.text:0041141A
.text:0041141A loc_41141A:                             ; CODE XREF: .text:004113D7↑j
.text:0041141A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041141E                 jnz     short loc_4113D9
.text:00411420                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00411424                 jnz     short loc_4113D9
.text:00411426                 mov     byte ptr [ecx], 20h ; ' '
.text:00411429                 jmp     short loc_411411
.text:0041142B ; ---------------------------------------------------------------------------
.text:0041142B
.text:0041142B loc_41142B:                             ; CODE XREF: .text:004111B0↑j
.text:0041142B                 mov     dword ptr [esp+4], 41106Ah
.text:00411433                 mov     [esp], eax
.text:00411436                 call    strspn
.text:0041143B                 add     [esp+1Ch], eax
.text:0041143F                 jmp     loc_4111B6
.text:00411444 ; ---------------------------------------------------------------------------
.text:00411444
.text:00411444 loc_411444:                             ; CODE XREF: .text:00411195↑j
.text:00411444                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411448                 jz      short loc_41148B
.text:0041144A
.text:0041144A loc_41144A:                             ; CODE XREF: .text:0041148F↓j
.text:0041144A                                         ; .text:00411495↓j
.text:0041144A                 cmp     al, 5Ch ; '\'
.text:0041144C                 jnz     loc_41119B
.text:00411452                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00411456                 jz      short loc_411473
.text:00411458
.text:00411458 loc_411458:                             ; CODE XREF: .text:00411477↓j
.text:00411458                                         ; .text:0041147D↓j
.text:00411458                 cmp     al, 5Ch ; '\'
.text:0041145A                 jnz     loc_41119B
.text:00411460                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00411464                 jnz     loc_41119B
.text:0041146A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041146D                 inc     edx
.text:0041146E                 jmp     loc_41119D
.text:00411473 ; ---------------------------------------------------------------------------
.text:00411473
.text:00411473 loc_411473:                             ; CODE XREF: .text:00411456↑j
.text:00411473                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00411477                 jnz     short loc_411458
.text:00411479                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041147D                 jnz     short loc_411458
.text:0041147F                 mov     byte ptr [ecx], 9
.text:00411482
.text:00411482 loc_411482:                             ; CODE XREF: .text:0041149A↓j
.text:00411482                 inc     ecx
.text:00411483                 add     edx, 3
.text:00411486                 jmp     loc_41119E
.text:0041148B ; ---------------------------------------------------------------------------
.text:0041148B
.text:0041148B loc_41148B:                             ; CODE XREF: .text:00411448↑j
.text:0041148B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041148F                 jnz     short loc_41144A
.text:00411491                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00411495                 jnz     short loc_41144A
.text:00411497                 mov     byte ptr [ecx], 20h ; ' '
.text:0041149A                 jmp     short loc_411482
.text:0041149A ; ---------------------------------------------------------------------------
.text:0041149C                 align 10h
.text:004114A0
.text:004114A0 loc_4114A0:                             ; CODE XREF: .text:004110B2↑j
.text:004114A0                 mov     dword ptr [esp+4], 0
.text:004114A8                 mov     dword ptr [esp], 0
.text:004114AF                 call    GetLogicalDriveStringsA
.text:004114B4                 sub     esp, 8
.text:004114B7                 mov     ebx, eax
.text:004114B9                 call    GetProcessHeap
.text:004114BE                 mov     [esp], eax
.text:004114C1                 mov     [esp+8], ebx
.text:004114C5                 mov     dword ptr [esp+4], 0
.text:004114CD                 call    HeapAlloc
.text:004114D2                 sub     esp, 0Ch
.text:004114D5                 mov     esi, eax
.text:004114D7                 mov     [esp+4], eax
.text:004114DB                 mov     [esp], ebx
.text:004114DE                 call    GetLogicalDriveStringsA
.text:004114E3                 mov     off_416084, esi ; "notset"
.text:004114E9                 sub     esp, 8
.text:004114EC                 jmp     loc_4110B8
.text:004114EC ; ---------------------------------------------------------------------------
.text:004114F1 ; const char aSSSSDD[]
.text:004114F1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:004114F1                                         ; DATA XREF: .text:00411630↓o
.text:004114F1                                         ; ___addmntentstr+F0↓o
.text:00411504                 align 10h
.text:00411510                 push    esi
.text:00411511                 push    ebx
.text:00411512                 sub     esp, 44h
.text:00411515                 mov     ebx, [esp+54h]
.text:00411519                 mov     esi, [esp+50h]
.text:0041151D                 mov     edx, [ebx]
.text:0041151F                 mov     [esp+20h], edx
.text:00411523                 mov     ecx, [ebx+4]
.text:00411526                 mov     [esp+24h], ecx
.text:0041152A                 mov     edx, [ebx+8]
.text:0041152D                 mov     [esp+28h], edx
.text:00411531                 mov     ecx, [ebx+0Ch]
.text:00411534                 mov     [esp+2Ch], ecx
.text:00411538                 mov     edx, [ebx+10h]
.text:0041153B                 mov     [esp+30h], edx
.text:0041153F                 mov     ecx, [ebx+14h]
.text:00411542                 mov     dword ptr [esp+8], 2
.text:0041154A                 mov     dword ptr [esp+4], 0
.text:00411552                 mov     [esp+34h], ecx
.text:00411556                 mov     [esp], esi
.text:00411559                 call    sub_412970
.text:0041155E ; ---------------------------------------------------------------------------
.text:0041155E                 test    eax, eax
.text:00411560                 mov     edx, 1
.text:00411565                 jnz     loc_411665
.text:0041156B                 mov     ebx, [esp+20h]
.text:0041156F                 mov     edx, ebx
.text:00411571                 movzx   eax, byte ptr [ebx]
.text:00411574                 test    al, al
.text:00411576                 jz      short loc_4115A0
.text:00411578                 nop
.text:00411579                 lea     esi, [esi+0]
.text:00411580
.text:00411580 loc_411580:                             ; CODE XREF: .text:0041159E↓j
.text:00411580                 cmp     al, 20h ; ' '
.text:00411582                 jz      loc_4117DA
.text:00411588                 cmp     al, 9
.text:0041158A                 jz      loc_4117DA
.text:00411590                 cmp     al, 5Ch ; '\'
.text:00411592                 jz      loc_4117DA
.text:00411598                 inc     ebx
.text:00411599                 movzx   eax, byte ptr [ebx]
.text:0041159C                 test    al, al
.text:0041159E                 jnz     short loc_411580
.text:004115A0
.text:004115A0 loc_4115A0:                             ; CODE XREF: .text:00411576↑j
.text:004115A0                                         ; .text:004117DC↓j ...
.text:004115A0                 mov     ebx, [esp+24h]
.text:004115A4                 mov     edx, ebx
.text:004115A6                 movzx   eax, byte ptr [ebx]
.text:004115A9                 test    al, al
.text:004115AB                 jz      short loc_4115D0
.text:004115AD                 lea     esi, [esi+0]
.text:004115B0
.text:004115B0 loc_4115B0:                             ; CODE XREF: .text:004115CE↓j
.text:004115B0                 cmp     al, 20h ; ' '
.text:004115B2                 jz      loc_41175A
.text:004115B8                 cmp     al, 9
.text:004115BA                 jz      loc_41175A
.text:004115C0                 cmp     al, 5Ch ; '\'
.text:004115C2                 jz      loc_41175A
.text:004115C8                 inc     ebx
.text:004115C9                 movzx   eax, byte ptr [ebx]
.text:004115CC                 test    al, al
.text:004115CE                 jnz     short loc_4115B0
.text:004115D0
.text:004115D0 loc_4115D0:                             ; CODE XREF: .text:004115AB↑j
.text:004115D0                                         ; .text:0041175C↓j ...
.text:004115D0                 mov     ebx, [esp+28h]
.text:004115D4                 mov     edx, ebx
.text:004115D6                 movzx   eax, byte ptr [ebx]
.text:004115D9                 test    al, al
.text:004115DB                 jz      short loc_411600
.text:004115DD                 lea     esi, [esi+0]
.text:004115E0
.text:004115E0 loc_4115E0:                             ; CODE XREF: .text:004115FE↓j
.text:004115E0                 cmp     al, 20h ; ' '
.text:004115E2                 jz      loc_4116DE
.text:004115E8                 cmp     al, 9
.text:004115EA                 jz      loc_4116DE
.text:004115F0                 cmp     al, 5Ch ; '\'
.text:004115F2                 jz      loc_4116DE
.text:004115F8                 inc     ebx
.text:004115F9                 movzx   eax, byte ptr [ebx]
.text:004115FC                 test    al, al
.text:004115FE                 jnz     short loc_4115E0
.text:00411600
.text:00411600 loc_411600:                             ; CODE XREF: .text:004115DB↑j
.text:00411600                                         ; .text:004116E0↓j ...
.text:00411600                 mov     edx, [esp+2Ch]
.text:00411604                 mov     ebx, edx
.text:00411606                 movzx   eax, byte ptr [edx]
.text:00411609                 test    al, al
.text:0041160B                 jz      short loc_411624
.text:0041160D                 lea     esi, [esi+0]
.text:00411610
.text:00411610 loc_411610:                             ; CODE XREF: .text:00411622↓j
.text:00411610                 cmp     al, 20h ; ' '
.text:00411612                 jz      short loc_41166D
.text:00411614                 cmp     al, 9
.text:00411616                 jz      short loc_41166D
.text:00411618                 cmp     al, 5Ch ; '\'
.text:0041161A                 jz      short loc_41166D
.text:0041161C                 inc     ebx
.text:0041161D                 movzx   eax, byte ptr [ebx]
.text:00411620                 test    al, al
.text:00411622                 jnz     short loc_411610
.text:00411624
.text:00411624 loc_411624:                             ; CODE XREF: .text:0041160B↑j
.text:00411624                                         ; .text:0041166F↓j ...
.text:00411624                 mov     [esp+14h], edx
.text:00411628                 mov     ecx, [esp+34h]
.text:0041162C                 mov     ebx, [esp+30h]
.text:00411630                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00411638                 mov     edx, [esp+24h]
.text:0041163C                 mov     [esp+1Ch], ecx
.text:00411640                 mov     ecx, [esp+28h]
.text:00411644                 mov     [esp+18h], ebx
.text:00411648                 mov     ebx, [esp+20h]
.text:0041164C                 mov     [esp+0Ch], edx
.text:00411650                 mov     [esp+10h], ecx
.text:00411654                 mov     [esp+8], ebx
.text:00411658                 mov     [esp], esi
.text:0041165B                 call    fprintf
.text:00411660                 mov     edx, eax
.text:00411662                 shr     edx, 1Fh
.text:00411665
.text:00411665 loc_411665:                             ; CODE XREF: .text:00411565↑j
.text:00411665                 add     esp, 44h
.text:00411668                 mov     eax, edx
.text:0041166A                 pop     ebx
.text:0041166B                 pop     esi
.text:0041166C                 retn
.text:0041166D ; ---------------------------------------------------------------------------
.text:0041166D
.text:0041166D loc_41166D:                             ; CODE XREF: .text:00411612↑j
.text:0041166D                                         ; .text:00411616↑j ...
.text:0041166D                 test    al, al
.text:0041166F                 jz      short loc_411624
.text:00411671                 mov     [esp], edx
.text:00411674                 mov     ebx, edx
.text:00411676                 call    strlen
.text:0041167B                 lea     edx, ds:1[eax*4]
.text:00411682                 mov     [esp], edx
.text:00411685                 call    malloc
.text:0041168A                 mov     [esp+2Ch], eax
.text:0041168E                 mov     edx, eax
.text:00411690
.text:00411690 loc_411690:                             ; CODE XREF: .text:004116A8↓j
.text:00411690                 movzx   eax, byte ptr [ebx]
.text:00411693                 cmp     al, 20h ; ' '
.text:00411695                 jz      short loc_4116CD
.text:00411697                 cmp     al, 9
.text:00411699                 jz      short loc_4116BC
.text:0041169B                 cmp     al, 5Ch ; '\'
.text:0041169D                 jz      short loc_4116B3
.text:0041169F                 mov     [edx], al
.text:004116A1
.text:004116A1 loc_4116A1:                             ; CODE XREF: .text:004116BA↓j
.text:004116A1                                         ; .text:004116CB↓j ...
.text:004116A1                 movzx   ecx, byte ptr [ebx]
.text:004116A4                 inc     edx
.text:004116A5                 inc     ebx
.text:004116A6                 test    cl, cl
.text:004116A8                 jnz     short loc_411690
.text:004116AA                 mov     edx, [esp+2Ch]
.text:004116AE                 jmp     loc_411624
.text:004116B3 ; ---------------------------------------------------------------------------
.text:004116B3
.text:004116B3 loc_4116B3:                             ; CODE XREF: .text:0041169D↑j
.text:004116B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004116B6                 inc     edx
.text:004116B7                 mov     byte ptr [edx], 5Ch ; '\'
.text:004116BA                 jmp     short loc_4116A1
.text:004116BC ; ---------------------------------------------------------------------------
.text:004116BC
.text:004116BC loc_4116BC:                             ; CODE XREF: .text:00411699↑j
.text:004116BC                 mov     byte ptr [edx], 5Ch ; '\'
.text:004116BF                 inc     edx
.text:004116C0                 mov     byte ptr [edx], 30h ; '0'
.text:004116C3                 inc     edx
.text:004116C4                 mov     byte ptr [edx], 31h ; '1'
.text:004116C7                 inc     edx
.text:004116C8                 mov     byte ptr [edx], 32h ; '2'
.text:004116CB                 jmp     short loc_4116A1
.text:004116CD ; ---------------------------------------------------------------------------
.text:004116CD
.text:004116CD loc_4116CD:                             ; CODE XREF: .text:00411695↑j
.text:004116CD                 mov     byte ptr [edx], 5Ch ; '\'
.text:004116D0                 inc     edx
.text:004116D1                 mov     byte ptr [edx], 30h ; '0'
.text:004116D4                 inc     edx
.text:004116D5                 mov     byte ptr [edx], 34h ; '4'
.text:004116D8                 inc     edx
.text:004116D9                 mov     byte ptr [edx], 30h ; '0'
.text:004116DC                 jmp     short loc_4116A1
.text:004116DE ; ---------------------------------------------------------------------------
.text:004116DE
.text:004116DE loc_4116DE:                             ; CODE XREF: .text:004115E2↑j
.text:004116DE                                         ; .text:004115EA↑j ...
.text:004116DE                 test    al, al
.text:004116E0                 jz      loc_411600
.text:004116E6                 mov     [esp], edx
.text:004116E9                 mov     ebx, edx
.text:004116EB                 call    strlen
.text:004116F0                 lea     edx, ds:1[eax*4]
.text:004116F7                 mov     [esp], edx
.text:004116FA                 call    malloc
.text:004116FF                 mov     [esp+28h], eax
.text:00411703                 mov     edx, eax
.text:00411705                 lea     esi, [esi+0]
.text:00411709                 lea     edi, [edi+0]
.text:00411710
.text:00411710 loc_411710:                             ; CODE XREF: .text:00411728↓j
.text:00411710                 movzx   eax, byte ptr [ebx]
.text:00411713                 cmp     al, 20h ; ' '
.text:00411715                 jz      short loc_411749
.text:00411717                 cmp     al, 9
.text:00411719                 jz      short loc_411738
.text:0041171B                 cmp     al, 5Ch ; '\'
.text:0041171D                 jz      short loc_41172F
.text:0041171F                 mov     [edx], al
.text:00411721
.text:00411721 loc_411721:                             ; CODE XREF: .text:00411736↓j
.text:00411721                                         ; .text:00411747↓j ...
.text:00411721                 movzx   ecx, byte ptr [ebx]
.text:00411724                 inc     edx
.text:00411725                 inc     ebx
.text:00411726                 test    cl, cl
.text:00411728                 jnz     short loc_411710
.text:0041172A                 jmp     loc_411600
.text:0041172F ; ---------------------------------------------------------------------------
.text:0041172F
.text:0041172F loc_41172F:                             ; CODE XREF: .text:0041171D↑j
.text:0041172F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411732                 inc     edx
.text:00411733                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411736                 jmp     short loc_411721
.text:00411738 ; ---------------------------------------------------------------------------
.text:00411738
.text:00411738 loc_411738:                             ; CODE XREF: .text:00411719↑j
.text:00411738                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041173B                 inc     edx
.text:0041173C                 mov     byte ptr [edx], 30h ; '0'
.text:0041173F                 inc     edx
.text:00411740                 mov     byte ptr [edx], 31h ; '1'
.text:00411743                 inc     edx
.text:00411744                 mov     byte ptr [edx], 32h ; '2'
.text:00411747                 jmp     short loc_411721
.text:00411749 ; ---------------------------------------------------------------------------
.text:00411749
.text:00411749 loc_411749:                             ; CODE XREF: .text:00411715↑j
.text:00411749                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041174C                 inc     edx
.text:0041174D                 mov     byte ptr [edx], 30h ; '0'
.text:00411750                 inc     edx
.text:00411751                 mov     byte ptr [edx], 34h ; '4'
.text:00411754                 inc     edx
.text:00411755                 mov     byte ptr [edx], 30h ; '0'
.text:00411758                 jmp     short loc_411721
.text:0041175A ; ---------------------------------------------------------------------------
.text:0041175A
.text:0041175A loc_41175A:                             ; CODE XREF: .text:004115B2↑j
.text:0041175A                                         ; .text:004115BA↑j ...
.text:0041175A                 test    al, al
.text:0041175C                 jz      loc_4115D0
.text:00411762                 mov     [esp], edx
.text:00411765                 mov     ebx, edx
.text:00411767                 call    strlen
.text:0041176C                 lea     edx, ds:1[eax*4]
.text:00411773                 mov     [esp], edx
.text:00411776                 call    malloc
.text:0041177B                 mov     [esp+24h], eax
.text:0041177F                 mov     edx, eax
.text:00411781                 jmp     short loc_411790
.text:00411781 ; ---------------------------------------------------------------------------
.text:00411783                 align 10h
.text:00411790
.text:00411790 loc_411790:                             ; CODE XREF: .text:00411781↑j
.text:00411790                                         ; .text:004117A8↓j
.text:00411790                 movzx   eax, byte ptr [ebx]
.text:00411793                 cmp     al, 20h ; ' '
.text:00411795                 jz      short loc_4117C9
.text:00411797                 cmp     al, 9
.text:00411799                 jz      short loc_4117B8
.text:0041179B                 cmp     al, 5Ch ; '\'
.text:0041179D                 jz      short loc_4117AF
.text:0041179F                 mov     [edx], al
.text:004117A1
.text:004117A1 loc_4117A1:                             ; CODE XREF: .text:004117B6↓j
.text:004117A1                                         ; .text:004117C7↓j ...
.text:004117A1                 movzx   ecx, byte ptr [ebx]
.text:004117A4                 inc     edx
.text:004117A5                 inc     ebx
.text:004117A6                 test    cl, cl
.text:004117A8                 jnz     short loc_411790
.text:004117AA                 jmp     loc_4115D0
.text:004117AF ; ---------------------------------------------------------------------------
.text:004117AF
.text:004117AF loc_4117AF:                             ; CODE XREF: .text:0041179D↑j
.text:004117AF                 mov     byte ptr [edx], 5Ch ; '\'
.text:004117B2                 inc     edx
.text:004117B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004117B6                 jmp     short loc_4117A1
.text:004117B8 ; ---------------------------------------------------------------------------
.text:004117B8
.text:004117B8 loc_4117B8:                             ; CODE XREF: .text:00411799↑j
.text:004117B8                 mov     byte ptr [edx], 5Ch ; '\'
.text:004117BB                 inc     edx
.text:004117BC                 mov     byte ptr [edx], 30h ; '0'
.text:004117BF                 inc     edx
.text:004117C0                 mov     byte ptr [edx], 31h ; '1'
.text:004117C3                 inc     edx
.text:004117C4                 mov     byte ptr [edx], 32h ; '2'
.text:004117C7                 jmp     short loc_4117A1
.text:004117C9 ; ---------------------------------------------------------------------------
.text:004117C9
.text:004117C9 loc_4117C9:                             ; CODE XREF: .text:00411795↑j
.text:004117C9                 mov     byte ptr [edx], 5Ch ; '\'
.text:004117CC                 inc     edx
.text:004117CD                 mov     byte ptr [edx], 30h ; '0'
.text:004117D0                 inc     edx
.text:004117D1                 mov     byte ptr [edx], 34h ; '4'
.text:004117D4                 inc     edx
.text:004117D5                 mov     byte ptr [edx], 30h ; '0'
.text:004117D8                 jmp     short loc_4117A1
.text:004117DA ; ---------------------------------------------------------------------------
.text:004117DA
.text:004117DA loc_4117DA:                             ; CODE XREF: .text:00411582↑j
.text:004117DA                                         ; .text:0041158A↑j ...
.text:004117DA                 test    al, al
.text:004117DC                 jz      loc_4115A0
.text:004117E2                 mov     [esp], edx
.text:004117E5                 mov     ebx, edx
.text:004117E7                 call    strlen
.text:004117EC                 lea     ecx, ds:1[eax*4]
.text:004117F3                 mov     [esp], ecx
.text:004117F6                 call    malloc
.text:004117FB                 mov     [esp+20h], eax
.text:004117FF                 mov     edx, eax
.text:00411801                 jmp     short loc_411810
.text:00411801 ; ---------------------------------------------------------------------------
.text:00411803                 align 10h
.text:00411810
.text:00411810 loc_411810:                             ; CODE XREF: .text:00411801↑j
.text:00411810                                         ; .text:00411828↓j
.text:00411810                 movzx   eax, byte ptr [ebx]
.text:00411813                 cmp     al, 20h ; ' '
.text:00411815                 jz      short loc_411849
.text:00411817                 cmp     al, 9
.text:00411819                 jz      short loc_411838
.text:0041181B                 cmp     al, 5Ch ; '\'
.text:0041181D                 jz      short loc_41182F
.text:0041181F                 mov     [edx], al
.text:00411821
.text:00411821 loc_411821:                             ; CODE XREF: .text:00411836↓j
.text:00411821                                         ; .text:00411847↓j ...
.text:00411821                 movzx   ecx, byte ptr [ebx]
.text:00411824                 inc     edx
.text:00411825                 inc     ebx
.text:00411826                 test    cl, cl
.text:00411828                 jnz     short loc_411810
.text:0041182A                 jmp     loc_4115A0
.text:0041182F ; ---------------------------------------------------------------------------
.text:0041182F
.text:0041182F loc_41182F:                             ; CODE XREF: .text:0041181D↑j
.text:0041182F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411832                 inc     edx
.text:00411833                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411836                 jmp     short loc_411821
.text:00411838 ; ---------------------------------------------------------------------------
.text:00411838
.text:00411838 loc_411838:                             ; CODE XREF: .text:00411819↑j
.text:00411838                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041183B                 inc     edx
.text:0041183C                 mov     byte ptr [edx], 30h ; '0'
.text:0041183F                 inc     edx
.text:00411840                 mov     byte ptr [edx], 31h ; '1'
.text:00411843                 inc     edx
.text:00411844                 mov     byte ptr [edx], 32h ; '2'
.text:00411847                 jmp     short loc_411821
.text:00411849 ; ---------------------------------------------------------------------------
.text:00411849
.text:00411849 loc_411849:                             ; CODE XREF: .text:00411815↑j
.text:00411849                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041184C                 inc     edx
.text:0041184D                 mov     byte ptr [edx], 30h ; '0'
.text:00411850                 inc     edx
.text:00411851                 mov     byte ptr [edx], 34h ; '4'
.text:00411854                 inc     edx
.text:00411855                 mov     byte ptr [edx], 30h ; '0'
.text:00411858                 jmp     short loc_411821
.text:00411858 ; ---------------------------------------------------------------------------
.text:0041185A                 align 10h
.text:00411860
.text:00411860 ; =============== S U B R O U T I N E =======================================
.text:00411860
.text:00411860 ; Attributes: info_from_lumina
.text:00411860
.text:00411860 ; int __cdecl __addmntentstr(char *, int)
.text:00411860 ___addmntentstr proc near               ; CODE XREF: .text:0041112A↑p
.text:00411860
.text:00411860 Buffer          = dword ptr -4Ch
.text:00411860 Format          = dword ptr -48h
.text:00411860 var_44          = dword ptr -44h
.text:00411860 var_40          = dword ptr -40h
.text:00411860 var_3C          = dword ptr -3Ch
.text:00411860 var_38          = dword ptr -38h
.text:00411860 var_34          = dword ptr -34h
.text:00411860 var_30          = dword ptr -30h
.text:00411860 var_2C          = dword ptr -2Ch
.text:00411860 var_28          = dword ptr -28h
.text:00411860 var_24          = dword ptr -24h
.text:00411860 Str             = dword ptr -20h
.text:00411860 var_1C          = dword ptr -1Ch
.text:00411860 var_18          = dword ptr -18h
.text:00411860 arg_0           = dword ptr  4
.text:00411860 arg_4           = dword ptr  8
.text:00411860
.text:00411860                 push    ebx
.text:00411861                 sub     esp, 48h
.text:00411864                 mov     edx, [esp+4Ch+arg_4]
.text:00411868                 mov     ecx, [edx]
.text:0041186A                 mov     [esp+4Ch+var_2C], ecx
.text:0041186E                 mov     ebx, [edx+4]
.text:00411871                 mov     [esp+4Ch+var_28], ebx
.text:00411875                 mov     ebx, [edx+8]
.text:00411878                 mov     [esp+4Ch+var_24], ebx
.text:0041187C                 mov     ebx, [edx+0Ch]
.text:0041187F                 mov     [esp+4Ch+Str], ebx
.text:00411883                 mov     ebx, [edx+10h]
.text:00411886                 mov     [esp+4Ch+var_1C], ebx
.text:0041188A                 mov     ebx, [edx+14h]
.text:0041188D                 mov     [esp+4Ch+var_18], ebx
.text:00411891                 mov     ebx, ecx
.text:00411893                 movzx   eax, byte ptr [ecx]
.text:00411896                 test    al, al
.text:00411898                 jz      loc_411B81
.text:0041189E                 mov     esi, esi
.text:004118A0
.text:004118A0 loc_4118A0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:004118A0                 cmp     al, 20h ; ' '
.text:004118A2                 jz      loc_411B00
.text:004118A8                 cmp     al, 9
.text:004118AA                 jz      loc_411B00
.text:004118B0                 cmp     al, 5Ch ; '\'
.text:004118B2                 jz      loc_411B00
.text:004118B8                 inc     ebx
.text:004118B9                 movzx   eax, byte ptr [ebx]
.text:004118BC                 test    al, al
.text:004118BE                 jnz     short loc_4118A0
.text:004118C0
.text:004118C0 loc_4118C0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:004118C0                                         ; ___addmntentstr+2EA↓j
.text:004118C0                 mov     ebx, [esp+4Ch+var_28]
.text:004118C4                 mov     edx, ebx
.text:004118C6                 movzx   eax, byte ptr [ebx]
.text:004118C9                 test    al, al
.text:004118CB                 jz      short loc_4118F0
.text:004118CD                 lea     esi, [esi+0]
.text:004118D0
.text:004118D0 loc_4118D0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:004118D0                 cmp     al, 20h ; ' '
.text:004118D2                 jz      loc_411A7A
.text:004118D8                 cmp     al, 9
.text:004118DA                 jz      loc_411A7A
.text:004118E0                 cmp     al, 5Ch ; '\'
.text:004118E2                 jz      loc_411A7A
.text:004118E8                 inc     ebx
.text:004118E9                 movzx   eax, byte ptr [ebx]
.text:004118EC                 test    al, al
.text:004118EE                 jnz     short loc_4118D0
.text:004118F0
.text:004118F0 loc_4118F0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:004118F0                                         ; ___addmntentstr+21C↓j ...
.text:004118F0                 mov     ebx, [esp+4Ch+var_24]
.text:004118F4                 mov     edx, ebx
.text:004118F6                 movzx   eax, byte ptr [ebx]
.text:004118F9                 test    al, al
.text:004118FB                 jz      short loc_411920
.text:004118FD                 lea     esi, [esi+0]
.text:00411900
.text:00411900 loc_411900:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:00411900                 cmp     al, 20h ; ' '
.text:00411902                 jz      loc_4119FE
.text:00411908                 cmp     al, 9
.text:0041190A                 jz      loc_4119FE
.text:00411910                 cmp     al, 5Ch ; '\'
.text:00411912                 jz      loc_4119FE
.text:00411918                 inc     ebx
.text:00411919                 movzx   eax, byte ptr [ebx]
.text:0041191C                 test    al, al
.text:0041191E                 jnz     short loc_411900
.text:00411920
.text:00411920 loc_411920:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:00411920                                         ; ___addmntentstr+1A0↓j ...
.text:00411920                 mov     edx, [esp+4Ch+Str]
.text:00411924                 mov     ebx, edx
.text:00411926                 movzx   eax, byte ptr [edx]
.text:00411929                 test    al, al
.text:0041192B                 jz      short loc_411944
.text:0041192D                 lea     esi, [esi+0]
.text:00411930
.text:00411930 loc_411930:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:00411930                 cmp     al, 20h ; ' '
.text:00411932                 jz      short loc_41198C
.text:00411934                 cmp     al, 9
.text:00411936                 jz      short loc_41198C
.text:00411938                 cmp     al, 5Ch ; '\'
.text:0041193A                 jz      short loc_41198C
.text:0041193C                 inc     ebx
.text:0041193D                 movzx   eax, byte ptr [ebx]
.text:00411940                 test    al, al
.text:00411942                 jnz     short loc_411930
.text:00411944
.text:00411944 loc_411944:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:00411944                                         ; ___addmntentstr+12E↓j ...
.text:00411944                 mov     [esp+4Ch+var_38], edx
.text:00411948                 mov     ebx, [esp+4Ch+var_18]
.text:0041194C                 mov     ecx, [esp+4Ch+var_1C]
.text:00411950                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00411958                 mov     edx, [esp+4Ch+var_2C]
.text:0041195C                 mov     [esp+4Ch+var_30], ebx
.text:00411960                 mov     ebx, [esp+4Ch+var_24]
.text:00411964                 mov     [esp+4Ch+var_34], ecx
.text:00411968                 mov     ecx, [esp+4Ch+var_28]
.text:0041196C                 mov     [esp+4Ch+var_3C], ebx
.text:00411970                 mov     ebx, [esp+4Ch+arg_0]
.text:00411974                 mov     [esp+4Ch+var_40], ecx
.text:00411978                 mov     [esp+4Ch+var_44], edx
.text:0041197C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0041197F                 call    sprintf
.text:00411984                 add     esp, 48h
.text:00411987                 shr     eax, 1Fh
.text:0041198A                 pop     ebx
.text:0041198B                 retn
.text:0041198C ; ---------------------------------------------------------------------------
.text:0041198C
.text:0041198C loc_41198C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0041198C                                         ; ___addmntentstr+D6↑j ...
.text:0041198C                 test    al, al
.text:0041198E                 jz      short loc_411944
.text:00411990                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00411993                 mov     ebx, edx
.text:00411995                 call    strlen
.text:0041199A                 lea     edx, ds:1[eax*4]
.text:004119A1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:004119A4                 call    malloc
.text:004119A9                 mov     [esp+4Ch+Str], eax
.text:004119AD                 mov     edx, eax
.text:004119AF                 nop
.text:004119B0
.text:004119B0 loc_4119B0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:004119B0                 movzx   eax, byte ptr [ebx]
.text:004119B3                 cmp     al, 20h ; ' '
.text:004119B5                 jz      short loc_4119ED
.text:004119B7                 cmp     al, 9
.text:004119B9                 jz      short loc_4119DC
.text:004119BB                 cmp     al, 5Ch ; '\'
.text:004119BD                 jz      short loc_4119D3
.text:004119BF                 mov     [edx], al
.text:004119C1
.text:004119C1 loc_4119C1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:004119C1                                         ; ___addmntentstr+18B↓j ...
.text:004119C1                 movzx   ecx, byte ptr [ebx]
.text:004119C4                 inc     edx
.text:004119C5                 inc     ebx
.text:004119C6                 test    cl, cl
.text:004119C8                 jnz     short loc_4119B0
.text:004119CA                 mov     edx, [esp+4Ch+Str]
.text:004119CE                 jmp     loc_411944
.text:004119D3 ; ---------------------------------------------------------------------------
.text:004119D3
.text:004119D3 loc_4119D3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:004119D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:004119D6                 inc     edx
.text:004119D7                 mov     byte ptr [edx], 5Ch ; '\'
.text:004119DA                 jmp     short loc_4119C1
.text:004119DC ; ---------------------------------------------------------------------------
.text:004119DC
.text:004119DC loc_4119DC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:004119DC                 mov     byte ptr [edx], 5Ch ; '\'
.text:004119DF                 inc     edx
.text:004119E0                 mov     byte ptr [edx], 30h ; '0'
.text:004119E3                 inc     edx
.text:004119E4                 mov     byte ptr [edx], 31h ; '1'
.text:004119E7                 inc     edx
.text:004119E8                 mov     byte ptr [edx], 32h ; '2'
.text:004119EB                 jmp     short loc_4119C1
.text:004119ED ; ---------------------------------------------------------------------------
.text:004119ED
.text:004119ED loc_4119ED:                             ; CODE XREF: ___addmntentstr+155↑j
.text:004119ED                 mov     byte ptr [edx], 5Ch ; '\'
.text:004119F0                 inc     edx
.text:004119F1                 mov     byte ptr [edx], 30h ; '0'
.text:004119F4                 inc     edx
.text:004119F5                 mov     byte ptr [edx], 34h ; '4'
.text:004119F8                 inc     edx
.text:004119F9                 mov     byte ptr [edx], 30h ; '0'
.text:004119FC                 jmp     short loc_4119C1
.text:004119FE ; ---------------------------------------------------------------------------
.text:004119FE
.text:004119FE loc_4119FE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:004119FE                                         ; ___addmntentstr+AA↑j ...
.text:004119FE                 test    al, al
.text:00411A00                 jz      loc_411920
.text:00411A06                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00411A09                 mov     ebx, edx
.text:00411A0B                 call    strlen
.text:00411A10                 lea     edx, ds:1[eax*4]
.text:00411A17                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00411A1A                 call    malloc
.text:00411A1F                 mov     [esp+4Ch+var_24], eax
.text:00411A23                 mov     edx, eax
.text:00411A25                 lea     esi, [esi+0]
.text:00411A29                 lea     edi, [edi+0]
.text:00411A30
.text:00411A30 loc_411A30:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:00411A30                 movzx   eax, byte ptr [ebx]
.text:00411A33                 cmp     al, 20h ; ' '
.text:00411A35                 jz      short loc_411A69
.text:00411A37                 cmp     al, 9
.text:00411A39                 jz      short loc_411A58
.text:00411A3B                 cmp     al, 5Ch ; '\'
.text:00411A3D                 jz      short loc_411A4F
.text:00411A3F                 mov     [edx], al
.text:00411A41
.text:00411A41 loc_411A41:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:00411A41                                         ; ___addmntentstr+207↓j ...
.text:00411A41                 movzx   ecx, byte ptr [ebx]
.text:00411A44                 inc     edx
.text:00411A45                 inc     ebx
.text:00411A46                 test    cl, cl
.text:00411A48                 jnz     short loc_411A30
.text:00411A4A                 jmp     loc_411920
.text:00411A4F ; ---------------------------------------------------------------------------
.text:00411A4F
.text:00411A4F loc_411A4F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:00411A4F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411A52                 inc     edx
.text:00411A53                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411A56                 jmp     short loc_411A41
.text:00411A58 ; ---------------------------------------------------------------------------
.text:00411A58
.text:00411A58 loc_411A58:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:00411A58                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411A5B                 inc     edx
.text:00411A5C                 mov     byte ptr [edx], 30h ; '0'
.text:00411A5F                 inc     edx
.text:00411A60                 mov     byte ptr [edx], 31h ; '1'
.text:00411A63                 inc     edx
.text:00411A64                 mov     byte ptr [edx], 32h ; '2'
.text:00411A67                 jmp     short loc_411A41
.text:00411A69 ; ---------------------------------------------------------------------------
.text:00411A69
.text:00411A69 loc_411A69:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:00411A69                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411A6C                 inc     edx
.text:00411A6D                 mov     byte ptr [edx], 30h ; '0'
.text:00411A70                 inc     edx
.text:00411A71                 mov     byte ptr [edx], 34h ; '4'
.text:00411A74                 inc     edx
.text:00411A75                 mov     byte ptr [edx], 30h ; '0'
.text:00411A78                 jmp     short loc_411A41
.text:00411A7A ; ---------------------------------------------------------------------------
.text:00411A7A
.text:00411A7A loc_411A7A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:00411A7A                                         ; ___addmntentstr+7A↑j ...
.text:00411A7A                 test    al, al
.text:00411A7C                 jz      loc_4118F0
.text:00411A82                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00411A85                 mov     ebx, edx
.text:00411A87                 call    strlen
.text:00411A8C                 lea     edx, ds:1[eax*4]
.text:00411A93                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00411A96                 call    malloc
.text:00411A9B                 mov     [esp+4Ch+var_28], eax
.text:00411A9F                 mov     edx, eax
.text:00411AA1                 jmp     short loc_411AB0
.text:00411AA1 ; ---------------------------------------------------------------------------
.text:00411AA3                 align 10h
.text:00411AB0
.text:00411AB0 loc_411AB0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:00411AB0                                         ; ___addmntentstr+268↓j
.text:00411AB0                 movzx   eax, byte ptr [ebx]
.text:00411AB3                 cmp     al, 20h ; ' '
.text:00411AB5                 jz      short loc_411AE9
.text:00411AB7                 cmp     al, 9
.text:00411AB9                 jz      short loc_411AD8
.text:00411ABB                 cmp     al, 5Ch ; '\'
.text:00411ABD                 jz      short loc_411ACF
.text:00411ABF                 mov     [edx], al
.text:00411AC1
.text:00411AC1 loc_411AC1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:00411AC1                                         ; ___addmntentstr+287↓j ...
.text:00411AC1                 movzx   ecx, byte ptr [ebx]
.text:00411AC4                 inc     edx
.text:00411AC5                 inc     ebx
.text:00411AC6                 test    cl, cl
.text:00411AC8                 jnz     short loc_411AB0
.text:00411ACA                 jmp     loc_4118F0
.text:00411ACF ; ---------------------------------------------------------------------------
.text:00411ACF
.text:00411ACF loc_411ACF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:00411ACF                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411AD2                 inc     edx
.text:00411AD3                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411AD6                 jmp     short loc_411AC1
.text:00411AD8 ; ---------------------------------------------------------------------------
.text:00411AD8
.text:00411AD8 loc_411AD8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:00411AD8                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411ADB                 inc     edx
.text:00411ADC                 mov     byte ptr [edx], 30h ; '0'
.text:00411ADF                 inc     edx
.text:00411AE0                 mov     byte ptr [edx], 31h ; '1'
.text:00411AE3                 inc     edx
.text:00411AE4                 mov     byte ptr [edx], 32h ; '2'
.text:00411AE7                 jmp     short loc_411AC1
.text:00411AE9 ; ---------------------------------------------------------------------------
.text:00411AE9
.text:00411AE9 loc_411AE9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:00411AE9                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411AEC                 inc     edx
.text:00411AED                 mov     byte ptr [edx], 30h ; '0'
.text:00411AF0                 inc     edx
.text:00411AF1                 mov     byte ptr [edx], 34h ; '4'
.text:00411AF4                 inc     edx
.text:00411AF5                 mov     byte ptr [edx], 30h ; '0'
.text:00411AF8                 jmp     short loc_411AC1
.text:00411AF8 ; ---------------------------------------------------------------------------
.text:00411AFA                 align 10h
.text:00411B00
.text:00411B00 loc_411B00:                             ; CODE XREF: ___addmntentstr+42↑j
.text:00411B00                                         ; ___addmntentstr+4A↑j ...
.text:00411B00                 test    al, al
.text:00411B02                 jz      loc_4118C0
.text:00411B08                 mov     ebx, [esp+4Ch+var_2C]
.text:00411B0C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:00411B0F                 call    strlen
.text:00411B14                 lea     edx, ds:1[eax*4]
.text:00411B1B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00411B1E                 call    malloc
.text:00411B23                 mov     [esp+4Ch+var_2C], eax
.text:00411B27                 mov     edx, eax
.text:00411B29                 lea     esi, [esi+0]
.text:00411B30
.text:00411B30 loc_411B30:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:00411B30                 movzx   eax, byte ptr [ebx]
.text:00411B33                 cmp     al, 20h ; ' '
.text:00411B35                 jz      short loc_411B70
.text:00411B37                 cmp     al, 9
.text:00411B39                 jz      short loc_411B58
.text:00411B3B                 cmp     al, 5Ch ; '\'
.text:00411B3D                 jz      short loc_411B4F
.text:00411B3F                 mov     [edx], al
.text:00411B41
.text:00411B41 loc_411B41:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:00411B41                                         ; ___addmntentstr+307↓j ...
.text:00411B41                 movzx   ecx, byte ptr [ebx]
.text:00411B44                 inc     edx
.text:00411B45                 inc     ebx
.text:00411B46                 test    cl, cl
.text:00411B48                 jnz     short loc_411B30
.text:00411B4A                 jmp     loc_4118C0
.text:00411B4F ; ---------------------------------------------------------------------------
.text:00411B4F
.text:00411B4F loc_411B4F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:00411B4F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411B52                 inc     edx
.text:00411B53                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411B56                 jmp     short loc_411B41
.text:00411B58 ; ---------------------------------------------------------------------------
.text:00411B58
.text:00411B58 loc_411B58:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:00411B58                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411B5B                 inc     edx
.text:00411B5C                 mov     byte ptr [edx], 30h ; '0'
.text:00411B5F                 inc     edx
.text:00411B60                 mov     byte ptr [edx], 31h ; '1'
.text:00411B63                 inc     edx
.text:00411B64                 mov     byte ptr [edx], 32h ; '2'
.text:00411B67                 jmp     short loc_411B41
.text:00411B67 ; ---------------------------------------------------------------------------
.text:00411B69                 align 10h
.text:00411B70
.text:00411B70 loc_411B70:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:00411B70                 mov     byte ptr [edx], 5Ch ; '\'
.text:00411B73                 inc     edx
.text:00411B74                 mov     byte ptr [edx], 30h ; '0'
.text:00411B77                 inc     edx
.text:00411B78                 mov     byte ptr [edx], 34h ; '4'
.text:00411B7B                 inc     edx
.text:00411B7C                 mov     byte ptr [edx], 30h ; '0'
.text:00411B7F                 jmp     short loc_411B41
.text:00411B81 ; ---------------------------------------------------------------------------
.text:00411B81
.text:00411B81 loc_411B81:                             ; CODE XREF: ___addmntentstr+38↑j
.text:00411B81                 movzx   eax, byte ptr [ecx]
.text:00411B84                 jmp     loc_411B00
.text:00411B84 ___addmntentstr endp
.text:00411B84
.text:00411B84 ; ---------------------------------------------------------------------------
.text:00411B89                 align 10h
.text:00411B90
.text:00411B90 ; =============== S U B R O U T I N E =======================================
.text:00411B90
.text:00411B90
.text:00411B90 sub_411B90      proc near               ; CODE XREF: sub_40FC50+99↑p
.text:00411B90
.text:00411B90 nBufferLength   = dword ptr -1Ch
.text:00411B90 lpBuffer        = dword ptr -18h
.text:00411B90 dwBytes         = dword ptr -14h
.text:00411B90 var_8           = dword ptr -8
.text:00411B90 var_4           = dword ptr -4
.text:00411B90
.text:00411B90                 sub     esp, 1Ch
.text:00411B93                 mov     [esp+1Ch+var_8], ebx
.text:00411B97                 mov     [esp+1Ch+var_4], esi
.text:00411B9B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:00411BA3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:00411BAA                 call    GetLogicalDriveStringsA
.text:00411BAF                 sub     esp, 8
.text:00411BB2                 mov     ebx, eax
.text:00411BB4                 call    GetProcessHeap
.text:00411BB9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:00411BBC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:00411BC0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:00411BC8                 call    HeapAlloc
.text:00411BCD                 sub     esp, 0Ch
.text:00411BD0                 mov     esi, eax
.text:00411BD2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:00411BD5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:00411BD9                 call    GetLogicalDriveStringsA
.text:00411BDE                 sub     esp, 8
.text:00411BE1                 mov     eax, esi
.text:00411BE3                 mov     ebx, [esp+1Ch+var_8]
.text:00411BE7                 mov     esi, [esp+1Ch+var_4]
.text:00411BEB                 add     esp, 1Ch
.text:00411BEE                 retn
.text:00411BEE sub_411B90      endp
.text:00411BEE
.text:00411BEF
.text:00411BEF ; =============== S U B R O U T I N E =======================================
.text:00411BEF
.text:00411BEF
.text:00411BEF ; int __cdecl sub_411BEF(char *, char *)
.text:00411BEF sub_411BEF      proc near               ; DATA XREF: sub_411BEF:loc_411C7D↓o
.text:00411BEF
.text:00411BEF FileName        = dword ptr -1Ch
.text:00411BEF Mode            = dword ptr -18h
.text:00411BEF dwBytes         = dword ptr -14h
.text:00411BEF arg_0           = dword ptr  4
.text:00411BEF arg_4           = dword ptr  8
.text:00411BEF
.text:00411BEF                 ja      short $+2
.text:00411BF1
.text:00411BF1 loc_411BF1:                             ; CODE XREF: sub_411BEF↑j
.text:00411BF1                 jmp     short loc_411C00
.text:00411BF1 ; ---------------------------------------------------------------------------
.text:00411BF3                 align 10h
.text:00411C00
.text:00411C00 loc_411C00:                             ; CODE XREF: sub_411BEF:loc_411BF1↑j
.text:00411C00                 push    edi
.text:00411C01                 push    esi
.text:00411C02                 push    ebx
.text:00411C03                 sub     esp, 10h
.text:00411C06                 mov     ebx, [esp+1Ch+arg_0]
.text:00411C0A                 mov     edx, [esp+1Ch+arg_4]
.text:00411C0E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00411C11                 mov     [esp+1Ch+Mode], edx ; Mode
.text:00411C15                 call    fopen
.text:00411C1A                 test    eax, eax
.text:00411C1C                 mov     edi, eax
.text:00411C1E                 jz      short loc_411C7D
.text:00411C20
.text:00411C20 loc_411C20:                             ; CODE XREF: sub_411BEF+A2↓j
.text:00411C20                                         ; sub_411BEF+AB↓j
.text:00411C20                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:00411C28                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:00411C2F                 call    GetLogicalDriveStringsA
.text:00411C34                 sub     esp, 8
.text:00411C37                 mov     esi, eax
.text:00411C39                 call    GetProcessHeap
.text:00411C3E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:00411C41                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:00411C45                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:00411C4D                 call    HeapAlloc
.text:00411C52                 sub     esp, 0Ch
.text:00411C55                 mov     ebx, eax
.text:00411C57                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:00411C5A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:00411C5E                 call    GetLogicalDriveStringsA
.text:00411C63                 mov     off_416084, ebx ; "notset"
.text:00411C69                 sub     esp, 8
.text:00411C6C                 xor     eax, eax
.text:00411C6E                 test    ebx, ebx
.text:00411C70                 setz    al
.text:00411C73                 add     esp, 10h
.text:00411C76                 pop     ebx
.text:00411C77                 dec     eax
.text:00411C78                 and     eax, edi
.text:00411C7A                 pop     esi
.text:00411C7B                 pop     edi
.text:00411C7C                 retn
.text:00411C7D ; ---------------------------------------------------------------------------
.text:00411C7D
.text:00411C7D loc_411C7D:                             ; CODE XREF: sub_411BEF+2F↑j
.text:00411C7D                 mov     [esp+1Ch+Mode], offset sub_411BEF ; Mode
.text:00411C85                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00411C88                 call    fopen
.text:00411C8D                 test    eax, eax
.text:00411C8F                 mov     edi, eax
.text:00411C91                 jnz     short loc_411C20
.text:00411C93                 call    sub_412A80
.text:00411C98                 mov     edi, eax
.text:00411C9A                 jmp     short loc_411C20
.text:00411C9A sub_411BEF      endp
.text:00411C9A
.text:00411C9A ; ---------------------------------------------------------------------------
.text:00411C9C                 align 10h
.text:00411CA0                 sub     esp, 0Ch
.text:00411CA3                 mov     eax, [esp+10h]
.text:00411CA7                 test    eax, eax
.text:00411CA9                 jz      short loc_411CB3
.text:00411CAB                 mov     [esp], eax
.text:00411CAE                 call    fclose
.text:00411CB3
.text:00411CB3 loc_411CB3:                             ; CODE XREF: .text:00411CA9↑j
.text:00411CB3                 call    GetProcessHeap
.text:00411CB8                 mov     [esp], eax
.text:00411CBB                 mov     ecx, off_416084 ; "notset"
.text:00411CC1                 mov     dword ptr [esp+4], 0
.text:00411CC9                 mov     [esp+8], ecx
.text:00411CCD                 call    HeapFree
.text:00411CD2                 mov     edx, off_416080 ; "notset"
.text:00411CD8                 sub     esp, 0Ch
.text:00411CDB                 mov     eax, 1
.text:00411CE0                 mov     off_416084, edx ; "notset"
.text:00411CE6                 add     esp, 0Ch
.text:00411CE9                 retn
.text:00411CE9 ; ---------------------------------------------------------------------------
.text:00411CEA                 align 10h
.text:00411CF0                 push    edi
.text:00411CF1                 push    esi
.text:00411CF2                 push    ebx
.text:00411CF3                 sub     esp, 10h
.text:00411CF6                 mov     edi, [esp+24h]
.text:00411CFA                 mov     [esp], edi
.text:00411CFD                 call    strlen
.text:00411D02                 mov     edx, [esp+20h]
.text:00411D06                 mov     esi, eax
.text:00411D08                 mov     ebx, [edx+0Ch]
.text:00411D0B                 nop
.text:00411D0C                 lea     esi, [esi+0]
.text:00411D10
.text:00411D10 loc_411D10:                             ; CODE XREF: .text:00411D41↓j
.text:00411D10                 mov     [esp+4], edi
.text:00411D14                 mov     [esp], ebx
.text:00411D17                 call    strstr
.text:00411D1C                 test    eax, eax
.text:00411D1E                 jz      short loc_411D43
.text:00411D20                 cmp     eax, ebx
.text:00411D22                 jz      short loc_411D45
.text:00411D24                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:00411D28                 jz      short loc_411D50
.text:00411D2A
.text:00411D2A loc_411D2A:                             ; CODE XREF: .text:00411D60↓j
.text:00411D2A                 mov     [esp], ebx
.text:00411D2D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:00411D35                 call    strchr
.text:00411D3A                 test    eax, eax
.text:00411D3C                 mov     ebx, eax
.text:00411D3E                 jz      short loc_411D43
.text:00411D40                 inc     ebx
.text:00411D41                 jmp     short loc_411D10
.text:00411D43 ; ---------------------------------------------------------------------------
.text:00411D43
.text:00411D43 loc_411D43:                             ; CODE XREF: .text:00411D1E↑j
.text:00411D43                                         ; .text:00411D3E↑j
.text:00411D43                 xor     eax, eax
.text:00411D45
.text:00411D45 loc_411D45:                             ; CODE XREF: .text:00411D22↑j
.text:00411D45                                         ; .text:00411D56↓j ...
.text:00411D45                 add     esp, 10h
.text:00411D48                 pop     ebx
.text:00411D49                 pop     esi
.text:00411D4A                 pop     edi
.text:00411D4B                 retn
.text:00411D4B ; ---------------------------------------------------------------------------
.text:00411D4C                 align 10h
.text:00411D50
.text:00411D50 loc_411D50:                             ; CODE XREF: .text:00411D28↑j
.text:00411D50                 movzx   edx, byte ptr [esi+eax]
.text:00411D54                 test    dl, dl
.text:00411D56                 jz      short loc_411D45
.text:00411D58                 cmp     dl, 3Dh ; '='
.text:00411D5B                 jz      short loc_411D45
.text:00411D5D                 cmp     dl, 2Ch ; ','
.text:00411D60                 jnz     short loc_411D2A
.text:00411D62                 jmp     short loc_411D45
.text:00411D62 ; ---------------------------------------------------------------------------
.text:00411D64                 align 10h
.text:00411D70 ; const char aFxstat64BadFil[]
.text:00411D70 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:00411D70                                         ; DATA XREF: sub_411DA0+7B↓o
.text:00411D94                 align 10h
.text:00411DA0
.text:00411DA0 ; =============== S U B R O U T I N E =======================================
.text:00411DA0
.text:00411DA0
.text:00411DA0 ; int __cdecl sub_411DA0(HANDLE hNamedPipe, int, int)
.text:00411DA0 sub_411DA0      proc near               ; CODE XREF: .text:0040FE69↑p
.text:00411DA0
.text:00411DA0 FileHandle      = dword ptr -1Ch
.text:00411DA0 var_18          = dword ptr -18h
.text:00411DA0 var_C           = dword ptr -0Ch
.text:00411DA0 var_8           = dword ptr -8
.text:00411DA0 var_4           = dword ptr -4
.text:00411DA0 hNamedPipe      = dword ptr  4
.text:00411DA0 arg_4           = dword ptr  8
.text:00411DA0 arg_8           = dword ptr  0Ch
.text:00411DA0
.text:00411DA0                 sub     esp, 1Ch
.text:00411DA3                 mov     edx, [esp+1Ch+arg_4]
.text:00411DA7                 mov     [esp+1Ch+var_C], ebx
.text:00411DAB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:00411DAF                 mov     [esp+1Ch+var_8], esi
.text:00411DB3                 mov     esi, [esp+1Ch+arg_8]
.text:00411DB7                 test    ebx, ebx
.text:00411DB9                 mov     [esp+1Ch+var_4], edi
.text:00411DBD                 jnz     short loc_411DF7
.text:00411DBF                 test    edx, edx
.text:00411DC1                 js      short loc_411E17
.text:00411DC3                 test    esi, esi
.text:00411DC5                 jz      short loc_411DF7
.text:00411DC7                 cld
.text:00411DC8                 mov     eax, ebx
.text:00411DCA                 mov     edi, esi
.text:00411DCC                 mov     ecx, 18h
.text:00411DD1                 rep stosd
.text:00411DD3                 mov     [esp+1Ch+arg_4], esi ; int
.text:00411DD7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:00411DDA                 call    _get_osfhandle
.text:00411DDF                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:00411DE3                 mov     ebx, [esp+1Ch+var_C]
.text:00411DE7                 mov     esi, [esp+1Ch+var_8]
.text:00411DEB                 mov     edi, [esp+1Ch+var_4]
.text:00411DEF                 add     esp, 1Ch
.text:00411DF2                 jmp     sub_40DF00
.text:00411DF7 ; ---------------------------------------------------------------------------
.text:00411DF7
.text:00411DF7 loc_411DF7:                             ; CODE XREF: sub_411DA0+1D↑j
.text:00411DF7                                         ; sub_411DA0+25↑j
.text:00411DF7                 call    _errno
.text:00411DFC                 mov     dword ptr [eax], 16h
.text:00411E02
.text:00411E02 loc_411E02:                             ; CODE XREF: sub_411DA0+92↓j
.text:00411E02                 mov     ebx, [esp+1Ch+var_C]
.text:00411E06                 mov     eax, 0FFFFFFFFh
.text:00411E0B                 mov     esi, [esp+1Ch+var_8]
.text:00411E0F                 mov     edi, [esp+1Ch+var_4]
.text:00411E13                 add     esp, 1Ch
.text:00411E16                 retn
.text:00411E17 ; ---------------------------------------------------------------------------
.text:00411E17
.text:00411E17 loc_411E17:                             ; CODE XREF: sub_411DA0+21↑j
.text:00411E17                 mov     [esp+1Ch+var_18], edx
.text:00411E1B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:00411E22                 call    printf
.text:00411E27                 call    _errno
.text:00411E2C                 mov     dword ptr [eax], 9
.text:00411E32                 jmp     short loc_411E02
.text:00411E32 sub_411DA0      endp
.text:00411E32
.text:00411E32 ; ---------------------------------------------------------------------------
.text:00411E34                 db 1Ch dup(90h)
.text:00411E50 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0041206F↓o
.text:00411E5C aLu             db '%lu',0              ; DATA XREF: .text:0041207F↓o
.text:00411E60 asc_411E60      db ' ',0                ; DATA XREF: .text:loc_412168↓o
.text:00411E62                 align 10h
.text:00411E70 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00411E70                                         ; DATA XREF: .text:0041219F↓o
.text:00411E90 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_4121AD↓o
.text:00411E9C aServer         db ' Server',0          ; DATA XREF: .text:004121D6↓o
.text:00411E9C                                         ; .text:loc_41234E↓o
.text:00411EA4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_4121E8↓o
.text:00411EB5 aDatacenterServ db ' Datacenter Server',0
.text:00411EB5                                         ; DATA XREF: .text:loc_4121F2↓o
.text:00411EC8 aStandardEditio db ' Standard Edition',0
.text:00411EC8                                         ; DATA XREF: .text:0041221A↓o
.text:00411EDA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_412224↓o
.text:00411EE7 aEnterpriseEdit db ' Enterprise Edition',0
.text:00411EE7                                         ; DATA XREF: .text:loc_41222E↓o
.text:00411EFB aDatacenterEdit db ' Datacenter Edition',0
.text:00411EFB                                         ; DATA XREF: .text:loc_412238↓o
.text:00411F0F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0041224B↓o
.text:00411F1D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_412255↓o
.text:00411F1D                                         ; .text:loc_412360↓o
.text:00411F2B                 align 10h
.text:00411F30 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00411F30                                         ; DATA XREF: .text:00412282↓o
.text:00411F60 aProducttype    db 'ProductType',0      ; DATA XREF: .text:004122C9↓o
.text:00411F6C aWinnt          db 'WINNT',0            ; DATA XREF: .text:00412304↓o
.text:00411F72 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0041231B↓o
.text:00411F7B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00412332↓o
.text:00411F84                 align 10h
.text:00411F90 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00411F90                                         ; DATA XREF: .text:004124A7↓o
.text:00411FB3                 db 1Dh dup(90h)
.text:00411FD0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:00411FD0                                         ; DATA XREF: .text:00412506↓o
.text:00411FF6 ; ---------------------------------------------------------------------------
.text:00411FF6
.text:00411FF6 loc_411FF6:                             ; DATA XREF: .text:loc_412571↓o
.text:00411FF6                 and     [ebx+45h], dl
.text:00411FF9                 add     [eax], ah
.text:00411FFB                 push    ebx
.text:00411FFC                 push    eax
.text:00411FFD                 xor     [eax], eax
.text:00411FFF
.text:00411FFF loc_411FFF:                             ; DATA XREF: .text:loc_4125EB↓o
.text:00411FFF                 and     [edi+53h], cl
.text:00412002                 push    edx
.text:00412003                 xor     al, [eax]
.text:00412005                 lea     esi, [esi+0]
.text:00412009                 lea     edi, [edi+0]
.text:00412010                 push    edi
.text:00412011                 push    esi
.text:00412012                 push    ebx
.text:00412013                 sub     esp, 130h
.text:00412019                 mov     ebx, [esp+140h]
.text:00412020                 call    sub_412720
.text:00412025                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041202A                 cmp     eax, 1
.text:0041202D                 jz      loc_4124D0
.text:00412033                 cmp     eax, 1
.text:00412036                 jb      loc_4124A6
.text:0041203C                 cmp     eax, 2
.text:0041203F                 jz      loc_4120F0
.text:00412045                 cmp     eax, 3
.text:00412048                 jz      short loc_4120AF
.text:0041204A                 lea     esi, [esi+0]
.text:00412050
.text:00412050 loc_412050:                             ; CODE XREF: .text:004120E5↓j
.text:00412050                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00412056                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041205C
.text:0041205C loc_41205C:                             ; CODE XREF: .text:004124EF↓j
.text:0041205C                 mov     [esp+10h], edx
.text:00412060                 mov     ebx, [esp+144h]
.text:00412067                 mov     [esp+0Ch], ecx
.text:0041206B                 mov     [esp+8], eax
.text:0041206F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00412077                 mov     [esp], ebx
.text:0041207A                 call    sprintf
.text:0041207F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00412087                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0041208D                 mov     ecx, [esp+148h]
.text:00412094                 mov     [esp+8], edi
.text:00412098                 mov     [esp], ecx
.text:0041209B                 call    sprintf
.text:004120A0                 mov     eax, 1
.text:004120A5
.text:004120A5 loc_4120A5:                             ; CODE XREF: .text:0041229F↓j
.text:004120A5                                         ; .text:004122EC↓j
.text:004120A5                 add     esp, 130h
.text:004120AB                 pop     ebx
.text:004120AC                 pop     esi
.text:004120AD                 pop     edi
.text:004120AE                 retn
.text:004120AF ; ---------------------------------------------------------------------------
.text:004120AF
.text:004120AF loc_4120AF:                             ; CODE XREF: .text:00412048↑j
.text:004120AF                 mov     dword ptr [ebx], 7263694Dh
.text:004120B5                 mov     dword ptr [ebx+4], 666F736Fh
.text:004120BC                 mov     dword ptr [ebx+8], 69572074h
.text:004120C3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004120CA                 mov     dword ptr [ebx+10h], 45432073h
.text:004120D1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:004120D7                 mov     esi, esi
.text:004120D9                 lea     edi, [edi+0]
.text:004120E0
.text:004120E0 loc_4120E0:                             ; CODE XREF: .text:00412188↓j
.text:004120E0                                         ; .text:004124C9↓j ...
.text:004120E0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004120E5                 jmp     loc_412050
.text:004120E5 ; ---------------------------------------------------------------------------
.text:004120EA                 align 10h
.text:004120F0
.text:004120F0 loc_4120F0:                             ; CODE XREF: .text:0041203F↑j
.text:004120F0                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:004120F6                 cmp     edx, 3
.text:004120F9                 mov     eax, edx
.text:004120FB                 jz      loc_412465
.text:00412101
.text:00412101 loc_412101:                             ; CODE XREF: .text:0041246C↓j
.text:00412101                 cmp     eax, 4
.text:00412104                 jz      loc_412425
.text:0041210A
.text:0041210A loc_41210A:                             ; CODE XREF: .text:0041242D↓j
.text:0041210A                 cmp     eax, 4
.text:0041210D                 ja      loc_412372
.text:00412113                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00412119                 test    ecx, ecx
.text:0041211B                 jnz     loc_412372
.text:00412121                 mov     dword ptr [ebx], 7263694Dh
.text:00412127                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041212E                 mov     dword ptr [ebx+8], 69572074h
.text:00412135                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041213C                 mov     dword ptr [ebx+10h], 544E2073h
.text:00412143
.text:00412143 loc_412143:                             ; CODE XREF: .text:004123E5↓j
.text:00412143                 mov     byte ptr [ebx+14h], 0
.text:00412147
.text:00412147 loc_412147:                             ; CODE XREF: .text:00412375↓j
.text:00412147                                         ; .text:0041238C↓j ...
.text:00412147                 mov     esi, dword_416090
.text:0041214D                 test    esi, esi
.text:0041214F                 jz      loc_412262
.text:00412155                 movzx   eax, ds:byte_4196AA
.text:0041215C                 cmp     al, 1
.text:0041215E                 jz      loc_412242
.text:00412164                 cmp     al, 3
.text:00412166                 jz      short loc_41218D
.text:00412168
.text:00412168 loc_412168:                             ; CODE XREF: .text:004121AB↓j
.text:00412168                                         ; .text:004121E6↓j ...
.text:00412168                 mov     dword ptr [esp+4], offset asc_411E60 ; " "
.text:00412170                 mov     [esp], ebx
.text:00412173                 call    strcat
.text:00412178                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00412180                 mov     [esp], ebx
.text:00412183                 call    strcat
.text:00412188                 jmp     loc_4120E0
.text:0041218D ; ---------------------------------------------------------------------------
.text:0041218D
.text:0041218D loc_41218D:                             ; CODE XREF: .text:00412166↑j
.text:0041218D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00412194                 jz      short loc_4121B6
.text:00412196
.text:00412196 loc_412196:                             ; CODE XREF: .text:004121C2↓j
.text:00412196                 test    byte ptr ds:word_4196A8, 2
.text:0041219D                 jz      short loc_4121AD
.text:0041219F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:004121A6
.text:004121A6 loc_4121A6:                             ; CODE XREF: .text:004121B4↓j
.text:004121A6                 call    printf
.text:004121AB                 jmp     short loc_412168
.text:004121AD ; ---------------------------------------------------------------------------
.text:004121AD
.text:004121AD loc_4121AD:                             ; CODE XREF: .text:0041219D↑j
.text:004121AD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:004121B4                 jmp     short loc_4121A6
.text:004121B6 ; ---------------------------------------------------------------------------
.text:004121B6
.text:004121B6 loc_4121B6:                             ; CODE XREF: .text:00412194↑j
.text:004121B6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004121BB                 cmp     eax, 2
.text:004121BE                 jz      short loc_412200
.text:004121C0                 test    eax, eax
.text:004121C2                 jnz     short loc_412196
.text:004121C4                 cmp     byte ptr ds:word_4196A8, 0
.text:004121CB                 js      short loc_4121F2
.text:004121CD                 test    byte ptr ds:word_4196A8, 2
.text:004121D4                 jnz     short loc_4121E8
.text:004121D6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:004121DE
.text:004121DE loc_4121DE:                             ; CODE XREF: .text:004121F0↓j
.text:004121DE                                         ; .text:004121FA↓j ...
.text:004121DE                 mov     [esp], ebx
.text:004121E1                 call    strcat
.text:004121E6                 jmp     short loc_412168
.text:004121E8 ; ---------------------------------------------------------------------------
.text:004121E8
.text:004121E8 loc_4121E8:                             ; CODE XREF: .text:004121D4↑j
.text:004121E8                                         ; .text:00412349↓j
.text:004121E8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:004121F0                 jmp     short loc_4121DE
.text:004121F2 ; ---------------------------------------------------------------------------
.text:004121F2
.text:004121F2 loc_4121F2:                             ; CODE XREF: .text:004121CB↑j
.text:004121F2                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:004121FA                 jmp     short loc_4121DE
.text:004121FA ; ---------------------------------------------------------------------------
.text:004121FC                 align 10h
.text:00412200
.text:00412200 loc_412200:                             ; CODE XREF: .text:004121BE↑j
.text:00412200                 cmp     byte ptr ds:word_4196A8, 0
.text:00412207                 js      short loc_412238
.text:00412209                 movzx   eax, ds:word_4196A8
.text:00412210                 test    al, 2
.text:00412212                 jnz     short loc_41222E
.text:00412214                 cmp     ax, 400h
.text:00412218                 jz      short loc_412224
.text:0041221A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:00412222                 jmp     short loc_4121DE
.text:00412224 ; ---------------------------------------------------------------------------
.text:00412224
.text:00412224 loc_412224:                             ; CODE XREF: .text:00412218↑j
.text:00412224                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0041222C                 jmp     short loc_4121DE
.text:0041222E ; ---------------------------------------------------------------------------
.text:0041222E
.text:0041222E loc_41222E:                             ; CODE XREF: .text:00412212↑j
.text:0041222E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00412236                 jmp     short loc_4121DE
.text:00412238 ; ---------------------------------------------------------------------------
.text:00412238
.text:00412238 loc_412238:                             ; CODE XREF: .text:00412207↑j
.text:00412238                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00412240                 jmp     short loc_4121DE
.text:00412242 ; ---------------------------------------------------------------------------
.text:00412242
.text:00412242 loc_412242:                             ; CODE XREF: .text:0041215E↑j
.text:00412242                 test    byte ptr ds:word_4196A8+1, 2
.text:00412249                 jz      short loc_412255
.text:0041224B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00412253                 jmp     short loc_4121DE
.text:00412255 ; ---------------------------------------------------------------------------
.text:00412255
.text:00412255 loc_412255:                             ; CODE XREF: .text:00412249↑j
.text:00412255                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0041225D                 jmp     loc_4121DE
.text:00412262 ; ---------------------------------------------------------------------------
.text:00412262
.text:00412262 loc_412262:                             ; CODE XREF: .text:0041214F↑j
.text:00412262                 mov     dword ptr [esp+28h], 0FFh
.text:0041226A                 lea     edx, [esp+2Ch]
.text:0041226E                 mov     [esp+10h], edx
.text:00412272                 mov     dword ptr [esp+0Ch], 1
.text:0041227A                 mov     dword ptr [esp+8], 0
.text:00412282                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0041228A                 mov     dword ptr [esp], 80000002h
.text:00412291                 call    RegOpenKeyExA
.text:00412296                 mov     edi, eax
.text:00412298                 sub     esp, 14h
.text:0041229B                 xor     eax, eax
.text:0041229D                 test    edi, edi
.text:0041229F                 jnz     loc_4120A5
.text:004122A5                 mov     dword ptr [esp+0Ch], 0
.text:004122AD                 mov     edi, [esp+2Ch]
.text:004122B1                 lea     esi, [esp+28h]
.text:004122B5                 mov     [esp+14h], esi
.text:004122B9                 lea     esi, [esp+30h]
.text:004122BD                 mov     [esp+10h], esi
.text:004122C1                 mov     dword ptr [esp+8], 0
.text:004122C9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:004122D1                 mov     [esp], edi
.text:004122D4                 call    RegQueryValueExA
.text:004122D9                 sub     esp, 18h
.text:004122DC                 test    eax, eax
.text:004122DE                 jnz     short loc_4122EA
.text:004122E0                 cmp     dword ptr [esp+28h], 0FFh
.text:004122E8                 jbe     short loc_4122F1
.text:004122EA
.text:004122EA loc_4122EA:                             ; CODE XREF: .text:004122DE↑j
.text:004122EA                 xor     eax, eax
.text:004122EC                 jmp     loc_4120A5
.text:004122F1 ; ---------------------------------------------------------------------------
.text:004122F1
.text:004122F1 loc_4122F1:                             ; CODE XREF: .text:004122E8↑j
.text:004122F1                 mov     edx, [esp+2Ch]
.text:004122F5                 mov     [esp], edx
.text:004122F8                 call    RegCloseKey
.text:004122FD                 sub     esp, 4
.text:00412300                 mov     [esp+4], esi
.text:00412304                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0041230B                 call    lstrcmpiA
.text:00412310                 sub     esp, 8
.text:00412313                 test    eax, eax
.text:00412315                 jz      short loc_412360
.text:00412317
.text:00412317 loc_412317:                             ; CODE XREF: .text:00412370↓j
.text:00412317                 mov     [esp+4], esi
.text:0041231B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:00412322                 call    lstrcmpiA
.text:00412327                 sub     esp, 8
.text:0041232A                 test    eax, eax
.text:0041232C                 jz      short loc_41234E
.text:0041232E
.text:0041232E loc_41232E:                             ; CODE XREF: .text:0041235E↓j
.text:0041232E                 mov     [esp+4], esi
.text:00412332                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00412339                 call    lstrcmpiA
.text:0041233E                 sub     esp, 8
.text:00412341                 test    eax, eax
.text:00412343                 jnz     loc_412168
.text:00412349                 jmp     loc_4121E8
.text:0041234E ; ---------------------------------------------------------------------------
.text:0041234E
.text:0041234E loc_41234E:                             ; CODE XREF: .text:0041232C↑j
.text:0041234E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00412356                 mov     [esp], ebx
.text:00412359                 call    strcat
.text:0041235E                 jmp     short loc_41232E
.text:00412360 ; ---------------------------------------------------------------------------
.text:00412360
.text:00412360 loc_412360:                             ; CODE XREF: .text:00412315↑j
.text:00412360                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00412368                 mov     [esp], ebx
.text:0041236B                 call    strcat
.text:00412370                 jmp     short loc_412317
.text:00412372 ; ---------------------------------------------------------------------------
.text:00412372
.text:00412372 loc_412372:                             ; CODE XREF: .text:0041210D↑j
.text:00412372                                         ; .text:0041211B↑j
.text:00412372                 cmp     eax, 5
.text:00412375                 jnz     loc_412147
.text:0041237B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00412380                 cmp     eax, 2
.text:00412383                 jz      short loc_4123EA
.text:00412385                 cmp     eax, 1
.text:00412388                 jz      short loc_4123C3
.text:0041238A                 test    eax, eax
.text:0041238C                 jnz     loc_412147
.text:00412392                 mov     dword ptr [ebx], 7263694Dh
.text:00412398                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041239F                 mov     dword ptr [ebx+8], 69572074h
.text:004123A6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004123AD                 mov     dword ptr [ebx+10h], 30322073h
.text:004123B4                 mov     word ptr [ebx+14h], 3030h
.text:004123BA                 mov     byte ptr [ebx+16h], 0
.text:004123BE                 jmp     loc_412147
.text:004123C3 ; ---------------------------------------------------------------------------
.text:004123C3
.text:004123C3 loc_4123C3:                             ; CODE XREF: .text:00412388↑j
.text:004123C3                 mov     dword ptr [ebx], 7263694Dh
.text:004123C9                 mov     dword ptr [ebx+4], 666F736Fh
.text:004123D0                 mov     dword ptr [ebx+8], 69572074h
.text:004123D7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004123DE                 mov     dword ptr [ebx+10h], 50582073h
.text:004123E5                 jmp     loc_412143
.text:004123EA ; ---------------------------------------------------------------------------
.text:004123EA
.text:004123EA loc_4123EA:                             ; CODE XREF: .text:00412383↑j
.text:004123EA                 mov     dword ptr [ebx], 7263694Dh
.text:004123F0                 mov     dword ptr [ebx+4], 666F736Fh
.text:004123F7                 mov     dword ptr [ebx+8], 69572074h
.text:004123FE                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00412405                 mov     dword ptr [ebx+10h], 65532073h
.text:0041240C                 mov     dword ptr [ebx+14h], 72657672h
.text:00412413                 mov     dword ptr [ebx+18h], 30303220h
.text:0041241A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00412420                 jmp     loc_412147
.text:00412425 ; ---------------------------------------------------------------------------
.text:00412425
.text:00412425 loc_412425:                             ; CODE XREF: .text:00412104↑j
.text:00412425                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041242B                 test    edx, edx
.text:0041242D                 jnz     loc_41210A
.text:00412433                 mov     dword ptr [ebx], 7263694Dh
.text:00412439                 mov     dword ptr [ebx+4], 666F736Fh
.text:00412440                 mov     dword ptr [ebx+8], 69572074h
.text:00412447                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041244E                 mov     dword ptr [ebx+10h], 544E2073h
.text:00412455                 mov     dword ptr [ebx+14h], 302E3420h
.text:0041245C                 mov     byte ptr [ebx+18h], 0
.text:00412460                 jmp     loc_412147
.text:00412465 ; ---------------------------------------------------------------------------
.text:00412465
.text:00412465 loc_412465:                             ; CODE XREF: .text:004120FB↑j
.text:00412465                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0041246C                 jnz     loc_412101
.text:00412472                 mov     dword ptr [ebx], 7263694Dh
.text:00412478                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041247F                 mov     dword ptr [ebx+8], 69572074h
.text:00412486                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041248D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00412494                 mov     dword ptr [ebx+14h], 352E3320h
.text:0041249B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:004124A1                 jmp     loc_412147
.text:004124A6 ; ---------------------------------------------------------------------------
.text:004124A6
.text:004124A6 loc_4124A6:                             ; CODE XREF: .text:00412036↑j
.text:004124A6                 cld
.text:004124A7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:004124AC                 mov     ecx, 8
.text:004124B1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:004124B8                 mov     edi, ebx
.text:004124BA                 rep movsd
.text:004124BC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:004124C3                 mov     [edi+2], dl
.text:004124C6                 mov     [edi], si
.text:004124C9                 jmp     loc_4120E0
.text:004124C9 ; ---------------------------------------------------------------------------
.text:004124CE                 align 10h
.text:004124D0
.text:004124D0 loc_4124D0:                             ; CODE XREF: .text:0041202D↑j
.text:004124D0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004124D6                 cmp     ecx, 4
.text:004124D9                 jz      loc_412590
.text:004124DF
.text:004124DF loc_4124DF:                             ; CODE XREF: .text:004125E6↓j
.text:004124DF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004124E5
.text:004124E5 loc_4124E5:                             ; CODE XREF: .text:00412598↓j
.text:004124E5                 cmp     ecx, 4
.text:004124E8                 jz      short loc_4124F4
.text:004124EA
.text:004124EA loc_4124EA:                             ; CODE XREF: .text:004124FC↓j
.text:004124EA                                         ; .text:00412501↓j
.text:004124EA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004124EF                 jmp     loc_41205C
.text:004124F4 ; ---------------------------------------------------------------------------
.text:004124F4
.text:004124F4 loc_4124F4:                             ; CODE XREF: .text:004124E8↑j
.text:004124F4                 cmp     edx, 0Ah
.text:004124F7                 jz      short loc_412521
.text:004124F9
.text:004124F9 loc_4124F9:                             ; CODE XREF: .text:0041256F↓j
.text:004124F9                 cmp     ecx, 4
.text:004124FC                 jnz     short loc_4124EA
.text:004124FE                 cmp     edx, 5Ah ; 'Z'
.text:00412501                 jnz     short loc_4124EA
.text:00412503                 cld
.text:00412504                 mov     edi, ebx
.text:00412506                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0041250B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00412512                 mov     ecx, 9
.text:00412517                 rep movsd
.text:00412519                 mov     [edi], bx
.text:0041251C                 jmp     loc_4120E0
.text:00412521 ; ---------------------------------------------------------------------------
.text:00412521
.text:00412521 loc_412521:                             ; CODE XREF: .text:004124F7↑j
.text:00412521                 mov     dword ptr [ebx], 7263694Dh
.text:00412527                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041252E                 mov     dword ptr [ebx+8], 69572074h
.text:00412535                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041253C                 mov     dword ptr [ebx+10h], 38392073h
.text:00412543                 mov     byte ptr [ebx+14h], 0
.text:00412547                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041254D                 lea     edi, [edx-7CFh]
.text:00412553                 cmp     edi, 0B7h ; '·'
.text:00412559                 jbe     short loc_412583
.text:0041255B                 cmp     edx, 886h
.text:00412561                 ja      short loc_412571
.text:00412563
.text:00412563 loc_412563:                             ; CODE XREF: .text:00412581↓j
.text:00412563                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00412569                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041256F                 jmp     short loc_4124F9
.text:00412571 ; ---------------------------------------------------------------------------
.text:00412571
.text:00412571 loc_412571:                             ; CODE XREF: .text:00412561↑j
.text:00412571                 mov     dword ptr [esp+4], offset loc_411FF6
.text:00412579
.text:00412579 loc_412579:                             ; CODE XREF: .text:0041258B↓j
.text:00412579                 mov     [esp], ebx
.text:0041257C                 call    strcat
.text:00412581                 jmp     short loc_412563
.text:00412583 ; ---------------------------------------------------------------------------
.text:00412583
.text:00412583 loc_412583:                             ; CODE XREF: .text:00412559↑j
.text:00412583                 mov     dword ptr [esp+4], 411FFAh
.text:0041258B                 jmp     short loc_412579
.text:0041258B ; ---------------------------------------------------------------------------
.text:0041258D                 align 10h
.text:00412590
.text:00412590 loc_412590:                             ; CODE XREF: .text:004124D9↑j
.text:00412590                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00412596                 test    edx, edx
.text:00412598                 jnz     loc_4124E5
.text:0041259E                 mov     dword ptr [ebx], 7263694Dh
.text:004125A4                 mov     dword ptr [ebx+4], 666F736Fh
.text:004125AB                 mov     dword ptr [ebx+8], 69572074h
.text:004125B2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004125B9                 mov     dword ptr [ebx+10h], 35392073h
.text:004125C0                 mov     byte ptr [ebx+14h], 0
.text:004125C4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004125CA                 lea     ecx, [edx-3B7h]
.text:004125D0                 cmp     ecx, 81h
.text:004125D6                 jbe     short loc_4125FD
.text:004125D8                 cmp     edx, 438h
.text:004125DE                 ja      short loc_4125EB
.text:004125E0
.text:004125E0 loc_4125E0:                             ; CODE XREF: .text:004125FB↓j
.text:004125E0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004125E6                 jmp     loc_4124DF
.text:004125EB ; ---------------------------------------------------------------------------
.text:004125EB
.text:004125EB loc_4125EB:                             ; CODE XREF: .text:004125DE↑j
.text:004125EB                 mov     dword ptr [esp+4], offset loc_411FFF
.text:004125F3
.text:004125F3 loc_4125F3:                             ; CODE XREF: .text:00412605↓j
.text:004125F3                 mov     [esp], ebx
.text:004125F6                 call    strcat
.text:004125FB                 jmp     short loc_4125E0
.text:004125FD ; ---------------------------------------------------------------------------
.text:004125FD
.text:004125FD loc_4125FD:                             ; CODE XREF: .text:004125D6↑j
.text:004125FD                 mov     dword ptr [esp+4], 411FFAh
.text:00412605                 jmp     short loc_4125F3
.text:00412605 ; ---------------------------------------------------------------------------
.text:00412607                 align 10h
.text:00412610
.text:00412610 ; =============== S U B R O U T I N E =======================================
.text:00412610
.text:00412610
.text:00412610 sub_412610      proc near               ; CODE XREF: .text:004100CE↑p
.text:00412610                                         ; sub_410550+12A↑p
.text:00412610                 sub     esp, 0Ch
.text:00412613                 call    sub_412720
.text:00412618                 mov     eax, ds:dword_419600
.text:0041261D                 add     esp, 0Ch
.text:00412620                 retn
.text:00412620 sub_412610      endp
.text:00412620
.text:00412621 ; ---------------------------------------------------------------------------
.text:00412621                 jmp     short loc_412630
.text:00412621 ; ---------------------------------------------------------------------------
.text:00412623                 align 10h
.text:00412630
.text:00412630 loc_412630:                             ; CODE XREF: .text:00412621↑j
.text:00412630                 sub     esp, 0Ch
.text:00412633                 call    sub_412720
.text:00412638                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041263D                 add     esp, 0Ch
.text:00412640                 retn
.text:00412641 ; ---------------------------------------------------------------------------
.text:00412641                 jmp     short loc_412650
.text:00412641 ; ---------------------------------------------------------------------------
.text:00412643                 align 10h
.text:00412650
.text:00412650 loc_412650:                             ; CODE XREF: .text:00412641↑j
.text:00412650                 sub     esp, 0Ch
.text:00412653                 call    sub_412720
.text:00412658                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0041265D                 add     esp, 0Ch
.text:00412660                 retn
.text:00412661 ; ---------------------------------------------------------------------------
.text:00412661                 jmp     short loc_412670
.text:00412661 ; ---------------------------------------------------------------------------
.text:00412663                 align 10h
.text:00412670
.text:00412670 loc_412670:                             ; CODE XREF: .text:00412661↑j
.text:00412670                 sub     esp, 0Ch
.text:00412673                 call    sub_412720
.text:00412678                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041267D                 add     esp, 0Ch
.text:00412680                 retn
.text:00412681 ; ---------------------------------------------------------------------------
.text:00412681                 jmp     short loc_412690
.text:00412681 ; ---------------------------------------------------------------------------
.text:00412683                 align 10h
.text:00412690
.text:00412690 loc_412690:                             ; CODE XREF: .text:00412681↑j
.text:00412690                 sub     esp, 0Ch
.text:00412693                 call    GetVersion
.text:00412698                 shr     eax, 10h
.text:0041269B                 add     esp, 0Ch
.text:0041269E                 retn
.text:0041269E ; ---------------------------------------------------------------------------
.text:0041269F                 align 10h
.text:004126A0                 sub     esp, 0Ch
.text:004126A3                 call    sub_412720
.text:004126A8                 xor     eax, eax
.text:004126AA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:004126B1                 setz    al
.text:004126B4                 add     esp, 0Ch
.text:004126B7                 retn
.text:004126B7 ; ---------------------------------------------------------------------------
.text:004126B8                 align 10h
.text:004126C0
.text:004126C0 ; =============== S U B R O U T I N E =======================================
.text:004126C0
.text:004126C0
.text:004126C0 sub_4126C0      proc near               ; CODE XREF: .text:loc_4100B4↑p
.text:004126C0                                         ; .text:004100C5↑p ...
.text:004126C0                 sub     esp, 0Ch
.text:004126C3                 call    sub_412720
.text:004126C8                 xor     eax, eax
.text:004126CA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:004126D1                 setz    al
.text:004126D4                 add     esp, 0Ch
.text:004126D7                 retn
.text:004126D7 sub_4126C0      endp
.text:004126D7
.text:004126D7 ; ---------------------------------------------------------------------------
.text:004126D8                 align 10h
.text:004126E0                 sub     esp, 0Ch
.text:004126E3                 call    sub_412720
.text:004126E8                 xor     eax, eax
.text:004126EA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:004126F1                 setz    al
.text:004126F4                 add     esp, 0Ch
.text:004126F7                 retn
.text:004126F7 ; ---------------------------------------------------------------------------
.text:004126F8                 align 10h
.text:00412700                 sub     esp, 0Ch
.text:00412703                 call    sub_412720
.text:00412708                 xor     eax, eax
.text:0041270A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00412711                 setz    al
.text:00412714                 add     esp, 0Ch
.text:00412717                 retn
.text:00412717 ; ---------------------------------------------------------------------------
.text:00412718                 align 10h
.text:00412720
.text:00412720 ; =============== S U B R O U T I N E =======================================
.text:00412720
.text:00412720
.text:00412720 sub_412720      proc near               ; CODE XREF: .text:00412020↑p
.text:00412720                                         ; sub_412610+3↑p ...
.text:00412720
.text:00412720 lpVersionInformation= dword ptr -0BCh
.text:00412720 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00412720
.text:00412720                 sub     esp, 0BCh
.text:00412726                 mov     edx, ds:dword_4196B0
.text:0041272C                 test    edx, edx
.text:0041272E                 jz      short loc_412740
.text:00412730
.text:00412730 loc_412730:                             ; CODE XREF: sub_412720+7B↓j
.text:00412730                 mov     edx, 1
.text:00412735
.text:00412735 loc_412735:                             ; CODE XREF: sub_412720+217↓j
.text:00412735                 mov     eax, edx
.text:00412737                 add     esp, 0BCh
.text:0041273D                 retn
.text:0041273D ; ---------------------------------------------------------------------------
.text:0041273E                 align 10h
.text:00412740
.text:00412740 loc_412740:                             ; CODE XREF: sub_412720+E↑j
.text:00412740                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00412747                 mov     edx, 9Ch ; 'œ'
.text:0041274C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00412752                 call    GetVersionExA
.text:00412757                 sub     esp, 4
.text:0041275A                 test    eax, eax
.text:0041275C                 jz      loc_412914
.text:00412762
.text:00412762 loc_412762:                             ; CODE XREF: sub_412720+245↓j
.text:00412762                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00412769                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041276E                 cmp     eax, 1
.text:00412771                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00412777                 jz      loc_412860
.text:0041277D                 cmp     eax, 1
.text:00412780                 jb      loc_412850
.text:00412786                 cmp     eax, 2
.text:00412789                 jz      short loc_4127AA
.text:0041278B                 cmp     eax, 3
.text:0041278E                 jz      short loc_41279D
.text:00412790
.text:00412790 loc_412790:                             ; CODE XREF: sub_412720+88↓j
.text:00412790                                         ; sub_412720+C0↓j ...
.text:00412790                 mov     edx, 1
.text:00412795                 mov     ds:dword_4196B0, edx
.text:0041279B                 jmp     short loc_412730
.text:0041279D ; ---------------------------------------------------------------------------
.text:0041279D
.text:0041279D loc_41279D:                             ; CODE XREF: sub_412720+6E↑j
.text:0041279D                 mov     ecx, 17h
.text:004127A2
.text:004127A2 loc_4127A2:                             ; CODE XREF: sub_412720+1A7↓j
.text:004127A2                 mov     ds:dword_419600, ecx
.text:004127A8                 jmp     short loc_412790
.text:004127AA ; ---------------------------------------------------------------------------
.text:004127AA
.text:004127AA loc_4127AA:                             ; CODE XREF: sub_412720+69↑j
.text:004127AA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:004127AF                 cmp     eax, 3
.text:004127B2                 jz      short loc_41282B
.text:004127B4                 cmp     eax, 4
.text:004127B7                 jz      short loc_41281A
.text:004127B9
.text:004127B9 loc_4127B9:                             ; CODE XREF: sub_412720+102↓j
.text:004127B9                 cmp     eax, 4
.text:004127BC                 ja      short loc_4127E2
.text:004127BE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004127C4                 test    ecx, ecx
.text:004127C6                 jnz     short loc_4127E2
.text:004127C8                 mov     edx, 1Eh
.text:004127CD
.text:004127CD loc_4127CD:                             ; CODE XREF: sub_412720+DF↓j
.text:004127CD                 mov     ds:dword_419600, edx
.text:004127D3
.text:004127D3 loc_4127D3:                             ; CODE XREF: sub_412720+C5↓j
.text:004127D3                                         ; sub_412720+D8↓j ...
.text:004127D3                 movzx   ecx, ds:word_4196A4
.text:004127DA                 add     ds:dword_419600, ecx
.text:004127E0                 jmp     short loc_412790
.text:004127E2 ; ---------------------------------------------------------------------------
.text:004127E2
.text:004127E2 loc_4127E2:                             ; CODE XREF: sub_412720+9C↑j
.text:004127E2                                         ; sub_412720+A6↑j
.text:004127E2                 cmp     eax, 5
.text:004127E5                 jnz     short loc_4127D3
.text:004127E7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004127EC                 cmp     eax, 2
.text:004127EF                 jz      short loc_41280E
.text:004127F1                 cmp     eax, 1
.text:004127F4                 jz      short loc_412801
.text:004127F6                 test    eax, eax
.text:004127F8                 jnz     short loc_4127D3
.text:004127FA                 mov     edx, 32h ; '2'
.text:004127FF                 jmp     short loc_4127CD
.text:00412801 ; ---------------------------------------------------------------------------
.text:00412801
.text:00412801 loc_412801:                             ; CODE XREF: sub_412720+D4↑j
.text:00412801                 mov     ecx, 3Ch ; '<'
.text:00412806
.text:00412806 loc_412806:                             ; CODE XREF: sub_412720+122↓j
.text:00412806                 mov     ds:dword_419600, ecx
.text:0041280C                 jmp     short loc_4127D3
.text:0041280E ; ---------------------------------------------------------------------------
.text:0041280E
.text:0041280E loc_41280E:                             ; CODE XREF: sub_412720+CF↑j
.text:0041280E                 mov     eax, 46h ; 'F'
.text:00412813
.text:00412813 loc_412813:                             ; CODE XREF: sub_412720+109↓j
.text:00412813                                         ; sub_412720+129↓j
.text:00412813                 mov     ds:dword_419600, eax
.text:00412818                 jmp     short loc_4127D3
.text:0041281A ; ---------------------------------------------------------------------------
.text:0041281A
.text:0041281A loc_41281A:                             ; CODE XREF: sub_412720+97↑j
.text:0041281A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00412820                 test    ecx, ecx
.text:00412822                 jnz     short loc_4127B9
.text:00412824                 mov     eax, 28h ; '('
.text:00412829                 jmp     short loc_412813
.text:0041282B ; ---------------------------------------------------------------------------
.text:0041282B
.text:0041282B loc_41282B:                             ; CODE XREF: sub_412720+92↑j
.text:0041282B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00412830                 cmp     eax, 33h ; '3'
.text:00412833                 jz      short loc_412844
.text:00412835                 cmp     eax, 5
.text:00412838                 setz    cl
.text:0041283B                 movzx   edx, cl
.text:0041283E                 lea     ecx, [edx+edx*4+1Eh]
.text:00412842                 jmp     short loc_412806
.text:00412844 ; ---------------------------------------------------------------------------
.text:00412844
.text:00412844 loc_412844:                             ; CODE XREF: sub_412720+113↑j
.text:00412844                 mov     eax, 24h ; '$'
.text:00412849                 jmp     short loc_412813
.text:00412849 ; ---------------------------------------------------------------------------
.text:0041284B                 align 10h
.text:00412850
.text:00412850 loc_412850:                             ; CODE XREF: sub_412720+60↑j
.text:00412850                 mov     edx, 2
.text:00412855                 mov     ds:dword_419600, edx
.text:0041285B                 jmp     loc_412790
.text:00412860 ; ---------------------------------------------------------------------------
.text:00412860
.text:00412860 loc_412860:                             ; CODE XREF: sub_412720+57↑j
.text:00412860                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00412866                 cmp     ecx, 4
.text:00412869                 jnz     loc_412790
.text:0041286F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00412874                 test    eax, eax
.text:00412876                 jnz     short loc_41289A
.text:00412878                 mov     eax, 0Ah
.text:0041287D                 mov     ds:dword_419600, eax
.text:00412882                 lea     eax, [edx-3B7h]
.text:00412888                 cmp     eax, 81h
.text:0041288D                 ja      short loc_412905
.text:0041288F                 mov     edx, 0Bh
.text:00412894
.text:00412894 loc_412894:                             ; CODE XREF: sub_412720+1F2↓j
.text:00412894                 mov     ds:dword_419600, edx
.text:0041289A
.text:0041289A loc_41289A:                             ; CODE XREF: sub_412720+156↑j
.text:0041289A                                         ; sub_412720+1EB↓j
.text:0041289A                 cmp     ecx, 4
.text:0041289D                 jnz     loc_412790
.text:004128A3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:004128AA                 jz      short loc_4128CC
.text:004128AC
.text:004128AC loc_4128AC:                             ; CODE XREF: sub_412720+1D4↓j
.text:004128AC                                         ; sub_412720+1DC↓j
.text:004128AC                 cmp     ecx, 4
.text:004128AF                 jnz     loc_412790
.text:004128B5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:004128BC                 jnz     loc_412790
.text:004128C2                 mov     ecx, 12h
.text:004128C7                 jmp     loc_4127A2
.text:004128CC ; ---------------------------------------------------------------------------
.text:004128CC
.text:004128CC loc_4128CC:                             ; CODE XREF: sub_412720+18A↑j
.text:004128CC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004128D2                 mov     eax, 0Eh
.text:004128D7                 mov     ds:dword_419600, eax
.text:004128DC                 lea     eax, [edx-7CFh]
.text:004128E2                 cmp     eax, 0B7h ; '·'
.text:004128E7                 ja      short loc_4128F6
.text:004128E9                 mov     edx, 0Fh
.text:004128EE
.text:004128EE loc_4128EE:                             ; CODE XREF: sub_412720+1E3↓j
.text:004128EE                 mov     ds:dword_419600, edx
.text:004128F4                 jmp     short loc_4128AC
.text:004128F6 ; ---------------------------------------------------------------------------
.text:004128F6
.text:004128F6 loc_4128F6:                             ; CODE XREF: sub_412720+1C7↑j
.text:004128F6                 cmp     edx, 886h
.text:004128FC                 jbe     short loc_4128AC
.text:004128FE                 mov     edx, 10h
.text:00412903                 jmp     short loc_4128EE
.text:00412905 ; ---------------------------------------------------------------------------
.text:00412905
.text:00412905 loc_412905:                             ; CODE XREF: sub_412720+16D↑j
.text:00412905                 cmp     edx, 438h
.text:0041290B                 jbe     short loc_41289A
.text:0041290D                 mov     edx, 0Ch
.text:00412912                 jmp     short loc_412894
.text:00412914 ; ---------------------------------------------------------------------------
.text:00412914
.text:00412914 loc_412914:                             ; CODE XREF: sub_412720+3C↑j
.text:00412914                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0041291C                 xor     edx, edx
.text:0041291E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00412922                 mov     dword_416090, edx
.text:00412928                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0041292B                 call    GetVersionExA
.text:00412930                 sub     esp, 4
.text:00412933                 xor     edx, edx
.text:00412935                 test    eax, eax
.text:00412937                 jz      loc_412735
.text:0041293D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00412941                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00412945                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0041294B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0041294F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00412955                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00412959                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0041295F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00412965                 jmp     loc_412762
.text:00412965 sub_412720      endp
.text:00412965
.text:00412965 ; ---------------------------------------------------------------------------
.text:0041296A                 align 10h
.text:00412970
.text:00412970 ; =============== S U B R O U T I N E =======================================
.text:00412970
.text:00412970 ; Attributes: noreturn
.text:00412970
.text:00412970 sub_412970      proc near               ; CODE XREF: .text:00411559↑p
.text:00412970                                         ; sub_412970↓j
.text:00412970                 jmp     short sub_412970
.text:00412970 sub_412970      endp
.text:00412970
.text:00412970 ; ---------------------------------------------------------------------------
.text:00412972                 align 10h
.text:00412980
.text:00412980 ; =============== S U B R O U T I N E =======================================
.text:00412980
.text:00412980
.text:00412980 sub_412980      proc near               ; CODE XREF: .text:004112B5↑p
.text:00412980
.text:00412980 FileHandle      = dword ptr -1Ch
.text:00412980 dwFileOffsetLow = dword ptr -18h
.text:00412980 dwFileOffsetHigh= dword ptr -14h
.text:00412980 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:00412980 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:00412980 var_8           = dword ptr -8
.text:00412980 var_4           = dword ptr -4
.text:00412980 arg_0           = dword ptr  4
.text:00412980
.text:00412980                 sub     esp, 1Ch
.text:00412983                 mov     edx, [esp+1Ch+arg_0]
.text:00412987                 mov     [esp+1Ch+var_4], esi
.text:0041298B                 mov     [esp+1Ch+var_8], ebx
.text:0041298F                 mov     ebx, [edx+10h]
.text:00412992                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:00412995                 call    _get_osfhandle
.text:0041299A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041299D                 mov     esi, eax
.text:0041299F                 call    _filelengthi64
.text:004129A4                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:004129A8                 cdq
.text:004129A9                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:004129AC                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:004129B0                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:004129B8                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:004129C0                 call    UnlockFile
.text:004129C5                 sub     esp, 14h
.text:004129C8                 mov     ebx, [esp+1Ch+var_8]
.text:004129CC                 mov     esi, [esp+1Ch+var_4]
.text:004129D0                 add     esp, 1Ch
.text:004129D3                 retn
.text:004129D3 sub_412980      endp
.text:004129D3
.text:004129D3 ; ---------------------------------------------------------------------------
.text:004129D4                 align 10h
.text:004129E0
.text:004129E0 ; =============== S U B R O U T I N E =======================================
.text:004129E0
.text:004129E0
.text:004129E0 ; int __cdecl sub_4129E0(int, char *Control)
.text:004129E0 sub_4129E0      proc near               ; CODE XREF: .text:00411176↑p
.text:004129E0                                         ; .text:004111C6↑p ...
.text:004129E0
.text:004129E0 Str             = dword ptr -1Ch
.text:004129E0 Val             = dword ptr -18h
.text:004129E0 var_8           = dword ptr -8
.text:004129E0 var_4           = dword ptr -4
.text:004129E0 arg_0           = dword ptr  4
.text:004129E0 Control         = dword ptr  8
.text:004129E0
.text:004129E0                 sub     esp, 1Ch
.text:004129E3                 xor     eax, eax
.text:004129E5                 mov     edx, [esp+1Ch+Control]
.text:004129E9                 mov     [esp+1Ch+var_4], esi
.text:004129ED                 mov     esi, [esp+1Ch+arg_0]
.text:004129F1                 mov     [esp+1Ch+var_8], ebx
.text:004129F5                 mov     ebx, [esi]
.text:004129F7                 test    ebx, ebx
.text:004129F9                 jz      short loc_412A28
.text:004129FB                 movzx   eax, byte ptr [edx]
.text:004129FE                 test    al, al
.text:00412A00                 jz      short loc_412A20
.text:00412A02                 cmp     byte ptr [edx+1], 0
.text:00412A06                 jnz     short loc_412A60
.text:00412A08                 movzx   ecx, byte ptr [ebx]
.text:00412A0B                 mov     edx, ebx
.text:00412A0D                 cmp     cl, al
.text:00412A0F                 jz      short loc_412A52
.text:00412A11                 test    cl, cl
.text:00412A13                 jnz     short loc_412A34
.text:00412A15                 lea     esi, [esi+0]
.text:00412A19                 lea     edi, [edi+0]
.text:00412A20
.text:00412A20 loc_412A20:                             ; CODE XREF: sub_4129E0+20↑j
.text:00412A20                                         ; sub_4129E0+74↓j
.text:00412A20                 mov     dword ptr [esi], 0
.text:00412A26
.text:00412A26 loc_412A26:                             ; CODE XREF: sub_4129E0+7C↓j
.text:00412A26                 mov     eax, ebx
.text:00412A28
.text:00412A28 loc_412A28:                             ; CODE XREF: sub_4129E0+19↑j
.text:00412A28                 mov     ebx, [esp+1Ch+var_8]
.text:00412A2C                 mov     esi, [esp+1Ch+var_4]
.text:00412A30                 add     esp, 1Ch
.text:00412A33                 retn
.text:00412A34 ; ---------------------------------------------------------------------------
.text:00412A34
.text:00412A34 loc_412A34:                             ; CODE XREF: sub_4129E0+33↑j
.text:00412A34                 movsx   edx, al
.text:00412A37                 mov     [esp+1Ch+Val], edx ; Val
.text:00412A3B                 lea     edx, [ebx+1]
.text:00412A3E                 mov     [esp+1Ch+Str], edx ; Str
.text:00412A41                 call    strchr
.text:00412A46                 lea     esi, [esi+0]
.text:00412A49                 lea     edi, [edi+0]
.text:00412A50
.text:00412A50 loc_412A50:                             ; CODE XREF: sub_4129E0+8C↓j
.text:00412A50                 mov     edx, eax
.text:00412A52
.text:00412A52 loc_412A52:                             ; CODE XREF: sub_4129E0+2F↑j
.text:00412A52                 test    edx, edx
.text:00412A54                 jz      short loc_412A20
.text:00412A56                 mov     byte ptr [edx], 0
.text:00412A59                 inc     edx
.text:00412A5A                 mov     [esi], edx
.text:00412A5C                 jmp     short loc_412A26
.text:00412A5C ; ---------------------------------------------------------------------------
.text:00412A5E                 align 10h
.text:00412A60
.text:00412A60 loc_412A60:                             ; CODE XREF: sub_4129E0+26↑j
.text:00412A60                 mov     [esp+1Ch+Val], edx ; Control
.text:00412A64                 mov     [esp+1Ch+Str], ebx ; Str
.text:00412A67                 call    strpbrk
.text:00412A6C                 jmp     short loc_412A50
.text:00412A6C sub_4129E0      endp
.text:00412A6C
.text:00412A6C ; ---------------------------------------------------------------------------
.text:00412A6E                 align 10h
.text:00412A70 aTmpf           db 'tmpf',0             ; DATA XREF: sub_412A80+20↓o
.text:00412A75 ; const char aWBd[]
.text:00412A75 aWBd            db 'w+bD',0             ; DATA XREF: sub_412A80+5E↓o
.text:00412A7A                 align 10h
.text:00412A80
.text:00412A80 ; =============== S U B R O U T I N E =======================================
.text:00412A80
.text:00412A80
.text:00412A80 sub_412A80      proc near               ; CODE XREF: sub_411BEF+A4↑p
.text:00412A80
.text:00412A80 FileHandle      = dword ptr -13Ch
.text:00412A80 Format          = dword ptr -138h
.text:00412A80 var_134         = dword ptr -134h
.text:00412A80 var_130         = dword ptr -130h
.text:00412A80 var_12C         = dword ptr -12Ch
.text:00412A80 FileName        = byte ptr -11Ch
.text:00412A80 var_8           = dword ptr -8
.text:00412A80 var_4           = dword ptr -4
.text:00412A80
.text:00412A80                 sub     esp, 13Ch
.text:00412A86                 mov     [esp+13Ch+var_8], ebx
.text:00412A8D                 lea     ebx, [esp+13Ch+FileName]
.text:00412A91                 mov     [esp+13Ch+var_4], esi
.text:00412A98                 mov     [esp+13Ch+var_12C], 0
.text:00412AA0                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:00412AA8                 mov     [esp+13Ch+var_134], 0
.text:00412AB0                 mov     [esp+13Ch+Format], 104h
.text:00412AB8                 mov     [esp+13Ch+FileHandle], ebx
.text:00412ABB                 call    near ptr loc_40CC3F+1
.text:00412AC0                 xor     edx, edx
.text:00412AC2                 test    eax, eax
.text:00412AC4                 jnz     short loc_412AF6
.text:00412AC6                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:00412AC9                 mov     [esp+13Ch+Format], 0 ; int
.text:00412AD1                 call    sub_40CFC0
.text:00412AD6                 xor     edx, edx
.text:00412AD8                 mov     ebx, eax
.text:00412ADA                 test    eax, eax
.text:00412ADC                 js      short loc_412AF6
.text:00412ADE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:00412AE6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:00412AE9                 call    _fdopen_0
.text:00412AEE                 test    eax, eax
.text:00412AF0                 mov     esi, eax
.text:00412AF2                 jz      short loc_412B0D
.text:00412AF4
.text:00412AF4 loc_412AF4:                             ; CODE XREF: sub_412A80+95↓j
.text:00412AF4                 mov     edx, esi
.text:00412AF6
.text:00412AF6 loc_412AF6:                             ; CODE XREF: sub_412A80+44↑j
.text:00412AF6                                         ; sub_412A80+5C↑j
.text:00412AF6                 mov     ebx, [esp+13Ch+var_8]
.text:00412AFD                 mov     eax, edx
.text:00412AFF                 mov     esi, [esp+13Ch+var_4]
.text:00412B06                 add     esp, 13Ch
.text:00412B0C                 retn
.text:00412B0D ; ---------------------------------------------------------------------------
.text:00412B0D
.text:00412B0D loc_412B0D:                             ; CODE XREF: sub_412A80+72↑j
.text:00412B0D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:00412B10                 call    _close_0
.text:00412B15                 jmp     short loc_412AF4
.text:00412B15 sub_412A80      endp
.text:00412B15
.text:00412B15 ; ---------------------------------------------------------------------------
.text:00412B17                 align 10h
.text:00412B20
.text:00412B20 ; =============== S U B R O U T I N E =======================================
.text:00412B20
.text:00412B20 ; Attributes: thunk
.text:00412B20
.text:00412B20 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00412B20 OleInitialize   proc near               ; CODE XREF: sub_40F700+1A↑p
.text:00412B20
.text:00412B20 pvReserved      = dword ptr  4
.text:00412B20
.text:00412B20                 jmp     ds:__imp_OleInitialize
.text:00412B20 OleInitialize   endp
.text:00412B20
.text:00412B20 ; ---------------------------------------------------------------------------
.text:00412B26                 align 10h
.text:00412B30
.text:00412B30 ; =============== S U B R O U T I N E =======================================
.text:00412B30
.text:00412B30 ; Attributes: thunk
.text:00412B30
.text:00412B30 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00412B30 CoCreateInstance proc near              ; CODE XREF: sub_40F700+52↑p
.text:00412B30
.text:00412B30 rclsid          = dword ptr  4
.text:00412B30 pUnkOuter       = dword ptr  8
.text:00412B30 dwClsContext    = dword ptr  0Ch
.text:00412B30 riid            = dword ptr  10h
.text:00412B30 ppv             = dword ptr  14h
.text:00412B30
.text:00412B30                 jmp     ds:__imp_CoCreateInstance
.text:00412B30 CoCreateInstance endp
.text:00412B30
.text:00412B30 ; ---------------------------------------------------------------------------
.text:00412B36                 align 10h
.text:00412B40
.text:00412B40 ; =============== S U B R O U T I N E =======================================
.text:00412B40
.text:00412B40 ; Attributes: thunk
.text:00412B40
.text:00412B40 ; void __stdcall CoUninitialize()
.text:00412B40 CoUninitialize  proc near               ; CODE XREF: sub_40F700+14E↑p
.text:00412B40                                         ; sub_40F700+16D↑p
.text:00412B40                 jmp     ds:__imp_CoUninitialize
.text:00412B40 CoUninitialize  endp
.text:00412B40
.text:00412B40 ; ---------------------------------------------------------------------------
.text:00412B46                 align 10h
.text:00412B50                 add     al, 0BAh ; 'º'
.text:00412B52                 retf
.text:00412B52 ; ---------------------------------------------------------------------------
.text:00412B53                 db 7Eh
.text:00412B54                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:00412B54                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:00412B54                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:00412B54                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:00412B54                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:00412B54                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:00412B54                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:00412B54                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:00412B54                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:00412B54                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:00412B54                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:00412B54                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:00412B54                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:00412B54                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:00412B54                 dd 0C4426C00h, 330h, 0
.text:00412C88                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00412C88                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:00412C88                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:00412C88                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:00412CD8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00412CD8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:00412CD8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:00412CD8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:00412CD8                 dd 0BA94B00h, 1Bh, 0
.text:00412D38                 dd 0C0h, 46000000h, 1Ch, 0
.text:00412D48                 dd 0C0h, 46000000h, 331h, 0
.text:00412D58                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00412D58                 dd 312h, 0
.text:00412D78                 dd 0C0h, 46000000h, 30Eh, 0
.text:00412D88                 dd 0C0h, 46000000h, 30Dh, 0
.text:00412D98                 dd 0C0h, 46000000h, 311h, 0
.text:00412DA8                 dd 0C0h, 46000000h, 313h, 0
.text:00412DB8                 dd 0C0h, 46000000h, 30Ch, 0
.text:00412DC8                 dd 0C0h, 46000000h, 30Fh, 0
.text:00412DD8                 dd 0C0h, 46000000h, 310h, 0
.text:00412DE8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00412DE8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00412E18                 dd 0C0h, 46000000h, 319h, 0
.text:00412E28                 dd 0C0h, 46000000h, 315h, 0
.text:00412E38                 dd 0C0h, 46000000h, 316h, 0
.text:00412E48                 dd 0C0h, 46000000h, 315h, 0
.text:00412E58                 dd 0C0h, 46000000h, 2E005h, 0
.text:00412E68                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00412E68                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00412E68                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:00412EA8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00412EA8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:00412EA8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:00412EA8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:00412EA8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:00412EA8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:00412EA8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:00412EA8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:00412EA8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:00412EA8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:00412EA8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:00412EA8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00412EA8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:00412EA8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:00412EA8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:00412EA8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00412EA8                 dd 2DE81h, 0
.text:00412FF8                 dd 0C0h, 46000000h, 4 dup(0)
.text:00413010                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00413010                 dd 0
.text:00413028                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00413028                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00413028                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00413028                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00413028                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00413028                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00413028                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00413028                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00413028                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00413028                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00413028                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00413028                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00413028                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00413028                 dd 10Fh, 0
.text:00413138                 dd 0C0h, 46000000h, 125h, 0
.text:00413148                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00413148                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00413148                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00413188                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00413188                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00413188                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00413188                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00413188                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:004131E8                 dd 0C0h, 46000000h, 2E012h, 0
.text:004131F8                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:004131F8                 dd 140h, 0
.text:00413218                 dd 0C0h, 46000000h, 1, 0
.text:00413228                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00413228                 dd 71D3400h, 13Dh, 0
.text:00413248                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00413248                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00413248                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00413248                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00413298                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00413298                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00413298                 dd 20405h, 0
.text:004132C8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:004132D8                 dd 0C0h, 46000000h, 20406h, 0
.text:004132E8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:004132F8                 dd 0C0h, 46000000h, 110h, 0
.text:00413308                 dd 0C0h, 46000000h, 10Eh, 0
.text:00413318                 dd 0C0h, 46000000h, 123h, 0
.text:00413328                 dd 0C0h, 46000000h, 124h, 0
.text:00413338                 dd 0C0h, 46000000h, 13h, 0
.text:00413348                 dd 0C0h, 46000000h, 14h, 0
.text:00413358                 dd 0C0h, 46000000h, 15h, 0
.text:00413368                 dd 0C0h, 46000000h, 20400h, 0
.text:00413378                 dd 0C0h, 46000000h, 121h, 0
.text:00413388                 dd 0C0h, 46000000h, 122h, 0
.text:00413398                 dd 0C0h, 46000000h, 2E011h, 0
.text:004133A8                 dd 0C0h, 46000000h, 108h, 0
.text:004133B8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:004133B8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004133B8                 dd 103h, 0
.text:004133E8                 dd 0C0h, 46000000h, 2E000h, 0
.text:004133F8                 dd 0C0h, 46000000h, 106h, 0
.text:00413408                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00413408                 dd 107h, 0
.text:00413428                 dd 0C0h, 46000000h, 102h, 0
.text:00413438                 dd 0C0h, 46000000h, 104h, 0
.text:00413448                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00413448                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00413448                 dd 105h, 0
.text:00413478                 dd 0C0h, 46000000h, 13Bh, 0
.text:00413488                 dd 0C0h, 46000000h, 139h, 0
.text:00413498                 dd 0C0h, 46000000h, 0Dh, 0
.text:004134A8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004134A8                 dd 101h, 0
.text:004134C8                 dd 0C0h, 46000000h, 100h, 0
.text:004134D8                 dd 0C0h, 46000000h, 20404h, 0
.text:004134E8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:004134E8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00413518                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00413518                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00413518                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00413518                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00413568                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00413568                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00413568                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00413568                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00413568                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00413568                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:004135E8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:004135E8                 dd 0Ah, 0
.text:00413608                 dd 0C0h, 46000000h, 2, 0
.text:00413618                 dd 0C0h, 46000000h, 1Dh, 0
.text:00413628                 dd 0C0h, 46000000h, 3, 0
.text:00413638                 dd 0C0h, 46000000h, 16h, 0
.text:00413648                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00413648                 dd 1608D74Fh, 0Fh, 0
.text:00413668                 dd 0C0h, 46000000h, 20h, 0
.text:00413678                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00413678                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00413678                 dd 0
.text:004136A8                 dd 0C0h, 46000000h, 11Eh, 0
.text:004136B8                 dd 0C0h, 46000000h, 128h, 0
.text:004136C8                 dd 0C0h, 46000000h, 129h, 0
.text:004136D8                 dd 0C0h, 46000000h, 118h, 0
.text:004136E8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:004136E8                 dd 70474000h, 11Bh, 0
.text:00413708                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00413708                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00413708                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00413708                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00413708                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00413768                 dd 0C0h, 46000000h, 116h, 0
.text:00413778                 dd 0C0h, 46000000h, 113h, 0
.text:00413788                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00413788                 dd 119h, 0
.text:004137A8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:004137A8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:004137A8                 dd 0
.text:004137D8                 dd 0C0h, 46000000h, 11Ch, 0
.text:004137E8                 dd 0C0h, 46000000h, 11Dh, 0
.text:004137F8                 dd 0C0h, 46000000h, 11Fh, 0
.text:00413808                 dd 0C0h, 46000000h, 112h, 0
.text:00413818                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00413818                 dd 18E6000h, 120h, 0
.text:00413838                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00413838                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00413838                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00413878                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00413878                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:004138A8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004138A8                 dd 11Ah, 0
.text:004138C8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:004138C8                 dd 10Ch, 0
.text:004138E8                 dd 0C0h, 46000000h
.text:004138F0 dword_4138F0    dd 10Bh, 0              ; DATA XREF: sub_40F700+75↑o
.text:004138F8                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:004138F8                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:004138F8                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:004138F8                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00413948                 dd 0C0h, 46000000h, 109h, 0
.text:00413958                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00413958                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00413958                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00413958                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00413958                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00413958                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00413958                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00413958                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00413958                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00413958                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00413958                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00413A38                 dd 0C0h, 46000000h, 138h, 0
.text:00413A48                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00413A48                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00413A48                 dd 27h, 0
.text:00413A78                 dd 0C0h, 46000000h, 8, 0
.text:00413A88                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00413A88                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00413A88                 dd 20D00h, 0
.text:00413AB8                 dd 0C0h, 46000000h, 20D03h, 0
.text:00413AC8                 dd 0C0h, 46000000h, 12h, 0
.text:00413AD8                 dd 0C0h, 46000000h, 4, 0
.text:00413AE8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00413AE8                 dd 7, 0
.text:00413B08                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00413B08                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00413B38                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00413B38                 dd 126h, 0
.text:00413B58                 dd 0C0h, 46000000h, 10h, 0
.text:00413B68                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00413B68                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:00413B98                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:00413B98                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:00413B98                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:00413BD8                 dd 0C0h, 46000000h, 0Bh, 0
.text:00413BE8                 dd 0C0h, 46000000h, 0Ch, 0
.text:00413BF8                 dd 0C0h, 46000000h, 26h, 0
.text:00413C08                 dd 0C0h, 46000000h, 6, 0
.text:00413C18                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00413C18                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00413C18                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:00413C58                 dd 0C0h, 46000000h, 20403h, 0
.text:00413C68                 dd 0C0h, 46000000h, 20401h, 0
.text:00413C78                 dd 0C0h, 46000000h, 20412h, 0
.text:00413C88                 dd 0C0h, 46000000h, 20402h, 0
.text:00413C98                 dd 0C0h, 46000000h, 20411h, 0
.text:00413CA8                 dd 0C0h, 46000000h, 2 dup(0)
.text:00413CB8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00413CB8                 dd 10Dh, 0
.text:00413CD8                 dd 0C0h, 46000000h, 127h, 0
.text:00413CE8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00413CE8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:00413CE8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00413D28                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00413D28                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00413D28                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00413D68                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00413D78                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00413D88                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:00413D98                 dd 0C0h, 46000000h, 2DE19h, 0
.text:00413DA8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:00413DB8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:00413DC8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:00413DD8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00413DE8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00413DF8                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00413E08                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00413E18                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00413E28                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00413E38                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00413E48                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00413E58                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00413E68                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00413E78                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00413E88                 dd 0C0h, 46000000h, 2DE10h, 0
.text:00413E98                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00413EA8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:00413EB8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:00413EC8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:00413ED8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00413EE8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00413EF8                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00413F08                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00413F18                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00413F28                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00413F38                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00413F48                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00413F58                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00413F68                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00413F78                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00413F88                 dd 0C0h, 46000000h, 2DE08h, 0
.text:00413F98                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:00413F98                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:00413FC0
.text:00413FC0 ; =============== S U B R O U T I N E =======================================
.text:00413FC0
.text:00413FC0 ; Attributes: thunk
.text:00413FC0
.text:00413FC0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00413FC0 mbrtowc         proc near               ; CODE XREF: sub_402990+757↑p
.text:00413FC0
.text:00413FC0 DstCh           = dword ptr  4
.text:00413FC0 SrcCh           = dword ptr  8
.text:00413FC0 SizeInBytes     = dword ptr  0Ch
.text:00413FC0 State           = dword ptr  10h
.text:00413FC0
.text:00413FC0                 jmp     ds:__imp_mbrtowc
.text:00413FC0 mbrtowc         endp
.text:00413FC0
.text:00413FC0 ; ---------------------------------------------------------------------------
.text:00413FC6                 align 10h
.text:00413FD0
.text:00413FD0 ; =============== S U B R O U T I N E =======================================
.text:00413FD0
.text:00413FD0 ; Attributes: thunk
.text:00413FD0
.text:00413FD0 ; wint_t __cdecl btowc(int Ch)
.text:00413FD0 btowc           proc near               ; CODE XREF: sub_406ED0+1F73↑p
.text:00413FD0                 jmp     ds:__imp_btowc
.text:00413FD0 btowc           endp
.text:00413FD0
.text:00413FD0 ; ---------------------------------------------------------------------------
.text:00413FD6                 align 10h
.text:00413FE0
.text:00413FE0 ; =============== S U B R O U T I N E =======================================
.text:00413FE0
.text:00413FE0 ; Attributes: thunk
.text:00413FE0
.text:00413FE0 ; wctype_t __cdecl wctype(const char *name)
.text:00413FE0 wctype          proc near               ; CODE XREF: sub_406ED0+1F29↑p
.text:00413FE0
.text:00413FE0 name            = dword ptr  4
.text:00413FE0
.text:00413FE0                 jmp     ds:__imp_wctype
.text:00413FE0 wctype          endp
.text:00413FE0
.text:00413FE0 ; ---------------------------------------------------------------------------
.text:00413FE6                 align 10h
.text:00413FF0
.text:00413FF0 ; =============== S U B R O U T I N E =======================================
.text:00413FF0
.text:00413FF0 ; Attributes: bp-based frame
.text:00413FF0
.text:00413FF0 sub_413FF0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00413FF0                 push    ebp
.text:00413FF1                 mov     ecx, offset byte_417000
.text:00413FF6                 cmp     ecx, offset byte_417000
.text:00413FFC                 mov     ebp, esp
.text:00413FFE                 jnb     short loc_414016
.text:00414000
.text:00414000 loc_414000:                             ; CODE XREF: sub_413FF0+24↓j
.text:00414000                 mov     edx, [ecx+4]
.text:00414003                 mov     eax, [ecx]
.text:00414005                 add     ecx, 8
.text:00414008                 add     [edx+400000h], eax
.text:0041400E                 cmp     ecx, offset byte_417000
.text:00414014                 jb      short loc_414000
.text:00414016
.text:00414016 loc_414016:                             ; CODE XREF: sub_413FF0+E↑j
.text:00414016                 pop     ebp
.text:00414017                 retn
.text:00414017 sub_413FF0      endp
.text:00414017
.text:00414017 ; ---------------------------------------------------------------------------
.text:00414018                 align 10h
.text:00414020
.text:00414020 ; =============== S U B R O U T I N E =======================================
.text:00414020
.text:00414020 ; Attributes: bp-based frame
.text:00414020
.text:00414020 sub_414020      proc near               ; CODE XREF: sub_401080+16↑p
.text:00414020                                         ; TopLevelExceptionFilter+D7↑p
.text:00414020                 push    ebp
.text:00414021                 mov     ebp, esp
.text:00414023                 fninit
.text:00414025                 pop     ebp
.text:00414026                 retn
.text:00414026 sub_414020      endp
.text:00414026
.text:00414026 ; ---------------------------------------------------------------------------
.text:00414027                 align 10h
.text:00414030
.text:00414030 ; =============== S U B R O U T I N E =======================================
.text:00414030
.text:00414030 ; Attributes: bp-based frame
.text:00414030
.text:00414030 ; void __cdecl sub_414030()
.text:00414030 sub_414030      proc near               ; DATA XREF: .text:loc_414079↓o
.text:00414030                                         ; sub_4140C0:loc_4140EE↓o
.text:00414030                 push    ebp
.text:00414031                 mov     ebp, esp
.text:00414033                 sub     esp, 8
.text:00414036                 mov     eax, off_4160D4
.text:0041403B                 mov     edx, [eax]
.text:0041403D                 test    edx, edx
.text:0041403F                 jnz     short loc_414045
.text:00414041
.text:00414041 loc_414041:                             ; CODE XREF: sub_414030+2C↓j
.text:00414041                 mov     esp, ebp
.text:00414043                 pop     ebp
.text:00414044                 retn
.text:00414045 ; ---------------------------------------------------------------------------
.text:00414045
.text:00414045 loc_414045:                             ; CODE XREF: sub_414030+F↑j
.text:00414045                                         ; sub_414030+2A↓j
.text:00414045                 call    dword ptr [eax]
.text:00414047                 mov     edx, off_4160D4
.text:0041404D                 mov     ecx, [edx+4]
.text:00414050                 lea     eax, [edx+4]
.text:00414053                 mov     off_4160D4, eax
.text:00414058                 test    ecx, ecx
.text:0041405A                 jnz     short loc_414045
.text:0041405C                 jmp     short loc_414041
.text:0041405C sub_414030      endp
.text:0041405C
.text:0041405C ; ---------------------------------------------------------------------------
.text:0041405E                 align 10h
.text:00414060                 push    ebp
.text:00414061                 mov     ebp, esp
.text:00414063                 sub     esp, 8
.text:00414066                 mov     [ebp-4], ebx
.text:00414069                 mov     eax, ds:dword_415030
.text:0041406E                 cmp     eax, 0FFFFFFFFh
.text:00414071                 jz      short loc_41409C
.text:00414073
.text:00414073 loc_414073:                             ; CODE XREF: .text:004140A6↓j
.text:00414073                                         ; .text:004140B9↓j
.text:00414073                 test    eax, eax
.text:00414075                 mov     ebx, eax
.text:00414077                 jnz     short loc_414090
.text:00414079
.text:00414079 loc_414079:                             ; CODE XREF: .text:0041409A↓j
.text:00414079                 mov     dword ptr [esp], offset sub_414030
.text:00414080                 call    sub_401040
.text:00414085                 mov     ebx, [ebp-4]
.text:00414088                 mov     esp, ebp
.text:0041408A                 pop     ebp
.text:0041408B                 retn
.text:0041408B ; ---------------------------------------------------------------------------
.text:0041408C                 align 10h
.text:00414090
.text:00414090 loc_414090:                             ; CODE XREF: .text:00414077↑j
.text:00414090                                         ; .text:00414098↓j
.text:00414090                 call    ds:dword_415030[ebx*4]
.text:00414097                 dec     ebx
.text:00414098                 jnz     short loc_414090
.text:0041409A                 jmp     short loc_414079
.text:0041409C ; ---------------------------------------------------------------------------
.text:0041409C
.text:0041409C loc_41409C:                             ; CODE XREF: .text:00414071↑j
.text:0041409C                 mov     ecx, ds:dword_415034
.text:004140A2                 xor     eax, eax
.text:004140A4                 test    ecx, ecx
.text:004140A6                 jz      short loc_414073
.text:004140A8                 mov     edx, offset dword_415030
.text:004140AD                 lea     esi, [esi+0]
.text:004140B0
.text:004140B0 loc_4140B0:                             ; CODE XREF: .text:004140B7↓j
.text:004140B0                 inc     eax
.text:004140B1                 mov     ecx, [edx+eax*4+4]
.text:004140B5                 test    ecx, ecx
.text:004140B7                 jnz     short loc_4140B0
.text:004140B9                 jmp     short loc_414073
.text:004140B9 ; ---------------------------------------------------------------------------
.text:004140BB                 align 10h
.text:004140C0
.text:004140C0 ; =============== S U B R O U T I N E =======================================
.text:004140C0
.text:004140C0 ; Attributes: bp-based frame
.text:004140C0
.text:004140C0 sub_4140C0      proc near               ; CODE XREF: sub_4016C0+18↑p
.text:004140C0
.text:004140C0 var_8           = dword ptr -8
.text:004140C0 var_4           = dword ptr -4
.text:004140C0
.text:004140C0                 push    ebp
.text:004140C1                 mov     ebp, esp
.text:004140C3                 sub     esp, 8
.text:004140C6                 mov     [ebp+var_4], ebx
.text:004140C9                 mov     edx, dword_4160D0
.text:004140CF                 test    edx, edx
.text:004140D1                 jnz     short loc_4140FA
.text:004140D3                 mov     eax, ds:dword_415030
.text:004140D8                 mov     edx, 1
.text:004140DD                 mov     dword_4160D0, edx
.text:004140E3                 cmp     eax, 0FFFFFFFFh
.text:004140E6                 jz      short loc_41410D
.text:004140E8
.text:004140E8 loc_4140E8:                             ; CODE XREF: sub_4140C0+57↓j
.text:004140E8                                         ; sub_4140C0+69↓j
.text:004140E8                 test    eax, eax
.text:004140EA                 mov     ebx, eax
.text:004140EC                 jnz     short loc_414101
.text:004140EE
.text:004140EE loc_4140EE:                             ; CODE XREF: sub_4140C0+4B↓j
.text:004140EE                 mov     [esp+8+var_8], offset sub_414030 ; void (__cdecl *)()
.text:004140F5                 call    sub_401040
.text:004140FA
.text:004140FA loc_4140FA:                             ; CODE XREF: sub_4140C0+11↑j
.text:004140FA                 mov     ebx, [ebp+var_4]
.text:004140FD                 mov     esp, ebp
.text:004140FF                 pop     ebp
.text:00414100                 retn
.text:00414101 ; ---------------------------------------------------------------------------
.text:00414101
.text:00414101 loc_414101:                             ; CODE XREF: sub_4140C0+2C↑j
.text:00414101                                         ; sub_4140C0+49↓j
.text:00414101                 call    ds:dword_415030[ebx*4]
.text:00414108                 dec     ebx
.text:00414109                 jnz     short loc_414101
.text:0041410B                 jmp     short loc_4140EE
.text:0041410D ; ---------------------------------------------------------------------------
.text:0041410D
.text:0041410D loc_41410D:                             ; CODE XREF: sub_4140C0+26↑j
.text:0041410D                 mov     ecx, ds:dword_415034
.text:00414113                 xor     eax, eax
.text:00414115                 test    ecx, ecx
.text:00414117                 jz      short loc_4140E8
.text:00414119                 mov     edx, offset dword_415030
.text:0041411E                 mov     esi, esi
.text:00414120
.text:00414120 loc_414120:                             ; CODE XREF: sub_4140C0+67↓j
.text:00414120                 inc     eax
.text:00414121                 mov     ebx, [edx+eax*4+4]
.text:00414125                 test    ebx, ebx
.text:00414127                 jnz     short loc_414120
.text:00414129                 jmp     short loc_4140E8
.text:00414129 sub_4140C0      endp
.text:00414129
.text:00414129 ; ---------------------------------------------------------------------------
.text:0041412B                 align 10h
.text:00414130
.text:00414130 ; =============== S U B R O U T I N E =======================================
.text:00414130
.text:00414130 ; Attributes: bp-based frame
.text:00414130
.text:00414130 sub_414130      proc near               ; CODE XREF: sub_401F00+82↑p
.text:00414130
.text:00414130 var_3C          = dword ptr -3Ch
.text:00414130 var_34          = dword ptr -34h
.text:00414130 var_30          = dword ptr -30h
.text:00414130 var_2C          = dword ptr -2Ch
.text:00414130 var_28          = dword ptr -28h
.text:00414130 var_24          = dword ptr -24h
.text:00414130 var_1C          = dword ptr -1Ch
.text:00414130 var_18          = dword ptr -18h
.text:00414130 var_14          = dword ptr -14h
.text:00414130 arg_0           = dword ptr  8
.text:00414130 arg_4           = dword ptr  0Ch
.text:00414130 arg_8           = dword ptr  10h
.text:00414130 arg_C           = dword ptr  14h
.text:00414130
.text:00414130                 push    ebp
.text:00414131                 mov     ebp, esp
.text:00414133                 push    edi
.text:00414134                 push    esi
.text:00414135                 push    ebx
.text:00414136                 sub     esp, 34h
.text:00414139                 mov     ebx, [ebp+arg_4]
.text:0041413C                 mov     [ebp+var_28], 0
.text:00414143                 mov     ecx, [ebp+arg_0]
.text:00414146                 mov     eax, [ebp+arg_8]
.text:00414149                 mov     [ebp+var_24], 0
.text:00414150                 test    ebx, ebx
.text:00414152                 mov     edx, [ebp+arg_C]
.text:00414155                 mov     [ebp+var_1C], 0
.text:0041415C                 js      loc_4142D4
.text:00414162
.text:00414162 loc_414162:                             ; CODE XREF: sub_414130+1B2↓j
.text:00414162                 test    edx, edx
.text:00414164                 js      loc_4142C8
.text:0041416A
.text:0041416A loc_41416A:                             ; CODE XREF: sub_414130+19F↓j
.text:0041416A                 mov     [ebp+var_2C], edx
.text:0041416D                 test    edx, edx
.text:0041416F                 mov     esi, eax
.text:00414171                 mov     [ebp+var_30], ecx
.text:00414174                 mov     edi, ebx
.text:00414176                 jnz     short loc_4141E1
.text:00414178                 cmp     eax, ebx
.text:0041417A                 jbe     short loc_4141C4
.text:0041417C                 mov     eax, ecx
.text:0041417E                 mov     edx, ebx
.text:00414180                 div     esi
.text:00414182
.text:00414182 loc_414182:                             ; CODE XREF: sub_414130+AF↓j
.text:00414182                 mov     [ebp+var_30], edx
.text:00414185                 lea     ecx, [ebp+var_18]
.text:00414188                 test    ecx, ecx
.text:0041418A                 jz      short loc_4141A5
.text:0041418C                 mov     [ebp+var_24], 0
.text:00414193
.text:00414193 loc_414193:                             ; CODE XREF: sub_414130+FE↓j
.text:00414193                 mov     eax, [ebp+var_30]
.text:00414196                 mov     [ebp+var_28], eax
.text:00414199                 mov     edx, [ebp+var_28]
.text:0041419C                 mov     ecx, [ebp+var_24]
.text:0041419F                 mov     [ebp+var_18], edx
.text:004141A2                 mov     [ebp+var_14], ecx
.text:004141A5
.text:004141A5 loc_4141A5:                             ; CODE XREF: sub_414130+5A↑j
.text:004141A5                                         ; sub_414130+C8↓j ...
.text:004141A5                 mov     eax, [ebp+var_1C]
.text:004141A8                 test    eax, eax
.text:004141AA                 jz      short loc_4141B6
.text:004141AC                 neg     [ebp+var_18]
.text:004141AF                 adc     [ebp+var_14], 0
.text:004141B3                 neg     [ebp+var_14]
.text:004141B6
.text:004141B6 loc_4141B6:                             ; CODE XREF: sub_414130+7A↑j
.text:004141B6                 mov     eax, [ebp+var_18]
.text:004141B9                 mov     edx, [ebp+var_14]
.text:004141BC                 add     esp, 34h
.text:004141BF                 pop     ebx
.text:004141C0                 pop     esi
.text:004141C1                 pop     edi
.text:004141C2                 pop     ebp
.text:004141C3                 retn
.text:004141C4 ; ---------------------------------------------------------------------------
.text:004141C4
.text:004141C4 loc_4141C4:                             ; CODE XREF: sub_414130+4A↑j
.text:004141C4                 test    eax, eax
.text:004141C6                 jnz     short loc_4141D3
.text:004141C8                 mov     eax, 1
.text:004141CD                 xor     edx, edx
.text:004141CF                 div     esi
.text:004141D1                 mov     esi, eax
.text:004141D3
.text:004141D3 loc_4141D3:                             ; CODE XREF: sub_414130+96↑j
.text:004141D3                 mov     eax, edi
.text:004141D5                 mov     edx, [ebp+var_2C]
.text:004141D8                 div     esi
.text:004141DA                 mov     eax, [ebp+var_30]
.text:004141DD                 div     esi
.text:004141DF                 jmp     short loc_414182
.text:004141E1 ; ---------------------------------------------------------------------------
.text:004141E1
.text:004141E1 loc_4141E1:                             ; CODE XREF: sub_414130+46↑j
.text:004141E1                 cmp     [ebp+var_2C], ebx
.text:004141E4                 jbe     short loc_414200
.text:004141E6                 mov     [ebp+var_28], ecx
.text:004141E9
.text:004141E9 loc_4141E9:                             ; CODE XREF: sub_414130+17E↓j
.text:004141E9                 mov     [ebp+var_24], edi
.text:004141EC                 mov     eax, [ebp+var_28]
.text:004141EF                 mov     edx, [ebp+var_24]
.text:004141F2                 mov     [ebp+var_18], eax
.text:004141F5                 mov     [ebp+var_14], edx
.text:004141F8                 jmp     short loc_4141A5
.text:004141F8 ; ---------------------------------------------------------------------------
.text:004141FA                 align 10h
.text:00414200
.text:00414200 loc_414200:                             ; CODE XREF: sub_414130+B4↑j
.text:00414200                 bsr     eax, [ebp+var_2C]
.text:00414204                 mov     ebx, eax
.text:00414206                 xor     ebx, 1Fh
.text:00414209                 jnz     short loc_414233
.text:0041420B                 cmp     edi, [ebp+var_2C]
.text:0041420E                 ja      short loc_414215
.text:00414210                 cmp     [ebp+var_30], esi
.text:00414213                 jb      short loc_414220
.text:00414215
.text:00414215 loc_414215:                             ; CODE XREF: sub_414130+DE↑j
.text:00414215                 mov     edx, [ebp+var_30]
.text:00414218                 sub     edx, esi
.text:0041421A                 sbb     edi, [ebp+var_2C]
.text:0041421D                 mov     [ebp+var_30], edx
.text:00414220
.text:00414220 loc_414220:                             ; CODE XREF: sub_414130+E3↑j
.text:00414220                 lea     ecx, [ebp+var_18]
.text:00414223                 test    ecx, ecx
.text:00414225                 jz      loc_4141A5
.text:0041422B                 mov     [ebp+var_24], edi
.text:0041422E                 jmp     loc_414193
.text:00414233 ; ---------------------------------------------------------------------------
.text:00414233
.text:00414233 loc_414233:                             ; CODE XREF: sub_414130+D9↑j
.text:00414233                 mov     edx, [ebp+var_2C]
.text:00414236                 mov     eax, 20h ; ' '
.text:0041423B                 mov     cl, bl
.text:0041423D                 sub     eax, ebx
.text:0041423F                 mov     [ebp+var_34], eax
.text:00414242                 shl     edx, cl
.text:00414244                 mov     eax, esi
.text:00414246                 movzx   ecx, byte ptr [ebp+var_34]
.text:0041424A                 shr     eax, cl
.text:0041424C                 mov     cl, bl
.text:0041424E                 shl     esi, cl
.text:00414250                 or      edx, eax
.text:00414252                 mov     eax, [ebp+var_30]
.text:00414255                 movzx   ecx, byte ptr [ebp+var_34]
.text:00414259                 mov     [ebp+var_2C], edx
.text:0041425C                 mov     edx, edi
.text:0041425E                 shr     edx, cl
.text:00414260                 mov     cl, bl
.text:00414262                 shl     edi, cl
.text:00414264                 movzx   ecx, byte ptr [ebp+var_34]
.text:00414268                 shr     eax, cl
.text:0041426A                 or      edi, eax
.text:0041426C                 mov     eax, edi
.text:0041426E                 mov     cl, bl
.text:00414270                 div     [ebp+var_2C]
.text:00414273                 shl     [ebp+var_30], cl
.text:00414276                 mov     edi, edx
.text:00414278                 mul     esi
.text:0041427A                 mov     [ebp+var_3C], eax
.text:0041427D                 cmp     edx, edi
.text:0041427F                 ja      short loc_4142BB
.text:00414281                 cmp     edx, edi
.text:00414283                 jz      short loc_4142B3
.text:00414285
.text:00414285 loc_414285:                             ; CODE XREF: sub_414130+189↓j
.text:00414285                                         ; sub_414130+196↓j
.text:00414285                 lea     eax, [ebp+var_18]
.text:00414288                 test    eax, eax
.text:0041428A                 jz      loc_4141A5
.text:00414290                 movzx   ecx, byte ptr [ebp+var_34]
.text:00414294                 mov     eax, [ebp+var_30]
.text:00414297                 sub     eax, [ebp+var_3C]
.text:0041429A                 sbb     edi, edx
.text:0041429C                 mov     [ebp+var_30], eax
.text:0041429F                 mov     edx, edi
.text:004142A1                 shl     edx, cl
.text:004142A3                 mov     cl, bl
.text:004142A5                 shr     eax, cl
.text:004142A7                 or      edx, eax
.text:004142A9                 mov     [ebp+var_28], edx
.text:004142AC                 shr     edi, cl
.text:004142AE                 jmp     loc_4141E9
.text:004142B3 ; ---------------------------------------------------------------------------
.text:004142B3
.text:004142B3 loc_4142B3:                             ; CODE XREF: sub_414130+153↑j
.text:004142B3                 mov     eax, [ebp+var_30]
.text:004142B6                 cmp     [ebp+var_3C], eax
.text:004142B9                 jbe     short loc_414285
.text:004142BB
.text:004142BB loc_4142BB:                             ; CODE XREF: sub_414130+14F↑j
.text:004142BB                 mov     ecx, [ebp+var_3C]
.text:004142BE                 sub     ecx, esi
.text:004142C0                 sbb     edx, [ebp+var_2C]
.text:004142C3                 mov     [ebp+var_3C], ecx
.text:004142C6                 jmp     short loc_414285
.text:004142C8 ; ---------------------------------------------------------------------------
.text:004142C8
.text:004142C8 loc_4142C8:                             ; CODE XREF: sub_414130+34↑j
.text:004142C8                 neg     eax
.text:004142CA                 adc     edx, 0
.text:004142CD                 neg     edx
.text:004142CF                 jmp     loc_41416A
.text:004142D4 ; ---------------------------------------------------------------------------
.text:004142D4
.text:004142D4 loc_4142D4:                             ; CODE XREF: sub_414130+2C↑j
.text:004142D4                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:004142DB                 neg     ecx
.text:004142DD                 adc     ebx, 0
.text:004142E0                 neg     ebx
.text:004142E2                 jmp     loc_414162
.text:004142E2 sub_414130      endp
.text:004142E2
.text:004142E2 ; ---------------------------------------------------------------------------
.text:004142E7                 align 10h
.text:004142F0
.text:004142F0 ; =============== S U B R O U T I N E =======================================
.text:004142F0
.text:004142F0 ; Attributes: info_from_lumina
.text:004142F0
.text:004142F0 ; void *__cdecl _alloca(size_t Size)
.text:004142F0 __alloca        proc near               ; CODE XREF: sub_4016C0+13↑p
.text:004142F0                 push    ecx
.text:004142F1                 mov     ecx, esp
.text:004142F3                 add     ecx, 8
.text:004142F6
.text:004142F6 loc_4142F6:                             ; CODE XREF: __alloca+1B↓j
.text:004142F6                 cmp     eax, 1000h
.text:004142FB                 jb      short loc_41430D
.text:004142FD                 sub     ecx, 1000h
.text:00414303                 or      dword ptr [ecx], 0
.text:00414306                 sub     eax, 1000h
.text:0041430B                 jmp     short loc_4142F6
.text:0041430D ; ---------------------------------------------------------------------------
.text:0041430D
.text:0041430D loc_41430D:                             ; CODE XREF: __alloca+B↑j
.text:0041430D                 sub     ecx, eax
.text:0041430F                 or      dword ptr [ecx], 0
.text:00414312                 mov     eax, esp
.text:00414314                 mov     esp, ecx
.text:00414316                 mov     ecx, [eax]
.text:00414318                 mov     eax, [eax+4]
.text:0041431B                 jmp     eax
.text:0041431B __alloca        endp
.text:0041431B
.text:0041431B ; ---------------------------------------------------------------------------
.text:0041431D                 align 10h
.text:00414320
.text:00414320 ; =============== S U B R O U T I N E =======================================
.text:00414320
.text:00414320 ; Attributes: bp-based frame
.text:00414320
.text:00414320 sub_414320      proc near               ; CODE XREF: sub_40CFC0+D7↑p
.text:00414320                                         ; sub_40CFC0+11D↑p ...
.text:00414320
.text:00414320 var_34          = dword ptr -34h
.text:00414320 var_2C          = dword ptr -2Ch
.text:00414320 var_28          = dword ptr -28h
.text:00414320 var_24          = dword ptr -24h
.text:00414320 var_20          = dword ptr -20h
.text:00414320 var_1C          = dword ptr -1Ch
.text:00414320 var_18          = dword ptr -18h
.text:00414320 var_14          = dword ptr -14h
.text:00414320 arg_0           = dword ptr  8
.text:00414320 arg_4           = dword ptr  0Ch
.text:00414320 arg_8           = dword ptr  10h
.text:00414320 arg_C           = dword ptr  14h
.text:00414320
.text:00414320                 push    ebp
.text:00414321                 mov     ebp, esp
.text:00414323                 push    edi
.text:00414324                 push    esi
.text:00414325                 push    ebx
.text:00414326                 sub     esp, 2Ch
.text:00414329                 mov     edx, [ebp+arg_C]
.text:0041432C                 mov     [ebp+var_20], 0
.text:00414333                 mov     ecx, [ebp+arg_0]
.text:00414336                 mov     ebx, [ebp+arg_4]
.text:00414339                 mov     [ebp+var_1C], 0
.text:00414340                 mov     eax, [ebp+arg_8]
.text:00414343                 test    edx, edx
.text:00414345                 mov     [ebp+var_24], edx
.text:00414348                 mov     edi, ebx
.text:0041434A                 mov     esi, eax
.text:0041434C                 mov     [ebp+var_28], ecx
.text:0041434F                 jnz     short loc_4143B0
.text:00414351                 cmp     eax, ebx
.text:00414353                 jbe     short loc_414390
.text:00414355                 mov     eax, ecx
.text:00414357                 mov     edx, ebx
.text:00414359                 div     esi
.text:0041435B
.text:0041435B loc_41435B:                             ; CODE XREF: sub_414320+8B↓j
.text:0041435B                 mov     [ebp+var_28], edx
.text:0041435E                 lea     ecx, [ebp+var_18]
.text:00414361                 test    ecx, ecx
.text:00414363                 jz      short loc_41437E
.text:00414365                 mov     [ebp+var_1C], 0
.text:0041436C
.text:0041436C loc_41436C:                             ; CODE XREF: sub_414320+DA↓j
.text:0041436C                 mov     eax, [ebp+var_28]
.text:0041436F                 mov     [ebp+var_20], eax
.text:00414372                 mov     edx, [ebp+var_20]
.text:00414375                 mov     ecx, [ebp+var_1C]
.text:00414378                 mov     [ebp+var_18], edx
.text:0041437B                 mov     [ebp+var_14], ecx
.text:0041437E
.text:0041437E loc_41437E:                             ; CODE XREF: sub_414320+43↑j
.text:0041437E                                         ; sub_414320+A7↓j ...
.text:0041437E                 mov     eax, [ebp+var_18]
.text:00414381                 mov     edx, [ebp+var_14]
.text:00414384                 add     esp, 2Ch
.text:00414387                 pop     ebx
.text:00414388                 pop     esi
.text:00414389                 pop     edi
.text:0041438A                 pop     ebp
.text:0041438B                 retn
.text:0041438B ; ---------------------------------------------------------------------------
.text:0041438C                 align 10h
.text:00414390
.text:00414390 loc_414390:                             ; CODE XREF: sub_414320+33↑j
.text:00414390                 test    eax, eax
.text:00414392                 jnz     short loc_41439F
.text:00414394                 mov     eax, 1
.text:00414399                 xor     edx, edx
.text:0041439B                 div     esi
.text:0041439D                 mov     esi, eax
.text:0041439F
.text:0041439F loc_41439F:                             ; CODE XREF: sub_414320+72↑j
.text:0041439F                 mov     eax, edi
.text:004143A1                 mov     edx, [ebp+var_24]
.text:004143A4                 div     esi
.text:004143A6                 mov     eax, [ebp+var_28]
.text:004143A9                 div     esi
.text:004143AB                 jmp     short loc_41435B
.text:004143AB ; ---------------------------------------------------------------------------
.text:004143AD                 align 10h
.text:004143B0
.text:004143B0 loc_4143B0:                             ; CODE XREF: sub_414320+2F↑j
.text:004143B0                 cmp     [ebp+var_24], ebx
.text:004143B3                 jbe     short loc_4143D0
.text:004143B5                 mov     [ebp+var_20], ecx
.text:004143B8
.text:004143B8 loc_4143B8:                             ; CODE XREF: sub_414320+15B↓j
.text:004143B8                 mov     [ebp+var_1C], edi
.text:004143BB                 mov     eax, [ebp+var_20]
.text:004143BE                 mov     edx, [ebp+var_1C]
.text:004143C1                 mov     [ebp+var_18], eax
.text:004143C4                 mov     [ebp+var_14], edx
.text:004143C7                 jmp     short loc_41437E
.text:004143C7 ; ---------------------------------------------------------------------------
.text:004143C9                 align 10h
.text:004143D0
.text:004143D0 loc_4143D0:                             ; CODE XREF: sub_414320+93↑j
.text:004143D0                 bsr     eax, [ebp+var_24]
.text:004143D4                 mov     ebx, eax
.text:004143D6                 xor     ebx, 1Fh
.text:004143D9                 jnz     short loc_414400
.text:004143DB                 cmp     edi, [ebp+var_24]
.text:004143DE                 ja      short loc_4143E5
.text:004143E0                 cmp     [ebp+var_28], esi
.text:004143E3                 jb      short loc_4143F0
.text:004143E5
.text:004143E5 loc_4143E5:                             ; CODE XREF: sub_414320+BE↑j
.text:004143E5                 mov     edx, [ebp+var_28]
.text:004143E8                 sub     edx, esi
.text:004143EA                 sbb     edi, [ebp+var_24]
.text:004143ED                 mov     [ebp+var_28], edx
.text:004143F0
.text:004143F0 loc_4143F0:                             ; CODE XREF: sub_414320+C3↑j
.text:004143F0                 lea     ecx, [ebp+var_18]
.text:004143F3                 test    ecx, ecx
.text:004143F5                 jz      short loc_41437E
.text:004143F7                 mov     [ebp+var_1C], edi
.text:004143FA                 jmp     loc_41436C
.text:004143FA ; ---------------------------------------------------------------------------
.text:004143FF                 align 10h
.text:00414400
.text:00414400 loc_414400:                             ; CODE XREF: sub_414320+B9↑j
.text:00414400                 mov     edx, [ebp+var_24]
.text:00414403                 mov     eax, 20h ; ' '
.text:00414408                 mov     cl, bl
.text:0041440A                 sub     eax, ebx
.text:0041440C                 mov     [ebp+var_2C], eax
.text:0041440F                 shl     edx, cl
.text:00414411                 mov     eax, esi
.text:00414413                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00414417                 shr     eax, cl
.text:00414419                 mov     cl, bl
.text:0041441B                 shl     esi, cl
.text:0041441D                 or      edx, eax
.text:0041441F                 mov     eax, [ebp+var_28]
.text:00414422                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00414426                 mov     [ebp+var_24], edx
.text:00414429                 mov     edx, edi
.text:0041442B                 shr     edx, cl
.text:0041442D                 mov     cl, bl
.text:0041442F                 shl     edi, cl
.text:00414431                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00414435                 shr     eax, cl
.text:00414437                 or      edi, eax
.text:00414439                 mov     eax, edi
.text:0041443B                 mov     cl, bl
.text:0041443D                 div     [ebp+var_24]
.text:00414440                 shl     [ebp+var_28], cl
.text:00414443                 mov     edi, edx
.text:00414445                 mul     esi
.text:00414447                 mov     [ebp+var_34], eax
.text:0041444A                 cmp     edx, edi
.text:0041444C                 ja      short loc_414488
.text:0041444E                 cmp     edx, edi
.text:00414450                 jz      short loc_414480
.text:00414452
.text:00414452 loc_414452:                             ; CODE XREF: sub_414320+166↓j
.text:00414452                                         ; sub_414320+173↓j
.text:00414452                 lea     eax, [ebp+var_18]
.text:00414455                 test    eax, eax
.text:00414457                 jz      loc_41437E
.text:0041445D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00414461                 mov     eax, [ebp+var_28]
.text:00414464                 sub     eax, [ebp+var_34]
.text:00414467                 sbb     edi, edx
.text:00414469                 mov     [ebp+var_28], eax
.text:0041446C                 mov     edx, edi
.text:0041446E                 shl     edx, cl
.text:00414470                 mov     cl, bl
.text:00414472                 shr     eax, cl
.text:00414474                 or      edx, eax
.text:00414476                 mov     [ebp+var_20], edx
.text:00414479                 shr     edi, cl
.text:0041447B                 jmp     loc_4143B8
.text:00414480 ; ---------------------------------------------------------------------------
.text:00414480
.text:00414480 loc_414480:                             ; CODE XREF: sub_414320+130↑j
.text:00414480                 mov     eax, [ebp+var_28]
.text:00414483                 cmp     [ebp+var_34], eax
.text:00414486                 jbe     short loc_414452
.text:00414488
.text:00414488 loc_414488:                             ; CODE XREF: sub_414320+12C↑j
.text:00414488                 mov     ecx, [ebp+var_34]
.text:0041448B                 sub     ecx, esi
.text:0041448D                 sbb     edx, [ebp+var_24]
.text:00414490                 mov     [ebp+var_34], ecx
.text:00414493                 jmp     short loc_414452
.text:00414493 sub_414320      endp
.text:00414493
.text:00414493 ; ---------------------------------------------------------------------------
.text:00414495                 align 10h
.text:004144A0
.text:004144A0 ; =============== S U B R O U T I N E =======================================
.text:004144A0
.text:004144A0 ; Attributes: bp-based frame
.text:004144A0
.text:004144A0 sub_4144A0      proc near               ; CODE XREF: sub_40CFC0+FD↑p
.text:004144A0                                         ; sub_40CFC0+143↑p ...
.text:004144A0
.text:004144A0 var_24          = dword ptr -24h
.text:004144A0 var_20          = dword ptr -20h
.text:004144A0 var_1C          = dword ptr -1Ch
.text:004144A0 var_18          = dword ptr -18h
.text:004144A0 var_14          = dword ptr -14h
.text:004144A0 var_C           = dword ptr -0Ch
.text:004144A0 var_8           = dword ptr -8
.text:004144A0 var_4           = dword ptr -4
.text:004144A0 arg_0           = dword ptr  8
.text:004144A0 arg_4           = dword ptr  0Ch
.text:004144A0 arg_8           = dword ptr  10h
.text:004144A0 arg_C           = dword ptr  14h
.text:004144A0
.text:004144A0                 push    ebp
.text:004144A1                 mov     ebp, esp
.text:004144A3                 sub     esp, 28h
.text:004144A6                 mov     [ebp+var_C], ebx
.text:004144A9                 mov     edx, [ebp+arg_C]
.text:004144AC                 mov     ecx, [ebp+arg_0]
.text:004144AF                 mov     [ebp+var_8], esi
.text:004144B2                 mov     eax, [ebp+arg_8]
.text:004144B5                 test    edx, edx
.text:004144B7                 mov     [ebp+var_4], edi
.text:004144BA                 mov     ebx, [ebp+arg_4]
.text:004144BD                 mov     esi, eax
.text:004144BF                 mov     [ebp+var_18], 0
.text:004144C6                 mov     [ebp+var_14], 0
.text:004144CD                 mov     [ebp+var_1C], ecx
.text:004144D0                 jnz     short loc_414522
.text:004144D2                 cmp     eax, ebx
.text:004144D4                 jbe     short loc_414500
.text:004144D6                 mov     eax, ecx
.text:004144D8                 mov     edx, ebx
.text:004144DA                 div     esi
.text:004144DC                 mov     edi, eax
.text:004144DE                 mov     esi, esi
.text:004144E0
.text:004144E0 loc_4144E0:                             ; CODE XREF: sub_4144A0+88↓j
.text:004144E0                                         ; sub_4144A0+A4↓j ...
.text:004144E0                 xor     ecx, ecx
.text:004144E2
.text:004144E2 loc_4144E2:                             ; CODE XREF: sub_4144A0+80↓j
.text:004144E2                 mov     [ebp+var_18], edi
.text:004144E5                 mov     ebx, [ebp+var_C]
.text:004144E8                 mov     eax, [ebp+var_18]
.text:004144EB                 mov     [ebp+var_14], ecx
.text:004144EE                 mov     esi, [ebp+var_8]
.text:004144F1                 mov     edx, [ebp+var_14]
.text:004144F4                 mov     edi, [ebp+var_4]
.text:004144F7                 mov     esp, ebp
.text:004144F9                 pop     ebp
.text:004144FA                 retn
.text:004144FA ; ---------------------------------------------------------------------------
.text:004144FB                 align 10h
.text:00414500
.text:00414500 loc_414500:                             ; CODE XREF: sub_4144A0+34↑j
.text:00414500                 test    eax, eax
.text:00414502                 jnz     short loc_414511
.text:00414504                 mov     eax, 1
.text:00414509                 xor     ecx, ecx
.text:0041450B                 xor     edx, edx
.text:0041450D                 div     ecx
.text:0041450F                 mov     esi, eax
.text:00414511
.text:00414511 loc_414511:                             ; CODE XREF: sub_4144A0+62↑j
.text:00414511                 mov     eax, ebx
.text:00414513                 xor     edx, edx
.text:00414515                 div     esi
.text:00414517                 mov     ecx, eax
.text:00414519                 mov     eax, [ebp+var_1C]
.text:0041451C                 div     esi
.text:0041451E                 mov     edi, eax
.text:00414520                 jmp     short loc_4144E2
.text:00414522 ; ---------------------------------------------------------------------------
.text:00414522
.text:00414522 loc_414522:                             ; CODE XREF: sub_4144A0+30↑j
.text:00414522                 cmp     edx, ebx
.text:00414524                 jbe     short loc_414530
.text:00414526                 xor     edi, edi
.text:00414528                 jmp     short loc_4144E0
.text:00414528 ; ---------------------------------------------------------------------------
.text:0041452A                 align 10h
.text:00414530
.text:00414530 loc_414530:                             ; CODE XREF: sub_4144A0+84↑j
.text:00414530                 bsr     eax, edx
.text:00414533                 xor     eax, 1Fh
.text:00414536                 mov     [ebp+var_20], eax
.text:00414539                 jnz     short loc_414550
.text:0041453B                 cmp     ebx, edx
.text:0041453D                 ja      short loc_414546
.text:0041453F                 xor     edi, edi
.text:00414541                 cmp     [ebp+var_1C], esi
.text:00414544                 jb      short loc_4144E0
.text:00414546
.text:00414546 loc_414546:                             ; CODE XREF: sub_4144A0+9D↑j
.text:00414546                 mov     edi, 1
.text:0041454B                 jmp     short loc_4144E0
.text:0041454B ; ---------------------------------------------------------------------------
.text:0041454D                 align 10h
.text:00414550
.text:00414550 loc_414550:                             ; CODE XREF: sub_4144A0+99↑j
.text:00414550                 mov     eax, [ebp+var_20]
.text:00414553                 mov     ecx, 20h ; ' '
.text:00414558                 sub     ecx, eax
.text:0041455A                 mov     [ebp+var_24], ecx
.text:0041455D                 mov     eax, esi
.text:0041455F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00414563                 shl     edx, cl
.text:00414565                 mov     edi, edx
.text:00414567                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041456B                 mov     edx, ebx
.text:0041456D                 shr     eax, cl
.text:0041456F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00414573                 or      edi, eax
.text:00414575                 mov     eax, [ebp+var_1C]
.text:00414578                 shl     esi, cl
.text:0041457A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041457E                 shr     edx, cl
.text:00414580                 movzx   ecx, byte ptr [ebp+var_20]
.text:00414584                 shl     ebx, cl
.text:00414586                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041458A                 shr     eax, cl
.text:0041458C                 or      ebx, eax
.text:0041458E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00414592                 mov     eax, ebx
.text:00414594                 div     edi
.text:00414596                 mov     ebx, edx
.text:00414598                 mov     edi, eax
.text:0041459A                 shl     [ebp+var_1C], cl
.text:0041459D                 mul     esi
.text:0041459F                 cmp     edx, ebx
.text:004145A1                 ja      short loc_4145B4
.text:004145A3                 cmp     edx, ebx
.text:004145A5                 jnz     loc_4144E0
.text:004145AB                 cmp     eax, [ebp+var_1C]
.text:004145AE                 jbe     loc_4144E0
.text:004145B4
.text:004145B4 loc_4145B4:                             ; CODE XREF: sub_4144A0+101↑j
.text:004145B4                 dec     edi
.text:004145B5                 jmp     loc_4144E0
.text:004145B5 sub_4144A0      endp
.text:004145B5
.text:004145B5 ; ---------------------------------------------------------------------------
.text:004145BA                 align 10h
.text:004145C0
.text:004145C0 ; =============== S U B R O U T I N E =======================================
.text:004145C0
.text:004145C0 ; Attributes: thunk
.text:004145C0
.text:004145C0 ; int open(const char *FileName, int OpenFlag, ...)
.text:004145C0 _open           proc near               ; CODE XREF: sub_401CF0+16B↑p
.text:004145C0
.text:004145C0 FileName        = dword ptr  4
.text:004145C0 OpenFlag        = dword ptr  8
.text:004145C0
.text:004145C0                 jmp     ds:__imp__open
.text:004145C0 _open           endp
.text:004145C0
.text:004145C0 ; ---------------------------------------------------------------------------
.text:004145C6                 align 10h
.text:004145D0
.text:004145D0 ; =============== S U B R O U T I N E =======================================
.text:004145D0
.text:004145D0 ; Attributes: thunk
.text:004145D0
.text:004145D0 ; int __cdecl isatty(int FileHandle)
.text:004145D0 _isatty         proc near               ; CODE XREF: sub_401CF0+3B↑p
.text:004145D0                                         ; sub_401CF0+137↑p ...
.text:004145D0
.text:004145D0 FileHandle      = dword ptr  4
.text:004145D0
.text:004145D0                 jmp     ds:__imp__isatty
.text:004145D0 _isatty         endp
.text:004145D0
.text:004145D0 ; ---------------------------------------------------------------------------
.text:004145D6                 align 10h
.text:004145E0
.text:004145E0 ; =============== S U B R O U T I N E =======================================
.text:004145E0
.text:004145E0 ; Attributes: thunk
.text:004145E0
.text:004145E0 ; int __cdecl close(int FileHandle)
.text:004145E0 _close          proc near               ; CODE XREF: sub_4016C0+455↑p
.text:004145E0                                         ; sub_401CF0+93↑p ...
.text:004145E0
.text:004145E0 FileHandle      = dword ptr  4
.text:004145E0
.text:004145E0                 jmp     ds:__imp__close
.text:004145E0 _close          endp
.text:004145E0
.text:004145E0 ; ---------------------------------------------------------------------------
.text:004145E6                 align 10h
.text:004145F0
.text:004145F0 ; =============== S U B R O U T I N E =======================================
.text:004145F0
.text:004145F0 ; Attributes: thunk
.text:004145F0
.text:004145F0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:004145F0 _fdopen         proc near               ; CODE XREF: sub_402680+33↑p
.text:004145F0
.text:004145F0 FileHandle      = dword ptr  4
.text:004145F0 Format          = dword ptr  8
.text:004145F0
.text:004145F0                 jmp     ds:__imp__fdopen
.text:004145F0 _fdopen         endp
.text:004145F0
.text:004145F0 ; ---------------------------------------------------------------------------
.text:004145F6                 align 10h
.text:00414600
.text:00414600 ; =============== S U B R O U T I N E =======================================
.text:00414600
.text:00414600 ; Attributes: thunk
.text:00414600
.text:00414600 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:00414600 _read           proc near               ; CODE XREF: sub_40C3C0+2B↑p
.text:00414600
.text:00414600 FileHandle      = dword ptr  4
.text:00414600 DstBuf          = dword ptr  8
.text:00414600 MaxCharCount    = dword ptr  0Ch
.text:00414600
.text:00414600                 jmp     ds:__imp__read
.text:00414600 _read           endp
.text:00414600
.text:00414600 ; ---------------------------------------------------------------------------
.text:00414606                 align 10h
.text:00414610
.text:00414610 ; =============== S U B R O U T I N E =======================================
.text:00414610
.text:00414610 ; Attributes: thunk
.text:00414610
.text:00414610 ; int __cdecl getpid()
.text:00414610 _getpid         proc near               ; CODE XREF: sub_40CFC0+84↑p
.text:00414610                 jmp     ds:__imp__getpid
.text:00414610 _getpid         endp
.text:00414610
.text:00414610 ; ---------------------------------------------------------------------------
.text:00414616                 align 10h
.text:00414620
.text:00414620 ; =============== S U B R O U T I N E =======================================
.text:00414620
.text:00414620 ; Attributes: thunk
.text:00414620
.text:00414620 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00414620 _chmod          proc near               ; CODE XREF: sub_40D880+41↑j
.text:00414620
.text:00414620 FileName        = dword ptr  4
.text:00414620 AccessMode      = dword ptr  8
.text:00414620
.text:00414620                 jmp     ds:__imp__chmod
.text:00414620 _chmod          endp
.text:00414620
.text:00414620 ; ---------------------------------------------------------------------------
.text:00414626                 align 10h
.text:00414630
.text:00414630 ; =============== S U B R O U T I N E =======================================
.text:00414630
.text:00414630 ; Attributes: thunk
.text:00414630
.text:00414630 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00414630 _stricmp        proc near               ; CODE XREF: sub_40E3D0+46F↑p
.text:00414630                                         ; sub_40FF00+2E↑p ...
.text:00414630
.text:00414630 String1         = dword ptr  4
.text:00414630 String2         = dword ptr  8
.text:00414630
.text:00414630                 jmp     ds:__imp__stricmp
.text:00414630 _stricmp        endp
.text:00414630
.text:00414630 ; ---------------------------------------------------------------------------
.text:00414636                 align 10h
.text:00414640
.text:00414640 ; =============== S U B R O U T I N E =======================================
.text:00414640
.text:00414640 ; Attributes: thunk
.text:00414640
.text:00414640 ; char *__cdecl strdup(const char *String)
.text:00414640 _strdup         proc near               ; CODE XREF: sub_40FB30+101↑p
.text:00414640                                         ; .text:0040FD9A↑p ...
.text:00414640
.text:00414640 String          = dword ptr  4
.text:00414640
.text:00414640                 jmp     ds:__imp__strdup
.text:00414640 _strdup         endp
.text:00414640
.text:00414640 ; ---------------------------------------------------------------------------
.text:00414646                 align 10h
.text:00414650                 jmp     ds:__set_app_type
.text:00414650 ; ---------------------------------------------------------------------------
.text:00414656                 align 10h
.text:00414660
.text:00414660 ; =============== S U B R O U T I N E =======================================
.text:00414660
.text:00414660 ; Attributes: thunk
.text:00414660
.text:00414660 ; void __cdecl cexit()
.text:00414660 _cexit          proc near
.text:00414660                 jmp     ds:__imp__cexit
.text:00414660 _cexit          endp
.text:00414660
.text:00414660 ; ---------------------------------------------------------------------------
.text:00414666                 align 10h
.text:00414670
.text:00414670 ; =============== S U B R O U T I N E =======================================
.text:00414670
.text:00414670 ; Attributes: thunk
.text:00414670
.text:00414670 ; char ***__cdecl _p__environ()
.text:00414670 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00414670                 jmp     ds:__imp___p__environ
.text:00414670 __p__environ    endp
.text:00414670
.text:00414670 ; ---------------------------------------------------------------------------
.text:00414676                 align 10h
.text:00414680
.text:00414680 ; =============== S U B R O U T I N E =======================================
.text:00414680
.text:00414680 ; Attributes: thunk
.text:00414680
.text:00414680 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00414680 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00414680                                         ; TopLevelExceptionFilter+88↑p ...
.text:00414680
.text:00414680 Signal          = dword ptr  4
.text:00414680 Function        = dword ptr  8
.text:00414680
.text:00414680                 jmp     ds:__imp_signal
.text:00414680 signal          endp
.text:00414680
.text:00414680 ; ---------------------------------------------------------------------------
.text:00414686                 align 10h
.text:00414690
.text:00414690 ; =============== S U B R O U T I N E =======================================
.text:00414690
.text:00414690 ; Attributes: thunk
.text:00414690
.text:00414690 ; int *__cdecl _p__fmode()
.text:00414690 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00414690                 jmp     ds:__imp___p__fmode
.text:00414690 __p__fmode      endp
.text:00414690
.text:00414690 ; ---------------------------------------------------------------------------
.text:00414696                 align 10h
.text:004146A0
.text:004146A0 ; =============== S U B R O U T I N E =======================================
.text:004146A0
.text:004146A0 ; Attributes: thunk
.text:004146A0
.text:004146A0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004146A0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004146A0                                         ; sub_401080+90↑p ...
.text:004146A0
.text:004146A0 FileHandle      = dword ptr  4
.text:004146A0 Mode            = dword ptr  8
.text:004146A0
.text:004146A0                 jmp     ds:__imp__setmode
.text:004146A0 _setmode        endp
.text:004146A0
.text:004146A0 ; ---------------------------------------------------------------------------
.text:004146A6                 align 10h
.text:004146B0
.text:004146B0 ; =============== S U B R O U T I N E =======================================
.text:004146B0
.text:004146B0 ; Attributes: thunk
.text:004146B0
.text:004146B0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004146B0                 jmp     ds:__imp___getmainargs
.text:004146B0 __getmainargs   endp
.text:004146B0
.text:004146B0 ; ---------------------------------------------------------------------------
.text:004146B6                 align 10h
.text:004146C0
.text:004146C0 ; =============== S U B R O U T I N E =======================================
.text:004146C0
.text:004146C0 ; Attributes: thunk
.text:004146C0
.text:004146C0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:004146C0 strcpy          proc near               ; CODE XREF: sub_4016C0+48D↑p
.text:004146C0                                         ; sub_40DD80+73↑p ...
.text:004146C0
.text:004146C0 Destination     = dword ptr  4
.text:004146C0 Source          = dword ptr  8
.text:004146C0
.text:004146C0                 jmp     ds:__imp_strcpy
.text:004146C0 strcpy          endp
.text:004146C0
.text:004146C0 ; ---------------------------------------------------------------------------
.text:004146C6                 align 10h
.text:004146D0
.text:004146D0 ; =============== S U B R O U T I N E =======================================
.text:004146D0
.text:004146D0 ; Attributes: thunk
.text:004146D0
.text:004146D0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004146D0 setlocale       proc near               ; CODE XREF: sub_4016C0+34↑p
.text:004146D0
.text:004146D0 Category        = dword ptr  4
.text:004146D0 Locale          = dword ptr  8
.text:004146D0
.text:004146D0                 jmp     ds:__imp_setlocale
.text:004146D0 setlocale       endp
.text:004146D0
.text:004146D0 ; ---------------------------------------------------------------------------
.text:004146D6                 align 10h
.text:004146E0
.text:004146E0 ; =============== S U B R O U T I N E =======================================
.text:004146E0
.text:004146E0 ; Attributes: thunk
.text:004146E0
.text:004146E0 ; int __cdecl fflush(FILE *Stream)
.text:004146E0 fflush          proc near               ; CODE XREF: sub_402680+103↑p
.text:004146E0                                         ; sub_40C480+19↑p ...
.text:004146E0
.text:004146E0 Stream          = dword ptr  4
.text:004146E0
.text:004146E0                 jmp     ds:__imp_fflush
.text:004146E0 fflush          endp
.text:004146E0
.text:004146E0 ; ---------------------------------------------------------------------------
.text:004146E6                 align 10h
.text:004146F0
.text:004146F0 ; =============== S U B R O U T I N E =======================================
.text:004146F0
.text:004146F0 ; Attributes: thunk
.text:004146F0
.text:004146F0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:004146F0 sprintf         proc near               ; CODE XREF: sub_402680+23C↑p
.text:004146F0                                         ; .text:0040CCE6↑p ...
.text:004146F0
.text:004146F0 Buffer          = dword ptr  4
.text:004146F0 Format          = dword ptr  8
.text:004146F0
.text:004146F0                 jmp     ds:__imp_sprintf
.text:004146F0 sprintf         endp
.text:004146F0
.text:004146F0 ; ---------------------------------------------------------------------------
.text:004146F6                 align 10h
.text:00414700
.text:00414700 ; =============== S U B R O U T I N E =======================================
.text:00414700
.text:00414700 ; Attributes: thunk
.text:00414700
.text:00414700 ; size_t __cdecl strlen(const char *Str)
.text:00414700 strlen          proc near               ; CODE XREF: sub_4016C0+2FC↑p
.text:00414700                                         ; sub_4016C0+4AC↑p ...
.text:00414700
.text:00414700 Str             = dword ptr  4
.text:00414700
.text:00414700                 jmp     ds:__imp_strlen
.text:00414700 strlen          endp
.text:00414700
.text:00414700 ; ---------------------------------------------------------------------------
.text:00414706                 align 10h
.text:00414710
.text:00414710 ; =============== S U B R O U T I N E =======================================
.text:00414710
.text:00414710 ; Attributes: thunk
.text:00414710
.text:00414710 ; char *__cdecl getenv(const char *VarName)
.text:00414710 getenv          proc near               ; CODE XREF: sub_402680+1F1↑p
.text:00414710                                         ; sub_40AA40+C27↑p ...
.text:00414710
.text:00414710 VarName         = dword ptr  4
.text:00414710
.text:00414710                 jmp     ds:__imp_getenv
.text:00414710 getenv          endp
.text:00414710
.text:00414710 ; ---------------------------------------------------------------------------
.text:00414716                 align 10h
.text:00414720
.text:00414720 ; =============== S U B R O U T I N E =======================================
.text:00414720
.text:00414720 ; Attributes: thunk
.text:00414720
.text:00414720 ; int __cdecl fclose(FILE *Stream)
.text:00414720 fclose          proc near               ; CODE XREF: sub_402680+DC↑p
.text:00414720                                         ; sub_4028D0+C↑p ...
.text:00414720
.text:00414720 Stream          = dword ptr  4
.text:00414720
.text:00414720                 jmp     ds:__imp_fclose
.text:00414720 fclose          endp
.text:00414720
.text:00414720 ; ---------------------------------------------------------------------------
.text:00414726                 align 10h
.text:00414730
.text:00414730 ; =============== S U B R O U T I N E =======================================
.text:00414730
.text:00414730 ; Attributes: thunk
.text:00414730
.text:00414730 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00414730 memcpy          proc near               ; CODE XREF: sub_401F00+22B↑p
.text:00414730                                         ; sub_401F00+279↑p ...
.text:00414730
.text:00414730 Src             = dword ptr  8
.text:00414730 Size            = dword ptr  0Ch
.text:00414730
.text:00414730                 jmp     ds:__imp_memcpy
.text:00414730 memcpy          endp
.text:00414730
.text:00414730 ; ---------------------------------------------------------------------------
.text:00414736                 align 10h
.text:00414740
.text:00414740 ; =============== S U B R O U T I N E =======================================
.text:00414740
.text:00414740 ; Attributes: thunk
.text:00414740
.text:00414740 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:00414740 memmove         proc near               ; CODE XREF: sub_401F00+377↑p
.text:00414740
.text:00414740 Src             = dword ptr  8
.text:00414740 Size            = dword ptr  0Ch
.text:00414740
.text:00414740                 jmp     ds:__imp_memmove
.text:00414740 memmove         endp
.text:00414740
.text:00414740 ; ---------------------------------------------------------------------------
.text:00414746                 align 10h
.text:00414750
.text:00414750 ; =============== S U B R O U T I N E =======================================
.text:00414750
.text:00414750 ; Attributes: thunk
.text:00414750
.text:00414750 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00414750 strncmp         proc near               ; CODE XREF: sub_401F00+69F↑p
.text:00414750                                         ; sub_40AA40+30F↑p ...
.text:00414750
.text:00414750 Str1            = dword ptr  4
.text:00414750 Str2            = dword ptr  8
.text:00414750 MaxCount        = dword ptr  0Ch
.text:00414750
.text:00414750                 jmp     ds:__imp_strncmp
.text:00414750 strncmp         endp
.text:00414750
.text:00414750 ; ---------------------------------------------------------------------------
.text:00414756                 align 10h
.text:00414760
.text:00414760 ; =============== S U B R O U T I N E =======================================
.text:00414760
.text:00414760 ; Attributes: thunk
.text:00414760
.text:00414760 ; int *__cdecl errno()
.text:00414760 _errno          proc near               ; CODE XREF: sub_4016C0+45E↑p
.text:00414760                                         ; sub_401CF0+B4↑p ...
.text:00414760                 jmp     ds:__imp__errno
.text:00414760 _errno          endp
.text:00414760
.text:00414760 ; ---------------------------------------------------------------------------
.text:00414766                 align 10h
.text:00414770
.text:00414770 ; =============== S U B R O U T I N E =======================================
.text:00414770
.text:00414770 ; Attributes: thunk
.text:00414770
.text:00414770 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00414770 fwrite          proc near               ; CODE XREF: sub_4016C0+429↑p
.text:00414770                                         ; sub_401F00+254↑p ...
.text:00414770
.text:00414770 Buffer          = dword ptr  4
.text:00414770 ElementSize     = dword ptr  8
.text:00414770 ElementCount    = dword ptr  0Ch
.text:00414770 Stream          = dword ptr  10h
.text:00414770
.text:00414770                 jmp     ds:__imp_fwrite
.text:00414770 fwrite          endp
.text:00414770
.text:00414770 ; ---------------------------------------------------------------------------
.text:00414776                 align 10h
.text:00414780
.text:00414780 ; =============== S U B R O U T I N E =======================================
.text:00414780
.text:00414780 ; Attributes: noreturn thunk
.text:00414780
.text:00414780 ; void __cdecl __noreturn exit(int Code)
.text:00414780 exit            proc near               ; CODE XREF: sub_4016C0:loc_401807↑p
.text:00414780                                         ; .text:00401BBB↑p ...
.text:00414780
.text:00414780 Code            = dword ptr  4
.text:00414780
.text:00414780                 jmp     ds:__imp_exit
.text:00414780 exit            endp
.text:00414780
.text:00414780 ; ---------------------------------------------------------------------------
.text:00414786                 align 10h
.text:00414790
.text:00414790 ; =============== S U B R O U T I N E =======================================
.text:00414790
.text:00414790 ; Attributes: thunk
.text:00414790
.text:00414790 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00414790 fputs           proc near               ; CODE XREF: sub_4016C0+1AB↑p
.text:00414790                                         ; sub_4016C0+1CD↑p ...
.text:00414790
.text:00414790 Buffer          = dword ptr  4
.text:00414790 Stream          = dword ptr  8
.text:00414790
.text:00414790                 jmp     ds:__imp_fputs
.text:00414790 fputs           endp
.text:00414790
.text:00414790 ; ---------------------------------------------------------------------------
.text:00414796                 align 10h
.text:004147A0
.text:004147A0 ; =============== S U B R O U T I N E =======================================
.text:004147A0
.text:004147A0 ; Attributes: thunk
.text:004147A0
.text:004147A0 ; int printf(const char *const Format, ...)
.text:004147A0 printf          proc near               ; CODE XREF: sub_4016C0+189↑p
.text:004147A0                                         ; sub_4016C0+250↑p ...
.text:004147A0
.text:004147A0 Format          = dword ptr  4
.text:004147A0
.text:004147A0                 jmp     ds:__imp_printf
.text:004147A0 printf          endp
.text:004147A0
.text:004147A0 ; ---------------------------------------------------------------------------
.text:004147A6                 align 10h
.text:004147B0
.text:004147B0 ; =============== S U B R O U T I N E =======================================
.text:004147B0
.text:004147B0 ; Attributes: thunk
.text:004147B0
.text:004147B0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004147B0 fprintf         proc near               ; CODE XREF: sub_4016C0+13B↑p
.text:004147B0                                         ; .text:00401BB3↑p ...
.text:004147B0
.text:004147B0 Stream          = dword ptr  4
.text:004147B0 Format          = dword ptr  8
.text:004147B0
.text:004147B0                 jmp     ds:__imp_fprintf
.text:004147B0 fprintf         endp
.text:004147B0
.text:004147B0 ; ---------------------------------------------------------------------------
.text:004147B6                 align 10h
.text:004147C0
.text:004147C0 ; =============== S U B R O U T I N E =======================================
.text:004147C0
.text:004147C0 ; Attributes: thunk
.text:004147C0
.text:004147C0 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:004147C0 _lseeki64       proc near               ; CODE XREF: sub_401CF0+63↑p
.text:004147C0                                         ; sub_401F00+48↑p ...
.text:004147C0
.text:004147C0 FileHandle      = dword ptr  4
.text:004147C0 Offset          = qword ptr  8
.text:004147C0 Origin          = dword ptr  10h
.text:004147C0
.text:004147C0                 jmp     ds:__imp__lseeki64
.text:004147C0 _lseeki64       endp
.text:004147C0
.text:004147C0 ; ---------------------------------------------------------------------------
.text:004147C6                 align 10h
.text:004147D0
.text:004147D0 ; =============== S U B R O U T I N E =======================================
.text:004147D0
.text:004147D0 ; Attributes: thunk
.text:004147D0
.text:004147D0 ; void __cdecl free(void *Block)
.text:004147D0 free            proc near               ; CODE XREF: sub_403AD0+112↑p
.text:004147D0                                         ; .text:004069E1↑p ...
.text:004147D0
.text:004147D0 Block           = dword ptr  4
.text:004147D0
.text:004147D0                 jmp     ds:__imp_free
.text:004147D0 free            endp
.text:004147D0
.text:004147D0 ; ---------------------------------------------------------------------------
.text:004147D6                 align 10h
.text:004147E0
.text:004147E0 ; =============== S U B R O U T I N E =======================================
.text:004147E0
.text:004147E0 ; Attributes: noreturn thunk
.text:004147E0
.text:004147E0 ; void __cdecl __noreturn abort()
.text:004147E0 abort           proc near               ; CODE XREF: sub_403AD0:loc_403C8A↑p
.text:004147E0                                         ; .text:loc_406E38↑p ...
.text:004147E0                 jmp     ds:__imp_abort
.text:004147E0 abort           endp
.text:004147E0
.text:004147E0 ; ---------------------------------------------------------------------------
.text:004147E6                 align 10h
.text:004147F0
.text:004147F0 ; =============== S U B R O U T I N E =======================================
.text:004147F0
.text:004147F0 ; Attributes: thunk
.text:004147F0
.text:004147F0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004147F0 iswctype        proc near               ; CODE XREF: sub_402990+78B↑p
.text:004147F0                                         ; sub_406ED0+1F86↑p
.text:004147F0
.text:004147F0 C               = word ptr  4
.text:004147F0 Type            = word ptr  8
.text:004147F0
.text:004147F0                 jmp     ds:__imp_iswctype
.text:004147F0 iswctype        endp
.text:004147F0
.text:004147F0 ; ---------------------------------------------------------------------------
.text:004147F6                 align 10h
.text:00414800
.text:00414800 ; =============== S U B R O U T I N E =======================================
.text:00414800
.text:00414800 ; Attributes: thunk
.text:00414800
.text:00414800 ; int __cdecl isctype(int C, int Type)
.text:00414800 _isctype        proc near               ; CODE XREF: sub_402990+610↑p
.text:00414800                                         ; .text:00406A39↑p ...
.text:00414800
.text:00414800 C               = dword ptr  4
.text:00414800 Type            = dword ptr  8
.text:00414800
.text:00414800                 jmp     ds:__imp__isctype
.text:00414800 _isctype        endp
.text:00414800
.text:00414800 ; ---------------------------------------------------------------------------
.text:00414806                 align 10h
.text:00414810
.text:00414810 ; =============== S U B R O U T I N E =======================================
.text:00414810
.text:00414810 ; Attributes: thunk
.text:00414810
.text:00414810 ; int __cdecl tolower(int C)
.text:00414810 tolower         proc near               ; CODE XREF: .text:00406A58↑p
.text:00414810
.text:00414810 C               = dword ptr  4
.text:00414810
.text:00414810                 jmp     ds:__imp_tolower
.text:00414810 tolower         endp
.text:00414810
.text:00414810 ; ---------------------------------------------------------------------------
.text:00414816                 align 10h
.text:00414820
.text:00414820 ; =============== S U B R O U T I N E =======================================
.text:00414820
.text:00414820 ; Attributes: thunk
.text:00414820
.text:00414820 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00414820 memset          proc near               ; CODE XREF: sub_406ED0+330A↑p
.text:00414820                                         ; sub_40A4E0+66↑p ...
.text:00414820
.text:00414820 Val             = dword ptr  8
.text:00414820 Size            = dword ptr  0Ch
.text:00414820
.text:00414820                 jmp     ds:__imp_memset
.text:00414820 memset          endp
.text:00414820
.text:00414820 ; ---------------------------------------------------------------------------
.text:00414826                 align 10h
.text:00414830
.text:00414830 ; =============== S U B R O U T I N E =======================================
.text:00414830
.text:00414830 ; Attributes: thunk
.text:00414830
.text:00414830 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00414830 realloc         proc near               ; CODE XREF: sub_403FC0+7BE↑p
.text:00414830                                         ; sub_403FC0+7DC↑p ...
.text:00414830
.text:00414830 Block           = dword ptr  4
.text:00414830 Size            = dword ptr  8
.text:00414830
.text:00414830                 jmp     ds:__imp_realloc
.text:00414830 realloc         endp
.text:00414830
.text:00414830 ; ---------------------------------------------------------------------------
.text:00414836                 align 10h
.text:00414840
.text:00414840 ; =============== S U B R O U T I N E =======================================
.text:00414840
.text:00414840 ; Attributes: thunk
.text:00414840
.text:00414840 ; void *__cdecl malloc(size_t Size)
.text:00414840 malloc          proc near               ; CODE XREF: sub_403FC0+74↑p
.text:00414840                                         ; sub_403FC0+555↑p ...
.text:00414840
.text:00414840 Size            = dword ptr  4
.text:00414840
.text:00414840                 jmp     ds:__imp_malloc
.text:00414840 malloc          endp
.text:00414840
.text:00414840 ; ---------------------------------------------------------------------------
.text:00414846                 align 10h
.text:00414850
.text:00414850 ; =============== S U B R O U T I N E =======================================
.text:00414850
.text:00414850 ; Attributes: thunk
.text:00414850
.text:00414850 ; char *__cdecl strchr(const char *Str, int Val)
.text:00414850 strchr          proc near               ; CODE XREF: sub_40AA40+539↑p
.text:00414850                                         ; sub_40AA40+60A↑p ...
.text:00414850
.text:00414850 Str             = dword ptr  4
.text:00414850 Val             = dword ptr  8
.text:00414850
.text:00414850                 jmp     ds:__imp_strchr
.text:00414850 strchr          endp
.text:00414850
.text:00414850 ; ---------------------------------------------------------------------------
.text:00414856                 align 10h
.text:00414860
.text:00414860 ; =============== S U B R O U T I N E =======================================
.text:00414860
.text:00414860 ; Attributes: thunk
.text:00414860
.text:00414860 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00414860 vfprintf        proc near               ; CODE XREF: sub_40BBD0+C1↑p
.text:00414860                                         ; sub_40C480+49↑p ...
.text:00414860
.text:00414860 Stream          = dword ptr  4
.text:00414860 Format          = dword ptr  8
.text:00414860 ArgList         = dword ptr  0Ch
.text:00414860
.text:00414860                 jmp     ds:__imp_vfprintf
.text:00414860 vfprintf        endp
.text:00414860
.text:00414860 ; ---------------------------------------------------------------------------
.text:00414866                 align 10h
.text:00414870
.text:00414870 ; =============== S U B R O U T I N E =======================================
.text:00414870
.text:00414870 ; Attributes: thunk
.text:00414870
.text:00414870 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00414870 _flsbuf         proc near               ; CODE XREF: sub_40BBD0+128↑p
.text:00414870                                         ; sub_40BBD0+13A↑p ...
.text:00414870
.text:00414870 File            = dword ptr  8
.text:00414870
.text:00414870                 jmp     ds:__imp__flsbuf
.text:00414870 _flsbuf         endp
.text:00414870
.text:00414870 ; ---------------------------------------------------------------------------
.text:00414876                 align 10h
.text:00414880
.text:00414880 ; =============== S U B R O U T I N E =======================================
.text:00414880
.text:00414880 ; Attributes: thunk
.text:00414880
.text:00414880 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00414880 calloc          proc near               ; CODE XREF: .text:0040C233↑p
.text:00414880                                         ; sub_40FB30+AC↑p
.text:00414880
.text:00414880 Count           = dword ptr  4
.text:00414880 Size            = dword ptr  8
.text:00414880
.text:00414880                 jmp     ds:__imp_calloc
.text:00414880 calloc          endp
.text:00414880
.text:00414880 ; ---------------------------------------------------------------------------
.text:00414886                 align 10h
.text:00414890
.text:00414890 ; =============== S U B R O U T I N E =======================================
.text:00414890
.text:00414890 ; Attributes: thunk
.text:00414890
.text:00414890 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00414890 strcmp          proc near               ; CODE XREF: sub_40C584+180↑p
.text:00414890                                         ; .text:004110AB↑p
.text:00414890
.text:00414890 Str1            = dword ptr  4
.text:00414890 Str2            = dword ptr  8
.text:00414890
.text:00414890                 jmp     ds:__imp_strcmp
.text:00414890 strcmp          endp
.text:00414890
.text:00414890 ; ---------------------------------------------------------------------------
.text:00414896                 align 10h
.text:004148A0
.text:004148A0 ; =============== S U B R O U T I N E =======================================
.text:004148A0
.text:004148A0 ; Attributes: thunk
.text:004148A0
.text:004148A0 ; char *__cdecl strerror(int ErrorMessage)
.text:004148A0 strerror        proc near               ; CODE XREF: sub_40C480+A5↑p
.text:004148A0                                         ; sub_40C584+10F↑p
.text:004148A0
.text:004148A0 ErrorMessage    = dword ptr  4
.text:004148A0
.text:004148A0                 jmp     ds:__imp_strerror
.text:004148A0 strerror        endp
.text:004148A0
.text:004148A0 ; ---------------------------------------------------------------------------
.text:004148A6                 align 10h
.text:004148B0
.text:004148B0 ; =============== S U B R O U T I N E =======================================
.text:004148B0
.text:004148B0 ; Attributes: thunk
.text:004148B0
.text:004148B0 ; int __cdecl chmod_0(const char *FileName, int AccessMode)
.text:004148B0 _chmod_0        proc near               ; CODE XREF: sub_40C720+9B↑p
.text:004148B0
.text:004148B0 FileName        = dword ptr  4
.text:004148B0 AccessMode      = dword ptr  8
.text:004148B0
.text:004148B0                 jmp     ds:__imp__chmod_0
.text:004148B0 _chmod_0        endp
.text:004148B0
.text:004148B0 ; ---------------------------------------------------------------------------
.text:004148B6                 align 10h
.text:004148C0
.text:004148C0 ; =============== S U B R O U T I N E =======================================
.text:004148C0
.text:004148C0 ; Attributes: thunk
.text:004148C0
.text:004148C0 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:004148C0 _open_0         proc near               ; CODE XREF: sub_40CFC0:loc_40D350↑p
.text:004148C0
.text:004148C0 FileName        = dword ptr  4
.text:004148C0 OpenFlag        = dword ptr  8
.text:004148C0
.text:004148C0                 jmp     ds:__imp__open_0
.text:004148C0 _open_0         endp
.text:004148C0
.text:004148C0 ; ---------------------------------------------------------------------------
.text:004148C6                 align 10h
.text:004148D0
.text:004148D0 ; =============== S U B R O U T I N E =======================================
.text:004148D0
.text:004148D0 ; Attributes: noreturn thunk
.text:004148D0
.text:004148D0 _assert         proc near               ; CODE XREF: sub_40CFC0+414↑p
.text:004148D0                 jmp     ds:__imp__assert
.text:004148D0 _assert         endp
.text:004148D0
.text:004148D0 ; ---------------------------------------------------------------------------
.text:004148D6                 align 10h
.text:004148E0
.text:004148E0 ; =============== S U B R O U T I N E =======================================
.text:004148E0
.text:004148E0 ; Attributes: thunk
.text:004148E0
.text:004148E0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:004148E0 strcat          proc near               ; CODE XREF: sub_40DD80+98↑p
.text:004148E0                                         ; sub_40F880+74↑p ...
.text:004148E0
.text:004148E0 Destination     = dword ptr  4
.text:004148E0 Source          = dword ptr  8
.text:004148E0
.text:004148E0                 jmp     ds:__imp_strcat
.text:004148E0 strcat          endp
.text:004148E0
.text:004148E0 ; ---------------------------------------------------------------------------
.text:004148E6                 align 10h
.text:004148F0
.text:004148F0 ; =============== S U B R O U T I N E =======================================
.text:004148F0
.text:004148F0 ; Attributes: thunk
.text:004148F0
.text:004148F0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:004148F0 strstr          proc near               ; CODE XREF: sub_40E3D0+3BF↑p
.text:004148F0                                         ; sub_40E3D0+3DC↑p ...
.text:004148F0
.text:004148F0 Str             = dword ptr  4
.text:004148F0 SubStr          = dword ptr  8
.text:004148F0
.text:004148F0                 jmp     ds:__imp_strstr
.text:004148F0 strstr          endp
.text:004148F0
.text:004148F0 ; ---------------------------------------------------------------------------
.text:004148F6                 align 10h
.text:00414900
.text:00414900 ; =============== S U B R O U T I N E =======================================
.text:00414900
.text:00414900 ; Attributes: thunk
.text:00414900
.text:00414900 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:00414900 strrchr         proc near               ; CODE XREF: sub_40E3D0+CB↑p
.text:00414900                                         ; sub_40E3D0+3A7↑p ...
.text:00414900
.text:00414900 Str             = dword ptr  4
.text:00414900
.text:00414900                 jmp     ds:__imp_strrchr
.text:00414900 strrchr         endp
.text:00414900
.text:00414900 ; ---------------------------------------------------------------------------
.text:00414906                 align 10h
.text:00414910
.text:00414910 ; =============== S U B R O U T I N E =======================================
.text:00414910
.text:00414910 ; Attributes: thunk
.text:00414910
.text:00414910 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00414910 strncpy         proc near               ; CODE XREF: sub_40FB30+BE↑p
.text:00414910                                         ; .text:004103AA↑p ...
.text:00414910
.text:00414910 Destination     = dword ptr  4
.text:00414910 Source          = dword ptr  8
.text:00414910 Count           = dword ptr  0Ch
.text:00414910
.text:00414910                 jmp     ds:__imp_strncpy
.text:00414910 strncpy         endp
.text:00414910
.text:00414910 ; ---------------------------------------------------------------------------
.text:00414916                 align 10h
.text:00414920
.text:00414920 ; =============== S U B R O U T I N E =======================================
.text:00414920
.text:00414920 ; Attributes: thunk
.text:00414920
.text:00414920 ; int __cdecl toupper(int C)
.text:00414920 toupper         proc near               ; CODE XREF: sub_40FB30+10E↑p
.text:00414920
.text:00414920 C               = dword ptr  4
.text:00414920
.text:00414920                 jmp     ds:__imp_toupper
.text:00414920 toupper         endp
.text:00414920
.text:00414920 ; ---------------------------------------------------------------------------
.text:00414926                 align 10h
.text:00414930
.text:00414930 ; =============== S U B R O U T I N E =======================================
.text:00414930
.text:00414930 ; Attributes: thunk
.text:00414930
.text:00414930 ; int __cdecl isalpha(int C)
.text:00414930 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00414930
.text:00414930 C               = dword ptr  4
.text:00414930
.text:00414930                 jmp     ds:__imp_isalpha
.text:00414930 isalpha         endp
.text:00414930
.text:00414930 ; ---------------------------------------------------------------------------
.text:00414936                 align 10h
.text:00414940
.text:00414940 ; =============== S U B R O U T I N E =======================================
.text:00414940
.text:00414940 ; Attributes: thunk
.text:00414940
.text:00414940 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00414940 _stricmp_0      proc near               ; CODE XREF: .text:00410EE4↑p
.text:00414940
.text:00414940 String1         = dword ptr  4
.text:00414940 String2         = dword ptr  8
.text:00414940
.text:00414940                 jmp     ds:__imp__stricmp_0
.text:00414940 _stricmp_0      endp
.text:00414940
.text:00414940 ; ---------------------------------------------------------------------------
.text:00414946                 align 10h
.text:00414950
.text:00414950 ; =============== S U B R O U T I N E =======================================
.text:00414950
.text:00414950 ; Attributes: thunk
.text:00414950
.text:00414950 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00414950 sscanf          proc near               ; CODE XREF: .text:004112EE↑p
.text:00414950
.text:00414950 Buffer          = dword ptr  4
.text:00414950 Format          = dword ptr  8
.text:00414950
.text:00414950                 jmp     ds:__imp_sscanf
.text:00414950 sscanf          endp
.text:00414950
.text:00414950 ; ---------------------------------------------------------------------------
.text:00414956                 align 10h
.text:00414960
.text:00414960 ; =============== S U B R O U T I N E =======================================
.text:00414960
.text:00414960 ; Attributes: thunk
.text:00414960
.text:00414960 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00414960 strspn          proc near               ; CODE XREF: .text:0041113A↑p
.text:00414960                                         ; .text:00411354↑p ...
.text:00414960
.text:00414960 Str             = dword ptr  4
.text:00414960 Control         = dword ptr  8
.text:00414960
.text:00414960                 jmp     ds:__imp_strspn
.text:00414960 strspn          endp
.text:00414960
.text:00414960 ; ---------------------------------------------------------------------------
.text:00414966                 align 10h
.text:00414970
.text:00414970 ; =============== S U B R O U T I N E =======================================
.text:00414970
.text:00414970 ; Attributes: thunk
.text:00414970
.text:00414970 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00414970 fopen           proc near               ; CODE XREF: sub_411BEF+26↑p
.text:00414970                                         ; sub_411BEF+99↑p
.text:00414970
.text:00414970 FileName        = dword ptr  4
.text:00414970 Mode            = dword ptr  8
.text:00414970
.text:00414970                 jmp     ds:__imp_fopen
.text:00414970 fopen           endp
.text:00414970
.text:00414970 ; ---------------------------------------------------------------------------
.text:00414976                 align 10h
.text:00414980
.text:00414980 ; =============== S U B R O U T I N E =======================================
.text:00414980
.text:00414980 ; Attributes: thunk
.text:00414980
.text:00414980 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00414980 _get_osfhandle  proc near               ; CODE XREF: sub_411DA0+3A↑p
.text:00414980                                         ; sub_412980+15↑p
.text:00414980
.text:00414980 FileHandle      = dword ptr  4
.text:00414980
.text:00414980                 jmp     ds:__imp__get_osfhandle
.text:00414980 _get_osfhandle  endp
.text:00414980
.text:00414980 ; ---------------------------------------------------------------------------
.text:00414986                 align 10h
.text:00414990
.text:00414990 ; =============== S U B R O U T I N E =======================================
.text:00414990
.text:00414990 ; Attributes: thunk
.text:00414990
.text:00414990 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00414990 _filelengthi64  proc near               ; CODE XREF: sub_412980+1F↑p
.text:00414990
.text:00414990 FileHandle      = dword ptr  4
.text:00414990
.text:00414990                 jmp     ds:__imp__filelengthi64
.text:00414990 _filelengthi64  endp
.text:00414990
.text:00414990 ; ---------------------------------------------------------------------------
.text:00414996                 align 10h
.text:004149A0
.text:004149A0 ; =============== S U B R O U T I N E =======================================
.text:004149A0
.text:004149A0 ; Attributes: thunk
.text:004149A0
.text:004149A0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:004149A0 strpbrk         proc near               ; CODE XREF: sub_4129E0+87↑p
.text:004149A0
.text:004149A0 Str             = dword ptr  4
.text:004149A0 Control         = dword ptr  8
.text:004149A0
.text:004149A0                 jmp     ds:__imp_strpbrk
.text:004149A0 strpbrk         endp
.text:004149A0
.text:004149A0 ; ---------------------------------------------------------------------------
.text:004149A6                 align 10h
.text:004149B0
.text:004149B0 ; =============== S U B R O U T I N E =======================================
.text:004149B0
.text:004149B0 ; Attributes: thunk
.text:004149B0
.text:004149B0 ; FILE *__cdecl fdopen_0(int FileHandle, const char *Format)
.text:004149B0 _fdopen_0       proc near               ; CODE XREF: sub_412A80+69↑p
.text:004149B0
.text:004149B0 FileHandle      = dword ptr  4
.text:004149B0 Format          = dword ptr  8
.text:004149B0
.text:004149B0                 jmp     ds:__imp__fdopen_0
.text:004149B0 _fdopen_0       endp
.text:004149B0
.text:004149B0 ; ---------------------------------------------------------------------------
.text:004149B6                 align 10h
.text:004149C0
.text:004149C0 ; =============== S U B R O U T I N E =======================================
.text:004149C0
.text:004149C0 ; Attributes: thunk
.text:004149C0
.text:004149C0 ; int __cdecl close_0(int FileHandle)
.text:004149C0 _close_0        proc near               ; CODE XREF: sub_412A80+90↑p
.text:004149C0
.text:004149C0 FileHandle      = dword ptr  4
.text:004149C0
.text:004149C0                 jmp     ds:__imp__close_0
.text:004149C0 _close_0        endp
.text:004149C0
.text:004149C0 ; ---------------------------------------------------------------------------
.text:004149C6                 align 10h
.text:004149D0
.text:004149D0 ; =============== S U B R O U T I N E =======================================
.text:004149D0
.text:004149D0 ; Attributes: thunk
.text:004149D0
.text:004149D0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004149D0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004149D0
.text:004149D0 lpTopLevelExceptionFilter= dword ptr  4
.text:004149D0
.text:004149D0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004149D0 SetUnhandledExceptionFilter endp
.text:004149D0
.text:004149D0 ; ---------------------------------------------------------------------------
.text:004149D6                 align 10h
.text:004149E0
.text:004149E0 ; =============== S U B R O U T I N E =======================================
.text:004149E0
.text:004149E0 ; Attributes: noreturn thunk
.text:004149E0
.text:004149E0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004149E0 ExitProcess     proc near
.text:004149E0
.text:004149E0 uExitCode       = dword ptr  4
.text:004149E0
.text:004149E0                 jmp     ds:__imp_ExitProcess
.text:004149E0 ExitProcess     endp
.text:004149E0
.text:004149E0 ; ---------------------------------------------------------------------------
.text:004149E6                 align 10h
.text:004149F0
.text:004149F0 ; =============== S U B R O U T I N E =======================================
.text:004149F0
.text:004149F0 ; Attributes: thunk
.text:004149F0
.text:004149F0 ; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
.text:004149F0 DeleteFileA     proc near               ; CODE XREF: sub_40C720+50↑p
.text:004149F0
.text:004149F0 lpFileName      = dword ptr  4
.text:004149F0
.text:004149F0                 jmp     ds:__imp_DeleteFileA
.text:004149F0 DeleteFileA     endp
.text:004149F0
.text:004149F0 ; ---------------------------------------------------------------------------
.text:004149F6                 align 10h
.text:00414A00
.text:00414A00 ; =============== S U B R O U T I N E =======================================
.text:00414A00
.text:00414A00 ; Attributes: thunk
.text:00414A00
.text:00414A00 ; DWORD __stdcall GetLastError()
.text:00414A00 GetLastError    proc near               ; CODE XREF: sub_40CB20+3↑p
.text:00414A00                                         ; sub_40E3D0:loc_40E659↑p ...
.text:00414A00                 jmp     ds:__imp_GetLastError
.text:00414A00 GetLastError    endp
.text:00414A00
.text:00414A00 ; ---------------------------------------------------------------------------
.text:00414A06                 align 10h
.text:00414A10
.text:00414A10 ; =============== S U B R O U T I N E =======================================
.text:00414A10
.text:00414A10 ; Attributes: thunk
.text:00414A10
.text:00414A10 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00414A10 SetErrorMode    proc near               ; CODE XREF: sub_40CB40+57↑p
.text:00414A10                                         ; sub_40CB40+78↑p ...
.text:00414A10
.text:00414A10 uMode           = dword ptr  4
.text:00414A10
.text:00414A10                 jmp     ds:__imp_SetErrorMode
.text:00414A10 SetErrorMode    endp
.text:00414A10
.text:00414A10 ; ---------------------------------------------------------------------------
.text:00414A16                 align 10h
.text:00414A20
.text:00414A20 ; =============== S U B R O U T I N E =======================================
.text:00414A20
.text:00414A20 ; Attributes: thunk
.text:00414A20
.text:00414A20 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00414A20 GetFileAttributesA proc near            ; CODE XREF: sub_40CB40+62↑p
.text:00414A20                                         ; sub_40DC10+47↑p
.text:00414A20
.text:00414A20 lpFileName      = dword ptr  4
.text:00414A20
.text:00414A20                 jmp     ds:__imp_GetFileAttributesA
.text:00414A20 GetFileAttributesA endp
.text:00414A20
.text:00414A20 ; ---------------------------------------------------------------------------
.text:00414A26                 align 10h
.text:00414A30
.text:00414A30 ; =============== S U B R O U T I N E =======================================
.text:00414A30
.text:00414A30 ; Attributes: thunk
.text:00414A30
.text:00414A30 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00414A30 CreateDirectoryA proc near              ; CODE XREF: sub_40D880+22↑p
.text:00414A30
.text:00414A30 lpPathName      = dword ptr  4
.text:00414A30 lpSecurityAttributes= dword ptr  8
.text:00414A30
.text:00414A30                 jmp     ds:__imp_CreateDirectoryA
.text:00414A30 CreateDirectoryA endp
.text:00414A30
.text:00414A30 ; ---------------------------------------------------------------------------
.text:00414A36                 align 10h
.text:00414A40
.text:00414A40 ; =============== S U B R O U T I N E =======================================
.text:00414A40
.text:00414A40 ; Attributes: thunk
.text:00414A40
.text:00414A40 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00414A40 GetTimeZoneInformation proc near        ; CODE XREF: sub_40DA90+22↑p
.text:00414A40
.text:00414A40 lpTimeZoneInformation= dword ptr  4
.text:00414A40
.text:00414A40                 jmp     ds:__imp_GetTimeZoneInformation
.text:00414A40 GetTimeZoneInformation endp
.text:00414A40
.text:00414A40 ; ---------------------------------------------------------------------------
.text:00414A46                 align 10h
.text:00414A50
.text:00414A50 ; =============== S U B R O U T I N E =======================================
.text:00414A50
.text:00414A50 ; Attributes: thunk
.text:00414A50
.text:00414A50 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00414A50 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40DA90+4F↑p
.text:00414A50
.text:00414A50 lpSystemTimeAsFileTime= dword ptr  4
.text:00414A50
.text:00414A50                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00414A50 GetSystemTimeAsFileTime endp
.text:00414A50
.text:00414A50 ; ---------------------------------------------------------------------------
.text:00414A56                 align 10h
.text:00414A60
.text:00414A60 ; =============== S U B R O U T I N E =======================================
.text:00414A60
.text:00414A60 ; Attributes: thunk
.text:00414A60
.text:00414A60 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00414A60 GetModuleHandleA proc near              ; CODE XREF: sub_40DC10+18↑p
.text:00414A60                                         ; sub_40E3D0+329↑p ...
.text:00414A60
.text:00414A60 lpModuleName    = dword ptr  4
.text:00414A60
.text:00414A60                 jmp     ds:__imp_GetModuleHandleA
.text:00414A60 GetModuleHandleA endp
.text:00414A60
.text:00414A60 ; ---------------------------------------------------------------------------
.text:00414A66                 align 10h
.text:00414A70
.text:00414A70 ; =============== S U B R O U T I N E =======================================
.text:00414A70
.text:00414A70 ; Attributes: thunk
.text:00414A70
.text:00414A70 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00414A70 GetProcAddress  proc near               ; CODE XREF: sub_40DC10+33↑p
.text:00414A70                                         ; sub_40DD80+2E↑p ...
.text:00414A70
.text:00414A70 hModule         = dword ptr  4
.text:00414A70 lpProcName      = dword ptr  8
.text:00414A70
.text:00414A70                 jmp     ds:__imp_GetProcAddress
.text:00414A70 GetProcAddress  endp
.text:00414A70
.text:00414A70 ; ---------------------------------------------------------------------------
.text:00414A76                 align 10h
.text:00414A80
.text:00414A80 ; =============== S U B R O U T I N E =======================================
.text:00414A80
.text:00414A80 ; Attributes: thunk
.text:00414A80
.text:00414A80 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00414A80 FreeLibrary     proc near               ; CODE XREF: sub_40DC10+A4↑p
.text:00414A80                                         ; sub_40DD80+11D↑p ...
.text:00414A80
.text:00414A80 hLibModule      = dword ptr  4
.text:00414A80
.text:00414A80                 jmp     ds:__imp_FreeLibrary
.text:00414A80 FreeLibrary     endp
.text:00414A80
.text:00414A80 ; ---------------------------------------------------------------------------
.text:00414A86                 align 10h
.text:00414A90
.text:00414A90 ; =============== S U B R O U T I N E =======================================
.text:00414A90
.text:00414A90 ; Attributes: thunk
.text:00414A90
.text:00414A90 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00414A90 FindFirstFileA  proc near               ; CODE XREF: sub_40DC10+CE↑p
.text:00414A90                                         ; sub_40DD80+14F↑p ...
.text:00414A90
.text:00414A90 lpFileName      = dword ptr  4
.text:00414A90 lpFindFileData  = dword ptr  8
.text:00414A90
.text:00414A90                 jmp     ds:__imp_FindFirstFileA
.text:00414A90 FindFirstFileA  endp
.text:00414A90
.text:00414A90 ; ---------------------------------------------------------------------------
.text:00414A96                 align 10h
.text:00414AA0
.text:00414AA0 ; =============== S U B R O U T I N E =======================================
.text:00414AA0
.text:00414AA0 ; Attributes: thunk
.text:00414AA0
.text:00414AA0 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00414AA0 FindClose       proc near               ; CODE XREF: sub_40DC10+123↑p
.text:00414AA0                                         ; sub_40DD80+10E↑p ...
.text:00414AA0
.text:00414AA0 hFindFile       = dword ptr  4
.text:00414AA0
.text:00414AA0                 jmp     ds:__imp_FindClose
.text:00414AA0 FindClose       endp
.text:00414AA0
.text:00414AA0 ; ---------------------------------------------------------------------------
.text:00414AA6                 align 10h
.text:00414AB0
.text:00414AB0 ; =============== S U B R O U T I N E =======================================
.text:00414AB0
.text:00414AB0 ; Attributes: thunk
.text:00414AB0
.text:00414AB0 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00414AB0 LoadLibraryA    proc near               ; CODE XREF: sub_40DD80+13↑p
.text:00414AB0                                         ; sub_40E3D0+134↑p ...
.text:00414AB0
.text:00414AB0 lpLibFileName   = dword ptr  4
.text:00414AB0
.text:00414AB0                 jmp     ds:__imp_LoadLibraryA
.text:00414AB0 LoadLibraryA    endp
.text:00414AB0
.text:00414AB0 ; ---------------------------------------------------------------------------
.text:00414AB6                 align 10h
.text:00414AC0
.text:00414AC0 ; =============== S U B R O U T I N E =======================================
.text:00414AC0
.text:00414AC0 ; Attributes: thunk
.text:00414AC0
.text:00414AC0 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00414AC0 FindNextFileA   proc near               ; CODE XREF: sub_40DD80+FF↑p
.text:00414AC0
.text:00414AC0 hFindFile       = dword ptr  4
.text:00414AC0 lpFindFileData  = dword ptr  8
.text:00414AC0
.text:00414AC0                 jmp     ds:__imp_FindNextFileA
.text:00414AC0 FindNextFileA   endp
.text:00414AC0
.text:00414AC0 ; ---------------------------------------------------------------------------
.text:00414AC6                 align 10h
.text:00414AD0
.text:00414AD0 ; =============== S U B R O U T I N E =======================================
.text:00414AD0
.text:00414AD0 ; Attributes: thunk
.text:00414AD0
.text:00414AD0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00414AD0 GetFileType     proc near               ; CODE XREF: sub_40DF00+43↑p
.text:00414AD0                                         ; .text:0040EBBA↑p
.text:00414AD0
.text:00414AD0 hFile           = dword ptr  4
.text:00414AD0
.text:00414AD0                 jmp     ds:__imp_GetFileType
.text:00414AD0 GetFileType     endp
.text:00414AD0
.text:00414AD0 ; ---------------------------------------------------------------------------
.text:00414AD6                 align 10h
.text:00414AE0
.text:00414AE0 ; =============== S U B R O U T I N E =======================================
.text:00414AE0
.text:00414AE0 ; Attributes: thunk
.text:00414AE0
.text:00414AE0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00414AE0 GetFileInformationByHandle proc near    ; CODE XREF: sub_40DF00+69↑p
.text:00414AE0
.text:00414AE0 hFile           = dword ptr  4
.text:00414AE0 lpFileInformation= dword ptr  8
.text:00414AE0
.text:00414AE0                 jmp     ds:__imp_GetFileInformationByHandle
.text:00414AE0 GetFileInformationByHandle endp
.text:00414AE0
.text:00414AE0 ; ---------------------------------------------------------------------------
.text:00414AE6                 align 10h
.text:00414AF0
.text:00414AF0 ; =============== S U B R O U T I N E =======================================
.text:00414AF0
.text:00414AF0 ; Attributes: thunk
.text:00414AF0
.text:00414AF0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00414AF0 GetFileSize     proc near               ; CODE XREF: sub_40DF00+3F2↑p
.text:00414AF0
.text:00414AF0 hFile           = dword ptr  4
.text:00414AF0 lpFileSizeHigh  = dword ptr  8
.text:00414AF0
.text:00414AF0                 jmp     ds:__imp_GetFileSize
.text:00414AF0 GetFileSize     endp
.text:00414AF0
.text:00414AF0 ; ---------------------------------------------------------------------------
.text:00414AF6                 align 10h
.text:00414B00
.text:00414B00 ; =============== S U B R O U T I N E =======================================
.text:00414B00
.text:00414B00 ; Attributes: thunk
.text:00414B00
.text:00414B00 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00414B00 PeekNamedPipe   proc near               ; CODE XREF: sub_40DF00+439↑p
.text:00414B00
.text:00414B00 hNamedPipe      = dword ptr  4
.text:00414B00 lpBuffer        = dword ptr  8
.text:00414B00 nBufferSize     = dword ptr  0Ch
.text:00414B00 lpBytesRead     = dword ptr  10h
.text:00414B00 lpTotalBytesAvail= dword ptr  14h
.text:00414B00 lpBytesLeftThisMessage= dword ptr  18h
.text:00414B00
.text:00414B00                 jmp     ds:__imp_PeekNamedPipe
.text:00414B00 PeekNamedPipe   endp
.text:00414B00
.text:00414B00 ; ---------------------------------------------------------------------------
.text:00414B06                 align 10h
.text:00414B10
.text:00414B10 ; =============== S U B R O U T I N E =======================================
.text:00414B10
.text:00414B10 ; Attributes: thunk
.text:00414B10
.text:00414B10 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00414B10 GetDriveTypeA   proc near               ; CODE XREF: sub_40E3D0+4C↑p
.text:00414B10
.text:00414B10 lpRootPathName  = dword ptr  4
.text:00414B10
.text:00414B10                 jmp     ds:__imp_GetDriveTypeA
.text:00414B10 GetDriveTypeA   endp
.text:00414B10
.text:00414B10 ; ---------------------------------------------------------------------------
.text:00414B16                 align 10h
.text:00414B20
.text:00414B20 ; =============== S U B R O U T I N E =======================================
.text:00414B20
.text:00414B20 ; Attributes: thunk
.text:00414B20
.text:00414B20 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00414B20 GetVolumeInformationA proc near         ; CODE XREF: sub_40E8D0+64↑p
.text:00414B20                                         ; .text:0040EE7C↑p ...
.text:00414B20
.text:00414B20 lpRootPathName  = dword ptr  4
.text:00414B20 lpVolumeNameBuffer= dword ptr  8
.text:00414B20 nVolumeNameSize = dword ptr  0Ch
.text:00414B20 lpVolumeSerialNumber= dword ptr  10h
.text:00414B20 lpMaximumComponentLength= dword ptr  14h
.text:00414B20 lpFileSystemFlags= dword ptr  18h
.text:00414B20 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00414B20 nFileSystemNameSize= dword ptr  20h
.text:00414B20
.text:00414B20                 jmp     ds:__imp_GetVolumeInformationA
.text:00414B20 GetVolumeInformationA endp
.text:00414B20
.text:00414B20 ; ---------------------------------------------------------------------------
.text:00414B26                 align 10h
.text:00414B30
.text:00414B30 ; =============== S U B R O U T I N E =======================================
.text:00414B30
.text:00414B30 ; Attributes: thunk
.text:00414B30
.text:00414B30 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00414B30 CreateFileA     proc near               ; CODE XREF: sub_40D980+1CE6↑p
.text:00414B30                                         ; .text:00410123↑p ...
.text:00414B30
.text:00414B30 lpFileName      = dword ptr  4
.text:00414B30 dwDesiredAccess = dword ptr  8
.text:00414B30 dwShareMode     = dword ptr  0Ch
.text:00414B30 lpSecurityAttributes= dword ptr  10h
.text:00414B30 dwCreationDisposition= dword ptr  14h
.text:00414B30 dwFlagsAndAttributes= dword ptr  18h
.text:00414B30 hTemplateFile   = dword ptr  1Ch
.text:00414B30
.text:00414B30                 jmp     ds:__imp_CreateFileA
.text:00414B30 CreateFileA     endp
.text:00414B30
.text:00414B30 ; ---------------------------------------------------------------------------
.text:00414B36                 align 10h
.text:00414B40
.text:00414B40 ; =============== S U B R O U T I N E =======================================
.text:00414B40
.text:00414B40 ; Attributes: thunk
.text:00414B40
.text:00414B40 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00414B40 CloseHandle     proc near               ; CODE XREF: sub_40D980+1D01↑p
.text:00414B40                                         ; .text:00410199↑p ...
.text:00414B40
.text:00414B40 hObject         = dword ptr  4
.text:00414B40
.text:00414B40                 jmp     ds:__imp_CloseHandle
.text:00414B40 CloseHandle     endp
.text:00414B40
.text:00414B40 ; ---------------------------------------------------------------------------
.text:00414B46                 align 10h
.text:00414B50
.text:00414B50 ; =============== S U B R O U T I N E =======================================
.text:00414B50
.text:00414B50 ; Attributes: thunk
.text:00414B50
.text:00414B50 ; BOOL __stdcall AreFileApisANSI()
.text:00414B50 AreFileApisANSI proc near               ; CODE XREF: sub_40F700+89↑p
.text:00414B50                 jmp     ds:__imp_AreFileApisANSI
.text:00414B50 AreFileApisANSI endp
.text:00414B50
.text:00414B50 ; ---------------------------------------------------------------------------
.text:00414B56                 align 10h
.text:00414B60
.text:00414B60 ; =============== S U B R O U T I N E =======================================
.text:00414B60
.text:00414B60 ; Attributes: thunk
.text:00414B60
.text:00414B60 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00414B60 MultiByteToWideChar proc near           ; CODE XREF: sub_40F700+BD↑p
.text:00414B60
.text:00414B60 CodePage        = dword ptr  4
.text:00414B60 dwFlags         = dword ptr  8
.text:00414B60 lpMultiByteStr  = dword ptr  0Ch
.text:00414B60 cbMultiByte     = dword ptr  10h
.text:00414B60 lpWideCharStr   = dword ptr  14h
.text:00414B60 cchWideChar     = dword ptr  18h
.text:00414B60
.text:00414B60                 jmp     ds:__imp_MultiByteToWideChar
.text:00414B60 MultiByteToWideChar endp
.text:00414B60
.text:00414B60 ; ---------------------------------------------------------------------------
.text:00414B66                 align 10h
.text:00414B70
.text:00414B70 ; =============== S U B R O U T I N E =======================================
.text:00414B70
.text:00414B70 ; Attributes: thunk
.text:00414B70
.text:00414B70 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00414B70 lstrcpyA        proc near               ; CODE XREF: sub_40F700+128↑p
.text:00414B70
.text:00414B70 lpString1       = dword ptr  4
.text:00414B70 lpString2       = dword ptr  8
.text:00414B70
.text:00414B70                 jmp     ds:__imp_lstrcpyA
.text:00414B70 lstrcpyA        endp
.text:00414B70
.text:00414B70 ; ---------------------------------------------------------------------------
.text:00414B76                 align 10h
.text:00414B80
.text:00414B80 ; =============== S U B R O U T I N E =======================================
.text:00414B80
.text:00414B80 ; Attributes: thunk
.text:00414B80
.text:00414B80 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00414B80 GetFullPathNameA proc near              ; CODE XREF: sub_40F9F0+45↑p
.text:00414B80                                         ; sub_40F9F0+ED↑p
.text:00414B80
.text:00414B80 lpFileName      = dword ptr  4
.text:00414B80 nBufferLength   = dword ptr  8
.text:00414B80 lpBuffer        = dword ptr  0Ch
.text:00414B80 lpFilePart      = dword ptr  10h
.text:00414B80
.text:00414B80                 jmp     ds:__imp_GetFullPathNameA
.text:00414B80 GetFullPathNameA endp
.text:00414B80
.text:00414B80 ; ---------------------------------------------------------------------------
.text:00414B86                 align 10h
.text:00414B90
.text:00414B90 ; =============== S U B R O U T I N E =======================================
.text:00414B90
.text:00414B90 ; Attributes: thunk
.text:00414B90
.text:00414B90 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00414B90 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040FDD8↑p
.text:00414B90                                         ; .text:0040FDF4↑p ...
.text:00414B90
.text:00414B90 nBufferLength   = dword ptr  4
.text:00414B90 lpBuffer        = dword ptr  8
.text:00414B90
.text:00414B90                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00414B90 GetCurrentDirectoryA endp
.text:00414B90
.text:00414B90 ; ---------------------------------------------------------------------------
.text:00414B96                 align 10h
.text:00414BA0
.text:00414BA0 ; =============== S U B R O U T I N E =======================================
.text:00414BA0
.text:00414BA0 ; Attributes: thunk
.text:00414BA0
.text:00414BA0 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00414BA0 DeviceIoControl proc near               ; CODE XREF: .text:0041018C↑p
.text:00414BA0                                         ; sub_410550+1E5↑p
.text:00414BA0
.text:00414BA0 hDevice         = dword ptr  4
.text:00414BA0 dwIoControlCode = dword ptr  8
.text:00414BA0 lpInBuffer      = dword ptr  0Ch
.text:00414BA0 nInBufferSize   = dword ptr  10h
.text:00414BA0 lpOutBuffer     = dword ptr  14h
.text:00414BA0 nOutBufferSize  = dword ptr  18h
.text:00414BA0 lpBytesReturned = dword ptr  1Ch
.text:00414BA0 lpOverlapped    = dword ptr  20h
.text:00414BA0
.text:00414BA0                 jmp     ds:__imp_DeviceIoControl
.text:00414BA0 DeviceIoControl endp
.text:00414BA0
.text:00414BA0 ; ---------------------------------------------------------------------------
.text:00414BA6                 align 10h
.text:00414BB0
.text:00414BB0 ; =============== S U B R O U T I N E =======================================
.text:00414BB0
.text:00414BB0 ; Attributes: thunk
.text:00414BB0
.text:00414BB0 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00414BB0 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:004104E3↑p
.text:00414BB0                                         ; sub_410550+7B↑p ...
.text:00414BB0
.text:00414BB0 lpRootPathName  = dword ptr  4
.text:00414BB0 lpSectorsPerCluster= dword ptr  8
.text:00414BB0 lpBytesPerSector= dword ptr  0Ch
.text:00414BB0 lpNumberOfFreeClusters= dword ptr  10h
.text:00414BB0 lpTotalNumberOfClusters= dword ptr  14h
.text:00414BB0
.text:00414BB0                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00414BB0 GetDiskFreeSpaceA endp
.text:00414BB0
.text:00414BB0 ; ---------------------------------------------------------------------------
.text:00414BB6                 align 10h
.text:00414BC0
.text:00414BC0 ; =============== S U B R O U T I N E =======================================
.text:00414BC0
.text:00414BC0 ; Attributes: thunk
.text:00414BC0
.text:00414BC0 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00414BC0 GetModuleFileNameA proc near            ; CODE XREF: sub_410D60+1C↑p
.text:00414BC0
.text:00414BC0 hModule         = dword ptr  4
.text:00414BC0 lpFilename      = dword ptr  8
.text:00414BC0 nSize           = dword ptr  0Ch
.text:00414BC0
.text:00414BC0                 jmp     ds:__imp_GetModuleFileNameA
.text:00414BC0 GetModuleFileNameA endp
.text:00414BC0
.text:00414BC0 ; ---------------------------------------------------------------------------
.text:00414BC6                 align 10h
.text:00414BD0
.text:00414BD0 ; =============== S U B R O U T I N E =======================================
.text:00414BD0
.text:00414BD0 ; Attributes: thunk
.text:00414BD0
.text:00414BD0 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00414BD0 GetShortPathNameA proc near             ; CODE XREF: .text:00410FE6↑p
.text:00414BD0                                         ; .text:00411010↑p
.text:00414BD0
.text:00414BD0 lpszLongPath    = dword ptr  4
.text:00414BD0 lpszShortPath   = dword ptr  8
.text:00414BD0 cchBuffer       = dword ptr  0Ch
.text:00414BD0
.text:00414BD0                 jmp     ds:__imp_GetShortPathNameA
.text:00414BD0 GetShortPathNameA endp
.text:00414BD0
.text:00414BD0 ; ---------------------------------------------------------------------------
.text:00414BD6                 align 10h
.text:00414BE0
.text:00414BE0 ; =============== S U B R O U T I N E =======================================
.text:00414BE0
.text:00414BE0 ; Attributes: thunk
.text:00414BE0
.text:00414BE0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00414BE0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:004114AF↑p
.text:00414BE0                                         ; .text:004114DE↑p ...
.text:00414BE0
.text:00414BE0 nBufferLength   = dword ptr  4
.text:00414BE0 lpBuffer        = dword ptr  8
.text:00414BE0
.text:00414BE0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00414BE0 GetLogicalDriveStringsA endp
.text:00414BE0
.text:00414BE0 ; ---------------------------------------------------------------------------
.text:00414BE6                 align 10h
.text:00414BF0
.text:00414BF0 ; =============== S U B R O U T I N E =======================================
.text:00414BF0
.text:00414BF0 ; Attributes: thunk
.text:00414BF0
.text:00414BF0 ; HANDLE __stdcall GetProcessHeap()
.text:00414BF0 GetProcessHeap  proc near               ; CODE XREF: .text:004114B9↑p
.text:00414BF0                                         ; sub_411B90+24↑p ...
.text:00414BF0                 jmp     ds:__imp_GetProcessHeap
.text:00414BF0 GetProcessHeap  endp
.text:00414BF0
.text:00414BF0 ; ---------------------------------------------------------------------------
.text:00414BF6                 align 10h
.text:00414C00
.text:00414C00 ; =============== S U B R O U T I N E =======================================
.text:00414C00
.text:00414C00 ; Attributes: thunk
.text:00414C00
.text:00414C00 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00414C00 HeapAlloc       proc near               ; CODE XREF: .text:004114CD↑p
.text:00414C00                                         ; sub_411B90+38↑p ...
.text:00414C00
.text:00414C00 hHeap           = dword ptr  4
.text:00414C00 dwFlags         = dword ptr  8
.text:00414C00 dwBytes         = dword ptr  0Ch
.text:00414C00
.text:00414C00                 jmp     ds:__imp_HeapAlloc
.text:00414C00 HeapAlloc       endp
.text:00414C00
.text:00414C00 ; ---------------------------------------------------------------------------
.text:00414C06                 align 10h
.text:00414C10
.text:00414C10 ; =============== S U B R O U T I N E =======================================
.text:00414C10
.text:00414C10 ; Attributes: thunk
.text:00414C10
.text:00414C10 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00414C10 HeapFree        proc near               ; CODE XREF: .text:00411CCD↑p
.text:00414C10
.text:00414C10 hHeap           = dword ptr  4
.text:00414C10 dwFlags         = dword ptr  8
.text:00414C10 lpMem           = dword ptr  0Ch
.text:00414C10
.text:00414C10                 jmp     ds:__imp_HeapFree
.text:00414C10 HeapFree        endp
.text:00414C10
.text:00414C10 ; ---------------------------------------------------------------------------
.text:00414C16                 align 10h
.text:00414C20
.text:00414C20 ; =============== S U B R O U T I N E =======================================
.text:00414C20
.text:00414C20 ; Attributes: thunk
.text:00414C20
.text:00414C20 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00414C20 lstrcmpiA       proc near               ; CODE XREF: .text:0041230B↑p
.text:00414C20                                         ; .text:00412322↑p ...
.text:00414C20
.text:00414C20 lpString1       = dword ptr  4
.text:00414C20 lpString2       = dword ptr  8
.text:00414C20
.text:00414C20                 jmp     ds:__imp_lstrcmpiA
.text:00414C20 lstrcmpiA       endp
.text:00414C20
.text:00414C20 ; ---------------------------------------------------------------------------
.text:00414C26                 align 10h
.text:00414C30
.text:00414C30 ; =============== S U B R O U T I N E =======================================
.text:00414C30
.text:00414C30 ; Attributes: thunk
.text:00414C30
.text:00414C30 ; DWORD __stdcall GetVersion()
.text:00414C30 GetVersion      proc near               ; CODE XREF: .text:00412693↑p
.text:00414C30                 jmp     ds:__imp_GetVersion
.text:00414C30 GetVersion      endp
.text:00414C30
.text:00414C30 ; ---------------------------------------------------------------------------
.text:00414C36                 align 10h
.text:00414C40
.text:00414C40 ; =============== S U B R O U T I N E =======================================
.text:00414C40
.text:00414C40 ; Attributes: thunk
.text:00414C40
.text:00414C40 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00414C40 GetVersionExA   proc near               ; CODE XREF: sub_412720+32↑p
.text:00414C40                                         ; sub_412720+20B↑p
.text:00414C40
.text:00414C40 lpVersionInformation= dword ptr  4
.text:00414C40
.text:00414C40                 jmp     ds:__imp_GetVersionExA
.text:00414C40 GetVersionExA   endp
.text:00414C40
.text:00414C40 ; ---------------------------------------------------------------------------
.text:00414C46                 align 10h
.text:00414C50
.text:00414C50 ; =============== S U B R O U T I N E =======================================
.text:00414C50
.text:00414C50 ; Attributes: thunk
.text:00414C50
.text:00414C50 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00414C50 UnlockFile      proc near               ; CODE XREF: sub_412980+40↑p
.text:00414C50
.text:00414C50 hFile           = dword ptr  4
.text:00414C50 dwFileOffsetLow = dword ptr  8
.text:00414C50 dwFileOffsetHigh= dword ptr  0Ch
.text:00414C50 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00414C50 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00414C50
.text:00414C50                 jmp     ds:__imp_UnlockFile
.text:00414C50 UnlockFile      endp
.text:00414C50
.text:00414C50 ; ---------------------------------------------------------------------------
.text:00414C56                 align 10h
.text:00414C60
.text:00414C60 ; =============== S U B R O U T I N E =======================================
.text:00414C60
.text:00414C60 ; Attributes: thunk
.text:00414C60
.text:00414C60 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00414C60 RegOpenKeyExA   proc near               ; CODE XREF: .text:00412291↑p
.text:00414C60
.text:00414C60 hKey            = dword ptr  4
.text:00414C60 lpSubKey        = dword ptr  8
.text:00414C60 ulOptions       = dword ptr  0Ch
.text:00414C60 samDesired      = dword ptr  10h
.text:00414C60 phkResult       = dword ptr  14h
.text:00414C60
.text:00414C60                 jmp     ds:__imp_RegOpenKeyExA
.text:00414C60 RegOpenKeyExA   endp
.text:00414C60
.text:00414C60 ; ---------------------------------------------------------------------------
.text:00414C66                 align 10h
.text:00414C70
.text:00414C70 ; =============== S U B R O U T I N E =======================================
.text:00414C70
.text:00414C70 ; Attributes: thunk
.text:00414C70
.text:00414C70 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00414C70 RegQueryValueExA proc near              ; CODE XREF: .text:004122D4↑p
.text:00414C70
.text:00414C70 hKey            = dword ptr  4
.text:00414C70 lpValueName     = dword ptr  8
.text:00414C70 lpReserved      = dword ptr  0Ch
.text:00414C70 lpType          = dword ptr  10h
.text:00414C70 lpData          = dword ptr  14h
.text:00414C70 lpcbData        = dword ptr  18h
.text:00414C70
.text:00414C70                 jmp     ds:__imp_RegQueryValueExA
.text:00414C70 RegQueryValueExA endp
.text:00414C70
.text:00414C70 ; ---------------------------------------------------------------------------
.text:00414C76                 align 10h
.text:00414C80
.text:00414C80 ; =============== S U B R O U T I N E =======================================
.text:00414C80
.text:00414C80 ; Attributes: thunk
.text:00414C80
.text:00414C80 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00414C80 RegCloseKey     proc near               ; CODE XREF: .text:004122F8↑p
.text:00414C80
.text:00414C80 hKey            = dword ptr  4
.text:00414C80
.text:00414C80                 jmp     ds:__imp_RegCloseKey
.text:00414C80 RegCloseKey     endp
.text:00414C80
.text:00414C80 ; ---------------------------------------------------------------------------
.text:00414C86                 db 2 dup(90h)
.text:00414C88                 dd 2 dup(0)
.text:00414C90                 dd 21400h, 0
.text:00414C98                 dd 0C0h, 46000000h
.text:00414CA0 ; const IID rclsid
.text:00414CA0 rclsid          dd 21401h               ; Data1
.text:00414CA0                                         ; DATA XREF: sub_40F700+4B↑o
.text:00414CA0                 dw 0                    ; Data2
.text:00414CA0                 dw 0                    ; Data3
.text:00414CA0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00414CB0                 dd 214A0h, 0
.text:00414CB8                 dd 0C0h, 46000000h, 214A1h, 0
.text:00414CC8                 dd 0C0h, 46000000h, 214D0h, 0
.text:00414CD8                 dd 0C0h, 46000000h, 214D1h, 0
.text:00414CE8                 dd 0C0h, 46000000h, 214D2h, 0
.text:00414CF8                 dd 0C0h, 46000000h, 214E1h, 0
.text:00414D08                 dd 0C0h, 46000000h, 214E2h, 0
.text:00414D18                 dd 0C0h, 46000000h, 214E3h, 0
.text:00414D28                 dd 0C0h, 46000000h, 214E4h, 0
.text:00414D38                 dd 0C0h, 46000000h, 21500h, 0
.text:00414D48                 dd 0C0h, 46000000h, 214E5h, 0
.text:00414D58                 dd 0C0h, 46000000h, 214E6h, 0
.text:00414D68                 dd 0C0h, 46000000h, 214E8h, 0
.text:00414D78                 dd 0C0h, 46000000h, 214E9h, 0
.text:00414D88                 dd 0C0h, 46000000h, 214EAh, 0
.text:00414D98                 dd 0C0h, 46000000h, 214EBh, 0
.text:00414DA8                 dd 0C0h, 46000000h
.text:00414DB0 ; const IID riid
.text:00414DB0 riid            dd 214EEh               ; Data1
.text:00414DB0                                         ; DATA XREF: sub_40F700+2B↑o
.text:00414DB0                 dw 0                    ; Data2
.text:00414DB0                 dw 0                    ; Data3
.text:00414DB0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00414DC0                 dd 214EFh, 0
.text:00414DC8                 dd 0C0h, 46000000h, 214F0h, 0
.text:00414DD8                 dd 0C0h, 46000000h, 214F1h, 0
.text:00414DE8                 dd 0C0h, 46000000h, 214F2h, 0
.text:00414DF8                 dd 0C0h, 46000000h, 214F3h, 0
.text:00414E08                 dd 0C0h, 46000000h, 214F4h, 0
.text:00414E18                 dd 0C0h, 46000000h, 214F5h, 0
.text:00414E28                 dd 0C0h, 46000000h, 214F6h, 0
.text:00414E38                 dd 0C0h, 46000000h, 214F7h, 0
.text:00414E48                 dd 0C0h, 46000000h, 214F8h, 0
.text:00414E58                 dd 0C0h, 46000000h, 214F9h, 0
.text:00414E68                 dd 0C0h, 46000000h, 214FAh, 0
.text:00414E78                 dd 0C0h, 46000000h, 214FBh, 0
.text:00414E88                 dd 0C0h, 46000000h, 214FCh, 0
.text:00414E98                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00414E98                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00414E98                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00414E98                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00414E98                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00414E98                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00414E98                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00414E98                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00414E98                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00414E98                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00414F68                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00414F78                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00414F88                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00414F98                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00414FA8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00414FA8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00414FA8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00414FA8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00414FA8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00414FA8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00414FA8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00415030 dword_415030    dd 0FFFFFFFFh           ; DATA XREF: .text:00414069↑r
.text:00415030                                         ; .text:loc_414090↑r ...
.text:00415034 dword_415034    dd 0                    ; DATA XREF: .text:loc_41409C↑r
.text:00415034                                         ; sub_4140C0:loc_41410D↑r
.text:00415038                 dd 0FFFFFFFFh
.text:0041503C dword_41503C    dd 71h dup(0)           ; DATA XREF: .data:off_4160D4↓o
.text:00415200                 dd 380h dup(?)
.text:00415200 _text           ends
.text:00415200
.data:00416000 ; Section 2. (virtual address 00016000)
.data:00416000 ; Virtual size                  : 000000F0 (    240.)
.data:00416000 ; Section size in file          : 00000200 (    512.)
.data:00416000 ; Offset to raw data for section: 00014600
.data:00416000 ; Flags C0000040: Data Readable Writable
.data:00416000 ; Alignment     : default
.data:00416000 ; ===========================================================================
.data:00416000
.data:00416000 ; Segment type: Pure data
.data:00416000 ; Segment permissions: Read/Write
.data:00416000 _data           segment para public 'DATA' use32
.data:00416000                 assume cs:_data
.data:00416000                 ;org 416000h
.data:00416000 ; char *dword_416000
.data:00416000 dword_416000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00416000                                         ; sub_401080+CC↑r
.data:00416004 ; char dword_416004[]
.data:00416004 dword_416004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00416004                                         ; sub_401080+D4↑r
.data:00416008                 align 10h
.data:00416010 dword_416010    dd 1                    ; DATA XREF: sub_403AD0+22↑r
.data:00416010                                         ; sub_403AD0+65↑r ...
.data:00416014 dword_416014    dd 100h                 ; DATA XREF: sub_403AD0+3F↑o
.data:00416014                                         ; sub_403AD0+1A2↑r ...
.data:00416018 off_416018      dd offset unk_4190F0    ; DATA XREF: sub_403AD0+1AA↑r
.data:0041601C ; void *off_41601C
.data:0041601C off_41601C      dd offset dword_416014  ; DATA XREF: sub_403AD0+39↑r
.data:0041601C                                         ; sub_403AD0+60↑w ...
.data:00416020 dword_416020    dd 0FA0h                ; DATA XREF: sub_403FC0:loc_40503B↑r
.data:00416020                                         ; sub_403FC0:loc_4051E9↑r ...
.data:00416024                 align 10h
.data:00416030 dword_416030    dd 1                    ; DATA XREF: sub_4016C0:loc_401A7A↑r
.data:00416030                                         ; sub_40B6A0+3↑r ...
.data:00416034 dword_416034    dd 1                    ; DATA XREF: sub_40B6A0+11↑r
.data:00416034                                         ; .text:0040B741↑r
.data:00416038 dword_416038    dd 3Fh                  ; DATA XREF: sub_40B6A0+7D↑w
.data:00416038                                         ; .text:0040B7AD↑w
.data:0041603C                 align 10h
.data:00416040 ; char *off_416040
.data:00416040 off_416040      dd offset aCopyrightC2005
.data:00416040                                         ; DATA XREF: sub_40BBD0+DC↑r
.data:00416040                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00416044                 align 10h
.data:00416050 ; int Code
.data:00416050 Code            dd 1                    ; DATA XREF: sub_40BF50+6D↑r
.data:00416050                                         ; sub_40BF50+9A↑r ...
.data:00416054                 align 10h
.data:00416060 dword_416060    dd 200h                 ; DATA XREF: sub_40DF00+2ED↑r
.data:00416060                                         ; sub_40DF00+2F8↑r ...
.data:00416064 ; char *off_416064
.data:00416064 off_416064      dd offset aComExeBatCmd ; DATA XREF: sub_40E3D0+3D3↑r
.data:00416064                                         ; sub_40E3D0+400↑r ...
.data:00416064                                         ; ".com;.exe;.bat;.cmd"
.data:00416068                 align 10h
.data:00416070 byte_416070     db 41h                  ; DATA XREF: sub_40FC50+6B↑w
.data:00416070                                         ; sub_40FC50:loc_40FD64↑r
.data:00416071                 align 10h
.data:00416080 off_416080      dd offset aNotset       ; DATA XREF: .text:0041108A↑r
.data:00416080                                         ; .text:00411CD2↑r
.data:00416080                                         ; "notset"
.data:00416084 off_416084      dd offset aNotset       ; DATA XREF: .text:004110A2↑r
.data:00416084                                         ; .text:004110C4↑r ...
.data:00416084                                         ; "notset"
.data:00416088                 align 10h
.data:00416090 dword_416090    dd 1                    ; DATA XREF: .text:loc_412147↑r
.data:00416090                                         ; sub_412720+202↑w
.data:00416094                 align 10h
.data:004160A0 dword_4160A0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004160A4                 align 10h
.data:004160B0 ; int Mode
.data:004160B0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004160B0                                         ; sub_401080+80↑r ...
.data:004160B4                 align 10h
.data:004160C0 dword_4160C0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004160C0                                         ; sub_401080+BA↑r
.data:004160C4                 align 10h
.data:004160D0 dword_4160D0    dd 0                    ; DATA XREF: sub_4140C0+9↑r
.data:004160D0                                         ; sub_4140C0+1D↑w
.data:004160D4 off_4160D4      dd offset dword_41503C  ; DATA XREF: sub_414030+6↑r
.data:004160D4                                         ; sub_414030+17↑r ...
.data:004160D8                 align 1000h
.data:004160D8 _data           ends
.data:004160D8
.bss:00417000 ; Section 3. (virtual address 00017000)
.bss:00417000 ; Virtual size                  : 00002770 (  10096.)
.bss:00417000 ; Section size in file          : 00000000 (      0.)
.bss:00417000 ; Offset to raw data for section: 00000000
.bss:00417000 ; Flags C0000080: Bss Readable Writable
.bss:00417000 ; Alignment     : default
.bss:00417000 ; ===========================================================================
.bss:00417000
.bss:00417000 ; Segment type: Uninitialized
.bss:00417000 ; Segment permissions: Read/Write
.bss:00417000 _bss            segment para public 'BSS' use32
.bss:00417000                 assume cs:_bss
.bss:00417000                 ;org 417000h
.bss:00417000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00417000 byte_417000     db ?                    ; DATA XREF: sub_4016C0+434↑r
.bss:00417000                                         ; sub_401CF0+20↑w ...
.bss:00417001                 align 10h
.bss:00417010 unk_417010      db    ? ;               ; DATA XREF: sub_4016C0+411↑o
.bss:00417010                                         ; sub_401F00+218↑o ...
.bss:00417011                 db    ? ;
.bss:00417012                 db    ? ;
.bss:00417013                 db    ? ;
.bss:00417014                 db    ? ;
.bss:00417015                 db    ? ;
.bss:00417016                 db    ? ;
.bss:00417017                 db    ? ;
.bss:00417018                 db    ? ;
.bss:00417019                 db    ? ;
.bss:0041701A                 db    ? ;
.bss:0041701B                 db    ? ;
.bss:0041701C                 db    ? ;
.bss:0041701D                 db    ? ;
.bss:0041701E                 db    ? ;
.bss:0041701F                 db    ? ;
.bss:00417020                 db    ? ;
.bss:00417021                 db    ? ;
.bss:00417022                 db    ? ;
.bss:00417023                 db    ? ;
.bss:00417024                 db    ? ;
.bss:00417025                 db    ? ;
.bss:00417026                 db    ? ;
.bss:00417027                 db    ? ;
.bss:00417028                 db    ? ;
.bss:00417029                 db    ? ;
.bss:0041702A                 db    ? ;
.bss:0041702B                 db    ? ;
.bss:0041702C                 db    ? ;
.bss:0041702D                 db    ? ;
.bss:0041702E                 db    ? ;
.bss:0041702F                 db    ? ;
.bss:00417030                 db    ? ;
.bss:00417031                 db    ? ;
.bss:00417032                 db    ? ;
.bss:00417033                 db    ? ;
.bss:00417034                 db    ? ;
.bss:00417035                 db    ? ;
.bss:00417036                 db    ? ;
.bss:00417037                 db    ? ;
.bss:00417038                 db    ? ;
.bss:00417039                 db    ? ;
.bss:0041703A                 db    ? ;
.bss:0041703B                 db    ? ;
.bss:0041703C                 db    ? ;
.bss:0041703D                 db    ? ;
.bss:0041703E                 db    ? ;
.bss:0041703F                 db    ? ;
.bss:00417040                 db    ? ;
.bss:00417041                 db    ? ;
.bss:00417042                 db    ? ;
.bss:00417043                 db    ? ;
.bss:00417044                 db    ? ;
.bss:00417045                 db    ? ;
.bss:00417046                 db    ? ;
.bss:00417047                 db    ? ;
.bss:00417048                 db    ? ;
.bss:00417049                 db    ? ;
.bss:0041704A                 db    ? ;
.bss:0041704B                 db    ? ;
.bss:0041704C                 db    ? ;
.bss:0041704D                 db    ? ;
.bss:0041704E                 db    ? ;
.bss:0041704F                 db    ? ;
.bss:00417050                 db    ? ;
.bss:00417051                 db    ? ;
.bss:00417052                 db    ? ;
.bss:00417053                 db    ? ;
.bss:00417054                 db    ? ;
.bss:00417055                 db    ? ;
.bss:00417056                 db    ? ;
.bss:00417057                 db    ? ;
.bss:00417058                 db    ? ;
.bss:00417059                 db    ? ;
.bss:0041705A                 db    ? ;
.bss:0041705B                 db    ? ;
.bss:0041705C                 db    ? ;
.bss:0041705D                 db    ? ;
.bss:0041705E                 db    ? ;
.bss:0041705F                 db    ? ;
.bss:00417060                 db    ? ;
.bss:00417061                 db    ? ;
.bss:00417062                 db    ? ;
.bss:00417063                 db    ? ;
.bss:00417064                 db    ? ;
.bss:00417065                 db    ? ;
.bss:00417066                 db    ? ;
.bss:00417067                 db    ? ;
.bss:00417068                 db    ? ;
.bss:00417069                 db    ? ;
.bss:0041706A                 db    ? ;
.bss:0041706B                 db    ? ;
.bss:0041706C                 db    ? ;
.bss:0041706D                 db    ? ;
.bss:0041706E                 db    ? ;
.bss:0041706F                 db    ? ;
.bss:00417070                 db    ? ;
.bss:00417071                 db    ? ;
.bss:00417072                 db    ? ;
.bss:00417073                 db    ? ;
.bss:00417074                 db    ? ;
.bss:00417075                 db    ? ;
.bss:00417076                 db    ? ;
.bss:00417077                 db    ? ;
.bss:00417078                 db    ? ;
.bss:00417079                 db    ? ;
.bss:0041707A                 db    ? ;
.bss:0041707B                 db    ? ;
.bss:0041707C                 db    ? ;
.bss:0041707D                 db    ? ;
.bss:0041707E                 db    ? ;
.bss:0041707F                 db    ? ;
.bss:00417080                 db    ? ;
.bss:00417081                 db    ? ;
.bss:00417082                 db    ? ;
.bss:00417083                 db    ? ;
.bss:00417084                 db    ? ;
.bss:00417085                 db    ? ;
.bss:00417086                 db    ? ;
.bss:00417087                 db    ? ;
.bss:00417088                 db    ? ;
.bss:00417089                 db    ? ;
.bss:0041708A                 db    ? ;
.bss:0041708B                 db    ? ;
.bss:0041708C                 db    ? ;
.bss:0041708D                 db    ? ;
.bss:0041708E                 db    ? ;
.bss:0041708F                 db    ? ;
.bss:00417090                 db    ? ;
.bss:00417091                 db    ? ;
.bss:00417092                 db    ? ;
.bss:00417093                 db    ? ;
.bss:00417094                 db    ? ;
.bss:00417095                 db    ? ;
.bss:00417096                 db    ? ;
.bss:00417097                 db    ? ;
.bss:00417098                 db    ? ;
.bss:00417099                 db    ? ;
.bss:0041709A                 db    ? ;
.bss:0041709B                 db    ? ;
.bss:0041709C                 db    ? ;
.bss:0041709D                 db    ? ;
.bss:0041709E                 db    ? ;
.bss:0041709F                 db    ? ;
.bss:004170A0                 db    ? ;
.bss:004170A1                 db    ? ;
.bss:004170A2                 db    ? ;
.bss:004170A3                 db    ? ;
.bss:004170A4                 db    ? ;
.bss:004170A5                 db    ? ;
.bss:004170A6                 db    ? ;
.bss:004170A7                 db    ? ;
.bss:004170A8                 db    ? ;
.bss:004170A9                 db    ? ;
.bss:004170AA                 db    ? ;
.bss:004170AB                 db    ? ;
.bss:004170AC                 db    ? ;
.bss:004170AD                 db    ? ;
.bss:004170AE                 db    ? ;
.bss:004170AF                 db    ? ;
.bss:004170B0                 db    ? ;
.bss:004170B1                 db    ? ;
.bss:004170B2                 db    ? ;
.bss:004170B3                 db    ? ;
.bss:004170B4                 db    ? ;
.bss:004170B5                 db    ? ;
.bss:004170B6                 db    ? ;
.bss:004170B7                 db    ? ;
.bss:004170B8                 db    ? ;
.bss:004170B9                 db    ? ;
.bss:004170BA                 db    ? ;
.bss:004170BB                 db    ? ;
.bss:004170BC                 db    ? ;
.bss:004170BD                 db    ? ;
.bss:004170BE                 db    ? ;
.bss:004170BF                 db    ? ;
.bss:004170C0                 db    ? ;
.bss:004170C1                 db    ? ;
.bss:004170C2                 db    ? ;
.bss:004170C3                 db    ? ;
.bss:004170C4                 db    ? ;
.bss:004170C5                 db    ? ;
.bss:004170C6                 db    ? ;
.bss:004170C7                 db    ? ;
.bss:004170C8                 db    ? ;
.bss:004170C9                 db    ? ;
.bss:004170CA                 db    ? ;
.bss:004170CB                 db    ? ;
.bss:004170CC                 db    ? ;
.bss:004170CD                 db    ? ;
.bss:004170CE                 db    ? ;
.bss:004170CF                 db    ? ;
.bss:004170D0                 db    ? ;
.bss:004170D1                 db    ? ;
.bss:004170D2                 db    ? ;
.bss:004170D3                 db    ? ;
.bss:004170D4                 db    ? ;
.bss:004170D5                 db    ? ;
.bss:004170D6                 db    ? ;
.bss:004170D7                 db    ? ;
.bss:004170D8                 db    ? ;
.bss:004170D9                 db    ? ;
.bss:004170DA                 db    ? ;
.bss:004170DB                 db    ? ;
.bss:004170DC                 db    ? ;
.bss:004170DD                 db    ? ;
.bss:004170DE                 db    ? ;
.bss:004170DF                 db    ? ;
.bss:004170E0                 db    ? ;
.bss:004170E1                 db    ? ;
.bss:004170E2                 db    ? ;
.bss:004170E3                 db    ? ;
.bss:004170E4                 db    ? ;
.bss:004170E5                 db    ? ;
.bss:004170E6                 db    ? ;
.bss:004170E7                 db    ? ;
.bss:004170E8                 db    ? ;
.bss:004170E9                 db    ? ;
.bss:004170EA                 db    ? ;
.bss:004170EB                 db    ? ;
.bss:004170EC                 db    ? ;
.bss:004170ED                 db    ? ;
.bss:004170EE                 db    ? ;
.bss:004170EF                 db    ? ;
.bss:004170F0                 db    ? ;
.bss:004170F1                 db    ? ;
.bss:004170F2                 db    ? ;
.bss:004170F3                 db    ? ;
.bss:004170F4                 db    ? ;
.bss:004170F5                 db    ? ;
.bss:004170F6                 db    ? ;
.bss:004170F7                 db    ? ;
.bss:004170F8                 db    ? ;
.bss:004170F9                 db    ? ;
.bss:004170FA                 db    ? ;
.bss:004170FB                 db    ? ;
.bss:004170FC                 db    ? ;
.bss:004170FD                 db    ? ;
.bss:004170FE                 db    ? ;
.bss:004170FF                 db    ? ;
.bss:00417100                 db    ? ;
.bss:00417101                 db    ? ;
.bss:00417102                 db    ? ;
.bss:00417103                 db    ? ;
.bss:00417104                 db    ? ;
.bss:00417105                 db    ? ;
.bss:00417106                 db    ? ;
.bss:00417107                 db    ? ;
.bss:00417108                 db    ? ;
.bss:00417109                 db    ? ;
.bss:0041710A                 db    ? ;
.bss:0041710B                 db    ? ;
.bss:0041710C                 db    ? ;
.bss:0041710D                 db    ? ;
.bss:0041710E                 db    ? ;
.bss:0041710F                 db    ? ;
.bss:00417110                 db    ? ;
.bss:00417111                 db    ? ;
.bss:00417112                 db    ? ;
.bss:00417113                 db    ? ;
.bss:00417114                 db    ? ;
.bss:00417115                 db    ? ;
.bss:00417116                 db    ? ;
.bss:00417117                 db    ? ;
.bss:00417118                 db    ? ;
.bss:00417119                 db    ? ;
.bss:0041711A                 db    ? ;
.bss:0041711B                 db    ? ;
.bss:0041711C                 db    ? ;
.bss:0041711D                 db    ? ;
.bss:0041711E                 db    ? ;
.bss:0041711F                 db    ? ;
.bss:00417120                 db    ? ;
.bss:00417121                 db    ? ;
.bss:00417122                 db    ? ;
.bss:00417123                 db    ? ;
.bss:00417124                 db    ? ;
.bss:00417125                 db    ? ;
.bss:00417126                 db    ? ;
.bss:00417127                 db    ? ;
.bss:00417128                 db    ? ;
.bss:00417129                 db    ? ;
.bss:0041712A                 db    ? ;
.bss:0041712B                 db    ? ;
.bss:0041712C                 db    ? ;
.bss:0041712D                 db    ? ;
.bss:0041712E                 db    ? ;
.bss:0041712F                 db    ? ;
.bss:00417130                 db    ? ;
.bss:00417131                 db    ? ;
.bss:00417132                 db    ? ;
.bss:00417133                 db    ? ;
.bss:00417134                 db    ? ;
.bss:00417135                 db    ? ;
.bss:00417136                 db    ? ;
.bss:00417137                 db    ? ;
.bss:00417138                 db    ? ;
.bss:00417139                 db    ? ;
.bss:0041713A                 db    ? ;
.bss:0041713B                 db    ? ;
.bss:0041713C                 db    ? ;
.bss:0041713D                 db    ? ;
.bss:0041713E                 db    ? ;
.bss:0041713F                 db    ? ;
.bss:00417140                 db    ? ;
.bss:00417141                 db    ? ;
.bss:00417142                 db    ? ;
.bss:00417143                 db    ? ;
.bss:00417144                 db    ? ;
.bss:00417145                 db    ? ;
.bss:00417146                 db    ? ;
.bss:00417147                 db    ? ;
.bss:00417148                 db    ? ;
.bss:00417149                 db    ? ;
.bss:0041714A                 db    ? ;
.bss:0041714B                 db    ? ;
.bss:0041714C                 db    ? ;
.bss:0041714D                 db    ? ;
.bss:0041714E                 db    ? ;
.bss:0041714F                 db    ? ;
.bss:00417150                 db    ? ;
.bss:00417151                 db    ? ;
.bss:00417152                 db    ? ;
.bss:00417153                 db    ? ;
.bss:00417154                 db    ? ;
.bss:00417155                 db    ? ;
.bss:00417156                 db    ? ;
.bss:00417157                 db    ? ;
.bss:00417158                 db    ? ;
.bss:00417159                 db    ? ;
.bss:0041715A                 db    ? ;
.bss:0041715B                 db    ? ;
.bss:0041715C                 db    ? ;
.bss:0041715D                 db    ? ;
.bss:0041715E                 db    ? ;
.bss:0041715F                 db    ? ;
.bss:00417160                 db    ? ;
.bss:00417161                 db    ? ;
.bss:00417162                 db    ? ;
.bss:00417163                 db    ? ;
.bss:00417164                 db    ? ;
.bss:00417165                 db    ? ;
.bss:00417166                 db    ? ;
.bss:00417167                 db    ? ;
.bss:00417168                 db    ? ;
.bss:00417169                 db    ? ;
.bss:0041716A                 db    ? ;
.bss:0041716B                 db    ? ;
.bss:0041716C                 db    ? ;
.bss:0041716D                 db    ? ;
.bss:0041716E                 db    ? ;
.bss:0041716F                 db    ? ;
.bss:00417170                 db    ? ;
.bss:00417171                 db    ? ;
.bss:00417172                 db    ? ;
.bss:00417173                 db    ? ;
.bss:00417174                 db    ? ;
.bss:00417175                 db    ? ;
.bss:00417176                 db    ? ;
.bss:00417177                 db    ? ;
.bss:00417178                 db    ? ;
.bss:00417179                 db    ? ;
.bss:0041717A                 db    ? ;
.bss:0041717B                 db    ? ;
.bss:0041717C                 db    ? ;
.bss:0041717D                 db    ? ;
.bss:0041717E                 db    ? ;
.bss:0041717F                 db    ? ;
.bss:00417180                 db    ? ;
.bss:00417181                 db    ? ;
.bss:00417182                 db    ? ;
.bss:00417183                 db    ? ;
.bss:00417184                 db    ? ;
.bss:00417185                 db    ? ;
.bss:00417186                 db    ? ;
.bss:00417187                 db    ? ;
.bss:00417188                 db    ? ;
.bss:00417189                 db    ? ;
.bss:0041718A                 db    ? ;
.bss:0041718B                 db    ? ;
.bss:0041718C                 db    ? ;
.bss:0041718D                 db    ? ;
.bss:0041718E                 db    ? ;
.bss:0041718F                 db    ? ;
.bss:00417190                 db    ? ;
.bss:00417191                 db    ? ;
.bss:00417192                 db    ? ;
.bss:00417193                 db    ? ;
.bss:00417194                 db    ? ;
.bss:00417195                 db    ? ;
.bss:00417196                 db    ? ;
.bss:00417197                 db    ? ;
.bss:00417198                 db    ? ;
.bss:00417199                 db    ? ;
.bss:0041719A                 db    ? ;
.bss:0041719B                 db    ? ;
.bss:0041719C                 db    ? ;
.bss:0041719D                 db    ? ;
.bss:0041719E                 db    ? ;
.bss:0041719F                 db    ? ;
.bss:004171A0                 db    ? ;
.bss:004171A1                 db    ? ;
.bss:004171A2                 db    ? ;
.bss:004171A3                 db    ? ;
.bss:004171A4                 db    ? ;
.bss:004171A5                 db    ? ;
.bss:004171A6                 db    ? ;
.bss:004171A7                 db    ? ;
.bss:004171A8                 db    ? ;
.bss:004171A9                 db    ? ;
.bss:004171AA                 db    ? ;
.bss:004171AB                 db    ? ;
.bss:004171AC                 db    ? ;
.bss:004171AD                 db    ? ;
.bss:004171AE                 db    ? ;
.bss:004171AF                 db    ? ;
.bss:004171B0                 db    ? ;
.bss:004171B1                 db    ? ;
.bss:004171B2                 db    ? ;
.bss:004171B3                 db    ? ;
.bss:004171B4                 db    ? ;
.bss:004171B5                 db    ? ;
.bss:004171B6                 db    ? ;
.bss:004171B7                 db    ? ;
.bss:004171B8                 db    ? ;
.bss:004171B9                 db    ? ;
.bss:004171BA                 db    ? ;
.bss:004171BB                 db    ? ;
.bss:004171BC                 db    ? ;
.bss:004171BD                 db    ? ;
.bss:004171BE                 db    ? ;
.bss:004171BF                 db    ? ;
.bss:004171C0                 db    ? ;
.bss:004171C1                 db    ? ;
.bss:004171C2                 db    ? ;
.bss:004171C3                 db    ? ;
.bss:004171C4                 db    ? ;
.bss:004171C5                 db    ? ;
.bss:004171C6                 db    ? ;
.bss:004171C7                 db    ? ;
.bss:004171C8                 db    ? ;
.bss:004171C9                 db    ? ;
.bss:004171CA                 db    ? ;
.bss:004171CB                 db    ? ;
.bss:004171CC                 db    ? ;
.bss:004171CD                 db    ? ;
.bss:004171CE                 db    ? ;
.bss:004171CF                 db    ? ;
.bss:004171D0                 db    ? ;
.bss:004171D1                 db    ? ;
.bss:004171D2                 db    ? ;
.bss:004171D3                 db    ? ;
.bss:004171D4                 db    ? ;
.bss:004171D5                 db    ? ;
.bss:004171D6                 db    ? ;
.bss:004171D7                 db    ? ;
.bss:004171D8                 db    ? ;
.bss:004171D9                 db    ? ;
.bss:004171DA                 db    ? ;
.bss:004171DB                 db    ? ;
.bss:004171DC                 db    ? ;
.bss:004171DD                 db    ? ;
.bss:004171DE                 db    ? ;
.bss:004171DF                 db    ? ;
.bss:004171E0                 db    ? ;
.bss:004171E1                 db    ? ;
.bss:004171E2                 db    ? ;
.bss:004171E3                 db    ? ;
.bss:004171E4                 db    ? ;
.bss:004171E5                 db    ? ;
.bss:004171E6                 db    ? ;
.bss:004171E7                 db    ? ;
.bss:004171E8                 db    ? ;
.bss:004171E9                 db    ? ;
.bss:004171EA                 db    ? ;
.bss:004171EB                 db    ? ;
.bss:004171EC                 db    ? ;
.bss:004171ED                 db    ? ;
.bss:004171EE                 db    ? ;
.bss:004171EF                 db    ? ;
.bss:004171F0                 db    ? ;
.bss:004171F1                 db    ? ;
.bss:004171F2                 db    ? ;
.bss:004171F3                 db    ? ;
.bss:004171F4                 db    ? ;
.bss:004171F5                 db    ? ;
.bss:004171F6                 db    ? ;
.bss:004171F7                 db    ? ;
.bss:004171F8                 db    ? ;
.bss:004171F9                 db    ? ;
.bss:004171FA                 db    ? ;
.bss:004171FB                 db    ? ;
.bss:004171FC                 db    ? ;
.bss:004171FD                 db    ? ;
.bss:004171FE                 db    ? ;
.bss:004171FF                 db    ? ;
.bss:00417200                 db    ? ;
.bss:00417201                 db    ? ;
.bss:00417202                 db    ? ;
.bss:00417203                 db    ? ;
.bss:00417204                 db    ? ;
.bss:00417205                 db    ? ;
.bss:00417206                 db    ? ;
.bss:00417207                 db    ? ;
.bss:00417208                 db    ? ;
.bss:00417209                 db    ? ;
.bss:0041720A                 db    ? ;
.bss:0041720B                 db    ? ;
.bss:0041720C                 db    ? ;
.bss:0041720D                 db    ? ;
.bss:0041720E                 db    ? ;
.bss:0041720F                 db    ? ;
.bss:00417210                 db    ? ;
.bss:00417211                 db    ? ;
.bss:00417212                 db    ? ;
.bss:00417213                 db    ? ;
.bss:00417214                 db    ? ;
.bss:00417215                 db    ? ;
.bss:00417216                 db    ? ;
.bss:00417217                 db    ? ;
.bss:00417218                 db    ? ;
.bss:00417219                 db    ? ;
.bss:0041721A                 db    ? ;
.bss:0041721B                 db    ? ;
.bss:0041721C                 db    ? ;
.bss:0041721D                 db    ? ;
.bss:0041721E                 db    ? ;
.bss:0041721F                 db    ? ;
.bss:00417220                 db    ? ;
.bss:00417221                 db    ? ;
.bss:00417222                 db    ? ;
.bss:00417223                 db    ? ;
.bss:00417224                 db    ? ;
.bss:00417225                 db    ? ;
.bss:00417226                 db    ? ;
.bss:00417227                 db    ? ;
.bss:00417228                 db    ? ;
.bss:00417229                 db    ? ;
.bss:0041722A                 db    ? ;
.bss:0041722B                 db    ? ;
.bss:0041722C                 db    ? ;
.bss:0041722D                 db    ? ;
.bss:0041722E                 db    ? ;
.bss:0041722F                 db    ? ;
.bss:00417230                 db    ? ;
.bss:00417231                 db    ? ;
.bss:00417232                 db    ? ;
.bss:00417233                 db    ? ;
.bss:00417234                 db    ? ;
.bss:00417235                 db    ? ;
.bss:00417236                 db    ? ;
.bss:00417237                 db    ? ;
.bss:00417238                 db    ? ;
.bss:00417239                 db    ? ;
.bss:0041723A                 db    ? ;
.bss:0041723B                 db    ? ;
.bss:0041723C                 db    ? ;
.bss:0041723D                 db    ? ;
.bss:0041723E                 db    ? ;
.bss:0041723F                 db    ? ;
.bss:00417240                 db    ? ;
.bss:00417241                 db    ? ;
.bss:00417242                 db    ? ;
.bss:00417243                 db    ? ;
.bss:00417244                 db    ? ;
.bss:00417245                 db    ? ;
.bss:00417246                 db    ? ;
.bss:00417247                 db    ? ;
.bss:00417248                 db    ? ;
.bss:00417249                 db    ? ;
.bss:0041724A                 db    ? ;
.bss:0041724B                 db    ? ;
.bss:0041724C                 db    ? ;
.bss:0041724D                 db    ? ;
.bss:0041724E                 db    ? ;
.bss:0041724F                 db    ? ;
.bss:00417250                 db    ? ;
.bss:00417251                 db    ? ;
.bss:00417252                 db    ? ;
.bss:00417253                 db    ? ;
.bss:00417254                 db    ? ;
.bss:00417255                 db    ? ;
.bss:00417256                 db    ? ;
.bss:00417257                 db    ? ;
.bss:00417258                 db    ? ;
.bss:00417259                 db    ? ;
.bss:0041725A                 db    ? ;
.bss:0041725B                 db    ? ;
.bss:0041725C                 db    ? ;
.bss:0041725D                 db    ? ;
.bss:0041725E                 db    ? ;
.bss:0041725F                 db    ? ;
.bss:00417260                 db    ? ;
.bss:00417261                 db    ? ;
.bss:00417262                 db    ? ;
.bss:00417263                 db    ? ;
.bss:00417264                 db    ? ;
.bss:00417265                 db    ? ;
.bss:00417266                 db    ? ;
.bss:00417267                 db    ? ;
.bss:00417268                 db    ? ;
.bss:00417269                 db    ? ;
.bss:0041726A                 db    ? ;
.bss:0041726B                 db    ? ;
.bss:0041726C                 db    ? ;
.bss:0041726D                 db    ? ;
.bss:0041726E                 db    ? ;
.bss:0041726F                 db    ? ;
.bss:00417270                 db    ? ;
.bss:00417271                 db    ? ;
.bss:00417272                 db    ? ;
.bss:00417273                 db    ? ;
.bss:00417274                 db    ? ;
.bss:00417275                 db    ? ;
.bss:00417276                 db    ? ;
.bss:00417277                 db    ? ;
.bss:00417278                 db    ? ;
.bss:00417279                 db    ? ;
.bss:0041727A                 db    ? ;
.bss:0041727B                 db    ? ;
.bss:0041727C                 db    ? ;
.bss:0041727D                 db    ? ;
.bss:0041727E                 db    ? ;
.bss:0041727F                 db    ? ;
.bss:00417280                 db    ? ;
.bss:00417281                 db    ? ;
.bss:00417282                 db    ? ;
.bss:00417283                 db    ? ;
.bss:00417284                 db    ? ;
.bss:00417285                 db    ? ;
.bss:00417286                 db    ? ;
.bss:00417287                 db    ? ;
.bss:00417288                 db    ? ;
.bss:00417289                 db    ? ;
.bss:0041728A                 db    ? ;
.bss:0041728B                 db    ? ;
.bss:0041728C                 db    ? ;
.bss:0041728D                 db    ? ;
.bss:0041728E                 db    ? ;
.bss:0041728F                 db    ? ;
.bss:00417290                 db    ? ;
.bss:00417291                 db    ? ;
.bss:00417292                 db    ? ;
.bss:00417293                 db    ? ;
.bss:00417294                 db    ? ;
.bss:00417295                 db    ? ;
.bss:00417296                 db    ? ;
.bss:00417297                 db    ? ;
.bss:00417298                 db    ? ;
.bss:00417299                 db    ? ;
.bss:0041729A                 db    ? ;
.bss:0041729B                 db    ? ;
.bss:0041729C                 db    ? ;
.bss:0041729D                 db    ? ;
.bss:0041729E                 db    ? ;
.bss:0041729F                 db    ? ;
.bss:004172A0                 db    ? ;
.bss:004172A1                 db    ? ;
.bss:004172A2                 db    ? ;
.bss:004172A3                 db    ? ;
.bss:004172A4                 db    ? ;
.bss:004172A5                 db    ? ;
.bss:004172A6                 db    ? ;
.bss:004172A7                 db    ? ;
.bss:004172A8                 db    ? ;
.bss:004172A9                 db    ? ;
.bss:004172AA                 db    ? ;
.bss:004172AB                 db    ? ;
.bss:004172AC                 db    ? ;
.bss:004172AD                 db    ? ;
.bss:004172AE                 db    ? ;
.bss:004172AF                 db    ? ;
.bss:004172B0                 db    ? ;
.bss:004172B1                 db    ? ;
.bss:004172B2                 db    ? ;
.bss:004172B3                 db    ? ;
.bss:004172B4                 db    ? ;
.bss:004172B5                 db    ? ;
.bss:004172B6                 db    ? ;
.bss:004172B7                 db    ? ;
.bss:004172B8                 db    ? ;
.bss:004172B9                 db    ? ;
.bss:004172BA                 db    ? ;
.bss:004172BB                 db    ? ;
.bss:004172BC                 db    ? ;
.bss:004172BD                 db    ? ;
.bss:004172BE                 db    ? ;
.bss:004172BF                 db    ? ;
.bss:004172C0                 db    ? ;
.bss:004172C1                 db    ? ;
.bss:004172C2                 db    ? ;
.bss:004172C3                 db    ? ;
.bss:004172C4                 db    ? ;
.bss:004172C5                 db    ? ;
.bss:004172C6                 db    ? ;
.bss:004172C7                 db    ? ;
.bss:004172C8                 db    ? ;
.bss:004172C9                 db    ? ;
.bss:004172CA                 db    ? ;
.bss:004172CB                 db    ? ;
.bss:004172CC                 db    ? ;
.bss:004172CD                 db    ? ;
.bss:004172CE                 db    ? ;
.bss:004172CF                 db    ? ;
.bss:004172D0                 db    ? ;
.bss:004172D1                 db    ? ;
.bss:004172D2                 db    ? ;
.bss:004172D3                 db    ? ;
.bss:004172D4                 db    ? ;
.bss:004172D5                 db    ? ;
.bss:004172D6                 db    ? ;
.bss:004172D7                 db    ? ;
.bss:004172D8                 db    ? ;
.bss:004172D9                 db    ? ;
.bss:004172DA                 db    ? ;
.bss:004172DB                 db    ? ;
.bss:004172DC                 db    ? ;
.bss:004172DD                 db    ? ;
.bss:004172DE                 db    ? ;
.bss:004172DF                 db    ? ;
.bss:004172E0                 db    ? ;
.bss:004172E1                 db    ? ;
.bss:004172E2                 db    ? ;
.bss:004172E3                 db    ? ;
.bss:004172E4                 db    ? ;
.bss:004172E5                 db    ? ;
.bss:004172E6                 db    ? ;
.bss:004172E7                 db    ? ;
.bss:004172E8                 db    ? ;
.bss:004172E9                 db    ? ;
.bss:004172EA                 db    ? ;
.bss:004172EB                 db    ? ;
.bss:004172EC                 db    ? ;
.bss:004172ED                 db    ? ;
.bss:004172EE                 db    ? ;
.bss:004172EF                 db    ? ;
.bss:004172F0                 db    ? ;
.bss:004172F1                 db    ? ;
.bss:004172F2                 db    ? ;
.bss:004172F3                 db    ? ;
.bss:004172F4                 db    ? ;
.bss:004172F5                 db    ? ;
.bss:004172F6                 db    ? ;
.bss:004172F7                 db    ? ;
.bss:004172F8                 db    ? ;
.bss:004172F9                 db    ? ;
.bss:004172FA                 db    ? ;
.bss:004172FB                 db    ? ;
.bss:004172FC                 db    ? ;
.bss:004172FD                 db    ? ;
.bss:004172FE                 db    ? ;
.bss:004172FF                 db    ? ;
.bss:00417300                 db    ? ;
.bss:00417301                 db    ? ;
.bss:00417302                 db    ? ;
.bss:00417303                 db    ? ;
.bss:00417304                 db    ? ;
.bss:00417305                 db    ? ;
.bss:00417306                 db    ? ;
.bss:00417307                 db    ? ;
.bss:00417308                 db    ? ;
.bss:00417309                 db    ? ;
.bss:0041730A                 db    ? ;
.bss:0041730B                 db    ? ;
.bss:0041730C                 db    ? ;
.bss:0041730D                 db    ? ;
.bss:0041730E                 db    ? ;
.bss:0041730F                 db    ? ;
.bss:00417310                 db    ? ;
.bss:00417311                 db    ? ;
.bss:00417312                 db    ? ;
.bss:00417313                 db    ? ;
.bss:00417314                 db    ? ;
.bss:00417315                 db    ? ;
.bss:00417316                 db    ? ;
.bss:00417317                 db    ? ;
.bss:00417318                 db    ? ;
.bss:00417319                 db    ? ;
.bss:0041731A                 db    ? ;
.bss:0041731B                 db    ? ;
.bss:0041731C                 db    ? ;
.bss:0041731D                 db    ? ;
.bss:0041731E                 db    ? ;
.bss:0041731F                 db    ? ;
.bss:00417320                 db    ? ;
.bss:00417321                 db    ? ;
.bss:00417322                 db    ? ;
.bss:00417323                 db    ? ;
.bss:00417324                 db    ? ;
.bss:00417325                 db    ? ;
.bss:00417326                 db    ? ;
.bss:00417327                 db    ? ;
.bss:00417328                 db    ? ;
.bss:00417329                 db    ? ;
.bss:0041732A                 db    ? ;
.bss:0041732B                 db    ? ;
.bss:0041732C                 db    ? ;
.bss:0041732D                 db    ? ;
.bss:0041732E                 db    ? ;
.bss:0041732F                 db    ? ;
.bss:00417330                 db    ? ;
.bss:00417331                 db    ? ;
.bss:00417332                 db    ? ;
.bss:00417333                 db    ? ;
.bss:00417334                 db    ? ;
.bss:00417335                 db    ? ;
.bss:00417336                 db    ? ;
.bss:00417337                 db    ? ;
.bss:00417338                 db    ? ;
.bss:00417339                 db    ? ;
.bss:0041733A                 db    ? ;
.bss:0041733B                 db    ? ;
.bss:0041733C                 db    ? ;
.bss:0041733D                 db    ? ;
.bss:0041733E                 db    ? ;
.bss:0041733F                 db    ? ;
.bss:00417340                 db    ? ;
.bss:00417341                 db    ? ;
.bss:00417342                 db    ? ;
.bss:00417343                 db    ? ;
.bss:00417344                 db    ? ;
.bss:00417345                 db    ? ;
.bss:00417346                 db    ? ;
.bss:00417347                 db    ? ;
.bss:00417348                 db    ? ;
.bss:00417349                 db    ? ;
.bss:0041734A                 db    ? ;
.bss:0041734B                 db    ? ;
.bss:0041734C                 db    ? ;
.bss:0041734D                 db    ? ;
.bss:0041734E                 db    ? ;
.bss:0041734F                 db    ? ;
.bss:00417350                 db    ? ;
.bss:00417351                 db    ? ;
.bss:00417352                 db    ? ;
.bss:00417353                 db    ? ;
.bss:00417354                 db    ? ;
.bss:00417355                 db    ? ;
.bss:00417356                 db    ? ;
.bss:00417357                 db    ? ;
.bss:00417358                 db    ? ;
.bss:00417359                 db    ? ;
.bss:0041735A                 db    ? ;
.bss:0041735B                 db    ? ;
.bss:0041735C                 db    ? ;
.bss:0041735D                 db    ? ;
.bss:0041735E                 db    ? ;
.bss:0041735F                 db    ? ;
.bss:00417360                 db    ? ;
.bss:00417361                 db    ? ;
.bss:00417362                 db    ? ;
.bss:00417363                 db    ? ;
.bss:00417364                 db    ? ;
.bss:00417365                 db    ? ;
.bss:00417366                 db    ? ;
.bss:00417367                 db    ? ;
.bss:00417368                 db    ? ;
.bss:00417369                 db    ? ;
.bss:0041736A                 db    ? ;
.bss:0041736B                 db    ? ;
.bss:0041736C                 db    ? ;
.bss:0041736D                 db    ? ;
.bss:0041736E                 db    ? ;
.bss:0041736F                 db    ? ;
.bss:00417370                 db    ? ;
.bss:00417371                 db    ? ;
.bss:00417372                 db    ? ;
.bss:00417373                 db    ? ;
.bss:00417374                 db    ? ;
.bss:00417375                 db    ? ;
.bss:00417376                 db    ? ;
.bss:00417377                 db    ? ;
.bss:00417378                 db    ? ;
.bss:00417379                 db    ? ;
.bss:0041737A                 db    ? ;
.bss:0041737B                 db    ? ;
.bss:0041737C                 db    ? ;
.bss:0041737D                 db    ? ;
.bss:0041737E                 db    ? ;
.bss:0041737F                 db    ? ;
.bss:00417380                 db    ? ;
.bss:00417381                 db    ? ;
.bss:00417382                 db    ? ;
.bss:00417383                 db    ? ;
.bss:00417384                 db    ? ;
.bss:00417385                 db    ? ;
.bss:00417386                 db    ? ;
.bss:00417387                 db    ? ;
.bss:00417388                 db    ? ;
.bss:00417389                 db    ? ;
.bss:0041738A                 db    ? ;
.bss:0041738B                 db    ? ;
.bss:0041738C                 db    ? ;
.bss:0041738D                 db    ? ;
.bss:0041738E                 db    ? ;
.bss:0041738F                 db    ? ;
.bss:00417390                 db    ? ;
.bss:00417391                 db    ? ;
.bss:00417392                 db    ? ;
.bss:00417393                 db    ? ;
.bss:00417394                 db    ? ;
.bss:00417395                 db    ? ;
.bss:00417396                 db    ? ;
.bss:00417397                 db    ? ;
.bss:00417398                 db    ? ;
.bss:00417399                 db    ? ;
.bss:0041739A                 db    ? ;
.bss:0041739B                 db    ? ;
.bss:0041739C                 db    ? ;
.bss:0041739D                 db    ? ;
.bss:0041739E                 db    ? ;
.bss:0041739F                 db    ? ;
.bss:004173A0                 db    ? ;
.bss:004173A1                 db    ? ;
.bss:004173A2                 db    ? ;
.bss:004173A3                 db    ? ;
.bss:004173A4                 db    ? ;
.bss:004173A5                 db    ? ;
.bss:004173A6                 db    ? ;
.bss:004173A7                 db    ? ;
.bss:004173A8                 db    ? ;
.bss:004173A9                 db    ? ;
.bss:004173AA                 db    ? ;
.bss:004173AB                 db    ? ;
.bss:004173AC                 db    ? ;
.bss:004173AD                 db    ? ;
.bss:004173AE                 db    ? ;
.bss:004173AF                 db    ? ;
.bss:004173B0                 db    ? ;
.bss:004173B1                 db    ? ;
.bss:004173B2                 db    ? ;
.bss:004173B3                 db    ? ;
.bss:004173B4                 db    ? ;
.bss:004173B5                 db    ? ;
.bss:004173B6                 db    ? ;
.bss:004173B7                 db    ? ;
.bss:004173B8                 db    ? ;
.bss:004173B9                 db    ? ;
.bss:004173BA                 db    ? ;
.bss:004173BB                 db    ? ;
.bss:004173BC                 db    ? ;
.bss:004173BD                 db    ? ;
.bss:004173BE                 db    ? ;
.bss:004173BF                 db    ? ;
.bss:004173C0                 db    ? ;
.bss:004173C1                 db    ? ;
.bss:004173C2                 db    ? ;
.bss:004173C3                 db    ? ;
.bss:004173C4                 db    ? ;
.bss:004173C5                 db    ? ;
.bss:004173C6                 db    ? ;
.bss:004173C7                 db    ? ;
.bss:004173C8                 db    ? ;
.bss:004173C9                 db    ? ;
.bss:004173CA                 db    ? ;
.bss:004173CB                 db    ? ;
.bss:004173CC                 db    ? ;
.bss:004173CD                 db    ? ;
.bss:004173CE                 db    ? ;
.bss:004173CF                 db    ? ;
.bss:004173D0                 db    ? ;
.bss:004173D1                 db    ? ;
.bss:004173D2                 db    ? ;
.bss:004173D3                 db    ? ;
.bss:004173D4                 db    ? ;
.bss:004173D5                 db    ? ;
.bss:004173D6                 db    ? ;
.bss:004173D7                 db    ? ;
.bss:004173D8                 db    ? ;
.bss:004173D9                 db    ? ;
.bss:004173DA                 db    ? ;
.bss:004173DB                 db    ? ;
.bss:004173DC                 db    ? ;
.bss:004173DD                 db    ? ;
.bss:004173DE                 db    ? ;
.bss:004173DF                 db    ? ;
.bss:004173E0                 db    ? ;
.bss:004173E1                 db    ? ;
.bss:004173E2                 db    ? ;
.bss:004173E3                 db    ? ;
.bss:004173E4                 db    ? ;
.bss:004173E5                 db    ? ;
.bss:004173E6                 db    ? ;
.bss:004173E7                 db    ? ;
.bss:004173E8                 db    ? ;
.bss:004173E9                 db    ? ;
.bss:004173EA                 db    ? ;
.bss:004173EB                 db    ? ;
.bss:004173EC                 db    ? ;
.bss:004173ED                 db    ? ;
.bss:004173EE                 db    ? ;
.bss:004173EF                 db    ? ;
.bss:004173F0                 db    ? ;
.bss:004173F1                 db    ? ;
.bss:004173F2                 db    ? ;
.bss:004173F3                 db    ? ;
.bss:004173F4                 db    ? ;
.bss:004173F5                 db    ? ;
.bss:004173F6                 db    ? ;
.bss:004173F7                 db    ? ;
.bss:004173F8                 db    ? ;
.bss:004173F9                 db    ? ;
.bss:004173FA                 db    ? ;
.bss:004173FB                 db    ? ;
.bss:004173FC                 db    ? ;
.bss:004173FD                 db    ? ;
.bss:004173FE                 db    ? ;
.bss:004173FF                 db    ? ;
.bss:00417400                 db    ? ;
.bss:00417401                 db    ? ;
.bss:00417402                 db    ? ;
.bss:00417403                 db    ? ;
.bss:00417404                 db    ? ;
.bss:00417405                 db    ? ;
.bss:00417406                 db    ? ;
.bss:00417407                 db    ? ;
.bss:00417408                 db    ? ;
.bss:00417409                 db    ? ;
.bss:0041740A                 db    ? ;
.bss:0041740B                 db    ? ;
.bss:0041740C                 db    ? ;
.bss:0041740D                 db    ? ;
.bss:0041740E                 db    ? ;
.bss:0041740F                 db    ? ;
.bss:00417410                 db    ? ;
.bss:00417411                 db    ? ;
.bss:00417412                 db    ? ;
.bss:00417413                 db    ? ;
.bss:00417414                 db    ? ;
.bss:00417415                 db    ? ;
.bss:00417416                 db    ? ;
.bss:00417417                 db    ? ;
.bss:00417418                 db    ? ;
.bss:00417419                 db    ? ;
.bss:0041741A                 db    ? ;
.bss:0041741B                 db    ? ;
.bss:0041741C                 db    ? ;
.bss:0041741D                 db    ? ;
.bss:0041741E                 db    ? ;
.bss:0041741F                 db    ? ;
.bss:00417420                 db    ? ;
.bss:00417421                 db    ? ;
.bss:00417422                 db    ? ;
.bss:00417423                 db    ? ;
.bss:00417424                 db    ? ;
.bss:00417425                 db    ? ;
.bss:00417426                 db    ? ;
.bss:00417427                 db    ? ;
.bss:00417428                 db    ? ;
.bss:00417429                 db    ? ;
.bss:0041742A                 db    ? ;
.bss:0041742B                 db    ? ;
.bss:0041742C                 db    ? ;
.bss:0041742D                 db    ? ;
.bss:0041742E                 db    ? ;
.bss:0041742F                 db    ? ;
.bss:00417430                 db    ? ;
.bss:00417431                 db    ? ;
.bss:00417432                 db    ? ;
.bss:00417433                 db    ? ;
.bss:00417434                 db    ? ;
.bss:00417435                 db    ? ;
.bss:00417436                 db    ? ;
.bss:00417437                 db    ? ;
.bss:00417438                 db    ? ;
.bss:00417439                 db    ? ;
.bss:0041743A                 db    ? ;
.bss:0041743B                 db    ? ;
.bss:0041743C                 db    ? ;
.bss:0041743D                 db    ? ;
.bss:0041743E                 db    ? ;
.bss:0041743F                 db    ? ;
.bss:00417440                 db    ? ;
.bss:00417441                 db    ? ;
.bss:00417442                 db    ? ;
.bss:00417443                 db    ? ;
.bss:00417444                 db    ? ;
.bss:00417445                 db    ? ;
.bss:00417446                 db    ? ;
.bss:00417447                 db    ? ;
.bss:00417448                 db    ? ;
.bss:00417449                 db    ? ;
.bss:0041744A                 db    ? ;
.bss:0041744B                 db    ? ;
.bss:0041744C                 db    ? ;
.bss:0041744D                 db    ? ;
.bss:0041744E                 db    ? ;
.bss:0041744F                 db    ? ;
.bss:00417450                 db    ? ;
.bss:00417451                 db    ? ;
.bss:00417452                 db    ? ;
.bss:00417453                 db    ? ;
.bss:00417454                 db    ? ;
.bss:00417455                 db    ? ;
.bss:00417456                 db    ? ;
.bss:00417457                 db    ? ;
.bss:00417458                 db    ? ;
.bss:00417459                 db    ? ;
.bss:0041745A                 db    ? ;
.bss:0041745B                 db    ? ;
.bss:0041745C                 db    ? ;
.bss:0041745D                 db    ? ;
.bss:0041745E                 db    ? ;
.bss:0041745F                 db    ? ;
.bss:00417460                 db    ? ;
.bss:00417461                 db    ? ;
.bss:00417462                 db    ? ;
.bss:00417463                 db    ? ;
.bss:00417464                 db    ? ;
.bss:00417465                 db    ? ;
.bss:00417466                 db    ? ;
.bss:00417467                 db    ? ;
.bss:00417468                 db    ? ;
.bss:00417469                 db    ? ;
.bss:0041746A                 db    ? ;
.bss:0041746B                 db    ? ;
.bss:0041746C                 db    ? ;
.bss:0041746D                 db    ? ;
.bss:0041746E                 db    ? ;
.bss:0041746F                 db    ? ;
.bss:00417470                 db    ? ;
.bss:00417471                 db    ? ;
.bss:00417472                 db    ? ;
.bss:00417473                 db    ? ;
.bss:00417474                 db    ? ;
.bss:00417475                 db    ? ;
.bss:00417476                 db    ? ;
.bss:00417477                 db    ? ;
.bss:00417478                 db    ? ;
.bss:00417479                 db    ? ;
.bss:0041747A                 db    ? ;
.bss:0041747B                 db    ? ;
.bss:0041747C                 db    ? ;
.bss:0041747D                 db    ? ;
.bss:0041747E                 db    ? ;
.bss:0041747F                 db    ? ;
.bss:00417480                 db    ? ;
.bss:00417481                 db    ? ;
.bss:00417482                 db    ? ;
.bss:00417483                 db    ? ;
.bss:00417484                 db    ? ;
.bss:00417485                 db    ? ;
.bss:00417486                 db    ? ;
.bss:00417487                 db    ? ;
.bss:00417488                 db    ? ;
.bss:00417489                 db    ? ;
.bss:0041748A                 db    ? ;
.bss:0041748B                 db    ? ;
.bss:0041748C                 db    ? ;
.bss:0041748D                 db    ? ;
.bss:0041748E                 db    ? ;
.bss:0041748F                 db    ? ;
.bss:00417490                 db    ? ;
.bss:00417491                 db    ? ;
.bss:00417492                 db    ? ;
.bss:00417493                 db    ? ;
.bss:00417494                 db    ? ;
.bss:00417495                 db    ? ;
.bss:00417496                 db    ? ;
.bss:00417497                 db    ? ;
.bss:00417498                 db    ? ;
.bss:00417499                 db    ? ;
.bss:0041749A                 db    ? ;
.bss:0041749B                 db    ? ;
.bss:0041749C                 db    ? ;
.bss:0041749D                 db    ? ;
.bss:0041749E                 db    ? ;
.bss:0041749F                 db    ? ;
.bss:004174A0                 db    ? ;
.bss:004174A1                 db    ? ;
.bss:004174A2                 db    ? ;
.bss:004174A3                 db    ? ;
.bss:004174A4                 db    ? ;
.bss:004174A5                 db    ? ;
.bss:004174A6                 db    ? ;
.bss:004174A7                 db    ? ;
.bss:004174A8                 db    ? ;
.bss:004174A9                 db    ? ;
.bss:004174AA                 db    ? ;
.bss:004174AB                 db    ? ;
.bss:004174AC                 db    ? ;
.bss:004174AD                 db    ? ;
.bss:004174AE                 db    ? ;
.bss:004174AF                 db    ? ;
.bss:004174B0                 db    ? ;
.bss:004174B1                 db    ? ;
.bss:004174B2                 db    ? ;
.bss:004174B3                 db    ? ;
.bss:004174B4                 db    ? ;
.bss:004174B5                 db    ? ;
.bss:004174B6                 db    ? ;
.bss:004174B7                 db    ? ;
.bss:004174B8                 db    ? ;
.bss:004174B9                 db    ? ;
.bss:004174BA                 db    ? ;
.bss:004174BB                 db    ? ;
.bss:004174BC                 db    ? ;
.bss:004174BD                 db    ? ;
.bss:004174BE                 db    ? ;
.bss:004174BF                 db    ? ;
.bss:004174C0                 db    ? ;
.bss:004174C1                 db    ? ;
.bss:004174C2                 db    ? ;
.bss:004174C3                 db    ? ;
.bss:004174C4                 db    ? ;
.bss:004174C5                 db    ? ;
.bss:004174C6                 db    ? ;
.bss:004174C7                 db    ? ;
.bss:004174C8                 db    ? ;
.bss:004174C9                 db    ? ;
.bss:004174CA                 db    ? ;
.bss:004174CB                 db    ? ;
.bss:004174CC                 db    ? ;
.bss:004174CD                 db    ? ;
.bss:004174CE                 db    ? ;
.bss:004174CF                 db    ? ;
.bss:004174D0                 db    ? ;
.bss:004174D1                 db    ? ;
.bss:004174D2                 db    ? ;
.bss:004174D3                 db    ? ;
.bss:004174D4                 db    ? ;
.bss:004174D5                 db    ? ;
.bss:004174D6                 db    ? ;
.bss:004174D7                 db    ? ;
.bss:004174D8                 db    ? ;
.bss:004174D9                 db    ? ;
.bss:004174DA                 db    ? ;
.bss:004174DB                 db    ? ;
.bss:004174DC                 db    ? ;
.bss:004174DD                 db    ? ;
.bss:004174DE                 db    ? ;
.bss:004174DF                 db    ? ;
.bss:004174E0                 db    ? ;
.bss:004174E1                 db    ? ;
.bss:004174E2                 db    ? ;
.bss:004174E3                 db    ? ;
.bss:004174E4                 db    ? ;
.bss:004174E5                 db    ? ;
.bss:004174E6                 db    ? ;
.bss:004174E7                 db    ? ;
.bss:004174E8                 db    ? ;
.bss:004174E9                 db    ? ;
.bss:004174EA                 db    ? ;
.bss:004174EB                 db    ? ;
.bss:004174EC                 db    ? ;
.bss:004174ED                 db    ? ;
.bss:004174EE                 db    ? ;
.bss:004174EF                 db    ? ;
.bss:004174F0                 db    ? ;
.bss:004174F1                 db    ? ;
.bss:004174F2                 db    ? ;
.bss:004174F3                 db    ? ;
.bss:004174F4                 db    ? ;
.bss:004174F5                 db    ? ;
.bss:004174F6                 db    ? ;
.bss:004174F7                 db    ? ;
.bss:004174F8                 db    ? ;
.bss:004174F9                 db    ? ;
.bss:004174FA                 db    ? ;
.bss:004174FB                 db    ? ;
.bss:004174FC                 db    ? ;
.bss:004174FD                 db    ? ;
.bss:004174FE                 db    ? ;
.bss:004174FF                 db    ? ;
.bss:00417500                 db    ? ;
.bss:00417501                 db    ? ;
.bss:00417502                 db    ? ;
.bss:00417503                 db    ? ;
.bss:00417504                 db    ? ;
.bss:00417505                 db    ? ;
.bss:00417506                 db    ? ;
.bss:00417507                 db    ? ;
.bss:00417508                 db    ? ;
.bss:00417509                 db    ? ;
.bss:0041750A                 db    ? ;
.bss:0041750B                 db    ? ;
.bss:0041750C                 db    ? ;
.bss:0041750D                 db    ? ;
.bss:0041750E                 db    ? ;
.bss:0041750F                 db    ? ;
.bss:00417510                 db    ? ;
.bss:00417511                 db    ? ;
.bss:00417512                 db    ? ;
.bss:00417513                 db    ? ;
.bss:00417514                 db    ? ;
.bss:00417515                 db    ? ;
.bss:00417516                 db    ? ;
.bss:00417517                 db    ? ;
.bss:00417518                 db    ? ;
.bss:00417519                 db    ? ;
.bss:0041751A                 db    ? ;
.bss:0041751B                 db    ? ;
.bss:0041751C                 db    ? ;
.bss:0041751D                 db    ? ;
.bss:0041751E                 db    ? ;
.bss:0041751F                 db    ? ;
.bss:00417520                 db    ? ;
.bss:00417521                 db    ? ;
.bss:00417522                 db    ? ;
.bss:00417523                 db    ? ;
.bss:00417524                 db    ? ;
.bss:00417525                 db    ? ;
.bss:00417526                 db    ? ;
.bss:00417527                 db    ? ;
.bss:00417528                 db    ? ;
.bss:00417529                 db    ? ;
.bss:0041752A                 db    ? ;
.bss:0041752B                 db    ? ;
.bss:0041752C                 db    ? ;
.bss:0041752D                 db    ? ;
.bss:0041752E                 db    ? ;
.bss:0041752F                 db    ? ;
.bss:00417530                 db    ? ;
.bss:00417531                 db    ? ;
.bss:00417532                 db    ? ;
.bss:00417533                 db    ? ;
.bss:00417534                 db    ? ;
.bss:00417535                 db    ? ;
.bss:00417536                 db    ? ;
.bss:00417537                 db    ? ;
.bss:00417538                 db    ? ;
.bss:00417539                 db    ? ;
.bss:0041753A                 db    ? ;
.bss:0041753B                 db    ? ;
.bss:0041753C                 db    ? ;
.bss:0041753D                 db    ? ;
.bss:0041753E                 db    ? ;
.bss:0041753F                 db    ? ;
.bss:00417540                 db    ? ;
.bss:00417541                 db    ? ;
.bss:00417542                 db    ? ;
.bss:00417543                 db    ? ;
.bss:00417544                 db    ? ;
.bss:00417545                 db    ? ;
.bss:00417546                 db    ? ;
.bss:00417547                 db    ? ;
.bss:00417548                 db    ? ;
.bss:00417549                 db    ? ;
.bss:0041754A                 db    ? ;
.bss:0041754B                 db    ? ;
.bss:0041754C                 db    ? ;
.bss:0041754D                 db    ? ;
.bss:0041754E                 db    ? ;
.bss:0041754F                 db    ? ;
.bss:00417550                 db    ? ;
.bss:00417551                 db    ? ;
.bss:00417552                 db    ? ;
.bss:00417553                 db    ? ;
.bss:00417554                 db    ? ;
.bss:00417555                 db    ? ;
.bss:00417556                 db    ? ;
.bss:00417557                 db    ? ;
.bss:00417558                 db    ? ;
.bss:00417559                 db    ? ;
.bss:0041755A                 db    ? ;
.bss:0041755B                 db    ? ;
.bss:0041755C                 db    ? ;
.bss:0041755D                 db    ? ;
.bss:0041755E                 db    ? ;
.bss:0041755F                 db    ? ;
.bss:00417560                 db    ? ;
.bss:00417561                 db    ? ;
.bss:00417562                 db    ? ;
.bss:00417563                 db    ? ;
.bss:00417564                 db    ? ;
.bss:00417565                 db    ? ;
.bss:00417566                 db    ? ;
.bss:00417567                 db    ? ;
.bss:00417568                 db    ? ;
.bss:00417569                 db    ? ;
.bss:0041756A                 db    ? ;
.bss:0041756B                 db    ? ;
.bss:0041756C                 db    ? ;
.bss:0041756D                 db    ? ;
.bss:0041756E                 db    ? ;
.bss:0041756F                 db    ? ;
.bss:00417570                 db    ? ;
.bss:00417571                 db    ? ;
.bss:00417572                 db    ? ;
.bss:00417573                 db    ? ;
.bss:00417574                 db    ? ;
.bss:00417575                 db    ? ;
.bss:00417576                 db    ? ;
.bss:00417577                 db    ? ;
.bss:00417578                 db    ? ;
.bss:00417579                 db    ? ;
.bss:0041757A                 db    ? ;
.bss:0041757B                 db    ? ;
.bss:0041757C                 db    ? ;
.bss:0041757D                 db    ? ;
.bss:0041757E                 db    ? ;
.bss:0041757F                 db    ? ;
.bss:00417580                 db    ? ;
.bss:00417581                 db    ? ;
.bss:00417582                 db    ? ;
.bss:00417583                 db    ? ;
.bss:00417584                 db    ? ;
.bss:00417585                 db    ? ;
.bss:00417586                 db    ? ;
.bss:00417587                 db    ? ;
.bss:00417588                 db    ? ;
.bss:00417589                 db    ? ;
.bss:0041758A                 db    ? ;
.bss:0041758B                 db    ? ;
.bss:0041758C                 db    ? ;
.bss:0041758D                 db    ? ;
.bss:0041758E                 db    ? ;
.bss:0041758F                 db    ? ;
.bss:00417590                 db    ? ;
.bss:00417591                 db    ? ;
.bss:00417592                 db    ? ;
.bss:00417593                 db    ? ;
.bss:00417594                 db    ? ;
.bss:00417595                 db    ? ;
.bss:00417596                 db    ? ;
.bss:00417597                 db    ? ;
.bss:00417598                 db    ? ;
.bss:00417599                 db    ? ;
.bss:0041759A                 db    ? ;
.bss:0041759B                 db    ? ;
.bss:0041759C                 db    ? ;
.bss:0041759D                 db    ? ;
.bss:0041759E                 db    ? ;
.bss:0041759F                 db    ? ;
.bss:004175A0                 db    ? ;
.bss:004175A1                 db    ? ;
.bss:004175A2                 db    ? ;
.bss:004175A3                 db    ? ;
.bss:004175A4                 db    ? ;
.bss:004175A5                 db    ? ;
.bss:004175A6                 db    ? ;
.bss:004175A7                 db    ? ;
.bss:004175A8                 db    ? ;
.bss:004175A9                 db    ? ;
.bss:004175AA                 db    ? ;
.bss:004175AB                 db    ? ;
.bss:004175AC                 db    ? ;
.bss:004175AD                 db    ? ;
.bss:004175AE                 db    ? ;
.bss:004175AF                 db    ? ;
.bss:004175B0                 db    ? ;
.bss:004175B1                 db    ? ;
.bss:004175B2                 db    ? ;
.bss:004175B3                 db    ? ;
.bss:004175B4                 db    ? ;
.bss:004175B5                 db    ? ;
.bss:004175B6                 db    ? ;
.bss:004175B7                 db    ? ;
.bss:004175B8                 db    ? ;
.bss:004175B9                 db    ? ;
.bss:004175BA                 db    ? ;
.bss:004175BB                 db    ? ;
.bss:004175BC                 db    ? ;
.bss:004175BD                 db    ? ;
.bss:004175BE                 db    ? ;
.bss:004175BF                 db    ? ;
.bss:004175C0                 db    ? ;
.bss:004175C1                 db    ? ;
.bss:004175C2                 db    ? ;
.bss:004175C3                 db    ? ;
.bss:004175C4                 db    ? ;
.bss:004175C5                 db    ? ;
.bss:004175C6                 db    ? ;
.bss:004175C7                 db    ? ;
.bss:004175C8                 db    ? ;
.bss:004175C9                 db    ? ;
.bss:004175CA                 db    ? ;
.bss:004175CB                 db    ? ;
.bss:004175CC                 db    ? ;
.bss:004175CD                 db    ? ;
.bss:004175CE                 db    ? ;
.bss:004175CF                 db    ? ;
.bss:004175D0                 db    ? ;
.bss:004175D1                 db    ? ;
.bss:004175D2                 db    ? ;
.bss:004175D3                 db    ? ;
.bss:004175D4                 db    ? ;
.bss:004175D5                 db    ? ;
.bss:004175D6                 db    ? ;
.bss:004175D7                 db    ? ;
.bss:004175D8                 db    ? ;
.bss:004175D9                 db    ? ;
.bss:004175DA                 db    ? ;
.bss:004175DB                 db    ? ;
.bss:004175DC                 db    ? ;
.bss:004175DD                 db    ? ;
.bss:004175DE                 db    ? ;
.bss:004175DF                 db    ? ;
.bss:004175E0                 db    ? ;
.bss:004175E1                 db    ? ;
.bss:004175E2                 db    ? ;
.bss:004175E3                 db    ? ;
.bss:004175E4                 db    ? ;
.bss:004175E5                 db    ? ;
.bss:004175E6                 db    ? ;
.bss:004175E7                 db    ? ;
.bss:004175E8                 db    ? ;
.bss:004175E9                 db    ? ;
.bss:004175EA                 db    ? ;
.bss:004175EB                 db    ? ;
.bss:004175EC                 db    ? ;
.bss:004175ED                 db    ? ;
.bss:004175EE                 db    ? ;
.bss:004175EF                 db    ? ;
.bss:004175F0                 db    ? ;
.bss:004175F1                 db    ? ;
.bss:004175F2                 db    ? ;
.bss:004175F3                 db    ? ;
.bss:004175F4                 db    ? ;
.bss:004175F5                 db    ? ;
.bss:004175F6                 db    ? ;
.bss:004175F7                 db    ? ;
.bss:004175F8                 db    ? ;
.bss:004175F9                 db    ? ;
.bss:004175FA                 db    ? ;
.bss:004175FB                 db    ? ;
.bss:004175FC                 db    ? ;
.bss:004175FD                 db    ? ;
.bss:004175FE                 db    ? ;
.bss:004175FF                 db    ? ;
.bss:00417600                 db    ? ;
.bss:00417601                 db    ? ;
.bss:00417602                 db    ? ;
.bss:00417603                 db    ? ;
.bss:00417604                 db    ? ;
.bss:00417605                 db    ? ;
.bss:00417606                 db    ? ;
.bss:00417607                 db    ? ;
.bss:00417608                 db    ? ;
.bss:00417609                 db    ? ;
.bss:0041760A                 db    ? ;
.bss:0041760B                 db    ? ;
.bss:0041760C                 db    ? ;
.bss:0041760D                 db    ? ;
.bss:0041760E                 db    ? ;
.bss:0041760F                 db    ? ;
.bss:00417610                 db    ? ;
.bss:00417611                 db    ? ;
.bss:00417612                 db    ? ;
.bss:00417613                 db    ? ;
.bss:00417614                 db    ? ;
.bss:00417615                 db    ? ;
.bss:00417616                 db    ? ;
.bss:00417617                 db    ? ;
.bss:00417618                 db    ? ;
.bss:00417619                 db    ? ;
.bss:0041761A                 db    ? ;
.bss:0041761B                 db    ? ;
.bss:0041761C                 db    ? ;
.bss:0041761D                 db    ? ;
.bss:0041761E                 db    ? ;
.bss:0041761F                 db    ? ;
.bss:00417620                 db    ? ;
.bss:00417621                 db    ? ;
.bss:00417622                 db    ? ;
.bss:00417623                 db    ? ;
.bss:00417624                 db    ? ;
.bss:00417625                 db    ? ;
.bss:00417626                 db    ? ;
.bss:00417627                 db    ? ;
.bss:00417628                 db    ? ;
.bss:00417629                 db    ? ;
.bss:0041762A                 db    ? ;
.bss:0041762B                 db    ? ;
.bss:0041762C                 db    ? ;
.bss:0041762D                 db    ? ;
.bss:0041762E                 db    ? ;
.bss:0041762F                 db    ? ;
.bss:00417630                 db    ? ;
.bss:00417631                 db    ? ;
.bss:00417632                 db    ? ;
.bss:00417633                 db    ? ;
.bss:00417634                 db    ? ;
.bss:00417635                 db    ? ;
.bss:00417636                 db    ? ;
.bss:00417637                 db    ? ;
.bss:00417638                 db    ? ;
.bss:00417639                 db    ? ;
.bss:0041763A                 db    ? ;
.bss:0041763B                 db    ? ;
.bss:0041763C                 db    ? ;
.bss:0041763D                 db    ? ;
.bss:0041763E                 db    ? ;
.bss:0041763F                 db    ? ;
.bss:00417640                 db    ? ;
.bss:00417641                 db    ? ;
.bss:00417642                 db    ? ;
.bss:00417643                 db    ? ;
.bss:00417644                 db    ? ;
.bss:00417645                 db    ? ;
.bss:00417646                 db    ? ;
.bss:00417647                 db    ? ;
.bss:00417648                 db    ? ;
.bss:00417649                 db    ? ;
.bss:0041764A                 db    ? ;
.bss:0041764B                 db    ? ;
.bss:0041764C                 db    ? ;
.bss:0041764D                 db    ? ;
.bss:0041764E                 db    ? ;
.bss:0041764F                 db    ? ;
.bss:00417650                 db    ? ;
.bss:00417651                 db    ? ;
.bss:00417652                 db    ? ;
.bss:00417653                 db    ? ;
.bss:00417654                 db    ? ;
.bss:00417655                 db    ? ;
.bss:00417656                 db    ? ;
.bss:00417657                 db    ? ;
.bss:00417658                 db    ? ;
.bss:00417659                 db    ? ;
.bss:0041765A                 db    ? ;
.bss:0041765B                 db    ? ;
.bss:0041765C                 db    ? ;
.bss:0041765D                 db    ? ;
.bss:0041765E                 db    ? ;
.bss:0041765F                 db    ? ;
.bss:00417660                 db    ? ;
.bss:00417661                 db    ? ;
.bss:00417662                 db    ? ;
.bss:00417663                 db    ? ;
.bss:00417664                 db    ? ;
.bss:00417665                 db    ? ;
.bss:00417666                 db    ? ;
.bss:00417667                 db    ? ;
.bss:00417668                 db    ? ;
.bss:00417669                 db    ? ;
.bss:0041766A                 db    ? ;
.bss:0041766B                 db    ? ;
.bss:0041766C                 db    ? ;
.bss:0041766D                 db    ? ;
.bss:0041766E                 db    ? ;
.bss:0041766F                 db    ? ;
.bss:00417670                 db    ? ;
.bss:00417671                 db    ? ;
.bss:00417672                 db    ? ;
.bss:00417673                 db    ? ;
.bss:00417674                 db    ? ;
.bss:00417675                 db    ? ;
.bss:00417676                 db    ? ;
.bss:00417677                 db    ? ;
.bss:00417678                 db    ? ;
.bss:00417679                 db    ? ;
.bss:0041767A                 db    ? ;
.bss:0041767B                 db    ? ;
.bss:0041767C                 db    ? ;
.bss:0041767D                 db    ? ;
.bss:0041767E                 db    ? ;
.bss:0041767F                 db    ? ;
.bss:00417680                 db    ? ;
.bss:00417681                 db    ? ;
.bss:00417682                 db    ? ;
.bss:00417683                 db    ? ;
.bss:00417684                 db    ? ;
.bss:00417685                 db    ? ;
.bss:00417686                 db    ? ;
.bss:00417687                 db    ? ;
.bss:00417688                 db    ? ;
.bss:00417689                 db    ? ;
.bss:0041768A                 db    ? ;
.bss:0041768B                 db    ? ;
.bss:0041768C                 db    ? ;
.bss:0041768D                 db    ? ;
.bss:0041768E                 db    ? ;
.bss:0041768F                 db    ? ;
.bss:00417690                 db    ? ;
.bss:00417691                 db    ? ;
.bss:00417692                 db    ? ;
.bss:00417693                 db    ? ;
.bss:00417694                 db    ? ;
.bss:00417695                 db    ? ;
.bss:00417696                 db    ? ;
.bss:00417697                 db    ? ;
.bss:00417698                 db    ? ;
.bss:00417699                 db    ? ;
.bss:0041769A                 db    ? ;
.bss:0041769B                 db    ? ;
.bss:0041769C                 db    ? ;
.bss:0041769D                 db    ? ;
.bss:0041769E                 db    ? ;
.bss:0041769F                 db    ? ;
.bss:004176A0                 db    ? ;
.bss:004176A1                 db    ? ;
.bss:004176A2                 db    ? ;
.bss:004176A3                 db    ? ;
.bss:004176A4                 db    ? ;
.bss:004176A5                 db    ? ;
.bss:004176A6                 db    ? ;
.bss:004176A7                 db    ? ;
.bss:004176A8                 db    ? ;
.bss:004176A9                 db    ? ;
.bss:004176AA                 db    ? ;
.bss:004176AB                 db    ? ;
.bss:004176AC                 db    ? ;
.bss:004176AD                 db    ? ;
.bss:004176AE                 db    ? ;
.bss:004176AF                 db    ? ;
.bss:004176B0                 db    ? ;
.bss:004176B1                 db    ? ;
.bss:004176B2                 db    ? ;
.bss:004176B3                 db    ? ;
.bss:004176B4                 db    ? ;
.bss:004176B5                 db    ? ;
.bss:004176B6                 db    ? ;
.bss:004176B7                 db    ? ;
.bss:004176B8                 db    ? ;
.bss:004176B9                 db    ? ;
.bss:004176BA                 db    ? ;
.bss:004176BB                 db    ? ;
.bss:004176BC                 db    ? ;
.bss:004176BD                 db    ? ;
.bss:004176BE                 db    ? ;
.bss:004176BF                 db    ? ;
.bss:004176C0                 db    ? ;
.bss:004176C1                 db    ? ;
.bss:004176C2                 db    ? ;
.bss:004176C3                 db    ? ;
.bss:004176C4                 db    ? ;
.bss:004176C5                 db    ? ;
.bss:004176C6                 db    ? ;
.bss:004176C7                 db    ? ;
.bss:004176C8                 db    ? ;
.bss:004176C9                 db    ? ;
.bss:004176CA                 db    ? ;
.bss:004176CB                 db    ? ;
.bss:004176CC                 db    ? ;
.bss:004176CD                 db    ? ;
.bss:004176CE                 db    ? ;
.bss:004176CF                 db    ? ;
.bss:004176D0                 db    ? ;
.bss:004176D1                 db    ? ;
.bss:004176D2                 db    ? ;
.bss:004176D3                 db    ? ;
.bss:004176D4                 db    ? ;
.bss:004176D5                 db    ? ;
.bss:004176D6                 db    ? ;
.bss:004176D7                 db    ? ;
.bss:004176D8                 db    ? ;
.bss:004176D9                 db    ? ;
.bss:004176DA                 db    ? ;
.bss:004176DB                 db    ? ;
.bss:004176DC                 db    ? ;
.bss:004176DD                 db    ? ;
.bss:004176DE                 db    ? ;
.bss:004176DF                 db    ? ;
.bss:004176E0                 db    ? ;
.bss:004176E1                 db    ? ;
.bss:004176E2                 db    ? ;
.bss:004176E3                 db    ? ;
.bss:004176E4                 db    ? ;
.bss:004176E5                 db    ? ;
.bss:004176E6                 db    ? ;
.bss:004176E7                 db    ? ;
.bss:004176E8                 db    ? ;
.bss:004176E9                 db    ? ;
.bss:004176EA                 db    ? ;
.bss:004176EB                 db    ? ;
.bss:004176EC                 db    ? ;
.bss:004176ED                 db    ? ;
.bss:004176EE                 db    ? ;
.bss:004176EF                 db    ? ;
.bss:004176F0                 db    ? ;
.bss:004176F1                 db    ? ;
.bss:004176F2                 db    ? ;
.bss:004176F3                 db    ? ;
.bss:004176F4                 db    ? ;
.bss:004176F5                 db    ? ;
.bss:004176F6                 db    ? ;
.bss:004176F7                 db    ? ;
.bss:004176F8                 db    ? ;
.bss:004176F9                 db    ? ;
.bss:004176FA                 db    ? ;
.bss:004176FB                 db    ? ;
.bss:004176FC                 db    ? ;
.bss:004176FD                 db    ? ;
.bss:004176FE                 db    ? ;
.bss:004176FF                 db    ? ;
.bss:00417700                 db    ? ;
.bss:00417701                 db    ? ;
.bss:00417702                 db    ? ;
.bss:00417703                 db    ? ;
.bss:00417704                 db    ? ;
.bss:00417705                 db    ? ;
.bss:00417706                 db    ? ;
.bss:00417707                 db    ? ;
.bss:00417708                 db    ? ;
.bss:00417709                 db    ? ;
.bss:0041770A                 db    ? ;
.bss:0041770B                 db    ? ;
.bss:0041770C                 db    ? ;
.bss:0041770D                 db    ? ;
.bss:0041770E                 db    ? ;
.bss:0041770F                 db    ? ;
.bss:00417710                 db    ? ;
.bss:00417711                 db    ? ;
.bss:00417712                 db    ? ;
.bss:00417713                 db    ? ;
.bss:00417714                 db    ? ;
.bss:00417715                 db    ? ;
.bss:00417716                 db    ? ;
.bss:00417717                 db    ? ;
.bss:00417718                 db    ? ;
.bss:00417719                 db    ? ;
.bss:0041771A                 db    ? ;
.bss:0041771B                 db    ? ;
.bss:0041771C                 db    ? ;
.bss:0041771D                 db    ? ;
.bss:0041771E                 db    ? ;
.bss:0041771F                 db    ? ;
.bss:00417720                 db    ? ;
.bss:00417721                 db    ? ;
.bss:00417722                 db    ? ;
.bss:00417723                 db    ? ;
.bss:00417724                 db    ? ;
.bss:00417725                 db    ? ;
.bss:00417726                 db    ? ;
.bss:00417727                 db    ? ;
.bss:00417728                 db    ? ;
.bss:00417729                 db    ? ;
.bss:0041772A                 db    ? ;
.bss:0041772B                 db    ? ;
.bss:0041772C                 db    ? ;
.bss:0041772D                 db    ? ;
.bss:0041772E                 db    ? ;
.bss:0041772F                 db    ? ;
.bss:00417730                 db    ? ;
.bss:00417731                 db    ? ;
.bss:00417732                 db    ? ;
.bss:00417733                 db    ? ;
.bss:00417734                 db    ? ;
.bss:00417735                 db    ? ;
.bss:00417736                 db    ? ;
.bss:00417737                 db    ? ;
.bss:00417738                 db    ? ;
.bss:00417739                 db    ? ;
.bss:0041773A                 db    ? ;
.bss:0041773B                 db    ? ;
.bss:0041773C                 db    ? ;
.bss:0041773D                 db    ? ;
.bss:0041773E                 db    ? ;
.bss:0041773F                 db    ? ;
.bss:00417740                 db    ? ;
.bss:00417741                 db    ? ;
.bss:00417742                 db    ? ;
.bss:00417743                 db    ? ;
.bss:00417744                 db    ? ;
.bss:00417745                 db    ? ;
.bss:00417746                 db    ? ;
.bss:00417747                 db    ? ;
.bss:00417748                 db    ? ;
.bss:00417749                 db    ? ;
.bss:0041774A                 db    ? ;
.bss:0041774B                 db    ? ;
.bss:0041774C                 db    ? ;
.bss:0041774D                 db    ? ;
.bss:0041774E                 db    ? ;
.bss:0041774F                 db    ? ;
.bss:00417750                 db    ? ;
.bss:00417751                 db    ? ;
.bss:00417752                 db    ? ;
.bss:00417753                 db    ? ;
.bss:00417754                 db    ? ;
.bss:00417755                 db    ? ;
.bss:00417756                 db    ? ;
.bss:00417757                 db    ? ;
.bss:00417758                 db    ? ;
.bss:00417759                 db    ? ;
.bss:0041775A                 db    ? ;
.bss:0041775B                 db    ? ;
.bss:0041775C                 db    ? ;
.bss:0041775D                 db    ? ;
.bss:0041775E                 db    ? ;
.bss:0041775F                 db    ? ;
.bss:00417760                 db    ? ;
.bss:00417761                 db    ? ;
.bss:00417762                 db    ? ;
.bss:00417763                 db    ? ;
.bss:00417764                 db    ? ;
.bss:00417765                 db    ? ;
.bss:00417766                 db    ? ;
.bss:00417767                 db    ? ;
.bss:00417768                 db    ? ;
.bss:00417769                 db    ? ;
.bss:0041776A                 db    ? ;
.bss:0041776B                 db    ? ;
.bss:0041776C                 db    ? ;
.bss:0041776D                 db    ? ;
.bss:0041776E                 db    ? ;
.bss:0041776F                 db    ? ;
.bss:00417770                 db    ? ;
.bss:00417771                 db    ? ;
.bss:00417772                 db    ? ;
.bss:00417773                 db    ? ;
.bss:00417774                 db    ? ;
.bss:00417775                 db    ? ;
.bss:00417776                 db    ? ;
.bss:00417777                 db    ? ;
.bss:00417778                 db    ? ;
.bss:00417779                 db    ? ;
.bss:0041777A                 db    ? ;
.bss:0041777B                 db    ? ;
.bss:0041777C                 db    ? ;
.bss:0041777D                 db    ? ;
.bss:0041777E                 db    ? ;
.bss:0041777F                 db    ? ;
.bss:00417780                 db    ? ;
.bss:00417781                 db    ? ;
.bss:00417782                 db    ? ;
.bss:00417783                 db    ? ;
.bss:00417784                 db    ? ;
.bss:00417785                 db    ? ;
.bss:00417786                 db    ? ;
.bss:00417787                 db    ? ;
.bss:00417788                 db    ? ;
.bss:00417789                 db    ? ;
.bss:0041778A                 db    ? ;
.bss:0041778B                 db    ? ;
.bss:0041778C                 db    ? ;
.bss:0041778D                 db    ? ;
.bss:0041778E                 db    ? ;
.bss:0041778F                 db    ? ;
.bss:00417790                 db    ? ;
.bss:00417791                 db    ? ;
.bss:00417792                 db    ? ;
.bss:00417793                 db    ? ;
.bss:00417794                 db    ? ;
.bss:00417795                 db    ? ;
.bss:00417796                 db    ? ;
.bss:00417797                 db    ? ;
.bss:00417798                 db    ? ;
.bss:00417799                 db    ? ;
.bss:0041779A                 db    ? ;
.bss:0041779B                 db    ? ;
.bss:0041779C                 db    ? ;
.bss:0041779D                 db    ? ;
.bss:0041779E                 db    ? ;
.bss:0041779F                 db    ? ;
.bss:004177A0                 db    ? ;
.bss:004177A1                 db    ? ;
.bss:004177A2                 db    ? ;
.bss:004177A3                 db    ? ;
.bss:004177A4                 db    ? ;
.bss:004177A5                 db    ? ;
.bss:004177A6                 db    ? ;
.bss:004177A7                 db    ? ;
.bss:004177A8                 db    ? ;
.bss:004177A9                 db    ? ;
.bss:004177AA                 db    ? ;
.bss:004177AB                 db    ? ;
.bss:004177AC                 db    ? ;
.bss:004177AD                 db    ? ;
.bss:004177AE                 db    ? ;
.bss:004177AF                 db    ? ;
.bss:004177B0                 db    ? ;
.bss:004177B1                 db    ? ;
.bss:004177B2                 db    ? ;
.bss:004177B3                 db    ? ;
.bss:004177B4                 db    ? ;
.bss:004177B5                 db    ? ;
.bss:004177B6                 db    ? ;
.bss:004177B7                 db    ? ;
.bss:004177B8                 db    ? ;
.bss:004177B9                 db    ? ;
.bss:004177BA                 db    ? ;
.bss:004177BB                 db    ? ;
.bss:004177BC                 db    ? ;
.bss:004177BD                 db    ? ;
.bss:004177BE                 db    ? ;
.bss:004177BF                 db    ? ;
.bss:004177C0                 db    ? ;
.bss:004177C1                 db    ? ;
.bss:004177C2                 db    ? ;
.bss:004177C3                 db    ? ;
.bss:004177C4                 db    ? ;
.bss:004177C5                 db    ? ;
.bss:004177C6                 db    ? ;
.bss:004177C7                 db    ? ;
.bss:004177C8                 db    ? ;
.bss:004177C9                 db    ? ;
.bss:004177CA                 db    ? ;
.bss:004177CB                 db    ? ;
.bss:004177CC                 db    ? ;
.bss:004177CD                 db    ? ;
.bss:004177CE                 db    ? ;
.bss:004177CF                 db    ? ;
.bss:004177D0                 db    ? ;
.bss:004177D1                 db    ? ;
.bss:004177D2                 db    ? ;
.bss:004177D3                 db    ? ;
.bss:004177D4                 db    ? ;
.bss:004177D5                 db    ? ;
.bss:004177D6                 db    ? ;
.bss:004177D7                 db    ? ;
.bss:004177D8                 db    ? ;
.bss:004177D9                 db    ? ;
.bss:004177DA                 db    ? ;
.bss:004177DB                 db    ? ;
.bss:004177DC                 db    ? ;
.bss:004177DD                 db    ? ;
.bss:004177DE                 db    ? ;
.bss:004177DF                 db    ? ;
.bss:004177E0                 db    ? ;
.bss:004177E1                 db    ? ;
.bss:004177E2                 db    ? ;
.bss:004177E3                 db    ? ;
.bss:004177E4                 db    ? ;
.bss:004177E5                 db    ? ;
.bss:004177E6                 db    ? ;
.bss:004177E7                 db    ? ;
.bss:004177E8                 db    ? ;
.bss:004177E9                 db    ? ;
.bss:004177EA                 db    ? ;
.bss:004177EB                 db    ? ;
.bss:004177EC                 db    ? ;
.bss:004177ED                 db    ? ;
.bss:004177EE                 db    ? ;
.bss:004177EF                 db    ? ;
.bss:004177F0                 db    ? ;
.bss:004177F1                 db    ? ;
.bss:004177F2                 db    ? ;
.bss:004177F3                 db    ? ;
.bss:004177F4                 db    ? ;
.bss:004177F5                 db    ? ;
.bss:004177F6                 db    ? ;
.bss:004177F7                 db    ? ;
.bss:004177F8                 db    ? ;
.bss:004177F9                 db    ? ;
.bss:004177FA                 db    ? ;
.bss:004177FB                 db    ? ;
.bss:004177FC                 db    ? ;
.bss:004177FD                 db    ? ;
.bss:004177FE                 db    ? ;
.bss:004177FF                 db    ? ;
.bss:00417800                 db    ? ;
.bss:00417801                 db    ? ;
.bss:00417802                 db    ? ;
.bss:00417803                 db    ? ;
.bss:00417804                 db    ? ;
.bss:00417805                 db    ? ;
.bss:00417806                 db    ? ;
.bss:00417807                 db    ? ;
.bss:00417808                 db    ? ;
.bss:00417809                 db    ? ;
.bss:0041780A                 db    ? ;
.bss:0041780B                 db    ? ;
.bss:0041780C                 db    ? ;
.bss:0041780D                 db    ? ;
.bss:0041780E                 db    ? ;
.bss:0041780F                 db    ? ;
.bss:00417810                 db    ? ;
.bss:00417811                 db    ? ;
.bss:00417812                 db    ? ;
.bss:00417813                 db    ? ;
.bss:00417814                 db    ? ;
.bss:00417815                 db    ? ;
.bss:00417816                 db    ? ;
.bss:00417817                 db    ? ;
.bss:00417818                 db    ? ;
.bss:00417819                 db    ? ;
.bss:0041781A                 db    ? ;
.bss:0041781B                 db    ? ;
.bss:0041781C                 db    ? ;
.bss:0041781D                 db    ? ;
.bss:0041781E                 db    ? ;
.bss:0041781F                 db    ? ;
.bss:00417820                 db    ? ;
.bss:00417821                 db    ? ;
.bss:00417822                 db    ? ;
.bss:00417823                 db    ? ;
.bss:00417824                 db    ? ;
.bss:00417825                 db    ? ;
.bss:00417826                 db    ? ;
.bss:00417827                 db    ? ;
.bss:00417828                 db    ? ;
.bss:00417829                 db    ? ;
.bss:0041782A                 db    ? ;
.bss:0041782B                 db    ? ;
.bss:0041782C                 db    ? ;
.bss:0041782D                 db    ? ;
.bss:0041782E                 db    ? ;
.bss:0041782F                 db    ? ;
.bss:00417830                 db    ? ;
.bss:00417831                 db    ? ;
.bss:00417832                 db    ? ;
.bss:00417833                 db    ? ;
.bss:00417834                 db    ? ;
.bss:00417835                 db    ? ;
.bss:00417836                 db    ? ;
.bss:00417837                 db    ? ;
.bss:00417838                 db    ? ;
.bss:00417839                 db    ? ;
.bss:0041783A                 db    ? ;
.bss:0041783B                 db    ? ;
.bss:0041783C                 db    ? ;
.bss:0041783D                 db    ? ;
.bss:0041783E                 db    ? ;
.bss:0041783F                 db    ? ;
.bss:00417840                 db    ? ;
.bss:00417841                 db    ? ;
.bss:00417842                 db    ? ;
.bss:00417843                 db    ? ;
.bss:00417844                 db    ? ;
.bss:00417845                 db    ? ;
.bss:00417846                 db    ? ;
.bss:00417847                 db    ? ;
.bss:00417848                 db    ? ;
.bss:00417849                 db    ? ;
.bss:0041784A                 db    ? ;
.bss:0041784B                 db    ? ;
.bss:0041784C                 db    ? ;
.bss:0041784D                 db    ? ;
.bss:0041784E                 db    ? ;
.bss:0041784F                 db    ? ;
.bss:00417850                 db    ? ;
.bss:00417851                 db    ? ;
.bss:00417852                 db    ? ;
.bss:00417853                 db    ? ;
.bss:00417854                 db    ? ;
.bss:00417855                 db    ? ;
.bss:00417856                 db    ? ;
.bss:00417857                 db    ? ;
.bss:00417858                 db    ? ;
.bss:00417859                 db    ? ;
.bss:0041785A                 db    ? ;
.bss:0041785B                 db    ? ;
.bss:0041785C                 db    ? ;
.bss:0041785D                 db    ? ;
.bss:0041785E                 db    ? ;
.bss:0041785F                 db    ? ;
.bss:00417860                 db    ? ;
.bss:00417861                 db    ? ;
.bss:00417862                 db    ? ;
.bss:00417863                 db    ? ;
.bss:00417864                 db    ? ;
.bss:00417865                 db    ? ;
.bss:00417866                 db    ? ;
.bss:00417867                 db    ? ;
.bss:00417868                 db    ? ;
.bss:00417869                 db    ? ;
.bss:0041786A                 db    ? ;
.bss:0041786B                 db    ? ;
.bss:0041786C                 db    ? ;
.bss:0041786D                 db    ? ;
.bss:0041786E                 db    ? ;
.bss:0041786F                 db    ? ;
.bss:00417870                 db    ? ;
.bss:00417871                 db    ? ;
.bss:00417872                 db    ? ;
.bss:00417873                 db    ? ;
.bss:00417874                 db    ? ;
.bss:00417875                 db    ? ;
.bss:00417876                 db    ? ;
.bss:00417877                 db    ? ;
.bss:00417878                 db    ? ;
.bss:00417879                 db    ? ;
.bss:0041787A                 db    ? ;
.bss:0041787B                 db    ? ;
.bss:0041787C                 db    ? ;
.bss:0041787D                 db    ? ;
.bss:0041787E                 db    ? ;
.bss:0041787F                 db    ? ;
.bss:00417880                 db    ? ;
.bss:00417881                 db    ? ;
.bss:00417882                 db    ? ;
.bss:00417883                 db    ? ;
.bss:00417884                 db    ? ;
.bss:00417885                 db    ? ;
.bss:00417886                 db    ? ;
.bss:00417887                 db    ? ;
.bss:00417888                 db    ? ;
.bss:00417889                 db    ? ;
.bss:0041788A                 db    ? ;
.bss:0041788B                 db    ? ;
.bss:0041788C                 db    ? ;
.bss:0041788D                 db    ? ;
.bss:0041788E                 db    ? ;
.bss:0041788F                 db    ? ;
.bss:00417890                 db    ? ;
.bss:00417891                 db    ? ;
.bss:00417892                 db    ? ;
.bss:00417893                 db    ? ;
.bss:00417894                 db    ? ;
.bss:00417895                 db    ? ;
.bss:00417896                 db    ? ;
.bss:00417897                 db    ? ;
.bss:00417898                 db    ? ;
.bss:00417899                 db    ? ;
.bss:0041789A                 db    ? ;
.bss:0041789B                 db    ? ;
.bss:0041789C                 db    ? ;
.bss:0041789D                 db    ? ;
.bss:0041789E                 db    ? ;
.bss:0041789F                 db    ? ;
.bss:004178A0                 db    ? ;
.bss:004178A1                 db    ? ;
.bss:004178A2                 db    ? ;
.bss:004178A3                 db    ? ;
.bss:004178A4                 db    ? ;
.bss:004178A5                 db    ? ;
.bss:004178A6                 db    ? ;
.bss:004178A7                 db    ? ;
.bss:004178A8                 db    ? ;
.bss:004178A9                 db    ? ;
.bss:004178AA                 db    ? ;
.bss:004178AB                 db    ? ;
.bss:004178AC                 db    ? ;
.bss:004178AD                 db    ? ;
.bss:004178AE                 db    ? ;
.bss:004178AF                 db    ? ;
.bss:004178B0                 db    ? ;
.bss:004178B1                 db    ? ;
.bss:004178B2                 db    ? ;
.bss:004178B3                 db    ? ;
.bss:004178B4                 db    ? ;
.bss:004178B5                 db    ? ;
.bss:004178B6                 db    ? ;
.bss:004178B7                 db    ? ;
.bss:004178B8                 db    ? ;
.bss:004178B9                 db    ? ;
.bss:004178BA                 db    ? ;
.bss:004178BB                 db    ? ;
.bss:004178BC                 db    ? ;
.bss:004178BD                 db    ? ;
.bss:004178BE                 db    ? ;
.bss:004178BF                 db    ? ;
.bss:004178C0                 db    ? ;
.bss:004178C1                 db    ? ;
.bss:004178C2                 db    ? ;
.bss:004178C3                 db    ? ;
.bss:004178C4                 db    ? ;
.bss:004178C5                 db    ? ;
.bss:004178C6                 db    ? ;
.bss:004178C7                 db    ? ;
.bss:004178C8                 db    ? ;
.bss:004178C9                 db    ? ;
.bss:004178CA                 db    ? ;
.bss:004178CB                 db    ? ;
.bss:004178CC                 db    ? ;
.bss:004178CD                 db    ? ;
.bss:004178CE                 db    ? ;
.bss:004178CF                 db    ? ;
.bss:004178D0                 db    ? ;
.bss:004178D1                 db    ? ;
.bss:004178D2                 db    ? ;
.bss:004178D3                 db    ? ;
.bss:004178D4                 db    ? ;
.bss:004178D5                 db    ? ;
.bss:004178D6                 db    ? ;
.bss:004178D7                 db    ? ;
.bss:004178D8                 db    ? ;
.bss:004178D9                 db    ? ;
.bss:004178DA                 db    ? ;
.bss:004178DB                 db    ? ;
.bss:004178DC                 db    ? ;
.bss:004178DD                 db    ? ;
.bss:004178DE                 db    ? ;
.bss:004178DF                 db    ? ;
.bss:004178E0                 db    ? ;
.bss:004178E1                 db    ? ;
.bss:004178E2                 db    ? ;
.bss:004178E3                 db    ? ;
.bss:004178E4                 db    ? ;
.bss:004178E5                 db    ? ;
.bss:004178E6                 db    ? ;
.bss:004178E7                 db    ? ;
.bss:004178E8                 db    ? ;
.bss:004178E9                 db    ? ;
.bss:004178EA                 db    ? ;
.bss:004178EB                 db    ? ;
.bss:004178EC                 db    ? ;
.bss:004178ED                 db    ? ;
.bss:004178EE                 db    ? ;
.bss:004178EF                 db    ? ;
.bss:004178F0                 db    ? ;
.bss:004178F1                 db    ? ;
.bss:004178F2                 db    ? ;
.bss:004178F3                 db    ? ;
.bss:004178F4                 db    ? ;
.bss:004178F5                 db    ? ;
.bss:004178F6                 db    ? ;
.bss:004178F7                 db    ? ;
.bss:004178F8                 db    ? ;
.bss:004178F9                 db    ? ;
.bss:004178FA                 db    ? ;
.bss:004178FB                 db    ? ;
.bss:004178FC                 db    ? ;
.bss:004178FD                 db    ? ;
.bss:004178FE                 db    ? ;
.bss:004178FF                 db    ? ;
.bss:00417900                 db    ? ;
.bss:00417901                 db    ? ;
.bss:00417902                 db    ? ;
.bss:00417903                 db    ? ;
.bss:00417904                 db    ? ;
.bss:00417905                 db    ? ;
.bss:00417906                 db    ? ;
.bss:00417907                 db    ? ;
.bss:00417908                 db    ? ;
.bss:00417909                 db    ? ;
.bss:0041790A                 db    ? ;
.bss:0041790B                 db    ? ;
.bss:0041790C                 db    ? ;
.bss:0041790D                 db    ? ;
.bss:0041790E                 db    ? ;
.bss:0041790F                 db    ? ;
.bss:00417910                 db    ? ;
.bss:00417911                 db    ? ;
.bss:00417912                 db    ? ;
.bss:00417913                 db    ? ;
.bss:00417914                 db    ? ;
.bss:00417915                 db    ? ;
.bss:00417916                 db    ? ;
.bss:00417917                 db    ? ;
.bss:00417918                 db    ? ;
.bss:00417919                 db    ? ;
.bss:0041791A                 db    ? ;
.bss:0041791B                 db    ? ;
.bss:0041791C                 db    ? ;
.bss:0041791D                 db    ? ;
.bss:0041791E                 db    ? ;
.bss:0041791F                 db    ? ;
.bss:00417920                 db    ? ;
.bss:00417921                 db    ? ;
.bss:00417922                 db    ? ;
.bss:00417923                 db    ? ;
.bss:00417924                 db    ? ;
.bss:00417925                 db    ? ;
.bss:00417926                 db    ? ;
.bss:00417927                 db    ? ;
.bss:00417928                 db    ? ;
.bss:00417929                 db    ? ;
.bss:0041792A                 db    ? ;
.bss:0041792B                 db    ? ;
.bss:0041792C                 db    ? ;
.bss:0041792D                 db    ? ;
.bss:0041792E                 db    ? ;
.bss:0041792F                 db    ? ;
.bss:00417930                 db    ? ;
.bss:00417931                 db    ? ;
.bss:00417932                 db    ? ;
.bss:00417933                 db    ? ;
.bss:00417934                 db    ? ;
.bss:00417935                 db    ? ;
.bss:00417936                 db    ? ;
.bss:00417937                 db    ? ;
.bss:00417938                 db    ? ;
.bss:00417939                 db    ? ;
.bss:0041793A                 db    ? ;
.bss:0041793B                 db    ? ;
.bss:0041793C                 db    ? ;
.bss:0041793D                 db    ? ;
.bss:0041793E                 db    ? ;
.bss:0041793F                 db    ? ;
.bss:00417940                 db    ? ;
.bss:00417941                 db    ? ;
.bss:00417942                 db    ? ;
.bss:00417943                 db    ? ;
.bss:00417944                 db    ? ;
.bss:00417945                 db    ? ;
.bss:00417946                 db    ? ;
.bss:00417947                 db    ? ;
.bss:00417948                 db    ? ;
.bss:00417949                 db    ? ;
.bss:0041794A                 db    ? ;
.bss:0041794B                 db    ? ;
.bss:0041794C                 db    ? ;
.bss:0041794D                 db    ? ;
.bss:0041794E                 db    ? ;
.bss:0041794F                 db    ? ;
.bss:00417950                 db    ? ;
.bss:00417951                 db    ? ;
.bss:00417952                 db    ? ;
.bss:00417953                 db    ? ;
.bss:00417954                 db    ? ;
.bss:00417955                 db    ? ;
.bss:00417956                 db    ? ;
.bss:00417957                 db    ? ;
.bss:00417958                 db    ? ;
.bss:00417959                 db    ? ;
.bss:0041795A                 db    ? ;
.bss:0041795B                 db    ? ;
.bss:0041795C                 db    ? ;
.bss:0041795D                 db    ? ;
.bss:0041795E                 db    ? ;
.bss:0041795F                 db    ? ;
.bss:00417960                 db    ? ;
.bss:00417961                 db    ? ;
.bss:00417962                 db    ? ;
.bss:00417963                 db    ? ;
.bss:00417964                 db    ? ;
.bss:00417965                 db    ? ;
.bss:00417966                 db    ? ;
.bss:00417967                 db    ? ;
.bss:00417968                 db    ? ;
.bss:00417969                 db    ? ;
.bss:0041796A                 db    ? ;
.bss:0041796B                 db    ? ;
.bss:0041796C                 db    ? ;
.bss:0041796D                 db    ? ;
.bss:0041796E                 db    ? ;
.bss:0041796F                 db    ? ;
.bss:00417970                 db    ? ;
.bss:00417971                 db    ? ;
.bss:00417972                 db    ? ;
.bss:00417973                 db    ? ;
.bss:00417974                 db    ? ;
.bss:00417975                 db    ? ;
.bss:00417976                 db    ? ;
.bss:00417977                 db    ? ;
.bss:00417978                 db    ? ;
.bss:00417979                 db    ? ;
.bss:0041797A                 db    ? ;
.bss:0041797B                 db    ? ;
.bss:0041797C                 db    ? ;
.bss:0041797D                 db    ? ;
.bss:0041797E                 db    ? ;
.bss:0041797F                 db    ? ;
.bss:00417980                 db    ? ;
.bss:00417981                 db    ? ;
.bss:00417982                 db    ? ;
.bss:00417983                 db    ? ;
.bss:00417984                 db    ? ;
.bss:00417985                 db    ? ;
.bss:00417986                 db    ? ;
.bss:00417987                 db    ? ;
.bss:00417988                 db    ? ;
.bss:00417989                 db    ? ;
.bss:0041798A                 db    ? ;
.bss:0041798B                 db    ? ;
.bss:0041798C                 db    ? ;
.bss:0041798D                 db    ? ;
.bss:0041798E                 db    ? ;
.bss:0041798F                 db    ? ;
.bss:00417990                 db    ? ;
.bss:00417991                 db    ? ;
.bss:00417992                 db    ? ;
.bss:00417993                 db    ? ;
.bss:00417994                 db    ? ;
.bss:00417995                 db    ? ;
.bss:00417996                 db    ? ;
.bss:00417997                 db    ? ;
.bss:00417998                 db    ? ;
.bss:00417999                 db    ? ;
.bss:0041799A                 db    ? ;
.bss:0041799B                 db    ? ;
.bss:0041799C                 db    ? ;
.bss:0041799D                 db    ? ;
.bss:0041799E                 db    ? ;
.bss:0041799F                 db    ? ;
.bss:004179A0                 db    ? ;
.bss:004179A1                 db    ? ;
.bss:004179A2                 db    ? ;
.bss:004179A3                 db    ? ;
.bss:004179A4                 db    ? ;
.bss:004179A5                 db    ? ;
.bss:004179A6                 db    ? ;
.bss:004179A7                 db    ? ;
.bss:004179A8                 db    ? ;
.bss:004179A9                 db    ? ;
.bss:004179AA                 db    ? ;
.bss:004179AB                 db    ? ;
.bss:004179AC                 db    ? ;
.bss:004179AD                 db    ? ;
.bss:004179AE                 db    ? ;
.bss:004179AF                 db    ? ;
.bss:004179B0                 db    ? ;
.bss:004179B1                 db    ? ;
.bss:004179B2                 db    ? ;
.bss:004179B3                 db    ? ;
.bss:004179B4                 db    ? ;
.bss:004179B5                 db    ? ;
.bss:004179B6                 db    ? ;
.bss:004179B7                 db    ? ;
.bss:004179B8                 db    ? ;
.bss:004179B9                 db    ? ;
.bss:004179BA                 db    ? ;
.bss:004179BB                 db    ? ;
.bss:004179BC                 db    ? ;
.bss:004179BD                 db    ? ;
.bss:004179BE                 db    ? ;
.bss:004179BF                 db    ? ;
.bss:004179C0                 db    ? ;
.bss:004179C1                 db    ? ;
.bss:004179C2                 db    ? ;
.bss:004179C3                 db    ? ;
.bss:004179C4                 db    ? ;
.bss:004179C5                 db    ? ;
.bss:004179C6                 db    ? ;
.bss:004179C7                 db    ? ;
.bss:004179C8                 db    ? ;
.bss:004179C9                 db    ? ;
.bss:004179CA                 db    ? ;
.bss:004179CB                 db    ? ;
.bss:004179CC                 db    ? ;
.bss:004179CD                 db    ? ;
.bss:004179CE                 db    ? ;
.bss:004179CF                 db    ? ;
.bss:004179D0                 db    ? ;
.bss:004179D1                 db    ? ;
.bss:004179D2                 db    ? ;
.bss:004179D3                 db    ? ;
.bss:004179D4                 db    ? ;
.bss:004179D5                 db    ? ;
.bss:004179D6                 db    ? ;
.bss:004179D7                 db    ? ;
.bss:004179D8                 db    ? ;
.bss:004179D9                 db    ? ;
.bss:004179DA                 db    ? ;
.bss:004179DB                 db    ? ;
.bss:004179DC                 db    ? ;
.bss:004179DD                 db    ? ;
.bss:004179DE                 db    ? ;
.bss:004179DF                 db    ? ;
.bss:004179E0                 db    ? ;
.bss:004179E1                 db    ? ;
.bss:004179E2                 db    ? ;
.bss:004179E3                 db    ? ;
.bss:004179E4                 db    ? ;
.bss:004179E5                 db    ? ;
.bss:004179E6                 db    ? ;
.bss:004179E7                 db    ? ;
.bss:004179E8                 db    ? ;
.bss:004179E9                 db    ? ;
.bss:004179EA                 db    ? ;
.bss:004179EB                 db    ? ;
.bss:004179EC                 db    ? ;
.bss:004179ED                 db    ? ;
.bss:004179EE                 db    ? ;
.bss:004179EF                 db    ? ;
.bss:004179F0                 db    ? ;
.bss:004179F1                 db    ? ;
.bss:004179F2                 db    ? ;
.bss:004179F3                 db    ? ;
.bss:004179F4                 db    ? ;
.bss:004179F5                 db    ? ;
.bss:004179F6                 db    ? ;
.bss:004179F7                 db    ? ;
.bss:004179F8                 db    ? ;
.bss:004179F9                 db    ? ;
.bss:004179FA                 db    ? ;
.bss:004179FB                 db    ? ;
.bss:004179FC                 db    ? ;
.bss:004179FD                 db    ? ;
.bss:004179FE                 db    ? ;
.bss:004179FF                 db    ? ;
.bss:00417A00                 db    ? ;
.bss:00417A01                 db    ? ;
.bss:00417A02                 db    ? ;
.bss:00417A03                 db    ? ;
.bss:00417A04                 db    ? ;
.bss:00417A05                 db    ? ;
.bss:00417A06                 db    ? ;
.bss:00417A07                 db    ? ;
.bss:00417A08                 db    ? ;
.bss:00417A09                 db    ? ;
.bss:00417A0A                 db    ? ;
.bss:00417A0B                 db    ? ;
.bss:00417A0C                 db    ? ;
.bss:00417A0D                 db    ? ;
.bss:00417A0E                 db    ? ;
.bss:00417A0F                 db    ? ;
.bss:00417A10                 db    ? ;
.bss:00417A11                 db    ? ;
.bss:00417A12                 db    ? ;
.bss:00417A13                 db    ? ;
.bss:00417A14                 db    ? ;
.bss:00417A15                 db    ? ;
.bss:00417A16                 db    ? ;
.bss:00417A17                 db    ? ;
.bss:00417A18                 db    ? ;
.bss:00417A19                 db    ? ;
.bss:00417A1A                 db    ? ;
.bss:00417A1B                 db    ? ;
.bss:00417A1C                 db    ? ;
.bss:00417A1D                 db    ? ;
.bss:00417A1E                 db    ? ;
.bss:00417A1F                 db    ? ;
.bss:00417A20                 db    ? ;
.bss:00417A21                 db    ? ;
.bss:00417A22                 db    ? ;
.bss:00417A23                 db    ? ;
.bss:00417A24                 db    ? ;
.bss:00417A25                 db    ? ;
.bss:00417A26                 db    ? ;
.bss:00417A27                 db    ? ;
.bss:00417A28                 db    ? ;
.bss:00417A29                 db    ? ;
.bss:00417A2A                 db    ? ;
.bss:00417A2B                 db    ? ;
.bss:00417A2C                 db    ? ;
.bss:00417A2D                 db    ? ;
.bss:00417A2E                 db    ? ;
.bss:00417A2F                 db    ? ;
.bss:00417A30                 db    ? ;
.bss:00417A31                 db    ? ;
.bss:00417A32                 db    ? ;
.bss:00417A33                 db    ? ;
.bss:00417A34                 db    ? ;
.bss:00417A35                 db    ? ;
.bss:00417A36                 db    ? ;
.bss:00417A37                 db    ? ;
.bss:00417A38                 db    ? ;
.bss:00417A39                 db    ? ;
.bss:00417A3A                 db    ? ;
.bss:00417A3B                 db    ? ;
.bss:00417A3C                 db    ? ;
.bss:00417A3D                 db    ? ;
.bss:00417A3E                 db    ? ;
.bss:00417A3F                 db    ? ;
.bss:00417A40                 db    ? ;
.bss:00417A41                 db    ? ;
.bss:00417A42                 db    ? ;
.bss:00417A43                 db    ? ;
.bss:00417A44                 db    ? ;
.bss:00417A45                 db    ? ;
.bss:00417A46                 db    ? ;
.bss:00417A47                 db    ? ;
.bss:00417A48                 db    ? ;
.bss:00417A49                 db    ? ;
.bss:00417A4A                 db    ? ;
.bss:00417A4B                 db    ? ;
.bss:00417A4C                 db    ? ;
.bss:00417A4D                 db    ? ;
.bss:00417A4E                 db    ? ;
.bss:00417A4F                 db    ? ;
.bss:00417A50                 db    ? ;
.bss:00417A51                 db    ? ;
.bss:00417A52                 db    ? ;
.bss:00417A53                 db    ? ;
.bss:00417A54                 db    ? ;
.bss:00417A55                 db    ? ;
.bss:00417A56                 db    ? ;
.bss:00417A57                 db    ? ;
.bss:00417A58                 db    ? ;
.bss:00417A59                 db    ? ;
.bss:00417A5A                 db    ? ;
.bss:00417A5B                 db    ? ;
.bss:00417A5C                 db    ? ;
.bss:00417A5D                 db    ? ;
.bss:00417A5E                 db    ? ;
.bss:00417A5F                 db    ? ;
.bss:00417A60                 db    ? ;
.bss:00417A61                 db    ? ;
.bss:00417A62                 db    ? ;
.bss:00417A63                 db    ? ;
.bss:00417A64                 db    ? ;
.bss:00417A65                 db    ? ;
.bss:00417A66                 db    ? ;
.bss:00417A67                 db    ? ;
.bss:00417A68                 db    ? ;
.bss:00417A69                 db    ? ;
.bss:00417A6A                 db    ? ;
.bss:00417A6B                 db    ? ;
.bss:00417A6C                 db    ? ;
.bss:00417A6D                 db    ? ;
.bss:00417A6E                 db    ? ;
.bss:00417A6F                 db    ? ;
.bss:00417A70                 db    ? ;
.bss:00417A71                 db    ? ;
.bss:00417A72                 db    ? ;
.bss:00417A73                 db    ? ;
.bss:00417A74                 db    ? ;
.bss:00417A75                 db    ? ;
.bss:00417A76                 db    ? ;
.bss:00417A77                 db    ? ;
.bss:00417A78                 db    ? ;
.bss:00417A79                 db    ? ;
.bss:00417A7A                 db    ? ;
.bss:00417A7B                 db    ? ;
.bss:00417A7C                 db    ? ;
.bss:00417A7D                 db    ? ;
.bss:00417A7E                 db    ? ;
.bss:00417A7F                 db    ? ;
.bss:00417A80                 db    ? ;
.bss:00417A81                 db    ? ;
.bss:00417A82                 db    ? ;
.bss:00417A83                 db    ? ;
.bss:00417A84                 db    ? ;
.bss:00417A85                 db    ? ;
.bss:00417A86                 db    ? ;
.bss:00417A87                 db    ? ;
.bss:00417A88                 db    ? ;
.bss:00417A89                 db    ? ;
.bss:00417A8A                 db    ? ;
.bss:00417A8B                 db    ? ;
.bss:00417A8C                 db    ? ;
.bss:00417A8D                 db    ? ;
.bss:00417A8E                 db    ? ;
.bss:00417A8F                 db    ? ;
.bss:00417A90                 db    ? ;
.bss:00417A91                 db    ? ;
.bss:00417A92                 db    ? ;
.bss:00417A93                 db    ? ;
.bss:00417A94                 db    ? ;
.bss:00417A95                 db    ? ;
.bss:00417A96                 db    ? ;
.bss:00417A97                 db    ? ;
.bss:00417A98                 db    ? ;
.bss:00417A99                 db    ? ;
.bss:00417A9A                 db    ? ;
.bss:00417A9B                 db    ? ;
.bss:00417A9C                 db    ? ;
.bss:00417A9D                 db    ? ;
.bss:00417A9E                 db    ? ;
.bss:00417A9F                 db    ? ;
.bss:00417AA0                 db    ? ;
.bss:00417AA1                 db    ? ;
.bss:00417AA2                 db    ? ;
.bss:00417AA3                 db    ? ;
.bss:00417AA4                 db    ? ;
.bss:00417AA5                 db    ? ;
.bss:00417AA6                 db    ? ;
.bss:00417AA7                 db    ? ;
.bss:00417AA8                 db    ? ;
.bss:00417AA9                 db    ? ;
.bss:00417AAA                 db    ? ;
.bss:00417AAB                 db    ? ;
.bss:00417AAC                 db    ? ;
.bss:00417AAD                 db    ? ;
.bss:00417AAE                 db    ? ;
.bss:00417AAF                 db    ? ;
.bss:00417AB0                 db    ? ;
.bss:00417AB1                 db    ? ;
.bss:00417AB2                 db    ? ;
.bss:00417AB3                 db    ? ;
.bss:00417AB4                 db    ? ;
.bss:00417AB5                 db    ? ;
.bss:00417AB6                 db    ? ;
.bss:00417AB7                 db    ? ;
.bss:00417AB8                 db    ? ;
.bss:00417AB9                 db    ? ;
.bss:00417ABA                 db    ? ;
.bss:00417ABB                 db    ? ;
.bss:00417ABC                 db    ? ;
.bss:00417ABD                 db    ? ;
.bss:00417ABE                 db    ? ;
.bss:00417ABF                 db    ? ;
.bss:00417AC0                 db    ? ;
.bss:00417AC1                 db    ? ;
.bss:00417AC2                 db    ? ;
.bss:00417AC3                 db    ? ;
.bss:00417AC4                 db    ? ;
.bss:00417AC5                 db    ? ;
.bss:00417AC6                 db    ? ;
.bss:00417AC7                 db    ? ;
.bss:00417AC8                 db    ? ;
.bss:00417AC9                 db    ? ;
.bss:00417ACA                 db    ? ;
.bss:00417ACB                 db    ? ;
.bss:00417ACC                 db    ? ;
.bss:00417ACD                 db    ? ;
.bss:00417ACE                 db    ? ;
.bss:00417ACF                 db    ? ;
.bss:00417AD0                 db    ? ;
.bss:00417AD1                 db    ? ;
.bss:00417AD2                 db    ? ;
.bss:00417AD3                 db    ? ;
.bss:00417AD4                 db    ? ;
.bss:00417AD5                 db    ? ;
.bss:00417AD6                 db    ? ;
.bss:00417AD7                 db    ? ;
.bss:00417AD8                 db    ? ;
.bss:00417AD9                 db    ? ;
.bss:00417ADA                 db    ? ;
.bss:00417ADB                 db    ? ;
.bss:00417ADC                 db    ? ;
.bss:00417ADD                 db    ? ;
.bss:00417ADE                 db    ? ;
.bss:00417ADF                 db    ? ;
.bss:00417AE0                 db    ? ;
.bss:00417AE1                 db    ? ;
.bss:00417AE2                 db    ? ;
.bss:00417AE3                 db    ? ;
.bss:00417AE4                 db    ? ;
.bss:00417AE5                 db    ? ;
.bss:00417AE6                 db    ? ;
.bss:00417AE7                 db    ? ;
.bss:00417AE8                 db    ? ;
.bss:00417AE9                 db    ? ;
.bss:00417AEA                 db    ? ;
.bss:00417AEB                 db    ? ;
.bss:00417AEC                 db    ? ;
.bss:00417AED                 db    ? ;
.bss:00417AEE                 db    ? ;
.bss:00417AEF                 db    ? ;
.bss:00417AF0                 db    ? ;
.bss:00417AF1                 db    ? ;
.bss:00417AF2                 db    ? ;
.bss:00417AF3                 db    ? ;
.bss:00417AF4                 db    ? ;
.bss:00417AF5                 db    ? ;
.bss:00417AF6                 db    ? ;
.bss:00417AF7                 db    ? ;
.bss:00417AF8                 db    ? ;
.bss:00417AF9                 db    ? ;
.bss:00417AFA                 db    ? ;
.bss:00417AFB                 db    ? ;
.bss:00417AFC                 db    ? ;
.bss:00417AFD                 db    ? ;
.bss:00417AFE                 db    ? ;
.bss:00417AFF                 db    ? ;
.bss:00417B00                 db    ? ;
.bss:00417B01                 db    ? ;
.bss:00417B02                 db    ? ;
.bss:00417B03                 db    ? ;
.bss:00417B04                 db    ? ;
.bss:00417B05                 db    ? ;
.bss:00417B06                 db    ? ;
.bss:00417B07                 db    ? ;
.bss:00417B08                 db    ? ;
.bss:00417B09                 db    ? ;
.bss:00417B0A                 db    ? ;
.bss:00417B0B                 db    ? ;
.bss:00417B0C                 db    ? ;
.bss:00417B0D                 db    ? ;
.bss:00417B0E                 db    ? ;
.bss:00417B0F                 db    ? ;
.bss:00417B10                 db    ? ;
.bss:00417B11                 db    ? ;
.bss:00417B12                 db    ? ;
.bss:00417B13                 db    ? ;
.bss:00417B14                 db    ? ;
.bss:00417B15                 db    ? ;
.bss:00417B16                 db    ? ;
.bss:00417B17                 db    ? ;
.bss:00417B18                 db    ? ;
.bss:00417B19                 db    ? ;
.bss:00417B1A                 db    ? ;
.bss:00417B1B                 db    ? ;
.bss:00417B1C                 db    ? ;
.bss:00417B1D                 db    ? ;
.bss:00417B1E                 db    ? ;
.bss:00417B1F                 db    ? ;
.bss:00417B20                 db    ? ;
.bss:00417B21                 db    ? ;
.bss:00417B22                 db    ? ;
.bss:00417B23                 db    ? ;
.bss:00417B24                 db    ? ;
.bss:00417B25                 db    ? ;
.bss:00417B26                 db    ? ;
.bss:00417B27                 db    ? ;
.bss:00417B28                 db    ? ;
.bss:00417B29                 db    ? ;
.bss:00417B2A                 db    ? ;
.bss:00417B2B                 db    ? ;
.bss:00417B2C                 db    ? ;
.bss:00417B2D                 db    ? ;
.bss:00417B2E                 db    ? ;
.bss:00417B2F                 db    ? ;
.bss:00417B30                 db    ? ;
.bss:00417B31                 db    ? ;
.bss:00417B32                 db    ? ;
.bss:00417B33                 db    ? ;
.bss:00417B34                 db    ? ;
.bss:00417B35                 db    ? ;
.bss:00417B36                 db    ? ;
.bss:00417B37                 db    ? ;
.bss:00417B38                 db    ? ;
.bss:00417B39                 db    ? ;
.bss:00417B3A                 db    ? ;
.bss:00417B3B                 db    ? ;
.bss:00417B3C                 db    ? ;
.bss:00417B3D                 db    ? ;
.bss:00417B3E                 db    ? ;
.bss:00417B3F                 db    ? ;
.bss:00417B40                 db    ? ;
.bss:00417B41                 db    ? ;
.bss:00417B42                 db    ? ;
.bss:00417B43                 db    ? ;
.bss:00417B44                 db    ? ;
.bss:00417B45                 db    ? ;
.bss:00417B46                 db    ? ;
.bss:00417B47                 db    ? ;
.bss:00417B48                 db    ? ;
.bss:00417B49                 db    ? ;
.bss:00417B4A                 db    ? ;
.bss:00417B4B                 db    ? ;
.bss:00417B4C                 db    ? ;
.bss:00417B4D                 db    ? ;
.bss:00417B4E                 db    ? ;
.bss:00417B4F                 db    ? ;
.bss:00417B50                 db    ? ;
.bss:00417B51                 db    ? ;
.bss:00417B52                 db    ? ;
.bss:00417B53                 db    ? ;
.bss:00417B54                 db    ? ;
.bss:00417B55                 db    ? ;
.bss:00417B56                 db    ? ;
.bss:00417B57                 db    ? ;
.bss:00417B58                 db    ? ;
.bss:00417B59                 db    ? ;
.bss:00417B5A                 db    ? ;
.bss:00417B5B                 db    ? ;
.bss:00417B5C                 db    ? ;
.bss:00417B5D                 db    ? ;
.bss:00417B5E                 db    ? ;
.bss:00417B5F                 db    ? ;
.bss:00417B60                 db    ? ;
.bss:00417B61                 db    ? ;
.bss:00417B62                 db    ? ;
.bss:00417B63                 db    ? ;
.bss:00417B64                 db    ? ;
.bss:00417B65                 db    ? ;
.bss:00417B66                 db    ? ;
.bss:00417B67                 db    ? ;
.bss:00417B68                 db    ? ;
.bss:00417B69                 db    ? ;
.bss:00417B6A                 db    ? ;
.bss:00417B6B                 db    ? ;
.bss:00417B6C                 db    ? ;
.bss:00417B6D                 db    ? ;
.bss:00417B6E                 db    ? ;
.bss:00417B6F                 db    ? ;
.bss:00417B70                 db    ? ;
.bss:00417B71                 db    ? ;
.bss:00417B72                 db    ? ;
.bss:00417B73                 db    ? ;
.bss:00417B74                 db    ? ;
.bss:00417B75                 db    ? ;
.bss:00417B76                 db    ? ;
.bss:00417B77                 db    ? ;
.bss:00417B78                 db    ? ;
.bss:00417B79                 db    ? ;
.bss:00417B7A                 db    ? ;
.bss:00417B7B                 db    ? ;
.bss:00417B7C                 db    ? ;
.bss:00417B7D                 db    ? ;
.bss:00417B7E                 db    ? ;
.bss:00417B7F                 db    ? ;
.bss:00417B80                 db    ? ;
.bss:00417B81                 db    ? ;
.bss:00417B82                 db    ? ;
.bss:00417B83                 db    ? ;
.bss:00417B84                 db    ? ;
.bss:00417B85                 db    ? ;
.bss:00417B86                 db    ? ;
.bss:00417B87                 db    ? ;
.bss:00417B88                 db    ? ;
.bss:00417B89                 db    ? ;
.bss:00417B8A                 db    ? ;
.bss:00417B8B                 db    ? ;
.bss:00417B8C                 db    ? ;
.bss:00417B8D                 db    ? ;
.bss:00417B8E                 db    ? ;
.bss:00417B8F                 db    ? ;
.bss:00417B90                 db    ? ;
.bss:00417B91                 db    ? ;
.bss:00417B92                 db    ? ;
.bss:00417B93                 db    ? ;
.bss:00417B94                 db    ? ;
.bss:00417B95                 db    ? ;
.bss:00417B96                 db    ? ;
.bss:00417B97                 db    ? ;
.bss:00417B98                 db    ? ;
.bss:00417B99                 db    ? ;
.bss:00417B9A                 db    ? ;
.bss:00417B9B                 db    ? ;
.bss:00417B9C                 db    ? ;
.bss:00417B9D                 db    ? ;
.bss:00417B9E                 db    ? ;
.bss:00417B9F                 db    ? ;
.bss:00417BA0                 db    ? ;
.bss:00417BA1                 db    ? ;
.bss:00417BA2                 db    ? ;
.bss:00417BA3                 db    ? ;
.bss:00417BA4                 db    ? ;
.bss:00417BA5                 db    ? ;
.bss:00417BA6                 db    ? ;
.bss:00417BA7                 db    ? ;
.bss:00417BA8                 db    ? ;
.bss:00417BA9                 db    ? ;
.bss:00417BAA                 db    ? ;
.bss:00417BAB                 db    ? ;
.bss:00417BAC                 db    ? ;
.bss:00417BAD                 db    ? ;
.bss:00417BAE                 db    ? ;
.bss:00417BAF                 db    ? ;
.bss:00417BB0                 db    ? ;
.bss:00417BB1                 db    ? ;
.bss:00417BB2                 db    ? ;
.bss:00417BB3                 db    ? ;
.bss:00417BB4                 db    ? ;
.bss:00417BB5                 db    ? ;
.bss:00417BB6                 db    ? ;
.bss:00417BB7                 db    ? ;
.bss:00417BB8                 db    ? ;
.bss:00417BB9                 db    ? ;
.bss:00417BBA                 db    ? ;
.bss:00417BBB                 db    ? ;
.bss:00417BBC                 db    ? ;
.bss:00417BBD                 db    ? ;
.bss:00417BBE                 db    ? ;
.bss:00417BBF                 db    ? ;
.bss:00417BC0                 db    ? ;
.bss:00417BC1                 db    ? ;
.bss:00417BC2                 db    ? ;
.bss:00417BC3                 db    ? ;
.bss:00417BC4                 db    ? ;
.bss:00417BC5                 db    ? ;
.bss:00417BC6                 db    ? ;
.bss:00417BC7                 db    ? ;
.bss:00417BC8                 db    ? ;
.bss:00417BC9                 db    ? ;
.bss:00417BCA                 db    ? ;
.bss:00417BCB                 db    ? ;
.bss:00417BCC                 db    ? ;
.bss:00417BCD                 db    ? ;
.bss:00417BCE                 db    ? ;
.bss:00417BCF                 db    ? ;
.bss:00417BD0                 db    ? ;
.bss:00417BD1                 db    ? ;
.bss:00417BD2                 db    ? ;
.bss:00417BD3                 db    ? ;
.bss:00417BD4                 db    ? ;
.bss:00417BD5                 db    ? ;
.bss:00417BD6                 db    ? ;
.bss:00417BD7                 db    ? ;
.bss:00417BD8                 db    ? ;
.bss:00417BD9                 db    ? ;
.bss:00417BDA                 db    ? ;
.bss:00417BDB                 db    ? ;
.bss:00417BDC                 db    ? ;
.bss:00417BDD                 db    ? ;
.bss:00417BDE                 db    ? ;
.bss:00417BDF                 db    ? ;
.bss:00417BE0                 db    ? ;
.bss:00417BE1                 db    ? ;
.bss:00417BE2                 db    ? ;
.bss:00417BE3                 db    ? ;
.bss:00417BE4                 db    ? ;
.bss:00417BE5                 db    ? ;
.bss:00417BE6                 db    ? ;
.bss:00417BE7                 db    ? ;
.bss:00417BE8                 db    ? ;
.bss:00417BE9                 db    ? ;
.bss:00417BEA                 db    ? ;
.bss:00417BEB                 db    ? ;
.bss:00417BEC                 db    ? ;
.bss:00417BED                 db    ? ;
.bss:00417BEE                 db    ? ;
.bss:00417BEF                 db    ? ;
.bss:00417BF0                 db    ? ;
.bss:00417BF1                 db    ? ;
.bss:00417BF2                 db    ? ;
.bss:00417BF3                 db    ? ;
.bss:00417BF4                 db    ? ;
.bss:00417BF5                 db    ? ;
.bss:00417BF6                 db    ? ;
.bss:00417BF7                 db    ? ;
.bss:00417BF8                 db    ? ;
.bss:00417BF9                 db    ? ;
.bss:00417BFA                 db    ? ;
.bss:00417BFB                 db    ? ;
.bss:00417BFC                 db    ? ;
.bss:00417BFD                 db    ? ;
.bss:00417BFE                 db    ? ;
.bss:00417BFF                 db    ? ;
.bss:00417C00                 db    ? ;
.bss:00417C01                 db    ? ;
.bss:00417C02                 db    ? ;
.bss:00417C03                 db    ? ;
.bss:00417C04                 db    ? ;
.bss:00417C05                 db    ? ;
.bss:00417C06                 db    ? ;
.bss:00417C07                 db    ? ;
.bss:00417C08                 db    ? ;
.bss:00417C09                 db    ? ;
.bss:00417C0A                 db    ? ;
.bss:00417C0B                 db    ? ;
.bss:00417C0C                 db    ? ;
.bss:00417C0D                 db    ? ;
.bss:00417C0E                 db    ? ;
.bss:00417C0F                 db    ? ;
.bss:00417C10                 db    ? ;
.bss:00417C11                 db    ? ;
.bss:00417C12                 db    ? ;
.bss:00417C13                 db    ? ;
.bss:00417C14                 db    ? ;
.bss:00417C15                 db    ? ;
.bss:00417C16                 db    ? ;
.bss:00417C17                 db    ? ;
.bss:00417C18                 db    ? ;
.bss:00417C19                 db    ? ;
.bss:00417C1A                 db    ? ;
.bss:00417C1B                 db    ? ;
.bss:00417C1C                 db    ? ;
.bss:00417C1D                 db    ? ;
.bss:00417C1E                 db    ? ;
.bss:00417C1F                 db    ? ;
.bss:00417C20                 db    ? ;
.bss:00417C21                 db    ? ;
.bss:00417C22                 db    ? ;
.bss:00417C23                 db    ? ;
.bss:00417C24                 db    ? ;
.bss:00417C25                 db    ? ;
.bss:00417C26                 db    ? ;
.bss:00417C27                 db    ? ;
.bss:00417C28                 db    ? ;
.bss:00417C29                 db    ? ;
.bss:00417C2A                 db    ? ;
.bss:00417C2B                 db    ? ;
.bss:00417C2C                 db    ? ;
.bss:00417C2D                 db    ? ;
.bss:00417C2E                 db    ? ;
.bss:00417C2F                 db    ? ;
.bss:00417C30                 db    ? ;
.bss:00417C31                 db    ? ;
.bss:00417C32                 db    ? ;
.bss:00417C33                 db    ? ;
.bss:00417C34                 db    ? ;
.bss:00417C35                 db    ? ;
.bss:00417C36                 db    ? ;
.bss:00417C37                 db    ? ;
.bss:00417C38                 db    ? ;
.bss:00417C39                 db    ? ;
.bss:00417C3A                 db    ? ;
.bss:00417C3B                 db    ? ;
.bss:00417C3C                 db    ? ;
.bss:00417C3D                 db    ? ;
.bss:00417C3E                 db    ? ;
.bss:00417C3F                 db    ? ;
.bss:00417C40                 db    ? ;
.bss:00417C41                 db    ? ;
.bss:00417C42                 db    ? ;
.bss:00417C43                 db    ? ;
.bss:00417C44                 db    ? ;
.bss:00417C45                 db    ? ;
.bss:00417C46                 db    ? ;
.bss:00417C47                 db    ? ;
.bss:00417C48                 db    ? ;
.bss:00417C49                 db    ? ;
.bss:00417C4A                 db    ? ;
.bss:00417C4B                 db    ? ;
.bss:00417C4C                 db    ? ;
.bss:00417C4D                 db    ? ;
.bss:00417C4E                 db    ? ;
.bss:00417C4F                 db    ? ;
.bss:00417C50                 db    ? ;
.bss:00417C51                 db    ? ;
.bss:00417C52                 db    ? ;
.bss:00417C53                 db    ? ;
.bss:00417C54                 db    ? ;
.bss:00417C55                 db    ? ;
.bss:00417C56                 db    ? ;
.bss:00417C57                 db    ? ;
.bss:00417C58                 db    ? ;
.bss:00417C59                 db    ? ;
.bss:00417C5A                 db    ? ;
.bss:00417C5B                 db    ? ;
.bss:00417C5C                 db    ? ;
.bss:00417C5D                 db    ? ;
.bss:00417C5E                 db    ? ;
.bss:00417C5F                 db    ? ;
.bss:00417C60                 db    ? ;
.bss:00417C61                 db    ? ;
.bss:00417C62                 db    ? ;
.bss:00417C63                 db    ? ;
.bss:00417C64                 db    ? ;
.bss:00417C65                 db    ? ;
.bss:00417C66                 db    ? ;
.bss:00417C67                 db    ? ;
.bss:00417C68                 db    ? ;
.bss:00417C69                 db    ? ;
.bss:00417C6A                 db    ? ;
.bss:00417C6B                 db    ? ;
.bss:00417C6C                 db    ? ;
.bss:00417C6D                 db    ? ;
.bss:00417C6E                 db    ? ;
.bss:00417C6F                 db    ? ;
.bss:00417C70                 db    ? ;
.bss:00417C71                 db    ? ;
.bss:00417C72                 db    ? ;
.bss:00417C73                 db    ? ;
.bss:00417C74                 db    ? ;
.bss:00417C75                 db    ? ;
.bss:00417C76                 db    ? ;
.bss:00417C77                 db    ? ;
.bss:00417C78                 db    ? ;
.bss:00417C79                 db    ? ;
.bss:00417C7A                 db    ? ;
.bss:00417C7B                 db    ? ;
.bss:00417C7C                 db    ? ;
.bss:00417C7D                 db    ? ;
.bss:00417C7E                 db    ? ;
.bss:00417C7F                 db    ? ;
.bss:00417C80                 db    ? ;
.bss:00417C81                 db    ? ;
.bss:00417C82                 db    ? ;
.bss:00417C83                 db    ? ;
.bss:00417C84                 db    ? ;
.bss:00417C85                 db    ? ;
.bss:00417C86                 db    ? ;
.bss:00417C87                 db    ? ;
.bss:00417C88                 db    ? ;
.bss:00417C89                 db    ? ;
.bss:00417C8A                 db    ? ;
.bss:00417C8B                 db    ? ;
.bss:00417C8C                 db    ? ;
.bss:00417C8D                 db    ? ;
.bss:00417C8E                 db    ? ;
.bss:00417C8F                 db    ? ;
.bss:00417C90                 db    ? ;
.bss:00417C91                 db    ? ;
.bss:00417C92                 db    ? ;
.bss:00417C93                 db    ? ;
.bss:00417C94                 db    ? ;
.bss:00417C95                 db    ? ;
.bss:00417C96                 db    ? ;
.bss:00417C97                 db    ? ;
.bss:00417C98                 db    ? ;
.bss:00417C99                 db    ? ;
.bss:00417C9A                 db    ? ;
.bss:00417C9B                 db    ? ;
.bss:00417C9C                 db    ? ;
.bss:00417C9D                 db    ? ;
.bss:00417C9E                 db    ? ;
.bss:00417C9F                 db    ? ;
.bss:00417CA0                 db    ? ;
.bss:00417CA1                 db    ? ;
.bss:00417CA2                 db    ? ;
.bss:00417CA3                 db    ? ;
.bss:00417CA4                 db    ? ;
.bss:00417CA5                 db    ? ;
.bss:00417CA6                 db    ? ;
.bss:00417CA7                 db    ? ;
.bss:00417CA8                 db    ? ;
.bss:00417CA9                 db    ? ;
.bss:00417CAA                 db    ? ;
.bss:00417CAB                 db    ? ;
.bss:00417CAC                 db    ? ;
.bss:00417CAD                 db    ? ;
.bss:00417CAE                 db    ? ;
.bss:00417CAF                 db    ? ;
.bss:00417CB0                 db    ? ;
.bss:00417CB1                 db    ? ;
.bss:00417CB2                 db    ? ;
.bss:00417CB3                 db    ? ;
.bss:00417CB4                 db    ? ;
.bss:00417CB5                 db    ? ;
.bss:00417CB6                 db    ? ;
.bss:00417CB7                 db    ? ;
.bss:00417CB8                 db    ? ;
.bss:00417CB9                 db    ? ;
.bss:00417CBA                 db    ? ;
.bss:00417CBB                 db    ? ;
.bss:00417CBC                 db    ? ;
.bss:00417CBD                 db    ? ;
.bss:00417CBE                 db    ? ;
.bss:00417CBF                 db    ? ;
.bss:00417CC0                 db    ? ;
.bss:00417CC1                 db    ? ;
.bss:00417CC2                 db    ? ;
.bss:00417CC3                 db    ? ;
.bss:00417CC4                 db    ? ;
.bss:00417CC5                 db    ? ;
.bss:00417CC6                 db    ? ;
.bss:00417CC7                 db    ? ;
.bss:00417CC8                 db    ? ;
.bss:00417CC9                 db    ? ;
.bss:00417CCA                 db    ? ;
.bss:00417CCB                 db    ? ;
.bss:00417CCC                 db    ? ;
.bss:00417CCD                 db    ? ;
.bss:00417CCE                 db    ? ;
.bss:00417CCF                 db    ? ;
.bss:00417CD0                 db    ? ;
.bss:00417CD1                 db    ? ;
.bss:00417CD2                 db    ? ;
.bss:00417CD3                 db    ? ;
.bss:00417CD4                 db    ? ;
.bss:00417CD5                 db    ? ;
.bss:00417CD6                 db    ? ;
.bss:00417CD7                 db    ? ;
.bss:00417CD8                 db    ? ;
.bss:00417CD9                 db    ? ;
.bss:00417CDA                 db    ? ;
.bss:00417CDB                 db    ? ;
.bss:00417CDC                 db    ? ;
.bss:00417CDD                 db    ? ;
.bss:00417CDE                 db    ? ;
.bss:00417CDF                 db    ? ;
.bss:00417CE0                 db    ? ;
.bss:00417CE1                 db    ? ;
.bss:00417CE2                 db    ? ;
.bss:00417CE3                 db    ? ;
.bss:00417CE4                 db    ? ;
.bss:00417CE5                 db    ? ;
.bss:00417CE6                 db    ? ;
.bss:00417CE7                 db    ? ;
.bss:00417CE8                 db    ? ;
.bss:00417CE9                 db    ? ;
.bss:00417CEA                 db    ? ;
.bss:00417CEB                 db    ? ;
.bss:00417CEC                 db    ? ;
.bss:00417CED                 db    ? ;
.bss:00417CEE                 db    ? ;
.bss:00417CEF                 db    ? ;
.bss:00417CF0                 db    ? ;
.bss:00417CF1                 db    ? ;
.bss:00417CF2                 db    ? ;
.bss:00417CF3                 db    ? ;
.bss:00417CF4                 db    ? ;
.bss:00417CF5                 db    ? ;
.bss:00417CF6                 db    ? ;
.bss:00417CF7                 db    ? ;
.bss:00417CF8                 db    ? ;
.bss:00417CF9                 db    ? ;
.bss:00417CFA                 db    ? ;
.bss:00417CFB                 db    ? ;
.bss:00417CFC                 db    ? ;
.bss:00417CFD                 db    ? ;
.bss:00417CFE                 db    ? ;
.bss:00417CFF                 db    ? ;
.bss:00417D00                 db    ? ;
.bss:00417D01                 db    ? ;
.bss:00417D02                 db    ? ;
.bss:00417D03                 db    ? ;
.bss:00417D04                 db    ? ;
.bss:00417D05                 db    ? ;
.bss:00417D06                 db    ? ;
.bss:00417D07                 db    ? ;
.bss:00417D08                 db    ? ;
.bss:00417D09                 db    ? ;
.bss:00417D0A                 db    ? ;
.bss:00417D0B                 db    ? ;
.bss:00417D0C                 db    ? ;
.bss:00417D0D                 db    ? ;
.bss:00417D0E                 db    ? ;
.bss:00417D0F                 db    ? ;
.bss:00417D10                 db    ? ;
.bss:00417D11                 db    ? ;
.bss:00417D12                 db    ? ;
.bss:00417D13                 db    ? ;
.bss:00417D14                 db    ? ;
.bss:00417D15                 db    ? ;
.bss:00417D16                 db    ? ;
.bss:00417D17                 db    ? ;
.bss:00417D18                 db    ? ;
.bss:00417D19                 db    ? ;
.bss:00417D1A                 db    ? ;
.bss:00417D1B                 db    ? ;
.bss:00417D1C                 db    ? ;
.bss:00417D1D                 db    ? ;
.bss:00417D1E                 db    ? ;
.bss:00417D1F                 db    ? ;
.bss:00417D20                 db    ? ;
.bss:00417D21                 db    ? ;
.bss:00417D22                 db    ? ;
.bss:00417D23                 db    ? ;
.bss:00417D24                 db    ? ;
.bss:00417D25                 db    ? ;
.bss:00417D26                 db    ? ;
.bss:00417D27                 db    ? ;
.bss:00417D28                 db    ? ;
.bss:00417D29                 db    ? ;
.bss:00417D2A                 db    ? ;
.bss:00417D2B                 db    ? ;
.bss:00417D2C                 db    ? ;
.bss:00417D2D                 db    ? ;
.bss:00417D2E                 db    ? ;
.bss:00417D2F                 db    ? ;
.bss:00417D30                 db    ? ;
.bss:00417D31                 db    ? ;
.bss:00417D32                 db    ? ;
.bss:00417D33                 db    ? ;
.bss:00417D34                 db    ? ;
.bss:00417D35                 db    ? ;
.bss:00417D36                 db    ? ;
.bss:00417D37                 db    ? ;
.bss:00417D38                 db    ? ;
.bss:00417D39                 db    ? ;
.bss:00417D3A                 db    ? ;
.bss:00417D3B                 db    ? ;
.bss:00417D3C                 db    ? ;
.bss:00417D3D                 db    ? ;
.bss:00417D3E                 db    ? ;
.bss:00417D3F                 db    ? ;
.bss:00417D40                 db    ? ;
.bss:00417D41                 db    ? ;
.bss:00417D42                 db    ? ;
.bss:00417D43                 db    ? ;
.bss:00417D44                 db    ? ;
.bss:00417D45                 db    ? ;
.bss:00417D46                 db    ? ;
.bss:00417D47                 db    ? ;
.bss:00417D48                 db    ? ;
.bss:00417D49                 db    ? ;
.bss:00417D4A                 db    ? ;
.bss:00417D4B                 db    ? ;
.bss:00417D4C                 db    ? ;
.bss:00417D4D                 db    ? ;
.bss:00417D4E                 db    ? ;
.bss:00417D4F                 db    ? ;
.bss:00417D50                 db    ? ;
.bss:00417D51                 db    ? ;
.bss:00417D52                 db    ? ;
.bss:00417D53                 db    ? ;
.bss:00417D54                 db    ? ;
.bss:00417D55                 db    ? ;
.bss:00417D56                 db    ? ;
.bss:00417D57                 db    ? ;
.bss:00417D58                 db    ? ;
.bss:00417D59                 db    ? ;
.bss:00417D5A                 db    ? ;
.bss:00417D5B                 db    ? ;
.bss:00417D5C                 db    ? ;
.bss:00417D5D                 db    ? ;
.bss:00417D5E                 db    ? ;
.bss:00417D5F                 db    ? ;
.bss:00417D60                 db    ? ;
.bss:00417D61                 db    ? ;
.bss:00417D62                 db    ? ;
.bss:00417D63                 db    ? ;
.bss:00417D64                 db    ? ;
.bss:00417D65                 db    ? ;
.bss:00417D66                 db    ? ;
.bss:00417D67                 db    ? ;
.bss:00417D68                 db    ? ;
.bss:00417D69                 db    ? ;
.bss:00417D6A                 db    ? ;
.bss:00417D6B                 db    ? ;
.bss:00417D6C                 db    ? ;
.bss:00417D6D                 db    ? ;
.bss:00417D6E                 db    ? ;
.bss:00417D6F                 db    ? ;
.bss:00417D70                 db    ? ;
.bss:00417D71                 db    ? ;
.bss:00417D72                 db    ? ;
.bss:00417D73                 db    ? ;
.bss:00417D74                 db    ? ;
.bss:00417D75                 db    ? ;
.bss:00417D76                 db    ? ;
.bss:00417D77                 db    ? ;
.bss:00417D78                 db    ? ;
.bss:00417D79                 db    ? ;
.bss:00417D7A                 db    ? ;
.bss:00417D7B                 db    ? ;
.bss:00417D7C                 db    ? ;
.bss:00417D7D                 db    ? ;
.bss:00417D7E                 db    ? ;
.bss:00417D7F                 db    ? ;
.bss:00417D80                 db    ? ;
.bss:00417D81                 db    ? ;
.bss:00417D82                 db    ? ;
.bss:00417D83                 db    ? ;
.bss:00417D84                 db    ? ;
.bss:00417D85                 db    ? ;
.bss:00417D86                 db    ? ;
.bss:00417D87                 db    ? ;
.bss:00417D88                 db    ? ;
.bss:00417D89                 db    ? ;
.bss:00417D8A                 db    ? ;
.bss:00417D8B                 db    ? ;
.bss:00417D8C                 db    ? ;
.bss:00417D8D                 db    ? ;
.bss:00417D8E                 db    ? ;
.bss:00417D8F                 db    ? ;
.bss:00417D90                 db    ? ;
.bss:00417D91                 db    ? ;
.bss:00417D92                 db    ? ;
.bss:00417D93                 db    ? ;
.bss:00417D94                 db    ? ;
.bss:00417D95                 db    ? ;
.bss:00417D96                 db    ? ;
.bss:00417D97                 db    ? ;
.bss:00417D98                 db    ? ;
.bss:00417D99                 db    ? ;
.bss:00417D9A                 db    ? ;
.bss:00417D9B                 db    ? ;
.bss:00417D9C                 db    ? ;
.bss:00417D9D                 db    ? ;
.bss:00417D9E                 db    ? ;
.bss:00417D9F                 db    ? ;
.bss:00417DA0                 db    ? ;
.bss:00417DA1                 db    ? ;
.bss:00417DA2                 db    ? ;
.bss:00417DA3                 db    ? ;
.bss:00417DA4                 db    ? ;
.bss:00417DA5                 db    ? ;
.bss:00417DA6                 db    ? ;
.bss:00417DA7                 db    ? ;
.bss:00417DA8                 db    ? ;
.bss:00417DA9                 db    ? ;
.bss:00417DAA                 db    ? ;
.bss:00417DAB                 db    ? ;
.bss:00417DAC                 db    ? ;
.bss:00417DAD                 db    ? ;
.bss:00417DAE                 db    ? ;
.bss:00417DAF                 db    ? ;
.bss:00417DB0                 db    ? ;
.bss:00417DB1                 db    ? ;
.bss:00417DB2                 db    ? ;
.bss:00417DB3                 db    ? ;
.bss:00417DB4                 db    ? ;
.bss:00417DB5                 db    ? ;
.bss:00417DB6                 db    ? ;
.bss:00417DB7                 db    ? ;
.bss:00417DB8                 db    ? ;
.bss:00417DB9                 db    ? ;
.bss:00417DBA                 db    ? ;
.bss:00417DBB                 db    ? ;
.bss:00417DBC                 db    ? ;
.bss:00417DBD                 db    ? ;
.bss:00417DBE                 db    ? ;
.bss:00417DBF                 db    ? ;
.bss:00417DC0                 db    ? ;
.bss:00417DC1                 db    ? ;
.bss:00417DC2                 db    ? ;
.bss:00417DC3                 db    ? ;
.bss:00417DC4                 db    ? ;
.bss:00417DC5                 db    ? ;
.bss:00417DC6                 db    ? ;
.bss:00417DC7                 db    ? ;
.bss:00417DC8                 db    ? ;
.bss:00417DC9                 db    ? ;
.bss:00417DCA                 db    ? ;
.bss:00417DCB                 db    ? ;
.bss:00417DCC                 db    ? ;
.bss:00417DCD                 db    ? ;
.bss:00417DCE                 db    ? ;
.bss:00417DCF                 db    ? ;
.bss:00417DD0                 db    ? ;
.bss:00417DD1                 db    ? ;
.bss:00417DD2                 db    ? ;
.bss:00417DD3                 db    ? ;
.bss:00417DD4                 db    ? ;
.bss:00417DD5                 db    ? ;
.bss:00417DD6                 db    ? ;
.bss:00417DD7                 db    ? ;
.bss:00417DD8                 db    ? ;
.bss:00417DD9                 db    ? ;
.bss:00417DDA                 db    ? ;
.bss:00417DDB                 db    ? ;
.bss:00417DDC                 db    ? ;
.bss:00417DDD                 db    ? ;
.bss:00417DDE                 db    ? ;
.bss:00417DDF                 db    ? ;
.bss:00417DE0                 db    ? ;
.bss:00417DE1                 db    ? ;
.bss:00417DE2                 db    ? ;
.bss:00417DE3                 db    ? ;
.bss:00417DE4                 db    ? ;
.bss:00417DE5                 db    ? ;
.bss:00417DE6                 db    ? ;
.bss:00417DE7                 db    ? ;
.bss:00417DE8                 db    ? ;
.bss:00417DE9                 db    ? ;
.bss:00417DEA                 db    ? ;
.bss:00417DEB                 db    ? ;
.bss:00417DEC                 db    ? ;
.bss:00417DED                 db    ? ;
.bss:00417DEE                 db    ? ;
.bss:00417DEF                 db    ? ;
.bss:00417DF0                 db    ? ;
.bss:00417DF1                 db    ? ;
.bss:00417DF2                 db    ? ;
.bss:00417DF3                 db    ? ;
.bss:00417DF4                 db    ? ;
.bss:00417DF5                 db    ? ;
.bss:00417DF6                 db    ? ;
.bss:00417DF7                 db    ? ;
.bss:00417DF8                 db    ? ;
.bss:00417DF9                 db    ? ;
.bss:00417DFA                 db    ? ;
.bss:00417DFB                 db    ? ;
.bss:00417DFC                 db    ? ;
.bss:00417DFD                 db    ? ;
.bss:00417DFE                 db    ? ;
.bss:00417DFF                 db    ? ;
.bss:00417E00                 db    ? ;
.bss:00417E01                 db    ? ;
.bss:00417E02                 db    ? ;
.bss:00417E03                 db    ? ;
.bss:00417E04                 db    ? ;
.bss:00417E05                 db    ? ;
.bss:00417E06                 db    ? ;
.bss:00417E07                 db    ? ;
.bss:00417E08                 db    ? ;
.bss:00417E09                 db    ? ;
.bss:00417E0A                 db    ? ;
.bss:00417E0B                 db    ? ;
.bss:00417E0C                 db    ? ;
.bss:00417E0D                 db    ? ;
.bss:00417E0E                 db    ? ;
.bss:00417E0F                 db    ? ;
.bss:00417E10                 db    ? ;
.bss:00417E11                 db    ? ;
.bss:00417E12                 db    ? ;
.bss:00417E13                 db    ? ;
.bss:00417E14                 db    ? ;
.bss:00417E15                 db    ? ;
.bss:00417E16                 db    ? ;
.bss:00417E17                 db    ? ;
.bss:00417E18                 db    ? ;
.bss:00417E19                 db    ? ;
.bss:00417E1A                 db    ? ;
.bss:00417E1B                 db    ? ;
.bss:00417E1C                 db    ? ;
.bss:00417E1D                 db    ? ;
.bss:00417E1E                 db    ? ;
.bss:00417E1F                 db    ? ;
.bss:00417E20                 db    ? ;
.bss:00417E21                 db    ? ;
.bss:00417E22                 db    ? ;
.bss:00417E23                 db    ? ;
.bss:00417E24                 db    ? ;
.bss:00417E25                 db    ? ;
.bss:00417E26                 db    ? ;
.bss:00417E27                 db    ? ;
.bss:00417E28                 db    ? ;
.bss:00417E29                 db    ? ;
.bss:00417E2A                 db    ? ;
.bss:00417E2B                 db    ? ;
.bss:00417E2C                 db    ? ;
.bss:00417E2D                 db    ? ;
.bss:00417E2E                 db    ? ;
.bss:00417E2F                 db    ? ;
.bss:00417E30                 db    ? ;
.bss:00417E31                 db    ? ;
.bss:00417E32                 db    ? ;
.bss:00417E33                 db    ? ;
.bss:00417E34                 db    ? ;
.bss:00417E35                 db    ? ;
.bss:00417E36                 db    ? ;
.bss:00417E37                 db    ? ;
.bss:00417E38                 db    ? ;
.bss:00417E39                 db    ? ;
.bss:00417E3A                 db    ? ;
.bss:00417E3B                 db    ? ;
.bss:00417E3C                 db    ? ;
.bss:00417E3D                 db    ? ;
.bss:00417E3E                 db    ? ;
.bss:00417E3F                 db    ? ;
.bss:00417E40                 db    ? ;
.bss:00417E41                 db    ? ;
.bss:00417E42                 db    ? ;
.bss:00417E43                 db    ? ;
.bss:00417E44                 db    ? ;
.bss:00417E45                 db    ? ;
.bss:00417E46                 db    ? ;
.bss:00417E47                 db    ? ;
.bss:00417E48                 db    ? ;
.bss:00417E49                 db    ? ;
.bss:00417E4A                 db    ? ;
.bss:00417E4B                 db    ? ;
.bss:00417E4C                 db    ? ;
.bss:00417E4D                 db    ? ;
.bss:00417E4E                 db    ? ;
.bss:00417E4F                 db    ? ;
.bss:00417E50                 db    ? ;
.bss:00417E51                 db    ? ;
.bss:00417E52                 db    ? ;
.bss:00417E53                 db    ? ;
.bss:00417E54                 db    ? ;
.bss:00417E55                 db    ? ;
.bss:00417E56                 db    ? ;
.bss:00417E57                 db    ? ;
.bss:00417E58                 db    ? ;
.bss:00417E59                 db    ? ;
.bss:00417E5A                 db    ? ;
.bss:00417E5B                 db    ? ;
.bss:00417E5C                 db    ? ;
.bss:00417E5D                 db    ? ;
.bss:00417E5E                 db    ? ;
.bss:00417E5F                 db    ? ;
.bss:00417E60                 db    ? ;
.bss:00417E61                 db    ? ;
.bss:00417E62                 db    ? ;
.bss:00417E63                 db    ? ;
.bss:00417E64                 db    ? ;
.bss:00417E65                 db    ? ;
.bss:00417E66                 db    ? ;
.bss:00417E67                 db    ? ;
.bss:00417E68                 db    ? ;
.bss:00417E69                 db    ? ;
.bss:00417E6A                 db    ? ;
.bss:00417E6B                 db    ? ;
.bss:00417E6C                 db    ? ;
.bss:00417E6D                 db    ? ;
.bss:00417E6E                 db    ? ;
.bss:00417E6F                 db    ? ;
.bss:00417E70                 db    ? ;
.bss:00417E71                 db    ? ;
.bss:00417E72                 db    ? ;
.bss:00417E73                 db    ? ;
.bss:00417E74                 db    ? ;
.bss:00417E75                 db    ? ;
.bss:00417E76                 db    ? ;
.bss:00417E77                 db    ? ;
.bss:00417E78                 db    ? ;
.bss:00417E79                 db    ? ;
.bss:00417E7A                 db    ? ;
.bss:00417E7B                 db    ? ;
.bss:00417E7C                 db    ? ;
.bss:00417E7D                 db    ? ;
.bss:00417E7E                 db    ? ;
.bss:00417E7F                 db    ? ;
.bss:00417E80                 db    ? ;
.bss:00417E81                 db    ? ;
.bss:00417E82                 db    ? ;
.bss:00417E83                 db    ? ;
.bss:00417E84                 db    ? ;
.bss:00417E85                 db    ? ;
.bss:00417E86                 db    ? ;
.bss:00417E87                 db    ? ;
.bss:00417E88                 db    ? ;
.bss:00417E89                 db    ? ;
.bss:00417E8A                 db    ? ;
.bss:00417E8B                 db    ? ;
.bss:00417E8C                 db    ? ;
.bss:00417E8D                 db    ? ;
.bss:00417E8E                 db    ? ;
.bss:00417E8F                 db    ? ;
.bss:00417E90                 db    ? ;
.bss:00417E91                 db    ? ;
.bss:00417E92                 db    ? ;
.bss:00417E93                 db    ? ;
.bss:00417E94                 db    ? ;
.bss:00417E95                 db    ? ;
.bss:00417E96                 db    ? ;
.bss:00417E97                 db    ? ;
.bss:00417E98                 db    ? ;
.bss:00417E99                 db    ? ;
.bss:00417E9A                 db    ? ;
.bss:00417E9B                 db    ? ;
.bss:00417E9C                 db    ? ;
.bss:00417E9D                 db    ? ;
.bss:00417E9E                 db    ? ;
.bss:00417E9F                 db    ? ;
.bss:00417EA0                 db    ? ;
.bss:00417EA1                 db    ? ;
.bss:00417EA2                 db    ? ;
.bss:00417EA3                 db    ? ;
.bss:00417EA4                 db    ? ;
.bss:00417EA5                 db    ? ;
.bss:00417EA6                 db    ? ;
.bss:00417EA7                 db    ? ;
.bss:00417EA8                 db    ? ;
.bss:00417EA9                 db    ? ;
.bss:00417EAA                 db    ? ;
.bss:00417EAB                 db    ? ;
.bss:00417EAC                 db    ? ;
.bss:00417EAD                 db    ? ;
.bss:00417EAE                 db    ? ;
.bss:00417EAF                 db    ? ;
.bss:00417EB0                 db    ? ;
.bss:00417EB1                 db    ? ;
.bss:00417EB2                 db    ? ;
.bss:00417EB3                 db    ? ;
.bss:00417EB4                 db    ? ;
.bss:00417EB5                 db    ? ;
.bss:00417EB6                 db    ? ;
.bss:00417EB7                 db    ? ;
.bss:00417EB8                 db    ? ;
.bss:00417EB9                 db    ? ;
.bss:00417EBA                 db    ? ;
.bss:00417EBB                 db    ? ;
.bss:00417EBC                 db    ? ;
.bss:00417EBD                 db    ? ;
.bss:00417EBE                 db    ? ;
.bss:00417EBF                 db    ? ;
.bss:00417EC0                 db    ? ;
.bss:00417EC1                 db    ? ;
.bss:00417EC2                 db    ? ;
.bss:00417EC3                 db    ? ;
.bss:00417EC4                 db    ? ;
.bss:00417EC5                 db    ? ;
.bss:00417EC6                 db    ? ;
.bss:00417EC7                 db    ? ;
.bss:00417EC8                 db    ? ;
.bss:00417EC9                 db    ? ;
.bss:00417ECA                 db    ? ;
.bss:00417ECB                 db    ? ;
.bss:00417ECC                 db    ? ;
.bss:00417ECD                 db    ? ;
.bss:00417ECE                 db    ? ;
.bss:00417ECF                 db    ? ;
.bss:00417ED0                 db    ? ;
.bss:00417ED1                 db    ? ;
.bss:00417ED2                 db    ? ;
.bss:00417ED3                 db    ? ;
.bss:00417ED4                 db    ? ;
.bss:00417ED5                 db    ? ;
.bss:00417ED6                 db    ? ;
.bss:00417ED7                 db    ? ;
.bss:00417ED8                 db    ? ;
.bss:00417ED9                 db    ? ;
.bss:00417EDA                 db    ? ;
.bss:00417EDB                 db    ? ;
.bss:00417EDC                 db    ? ;
.bss:00417EDD                 db    ? ;
.bss:00417EDE                 db    ? ;
.bss:00417EDF                 db    ? ;
.bss:00417EE0                 db    ? ;
.bss:00417EE1                 db    ? ;
.bss:00417EE2                 db    ? ;
.bss:00417EE3                 db    ? ;
.bss:00417EE4                 db    ? ;
.bss:00417EE5                 db    ? ;
.bss:00417EE6                 db    ? ;
.bss:00417EE7                 db    ? ;
.bss:00417EE8                 db    ? ;
.bss:00417EE9                 db    ? ;
.bss:00417EEA                 db    ? ;
.bss:00417EEB                 db    ? ;
.bss:00417EEC                 db    ? ;
.bss:00417EED                 db    ? ;
.bss:00417EEE                 db    ? ;
.bss:00417EEF                 db    ? ;
.bss:00417EF0                 db    ? ;
.bss:00417EF1                 db    ? ;
.bss:00417EF2                 db    ? ;
.bss:00417EF3                 db    ? ;
.bss:00417EF4                 db    ? ;
.bss:00417EF5                 db    ? ;
.bss:00417EF6                 db    ? ;
.bss:00417EF7                 db    ? ;
.bss:00417EF8                 db    ? ;
.bss:00417EF9                 db    ? ;
.bss:00417EFA                 db    ? ;
.bss:00417EFB                 db    ? ;
.bss:00417EFC                 db    ? ;
.bss:00417EFD                 db    ? ;
.bss:00417EFE                 db    ? ;
.bss:00417EFF                 db    ? ;
.bss:00417F00                 db    ? ;
.bss:00417F01                 db    ? ;
.bss:00417F02                 db    ? ;
.bss:00417F03                 db    ? ;
.bss:00417F04                 db    ? ;
.bss:00417F05                 db    ? ;
.bss:00417F06                 db    ? ;
.bss:00417F07                 db    ? ;
.bss:00417F08                 db    ? ;
.bss:00417F09                 db    ? ;
.bss:00417F0A                 db    ? ;
.bss:00417F0B                 db    ? ;
.bss:00417F0C                 db    ? ;
.bss:00417F0D                 db    ? ;
.bss:00417F0E                 db    ? ;
.bss:00417F0F                 db    ? ;
.bss:00417F10                 db    ? ;
.bss:00417F11                 db    ? ;
.bss:00417F12                 db    ? ;
.bss:00417F13                 db    ? ;
.bss:00417F14                 db    ? ;
.bss:00417F15                 db    ? ;
.bss:00417F16                 db    ? ;
.bss:00417F17                 db    ? ;
.bss:00417F18                 db    ? ;
.bss:00417F19                 db    ? ;
.bss:00417F1A                 db    ? ;
.bss:00417F1B                 db    ? ;
.bss:00417F1C                 db    ? ;
.bss:00417F1D                 db    ? ;
.bss:00417F1E                 db    ? ;
.bss:00417F1F                 db    ? ;
.bss:00417F20                 db    ? ;
.bss:00417F21                 db    ? ;
.bss:00417F22                 db    ? ;
.bss:00417F23                 db    ? ;
.bss:00417F24                 db    ? ;
.bss:00417F25                 db    ? ;
.bss:00417F26                 db    ? ;
.bss:00417F27                 db    ? ;
.bss:00417F28                 db    ? ;
.bss:00417F29                 db    ? ;
.bss:00417F2A                 db    ? ;
.bss:00417F2B                 db    ? ;
.bss:00417F2C                 db    ? ;
.bss:00417F2D                 db    ? ;
.bss:00417F2E                 db    ? ;
.bss:00417F2F                 db    ? ;
.bss:00417F30                 db    ? ;
.bss:00417F31                 db    ? ;
.bss:00417F32                 db    ? ;
.bss:00417F33                 db    ? ;
.bss:00417F34                 db    ? ;
.bss:00417F35                 db    ? ;
.bss:00417F36                 db    ? ;
.bss:00417F37                 db    ? ;
.bss:00417F38                 db    ? ;
.bss:00417F39                 db    ? ;
.bss:00417F3A                 db    ? ;
.bss:00417F3B                 db    ? ;
.bss:00417F3C                 db    ? ;
.bss:00417F3D                 db    ? ;
.bss:00417F3E                 db    ? ;
.bss:00417F3F                 db    ? ;
.bss:00417F40                 db    ? ;
.bss:00417F41                 db    ? ;
.bss:00417F42                 db    ? ;
.bss:00417F43                 db    ? ;
.bss:00417F44                 db    ? ;
.bss:00417F45                 db    ? ;
.bss:00417F46                 db    ? ;
.bss:00417F47                 db    ? ;
.bss:00417F48                 db    ? ;
.bss:00417F49                 db    ? ;
.bss:00417F4A                 db    ? ;
.bss:00417F4B                 db    ? ;
.bss:00417F4C                 db    ? ;
.bss:00417F4D                 db    ? ;
.bss:00417F4E                 db    ? ;
.bss:00417F4F                 db    ? ;
.bss:00417F50                 db    ? ;
.bss:00417F51                 db    ? ;
.bss:00417F52                 db    ? ;
.bss:00417F53                 db    ? ;
.bss:00417F54                 db    ? ;
.bss:00417F55                 db    ? ;
.bss:00417F56                 db    ? ;
.bss:00417F57                 db    ? ;
.bss:00417F58                 db    ? ;
.bss:00417F59                 db    ? ;
.bss:00417F5A                 db    ? ;
.bss:00417F5B                 db    ? ;
.bss:00417F5C                 db    ? ;
.bss:00417F5D                 db    ? ;
.bss:00417F5E                 db    ? ;
.bss:00417F5F                 db    ? ;
.bss:00417F60                 db    ? ;
.bss:00417F61                 db    ? ;
.bss:00417F62                 db    ? ;
.bss:00417F63                 db    ? ;
.bss:00417F64                 db    ? ;
.bss:00417F65                 db    ? ;
.bss:00417F66                 db    ? ;
.bss:00417F67                 db    ? ;
.bss:00417F68                 db    ? ;
.bss:00417F69                 db    ? ;
.bss:00417F6A                 db    ? ;
.bss:00417F6B                 db    ? ;
.bss:00417F6C                 db    ? ;
.bss:00417F6D                 db    ? ;
.bss:00417F6E                 db    ? ;
.bss:00417F6F                 db    ? ;
.bss:00417F70                 db    ? ;
.bss:00417F71                 db    ? ;
.bss:00417F72                 db    ? ;
.bss:00417F73                 db    ? ;
.bss:00417F74                 db    ? ;
.bss:00417F75                 db    ? ;
.bss:00417F76                 db    ? ;
.bss:00417F77                 db    ? ;
.bss:00417F78                 db    ? ;
.bss:00417F79                 db    ? ;
.bss:00417F7A                 db    ? ;
.bss:00417F7B                 db    ? ;
.bss:00417F7C                 db    ? ;
.bss:00417F7D                 db    ? ;
.bss:00417F7E                 db    ? ;
.bss:00417F7F                 db    ? ;
.bss:00417F80                 db    ? ;
.bss:00417F81                 db    ? ;
.bss:00417F82                 db    ? ;
.bss:00417F83                 db    ? ;
.bss:00417F84                 db    ? ;
.bss:00417F85                 db    ? ;
.bss:00417F86                 db    ? ;
.bss:00417F87                 db    ? ;
.bss:00417F88                 db    ? ;
.bss:00417F89                 db    ? ;
.bss:00417F8A                 db    ? ;
.bss:00417F8B                 db    ? ;
.bss:00417F8C                 db    ? ;
.bss:00417F8D                 db    ? ;
.bss:00417F8E                 db    ? ;
.bss:00417F8F                 db    ? ;
.bss:00417F90                 db    ? ;
.bss:00417F91                 db    ? ;
.bss:00417F92                 db    ? ;
.bss:00417F93                 db    ? ;
.bss:00417F94                 db    ? ;
.bss:00417F95                 db    ? ;
.bss:00417F96                 db    ? ;
.bss:00417F97                 db    ? ;
.bss:00417F98                 db    ? ;
.bss:00417F99                 db    ? ;
.bss:00417F9A                 db    ? ;
.bss:00417F9B                 db    ? ;
.bss:00417F9C                 db    ? ;
.bss:00417F9D                 db    ? ;
.bss:00417F9E                 db    ? ;
.bss:00417F9F                 db    ? ;
.bss:00417FA0                 db    ? ;
.bss:00417FA1                 db    ? ;
.bss:00417FA2                 db    ? ;
.bss:00417FA3                 db    ? ;
.bss:00417FA4                 db    ? ;
.bss:00417FA5                 db    ? ;
.bss:00417FA6                 db    ? ;
.bss:00417FA7                 db    ? ;
.bss:00417FA8                 db    ? ;
.bss:00417FA9                 db    ? ;
.bss:00417FAA                 db    ? ;
.bss:00417FAB                 db    ? ;
.bss:00417FAC                 db    ? ;
.bss:00417FAD                 db    ? ;
.bss:00417FAE                 db    ? ;
.bss:00417FAF                 db    ? ;
.bss:00417FB0                 db    ? ;
.bss:00417FB1                 db    ? ;
.bss:00417FB2                 db    ? ;
.bss:00417FB3                 db    ? ;
.bss:00417FB4                 db    ? ;
.bss:00417FB5                 db    ? ;
.bss:00417FB6                 db    ? ;
.bss:00417FB7                 db    ? ;
.bss:00417FB8                 db    ? ;
.bss:00417FB9                 db    ? ;
.bss:00417FBA                 db    ? ;
.bss:00417FBB                 db    ? ;
.bss:00417FBC                 db    ? ;
.bss:00417FBD                 db    ? ;
.bss:00417FBE                 db    ? ;
.bss:00417FBF                 db    ? ;
.bss:00417FC0                 db    ? ;
.bss:00417FC1                 db    ? ;
.bss:00417FC2                 db    ? ;
.bss:00417FC3                 db    ? ;
.bss:00417FC4                 db    ? ;
.bss:00417FC5                 db    ? ;
.bss:00417FC6                 db    ? ;
.bss:00417FC7                 db    ? ;
.bss:00417FC8                 db    ? ;
.bss:00417FC9                 db    ? ;
.bss:00417FCA                 db    ? ;
.bss:00417FCB                 db    ? ;
.bss:00417FCC                 db    ? ;
.bss:00417FCD                 db    ? ;
.bss:00417FCE                 db    ? ;
.bss:00417FCF                 db    ? ;
.bss:00417FD0                 db    ? ;
.bss:00417FD1                 db    ? ;
.bss:00417FD2                 db    ? ;
.bss:00417FD3                 db    ? ;
.bss:00417FD4                 db    ? ;
.bss:00417FD5                 db    ? ;
.bss:00417FD6                 db    ? ;
.bss:00417FD7                 db    ? ;
.bss:00417FD8                 db    ? ;
.bss:00417FD9                 db    ? ;
.bss:00417FDA                 db    ? ;
.bss:00417FDB                 db    ? ;
.bss:00417FDC                 db    ? ;
.bss:00417FDD                 db    ? ;
.bss:00417FDE                 db    ? ;
.bss:00417FDF                 db    ? ;
.bss:00417FE0                 db    ? ;
.bss:00417FE1                 db    ? ;
.bss:00417FE2                 db    ? ;
.bss:00417FE3                 db    ? ;
.bss:00417FE4                 db    ? ;
.bss:00417FE5                 db    ? ;
.bss:00417FE6                 db    ? ;
.bss:00417FE7                 db    ? ;
.bss:00417FE8                 db    ? ;
.bss:00417FE9                 db    ? ;
.bss:00417FEA                 db    ? ;
.bss:00417FEB                 db    ? ;
.bss:00417FEC                 db    ? ;
.bss:00417FED                 db    ? ;
.bss:00417FEE                 db    ? ;
.bss:00417FEF                 db    ? ;
.bss:00417FF0                 db    ? ;
.bss:00417FF1                 db    ? ;
.bss:00417FF2                 db    ? ;
.bss:00417FF3                 db    ? ;
.bss:00417FF4                 db    ? ;
.bss:00417FF5                 db    ? ;
.bss:00417FF6                 db    ? ;
.bss:00417FF7                 db    ? ;
.bss:00417FF8                 db    ? ;
.bss:00417FF9                 db    ? ;
.bss:00417FFA                 db    ? ;
.bss:00417FFB                 db    ? ;
.bss:00417FFC                 db    ? ;
.bss:00417FFD                 db    ? ;
.bss:00417FFE                 db    ? ;
.bss:00417FFF                 db    ? ;
.bss:00418000                 db    ? ;
.bss:00418001                 db    ? ;
.bss:00418002                 db    ? ;
.bss:00418003                 db    ? ;
.bss:00418004                 db    ? ;
.bss:00418005                 db    ? ;
.bss:00418006                 db    ? ;
.bss:00418007                 db    ? ;
.bss:00418008                 db    ? ;
.bss:00418009                 db    ? ;
.bss:0041800A                 db    ? ;
.bss:0041800B                 db    ? ;
.bss:0041800C                 db    ? ;
.bss:0041800D                 db    ? ;
.bss:0041800E                 db    ? ;
.bss:0041800F                 db    ? ;
.bss:00418010                 db    ? ;
.bss:00418011                 db    ? ;
.bss:00418012                 db    ? ;
.bss:00418013                 db    ? ;
.bss:00418014                 db    ? ;
.bss:00418015                 db    ? ;
.bss:00418016                 db    ? ;
.bss:00418017                 db    ? ;
.bss:00418018                 db    ? ;
.bss:00418019                 db    ? ;
.bss:0041801A                 db    ? ;
.bss:0041801B                 db    ? ;
.bss:0041801C                 db    ? ;
.bss:0041801D                 db    ? ;
.bss:0041801E                 db    ? ;
.bss:0041801F                 db    ? ;
.bss:00418020                 db    ? ;
.bss:00418021                 db    ? ;
.bss:00418022                 db    ? ;
.bss:00418023                 db    ? ;
.bss:00418024                 db    ? ;
.bss:00418025                 db    ? ;
.bss:00418026                 db    ? ;
.bss:00418027                 db    ? ;
.bss:00418028                 db    ? ;
.bss:00418029                 db    ? ;
.bss:0041802A                 db    ? ;
.bss:0041802B                 db    ? ;
.bss:0041802C                 db    ? ;
.bss:0041802D                 db    ? ;
.bss:0041802E                 db    ? ;
.bss:0041802F                 db    ? ;
.bss:00418030                 db    ? ;
.bss:00418031                 db    ? ;
.bss:00418032                 db    ? ;
.bss:00418033                 db    ? ;
.bss:00418034                 db    ? ;
.bss:00418035                 db    ? ;
.bss:00418036                 db    ? ;
.bss:00418037                 db    ? ;
.bss:00418038                 db    ? ;
.bss:00418039                 db    ? ;
.bss:0041803A                 db    ? ;
.bss:0041803B                 db    ? ;
.bss:0041803C                 db    ? ;
.bss:0041803D                 db    ? ;
.bss:0041803E                 db    ? ;
.bss:0041803F                 db    ? ;
.bss:00418040                 db    ? ;
.bss:00418041                 db    ? ;
.bss:00418042                 db    ? ;
.bss:00418043                 db    ? ;
.bss:00418044                 db    ? ;
.bss:00418045                 db    ? ;
.bss:00418046                 db    ? ;
.bss:00418047                 db    ? ;
.bss:00418048                 db    ? ;
.bss:00418049                 db    ? ;
.bss:0041804A                 db    ? ;
.bss:0041804B                 db    ? ;
.bss:0041804C                 db    ? ;
.bss:0041804D                 db    ? ;
.bss:0041804E                 db    ? ;
.bss:0041804F                 db    ? ;
.bss:00418050                 db    ? ;
.bss:00418051                 db    ? ;
.bss:00418052                 db    ? ;
.bss:00418053                 db    ? ;
.bss:00418054                 db    ? ;
.bss:00418055                 db    ? ;
.bss:00418056                 db    ? ;
.bss:00418057                 db    ? ;
.bss:00418058                 db    ? ;
.bss:00418059                 db    ? ;
.bss:0041805A                 db    ? ;
.bss:0041805B                 db    ? ;
.bss:0041805C                 db    ? ;
.bss:0041805D                 db    ? ;
.bss:0041805E                 db    ? ;
.bss:0041805F                 db    ? ;
.bss:00418060                 db    ? ;
.bss:00418061                 db    ? ;
.bss:00418062                 db    ? ;
.bss:00418063                 db    ? ;
.bss:00418064                 db    ? ;
.bss:00418065                 db    ? ;
.bss:00418066                 db    ? ;
.bss:00418067                 db    ? ;
.bss:00418068                 db    ? ;
.bss:00418069                 db    ? ;
.bss:0041806A                 db    ? ;
.bss:0041806B                 db    ? ;
.bss:0041806C                 db    ? ;
.bss:0041806D                 db    ? ;
.bss:0041806E                 db    ? ;
.bss:0041806F                 db    ? ;
.bss:00418070                 db    ? ;
.bss:00418071                 db    ? ;
.bss:00418072                 db    ? ;
.bss:00418073                 db    ? ;
.bss:00418074                 db    ? ;
.bss:00418075                 db    ? ;
.bss:00418076                 db    ? ;
.bss:00418077                 db    ? ;
.bss:00418078                 db    ? ;
.bss:00418079                 db    ? ;
.bss:0041807A                 db    ? ;
.bss:0041807B                 db    ? ;
.bss:0041807C                 db    ? ;
.bss:0041807D                 db    ? ;
.bss:0041807E                 db    ? ;
.bss:0041807F                 db    ? ;
.bss:00418080                 db    ? ;
.bss:00418081                 db    ? ;
.bss:00418082                 db    ? ;
.bss:00418083                 db    ? ;
.bss:00418084                 db    ? ;
.bss:00418085                 db    ? ;
.bss:00418086                 db    ? ;
.bss:00418087                 db    ? ;
.bss:00418088                 db    ? ;
.bss:00418089                 db    ? ;
.bss:0041808A                 db    ? ;
.bss:0041808B                 db    ? ;
.bss:0041808C                 db    ? ;
.bss:0041808D                 db    ? ;
.bss:0041808E                 db    ? ;
.bss:0041808F                 db    ? ;
.bss:00418090                 db    ? ;
.bss:00418091                 db    ? ;
.bss:00418092                 db    ? ;
.bss:00418093                 db    ? ;
.bss:00418094                 db    ? ;
.bss:00418095                 db    ? ;
.bss:00418096                 db    ? ;
.bss:00418097                 db    ? ;
.bss:00418098                 db    ? ;
.bss:00418099                 db    ? ;
.bss:0041809A                 db    ? ;
.bss:0041809B                 db    ? ;
.bss:0041809C                 db    ? ;
.bss:0041809D                 db    ? ;
.bss:0041809E                 db    ? ;
.bss:0041809F                 db    ? ;
.bss:004180A0                 db    ? ;
.bss:004180A1                 db    ? ;
.bss:004180A2                 db    ? ;
.bss:004180A3                 db    ? ;
.bss:004180A4                 db    ? ;
.bss:004180A5                 db    ? ;
.bss:004180A6                 db    ? ;
.bss:004180A7                 db    ? ;
.bss:004180A8                 db    ? ;
.bss:004180A9                 db    ? ;
.bss:004180AA                 db    ? ;
.bss:004180AB                 db    ? ;
.bss:004180AC                 db    ? ;
.bss:004180AD                 db    ? ;
.bss:004180AE                 db    ? ;
.bss:004180AF                 db    ? ;
.bss:004180B0                 db    ? ;
.bss:004180B1                 db    ? ;
.bss:004180B2                 db    ? ;
.bss:004180B3                 db    ? ;
.bss:004180B4                 db    ? ;
.bss:004180B5                 db    ? ;
.bss:004180B6                 db    ? ;
.bss:004180B7                 db    ? ;
.bss:004180B8                 db    ? ;
.bss:004180B9                 db    ? ;
.bss:004180BA                 db    ? ;
.bss:004180BB                 db    ? ;
.bss:004180BC                 db    ? ;
.bss:004180BD                 db    ? ;
.bss:004180BE                 db    ? ;
.bss:004180BF                 db    ? ;
.bss:004180C0                 db    ? ;
.bss:004180C1                 db    ? ;
.bss:004180C2                 db    ? ;
.bss:004180C3                 db    ? ;
.bss:004180C4                 db    ? ;
.bss:004180C5                 db    ? ;
.bss:004180C6                 db    ? ;
.bss:004180C7                 db    ? ;
.bss:004180C8                 db    ? ;
.bss:004180C9                 db    ? ;
.bss:004180CA                 db    ? ;
.bss:004180CB                 db    ? ;
.bss:004180CC                 db    ? ;
.bss:004180CD                 db    ? ;
.bss:004180CE                 db    ? ;
.bss:004180CF                 db    ? ;
.bss:004180D0                 db    ? ;
.bss:004180D1                 db    ? ;
.bss:004180D2                 db    ? ;
.bss:004180D3                 db    ? ;
.bss:004180D4                 db    ? ;
.bss:004180D5                 db    ? ;
.bss:004180D6                 db    ? ;
.bss:004180D7                 db    ? ;
.bss:004180D8                 db    ? ;
.bss:004180D9                 db    ? ;
.bss:004180DA                 db    ? ;
.bss:004180DB                 db    ? ;
.bss:004180DC                 db    ? ;
.bss:004180DD                 db    ? ;
.bss:004180DE                 db    ? ;
.bss:004180DF                 db    ? ;
.bss:004180E0                 db    ? ;
.bss:004180E1                 db    ? ;
.bss:004180E2                 db    ? ;
.bss:004180E3                 db    ? ;
.bss:004180E4                 db    ? ;
.bss:004180E5                 db    ? ;
.bss:004180E6                 db    ? ;
.bss:004180E7                 db    ? ;
.bss:004180E8                 db    ? ;
.bss:004180E9                 db    ? ;
.bss:004180EA                 db    ? ;
.bss:004180EB                 db    ? ;
.bss:004180EC                 db    ? ;
.bss:004180ED                 db    ? ;
.bss:004180EE                 db    ? ;
.bss:004180EF                 db    ? ;
.bss:004180F0                 db    ? ;
.bss:004180F1                 db    ? ;
.bss:004180F2                 db    ? ;
.bss:004180F3                 db    ? ;
.bss:004180F4                 db    ? ;
.bss:004180F5                 db    ? ;
.bss:004180F6                 db    ? ;
.bss:004180F7                 db    ? ;
.bss:004180F8                 db    ? ;
.bss:004180F9                 db    ? ;
.bss:004180FA                 db    ? ;
.bss:004180FB                 db    ? ;
.bss:004180FC                 db    ? ;
.bss:004180FD                 db    ? ;
.bss:004180FE                 db    ? ;
.bss:004180FF                 db    ? ;
.bss:00418100                 db    ? ;
.bss:00418101                 db    ? ;
.bss:00418102                 db    ? ;
.bss:00418103                 db    ? ;
.bss:00418104                 db    ? ;
.bss:00418105                 db    ? ;
.bss:00418106                 db    ? ;
.bss:00418107                 db    ? ;
.bss:00418108                 db    ? ;
.bss:00418109                 db    ? ;
.bss:0041810A                 db    ? ;
.bss:0041810B                 db    ? ;
.bss:0041810C                 db    ? ;
.bss:0041810D                 db    ? ;
.bss:0041810E                 db    ? ;
.bss:0041810F                 db    ? ;
.bss:00418110                 db    ? ;
.bss:00418111                 db    ? ;
.bss:00418112                 db    ? ;
.bss:00418113                 db    ? ;
.bss:00418114                 db    ? ;
.bss:00418115                 db    ? ;
.bss:00418116                 db    ? ;
.bss:00418117                 db    ? ;
.bss:00418118                 db    ? ;
.bss:00418119                 db    ? ;
.bss:0041811A                 db    ? ;
.bss:0041811B                 db    ? ;
.bss:0041811C                 db    ? ;
.bss:0041811D                 db    ? ;
.bss:0041811E                 db    ? ;
.bss:0041811F                 db    ? ;
.bss:00418120                 db    ? ;
.bss:00418121                 db    ? ;
.bss:00418122                 db    ? ;
.bss:00418123                 db    ? ;
.bss:00418124                 db    ? ;
.bss:00418125                 db    ? ;
.bss:00418126                 db    ? ;
.bss:00418127                 db    ? ;
.bss:00418128                 db    ? ;
.bss:00418129                 db    ? ;
.bss:0041812A                 db    ? ;
.bss:0041812B                 db    ? ;
.bss:0041812C                 db    ? ;
.bss:0041812D                 db    ? ;
.bss:0041812E                 db    ? ;
.bss:0041812F                 db    ? ;
.bss:00418130                 db    ? ;
.bss:00418131                 db    ? ;
.bss:00418132                 db    ? ;
.bss:00418133                 db    ? ;
.bss:00418134                 db    ? ;
.bss:00418135                 db    ? ;
.bss:00418136                 db    ? ;
.bss:00418137                 db    ? ;
.bss:00418138                 db    ? ;
.bss:00418139                 db    ? ;
.bss:0041813A                 db    ? ;
.bss:0041813B                 db    ? ;
.bss:0041813C                 db    ? ;
.bss:0041813D                 db    ? ;
.bss:0041813E                 db    ? ;
.bss:0041813F                 db    ? ;
.bss:00418140                 db    ? ;
.bss:00418141                 db    ? ;
.bss:00418142                 db    ? ;
.bss:00418143                 db    ? ;
.bss:00418144                 db    ? ;
.bss:00418145                 db    ? ;
.bss:00418146                 db    ? ;
.bss:00418147                 db    ? ;
.bss:00418148                 db    ? ;
.bss:00418149                 db    ? ;
.bss:0041814A                 db    ? ;
.bss:0041814B                 db    ? ;
.bss:0041814C                 db    ? ;
.bss:0041814D                 db    ? ;
.bss:0041814E                 db    ? ;
.bss:0041814F                 db    ? ;
.bss:00418150                 db    ? ;
.bss:00418151                 db    ? ;
.bss:00418152                 db    ? ;
.bss:00418153                 db    ? ;
.bss:00418154                 db    ? ;
.bss:00418155                 db    ? ;
.bss:00418156                 db    ? ;
.bss:00418157                 db    ? ;
.bss:00418158                 db    ? ;
.bss:00418159                 db    ? ;
.bss:0041815A                 db    ? ;
.bss:0041815B                 db    ? ;
.bss:0041815C                 db    ? ;
.bss:0041815D                 db    ? ;
.bss:0041815E                 db    ? ;
.bss:0041815F                 db    ? ;
.bss:00418160                 db    ? ;
.bss:00418161                 db    ? ;
.bss:00418162                 db    ? ;
.bss:00418163                 db    ? ;
.bss:00418164                 db    ? ;
.bss:00418165                 db    ? ;
.bss:00418166                 db    ? ;
.bss:00418167                 db    ? ;
.bss:00418168                 db    ? ;
.bss:00418169                 db    ? ;
.bss:0041816A                 db    ? ;
.bss:0041816B                 db    ? ;
.bss:0041816C                 db    ? ;
.bss:0041816D                 db    ? ;
.bss:0041816E                 db    ? ;
.bss:0041816F                 db    ? ;
.bss:00418170                 db    ? ;
.bss:00418171                 db    ? ;
.bss:00418172                 db    ? ;
.bss:00418173                 db    ? ;
.bss:00418174                 db    ? ;
.bss:00418175                 db    ? ;
.bss:00418176                 db    ? ;
.bss:00418177                 db    ? ;
.bss:00418178                 db    ? ;
.bss:00418179                 db    ? ;
.bss:0041817A                 db    ? ;
.bss:0041817B                 db    ? ;
.bss:0041817C                 db    ? ;
.bss:0041817D                 db    ? ;
.bss:0041817E                 db    ? ;
.bss:0041817F                 db    ? ;
.bss:00418180                 db    ? ;
.bss:00418181                 db    ? ;
.bss:00418182                 db    ? ;
.bss:00418183                 db    ? ;
.bss:00418184                 db    ? ;
.bss:00418185                 db    ? ;
.bss:00418186                 db    ? ;
.bss:00418187                 db    ? ;
.bss:00418188                 db    ? ;
.bss:00418189                 db    ? ;
.bss:0041818A                 db    ? ;
.bss:0041818B                 db    ? ;
.bss:0041818C                 db    ? ;
.bss:0041818D                 db    ? ;
.bss:0041818E                 db    ? ;
.bss:0041818F                 db    ? ;
.bss:00418190                 db    ? ;
.bss:00418191                 db    ? ;
.bss:00418192                 db    ? ;
.bss:00418193                 db    ? ;
.bss:00418194                 db    ? ;
.bss:00418195                 db    ? ;
.bss:00418196                 db    ? ;
.bss:00418197                 db    ? ;
.bss:00418198                 db    ? ;
.bss:00418199                 db    ? ;
.bss:0041819A                 db    ? ;
.bss:0041819B                 db    ? ;
.bss:0041819C                 db    ? ;
.bss:0041819D                 db    ? ;
.bss:0041819E                 db    ? ;
.bss:0041819F                 db    ? ;
.bss:004181A0                 db    ? ;
.bss:004181A1                 db    ? ;
.bss:004181A2                 db    ? ;
.bss:004181A3                 db    ? ;
.bss:004181A4                 db    ? ;
.bss:004181A5                 db    ? ;
.bss:004181A6                 db    ? ;
.bss:004181A7                 db    ? ;
.bss:004181A8                 db    ? ;
.bss:004181A9                 db    ? ;
.bss:004181AA                 db    ? ;
.bss:004181AB                 db    ? ;
.bss:004181AC                 db    ? ;
.bss:004181AD                 db    ? ;
.bss:004181AE                 db    ? ;
.bss:004181AF                 db    ? ;
.bss:004181B0                 db    ? ;
.bss:004181B1                 db    ? ;
.bss:004181B2                 db    ? ;
.bss:004181B3                 db    ? ;
.bss:004181B4                 db    ? ;
.bss:004181B5                 db    ? ;
.bss:004181B6                 db    ? ;
.bss:004181B7                 db    ? ;
.bss:004181B8                 db    ? ;
.bss:004181B9                 db    ? ;
.bss:004181BA                 db    ? ;
.bss:004181BB                 db    ? ;
.bss:004181BC                 db    ? ;
.bss:004181BD                 db    ? ;
.bss:004181BE                 db    ? ;
.bss:004181BF                 db    ? ;
.bss:004181C0                 db    ? ;
.bss:004181C1                 db    ? ;
.bss:004181C2                 db    ? ;
.bss:004181C3                 db    ? ;
.bss:004181C4                 db    ? ;
.bss:004181C5                 db    ? ;
.bss:004181C6                 db    ? ;
.bss:004181C7                 db    ? ;
.bss:004181C8                 db    ? ;
.bss:004181C9                 db    ? ;
.bss:004181CA                 db    ? ;
.bss:004181CB                 db    ? ;
.bss:004181CC                 db    ? ;
.bss:004181CD                 db    ? ;
.bss:004181CE                 db    ? ;
.bss:004181CF                 db    ? ;
.bss:004181D0                 db    ? ;
.bss:004181D1                 db    ? ;
.bss:004181D2                 db    ? ;
.bss:004181D3                 db    ? ;
.bss:004181D4                 db    ? ;
.bss:004181D5                 db    ? ;
.bss:004181D6                 db    ? ;
.bss:004181D7                 db    ? ;
.bss:004181D8                 db    ? ;
.bss:004181D9                 db    ? ;
.bss:004181DA                 db    ? ;
.bss:004181DB                 db    ? ;
.bss:004181DC                 db    ? ;
.bss:004181DD                 db    ? ;
.bss:004181DE                 db    ? ;
.bss:004181DF                 db    ? ;
.bss:004181E0                 db    ? ;
.bss:004181E1                 db    ? ;
.bss:004181E2                 db    ? ;
.bss:004181E3                 db    ? ;
.bss:004181E4                 db    ? ;
.bss:004181E5                 db    ? ;
.bss:004181E6                 db    ? ;
.bss:004181E7                 db    ? ;
.bss:004181E8                 db    ? ;
.bss:004181E9                 db    ? ;
.bss:004181EA                 db    ? ;
.bss:004181EB                 db    ? ;
.bss:004181EC                 db    ? ;
.bss:004181ED                 db    ? ;
.bss:004181EE                 db    ? ;
.bss:004181EF                 db    ? ;
.bss:004181F0                 db    ? ;
.bss:004181F1                 db    ? ;
.bss:004181F2                 db    ? ;
.bss:004181F3                 db    ? ;
.bss:004181F4                 db    ? ;
.bss:004181F5                 db    ? ;
.bss:004181F6                 db    ? ;
.bss:004181F7                 db    ? ;
.bss:004181F8                 db    ? ;
.bss:004181F9                 db    ? ;
.bss:004181FA                 db    ? ;
.bss:004181FB                 db    ? ;
.bss:004181FC                 db    ? ;
.bss:004181FD                 db    ? ;
.bss:004181FE                 db    ? ;
.bss:004181FF                 db    ? ;
.bss:00418200                 db    ? ;
.bss:00418201                 db    ? ;
.bss:00418202                 db    ? ;
.bss:00418203                 db    ? ;
.bss:00418204                 db    ? ;
.bss:00418205                 db    ? ;
.bss:00418206                 db    ? ;
.bss:00418207                 db    ? ;
.bss:00418208                 db    ? ;
.bss:00418209                 db    ? ;
.bss:0041820A                 db    ? ;
.bss:0041820B                 db    ? ;
.bss:0041820C                 db    ? ;
.bss:0041820D                 db    ? ;
.bss:0041820E                 db    ? ;
.bss:0041820F                 db    ? ;
.bss:00418210                 db    ? ;
.bss:00418211                 db    ? ;
.bss:00418212                 db    ? ;
.bss:00418213                 db    ? ;
.bss:00418214                 db    ? ;
.bss:00418215                 db    ? ;
.bss:00418216                 db    ? ;
.bss:00418217                 db    ? ;
.bss:00418218                 db    ? ;
.bss:00418219                 db    ? ;
.bss:0041821A                 db    ? ;
.bss:0041821B                 db    ? ;
.bss:0041821C                 db    ? ;
.bss:0041821D                 db    ? ;
.bss:0041821E                 db    ? ;
.bss:0041821F                 db    ? ;
.bss:00418220                 db    ? ;
.bss:00418221                 db    ? ;
.bss:00418222                 db    ? ;
.bss:00418223                 db    ? ;
.bss:00418224                 db    ? ;
.bss:00418225                 db    ? ;
.bss:00418226                 db    ? ;
.bss:00418227                 db    ? ;
.bss:00418228                 db    ? ;
.bss:00418229                 db    ? ;
.bss:0041822A                 db    ? ;
.bss:0041822B                 db    ? ;
.bss:0041822C                 db    ? ;
.bss:0041822D                 db    ? ;
.bss:0041822E                 db    ? ;
.bss:0041822F                 db    ? ;
.bss:00418230                 db    ? ;
.bss:00418231                 db    ? ;
.bss:00418232                 db    ? ;
.bss:00418233                 db    ? ;
.bss:00418234                 db    ? ;
.bss:00418235                 db    ? ;
.bss:00418236                 db    ? ;
.bss:00418237                 db    ? ;
.bss:00418238                 db    ? ;
.bss:00418239                 db    ? ;
.bss:0041823A                 db    ? ;
.bss:0041823B                 db    ? ;
.bss:0041823C                 db    ? ;
.bss:0041823D                 db    ? ;
.bss:0041823E                 db    ? ;
.bss:0041823F                 db    ? ;
.bss:00418240                 db    ? ;
.bss:00418241                 db    ? ;
.bss:00418242                 db    ? ;
.bss:00418243                 db    ? ;
.bss:00418244                 db    ? ;
.bss:00418245                 db    ? ;
.bss:00418246                 db    ? ;
.bss:00418247                 db    ? ;
.bss:00418248                 db    ? ;
.bss:00418249                 db    ? ;
.bss:0041824A                 db    ? ;
.bss:0041824B                 db    ? ;
.bss:0041824C                 db    ? ;
.bss:0041824D                 db    ? ;
.bss:0041824E                 db    ? ;
.bss:0041824F                 db    ? ;
.bss:00418250                 db    ? ;
.bss:00418251                 db    ? ;
.bss:00418252                 db    ? ;
.bss:00418253                 db    ? ;
.bss:00418254                 db    ? ;
.bss:00418255                 db    ? ;
.bss:00418256                 db    ? ;
.bss:00418257                 db    ? ;
.bss:00418258                 db    ? ;
.bss:00418259                 db    ? ;
.bss:0041825A                 db    ? ;
.bss:0041825B                 db    ? ;
.bss:0041825C                 db    ? ;
.bss:0041825D                 db    ? ;
.bss:0041825E                 db    ? ;
.bss:0041825F                 db    ? ;
.bss:00418260                 db    ? ;
.bss:00418261                 db    ? ;
.bss:00418262                 db    ? ;
.bss:00418263                 db    ? ;
.bss:00418264                 db    ? ;
.bss:00418265                 db    ? ;
.bss:00418266                 db    ? ;
.bss:00418267                 db    ? ;
.bss:00418268                 db    ? ;
.bss:00418269                 db    ? ;
.bss:0041826A                 db    ? ;
.bss:0041826B                 db    ? ;
.bss:0041826C                 db    ? ;
.bss:0041826D                 db    ? ;
.bss:0041826E                 db    ? ;
.bss:0041826F                 db    ? ;
.bss:00418270                 db    ? ;
.bss:00418271                 db    ? ;
.bss:00418272                 db    ? ;
.bss:00418273                 db    ? ;
.bss:00418274                 db    ? ;
.bss:00418275                 db    ? ;
.bss:00418276                 db    ? ;
.bss:00418277                 db    ? ;
.bss:00418278                 db    ? ;
.bss:00418279                 db    ? ;
.bss:0041827A                 db    ? ;
.bss:0041827B                 db    ? ;
.bss:0041827C                 db    ? ;
.bss:0041827D                 db    ? ;
.bss:0041827E                 db    ? ;
.bss:0041827F                 db    ? ;
.bss:00418280                 db    ? ;
.bss:00418281                 db    ? ;
.bss:00418282                 db    ? ;
.bss:00418283                 db    ? ;
.bss:00418284                 db    ? ;
.bss:00418285                 db    ? ;
.bss:00418286                 db    ? ;
.bss:00418287                 db    ? ;
.bss:00418288                 db    ? ;
.bss:00418289                 db    ? ;
.bss:0041828A                 db    ? ;
.bss:0041828B                 db    ? ;
.bss:0041828C                 db    ? ;
.bss:0041828D                 db    ? ;
.bss:0041828E                 db    ? ;
.bss:0041828F                 db    ? ;
.bss:00418290                 db    ? ;
.bss:00418291                 db    ? ;
.bss:00418292                 db    ? ;
.bss:00418293                 db    ? ;
.bss:00418294                 db    ? ;
.bss:00418295                 db    ? ;
.bss:00418296                 db    ? ;
.bss:00418297                 db    ? ;
.bss:00418298                 db    ? ;
.bss:00418299                 db    ? ;
.bss:0041829A                 db    ? ;
.bss:0041829B                 db    ? ;
.bss:0041829C                 db    ? ;
.bss:0041829D                 db    ? ;
.bss:0041829E                 db    ? ;
.bss:0041829F                 db    ? ;
.bss:004182A0                 db    ? ;
.bss:004182A1                 db    ? ;
.bss:004182A2                 db    ? ;
.bss:004182A3                 db    ? ;
.bss:004182A4                 db    ? ;
.bss:004182A5                 db    ? ;
.bss:004182A6                 db    ? ;
.bss:004182A7                 db    ? ;
.bss:004182A8                 db    ? ;
.bss:004182A9                 db    ? ;
.bss:004182AA                 db    ? ;
.bss:004182AB                 db    ? ;
.bss:004182AC                 db    ? ;
.bss:004182AD                 db    ? ;
.bss:004182AE                 db    ? ;
.bss:004182AF                 db    ? ;
.bss:004182B0                 db    ? ;
.bss:004182B1                 db    ? ;
.bss:004182B2                 db    ? ;
.bss:004182B3                 db    ? ;
.bss:004182B4                 db    ? ;
.bss:004182B5                 db    ? ;
.bss:004182B6                 db    ? ;
.bss:004182B7                 db    ? ;
.bss:004182B8                 db    ? ;
.bss:004182B9                 db    ? ;
.bss:004182BA                 db    ? ;
.bss:004182BB                 db    ? ;
.bss:004182BC                 db    ? ;
.bss:004182BD                 db    ? ;
.bss:004182BE                 db    ? ;
.bss:004182BF                 db    ? ;
.bss:004182C0                 db    ? ;
.bss:004182C1                 db    ? ;
.bss:004182C2                 db    ? ;
.bss:004182C3                 db    ? ;
.bss:004182C4                 db    ? ;
.bss:004182C5                 db    ? ;
.bss:004182C6                 db    ? ;
.bss:004182C7                 db    ? ;
.bss:004182C8                 db    ? ;
.bss:004182C9                 db    ? ;
.bss:004182CA                 db    ? ;
.bss:004182CB                 db    ? ;
.bss:004182CC                 db    ? ;
.bss:004182CD                 db    ? ;
.bss:004182CE                 db    ? ;
.bss:004182CF                 db    ? ;
.bss:004182D0                 db    ? ;
.bss:004182D1                 db    ? ;
.bss:004182D2                 db    ? ;
.bss:004182D3                 db    ? ;
.bss:004182D4                 db    ? ;
.bss:004182D5                 db    ? ;
.bss:004182D6                 db    ? ;
.bss:004182D7                 db    ? ;
.bss:004182D8                 db    ? ;
.bss:004182D9                 db    ? ;
.bss:004182DA                 db    ? ;
.bss:004182DB                 db    ? ;
.bss:004182DC                 db    ? ;
.bss:004182DD                 db    ? ;
.bss:004182DE                 db    ? ;
.bss:004182DF                 db    ? ;
.bss:004182E0                 db    ? ;
.bss:004182E1                 db    ? ;
.bss:004182E2                 db    ? ;
.bss:004182E3                 db    ? ;
.bss:004182E4                 db    ? ;
.bss:004182E5                 db    ? ;
.bss:004182E6                 db    ? ;
.bss:004182E7                 db    ? ;
.bss:004182E8                 db    ? ;
.bss:004182E9                 db    ? ;
.bss:004182EA                 db    ? ;
.bss:004182EB                 db    ? ;
.bss:004182EC                 db    ? ;
.bss:004182ED                 db    ? ;
.bss:004182EE                 db    ? ;
.bss:004182EF                 db    ? ;
.bss:004182F0                 db    ? ;
.bss:004182F1                 db    ? ;
.bss:004182F2                 db    ? ;
.bss:004182F3                 db    ? ;
.bss:004182F4                 db    ? ;
.bss:004182F5                 db    ? ;
.bss:004182F6                 db    ? ;
.bss:004182F7                 db    ? ;
.bss:004182F8                 db    ? ;
.bss:004182F9                 db    ? ;
.bss:004182FA                 db    ? ;
.bss:004182FB                 db    ? ;
.bss:004182FC                 db    ? ;
.bss:004182FD                 db    ? ;
.bss:004182FE                 db    ? ;
.bss:004182FF                 db    ? ;
.bss:00418300                 db    ? ;
.bss:00418301                 db    ? ;
.bss:00418302                 db    ? ;
.bss:00418303                 db    ? ;
.bss:00418304                 db    ? ;
.bss:00418305                 db    ? ;
.bss:00418306                 db    ? ;
.bss:00418307                 db    ? ;
.bss:00418308                 db    ? ;
.bss:00418309                 db    ? ;
.bss:0041830A                 db    ? ;
.bss:0041830B                 db    ? ;
.bss:0041830C                 db    ? ;
.bss:0041830D                 db    ? ;
.bss:0041830E                 db    ? ;
.bss:0041830F                 db    ? ;
.bss:00418310                 db    ? ;
.bss:00418311                 db    ? ;
.bss:00418312                 db    ? ;
.bss:00418313                 db    ? ;
.bss:00418314                 db    ? ;
.bss:00418315                 db    ? ;
.bss:00418316                 db    ? ;
.bss:00418317                 db    ? ;
.bss:00418318                 db    ? ;
.bss:00418319                 db    ? ;
.bss:0041831A                 db    ? ;
.bss:0041831B                 db    ? ;
.bss:0041831C                 db    ? ;
.bss:0041831D                 db    ? ;
.bss:0041831E                 db    ? ;
.bss:0041831F                 db    ? ;
.bss:00418320                 db    ? ;
.bss:00418321                 db    ? ;
.bss:00418322                 db    ? ;
.bss:00418323                 db    ? ;
.bss:00418324                 db    ? ;
.bss:00418325                 db    ? ;
.bss:00418326                 db    ? ;
.bss:00418327                 db    ? ;
.bss:00418328                 db    ? ;
.bss:00418329                 db    ? ;
.bss:0041832A                 db    ? ;
.bss:0041832B                 db    ? ;
.bss:0041832C                 db    ? ;
.bss:0041832D                 db    ? ;
.bss:0041832E                 db    ? ;
.bss:0041832F                 db    ? ;
.bss:00418330                 db    ? ;
.bss:00418331                 db    ? ;
.bss:00418332                 db    ? ;
.bss:00418333                 db    ? ;
.bss:00418334                 db    ? ;
.bss:00418335                 db    ? ;
.bss:00418336                 db    ? ;
.bss:00418337                 db    ? ;
.bss:00418338                 db    ? ;
.bss:00418339                 db    ? ;
.bss:0041833A                 db    ? ;
.bss:0041833B                 db    ? ;
.bss:0041833C                 db    ? ;
.bss:0041833D                 db    ? ;
.bss:0041833E                 db    ? ;
.bss:0041833F                 db    ? ;
.bss:00418340                 db    ? ;
.bss:00418341                 db    ? ;
.bss:00418342                 db    ? ;
.bss:00418343                 db    ? ;
.bss:00418344                 db    ? ;
.bss:00418345                 db    ? ;
.bss:00418346                 db    ? ;
.bss:00418347                 db    ? ;
.bss:00418348                 db    ? ;
.bss:00418349                 db    ? ;
.bss:0041834A                 db    ? ;
.bss:0041834B                 db    ? ;
.bss:0041834C                 db    ? ;
.bss:0041834D                 db    ? ;
.bss:0041834E                 db    ? ;
.bss:0041834F                 db    ? ;
.bss:00418350                 db    ? ;
.bss:00418351                 db    ? ;
.bss:00418352                 db    ? ;
.bss:00418353                 db    ? ;
.bss:00418354                 db    ? ;
.bss:00418355                 db    ? ;
.bss:00418356                 db    ? ;
.bss:00418357                 db    ? ;
.bss:00418358                 db    ? ;
.bss:00418359                 db    ? ;
.bss:0041835A                 db    ? ;
.bss:0041835B                 db    ? ;
.bss:0041835C                 db    ? ;
.bss:0041835D                 db    ? ;
.bss:0041835E                 db    ? ;
.bss:0041835F                 db    ? ;
.bss:00418360                 db    ? ;
.bss:00418361                 db    ? ;
.bss:00418362                 db    ? ;
.bss:00418363                 db    ? ;
.bss:00418364                 db    ? ;
.bss:00418365                 db    ? ;
.bss:00418366                 db    ? ;
.bss:00418367                 db    ? ;
.bss:00418368                 db    ? ;
.bss:00418369                 db    ? ;
.bss:0041836A                 db    ? ;
.bss:0041836B                 db    ? ;
.bss:0041836C                 db    ? ;
.bss:0041836D                 db    ? ;
.bss:0041836E                 db    ? ;
.bss:0041836F                 db    ? ;
.bss:00418370                 db    ? ;
.bss:00418371                 db    ? ;
.bss:00418372                 db    ? ;
.bss:00418373                 db    ? ;
.bss:00418374                 db    ? ;
.bss:00418375                 db    ? ;
.bss:00418376                 db    ? ;
.bss:00418377                 db    ? ;
.bss:00418378                 db    ? ;
.bss:00418379                 db    ? ;
.bss:0041837A                 db    ? ;
.bss:0041837B                 db    ? ;
.bss:0041837C                 db    ? ;
.bss:0041837D                 db    ? ;
.bss:0041837E                 db    ? ;
.bss:0041837F                 db    ? ;
.bss:00418380                 db    ? ;
.bss:00418381                 db    ? ;
.bss:00418382                 db    ? ;
.bss:00418383                 db    ? ;
.bss:00418384                 db    ? ;
.bss:00418385                 db    ? ;
.bss:00418386                 db    ? ;
.bss:00418387                 db    ? ;
.bss:00418388                 db    ? ;
.bss:00418389                 db    ? ;
.bss:0041838A                 db    ? ;
.bss:0041838B                 db    ? ;
.bss:0041838C                 db    ? ;
.bss:0041838D                 db    ? ;
.bss:0041838E                 db    ? ;
.bss:0041838F                 db    ? ;
.bss:00418390                 db    ? ;
.bss:00418391                 db    ? ;
.bss:00418392                 db    ? ;
.bss:00418393                 db    ? ;
.bss:00418394                 db    ? ;
.bss:00418395                 db    ? ;
.bss:00418396                 db    ? ;
.bss:00418397                 db    ? ;
.bss:00418398                 db    ? ;
.bss:00418399                 db    ? ;
.bss:0041839A                 db    ? ;
.bss:0041839B                 db    ? ;
.bss:0041839C                 db    ? ;
.bss:0041839D                 db    ? ;
.bss:0041839E                 db    ? ;
.bss:0041839F                 db    ? ;
.bss:004183A0                 db    ? ;
.bss:004183A1                 db    ? ;
.bss:004183A2                 db    ? ;
.bss:004183A3                 db    ? ;
.bss:004183A4                 db    ? ;
.bss:004183A5                 db    ? ;
.bss:004183A6                 db    ? ;
.bss:004183A7                 db    ? ;
.bss:004183A8                 db    ? ;
.bss:004183A9                 db    ? ;
.bss:004183AA                 db    ? ;
.bss:004183AB                 db    ? ;
.bss:004183AC                 db    ? ;
.bss:004183AD                 db    ? ;
.bss:004183AE                 db    ? ;
.bss:004183AF                 db    ? ;
.bss:004183B0                 db    ? ;
.bss:004183B1                 db    ? ;
.bss:004183B2                 db    ? ;
.bss:004183B3                 db    ? ;
.bss:004183B4                 db    ? ;
.bss:004183B5                 db    ? ;
.bss:004183B6                 db    ? ;
.bss:004183B7                 db    ? ;
.bss:004183B8                 db    ? ;
.bss:004183B9                 db    ? ;
.bss:004183BA                 db    ? ;
.bss:004183BB                 db    ? ;
.bss:004183BC                 db    ? ;
.bss:004183BD                 db    ? ;
.bss:004183BE                 db    ? ;
.bss:004183BF                 db    ? ;
.bss:004183C0                 db    ? ;
.bss:004183C1                 db    ? ;
.bss:004183C2                 db    ? ;
.bss:004183C3                 db    ? ;
.bss:004183C4                 db    ? ;
.bss:004183C5                 db    ? ;
.bss:004183C6                 db    ? ;
.bss:004183C7                 db    ? ;
.bss:004183C8                 db    ? ;
.bss:004183C9                 db    ? ;
.bss:004183CA                 db    ? ;
.bss:004183CB                 db    ? ;
.bss:004183CC                 db    ? ;
.bss:004183CD                 db    ? ;
.bss:004183CE                 db    ? ;
.bss:004183CF                 db    ? ;
.bss:004183D0                 db    ? ;
.bss:004183D1                 db    ? ;
.bss:004183D2                 db    ? ;
.bss:004183D3                 db    ? ;
.bss:004183D4                 db    ? ;
.bss:004183D5                 db    ? ;
.bss:004183D6                 db    ? ;
.bss:004183D7                 db    ? ;
.bss:004183D8                 db    ? ;
.bss:004183D9                 db    ? ;
.bss:004183DA                 db    ? ;
.bss:004183DB                 db    ? ;
.bss:004183DC                 db    ? ;
.bss:004183DD                 db    ? ;
.bss:004183DE                 db    ? ;
.bss:004183DF                 db    ? ;
.bss:004183E0                 db    ? ;
.bss:004183E1                 db    ? ;
.bss:004183E2                 db    ? ;
.bss:004183E3                 db    ? ;
.bss:004183E4                 db    ? ;
.bss:004183E5                 db    ? ;
.bss:004183E6                 db    ? ;
.bss:004183E7                 db    ? ;
.bss:004183E8                 db    ? ;
.bss:004183E9                 db    ? ;
.bss:004183EA                 db    ? ;
.bss:004183EB                 db    ? ;
.bss:004183EC                 db    ? ;
.bss:004183ED                 db    ? ;
.bss:004183EE                 db    ? ;
.bss:004183EF                 db    ? ;
.bss:004183F0                 db    ? ;
.bss:004183F1                 db    ? ;
.bss:004183F2                 db    ? ;
.bss:004183F3                 db    ? ;
.bss:004183F4                 db    ? ;
.bss:004183F5                 db    ? ;
.bss:004183F6                 db    ? ;
.bss:004183F7                 db    ? ;
.bss:004183F8                 db    ? ;
.bss:004183F9                 db    ? ;
.bss:004183FA                 db    ? ;
.bss:004183FB                 db    ? ;
.bss:004183FC                 db    ? ;
.bss:004183FD                 db    ? ;
.bss:004183FE                 db    ? ;
.bss:004183FF                 db    ? ;
.bss:00418400                 db    ? ;
.bss:00418401                 db    ? ;
.bss:00418402                 db    ? ;
.bss:00418403                 db    ? ;
.bss:00418404                 db    ? ;
.bss:00418405                 db    ? ;
.bss:00418406                 db    ? ;
.bss:00418407                 db    ? ;
.bss:00418408                 db    ? ;
.bss:00418409                 db    ? ;
.bss:0041840A                 db    ? ;
.bss:0041840B                 db    ? ;
.bss:0041840C                 db    ? ;
.bss:0041840D                 db    ? ;
.bss:0041840E                 db    ? ;
.bss:0041840F                 db    ? ;
.bss:00418410                 db    ? ;
.bss:00418411                 db    ? ;
.bss:00418412                 db    ? ;
.bss:00418413                 db    ? ;
.bss:00418414                 db    ? ;
.bss:00418415                 db    ? ;
.bss:00418416                 db    ? ;
.bss:00418417                 db    ? ;
.bss:00418418                 db    ? ;
.bss:00418419                 db    ? ;
.bss:0041841A                 db    ? ;
.bss:0041841B                 db    ? ;
.bss:0041841C                 db    ? ;
.bss:0041841D                 db    ? ;
.bss:0041841E                 db    ? ;
.bss:0041841F                 db    ? ;
.bss:00418420                 db    ? ;
.bss:00418421                 db    ? ;
.bss:00418422                 db    ? ;
.bss:00418423                 db    ? ;
.bss:00418424                 db    ? ;
.bss:00418425                 db    ? ;
.bss:00418426                 db    ? ;
.bss:00418427                 db    ? ;
.bss:00418428                 db    ? ;
.bss:00418429                 db    ? ;
.bss:0041842A                 db    ? ;
.bss:0041842B                 db    ? ;
.bss:0041842C                 db    ? ;
.bss:0041842D                 db    ? ;
.bss:0041842E                 db    ? ;
.bss:0041842F                 db    ? ;
.bss:00418430                 db    ? ;
.bss:00418431                 db    ? ;
.bss:00418432                 db    ? ;
.bss:00418433                 db    ? ;
.bss:00418434                 db    ? ;
.bss:00418435                 db    ? ;
.bss:00418436                 db    ? ;
.bss:00418437                 db    ? ;
.bss:00418438                 db    ? ;
.bss:00418439                 db    ? ;
.bss:0041843A                 db    ? ;
.bss:0041843B                 db    ? ;
.bss:0041843C                 db    ? ;
.bss:0041843D                 db    ? ;
.bss:0041843E                 db    ? ;
.bss:0041843F                 db    ? ;
.bss:00418440                 db    ? ;
.bss:00418441                 db    ? ;
.bss:00418442                 db    ? ;
.bss:00418443                 db    ? ;
.bss:00418444                 db    ? ;
.bss:00418445                 db    ? ;
.bss:00418446                 db    ? ;
.bss:00418447                 db    ? ;
.bss:00418448                 db    ? ;
.bss:00418449                 db    ? ;
.bss:0041844A                 db    ? ;
.bss:0041844B                 db    ? ;
.bss:0041844C                 db    ? ;
.bss:0041844D                 db    ? ;
.bss:0041844E                 db    ? ;
.bss:0041844F                 db    ? ;
.bss:00418450                 db    ? ;
.bss:00418451                 db    ? ;
.bss:00418452                 db    ? ;
.bss:00418453                 db    ? ;
.bss:00418454                 db    ? ;
.bss:00418455                 db    ? ;
.bss:00418456                 db    ? ;
.bss:00418457                 db    ? ;
.bss:00418458                 db    ? ;
.bss:00418459                 db    ? ;
.bss:0041845A                 db    ? ;
.bss:0041845B                 db    ? ;
.bss:0041845C                 db    ? ;
.bss:0041845D                 db    ? ;
.bss:0041845E                 db    ? ;
.bss:0041845F                 db    ? ;
.bss:00418460                 db    ? ;
.bss:00418461                 db    ? ;
.bss:00418462                 db    ? ;
.bss:00418463                 db    ? ;
.bss:00418464                 db    ? ;
.bss:00418465                 db    ? ;
.bss:00418466                 db    ? ;
.bss:00418467                 db    ? ;
.bss:00418468                 db    ? ;
.bss:00418469                 db    ? ;
.bss:0041846A                 db    ? ;
.bss:0041846B                 db    ? ;
.bss:0041846C                 db    ? ;
.bss:0041846D                 db    ? ;
.bss:0041846E                 db    ? ;
.bss:0041846F                 db    ? ;
.bss:00418470                 db    ? ;
.bss:00418471                 db    ? ;
.bss:00418472                 db    ? ;
.bss:00418473                 db    ? ;
.bss:00418474                 db    ? ;
.bss:00418475                 db    ? ;
.bss:00418476                 db    ? ;
.bss:00418477                 db    ? ;
.bss:00418478                 db    ? ;
.bss:00418479                 db    ? ;
.bss:0041847A                 db    ? ;
.bss:0041847B                 db    ? ;
.bss:0041847C                 db    ? ;
.bss:0041847D                 db    ? ;
.bss:0041847E                 db    ? ;
.bss:0041847F                 db    ? ;
.bss:00418480                 db    ? ;
.bss:00418481                 db    ? ;
.bss:00418482                 db    ? ;
.bss:00418483                 db    ? ;
.bss:00418484                 db    ? ;
.bss:00418485                 db    ? ;
.bss:00418486                 db    ? ;
.bss:00418487                 db    ? ;
.bss:00418488                 db    ? ;
.bss:00418489                 db    ? ;
.bss:0041848A                 db    ? ;
.bss:0041848B                 db    ? ;
.bss:0041848C                 db    ? ;
.bss:0041848D                 db    ? ;
.bss:0041848E                 db    ? ;
.bss:0041848F                 db    ? ;
.bss:00418490                 db    ? ;
.bss:00418491                 db    ? ;
.bss:00418492                 db    ? ;
.bss:00418493                 db    ? ;
.bss:00418494                 db    ? ;
.bss:00418495                 db    ? ;
.bss:00418496                 db    ? ;
.bss:00418497                 db    ? ;
.bss:00418498                 db    ? ;
.bss:00418499                 db    ? ;
.bss:0041849A                 db    ? ;
.bss:0041849B                 db    ? ;
.bss:0041849C                 db    ? ;
.bss:0041849D                 db    ? ;
.bss:0041849E                 db    ? ;
.bss:0041849F                 db    ? ;
.bss:004184A0                 db    ? ;
.bss:004184A1                 db    ? ;
.bss:004184A2                 db    ? ;
.bss:004184A3                 db    ? ;
.bss:004184A4                 db    ? ;
.bss:004184A5                 db    ? ;
.bss:004184A6                 db    ? ;
.bss:004184A7                 db    ? ;
.bss:004184A8                 db    ? ;
.bss:004184A9                 db    ? ;
.bss:004184AA                 db    ? ;
.bss:004184AB                 db    ? ;
.bss:004184AC                 db    ? ;
.bss:004184AD                 db    ? ;
.bss:004184AE                 db    ? ;
.bss:004184AF                 db    ? ;
.bss:004184B0                 db    ? ;
.bss:004184B1                 db    ? ;
.bss:004184B2                 db    ? ;
.bss:004184B3                 db    ? ;
.bss:004184B4                 db    ? ;
.bss:004184B5                 db    ? ;
.bss:004184B6                 db    ? ;
.bss:004184B7                 db    ? ;
.bss:004184B8                 db    ? ;
.bss:004184B9                 db    ? ;
.bss:004184BA                 db    ? ;
.bss:004184BB                 db    ? ;
.bss:004184BC                 db    ? ;
.bss:004184BD                 db    ? ;
.bss:004184BE                 db    ? ;
.bss:004184BF                 db    ? ;
.bss:004184C0                 db    ? ;
.bss:004184C1                 db    ? ;
.bss:004184C2                 db    ? ;
.bss:004184C3                 db    ? ;
.bss:004184C4                 db    ? ;
.bss:004184C5                 db    ? ;
.bss:004184C6                 db    ? ;
.bss:004184C7                 db    ? ;
.bss:004184C8                 db    ? ;
.bss:004184C9                 db    ? ;
.bss:004184CA                 db    ? ;
.bss:004184CB                 db    ? ;
.bss:004184CC                 db    ? ;
.bss:004184CD                 db    ? ;
.bss:004184CE                 db    ? ;
.bss:004184CF                 db    ? ;
.bss:004184D0                 db    ? ;
.bss:004184D1                 db    ? ;
.bss:004184D2                 db    ? ;
.bss:004184D3                 db    ? ;
.bss:004184D4                 db    ? ;
.bss:004184D5                 db    ? ;
.bss:004184D6                 db    ? ;
.bss:004184D7                 db    ? ;
.bss:004184D8                 db    ? ;
.bss:004184D9                 db    ? ;
.bss:004184DA                 db    ? ;
.bss:004184DB                 db    ? ;
.bss:004184DC                 db    ? ;
.bss:004184DD                 db    ? ;
.bss:004184DE                 db    ? ;
.bss:004184DF                 db    ? ;
.bss:004184E0                 db    ? ;
.bss:004184E1                 db    ? ;
.bss:004184E2                 db    ? ;
.bss:004184E3                 db    ? ;
.bss:004184E4                 db    ? ;
.bss:004184E5                 db    ? ;
.bss:004184E6                 db    ? ;
.bss:004184E7                 db    ? ;
.bss:004184E8                 db    ? ;
.bss:004184E9                 db    ? ;
.bss:004184EA                 db    ? ;
.bss:004184EB                 db    ? ;
.bss:004184EC                 db    ? ;
.bss:004184ED                 db    ? ;
.bss:004184EE                 db    ? ;
.bss:004184EF                 db    ? ;
.bss:004184F0                 db    ? ;
.bss:004184F1                 db    ? ;
.bss:004184F2                 db    ? ;
.bss:004184F3                 db    ? ;
.bss:004184F4                 db    ? ;
.bss:004184F5                 db    ? ;
.bss:004184F6                 db    ? ;
.bss:004184F7                 db    ? ;
.bss:004184F8                 db    ? ;
.bss:004184F9                 db    ? ;
.bss:004184FA                 db    ? ;
.bss:004184FB                 db    ? ;
.bss:004184FC                 db    ? ;
.bss:004184FD                 db    ? ;
.bss:004184FE                 db    ? ;
.bss:004184FF                 db    ? ;
.bss:00418500                 db    ? ;
.bss:00418501                 db    ? ;
.bss:00418502                 db    ? ;
.bss:00418503                 db    ? ;
.bss:00418504                 db    ? ;
.bss:00418505                 db    ? ;
.bss:00418506                 db    ? ;
.bss:00418507                 db    ? ;
.bss:00418508                 db    ? ;
.bss:00418509                 db    ? ;
.bss:0041850A                 db    ? ;
.bss:0041850B                 db    ? ;
.bss:0041850C                 db    ? ;
.bss:0041850D                 db    ? ;
.bss:0041850E                 db    ? ;
.bss:0041850F                 db    ? ;
.bss:00418510                 db    ? ;
.bss:00418511                 db    ? ;
.bss:00418512                 db    ? ;
.bss:00418513                 db    ? ;
.bss:00418514                 db    ? ;
.bss:00418515                 db    ? ;
.bss:00418516                 db    ? ;
.bss:00418517                 db    ? ;
.bss:00418518                 db    ? ;
.bss:00418519                 db    ? ;
.bss:0041851A                 db    ? ;
.bss:0041851B                 db    ? ;
.bss:0041851C                 db    ? ;
.bss:0041851D                 db    ? ;
.bss:0041851E                 db    ? ;
.bss:0041851F                 db    ? ;
.bss:00418520                 db    ? ;
.bss:00418521                 db    ? ;
.bss:00418522                 db    ? ;
.bss:00418523                 db    ? ;
.bss:00418524                 db    ? ;
.bss:00418525                 db    ? ;
.bss:00418526                 db    ? ;
.bss:00418527                 db    ? ;
.bss:00418528                 db    ? ;
.bss:00418529                 db    ? ;
.bss:0041852A                 db    ? ;
.bss:0041852B                 db    ? ;
.bss:0041852C                 db    ? ;
.bss:0041852D                 db    ? ;
.bss:0041852E                 db    ? ;
.bss:0041852F                 db    ? ;
.bss:00418530                 db    ? ;
.bss:00418531                 db    ? ;
.bss:00418532                 db    ? ;
.bss:00418533                 db    ? ;
.bss:00418534                 db    ? ;
.bss:00418535                 db    ? ;
.bss:00418536                 db    ? ;
.bss:00418537                 db    ? ;
.bss:00418538                 db    ? ;
.bss:00418539                 db    ? ;
.bss:0041853A                 db    ? ;
.bss:0041853B                 db    ? ;
.bss:0041853C                 db    ? ;
.bss:0041853D                 db    ? ;
.bss:0041853E                 db    ? ;
.bss:0041853F                 db    ? ;
.bss:00418540                 db    ? ;
.bss:00418541                 db    ? ;
.bss:00418542                 db    ? ;
.bss:00418543                 db    ? ;
.bss:00418544                 db    ? ;
.bss:00418545                 db    ? ;
.bss:00418546                 db    ? ;
.bss:00418547                 db    ? ;
.bss:00418548                 db    ? ;
.bss:00418549                 db    ? ;
.bss:0041854A                 db    ? ;
.bss:0041854B                 db    ? ;
.bss:0041854C                 db    ? ;
.bss:0041854D                 db    ? ;
.bss:0041854E                 db    ? ;
.bss:0041854F                 db    ? ;
.bss:00418550                 db    ? ;
.bss:00418551                 db    ? ;
.bss:00418552                 db    ? ;
.bss:00418553                 db    ? ;
.bss:00418554                 db    ? ;
.bss:00418555                 db    ? ;
.bss:00418556                 db    ? ;
.bss:00418557                 db    ? ;
.bss:00418558                 db    ? ;
.bss:00418559                 db    ? ;
.bss:0041855A                 db    ? ;
.bss:0041855B                 db    ? ;
.bss:0041855C                 db    ? ;
.bss:0041855D                 db    ? ;
.bss:0041855E                 db    ? ;
.bss:0041855F                 db    ? ;
.bss:00418560                 db    ? ;
.bss:00418561                 db    ? ;
.bss:00418562                 db    ? ;
.bss:00418563                 db    ? ;
.bss:00418564                 db    ? ;
.bss:00418565                 db    ? ;
.bss:00418566                 db    ? ;
.bss:00418567                 db    ? ;
.bss:00418568                 db    ? ;
.bss:00418569                 db    ? ;
.bss:0041856A                 db    ? ;
.bss:0041856B                 db    ? ;
.bss:0041856C                 db    ? ;
.bss:0041856D                 db    ? ;
.bss:0041856E                 db    ? ;
.bss:0041856F                 db    ? ;
.bss:00418570                 db    ? ;
.bss:00418571                 db    ? ;
.bss:00418572                 db    ? ;
.bss:00418573                 db    ? ;
.bss:00418574                 db    ? ;
.bss:00418575                 db    ? ;
.bss:00418576                 db    ? ;
.bss:00418577                 db    ? ;
.bss:00418578                 db    ? ;
.bss:00418579                 db    ? ;
.bss:0041857A                 db    ? ;
.bss:0041857B                 db    ? ;
.bss:0041857C                 db    ? ;
.bss:0041857D                 db    ? ;
.bss:0041857E                 db    ? ;
.bss:0041857F                 db    ? ;
.bss:00418580                 db    ? ;
.bss:00418581                 db    ? ;
.bss:00418582                 db    ? ;
.bss:00418583                 db    ? ;
.bss:00418584                 db    ? ;
.bss:00418585                 db    ? ;
.bss:00418586                 db    ? ;
.bss:00418587                 db    ? ;
.bss:00418588                 db    ? ;
.bss:00418589                 db    ? ;
.bss:0041858A                 db    ? ;
.bss:0041858B                 db    ? ;
.bss:0041858C                 db    ? ;
.bss:0041858D                 db    ? ;
.bss:0041858E                 db    ? ;
.bss:0041858F                 db    ? ;
.bss:00418590                 db    ? ;
.bss:00418591                 db    ? ;
.bss:00418592                 db    ? ;
.bss:00418593                 db    ? ;
.bss:00418594                 db    ? ;
.bss:00418595                 db    ? ;
.bss:00418596                 db    ? ;
.bss:00418597                 db    ? ;
.bss:00418598                 db    ? ;
.bss:00418599                 db    ? ;
.bss:0041859A                 db    ? ;
.bss:0041859B                 db    ? ;
.bss:0041859C                 db    ? ;
.bss:0041859D                 db    ? ;
.bss:0041859E                 db    ? ;
.bss:0041859F                 db    ? ;
.bss:004185A0                 db    ? ;
.bss:004185A1                 db    ? ;
.bss:004185A2                 db    ? ;
.bss:004185A3                 db    ? ;
.bss:004185A4                 db    ? ;
.bss:004185A5                 db    ? ;
.bss:004185A6                 db    ? ;
.bss:004185A7                 db    ? ;
.bss:004185A8                 db    ? ;
.bss:004185A9                 db    ? ;
.bss:004185AA                 db    ? ;
.bss:004185AB                 db    ? ;
.bss:004185AC                 db    ? ;
.bss:004185AD                 db    ? ;
.bss:004185AE                 db    ? ;
.bss:004185AF                 db    ? ;
.bss:004185B0                 db    ? ;
.bss:004185B1                 db    ? ;
.bss:004185B2                 db    ? ;
.bss:004185B3                 db    ? ;
.bss:004185B4                 db    ? ;
.bss:004185B5                 db    ? ;
.bss:004185B6                 db    ? ;
.bss:004185B7                 db    ? ;
.bss:004185B8                 db    ? ;
.bss:004185B9                 db    ? ;
.bss:004185BA                 db    ? ;
.bss:004185BB                 db    ? ;
.bss:004185BC                 db    ? ;
.bss:004185BD                 db    ? ;
.bss:004185BE                 db    ? ;
.bss:004185BF                 db    ? ;
.bss:004185C0                 db    ? ;
.bss:004185C1                 db    ? ;
.bss:004185C2                 db    ? ;
.bss:004185C3                 db    ? ;
.bss:004185C4                 db    ? ;
.bss:004185C5                 db    ? ;
.bss:004185C6                 db    ? ;
.bss:004185C7                 db    ? ;
.bss:004185C8                 db    ? ;
.bss:004185C9                 db    ? ;
.bss:004185CA                 db    ? ;
.bss:004185CB                 db    ? ;
.bss:004185CC                 db    ? ;
.bss:004185CD                 db    ? ;
.bss:004185CE                 db    ? ;
.bss:004185CF                 db    ? ;
.bss:004185D0                 db    ? ;
.bss:004185D1                 db    ? ;
.bss:004185D2                 db    ? ;
.bss:004185D3                 db    ? ;
.bss:004185D4                 db    ? ;
.bss:004185D5                 db    ? ;
.bss:004185D6                 db    ? ;
.bss:004185D7                 db    ? ;
.bss:004185D8                 db    ? ;
.bss:004185D9                 db    ? ;
.bss:004185DA                 db    ? ;
.bss:004185DB                 db    ? ;
.bss:004185DC                 db    ? ;
.bss:004185DD                 db    ? ;
.bss:004185DE                 db    ? ;
.bss:004185DF                 db    ? ;
.bss:004185E0                 db    ? ;
.bss:004185E1                 db    ? ;
.bss:004185E2                 db    ? ;
.bss:004185E3                 db    ? ;
.bss:004185E4                 db    ? ;
.bss:004185E5                 db    ? ;
.bss:004185E6                 db    ? ;
.bss:004185E7                 db    ? ;
.bss:004185E8                 db    ? ;
.bss:004185E9                 db    ? ;
.bss:004185EA                 db    ? ;
.bss:004185EB                 db    ? ;
.bss:004185EC                 db    ? ;
.bss:004185ED                 db    ? ;
.bss:004185EE                 db    ? ;
.bss:004185EF                 db    ? ;
.bss:004185F0                 db    ? ;
.bss:004185F1                 db    ? ;
.bss:004185F2                 db    ? ;
.bss:004185F3                 db    ? ;
.bss:004185F4                 db    ? ;
.bss:004185F5                 db    ? ;
.bss:004185F6                 db    ? ;
.bss:004185F7                 db    ? ;
.bss:004185F8                 db    ? ;
.bss:004185F9                 db    ? ;
.bss:004185FA                 db    ? ;
.bss:004185FB                 db    ? ;
.bss:004185FC                 db    ? ;
.bss:004185FD                 db    ? ;
.bss:004185FE                 db    ? ;
.bss:004185FF                 db    ? ;
.bss:00418600                 db    ? ;
.bss:00418601                 db    ? ;
.bss:00418602                 db    ? ;
.bss:00418603                 db    ? ;
.bss:00418604                 db    ? ;
.bss:00418605                 db    ? ;
.bss:00418606                 db    ? ;
.bss:00418607                 db    ? ;
.bss:00418608                 db    ? ;
.bss:00418609                 db    ? ;
.bss:0041860A                 db    ? ;
.bss:0041860B                 db    ? ;
.bss:0041860C                 db    ? ;
.bss:0041860D                 db    ? ;
.bss:0041860E                 db    ? ;
.bss:0041860F                 db    ? ;
.bss:00418610                 db    ? ;
.bss:00418611                 db    ? ;
.bss:00418612                 db    ? ;
.bss:00418613                 db    ? ;
.bss:00418614                 db    ? ;
.bss:00418615                 db    ? ;
.bss:00418616                 db    ? ;
.bss:00418617                 db    ? ;
.bss:00418618                 db    ? ;
.bss:00418619                 db    ? ;
.bss:0041861A                 db    ? ;
.bss:0041861B                 db    ? ;
.bss:0041861C                 db    ? ;
.bss:0041861D                 db    ? ;
.bss:0041861E                 db    ? ;
.bss:0041861F                 db    ? ;
.bss:00418620                 db    ? ;
.bss:00418621                 db    ? ;
.bss:00418622                 db    ? ;
.bss:00418623                 db    ? ;
.bss:00418624                 db    ? ;
.bss:00418625                 db    ? ;
.bss:00418626                 db    ? ;
.bss:00418627                 db    ? ;
.bss:00418628                 db    ? ;
.bss:00418629                 db    ? ;
.bss:0041862A                 db    ? ;
.bss:0041862B                 db    ? ;
.bss:0041862C                 db    ? ;
.bss:0041862D                 db    ? ;
.bss:0041862E                 db    ? ;
.bss:0041862F                 db    ? ;
.bss:00418630                 db    ? ;
.bss:00418631                 db    ? ;
.bss:00418632                 db    ? ;
.bss:00418633                 db    ? ;
.bss:00418634                 db    ? ;
.bss:00418635                 db    ? ;
.bss:00418636                 db    ? ;
.bss:00418637                 db    ? ;
.bss:00418638                 db    ? ;
.bss:00418639                 db    ? ;
.bss:0041863A                 db    ? ;
.bss:0041863B                 db    ? ;
.bss:0041863C                 db    ? ;
.bss:0041863D                 db    ? ;
.bss:0041863E                 db    ? ;
.bss:0041863F                 db    ? ;
.bss:00418640                 db    ? ;
.bss:00418641                 db    ? ;
.bss:00418642                 db    ? ;
.bss:00418643                 db    ? ;
.bss:00418644                 db    ? ;
.bss:00418645                 db    ? ;
.bss:00418646                 db    ? ;
.bss:00418647                 db    ? ;
.bss:00418648                 db    ? ;
.bss:00418649                 db    ? ;
.bss:0041864A                 db    ? ;
.bss:0041864B                 db    ? ;
.bss:0041864C                 db    ? ;
.bss:0041864D                 db    ? ;
.bss:0041864E                 db    ? ;
.bss:0041864F                 db    ? ;
.bss:00418650                 db    ? ;
.bss:00418651                 db    ? ;
.bss:00418652                 db    ? ;
.bss:00418653                 db    ? ;
.bss:00418654                 db    ? ;
.bss:00418655                 db    ? ;
.bss:00418656                 db    ? ;
.bss:00418657                 db    ? ;
.bss:00418658                 db    ? ;
.bss:00418659                 db    ? ;
.bss:0041865A                 db    ? ;
.bss:0041865B                 db    ? ;
.bss:0041865C                 db    ? ;
.bss:0041865D                 db    ? ;
.bss:0041865E                 db    ? ;
.bss:0041865F                 db    ? ;
.bss:00418660                 db    ? ;
.bss:00418661                 db    ? ;
.bss:00418662                 db    ? ;
.bss:00418663                 db    ? ;
.bss:00418664                 db    ? ;
.bss:00418665                 db    ? ;
.bss:00418666                 db    ? ;
.bss:00418667                 db    ? ;
.bss:00418668                 db    ? ;
.bss:00418669                 db    ? ;
.bss:0041866A                 db    ? ;
.bss:0041866B                 db    ? ;
.bss:0041866C                 db    ? ;
.bss:0041866D                 db    ? ;
.bss:0041866E                 db    ? ;
.bss:0041866F                 db    ? ;
.bss:00418670                 db    ? ;
.bss:00418671                 db    ? ;
.bss:00418672                 db    ? ;
.bss:00418673                 db    ? ;
.bss:00418674                 db    ? ;
.bss:00418675                 db    ? ;
.bss:00418676                 db    ? ;
.bss:00418677                 db    ? ;
.bss:00418678                 db    ? ;
.bss:00418679                 db    ? ;
.bss:0041867A                 db    ? ;
.bss:0041867B                 db    ? ;
.bss:0041867C                 db    ? ;
.bss:0041867D                 db    ? ;
.bss:0041867E                 db    ? ;
.bss:0041867F                 db    ? ;
.bss:00418680                 db    ? ;
.bss:00418681                 db    ? ;
.bss:00418682                 db    ? ;
.bss:00418683                 db    ? ;
.bss:00418684                 db    ? ;
.bss:00418685                 db    ? ;
.bss:00418686                 db    ? ;
.bss:00418687                 db    ? ;
.bss:00418688                 db    ? ;
.bss:00418689                 db    ? ;
.bss:0041868A                 db    ? ;
.bss:0041868B                 db    ? ;
.bss:0041868C                 db    ? ;
.bss:0041868D                 db    ? ;
.bss:0041868E                 db    ? ;
.bss:0041868F                 db    ? ;
.bss:00418690                 db    ? ;
.bss:00418691                 db    ? ;
.bss:00418692                 db    ? ;
.bss:00418693                 db    ? ;
.bss:00418694                 db    ? ;
.bss:00418695                 db    ? ;
.bss:00418696                 db    ? ;
.bss:00418697                 db    ? ;
.bss:00418698                 db    ? ;
.bss:00418699                 db    ? ;
.bss:0041869A                 db    ? ;
.bss:0041869B                 db    ? ;
.bss:0041869C                 db    ? ;
.bss:0041869D                 db    ? ;
.bss:0041869E                 db    ? ;
.bss:0041869F                 db    ? ;
.bss:004186A0                 db    ? ;
.bss:004186A1                 db    ? ;
.bss:004186A2                 db    ? ;
.bss:004186A3                 db    ? ;
.bss:004186A4                 db    ? ;
.bss:004186A5                 db    ? ;
.bss:004186A6                 db    ? ;
.bss:004186A7                 db    ? ;
.bss:004186A8                 db    ? ;
.bss:004186A9                 db    ? ;
.bss:004186AA                 db    ? ;
.bss:004186AB                 db    ? ;
.bss:004186AC                 db    ? ;
.bss:004186AD                 db    ? ;
.bss:004186AE                 db    ? ;
.bss:004186AF                 db    ? ;
.bss:004186B0                 db    ? ;
.bss:004186B1                 db    ? ;
.bss:004186B2                 db    ? ;
.bss:004186B3                 db    ? ;
.bss:004186B4                 db    ? ;
.bss:004186B5                 db    ? ;
.bss:004186B6                 db    ? ;
.bss:004186B7                 db    ? ;
.bss:004186B8                 db    ? ;
.bss:004186B9                 db    ? ;
.bss:004186BA                 db    ? ;
.bss:004186BB                 db    ? ;
.bss:004186BC                 db    ? ;
.bss:004186BD                 db    ? ;
.bss:004186BE                 db    ? ;
.bss:004186BF                 db    ? ;
.bss:004186C0                 db    ? ;
.bss:004186C1                 db    ? ;
.bss:004186C2                 db    ? ;
.bss:004186C3                 db    ? ;
.bss:004186C4                 db    ? ;
.bss:004186C5                 db    ? ;
.bss:004186C6                 db    ? ;
.bss:004186C7                 db    ? ;
.bss:004186C8                 db    ? ;
.bss:004186C9                 db    ? ;
.bss:004186CA                 db    ? ;
.bss:004186CB                 db    ? ;
.bss:004186CC                 db    ? ;
.bss:004186CD                 db    ? ;
.bss:004186CE                 db    ? ;
.bss:004186CF                 db    ? ;
.bss:004186D0                 db    ? ;
.bss:004186D1                 db    ? ;
.bss:004186D2                 db    ? ;
.bss:004186D3                 db    ? ;
.bss:004186D4                 db    ? ;
.bss:004186D5                 db    ? ;
.bss:004186D6                 db    ? ;
.bss:004186D7                 db    ? ;
.bss:004186D8                 db    ? ;
.bss:004186D9                 db    ? ;
.bss:004186DA                 db    ? ;
.bss:004186DB                 db    ? ;
.bss:004186DC                 db    ? ;
.bss:004186DD                 db    ? ;
.bss:004186DE                 db    ? ;
.bss:004186DF                 db    ? ;
.bss:004186E0                 db    ? ;
.bss:004186E1                 db    ? ;
.bss:004186E2                 db    ? ;
.bss:004186E3                 db    ? ;
.bss:004186E4                 db    ? ;
.bss:004186E5                 db    ? ;
.bss:004186E6                 db    ? ;
.bss:004186E7                 db    ? ;
.bss:004186E8                 db    ? ;
.bss:004186E9                 db    ? ;
.bss:004186EA                 db    ? ;
.bss:004186EB                 db    ? ;
.bss:004186EC                 db    ? ;
.bss:004186ED                 db    ? ;
.bss:004186EE                 db    ? ;
.bss:004186EF                 db    ? ;
.bss:004186F0                 db    ? ;
.bss:004186F1                 db    ? ;
.bss:004186F2                 db    ? ;
.bss:004186F3                 db    ? ;
.bss:004186F4                 db    ? ;
.bss:004186F5                 db    ? ;
.bss:004186F6                 db    ? ;
.bss:004186F7                 db    ? ;
.bss:004186F8                 db    ? ;
.bss:004186F9                 db    ? ;
.bss:004186FA                 db    ? ;
.bss:004186FB                 db    ? ;
.bss:004186FC                 db    ? ;
.bss:004186FD                 db    ? ;
.bss:004186FE                 db    ? ;
.bss:004186FF                 db    ? ;
.bss:00418700                 db    ? ;
.bss:00418701                 db    ? ;
.bss:00418702                 db    ? ;
.bss:00418703                 db    ? ;
.bss:00418704                 db    ? ;
.bss:00418705                 db    ? ;
.bss:00418706                 db    ? ;
.bss:00418707                 db    ? ;
.bss:00418708                 db    ? ;
.bss:00418709                 db    ? ;
.bss:0041870A                 db    ? ;
.bss:0041870B                 db    ? ;
.bss:0041870C                 db    ? ;
.bss:0041870D                 db    ? ;
.bss:0041870E                 db    ? ;
.bss:0041870F                 db    ? ;
.bss:00418710                 db    ? ;
.bss:00418711                 db    ? ;
.bss:00418712                 db    ? ;
.bss:00418713                 db    ? ;
.bss:00418714                 db    ? ;
.bss:00418715                 db    ? ;
.bss:00418716                 db    ? ;
.bss:00418717                 db    ? ;
.bss:00418718                 db    ? ;
.bss:00418719                 db    ? ;
.bss:0041871A                 db    ? ;
.bss:0041871B                 db    ? ;
.bss:0041871C                 db    ? ;
.bss:0041871D                 db    ? ;
.bss:0041871E                 db    ? ;
.bss:0041871F                 db    ? ;
.bss:00418720                 db    ? ;
.bss:00418721                 db    ? ;
.bss:00418722                 db    ? ;
.bss:00418723                 db    ? ;
.bss:00418724                 db    ? ;
.bss:00418725                 db    ? ;
.bss:00418726                 db    ? ;
.bss:00418727                 db    ? ;
.bss:00418728                 db    ? ;
.bss:00418729                 db    ? ;
.bss:0041872A                 db    ? ;
.bss:0041872B                 db    ? ;
.bss:0041872C                 db    ? ;
.bss:0041872D                 db    ? ;
.bss:0041872E                 db    ? ;
.bss:0041872F                 db    ? ;
.bss:00418730                 db    ? ;
.bss:00418731                 db    ? ;
.bss:00418732                 db    ? ;
.bss:00418733                 db    ? ;
.bss:00418734                 db    ? ;
.bss:00418735                 db    ? ;
.bss:00418736                 db    ? ;
.bss:00418737                 db    ? ;
.bss:00418738                 db    ? ;
.bss:00418739                 db    ? ;
.bss:0041873A                 db    ? ;
.bss:0041873B                 db    ? ;
.bss:0041873C                 db    ? ;
.bss:0041873D                 db    ? ;
.bss:0041873E                 db    ? ;
.bss:0041873F                 db    ? ;
.bss:00418740                 db    ? ;
.bss:00418741                 db    ? ;
.bss:00418742                 db    ? ;
.bss:00418743                 db    ? ;
.bss:00418744                 db    ? ;
.bss:00418745                 db    ? ;
.bss:00418746                 db    ? ;
.bss:00418747                 db    ? ;
.bss:00418748                 db    ? ;
.bss:00418749                 db    ? ;
.bss:0041874A                 db    ? ;
.bss:0041874B                 db    ? ;
.bss:0041874C                 db    ? ;
.bss:0041874D                 db    ? ;
.bss:0041874E                 db    ? ;
.bss:0041874F                 db    ? ;
.bss:00418750                 db    ? ;
.bss:00418751                 db    ? ;
.bss:00418752                 db    ? ;
.bss:00418753                 db    ? ;
.bss:00418754                 db    ? ;
.bss:00418755                 db    ? ;
.bss:00418756                 db    ? ;
.bss:00418757                 db    ? ;
.bss:00418758                 db    ? ;
.bss:00418759                 db    ? ;
.bss:0041875A                 db    ? ;
.bss:0041875B                 db    ? ;
.bss:0041875C                 db    ? ;
.bss:0041875D                 db    ? ;
.bss:0041875E                 db    ? ;
.bss:0041875F                 db    ? ;
.bss:00418760                 db    ? ;
.bss:00418761                 db    ? ;
.bss:00418762                 db    ? ;
.bss:00418763                 db    ? ;
.bss:00418764                 db    ? ;
.bss:00418765                 db    ? ;
.bss:00418766                 db    ? ;
.bss:00418767                 db    ? ;
.bss:00418768                 db    ? ;
.bss:00418769                 db    ? ;
.bss:0041876A                 db    ? ;
.bss:0041876B                 db    ? ;
.bss:0041876C                 db    ? ;
.bss:0041876D                 db    ? ;
.bss:0041876E                 db    ? ;
.bss:0041876F                 db    ? ;
.bss:00418770                 db    ? ;
.bss:00418771                 db    ? ;
.bss:00418772                 db    ? ;
.bss:00418773                 db    ? ;
.bss:00418774                 db    ? ;
.bss:00418775                 db    ? ;
.bss:00418776                 db    ? ;
.bss:00418777                 db    ? ;
.bss:00418778                 db    ? ;
.bss:00418779                 db    ? ;
.bss:0041877A                 db    ? ;
.bss:0041877B                 db    ? ;
.bss:0041877C                 db    ? ;
.bss:0041877D                 db    ? ;
.bss:0041877E                 db    ? ;
.bss:0041877F                 db    ? ;
.bss:00418780                 db    ? ;
.bss:00418781                 db    ? ;
.bss:00418782                 db    ? ;
.bss:00418783                 db    ? ;
.bss:00418784                 db    ? ;
.bss:00418785                 db    ? ;
.bss:00418786                 db    ? ;
.bss:00418787                 db    ? ;
.bss:00418788                 db    ? ;
.bss:00418789                 db    ? ;
.bss:0041878A                 db    ? ;
.bss:0041878B                 db    ? ;
.bss:0041878C                 db    ? ;
.bss:0041878D                 db    ? ;
.bss:0041878E                 db    ? ;
.bss:0041878F                 db    ? ;
.bss:00418790                 db    ? ;
.bss:00418791                 db    ? ;
.bss:00418792                 db    ? ;
.bss:00418793                 db    ? ;
.bss:00418794                 db    ? ;
.bss:00418795                 db    ? ;
.bss:00418796                 db    ? ;
.bss:00418797                 db    ? ;
.bss:00418798                 db    ? ;
.bss:00418799                 db    ? ;
.bss:0041879A                 db    ? ;
.bss:0041879B                 db    ? ;
.bss:0041879C                 db    ? ;
.bss:0041879D                 db    ? ;
.bss:0041879E                 db    ? ;
.bss:0041879F                 db    ? ;
.bss:004187A0                 db    ? ;
.bss:004187A1                 db    ? ;
.bss:004187A2                 db    ? ;
.bss:004187A3                 db    ? ;
.bss:004187A4                 db    ? ;
.bss:004187A5                 db    ? ;
.bss:004187A6                 db    ? ;
.bss:004187A7                 db    ? ;
.bss:004187A8                 db    ? ;
.bss:004187A9                 db    ? ;
.bss:004187AA                 db    ? ;
.bss:004187AB                 db    ? ;
.bss:004187AC                 db    ? ;
.bss:004187AD                 db    ? ;
.bss:004187AE                 db    ? ;
.bss:004187AF                 db    ? ;
.bss:004187B0                 db    ? ;
.bss:004187B1                 db    ? ;
.bss:004187B2                 db    ? ;
.bss:004187B3                 db    ? ;
.bss:004187B4                 db    ? ;
.bss:004187B5                 db    ? ;
.bss:004187B6                 db    ? ;
.bss:004187B7                 db    ? ;
.bss:004187B8                 db    ? ;
.bss:004187B9                 db    ? ;
.bss:004187BA                 db    ? ;
.bss:004187BB                 db    ? ;
.bss:004187BC                 db    ? ;
.bss:004187BD                 db    ? ;
.bss:004187BE                 db    ? ;
.bss:004187BF                 db    ? ;
.bss:004187C0                 db    ? ;
.bss:004187C1                 db    ? ;
.bss:004187C2                 db    ? ;
.bss:004187C3                 db    ? ;
.bss:004187C4                 db    ? ;
.bss:004187C5                 db    ? ;
.bss:004187C6                 db    ? ;
.bss:004187C7                 db    ? ;
.bss:004187C8                 db    ? ;
.bss:004187C9                 db    ? ;
.bss:004187CA                 db    ? ;
.bss:004187CB                 db    ? ;
.bss:004187CC                 db    ? ;
.bss:004187CD                 db    ? ;
.bss:004187CE                 db    ? ;
.bss:004187CF                 db    ? ;
.bss:004187D0                 db    ? ;
.bss:004187D1                 db    ? ;
.bss:004187D2                 db    ? ;
.bss:004187D3                 db    ? ;
.bss:004187D4                 db    ? ;
.bss:004187D5                 db    ? ;
.bss:004187D6                 db    ? ;
.bss:004187D7                 db    ? ;
.bss:004187D8                 db    ? ;
.bss:004187D9                 db    ? ;
.bss:004187DA                 db    ? ;
.bss:004187DB                 db    ? ;
.bss:004187DC                 db    ? ;
.bss:004187DD                 db    ? ;
.bss:004187DE                 db    ? ;
.bss:004187DF                 db    ? ;
.bss:004187E0                 db    ? ;
.bss:004187E1                 db    ? ;
.bss:004187E2                 db    ? ;
.bss:004187E3                 db    ? ;
.bss:004187E4                 db    ? ;
.bss:004187E5                 db    ? ;
.bss:004187E6                 db    ? ;
.bss:004187E7                 db    ? ;
.bss:004187E8                 db    ? ;
.bss:004187E9                 db    ? ;
.bss:004187EA                 db    ? ;
.bss:004187EB                 db    ? ;
.bss:004187EC                 db    ? ;
.bss:004187ED                 db    ? ;
.bss:004187EE                 db    ? ;
.bss:004187EF                 db    ? ;
.bss:004187F0                 db    ? ;
.bss:004187F1                 db    ? ;
.bss:004187F2                 db    ? ;
.bss:004187F3                 db    ? ;
.bss:004187F4                 db    ? ;
.bss:004187F5                 db    ? ;
.bss:004187F6                 db    ? ;
.bss:004187F7                 db    ? ;
.bss:004187F8                 db    ? ;
.bss:004187F9                 db    ? ;
.bss:004187FA                 db    ? ;
.bss:004187FB                 db    ? ;
.bss:004187FC                 db    ? ;
.bss:004187FD                 db    ? ;
.bss:004187FE                 db    ? ;
.bss:004187FF                 db    ? ;
.bss:00418800                 db    ? ;
.bss:00418801                 db    ? ;
.bss:00418802                 db    ? ;
.bss:00418803                 db    ? ;
.bss:00418804                 db    ? ;
.bss:00418805                 db    ? ;
.bss:00418806                 db    ? ;
.bss:00418807                 db    ? ;
.bss:00418808                 db    ? ;
.bss:00418809                 db    ? ;
.bss:0041880A                 db    ? ;
.bss:0041880B                 db    ? ;
.bss:0041880C                 db    ? ;
.bss:0041880D                 db    ? ;
.bss:0041880E                 db    ? ;
.bss:0041880F                 db    ? ;
.bss:00418810                 db    ? ;
.bss:00418811                 db    ? ;
.bss:00418812                 db    ? ;
.bss:00418813                 db    ? ;
.bss:00418814                 db    ? ;
.bss:00418815                 db    ? ;
.bss:00418816                 db    ? ;
.bss:00418817                 db    ? ;
.bss:00418818                 db    ? ;
.bss:00418819                 db    ? ;
.bss:0041881A                 db    ? ;
.bss:0041881B                 db    ? ;
.bss:0041881C                 db    ? ;
.bss:0041881D                 db    ? ;
.bss:0041881E                 db    ? ;
.bss:0041881F                 db    ? ;
.bss:00418820                 db    ? ;
.bss:00418821                 db    ? ;
.bss:00418822                 db    ? ;
.bss:00418823                 db    ? ;
.bss:00418824                 db    ? ;
.bss:00418825                 db    ? ;
.bss:00418826                 db    ? ;
.bss:00418827                 db    ? ;
.bss:00418828                 db    ? ;
.bss:00418829                 db    ? ;
.bss:0041882A                 db    ? ;
.bss:0041882B                 db    ? ;
.bss:0041882C                 db    ? ;
.bss:0041882D                 db    ? ;
.bss:0041882E                 db    ? ;
.bss:0041882F                 db    ? ;
.bss:00418830                 db    ? ;
.bss:00418831                 db    ? ;
.bss:00418832                 db    ? ;
.bss:00418833                 db    ? ;
.bss:00418834                 db    ? ;
.bss:00418835                 db    ? ;
.bss:00418836                 db    ? ;
.bss:00418837                 db    ? ;
.bss:00418838                 db    ? ;
.bss:00418839                 db    ? ;
.bss:0041883A                 db    ? ;
.bss:0041883B                 db    ? ;
.bss:0041883C                 db    ? ;
.bss:0041883D                 db    ? ;
.bss:0041883E                 db    ? ;
.bss:0041883F                 db    ? ;
.bss:00418840                 db    ? ;
.bss:00418841                 db    ? ;
.bss:00418842                 db    ? ;
.bss:00418843                 db    ? ;
.bss:00418844                 db    ? ;
.bss:00418845                 db    ? ;
.bss:00418846                 db    ? ;
.bss:00418847                 db    ? ;
.bss:00418848                 db    ? ;
.bss:00418849                 db    ? ;
.bss:0041884A                 db    ? ;
.bss:0041884B                 db    ? ;
.bss:0041884C                 db    ? ;
.bss:0041884D                 db    ? ;
.bss:0041884E                 db    ? ;
.bss:0041884F                 db    ? ;
.bss:00418850                 db    ? ;
.bss:00418851                 db    ? ;
.bss:00418852                 db    ? ;
.bss:00418853                 db    ? ;
.bss:00418854                 db    ? ;
.bss:00418855                 db    ? ;
.bss:00418856                 db    ? ;
.bss:00418857                 db    ? ;
.bss:00418858                 db    ? ;
.bss:00418859                 db    ? ;
.bss:0041885A                 db    ? ;
.bss:0041885B                 db    ? ;
.bss:0041885C                 db    ? ;
.bss:0041885D                 db    ? ;
.bss:0041885E                 db    ? ;
.bss:0041885F                 db    ? ;
.bss:00418860                 db    ? ;
.bss:00418861                 db    ? ;
.bss:00418862                 db    ? ;
.bss:00418863                 db    ? ;
.bss:00418864                 db    ? ;
.bss:00418865                 db    ? ;
.bss:00418866                 db    ? ;
.bss:00418867                 db    ? ;
.bss:00418868                 db    ? ;
.bss:00418869                 db    ? ;
.bss:0041886A                 db    ? ;
.bss:0041886B                 db    ? ;
.bss:0041886C                 db    ? ;
.bss:0041886D                 db    ? ;
.bss:0041886E                 db    ? ;
.bss:0041886F                 db    ? ;
.bss:00418870                 db    ? ;
.bss:00418871                 db    ? ;
.bss:00418872                 db    ? ;
.bss:00418873                 db    ? ;
.bss:00418874                 db    ? ;
.bss:00418875                 db    ? ;
.bss:00418876                 db    ? ;
.bss:00418877                 db    ? ;
.bss:00418878                 db    ? ;
.bss:00418879                 db    ? ;
.bss:0041887A                 db    ? ;
.bss:0041887B                 db    ? ;
.bss:0041887C                 db    ? ;
.bss:0041887D                 db    ? ;
.bss:0041887E                 db    ? ;
.bss:0041887F                 db    ? ;
.bss:00418880                 db    ? ;
.bss:00418881                 db    ? ;
.bss:00418882                 db    ? ;
.bss:00418883                 db    ? ;
.bss:00418884                 db    ? ;
.bss:00418885                 db    ? ;
.bss:00418886                 db    ? ;
.bss:00418887                 db    ? ;
.bss:00418888                 db    ? ;
.bss:00418889                 db    ? ;
.bss:0041888A                 db    ? ;
.bss:0041888B                 db    ? ;
.bss:0041888C                 db    ? ;
.bss:0041888D                 db    ? ;
.bss:0041888E                 db    ? ;
.bss:0041888F                 db    ? ;
.bss:00418890                 db    ? ;
.bss:00418891                 db    ? ;
.bss:00418892                 db    ? ;
.bss:00418893                 db    ? ;
.bss:00418894                 db    ? ;
.bss:00418895                 db    ? ;
.bss:00418896                 db    ? ;
.bss:00418897                 db    ? ;
.bss:00418898                 db    ? ;
.bss:00418899                 db    ? ;
.bss:0041889A                 db    ? ;
.bss:0041889B                 db    ? ;
.bss:0041889C                 db    ? ;
.bss:0041889D                 db    ? ;
.bss:0041889E                 db    ? ;
.bss:0041889F                 db    ? ;
.bss:004188A0                 db    ? ;
.bss:004188A1                 db    ? ;
.bss:004188A2                 db    ? ;
.bss:004188A3                 db    ? ;
.bss:004188A4                 db    ? ;
.bss:004188A5                 db    ? ;
.bss:004188A6                 db    ? ;
.bss:004188A7                 db    ? ;
.bss:004188A8                 db    ? ;
.bss:004188A9                 db    ? ;
.bss:004188AA                 db    ? ;
.bss:004188AB                 db    ? ;
.bss:004188AC                 db    ? ;
.bss:004188AD                 db    ? ;
.bss:004188AE                 db    ? ;
.bss:004188AF                 db    ? ;
.bss:004188B0                 db    ? ;
.bss:004188B1                 db    ? ;
.bss:004188B2                 db    ? ;
.bss:004188B3                 db    ? ;
.bss:004188B4                 db    ? ;
.bss:004188B5                 db    ? ;
.bss:004188B6                 db    ? ;
.bss:004188B7                 db    ? ;
.bss:004188B8                 db    ? ;
.bss:004188B9                 db    ? ;
.bss:004188BA                 db    ? ;
.bss:004188BB                 db    ? ;
.bss:004188BC                 db    ? ;
.bss:004188BD                 db    ? ;
.bss:004188BE                 db    ? ;
.bss:004188BF                 db    ? ;
.bss:004188C0                 db    ? ;
.bss:004188C1                 db    ? ;
.bss:004188C2                 db    ? ;
.bss:004188C3                 db    ? ;
.bss:004188C4                 db    ? ;
.bss:004188C5                 db    ? ;
.bss:004188C6                 db    ? ;
.bss:004188C7                 db    ? ;
.bss:004188C8                 db    ? ;
.bss:004188C9                 db    ? ;
.bss:004188CA                 db    ? ;
.bss:004188CB                 db    ? ;
.bss:004188CC                 db    ? ;
.bss:004188CD                 db    ? ;
.bss:004188CE                 db    ? ;
.bss:004188CF                 db    ? ;
.bss:004188D0                 db    ? ;
.bss:004188D1                 db    ? ;
.bss:004188D2                 db    ? ;
.bss:004188D3                 db    ? ;
.bss:004188D4                 db    ? ;
.bss:004188D5                 db    ? ;
.bss:004188D6                 db    ? ;
.bss:004188D7                 db    ? ;
.bss:004188D8                 db    ? ;
.bss:004188D9                 db    ? ;
.bss:004188DA                 db    ? ;
.bss:004188DB                 db    ? ;
.bss:004188DC                 db    ? ;
.bss:004188DD                 db    ? ;
.bss:004188DE                 db    ? ;
.bss:004188DF                 db    ? ;
.bss:004188E0                 db    ? ;
.bss:004188E1                 db    ? ;
.bss:004188E2                 db    ? ;
.bss:004188E3                 db    ? ;
.bss:004188E4                 db    ? ;
.bss:004188E5                 db    ? ;
.bss:004188E6                 db    ? ;
.bss:004188E7                 db    ? ;
.bss:004188E8                 db    ? ;
.bss:004188E9                 db    ? ;
.bss:004188EA                 db    ? ;
.bss:004188EB                 db    ? ;
.bss:004188EC                 db    ? ;
.bss:004188ED                 db    ? ;
.bss:004188EE                 db    ? ;
.bss:004188EF                 db    ? ;
.bss:004188F0                 db    ? ;
.bss:004188F1                 db    ? ;
.bss:004188F2                 db    ? ;
.bss:004188F3                 db    ? ;
.bss:004188F4                 db    ? ;
.bss:004188F5                 db    ? ;
.bss:004188F6                 db    ? ;
.bss:004188F7                 db    ? ;
.bss:004188F8                 db    ? ;
.bss:004188F9                 db    ? ;
.bss:004188FA                 db    ? ;
.bss:004188FB                 db    ? ;
.bss:004188FC                 db    ? ;
.bss:004188FD                 db    ? ;
.bss:004188FE                 db    ? ;
.bss:004188FF                 db    ? ;
.bss:00418900                 db    ? ;
.bss:00418901                 db    ? ;
.bss:00418902                 db    ? ;
.bss:00418903                 db    ? ;
.bss:00418904                 db    ? ;
.bss:00418905                 db    ? ;
.bss:00418906                 db    ? ;
.bss:00418907                 db    ? ;
.bss:00418908                 db    ? ;
.bss:00418909                 db    ? ;
.bss:0041890A                 db    ? ;
.bss:0041890B                 db    ? ;
.bss:0041890C                 db    ? ;
.bss:0041890D                 db    ? ;
.bss:0041890E                 db    ? ;
.bss:0041890F                 db    ? ;
.bss:00418910                 db    ? ;
.bss:00418911                 db    ? ;
.bss:00418912                 db    ? ;
.bss:00418913                 db    ? ;
.bss:00418914                 db    ? ;
.bss:00418915                 db    ? ;
.bss:00418916                 db    ? ;
.bss:00418917                 db    ? ;
.bss:00418918                 db    ? ;
.bss:00418919                 db    ? ;
.bss:0041891A                 db    ? ;
.bss:0041891B                 db    ? ;
.bss:0041891C                 db    ? ;
.bss:0041891D                 db    ? ;
.bss:0041891E                 db    ? ;
.bss:0041891F                 db    ? ;
.bss:00418920                 db    ? ;
.bss:00418921                 db    ? ;
.bss:00418922                 db    ? ;
.bss:00418923                 db    ? ;
.bss:00418924                 db    ? ;
.bss:00418925                 db    ? ;
.bss:00418926                 db    ? ;
.bss:00418927                 db    ? ;
.bss:00418928                 db    ? ;
.bss:00418929                 db    ? ;
.bss:0041892A                 db    ? ;
.bss:0041892B                 db    ? ;
.bss:0041892C                 db    ? ;
.bss:0041892D                 db    ? ;
.bss:0041892E                 db    ? ;
.bss:0041892F                 db    ? ;
.bss:00418930                 db    ? ;
.bss:00418931                 db    ? ;
.bss:00418932                 db    ? ;
.bss:00418933                 db    ? ;
.bss:00418934                 db    ? ;
.bss:00418935                 db    ? ;
.bss:00418936                 db    ? ;
.bss:00418937                 db    ? ;
.bss:00418938                 db    ? ;
.bss:00418939                 db    ? ;
.bss:0041893A                 db    ? ;
.bss:0041893B                 db    ? ;
.bss:0041893C                 db    ? ;
.bss:0041893D                 db    ? ;
.bss:0041893E                 db    ? ;
.bss:0041893F                 db    ? ;
.bss:00418940                 db    ? ;
.bss:00418941                 db    ? ;
.bss:00418942                 db    ? ;
.bss:00418943                 db    ? ;
.bss:00418944                 db    ? ;
.bss:00418945                 db    ? ;
.bss:00418946                 db    ? ;
.bss:00418947                 db    ? ;
.bss:00418948                 db    ? ;
.bss:00418949                 db    ? ;
.bss:0041894A                 db    ? ;
.bss:0041894B                 db    ? ;
.bss:0041894C                 db    ? ;
.bss:0041894D                 db    ? ;
.bss:0041894E                 db    ? ;
.bss:0041894F                 db    ? ;
.bss:00418950                 db    ? ;
.bss:00418951                 db    ? ;
.bss:00418952                 db    ? ;
.bss:00418953                 db    ? ;
.bss:00418954                 db    ? ;
.bss:00418955                 db    ? ;
.bss:00418956                 db    ? ;
.bss:00418957                 db    ? ;
.bss:00418958                 db    ? ;
.bss:00418959                 db    ? ;
.bss:0041895A                 db    ? ;
.bss:0041895B                 db    ? ;
.bss:0041895C                 db    ? ;
.bss:0041895D                 db    ? ;
.bss:0041895E                 db    ? ;
.bss:0041895F                 db    ? ;
.bss:00418960                 db    ? ;
.bss:00418961                 db    ? ;
.bss:00418962                 db    ? ;
.bss:00418963                 db    ? ;
.bss:00418964                 db    ? ;
.bss:00418965                 db    ? ;
.bss:00418966                 db    ? ;
.bss:00418967                 db    ? ;
.bss:00418968                 db    ? ;
.bss:00418969                 db    ? ;
.bss:0041896A                 db    ? ;
.bss:0041896B                 db    ? ;
.bss:0041896C                 db    ? ;
.bss:0041896D                 db    ? ;
.bss:0041896E                 db    ? ;
.bss:0041896F                 db    ? ;
.bss:00418970                 db    ? ;
.bss:00418971                 db    ? ;
.bss:00418972                 db    ? ;
.bss:00418973                 db    ? ;
.bss:00418974                 db    ? ;
.bss:00418975                 db    ? ;
.bss:00418976                 db    ? ;
.bss:00418977                 db    ? ;
.bss:00418978                 db    ? ;
.bss:00418979                 db    ? ;
.bss:0041897A                 db    ? ;
.bss:0041897B                 db    ? ;
.bss:0041897C                 db    ? ;
.bss:0041897D                 db    ? ;
.bss:0041897E                 db    ? ;
.bss:0041897F                 db    ? ;
.bss:00418980                 db    ? ;
.bss:00418981                 db    ? ;
.bss:00418982                 db    ? ;
.bss:00418983                 db    ? ;
.bss:00418984                 db    ? ;
.bss:00418985                 db    ? ;
.bss:00418986                 db    ? ;
.bss:00418987                 db    ? ;
.bss:00418988                 db    ? ;
.bss:00418989                 db    ? ;
.bss:0041898A                 db    ? ;
.bss:0041898B                 db    ? ;
.bss:0041898C                 db    ? ;
.bss:0041898D                 db    ? ;
.bss:0041898E                 db    ? ;
.bss:0041898F                 db    ? ;
.bss:00418990                 db    ? ;
.bss:00418991                 db    ? ;
.bss:00418992                 db    ? ;
.bss:00418993                 db    ? ;
.bss:00418994                 db    ? ;
.bss:00418995                 db    ? ;
.bss:00418996                 db    ? ;
.bss:00418997                 db    ? ;
.bss:00418998                 db    ? ;
.bss:00418999                 db    ? ;
.bss:0041899A                 db    ? ;
.bss:0041899B                 db    ? ;
.bss:0041899C                 db    ? ;
.bss:0041899D                 db    ? ;
.bss:0041899E                 db    ? ;
.bss:0041899F                 db    ? ;
.bss:004189A0                 db    ? ;
.bss:004189A1                 db    ? ;
.bss:004189A2                 db    ? ;
.bss:004189A3                 db    ? ;
.bss:004189A4                 db    ? ;
.bss:004189A5                 db    ? ;
.bss:004189A6                 db    ? ;
.bss:004189A7                 db    ? ;
.bss:004189A8                 db    ? ;
.bss:004189A9                 db    ? ;
.bss:004189AA                 db    ? ;
.bss:004189AB                 db    ? ;
.bss:004189AC                 db    ? ;
.bss:004189AD                 db    ? ;
.bss:004189AE                 db    ? ;
.bss:004189AF                 db    ? ;
.bss:004189B0                 db    ? ;
.bss:004189B1                 db    ? ;
.bss:004189B2                 db    ? ;
.bss:004189B3                 db    ? ;
.bss:004189B4                 db    ? ;
.bss:004189B5                 db    ? ;
.bss:004189B6                 db    ? ;
.bss:004189B7                 db    ? ;
.bss:004189B8                 db    ? ;
.bss:004189B9                 db    ? ;
.bss:004189BA                 db    ? ;
.bss:004189BB                 db    ? ;
.bss:004189BC                 db    ? ;
.bss:004189BD                 db    ? ;
.bss:004189BE                 db    ? ;
.bss:004189BF                 db    ? ;
.bss:004189C0                 db    ? ;
.bss:004189C1                 db    ? ;
.bss:004189C2                 db    ? ;
.bss:004189C3                 db    ? ;
.bss:004189C4                 db    ? ;
.bss:004189C5                 db    ? ;
.bss:004189C6                 db    ? ;
.bss:004189C7                 db    ? ;
.bss:004189C8                 db    ? ;
.bss:004189C9                 db    ? ;
.bss:004189CA                 db    ? ;
.bss:004189CB                 db    ? ;
.bss:004189CC                 db    ? ;
.bss:004189CD                 db    ? ;
.bss:004189CE                 db    ? ;
.bss:004189CF                 db    ? ;
.bss:004189D0                 db    ? ;
.bss:004189D1                 db    ? ;
.bss:004189D2                 db    ? ;
.bss:004189D3                 db    ? ;
.bss:004189D4                 db    ? ;
.bss:004189D5                 db    ? ;
.bss:004189D6                 db    ? ;
.bss:004189D7                 db    ? ;
.bss:004189D8                 db    ? ;
.bss:004189D9                 db    ? ;
.bss:004189DA                 db    ? ;
.bss:004189DB                 db    ? ;
.bss:004189DC                 db    ? ;
.bss:004189DD                 db    ? ;
.bss:004189DE                 db    ? ;
.bss:004189DF                 db    ? ;
.bss:004189E0                 db    ? ;
.bss:004189E1                 db    ? ;
.bss:004189E2                 db    ? ;
.bss:004189E3                 db    ? ;
.bss:004189E4                 db    ? ;
.bss:004189E5                 db    ? ;
.bss:004189E6                 db    ? ;
.bss:004189E7                 db    ? ;
.bss:004189E8                 db    ? ;
.bss:004189E9                 db    ? ;
.bss:004189EA                 db    ? ;
.bss:004189EB                 db    ? ;
.bss:004189EC                 db    ? ;
.bss:004189ED                 db    ? ;
.bss:004189EE                 db    ? ;
.bss:004189EF                 db    ? ;
.bss:004189F0                 db    ? ;
.bss:004189F1                 db    ? ;
.bss:004189F2                 db    ? ;
.bss:004189F3                 db    ? ;
.bss:004189F4                 db    ? ;
.bss:004189F5                 db    ? ;
.bss:004189F6                 db    ? ;
.bss:004189F7                 db    ? ;
.bss:004189F8                 db    ? ;
.bss:004189F9                 db    ? ;
.bss:004189FA                 db    ? ;
.bss:004189FB                 db    ? ;
.bss:004189FC                 db    ? ;
.bss:004189FD                 db    ? ;
.bss:004189FE                 db    ? ;
.bss:004189FF                 db    ? ;
.bss:00418A00                 db    ? ;
.bss:00418A01                 db    ? ;
.bss:00418A02                 db    ? ;
.bss:00418A03                 db    ? ;
.bss:00418A04                 db    ? ;
.bss:00418A05                 db    ? ;
.bss:00418A06                 db    ? ;
.bss:00418A07                 db    ? ;
.bss:00418A08                 db    ? ;
.bss:00418A09                 db    ? ;
.bss:00418A0A                 db    ? ;
.bss:00418A0B                 db    ? ;
.bss:00418A0C                 db    ? ;
.bss:00418A0D                 db    ? ;
.bss:00418A0E                 db    ? ;
.bss:00418A0F                 db    ? ;
.bss:00418A10                 db    ? ;
.bss:00418A11                 db    ? ;
.bss:00418A12                 db    ? ;
.bss:00418A13                 db    ? ;
.bss:00418A14                 db    ? ;
.bss:00418A15                 db    ? ;
.bss:00418A16                 db    ? ;
.bss:00418A17                 db    ? ;
.bss:00418A18                 db    ? ;
.bss:00418A19                 db    ? ;
.bss:00418A1A                 db    ? ;
.bss:00418A1B                 db    ? ;
.bss:00418A1C                 db    ? ;
.bss:00418A1D                 db    ? ;
.bss:00418A1E                 db    ? ;
.bss:00418A1F                 db    ? ;
.bss:00418A20                 db    ? ;
.bss:00418A21                 db    ? ;
.bss:00418A22                 db    ? ;
.bss:00418A23                 db    ? ;
.bss:00418A24                 db    ? ;
.bss:00418A25                 db    ? ;
.bss:00418A26                 db    ? ;
.bss:00418A27                 db    ? ;
.bss:00418A28                 db    ? ;
.bss:00418A29                 db    ? ;
.bss:00418A2A                 db    ? ;
.bss:00418A2B                 db    ? ;
.bss:00418A2C                 db    ? ;
.bss:00418A2D                 db    ? ;
.bss:00418A2E                 db    ? ;
.bss:00418A2F                 db    ? ;
.bss:00418A30                 db    ? ;
.bss:00418A31                 db    ? ;
.bss:00418A32                 db    ? ;
.bss:00418A33                 db    ? ;
.bss:00418A34                 db    ? ;
.bss:00418A35                 db    ? ;
.bss:00418A36                 db    ? ;
.bss:00418A37                 db    ? ;
.bss:00418A38                 db    ? ;
.bss:00418A39                 db    ? ;
.bss:00418A3A                 db    ? ;
.bss:00418A3B                 db    ? ;
.bss:00418A3C                 db    ? ;
.bss:00418A3D                 db    ? ;
.bss:00418A3E                 db    ? ;
.bss:00418A3F                 db    ? ;
.bss:00418A40                 db    ? ;
.bss:00418A41                 db    ? ;
.bss:00418A42                 db    ? ;
.bss:00418A43                 db    ? ;
.bss:00418A44                 db    ? ;
.bss:00418A45                 db    ? ;
.bss:00418A46                 db    ? ;
.bss:00418A47                 db    ? ;
.bss:00418A48                 db    ? ;
.bss:00418A49                 db    ? ;
.bss:00418A4A                 db    ? ;
.bss:00418A4B                 db    ? ;
.bss:00418A4C                 db    ? ;
.bss:00418A4D                 db    ? ;
.bss:00418A4E                 db    ? ;
.bss:00418A4F                 db    ? ;
.bss:00418A50                 db    ? ;
.bss:00418A51                 db    ? ;
.bss:00418A52                 db    ? ;
.bss:00418A53                 db    ? ;
.bss:00418A54                 db    ? ;
.bss:00418A55                 db    ? ;
.bss:00418A56                 db    ? ;
.bss:00418A57                 db    ? ;
.bss:00418A58                 db    ? ;
.bss:00418A59                 db    ? ;
.bss:00418A5A                 db    ? ;
.bss:00418A5B                 db    ? ;
.bss:00418A5C                 db    ? ;
.bss:00418A5D                 db    ? ;
.bss:00418A5E                 db    ? ;
.bss:00418A5F                 db    ? ;
.bss:00418A60                 db    ? ;
.bss:00418A61                 db    ? ;
.bss:00418A62                 db    ? ;
.bss:00418A63                 db    ? ;
.bss:00418A64                 db    ? ;
.bss:00418A65                 db    ? ;
.bss:00418A66                 db    ? ;
.bss:00418A67                 db    ? ;
.bss:00418A68                 db    ? ;
.bss:00418A69                 db    ? ;
.bss:00418A6A                 db    ? ;
.bss:00418A6B                 db    ? ;
.bss:00418A6C                 db    ? ;
.bss:00418A6D                 db    ? ;
.bss:00418A6E                 db    ? ;
.bss:00418A6F                 db    ? ;
.bss:00418A70                 db    ? ;
.bss:00418A71                 db    ? ;
.bss:00418A72                 db    ? ;
.bss:00418A73                 db    ? ;
.bss:00418A74                 db    ? ;
.bss:00418A75                 db    ? ;
.bss:00418A76                 db    ? ;
.bss:00418A77                 db    ? ;
.bss:00418A78                 db    ? ;
.bss:00418A79                 db    ? ;
.bss:00418A7A                 db    ? ;
.bss:00418A7B                 db    ? ;
.bss:00418A7C                 db    ? ;
.bss:00418A7D                 db    ? ;
.bss:00418A7E                 db    ? ;
.bss:00418A7F                 db    ? ;
.bss:00418A80                 db    ? ;
.bss:00418A81                 db    ? ;
.bss:00418A82                 db    ? ;
.bss:00418A83                 db    ? ;
.bss:00418A84                 db    ? ;
.bss:00418A85                 db    ? ;
.bss:00418A86                 db    ? ;
.bss:00418A87                 db    ? ;
.bss:00418A88                 db    ? ;
.bss:00418A89                 db    ? ;
.bss:00418A8A                 db    ? ;
.bss:00418A8B                 db    ? ;
.bss:00418A8C                 db    ? ;
.bss:00418A8D                 db    ? ;
.bss:00418A8E                 db    ? ;
.bss:00418A8F                 db    ? ;
.bss:00418A90                 db    ? ;
.bss:00418A91                 db    ? ;
.bss:00418A92                 db    ? ;
.bss:00418A93                 db    ? ;
.bss:00418A94                 db    ? ;
.bss:00418A95                 db    ? ;
.bss:00418A96                 db    ? ;
.bss:00418A97                 db    ? ;
.bss:00418A98                 db    ? ;
.bss:00418A99                 db    ? ;
.bss:00418A9A                 db    ? ;
.bss:00418A9B                 db    ? ;
.bss:00418A9C                 db    ? ;
.bss:00418A9D                 db    ? ;
.bss:00418A9E                 db    ? ;
.bss:00418A9F                 db    ? ;
.bss:00418AA0                 db    ? ;
.bss:00418AA1                 db    ? ;
.bss:00418AA2                 db    ? ;
.bss:00418AA3                 db    ? ;
.bss:00418AA4                 db    ? ;
.bss:00418AA5                 db    ? ;
.bss:00418AA6                 db    ? ;
.bss:00418AA7                 db    ? ;
.bss:00418AA8                 db    ? ;
.bss:00418AA9                 db    ? ;
.bss:00418AAA                 db    ? ;
.bss:00418AAB                 db    ? ;
.bss:00418AAC                 db    ? ;
.bss:00418AAD                 db    ? ;
.bss:00418AAE                 db    ? ;
.bss:00418AAF                 db    ? ;
.bss:00418AB0                 db    ? ;
.bss:00418AB1                 db    ? ;
.bss:00418AB2                 db    ? ;
.bss:00418AB3                 db    ? ;
.bss:00418AB4                 db    ? ;
.bss:00418AB5                 db    ? ;
.bss:00418AB6                 db    ? ;
.bss:00418AB7                 db    ? ;
.bss:00418AB8                 db    ? ;
.bss:00418AB9                 db    ? ;
.bss:00418ABA                 db    ? ;
.bss:00418ABB                 db    ? ;
.bss:00418ABC                 db    ? ;
.bss:00418ABD                 db    ? ;
.bss:00418ABE                 db    ? ;
.bss:00418ABF                 db    ? ;
.bss:00418AC0                 db    ? ;
.bss:00418AC1                 db    ? ;
.bss:00418AC2                 db    ? ;
.bss:00418AC3                 db    ? ;
.bss:00418AC4                 db    ? ;
.bss:00418AC5                 db    ? ;
.bss:00418AC6                 db    ? ;
.bss:00418AC7                 db    ? ;
.bss:00418AC8                 db    ? ;
.bss:00418AC9                 db    ? ;
.bss:00418ACA                 db    ? ;
.bss:00418ACB                 db    ? ;
.bss:00418ACC                 db    ? ;
.bss:00418ACD                 db    ? ;
.bss:00418ACE                 db    ? ;
.bss:00418ACF                 db    ? ;
.bss:00418AD0                 db    ? ;
.bss:00418AD1                 db    ? ;
.bss:00418AD2                 db    ? ;
.bss:00418AD3                 db    ? ;
.bss:00418AD4                 db    ? ;
.bss:00418AD5                 db    ? ;
.bss:00418AD6                 db    ? ;
.bss:00418AD7                 db    ? ;
.bss:00418AD8                 db    ? ;
.bss:00418AD9                 db    ? ;
.bss:00418ADA                 db    ? ;
.bss:00418ADB                 db    ? ;
.bss:00418ADC                 db    ? ;
.bss:00418ADD                 db    ? ;
.bss:00418ADE                 db    ? ;
.bss:00418ADF                 db    ? ;
.bss:00418AE0                 db    ? ;
.bss:00418AE1                 db    ? ;
.bss:00418AE2                 db    ? ;
.bss:00418AE3                 db    ? ;
.bss:00418AE4                 db    ? ;
.bss:00418AE5                 db    ? ;
.bss:00418AE6                 db    ? ;
.bss:00418AE7                 db    ? ;
.bss:00418AE8                 db    ? ;
.bss:00418AE9                 db    ? ;
.bss:00418AEA                 db    ? ;
.bss:00418AEB                 db    ? ;
.bss:00418AEC                 db    ? ;
.bss:00418AED                 db    ? ;
.bss:00418AEE                 db    ? ;
.bss:00418AEF                 db    ? ;
.bss:00418AF0                 db    ? ;
.bss:00418AF1                 db    ? ;
.bss:00418AF2                 db    ? ;
.bss:00418AF3                 db    ? ;
.bss:00418AF4                 db    ? ;
.bss:00418AF5                 db    ? ;
.bss:00418AF6                 db    ? ;
.bss:00418AF7                 db    ? ;
.bss:00418AF8                 db    ? ;
.bss:00418AF9                 db    ? ;
.bss:00418AFA                 db    ? ;
.bss:00418AFB                 db    ? ;
.bss:00418AFC                 db    ? ;
.bss:00418AFD                 db    ? ;
.bss:00418AFE                 db    ? ;
.bss:00418AFF                 db    ? ;
.bss:00418B00                 db    ? ;
.bss:00418B01                 db    ? ;
.bss:00418B02                 db    ? ;
.bss:00418B03                 db    ? ;
.bss:00418B04                 db    ? ;
.bss:00418B05                 db    ? ;
.bss:00418B06                 db    ? ;
.bss:00418B07                 db    ? ;
.bss:00418B08                 db    ? ;
.bss:00418B09                 db    ? ;
.bss:00418B0A                 db    ? ;
.bss:00418B0B                 db    ? ;
.bss:00418B0C                 db    ? ;
.bss:00418B0D                 db    ? ;
.bss:00418B0E                 db    ? ;
.bss:00418B0F                 db    ? ;
.bss:00418B10                 db    ? ;
.bss:00418B11                 db    ? ;
.bss:00418B12                 db    ? ;
.bss:00418B13                 db    ? ;
.bss:00418B14                 db    ? ;
.bss:00418B15                 db    ? ;
.bss:00418B16                 db    ? ;
.bss:00418B17                 db    ? ;
.bss:00418B18                 db    ? ;
.bss:00418B19                 db    ? ;
.bss:00418B1A                 db    ? ;
.bss:00418B1B                 db    ? ;
.bss:00418B1C                 db    ? ;
.bss:00418B1D                 db    ? ;
.bss:00418B1E                 db    ? ;
.bss:00418B1F                 db    ? ;
.bss:00418B20                 db    ? ;
.bss:00418B21                 db    ? ;
.bss:00418B22                 db    ? ;
.bss:00418B23                 db    ? ;
.bss:00418B24                 db    ? ;
.bss:00418B25                 db    ? ;
.bss:00418B26                 db    ? ;
.bss:00418B27                 db    ? ;
.bss:00418B28                 db    ? ;
.bss:00418B29                 db    ? ;
.bss:00418B2A                 db    ? ;
.bss:00418B2B                 db    ? ;
.bss:00418B2C                 db    ? ;
.bss:00418B2D                 db    ? ;
.bss:00418B2E                 db    ? ;
.bss:00418B2F                 db    ? ;
.bss:00418B30                 db    ? ;
.bss:00418B31                 db    ? ;
.bss:00418B32                 db    ? ;
.bss:00418B33                 db    ? ;
.bss:00418B34                 db    ? ;
.bss:00418B35                 db    ? ;
.bss:00418B36                 db    ? ;
.bss:00418B37                 db    ? ;
.bss:00418B38                 db    ? ;
.bss:00418B39                 db    ? ;
.bss:00418B3A                 db    ? ;
.bss:00418B3B                 db    ? ;
.bss:00418B3C                 db    ? ;
.bss:00418B3D                 db    ? ;
.bss:00418B3E                 db    ? ;
.bss:00418B3F                 db    ? ;
.bss:00418B40                 db    ? ;
.bss:00418B41                 db    ? ;
.bss:00418B42                 db    ? ;
.bss:00418B43                 db    ? ;
.bss:00418B44                 db    ? ;
.bss:00418B45                 db    ? ;
.bss:00418B46                 db    ? ;
.bss:00418B47                 db    ? ;
.bss:00418B48                 db    ? ;
.bss:00418B49                 db    ? ;
.bss:00418B4A                 db    ? ;
.bss:00418B4B                 db    ? ;
.bss:00418B4C                 db    ? ;
.bss:00418B4D                 db    ? ;
.bss:00418B4E                 db    ? ;
.bss:00418B4F                 db    ? ;
.bss:00418B50                 db    ? ;
.bss:00418B51                 db    ? ;
.bss:00418B52                 db    ? ;
.bss:00418B53                 db    ? ;
.bss:00418B54                 db    ? ;
.bss:00418B55                 db    ? ;
.bss:00418B56                 db    ? ;
.bss:00418B57                 db    ? ;
.bss:00418B58                 db    ? ;
.bss:00418B59                 db    ? ;
.bss:00418B5A                 db    ? ;
.bss:00418B5B                 db    ? ;
.bss:00418B5C                 db    ? ;
.bss:00418B5D                 db    ? ;
.bss:00418B5E                 db    ? ;
.bss:00418B5F                 db    ? ;
.bss:00418B60                 db    ? ;
.bss:00418B61                 db    ? ;
.bss:00418B62                 db    ? ;
.bss:00418B63                 db    ? ;
.bss:00418B64                 db    ? ;
.bss:00418B65                 db    ? ;
.bss:00418B66                 db    ? ;
.bss:00418B67                 db    ? ;
.bss:00418B68                 db    ? ;
.bss:00418B69                 db    ? ;
.bss:00418B6A                 db    ? ;
.bss:00418B6B                 db    ? ;
.bss:00418B6C                 db    ? ;
.bss:00418B6D                 db    ? ;
.bss:00418B6E                 db    ? ;
.bss:00418B6F                 db    ? ;
.bss:00418B70                 db    ? ;
.bss:00418B71                 db    ? ;
.bss:00418B72                 db    ? ;
.bss:00418B73                 db    ? ;
.bss:00418B74                 db    ? ;
.bss:00418B75                 db    ? ;
.bss:00418B76                 db    ? ;
.bss:00418B77                 db    ? ;
.bss:00418B78                 db    ? ;
.bss:00418B79                 db    ? ;
.bss:00418B7A                 db    ? ;
.bss:00418B7B                 db    ? ;
.bss:00418B7C                 db    ? ;
.bss:00418B7D                 db    ? ;
.bss:00418B7E                 db    ? ;
.bss:00418B7F                 db    ? ;
.bss:00418B80                 db    ? ;
.bss:00418B81                 db    ? ;
.bss:00418B82                 db    ? ;
.bss:00418B83                 db    ? ;
.bss:00418B84                 db    ? ;
.bss:00418B85                 db    ? ;
.bss:00418B86                 db    ? ;
.bss:00418B87                 db    ? ;
.bss:00418B88                 db    ? ;
.bss:00418B89                 db    ? ;
.bss:00418B8A                 db    ? ;
.bss:00418B8B                 db    ? ;
.bss:00418B8C                 db    ? ;
.bss:00418B8D                 db    ? ;
.bss:00418B8E                 db    ? ;
.bss:00418B8F                 db    ? ;
.bss:00418B90                 db    ? ;
.bss:00418B91                 db    ? ;
.bss:00418B92                 db    ? ;
.bss:00418B93                 db    ? ;
.bss:00418B94                 db    ? ;
.bss:00418B95                 db    ? ;
.bss:00418B96                 db    ? ;
.bss:00418B97                 db    ? ;
.bss:00418B98                 db    ? ;
.bss:00418B99                 db    ? ;
.bss:00418B9A                 db    ? ;
.bss:00418B9B                 db    ? ;
.bss:00418B9C                 db    ? ;
.bss:00418B9D                 db    ? ;
.bss:00418B9E                 db    ? ;
.bss:00418B9F                 db    ? ;
.bss:00418BA0                 db    ? ;
.bss:00418BA1                 db    ? ;
.bss:00418BA2                 db    ? ;
.bss:00418BA3                 db    ? ;
.bss:00418BA4                 db    ? ;
.bss:00418BA5                 db    ? ;
.bss:00418BA6                 db    ? ;
.bss:00418BA7                 db    ? ;
.bss:00418BA8                 db    ? ;
.bss:00418BA9                 db    ? ;
.bss:00418BAA                 db    ? ;
.bss:00418BAB                 db    ? ;
.bss:00418BAC                 db    ? ;
.bss:00418BAD                 db    ? ;
.bss:00418BAE                 db    ? ;
.bss:00418BAF                 db    ? ;
.bss:00418BB0                 db    ? ;
.bss:00418BB1                 db    ? ;
.bss:00418BB2                 db    ? ;
.bss:00418BB3                 db    ? ;
.bss:00418BB4                 db    ? ;
.bss:00418BB5                 db    ? ;
.bss:00418BB6                 db    ? ;
.bss:00418BB7                 db    ? ;
.bss:00418BB8                 db    ? ;
.bss:00418BB9                 db    ? ;
.bss:00418BBA                 db    ? ;
.bss:00418BBB                 db    ? ;
.bss:00418BBC                 db    ? ;
.bss:00418BBD                 db    ? ;
.bss:00418BBE                 db    ? ;
.bss:00418BBF                 db    ? ;
.bss:00418BC0                 db    ? ;
.bss:00418BC1                 db    ? ;
.bss:00418BC2                 db    ? ;
.bss:00418BC3                 db    ? ;
.bss:00418BC4                 db    ? ;
.bss:00418BC5                 db    ? ;
.bss:00418BC6                 db    ? ;
.bss:00418BC7                 db    ? ;
.bss:00418BC8                 db    ? ;
.bss:00418BC9                 db    ? ;
.bss:00418BCA                 db    ? ;
.bss:00418BCB                 db    ? ;
.bss:00418BCC                 db    ? ;
.bss:00418BCD                 db    ? ;
.bss:00418BCE                 db    ? ;
.bss:00418BCF                 db    ? ;
.bss:00418BD0                 db    ? ;
.bss:00418BD1                 db    ? ;
.bss:00418BD2                 db    ? ;
.bss:00418BD3                 db    ? ;
.bss:00418BD4                 db    ? ;
.bss:00418BD5                 db    ? ;
.bss:00418BD6                 db    ? ;
.bss:00418BD7                 db    ? ;
.bss:00418BD8                 db    ? ;
.bss:00418BD9                 db    ? ;
.bss:00418BDA                 db    ? ;
.bss:00418BDB                 db    ? ;
.bss:00418BDC                 db    ? ;
.bss:00418BDD                 db    ? ;
.bss:00418BDE                 db    ? ;
.bss:00418BDF                 db    ? ;
.bss:00418BE0                 db    ? ;
.bss:00418BE1                 db    ? ;
.bss:00418BE2                 db    ? ;
.bss:00418BE3                 db    ? ;
.bss:00418BE4                 db    ? ;
.bss:00418BE5                 db    ? ;
.bss:00418BE6                 db    ? ;
.bss:00418BE7                 db    ? ;
.bss:00418BE8                 db    ? ;
.bss:00418BE9                 db    ? ;
.bss:00418BEA                 db    ? ;
.bss:00418BEB                 db    ? ;
.bss:00418BEC                 db    ? ;
.bss:00418BED                 db    ? ;
.bss:00418BEE                 db    ? ;
.bss:00418BEF                 db    ? ;
.bss:00418BF0                 db    ? ;
.bss:00418BF1                 db    ? ;
.bss:00418BF2                 db    ? ;
.bss:00418BF3                 db    ? ;
.bss:00418BF4                 db    ? ;
.bss:00418BF5                 db    ? ;
.bss:00418BF6                 db    ? ;
.bss:00418BF7                 db    ? ;
.bss:00418BF8                 db    ? ;
.bss:00418BF9                 db    ? ;
.bss:00418BFA                 db    ? ;
.bss:00418BFB                 db    ? ;
.bss:00418BFC                 db    ? ;
.bss:00418BFD                 db    ? ;
.bss:00418BFE                 db    ? ;
.bss:00418BFF                 db    ? ;
.bss:00418C00                 db    ? ;
.bss:00418C01                 db    ? ;
.bss:00418C02                 db    ? ;
.bss:00418C03                 db    ? ;
.bss:00418C04                 db    ? ;
.bss:00418C05                 db    ? ;
.bss:00418C06                 db    ? ;
.bss:00418C07                 db    ? ;
.bss:00418C08                 db    ? ;
.bss:00418C09                 db    ? ;
.bss:00418C0A                 db    ? ;
.bss:00418C0B                 db    ? ;
.bss:00418C0C                 db    ? ;
.bss:00418C0D                 db    ? ;
.bss:00418C0E                 db    ? ;
.bss:00418C0F                 db    ? ;
.bss:00418C10                 db    ? ;
.bss:00418C11                 db    ? ;
.bss:00418C12                 db    ? ;
.bss:00418C13                 db    ? ;
.bss:00418C14                 db    ? ;
.bss:00418C15                 db    ? ;
.bss:00418C16                 db    ? ;
.bss:00418C17                 db    ? ;
.bss:00418C18                 db    ? ;
.bss:00418C19                 db    ? ;
.bss:00418C1A                 db    ? ;
.bss:00418C1B                 db    ? ;
.bss:00418C1C                 db    ? ;
.bss:00418C1D                 db    ? ;
.bss:00418C1E                 db    ? ;
.bss:00418C1F                 db    ? ;
.bss:00418C20                 db    ? ;
.bss:00418C21                 db    ? ;
.bss:00418C22                 db    ? ;
.bss:00418C23                 db    ? ;
.bss:00418C24                 db    ? ;
.bss:00418C25                 db    ? ;
.bss:00418C26                 db    ? ;
.bss:00418C27                 db    ? ;
.bss:00418C28                 db    ? ;
.bss:00418C29                 db    ? ;
.bss:00418C2A                 db    ? ;
.bss:00418C2B                 db    ? ;
.bss:00418C2C                 db    ? ;
.bss:00418C2D                 db    ? ;
.bss:00418C2E                 db    ? ;
.bss:00418C2F                 db    ? ;
.bss:00418C30                 db    ? ;
.bss:00418C31                 db    ? ;
.bss:00418C32                 db    ? ;
.bss:00418C33                 db    ? ;
.bss:00418C34                 db    ? ;
.bss:00418C35                 db    ? ;
.bss:00418C36                 db    ? ;
.bss:00418C37                 db    ? ;
.bss:00418C38                 db    ? ;
.bss:00418C39                 db    ? ;
.bss:00418C3A                 db    ? ;
.bss:00418C3B                 db    ? ;
.bss:00418C3C                 db    ? ;
.bss:00418C3D                 db    ? ;
.bss:00418C3E                 db    ? ;
.bss:00418C3F                 db    ? ;
.bss:00418C40                 db    ? ;
.bss:00418C41                 db    ? ;
.bss:00418C42                 db    ? ;
.bss:00418C43                 db    ? ;
.bss:00418C44                 db    ? ;
.bss:00418C45                 db    ? ;
.bss:00418C46                 db    ? ;
.bss:00418C47                 db    ? ;
.bss:00418C48                 db    ? ;
.bss:00418C49                 db    ? ;
.bss:00418C4A                 db    ? ;
.bss:00418C4B                 db    ? ;
.bss:00418C4C                 db    ? ;
.bss:00418C4D                 db    ? ;
.bss:00418C4E                 db    ? ;
.bss:00418C4F                 db    ? ;
.bss:00418C50                 db    ? ;
.bss:00418C51                 db    ? ;
.bss:00418C52                 db    ? ;
.bss:00418C53                 db    ? ;
.bss:00418C54                 db    ? ;
.bss:00418C55                 db    ? ;
.bss:00418C56                 db    ? ;
.bss:00418C57                 db    ? ;
.bss:00418C58                 db    ? ;
.bss:00418C59                 db    ? ;
.bss:00418C5A                 db    ? ;
.bss:00418C5B                 db    ? ;
.bss:00418C5C                 db    ? ;
.bss:00418C5D                 db    ? ;
.bss:00418C5E                 db    ? ;
.bss:00418C5F                 db    ? ;
.bss:00418C60                 db    ? ;
.bss:00418C61                 db    ? ;
.bss:00418C62                 db    ? ;
.bss:00418C63                 db    ? ;
.bss:00418C64                 db    ? ;
.bss:00418C65                 db    ? ;
.bss:00418C66                 db    ? ;
.bss:00418C67                 db    ? ;
.bss:00418C68                 db    ? ;
.bss:00418C69                 db    ? ;
.bss:00418C6A                 db    ? ;
.bss:00418C6B                 db    ? ;
.bss:00418C6C                 db    ? ;
.bss:00418C6D                 db    ? ;
.bss:00418C6E                 db    ? ;
.bss:00418C6F                 db    ? ;
.bss:00418C70                 db    ? ;
.bss:00418C71                 db    ? ;
.bss:00418C72                 db    ? ;
.bss:00418C73                 db    ? ;
.bss:00418C74                 db    ? ;
.bss:00418C75                 db    ? ;
.bss:00418C76                 db    ? ;
.bss:00418C77                 db    ? ;
.bss:00418C78                 db    ? ;
.bss:00418C79                 db    ? ;
.bss:00418C7A                 db    ? ;
.bss:00418C7B                 db    ? ;
.bss:00418C7C                 db    ? ;
.bss:00418C7D                 db    ? ;
.bss:00418C7E                 db    ? ;
.bss:00418C7F                 db    ? ;
.bss:00418C80                 db    ? ;
.bss:00418C81                 db    ? ;
.bss:00418C82                 db    ? ;
.bss:00418C83                 db    ? ;
.bss:00418C84                 db    ? ;
.bss:00418C85                 db    ? ;
.bss:00418C86                 db    ? ;
.bss:00418C87                 db    ? ;
.bss:00418C88                 db    ? ;
.bss:00418C89                 db    ? ;
.bss:00418C8A                 db    ? ;
.bss:00418C8B                 db    ? ;
.bss:00418C8C                 db    ? ;
.bss:00418C8D                 db    ? ;
.bss:00418C8E                 db    ? ;
.bss:00418C8F                 db    ? ;
.bss:00418C90                 db    ? ;
.bss:00418C91                 db    ? ;
.bss:00418C92                 db    ? ;
.bss:00418C93                 db    ? ;
.bss:00418C94                 db    ? ;
.bss:00418C95                 db    ? ;
.bss:00418C96                 db    ? ;
.bss:00418C97                 db    ? ;
.bss:00418C98                 db    ? ;
.bss:00418C99                 db    ? ;
.bss:00418C9A                 db    ? ;
.bss:00418C9B                 db    ? ;
.bss:00418C9C                 db    ? ;
.bss:00418C9D                 db    ? ;
.bss:00418C9E                 db    ? ;
.bss:00418C9F                 db    ? ;
.bss:00418CA0                 db    ? ;
.bss:00418CA1                 db    ? ;
.bss:00418CA2                 db    ? ;
.bss:00418CA3                 db    ? ;
.bss:00418CA4                 db    ? ;
.bss:00418CA5                 db    ? ;
.bss:00418CA6                 db    ? ;
.bss:00418CA7                 db    ? ;
.bss:00418CA8                 db    ? ;
.bss:00418CA9                 db    ? ;
.bss:00418CAA                 db    ? ;
.bss:00418CAB                 db    ? ;
.bss:00418CAC                 db    ? ;
.bss:00418CAD                 db    ? ;
.bss:00418CAE                 db    ? ;
.bss:00418CAF                 db    ? ;
.bss:00418CB0                 db    ? ;
.bss:00418CB1                 db    ? ;
.bss:00418CB2                 db    ? ;
.bss:00418CB3                 db    ? ;
.bss:00418CB4                 db    ? ;
.bss:00418CB5                 db    ? ;
.bss:00418CB6                 db    ? ;
.bss:00418CB7                 db    ? ;
.bss:00418CB8                 db    ? ;
.bss:00418CB9                 db    ? ;
.bss:00418CBA                 db    ? ;
.bss:00418CBB                 db    ? ;
.bss:00418CBC                 db    ? ;
.bss:00418CBD                 db    ? ;
.bss:00418CBE                 db    ? ;
.bss:00418CBF                 db    ? ;
.bss:00418CC0                 db    ? ;
.bss:00418CC1                 db    ? ;
.bss:00418CC2                 db    ? ;
.bss:00418CC3                 db    ? ;
.bss:00418CC4                 db    ? ;
.bss:00418CC5                 db    ? ;
.bss:00418CC6                 db    ? ;
.bss:00418CC7                 db    ? ;
.bss:00418CC8                 db    ? ;
.bss:00418CC9                 db    ? ;
.bss:00418CCA                 db    ? ;
.bss:00418CCB                 db    ? ;
.bss:00418CCC                 db    ? ;
.bss:00418CCD                 db    ? ;
.bss:00418CCE                 db    ? ;
.bss:00418CCF                 db    ? ;
.bss:00418CD0                 db    ? ;
.bss:00418CD1                 db    ? ;
.bss:00418CD2                 db    ? ;
.bss:00418CD3                 db    ? ;
.bss:00418CD4                 db    ? ;
.bss:00418CD5                 db    ? ;
.bss:00418CD6                 db    ? ;
.bss:00418CD7                 db    ? ;
.bss:00418CD8                 db    ? ;
.bss:00418CD9                 db    ? ;
.bss:00418CDA                 db    ? ;
.bss:00418CDB                 db    ? ;
.bss:00418CDC                 db    ? ;
.bss:00418CDD                 db    ? ;
.bss:00418CDE                 db    ? ;
.bss:00418CDF                 db    ? ;
.bss:00418CE0                 db    ? ;
.bss:00418CE1                 db    ? ;
.bss:00418CE2                 db    ? ;
.bss:00418CE3                 db    ? ;
.bss:00418CE4                 db    ? ;
.bss:00418CE5                 db    ? ;
.bss:00418CE6                 db    ? ;
.bss:00418CE7                 db    ? ;
.bss:00418CE8                 db    ? ;
.bss:00418CE9                 db    ? ;
.bss:00418CEA                 db    ? ;
.bss:00418CEB                 db    ? ;
.bss:00418CEC                 db    ? ;
.bss:00418CED                 db    ? ;
.bss:00418CEE                 db    ? ;
.bss:00418CEF                 db    ? ;
.bss:00418CF0                 db    ? ;
.bss:00418CF1                 db    ? ;
.bss:00418CF2                 db    ? ;
.bss:00418CF3                 db    ? ;
.bss:00418CF4                 db    ? ;
.bss:00418CF5                 db    ? ;
.bss:00418CF6                 db    ? ;
.bss:00418CF7                 db    ? ;
.bss:00418CF8                 db    ? ;
.bss:00418CF9                 db    ? ;
.bss:00418CFA                 db    ? ;
.bss:00418CFB                 db    ? ;
.bss:00418CFC                 db    ? ;
.bss:00418CFD                 db    ? ;
.bss:00418CFE                 db    ? ;
.bss:00418CFF                 db    ? ;
.bss:00418D00                 db    ? ;
.bss:00418D01                 db    ? ;
.bss:00418D02                 db    ? ;
.bss:00418D03                 db    ? ;
.bss:00418D04                 db    ? ;
.bss:00418D05                 db    ? ;
.bss:00418D06                 db    ? ;
.bss:00418D07                 db    ? ;
.bss:00418D08                 db    ? ;
.bss:00418D09                 db    ? ;
.bss:00418D0A                 db    ? ;
.bss:00418D0B                 db    ? ;
.bss:00418D0C                 db    ? ;
.bss:00418D0D                 db    ? ;
.bss:00418D0E                 db    ? ;
.bss:00418D0F                 db    ? ;
.bss:00418D10                 db    ? ;
.bss:00418D11                 db    ? ;
.bss:00418D12                 db    ? ;
.bss:00418D13                 db    ? ;
.bss:00418D14                 db    ? ;
.bss:00418D15                 db    ? ;
.bss:00418D16                 db    ? ;
.bss:00418D17                 db    ? ;
.bss:00418D18                 db    ? ;
.bss:00418D19                 db    ? ;
.bss:00418D1A                 db    ? ;
.bss:00418D1B                 db    ? ;
.bss:00418D1C                 db    ? ;
.bss:00418D1D                 db    ? ;
.bss:00418D1E                 db    ? ;
.bss:00418D1F                 db    ? ;
.bss:00418D20                 db    ? ;
.bss:00418D21                 db    ? ;
.bss:00418D22                 db    ? ;
.bss:00418D23                 db    ? ;
.bss:00418D24                 db    ? ;
.bss:00418D25                 db    ? ;
.bss:00418D26                 db    ? ;
.bss:00418D27                 db    ? ;
.bss:00418D28                 db    ? ;
.bss:00418D29                 db    ? ;
.bss:00418D2A                 db    ? ;
.bss:00418D2B                 db    ? ;
.bss:00418D2C                 db    ? ;
.bss:00418D2D                 db    ? ;
.bss:00418D2E                 db    ? ;
.bss:00418D2F                 db    ? ;
.bss:00418D30                 db    ? ;
.bss:00418D31                 db    ? ;
.bss:00418D32                 db    ? ;
.bss:00418D33                 db    ? ;
.bss:00418D34                 db    ? ;
.bss:00418D35                 db    ? ;
.bss:00418D36                 db    ? ;
.bss:00418D37                 db    ? ;
.bss:00418D38                 db    ? ;
.bss:00418D39                 db    ? ;
.bss:00418D3A                 db    ? ;
.bss:00418D3B                 db    ? ;
.bss:00418D3C                 db    ? ;
.bss:00418D3D                 db    ? ;
.bss:00418D3E                 db    ? ;
.bss:00418D3F                 db    ? ;
.bss:00418D40                 db    ? ;
.bss:00418D41                 db    ? ;
.bss:00418D42                 db    ? ;
.bss:00418D43                 db    ? ;
.bss:00418D44                 db    ? ;
.bss:00418D45                 db    ? ;
.bss:00418D46                 db    ? ;
.bss:00418D47                 db    ? ;
.bss:00418D48                 db    ? ;
.bss:00418D49                 db    ? ;
.bss:00418D4A                 db    ? ;
.bss:00418D4B                 db    ? ;
.bss:00418D4C                 db    ? ;
.bss:00418D4D                 db    ? ;
.bss:00418D4E                 db    ? ;
.bss:00418D4F                 db    ? ;
.bss:00418D50                 db    ? ;
.bss:00418D51                 db    ? ;
.bss:00418D52                 db    ? ;
.bss:00418D53                 db    ? ;
.bss:00418D54                 db    ? ;
.bss:00418D55                 db    ? ;
.bss:00418D56                 db    ? ;
.bss:00418D57                 db    ? ;
.bss:00418D58                 db    ? ;
.bss:00418D59                 db    ? ;
.bss:00418D5A                 db    ? ;
.bss:00418D5B                 db    ? ;
.bss:00418D5C                 db    ? ;
.bss:00418D5D                 db    ? ;
.bss:00418D5E                 db    ? ;
.bss:00418D5F                 db    ? ;
.bss:00418D60                 db    ? ;
.bss:00418D61                 db    ? ;
.bss:00418D62                 db    ? ;
.bss:00418D63                 db    ? ;
.bss:00418D64                 db    ? ;
.bss:00418D65                 db    ? ;
.bss:00418D66                 db    ? ;
.bss:00418D67                 db    ? ;
.bss:00418D68                 db    ? ;
.bss:00418D69                 db    ? ;
.bss:00418D6A                 db    ? ;
.bss:00418D6B                 db    ? ;
.bss:00418D6C                 db    ? ;
.bss:00418D6D                 db    ? ;
.bss:00418D6E                 db    ? ;
.bss:00418D6F                 db    ? ;
.bss:00418D70                 db    ? ;
.bss:00418D71                 db    ? ;
.bss:00418D72                 db    ? ;
.bss:00418D73                 db    ? ;
.bss:00418D74                 db    ? ;
.bss:00418D75                 db    ? ;
.bss:00418D76                 db    ? ;
.bss:00418D77                 db    ? ;
.bss:00418D78                 db    ? ;
.bss:00418D79                 db    ? ;
.bss:00418D7A                 db    ? ;
.bss:00418D7B                 db    ? ;
.bss:00418D7C                 db    ? ;
.bss:00418D7D                 db    ? ;
.bss:00418D7E                 db    ? ;
.bss:00418D7F                 db    ? ;
.bss:00418D80                 db    ? ;
.bss:00418D81                 db    ? ;
.bss:00418D82                 db    ? ;
.bss:00418D83                 db    ? ;
.bss:00418D84                 db    ? ;
.bss:00418D85                 db    ? ;
.bss:00418D86                 db    ? ;
.bss:00418D87                 db    ? ;
.bss:00418D88                 db    ? ;
.bss:00418D89                 db    ? ;
.bss:00418D8A                 db    ? ;
.bss:00418D8B                 db    ? ;
.bss:00418D8C                 db    ? ;
.bss:00418D8D                 db    ? ;
.bss:00418D8E                 db    ? ;
.bss:00418D8F                 db    ? ;
.bss:00418D90                 db    ? ;
.bss:00418D91                 db    ? ;
.bss:00418D92                 db    ? ;
.bss:00418D93                 db    ? ;
.bss:00418D94                 db    ? ;
.bss:00418D95                 db    ? ;
.bss:00418D96                 db    ? ;
.bss:00418D97                 db    ? ;
.bss:00418D98                 db    ? ;
.bss:00418D99                 db    ? ;
.bss:00418D9A                 db    ? ;
.bss:00418D9B                 db    ? ;
.bss:00418D9C                 db    ? ;
.bss:00418D9D                 db    ? ;
.bss:00418D9E                 db    ? ;
.bss:00418D9F                 db    ? ;
.bss:00418DA0                 db    ? ;
.bss:00418DA1                 db    ? ;
.bss:00418DA2                 db    ? ;
.bss:00418DA3                 db    ? ;
.bss:00418DA4                 db    ? ;
.bss:00418DA5                 db    ? ;
.bss:00418DA6                 db    ? ;
.bss:00418DA7                 db    ? ;
.bss:00418DA8                 db    ? ;
.bss:00418DA9                 db    ? ;
.bss:00418DAA                 db    ? ;
.bss:00418DAB                 db    ? ;
.bss:00418DAC                 db    ? ;
.bss:00418DAD                 db    ? ;
.bss:00418DAE                 db    ? ;
.bss:00418DAF                 db    ? ;
.bss:00418DB0                 db    ? ;
.bss:00418DB1                 db    ? ;
.bss:00418DB2                 db    ? ;
.bss:00418DB3                 db    ? ;
.bss:00418DB4                 db    ? ;
.bss:00418DB5                 db    ? ;
.bss:00418DB6                 db    ? ;
.bss:00418DB7                 db    ? ;
.bss:00418DB8                 db    ? ;
.bss:00418DB9                 db    ? ;
.bss:00418DBA                 db    ? ;
.bss:00418DBB                 db    ? ;
.bss:00418DBC                 db    ? ;
.bss:00418DBD                 db    ? ;
.bss:00418DBE                 db    ? ;
.bss:00418DBF                 db    ? ;
.bss:00418DC0                 db    ? ;
.bss:00418DC1                 db    ? ;
.bss:00418DC2                 db    ? ;
.bss:00418DC3                 db    ? ;
.bss:00418DC4                 db    ? ;
.bss:00418DC5                 db    ? ;
.bss:00418DC6                 db    ? ;
.bss:00418DC7                 db    ? ;
.bss:00418DC8                 db    ? ;
.bss:00418DC9                 db    ? ;
.bss:00418DCA                 db    ? ;
.bss:00418DCB                 db    ? ;
.bss:00418DCC                 db    ? ;
.bss:00418DCD                 db    ? ;
.bss:00418DCE                 db    ? ;
.bss:00418DCF                 db    ? ;
.bss:00418DD0                 db    ? ;
.bss:00418DD1                 db    ? ;
.bss:00418DD2                 db    ? ;
.bss:00418DD3                 db    ? ;
.bss:00418DD4                 db    ? ;
.bss:00418DD5                 db    ? ;
.bss:00418DD6                 db    ? ;
.bss:00418DD7                 db    ? ;
.bss:00418DD8                 db    ? ;
.bss:00418DD9                 db    ? ;
.bss:00418DDA                 db    ? ;
.bss:00418DDB                 db    ? ;
.bss:00418DDC                 db    ? ;
.bss:00418DDD                 db    ? ;
.bss:00418DDE                 db    ? ;
.bss:00418DDF                 db    ? ;
.bss:00418DE0                 db    ? ;
.bss:00418DE1                 db    ? ;
.bss:00418DE2                 db    ? ;
.bss:00418DE3                 db    ? ;
.bss:00418DE4                 db    ? ;
.bss:00418DE5                 db    ? ;
.bss:00418DE6                 db    ? ;
.bss:00418DE7                 db    ? ;
.bss:00418DE8                 db    ? ;
.bss:00418DE9                 db    ? ;
.bss:00418DEA                 db    ? ;
.bss:00418DEB                 db    ? ;
.bss:00418DEC                 db    ? ;
.bss:00418DED                 db    ? ;
.bss:00418DEE                 db    ? ;
.bss:00418DEF                 db    ? ;
.bss:00418DF0                 db    ? ;
.bss:00418DF1                 db    ? ;
.bss:00418DF2                 db    ? ;
.bss:00418DF3                 db    ? ;
.bss:00418DF4                 db    ? ;
.bss:00418DF5                 db    ? ;
.bss:00418DF6                 db    ? ;
.bss:00418DF7                 db    ? ;
.bss:00418DF8                 db    ? ;
.bss:00418DF9                 db    ? ;
.bss:00418DFA                 db    ? ;
.bss:00418DFB                 db    ? ;
.bss:00418DFC                 db    ? ;
.bss:00418DFD                 db    ? ;
.bss:00418DFE                 db    ? ;
.bss:00418DFF                 db    ? ;
.bss:00418E00                 db    ? ;
.bss:00418E01                 db    ? ;
.bss:00418E02                 db    ? ;
.bss:00418E03                 db    ? ;
.bss:00418E04                 db    ? ;
.bss:00418E05                 db    ? ;
.bss:00418E06                 db    ? ;
.bss:00418E07                 db    ? ;
.bss:00418E08                 db    ? ;
.bss:00418E09                 db    ? ;
.bss:00418E0A                 db    ? ;
.bss:00418E0B                 db    ? ;
.bss:00418E0C                 db    ? ;
.bss:00418E0D                 db    ? ;
.bss:00418E0E                 db    ? ;
.bss:00418E0F                 db    ? ;
.bss:00418E10                 db    ? ;
.bss:00418E11                 db    ? ;
.bss:00418E12                 db    ? ;
.bss:00418E13                 db    ? ;
.bss:00418E14                 db    ? ;
.bss:00418E15                 db    ? ;
.bss:00418E16                 db    ? ;
.bss:00418E17                 db    ? ;
.bss:00418E18                 db    ? ;
.bss:00418E19                 db    ? ;
.bss:00418E1A                 db    ? ;
.bss:00418E1B                 db    ? ;
.bss:00418E1C                 db    ? ;
.bss:00418E1D                 db    ? ;
.bss:00418E1E                 db    ? ;
.bss:00418E1F                 db    ? ;
.bss:00418E20                 db    ? ;
.bss:00418E21                 db    ? ;
.bss:00418E22                 db    ? ;
.bss:00418E23                 db    ? ;
.bss:00418E24                 db    ? ;
.bss:00418E25                 db    ? ;
.bss:00418E26                 db    ? ;
.bss:00418E27                 db    ? ;
.bss:00418E28                 db    ? ;
.bss:00418E29                 db    ? ;
.bss:00418E2A                 db    ? ;
.bss:00418E2B                 db    ? ;
.bss:00418E2C                 db    ? ;
.bss:00418E2D                 db    ? ;
.bss:00418E2E                 db    ? ;
.bss:00418E2F                 db    ? ;
.bss:00418E30                 db    ? ;
.bss:00418E31                 db    ? ;
.bss:00418E32                 db    ? ;
.bss:00418E33                 db    ? ;
.bss:00418E34                 db    ? ;
.bss:00418E35                 db    ? ;
.bss:00418E36                 db    ? ;
.bss:00418E37                 db    ? ;
.bss:00418E38                 db    ? ;
.bss:00418E39                 db    ? ;
.bss:00418E3A                 db    ? ;
.bss:00418E3B                 db    ? ;
.bss:00418E3C                 db    ? ;
.bss:00418E3D                 db    ? ;
.bss:00418E3E                 db    ? ;
.bss:00418E3F                 db    ? ;
.bss:00418E40                 db    ? ;
.bss:00418E41                 db    ? ;
.bss:00418E42                 db    ? ;
.bss:00418E43                 db    ? ;
.bss:00418E44                 db    ? ;
.bss:00418E45                 db    ? ;
.bss:00418E46                 db    ? ;
.bss:00418E47                 db    ? ;
.bss:00418E48                 db    ? ;
.bss:00418E49                 db    ? ;
.bss:00418E4A                 db    ? ;
.bss:00418E4B                 db    ? ;
.bss:00418E4C                 db    ? ;
.bss:00418E4D                 db    ? ;
.bss:00418E4E                 db    ? ;
.bss:00418E4F                 db    ? ;
.bss:00418E50                 db    ? ;
.bss:00418E51                 db    ? ;
.bss:00418E52                 db    ? ;
.bss:00418E53                 db    ? ;
.bss:00418E54                 db    ? ;
.bss:00418E55                 db    ? ;
.bss:00418E56                 db    ? ;
.bss:00418E57                 db    ? ;
.bss:00418E58                 db    ? ;
.bss:00418E59                 db    ? ;
.bss:00418E5A                 db    ? ;
.bss:00418E5B                 db    ? ;
.bss:00418E5C                 db    ? ;
.bss:00418E5D                 db    ? ;
.bss:00418E5E                 db    ? ;
.bss:00418E5F                 db    ? ;
.bss:00418E60                 db    ? ;
.bss:00418E61                 db    ? ;
.bss:00418E62                 db    ? ;
.bss:00418E63                 db    ? ;
.bss:00418E64                 db    ? ;
.bss:00418E65                 db    ? ;
.bss:00418E66                 db    ? ;
.bss:00418E67                 db    ? ;
.bss:00418E68                 db    ? ;
.bss:00418E69                 db    ? ;
.bss:00418E6A                 db    ? ;
.bss:00418E6B                 db    ? ;
.bss:00418E6C                 db    ? ;
.bss:00418E6D                 db    ? ;
.bss:00418E6E                 db    ? ;
.bss:00418E6F                 db    ? ;
.bss:00418E70                 db    ? ;
.bss:00418E71                 db    ? ;
.bss:00418E72                 db    ? ;
.bss:00418E73                 db    ? ;
.bss:00418E74                 db    ? ;
.bss:00418E75                 db    ? ;
.bss:00418E76                 db    ? ;
.bss:00418E77                 db    ? ;
.bss:00418E78                 db    ? ;
.bss:00418E79                 db    ? ;
.bss:00418E7A                 db    ? ;
.bss:00418E7B                 db    ? ;
.bss:00418E7C                 db    ? ;
.bss:00418E7D                 db    ? ;
.bss:00418E7E                 db    ? ;
.bss:00418E7F                 db    ? ;
.bss:00418E80                 db    ? ;
.bss:00418E81                 db    ? ;
.bss:00418E82                 db    ? ;
.bss:00418E83                 db    ? ;
.bss:00418E84                 db    ? ;
.bss:00418E85                 db    ? ;
.bss:00418E86                 db    ? ;
.bss:00418E87                 db    ? ;
.bss:00418E88                 db    ? ;
.bss:00418E89                 db    ? ;
.bss:00418E8A                 db    ? ;
.bss:00418E8B                 db    ? ;
.bss:00418E8C                 db    ? ;
.bss:00418E8D                 db    ? ;
.bss:00418E8E                 db    ? ;
.bss:00418E8F                 db    ? ;
.bss:00418E90                 db    ? ;
.bss:00418E91                 db    ? ;
.bss:00418E92                 db    ? ;
.bss:00418E93                 db    ? ;
.bss:00418E94                 db    ? ;
.bss:00418E95                 db    ? ;
.bss:00418E96                 db    ? ;
.bss:00418E97                 db    ? ;
.bss:00418E98                 db    ? ;
.bss:00418E99                 db    ? ;
.bss:00418E9A                 db    ? ;
.bss:00418E9B                 db    ? ;
.bss:00418E9C                 db    ? ;
.bss:00418E9D                 db    ? ;
.bss:00418E9E                 db    ? ;
.bss:00418E9F                 db    ? ;
.bss:00418EA0                 db    ? ;
.bss:00418EA1                 db    ? ;
.bss:00418EA2                 db    ? ;
.bss:00418EA3                 db    ? ;
.bss:00418EA4                 db    ? ;
.bss:00418EA5                 db    ? ;
.bss:00418EA6                 db    ? ;
.bss:00418EA7                 db    ? ;
.bss:00418EA8                 db    ? ;
.bss:00418EA9                 db    ? ;
.bss:00418EAA                 db    ? ;
.bss:00418EAB                 db    ? ;
.bss:00418EAC                 db    ? ;
.bss:00418EAD                 db    ? ;
.bss:00418EAE                 db    ? ;
.bss:00418EAF                 db    ? ;
.bss:00418EB0                 db    ? ;
.bss:00418EB1                 db    ? ;
.bss:00418EB2                 db    ? ;
.bss:00418EB3                 db    ? ;
.bss:00418EB4                 db    ? ;
.bss:00418EB5                 db    ? ;
.bss:00418EB6                 db    ? ;
.bss:00418EB7                 db    ? ;
.bss:00418EB8                 db    ? ;
.bss:00418EB9                 db    ? ;
.bss:00418EBA                 db    ? ;
.bss:00418EBB                 db    ? ;
.bss:00418EBC                 db    ? ;
.bss:00418EBD                 db    ? ;
.bss:00418EBE                 db    ? ;
.bss:00418EBF                 db    ? ;
.bss:00418EC0                 db    ? ;
.bss:00418EC1                 db    ? ;
.bss:00418EC2                 db    ? ;
.bss:00418EC3                 db    ? ;
.bss:00418EC4                 db    ? ;
.bss:00418EC5                 db    ? ;
.bss:00418EC6                 db    ? ;
.bss:00418EC7                 db    ? ;
.bss:00418EC8                 db    ? ;
.bss:00418EC9                 db    ? ;
.bss:00418ECA                 db    ? ;
.bss:00418ECB                 db    ? ;
.bss:00418ECC                 db    ? ;
.bss:00418ECD                 db    ? ;
.bss:00418ECE                 db    ? ;
.bss:00418ECF                 db    ? ;
.bss:00418ED0                 db    ? ;
.bss:00418ED1                 db    ? ;
.bss:00418ED2                 db    ? ;
.bss:00418ED3                 db    ? ;
.bss:00418ED4                 db    ? ;
.bss:00418ED5                 db    ? ;
.bss:00418ED6                 db    ? ;
.bss:00418ED7                 db    ? ;
.bss:00418ED8                 db    ? ;
.bss:00418ED9                 db    ? ;
.bss:00418EDA                 db    ? ;
.bss:00418EDB                 db    ? ;
.bss:00418EDC                 db    ? ;
.bss:00418EDD                 db    ? ;
.bss:00418EDE                 db    ? ;
.bss:00418EDF                 db    ? ;
.bss:00418EE0                 db    ? ;
.bss:00418EE1                 db    ? ;
.bss:00418EE2                 db    ? ;
.bss:00418EE3                 db    ? ;
.bss:00418EE4                 db    ? ;
.bss:00418EE5                 db    ? ;
.bss:00418EE6                 db    ? ;
.bss:00418EE7                 db    ? ;
.bss:00418EE8                 db    ? ;
.bss:00418EE9                 db    ? ;
.bss:00418EEA                 db    ? ;
.bss:00418EEB                 db    ? ;
.bss:00418EEC                 db    ? ;
.bss:00418EED                 db    ? ;
.bss:00418EEE                 db    ? ;
.bss:00418EEF                 db    ? ;
.bss:00418EF0                 db    ? ;
.bss:00418EF1                 db    ? ;
.bss:00418EF2                 db    ? ;
.bss:00418EF3                 db    ? ;
.bss:00418EF4                 db    ? ;
.bss:00418EF5                 db    ? ;
.bss:00418EF6                 db    ? ;
.bss:00418EF7                 db    ? ;
.bss:00418EF8                 db    ? ;
.bss:00418EF9                 db    ? ;
.bss:00418EFA                 db    ? ;
.bss:00418EFB                 db    ? ;
.bss:00418EFC                 db    ? ;
.bss:00418EFD                 db    ? ;
.bss:00418EFE                 db    ? ;
.bss:00418EFF                 db    ? ;
.bss:00418F00                 db    ? ;
.bss:00418F01                 db    ? ;
.bss:00418F02                 db    ? ;
.bss:00418F03                 db    ? ;
.bss:00418F04                 db    ? ;
.bss:00418F05                 db    ? ;
.bss:00418F06                 db    ? ;
.bss:00418F07                 db    ? ;
.bss:00418F08                 db    ? ;
.bss:00418F09                 db    ? ;
.bss:00418F0A                 db    ? ;
.bss:00418F0B                 db    ? ;
.bss:00418F0C                 db    ? ;
.bss:00418F0D                 db    ? ;
.bss:00418F0E                 db    ? ;
.bss:00418F0F                 db    ? ;
.bss:00418F10                 db    ? ;
.bss:00418F11                 db    ? ;
.bss:00418F12                 db    ? ;
.bss:00418F13                 db    ? ;
.bss:00418F14                 db    ? ;
.bss:00418F15                 db    ? ;
.bss:00418F16                 db    ? ;
.bss:00418F17                 db    ? ;
.bss:00418F18                 db    ? ;
.bss:00418F19                 db    ? ;
.bss:00418F1A                 db    ? ;
.bss:00418F1B                 db    ? ;
.bss:00418F1C                 db    ? ;
.bss:00418F1D                 db    ? ;
.bss:00418F1E                 db    ? ;
.bss:00418F1F                 db    ? ;
.bss:00418F20                 db    ? ;
.bss:00418F21                 db    ? ;
.bss:00418F22                 db    ? ;
.bss:00418F23                 db    ? ;
.bss:00418F24                 db    ? ;
.bss:00418F25                 db    ? ;
.bss:00418F26                 db    ? ;
.bss:00418F27                 db    ? ;
.bss:00418F28                 db    ? ;
.bss:00418F29                 db    ? ;
.bss:00418F2A                 db    ? ;
.bss:00418F2B                 db    ? ;
.bss:00418F2C                 db    ? ;
.bss:00418F2D                 db    ? ;
.bss:00418F2E                 db    ? ;
.bss:00418F2F                 db    ? ;
.bss:00418F30                 db    ? ;
.bss:00418F31                 db    ? ;
.bss:00418F32                 db    ? ;
.bss:00418F33                 db    ? ;
.bss:00418F34                 db    ? ;
.bss:00418F35                 db    ? ;
.bss:00418F36                 db    ? ;
.bss:00418F37                 db    ? ;
.bss:00418F38                 db    ? ;
.bss:00418F39                 db    ? ;
.bss:00418F3A                 db    ? ;
.bss:00418F3B                 db    ? ;
.bss:00418F3C                 db    ? ;
.bss:00418F3D                 db    ? ;
.bss:00418F3E                 db    ? ;
.bss:00418F3F                 db    ? ;
.bss:00418F40                 db    ? ;
.bss:00418F41                 db    ? ;
.bss:00418F42                 db    ? ;
.bss:00418F43                 db    ? ;
.bss:00418F44                 db    ? ;
.bss:00418F45                 db    ? ;
.bss:00418F46                 db    ? ;
.bss:00418F47                 db    ? ;
.bss:00418F48                 db    ? ;
.bss:00418F49                 db    ? ;
.bss:00418F4A                 db    ? ;
.bss:00418F4B                 db    ? ;
.bss:00418F4C                 db    ? ;
.bss:00418F4D                 db    ? ;
.bss:00418F4E                 db    ? ;
.bss:00418F4F                 db    ? ;
.bss:00418F50                 db    ? ;
.bss:00418F51                 db    ? ;
.bss:00418F52                 db    ? ;
.bss:00418F53                 db    ? ;
.bss:00418F54                 db    ? ;
.bss:00418F55                 db    ? ;
.bss:00418F56                 db    ? ;
.bss:00418F57                 db    ? ;
.bss:00418F58                 db    ? ;
.bss:00418F59                 db    ? ;
.bss:00418F5A                 db    ? ;
.bss:00418F5B                 db    ? ;
.bss:00418F5C                 db    ? ;
.bss:00418F5D                 db    ? ;
.bss:00418F5E                 db    ? ;
.bss:00418F5F                 db    ? ;
.bss:00418F60                 db    ? ;
.bss:00418F61                 db    ? ;
.bss:00418F62                 db    ? ;
.bss:00418F63                 db    ? ;
.bss:00418F64                 db    ? ;
.bss:00418F65                 db    ? ;
.bss:00418F66                 db    ? ;
.bss:00418F67                 db    ? ;
.bss:00418F68                 db    ? ;
.bss:00418F69                 db    ? ;
.bss:00418F6A                 db    ? ;
.bss:00418F6B                 db    ? ;
.bss:00418F6C                 db    ? ;
.bss:00418F6D                 db    ? ;
.bss:00418F6E                 db    ? ;
.bss:00418F6F                 db    ? ;
.bss:00418F70                 db    ? ;
.bss:00418F71                 db    ? ;
.bss:00418F72                 db    ? ;
.bss:00418F73                 db    ? ;
.bss:00418F74                 db    ? ;
.bss:00418F75                 db    ? ;
.bss:00418F76                 db    ? ;
.bss:00418F77                 db    ? ;
.bss:00418F78                 db    ? ;
.bss:00418F79                 db    ? ;
.bss:00418F7A                 db    ? ;
.bss:00418F7B                 db    ? ;
.bss:00418F7C                 db    ? ;
.bss:00418F7D                 db    ? ;
.bss:00418F7E                 db    ? ;
.bss:00418F7F                 db    ? ;
.bss:00418F80                 db    ? ;
.bss:00418F81                 db    ? ;
.bss:00418F82                 db    ? ;
.bss:00418F83                 db    ? ;
.bss:00418F84                 db    ? ;
.bss:00418F85                 db    ? ;
.bss:00418F86                 db    ? ;
.bss:00418F87                 db    ? ;
.bss:00418F88                 db    ? ;
.bss:00418F89                 db    ? ;
.bss:00418F8A                 db    ? ;
.bss:00418F8B                 db    ? ;
.bss:00418F8C                 db    ? ;
.bss:00418F8D                 db    ? ;
.bss:00418F8E                 db    ? ;
.bss:00418F8F                 db    ? ;
.bss:00418F90                 db    ? ;
.bss:00418F91                 db    ? ;
.bss:00418F92                 db    ? ;
.bss:00418F93                 db    ? ;
.bss:00418F94                 db    ? ;
.bss:00418F95                 db    ? ;
.bss:00418F96                 db    ? ;
.bss:00418F97                 db    ? ;
.bss:00418F98                 db    ? ;
.bss:00418F99                 db    ? ;
.bss:00418F9A                 db    ? ;
.bss:00418F9B                 db    ? ;
.bss:00418F9C                 db    ? ;
.bss:00418F9D                 db    ? ;
.bss:00418F9E                 db    ? ;
.bss:00418F9F                 db    ? ;
.bss:00418FA0                 db    ? ;
.bss:00418FA1                 db    ? ;
.bss:00418FA2                 db    ? ;
.bss:00418FA3                 db    ? ;
.bss:00418FA4                 db    ? ;
.bss:00418FA5                 db    ? ;
.bss:00418FA6                 db    ? ;
.bss:00418FA7                 db    ? ;
.bss:00418FA8                 db    ? ;
.bss:00418FA9                 db    ? ;
.bss:00418FAA                 db    ? ;
.bss:00418FAB                 db    ? ;
.bss:00418FAC                 db    ? ;
.bss:00418FAD                 db    ? ;
.bss:00418FAE                 db    ? ;
.bss:00418FAF                 db    ? ;
.bss:00418FB0                 db    ? ;
.bss:00418FB1                 db    ? ;
.bss:00418FB2                 db    ? ;
.bss:00418FB3                 db    ? ;
.bss:00418FB4                 db    ? ;
.bss:00418FB5                 db    ? ;
.bss:00418FB6                 db    ? ;
.bss:00418FB7                 db    ? ;
.bss:00418FB8                 db    ? ;
.bss:00418FB9                 db    ? ;
.bss:00418FBA                 db    ? ;
.bss:00418FBB                 db    ? ;
.bss:00418FBC                 db    ? ;
.bss:00418FBD                 db    ? ;
.bss:00418FBE                 db    ? ;
.bss:00418FBF                 db    ? ;
.bss:00418FC0                 db    ? ;
.bss:00418FC1                 db    ? ;
.bss:00418FC2                 db    ? ;
.bss:00418FC3                 db    ? ;
.bss:00418FC4                 db    ? ;
.bss:00418FC5                 db    ? ;
.bss:00418FC6                 db    ? ;
.bss:00418FC7                 db    ? ;
.bss:00418FC8                 db    ? ;
.bss:00418FC9                 db    ? ;
.bss:00418FCA                 db    ? ;
.bss:00418FCB                 db    ? ;
.bss:00418FCC                 db    ? ;
.bss:00418FCD                 db    ? ;
.bss:00418FCE                 db    ? ;
.bss:00418FCF                 db    ? ;
.bss:00418FD0                 db    ? ;
.bss:00418FD1                 db    ? ;
.bss:00418FD2                 db    ? ;
.bss:00418FD3                 db    ? ;
.bss:00418FD4                 db    ? ;
.bss:00418FD5                 db    ? ;
.bss:00418FD6                 db    ? ;
.bss:00418FD7                 db    ? ;
.bss:00418FD8                 db    ? ;
.bss:00418FD9                 db    ? ;
.bss:00418FDA                 db    ? ;
.bss:00418FDB                 db    ? ;
.bss:00418FDC                 db    ? ;
.bss:00418FDD                 db    ? ;
.bss:00418FDE                 db    ? ;
.bss:00418FDF                 db    ? ;
.bss:00418FE0                 db    ? ;
.bss:00418FE1                 db    ? ;
.bss:00418FE2                 db    ? ;
.bss:00418FE3                 db    ? ;
.bss:00418FE4                 db    ? ;
.bss:00418FE5                 db    ? ;
.bss:00418FE6                 db    ? ;
.bss:00418FE7                 db    ? ;
.bss:00418FE8                 db    ? ;
.bss:00418FE9                 db    ? ;
.bss:00418FEA                 db    ? ;
.bss:00418FEB                 db    ? ;
.bss:00418FEC                 db    ? ;
.bss:00418FED                 db    ? ;
.bss:00418FEE                 db    ? ;
.bss:00418FEF                 db    ? ;
.bss:00418FF0                 db    ? ;
.bss:00418FF1                 db    ? ;
.bss:00418FF2                 db    ? ;
.bss:00418FF3                 db    ? ;
.bss:00418FF4                 db    ? ;
.bss:00418FF5                 db    ? ;
.bss:00418FF6                 db    ? ;
.bss:00418FF7                 db    ? ;
.bss:00418FF8                 db    ? ;
.bss:00418FF9                 db    ? ;
.bss:00418FFA                 db    ? ;
.bss:00418FFB                 db    ? ;
.bss:00418FFC                 db    ? ;
.bss:00418FFD                 db    ? ;
.bss:00418FFE                 db    ? ;
.bss:00418FFF                 db    ? ;
.bss:00419000                 db    ? ;
.bss:00419001                 db    ? ;
.bss:00419002                 db    ? ;
.bss:00419003                 db    ? ;
.bss:00419004                 db    ? ;
.bss:00419005                 db    ? ;
.bss:00419006                 db    ? ;
.bss:00419007                 db    ? ;
.bss:00419008                 db    ? ;
.bss:00419009                 db    ? ;
.bss:0041900A                 db    ? ;
.bss:0041900B                 db    ? ;
.bss:0041900C                 db    ? ;
.bss:0041900D                 db    ? ;
.bss:0041900E                 db    ? ;
.bss:0041900F                 db    ? ;
.bss:00419010 ; size_t ElementCount
.bss:00419010 ElementCount    dd ?                    ; DATA XREF: sub_4016C0+418↑r
.bss:00419010                                         ; sub_4016C0+42E↑w ...
.bss:00419014                 align 10h
.bss:00419020 ; LPCSTR dword_419020
.bss:00419020 dword_419020    dd ?                    ; DATA XREF: sub_402680+7↑r
.bss:00419020                                         ; sub_402680+222↑w ...
.bss:00419024                 align 10h
.bss:00419030 ; char *dword_419030
.bss:00419030 dword_419030    dd ?                    ; DATA XREF: sub_402680+1F6↑w
.bss:00419030                                         ; sub_402680+204↑w ...
.bss:00419034                 align 10h
.bss:00419040 ; char *Str
.bss:00419040 Str             dd ?                    ; DATA XREF: sub_4016C0+78↑w
.bss:00419040                                         ; sub_4016C0+DF↑w ...
.bss:00419044                 align 10h
.bss:00419050 byte_419050     db ?                    ; DATA XREF: sub_4016C0+67↑w
.bss:00419050                                         ; sub_4016C0:loc_401964↑w ...
.bss:00419051                 align 10h
.bss:00419060 dword_419060    dd ?                    ; DATA XREF: sub_4016C0+7D↑w
.bss:00419060                                         ; sub_4016C0+152↑w ...
.bss:00419064                 align 10h
.bss:00419070 dword_419070    dd ?                    ; DATA XREF: sub_4016C0+4B6↑w
.bss:00419070                                         ; sub_401F00+12↑r ...
.bss:00419074                 align 10h
.bss:00419080 ; void *Buffer
.bss:00419080 Buffer          dd ?                    ; DATA XREF: sub_4016C0+39D↑w
.bss:00419080                                         ; sub_4016C0+3B4↑w ...
.bss:00419084                 align 10h
.bss:00419090 dword_419090    dd ?                    ; DATA XREF: sub_4016C0+34A↑w
.bss:00419090                                         ; sub_4016C0:loc_401A20↑r ...
.bss:00419094                 align 10h
.bss:004190A0 dword_4190A0    dd ?                    ; DATA XREF: sub_4016C0+382↑w
.bss:004190A0                                         ; sub_401F00:loc_4021DC↑r ...
.bss:004190A4                 align 10h
.bss:004190B0 dword_4190B0    dd ?                    ; DATA XREF: sub_4016C0+2D5↑w
.bss:004190B0                                         ; sub_4016C0+30B↑o ...
.bss:004190B4 dword_4190B4    dd ?                    ; DATA XREF: sub_4016C0+2CA↑w
.bss:004190B8                 align 10h
.bss:004190C0 dword_4190C0    dd ?                    ; DATA XREF: sub_4016C0+2E6↑w
.bss:004190C4 dword_4190C4    dd ?                    ; DATA XREF: sub_4016C0+2F3↑w
.bss:004190C8                 align 10h
.bss:004190D0 ; LPCSTR dword_4190D0
.bss:004190D0 dword_4190D0    dd ?                    ; DATA XREF: sub_402680+42↑r
.bss:004190D0                                         ; sub_402680:loc_4027C4↑w ...
.bss:004190D4                 align 10h
.bss:004190E0 ; FILE *Stream
.bss:004190E0 Stream          dd ?                    ; DATA XREF: sub_402680+14A↑w
.bss:004190E0                                         ; sub_4028D0+3↑r
.bss:004190E4                 align 10h
.bss:004190F0 unk_4190F0      db    ? ;               ; DATA XREF: sub_403AD0+100↑o
.bss:004190F0                                         ; .data:off_416018↑o
.bss:004190F1                 db    ? ;
.bss:004190F2                 db    ? ;
.bss:004190F3                 db    ? ;
.bss:004190F4                 db    ? ;
.bss:004190F5                 db    ? ;
.bss:004190F6                 db    ? ;
.bss:004190F7                 db    ? ;
.bss:004190F8                 db    ? ;
.bss:004190F9                 db    ? ;
.bss:004190FA                 db    ? ;
.bss:004190FB                 db    ? ;
.bss:004190FC                 db    ? ;
.bss:004190FD                 db    ? ;
.bss:004190FE                 db    ? ;
.bss:004190FF                 db    ? ;
.bss:00419100                 db    ? ;
.bss:00419101                 db    ? ;
.bss:00419102                 db    ? ;
.bss:00419103                 db    ? ;
.bss:00419104                 db    ? ;
.bss:00419105                 db    ? ;
.bss:00419106                 db    ? ;
.bss:00419107                 db    ? ;
.bss:00419108                 db    ? ;
.bss:00419109                 db    ? ;
.bss:0041910A                 db    ? ;
.bss:0041910B                 db    ? ;
.bss:0041910C                 db    ? ;
.bss:0041910D                 db    ? ;
.bss:0041910E                 db    ? ;
.bss:0041910F                 db    ? ;
.bss:00419110                 db    ? ;
.bss:00419111                 db    ? ;
.bss:00419112                 db    ? ;
.bss:00419113                 db    ? ;
.bss:00419114                 db    ? ;
.bss:00419115                 db    ? ;
.bss:00419116                 db    ? ;
.bss:00419117                 db    ? ;
.bss:00419118                 db    ? ;
.bss:00419119                 db    ? ;
.bss:0041911A                 db    ? ;
.bss:0041911B                 db    ? ;
.bss:0041911C                 db    ? ;
.bss:0041911D                 db    ? ;
.bss:0041911E                 db    ? ;
.bss:0041911F                 db    ? ;
.bss:00419120                 db    ? ;
.bss:00419121                 db    ? ;
.bss:00419122                 db    ? ;
.bss:00419123                 db    ? ;
.bss:00419124                 db    ? ;
.bss:00419125                 db    ? ;
.bss:00419126                 db    ? ;
.bss:00419127                 db    ? ;
.bss:00419128                 db    ? ;
.bss:00419129                 db    ? ;
.bss:0041912A                 db    ? ;
.bss:0041912B                 db    ? ;
.bss:0041912C                 db    ? ;
.bss:0041912D                 db    ? ;
.bss:0041912E                 db    ? ;
.bss:0041912F                 db    ? ;
.bss:00419130                 db    ? ;
.bss:00419131                 db    ? ;
.bss:00419132                 db    ? ;
.bss:00419133                 db    ? ;
.bss:00419134                 db    ? ;
.bss:00419135                 db    ? ;
.bss:00419136                 db    ? ;
.bss:00419137                 db    ? ;
.bss:00419138                 db    ? ;
.bss:00419139                 db    ? ;
.bss:0041913A                 db    ? ;
.bss:0041913B                 db    ? ;
.bss:0041913C                 db    ? ;
.bss:0041913D                 db    ? ;
.bss:0041913E                 db    ? ;
.bss:0041913F                 db    ? ;
.bss:00419140                 db    ? ;
.bss:00419141                 db    ? ;
.bss:00419142                 db    ? ;
.bss:00419143                 db    ? ;
.bss:00419144                 db    ? ;
.bss:00419145                 db    ? ;
.bss:00419146                 db    ? ;
.bss:00419147                 db    ? ;
.bss:00419148                 db    ? ;
.bss:00419149                 db    ? ;
.bss:0041914A                 db    ? ;
.bss:0041914B                 db    ? ;
.bss:0041914C                 db    ? ;
.bss:0041914D                 db    ? ;
.bss:0041914E                 db    ? ;
.bss:0041914F                 db    ? ;
.bss:00419150                 db    ? ;
.bss:00419151                 db    ? ;
.bss:00419152                 db    ? ;
.bss:00419153                 db    ? ;
.bss:00419154                 db    ? ;
.bss:00419155                 db    ? ;
.bss:00419156                 db    ? ;
.bss:00419157                 db    ? ;
.bss:00419158                 db    ? ;
.bss:00419159                 db    ? ;
.bss:0041915A                 db    ? ;
.bss:0041915B                 db    ? ;
.bss:0041915C                 db    ? ;
.bss:0041915D                 db    ? ;
.bss:0041915E                 db    ? ;
.bss:0041915F                 db    ? ;
.bss:00419160                 db    ? ;
.bss:00419161                 db    ? ;
.bss:00419162                 db    ? ;
.bss:00419163                 db    ? ;
.bss:00419164                 db    ? ;
.bss:00419165                 db    ? ;
.bss:00419166                 db    ? ;
.bss:00419167                 db    ? ;
.bss:00419168                 db    ? ;
.bss:00419169                 db    ? ;
.bss:0041916A                 db    ? ;
.bss:0041916B                 db    ? ;
.bss:0041916C                 db    ? ;
.bss:0041916D                 db    ? ;
.bss:0041916E                 db    ? ;
.bss:0041916F                 db    ? ;
.bss:00419170                 db    ? ;
.bss:00419171                 db    ? ;
.bss:00419172                 db    ? ;
.bss:00419173                 db    ? ;
.bss:00419174                 db    ? ;
.bss:00419175                 db    ? ;
.bss:00419176                 db    ? ;
.bss:00419177                 db    ? ;
.bss:00419178                 db    ? ;
.bss:00419179                 db    ? ;
.bss:0041917A                 db    ? ;
.bss:0041917B                 db    ? ;
.bss:0041917C                 db    ? ;
.bss:0041917D                 db    ? ;
.bss:0041917E                 db    ? ;
.bss:0041917F                 db    ? ;
.bss:00419180                 db    ? ;
.bss:00419181                 db    ? ;
.bss:00419182                 db    ? ;
.bss:00419183                 db    ? ;
.bss:00419184                 db    ? ;
.bss:00419185                 db    ? ;
.bss:00419186                 db    ? ;
.bss:00419187                 db    ? ;
.bss:00419188                 db    ? ;
.bss:00419189                 db    ? ;
.bss:0041918A                 db    ? ;
.bss:0041918B                 db    ? ;
.bss:0041918C                 db    ? ;
.bss:0041918D                 db    ? ;
.bss:0041918E                 db    ? ;
.bss:0041918F                 db    ? ;
.bss:00419190                 db    ? ;
.bss:00419191                 db    ? ;
.bss:00419192                 db    ? ;
.bss:00419193                 db    ? ;
.bss:00419194                 db    ? ;
.bss:00419195                 db    ? ;
.bss:00419196                 db    ? ;
.bss:00419197                 db    ? ;
.bss:00419198                 db    ? ;
.bss:00419199                 db    ? ;
.bss:0041919A                 db    ? ;
.bss:0041919B                 db    ? ;
.bss:0041919C                 db    ? ;
.bss:0041919D                 db    ? ;
.bss:0041919E                 db    ? ;
.bss:0041919F                 db    ? ;
.bss:004191A0                 db    ? ;
.bss:004191A1                 db    ? ;
.bss:004191A2                 db    ? ;
.bss:004191A3                 db    ? ;
.bss:004191A4                 db    ? ;
.bss:004191A5                 db    ? ;
.bss:004191A6                 db    ? ;
.bss:004191A7                 db    ? ;
.bss:004191A8                 db    ? ;
.bss:004191A9                 db    ? ;
.bss:004191AA                 db    ? ;
.bss:004191AB                 db    ? ;
.bss:004191AC                 db    ? ;
.bss:004191AD                 db    ? ;
.bss:004191AE                 db    ? ;
.bss:004191AF                 db    ? ;
.bss:004191B0                 db    ? ;
.bss:004191B1                 db    ? ;
.bss:004191B2                 db    ? ;
.bss:004191B3                 db    ? ;
.bss:004191B4                 db    ? ;
.bss:004191B5                 db    ? ;
.bss:004191B6                 db    ? ;
.bss:004191B7                 db    ? ;
.bss:004191B8                 db    ? ;
.bss:004191B9                 db    ? ;
.bss:004191BA                 db    ? ;
.bss:004191BB                 db    ? ;
.bss:004191BC                 db    ? ;
.bss:004191BD                 db    ? ;
.bss:004191BE                 db    ? ;
.bss:004191BF                 db    ? ;
.bss:004191C0                 db    ? ;
.bss:004191C1                 db    ? ;
.bss:004191C2                 db    ? ;
.bss:004191C3                 db    ? ;
.bss:004191C4                 db    ? ;
.bss:004191C5                 db    ? ;
.bss:004191C6                 db    ? ;
.bss:004191C7                 db    ? ;
.bss:004191C8                 db    ? ;
.bss:004191C9                 db    ? ;
.bss:004191CA                 db    ? ;
.bss:004191CB                 db    ? ;
.bss:004191CC                 db    ? ;
.bss:004191CD                 db    ? ;
.bss:004191CE                 db    ? ;
.bss:004191CF                 db    ? ;
.bss:004191D0                 db    ? ;
.bss:004191D1                 db    ? ;
.bss:004191D2                 db    ? ;
.bss:004191D3                 db    ? ;
.bss:004191D4                 db    ? ;
.bss:004191D5                 db    ? ;
.bss:004191D6                 db    ? ;
.bss:004191D7                 db    ? ;
.bss:004191D8                 db    ? ;
.bss:004191D9                 db    ? ;
.bss:004191DA                 db    ? ;
.bss:004191DB                 db    ? ;
.bss:004191DC                 db    ? ;
.bss:004191DD                 db    ? ;
.bss:004191DE                 db    ? ;
.bss:004191DF                 db    ? ;
.bss:004191E0                 db    ? ;
.bss:004191E1                 db    ? ;
.bss:004191E2                 db    ? ;
.bss:004191E3                 db    ? ;
.bss:004191E4                 db    ? ;
.bss:004191E5                 db    ? ;
.bss:004191E6                 db    ? ;
.bss:004191E7                 db    ? ;
.bss:004191E8                 db    ? ;
.bss:004191E9                 db    ? ;
.bss:004191EA                 db    ? ;
.bss:004191EB                 db    ? ;
.bss:004191EC                 db    ? ;
.bss:004191ED                 db    ? ;
.bss:004191EE                 db    ? ;
.bss:004191EF                 db    ? ;
.bss:004191F0 dword_4191F0    dd ?                    ; DATA XREF: .text:loc_403461↑o
.bss:004191F0                                         ; .text:loc_403480↑o ...
.bss:004191F4 dword_4191F4    dd ?                    ; DATA XREF: .text:loc_403500↑o
.bss:004191F4                                         ; .text:00403988↑r ...
.bss:004191F8 dword_4191F8    dd ?                    ; DATA XREF: .text:00403982↑r
.bss:004191F8                                         ; sub_403A30+2C↑r
.bss:004191FC dword_4191FC    dd ?                    ; DATA XREF: .text:00403976↑r
.bss:004191FC                                         ; sub_403A30+22↑r
.bss:00419200 dword_419200    dd ?                    ; DATA XREF: .text:00403992↑r
.bss:00419200                                         ; sub_403A30+36↑r
.bss:00419204 dword_419204    dd ?                    ; DATA XREF: .text:004039A2↑r
.bss:00419204                                         ; sub_403A30+4E↑r
.bss:00419208 dword_419208    dd ?                    ; DATA XREF: .text:004039BF↑r
.bss:00419208                                         ; sub_403A30+62↑r
.bss:0041920C dword_41920C    dd ?                    ; DATA XREF: .text:004039B5↑r
.bss:0041920C                                         ; sub_403A30+70↑r
.bss:00419210 dword_419210    dd ?                    ; DATA XREF: .text:00403998↑r
.bss:00419210                                         ; sub_403A30+7A↑r
.bss:00419214                 align 10h
.bss:00419220 dword_419220    dd ?                    ; DATA XREF: sub_406ED0+AB↑r
.bss:00419220                                         ; sub_406ED0+334B↑w
.bss:00419224                 align 10h
.bss:00419230 byte_419230     db ?                    ; DATA XREF: sub_403FC0:loc_404A2C↑r
.bss:00419230                                         ; sub_403FC0:loc_404A58↑r ...
.bss:00419231                 db    ? ;
.bss:00419232                 db    ? ;
.bss:00419233                 db    ? ;
.bss:00419234                 db    ? ;
.bss:00419235                 db    ? ;
.bss:00419236                 db    ? ;
.bss:00419237                 db    ? ;
.bss:00419238                 db    ? ;
.bss:00419239                 db    ? ;
.bss:0041923A                 db    ? ;
.bss:0041923B                 db    ? ;
.bss:0041923C                 db    ? ;
.bss:0041923D                 db    ? ;
.bss:0041923E                 db    ? ;
.bss:0041923F                 db    ? ;
.bss:00419240                 db    ? ;
.bss:00419241                 db    ? ;
.bss:00419242                 db    ? ;
.bss:00419243                 db    ? ;
.bss:00419244                 db    ? ;
.bss:00419245                 db    ? ;
.bss:00419246                 db    ? ;
.bss:00419247                 db    ? ;
.bss:00419248                 db    ? ;
.bss:00419249                 db    ? ;
.bss:0041924A                 db    ? ;
.bss:0041924B                 db    ? ;
.bss:0041924C                 db    ? ;
.bss:0041924D                 db    ? ;
.bss:0041924E                 db    ? ;
.bss:0041924F                 db    ? ;
.bss:00419250                 db    ? ;
.bss:00419251                 db    ? ;
.bss:00419252                 db    ? ;
.bss:00419253                 db    ? ;
.bss:00419254                 db    ? ;
.bss:00419255                 db    ? ;
.bss:00419256                 db    ? ;
.bss:00419257                 db    ? ;
.bss:00419258                 db    ? ;
.bss:00419259                 db    ? ;
.bss:0041925A                 db    ? ;
.bss:0041925B                 db    ? ;
.bss:0041925C                 db    ? ;
.bss:0041925D                 db    ? ;
.bss:0041925E                 db    ? ;
.bss:0041925F                 db    ? ;
.bss:00419260                 db    ? ;
.bss:00419261                 db    ? ;
.bss:00419262                 db    ? ;
.bss:00419263                 db    ? ;
.bss:00419264                 db    ? ;
.bss:00419265                 db    ? ;
.bss:00419266                 db    ? ;
.bss:00419267                 db    ? ;
.bss:00419268                 db    ? ;
.bss:00419269                 db    ? ;
.bss:0041926A                 db    ? ;
.bss:0041926B                 db    ? ;
.bss:0041926C                 db    ? ;
.bss:0041926D                 db    ? ;
.bss:0041926E                 db    ? ;
.bss:0041926F                 db    ? ;
.bss:00419270                 db    ? ;
.bss:00419271                 db    ? ;
.bss:00419272                 db    ? ;
.bss:00419273                 db    ? ;
.bss:00419274                 db    ? ;
.bss:00419275                 db    ? ;
.bss:00419276                 db    ? ;
.bss:00419277                 db    ? ;
.bss:00419278                 db    ? ;
.bss:00419279                 db    ? ;
.bss:0041927A                 db    ? ;
.bss:0041927B                 db    ? ;
.bss:0041927C                 db    ? ;
.bss:0041927D                 db    ? ;
.bss:0041927E                 db    ? ;
.bss:0041927F                 db    ? ;
.bss:00419280                 db    ? ;
.bss:00419281                 db    ? ;
.bss:00419282                 db    ? ;
.bss:00419283                 db    ? ;
.bss:00419284                 db    ? ;
.bss:00419285                 db    ? ;
.bss:00419286                 db    ? ;
.bss:00419287                 db    ? ;
.bss:00419288                 db    ? ;
.bss:00419289                 db    ? ;
.bss:0041928A                 db    ? ;
.bss:0041928B                 db    ? ;
.bss:0041928C                 db    ? ;
.bss:0041928D                 db    ? ;
.bss:0041928E                 db    ? ;
.bss:0041928F byte_41928F     db ?                    ; DATA XREF: sub_406ED0+333F↑w
.bss:00419290                 db    ? ;
.bss:00419291                 db    ? ;
.bss:00419292                 db    ? ;
.bss:00419293                 db    ? ;
.bss:00419294                 db    ? ;
.bss:00419295                 db    ? ;
.bss:00419296                 db    ? ;
.bss:00419297                 db    ? ;
.bss:00419298                 db    ? ;
.bss:00419299                 db    ? ;
.bss:0041929A                 db    ? ;
.bss:0041929B                 db    ? ;
.bss:0041929C                 db    ? ;
.bss:0041929D                 db    ? ;
.bss:0041929E                 db    ? ;
.bss:0041929F                 db    ? ;
.bss:004192A0                 db    ? ;
.bss:004192A1                 db    ? ;
.bss:004192A2                 db    ? ;
.bss:004192A3                 db    ? ;
.bss:004192A4                 db    ? ;
.bss:004192A5                 db    ? ;
.bss:004192A6                 db    ? ;
.bss:004192A7                 db    ? ;
.bss:004192A8                 db    ? ;
.bss:004192A9                 db    ? ;
.bss:004192AA                 db    ? ;
.bss:004192AB                 db    ? ;
.bss:004192AC                 db    ? ;
.bss:004192AD                 db    ? ;
.bss:004192AE                 db    ? ;
.bss:004192AF                 db    ? ;
.bss:004192B0                 db    ? ;
.bss:004192B1                 db    ? ;
.bss:004192B2                 db    ? ;
.bss:004192B3                 db    ? ;
.bss:004192B4                 db    ? ;
.bss:004192B5                 db    ? ;
.bss:004192B6                 db    ? ;
.bss:004192B7                 db    ? ;
.bss:004192B8                 db    ? ;
.bss:004192B9                 db    ? ;
.bss:004192BA                 db    ? ;
.bss:004192BB                 db    ? ;
.bss:004192BC                 db    ? ;
.bss:004192BD                 db    ? ;
.bss:004192BE                 db    ? ;
.bss:004192BF                 db    ? ;
.bss:004192C0                 db    ? ;
.bss:004192C1                 db    ? ;
.bss:004192C2                 db    ? ;
.bss:004192C3                 db    ? ;
.bss:004192C4                 db    ? ;
.bss:004192C5                 db    ? ;
.bss:004192C6                 db    ? ;
.bss:004192C7                 db    ? ;
.bss:004192C8                 db    ? ;
.bss:004192C9                 db    ? ;
.bss:004192CA                 db    ? ;
.bss:004192CB                 db    ? ;
.bss:004192CC                 db    ? ;
.bss:004192CD                 db    ? ;
.bss:004192CE                 db    ? ;
.bss:004192CF                 db    ? ;
.bss:004192D0                 db    ? ;
.bss:004192D1                 db    ? ;
.bss:004192D2                 db    ? ;
.bss:004192D3                 db    ? ;
.bss:004192D4                 db    ? ;
.bss:004192D5                 db    ? ;
.bss:004192D6                 db    ? ;
.bss:004192D7                 db    ? ;
.bss:004192D8                 db    ? ;
.bss:004192D9                 db    ? ;
.bss:004192DA                 db    ? ;
.bss:004192DB                 db    ? ;
.bss:004192DC                 db    ? ;
.bss:004192DD                 db    ? ;
.bss:004192DE                 db    ? ;
.bss:004192DF                 db    ? ;
.bss:004192E0                 db    ? ;
.bss:004192E1                 db    ? ;
.bss:004192E2                 db    ? ;
.bss:004192E3                 db    ? ;
.bss:004192E4                 db    ? ;
.bss:004192E5                 db    ? ;
.bss:004192E6                 db    ? ;
.bss:004192E7                 db    ? ;
.bss:004192E8                 db    ? ;
.bss:004192E9                 db    ? ;
.bss:004192EA                 db    ? ;
.bss:004192EB                 db    ? ;
.bss:004192EC                 db    ? ;
.bss:004192ED                 db    ? ;
.bss:004192EE                 db    ? ;
.bss:004192EF                 db    ? ;
.bss:004192F0                 db    ? ;
.bss:004192F1                 db    ? ;
.bss:004192F2                 db    ? ;
.bss:004192F3                 db    ? ;
.bss:004192F4                 db    ? ;
.bss:004192F5                 db    ? ;
.bss:004192F6                 db    ? ;
.bss:004192F7                 db    ? ;
.bss:004192F8                 db    ? ;
.bss:004192F9                 db    ? ;
.bss:004192FA                 db    ? ;
.bss:004192FB                 db    ? ;
.bss:004192FC                 db    ? ;
.bss:004192FD                 db    ? ;
.bss:004192FE                 db    ? ;
.bss:004192FF                 db    ? ;
.bss:00419300                 db    ? ;
.bss:00419301                 db    ? ;
.bss:00419302                 db    ? ;
.bss:00419303                 db    ? ;
.bss:00419304                 db    ? ;
.bss:00419305                 db    ? ;
.bss:00419306                 db    ? ;
.bss:00419307                 db    ? ;
.bss:00419308                 db    ? ;
.bss:00419309                 db    ? ;
.bss:0041930A                 db    ? ;
.bss:0041930B                 db    ? ;
.bss:0041930C                 db    ? ;
.bss:0041930D                 db    ? ;
.bss:0041930E                 db    ? ;
.bss:0041930F                 db    ? ;
.bss:00419310                 db    ? ;
.bss:00419311                 db    ? ;
.bss:00419312                 db    ? ;
.bss:00419313                 db    ? ;
.bss:00419314                 db    ? ;
.bss:00419315                 db    ? ;
.bss:00419316                 db    ? ;
.bss:00419317                 db    ? ;
.bss:00419318                 db    ? ;
.bss:00419319                 db    ? ;
.bss:0041931A                 db    ? ;
.bss:0041931B                 db    ? ;
.bss:0041931C                 db    ? ;
.bss:0041931D                 db    ? ;
.bss:0041931E                 db    ? ;
.bss:0041931F                 db    ? ;
.bss:00419320                 db    ? ;
.bss:00419321                 db    ? ;
.bss:00419322                 db    ? ;
.bss:00419323                 db    ? ;
.bss:00419324                 db    ? ;
.bss:00419325                 db    ? ;
.bss:00419326                 db    ? ;
.bss:00419327                 db    ? ;
.bss:00419328                 db    ? ;
.bss:00419329                 db    ? ;
.bss:0041932A                 db    ? ;
.bss:0041932B                 db    ? ;
.bss:0041932C                 db    ? ;
.bss:0041932D                 db    ? ;
.bss:0041932E                 db    ? ;
.bss:0041932F                 db    ? ;
.bss:00419330 unk_419330      db    ? ;               ; DATA XREF: sub_403FC0+148↑o
.bss:00419330                                         ; sub_403FC0+153↑o ...
.bss:00419331                 db    ? ;
.bss:00419332                 db    ? ;
.bss:00419333                 db    ? ;
.bss:00419334                 db    ? ;
.bss:00419335                 db    ? ;
.bss:00419336                 db    ? ;
.bss:00419337                 db    ? ;
.bss:00419338                 db    ? ;
.bss:00419339                 db    ? ;
.bss:0041933A                 db    ? ;
.bss:0041933B                 db    ? ;
.bss:0041933C                 db    ? ;
.bss:0041933D                 db    ? ;
.bss:0041933E                 db    ? ;
.bss:0041933F                 db    ? ;
.bss:00419340 dword_419340    dd ?                    ; DATA XREF: sub_40B6A0+9↑o
.bss:00419340                                         ; sub_40B6A0+17↑w ...
.bss:00419344 dword_419344    dd ?                    ; DATA XREF: sub_40B6A0+21↑w
.bss:00419344                                         ; .text:0040B759↑w
.bss:00419348 dword_419348    dd ?                    ; DATA XREF: sub_40B6A0+77↑r
.bss:00419348                                         ; .text:0040B7A7↑r
.bss:0041934C dword_41934C    dd ?                    ; DATA XREF: sub_40B6A0+6B↑r
.bss:0041934C                                         ; .text:0040B79B↑r
.bss:00419350                 db    ? ;
.bss:00419351                 db    ? ;
.bss:00419352                 db    ? ;
.bss:00419353                 db    ? ;
.bss:00419354                 db    ? ;
.bss:00419355                 db    ? ;
.bss:00419356                 db    ? ;
.bss:00419357                 db    ? ;
.bss:00419358                 db    ? ;
.bss:00419359                 db    ? ;
.bss:0041935A                 db    ? ;
.bss:0041935B                 db    ? ;
.bss:0041935C                 db    ? ;
.bss:0041935D                 db    ? ;
.bss:0041935E                 db    ? ;
.bss:0041935F                 db    ? ;
.bss:00419360                 db    ? ;
.bss:00419361                 db    ? ;
.bss:00419362                 db    ? ;
.bss:00419363                 db    ? ;
.bss:00419364                 db    ? ;
.bss:00419365                 db    ? ;
.bss:00419366                 db    ? ;
.bss:00419367                 db    ? ;
.bss:00419368                 db    ? ;
.bss:00419369                 db    ? ;
.bss:0041936A                 db    ? ;
.bss:0041936B                 db    ? ;
.bss:0041936C                 db    ? ;
.bss:0041936D                 db    ? ;
.bss:0041936E                 db    ? ;
.bss:0041936F                 db    ? ;
.bss:00419370 ; char *dword_419370
.bss:00419370 dword_419370    dd ?                    ; DATA XREF: .text:0040BF24↑w
.bss:00419370                                         ; sub_40BF50+58↑r
.bss:00419374                 align 10h
.bss:00419380 ; char *Str1
.bss:00419380 Str1            dd ?                    ; DATA XREF: sub_40C584:loc_40C5BD↑w
.bss:00419380                                         ; sub_40C584:loc_40C6F0↑r
.bss:00419384                 align 10h
.bss:00419390 dword_419390    dd ?                    ; DATA XREF: sub_40C584+2D↑r
.bss:00419390                                         ; sub_40C584+3F↑w
.bss:00419394                 align 10h
.bss:004193A0 dword_4193A0    dd ?                    ; DATA XREF: sub_40CFC0+6E↑r
.bss:004193A0                                         ; sub_40CFC0+9A↑r ...
.bss:004193A4 dword_4193A4    dd ?                    ; DATA XREF: sub_40CFC0:loc_40D028↑r
.bss:004193A4                                         ; sub_40CFC0+A0↑r ...
.bss:004193A8                 align 10h
.bss:004193B0 dword_4193B0    dd ?                    ; DATA XREF: sub_40D960↑r
.bss:004193B0                                         ; .text:loc_40DBA2↑w
.bss:004193B4                 align 10h
.bss:004193C0 dword_4193C0    dd ?                    ; DATA XREF: sub_40E3D0+100↑r
.bss:004193C0                                         ; sub_40E3D0+308↑w
.bss:004193C4                 align 10h
.bss:004193D0 ; char *dword_4193D0
.bss:004193D0 dword_4193D0    dd ?                    ; DATA XREF: sub_40E3D0:loc_40E734↑r
.bss:004193D0                                         ; sub_40E3D0+3B6↑r ...
.bss:004193D4                 align 10h
.bss:004193E0 dword_4193E0    dd ?                    ; DATA XREF: sub_40FC50+1C↑r
.bss:004193E0                                         ; sub_40FC50+104↑w
.bss:004193E4                 align 10h
.bss:004193F0 dword_4193F0    dd ?                    ; DATA XREF: sub_40FC50+B↑r
.bss:004193F0                                         ; sub_40FC50+71↑w
.bss:004193F4                 align 10h
.bss:00419400 dword_419400    dd ?                    ; DATA XREF: sub_40FC50+85↑r
.bss:00419400                                         ; sub_40FC50+B9↑w
.bss:00419404 dword_419404    dd ?                    ; DATA XREF: sub_40FC50+C4↑w
.bss:00419408 dword_419408    dd ?                    ; DATA XREF: sub_40FC50+2E↑o
.bss:00419408                                         ; sub_40FC50+CF↑w
.bss:0041940C dword_41940C    dd ?                    ; DATA XREF: sub_40FC50+DA↑w
.bss:00419410                 align 200h
.bss:00419600 dword_419600    dd ?                    ; DATA XREF: sub_412610+8↑r
.bss:00419600                                         ; sub_412720:loc_4127A2↑w ...
.bss:00419604                 align 10h
.bss:00419610 ; struct _OSVERSIONINFOA VersionInformation
.bss:00419610 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_412720:loc_412740↑o
.bss:00419610                                         ; sub_412720+2C↑w ...
.bss:004196A4 word_4196A4     dw ?                    ; DATA XREF: sub_412720:loc_4127D3↑r
.bss:004196A6                 align 4
.bss:004196A8 word_4196A8     dw ?                    ; DATA XREF: .text:loc_412196↑r
.bss:004196A8                                         ; .text:004121C4↑r ...
.bss:004196AA byte_4196AA     db ?                    ; DATA XREF: .text:00412155↑r
.bss:004196AB                 align 10h
.bss:004196B0 dword_4196B0    dd ?                    ; DATA XREF: sub_412720+6↑r
.bss:004196B0                                         ; sub_412720+75↑w
.bss:004196B4                 align 10h
.bss:004196C0 dword_4196C0    dd ?                    ; DATA XREF: sub_4016C0+2E↑w
.bss:004196C0                                         ; sub_4016C0+127↑r ...
.bss:004196C4                 align 20h
.bss:004196E0 dword_4196E0    dd ?                    ; DATA XREF: .text:00406C20↑r
.bss:004196E0                                         ; .text:00406C29↑w ...
.bss:004196E4                 align 10h
.bss:004196F0 dword_4196F0    dd ?                    ; DATA XREF: sub_4016C0+D9↑r
.bss:004196F0                                         ; sub_40B6A0+71↑w ...
.bss:004196F4                 align 10h
.bss:00419700 dword_419700    dd ?                    ; CODE XREF: sub_40C584+63↑p
.bss:00419700                                         ; DATA XREF: sub_40C480+1E↑r ...
.bss:00419704                 align 10h
.bss:00419710 dword_419710    dd ?                    ; DATA XREF: sub_40C480+4E↑w
.bss:00419710                                         ; sub_40C584+AB↑w
.bss:00419714                 align 40h
.bss:00419740 dword_419740    dd ?                    ; DATA XREF: sub_40C584+13↑r
.bss:00419744                 align 1000h
.bss:00419744 _bss            ends
.bss:00419744
.idata:0041A000 ; Section 4. (virtual address 0001A000)
.idata:0041A000 ; Virtual size                  : 00000E64 (   3684.)
.idata:0041A000 ; Section size in file          : 00001000 (   4096.)
.idata:0041A000 ; Offset to raw data for section: 00014800
.idata:0041A000 ; Flags C0000040: Data Readable Writable
.idata:0041A000 ; Alignment     : default
.idata:0041A000 ; ===========================================================================
.idata:0041A000
.idata:0041A000 ; Segment type: Externs
.idata:0041A000 ; _idata
.idata:0041A000
.idata:0041A001
.idata:0041A2C8 ;
.idata:0041A2C8 ; Imports from libintl3.dll
.idata:0041A2C8 ;
.idata:0041A2C8                 extrn libintl_bindtextdomain:dword
.idata:0041A2C8                                         ; CODE XREF: sub_4016C0+48↑p
.idata:0041A2C8                                         ; DATA XREF: sub_4016C0+48↑r ...
.idata:0041A2CC                 extrn libintl_gettext:dword
.idata:0041A2CC                                         ; CODE XREF: sub_4016C0+F1↑p
.idata:0041A2CC                                         ; sub_4016C0+11B↑p ...
.idata:0041A2D0                 extrn libintl_textdomain:dword
.idata:0041A2D0                                         ; CODE XREF: sub_4016C0+55↑p
.idata:0041A2D0                                         ; DATA XREF: sub_4016C0+55↑r ...
.idata:0041A2D4
.idata:0041A2DC ;
.idata:0041A2DC ; Imports from ADVAPI32.DLL
.idata:0041A2DC ;
.idata:0041A2DC ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:0041A2DC                 extrn __imp_RegCloseKey:dword
.idata:0041A2DC                                         ; DATA XREF: RegCloseKey↑r
.idata:0041A2E0 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:0041A2E0                 extrn __imp_RegOpenKeyExA:dword
.idata:0041A2E0                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:0041A2E4 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:0041A2E4                 extrn __imp_RegQueryValueExA:dword
.idata:0041A2E4                                         ; DATA XREF: RegQueryValueExA↑r
.idata:0041A2E8
.idata:0041A2F0 ;
.idata:0041A2F0 ; Imports from KERNEL32.dll
.idata:0041A2F0 ;
.idata:0041A2F0 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:0041A2F0                 extrn __imp_AreFileApisANSI:dword
.idata:0041A2F0                                         ; DATA XREF: AreFileApisANSI↑r
.idata:0041A2F4 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:0041A2F4                 extrn __imp_CloseHandle:dword
.idata:0041A2F4                                         ; DATA XREF: CloseHandle↑r
.idata:0041A2F8 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:0041A2F8                 extrn __imp_CreateDirectoryA:dword
.idata:0041A2F8                                         ; DATA XREF: CreateDirectoryA↑r
.idata:0041A2FC ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:0041A2FC                 extrn __imp_CreateFileA:dword
.idata:0041A2FC                                         ; DATA XREF: CreateFileA↑r
.idata:0041A300 ; BOOL (__stdcall *DeleteFileA)(LPCSTR lpFileName)
.idata:0041A300                 extrn __imp_DeleteFileA:dword
.idata:0041A300                                         ; DATA XREF: DeleteFileA↑r
.idata:0041A304 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:0041A304                 extrn __imp_DeviceIoControl:dword
.idata:0041A304                                         ; DATA XREF: DeviceIoControl↑r
.idata:0041A308 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0041A308                 extrn __imp_ExitProcess:dword
.idata:0041A308                                         ; DATA XREF: ExitProcess↑r
.idata:0041A30C ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:0041A30C                 extrn __imp_FindClose:dword
.idata:0041A30C                                         ; DATA XREF: FindClose↑r
.idata:0041A310 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041A310                 extrn __imp_FindFirstFileA:dword
.idata:0041A310                                         ; DATA XREF: FindFirstFileA↑r
.idata:0041A314 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041A314                 extrn __imp_FindNextFileA:dword
.idata:0041A314                                         ; DATA XREF: FindNextFileA↑r
.idata:0041A318 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:0041A318                 extrn __imp_FreeLibrary:dword
.idata:0041A318                                         ; DATA XREF: FreeLibrary↑r
.idata:0041A31C ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041A31C                 extrn __imp_GetCurrentDirectoryA:dword
.idata:0041A31C                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0041A320 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0041A320                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0041A320                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041A324 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041A324                 extrn __imp_GetDriveTypeA:dword
.idata:0041A324                                         ; DATA XREF: GetDriveTypeA↑r
.idata:0041A328 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:0041A328                 extrn __imp_GetFileAttributesA:dword
.idata:0041A328                                         ; DATA XREF: GetFileAttributesA↑r
.idata:0041A32C ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:0041A32C                 extrn __imp_GetFileInformationByHandle:dword
.idata:0041A32C                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041A330 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041A330                 extrn __imp_GetFileSize:dword
.idata:0041A330                                         ; DATA XREF: GetFileSize↑r
.idata:0041A334 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041A334                 extrn __imp_GetFileType:dword
.idata:0041A334                                         ; DATA XREF: GetFileType↑r
.idata:0041A338 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:0041A338                 extrn __imp_GetFullPathNameA:dword
.idata:0041A338                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0041A33C ; DWORD (__stdcall *GetLastError)()
.idata:0041A33C                 extrn __imp_GetLastError:dword
.idata:0041A33C                                         ; DATA XREF: GetLastError↑r
.idata:0041A340 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041A340                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041A340                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041A344 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041A344                 extrn __imp_GetModuleFileNameA:dword
.idata:0041A344                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:0041A348 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0041A348                 extrn __imp_GetModuleHandleA:dword
.idata:0041A348                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0041A34C ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0041A34C                 extrn __imp_GetProcAddress:dword
.idata:0041A34C                                         ; DATA XREF: GetProcAddress↑r
.idata:0041A350 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041A350                 extrn __imp_GetProcessHeap:dword
.idata:0041A350                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041A354 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041A354                 extrn __imp_GetShortPathNameA:dword
.idata:0041A354                                         ; DATA XREF: GetShortPathNameA↑r
.idata:0041A358 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:0041A358                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:0041A358                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0041A35C ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0041A35C                 extrn __imp_GetTimeZoneInformation:dword
.idata:0041A35C                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041A360 ; DWORD (__stdcall *GetVersion)()
.idata:0041A360                 extrn __imp_GetVersion:dword
.idata:0041A360                                         ; DATA XREF: GetVersion↑r
.idata:0041A364 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0041A364                 extrn __imp_GetVersionExA:dword
.idata:0041A364                                         ; DATA XREF: GetVersionExA↑r
.idata:0041A368 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:0041A368                 extrn __imp_GetVolumeInformationA:dword
.idata:0041A368                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0041A36C ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041A36C                 extrn __imp_HeapAlloc:dword
.idata:0041A36C                                         ; DATA XREF: HeapAlloc↑r
.idata:0041A370 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041A370                 extrn __imp_HeapFree:dword
.idata:0041A370                                         ; DATA XREF: HeapFree↑r
.idata:0041A374 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041A374                 extrn __imp_LoadLibraryA:dword
.idata:0041A374                                         ; DATA XREF: LoadLibraryA↑r
.idata:0041A378 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:0041A378                 extrn __imp_MultiByteToWideChar:dword
.idata:0041A378                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0041A37C ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0041A37C                 extrn __imp_PeekNamedPipe:dword
.idata:0041A37C                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041A380 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041A380                 extrn __imp_SetErrorMode:dword
.idata:0041A380                                         ; DATA XREF: SetErrorMode↑r
.idata:0041A384 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0041A384                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0041A384                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0041A388 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:0041A388                 extrn __imp_UnlockFile:dword
.idata:0041A388                                         ; DATA XREF: UnlockFile↑r
.idata:0041A38C ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041A38C                 extrn __imp_lstrcmpiA:dword
.idata:0041A38C                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041A390 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041A390                 extrn __imp_lstrcpyA:dword
.idata:0041A390                                         ; DATA XREF: lstrcpyA↑r
.idata:0041A394
.idata:0041A39C ;
.idata:0041A39C ; Imports from msvcrt.dll
.idata:0041A39C ;
.idata:0041A39C ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041A39C                 extrn __imp__chmod:dword
.idata:0041A39C                                         ; DATA XREF: _chmod↑r
.idata:0041A3A0 ; int (__cdecl *_close)(int FileHandle)
.idata:0041A3A0                 extrn __imp__close:dword
.idata:0041A3A0                                         ; DATA XREF: _close↑r
.idata:0041A3A4 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:0041A3A4                 extrn __imp__fdopen:dword
.idata:0041A3A4                                         ; DATA XREF: _fdopen↑r
.idata:0041A3A8 ; int (__cdecl *_getpid)()
.idata:0041A3A8                 extrn __imp__getpid:dword
.idata:0041A3A8                                         ; DATA XREF: _getpid↑r
.idata:0041A3AC ; int (__cdecl *_isatty)(int FileHandle)
.idata:0041A3AC                 extrn __imp__isatty:dword
.idata:0041A3AC                                         ; DATA XREF: _isatty↑r
.idata:0041A3B0 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0041A3B0                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0041A3B4 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:0041A3B4                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:0041A3B8 ; char *(__cdecl *_strdup)(const char *String)
.idata:0041A3B8                 extrn __imp__strdup:dword
.idata:0041A3B8                                         ; DATA XREF: _strdup↑r
.idata:0041A3BC ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:0041A3BC                 extrn __imp__stricmp:dword
.idata:0041A3BC                                         ; DATA XREF: _stricmp↑r
.idata:0041A3C0
.idata:0041A3C8 ;
.idata:0041A3C8 ; Imports from MSVCP60.DLL
.idata:0041A3C8 ;
.idata:0041A3C8 ; wint_t (__cdecl *btowc)(int Ch)
.idata:0041A3C8                 extrn __imp_btowc:dword ; DATA XREF: btowc↑r
.idata:0041A3CC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0041A3CC                 extrn __imp_mbrtowc:dword
.idata:0041A3CC                                         ; DATA XREF: mbrtowc↑r
.idata:0041A3D0 ; wctype_t (__cdecl *wctype)(const char *name)
.idata:0041A3D0                 extrn __imp_wctype:dword
.idata:0041A3D0                                         ; DATA XREF: wctype↑r
.idata:0041A3D4
.idata:0041A3DC ;
.idata:0041A3DC ; Imports from msvcrt.dll
.idata:0041A3DC ;
.idata:0041A3DC                 extrn __imp___getmainargs:dword
.idata:0041A3DC                                         ; DATA XREF: __getmainargs↑r
.idata:0041A3E0 ; int _mb_cur_max
.idata:0041A3E0                 extrn __mb_cur_max:dword
.idata:0041A3E0                                         ; DATA XREF: sub_402990+7↑r
.idata:0041A3E0                                         ; sub_402990+5F3↑r ...
.idata:0041A3E4 ; char ***(__cdecl *__p__environ)()
.idata:0041A3E4                 extrn __imp___p__environ:dword
.idata:0041A3E4                                         ; DATA XREF: __p__environ↑r
.idata:0041A3E8 ; int *(__cdecl *__p__fmode)()
.idata:0041A3E8                 extrn __imp___p__fmode:dword
.idata:0041A3E8                                         ; DATA XREF: __p__fmode↑r
.idata:0041A3EC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0041A3EC                 extrn __set_app_type:dword
.idata:0041A3EC                                         ; CODE XREF: start+D↑p
.idata:0041A3EC                                         ; .text:0040102D↑p
.idata:0041A3EC                                         ; DATA XREF: ...
.idata:0041A3F0                 extrn __imp__assert:dword
.idata:0041A3F0                                         ; DATA XREF: _assert↑r
.idata:0041A3F4 ; void (__cdecl *_cexit)()
.idata:0041A3F4                 extrn __imp__cexit:dword
.idata:0041A3F4                                         ; DATA XREF: _cexit↑r
.idata:0041A3F8 ; int (__cdecl *_chmod_0)(const char *FileName, int AccessMode)
.idata:0041A3F8                 extrn __imp__chmod_0:dword
.idata:0041A3F8                                         ; DATA XREF: _chmod_0↑r
.idata:0041A3FC ; int (__cdecl *_close_0)(int FileHandle)
.idata:0041A3FC                 extrn __imp__close_0:dword
.idata:0041A3FC                                         ; DATA XREF: _close_0↑r
.idata:0041A400 ; int *(__cdecl *_errno)()
.idata:0041A400                 extrn __imp__errno:dword
.idata:0041A400                                         ; DATA XREF: _errno↑r
.idata:0041A404 ; FILE *(__cdecl *_fdopen_0)(int FileHandle, const char *Format)
.idata:0041A404                 extrn __imp__fdopen_0:dword
.idata:0041A404                                         ; DATA XREF: _fdopen_0↑r
.idata:0041A408 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:0041A408                 extrn __imp__filelengthi64:dword
.idata:0041A408                                         ; DATA XREF: _filelengthi64↑r
.idata:0041A40C ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0041A40C                 extrn __imp__flsbuf:dword
.idata:0041A40C                                         ; DATA XREF: _flsbuf↑r
.idata:0041A410 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:0041A410                 extrn __imp__get_osfhandle:dword
.idata:0041A410                                         ; DATA XREF: _get_osfhandle↑r
.idata:0041A414 ; FILE iob[]
.idata:0041A414                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0041A414                                         ; sub_401080+75↑r ...
.idata:0041A418 ; int (__cdecl *_isctype)(int C, int Type)
.idata:0041A418                 extrn __imp__isctype:dword
.idata:0041A418                                         ; DATA XREF: _isctype↑r
.idata:0041A41C ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:0041A41C                 extrn __imp__lseeki64:dword
.idata:0041A41C                                         ; DATA XREF: _lseeki64↑r
.idata:0041A420 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0041A420                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0041A420                                         ; DATA XREF: .text:0040106C↑r
.idata:0041A424 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:0041A424                 extrn __imp__open_0:dword
.idata:0041A424                                         ; DATA XREF: _open_0↑r
.idata:0041A428 ; const unsigned __int16 *pctype
.idata:0041A428                 extrn _pctype:dword     ; DATA XREF: sub_402990:loc_403084↑r
.idata:0041A428                                         ; .text:loc_406A61↑r ...
.idata:0041A42C ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041A42C                 extrn __imp__setmode:dword
.idata:0041A42C                                         ; DATA XREF: _setmode↑r
.idata:0041A430 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:0041A430                 extrn __imp__stricmp_0:dword
.idata:0041A430                                         ; DATA XREF: _stricmp_0↑r
.idata:0041A434 ; void (__cdecl __noreturn *abort)()
.idata:0041A434                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0041A438 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0041A438                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0041A438                                         ; DATA XREF: sub_401040+C↑r
.idata:0041A43C ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0041A43C                 extrn __imp_calloc:dword
.idata:0041A43C                                         ; DATA XREF: calloc↑r
.idata:0041A440 ; void (__cdecl __noreturn *exit)(int Code)
.idata:0041A440                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041A444 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041A444                 extrn __imp_fclose:dword
.idata:0041A444                                         ; DATA XREF: fclose↑r
.idata:0041A448 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0041A448                 extrn __imp_fflush:dword
.idata:0041A448                                         ; DATA XREF: fflush↑r
.idata:0041A44C ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041A44C                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0041A450 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0041A450                 extrn __imp_fprintf:dword
.idata:0041A450                                         ; DATA XREF: fprintf↑r
.idata:0041A454 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041A454                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0041A458 ; void (__cdecl *free)(void *Block)
.idata:0041A458                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041A45C ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0041A45C                 extrn __imp_fwrite:dword
.idata:0041A45C                                         ; DATA XREF: fwrite↑r
.idata:0041A460 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041A460                 extrn __imp_getenv:dword
.idata:0041A460                                         ; DATA XREF: getenv↑r
.idata:0041A464 ; int (__cdecl *isalpha)(int C)
.idata:0041A464                 extrn __imp_isalpha:dword
.idata:0041A464                                         ; DATA XREF: isalpha↑r
.idata:0041A468 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041A468                 extrn __imp_iswctype:dword
.idata:0041A468                                         ; DATA XREF: iswctype↑r
.idata:0041A46C ; void *(__cdecl *malloc)(size_t Size)
.idata:0041A46C                 extrn __imp_malloc:dword
.idata:0041A46C                                         ; DATA XREF: malloc↑r
.idata:0041A470 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041A470                 extrn __imp_memcpy:dword
.idata:0041A470                                         ; DATA XREF: memcpy↑r
.idata:0041A474 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:0041A474                 extrn __imp_memmove:dword
.idata:0041A474                                         ; DATA XREF: memmove↑r
.idata:0041A478 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041A478                 extrn __imp_memset:dword
.idata:0041A478                                         ; DATA XREF: memset↑r
.idata:0041A47C ; int (*printf)(const char *const Format, ...)
.idata:0041A47C                 extrn __imp_printf:dword
.idata:0041A47C                                         ; DATA XREF: printf↑r
.idata:0041A480 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0041A480                 extrn __imp_realloc:dword
.idata:0041A480                                         ; DATA XREF: realloc↑r
.idata:0041A484 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0041A484                 extrn __imp_setlocale:dword
.idata:0041A484                                         ; DATA XREF: setlocale↑r
.idata:0041A488 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041A488                 extrn __imp_signal:dword
.idata:0041A488                                         ; DATA XREF: signal↑r
.idata:0041A48C ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0041A48C                 extrn __imp_sprintf:dword
.idata:0041A48C                                         ; DATA XREF: sprintf↑r
.idata:0041A490 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0041A490                 extrn __imp_sscanf:dword
.idata:0041A490                                         ; DATA XREF: sscanf↑r
.idata:0041A494 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:0041A494                 extrn __imp_strcat:dword
.idata:0041A494                                         ; DATA XREF: strcat↑r
.idata:0041A498 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041A498                 extrn __imp_strchr:dword
.idata:0041A498                                         ; DATA XREF: strchr↑r
.idata:0041A49C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0041A49C                 extrn __imp_strcmp:dword
.idata:0041A49C                                         ; DATA XREF: strcmp↑r
.idata:0041A4A0 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0041A4A0                 extrn __imp_strcpy:dword
.idata:0041A4A0                                         ; DATA XREF: strcpy↑r
.idata:0041A4A4 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0041A4A4                 extrn __imp_strerror:dword
.idata:0041A4A4                                         ; DATA XREF: strerror↑r
.idata:0041A4A8 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041A4A8                 extrn __imp_strlen:dword
.idata:0041A4A8                                         ; DATA XREF: strlen↑r
.idata:0041A4AC ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0041A4AC                 extrn __imp_strncmp:dword
.idata:0041A4AC                                         ; DATA XREF: strncmp↑r
.idata:0041A4B0 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0041A4B0                 extrn __imp_strncpy:dword
.idata:0041A4B0                                         ; DATA XREF: strncpy↑r
.idata:0041A4B4 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041A4B4                 extrn __imp_strpbrk:dword
.idata:0041A4B4                                         ; DATA XREF: strpbrk↑r
.idata:0041A4B8 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:0041A4B8                 extrn __imp_strrchr:dword
.idata:0041A4B8                                         ; DATA XREF: strrchr↑r
.idata:0041A4BC ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:0041A4BC                 extrn __imp_strspn:dword
.idata:0041A4BC                                         ; DATA XREF: strspn↑r
.idata:0041A4C0 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0041A4C0                 extrn __imp_strstr:dword
.idata:0041A4C0                                         ; DATA XREF: strstr↑r
.idata:0041A4C4 ; int (__cdecl *tolower)(int C)
.idata:0041A4C4                 extrn __imp_tolower:dword
.idata:0041A4C4                                         ; DATA XREF: tolower↑r
.idata:0041A4C8 ; int (__cdecl *toupper)(int C)
.idata:0041A4C8                 extrn __imp_toupper:dword
.idata:0041A4C8                                         ; DATA XREF: toupper↑r
.idata:0041A4CC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041A4CC                 extrn __imp_vfprintf:dword
.idata:0041A4CC                                         ; DATA XREF: vfprintf↑r
.idata:0041A4D0
.idata:0041A4D8 ;
.idata:0041A4D8 ; Imports from OLE32.dll
.idata:0041A4D8 ;
.idata:0041A4D8 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:0041A4D8                 extrn __imp_CoCreateInstance:dword
.idata:0041A4D8                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041A4DC ; void (__stdcall *CoUninitialize)()
.idata:0041A4DC                 extrn __imp_CoUninitialize:dword
.idata:0041A4DC                                         ; DATA XREF: CoUninitialize↑r
.idata:0041A4E0 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:0041A4E0                 extrn __imp_OleInitialize:dword
.idata:0041A4E0                                         ; DATA XREF: OleInitialize↑r
.idata:0041A4E4
.idata:0041A4E4
.idata:0041A4E4
.idata:0041A4E4                 end start
