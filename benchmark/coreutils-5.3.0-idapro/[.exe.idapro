.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : CCAE71C1EB687E31140F17CF427F8640DF85BFA9E1ADD40568554F2939A073CD
.text:00401000 ; Input MD5    : 9D31981AF10985CE6E63E53846592E8B
.text:00401000 ; Input CRC32  : 87580B87
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/[.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A23E (Wed Apr 20 18:41:02 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000E9D0 (  59856.)
.text:00401000 ; Section size in file          : 0000EA00 (  59904.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_403010+6D↓p
.text:00401040                                         ; .text:0040EC70↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40EC10
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_410000
.text:004010A2                 mov     edx, dword_410090
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_410004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4100B0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4100B0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40EBE0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_410000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_410004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_403010
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40EC10
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 byte_401280     db 2Dh, 6Ch, 0          ; DATA XREF: sub_4013A0+44↓o
.text:00401280                                         ; sub_403FE0+71↓o
.text:00401283 byte_401283     db 21h                  ; DATA XREF: sub_4013A0+82↓o
.text:00401283                                         ; sub_402550+2F↓o
.text:00401284                 db 3Dh, 0
.text:00401286 aUnknownBinaryO db 'unknown binary operator',0Ah,0
.text:00401286                                         ; DATA XREF: sub_4013A0:def_40149C↓o
.text:0040129F ; const char Format[]
.text:0040129F Format          db '%s: ',0             ; DATA XREF: sub_4013A0+173↓o
.text:0040129F                                         ; sub_4013A0+288↓o ...
.text:004012A4 aAfterLe        db 'after -le',0        ; DATA XREF: sub_4013A0+25E↓o
.text:004012AE                 align 20h
.text:004012C0 aSIntegerExpres db '%s: integer expression expected',0Ah,0
.text:004012C0                                         ; DATA XREF: sub_4013A0+26B↓o
.text:004012C0                                         ; sub_401DB0+682↓o
.text:004012E1 aBeforeLe       db 'before -le',0       ; DATA XREF: sub_4013A0+2CA↓o
.text:004012EC aAfterLt        db 'after -lt',0        ; DATA XREF: sub_4013A0+37A↓o
.text:004012F6 aBeforeLt       db 'before -lt',0       ; DATA XREF: sub_4013A0+3A2↓o
.text:00401301 aEfDoesNotAccep db '-ef does not accept -l',0Ah,0
.text:00401301                                         ; DATA XREF: sub_4013A0:loc_401789↓o
.text:00401319 aAfterEq        db 'after -eq',0        ; DATA XREF: sub_4013A0+55D↓o
.text:00401323 aBeforeEq       db 'before -eq',0       ; DATA XREF: sub_4013A0+58C↓o
.text:0040132E aAfterGe        db 'after -ge',0        ; DATA XREF: sub_4013A0+659↓o
.text:00401338 aBeforeGe       db 'before -ge',0       ; DATA XREF: sub_4013A0+681↓o
.text:00401343 aAfterGt        db 'after -gt',0        ; DATA XREF: sub_4013A0+737↓o
.text:0040134D aBeforeGt       db 'before -gt',0       ; DATA XREF: sub_4013A0+75F↓o
.text:00401358 aAfterNe        db 'after -ne',0        ; DATA XREF: sub_4013A0+81F↓o
.text:00401362 aBeforeNe       db 'before -ne',0       ; DATA XREF: sub_4013A0+84C↓o
.text:0040136D aNtDoesNotAccep db '-nt does not accept -l',0Ah,0
.text:0040136D                                         ; DATA XREF: sub_4013A0:loc_401C17↓o
.text:00401385 aOtDoesNotAccep db '-ot does not accept -l',0Ah,0
.text:00401385                                         ; DATA XREF: sub_4013A0:loc_401CD0↓o
.text:0040139D                 align 10h
.text:004013A0
.text:004013A0 ; =============== S U B R O U T I N E =======================================
.text:004013A0
.text:004013A0
.text:004013A0 sub_4013A0      proc near               ; CODE XREF: sub_4027A0+3BA↓p
.text:004013A0                                         ; sub_4027A0+61B↓p ...
.text:004013A0
.text:004013A0 Str1            = dword ptr -2FCh
.text:004013A0 Str2            = dword ptr -2F8h
.text:004013A0 var_2F4         = dword ptr -2F4h
.text:004013A0 var_2E4         = dword ptr -2E4h
.text:004013A0 var_2E0         = dword ptr -2E0h
.text:004013A0 var_2D9         = byte ptr -2D9h
.text:004013A0 var_2D8         = dword ptr -2D8h
.text:004013A0 var_2D4         = dword ptr -2D4h
.text:004013A0 var_2CE         = byte ptr -2CEh
.text:004013A0 var_2CD         = byte ptr -2CDh
.text:004013A0 var_2CC         = dword ptr -2CCh
.text:004013A0 var_2C8         = dword ptr -2C8h
.text:004013A0 var_2C4         = dword ptr -2C4h
.text:004013A0 var_2C0         = dword ptr -2C0h
.text:004013A0 var_2BC         = dword ptr -2BCh
.text:004013A0 var_27C         = dword ptr -27Ch
.text:004013A0 var_24C         = dword ptr -24Ch
.text:004013A0 var_20C         = dword ptr -20Ch
.text:004013A0 var_1DC         = dword ptr -1DCh
.text:004013A0 var_19C         = dword ptr -19Ch
.text:004013A0 var_16C         = dword ptr -16Ch
.text:004013A0 var_12C         = dword ptr -12Ch
.text:004013A0 var_FC          = dword ptr -0FCh
.text:004013A0 var_F4          = dword ptr -0F4h
.text:004013A0 var_F0          = dword ptr -0F0h
.text:004013A0 var_EC          = dword ptr -0ECh
.text:004013A0 var_E8          = dword ptr -0E8h
.text:004013A0 var_8C          = dword ptr -8Ch
.text:004013A0 var_84          = dword ptr -84h
.text:004013A0 var_80          = dword ptr -80h
.text:004013A0 var_7C          = dword ptr -7Ch
.text:004013A0 var_78          = dword ptr -78h
.text:004013A0 arg_0           = byte ptr  4
.text:004013A0
.text:004013A0                 push    ebp
.text:004013A1                 push    edi
.text:004013A2                 push    esi
.text:004013A3                 push    ebx
.text:004013A4                 sub     esp, 2ECh
.text:004013AA                 movzx   edx, [esp+2FCh+arg_0]
.text:004013B2                 test    dl, dl
.text:004013B4                 mov     [esp+2FCh+var_2CD], dl
.text:004013B8                 jz      loc_401D78
.text:004013BE                 mov     eax, ds:dword_411000
.text:004013C3                 inc     eax
.text:004013C4                 mov     ds:dword_411000, eax
.text:004013C9
.text:004013C9 loc_4013C9:                             ; CODE XREF: sub_4013A0+9DD↓j
.text:004013C9                 mov     edx, ds:dword_411010
.text:004013CF                 lea     ebp, [eax+1]
.text:004013D2                 sub     edx, 2
.text:004013D5                 cmp     ebp, edx
.text:004013D7                 jge     loc_401D70
.text:004013DD                 cld
.text:004013DE                 mov     ebx, ds:dword_411020
.text:004013E4                 mov     edi, offset byte_401280
.text:004013E9                 mov     ecx, 3
.text:004013EE                 mov     esi, [ebx+ebp*4+4]
.text:004013F2                 repe cmpsb
.text:004013F4                 jnz     loc_401D60
.text:004013FA                 mov     [esp+2FCh+var_2CE], 1
.text:004013FF                 mov     ds:dword_411000, ebp
.text:00401405                 lea     esi, [esi+0]
.text:00401409                 lea     edi, [edi+0]
.text:00401410
.text:00401410 loc_401410:                             ; CODE XREF: sub_4013A0+9C5↓j
.text:00401410                 mov     edx, [ebx+ebp*4]
.text:00401413                 movzx   eax, byte ptr [edx]
.text:00401416                 cmp     al, 2Dh ; '-'
.text:00401418                 jz      short loc_401490
.text:0040141A                 cmp     al, 3Dh ; '='
.text:0040141C                 jz      short loc_401467
.text:0040141E
.text:0040141E loc_40141E:                             ; CODE XREF: sub_4013A0+CB↓j
.text:0040141E                 cld
.text:0040141F                 mov     esi, [ebx+ebp*4]
.text:00401422                 mov     edi, offset byte_401283
.text:00401427                 mov     ecx, 3
.text:0040142C                 repe cmpsb
.text:0040142E                 jnz     loc_401D82
.text:00401434                 mov     edi, ds:dword_411000
.text:0040143A                 mov     esi, [ebx+edi*4+8]
.text:0040143E                 mov     [esp+2FCh+Str2], esi ; Str2
.text:00401442                 mov     ebp, [ebx+edi*4]
.text:00401445                 mov     [esp+2FCh+Str1], ebp ; Str1
.text:00401448                 call    strcmp
.text:0040144D                 test    eax, eax
.text:0040144F                 setnz   al
.text:00401452
.text:00401452 loc_401452:                             ; CODE XREF: sub_4013A0+EB↓j
.text:00401452                 add     ds:dword_411000, 3
.text:00401459
.text:00401459 loc_401459:                             ; CODE XREF: sub_4013A0+53A↓j
.text:00401459                                         ; sub_4013A0+7FC↓j ...
.text:00401459                 movzx   eax, al
.text:0040145C
.text:0040145C loc_40145C:                             ; CODE XREF: sub_4013A0+229↓j
.text:0040145C                                         ; sub_4013A0+233↓j ...
.text:0040145C                 add     esp, 2ECh
.text:00401462                 pop     ebx
.text:00401463                 pop     esi
.text:00401464                 pop     edi
.text:00401465                 pop     ebp
.text:00401466                 retn
.text:00401467 ; ---------------------------------------------------------------------------
.text:00401467
.text:00401467 loc_401467:                             ; CODE XREF: sub_4013A0+7C↑j
.text:00401467                 cmp     byte ptr [edx+1], 0
.text:0040146B                 jnz     short loc_40141E
.text:0040146D                 mov     ecx, ds:dword_411000
.text:00401473                 mov     edx, [ebx+ecx*4+8]
.text:00401477                 mov     [esp+2FCh+Str2], edx ; Str2
.text:0040147B                 mov     esi, [ebx+ecx*4]
.text:0040147E                 mov     [esp+2FCh+Str1], esi ; Str1
.text:00401481                 call    strcmp
.text:00401486                 test    eax, eax
.text:00401488                 setz    al
.text:0040148B                 jmp     short loc_401452
.text:0040148B ; ---------------------------------------------------------------------------
.text:0040148D                 align 10h
.text:00401490
.text:00401490 loc_401490:                             ; CODE XREF: sub_4013A0+78↑j
.text:00401490                 movsx   eax, byte ptr [edx+1]
.text:00401494                 sub     eax, 65h ; 'e'  ; switch 11 cases
.text:00401497                 cmp     eax, 0Ah
.text:0040149A                 ja      short def_40149C ; jumptable 0040149C default case, cases 102,104-107,109
.text:0040149C                 jmp     ds:jpt_40149C[eax*4] ; switch jump
.text:0040149C ; ---------------------------------------------------------------------------
.text:004014A3                 align 4
.text:004014A4 jpt_40149C      dd offset loc_401750    ; DATA XREF: sub_4013A0+FC↑r
.text:004014A4                 dd offset def_40149C    ; jump table for switch statement
.text:004014A4                 dd offset loc_401938
.text:004014A4                 dd offset def_40149C
.text:004014A4                 dd offset def_40149C
.text:004014A4                 dd offset def_40149C
.text:004014A4                 dd offset def_40149C
.text:004014A4                 dd offset loc_4014D0
.text:004014A4                 dd offset def_40149C
.text:004014A4                 dd offset loc_401B10
.text:004014A4                 dd offset loc_401CA4
.text:004014D0 ; ---------------------------------------------------------------------------
.text:004014D0
.text:004014D0 loc_4014D0:                             ; CODE XREF: sub_4013A0+FC↑j
.text:004014D0                                         ; DATA XREF: sub_4013A0:jpt_40149C↑o
.text:004014D0                 mov     eax, [ebx+ebp*4] ; jumptable 0040149C case 108
.text:004014D3                 cmp     byte ptr [eax+2], 74h ; 't'
.text:004014D7                 jz      loc_401673
.text:004014DD
.text:004014DD loc_4014DD:                             ; CODE XREF: sub_4013A0+2D7↓j
.text:004014DD                 mov     eax, [ebx+ebp*4]
.text:004014E0                 cmp     byte ptr [eax+2], 65h ; 'e'
.text:004014E4                 jz      short loc_40155D
.text:004014E6                 lea     esi, [esi+0]
.text:004014E9                 lea     edi, [edi+0]
.text:004014F0
.text:004014F0 def_40149C:                             ; CODE XREF: sub_4013A0+FA↑j
.text:004014F0                                         ; sub_4013A0+FC↑j ...
.text:004014F0                 mov     [esp+2FCh+Str1], offset aUnknownBinaryO ; jumptable 0040149C default case, cases 102,104-107,109
.text:004014F7                 call    ds:__imp_libintl_gettext
.text:004014FD                 mov     ebx, ds:dword_411020
.text:00401503                 mov     ecx, ds:_iob
.text:00401509                 mov     esi, [ebx+ebp*4]
.text:0040150C                 mov     edx, [ebx]
.text:0040150E                 mov     edi, eax
.text:00401510                 add     ecx, 40h ; '@'
.text:00401513                 mov     [esp+2FCh+Str2], offset Format ; "%s: "
.text:0040151B                 mov     [esp+2FCh+Str1], ecx ; Stream
.text:0040151E                 mov     [esp+2FCh+var_2F4], edx
.text:00401522                 call    fprintf
.text:00401527                 mov     [esp+2FCh+var_2F4], esi
.text:0040152B                 mov     [esp+2FCh+Str2], edi ; Format
.text:0040152F
.text:0040152F loc_40152F:                             ; CODE XREF: sub_4013A0+2A9↓j
.text:0040152F                 mov     edi, ds:_iob
.text:00401535                 add     edi, 40h ; '@'
.text:00401538                 mov     [esp+2FCh+Str1], edi ; Stream
.text:0040153B                 call    fprintf
.text:00401540                 mov     ebp, ds:_iob
.text:00401546                 add     ebp, 40h ; '@'
.text:00401549                 mov     [esp+2FCh+Str1], ebp ; Stream
.text:0040154C                 call    fflush
.text:00401551                 mov     [esp+2FCh+Str1], 2 ; Code
.text:00401558                 call    exit
.text:0040155D ; ---------------------------------------------------------------------------
.text:0040155D
.text:0040155D loc_40155D:                             ; CODE XREF: sub_4013A0+144↑j
.text:0040155D                 cmp     byte ptr [eax+3], 0
.text:00401561                 jnz     short def_40149C ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401563                 cmp     [esp+2FCh+var_2CD], 0
.text:00401568                 jz      loc_40164E
.text:0040156E                 mov     edx, [ebx+ebp*4-4]
.text:00401572                 mov     [esp+2FCh+Str1], edx ; Str
.text:00401575                 call    strlen
.text:0040157A                 mov     [esp+2FCh+var_2C4], eax
.text:0040157E                 mov     [esp+2FCh+var_2C0], 0
.text:00401586
.text:00401586 loc_401586:                             ; CODE XREF: sub_4013A0+2C4↓j
.text:00401586                 cmp     [esp+2FCh+var_2CE], 0
.text:0040158B                 jz      short loc_4015E0
.text:0040158D                 mov     edi, ds:dword_411020
.text:00401593                 mov     ebx, [edi+ebp*4+8]
.text:00401597                 mov     [esp+2FCh+Str1], ebx ; Str
.text:0040159A                 call    strlen
.text:0040159F                 mov     [esp+2FCh+var_2CC], eax
.text:004015A3                 mov     [esp+2FCh+var_2C8], 0
.text:004015AB
.text:004015AB loc_4015AB:                             ; CODE XREF: sub_4013A0+25C↓j
.text:004015AB                 add     ds:dword_411000, 3
.text:004015B2                 mov     eax, 1
.text:004015B7                 mov     edi, [esp+2FCh+var_2C0]
.text:004015BB                 mov     ebp, [esp+2FCh+var_2C8]
.text:004015BF                 mov     ebx, [esp+2FCh+var_2C4]
.text:004015C3                 mov     edx, [esp+2FCh+var_2CC]
.text:004015C7                 cmp     edi, ebp
.text:004015C9                 jl      loc_40145C
.text:004015CF                 jg      short loc_4015D9
.text:004015D1                 cmp     ebx, edx
.text:004015D3                 jbe     loc_40145C
.text:004015D9
.text:004015D9 loc_4015D9:                             ; CODE XREF: sub_4013A0+22F↑j
.text:004015D9                                         ; sub_4013A0+349↓j ...
.text:004015D9                 xor     eax, eax
.text:004015DB                 jmp     loc_40145C
.text:004015E0 ; ---------------------------------------------------------------------------
.text:004015E0
.text:004015E0 loc_4015E0:                             ; CODE XREF: sub_4013A0+1EB↑j
.text:004015E0                 mov     ecx, ds:dword_411020
.text:004015E6                 lea     esi, [esp+2FCh+var_2CC]
.text:004015EA                 mov     [esp+2FCh+Str2], esi
.text:004015EE                 mov     edx, [ecx+ebp*4+4]
.text:004015F2                 mov     [esp+2FCh+Str1], edx
.text:004015F5                 call    sub_404350
.text:004015FA                 test    al, al
.text:004015FC                 jnz     short loc_4015AB
.text:004015FE                 mov     [esp+2FCh+Str1], offset aAfterLe ; "after -le"
.text:00401605
.text:00401605 loc_401605:                             ; CODE XREF: sub_4013A0+2D1↓j
.text:00401605                                         ; sub_4013A0+381↓j ...
.text:00401605                 call    ds:__imp_libintl_gettext
.text:0040160B                 mov     [esp+2FCh+Str1], offset aSIntegerExpres ; "%s: integer expression expected\n"
.text:00401612                 mov     ebp, eax
.text:00401614                 call    ds:__imp_libintl_gettext
.text:0040161A                 mov     esi, ds:dword_411020
.text:00401620                 mov     edx, ds:_iob
.text:00401626                 mov     ecx, [esi]
.text:00401628                 mov     [esp+2FCh+Str2], offset Format ; "%s: "
.text:00401630                 add     edx, 40h ; '@'
.text:00401633                 mov     ebx, eax
.text:00401635                 mov     [esp+2FCh+Str1], edx ; Stream
.text:00401638                 mov     [esp+2FCh+var_2F4], ecx
.text:0040163C                 call    fprintf
.text:00401641                 mov     [esp+2FCh+var_2F4], ebp
.text:00401645
.text:00401645 loc_401645:                             ; CODE XREF: sub_4013A0+425↓j
.text:00401645                 mov     [esp+2FCh+Str2], ebx
.text:00401649                 jmp     loc_40152F
.text:0040164E ; ---------------------------------------------------------------------------
.text:0040164E
.text:0040164E loc_40164E:                             ; CODE XREF: sub_4013A0+1C8↑j
.text:0040164E                 lea     esi, [esp+2FCh+var_2C4]
.text:00401652                 mov     [esp+2FCh+Str2], esi
.text:00401656                 mov     ecx, [ebx+ebp*4-4]
.text:0040165A                 mov     [esp+2FCh+Str1], ecx
.text:0040165D                 call    sub_404350
.text:00401662                 test    al, al
.text:00401664                 jnz     loc_401586
.text:0040166A                 mov     [esp+2FCh+Str1], offset aBeforeLe ; "before -le"
.text:00401671                 jmp     short loc_401605
.text:00401673 ; ---------------------------------------------------------------------------
.text:00401673
.text:00401673 loc_401673:                             ; CODE XREF: sub_4013A0+137↑j
.text:00401673                 cmp     byte ptr [eax+3], 0
.text:00401677                 jnz     loc_4014DD
.text:0040167D                 cmp     [esp+2FCh+var_2CD], 0
.text:00401682                 jz      loc_401726
.text:00401688                 mov     ecx, [ebx+ebp*4-4]
.text:0040168C                 mov     [esp+2FCh+Str1], ecx ; Str
.text:0040168F                 call    strlen
.text:00401694                 mov     [esp+2FCh+var_2C4], eax
.text:00401698                 mov     [esp+2FCh+var_2C0], 0
.text:004016A0
.text:004016A0 loc_4016A0:                             ; CODE XREF: sub_4013A0+39C↓j
.text:004016A0                 cmp     [esp+2FCh+var_2CE], 0
.text:004016A5                 jz      short loc_4016FC
.text:004016A7                 mov     edx, ds:dword_411020
.text:004016AD                 mov     ebx, [edx+ebp*4+8]
.text:004016B1                 mov     [esp+2FCh+Str1], ebx ; Str
.text:004016B4                 call    strlen
.text:004016B9                 mov     [esp+2FCh+var_2CC], eax
.text:004016BD                 mov     [esp+2FCh+var_2C8], 0
.text:004016C5
.text:004016C5 loc_4016C5:                             ; CODE XREF: sub_4013A0+378↓j
.text:004016C5                 add     ds:dword_411000, 3
.text:004016CC                 mov     eax, 1
.text:004016D1                 mov     ebp, [esp+2FCh+var_2C0]
.text:004016D5                 mov     edi, [esp+2FCh+var_2C8]
.text:004016D9                 mov     ebx, [esp+2FCh+var_2C4]
.text:004016DD                 mov     edx, [esp+2FCh+var_2CC]
.text:004016E1                 cmp     ebp, edi
.text:004016E3                 jl      loc_40145C
.text:004016E9                 jg      loc_4015D9
.text:004016EF                 cmp     ebx, edx
.text:004016F1                 jb      loc_40145C
.text:004016F7                 jmp     loc_4015D9
.text:004016FC ; ---------------------------------------------------------------------------
.text:004016FC
.text:004016FC loc_4016FC:                             ; CODE XREF: sub_4013A0+305↑j
.text:004016FC                 mov     esi, ds:dword_411020
.text:00401702                 lea     edi, [esp+2FCh+var_2CC]
.text:00401706                 mov     [esp+2FCh+Str2], edi
.text:0040170A                 mov     ecx, [esi+ebp*4+4]
.text:0040170E                 mov     [esp+2FCh+Str1], ecx
.text:00401711                 call    sub_404350
.text:00401716                 test    al, al
.text:00401718                 jnz     short loc_4016C5
.text:0040171A                 mov     [esp+2FCh+Str1], offset aAfterLt ; "after -lt"
.text:00401721                 jmp     loc_401605
.text:00401726 ; ---------------------------------------------------------------------------
.text:00401726
.text:00401726 loc_401726:                             ; CODE XREF: sub_4013A0+2E2↑j
.text:00401726                 lea     edi, [esp+2FCh+var_2C4]
.text:0040172A                 mov     [esp+2FCh+Str2], edi
.text:0040172E                 mov     esi, [ebx+ebp*4-4]
.text:00401732                 mov     [esp+2FCh+Str1], esi
.text:00401735                 call    sub_404350
.text:0040173A                 test    al, al
.text:0040173C                 jnz     loc_4016A0
.text:00401742                 mov     [esp+2FCh+Str1], offset aBeforeLt ; "before -lt"
.text:00401749                 jmp     loc_401605
.text:00401749 ; ---------------------------------------------------------------------------
.text:0040174E                 align 10h
.text:00401750
.text:00401750 loc_401750:                             ; CODE XREF: sub_4013A0+FC↑j
.text:00401750                                         ; DATA XREF: sub_4013A0:jpt_40149C↑o
.text:00401750                 mov     eax, [ebx+ebp*4] ; jumptable 0040149C case 101
.text:00401753                 cmp     byte ptr [eax+2], 71h ; 'q'
.text:00401757                 jz      loc_401868
.text:0040175D
.text:0040175D loc_40175D:                             ; CODE XREF: sub_4013A0+4CC↓j
.text:0040175D                 mov     eax, [ebx+ebp*4]
.text:00401760                 cmp     byte ptr [eax+2], 66h ; 'f'
.text:00401764                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:0040176A                 cmp     byte ptr [eax+3], 0
.text:0040176E                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401774                 add     ds:dword_411000, 3
.text:0040177B                 cmp     [esp+2FCh+var_2CE], 0
.text:00401780                 jnz     short loc_401789
.text:00401782                 cmp     [esp+2FCh+var_2CD], 0
.text:00401787                 jz      short loc_4017CA
.text:00401789
.text:00401789 loc_401789:                             ; CODE XREF: sub_4013A0+3E0↑j
.text:00401789                 mov     [esp+2FCh+Str1], offset aEfDoesNotAccep ; "-ef does not accept -l\n"
.text:00401790
.text:00401790 loc_401790:                             ; CODE XREF: sub_4013A0+87E↓j
.text:00401790                                         ; sub_4013A0+937↓j
.text:00401790                 call    ds:__imp_libintl_gettext
.text:00401796                 mov     esi, ds:dword_411020
.text:0040179C                 mov     edx, ds:_iob
.text:004017A2                 mov     ebp, [esi]
.text:004017A4                 mov     [esp+2FCh+Str2], offset Format ; "%s: "
.text:004017AC                 add     edx, 40h ; '@'
.text:004017AF                 mov     ebx, eax
.text:004017B1                 mov     [esp+2FCh+Str1], edx ; Stream
.text:004017B4                 mov     [esp+2FCh+var_2F4], ebp
.text:004017B8                 call    fprintf
.text:004017BD                 mov     [esp+2FCh+var_2F4], 0
.text:004017C5                 jmp     loc_401645
.text:004017CA ; ---------------------------------------------------------------------------
.text:004017CA
.text:004017CA loc_4017CA:                             ; CODE XREF: sub_4013A0+3E7↑j
.text:004017CA                 mov     [esp+2FCh+var_2D9], 0
.text:004017CF                 lea     edx, [esp+2FCh+var_8C]
.text:004017D6                 mov     [esp+2FCh+Str2], edx ; int
.text:004017DA                 mov     ecx, [ebx+ebp*4-4]
.text:004017DE                 mov     [esp+2FCh+Str1], ecx ; char *
.text:004017E1                 call    sub_4078E0
.text:004017E6                 test    eax, eax
.text:004017E8                 jz      short loc_4017F4
.text:004017EA
.text:004017EA loc_4017EA:                             ; CODE XREF: sub_4013A0+473↓j
.text:004017EA                                         ; sub_4013A0+499↓j ...
.text:004017EA                 movzx   eax, [esp+2FCh+var_2D9]
.text:004017EF                 jmp     loc_40145C
.text:004017F4 ; ---------------------------------------------------------------------------
.text:004017F4
.text:004017F4 loc_4017F4:                             ; CODE XREF: sub_4013A0+448↑j
.text:004017F4                 mov     esi, ds:dword_411020
.text:004017FA                 lea     ebx, [esp+2FCh+var_FC]
.text:00401801                 mov     [esp+2FCh+Str2], ebx ; int
.text:00401805                 mov     edi, [esi+ebp*4+4]
.text:00401809                 mov     [esp+2FCh+Str1], edi ; char *
.text:0040180C                 call    sub_4078E0
.text:00401811                 test    eax, eax
.text:00401813                 jnz     short loc_4017EA
.text:00401815                 mov     edx, [esp+2FCh+var_78]
.text:0040181C                 mov     edi, [esp+2FCh+var_7C]
.text:00401823                 mov     ebp, [esp+2FCh+var_EC]
.text:0040182A                 mov     ecx, [esp+2FCh+var_E8]
.text:00401831                 mov     eax, edx
.text:00401833                 xor     ebp, edi
.text:00401835                 xor     eax, ecx
.text:00401837                 or      eax, ebp
.text:00401839                 jnz     short loc_4017EA
.text:0040183B                 mov     ecx, [esp+2FCh+var_80]
.text:00401842                 mov     esi, [esp+2FCh+var_84]
.text:00401849                 mov     ebp, [esp+2FCh+var_F4]
.text:00401850                 mov     edi, [esp+2FCh+var_F0]
.text:00401857                 mov     eax, ecx
.text:00401859                 xor     ebp, esi
.text:0040185B                 xor     eax, edi
.text:0040185D                 or      eax, ebp
.text:0040185F                 jnz     short loc_4017EA
.text:00401861                 mov     [esp+2FCh+var_2D9], 1
.text:00401866                 jmp     short loc_4017EA
.text:00401868 ; ---------------------------------------------------------------------------
.text:00401868
.text:00401868 loc_401868:                             ; CODE XREF: sub_4013A0+3B7↑j
.text:00401868                 cmp     byte ptr [eax+3], 0
.text:0040186C                 jnz     loc_40175D
.text:00401872                 cmp     [esp+2FCh+var_2CD], 0
.text:00401877                 jz      loc_401910
.text:0040187D                 mov     ecx, [ebx+ebp*4-4]
.text:00401881                 mov     [esp+2FCh+Str1], ecx ; Str
.text:00401884                 call    strlen
.text:00401889                 mov     [esp+2FCh+var_2C4], eax
.text:0040188D                 mov     [esp+2FCh+var_2C0], 0
.text:00401895
.text:00401895 loc_401895:                             ; CODE XREF: sub_4013A0+586↓j
.text:00401895                 cmp     [esp+2FCh+var_2CE], 0
.text:0040189A                 jz      short loc_4018DF
.text:0040189C                 mov     ebx, ds:dword_411020
.text:004018A2                 mov     esi, [ebx+ebp*4+8]
.text:004018A6                 mov     [esp+2FCh+Str1], esi ; Str
.text:004018A9                 call    strlen
.text:004018AE                 mov     [esp+2FCh+var_2CC], eax
.text:004018B2                 mov     [esp+2FCh+var_2C8], 0
.text:004018BA
.text:004018BA loc_4018BA:                             ; CODE XREF: sub_4013A0+55B↓j
.text:004018BA                 add     ds:dword_411000, 3
.text:004018C1                 mov     eax, [esp+2FCh+var_2C8]
.text:004018C5                 mov     esi, [esp+2FCh+var_2C4]
.text:004018C9                 mov     ebp, [esp+2FCh+var_2C0]
.text:004018CD                 mov     ebx, [esp+2FCh+var_2CC]
.text:004018D1                 xor     ebp, eax
.text:004018D3                 xor     esi, ebx
.text:004018D5                 or      esi, ebp
.text:004018D7                 setz    al
.text:004018DA                 jmp     loc_401459
.text:004018DF ; ---------------------------------------------------------------------------
.text:004018DF
.text:004018DF loc_4018DF:                             ; CODE XREF: sub_4013A0+4FA↑j
.text:004018DF                 mov     edx, ds:dword_411020
.text:004018E5                 lea     edi, [esp+2FCh+var_2CC]
.text:004018E9                 mov     [esp+2FCh+Str2], edi
.text:004018ED                 mov     ecx, [edx+ebp*4+4]
.text:004018F1                 mov     [esp+2FCh+Str1], ecx
.text:004018F4                 call    sub_404350
.text:004018F9                 test    al, al
.text:004018FB                 jnz     short loc_4018BA
.text:004018FD                 mov     [esp+2FCh+Str1], offset aAfterEq ; "after -eq"
.text:00401904                 jmp     loc_401605
.text:00401904 ; ---------------------------------------------------------------------------
.text:00401909                 align 10h
.text:00401910
.text:00401910 loc_401910:                             ; CODE XREF: sub_4013A0+4D7↑j
.text:00401910                 lea     edi, [esp+2FCh+var_2C4]
.text:00401914                 mov     [esp+2FCh+Str2], edi
.text:00401918                 mov     edx, [ebx+ebp*4-4]
.text:0040191C                 mov     [esp+2FCh+Str1], edx
.text:0040191F                 call    sub_404350
.text:00401924                 test    al, al
.text:00401926                 jnz     loc_401895
.text:0040192C                 mov     [esp+2FCh+Str1], offset aBeforeEq ; "before -eq"
.text:00401933                 jmp     loc_401605
.text:00401938 ; ---------------------------------------------------------------------------
.text:00401938
.text:00401938 loc_401938:                             ; CODE XREF: sub_4013A0+FC↑j
.text:00401938                                         ; DATA XREF: sub_4013A0:jpt_40149C↑o
.text:00401938                 mov     eax, [ebx+ebp*4] ; jumptable 0040149C case 103
.text:0040193B                 cmp     byte ptr [eax+2], 74h ; 't'
.text:0040193F                 jz      loc_401A30
.text:00401945
.text:00401945 loc_401945:                             ; CODE XREF: sub_4013A0+694↓j
.text:00401945                 mov     eax, [ebx+ebp*4]
.text:00401948                 cmp     byte ptr [eax+2], 65h ; 'e'
.text:0040194C                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401952                 cmp     byte ptr [eax+3], 0
.text:00401956                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:0040195C                 cmp     [esp+2FCh+var_2CD], 0
.text:00401961                 jz      loc_401A05
.text:00401967                 mov     edx, [ebx+ebp*4-4]
.text:0040196B                 mov     [esp+2FCh+Str1], edx ; Str
.text:0040196E                 call    strlen
.text:00401973                 mov     [esp+2FCh+var_2C4], eax
.text:00401977                 mov     [esp+2FCh+var_2C0], 0
.text:0040197F
.text:0040197F loc_40197F:                             ; CODE XREF: sub_4013A0+67B↓j
.text:0040197F                 cmp     [esp+2FCh+var_2CE], 0
.text:00401984                 jz      short loc_4019DB
.text:00401986                 mov     edi, ds:dword_411020
.text:0040198C                 mov     ebx, [edi+ebp*4+8]
.text:00401990                 mov     [esp+2FCh+Str1], ebx ; Str
.text:00401993                 call    strlen
.text:00401998                 mov     [esp+2FCh+var_2CC], eax
.text:0040199C                 mov     [esp+2FCh+var_2C8], 0
.text:004019A4
.text:004019A4 loc_4019A4:                             ; CODE XREF: sub_4013A0+657↓j
.text:004019A4                 add     ds:dword_411000, 3
.text:004019AB                 mov     eax, 1
.text:004019B0                 mov     edi, [esp+2FCh+var_2C0]
.text:004019B4                 mov     ebp, [esp+2FCh+var_2C8]
.text:004019B8                 mov     ebx, [esp+2FCh+var_2C4]
.text:004019BC                 mov     edx, [esp+2FCh+var_2CC]
.text:004019C0                 cmp     edi, ebp
.text:004019C2                 jg      loc_40145C
.text:004019C8                 jl      loc_4015D9
.text:004019CE                 cmp     ebx, edx
.text:004019D0                 jnb     loc_40145C
.text:004019D6                 jmp     loc_4015D9
.text:004019DB ; ---------------------------------------------------------------------------
.text:004019DB
.text:004019DB loc_4019DB:                             ; CODE XREF: sub_4013A0+5E4↑j
.text:004019DB                 mov     ecx, ds:dword_411020
.text:004019E1                 lea     esi, [esp+2FCh+var_2CC]
.text:004019E5                 mov     [esp+2FCh+Str2], esi
.text:004019E9                 mov     edx, [ecx+ebp*4+4]
.text:004019ED                 mov     [esp+2FCh+Str1], edx
.text:004019F0                 call    sub_404350
.text:004019F5                 test    al, al
.text:004019F7                 jnz     short loc_4019A4
.text:004019F9                 mov     [esp+2FCh+Str1], offset aAfterGe ; "after -ge"
.text:00401A00                 jmp     loc_401605
.text:00401A05 ; ---------------------------------------------------------------------------
.text:00401A05
.text:00401A05 loc_401A05:                             ; CODE XREF: sub_4013A0+5C1↑j
.text:00401A05                 lea     esi, [esp+2FCh+var_2C4]
.text:00401A09                 mov     [esp+2FCh+Str2], esi
.text:00401A0D                 mov     ecx, [ebx+ebp*4-4]
.text:00401A11                 mov     [esp+2FCh+Str1], ecx
.text:00401A14                 call    sub_404350
.text:00401A19                 test    al, al
.text:00401A1B                 jnz     loc_40197F
.text:00401A21                 mov     [esp+2FCh+Str1], offset aBeforeGe ; "before -ge"
.text:00401A28                 jmp     loc_401605
.text:00401A28 ; ---------------------------------------------------------------------------
.text:00401A2D                 align 10h
.text:00401A30
.text:00401A30 loc_401A30:                             ; CODE XREF: sub_4013A0+59F↑j
.text:00401A30                 cmp     byte ptr [eax+3], 0
.text:00401A34                 jnz     loc_401945
.text:00401A3A                 cmp     [esp+2FCh+var_2CD], 0
.text:00401A3F                 jz      loc_401AE3
.text:00401A45                 mov     edx, [ebx+ebp*4-4]
.text:00401A49                 mov     [esp+2FCh+Str1], edx ; Str
.text:00401A4C                 call    strlen
.text:00401A51                 mov     [esp+2FCh+var_2C4], eax
.text:00401A55                 mov     [esp+2FCh+var_2C0], 0
.text:00401A5D
.text:00401A5D loc_401A5D:                             ; CODE XREF: sub_4013A0+759↓j
.text:00401A5D                 cmp     [esp+2FCh+var_2CE], 0
.text:00401A62                 jz      short loc_401AB9
.text:00401A64                 mov     edi, ds:dword_411020
.text:00401A6A                 mov     ebx, [edi+ebp*4+8]
.text:00401A6E                 mov     [esp+2FCh+Str1], ebx ; Str
.text:00401A71                 call    strlen
.text:00401A76                 mov     [esp+2FCh+var_2CC], eax
.text:00401A7A                 mov     [esp+2FCh+var_2C8], 0
.text:00401A82
.text:00401A82 loc_401A82:                             ; CODE XREF: sub_4013A0+735↓j
.text:00401A82                 add     ds:dword_411000, 3
.text:00401A89                 mov     eax, 1
.text:00401A8E                 mov     edi, [esp+2FCh+var_2C0]
.text:00401A92                 mov     ebp, [esp+2FCh+var_2C8]
.text:00401A96                 mov     ebx, [esp+2FCh+var_2C4]
.text:00401A9A                 mov     edx, [esp+2FCh+var_2CC]
.text:00401A9E                 cmp     edi, ebp
.text:00401AA0                 jg      loc_40145C
.text:00401AA6                 jl      loc_4015D9
.text:00401AAC                 cmp     ebx, edx
.text:00401AAE                 ja      loc_40145C
.text:00401AB4                 jmp     loc_4015D9
.text:00401AB9 ; ---------------------------------------------------------------------------
.text:00401AB9
.text:00401AB9 loc_401AB9:                             ; CODE XREF: sub_4013A0+6C2↑j
.text:00401AB9                 mov     ecx, ds:dword_411020
.text:00401ABF                 lea     esi, [esp+2FCh+var_2CC]
.text:00401AC3                 mov     [esp+2FCh+Str2], esi
.text:00401AC7                 mov     edx, [ecx+ebp*4+4]
.text:00401ACB                 mov     [esp+2FCh+Str1], edx
.text:00401ACE                 call    sub_404350
.text:00401AD3                 test    al, al
.text:00401AD5                 jnz     short loc_401A82
.text:00401AD7                 mov     [esp+2FCh+Str1], offset aAfterGt ; "after -gt"
.text:00401ADE                 jmp     loc_401605
.text:00401AE3 ; ---------------------------------------------------------------------------
.text:00401AE3
.text:00401AE3 loc_401AE3:                             ; CODE XREF: sub_4013A0+69F↑j
.text:00401AE3                 lea     esi, [esp+2FCh+var_2C4]
.text:00401AE7                 mov     [esp+2FCh+Str2], esi
.text:00401AEB                 mov     ecx, [ebx+ebp*4-4]
.text:00401AEF                 mov     [esp+2FCh+Str1], ecx
.text:00401AF2                 call    sub_404350
.text:00401AF7                 test    al, al
.text:00401AF9                 jnz     loc_401A5D
.text:00401AFF                 mov     [esp+2FCh+Str1], offset aBeforeGt ; "before -gt"
.text:00401B06                 jmp     loc_401605
.text:00401B06 ; ---------------------------------------------------------------------------
.text:00401B0B                 align 10h
.text:00401B10
.text:00401B10 loc_401B10:                             ; CODE XREF: sub_4013A0+FC↑j
.text:00401B10                                         ; DATA XREF: sub_4013A0:jpt_40149C↑o
.text:00401B10                 mov     eax, [ebx+ebp*4] ; jumptable 0040149C case 110
.text:00401B13                 cmp     byte ptr [eax+2], 74h ; 't'
.text:00401B17                 jz      loc_401BF8
.text:00401B1D
.text:00401B1D loc_401B1D:                             ; CODE XREF: sub_4013A0+85C↓j
.text:00401B1D                 mov     eax, [ebx+ebp*4]
.text:00401B20                 cmp     byte ptr [eax+2], 65h ; 'e'
.text:00401B24                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401B2A                 cmp     byte ptr [eax+3], 0
.text:00401B2E                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401B34                 cmp     [esp+2FCh+var_2CD], 0
.text:00401B39                 jz      loc_401BD0
.text:00401B3F                 mov     esi, [ebx+ebp*4-4]
.text:00401B43                 mov     [esp+2FCh+Str1], esi ; Str
.text:00401B46                 call    strlen
.text:00401B4B                 mov     [esp+2FCh+var_2C4], eax
.text:00401B4F                 mov     [esp+2FCh+var_2C0], 0
.text:00401B57
.text:00401B57 loc_401B57:                             ; CODE XREF: sub_4013A0+846↓j
.text:00401B57                 cmp     [esp+2FCh+var_2CE], 0
.text:00401B5C                 jz      short loc_401BA1
.text:00401B5E                 mov     ecx, ds:dword_411020
.text:00401B64                 mov     ebx, [ecx+ebp*4+8]
.text:00401B68                 mov     [esp+2FCh+Str1], ebx ; Str
.text:00401B6B                 call    strlen
.text:00401B70                 mov     [esp+2FCh+var_2CC], eax
.text:00401B74                 mov     [esp+2FCh+var_2C8], 0
.text:00401B7C
.text:00401B7C loc_401B7C:                             ; CODE XREF: sub_4013A0+81D↓j
.text:00401B7C                 add     ds:dword_411000, 3
.text:00401B83                 mov     eax, [esp+2FCh+var_2C8]
.text:00401B87                 mov     esi, [esp+2FCh+var_2C4]
.text:00401B8B                 mov     ebp, [esp+2FCh+var_2C0]
.text:00401B8F                 mov     ebx, [esp+2FCh+var_2CC]
.text:00401B93                 xor     ebp, eax
.text:00401B95                 xor     esi, ebx
.text:00401B97                 or      esi, ebp
.text:00401B99                 setnz   al
.text:00401B9C                 jmp     loc_401459
.text:00401BA1 ; ---------------------------------------------------------------------------
.text:00401BA1
.text:00401BA1 loc_401BA1:                             ; CODE XREF: sub_4013A0+7BC↑j
.text:00401BA1                 mov     edx, ds:dword_411020
.text:00401BA7                 lea     edi, [esp+2FCh+var_2CC]
.text:00401BAB                 mov     [esp+2FCh+Str2], edi
.text:00401BAF                 mov     esi, [edx+ebp*4+4]
.text:00401BB3                 mov     [esp+2FCh+Str1], esi
.text:00401BB6                 call    sub_404350
.text:00401BBB                 test    al, al
.text:00401BBD                 jnz     short loc_401B7C
.text:00401BBF                 mov     [esp+2FCh+Str1], offset aAfterNe ; "after -ne"
.text:00401BC6                 jmp     loc_401605
.text:00401BC6 ; ---------------------------------------------------------------------------
.text:00401BCB                 align 10h
.text:00401BD0
.text:00401BD0 loc_401BD0:                             ; CODE XREF: sub_4013A0+799↑j
.text:00401BD0                 lea     edi, [esp+2FCh+var_2C4]
.text:00401BD4                 mov     [esp+2FCh+Str2], edi
.text:00401BD8                 mov     edx, [ebx+ebp*4-4]
.text:00401BDC                 mov     [esp+2FCh+Str1], edx
.text:00401BDF                 call    sub_404350
.text:00401BE4                 test    al, al
.text:00401BE6                 jnz     loc_401B57
.text:00401BEC                 mov     [esp+2FCh+Str1], offset aBeforeNe ; "before -ne"
.text:00401BF3                 jmp     loc_401605
.text:00401BF8 ; ---------------------------------------------------------------------------
.text:00401BF8
.text:00401BF8 loc_401BF8:                             ; CODE XREF: sub_4013A0+777↑j
.text:00401BF8                 cmp     byte ptr [eax+3], 0
.text:00401BFC                 jnz     loc_401B1D
.text:00401C02                 add     ds:dword_411000, 3
.text:00401C09                 cmp     [esp+2FCh+var_2CE], 0
.text:00401C0E                 jnz     short loc_401C17
.text:00401C10                 cmp     [esp+2FCh+var_2CD], 0
.text:00401C15                 jz      short loc_401C23
.text:00401C17
.text:00401C17 loc_401C17:                             ; CODE XREF: sub_4013A0+86E↑j
.text:00401C17                 mov     [esp+2FCh+Str1], offset aNtDoesNotAccep ; "-nt does not accept -l\n"
.text:00401C1E                 jmp     loc_401790
.text:00401C23 ; ---------------------------------------------------------------------------
.text:00401C23
.text:00401C23 loc_401C23:                             ; CODE XREF: sub_4013A0+875↑j
.text:00401C23                 mov     ecx, [ebx+ebp*4-4]
.text:00401C27                 lea     eax, [esp+2FCh+var_16C]
.text:00401C2E                 mov     [esp+2FCh+Str2], eax ; int
.text:00401C32                 mov     [esp+2FCh+Str1], ecx ; char *
.text:00401C35                 call    sub_4078E0
.text:00401C3A                 test    eax, eax
.text:00401C3C                 setz    al
.text:00401C3F                 test    al, al
.text:00401C41                 jz      short loc_401C4E
.text:00401C43                 mov     ebx, [esp+2FCh+var_12C]
.text:00401C4A                 mov     [esp+2FCh+var_2D4], ebx
.text:00401C4E
.text:00401C4E loc_401C4E:                             ; CODE XREF: sub_4013A0+8A1↑j
.text:00401C4E                 mov     edi, ds:dword_411020
.text:00401C54                 lea     edx, [esp+2FCh+var_1DC]
.text:00401C5B                 mov     bl, al
.text:00401C5D                 mov     esi, [edi+ebp*4+4]
.text:00401C61                 mov     [esp+2FCh+Str2], edx ; int
.text:00401C65                 mov     [esp+2FCh+Str1], esi ; char *
.text:00401C68                 call    sub_4078E0
.text:00401C6D                 test    eax, eax
.text:00401C6F                 setz    dl
.text:00401C72                 test    dl, dl
.text:00401C74                 jz      short loc_401C81
.text:00401C76                 mov     ebp, [esp+2FCh+var_19C]
.text:00401C7D                 mov     [esp+2FCh+var_2D8], ebp
.text:00401C81
.text:00401C81 loc_401C81:                             ; CODE XREF: sub_4013A0+8D4↑j
.text:00401C81                 xor     eax, eax
.text:00401C83                 cmp     bl, dl
.text:00401C85                 ja      short loc_401C9D
.text:00401C87                 test    bl, bl
.text:00401C89                 jz      loc_401459
.text:00401C8F                 mov     ecx, [esp+2FCh+var_2D8]
.text:00401C93                 cmp     [esp+2FCh+var_2D4], ecx
.text:00401C97                 jle     loc_401459
.text:00401C9D
.text:00401C9D loc_401C9D:                             ; CODE XREF: sub_4013A0+8E5↑j
.text:00401C9D                                         ; sub_4013A0+99D↓j ...
.text:00401C9D                 mov     al, 1
.text:00401C9F                 jmp     loc_401459
.text:00401CA4 ; ---------------------------------------------------------------------------
.text:00401CA4
.text:00401CA4 loc_401CA4:                             ; CODE XREF: sub_4013A0+FC↑j
.text:00401CA4                                         ; DATA XREF: sub_4013A0:jpt_40149C↑o
.text:00401CA4                 mov     eax, [ebx+ebp*4] ; jumptable 0040149C case 111
.text:00401CA7                 cmp     byte ptr [eax+2], 74h ; 't'
.text:00401CAB                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401CB1                 cmp     byte ptr [eax+3], 0
.text:00401CB5                 jnz     def_40149C      ; jumptable 0040149C default case, cases 102,104-107,109
.text:00401CBB                 add     ds:dword_411000, 3
.text:00401CC2                 cmp     [esp+2FCh+var_2CE], 0
.text:00401CC7                 jnz     short loc_401CD0
.text:00401CC9                 cmp     [esp+2FCh+var_2CD], 0
.text:00401CCE                 jz      short loc_401CDC
.text:00401CD0
.text:00401CD0 loc_401CD0:                             ; CODE XREF: sub_4013A0+927↑j
.text:00401CD0                 mov     [esp+2FCh+Str1], offset aOtDoesNotAccep ; "-ot does not accept -l\n"
.text:00401CD7                 jmp     loc_401790
.text:00401CDC ; ---------------------------------------------------------------------------
.text:00401CDC
.text:00401CDC loc_401CDC:                             ; CODE XREF: sub_4013A0+92E↑j
.text:00401CDC                 mov     edi, [ebx+ebp*4-4]
.text:00401CE0                 lea     ebx, [esp+2FCh+var_24C]
.text:00401CE7                 mov     [esp+2FCh+Str2], ebx ; int
.text:00401CEB                 mov     [esp+2FCh+Str1], edi ; char *
.text:00401CEE                 call    sub_4078E0
.text:00401CF3                 test    eax, eax
.text:00401CF5                 setz    al
.text:00401CF8                 test    al, al
.text:00401CFA                 jz      short loc_401D07
.text:00401CFC                 mov     ecx, [esp+2FCh+var_20C]
.text:00401D03                 mov     [esp+2FCh+var_2E0], ecx
.text:00401D07
.text:00401D07 loc_401D07:                             ; CODE XREF: sub_4013A0+95A↑j
.text:00401D07                 mov     edi, ds:dword_411020
.text:00401D0D                 lea     edx, [esp+2FCh+var_2BC]
.text:00401D11                 mov     bl, al
.text:00401D13                 mov     esi, [edi+ebp*4+4]
.text:00401D17                 mov     [esp+2FCh+Str2], edx ; int
.text:00401D1B                 mov     [esp+2FCh+Str1], esi ; char *
.text:00401D1E                 call    sub_4078E0
.text:00401D23                 test    eax, eax
.text:00401D25                 setz    al
.text:00401D28                 test    al, al
.text:00401D2A                 jz      short loc_401D37
.text:00401D2C                 mov     ebp, [esp+2FCh+var_27C]
.text:00401D33                 mov     [esp+2FCh+var_2E4], ebp
.text:00401D37
.text:00401D37 loc_401D37:                             ; CODE XREF: sub_4013A0+98A↑j
.text:00401D37                 mov     dl, al
.text:00401D39                 xor     eax, eax
.text:00401D3B                 cmp     bl, dl
.text:00401D3D                 jb      loc_401C9D
.text:00401D43                 test    dl, dl
.text:00401D45                 jz      loc_401459
.text:00401D4B                 mov     ebx, [esp+2FCh+var_2E4]
.text:00401D4F                 cmp     [esp+2FCh+var_2E0], ebx
.text:00401D53                 jge     loc_401459
.text:00401D59                 jmp     loc_401C9D
.text:00401D59 ; ---------------------------------------------------------------------------
.text:00401D5E                 align 10h
.text:00401D60
.text:00401D60 loc_401D60:                             ; CODE XREF: sub_4013A0+54↑j
.text:00401D60                                         ; sub_4013A0+9D6↓j
.text:00401D60                 mov     [esp+2FCh+var_2CE], 0
.text:00401D65                 jmp     loc_401410
.text:00401D65 ; ---------------------------------------------------------------------------
.text:00401D6A                 align 10h
.text:00401D70
.text:00401D70 loc_401D70:                             ; CODE XREF: sub_4013A0+37↑j
.text:00401D70                 mov     ebx, ds:dword_411020
.text:00401D76                 jmp     short loc_401D60
.text:00401D78 ; ---------------------------------------------------------------------------
.text:00401D78
.text:00401D78 loc_401D78:                             ; CODE XREF: sub_4013A0+18↑j
.text:00401D78                 mov     eax, ds:dword_411000
.text:00401D7D                 jmp     loc_4013C9
.text:00401D82 ; ---------------------------------------------------------------------------
.text:00401D82
.text:00401D82 loc_401D82:                             ; CODE XREF: sub_4013A0+8E↑j
.text:00401D82                 call    abort
.text:00401D82 sub_4013A0      endp
.text:00401D82
.text:00401D82 ; ---------------------------------------------------------------------------
.text:00401D87 aMissingArgumen db 'missing argument after %s',0
.text:00401D87                                         ; DATA XREF: sub_401DB0:loc_401F24↓o
.text:00401D87                                         ; sub_4027A0:loc_402853↓o ...
.text:00401DA1 aAfterT         db 'after -t',0         ; DATA XREF: sub_401DB0:loc_402425↓o
.text:00401DAA                 align 10h
.text:00401DB0
.text:00401DB0 ; =============== S U B R O U T I N E =======================================
.text:00401DB0
.text:00401DB0
.text:00401DB0 sub_401DB0      proc near               ; CODE XREF: sub_4027A0+14C↓p
.text:00401DB0                                         ; sub_4027A0+238↓p ...
.text:00401DB0
.text:00401DB0 Stream          = dword ptr -9Ch
.text:00401DB0 Format          = dword ptr -98h
.text:00401DB0 var_94          = dword ptr -94h
.text:00401DB0 FileHandle      = dword ptr -84h
.text:00401DB0 var_80          = dword ptr -80h
.text:00401DB0 var_7C          = dword ptr -7Ch
.text:00401DB0 var_60          = dword ptr -60h
.text:00401DB0 var_5C          = dword ptr -5Ch
.text:00401DB0 var_4C          = dword ptr -4Ch
.text:00401DB0 var_48          = dword ptr -48h
.text:00401DB0 var_8           = dword ptr -8
.text:00401DB0 var_4           = dword ptr -4
.text:00401DB0
.text:00401DB0                 sub     esp, 9Ch
.text:00401DB6                 mov     edx, ds:dword_411000
.text:00401DBC                 mov     [esp+9Ch+var_8], ebx
.text:00401DC3                 mov     ecx, ds:dword_411020
.text:00401DC9                 mov     [esp+9Ch+var_4], esi
.text:00401DD0                 mov     ebx, [ecx+edx*4]
.text:00401DD3                 movsx   eax, byte ptr [ebx+1]
.text:00401DD7                 sub     eax, 47h ; 'G'  ; switch 52 cases
.text:00401DDA                 cmp     eax, 33h
.text:00401DDD                 ja      def_401DE3      ; jumptable 00401DE3 default case, cases 72-75,77,78,80-82,84-96,105,106,108,109,111,113,118,121
.text:00401DE3                 jmp     ds:jpt_401DE3[eax*4] ; switch jump
.text:00401DE3 ; ---------------------------------------------------------------------------
.text:00401DEA                 align 4
.text:00401DEC jpt_401DE3      dd offset loc_401ED7, offset def_401DE3, offset def_401DE3
.text:00401DEC                                         ; DATA XREF: sub_401DB0+33↑r
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset loc_402211 ; jump table for switch statement
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset loc_401FA7
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset loc_401FF1, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset def_401DE3, offset def_401DE3, offset loc_402135
.text:00401DEC                 dd offset loc_402042, offset loc_402093, offset loc_4020E4
.text:00401DEC                 dd offset loc_402135, offset loc_402174, offset loc_4021C5
.text:00401DEC                 dd offset loc_402211, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset loc_402262, offset def_401DE3, offset def_401DE3
.text:00401DEC                 dd offset loc_4022A8, offset def_401DE3, offset loc_4022D5
.text:00401DEC                 dd offset def_401DE3, offset loc_402326, offset loc_40235C
.text:00401DEC                 dd offset loc_4023C0, offset loc_402475, offset def_401DE3
.text:00401DEC                 dd offset loc_4024BB, offset loc_4024DD, offset def_401DE3
.text:00401DEC                 dd offset loc_4024FF
.text:00401EBC                 align 10h
.text:00401EC0
.text:00401EC0 def_401DE3:                             ; CODE XREF: sub_401DB0+2D↑j
.text:00401EC0                                         ; sub_401DB0+33↑j
.text:00401EC0                                         ; DATA XREF: ...
.text:00401EC0                 xor     eax, eax        ; jumptable 00401DE3 default case, cases 72-75,77,78,80-82,84-96,105,106,108,109,111,113,118,121
.text:00401EC2
.text:00401EC2 loc_401EC2:                             ; CODE XREF: sub_401DB0+163↓j
.text:00401EC2                                         ; sub_401DB0+3BF↓j
.text:00401EC2                 mov     ebx, [esp+9Ch+var_8]
.text:00401EC9                 mov     esi, [esp+9Ch+var_4]
.text:00401ED0                 add     esp, 9Ch
.text:00401ED6                 retn
.text:00401ED7 ; ---------------------------------------------------------------------------
.text:00401ED7
.text:00401ED7 loc_401ED7:                             ; CODE XREF: sub_401DB0+33↑j
.text:00401ED7                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00401ED7                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 71
.text:00401EDA                 cmp     ebx, ds:dword_411010
.text:00401EE0                 mov     ds:dword_411000, ebx
.text:00401EE6                 jge     short loc_401F24
.text:00401EE8                 lea     esi, [esp+9Ch+var_7C]
.text:00401EEC                 add     edx, 2
.text:00401EEF                 xor     ebx, ebx
.text:00401EF1                 mov     [esp+9Ch+Format], esi ; int
.text:00401EF5                 mov     esi, [ecx+edx*4-4]
.text:00401EF9                 mov     ds:dword_411000, edx
.text:00401EFF                 mov     [esp+9Ch+Stream], esi ; char *
.text:00401F02                 call    sub_4078E0
.text:00401F07                 test    eax, eax
.text:00401F09                 jz      short loc_401F15
.text:00401F0B                 nop
.text:00401F0C                 lea     esi, [esi+0]
.text:00401F10
.text:00401F10 loc_401F10:                             ; CODE XREF: sub_401DB0:loc_401F1E↓j
.text:00401F10                                         ; sub_401DB0+172↓j ...
.text:00401F10                 movzx   eax, bl
.text:00401F13                 jmp     short loc_401EC2
.text:00401F15 ; ---------------------------------------------------------------------------
.text:00401F15
.text:00401F15 loc_401F15:                             ; CODE XREF: sub_401DB0+159↑j
.text:00401F15                 call    sub_4079D0
.text:00401F1A                 cmp     eax, [esp+9Ch+var_5C]
.text:00401F1E
.text:00401F1E loc_401F1E:                             ; CODE XREF: sub_401DB0+23C↓j
.text:00401F1E                                         ; sub_401DB0+28D↓j ...
.text:00401F1E                 jnz     short loc_401F10
.text:00401F20
.text:00401F20 loc_401F20:                             ; CODE XREF: sub_401DB0+45C↓j
.text:00401F20                                         ; sub_401DB0+5FA↓j ...
.text:00401F20                 mov     bl, 1
.text:00401F22                 jmp     short loc_401F10
.text:00401F24 ; ---------------------------------------------------------------------------
.text:00401F24
.text:00401F24 loc_401F24:                             ; CODE XREF: sub_401DB0+136↑j
.text:00401F24                                         ; sub_401DB0+206↓j ...
.text:00401F24                 mov     [esp+9Ch+Stream], offset aMissingArgumen ; "missing argument after %s"
.text:00401F2B                 call    ds:__imp_libintl_gettext
.text:00401F31                 mov     ecx, ds:dword_411020
.text:00401F37                 mov     esi, eax
.text:00401F39                 mov     eax, ds:dword_411010
.text:00401F3E                 mov     ebx, [ecx+eax*4-4]
.text:00401F42                 mov     [esp+9Ch+Stream], ebx ; char *
.text:00401F45                 call    sub_404700
.text:00401F4A                 mov     ecx, ds:dword_411020
.text:00401F50                 mov     ebx, eax
.text:00401F52                 mov     edx, [ecx]
.text:00401F54                 mov     [esp+9Ch+Format], offset Format ; "%s: "
.text:00401F5C                 mov     ecx, ds:_iob
.text:00401F62                 mov     [esp+9Ch+var_94], edx
.text:00401F66                 add     ecx, 40h ; '@'
.text:00401F69                 mov     [esp+9Ch+Stream], ecx ; Stream
.text:00401F6C                 call    fprintf
.text:00401F71                 mov     [esp+9Ch+var_94], ebx
.text:00401F75                 mov     [esp+9Ch+Format], esi ; Format
.text:00401F79
.text:00401F79 loc_401F79:                             ; CODE XREF: sub_401DB0+6C0↓j
.text:00401F79                 mov     edx, ds:_iob
.text:00401F7F                 add     edx, 40h ; '@'
.text:00401F82                 mov     [esp+9Ch+Stream], edx ; Stream
.text:00401F85                 call    fprintf
.text:00401F8A                 mov     esi, ds:_iob
.text:00401F90                 add     esi, 40h ; '@'
.text:00401F93                 mov     [esp+9Ch+Stream], esi ; Stream
.text:00401F96                 call    fflush
.text:00401F9B                 mov     [esp+9Ch+Stream], 2 ; Code
.text:00401FA2                 call    exit
.text:00401FA7 ; ---------------------------------------------------------------------------
.text:00401FA7
.text:00401FA7 loc_401FA7:                             ; CODE XREF: sub_401DB0+33↑j
.text:00401FA7                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00401FA7                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 79
.text:00401FAA                 cmp     ebx, ds:dword_411010
.text:00401FB0                 mov     ds:dword_411000, ebx
.text:00401FB6                 jge     loc_401F24
.text:00401FBC                 lea     esi, [esp+9Ch+var_7C]
.text:00401FC0                 add     edx, 2
.text:00401FC3                 xor     ebx, ebx
.text:00401FC5                 mov     [esp+9Ch+Format], esi ; int
.text:00401FC9                 mov     esi, [ecx+edx*4-4]
.text:00401FCD                 mov     ds:dword_411000, edx
.text:00401FD3                 mov     [esp+9Ch+Stream], esi ; char *
.text:00401FD6                 call    sub_4078E0
.text:00401FDB                 test    eax, eax
.text:00401FDD                 jnz     loc_401F10
.text:00401FE3                 call    sub_4079E0
.text:00401FE8                 cmp     eax, [esp+9Ch+var_60]
.text:00401FEC                 jmp     loc_401F1E
.text:00401FF1 ; ---------------------------------------------------------------------------
.text:00401FF1
.text:00401FF1 loc_401FF1:                             ; CODE XREF: sub_401DB0+33↑j
.text:00401FF1                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00401FF1                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 83
.text:00401FF4                 cmp     ebx, ds:dword_411010
.text:00401FFA                 mov     ds:dword_411000, ebx
.text:00402000                 jge     loc_401F24
.text:00402006                 lea     esi, [esp+9Ch+var_7C]
.text:0040200A                 add     edx, 2
.text:0040200D                 xor     ebx, ebx
.text:0040200F                 mov     [esp+9Ch+Format], esi ; int
.text:00402013                 mov     esi, [ecx+edx*4-4]
.text:00402017                 mov     ds:dword_411000, edx
.text:0040201D                 mov     [esp+9Ch+Stream], esi ; char *
.text:00402020                 call    sub_4078E0
.text:00402025                 test    eax, eax
.text:00402027                 jnz     loc_401F10
.text:0040202D                 mov     ecx, [esp+9Ch+var_7C]
.text:00402031                 and     ecx, 0F000h
.text:00402037                 cmp     ecx, 0C000h
.text:0040203D                 jmp     loc_401F1E
.text:00402042 ; ---------------------------------------------------------------------------
.text:00402042
.text:00402042 loc_402042:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402042                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402042                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 98
.text:00402045                 cmp     ebx, ds:dword_411010
.text:0040204B                 mov     ds:dword_411000, ebx
.text:00402051                 jge     loc_401F24
.text:00402057                 lea     esi, [esp+9Ch+var_7C]
.text:0040205B                 add     edx, 2
.text:0040205E                 xor     ebx, ebx
.text:00402060                 mov     [esp+9Ch+Format], esi ; int
.text:00402064                 mov     esi, [ecx+edx*4-4]
.text:00402068                 mov     ds:dword_411000, edx
.text:0040206E                 mov     [esp+9Ch+Stream], esi ; char *
.text:00402071                 call    sub_4078E0
.text:00402076                 test    eax, eax
.text:00402078                 jnz     loc_401F10
.text:0040207E                 mov     ecx, [esp+9Ch+var_7C]
.text:00402082                 and     ecx, 0F000h
.text:00402088                 cmp     ecx, 6000h
.text:0040208E                 jmp     loc_401F1E
.text:00402093 ; ---------------------------------------------------------------------------
.text:00402093
.text:00402093 loc_402093:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402093                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402093                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 99
.text:00402096                 cmp     ebx, ds:dword_411010
.text:0040209C                 mov     ds:dword_411000, ebx
.text:004020A2                 jge     loc_401F24
.text:004020A8                 lea     esi, [esp+9Ch+var_7C]
.text:004020AC                 add     edx, 2
.text:004020AF                 xor     ebx, ebx
.text:004020B1                 mov     [esp+9Ch+Format], esi ; int
.text:004020B5                 mov     esi, [ecx+edx*4-4]
.text:004020B9                 mov     ds:dword_411000, edx
.text:004020BF                 mov     [esp+9Ch+Stream], esi ; char *
.text:004020C2                 call    sub_4078E0
.text:004020C7                 test    eax, eax
.text:004020C9                 jnz     loc_401F10
.text:004020CF                 mov     edx, [esp+9Ch+var_7C]
.text:004020D3                 and     edx, 0F000h
.text:004020D9                 cmp     edx, 2000h
.text:004020DF                 jmp     loc_401F1E
.text:004020E4 ; ---------------------------------------------------------------------------
.text:004020E4
.text:004020E4 loc_4020E4:                             ; CODE XREF: sub_401DB0+33↑j
.text:004020E4                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004020E4                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 100
.text:004020E7                 cmp     ebx, ds:dword_411010
.text:004020ED                 mov     ds:dword_411000, ebx
.text:004020F3                 jge     loc_401F24
.text:004020F9                 lea     esi, [esp+9Ch+var_7C]
.text:004020FD                 add     edx, 2
.text:00402100                 xor     ebx, ebx
.text:00402102                 mov     [esp+9Ch+Format], esi ; int
.text:00402106                 mov     esi, [ecx+edx*4-4]
.text:0040210A                 mov     ds:dword_411000, edx
.text:00402110                 mov     [esp+9Ch+Stream], esi ; char *
.text:00402113                 call    sub_4078E0
.text:00402118                 test    eax, eax
.text:0040211A                 jnz     loc_401F10
.text:00402120                 mov     edx, [esp+9Ch+var_7C]
.text:00402124                 and     edx, 0F000h
.text:0040212A                 cmp     edx, 4000h
.text:00402130                 jmp     loc_401F1E
.text:00402135 ; ---------------------------------------------------------------------------
.text:00402135
.text:00402135 loc_402135:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402135                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402135                 lea     ebx, [edx+1]    ; jumptable 00401DE3 cases 97,101
.text:00402138                 cmp     ebx, ds:dword_411010
.text:0040213E                 mov     ds:dword_411000, ebx
.text:00402144                 jge     loc_401F24
.text:0040214A                 lea     ebx, [esp+9Ch+var_7C]
.text:0040214E                 add     edx, 2
.text:00402151                 mov     [esp+9Ch+Format], ebx ; int
.text:00402155                 mov     esi, [ecx+edx*4-4]
.text:00402159                 mov     ds:dword_411000, edx
.text:0040215F                 mov     [esp+9Ch+Stream], esi ; char *
.text:00402162                 call    sub_4078E0
.text:00402167
.text:00402167 loc_402167:                             ; CODE XREF: sub_401DB0+5A7↓j
.text:00402167                 test    eax, eax
.text:00402169
.text:00402169 loc_402169:                             ; CODE XREF: sub_401DB0+774↓j
.text:00402169                 setz    al
.text:0040216C
.text:0040216C loc_40216C:                             ; CODE XREF: sub_401DB0+520↓j
.text:0040216C                 movzx   eax, al
.text:0040216F                 jmp     loc_401EC2
.text:00402174 ; ---------------------------------------------------------------------------
.text:00402174
.text:00402174 loc_402174:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402174                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402174                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 102
.text:00402177                 cmp     ebx, ds:dword_411010
.text:0040217D                 mov     ds:dword_411000, ebx
.text:00402183                 jge     loc_401F24
.text:00402189                 lea     esi, [esp+9Ch+var_7C]
.text:0040218D                 add     edx, 2
.text:00402190                 xor     ebx, ebx
.text:00402192                 mov     [esp+9Ch+Format], esi ; int
.text:00402196                 mov     esi, [ecx+edx*4-4]
.text:0040219A                 mov     ds:dword_411000, edx
.text:004021A0                 mov     [esp+9Ch+Stream], esi ; char *
.text:004021A3                 call    sub_4078E0
.text:004021A8                 test    eax, eax
.text:004021AA                 jnz     loc_401F10
.text:004021B0                 mov     ecx, [esp+9Ch+var_7C]
.text:004021B4                 and     ecx, 0F000h
.text:004021BA                 cmp     ecx, 8000h
.text:004021C0                 jmp     loc_401F1E
.text:004021C5 ; ---------------------------------------------------------------------------
.text:004021C5
.text:004021C5 loc_4021C5:                             ; CODE XREF: sub_401DB0+33↑j
.text:004021C5                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004021C5                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 103
.text:004021C8                 cmp     ebx, ds:dword_411010
.text:004021CE                 mov     ds:dword_411000, ebx
.text:004021D4                 jge     loc_401F24
.text:004021DA                 lea     esi, [esp+9Ch+var_7C]
.text:004021DE                 add     edx, 2
.text:004021E1                 xor     ebx, ebx
.text:004021E3                 mov     [esp+9Ch+Format], esi ; int
.text:004021E7                 mov     esi, [ecx+edx*4-4]
.text:004021EB                 mov     ds:dword_411000, edx
.text:004021F1                 mov     [esp+9Ch+Stream], esi ; char *
.text:004021F4                 call    sub_4078E0
.text:004021F9                 test    eax, eax
.text:004021FB                 jnz     loc_401F10
.text:00402201                 test    byte ptr [esp+9Ch+var_7C+1], 4
.text:00402206
.text:00402206 loc_402206:                             ; CODE XREF: sub_401DB0+4F3↓j
.text:00402206                                         ; sub_401DB0+670↓j ...
.text:00402206                 jz      loc_401F10
.text:0040220C                 jmp     loc_401F20
.text:00402211 ; ---------------------------------------------------------------------------
.text:00402211
.text:00402211 loc_402211:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402211                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402211                 lea     ebx, [edx+1]    ; jumptable 00401DE3 cases 76,104
.text:00402214                 cmp     ebx, ds:dword_411010
.text:0040221A                 mov     ds:dword_411000, ebx
.text:00402220                 jge     loc_401F24
.text:00402226                 lea     esi, [esp+9Ch+var_7C]
.text:0040222A                 add     edx, 2
.text:0040222D                 xor     ebx, ebx
.text:0040222F                 mov     [esp+9Ch+Format], esi
.text:00402233                 mov     esi, [ecx+edx*4-4]
.text:00402237                 mov     ds:dword_411000, edx
.text:0040223D                 mov     [esp+9Ch+Stream], esi
.text:00402240                 call    sub_407860
.text:00402245                 test    eax, eax
.text:00402247                 jnz     loc_401F10
.text:0040224D                 mov     ecx, [esp+9Ch+var_7C]
.text:00402251                 and     ecx, 0F000h
.text:00402257                 cmp     ecx, 0A000h
.text:0040225D                 jmp     loc_401F1E
.text:00402262 ; ---------------------------------------------------------------------------
.text:00402262
.text:00402262 loc_402262:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402262                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402262                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 107
.text:00402265                 cmp     ebx, ds:dword_411010
.text:0040226B                 mov     ds:dword_411000, ebx
.text:00402271                 jge     loc_401F24
.text:00402277                 lea     esi, [esp+9Ch+var_7C]
.text:0040227B                 add     edx, 2
.text:0040227E                 xor     ebx, ebx
.text:00402280                 mov     [esp+9Ch+Format], esi ; int
.text:00402284                 mov     esi, [ecx+edx*4-4]
.text:00402288                 mov     ds:dword_411000, edx
.text:0040228E                 mov     [esp+9Ch+Stream], esi ; char *
.text:00402291                 call    sub_4078E0
.text:00402296                 test    eax, eax
.text:00402298                 jnz     loc_401F10
.text:0040229E                 test    byte ptr [esp+9Ch+var_7C+1], 2
.text:004022A3                 jmp     loc_402206
.text:004022A8 ; ---------------------------------------------------------------------------
.text:004022A8
.text:004022A8 loc_4022A8:                             ; CODE XREF: sub_401DB0+33↑j
.text:004022A8                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004022A8                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 110
.text:004022AB                 cmp     ebx, ds:dword_411010
.text:004022B1                 mov     ds:dword_411000, ebx
.text:004022B7                 jge     loc_401F24
.text:004022BD                 lea     ebx, [edx+2]
.text:004022C0                 mov     esi, [ecx+ebx*4-4]
.text:004022C4                 mov     ds:dword_411000, ebx
.text:004022CA                 cmp     byte ptr [esi], 0
.text:004022CD                 setnz   al
.text:004022D0                 jmp     loc_40216C
.text:004022D5 ; ---------------------------------------------------------------------------
.text:004022D5
.text:004022D5 loc_4022D5:                             ; CODE XREF: sub_401DB0+33↑j
.text:004022D5                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004022D5                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 112
.text:004022D8                 cmp     ebx, ds:dword_411010
.text:004022DE                 mov     ds:dword_411000, ebx
.text:004022E4                 jge     loc_401F24
.text:004022EA                 lea     esi, [esp+9Ch+var_7C]
.text:004022EE                 add     edx, 2
.text:004022F1                 xor     ebx, ebx
.text:004022F3                 mov     [esp+9Ch+Format], esi ; int
.text:004022F7                 mov     esi, [ecx+edx*4-4]
.text:004022FB                 mov     ds:dword_411000, edx
.text:00402301                 mov     [esp+9Ch+Stream], esi ; char *
.text:00402304                 call    sub_4078E0
.text:00402309                 test    eax, eax
.text:0040230B                 jnz     loc_401F10
.text:00402311                 mov     edx, [esp+9Ch+var_7C]
.text:00402315                 and     edx, 0F000h
.text:0040231B                 cmp     edx, 1000h
.text:00402321                 jmp     loc_401F1E
.text:00402326 ; ---------------------------------------------------------------------------
.text:00402326
.text:00402326 loc_402326:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402326                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402326                 lea     esi, [edx+1]    ; jumptable 00401DE3 case 114
.text:00402329                 cmp     esi, ds:dword_411010
.text:0040232F                 mov     ds:dword_411000, esi
.text:00402335                 jge     loc_401F24
.text:0040233B                 mov     [esp+9Ch+Format], 4 ; int
.text:00402343
.text:00402343 loc_402343:                             ; CODE XREF: sub_401DB0+728↓j
.text:00402343                                         ; sub_401DB0+74A↓j
.text:00402343                 lea     eax, [edx+2]
.text:00402346                 mov     ds:dword_411000, eax
.text:0040234B                 mov     edx, [ecx+eax*4-4]
.text:0040234F                 mov     [esp+9Ch+Stream], edx ; LPCSTR
.text:00402352                 call    sub_407750
.text:00402357                 jmp     loc_402167
.text:0040235C ; ---------------------------------------------------------------------------
.text:0040235C
.text:0040235C loc_40235C:                             ; CODE XREF: sub_401DB0+33↑j
.text:0040235C                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:0040235C                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 115
.text:0040235F                 cmp     ebx, ds:dword_411010
.text:00402365                 mov     ds:dword_411000, ebx
.text:0040236B                 jge     loc_401F24
.text:00402371                 lea     esi, [esp+9Ch+var_7C]
.text:00402375                 add     edx, 2
.text:00402378                 xor     ebx, ebx
.text:0040237A                 mov     [esp+9Ch+Format], esi ; int
.text:0040237E                 mov     esi, [ecx+edx*4-4]
.text:00402382                 mov     ds:dword_411000, edx
.text:00402388                 mov     [esp+9Ch+Stream], esi ; char *
.text:0040238B                 call    sub_4078E0
.text:00402390                 test    eax, eax
.text:00402392                 jnz     loc_401F10
.text:00402398                 mov     edx, [esp+9Ch+var_48]
.text:0040239C                 mov     eax, [esp+9Ch+var_4C]
.text:004023A0                 test    edx, edx
.text:004023A2                 js      loc_401F10
.text:004023A8                 test    edx, edx
.text:004023AA                 jg      loc_401F20
.text:004023B0                 cmp     eax, 0
.text:004023B3                 jbe     loc_401F10
.text:004023B9                 jmp     loc_401F20
.text:004023B9 ; ---------------------------------------------------------------------------
.text:004023BE                 align 10h
.text:004023C0
.text:004023C0 loc_4023C0:                             ; CODE XREF: sub_401DB0+33↑j
.text:004023C0                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004023C0                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 116
.text:004023C3                 cmp     ebx, ds:dword_411010
.text:004023C9                 mov     ds:dword_411000, ebx
.text:004023CF                 jge     loc_401F24
.text:004023D5                 lea     ebx, [esp+9Ch+FileHandle]
.text:004023D9                 add     edx, 2
.text:004023DC                 mov     [esp+9Ch+Format], ebx
.text:004023E0                 mov     esi, [ecx+edx*4-4]
.text:004023E4                 mov     ds:dword_411000, edx
.text:004023EA                 mov     [esp+9Ch+Stream], esi
.text:004023ED                 call    sub_404350
.text:004023F2                 test    al, al
.text:004023F4                 jz      short loc_402425
.text:004023F6                 mov     ecx, [esp+9Ch+FileHandle]
.text:004023FA                 xor     ebx, ebx
.text:004023FC                 mov     esi, [esp+9Ch+var_80]
.text:00402400                 add     ecx, 80000000h
.text:00402406                 adc     esi, 0
.text:00402409                 cmp     esi, 0
.text:0040240C                 ja      loc_401F10
.text:00402412                 mov     edx, [esp+9Ch+FileHandle]
.text:00402416                 mov     [esp+9Ch+Stream], edx ; FileHandle
.text:00402419                 call    _isatty
.text:0040241E                 test    eax, eax
.text:00402420                 jmp     loc_402206
.text:00402425 ; ---------------------------------------------------------------------------
.text:00402425
.text:00402425 loc_402425:                             ; CODE XREF: sub_401DB0+644↑j
.text:00402425                 mov     [esp+9Ch+Stream], offset aAfterT ; "after -t"
.text:0040242C                 call    ds:__imp_libintl_gettext
.text:00402432                 mov     [esp+9Ch+Stream], offset aSIntegerExpres ; "%s: integer expression expected\n"
.text:00402439                 mov     esi, eax
.text:0040243B                 call    ds:__imp_libintl_gettext
.text:00402441                 mov     edx, ds:dword_411020
.text:00402447                 mov     ecx, [edx]
.text:00402449                 mov     ebx, eax
.text:0040244B                 mov     [esp+9Ch+Format], offset Format ; "%s: "
.text:00402453                 mov     edx, ds:_iob
.text:00402459                 mov     [esp+9Ch+var_94], ecx
.text:0040245D                 add     edx, 40h ; '@'
.text:00402460                 mov     [esp+9Ch+Stream], edx ; Stream
.text:00402463                 call    fprintf
.text:00402468                 mov     [esp+9Ch+var_94], esi
.text:0040246C                 mov     [esp+9Ch+Format], ebx
.text:00402470                 jmp     loc_401F79
.text:00402475 ; ---------------------------------------------------------------------------
.text:00402475
.text:00402475 loc_402475:                             ; CODE XREF: sub_401DB0+33↑j
.text:00402475                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:00402475                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 117
.text:00402478                 cmp     ebx, ds:dword_411010
.text:0040247E                 mov     ds:dword_411000, ebx
.text:00402484                 jge     loc_401F24
.text:0040248A                 lea     esi, [esp+9Ch+var_7C]
.text:0040248E                 add     edx, 2
.text:00402491                 xor     ebx, ebx
.text:00402493                 mov     [esp+9Ch+Format], esi ; int
.text:00402497                 mov     esi, [ecx+edx*4-4]
.text:0040249B                 mov     ds:dword_411000, edx
.text:004024A1                 mov     [esp+9Ch+Stream], esi ; char *
.text:004024A4                 call    sub_4078E0
.text:004024A9                 test    eax, eax
.text:004024AB                 jnz     loc_401F10
.text:004024B1                 test    byte ptr [esp+9Ch+var_7C+1], 8
.text:004024B6                 jmp     loc_402206
.text:004024BB ; ---------------------------------------------------------------------------
.text:004024BB
.text:004024BB loc_4024BB:                             ; CODE XREF: sub_401DB0+33↑j
.text:004024BB                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004024BB                 lea     ebx, [edx+1]    ; jumptable 00401DE3 case 119
.text:004024BE                 cmp     ebx, ds:dword_411010
.text:004024C4                 mov     ds:dword_411000, ebx
.text:004024CA                 jge     loc_401F24
.text:004024D0                 mov     [esp+9Ch+Format], 2
.text:004024D8                 jmp     loc_402343
.text:004024DD ; ---------------------------------------------------------------------------
.text:004024DD
.text:004024DD loc_4024DD:                             ; CODE XREF: sub_401DB0+33↑j
.text:004024DD                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004024DD                 lea     esi, [edx+1]    ; jumptable 00401DE3 case 120
.text:004024E0                 cmp     esi, ds:dword_411010
.text:004024E6                 mov     ds:dword_411000, esi
.text:004024EC                 jge     loc_401F24
.text:004024F2                 mov     [esp+9Ch+Format], 1
.text:004024FA                 jmp     loc_402343
.text:004024FF ; ---------------------------------------------------------------------------
.text:004024FF
.text:004024FF loc_4024FF:                             ; CODE XREF: sub_401DB0+33↑j
.text:004024FF                                         ; DATA XREF: sub_401DB0:jpt_401DE3↑o
.text:004024FF                 lea     esi, [edx+1]    ; jumptable 00401DE3 case 122
.text:00402502                 cmp     esi, ds:dword_411010
.text:00402508                 mov     ds:dword_411000, esi
.text:0040250E                 jge     loc_401F24
.text:00402514                 lea     esi, [edx+2]
.text:00402517                 mov     ebx, [ecx+esi*4-4]
.text:0040251B                 mov     ds:dword_411000, esi
.text:00402521                 cmp     byte ptr [ebx], 0
.text:00402524                 jmp     loc_402169
.text:00402524 sub_401DB0      endp
.text:00402524
.text:00402524 ; ---------------------------------------------------------------------------
.text:00402529 byte_402529     db 3Dh, 0               ; DATA XREF: sub_402550+1B↓o
.text:0040252B byte_40252B     db 2Dh                  ; DATA XREF: sub_402550+43↓o
.text:0040252C                 db 6Eh, 74h, 0
.text:0040252F                 db 2Dh                  ; DATA XREF: sub_402550+57↓o
.text:00402530                 db 6Fh, 74h, 0
.text:00402533                 db 2Dh                  ; DATA XREF: sub_402550+67↓o
.text:00402534                 db 65h, 66h, 0
.text:00402537                 db 2Dh                  ; DATA XREF: sub_402550+77↓o
.text:00402538                 db 65h, 71h, 0
.text:0040253B                 db 2Dh                  ; DATA XREF: sub_402550+87↓o
.text:0040253C                 db 6Eh, 65h, 0
.text:0040253F                 db 2Dh                  ; DATA XREF: sub_402550+97↓o
.text:00402540                 db 6Ch, 74h, 0
.text:00402543 ; ---------------------------------------------------------------------------
.text:00402543                 sub     eax, 2D00656Ch  ; DATA XREF: sub_402550+A7↓o
.text:00402543                                         ; sub_402550+B7↓o
.text:00402548                 db      67h
.text:00402548                 jz      $+3
.text:0040254B
.text:0040254B loc_40254B:                             ; CODE XREF: .text:00402548↑j
.text:0040254B                                         ; DATA XREF: sub_402550+C7↓o
.text:0040254B                 sub     eax, 90006567h
.text:00402550
.text:00402550 ; =============== S U B R O U T I N E =======================================
.text:00402550
.text:00402550
.text:00402550 sub_402550      proc near               ; CODE XREF: sub_4027A0+197↓p
.text:00402550                                         ; sub_4027A0+415↓p ...
.text:00402550
.text:00402550 var_D           = byte ptr -0Dh
.text:00402550 var_C           = dword ptr -0Ch
.text:00402550 var_8           = dword ptr -8
.text:00402550 var_4           = dword ptr -4
.text:00402550 arg_0           = dword ptr  4
.text:00402550
.text:00402550                 cld
.text:00402551                 sub     esp, 10h
.text:00402554                 mov     ecx, 2
.text:00402559                 mov     [esp+10h+var_C], ebx
.text:0040255D                 mov     ebx, [esp+10h+arg_0]
.text:00402561                 mov     [esp+10h+var_8], esi
.text:00402565                 mov     [esp+10h+var_4], edi
.text:00402569                 mov     esi, ebx
.text:0040256B                 mov     edi, offset byte_402529
.text:00402570                 mov     [esp+10h+var_D], 0
.text:00402575                 repe cmpsb
.text:00402577                 jz      loc_402630
.text:0040257D                 mov     esi, ebx
.text:0040257F                 mov     edi, offset byte_401283
.text:00402584                 mov     ecx, 3
.text:00402589                 repe cmpsb
.text:0040258B                 jz      loc_402630
.text:00402591                 mov     esi, ebx
.text:00402593                 mov     edi, offset byte_40252B
.text:00402598                 mov     ecx, 4
.text:0040259D                 repe cmpsb
.text:0040259F                 jz      loc_402630
.text:004025A5                 mov     esi, ebx
.text:004025A7                 mov     edi, offset byte_40252F
.text:004025AC                 mov     ecx, 4
.text:004025B1                 repe cmpsb
.text:004025B3                 jz      short loc_402630
.text:004025B5                 mov     esi, ebx
.text:004025B7                 mov     edi, offset byte_402533
.text:004025BC                 mov     ecx, 4
.text:004025C1                 repe cmpsb
.text:004025C3                 jz      short loc_402630
.text:004025C5                 mov     esi, ebx
.text:004025C7                 mov     edi, offset byte_402537
.text:004025CC                 mov     ecx, 4
.text:004025D1                 repe cmpsb
.text:004025D3                 jz      short loc_402630
.text:004025D5                 mov     esi, ebx
.text:004025D7                 mov     edi, offset byte_40253B
.text:004025DC                 mov     ecx, 4
.text:004025E1                 repe cmpsb
.text:004025E3                 jz      short loc_402630
.text:004025E5                 mov     esi, ebx
.text:004025E7                 mov     edi, offset byte_40253F
.text:004025EC                 mov     ecx, 4
.text:004025F1                 repe cmpsb
.text:004025F3                 jz      short loc_402630
.text:004025F5                 mov     esi, ebx
.text:004025F7                 mov     edi, offset loc_402543
.text:004025FC                 mov     ecx, 4
.text:00402601                 repe cmpsb
.text:00402603                 jz      short loc_402630
.text:00402605                 mov     esi, ebx
.text:00402607                 mov     edi, (offset loc_402543+4)
.text:0040260C                 mov     ecx, 4
.text:00402611                 repe cmpsb
.text:00402613                 jz      short loc_402630
.text:00402615                 mov     esi, ebx
.text:00402617                 mov     edi, offset loc_40254B
.text:0040261C                 mov     ecx, 4
.text:00402621                 repe cmpsb
.text:00402623                 jnz     short loc_402635
.text:00402625                 lea     esi, [esi+0]
.text:00402629                 lea     edi, [edi+0]
.text:00402630
.text:00402630 loc_402630:                             ; CODE XREF: sub_402550+27↑j
.text:00402630                                         ; sub_402550+3B↑j ...
.text:00402630                 mov     [esp+10h+var_D], 1
.text:00402635
.text:00402635 loc_402635:                             ; CODE XREF: sub_402550+D3↑j
.text:00402635                 movzx   eax, [esp+10h+var_D]
.text:0040263A                 mov     ebx, [esp+10h+var_C]
.text:0040263E                 mov     esi, [esp+10h+var_8]
.text:00402642                 mov     edi, [esp+10h+var_4]
.text:00402646                 add     esp, 10h
.text:00402649                 retn
.text:00402649 sub_402550      endp
.text:00402649
.text:00402649 ; ---------------------------------------------------------------------------
.text:0040264A                 align 10h
.text:00402650
.text:00402650 ; =============== S U B R O U T I N E =======================================
.text:00402650
.text:00402650
.text:00402650 sub_402650      proc near               ; CODE XREF: sub_4027A0+143↓p
.text:00402650                                         ; sub_4027A0+22B↓p ...
.text:00402650
.text:00402650 arg_0           = dword ptr  4
.text:00402650
.text:00402650                 mov     eax, [esp+arg_0]
.text:00402654                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402657                 jz      short loc_402660
.text:00402659                 xor     eax, eax
.text:0040265B                 retn
.text:0040265B ; ---------------------------------------------------------------------------
.text:0040265C                 align 10h
.text:00402660
.text:00402660 loc_402660:                             ; CODE XREF: sub_402650+7↑j
.text:00402660                 movsx   eax, byte ptr [eax+1]
.text:00402664                 sub     eax, 47h ; 'G'  ; switch 52 cases
.text:00402667                 cmp     eax, 33h
.text:0040266A                 ja      def_402670      ; jumptable 00402670 default case, cases 72-75,77,80-82,84-96,105,106,108,109,113,118,121
.text:00402670                 jmp     ds:jpt_402670[eax*4] ; switch jump
.text:00402670 ; ---------------------------------------------------------------------------
.text:00402677                 align 4
.text:00402678 jpt_402670      dd offset loc_402748, offset def_402670, offset def_402670
.text:00402678                                         ; DATA XREF: sub_402650+20↑r
.text:00402678                 dd offset def_402670, offset def_402670, offset loc_402748 ; jump table for switch statement
.text:00402678                 dd offset def_402670, offset loc_402748, offset loc_402748
.text:00402678                 dd offset def_402670, offset def_402670, offset def_402670
.text:00402678                 dd offset loc_402748, offset def_402670, offset def_402670
.text:00402678                 dd offset def_402670, offset def_402670, offset def_402670
.text:00402678                 dd offset def_402670, offset def_402670, offset def_402670
.text:00402678                 dd offset def_402670, offset def_402670, offset def_402670
.text:00402678                 dd offset def_402670, offset def_402670, offset loc_402748
.text:00402678                 dd offset loc_402748, offset loc_402748, offset loc_402748
.text:00402678                 dd offset loc_402748, offset loc_402748, offset loc_402748
.text:00402678                 dd offset loc_402748, offset def_402670, offset def_402670
.text:00402678                 dd offset loc_402748, offset def_402670, offset def_402670
.text:00402678                 dd offset loc_402748, offset loc_402748, offset loc_402748
.text:00402678                 dd offset def_402670, offset loc_402748, offset loc_402748
.text:00402678                 dd offset loc_402748, offset loc_402748, offset def_402670
.text:00402678                 dd offset loc_402748, offset loc_402748, offset def_402670
.text:00402678                 dd offset loc_402748
.text:00402748 ; ---------------------------------------------------------------------------
.text:00402748
.text:00402748 loc_402748:                             ; CODE XREF: sub_402650+20↑j
.text:00402748                                         ; DATA XREF: sub_402650:jpt_402670↑o
.text:00402748                 mov     eax, 1          ; jumptable 00402670 cases 71,76,78,79,83,97-104,107,110-112,114-117,119,120,122
.text:0040274D                 retn
.text:0040274D ; ---------------------------------------------------------------------------
.text:0040274E                 align 10h
.text:00402750
.text:00402750 def_402670:                             ; CODE XREF: sub_402650+1A↑j
.text:00402750                                         ; sub_402650+20↑j
.text:00402750                                         ; DATA XREF: ...
.text:00402750                 xor     eax, eax        ; jumptable 00402670 default case, cases 72-75,77,80-82,84-96,105,106,108,109,113,118,121
.text:00402752                 retn
.text:00402752 sub_402650      endp
.text:00402752
.text:00402752 ; ---------------------------------------------------------------------------
.text:00402753 byte_402753     db 21h                  ; DATA XREF: sub_4027A0+72↓o
.text:00402753                                         ; sub_4027A0+1A9↓o ...
.text:00402754                 db 0
.text:00402755 aSUnaryOperator db '%s: unary operator expected',0Ah,0
.text:00402755                                         ; DATA XREF: sub_4027A0:loc_4028F6↓o
.text:00402755                                         ; sub_403FE0:loc_4040F1↓o
.text:00402772 asc_402772      db '(',0                ; DATA XREF: sub_4027A0+245↓o
.text:00402772                                         ; sub_4027A0+4C6↓o ...
.text:00402774 asc_402774      db ')',0                ; DATA XREF: sub_4027A0+257↓o
.text:00402774                                         ; sub_4027A0+4D8↓o ...
.text:00402776 aA              db '-a',0               ; DATA XREF: sub_4027A0+295↓o
.text:00402776                                         ; sub_4027A0+31A↓o ...
.text:00402779 aO              db '-o',0               ; DATA XREF: sub_4027A0+2A9↓o
.text:00402779                                         ; sub_4027A0+36B↓o ...
.text:0040277C aSBinaryOperato db '%s: binary operator expected',0Ah,0
.text:0040277C                                         ; DATA XREF: sub_4027A0:loc_402B2F↓o
.text:0040279A                 align 10h
.text:004027A0
.text:004027A0 ; =============== S U B R O U T I N E =======================================
.text:004027A0
.text:004027A0
.text:004027A0 sub_4027A0      proc near               ; CODE XREF: sub_403010+170↓p
.text:004027A0                                         ; sub_403FE0+26D↓p
.text:004027A0
.text:004027A0 Stream          = dword ptr -6Ch
.text:004027A0 Format          = dword ptr -68h
.text:004027A0 var_64          = dword ptr -64h
.text:004027A0 var_54          = dword ptr -54h
.text:004027A0 var_50          = dword ptr -50h
.text:004027A0 var_4C          = dword ptr -4Ch
.text:004027A0 var_48          = byte ptr -48h
.text:004027A0 var_47          = byte ptr -47h
.text:004027A0 var_46          = byte ptr -46h
.text:004027A0 var_45          = byte ptr -45h
.text:004027A0 var_40          = dword ptr -40h
.text:004027A0 var_3C          = byte ptr -3Ch
.text:004027A0 var_3B          = byte ptr -3Bh
.text:004027A0 var_3A          = byte ptr -3Ah
.text:004027A0 var_39          = byte ptr -39h
.text:004027A0 var_38          = dword ptr -38h
.text:004027A0 var_34          = dword ptr -34h
.text:004027A0 var_30          = dword ptr -30h
.text:004027A0 var_2C          = dword ptr -2Ch
.text:004027A0 var_28          = dword ptr -28h
.text:004027A0 var_24          = dword ptr -24h
.text:004027A0 var_20          = byte ptr -20h
.text:004027A0 var_1F          = byte ptr -1Fh
.text:004027A0 var_1E          = byte ptr -1Eh
.text:004027A0 var_1D          = byte ptr -1Dh
.text:004027A0 var_1C          = dword ptr -1Ch
.text:004027A0 var_18          = dword ptr -18h
.text:004027A0 var_14          = dword ptr -14h
.text:004027A0 arg_0           = dword ptr  4
.text:004027A0
.text:004027A0                 push    ebp
.text:004027A1                 push    edi
.text:004027A2                 push    esi
.text:004027A3                 push    ebx
.text:004027A4                 sub     esp, 5Ch
.text:004027A7                 cmp     [esp+6Ch+arg_0], 5 ; switch 6 cases
.text:004027AC                 ja      def_4027B6      ; jumptable 004027B6 default case, cases 0,5
.text:004027B2                 mov     edx, [esp+6Ch+arg_0]
.text:004027B6                 jmp     ds:jpt_4027B6[edx*4] ; switch jump
.text:004027B6 ; ---------------------------------------------------------------------------
.text:004027BD                 align 10h
.text:004027C0 jpt_4027B6      dd offset def_4027B6    ; DATA XREF: sub_4027A0+16↑r
.text:004027C0                 dd offset loc_4027D8    ; jump table for switch statement
.text:004027C0                 dd offset loc_402800
.text:004027C0                 dd offset loc_402920
.text:004027C0                 dd offset loc_402B64
.text:004027C0                 dd offset def_4027B6
.text:004027D8 ; ---------------------------------------------------------------------------
.text:004027D8
.text:004027D8 loc_4027D8:                             ; CODE XREF: sub_4027A0+16↑j
.text:004027D8                                         ; DATA XREF: sub_4027A0:jpt_4027B6↑o
.text:004027D8                 mov     ebx, ds:dword_411000 ; jumptable 004027B6 case 1
.text:004027DE                 mov     eax, ds:dword_411020
.text:004027E3                 lea     esi, [ebx+1]
.text:004027E6                 mov     ds:dword_411000, esi
.text:004027EC                 mov     ecx, [eax+ebx*4]
.text:004027EF                 cmp     byte ptr [ecx], 0
.text:004027F2                 setnz   al
.text:004027F5
.text:004027F5 loc_4027F5:                             ; CODE XREF: sub_4027A0+9E↓j
.text:004027F5                                         ; sub_4027A0+151↓j ...
.text:004027F5                 add     esp, 5Ch
.text:004027F8                 movzx   eax, al
.text:004027FB                 pop     ebx
.text:004027FC                 pop     esi
.text:004027FD                 pop     edi
.text:004027FE                 pop     ebp
.text:004027FF                 retn
.text:00402800 ; ---------------------------------------------------------------------------
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_4027A0+16↑j
.text:00402800                                         ; DATA XREF: sub_4027A0:jpt_4027B6↑o
.text:00402800                 cld                     ; jumptable 004027B6 case 2
.text:00402801                 mov     ebx, ds:dword_411000
.text:00402807                 mov     eax, 2
.text:0040280C                 mov     ebp, ds:dword_411020
.text:00402812                 mov     edi, offset byte_402753
.text:00402817                 mov     [esp+6Ch+var_14], ebx
.text:0040281B                 mov     ecx, [ebp+ebx*4+0]
.text:0040281F                 mov     esi, ecx
.text:00402821                 mov     [esp+6Ch+var_50], ecx
.text:00402825                 mov     ecx, eax
.text:00402827                 repe cmpsb
.text:00402829                 jnz     short loc_402840
.text:0040282B                 mov     edx, [ebp+ebx*4+4]
.text:0040282F                 add     ebx, 2
.text:00402832                 mov     ds:dword_411000, ebx
.text:00402838                 cmp     byte ptr [edx], 0
.text:0040283B
.text:0040283B loc_40283B:                             ; CODE XREF: sub_4027A0+206↓j
.text:0040283B                 setz    al
.text:0040283E                 jmp     short loc_4027F5
.text:00402840 ; ---------------------------------------------------------------------------
.text:00402840
.text:00402840 loc_402840:                             ; CODE XREF: sub_4027A0+89↑j
.text:00402840                 mov     eax, [esp+6Ch+var_50]
.text:00402844                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402847                 jnz     short loc_402853
.text:00402849                 cmp     byte ptr [eax+1], 0
.text:0040284D                 jnz     loc_4028D6
.text:00402853
.text:00402853 loc_402853:                             ; CODE XREF: sub_4027A0+A7↑j
.text:00402853                                         ; sub_4027A0+13A↓j ...
.text:00402853                 mov     [esp+6Ch+Stream], offset aMissingArgumen ; "missing argument after %s"
.text:0040285A                 call    ds:__imp_libintl_gettext
.text:00402860                 mov     ebp, ds:dword_411020
.text:00402866                 mov     edi, eax
.text:00402868                 mov     eax, ds:dword_411010
.text:0040286D                 mov     esi, [ebp+eax*4-4]
.text:00402871                 mov     [esp+6Ch+Stream], esi ; char *
.text:00402874                 call    sub_404700
.text:00402879                 mov     edx, ds:dword_411020
.text:0040287F                 mov     ebx, eax
.text:00402881
.text:00402881 loc_402881:                             ; CODE XREF: sub_4027A0+174↓j
.text:00402881                                         ; sub_4027A0+3AE↓j
.text:00402881                 mov     eax, [edx]
.text:00402883                 mov     [esp+6Ch+var_64], eax
.text:00402887                 mov     ecx, ds:_iob
.text:0040288D                 mov     [esp+6Ch+Format], offset Format ; "%s: "
.text:00402895                 add     ecx, 40h ; '@'
.text:00402898                 mov     [esp+6Ch+Stream], ecx ; Stream
.text:0040289B                 call    fprintf
.text:004028A0                 mov     [esp+6Ch+var_64], ebx
.text:004028A4                 mov     ebx, ds:_iob
.text:004028AA                 mov     [esp+6Ch+Format], edi ; Format
.text:004028AE                 add     ebx, 40h ; '@'
.text:004028B1                 mov     [esp+6Ch+Stream], ebx ; Stream
.text:004028B4                 call    fprintf
.text:004028B9                 mov     edi, ds:_iob
.text:004028BF                 add     edi, 40h ; '@'
.text:004028C2                 mov     [esp+6Ch+Stream], edi ; Stream
.text:004028C5                 call    fflush
.text:004028CA                 mov     [esp+6Ch+Stream], 2 ; Code
.text:004028D1                 call    exit
.text:004028D6 ; ---------------------------------------------------------------------------
.text:004028D6
.text:004028D6 loc_4028D6:                             ; CODE XREF: sub_4027A0+AD↑j
.text:004028D6                 cmp     byte ptr [eax+2], 0
.text:004028DA                 jnz     loc_402853
.text:004028E0                 mov     [esp+6Ch+Stream], eax
.text:004028E3                 call    sub_402650
.text:004028E8                 test    al, al
.text:004028EA                 jz      short loc_4028F6
.text:004028EC                 call    sub_401DB0
.text:004028F1                 jmp     loc_4027F5
.text:004028F6 ; ---------------------------------------------------------------------------
.text:004028F6
.text:004028F6 loc_4028F6:                             ; CODE XREF: sub_4027A0+14A↑j
.text:004028F6                                         ; sub_4027A0+232↓j ...
.text:004028F6                 mov     [esp+6Ch+Stream], offset aSUnaryOperator ; "%s: unary operator expected\n"
.text:004028FD                 call    ds:__imp_libintl_gettext
.text:00402903                 mov     edx, ds:dword_411020
.text:00402909                 mov     ebp, ds:dword_411000
.text:0040290F                 mov     edi, eax
.text:00402911                 mov     ebx, [edx+ebp*4]
.text:00402914                 jmp     loc_402881
.text:00402914 ; ---------------------------------------------------------------------------
.text:00402919                 align 10h
.text:00402920
.text:00402920 loc_402920:                             ; CODE XREF: sub_4027A0+16↑j
.text:00402920                                         ; DATA XREF: sub_4027A0:jpt_4027B6↑o
.text:00402920                 mov     ebx, ds:dword_411000 ; jumptable 004027B6 case 3
.text:00402926                 mov     ebp, ds:dword_411020
.text:0040292C                 mov     [esp+6Ch+var_18], ebx
.text:00402930                 mov     edi, [ebp+ebx*4+4]
.text:00402934                 mov     [esp+6Ch+Stream], edi
.text:00402937                 call    sub_402550
.text:0040293C                 test    al, al
.text:0040293E                 jnz     loc_402B53
.text:00402944                 cld
.text:00402945                 mov     eax, [ebp+ebx*4+0]
.text:00402949                 mov     edi, offset byte_402753
.text:0040294E                 mov     ecx, 2
.text:00402953                 mov     esi, eax
.text:00402955                 mov     [esp+6Ch+var_1C], eax
.text:00402959                 repe cmpsb
.text:0040295B                 jnz     loc_4029E0
.text:00402961                 inc     ebx
.text:00402962                 cmp     ebx, ds:dword_411010
.text:00402968                 mov     ds:dword_411000, ebx
.text:0040296E                 jge     loc_402853
.text:00402974                 cld
.text:00402975                 mov     ebx, [ebp+ebx*4+0]
.text:00402979                 mov     edx, 2
.text:0040297E                 mov     edi, offset byte_402753
.text:00402983                 mov     ecx, edx
.text:00402985                 mov     esi, ebx
.text:00402987                 repe cmpsb
.text:00402989                 jnz     short loc_4029AB
.text:0040298B                 mov     ebx, [esp+6Ch+var_18]
.text:0040298F                 mov     esi, [ebp+ebx*4+8]
.text:00402993                 mov     ebp, ebx
.text:00402995                 add     ebp, 3
.text:00402998                 mov     ds:dword_411000, ebp
.text:0040299E                 cmp     byte ptr [esi], 0
.text:004029A1
.text:004029A1 loc_4029A1:                             ; CODE XREF: sub_4027A0+488↓j
.text:004029A1                 setz    al
.text:004029A4
.text:004029A4 loc_4029A4:                             ; CODE XREF: sub_4027A0+23D↓j
.text:004029A4                                         ; sub_4027A0+50B↓j ...
.text:004029A4                 test    al, al
.text:004029A6                 jmp     loc_40283B
.text:004029AB ; ---------------------------------------------------------------------------
.text:004029AB
.text:004029AB loc_4029AB:                             ; CODE XREF: sub_4027A0+1E9↑j
.text:004029AB                 cmp     byte ptr [ebx], 2Dh ; '-'
.text:004029AE                 jnz     loc_402853
.text:004029B4                 cmp     byte ptr [ebx+1], 0
.text:004029B8                 jz      loc_402853
.text:004029BE                 cmp     byte ptr [ebx+2], 0
.text:004029C2                 jnz     loc_402853
.text:004029C8                 mov     [esp+6Ch+Stream], ebx
.text:004029CB                 call    sub_402650
.text:004029D0                 test    al, al
.text:004029D2                 jz      loc_4028F6
.text:004029D8                 call    sub_401DB0
.text:004029DD                 jmp     short loc_4029A4
.text:004029DD ; ---------------------------------------------------------------------------
.text:004029DF                 align 10h
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_4027A0+1BB↑j
.text:004029E0                 cld
.text:004029E1                 mov     esi, [esp+6Ch+var_1C]
.text:004029E5                 mov     edi, offset asc_402772 ; "("
.text:004029EA                 mov     ecx, 2
.text:004029EF                 repe cmpsb
.text:004029F1                 jnz     short loc_402A30
.text:004029F3                 mov     edx, [ebp+ebx*4+8]
.text:004029F7                 mov     edi, offset asc_402774 ; ")"
.text:004029FC                 mov     ecx, 2
.text:00402A01                 mov     esi, edx
.text:00402A03                 repe cmpsb
.text:00402A05                 jnz     short loc_402A30
.text:00402A07                 mov     edi, [esp+6Ch+var_18]
.text:00402A0B                 mov     ecx, [ebp+ebx*4+4]
.text:00402A0F                 mov     ebx, [esp+6Ch+var_18]
.text:00402A13                 add     edi, 2
.text:00402A16                 mov     ds:dword_411000, edi
.text:00402A1C                 cmp     byte ptr [ecx], 0
.text:00402A1F                 setnz   al
.text:00402A22                 add     ebx, 3
.text:00402A25
.text:00402A25 loc_402A25:                             ; CODE XREF: sub_4027A0+68B↓j
.text:00402A25                 mov     ds:dword_411000, ebx
.text:00402A2B                 jmp     loc_4027F5
.text:00402A30 ; ---------------------------------------------------------------------------
.text:00402A30
.text:00402A30 loc_402A30:                             ; CODE XREF: sub_4027A0+251↑j
.text:00402A30                                         ; sub_4027A0+265↑j
.text:00402A30                 cld
.text:00402A31                 mov     esi, [esp+6Ch+var_18]
.text:00402A35                 mov     edi, offset aA  ; "-a"
.text:00402A3A                 mov     ecx, 3
.text:00402A3F                 mov     ebx, [ebp+esi*4+4]
.text:00402A43                 mov     esi, ebx
.text:00402A45                 repe cmpsb
.text:00402A47                 jz      short loc_402A5D
.text:00402A49                 mov     edi, offset aO  ; "-o"
.text:00402A4E                 mov     ecx, 3
.text:00402A53                 mov     esi, ebx
.text:00402A55                 repe cmpsb
.text:00402A57                 jnz     loc_402B2F
.text:00402A5D
.text:00402A5D loc_402A5D:                             ; CODE XREF: sub_4027A0+2A7↑j
.text:00402A5D                 mov     ebp, [esp+6Ch+var_18]
.text:00402A61                 cmp     ebp, ds:dword_411010
.text:00402A67                 jge     loc_402853
.text:00402A6D                 mov     [esp+6Ch+var_1D], 0
.text:00402A72
.text:00402A72 loc_402A72:                             ; CODE XREF: sub_4027A0+380↓j
.text:00402A72                 mov     [esp+6Ch+var_1E], 0
.text:00402A77                 mov     [esp+6Ch+var_1F], 1
.text:00402A7C
.text:00402A7C loc_402A7C:                             ; CODE XREF: sub_4027A0+334↓j
.text:00402A7C                 mov     [esp+6Ch+var_20], 0
.text:00402A81                 call    sub_403FE0
.text:00402A86                 test    al, al
.text:00402A88                 jz      short loc_402A96
.text:00402A8A                 cmp     [esp+6Ch+var_1F], 0
.text:00402A8F                 jz      short loc_402A96
.text:00402A91                 mov     [esp+6Ch+var_20], 1
.text:00402A96
.text:00402A96 loc_402A96:                             ; CODE XREF: sub_4027A0+2E8↑j
.text:00402A96                                         ; sub_4027A0+2EF↑j
.text:00402A96                 movzx   eax, [esp+6Ch+var_20]
.text:00402A9B                 mov     ebx, ds:dword_411000
.text:00402AA1                 mov     ebp, ds:dword_411010
.text:00402AA7                 mov     [esp+6Ch+var_1F], al
.text:00402AAB                 cmp     ebx, ebp
.text:00402AAD                 mov     [esp+6Ch+var_24], ebx
.text:00402AB1                 jge     short loc_402AD6
.text:00402AB3                 cld
.text:00402AB4                 mov     ecx, ds:dword_411020
.text:00402ABA                 mov     edi, offset aA  ; "-a"
.text:00402ABF                 mov     edx, [ecx+ebx*4]
.text:00402AC2                 mov     ecx, 3
.text:00402AC7                 mov     esi, edx
.text:00402AC9                 repe cmpsb
.text:00402ACB                 jnz     short loc_402AD6
.text:00402ACD                 inc     ebx
.text:00402ACE                 mov     ds:dword_411000, ebx
.text:00402AD4                 jmp     short loc_402A7C
.text:00402AD6 ; ---------------------------------------------------------------------------
.text:00402AD6
.text:00402AD6 loc_402AD6:                             ; CODE XREF: sub_4027A0+311↑j
.text:00402AD6                                         ; sub_4027A0+32B↑j
.text:00402AD6                 cmp     [esp+6Ch+var_20], 0
.text:00402ADB                 jnz     short loc_402AE4
.text:00402ADD                 cmp     [esp+6Ch+var_1D], 0
.text:00402AE2                 jz      short loc_402AE9
.text:00402AE4
.text:00402AE4 loc_402AE4:                             ; CODE XREF: sub_4027A0+33B↑j
.text:00402AE4                 mov     [esp+6Ch+var_1E], 1
.text:00402AE9
.text:00402AE9 loc_402AE9:                             ; CODE XREF: sub_4027A0+342↑j
.text:00402AE9                 movzx   ebx, [esp+6Ch+var_1E]
.text:00402AEE                 cmp     [esp+6Ch+var_24], ebp
.text:00402AF2                 mov     [esp+6Ch+var_1D], bl
.text:00402AF6                 jge     short loc_402B25
.text:00402AF8                 cld
.text:00402AF9                 mov     edi, ds:dword_411020
.text:00402AFF                 mov     ecx, 3
.text:00402B04                 mov     esi, [esp+6Ch+var_24]
.text:00402B08                 mov     ebp, [edi+esi*4]
.text:00402B0B                 mov     edi, offset aO  ; "-o"
.text:00402B10                 mov     esi, ebp
.text:00402B12                 repe cmpsb
.text:00402B14                 jnz     short loc_402B25
.text:00402B16                 mov     eax, [esp+6Ch+var_24]
.text:00402B1A                 inc     eax
.text:00402B1B                 mov     ds:dword_411000, eax
.text:00402B20                 jmp     loc_402A72
.text:00402B25 ; ---------------------------------------------------------------------------
.text:00402B25
.text:00402B25 loc_402B25:                             ; CODE XREF: sub_4027A0+356↑j
.text:00402B25                                         ; sub_4027A0+374↑j
.text:00402B25                 movzx   eax, [esp+6Ch+var_1E]
.text:00402B2A                 jmp     loc_4027F5
.text:00402B2F ; ---------------------------------------------------------------------------
.text:00402B2F
.text:00402B2F loc_402B2F:                             ; CODE XREF: sub_4027A0+2B7↑j
.text:00402B2F                                         ; sub_4027A0+53D↓j
.text:00402B2F                 mov     [esp+6Ch+Stream], offset aSBinaryOperato ; "%s: binary operator expected\n"
.text:00402B36                 call    ds:__imp_libintl_gettext
.text:00402B3C                 mov     edx, ds:dword_411020
.text:00402B42                 mov     ecx, ds:dword_411000
.text:00402B48                 mov     edi, eax
.text:00402B4A                 mov     ebx, [edx+ecx*4+4]
.text:00402B4E                 jmp     loc_402881
.text:00402B53 ; ---------------------------------------------------------------------------
.text:00402B53
.text:00402B53 loc_402B53:                             ; CODE XREF: sub_4027A0+19E↑j
.text:00402B53                 mov     [esp+6Ch+Stream], 0
.text:00402B5A                 call    sub_4013A0
.text:00402B5F                 jmp     loc_4027F5
.text:00402B64 ; ---------------------------------------------------------------------------
.text:00402B64
.text:00402B64 loc_402B64:                             ; CODE XREF: sub_4027A0+16↑j
.text:00402B64                                         ; DATA XREF: sub_4027A0:jpt_4027B6↑o
.text:00402B64                 cld                     ; jumptable 004027B6 case 4
.text:00402B65                 mov     ebx, ds:dword_411000
.text:00402B6B                 mov     edx, 2
.text:00402B70                 mov     ebp, ds:dword_411020
.text:00402B76                 mov     ecx, edx
.text:00402B78                 mov     [esp+6Ch+var_28], ebx
.text:00402B7C                 mov     edi, [ebp+ebx*4+0]
.text:00402B80                 mov     [esp+6Ch+var_2C], edi
.text:00402B84                 mov     esi, [esp+6Ch+var_2C]
.text:00402B88                 mov     edi, offset byte_402753
.text:00402B8D                 repe cmpsb
.text:00402B8F                 jnz     loc_402DC5
.text:00402B95                 mov     esi, ds:dword_411010
.text:00402B9B                 inc     ebx
.text:00402B9C                 mov     ds:dword_411000, ebx
.text:00402BA2                 cmp     ebx, esi
.text:00402BA4                 mov     [esp+6Ch+var_30], esi
.text:00402BA8                 jge     loc_402853
.text:00402BAE                 mov     ecx, [ebp+ebx*4+4]
.text:00402BB2                 mov     [esp+6Ch+Stream], ecx
.text:00402BB5                 call    sub_402550
.text:00402BBA                 test    al, al
.text:00402BBC                 jnz     loc_402DB4
.text:00402BC2                 cld
.text:00402BC3                 mov     eax, [ebp+ebx*4+0]
.text:00402BC7                 mov     ecx, 2
.text:00402BCC                 mov     edi, offset byte_402753
.text:00402BD1                 mov     esi, eax
.text:00402BD3                 mov     [esp+6Ch+var_34], eax
.text:00402BD7                 repe cmpsb
.text:00402BD9                 jnz     loc_402C61
.text:00402BDF                 mov     ebx, [esp+6Ch+var_28]
.text:00402BE3                 add     ebx, 2
.text:00402BE6                 cmp     ebx, [esp+6Ch+var_30]
.text:00402BEA                 mov     ds:dword_411000, ebx
.text:00402BF0                 jge     loc_402853
.text:00402BF6                 cld
.text:00402BF7                 mov     ebx, [ebp+ebx*4+0]
.text:00402BFB                 mov     edx, 2
.text:00402C00                 mov     edi, offset byte_402753
.text:00402C05                 mov     ecx, edx
.text:00402C07                 mov     esi, ebx
.text:00402C09                 repe cmpsb
.text:00402C0B                 jnz     short loc_402C2D
.text:00402C0D                 mov     ebx, [esp+6Ch+var_28]
.text:00402C11                 mov     edi, [ebp+ebx*4+0Ch]
.text:00402C15                 mov     ebp, ebx
.text:00402C17                 add     ebp, 4
.text:00402C1A                 mov     ds:dword_411000, ebp
.text:00402C20                 cmp     byte ptr [edi], 0
.text:00402C23                 setz    al
.text:00402C26
.text:00402C26 loc_402C26:                             ; CODE XREF: sub_4027A0+4BF↓j
.text:00402C26                 test    al, al
.text:00402C28                 jmp     loc_4029A1
.text:00402C2D ; ---------------------------------------------------------------------------
.text:00402C2D
.text:00402C2D loc_402C2D:                             ; CODE XREF: sub_4027A0+46B↑j
.text:00402C2D                 cmp     byte ptr [ebx], 2Dh ; '-'
.text:00402C30                 jnz     loc_402853
.text:00402C36                 cmp     byte ptr [ebx+1], 0
.text:00402C3A                 jz      loc_402853
.text:00402C40                 cmp     byte ptr [ebx+2], 0
.text:00402C44                 jnz     loc_402853
.text:00402C4A                 mov     [esp+6Ch+Stream], ebx
.text:00402C4D                 call    sub_402650
.text:00402C52                 test    al, al
.text:00402C54                 jz      loc_4028F6
.text:00402C5A                 call    sub_401DB0
.text:00402C5F                 jmp     short loc_402C26
.text:00402C61 ; ---------------------------------------------------------------------------
.text:00402C61
.text:00402C61 loc_402C61:                             ; CODE XREF: sub_4027A0+439↑j
.text:00402C61                 cld
.text:00402C62                 mov     esi, [esp+6Ch+var_34]
.text:00402C66                 mov     edi, offset asc_402772 ; "("
.text:00402C6B                 mov     ecx, 2
.text:00402C70                 repe cmpsb
.text:00402C72                 jnz     short loc_402CB0
.text:00402C74                 mov     edx, [ebp+ebx*4+8]
.text:00402C78                 mov     edi, offset asc_402774 ; ")"
.text:00402C7D                 mov     ecx, 2
.text:00402C82                 mov     esi, edx
.text:00402C84                 repe cmpsb
.text:00402C86                 jnz     short loc_402CB0
.text:00402C88                 mov     ecx, [esp+6Ch+var_28]
.text:00402C8C                 mov     edi, [ebp+ecx*4+8]
.text:00402C90                 mov     eax, ecx
.text:00402C92                 add     eax, 3
.text:00402C95                 mov     esi, ecx
.text:00402C97                 mov     ds:dword_411000, eax
.text:00402C9C                 cmp     byte ptr [edi], 0
.text:00402C9F                 setnz   al
.text:00402CA2                 add     esi, 4
.text:00402CA5                 mov     ds:dword_411000, esi
.text:00402CAB                 jmp     loc_4029A4
.text:00402CB0 ; ---------------------------------------------------------------------------
.text:00402CB0
.text:00402CB0 loc_402CB0:                             ; CODE XREF: sub_4027A0+4D2↑j
.text:00402CB0                                         ; sub_4027A0+4E6↑j
.text:00402CB0                 cld
.text:00402CB1                 mov     edx, ds:dword_411000
.text:00402CB7                 mov     edi, offset aA  ; "-a"
.text:00402CBC                 mov     ecx, 3
.text:00402CC1                 mov     ebx, [ebp+edx*4+4]
.text:00402CC5                 mov     [esp+6Ch+var_38], edx
.text:00402CC9                 mov     esi, ebx
.text:00402CCB                 repe cmpsb
.text:00402CCD                 jz      short loc_402CE3
.text:00402CCF                 mov     edi, offset aO  ; "-o"
.text:00402CD4                 mov     ecx, 3
.text:00402CD9                 mov     esi, ebx
.text:00402CDB                 repe cmpsb
.text:00402CDD                 jnz     loc_402B2F
.text:00402CE3
.text:00402CE3 loc_402CE3:                             ; CODE XREF: sub_4027A0+52D↑j
.text:00402CE3                 mov     [esp+6Ch+var_39], 0
.text:00402CE8                 mov     ebp, [esp+6Ch+var_30]
.text:00402CEC                 cmp     [esp+6Ch+var_38], ebp
.text:00402CF0                 jge     loc_402853
.text:00402CF6
.text:00402CF6 loc_402CF6:                             ; CODE XREF: sub_4027A0+605↓j
.text:00402CF6                 mov     [esp+6Ch+var_3A], 0
.text:00402CFB                 mov     [esp+6Ch+var_3B], 1
.text:00402D00
.text:00402D00 loc_402D00:                             ; CODE XREF: sub_4027A0+5B8↓j
.text:00402D00                 mov     [esp+6Ch+var_3C], 0
.text:00402D05                 call    sub_403FE0
.text:00402D0A                 test    al, al
.text:00402D0C                 jz      short loc_402D1A
.text:00402D0E                 cmp     [esp+6Ch+var_3B], 0
.text:00402D13                 jz      short loc_402D1A
.text:00402D15                 mov     [esp+6Ch+var_3C], 1
.text:00402D1A
.text:00402D1A loc_402D1A:                             ; CODE XREF: sub_4027A0+56C↑j
.text:00402D1A                                         ; sub_4027A0+573↑j
.text:00402D1A                 movzx   ebx, [esp+6Ch+var_3C]
.text:00402D1F                 mov     ebp, ds:dword_411010
.text:00402D25                 mov     [esp+6Ch+var_3B], bl
.text:00402D29                 mov     ebx, ds:dword_411000
.text:00402D2F                 cmp     ebx, ebp
.text:00402D31                 mov     [esp+6Ch+var_40], ebx
.text:00402D35                 jge     short loc_402D5A
.text:00402D37                 cld
.text:00402D38                 mov     esi, ds:dword_411020
.text:00402D3E                 mov     ecx, 3
.text:00402D43                 mov     edi, [esi+ebx*4]
.text:00402D46                 mov     esi, edi
.text:00402D48                 mov     edi, offset aA  ; "-a"
.text:00402D4D                 repe cmpsb
.text:00402D4F                 jnz     short loc_402D5A
.text:00402D51                 inc     ebx
.text:00402D52                 mov     ds:dword_411000, ebx
.text:00402D58                 jmp     short loc_402D00
.text:00402D5A ; ---------------------------------------------------------------------------
.text:00402D5A
.text:00402D5A loc_402D5A:                             ; CODE XREF: sub_4027A0+595↑j
.text:00402D5A                                         ; sub_4027A0+5AF↑j
.text:00402D5A                 cmp     [esp+6Ch+var_3C], 0
.text:00402D5F                 jnz     short loc_402D68
.text:00402D61                 cmp     [esp+6Ch+var_39], 0
.text:00402D66                 jz      short loc_402D6D
.text:00402D68
.text:00402D68 loc_402D68:                             ; CODE XREF: sub_4027A0+5BF↑j
.text:00402D68                 mov     [esp+6Ch+var_3A], 1
.text:00402D6D
.text:00402D6D loc_402D6D:                             ; CODE XREF: sub_4027A0+5C6↑j
.text:00402D6D                 movzx   ecx, [esp+6Ch+var_3A]
.text:00402D72                 cmp     [esp+6Ch+var_40], ebp
.text:00402D76                 mov     [esp+6Ch+var_39], cl
.text:00402D7A                 jge     short loc_402DAA
.text:00402D7C                 cld
.text:00402D7D                 mov     ebx, ds:dword_411020
.text:00402D83                 mov     edi, offset aO  ; "-o"
.text:00402D88                 mov     eax, [esp+6Ch+var_40]
.text:00402D8C                 mov     ecx, 3
.text:00402D91                 mov     ebp, [ebx+eax*4]
.text:00402D94                 mov     esi, ebp
.text:00402D96                 repe cmpsb
.text:00402D98                 jnz     short loc_402DAA
.text:00402D9A                 mov     edx, [esp+6Ch+var_40]
.text:00402D9E                 inc     edx
.text:00402D9F                 mov     ds:dword_411000, edx
.text:00402DA5                 jmp     loc_402CF6
.text:00402DAA ; ---------------------------------------------------------------------------
.text:00402DAA
.text:00402DAA loc_402DAA:                             ; CODE XREF: sub_4027A0+5DA↑j
.text:00402DAA                                         ; sub_4027A0+5F8↑j
.text:00402DAA                 movzx   eax, [esp+6Ch+var_3A]
.text:00402DAF                 jmp     loc_4029A4
.text:00402DB4 ; ---------------------------------------------------------------------------
.text:00402DB4
.text:00402DB4 loc_402DB4:                             ; CODE XREF: sub_4027A0+41C↑j
.text:00402DB4                 mov     [esp+6Ch+Stream], 0
.text:00402DBB                 call    sub_4013A0
.text:00402DC0                 jmp     loc_4029A4
.text:00402DC5 ; ---------------------------------------------------------------------------
.text:00402DC5
.text:00402DC5 loc_402DC5:                             ; CODE XREF: sub_4027A0+3EF↑j
.text:00402DC5                 cld
.text:00402DC6                 mov     esi, [esp+6Ch+var_2C]
.text:00402DCA                 mov     edx, 2
.text:00402DCF                 mov     edi, offset asc_402772 ; "("
.text:00402DD4                 mov     ecx, edx
.text:00402DD6                 repe cmpsb
.text:00402DD8                 jnz     def_4027B6      ; jumptable 004027B6 default case, cases 0,5
.text:00402DDE                 mov     ecx, [ebp+ebx*4+0Ch]
.text:00402DE2                 mov     edx, 2
.text:00402DE7                 mov     edi, offset asc_402774 ; ")"
.text:00402DEC                 mov     esi, ecx
.text:00402DEE                 mov     ecx, edx
.text:00402DF0                 repe cmpsb
.text:00402DF2                 jnz     short def_4027B6 ; jumptable 004027B6 default case, cases 0,5
.text:00402DF4                 inc     ebx
.text:00402DF5                 mov     edx, 2
.text:00402DFA                 mov     edi, offset byte_402753
.text:00402DFF                 mov     ds:dword_411000, ebx
.text:00402E05                 mov     ecx, edx
.text:00402E07                 mov     ebx, [ebp+ebx*4+0]
.text:00402E0B                 mov     esi, ebx
.text:00402E0D                 repe cmpsb
.text:00402E0F                 jnz     short loc_402E30
.text:00402E11                 mov     esi, [esp+6Ch+var_28]
.text:00402E15                 mov     edi, [ebp+esi*4+8]
.text:00402E19                 mov     ebx, esi
.text:00402E1B                 add     ebx, 3
.text:00402E1E                 mov     ds:dword_411000, ebx
.text:00402E24                 cmp     byte ptr [edi], 0
.text:00402E27                 setz    al
.text:00402E2A
.text:00402E2A loc_402E2A:                             ; CODE XREF: sub_4027A0+6C8↓j
.text:00402E2A                 inc     ebx
.text:00402E2B                 jmp     loc_402A25
.text:00402E30 ; ---------------------------------------------------------------------------
.text:00402E30
.text:00402E30 loc_402E30:                             ; CODE XREF: sub_4027A0+66F↑j
.text:00402E30                 cmp     byte ptr [ebx], 2Dh ; '-'
.text:00402E33                 jnz     loc_402853
.text:00402E39                 cmp     byte ptr [ebx+1], 0
.text:00402E3D                 jz      loc_402853
.text:00402E43                 cmp     byte ptr [ebx+2], 0
.text:00402E47                 jnz     loc_402853
.text:00402E4D                 mov     [esp+6Ch+Stream], ebx
.text:00402E50                 call    sub_402650
.text:00402E55                 test    al, al
.text:00402E57                 jz      loc_4028F6
.text:00402E5D                 call    sub_401DB0
.text:00402E62                 mov     ebx, ds:dword_411000
.text:00402E68                 jmp     short loc_402E2A
.text:00402E68 ; ---------------------------------------------------------------------------
.text:00402E6A                 align 10h
.text:00402E70
.text:00402E70 def_4027B6:                             ; CODE XREF: sub_4027A0+C↑j
.text:00402E70                                         ; sub_4027A0+16↑j ...
.text:00402E70                 mov     ebx, [esp+6Ch+arg_0] ; jumptable 004027B6 default case, cases 0,5
.text:00402E74                 test    ebx, ebx
.text:00402E76                 jle     loc_402F5E
.text:00402E7C                 mov     ecx, ds:dword_411010
.text:00402E82                 cmp     ds:dword_411000, ecx
.text:00402E88                 jge     loc_402853
.text:00402E8E                 mov     [esp+6Ch+var_45], 0
.text:00402E93
.text:00402E93 loc_402E93:                             ; CODE XREF: sub_4027A0+7AF↓j
.text:00402E93                 mov     [esp+6Ch+var_46], 0
.text:00402E98                 mov     [esp+6Ch+var_47], 1
.text:00402E9D                 lea     esi, [esi+0]
.text:00402EA0
.text:00402EA0 loc_402EA0:                             ; CODE XREF: sub_4027A0+762↓j
.text:00402EA0                 mov     [esp+6Ch+var_48], 0
.text:00402EA5                 call    sub_403FE0
.text:00402EAA                 test    al, al
.text:00402EAC                 jz      short loc_402EC0
.text:00402EAE                 cmp     [esp+6Ch+var_47], 0
.text:00402EB3                 jz      short loc_402EC0
.text:00402EB5                 mov     [esp+6Ch+var_48], 1
.text:00402EBA                 lea     esi, [esi+0]
.text:00402EC0
.text:00402EC0 loc_402EC0:                             ; CODE XREF: sub_4027A0+70C↑j
.text:00402EC0                                         ; sub_4027A0+713↑j
.text:00402EC0                 movzx   edx, [esp+6Ch+var_48]
.text:00402EC5                 mov     ebx, ds:dword_411000
.text:00402ECB                 mov     ebp, ds:dword_411010
.text:00402ED1                 mov     [esp+6Ch+var_47], dl
.text:00402ED5                 cmp     ebx, ebp
.text:00402ED7                 mov     [esp+6Ch+var_54], ebx
.text:00402EDB                 jge     short loc_402F04
.text:00402EDD                 cld
.text:00402EDE                 mov     esi, ds:dword_411020
.text:00402EE4                 mov     edi, offset aA  ; "-a"
.text:00402EE9                 mov     ecx, 3
.text:00402EEE                 mov     edx, [esi+ebx*4]
.text:00402EF1                 mov     esi, edx
.text:00402EF3                 mov     [esp+6Ch+var_4C], edx
.text:00402EF7                 repe cmpsb
.text:00402EF9                 jnz     short loc_402F04
.text:00402EFB                 inc     ebx
.text:00402EFC                 mov     ds:dword_411000, ebx
.text:00402F02                 jmp     short loc_402EA0
.text:00402F04 ; ---------------------------------------------------------------------------
.text:00402F04
.text:00402F04 loc_402F04:                             ; CODE XREF: sub_4027A0+73B↑j
.text:00402F04                                         ; sub_4027A0+759↑j
.text:00402F04                 cmp     [esp+6Ch+var_48], 0
.text:00402F09                 jnz     short loc_402F12
.text:00402F0B                 cmp     [esp+6Ch+var_45], 0
.text:00402F10                 jz      short loc_402F17
.text:00402F12
.text:00402F12 loc_402F12:                             ; CODE XREF: sub_4027A0+769↑j
.text:00402F12                 mov     [esp+6Ch+var_46], 1
.text:00402F17
.text:00402F17 loc_402F17:                             ; CODE XREF: sub_4027A0+770↑j
.text:00402F17                 movzx   ebx, [esp+6Ch+var_46]
.text:00402F1C                 cmp     [esp+6Ch+var_54], ebp
.text:00402F20                 mov     [esp+6Ch+var_45], bl
.text:00402F24                 jge     short loc_402F54
.text:00402F26                 cld
.text:00402F27                 mov     edi, ds:dword_411020
.text:00402F2D                 mov     ecx, 3
.text:00402F32                 mov     eax, [esp+6Ch+var_54]
.text:00402F36                 mov     ebp, [edi+eax*4]
.text:00402F39                 mov     edi, offset aO  ; "-o"
.text:00402F3E                 mov     esi, ebp
.text:00402F40                 repe cmpsb
.text:00402F42                 jnz     short loc_402F54
.text:00402F44                 mov     ecx, [esp+6Ch+var_54]
.text:00402F48                 inc     ecx
.text:00402F49                 mov     ds:dword_411000, ecx
.text:00402F4F                 jmp     loc_402E93
.text:00402F54 ; ---------------------------------------------------------------------------
.text:00402F54
.text:00402F54 loc_402F54:                             ; CODE XREF: sub_4027A0+784↑j
.text:00402F54                                         ; sub_4027A0+7A2↑j
.text:00402F54                 movzx   eax, [esp+6Ch+var_46]
.text:00402F59                 jmp     loc_4027F5
.text:00402F5E ; ---------------------------------------------------------------------------
.text:00402F5E
.text:00402F5E loc_402F5E:                             ; CODE XREF: sub_4027A0+6D6↑j
.text:00402F5E                 call    abort
.text:00402F5E sub_4027A0      endp
.text:00402F5E
.text:00402F5E ; ---------------------------------------------------------------------------
.text:00402F63 ; const char Locale
.text:00402F63 Locale          db 0                    ; DATA XREF: sub_403010+20↓o
.text:00402F64                 align 20h
.text:00402F80
.text:00402F80 loc_402F80:                             ; DATA XREF: sub_403010+3A↓o
.text:00402F80                 arpl    [edx], di
.text:00402F82                 das
.text:00402F83                 jo      short near ptr stru_402FE5._file+2
.text:00402F85                 outsd
.text:00402F86                 db      67h
.text:00402F86                 jb      near ptr stru_402FE5._cnt+1
.text:00402F89                 jle     short near ptr aMatthewBradbur+0Dh ; "urn"
.text:00402F8B                 das
.text:00402F8C                 inc     ebx
.text:00402F8D                 outsd
.text:00402F8E                 jb      short near ptr stru_402FE5._file
.text:00402F90                 push    ebp
.text:00402F91                 jz      short near ptr stru_402FE5._charbuf+3
.text:00402F93                 insb
.text:00402F94                 jnb     short near ptr aKevinBraunsdor+5 ; " Braunsdorf"
.text:00402F96                 jnb     short near ptr stru_402FE5._bufsiz+3
.text:00402F98                 popa
.text:00402F99                 jb      short near ptr stru_402FE5._bufsiz+3
.text:00402F9B                 das
.text:00402F9C                 insb
.text:00402F9D                 outsd
.text:00402F9E                 arpl    [ecx+6Ch], sp
.text:00402F9E ; ---------------------------------------------------------------------------
.text:00402FA1                 db 65h, 0
.text:00402FA3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_403010+42↓o
.text:00402FA3                                         ; sub_403010+4F↓o
.text:00402FAD asc_402FAD      db ']',0                ; DATA XREF: sub_403010+84↓o
.text:00402FAF aMatthewBradbur db 'Matthew Bradburn',0 ; CODE XREF: .text:00402F89↑j
.text:00402FAF                                         ; DATA XREF: sub_403010+A4↓o
.text:00402FC0 aKevinBraunsdor db 'Kevin Braunsdorf',0 ; CODE XREF: .text:00402F94↑j
.text:00402FC0                                         ; DATA XREF: sub_403010+B0↓o
.text:00402FD1 a530            db '5.3.0',0            ; DATA XREF: sub_403010+C0↓o
.text:00402FD7 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_403010+C8↓o
.text:00402FE5 ; const FILE stru_402FE5
.text:00402FE5 stru_402FE5     FILE <696D005Bh, 6E697373h, 5D602067h, 65000A27h, 61727478h, \
.text:00402FE5                                         ; CODE XREF: .text:00402F86↑j
.text:00402FE5                                         ; DATA XREF: sub_403010+D0↓o ...
.text:00402FE5                       67726120h, 6E656D75h, 73252074h>
.text:00403005                 db    0
.text:00403006                 db  8Dh
.text:00403007                 db  76h ; v
.text:00403008 ; ---------------------------------------------------------------------------
.text:00403008                 add     [ebp+27BCh], cl
.text:00403008 ; ---------------------------------------------------------------------------
.text:0040300E                 dw 0
.text:00403010
.text:00403010 ; =============== S U B R O U T I N E =======================================
.text:00403010
.text:00403010 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00403010
.text:00403010 sub_403010      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00403010
.text:00403010 Category        = dword ptr -38h
.text:00403010 Locale          = dword ptr -34h
.text:00403010 var_30          = dword ptr -30h
.text:00403010 var_2C          = dword ptr -2Ch
.text:00403010 var_28          = dword ptr -28h
.text:00403010 var_24          = dword ptr -24h
.text:00403010 var_20          = byte ptr -20h
.text:00403010 var_1C          = dword ptr -1Ch
.text:00403010 var_18          = dword ptr -18h
.text:00403010 arg_0           = dword ptr  8
.text:00403010 arg_4           = dword ptr  0Ch
.text:00403010
.text:00403010                 push    ebp
.text:00403011                 xor     eax, eax
.text:00403013                 mov     ebp, esp
.text:00403015                 push    edi
.text:00403016                 push    esi
.text:00403017                 push    ebx
.text:00403018                 sub     esp, 2Ch
.text:0040301B                 and     esp, 0FFFFFFF0h
.text:0040301E                 call    __alloca
.text:00403023                 mov     ebx, [ebp+arg_0]
.text:00403026                 call    sub_40ECB0
.text:0040302B                 mov     eax, [ebp+arg_4]
.text:0040302E                 mov     ecx, [eax]
.text:00403030                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:00403038                 mov     [esp+38h+Category], 0 ; Category
.text:0040303F                 mov     ds:dword_411510, ecx
.text:00403045                 call    setlocale
.text:0040304A                 mov     [esp+38h+Locale], offset loc_402F80
.text:00403052                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00403059                 call    ds:libintl_bindtextdomain
.text:0040305F                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00403066                 call    ds:libintl_textdomain
.text:0040306C                 mov     [esp+38h+Category], offset sub_4045F0 ; void (__cdecl *)()
.text:00403073                 mov     eax, 2
.text:00403078                 mov     Code, eax
.text:0040307D                 call    sub_401040
.text:00403082                 mov     eax, [ebp+arg_4]
.text:00403085                 cmp     ebx, 1
.text:00403088                 mov     ds:dword_411020, eax
.text:0040308D                 jle     short loc_4030A6
.text:0040308F                 cld
.text:00403090                 mov     esi, [eax+ebx*4-4]
.text:00403094                 mov     edi, offset asc_402FAD ; "]"
.text:00403099                 mov     ecx, 2
.text:0040309E                 repe cmpsb
.text:004030A0                 jz      loc_403160
.text:004030A6
.text:004030A6 loc_4030A6:                             ; CODE XREF: sub_403010+7D↑j
.text:004030A6                 mov     [esp+38h+Category], ebx ; int
.text:004030A9                 mov     ecx, [ebp+arg_4]
.text:004030AC                 mov     [esp+38h+var_18], 0
.text:004030B4                 mov     [esp+38h+var_1C], offset aMatthewBradbur ; "Matthew Bradburn"
.text:004030BC                 mov     [esp+38h+Locale], ecx ; int
.text:004030C0                 mov     dword ptr [esp+38h+var_20], offset aKevinBraunsdor ; "Kevin Braunsdorf"
.text:004030C8                 mov     [esp+38h+var_24], offset sub_403D90 ; int
.text:004030D0                 mov     [esp+38h+var_28], offset a530 ; "5.3.0"
.text:004030D8                 mov     [esp+38h+var_2C], offset aGnuCoreutils ; "GNU coreutils"
.text:004030E0                 mov     [esp+38h+var_30], offset stru_402FE5 ; FILE *
.text:004030E8                 call    sub_404500
.text:004030ED                 mov     [esp+38h+Category], (offset stru_402FE5._ptr+2)
.text:004030F4                 call    ds:__imp_libintl_gettext
.text:004030FA                 mov     edi, ds:dword_411020
.text:00403100                 mov     edx, ds:_iob
.text:00403106                 mov     ebx, [edi]
.text:00403108                 mov     [esp+38h+Locale], offset Format ; "%s: "
.text:00403110                 add     edx, 40h ; '@'
.text:00403113                 mov     esi, eax
.text:00403115                 mov     [esp+38h+Category], edx ; Stream
.text:00403118                 mov     [esp+38h+var_30], ebx
.text:0040311C                 call    fprintf
.text:00403121                 mov     [esp+38h+var_30], 0
.text:00403129                 mov     [esp+38h+Locale], esi ; Format
.text:0040312D
.text:0040312D loc_40312D:                             ; CODE XREF: sub_403010+1D7↓j
.text:0040312D                 mov     ecx, ds:_iob
.text:00403133                 add     ecx, 40h ; '@'
.text:00403136                 mov     [esp+38h+Category], ecx ; Stream
.text:00403139                 call    fprintf
.text:0040313E                 mov     edi, ds:_iob
.text:00403144                 add     edi, 40h ; '@'
.text:00403147                 mov     [esp+38h+Category], edi ; Stream
.text:0040314A                 call    fflush
.text:0040314F                 mov     [esp+38h+Category], 2 ; Code
.text:00403156
.text:00403156 loc_403156:                             ; CODE XREF: sub_403010+1E6↓j
.text:00403156                                         ; sub_403010+1F2↓j
.text:00403156                 call    exit
.text:00403156 ; ---------------------------------------------------------------------------
.text:0040315B                 align 10h
.text:00403160
.text:00403160 loc_403160:                             ; CODE XREF: sub_403010+90↑j
.text:00403160                 dec     ebx
.text:00403161                 mov     eax, 1
.text:00403166                 cmp     ebx, 1
.text:00403169                 mov     ds:dword_411010, ebx
.text:0040316F                 mov     ds:dword_411000, eax
.text:00403174                 jle     loc_4031FB
.text:0040317A                 lea     edx, [ebx-1]
.text:0040317D                 mov     [esp+38h+Category], edx
.text:00403180                 call    sub_4027A0
.text:00403185                 mov     esi, ds:dword_411010
.text:0040318B                 cmp     ds:dword_411000, esi
.text:00403191                 jz      short loc_4031EC
.text:00403193                 mov     [esp+38h+Category], (offset stru_402FE5._flag+3)
.text:0040319A                 call    ds:__imp_libintl_gettext
.text:004031A0                 mov     ebx, ds:dword_411020
.text:004031A6                 mov     edi, eax
.text:004031A8                 mov     eax, ds:dword_411000
.text:004031AD                 mov     esi, [ebx+eax*4]
.text:004031B0                 mov     [esp+38h+Category], esi ; char *
.text:004031B3                 call    sub_404700
.text:004031B8                 mov     edx, ds:dword_411020
.text:004031BE                 mov     esi, eax
.text:004031C0                 mov     ebx, ds:_iob
.text:004031C6                 mov     ecx, [edx]
.text:004031C8                 add     ebx, 40h ; '@'
.text:004031CB                 mov     [esp+38h+Locale], offset Format ; "%s: "
.text:004031D3                 mov     [esp+38h+var_30], ecx
.text:004031D7                 mov     [esp+38h+Category], ebx ; Stream
.text:004031DA                 call    fprintf
.text:004031DF                 mov     [esp+38h+var_30], esi
.text:004031E3                 mov     [esp+38h+Locale], edi
.text:004031E7                 jmp     loc_40312D
.text:004031EC ; ---------------------------------------------------------------------------
.text:004031EC
.text:004031EC loc_4031EC:                             ; CODE XREF: sub_403010+181↑j
.text:004031EC                 xor     ebx, ebx
.text:004031EE                 test    al, al
.text:004031F0                 setz    bl
.text:004031F3                 mov     [esp+38h+Category], ebx
.text:004031F6                 jmp     loc_403156
.text:004031FB ; ---------------------------------------------------------------------------
.text:004031FB
.text:004031FB loc_4031FB:                             ; CODE XREF: sub_403010+164↑j
.text:004031FB                 mov     [esp+38h+Category], 1
.text:00403202                 jmp     loc_403156
.text:00403202 sub_403010      endp
.text:00403202
.text:00403202 ; ---------------------------------------------------------------------------
.text:00403207                 align 20h
.text:00403220 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00403220                                         ; DATA XREF: sub_403D90+C↓o
.text:00403247                 align 20h
.text:00403260 aUsageTestExpre db 'Usage: test EXPRESSION',0Ah
.text:00403260                                         ; DATA XREF: sub_403D90:loc_403DD0↓o
.text:00403260                 db '  or:  test',0Ah
.text:00403260                 db '  or:  [ EXPRESSION ]',0Ah
.text:00403260                 db '  or:  [ ]',0Ah
.text:00403260                 db '  or:  [ OPTION',0Ah
.text:00403260                 db 'Exit with the status determined by EXPRESSION.',0Ah
.text:00403260                 db 0Ah,0
.text:004032E5                 align 20h
.text:00403300 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00403300                                         ; DATA XREF: sub_403D90+62↓o
.text:0040332D                 align 20h
.text:00403340 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00403340                                         ; DATA XREF: sub_403D90+84↓o
.text:00403376                 align 10h
.text:00403380 aAnOmittedExpre db 0Ah                  ; DATA XREF: sub_403D90+A6↓o
.text:00403380                 db 'An omitted EXPRESSION defaults to false.  Otherwise,',0Ah
.text:00403380                 db 'EXPRESSION is true or false and sets exit status.  It is one of:',0Ah
.text:00403380                 db 0
.text:004033F8                 align 10h
.text:00403400 aExpressionExpr db 0Ah                  ; DATA XREF: sub_403D90+C8↓o
.text:00403400                 db '  ( EXPRESSION )               EXPRESSION is true',0Ah
.text:00403400                 db '  ! EXPRESSION                 EXPRESSION is false',0Ah
.text:00403400                 db '  EXPRESSION1 -a EXPRESSION2   both EXPRESSION1 and EXPRESSION2 a'
.text:00403400                 db 're true',0Ah
.text:00403400                 db '  EXPRESSION1 -o EXPRESSION2   either EXPRESSION1 or EXPRESSION2 '
.text:00403400                 db 'is true',0Ah,0
.text:004034F9                 align 10h
.text:00403500 aNStringTheLeng db 0Ah                  ; DATA XREF: sub_403D90+EA↓o
.text:00403500                 db '  -n STRING            the length of STRING is nonzero',0Ah
.text:00403500                 db '  STRING               equivalent to -n STRING',0Ah
.text:00403500                 db '  -z STRING            the length of STRING is zero',0Ah
.text:00403500                 db '  STRING1 = STRING2    the strings are equal',0Ah
.text:00403500                 db '  STRING1 != STRING2   the strings are not equal',0Ah,0
.text:004035FA                 align 10h
.text:00403600 aInteger1EqInte db 0Ah                  ; DATA XREF: sub_403D90+10C↓o
.text:00403600                 db '  INTEGER1 -eq INTEGER2   INTEGER1 is equal to INTEGER2',0Ah
.text:00403600                 db '  INTEGER1 -ge INTEGER2   INTEGER1 is greater than or equal to IN'
.text:00403600                 db 'TEGER2',0Ah
.text:00403600                 db '  INTEGER1 -gt INTEGER2   INTEGER1 is greater than INTEGER2',0Ah
.text:00403600                 db '  INTEGER1 -le INTEGER2   INTEGER1 is less than or equal to INTEG'
.text:00403600                 db 'ER2',0Ah
.text:00403600                 db '  INTEGER1 -lt INTEGER2   INTEGER1 is less than INTEGER2',0Ah
.text:00403600                 db '  INTEGER1 -ne INTEGER2   INTEGER1 is not equal to INTEGER2',0Ah,0
.text:00403778                 align 10h
.text:00403780 aFile1EfFile2Fi db 0Ah                  ; DATA XREF: sub_403D90+12E↓o
.text:00403780                 db '  FILE1 -ef FILE2   FILE1 and FILE2 have the same device and inod'
.text:00403780                 db 'e numbers',0Ah
.text:00403780                 db '  FILE1 -nt FILE2   FILE1 is newer (modification date) than FILE2'
.text:00403780                 db 0Ah
.text:00403780                 db '  FILE1 -ot FILE2   FILE1 is older than FILE2',0Ah,0
.text:0040383D                 align 10h
.text:00403840 aBFileFileExist db 0Ah                  ; DATA XREF: sub_403D90+150↓o
.text:00403840                 db '  -b FILE     FILE exists and is block special',0Ah
.text:00403840                 db '  -c FILE     FILE exists and is character special',0Ah
.text:00403840                 db '  -d FILE     FILE exists and is a directory',0Ah
.text:00403840                 db '  -e FILE     FILE exists',0Ah,0
.text:004038EB                 align 20h
.text:00403900 aFFileFileExist db '  -f FILE     FILE exists and is a regular file',0Ah
.text:00403900                                         ; DATA XREF: sub_403D90+172↓o
.text:00403900                 db '  -g FILE     FILE exists and is set-group-ID',0Ah
.text:00403900                 db '  -G FILE     FILE exists and is owned by the effective group ID',0Ah
.text:00403900                 db '  -h FILE     FILE exists and is a symbolic link (same as -L)',0Ah
.text:00403900                 db '  -k FILE     FILE exists and has its sticky bit set',0Ah,0
.text:00403A13                 align 10h
.text:00403A20 aLFileFileExist db '  -L FILE     FILE exists and is a symbolic link (same as -h)',0Ah
.text:00403A20                                         ; DATA XREF: sub_403D90+194↓o
.text:00403A20                 db '  -O FILE     FILE exists and is owned by the effective user ID',0Ah
.text:00403A20                 db '  -p FILE     FILE exists and is a named pipe',0Ah
.text:00403A20                 db '  -r FILE     FILE exists and read permission is granted',0Ah
.text:00403A20                 db '  -s FILE     FILE exists and has a size greater than zero',0Ah,0
.text:00403B41                 align 20h
.text:00403B60 aSFileFileExist db '  -S FILE     FILE exists and is a socket',0Ah
.text:00403B60                                         ; DATA XREF: sub_403D90+1B6↓o
.text:00403B60                 db '  -t FD       file descriptor FD is opened on a terminal',0Ah
.text:00403B60                 db '  -u FILE     FILE exists and its set-user-ID bit is set',0Ah
.text:00403B60                 db '  -w FILE     FILE exists and write permission is granted',0Ah
.text:00403B60                 db '  -x FILE     FILE exists and execute (or search) permission is g'
.text:00403B60                 db 'ranted',0Ah,0
.text:00403C7F                 align 10h
.text:00403C80 aExceptForHAndL db 0Ah                  ; DATA XREF: sub_403D90+1D8↓o
.text:00403C80                 db 'Except for -h and -L, all FILE-related tests dereference symbolic'
.text:00403C80                 db ' links.',0Ah
.text:00403C80                 db 'Beware that parentheses need to be escaped (e.g., by backslashes)'
.text:00403C80                 db ' for shells.',0Ah
.text:00403C80                 db 'INTEGER may also be -l STRING, which evaluates to the length of S'
.text:00403C80                 db 'TRING.',0Ah,0
.text:00403D61 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_403D90+1FA↓o
.text:00403D61                 db 'Report bugs to <%s>.',0Ah,0
.text:00403D78 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00403D78                                         ; DATA XREF: sub_403D90+207↓o
.text:00403D8E                 align 10h
.text:00403D90
.text:00403D90 ; =============== S U B R O U T I N E =======================================
.text:00403D90
.text:00403D90 ; Attributes: noreturn
.text:00403D90
.text:00403D90 ; void __cdecl __noreturn sub_403D90(int Code)
.text:00403D90 sub_403D90      proc near               ; DATA XREF: sub_403010+B8↑o
.text:00403D90
.text:00403D90 Stream          = dword ptr -1Ch
.text:00403D90 Format          = dword ptr -18h
.text:00403D90 var_14          = dword ptr -14h
.text:00403D90 Code            = dword ptr  4
.text:00403D90
.text:00403D90                 push    ebx
.text:00403D91                 sub     esp, 18h
.text:00403D94                 mov     ebx, [esp+1Ch+Code]
.text:00403D98                 test    ebx, ebx
.text:00403D9A                 jz      short loc_403DD0
.text:00403D9C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00403DA3                 call    ds:__imp_libintl_gettext
.text:00403DA9                 mov     edx, ds:_iob
.text:00403DAF                 mov     ecx, ds:dword_411510
.text:00403DB5                 add     edx, 40h ; '@'
.text:00403DB8                 mov     [esp+1Ch+var_14], ecx
.text:00403DBC                 mov     [esp+1Ch+Format], eax ; Format
.text:00403DC0                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00403DC3                 call    fprintf
.text:00403DC8
.text:00403DC8 loc_403DC8:                             ; CODE XREF: sub_403D90+217↓j
.text:00403DC8                 mov     [esp+1Ch+Stream], ebx ; Code
.text:00403DCB                 call    exit
.text:00403DD0 ; ---------------------------------------------------------------------------
.text:00403DD0
.text:00403DD0 loc_403DD0:                             ; CODE XREF: sub_403D90+A↑j
.text:00403DD0                 mov     [esp+1Ch+Stream], offset aUsageTestExpre ; "Usage: test EXPRESSION\n  or:  test\n  "...
.text:00403DD7                 call    ds:__imp_libintl_gettext
.text:00403DDD                 mov     ecx, ds:_iob
.text:00403DE3                 add     ecx, 20h ; ' '
.text:00403DE6                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403DEA                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403DED                 call    fputs
.text:00403DF2                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00403DF9                 call    ds:__imp_libintl_gettext
.text:00403DFF                 mov     ecx, ds:_iob
.text:00403E05                 add     ecx, 20h ; ' '
.text:00403E08                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403E0C                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403E0F                 call    fputs
.text:00403E14                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00403E1B                 call    ds:__imp_libintl_gettext
.text:00403E21                 mov     ecx, ds:_iob
.text:00403E27                 add     ecx, 20h ; ' '
.text:00403E2A                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403E2E                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403E31                 call    fputs
.text:00403E36                 mov     [esp+1Ch+Stream], offset aAnOmittedExpre ; "\nAn omitted EXPRESSION defaults to fal"...
.text:00403E3D                 call    ds:__imp_libintl_gettext
.text:00403E43                 mov     ecx, ds:_iob
.text:00403E49                 add     ecx, 20h ; ' '
.text:00403E4C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403E50                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403E53                 call    fputs
.text:00403E58                 mov     [esp+1Ch+Stream], offset aExpressionExpr ; "\n  ( EXPRESSION )               EXPRES"...
.text:00403E5F                 call    ds:__imp_libintl_gettext
.text:00403E65                 mov     ecx, ds:_iob
.text:00403E6B                 add     ecx, 20h ; ' '
.text:00403E6E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403E72                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403E75                 call    fputs
.text:00403E7A                 mov     [esp+1Ch+Stream], offset aNStringTheLeng ; "\n  -n STRING            the length of "...
.text:00403E81                 call    ds:__imp_libintl_gettext
.text:00403E87                 mov     ecx, ds:_iob
.text:00403E8D                 add     ecx, 20h ; ' '
.text:00403E90                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403E94                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403E97                 call    fputs
.text:00403E9C                 mov     [esp+1Ch+Stream], offset aInteger1EqInte ; "\n  INTEGER1 -eq INTEGER2   INTEGER1 is"...
.text:00403EA3                 call    ds:__imp_libintl_gettext
.text:00403EA9                 mov     ecx, ds:_iob
.text:00403EAF                 add     ecx, 20h ; ' '
.text:00403EB2                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403EB6                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403EB9                 call    fputs
.text:00403EBE                 mov     [esp+1Ch+Stream], offset aFile1EfFile2Fi ; "\n  FILE1 -ef FILE2   FILE1 and FILE2 h"...
.text:00403EC5                 call    ds:__imp_libintl_gettext
.text:00403ECB                 mov     ecx, ds:_iob
.text:00403ED1                 add     ecx, 20h ; ' '
.text:00403ED4                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403ED8                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403EDB                 call    fputs
.text:00403EE0                 mov     [esp+1Ch+Stream], offset aBFileFileExist ; "\n  -b FILE     FILE exists and is bloc"...
.text:00403EE7                 call    ds:__imp_libintl_gettext
.text:00403EED                 mov     ecx, ds:_iob
.text:00403EF3                 add     ecx, 20h ; ' '
.text:00403EF6                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403EFA                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403EFD                 call    fputs
.text:00403F02                 mov     [esp+1Ch+Stream], offset aFFileFileExist ; "  -f FILE     FILE exists and is a regu"...
.text:00403F09                 call    ds:__imp_libintl_gettext
.text:00403F0F                 mov     ecx, ds:_iob
.text:00403F15                 add     ecx, 20h ; ' '
.text:00403F18                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403F1C                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403F1F                 call    fputs
.text:00403F24                 mov     [esp+1Ch+Stream], offset aLFileFileExist ; "  -L FILE     FILE exists and is a symb"...
.text:00403F2B                 call    ds:__imp_libintl_gettext
.text:00403F31                 mov     ecx, ds:_iob
.text:00403F37                 add     ecx, 20h ; ' '
.text:00403F3A                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403F3E                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403F41                 call    fputs
.text:00403F46                 mov     [esp+1Ch+Stream], offset aSFileFileExist ; "  -S FILE     FILE exists and is a sock"...
.text:00403F4D                 call    ds:__imp_libintl_gettext
.text:00403F53                 mov     ecx, ds:_iob
.text:00403F59                 add     ecx, 20h ; ' '
.text:00403F5C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403F60                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403F63                 call    fputs
.text:00403F68                 mov     [esp+1Ch+Stream], offset aExceptForHAndL ; "\nExcept for -h and -L, all FILE-relate"...
.text:00403F6F                 call    ds:__imp_libintl_gettext
.text:00403F75                 mov     ecx, ds:_iob
.text:00403F7B                 add     ecx, 20h ; ' '
.text:00403F7E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403F82                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403F85                 call    fputs
.text:00403F8A                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00403F91                 call    ds:__imp_libintl_gettext
.text:00403F97                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00403F9F                 mov     [esp+1Ch+Stream], eax ; Format
.text:00403FA2                 call    printf
.text:00403FA7                 jmp     loc_403DC8
.text:00403FA7 sub_403D90      endp
.text:00403FA7
.text:00403FA7 ; ---------------------------------------------------------------------------
.text:00403FAC aExpectedFoundS db 27h,')',27h,' expected, found %s',0Ah,0
.text:00403FAC                                         ; DATA XREF: sub_403FE0:loc_404272↓o
.text:00403FC4 aExpected       db 27h,')',27h,' expected',0Ah,0
.text:00403FC4                                         ; DATA XREF: sub_403FE0:loc_40428A↓o
.text:00403FD2                 align 10h
.text:00403FE0
.text:00403FE0 ; =============== S U B R O U T I N E =======================================
.text:00403FE0
.text:00403FE0
.text:00403FE0 sub_403FE0      proc near               ; CODE XREF: sub_4027A0+2E1↑p
.text:00403FE0                                         ; sub_4027A0+565↑p ...
.text:00403FE0
.text:00403FE0 Stream          = dword ptr -5Ch
.text:00403FE0 Format          = dword ptr -58h
.text:00403FE0 var_54          = dword ptr -54h
.text:00403FE0 var_48          = dword ptr -48h
.text:00403FE0 var_44          = dword ptr -44h
.text:00403FE0 var_40          = dword ptr -40h
.text:00403FE0 var_34          = dword ptr -34h
.text:00403FE0 var_30          = dword ptr -30h
.text:00403FE0 var_2C          = byte ptr -2Ch
.text:00403FE0
.text:00403FE0                 push    ebp
.text:00403FE1                 push    edi
.text:00403FE2                 push    esi
.text:00403FE3                 push    ebx
.text:00403FE4                 sub     esp, 4Ch
.text:00403FE7                 mov     ecx, ds:dword_411010
.text:00403FED                 mov     [esp+5Ch+var_2C], 0
.text:00403FF2                 mov     eax, ds:dword_411000
.text:00403FF7                 mov     ebp, ecx
.text:00403FF9                 mov     [esp+5Ch+var_44], eax
.text:00403FFD                 cmp     eax, ecx
.text:00403FFF                 mov     [esp+5Ch+var_48], ecx
.text:00404003                 jge     loc_4042D0
.text:00404009                 mov     ebx, ds:dword_411020
.text:0040400F                 mov     ecx, eax
.text:00404011                 mov     eax, [ebx+eax*4]
.text:00404014                 cmp     byte ptr [eax], 21h ; '!'
.text:00404017                 jz      loc_404306
.text:0040401D
.text:0040401D loc_40401D:                             ; CODE XREF: sub_403FE0+32A↓j
.text:0040401D                                         ; sub_403FE0+35E↓j ...
.text:0040401D                 cmp     [esp+5Ch+var_44], ebp
.text:00404021                 jge     loc_4042D0
.text:00404027                 mov     ebx, ds:dword_411020
.text:0040402D                 mov     edi, [esp+5Ch+var_44]
.text:00404031                 mov     [esp+5Ch+var_40], ebx
.text:00404035                 mov     eax, [ebx+edi*4]
.text:00404038                 cmp     byte ptr [eax], 28h ; '('
.text:0040403B                 jz      loc_4041E0
.text:00404041
.text:00404041 loc_404041:                             ; CODE XREF: sub_403FE0+204↓j
.text:00404041                 mov     eax, [esp+5Ch+var_44]
.text:00404045                 sub     ebp, eax
.text:00404047                 cmp     ebp, 3
.text:0040404A                 jle     short loc_404074
.text:0040404C                 cld
.text:0040404D                 mov     esi, [esp+5Ch+var_44]
.text:00404051                 mov     ecx, offset byte_401280
.text:00404056                 mov     edi, [esp+5Ch+var_40]
.text:0040405A                 mov     ebp, 3
.text:0040405F                 mov     edx, [edi+esi*4]
.text:00404062                 mov     edi, ecx
.text:00404064                 mov     ecx, ebp
.text:00404066                 mov     esi, edx
.text:00404068                 mov     [esp+5Ch+var_34], edx
.text:0040406C                 repe cmpsb
.text:0040406E                 jz      loc_40419A
.text:00404074
.text:00404074 loc_404074:                             ; CODE XREF: sub_403FE0+6A↑j
.text:00404074                                         ; sub_403FE0+1EC↓j
.text:00404074                 mov     eax, [esp+5Ch+var_44]
.text:00404078                 sub     [esp+5Ch+var_48], eax
.text:0040407C                 cmp     [esp+5Ch+var_48], 2
.text:00404081                 jg      loc_404164
.text:00404087
.text:00404087 loc_404087:                             ; CODE XREF: sub_403FE0+1A4↓j
.text:00404087                 mov     ebp, [esp+5Ch+var_44]
.text:0040408B                 mov     eax, [ebx+ebp*4]
.text:0040408E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00404091                 jz      short loc_4040D0
.text:00404093
.text:00404093 loc_404093:                             ; CODE XREF: sub_403FE0+F4↓j
.text:00404093                                         ; sub_403FE0+FA↓j
.text:00404093                 mov     ecx, [esp+5Ch+var_44]
.text:00404097                 mov     edx, [ebx+ecx*4]
.text:0040409A                 mov     ebp, ecx
.text:0040409C                 cmp     byte ptr [edx], 0
.text:0040409F                 setnz   dl
.text:004040A2                 inc     ebp
.text:004040A3                 mov     ds:dword_411000, ebp
.text:004040A9
.text:004040A9 loc_4040A9:                             ; CODE XREF: sub_403FE0+10F↓j
.text:004040A9                                         ; sub_403FE0+2A5↓j
.text:004040A9                 test    dl, dl
.text:004040AB                 jz      short loc_4040C0
.text:004040AD                 xor     [esp+5Ch+var_2C], 1
.text:004040B2                 movzx   eax, [esp+5Ch+var_2C]
.text:004040B7
.text:004040B7 loc_4040B7:                             ; CODE XREF: sub_403FE0+EB↓j
.text:004040B7                 add     esp, 4Ch
.text:004040BA                 pop     ebx
.text:004040BB                 pop     esi
.text:004040BC                 pop     edi
.text:004040BD                 pop     ebp
.text:004040BE                 retn
.text:004040BE ; ---------------------------------------------------------------------------
.text:004040BF                 align 10h
.text:004040C0
.text:004040C0 loc_4040C0:                             ; CODE XREF: sub_403FE0+CB↑j
.text:004040C0                 movzx   ebx, [esp+5Ch+var_2C]
.text:004040C5                 and     ebx, 1
.text:004040C8                 movzx   eax, bl
.text:004040CB                 jmp     short loc_4040B7
.text:004040CB ; ---------------------------------------------------------------------------
.text:004040CD                 align 10h
.text:004040D0
.text:004040D0 loc_4040D0:                             ; CODE XREF: sub_403FE0+B1↑j
.text:004040D0                 cmp     byte ptr [eax+1], 0
.text:004040D4                 jz      short loc_404093
.text:004040D6                 cmp     byte ptr [eax+2], 0
.text:004040DA                 jnz     short loc_404093
.text:004040DC                 mov     [esp+5Ch+Stream], eax
.text:004040DF                 call    sub_402650
.text:004040E4                 test    al, al
.text:004040E6                 jz      short loc_4040F1
.text:004040E8                 call    sub_401DB0
.text:004040ED
.text:004040ED loc_4040ED:                             ; CODE XREF: sub_403FE0+1B5↓j
.text:004040ED                 mov     dl, al
.text:004040EF                 jmp     short loc_4040A9
.text:004040F1 ; ---------------------------------------------------------------------------
.text:004040F1
.text:004040F1 loc_4040F1:                             ; CODE XREF: sub_403FE0+106↑j
.text:004040F1                 mov     [esp+5Ch+Stream], offset aSUnaryOperator ; "%s: unary operator expected\n"
.text:004040F8
.text:004040F8 loc_4040F8:                             ; CODE XREF: sub_403FE0+299↓j
.text:004040F8                 call    ds:__imp_libintl_gettext
.text:004040FE                 mov     ecx, ds:dword_411020
.text:00404104                 mov     edx, ds:dword_411000
.text:0040410A                 mov     edi, eax
.text:0040410C                 mov     ebx, [ecx+edx*4]
.text:0040410F                 mov     eax, [ecx]
.text:00404111
.text:00404111 loc_404111:                             ; CODE XREF: sub_403FE0+321↓j
.text:00404111                 mov     [esp+5Ch+var_54], eax
.text:00404115                 mov     esi, ds:_iob
.text:0040411B                 mov     [esp+5Ch+Format], offset Format ; "%s: "
.text:00404123                 add     esi, 40h ; '@'
.text:00404126                 mov     [esp+5Ch+Stream], esi ; Stream
.text:00404129                 call    fprintf
.text:0040412E                 mov     [esp+5Ch+var_54], ebx
.text:00404132                 mov     [esp+5Ch+Format], edi ; Format
.text:00404136
.text:00404136 loc_404136:                             ; CODE XREF: sub_403FE0+2EA↓j
.text:00404136                 mov     ebx, ds:_iob
.text:0040413C                 add     ebx, 40h ; '@'
.text:0040413F                 mov     [esp+5Ch+Stream], ebx ; Stream
.text:00404142                 call    fprintf
.text:00404147                 mov     edi, ds:_iob
.text:0040414D                 add     edi, 40h ; '@'
.text:00404150                 mov     [esp+5Ch+Stream], edi ; Stream
.text:00404153                 call    fflush
.text:00404158                 mov     [esp+5Ch+Stream], 2 ; Code
.text:0040415F                 call    exit
.text:00404164 ; ---------------------------------------------------------------------------
.text:00404164
.text:00404164 loc_404164:                             ; CODE XREF: sub_403FE0+A1↑j
.text:00404164                 mov     esi, [ebx+eax*4+4]
.text:00404168                 mov     [esp+5Ch+Stream], esi
.text:0040416B                 call    sub_402550
.text:00404170                 test    al, al
.text:00404172                 jnz     short loc_404189
.text:00404174                 mov     ebx, ds:dword_411000
.text:0040417A                 mov     [esp+5Ch+var_44], ebx
.text:0040417E                 mov     ebx, ds:dword_411020
.text:00404184                 jmp     loc_404087
.text:00404189 ; ---------------------------------------------------------------------------
.text:00404189
.text:00404189 loc_404189:                             ; CODE XREF: sub_403FE0+192↑j
.text:00404189                 mov     [esp+5Ch+Stream], 0
.text:00404190
.text:00404190 loc_404190:                             ; CODE XREF: sub_403FE0+1F8↓j
.text:00404190                 call    sub_4013A0
.text:00404195                 jmp     loc_4040ED
.text:0040419A ; ---------------------------------------------------------------------------
.text:0040419A
.text:0040419A loc_40419A:                             ; CODE XREF: sub_403FE0+8E↑j
.text:0040419A                 mov     ebp, [esp+5Ch+var_44]
.text:0040419E                 mov     eax, [esp+5Ch+var_40]
.text:004041A2                 mov     ebx, [eax+ebp*4+8]
.text:004041A6                 mov     [esp+5Ch+Stream], ebx
.text:004041A9                 call    sub_402550
.text:004041AE                 test    al, al
.text:004041B0                 jnz     short loc_4041D1
.text:004041B2                 mov     edx, ds:dword_411000
.text:004041B8                 mov     ecx, ds:dword_411010
.text:004041BE                 mov     ebx, ds:dword_411020
.text:004041C4                 mov     [esp+5Ch+var_44], edx
.text:004041C8                 mov     [esp+5Ch+var_48], ecx
.text:004041CC                 jmp     loc_404074
.text:004041D1 ; ---------------------------------------------------------------------------
.text:004041D1
.text:004041D1 loc_4041D1:                             ; CODE XREF: sub_403FE0+1D0↑j
.text:004041D1                 mov     [esp+5Ch+Stream], 1
.text:004041D8                 jmp     short loc_404190
.text:004041D8 ; ---------------------------------------------------------------------------
.text:004041DA                 align 10h
.text:004041E0
.text:004041E0 loc_4041E0:                             ; CODE XREF: sub_403FE0+5B↑j
.text:004041E0                 cmp     byte ptr [eax+1], 0
.text:004041E4                 jnz     loc_404041
.text:004041EA                 inc     edi
.text:004041EB                 mov     ebx, 1
.text:004041F0                 cmp     edi, ebp
.text:004041F2                 mov     [esp+5Ch+var_44], edi
.text:004041F6                 mov     ds:dword_411000, edi
.text:004041FC                 jge     loc_4042D0
.text:00404202                 lea     esi, [esi+0]
.text:00404209                 lea     edi, [edi+0]
.text:00404210
.text:00404210 loc_404210:                             ; CODE XREF: sub_403FE0+260↓j
.text:00404210                 mov     eax, [esp+5Ch+var_44]
.text:00404214                 add     eax, ebx
.text:00404216                 cmp     eax, ebp
.text:00404218                 jge     short loc_40424A
.text:0040421A                 cld
.text:0040421B                 mov     ecx, [esp+5Ch+var_40]
.text:0040421F                 mov     edx, 2
.text:00404224                 mov     edi, [ecx+eax*4]
.text:00404227                 mov     ecx, edx
.text:00404229                 mov     [esp+5Ch+var_30], edi
.text:0040422D                 mov     esi, [esp+5Ch+var_30]
.text:00404231                 mov     edi, offset asc_402774 ; ")"
.text:00404236                 repe cmpsb
.text:00404238                 jz      short loc_40424A
.text:0040423A                 cmp     ebx, 4
.text:0040423D                 jz      short loc_404242
.text:0040423F                 inc     ebx
.text:00404240                 jmp     short loc_404210
.text:00404242 ; ---------------------------------------------------------------------------
.text:00404242
.text:00404242 loc_404242:                             ; CODE XREF: sub_403FE0+25D↑j
.text:00404242                 mov     ebx, ebp
.text:00404244                 mov     ebp, [esp+5Ch+var_44]
.text:00404248                 sub     ebx, ebp
.text:0040424A
.text:0040424A loc_40424A:                             ; CODE XREF: sub_403FE0+238↑j
.text:0040424A                                         ; sub_403FE0+258↑j
.text:0040424A                 mov     [esp+5Ch+Stream], ebx
.text:0040424D                 call    sub_4027A0
.text:00404252                 mov     ecx, ds:dword_411000
.text:00404258                 mov     dl, al
.text:0040425A                 mov     ebx, ds:dword_411020
.text:00404260                 mov     eax, [ebx+ecx*4]
.text:00404263                 test    eax, eax
.text:00404265                 jz      short loc_40428A
.text:00404267                 cmp     byte ptr [eax], 29h ; ')'
.text:0040426A                 jnz     short loc_404272
.text:0040426C                 cmp     byte ptr [eax+1], 0
.text:00404270                 jz      short loc_40427E
.text:00404272
.text:00404272 loc_404272:                             ; CODE XREF: sub_403FE0+28A↑j
.text:00404272                 mov     [esp+5Ch+Stream], offset aExpectedFoundS ; "')' expected, found %s\n"
.text:00404279                 jmp     loc_4040F8
.text:0040427E ; ---------------------------------------------------------------------------
.text:0040427E
.text:0040427E loc_40427E:                             ; CODE XREF: sub_403FE0+290↑j
.text:0040427E                 inc     ecx
.text:0040427F                 mov     ds:dword_411000, ecx
.text:00404285                 jmp     loc_4040A9
.text:0040428A ; ---------------------------------------------------------------------------
.text:0040428A
.text:0040428A loc_40428A:                             ; CODE XREF: sub_403FE0+285↑j
.text:0040428A                 mov     [esp+5Ch+Stream], offset aExpected ; "')' expected\n"
.text:00404291                 call    ds:__imp_libintl_gettext
.text:00404297                 mov     edi, ds:dword_411020
.text:0040429D                 mov     ebp, ds:_iob
.text:004042A3                 mov     edx, [edi]
.text:004042A5                 mov     [esp+5Ch+Format], offset Format ; "%s: "
.text:004042AD                 add     ebp, 40h ; '@'
.text:004042B0                 mov     esi, eax
.text:004042B2                 mov     [esp+5Ch+Stream], ebp ; Stream
.text:004042B5                 mov     [esp+5Ch+var_54], edx
.text:004042B9                 call    fprintf
.text:004042BE                 mov     [esp+5Ch+var_54], 0
.text:004042C6                 mov     [esp+5Ch+Format], esi
.text:004042CA                 jmp     loc_404136
.text:004042CA ; ---------------------------------------------------------------------------
.text:004042CF                 align 10h
.text:004042D0
.text:004042D0 loc_4042D0:                             ; CODE XREF: sub_403FE0+23↑j
.text:004042D0                                         ; sub_403FE0+41↑j ...
.text:004042D0                 mov     [esp+5Ch+Stream], offset aMissingArgumen ; "missing argument after %s"
.text:004042D7                 call    ds:__imp_libintl_gettext
.text:004042DD                 mov     ebx, ds:dword_411020
.text:004042E3                 mov     esi, ds:dword_411010
.text:004042E9                 mov     edi, eax
.text:004042EB                 mov     ecx, [ebx+esi*4-4]
.text:004042EF                 mov     [esp+5Ch+Stream], ecx ; char *
.text:004042F2                 call    sub_404700
.text:004042F7                 mov     edx, ds:dword_411020
.text:004042FD                 mov     ebx, eax
.text:004042FF                 mov     eax, [edx]
.text:00404301                 jmp     loc_404111
.text:00404306 ; ---------------------------------------------------------------------------
.text:00404306
.text:00404306 loc_404306:                             ; CODE XREF: sub_403FE0+37↑j
.text:00404306                 cmp     byte ptr [eax+1], 0
.text:0040430A                 jnz     loc_40401D
.text:00404310                 mov     edx, ecx
.text:00404312                 inc     edx
.text:00404313                 lea     esi, [esi+0]
.text:00404319                 lea     edi, [edi+0]
.text:00404320
.text:00404320 loc_404320:                             ; CODE XREF: sub_403FE0+368↓j
.text:00404320                 mov     [esp+5Ch+var_44], edx
.text:00404324                 mov     eax, [esp+5Ch+var_44]
.text:00404328                 inc     edx
.text:00404329                 mov     ds:dword_411000, eax
.text:0040432E                 cmp     eax, ebp
.text:00404330                 jge     short loc_4042D0
.text:00404332                 xor     [esp+5Ch+var_2C], 1
.text:00404337                 mov     eax, [ebx+edx*4-4]
.text:0040433B                 cmp     byte ptr [eax], 21h ; '!'
.text:0040433E                 jnz     loc_40401D
.text:00404344                 cmp     byte ptr [eax+1], 0
.text:00404348                 jz      short loc_404320
.text:0040434A                 jmp     loc_40401D
.text:0040434A sub_403FE0      endp
.text:0040434A
.text:0040434A ; ---------------------------------------------------------------------------
.text:0040434F                 align 10h
.text:00404350
.text:00404350 ; =============== S U B R O U T I N E =======================================
.text:00404350
.text:00404350
.text:00404350 sub_404350      proc near               ; CODE XREF: sub_4013A0+255↑p
.text:00404350                                         ; sub_4013A0+2BD↑p ...
.text:00404350
.text:00404350 var_24          = dword ptr -24h
.text:00404350 var_20          = dword ptr -20h
.text:00404350 var_1C          = dword ptr -1Ch
.text:00404350 var_18          = dword ptr -18h
.text:00404350 arg_0           = dword ptr  4
.text:00404350 arg_4           = dword ptr  8
.text:00404350
.text:00404350                 push    ebp
.text:00404351                 push    edi
.text:00404352                 push    esi
.text:00404353                 push    ebx
.text:00404354                 sub     esp, 14h
.text:00404357                 mov     ebx, 1
.text:0040435C                 mov     [esp+24h+var_1C], 0
.text:00404364                 mov     ebp, [esp+24h+arg_4]
.text:00404368                 mov     edi, [esp+24h+arg_0]
.text:0040436C                 mov     [esp+24h+var_18], 0
.text:00404374                 test    ebp, ebp
.text:00404376                 jz      short loc_404386
.text:00404378                 mov     dword ptr [ebp+0], 0
.text:0040437F                 mov     dword ptr [ebp+4], 0
.text:00404386
.text:00404386 loc_404386:                             ; CODE XREF: sub_404350+26↑j
.text:00404386                                         ; sub_404350+137↓j
.text:00404386                 movzx   ecx, byte ptr [edi]
.text:00404389                 cmp     cl, 20h ; ' '
.text:0040438C                 jz      loc_404486
.text:00404392                 cmp     cl, 9
.text:00404395                 jz      loc_404486
.text:0040439B                 xor     edx, edx
.text:0040439D                 test    cl, cl
.text:0040439F                 jz      loc_404460
.text:004043A5                 cmp     cl, 2Dh ; '-'
.text:004043A8                 jz      loc_40446A
.text:004043AE                 cmp     cl, 2Bh ; '+'
.text:004043B1                 jz      loc_40446A
.text:004043B7
.text:004043B7 loc_4043B7:                             ; CODE XREF: sub_404350+B5↓j
.text:004043B7                 mov     dl, cl
.text:004043B9                 sub     dl, 30h ; '0'
.text:004043BC                 cmp     dl, 9
.text:004043BF                 ja      short loc_404407
.text:004043C1                 test    ebp, ebp
.text:004043C3                 jz      short loc_404401
.text:004043C5                 mov     edx, [esp+24h+var_1C]
.text:004043C9                 movsx   eax, cl
.text:004043CC                 mov     esi, [esp+24h+var_18]
.text:004043D0                 shld    esi, edx, 2
.text:004043D4                 shl     edx, 2
.text:004043D7                 add     [esp+24h+var_1C], edx
.text:004043DB                 mov     edx, [esp+24h+var_1C]
.text:004043DF                 adc     [esp+24h+var_18], esi
.text:004043E3                 sub     eax, 30h ; '0'
.text:004043E6                 mov     esi, [esp+24h+var_18]
.text:004043EA                 shld    esi, edx, 1
.text:004043EE                 add     edx, edx
.text:004043F0                 mov     [esp+24h+var_1C], edx
.text:004043F4                 cdq
.text:004043F5                 add     [esp+24h+var_1C], eax
.text:004043F9                 mov     [esp+24h+var_18], esi
.text:004043FD                 adc     [esp+24h+var_18], edx
.text:00404401
.text:00404401 loc_404401:                             ; CODE XREF: sub_404350+73↑j
.text:00404401                                         ; sub_404350+131↓j
.text:00404401                 inc     edi
.text:00404402                 movzx   ecx, byte ptr [edi]
.text:00404405                 jmp     short loc_4043B7
.text:00404407 ; ---------------------------------------------------------------------------
.text:00404407
.text:00404407 loc_404407:                             ; CODE XREF: sub_404350+6F↑j
.text:00404407                                         ; sub_404350+C5↓j
.text:00404407                 cmp     cl, 20h ; ' '
.text:0040440A                 jz      short loc_404411
.text:0040440C                 cmp     cl, 9
.text:0040440F                 jnz     short loc_404417
.text:00404411
.text:00404411 loc_404411:                             ; CODE XREF: sub_404350+BA↑j
.text:00404411                 inc     edi
.text:00404412                 movzx   ecx, byte ptr [edi]
.text:00404415                 jmp     short loc_404407
.text:00404417 ; ---------------------------------------------------------------------------
.text:00404417
.text:00404417 loc_404417:                             ; CODE XREF: sub_404350+BF↑j
.text:00404417                 xor     edx, edx
.text:00404419                 test    cl, cl
.text:0040441B                 jnz     short loc_404460
.text:0040441D                 test    ebp, ebp
.text:0040441F                 jz      short loc_404454
.text:00404421                 mov     eax, [esp+24h+var_1C]
.text:00404425                 mov     ecx, ebx
.text:00404427                 mov     edi, [esp+24h+var_18]
.text:0040442B                 sar     ecx, 1Fh
.text:0040442E                 mul     ebx
.text:00404430                 imul    ebx, edi
.text:00404433                 mov     esi, edx
.text:00404435                 mov     [esp+24h+var_24], eax
.text:00404438                 mov     eax, [esp+24h+var_1C]
.text:0040443C                 imul    eax, ecx
.text:0040443F                 add     esi, eax
.text:00404441                 add     esi, ebx
.text:00404443                 mov     ebx, [esp+24h+var_24]
.text:00404446                 mov     [esp+24h+var_20], esi
.text:0040444A                 mov     ecx, [esp+24h+var_20]
.text:0040444E                 mov     [ebp+0], ebx
.text:00404451                 mov     [ebp+4], ecx
.text:00404454
.text:00404454 loc_404454:                             ; CODE XREF: sub_404350+CF↑j
.text:00404454                 mov     edx, 1
.text:00404459                 lea     esi, [esi+0]
.text:00404460
.text:00404460 loc_404460:                             ; CODE XREF: sub_404350+4F↑j
.text:00404460                                         ; sub_404350+CB↑j ...
.text:00404460                 add     esp, 14h
.text:00404463                 mov     eax, edx
.text:00404465                 pop     ebx
.text:00404466                 pop     esi
.text:00404467                 pop     edi
.text:00404468                 pop     ebp
.text:00404469                 retn
.text:0040446A ; ---------------------------------------------------------------------------
.text:0040446A
.text:0040446A loc_40446A:                             ; CODE XREF: sub_404350+58↑j
.text:0040446A                                         ; sub_404350+61↑j
.text:0040446A                 movzx   eax, byte ptr [edi+1]
.text:0040446E                 xor     edx, edx
.text:00404470                 sub     al, 30h ; '0'
.text:00404472                 cmp     al, 9
.text:00404474                 ja      short loc_404460
.text:00404476                 xor     edx, edx
.text:00404478                 cmp     cl, 2Dh ; '-'
.text:0040447B                 setnz   dl
.text:0040447E                 dec     edx
.text:0040447F                 or      ebx, edx
.text:00404481                 jmp     loc_404401
.text:00404486 ; ---------------------------------------------------------------------------
.text:00404486
.text:00404486 loc_404486:                             ; CODE XREF: sub_404350+3C↑j
.text:00404486                                         ; sub_404350+45↑j
.text:00404486                 inc     edi
.text:00404487                 jmp     loc_404386
.text:00404487 sub_404350      endp
.text:00404487
.text:00404487 ; ---------------------------------------------------------------------------
.text:0040448C                 align 20h
.text:004044A0 aHelp           db 'help',0             ; DATA XREF: .text:off_4044C0↓o
.text:004044A5 aVersion        db 'version',0          ; DATA XREF: .text:004044D0↓o
.text:004044AD                 align 20h
.text:004044C0 off_4044C0      dd offset aHelp         ; DATA XREF: sub_404500+3D↓o
.text:004044C0                                         ; "help"
.text:004044C4                 dd 2 dup(0)
.text:004044CC                 dd 68h
.text:004044D0                 dd offset aVersion      ; "version"
.text:004044D4                 dd 2 dup(0)
.text:004044DC                 dd 76h, 4 dup(0)
.text:004044F0 ; ---------------------------------------------------------------------------
.text:004044F0
.text:004044F0 loc_4044F0:                             ; DATA XREF: sub_404500+45↓o
.text:004044F0                 sub     eax, [eax]
.text:004044F2                 lea     esi, [esi+0]
.text:004044F9                 lea     edi, [edi+0]
.text:00404500
.text:00404500 ; =============== S U B R O U T I N E =======================================
.text:00404500
.text:00404500
.text:00404500 ; int __cdecl sub_404500(int, int, FILE *, int, int, int, char)
.text:00404500 sub_404500      proc near               ; CODE XREF: sub_403010+D8↑p
.text:00404500
.text:00404500 Code            = dword ptr -1Ch
.text:00404500 var_18          = dword ptr -18h
.text:00404500 var_14          = dword ptr -14h
.text:00404500 var_10          = dword ptr -10h
.text:00404500 var_C           = dword ptr -0Ch
.text:00404500 var_4           = dword ptr -4
.text:00404500 arg_0           = dword ptr  4
.text:00404500 arg_4           = dword ptr  8
.text:00404500 arg_8           = dword ptr  0Ch
.text:00404500 arg_C           = dword ptr  10h
.text:00404500 arg_10          = dword ptr  14h
.text:00404500 arg_14          = dword ptr  18h
.text:00404500 arg_18          = byte ptr  1Ch
.text:00404500
.text:00404500                 sub     esp, 1Ch
.text:00404503                 xor     eax, eax
.text:00404505                 cmp     [esp+1Ch+arg_0], 2
.text:0040450A                 mov     [esp+1Ch+var_4], ebx
.text:0040450E                 mov     ebx, dword_410024
.text:00404514                 mov     dword_410024, eax
.text:00404519                 jz      short loc_404531
.text:0040451B
.text:0040451B loc_40451B:                             ; CODE XREF: sub_404500+60↓j
.text:0040451B                                         ; sub_404500+6A↓j
.text:0040451B                 mov     dword_410024, ebx
.text:00404521                 xor     edx, edx
.text:00404523                 mov     ebx, [esp+1Ch+var_4]
.text:00404527                 mov     dword_410020, edx
.text:0040452D                 add     esp, 1Ch
.text:00404530                 retn
.text:00404531 ; ---------------------------------------------------------------------------
.text:00404531
.text:00404531 loc_404531:                             ; CODE XREF: sub_404500+19↑j
.text:00404531                 mov     [esp+1Ch+var_C], 0 ; int
.text:00404539                 mov     edx, [esp+1Ch+arg_4]
.text:0040453D                 mov     [esp+1Ch+var_10], offset off_4044C0 ; int
.text:00404545                 mov     [esp+1Ch+var_14], offset loc_4044F0 ; char *
.text:0040454D                 mov     [esp+1Ch+var_18], edx ; int
.text:00404551                 mov     [esp+1Ch+Code], 2 ; int
.text:00404558                 call    sub_405C50
.text:0040455D                 cmp     eax, 0FFFFFFFFh
.text:00404560                 jz      short loc_40451B
.text:00404562                 cmp     eax, 68h ; 'h'
.text:00404565                 jz      short loc_40456E
.text:00404567                 cmp     eax, 76h ; 'v'
.text:0040456A                 jnz     short loc_40451B
.text:0040456C                 jmp     short loc_404579
.text:0040456E ; ---------------------------------------------------------------------------
.text:0040456E
.text:0040456E loc_40456E:                             ; CODE XREF: sub_404500+65↑j
.text:0040456E                 mov     [esp+1Ch+Code], 0
.text:00404575                 call    [esp+1Ch+arg_14]
.text:00404579
.text:00404579 loc_404579:                             ; CODE XREF: sub_404500+6C↑j
.text:00404579                 mov     ecx, [esp+1Ch+arg_10]
.text:0040457D                 lea     ebx, [esp+1Ch+arg_18]
.text:00404581                 mov     edx, [esp+1Ch+arg_C]
.text:00404585                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00404589                 mov     ebx, [esp+1Ch+arg_8]
.text:0040458D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00404591                 mov     ecx, ds:_iob
.text:00404597                 mov     [esp+1Ch+var_14], edx ; int
.text:0040459B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:0040459F                 add     ecx, 20h ; ' '
.text:004045A2                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:004045A5                 call    sub_405A40
.text:004045AA                 mov     [esp+1Ch+Code], 0 ; Code
.text:004045B1                 call    exit
.text:004045B1 sub_404500      endp
.text:004045B1
.text:004045B1 ; ---------------------------------------------------------------------------
.text:004045B6                 align 10h
.text:004045C0                 mov     edx, [esp+4]
.text:004045C4                 mov     ds:dword_411030, edx
.text:004045CA                 retn
.text:004045CA ; ---------------------------------------------------------------------------
.text:004045CB aWriteError     db 'write error',0      ; DATA XREF: sub_4045F0:loc_404639↓o
.text:004045D7 ; const char aSS_0[]
.text:004045D7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_4045F0+77↓o
.text:004045DE ; const char aS_3[]
.text:004045DE aS_3            db '%s',0               ; DATA XREF: sub_4045F0+A0↓o
.text:004045E1 ; ---------------------------------------------------------------------------
.text:004045E1                 jmp     short sub_4045F0
.text:004045E1 ; ---------------------------------------------------------------------------
.text:004045E3                 align 10h
.text:004045F0
.text:004045F0 ; =============== S U B R O U T I N E =======================================
.text:004045F0
.text:004045F0
.text:004045F0 ; void __cdecl sub_4045F0()
.text:004045F0 sub_4045F0      proc near               ; CODE XREF: .text:004045E1↑j
.text:004045F0                                         ; DATA XREF: sub_403010+5C↑o
.text:004045F0
.text:004045F0 Stream          = dword ptr -2Ch
.text:004045F0 ErrorMessage    = dword ptr -28h
.text:004045F0 var_24          = dword ptr -24h
.text:004045F0 var_20          = byte ptr -20h
.text:004045F0 var_1C          = dword ptr -1Ch
.text:004045F0 var_9           = byte ptr -9
.text:004045F0
.text:004045F0                 push    esi
.text:004045F1                 push    ebx
.text:004045F2                 sub     esp, 24h
.text:004045F5                 mov     edx, ds:_iob
.text:004045FB                 mov     ecx, [edx+2Ch]
.text:004045FE                 lea     esi, [edx+20h]
.text:00404601                 shr     ecx, 5
.text:00404604                 mov     bl, cl
.text:00404606                 mov     ecx, [edx+20h]
.text:00404609                 and     bl, 1
.text:0040460C                 cmp     ecx, [esi+8]
.text:0040460F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404612                 setz    [esp+2Ch+var_9]
.text:00404617                 call    fclose
.text:0040461C                 test    eax, eax
.text:0040461E                 setnz   al
.text:00404621                 test    bl, bl
.text:00404623                 jnz     loc_4046B3
.text:00404629                 test    al, al
.text:0040462B                 jz      short loc_404680
.text:0040462D
.text:0040462D loc_40462D:                             ; CODE XREF: sub_4045F0+CD↓j
.text:0040462D                 call    _errno
.text:00404632                 mov     esi, [eax]
.text:00404634
.text:00404634 loc_404634:                             ; CODE XREF: sub_4045F0+C7↓j
.text:00404634                 cmp     esi, 9
.text:00404637                 jz      short loc_4046A6
.text:00404639
.text:00404639 loc_404639:                             ; CODE XREF: sub_4045F0+B8↓j
.text:00404639                                         ; sub_4045F0+C1↓j
.text:00404639                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00404640                 call    ds:__imp_libintl_gettext
.text:00404646                 mov     ebx, eax
.text:00404648                 mov     eax, ds:dword_411030
.text:0040464D                 test    eax, eax
.text:0040464F                 jz      short loc_404686
.text:00404651                 mov     [esp+2Ch+Stream], eax ; char *
.text:00404654                 call    sub_406EC0
.text:00404659                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040465D                 mov     edx, Code
.text:00404663                 mov     [esp+2Ch+var_1C], ebx
.text:00404667                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040466F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404673                 mov     [esp+2Ch+Stream], edx ; Code
.text:00404676                 call    sub_4074B0
.text:0040467B                 nop
.text:0040467C                 lea     esi, [esi+0]
.text:00404680
.text:00404680 loc_404680:                             ; CODE XREF: sub_4045F0+3B↑j
.text:00404680                                         ; sub_4045F0+B4↓j ...
.text:00404680                 add     esp, 24h
.text:00404683                 pop     ebx
.text:00404684                 pop     esi
.text:00404685                 retn
.text:00404686 ; ---------------------------------------------------------------------------
.text:00404686
.text:00404686 loc_404686:                             ; CODE XREF: sub_4045F0+5F↑j
.text:00404686                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040468A                 mov     ebx, Code
.text:00404690                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00404698                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040469C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040469F                 call    sub_4074B0
.text:004046A4                 jmp     short loc_404680
.text:004046A6 ; ---------------------------------------------------------------------------
.text:004046A6
.text:004046A6 loc_4046A6:                             ; CODE XREF: sub_4045F0+47↑j
.text:004046A6                 test    bl, bl
.text:004046A8                 jnz     short loc_404639
.text:004046AA                 cmp     [esp+2Ch+var_9], 0
.text:004046AF                 jnz     short loc_404680
.text:004046B1                 jmp     short loc_404639
.text:004046B3 ; ---------------------------------------------------------------------------
.text:004046B3
.text:004046B3 loc_4046B3:                             ; CODE XREF: sub_4045F0+33↑j
.text:004046B3                 xor     esi, esi
.text:004046B5                 test    al, al
.text:004046B7                 jz      loc_404634
.text:004046BD                 jmp     loc_40462D
.text:004046BD sub_4045F0      endp
.text:004046BD
.text:004046BD ; ---------------------------------------------------------------------------
.text:004046C2                 align 10h
.text:004046D0                 sub     esp, 0Ch
.text:004046D3                 mov     edx, [esp+14h]
.text:004046D7                 mov     dword ptr [esp+4], 5
.text:004046DF                 mov     [esp+8], edx
.text:004046E3                 mov     edx, [esp+10h]
.text:004046E7                 mov     [esp], edx
.text:004046EA                 call    sub_406B50
.text:004046EF                 add     esp, 0Ch
.text:004046F2                 retn
.text:004046F2 ; ---------------------------------------------------------------------------
.text:004046F3                 align 10h
.text:00404700
.text:00404700 ; =============== S U B R O U T I N E =======================================
.text:00404700
.text:00404700
.text:00404700 ; int __cdecl sub_404700(char *)
.text:00404700 sub_404700      proc near               ; CODE XREF: sub_401DB0+195↑p
.text:00404700                                         ; sub_4027A0+D4↑p ...
.text:00404700
.text:00404700 var_C           = dword ptr -0Ch
.text:00404700 var_8           = dword ptr -8
.text:00404700 var_4           = dword ptr -4
.text:00404700 arg_0           = dword ptr  4
.text:00404700
.text:00404700                 sub     esp, 0Ch
.text:00404703                 mov     edx, [esp+0Ch+arg_0]
.text:00404707                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040470F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00404716                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040471A                 call    sub_406B50
.text:0040471F                 add     esp, 0Ch
.text:00404722                 retn
.text:00404722 sub_404700      endp
.text:00404722
.text:00404722 ; ---------------------------------------------------------------------------
.text:00404723                 align 10h
.text:00404730 dword_404730    dd 90002D2Dh, 7 dup(90909090h)
.text:00404730                                         ; DATA XREF: sub_404980+E4↓o
.text:00404750 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00404750                                         ; DATA XREF: sub_404980+2FC↓o
.text:0040477D                 db 13h dup(90h)
.text:00404790 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00404790                                         ; DATA XREF: sub_404980:loc_404CE2↓o
.text:004047BD                 db 13h dup(90h)
.text:004047D0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004047D0                                         ; DATA XREF: sub_404980:loc_404D80↓o
.text:004047D0                                         ; sub_404980:loc_405147↓o
.text:004047F6                 db 1Ah dup(90h)
.text:00404810 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00404810                                         ; DATA XREF: sub_404980+48E↓o
.text:00404830 dword_404830    dd 90909000h, 7 dup(90909090h)
.text:00404830                                         ; DATA XREF: sub_404980:loc_404E51↓o
.text:00404850 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00404850                                         ; DATA XREF: sub_404980:loc_404E6A↓o
.text:00404870 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00404870                                         ; DATA XREF: sub_404980:loc_404F4F↓o
.text:00404870                                         ; sub_404980:loc_40527C↓o
.text:00404897                 db 19h dup(90h)
.text:004048B0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004048B0                                         ; DATA XREF: sub_404980:loc_4050C3↓o
.text:004048DE                 db 12h dup(90h)
.text:004048F0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004048F0                                         ; DATA XREF: sub_404980:loc_4051AF↓o
.text:00404911 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00404911                                         ; DATA XREF: sub_404980+93F↓o
.text:0040492B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040492B                                         ; DATA XREF: sub_404980:loc_4052F7↓o
.text:00404945 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00404945                                         ; DATA XREF: sub_404980:loc_40531E↓o
.text:00404963 ; const char VarName[]
.text:00404963 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_404980:loc_4054D0↓o
.text:00404973                 align 10h
.text:00404980
.text:00404980 ; =============== S U B R O U T I N E =======================================
.text:00404980
.text:00404980
.text:00404980 ; int __cdecl sub_404980(int, int, char *Str, int, int, int, int, int)
.text:00404980 sub_404980      proc near               ; CODE XREF: sub_405510+5A↓p
.text:00404980                                         ; .text:004055FA↓p ...
.text:00404980
.text:00404980 Str1            = dword ptr -5Ch
.text:00404980 Str2            = dword ptr -58h
.text:00404980 MaxCount        = dword ptr -54h
.text:00404980 var_50          = dword ptr -50h
.text:00404980 var_4C          = dword ptr -4Ch
.text:00404980 var_3C          = dword ptr -3Ch
.text:00404980 var_38          = dword ptr -38h
.text:00404980 var_34          = dword ptr -34h
.text:00404980 var_30          = dword ptr -30h
.text:00404980 var_2C          = dword ptr -2Ch
.text:00404980 var_28          = dword ptr -28h
.text:00404980 var_24          = dword ptr -24h
.text:00404980 var_20          = dword ptr -20h
.text:00404980 var_1C          = dword ptr -1Ch
.text:00404980 var_18          = dword ptr -18h
.text:00404980 var_14          = dword ptr -14h
.text:00404980 arg_0           = dword ptr  4
.text:00404980 arg_4           = dword ptr  8
.text:00404980 Str             = dword ptr  0Ch
.text:00404980 arg_C           = dword ptr  10h
.text:00404980 arg_10          = dword ptr  14h
.text:00404980 arg_14          = dword ptr  18h
.text:00404980 arg_18          = dword ptr  1Ch
.text:00404980 arg_1C          = dword ptr  20h
.text:00404980
.text:00404980                 push    ebp
.text:00404981                 mov     eax, 0FFFFFFFFh
.text:00404986                 push    edi
.text:00404987                 push    esi
.text:00404988                 push    ebx
.text:00404989                 sub     esp, 4Ch
.text:0040498C                 mov     esi, [esp+5Ch+Str]
.text:00404990                 mov     ebp, [esp+5Ch+arg_1C]
.text:00404994                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00404997                 mov     ebx, [ebp+4]
.text:0040499A                 setz    dl
.text:0040499D                 movzx   ecx, dl
.text:004049A0                 dec     ecx
.text:004049A1                 and     ecx, ebx
.text:004049A3                 mov     [esp+5Ch+var_14], ecx
.text:004049A7                 mov     ecx, [esp+5Ch+arg_0]
.text:004049AB                 test    ecx, ecx
.text:004049AD                 jle     loc_404AD7
.text:004049B3                 mov     dword ptr [ebp+0Ch], 0
.text:004049BA                 mov     ebx, [ebp+0]
.text:004049BD                 test    ebx, ebx
.text:004049BF                 jz      loc_4054F0
.text:004049C5                 mov     edi, [ebp+10h]
.text:004049C8                 test    edi, edi
.text:004049CA                 jnz     short loc_404A23
.text:004049CC                 lea     esi, [esi+0]
.text:004049D0
.text:004049D0 loc_4049D0:                             ; CODE XREF: sub_404980+B7C↓j
.text:004049D0                 mov     [ebp+24h], ebx
.text:004049D3                 mov     esi, [esp+5Ch+Str]
.text:004049D7                 mov     [ebp+20h], ebx
.text:004049DA                 mov     ecx, [esp+5Ch+arg_18]
.text:004049DE                 xor     ebx, ebx
.text:004049E0                 mov     dword ptr [ebp+14h], 0
.text:004049E7                 test    ecx, ecx
.text:004049E9                 jz      loc_4054D0
.text:004049EF
.text:004049EF loc_4049EF:                             ; CODE XREF: sub_404980+B64↓j
.text:004049EF                 mov     ebx, 1
.text:004049F4
.text:004049F4 loc_4049F4:                             ; CODE XREF: sub_404980+B5E↓j
.text:004049F4                 mov     [ebp+1Ch], ebx
.text:004049F7                 mov     ecx, [esp+5Ch+Str]
.text:004049FB                 movzx   eax, byte ptr [ecx]
.text:004049FE                 cmp     al, 2Dh ; '-'
.text:00404A00                 jz      loc_4054C0
.text:00404A06                 cmp     al, 2Bh ; '+'
.text:00404A08                 jz      loc_4054A9
.text:00404A0E                 xor     edx, edx
.text:00404A10                 test    ebx, ebx
.text:00404A12                 setz    dl
.text:00404A15                 mov     [ebp+18h], edx
.text:00404A18
.text:00404A18 loc_404A18:                             ; CODE XREF: sub_404980+B35↓j
.text:00404A18                 mov     [esp+5Ch+Str], esi
.text:00404A1C                 mov     dword ptr [ebp+10h], 1
.text:00404A23
.text:00404A23 loc_404A23:                             ; CODE XREF: sub_404980+4A↑j
.text:00404A23                 mov     eax, [ebp+14h]
.text:00404A26                 test    eax, eax
.text:00404A28                 jz      short loc_404A33
.text:00404A2A                 cmp     byte ptr [eax], 0
.text:00404A2D                 jnz     loc_404B10
.text:00404A33
.text:00404A33 loc_404A33:                             ; CODE XREF: sub_404980+A8↑j
.text:00404A33                 mov     ebx, [ebp+0]
.text:00404A36                 cmp     [ebp+24h], ebx
.text:00404A39                 jle     short loc_404A3E
.text:00404A3B                 mov     [ebp+24h], ebx
.text:00404A3E
.text:00404A3E loc_404A3E:                             ; CODE XREF: sub_404980+B9↑j
.text:00404A3E                 cmp     [ebp+20h], ebx
.text:00404A41                 jle     short loc_404A46
.text:00404A43                 mov     [ebp+20h], ebx
.text:00404A46
.text:00404A46 loc_404A46:                             ; CODE XREF: sub_404980+C1↑j
.text:00404A46                 cmp     dword ptr [ebp+18h], 1
.text:00404A4A                 jz      loc_405420
.text:00404A50
.text:00404A50 loc_404A50:                             ; CODE XREF: sub_404980+B13↓j
.text:00404A50                 cmp     ebx, [esp+5Ch+arg_0]
.text:00404A54                 jz      loc_405404
.text:00404A5A                 cld
.text:00404A5B                 mov     ecx, [esp+5Ch+arg_4]
.text:00404A5F                 mov     edx, 3
.text:00404A64                 mov     edi, offset dword_404730
.text:00404A69                 mov     esi, [ecx+ebx*4]
.text:00404A6C                 mov     ecx, edx
.text:00404A6E                 repe cmpsb
.text:00404A70                 jnz     short loc_404AAC
.text:00404A72                 mov     edx, [ebp+24h]
.text:00404A75                 lea     eax, [ebx+1]
.text:00404A78                 cmp     [ebp+20h], edx
.text:00404A7B                 mov     [ebp+0], eax
.text:00404A7E                 jz      loc_405418
.text:00404A84                 cmp     edx, eax
.text:00404A86                 jz      short loc_404AA0
.text:00404A88                 mov     [esp+5Ch+Str2], ebp
.text:00404A8C                 mov     ebx, [esp+5Ch+arg_4]
.text:00404A90                 mov     [esp+5Ch+Str1], ebx
.text:00404A93                 call    sub_405630
.text:00404A98                 nop
.text:00404A99                 lea     esi, [esi+0]
.text:00404AA0
.text:00404AA0 loc_404AA0:                             ; CODE XREF: sub_404980+106↑j
.text:00404AA0                                         ; sub_404980+A9B↓j
.text:00404AA0                 mov     eax, [esp+5Ch+arg_0]
.text:00404AA4                 mov     ebx, eax
.text:00404AA6                 mov     [ebp+24h], eax
.text:00404AA9                 mov     [ebp+0], eax
.text:00404AAC
.text:00404AAC loc_404AAC:                             ; CODE XREF: sub_404980+F0↑j
.text:00404AAC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00404AB0                 jz      loc_405404
.text:00404AB6                 mov     esi, [esp+5Ch+arg_4]
.text:00404ABA                 mov     eax, [esi+ebx*4]
.text:00404ABD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00404AC0                 jz      short loc_404AE7
.text:00404AC2
.text:00404AC2 loc_404AC2:                             ; CODE XREF: sub_404980+16D↓j
.text:00404AC2                 mov     edx, [ebp+18h]
.text:00404AC5                 test    edx, edx
.text:00404AC7                 jz      short loc_404AE0
.text:00404AC9                 mov     [ebp+0Ch], eax
.text:00404ACC                 lea     edi, [ebx+1]
.text:00404ACF                 mov     eax, 1
.text:00404AD4                 mov     [ebp+0], edi
.text:00404AD7
.text:00404AD7 loc_404AD7:                             ; CODE XREF: sub_404980+2D↑j
.text:00404AD7                                         ; sub_404980+165↓j ...
.text:00404AD7                 add     esp, 4Ch
.text:00404ADA                 pop     ebx
.text:00404ADB                 pop     esi
.text:00404ADC                 pop     edi
.text:00404ADD                 pop     ebp
.text:00404ADE                 retn
.text:00404ADE ; ---------------------------------------------------------------------------
.text:00404ADF                 align 10h
.text:00404AE0
.text:00404AE0 loc_404AE0:                             ; CODE XREF: sub_404980+147↑j
.text:00404AE0                                         ; sub_404980+A8A↓j ...
.text:00404AE0                 mov     eax, 0FFFFFFFFh
.text:00404AE5                 jmp     short loc_404AD7
.text:00404AE7 ; ---------------------------------------------------------------------------
.text:00404AE7
.text:00404AE7 loc_404AE7:                             ; CODE XREF: sub_404980+140↑j
.text:00404AE7                 movzx   edx, byte ptr [eax+1]
.text:00404AEB                 test    dl, dl
.text:00404AED                 jz      short loc_404AC2
.text:00404AEF                 mov     ebx, [esp+5Ch+arg_C]
.text:00404AF3                 xor     ecx, ecx
.text:00404AF5                 test    ebx, ebx
.text:00404AF7                 jz      short loc_404B02
.text:00404AF9                 cmp     dl, 2Dh ; '-'
.text:00404AFC                 jz      loc_4053FA
.text:00404B02
.text:00404B02 loc_404B02:                             ; CODE XREF: sub_404980+177↑j
.text:00404B02                                         ; sub_404980+A7F↓j
.text:00404B02                 lea     esi, [ecx+eax+1]
.text:00404B06                 mov     [ebp+14h], esi
.text:00404B09                 lea     esi, [esi+0]
.text:00404B10
.text:00404B10 loc_404B10:                             ; CODE XREF: sub_404980+AD↑j
.text:00404B10                 mov     ecx, [esp+5Ch+arg_C]
.text:00404B14                 test    ecx, ecx
.text:00404B16                 jz      loc_404EA0
.text:00404B1C                 mov     edx, [ebp+0]
.text:00404B1F                 mov     edi, [esp+5Ch+arg_4]
.text:00404B23                 mov     eax, [edi+edx*4]
.text:00404B26                 movzx   edx, byte ptr [eax+1]
.text:00404B2A                 cmp     dl, 2Dh ; '-'
.text:00404B2D                 jz      short loc_404B45
.text:00404B2F                 mov     ebx, [esp+5Ch+arg_14]
.text:00404B33                 test    ebx, ebx
.text:00404B35                 jz      loc_404EA0
.text:00404B3B                 cmp     byte ptr [eax+2], 0
.text:00404B3F                 jz      loc_4053DA
.text:00404B45
.text:00404B45 loc_404B45:                             ; CODE XREF: sub_404980+1AD↑j
.text:00404B45                                         ; sub_404980+A75↓j
.text:00404B45                 mov     [esp+5Ch+var_18], 0
.text:00404B4D                 mov     ecx, [ebp+14h]
.text:00404B50                 mov     [esp+5Ch+var_1C], 0
.text:00404B58                 mov     [esp+5Ch+var_20], 0
.text:00404B60                 mov     edi, ecx
.text:00404B62                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00404B6A                 movzx   eax, byte ptr [ecx]
.text:00404B6D                 test    al, al
.text:00404B6F                 jz      short loc_404B8C
.text:00404B71                 cmp     al, 3Dh ; '='
.text:00404B73                 jz      short loc_404B8C
.text:00404B75                 lea     esi, [esi+0]
.text:00404B79                 lea     edi, [edi+0]
.text:00404B80
.text:00404B80 loc_404B80:                             ; CODE XREF: sub_404980+20A↓j
.text:00404B80                 inc     edi
.text:00404B81                 movzx   eax, byte ptr [edi]
.text:00404B84                 test    al, al
.text:00404B86                 jz      short loc_404B8C
.text:00404B88                 cmp     al, 3Dh ; '='
.text:00404B8A                 jnz     short loc_404B80
.text:00404B8C
.text:00404B8C loc_404B8C:                             ; CODE XREF: sub_404980+1EF↑j
.text:00404B8C                                         ; sub_404980+1F3↑j ...
.text:00404B8C                 mov     [esp+5Ch+var_28], 0
.text:00404B94                 mov     esi, [esp+5Ch+arg_C]
.text:00404B98                 mov     ebx, [esi]
.text:00404B9A                 test    ebx, ebx
.text:00404B9C                 mov     edx, ebx
.text:00404B9E                 jz      loc_404DC0
.text:00404BA4                 lea     esi, [esi+0]
.text:00404BAA                 lea     edi, [edi+0]
.text:00404BB0
.text:00404BB0 loc_404BB0:                             ; CODE XREF: sub_404980+25E↓j
.text:00404BB0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00404BB4                 mov     ebx, edi
.text:00404BB6                 sub     ebx, ecx
.text:00404BB8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00404BBC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00404BBF                 call    strncmp
.text:00404BC4                 test    eax, eax
.text:00404BC6                 jz      loc_405356
.text:00404BCC
.text:00404BCC loc_404BCC:                             ; CODE XREF: sub_404980+A0F↓j
.text:00404BCC                                         ; sub_404980+A24↓j ...
.text:00404BCC                 inc     [esp+5Ch+var_28]
.text:00404BD0                 add     esi, 10h
.text:00404BD3                 mov     ecx, [esi]
.text:00404BD5                 test    ecx, ecx
.text:00404BD7                 mov     edx, ecx
.text:00404BD9                 jz      short loc_404BE0
.text:00404BDB                 mov     ecx, [ebp+14h]
.text:00404BDE                 jmp     short loc_404BB0
.text:00404BE0 ; ---------------------------------------------------------------------------
.text:00404BE0
.text:00404BE0 loc_404BE0:                             ; CODE XREF: sub_404980+259↑j
.text:00404BE0                                         ; sub_404980+A55↓j
.text:00404BE0                 mov     esi, [esp+5Ch+var_20]
.text:00404BE4                 test    esi, esi
.text:00404BE6                 jz      short loc_404BF4
.text:00404BE8                 mov     edx, [esp+5Ch+var_1C]
.text:00404BEC                 test    edx, edx
.text:00404BEE                 jz      loc_405300
.text:00404BF4
.text:00404BF4 loc_404BF4:                             ; CODE XREF: sub_404980+266↑j
.text:00404BF4                 mov     eax, [esp+5Ch+var_18]
.text:00404BF8                 test    eax, eax
.text:00404BFA                 jz      loc_404DC0
.text:00404C00                 mov     ecx, [ebp+0]
.text:00404C03                 lea     eax, [ecx+1]
.text:00404C06                 mov     [ebp+0], eax
.text:00404C09                 cmp     byte ptr [edi], 0
.text:00404C0C                 jz      loc_404D20
.text:00404C12                 mov     ecx, [esp+5Ch+var_18]
.text:00404C16                 mov     esi, [ecx+4]
.text:00404C19                 test    esi, esi
.text:00404C1B                 jz      short loc_404C66
.text:00404C1D                 lea     ebx, [edi+1]
.text:00404C20                 mov     [ebp+0Ch], ebx
.text:00404C23
.text:00404C23 loc_404C23:                             ; CODE XREF: sub_404980+3A8↓j
.text:00404C23                                         ; sub_404980+3C4↓j
.text:00404C23                 mov     ebx, [ebp+14h]
.text:00404C26                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00404C29                 call    strlen
.text:00404C2E                 add     [ebp+14h], eax
.text:00404C31                 mov     esi, [esp+5Ch+arg_10]
.text:00404C35                 test    esi, esi
.text:00404C37                 jz      short loc_404C43
.text:00404C39                 mov     ebp, [esp+5Ch+var_24]
.text:00404C3D                 mov     ecx, [esp+5Ch+arg_10]
.text:00404C41                 mov     [ecx], ebp
.text:00404C43
.text:00404C43 loc_404C43:                             ; CODE XREF: sub_404980+2B7↑j
.text:00404C43                 mov     eax, [esp+5Ch+var_18]
.text:00404C47                 mov     ecx, [eax+8]
.text:00404C4A                 test    ecx, ecx
.text:00404C4C                 jnz     short loc_404C5A
.text:00404C4E                 mov     ecx, [esp+5Ch+var_18]
.text:00404C52
.text:00404C52 loc_404C52:                             ; CODE XREF: sub_404980+723↓j
.text:00404C52                 mov     eax, [ecx+0Ch]
.text:00404C55                 jmp     loc_404AD7
.text:00404C5A ; ---------------------------------------------------------------------------
.text:00404C5A
.text:00404C5A loc_404C5A:                             ; CODE XREF: sub_404980+2CC↑j
.text:00404C5A                                         ; sub_404980+719↓j
.text:00404C5A                 mov     esi, [eax+0Ch]
.text:00404C5D                 xor     eax, eax
.text:00404C5F                 mov     [ecx], esi
.text:00404C61                 jmp     loc_404AD7
.text:00404C66 ; ---------------------------------------------------------------------------
.text:00404C66
.text:00404C66 loc_404C66:                             ; CODE XREF: sub_404980+29B↑j
.text:00404C66                 mov     edi, [esp+5Ch+var_14]
.text:00404C6A                 test    edi, edi
.text:00404C6C                 jz      short loc_404CC0
.text:00404C6E                 mov     esi, [esp+5Ch+arg_4]
.text:00404C72                 mov     edx, [esi+eax*4-4]
.text:00404C76                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00404C7A                 jz      short loc_404CE2
.text:00404C7C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00404C83                 call    ds:__imp_libintl_gettext
.text:00404C89                 mov     edx, [esp+5Ch+var_18]
.text:00404C8D                 mov     edi, [edx]
.text:00404C8F                 mov     [esp+5Ch+var_4C], edi
.text:00404C93                 mov     ebx, [ebp+0]
.text:00404C96                 mov     edi, [esp+5Ch+arg_4]
.text:00404C9A                 mov     ecx, [edi+ebx*4-4]
.text:00404C9E                 movsx   esi, byte ptr [ecx]
.text:00404CA1                 mov     ecx, ds:_iob
.text:00404CA7                 add     ecx, 40h ; '@'
.text:00404CAA                 mov     [esp+5Ch+var_50], esi
.text:00404CAE                 mov     ebx, [edi]
.text:00404CB0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404CB4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404CB7                 mov     [esp+5Ch+MaxCount], ebx
.text:00404CBB                 call    fprintf
.text:00404CC0
.text:00404CC0 loc_404CC0:                             ; CODE XREF: sub_404980+2EC↑j
.text:00404CC0                                         ; sub_404980+398↓j
.text:00404CC0                 mov     ecx, [ebp+14h]
.text:00404CC3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00404CC6                 call    strlen
.text:00404CCB                 add     [ebp+14h], eax
.text:00404CCE                 mov     eax, [esp+5Ch+var_18]
.text:00404CD2                 mov     esi, [eax+0Ch]
.text:00404CD5                 mov     [ebp+8], esi
.text:00404CD8
.text:00404CD8 loc_404CD8:                             ; CODE XREF: sub_404980+4E5↓j
.text:00404CD8                                         ; sub_404980+73E↓j ...
.text:00404CD8                 mov     eax, 3Fh ; '?'
.text:00404CDD                 jmp     loc_404AD7
.text:00404CE2 ; ---------------------------------------------------------------------------
.text:00404CE2
.text:00404CE2 loc_404CE2:                             ; CODE XREF: sub_404980+2FA↑j
.text:00404CE2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00404CE9                 call    ds:__imp_libintl_gettext
.text:00404CEF                 mov     edx, [esp+5Ch+var_18]
.text:00404CF3                 mov     edi, [esp+5Ch+arg_4]
.text:00404CF7                 mov     ecx, ds:_iob
.text:00404CFD                 mov     esi, [edx]
.text:00404CFF                 add     ecx, 40h ; '@'
.text:00404D02                 mov     [esp+5Ch+var_50], esi
.text:00404D06                 mov     ebx, [edi]
.text:00404D08                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404D0C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404D0F                 mov     [esp+5Ch+MaxCount], ebx
.text:00404D13                 call    fprintf
.text:00404D18                 jmp     short loc_404CC0
.text:00404D18 ; ---------------------------------------------------------------------------
.text:00404D1A                 align 10h
.text:00404D20
.text:00404D20 loc_404D20:                             ; CODE XREF: sub_404980+28C↑j
.text:00404D20                 mov     ebx, [esp+5Ch+var_18]
.text:00404D24                 cmp     dword ptr [ebx+4], 1
.text:00404D28                 jnz     loc_404C23
.text:00404D2E                 cmp     eax, [esp+5Ch+arg_0]
.text:00404D32                 jge     short loc_404D49
.text:00404D34                 mov     ebx, [esp+5Ch+arg_4]
.text:00404D38                 lea     edi, [ecx+2]
.text:00404D3B                 mov     [ebp+0], edi
.text:00404D3E                 mov     esi, [ebx+eax*4]
.text:00404D41                 mov     [ebp+0Ch], esi
.text:00404D44                 jmp     loc_404C23
.text:00404D49 ; ---------------------------------------------------------------------------
.text:00404D49
.text:00404D49 loc_404D49:                             ; CODE XREF: sub_404980+3B2↑j
.text:00404D49                 mov     edx, [esp+5Ch+var_14]
.text:00404D4D                 test    edx, edx
.text:00404D4F                 jnz     short loc_404D80
.text:00404D51
.text:00404D51 loc_404D51:                             ; CODE XREF: sub_404980+437↓j
.text:00404D51                 mov     edx, [ebp+14h]
.text:00404D54                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404D57                 call    strlen
.text:00404D5C                 add     [ebp+14h], eax
.text:00404D5F                 mov     eax, [esp+5Ch+var_18]
.text:00404D63                 mov     edi, [eax+0Ch]
.text:00404D66                 mov     [ebp+8], edi
.text:00404D69
.text:00404D69 loc_404D69:                             ; CODE XREF: sub_404980+7C2↓j
.text:00404D69                 mov     ebp, [esp+5Ch+Str]
.text:00404D6D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00404D71                 setnz   bl
.text:00404D74                 movzx   esi, bl
.text:00404D77                 lea     eax, [esi+esi*4+3Ah]
.text:00404D7B                 jmp     loc_404AD7
.text:00404D80 ; ---------------------------------------------------------------------------
.text:00404D80
.text:00404D80 loc_404D80:                             ; CODE XREF: sub_404980+3CF↑j
.text:00404D80                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00404D87                 call    ds:__imp_libintl_gettext
.text:00404D8D                 mov     ecx, [ebp+0]
.text:00404D90                 mov     esi, [esp+5Ch+arg_4]
.text:00404D94                 mov     ebx, [esi+ecx*4-4]
.text:00404D98                 mov     ecx, ds:_iob
.text:00404D9E                 mov     [esp+5Ch+var_50], ebx
.text:00404DA2                 mov     edi, [esi]
.text:00404DA4                 add     ecx, 40h ; '@'
.text:00404DA7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404DAB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404DAE                 mov     [esp+5Ch+MaxCount], edi
.text:00404DB2                 call    fprintf
.text:00404DB7                 jmp     short loc_404D51
.text:00404DB7 ; ---------------------------------------------------------------------------
.text:00404DB9                 align 10h
.text:00404DC0
.text:00404DC0 loc_404DC0:                             ; CODE XREF: sub_404980+21E↑j
.text:00404DC0                                         ; sub_404980+27A↑j
.text:00404DC0                 mov     eax, [esp+5Ch+arg_14]
.text:00404DC4                 test    eax, eax
.text:00404DC6                 jz      short loc_404DF6
.text:00404DC8                 mov     ebx, [ebp+0]
.text:00404DCB                 mov     esi, [esp+5Ch+arg_4]
.text:00404DCF                 mov     edi, [esi+ebx*4]
.text:00404DD2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00404DD6                 jz      short loc_404DF9
.text:00404DD8                 mov     ecx, [ebp+14h]
.text:00404DDB                 mov     edx, [esp+5Ch+Str]
.text:00404DDF                 movsx   ebx, byte ptr [ecx]
.text:00404DE2                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404DE5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00404DE9                 call    strchr
.text:00404DEE                 test    eax, eax
.text:00404DF0                 jnz     loc_404EA0
.text:00404DF6
.text:00404DF6 loc_404DF6:                             ; CODE XREF: sub_404980+446↑j
.text:00404DF6                 mov     ebx, [ebp+0]
.text:00404DF9
.text:00404DF9 loc_404DF9:                             ; CODE XREF: sub_404980+456↑j
.text:00404DF9                 mov     eax, [esp+5Ch+var_14]
.text:00404DFD                 test    eax, eax
.text:00404DFF                 jz      short loc_404E51
.text:00404E01                 mov     esi, [esp+5Ch+arg_4]
.text:00404E05                 mov     edi, [esi+ebx*4]
.text:00404E08                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00404E0C                 jz      short loc_404E6A
.text:00404E0E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00404E15                 call    ds:__imp_libintl_gettext
.text:00404E1B                 mov     edi, [ebp+14h]
.text:00404E1E                 mov     [esp+5Ch+var_4C], edi
.text:00404E22                 mov     ebx, [ebp+0]
.text:00404E25                 mov     edi, [esp+5Ch+arg_4]
.text:00404E29                 mov     esi, [edi+ebx*4]
.text:00404E2C                 movsx   ecx, byte ptr [esi]
.text:00404E2F                 mov     esi, ds:_iob
.text:00404E35                 add     esi, 40h ; '@'
.text:00404E38                 mov     [esp+5Ch+var_50], ecx
.text:00404E3C                 mov     ebx, [edi]
.text:00404E3E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404E42                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00404E45                 mov     [esp+5Ch+MaxCount], ebx
.text:00404E49                 call    fprintf
.text:00404E4E
.text:00404E4E loc_404E4E:                             ; CODE XREF: sub_404980+51D↓j
.text:00404E4E                 mov     ebx, [ebp+0]
.text:00404E51
.text:00404E51 loc_404E51:                             ; CODE XREF: sub_404980+47F↑j
.text:00404E51                 mov     dword ptr [ebp+14h], offset dword_404830
.text:00404E58                 lea     edx, [ebx+1]
.text:00404E5B                 mov     [ebp+0], edx
.text:00404E5E
.text:00404E5E loc_404E5E:                             ; CODE XREF: sub_404980+999↓j
.text:00404E5E                 mov     dword ptr [ebp+8], 0
.text:00404E65                 jmp     loc_404CD8
.text:00404E6A ; ---------------------------------------------------------------------------
.text:00404E6A
.text:00404E6A loc_404E6A:                             ; CODE XREF: sub_404980+48C↑j
.text:00404E6A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00404E71                 call    ds:__imp_libintl_gettext
.text:00404E77                 mov     ecx, [ebp+14h]
.text:00404E7A                 mov     edi, [esp+5Ch+arg_4]
.text:00404E7E                 mov     edx, ds:_iob
.text:00404E84                 mov     [esp+5Ch+var_50], ecx
.text:00404E88                 mov     ebx, [edi]
.text:00404E8A                 add     edx, 40h ; '@'
.text:00404E8D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404E91                 mov     [esp+5Ch+MaxCount], ebx
.text:00404E95                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00404E98                 call    fprintf
.text:00404E9D                 jmp     short loc_404E4E
.text:00404E9D ; ---------------------------------------------------------------------------
.text:00404E9F                 align 10h
.text:00404EA0
.text:00404EA0 loc_404EA0:                             ; CODE XREF: sub_404980+196↑j
.text:00404EA0                                         ; sub_404980+1B5↑j ...
.text:00404EA0                 mov     esi, [ebp+14h]
.text:00404EA3                 movzx   ebx, byte ptr [esi]
.text:00404EA6                 inc     esi
.text:00404EA7                 mov     [ebp+14h], esi
.text:00404EAA                 mov     ecx, [esp+5Ch+Str]
.text:00404EAE                 movsx   esi, bl
.text:00404EB1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00404EB5                 mov     edi, esi
.text:00404EB7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00404EBA                 call    strchr
.text:00404EBF                 mov     ecx, [ebp+14h]
.text:00404EC2                 cmp     byte ptr [ecx], 0
.text:00404EC5                 jnz     short loc_404ECA
.text:00404EC7                 inc     dword ptr [ebp+0]
.text:00404ECA
.text:00404ECA loc_404ECA:                             ; CODE XREF: sub_404980+545↑j
.text:00404ECA                 test    eax, eax
.text:00404ECC                 jz      loc_4052B0
.text:00404ED2                 cmp     bl, 3Ah ; ':'
.text:00404ED5                 jz      loc_4052B0
.text:00404EDB                 cmp     byte ptr [eax], 57h ; 'W'
.text:00404EDE                 jz      loc_404F96
.text:00404EE4                 movzx   edx, byte ptr [eax+1]
.text:00404EE8
.text:00404EE8 loc_404EE8:                             ; CODE XREF: sub_404980+61D↓j
.text:00404EE8                 cmp     dl, 3Ah ; ':'
.text:00404EEB                 jz      short loc_404EF4
.text:00404EED
.text:00404EED loc_404EED:                             ; CODE XREF: sub_404980+590↓j
.text:00404EED                 mov     eax, esi
.text:00404EEF                 jmp     loc_404AD7
.text:00404EF4 ; ---------------------------------------------------------------------------
.text:00404EF4
.text:00404EF4 loc_404EF4:                             ; CODE XREF: sub_404980+56B↑j
.text:00404EF4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00404EF8                 jz      loc_404F81
.text:00404EFE                 cmp     byte ptr [ecx], 0
.text:00404F01                 jz      short loc_404F12
.text:00404F03
.text:00404F03 loc_404F03:                             ; CODE XREF: sub_404980+604↓j
.text:00404F03                 inc     dword ptr [ebp+0]
.text:00404F06                 mov     [ebp+0Ch], ecx
.text:00404F09
.text:00404F09 loc_404F09:                             ; CODE XREF: sub_404980+5AB↓j
.text:00404F09                                         ; sub_404980+5C6↓j ...
.text:00404F09                 mov     dword ptr [ebp+14h], 0
.text:00404F10                 jmp     short loc_404EED
.text:00404F12 ; ---------------------------------------------------------------------------
.text:00404F12
.text:00404F12 loc_404F12:                             ; CODE XREF: sub_404980+581↑j
.text:00404F12                 mov     ecx, [ebp+0]
.text:00404F15                 cmp     ecx, [esp+5Ch+arg_0]
.text:00404F19                 jz      short loc_404F2D
.text:00404F1B                 mov     eax, [esp+5Ch+arg_4]
.text:00404F1F                 lea     edx, [ecx+1]
.text:00404F22                 mov     [ebp+0], edx
.text:00404F25                 mov     ebx, [eax+ecx*4]
.text:00404F28                 mov     [ebp+0Ch], ebx
.text:00404F2B                 jmp     short loc_404F09
.text:00404F2D ; ---------------------------------------------------------------------------
.text:00404F2D
.text:00404F2D loc_404F2D:                             ; CODE XREF: sub_404980+599↑j
.text:00404F2D                 mov     ecx, [esp+5Ch+var_14]
.text:00404F31                 test    ecx, ecx
.text:00404F33                 jnz     short loc_404F4F
.text:00404F35
.text:00404F35 loc_404F35:                             ; CODE XREF: sub_404980+5FF↓j
.text:00404F35                 mov     [ebp+8], edi
.text:00404F38                 mov     edi, [esp+5Ch+Str]
.text:00404F3C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00404F3F                 jz      short loc_404F48
.text:00404F41                 mov     esi, 3Fh ; '?'
.text:00404F46                 jmp     short loc_404F09
.text:00404F48 ; ---------------------------------------------------------------------------
.text:00404F48
.text:00404F48 loc_404F48:                             ; CODE XREF: sub_404980+5BF↑j
.text:00404F48                 mov     esi, 3Ah ; ':'
.text:00404F4D                 jmp     short loc_404F09
.text:00404F4F ; ---------------------------------------------------------------------------
.text:00404F4F
.text:00404F4F loc_404F4F:                             ; CODE XREF: sub_404980+5B3↑j
.text:00404F4F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00404F56                 call    ds:__imp_libintl_gettext
.text:00404F5C                 mov     [esp+5Ch+var_50], edi
.text:00404F60                 mov     ebx, [esp+5Ch+arg_4]
.text:00404F64                 mov     edx, ds:_iob
.text:00404F6A                 mov     esi, [ebx]
.text:00404F6C                 add     edx, 40h ; '@'
.text:00404F6F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404F73                 mov     [esp+5Ch+MaxCount], esi
.text:00404F77                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00404F7A                 call    fprintf
.text:00404F7F                 jmp     short loc_404F35
.text:00404F81 ; ---------------------------------------------------------------------------
.text:00404F81
.text:00404F81 loc_404F81:                             ; CODE XREF: sub_404980+578↑j
.text:00404F81                 cmp     byte ptr [ecx], 0
.text:00404F84                 jnz     loc_404F03
.text:00404F8A                 mov     dword ptr [ebp+0Ch], 0
.text:00404F91                 jmp     loc_404F09
.text:00404F96 ; ---------------------------------------------------------------------------
.text:00404F96
.text:00404F96 loc_404F96:                             ; CODE XREF: sub_404980+55E↑j
.text:00404F96                 movzx   edx, byte ptr [eax+1]
.text:00404F9A                 cmp     dl, 3Bh ; ';'
.text:00404F9D                 jnz     loc_404EE8
.text:00404FA3                 mov     [esp+5Ch+var_2C], 0
.text:00404FAB                 mov     [esp+5Ch+var_30], 0
.text:00404FB3                 mov     [esp+5Ch+var_34], 0
.text:00404FBB                 mov     [esp+5Ch+var_38], 0
.text:00404FC3                 cmp     byte ptr [ecx], 0
.text:00404FC6                 jz      loc_40523B
.text:00404FCC                 inc     dword ptr [ebp+0]
.text:00404FCF                 mov     [ebp+0Ch], ecx
.text:00404FD2
.text:00404FD2 loc_404FD2:                             ; CODE XREF: sub_404980+8D4↓j
.text:00404FD2                 mov     edi, [ebp+0Ch]
.text:00404FD5                 mov     [ebp+14h], edi
.text:00404FD8                 movzx   eax, byte ptr [edi]
.text:00404FDB                 test    al, al
.text:00404FDD                 jz      short loc_404FEF
.text:00404FDF                 cmp     al, 3Dh ; '='
.text:00404FE1                 jz      short loc_404FEF
.text:00404FE3
.text:00404FE3 loc_404FE3:                             ; CODE XREF: sub_404980+66D↓j
.text:00404FE3                 inc     edi
.text:00404FE4                 movzx   eax, byte ptr [edi]
.text:00404FE7                 test    al, al
.text:00404FE9                 jz      short loc_404FEF
.text:00404FEB                 cmp     al, 3Dh ; '='
.text:00404FED                 jnz     short loc_404FE3
.text:00404FEF
.text:00404FEF loc_404FEF:                             ; CODE XREF: sub_404980+65D↑j
.text:00404FEF                                         ; sub_404980+661↑j ...
.text:00404FEF                 mov     [esp+5Ch+var_3C], 0
.text:00404FF7                 mov     esi, [esp+5Ch+arg_C]
.text:00404FFB                 mov     eax, [esi]
.text:00404FFD                 test    eax, eax
.text:00404FFF                 jz      loc_405180
.text:00405005                 mov     ecx, eax
.text:00405007
.text:00405007 loc_405007:                             ; CODE XREF: sub_404980+6B3↓j
.text:00405007                 mov     ebx, [ebp+14h]
.text:0040500A                 mov     eax, edi
.text:0040500C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040500F                 sub     eax, ebx
.text:00405011                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00405015                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00405019                 call    strncmp
.text:0040501E                 test    eax, eax
.text:00405020                 jz      loc_4051E7
.text:00405026
.text:00405026 loc_405026:                             ; CODE XREF: sub_404980+88C↓j
.text:00405026                                         ; sub_404980+89D↓j
.text:00405026                 inc     [esp+5Ch+var_3C]
.text:0040502A                 add     esi, 10h
.text:0040502D                 mov     edx, [esi]
.text:0040502F                 test    edx, edx
.text:00405031                 mov     ecx, edx
.text:00405033                 jnz     short loc_405007
.text:00405035
.text:00405035 loc_405035:                             ; CODE XREF: sub_404980+8B6↓j
.text:00405035                 mov     esi, [esp+5Ch+var_34]
.text:00405039                 test    esi, esi
.text:0040503B                 jz      short loc_405049
.text:0040503D                 mov     ebx, [esp+5Ch+var_30]
.text:00405041                 test    ebx, ebx
.text:00405043                 jz      loc_405191
.text:00405049
.text:00405049 loc_405049:                             ; CODE XREF: sub_404980+6BB↑j
.text:00405049                 mov     esi, [esp+5Ch+var_2C]
.text:0040504D                 test    esi, esi
.text:0040504F                 jz      loc_405180
.text:00405055                 cmp     byte ptr [edi], 0
.text:00405058                 jz      loc_405100
.text:0040505E                 mov     ecx, [esp+5Ch+var_2C]
.text:00405062                 mov     ebx, [ecx+4]
.text:00405065                 test    ebx, ebx
.text:00405067                 jz      short loc_4050A8
.text:00405069                 lea     edx, [edi+1]
.text:0040506C                 mov     [ebp+0Ch], edx
.text:0040506F
.text:0040506F loc_40506F:                             ; CODE XREF: sub_404980+788↓j
.text:0040506F                                         ; sub_404980+7A7↓j
.text:0040506F                 mov     edi, [ebp+14h]
.text:00405072                 mov     [esp+5Ch+Str1], edi ; Str
.text:00405075                 call    strlen
.text:0040507A                 add     [ebp+14h], eax
.text:0040507D                 mov     eax, [esp+5Ch+arg_10]
.text:00405081                 test    eax, eax
.text:00405083                 jz      short loc_405090
.text:00405085                 mov     edx, [esp+5Ch+var_38]
.text:00405089                 mov     ebp, [esp+5Ch+arg_10]
.text:0040508D                 mov     [ebp+0], edx
.text:00405090
.text:00405090 loc_405090:                             ; CODE XREF: sub_404980+703↑j
.text:00405090                 mov     eax, [esp+5Ch+var_2C]
.text:00405094                 mov     ecx, [eax+8]
.text:00405097                 test    ecx, ecx
.text:00405099                 jnz     loc_404C5A
.text:0040509F                 mov     ecx, [esp+5Ch+var_2C]
.text:004050A3                 jmp     loc_404C52
.text:004050A8 ; ---------------------------------------------------------------------------
.text:004050A8
.text:004050A8 loc_4050A8:                             ; CODE XREF: sub_404980+6E7↑j
.text:004050A8                 mov     eax, [esp+5Ch+var_14]
.text:004050AC                 test    eax, eax
.text:004050AE                 jnz     short loc_4050C3
.text:004050B0
.text:004050B0 loc_4050B0:                             ; CODE XREF: sub_404980+779↓j
.text:004050B0                 mov     ecx, [ebp+14h]
.text:004050B3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004050B6                 call    strlen
.text:004050BB                 add     [ebp+14h], eax
.text:004050BE                 jmp     loc_404CD8
.text:004050C3 ; ---------------------------------------------------------------------------
.text:004050C3
.text:004050C3 loc_4050C3:                             ; CODE XREF: sub_404980+72E↑j
.text:004050C3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004050CA                 call    ds:__imp_libintl_gettext
.text:004050D0                 mov     edx, [esp+5Ch+var_2C]
.text:004050D4                 mov     ebx, [esp+5Ch+arg_4]
.text:004050D8                 mov     edi, [edx]
.text:004050DA                 mov     [esp+5Ch+var_50], edi
.text:004050DE                 mov     edi, ds:_iob
.text:004050E4                 mov     esi, [ebx]
.text:004050E6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004050EA                 add     edi, 40h ; '@'
.text:004050ED                 mov     [esp+5Ch+MaxCount], esi
.text:004050F1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:004050F4                 call    fprintf
.text:004050F9                 jmp     short loc_4050B0
.text:004050F9 ; ---------------------------------------------------------------------------
.text:004050FB                 align 10h
.text:00405100
.text:00405100 loc_405100:                             ; CODE XREF: sub_404980+6D8↑j
.text:00405100                 mov     esi, [esp+5Ch+var_2C]
.text:00405104                 cmp     dword ptr [esi+4], 1
.text:00405108                 jnz     loc_40506F
.text:0040510E                 mov     ecx, [ebp+0]
.text:00405111                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405115                 jge     short loc_40512C
.text:00405117                 mov     eax, [esp+5Ch+arg_4]
.text:0040511B                 lea     ebx, [ecx+1]
.text:0040511E                 mov     [ebp+0], ebx
.text:00405121                 mov     edi, [eax+ecx*4]
.text:00405124                 mov     [ebp+0Ch], edi
.text:00405127                 jmp     loc_40506F
.text:0040512C ; ---------------------------------------------------------------------------
.text:0040512C
.text:0040512C loc_40512C:                             ; CODE XREF: sub_404980+795↑j
.text:0040512C                 mov     edx, [esp+5Ch+var_14]
.text:00405130                 test    edx, edx
.text:00405132                 jnz     short loc_405147
.text:00405134
.text:00405134 loc_405134:                             ; CODE XREF: sub_404980+7FE↓j
.text:00405134                 mov     edx, [ebp+14h]
.text:00405137                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040513A                 call    strlen
.text:0040513F                 add     [ebp+14h], eax
.text:00405142                 jmp     loc_404D69
.text:00405147 ; ---------------------------------------------------------------------------
.text:00405147
.text:00405147 loc_405147:                             ; CODE XREF: sub_404980+7B2↑j
.text:00405147                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040514E                 call    ds:__imp_libintl_gettext
.text:00405154                 mov     ecx, [ebp+0]
.text:00405157                 mov     ebx, [esp+5Ch+arg_4]
.text:0040515B                 mov     edi, [ebx+ecx*4-4]
.text:0040515F                 mov     ecx, ds:_iob
.text:00405165                 mov     [esp+5Ch+var_50], edi
.text:00405169                 mov     esi, [ebx]
.text:0040516B                 add     ecx, 40h ; '@'
.text:0040516E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405172                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405175                 mov     [esp+5Ch+MaxCount], esi
.text:00405179                 call    fprintf
.text:0040517E                 jmp     short loc_405134
.text:00405180 ; ---------------------------------------------------------------------------
.text:00405180
.text:00405180 loc_405180:                             ; CODE XREF: sub_404980+67F↑j
.text:00405180                                         ; sub_404980+6CF↑j
.text:00405180                 mov     dword ptr [ebp+14h], 0
.text:00405187                 mov     eax, 57h ; 'W'
.text:0040518C                 jmp     loc_404AD7
.text:00405191 ; ---------------------------------------------------------------------------
.text:00405191
.text:00405191 loc_405191:                             ; CODE XREF: sub_404980+6C3↑j
.text:00405191                 mov     edi, [esp+5Ch+var_14]
.text:00405195                 test    edi, edi
.text:00405197                 jnz     short loc_4051AF
.text:00405199
.text:00405199 loc_405199:                             ; CODE XREF: sub_404980+865↓j
.text:00405199                 mov     edx, [ebp+14h]
.text:0040519C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040519F                 call    strlen
.text:004051A4                 add     [ebp+14h], eax
.text:004051A7                 inc     dword ptr [ebp+0]
.text:004051AA                 jmp     loc_404CD8
.text:004051AF ; ---------------------------------------------------------------------------
.text:004051AF
.text:004051AF loc_4051AF:                             ; CODE XREF: sub_404980+817↑j
.text:004051AF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004051B6                 call    ds:__imp_libintl_gettext
.text:004051BC                 mov     ecx, [ebp+0]
.text:004051BF                 mov     ebx, [esp+5Ch+arg_4]
.text:004051C3                 mov     edi, [ebx+ecx*4]
.text:004051C6                 mov     ecx, ds:_iob
.text:004051CC                 mov     [esp+5Ch+var_50], edi
.text:004051D0                 mov     esi, [ebx]
.text:004051D2                 add     ecx, 40h ; '@'
.text:004051D5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004051D9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004051DC                 mov     [esp+5Ch+MaxCount], esi
.text:004051E0                 call    fprintf
.text:004051E5                 jmp     short loc_405199
.text:004051E7 ; ---------------------------------------------------------------------------
.text:004051E7
.text:004051E7 loc_4051E7:                             ; CODE XREF: sub_404980+6A0↑j
.text:004051E7                 mov     edx, [ebp+14h]
.text:004051EA                 mov     ebx, edi
.text:004051EC                 mov     ecx, [esi]
.text:004051EE                 sub     ebx, edx
.text:004051F0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004051F3                 call    strlen
.text:004051F8                 cmp     ebx, eax
.text:004051FA                 jz      short loc_405222
.text:004051FC                 mov     ebx, [esp+5Ch+var_2C]
.text:00405200                 test    ebx, ebx
.text:00405202                 jz      short loc_405211
.text:00405204                 mov     [esp+5Ch+var_34], 1
.text:0040520C                 jmp     loc_405026
.text:00405211 ; ---------------------------------------------------------------------------
.text:00405211
.text:00405211 loc_405211:                             ; CODE XREF: sub_404980+882↑j
.text:00405211                 mov     [esp+5Ch+var_2C], esi
.text:00405215                 mov     ecx, [esp+5Ch+var_3C]
.text:00405219                 mov     [esp+5Ch+var_38], ecx
.text:0040521D                 jmp     loc_405026
.text:00405222 ; ---------------------------------------------------------------------------
.text:00405222
.text:00405222 loc_405222:                             ; CODE XREF: sub_404980+87A↑j
.text:00405222                 mov     [esp+5Ch+var_2C], esi
.text:00405226                 mov     eax, [esp+5Ch+var_3C]
.text:0040522A                 mov     [esp+5Ch+var_30], 1
.text:00405232                 mov     [esp+5Ch+var_38], eax
.text:00405236                 jmp     loc_405035
.text:0040523B ; ---------------------------------------------------------------------------
.text:0040523B
.text:0040523B loc_40523B:                             ; CODE XREF: sub_404980+646↑j
.text:0040523B                 mov     edx, [ebp+0]
.text:0040523E                 cmp     edx, [esp+5Ch+arg_0]
.text:00405242                 jz      short loc_405259
.text:00405244                 mov     ebx, [esp+5Ch+arg_4]
.text:00405248                 lea     esi, [edx+1]
.text:0040524B                 mov     [ebp+0], esi
.text:0040524E                 mov     edi, [ebx+edx*4]
.text:00405251                 mov     [ebp+0Ch], edi
.text:00405254                 jmp     loc_404FD2
.text:00405259 ; ---------------------------------------------------------------------------
.text:00405259
.text:00405259 loc_405259:                             ; CODE XREF: sub_404980+8C2↑j
.text:00405259                 mov     edi, [esp+5Ch+var_14]
.text:0040525D                 test    edi, edi
.text:0040525F                 jnz     short loc_40527C
.text:00405261
.text:00405261 loc_405261:                             ; CODE XREF: sub_404980+92C↓j
.text:00405261                 mov     [ebp+8], esi
.text:00405264                 mov     ebp, [esp+5Ch+Str]
.text:00405268                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040526C                 jz      short loc_405278
.text:0040526E                 mov     bl, 3Fh ; '?'
.text:00405270
.text:00405270 loc_405270:                             ; CODE XREF: sub_404980+8FA↓j
.text:00405270                 movsx   eax, bl
.text:00405273                 jmp     loc_404AD7
.text:00405278 ; ---------------------------------------------------------------------------
.text:00405278
.text:00405278 loc_405278:                             ; CODE XREF: sub_404980+8EC↑j
.text:00405278                 mov     bl, 3Ah ; ':'
.text:0040527A                 jmp     short loc_405270
.text:0040527C ; ---------------------------------------------------------------------------
.text:0040527C
.text:0040527C loc_40527C:                             ; CODE XREF: sub_404980+8DF↑j
.text:0040527C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00405283                 call    ds:__imp_libintl_gettext
.text:00405289                 mov     [esp+5Ch+var_50], esi
.text:0040528D                 mov     edx, [esp+5Ch+arg_4]
.text:00405291                 mov     ecx, ds:_iob
.text:00405297                 mov     ebx, [edx]
.text:00405299                 add     ecx, 40h ; '@'
.text:0040529C                 mov     [esp+5Ch+Str2], eax ; Format
.text:004052A0                 mov     [esp+5Ch+MaxCount], ebx
.text:004052A4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004052A7                 call    fprintf
.text:004052AC                 jmp     short loc_405261
.text:004052AC ; ---------------------------------------------------------------------------
.text:004052AE                 align 10h
.text:004052B0
.text:004052B0 loc_4052B0:                             ; CODE XREF: sub_404980+54C↑j
.text:004052B0                                         ; sub_404980+555↑j
.text:004052B0                 mov     eax, [esp+5Ch+var_14]
.text:004052B4                 test    eax, eax
.text:004052B6                 jz      short loc_4052EF
.text:004052B8                 mov     ebx, [ebp+1Ch]
.text:004052BB                 test    ebx, ebx
.text:004052BD                 jz      short loc_4052F7
.text:004052BF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004052C6
.text:004052C6 loc_4052C6:                             ; CODE XREF: sub_404980+97E↓j
.text:004052C6                 call    ds:__imp_libintl_gettext
.text:004052CC                 mov     [esp+5Ch+var_50], esi
.text:004052D0                 mov     ebx, [esp+5Ch+arg_4]
.text:004052D4                 mov     edx, ds:_iob
.text:004052DA                 mov     esi, [ebx]
.text:004052DC                 add     edx, 40h ; '@'
.text:004052DF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004052E3                 mov     [esp+5Ch+MaxCount], esi
.text:004052E7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004052EA                 call    fprintf
.text:004052EF
.text:004052EF loc_4052EF:                             ; CODE XREF: sub_404980+936↑j
.text:004052EF                 mov     [ebp+8], edi
.text:004052F2                 jmp     loc_404CD8
.text:004052F7 ; ---------------------------------------------------------------------------
.text:004052F7
.text:004052F7 loc_4052F7:                             ; CODE XREF: sub_404980+93D↑j
.text:004052F7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:004052FE                 jmp     short loc_4052C6
.text:00405300 ; ---------------------------------------------------------------------------
.text:00405300
.text:00405300 loc_405300:                             ; CODE XREF: sub_404980+26E↑j
.text:00405300                 mov     edi, [esp+5Ch+var_14]
.text:00405304                 test    edi, edi
.text:00405306                 jnz     short loc_40531E
.text:00405308
.text:00405308 loc_405308:                             ; CODE XREF: sub_404980+9D4↓j
.text:00405308                 mov     edx, [ebp+14h]
.text:0040530B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040530E                 call    strlen
.text:00405313                 add     [ebp+14h], eax
.text:00405316                 inc     dword ptr [ebp+0]
.text:00405319                 jmp     loc_404E5E
.text:0040531E ; ---------------------------------------------------------------------------
.text:0040531E
.text:0040531E loc_40531E:                             ; CODE XREF: sub_404980+986↑j
.text:0040531E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00405325                 call    ds:__imp_libintl_gettext
.text:0040532B                 mov     ebx, [ebp+0]
.text:0040532E                 mov     edi, [esp+5Ch+arg_4]
.text:00405332                 mov     ecx, [edi+ebx*4]
.text:00405335                 mov     ebx, ds:_iob
.text:0040533B                 mov     [esp+5Ch+var_50], ecx
.text:0040533F                 mov     esi, [edi]
.text:00405341                 add     ebx, 40h ; '@'
.text:00405344                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405348                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040534B                 mov     [esp+5Ch+MaxCount], esi
.text:0040534F                 call    fprintf
.text:00405354                 jmp     short loc_405308
.text:00405356 ; ---------------------------------------------------------------------------
.text:00405356
.text:00405356 loc_405356:                             ; CODE XREF: sub_404980+246↑j
.text:00405356                 mov     ecx, [ebp+14h]
.text:00405359                 mov     ebx, edi
.text:0040535B                 mov     edx, [esi]
.text:0040535D                 sub     ebx, ecx
.text:0040535F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405362                 call    strlen
.text:00405367                 cmp     ebx, eax
.text:00405369                 jz      short loc_4053C1
.text:0040536B                 mov     ebx, [esp+5Ch+var_18]
.text:0040536F                 test    ebx, ebx
.text:00405371                 jz      short loc_4053B0
.text:00405373                 mov     edx, [esp+5Ch+arg_14]
.text:00405377                 test    edx, edx
.text:00405379                 jnz     short loc_405387
.text:0040537B                 mov     ecx, [esp+5Ch+var_18]
.text:0040537F                 mov     ebx, [esi+4]
.text:00405382                 cmp     [ecx+4], ebx
.text:00405385                 jz      short loc_405394
.text:00405387
.text:00405387 loc_405387:                             ; CODE XREF: sub_404980+9F9↑j
.text:00405387                                         ; sub_404980+A1A↓j ...
.text:00405387                 mov     [esp+5Ch+var_20], 1
.text:0040538F                 jmp     loc_404BCC
.text:00405394 ; ---------------------------------------------------------------------------
.text:00405394
.text:00405394 loc_405394:                             ; CODE XREF: sub_404980+A05↑j
.text:00405394                 mov     edx, [esi+8]
.text:00405397                 cmp     [ecx+8], edx
.text:0040539A                 jnz     short loc_405387
.text:0040539C                 mov     ebx, [esi+0Ch]
.text:0040539F                 cmp     [ecx+0Ch], ebx
.text:004053A2                 jnz     short loc_405387
.text:004053A4                 jmp     loc_404BCC
.text:004053A4 ; ---------------------------------------------------------------------------
.text:004053A9                 align 10h
.text:004053B0
.text:004053B0 loc_4053B0:                             ; CODE XREF: sub_404980+9F1↑j
.text:004053B0                 mov     [esp+5Ch+var_18], esi
.text:004053B4                 mov     eax, [esp+5Ch+var_28]
.text:004053B8                 mov     [esp+5Ch+var_24], eax
.text:004053BC                 jmp     loc_404BCC
.text:004053C1 ; ---------------------------------------------------------------------------
.text:004053C1
.text:004053C1 loc_4053C1:                             ; CODE XREF: sub_404980+9E9↑j
.text:004053C1                 mov     [esp+5Ch+var_18], esi
.text:004053C5                 mov     ecx, [esp+5Ch+var_28]
.text:004053C9                 mov     [esp+5Ch+var_1C], 1
.text:004053D1                 mov     [esp+5Ch+var_24], ecx
.text:004053D5                 jmp     loc_404BE0
.text:004053DA ; ---------------------------------------------------------------------------
.text:004053DA
.text:004053DA loc_4053DA:                             ; CODE XREF: sub_404980+1BF↑j
.text:004053DA                 mov     eax, [esp+5Ch+Str]
.text:004053DE                 movsx   esi, dl
.text:004053E1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004053E5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004053E8                 call    strchr
.text:004053ED                 test    eax, eax
.text:004053EF                 jnz     loc_404EA0
.text:004053F5                 jmp     loc_404B45
.text:004053FA ; ---------------------------------------------------------------------------
.text:004053FA
.text:004053FA loc_4053FA:                             ; CODE XREF: sub_404980+17C↑j
.text:004053FA                 mov     ecx, 1
.text:004053FF                 jmp     loc_404B02
.text:00405404 ; ---------------------------------------------------------------------------
.text:00405404
.text:00405404 loc_405404:                             ; CODE XREF: sub_404980+D4↑j
.text:00405404                                         ; sub_404980+130↑j
.text:00405404                 mov     eax, [ebp+20h]
.text:00405407                 cmp     eax, [ebp+24h]
.text:0040540A                 jz      loc_404AE0
.text:00405410                 mov     [ebp+0], eax
.text:00405413                 jmp     loc_404AE0
.text:00405418 ; ---------------------------------------------------------------------------
.text:00405418
.text:00405418 loc_405418:                             ; CODE XREF: sub_404980+FE↑j
.text:00405418                 mov     [ebp+20h], eax
.text:0040541B                 jmp     loc_404AA0
.text:00405420 ; ---------------------------------------------------------------------------
.text:00405420
.text:00405420 loc_405420:                             ; CODE XREF: sub_404980+CA↑j
.text:00405420                 mov     edx, [ebp+20h]
.text:00405423                 mov     eax, [ebp+24h]
.text:00405426                 cmp     edx, eax
.text:00405428                 jz      short loc_4054A0
.text:0040542A                 cmp     eax, ebx
.text:0040542C                 jz      short loc_405441
.text:0040542E                 mov     [esp+5Ch+Str2], ebp
.text:00405432                 mov     ebx, [esp+5Ch+arg_4]
.text:00405436                 mov     [esp+5Ch+Str1], ebx
.text:00405439                 call    sub_405630
.text:0040543E                 mov     ebx, [ebp+0]
.text:00405441
.text:00405441 loc_405441:                             ; CODE XREF: sub_404980+AAC↑j
.text:00405441                                         ; sub_404980+B22↓j ...
.text:00405441                 cmp     ebx, [esp+5Ch+arg_0]
.text:00405445                 jge     short loc_405490
.text:00405447                 mov     esi, [esp+5Ch+arg_4]
.text:0040544B                 mov     eax, [esi+ebx*4]
.text:0040544E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00405451                 jz      short loc_405498
.text:00405453                 lea     esi, [esi+0]
.text:00405459                 lea     edi, [edi+0]
.text:00405460
.text:00405460 loc_405460:                             ; CODE XREF: sub_404980+AFC↓j
.text:00405460                                         ; sub_404980+B1C↓j
.text:00405460                 lea     eax, [ebx+1]
.text:00405463                 mov     ebx, eax
.text:00405465                 mov     [ebp+0], eax
.text:00405468                 cmp     eax, [esp+5Ch+arg_0]
.text:0040546C                 jge     short loc_405490
.text:0040546E                 mov     edi, [esp+5Ch+arg_4]
.text:00405472                 mov     edx, [edi+eax*4]
.text:00405475                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00405478                 jz      short loc_405480
.text:0040547A
.text:0040547A loc_40547A:                             ; CODE XREF: sub_404980+B04↓j
.text:0040547A                 mov     ebx, eax
.text:0040547C                 jmp     short loc_405460
.text:0040547C ; ---------------------------------------------------------------------------
.text:0040547E                 align 10h
.text:00405480
.text:00405480 loc_405480:                             ; CODE XREF: sub_404980+AF8↑j
.text:00405480                 cmp     byte ptr [edx+1], 0
.text:00405484                 jz      short loc_40547A
.text:00405486                 lea     esi, [esi+0]
.text:00405489                 lea     edi, [edi+0]
.text:00405490
.text:00405490 loc_405490:                             ; CODE XREF: sub_404980+AC5↑j
.text:00405490                                         ; sub_404980+AEC↑j ...
.text:00405490                 mov     [ebp+24h], ebx
.text:00405493                 jmp     loc_404A50
.text:00405498 ; ---------------------------------------------------------------------------
.text:00405498
.text:00405498 loc_405498:                             ; CODE XREF: sub_404980+AD1↑j
.text:00405498                 cmp     byte ptr [eax+1], 0
.text:0040549C                 jz      short loc_405460
.text:0040549E                 jmp     short loc_405490
.text:004054A0 ; ---------------------------------------------------------------------------
.text:004054A0
.text:004054A0 loc_4054A0:                             ; CODE XREF: sub_404980+AA8↑j
.text:004054A0                 cmp     edx, ebx
.text:004054A2                 jz      short loc_405441
.text:004054A4                 mov     [ebp+20h], ebx
.text:004054A7                 jmp     short loc_405441
.text:004054A9 ; ---------------------------------------------------------------------------
.text:004054A9
.text:004054A9 loc_4054A9:                             ; CODE XREF: sub_404980+88↑j
.text:004054A9                 mov     dword ptr [ebp+18h], 0
.text:004054B0                 mov     esi, [esp+5Ch+Str]
.text:004054B4
.text:004054B4 loc_4054B4:                             ; CODE XREF: sub_404980+B49↓j
.text:004054B4                 inc     esi
.text:004054B5                 jmp     loc_404A18
.text:004054B5 ; ---------------------------------------------------------------------------
.text:004054BA                 align 10h
.text:004054C0
.text:004054C0 loc_4054C0:                             ; CODE XREF: sub_404980+80↑j
.text:004054C0                 mov     dword ptr [ebp+18h], 2
.text:004054C7                 mov     esi, ecx
.text:004054C9                 jmp     short loc_4054B4
.text:004054C9 ; ---------------------------------------------------------------------------
.text:004054CB                 align 10h
.text:004054D0
.text:004054D0 loc_4054D0:                             ; CODE XREF: sub_404980+69↑j
.text:004054D0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004054D7                 call    getenv
.text:004054DC                 test    eax, eax
.text:004054DE                 jz      loc_4049F4
.text:004054E4                 jmp     loc_4049EF
.text:004054E4 ; ---------------------------------------------------------------------------
.text:004054E9                 align 10h
.text:004054F0
.text:004054F0 loc_4054F0:                             ; CODE XREF: sub_404980+3F↑j
.text:004054F0                 mov     dword ptr [ebp+0], 1
.text:004054F7                 mov     ebx, 1
.text:004054FC                 jmp     loc_4049D0
.text:004054FC sub_404980      endp
.text:004054FC
.text:00405501 ; ---------------------------------------------------------------------------
.text:00405501                 jmp     short sub_405510
.text:00405501 ; ---------------------------------------------------------------------------
.text:00405503                 align 10h
.text:00405510
.text:00405510 ; =============== S U B R O U T I N E =======================================
.text:00405510
.text:00405510
.text:00405510 ; int __cdecl sub_405510(int, int, char *, int, int, int, int)
.text:00405510 sub_405510      proc near               ; CODE XREF: .text:00405501↑j
.text:00405510                                         ; sub_405C50+3A↓p ...
.text:00405510
.text:00405510 var_2C          = dword ptr -2Ch
.text:00405510 var_28          = dword ptr -28h
.text:00405510 Str             = dword ptr -24h
.text:00405510 var_20          = dword ptr -20h
.text:00405510 var_1C          = dword ptr -1Ch
.text:00405510 var_18          = dword ptr -18h
.text:00405510 var_14          = dword ptr -14h
.text:00405510 var_10          = dword ptr -10h
.text:00405510 arg_0           = dword ptr  4
.text:00405510 arg_4           = dword ptr  8
.text:00405510 arg_8           = dword ptr  0Ch
.text:00405510 arg_C           = dword ptr  10h
.text:00405510 arg_10          = dword ptr  14h
.text:00405510 arg_14          = dword ptr  18h
.text:00405510 arg_18          = dword ptr  1Ch
.text:00405510
.text:00405510                 sub     esp, 2Ch
.text:00405513                 mov     edx, dword_410020
.text:00405519                 mov     [esp+2Ch+var_10], offset dword_411040 ; int
.text:00405521                 mov     ecx, dword_410024
.text:00405527                 mov     ds:dword_411040, edx
.text:0040552D                 mov     edx, [esp+2Ch+arg_18]
.text:00405531                 mov     ds:dword_411044, ecx
.text:00405537                 mov     ecx, [esp+2Ch+arg_14]
.text:0040553B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040553F                 mov     edx, [esp+2Ch+arg_10]
.text:00405543                 mov     [esp+2Ch+var_18], ecx ; int
.text:00405547                 mov     ecx, [esp+2Ch+arg_C]
.text:0040554B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040554F                 mov     edx, [esp+2Ch+arg_8]
.text:00405553                 mov     [esp+2Ch+var_20], ecx ; int
.text:00405557                 mov     ecx, [esp+2Ch+arg_4]
.text:0040555B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040555F                 mov     edx, [esp+2Ch+arg_0]
.text:00405563                 mov     [esp+2Ch+var_28], ecx ; int
.text:00405567                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040556A                 call    sub_404980
.text:0040556F                 mov     ecx, ds:dword_411040
.text:00405575                 mov     dword_410020, ecx
.text:0040557B                 mov     ecx, ds:dword_41104C
.text:00405581                 mov     ds:dword_411530, ecx
.text:00405587                 mov     ecx, ds:dword_411048
.text:0040558D                 mov     dword_410028, ecx
.text:00405593                 add     esp, 2Ch
.text:00405596                 retn
.text:00405596 sub_405510      endp
.text:00405596
.text:00405596 ; ---------------------------------------------------------------------------
.text:00405597                 align 10h
.text:004055A0                 sub     esp, 2Ch
.text:004055A3                 mov     edx, dword_410020
.text:004055A9                 mov     dword ptr [esp+1Ch], offset dword_411040
.text:004055B1                 mov     ecx, dword_410024
.text:004055B7                 mov     dword ptr [esp+18h], 1
.text:004055BF                 mov     ds:dword_411040, edx
.text:004055C5                 mov     edx, [esp+38h]
.text:004055C9                 mov     ds:dword_411044, ecx
.text:004055CF                 mov     ecx, [esp+34h]
.text:004055D3                 mov     [esp+8], edx
.text:004055D7                 mov     edx, [esp+30h]
.text:004055DB                 mov     [esp+4], ecx
.text:004055DF                 mov     dword ptr [esp+14h], 0
.text:004055E7                 mov     dword ptr [esp+10h], 0
.text:004055EF                 mov     dword ptr [esp+0Ch], 0
.text:004055F7                 mov     [esp], edx
.text:004055FA                 call    sub_404980
.text:004055FF                 mov     ecx, ds:dword_411040
.text:00405605                 mov     dword_410020, ecx
.text:0040560B                 mov     ecx, ds:dword_41104C
.text:00405611                 mov     ds:dword_411530, ecx
.text:00405617                 mov     ecx, ds:dword_411048
.text:0040561D                 mov     dword_410028, ecx
.text:00405623                 add     esp, 2Ch
.text:00405626                 retn
.text:00405626 ; ---------------------------------------------------------------------------
.text:00405627                 align 10h
.text:00405630
.text:00405630 ; =============== S U B R O U T I N E =======================================
.text:00405630
.text:00405630
.text:00405630 sub_405630      proc near               ; CODE XREF: sub_404980+113↑p
.text:00405630                                         ; sub_404980+AB9↑p
.text:00405630
.text:00405630 var_2C          = dword ptr -2Ch
.text:00405630 var_28          = dword ptr -28h
.text:00405630 var_24          = dword ptr -24h
.text:00405630 var_20          = dword ptr -20h
.text:00405630 var_1C          = dword ptr -1Ch
.text:00405630 var_18          = dword ptr -18h
.text:00405630 var_14          = dword ptr -14h
.text:00405630 arg_0           = dword ptr  4
.text:00405630 arg_4           = dword ptr  8
.text:00405630
.text:00405630                 push    ebp
.text:00405631                 push    edi
.text:00405632                 push    esi
.text:00405633                 push    ebx
.text:00405634                 sub     esp, 1Ch
.text:00405637                 mov     ecx, [esp+2Ch+arg_4]
.text:0040563B                 mov     eax, [esp+2Ch+arg_4]
.text:0040563F                 mov     ebx, [esp+2Ch+arg_4]
.text:00405643                 mov     edx, [ecx+20h]
.text:00405646                 mov     edi, [esp+2Ch+arg_0]
.text:0040564A                 mov     ecx, [ebx]
.text:0040564C                 mov     [esp+2Ch+var_2C], edx
.text:0040564F                 mov     [esp+2Ch+var_14], edx
.text:00405653                 mov     edx, [eax+24h]
.text:00405656                 mov     [esp+2Ch+var_28], ecx
.text:0040565A                 mov     [esp+2Ch+var_1C], ecx
.text:0040565E                 cmp     ecx, edx
.text:00405660                 mov     [esp+2Ch+var_18], edx
.text:00405664                 jle     short loc_4056E0
.text:00405666                 mov     esi, [esp+2Ch+var_2C]
.text:00405669                 cmp     edx, esi
.text:0040566B                 jle     short loc_4056E0
.text:0040566D                 lea     esi, [esi+0]
.text:00405670
.text:00405670 loc_405670:                             ; CODE XREF: sub_405630+A1↓j
.text:00405670                 mov     ebx, [esp+2Ch+var_1C]
.text:00405674                 mov     edx, [esp+2Ch+var_18]
.text:00405678                 mov     ebp, [esp+2Ch+var_18]
.text:0040567C                 mov     eax, [esp+2Ch+var_14]
.text:00405680                 sub     ebx, edx
.text:00405682                 mov     [esp+2Ch+var_20], ebx
.text:00405686                 sub     ebp, eax
.text:00405688                 cmp     ebx, ebp
.text:0040568A                 jle     short loc_405705
.text:0040568C                 xor     esi, esi
.text:0040568E                 cmp     esi, ebp
.text:00405690                 jge     short loc_4056BD
.text:00405692                 mov     ecx, [esp+2Ch+var_1C]
.text:00405696                 sub     ecx, ebp
.text:00405698                 mov     [esp+2Ch+var_24], ecx
.text:0040569C                 lea     esi, [esi+0]
.text:004056A0
.text:004056A0 loc_4056A0:                             ; CODE XREF: sub_405630+8B↓j
.text:004056A0                 mov     ecx, [esp+2Ch+var_14]
.text:004056A4                 mov     edx, [esp+2Ch+var_24]
.text:004056A8                 add     ecx, esi
.text:004056AA                 add     edx, esi
.text:004056AC                 mov     ebx, [edi+ecx*4]
.text:004056AF                 mov     eax, [edi+edx*4]
.text:004056B2                 inc     esi
.text:004056B3                 cmp     esi, ebp
.text:004056B5                 mov     [edi+ecx*4], eax
.text:004056B8                 mov     [edi+edx*4], ebx
.text:004056BB                 jl      short loc_4056A0
.text:004056BD
.text:004056BD loc_4056BD:                             ; CODE XREF: sub_405630+60↑j
.text:004056BD                 sub     [esp+2Ch+var_1C], ebp
.text:004056C1
.text:004056C1 loc_4056C1:                             ; CODE XREF: sub_405630+107↓j
.text:004056C1                 mov     eax, [esp+2Ch+var_18]
.text:004056C5                 cmp     [esp+2Ch+var_1C], eax
.text:004056C9                 jle     short loc_4056E0
.text:004056CB                 mov     ebp, [esp+2Ch+var_14]
.text:004056CF                 cmp     eax, ebp
.text:004056D1                 jg      short loc_405670
.text:004056D3                 lea     esi, [esi+0]
.text:004056D9                 lea     edi, [edi+0]
.text:004056E0
.text:004056E0 loc_4056E0:                             ; CODE XREF: sub_405630+34↑j
.text:004056E0                                         ; sub_405630+3B↑j ...
.text:004056E0                 mov     esi, [esp+2Ch+var_28]
.text:004056E4                 mov     ecx, [esp+2Ch+var_18]
.text:004056E8                 mov     eax, [esp+2Ch+var_2C]
.text:004056EB                 mov     edi, [esp+2Ch+arg_4]
.text:004056EF                 mov     edx, [esp+2Ch+var_28]
.text:004056F3                 sub     esi, ecx
.text:004056F5                 add     esi, eax
.text:004056F7                 mov     [edi+20h], esi
.text:004056FA                 mov     [edi+24h], edx
.text:004056FD                 add     esp, 1Ch
.text:00405700                 pop     ebx
.text:00405701                 pop     esi
.text:00405702                 pop     edi
.text:00405703                 pop     ebp
.text:00405704                 retn
.text:00405705 ; ---------------------------------------------------------------------------
.text:00405705
.text:00405705 loc_405705:                             ; CODE XREF: sub_405630+5A↑j
.text:00405705                 xor     esi, esi
.text:00405707                 cmp     esi, [esp+2Ch+var_20]
.text:0040570B                 jge     short loc_40572F
.text:0040570D                 lea     esi, [esi+0]
.text:00405710
.text:00405710 loc_405710:                             ; CODE XREF: sub_405630+FD↓j
.text:00405710                 mov     ebx, [esp+2Ch+var_14]
.text:00405714                 mov     ebp, [esp+2Ch+var_18]
.text:00405718                 add     ebx, esi
.text:0040571A                 add     ebp, esi
.text:0040571C                 mov     edx, [edi+ebx*4]
.text:0040571F                 inc     esi
.text:00405720                 cmp     esi, [esp+2Ch+var_20]
.text:00405724                 mov     ecx, [edi+ebp*4]
.text:00405727                 mov     [edi+ebx*4], ecx
.text:0040572A                 mov     [edi+ebp*4], edx
.text:0040572D                 jl      short loc_405710
.text:0040572F
.text:0040572F loc_40572F:                             ; CODE XREF: sub_405630+DB↑j
.text:0040572F                 mov     esi, [esp+2Ch+var_20]
.text:00405733                 add     [esp+2Ch+var_14], esi
.text:00405737                 jmp     short loc_4056C1
.text:00405737 sub_405630      endp
.text:00405737
.text:00405737 ; ---------------------------------------------------------------------------
.text:00405739                 db 17h dup(90h)
.text:00405750 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00405750                                         ; DATA XREF: .data:Buffer↓o
.text:00405782 ; const char aSSS[]
.text:00405782 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_405A40+50↓o
.text:0040578E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040578E                                         ; DATA XREF: sub_405A40:loc_405AE1↓o
.text:0040579E                 db 12h dup(90h)
.text:004057B0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004057B0                                         ; DATA XREF: sub_405A40+100↓o
.text:004057B0                 db 'ere is NO',0Ah
.text:004057B0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004057B0                 db 'R PURPOSE.',0Ah,0
.text:00405848 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00405848                                         ; DATA XREF: sub_405A40:loc_405B81↓o
.text:0040585F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040585F                                         ; DATA XREF: sub_405A40:loc_405B8D↓o
.text:0040587B                 db 15h dup(90h)
.text:00405890 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00405890                                         ; DATA XREF: sub_405A40:loc_405B99↓o
.text:00405890                 db 'and %s.',0Ah,0
.text:004058B0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004058B0                                         ; DATA XREF: sub_405A40:loc_405BA5↓o
.text:004058B0                 db '%s, and %s.',0Ah,0
.text:004058D4                 db 1Ch dup(90h)
.text:004058F0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004058F0                                         ; DATA XREF: sub_405A40:loc_405BB1↓o
.text:004058F0                 db '%s, %s, and %s.',0Ah,0
.text:00405918                 db 18h dup(90h)
.text:00405930 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00405930                                         ; DATA XREF: sub_405A40:loc_405BBD↓o
.text:00405930                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040595C                 db 14h dup(90h)
.text:00405970 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00405970                                         ; DATA XREF: sub_405A40:loc_405BC9↓o
.text:00405970                 db '%s, %s, %s, %s,',0Ah
.text:00405970                 db 'and %s.',0Ah,0
.text:004059A0                 db 10h dup(90h)
.text:004059B0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004059B0                                         ; DATA XREF: sub_405A40:loc_405BD5↓o
.text:004059B0                 db '%s, %s, %s, %s,',0Ah
.text:004059B0                 db '%s, and %s.',0Ah,0
.text:004059E4                 align 10h
.text:004059F0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:004059F0                                         ; DATA XREF: sub_405A40:def_405AAD↓o
.text:004059F0                 db '%s, %s, %s, %s,',0Ah
.text:004059F0                 db '%s, %s, and others.',0Ah,0
.text:00405A2C ; const char aSS[]
.text:00405A2C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_405A40+1B5↓o
.text:00405A33                 align 10h
.text:00405A40
.text:00405A40 ; =============== S U B R O U T I N E =======================================
.text:00405A40
.text:00405A40
.text:00405A40 ; int __cdecl sub_405A40(FILE *, FILE *, int, int, va_list)
.text:00405A40 sub_405A40      proc near               ; CODE XREF: sub_404500+A5↑p
.text:00405A40                                         ; .text:00405C3A↓p
.text:00405A40
.text:00405A40 Stream          = dword ptr -2Ch
.text:00405A40 Format          = dword ptr -28h
.text:00405A40 ArgList         = dword ptr -24h
.text:00405A40 var_20          = dword ptr -20h
.text:00405A40 var_1C          = dword ptr -1Ch
.text:00405A40 var_14          = dword ptr -14h
.text:00405A40 arg_0           = dword ptr  4
.text:00405A40 arg_4           = dword ptr  8
.text:00405A40 arg_8           = dword ptr  0Ch
.text:00405A40 arg_C           = dword ptr  10h
.text:00405A40 arg_10          = dword ptr  14h
.text:00405A40
.text:00405A40                 push    ebp
.text:00405A41                 push    edi
.text:00405A42                 push    esi
.text:00405A43                 push    ebx
.text:00405A44                 sub     esp, 1Ch
.text:00405A47                 xor     ebx, ebx
.text:00405A49                 mov     edi, [esp+2Ch+arg_10]
.text:00405A4D                 mov     edx, [esp+2Ch+arg_8]
.text:00405A51                 mov     esi, [esp+2Ch+arg_0]
.text:00405A55                 mov     eax, [edi]
.text:00405A57                 mov     ecx, [esp+2Ch+arg_4]
.text:00405A5B                 mov     [esp+2Ch+var_14], edx
.text:00405A5F                 mov     ebp, [esp+2Ch+arg_C]
.text:00405A63                 lea     edx, [edi+4]
.text:00405A66                 test    eax, eax
.text:00405A68                 jz      short loc_405A7C
.text:00405A6A                 lea     esi, [esi+0]
.text:00405A70
.text:00405A70 loc_405A70:                             ; CODE XREF: sub_405A40+3A↓j
.text:00405A70                 mov     eax, edx
.text:00405A72                 inc     ebx
.text:00405A73                 mov     eax, [eax]
.text:00405A75                 add     edx, 4
.text:00405A78                 test    eax, eax
.text:00405A7A                 jnz     short loc_405A70
.text:00405A7C
.text:00405A7C loc_405A7C:                             ; CODE XREF: sub_405A40+28↑j
.text:00405A7C                 test    ecx, ecx
.text:00405A7E                 jz      loc_405BED
.text:00405A84                 mov     [esp+2Ch+var_1C], ebp
.text:00405A88                 mov     edx, [esp+2Ch+var_14]
.text:00405A8C                 mov     [esp+2Ch+ArgList], ecx
.text:00405A90                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00405A98                 mov     [esp+2Ch+var_20], edx
.text:00405A9C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405A9F                 call    fprintf
.text:00405AA4
.text:00405AA4 loc_405AA4:                             ; CODE XREF: sub_405A40+1C9↓j
.text:00405AA4                 cmp     ebx, 9          ; switch 10 cases
.text:00405AA7                 ja      def_405AAD      ; jumptable 00405AAD default case
.text:00405AAD                 jmp     ds:jpt_405AAD[ebx*4] ; switch jump
.text:00405AAD ; ---------------------------------------------------------------------------
.text:00405AB4 jpt_405AAD      dd offset loc_405ADC    ; DATA XREF: sub_405A40+6D↑r
.text:00405AB4                 dd offset loc_405AE1    ; jump table for switch statement
.text:00405AB4                 dd offset loc_405B81
.text:00405AB4                 dd offset loc_405B8D
.text:00405AB4                 dd offset loc_405B99
.text:00405AB4                 dd offset loc_405BA5
.text:00405AB4                 dd offset loc_405BB1
.text:00405AB4                 dd offset loc_405BBD
.text:00405AB4                 dd offset loc_405BC9
.text:00405AB4                 dd offset loc_405BD5
.text:00405ADC ; ---------------------------------------------------------------------------
.text:00405ADC
.text:00405ADC loc_405ADC:                             ; CODE XREF: sub_405A40+6D↑j
.text:00405ADC                                         ; DATA XREF: sub_405A40:jpt_405AAD↑o
.text:00405ADC                 call    abort           ; jumptable 00405AAD case 0
.text:00405AE1 ; ---------------------------------------------------------------------------
.text:00405AE1
.text:00405AE1 loc_405AE1:                             ; CODE XREF: sub_405A40+6D↑j
.text:00405AE1                                         ; DATA XREF: sub_405A40:jpt_405AAD↑o
.text:00405AE1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00405AAD case 1
.text:00405AE8                 nop
.text:00405AE9                 lea     esi, [esi+0]
.text:00405AF0
.text:00405AF0 loc_405AF0:                             ; CODE XREF: sub_405A40+148↓j
.text:00405AF0                                         ; sub_405A40+154↓j ...
.text:00405AF0                 call    ds:__imp_libintl_gettext
.text:00405AF6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00405AFA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405AFD                 mov     [esp+2Ch+Format], eax ; Format
.text:00405B01                 call    vfprintf
.text:00405B06                 mov     ebx, [esi+4]
.text:00405B09                 dec     ebx
.text:00405B0A                 test    ebx, ebx
.text:00405B0C                 mov     [esi+4], ebx
.text:00405B0F                 js      short loc_405B6F
.text:00405B11                 mov     edi, [esi]
.text:00405B13                 mov     byte ptr [edi], 0Ah
.text:00405B16                 inc     dword ptr [esi]
.text:00405B18
.text:00405B18 loc_405B18:                             ; CODE XREF: sub_405A40+13F↓j
.text:00405B18                 mov     [esp+2Ch+Format], esi ; Stream
.text:00405B1C                 mov     edx, Buffer
.text:00405B22                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00405B25                 call    fputs
.text:00405B2A                 mov     ebp, [esi+4]
.text:00405B2D                 dec     ebp
.text:00405B2E                 test    ebp, ebp
.text:00405B30                 mov     [esi+4], ebp
.text:00405B33                 js      short loc_405B5D
.text:00405B35                 mov     ecx, [esi]
.text:00405B37                 mov     byte ptr [ecx], 0Ah
.text:00405B3A                 inc     dword ptr [esi]
.text:00405B3C
.text:00405B3C loc_405B3C:                             ; CODE XREF: sub_405A40+12D↓j
.text:00405B3C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00405B40                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00405B47                 call    ds:__imp_libintl_gettext
.text:00405B4D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00405B51                 add     esp, 1Ch
.text:00405B54                 pop     ebx
.text:00405B55                 pop     esi
.text:00405B56                 pop     edi
.text:00405B57                 pop     ebp
.text:00405B58                 jmp     fputs
.text:00405B5D ; ---------------------------------------------------------------------------
.text:00405B5D
.text:00405B5D loc_405B5D:                             ; CODE XREF: sub_405A40+F3↑j
.text:00405B5D                 mov     [esp+2Ch+Format], esi ; File
.text:00405B61                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00405B68                 call    _flsbuf
.text:00405B6D                 jmp     short loc_405B3C
.text:00405B6F ; ---------------------------------------------------------------------------
.text:00405B6F
.text:00405B6F loc_405B6F:                             ; CODE XREF: sub_405A40+CF↑j
.text:00405B6F                 mov     [esp+2Ch+Format], esi ; File
.text:00405B73                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00405B7A                 call    _flsbuf
.text:00405B7F                 jmp     short loc_405B18
.text:00405B81 ; ---------------------------------------------------------------------------
.text:00405B81
.text:00405B81 loc_405B81:                             ; CODE XREF: sub_405A40+6D↑j
.text:00405B81                                         ; DATA XREF: sub_405A40:jpt_405AAD↑o
.text:00405B81                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00405AAD case 2
.text:00405B88                 jmp     loc_405AF0
.text:00405B8D ; ---------------------------------------------------------------------------
.text:00405B8D
.text:00405B8D loc_405B8D:                             ; CODE XREF: sub_405A40+6D↑j
.text:00405B8D                                         ; DATA XREF: sub_405A40:jpt_405AAD↑o
.text:00405B8D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00405AAD case 3
.text:00405B94                 jmp     loc_405AF0
.text:00405B99 ; ---------------------------------------------------------------------------
.text:00405B99
.text:00405B99 loc_405B99:                             ; CODE XREF: sub_405A40+6D↑j
.text:00405B99                                         ; DATA XREF: sub_405A40:jpt_405AAD↑o
.text:00405B99                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00405AAD case 4
.text:00405BA0                 jmp     loc_405AF0
.text:00405BA5 ; ---------------------------------------------------------------------------
.text:00405BA5
.text:00405BA5 loc_405BA5:                             ; CODE XREF: sub_405A40+6D↑j
.text:00405BA5                                         ; DATA XREF: sub_405A40:jpt_405AAD↑o
.text:00405BA5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00405AAD case 5
.text:00405BAC                 jmp     loc_405AF0
.text:00405BB1 ; ---------------------------------------------------------------------------
.text:00405BB1
.text:00405BB1 loc_405BB1:                             ; CODE XREF: sub_405A40+6D↑j
.text:00405BB1                                         ; DATA XREF: sub_405A40:jpt_405AAD↑o
.text:00405BB1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00405AAD case 6
.text:00405BB8                 jmp     loc_405AF0
.text:00405BBD ; ---------------------------------------------------------------------------
.text:00405BBD
.text:00405BBD loc_405BBD:                             ; CODE XREF: sub_405A40+6D↑j
.text:00405BBD                                         ; DATA XREF: sub_405A40:jpt_405AAD↑o
.text:00405BBD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00405AAD case 7
.text:00405BC4                 jmp     loc_405AF0
.text:00405BC9 ; ---------------------------------------------------------------------------
.text:00405BC9
.text:00405BC9 loc_405BC9:                             ; CODE XREF: sub_405A40+6D↑j
.text:00405BC9                                         ; DATA XREF: sub_405A40:jpt_405AAD↑o
.text:00405BC9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00405AAD case 8
.text:00405BD0                 jmp     loc_405AF0
.text:00405BD5 ; ---------------------------------------------------------------------------
.text:00405BD5
.text:00405BD5 loc_405BD5:                             ; CODE XREF: sub_405A40+6D↑j
.text:00405BD5                                         ; DATA XREF: sub_405A40:jpt_405AAD↑o
.text:00405BD5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00405AAD case 9
.text:00405BDC                 jmp     loc_405AF0
.text:00405BE1 ; ---------------------------------------------------------------------------
.text:00405BE1
.text:00405BE1 def_405AAD:                             ; CODE XREF: sub_405A40+67↑j
.text:00405BE1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00405AAD default case
.text:00405BE8                 jmp     loc_405AF0
.text:00405BED ; ---------------------------------------------------------------------------
.text:00405BED
.text:00405BED loc_405BED:                             ; CODE XREF: sub_405A40+3E↑j
.text:00405BED                 mov     [esp+2Ch+var_20], ebp
.text:00405BF1                 mov     ecx, [esp+2Ch+var_14]
.text:00405BF5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00405BFD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405C00                 mov     [esp+2Ch+ArgList], ecx
.text:00405C04                 call    fprintf
.text:00405C09                 jmp     loc_405AA4
.text:00405C09 sub_405A40      endp
.text:00405C09
.text:00405C09 ; ---------------------------------------------------------------------------
.text:00405C0E                 align 10h
.text:00405C10                 sub     esp, 1Ch
.text:00405C13                 mov     edx, [esp+2Ch]
.text:00405C17                 lea     ecx, [esp+30h]
.text:00405C1B                 mov     [esp+10h], ecx
.text:00405C1F                 mov     ecx, [esp+28h]
.text:00405C23                 mov     [esp+0Ch], edx
.text:00405C27                 mov     edx, [esp+24h]
.text:00405C2B                 mov     [esp+8], ecx
.text:00405C2F                 mov     [esp+4], edx
.text:00405C33                 mov     edx, [esp+20h]
.text:00405C37                 mov     [esp], edx
.text:00405C3A                 call    sub_405A40
.text:00405C3F                 add     esp, 1Ch
.text:00405C42                 retn
.text:00405C42 ; ---------------------------------------------------------------------------
.text:00405C43                 align 10h
.text:00405C50
.text:00405C50 ; =============== S U B R O U T I N E =======================================
.text:00405C50
.text:00405C50
.text:00405C50 ; int __cdecl sub_405C50(int, int, char *, int, int)
.text:00405C50 sub_405C50      proc near               ; CODE XREF: sub_404500+58↑p
.text:00405C50
.text:00405C50 var_1C          = dword ptr -1Ch
.text:00405C50 var_18          = dword ptr -18h
.text:00405C50 var_14          = dword ptr -14h
.text:00405C50 var_10          = dword ptr -10h
.text:00405C50 var_C           = dword ptr -0Ch
.text:00405C50 var_8           = dword ptr -8
.text:00405C50 var_4           = dword ptr -4
.text:00405C50 arg_0           = dword ptr  4
.text:00405C50 arg_4           = dword ptr  8
.text:00405C50 arg_8           = dword ptr  0Ch
.text:00405C50 arg_C           = dword ptr  10h
.text:00405C50 arg_10          = dword ptr  14h
.text:00405C50
.text:00405C50                 sub     esp, 1Ch
.text:00405C53                 mov     edx, [esp+1Ch+arg_C]
.text:00405C57                 mov     [esp+1Ch+var_4], 0 ; int
.text:00405C5F                 mov     ecx, [esp+1Ch+arg_10]
.text:00405C63                 mov     [esp+1Ch+var_8], 0 ; int
.text:00405C6B                 mov     [esp+1Ch+var_10], edx ; int
.text:00405C6F                 mov     edx, [esp+1Ch+arg_4]
.text:00405C73                 mov     [esp+1Ch+var_C], ecx ; int
.text:00405C77                 mov     ecx, [esp+1Ch+arg_8]
.text:00405C7B                 mov     [esp+1Ch+var_18], edx ; int
.text:00405C7F                 mov     edx, [esp+1Ch+arg_0]
.text:00405C83                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00405C87                 mov     [esp+1Ch+var_1C], edx ; int
.text:00405C8A                 call    sub_405510
.text:00405C8F                 add     esp, 1Ch
.text:00405C92                 retn
.text:00405C92 sub_405C50      endp
.text:00405C92
.text:00405C92 ; ---------------------------------------------------------------------------
.text:00405C93                 align 10h
.text:00405CA0                 sub     esp, 2Ch
.text:00405CA3                 mov     edx, [esp+44h]
.text:00405CA7                 mov     dword ptr [esp+18h], 0
.text:00405CAF                 mov     ecx, [esp+40h]
.text:00405CB3                 mov     dword ptr [esp+14h], 0
.text:00405CBB                 mov     [esp+1Ch], edx
.text:00405CBF                 mov     edx, [esp+3Ch]
.text:00405CC3                 mov     [esp+10h], ecx
.text:00405CC7                 mov     ecx, [esp+38h]
.text:00405CCB                 mov     [esp+0Ch], edx
.text:00405CCF                 mov     edx, [esp+34h]
.text:00405CD3                 mov     [esp+8], ecx
.text:00405CD7                 mov     [esp+4], edx
.text:00405CDB                 mov     edx, [esp+30h]
.text:00405CDF                 mov     [esp], edx
.text:00405CE2                 call    sub_404980
.text:00405CE7                 add     esp, 2Ch
.text:00405CEA                 retn
.text:00405CEA ; ---------------------------------------------------------------------------
.text:00405CEB                 align 10h
.text:00405CF0                 sub     esp, 1Ch
.text:00405CF3                 mov     edx, [esp+2Ch]
.text:00405CF7                 mov     dword ptr [esp+18h], 0
.text:00405CFF                 mov     ecx, [esp+30h]
.text:00405D03                 mov     dword ptr [esp+14h], 1
.text:00405D0B                 mov     [esp+0Ch], edx
.text:00405D0F                 mov     edx, [esp+24h]
.text:00405D13                 mov     [esp+10h], ecx
.text:00405D17                 mov     ecx, [esp+28h]
.text:00405D1B                 mov     [esp+4], edx
.text:00405D1F                 mov     edx, [esp+20h]
.text:00405D23                 mov     [esp+8], ecx
.text:00405D27                 mov     [esp], edx
.text:00405D2A                 call    sub_405510
.text:00405D2F                 add     esp, 1Ch
.text:00405D32                 retn
.text:00405D32 ; ---------------------------------------------------------------------------
.text:00405D33                 align 10h
.text:00405D40                 sub     esp, 2Ch
.text:00405D43                 mov     edx, [esp+44h]
.text:00405D47                 mov     dword ptr [esp+18h], 0
.text:00405D4F                 mov     ecx, [esp+40h]
.text:00405D53                 mov     dword ptr [esp+14h], 1
.text:00405D5B                 mov     [esp+1Ch], edx
.text:00405D5F                 mov     edx, [esp+3Ch]
.text:00405D63                 mov     [esp+10h], ecx
.text:00405D67                 mov     ecx, [esp+38h]
.text:00405D6B                 mov     [esp+0Ch], edx
.text:00405D6F                 mov     edx, [esp+34h]
.text:00405D73                 mov     [esp+8], ecx
.text:00405D77                 mov     [esp+4], edx
.text:00405D7B                 mov     edx, [esp+30h]
.text:00405D7F                 mov     [esp], edx
.text:00405D82                 call    sub_404980
.text:00405D87                 add     esp, 2Ch
.text:00405D8A                 retn
.text:00405D8A ; ---------------------------------------------------------------------------
.text:00405D8B                 align 10h
.text:00405D90 aLiteral        db 'literal',0          ; DATA XREF: .text:00405DD0↓o
.text:00405D98 aShell          db 'shell',0            ; DATA XREF: .text:00405DD4↓o
.text:00405D9E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00405DD8↓o
.text:00405DAB aC              db 'c',0                ; DATA XREF: .text:00405DDC↓o
.text:00405DAD aEscape         db 'escape',0           ; DATA XREF: .text:00405DE0↓o
.text:00405DB4 aLocale         db 'locale',0           ; DATA XREF: .text:00405DE4↓o
.text:00405DBB aClocale        db 'clocale',0          ; DATA XREF: .text:00405DE8↓o
.text:00405DC3                 db 8Dh, 0B6h, 4 dup(0)
.text:00405DC9                 db 8Dh, 0BCh, 27h, 4 dup(0)
.text:00405DD0                 dd offset aLiteral      ; "literal"
.text:00405DD4                 dd offset aShell        ; "shell"
.text:00405DD8                 dd offset aShellAlways  ; "shell-always"
.text:00405DDC                 dd offset aC            ; "c"
.text:00405DE0                 dd offset aEscape       ; "escape"
.text:00405DE4                 dd offset aLocale       ; "locale"
.text:00405DE8                 dd offset aClocale      ; "clocale"
.text:00405DEC                 dd 2 dup(0)
.text:00405DF4                 dd 1, 2, 3, 4, 5, 6
.text:00405E0C asc_405E0C:                             ; DATA XREF: sub_405E20+7E↓o
.text:00405E0C                                         ; sub_405E20+A39↓o ...
.text:00405E0C                 text "UTF-16LE", '"',27h,'`'
.text:00405E12                 align 10h
.text:00405E20
.text:00405E20 ; =============== S U B R O U T I N E =======================================
.text:00405E20
.text:00405E20
.text:00405E20 ; int __cdecl sub_405E20(int, int, char *Str, int, int, int)
.text:00405E20 sub_405E20      proc near               ; CODE XREF: sub_405E20+43A↓p
.text:00405E20                                         ; .text:004069E3↓p ...
.text:00405E20
.text:00405E20 C               = dword ptr -4Ch
.text:00405E20 Type            = dword ptr -48h
.text:00405E20 SizeInBytes     = dword ptr -44h
.text:00405E20 State           = dword ptr -40h
.text:00405E20 var_3C          = dword ptr -3Ch
.text:00405E20 var_38          = dword ptr -38h
.text:00405E20 var_34          = dword ptr -34h
.text:00405E20 var_30          = dword ptr -30h
.text:00405E20 var_29          = byte ptr -29h
.text:00405E20 var_28          = dword ptr -28h
.text:00405E20 var_22          = byte ptr -22h
.text:00405E20 var_21          = byte ptr -21h
.text:00405E20 var_20          = dword ptr -20h
.text:00405E20 var_1C          = dword ptr -1Ch
.text:00405E20 var_18          = mbstate_t ptr -18h
.text:00405E20 arg_0           = dword ptr  4
.text:00405E20 arg_4           = dword ptr  8
.text:00405E20 Str             = dword ptr  0Ch
.text:00405E20 arg_C           = dword ptr  10h
.text:00405E20 arg_10          = dword ptr  14h
.text:00405E20 arg_14          = dword ptr  18h
.text:00405E20
.text:00405E20                 push    ebp
.text:00405E21                 push    edi
.text:00405E22                 push    esi
.text:00405E23                 push    ebx
.text:00405E24                 sub     esp, 3Ch
.text:00405E27                 mov     edx, ds:__mb_cur_max
.text:00405E2D                 mov     [esp+4Ch+var_34], 0
.text:00405E35                 mov     [esp+4Ch+var_1C], 0
.text:00405E3D                 cmp     dword ptr [edx], 1
.text:00405E40                 mov     [esp+4Ch+var_20], 0
.text:00405E48                 mov     [esp+4Ch+var_21], 0
.text:00405E4D                 setz    [esp+4Ch+var_22]
.text:00405E52                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00405E57                 ja      short def_405E5D ; jumptable 00405E5D default case, cases 0,1
.text:00405E59                 mov     edx, [esp+4Ch+arg_10]
.text:00405E5D                 jmp     ds:jpt_405E5D[edx*4] ; switch jump
.text:00405E5D ; ---------------------------------------------------------------------------
.text:00405E64 jpt_405E5D      dd offset def_405E5D    ; DATA XREF: sub_405E20+3D↑r
.text:00405E64                 dd offset def_405E5D    ; jump table for switch statement
.text:00405E64                 dd offset loc_4067A5
.text:00405E64                 dd offset loc_405E80
.text:00405E64                 dd offset loc_4067CB
.text:00405E64                 dd offset loc_4067D5
.text:00405E64                 dd offset loc_4067D5
.text:00405E80 ; ---------------------------------------------------------------------------
.text:00405E80
.text:00405E80 loc_405E80:                             ; CODE XREF: sub_405E20+3D↑j
.text:00405E80                                         ; DATA XREF: sub_405E20:jpt_405E5D↑o
.text:00405E80                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00405E5D case 3
.text:00405E84                 cmp     [esp+4Ch+var_34], eax
.text:00405E88                 jnb     short loc_405E91
.text:00405E8A                 mov     ebx, [esp+4Ch+arg_0]
.text:00405E8E                 mov     byte ptr [ebx], 22h ; '"'
.text:00405E91
.text:00405E91 loc_405E91:                             ; CODE XREF: sub_405E20+68↑j
.text:00405E91                 mov     [esp+4Ch+var_34], 1
.text:00405E99                 mov     [esp+4Ch+var_21], 1
.text:00405E9E                 mov     [esp+4Ch+var_1C], offset asc_405E0C ; "\"'`"
.text:00405EA6
.text:00405EA6 loc_405EA6:                             ; CODE XREF: sub_405E20+9A6↓j
.text:00405EA6                 mov     [esp+4Ch+var_20], 1
.text:00405EAE
.text:00405EAE def_405E5D:                             ; CODE XREF: sub_405E20+37↑j
.text:00405EAE                                         ; sub_405E20+3D↑j ...
.text:00405EAE                 xor     ebp, ebp        ; jumptable 00405E5D default case, cases 0,1
.text:00405EB0
.text:00405EB0 loc_405EB0:                             ; CODE XREF: sub_405E20+3DB↓j
.text:00405EB0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405EB5                 jz      loc_406797
.text:00405EBB                 cmp     ebp, [esp+4Ch+arg_C]
.text:00405EBF
.text:00405EBF loc_405EBF:                             ; CODE XREF: sub_405E20+980↓j
.text:00405EBF                 jz      loc_40672E
.text:00405EC5                 cmp     [esp+4Ch+var_21], 0
.text:00405ECA                 jz      short loc_405F10
.text:00405ECC                 mov     esi, [esp+4Ch+var_20]
.text:00405ED0                 test    esi, esi
.text:00405ED2                 jz      short loc_405F10
.text:00405ED4                 mov     ecx, [esp+4Ch+var_20]
.text:00405ED8                 lea     edi, [ecx+ebp]
.text:00405EDB                 cmp     edi, [esp+4Ch+arg_C]
.text:00405EDF                 ja      short loc_405F10
.text:00405EE1                 cld
.text:00405EE2                 mov     ebx, [esp+4Ch+Str]
.text:00405EE6                 mov     edi, [esp+4Ch+var_1C]
.text:00405EEA                 add     ebx, ebp
.text:00405EEC                 mov     esi, ebx
.text:00405EEE                 cmp     ecx, ecx
.text:00405EF0                 repe cmpsb
.text:00405EF2                 jnz     short loc_405F10
.text:00405EF4                 mov     edx, [esp+4Ch+arg_4]
.text:00405EF8                 cmp     [esp+4Ch+var_34], edx
.text:00405EFC                 jnb     short loc_405F0A
.text:00405EFE                 mov     ecx, [esp+4Ch+arg_0]
.text:00405F02                 mov     eax, [esp+4Ch+var_34]
.text:00405F06                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00405F0A
.text:00405F0A loc_405F0A:                             ; CODE XREF: sub_405E20+DC↑j
.text:00405F0A                 inc     [esp+4Ch+var_34]
.text:00405F0E                 mov     esi, esi
.text:00405F10
.text:00405F10 loc_405F10:                             ; CODE XREF: sub_405E20+AA↑j
.text:00405F10                                         ; sub_405E20+B2↑j ...
.text:00405F10                 mov     edi, [esp+4Ch+Str]
.text:00405F14                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00405F19                 movzx   eax, bl
.text:00405F1C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00405F1F                 ja      def_405F25      ; jumptable 00405F25 default case, cases 1-6,14-31,64
.text:00405F25                 jmp     ds:jpt_405F25[eax*4] ; switch jump
.text:00405F25 ; ---------------------------------------------------------------------------
.text:00405F2C jpt_405F25      dd offset loc_406128, offset def_405F25, offset def_405F25
.text:00405F2C                                         ; DATA XREF: sub_405E20+105↑r
.text:00405F2C                 dd offset def_405F25, offset def_405F25, offset def_405F25 ; jump table for switch statement
.text:00405F2C                 dd offset def_405F25, offset loc_406200, offset loc_40621E
.text:00405F2C                 dd offset loc_406222, offset loc_406267, offset loc_40626B
.text:00405F2C                 dd offset loc_40626F, offset loc_406273, offset def_405F25
.text:00405F2C                 dd offset def_405F25, offset def_405F25, offset def_405F25
.text:00405F2C                 dd offset def_405F25, offset def_405F25, offset def_405F25
.text:00405F2C                 dd offset def_405F25, offset def_405F25, offset def_405F25
.text:00405F2C                 dd offset def_405F25, offset def_405F25, offset def_405F25
.text:00405F2C                 dd offset def_405F25, offset def_405F25, offset def_405F25
.text:00405F2C                 dd offset def_405F25, offset def_405F25, offset loc_4066F8
.text:00405F2C                 dd offset loc_4066F8, offset loc_4066F8, offset loc_40671A
.text:00405F2C                 dd offset loc_4066F8, offset def_406322, offset loc_4066F8
.text:00405F2C                 dd offset loc_406277, offset loc_4066F8, offset loc_4066F8
.text:00405F2C                 dd offset loc_4066F8, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset loc_4066F8
.text:00405F2C                 dd offset loc_4066F8, offset loc_4066F8, offset loc_4066F8
.text:00405F2C                 dd offset loc_4062DC, offset def_405F25, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset loc_4066F8, offset loc_4066F1
.text:00405F2C                 dd offset def_406322, offset loc_4066F8, offset def_406322
.text:00405F2C                 dd offset loc_4066F8, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset def_406322, offset def_406322, offset def_406322
.text:00405F2C                 dd offset loc_406708, offset loc_4066F8, offset loc_406708
.text:00405F2C                 dd offset loc_40671A
.text:00406128 ; ---------------------------------------------------------------------------
.text:00406128
.text:00406128 loc_406128:                             ; CODE XREF: sub_405E20+105↑j
.text:00406128                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:00406128                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00405F25 case 0
.text:0040612D                 lea     eax, [ebp+1]
.text:00406130                 jz      loc_4061E0
.text:00406136                 mov     esi, [esp+4Ch+arg_4]
.text:0040613A                 cmp     [esp+4Ch+var_34], esi
.text:0040613E                 jnb     short loc_40614C
.text:00406140                 mov     eax, [esp+4Ch+arg_0]
.text:00406144                 mov     ebx, [esp+4Ch+var_34]
.text:00406148                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040614C
.text:0040614C loc_40614C:                             ; CODE XREF: sub_405E20+31E↑j
.text:0040614C                 inc     [esp+4Ch+var_34]
.text:00406150                 mov     edx, [esp+4Ch+arg_4]
.text:00406154                 cmp     [esp+4Ch+var_34], edx
.text:00406158                 jnb     short loc_406166
.text:0040615A                 mov     edi, [esp+4Ch+arg_0]
.text:0040615E                 mov     ecx, [esp+4Ch+var_34]
.text:00406162                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00406166
.text:00406166 loc_406166:                             ; CODE XREF: sub_405E20+338↑j
.text:00406166                 inc     [esp+4Ch+var_34]
.text:0040616A                 mov     esi, [esp+4Ch+arg_4]
.text:0040616E                 cmp     [esp+4Ch+var_34], esi
.text:00406172                 jnb     short loc_406180
.text:00406174                 mov     ebx, [esp+4Ch+arg_0]
.text:00406178                 mov     eax, [esp+4Ch+var_34]
.text:0040617C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00406180
.text:00406180 loc_406180:                             ; CODE XREF: sub_405E20+352↑j
.text:00406180                 inc     [esp+4Ch+var_34]
.text:00406184                 mov     bl, 30h ; '0'
.text:00406186                 lea     esi, [esi+0]
.text:00406189                 lea     edi, [edi+0]
.text:00406190
.text:00406190 def_406322:                             ; CODE XREF: sub_405E20+105↑j
.text:00406190                                         ; sub_405E20+463↓j ...
.text:00406190                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00405F25 cases 37,43-58,65-90,93,95,97-122
.text:00406190                                         ; jumptable 00406322 default case, cases 34-38,42-44,46,48-59
.text:00406195                 lea     eax, [ebp+1]
.text:00406198                 jz      short loc_4061E0
.text:0040619A                 mov     cl, bl
.text:0040619C                 mov     edi, [esp+4Ch+arg_14]
.text:004061A0                 mov     esi, 1
.text:004061A5                 shr     cl, 5
.text:004061A8                 movzx   edx, cl
.text:004061AB                 mov     ecx, ebx
.text:004061AD                 and     ecx, 1Fh
.text:004061B0                 shl     esi, cl
.text:004061B2                 test    [edi+edx*4+4], esi
.text:004061B6                 jz      short loc_4061D2
.text:004061B8
.text:004061B8 loc_4061B8:                             ; CODE XREF: sub_405E20+3FC↓j
.text:004061B8                 mov     edx, [esp+4Ch+arg_4]
.text:004061BC                 cmp     [esp+4Ch+var_34], edx
.text:004061C0                 jnb     short loc_4061CE
.text:004061C2                 mov     edi, [esp+4Ch+arg_0]
.text:004061C6                 mov     esi, [esp+4Ch+var_34]
.text:004061CA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004061CE
.text:004061CE loc_4061CE:                             ; CODE XREF: sub_405E20+3A0↑j
.text:004061CE                 inc     [esp+4Ch+var_34]
.text:004061D2
.text:004061D2 loc_4061D2:                             ; CODE XREF: sub_405E20+396↑j
.text:004061D2                 lea     eax, [ebp+1]
.text:004061D5                 lea     esi, [esi+0]
.text:004061D9                 lea     edi, [edi+0]
.text:004061E0
.text:004061E0 loc_4061E0:                             ; CODE XREF: sub_405E20+310↑j
.text:004061E0                                         ; sub_405E20+378↑j ...
.text:004061E0                 mov     ebp, [esp+4Ch+arg_4]
.text:004061E4                 cmp     [esp+4Ch+var_34], ebp
.text:004061E8                 jnb     short loc_4061F5
.text:004061EA                 mov     edx, [esp+4Ch+arg_0]
.text:004061EE                 mov     ecx, [esp+4Ch+var_34]
.text:004061F2                 mov     [ecx+edx], bl
.text:004061F5
.text:004061F5 loc_4061F5:                             ; CODE XREF: sub_405E20+3C8↑j
.text:004061F5                 inc     [esp+4Ch+var_34]
.text:004061F9                 mov     ebp, eax
.text:004061FB                 jmp     loc_405EB0
.text:00406200 ; ---------------------------------------------------------------------------
.text:00406200
.text:00406200 loc_406200:                             ; CODE XREF: sub_405E20+105↑j
.text:00406200                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:00406200                 mov     dl, 61h ; 'a'   ; jumptable 00405F25 case 7
.text:00406202                 lea     esi, [esi+0]
.text:00406209                 lea     edi, [edi+0]
.text:00406210
.text:00406210 loc_406210:                             ; CODE XREF: sub_405E20+400↓j
.text:00406210                                         ; sub_405E20+409↓j ...
.text:00406210                 cmp     [esp+4Ch+var_21], 0
.text:00406215                 lea     eax, [ebp+1]
.text:00406218                 jz      short loc_4061E0
.text:0040621A                 mov     bl, dl
.text:0040621C                 jmp     short loc_4061B8
.text:0040621E ; ---------------------------------------------------------------------------
.text:0040621E
.text:0040621E loc_40621E:                             ; CODE XREF: sub_405E20+105↑j
.text:0040621E                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:0040621E                 mov     dl, 62h ; 'b'   ; jumptable 00405F25 case 8
.text:00406220                 jmp     short loc_406210
.text:00406222 ; ---------------------------------------------------------------------------
.text:00406222
.text:00406222 loc_406222:                             ; CODE XREF: sub_405E20+105↑j
.text:00406222                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:00406222                 mov     dl, 74h ; 't'   ; jumptable 00405F25 case 9
.text:00406224
.text:00406224 loc_406224:                             ; CODE XREF: sub_405E20+449↓j
.text:00406224                                         ; sub_405E20+455↓j ...
.text:00406224                 cmp     [esp+4Ch+arg_10], 1
.text:00406229                 jnz     short loc_406210
.text:0040622B
.text:0040622B loc_40622B:                             ; CODE XREF: sub_405E20+45C↓j
.text:0040622B                                         ; sub_405E20+4C1↓j ...
.text:0040622B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004065F2 cases 91,92,94,96,124
.text:00406233                 mov     eax, [esp+4Ch+arg_14]
.text:00406237                 mov     edx, [esp+4Ch+arg_C]
.text:0040623B                 mov     ecx, [esp+4Ch+Str]
.text:0040623F                 mov     ebx, [esp+4Ch+arg_4]
.text:00406243                 mov     [esp+4Ch+var_38], eax ; int
.text:00406247                 mov     ebp, [esp+4Ch+arg_0]
.text:0040624B                 mov     [esp+4Ch+State], edx ; int
.text:0040624F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00406253                 mov     [esp+4Ch+Type], ebx ; int
.text:00406257                 mov     [esp+4Ch+C], ebp ; int
.text:0040625A                 call    sub_405E20
.text:0040625F
.text:0040625F loc_40625F:                             ; CODE XREF: sub_405E20+972↓j
.text:0040625F                 add     esp, 3Ch
.text:00406262                 pop     ebx
.text:00406263                 pop     esi
.text:00406264                 pop     edi
.text:00406265                 pop     ebp
.text:00406266                 retn
.text:00406267 ; ---------------------------------------------------------------------------
.text:00406267
.text:00406267 loc_406267:                             ; CODE XREF: sub_405E20+105↑j
.text:00406267                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:00406267                 mov     dl, 6Eh ; 'n'   ; jumptable 00405F25 case 10
.text:00406269                 jmp     short loc_406224
.text:0040626B ; ---------------------------------------------------------------------------
.text:0040626B
.text:0040626B loc_40626B:                             ; CODE XREF: sub_405E20+105↑j
.text:0040626B                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:0040626B                 mov     dl, 76h ; 'v'   ; jumptable 00405F25 case 11
.text:0040626D                 jmp     short loc_406210
.text:0040626F ; ---------------------------------------------------------------------------
.text:0040626F
.text:0040626F loc_40626F:                             ; CODE XREF: sub_405E20+105↑j
.text:0040626F                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:0040626F                 mov     dl, 66h ; 'f'   ; jumptable 00405F25 case 12
.text:00406271                 jmp     short loc_406210
.text:00406273 ; ---------------------------------------------------------------------------
.text:00406273
.text:00406273 loc_406273:                             ; CODE XREF: sub_405E20+105↑j
.text:00406273                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:00406273                 mov     dl, 72h ; 'r'   ; jumptable 00405F25 case 13
.text:00406275                 jmp     short loc_406224
.text:00406277 ; ---------------------------------------------------------------------------
.text:00406277
.text:00406277 loc_406277:                             ; CODE XREF: sub_405E20+105↑j
.text:00406277                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:00406277                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405F25 case 39
.text:0040627C                 jz      short loc_40622B ; jumptable 004065F2 cases 91,92,94,96,124
.text:0040627E                 cmp     [esp+4Ch+arg_10], 2
.text:00406283                 jnz     def_406322      ; jumptable 00405F25 cases 37,43-58,65-90,93,95,97-122
.text:00406283                                         ; jumptable 00406322 default case, cases 34-38,42-44,46,48-59
.text:00406289                 mov     edx, [esp+4Ch+arg_4]
.text:0040628D                 cmp     [esp+4Ch+var_34], edx
.text:00406291                 jnb     short loc_40629F
.text:00406293                 mov     ecx, [esp+4Ch+arg_0]
.text:00406297                 mov     edi, [esp+4Ch+var_34]
.text:0040629B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040629F
.text:0040629F loc_40629F:                             ; CODE XREF: sub_405E20+471↑j
.text:0040629F                 inc     [esp+4Ch+var_34]
.text:004062A3                 mov     eax, [esp+4Ch+arg_4]
.text:004062A7                 cmp     [esp+4Ch+var_34], eax
.text:004062AB                 jnb     short loc_4062B9
.text:004062AD                 mov     esi, [esp+4Ch+arg_0]
.text:004062B1                 mov     edx, [esp+4Ch+var_34]
.text:004062B5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004062B9
.text:004062B9 loc_4062B9:                             ; CODE XREF: sub_405E20+48B↑j
.text:004062B9                 inc     [esp+4Ch+var_34]
.text:004062BD                 mov     edi, [esp+4Ch+arg_4]
.text:004062C1                 cmp     [esp+4Ch+var_34], edi
.text:004062C5                 jnb     short loc_4062D3
.text:004062C7                 mov     ecx, [esp+4Ch+arg_0]
.text:004062CB                 mov     eax, [esp+4Ch+var_34]
.text:004062CF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004062D3
.text:004062D3 loc_4062D3:                             ; CODE XREF: sub_405E20+4A5↑j
.text:004062D3                                         ; sub_405E20+5C4↓j ...
.text:004062D3                 inc     [esp+4Ch+var_34]
.text:004062D7                 jmp     def_406322      ; jumptable 00405F25 cases 37,43-58,65-90,93,95,97-122
.text:004062D7                                         ; jumptable 00406322 default case, cases 34-38,42-44,46,48-59
.text:004062DC ; ---------------------------------------------------------------------------
.text:004062DC
.text:004062DC loc_4062DC:                             ; CODE XREF: sub_405E20+105↑j
.text:004062DC                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:004062DC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405F25 case 63
.text:004062E1                 jz      loc_40622B      ; jumptable 004065F2 cases 91,92,94,96,124
.text:004062E7                 cmp     [esp+4Ch+arg_10], 3
.text:004062EC                 jnz     def_406322      ; jumptable 00405F25 cases 37,43-58,65-90,93,95,97-122
.text:004062EC                                         ; jumptable 00406322 default case, cases 34-38,42-44,46,48-59
.text:004062F2                 lea     edx, [ebp+2]
.text:004062F5                 cmp     edx, [esp+4Ch+arg_C]
.text:004062F9                 jnb     def_406322      ; jumptable 00405F25 cases 37,43-58,65-90,93,95,97-122
.text:004062F9                                         ; jumptable 00406322 default case, cases 34-38,42-44,46,48-59
.text:004062FF                 mov     esi, [esp+4Ch+Str]
.text:00406303                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00406308                 jnz     def_406322      ; jumptable 00405F25 cases 37,43-58,65-90,93,95,97-122
.text:00406308                                         ; jumptable 00406322 default case, cases 34-38,42-44,46,48-59
.text:0040630E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00406313                 movsx   eax, cl
.text:00406316                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00406319                 cmp     eax, 1Dh
.text:0040631C                 ja      def_406322      ; jumptable 00405F25 cases 37,43-58,65-90,93,95,97-122
.text:0040631C                                         ; jumptable 00406322 default case, cases 34-38,42-44,46,48-59
.text:00406322                 jmp     ds:jpt_406322[eax*4] ; switch jump
.text:00406322 ; ---------------------------------------------------------------------------
.text:00406329                 align 4
.text:0040632C jpt_406322      dd offset loc_4063A4    ; DATA XREF: sub_405E20+502↑r
.text:0040632C                 dd offset def_406322    ; jump table for switch statement
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset loc_4063A4
.text:0040632C                 dd offset loc_4063A4
.text:0040632C                 dd offset loc_4063A4
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset loc_4063A4
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset loc_4063A4
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset def_406322
.text:0040632C                 dd offset loc_4063A4
.text:0040632C                 dd offset loc_4063A4
.text:0040632C                 dd offset loc_4063A4
.text:004063A4 ; ---------------------------------------------------------------------------
.text:004063A4
.text:004063A4 loc_4063A4:                             ; CODE XREF: sub_405E20+502↑j
.text:004063A4                                         ; DATA XREF: sub_405E20:jpt_406322↑o
.text:004063A4                 mov     ebp, edx        ; jumptable 00406322 cases 33,39-41,45,47,60-62
.text:004063A6                 mov     bl, cl
.text:004063A8                 mov     edx, [esp+4Ch+arg_4]
.text:004063AC                 cmp     [esp+4Ch+var_34], edx
.text:004063B0                 jnb     short loc_4063BE
.text:004063B2                 mov     ecx, [esp+4Ch+arg_0]
.text:004063B6                 mov     edi, [esp+4Ch+var_34]
.text:004063BA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004063BE
.text:004063BE loc_4063BE:                             ; CODE XREF: sub_405E20+590↑j
.text:004063BE                 inc     [esp+4Ch+var_34]
.text:004063C2                 mov     eax, [esp+4Ch+arg_4]
.text:004063C6                 cmp     [esp+4Ch+var_34], eax
.text:004063CA                 jnb     short loc_4063D8
.text:004063CC                 mov     edx, [esp+4Ch+arg_0]
.text:004063D0                 mov     esi, [esp+4Ch+var_34]
.text:004063D4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004063D8
.text:004063D8 loc_4063D8:                             ; CODE XREF: sub_405E20+5AA↑j
.text:004063D8                 inc     [esp+4Ch+var_34]
.text:004063DC                 mov     edi, [esp+4Ch+arg_4]
.text:004063E0                 cmp     [esp+4Ch+var_34], edi
.text:004063E4                 jnb     loc_4062D3
.text:004063EA                 mov     eax, [esp+4Ch+arg_0]
.text:004063EE                 mov     ecx, [esp+4Ch+var_34]
.text:004063F2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004063F6                 jmp     loc_4062D3
.text:004063F6 ; ---------------------------------------------------------------------------
.text:004063FB                 align 10h
.text:00406400
.text:00406400 def_405F25:                             ; CODE XREF: sub_405E20+FF↑j
.text:00406400                                         ; sub_405E20+105↑j
.text:00406400                                         ; DATA XREF: ...
.text:00406400                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00405F25 default case, cases 1-6,14-31,64
.text:00406405                 jz      loc_406530
.text:0040640B                 mov     [esp+4Ch+var_28], 1
.text:00406413                 mov     esi, ds:__mb_cur_max
.text:00406419                 movzx   edx, bl
.text:0040641C                 cmp     dword ptr [esi], 1
.text:0040641F                 jz      loc_406514
.text:00406425                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040642D                 mov     [esp+4Ch+C], edx ; C
.text:00406430                 call    _isctype
.text:00406435
.text:00406435 loc_406435:                             ; CODE XREF: sub_405E20+705↓j
.text:00406435                 test    eax, eax
.text:00406437                 setnz   [esp+4Ch+var_29]
.text:0040643C
.text:0040643C loc_40643C:                             ; CODE XREF: sub_405E20+7A5↓j
.text:0040643C                 cmp     [esp+4Ch+var_21], 0
.text:00406441                 lea     eax, [ebp+1]
.text:00406444                 jz      loc_4061E0
.text:0040644A                 cmp     [esp+4Ch+var_29], 0
.text:0040644F                 jnz     def_406322      ; jumptable 00405F25 cases 37,43-58,65-90,93,95,97-122
.text:0040644F                                         ; jumptable 00406322 default case, cases 34-38,42-44,46,48-59
.text:00406455
.text:00406455 loc_406455:                             ; CODE XREF: sub_405E20+7AB↓j
.text:00406455                 mov     eax, [esp+4Ch+var_28]
.text:00406459                 lea     edx, [eax+ebp]
.text:0040645C                 lea     esi, [esi+0]
.text:00406460
.text:00406460 loc_406460:                             ; CODE XREF: sub_405E20+6EF↓j
.text:00406460                 cmp     [esp+4Ch+var_21], 0
.text:00406465                 jz      short loc_4064E0
.text:00406467                 cmp     [esp+4Ch+var_29], 0
.text:0040646C                 jnz     short loc_4064E0
.text:0040646E                 mov     edi, [esp+4Ch+arg_4]
.text:00406472                 cmp     [esp+4Ch+var_34], edi
.text:00406476                 jnb     short loc_406484
.text:00406478                 mov     esi, [esp+4Ch+arg_0]
.text:0040647C                 mov     eax, [esp+4Ch+var_34]
.text:00406480                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00406484
.text:00406484 loc_406484:                             ; CODE XREF: sub_405E20+656↑j
.text:00406484                 inc     [esp+4Ch+var_34]
.text:00406488                 mov     ecx, [esp+4Ch+arg_4]
.text:0040648C                 cmp     [esp+4Ch+var_34], ecx
.text:00406490                 jnb     short loc_4064A5
.text:00406492                 mov     cl, bl
.text:00406494                 mov     esi, [esp+4Ch+arg_0]
.text:00406498                 mov     edi, [esp+4Ch+var_34]
.text:0040649C                 shr     cl, 6
.text:0040649F                 add     cl, 30h ; '0'
.text:004064A2                 mov     [edi+esi], cl
.text:004064A5
.text:004064A5 loc_4064A5:                             ; CODE XREF: sub_405E20+670↑j
.text:004064A5                 inc     [esp+4Ch+var_34]
.text:004064A9                 mov     edi, [esp+4Ch+arg_4]
.text:004064AD                 cmp     [esp+4Ch+var_34], edi
.text:004064B1                 jnb     short loc_4064C9
.text:004064B3                 mov     cl, bl
.text:004064B5                 mov     esi, [esp+4Ch+arg_0]
.text:004064B9                 shr     cl, 3
.text:004064BC                 mov     edi, [esp+4Ch+var_34]
.text:004064C0                 and     cl, 7
.text:004064C3                 add     cl, 30h ; '0'
.text:004064C6                 mov     [edi+esi], cl
.text:004064C9
.text:004064C9 loc_4064C9:                             ; CODE XREF: sub_405E20+691↑j
.text:004064C9                 inc     [esp+4Ch+var_34]
.text:004064CD                 and     bl, 7
.text:004064D0                 add     bl, 30h ; '0'
.text:004064D3                 lea     esi, [esi+0]
.text:004064D9                 lea     edi, [edi+0]
.text:004064E0
.text:004064E0 loc_4064E0:                             ; CODE XREF: sub_405E20+645↑j
.text:004064E0                                         ; sub_405E20+64C↑j
.text:004064E0                 lea     eax, [ebp+1]
.text:004064E3                 cmp     edx, eax
.text:004064E5                 jbe     loc_4061E0
.text:004064EB                 mov     ebp, [esp+4Ch+arg_4]
.text:004064EF                 cmp     [esp+4Ch+var_34], ebp
.text:004064F3                 jnb     short loc_406500
.text:004064F5                 mov     ecx, [esp+4Ch+arg_0]
.text:004064F9                 mov     edi, [esp+4Ch+var_34]
.text:004064FD                 mov     [edi+ecx], bl
.text:00406500
.text:00406500 loc_406500:                             ; CODE XREF: sub_405E20+6D3↑j
.text:00406500                 inc     [esp+4Ch+var_34]
.text:00406504                 mov     ebp, eax
.text:00406506                 mov     eax, [esp+4Ch+Str]
.text:0040650A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040650F                 jmp     loc_406460
.text:00406514 ; ---------------------------------------------------------------------------
.text:00406514
.text:00406514 loc_406514:                             ; CODE XREF: sub_405E20+5FF↑j
.text:00406514                 mov     ecx, ds:_pctype
.text:0040651A                 mov     edi, [ecx]
.text:0040651C                 movzx   eax, word ptr [edi+edx*2]
.text:00406520                 and     eax, 157h
.text:00406525                 jmp     loc_406435
.text:00406525 ; ---------------------------------------------------------------------------
.text:0040652A                 align 10h
.text:00406530
.text:00406530 loc_406530:                             ; CODE XREF: sub_405E20+5E5↑j
.text:00406530                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00406535                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040653D                 mov     [esp+4Ch+var_28], 0
.text:00406545                 mov     [esp+4Ch+var_29], 1
.text:0040654A                 jz      loc_4066DC
.text:00406550
.text:00406550 loc_406550:                             ; CODE XREF: sub_405E20+8CC↓j
.text:00406550                 mov     ecx, [esp+4Ch+arg_C]
.text:00406554                 lea     edx, [esp+4Ch+var_18]
.text:00406558                 mov     edi, [esp+4Ch+Str]
.text:0040655C                 mov     [esp+4Ch+State], edx ; State
.text:00406560                 lea     esi, [esp+4Ch+var_18._State]
.text:00406564                 sub     ecx, ebp
.text:00406566                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040656A                 add     edi, ebp
.text:0040656C                 mov     [esp+4Ch+var_30], edi
.text:00406570                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00406574                 mov     [esp+4Ch+C], esi ; DstCh
.text:00406577                 call    mbrtowc
.text:0040657C                 test    eax, eax
.text:0040657E                 mov     edi, eax
.text:00406580                 jz      short loc_4065C0
.text:00406582                 cmp     eax, 0FFFFFFFFh
.text:00406585                 jz      loc_4066D2
.text:0040658B                 cmp     eax, 0FFFFFFFEh
.text:0040658E                 jz      loc_406692
.text:00406594                 cmp     [esp+4Ch+arg_10], 1
.text:00406599                 jz      short loc_4065D0
.text:0040659B
.text:0040659B loc_40659B:                             ; CODE XREF: sub_405E20+7B9↓j
.text:0040659B                                         ; sub_405E20+86D↓j
.text:0040659B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004065A0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004065A8                 mov     [esp+4Ch+C], ecx ; C
.text:004065AB                 call    iswctype
.text:004065B0                 test    eax, eax
.text:004065B2                 jnz     short loc_4065B9
.text:004065B4                 mov     [esp+4Ch+var_29], 0
.text:004065B9
.text:004065B9 loc_4065B9:                             ; CODE XREF: sub_405E20+792↑j
.text:004065B9                 mov     [esp+4Ch+var_28], edi
.text:004065BD                 lea     esi, [esi+0]
.text:004065C0
.text:004065C0 loc_4065C0:                             ; CODE XREF: sub_405E20+760↑j
.text:004065C0                                         ; sub_405E20+87B↓j ...
.text:004065C0                 cmp     [esp+4Ch+var_28], 1
.text:004065C5                 jbe     loc_40643C
.text:004065CB                 jmp     loc_406455
.text:004065D0 ; ---------------------------------------------------------------------------
.text:004065D0
.text:004065D0 loc_4065D0:                             ; CODE XREF: sub_405E20+779↑j
.text:004065D0                 cmp     [esp+4Ch+arg_10], eax
.text:004065D4                 mov     edx, 1
.text:004065D9                 jnb     short loc_40659B
.text:004065DB
.text:004065DB loc_4065DB:                             ; CODE XREF: sub_405E20+867↓j
.text:004065DB                 mov     ecx, [esp+4Ch+Str]
.text:004065DF                 lea     esi, [edx+ebp]
.text:004065E2                 movsx   eax, byte ptr [esi+ecx]
.text:004065E6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004065E9                 cmp     eax, 21h
.text:004065EC                 ja      def_4065F2      ; jumptable 004065F2 default case, cases 93,95,97-123
.text:004065F2                 jmp     ds:jpt_4065F2[eax*4] ; switch jump
.text:004065F2 ; ---------------------------------------------------------------------------
.text:004065F9                 align 4
.text:004065FC jpt_4065F2      dd offset loc_40622B    ; DATA XREF: sub_405E20+7D2↑r
.text:004065FC                 dd offset loc_40622B    ; jump table for switch statement
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset loc_40622B
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset loc_40622B
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset def_4065F2
.text:004065FC                 dd offset loc_40622B
.text:00406684 ; ---------------------------------------------------------------------------
.text:00406684
.text:00406684 def_4065F2:                             ; CODE XREF: sub_405E20+7CC↑j
.text:00406684                                         ; sub_405E20+7D2↑j
.text:00406684                                         ; DATA XREF: ...
.text:00406684                 inc     edx             ; jumptable 004065F2 default case, cases 93,95,97-123
.text:00406685                 cmp     edx, edi
.text:00406687                 jb      loc_4065DB
.text:0040668D                 jmp     loc_40659B
.text:00406692 ; ---------------------------------------------------------------------------
.text:00406692
.text:00406692 loc_406692:                             ; CODE XREF: sub_405E20+76E↑j
.text:00406692                 cmp     ebp, [esp+4Ch+arg_C]
.text:00406696                 mov     [esp+4Ch+var_29], 0
.text:0040669B                 jnb     loc_4065C0
.text:004066A1                 mov     eax, [esp+4Ch+var_30]
.text:004066A5                 cmp     byte ptr [eax], 0
.text:004066A8                 jz      loc_4065C0
.text:004066AE
.text:004066AE loc_4066AE:                             ; CODE XREF: sub_405E20+8AB↓j
.text:004066AE                 inc     [esp+4Ch+var_28]
.text:004066B2                 mov     esi, [esp+4Ch+var_28]
.text:004066B6                 lea     eax, [esi+ebp]
.text:004066B9                 cmp     eax, [esp+4Ch+arg_C]
.text:004066BD                 jnb     loc_4065C0
.text:004066C3                 mov     edi, [esp+4Ch+Str]
.text:004066C7                 cmp     byte ptr [eax+edi], 0
.text:004066CB                 jnz     short loc_4066AE
.text:004066CD                 jmp     loc_4065C0
.text:004066D2 ; ---------------------------------------------------------------------------
.text:004066D2
.text:004066D2 loc_4066D2:                             ; CODE XREF: sub_405E20+765↑j
.text:004066D2                 mov     [esp+4Ch+var_29], 0
.text:004066D7                 jmp     loc_4065C0
.text:004066DC ; ---------------------------------------------------------------------------
.text:004066DC
.text:004066DC loc_4066DC:                             ; CODE XREF: sub_405E20+72A↑j
.text:004066DC                 mov     edx, [esp+4Ch+Str]
.text:004066E0                 mov     [esp+4Ch+C], edx ; Str
.text:004066E3                 call    strlen
.text:004066E8                 mov     [esp+4Ch+arg_C], eax
.text:004066EC                 jmp     loc_406550
.text:004066F1 ; ---------------------------------------------------------------------------
.text:004066F1
.text:004066F1 loc_4066F1:                             ; CODE XREF: sub_405E20+105↑j
.text:004066F1                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:004066F1                 mov     dl, bl          ; jumptable 00405F25 case 92
.text:004066F3                 jmp     loc_406224
.text:004066F8 ; ---------------------------------------------------------------------------
.text:004066F8
.text:004066F8 loc_4066F8:                             ; CODE XREF: sub_405E20+105↑j
.text:004066F8                                         ; sub_405E20+902↓j
.text:004066F8                                         ; DATA XREF: ...
.text:004066F8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405F25 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004066FD                 jnz     def_406322      ; jumptable 00405F25 cases 37,43-58,65-90,93,95,97-122
.text:004066FD                                         ; jumptable 00406322 default case, cases 34-38,42-44,46,48-59
.text:00406703                 jmp     loc_40622B      ; jumptable 004065F2 cases 91,92,94,96,124
.text:00406708 ; ---------------------------------------------------------------------------
.text:00406708
.text:00406708 loc_406708:                             ; CODE XREF: sub_405E20+105↑j
.text:00406708                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:00406708                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00405F25 cases 123,125
.text:0040670D                 jz      short loc_406724
.text:0040670F                 cmp     [esp+4Ch+arg_C], 1
.text:00406714
.text:00406714 loc_406714:                             ; CODE XREF: sub_405E20+90C↓j
.text:00406714                 jnz     def_406322      ; jumptable 00405F25 cases 37,43-58,65-90,93,95,97-122
.text:00406714                                         ; jumptable 00406322 default case, cases 34-38,42-44,46,48-59
.text:0040671A
.text:0040671A loc_40671A:                             ; CODE XREF: sub_405E20+105↑j
.text:0040671A                                         ; DATA XREF: sub_405E20:jpt_405F25↑o
.text:0040671A                 test    ebp, ebp        ; jumptable 00405F25 cases 35,126
.text:0040671C                 jnz     def_406322      ; jumptable 00405F25 cases 37,43-58,65-90,93,95,97-122
.text:0040671C                                         ; jumptable 00406322 default case, cases 34-38,42-44,46,48-59
.text:00406722                 jmp     short loc_4066F8 ; jumptable 00405F25 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00406724 ; ---------------------------------------------------------------------------
.text:00406724
.text:00406724 loc_406724:                             ; CODE XREF: sub_405E20+8ED↑j
.text:00406724                 mov     esi, [esp+4Ch+Str]
.text:00406728                 cmp     byte ptr [esi+1], 0
.text:0040672C                 jmp     short loc_406714
.text:0040672E ; ---------------------------------------------------------------------------
.text:0040672E
.text:0040672E loc_40672E:                             ; CODE XREF: sub_405E20:loc_405EBF↑j
.text:0040672E                 test    ebp, ebp
.text:00406730                 jnz     short loc_40673D
.text:00406732                 cmp     [esp+4Ch+arg_10], 1
.text:00406737                 jz      loc_40622B      ; jumptable 004065F2 cases 91,92,94,96,124
.text:0040673D
.text:0040673D loc_40673D:                             ; CODE XREF: sub_405E20+910↑j
.text:0040673D                 mov     esi, [esp+4Ch+var_1C]
.text:00406741                 test    esi, esi
.text:00406743                 jz      short loc_406778
.text:00406745                 mov     edi, [esp+4Ch+var_1C]
.text:00406749                 movzx   eax, byte ptr [edi]
.text:0040674C                 test    al, al
.text:0040674E                 jz      short loc_406778
.text:00406750
.text:00406750 loc_406750:                             ; CODE XREF: sub_405E20+956↓j
.text:00406750                 mov     ebp, [esp+4Ch+arg_4]
.text:00406754                 cmp     [esp+4Ch+var_34], ebp
.text:00406758                 jnb     short loc_406765
.text:0040675A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040675E                 mov     ebx, [esp+4Ch+var_34]
.text:00406762                 mov     [ebx+ecx], al
.text:00406765
.text:00406765 loc_406765:                             ; CODE XREF: sub_405E20+938↑j
.text:00406765                 inc     [esp+4Ch+var_1C]
.text:00406769                 inc     [esp+4Ch+var_34]
.text:0040676D                 mov     edx, [esp+4Ch+var_1C]
.text:00406771                 movzx   eax, byte ptr [edx]
.text:00406774                 test    al, al
.text:00406776                 jnz     short loc_406750
.text:00406778
.text:00406778 loc_406778:                             ; CODE XREF: sub_405E20+923↑j
.text:00406778                                         ; sub_405E20+92E↑j
.text:00406778                 mov     eax, [esp+4Ch+arg_4]
.text:0040677C                 cmp     [esp+4Ch+var_34], eax
.text:00406780                 jnb     short loc_40678E
.text:00406782                 mov     edi, [esp+4Ch+arg_0]
.text:00406786                 mov     esi, [esp+4Ch+var_34]
.text:0040678A                 mov     byte ptr [esi+edi], 0
.text:0040678E
.text:0040678E loc_40678E:                             ; CODE XREF: sub_405E20+960↑j
.text:0040678E                 mov     eax, [esp+4Ch+var_34]
.text:00406792                 jmp     loc_40625F
.text:00406797 ; ---------------------------------------------------------------------------
.text:00406797
.text:00406797 loc_406797:                             ; CODE XREF: sub_405E20+95↑j
.text:00406797                 mov     ebx, [esp+4Ch+Str]
.text:0040679B                 cmp     byte ptr [ebp+ebx+0], 0
.text:004067A0                 jmp     loc_405EBF
.text:004067A5 ; ---------------------------------------------------------------------------
.text:004067A5
.text:004067A5 loc_4067A5:                             ; CODE XREF: sub_405E20+3D↑j
.text:004067A5                                         ; DATA XREF: sub_405E20:jpt_405E5D↑o
.text:004067A5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00405E5D case 2
.text:004067A9                 cmp     [esp+4Ch+var_34], edx
.text:004067AD                 jnb     short loc_4067B6
.text:004067AF                 mov     ecx, [esp+4Ch+arg_0]
.text:004067B3                 mov     byte ptr [ecx], 27h ; '''
.text:004067B6
.text:004067B6 loc_4067B6:                             ; CODE XREF: sub_405E20+98D↑j
.text:004067B6                 mov     [esp+4Ch+var_34], 1
.text:004067BE                 mov     [esp+4Ch+var_1C], 405E0Eh
.text:004067C6                 jmp     loc_405EA6
.text:004067CB ; ---------------------------------------------------------------------------
.text:004067CB
.text:004067CB loc_4067CB:                             ; CODE XREF: sub_405E20+3D↑j
.text:004067CB                                         ; DATA XREF: sub_405E20:jpt_405E5D↑o
.text:004067CB                 mov     [esp+4Ch+var_21], 1 ; jumptable 00405E5D case 4
.text:004067D0                 jmp     def_405E5D      ; jumptable 00405E5D default case, cases 0,1
.text:004067D5 ; ---------------------------------------------------------------------------
.text:004067D5
.text:004067D5 loc_4067D5:                             ; CODE XREF: sub_405E20+3D↑j
.text:004067D5                                         ; DATA XREF: sub_405E20:jpt_405E5D↑o
.text:004067D5                 mov     [esp+4Ch+C], 405E10h ; jumptable 00405E5D cases 5,6
.text:004067DC                 call    ds:__imp_libintl_gettext
.text:004067E2                 cmp     eax, 405E10h
.text:004067E7                 mov     edi, eax
.text:004067E9                 jz      short loc_406860
.text:004067EB
.text:004067EB loc_4067EB:                             ; CODE XREF: sub_405E20+A45↓j
.text:004067EB                                         ; sub_405E20+A4C↓j
.text:004067EB                 mov     [esp+4Ch+C], 405E0Eh
.text:004067F2                 call    ds:__imp_libintl_gettext
.text:004067F8                 cmp     eax, 405E0Eh
.text:004067FD                 mov     edx, eax
.text:004067FF                 jz      short loc_406852
.text:00406801
.text:00406801 loc_406801:                             ; CODE XREF: sub_405E20+A37↓j
.text:00406801                                         ; sub_405E20+A3E↓j
.text:00406801                 mov     [esp+4Ch+var_1C], edi
.text:00406805                 cmp     byte ptr [edi], 0
.text:00406808                 jz      short loc_406838
.text:0040680A
.text:0040680A loc_40680A:                             ; CODE XREF: sub_405E20+A16↓j
.text:0040680A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040680E                 cmp     [esp+4Ch+var_34], ecx
.text:00406812                 jnb     short loc_406827
.text:00406814                 mov     ebp, [esp+4Ch+var_1C]
.text:00406818                 mov     edi, [esp+4Ch+arg_0]
.text:0040681C                 mov     esi, [esp+4Ch+var_34]
.text:00406820                 movzx   ebx, byte ptr [ebp+0]
.text:00406824                 mov     [esi+edi], bl
.text:00406827
.text:00406827 loc_406827:                             ; CODE XREF: sub_405E20+9F2↑j
.text:00406827                 inc     [esp+4Ch+var_1C]
.text:0040682B                 inc     [esp+4Ch+var_34]
.text:0040682F                 mov     eax, [esp+4Ch+var_1C]
.text:00406833                 cmp     byte ptr [eax], 0
.text:00406836                 jnz     short loc_40680A
.text:00406838
.text:00406838 loc_406838:                             ; CODE XREF: sub_405E20+9E8↑j
.text:00406838                 mov     [esp+4Ch+var_21], 1
.text:0040683D                 mov     [esp+4Ch+var_1C], edx
.text:00406841                 mov     [esp+4Ch+C], edx ; Str
.text:00406844                 call    strlen
.text:00406849                 mov     [esp+4Ch+var_20], eax
.text:0040684D                 jmp     def_405E5D      ; jumptable 00405E5D default case, cases 0,1
.text:00406852 ; ---------------------------------------------------------------------------
.text:00406852
.text:00406852 loc_406852:                             ; CODE XREF: sub_405E20+9DF↑j
.text:00406852                 cmp     [esp+4Ch+arg_10], 6
.text:00406857                 jnz     short loc_406801
.text:00406859                 mov     edx, offset asc_405E0C ; "\"'`"
.text:0040685E                 jmp     short loc_406801
.text:00406860 ; ---------------------------------------------------------------------------
.text:00406860
.text:00406860 loc_406860:                             ; CODE XREF: sub_405E20+9C9↑j
.text:00406860                 cmp     [esp+4Ch+arg_10], 6
.text:00406865                 jnz     short loc_4067EB
.text:00406867                 mov     edi, offset asc_405E0C ; "\"'`"
.text:0040686C                 jmp     loc_4067EB
.text:0040686C sub_405E20      endp
.text:0040686C
.text:00406871 ; ---------------------------------------------------------------------------
.text:00406871                 jmp     short loc_406880
.text:00406871 ; ---------------------------------------------------------------------------
.text:00406873                 align 10h
.text:00406880
.text:00406880 loc_406880:                             ; CODE XREF: .text:00406871↑j
.text:00406880                 sub     esp, 0Ch
.text:00406883                 mov     [esp+4], ebx
.text:00406887                 mov     [esp+8], esi
.text:0040688B                 call    _errno
.text:00406890                 mov     esi, [eax]
.text:00406892                 mov     dword ptr [esp], 24h ; '$'
.text:00406899                 call    sub_407170
.text:0040689E                 mov     edx, [esp+10h]
.text:004068A2                 mov     ebx, eax
.text:004068A4                 test    edx, edx
.text:004068A6                 jz      short loc_4068F1
.text:004068A8
.text:004068A8 loc_4068A8:                             ; CODE XREF: .text:004068F6↓j
.text:004068A8                 mov     ecx, [edx]
.text:004068AA                 mov     [ebx], ecx
.text:004068AC                 mov     ecx, [edx+4]
.text:004068AF                 mov     [ebx+4], ecx
.text:004068B2                 mov     ecx, [edx+8]
.text:004068B5                 mov     [ebx+8], ecx
.text:004068B8                 mov     ecx, [edx+0Ch]
.text:004068BB                 mov     [ebx+0Ch], ecx
.text:004068BE                 mov     ecx, [edx+10h]
.text:004068C1                 mov     [ebx+10h], ecx
.text:004068C4                 mov     ecx, [edx+14h]
.text:004068C7                 mov     [ebx+14h], ecx
.text:004068CA                 mov     ecx, [edx+18h]
.text:004068CD                 mov     [ebx+18h], ecx
.text:004068D0                 mov     ecx, [edx+1Ch]
.text:004068D3                 mov     [ebx+1Ch], ecx
.text:004068D6                 mov     ecx, [edx+20h]
.text:004068D9                 mov     [ebx+20h], ecx
.text:004068DC                 call    _errno
.text:004068E1                 mov     [eax], esi
.text:004068E3                 mov     esi, [esp+8]
.text:004068E7                 mov     eax, ebx
.text:004068E9                 mov     ebx, [esp+4]
.text:004068ED                 add     esp, 0Ch
.text:004068F0                 retn
.text:004068F1 ; ---------------------------------------------------------------------------
.text:004068F1
.text:004068F1 loc_4068F1:                             ; CODE XREF: .text:004068A6↑j
.text:004068F1                 mov     edx, offset dword_411170
.text:004068F6                 jmp     short loc_4068A8
.text:004068F6 ; ---------------------------------------------------------------------------
.text:004068F8                 align 10h
.text:00406900                 mov     eax, [esp+4]
.text:00406904                 test    eax, eax
.text:00406906                 jz      short loc_406910
.text:00406908
.text:00406908 loc_406908:                             ; CODE XREF: .text:00406915↓j
.text:00406908                 mov     eax, [eax]
.text:0040690A                 retn
.text:0040690A ; ---------------------------------------------------------------------------
.text:0040690B                 align 10h
.text:00406910
.text:00406910 loc_406910:                             ; CODE XREF: .text:00406906↑j
.text:00406910                 mov     eax, offset dword_411170
.text:00406915                 jmp     short loc_406908
.text:00406915 ; ---------------------------------------------------------------------------
.text:00406917                 align 10h
.text:00406920                 mov     edx, [esp+4]
.text:00406924                 test    edx, edx
.text:00406926                 jz      short loc_406930
.text:00406928
.text:00406928 loc_406928:                             ; CODE XREF: .text:00406935↓j
.text:00406928                 mov     ecx, [esp+8]
.text:0040692C                 mov     [edx], ecx
.text:0040692E                 retn
.text:0040692E ; ---------------------------------------------------------------------------
.text:0040692F                 align 10h
.text:00406930
.text:00406930 loc_406930:                             ; CODE XREF: .text:00406926↑j
.text:00406930                 mov     edx, offset dword_411170
.text:00406935                 jmp     short loc_406928
.text:00406935 ; ---------------------------------------------------------------------------
.text:00406937                 align 10h
.text:00406940                 sub     esp, 8
.text:00406943                 mov     eax, [esp+0Ch]
.text:00406947                 movzx   ecx, byte ptr [esp+10h]
.text:0040694C                 mov     [esp], ebx
.text:0040694F                 mov     ebx, [esp+14h]
.text:00406953                 mov     [esp+4], esi
.text:00406957                 mov     dl, cl
.text:00406959                 shr     dl, 5
.text:0040695C                 movzx   edx, dl
.text:0040695F                 shl     edx, 2
.text:00406962                 test    eax, eax
.text:00406964                 lea     esi, [edx+eax+4]
.text:00406968                 jz      short loc_406990
.text:0040696A
.text:0040696A loc_40696A:                             ; CODE XREF: .text:00406996↓j
.text:0040696A                 mov     edx, [esi]
.text:0040696C                 and     ecx, 1Fh
.text:0040696F                 and     ebx, 1
.text:00406972                 mov     eax, edx
.text:00406974                 shr     eax, cl
.text:00406976                 and     eax, 1
.text:00406979                 xor     ebx, eax
.text:0040697B                 shl     ebx, cl
.text:0040697D                 xor     edx, ebx
.text:0040697F                 mov     [esi], edx
.text:00406981                 mov     ebx, [esp]
.text:00406984                 mov     esi, [esp+4]
.text:00406988                 add     esp, 8
.text:0040698B                 retn
.text:0040698B ; ---------------------------------------------------------------------------
.text:0040698C                 align 10h
.text:00406990
.text:00406990 loc_406990:                             ; CODE XREF: .text:00406968↑j
.text:00406990                 lea     esi, dword_411174[edx]
.text:00406996                 jmp     short loc_40696A
.text:00406996 ; ---------------------------------------------------------------------------
.text:00406998                 align 10h
.text:004069A0                 sub     esp, 2Ch
.text:004069A3                 mov     [esp+24h], ebx
.text:004069A7                 mov     ebx, [esp+40h]
.text:004069AB                 mov     [esp+28h], esi
.text:004069AF                 test    ebx, ebx
.text:004069B1                 jz      short loc_406A00
.text:004069B3
.text:004069B3 loc_4069B3:                             ; CODE XREF: .text:00406A05↓j
.text:004069B3                 call    _errno
.text:004069B8                 mov     esi, [eax]
.text:004069BA                 mov     [esp+14h], ebx
.text:004069BE                 mov     edx, [ebx]
.text:004069C0                 mov     ecx, [esp+38h]
.text:004069C4                 mov     ebx, [esp+3Ch]
.text:004069C8                 mov     [esp+10h], edx
.text:004069CC                 mov     edx, [esp+34h]
.text:004069D0                 mov     [esp+0Ch], ebx
.text:004069D4                 mov     [esp+8], ecx
.text:004069D8                 mov     [esp+4], edx
.text:004069DC                 mov     edx, [esp+30h]
.text:004069E0                 mov     [esp], edx
.text:004069E3                 call    sub_405E20
.text:004069E8                 mov     ebx, eax
.text:004069EA                 call    _errno
.text:004069EF                 mov     [eax], esi
.text:004069F1                 mov     esi, [esp+28h]
.text:004069F5                 mov     eax, ebx
.text:004069F7                 mov     ebx, [esp+24h]
.text:004069FB                 add     esp, 2Ch
.text:004069FE                 retn
.text:004069FE ; ---------------------------------------------------------------------------
.text:004069FF                 align 10h
.text:00406A00
.text:00406A00 loc_406A00:                             ; CODE XREF: .text:004069B1↑j
.text:00406A00                 mov     ebx, offset dword_411170
.text:00406A05                 jmp     short loc_4069B3
.text:00406A05 ; ---------------------------------------------------------------------------
.text:00406A07                 align 10h
.text:00406A10                 push    ebp
.text:00406A11                 push    edi
.text:00406A12                 push    esi
.text:00406A13                 push    ebx
.text:00406A14                 sub     esp, 2Ch
.text:00406A17                 mov     ebp, [esp+48h]
.text:00406A1B                 call    _errno
.text:00406A20                 mov     edx, [eax]
.text:00406A22                 test    ebp, ebp
.text:00406A24                 mov     ebx, ebp
.text:00406A26                 mov     [esp+28h], edx
.text:00406A2A                 jz      loc_406AE0
.text:00406A30
.text:00406A30 loc_406A30:                             ; CODE XREF: .text:00406AE5↓j
.text:00406A30                 call    _errno
.text:00406A35                 mov     edi, [eax]
.text:00406A37                 mov     esi, ebp
.text:00406A39                 mov     [esp+14h], ebx
.text:00406A3D                 mov     ecx, [ebx]
.text:00406A3F                 mov     dword ptr [esp], 0
.text:00406A46                 mov     edx, [esp+44h]
.text:00406A4A                 mov     dword ptr [esp+4], 0
.text:00406A52                 mov     eax, [esp+40h]
.text:00406A56                 mov     [esp+10h], ecx
.text:00406A5A                 mov     [esp+0Ch], edx
.text:00406A5E                 mov     [esp+8], eax
.text:00406A62                 call    sub_405E20
.text:00406A67                 mov     ebx, eax
.text:00406A69                 call    _errno
.text:00406A6E                 mov     [eax], edi
.text:00406A70                 lea     edi, [ebx+1]
.text:00406A73                 mov     [esp], edi
.text:00406A76                 call    sub_407170
.text:00406A7B                 mov     [esp+24h], eax
.text:00406A7F                 test    ebp, ebp
.text:00406A81                 jz      short loc_406AD2
.text:00406A83
.text:00406A83 loc_406A83:                             ; CODE XREF: .text:00406AD7↓j
.text:00406A83                 call    _errno
.text:00406A88                 mov     ebp, [eax]
.text:00406A8A                 mov     [esp+14h], esi
.text:00406A8E                 mov     ecx, [esi]
.text:00406A90                 mov     [esp+4], edi
.text:00406A94                 mov     edx, [esp+44h]
.text:00406A98                 mov     esi, [esp+24h]
.text:00406A9C                 mov     [esp+10h], ecx
.text:00406AA0                 mov     eax, [esp+40h]
.text:00406AA4                 mov     [esp+0Ch], edx
.text:00406AA8                 mov     [esp], esi
.text:00406AAB                 mov     [esp+8], eax
.text:00406AAF                 call    sub_405E20
.text:00406AB4                 call    _errno
.text:00406AB9                 mov     [eax], ebp
.text:00406ABB                 call    _errno
.text:00406AC0                 mov     ebx, [esp+28h]
.text:00406AC4                 mov     [eax], ebx
.text:00406AC6                 mov     eax, [esp+24h]
.text:00406ACA                 add     esp, 2Ch
.text:00406ACD                 pop     ebx
.text:00406ACE                 pop     esi
.text:00406ACF                 pop     edi
.text:00406AD0                 pop     ebp
.text:00406AD1                 retn
.text:00406AD2 ; ---------------------------------------------------------------------------
.text:00406AD2
.text:00406AD2 loc_406AD2:                             ; CODE XREF: .text:00406A81↑j
.text:00406AD2                 mov     esi, offset dword_411170
.text:00406AD7                 jmp     short loc_406A83
.text:00406AD7 ; ---------------------------------------------------------------------------
.text:00406AD9                 align 10h
.text:00406AE0
.text:00406AE0 loc_406AE0:                             ; CODE XREF: .text:00406A2A↑j
.text:00406AE0                 mov     ebx, offset dword_411170
.text:00406AE5                 jmp     loc_406A30
.text:00406AE5 ; ---------------------------------------------------------------------------
.text:00406AEA                 align 10h
.text:00406AF0                 sub     esp, 1Ch
.text:00406AF3                 mov     edx, [esp+24h]
.text:00406AF7                 mov     dword ptr [esp+0Ch], offset dword_411170
.text:00406AFF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406B07                 mov     [esp+4], edx
.text:00406B0B                 mov     edx, [esp+20h]
.text:00406B0F                 mov     [esp], edx
.text:00406B12                 call    sub_406F60
.text:00406B17                 add     esp, 1Ch
.text:00406B1A                 retn
.text:00406B1A ; ---------------------------------------------------------------------------
.text:00406B1B                 align 10h
.text:00406B20                 sub     esp, 1Ch
.text:00406B23                 mov     edx, [esp+20h]
.text:00406B27                 mov     dword ptr [esp+0Ch], offset dword_411170
.text:00406B2F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406B37                 mov     [esp+4], edx
.text:00406B3B                 mov     dword ptr [esp], 0
.text:00406B42                 call    sub_406F60
.text:00406B47                 add     esp, 1Ch
.text:00406B4A                 retn
.text:00406B4A ; ---------------------------------------------------------------------------
.text:00406B4B                 align 10h
.text:00406B50
.text:00406B50 ; =============== S U B R O U T I N E =======================================
.text:00406B50
.text:00406B50
.text:00406B50 ; int __cdecl sub_406B50(int, int, char *)
.text:00406B50 sub_406B50      proc near               ; CODE XREF: .text:004046EA↑p
.text:00406B50                                         ; sub_404700+1A↑p
.text:00406B50
.text:00406B50 var_BC          = dword ptr -0BCh
.text:00406B50 var_B8          = dword ptr -0B8h
.text:00406B50 var_B4          = dword ptr -0B4h
.text:00406B50 var_B0          = dword ptr -0B0h
.text:00406B50 var_AC          = dword ptr -0ACh
.text:00406B50 var_A8          = dword ptr -0A8h
.text:00406B50 var_A4          = dword ptr -0A4h
.text:00406B50 var_A0          = dword ptr -0A0h
.text:00406B50 var_9C          = dword ptr -9Ch
.text:00406B50 var_98          = dword ptr -98h
.text:00406B50 var_94          = dword ptr -94h
.text:00406B50 var_90          = dword ptr -90h
.text:00406B50 var_8C          = dword ptr -8Ch
.text:00406B50 var_7C          = dword ptr -7Ch
.text:00406B50 var_78          = dword ptr -78h
.text:00406B50 var_74          = dword ptr -74h
.text:00406B50 var_70          = dword ptr -70h
.text:00406B50 var_6C          = dword ptr -6Ch
.text:00406B50 var_68          = dword ptr -68h
.text:00406B50 var_64          = dword ptr -64h
.text:00406B50 var_60          = dword ptr -60h
.text:00406B50 var_5C          = dword ptr -5Ch
.text:00406B50 var_4C          = dword ptr -4Ch
.text:00406B50 var_48          = dword ptr -48h
.text:00406B50 var_44          = dword ptr -44h
.text:00406B50 var_40          = dword ptr -40h
.text:00406B50 var_3C          = dword ptr -3Ch
.text:00406B50 var_38          = dword ptr -38h
.text:00406B50 var_34          = dword ptr -34h
.text:00406B50 var_30          = dword ptr -30h
.text:00406B50 var_2C          = dword ptr -2Ch
.text:00406B50 arg_0           = dword ptr  4
.text:00406B50 arg_4           = dword ptr  8
.text:00406B50 arg_8           = dword ptr  0Ch
.text:00406B50
.text:00406B50                 push    ebp
.text:00406B51                 xor     eax, eax
.text:00406B53                 mov     ecx, 8
.text:00406B58                 push    edi
.text:00406B59                 push    esi
.text:00406B5A                 push    ebx
.text:00406B5B                 sub     esp, 0ACh
.text:00406B61                 mov     ebp, [esp+0BCh+arg_4]
.text:00406B68                 cld
.text:00406B69                 lea     edi, [esp+0BCh+var_A8]
.text:00406B6D                 mov     [esp+0BCh+var_AC], ebp
.text:00406B71                 rep stosd
.text:00406B73                 mov     eax, [esp+0BCh+var_8C]
.text:00406B77                 mov     edi, [esp+0BCh+var_AC]
.text:00406B7B                 mov     esi, [esp+0BCh+var_A8]
.text:00406B7F                 mov     [esp+0BCh+var_5C], eax
.text:00406B83                 mov     ebp, [esp+0BCh+var_A4]
.text:00406B87                 mov     eax, [esp+0BCh+var_AC]
.text:00406B8B                 mov     [esp+0BCh+var_7C], edi
.text:00406B8F                 mov     ecx, [esp+0BCh+var_94]
.text:00406B93                 mov     edi, [esp+0BCh+var_A0]
.text:00406B97                 mov     [esp+0BCh+var_78], esi
.text:00406B9B                 mov     edx, [esp+0BCh+var_90]
.text:00406B9F                 mov     esi, [esp+0BCh+var_9C]
.text:00406BA3                 mov     [esp+0BCh+var_4C], eax
.text:00406BA7                 mov     ebx, [esp+0BCh+var_98]
.text:00406BAB                 mov     eax, [esp+0BCh+var_A8]
.text:00406BAF                 mov     [esp+0BCh+var_74], ebp
.text:00406BB3                 mov     [esp+0BCh+var_70], edi
.text:00406BB7                 mov     [esp+0BCh+var_6C], esi
.text:00406BBB                 mov     [esp+0BCh+var_68], ebx
.text:00406BBF                 mov     [esp+0BCh+var_64], ecx
.text:00406BC3                 mov     [esp+0BCh+var_60], edx
.text:00406BC7                 mov     [esp+0BCh+var_48], eax
.text:00406BCB                 mov     [esp+0BCh+var_44], ebp
.text:00406BCF                 mov     [esp+0BCh+var_40], edi
.text:00406BD3                 mov     [esp+0BCh+var_3C], esi
.text:00406BDA                 mov     [esp+0BCh+var_38], ebx
.text:00406BE1                 mov     ebx, [esp+0BCh+var_8C]
.text:00406BE5                 mov     [esp+0BCh+var_30], edx
.text:00406BEC                 mov     edx, [esp+0BCh+arg_8]
.text:00406BF3                 mov     [esp+0BCh+var_34], ecx
.text:00406BFA                 lea     ecx, [esp+0BCh+var_4C]
.text:00406BFE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00406C02                 mov     edx, [esp+0BCh+arg_0]
.text:00406C09                 mov     [esp+0BCh+var_2C], ebx
.text:00406C10                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00406C14                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00406C1C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00406C1F                 call    sub_406F60
.text:00406C24                 add     esp, 0ACh
.text:00406C2A                 pop     ebx
.text:00406C2B                 pop     esi
.text:00406C2C                 pop     edi
.text:00406C2D                 pop     ebp
.text:00406C2E                 retn
.text:00406C2E sub_406B50      endp
.text:00406C2E
.text:00406C2E ; ---------------------------------------------------------------------------
.text:00406C2F                 align 10h
.text:00406C30                 push    ebp
.text:00406C31                 xor     eax, eax
.text:00406C33                 mov     ecx, 8
.text:00406C38                 push    edi
.text:00406C39                 push    esi
.text:00406C3A                 push    ebx
.text:00406C3B                 sub     esp, 0ACh
.text:00406C41                 mov     edx, [esp+0C4h]
.text:00406C48                 cld
.text:00406C49                 lea     edi, [esp+14h]
.text:00406C4D                 mov     [esp+10h], edx
.text:00406C51                 rep stosd
.text:00406C53                 mov     eax, [esp+30h]
.text:00406C57                 mov     ebp, [esp+10h]
.text:00406C5B                 mov     edi, [esp+14h]
.text:00406C5F                 mov     [esp+60h], eax
.text:00406C63                 mov     esi, [esp+20h]
.text:00406C67                 mov     eax, [esp+10h]
.text:00406C6B                 mov     [esp+40h], ebp
.text:00406C6F                 mov     ecx, [esp+28h]
.text:00406C73                 mov     ebp, [esp+18h]
.text:00406C77                 mov     [esp+44h], edi
.text:00406C7B                 mov     edx, [esp+2Ch]
.text:00406C7F                 mov     edi, [esp+1Ch]
.text:00406C83                 mov     [esp+70h], eax
.text:00406C87                 mov     ebx, [esp+24h]
.text:00406C8B                 mov     eax, [esp+14h]
.text:00406C8F                 mov     [esp+48h], ebp
.text:00406C93                 mov     [esp+4Ch], edi
.text:00406C97                 mov     [esp+50h], esi
.text:00406C9B                 mov     [esp+54h], ebx
.text:00406C9F                 mov     [esp+58h], ecx
.text:00406CA3                 mov     [esp+5Ch], edx
.text:00406CA7                 mov     [esp+74h], eax
.text:00406CAB                 mov     [esp+78h], ebp
.text:00406CAF                 mov     [esp+7Ch], edi
.text:00406CB3                 mov     [esp+80h], esi
.text:00406CBA                 mov     [esp+84h], ebx
.text:00406CC1                 mov     esi, [esp+30h]
.text:00406CC5                 lea     ebx, [esp+70h]
.text:00406CC9                 mov     [esp+8Ch], edx
.text:00406CD0                 mov     edx, [esp+0C8h]
.text:00406CD7                 mov     [esp+88h], ecx
.text:00406CDE                 mov     ecx, [esp+0CCh]
.text:00406CE5                 mov     [esp+4], edx
.text:00406CE9                 mov     edx, [esp+0C0h]
.text:00406CF0                 mov     [esp+90h], esi
.text:00406CF7                 mov     [esp+0Ch], ebx
.text:00406CFB                 mov     [esp+8], ecx
.text:00406CFF                 mov     [esp], edx
.text:00406D02                 call    sub_406F60
.text:00406D07                 add     esp, 0ACh
.text:00406D0D                 pop     ebx
.text:00406D0E                 pop     esi
.text:00406D0F                 pop     edi
.text:00406D10                 pop     ebp
.text:00406D11                 retn
.text:00406D11 ; ---------------------------------------------------------------------------
.text:00406D12                 align 10h
.text:00406D20                 push    ebp
.text:00406D21                 xor     eax, eax
.text:00406D23                 mov     ecx, 8
.text:00406D28                 push    edi
.text:00406D29                 push    esi
.text:00406D2A                 push    ebx
.text:00406D2B                 sub     esp, 0ACh
.text:00406D31                 mov     edi, [esp+0C0h]
.text:00406D38                 cld
.text:00406D39                 mov     [esp+10h], edi
.text:00406D3D                 lea     edi, [esp+14h]
.text:00406D41                 rep stosd
.text:00406D43                 mov     eax, [esp+30h]
.text:00406D47                 mov     esi, [esp+10h]
.text:00406D4B                 mov     ebx, [esp+14h]
.text:00406D4F                 mov     [esp+60h], eax
.text:00406D53                 mov     ebp, [esp+18h]
.text:00406D57                 mov     eax, [esp+10h]
.text:00406D5B                 mov     [esp+40h], esi
.text:00406D5F                 mov     edi, [esp+1Ch]
.text:00406D63                 mov     esi, [esp+20h]
.text:00406D67                 mov     [esp+44h], ebx
.text:00406D6B                 mov     ecx, [esp+28h]
.text:00406D6F                 mov     edx, [esp+2Ch]
.text:00406D73                 mov     [esp+70h], eax
.text:00406D77                 mov     ebx, [esp+24h]
.text:00406D7B                 mov     eax, [esp+14h]
.text:00406D7F                 mov     [esp+48h], ebp
.text:00406D83                 mov     [esp+4Ch], edi
.text:00406D87                 mov     [esp+50h], esi
.text:00406D8B                 mov     [esp+54h], ebx
.text:00406D8F                 mov     [esp+58h], ecx
.text:00406D93                 mov     [esp+5Ch], edx
.text:00406D97                 mov     [esp+74h], eax
.text:00406D9B                 mov     [esp+78h], ebp
.text:00406D9F                 mov     [esp+7Ch], edi
.text:00406DA3                 mov     [esp+80h], esi
.text:00406DAA                 mov     [esp+84h], ebx
.text:00406DB1                 mov     [esp+8Ch], edx
.text:00406DB8                 lea     edx, [esp+70h]
.text:00406DBC                 mov     [esp+88h], ecx
.text:00406DC3                 mov     ecx, [esp+30h]
.text:00406DC7                 mov     [esp+0Ch], edx
.text:00406DCB                 mov     edx, [esp+0C4h]
.text:00406DD2                 mov     [esp+90h], ecx
.text:00406DD9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406DE1                 mov     [esp+4], edx
.text:00406DE5                 mov     dword ptr [esp], 0
.text:00406DEC                 call    sub_406F60
.text:00406DF1                 add     esp, 0ACh
.text:00406DF7                 pop     ebx
.text:00406DF8                 pop     esi
.text:00406DF9                 pop     edi
.text:00406DFA                 pop     ebp
.text:00406DFB                 retn
.text:00406DFB ; ---------------------------------------------------------------------------
.text:00406DFC                 align 10h
.text:00406E00                 push    edi
.text:00406E01                 push    esi
.text:00406E02                 push    ebx
.text:00406E03                 sub     esp, 40h
.text:00406E06                 mov     edx, ds:dword_41117C
.text:00406E0C                 mov     ebx, ds:dword_411170
.text:00406E12                 mov     esi, ds:dword_411178
.text:00406E18                 mov     edi, ds:dword_411174
.text:00406E1E                 mov     [esp+1Ch], edx
.text:00406E22                 mov     ecx, ds:dword_411180
.text:00406E28                 mov     edx, ds:dword_411190
.text:00406E2E                 mov     [esp+10h], ebx
.text:00406E32                 mov     ebx, ds:dword_411184
.text:00406E38                 mov     [esp+30h], edx
.text:00406E3C                 movzx   edx, byte ptr [esp+54h]
.text:00406E41                 mov     [esp+18h], esi
.text:00406E45                 mov     esi, ds:dword_41118C
.text:00406E4B                 mov     [esp+14h], edi
.text:00406E4F                 mov     edi, ds:dword_411188
.text:00406E55                 mov     [esp+20h], ecx
.text:00406E59                 mov     cl, dl
.text:00406E5B                 shr     cl, 5
.text:00406E5E                 mov     [esp+24h], ebx
.text:00406E62                 movzx   ebx, cl
.text:00406E65                 mov     [esp+2Ch], esi
.text:00406E69                 lea     esi, [esp+10h]
.text:00406E6D                 mov     [esp+28h], edi
.text:00406E71                 lea     edi, [esi+ebx*4]
.text:00406E74                 mov     ebx, edx
.text:00406E76                 mov     edx, [edi+4]
.text:00406E79                 and     ebx, 1Fh
.text:00406E7C                 mov     cl, bl
.text:00406E7E                 mov     eax, edx
.text:00406E80                 shr     eax, cl
.text:00406E82                 and     eax, 1
.text:00406E85                 xor     eax, 1
.text:00406E88                 shl     eax, cl
.text:00406E8A                 xor     edx, eax
.text:00406E8C                 mov     [edi+4], edx
.text:00406E8F                 mov     edx, [esp+50h]
.text:00406E93                 mov     [esp+0Ch], esi
.text:00406E97                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406E9F                 mov     [esp+4], edx
.text:00406EA3                 mov     dword ptr [esp], 0
.text:00406EAA                 call    sub_406F60
.text:00406EAF                 add     esp, 40h
.text:00406EB2                 pop     ebx
.text:00406EB3                 pop     esi
.text:00406EB4                 pop     edi
.text:00406EB5                 retn
.text:00406EB5 ; ---------------------------------------------------------------------------
.text:00406EB6                 align 10h
.text:00406EC0
.text:00406EC0 ; =============== S U B R O U T I N E =======================================
.text:00406EC0
.text:00406EC0
.text:00406EC0 ; int __cdecl sub_406EC0(char *)
.text:00406EC0 sub_406EC0      proc near               ; CODE XREF: sub_4045F0+64↑p
.text:00406EC0
.text:00406EC0 var_4C          = dword ptr -4Ch
.text:00406EC0 var_48          = dword ptr -48h
.text:00406EC0 var_44          = dword ptr -44h
.text:00406EC0 var_40          = dword ptr -40h
.text:00406EC0 var_3C          = dword ptr -3Ch
.text:00406EC0 var_38          = dword ptr -38h
.text:00406EC0 var_34          = dword ptr -34h
.text:00406EC0 var_30          = dword ptr -30h
.text:00406EC0 var_2C          = dword ptr -2Ch
.text:00406EC0 var_28          = dword ptr -28h
.text:00406EC0 var_24          = dword ptr -24h
.text:00406EC0 var_20          = dword ptr -20h
.text:00406EC0 var_1C          = dword ptr -1Ch
.text:00406EC0 arg_0           = dword ptr  4
.text:00406EC0
.text:00406EC0                 sub     esp, 4Ch
.text:00406EC3                 mov     ecx, ds:dword_411170
.text:00406EC9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00406ED1                 mov     edx, ds:dword_411174
.text:00406ED7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00406EDE                 mov     [esp+4Ch+var_3C], ecx
.text:00406EE2                 mov     ecx, ds:dword_41117C
.text:00406EE8                 mov     [esp+4Ch+var_38], edx
.text:00406EEC                 mov     edx, ds:dword_411178
.text:00406EF2                 mov     [esp+4Ch+var_30], ecx
.text:00406EF6                 mov     ecx, ds:dword_411180
.text:00406EFC                 mov     eax, edx
.text:00406EFE                 shr     eax, 1Ah
.text:00406F01                 and     eax, 1
.text:00406F04                 xor     eax, 1
.text:00406F07                 mov     [esp+4Ch+var_2C], ecx
.text:00406F0B                 shl     eax, 1Ah
.text:00406F0E                 mov     ecx, ds:dword_411184
.text:00406F14                 xor     edx, eax
.text:00406F16                 mov     [esp+4Ch+var_34], edx
.text:00406F1A                 mov     edx, [esp+4Ch+arg_0]
.text:00406F1E                 mov     [esp+4Ch+var_28], ecx
.text:00406F22                 mov     ecx, ds:dword_411188
.text:00406F28                 mov     [esp+4Ch+var_48], edx ; char *
.text:00406F2C                 mov     [esp+4Ch+var_24], ecx
.text:00406F30                 mov     ecx, ds:dword_41118C
.text:00406F36                 mov     [esp+4Ch+var_20], ecx
.text:00406F3A                 mov     ecx, ds:dword_411190
.text:00406F40                 mov     [esp+4Ch+var_1C], ecx
.text:00406F44                 lea     ecx, [esp+4Ch+var_3C]
.text:00406F48                 mov     [esp+4Ch+var_40], ecx ; int
.text:00406F4C                 call    sub_406F60
.text:00406F51                 add     esp, 4Ch
.text:00406F54                 retn
.text:00406F54 sub_406EC0      endp
.text:00406F54
.text:00406F54 ; ---------------------------------------------------------------------------
.text:00406F55                 align 10h
.text:00406F60
.text:00406F60 ; =============== S U B R O U T I N E =======================================
.text:00406F60
.text:00406F60
.text:00406F60 ; int __cdecl sub_406F60(int, char *, int, int)
.text:00406F60 sub_406F60      proc near               ; CODE XREF: .text:00406B12↑p
.text:00406F60                                         ; .text:00406B42↑p ...
.text:00406F60
.text:00406F60 Block           = dword ptr -2Ch
.text:00406F60 var_28          = dword ptr -28h
.text:00406F60 Str             = dword ptr -24h
.text:00406F60 var_20          = dword ptr -20h
.text:00406F60 var_1C          = dword ptr -1Ch
.text:00406F60 var_18          = dword ptr -18h
.text:00406F60 var_14          = dword ptr -14h
.text:00406F60 arg_0           = dword ptr  4
.text:00406F60 arg_4           = dword ptr  8
.text:00406F60 arg_8           = dword ptr  0Ch
.text:00406F60 arg_C           = dword ptr  10h
.text:00406F60
.text:00406F60                 push    ebp
.text:00406F61                 push    edi
.text:00406F62                 push    esi
.text:00406F63                 push    ebx
.text:00406F64                 sub     esp, 1Ch
.text:00406F67                 call    _errno
.text:00406F6C                 mov     edx, [eax]
.text:00406F6E                 mov     eax, [esp+2Ch+arg_0]
.text:00406F72                 mov     [esp+2Ch+var_14], edx
.text:00406F76                 test    eax, eax
.text:00406F78                 js      loc_40711A
.text:00406F7E                 mov     eax, [esp+2Ch+arg_0]
.text:00406F82                 cmp     dword_410040, eax
.text:00406F88                 ja      short loc_407000
.text:00406F8A                 mov     esi, eax
.text:00406F8C                 inc     esi
.text:00406F8D                 cmp     esi, 1FFFFFFFh
.text:00406F93                 ja      loc_40711F
.text:00406F99                 mov     ebx, off_41004C
.text:00406F9F                 cmp     ebx, offset dword_410044
.text:00406FA5                 jz      loc_4070F1
.text:00406FAB
.text:00406FAB loc_406FAB:                             ; CODE XREF: sub_406F60+1B5↓j
.text:00406FAB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00406FAE                 lea     ecx, ds:0[esi*8]
.text:00406FB5                 mov     ebp, esi
.text:00406FB7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00406FBB                 call    sub_407200
.text:00406FC0                 mov     off_41004C, eax
.text:00406FC5                 mov     ebx, dword_410040
.text:00406FCB                 sub     ebp, ebx
.text:00406FCD                 lea     edi, [eax+ebx*8]
.text:00406FD0                 lea     eax, ds:0[ebp*8]
.text:00406FD7                 cmp     eax, 7
.text:00406FDA                 jbe     short loc_406FF0
.text:00406FDC                 test    edi, 4
.text:00406FE2                 jz      short loc_406FF0
.text:00406FE4                 mov     dword ptr [edi], 0
.text:00406FEA                 sub     eax, 4
.text:00406FED                 add     edi, 4
.text:00406FF0
.text:00406FF0 loc_406FF0:                             ; CODE XREF: sub_406F60+7A↑j
.text:00406FF0                                         ; sub_406F60+82↑j
.text:00406FF0                 cld
.text:00406FF1                 mov     ecx, eax
.text:00406FF3                 shr     ecx, 2
.text:00406FF6                 xor     eax, eax
.text:00406FF8                 rep stosd
.text:00406FFA                 mov     dword_410040, esi
.text:00407000
.text:00407000 loc_407000:                             ; CODE XREF: sub_406F60+28↑j
.text:00407000                 mov     esi, off_41004C
.text:00407006                 mov     eax, [esp+2Ch+arg_0]
.text:0040700A                 mov     ebp, [esi+eax*8]
.text:0040700D                 mov     edi, [esi+eax*8+4]
.text:00407011                 mov     esi, [esp+2Ch+arg_C]
.text:00407015                 test    esi, esi
.text:00407017                 jz      loc_4070E7
.text:0040701D
.text:0040701D loc_40701D:                             ; CODE XREF: sub_406F60+18C↓j
.text:0040701D                 call    _errno
.text:00407022                 mov     ebx, [eax]
.text:00407024                 mov     [esp+2Ch+var_18], esi ; int
.text:00407028                 mov     ecx, [esi]
.text:0040702A                 mov     [esp+2Ch+Block], edi ; int
.text:0040702D                 mov     edx, [esp+2Ch+arg_8]
.text:00407031                 mov     [esp+2Ch+var_28], ebp ; int
.text:00407035                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00407039                 mov     ecx, [esp+2Ch+arg_4]
.text:0040703D                 mov     [esp+2Ch+var_20], edx ; int
.text:00407041                 mov     [esp+2Ch+Str], ecx ; Str
.text:00407045                 call    sub_405E20
.text:0040704A                 mov     esi, eax
.text:0040704C                 call    _errno
.text:00407051                 mov     [eax], ebx
.text:00407053                 cmp     ebp, esi
.text:00407055                 ja      short loc_4070CB
.text:00407057                 lea     ebp, [esi+1]
.text:0040705A                 mov     ebx, off_41004C
.text:00407060                 cmp     edi, offset unk_411070
.text:00407066                 mov     esi, [esp+2Ch+arg_0]
.text:0040706A                 mov     [ebx+esi*8], ebp
.text:0040706D                 jz      short loc_40707D
.text:0040706F                 mov     [esp+2Ch+Block], edi ; Block
.text:00407072                 call    free
.text:00407077                 mov     ebx, off_41004C
.text:0040707D
.text:0040707D loc_40707D:                             ; CODE XREF: sub_406F60+10D↑j
.text:0040707D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00407080                 call    sub_407170
.text:00407085                 mov     esi, [esp+2Ch+arg_C]
.text:00407089                 mov     edi, eax
.text:0040708B                 mov     eax, [esp+2Ch+arg_0]
.text:0040708F                 test    esi, esi
.text:00407091                 mov     [ebx+eax*8+4], edi
.text:00407095                 jz      short loc_4070E0
.text:00407097
.text:00407097 loc_407097:                             ; CODE XREF: sub_406F60+185↓j
.text:00407097                 call    _errno
.text:0040709C                 mov     ebx, [eax]
.text:0040709E                 mov     [esp+2Ch+var_18], esi ; int
.text:004070A2                 mov     ecx, [esi]
.text:004070A4                 mov     [esp+2Ch+Block], edi ; int
.text:004070A7                 mov     edx, [esp+2Ch+arg_8]
.text:004070AB                 mov     [esp+2Ch+var_28], ebp ; int
.text:004070AF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004070B3                 mov     ecx, [esp+2Ch+arg_4]
.text:004070B7                 mov     [esp+2Ch+var_20], edx ; int
.text:004070BB                 mov     [esp+2Ch+Str], ecx ; Str
.text:004070BF                 call    sub_405E20
.text:004070C4                 call    _errno
.text:004070C9                 mov     [eax], ebx
.text:004070CB
.text:004070CB loc_4070CB:                             ; CODE XREF: sub_406F60+F5↑j
.text:004070CB                 call    _errno
.text:004070D0                 mov     ebp, [esp+2Ch+var_14]
.text:004070D4                 mov     [eax], ebp
.text:004070D6                 add     esp, 1Ch
.text:004070D9                 mov     eax, edi
.text:004070DB                 pop     ebx
.text:004070DC                 pop     esi
.text:004070DD                 pop     edi
.text:004070DE                 pop     ebp
.text:004070DF                 retn
.text:004070E0 ; ---------------------------------------------------------------------------
.text:004070E0
.text:004070E0 loc_4070E0:                             ; CODE XREF: sub_406F60+135↑j
.text:004070E0                 mov     esi, offset dword_411170
.text:004070E5                 jmp     short loc_407097
.text:004070E7 ; ---------------------------------------------------------------------------
.text:004070E7
.text:004070E7 loc_4070E7:                             ; CODE XREF: sub_406F60+B7↑j
.text:004070E7                 mov     esi, offset dword_411170
.text:004070EC                 jmp     loc_40701D
.text:004070F1 ; ---------------------------------------------------------------------------
.text:004070F1
.text:004070F1 loc_4070F1:                             ; CODE XREF: sub_406F60+45↑j
.text:004070F1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004070F8                 call    sub_407170
.text:004070FD                 mov     off_41004C, eax
.text:00407102                 mov     edi, dword_410044
.text:00407108                 mov     ebx, eax
.text:0040710A                 mov     ecx, off_410048
.text:00407110                 mov     [eax], edi
.text:00407112                 mov     [eax+4], ecx
.text:00407115                 jmp     loc_406FAB
.text:0040711A ; ---------------------------------------------------------------------------
.text:0040711A
.text:0040711A loc_40711A:                             ; CODE XREF: sub_406F60+18↑j
.text:0040711A                 call    abort
.text:0040711F ; ---------------------------------------------------------------------------
.text:0040711F
.text:0040711F loc_40711F:                             ; CODE XREF: sub_406F60+33↑j
.text:0040711F                 call    sub_407420
.text:0040711F sub_406F60      endp
.text:0040711F
.text:0040711F ; ---------------------------------------------------------------------------
.text:00407124                 align 10h
.text:00407130
.text:00407130 ; =============== S U B R O U T I N E =======================================
.text:00407130
.text:00407130
.text:00407130 sub_407130      proc near
.text:00407130
.text:00407130 Size            = dword ptr -0Ch
.text:00407130 var_4           = dword ptr -4
.text:00407130 arg_0           = dword ptr  4
.text:00407130 arg_4           = dword ptr  8
.text:00407130
.text:00407130                 sub     esp, 0Ch
.text:00407133                 xor     edx, edx
.text:00407135                 mov     ecx, [esp+0Ch+arg_4]
.text:00407139                 mov     [esp+0Ch+var_4], ebx
.text:0040713D                 mov     eax, 0FFFFFFFFh
.text:00407142                 mov     ebx, [esp+0Ch+arg_0]
.text:00407146                 div     ecx
.text:00407148                 cmp     eax, ebx
.text:0040714A                 jb      short loc_407169
.text:0040714C                 mov     edx, ebx
.text:0040714E                 imul    edx, ecx
.text:00407151                 mov     [esp+0Ch+Size], edx ; Size
.text:00407154                 call    malloc
.text:00407159                 test    eax, eax
.text:0040715B                 jz      short loc_407165
.text:0040715D
.text:0040715D loc_40715D:                             ; CODE XREF: sub_407130+37↓j
.text:0040715D                 mov     ebx, [esp+0Ch+var_4]
.text:00407161                 add     esp, 0Ch
.text:00407164                 retn
.text:00407165 ; ---------------------------------------------------------------------------
.text:00407165
.text:00407165 loc_407165:                             ; CODE XREF: sub_407130+2B↑j
.text:00407165                 test    ebx, ebx
.text:00407167                 jz      short loc_40715D
.text:00407169
.text:00407169 loc_407169:                             ; CODE XREF: sub_407130+1A↑j
.text:00407169                 call    sub_407420
.text:00407169 sub_407130      endp
.text:00407169
.text:00407169 ; ---------------------------------------------------------------------------
.text:0040716E                 align 10h
.text:00407170
.text:00407170 ; =============== S U B R O U T I N E =======================================
.text:00407170
.text:00407170
.text:00407170 ; int __cdecl sub_407170(size_t)
.text:00407170 sub_407170      proc near               ; CODE XREF: .text:00406899↑p
.text:00407170                                         ; .text:00406A76↑p ...
.text:00407170
.text:00407170 Size            = dword ptr -0Ch
.text:00407170 var_4           = dword ptr -4
.text:00407170 arg_0           = dword ptr  4
.text:00407170
.text:00407170                 sub     esp, 0Ch
.text:00407173                 mov     [esp+0Ch+var_4], ebx
.text:00407177                 mov     ebx, [esp+0Ch+arg_0]
.text:0040717B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040717E                 call    malloc
.text:00407183                 test    eax, eax
.text:00407185                 jz      short loc_407190
.text:00407187
.text:00407187 loc_407187:                             ; CODE XREF: sub_407170+22↓j
.text:00407187                 mov     ebx, [esp+0Ch+var_4]
.text:0040718B                 add     esp, 0Ch
.text:0040718E                 retn
.text:0040718E ; ---------------------------------------------------------------------------
.text:0040718F                 align 10h
.text:00407190
.text:00407190 loc_407190:                             ; CODE XREF: sub_407170+15↑j
.text:00407190                 test    ebx, ebx
.text:00407192                 jz      short loc_407187
.text:00407194                 call    sub_407420
.text:00407194 sub_407170      endp
.text:00407194
.text:00407194 ; ---------------------------------------------------------------------------
.text:00407199                 align 10h
.text:004071A0                 sub     esp, 1Ch
.text:004071A3                 xor     edx, edx
.text:004071A5                 mov     eax, 0FFFFFFFFh
.text:004071AA                 mov     [esp+14h], ebx
.text:004071AE                 mov     ecx, [esp+20h]
.text:004071B2                 mov     ebx, [esp+28h]
.text:004071B6                 mov     [esp+18h], esi
.text:004071BA                 mov     esi, [esp+24h]
.text:004071BE                 div     ebx
.text:004071C0                 cmp     eax, esi
.text:004071C2                 jb      short loc_4071F4
.text:004071C4                 mov     [esp], ecx
.text:004071C7                 mov     edx, esi
.text:004071C9                 imul    edx, ebx
.text:004071CC                 mov     [esp+4], edx
.text:004071D0                 call    realloc
.text:004071D5                 test    eax, eax
.text:004071D7                 mov     ecx, eax
.text:004071D9                 jz      short loc_4071F0
.text:004071DB
.text:004071DB loc_4071DB:                             ; CODE XREF: .text:004071F2↓j
.text:004071DB                 mov     ebx, [esp+14h]
.text:004071DF                 mov     eax, ecx
.text:004071E1                 mov     esi, [esp+18h]
.text:004071E5                 add     esp, 1Ch
.text:004071E8                 retn
.text:004071E8 ; ---------------------------------------------------------------------------
.text:004071E9                 align 10h
.text:004071F0
.text:004071F0 loc_4071F0:                             ; CODE XREF: .text:004071D9↑j
.text:004071F0                 test    esi, esi
.text:004071F2                 jz      short loc_4071DB
.text:004071F4
.text:004071F4 loc_4071F4:                             ; CODE XREF: .text:004071C2↑j
.text:004071F4                 call    sub_407420
.text:004071F4 ; ---------------------------------------------------------------------------
.text:004071F9                 align 10h
.text:00407200
.text:00407200 ; =============== S U B R O U T I N E =======================================
.text:00407200
.text:00407200
.text:00407200 ; int __cdecl sub_407200(void *, size_t)
.text:00407200 sub_407200      proc near               ; CODE XREF: sub_406F60+5B↑p
.text:00407200
.text:00407200 Block           = dword ptr -0Ch
.text:00407200 Size            = dword ptr -8
.text:00407200 var_4           = dword ptr -4
.text:00407200 arg_0           = dword ptr  4
.text:00407200 arg_4           = dword ptr  8
.text:00407200
.text:00407200                 sub     esp, 0Ch
.text:00407203                 mov     edx, [esp+0Ch+arg_0]
.text:00407207                 mov     [esp+0Ch+var_4], ebx
.text:0040720B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040720F                 mov     [esp+0Ch+Block], edx ; Block
.text:00407212                 mov     [esp+0Ch+Size], ebx ; Size
.text:00407216                 call    realloc
.text:0040721B                 test    eax, eax
.text:0040721D                 jz      short loc_407227
.text:0040721F
.text:0040721F loc_40721F:                             ; CODE XREF: sub_407200+29↓j
.text:0040721F                 mov     ebx, [esp+0Ch+var_4]
.text:00407223                 add     esp, 0Ch
.text:00407226                 retn
.text:00407227 ; ---------------------------------------------------------------------------
.text:00407227
.text:00407227 loc_407227:                             ; CODE XREF: sub_407200+1D↑j
.text:00407227                 test    ebx, ebx
.text:00407229                 jz      short loc_40721F
.text:0040722B                 call    sub_407420
.text:0040722B sub_407200      endp
.text:0040722B
.text:00407230 ; ---------------------------------------------------------------------------
.text:00407230                 jmp     sub_407380
.text:00407230 ; ---------------------------------------------------------------------------
.text:00407235                 align 10h
.text:00407240                 sub     esp, 0Ch
.text:00407243                 mov     edx, [esp+14h]
.text:00407247                 mov     dword ptr [esp+8], 1
.text:0040724F                 mov     [esp+4], edx
.text:00407253                 mov     edx, [esp+10h]
.text:00407257                 mov     [esp], edx
.text:0040725A                 call    sub_407380
.text:0040725F                 add     esp, 0Ch
.text:00407262                 retn
.text:00407262 ; ---------------------------------------------------------------------------
.text:00407263                 align 10h
.text:00407270                 sub     esp, 1Ch
.text:00407273                 mov     [esp+18h], ebx
.text:00407277                 mov     ebx, [esp+20h]
.text:0040727B                 mov     [esp], ebx
.text:0040727E                 call    malloc
.text:00407283                 test    eax, eax
.text:00407285                 jz      short loc_4072A3
.text:00407287
.text:00407287 loc_407287:                             ; CODE XREF: .text:004072A5↓j
.text:00407287                 mov     [esp+8], ebx
.text:0040728B                 mov     dword ptr [esp+4], 0
.text:00407293                 mov     [esp], eax
.text:00407296                 call    memset
.text:0040729B                 mov     ebx, [esp+18h]
.text:0040729F                 add     esp, 1Ch
.text:004072A2                 retn
.text:004072A3 ; ---------------------------------------------------------------------------
.text:004072A3
.text:004072A3 loc_4072A3:                             ; CODE XREF: .text:00407285↑j
.text:004072A3                 test    ebx, ebx
.text:004072A5                 jz      short loc_407287
.text:004072A7                 call    sub_407420
.text:004072A7 ; ---------------------------------------------------------------------------
.text:004072AC                 align 10h
.text:004072B0                 sub     esp, 0Ch
.text:004072B3                 xor     edx, edx
.text:004072B5                 mov     ecx, [esp+14h]
.text:004072B9                 mov     [esp+8], ebx
.text:004072BD                 mov     eax, 0FFFFFFFFh
.text:004072C2                 mov     ebx, [esp+10h]
.text:004072C6                 div     ecx
.text:004072C8                 cmp     eax, ebx
.text:004072CA                 jb      short loc_4072E8
.text:004072CC                 mov     [esp+4], ecx
.text:004072D0                 mov     [esp], ebx
.text:004072D3                 call    calloc
.text:004072D8                 test    eax, eax
.text:004072DA                 jz      short loc_4072E4
.text:004072DC
.text:004072DC loc_4072DC:                             ; CODE XREF: .text:004072E6↓j
.text:004072DC                 mov     ebx, [esp+8]
.text:004072E0                 add     esp, 0Ch
.text:004072E3                 retn
.text:004072E4 ; ---------------------------------------------------------------------------
.text:004072E4
.text:004072E4 loc_4072E4:                             ; CODE XREF: .text:004072DA↑j
.text:004072E4                 test    ebx, ebx
.text:004072E6                 jz      short loc_4072DC
.text:004072E8
.text:004072E8 loc_4072E8:                             ; CODE XREF: .text:004072CA↑j
.text:004072E8                 call    sub_407420
.text:004072E8 ; ---------------------------------------------------------------------------
.text:004072ED                 align 10h
.text:004072F0                 sub     esp, 1Ch
.text:004072F3                 mov     [esp+18h], ebx
.text:004072F7                 mov     ebx, [esp+24h]
.text:004072FB                 mov     [esp], ebx
.text:004072FE                 call    malloc
.text:00407303                 test    eax, eax
.text:00407305                 mov     edx, eax
.text:00407307                 jz      short loc_407325
.text:00407309
.text:00407309 loc_407309:                             ; CODE XREF: .text:00407327↓j
.text:00407309                 mov     [esp+8], ebx
.text:0040730D                 mov     ecx, [esp+20h]
.text:00407311                 mov     [esp], edx
.text:00407314                 mov     [esp+4], ecx
.text:00407318                 call    memcpy
.text:0040731D                 mov     ebx, [esp+18h]
.text:00407321                 add     esp, 1Ch
.text:00407324                 retn
.text:00407325 ; ---------------------------------------------------------------------------
.text:00407325
.text:00407325 loc_407325:                             ; CODE XREF: .text:00407307↑j
.text:00407325                 test    ebx, ebx
.text:00407327                 jz      short loc_407309
.text:00407329                 call    sub_407420
.text:00407329 ; ---------------------------------------------------------------------------
.text:0040732E                 align 10h
.text:00407330                 sub     esp, 1Ch
.text:00407333                 mov     [esp+18h], esi
.text:00407337                 mov     esi, [esp+20h]
.text:0040733B                 mov     [esp+14h], ebx
.text:0040733F                 mov     [esp], esi
.text:00407342                 call    strlen
.text:00407347                 lea     ebx, [eax+1]
.text:0040734A                 mov     [esp], ebx
.text:0040734D                 call    malloc
.text:00407352                 test    eax, eax
.text:00407354                 jz      short loc_407372
.text:00407356
.text:00407356 loc_407356:                             ; CODE XREF: .text:00407374↓j
.text:00407356                 mov     [esp+8], ebx
.text:0040735A                 mov     [esp+4], esi
.text:0040735E                 mov     [esp], eax
.text:00407361                 call    memcpy
.text:00407366                 mov     ebx, [esp+14h]
.text:0040736A                 mov     esi, [esp+18h]
.text:0040736E                 add     esp, 1Ch
.text:00407371                 retn
.text:00407372 ; ---------------------------------------------------------------------------
.text:00407372
.text:00407372 loc_407372:                             ; CODE XREF: .text:00407354↑j
.text:00407372                 test    ebx, ebx
.text:00407374                 jz      short loc_407356
.text:00407376                 call    sub_407420
.text:00407376 ; ---------------------------------------------------------------------------
.text:0040737B                 align 10h
.text:00407380
.text:00407380 ; =============== S U B R O U T I N E =======================================
.text:00407380
.text:00407380
.text:00407380 ; int __cdecl sub_407380(void *, int, int)
.text:00407380 sub_407380      proc near               ; CODE XREF: .text:00407230↑j
.text:00407380                                         ; .text:0040725A↑p
.text:00407380
.text:00407380 Block           = dword ptr -1Ch
.text:00407380 Size            = dword ptr -18h
.text:00407380 var_C           = dword ptr -0Ch
.text:00407380 var_8           = dword ptr -8
.text:00407380 var_4           = dword ptr -4
.text:00407380 arg_0           = dword ptr  4
.text:00407380 arg_4           = dword ptr  8
.text:00407380 arg_8           = dword ptr  0Ch
.text:00407380
.text:00407380                 sub     esp, 1Ch
.text:00407383                 mov     [esp+1Ch+var_8], esi
.text:00407387                 mov     esi, [esp+1Ch+arg_0]
.text:0040738B                 mov     [esp+1Ch+var_4], edi
.text:0040738F                 mov     edi, [esp+1Ch+arg_4]
.text:00407393                 test    esi, esi
.text:00407395                 mov     [esp+1Ch+var_C], ebx
.text:00407399                 mov     ecx, [edi]
.text:0040739B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040739F                 jz      short loc_4073E0
.text:004073A1                 xor     edx, edx
.text:004073A3                 mov     eax, 7FFFFFFFh
.text:004073A8                 div     ebx
.text:004073AA                 cmp     eax, ecx
.text:004073AC                 jb      short loc_4073D9
.text:004073AE                 add     ecx, ecx
.text:004073B0
.text:004073B0 loc_4073B0:                             ; CODE XREF: sub_407380+62↓j
.text:004073B0                                         ; sub_407380+71↓j ...
.text:004073B0                 mov     [edi], ecx
.text:004073B2                 imul    ebx, ecx
.text:004073B5                 mov     [esp+1Ch+Block], esi ; Block
.text:004073B8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004073BC                 call    realloc
.text:004073C1                 test    eax, eax
.text:004073C3                 jz      short loc_4073D5
.text:004073C5
.text:004073C5 loc_4073C5:                             ; CODE XREF: sub_407380+57↓j
.text:004073C5                 mov     ebx, [esp+1Ch+var_C]
.text:004073C9                 mov     esi, [esp+1Ch+var_8]
.text:004073CD                 mov     edi, [esp+1Ch+var_4]
.text:004073D1                 add     esp, 1Ch
.text:004073D4                 retn
.text:004073D5 ; ---------------------------------------------------------------------------
.text:004073D5
.text:004073D5 loc_4073D5:                             ; CODE XREF: sub_407380+43↑j
.text:004073D5                 test    ebx, ebx
.text:004073D7                 jz      short loc_4073C5
.text:004073D9
.text:004073D9 loc_4073D9:                             ; CODE XREF: sub_407380+2C↑j
.text:004073D9                 call    sub_407420
.text:004073D9 ; ---------------------------------------------------------------------------
.text:004073DE                 align 10h
.text:004073E0
.text:004073E0 loc_4073E0:                             ; CODE XREF: sub_407380+1F↑j
.text:004073E0                 test    ecx, ecx
.text:004073E2                 jnz     short loc_4073B0
.text:004073E4                 xor     edx, edx
.text:004073E6                 mov     eax, 40h ; '@'
.text:004073EB                 div     ebx
.text:004073ED                 test    eax, eax
.text:004073EF                 mov     ecx, eax
.text:004073F1                 jnz     short loc_4073B0
.text:004073F3                 mov     ecx, 1
.text:004073F8                 jmp     short loc_4073B0
.text:004073F8 sub_407380      endp
.text:004073F8
.text:004073F8 ; ---------------------------------------------------------------------------
.text:004073FA                 align 10h
.text:00407400 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_407420+3↓o
.text:00407411 ; const char aS_0[]
.text:00407411 aS_0            db '%s',0               ; DATA XREF: sub_407420+10↓o
.text:00407414                 align 10h
.text:00407420
.text:00407420 ; =============== S U B R O U T I N E =======================================
.text:00407420
.text:00407420 ; Attributes: noreturn
.text:00407420
.text:00407420 sub_407420      proc near               ; CODE XREF: sub_406F60:loc_40711F↑p
.text:00407420                                         ; sub_407130:loc_407169↑p ...
.text:00407420
.text:00407420 Code            = dword ptr -1Ch
.text:00407420 ErrorMessage    = dword ptr -18h
.text:00407420 var_14          = dword ptr -14h
.text:00407420 var_10          = byte ptr -10h
.text:00407420
.text:00407420                 sub     esp, 1Ch
.text:00407423                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040742A                 call    ds:__imp_libintl_gettext
.text:00407430                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00407438                 mov     edx, Code
.text:0040743E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00407446                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040744A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040744D                 call    sub_4074B0
.text:00407452                 call    abort
.text:00407452 sub_407420      endp
.text:00407452
.text:00407452 ; ---------------------------------------------------------------------------
.text:00407457                 align 10h
.text:00407460
.text:00407460 ; =============== S U B R O U T I N E =======================================
.text:00407460
.text:00407460 ; Attributes: thunk
.text:00407460
.text:00407460 libintl_gettext proc near
.text:00407460                 jmp     ds:__imp_libintl_gettext
.text:00407460 libintl_gettext endp
.text:00407460
.text:00407460 ; ---------------------------------------------------------------------------
.text:00407466                 align 10h
.text:00407470                 jmp     ds:libintl_bindtextdomain
.text:00407470 ; ---------------------------------------------------------------------------
.text:00407476                 align 10h
.text:00407480                 jmp     ds:libintl_textdomain
.text:00407480 ; ---------------------------------------------------------------------------
.text:00407486                 align 10h
.text:00407490 ; const char aS_1[]
.text:00407490 aS_1            db ': %s',0             ; DATA XREF: sub_4074B0+B8↓o
.text:00407490                                         ; sub_4075B4+122↓o
.text:00407495 aUnknownSystemE db 'Unknown system error',0
.text:00407495                                         ; DATA XREF: sub_4074B0:loc_40757D↓o
.text:00407495                                         ; sub_4075B4:loc_4076EE↓o
.text:004074AA ; const char aS_2[]
.text:004074AA aS_2            db '%s: ',0             ; DATA XREF: sub_4074B0:loc_407584↓o
.text:004074AF                 align 10h
.text:004074B0
.text:004074B0 ; =============== S U B R O U T I N E =======================================
.text:004074B0
.text:004074B0
.text:004074B0 ; int __cdecl sub_4074B0(int Code, int ErrorMessage, char *, char)
.text:004074B0 sub_4074B0      proc near               ; CODE XREF: sub_4045F0+86↑p
.text:004074B0                                         ; sub_4045F0+AF↑p ...
.text:004074B0
.text:004074B0 Stream          = dword ptr -1Ch
.text:004074B0 Format          = dword ptr -18h
.text:004074B0 ArgList         = dword ptr -14h
.text:004074B0 Code            = dword ptr  4
.text:004074B0 ErrorMessage    = dword ptr  8
.text:004074B0 arg_8           = dword ptr  0Ch
.text:004074B0 arg_C           = byte ptr  10h
.text:004074B0
.text:004074B0                 push    esi
.text:004074B1                 push    ebx
.text:004074B2                 sub     esp, 14h
.text:004074B5                 mov     edx, ds:_iob
.text:004074BB                 mov     esi, [esp+1Ch+Code]
.text:004074BF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004074C3                 add     edx, 20h ; ' '
.text:004074C6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004074C9                 call    fflush
.text:004074CE                 mov     eax, ds:dword_411540
.text:004074D3                 test    eax, eax
.text:004074D5                 jz      loc_407584
.text:004074DB                 call    eax ; dword_411540
.text:004074DD
.text:004074DD loc_4074DD:                             ; CODE XREF: sub_4074B0+F7↓j
.text:004074DD                 lea     edx, [esp+1Ch+arg_C]
.text:004074E1                 mov     ecx, [esp+1Ch+arg_8]
.text:004074E5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004074E9                 mov     edx, ds:_iob
.text:004074EF                 mov     [esp+1Ch+Format], ecx ; Format
.text:004074F3                 add     edx, 40h ; '@'
.text:004074F6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004074F9                 call    vfprintf
.text:004074FE                 inc     ds:dword_411550
.text:00407504                 test    ebx, ebx
.text:00407506                 jnz     short loc_407552
.text:00407508
.text:00407508 loc_407508:                             ; CODE XREF: sub_4074B0+CB↓j
.text:00407508                 mov     edx, ds:_iob
.text:0040750E                 lea     ecx, [edx+40h]
.text:00407511                 mov     ebx, [ecx+4]
.text:00407514                 dec     ebx
.text:00407515                 test    ebx, ebx
.text:00407517                 mov     [ecx+4], ebx
.text:0040751A                 js      short loc_407540
.text:0040751C                 mov     ecx, [edx+40h]
.text:0040751F                 mov     byte ptr [ecx], 0Ah
.text:00407522                 inc     dword ptr [edx+40h]
.text:00407525
.text:00407525 loc_407525:                             ; CODE XREF: sub_4074B0+A0↓j
.text:00407525                 mov     edx, ds:_iob
.text:0040752B                 add     edx, 40h ; '@'
.text:0040752E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407531                 call    fflush
.text:00407536                 test    esi, esi
.text:00407538                 jnz     short loc_4075AC
.text:0040753A                 add     esp, 14h
.text:0040753D                 pop     ebx
.text:0040753E                 pop     esi
.text:0040753F                 retn
.text:00407540 ; ---------------------------------------------------------------------------
.text:00407540
.text:00407540 loc_407540:                             ; CODE XREF: sub_4074B0+6A↑j
.text:00407540                 mov     [esp+1Ch+Format], ecx ; File
.text:00407544                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040754B                 call    _flsbuf
.text:00407550                 jmp     short loc_407525
.text:00407552 ; ---------------------------------------------------------------------------
.text:00407552
.text:00407552 loc_407552:                             ; CODE XREF: sub_4074B0+56↑j
.text:00407552                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00407555                 call    strerror
.text:0040755A                 test    eax, eax
.text:0040755C                 jz      short loc_40757D
.text:0040755E
.text:0040755E loc_40755E:                             ; CODE XREF: sub_4074B0+D2↓j
.text:0040755E                 mov     [esp+1Ch+ArgList], eax
.text:00407562                 mov     ebx, ds:_iob
.text:00407568                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00407570                 add     ebx, 40h ; '@'
.text:00407573                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00407576                 call    fprintf
.text:0040757B                 jmp     short loc_407508
.text:0040757D ; ---------------------------------------------------------------------------
.text:0040757D
.text:0040757D loc_40757D:                             ; CODE XREF: sub_4074B0+AC↑j
.text:0040757D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00407582                 jmp     short loc_40755E
.text:00407584 ; ---------------------------------------------------------------------------
.text:00407584
.text:00407584 loc_407584:                             ; CODE XREF: sub_4074B0+25↑j
.text:00407584                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:0040758C                 mov     edx, ds:_iob
.text:00407592                 mov     ecx, ds:dword_411510
.text:00407598                 add     edx, 40h ; '@'
.text:0040759B                 mov     [esp+1Ch+ArgList], ecx
.text:0040759F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004075A2                 call    fprintf
.text:004075A7                 jmp     loc_4074DD
.text:004075AC ; ---------------------------------------------------------------------------
.text:004075AC
.text:004075AC loc_4075AC:                             ; CODE XREF: sub_4074B0+88↑j
.text:004075AC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004075AF                 call    exit
.text:004075AF sub_4074B0      endp
.text:004075AF
.text:004075B4
.text:004075B4 ; =============== S U B R O U T I N E =======================================
.text:004075B4
.text:004075B4
.text:004075B4 ; int __cdecl sub_4075B4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004075B4 sub_4075B4      proc near               ; DATA XREF: sub_4075B4+77↓o
.text:004075B4
.text:004075B4 Stream          = dword ptr -28h
.text:004075B4 Format          = dword ptr -24h
.text:004075B4 ArgList         = dword ptr -20h
.text:004075B4 var_1C          = dword ptr -1Ch
.text:004075B4 Code            = dword ptr  8
.text:004075B4 ErrorMessage    = dword ptr  0Ch
.text:004075B4 Str2            = dword ptr  10h
.text:004075B4 arg_10          = dword ptr  14h
.text:004075B4 arg_14          = dword ptr  18h
.text:004075B4 arg_18          = byte ptr  1Ch
.text:004075B4
.text:004075B4                 and     eax, 64253A73h
.text:004075B9                 cmp     ah, [eax]
.text:004075BB
.text:004075BB loc_4075BB:                             ; DATA XREF: sub_4075B4:loc_4076F5↓o
.text:004075BB                 add     ds:55003A73h, ah
.text:004075C1                 push    edi
.text:004075C2                 push    esi
.text:004075C3                 push    ebx
.text:004075C4                 sub     esp, 1Ch
.text:004075C7                 mov     edx, ds:dword_411580
.text:004075CD                 mov     ebp, [esp+28h+Code]
.text:004075D1                 mov     edi, [esp+28h+ErrorMessage]
.text:004075D5                 test    edx, edx
.text:004075D7                 mov     ebx, [esp+28h+Str2]
.text:004075DB                 mov     esi, [esp+28h+arg_10]
.text:004075DF                 jz      short loc_4075F9
.text:004075E1                 cmp     ds:dword_4111B0, esi
.text:004075E7                 jz      loc_407720
.text:004075ED
.text:004075ED loc_4075ED:                             ; CODE XREF: sub_4075B4+18D↓j
.text:004075ED                 mov     ds:Str1, ebx
.text:004075F3                 mov     ds:dword_4111B0, esi
.text:004075F9
.text:004075F9 loc_4075F9:                             ; CODE XREF: sub_4075B4+2B↑j
.text:004075F9                 mov     edx, ds:_iob
.text:004075FF                 add     edx, 20h ; ' '
.text:00407602                 mov     [esp+28h+Stream], edx ; Stream
.text:00407605                 call    fflush
.text:0040760A                 mov     eax, ds:dword_411540
.text:0040760F                 test    eax, eax
.text:00407611                 jz      loc_4076F5
.text:00407617                 call    eax ; dword_411540
.text:00407619
.text:00407619 loc_407619:                             ; CODE XREF: sub_4075B4+164↓j
.text:00407619                 test    ebx, ebx
.text:0040761B                 jz      short loc_40763E
.text:0040761D                 mov     [esp+28h+ArgList], ebx
.text:00407621                 mov     ebx, ds:_iob
.text:00407627                 mov     [esp+28h+var_1C], esi
.text:0040762B                 mov     [esp+28h+Format], offset sub_4075B4 ; Format
.text:00407633                 add     ebx, 40h ; '@'
.text:00407636                 mov     [esp+28h+Stream], ebx ; Stream
.text:00407639                 call    fprintf
.text:0040763E
.text:0040763E loc_40763E:                             ; CODE XREF: sub_4075B4+67↑j
.text:0040763E                 mov     esi, ds:_iob
.text:00407644                 lea     edx, [esp+28h+arg_18]
.text:00407648                 mov     ecx, [esp+28h+arg_14]
.text:0040764C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00407650                 add     esi, 40h ; '@'
.text:00407653                 mov     [esp+28h+Format], ecx ; Format
.text:00407657                 mov     [esp+28h+Stream], esi ; Stream
.text:0040765A                 call    vfprintf
.text:0040765F                 inc     ds:dword_411550
.text:00407665                 test    edi, edi
.text:00407667                 jnz     short loc_4076C0
.text:00407669
.text:00407669 loc_407669:                             ; CODE XREF: sub_4075B4+135↓j
.text:00407669                 mov     edx, ds:_iob
.text:0040766F                 lea     ecx, [edx+40h]
.text:00407672                 mov     ebx, [ecx+4]
.text:00407675                 dec     ebx
.text:00407676                 test    ebx, ebx
.text:00407678                 mov     [ecx+4], ebx
.text:0040767B                 js      short loc_4076A7
.text:0040767D                 mov     esi, [edx+40h]
.text:00407680                 mov     byte ptr [esi], 0Ah
.text:00407683                 inc     dword ptr [edx+40h]
.text:00407686
.text:00407686 loc_407686:                             ; CODE XREF: sub_4075B4+103↓j
.text:00407686                 mov     ecx, ds:_iob
.text:0040768C                 add     ecx, 40h ; '@'
.text:0040768F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00407692                 call    fflush
.text:00407697                 test    ebp, ebp
.text:00407699                 jnz     loc_407746
.text:0040769F
.text:0040769F loc_40769F:                             ; CODE XREF: sub_4075B4+173↓j
.text:0040769F                                         ; sub_4075B4+187↓j
.text:0040769F                 add     esp, 1Ch
.text:004076A2                 pop     ebx
.text:004076A3                 pop     esi
.text:004076A4                 pop     edi
.text:004076A5                 pop     ebp
.text:004076A6                 retn
.text:004076A7 ; ---------------------------------------------------------------------------
.text:004076A7
.text:004076A7 loc_4076A7:                             ; CODE XREF: sub_4075B4+C7↑j
.text:004076A7                 mov     [esp+28h+Format], ecx ; File
.text:004076AB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004076B2                 call    _flsbuf
.text:004076B7                 jmp     short loc_407686
.text:004076B7 ; ---------------------------------------------------------------------------
.text:004076B9                 align 10h
.text:004076C0
.text:004076C0 loc_4076C0:                             ; CODE XREF: sub_4075B4+B3↑j
.text:004076C0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004076C3                 call    strerror
.text:004076C8                 test    eax, eax
.text:004076CA                 jz      short loc_4076EE
.text:004076CC
.text:004076CC loc_4076CC:                             ; CODE XREF: sub_4075B4+13F↓j
.text:004076CC                 mov     [esp+28h+ArgList], eax
.text:004076D0                 mov     edi, ds:_iob
.text:004076D6                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:004076DE                 add     edi, 40h ; '@'
.text:004076E1                 mov     [esp+28h+Stream], edi ; Stream
.text:004076E4                 call    fprintf
.text:004076E9                 jmp     loc_407669
.text:004076EE ; ---------------------------------------------------------------------------
.text:004076EE
.text:004076EE loc_4076EE:                             ; CODE XREF: sub_4075B4+116↑j
.text:004076EE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004076F3                 jmp     short loc_4076CC
.text:004076F5 ; ---------------------------------------------------------------------------
.text:004076F5
.text:004076F5 loc_4076F5:                             ; CODE XREF: sub_4075B4+5D↑j
.text:004076F5                 mov     [esp+28h+Format], (offset loc_4075BB+1) ; Format
.text:004076FD                 mov     ecx, ds:_iob
.text:00407703                 mov     edx, ds:dword_411510
.text:00407709                 add     ecx, 40h ; '@'
.text:0040770C                 mov     [esp+28h+ArgList], edx
.text:00407710                 mov     [esp+28h+Stream], ecx ; Stream
.text:00407713                 call    fprintf
.text:00407718                 jmp     loc_407619
.text:00407718 ; ---------------------------------------------------------------------------
.text:0040771D                 align 10h
.text:00407720
.text:00407720 loc_407720:                             ; CODE XREF: sub_4075B4+33↑j
.text:00407720                 mov     eax, ds:Str1
.text:00407725                 cmp     ebx, eax
.text:00407727                 jz      loc_40769F
.text:0040772D                 mov     [esp+28h+Format], ebx ; Str2
.text:00407731                 mov     [esp+28h+Stream], eax ; Str1
.text:00407734                 call    strcmp
.text:00407739                 test    eax, eax
.text:0040773B                 jz      loc_40769F
.text:00407741                 jmp     loc_4075ED
.text:00407746 ; ---------------------------------------------------------------------------
.text:00407746
.text:00407746 loc_407746:                             ; CODE XREF: sub_4075B4+E5↑j
.text:00407746                 mov     [esp+28h+Stream], ebp ; Code
.text:00407749                 call    exit
.text:00407749 sub_4075B4      endp ; sp-analysis failed
.text:00407749
.text:00407749 ; ---------------------------------------------------------------------------
.text:0040774E                 align 10h
.text:00407750
.text:00407750 ; =============== S U B R O U T I N E =======================================
.text:00407750
.text:00407750
.text:00407750 ; int __cdecl sub_407750(LPCSTR, int)
.text:00407750 sub_407750      proc near               ; CODE XREF: sub_401DB0+5A2↑p
.text:00407750
.text:00407750 lpFileName      = dword ptr -7Ch
.text:00407750 var_78          = dword ptr -78h
.text:00407750 var_74          = dword ptr -74h
.text:00407750 var_6C          = dword ptr -6Ch
.text:00407750 var_50          = dword ptr -50h
.text:00407750 var_4C          = dword ptr -4Ch
.text:00407750 var_4           = dword ptr -4
.text:00407750 arg_0           = dword ptr  4
.text:00407750 arg_4           = dword ptr  8
.text:00407750
.text:00407750                 sub     esp, 7Ch
.text:00407753                 mov     ecx, ds:dword_4111F0
.text:00407759                 mov     [esp+7Ch+var_4], ebx
.text:0040775D                 mov     edx, [esp+7Ch+arg_0]
.text:00407764                 mov     ebx, [esp+7Ch+arg_4]
.text:0040776B                 test    ecx, ecx
.text:0040776D                 jnz     short loc_407787
.text:0040776F                 mov     [esp+7Ch+lpFileName], edx ; lpFileName
.text:00407772                 mov     [esp+7Ch+var_78], ebx ; int
.text:00407776                 call    sub_407AA0
.text:0040777B                 mov     edx, eax
.text:0040777D
.text:0040777D loc_40777D:                             ; CODE XREF: sub_407750+56↓j
.text:0040777D                                         ; sub_407750+82↓j ...
.text:0040777D                 mov     ebx, [esp+7Ch+var_4]
.text:00407781                 mov     eax, edx
.text:00407783                 add     esp, 7Ch
.text:00407786                 retn
.text:00407787 ; ---------------------------------------------------------------------------
.text:00407787
.text:00407787 loc_407787:                             ; CODE XREF: sub_407750+1D↑j
.text:00407787                 mov     [esp+7Ch+var_78], edx ; char *
.text:0040778B                 lea     ecx, [esp+7Ch+var_6C]
.text:0040778F                 mov     [esp+7Ch+var_74], ecx ; int
.text:00407793                 mov     [esp+7Ch+lpFileName], 0 ; LPCSTR
.text:0040779A                 call    sub_407910
.text:0040779F                 test    eax, eax
.text:004077A1                 mov     edx, 0FFFFFFFFh
.text:004077A6                 jnz     short loc_40777D
.text:004077A8                 and     ebx, 7
.text:004077AB                 jz      short loc_4077D0
.text:004077AD                 mov     edx, ds:dword_4111E0
.text:004077B3                 test    edx, edx
.text:004077B5                 jz      loc_407839
.text:004077BB
.text:004077BB loc_4077BB:                             ; CODE XREF: sub_407750+108↓j
.text:004077BB                 mov     eax, ds:dword_4111C0
.text:004077C0                 test    eax, eax
.text:004077C2                 jnz     short loc_4077D4
.text:004077C4                 test    bl, 1
.text:004077C7                 jz      short loc_4077D0
.text:004077C9                 test    byte ptr [esp+7Ch+var_6C], 49h
.text:004077CE                 jz      short loc_4077D4
.text:004077D0
.text:004077D0 loc_4077D0:                             ; CODE XREF: sub_407750+5B↑j
.text:004077D0                                         ; sub_407750+77↑j
.text:004077D0                 xor     edx, edx
.text:004077D2                 jmp     short loc_40777D
.text:004077D4 ; ---------------------------------------------------------------------------
.text:004077D4
.text:004077D4 loc_4077D4:                             ; CODE XREF: sub_407750+72↑j
.text:004077D4                                         ; sub_407750+7E↑j
.text:004077D4                 cmp     eax, [esp+7Ch+var_50]
.text:004077D8                 jz      short loc_407829
.text:004077DA                 mov     eax, [esp+7Ch+var_4C]
.text:004077DE                 cmp     ds:dword_4111D0, eax
.text:004077E4                 jz      short loc_4077F2
.text:004077E6                 mov     [esp+7Ch+lpFileName], eax
.text:004077E9                 call    sub_407A40
.text:004077EE                 test    eax, eax
.text:004077F0                 jz      short loc_407821
.text:004077F2
.text:004077F2 loc_4077F2:                             ; CODE XREF: sub_407750+94↑j
.text:004077F2                 mov     ecx, [esp+7Ch+var_6C]
.text:004077F6                 lea     eax, ds:0[ebx*8]
.text:004077FD                 and     eax, ecx
.text:004077FF                 shr     eax, 3
.text:00407802
.text:00407802 loc_407802:                             ; CODE XREF: sub_407750+D7↓j
.text:00407802                                         ; sub_407750+E7↓j
.text:00407802                 xor     edx, edx
.text:00407804                 cmp     eax, ebx
.text:00407806                 jz      loc_40777D
.text:0040780C                 call    _errno
.text:00407811                 mov     dword ptr [eax], 0Dh
.text:00407817                 mov     edx, 0FFFFFFFFh
.text:0040781C                 jmp     loc_40777D
.text:00407821 ; ---------------------------------------------------------------------------
.text:00407821
.text:00407821 loc_407821:                             ; CODE XREF: sub_407750+A0↑j
.text:00407821                 mov     eax, [esp+7Ch+var_6C]
.text:00407825                 and     eax, ebx
.text:00407827                 jmp     short loc_407802
.text:00407829 ; ---------------------------------------------------------------------------
.text:00407829
.text:00407829 loc_407829:                             ; CODE XREF: sub_407750+88↑j
.text:00407829                 mov     edx, [esp+7Ch+var_6C]
.text:0040782D                 mov     eax, ebx
.text:0040782F                 shl     eax, 6
.text:00407832                 and     eax, edx
.text:00407834                 shr     eax, 6
.text:00407837                 jmp     short loc_407802
.text:00407839 ; ---------------------------------------------------------------------------
.text:00407839
.text:00407839 loc_407839:                             ; CODE XREF: sub_407750+65↑j
.text:00407839                 mov     ecx, 1
.text:0040783E                 mov     ds:dword_4111E0, ecx
.text:00407844                 call    sub_4079E0
.text:00407849                 mov     ds:dword_4111C0, eax
.text:0040784E                 call    sub_4079D0
.text:00407853                 mov     ds:dword_4111D0, eax
.text:00407858                 jmp     loc_4077BB
.text:00407858 sub_407750      endp
.text:00407858
.text:00407858 ; ---------------------------------------------------------------------------
.text:0040785D                 align 10h
.text:00407860
.text:00407860 ; =============== S U B R O U T I N E =======================================
.text:00407860
.text:00407860
.text:00407860 sub_407860      proc near               ; CODE XREF: sub_401DB0+490↑p
.text:00407860
.text:00407860 var_C           = dword ptr -0Ch
.text:00407860 var_8           = dword ptr -8
.text:00407860 var_4           = dword ptr -4
.text:00407860 arg_0           = dword ptr  4
.text:00407860 arg_4           = dword ptr  8
.text:00407860
.text:00407860                 sub     esp, 0Ch
.text:00407863                 mov     edx, [esp+0Ch+arg_4]
.text:00407867                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040786E                 mov     [esp+0Ch+var_4], edx ; int
.text:00407872                 mov     edx, [esp+0Ch+arg_0]
.text:00407876                 mov     [esp+0Ch+var_8], edx ; int
.text:0040787A                 call    sub_407890
.text:0040787F                 add     esp, 0Ch
.text:00407882                 retn
.text:00407882 sub_407860      endp
.text:00407882
.text:00407882 ; ---------------------------------------------------------------------------
.text:00407883                 align 10h
.text:00407890
.text:00407890 ; =============== S U B R O U T I N E =======================================
.text:00407890
.text:00407890
.text:00407890 ; int __cdecl sub_407890(LPCSTR, int, int)
.text:00407890 sub_407890      proc near               ; CODE XREF: sub_407860+1A↑p
.text:00407890                                         ; sub_407910+42↓p ...
.text:00407890
.text:00407890 lpFileName      = dword ptr -2Ch
.text:00407890 dwDesiredAccess = dword ptr -28h
.text:00407890 dwShareMode     = dword ptr -24h
.text:00407890 lpSecurityAttributes= dword ptr -20h
.text:00407890 dwCreationDisposition= dword ptr -1Ch
.text:00407890 dwFlagsAndAttributes= dword ptr -18h
.text:00407890 hTemplateFile   = dword ptr -14h
.text:00407890 var_10          = dword ptr -10h
.text:00407890 var_C           = dword ptr -0Ch
.text:00407890 var_8           = dword ptr -8
.text:00407890 var_4           = dword ptr -4
.text:00407890 arg_0           = dword ptr  4
.text:00407890 arg_4           = dword ptr  8
.text:00407890 arg_8           = dword ptr  0Ch
.text:00407890
.text:00407890 ; FUNCTION CHUNK AT .text:00409560 SIZE 0000013A BYTES
.text:00407890
.text:00407890                 sub     esp, 0Ch
.text:00407893                 mov     ecx, [esp+0Ch+arg_0]
.text:00407897                 mov     edx, [esp+0Ch+arg_4]
.text:0040789B                 mov     eax, [esp+0Ch+arg_8]
.text:0040789F                 test    ecx, ecx
.text:004078A1                 jnz     short loc_4078C0
.text:004078A3                 test    edx, edx
.text:004078A5                 jz      short loc_4078C0
.text:004078A7                 test    eax, eax
.text:004078A9                 jz      short loc_4078C0
.text:004078AB                 mov     [esp+0Ch+arg_4], eax
.text:004078AF                 mov     [esp+0Ch+arg_0], edx
.text:004078B3                 add     esp, 0Ch
.text:004078B6                 jmp     loc_409560
.text:004078B6 ; ---------------------------------------------------------------------------
.text:004078BB                 align 10h
.text:004078C0
.text:004078C0 loc_4078C0:                             ; CODE XREF: sub_407890+11↑j
.text:004078C0                                         ; sub_407890+15↑j ...
.text:004078C0                 call    _errno
.text:004078C5                 mov     dword ptr [eax], 16h
.text:004078CB                 mov     eax, 0FFFFFFFFh
.text:004078D0                 add     esp, 0Ch
.text:004078D3                 retn
.text:004078D3 sub_407890      endp
.text:004078D3
.text:004078D3 ; ---------------------------------------------------------------------------
.text:004078D4                 align 10h
.text:004078E0
.text:004078E0 ; =============== S U B R O U T I N E =======================================
.text:004078E0
.text:004078E0
.text:004078E0 ; int __cdecl sub_4078E0(char *, int)
.text:004078E0 sub_4078E0      proc near               ; CODE XREF: sub_4013A0+441↑p
.text:004078E0                                         ; sub_4013A0+46C↑p ...
.text:004078E0
.text:004078E0 var_C           = dword ptr -0Ch
.text:004078E0 var_8           = dword ptr -8
.text:004078E0 var_4           = dword ptr -4
.text:004078E0 arg_0           = dword ptr  4
.text:004078E0 arg_4           = dword ptr  8
.text:004078E0
.text:004078E0                 sub     esp, 0Ch
.text:004078E3                 mov     edx, [esp+0Ch+arg_4]
.text:004078E7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:004078EE                 mov     [esp+0Ch+var_4], edx ; int
.text:004078F2                 mov     edx, [esp+0Ch+arg_0]
.text:004078F6                 mov     [esp+0Ch+var_8], edx ; char *
.text:004078FA                 call    sub_407910
.text:004078FF                 add     esp, 0Ch
.text:00407902                 retn
.text:00407902 sub_4078E0      endp
.text:00407902
.text:00407902 ; ---------------------------------------------------------------------------
.text:00407903                 align 10h
.text:00407910
.text:00407910 ; =============== S U B R O U T I N E =======================================
.text:00407910
.text:00407910
.text:00407910 ; int __cdecl sub_407910(LPCSTR, char *, int)
.text:00407910 sub_407910      proc near               ; CODE XREF: sub_407750+4A↑p
.text:00407910                                         ; sub_4078E0+1A↑p ...
.text:00407910
.text:00407910 var_13C         = dword ptr -13Ch
.text:00407910 lpString1       = dword ptr -138h
.text:00407910 var_134         = dword ptr -134h
.text:00407910 String1         = byte ptr -12Ch
.text:00407910 var_10          = dword ptr -10h
.text:00407910 var_C           = dword ptr -0Ch
.text:00407910 var_8           = dword ptr -8
.text:00407910 var_4           = dword ptr -4
.text:00407910 arg_0           = dword ptr  4
.text:00407910 arg_4           = dword ptr  8
.text:00407910 arg_8           = dword ptr  0Ch
.text:00407910
.text:00407910                 sub     esp, 13Ch
.text:00407916                 mov     [esp+13Ch+var_10], ebx
.text:0040791D                 mov     ebx, [esp+13Ch+arg_8]
.text:00407924                 mov     [esp+13Ch+var_C], esi
.text:0040792B                 mov     esi, [esp+13Ch+arg_4]
.text:00407932                 mov     [esp+13Ch+var_8], edi
.text:00407939                 mov     edi, [esp+13Ch+arg_0]
.text:00407940                 mov     [esp+13Ch+var_4], ebp
.text:00407947                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040794B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040794F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00407952                 call    sub_407890
.text:00407957                 cmp     eax, 0FFFFFFFFh
.text:0040795A                 mov     edx, eax
.text:0040795C                 jz      short loc_40796E
.text:0040795E                 mov     ecx, [ebx]
.text:00407960                 and     ecx, 0F000h
.text:00407966                 cmp     ecx, 0A000h
.text:0040796C                 jz      short loc_407993
.text:0040796E
.text:0040796E loc_40796E:                             ; CODE XREF: sub_407910+4C↑j
.text:0040796E                                         ; sub_407910+A1↓j ...
.text:0040796E                 mov     ebx, [esp+13Ch+var_10]
.text:00407975                 mov     eax, edx
.text:00407977                 mov     esi, [esp+13Ch+var_C]
.text:0040797E                 mov     edi, [esp+13Ch+var_8]
.text:00407985                 mov     ebp, [esp+13Ch+var_4]
.text:0040798C                 add     esp, 13Ch
.text:00407992                 retn
.text:00407993 ; ---------------------------------------------------------------------------
.text:00407993
.text:00407993 loc_407993:                             ; CODE XREF: sub_407910+5C↑j
.text:00407993                 mov     [esp+13Ch+var_134], 104h
.text:0040799B                 lea     ebp, [esp+13Ch+String1]
.text:0040799F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:004079A3                 mov     [esp+13Ch+var_13C], esi ; char *
.text:004079A6                 call    sub_409820
.text:004079AB                 inc     eax
.text:004079AC                 mov     edx, 0FFFFFFFFh
.text:004079B1                 jz      short loc_40796E
.text:004079B3                 mov     [esp+13Ch+var_134], ebx ; int
.text:004079B7                 mov     [esp+13Ch+lpString1], ebp ; int
.text:004079BB                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004079BE                 call    sub_407890
.text:004079C3                 mov     edx, eax
.text:004079C5                 jmp     short loc_40796E
.text:004079C5 sub_407910      endp
.text:004079C5
.text:004079C5 ; ---------------------------------------------------------------------------
.text:004079C7                 align 10h
.text:004079D0
.text:004079D0 ; =============== S U B R O U T I N E =======================================
.text:004079D0
.text:004079D0
.text:004079D0 sub_4079D0      proc near               ; CODE XREF: sub_401DB0:loc_401F15↑p
.text:004079D0                                         ; sub_407750+FE↑p ...
.text:004079D0                 xor     eax, eax
.text:004079D2                 retn
.text:004079D2 sub_4079D0      endp
.text:004079D2
.text:004079D2 ; ---------------------------------------------------------------------------
.text:004079D3                 align 10h
.text:004079E0
.text:004079E0 ; =============== S U B R O U T I N E =======================================
.text:004079E0
.text:004079E0
.text:004079E0 sub_4079E0      proc near               ; CODE XREF: sub_401DB0+233↑p
.text:004079E0                                         ; sub_407750+F4↑p ...
.text:004079E0                 xor     eax, eax
.text:004079E2                 retn
.text:004079E2 sub_4079E0      endp
.text:004079E2
.text:004079E2 ; ---------------------------------------------------------------------------
.text:004079E3                 align 10h
.text:004079F0                 sub     esp, 0Ch
.text:004079F3                 mov     [esp+4], ebx
.text:004079F7                 mov     [esp+8], esi
.text:004079FB                 xor     esi, esi
.text:004079FD                 call    sub_4079E0
.text:00407A02                 mov     ebx, eax
.text:00407A04                 call    sub_409910
.text:00407A09                 cmp     ebx, eax
.text:00407A0B                 jz      short loc_407A24
.text:00407A0D
.text:00407A0D loc_407A0D:                             ; CODE XREF: .text:00407A32↓j
.text:00407A0D                 mov     esi, 1
.text:00407A12
.text:00407A12 loc_407A12:                             ; CODE XREF: .text:00407A34↓j
.text:00407A12                 mov     ds:dword_4111F0, esi
.text:00407A18                 mov     ebx, [esp+4]
.text:00407A1C                 mov     esi, [esp+8]
.text:00407A20                 add     esp, 0Ch
.text:00407A23                 retn
.text:00407A24 ; ---------------------------------------------------------------------------
.text:00407A24
.text:00407A24 loc_407A24:                             ; CODE XREF: .text:00407A0B↑j
.text:00407A24                 call    sub_4079D0
.text:00407A29                 mov     ebx, eax
.text:00407A2B                 call    sub_409900
.text:00407A30                 cmp     ebx, eax
.text:00407A32                 jnz     short loc_407A0D
.text:00407A34                 jmp     short loc_407A12
.text:00407A34 ; ---------------------------------------------------------------------------
.text:00407A36                 align 10h
.text:00407A40
.text:00407A40 ; =============== S U B R O U T I N E =======================================
.text:00407A40
.text:00407A40
.text:00407A40 sub_407A40      proc near               ; CODE XREF: sub_407750+99↑p
.text:00407A40
.text:00407A40 Size            = dword ptr -1Ch
.text:00407A40 var_18          = dword ptr -18h
.text:00407A40 arg_0           = dword ptr  4
.text:00407A40
.text:00407A40                 push    edi
.text:00407A41                 push    esi
.text:00407A42                 push    ebx
.text:00407A43                 sub     esp, 10h
.text:00407A46                 xor     ebx, ebx
.text:00407A48                 mov     edi, [esp+1Ch+arg_0]
.text:00407A4C                 lea     esi, [esi+0]
.text:00407A50
.text:00407A50 loc_407A50:                             ; CODE XREF: sub_407A40+38↓j
.text:00407A50                 lea     edx, ds:0[ebx*4]
.text:00407A57                 mov     [esp+1Ch+Size], edx ; Size
.text:00407A5A                 call    malloc
.text:00407A5F                 mov     [esp+1Ch+var_18], eax
.text:00407A63                 mov     esi, eax
.text:00407A65                 mov     [esp+1Ch+Size], ebx
.text:00407A68                 call    sub_409920
.text:00407A6D                 lea     ecx, [ebx+ebx]
.text:00407A70                 mov     edx, eax
.text:00407A72                 mov     ebx, ecx
.text:00407A74                 sar     ecx, 1
.text:00407A76                 cmp     eax, ecx
.text:00407A78                 jz      short loc_407A50
.text:00407A7A                 test    eax, eax
.text:00407A7C                 js      short loc_407A8C
.text:00407A7E                 mov     esi, esi
.text:00407A80
.text:00407A80 loc_407A80:                             ; CODE XREF: sub_407A40+4A↓j
.text:00407A80                 mov     ecx, edx
.text:00407A82                 dec     edx
.text:00407A83                 cmp     [esi+ecx*4], edi
.text:00407A86                 jz      short loc_407A95
.text:00407A88                 test    edx, edx
.text:00407A8A                 jns     short loc_407A80
.text:00407A8C
.text:00407A8C loc_407A8C:                             ; CODE XREF: sub_407A40+3C↑j
.text:00407A8C                 xor     eax, eax
.text:00407A8E
.text:00407A8E loc_407A8E:                             ; CODE XREF: sub_407A40+5A↓j
.text:00407A8E                 add     esp, 10h
.text:00407A91                 pop     ebx
.text:00407A92                 pop     esi
.text:00407A93                 pop     edi
.text:00407A94                 retn
.text:00407A95 ; ---------------------------------------------------------------------------
.text:00407A95
.text:00407A95 loc_407A95:                             ; CODE XREF: sub_407A40+46↑j
.text:00407A95                 mov     eax, 1
.text:00407A9A                 jmp     short loc_407A8E
.text:00407A9A sub_407A40      endp
.text:00407A9A
.text:00407A9A ; ---------------------------------------------------------------------------
.text:00407A9C                 align 10h
.text:00407AA0
.text:00407AA0 ; =============== S U B R O U T I N E =======================================
.text:00407AA0
.text:00407AA0
.text:00407AA0 ; int __cdecl sub_407AA0(LPCSTR lpFileName, int)
.text:00407AA0 sub_407AA0      proc near               ; CODE XREF: sub_407750+26↑p
.text:00407AA0                                         ; sub_407890+1D23↓p ...
.text:00407AA0
.text:00407AA0 uMode           = dword ptr -1Ch
.text:00407AA0 var_10          = dword ptr -10h
.text:00407AA0 var_C           = dword ptr -0Ch
.text:00407AA0 var_8           = dword ptr -8
.text:00407AA0 var_4           = dword ptr -4
.text:00407AA0 lpFileName      = dword ptr  4
.text:00407AA0 arg_4           = dword ptr  8
.text:00407AA0
.text:00407AA0                 sub     esp, 1Ch
.text:00407AA3                 mov     [esp+1Ch+var_10], ebx
.text:00407AA7                 mov     ebx, [esp+1Ch+lpFileName]
.text:00407AAB                 mov     [esp+1Ch+var_4], ebp
.text:00407AAF                 xor     ebp, ebp
.text:00407AB1                 test    ebx, ebx
.text:00407AB3                 mov     [esp+1Ch+var_C], esi
.text:00407AB7                 mov     esi, [esp+1Ch+arg_4]
.text:00407ABB                 mov     [esp+1Ch+var_8], edi
.text:00407ABF                 jz      short loc_407AC9
.text:00407AC1                 test    esi, 0FFFFFFE8h
.text:00407AC7                 jz      short loc_407AF0
.text:00407AC9
.text:00407AC9 loc_407AC9:                             ; CODE XREF: sub_407AA0+1F↑j
.text:00407AC9                 call    _errno
.text:00407ACE                 mov     dword ptr [eax], 16h
.text:00407AD4
.text:00407AD4 loc_407AD4:                             ; CODE XREF: sub_407AA0+B1↓j
.text:00407AD4                 mov     eax, 0FFFFFFFFh
.text:00407AD9
.text:00407AD9 loc_407AD9:                             ; CODE XREF: sub_407AA0+86↓j
.text:00407AD9                                         ; sub_407AA0+A4↓j
.text:00407AD9                 mov     ebx, [esp+1Ch+var_10]
.text:00407ADD                 mov     esi, [esp+1Ch+var_C]
.text:00407AE1                 mov     edi, [esp+1Ch+var_8]
.text:00407AE5                 mov     ebp, [esp+1Ch+var_4]
.text:00407AE9                 add     esp, 1Ch
.text:00407AEC                 retn
.text:00407AEC ; ---------------------------------------------------------------------------
.text:00407AED                 align 10h
.text:00407AF0
.text:00407AF0 loc_407AF0:                             ; CODE XREF: sub_407AA0+27↑j
.text:00407AF0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00407AF7                 call    SetErrorMode
.text:00407AFC                 sub     esp, 4
.text:00407AFF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00407B02                 call    GetFileAttributesA
.text:00407B07                 sub     esp, 4
.text:00407B0A                 mov     edi, eax
.text:00407B0C                 cmp     eax, 0FFFFFFFFh
.text:00407B0F                 jz      short loc_407B53
.text:00407B11
.text:00407B11 loc_407B11:                             ; CODE XREF: sub_407AA0+C6↓j
.text:00407B11                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00407B18                 call    SetErrorMode
.text:00407B1D                 sub     esp, 4
.text:00407B20                 mov     eax, 0FFFFFFFFh
.text:00407B25                 inc     ebp
.text:00407B26                 jz      short loc_407AD9
.text:00407B28                 test    esi, 10h
.text:00407B2E                 jz      short loc_407B38
.text:00407B30                 test    edi, 10h
.text:00407B36                 jz      short loc_407B46
.text:00407B38
.text:00407B38 loc_407B38:                             ; CODE XREF: sub_407AA0+8E↑j
.text:00407B38                 and     esi, 2
.text:00407B3B                 jz      short loc_407B42
.text:00407B3D                 and     edi, 1
.text:00407B40                 jnz     short loc_407B46
.text:00407B42
.text:00407B42 loc_407B42:                             ; CODE XREF: sub_407AA0+9B↑j
.text:00407B42                 xor     eax, eax
.text:00407B44                 jmp     short loc_407AD9
.text:00407B46 ; ---------------------------------------------------------------------------
.text:00407B46
.text:00407B46 loc_407B46:                             ; CODE XREF: sub_407AA0+96↑j
.text:00407B46                                         ; sub_407AA0+A0↑j
.text:00407B46                 call    _errno
.text:00407B4B                 mov     dword ptr [eax], 0Dh
.text:00407B51                 jmp     short loc_407AD4
.text:00407B53 ; ---------------------------------------------------------------------------
.text:00407B53
.text:00407B53 loc_407B53:                             ; CODE XREF: sub_407AA0+6F↑j
.text:00407B53                 call    sub_409BC0
.text:00407B58                 mov     ebp, eax
.text:00407B5A                 call    _errno
.text:00407B5F                 mov     [eax], ebp
.text:00407B61                 mov     ebp, 0FFFFFFFFh
.text:00407B66                 jmp     short loc_407B11
.text:00407B66 sub_407AA0      endp
.text:00407B66
.text:00407B66 ; ---------------------------------------------------------------------------
.text:00407B68                 align 10h
.text:00407B70 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00407B70                                         ; DATA XREF: .data:off_410054↓o
.text:00407B84 ; const CHAR LibFileName[]
.text:00407B84 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_407BB0+11↓o
.text:00407B84                                         ; sub_407D20+C↓o ...
.text:00407B91 ; const CHAR ProcName[]
.text:00407B91 ProcName        db 'GetFileAttributesExA',0
.text:00407B91                                         ; DATA XREF: sub_407BB0+28↓o
.text:00407BA6                 align 10h
.text:00407BB0
.text:00407BB0 ; =============== S U B R O U T I N E =======================================
.text:00407BB0
.text:00407BB0
.text:00407BB0 ; int __cdecl sub_407BB0(LPCSTR lpFileName, int)
.text:00407BB0 sub_407BB0      proc near               ; CODE XREF: .text:00408D54↓p
.text:00407BB0                                         ; sub_409150+37↓p
.text:00407BB0
.text:00407BB0 lpModuleName    = dword ptr -18Ch
.text:00407BB0 lpProcName      = dword ptr -188h
.text:00407BB0 var_184         = dword ptr -184h
.text:00407BB0 var_170         = dword ptr -170h
.text:00407BB0 var_164         = dword ptr -164h
.text:00407BB0 hModule         = dword ptr -160h
.text:00407BB0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00407BB0 lpFileName      = dword ptr  4
.text:00407BB0 arg_4           = dword ptr  8
.text:00407BB0
.text:00407BB0                 push    ebp
.text:00407BB1                 push    edi
.text:00407BB2                 push    esi
.text:00407BB3                 push    ebx
.text:00407BB4                 sub     esp, 17Ch
.text:00407BBA                 mov     ebx, [esp+18Ch+arg_4]
.text:00407BC1                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:00407BC8                 call    GetModuleHandleA
.text:00407BCD                 sub     esp, 4
.text:00407BD0                 mov     [esp+18Ch+hModule], eax
.text:00407BD4                 mov     edx, [esp+18Ch+hModule]
.text:00407BD8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00407BE0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00407BE3                 call    GetProcAddress
.text:00407BE8                 sub     esp, 8
.text:00407BEB                 mov     ebp, eax
.text:00407BED                 mov     eax, [esp+18Ch+lpFileName]
.text:00407BF4                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00407BF7                 call    GetFileAttributesA
.text:00407BFC                 sub     esp, 4
.text:00407BFF                 mov     [esp+18Ch+var_164], eax
.text:00407C03                 xor     eax, eax
.text:00407C05                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:00407C0A                 jz      short loc_407C61
.text:00407C0C                 cld
.text:00407C0D                 mov     ecx, 50h ; 'P'
.text:00407C12                 lea     esi, [esp+18Ch+FindFileData]
.text:00407C16                 mov     edi, esi
.text:00407C18                 test    ebp, ebp
.text:00407C1A                 rep stosd
.text:00407C1C                 mov     [esp+18Ch+var_170], 0
.text:00407C24                 jz      short loc_407C45
.text:00407C26                 mov     [esp+18Ch+var_184], ebx
.text:00407C2A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00407C31                 mov     [esp+18Ch+lpProcName], 0
.text:00407C39                 mov     [esp+18Ch+lpModuleName], ecx
.text:00407C3C                 call    ebp
.text:00407C3E                 sub     esp, 0Ch
.text:00407C41                 mov     [esp+18Ch+var_170], eax
.text:00407C45
.text:00407C45 loc_407C45:                             ; CODE XREF: sub_407BB0+74↑j
.text:00407C45                 mov     eax, [esp+18Ch+var_170]
.text:00407C49                 test    eax, eax
.text:00407C4B                 jz      short loc_407C70
.text:00407C4D
.text:00407C4D loc_407C4D:                             ; CODE XREF: sub_407BB0+131↓j
.text:00407C4D                                         ; sub_407BB0+14B↓j
.text:00407C4D                 mov     ebx, [esp+18Ch+hModule]
.text:00407C51                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00407C54                 call    FreeLibrary
.text:00407C59                 sub     esp, 4
.text:00407C5C                 mov     eax, 1
.text:00407C61
.text:00407C61 loc_407C61:                             ; CODE XREF: sub_407BB0+5A↑j
.text:00407C61                 add     esp, 17Ch
.text:00407C67                 pop     ebx
.text:00407C68                 pop     esi
.text:00407C69                 pop     edi
.text:00407C6A                 pop     ebp
.text:00407C6B                 retn
.text:00407C6B ; ---------------------------------------------------------------------------
.text:00407C6C                 align 10h
.text:00407C70
.text:00407C70 loc_407C70:                             ; CODE XREF: sub_407BB0+9B↑j
.text:00407C70                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:00407C74                 mov     edx, [esp+18Ch+lpFileName]
.text:00407C7B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:00407C7E                 call    FindFirstFileA
.text:00407C83                 sub     esp, 8
.text:00407C86                 xor     ecx, ecx
.text:00407C88                 cmp     eax, 0FFFFFFFFh
.text:00407C8B                 setnz   cl
.text:00407C8E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:00407C92                 mov     [ebx], edi
.text:00407C94                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:00407C98                 mov     [esp+18Ch+var_170], ecx
.text:00407C9C                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00407CA0                 mov     [ebx+8], esi
.text:00407CA3                 mov     [ebx+4], ecx
.text:00407CA6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:00407CAA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:00407CAE                 mov     [ebx+0Ch], ebp
.text:00407CB1                 mov     [ebx+10h], edi
.text:00407CB4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00407CB8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:00407CBC                 mov     [ebx+18h], esi
.text:00407CBF                 mov     [ebx+14h], ecx
.text:00407CC2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00407CC6                 mov     [ebx+1Ch], ebp
.text:00407CC9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:00407CCD                 mov     [ebx+20h], edi
.text:00407CD0                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00407CD3                 call    FindClose
.text:00407CD8                 sub     esp, 4
.text:00407CDB                 mov     esi, [esp+18Ch+var_170]
.text:00407CDF                 test    esi, esi
.text:00407CE1                 jnz     loc_407C4D
.text:00407CE7                 cld
.text:00407CE8                 mov     eax, [esp+18Ch+var_170]
.text:00407CEC                 mov     ecx, 9
.text:00407CF1                 mov     edi, ebx
.text:00407CF3                 rep stosd
.text:00407CF5                 mov     ebp, [esp+18Ch+var_164]
.text:00407CF9                 mov     [ebx], ebp
.text:00407CFB                 jmp     loc_407C4D
.text:00407CFB sub_407BB0      endp
.text:00407CFB
.text:00407CFB ; ---------------------------------------------------------------------------
.text:00407D00 ; const CHAR aFindfirstfilee[]
.text:00407D00 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_407D20+23↓o
.text:00407D11 ; const char Source[]
.text:00407D11 Source          db '\*',0               ; DATA XREF: sub_407D20:loc_407DAD↓o
.text:00407D14                 align 10h
.text:00407D20
.text:00407D20 ; =============== S U B R O U T I N E =======================================
.text:00407D20
.text:00407D20
.text:00407D20 ; int __cdecl sub_407D20(char *Str)
.text:00407D20 sub_407D20      proc near               ; CODE XREF: .text:00408E53↓p
.text:00407D20                                         ; sub_409150+3FA↓p ...
.text:00407D20
.text:00407D20 lpLibFileName   = dword ptr -18Ch
.text:00407D20 lpProcName      = dword ptr -188h
.text:00407D20 var_184         = dword ptr -184h
.text:00407D20 var_180         = dword ptr -180h
.text:00407D20 var_17C         = dword ptr -17Ch
.text:00407D20 var_178         = dword ptr -178h
.text:00407D20 var_164         = dword ptr -164h
.text:00407D20 hModule         = dword ptr -160h
.text:00407D20 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00407D20 Str             = dword ptr  4
.text:00407D20
.text:00407D20                 push    ebp
.text:00407D21                 push    edi
.text:00407D22                 xor     edi, edi
.text:00407D24                 push    esi
.text:00407D25                 push    ebx
.text:00407D26                 sub     esp, 17Ch
.text:00407D2C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00407D33                 call    LoadLibraryA
.text:00407D38                 sub     esp, 4
.text:00407D3B                 mov     [esp+18Ch+hModule], eax
.text:00407D3F                 mov     ecx, [esp+18Ch+hModule]
.text:00407D43                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:00407D4B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:00407D4E                 call    GetProcAddress
.text:00407D53                 sub     esp, 8
.text:00407D56                 mov     edx, [esp+18Ch+Str]
.text:00407D5D                 mov     [esp+18Ch+var_164], eax
.text:00407D61                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00407D64                 call    strlen
.text:00407D69                 lea     edx, [eax+5]
.text:00407D6C                 mov     ebx, eax
.text:00407D6E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00407D71                 call    malloc
.text:00407D76                 mov     esi, eax
.text:00407D78                 test    esi, esi
.text:00407D7A                 mov     eax, 1
.text:00407D7F                 jz      loc_407E5D
.text:00407D85                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00407D88                 mov     ebp, [esp+18Ch+Str]
.text:00407D8F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00407D93                 call    strcpy
.text:00407D98                 movzx   eax, byte ptr [ebx+esi-1]
.text:00407D9D                 cmp     al, 2Fh ; '/'
.text:00407D9F                 jz      loc_407E8B
.text:00407DA5                 cmp     al, 5Ch ; '\'
.text:00407DA7                 jz      loc_407E8B
.text:00407DAD
.text:00407DAD loc_407DAD:                             ; CODE XREF: sub_407D20+170↓j
.text:00407DAD                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:00407DB5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00407DB8                 call    strcat
.text:00407DBD                 mov     eax, [esp+18Ch+var_164]
.text:00407DC1                 test    eax, eax
.text:00407DC3                 jz      loc_407E85
.text:00407DC9                 mov     [esp+18Ch+var_178], 0
.text:00407DD1                 lea     ebp, [esp+18Ch+FindFileData]
.text:00407DD5                 mov     [esp+18Ch+var_17C], 0
.text:00407DDD                 mov     [esp+18Ch+var_180], 1
.text:00407DE5                 mov     [esp+18Ch+var_184], ebp
.text:00407DE9                 mov     [esp+18Ch+lpProcName], 0
.text:00407DF1                 mov     [esp+18Ch+lpLibFileName], esi
.text:00407DF4                 call    [esp+18Ch+var_164]
.text:00407DF8                 sub     esp, 18h
.text:00407DFB                 mov     ebx, eax
.text:00407DFD                 cmp     eax, 0FFFFFFFFh
.text:00407E00                 jz      short loc_407E68
.text:00407E02                 lea     esi, [esi+0]
.text:00407E09                 lea     edi, [edi+0]
.text:00407E10
.text:00407E10 loc_407E10:                             ; CODE XREF: sub_407D20+109↓j
.text:00407E10                                         ; sub_407D20+161↓j
.text:00407E10                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00407E15                 jz      short loc_407E18
.text:00407E17                 inc     edi
.text:00407E18
.text:00407E18 loc_407E18:                             ; CODE XREF: sub_407D20+F5↑j
.text:00407E18                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00407E1C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00407E1F                 call    FindNextFileA
.text:00407E24                 sub     esp, 8
.text:00407E27                 test    eax, eax
.text:00407E29                 jnz     short loc_407E10
.text:00407E2B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00407E2E                 call    FindClose
.text:00407E33                 sub     esp, 4
.text:00407E36                 mov     esi, [esp+18Ch+hModule]
.text:00407E3A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:00407E3D                 call    FreeLibrary
.text:00407E42                 sub     esp, 4
.text:00407E45                 mov     ebx, [esp+18Ch+Str]
.text:00407E4C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:00407E4F                 call    sub_40A140
.text:00407E54                 test    eax, eax
.text:00407E56                 jz      short loc_407E5B
.text:00407E58                 add     edi, 2
.text:00407E5B
.text:00407E5B loc_407E5B:                             ; CODE XREF: sub_407D20+136↑j
.text:00407E5B                 mov     eax, edi
.text:00407E5D
.text:00407E5D loc_407E5D:                             ; CODE XREF: sub_407D20+5F↑j
.text:00407E5D                                         ; sub_407D20+163↓j
.text:00407E5D                 add     esp, 17Ch
.text:00407E63                 pop     ebx
.text:00407E64                 pop     esi
.text:00407E65                 pop     edi
.text:00407E66                 pop     ebp
.text:00407E67                 retn
.text:00407E68 ; ---------------------------------------------------------------------------
.text:00407E68
.text:00407E68 loc_407E68:                             ; CODE XREF: sub_407D20+E0↑j
.text:00407E68                                         ; sub_407D20+169↓j
.text:00407E68                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00407E6C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:00407E6F                 call    FindFirstFileA
.text:00407E74                 mov     ebx, eax
.text:00407E76                 sub     esp, 8
.text:00407E79                 cmp     ebx, 0FFFFFFFFh
.text:00407E7C                 mov     eax, 2
.text:00407E81                 jnz     short loc_407E10
.text:00407E83                 jmp     short loc_407E5D
.text:00407E85 ; ---------------------------------------------------------------------------
.text:00407E85
.text:00407E85 loc_407E85:                             ; CODE XREF: sub_407D20+A3↑j
.text:00407E85                 lea     ebp, [esp+18Ch+FindFileData]
.text:00407E89                 jmp     short loc_407E68
.text:00407E8B ; ---------------------------------------------------------------------------
.text:00407E8B
.text:00407E8B loc_407E8B:                             ; CODE XREF: sub_407D20+7F↑j
.text:00407E8B                                         ; sub_407D20+87↑j
.text:00407E8B                 mov     byte ptr [ebx+esi-1], 0
.text:00407E90                 jmp     loc_407DAD
.text:00407E90 sub_407D20      endp
.text:00407E90
.text:00407E90 ; ---------------------------------------------------------------------------
.text:00407E95                 align 10h
.text:00407EA0
.text:00407EA0 ; =============== S U B R O U T I N E =======================================
.text:00407EA0
.text:00407EA0
.text:00407EA0 ; int __cdecl sub_407EA0(HANDLE hNamedPipe, int)
.text:00407EA0 sub_407EA0      proc near               ; CODE XREF: sub_407890+1D87↓p
.text:00407EA0                                         ; sub_40BFE0+52↓j
.text:00407EA0
.text:00407EA0 hFile           = dword ptr -0ECh
.text:00407EA0 lpFileInformation= dword ptr -0E8h
.text:00407EA0 nBufferSize     = dword ptr -0E4h
.text:00407EA0 lpBytesRead     = dword ptr -0E0h
.text:00407EA0 lpTotalBytesAvail= dword ptr -0DCh
.text:00407EA0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00407EA0 var_C4          = dword ptr -0C4h
.text:00407EA0 var_C0          = dword ptr -0C0h
.text:00407EA0 var_BC          = dword ptr -0BCh
.text:00407EA0 var_B8          = dword ptr -0B8h
.text:00407EA0 var_B4          = dword ptr -0B4h
.text:00407EA0 var_B0          = dword ptr -0B0h
.text:00407EA0 var_AC          = dword ptr -0ACh
.text:00407EA0 var_A8          = dword ptr -0A8h
.text:00407EA0 TotalBytesAvail = dword ptr -0A0h
.text:00407EA0 var_9C          = dword ptr -9Ch
.text:00407EA0 var_98          = dword ptr -98h
.text:00407EA0 var_94          = dword ptr -94h
.text:00407EA0 var_90          = dword ptr -90h
.text:00407EA0 var_8C          = dword ptr -8Ch
.text:00407EA0 var_88          = dword ptr -88h
.text:00407EA0 var_84          = dword ptr -84h
.text:00407EA0 var_80          = dword ptr -80h
.text:00407EA0 var_7C          = dword ptr -7Ch
.text:00407EA0 var_78          = dword ptr -78h
.text:00407EA0 var_74          = dword ptr -74h
.text:00407EA0 var_70          = dword ptr -70h
.text:00407EA0 var_6C          = dword ptr -6Ch
.text:00407EA0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00407EA0 hNamedPipe      = dword ptr  4
.text:00407EA0 arg_4           = dword ptr  8
.text:00407EA0
.text:00407EA0                 push    ebp
.text:00407EA1                 mov     eax, 0FFFFFFFFh
.text:00407EA6                 push    edi
.text:00407EA7                 push    esi
.text:00407EA8                 push    ebx
.text:00407EA9                 sub     esp, 0DCh
.text:00407EAF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00407EB6                 mov     ebp, [esp+0ECh+arg_4]
.text:00407EBD                 cmp     esi, 0FFFFFFFFh
.text:00407EC0                 jz      loc_408241
.text:00407EC6                 cld
.text:00407EC7                 xor     eax, eax
.text:00407EC9                 lea     ebx, [esp+0ECh+FileInformation]
.text:00407ED0                 mov     ecx, 0Dh
.text:00407ED5                 mov     edi, ebx
.text:00407ED7                 rep stosd
.text:00407ED9                 mov     dword ptr [ebp+18h], 1
.text:00407EE0                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00407EE3                 call    GetFileType
.text:00407EE8                 sub     esp, 4
.text:00407EEB                 xor     edx, edx
.text:00407EED                 cmp     eax, 2
.text:00407EF0                 jz      loc_408320
.text:00407EF6                 cmp     eax, 3
.text:00407EF9                 jz      loc_408310
.text:00407EFF
.text:00407EFF loc_407EFF:                             ; CODE XREF: sub_407EA0+475↓j
.text:00407EFF                                         ; sub_407EA0+485↓j
.text:00407EFF                 or      [ebp+0], edx
.text:00407F02                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00407F06                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00407F09                 call    GetFileInformationByHandle
.text:00407F0E                 sub     esp, 8
.text:00407F11                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00407F18                 test    ecx, ecx
.text:00407F1A                 jnz     short loc_407F50
.text:00407F1C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00407F23                 test    edx, edx
.text:00407F25                 jnz     short loc_407F50
.text:00407F27                 mov     edx, [ebp+0]
.text:00407F2A                 and     edx, 0F000h
.text:00407F30                 cmp     edx, 1000h
.text:00407F36                 jz      loc_4082A6
.text:00407F3C
.text:00407F3C loc_407F3C:                             ; CODE XREF: sub_407EA0+459↓j
.text:00407F3C                                         ; sub_407EA0+465↓j
.text:00407F3C                 test    ecx, ecx
.text:00407F3E                 jnz     short loc_407F50
.text:00407F40                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00407F47                 test    edx, edx
.text:00407F49                 jz      loc_408284
.text:00407F4F                 nop
.text:00407F50
.text:00407F50 loc_407F50:                             ; CODE XREF: sub_407EA0+7A↑j
.text:00407F50                                         ; sub_407EA0+85↑j ...
.text:00407F50                 cld
.text:00407F51                 mov     esi, ebx
.text:00407F53                 mov     dword ptr [ebp+14h], 0
.text:00407F5A                 lea     edi, [esp+0ECh+var_9C]
.text:00407F5E                 mov     ecx, 0Dh
.text:00407F63                 rep movsd
.text:00407F65                 xor     ebx, ebx
.text:00407F67                 xor     edi, edi
.text:00407F69                 mov     edx, [esp+0ECh+var_6C]
.text:00407F70                 mov     esi, [esp+0ECh+var_70]
.text:00407F74                 or      edx, ebx
.text:00407F76                 mov     ebx, [esp+0ECh+var_9C]
.text:00407F7A                 mov     [ebp+8], edx
.text:00407F7D                 or      edi, esi
.text:00407F7F                 xor     edx, edx
.text:00407F81                 mov     [ebp+0Ch], edi
.text:00407F84                 test    bl, 10h
.text:00407F87                 mov     esi, [esp+0ECh+var_80]
.text:00407F8B                 setz    dl
.text:00407F8E                 mov     [ebp+10h], esi
.text:00407F91                 dec     edx
.text:00407F92                 and     edx, 0FFFFC000h
.text:00407F98                 add     edx, 8000h
.text:00407F9E                 or      edx, 124h
.text:00407FA4                 test    bl, 1
.text:00407FA7                 movzx   eax, dx
.text:00407FAA                 jnz     short loc_407FB1
.text:00407FAC                 or      eax, 92h
.text:00407FB1
.text:00407FB1 loc_407FB1:                             ; CODE XREF: sub_407EA0+10A↑j
.text:00407FB1                 or      [ebp+0], eax
.text:00407FB4                 xor     edx, edx
.text:00407FB6                 mov     ebx, [esp+0ECh+var_7C]
.text:00407FBA                 mov     ecx, [esp+0ECh+var_78]
.text:00407FBE                 mov     eax, edx
.text:00407FC0                 xor     esi, esi
.text:00407FC2                 mov     edx, [esp+0ECh+var_8C]
.text:00407FC6                 mov     edi, ebx
.text:00407FC8                 or      eax, edi
.text:00407FCA                 mov     [esp+0ECh+var_A8], eax
.text:00407FCE                 mov     ebx, ecx
.text:00407FD0                 mov     edi, [esp+0ECh+var_74]
.text:00407FD4                 or      ebx, esi
.text:00407FD6                 mov     esi, [esp+0ECh+var_A8]
.text:00407FDA                 mov     [esp+0ECh+var_AC], ebx
.text:00407FDE                 xor     ebx, ebx
.text:00407FE0                 mov     ecx, [esp+0ECh+var_AC]
.text:00407FE4                 mov     [ebp+34h], esi
.text:00407FE7                 mov     esi, [esp+0ECh+var_90]
.text:00407FEB                 mov     [ebp+18h], edi
.text:00407FEE                 xor     edi, edi
.text:00407FF0                 or      esi, ebx
.text:00407FF2                 mov     [ebp+30h], ecx
.text:00407FF5                 or      edi, edx
.text:00407FF7                 mov     edx, esi
.text:00407FF9                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408001                 sub     edx, 0D53E8000h
.text:00408007                 mov     ebx, edi
.text:00408009                 sbb     ebx, 19DB1DEh
.text:0040800F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00408013                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040801B                 mov     [esp+0ECh+hFile], edx
.text:0040801E                 call    sub_40ED50
.text:00408023                 mov     ecx, eax
.text:00408025                 shr     eax, 1Fh
.text:00408028                 dec     eax
.text:00408029                 and     ecx, eax
.text:0040802B                 mov     [ebp+38h], ecx
.text:0040802E                 mov     [esp+0ECh+hFile], esi
.text:00408031                 mov     [esp+0ECh+lpFileInformation], edi
.text:00408035                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040803D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00408045                 call    sub_40EE70
.text:0040804A                 lea     ebx, [eax+eax*4]
.text:0040804D                 xor     ecx, ecx
.text:0040804F                 lea     esi, [ebx+ebx*4]
.text:00408052                 shl     esi, 2
.text:00408055                 mov     edi, esi
.text:00408057                 shr     edi, 1Fh
.text:0040805A                 dec     edi
.text:0040805B                 and     edi, esi
.text:0040805D                 mov     [ebp+3Ch], edi
.text:00408060                 mov     esi, [esp+0ECh+var_98]
.text:00408064                 xor     edi, edi
.text:00408066                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040806E                 mov     edx, [esp+0ECh+var_94]
.text:00408072                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040807A                 or      esi, ecx
.text:0040807C                 or      edi, edx
.text:0040807E                 mov     edx, esi
.text:00408080                 mov     ecx, edi
.text:00408082                 sub     edx, 0D53E8000h
.text:00408088                 sbb     ecx, 19DB1DEh
.text:0040808E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00408092                 mov     [esp+0ECh+hFile], edx
.text:00408095                 call    sub_40ED50
.text:0040809A                 mov     ebx, eax
.text:0040809C                 shr     eax, 1Fh
.text:0040809F                 dec     eax
.text:004080A0                 and     ebx, eax
.text:004080A2                 mov     [ebp+48h], ebx
.text:004080A5                 xor     ebx, ebx
.text:004080A7                 mov     [esp+0ECh+hFile], esi
.text:004080AA                 mov     [esp+0ECh+lpFileInformation], edi
.text:004080AE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004080B6                 mov     [esp+0ECh+lpBytesRead], 0
.text:004080BE                 call    sub_40EE70
.text:004080C3                 lea     ecx, [eax+eax*4]
.text:004080C6                 lea     esi, [ecx+ecx*4]
.text:004080C9                 shl     esi, 2
.text:004080CC                 mov     edi, esi
.text:004080CE                 shr     edi, 1Fh
.text:004080D1                 dec     edi
.text:004080D2                 and     edi, esi
.text:004080D4                 mov     [ebp+4Ch], edi
.text:004080D7                 mov     esi, [esp+0ECh+var_88]
.text:004080DB                 xor     edi, edi
.text:004080DD                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004080E5                 mov     edx, [esp+0ECh+var_84]
.text:004080E9                 mov     [esp+0ECh+lpBytesRead], 0
.text:004080F1                 or      esi, ebx
.text:004080F3                 or      edi, edx
.text:004080F5                 mov     edx, esi
.text:004080F7                 mov     ebx, edi
.text:004080F9                 sub     edx, 0D53E8000h
.text:004080FF                 sbb     ebx, 19DB1DEh
.text:00408105                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00408109                 mov     [esp+0ECh+hFile], edx
.text:0040810C                 call    sub_40ED50
.text:00408111                 mov     ecx, eax
.text:00408113                 shr     eax, 1Fh
.text:00408116                 dec     eax
.text:00408117                 and     ecx, eax
.text:00408119                 mov     [ebp+40h], ecx
.text:0040811C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00408120                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00408128                 mov     [esp+0ECh+lpBytesRead], 0
.text:00408130                 mov     [esp+0ECh+hFile], esi
.text:00408133                 call    sub_40EE70
.text:00408138                 mov     dword ptr [ebp+50h], 200h
.text:0040813F                 lea     ebx, [eax+eax*4]
.text:00408142                 mov     edi, [esp+0ECh+var_A8]
.text:00408146                 lea     edx, [ebx+ebx*4]
.text:00408149                 mov     eax, [esp+0ECh+var_AC]
.text:0040814D                 shl     edx, 2
.text:00408150                 mov     ecx, edx
.text:00408152                 shr     ecx, 1Fh
.text:00408155                 dec     ecx
.text:00408156                 and     ecx, edx
.text:00408158                 test    edi, edi
.text:0040815A                 mov     edx, [esp+0ECh+var_A8]
.text:0040815E                 mov     [ebp+44h], ecx
.text:00408161                 js      loc_408277
.text:00408167
.text:00408167 loc_408167:                             ; CODE XREF: sub_407EA0+3DF↓j
.text:00408167                 mov     edi, [esp+0ECh+var_AC]
.text:0040816B                 xor     esi, esi
.text:0040816D                 mov     ecx, eax
.text:0040816F                 shrd    ecx, edx, 9
.text:00408173                 mov     ebx, edx
.text:00408175                 mov     eax, esi
.text:00408177                 and     edi, 1FFh
.text:0040817D                 sar     ebx, 9
.text:00408180                 or      eax, edi
.text:00408182                 jz      short loc_40818A
.text:00408184                 add     ecx, 1
.text:00408187                 adc     ebx, 0
.text:0040818A
.text:0040818A loc_40818A:                             ; CODE XREF: sub_407EA0+2E2↑j
.text:0040818A                 mov     [ebp+5Ch], ebx
.text:0040818D                 mov     esi, dword_410050
.text:00408193                 xor     edi, edi
.text:00408195                 mov     [ebp+58h], ecx
.text:00408198                 mov     ebx, dword_410050
.text:0040819E                 mov     ecx, [esp+0ECh+var_A8]
.text:004081A2                 mov     edx, [esp+0ECh+var_AC]
.text:004081A6                 mov     [ebp+50h], ebx
.text:004081A9                 shr     ebx, 9
.text:004081AC                 mov     [esp+0ECh+lpBytesRead], edi
.text:004081B0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004081B4                 mov     [esp+0ECh+nBufferSize], esi
.text:004081B8                 mov     [esp+0ECh+hFile], edx
.text:004081BB                 call    sub_40ED50
.text:004081C0                 mov     [esp+0ECh+lpBytesRead], edi
.text:004081C4                 mov     ecx, [esp+0ECh+var_AC]
.text:004081C8                 mov     edi, [esp+0ECh+var_A8]
.text:004081CC                 mov     [esp+0ECh+var_BC], ebx
.text:004081D0                 mov     [esp+0ECh+var_B4], eax
.text:004081D4                 mov     [esp+0ECh+var_B0], edx
.text:004081D8                 mov     [esp+0ECh+var_B8], 0
.text:004081E0                 mov     [esp+0ECh+nBufferSize], esi
.text:004081E4                 mov     [esp+0ECh+hFile], ecx
.text:004081E7                 mov     [esp+0ECh+lpFileInformation], edi
.text:004081EB                 call    sub_40EE70
.text:004081F0                 mov     ebx, edx
.text:004081F2                 or      ebx, eax
.text:004081F4                 jz      short loc_408250
.text:004081F6                 mov     edi, [esp+0ECh+var_B4]
.text:004081FA                 mov     esi, [esp+0ECh+var_B0]
.text:004081FE                 mov     eax, [esp+0ECh+var_BC]
.text:00408202                 mov     [esp+0ECh+var_C4], edi
.text:00408206                 mov     ecx, [esp+0ECh+var_B8]
.text:0040820A                 add     [esp+0ECh+var_C4], 1
.text:0040820F                 mov     [esp+0ECh+var_C0], esi
.text:00408213                 adc     [esp+0ECh+var_C0], 0
.text:00408218                 mul     [esp+0ECh+var_C4]
.text:0040821C                 mov     edi, [esp+0ECh+var_C0]
.text:00408220                 mov     ebx, edx
.text:00408222                 mov     edx, [esp+0ECh+var_C4]
.text:00408226                 mov     esi, eax
.text:00408228                 mov     eax, ebx
.text:0040822A                 imul    ecx, edx
.text:0040822D                 mov     edx, [esp+0ECh+var_BC]
.text:00408231                 imul    edx, edi
.text:00408234                 add     eax, ecx
.text:00408236                 lea     edi, [edx+eax]
.text:00408239
.text:00408239 loc_408239:                             ; CODE XREF: sub_407EA0+3D5↓j
.text:00408239                 mov     [ebp+58h], esi
.text:0040823C                 xor     eax, eax
.text:0040823E                 mov     [ebp+5Ch], edi
.text:00408241
.text:00408241 loc_408241:                             ; CODE XREF: sub_407EA0+20↑j
.text:00408241                 add     esp, 0DCh
.text:00408247                 pop     ebx
.text:00408248                 pop     esi
.text:00408249                 pop     edi
.text:0040824A                 pop     ebp
.text:0040824B                 retn
.text:0040824B ; ---------------------------------------------------------------------------
.text:0040824C                 align 10h
.text:00408250
.text:00408250 loc_408250:                             ; CODE XREF: sub_407EA0+354↑j
.text:00408250                 mov     eax, [esp+0ECh+var_B4]
.text:00408254                 mov     edi, [esp+0ECh+var_B8]
.text:00408258                 mov     ebx, [esp+0ECh+var_B4]
.text:0040825C                 mul     [esp+0ECh+var_BC]
.text:00408260                 mov     ecx, [esp+0ECh+var_BC]
.text:00408264                 imul    ebx, edi
.text:00408267                 mov     esi, eax
.text:00408269                 mov     eax, [esp+0ECh+var_B0]
.text:0040826D                 add     edx, ebx
.text:0040826F                 imul    ecx, eax
.text:00408272                 lea     edi, [ecx+edx]
.text:00408275                 jmp     short loc_408239
.text:00408277 ; ---------------------------------------------------------------------------
.text:00408277
.text:00408277 loc_408277:                             ; CODE XREF: sub_407EA0+2C1↑j
.text:00408277                 add     eax, 1FFh
.text:0040827C                 adc     edx, 0
.text:0040827F                 jmp     loc_408167
.text:00408284 ; ---------------------------------------------------------------------------
.text:00408284
.text:00408284 loc_408284:                             ; CODE XREF: sub_407EA0+A9↑j
.text:00408284                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00408287                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040828E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00408292                 call    GetFileSize
.text:00408297                 sub     esp, 8
.text:0040829A                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:004082A1                 jmp     loc_407F50
.text:004082A6 ; ---------------------------------------------------------------------------
.text:004082A6
.text:004082A6 loc_4082A6:                             ; CODE XREF: sub_407EA0+96↑j
.text:004082A6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:004082AE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:004082B2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:004082BA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:004082BE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:004082C6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:004082CE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:004082D6                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:004082D9                 call    PeekNamedPipe
.text:004082DE                 sub     esp, 18h
.text:004082E1                 test    eax, eax
.text:004082E3                 jz      short loc_4082FE
.text:004082E5                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:004082E9                 xor     eax, eax
.text:004082EB                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:004082F2                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:004082F9                 jmp     loc_407F3C
.text:004082FE ; ---------------------------------------------------------------------------
.text:004082FE
.text:004082FE loc_4082FE:                             ; CODE XREF: sub_407EA0+443↑j
.text:004082FE                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00408305                 jmp     loc_407F3C
.text:00408305 ; ---------------------------------------------------------------------------
.text:0040830A                 align 10h
.text:00408310
.text:00408310 loc_408310:                             ; CODE XREF: sub_407EA0+59↑j
.text:00408310                 mov     edx, 1000h
.text:00408315                 jmp     loc_407EFF
.text:00408315 ; ---------------------------------------------------------------------------
.text:0040831A                 align 10h
.text:00408320
.text:00408320 loc_408320:                             ; CODE XREF: sub_407EA0+50↑j
.text:00408320                 mov     edx, 2000h
.text:00408325                 jmp     loc_407EFF
.text:00408325 sub_407EA0      endp
.text:00408325
.text:00408325 ; ---------------------------------------------------------------------------
.text:0040832A aLnk            db '.lnk',0             ; DATA XREF: sub_408370+E0↓o
.text:0040832A                                         ; .text:00408A1A↓o ...
.text:0040832F ; const CHAR aKernel32[]
.text:0040832F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_408370+12D↓o
.text:0040832F                                         ; .text:004090CB↓o
.text:00408338 ; const CHAR aGetcompressedf[]
.text:00408338 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00408338                                         ; DATA XREF: sub_408370+13E↓o
.text:00408338                                         ; .text:004090DC↓o
.text:0040834F ; const CHAR aGetbinarytypea[]
.text:0040834F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_408370+333↓o
.text:0040834F                                         ; .text:00408A76↓o ...
.text:0040835E ; const char aPathext[]
.text:0040835E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_408370:loc_408757↓o
.text:0040835E                                         ; .text:loc_408B20↓o ...
.text:00408366                 align 10h
.text:00408370
.text:00408370 ; =============== S U B R O U T I N E =======================================
.text:00408370
.text:00408370
.text:00408370 ; int __cdecl sub_408370(char *String1, int)
.text:00408370 sub_408370      proc near               ; CODE XREF: sub_409150+3CD↓p
.text:00408370                                         ; sub_407890+1DA5↓p
.text:00408370
.text:00408370 Str             = dword ptr -6Ch
.text:00408370 lpProcName      = dword ptr -68h
.text:00408370 var_64          = dword ptr -64h
.text:00408370 var_60          = dword ptr -60h
.text:00408370 var_5C          = dword ptr -5Ch
.text:00408370 var_4C          = dword ptr -4Ch
.text:00408370 var_48          = dword ptr -48h
.text:00408370 var_44          = dword ptr -44h
.text:00408370 var_40          = dword ptr -40h
.text:00408370 var_3C          = dword ptr -3Ch
.text:00408370 var_38          = dword ptr -38h
.text:00408370 lpRootPathName  = dword ptr -30h
.text:00408370 var_2C          = byte ptr -2Ch
.text:00408370 var_28          = dword ptr -28h
.text:00408370 var_24          = dword ptr -24h
.text:00408370 var_20          = dword ptr -20h
.text:00408370 var_1C          = dword ptr -1Ch
.text:00408370 var_18          = byte ptr -18h
.text:00408370 String1         = dword ptr  4
.text:00408370 arg_4           = dword ptr  8
.text:00408370
.text:00408370                 push    ebp
.text:00408371                 push    edi
.text:00408372                 push    esi
.text:00408373                 push    ebx
.text:00408374                 sub     esp, 5Ch
.text:00408377                 mov     edx, [esp+6Ch+String1]
.text:0040837B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040837E                 call    sub_409D70
.text:00408383                 mov     [esp+6Ch+Str], eax
.text:00408386                 call    sub_40AE80
.text:0040838B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040838F                 test    eax, eax
.text:00408391                 jz      loc_4085C3
.text:00408397                 mov     [esp+6Ch+Str], eax ; Str
.text:0040839A                 call    strlen
.text:0040839F                 mov     edx, [esp+6Ch+arg_4]
.text:004083A3                 mov     ebx, eax
.text:004083A5                 mov     esi, [edx+0Ch]
.text:004083A8                 mov     edi, [edx+8]
.text:004083AB                 mov     eax, esi
.text:004083AD                 or      eax, edi
.text:004083AF                 jz      loc_4087D0
.text:004083B5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:004083B9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:004083BC                 call    GetDriveTypeA
.text:004083C1                 sub     esp, 4
.text:004083C4                 cmp     eax, 4
.text:004083C7                 jz      loc_4087D0
.text:004083CD
.text:004083CD loc_4083CD:                             ; CODE XREF: sub_408370+48A↓j
.text:004083CD                                         ; sub_408370+4B2↓j
.text:004083CD                 mov     edx, [esp+6Ch+arg_4]
.text:004083D1                 mov     esi, [edx+14h]
.text:004083D4                 mov     edi, [edx+10h]
.text:004083D7                 mov     ecx, esi
.text:004083D9                 or      ecx, edi
.text:004083DB                 jnz     short loc_408405
.text:004083DD                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:004083E1                 xor     esi, esi
.text:004083E3                 xor     edi, edi
.text:004083E5                 test    ebp, ebp
.text:004083E7                 jz      short loc_4083F7
.text:004083E9                 movzx   ebx, byte ptr [ebp+0]
.text:004083ED                 test    bl, bl
.text:004083EF                 mov     cl, bl
.text:004083F1                 jnz     loc_408781
.text:004083F7
.text:004083F7 loc_4083F7:                             ; CODE XREF: sub_408370+77↑j
.text:004083F7                 xor     eax, eax
.text:004083F9                 xor     edx, edx
.text:004083FB
.text:004083FB loc_4083FB:                             ; CODE XREF: sub_408370+458↓j
.text:004083FB                 mov     ebp, [esp+6Ch+arg_4]
.text:004083FF                 mov     [ebp+10h], eax
.text:00408402                 mov     [ebp+14h], edx
.text:00408405
.text:00408405 loc_408405:                             ; CODE XREF: sub_408370+6B↑j
.text:00408405                 mov     edi, [esp+6Ch+String1]
.text:00408409                 xor     ebx, ebx
.text:0040840B                 test    edi, edi
.text:0040840D                 jz      loc_408683
.text:00408413                 mov     esi, [esp+6Ch+String1]
.text:00408417                 cmp     byte ptr [esi], 0
.text:0040841A                 jnz     loc_408690
.text:00408420
.text:00408420 loc_408420:                             ; CODE XREF: sub_408370+38C↓j
.text:00408420                                         ; sub_408370+397↓j
.text:00408420                 mov     ebp, [esp+6Ch+String1]
.text:00408424                 test    ebp, ebp
.text:00408426                 jz      loc_408683
.text:0040842C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00408434                 mov     edi, [esp+6Ch+String1]
.text:00408438                 mov     [esp+6Ch+Str], edi ; Str
.text:0040843B                 call    strrchr
.text:00408440                 test    eax, eax
.text:00408442                 jz      loc_408683
.text:00408448                 cld
.text:00408449                 mov     ecx, 5
.text:0040844E                 mov     esi, eax
.text:00408450                 mov     edi, offset aLnk ; ".lnk"
.text:00408455                 repe cmpsb
.text:00408457                 setz    cl
.text:0040845A                 movzx   eax, cl
.text:0040845D                 lea     esi, [esi+0]
.text:00408460
.text:00408460 loc_408460:                             ; CODE XREF: sub_408370+315↓j
.text:00408460                 test    eax, eax
.text:00408462                 jz      short loc_40846A
.text:00408464                 or      ebx, 0A000h
.text:0040846A
.text:0040846A loc_40846A:                             ; CODE XREF: sub_408370+F2↑j
.text:0040846A                 mov     esi, [esp+6Ch+arg_4]
.text:0040846E                 xor     ecx, ecx
.text:00408470                 mov     edi, ds:dword_411200
.text:00408476                 or      [esi], ebx
.text:00408478                 mov     ebx, [esi+14h]
.text:0040847B                 mov     ebp, [esi+10h]
.text:0040847E                 mov     eax, ebx
.text:00408480                 xor     eax, ecx
.text:00408482                 xor     ebp, edi
.text:00408484                 or      eax, ebp
.text:00408486                 jnz     loc_408610
.text:0040848C
.text:0040848C loc_40848C:                             ; CODE XREF: sub_408370+30E↓j
.text:0040848C                 mov     ecx, dword_410050
.text:00408492                 xor     esi, esi
.text:00408494                 xor     edi, edi
.text:00408496                 mov     edx, [esp+6Ch+arg_4]
.text:0040849A                 mov     [edx+50h], ecx
.text:0040849D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:004084A4                 call    LoadLibraryA
.text:004084A9                 sub     esp, 4
.text:004084AC                 mov     ebp, eax
.text:004084AE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004084B6                 mov     [esp+6Ch+Str], eax ; hModule
.text:004084B9                 call    GetProcAddress
.text:004084BE                 sub     esp, 8
.text:004084C1                 test    eax, eax
.text:004084C3                 jz      short loc_4084F8
.text:004084C5                 mov     ebx, [esp+6Ch+String1]
.text:004084C9                 lea     esi, [esp+6Ch+var_2C]
.text:004084CD                 mov     [esp+6Ch+lpProcName], esi
.text:004084D1                 mov     [esp+6Ch+Str], ebx
.text:004084D4                 call    eax
.text:004084D6                 sub     esp, 8
.text:004084D9                 mov     ebx, eax
.text:004084DB                 cmp     eax, 0FFFFFFFFh
.text:004084DE                 jz      loc_4085F9
.text:004084E4
.text:004084E4 loc_4084E4:                             ; CODE XREF: sub_408370+29A↓j
.text:004084E4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:004084E8                 mov     ecx, ebx
.text:004084EA                 xor     edi, edi
.text:004084EC                 xor     ebx, ebx
.text:004084EE                 mov     edx, esi
.text:004084F0                 mov     esi, ecx
.text:004084F2                 or      esi, edi
.text:004084F4                 mov     edi, ebx
.text:004084F6                 or      edi, edx
.text:004084F8
.text:004084F8 loc_4084F8:                             ; CODE XREF: sub_408370+153↑j
.text:004084F8                                         ; sub_408370+294↓j
.text:004084F8                 test    ebp, ebp
.text:004084FA                 jz      short loc_408507
.text:004084FC                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:004084FF                 call    FreeLibrary
.text:00408504                 sub     esp, 4
.text:00408507
.text:00408507 loc_408507:                             ; CODE XREF: sub_408370+18A↑j
.text:00408507                 mov     ebp, edi
.text:00408509                 mov     edx, ebp
.text:0040850B                 mov     edi, esi
.text:0040850D                 or      edx, esi
.text:0040850F                 jnz     short loc_40851B
.text:00408511                 mov     eax, [esp+6Ch+arg_4]
.text:00408515                 mov     edi, [eax+30h]
.text:00408518                 mov     ebp, [eax+34h]
.text:0040851B
.text:0040851B loc_40851B:                             ; CODE XREF: sub_408370+19F↑j
.text:0040851B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040851F                 mov     ebx, dword_410050
.text:00408525                 xor     esi, esi
.text:00408527                 mov     [esp+6Ch+var_60], esi
.text:0040852B                 mov     [esp+6Ch+Str], edi
.text:0040852E                 mov     [esp+6Ch+var_64], ebx
.text:00408532                 call    sub_40ED50
.text:00408537                 mov     [esp+6Ch+var_3C], eax
.text:0040853B                 mov     ecx, dword_410050
.text:00408541                 mov     [esp+6Ch+lpProcName], ebp
.text:00408545                 mov     [esp+6Ch+var_38], edx
.text:00408549                 shr     ecx, 9
.text:0040854C                 mov     [esp+6Ch+var_44], ecx
.text:00408550                 mov     [esp+6Ch+var_40], 0
.text:00408558                 mov     [esp+6Ch+var_64], ebx
.text:0040855C                 mov     [esp+6Ch+var_60], esi
.text:00408560                 mov     [esp+6Ch+Str], edi
.text:00408563                 call    sub_40EE70
.text:00408568                 mov     ebp, edx
.text:0040856A                 or      ebp, eax
.text:0040856C                 jz      short loc_4085D0
.text:0040856E                 mov     ebp, [esp+6Ch+var_3C]
.text:00408572                 mov     esi, [esp+6Ch+var_38]
.text:00408576                 mov     eax, [esp+6Ch+var_44]
.text:0040857A                 mov     [esp+6Ch+var_4C], ebp
.text:0040857E                 mov     ecx, [esp+6Ch+var_40]
.text:00408582                 mov     ebx, [esp+6Ch+var_44]
.text:00408586                 add     [esp+6Ch+var_4C], 1
.text:0040858B                 mov     [esp+6Ch+var_48], esi
.text:0040858F                 mov     edi, [esp+6Ch+var_4C]
.text:00408593                 adc     [esp+6Ch+var_48], 0
.text:00408598                 mul     [esp+6Ch+var_4C]
.text:0040859C                 imul    ecx, edi
.text:0040859F                 mov     esi, eax
.text:004085A1                 mov     eax, [esp+6Ch+var_48]
.text:004085A5                 add     edx, ecx
.text:004085A7                 imul    ebx, eax
.text:004085AA                 lea     edi, [ebx+edx]
.text:004085AD
.text:004085AD loc_4085AD:                             ; CODE XREF: sub_408370+287↓j
.text:004085AD                 mov     ebx, [esp+6Ch+arg_4]
.text:004085B1                 mov     [ebx+58h], esi
.text:004085B4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:004085B8                 mov     [ebx+5Ch], edi
.text:004085BB                 mov     [esp+6Ch+Str], esi ; Block
.text:004085BE                 call    free
.text:004085C3
.text:004085C3 loc_4085C3:                             ; CODE XREF: sub_408370+21↑j
.text:004085C3                 add     esp, 5Ch
.text:004085C6                 xor     eax, eax
.text:004085C8                 pop     ebx
.text:004085C9                 pop     esi
.text:004085CA                 pop     edi
.text:004085CB                 pop     ebp
.text:004085CC                 retn
.text:004085CC ; ---------------------------------------------------------------------------
.text:004085CD                 align 10h
.text:004085D0
.text:004085D0 loc_4085D0:                             ; CODE XREF: sub_408370+1FC↑j
.text:004085D0                 mov     eax, [esp+6Ch+var_3C]
.text:004085D4                 mov     edi, [esp+6Ch+var_40]
.text:004085D8                 mov     ecx, [esp+6Ch+var_3C]
.text:004085DC                 mul     [esp+6Ch+var_44]
.text:004085E0                 mov     ebx, [esp+6Ch+var_44]
.text:004085E4                 imul    ecx, edi
.text:004085E7                 mov     ebp, edx
.text:004085E9                 mov     esi, eax
.text:004085EB                 mov     edx, [esp+6Ch+var_38]
.text:004085EF                 add     ebp, ecx
.text:004085F1                 imul    ebx, edx
.text:004085F4                 lea     edi, [ebx+ebp]
.text:004085F7                 jmp     short loc_4085AD
.text:004085F9 ; ---------------------------------------------------------------------------
.text:004085F9
.text:004085F9 loc_4085F9:                             ; CODE XREF: sub_408370+16E↑j
.text:004085F9                 call    GetLastError
.text:004085FE                 xor     esi, esi
.text:00408600                 xor     edi, edi
.text:00408602                 test    eax, eax
.text:00408604                 jnz     loc_4084F8
.text:0040860A                 jmp     loc_4084E4
.text:0040860A ; ---------------------------------------------------------------------------
.text:0040860F                 align 10h
.text:00408610
.text:00408610 loc_408610:                             ; CODE XREF: sub_408370+116↑j
.text:00408610                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00408614                 lea     ecx, [esp+6Ch+var_20]
.text:00408618                 lea     ebx, [esp+6Ch+var_1C]
.text:0040861C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00408620                 lea     edi, [esp+6Ch+var_24]
.text:00408624                 lea     ebp, [esp+6Ch+var_28]
.text:00408628                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040862C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00408630                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00408634                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00408637                 call    sub_40A790
.text:0040863C                 test    eax, eax
.text:0040863E                 jnz     short loc_408660
.text:00408640                 mov     [esp+6Ch+var_28], 1
.text:00408648                 mov     [esp+6Ch+var_24], 200h
.text:00408650                 mov     [esp+6Ch+var_20], 0
.text:00408658                 mov     [esp+6Ch+var_1C], 0
.text:00408660
.text:00408660 loc_408660:                             ; CODE XREF: sub_408370+2CE↑j
.text:00408660                 mov     ebp, [esp+6Ch+var_24]
.text:00408664                 mov     edi, [esp+6Ch+var_28]
.text:00408668                 mov     eax, [esp+6Ch+arg_4]
.text:0040866C                 imul    ebp, edi
.text:0040866F                 mov     esi, [eax+10h]
.text:00408672                 mov     dword_410050, ebp
.text:00408678                 mov     ds:dword_411200, esi
.text:0040867E                 jmp     loc_40848C
.text:00408683 ; ---------------------------------------------------------------------------
.text:00408683
.text:00408683 loc_408683:                             ; CODE XREF: sub_408370+9D↑j
.text:00408683                                         ; sub_408370+B6↑j ...
.text:00408683                 xor     eax, eax
.text:00408685                 jmp     loc_408460
.text:00408685 ; ---------------------------------------------------------------------------
.text:0040868A                 align 10h
.text:00408690
.text:00408690 loc_408690:                             ; CODE XREF: sub_408370+AA↑j
.text:00408690                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:00408697                 xor     ebp, ebp
.text:00408699                 call    GetModuleHandleA
.text:0040869E                 sub     esp, 4
.text:004086A1                 mov     edi, eax
.text:004086A3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004086AB                 mov     [esp+6Ch+Str], eax ; hModule
.text:004086AE                 call    GetProcAddress
.text:004086B3                 sub     esp, 8
.text:004086B6                 mov     edx, eax
.text:004086B8                 test    eax, eax
.text:004086BA                 jz      short loc_4086D4
.text:004086BC                 mov     eax, [esp+6Ch+String1]
.text:004086C0                 lea     ecx, [esp+6Ch+var_18]
.text:004086C4                 mov     [esp+6Ch+lpProcName], ecx
.text:004086C8                 mov     [esp+6Ch+Str], eax
.text:004086CB                 call    edx
.text:004086CD                 sub     esp, 8
.text:004086D0                 test    eax, eax
.text:004086D2                 jnz     short loc_408738
.text:004086D4
.text:004086D4 loc_4086D4:                             ; CODE XREF: sub_408370+34A↑j
.text:004086D4                 mov     edx, ds:Str
.text:004086DA                 test    edx, edx
.text:004086DC                 jz      short loc_408757
.text:004086DE
.text:004086DE loc_4086DE:                             ; CODE XREF: sub_408370+3FA↓j
.text:004086DE                                         ; sub_408370+40C↓j
.text:004086DE                 mov     eax, [esp+6Ch+String1]
.text:004086E2                 test    eax, eax
.text:004086E4                 jz      short loc_4086EF
.text:004086E6                 mov     esi, [esp+6Ch+String1]
.text:004086EA                 cmp     byte ptr [esi], 0
.text:004086ED                 jnz     short loc_40870C
.text:004086EF
.text:004086EF loc_4086EF:                             ; CODE XREF: sub_408370+374↑j
.text:004086EF                                         ; sub_408370+3B0↓j ...
.text:004086EF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:004086F2                 call    FreeLibrary
.text:004086F7                 sub     esp, 4
.text:004086FA                 test    ebp, ebp
.text:004086FC                 jz      loc_408420
.text:00408702                 mov     ebx, 49h ; 'I'
.text:00408707                 jmp     loc_408420
.text:0040870C ; ---------------------------------------------------------------------------
.text:0040870C
.text:0040870C loc_40870C:                             ; CODE XREF: sub_408370+37D↑j
.text:0040870C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040870F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00408717                 call    strrchr
.text:0040871C                 test    eax, eax
.text:0040871E                 mov     esi, eax
.text:00408720                 jz      short loc_4086EF
.text:00408722                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00408726                 mov     ecx, ds:Str
.text:0040872C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040872F                 call    strstr
.text:00408734                 test    eax, eax
.text:00408736                 jz      short loc_40873F
.text:00408738
.text:00408738 loc_408738:                             ; CODE XREF: sub_408370+362↑j
.text:00408738                                         ; sub_408370+3E5↓j
.text:00408738                 mov     ebp, 1
.text:0040873D                 jmp     short loc_4086EF
.text:0040873F ; ---------------------------------------------------------------------------
.text:0040873F
.text:0040873F loc_40873F:                             ; CODE XREF: sub_408370+3C6↑j
.text:0040873F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00408743                 mov     edx, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00408749                 mov     [esp+6Ch+Str], edx ; Str
.text:0040874C                 call    strstr
.text:00408751                 test    eax, eax
.text:00408753                 jz      short loc_4086EF
.text:00408755                 jmp     short loc_408738
.text:00408757 ; ---------------------------------------------------------------------------
.text:00408757
.text:00408757 loc_408757:                             ; CODE XREF: sub_408370+36C↑j
.text:00408757                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040875E                 call    getenv
.text:00408763                 mov     ds:Str, eax
.text:00408768                 test    eax, eax
.text:0040876A                 jnz     loc_4086DE
.text:00408770                 mov     esi, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00408776                 mov     ds:Str, esi
.text:0040877C                 jmp     loc_4086DE
.text:00408781 ; ---------------------------------------------------------------------------
.text:00408781
.text:00408781 loc_408781:                             ; CODE XREF: sub_408370+81↑j
.text:00408781                                         ; sub_408370+452↓j
.text:00408781                 shld    edi, esi, 8
.text:00408785                 movsx   eax, cl
.text:00408788                 shl     esi, 8
.text:0040878B                 cdq
.text:0040878C                 add     esi, eax
.text:0040878E                 adc     edi, edx
.text:00408790                 mov     edx, edi
.text:00408792                 xor     ebx, ebx
.text:00408794                 and     edx, 0FF000000h
.text:0040879A                 mov     eax, edx
.text:0040879C                 or      eax, ebx
.text:0040879E                 jz      short loc_4087B9
.text:004087A0                 mov     ecx, edx
.text:004087A2                 xor     eax, eax
.text:004087A4                 shr     ecx, 10h
.text:004087A7                 mov     edx, esi
.text:004087A9                 xor     edx, ecx
.text:004087AB                 mov     ecx, edi
.text:004087AD                 xor     ecx, eax
.text:004087AF                 mov     esi, edx
.text:004087B1                 mov     edi, ecx
.text:004087B3                 and     edi, 0FFFFFFh
.text:004087B9
.text:004087B9 loc_4087B9:                             ; CODE XREF: sub_408370+42E↑j
.text:004087B9                 inc     ebp
.text:004087BA                 movzx   ebx, byte ptr [ebp+0]
.text:004087BE                 test    bl, bl
.text:004087C0                 mov     cl, bl
.text:004087C2                 jnz     short loc_408781
.text:004087C4                 mov     eax, esi
.text:004087C6                 mov     edx, edi
.text:004087C8                 jmp     loc_4083FB
.text:004087C8 ; ---------------------------------------------------------------------------
.text:004087CD                 align 10h
.text:004087D0
.text:004087D0 loc_4087D0:                             ; CODE XREF: sub_408370+3F↑j
.text:004087D0                                         ; sub_408370+57↑j
.text:004087D0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:004087D4                 mov     ebp, [esp+6Ch+String1]
.text:004087D8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:004087DC                 mov     [esp+6Ch+Str], ebp ; String1
.text:004087DF                 call    _stricmp
.text:004087E4                 test    eax, eax
.text:004087E6                 jnz     short loc_408800
.text:004087E8                 mov     ebx, [esp+6Ch+arg_4]
.text:004087EC                 mov     dword ptr [ebx+8], 5
.text:004087F3                 mov     dword ptr [ebx+0Ch], 50000h
.text:004087FA                 jmp     loc_4083CD
.text:004087FA ; ---------------------------------------------------------------------------
.text:004087FF                 align 10h
.text:00408800
.text:00408800 loc_408800:                             ; CODE XREF: sub_408370+476↑j
.text:00408800                 mov     ebp, [esp+6Ch+String1]
.text:00408804                 xor     esi, esi
.text:00408806                 xor     edi, edi
.text:00408808                 add     ebp, ebx
.text:0040880A                 jz      short loc_408814
.text:0040880C                 movzx   ecx, byte ptr [ebp+0]
.text:00408810                 test    cl, cl
.text:00408812                 jnz     short loc_408827
.text:00408814
.text:00408814 loc_408814:                             ; CODE XREF: sub_408370+49A↑j
.text:00408814                 xor     eax, eax
.text:00408816                 xor     edx, edx
.text:00408818
.text:00408818 loc_408818:                             ; CODE XREF: sub_408370+4FE↓j
.text:00408818                 mov     ebp, [esp+6Ch+arg_4]
.text:0040881C                 mov     [ebp+8], eax
.text:0040881F                 mov     [ebp+0Ch], edx
.text:00408822                 jmp     loc_4083CD
.text:00408827 ; ---------------------------------------------------------------------------
.text:00408827
.text:00408827 loc_408827:                             ; CODE XREF: sub_408370+4A2↑j
.text:00408827                                         ; sub_408370+4F8↓j
.text:00408827                 shld    edi, esi, 8
.text:0040882B                 movsx   eax, cl
.text:0040882E                 shl     esi, 8
.text:00408831                 cdq
.text:00408832                 add     esi, eax
.text:00408834                 adc     edi, edx
.text:00408836                 mov     edx, edi
.text:00408838                 xor     ebx, ebx
.text:0040883A                 and     edx, 0FF000000h
.text:00408840                 mov     eax, edx
.text:00408842                 or      eax, ebx
.text:00408844                 jz      short loc_40885F
.text:00408846                 mov     ecx, edx
.text:00408848                 xor     eax, eax
.text:0040884A                 shr     ecx, 10h
.text:0040884D                 mov     edx, esi
.text:0040884F                 xor     edx, ecx
.text:00408851                 mov     ecx, edi
.text:00408853                 xor     ecx, eax
.text:00408855                 mov     esi, edx
.text:00408857                 mov     edi, ecx
.text:00408859                 and     edi, 0FFFFFFh
.text:0040885F
.text:0040885F loc_40885F:                             ; CODE XREF: sub_408370+4D4↑j
.text:0040885F                 inc     ebp
.text:00408860                 movzx   ebx, byte ptr [ebp+0]
.text:00408864                 test    bl, bl
.text:00408866                 mov     cl, bl
.text:00408868                 jnz     short loc_408827
.text:0040886A                 mov     eax, esi
.text:0040886C                 mov     edx, edi
.text:0040886E                 jmp     short loc_408818
.text:0040886E sub_408370      endp
.text:0040886E
.text:00408870
.text:00408870 ; =============== S U B R O U T I N E =======================================
.text:00408870
.text:00408870
.text:00408870 ; int __cdecl sub_408870(LPCSTR)
.text:00408870 sub_408870      proc near               ; CODE XREF: sub_409E90+CA↓p
.text:00408870
.text:00408870 lpRootPathName  = dword ptr -83Ch
.text:00408870 lpVolumeNameBuffer= dword ptr -838h
.text:00408870 nVolumeNameSize = dword ptr -834h
.text:00408870 lpVolumeSerialNumber= dword ptr -830h
.text:00408870 lpMaximumComponentLength= dword ptr -82Ch
.text:00408870 lpFileSystemFlags= dword ptr -828h
.text:00408870 lpFileSystemNameBuffer= dword ptr -824h
.text:00408870 nFileSystemNameSize= dword ptr -820h
.text:00408870 VolumeSerialNumber= dword ptr -818h
.text:00408870 MaximumComponentLength= dword ptr -814h
.text:00408870 FileSystemFlags = dword ptr -810h
.text:00408870 FileSystemNameBuffer= byte ptr -80Ch
.text:00408870 VolumeNameBuffer= byte ptr -40Ch
.text:00408870 var_4           = dword ptr -4
.text:00408870 arg_0           = dword ptr  4
.text:00408870
.text:00408870                 sub     esp, 83Ch
.text:00408876                 mov     [esp+83Ch+var_4], ebx
.text:0040887D                 mov     ebx, [esp+83Ch+arg_0]
.text:00408884                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00408887                 call    sub_409D70
.text:0040888C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040888F                 call    sub_40AE80
.text:00408894                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:00408897                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040889B                 mov     ebx, eax
.text:0040889D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:004088A1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:004088A5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:004088A9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:004088AD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:004088B1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004088B5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:004088BC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004088C0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:004088C4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004088CC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:004088D4                 call    GetVolumeInformationA
.text:004088D9                 sub     esp, 20h
.text:004088DC                 test    eax, eax
.text:004088DE                 setz    cl
.text:004088E1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:004088E4                 movzx   edx, cl
.text:004088E7                 dec     edx
.text:004088E8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:004088EC                 call    free
.text:004088F1                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:004088F5                 mov     ebx, [esp+83Ch+var_4]
.text:004088FC                 add     esp, 83Ch
.text:00408902                 retn
.text:00408902 sub_408870      endp
.text:00408902
.text:00408902 ; ---------------------------------------------------------------------------
.text:00408903                 align 10h
.text:00408910                 push    ebp
.text:00408911                 push    edi
.text:00408912                 xor     edi, edi
.text:00408914                 push    esi
.text:00408915                 xor     esi, esi
.text:00408917                 push    ebx
.text:00408918                 mov     ebp, [esp+14h]
.text:0040891C                 test    ebp, ebp
.text:0040891E                 jz      short loc_408928
.text:00408920                 movzx   ecx, byte ptr [ebp+0]
.text:00408924                 test    cl, cl
.text:00408926                 jnz     short loc_408931
.text:00408928
.text:00408928 loc_408928:                             ; CODE XREF: .text:0040891E↑j
.text:00408928                 xor     eax, eax
.text:0040892A                 xor     edx, edx
.text:0040892C
.text:0040892C loc_40892C:                             ; CODE XREF: .text:00408978↓j
.text:0040892C                 pop     ebx
.text:0040892D                 pop     esi
.text:0040892E                 pop     edi
.text:0040892F                 pop     ebp
.text:00408930                 retn
.text:00408931 ; ---------------------------------------------------------------------------
.text:00408931
.text:00408931 loc_408931:                             ; CODE XREF: .text:00408926↑j
.text:00408931                                         ; .text:00408972↓j
.text:00408931                 shld    edi, esi, 8
.text:00408935                 movsx   eax, cl
.text:00408938                 shl     esi, 8
.text:0040893B                 cdq
.text:0040893C                 add     esi, eax
.text:0040893E                 adc     edi, edx
.text:00408940                 mov     edx, edi
.text:00408942                 xor     ebx, ebx
.text:00408944                 and     edx, 0FF000000h
.text:0040894A                 mov     eax, edx
.text:0040894C                 or      eax, ebx
.text:0040894E                 jz      short loc_408969
.text:00408950                 mov     ecx, edx
.text:00408952                 xor     eax, eax
.text:00408954                 shr     ecx, 10h
.text:00408957                 mov     edx, esi
.text:00408959                 xor     edx, ecx
.text:0040895B                 mov     ecx, edi
.text:0040895D                 xor     ecx, eax
.text:0040895F                 mov     esi, edx
.text:00408961                 mov     edi, ecx
.text:00408963                 and     edi, 0FFFFFFh
.text:00408969
.text:00408969 loc_408969:                             ; CODE XREF: .text:0040894E↑j
.text:00408969                 inc     ebp
.text:0040896A                 movzx   ebx, byte ptr [ebp+0]
.text:0040896E                 test    bl, bl
.text:00408970                 mov     cl, bl
.text:00408972                 jnz     short loc_408931
.text:00408974                 mov     eax, esi
.text:00408976                 mov     edx, edi
.text:00408978                 jmp     short loc_40892C
.text:00408978 ; ---------------------------------------------------------------------------
.text:0040897A                 align 10h
.text:00408980                 sub     esp, 2Ch
.text:00408983                 lea     edx, [esp+24h]
.text:00408987                 lea     ecx, [esp+28h]
.text:0040898B                 mov     [esp+0Ch], edx
.text:0040898F                 lea     edx, [esp+1Ch]
.text:00408993                 mov     [esp+4], edx
.text:00408997                 mov     edx, [esp+30h]
.text:0040899B                 mov     [esp+10h], ecx
.text:0040899F                 lea     ecx, [esp+20h]
.text:004089A3                 mov     [esp+8], ecx
.text:004089A7                 mov     [esp], edx
.text:004089AA                 call    sub_40A790
.text:004089AF                 test    eax, eax
.text:004089B1                 jnz     short loc_4089D3
.text:004089B3                 mov     dword ptr [esp+1Ch], 1
.text:004089BB                 mov     dword ptr [esp+20h], 200h
.text:004089C3                 mov     dword ptr [esp+24h], 0
.text:004089CB                 mov     dword ptr [esp+28h], 0
.text:004089D3
.text:004089D3 loc_4089D3:                             ; CODE XREF: .text:004089B1↑j
.text:004089D3                 mov     eax, [esp+20h]
.text:004089D7                 mov     ecx, [esp+1Ch]
.text:004089DB                 add     esp, 2Ch
.text:004089DE                 imul    eax, ecx
.text:004089E1                 retn
.text:004089E1 ; ---------------------------------------------------------------------------
.text:004089E2                 align 10h
.text:004089F0                 sub     esp, 1Ch
.text:004089F3                 mov     eax, [esp+20h]
.text:004089F7                 mov     [esp+14h], esi
.text:004089FB                 mov     [esp+18h], edi
.text:004089FF                 test    eax, eax
.text:00408A01                 jz      short loc_408A40
.text:00408A03                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408A0B                 mov     [esp], eax
.text:00408A0E                 call    strrchr
.text:00408A13                 test    eax, eax
.text:00408A15                 jz      short loc_408A40
.text:00408A17                 cld
.text:00408A18                 mov     esi, eax
.text:00408A1A                 mov     edi, offset aLnk ; ".lnk"
.text:00408A1F                 mov     ecx, 5
.text:00408A24                 repe cmpsb
.text:00408A26                 setz    dl
.text:00408A29                 movzx   eax, dl
.text:00408A2C                 lea     esi, [esi+0]
.text:00408A30
.text:00408A30 loc_408A30:                             ; CODE XREF: .text:00408A42↓j
.text:00408A30                 mov     esi, [esp+14h]
.text:00408A34                 mov     edi, [esp+18h]
.text:00408A38                 add     esp, 1Ch
.text:00408A3B                 retn
.text:00408A3B ; ---------------------------------------------------------------------------
.text:00408A3C                 align 10h
.text:00408A40
.text:00408A40 loc_408A40:                             ; CODE XREF: .text:00408A01↑j
.text:00408A40                                         ; .text:00408A15↑j
.text:00408A40                 xor     eax, eax
.text:00408A42                 jmp     short loc_408A30
.text:00408A42 ; ---------------------------------------------------------------------------
.text:00408A44                 align 10h
.text:00408A50                 sub     esp, 1Ch
.text:00408A53                 mov     [esp+10h], ebx
.text:00408A57                 mov     ebx, [esp+20h]
.text:00408A5B                 mov     [esp+14h], esi
.text:00408A5F                 mov     [esp+18h], edi
.text:00408A63                 xor     edi, edi
.text:00408A65                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:00408A6C                 call    GetModuleHandleA
.text:00408A71                 sub     esp, 4
.text:00408A74                 mov     esi, eax
.text:00408A76                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00408A7E                 mov     [esp], eax
.text:00408A81                 call    GetProcAddress
.text:00408A86                 sub     esp, 8
.text:00408A89                 test    eax, eax
.text:00408A8B                 jz      short loc_408AA1
.text:00408A8D                 mov     [esp], ebx
.text:00408A90                 lea     ecx, [esp+0Ch]
.text:00408A94                 mov     [esp+4], ecx
.text:00408A98                 call    eax
.text:00408A9A                 sub     esp, 8
.text:00408A9D                 test    eax, eax
.text:00408A9F                 jnz     short loc_408B00
.text:00408AA1
.text:00408AA1 loc_408AA1:                             ; CODE XREF: .text:00408A8B↑j
.text:00408AA1                 mov     eax, ds:Str
.text:00408AA6                 test    eax, eax
.text:00408AA8                 jz      short loc_408B20
.text:00408AAA
.text:00408AAA loc_408AAA:                             ; CODE XREF: .text:00408B33↓j
.text:00408AAA                                         ; .text:00408B45↓j
.text:00408AAA                 test    ebx, ebx
.text:00408AAC                 jz      short loc_408AB3
.text:00408AAE                 cmp     byte ptr [ebx], 0
.text:00408AB1                 jnz     short loc_408AD0
.text:00408AB3
.text:00408AB3 loc_408AB3:                             ; CODE XREF: .text:00408AAC↑j
.text:00408AB3                                         ; .text:00408AE4↓j ...
.text:00408AB3                 mov     [esp], esi
.text:00408AB6                 call    FreeLibrary
.text:00408ABB                 sub     esp, 4
.text:00408ABE                 mov     eax, edi
.text:00408AC0                 mov     ebx, [esp+10h]
.text:00408AC4                 mov     esi, [esp+14h]
.text:00408AC8                 mov     edi, [esp+18h]
.text:00408ACC                 add     esp, 1Ch
.text:00408ACF                 retn
.text:00408AD0 ; ---------------------------------------------------------------------------
.text:00408AD0
.text:00408AD0 loc_408AD0:                             ; CODE XREF: .text:00408AB1↑j
.text:00408AD0                 mov     [esp], ebx
.text:00408AD3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408ADB                 call    strrchr
.text:00408AE0                 test    eax, eax
.text:00408AE2                 mov     ebx, eax
.text:00408AE4                 jz      short loc_408AB3
.text:00408AE6                 mov     [esp+4], eax
.text:00408AEA                 mov     ecx, ds:Str
.text:00408AF0                 mov     [esp], ecx
.text:00408AF3                 call    strstr
.text:00408AF8                 test    eax, eax
.text:00408AFA                 jz      short loc_408B07
.text:00408AFC                 lea     esi, [esi+0]
.text:00408B00
.text:00408B00 loc_408B00:                             ; CODE XREF: .text:00408A9F↑j
.text:00408B00                                         ; .text:00408B1D↓j
.text:00408B00                 mov     edi, 1
.text:00408B05                 jmp     short loc_408AB3
.text:00408B07 ; ---------------------------------------------------------------------------
.text:00408B07
.text:00408B07 loc_408B07:                             ; CODE XREF: .text:00408AFA↑j
.text:00408B07                 mov     [esp+4], ebx
.text:00408B0B                 mov     ebx, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00408B11                 mov     [esp], ebx
.text:00408B14                 call    strstr
.text:00408B19                 test    eax, eax
.text:00408B1B                 jz      short loc_408AB3
.text:00408B1D                 jmp     short loc_408B00
.text:00408B1D ; ---------------------------------------------------------------------------
.text:00408B1F                 align 10h
.text:00408B20
.text:00408B20 loc_408B20:                             ; CODE XREF: .text:00408AA8↑j
.text:00408B20                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00408B27                 call    getenv
.text:00408B2C                 mov     ds:Str, eax
.text:00408B31                 test    eax, eax
.text:00408B33                 jnz     loc_408AAA
.text:00408B39                 mov     edx, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00408B3F                 mov     ds:Str, edx
.text:00408B45                 jmp     loc_408AAA
.text:00408B45 ; ---------------------------------------------------------------------------
.text:00408B4A                 align 10h
.text:00408B50                 sub     esp, 0Ch
.text:00408B53                 mov     edx, [esp+10h]
.text:00408B57                 mov     [esp], edx
.text:00408B5A                 call    GetFileType
.text:00408B5F                 sub     esp, 4
.text:00408B62                 xor     edx, edx
.text:00408B64                 cmp     eax, 2
.text:00408B67                 jz      short loc_408B80
.text:00408B69                 cmp     eax, 3
.text:00408B6C                 jz      short loc_408B74
.text:00408B6E
.text:00408B6E loc_408B6E:                             ; CODE XREF: .text:00408B79↓j
.text:00408B6E                                         ; .text:00408B85↓j
.text:00408B6E                 mov     eax, edx
.text:00408B70                 add     esp, 0Ch
.text:00408B73                 retn
.text:00408B74 ; ---------------------------------------------------------------------------
.text:00408B74
.text:00408B74 loc_408B74:                             ; CODE XREF: .text:00408B6C↑j
.text:00408B74                 mov     edx, 1000h
.text:00408B79                 jmp     short loc_408B6E
.text:00408B79 ; ---------------------------------------------------------------------------
.text:00408B7B                 align 10h
.text:00408B80
.text:00408B80 loc_408B80:                             ; CODE XREF: .text:00408B67↑j
.text:00408B80                 mov     edx, 2000h
.text:00408B85                 jmp     short loc_408B6E
.text:00408B85 ; ---------------------------------------------------------------------------
.text:00408B87                 align 10h
.text:00408B90                 mov     ecx, [esp+4]
.text:00408B94                 xor     edx, edx
.text:00408B96                 test    cl, 10h
.text:00408B99                 setz    dl
.text:00408B9C                 dec     edx
.text:00408B9D                 and     edx, 0FFFFC000h
.text:00408BA3                 add     edx, 8000h
.text:00408BA9                 or      edx, 124h
.text:00408BAF                 test    cl, 1
.text:00408BB2                 movzx   eax, dx
.text:00408BB5                 jnz     short locret_408BBC
.text:00408BB7                 or      eax, 92h
.text:00408BBC
.text:00408BBC locret_408BBC:                          ; CODE XREF: .text:00408BB5↑j
.text:00408BBC                 retn
.text:00408BBC ; ---------------------------------------------------------------------------
.text:00408BBD                 align 10h
.text:00408BC0                 sub     esp, 2Ch
.text:00408BC3                 mov     [esp+20h], esi
.text:00408BC7                 mov     esi, [esp+30h]
.text:00408BCB                 mov     [esp+1Ch], ebx
.text:00408BCF                 xor     ebx, ebx
.text:00408BD1                 test    esi, esi
.text:00408BD3                 mov     [esp+24h], edi
.text:00408BD7                 mov     [esp+28h], ebp
.text:00408BDB                 jz      short loc_408C30
.text:00408BDD                 cmp     byte ptr [esi], 0
.text:00408BE0                 jnz     short loc_408C34
.text:00408BE2
.text:00408BE2 loc_408BE2:                             ; CODE XREF: .text:00408C9C↓j
.text:00408BE2                                         ; .text:00408CA7↓j
.text:00408BE2                 test    esi, esi
.text:00408BE4                 jz      short loc_408C30
.text:00408BE6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408BEE                 mov     [esp], esi
.text:00408BF1                 call    strrchr
.text:00408BF6                 test    eax, eax
.text:00408BF8                 jz      short loc_408C30
.text:00408BFA                 cld
.text:00408BFB                 mov     ecx, 5
.text:00408C00                 mov     esi, eax
.text:00408C02                 mov     edi, offset aLnk ; ".lnk"
.text:00408C07                 repe cmpsb
.text:00408C09                 setz    cl
.text:00408C0C                 movzx   eax, cl
.text:00408C0F                 nop
.text:00408C10
.text:00408C10 loc_408C10:                             ; CODE XREF: .text:00408C32↓j
.text:00408C10                 test    eax, eax
.text:00408C12                 jz      short loc_408C1A
.text:00408C14                 or      ebx, 0A000h
.text:00408C1A
.text:00408C1A loc_408C1A:                             ; CODE XREF: .text:00408C12↑j
.text:00408C1A                 mov     eax, ebx
.text:00408C1C                 mov     esi, [esp+20h]
.text:00408C20                 mov     ebx, [esp+1Ch]
.text:00408C24                 mov     edi, [esp+24h]
.text:00408C28                 mov     ebp, [esp+28h]
.text:00408C2C                 add     esp, 2Ch
.text:00408C2F                 retn
.text:00408C30 ; ---------------------------------------------------------------------------
.text:00408C30
.text:00408C30 loc_408C30:                             ; CODE XREF: .text:00408BDB↑j
.text:00408C30                                         ; .text:00408BE4↑j ...
.text:00408C30                 xor     eax, eax
.text:00408C32                 jmp     short loc_408C10
.text:00408C34 ; ---------------------------------------------------------------------------
.text:00408C34
.text:00408C34 loc_408C34:                             ; CODE XREF: .text:00408BE0↑j
.text:00408C34                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:00408C3B                 call    GetModuleHandleA
.text:00408C40                 sub     esp, 4
.text:00408C43                 mov     ebp, eax
.text:00408C45                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00408C4D                 mov     [esp], eax
.text:00408C50                 call    GetProcAddress
.text:00408C55                 sub     esp, 8
.text:00408C58                 test    eax, eax
.text:00408C5A                 mov     dword ptr [esp+14h], 0
.text:00408C62                 jz      short loc_408C78
.text:00408C64                 mov     [esp], esi
.text:00408C67                 lea     ecx, [esp+18h]
.text:00408C6B                 mov     [esp+4], ecx
.text:00408C6F                 call    eax
.text:00408C71                 sub     esp, 8
.text:00408C74                 test    eax, eax
.text:00408C76                 jnz     short loc_408CD8
.text:00408C78
.text:00408C78 loc_408C78:                             ; CODE XREF: .text:00408C62↑j
.text:00408C78                 mov     edx, ds:Str
.text:00408C7E                 test    edx, edx
.text:00408C80                 jz      short loc_408D00
.text:00408C82
.text:00408C82 loc_408C82:                             ; CODE XREF: .text:00408D13↓j
.text:00408C82                                         ; .text:00408D25↓j
.text:00408C82                 test    esi, esi
.text:00408C84                 jz      short loc_408C8B
.text:00408C86                 cmp     byte ptr [esi], 0
.text:00408C89                 jnz     short loc_408CAC
.text:00408C8B
.text:00408C8B loc_408C8B:                             ; CODE XREF: .text:00408C84↑j
.text:00408C8B                                         ; .text:00408CC0↓j ...
.text:00408C8B                 mov     [esp], ebp
.text:00408C8E                 call    FreeLibrary
.text:00408C93                 sub     esp, 4
.text:00408C96                 mov     eax, [esp+14h]
.text:00408C9A                 test    eax, eax
.text:00408C9C                 jz      loc_408BE2
.text:00408CA2                 mov     ebx, 49h ; 'I'
.text:00408CA7                 jmp     loc_408BE2
.text:00408CAC ; ---------------------------------------------------------------------------
.text:00408CAC
.text:00408CAC loc_408CAC:                             ; CODE XREF: .text:00408C89↑j
.text:00408CAC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408CB4                 mov     [esp], esi
.text:00408CB7                 call    strrchr
.text:00408CBC                 test    eax, eax
.text:00408CBE                 mov     edi, eax
.text:00408CC0                 jz      short loc_408C8B
.text:00408CC2                 mov     [esp+4], eax
.text:00408CC6                 mov     edx, ds:Str
.text:00408CCC                 mov     [esp], edx
.text:00408CCF                 call    strstr
.text:00408CD4                 test    eax, eax
.text:00408CD6                 jz      short loc_408CE2
.text:00408CD8
.text:00408CD8 loc_408CD8:                             ; CODE XREF: .text:00408C76↑j
.text:00408CD8                                         ; .text:00408CF8↓j
.text:00408CD8                 mov     dword ptr [esp+14h], 1
.text:00408CE0                 jmp     short loc_408C8B
.text:00408CE2 ; ---------------------------------------------------------------------------
.text:00408CE2
.text:00408CE2 loc_408CE2:                             ; CODE XREF: .text:00408CD6↑j
.text:00408CE2                 mov     [esp+4], edi
.text:00408CE6                 mov     edi, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00408CEC                 mov     [esp], edi
.text:00408CEF                 call    strstr
.text:00408CF4                 test    eax, eax
.text:00408CF6                 jz      short loc_408C8B
.text:00408CF8                 jmp     short loc_408CD8
.text:00408CF8 ; ---------------------------------------------------------------------------
.text:00408CFA                 align 10h
.text:00408D00
.text:00408D00 loc_408D00:                             ; CODE XREF: .text:00408C80↑j
.text:00408D00                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00408D07                 call    getenv
.text:00408D0C                 mov     ds:Str, eax
.text:00408D11                 test    eax, eax
.text:00408D13                 jnz     loc_408C82
.text:00408D19                 mov     ecx, off_410054 ; ".com;.exe;.bat;.cmd"
.text:00408D1F                 mov     ds:Str, ecx
.text:00408D25                 jmp     loc_408C82
.text:00408D25 ; ---------------------------------------------------------------------------
.text:00408D2A                 align 10h
.text:00408D30                 push    esi
.text:00408D31                 push    ebx
.text:00408D32                 sub     esp, 864h
.text:00408D38                 mov     ebx, [esp+870h]
.text:00408D3F                 lea     edx, [esp+830h]
.text:00408D46                 mov     esi, [esp+874h]
.text:00408D4D                 mov     [esp+4], edx
.text:00408D51                 mov     [esp], ebx
.text:00408D54                 call    sub_407BB0
.text:00408D59                 xor     edx, edx
.text:00408D5B                 test    eax, eax
.text:00408D5D                 jz      loc_408E45
.text:00408D63                 mov     ecx, [esp+830h]
.text:00408D6A                 test    cl, 10h
.text:00408D6D                 mov     [esi], ecx
.text:00408D6F                 mov     eax, [esp+834h]
.text:00408D76                 mov     edx, [esp+838h]
.text:00408D7D                 mov     [esi+4], eax
.text:00408D80                 mov     [esi+8], edx
.text:00408D83                 mov     eax, [esp+83Ch]
.text:00408D8A                 mov     edx, [esp+840h]
.text:00408D91                 mov     [esi+0Ch], eax
.text:00408D94                 mov     [esi+10h], edx
.text:00408D97                 mov     edx, [esp+848h]
.text:00408D9E                 mov     eax, [esp+844h]
.text:00408DA5                 mov     [esi+18h], edx
.text:00408DA8                 mov     [esi+14h], eax
.text:00408DAB                 mov     edx, [esp+84Ch]
.text:00408DB2                 mov     [esi+20h], edx
.text:00408DB5                 mov     edx, [esp+850h]
.text:00408DBC                 mov     [esi+24h], edx
.text:00408DBF                 jnz     loc_408E50
.text:00408DC5                 mov     dword ptr [esi+28h], 1
.text:00408DCC
.text:00408DCC loc_408DCC:                             ; CODE XREF: .text:00408E5B↓j
.text:00408DCC                 mov     [esp], ebx
.text:00408DCF                 call    sub_409D70
.text:00408DD4                 mov     [esp], eax
.text:00408DD7                 call    sub_40AE80
.text:00408DDC                 mov     [esp], eax
.text:00408DDF                 lea     edx, [esp+30h]
.text:00408DE3                 mov     ebx, eax
.text:00408DE5                 mov     [esp+18h], edx
.text:00408DE9                 lea     ecx, [esp+2Ch]
.text:00408DED                 lea     edx, [esp+28h]
.text:00408DF1                 mov     [esp+14h], ecx
.text:00408DF5                 lea     ecx, [esp+24h]
.text:00408DF9                 mov     [esp+10h], edx
.text:00408DFD                 lea     edx, [esp+430h]
.text:00408E04                 mov     [esp+0Ch], ecx
.text:00408E08                 mov     [esp+4], edx
.text:00408E0C                 mov     dword ptr [esp+1Ch], 400h
.text:00408E14                 mov     dword ptr [esp+8], 400h
.text:00408E1C                 call    GetVolumeInformationA
.text:00408E21                 sub     esp, 20h
.text:00408E24                 test    eax, eax
.text:00408E26                 setz    cl
.text:00408E29                 mov     [esp], ebx
.text:00408E2C                 movzx   edx, cl
.text:00408E2F                 dec     edx
.text:00408E30                 and     [esp+24h], edx
.text:00408E34                 call    free
.text:00408E39                 mov     ecx, [esp+24h]
.text:00408E3D                 mov     edx, 1
.text:00408E42                 mov     [esi+1Ch], ecx
.text:00408E45
.text:00408E45 loc_408E45:                             ; CODE XREF: .text:00408D5D↑j
.text:00408E45                 add     esp, 864h
.text:00408E4B                 mov     eax, edx
.text:00408E4D                 pop     ebx
.text:00408E4E                 pop     esi
.text:00408E4F                 retn
.text:00408E50 ; ---------------------------------------------------------------------------
.text:00408E50
.text:00408E50 loc_408E50:                             ; CODE XREF: .text:00408DBF↑j
.text:00408E50                 mov     [esp], ebx
.text:00408E53                 call    sub_407D20
.text:00408E58                 mov     [esi+28h], eax
.text:00408E5B                 jmp     loc_408DCC
.text:00408E60 ; ---------------------------------------------------------------------------
.text:00408E60                 push    ebp
.text:00408E61                 xor     edx, edx
.text:00408E63                 push    edi
.text:00408E64                 push    esi
.text:00408E65                 xor     esi, esi
.text:00408E67                 push    ebx
.text:00408E68                 sub     esp, 1Ch
.text:00408E6B                 mov     ebx, [esp+5Ch]
.text:00408E6F                 mov     ecx, [esp+30h]
.text:00408E73                 mov     edi, [esp+60h]
.text:00408E77                 or      esi, ebx
.text:00408E79                 mov     eax, [esp+4Ch]
.text:00408E7D                 or      edi, edx
.text:00408E7F                 mov     ebx, [esp+64h]
.text:00408E83                 xor     edx, edx
.text:00408E85                 test    cl, 10h
.text:00408E88                 setz    dl
.text:00408E8B                 mov     [ebx+10h], eax
.text:00408E8E                 mov     [ebx+8], edi
.text:00408E91                 mov     [ebx+0Ch], esi
.text:00408E94                 dec     edx
.text:00408E95                 and     edx, 0FFFFC000h
.text:00408E9B                 mov     dword ptr [ebx+14h], 0
.text:00408EA2                 add     edx, 8000h
.text:00408EA8                 or      edx, 124h
.text:00408EAE                 test    cl, 1
.text:00408EB1                 movzx   eax, dx
.text:00408EB4                 jnz     short loc_408EBB
.text:00408EB6                 or      eax, 92h
.text:00408EBB
.text:00408EBB loc_408EBB:                             ; CODE XREF: .text:00408EB4↑j
.text:00408EBB                 mov     ebx, [esp+54h]
.text:00408EBF                 xor     edx, edx
.text:00408EC1                 xor     ebp, ebp
.text:00408EC3                 mov     edi, [esp+50h]
.text:00408EC7                 mov     ecx, [esp+64h]
.text:00408ECB                 mov     esi, edi
.text:00408ECD                 or      [ecx], eax
.text:00408ECF                 mov     edi, ebx
.text:00408ED1                 or      edi, ebp
.text:00408ED3                 mov     ebp, edx
.text:00408ED5                 mov     ebx, [esp+64h]
.text:00408ED9                 or      ebp, esi
.text:00408EDB                 mov     esi, [esp+58h]
.text:00408EDF                 mov     edx, [esp+40h]
.text:00408EE3                 mov     [ebx+30h], edi
.text:00408EE6                 mov     [ebx+18h], esi
.text:00408EE9                 mov     ecx, edx
.text:00408EEB                 xor     esi, esi
.text:00408EED                 mov     [ebx+34h], ebp
.text:00408EF0                 xor     edx, edx
.text:00408EF2                 or      esi, ecx
.text:00408EF4                 mov     dword ptr [esp+8], 989680h
.text:00408EFC                 mov     ebx, [esp+3Ch]
.text:00408F00                 mov     ecx, esi
.text:00408F02                 mov     dword ptr [esp+0Ch], 0
.text:00408F0A                 or      ebx, edx
.text:00408F0C                 mov     edx, ebx
.text:00408F0E                 sub     edx, 0D53E8000h
.text:00408F14                 sbb     ecx, 19DB1DEh
.text:00408F1A                 mov     [esp+4], ecx
.text:00408F1E                 mov     [esp], edx
.text:00408F21                 call    sub_40ED50
.text:00408F26                 mov     edx, eax
.text:00408F28                 mov     ecx, [esp+64h]
.text:00408F2C                 shr     eax, 1Fh
.text:00408F2F                 dec     eax
.text:00408F30                 and     edx, eax
.text:00408F32                 mov     [ecx+38h], edx
.text:00408F35                 mov     [esp], ebx
.text:00408F38                 mov     [esp+4], esi
.text:00408F3C                 mov     dword ptr [esp+8], 989680h
.text:00408F44                 mov     dword ptr [esp+0Ch], 0
.text:00408F4C                 call    sub_40EE70
.text:00408F51                 lea     ecx, [eax+eax*4]
.text:00408F54                 lea     esi, [ecx+ecx*4]
.text:00408F57                 mov     eax, [esp+64h]
.text:00408F5B                 shl     esi, 2
.text:00408F5E                 mov     ebx, esi
.text:00408F60                 shr     ebx, 1Fh
.text:00408F63                 dec     ebx
.text:00408F64                 and     ebx, esi
.text:00408F66                 xor     esi, esi
.text:00408F68                 mov     [eax+3Ch], ebx
.text:00408F6B                 mov     edx, [esp+38h]
.text:00408F6F                 mov     dword ptr [esp+8], 989680h
.text:00408F77                 mov     ebx, [esp+34h]
.text:00408F7B                 mov     dword ptr [esp+0Ch], 0
.text:00408F83                 mov     ecx, edx
.text:00408F85                 xor     edx, edx
.text:00408F87                 or      ebx, edx
.text:00408F89                 or      esi, ecx
.text:00408F8B                 mov     edx, ebx
.text:00408F8D                 sub     edx, 0D53E8000h
.text:00408F93                 mov     ecx, esi
.text:00408F95                 sbb     ecx, 19DB1DEh
.text:00408F9B                 mov     [esp+4], ecx
.text:00408F9F                 mov     [esp], edx
.text:00408FA2                 call    sub_40ED50
.text:00408FA7                 mov     edx, eax
.text:00408FA9                 mov     ecx, [esp+64h]
.text:00408FAD                 shr     eax, 1Fh
.text:00408FB0                 dec     eax
.text:00408FB1                 and     edx, eax
.text:00408FB3                 mov     [ecx+48h], edx
.text:00408FB6                 mov     [esp], ebx
.text:00408FB9                 mov     [esp+4], esi
.text:00408FBD                 mov     dword ptr [esp+8], 989680h
.text:00408FC5                 mov     dword ptr [esp+0Ch], 0
.text:00408FCD                 call    sub_40EE70
.text:00408FD2                 lea     edx, [eax+eax*4]
.text:00408FD5                 mov     ebx, [esp+64h]
.text:00408FD9                 lea     ecx, [edx+edx*4]
.text:00408FDC                 shl     ecx, 2
.text:00408FDF                 mov     esi, ecx
.text:00408FE1                 shr     esi, 1Fh
.text:00408FE4                 dec     esi
.text:00408FE5                 and     esi, ecx
.text:00408FE7                 mov     [ebx+4Ch], esi
.text:00408FEA                 mov     edx, [esp+48h]
.text:00408FEE                 xor     esi, esi
.text:00408FF0                 mov     dword ptr [esp+8], 989680h
.text:00408FF8                 mov     ebx, [esp+44h]
.text:00408FFC                 mov     dword ptr [esp+0Ch], 0
.text:00409004                 mov     ecx, edx
.text:00409006                 xor     edx, edx
.text:00409008                 or      ebx, edx
.text:0040900A                 or      esi, ecx
.text:0040900C                 mov     edx, ebx
.text:0040900E                 sub     edx, 0D53E8000h
.text:00409014                 mov     ecx, esi
.text:00409016                 sbb     ecx, 19DB1DEh
.text:0040901C                 mov     [esp+4], ecx
.text:00409020                 mov     [esp], edx
.text:00409023                 call    sub_40ED50
.text:00409028                 mov     edx, eax
.text:0040902A                 mov     ecx, [esp+64h]
.text:0040902E                 shr     eax, 1Fh
.text:00409031                 dec     eax
.text:00409032                 and     edx, eax
.text:00409034                 mov     [ecx+40h], edx
.text:00409037                 mov     [esp+4], esi
.text:0040903B                 mov     dword ptr [esp+8], 989680h
.text:00409043                 mov     dword ptr [esp+0Ch], 0
.text:0040904B                 mov     [esp], ebx
.text:0040904E                 call    sub_40EE70
.text:00409053                 lea     edx, [eax+eax*4]
.text:00409056                 lea     esi, [edx+edx*4]
.text:00409059                 mov     eax, [esp+64h]
.text:0040905D                 shl     esi, 2
.text:00409060                 mov     edx, ebp
.text:00409062                 mov     ecx, esi
.text:00409064                 mov     dword ptr [eax+50h], 200h
.text:0040906B                 shr     ecx, 1Fh
.text:0040906E                 dec     ecx
.text:0040906F                 and     ecx, esi
.text:00409071                 test    ebp, ebp
.text:00409073                 mov     [eax+44h], ecx
.text:00409076                 mov     eax, edi
.text:00409078                 js      short loc_4090B2
.text:0040907A
.text:0040907A loc_40907A:                             ; CODE XREF: .text:004090BA↓j
.text:0040907A                 xor     esi, esi
.text:0040907C                 mov     ebp, edi
.text:0040907E                 mov     ecx, eax
.text:00409080                 shrd    ecx, edx, 9
.text:00409084                 mov     ebx, edx
.text:00409086                 and     ebp, 1FFh
.text:0040908C                 mov     eax, esi
.text:0040908E                 sar     ebx, 9
.text:00409091                 or      eax, ebp
.text:00409093                 jz      short loc_40909B
.text:00409095                 add     ecx, 1
.text:00409098                 adc     ebx, 0
.text:0040909B
.text:0040909B loc_40909B:                             ; CODE XREF: .text:00409093↑j
.text:0040909B                 mov     edx, [esp+64h]
.text:0040909F                 mov     eax, 1
.text:004090A4                 mov     [edx+58h], ecx
.text:004090A7                 mov     [edx+5Ch], ebx
.text:004090AA                 add     esp, 1Ch
.text:004090AD                 pop     ebx
.text:004090AE                 pop     esi
.text:004090AF                 pop     edi
.text:004090B0                 pop     ebp
.text:004090B1                 retn
.text:004090B2 ; ---------------------------------------------------------------------------
.text:004090B2
.text:004090B2 loc_4090B2:                             ; CODE XREF: .text:00409078↑j
.text:004090B2                 add     eax, 1FFh
.text:004090B7                 adc     edx, 0
.text:004090BA                 jmp     short loc_40907A
.text:004090BA ; ---------------------------------------------------------------------------
.text:004090BC                 align 10h
.text:004090C0                 push    ebp
.text:004090C1                 push    edi
.text:004090C2                 xor     edi, edi
.text:004090C4                 push    esi
.text:004090C5                 xor     esi, esi
.text:004090C7                 push    ebx
.text:004090C8                 sub     esp, 0Ch
.text:004090CB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:004090D2                 call    LoadLibraryA
.text:004090D7                 sub     esp, 4
.text:004090DA                 mov     ebp, eax
.text:004090DC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004090E4                 mov     [esp], eax
.text:004090E7                 call    GetProcAddress
.text:004090EC                 sub     esp, 8
.text:004090EF                 test    eax, eax
.text:004090F1                 jz      short loc_409122
.text:004090F3                 lea     ecx, [esp+8]
.text:004090F7                 mov     [esp+4], ecx
.text:004090FB                 mov     ecx, [esp+20h]
.text:004090FF                 mov     [esp], ecx
.text:00409102                 call    eax
.text:00409104                 sub     esp, 8
.text:00409107                 mov     ebx, eax
.text:00409109                 cmp     eax, 0FFFFFFFFh
.text:0040910C                 jz      short loc_40913D
.text:0040910E
.text:0040910E loc_40910E:                             ; CODE XREF: .text:00409146↓j
.text:0040910E                 mov     esi, [esp+8]
.text:00409112                 mov     ecx, ebx
.text:00409114                 xor     edi, edi
.text:00409116                 xor     ebx, ebx
.text:00409118                 mov     edx, esi
.text:0040911A                 mov     esi, ecx
.text:0040911C                 or      esi, edi
.text:0040911E                 mov     edi, ebx
.text:00409120                 or      edi, edx
.text:00409122
.text:00409122 loc_409122:                             ; CODE XREF: .text:004090F1↑j
.text:00409122                                         ; .text:00409144↓j
.text:00409122                 test    ebp, ebp
.text:00409124                 jz      short loc_409131
.text:00409126                 mov     [esp], ebp
.text:00409129                 call    FreeLibrary
.text:0040912E                 sub     esp, 4
.text:00409131
.text:00409131 loc_409131:                             ; CODE XREF: .text:00409124↑j
.text:00409131                 add     esp, 0Ch
.text:00409134                 mov     eax, esi
.text:00409136                 mov     edx, edi
.text:00409138                 pop     ebx
.text:00409139                 pop     esi
.text:0040913A                 pop     edi
.text:0040913B                 pop     ebp
.text:0040913C                 retn
.text:0040913D ; ---------------------------------------------------------------------------
.text:0040913D
.text:0040913D loc_40913D:                             ; CODE XREF: .text:0040910C↑j
.text:0040913D                 call    GetLastError
.text:00409142                 test    eax, eax
.text:00409144                 jnz     short loc_409122
.text:00409146                 jmp     short loc_40910E
.text:00409146 ; ---------------------------------------------------------------------------
.text:00409148                 align 10h
.text:00409150
.text:00409150 ; =============== S U B R O U T I N E =======================================
.text:00409150
.text:00409150
.text:00409150 ; int __cdecl sub_409150(LPCSTR lpFileName, int)
.text:00409150 sub_409150      proc near               ; CODE XREF: sub_407890+1E01↓p
.text:00409150
.text:00409150 lpRootPathName  = dword ptr -8FCh
.text:00409150 lpVolumeNameBuffer= dword ptr -8F8h
.text:00409150 nVolumeNameSize = dword ptr -8F4h
.text:00409150 lpVolumeSerialNumber= dword ptr -8F0h
.text:00409150 lpMaximumComponentLength= dword ptr -8ECh
.text:00409150 lpFileSystemFlags= dword ptr -8E8h
.text:00409150 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00409150 nFileSystemNameSize= dword ptr -8E0h
.text:00409150 VolumeSerialNumber= dword ptr -8D8h
.text:00409150 MaximumComponentLength= dword ptr -8D4h
.text:00409150 FileSystemFlags = dword ptr -8D0h
.text:00409150 var_8CC         = dword ptr -8CCh
.text:00409150 var_8C8         = dword ptr -8C8h
.text:00409150 var_8C4         = dword ptr -8C4h
.text:00409150 var_8C0         = dword ptr -8C0h
.text:00409150 var_8BC         = dword ptr -8BCh
.text:00409150 var_8B8         = dword ptr -8B8h
.text:00409150 var_8B4         = dword ptr -8B4h
.text:00409150 var_8B0         = dword ptr -8B0h
.text:00409150 var_8AC         = dword ptr -8ACh
.text:00409150 var_8A8         = dword ptr -8A8h
.text:00409150 var_8A4         = dword ptr -8A4h
.text:00409150 var_8A0         = dword ptr -8A0h
.text:00409150 var_89C         = dword ptr -89Ch
.text:00409150 FileSystemNameBuffer= byte ptr -88Ch
.text:00409150 VolumeNameBuffer= byte ptr -48Ch
.text:00409150 var_8C          = dword ptr -8Ch
.text:00409150 var_88          = dword ptr -88h
.text:00409150 var_84          = dword ptr -84h
.text:00409150 var_80          = dword ptr -80h
.text:00409150 var_7C          = dword ptr -7Ch
.text:00409150 var_78          = dword ptr -78h
.text:00409150 var_74          = dword ptr -74h
.text:00409150 var_70          = dword ptr -70h
.text:00409150 var_6C          = dword ptr -6Ch
.text:00409150 var_5C          = dword ptr -5Ch
.text:00409150 var_58          = dword ptr -58h
.text:00409150 var_54          = dword ptr -54h
.text:00409150 var_50          = dword ptr -50h
.text:00409150 var_4C          = dword ptr -4Ch
.text:00409150 var_48          = dword ptr -48h
.text:00409150 var_44          = dword ptr -44h
.text:00409150 var_3C          = dword ptr -3Ch
.text:00409150 var_38          = dword ptr -38h
.text:00409150 var_34          = dword ptr -34h
.text:00409150 lpFileName      = dword ptr  4
.text:00409150 arg_4           = dword ptr  8
.text:00409150
.text:00409150                 push    ebp
.text:00409151                 xor     eax, eax
.text:00409153                 mov     ecx, 0Dh
.text:00409158                 push    edi
.text:00409159                 push    esi
.text:0040915A                 push    ebx
.text:0040915B                 sub     esp, 8ECh
.text:00409161                 lea     edi, [esp+8FCh+var_5C]
.text:00409168                 cld
.text:00409169                 lea     edx, [esp+8FCh+var_8C]
.text:00409170                 rep stosd
.text:00409172                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00409176                 lea     esi, [esp+8FCh+var_5C]
.text:0040917D                 mov     edx, [esp+8FCh+lpFileName]
.text:00409184                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00409187                 call    sub_407BB0
.text:0040918C                 test    eax, eax
.text:0040918E                 mov     edx, 0FFFFFFFFh
.text:00409193                 jz      loc_409524
.text:00409199                 mov     edx, [esp+8FCh+var_88]
.text:004091A0                 mov     ebp, [esp+8FCh+var_84]
.text:004091A7                 mov     edi, [esp+8FCh+var_80]
.text:004091AE                 mov     [esp+8FCh+var_58], edx
.text:004091B5                 mov     ecx, [esp+8FCh+var_7C]
.text:004091BC                 mov     ebx, [esp+8FCh+var_8C]
.text:004091C3                 mov     [esp+8FCh+var_54], ebp
.text:004091CA                 mov     edx, [esp+8FCh+var_78]
.text:004091D1                 mov     ebp, [esp+8FCh+var_74]
.text:004091D8                 mov     [esp+8FCh+var_50], edi
.text:004091DF                 test    bl, 10h
.text:004091E2                 mov     edi, [esp+8FCh+var_70]
.text:004091E9                 mov     [esp+8FCh+var_4C], ecx
.text:004091F0                 mov     ecx, [esp+8FCh+var_6C]
.text:004091F7                 mov     [esp+8FCh+var_5C], ebx
.text:004091FE                 mov     [esp+8FCh+var_48], edx
.text:00409205                 mov     [esp+8FCh+var_44], ebp
.text:0040920C                 mov     [esp+8FCh+var_3C], edi
.text:00409213                 mov     [esp+8FCh+var_38], ecx
.text:0040921A                 jnz     loc_409540
.text:00409220                 mov     ebx, 1
.text:00409225                 mov     [esp+8FCh+var_34], ebx
.text:0040922C
.text:0040922C loc_40922C:                             ; CODE XREF: sub_409150+406↓j
.text:0040922C                 mov     eax, [esp+8FCh+lpFileName]
.text:00409233                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00409237                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040923B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040923E                 call    sub_409D70
.text:00409243                 mov     [esp+8FCh+lpRootPathName], eax
.text:00409246                 call    sub_40AE80
.text:0040924B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040924F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00409253                 mov     ebp, eax
.text:00409255                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00409259                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040925D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00409264                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00409268                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040926C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00409270                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00409278                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00409280                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00409283                 call    GetVolumeInformationA
.text:00409288                 sub     esp, 20h
.text:0040928B                 test    eax, eax
.text:0040928D                 lea     edi, [esp+8FCh+var_8CC]
.text:00409291                 setz    bl
.text:00409294                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00409297                 xor     ebp, ebp
.text:00409299                 movzx   edx, bl
.text:0040929C                 dec     edx
.text:0040929D                 xor     ebx, ebx
.text:0040929F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:004092A3                 call    free
.text:004092A8                 cld
.text:004092A9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004092AD                 mov     [esi+1Ch], ecx
.text:004092B0                 mov     ecx, 0Dh
.text:004092B5                 rep movsd
.text:004092B7                 mov     edi, [esp+8FCh+var_8A0]
.text:004092BB                 mov     edx, [esp+8FCh+var_89C]
.text:004092BF                 mov     ecx, [esp+8FCh+var_8CC]
.text:004092C3                 or      ebp, edi
.text:004092C5                 mov     esi, [esp+8FCh+var_8B0]
.text:004092C9                 mov     edi, [esp+8FCh+arg_4]
.text:004092D0                 or      edx, ebx
.text:004092D2                 mov     [edi+8], edx
.text:004092D5                 xor     edx, edx
.text:004092D7                 test    cl, 10h
.text:004092DA                 setz    dl
.text:004092DD                 mov     [edi+0Ch], ebp
.text:004092E0                 mov     [edi+10h], esi
.text:004092E3                 mov     dword ptr [edi+14h], 0
.text:004092EA                 dec     edx
.text:004092EB                 and     edx, 0FFFFC000h
.text:004092F1                 add     edx, 8000h
.text:004092F7                 or      edx, 124h
.text:004092FD                 test    cl, 1
.text:00409300                 movzx   eax, dx
.text:00409303                 jnz     short loc_40930A
.text:00409305                 or      eax, 92h
.text:0040930A
.text:0040930A loc_40930A:                             ; CODE XREF: sub_409150+1B3↑j
.text:0040930A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040930E                 xor     edx, edx
.text:00409310                 xor     ebp, ebp
.text:00409312                 mov     edi, [esp+8FCh+var_8AC]
.text:00409316                 mov     ecx, [esp+8FCh+arg_4]
.text:0040931D                 mov     esi, edi
.text:0040931F                 or      [ecx], eax
.text:00409321                 mov     edi, ebx
.text:00409323                 or      edi, ebp
.text:00409325                 mov     ebp, edx
.text:00409327                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040932B                 or      ebp, esi
.text:0040932D                 mov     esi, [esp+8FCh+arg_4]
.text:00409334                 mov     edx, [esp+8FCh+var_8BC]
.text:00409338                 mov     [esi+18h], ebx
.text:0040933B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040933F                 mov     ecx, edx
.text:00409341                 mov     [esi+30h], edi
.text:00409344                 xor     edx, edx
.text:00409346                 mov     [esi+34h], ebp
.text:00409349                 or      ebx, edx
.text:0040934B                 xor     esi, esi
.text:0040934D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409355                 or      esi, ecx
.text:00409357                 mov     edx, ebx
.text:00409359                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409361                 sub     edx, 0D53E8000h
.text:00409367                 mov     ecx, esi
.text:00409369                 sbb     ecx, 19DB1DEh
.text:0040936F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00409373                 mov     [esp+8FCh+lpRootPathName], edx
.text:00409376                 call    sub_40ED50
.text:0040937B                 mov     edx, eax
.text:0040937D                 mov     ecx, [esp+8FCh+arg_4]
.text:00409384                 shr     eax, 1Fh
.text:00409387                 dec     eax
.text:00409388                 and     edx, eax
.text:0040938A                 mov     [ecx+38h], edx
.text:0040938D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00409390                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00409394                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040939C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004093A4                 call    sub_40EE70
.text:004093A9                 lea     ecx, [eax+eax*4]
.text:004093AC                 lea     ebx, [ecx+ecx*4]
.text:004093AF                 mov     eax, [esp+8FCh+arg_4]
.text:004093B6                 shl     ebx, 2
.text:004093B9                 mov     esi, ebx
.text:004093BB                 shr     esi, 1Fh
.text:004093BE                 dec     esi
.text:004093BF                 and     esi, ebx
.text:004093C1                 mov     [eax+3Ch], esi
.text:004093C4                 mov     edx, [esp+8FCh+var_8C4]
.text:004093C8                 xor     esi, esi
.text:004093CA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004093D2                 mov     ebx, [esp+8FCh+var_8C8]
.text:004093D6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004093DE                 mov     ecx, edx
.text:004093E0                 xor     edx, edx
.text:004093E2                 or      ebx, edx
.text:004093E4                 or      esi, ecx
.text:004093E6                 mov     edx, ebx
.text:004093E8                 sub     edx, 0D53E8000h
.text:004093EE                 mov     ecx, esi
.text:004093F0                 sbb     ecx, 19DB1DEh
.text:004093F6                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004093FA                 mov     [esp+8FCh+lpRootPathName], edx
.text:004093FD                 call    sub_40ED50
.text:00409402                 mov     edx, eax
.text:00409404                 mov     ecx, [esp+8FCh+arg_4]
.text:0040940B                 shr     eax, 1Fh
.text:0040940E                 dec     eax
.text:0040940F                 and     edx, eax
.text:00409411                 mov     [ecx+48h], edx
.text:00409414                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00409417                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040941B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409423                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040942B                 call    sub_40EE70
.text:00409430                 lea     ecx, [eax+eax*4]
.text:00409433                 lea     ebx, [ecx+ecx*4]
.text:00409436                 mov     eax, [esp+8FCh+arg_4]
.text:0040943D                 shl     ebx, 2
.text:00409440                 mov     esi, ebx
.text:00409442                 shr     esi, 1Fh
.text:00409445                 dec     esi
.text:00409446                 and     esi, ebx
.text:00409448                 mov     [eax+4Ch], esi
.text:0040944B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040944F                 xor     esi, esi
.text:00409451                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409459                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040945D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409465                 mov     ecx, edx
.text:00409467                 xor     edx, edx
.text:00409469                 or      ebx, edx
.text:0040946B                 or      esi, ecx
.text:0040946D                 mov     edx, ebx
.text:0040946F                 sub     edx, 0D53E8000h
.text:00409475                 mov     ecx, esi
.text:00409477                 sbb     ecx, 19DB1DEh
.text:0040947D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00409481                 mov     [esp+8FCh+lpRootPathName], edx
.text:00409484                 call    sub_40ED50
.text:00409489                 mov     edx, eax
.text:0040948B                 mov     ecx, [esp+8FCh+arg_4]
.text:00409492                 shr     eax, 1Fh
.text:00409495                 dec     eax
.text:00409496                 and     edx, eax
.text:00409498                 mov     [ecx+40h], edx
.text:0040949B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040949E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004094A2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004094AA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004094B2                 call    sub_40EE70
.text:004094B7                 lea     ebx, [eax+eax*4]
.text:004094BA                 mov     esi, [esp+8FCh+arg_4]
.text:004094C1                 lea     edx, [ebx+ebx*4]
.text:004094C4                 shl     edx, 2
.text:004094C7                 mov     eax, edi
.text:004094C9                 mov     ecx, edx
.text:004094CB                 mov     dword ptr [esi+50h], 200h
.text:004094D2                 shr     ecx, 1Fh
.text:004094D5                 dec     ecx
.text:004094D6                 and     ecx, edx
.text:004094D8                 test    ebp, ebp
.text:004094DA                 mov     edx, ebp
.text:004094DC                 mov     [esi+44h], ecx
.text:004094DF                 js      short loc_409531
.text:004094E1
.text:004094E1 loc_4094E1:                             ; CODE XREF: sub_409150+3E9↓j
.text:004094E1                 xor     esi, esi
.text:004094E3                 mov     ebp, edi
.text:004094E5                 mov     ecx, eax
.text:004094E7                 shrd    ecx, edx, 9
.text:004094EB                 mov     ebx, edx
.text:004094ED                 and     ebp, 1FFh
.text:004094F3                 mov     eax, esi
.text:004094F5                 sar     ebx, 9
.text:004094F8                 or      eax, ebp
.text:004094FA                 jz      short loc_409502
.text:004094FC                 add     ecx, 1
.text:004094FF                 adc     ebx, 0
.text:00409502
.text:00409502 loc_409502:                             ; CODE XREF: sub_409150+3AA↑j
.text:00409502                 mov     edx, [esp+8FCh+arg_4]
.text:00409509                 mov     [edx+5Ch], ebx
.text:0040950C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00409513                 mov     [edx+58h], ecx
.text:00409516                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040951A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040951D                 call    sub_408370
.text:00409522                 xor     edx, edx
.text:00409524
.text:00409524 loc_409524:                             ; CODE XREF: sub_409150+43↑j
.text:00409524                 add     esp, 8ECh
.text:0040952A                 mov     eax, edx
.text:0040952C                 pop     ebx
.text:0040952D                 pop     esi
.text:0040952E                 pop     edi
.text:0040952F                 pop     ebp
.text:00409530                 retn
.text:00409531 ; ---------------------------------------------------------------------------
.text:00409531
.text:00409531 loc_409531:                             ; CODE XREF: sub_409150+38F↑j
.text:00409531                 add     eax, 1FFh
.text:00409536                 adc     edx, 0
.text:00409539                 jmp     short loc_4094E1
.text:00409539 ; ---------------------------------------------------------------------------
.text:0040953B                 align 10h
.text:00409540
.text:00409540 loc_409540:                             ; CODE XREF: sub_409150+CA↑j
.text:00409540                 mov     eax, [esp+8FCh+lpFileName]
.text:00409547                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040954A                 call    sub_407D20
.text:0040954F                 mov     [esp+8FCh+var_34], eax
.text:00409556                 jmp     loc_40922C
.text:00409556 sub_409150      endp
.text:00409556
.text:00409556 ; ---------------------------------------------------------------------------
.text:0040955B                 align 10h
.text:00409560 ; START OF FUNCTION CHUNK FOR sub_407890
.text:00409560
.text:00409560 loc_409560:                             ; CODE XREF: sub_407890+26↑j
.text:00409560                 cld
.text:00409561                 sub     esp, 2Ch
.text:00409564                 xor     eax, eax
.text:00409566                 mov     [esp+2Ch+var_10], ebx
.text:0040956A                 mov     ecx, 18h
.text:0040956F                 mov     ebx, [esp+2Ch+arg_0]
.text:00409573                 mov     [esp+2Ch+var_C], esi
.text:00409577                 mov     esi, [esp+2Ch+arg_4]
.text:0040957B                 test    ebx, ebx
.text:0040957D                 mov     [esp+2Ch+var_8], edi
.text:00409581                 mov     edi, esi
.text:00409583                 mov     [esp+2Ch+var_4], ebp
.text:00409587                 rep stosd
.text:00409589                 jz      short loc_409590
.text:0040958B                 cmp     byte ptr [ebx], 0
.text:0040958E                 jnz     short loc_4095A8
.text:00409590
.text:00409590 loc_409590:                             ; CODE XREF: sub_407890+1CF9↑j
.text:00409590                 xor     edx, edx
.text:00409592
.text:00409592 loc_409592:                             ; CODE XREF: sub_407890+1D2F↓j
.text:00409592                                         ; sub_407890+1DD8↓j
.text:00409592                 mov     ebx, [esp+2Ch+var_10]
.text:00409596                 mov     eax, edx
.text:00409598                 mov     esi, [esp+2Ch+var_C]
.text:0040959C                 mov     edi, [esp+2Ch+var_8]
.text:004095A0                 mov     ebp, [esp+2Ch+var_4]
.text:004095A4                 add     esp, 2Ch
.text:004095A7                 retn
.text:004095A8 ; ---------------------------------------------------------------------------
.text:004095A8
.text:004095A8 loc_4095A8:                             ; CODE XREF: sub_407890+1CFE↑j
.text:004095A8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:004095B0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:004095B3                 call    sub_407AA0
.text:004095B8                 test    eax, eax
.text:004095BA                 mov     edx, 0FFFFFFFFh
.text:004095BF                 jnz     short loc_409592
.text:004095C1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:004095C4                 call    sub_409C10
.text:004095C9                 mov     [esp+2Ch+lpFileName], eax
.text:004095CC                 call    sub_40AE80
.text:004095D1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:004095D4                 mov     ebp, eax
.text:004095D6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:004095DE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:004095E6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:004095EE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:004095F6                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:004095FE                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00409606                 call    CreateFileA
.text:0040960B                 sub     esp, 1Ch
.text:0040960E                 mov     ebx, eax
.text:00409610                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00409614                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00409617                 call    sub_407EA0
.text:0040961C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040961F                 mov     edi, eax
.text:00409621                 call    CloseHandle
.text:00409626                 sub     esp, 4
.text:00409629                 cmp     edi, 0FFFFFFFFh
.text:0040962C                 jz      short loc_40968A
.text:0040962E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00409632                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00409635                 call    sub_408370
.text:0040963A
.text:0040963A loc_40963A:                             ; CODE XREF: sub_407890+1E08↓j
.text:0040963A                 mov     edx, [esi]
.text:0040963C                 and     edx, 0F000h
.text:00409642                 cmp     edx, 4000h
.text:00409648                 jz      short loc_40967D
.text:0040964A
.text:0040964A loc_40964A:                             ; CODE XREF: sub_407890+1DF8↓j
.text:0040964A                 cmp     edi, 0FFFFFFFFh
.text:0040964D                 jz      short loc_40966D
.text:0040964F
.text:0040964F loc_40964F:                             ; CODE XREF: sub_407890+1DEB↓j
.text:0040964F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00409656                 call    SetErrorMode
.text:0040965B                 sub     esp, 4
.text:0040965E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00409661                 call    free
.text:00409666                 mov     edx, edi
.text:00409668                 jmp     loc_409592
.text:0040966D ; ---------------------------------------------------------------------------
.text:0040966D
.text:0040966D loc_40966D:                             ; CODE XREF: sub_407890+1DBD↑j
.text:0040966D                 call    sub_409BC0
.text:00409672                 mov     esi, eax
.text:00409674                 call    _errno
.text:00409679                 mov     [eax], esi
.text:0040967B                 jmp     short loc_40964F
.text:0040967D ; ---------------------------------------------------------------------------
.text:0040967D
.text:0040967D loc_40967D:                             ; CODE XREF: sub_407890+1DB8↑j
.text:0040967D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00409680                 call    sub_407D20
.text:00409685                 mov     [esi+18h], eax
.text:00409688                 jmp     short loc_40964A
.text:0040968A ; ---------------------------------------------------------------------------
.text:0040968A
.text:0040968A loc_40968A:                             ; CODE XREF: sub_407890+1D9C↑j
.text:0040968A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040968E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:00409691                 call    sub_409150
.text:00409696                 mov     edi, eax
.text:00409698                 jmp     short loc_40963A
.text:00409698 ; END OF FUNCTION CHUNK FOR sub_407890
.text:00409698 ; ---------------------------------------------------------------------------
.text:0040969A                 align 10h
.text:004096A0
.text:004096A0 ; =============== S U B R O U T I N E =======================================
.text:004096A0
.text:004096A0
.text:004096A0 ; int __cdecl sub_4096A0(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:004096A0 sub_4096A0      proc near               ; CODE XREF: sub_409820+93↓p
.text:004096A0
.text:004096A0 pvReserved      = dword ptr -35Ch
.text:004096A0 pUnkOuter       = dword ptr -358h
.text:004096A0 dwClsContext    = dword ptr -354h
.text:004096A0 riid            = dword ptr -350h
.text:004096A0 ppv             = dword ptr -34Ch
.text:004096A0 cchWideChar     = dword ptr -348h
.text:004096A0 var_334         = byte ptr -334h
.text:004096A0 var_330         = dword ptr -330h
.text:004096A0 String2         = byte ptr -32Ch
.text:004096A0 WideCharStr     = word ptr -21Ch
.text:004096A0 lpMultiByteStr  = dword ptr  4
.text:004096A0 lpString1       = dword ptr  8
.text:004096A0
.text:004096A0                 push    edi
.text:004096A1                 push    esi
.text:004096A2                 push    ebx
.text:004096A3                 sub     esp, 350h
.text:004096A9                 mov     edi, [esp+35Ch+lpString1]
.text:004096B0                 mov     byte ptr [edi], 0
.text:004096B3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:004096BA                 call    OleInitialize
.text:004096BF                 sub     esp, 4
.text:004096C2                 cmp     eax, 1
.text:004096C5                 ja      loc_4097FF
.text:004096CB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:004096D3                 lea     ecx, [esp+35Ch+var_330]
.text:004096D7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:004096DB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:004096E3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:004096EB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:004096F2                 call    CoCreateInstance
.text:004096F7                 sub     esp, 14h
.text:004096FA                 test    eax, eax
.text:004096FC                 js      loc_4097FF
.text:00409702                 mov     ebx, [esp+35Ch+var_330]
.text:00409706                 lea     edx, [esp+35Ch+var_334]
.text:0040970A                 mov     esi, [ebx]
.text:0040970C                 mov     [esp+35Ch+dwClsContext], edx
.text:00409710                 mov     [esp+35Ch+pvReserved], ebx
.text:00409713                 xor     ebx, ebx
.text:00409715                 mov     [esp+35Ch+pUnkOuter], offset dword_40E500
.text:0040971D                 call    dword ptr [esi]
.text:0040971F                 sub     esp, 0Ch
.text:00409722                 lea     esi, [esp+35Ch+WideCharStr]
.text:00409729                 call    AreFileApisANSI
.text:0040972E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00409736                 test    eax, eax
.text:00409738                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040973F                 setz    bl
.text:00409742                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00409746                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040974E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00409752                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040975A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040975D                 call    MultiByteToWideChar
.text:00409762                 sub     esp, 18h
.text:00409765                 test    eax, eax
.text:00409767                 js      loc_4097FF
.text:0040976D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00409771                 mov     ebx, [edx]
.text:00409773                 mov     [esp+35Ch+dwClsContext], 0
.text:0040977B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040977F                 mov     [esp+35Ch+pvReserved], edx
.text:00409782                 call    dword ptr [ebx+14h]
.text:00409785                 sub     esp, 0Ch
.text:00409788                 test    eax, eax
.text:0040978A                 js      short loc_4097FF
.text:0040978C                 mov     ebx, [esp+35Ch+var_330]
.text:00409790                 lea     esi, [esp+35Ch+String2]
.text:00409794                 mov     ecx, [ebx]
.text:00409796                 mov     [esp+35Ch+pvReserved], ebx
.text:00409799                 mov     [esp+35Ch+ppv], 0
.text:004097A1                 mov     [esp+35Ch+riid], 0
.text:004097A9                 mov     [esp+35Ch+dwClsContext], 104h
.text:004097B1                 mov     [esp+35Ch+pUnkOuter], esi
.text:004097B5                 call    dword ptr [ecx+0Ch]
.text:004097B8                 sub     esp, 14h
.text:004097BB                 mov     ebx, eax
.text:004097BD                 test    eax, eax
.text:004097BF                 js      short loc_4097FF
.text:004097C1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:004097C5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:004097C8                 call    lstrcpyA
.text:004097CD                 sub     esp, 8
.text:004097D0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:004097D4                 mov     ecx, [edi]
.text:004097D6                 mov     [esp+35Ch+pvReserved], edi
.text:004097D9                 call    dword ptr [ecx+8]
.text:004097DC                 sub     esp, 4
.text:004097DF                 mov     edx, [esp+35Ch+var_330]
.text:004097E3                 mov     esi, [edx]
.text:004097E5                 mov     [esp+35Ch+pvReserved], edx
.text:004097E8                 call    dword ptr [esi+8]
.text:004097EB                 sub     esp, 4
.text:004097EE                 call    CoUninitialize
.text:004097F3                 mov     eax, ebx
.text:004097F5
.text:004097F5 loc_4097F5:                             ; CODE XREF: sub_4096A0+177↓j
.text:004097F5                 add     esp, 350h
.text:004097FB                 pop     ebx
.text:004097FC                 pop     esi
.text:004097FD                 pop     edi
.text:004097FE                 retn
.text:004097FF ; ---------------------------------------------------------------------------
.text:004097FF
.text:004097FF loc_4097FF:                             ; CODE XREF: sub_4096A0+25↑j
.text:004097FF                                         ; sub_4096A0+5C↑j ...
.text:004097FF                 call    sub_409BC0
.text:00409804                 mov     edi, eax
.text:00409806                 call    _errno
.text:0040980B                 mov     [eax], edi
.text:0040980D                 call    CoUninitialize
.text:00409812                 mov     eax, 0FFFFFFFFh
.text:00409817                 jmp     short loc_4097F5
.text:00409817 sub_4096A0      endp
.text:00409817
.text:00409817 ; ---------------------------------------------------------------------------
.text:00409819 ; const char aLnk_0[]
.text:00409819 aLnk_0          db '.lnk',0             ; DATA XREF: sub_409820+53↓o
.text:00409819                                         ; sub_409820:loc_409885↓o
.text:0040981E                 align 10h
.text:00409820
.text:00409820 ; =============== S U B R O U T I N E =======================================
.text:00409820
.text:00409820
.text:00409820 ; int __cdecl sub_409820(char *, LPSTR lpString1)
.text:00409820 sub_409820      proc near               ; CODE XREF: sub_407910+96↑p
.text:00409820
.text:00409820 Str             = dword ptr -1Ch
.text:00409820 Source          = dword ptr -18h
.text:00409820 Destination     = dword ptr -14h
.text:00409820 arg_0           = dword ptr  4
.text:00409820 lpString1       = dword ptr  8
.text:00409820
.text:00409820                 push    ebp
.text:00409821                 push    edi
.text:00409822                 push    esi
.text:00409823                 push    ebx
.text:00409824                 sub     esp, 0Ch
.text:00409827                 mov     ebx, [esp+1Ch+arg_0]
.text:0040982B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040982F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00409832                 call    strlen
.text:00409837                 add     eax, 5
.text:0040983A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040983D                 call    malloc
.text:00409842                 mov     [esp+1Ch+Destination], eax
.text:00409846                 test    eax, eax
.text:00409848                 jz      loc_4098F0
.text:0040984E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00409852                 mov     [esp+1Ch+Str], eax ; Destination
.text:00409855                 call    strcpy
.text:0040985A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00409862                 mov     eax, [esp+1Ch+Destination]
.text:00409866                 mov     [esp+1Ch+Str], eax ; Str
.text:00409869                 call    strrchr
.text:0040986E                 test    eax, eax
.text:00409870                 jz      short loc_409885
.text:00409872                 cld
.text:00409873                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:00409878                 mov     ecx, 5
.text:0040987D                 mov     esi, eax
.text:0040987F                 mov     edi, ebx
.text:00409881                 repe cmpsb
.text:00409883                 jz      short loc_409899
.text:00409885
.text:00409885 loc_409885:                             ; CODE XREF: sub_409820+50↑j
.text:00409885                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0040988D                 mov     edx, [esp+1Ch+Destination]
.text:00409891                 mov     [esp+1Ch+Str], edx ; Destination
.text:00409894                 call    strcat
.text:00409899
.text:00409899 loc_409899:                             ; CODE XREF: sub_409820+63↑j
.text:00409899                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:004098A0                 call    SetErrorMode
.text:004098A5                 sub     esp, 4
.text:004098A8                 mov     ebx, [esp+1Ch+Destination]
.text:004098AC                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:004098B0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:004098B3                 call    sub_4096A0
.text:004098B8                 mov     [esp+1Ch+Str], ebx ; Block
.text:004098BB                 mov     esi, eax
.text:004098BD                 call    free
.text:004098C2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:004098C9                 call    SetErrorMode
.text:004098CE                 sub     esp, 4
.text:004098D1                 mov     [esp+1Ch+Str], ebp
.text:004098D4                 call    sub_40AE00
.text:004098D9                 inc     esi
.text:004098DA                 jz      short loc_4098F0
.text:004098DC                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:004098E0                 add     esp, 0Ch
.text:004098E3                 pop     ebx
.text:004098E4                 pop     esi
.text:004098E5                 pop     edi
.text:004098E6                 pop     ebp
.text:004098E7                 jmp     strlen
.text:004098E7 ; ---------------------------------------------------------------------------
.text:004098EC                 align 10h
.text:004098F0
.text:004098F0 loc_4098F0:                             ; CODE XREF: sub_409820+28↑j
.text:004098F0                                         ; sub_409820+BA↑j
.text:004098F0                 add     esp, 0Ch
.text:004098F3                 mov     eax, 0FFFFFFFFh
.text:004098F8                 pop     ebx
.text:004098F9                 pop     esi
.text:004098FA                 pop     edi
.text:004098FB                 pop     ebp
.text:004098FC                 retn
.text:004098FC sub_409820      endp
.text:004098FC
.text:004098FC ; ---------------------------------------------------------------------------
.text:004098FD                 align 10h
.text:00409900
.text:00409900 ; =============== S U B R O U T I N E =======================================
.text:00409900
.text:00409900
.text:00409900 sub_409900      proc near               ; CODE XREF: .text:00407A2B↑p
.text:00409900                 xor     eax, eax
.text:00409902                 retn
.text:00409902 sub_409900      endp
.text:00409902
.text:00409902 ; ---------------------------------------------------------------------------
.text:00409903                 align 10h
.text:00409910
.text:00409910 ; =============== S U B R O U T I N E =======================================
.text:00409910
.text:00409910
.text:00409910 sub_409910      proc near               ; CODE XREF: .text:00407A04↑p
.text:00409910                 xor     eax, eax
.text:00409912                 retn
.text:00409912 sub_409910      endp
.text:00409912
.text:00409912 ; ---------------------------------------------------------------------------
.text:00409913                 align 10h
.text:00409920
.text:00409920 ; =============== S U B R O U T I N E =======================================
.text:00409920
.text:00409920
.text:00409920 sub_409920      proc near               ; CODE XREF: sub_407A40+28↑p
.text:00409920                 xor     eax, eax
.text:00409922                 retn
.text:00409922 sub_409920      endp
.text:00409922
.text:00409922 ; ---------------------------------------------------------------------------
.text:00409923                 align 10h
.text:00409930
.text:00409930 ; =============== S U B R O U T I N E =======================================
.text:00409930
.text:00409930 ; Attributes: info_from_lumina
.text:00409930
.text:00409930 ___get_errno    proc near               ; CODE XREF: sub_409BC0+B↓p
.text:00409930
.text:00409930 arg_0           = dword ptr  4
.text:00409930
.text:00409930                 mov     eax, [esp+arg_0]
.text:00409934                 cmp     eax, 53h ; 'S'
.text:00409937                 jg      loc_409A30
.text:0040993D                 cmp     eax, 52h ; 'R'
.text:00409940                 jge     short loc_409992
.text:00409942                 cmp     eax, 0Fh
.text:00409945                 jz      short loc_409960
.text:00409947                 cmp     eax, 0Fh
.text:0040994A                 jg      short loc_4099C0
.text:0040994C                 cmp     eax, 9
.text:0040994F                 jg      short loc_4099A0
.text:00409951                 cmp     eax, 7
.text:00409954                 jge     short loc_409999
.text:00409956                 cmp     eax, 3
.text:00409959                 jg      short loc_40997A
.text:0040995B                 cmp     eax, 2
.text:0040995E                 jl      short loc_409973
.text:00409960
.text:00409960 loc_409960:                             ; CODE XREF: ___get_errno+15↑j
.text:00409960                                         ; ___get_errno+9D↓j ...
.text:00409960                 mov     edx, 2
.text:00409965                 lea     esi, [esi+0]
.text:00409969                 lea     edi, [edi+0]
.text:00409970
.text:00409970 loc_409970:                             ; CODE XREF: ___get_errno+48↓j
.text:00409970                                         ; ___get_errno+59↓j ...
.text:00409970                 mov     eax, edx
.text:00409972                 retn
.text:00409973 ; ---------------------------------------------------------------------------
.text:00409973
.text:00409973 loc_409973:                             ; CODE XREF: ___get_errno+2E↑j
.text:00409973                                         ; ___get_errno+78↓j ...
.text:00409973                 mov     edx, 16h
.text:00409978                 jmp     short loc_409970
.text:0040997A ; ---------------------------------------------------------------------------
.text:0040997A
.text:0040997A loc_40997A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040997A                 cmp     eax, 5
.text:0040997D                 jz      short loc_409992
.text:0040997F                 cmp     eax, 5
.text:00409982                 jg      short loc_40998B
.text:00409984                 mov     edx, 18h
.text:00409989                 jmp     short loc_409970
.text:0040998B ; ---------------------------------------------------------------------------
.text:0040998B
.text:0040998B loc_40998B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040998B                                         ; ___get_errno+180↓j
.text:0040998B                 mov     edx, 9
.text:00409990                 jmp     short loc_409970
.text:00409992 ; ---------------------------------------------------------------------------
.text:00409992
.text:00409992 loc_409992:                             ; CODE XREF: ___get_errno+10↑j
.text:00409992                                         ; ___get_errno+4D↑j ...
.text:00409992                 mov     edx, 0Dh
.text:00409997                 jmp     short loc_409970
.text:00409999 ; ---------------------------------------------------------------------------
.text:00409999
.text:00409999 loc_409999:                             ; CODE XREF: ___get_errno+24↑j
.text:00409999                                         ; ___get_errno+73↓j ...
.text:00409999                 mov     edx, 0Ch
.text:0040999E                 jmp     short loc_409970
.text:004099A0 ; ---------------------------------------------------------------------------
.text:004099A0
.text:004099A0 loc_4099A0:                             ; CODE XREF: ___get_errno+1F↑j
.text:004099A0                 cmp     eax, 0Dh
.text:004099A3                 jg      short loc_409999
.text:004099A5                 cmp     eax, 0Ch
.text:004099A8                 jge     short loc_409973
.text:004099AA                 cmp     eax, 0Ah
.text:004099AD                 mov     edx, 7
.text:004099B2                 jz      short loc_409970
.text:004099B4                 cmp     eax, 0Bh
.text:004099B7                 jnz     short loc_409973
.text:004099B9
.text:004099B9 loc_4099B9:                             ; CODE XREF: ___get_errno+21A↓j
.text:004099B9                 mov     edx, 8
.text:004099BE                 jmp     short loc_409970
.text:004099C0 ; ---------------------------------------------------------------------------
.text:004099C0
.text:004099C0 loc_4099C0:                             ; CODE XREF: ___get_errno+1A↑j
.text:004099C0                 cmp     eax, 22h ; '"'
.text:004099C3                 jg      short loc_4099F4
.text:004099C5                 cmp     eax, 16h
.text:004099C8                 jge     short loc_409992
.text:004099CA                 cmp     eax, 12h
.text:004099CD                 jz      short loc_409960
.text:004099CF                 cmp     eax, 12h
.text:004099D2                 jg      short loc_4099E5
.text:004099D4                 cmp     eax, 10h
.text:004099D7                 jz      short loc_409992
.text:004099D9                 mov     edx, 12h
.text:004099DE                 cmp     eax, 11h
.text:004099E1
.text:004099E1 loc_4099E1:                             ; CODE XREF: ___get_errno+172↓j
.text:004099E1                                         ; ___get_errno+24C↓j ...
.text:004099E1                 jnz     short loc_409973
.text:004099E3                 jmp     short loc_409970
.text:004099E5 ; ---------------------------------------------------------------------------
.text:004099E5
.text:004099E5 loc_4099E5:                             ; CODE XREF: ___get_errno+A2↑j
.text:004099E5                 cmp     eax, 14h
.text:004099E8                 jle     short loc_409992
.text:004099EA
.text:004099EA loc_4099EA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:004099EA                 mov     edx, 10h
.text:004099EF                 jmp     loc_409970
.text:004099F4 ; ---------------------------------------------------------------------------
.text:004099F4
.text:004099F4 loc_4099F4:                             ; CODE XREF: ___get_errno+93↑j
.text:004099F4                 cmp     eax, 41h ; 'A'
.text:004099F7                 jz      short loc_409992
.text:004099F9                 cmp     eax, 41h ; 'A'
.text:004099FC                 jg      short loc_409A11
.text:004099FE                 cmp     eax, 24h ; '$'
.text:00409A01                 jz      short loc_409992
.text:00409A03                 cmp     eax, 35h ; '5'
.text:00409A06                 jnz     loc_409973
.text:00409A0C                 jmp     loc_409960
.text:00409A11 ; ---------------------------------------------------------------------------
.text:00409A11
.text:00409A11 loc_409A11:                             ; CODE XREF: ___get_errno+CC↑j
.text:00409A11                 cmp     eax, 43h ; 'C'
.text:00409A14                 jz      loc_409960
.text:00409A1A                 cmp     eax, 50h ; 'P'
.text:00409A1D                 jnz     loc_409973
.text:00409A23
.text:00409A23 loc_409A23:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00409A23                 mov     edx, 11h
.text:00409A28                 jmp     loc_409970
.text:00409A28 ; ---------------------------------------------------------------------------
.text:00409A2D                 align 10h
.text:00409A30
.text:00409A30 loc_409A30:                             ; CODE XREF: ___get_errno+7↑j
.text:00409A30                 cmp     eax, 0A1h ; '¡'
.text:00409A35                 jz      loc_409960
.text:00409A3B                 cmp     eax, 0A1h ; '¡'
.text:00409A40                 jg      loc_409AF0
.text:00409A46                 cmp     eax, 81h
.text:00409A4B                 jg      short loc_409AB5
.text:00409A4D                 cmp     eax, 80h ; '€'
.text:00409A52                 mov     edx, 0Ah
.text:00409A57                 jge     loc_409970
.text:00409A5D                 cmp     eax, 6Ch ; 'l'
.text:00409A60                 jz      loc_409992
.text:00409A66                 cmp     eax, 6Ch ; 'l'
.text:00409A69                 jg      short loc_409A87
.text:00409A6B                 cmp     eax, 57h ; 'W'
.text:00409A6E                 jz      loc_409973
.text:00409A74                 cmp     eax, 59h ; 'Y'
.text:00409A77                 jnz     loc_409973
.text:00409A7D
.text:00409A7D loc_409A7D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00409A7D                                         ; ___get_errno+23C↓j
.text:00409A7D                 mov     edx, 0Bh
.text:00409A82                 jmp     loc_409970
.text:00409A87 ; ---------------------------------------------------------------------------
.text:00409A87
.text:00409A87 loc_409A87:                             ; CODE XREF: ___get_errno+139↑j
.text:00409A87                 cmp     eax, 70h ; 'p'
.text:00409A8A                 mov     edx, 1Ch
.text:00409A8F                 jz      loc_409970
.text:00409A95                 cmp     eax, 70h ; 'p'
.text:00409A98                 jg      short loc_409AA7
.text:00409A9A                 mov     edx, 20h ; ' '
.text:00409A9F                 cmp     eax, 6Dh ; 'm'
.text:00409AA2                 jmp     loc_4099E1
.text:00409AA7 ; ---------------------------------------------------------------------------
.text:00409AA7
.text:00409AA7 loc_409AA7:                             ; CODE XREF: ___get_errno+168↑j
.text:00409AA7                 cmp     eax, 72h ; 'r'
.text:00409AAA
.text:00409AAA loc_409AAA:                             ; CODE XREF: ___get_errno+19C↓j
.text:00409AAA                 jnz     loc_409973
.text:00409AB0                 jmp     loc_40998B
.text:00409AB5 ; ---------------------------------------------------------------------------
.text:00409AB5
.text:00409AB5 loc_409AB5:                             ; CODE XREF: ___get_errno+11B↑j
.text:00409AB5                 cmp     eax, 84h ; '„'
.text:00409ABA                 jz      loc_409992
.text:00409AC0                 cmp     eax, 84h ; '„'
.text:00409AC5                 jg      short loc_409ACE
.text:00409AC7                 cmp     eax, 82h ; '‚'
.text:00409ACC                 jmp     short loc_409AAA
.text:00409ACE ; ---------------------------------------------------------------------------
.text:00409ACE
.text:00409ACE loc_409ACE:                             ; CODE XREF: ___get_errno+195↑j
.text:00409ACE                 cmp     eax, 91h ; '‘'
.text:00409AD3                 mov     edx, 29h ; ')'
.text:00409AD8                 jz      loc_409970
.text:00409ADE                 cmp     eax, 9Eh ; 'ž'
.text:00409AE3
.text:00409AE3 loc_409AE3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00409AE3                 jnz     loc_409973
.text:00409AE9                 jmp     loc_409992
.text:00409AE9 ; ---------------------------------------------------------------------------
.text:00409AEE                 align 10h
.text:00409AF0
.text:00409AF0 loc_409AF0:                             ; CODE XREF: ___get_errno+110↑j
.text:00409AF0                 cmp     eax, 0CEh ; 'Î'
.text:00409AF5                 jz      loc_409960
.text:00409AFB                 cmp     eax, 0CEh ; 'Î'
.text:00409B00                 jg      short loc_409B50
.text:00409B02                 cmp     eax, 0AAh ; 'ª'
.text:00409B07                 jz      loc_4099EA
.text:00409B0D                 cmp     eax, 0AAh ; 'ª'
.text:00409B12                 jg      short loc_409B26
.text:00409B14                 cmp     eax, 0A4h ; '¤'
.text:00409B19                 jz      loc_409A7D
.text:00409B1F                 cmp     eax, 0A7h ; '§'
.text:00409B24                 jmp     short loc_409AE3
.text:00409B26 ; ---------------------------------------------------------------------------
.text:00409B26
.text:00409B26 loc_409B26:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00409B26                 cmp     eax, 0B7h ; '·'
.text:00409B2B                 jz      loc_409A23
.text:00409B31                 cmp     eax, 0B7h ; '·'
.text:00409B36                 jl      loc_409973
.text:00409B3C                 sub     eax, 0BCh ; '¼'
.text:00409B41                 cmp     eax, 0Eh
.text:00409B44                 ja      loc_409973
.text:00409B4A                 jmp     loc_4099B9
.text:00409B4A ; ---------------------------------------------------------------------------
.text:00409B4F                 align 10h
.text:00409B50
.text:00409B50 loc_409B50:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00409B50                 cmp     eax, 46Bh
.text:00409B55                 mov     edx, 24h ; '$'
.text:00409B5A                 jz      loc_409970
.text:00409B60                 cmp     eax, 46Bh
.text:00409B65                 jg      short loc_409B81
.text:00409B67                 cmp     eax, 0D7h ; '×'
.text:00409B6C                 jz      loc_409A7D
.text:00409B72                 mov     edx, 5
.text:00409B77                 cmp     eax, 45Dh
.text:00409B7C                 jmp     loc_4099E1
.text:00409B81 ; ---------------------------------------------------------------------------
.text:00409B81
.text:00409B81 loc_409B81:                             ; CODE XREF: ___get_errno+235↑j
.text:00409B81                 cmp     eax, 4D5h
.text:00409B86                 mov     edx, 4
.text:00409B8B                 jz      loc_409970
.text:00409B91                 cmp     eax, 4D5h
.text:00409B96                 jg      short loc_409BA7
.text:00409B98                 mov     edx, 13h
.text:00409B9D                 cmp     eax, 4B0h
.text:00409BA2                 jmp     loc_4099E1
.text:00409BA7 ; ---------------------------------------------------------------------------
.text:00409BA7
.text:00409BA7 loc_409BA7:                             ; CODE XREF: ___get_errno+266↑j
.text:00409BA7                 cmp     eax, 718h
.text:00409BAC                 jnz     loc_409973
.text:00409BB2                 jmp     loc_409999
.text:00409BB2 ___get_errno    endp
.text:00409BB2
.text:00409BB2 ; ---------------------------------------------------------------------------
.text:00409BB7                 align 10h
.text:00409BC0
.text:00409BC0 ; =============== S U B R O U T I N E =======================================
.text:00409BC0
.text:00409BC0
.text:00409BC0 sub_409BC0      proc near               ; CODE XREF: sub_407AA0:loc_407B53↑p
.text:00409BC0                                         ; sub_407890:loc_40966D↑p ...
.text:00409BC0
.text:00409BC0 var_C           = dword ptr -0Ch
.text:00409BC0
.text:00409BC0                 sub     esp, 0Ch
.text:00409BC3                 call    GetLastError
.text:00409BC8                 mov     [esp+0Ch+var_C], eax
.text:00409BCB                 call    ___get_errno
.text:00409BD0                 add     esp, 0Ch
.text:00409BD3                 retn
.text:00409BD3 sub_409BC0      endp
.text:00409BD3
.text:00409BD3 ; ---------------------------------------------------------------------------
.text:00409BD4                 align 10h
.text:00409BE0
.text:00409BE0 ; =============== S U B R O U T I N E =======================================
.text:00409BE0
.text:00409BE0
.text:00409BE0 sub_409BE0      proc near               ; CODE XREF: .text:0040AF13↓p
.text:00409BE0                                         ; .text:0040AF63↓p
.text:00409BE0
.text:00409BE0 arg_4           = dword ptr  8
.text:00409BE0
.text:00409BE0                 sub     esp, 0Ch
.text:00409BE3                 mov     edx, [esp+0Ch+arg_4]
.text:00409BE7                 test    edx, edx
.text:00409BE9                 jz      short loc_409BF0
.text:00409BEB                 add     esp, 0Ch
.text:00409BEE                 jmp     short sub_409C30
.text:00409BF0 ; ---------------------------------------------------------------------------
.text:00409BF0
.text:00409BF0 loc_409BF0:                             ; CODE XREF: sub_409BE0+9↑j
.text:00409BF0                 call    _errno
.text:00409BF5                 mov     dword ptr [eax], 16h
.text:00409BFB                 xor     eax, eax
.text:00409BFD                 add     esp, 0Ch
.text:00409C00                 retn
.text:00409C00 sub_409BE0      endp
.text:00409C00
.text:00409C01 ; ---------------------------------------------------------------------------
.text:00409C01                 jmp     short sub_409C10
.text:00409C01 ; ---------------------------------------------------------------------------
.text:00409C03                 align 10h
.text:00409C10
.text:00409C10 ; =============== S U B R O U T I N E =======================================
.text:00409C10
.text:00409C10
.text:00409C10 ; int __cdecl sub_409C10(LPCSTR)
.text:00409C10 sub_409C10      proc near               ; CODE XREF: sub_407890+1D34↑p
.text:00409C10                                         ; .text:00409C01↑j ...
.text:00409C10
.text:00409C10 lpFileName      = dword ptr -0Ch
.text:00409C10 Destination     = dword ptr -8
.text:00409C10 arg_0           = dword ptr  4
.text:00409C10
.text:00409C10                 sub     esp, 0Ch
.text:00409C13                 mov     edx, [esp+0Ch+arg_0]
.text:00409C17                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:00409C1F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:00409C22                 call    sub_409C30
.text:00409C27                 add     esp, 0Ch
.text:00409C2A                 retn
.text:00409C2A sub_409C10      endp
.text:00409C2A
.text:00409C2A ; ---------------------------------------------------------------------------
.text:00409C2B                 align 10h
.text:00409C30
.text:00409C30 ; =============== S U B R O U T I N E =======================================
.text:00409C30
.text:00409C30
.text:00409C30 ; int __cdecl sub_409C30(LPCSTR lpFileName, char *Destination)
.text:00409C30 sub_409C30      proc near               ; CODE XREF: sub_409BE0+E↑j
.text:00409C30                                         ; sub_409C10+12↑p
.text:00409C30
.text:00409C30 Size            = dword ptr -2Ch
.text:00409C30 nBufferLength   = dword ptr -28h
.text:00409C30 lpBuffer        = dword ptr -24h
.text:00409C30 lpFilePart      = dword ptr -20h
.text:00409C30 FilePart        = dword ptr -14h
.text:00409C30 lpFileName      = dword ptr  4
.text:00409C30 Destination     = dword ptr  8
.text:00409C30
.text:00409C30                 push    ebp
.text:00409C31                 push    edi
.text:00409C32                 push    esi
.text:00409C33                 push    ebx
.text:00409C34                 sub     esp, 1Ch
.text:00409C37                 mov     edi, [esp+2Ch+lpFileName]
.text:00409C3B                 mov     ebp, [esp+2Ch+Destination]
.text:00409C3F                 test    edi, edi
.text:00409C41                 jz      loc_409D49
.text:00409C47                 cmp     byte ptr [edi], 0
.text:00409C4A                 jz      loc_409D3C
.text:00409C50                 mov     [esp+2Ch+Size], 104h ; Size
.text:00409C57                 call    malloc
.text:00409C5C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00409C60                 lea     edx, [esp+2Ch+FilePart]
.text:00409C64                 mov     ebx, eax
.text:00409C66                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00409C6A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:00409C72                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00409C75                 call    GetFullPathNameA
.text:00409C7A                 sub     esp, 10h
.text:00409C7D                 mov     esi, eax
.text:00409C7F                 test    eax, eax
.text:00409C81                 jz      loc_409D2A
.text:00409C87                 cmp     eax, 104h
.text:00409C8C                 jle     short loc_409C9D
.text:00409C8E                 test    ebp, ebp
.text:00409C90                 jz      short loc_409CF9
.text:00409C92                 call    _errno
.text:00409C97                 mov     dword ptr [eax], 26h ; '&'
.text:00409C9D
.text:00409C9D loc_409C9D:                             ; CODE XREF: sub_409C30+5C↑j
.text:00409C9D                                         ; sub_409C30+F5↓j
.text:00409C9D                 call    _errno
.text:00409CA2                 mov     edi, [eax]
.text:00409CA4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:00409CAC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:00409CAF                 call    sub_407AA0
.text:00409CB4                 test    eax, eax
.text:00409CB6                 jnz     short loc_409CD0
.text:00409CB8                 movzx   eax, byte ptr [esi+ebx-1]
.text:00409CBD                 cmp     al, 2Fh ; '/'
.text:00409CBF                 jz      short loc_409CD0
.text:00409CC1                 cmp     al, 5Ch ; '\'
.text:00409CC3                 jz      short loc_409CD0
.text:00409CC5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00409CC9                 mov     byte ptr [esi+ebx+1], 0
.text:00409CCE                 mov     esi, esi
.text:00409CD0
.text:00409CD0 loc_409CD0:                             ; CODE XREF: sub_409C30+86↑j
.text:00409CD0                                         ; sub_409C30+8F↑j ...
.text:00409CD0                 call    _errno
.text:00409CD5                 mov     [eax], edi
.text:00409CD7                 mov     [esp+2Ch+Size], ebx
.text:00409CDA                 call    sub_40AE00
.text:00409CDF                 test    ebp, ebp
.text:00409CE1                 mov     eax, ebx
.text:00409CE3                 jz      short loc_409CF1
.text:00409CE5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00409CE9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:00409CEC                 call    strcpy
.text:00409CF1
.text:00409CF1 loc_409CF1:                             ; CODE XREF: sub_409C30+B3↑j
.text:00409CF1                                         ; sub_409C30+10A↓j
.text:00409CF1                 add     esp, 1Ch
.text:00409CF4                 pop     ebx
.text:00409CF5                 pop     esi
.text:00409CF6                 pop     edi
.text:00409CF7                 pop     ebp
.text:00409CF8                 retn
.text:00409CF9 ; ---------------------------------------------------------------------------
.text:00409CF9
.text:00409CF9 loc_409CF9:                             ; CODE XREF: sub_409C30+60↑j
.text:00409CF9                 mov     [esp+2Ch+Size], ebx ; Block
.text:00409CFC                 lea     ecx, [eax+2]
.text:00409CFF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00409D03                 call    realloc
.text:00409D08                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00409D0C                 lea     edx, [esp+2Ch+FilePart]
.text:00409D10                 mov     ebx, eax
.text:00409D12                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:00409D16                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:00409D1A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00409D1D                 call    GetFullPathNameA
.text:00409D22                 sub     esp, 10h
.text:00409D25                 jmp     loc_409C9D
.text:00409D2A ; ---------------------------------------------------------------------------
.text:00409D2A
.text:00409D2A loc_409D2A:                             ; CODE XREF: sub_409C30+51↑j
.text:00409D2A                 call    sub_409BC0
.text:00409D2F                 mov     esi, eax
.text:00409D31                 call    _errno
.text:00409D36                 mov     [eax], esi
.text:00409D38
.text:00409D38 loc_409D38:                             ; CODE XREF: sub_409C30+117↓j
.text:00409D38                                         ; sub_409C30+124↓j
.text:00409D38                 xor     eax, eax
.text:00409D3A                 jmp     short loc_409CF1
.text:00409D3C ; ---------------------------------------------------------------------------
.text:00409D3C
.text:00409D3C loc_409D3C:                             ; CODE XREF: sub_409C30+1A↑j
.text:00409D3C                 call    _errno
.text:00409D41                 mov     dword ptr [eax], 2
.text:00409D47                 jmp     short loc_409D38
.text:00409D49 ; ---------------------------------------------------------------------------
.text:00409D49
.text:00409D49 loc_409D49:                             ; CODE XREF: sub_409C30+11↑j
.text:00409D49                 call    _errno
.text:00409D4E                 mov     dword ptr [eax], 16h
.text:00409D54                 jmp     short loc_409D38
.text:00409D54 sub_409C30      endp
.text:00409D54
.text:00409D54 ; ---------------------------------------------------------------------------
.text:00409D56                 align 10h
.text:00409D60 ; const char String[4]
.text:00409D60 String          db ' :/',0              ; DATA XREF: sub_409D70+FA↓o
.text:00409D64                 align 10h
.text:00409D70
.text:00409D70 ; =============== S U B R O U T I N E =======================================
.text:00409D70
.text:00409D70
.text:00409D70 ; int __cdecl sub_409D70(LPCSTR)
.text:00409D70 sub_409D70      proc near               ; CODE XREF: sub_408370+E↑p
.text:00409D70                                         ; sub_408870+17↑p ...
.text:00409D70
.text:00409D70 Str             = dword ptr -1Ch
.text:00409D70 Val             = dword ptr -18h
.text:00409D70 Count           = dword ptr -14h
.text:00409D70 var_10          = dword ptr -10h
.text:00409D70 var_C           = dword ptr -0Ch
.text:00409D70 var_8           = dword ptr -8
.text:00409D70 var_4           = dword ptr -4
.text:00409D70 arg_0           = dword ptr  4
.text:00409D70
.text:00409D70                 sub     esp, 1Ch
.text:00409D73                 mov     edx, [esp+1Ch+arg_0]
.text:00409D77                 mov     [esp+1Ch+var_8], edi
.text:00409D7B                 mov     [esp+1Ch+var_10], ebx
.text:00409D7F                 mov     [esp+1Ch+var_C], esi
.text:00409D83                 mov     [esp+1Ch+var_4], ebp
.text:00409D87                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:00409D8A                 call    sub_409C10
.text:00409D8F                 test    eax, eax
.text:00409D91                 mov     edi, eax
.text:00409D93                 jz      short loc_409DD0
.text:00409D95                 mov     [esp+1Ch+Str], eax ; Str
.text:00409D98                 call    strlen
.text:00409D9D                 cmp     eax, 2
.text:00409DA0                 jbe     short loc_409DAC
.text:00409DA2                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00409DA6                 jz      loc_409E60
.text:00409DAC
.text:00409DAC loc_409DAC:                             ; CODE XREF: sub_409D70+30↑j
.text:00409DAC                                         ; sub_409D70+F4↓j
.text:00409DAC                 test    edi, edi
.text:00409DAE                 jz      short loc_409DD0
.text:00409DB0                 mov     [esp+1Ch+Str], edi ; Str
.text:00409DB3                 call    strlen
.text:00409DB8                 cmp     eax, 4
.text:00409DBB                 mov     ebp, eax
.text:00409DBD                 jle     short loc_409DD0
.text:00409DBF                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00409DC2                 jz      short loc_409DF0
.text:00409DC4                 lea     esi, [esi+0]
.text:00409DCA                 lea     edi, [edi+0]
.text:00409DD0
.text:00409DD0 loc_409DD0:                             ; CODE XREF: sub_409D70+23↑j
.text:00409DD0                                         ; sub_409D70+3E↑j ...
.text:00409DD0                 xor     esi, esi
.text:00409DD2
.text:00409DD2 loc_409DD2:                             ; CODE XREF: sub_409D70+CD↓j
.text:00409DD2                                         ; sub_409D70+115↓j
.text:00409DD2                 mov     [esp+1Ch+Str], edi ; Block
.text:00409DD5                 call    free
.text:00409DDA                 mov     eax, esi
.text:00409DDC                 mov     ebx, [esp+1Ch+var_10]
.text:00409DE0                 mov     esi, [esp+1Ch+var_C]
.text:00409DE4                 mov     edi, [esp+1Ch+var_8]
.text:00409DE8                 mov     ebp, [esp+1Ch+var_4]
.text:00409DEC                 add     esp, 1Ch
.text:00409DEF                 retn
.text:00409DF0 ; ---------------------------------------------------------------------------
.text:00409DF0
.text:00409DF0 loc_409DF0:                             ; CODE XREF: sub_409D70+52↑j
.text:00409DF0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00409DF4                 jnz     short loc_409DD0
.text:00409DF6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00409DFE                 lea     ecx, [edi+2]
.text:00409E01                 mov     [esp+1Ch+Str], ecx ; Str
.text:00409E04                 call    strchr
.text:00409E09                 test    eax, eax
.text:00409E0B                 jnz     short loc_409E3F
.text:00409E0D
.text:00409E0D loc_409E0D:                             ; CODE XREF: sub_409D70+E2↓j
.text:00409E0D                 inc     ebp
.text:00409E0E
.text:00409E0E loc_409E0E:                             ; CODE XREF: sub_409D70+E9↓j
.text:00409E0E                 mov     [esp+1Ch+Val], 1 ; Size
.text:00409E16                 lea     ebx, [ebp+1]
.text:00409E19                 mov     [esp+1Ch+Str], ebx ; Count
.text:00409E1C                 call    calloc
.text:00409E21                 mov     [esp+1Ch+Str], eax ; Destination
.text:00409E24                 mov     esi, eax
.text:00409E26                 mov     [esp+1Ch+Count], ebx ; Count
.text:00409E2A                 mov     [esp+1Ch+Val], edi ; Source
.text:00409E2E                 call    strncpy
.text:00409E33                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:00409E38                 mov     byte ptr [ebp+esi+0], 0
.text:00409E3D                 jmp     short loc_409DD2
.text:00409E3F ; ---------------------------------------------------------------------------
.text:00409E3F
.text:00409E3F loc_409E3F:                             ; CODE XREF: sub_409D70+9B↑j
.text:00409E3F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00409E47                 inc     eax
.text:00409E48                 mov     [esp+1Ch+Str], eax ; Str
.text:00409E4B                 call    strchr
.text:00409E50                 test    eax, eax
.text:00409E52                 jz      short loc_409E0D
.text:00409E54                 sub     eax, edi
.text:00409E56                 lea     ebp, [eax+1]
.text:00409E59                 jmp     short loc_409E0E
.text:00409E59 ; ---------------------------------------------------------------------------
.text:00409E5B                 align 10h
.text:00409E60
.text:00409E60 loc_409E60:                             ; CODE XREF: sub_409D70+36↑j
.text:00409E60                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:00409E64                 jnz     loc_409DAC
.text:00409E6A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:00409E71                 call    _strdup
.text:00409E76                 movsx   edx, byte ptr [edi]
.text:00409E79                 mov     esi, eax
.text:00409E7B                 mov     [esp+1Ch+Str], edx ; C
.text:00409E7E                 call    toupper
.text:00409E83                 mov     [esi], al
.text:00409E85                 jmp     loc_409DD2
.text:00409E85 sub_409D70      endp
.text:00409E85
.text:00409E85 ; ---------------------------------------------------------------------------
.text:00409E8A                 align 10h
.text:00409E90
.text:00409E90 ; =============== S U B R O U T I N E =======================================
.text:00409E90
.text:00409E90
.text:00409E90 sub_409E90      proc near               ; CODE XREF: .text:00409FE4↓p
.text:00409E90                                         ; .text:0040A0C8↓p
.text:00409E90
.text:00409E90 Str             = dword ptr -2Ch
.text:00409E90 Val             = dword ptr -28h
.text:00409E90 var_18          = dword ptr -18h
.text:00409E90 var_11          = byte ptr -11h
.text:00409E90 arg_0           = dword ptr  4
.text:00409E90
.text:00409E90                 push    ebp
.text:00409E91                 push    edi
.text:00409E92                 push    esi
.text:00409E93                 push    ebx
.text:00409E94                 sub     esp, 1Ch
.text:00409E97                 mov     edx, [esp+2Ch+arg_0]
.text:00409E9B                 cmp     edx, ds:dword_411230
.text:00409EA1                 mov     [esp+2Ch+var_11], 0
.text:00409EA6                 jz      loc_409FA4
.text:00409EAC                 mov     ebx, ds:dword_411220
.text:00409EB2                 test    ebx, ebx
.text:00409EB4                 jz      short loc_409F22
.text:00409EB6
.text:00409EB6 loc_409EB6:                             ; CODE XREF: sub_409E90+10F↓j
.text:00409EB6                 mov     ebx, [esp+2Ch+arg_0]
.text:00409EBA                 xor     edi, edi
.text:00409EBC                 xor     esi, esi
.text:00409EBE                 mov     ebp, offset dword_411248
.text:00409EC3                 lea     esi, [esi+0]
.text:00409EC9                 lea     edi, [edi+0]
.text:00409ED0
.text:00409ED0 loc_409ED0:                             ; CODE XREF: sub_409E90+60↓j
.text:00409ED0                 mov     edx, [ebp+4]
.text:00409ED3                 mov     ecx, edi
.text:00409ED5                 mov     eax, [ebp+0]
.text:00409ED8                 shl     ecx, 4
.text:00409EDB                 mov     [esp+2Ch+var_18], ecx
.text:00409EDF                 mov     ecx, edx
.text:00409EE1                 xor     eax, ebx
.text:00409EE3                 xor     ecx, esi
.text:00409EE5                 or      ecx, eax
.text:00409EE7                 jz      short loc_409F11
.text:00409EE9                 inc     edi
.text:00409EEA                 add     ebp, 10h
.text:00409EED                 cmp     edi, 20h ; ' '
.text:00409EF0                 jle     short loc_409ED0
.text:00409EF2
.text:00409EF2 loc_409EF2:                             ; CODE XREF: sub_409E90+90↓j
.text:00409EF2                 movzx   ebx, [esp+2Ch+var_11]
.text:00409EF7                 mov     eax, [esp+2Ch+arg_0]
.text:00409EFB                 mov     byte_410060, bl
.text:00409F01                 mov     ds:dword_411230, eax
.text:00409F06                 movsx   eax, bl
.text:00409F09
.text:00409F09 loc_409F09:                             ; CODE XREF: sub_409E90+11B↓j
.text:00409F09                 add     esp, 1Ch
.text:00409F0C                 pop     ebx
.text:00409F0D                 pop     esi
.text:00409F0E                 pop     edi
.text:00409F0F                 pop     ebp
.text:00409F10                 retn
.text:00409F11 ; ---------------------------------------------------------------------------
.text:00409F11
.text:00409F11 loc_409F11:                             ; CODE XREF: sub_409E90+57↑j
.text:00409F11                 mov     edx, [esp+2Ch+var_18]
.text:00409F15                 movzx   eax, byte ptr ds:dword_411240[edx]
.text:00409F1C                 mov     [esp+2Ch+var_11], al
.text:00409F20                 jmp     short loc_409EF2
.text:00409F22 ; ---------------------------------------------------------------------------
.text:00409F22
.text:00409F22 loc_409F22:                             ; CODE XREF: sub_409E90+24↑j
.text:00409F22                 mov     [esp+2Ch+Str], 0
.text:00409F29                 call    sub_40BDD0
.text:00409F2E                 test    eax, eax
.text:00409F30                 mov     ebx, eax
.text:00409F32                 jz      short loc_409F8C
.text:00409F34                 movzx   ecx, byte ptr [eax]
.text:00409F37                 mov     esi, 0FFFFFFF0h
.text:00409F3C                 test    cl, cl
.text:00409F3E                 jz      short loc_409F8C
.text:00409F40
.text:00409F40 loc_409F40:                             ; CODE XREF: sub_409E90+FA↓j
.text:00409F40                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:00409F43                 movsx   ebp, cl
.text:00409F46                 add     esi, 10h
.text:00409F49                 mov     ds:dword_411240[esi], ebp
.text:00409F4F                 mov     edi, ebp
.text:00409F51                 sar     edi, 1Fh
.text:00409F54                 mov     ds:dword_411244[esi], edi
.text:00409F5A                 call    sub_408870
.text:00409F5F                 mov     ds:dword_411248[esi], eax
.text:00409F65                 xor     ecx, ecx
.text:00409F67                 mov     [esp+2Ch+Str], ebx ; Str
.text:00409F6A                 mov     ds:dword_41124C[esi], ecx
.text:00409F70                 mov     [esp+2Ch+Val], 0 ; Val
.text:00409F78                 call    strchr
.text:00409F7D                 mov     ebx, eax
.text:00409F7F                 inc     ebx
.text:00409F80                 jz      short loc_409F8C
.text:00409F82                 movzx   edx, byte ptr [eax+1]
.text:00409F86                 test    dl, dl
.text:00409F88                 mov     cl, dl
.text:00409F8A                 jnz     short loc_409F40
.text:00409F8C
.text:00409F8C loc_409F8C:                             ; CODE XREF: sub_409E90+A2↑j
.text:00409F8C                                         ; sub_409E90+AE↑j ...
.text:00409F8C                 mov     [esp+2Ch+Str], ebx ; Block
.text:00409F8F                 mov     esi, 1
.text:00409F94                 mov     ds:dword_411220, esi
.text:00409F9A                 call    free
.text:00409F9F                 jmp     loc_409EB6
.text:00409FA4 ; ---------------------------------------------------------------------------
.text:00409FA4
.text:00409FA4 loc_409FA4:                             ; CODE XREF: sub_409E90+16↑j
.text:00409FA4                 movsx   eax, byte_410060
.text:00409FAB                 jmp     loc_409F09
.text:00409FAB sub_409E90      endp
.text:00409FAB
.text:00409FAB ; ---------------------------------------------------------------------------
.text:00409FB0 dword_409FB0    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:00409FB0                                         ; DATA XREF: .text:00409FD3↓o
.text:00409FB0                                         ; .text:0040A0B3↓o
.text:00409FC0 ; ---------------------------------------------------------------------------
.text:00409FC0                 sub     esp, 1Ch
.text:00409FC3                 mov     [esp+14h], esi
.text:00409FC7                 mov     esi, [esp+20h]
.text:00409FCB                 mov     [esp+18h], edi
.text:00409FCF                 mov     [esp+10h], ebx
.text:00409FD3                 mov     dword ptr [esp], offset dword_409FB0
.text:00409FDA                 call    _strdup
.text:00409FDF                 mov     [esp], esi
.text:00409FE2                 mov     edi, eax
.text:00409FE4                 call    sub_409E90
.text:00409FE9                 mov     [edi], al
.text:00409FEB                 test    al, al
.text:00409FED                 jz      short loc_40A001
.text:00409FEF                 mov     eax, edi
.text:00409FF1                 mov     ebx, [esp+10h]
.text:00409FF5                 mov     esi, [esp+14h]
.text:00409FF9                 mov     edi, [esp+18h]
.text:00409FFD                 add     esp, 1Ch
.text:0040A000                 retn
.text:0040A001 ; ---------------------------------------------------------------------------
.text:0040A001
.text:0040A001 loc_40A001:                             ; CODE XREF: .text:00409FED↑j
.text:0040A001                 mov     [esp], edi
.text:0040A004                 call    free
.text:0040A009                 mov     dword ptr [esp+4], 0
.text:0040A011                 mov     dword ptr [esp], 0
.text:0040A018                 call    GetCurrentDirectoryA
.text:0040A01D                 sub     esp, 8
.text:0040A020                 lea     esi, [eax+1]
.text:0040A023                 mov     [esp], esi
.text:0040A026                 call    malloc
.text:0040A02B                 mov     [esp+4], eax
.text:0040A02F                 mov     edi, eax
.text:0040A031                 mov     [esp], esi
.text:0040A034                 call    GetCurrentDirectoryA
.text:0040A039                 sub     esp, 8
.text:0040A03C                 test    eax, eax
.text:0040A03E                 jnz     short loc_40A060
.text:0040A040                 mov     dword ptr [esp+20h], 409FB4h
.text:0040A048                 mov     ebx, [esp+10h]
.text:0040A04C                 mov     esi, [esp+14h]
.text:0040A050                 mov     edi, [esp+18h]
.text:0040A054                 add     esp, 1Ch
.text:0040A057                 jmp     _strdup
.text:0040A057 ; ---------------------------------------------------------------------------
.text:0040A05C                 align 10h
.text:0040A060
.text:0040A060 loc_40A060:                             ; CODE XREF: .text:0040A03E↑j
.text:0040A060                 mov     [esp+20h], edi
.text:0040A064                 mov     ebx, [esp+10h]
.text:0040A068                 mov     esi, [esp+14h]
.text:0040A06C                 mov     edi, [esp+18h]
.text:0040A070                 add     esp, 1Ch
.text:0040A073                 jmp     sub_409D70
.text:0040A073 ; ---------------------------------------------------------------------------
.text:0040A078                 align 10h
.text:0040A080                 sub     esp, 7Ch
.text:0040A083                 lea     edx, [esp+10h]
.text:0040A087                 mov     [esp+8], edx
.text:0040A08B                 mov     edx, [esp+80h]
.text:0040A092                 mov     [esp+70h], ebx
.text:0040A096                 mov     [esp+74h], esi
.text:0040A09A                 mov     [esp+4], edx
.text:0040A09E                 mov     [esp+78h], edi
.text:0040A0A2                 mov     dword ptr [esp], 0
.text:0040A0A9                 call    sub_40BFE0
.text:0040A0AE                 xor     edx, edx
.text:0040A0B0                 inc     eax
.text:0040A0B1                 jz      short loc_40A0D5
.text:0040A0B3                 mov     dword ptr [esp], offset dword_409FB0
.text:0040A0BA                 mov     esi, [esp+20h]
.text:0040A0BE                 call    _strdup
.text:0040A0C3                 mov     edi, eax
.text:0040A0C5                 mov     [esp], esi
.text:0040A0C8                 call    sub_409E90
.text:0040A0CD                 mov     [edi], al
.text:0040A0CF                 test    al, al
.text:0040A0D1                 mov     edx, edi
.text:0040A0D3                 jz      short loc_40A0E7
.text:0040A0D5
.text:0040A0D5 loc_40A0D5:                             ; CODE XREF: .text:0040A0B1↑j
.text:0040A0D5                                         ; .text:0040A134↓j
.text:0040A0D5                 mov     ebx, [esp+70h]
.text:0040A0D9                 mov     eax, edx
.text:0040A0DB                 mov     esi, [esp+74h]
.text:0040A0DF                 mov     edi, [esp+78h]
.text:0040A0E3                 add     esp, 7Ch
.text:0040A0E6                 retn
.text:0040A0E7 ; ---------------------------------------------------------------------------
.text:0040A0E7
.text:0040A0E7 loc_40A0E7:                             ; CODE XREF: .text:0040A0D3↑j
.text:0040A0E7                 mov     [esp], edi
.text:0040A0EA                 call    free
.text:0040A0EF                 mov     dword ptr [esp+4], 0
.text:0040A0F7                 mov     dword ptr [esp], 0
.text:0040A0FE                 call    GetCurrentDirectoryA
.text:0040A103                 sub     esp, 8
.text:0040A106                 lea     esi, [eax+1]
.text:0040A109                 mov     [esp], esi
.text:0040A10C                 call    malloc
.text:0040A111                 mov     [esp+4], eax
.text:0040A115                 mov     edi, eax
.text:0040A117                 mov     [esp], esi
.text:0040A11A                 call    GetCurrentDirectoryA
.text:0040A11F                 sub     esp, 8
.text:0040A122                 test    eax, eax
.text:0040A124                 jnz     short loc_40A136
.text:0040A126                 mov     dword ptr [esp], 409FB4h
.text:0040A12D                 call    _strdup
.text:0040A132
.text:0040A132 loc_40A132:                             ; CODE XREF: .text:0040A13E↓j
.text:0040A132                 mov     edx, eax
.text:0040A134                 jmp     short loc_40A0D5
.text:0040A136 ; ---------------------------------------------------------------------------
.text:0040A136
.text:0040A136 loc_40A136:                             ; CODE XREF: .text:0040A124↑j
.text:0040A136                 mov     [esp], edi
.text:0040A139                 call    sub_409D70
.text:0040A13E                 jmp     short loc_40A132
.text:0040A140
.text:0040A140 ; =============== S U B R O U T I N E =======================================
.text:0040A140
.text:0040A140
.text:0040A140 ; int __cdecl sub_40A140(LPCSTR)
.text:0040A140 sub_40A140      proc near               ; CODE XREF: sub_407D20+12F↑p
.text:0040A140
.text:0040A140 String1         = dword ptr -1Ch
.text:0040A140 String2         = dword ptr -18h
.text:0040A140 var_C           = dword ptr -0Ch
.text:0040A140 var_8           = dword ptr -8
.text:0040A140 var_4           = dword ptr -4
.text:0040A140 arg_0           = dword ptr  4
.text:0040A140
.text:0040A140                 sub     esp, 1Ch
.text:0040A143                 mov     [esp+1Ch+var_4], edi
.text:0040A147                 mov     edi, [esp+1Ch+arg_0]
.text:0040A14B                 mov     [esp+1Ch+var_C], ebx
.text:0040A14F                 mov     [esp+1Ch+var_8], esi
.text:0040A153                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040A156                 call    sub_409C10
.text:0040A15B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040A15E                 mov     esi, eax
.text:0040A160                 call    sub_409D70
.text:0040A165                 mov     [esp+1Ch+String2], eax ; String2
.text:0040A169                 mov     ebx, eax
.text:0040A16B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040A16E                 call    _stricmp
.text:0040A173                 test    eax, eax
.text:0040A175                 setz    dl
.text:0040A178                 test    esi, esi
.text:0040A17A                 movzx   edi, dl
.text:0040A17D                 jz      short loc_40A187
.text:0040A17F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040A182                 call    free
.text:0040A187
.text:0040A187 loc_40A187:                             ; CODE XREF: sub_40A140+3D↑j
.text:0040A187                 test    ebx, ebx
.text:0040A189                 jz      short loc_40A193
.text:0040A18B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040A18E                 call    free
.text:0040A193
.text:0040A193 loc_40A193:                             ; CODE XREF: sub_40A140+49↑j
.text:0040A193                 mov     eax, edi
.text:0040A195                 mov     ebx, [esp+1Ch+var_C]
.text:0040A199                 mov     esi, [esp+1Ch+var_8]
.text:0040A19D                 mov     edi, [esp+1Ch+var_4]
.text:0040A1A1                 add     esp, 1Ch
.text:0040A1A4                 retn
.text:0040A1A4 sub_40A140      endp
.text:0040A1A4
.text:0040A1A4 ; ---------------------------------------------------------------------------
.text:0040A1A5                 align 10h
.text:0040A1B0 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040A201↓o
.text:0040A1B9 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040A1B9                                         ; DATA XREF: .text:0040A212↓o
.text:0040A1CD ; const CHAR FileName[]
.text:0040A1CD FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0040A35C↓o
.text:0040A1CD                                         ; sub_40A790+17C↓o
.text:0040A1D8 ; ---------------------------------------------------------------------------
.text:0040A1D8
.text:0040A1D8 loc_40A1D8:                             ; DATA XREF: .text:0040A472↓o
.text:0040A1D8                 dec     esi
.text:0040A1D9                 push    esp
.text:0040A1DA                 inc     esi
.text:0040A1DB                 push    ebx
.text:0040A1DC                 add     [esi+41h], al
.text:0040A1DF                 push    esp
.text:0040A1E0                 xor     esi, [edx]
.text:0040A1E2                 add     [esi+41h], al
.text:0040A1E5                 push    esp
.text:0040A1E6                 add     [ebx+44h], al
.text:0040A1E9                 inc     esi
.text:0040A1EA                 push    ebx
.text:0040A1EB
.text:0040A1EB loc_40A1EB:                             ; CODE XREF: sub_40A790+101↓p
.text:0040A1EB                 add     [ebp+55002674h], cl
.text:0040A1F1                 push    edi
.text:0040A1F2                 push    esi
.text:0040A1F3                 push    ebx
.text:0040A1F4                 sub     esp, 8BCh
.text:0040A1FA                 mov     ebp, [esp+8D0h]
.text:0040A201                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040A208                 call    LoadLibraryA
.text:0040A20D                 sub     esp, 4
.text:0040A210                 mov     edi, eax
.text:0040A212                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040A21A                 mov     [esp], eax
.text:0040A21D                 call    GetProcAddress
.text:0040A222                 sub     esp, 8
.text:0040A225                 mov     esi, eax
.text:0040A227                 test    ebp, ebp
.text:0040A229                 mov     dword ptr [esp+20h], 0
.text:0040A231                 jz      loc_40A771
.text:0040A237                 mov     [esp], ebp
.text:0040A23A                 call    sub_40AE80
.text:0040A23F                 mov     [esp], eax
.text:0040A242                 mov     ebp, eax
.text:0040A244                 call    strlen
.text:0040A249                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040A24E                 mov     ebx, eax
.text:0040A250                 jz      short loc_40A26C
.text:0040A252                 mov     [esp], ebp
.text:0040A255                 lea     edx, [eax+1]
.text:0040A258                 mov     [esp+4], edx
.text:0040A25C                 call    realloc
.text:0040A261                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040A265                 mov     ebp, eax
.text:0040A267                 mov     byte ptr [ebx+eax+1], 0
.text:0040A26C
.text:0040A26C loc_40A26C:                             ; CODE XREF: .text:0040A250↑j
.text:0040A26C                 mov     dword ptr [esp+1Ch], 400h
.text:0040A274                 lea     edx, [esp+0B0h]
.text:0040A27B                 lea     ebx, [esp+5Ch]
.text:0040A27F                 mov     [esp+18h], edx
.text:0040A283                 lea     ecx, [esp+58h]
.text:0040A287                 lea     edx, [esp+54h]
.text:0040A28B                 mov     [esp+14h], ebx
.text:0040A28F                 lea     eax, [esp+4B0h]
.text:0040A296                 mov     [esp+10h], ecx
.text:0040A29A                 mov     [esp+0Ch], edx
.text:0040A29E                 mov     dword ptr [esp+8], 400h
.text:0040A2A6                 mov     [esp+4], eax
.text:0040A2AA                 mov     [esp], ebp
.text:0040A2AD                 call    GetVolumeInformationA
.text:0040A2B2                 sub     esp, 20h
.text:0040A2B5                 test    eax, eax
.text:0040A2B7                 jz      loc_40A74E
.text:0040A2BD                 test    esi, esi
.text:0040A2BF                 jz      short loc_40A2E5
.text:0040A2C1                 mov     [esp], ebp
.text:0040A2C4                 lea     edx, [esp+48h]
.text:0040A2C8                 lea     ebx, [esp+40h]
.text:0040A2CC                 mov     [esp+0Ch], edx
.text:0040A2D0                 lea     ecx, [esp+38h]
.text:0040A2D4                 mov     [esp+8], ebx
.text:0040A2D8                 mov     [esp+4], ecx
.text:0040A2DC                 call    esi
.text:0040A2DE                 sub     esp, 10h
.text:0040A2E1                 mov     [esp+20h], eax
.text:0040A2E5
.text:0040A2E5 loc_40A2E5:                             ; CODE XREF: .text:0040A2BF↑j
.text:0040A2E5                 test    edi, edi
.text:0040A2E7                 jz      short loc_40A2F4
.text:0040A2E9                 mov     [esp], edi
.text:0040A2EC                 call    FreeLibrary
.text:0040A2F1                 sub     esp, 4
.text:0040A2F4
.text:0040A2F4 loc_40A2F4:                             ; CODE XREF: .text:0040A2E7↑j
.text:0040A2F4                 call    sub_40C900
.text:0040A2F9                 test    eax, eax
.text:0040A2FB                 lea     esi, [esp+28h]
.text:0040A2FF                 jz      loc_40A730
.text:0040A305                 call    sub_40C900
.text:0040A30A                 test    eax, eax
.text:0040A30C                 jz      short loc_40A31C
.text:0040A30E                 call    sub_40C850
.text:0040A313                 cmp     eax, 0Bh
.text:0040A316                 jle     loc_40A704
.text:0040A31C
.text:0040A31C loc_40A31C:                             ; CODE XREF: .text:0040A30C↑j
.text:0040A31C                 cld
.text:0040A31D                 xor     eax, eax
.text:0040A31F                 lea     ebx, [esp+60h]
.text:0040A323                 mov     ecx, 7
.text:0040A328                 mov     edi, ebx
.text:0040A32A                 rep stosd
.text:0040A32C                 mov     dword ptr [esp+18h], 0
.text:0040A334                 mov     dword ptr [esp+14h], 4000000h
.text:0040A33C                 mov     dword ptr [esp+10h], 0
.text:0040A344                 mov     dword ptr [esp+0Ch], 0
.text:0040A34C                 mov     dword ptr [esp+8], 0
.text:0040A354                 mov     dword ptr [esp+4], 0
.text:0040A35C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:0040A363                 call    CreateFileA
.text:0040A368                 sub     esp, 1Ch
.text:0040A36B                 mov     edi, eax
.text:0040A36D                 cmp     eax, 0FFFFFFFFh
.text:0040A370                 jz      short loc_40A3F0
.text:0040A372                 mov     [esp+10h], ebx
.text:0040A376                 lea     edx, [esp+80h]
.text:0040A37D                 lea     ecx, [esp+24h]
.text:0040A381                 mov     [esp+70h], edx
.text:0040A385                 mov     [esp+18h], ecx
.text:0040A389                 mov     [esp+8], ebx
.text:0040A38D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040A395                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040A39D                 mov     [esp+64h], ebp
.text:0040A3A1                 mov     dword ptr [esp+78h], 1
.text:0040A3A9                 mov     dword ptr [esp+1Ch], 0
.text:0040A3B1                 mov     dword ptr [esp+14h], 1Ch
.text:0040A3B9                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040A3C1                 mov     dword ptr [esp+4], 6
.text:0040A3C9                 mov     [esp], eax
.text:0040A3CC                 call    DeviceIoControl
.text:0040A3D1                 sub     esp, 20h
.text:0040A3D4                 mov     ebx, eax
.text:0040A3D6                 mov     [esp], edi
.text:0040A3D9                 call    CloseHandle
.text:0040A3DE                 sub     esp, 4
.text:0040A3E1                 test    ebx, ebx
.text:0040A3E3                 jz      short loc_40A3F0
.text:0040A3E5                 test    byte ptr [esp+78h], 1
.text:0040A3EA                 jz      loc_40A6D0
.text:0040A3F0
.text:0040A3F0 loc_40A3F0:                             ; CODE XREF: .text:0040A370↑j
.text:0040A3F0                                         ; .text:0040A3E3↑j
.text:0040A3F0                 call    sub_409BC0
.text:0040A3F5                 mov     edi, eax
.text:0040A3F7                 call    _errno
.text:0040A3FC                 mov     [eax], edi
.text:0040A3FE                 xor     eax, eax
.text:0040A400
.text:0040A400 loc_40A400:                             ; CODE XREF: .text:0040A6FF↓j
.text:0040A400                                         ; .text:0040A72B↓j
.text:0040A400                 test    eax, eax
.text:0040A402                 jnz     short loc_40A424
.text:0040A404                 mov     dword ptr [esp+34h], 1
.text:0040A40C                 mov     dword ptr [esp+30h], 200h
.text:0040A414                 mov     dword ptr [esp+2Ch], 0
.text:0040A41C                 mov     dword ptr [esp+28h], 0
.text:0040A424
.text:0040A424 loc_40A424:                             ; CODE XREF: .text:0040A402↑j
.text:0040A424                 mov     edx, [esp+30h]
.text:0040A428                 mov     edi, [esp+34h]
.text:0040A42C                 mov     ecx, [esp+20h]
.text:0040A430                 imul    edi, edx
.text:0040A433                 test    ecx, ecx
.text:0040A435                 jnz     short loc_40A45D
.text:0040A437                 mov     eax, [esp+28h]
.text:0040A43B                 mul     edi
.text:0040A43D                 mov     esi, eax
.text:0040A43F                 mov     eax, [esp+2Ch]
.text:0040A443                 mov     [esp+44h], edx
.text:0040A447                 mov     [esp+40h], esi
.text:0040A44B                 mul     edi
.text:0040A44D                 mov     [esp+48h], eax
.text:0040A451                 mov     [esp+4Ch], edx
.text:0040A455                 mov     [esp+38h], eax
.text:0040A459                 mov     [esp+3Ch], edx
.text:0040A45D
.text:0040A45D loc_40A45D:                             ; CODE XREF: .text:0040A435↑j
.text:0040A45D                 mov     ebx, [esp+5Ch]
.text:0040A461                 lea     edx, [esp+0B0h]
.text:0040A468                 mov     ecx, [esp+8D4h]
.text:0040A46F                 mov     [ecx+48h], ebx
.text:0040A472                 mov     dword ptr [esp+4], offset loc_40A1D8
.text:0040A47A                 mov     [esp], edx
.text:0040A47D                 call    _stricmp
.text:0040A482                 test    eax, eax
.text:0040A484                 jnz     loc_40A640
.text:0040A48A                 mov     esi, [esp+8D4h]
.text:0040A491                 mov     dword ptr [esi], 5346544Eh
.text:0040A497
.text:0040A497 loc_40A497:                             ; CODE XREF: .text:0040A668↓j
.text:0040A497                                         ; .text:0040A695↓j ...
.text:0040A497                 mov     ebx, [esp+30h]
.text:0040A49B                 mov     esi, [esp+8D4h]
.text:0040A4A2                 mov     [esi+4], ebx
.text:0040A4A5                 mov     [esi+8], ebx
.text:0040A4A8                 mov     ebx, [esi+8]
.text:0040A4AB                 mov     [esi+0Ch], edi
.text:0040A4AE                 mov     ecx, [esp+44h]
.text:0040A4B2                 xor     esi, esi
.text:0040A4B4                 mov     [esp+8], ebx
.text:0040A4B8                 mov     edx, [esp+40h]
.text:0040A4BC                 mov     [esp+0Ch], esi
.text:0040A4C0                 mov     [esp+4], ecx
.text:0040A4C4                 mov     [esp], edx
.text:0040A4C7                 call    sub_40ED50
.text:0040A4CC                 mov     ecx, [esp+8D4h]
.text:0040A4D3                 mov     [ecx+10h], eax
.text:0040A4D6                 mov     [ecx+14h], edx
.text:0040A4D9                 mov     ecx, [esp+4Ch]
.text:0040A4DD                 mov     [esp+8], ebx
.text:0040A4E1                 mov     edx, [esp+48h]
.text:0040A4E5                 mov     [esp+0Ch], esi
.text:0040A4E9                 mov     [esp+4], ecx
.text:0040A4ED                 mov     [esp], edx
.text:0040A4F0                 call    sub_40ED50
.text:0040A4F5                 mov     ecx, [esp+8D4h]
.text:0040A4FC                 mov     [ecx+18h], eax
.text:0040A4FF                 mov     [ecx+1Ch], edx
.text:0040A502                 mov     ecx, [esp+38h]
.text:0040A506                 mov     [esp+8], ebx
.text:0040A50A                 mov     ebx, [esp+3Ch]
.text:0040A50E                 mov     [esp+0Ch], esi
.text:0040A512                 mov     [esp], ecx
.text:0040A515                 mov     [esp+4], ebx
.text:0040A519                 call    sub_40ED50
.text:0040A51E                 mov     esi, [esp+8D4h]
.text:0040A525                 mov     [esi+20h], eax
.text:0040A528                 mov     [esi+24h], edx
.text:0040A52B                 mov     ecx, [esp+44h]
.text:0040A52F                 mov     esi, edi
.text:0040A531                 mov     [esp+8], esi
.text:0040A535                 mov     edx, [esp+40h]
.text:0040A539                 xor     edi, edi
.text:0040A53B                 mov     [esp+0Ch], edi
.text:0040A53F                 mov     [esp+4], ecx
.text:0040A543                 mov     [esp], edx
.text:0040A546                 call    sub_40ED50
.text:0040A54B                 mov     ebx, [esp+8D4h]
.text:0040A552                 mov     [ebx+28h], eax
.text:0040A555                 mov     [ebx+2Ch], edx
.text:0040A558                 mov     ecx, [esp+4Ch]
.text:0040A55C                 mov     [esp+8], esi
.text:0040A560                 mov     edx, [esp+48h]
.text:0040A564                 mov     [esp+0Ch], edi
.text:0040A568                 mov     [esp+4], ecx
.text:0040A56C                 mov     [esp], edx
.text:0040A56F                 call    sub_40ED50
.text:0040A574                 mov     ebx, [esp+8D4h]
.text:0040A57B                 mov     [ebx+30h], eax
.text:0040A57E                 mov     [ebx+34h], edx
.text:0040A581                 mov     ecx, [esp+3Ch]
.text:0040A585                 mov     [esp+8], esi
.text:0040A589                 mov     edx, [esp+38h]
.text:0040A58D                 mov     [esp+0Ch], edi
.text:0040A591                 mov     [esp+4], ecx
.text:0040A595                 mov     [esp], edx
.text:0040A598                 call    sub_40ED50
.text:0040A59D                 mov     edx, [esp+8D4h]
.text:0040A5A4                 lea     ecx, [esp+0B0h]
.text:0040A5AB                 mov     [edx+38h], eax
.text:0040A5AE                 mov     esi, [esp+58h]
.text:0040A5B2                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040A5B9                 mov     [edx+110h], esi
.text:0040A5BF                 mov     esi, edx
.text:0040A5C1                 add     esi, 4Ch ; 'L'
.text:0040A5C4                 movzx   ebx, word ptr [esp+56h]
.text:0040A5C9                 movzx   edi, word ptr [esp+54h]
.text:0040A5CE                 mov     [edx+3Ch], ebx
.text:0040A5D1                 lea     ebx, [esp+4B0h]
.text:0040A5D8                 mov     [edx+40h], edi
.text:0040A5DB                 mov     [esp+4], ecx
.text:0040A5DF                 mov     dword ptr [esp+8], 10h
.text:0040A5E7                 mov     [esp], esi
.text:0040A5EA                 call    strncpy
.text:0040A5EF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040A5F7                 mov     edi, [esp+8D4h]
.text:0040A5FE                 mov     [esp+4], ebx
.text:0040A602                 add     edi, 5Ch ; '\'
.text:0040A605                 mov     [esp], edi
.text:0040A608                 call    strncpy
.text:0040A60D                 mov     [esp+4], ebp
.text:0040A611                 mov     ebp, [esp+8D4h]
.text:0040A618                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040A620                 add     ebp, 0B6h ; '¶'
.text:0040A626                 mov     [esp], ebp
.text:0040A629                 call    strncpy
.text:0040A62E                 xor     eax, eax
.text:0040A630
.text:0040A630 loc_40A630:                             ; CODE XREF: .text:0040A76C↓j
.text:0040A630                 add     esp, 8BCh
.text:0040A636                 pop     ebx
.text:0040A637                 pop     esi
.text:0040A638                 pop     edi
.text:0040A639                 pop     ebp
.text:0040A63A                 retn
.text:0040A63A ; ---------------------------------------------------------------------------
.text:0040A63B                 align 10h
.text:0040A640
.text:0040A640 loc_40A640:                             ; CODE XREF: .text:0040A484↑j
.text:0040A640                 mov     dword ptr [esp+4], 40A1DDh
.text:0040A648                 lea     eax, [esp+0B0h]
.text:0040A64F                 mov     [esp], eax
.text:0040A652                 call    _stricmp
.text:0040A657                 test    eax, eax
.text:0040A659                 jnz     short loc_40A66D
.text:0040A65B                 mov     edx, [esp+8D4h]
.text:0040A662                 mov     dword ptr [edx], 4008h
.text:0040A668                 jmp     loc_40A497
.text:0040A66D ; ---------------------------------------------------------------------------
.text:0040A66D
.text:0040A66D loc_40A66D:                             ; CODE XREF: .text:0040A659↑j
.text:0040A66D                 mov     dword ptr [esp+4], 40A1E3h
.text:0040A675                 lea     ecx, [esp+0B0h]
.text:0040A67C                 mov     [esp], ecx
.text:0040A67F                 call    _stricmp
.text:0040A684                 test    eax, eax
.text:0040A686                 jnz     short loc_40A69A
.text:0040A688                 mov     ebx, [esp+8D4h]
.text:0040A68F                 mov     dword ptr [ebx], 4006h
.text:0040A695                 jmp     loc_40A497
.text:0040A69A ; ---------------------------------------------------------------------------
.text:0040A69A
.text:0040A69A loc_40A69A:                             ; CODE XREF: .text:0040A686↑j
.text:0040A69A                 mov     dword ptr [esp+4], 40A1E7h
.text:0040A6A2                 lea     eax, [esp+0B0h]
.text:0040A6A9                 mov     [esp], eax
.text:0040A6AC                 call    _stricmp
.text:0040A6B1                 test    eax, eax
.text:0040A6B3                 mov     esi, [esp+8D4h]
.text:0040A6BA                 setnz   cl
.text:0040A6BD                 movzx   edx, cl
.text:0040A6C0                 dec     edx
.text:0040A6C1                 and     edx, 4000h
.text:0040A6C7                 mov     [esi], edx
.text:0040A6C9                 jmp     loc_40A497
.text:0040A6C9 ; ---------------------------------------------------------------------------
.text:0040A6CE                 align 10h
.text:0040A6D0
.text:0040A6D0 loc_40A6D0:                             ; CODE XREF: .text:0040A3EA↑j
.text:0040A6D0                 mov     edi, [esp+84h]
.text:0040A6D7                 mov     eax, 1
.text:0040A6DC                 mov     edx, [esp+88h]
.text:0040A6E3                 mov     ecx, [esp+8Ch]
.text:0040A6EA                 mov     ebx, [esp+90h]
.text:0040A6F1                 mov     [esp+34h], edi
.text:0040A6F5                 mov     [esp+30h], edx
.text:0040A6F9                 mov     [esp+2Ch], ecx
.text:0040A6FD                 mov     [esi], ebx
.text:0040A6FF                 jmp     loc_40A400
.text:0040A704 ; ---------------------------------------------------------------------------
.text:0040A704
.text:0040A704 loc_40A704:                             ; CODE XREF: .text:0040A316↑j
.text:0040A704                 mov     [esp+10h], esi
.text:0040A708                 lea     eax, [esp+2Ch]
.text:0040A70C                 lea     esi, [esp+30h]
.text:0040A710                 mov     [esp+0Ch], eax
.text:0040A714                 lea     edi, [esp+34h]
.text:0040A718                 mov     [esp+8], esi
.text:0040A71C                 mov     [esp+4], edi
.text:0040A720
.text:0040A720 loc_40A720:                             ; CODE XREF: .text:0040A74C↓j
.text:0040A720                 mov     [esp], ebp
.text:0040A723                 call    GetDiskFreeSpaceA
.text:0040A728                 sub     esp, 14h
.text:0040A72B                 jmp     loc_40A400
.text:0040A730 ; ---------------------------------------------------------------------------
.text:0040A730
.text:0040A730 loc_40A730:                             ; CODE XREF: .text:0040A2FF↑j
.text:0040A730                 mov     [esp+10h], esi
.text:0040A734                 lea     ebx, [esp+2Ch]
.text:0040A738                 lea     eax, [esp+30h]
.text:0040A73C                 mov     [esp+0Ch], ebx
.text:0040A740                 lea     esi, [esp+34h]
.text:0040A744                 mov     [esp+8], eax
.text:0040A748                 mov     [esp+4], esi
.text:0040A74C                 jmp     short loc_40A720
.text:0040A74E ; ---------------------------------------------------------------------------
.text:0040A74E
.text:0040A74E loc_40A74E:                             ; CODE XREF: .text:0040A2B7↑j
.text:0040A74E                 mov     [esp], edi
.text:0040A751                 call    FreeLibrary
.text:0040A756                 sub     esp, 4
.text:0040A759                 call    sub_409BC0
.text:0040A75E                 mov     esi, eax
.text:0040A760                 call    _errno
.text:0040A765                 mov     [eax], esi
.text:0040A767
.text:0040A767 loc_40A767:                             ; CODE XREF: .text:0040A787↓j
.text:0040A767                 mov     eax, 0FFFFFFFFh
.text:0040A76C                 jmp     loc_40A630
.text:0040A771 ; ---------------------------------------------------------------------------
.text:0040A771
.text:0040A771 loc_40A771:                             ; CODE XREF: .text:0040A231↑j
.text:0040A771                 mov     [esp], edi
.text:0040A774                 call    FreeLibrary
.text:0040A779                 sub     esp, 4
.text:0040A77C                 call    _errno
.text:0040A781                 mov     dword ptr [eax], 2
.text:0040A787                 jmp     short loc_40A767
.text:0040A787 ; ---------------------------------------------------------------------------
.text:0040A789                 align 10h
.text:0040A790
.text:0040A790 ; =============== S U B R O U T I N E =======================================
.text:0040A790
.text:0040A790
.text:0040A790 ; int __cdecl sub_40A790(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040A790 sub_40A790      proc near               ; CODE XREF: sub_408370+2C7↑p
.text:0040A790                                         ; .text:004089AA↑p
.text:0040A790
.text:0040A790 lpFileName      = dword ptr -9Ch
.text:0040A790 dwDesiredAccess = dword ptr -98h
.text:0040A790 dwShareMode     = dword ptr -94h
.text:0040A790 lpSecurityAttributes= dword ptr -90h
.text:0040A790 dwCreationDisposition= dword ptr -8Ch
.text:0040A790 dwFlagsAndAttributes= dword ptr -88h
.text:0040A790 hTemplateFile   = dword ptr -84h
.text:0040A790 lpOverlapped    = dword ptr -80h
.text:0040A790 BytesReturned   = dword ptr -70h
.text:0040A790 InBuffer        = byte ptr -6Ch
.text:0040A790 var_68          = dword ptr -68h
.text:0040A790 var_64          = dword ptr -64h
.text:0040A790 var_60          = dword ptr -60h
.text:0040A790 var_5C          = dword ptr -5Ch
.text:0040A790 var_54          = dword ptr -54h
.text:0040A790 var_4C          = byte ptr -4Ch
.text:0040A790 var_48          = dword ptr -48h
.text:0040A790 var_44          = dword ptr -44h
.text:0040A790 var_40          = dword ptr -40h
.text:0040A790 var_3C          = dword ptr -3Ch
.text:0040A790 lpRootPathName  = dword ptr -2Ch
.text:0040A790 lpSectorsPerCluster= dword ptr -28h
.text:0040A790 lpBytesPerSector= dword ptr -24h
.text:0040A790 lpNumberOfFreeClusters= dword ptr -20h
.text:0040A790 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040A790 var_18          = dword ptr -18h
.text:0040A790 var_14          = dword ptr -14h
.text:0040A790 var_10          = dword ptr -10h
.text:0040A790 var_C           = dword ptr -0Ch
.text:0040A790 var_8           = dword ptr -8
.text:0040A790 var_4           = dword ptr -4
.text:0040A790 arg_0           = dword ptr  4
.text:0040A790 arg_4           = dword ptr  8
.text:0040A790 arg_8           = dword ptr  0Ch
.text:0040A790 arg_C           = dword ptr  10h
.text:0040A790 arg_10          = dword ptr  14h
.text:0040A790
.text:0040A790                 sub     esp, 2Ch
.text:0040A793                 mov     edx, [esp+2Ch+arg_0]
.text:0040A797                 mov     [esp+2Ch+var_10], ebx
.text:0040A79B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040A79F                 mov     [esp+2Ch+var_C], esi
.text:0040A7A3                 mov     esi, [esp+2Ch+arg_C]
.text:0040A7A7                 mov     [esp+2Ch+var_8], edi
.text:0040A7AB                 mov     edi, [esp+2Ch+arg_8]
.text:0040A7AF                 mov     [esp+2Ch+var_4], ebp
.text:0040A7B3                 mov     ebp, [esp+2Ch+arg_4]
.text:0040A7B7                 mov     [esp+2Ch+var_14], edx
.text:0040A7BB                 call    sub_40C900
.text:0040A7C0                 test    eax, eax
.text:0040A7C2                 jz      short loc_40A7F4
.text:0040A7C4                 mov     [esp+2Ch+arg_10], ebx
.text:0040A7C8                 mov     edx, [esp+2Ch+var_14]
.text:0040A7CC                 mov     ebx, [esp+2Ch+var_10]
.text:0040A7D0                 mov     [esp+2Ch+arg_C], esi
.text:0040A7D4                 mov     esi, [esp+2Ch+var_C]
.text:0040A7D8                 mov     [esp+2Ch+arg_8], edi
.text:0040A7DC                 mov     edi, [esp+2Ch+var_8]
.text:0040A7E0                 mov     [esp+2Ch+arg_4], ebp
.text:0040A7E4                 mov     ebp, [esp+2Ch+var_4]
.text:0040A7E8                 mov     [esp+2Ch+arg_0], edx
.text:0040A7EC                 add     esp, 2Ch
.text:0040A7EF                 jmp     loc_40A8A0
.text:0040A7F4 ; ---------------------------------------------------------------------------
.text:0040A7F4
.text:0040A7F4 loc_40A7F4:                             ; CODE XREF: sub_40A790+32↑j
.text:0040A7F4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040A7F8                 mov     ecx, [esp+2Ch+var_14]
.text:0040A7FC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040A800                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040A804                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040A808                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040A80B                 call    GetDiskFreeSpaceA
.text:0040A810                 sub     esp, 14h
.text:0040A813                 mov     ebx, [esp+2Ch+var_10]
.text:0040A817                 mov     esi, [esp+2Ch+var_C]
.text:0040A81B                 mov     edi, [esp+2Ch+var_8]
.text:0040A81F                 mov     ebp, [esp+2Ch+var_4]
.text:0040A823                 add     esp, 2Ch
.text:0040A826                 retn
.text:0040A826 ; ---------------------------------------------------------------------------
.text:0040A827                 align 10h
.text:0040A830
.text:0040A830 loc_40A830:                             ; CODE XREF: .text:0040B30D↓p
.text:0040A830                 sub     esp, 1Ch
.text:0040A833                 mov     [esp+1Ch+var_4], esi
.text:0040A837                 mov     esi, [esp+1Ch+arg_0]
.text:0040A83B                 mov     [esp+1Ch+var_8], ebx
.text:0040A83F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040A842                 call    sub_409D70
.text:0040A847                 test    eax, eax
.text:0040A849                 mov     ebx, eax
.text:0040A84B                 jz      short loc_40A860
.text:0040A84D                 cmp     byte ptr [eax], 0
.text:0040A850                 jz      short loc_40A860
.text:0040A852                 test    esi, esi
.text:0040A854                 jz      short loc_40A860
.text:0040A856                 cmp     byte ptr [esi], 0
.text:0040A859                 jnz     short loc_40A886
.text:0040A85B                 nop
.text:0040A85C                 lea     esi, [esi+0]
.text:0040A860
.text:0040A860 loc_40A860:                             ; CODE XREF: sub_40A790+BB↑j
.text:0040A860                                         ; sub_40A790+C0↑j ...
.text:0040A860                 call    _errno
.text:0040A865                 mov     dword ptr [eax], 2
.text:0040A86B                 mov     esi, 0FFFFFFFFh
.text:0040A870
.text:0040A870 loc_40A870:                             ; CODE XREF: sub_40A790+108↓j
.text:0040A870                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040A873                 call    free
.text:0040A878                 mov     eax, esi
.text:0040A87A                 mov     ebx, [esp+1Ch+var_8]
.text:0040A87E                 mov     esi, [esp+1Ch+var_4]
.text:0040A882                 add     esp, 1Ch
.text:0040A885                 retn
.text:0040A886 ; ---------------------------------------------------------------------------
.text:0040A886
.text:0040A886 loc_40A886:                             ; CODE XREF: sub_40A790+C9↑j
.text:0040A886                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040A889                 mov     edx, [esp+1Ch+arg_4]
.text:0040A88D                 mov     [esp+1Ch+var_18], edx
.text:0040A891                 call    near ptr loc_40A1EB+5
.text:0040A896                 mov     esi, eax
.text:0040A898                 jmp     short loc_40A870
.text:0040A898 ; ---------------------------------------------------------------------------
.text:0040A89A                 align 10h
.text:0040A8A0
.text:0040A8A0 loc_40A8A0:                             ; CODE XREF: sub_40A790+5F↑j
.text:0040A8A0                 push    ebp
.text:0040A8A1                 push    edi
.text:0040A8A2                 push    esi
.text:0040A8A3                 push    ebx
.text:0040A8A4                 sub     esp, 8Ch
.text:0040A8AA                 mov     ebp, [esp+9Ch+arg_0]
.text:0040A8B1                 call    sub_40C900
.text:0040A8B6                 test    eax, eax
.text:0040A8B8                 jz      short loc_40A8C8
.text:0040A8BA                 call    sub_40C850
.text:0040A8BF                 cmp     eax, 0Bh
.text:0040A8C2                 jle     loc_40A9F0
.text:0040A8C8
.text:0040A8C8 loc_40A8C8:                             ; CODE XREF: sub_40A790+128↑j
.text:0040A8C8                 cld
.text:0040A8C9                 xor     eax, eax
.text:0040A8CB                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040A8CF                 mov     ecx, 7
.text:0040A8D4                 mov     edi, ebx
.text:0040A8D6                 lea     esi, [esp+9Ch+var_4C]
.text:0040A8DA                 rep stosd
.text:0040A8DC                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040A8E4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040A8EC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040A8F4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040A8FC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040A904                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040A90C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:0040A913                 call    CreateFileA
.text:0040A918                 sub     esp, 1Ch
.text:0040A91B                 mov     edi, eax
.text:0040A91D                 cmp     eax, 0FFFFFFFFh
.text:0040A920                 jz      short loc_40A995
.text:0040A922                 mov     [esp+9Ch+var_68], ebp
.text:0040A926                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040A92A                 mov     [esp+9Ch+var_5C], esi
.text:0040A92E                 mov     [esp+9Ch+var_60], 7303h
.text:0040A936                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040A93E                 mov     [esp+9Ch+var_54], 1
.text:0040A946                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040A94E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040A952                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040A95A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040A95E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040A966                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040A96A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040A972                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040A975                 call    DeviceIoControl
.text:0040A97A                 sub     esp, 20h
.text:0040A97D                 mov     esi, eax
.text:0040A97F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040A982                 call    CloseHandle
.text:0040A987                 sub     esp, 4
.text:0040A98A                 test    esi, esi
.text:0040A98C                 jz      short loc_40A995
.text:0040A98E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040A993                 jz      short loc_40A9B0
.text:0040A995
.text:0040A995 loc_40A995:                             ; CODE XREF: sub_40A790+190↑j
.text:0040A995                                         ; sub_40A790+1FC↑j
.text:0040A995                 call    sub_409BC0
.text:0040A99A                 mov     edi, eax
.text:0040A99C                 call    _errno
.text:0040A9A1                 mov     [eax], edi
.text:0040A9A3                 xor     eax, eax
.text:0040A9A5
.text:0040A9A5 loc_40A9A5:                             ; CODE XREF: sub_40A790+25A↓j
.text:0040A9A5                                         ; sub_40A790+297↓j
.text:0040A9A5                 add     esp, 8Ch
.text:0040A9AB                 pop     ebx
.text:0040A9AC                 pop     esi
.text:0040A9AD                 pop     edi
.text:0040A9AE                 pop     ebp
.text:0040A9AF                 retn
.text:0040A9B0 ; ---------------------------------------------------------------------------
.text:0040A9B0
.text:0040A9B0 loc_40A9B0:                             ; CODE XREF: sub_40A790+203↑j
.text:0040A9B0                 mov     edx, [esp+9Ch+var_48]
.text:0040A9B4                 mov     eax, 1
.text:0040A9B9                 mov     ebx, [esp+9Ch+arg_4]
.text:0040A9C0                 mov     ebp, [esp+9Ch+arg_8]
.text:0040A9C7                 mov     ecx, [esp+9Ch+arg_C]
.text:0040A9CE                 mov     [ebx], edx
.text:0040A9D0                 mov     edi, [esp+9Ch+var_44]
.text:0040A9D4                 mov     ebx, [esp+9Ch+arg_10]
.text:0040A9DB                 mov     [ebp+0], edi
.text:0040A9DE                 mov     esi, [esp+9Ch+var_40]
.text:0040A9E2                 mov     [ecx], esi
.text:0040A9E4                 mov     edx, [esp+9Ch+var_3C]
.text:0040A9E8                 mov     [ebx], edx
.text:0040A9EA                 jmp     short loc_40A9A5
.text:0040A9EA ; ---------------------------------------------------------------------------
.text:0040A9EC                 align 10h
.text:0040A9F0
.text:0040A9F0 loc_40A9F0:                             ; CODE XREF: sub_40A790+132↑j
.text:0040A9F0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040A9F3                 mov     eax, [esp+9Ch+arg_C]
.text:0040A9FA                 mov     ecx, [esp+9Ch+arg_10]
.text:0040AA01                 mov     edx, [esp+9Ch+arg_8]
.text:0040AA08                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040AA0C                 mov     eax, [esp+9Ch+arg_4]
.text:0040AA13                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040AA17                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040AA1B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040AA1F                 call    GetDiskFreeSpaceA
.text:0040AA24                 sub     esp, 14h
.text:0040AA27                 jmp     loc_40A9A5
.text:0040AA27 sub_40A790      endp ; sp-analysis failed
.text:0040AA27
.text:0040AA27 ; ---------------------------------------------------------------------------
.text:0040AA2C                 align 10h
.text:0040AA30
.text:0040AA30 ; =============== S U B R O U T I N E =======================================
.text:0040AA30
.text:0040AA30 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040AA30
.text:0040AA30 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040AA30 _win32_longpath proc near               ; CODE XREF: .text:0040B1F4↓p
.text:0040AA30
.text:0040AA30 C               = dword ptr -278h
.text:0040AA30 lpFindFileData  = dword ptr -274h
.text:0040AA30 Destination     = byte ptr -268h
.text:0040AA30 var_267         = byte ptr -267h
.text:0040AA30 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040AA30 lpFileName      = dword ptr  8
.text:0040AA30
.text:0040AA30                 push    ebp
.text:0040AA31                 xor     eax, eax
.text:0040AA33                 push    edi
.text:0040AA34                 push    esi
.text:0040AA35                 push    ebx
.text:0040AA36                 sub     esp, 26Ch
.text:0040AA3C                 mov     esi, [esp+278h+lpFileName]
.text:0040AA43                 lea     ebp, [esp+278h+Destination]
.text:0040AA47                 test    esi, esi
.text:0040AA49                 jz      loc_40ABA7
.text:0040AA4F                 movsx   edx, byte ptr [esi]
.text:0040AA52                 mov     [esp+278h+C], edx ; C
.text:0040AA55                 call    isalpha
.text:0040AA5A                 test    eax, eax
.text:0040AA5C                 jz      short loc_40AA6F
.text:0040AA5E                 mov     eax, [esp+278h+lpFileName]
.text:0040AA65                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040AA69                 jz      loc_40ADAB
.text:0040AA6F
.text:0040AA6F loc_40AA6F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040AA6F                 mov     edx, [esp+278h+lpFileName]
.text:0040AA76                 movzx   eax, byte ptr [edx]
.text:0040AA79                 cmp     al, 2Fh ; '/'
.text:0040AA7B                 jz      loc_40AC8B
.text:0040AA81                 cmp     al, 5Ch ; '\'
.text:0040AA83                 jz      loc_40AC8B
.text:0040AA89
.text:0040AA89 loc_40AA89:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040AA89                                         ; _win32_longpath+2B1↓j ...
.text:0040AA89                 mov     [ebp+268h+Destination], 0
.text:0040AA8D                 movzx   ebx, byte ptr [esi]
.text:0040AA90                 test    bl, bl
.text:0040AA92                 jz      loc_40AB89
.text:0040AA98                 nop
.text:0040AA99                 lea     esi, [esi+0]
.text:0040AAA0
.text:0040AAA0 loc_40AAA0:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040AAA0                 cmp     bl, 2Fh ; '/'
.text:0040AAA3                 jz      loc_40AC40
.text:0040AAA9                 cmp     bl, 5Ch ; '\'
.text:0040AAAC                 jz      loc_40AC40
.text:0040AAB2
.text:0040AAB2 loc_40AAB2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040AAB2                                         ; _win32_longpath+22C↓j ...
.text:0040AAB2                 cmp     bl, 2Eh ; '.'
.text:0040AAB5                 jz      loc_40ABE0
.text:0040AABB
.text:0040AABB loc_40AABB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040AABB                                         ; _win32_longpath+203↓j
.text:0040AABB                 test    bl, bl
.text:0040AABD                 jz      loc_40AB89
.text:0040AAC3                 cmp     bl, 2Fh ; '/'
.text:0040AAC6                 jz      short loc_40AAE2
.text:0040AAC8                 cmp     bl, 5Ch ; '\'
.text:0040AACB                 jz      short loc_40AAE2
.text:0040AACD                 lea     esi, [esi+0]
.text:0040AAD0
.text:0040AAD0 loc_40AAD0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040AAD0                 inc     esi
.text:0040AAD1                 movzx   ebx, byte ptr [esi]
.text:0040AAD4                 test    bl, bl
.text:0040AAD6                 jz      short loc_40AAE2
.text:0040AAD8                 cmp     bl, 2Fh ; '/'
.text:0040AADB                 jz      short loc_40AAE2
.text:0040AADD                 cmp     bl, 5Ch ; '\'
.text:0040AAE0                 jnz     short loc_40AAD0
.text:0040AAE2
.text:0040AAE2 loc_40AAE2:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040AAE2                                         ; _win32_longpath+9B↑j ...
.text:0040AAE2                 mov     byte ptr [esi], 0
.text:0040AAE5                 lea     edx, [esp+278h+FindFileData]
.text:0040AAEC                 mov     eax, [esp+278h+lpFileName]
.text:0040AAF3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040AAF7                 mov     [esp+278h+C], eax ; lpFileName
.text:0040AAFA                 call    FindFirstFileA
.text:0040AAFF                 mov     [esi], bl
.text:0040AB01                 sub     esp, 8
.text:0040AB04                 mov     edi, eax
.text:0040AB06                 cmp     eax, 0FFFFFFFFh
.text:0040AB09                 jz      loc_40ABCC
.text:0040AB0F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040AB16                 mov     ecx, ebx
.text:0040AB18                 nop
.text:0040AB19                 lea     esi, [esi+0]
.text:0040AB20
.text:0040AB20 loc_40AB20:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040AB20                 mov     eax, [ebx]
.text:0040AB22                 add     ebx, 4
.text:0040AB25                 lea     edx, [eax-1010101h]
.text:0040AB2B                 not     eax
.text:0040AB2D                 and     edx, eax
.text:0040AB2F                 and     edx, 80808080h
.text:0040AB35                 jz      short loc_40AB20
.text:0040AB37                 test    edx, 8080h
.text:0040AB3D                 jnz     short loc_40AB45
.text:0040AB3F                 shr     edx, 10h
.text:0040AB42                 add     ebx, 2
.text:0040AB45
.text:0040AB45 loc_40AB45:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040AB45                 add     dl, dl
.text:0040AB47                 sbb     ebx, 3
.text:0040AB4A                 sub     ebx, ecx
.text:0040AB4C                 lea     ecx, [esp+278h+Destination]
.text:0040AB50                 sub     ecx, ebp
.text:0040AB52                 add     ecx, 105h
.text:0040AB58                 cmp     ecx, ebx
.text:0040AB5A                 jle     short loc_40ABB2
.text:0040AB5C                 mov     [esp+278h+C], ebp ; Destination
.text:0040AB5F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040AB66                 add     ebp, ebx
.text:0040AB68                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040AB6C                 call    strcpy
.text:0040AB71                 mov     [esp+278h+C], edi ; hFindFile
.text:0040AB74                 call    FindClose
.text:0040AB79                 sub     esp, 4
.text:0040AB7C
.text:0040AB7C loc_40AB7C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040AB7C                 movzx   ecx, byte ptr [esi]
.text:0040AB7F                 test    cl, cl
.text:0040AB81                 mov     bl, cl
.text:0040AB83                 jnz     loc_40AAA0
.text:0040AB89
.text:0040AB89 loc_40AB89:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040AB89                                         ; _win32_longpath+8D↑j
.text:0040AB89                 mov     esi, [esp+278h+lpFileName]
.text:0040AB90                 lea     ebp, [esp+278h+Destination]
.text:0040AB94                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040AB98                 mov     [esp+278h+C], esi ; Destination
.text:0040AB9B                 call    strcpy
.text:0040ABA0                 mov     eax, [esp+278h+lpFileName]
.text:0040ABA7
.text:0040ABA7 loc_40ABA7:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040ABA7                                         ; _win32_longpath+19A↓j
.text:0040ABA7                 add     esp, 26Ch
.text:0040ABAD                 pop     ebx
.text:0040ABAE                 pop     esi
.text:0040ABAF                 pop     edi
.text:0040ABB0                 pop     ebp
.text:0040ABB1                 retn
.text:0040ABB2 ; ---------------------------------------------------------------------------
.text:0040ABB2
.text:0040ABB2 loc_40ABB2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040ABB2                 mov     [esp+278h+C], edi ; hFindFile
.text:0040ABB5                 call    FindClose
.text:0040ABBA                 sub     esp, 4
.text:0040ABBD                 call    _errno
.text:0040ABC2                 mov     dword ptr [eax], 22h ; '"'
.text:0040ABC8
.text:0040ABC8 loc_40ABC8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040ABC8                 xor     eax, eax
.text:0040ABCA                 jmp     short loc_40ABA7
.text:0040ABCC ; ---------------------------------------------------------------------------
.text:0040ABCC
.text:0040ABCC loc_40ABCC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040ABCC                 call    _errno
.text:0040ABD1                 mov     dword ptr [eax], 16h
.text:0040ABD7                 jmp     short loc_40ABC8
.text:0040ABD7 ; ---------------------------------------------------------------------------
.text:0040ABD9                 align 10h
.text:0040ABE0
.text:0040ABE0 loc_40ABE0:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040ABE0                 movzx   eax, byte ptr [esi+1]
.text:0040ABE4                 test    al, al
.text:0040ABE6                 jnz     short loc_40AC15
.text:0040ABE8
.text:0040ABE8 loc_40ABE8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040ABE8                                         ; _win32_longpath+1EB↓j ...
.text:0040ABE8                 test    bl, bl
.text:0040ABEA                 jz      short loc_40AC0C
.text:0040ABEC                 cmp     bl, 2Fh ; '/'
.text:0040ABEF                 jz      short loc_40AC0C
.text:0040ABF1                 cmp     bl, 5Ch ; '\'
.text:0040ABF4                 jz      short loc_40AC0C
.text:0040ABF6
.text:0040ABF6 loc_40ABF6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040ABF6                 mov     [ebp+268h+Destination], bl
.text:0040ABF9                 inc     esi
.text:0040ABFA                 inc     ebp
.text:0040ABFB                 movzx   ebx, byte ptr [esi]
.text:0040ABFE                 test    bl, bl
.text:0040AC00                 jz      short loc_40AC0C
.text:0040AC02                 cmp     bl, 2Fh ; '/'
.text:0040AC05                 jz      short loc_40AC0C
.text:0040AC07                 cmp     bl, 5Ch ; '\'
.text:0040AC0A                 jnz     short loc_40ABF6
.text:0040AC0C
.text:0040AC0C loc_40AC0C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040AC0C                                         ; _win32_longpath+1BF↑j ...
.text:0040AC0C                 mov     [ebp+268h+Destination], 0
.text:0040AC10                 jmp     loc_40AB7C
.text:0040AC15 ; ---------------------------------------------------------------------------
.text:0040AC15
.text:0040AC15 loc_40AC15:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040AC15                 cmp     al, 2Fh ; '/'
.text:0040AC17                 jz      short loc_40ABE8
.text:0040AC19                 cmp     al, 5Ch ; '\'
.text:0040AC1B                 jz      short loc_40ABE8
.text:0040AC1D                 cmp     al, 2Eh ; '.'
.text:0040AC1F                 jnz     loc_40AABB
.text:0040AC25                 movzx   eax, byte ptr [esi+2]
.text:0040AC29                 test    al, al
.text:0040AC2B                 jz      short loc_40ABE8
.text:0040AC2D                 cmp     al, 2Fh ; '/'
.text:0040AC2F                 jz      short loc_40ABE8
.text:0040AC31                 cmp     al, 5Ch ; '\'
.text:0040AC33                 jnz     loc_40AABB
.text:0040AC39                 jmp     short loc_40ABE8
.text:0040AC39 ; ---------------------------------------------------------------------------
.text:0040AC3B                 align 10h
.text:0040AC40
.text:0040AC40 loc_40AC40:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040AC40                                         ; _win32_longpath+7C↑j
.text:0040AC40                 mov     [ebp+268h+Destination], bl
.text:0040AC43                 inc     esi
.text:0040AC44                 inc     ebp
.text:0040AC45                 mov     [ebp+268h+Destination], 0
.text:0040AC49                 movzx   ebx, byte ptr [esi]
.text:0040AC4C                 test    bl, bl
.text:0040AC4E                 jz      loc_40AAB2
.text:0040AC54                 cmp     bl, 2Fh ; '/'
.text:0040AC57                 jz      short loc_40AC70
.text:0040AC59                 cmp     bl, 5Ch ; '\'
.text:0040AC5C                 jnz     loc_40AAB2
.text:0040AC62                 lea     esi, [esi+0]
.text:0040AC69                 lea     edi, [edi+0]
.text:0040AC70
.text:0040AC70 loc_40AC70:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040AC70                                         ; _win32_longpath+24F↓j ...
.text:0040AC70                 inc     esi
.text:0040AC71                 movzx   ebx, byte ptr [esi]
.text:0040AC74                 test    bl, bl
.text:0040AC76                 jz      loc_40AAB2
.text:0040AC7C                 cmp     bl, 2Fh ; '/'
.text:0040AC7F                 jz      short loc_40AC70
.text:0040AC81                 cmp     bl, 5Ch ; '\'
.text:0040AC84                 jz      short loc_40AC70
.text:0040AC86                 jmp     loc_40AAB2
.text:0040AC8B ; ---------------------------------------------------------------------------
.text:0040AC8B
.text:0040AC8B loc_40AC8B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040AC8B                                         ; _win32_longpath+53↑j
.text:0040AC8B                 mov     edi, [esp+278h+lpFileName]
.text:0040AC92                 movzx   edx, byte ptr [edi+1]
.text:0040AC96                 cmp     dl, 2Fh ; '/'
.text:0040AC99                 jz      short loc_40ACA4
.text:0040AC9B                 cmp     dl, 5Ch ; '\'
.text:0040AC9E                 jnz     loc_40AA89
.text:0040ACA4
.text:0040ACA4 loc_40ACA4:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040ACA4                 mov     esi, [esp+278h+lpFileName]
.text:0040ACAB                 mov     [ebp+268h+Destination], al
.text:0040ACAE                 mov     ecx, [esp+278h+lpFileName]
.text:0040ACB5                 inc     ebp
.text:0040ACB6                 add     esi, 2
.text:0040ACB9                 movzx   ebx, byte ptr [ecx+1]
.text:0040ACBD                 mov     [ebp+268h+Destination], bl
.text:0040ACC0                 inc     ebp
.text:0040ACC1                 movzx   eax, byte ptr [ecx+2]
.text:0040ACC5                 test    al, al
.text:0040ACC7                 jz      loc_40ADA3
.text:0040ACCD                 cmp     al, 2Fh ; '/'
.text:0040ACCF                 jz      loc_40AD88
.text:0040ACD5                 cmp     al, 5Ch ; '\'
.text:0040ACD7                 mov     bl, al
.text:0040ACD9                 jz      loc_40AD88
.text:0040ACDF
.text:0040ACDF loc_40ACDF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040ACDF                                         ; _win32_longpath+376↓j
.text:0040ACDF                 test    bl, bl
.text:0040ACE1                 jz      loc_40AA89
.text:0040ACE7                 cmp     bl, 2Fh ; '/'
.text:0040ACEA                 jz      short loc_40AD0B
.text:0040ACEC                 cmp     bl, 5Ch ; '\'
.text:0040ACEF                 jz      short loc_40AD0B
.text:0040ACF1
.text:0040ACF1 loc_40ACF1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040ACF1                 mov     [ebp+268h+Destination], bl
.text:0040ACF4                 inc     esi
.text:0040ACF5                 inc     ebp
.text:0040ACF6                 movzx   ebx, byte ptr [esi]
.text:0040ACF9                 test    bl, bl
.text:0040ACFB                 jz      loc_40AA89
.text:0040AD01                 cmp     bl, 2Fh ; '/'
.text:0040AD04                 jz      short loc_40AD0B
.text:0040AD06                 cmp     bl, 5Ch ; '\'
.text:0040AD09                 jnz     short loc_40ACF1
.text:0040AD0B
.text:0040AD0B loc_40AD0B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040AD0B                                         ; _win32_longpath+2BF↑j ...
.text:0040AD0B                 test    bl, bl
.text:0040AD0D                 jz      loc_40AA89
.text:0040AD13                 mov     [ebp+268h+Destination], bl
.text:0040AD16                 inc     esi
.text:0040AD17                 inc     ebp
.text:0040AD18                 movzx   ebx, byte ptr [esi]
.text:0040AD1B                 test    bl, bl
.text:0040AD1D                 jz      loc_40AA89
.text:0040AD23                 cmp     bl, 2Fh ; '/'
.text:0040AD26                 jz      short loc_40AD70
.text:0040AD28                 cmp     bl, 5Ch ; '\'
.text:0040AD2B                 jz      short loc_40AD70
.text:0040AD2D
.text:0040AD2D loc_40AD2D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040AD2D                 test    bl, bl
.text:0040AD2F                 jz      loc_40AA89
.text:0040AD35                 cmp     bl, 2Fh ; '/'
.text:0040AD38                 jz      loc_40AA89
.text:0040AD3E                 cmp     bl, 5Ch ; '\'
.text:0040AD41                 jz      loc_40AA89
.text:0040AD47
.text:0040AD47 loc_40AD47:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040AD47                 mov     [ebp+268h+Destination], bl
.text:0040AD4A                 inc     esi
.text:0040AD4B                 inc     ebp
.text:0040AD4C                 movzx   ebx, byte ptr [esi]
.text:0040AD4F                 test    bl, bl
.text:0040AD51                 jz      loc_40AA89
.text:0040AD57                 cmp     bl, 2Fh ; '/'
.text:0040AD5A                 jz      loc_40AA89
.text:0040AD60                 cmp     bl, 5Ch ; '\'
.text:0040AD63                 jnz     short loc_40AD47
.text:0040AD65                 jmp     loc_40AA89
.text:0040AD65 ; ---------------------------------------------------------------------------
.text:0040AD6A                 align 10h
.text:0040AD70
.text:0040AD70 loc_40AD70:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040AD70                                         ; _win32_longpath+2FB↑j ...
.text:0040AD70                 inc     esi
.text:0040AD71                 movzx   ebx, byte ptr [esi]
.text:0040AD74                 test    bl, bl
.text:0040AD76                 jz      loc_40AA89
.text:0040AD7C                 cmp     bl, 2Fh ; '/'
.text:0040AD7F                 jz      short loc_40AD70
.text:0040AD81                 cmp     bl, 5Ch ; '\'
.text:0040AD84                 jz      short loc_40AD70
.text:0040AD86                 jmp     short loc_40AD2D
.text:0040AD88 ; ---------------------------------------------------------------------------
.text:0040AD88
.text:0040AD88 loc_40AD88:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040AD88                                         ; _win32_longpath+2A9↑j ...
.text:0040AD88                 inc     esi
.text:0040AD89                 movzx   ebx, byte ptr [esi]
.text:0040AD8C                 test    bl, bl
.text:0040AD8E                 jz      loc_40AA89
.text:0040AD94                 cmp     bl, 2Fh ; '/'
.text:0040AD97                 jz      short loc_40AD88
.text:0040AD99                 cmp     bl, 5Ch ; '\'
.text:0040AD9C                 jz      short loc_40AD88
.text:0040AD9E                 jmp     loc_40ACDF
.text:0040ADA3 ; ---------------------------------------------------------------------------
.text:0040ADA3
.text:0040ADA3 loc_40ADA3:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040ADA3                 movzx   ebx, byte ptr [esi]
.text:0040ADA6                 jmp     loc_40ACDF
.text:0040ADAB ; ---------------------------------------------------------------------------
.text:0040ADAB
.text:0040ADAB loc_40ADAB:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040ADAB                 movzx   ecx, byte ptr [eax]
.text:0040ADAE                 mov     esi, eax
.text:0040ADB0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040ADB5                 add     esi, 2
.text:0040ADB8                 lea     ebp, [esp+12h]
.text:0040ADBC                 mov     [esp+278h+Destination], cl
.text:0040ADC0                 jmp     loc_40AA89
.text:0040ADC0 _win32_longpath endp
.text:0040ADC0
.text:0040ADC0 ; ---------------------------------------------------------------------------
.text:0040ADC5                 align 10h
.text:0040ADD0                 sub     esp, 0Ch
.text:0040ADD3                 mov     edx, [esp+10h]
.text:0040ADD7                 mov     dword ptr [esp+4], 0
.text:0040ADDF                 mov     [esp], edx
.text:0040ADE2                 call    sub_407AA0
.text:0040ADE7                 inc     eax
.text:0040ADE8                 setnz   dl
.text:0040ADEB                 add     esp, 0Ch
.text:0040ADEE                 movzx   eax, dl
.text:0040ADF1                 retn
.text:0040ADF1 ; ---------------------------------------------------------------------------
.text:0040ADF2                 align 10h
.text:0040AE00
.text:0040AE00 ; =============== S U B R O U T I N E =======================================
.text:0040AE00
.text:0040AE00
.text:0040AE00 sub_40AE00      proc near               ; CODE XREF: sub_409820+B4↑p
.text:0040AE00                                         ; sub_409C30+AA↑p
.text:0040AE00
.text:0040AE00 arg_0           = dword ptr  4
.text:0040AE00
.text:0040AE00                 mov     ecx, [esp+arg_0]
.text:0040AE04                 mov     edx, ecx
.text:0040AE06                 movzx   eax, byte ptr [ecx]
.text:0040AE09                 test    al, al
.text:0040AE0B                 jz      short loc_40AE1C
.text:0040AE0D                 lea     esi, [esi+0]
.text:0040AE10
.text:0040AE10 loc_40AE10:                             ; CODE XREF: sub_40AE00+1A↓j
.text:0040AE10                 cmp     al, 5Ch ; '\'
.text:0040AE12                 jz      short loc_40AE20
.text:0040AE14
.text:0040AE14 loc_40AE14:                             ; CODE XREF: sub_40AE00+23↓j
.text:0040AE14                 inc     edx
.text:0040AE15                 movzx   eax, byte ptr [edx]
.text:0040AE18                 test    al, al
.text:0040AE1A                 jnz     short loc_40AE10
.text:0040AE1C
.text:0040AE1C loc_40AE1C:                             ; CODE XREF: sub_40AE00+B↑j
.text:0040AE1C                 mov     eax, ecx
.text:0040AE1E                 retn
.text:0040AE1E ; ---------------------------------------------------------------------------
.text:0040AE1F                 align 10h
.text:0040AE20
.text:0040AE20 loc_40AE20:                             ; CODE XREF: sub_40AE00+12↑j
.text:0040AE20                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040AE23                 jmp     short loc_40AE14
.text:0040AE23 sub_40AE00      endp
.text:0040AE23
.text:0040AE23 ; ---------------------------------------------------------------------------
.text:0040AE25                 align 10h
.text:0040AE30                 push    ebx
.text:0040AE31                 sub     esp, 8
.text:0040AE34                 mov     ebx, [esp+14h]
.text:0040AE38                 mov     edx, [esp+10h]
.text:0040AE3C                 mov     [esp], ebx
.text:0040AE3F                 mov     [esp+4], edx
.text:0040AE43                 call    strcpy
.text:0040AE48                 movzx   eax, byte ptr [ebx]
.text:0040AE4B                 mov     edx, ebx
.text:0040AE4D                 test    al, al
.text:0040AE4F                 jz      short loc_40AE6C
.text:0040AE51                 jmp     short loc_40AE60
.text:0040AE51 ; ---------------------------------------------------------------------------
.text:0040AE53                 align 10h
.text:0040AE60
.text:0040AE60 loc_40AE60:                             ; CODE XREF: .text:0040AE51↑j
.text:0040AE60                                         ; .text:0040AE6A↓j
.text:0040AE60                 cmp     al, 5Ch ; '\'
.text:0040AE62                 jz      short loc_40AE73
.text:0040AE64
.text:0040AE64 loc_40AE64:                             ; CODE XREF: .text:0040AE76↓j
.text:0040AE64                 inc     edx
.text:0040AE65                 movzx   eax, byte ptr [edx]
.text:0040AE68                 test    al, al
.text:0040AE6A                 jnz     short loc_40AE60
.text:0040AE6C
.text:0040AE6C loc_40AE6C:                             ; CODE XREF: .text:0040AE4F↑j
.text:0040AE6C                 add     esp, 8
.text:0040AE6F                 xor     eax, eax
.text:0040AE71                 pop     ebx
.text:0040AE72                 retn
.text:0040AE73 ; ---------------------------------------------------------------------------
.text:0040AE73
.text:0040AE73 loc_40AE73:                             ; CODE XREF: .text:0040AE62↑j
.text:0040AE73                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040AE76                 jmp     short loc_40AE64
.text:0040AE76 ; ---------------------------------------------------------------------------
.text:0040AE78                 align 10h
.text:0040AE80
.text:0040AE80 ; =============== S U B R O U T I N E =======================================
.text:0040AE80
.text:0040AE80
.text:0040AE80 sub_40AE80      proc near               ; CODE XREF: sub_408370+16↑p
.text:0040AE80                                         ; sub_408870+1F↑p ...
.text:0040AE80
.text:0040AE80 arg_0           = dword ptr  4
.text:0040AE80
.text:0040AE80                 mov     ecx, [esp+arg_0]
.text:0040AE84                 mov     edx, ecx
.text:0040AE86                 movzx   eax, byte ptr [ecx]
.text:0040AE89                 test    al, al
.text:0040AE8B                 jz      short loc_40AE9C
.text:0040AE8D                 lea     esi, [esi+0]
.text:0040AE90
.text:0040AE90 loc_40AE90:                             ; CODE XREF: sub_40AE80+1A↓j
.text:0040AE90                 cmp     al, 2Fh ; '/'
.text:0040AE92                 jz      short loc_40AEA0
.text:0040AE94
.text:0040AE94 loc_40AE94:                             ; CODE XREF: sub_40AE80+23↓j
.text:0040AE94                 inc     edx
.text:0040AE95                 movzx   eax, byte ptr [edx]
.text:0040AE98                 test    al, al
.text:0040AE9A                 jnz     short loc_40AE90
.text:0040AE9C
.text:0040AE9C loc_40AE9C:                             ; CODE XREF: sub_40AE80+B↑j
.text:0040AE9C                 mov     eax, ecx
.text:0040AE9E                 retn
.text:0040AE9E ; ---------------------------------------------------------------------------
.text:0040AE9F                 align 10h
.text:0040AEA0
.text:0040AEA0 loc_40AEA0:                             ; CODE XREF: sub_40AE80+12↑j
.text:0040AEA0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AEA3                 jmp     short loc_40AE94
.text:0040AEA3 sub_40AE80      endp
.text:0040AEA3
.text:0040AEA3 ; ---------------------------------------------------------------------------
.text:0040AEA5                 align 10h
.text:0040AEB0                 push    ebx
.text:0040AEB1                 sub     esp, 8
.text:0040AEB4                 mov     ebx, [esp+14h]
.text:0040AEB8                 mov     edx, [esp+10h]
.text:0040AEBC                 mov     [esp], ebx
.text:0040AEBF                 mov     [esp+4], edx
.text:0040AEC3                 call    strcpy
.text:0040AEC8                 movzx   eax, byte ptr [ebx]
.text:0040AECB                 mov     edx, ebx
.text:0040AECD                 test    al, al
.text:0040AECF                 jz      short loc_40AEEC
.text:0040AED1                 jmp     short loc_40AEE0
.text:0040AED1 ; ---------------------------------------------------------------------------
.text:0040AED3                 align 10h
.text:0040AEE0
.text:0040AEE0 loc_40AEE0:                             ; CODE XREF: .text:0040AED1↑j
.text:0040AEE0                                         ; .text:0040AEEA↓j
.text:0040AEE0                 cmp     al, 2Fh ; '/'
.text:0040AEE2                 jz      short loc_40AEF3
.text:0040AEE4
.text:0040AEE4 loc_40AEE4:                             ; CODE XREF: .text:0040AEF6↓j
.text:0040AEE4                 inc     edx
.text:0040AEE5                 movzx   eax, byte ptr [edx]
.text:0040AEE8                 test    al, al
.text:0040AEEA                 jnz     short loc_40AEE0
.text:0040AEEC
.text:0040AEEC loc_40AEEC:                             ; CODE XREF: .text:0040AECF↑j
.text:0040AEEC                 add     esp, 8
.text:0040AEEF                 xor     eax, eax
.text:0040AEF1                 pop     ebx
.text:0040AEF2                 retn
.text:0040AEF3 ; ---------------------------------------------------------------------------
.text:0040AEF3
.text:0040AEF3 loc_40AEF3:                             ; CODE XREF: .text:0040AEE2↑j
.text:0040AEF3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AEF6                 jmp     short loc_40AEE4
.text:0040AEF6 ; ---------------------------------------------------------------------------
.text:0040AEF8                 align 10h
.text:0040AF00                 push    ebx
.text:0040AF01                 sub     esp, 8
.text:0040AF04                 mov     ebx, [esp+14h]
.text:0040AF08                 mov     edx, [esp+10h]
.text:0040AF0C                 mov     [esp+4], ebx
.text:0040AF10                 mov     [esp], edx
.text:0040AF13                 call    sub_409BE0
.text:0040AF18                 movzx   eax, byte ptr [ebx]
.text:0040AF1B                 mov     edx, ebx
.text:0040AF1D                 test    al, al
.text:0040AF1F                 jz      short loc_40AF3C
.text:0040AF21                 jmp     short loc_40AF30
.text:0040AF21 ; ---------------------------------------------------------------------------
.text:0040AF23                 align 10h
.text:0040AF30
.text:0040AF30 loc_40AF30:                             ; CODE XREF: .text:0040AF21↑j
.text:0040AF30                                         ; .text:0040AF3A↓j
.text:0040AF30                 cmp     al, 2Fh ; '/'
.text:0040AF32                 jz      short loc_40AF43
.text:0040AF34
.text:0040AF34 loc_40AF34:                             ; CODE XREF: .text:0040AF46↓j
.text:0040AF34                 inc     edx
.text:0040AF35                 movzx   eax, byte ptr [edx]
.text:0040AF38                 test    al, al
.text:0040AF3A                 jnz     short loc_40AF30
.text:0040AF3C
.text:0040AF3C loc_40AF3C:                             ; CODE XREF: .text:0040AF1F↑j
.text:0040AF3C                 add     esp, 8
.text:0040AF3F                 xor     eax, eax
.text:0040AF41                 pop     ebx
.text:0040AF42                 retn
.text:0040AF43 ; ---------------------------------------------------------------------------
.text:0040AF43
.text:0040AF43 loc_40AF43:                             ; CODE XREF: .text:0040AF32↑j
.text:0040AF43                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AF46                 jmp     short loc_40AF34
.text:0040AF46 ; ---------------------------------------------------------------------------
.text:0040AF48                 align 10h
.text:0040AF50                 push    ebx
.text:0040AF51                 sub     esp, 8
.text:0040AF54                 mov     ebx, [esp+14h]
.text:0040AF58                 mov     edx, [esp+10h]
.text:0040AF5C                 mov     [esp], ebx
.text:0040AF5F                 mov     [esp+4], edx
.text:0040AF63                 call    sub_409BE0
.text:0040AF68                 movzx   eax, byte ptr [ebx]
.text:0040AF6B                 mov     edx, ebx
.text:0040AF6D                 test    al, al
.text:0040AF6F                 jz      short loc_40AF8C
.text:0040AF71                 jmp     short loc_40AF80
.text:0040AF71 ; ---------------------------------------------------------------------------
.text:0040AF73                 align 10h
.text:0040AF80
.text:0040AF80 loc_40AF80:                             ; CODE XREF: .text:0040AF71↑j
.text:0040AF80                                         ; .text:0040AF8A↓j
.text:0040AF80                 cmp     al, 5Ch ; '\'
.text:0040AF82                 jz      short loc_40AF91
.text:0040AF84
.text:0040AF84 loc_40AF84:                             ; CODE XREF: .text:0040AF94↓j
.text:0040AF84                 inc     edx
.text:0040AF85                 movzx   eax, byte ptr [edx]
.text:0040AF88                 test    al, al
.text:0040AF8A                 jnz     short loc_40AF80
.text:0040AF8C
.text:0040AF8C loc_40AF8C:                             ; CODE XREF: .text:0040AF6F↑j
.text:0040AF8C                 add     esp, 8
.text:0040AF8F                 pop     ebx
.text:0040AF90                 retn
.text:0040AF91 ; ---------------------------------------------------------------------------
.text:0040AF91
.text:0040AF91 loc_40AF91:                             ; CODE XREF: .text:0040AF82↑j
.text:0040AF91                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040AF94                 jmp     short loc_40AF84
.text:0040AF94 ; ---------------------------------------------------------------------------
.text:0040AF96                 align 10h
.text:0040AFA0
.text:0040AFA0 ; =============== S U B R O U T I N E =======================================
.text:0040AFA0
.text:0040AFA0
.text:0040AFA0 ; int __cdecl sub_40AFA0(LPSTR)
.text:0040AFA0 sub_40AFA0      proc near               ; CODE XREF: .text:0040B02E↓p
.text:0040AFA0                                         ; .text:0040B06E↓p ...
.text:0040AFA0
.text:0040AFA0 hModule         = dword ptr -1Ch
.text:0040AFA0 lpFilename      = dword ptr -18h
.text:0040AFA0 nSize           = dword ptr -14h
.text:0040AFA0 arg_0           = dword ptr  4
.text:0040AFA0
.text:0040AFA0                 push    esi
.text:0040AFA1                 push    ebx
.text:0040AFA2                 sub     esp, 14h
.text:0040AFA5                 mov     esi, [esp+1Ch+arg_0]
.text:0040AFA9                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040AFB1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040AFB8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040AFBC                 call    GetModuleFileNameA
.text:0040AFC1                 sub     esp, 0Ch
.text:0040AFC4                 test    eax, eax
.text:0040AFC6                 jz      short loc_40B008
.text:0040AFC8                 cmp     eax, 104h
.text:0040AFCD                 jg      short loc_40AFF9
.text:0040AFCF
.text:0040AFCF loc_40AFCF:                             ; CODE XREF: sub_40AFA0+66↓j
.text:0040AFCF                                         ; sub_40AFA0+78↓j
.text:0040AFCF                 movzx   eax, byte ptr [esi]
.text:0040AFD2                 mov     edx, esi
.text:0040AFD4                 test    al, al
.text:0040AFD6                 jz      short loc_40AFEC
.text:0040AFD8                 nop
.text:0040AFD9                 lea     esi, [esi+0]
.text:0040AFE0
.text:0040AFE0 loc_40AFE0:                             ; CODE XREF: sub_40AFA0+4A↓j
.text:0040AFE0                 cmp     al, 5Ch ; '\'
.text:0040AFE2                 jz      short loc_40AFF4
.text:0040AFE4
.text:0040AFE4 loc_40AFE4:                             ; CODE XREF: sub_40AFA0+57↓j
.text:0040AFE4                 inc     edx
.text:0040AFE5                 movzx   eax, byte ptr [edx]
.text:0040AFE8                 test    al, al
.text:0040AFEA                 jnz     short loc_40AFE0
.text:0040AFEC
.text:0040AFEC loc_40AFEC:                             ; CODE XREF: sub_40AFA0+36↑j
.text:0040AFEC                 add     esp, 14h
.text:0040AFEF                 mov     eax, esi
.text:0040AFF1                 pop     ebx
.text:0040AFF2                 pop     esi
.text:0040AFF3                 retn
.text:0040AFF4 ; ---------------------------------------------------------------------------
.text:0040AFF4
.text:0040AFF4 loc_40AFF4:                             ; CODE XREF: sub_40AFA0+42↑j
.text:0040AFF4                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040AFF7                 jmp     short loc_40AFE4
.text:0040AFF9 ; ---------------------------------------------------------------------------
.text:0040AFF9
.text:0040AFF9 loc_40AFF9:                             ; CODE XREF: sub_40AFA0+2D↑j
.text:0040AFF9                 call    _errno
.text:0040AFFE                 mov     dword ptr [eax], 26h ; '&'
.text:0040B004                 xor     esi, esi
.text:0040B006                 jmp     short loc_40AFCF
.text:0040B008 ; ---------------------------------------------------------------------------
.text:0040B008
.text:0040B008 loc_40B008:                             ; CODE XREF: sub_40AFA0+26↑j
.text:0040B008                 call    sub_409BC0
.text:0040B00D                 mov     ebx, eax
.text:0040B00F                 xor     esi, esi
.text:0040B011                 call    _errno
.text:0040B016                 mov     [eax], ebx
.text:0040B018                 jmp     short loc_40AFCF
.text:0040B018 sub_40AFA0      endp
.text:0040B018
.text:0040B018 ; ---------------------------------------------------------------------------
.text:0040B01A                 align 10h
.text:0040B020                 sub     esp, 0Ch
.text:0040B023                 mov     [esp+8], ebx
.text:0040B027                 mov     ebx, [esp+10h]
.text:0040B02B                 mov     [esp], ebx
.text:0040B02E                 call    sub_40AFA0
.text:0040B033                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B03B                 mov     [esp], ebx
.text:0040B03E                 call    strrchr
.text:0040B043                 test    eax, eax
.text:0040B045                 jz      short loc_40B04A
.text:0040B047                 lea     ebx, [eax+1]
.text:0040B04A
.text:0040B04A loc_40B04A:                             ; CODE XREF: .text:0040B045↑j
.text:0040B04A                 mov     eax, ebx
.text:0040B04C                 mov     ebx, [esp+8]
.text:0040B050                 add     esp, 0Ch
.text:0040B053                 retn
.text:0040B053 ; ---------------------------------------------------------------------------
.text:0040B054                 align 10h
.text:0040B060                 sub     esp, 0Ch
.text:0040B063                 mov     [esp+8], ebx
.text:0040B067                 mov     ebx, [esp+10h]
.text:0040B06B                 mov     [esp], ebx
.text:0040B06E                 call    sub_40AFA0
.text:0040B073                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B07B                 mov     [esp], ebx
.text:0040B07E                 call    strrchr
.text:0040B083                 test    eax, eax
.text:0040B085                 jz      short loc_40B08A
.text:0040B087                 mov     byte ptr [eax], 0
.text:0040B08A
.text:0040B08A loc_40B08A:                             ; CODE XREF: .text:0040B085↑j
.text:0040B08A                 mov     eax, ebx
.text:0040B08C                 mov     ebx, [esp+8]
.text:0040B090                 add     esp, 0Ch
.text:0040B093                 retn
.text:0040B093 ; ---------------------------------------------------------------------------
.text:0040B094                 align 10h
.text:0040B0A0                 sub     esp, 0Ch
.text:0040B0A3                 mov     [esp+8], ebx
.text:0040B0A7                 mov     ebx, [esp+10h]
.text:0040B0AB                 mov     [esp], ebx
.text:0040B0AE                 call    sub_40AFA0
.text:0040B0B3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B0BB                 mov     [esp], ebx
.text:0040B0BE                 call    strrchr
.text:0040B0C3                 test    eax, eax
.text:0040B0C5                 jz      short loc_40B0CA
.text:0040B0C7                 mov     byte ptr [eax], 0
.text:0040B0CA
.text:0040B0CA loc_40B0CA:                             ; CODE XREF: .text:0040B0C5↑j
.text:0040B0CA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B0D2                 mov     [esp], ebx
.text:0040B0D5                 call    strrchr
.text:0040B0DA                 test    eax, eax
.text:0040B0DC                 jz      short loc_40B0E1
.text:0040B0DE                 mov     byte ptr [eax], 0
.text:0040B0E1
.text:0040B0E1 loc_40B0E1:                             ; CODE XREF: .text:0040B0DC↑j
.text:0040B0E1                 mov     eax, ebx
.text:0040B0E3                 mov     ebx, [esp+8]
.text:0040B0E7                 add     esp, 0Ch
.text:0040B0EA                 retn
.text:0040B0EA ; ---------------------------------------------------------------------------
.text:0040B0EB                 align 10h
.text:0040B0F0                 sub     esp, 1Ch
.text:0040B0F3                 mov     edx, [esp+20h]
.text:0040B0F7                 mov     [esp+10h], ebx
.text:0040B0FB                 xor     ebx, ebx
.text:0040B0FD                 mov     [esp+14h], esi
.text:0040B101                 mov     [esp+18h], edi
.text:0040B105                 mov     [esp], edx
.text:0040B108                 call    sub_409C10
.text:0040B10D                 mov     edx, [esp+24h]
.text:0040B111                 mov     edi, eax
.text:0040B113                 mov     [esp], edx
.text:0040B116                 call    sub_409C10
.text:0040B11B                 mov     [esp+4], eax
.text:0040B11F                 mov     esi, eax
.text:0040B121                 mov     [esp], edi
.text:0040B124                 call    _stricmp_0
.text:0040B129                 mov     [esp], edi
.text:0040B12C                 test    eax, eax
.text:0040B12E                 setz    bl
.text:0040B131                 call    free
.text:0040B136                 mov     [esp], esi
.text:0040B139                 call    free
.text:0040B13E                 mov     eax, ebx
.text:0040B140                 mov     esi, [esp+14h]
.text:0040B144                 mov     ebx, [esp+10h]
.text:0040B148                 mov     edi, [esp+18h]
.text:0040B14C                 add     esp, 1Ch
.text:0040B14F                 retn
.text:0040B150 ; ---------------------------------------------------------------------------
.text:0040B150                 xor     eax, eax
.text:0040B152                 retn
.text:0040B152 ; ---------------------------------------------------------------------------
.text:0040B153 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040B187↓o
.text:0040B160 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040B196↓o
.text:0040B170 ; ---------------------------------------------------------------------------
.text:0040B170                 sub     esp, 1Ch
.text:0040B173                 mov     [esp+10h], ebx
.text:0040B177                 mov     ebx, [esp+20h]
.text:0040B17B                 mov     [esp+18h], edi
.text:0040B17F                 mov     edi, [esp+24h]
.text:0040B183                 mov     [esp+14h], esi
.text:0040B187                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040B18E                 call    GetModuleHandleA
.text:0040B193                 sub     esp, 4
.text:0040B196                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040B19E                 mov     [esp], eax
.text:0040B1A1                 call    GetProcAddress
.text:0040B1A6                 sub     esp, 8
.text:0040B1A9                 test    eax, eax
.text:0040B1AB                 jz      short loc_40B1C3
.text:0040B1AD                 mov     dword ptr [esp+8], 104h
.text:0040B1B5                 mov     [esp+4], ebx
.text:0040B1B9                 mov     [esp], edi
.text:0040B1BC                 call    eax
.text:0040B1BE                 sub     esp, 0Ch
.text:0040B1C1                 mov     esi, eax
.text:0040B1C3
.text:0040B1C3 loc_40B1C3:                             ; CODE XREF: .text:0040B1AB↑j
.text:0040B1C3                 test    esi, esi
.text:0040B1C5                 jz      short loc_40B1E0
.text:0040B1C7
.text:0040B1C7 loc_40B1C7:                             ; CODE XREF: .text:0040B1FB↓j
.text:0040B1C7                 mov     eax, ebx
.text:0040B1C9                 mov     esi, [esp+14h]
.text:0040B1CD                 mov     ebx, [esp+10h]
.text:0040B1D1                 mov     edi, [esp+18h]
.text:0040B1D5                 add     esp, 1Ch
.text:0040B1D8                 retn
.text:0040B1D8 ; ---------------------------------------------------------------------------
.text:0040B1D9                 align 10h
.text:0040B1E0
.text:0040B1E0 loc_40B1E0:                             ; CODE XREF: .text:0040B1C5↑j
.text:0040B1E0                 call    sub_40C900
.text:0040B1E5                 mov     [esp], ebx
.text:0040B1E8                 mov     [esp+4], edi
.text:0040B1EC                 call    strcpy
.text:0040B1F1                 mov     [esp], ebx
.text:0040B1F4                 call    _win32_longpath
.text:0040B1F9                 mov     ebx, eax
.text:0040B1FB                 jmp     short loc_40B1C7
.text:0040B1FB ; ---------------------------------------------------------------------------
.text:0040B1FD                 align 10h
.text:0040B200                 sub     esp, 1Ch
.text:0040B203                 mov     [esp+18h], edi
.text:0040B207                 mov     edi, [esp+20h]
.text:0040B20B                 mov     [esp+10h], ebx
.text:0040B20F                 mov     [esp+14h], esi
.text:0040B213                 mov     dword ptr [esp+8], 0
.text:0040B21B                 mov     dword ptr [esp+4], 0
.text:0040B223                 mov     [esp], edi
.text:0040B226                 call    GetShortPathNameA
.text:0040B22B                 sub     esp, 0Ch
.text:0040B22E                 mov     ebx, eax
.text:0040B230                 test    eax, eax
.text:0040B232                 jz      short loc_40B280
.text:0040B234                 lea     edx, [eax+1]
.text:0040B237                 mov     [esp], edx
.text:0040B23A                 call    malloc
.text:0040B23F                 test    eax, eax
.text:0040B241                 mov     esi, eax
.text:0040B243                 jz      short loc_40B280
.text:0040B245                 mov     [esp+8], ebx
.text:0040B249                 mov     [esp+4], eax
.text:0040B24D                 mov     [esp], edi
.text:0040B250                 call    GetShortPathNameA
.text:0040B255                 sub     esp, 0Ch
.text:0040B258                 mov     edx, esi
.text:0040B25A                 test    eax, eax
.text:0040B25C                 jz      short loc_40B272
.text:0040B25E                 mov     esi, esi
.text:0040B260
.text:0040B260 loc_40B260:                             ; CODE XREF: .text:0040B290↓j
.text:0040B260                 mov     ebx, [esp+10h]
.text:0040B264                 mov     eax, edx
.text:0040B266                 mov     esi, [esp+14h]
.text:0040B26A                 mov     edi, [esp+18h]
.text:0040B26E                 add     esp, 1Ch
.text:0040B271                 retn
.text:0040B272 ; ---------------------------------------------------------------------------
.text:0040B272
.text:0040B272 loc_40B272:                             ; CODE XREF: .text:0040B25C↑j
.text:0040B272                 mov     [esp], esi
.text:0040B275                 call    free
.text:0040B27A                 lea     esi, [esi+0]
.text:0040B280
.text:0040B280 loc_40B280:                             ; CODE XREF: .text:0040B232↑j
.text:0040B280                                         ; .text:0040B243↑j
.text:0040B280                 call    sub_409BC0
.text:0040B285                 mov     esi, eax
.text:0040B287                 call    _errno
.text:0040B28C                 mov     [eax], esi
.text:0040B28E                 mov     edx, edi
.text:0040B290                 jmp     short loc_40B260
.text:0040B290 ; ---------------------------------------------------------------------------
.text:0040B292                 align 10h
.text:0040B2A0 aNotset         db 'notset',0           ; DATA XREF: .data:off_410070↓o
.text:0040B2A0                                         ; .data:off_410074↓o
.text:0040B2A7 ; ---------------------------------------------------------------------------
.text:0040B2A7
.text:0040B2A7 loc_40B2A7:                             ; DATA XREF: .text:loc_40B345↓o
.text:0040B2A7                 jb      short loc_40B320
.text:0040B2A9                 add     [eax], ah
.text:0040B2AB                 or      [eax], eax
.text:0040B2AD
.text:0040B2AD loc_40B2AD:                             ; DATA XREF: .text:0040B398↓o
.text:0040B2AD                                         ; .text:0040B3FE↓o ...
.text:0040B2AD                 add     [eax], ah
.text:0040B2AF                 and     eax, 64252064h
.text:0040B2B4                 and     [eax], al
.text:0040B2B6                 lea     esi, [esi+0]
.text:0040B2B9                 lea     edi, [edi+0]
.text:0040B2C0                 push    ebp
.text:0040B2C1                 push    edi
.text:0040B2C2                 push    esi
.text:0040B2C3                 push    ebx
.text:0040B2C4                 sub     esp, 14Ch
.text:0040B2CA                 mov     edx, off_410070 ; "notset"
.text:0040B2D0                 mov     edi, [esp+164h]
.text:0040B2D7                 mov     ebp, [esp+168h]
.text:0040B2DE                 mov     [esp+4], edx
.text:0040B2E2                 mov     edx, off_410074 ; "notset"
.text:0040B2E8                 mov     [esp], edx
.text:0040B2EB                 call    strcmp
.text:0040B2F0                 test    eax, eax
.text:0040B2F2                 jz      loc_40B6E0
.text:0040B2F8
.text:0040B2F8 loc_40B2F8:                             ; CODE XREF: .text:0040B72C↓j
.text:0040B2F8                 lea     ebx, [esp+20h]
.text:0040B2FC                 lea     esi, [esi+0]
.text:0040B300
.text:0040B300 loc_40B300:                             ; CODE XREF: .text:0040B336↓j
.text:0040B300                 mov     [esp+4], ebx
.text:0040B304                 mov     ecx, off_410074 ; "notset"
.text:0040B30A                 mov     [esp], ecx
.text:0040B30D                 call    loc_40A830
.text:0040B312                 test    eax, eax
.text:0040B314                 jns     short loc_40B345
.text:0040B316                 mov     eax, off_410074 ; "notset"
.text:0040B31B                 cmp     byte ptr [eax], 0
.text:0040B31E                 jz      short loc_40B338
.text:0040B320
.text:0040B320 loc_40B320:                             ; CODE XREF: .text:loc_40B2A7↑j
.text:0040B320                 mov     dword ptr [esp+4], 0
.text:0040B328                 mov     [esp], eax
.text:0040B32B                 call    strchr
.text:0040B330                 inc     eax
.text:0040B331                 mov     off_410074, eax ; "notset"
.text:0040B336                 jmp     short loc_40B300
.text:0040B338 ; ---------------------------------------------------------------------------
.text:0040B338
.text:0040B338 loc_40B338:                             ; CODE XREF: .text:0040B31E↑j
.text:0040B338                 xor     eax, eax
.text:0040B33A
.text:0040B33A loc_40B33A:                             ; CODE XREF: .text:0040B4FC↓j
.text:0040B33A                 add     esp, 14Ch
.text:0040B340                 pop     ebx
.text:0040B341                 pop     esi
.text:0040B342                 pop     edi
.text:0040B343                 pop     ebp
.text:0040B344                 retn
.text:0040B345 ; ---------------------------------------------------------------------------
.text:0040B345
.text:0040B345 loc_40B345:                             ; CODE XREF: .text:0040B314↑j
.text:0040B345                 mov     dword ptr [edi+0Ch], offset loc_40B2A7
.text:0040B34C                 lea     ecx, [esp+0D6h]
.text:0040B353                 lea     edx, [esp+6Ch]
.text:0040B357                 mov     [edi+4], ecx
.text:0040B35A                 lea     ebx, [esp+7Ch]
.text:0040B35E                 mov     [edi+8], edx
.text:0040B361                 mov     [edi], ebx
.text:0040B363                 mov     [esp], ebp
.text:0040B366                 mov     [esp+4], edi
.text:0040B36A                 call    ___addmntentstr
.text:0040B36F                 mov     [esp], ebp
.text:0040B372                 mov     dword ptr [esp+4], 40B2AAh
.text:0040B37A                 call    strspn
.text:0040B37F                 mov     dword ptr [esp+4], 0
.text:0040B387                 mov     ebx, off_410074 ; "notset"
.text:0040B38D                 lea     esi, [eax+ebp]
.text:0040B390                 mov     [esp+1Ch], esi
.text:0040B394                 lea     ebp, [esp+1Ch]
.text:0040B398                 mov     esi, offset loc_40B2AD
.text:0040B39D                 mov     [esp], ebx
.text:0040B3A0                 call    strchr
.text:0040B3A5                 mov     dword ptr [esp+4], 40B2AAh
.text:0040B3AD                 inc     eax
.text:0040B3AE                 mov     off_410074, eax ; "notset"
.text:0040B3B3                 mov     [esp], ebp
.text:0040B3B6                 call    sub_40CC20
.text:0040B3BB                 test    eax, eax
.text:0040B3BD                 mov     ebx, eax
.text:0040B3BF                 jz      short loc_40B3E8
.text:0040B3C1                 mov     edx, eax
.text:0040B3C3                 mov     ecx, eax
.text:0040B3C5                 lea     esi, [esi+0]
.text:0040B3C9                 lea     edi, [edi+0]
.text:0040B3D0
.text:0040B3D0 loc_40B3D0:                             ; CODE XREF: .text:0040B3E6↓j
.text:0040B3D0                 movzx   eax, byte ptr [edx]
.text:0040B3D3                 cmp     al, 5Ch ; '\'
.text:0040B3D5                 jz      loc_40B684
.text:0040B3DB
.text:0040B3DB loc_40B3DB:                             ; CODE XREF: .text:0040B68C↓j
.text:0040B3DB                                         ; .text:0040B69A↓j ...
.text:0040B3DB                 mov     [ecx], al
.text:0040B3DD
.text:0040B3DD loc_40B3DD:                             ; CODE XREF: .text:0040B6AE↓j
.text:0040B3DD                 inc     ecx
.text:0040B3DE
.text:0040B3DE loc_40B3DE:                             ; CODE XREF: .text:0040B6C6↓j
.text:0040B3DE                 movzx   eax, byte ptr [edx]
.text:0040B3E1                 mov     esi, ebx
.text:0040B3E3                 inc     edx
.text:0040B3E4                 test    al, al
.text:0040B3E6                 jnz     short loc_40B3D0
.text:0040B3E8
.text:0040B3E8 loc_40B3E8:                             ; CODE XREF: .text:0040B3BF↑j
.text:0040B3E8                 mov     [edi], esi
.text:0040B3EA                 mov     eax, [esp+1Ch]
.text:0040B3EE                 test    eax, eax
.text:0040B3F0                 jnz     loc_40B66B
.text:0040B3F6
.text:0040B3F6 loc_40B3F6:                             ; CODE XREF: .text:0040B67F↓j
.text:0040B3F6                 mov     dword ptr [esp+4], 40B2AAh
.text:0040B3FE                 mov     esi, offset loc_40B2AD
.text:0040B403                 mov     [esp], ebp
.text:0040B406                 call    sub_40CC20
.text:0040B40B                 test    eax, eax
.text:0040B40D                 mov     ebx, eax
.text:0040B40F                 jz      short loc_40B438
.text:0040B411                 mov     edx, eax
.text:0040B413                 mov     ecx, eax
.text:0040B415                 lea     esi, [esi+0]
.text:0040B419                 lea     edi, [edi+0]
.text:0040B420
.text:0040B420 loc_40B420:                             ; CODE XREF: .text:0040B436↓j
.text:0040B420                 movzx   eax, byte ptr [edx]
.text:0040B423                 cmp     al, 5Ch ; '\'
.text:0040B425                 jz      loc_40B613
.text:0040B42B
.text:0040B42B loc_40B42B:                             ; CODE XREF: .text:0040B61B↓j
.text:0040B42B                                         ; .text:0040B629↓j ...
.text:0040B42B                 mov     [ecx], al
.text:0040B42D
.text:0040B42D loc_40B42D:                             ; CODE XREF: .text:0040B63D↓j
.text:0040B42D                 inc     ecx
.text:0040B42E
.text:0040B42E loc_40B42E:                             ; CODE XREF: .text:0040B655↓j
.text:0040B42E                 movzx   eax, byte ptr [edx]
.text:0040B431                 mov     esi, ebx
.text:0040B433                 inc     edx
.text:0040B434                 test    al, al
.text:0040B436                 jnz     short loc_40B420
.text:0040B438
.text:0040B438 loc_40B438:                             ; CODE XREF: .text:0040B40F↑j
.text:0040B438                 mov     [edi+4], esi
.text:0040B43B                 mov     eax, [esp+1Ch]
.text:0040B43F                 test    eax, eax
.text:0040B441                 jnz     loc_40B5FA
.text:0040B447
.text:0040B447 loc_40B447:                             ; CODE XREF: .text:0040B60E↓j
.text:0040B447                 mov     dword ptr [esp+4], 40B2AAh
.text:0040B44F                 mov     esi, offset loc_40B2AD
.text:0040B454                 mov     [esp], ebp
.text:0040B457                 call    sub_40CC20
.text:0040B45C                 test    eax, eax
.text:0040B45E                 mov     ebx, eax
.text:0040B460                 jz      short loc_40B488
.text:0040B462                 mov     edx, eax
.text:0040B464                 mov     ecx, eax
.text:0040B466                 lea     esi, [esi+0]
.text:0040B469                 lea     edi, [edi+0]
.text:0040B470
.text:0040B470 loc_40B470:                             ; CODE XREF: .text:0040B486↓j
.text:0040B470                 movzx   eax, byte ptr [edx]
.text:0040B473                 cmp     al, 5Ch ; '\'
.text:0040B475                 jz      loc_40B5A2
.text:0040B47B
.text:0040B47B loc_40B47B:                             ; CODE XREF: .text:0040B5AA↓j
.text:0040B47B                                         ; .text:0040B5B8↓j ...
.text:0040B47B                 mov     [ecx], al
.text:0040B47D
.text:0040B47D loc_40B47D:                             ; CODE XREF: .text:0040B5CC↓j
.text:0040B47D                 inc     ecx
.text:0040B47E
.text:0040B47E loc_40B47E:                             ; CODE XREF: .text:0040B5E4↓j
.text:0040B47E                 movzx   eax, byte ptr [edx]
.text:0040B481                 mov     esi, ebx
.text:0040B483                 inc     edx
.text:0040B484                 test    al, al
.text:0040B486                 jnz     short loc_40B470
.text:0040B488
.text:0040B488 loc_40B488:                             ; CODE XREF: .text:0040B460↑j
.text:0040B488                 mov     [edi+8], esi
.text:0040B48B                 mov     eax, [esp+1Ch]
.text:0040B48F                 test    eax, eax
.text:0040B491                 jnz     loc_40B589
.text:0040B497
.text:0040B497 loc_40B497:                             ; CODE XREF: .text:0040B59D↓j
.text:0040B497                 mov     dword ptr [esp+4], 40B2AAh
.text:0040B49F                 mov     esi, offset loc_40B2AD
.text:0040B4A4                 mov     [esp], ebp
.text:0040B4A7                 call    sub_40CC20
.text:0040B4AC                 test    eax, eax
.text:0040B4AE                 mov     ebx, eax
.text:0040B4B0                 jz      short loc_40B4D4
.text:0040B4B2                 mov     edx, eax
.text:0040B4B4                 mov     ecx, eax
.text:0040B4B6                 lea     esi, [esi+0]
.text:0040B4B9                 lea     edi, [edi+0]
.text:0040B4C0
.text:0040B4C0 loc_40B4C0:                             ; CODE XREF: .text:0040B4D2↓j
.text:0040B4C0                 movzx   eax, byte ptr [edx]
.text:0040B4C3                 cmp     al, 5Ch ; '\'
.text:0040B4C5                 jz      short loc_40B535
.text:0040B4C7
.text:0040B4C7 loc_40B4C7:                             ; CODE XREF: .text:0040B53D↓j
.text:0040B4C7                                         ; .text:0040B547↓j ...
.text:0040B4C7                 mov     [ecx], al
.text:0040B4C9
.text:0040B4C9 loc_40B4C9:                             ; CODE XREF: .text:0040B55B↓j
.text:0040B4C9                 inc     ecx
.text:0040B4CA
.text:0040B4CA loc_40B4CA:                             ; CODE XREF: .text:0040B573↓j
.text:0040B4CA                 movzx   eax, byte ptr [edx]
.text:0040B4CD                 mov     esi, ebx
.text:0040B4CF                 inc     edx
.text:0040B4D0                 test    al, al
.text:0040B4D2                 jnz     short loc_40B4C0
.text:0040B4D4
.text:0040B4D4 loc_40B4D4:                             ; CODE XREF: .text:0040B4B0↑j
.text:0040B4D4                 mov     [edi+0Ch], esi
.text:0040B4D7                 xor     eax, eax
.text:0040B4D9                 mov     edx, [esp+1Ch]
.text:0040B4DD                 test    edx, edx
.text:0040B4DF                 jnz     short loc_40B515
.text:0040B4E1
.text:0040B4E1 loc_40B4E1:                             ; CODE XREF: .text:0040B533↓j
.text:0040B4E1                 cmp     eax, 1
.text:0040B4E4                 jz      short loc_40B50C
.text:0040B4E6                 cmp     eax, 1
.text:0040B4E9                 jle     short loc_40B501
.text:0040B4EB
.text:0040B4EB loc_40B4EB:                             ; CODE XREF: .text:0040B503↓j
.text:0040B4EB                                         ; .text:0040B513↓j
.text:0040B4EB                 mov     edx, [esp+160h]
.text:0040B4F2                 mov     [esp], edx
.text:0040B4F5                 call    sub_40CBC0
.text:0040B4FA                 mov     eax, edi
.text:0040B4FC                 jmp     loc_40B33A
.text:0040B501 ; ---------------------------------------------------------------------------
.text:0040B501
.text:0040B501 loc_40B501:                             ; CODE XREF: .text:0040B4E9↑j
.text:0040B501                 test    eax, eax
.text:0040B503                 jnz     short loc_40B4EB
.text:0040B505                 mov     dword ptr [edi+10h], 0
.text:0040B50C
.text:0040B50C loc_40B50C:                             ; CODE XREF: .text:0040B4E4↑j
.text:0040B50C                 mov     dword ptr [edi+14h], 0
.text:0040B513                 jmp     short loc_40B4EB
.text:0040B515 ; ---------------------------------------------------------------------------
.text:0040B515
.text:0040B515 loc_40B515:                             ; CODE XREF: .text:0040B4DF↑j
.text:0040B515                 mov     dword ptr [esp+4], 40B2AEh
.text:0040B51D                 lea     esi, [edi+14h]
.text:0040B520                 lea     ebp, [edi+10h]
.text:0040B523                 mov     [esp+0Ch], esi
.text:0040B527                 mov     [esp+8], ebp
.text:0040B52B                 mov     [esp], edx
.text:0040B52E                 call    sscanf
.text:0040B533                 jmp     short loc_40B4E1
.text:0040B535 ; ---------------------------------------------------------------------------
.text:0040B535
.text:0040B535 loc_40B535:                             ; CODE XREF: .text:0040B4C5↑j
.text:0040B535                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B539                 jz      short loc_40B578
.text:0040B53B
.text:0040B53B loc_40B53B:                             ; CODE XREF: .text:0040B57C↓j
.text:0040B53B                                         ; .text:0040B582↓j
.text:0040B53B                 cmp     al, 5Ch ; '\'
.text:0040B53D                 jnz     short loc_40B4C7
.text:0040B53F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B543                 jz      short loc_40B560
.text:0040B545
.text:0040B545 loc_40B545:                             ; CODE XREF: .text:0040B564↓j
.text:0040B545                                         ; .text:0040B56A↓j
.text:0040B545                 cmp     al, 5Ch ; '\'
.text:0040B547                 jnz     loc_40B4C7
.text:0040B54D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040B551                 jnz     loc_40B4C7
.text:0040B557                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040B55A                 inc     edx
.text:0040B55B                 jmp     loc_40B4C9
.text:0040B560 ; ---------------------------------------------------------------------------
.text:0040B560
.text:0040B560 loc_40B560:                             ; CODE XREF: .text:0040B543↑j
.text:0040B560                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040B564                 jnz     short loc_40B545
.text:0040B566                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040B56A                 jnz     short loc_40B545
.text:0040B56C                 mov     byte ptr [ecx], 9
.text:0040B56F
.text:0040B56F loc_40B56F:                             ; CODE XREF: .text:0040B587↓j
.text:0040B56F                 inc     ecx
.text:0040B570                 add     edx, 3
.text:0040B573                 jmp     loc_40B4CA
.text:0040B578 ; ---------------------------------------------------------------------------
.text:0040B578
.text:0040B578 loc_40B578:                             ; CODE XREF: .text:0040B539↑j
.text:0040B578                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040B57C                 jnz     short loc_40B53B
.text:0040B57E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040B582                 jnz     short loc_40B53B
.text:0040B584                 mov     byte ptr [ecx], 20h ; ' '
.text:0040B587                 jmp     short loc_40B56F
.text:0040B589 ; ---------------------------------------------------------------------------
.text:0040B589
.text:0040B589 loc_40B589:                             ; CODE XREF: .text:0040B491↑j
.text:0040B589                 mov     dword ptr [esp+4], 40B2AAh
.text:0040B591                 mov     [esp], eax
.text:0040B594                 call    strspn
.text:0040B599                 add     [esp+1Ch], eax
.text:0040B59D                 jmp     loc_40B497
.text:0040B5A2 ; ---------------------------------------------------------------------------
.text:0040B5A2
.text:0040B5A2 loc_40B5A2:                             ; CODE XREF: .text:0040B475↑j
.text:0040B5A2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B5A6                 jz      short loc_40B5E9
.text:0040B5A8
.text:0040B5A8 loc_40B5A8:                             ; CODE XREF: .text:0040B5ED↓j
.text:0040B5A8                                         ; .text:0040B5F3↓j
.text:0040B5A8                 cmp     al, 5Ch ; '\'
.text:0040B5AA                 jnz     loc_40B47B
.text:0040B5B0                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B5B4                 jz      short loc_40B5D1
.text:0040B5B6
.text:0040B5B6 loc_40B5B6:                             ; CODE XREF: .text:0040B5D5↓j
.text:0040B5B6                                         ; .text:0040B5DB↓j
.text:0040B5B6                 cmp     al, 5Ch ; '\'
.text:0040B5B8                 jnz     loc_40B47B
.text:0040B5BE                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040B5C2                 jnz     loc_40B47B
.text:0040B5C8                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040B5CB                 inc     edx
.text:0040B5CC                 jmp     loc_40B47D
.text:0040B5D1 ; ---------------------------------------------------------------------------
.text:0040B5D1
.text:0040B5D1 loc_40B5D1:                             ; CODE XREF: .text:0040B5B4↑j
.text:0040B5D1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040B5D5                 jnz     short loc_40B5B6
.text:0040B5D7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040B5DB                 jnz     short loc_40B5B6
.text:0040B5DD                 mov     byte ptr [ecx], 9
.text:0040B5E0
.text:0040B5E0 loc_40B5E0:                             ; CODE XREF: .text:0040B5F8↓j
.text:0040B5E0                 inc     ecx
.text:0040B5E1                 add     edx, 3
.text:0040B5E4                 jmp     loc_40B47E
.text:0040B5E9 ; ---------------------------------------------------------------------------
.text:0040B5E9
.text:0040B5E9 loc_40B5E9:                             ; CODE XREF: .text:0040B5A6↑j
.text:0040B5E9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040B5ED                 jnz     short loc_40B5A8
.text:0040B5EF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040B5F3                 jnz     short loc_40B5A8
.text:0040B5F5                 mov     byte ptr [ecx], 20h ; ' '
.text:0040B5F8                 jmp     short loc_40B5E0
.text:0040B5FA ; ---------------------------------------------------------------------------
.text:0040B5FA
.text:0040B5FA loc_40B5FA:                             ; CODE XREF: .text:0040B441↑j
.text:0040B5FA                 mov     dword ptr [esp+4], 40B2AAh
.text:0040B602                 mov     [esp], eax
.text:0040B605                 call    strspn
.text:0040B60A                 add     [esp+1Ch], eax
.text:0040B60E                 jmp     loc_40B447
.text:0040B613 ; ---------------------------------------------------------------------------
.text:0040B613
.text:0040B613 loc_40B613:                             ; CODE XREF: .text:0040B425↑j
.text:0040B613                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B617                 jz      short loc_40B65A
.text:0040B619
.text:0040B619 loc_40B619:                             ; CODE XREF: .text:0040B65E↓j
.text:0040B619                                         ; .text:0040B664↓j
.text:0040B619                 cmp     al, 5Ch ; '\'
.text:0040B61B                 jnz     loc_40B42B
.text:0040B621                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B625                 jz      short loc_40B642
.text:0040B627
.text:0040B627 loc_40B627:                             ; CODE XREF: .text:0040B646↓j
.text:0040B627                                         ; .text:0040B64C↓j
.text:0040B627                 cmp     al, 5Ch ; '\'
.text:0040B629                 jnz     loc_40B42B
.text:0040B62F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040B633                 jnz     loc_40B42B
.text:0040B639                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040B63C                 inc     edx
.text:0040B63D                 jmp     loc_40B42D
.text:0040B642 ; ---------------------------------------------------------------------------
.text:0040B642
.text:0040B642 loc_40B642:                             ; CODE XREF: .text:0040B625↑j
.text:0040B642                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040B646                 jnz     short loc_40B627
.text:0040B648                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040B64C                 jnz     short loc_40B627
.text:0040B64E                 mov     byte ptr [ecx], 9
.text:0040B651
.text:0040B651 loc_40B651:                             ; CODE XREF: .text:0040B669↓j
.text:0040B651                 inc     ecx
.text:0040B652                 add     edx, 3
.text:0040B655                 jmp     loc_40B42E
.text:0040B65A ; ---------------------------------------------------------------------------
.text:0040B65A
.text:0040B65A loc_40B65A:                             ; CODE XREF: .text:0040B617↑j
.text:0040B65A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040B65E                 jnz     short loc_40B619
.text:0040B660                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040B664                 jnz     short loc_40B619
.text:0040B666                 mov     byte ptr [ecx], 20h ; ' '
.text:0040B669                 jmp     short loc_40B651
.text:0040B66B ; ---------------------------------------------------------------------------
.text:0040B66B
.text:0040B66B loc_40B66B:                             ; CODE XREF: .text:0040B3F0↑j
.text:0040B66B                 mov     dword ptr [esp+4], 40B2AAh
.text:0040B673                 mov     [esp], eax
.text:0040B676                 call    strspn
.text:0040B67B                 add     [esp+1Ch], eax
.text:0040B67F                 jmp     loc_40B3F6
.text:0040B684 ; ---------------------------------------------------------------------------
.text:0040B684
.text:0040B684 loc_40B684:                             ; CODE XREF: .text:0040B3D5↑j
.text:0040B684                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B688                 jz      short loc_40B6CB
.text:0040B68A
.text:0040B68A loc_40B68A:                             ; CODE XREF: .text:0040B6CF↓j
.text:0040B68A                                         ; .text:0040B6D5↓j
.text:0040B68A                 cmp     al, 5Ch ; '\'
.text:0040B68C                 jnz     loc_40B3DB
.text:0040B692                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040B696                 jz      short loc_40B6B3
.text:0040B698
.text:0040B698 loc_40B698:                             ; CODE XREF: .text:0040B6B7↓j
.text:0040B698                                         ; .text:0040B6BD↓j
.text:0040B698                 cmp     al, 5Ch ; '\'
.text:0040B69A                 jnz     loc_40B3DB
.text:0040B6A0                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040B6A4                 jnz     loc_40B3DB
.text:0040B6AA                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040B6AD                 inc     edx
.text:0040B6AE                 jmp     loc_40B3DD
.text:0040B6B3 ; ---------------------------------------------------------------------------
.text:0040B6B3
.text:0040B6B3 loc_40B6B3:                             ; CODE XREF: .text:0040B696↑j
.text:0040B6B3                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040B6B7                 jnz     short loc_40B698
.text:0040B6B9                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040B6BD                 jnz     short loc_40B698
.text:0040B6BF                 mov     byte ptr [ecx], 9
.text:0040B6C2
.text:0040B6C2 loc_40B6C2:                             ; CODE XREF: .text:0040B6DA↓j
.text:0040B6C2                 inc     ecx
.text:0040B6C3                 add     edx, 3
.text:0040B6C6                 jmp     loc_40B3DE
.text:0040B6CB ; ---------------------------------------------------------------------------
.text:0040B6CB
.text:0040B6CB loc_40B6CB:                             ; CODE XREF: .text:0040B688↑j
.text:0040B6CB                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040B6CF                 jnz     short loc_40B68A
.text:0040B6D1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040B6D5                 jnz     short loc_40B68A
.text:0040B6D7                 mov     byte ptr [ecx], 20h ; ' '
.text:0040B6DA                 jmp     short loc_40B6C2
.text:0040B6DA ; ---------------------------------------------------------------------------
.text:0040B6DC                 align 10h
.text:0040B6E0
.text:0040B6E0 loc_40B6E0:                             ; CODE XREF: .text:0040B2F2↑j
.text:0040B6E0                 mov     dword ptr [esp+4], 0
.text:0040B6E8                 mov     dword ptr [esp], 0
.text:0040B6EF                 call    GetLogicalDriveStringsA
.text:0040B6F4                 sub     esp, 8
.text:0040B6F7                 mov     ebx, eax
.text:0040B6F9                 call    GetProcessHeap
.text:0040B6FE                 mov     [esp], eax
.text:0040B701                 mov     [esp+8], ebx
.text:0040B705                 mov     dword ptr [esp+4], 0
.text:0040B70D                 call    HeapAlloc
.text:0040B712                 sub     esp, 0Ch
.text:0040B715                 mov     esi, eax
.text:0040B717                 mov     [esp+4], eax
.text:0040B71B                 mov     [esp], ebx
.text:0040B71E                 call    GetLogicalDriveStringsA
.text:0040B723                 mov     off_410074, esi ; "notset"
.text:0040B729                 sub     esp, 8
.text:0040B72C                 jmp     loc_40B2F8
.text:0040B72C ; ---------------------------------------------------------------------------
.text:0040B731 ; const char aSSSSDD[]
.text:0040B731 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040B731                                         ; DATA XREF: .text:0040B870↓o
.text:0040B731                                         ; ___addmntentstr+F0↓o
.text:0040B744                 align 10h
.text:0040B750                 push    esi
.text:0040B751                 push    ebx
.text:0040B752                 sub     esp, 44h
.text:0040B755                 mov     ebx, [esp+54h]
.text:0040B759                 mov     esi, [esp+50h]
.text:0040B75D                 mov     edx, [ebx]
.text:0040B75F                 mov     [esp+20h], edx
.text:0040B763                 mov     ecx, [ebx+4]
.text:0040B766                 mov     [esp+24h], ecx
.text:0040B76A                 mov     edx, [ebx+8]
.text:0040B76D                 mov     [esp+28h], edx
.text:0040B771                 mov     ecx, [ebx+0Ch]
.text:0040B774                 mov     [esp+2Ch], ecx
.text:0040B778                 mov     edx, [ebx+10h]
.text:0040B77B                 mov     [esp+30h], edx
.text:0040B77F                 mov     ecx, [ebx+14h]
.text:0040B782                 mov     dword ptr [esp+8], 2
.text:0040B78A                 mov     dword ptr [esp+4], 0
.text:0040B792                 mov     [esp+34h], ecx
.text:0040B796                 mov     [esp], esi
.text:0040B799                 call    sub_40CBB0
.text:0040B79E ; ---------------------------------------------------------------------------
.text:0040B79E                 test    eax, eax
.text:0040B7A0                 mov     edx, 1
.text:0040B7A5                 jnz     loc_40B8A5
.text:0040B7AB                 mov     ebx, [esp+20h]
.text:0040B7AF                 mov     edx, ebx
.text:0040B7B1                 movzx   eax, byte ptr [ebx]
.text:0040B7B4                 test    al, al
.text:0040B7B6                 jz      short loc_40B7E0
.text:0040B7B8                 nop
.text:0040B7B9                 lea     esi, [esi+0]
.text:0040B7C0
.text:0040B7C0 loc_40B7C0:                             ; CODE XREF: .text:0040B7DE↓j
.text:0040B7C0                 cmp     al, 20h ; ' '
.text:0040B7C2                 jz      loc_40BA1A
.text:0040B7C8                 cmp     al, 9
.text:0040B7CA                 jz      loc_40BA1A
.text:0040B7D0                 cmp     al, 5Ch ; '\'
.text:0040B7D2                 jz      loc_40BA1A
.text:0040B7D8                 inc     ebx
.text:0040B7D9                 movzx   eax, byte ptr [ebx]
.text:0040B7DC                 test    al, al
.text:0040B7DE                 jnz     short loc_40B7C0
.text:0040B7E0
.text:0040B7E0 loc_40B7E0:                             ; CODE XREF: .text:0040B7B6↑j
.text:0040B7E0                                         ; .text:0040BA1C↓j ...
.text:0040B7E0                 mov     ebx, [esp+24h]
.text:0040B7E4                 mov     edx, ebx
.text:0040B7E6                 movzx   eax, byte ptr [ebx]
.text:0040B7E9                 test    al, al
.text:0040B7EB                 jz      short loc_40B810
.text:0040B7ED                 lea     esi, [esi+0]
.text:0040B7F0
.text:0040B7F0 loc_40B7F0:                             ; CODE XREF: .text:0040B80E↓j
.text:0040B7F0                 cmp     al, 20h ; ' '
.text:0040B7F2                 jz      loc_40B99A
.text:0040B7F8                 cmp     al, 9
.text:0040B7FA                 jz      loc_40B99A
.text:0040B800                 cmp     al, 5Ch ; '\'
.text:0040B802                 jz      loc_40B99A
.text:0040B808                 inc     ebx
.text:0040B809                 movzx   eax, byte ptr [ebx]
.text:0040B80C                 test    al, al
.text:0040B80E                 jnz     short loc_40B7F0
.text:0040B810
.text:0040B810 loc_40B810:                             ; CODE XREF: .text:0040B7EB↑j
.text:0040B810                                         ; .text:0040B99C↓j ...
.text:0040B810                 mov     ebx, [esp+28h]
.text:0040B814                 mov     edx, ebx
.text:0040B816                 movzx   eax, byte ptr [ebx]
.text:0040B819                 test    al, al
.text:0040B81B                 jz      short loc_40B840
.text:0040B81D                 lea     esi, [esi+0]
.text:0040B820
.text:0040B820 loc_40B820:                             ; CODE XREF: .text:0040B83E↓j
.text:0040B820                 cmp     al, 20h ; ' '
.text:0040B822                 jz      loc_40B91E
.text:0040B828                 cmp     al, 9
.text:0040B82A                 jz      loc_40B91E
.text:0040B830                 cmp     al, 5Ch ; '\'
.text:0040B832                 jz      loc_40B91E
.text:0040B838                 inc     ebx
.text:0040B839                 movzx   eax, byte ptr [ebx]
.text:0040B83C                 test    al, al
.text:0040B83E                 jnz     short loc_40B820
.text:0040B840
.text:0040B840 loc_40B840:                             ; CODE XREF: .text:0040B81B↑j
.text:0040B840                                         ; .text:0040B920↓j ...
.text:0040B840                 mov     edx, [esp+2Ch]
.text:0040B844                 mov     ebx, edx
.text:0040B846                 movzx   eax, byte ptr [edx]
.text:0040B849                 test    al, al
.text:0040B84B                 jz      short loc_40B864
.text:0040B84D                 lea     esi, [esi+0]
.text:0040B850
.text:0040B850 loc_40B850:                             ; CODE XREF: .text:0040B862↓j
.text:0040B850                 cmp     al, 20h ; ' '
.text:0040B852                 jz      short loc_40B8AD
.text:0040B854                 cmp     al, 9
.text:0040B856                 jz      short loc_40B8AD
.text:0040B858                 cmp     al, 5Ch ; '\'
.text:0040B85A                 jz      short loc_40B8AD
.text:0040B85C                 inc     ebx
.text:0040B85D                 movzx   eax, byte ptr [ebx]
.text:0040B860                 test    al, al
.text:0040B862                 jnz     short loc_40B850
.text:0040B864
.text:0040B864 loc_40B864:                             ; CODE XREF: .text:0040B84B↑j
.text:0040B864                                         ; .text:0040B8AF↓j ...
.text:0040B864                 mov     [esp+14h], edx
.text:0040B868                 mov     ecx, [esp+34h]
.text:0040B86C                 mov     ebx, [esp+30h]
.text:0040B870                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040B878                 mov     edx, [esp+24h]
.text:0040B87C                 mov     [esp+1Ch], ecx
.text:0040B880                 mov     ecx, [esp+28h]
.text:0040B884                 mov     [esp+18h], ebx
.text:0040B888                 mov     ebx, [esp+20h]
.text:0040B88C                 mov     [esp+0Ch], edx
.text:0040B890                 mov     [esp+10h], ecx
.text:0040B894                 mov     [esp+8], ebx
.text:0040B898                 mov     [esp], esi
.text:0040B89B                 call    fprintf
.text:0040B8A0                 mov     edx, eax
.text:0040B8A2                 shr     edx, 1Fh
.text:0040B8A5
.text:0040B8A5 loc_40B8A5:                             ; CODE XREF: .text:0040B7A5↑j
.text:0040B8A5                 add     esp, 44h
.text:0040B8A8                 mov     eax, edx
.text:0040B8AA                 pop     ebx
.text:0040B8AB                 pop     esi
.text:0040B8AC                 retn
.text:0040B8AD ; ---------------------------------------------------------------------------
.text:0040B8AD
.text:0040B8AD loc_40B8AD:                             ; CODE XREF: .text:0040B852↑j
.text:0040B8AD                                         ; .text:0040B856↑j ...
.text:0040B8AD                 test    al, al
.text:0040B8AF                 jz      short loc_40B864
.text:0040B8B1                 mov     [esp], edx
.text:0040B8B4                 mov     ebx, edx
.text:0040B8B6                 call    strlen
.text:0040B8BB                 lea     edx, ds:1[eax*4]
.text:0040B8C2                 mov     [esp], edx
.text:0040B8C5                 call    malloc
.text:0040B8CA                 mov     [esp+2Ch], eax
.text:0040B8CE                 mov     edx, eax
.text:0040B8D0
.text:0040B8D0 loc_40B8D0:                             ; CODE XREF: .text:0040B8E8↓j
.text:0040B8D0                 movzx   eax, byte ptr [ebx]
.text:0040B8D3                 cmp     al, 20h ; ' '
.text:0040B8D5                 jz      short loc_40B90D
.text:0040B8D7                 cmp     al, 9
.text:0040B8D9                 jz      short loc_40B8FC
.text:0040B8DB                 cmp     al, 5Ch ; '\'
.text:0040B8DD                 jz      short loc_40B8F3
.text:0040B8DF                 mov     [edx], al
.text:0040B8E1
.text:0040B8E1 loc_40B8E1:                             ; CODE XREF: .text:0040B8FA↓j
.text:0040B8E1                                         ; .text:0040B90B↓j ...
.text:0040B8E1                 movzx   ecx, byte ptr [ebx]
.text:0040B8E4                 inc     edx
.text:0040B8E5                 inc     ebx
.text:0040B8E6                 test    cl, cl
.text:0040B8E8                 jnz     short loc_40B8D0
.text:0040B8EA                 mov     edx, [esp+2Ch]
.text:0040B8EE                 jmp     loc_40B864
.text:0040B8F3 ; ---------------------------------------------------------------------------
.text:0040B8F3
.text:0040B8F3 loc_40B8F3:                             ; CODE XREF: .text:0040B8DD↑j
.text:0040B8F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B8F6                 inc     edx
.text:0040B8F7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B8FA                 jmp     short loc_40B8E1
.text:0040B8FC ; ---------------------------------------------------------------------------
.text:0040B8FC
.text:0040B8FC loc_40B8FC:                             ; CODE XREF: .text:0040B8D9↑j
.text:0040B8FC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B8FF                 inc     edx
.text:0040B900                 mov     byte ptr [edx], 30h ; '0'
.text:0040B903                 inc     edx
.text:0040B904                 mov     byte ptr [edx], 31h ; '1'
.text:0040B907                 inc     edx
.text:0040B908                 mov     byte ptr [edx], 32h ; '2'
.text:0040B90B                 jmp     short loc_40B8E1
.text:0040B90D ; ---------------------------------------------------------------------------
.text:0040B90D
.text:0040B90D loc_40B90D:                             ; CODE XREF: .text:0040B8D5↑j
.text:0040B90D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B910                 inc     edx
.text:0040B911                 mov     byte ptr [edx], 30h ; '0'
.text:0040B914                 inc     edx
.text:0040B915                 mov     byte ptr [edx], 34h ; '4'
.text:0040B918                 inc     edx
.text:0040B919                 mov     byte ptr [edx], 30h ; '0'
.text:0040B91C                 jmp     short loc_40B8E1
.text:0040B91E ; ---------------------------------------------------------------------------
.text:0040B91E
.text:0040B91E loc_40B91E:                             ; CODE XREF: .text:0040B822↑j
.text:0040B91E                                         ; .text:0040B82A↑j ...
.text:0040B91E                 test    al, al
.text:0040B920                 jz      loc_40B840
.text:0040B926                 mov     [esp], edx
.text:0040B929                 mov     ebx, edx
.text:0040B92B                 call    strlen
.text:0040B930                 lea     edx, ds:1[eax*4]
.text:0040B937                 mov     [esp], edx
.text:0040B93A                 call    malloc
.text:0040B93F                 mov     [esp+28h], eax
.text:0040B943                 mov     edx, eax
.text:0040B945                 lea     esi, [esi+0]
.text:0040B949                 lea     edi, [edi+0]
.text:0040B950
.text:0040B950 loc_40B950:                             ; CODE XREF: .text:0040B968↓j
.text:0040B950                 movzx   eax, byte ptr [ebx]
.text:0040B953                 cmp     al, 20h ; ' '
.text:0040B955                 jz      short loc_40B989
.text:0040B957                 cmp     al, 9
.text:0040B959                 jz      short loc_40B978
.text:0040B95B                 cmp     al, 5Ch ; '\'
.text:0040B95D                 jz      short loc_40B96F
.text:0040B95F                 mov     [edx], al
.text:0040B961
.text:0040B961 loc_40B961:                             ; CODE XREF: .text:0040B976↓j
.text:0040B961                                         ; .text:0040B987↓j ...
.text:0040B961                 movzx   ecx, byte ptr [ebx]
.text:0040B964                 inc     edx
.text:0040B965                 inc     ebx
.text:0040B966                 test    cl, cl
.text:0040B968                 jnz     short loc_40B950
.text:0040B96A                 jmp     loc_40B840
.text:0040B96F ; ---------------------------------------------------------------------------
.text:0040B96F
.text:0040B96F loc_40B96F:                             ; CODE XREF: .text:0040B95D↑j
.text:0040B96F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B972                 inc     edx
.text:0040B973                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B976                 jmp     short loc_40B961
.text:0040B978 ; ---------------------------------------------------------------------------
.text:0040B978
.text:0040B978 loc_40B978:                             ; CODE XREF: .text:0040B959↑j
.text:0040B978                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B97B                 inc     edx
.text:0040B97C                 mov     byte ptr [edx], 30h ; '0'
.text:0040B97F                 inc     edx
.text:0040B980                 mov     byte ptr [edx], 31h ; '1'
.text:0040B983                 inc     edx
.text:0040B984                 mov     byte ptr [edx], 32h ; '2'
.text:0040B987                 jmp     short loc_40B961
.text:0040B989 ; ---------------------------------------------------------------------------
.text:0040B989
.text:0040B989 loc_40B989:                             ; CODE XREF: .text:0040B955↑j
.text:0040B989                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B98C                 inc     edx
.text:0040B98D                 mov     byte ptr [edx], 30h ; '0'
.text:0040B990                 inc     edx
.text:0040B991                 mov     byte ptr [edx], 34h ; '4'
.text:0040B994                 inc     edx
.text:0040B995                 mov     byte ptr [edx], 30h ; '0'
.text:0040B998                 jmp     short loc_40B961
.text:0040B99A ; ---------------------------------------------------------------------------
.text:0040B99A
.text:0040B99A loc_40B99A:                             ; CODE XREF: .text:0040B7F2↑j
.text:0040B99A                                         ; .text:0040B7FA↑j ...
.text:0040B99A                 test    al, al
.text:0040B99C                 jz      loc_40B810
.text:0040B9A2                 mov     [esp], edx
.text:0040B9A5                 mov     ebx, edx
.text:0040B9A7                 call    strlen
.text:0040B9AC                 lea     edx, ds:1[eax*4]
.text:0040B9B3                 mov     [esp], edx
.text:0040B9B6                 call    malloc
.text:0040B9BB                 mov     [esp+24h], eax
.text:0040B9BF                 mov     edx, eax
.text:0040B9C1                 jmp     short loc_40B9D0
.text:0040B9C1 ; ---------------------------------------------------------------------------
.text:0040B9C3                 align 10h
.text:0040B9D0
.text:0040B9D0 loc_40B9D0:                             ; CODE XREF: .text:0040B9C1↑j
.text:0040B9D0                                         ; .text:0040B9E8↓j
.text:0040B9D0                 movzx   eax, byte ptr [ebx]
.text:0040B9D3                 cmp     al, 20h ; ' '
.text:0040B9D5                 jz      short loc_40BA09
.text:0040B9D7                 cmp     al, 9
.text:0040B9D9                 jz      short loc_40B9F8
.text:0040B9DB                 cmp     al, 5Ch ; '\'
.text:0040B9DD                 jz      short loc_40B9EF
.text:0040B9DF                 mov     [edx], al
.text:0040B9E1
.text:0040B9E1 loc_40B9E1:                             ; CODE XREF: .text:0040B9F6↓j
.text:0040B9E1                                         ; .text:0040BA07↓j ...
.text:0040B9E1                 movzx   ecx, byte ptr [ebx]
.text:0040B9E4                 inc     edx
.text:0040B9E5                 inc     ebx
.text:0040B9E6                 test    cl, cl
.text:0040B9E8                 jnz     short loc_40B9D0
.text:0040B9EA                 jmp     loc_40B810
.text:0040B9EF ; ---------------------------------------------------------------------------
.text:0040B9EF
.text:0040B9EF loc_40B9EF:                             ; CODE XREF: .text:0040B9DD↑j
.text:0040B9EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B9F2                 inc     edx
.text:0040B9F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B9F6                 jmp     short loc_40B9E1
.text:0040B9F8 ; ---------------------------------------------------------------------------
.text:0040B9F8
.text:0040B9F8 loc_40B9F8:                             ; CODE XREF: .text:0040B9D9↑j
.text:0040B9F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B9FB                 inc     edx
.text:0040B9FC                 mov     byte ptr [edx], 30h ; '0'
.text:0040B9FF                 inc     edx
.text:0040BA00                 mov     byte ptr [edx], 31h ; '1'
.text:0040BA03                 inc     edx
.text:0040BA04                 mov     byte ptr [edx], 32h ; '2'
.text:0040BA07                 jmp     short loc_40B9E1
.text:0040BA09 ; ---------------------------------------------------------------------------
.text:0040BA09
.text:0040BA09 loc_40BA09:                             ; CODE XREF: .text:0040B9D5↑j
.text:0040BA09                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BA0C                 inc     edx
.text:0040BA0D                 mov     byte ptr [edx], 30h ; '0'
.text:0040BA10                 inc     edx
.text:0040BA11                 mov     byte ptr [edx], 34h ; '4'
.text:0040BA14                 inc     edx
.text:0040BA15                 mov     byte ptr [edx], 30h ; '0'
.text:0040BA18                 jmp     short loc_40B9E1
.text:0040BA1A ; ---------------------------------------------------------------------------
.text:0040BA1A
.text:0040BA1A loc_40BA1A:                             ; CODE XREF: .text:0040B7C2↑j
.text:0040BA1A                                         ; .text:0040B7CA↑j ...
.text:0040BA1A                 test    al, al
.text:0040BA1C                 jz      loc_40B7E0
.text:0040BA22                 mov     [esp], edx
.text:0040BA25                 mov     ebx, edx
.text:0040BA27                 call    strlen
.text:0040BA2C                 lea     ecx, ds:1[eax*4]
.text:0040BA33                 mov     [esp], ecx
.text:0040BA36                 call    malloc
.text:0040BA3B                 mov     [esp+20h], eax
.text:0040BA3F                 mov     edx, eax
.text:0040BA41                 jmp     short loc_40BA50
.text:0040BA41 ; ---------------------------------------------------------------------------
.text:0040BA43                 align 10h
.text:0040BA50
.text:0040BA50 loc_40BA50:                             ; CODE XREF: .text:0040BA41↑j
.text:0040BA50                                         ; .text:0040BA68↓j
.text:0040BA50                 movzx   eax, byte ptr [ebx]
.text:0040BA53                 cmp     al, 20h ; ' '
.text:0040BA55                 jz      short loc_40BA89
.text:0040BA57                 cmp     al, 9
.text:0040BA59                 jz      short loc_40BA78
.text:0040BA5B                 cmp     al, 5Ch ; '\'
.text:0040BA5D                 jz      short loc_40BA6F
.text:0040BA5F                 mov     [edx], al
.text:0040BA61
.text:0040BA61 loc_40BA61:                             ; CODE XREF: .text:0040BA76↓j
.text:0040BA61                                         ; .text:0040BA87↓j ...
.text:0040BA61                 movzx   ecx, byte ptr [ebx]
.text:0040BA64                 inc     edx
.text:0040BA65                 inc     ebx
.text:0040BA66                 test    cl, cl
.text:0040BA68                 jnz     short loc_40BA50
.text:0040BA6A                 jmp     loc_40B7E0
.text:0040BA6F ; ---------------------------------------------------------------------------
.text:0040BA6F
.text:0040BA6F loc_40BA6F:                             ; CODE XREF: .text:0040BA5D↑j
.text:0040BA6F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BA72                 inc     edx
.text:0040BA73                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BA76                 jmp     short loc_40BA61
.text:0040BA78 ; ---------------------------------------------------------------------------
.text:0040BA78
.text:0040BA78 loc_40BA78:                             ; CODE XREF: .text:0040BA59↑j
.text:0040BA78                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BA7B                 inc     edx
.text:0040BA7C                 mov     byte ptr [edx], 30h ; '0'
.text:0040BA7F                 inc     edx
.text:0040BA80                 mov     byte ptr [edx], 31h ; '1'
.text:0040BA83                 inc     edx
.text:0040BA84                 mov     byte ptr [edx], 32h ; '2'
.text:0040BA87                 jmp     short loc_40BA61
.text:0040BA89 ; ---------------------------------------------------------------------------
.text:0040BA89
.text:0040BA89 loc_40BA89:                             ; CODE XREF: .text:0040BA55↑j
.text:0040BA89                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BA8C                 inc     edx
.text:0040BA8D                 mov     byte ptr [edx], 30h ; '0'
.text:0040BA90                 inc     edx
.text:0040BA91                 mov     byte ptr [edx], 34h ; '4'
.text:0040BA94                 inc     edx
.text:0040BA95                 mov     byte ptr [edx], 30h ; '0'
.text:0040BA98                 jmp     short loc_40BA61
.text:0040BA98 ; ---------------------------------------------------------------------------
.text:0040BA9A                 align 10h
.text:0040BAA0
.text:0040BAA0 ; =============== S U B R O U T I N E =======================================
.text:0040BAA0
.text:0040BAA0 ; Attributes: info_from_lumina
.text:0040BAA0
.text:0040BAA0 ; int __cdecl __addmntentstr(char *, int)
.text:0040BAA0 ___addmntentstr proc near               ; CODE XREF: .text:0040B36A↑p
.text:0040BAA0
.text:0040BAA0 Buffer          = dword ptr -4Ch
.text:0040BAA0 Format          = dword ptr -48h
.text:0040BAA0 var_44          = dword ptr -44h
.text:0040BAA0 var_40          = dword ptr -40h
.text:0040BAA0 var_3C          = dword ptr -3Ch
.text:0040BAA0 var_38          = dword ptr -38h
.text:0040BAA0 var_34          = dword ptr -34h
.text:0040BAA0 var_30          = dword ptr -30h
.text:0040BAA0 var_2C          = dword ptr -2Ch
.text:0040BAA0 var_28          = dword ptr -28h
.text:0040BAA0 var_24          = dword ptr -24h
.text:0040BAA0 Str             = dword ptr -20h
.text:0040BAA0 var_1C          = dword ptr -1Ch
.text:0040BAA0 var_18          = dword ptr -18h
.text:0040BAA0 arg_0           = dword ptr  4
.text:0040BAA0 arg_4           = dword ptr  8
.text:0040BAA0
.text:0040BAA0                 push    ebx
.text:0040BAA1                 sub     esp, 48h
.text:0040BAA4                 mov     edx, [esp+4Ch+arg_4]
.text:0040BAA8                 mov     ecx, [edx]
.text:0040BAAA                 mov     [esp+4Ch+var_2C], ecx
.text:0040BAAE                 mov     ebx, [edx+4]
.text:0040BAB1                 mov     [esp+4Ch+var_28], ebx
.text:0040BAB5                 mov     ebx, [edx+8]
.text:0040BAB8                 mov     [esp+4Ch+var_24], ebx
.text:0040BABC                 mov     ebx, [edx+0Ch]
.text:0040BABF                 mov     [esp+4Ch+Str], ebx
.text:0040BAC3                 mov     ebx, [edx+10h]
.text:0040BAC6                 mov     [esp+4Ch+var_1C], ebx
.text:0040BACA                 mov     ebx, [edx+14h]
.text:0040BACD                 mov     [esp+4Ch+var_18], ebx
.text:0040BAD1                 mov     ebx, ecx
.text:0040BAD3                 movzx   eax, byte ptr [ecx]
.text:0040BAD6                 test    al, al
.text:0040BAD8                 jz      loc_40BDC1
.text:0040BADE                 mov     esi, esi
.text:0040BAE0
.text:0040BAE0 loc_40BAE0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040BAE0                 cmp     al, 20h ; ' '
.text:0040BAE2                 jz      loc_40BD40
.text:0040BAE8                 cmp     al, 9
.text:0040BAEA                 jz      loc_40BD40
.text:0040BAF0                 cmp     al, 5Ch ; '\'
.text:0040BAF2                 jz      loc_40BD40
.text:0040BAF8                 inc     ebx
.text:0040BAF9                 movzx   eax, byte ptr [ebx]
.text:0040BAFC                 test    al, al
.text:0040BAFE                 jnz     short loc_40BAE0
.text:0040BB00
.text:0040BB00 loc_40BB00:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040BB00                                         ; ___addmntentstr+2EA↓j
.text:0040BB00                 mov     ebx, [esp+4Ch+var_28]
.text:0040BB04                 mov     edx, ebx
.text:0040BB06                 movzx   eax, byte ptr [ebx]
.text:0040BB09                 test    al, al
.text:0040BB0B                 jz      short loc_40BB30
.text:0040BB0D                 lea     esi, [esi+0]
.text:0040BB10
.text:0040BB10 loc_40BB10:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040BB10                 cmp     al, 20h ; ' '
.text:0040BB12                 jz      loc_40BCBA
.text:0040BB18                 cmp     al, 9
.text:0040BB1A                 jz      loc_40BCBA
.text:0040BB20                 cmp     al, 5Ch ; '\'
.text:0040BB22                 jz      loc_40BCBA
.text:0040BB28                 inc     ebx
.text:0040BB29                 movzx   eax, byte ptr [ebx]
.text:0040BB2C                 test    al, al
.text:0040BB2E                 jnz     short loc_40BB10
.text:0040BB30
.text:0040BB30 loc_40BB30:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040BB30                                         ; ___addmntentstr+21C↓j ...
.text:0040BB30                 mov     ebx, [esp+4Ch+var_24]
.text:0040BB34                 mov     edx, ebx
.text:0040BB36                 movzx   eax, byte ptr [ebx]
.text:0040BB39                 test    al, al
.text:0040BB3B                 jz      short loc_40BB60
.text:0040BB3D                 lea     esi, [esi+0]
.text:0040BB40
.text:0040BB40 loc_40BB40:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040BB40                 cmp     al, 20h ; ' '
.text:0040BB42                 jz      loc_40BC3E
.text:0040BB48                 cmp     al, 9
.text:0040BB4A                 jz      loc_40BC3E
.text:0040BB50                 cmp     al, 5Ch ; '\'
.text:0040BB52                 jz      loc_40BC3E
.text:0040BB58                 inc     ebx
.text:0040BB59                 movzx   eax, byte ptr [ebx]
.text:0040BB5C                 test    al, al
.text:0040BB5E                 jnz     short loc_40BB40
.text:0040BB60
.text:0040BB60 loc_40BB60:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040BB60                                         ; ___addmntentstr+1A0↓j ...
.text:0040BB60                 mov     edx, [esp+4Ch+Str]
.text:0040BB64                 mov     ebx, edx
.text:0040BB66                 movzx   eax, byte ptr [edx]
.text:0040BB69                 test    al, al
.text:0040BB6B                 jz      short loc_40BB84
.text:0040BB6D                 lea     esi, [esi+0]
.text:0040BB70
.text:0040BB70 loc_40BB70:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040BB70                 cmp     al, 20h ; ' '
.text:0040BB72                 jz      short loc_40BBCC
.text:0040BB74                 cmp     al, 9
.text:0040BB76                 jz      short loc_40BBCC
.text:0040BB78                 cmp     al, 5Ch ; '\'
.text:0040BB7A                 jz      short loc_40BBCC
.text:0040BB7C                 inc     ebx
.text:0040BB7D                 movzx   eax, byte ptr [ebx]
.text:0040BB80                 test    al, al
.text:0040BB82                 jnz     short loc_40BB70
.text:0040BB84
.text:0040BB84 loc_40BB84:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040BB84                                         ; ___addmntentstr+12E↓j ...
.text:0040BB84                 mov     [esp+4Ch+var_38], edx
.text:0040BB88                 mov     ebx, [esp+4Ch+var_18]
.text:0040BB8C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040BB90                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040BB98                 mov     edx, [esp+4Ch+var_2C]
.text:0040BB9C                 mov     [esp+4Ch+var_30], ebx
.text:0040BBA0                 mov     ebx, [esp+4Ch+var_24]
.text:0040BBA4                 mov     [esp+4Ch+var_34], ecx
.text:0040BBA8                 mov     ecx, [esp+4Ch+var_28]
.text:0040BBAC                 mov     [esp+4Ch+var_3C], ebx
.text:0040BBB0                 mov     ebx, [esp+4Ch+arg_0]
.text:0040BBB4                 mov     [esp+4Ch+var_40], ecx
.text:0040BBB8                 mov     [esp+4Ch+var_44], edx
.text:0040BBBC                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040BBBF                 call    sprintf
.text:0040BBC4                 add     esp, 48h
.text:0040BBC7                 shr     eax, 1Fh
.text:0040BBCA                 pop     ebx
.text:0040BBCB                 retn
.text:0040BBCC ; ---------------------------------------------------------------------------
.text:0040BBCC
.text:0040BBCC loc_40BBCC:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040BBCC                                         ; ___addmntentstr+D6↑j ...
.text:0040BBCC                 test    al, al
.text:0040BBCE                 jz      short loc_40BB84
.text:0040BBD0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040BBD3                 mov     ebx, edx
.text:0040BBD5                 call    strlen
.text:0040BBDA                 lea     edx, ds:1[eax*4]
.text:0040BBE1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040BBE4                 call    malloc
.text:0040BBE9                 mov     [esp+4Ch+Str], eax
.text:0040BBED                 mov     edx, eax
.text:0040BBEF                 nop
.text:0040BBF0
.text:0040BBF0 loc_40BBF0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040BBF0                 movzx   eax, byte ptr [ebx]
.text:0040BBF3                 cmp     al, 20h ; ' '
.text:0040BBF5                 jz      short loc_40BC2D
.text:0040BBF7                 cmp     al, 9
.text:0040BBF9                 jz      short loc_40BC1C
.text:0040BBFB                 cmp     al, 5Ch ; '\'
.text:0040BBFD                 jz      short loc_40BC13
.text:0040BBFF                 mov     [edx], al
.text:0040BC01
.text:0040BC01 loc_40BC01:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040BC01                                         ; ___addmntentstr+18B↓j ...
.text:0040BC01                 movzx   ecx, byte ptr [ebx]
.text:0040BC04                 inc     edx
.text:0040BC05                 inc     ebx
.text:0040BC06                 test    cl, cl
.text:0040BC08                 jnz     short loc_40BBF0
.text:0040BC0A                 mov     edx, [esp+4Ch+Str]
.text:0040BC0E                 jmp     loc_40BB84
.text:0040BC13 ; ---------------------------------------------------------------------------
.text:0040BC13
.text:0040BC13 loc_40BC13:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040BC13                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BC16                 inc     edx
.text:0040BC17                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BC1A                 jmp     short loc_40BC01
.text:0040BC1C ; ---------------------------------------------------------------------------
.text:0040BC1C
.text:0040BC1C loc_40BC1C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040BC1C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BC1F                 inc     edx
.text:0040BC20                 mov     byte ptr [edx], 30h ; '0'
.text:0040BC23                 inc     edx
.text:0040BC24                 mov     byte ptr [edx], 31h ; '1'
.text:0040BC27                 inc     edx
.text:0040BC28                 mov     byte ptr [edx], 32h ; '2'
.text:0040BC2B                 jmp     short loc_40BC01
.text:0040BC2D ; ---------------------------------------------------------------------------
.text:0040BC2D
.text:0040BC2D loc_40BC2D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040BC2D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BC30                 inc     edx
.text:0040BC31                 mov     byte ptr [edx], 30h ; '0'
.text:0040BC34                 inc     edx
.text:0040BC35                 mov     byte ptr [edx], 34h ; '4'
.text:0040BC38                 inc     edx
.text:0040BC39                 mov     byte ptr [edx], 30h ; '0'
.text:0040BC3C                 jmp     short loc_40BC01
.text:0040BC3E ; ---------------------------------------------------------------------------
.text:0040BC3E
.text:0040BC3E loc_40BC3E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040BC3E                                         ; ___addmntentstr+AA↑j ...
.text:0040BC3E                 test    al, al
.text:0040BC40                 jz      loc_40BB60
.text:0040BC46                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040BC49                 mov     ebx, edx
.text:0040BC4B                 call    strlen
.text:0040BC50                 lea     edx, ds:1[eax*4]
.text:0040BC57                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040BC5A                 call    malloc
.text:0040BC5F                 mov     [esp+4Ch+var_24], eax
.text:0040BC63                 mov     edx, eax
.text:0040BC65                 lea     esi, [esi+0]
.text:0040BC69                 lea     edi, [edi+0]
.text:0040BC70
.text:0040BC70 loc_40BC70:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040BC70                 movzx   eax, byte ptr [ebx]
.text:0040BC73                 cmp     al, 20h ; ' '
.text:0040BC75                 jz      short loc_40BCA9
.text:0040BC77                 cmp     al, 9
.text:0040BC79                 jz      short loc_40BC98
.text:0040BC7B                 cmp     al, 5Ch ; '\'
.text:0040BC7D                 jz      short loc_40BC8F
.text:0040BC7F                 mov     [edx], al
.text:0040BC81
.text:0040BC81 loc_40BC81:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040BC81                                         ; ___addmntentstr+207↓j ...
.text:0040BC81                 movzx   ecx, byte ptr [ebx]
.text:0040BC84                 inc     edx
.text:0040BC85                 inc     ebx
.text:0040BC86                 test    cl, cl
.text:0040BC88                 jnz     short loc_40BC70
.text:0040BC8A                 jmp     loc_40BB60
.text:0040BC8F ; ---------------------------------------------------------------------------
.text:0040BC8F
.text:0040BC8F loc_40BC8F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040BC8F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BC92                 inc     edx
.text:0040BC93                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BC96                 jmp     short loc_40BC81
.text:0040BC98 ; ---------------------------------------------------------------------------
.text:0040BC98
.text:0040BC98 loc_40BC98:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040BC98                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BC9B                 inc     edx
.text:0040BC9C                 mov     byte ptr [edx], 30h ; '0'
.text:0040BC9F                 inc     edx
.text:0040BCA0                 mov     byte ptr [edx], 31h ; '1'
.text:0040BCA3                 inc     edx
.text:0040BCA4                 mov     byte ptr [edx], 32h ; '2'
.text:0040BCA7                 jmp     short loc_40BC81
.text:0040BCA9 ; ---------------------------------------------------------------------------
.text:0040BCA9
.text:0040BCA9 loc_40BCA9:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040BCA9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BCAC                 inc     edx
.text:0040BCAD                 mov     byte ptr [edx], 30h ; '0'
.text:0040BCB0                 inc     edx
.text:0040BCB1                 mov     byte ptr [edx], 34h ; '4'
.text:0040BCB4                 inc     edx
.text:0040BCB5                 mov     byte ptr [edx], 30h ; '0'
.text:0040BCB8                 jmp     short loc_40BC81
.text:0040BCBA ; ---------------------------------------------------------------------------
.text:0040BCBA
.text:0040BCBA loc_40BCBA:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040BCBA                                         ; ___addmntentstr+7A↑j ...
.text:0040BCBA                 test    al, al
.text:0040BCBC                 jz      loc_40BB30
.text:0040BCC2                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040BCC5                 mov     ebx, edx
.text:0040BCC7                 call    strlen
.text:0040BCCC                 lea     edx, ds:1[eax*4]
.text:0040BCD3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040BCD6                 call    malloc
.text:0040BCDB                 mov     [esp+4Ch+var_28], eax
.text:0040BCDF                 mov     edx, eax
.text:0040BCE1                 jmp     short loc_40BCF0
.text:0040BCE1 ; ---------------------------------------------------------------------------
.text:0040BCE3                 align 10h
.text:0040BCF0
.text:0040BCF0 loc_40BCF0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040BCF0                                         ; ___addmntentstr+268↓j
.text:0040BCF0                 movzx   eax, byte ptr [ebx]
.text:0040BCF3                 cmp     al, 20h ; ' '
.text:0040BCF5                 jz      short loc_40BD29
.text:0040BCF7                 cmp     al, 9
.text:0040BCF9                 jz      short loc_40BD18
.text:0040BCFB                 cmp     al, 5Ch ; '\'
.text:0040BCFD                 jz      short loc_40BD0F
.text:0040BCFF                 mov     [edx], al
.text:0040BD01
.text:0040BD01 loc_40BD01:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040BD01                                         ; ___addmntentstr+287↓j ...
.text:0040BD01                 movzx   ecx, byte ptr [ebx]
.text:0040BD04                 inc     edx
.text:0040BD05                 inc     ebx
.text:0040BD06                 test    cl, cl
.text:0040BD08                 jnz     short loc_40BCF0
.text:0040BD0A                 jmp     loc_40BB30
.text:0040BD0F ; ---------------------------------------------------------------------------
.text:0040BD0F
.text:0040BD0F loc_40BD0F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040BD0F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BD12                 inc     edx
.text:0040BD13                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BD16                 jmp     short loc_40BD01
.text:0040BD18 ; ---------------------------------------------------------------------------
.text:0040BD18
.text:0040BD18 loc_40BD18:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040BD18                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BD1B                 inc     edx
.text:0040BD1C                 mov     byte ptr [edx], 30h ; '0'
.text:0040BD1F                 inc     edx
.text:0040BD20                 mov     byte ptr [edx], 31h ; '1'
.text:0040BD23                 inc     edx
.text:0040BD24                 mov     byte ptr [edx], 32h ; '2'
.text:0040BD27                 jmp     short loc_40BD01
.text:0040BD29 ; ---------------------------------------------------------------------------
.text:0040BD29
.text:0040BD29 loc_40BD29:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040BD29                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BD2C                 inc     edx
.text:0040BD2D                 mov     byte ptr [edx], 30h ; '0'
.text:0040BD30                 inc     edx
.text:0040BD31                 mov     byte ptr [edx], 34h ; '4'
.text:0040BD34                 inc     edx
.text:0040BD35                 mov     byte ptr [edx], 30h ; '0'
.text:0040BD38                 jmp     short loc_40BD01
.text:0040BD38 ; ---------------------------------------------------------------------------
.text:0040BD3A                 align 10h
.text:0040BD40
.text:0040BD40 loc_40BD40:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040BD40                                         ; ___addmntentstr+4A↑j ...
.text:0040BD40                 test    al, al
.text:0040BD42                 jz      loc_40BB00
.text:0040BD48                 mov     ebx, [esp+4Ch+var_2C]
.text:0040BD4C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040BD4F                 call    strlen
.text:0040BD54                 lea     edx, ds:1[eax*4]
.text:0040BD5B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040BD5E                 call    malloc
.text:0040BD63                 mov     [esp+4Ch+var_2C], eax
.text:0040BD67                 mov     edx, eax
.text:0040BD69                 lea     esi, [esi+0]
.text:0040BD70
.text:0040BD70 loc_40BD70:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040BD70                 movzx   eax, byte ptr [ebx]
.text:0040BD73                 cmp     al, 20h ; ' '
.text:0040BD75                 jz      short loc_40BDB0
.text:0040BD77                 cmp     al, 9
.text:0040BD79                 jz      short loc_40BD98
.text:0040BD7B                 cmp     al, 5Ch ; '\'
.text:0040BD7D                 jz      short loc_40BD8F
.text:0040BD7F                 mov     [edx], al
.text:0040BD81
.text:0040BD81 loc_40BD81:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040BD81                                         ; ___addmntentstr+307↓j ...
.text:0040BD81                 movzx   ecx, byte ptr [ebx]
.text:0040BD84                 inc     edx
.text:0040BD85                 inc     ebx
.text:0040BD86                 test    cl, cl
.text:0040BD88                 jnz     short loc_40BD70
.text:0040BD8A                 jmp     loc_40BB00
.text:0040BD8F ; ---------------------------------------------------------------------------
.text:0040BD8F
.text:0040BD8F loc_40BD8F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040BD8F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BD92                 inc     edx
.text:0040BD93                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BD96                 jmp     short loc_40BD81
.text:0040BD98 ; ---------------------------------------------------------------------------
.text:0040BD98
.text:0040BD98 loc_40BD98:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040BD98                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BD9B                 inc     edx
.text:0040BD9C                 mov     byte ptr [edx], 30h ; '0'
.text:0040BD9F                 inc     edx
.text:0040BDA0                 mov     byte ptr [edx], 31h ; '1'
.text:0040BDA3                 inc     edx
.text:0040BDA4                 mov     byte ptr [edx], 32h ; '2'
.text:0040BDA7                 jmp     short loc_40BD81
.text:0040BDA7 ; ---------------------------------------------------------------------------
.text:0040BDA9                 align 10h
.text:0040BDB0
.text:0040BDB0 loc_40BDB0:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040BDB0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040BDB3                 inc     edx
.text:0040BDB4                 mov     byte ptr [edx], 30h ; '0'
.text:0040BDB7                 inc     edx
.text:0040BDB8                 mov     byte ptr [edx], 34h ; '4'
.text:0040BDBB                 inc     edx
.text:0040BDBC                 mov     byte ptr [edx], 30h ; '0'
.text:0040BDBF                 jmp     short loc_40BD81
.text:0040BDC1 ; ---------------------------------------------------------------------------
.text:0040BDC1
.text:0040BDC1 loc_40BDC1:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040BDC1                 movzx   eax, byte ptr [ecx]
.text:0040BDC4                 jmp     loc_40BD40
.text:0040BDC4 ___addmntentstr endp
.text:0040BDC4
.text:0040BDC4 ; ---------------------------------------------------------------------------
.text:0040BDC9                 align 10h
.text:0040BDD0
.text:0040BDD0 ; =============== S U B R O U T I N E =======================================
.text:0040BDD0
.text:0040BDD0
.text:0040BDD0 sub_40BDD0      proc near               ; CODE XREF: sub_409E90+99↑p
.text:0040BDD0
.text:0040BDD0 nBufferLength   = dword ptr -1Ch
.text:0040BDD0 lpBuffer        = dword ptr -18h
.text:0040BDD0 dwBytes         = dword ptr -14h
.text:0040BDD0 var_8           = dword ptr -8
.text:0040BDD0 var_4           = dword ptr -4
.text:0040BDD0
.text:0040BDD0                 sub     esp, 1Ch
.text:0040BDD3                 mov     [esp+1Ch+var_8], ebx
.text:0040BDD7                 mov     [esp+1Ch+var_4], esi
.text:0040BDDB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040BDE3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040BDEA                 call    GetLogicalDriveStringsA
.text:0040BDEF                 sub     esp, 8
.text:0040BDF2                 mov     ebx, eax
.text:0040BDF4                 call    GetProcessHeap
.text:0040BDF9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040BDFC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040BE00                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040BE08                 call    HeapAlloc
.text:0040BE0D                 sub     esp, 0Ch
.text:0040BE10                 mov     esi, eax
.text:0040BE12                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040BE15                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040BE19                 call    GetLogicalDriveStringsA
.text:0040BE1E                 sub     esp, 8
.text:0040BE21                 mov     eax, esi
.text:0040BE23                 mov     ebx, [esp+1Ch+var_8]
.text:0040BE27                 mov     esi, [esp+1Ch+var_4]
.text:0040BE2B                 add     esp, 1Ch
.text:0040BE2E                 retn
.text:0040BE2E sub_40BDD0      endp
.text:0040BE2E
.text:0040BE2F
.text:0040BE2F ; =============== S U B R O U T I N E =======================================
.text:0040BE2F
.text:0040BE2F
.text:0040BE2F ; int __cdecl sub_40BE2F(char *, char *)
.text:0040BE2F sub_40BE2F      proc near               ; DATA XREF: sub_40BE2F:loc_40BEBD↓o
.text:0040BE2F
.text:0040BE2F FileName        = dword ptr -1Ch
.text:0040BE2F Mode            = dword ptr -18h
.text:0040BE2F dwBytes         = dword ptr -14h
.text:0040BE2F arg_0           = dword ptr  4
.text:0040BE2F arg_4           = dword ptr  8
.text:0040BE2F
.text:0040BE2F                 ja      short $+2
.text:0040BE31
.text:0040BE31 loc_40BE31:                             ; CODE XREF: sub_40BE2F↑j
.text:0040BE31                 jmp     short loc_40BE40
.text:0040BE31 ; ---------------------------------------------------------------------------
.text:0040BE33                 align 10h
.text:0040BE40
.text:0040BE40 loc_40BE40:                             ; CODE XREF: sub_40BE2F:loc_40BE31↑j
.text:0040BE40                 push    edi
.text:0040BE41                 push    esi
.text:0040BE42                 push    ebx
.text:0040BE43                 sub     esp, 10h
.text:0040BE46                 mov     ebx, [esp+1Ch+arg_0]
.text:0040BE4A                 mov     edx, [esp+1Ch+arg_4]
.text:0040BE4E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040BE51                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040BE55                 call    fopen
.text:0040BE5A                 test    eax, eax
.text:0040BE5C                 mov     edi, eax
.text:0040BE5E                 jz      short loc_40BEBD
.text:0040BE60
.text:0040BE60 loc_40BE60:                             ; CODE XREF: sub_40BE2F+A2↓j
.text:0040BE60                                         ; sub_40BE2F+AB↓j
.text:0040BE60                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040BE68                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040BE6F                 call    GetLogicalDriveStringsA
.text:0040BE74                 sub     esp, 8
.text:0040BE77                 mov     esi, eax
.text:0040BE79                 call    GetProcessHeap
.text:0040BE7E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040BE81                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040BE85                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040BE8D                 call    HeapAlloc
.text:0040BE92                 sub     esp, 0Ch
.text:0040BE95                 mov     ebx, eax
.text:0040BE97                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040BE9A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040BE9E                 call    GetLogicalDriveStringsA
.text:0040BEA3                 mov     off_410074, ebx ; "notset"
.text:0040BEA9                 sub     esp, 8
.text:0040BEAC                 xor     eax, eax
.text:0040BEAE                 test    ebx, ebx
.text:0040BEB0                 setz    al
.text:0040BEB3                 add     esp, 10h
.text:0040BEB6                 pop     ebx
.text:0040BEB7                 dec     eax
.text:0040BEB8                 and     eax, edi
.text:0040BEBA                 pop     esi
.text:0040BEBB                 pop     edi
.text:0040BEBC                 retn
.text:0040BEBD ; ---------------------------------------------------------------------------
.text:0040BEBD
.text:0040BEBD loc_40BEBD:                             ; CODE XREF: sub_40BE2F+2F↑j
.text:0040BEBD                 mov     [esp+1Ch+Mode], offset sub_40BE2F ; Mode
.text:0040BEC5                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040BEC8                 call    fopen
.text:0040BECD                 test    eax, eax
.text:0040BECF                 mov     edi, eax
.text:0040BED1                 jnz     short loc_40BE60
.text:0040BED3                 call    sub_40CCC0
.text:0040BED8                 mov     edi, eax
.text:0040BEDA                 jmp     short loc_40BE60
.text:0040BEDA sub_40BE2F      endp
.text:0040BEDA
.text:0040BEDA ; ---------------------------------------------------------------------------
.text:0040BEDC                 align 10h
.text:0040BEE0                 sub     esp, 0Ch
.text:0040BEE3                 mov     eax, [esp+10h]
.text:0040BEE7                 test    eax, eax
.text:0040BEE9                 jz      short loc_40BEF3
.text:0040BEEB                 mov     [esp], eax
.text:0040BEEE                 call    fclose
.text:0040BEF3
.text:0040BEF3 loc_40BEF3:                             ; CODE XREF: .text:0040BEE9↑j
.text:0040BEF3                 call    GetProcessHeap
.text:0040BEF8                 mov     [esp], eax
.text:0040BEFB                 mov     ecx, off_410074 ; "notset"
.text:0040BF01                 mov     dword ptr [esp+4], 0
.text:0040BF09                 mov     [esp+8], ecx
.text:0040BF0D                 call    HeapFree
.text:0040BF12                 mov     edx, off_410070 ; "notset"
.text:0040BF18                 sub     esp, 0Ch
.text:0040BF1B                 mov     eax, 1
.text:0040BF20                 mov     off_410074, edx ; "notset"
.text:0040BF26                 add     esp, 0Ch
.text:0040BF29                 retn
.text:0040BF29 ; ---------------------------------------------------------------------------
.text:0040BF2A                 align 10h
.text:0040BF30                 push    edi
.text:0040BF31                 push    esi
.text:0040BF32                 push    ebx
.text:0040BF33                 sub     esp, 10h
.text:0040BF36                 mov     edi, [esp+24h]
.text:0040BF3A                 mov     [esp], edi
.text:0040BF3D                 call    strlen
.text:0040BF42                 mov     edx, [esp+20h]
.text:0040BF46                 mov     esi, eax
.text:0040BF48                 mov     ebx, [edx+0Ch]
.text:0040BF4B                 nop
.text:0040BF4C                 lea     esi, [esi+0]
.text:0040BF50
.text:0040BF50 loc_40BF50:                             ; CODE XREF: .text:0040BF81↓j
.text:0040BF50                 mov     [esp+4], edi
.text:0040BF54                 mov     [esp], ebx
.text:0040BF57                 call    strstr
.text:0040BF5C                 test    eax, eax
.text:0040BF5E                 jz      short loc_40BF83
.text:0040BF60                 cmp     eax, ebx
.text:0040BF62                 jz      short loc_40BF85
.text:0040BF64                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040BF68                 jz      short loc_40BF90
.text:0040BF6A
.text:0040BF6A loc_40BF6A:                             ; CODE XREF: .text:0040BFA0↓j
.text:0040BF6A                 mov     [esp], ebx
.text:0040BF6D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040BF75                 call    strchr
.text:0040BF7A                 test    eax, eax
.text:0040BF7C                 mov     ebx, eax
.text:0040BF7E                 jz      short loc_40BF83
.text:0040BF80                 inc     ebx
.text:0040BF81                 jmp     short loc_40BF50
.text:0040BF83 ; ---------------------------------------------------------------------------
.text:0040BF83
.text:0040BF83 loc_40BF83:                             ; CODE XREF: .text:0040BF5E↑j
.text:0040BF83                                         ; .text:0040BF7E↑j
.text:0040BF83                 xor     eax, eax
.text:0040BF85
.text:0040BF85 loc_40BF85:                             ; CODE XREF: .text:0040BF62↑j
.text:0040BF85                                         ; .text:0040BF96↓j ...
.text:0040BF85                 add     esp, 10h
.text:0040BF88                 pop     ebx
.text:0040BF89                 pop     esi
.text:0040BF8A                 pop     edi
.text:0040BF8B                 retn
.text:0040BF8B ; ---------------------------------------------------------------------------
.text:0040BF8C                 align 10h
.text:0040BF90
.text:0040BF90 loc_40BF90:                             ; CODE XREF: .text:0040BF68↑j
.text:0040BF90                 movzx   edx, byte ptr [esi+eax]
.text:0040BF94                 test    dl, dl
.text:0040BF96                 jz      short loc_40BF85
.text:0040BF98                 cmp     dl, 3Dh ; '='
.text:0040BF9B                 jz      short loc_40BF85
.text:0040BF9D                 cmp     dl, 2Ch ; ','
.text:0040BFA0                 jnz     short loc_40BF6A
.text:0040BFA2                 jmp     short loc_40BF85
.text:0040BFA2 ; ---------------------------------------------------------------------------
.text:0040BFA4                 align 10h
.text:0040BFB0 ; const char aFxstat64BadFil[]
.text:0040BFB0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040BFB0                                         ; DATA XREF: sub_40BFE0+7B↓o
.text:0040BFD4                 align 10h
.text:0040BFE0
.text:0040BFE0 ; =============== S U B R O U T I N E =======================================
.text:0040BFE0
.text:0040BFE0
.text:0040BFE0 ; int __cdecl sub_40BFE0(HANDLE hNamedPipe, int, int)
.text:0040BFE0 sub_40BFE0      proc near               ; CODE XREF: .text:0040A0A9↑p
.text:0040BFE0
.text:0040BFE0 FileHandle      = dword ptr -1Ch
.text:0040BFE0 var_18          = dword ptr -18h
.text:0040BFE0 var_C           = dword ptr -0Ch
.text:0040BFE0 var_8           = dword ptr -8
.text:0040BFE0 var_4           = dword ptr -4
.text:0040BFE0 hNamedPipe      = dword ptr  4
.text:0040BFE0 arg_4           = dword ptr  8
.text:0040BFE0 arg_8           = dword ptr  0Ch
.text:0040BFE0
.text:0040BFE0                 sub     esp, 1Ch
.text:0040BFE3                 mov     edx, [esp+1Ch+arg_4]
.text:0040BFE7                 mov     [esp+1Ch+var_C], ebx
.text:0040BFEB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040BFEF                 mov     [esp+1Ch+var_8], esi
.text:0040BFF3                 mov     esi, [esp+1Ch+arg_8]
.text:0040BFF7                 test    ebx, ebx
.text:0040BFF9                 mov     [esp+1Ch+var_4], edi
.text:0040BFFD                 jnz     short loc_40C037
.text:0040BFFF                 test    edx, edx
.text:0040C001                 js      short loc_40C057
.text:0040C003                 test    esi, esi
.text:0040C005                 jz      short loc_40C037
.text:0040C007                 cld
.text:0040C008                 mov     eax, ebx
.text:0040C00A                 mov     edi, esi
.text:0040C00C                 mov     ecx, 18h
.text:0040C011                 rep stosd
.text:0040C013                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040C017                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040C01A                 call    _get_osfhandle
.text:0040C01F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040C023                 mov     ebx, [esp+1Ch+var_C]
.text:0040C027                 mov     esi, [esp+1Ch+var_8]
.text:0040C02B                 mov     edi, [esp+1Ch+var_4]
.text:0040C02F                 add     esp, 1Ch
.text:0040C032                 jmp     sub_407EA0
.text:0040C037 ; ---------------------------------------------------------------------------
.text:0040C037
.text:0040C037 loc_40C037:                             ; CODE XREF: sub_40BFE0+1D↑j
.text:0040C037                                         ; sub_40BFE0+25↑j
.text:0040C037                 call    _errno
.text:0040C03C                 mov     dword ptr [eax], 16h
.text:0040C042
.text:0040C042 loc_40C042:                             ; CODE XREF: sub_40BFE0+92↓j
.text:0040C042                 mov     ebx, [esp+1Ch+var_C]
.text:0040C046                 mov     eax, 0FFFFFFFFh
.text:0040C04B                 mov     esi, [esp+1Ch+var_8]
.text:0040C04F                 mov     edi, [esp+1Ch+var_4]
.text:0040C053                 add     esp, 1Ch
.text:0040C056                 retn
.text:0040C057 ; ---------------------------------------------------------------------------
.text:0040C057
.text:0040C057 loc_40C057:                             ; CODE XREF: sub_40BFE0+21↑j
.text:0040C057                 mov     [esp+1Ch+var_18], edx
.text:0040C05B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040C062                 call    printf
.text:0040C067                 call    _errno
.text:0040C06C                 mov     dword ptr [eax], 9
.text:0040C072                 jmp     short loc_40C042
.text:0040C072 sub_40BFE0      endp
.text:0040C072
.text:0040C072 ; ---------------------------------------------------------------------------
.text:0040C074                 db 1Ch dup(90h)
.text:0040C090 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040C2AF↓o
.text:0040C09C aLu             db '%lu',0              ; DATA XREF: .text:0040C2BF↓o
.text:0040C0A0 asc_40C0A0      db ' ',0                ; DATA XREF: .text:loc_40C3A8↓o
.text:0040C0A2                 align 10h
.text:0040C0B0 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040C0B0                                         ; DATA XREF: .text:0040C3DF↓o
.text:0040C0D0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40C3ED↓o
.text:0040C0DC aServer         db ' Server',0          ; DATA XREF: .text:0040C416↓o
.text:0040C0DC                                         ; .text:loc_40C58E↓o
.text:0040C0E4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40C428↓o
.text:0040C0F5 aDatacenterServ db ' Datacenter Server',0
.text:0040C0F5                                         ; DATA XREF: .text:loc_40C432↓o
.text:0040C108 aStandardEditio db ' Standard Edition',0
.text:0040C108                                         ; DATA XREF: .text:0040C45A↓o
.text:0040C11A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40C464↓o
.text:0040C127 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040C127                                         ; DATA XREF: .text:loc_40C46E↓o
.text:0040C13B aDatacenterEdit db ' Datacenter Edition',0
.text:0040C13B                                         ; DATA XREF: .text:loc_40C478↓o
.text:0040C14F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040C48B↓o
.text:0040C15D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40C495↓o
.text:0040C15D                                         ; .text:loc_40C5A0↓o
.text:0040C16B                 align 10h
.text:0040C170 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040C170                                         ; DATA XREF: .text:0040C4C2↓o
.text:0040C1A0 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040C509↓o
.text:0040C1AC aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040C544↓o
.text:0040C1B2 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040C55B↓o
.text:0040C1BB aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040C572↓o
.text:0040C1C4                 align 10h
.text:0040C1D0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040C1D0                                         ; DATA XREF: .text:0040C6E7↓o
.text:0040C1F3                 db 1Dh dup(90h)
.text:0040C210 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040C210                                         ; DATA XREF: .text:0040C746↓o
.text:0040C236 ; ---------------------------------------------------------------------------
.text:0040C236
.text:0040C236 loc_40C236:                             ; DATA XREF: .text:loc_40C7B1↓o
.text:0040C236                 and     [ebx+45h], dl
.text:0040C239                 add     [eax], ah
.text:0040C23B                 push    ebx
.text:0040C23C                 push    eax
.text:0040C23D                 xor     [eax], eax
.text:0040C23F
.text:0040C23F loc_40C23F:                             ; DATA XREF: .text:loc_40C82B↓o
.text:0040C23F                 and     [edi+53h], cl
.text:0040C242                 push    edx
.text:0040C243                 xor     al, [eax]
.text:0040C245                 lea     esi, [esi+0]
.text:0040C249                 lea     edi, [edi+0]
.text:0040C250                 push    edi
.text:0040C251                 push    esi
.text:0040C252                 push    ebx
.text:0040C253                 sub     esp, 130h
.text:0040C259                 mov     ebx, [esp+140h]
.text:0040C260                 call    sub_40C960
.text:0040C265                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040C26A                 cmp     eax, 1
.text:0040C26D                 jz      loc_40C710
.text:0040C273                 cmp     eax, 1
.text:0040C276                 jb      loc_40C6E6
.text:0040C27C                 cmp     eax, 2
.text:0040C27F                 jz      loc_40C330
.text:0040C285                 cmp     eax, 3
.text:0040C288                 jz      short loc_40C2EF
.text:0040C28A                 lea     esi, [esi+0]
.text:0040C290
.text:0040C290 loc_40C290:                             ; CODE XREF: .text:0040C325↓j
.text:0040C290                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040C296                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040C29C
.text:0040C29C loc_40C29C:                             ; CODE XREF: .text:0040C72F↓j
.text:0040C29C                 mov     [esp+10h], edx
.text:0040C2A0                 mov     ebx, [esp+144h]
.text:0040C2A7                 mov     [esp+0Ch], ecx
.text:0040C2AB                 mov     [esp+8], eax
.text:0040C2AF                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040C2B7                 mov     [esp], ebx
.text:0040C2BA                 call    sprintf
.text:0040C2BF                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040C2C7                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040C2CD                 mov     ecx, [esp+148h]
.text:0040C2D4                 mov     [esp+8], edi
.text:0040C2D8                 mov     [esp], ecx
.text:0040C2DB                 call    sprintf
.text:0040C2E0                 mov     eax, 1
.text:0040C2E5
.text:0040C2E5 loc_40C2E5:                             ; CODE XREF: .text:0040C4DF↓j
.text:0040C2E5                                         ; .text:0040C52C↓j
.text:0040C2E5                 add     esp, 130h
.text:0040C2EB                 pop     ebx
.text:0040C2EC                 pop     esi
.text:0040C2ED                 pop     edi
.text:0040C2EE                 retn
.text:0040C2EF ; ---------------------------------------------------------------------------
.text:0040C2EF
.text:0040C2EF loc_40C2EF:                             ; CODE XREF: .text:0040C288↑j
.text:0040C2EF                 mov     dword ptr [ebx], 7263694Dh
.text:0040C2F5                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C2FC                 mov     dword ptr [ebx+8], 69572074h
.text:0040C303                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C30A                 mov     dword ptr [ebx+10h], 45432073h
.text:0040C311                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040C317                 mov     esi, esi
.text:0040C319                 lea     edi, [edi+0]
.text:0040C320
.text:0040C320 loc_40C320:                             ; CODE XREF: .text:0040C3C8↓j
.text:0040C320                                         ; .text:0040C709↓j ...
.text:0040C320                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040C325                 jmp     loc_40C290
.text:0040C325 ; ---------------------------------------------------------------------------
.text:0040C32A                 align 10h
.text:0040C330
.text:0040C330 loc_40C330:                             ; CODE XREF: .text:0040C27F↑j
.text:0040C330                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040C336                 cmp     edx, 3
.text:0040C339                 mov     eax, edx
.text:0040C33B                 jz      loc_40C6A5
.text:0040C341
.text:0040C341 loc_40C341:                             ; CODE XREF: .text:0040C6AC↓j
.text:0040C341                 cmp     eax, 4
.text:0040C344                 jz      loc_40C665
.text:0040C34A
.text:0040C34A loc_40C34A:                             ; CODE XREF: .text:0040C66D↓j
.text:0040C34A                 cmp     eax, 4
.text:0040C34D                 ja      loc_40C5B2
.text:0040C353                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040C359                 test    ecx, ecx
.text:0040C35B                 jnz     loc_40C5B2
.text:0040C361                 mov     dword ptr [ebx], 7263694Dh
.text:0040C367                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C36E                 mov     dword ptr [ebx+8], 69572074h
.text:0040C375                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C37C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040C383
.text:0040C383 loc_40C383:                             ; CODE XREF: .text:0040C625↓j
.text:0040C383                 mov     byte ptr [ebx+14h], 0
.text:0040C387
.text:0040C387 loc_40C387:                             ; CODE XREF: .text:0040C5B5↓j
.text:0040C387                                         ; .text:0040C5CC↓j ...
.text:0040C387                 mov     esi, dword_410080
.text:0040C38D                 test    esi, esi
.text:0040C38F                 jz      loc_40C4A2
.text:0040C395                 movzx   eax, ds:byte_4114EA
.text:0040C39C                 cmp     al, 1
.text:0040C39E                 jz      loc_40C482
.text:0040C3A4                 cmp     al, 3
.text:0040C3A6                 jz      short loc_40C3CD
.text:0040C3A8
.text:0040C3A8 loc_40C3A8:                             ; CODE XREF: .text:0040C3EB↓j
.text:0040C3A8                                         ; .text:0040C426↓j ...
.text:0040C3A8                 mov     dword ptr [esp+4], offset asc_40C0A0 ; " "
.text:0040C3B0                 mov     [esp], ebx
.text:0040C3B3                 call    strcat
.text:0040C3B8                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040C3C0                 mov     [esp], ebx
.text:0040C3C3                 call    strcat
.text:0040C3C8                 jmp     loc_40C320
.text:0040C3CD ; ---------------------------------------------------------------------------
.text:0040C3CD
.text:0040C3CD loc_40C3CD:                             ; CODE XREF: .text:0040C3A6↑j
.text:0040C3CD                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040C3D4                 jz      short loc_40C3F6
.text:0040C3D6
.text:0040C3D6 loc_40C3D6:                             ; CODE XREF: .text:0040C402↓j
.text:0040C3D6                 test    byte ptr ds:word_4114E8, 2
.text:0040C3DD                 jz      short loc_40C3ED
.text:0040C3DF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040C3E6
.text:0040C3E6 loc_40C3E6:                             ; CODE XREF: .text:0040C3F4↓j
.text:0040C3E6                 call    printf
.text:0040C3EB                 jmp     short loc_40C3A8
.text:0040C3ED ; ---------------------------------------------------------------------------
.text:0040C3ED
.text:0040C3ED loc_40C3ED:                             ; CODE XREF: .text:0040C3DD↑j
.text:0040C3ED                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040C3F4                 jmp     short loc_40C3E6
.text:0040C3F6 ; ---------------------------------------------------------------------------
.text:0040C3F6
.text:0040C3F6 loc_40C3F6:                             ; CODE XREF: .text:0040C3D4↑j
.text:0040C3F6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040C3FB                 cmp     eax, 2
.text:0040C3FE                 jz      short loc_40C440
.text:0040C400                 test    eax, eax
.text:0040C402                 jnz     short loc_40C3D6
.text:0040C404                 cmp     byte ptr ds:word_4114E8, 0
.text:0040C40B                 js      short loc_40C432
.text:0040C40D                 test    byte ptr ds:word_4114E8, 2
.text:0040C414                 jnz     short loc_40C428
.text:0040C416                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040C41E
.text:0040C41E loc_40C41E:                             ; CODE XREF: .text:0040C430↓j
.text:0040C41E                                         ; .text:0040C43A↓j ...
.text:0040C41E                 mov     [esp], ebx
.text:0040C421                 call    strcat
.text:0040C426                 jmp     short loc_40C3A8
.text:0040C428 ; ---------------------------------------------------------------------------
.text:0040C428
.text:0040C428 loc_40C428:                             ; CODE XREF: .text:0040C414↑j
.text:0040C428                                         ; .text:0040C589↓j
.text:0040C428                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040C430                 jmp     short loc_40C41E
.text:0040C432 ; ---------------------------------------------------------------------------
.text:0040C432
.text:0040C432 loc_40C432:                             ; CODE XREF: .text:0040C40B↑j
.text:0040C432                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040C43A                 jmp     short loc_40C41E
.text:0040C43A ; ---------------------------------------------------------------------------
.text:0040C43C                 align 10h
.text:0040C440
.text:0040C440 loc_40C440:                             ; CODE XREF: .text:0040C3FE↑j
.text:0040C440                 cmp     byte ptr ds:word_4114E8, 0
.text:0040C447                 js      short loc_40C478
.text:0040C449                 movzx   eax, ds:word_4114E8
.text:0040C450                 test    al, 2
.text:0040C452                 jnz     short loc_40C46E
.text:0040C454                 cmp     ax, 400h
.text:0040C458                 jz      short loc_40C464
.text:0040C45A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040C462                 jmp     short loc_40C41E
.text:0040C464 ; ---------------------------------------------------------------------------
.text:0040C464
.text:0040C464 loc_40C464:                             ; CODE XREF: .text:0040C458↑j
.text:0040C464                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040C46C                 jmp     short loc_40C41E
.text:0040C46E ; ---------------------------------------------------------------------------
.text:0040C46E
.text:0040C46E loc_40C46E:                             ; CODE XREF: .text:0040C452↑j
.text:0040C46E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040C476                 jmp     short loc_40C41E
.text:0040C478 ; ---------------------------------------------------------------------------
.text:0040C478
.text:0040C478 loc_40C478:                             ; CODE XREF: .text:0040C447↑j
.text:0040C478                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040C480                 jmp     short loc_40C41E
.text:0040C482 ; ---------------------------------------------------------------------------
.text:0040C482
.text:0040C482 loc_40C482:                             ; CODE XREF: .text:0040C39E↑j
.text:0040C482                 test    byte ptr ds:word_4114E8+1, 2
.text:0040C489                 jz      short loc_40C495
.text:0040C48B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040C493                 jmp     short loc_40C41E
.text:0040C495 ; ---------------------------------------------------------------------------
.text:0040C495
.text:0040C495 loc_40C495:                             ; CODE XREF: .text:0040C489↑j
.text:0040C495                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040C49D                 jmp     loc_40C41E
.text:0040C4A2 ; ---------------------------------------------------------------------------
.text:0040C4A2
.text:0040C4A2 loc_40C4A2:                             ; CODE XREF: .text:0040C38F↑j
.text:0040C4A2                 mov     dword ptr [esp+28h], 0FFh
.text:0040C4AA                 lea     edx, [esp+2Ch]
.text:0040C4AE                 mov     [esp+10h], edx
.text:0040C4B2                 mov     dword ptr [esp+0Ch], 1
.text:0040C4BA                 mov     dword ptr [esp+8], 0
.text:0040C4C2                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040C4CA                 mov     dword ptr [esp], 80000002h
.text:0040C4D1                 call    RegOpenKeyExA
.text:0040C4D6                 mov     edi, eax
.text:0040C4D8                 sub     esp, 14h
.text:0040C4DB                 xor     eax, eax
.text:0040C4DD                 test    edi, edi
.text:0040C4DF                 jnz     loc_40C2E5
.text:0040C4E5                 mov     dword ptr [esp+0Ch], 0
.text:0040C4ED                 mov     edi, [esp+2Ch]
.text:0040C4F1                 lea     esi, [esp+28h]
.text:0040C4F5                 mov     [esp+14h], esi
.text:0040C4F9                 lea     esi, [esp+30h]
.text:0040C4FD                 mov     [esp+10h], esi
.text:0040C501                 mov     dword ptr [esp+8], 0
.text:0040C509                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040C511                 mov     [esp], edi
.text:0040C514                 call    RegQueryValueExA
.text:0040C519                 sub     esp, 18h
.text:0040C51C                 test    eax, eax
.text:0040C51E                 jnz     short loc_40C52A
.text:0040C520                 cmp     dword ptr [esp+28h], 0FFh
.text:0040C528                 jbe     short loc_40C531
.text:0040C52A
.text:0040C52A loc_40C52A:                             ; CODE XREF: .text:0040C51E↑j
.text:0040C52A                 xor     eax, eax
.text:0040C52C                 jmp     loc_40C2E5
.text:0040C531 ; ---------------------------------------------------------------------------
.text:0040C531
.text:0040C531 loc_40C531:                             ; CODE XREF: .text:0040C528↑j
.text:0040C531                 mov     edx, [esp+2Ch]
.text:0040C535                 mov     [esp], edx
.text:0040C538                 call    RegCloseKey
.text:0040C53D                 sub     esp, 4
.text:0040C540                 mov     [esp+4], esi
.text:0040C544                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040C54B                 call    lstrcmpiA
.text:0040C550                 sub     esp, 8
.text:0040C553                 test    eax, eax
.text:0040C555                 jz      short loc_40C5A0
.text:0040C557
.text:0040C557 loc_40C557:                             ; CODE XREF: .text:0040C5B0↓j
.text:0040C557                 mov     [esp+4], esi
.text:0040C55B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040C562                 call    lstrcmpiA
.text:0040C567                 sub     esp, 8
.text:0040C56A                 test    eax, eax
.text:0040C56C                 jz      short loc_40C58E
.text:0040C56E
.text:0040C56E loc_40C56E:                             ; CODE XREF: .text:0040C59E↓j
.text:0040C56E                 mov     [esp+4], esi
.text:0040C572                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040C579                 call    lstrcmpiA
.text:0040C57E                 sub     esp, 8
.text:0040C581                 test    eax, eax
.text:0040C583                 jnz     loc_40C3A8
.text:0040C589                 jmp     loc_40C428
.text:0040C58E ; ---------------------------------------------------------------------------
.text:0040C58E
.text:0040C58E loc_40C58E:                             ; CODE XREF: .text:0040C56C↑j
.text:0040C58E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040C596                 mov     [esp], ebx
.text:0040C599                 call    strcat
.text:0040C59E                 jmp     short loc_40C56E
.text:0040C5A0 ; ---------------------------------------------------------------------------
.text:0040C5A0
.text:0040C5A0 loc_40C5A0:                             ; CODE XREF: .text:0040C555↑j
.text:0040C5A0                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040C5A8                 mov     [esp], ebx
.text:0040C5AB                 call    strcat
.text:0040C5B0                 jmp     short loc_40C557
.text:0040C5B2 ; ---------------------------------------------------------------------------
.text:0040C5B2
.text:0040C5B2 loc_40C5B2:                             ; CODE XREF: .text:0040C34D↑j
.text:0040C5B2                                         ; .text:0040C35B↑j
.text:0040C5B2                 cmp     eax, 5
.text:0040C5B5                 jnz     loc_40C387
.text:0040C5BB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040C5C0                 cmp     eax, 2
.text:0040C5C3                 jz      short loc_40C62A
.text:0040C5C5                 cmp     eax, 1
.text:0040C5C8                 jz      short loc_40C603
.text:0040C5CA                 test    eax, eax
.text:0040C5CC                 jnz     loc_40C387
.text:0040C5D2                 mov     dword ptr [ebx], 7263694Dh
.text:0040C5D8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C5DF                 mov     dword ptr [ebx+8], 69572074h
.text:0040C5E6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C5ED                 mov     dword ptr [ebx+10h], 30322073h
.text:0040C5F4                 mov     word ptr [ebx+14h], 3030h
.text:0040C5FA                 mov     byte ptr [ebx+16h], 0
.text:0040C5FE                 jmp     loc_40C387
.text:0040C603 ; ---------------------------------------------------------------------------
.text:0040C603
.text:0040C603 loc_40C603:                             ; CODE XREF: .text:0040C5C8↑j
.text:0040C603                 mov     dword ptr [ebx], 7263694Dh
.text:0040C609                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C610                 mov     dword ptr [ebx+8], 69572074h
.text:0040C617                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C61E                 mov     dword ptr [ebx+10h], 50582073h
.text:0040C625                 jmp     loc_40C383
.text:0040C62A ; ---------------------------------------------------------------------------
.text:0040C62A
.text:0040C62A loc_40C62A:                             ; CODE XREF: .text:0040C5C3↑j
.text:0040C62A                 mov     dword ptr [ebx], 7263694Dh
.text:0040C630                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C637                 mov     dword ptr [ebx+8], 69572074h
.text:0040C63E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C645                 mov     dword ptr [ebx+10h], 65532073h
.text:0040C64C                 mov     dword ptr [ebx+14h], 72657672h
.text:0040C653                 mov     dword ptr [ebx+18h], 30303220h
.text:0040C65A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040C660                 jmp     loc_40C387
.text:0040C665 ; ---------------------------------------------------------------------------
.text:0040C665
.text:0040C665 loc_40C665:                             ; CODE XREF: .text:0040C344↑j
.text:0040C665                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040C66B                 test    edx, edx
.text:0040C66D                 jnz     loc_40C34A
.text:0040C673                 mov     dword ptr [ebx], 7263694Dh
.text:0040C679                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C680                 mov     dword ptr [ebx+8], 69572074h
.text:0040C687                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C68E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040C695                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040C69C                 mov     byte ptr [ebx+18h], 0
.text:0040C6A0                 jmp     loc_40C387
.text:0040C6A5 ; ---------------------------------------------------------------------------
.text:0040C6A5
.text:0040C6A5 loc_40C6A5:                             ; CODE XREF: .text:0040C33B↑j
.text:0040C6A5                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040C6AC                 jnz     loc_40C341
.text:0040C6B2                 mov     dword ptr [ebx], 7263694Dh
.text:0040C6B8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C6BF                 mov     dword ptr [ebx+8], 69572074h
.text:0040C6C6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C6CD                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040C6D4                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040C6DB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040C6E1                 jmp     loc_40C387
.text:0040C6E6 ; ---------------------------------------------------------------------------
.text:0040C6E6
.text:0040C6E6 loc_40C6E6:                             ; CODE XREF: .text:0040C276↑j
.text:0040C6E6                 cld
.text:0040C6E7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040C6EC                 mov     ecx, 8
.text:0040C6F1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040C6F8                 mov     edi, ebx
.text:0040C6FA                 rep movsd
.text:0040C6FC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040C703                 mov     [edi+2], dl
.text:0040C706                 mov     [edi], si
.text:0040C709                 jmp     loc_40C320
.text:0040C709 ; ---------------------------------------------------------------------------
.text:0040C70E                 align 10h
.text:0040C710
.text:0040C710 loc_40C710:                             ; CODE XREF: .text:0040C26D↑j
.text:0040C710                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040C716                 cmp     ecx, 4
.text:0040C719                 jz      loc_40C7D0
.text:0040C71F
.text:0040C71F loc_40C71F:                             ; CODE XREF: .text:0040C826↓j
.text:0040C71F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040C725
.text:0040C725 loc_40C725:                             ; CODE XREF: .text:0040C7D8↓j
.text:0040C725                 cmp     ecx, 4
.text:0040C728                 jz      short loc_40C734
.text:0040C72A
.text:0040C72A loc_40C72A:                             ; CODE XREF: .text:0040C73C↓j
.text:0040C72A                                         ; .text:0040C741↓j
.text:0040C72A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040C72F                 jmp     loc_40C29C
.text:0040C734 ; ---------------------------------------------------------------------------
.text:0040C734
.text:0040C734 loc_40C734:                             ; CODE XREF: .text:0040C728↑j
.text:0040C734                 cmp     edx, 0Ah
.text:0040C737                 jz      short loc_40C761
.text:0040C739
.text:0040C739 loc_40C739:                             ; CODE XREF: .text:0040C7AF↓j
.text:0040C739                 cmp     ecx, 4
.text:0040C73C                 jnz     short loc_40C72A
.text:0040C73E                 cmp     edx, 5Ah ; 'Z'
.text:0040C741                 jnz     short loc_40C72A
.text:0040C743                 cld
.text:0040C744                 mov     edi, ebx
.text:0040C746                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040C74B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040C752                 mov     ecx, 9
.text:0040C757                 rep movsd
.text:0040C759                 mov     [edi], bx
.text:0040C75C                 jmp     loc_40C320
.text:0040C761 ; ---------------------------------------------------------------------------
.text:0040C761
.text:0040C761 loc_40C761:                             ; CODE XREF: .text:0040C737↑j
.text:0040C761                 mov     dword ptr [ebx], 7263694Dh
.text:0040C767                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C76E                 mov     dword ptr [ebx+8], 69572074h
.text:0040C775                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C77C                 mov     dword ptr [ebx+10h], 38392073h
.text:0040C783                 mov     byte ptr [ebx+14h], 0
.text:0040C787                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040C78D                 lea     edi, [edx-7CFh]
.text:0040C793                 cmp     edi, 0B7h ; '·'
.text:0040C799                 jbe     short loc_40C7C3
.text:0040C79B                 cmp     edx, 886h
.text:0040C7A1                 ja      short loc_40C7B1
.text:0040C7A3
.text:0040C7A3 loc_40C7A3:                             ; CODE XREF: .text:0040C7C1↓j
.text:0040C7A3                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040C7A9                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040C7AF                 jmp     short loc_40C739
.text:0040C7B1 ; ---------------------------------------------------------------------------
.text:0040C7B1
.text:0040C7B1 loc_40C7B1:                             ; CODE XREF: .text:0040C7A1↑j
.text:0040C7B1                 mov     dword ptr [esp+4], offset loc_40C236
.text:0040C7B9
.text:0040C7B9 loc_40C7B9:                             ; CODE XREF: .text:0040C7CB↓j
.text:0040C7B9                 mov     [esp], ebx
.text:0040C7BC                 call    strcat
.text:0040C7C1                 jmp     short loc_40C7A3
.text:0040C7C3 ; ---------------------------------------------------------------------------
.text:0040C7C3
.text:0040C7C3 loc_40C7C3:                             ; CODE XREF: .text:0040C799↑j
.text:0040C7C3                 mov     dword ptr [esp+4], 40C23Ah
.text:0040C7CB                 jmp     short loc_40C7B9
.text:0040C7CB ; ---------------------------------------------------------------------------
.text:0040C7CD                 align 10h
.text:0040C7D0
.text:0040C7D0 loc_40C7D0:                             ; CODE XREF: .text:0040C719↑j
.text:0040C7D0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040C7D6                 test    edx, edx
.text:0040C7D8                 jnz     loc_40C725
.text:0040C7DE                 mov     dword ptr [ebx], 7263694Dh
.text:0040C7E4                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C7EB                 mov     dword ptr [ebx+8], 69572074h
.text:0040C7F2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C7F9                 mov     dword ptr [ebx+10h], 35392073h
.text:0040C800                 mov     byte ptr [ebx+14h], 0
.text:0040C804                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040C80A                 lea     ecx, [edx-3B7h]
.text:0040C810                 cmp     ecx, 81h
.text:0040C816                 jbe     short loc_40C83D
.text:0040C818                 cmp     edx, 438h
.text:0040C81E                 ja      short loc_40C82B
.text:0040C820
.text:0040C820 loc_40C820:                             ; CODE XREF: .text:0040C83B↓j
.text:0040C820                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040C826                 jmp     loc_40C71F
.text:0040C82B ; ---------------------------------------------------------------------------
.text:0040C82B
.text:0040C82B loc_40C82B:                             ; CODE XREF: .text:0040C81E↑j
.text:0040C82B                 mov     dword ptr [esp+4], offset loc_40C23F
.text:0040C833
.text:0040C833 loc_40C833:                             ; CODE XREF: .text:0040C845↓j
.text:0040C833                 mov     [esp], ebx
.text:0040C836                 call    strcat
.text:0040C83B                 jmp     short loc_40C820
.text:0040C83D ; ---------------------------------------------------------------------------
.text:0040C83D
.text:0040C83D loc_40C83D:                             ; CODE XREF: .text:0040C816↑j
.text:0040C83D                 mov     dword ptr [esp+4], 40C23Ah
.text:0040C845                 jmp     short loc_40C833
.text:0040C845 ; ---------------------------------------------------------------------------
.text:0040C847                 align 10h
.text:0040C850
.text:0040C850 ; =============== S U B R O U T I N E =======================================
.text:0040C850
.text:0040C850
.text:0040C850 sub_40C850      proc near               ; CODE XREF: .text:0040A30E↑p
.text:0040C850                                         ; sub_40A790+12A↑p
.text:0040C850                 sub     esp, 0Ch
.text:0040C853                 call    sub_40C960
.text:0040C858                 mov     eax, ds:dword_411440
.text:0040C85D                 add     esp, 0Ch
.text:0040C860                 retn
.text:0040C860 sub_40C850      endp
.text:0040C860
.text:0040C861 ; ---------------------------------------------------------------------------
.text:0040C861                 jmp     short loc_40C870
.text:0040C861 ; ---------------------------------------------------------------------------
.text:0040C863                 align 10h
.text:0040C870
.text:0040C870 loc_40C870:                             ; CODE XREF: .text:0040C861↑j
.text:0040C870                 sub     esp, 0Ch
.text:0040C873                 call    sub_40C960
.text:0040C878                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040C87D                 add     esp, 0Ch
.text:0040C880                 retn
.text:0040C881 ; ---------------------------------------------------------------------------
.text:0040C881                 jmp     short loc_40C890
.text:0040C881 ; ---------------------------------------------------------------------------
.text:0040C883                 align 10h
.text:0040C890
.text:0040C890 loc_40C890:                             ; CODE XREF: .text:0040C881↑j
.text:0040C890                 sub     esp, 0Ch
.text:0040C893                 call    sub_40C960
.text:0040C898                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040C89D                 add     esp, 0Ch
.text:0040C8A0                 retn
.text:0040C8A1 ; ---------------------------------------------------------------------------
.text:0040C8A1                 jmp     short loc_40C8B0
.text:0040C8A1 ; ---------------------------------------------------------------------------
.text:0040C8A3                 align 10h
.text:0040C8B0
.text:0040C8B0 loc_40C8B0:                             ; CODE XREF: .text:0040C8A1↑j
.text:0040C8B0                 sub     esp, 0Ch
.text:0040C8B3                 call    sub_40C960
.text:0040C8B8                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040C8BD                 add     esp, 0Ch
.text:0040C8C0                 retn
.text:0040C8C1 ; ---------------------------------------------------------------------------
.text:0040C8C1                 jmp     short loc_40C8D0
.text:0040C8C1 ; ---------------------------------------------------------------------------
.text:0040C8C3                 align 10h
.text:0040C8D0
.text:0040C8D0 loc_40C8D0:                             ; CODE XREF: .text:0040C8C1↑j
.text:0040C8D0                 sub     esp, 0Ch
.text:0040C8D3                 call    GetVersion
.text:0040C8D8                 shr     eax, 10h
.text:0040C8DB                 add     esp, 0Ch
.text:0040C8DE                 retn
.text:0040C8DE ; ---------------------------------------------------------------------------
.text:0040C8DF                 align 10h
.text:0040C8E0                 sub     esp, 0Ch
.text:0040C8E3                 call    sub_40C960
.text:0040C8E8                 xor     eax, eax
.text:0040C8EA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040C8F1                 setz    al
.text:0040C8F4                 add     esp, 0Ch
.text:0040C8F7                 retn
.text:0040C8F7 ; ---------------------------------------------------------------------------
.text:0040C8F8                 align 10h
.text:0040C900
.text:0040C900 ; =============== S U B R O U T I N E =======================================
.text:0040C900
.text:0040C900
.text:0040C900 sub_40C900      proc near               ; CODE XREF: .text:loc_40A2F4↑p
.text:0040C900                                         ; .text:0040A305↑p ...
.text:0040C900                 sub     esp, 0Ch
.text:0040C903                 call    sub_40C960
.text:0040C908                 xor     eax, eax
.text:0040C90A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040C911                 setz    al
.text:0040C914                 add     esp, 0Ch
.text:0040C917                 retn
.text:0040C917 sub_40C900      endp
.text:0040C917
.text:0040C917 ; ---------------------------------------------------------------------------
.text:0040C918                 align 10h
.text:0040C920                 sub     esp, 0Ch
.text:0040C923                 call    sub_40C960
.text:0040C928                 xor     eax, eax
.text:0040C92A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040C931                 setz    al
.text:0040C934                 add     esp, 0Ch
.text:0040C937                 retn
.text:0040C937 ; ---------------------------------------------------------------------------
.text:0040C938                 align 10h
.text:0040C940                 sub     esp, 0Ch
.text:0040C943                 call    sub_40C960
.text:0040C948                 xor     eax, eax
.text:0040C94A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040C951                 setz    al
.text:0040C954                 add     esp, 0Ch
.text:0040C957                 retn
.text:0040C957 ; ---------------------------------------------------------------------------
.text:0040C958                 align 10h
.text:0040C960
.text:0040C960 ; =============== S U B R O U T I N E =======================================
.text:0040C960
.text:0040C960
.text:0040C960 sub_40C960      proc near               ; CODE XREF: .text:0040C260↑p
.text:0040C960                                         ; sub_40C850+3↑p ...
.text:0040C960
.text:0040C960 lpVersionInformation= dword ptr -0BCh
.text:0040C960 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040C960
.text:0040C960                 sub     esp, 0BCh
.text:0040C966                 mov     edx, ds:dword_4114F0
.text:0040C96C                 test    edx, edx
.text:0040C96E                 jz      short loc_40C980
.text:0040C970
.text:0040C970 loc_40C970:                             ; CODE XREF: sub_40C960+7B↓j
.text:0040C970                 mov     edx, 1
.text:0040C975
.text:0040C975 loc_40C975:                             ; CODE XREF: sub_40C960+217↓j
.text:0040C975                 mov     eax, edx
.text:0040C977                 add     esp, 0BCh
.text:0040C97D                 retn
.text:0040C97D ; ---------------------------------------------------------------------------
.text:0040C97E                 align 10h
.text:0040C980
.text:0040C980 loc_40C980:                             ; CODE XREF: sub_40C960+E↑j
.text:0040C980                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040C987                 mov     edx, 9Ch ; 'œ'
.text:0040C98C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040C992                 call    GetVersionExA
.text:0040C997                 sub     esp, 4
.text:0040C99A                 test    eax, eax
.text:0040C99C                 jz      loc_40CB54
.text:0040C9A2
.text:0040C9A2 loc_40C9A2:                             ; CODE XREF: sub_40C960+245↓j
.text:0040C9A2                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040C9A9                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040C9AE                 cmp     eax, 1
.text:0040C9B1                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040C9B7                 jz      loc_40CAA0
.text:0040C9BD                 cmp     eax, 1
.text:0040C9C0                 jb      loc_40CA90
.text:0040C9C6                 cmp     eax, 2
.text:0040C9C9                 jz      short loc_40C9EA
.text:0040C9CB                 cmp     eax, 3
.text:0040C9CE                 jz      short loc_40C9DD
.text:0040C9D0
.text:0040C9D0 loc_40C9D0:                             ; CODE XREF: sub_40C960+88↓j
.text:0040C9D0                                         ; sub_40C960+C0↓j ...
.text:0040C9D0                 mov     edx, 1
.text:0040C9D5                 mov     ds:dword_4114F0, edx
.text:0040C9DB                 jmp     short loc_40C970
.text:0040C9DD ; ---------------------------------------------------------------------------
.text:0040C9DD
.text:0040C9DD loc_40C9DD:                             ; CODE XREF: sub_40C960+6E↑j
.text:0040C9DD                 mov     ecx, 17h
.text:0040C9E2
.text:0040C9E2 loc_40C9E2:                             ; CODE XREF: sub_40C960+1A7↓j
.text:0040C9E2                 mov     ds:dword_411440, ecx
.text:0040C9E8                 jmp     short loc_40C9D0
.text:0040C9EA ; ---------------------------------------------------------------------------
.text:0040C9EA
.text:0040C9EA loc_40C9EA:                             ; CODE XREF: sub_40C960+69↑j
.text:0040C9EA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040C9EF                 cmp     eax, 3
.text:0040C9F2                 jz      short loc_40CA6B
.text:0040C9F4                 cmp     eax, 4
.text:0040C9F7                 jz      short loc_40CA5A
.text:0040C9F9
.text:0040C9F9 loc_40C9F9:                             ; CODE XREF: sub_40C960+102↓j
.text:0040C9F9                 cmp     eax, 4
.text:0040C9FC                 ja      short loc_40CA22
.text:0040C9FE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040CA04                 test    ecx, ecx
.text:0040CA06                 jnz     short loc_40CA22
.text:0040CA08                 mov     edx, 1Eh
.text:0040CA0D
.text:0040CA0D loc_40CA0D:                             ; CODE XREF: sub_40C960+DF↓j
.text:0040CA0D                 mov     ds:dword_411440, edx
.text:0040CA13
.text:0040CA13 loc_40CA13:                             ; CODE XREF: sub_40C960+C5↓j
.text:0040CA13                                         ; sub_40C960+D8↓j ...
.text:0040CA13                 movzx   ecx, ds:word_4114E4
.text:0040CA1A                 add     ds:dword_411440, ecx
.text:0040CA20                 jmp     short loc_40C9D0
.text:0040CA22 ; ---------------------------------------------------------------------------
.text:0040CA22
.text:0040CA22 loc_40CA22:                             ; CODE XREF: sub_40C960+9C↑j
.text:0040CA22                                         ; sub_40C960+A6↑j
.text:0040CA22                 cmp     eax, 5
.text:0040CA25                 jnz     short loc_40CA13
.text:0040CA27                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040CA2C                 cmp     eax, 2
.text:0040CA2F                 jz      short loc_40CA4E
.text:0040CA31                 cmp     eax, 1
.text:0040CA34                 jz      short loc_40CA41
.text:0040CA36                 test    eax, eax
.text:0040CA38                 jnz     short loc_40CA13
.text:0040CA3A                 mov     edx, 32h ; '2'
.text:0040CA3F                 jmp     short loc_40CA0D
.text:0040CA41 ; ---------------------------------------------------------------------------
.text:0040CA41
.text:0040CA41 loc_40CA41:                             ; CODE XREF: sub_40C960+D4↑j
.text:0040CA41                 mov     ecx, 3Ch ; '<'
.text:0040CA46
.text:0040CA46 loc_40CA46:                             ; CODE XREF: sub_40C960+122↓j
.text:0040CA46                 mov     ds:dword_411440, ecx
.text:0040CA4C                 jmp     short loc_40CA13
.text:0040CA4E ; ---------------------------------------------------------------------------
.text:0040CA4E
.text:0040CA4E loc_40CA4E:                             ; CODE XREF: sub_40C960+CF↑j
.text:0040CA4E                 mov     eax, 46h ; 'F'
.text:0040CA53
.text:0040CA53 loc_40CA53:                             ; CODE XREF: sub_40C960+109↓j
.text:0040CA53                                         ; sub_40C960+129↓j
.text:0040CA53                 mov     ds:dword_411440, eax
.text:0040CA58                 jmp     short loc_40CA13
.text:0040CA5A ; ---------------------------------------------------------------------------
.text:0040CA5A
.text:0040CA5A loc_40CA5A:                             ; CODE XREF: sub_40C960+97↑j
.text:0040CA5A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040CA60                 test    ecx, ecx
.text:0040CA62                 jnz     short loc_40C9F9
.text:0040CA64                 mov     eax, 28h ; '('
.text:0040CA69                 jmp     short loc_40CA53
.text:0040CA6B ; ---------------------------------------------------------------------------
.text:0040CA6B
.text:0040CA6B loc_40CA6B:                             ; CODE XREF: sub_40C960+92↑j
.text:0040CA6B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040CA70                 cmp     eax, 33h ; '3'
.text:0040CA73                 jz      short loc_40CA84
.text:0040CA75                 cmp     eax, 5
.text:0040CA78                 setz    cl
.text:0040CA7B                 movzx   edx, cl
.text:0040CA7E                 lea     ecx, [edx+edx*4+1Eh]
.text:0040CA82                 jmp     short loc_40CA46
.text:0040CA84 ; ---------------------------------------------------------------------------
.text:0040CA84
.text:0040CA84 loc_40CA84:                             ; CODE XREF: sub_40C960+113↑j
.text:0040CA84                 mov     eax, 24h ; '$'
.text:0040CA89                 jmp     short loc_40CA53
.text:0040CA89 ; ---------------------------------------------------------------------------
.text:0040CA8B                 align 10h
.text:0040CA90
.text:0040CA90 loc_40CA90:                             ; CODE XREF: sub_40C960+60↑j
.text:0040CA90                 mov     edx, 2
.text:0040CA95                 mov     ds:dword_411440, edx
.text:0040CA9B                 jmp     loc_40C9D0
.text:0040CAA0 ; ---------------------------------------------------------------------------
.text:0040CAA0
.text:0040CAA0 loc_40CAA0:                             ; CODE XREF: sub_40C960+57↑j
.text:0040CAA0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040CAA6                 cmp     ecx, 4
.text:0040CAA9                 jnz     loc_40C9D0
.text:0040CAAF                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040CAB4                 test    eax, eax
.text:0040CAB6                 jnz     short loc_40CADA
.text:0040CAB8                 mov     eax, 0Ah
.text:0040CABD                 mov     ds:dword_411440, eax
.text:0040CAC2                 lea     eax, [edx-3B7h]
.text:0040CAC8                 cmp     eax, 81h
.text:0040CACD                 ja      short loc_40CB45
.text:0040CACF                 mov     edx, 0Bh
.text:0040CAD4
.text:0040CAD4 loc_40CAD4:                             ; CODE XREF: sub_40C960+1F2↓j
.text:0040CAD4                 mov     ds:dword_411440, edx
.text:0040CADA
.text:0040CADA loc_40CADA:                             ; CODE XREF: sub_40C960+156↑j
.text:0040CADA                                         ; sub_40C960+1EB↓j
.text:0040CADA                 cmp     ecx, 4
.text:0040CADD                 jnz     loc_40C9D0
.text:0040CAE3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040CAEA                 jz      short loc_40CB0C
.text:0040CAEC
.text:0040CAEC loc_40CAEC:                             ; CODE XREF: sub_40C960+1D4↓j
.text:0040CAEC                                         ; sub_40C960+1DC↓j
.text:0040CAEC                 cmp     ecx, 4
.text:0040CAEF                 jnz     loc_40C9D0
.text:0040CAF5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040CAFC                 jnz     loc_40C9D0
.text:0040CB02                 mov     ecx, 12h
.text:0040CB07                 jmp     loc_40C9E2
.text:0040CB0C ; ---------------------------------------------------------------------------
.text:0040CB0C
.text:0040CB0C loc_40CB0C:                             ; CODE XREF: sub_40C960+18A↑j
.text:0040CB0C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040CB12                 mov     eax, 0Eh
.text:0040CB17                 mov     ds:dword_411440, eax
.text:0040CB1C                 lea     eax, [edx-7CFh]
.text:0040CB22                 cmp     eax, 0B7h ; '·'
.text:0040CB27                 ja      short loc_40CB36
.text:0040CB29                 mov     edx, 0Fh
.text:0040CB2E
.text:0040CB2E loc_40CB2E:                             ; CODE XREF: sub_40C960+1E3↓j
.text:0040CB2E                 mov     ds:dword_411440, edx
.text:0040CB34                 jmp     short loc_40CAEC
.text:0040CB36 ; ---------------------------------------------------------------------------
.text:0040CB36
.text:0040CB36 loc_40CB36:                             ; CODE XREF: sub_40C960+1C7↑j
.text:0040CB36                 cmp     edx, 886h
.text:0040CB3C                 jbe     short loc_40CAEC
.text:0040CB3E                 mov     edx, 10h
.text:0040CB43                 jmp     short loc_40CB2E
.text:0040CB45 ; ---------------------------------------------------------------------------
.text:0040CB45
.text:0040CB45 loc_40CB45:                             ; CODE XREF: sub_40C960+16D↑j
.text:0040CB45                 cmp     edx, 438h
.text:0040CB4B                 jbe     short loc_40CADA
.text:0040CB4D                 mov     edx, 0Ch
.text:0040CB52                 jmp     short loc_40CAD4
.text:0040CB54 ; ---------------------------------------------------------------------------
.text:0040CB54
.text:0040CB54 loc_40CB54:                             ; CODE XREF: sub_40C960+3C↑j
.text:0040CB54                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040CB5C                 xor     edx, edx
.text:0040CB5E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040CB62                 mov     dword_410080, edx
.text:0040CB68                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040CB6B                 call    GetVersionExA
.text:0040CB70                 sub     esp, 4
.text:0040CB73                 xor     edx, edx
.text:0040CB75                 test    eax, eax
.text:0040CB77                 jz      loc_40C975
.text:0040CB7D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040CB81                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040CB85                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040CB8B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040CB8F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040CB95                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040CB99                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040CB9F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040CBA5                 jmp     loc_40C9A2
.text:0040CBA5 sub_40C960      endp
.text:0040CBA5
.text:0040CBA5 ; ---------------------------------------------------------------------------
.text:0040CBAA                 align 10h
.text:0040CBB0
.text:0040CBB0 ; =============== S U B R O U T I N E =======================================
.text:0040CBB0
.text:0040CBB0 ; Attributes: noreturn
.text:0040CBB0
.text:0040CBB0 sub_40CBB0      proc near               ; CODE XREF: .text:0040B799↑p
.text:0040CBB0                                         ; sub_40CBB0↓j
.text:0040CBB0                 jmp     short sub_40CBB0
.text:0040CBB0 sub_40CBB0      endp
.text:0040CBB0
.text:0040CBB0 ; ---------------------------------------------------------------------------
.text:0040CBB2                 align 10h
.text:0040CBC0
.text:0040CBC0 ; =============== S U B R O U T I N E =======================================
.text:0040CBC0
.text:0040CBC0
.text:0040CBC0 sub_40CBC0      proc near               ; CODE XREF: .text:0040B4F5↑p
.text:0040CBC0
.text:0040CBC0 FileHandle      = dword ptr -1Ch
.text:0040CBC0 dwFileOffsetLow = dword ptr -18h
.text:0040CBC0 dwFileOffsetHigh= dword ptr -14h
.text:0040CBC0 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040CBC0 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040CBC0 var_8           = dword ptr -8
.text:0040CBC0 var_4           = dword ptr -4
.text:0040CBC0 arg_0           = dword ptr  4
.text:0040CBC0
.text:0040CBC0                 sub     esp, 1Ch
.text:0040CBC3                 mov     edx, [esp+1Ch+arg_0]
.text:0040CBC7                 mov     [esp+1Ch+var_4], esi
.text:0040CBCB                 mov     [esp+1Ch+var_8], ebx
.text:0040CBCF                 mov     ebx, [edx+10h]
.text:0040CBD2                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040CBD5                 call    _get_osfhandle
.text:0040CBDA                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040CBDD                 mov     esi, eax
.text:0040CBDF                 call    _filelengthi64
.text:0040CBE4                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040CBE8                 cdq
.text:0040CBE9                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040CBEC                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040CBF0                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040CBF8                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040CC00                 call    UnlockFile
.text:0040CC05                 sub     esp, 14h
.text:0040CC08                 mov     ebx, [esp+1Ch+var_8]
.text:0040CC0C                 mov     esi, [esp+1Ch+var_4]
.text:0040CC10                 add     esp, 1Ch
.text:0040CC13                 retn
.text:0040CC13 sub_40CBC0      endp
.text:0040CC13
.text:0040CC13 ; ---------------------------------------------------------------------------
.text:0040CC14                 align 10h
.text:0040CC20
.text:0040CC20 ; =============== S U B R O U T I N E =======================================
.text:0040CC20
.text:0040CC20
.text:0040CC20 ; int __cdecl sub_40CC20(int, char *Control)
.text:0040CC20 sub_40CC20      proc near               ; CODE XREF: .text:0040B3B6↑p
.text:0040CC20                                         ; .text:0040B406↑p ...
.text:0040CC20
.text:0040CC20 Str             = dword ptr -1Ch
.text:0040CC20 Val             = dword ptr -18h
.text:0040CC20 var_8           = dword ptr -8
.text:0040CC20 var_4           = dword ptr -4
.text:0040CC20 arg_0           = dword ptr  4
.text:0040CC20 Control         = dword ptr  8
.text:0040CC20
.text:0040CC20                 sub     esp, 1Ch
.text:0040CC23                 xor     eax, eax
.text:0040CC25                 mov     edx, [esp+1Ch+Control]
.text:0040CC29                 mov     [esp+1Ch+var_4], esi
.text:0040CC2D                 mov     esi, [esp+1Ch+arg_0]
.text:0040CC31                 mov     [esp+1Ch+var_8], ebx
.text:0040CC35                 mov     ebx, [esi]
.text:0040CC37                 test    ebx, ebx
.text:0040CC39                 jz      short loc_40CC68
.text:0040CC3B                 movzx   eax, byte ptr [edx]
.text:0040CC3E                 test    al, al
.text:0040CC40                 jz      short loc_40CC60
.text:0040CC42                 cmp     byte ptr [edx+1], 0
.text:0040CC46                 jnz     short loc_40CCA0
.text:0040CC48                 movzx   ecx, byte ptr [ebx]
.text:0040CC4B                 mov     edx, ebx
.text:0040CC4D                 cmp     cl, al
.text:0040CC4F                 jz      short loc_40CC92
.text:0040CC51                 test    cl, cl
.text:0040CC53                 jnz     short loc_40CC74
.text:0040CC55                 lea     esi, [esi+0]
.text:0040CC59                 lea     edi, [edi+0]
.text:0040CC60
.text:0040CC60 loc_40CC60:                             ; CODE XREF: sub_40CC20+20↑j
.text:0040CC60                                         ; sub_40CC20+74↓j
.text:0040CC60                 mov     dword ptr [esi], 0
.text:0040CC66
.text:0040CC66 loc_40CC66:                             ; CODE XREF: sub_40CC20+7C↓j
.text:0040CC66                 mov     eax, ebx
.text:0040CC68
.text:0040CC68 loc_40CC68:                             ; CODE XREF: sub_40CC20+19↑j
.text:0040CC68                 mov     ebx, [esp+1Ch+var_8]
.text:0040CC6C                 mov     esi, [esp+1Ch+var_4]
.text:0040CC70                 add     esp, 1Ch
.text:0040CC73                 retn
.text:0040CC74 ; ---------------------------------------------------------------------------
.text:0040CC74
.text:0040CC74 loc_40CC74:                             ; CODE XREF: sub_40CC20+33↑j
.text:0040CC74                 movsx   edx, al
.text:0040CC77                 mov     [esp+1Ch+Val], edx ; Val
.text:0040CC7B                 lea     edx, [ebx+1]
.text:0040CC7E                 mov     [esp+1Ch+Str], edx ; Str
.text:0040CC81                 call    strchr
.text:0040CC86                 lea     esi, [esi+0]
.text:0040CC89                 lea     edi, [edi+0]
.text:0040CC90
.text:0040CC90 loc_40CC90:                             ; CODE XREF: sub_40CC20+8C↓j
.text:0040CC90                 mov     edx, eax
.text:0040CC92
.text:0040CC92 loc_40CC92:                             ; CODE XREF: sub_40CC20+2F↑j
.text:0040CC92                 test    edx, edx
.text:0040CC94                 jz      short loc_40CC60
.text:0040CC96                 mov     byte ptr [edx], 0
.text:0040CC99                 inc     edx
.text:0040CC9A                 mov     [esi], edx
.text:0040CC9C                 jmp     short loc_40CC66
.text:0040CC9C ; ---------------------------------------------------------------------------
.text:0040CC9E                 align 10h
.text:0040CCA0
.text:0040CCA0 loc_40CCA0:                             ; CODE XREF: sub_40CC20+26↑j
.text:0040CCA0                 mov     [esp+1Ch+Val], edx ; Control
.text:0040CCA4                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040CCA7                 call    strpbrk
.text:0040CCAC                 jmp     short loc_40CC90
.text:0040CCAC sub_40CC20      endp
.text:0040CCAC
.text:0040CCAC ; ---------------------------------------------------------------------------
.text:0040CCAE                 align 10h
.text:0040CCB0 ; const char aTmpf[]
.text:0040CCB0 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40CCC0+20↓o
.text:0040CCB5 ; const char aWBd[]
.text:0040CCB5 aWBd            db 'w+bD',0             ; DATA XREF: sub_40CCC0+5E↓o
.text:0040CCBA                 align 10h
.text:0040CCC0
.text:0040CCC0 ; =============== S U B R O U T I N E =======================================
.text:0040CCC0
.text:0040CCC0
.text:0040CCC0 sub_40CCC0      proc near               ; CODE XREF: sub_40BE2F+A4↑p
.text:0040CCC0
.text:0040CCC0 FileHandle      = dword ptr -13Ch
.text:0040CCC0 Format          = dword ptr -138h
.text:0040CCC0 var_134         = dword ptr -134h
.text:0040CCC0 var_130         = dword ptr -130h
.text:0040CCC0 var_12C         = dword ptr -12Ch
.text:0040CCC0 Buffer          = byte ptr -11Ch
.text:0040CCC0 var_8           = dword ptr -8
.text:0040CCC0 var_4           = dword ptr -4
.text:0040CCC0
.text:0040CCC0                 sub     esp, 13Ch
.text:0040CCC6                 mov     [esp+13Ch+var_8], ebx
.text:0040CCCD                 lea     ebx, [esp+13Ch+Buffer]
.text:0040CCD1                 mov     [esp+13Ch+var_4], esi
.text:0040CCD8                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040CCE0                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040CCE8                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040CCF0                 mov     [esp+13Ch+Format], 104h ; int
.text:0040CCF8                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040CCFB                 call    sub_40CD90
.text:0040CD00                 xor     edx, edx
.text:0040CD02                 test    eax, eax
.text:0040CD04                 jnz     short loc_40CD36
.text:0040CD06                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040CD09                 mov     [esp+13Ch+Format], 0 ; int
.text:0040CD11                 call    sub_40D110
.text:0040CD16                 xor     edx, edx
.text:0040CD18                 mov     ebx, eax
.text:0040CD1A                 test    eax, eax
.text:0040CD1C                 js      short loc_40CD36
.text:0040CD1E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040CD26                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040CD29                 call    _fdopen
.text:0040CD2E                 test    eax, eax
.text:0040CD30                 mov     esi, eax
.text:0040CD32                 jz      short loc_40CD4D
.text:0040CD34
.text:0040CD34 loc_40CD34:                             ; CODE XREF: sub_40CCC0+95↓j
.text:0040CD34                 mov     edx, esi
.text:0040CD36
.text:0040CD36 loc_40CD36:                             ; CODE XREF: sub_40CCC0+44↑j
.text:0040CD36                                         ; sub_40CCC0+5C↑j
.text:0040CD36                 mov     ebx, [esp+13Ch+var_8]
.text:0040CD3D                 mov     eax, edx
.text:0040CD3F                 mov     esi, [esp+13Ch+var_4]
.text:0040CD46                 add     esp, 13Ch
.text:0040CD4C                 retn
.text:0040CD4D ; ---------------------------------------------------------------------------
.text:0040CD4D
.text:0040CD4D loc_40CD4D:                             ; CODE XREF: sub_40CCC0+72↑j
.text:0040CD4D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040CD50                 call    _close
.text:0040CD55                 jmp     short loc_40CD34
.text:0040CD55 sub_40CCC0      endp
.text:0040CD55
.text:0040CD55 ; ---------------------------------------------------------------------------
.text:0040CD57                 align 10h
.text:0040CD60 aFile           db 'file',0             ; DATA XREF: sub_40CD90:loc_40CDBC↓o
.text:0040CD65 ; const char aSSxxxxxx[]
.text:0040CD65 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40CD90+9B↓o
.text:0040CD75 ; const char aTemp[]
.text:0040CD75 aTemp           db 'TEMP',0             ; DATA XREF: sub_40CD90:loc_40CE72↓o
.text:0040CD75                                         ; sub_40CD90:loc_40CEB2↓o ...
.text:0040CD7A ; const char aTmp[]
.text:0040CD7A aTmp            db '/tmp',0             ; DATA XREF: sub_40CD90+12F↓o
.text:0040CD7A                                         ; sub_40CD90+141↓o ...
.text:0040CD7F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40CD90:loc_40CF30↓o
.text:0040CD86 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40CD90:loc_40CFC0↓o
.text:0040CD8A                 align 10h
.text:0040CD90
.text:0040CD90 ; =============== S U B R O U T I N E =======================================
.text:0040CD90
.text:0040CD90
.text:0040CD90 ; int __cdecl sub_40CD90(char *Buffer, int, char *, char *, int)
.text:0040CD90 sub_40CD90      proc near               ; CODE XREF: sub_40CCC0+3B↑p
.text:0040CD90
.text:0040CD90 Str             = dword ptr -1BCh
.text:0040CD90 Format          = dword ptr -1B8h
.text:0040CD90 var_1B4         = dword ptr -1B4h
.text:0040CD90 var_1B0         = dword ptr -1B0h
.text:0040CD90 var_1AC         = dword ptr -1ACh
.text:0040CD90 var_1A8         = dword ptr -1A8h
.text:0040CD90 var_19C         = dword ptr -19Ch
.text:0040CD90 var_13C         = dword ptr -13Ch
.text:0040CD90 var_DC          = dword ptr -0DCh
.text:0040CD90 var_7C          = dword ptr -7Ch
.text:0040CD90 Buffer          = dword ptr  4
.text:0040CD90 arg_4           = dword ptr  8
.text:0040CD90 arg_8           = dword ptr  0Ch
.text:0040CD90 arg_C           = dword ptr  10h
.text:0040CD90 arg_10          = dword ptr  14h
.text:0040CD90
.text:0040CD90                 push    ebp
.text:0040CD91                 push    edi
.text:0040CD92                 push    esi
.text:0040CD93                 push    ebx
.text:0040CD94                 sub     esp, 1ACh
.text:0040CD9A                 mov     eax, [esp+1BCh+arg_C]
.text:0040CDA1                 mov     esi, [esp+1BCh+arg_8]
.text:0040CDA8                 test    eax, eax
.text:0040CDAA                 jz      short loc_40CDBC
.text:0040CDAC                 mov     edx, [esp+1BCh+arg_C]
.text:0040CDB3                 cmp     byte ptr [edx], 0
.text:0040CDB6                 jnz     loc_40CFF0
.text:0040CDBC
.text:0040CDBC loc_40CDBC:                             ; CODE XREF: sub_40CD90+1A↑j
.text:0040CDBC                 mov     eax, offset aFile ; "file"
.text:0040CDC1                 mov     ebp, 4
.text:0040CDC6                 mov     [esp+1BCh+arg_C], eax
.text:0040CDCD
.text:0040CDCD loc_40CDCD:                             ; CODE XREF: sub_40CD90+274↓j
.text:0040CDCD                                         ; sub_40CD90+27F↓j
.text:0040CDCD                 mov     ebx, [esp+1BCh+arg_10]
.text:0040CDD4                 test    ebx, ebx
.text:0040CDD6                 jnz     loc_40CF30
.text:0040CDDC
.text:0040CDDC loc_40CDDC:                             ; CODE XREF: sub_40CD90+21C↓j
.text:0040CDDC                                         ; sub_40CD90+224↓j ...
.text:0040CDDC                 test    esi, esi
.text:0040CDDE                 jz      loc_40CE72
.text:0040CDE4
.text:0040CDE4 loc_40CDE4:                             ; CODE XREF: sub_40CD90+176↓j
.text:0040CDE4                                         ; sub_40CD90+19A↓j
.text:0040CDE4                 mov     [esp+1BCh+Str], esi ; Str
.text:0040CDE7                 call    strlen
.text:0040CDEC                 test    eax, eax
.text:0040CDEE                 mov     edx, eax
.text:0040CDF0                 jz      short loc_40CE00
.text:0040CDF2                 movzx   eax, byte ptr [eax+esi-1]
.text:0040CDF7                 cmp     al, 2Fh ; '/'
.text:0040CDF9                 jz      short loc_40CE60
.text:0040CDFB                 cmp     al, 5Ch ; '\'
.text:0040CDFD                 jz      short loc_40CE60
.text:0040CDFF                 nop
.text:0040CE00
.text:0040CE00 loc_40CE00:                             ; CODE XREF: sub_40CD90+60↑j
.text:0040CE00                                         ; sub_40CD90+D1↓j ...
.text:0040CE00                 lea     edi, [ebp+edx+8]
.text:0040CE04                 cmp     [esp+1BCh+arg_4], edi
.text:0040CE0B                 jb      short loc_40CE48
.text:0040CE0D                 mov     [esp+1BCh+var_1AC], ebp
.text:0040CE11                 mov     ecx, [esp+1BCh+arg_C]
.text:0040CE18                 mov     ebp, [esp+1BCh+Buffer]
.text:0040CE1F                 mov     [esp+1BCh+var_1B0], esi
.text:0040CE23                 mov     [esp+1BCh+var_1A8], ecx
.text:0040CE27                 mov     [esp+1BCh+var_1B4], edx
.text:0040CE2B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040CE33                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040CE36                 call    sprintf
.text:0040CE3B                 xor     eax, eax
.text:0040CE3D
.text:0040CE3D loc_40CE3D:                             ; CODE XREF: sub_40CD90+C8↓j
.text:0040CE3D                 add     esp, 1ACh
.text:0040CE43                 pop     ebx
.text:0040CE44                 pop     esi
.text:0040CE45                 pop     edi
.text:0040CE46                 pop     ebp
.text:0040CE47                 retn
.text:0040CE48 ; ---------------------------------------------------------------------------
.text:0040CE48
.text:0040CE48 loc_40CE48:                             ; CODE XREF: sub_40CD90+7B↑j
.text:0040CE48                 call    _errno
.text:0040CE4D                 mov     dword ptr [eax], 16h
.text:0040CE53
.text:0040CE53 loc_40CE53:                             ; CODE XREF: sub_40CD90+187↓j
.text:0040CE53                 mov     eax, 0FFFFFFFFh
.text:0040CE58                 jmp     short loc_40CE3D
.text:0040CE58 ; ---------------------------------------------------------------------------
.text:0040CE5A                 align 10h
.text:0040CE60
.text:0040CE60 loc_40CE60:                             ; CODE XREF: sub_40CD90+69↑j
.text:0040CE60                                         ; sub_40CD90+6D↑j ...
.text:0040CE60                 dec     edx
.text:0040CE61                 jz      short loc_40CE00
.text:0040CE63                 movzx   eax, byte ptr [edx+esi-1]
.text:0040CE68                 cmp     al, 2Fh ; '/'
.text:0040CE6A                 jz      short loc_40CE60
.text:0040CE6C                 cmp     al, 5Ch ; '\'
.text:0040CE6E                 jz      short loc_40CE60
.text:0040CE70                 jmp     short loc_40CE00
.text:0040CE72 ; ---------------------------------------------------------------------------
.text:0040CE72
.text:0040CE72 loc_40CE72:                             ; CODE XREF: sub_40CD90+4E↑j
.text:0040CE72                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040CE79                 lea     esi, [esp+1BCh+var_13C]
.text:0040CE80                 call    getenv
.text:0040CE85                 mov     [esp+1BCh+Format], eax ; char *
.text:0040CE89                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040CE8D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040CE94                 call    sub_407910
.text:0040CE99                 test    eax, eax
.text:0040CE9B                 jnz     short loc_40CEB2
.text:0040CE9D                 mov     edi, [esp+1BCh+var_13C]
.text:0040CEA4                 and     edi, 0F000h
.text:0040CEAA                 cmp     edi, 4000h
.text:0040CEB0                 jz      short loc_40CF1C
.text:0040CEB2
.text:0040CEB2 loc_40CEB2:                             ; CODE XREF: sub_40CD90+10B↑j
.text:0040CEB2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040CEB9                 call    getenv
.text:0040CEBE                 cld
.text:0040CEBF                 mov     edx, offset aTmp ; "/tmp"
.text:0040CEC4                 mov     esi, eax
.text:0040CEC6                 mov     ecx, 5
.text:0040CECB                 mov     edi, edx
.text:0040CECD                 repe cmpsb
.text:0040CECF                 jz      short loc_40CF0C
.text:0040CED1                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040CED9                 lea     ecx, [esp+1BCh+var_19C]
.text:0040CEDD                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040CEE1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040CEE8                 call    sub_407910
.text:0040CEED                 test    eax, eax
.text:0040CEEF                 jnz     short loc_40CF0C
.text:0040CEF1                 mov     ebx, [esp+1BCh+var_19C]
.text:0040CEF5                 mov     esi, offset aTmp ; "/tmp"
.text:0040CEFA                 and     ebx, 0F000h
.text:0040CF00                 cmp     ebx, 4000h
.text:0040CF06                 jz      loc_40CDE4
.text:0040CF0C
.text:0040CF0C loc_40CF0C:                             ; CODE XREF: sub_40CD90+13F↑j
.text:0040CF0C                                         ; sub_40CD90+15F↑j
.text:0040CF0C                 call    _errno
.text:0040CF11                 mov     dword ptr [eax], 2
.text:0040CF17                 jmp     loc_40CE53
.text:0040CF1C ; ---------------------------------------------------------------------------
.text:0040CF1C
.text:0040CF1C loc_40CF1C:                             ; CODE XREF: sub_40CD90+120↑j
.text:0040CF1C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040CF23                 call    getenv
.text:0040CF28                 mov     esi, eax
.text:0040CF2A                 jmp     loc_40CDE4
.text:0040CF2A ; ---------------------------------------------------------------------------
.text:0040CF2F                 align 10h
.text:0040CF30
.text:0040CF30 loc_40CF30:                             ; CODE XREF: sub_40CD90+46↑j
.text:0040CF30                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040CF37                 call    sub_40D620
.text:0040CF3C                 test    eax, eax
.text:0040CF3E                 mov     ebx, eax
.text:0040CF40                 jz      short loc_40CFC0
.text:0040CF42
.text:0040CF42 loc_40CF42:                             ; CODE XREF: sub_40CD90+240↓j
.text:0040CF42                                         ; sub_40CD90+256↓j
.text:0040CF42                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040CF46                 lea     edi, [esp+1BCh+var_7C]
.text:0040CF4D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040CF51                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040CF58                 call    sub_407910
.text:0040CF5D                 test    eax, eax
.text:0040CF5F                 jnz     short loc_40CF76
.text:0040CF61                 mov     edx, [esp+1BCh+var_7C]
.text:0040CF68                 and     edx, 0F000h
.text:0040CF6E                 cmp     edx, 4000h
.text:0040CF74                 jz      short loc_40CFB9
.text:0040CF76
.text:0040CF76 loc_40CF76:                             ; CODE XREF: sub_40CD90+1CF↑j
.text:0040CF76                                         ; sub_40CD90+25C↓j
.text:0040CF76                 test    esi, esi
.text:0040CF78                 jz      short loc_40CFB2
.text:0040CF7A                 mov     [esp+1BCh+Format], esi ; char *
.text:0040CF7E                 lea     ecx, [esp+1BCh+var_DC]
.text:0040CF85                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040CF89                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040CF90                 call    sub_407910
.text:0040CF95                 test    eax, eax
.text:0040CF97                 jnz     short loc_40CFB2
.text:0040CF99                 mov     ebx, [esp+1BCh+var_DC]
.text:0040CFA0                 and     ebx, 0F000h
.text:0040CFA6                 cmp     ebx, 4000h
.text:0040CFAC                 jz      loc_40CDDC
.text:0040CFB2
.text:0040CFB2 loc_40CFB2:                             ; CODE XREF: sub_40CD90+1E8↑j
.text:0040CFB2                                         ; sub_40CD90+207↑j
.text:0040CFB2                 xor     esi, esi
.text:0040CFB4                 jmp     loc_40CDDC
.text:0040CFB9 ; ---------------------------------------------------------------------------
.text:0040CFB9
.text:0040CFB9 loc_40CFB9:                             ; CODE XREF: sub_40CD90+1E4↑j
.text:0040CFB9                 mov     esi, ebx
.text:0040CFBB                 jmp     loc_40CDDC
.text:0040CFC0 ; ---------------------------------------------------------------------------
.text:0040CFC0
.text:0040CFC0 loc_40CFC0:                             ; CODE XREF: sub_40CD90+1B0↑j
.text:0040CFC0                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040CFC7                 call    sub_40D620
.text:0040CFCC                 test    eax, eax
.text:0040CFCE                 mov     ebx, eax
.text:0040CFD0                 jnz     loc_40CF42
.text:0040CFD6                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040CFDD                 call    sub_40D620
.text:0040CFE2                 test    eax, eax
.text:0040CFE4                 mov     ebx, eax
.text:0040CFE6                 jnz     loc_40CF42
.text:0040CFEC                 jmp     short loc_40CF76
.text:0040CFEC ; ---------------------------------------------------------------------------
.text:0040CFEE                 align 10h
.text:0040CFF0
.text:0040CFF0 loc_40CFF0:                             ; CODE XREF: sub_40CD90+26↑j
.text:0040CFF0                 mov     ecx, [esp+1BCh+arg_C]
.text:0040CFF7                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040CFFA                 call    strlen
.text:0040CFFF                 cmp     eax, 5
.text:0040D002                 mov     ebp, eax
.text:0040D004                 jbe     loc_40CDCD
.text:0040D00A                 mov     ebp, 5
.text:0040D00F                 jmp     loc_40CDCD
.text:0040D00F sub_40CD90      endp
.text:0040D00F
.text:0040D00F ; ---------------------------------------------------------------------------
.text:0040D014                 align 10h
.text:0040D020 byte_40D020     db 61h                  ; DATA XREF: sub_40D110+DC↓r
.text:0040D020                                         ; sub_40D110+122↓r ...
.text:0040D021 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040D05F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40D110+39↓o
.text:0040D066                 align 20h
.text:0040D080 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040D080                                         ; DATA XREF: sub_40D110:loc_40D388↓o
.text:0040D09F                 align 10h
.text:0040D0A0 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040D0A0                                         ; DATA XREF: sub_40D110+405↓o
.text:0040D0CB                 align 20h
.text:0040D0E0 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040D0E0                                         ; DATA XREF: sub_40D110+40D↓o
.text:0040D103                 align 10h
.text:0040D110
.text:0040D110 ; =============== S U B R O U T I N E =======================================
.text:0040D110
.text:0040D110
.text:0040D110 ; int __cdecl sub_40D110(char *FileName, int)
.text:0040D110 sub_40D110      proc near               ; CODE XREF: sub_40CCC0+51↑p
.text:0040D110
.text:0040D110 Str             = dword ptr -9Ch
.text:0040D110 OpenFlag        = dword ptr -98h
.text:0040D110 var_94          = dword ptr -94h
.text:0040D110 var_90          = dword ptr -90h
.text:0040D110 var_8C          = dword ptr -8Ch
.text:0040D110 var_88          = dword ptr -88h
.text:0040D110 var_84          = dword ptr -84h
.text:0040D110 var_80          = dword ptr -80h
.text:0040D110 var_7C          = dword ptr -7Ch
.text:0040D110 FileName        = dword ptr  4
.text:0040D110 arg_4           = dword ptr  8
.text:0040D110
.text:0040D110                 push    ebp
.text:0040D111                 push    edi
.text:0040D112                 push    esi
.text:0040D113                 push    ebx
.text:0040D114                 sub     esp, 8Ch
.text:0040D11A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040D122                 call    _errno
.text:0040D127                 mov     edx, [eax]
.text:0040D129                 mov     [esp+9Ch+var_8C], edx
.text:0040D12D                 mov     edx, [esp+9Ch+FileName]
.text:0040D134                 mov     [esp+9Ch+Str], edx ; Str
.text:0040D137                 call    strlen
.text:0040D13C                 cmp     eax, 5
.text:0040D13F                 jle     short loc_40D15D
.text:0040D141                 cld
.text:0040D142                 mov     ecx, [esp+9Ch+FileName]
.text:0040D149                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040D14E                 lea     esi, [eax+ecx-6]
.text:0040D152                 mov     ecx, 7
.text:0040D157                 mov     ebp, esi
.text:0040D159                 repe cmpsb
.text:0040D15B                 jz      short loc_40D178
.text:0040D15D
.text:0040D15D loc_40D15D:                             ; CODE XREF: sub_40D110+2F↑j
.text:0040D15D                 call    _errno
.text:0040D162                 mov     dword ptr [eax], 16h
.text:0040D168
.text:0040D168 loc_40D168:                             ; CODE XREF: sub_40D110+295↓j
.text:0040D168                                         ; sub_40D110+2D8↓j ...
.text:0040D168                 mov     eax, 0FFFFFFFFh
.text:0040D16D
.text:0040D16D loc_40D16D:                             ; CODE XREF: sub_40D110+2EF↓j
.text:0040D16D                                         ; sub_40D110+332↓j
.text:0040D16D                 add     esp, 8Ch
.text:0040D173                 pop     ebx
.text:0040D174                 pop     esi
.text:0040D175                 pop     edi
.text:0040D176                 pop     ebp
.text:0040D177                 retn
.text:0040D178 ; ---------------------------------------------------------------------------
.text:0040D178
.text:0040D178 loc_40D178:                             ; CODE XREF: sub_40D110+4B↑j
.text:0040D178                 mov     ecx, ds:dword_411504
.text:0040D17E                 mov     edi, ds:dword_411500
.text:0040D184                 mov     eax, ecx
.text:0040D186                 or      eax, edi
.text:0040D188                 jz      loc_40D4C3
.text:0040D18E
.text:0040D18E loc_40D18E:                             ; CODE XREF: sub_40D110+3F8↓j
.text:0040D18E                 rdtsc
.text:0040D190                 mov     edi, edx
.text:0040D192                 mov     esi, eax
.text:0040D194                 call    _getpid
.text:0040D199                 mov     ebx, eax
.text:0040D19B                 mov     edx, esi
.text:0040D19D                 sar     ebx, 1Fh
.text:0040D1A0                 xor     edx, eax
.text:0040D1A2                 mov     ecx, edi
.text:0040D1A4                 xor     ecx, ebx
.text:0040D1A6                 mov     ebx, edx
.text:0040D1A8                 mov     esi, ecx
.text:0040D1AA                 add     ebx, ds:dword_411500
.text:0040D1B0                 adc     esi, ds:dword_411504
.text:0040D1B6                 xor     edi, edi
.text:0040D1B8                 mov     ds:dword_411500, ebx
.text:0040D1BE                 mov     ds:dword_411504, esi
.text:0040D1C4                 lea     esi, [esi+0]
.text:0040D1CA                 lea     edi, [edi+0]
.text:0040D1D0
.text:0040D1D0 loc_40D1D0:                             ; CODE XREF: sub_40D110+2C7↓j
.text:0040D1D0                 mov     [esp+9Ch+Str], ebx
.text:0040D1D3                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D1D7                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D1DF                 mov     [esp+9Ch+var_90], 0
.text:0040D1E7                 call    sub_40EE70
.text:0040D1EC                 movzx   ecx, ds:byte_40D020[eax]
.text:0040D1F3                 mov     [ebp+0], cl
.text:0040D1F6                 mov     [esp+9Ch+Str], ebx
.text:0040D1F9                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D1FD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D205                 mov     [esp+9Ch+var_90], 0
.text:0040D20D                 call    sub_40ED50
.text:0040D212                 mov     [esp+9Ch+Str], eax
.text:0040D215                 mov     ebx, eax
.text:0040D217                 mov     esi, edx
.text:0040D219                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D221                 mov     [esp+9Ch+var_90], 0
.text:0040D229                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D22D                 call    sub_40EE70
.text:0040D232                 movzx   edx, ds:byte_40D020[eax]
.text:0040D239                 mov     [ebp+1], dl
.text:0040D23C                 mov     [esp+9Ch+Str], ebx
.text:0040D23F                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D243                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D24B                 mov     [esp+9Ch+var_90], 0
.text:0040D253                 call    sub_40ED50
.text:0040D258                 mov     [esp+9Ch+Str], eax
.text:0040D25B                 mov     ebx, eax
.text:0040D25D                 mov     esi, edx
.text:0040D25F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D267                 mov     [esp+9Ch+var_90], 0
.text:0040D26F                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D273                 call    sub_40EE70
.text:0040D278                 movzx   ecx, ds:byte_40D020[eax]
.text:0040D27F                 mov     [ebp+2], cl
.text:0040D282                 mov     [esp+9Ch+Str], ebx
.text:0040D285                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D289                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D291                 mov     [esp+9Ch+var_90], 0
.text:0040D299                 call    sub_40ED50
.text:0040D29E                 mov     [esp+9Ch+Str], eax
.text:0040D2A1                 mov     ebx, eax
.text:0040D2A3                 mov     esi, edx
.text:0040D2A5                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D2AD                 mov     [esp+9Ch+var_90], 0
.text:0040D2B5                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D2B9                 call    sub_40EE70
.text:0040D2BE                 movzx   edx, ds:byte_40D020[eax]
.text:0040D2C5                 mov     [ebp+3], dl
.text:0040D2C8                 mov     [esp+9Ch+Str], ebx
.text:0040D2CB                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D2CF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D2D7                 mov     [esp+9Ch+var_90], 0
.text:0040D2DF                 call    sub_40ED50
.text:0040D2E4                 mov     [esp+9Ch+Str], eax
.text:0040D2E7                 mov     ebx, eax
.text:0040D2E9                 mov     esi, edx
.text:0040D2EB                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D2F3                 mov     [esp+9Ch+var_90], 0
.text:0040D2FB                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D2FF                 call    sub_40EE70
.text:0040D304                 movzx   ecx, ds:byte_40D020[eax]
.text:0040D30B                 mov     [ebp+4], cl
.text:0040D30E                 mov     [esp+9Ch+Str], ebx
.text:0040D311                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D319                 mov     [esp+9Ch+var_90], 0
.text:0040D321                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D325                 call    sub_40ED50
.text:0040D32A                 mov     [esp+9Ch+Str], eax
.text:0040D32D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D335                 mov     [esp+9Ch+var_90], 0
.text:0040D33D                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D341                 call    sub_40EE70
.text:0040D346                 movzx   ebx, ds:byte_40D020[eax]
.text:0040D34D                 mov     [ebp+5], bl
.text:0040D350                 cmp     [esp+9Ch+arg_4], 1
.text:0040D358                 jz      loc_40D4A7
.text:0040D35E                 cmp     [esp+9Ch+arg_4], 1
.text:0040D366                 jle     loc_40D470
.text:0040D36C                 cmp     [esp+9Ch+arg_4], 2
.text:0040D374                 jz      loc_40D447
.text:0040D37A                 cmp     [esp+9Ch+arg_4], 3
.text:0040D382                 jz      loc_40D404
.text:0040D388
.text:0040D388 loc_40D388:                             ; CODE XREF: sub_40D110+369↓j
.text:0040D388                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040D38D                 test    ebx, ebx
.text:0040D38F                 jnz     loc_40D50D
.text:0040D395
.text:0040D395 loc_40D395:                             ; CODE XREF: sub_40D110+354↓j
.text:0040D395                 mov     eax, [esp+9Ch+var_88]
.text:0040D399                 test    eax, eax
.text:0040D39B                 jns     short loc_40D3F0
.text:0040D39D                 call    _errno
.text:0040D3A2                 cmp     dword ptr [eax], 11h
.text:0040D3A5                 jnz     loc_40D168
.text:0040D3AB
.text:0040D3AB loc_40D3AB:                             ; CODE XREF: sub_40D110+315↓j
.text:0040D3AB                 mov     edx, ds:dword_411500
.text:0040D3B1                 mov     ecx, ds:dword_411504
.text:0040D3B7                 add     edx, 1E61h
.text:0040D3BD                 adc     ecx, 0
.text:0040D3C0                 mov     ebx, edx
.text:0040D3C2                 inc     edi
.text:0040D3C3                 mov     ds:dword_411500, edx
.text:0040D3C9                 cmp     edi, 3A2F8h
.text:0040D3CF                 mov     esi, ecx
.text:0040D3D1                 mov     ds:dword_411504, ecx
.text:0040D3D7                 jb      loc_40D1D0
.text:0040D3DD                 call    _errno
.text:0040D3E2                 mov     dword ptr [eax], 11h
.text:0040D3E8                 jmp     loc_40D168
.text:0040D3E8 ; ---------------------------------------------------------------------------
.text:0040D3ED                 align 10h
.text:0040D3F0
.text:0040D3F0 loc_40D3F0:                             ; CODE XREF: sub_40D110+28B↑j
.text:0040D3F0                 call    _errno
.text:0040D3F5                 mov     esi, [esp+9Ch+var_8C]
.text:0040D3F9                 mov     [eax], esi
.text:0040D3FB                 mov     eax, [esp+9Ch+var_88]
.text:0040D3FF                 jmp     loc_40D16D
.text:0040D404 ; ---------------------------------------------------------------------------
.text:0040D404
.text:0040D404 loc_40D404:                             ; CODE XREF: sub_40D110+272↑j
.text:0040D404                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040D40B                 mov     ecx, [esp+9Ch+FileName]
.text:0040D412                 lea     esi, [esp+9Ch+var_7C]
.text:0040D416                 mov     [esp+9Ch+var_94], esi ; int
.text:0040D41A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040D41E                 call    sub_407890
.text:0040D423                 test    eax, eax
.text:0040D425                 jns     short loc_40D3AB
.text:0040D427                 call    _errno
.text:0040D42C                 cmp     dword ptr [eax], 2
.text:0040D42F                 jnz     loc_40D168
.text:0040D435                 call    _errno
.text:0040D43A                 mov     ebx, [esp+9Ch+var_8C]
.text:0040D43E                 mov     [eax], ebx
.text:0040D440                 xor     eax, eax
.text:0040D442                 jmp     loc_40D16D
.text:0040D447 ; ---------------------------------------------------------------------------
.text:0040D447
.text:0040D447 loc_40D447:                             ; CODE XREF: sub_40D110+264↑j
.text:0040D447                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040D44F                 mov     edx, [esp+9Ch+FileName]
.text:0040D456                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040D459                 call    sub_40D540
.text:0040D45E                 mov     esi, esi
.text:0040D460
.text:0040D460 loc_40D460:                             ; CODE XREF: sub_40D110+395↓j
.text:0040D460                 mov     [esp+9Ch+var_88], eax
.text:0040D464                 jmp     loc_40D395
.text:0040D464 ; ---------------------------------------------------------------------------
.text:0040D469                 align 10h
.text:0040D470
.text:0040D470 loc_40D470:                             ; CODE XREF: sub_40D110+256↑j
.text:0040D470                 mov     eax, [esp+9Ch+arg_4]
.text:0040D477                 test    eax, eax
.text:0040D479                 jnz     loc_40D388
.text:0040D47F                 mov     [esp+9Ch+var_94], 180h
.text:0040D487                 mov     esi, [esp+9Ch+FileName]
.text:0040D48E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040D496                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040D499                 lea     esi, [esi+0]
.text:0040D4A0
.text:0040D4A0 loc_40D4A0:                             ; CODE XREF: sub_40D110+3B1↓j
.text:0040D4A0                 call    _open
.text:0040D4A5                 jmp     short loc_40D460
.text:0040D4A7 ; ---------------------------------------------------------------------------
.text:0040D4A7
.text:0040D4A7 loc_40D4A7:                             ; CODE XREF: sub_40D110+248↑j
.text:0040D4A7                 mov     [esp+9Ch+var_94], 180h
.text:0040D4AF                 mov     ebx, [esp+9Ch+FileName]
.text:0040D4B6                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040D4BE                 mov     [esp+9Ch+Str], ebx
.text:0040D4C1                 jmp     short loc_40D4A0
.text:0040D4C3 ; ---------------------------------------------------------------------------
.text:0040D4C3
.text:0040D4C3 loc_40D4C3:                             ; CODE XREF: sub_40D110+78↑j
.text:0040D4C3                 mov     [esp+9Ch+OpenFlag], 0
.text:0040D4CB                 lea     ebx, [esp+9Ch+var_84]
.text:0040D4CF                 mov     [esp+9Ch+Str], ebx
.text:0040D4D2                 call    sub_40D5C0
.text:0040D4D7                 mov     edi, [esp+9Ch+var_80]
.text:0040D4DB                 mov     edx, [esp+9Ch+var_84]
.text:0040D4DF                 mov     ecx, edi
.text:0040D4E1                 mov     ebx, edi
.text:0040D4E3                 shl     ecx, 10h
.text:0040D4E6                 sar     ebx, 1Fh
.text:0040D4E9                 shld    ebx, edi, 10h
.text:0040D4ED                 mov     esi, edx
.text:0040D4EF                 mov     edi, edx
.text:0040D4F1                 mov     edx, ecx
.text:0040D4F3                 sar     edi, 1Fh
.text:0040D4F6                 xor     edx, esi
.text:0040D4F8                 mov     ds:dword_411500, edx
.text:0040D4FE                 mov     esi, ebx
.text:0040D500                 xor     esi, edi
.text:0040D502                 mov     ds:dword_411504, esi
.text:0040D508                 jmp     loc_40D18E
.text:0040D50D ; ---------------------------------------------------------------------------
.text:0040D50D
.text:0040D50D loc_40D50D:                             ; CODE XREF: sub_40D110+27F↑j
.text:0040D50D                 mov     [esp+9Ch+var_94], 151h
.text:0040D515                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040D51D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040D524                 call    _assert
.text:0040D524 sub_40D110      endp
.text:0040D524
.text:0040D524 ; ---------------------------------------------------------------------------
.text:0040D529                 align 20h
.text:0040D540
.text:0040D540 ; =============== S U B R O U T I N E =======================================
.text:0040D540
.text:0040D540
.text:0040D540 ; int __cdecl sub_40D540(LPCSTR, int AccessMode)
.text:0040D540 sub_40D540      proc near               ; CODE XREF: sub_40D110+349↑p
.text:0040D540
.text:0040D540 lpPathName      = dword ptr -1Ch
.text:0040D540 lpSecurityAttributes= dword ptr -18h
.text:0040D540 var_8           = dword ptr -8
.text:0040D540 var_4           = dword ptr -4
.text:0040D540 arg_0           = dword ptr  4
.text:0040D540 AccessMode      = dword ptr  8
.text:0040D540
.text:0040D540                 sub     esp, 1Ch
.text:0040D543                 mov     [esp+1Ch+var_8], ebx
.text:0040D547                 mov     ebx, [esp+1Ch+arg_0]
.text:0040D54B                 mov     [esp+1Ch+var_4], esi
.text:0040D54F                 mov     esi, [esp+1Ch+AccessMode]
.text:0040D553                 test    ebx, ebx
.text:0040D555                 jz      short loc_40D5A5
.text:0040D557                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040D55F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040D562                 call    CreateDirectoryA
.text:0040D567                 sub     esp, 8
.text:0040D56A                 test    eax, eax
.text:0040D56C                 jz      short loc_40D586
.text:0040D56E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040D572                 mov     esi, [esp+1Ch+var_4]
.text:0040D576                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040D57A                 mov     ebx, [esp+1Ch+var_8]
.text:0040D57E                 add     esp, 1Ch
.text:0040D581                 jmp     _chmod
.text:0040D586 ; ---------------------------------------------------------------------------
.text:0040D586
.text:0040D586 loc_40D586:                             ; CODE XREF: sub_40D540+2C↑j
.text:0040D586                 call    sub_409BC0
.text:0040D58B                 mov     esi, eax
.text:0040D58D                 call    _errno
.text:0040D592                 mov     [eax], esi
.text:0040D594
.text:0040D594 loc_40D594:                             ; CODE XREF: sub_40D540+70↓j
.text:0040D594                 mov     ebx, [esp+1Ch+var_8]
.text:0040D598                 mov     eax, 0FFFFFFFFh
.text:0040D59D                 mov     esi, [esp+1Ch+var_4]
.text:0040D5A1                 add     esp, 1Ch
.text:0040D5A4                 retn
.text:0040D5A5 ; ---------------------------------------------------------------------------
.text:0040D5A5
.text:0040D5A5 loc_40D5A5:                             ; CODE XREF: sub_40D540+15↑j
.text:0040D5A5                 call    _errno
.text:0040D5AA                 mov     dword ptr [eax], 16h
.text:0040D5B0                 jmp     short loc_40D594
.text:0040D5B0 sub_40D540      endp
.text:0040D5B0
.text:0040D5B0 ; ---------------------------------------------------------------------------
.text:0040D5B2                 align 10h
.text:0040D5C0
.text:0040D5C0 ; =============== S U B R O U T I N E =======================================
.text:0040D5C0
.text:0040D5C0
.text:0040D5C0 sub_40D5C0      proc near               ; CODE XREF: sub_40D110+3C2↑p
.text:0040D5C0
.text:0040D5C0 var_1C          = dword ptr -1Ch
.text:0040D5C0 var_18          = dword ptr -18h
.text:0040D5C0 var_C           = dword ptr -0Ch
.text:0040D5C0 var_8           = dword ptr -8
.text:0040D5C0 var_4           = dword ptr -4
.text:0040D5C0 arg_0           = dword ptr  4
.text:0040D5C0 arg_4           = dword ptr  8
.text:0040D5C0
.text:0040D5C0                 sub     esp, 1Ch
.text:0040D5C3                 mov     edx, [esp+1Ch+arg_4]
.text:0040D5C7                 mov     [esp+1Ch+var_4], ebx
.text:0040D5CB                 mov     ebx, [esp+1Ch+arg_0]
.text:0040D5CF                 mov     [esp+1Ch+var_18], edx
.text:0040D5D3                 lea     edx, [esp+1Ch+var_C]
.text:0040D5D7                 mov     [esp+1Ch+var_1C], edx
.text:0040D5DA                 call    sub_40D640
.text:0040D5DF                 test    eax, eax
.text:0040D5E1                 mov     edx, 0FFFFFFFFh
.text:0040D5E6                 jnz     short loc_40D60A
.text:0040D5E8                 mov     ecx, [esp+1Ch+var_C]
.text:0040D5EC                 mov     edx, 10624DD3h
.text:0040D5F1                 mov     [ebx], ecx
.text:0040D5F3                 mov     ecx, [esp+1Ch+var_8]
.text:0040D5F7                 mov     eax, ecx
.text:0040D5F9                 imul    edx
.text:0040D5FB                 mov     eax, ecx
.text:0040D5FD                 sar     eax, 1Fh
.text:0040D600                 sar     edx, 6
.text:0040D603                 sub     edx, eax
.text:0040D605                 mov     [ebx+4], edx
.text:0040D608                 xor     edx, edx
.text:0040D60A
.text:0040D60A loc_40D60A:                             ; CODE XREF: sub_40D5C0+26↑j
.text:0040D60A                 mov     ebx, [esp+1Ch+var_4]
.text:0040D60E                 mov     eax, edx
.text:0040D610                 add     esp, 1Ch
.text:0040D613                 retn
.text:0040D613 sub_40D5C0      endp
.text:0040D613
.text:0040D613 ; ---------------------------------------------------------------------------
.text:0040D614                 align 10h
.text:0040D620
.text:0040D620 ; =============== S U B R O U T I N E =======================================
.text:0040D620
.text:0040D620
.text:0040D620 sub_40D620      proc near               ; CODE XREF: sub_40CD90+1A7↑p
.text:0040D620                                         ; sub_40CD90+237↑p ...
.text:0040D620                 mov     edx, ds:dword_4111F0
.text:0040D626                 test    edx, edx
.text:0040D628                 jnz     short loc_40D630
.text:0040D62A                 jmp     getenv
.text:0040D62A ; ---------------------------------------------------------------------------
.text:0040D62F                 align 10h
.text:0040D630
.text:0040D630 loc_40D630:                             ; CODE XREF: sub_40D620+8↑j
.text:0040D630                 xor     eax, eax
.text:0040D632                 retn
.text:0040D632 sub_40D620      endp
.text:0040D632
.text:0040D632 ; ---------------------------------------------------------------------------
.text:0040D633                 align 10h
.text:0040D640
.text:0040D640 ; =============== S U B R O U T I N E =======================================
.text:0040D640
.text:0040D640
.text:0040D640 sub_40D640      proc near               ; CODE XREF: sub_40D5C0+1A↑p
.text:0040D640
.text:0040D640 lpTimeZoneInformation= dword ptr -0DCh
.text:0040D640 var_D8          = dword ptr -0D8h
.text:0040D640 var_D4          = dword ptr -0D4h
.text:0040D640 var_D0          = dword ptr -0D0h
.text:0040D640 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040D640 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040D640 arg_0           = dword ptr  4
.text:0040D640 arg_4           = dword ptr  8
.text:0040D640
.text:0040D640                 push    edi
.text:0040D641                 push    esi
.text:0040D642                 push    ebx
.text:0040D643                 sub     esp, 0D0h
.text:0040D649                 mov     ebx, [esp+0DCh+arg_4]
.text:0040D650                 mov     edi, [esp+0DCh+arg_0]
.text:0040D657                 test    ebx, ebx
.text:0040D659                 jz      short loc_40D684
.text:0040D65B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040D65F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040D662                 call    GetTimeZoneInformation
.text:0040D667                 sub     esp, 4
.text:0040D66A                 cmp     eax, 0FFFFFFFFh
.text:0040D66D                 jz      loc_40D705
.text:0040D673                 xor     ecx, ecx
.text:0040D675                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040D679                 cmp     eax, 2
.text:0040D67C                 setz    cl
.text:0040D67F                 mov     [ebx], esi
.text:0040D681                 mov     [ebx+4], ecx
.text:0040D684
.text:0040D684 loc_40D684:                             ; CODE XREF: sub_40D640+19↑j
.text:0040D684                                         ; sub_40D640+E0↓j
.text:0040D684                 test    edi, edi
.text:0040D686                 jz      short loc_40D6F9
.text:0040D688                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040D68C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040D68F                 call    GetSystemTimeAsFileTime
.text:0040D694                 sub     esp, 4
.text:0040D697                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040D69B                 mov     [esp+0DCh+var_D4], 989680h
.text:0040D6A3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040D6A7                 mov     [esp+0DCh+var_D0], 0
.text:0040D6AF                 add     ebx, 2AC18000h
.text:0040D6B5                 adc     esi, 0FE624E21h
.text:0040D6BB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040D6BF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040D6C2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040D6C6                 mov     [esp+0DCh+var_D8], esi
.text:0040D6CA                 call    sub_40ED50
.text:0040D6CF                 mov     [edi], eax
.text:0040D6D1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040D6D4                 mov     [esp+0DCh+var_D4], 989680h
.text:0040D6DC                 mov     [esp+0DCh+var_D0], 0
.text:0040D6E4                 mov     [esp+0DCh+var_D8], esi
.text:0040D6E8                 call    sub_40EE70
.text:0040D6ED                 lea     ebx, [eax+eax*4]
.text:0040D6F0                 lea     edx, [ebx+ebx*4]
.text:0040D6F3                 shl     edx, 2
.text:0040D6F6                 mov     [edi+4], edx
.text:0040D6F9
.text:0040D6F9 loc_40D6F9:                             ; CODE XREF: sub_40D640+46↑j
.text:0040D6F9                 add     esp, 0D0h
.text:0040D6FF                 xor     eax, eax
.text:0040D701                 pop     ebx
.text:0040D702                 pop     esi
.text:0040D703                 pop     edi
.text:0040D704                 retn
.text:0040D705 ; ---------------------------------------------------------------------------
.text:0040D705
.text:0040D705 loc_40D705:                             ; CODE XREF: sub_40D640+2D↑j
.text:0040D705                 mov     dword ptr [ebx], 0
.text:0040D70B                 mov     dword ptr [ebx+4], 0
.text:0040D712                 call    sub_409BC0
.text:0040D717                 mov     esi, eax
.text:0040D719                 call    _errno
.text:0040D71E                 mov     [eax], esi
.text:0040D720                 jmp     loc_40D684
.text:0040D720 sub_40D640      endp
.text:0040D720
.text:0040D720 ; ---------------------------------------------------------------------------
.text:0040D725                 align 10h
.text:0040D730
.text:0040D730 ; =============== S U B R O U T I N E =======================================
.text:0040D730
.text:0040D730 ; Attributes: thunk
.text:0040D730
.text:0040D730 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040D730 OleInitialize   proc near               ; CODE XREF: sub_4096A0+1A↑p
.text:0040D730
.text:0040D730 pvReserved      = dword ptr  4
.text:0040D730
.text:0040D730                 jmp     ds:__imp_OleInitialize
.text:0040D730 OleInitialize   endp
.text:0040D730
.text:0040D730 ; ---------------------------------------------------------------------------
.text:0040D736                 align 10h
.text:0040D740
.text:0040D740 ; =============== S U B R O U T I N E =======================================
.text:0040D740
.text:0040D740 ; Attributes: thunk
.text:0040D740
.text:0040D740 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040D740 CoCreateInstance proc near              ; CODE XREF: sub_4096A0+52↑p
.text:0040D740
.text:0040D740 rclsid          = dword ptr  4
.text:0040D740 pUnkOuter       = dword ptr  8
.text:0040D740 dwClsContext    = dword ptr  0Ch
.text:0040D740 riid            = dword ptr  10h
.text:0040D740 ppv             = dword ptr  14h
.text:0040D740
.text:0040D740                 jmp     ds:__imp_CoCreateInstance
.text:0040D740 CoCreateInstance endp
.text:0040D740
.text:0040D740 ; ---------------------------------------------------------------------------
.text:0040D746                 align 10h
.text:0040D750
.text:0040D750 ; =============== S U B R O U T I N E =======================================
.text:0040D750
.text:0040D750 ; Attributes: thunk
.text:0040D750
.text:0040D750 ; void __stdcall CoUninitialize()
.text:0040D750 CoUninitialize  proc near               ; CODE XREF: sub_4096A0+14E↑p
.text:0040D750                                         ; sub_4096A0+16D↑p
.text:0040D750                 jmp     ds:__imp_CoUninitialize
.text:0040D750 CoUninitialize  endp
.text:0040D750
.text:0040D750 ; ---------------------------------------------------------------------------
.text:0040D756                 align 10h
.text:0040D760                 add     al, 0BAh ; 'º'
.text:0040D762                 retf
.text:0040D762 ; ---------------------------------------------------------------------------
.text:0040D763                 db 7Eh
.text:0040D764                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040D764                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040D764                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040D764                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040D764                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040D764                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040D764                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040D764                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040D764                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040D764                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040D764                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040D764                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040D764                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040D764                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040D764                 dd 0C4426C00h, 330h, 0
.text:0040D898                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040D898                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040D898                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040D898                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040D8E8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D8E8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040D8E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040D8E8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040D8E8                 dd 0BA94B00h, 1Bh, 0
.text:0040D948                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040D958                 dd 0C0h, 46000000h, 331h, 0
.text:0040D968                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D968                 dd 312h, 0
.text:0040D988                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040D998                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040D9A8                 dd 0C0h, 46000000h, 311h, 0
.text:0040D9B8                 dd 0C0h, 46000000h, 313h, 0
.text:0040D9C8                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040D9D8                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040D9E8                 dd 0C0h, 46000000h, 310h, 0
.text:0040D9F8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040D9F8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040DA28                 dd 0C0h, 46000000h, 319h, 0
.text:0040DA38                 dd 0C0h, 46000000h, 315h, 0
.text:0040DA48                 dd 0C0h, 46000000h, 316h, 0
.text:0040DA58                 dd 0C0h, 46000000h, 315h, 0
.text:0040DA68                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040DA78                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040DA78                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040DA78                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040DAB8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040DAB8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040DAB8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040DAB8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040DAB8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040DAB8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040DAB8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040DAB8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040DAB8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040DAB8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040DAB8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040DAB8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040DAB8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040DAB8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040DAB8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040DAB8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040DAB8                 dd 2DE81h, 0
.text:0040DC08                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040DC20                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040DC20                 dd 0
.text:0040DC38                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040DC38                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040DC38                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040DC38                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040DC38                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040DC38                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040DC38                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040DC38                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040DC38                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040DC38                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040DC38                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040DC38                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040DC38                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040DC38                 dd 10Fh, 0
.text:0040DD48                 dd 0C0h, 46000000h, 125h, 0
.text:0040DD58                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040DD58                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040DD58                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040DD98                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040DD98                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040DD98                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040DD98                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040DD98                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040DDF8                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040DE08                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040DE08                 dd 140h, 0
.text:0040DE28                 dd 0C0h, 46000000h, 1, 0
.text:0040DE38                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040DE38                 dd 71D3400h, 13Dh, 0
.text:0040DE58                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040DE58                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040DE58                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040DE58                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040DEA8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040DEA8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040DEA8                 dd 20405h, 0
.text:0040DED8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040DEE8                 dd 0C0h, 46000000h, 20406h, 0
.text:0040DEF8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040DF08                 dd 0C0h, 46000000h, 110h, 0
.text:0040DF18                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040DF28                 dd 0C0h, 46000000h, 123h, 0
.text:0040DF38                 dd 0C0h, 46000000h, 124h, 0
.text:0040DF48                 dd 0C0h, 46000000h, 13h, 0
.text:0040DF58                 dd 0C0h, 46000000h, 14h, 0
.text:0040DF68                 dd 0C0h, 46000000h, 15h, 0
.text:0040DF78                 dd 0C0h, 46000000h, 20400h, 0
.text:0040DF88                 dd 0C0h, 46000000h, 121h, 0
.text:0040DF98                 dd 0C0h, 46000000h, 122h, 0
.text:0040DFA8                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040DFB8                 dd 0C0h, 46000000h, 108h, 0
.text:0040DFC8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040DFC8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040DFC8                 dd 103h, 0
.text:0040DFF8                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040E008                 dd 0C0h, 46000000h, 106h, 0
.text:0040E018                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E018                 dd 107h, 0
.text:0040E038                 dd 0C0h, 46000000h, 102h, 0
.text:0040E048                 dd 0C0h, 46000000h, 104h, 0
.text:0040E058                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040E058                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040E058                 dd 105h, 0
.text:0040E088                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040E098                 dd 0C0h, 46000000h, 139h, 0
.text:0040E0A8                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040E0B8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040E0B8                 dd 101h, 0
.text:0040E0D8                 dd 0C0h, 46000000h, 100h, 0
.text:0040E0E8                 dd 0C0h, 46000000h, 20404h, 0
.text:0040E0F8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040E0F8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040E128                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040E128                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040E128                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040E128                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040E178                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E178                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040E178                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040E178                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040E178                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E178                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040E1F8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040E1F8                 dd 0Ah, 0
.text:0040E218                 dd 0C0h, 46000000h, 2, 0
.text:0040E228                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040E238                 dd 0C0h, 46000000h, 3, 0
.text:0040E248                 dd 0C0h, 46000000h, 16h, 0
.text:0040E258                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040E258                 dd 1608D74Fh, 0Fh, 0
.text:0040E278                 dd 0C0h, 46000000h, 20h, 0
.text:0040E288                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040E288                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040E288                 dd 0
.text:0040E2B8                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040E2C8                 dd 0C0h, 46000000h, 128h, 0
.text:0040E2D8                 dd 0C0h, 46000000h, 129h, 0
.text:0040E2E8                 dd 0C0h, 46000000h, 118h, 0
.text:0040E2F8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040E2F8                 dd 70474000h, 11Bh, 0
.text:0040E318                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040E318                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040E318                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040E318                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040E318                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040E378                 dd 0C0h, 46000000h, 116h, 0
.text:0040E388                 dd 0C0h, 46000000h, 113h, 0
.text:0040E398                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040E398                 dd 119h, 0
.text:0040E3B8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040E3B8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040E3B8                 dd 0
.text:0040E3E8                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040E3F8                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040E408                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040E418                 dd 0C0h, 46000000h, 112h, 0
.text:0040E428                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040E428                 dd 18E6000h, 120h, 0
.text:0040E448                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040E448                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040E448                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040E488                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040E488                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040E4B8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E4B8                 dd 11Ah, 0
.text:0040E4D8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040E4D8                 dd 10Ch, 0
.text:0040E4F8                 dd 0C0h, 46000000h
.text:0040E500 dword_40E500    dd 10Bh, 0              ; DATA XREF: sub_4096A0+75↑o
.text:0040E508                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040E508                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040E508                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040E508                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040E558                 dd 0C0h, 46000000h, 109h, 0
.text:0040E568                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040E568                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040E568                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040E568                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040E568                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040E568                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040E568                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040E568                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040E568                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040E568                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040E568                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040E648                 dd 0C0h, 46000000h, 138h, 0
.text:0040E658                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040E658                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040E658                 dd 27h, 0
.text:0040E688                 dd 0C0h, 46000000h, 8, 0
.text:0040E698                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040E698                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040E698                 dd 20D00h, 0
.text:0040E6C8                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040E6D8                 dd 0C0h, 46000000h, 12h, 0
.text:0040E6E8                 dd 0C0h, 46000000h, 4, 0
.text:0040E6F8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E6F8                 dd 7, 0
.text:0040E718                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E718                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040E748                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E748                 dd 126h, 0
.text:0040E768                 dd 0C0h, 46000000h, 10h, 0
.text:0040E778                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040E778                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040E7A8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040E7A8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040E7A8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040E7E8                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040E7F8                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040E808                 dd 0C0h, 46000000h, 26h, 0
.text:0040E818                 dd 0C0h, 46000000h, 6, 0
.text:0040E828                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040E828                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040E828                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040E868                 dd 0C0h, 46000000h, 20403h, 0
.text:0040E878                 dd 0C0h, 46000000h, 20401h, 0
.text:0040E888                 dd 0C0h, 46000000h, 20412h, 0
.text:0040E898                 dd 0C0h, 46000000h, 20402h, 0
.text:0040E8A8                 dd 0C0h, 46000000h, 20411h, 0
.text:0040E8B8                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040E8C8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040E8C8                 dd 10Dh, 0
.text:0040E8E8                 dd 0C0h, 46000000h, 127h, 0
.text:0040E8F8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040E8F8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040E8F8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040E938                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040E938                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040E938                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040E978                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040E988                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040E998                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040E9A8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040E9B8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040E9C8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040E9D8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040E9E8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040E9F8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040EA08                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040EA18                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040EA28                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040EA38                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040EA48                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040EA58                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040EA68                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040EA78                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040EA88                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040EA98                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040EAA8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040EAB8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040EAC8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040EAD8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040EAE8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040EAF8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040EB08                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040EB18                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040EB28                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040EB38                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040EB48                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040EB58                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040EB68                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040EB78                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040EB88                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040EB98                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040EBA8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040EBA8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040EBD0
.text:0040EBD0 ; =============== S U B R O U T I N E =======================================
.text:0040EBD0
.text:0040EBD0 ; Attributes: thunk
.text:0040EBD0
.text:0040EBD0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040EBD0 mbrtowc         proc near               ; CODE XREF: sub_405E20+757↑p
.text:0040EBD0
.text:0040EBD0 DstCh           = dword ptr  4
.text:0040EBD0 SrcCh           = dword ptr  8
.text:0040EBD0 SizeInBytes     = dword ptr  0Ch
.text:0040EBD0 State           = dword ptr  10h
.text:0040EBD0
.text:0040EBD0                 jmp     ds:__imp_mbrtowc
.text:0040EBD0 mbrtowc         endp
.text:0040EBD0
.text:0040EBD0 ; ---------------------------------------------------------------------------
.text:0040EBD6                 align 10h
.text:0040EBE0
.text:0040EBE0 ; =============== S U B R O U T I N E =======================================
.text:0040EBE0
.text:0040EBE0 ; Attributes: bp-based frame
.text:0040EBE0
.text:0040EBE0 sub_40EBE0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040EBE0                 push    ebp
.text:0040EBE1                 mov     ecx, offset dword_411000
.text:0040EBE6                 cmp     ecx, offset dword_411000
.text:0040EBEC                 mov     ebp, esp
.text:0040EBEE                 jnb     short loc_40EC06
.text:0040EBF0
.text:0040EBF0 loc_40EBF0:                             ; CODE XREF: sub_40EBE0+24↓j
.text:0040EBF0                 mov     edx, [ecx+4]
.text:0040EBF3                 mov     eax, [ecx]
.text:0040EBF5                 add     ecx, 8
.text:0040EBF8                 add     [edx+400000h], eax
.text:0040EBFE                 cmp     ecx, offset dword_411000
.text:0040EC04                 jb      short loc_40EBF0
.text:0040EC06
.text:0040EC06 loc_40EC06:                             ; CODE XREF: sub_40EBE0+E↑j
.text:0040EC06                 pop     ebp
.text:0040EC07                 retn
.text:0040EC07 sub_40EBE0      endp
.text:0040EC07
.text:0040EC07 ; ---------------------------------------------------------------------------
.text:0040EC08                 align 10h
.text:0040EC10
.text:0040EC10 ; =============== S U B R O U T I N E =======================================
.text:0040EC10
.text:0040EC10 ; Attributes: bp-based frame
.text:0040EC10
.text:0040EC10 sub_40EC10      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040EC10                                         ; TopLevelExceptionFilter+D7↑p
.text:0040EC10                 push    ebp
.text:0040EC11                 mov     ebp, esp
.text:0040EC13                 fninit
.text:0040EC15                 pop     ebp
.text:0040EC16                 retn
.text:0040EC16 sub_40EC10      endp
.text:0040EC16
.text:0040EC16 ; ---------------------------------------------------------------------------
.text:0040EC17                 align 10h
.text:0040EC20
.text:0040EC20 ; =============== S U B R O U T I N E =======================================
.text:0040EC20
.text:0040EC20 ; Attributes: bp-based frame
.text:0040EC20
.text:0040EC20 ; void __cdecl sub_40EC20()
.text:0040EC20 sub_40EC20      proc near               ; DATA XREF: .text:loc_40EC69↓o
.text:0040EC20                                         ; sub_40ECB0:loc_40ECDE↓o
.text:0040EC20                 push    ebp
.text:0040EC21                 mov     ebp, esp
.text:0040EC23                 sub     esp, 8
.text:0040EC26                 mov     eax, off_4100C4
.text:0040EC2B                 mov     edx, [eax]
.text:0040EC2D                 test    edx, edx
.text:0040EC2F                 jnz     short loc_40EC35
.text:0040EC31
.text:0040EC31 loc_40EC31:                             ; CODE XREF: sub_40EC20+2C↓j
.text:0040EC31                 mov     esp, ebp
.text:0040EC33                 pop     ebp
.text:0040EC34                 retn
.text:0040EC35 ; ---------------------------------------------------------------------------
.text:0040EC35
.text:0040EC35 loc_40EC35:                             ; CODE XREF: sub_40EC20+F↑j
.text:0040EC35                                         ; sub_40EC20+2A↓j
.text:0040EC35                 call    dword ptr [eax]
.text:0040EC37                 mov     edx, off_4100C4
.text:0040EC3D                 mov     ecx, [edx+4]
.text:0040EC40                 lea     eax, [edx+4]
.text:0040EC43                 mov     off_4100C4, eax
.text:0040EC48                 test    ecx, ecx
.text:0040EC4A                 jnz     short loc_40EC35
.text:0040EC4C                 jmp     short loc_40EC31
.text:0040EC4C sub_40EC20      endp
.text:0040EC4C
.text:0040EC4C ; ---------------------------------------------------------------------------
.text:0040EC4E                 align 10h
.text:0040EC50                 push    ebp
.text:0040EC51                 mov     ebp, esp
.text:0040EC53                 sub     esp, 8
.text:0040EC56                 mov     [ebp-4], ebx
.text:0040EC59                 mov     eax, ds:dword_40F9C0
.text:0040EC5E                 cmp     eax, 0FFFFFFFFh
.text:0040EC61                 jz      short loc_40EC8C
.text:0040EC63
.text:0040EC63 loc_40EC63:                             ; CODE XREF: .text:0040EC96↓j
.text:0040EC63                                         ; .text:0040ECA9↓j
.text:0040EC63                 test    eax, eax
.text:0040EC65                 mov     ebx, eax
.text:0040EC67                 jnz     short loc_40EC80
.text:0040EC69
.text:0040EC69 loc_40EC69:                             ; CODE XREF: .text:0040EC8A↓j
.text:0040EC69                 mov     dword ptr [esp], offset sub_40EC20
.text:0040EC70                 call    sub_401040
.text:0040EC75                 mov     ebx, [ebp-4]
.text:0040EC78                 mov     esp, ebp
.text:0040EC7A                 pop     ebp
.text:0040EC7B                 retn
.text:0040EC7B ; ---------------------------------------------------------------------------
.text:0040EC7C                 align 10h
.text:0040EC80
.text:0040EC80 loc_40EC80:                             ; CODE XREF: .text:0040EC67↑j
.text:0040EC80                                         ; .text:0040EC88↓j
.text:0040EC80                 call    ds:dword_40F9C0[ebx*4]
.text:0040EC87                 dec     ebx
.text:0040EC88                 jnz     short loc_40EC80
.text:0040EC8A                 jmp     short loc_40EC69
.text:0040EC8C ; ---------------------------------------------------------------------------
.text:0040EC8C
.text:0040EC8C loc_40EC8C:                             ; CODE XREF: .text:0040EC61↑j
.text:0040EC8C                 mov     ecx, ds:dword_40F9C4
.text:0040EC92                 xor     eax, eax
.text:0040EC94                 test    ecx, ecx
.text:0040EC96                 jz      short loc_40EC63
.text:0040EC98                 mov     edx, offset dword_40F9C0
.text:0040EC9D                 lea     esi, [esi+0]
.text:0040ECA0
.text:0040ECA0 loc_40ECA0:                             ; CODE XREF: .text:0040ECA7↓j
.text:0040ECA0                 inc     eax
.text:0040ECA1                 mov     ecx, [edx+eax*4+4]
.text:0040ECA5                 test    ecx, ecx
.text:0040ECA7                 jnz     short loc_40ECA0
.text:0040ECA9                 jmp     short loc_40EC63
.text:0040ECA9 ; ---------------------------------------------------------------------------
.text:0040ECAB                 align 10h
.text:0040ECB0
.text:0040ECB0 ; =============== S U B R O U T I N E =======================================
.text:0040ECB0
.text:0040ECB0 ; Attributes: bp-based frame
.text:0040ECB0
.text:0040ECB0 sub_40ECB0      proc near               ; CODE XREF: sub_403010+16↑p
.text:0040ECB0
.text:0040ECB0 var_8           = dword ptr -8
.text:0040ECB0 var_4           = dword ptr -4
.text:0040ECB0
.text:0040ECB0                 push    ebp
.text:0040ECB1                 mov     ebp, esp
.text:0040ECB3                 sub     esp, 8
.text:0040ECB6                 mov     [ebp+var_4], ebx
.text:0040ECB9                 mov     edx, dword_4100C0
.text:0040ECBF                 test    edx, edx
.text:0040ECC1                 jnz     short loc_40ECEA
.text:0040ECC3                 mov     eax, ds:dword_40F9C0
.text:0040ECC8                 mov     edx, 1
.text:0040ECCD                 mov     dword_4100C0, edx
.text:0040ECD3                 cmp     eax, 0FFFFFFFFh
.text:0040ECD6                 jz      short loc_40ECFD
.text:0040ECD8
.text:0040ECD8 loc_40ECD8:                             ; CODE XREF: sub_40ECB0+57↓j
.text:0040ECD8                                         ; sub_40ECB0+69↓j
.text:0040ECD8                 test    eax, eax
.text:0040ECDA                 mov     ebx, eax
.text:0040ECDC                 jnz     short loc_40ECF1
.text:0040ECDE
.text:0040ECDE loc_40ECDE:                             ; CODE XREF: sub_40ECB0+4B↓j
.text:0040ECDE                 mov     [esp+8+var_8], offset sub_40EC20 ; void (__cdecl *)()
.text:0040ECE5                 call    sub_401040
.text:0040ECEA
.text:0040ECEA loc_40ECEA:                             ; CODE XREF: sub_40ECB0+11↑j
.text:0040ECEA                 mov     ebx, [ebp+var_4]
.text:0040ECED                 mov     esp, ebp
.text:0040ECEF                 pop     ebp
.text:0040ECF0                 retn
.text:0040ECF1 ; ---------------------------------------------------------------------------
.text:0040ECF1
.text:0040ECF1 loc_40ECF1:                             ; CODE XREF: sub_40ECB0+2C↑j
.text:0040ECF1                                         ; sub_40ECB0+49↓j
.text:0040ECF1                 call    ds:dword_40F9C0[ebx*4]
.text:0040ECF8                 dec     ebx
.text:0040ECF9                 jnz     short loc_40ECF1
.text:0040ECFB                 jmp     short loc_40ECDE
.text:0040ECFD ; ---------------------------------------------------------------------------
.text:0040ECFD
.text:0040ECFD loc_40ECFD:                             ; CODE XREF: sub_40ECB0+26↑j
.text:0040ECFD                 mov     ecx, ds:dword_40F9C4
.text:0040ED03                 xor     eax, eax
.text:0040ED05                 test    ecx, ecx
.text:0040ED07                 jz      short loc_40ECD8
.text:0040ED09                 mov     edx, offset dword_40F9C0
.text:0040ED0E                 mov     esi, esi
.text:0040ED10
.text:0040ED10 loc_40ED10:                             ; CODE XREF: sub_40ECB0+67↓j
.text:0040ED10                 inc     eax
.text:0040ED11                 mov     ebx, [edx+eax*4+4]
.text:0040ED15                 test    ebx, ebx
.text:0040ED17                 jnz     short loc_40ED10
.text:0040ED19                 jmp     short loc_40ECD8
.text:0040ED19 sub_40ECB0      endp
.text:0040ED19
.text:0040ED19 ; ---------------------------------------------------------------------------
.text:0040ED1B                 align 10h
.text:0040ED20
.text:0040ED20 ; =============== S U B R O U T I N E =======================================
.text:0040ED20
.text:0040ED20 ; Attributes: info_from_lumina
.text:0040ED20
.text:0040ED20 ; void *__cdecl _alloca(size_t Size)
.text:0040ED20 __alloca        proc near               ; CODE XREF: sub_403010+E↑p
.text:0040ED20                 push    ecx
.text:0040ED21                 mov     ecx, esp
.text:0040ED23                 add     ecx, 8
.text:0040ED26
.text:0040ED26 loc_40ED26:                             ; CODE XREF: __alloca+1B↓j
.text:0040ED26                 cmp     eax, 1000h
.text:0040ED2B                 jb      short loc_40ED3D
.text:0040ED2D                 sub     ecx, 1000h
.text:0040ED33                 or      dword ptr [ecx], 0
.text:0040ED36                 sub     eax, 1000h
.text:0040ED3B                 jmp     short loc_40ED26
.text:0040ED3D ; ---------------------------------------------------------------------------
.text:0040ED3D
.text:0040ED3D loc_40ED3D:                             ; CODE XREF: __alloca+B↑j
.text:0040ED3D                 sub     ecx, eax
.text:0040ED3F                 or      dword ptr [ecx], 0
.text:0040ED42                 mov     eax, esp
.text:0040ED44                 mov     esp, ecx
.text:0040ED46                 mov     ecx, [eax]
.text:0040ED48                 mov     eax, [eax+4]
.text:0040ED4B                 jmp     eax
.text:0040ED4B __alloca        endp
.text:0040ED4B
.text:0040ED4B ; ---------------------------------------------------------------------------
.text:0040ED4D                 align 10h
.text:0040ED50
.text:0040ED50 ; =============== S U B R O U T I N E =======================================
.text:0040ED50
.text:0040ED50 ; Attributes: bp-based frame
.text:0040ED50
.text:0040ED50 sub_40ED50      proc near               ; CODE XREF: sub_407EA0+17E↑p
.text:0040ED50                                         ; sub_407EA0+1F5↑p ...
.text:0040ED50
.text:0040ED50 var_24          = dword ptr -24h
.text:0040ED50 var_20          = dword ptr -20h
.text:0040ED50 var_1C          = dword ptr -1Ch
.text:0040ED50 var_18          = dword ptr -18h
.text:0040ED50 var_14          = dword ptr -14h
.text:0040ED50 var_C           = dword ptr -0Ch
.text:0040ED50 var_8           = dword ptr -8
.text:0040ED50 var_4           = dword ptr -4
.text:0040ED50 arg_0           = dword ptr  8
.text:0040ED50 arg_4           = dword ptr  0Ch
.text:0040ED50 arg_8           = dword ptr  10h
.text:0040ED50 arg_C           = dword ptr  14h
.text:0040ED50
.text:0040ED50                 push    ebp
.text:0040ED51                 mov     ebp, esp
.text:0040ED53                 sub     esp, 28h
.text:0040ED56                 mov     [ebp+var_C], ebx
.text:0040ED59                 mov     edx, [ebp+arg_C]
.text:0040ED5C                 mov     ecx, [ebp+arg_0]
.text:0040ED5F                 mov     [ebp+var_8], esi
.text:0040ED62                 mov     eax, [ebp+arg_8]
.text:0040ED65                 test    edx, edx
.text:0040ED67                 mov     [ebp+var_4], edi
.text:0040ED6A                 mov     ebx, [ebp+arg_4]
.text:0040ED6D                 mov     esi, eax
.text:0040ED6F                 mov     [ebp+var_18], 0
.text:0040ED76                 mov     [ebp+var_14], 0
.text:0040ED7D                 mov     [ebp+var_1C], ecx
.text:0040ED80                 jnz     short loc_40EDD2
.text:0040ED82                 cmp     eax, ebx
.text:0040ED84                 jbe     short loc_40EDB0
.text:0040ED86                 mov     eax, ecx
.text:0040ED88                 mov     edx, ebx
.text:0040ED8A                 div     esi
.text:0040ED8C                 mov     edi, eax
.text:0040ED8E                 mov     esi, esi
.text:0040ED90
.text:0040ED90 loc_40ED90:                             ; CODE XREF: sub_40ED50+88↓j
.text:0040ED90                                         ; sub_40ED50+A4↓j ...
.text:0040ED90                 xor     ecx, ecx
.text:0040ED92
.text:0040ED92 loc_40ED92:                             ; CODE XREF: sub_40ED50+80↓j
.text:0040ED92                 mov     [ebp+var_18], edi
.text:0040ED95                 mov     ebx, [ebp+var_C]
.text:0040ED98                 mov     eax, [ebp+var_18]
.text:0040ED9B                 mov     [ebp+var_14], ecx
.text:0040ED9E                 mov     esi, [ebp+var_8]
.text:0040EDA1                 mov     edx, [ebp+var_14]
.text:0040EDA4                 mov     edi, [ebp+var_4]
.text:0040EDA7                 mov     esp, ebp
.text:0040EDA9                 pop     ebp
.text:0040EDAA                 retn
.text:0040EDAA ; ---------------------------------------------------------------------------
.text:0040EDAB                 align 10h
.text:0040EDB0
.text:0040EDB0 loc_40EDB0:                             ; CODE XREF: sub_40ED50+34↑j
.text:0040EDB0                 test    eax, eax
.text:0040EDB2                 jnz     short loc_40EDC1
.text:0040EDB4                 mov     eax, 1
.text:0040EDB9                 xor     ecx, ecx
.text:0040EDBB                 xor     edx, edx
.text:0040EDBD                 div     ecx
.text:0040EDBF                 mov     esi, eax
.text:0040EDC1
.text:0040EDC1 loc_40EDC1:                             ; CODE XREF: sub_40ED50+62↑j
.text:0040EDC1                 mov     eax, ebx
.text:0040EDC3                 xor     edx, edx
.text:0040EDC5                 div     esi
.text:0040EDC7                 mov     ecx, eax
.text:0040EDC9                 mov     eax, [ebp+var_1C]
.text:0040EDCC                 div     esi
.text:0040EDCE                 mov     edi, eax
.text:0040EDD0                 jmp     short loc_40ED92
.text:0040EDD2 ; ---------------------------------------------------------------------------
.text:0040EDD2
.text:0040EDD2 loc_40EDD2:                             ; CODE XREF: sub_40ED50+30↑j
.text:0040EDD2                 cmp     edx, ebx
.text:0040EDD4                 jbe     short loc_40EDE0
.text:0040EDD6                 xor     edi, edi
.text:0040EDD8                 jmp     short loc_40ED90
.text:0040EDD8 ; ---------------------------------------------------------------------------
.text:0040EDDA                 align 10h
.text:0040EDE0
.text:0040EDE0 loc_40EDE0:                             ; CODE XREF: sub_40ED50+84↑j
.text:0040EDE0                 bsr     eax, edx
.text:0040EDE3                 xor     eax, 1Fh
.text:0040EDE6                 mov     [ebp+var_20], eax
.text:0040EDE9                 jnz     short loc_40EE00
.text:0040EDEB                 cmp     ebx, edx
.text:0040EDED                 ja      short loc_40EDF6
.text:0040EDEF                 xor     edi, edi
.text:0040EDF1                 cmp     [ebp+var_1C], esi
.text:0040EDF4                 jb      short loc_40ED90
.text:0040EDF6
.text:0040EDF6 loc_40EDF6:                             ; CODE XREF: sub_40ED50+9D↑j
.text:0040EDF6                 mov     edi, 1
.text:0040EDFB                 jmp     short loc_40ED90
.text:0040EDFB ; ---------------------------------------------------------------------------
.text:0040EDFD                 align 10h
.text:0040EE00
.text:0040EE00 loc_40EE00:                             ; CODE XREF: sub_40ED50+99↑j
.text:0040EE00                 mov     eax, [ebp+var_20]
.text:0040EE03                 mov     ecx, 20h ; ' '
.text:0040EE08                 sub     ecx, eax
.text:0040EE0A                 mov     [ebp+var_24], ecx
.text:0040EE0D                 mov     eax, esi
.text:0040EE0F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040EE13                 shl     edx, cl
.text:0040EE15                 mov     edi, edx
.text:0040EE17                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040EE1B                 mov     edx, ebx
.text:0040EE1D                 shr     eax, cl
.text:0040EE1F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040EE23                 or      edi, eax
.text:0040EE25                 mov     eax, [ebp+var_1C]
.text:0040EE28                 shl     esi, cl
.text:0040EE2A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040EE2E                 shr     edx, cl
.text:0040EE30                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040EE34                 shl     ebx, cl
.text:0040EE36                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040EE3A                 shr     eax, cl
.text:0040EE3C                 or      ebx, eax
.text:0040EE3E                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040EE42                 mov     eax, ebx
.text:0040EE44                 div     edi
.text:0040EE46                 mov     ebx, edx
.text:0040EE48                 mov     edi, eax
.text:0040EE4A                 shl     [ebp+var_1C], cl
.text:0040EE4D                 mul     esi
.text:0040EE4F                 cmp     edx, ebx
.text:0040EE51                 ja      short loc_40EE64
.text:0040EE53                 cmp     edx, ebx
.text:0040EE55                 jnz     loc_40ED90
.text:0040EE5B                 cmp     eax, [ebp+var_1C]
.text:0040EE5E                 jbe     loc_40ED90
.text:0040EE64
.text:0040EE64 loc_40EE64:                             ; CODE XREF: sub_40ED50+101↑j
.text:0040EE64                 dec     edi
.text:0040EE65                 jmp     loc_40ED90
.text:0040EE65 sub_40ED50      endp
.text:0040EE65
.text:0040EE65 ; ---------------------------------------------------------------------------
.text:0040EE6A                 align 10h
.text:0040EE70
.text:0040EE70 ; =============== S U B R O U T I N E =======================================
.text:0040EE70
.text:0040EE70 ; Attributes: bp-based frame
.text:0040EE70
.text:0040EE70 sub_40EE70      proc near               ; CODE XREF: sub_407EA0+1A5↑p
.text:0040EE70                                         ; sub_407EA0+21E↑p ...
.text:0040EE70
.text:0040EE70 var_34          = dword ptr -34h
.text:0040EE70 var_2C          = dword ptr -2Ch
.text:0040EE70 var_28          = dword ptr -28h
.text:0040EE70 var_24          = dword ptr -24h
.text:0040EE70 var_20          = dword ptr -20h
.text:0040EE70 var_1C          = dword ptr -1Ch
.text:0040EE70 var_18          = dword ptr -18h
.text:0040EE70 var_14          = dword ptr -14h
.text:0040EE70 arg_0           = dword ptr  8
.text:0040EE70 arg_4           = dword ptr  0Ch
.text:0040EE70 arg_8           = dword ptr  10h
.text:0040EE70 arg_C           = dword ptr  14h
.text:0040EE70
.text:0040EE70                 push    ebp
.text:0040EE71                 mov     ebp, esp
.text:0040EE73                 push    edi
.text:0040EE74                 push    esi
.text:0040EE75                 push    ebx
.text:0040EE76                 sub     esp, 2Ch
.text:0040EE79                 mov     edx, [ebp+arg_C]
.text:0040EE7C                 mov     [ebp+var_20], 0
.text:0040EE83                 mov     ecx, [ebp+arg_0]
.text:0040EE86                 mov     ebx, [ebp+arg_4]
.text:0040EE89                 mov     [ebp+var_1C], 0
.text:0040EE90                 mov     eax, [ebp+arg_8]
.text:0040EE93                 test    edx, edx
.text:0040EE95                 mov     [ebp+var_24], edx
.text:0040EE98                 mov     edi, ebx
.text:0040EE9A                 mov     esi, eax
.text:0040EE9C                 mov     [ebp+var_28], ecx
.text:0040EE9F                 jnz     short loc_40EF00
.text:0040EEA1                 cmp     eax, ebx
.text:0040EEA3                 jbe     short loc_40EEE0
.text:0040EEA5                 mov     eax, ecx
.text:0040EEA7                 mov     edx, ebx
.text:0040EEA9                 div     esi
.text:0040EEAB
.text:0040EEAB loc_40EEAB:                             ; CODE XREF: sub_40EE70+8B↓j
.text:0040EEAB                 mov     [ebp+var_28], edx
.text:0040EEAE                 lea     ecx, [ebp+var_18]
.text:0040EEB1                 test    ecx, ecx
.text:0040EEB3                 jz      short loc_40EECE
.text:0040EEB5                 mov     [ebp+var_1C], 0
.text:0040EEBC
.text:0040EEBC loc_40EEBC:                             ; CODE XREF: sub_40EE70+DA↓j
.text:0040EEBC                 mov     eax, [ebp+var_28]
.text:0040EEBF                 mov     [ebp+var_20], eax
.text:0040EEC2                 mov     edx, [ebp+var_20]
.text:0040EEC5                 mov     ecx, [ebp+var_1C]
.text:0040EEC8                 mov     [ebp+var_18], edx
.text:0040EECB                 mov     [ebp+var_14], ecx
.text:0040EECE
.text:0040EECE loc_40EECE:                             ; CODE XREF: sub_40EE70+43↑j
.text:0040EECE                                         ; sub_40EE70+A7↓j ...
.text:0040EECE                 mov     eax, [ebp+var_18]
.text:0040EED1                 mov     edx, [ebp+var_14]
.text:0040EED4                 add     esp, 2Ch
.text:0040EED7                 pop     ebx
.text:0040EED8                 pop     esi
.text:0040EED9                 pop     edi
.text:0040EEDA                 pop     ebp
.text:0040EEDB                 retn
.text:0040EEDB ; ---------------------------------------------------------------------------
.text:0040EEDC                 align 10h
.text:0040EEE0
.text:0040EEE0 loc_40EEE0:                             ; CODE XREF: sub_40EE70+33↑j
.text:0040EEE0                 test    eax, eax
.text:0040EEE2                 jnz     short loc_40EEEF
.text:0040EEE4                 mov     eax, 1
.text:0040EEE9                 xor     edx, edx
.text:0040EEEB                 div     esi
.text:0040EEED                 mov     esi, eax
.text:0040EEEF
.text:0040EEEF loc_40EEEF:                             ; CODE XREF: sub_40EE70+72↑j
.text:0040EEEF                 mov     eax, edi
.text:0040EEF1                 mov     edx, [ebp+var_24]
.text:0040EEF4                 div     esi
.text:0040EEF6                 mov     eax, [ebp+var_28]
.text:0040EEF9                 div     esi
.text:0040EEFB                 jmp     short loc_40EEAB
.text:0040EEFB ; ---------------------------------------------------------------------------
.text:0040EEFD                 align 10h
.text:0040EF00
.text:0040EF00 loc_40EF00:                             ; CODE XREF: sub_40EE70+2F↑j
.text:0040EF00                 cmp     [ebp+var_24], ebx
.text:0040EF03                 jbe     short loc_40EF20
.text:0040EF05                 mov     [ebp+var_20], ecx
.text:0040EF08
.text:0040EF08 loc_40EF08:                             ; CODE XREF: sub_40EE70+15B↓j
.text:0040EF08                 mov     [ebp+var_1C], edi
.text:0040EF0B                 mov     eax, [ebp+var_20]
.text:0040EF0E                 mov     edx, [ebp+var_1C]
.text:0040EF11                 mov     [ebp+var_18], eax
.text:0040EF14                 mov     [ebp+var_14], edx
.text:0040EF17                 jmp     short loc_40EECE
.text:0040EF17 ; ---------------------------------------------------------------------------
.text:0040EF19                 align 10h
.text:0040EF20
.text:0040EF20 loc_40EF20:                             ; CODE XREF: sub_40EE70+93↑j
.text:0040EF20                 bsr     eax, [ebp+var_24]
.text:0040EF24                 mov     ebx, eax
.text:0040EF26                 xor     ebx, 1Fh
.text:0040EF29                 jnz     short loc_40EF50
.text:0040EF2B                 cmp     edi, [ebp+var_24]
.text:0040EF2E                 ja      short loc_40EF35
.text:0040EF30                 cmp     [ebp+var_28], esi
.text:0040EF33                 jb      short loc_40EF40
.text:0040EF35
.text:0040EF35 loc_40EF35:                             ; CODE XREF: sub_40EE70+BE↑j
.text:0040EF35                 mov     edx, [ebp+var_28]
.text:0040EF38                 sub     edx, esi
.text:0040EF3A                 sbb     edi, [ebp+var_24]
.text:0040EF3D                 mov     [ebp+var_28], edx
.text:0040EF40
.text:0040EF40 loc_40EF40:                             ; CODE XREF: sub_40EE70+C3↑j
.text:0040EF40                 lea     ecx, [ebp+var_18]
.text:0040EF43                 test    ecx, ecx
.text:0040EF45                 jz      short loc_40EECE
.text:0040EF47                 mov     [ebp+var_1C], edi
.text:0040EF4A                 jmp     loc_40EEBC
.text:0040EF4A ; ---------------------------------------------------------------------------
.text:0040EF4F                 align 10h
.text:0040EF50
.text:0040EF50 loc_40EF50:                             ; CODE XREF: sub_40EE70+B9↑j
.text:0040EF50                 mov     edx, [ebp+var_24]
.text:0040EF53                 mov     eax, 20h ; ' '
.text:0040EF58                 mov     cl, bl
.text:0040EF5A                 sub     eax, ebx
.text:0040EF5C                 mov     [ebp+var_2C], eax
.text:0040EF5F                 shl     edx, cl
.text:0040EF61                 mov     eax, esi
.text:0040EF63                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040EF67                 shr     eax, cl
.text:0040EF69                 mov     cl, bl
.text:0040EF6B                 shl     esi, cl
.text:0040EF6D                 or      edx, eax
.text:0040EF6F                 mov     eax, [ebp+var_28]
.text:0040EF72                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040EF76                 mov     [ebp+var_24], edx
.text:0040EF79                 mov     edx, edi
.text:0040EF7B                 shr     edx, cl
.text:0040EF7D                 mov     cl, bl
.text:0040EF7F                 shl     edi, cl
.text:0040EF81                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040EF85                 shr     eax, cl
.text:0040EF87                 or      edi, eax
.text:0040EF89                 mov     eax, edi
.text:0040EF8B                 mov     cl, bl
.text:0040EF8D                 div     [ebp+var_24]
.text:0040EF90                 shl     [ebp+var_28], cl
.text:0040EF93                 mov     edi, edx
.text:0040EF95                 mul     esi
.text:0040EF97                 mov     [ebp+var_34], eax
.text:0040EF9A                 cmp     edx, edi
.text:0040EF9C                 ja      short loc_40EFD8
.text:0040EF9E                 cmp     edx, edi
.text:0040EFA0                 jz      short loc_40EFD0
.text:0040EFA2
.text:0040EFA2 loc_40EFA2:                             ; CODE XREF: sub_40EE70+166↓j
.text:0040EFA2                                         ; sub_40EE70+173↓j
.text:0040EFA2                 lea     eax, [ebp+var_18]
.text:0040EFA5                 test    eax, eax
.text:0040EFA7                 jz      loc_40EECE
.text:0040EFAD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040EFB1                 mov     eax, [ebp+var_28]
.text:0040EFB4                 sub     eax, [ebp+var_34]
.text:0040EFB7                 sbb     edi, edx
.text:0040EFB9                 mov     [ebp+var_28], eax
.text:0040EFBC                 mov     edx, edi
.text:0040EFBE                 shl     edx, cl
.text:0040EFC0                 mov     cl, bl
.text:0040EFC2                 shr     eax, cl
.text:0040EFC4                 or      edx, eax
.text:0040EFC6                 mov     [ebp+var_20], edx
.text:0040EFC9                 shr     edi, cl
.text:0040EFCB                 jmp     loc_40EF08
.text:0040EFD0 ; ---------------------------------------------------------------------------
.text:0040EFD0
.text:0040EFD0 loc_40EFD0:                             ; CODE XREF: sub_40EE70+130↑j
.text:0040EFD0                 mov     eax, [ebp+var_28]
.text:0040EFD3                 cmp     [ebp+var_34], eax
.text:0040EFD6                 jbe     short loc_40EFA2
.text:0040EFD8
.text:0040EFD8 loc_40EFD8:                             ; CODE XREF: sub_40EE70+12C↑j
.text:0040EFD8                 mov     ecx, [ebp+var_34]
.text:0040EFDB                 sub     ecx, esi
.text:0040EFDD                 sbb     edx, [ebp+var_24]
.text:0040EFE0                 mov     [ebp+var_34], ecx
.text:0040EFE3                 jmp     short loc_40EFA2
.text:0040EFE3 sub_40EE70      endp
.text:0040EFE3
.text:0040EFE3 ; ---------------------------------------------------------------------------
.text:0040EFE5                 align 10h
.text:0040EFF0
.text:0040EFF0 ; =============== S U B R O U T I N E =======================================
.text:0040EFF0
.text:0040EFF0 ; Attributes: thunk
.text:0040EFF0
.text:0040EFF0 ; int __cdecl isatty(int FileHandle)
.text:0040EFF0 _isatty         proc near               ; CODE XREF: sub_401DB0+669↑p
.text:0040EFF0
.text:0040EFF0 FileHandle      = dword ptr  4
.text:0040EFF0
.text:0040EFF0                 jmp     ds:__imp__isatty
.text:0040EFF0 _isatty         endp
.text:0040EFF0
.text:0040EFF0 ; ---------------------------------------------------------------------------
.text:0040EFF6                 align 10h
.text:0040F000
.text:0040F000 ; =============== S U B R O U T I N E =======================================
.text:0040F000
.text:0040F000 ; Attributes: thunk
.text:0040F000
.text:0040F000 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040F000 _stricmp        proc near               ; CODE XREF: sub_408370+46F↑p
.text:0040F000                                         ; sub_40A140+2E↑p ...
.text:0040F000
.text:0040F000 String1         = dword ptr  4
.text:0040F000 String2         = dword ptr  8
.text:0040F000
.text:0040F000                 jmp     ds:__imp__stricmp
.text:0040F000 _stricmp        endp
.text:0040F000
.text:0040F000 ; ---------------------------------------------------------------------------
.text:0040F006                 align 10h
.text:0040F010
.text:0040F010 ; =============== S U B R O U T I N E =======================================
.text:0040F010
.text:0040F010 ; Attributes: thunk
.text:0040F010
.text:0040F010 ; char *__cdecl strdup(const char *String)
.text:0040F010 _strdup         proc near               ; CODE XREF: sub_409D70+101↑p
.text:0040F010                                         ; .text:00409FDA↑p ...
.text:0040F010
.text:0040F010 String          = dword ptr  4
.text:0040F010
.text:0040F010                 jmp     ds:__imp__strdup
.text:0040F010 _strdup         endp
.text:0040F010
.text:0040F010 ; ---------------------------------------------------------------------------
.text:0040F016                 align 10h
.text:0040F020
.text:0040F020 ; =============== S U B R O U T I N E =======================================
.text:0040F020
.text:0040F020 ; Attributes: thunk
.text:0040F020
.text:0040F020 ; int __cdecl getpid()
.text:0040F020 _getpid         proc near               ; CODE XREF: sub_40D110+84↑p
.text:0040F020                 jmp     ds:__imp__getpid
.text:0040F020 _getpid         endp
.text:0040F020
.text:0040F020 ; ---------------------------------------------------------------------------
.text:0040F026                 align 10h
.text:0040F030
.text:0040F030 ; =============== S U B R O U T I N E =======================================
.text:0040F030
.text:0040F030 ; Attributes: thunk
.text:0040F030
.text:0040F030 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040F030 _chmod          proc near               ; CODE XREF: sub_40D540+41↑j
.text:0040F030
.text:0040F030 FileName        = dword ptr  4
.text:0040F030 AccessMode      = dword ptr  8
.text:0040F030
.text:0040F030                 jmp     ds:__imp__chmod
.text:0040F030 _chmod          endp
.text:0040F030
.text:0040F030 ; ---------------------------------------------------------------------------
.text:0040F036                 align 10h
.text:0040F040                 jmp     ds:__set_app_type
.text:0040F040 ; ---------------------------------------------------------------------------
.text:0040F046                 align 10h
.text:0040F050
.text:0040F050 ; =============== S U B R O U T I N E =======================================
.text:0040F050
.text:0040F050 ; Attributes: thunk
.text:0040F050
.text:0040F050 ; void __cdecl cexit()
.text:0040F050 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040F050                 jmp     ds:__imp__cexit
.text:0040F050 _cexit          endp
.text:0040F050
.text:0040F050 ; ---------------------------------------------------------------------------
.text:0040F056                 align 10h
.text:0040F060
.text:0040F060 ; =============== S U B R O U T I N E =======================================
.text:0040F060
.text:0040F060 ; Attributes: thunk
.text:0040F060
.text:0040F060 ; char ***__cdecl _p__environ()
.text:0040F060 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040F060                 jmp     ds:__imp___p__environ
.text:0040F060 __p__environ    endp
.text:0040F060
.text:0040F060 ; ---------------------------------------------------------------------------
.text:0040F066                 align 10h
.text:0040F070
.text:0040F070 ; =============== S U B R O U T I N E =======================================
.text:0040F070
.text:0040F070 ; Attributes: thunk
.text:0040F070
.text:0040F070 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040F070 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040F070                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040F070
.text:0040F070 Signal          = dword ptr  4
.text:0040F070 Function        = dword ptr  8
.text:0040F070
.text:0040F070                 jmp     ds:__imp_signal
.text:0040F070 signal          endp
.text:0040F070
.text:0040F070 ; ---------------------------------------------------------------------------
.text:0040F076                 align 10h
.text:0040F080
.text:0040F080 ; =============== S U B R O U T I N E =======================================
.text:0040F080
.text:0040F080 ; Attributes: thunk
.text:0040F080
.text:0040F080 ; int *__cdecl _p__fmode()
.text:0040F080 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040F080                 jmp     ds:__imp___p__fmode
.text:0040F080 __p__fmode      endp
.text:0040F080
.text:0040F080 ; ---------------------------------------------------------------------------
.text:0040F086                 align 10h
.text:0040F090
.text:0040F090 ; =============== S U B R O U T I N E =======================================
.text:0040F090
.text:0040F090 ; Attributes: thunk
.text:0040F090
.text:0040F090 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040F090 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040F090                                         ; sub_401080+90↑p ...
.text:0040F090
.text:0040F090 FileHandle      = dword ptr  4
.text:0040F090 Mode            = dword ptr  8
.text:0040F090
.text:0040F090                 jmp     ds:__imp__setmode
.text:0040F090 _setmode        endp
.text:0040F090
.text:0040F090 ; ---------------------------------------------------------------------------
.text:0040F096                 align 10h
.text:0040F0A0
.text:0040F0A0 ; =============== S U B R O U T I N E =======================================
.text:0040F0A0
.text:0040F0A0 ; Attributes: thunk
.text:0040F0A0
.text:0040F0A0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040F0A0                 jmp     ds:__imp___getmainargs
.text:0040F0A0 __getmainargs   endp
.text:0040F0A0
.text:0040F0A0 ; ---------------------------------------------------------------------------
.text:0040F0A6                 align 10h
.text:0040F0B0
.text:0040F0B0 ; =============== S U B R O U T I N E =======================================
.text:0040F0B0
.text:0040F0B0 ; Attributes: thunk
.text:0040F0B0
.text:0040F0B0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040F0B0 setlocale       proc near               ; CODE XREF: sub_403010+35↑p
.text:0040F0B0
.text:0040F0B0 Category        = dword ptr  4
.text:0040F0B0 Locale          = dword ptr  8
.text:0040F0B0
.text:0040F0B0                 jmp     ds:__imp_setlocale
.text:0040F0B0 setlocale       endp
.text:0040F0B0
.text:0040F0B0 ; ---------------------------------------------------------------------------
.text:0040F0B6                 align 10h
.text:0040F0C0
.text:0040F0C0 ; =============== S U B R O U T I N E =======================================
.text:0040F0C0
.text:0040F0C0 ; Attributes: thunk
.text:0040F0C0
.text:0040F0C0 ; int printf(const char *const Format, ...)
.text:0040F0C0 printf          proc near               ; CODE XREF: sub_403D90+212↑p
.text:0040F0C0                                         ; sub_40BFE0+82↑p ...
.text:0040F0C0
.text:0040F0C0 Format          = dword ptr  4
.text:0040F0C0
.text:0040F0C0                 jmp     ds:__imp_printf
.text:0040F0C0 printf          endp
.text:0040F0C0
.text:0040F0C0 ; ---------------------------------------------------------------------------
.text:0040F0C6                 align 10h
.text:0040F0D0
.text:0040F0D0 ; =============== S U B R O U T I N E =======================================
.text:0040F0D0
.text:0040F0D0 ; Attributes: thunk
.text:0040F0D0
.text:0040F0D0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040F0D0 fputs           proc near               ; CODE XREF: sub_403D90+5D↑p
.text:0040F0D0                                         ; sub_403D90+7F↑p ...
.text:0040F0D0
.text:0040F0D0 Buffer          = dword ptr  4
.text:0040F0D0 Stream          = dword ptr  8
.text:0040F0D0
.text:0040F0D0                 jmp     ds:__imp_fputs
.text:0040F0D0 fputs           endp
.text:0040F0D0
.text:0040F0D0 ; ---------------------------------------------------------------------------
.text:0040F0D6                 align 10h
.text:0040F0E0
.text:0040F0E0 ; =============== S U B R O U T I N E =======================================
.text:0040F0E0
.text:0040F0E0 ; Attributes: noreturn thunk
.text:0040F0E0
.text:0040F0E0 ; void __cdecl __noreturn abort()
.text:0040F0E0 abort           proc near               ; CODE XREF: sub_4013A0:loc_401D82↑p
.text:0040F0E0                                         ; sub_4027A0:loc_402F5E↑p ...
.text:0040F0E0                 jmp     ds:__imp_abort
.text:0040F0E0 abort           endp
.text:0040F0E0
.text:0040F0E0 ; ---------------------------------------------------------------------------
.text:0040F0E6                 align 10h
.text:0040F0F0
.text:0040F0F0 ; =============== S U B R O U T I N E =======================================
.text:0040F0F0
.text:0040F0F0 ; Attributes: thunk
.text:0040F0F0
.text:0040F0F0 ; size_t __cdecl strlen(const char *Str)
.text:0040F0F0 strlen          proc near               ; CODE XREF: sub_4013A0+1D5↑p
.text:0040F0F0                                         ; sub_4013A0+1FA↑p ...
.text:0040F0F0
.text:0040F0F0 Str             = dword ptr  4
.text:0040F0F0
.text:0040F0F0                 jmp     ds:__imp_strlen
.text:0040F0F0 strlen          endp
.text:0040F0F0
.text:0040F0F0 ; ---------------------------------------------------------------------------
.text:0040F0F6                 align 10h
.text:0040F100
.text:0040F100 ; =============== S U B R O U T I N E =======================================
.text:0040F100
.text:0040F100 ; Attributes: thunk
.text:0040F100
.text:0040F100 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040F100 strcmp          proc near               ; CODE XREF: sub_4013A0+A8↑p
.text:0040F100                                         ; sub_4013A0+E1↑p ...
.text:0040F100
.text:0040F100 Str1            = dword ptr  4
.text:0040F100 Str2            = dword ptr  8
.text:0040F100
.text:0040F100                 jmp     ds:__imp_strcmp
.text:0040F100 strcmp          endp
.text:0040F100
.text:0040F100 ; ---------------------------------------------------------------------------
.text:0040F106                 align 10h
.text:0040F110
.text:0040F110 ; =============== S U B R O U T I N E =======================================
.text:0040F110
.text:0040F110 ; Attributes: noreturn thunk
.text:0040F110
.text:0040F110 ; void __cdecl __noreturn exit(int Code)
.text:0040F110 exit            proc near               ; CODE XREF: sub_4013A0+1B8↑p
.text:0040F110                                         ; sub_401DB0+1F2↑p ...
.text:0040F110
.text:0040F110 Code            = dword ptr  4
.text:0040F110
.text:0040F110                 jmp     ds:__imp_exit
.text:0040F110 exit            endp
.text:0040F110
.text:0040F110 ; ---------------------------------------------------------------------------
.text:0040F116                 align 10h
.text:0040F120
.text:0040F120 ; =============== S U B R O U T I N E =======================================
.text:0040F120
.text:0040F120 ; Attributes: thunk
.text:0040F120
.text:0040F120 ; int __cdecl fflush(FILE *Stream)
.text:0040F120 fflush          proc near               ; CODE XREF: sub_4013A0+1AC↑p
.text:0040F120                                         ; sub_401DB0+1E6↑p ...
.text:0040F120
.text:0040F120 Stream          = dword ptr  4
.text:0040F120
.text:0040F120                 jmp     ds:__imp_fflush
.text:0040F120 fflush          endp
.text:0040F120
.text:0040F120 ; ---------------------------------------------------------------------------
.text:0040F126                 align 10h
.text:0040F130
.text:0040F130 ; =============== S U B R O U T I N E =======================================
.text:0040F130
.text:0040F130 ; Attributes: thunk
.text:0040F130
.text:0040F130 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040F130 fprintf         proc near               ; CODE XREF: sub_4013A0+182↑p
.text:0040F130                                         ; sub_4013A0+19B↑p ...
.text:0040F130
.text:0040F130 Stream          = dword ptr  4
.text:0040F130 Format          = dword ptr  8
.text:0040F130
.text:0040F130                 jmp     ds:__imp_fprintf
.text:0040F130 fprintf         endp
.text:0040F130
.text:0040F130 ; ---------------------------------------------------------------------------
.text:0040F136                 align 10h
.text:0040F140
.text:0040F140 ; =============== S U B R O U T I N E =======================================
.text:0040F140
.text:0040F140 ; Attributes: thunk
.text:0040F140
.text:0040F140 ; int *__cdecl errno()
.text:0040F140 _errno          proc near               ; CODE XREF: sub_4045F0:loc_40462D↑p
.text:0040F140                                         ; .text:0040688B↑p ...
.text:0040F140                 jmp     ds:__imp__errno
.text:0040F140 _errno          endp
.text:0040F140
.text:0040F140 ; ---------------------------------------------------------------------------
.text:0040F146                 align 10h
.text:0040F150
.text:0040F150 ; =============== S U B R O U T I N E =======================================
.text:0040F150
.text:0040F150 ; Attributes: thunk
.text:0040F150
.text:0040F150 ; int __cdecl fclose(FILE *Stream)
.text:0040F150 fclose          proc near               ; CODE XREF: sub_4045F0+27↑p
.text:0040F150                                         ; .text:0040BEEE↑p
.text:0040F150
.text:0040F150 Stream          = dword ptr  4
.text:0040F150
.text:0040F150                 jmp     ds:__imp_fclose
.text:0040F150 fclose          endp
.text:0040F150
.text:0040F150 ; ---------------------------------------------------------------------------
.text:0040F156                 align 10h
.text:0040F160
.text:0040F160 ; =============== S U B R O U T I N E =======================================
.text:0040F160
.text:0040F160 ; Attributes: thunk
.text:0040F160
.text:0040F160 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040F160 strncmp         proc near               ; CODE XREF: sub_404980+23F↑p
.text:0040F160                                         ; sub_404980+699↑p
.text:0040F160
.text:0040F160 Str1            = dword ptr  4
.text:0040F160 Str2            = dword ptr  8
.text:0040F160 MaxCount        = dword ptr  0Ch
.text:0040F160
.text:0040F160                 jmp     ds:__imp_strncmp
.text:0040F160 strncmp         endp
.text:0040F160
.text:0040F160 ; ---------------------------------------------------------------------------
.text:0040F166                 align 10h
.text:0040F170
.text:0040F170 ; =============== S U B R O U T I N E =======================================
.text:0040F170
.text:0040F170 ; Attributes: thunk
.text:0040F170
.text:0040F170 ; char *__cdecl getenv(const char *VarName)
.text:0040F170 getenv          proc near               ; CODE XREF: sub_404980+B57↑p
.text:0040F170                                         ; sub_408370+3EE↑p ...
.text:0040F170
.text:0040F170 VarName         = dword ptr  4
.text:0040F170
.text:0040F170                 jmp     ds:__imp_getenv
.text:0040F170 getenv          endp
.text:0040F170
.text:0040F170 ; ---------------------------------------------------------------------------
.text:0040F176                 align 10h
.text:0040F180
.text:0040F180 ; =============== S U B R O U T I N E =======================================
.text:0040F180
.text:0040F180 ; Attributes: thunk
.text:0040F180
.text:0040F180 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040F180 strchr          proc near               ; CODE XREF: sub_404980+469↑p
.text:0040F180                                         ; sub_404980+53A↑p ...
.text:0040F180
.text:0040F180 Str             = dword ptr  4
.text:0040F180 Val             = dword ptr  8
.text:0040F180
.text:0040F180                 jmp     ds:__imp_strchr
.text:0040F180 strchr          endp
.text:0040F180
.text:0040F180 ; ---------------------------------------------------------------------------
.text:0040F186                 align 10h
.text:0040F190
.text:0040F190 ; =============== S U B R O U T I N E =======================================
.text:0040F190
.text:0040F190 ; Attributes: thunk
.text:0040F190
.text:0040F190 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040F190 vfprintf        proc near               ; CODE XREF: sub_405A40+C1↑p
.text:0040F190                                         ; sub_4074B0+49↑p ...
.text:0040F190
.text:0040F190 Stream          = dword ptr  4
.text:0040F190 Format          = dword ptr  8
.text:0040F190 ArgList         = dword ptr  0Ch
.text:0040F190
.text:0040F190                 jmp     ds:__imp_vfprintf
.text:0040F190 vfprintf        endp
.text:0040F190
.text:0040F190 ; ---------------------------------------------------------------------------
.text:0040F196                 align 10h
.text:0040F1A0
.text:0040F1A0 ; =============== S U B R O U T I N E =======================================
.text:0040F1A0
.text:0040F1A0 ; Attributes: thunk
.text:0040F1A0
.text:0040F1A0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040F1A0 _flsbuf         proc near               ; CODE XREF: sub_405A40+128↑p
.text:0040F1A0                                         ; sub_405A40+13A↑p ...
.text:0040F1A0
.text:0040F1A0 File            = dword ptr  8
.text:0040F1A0
.text:0040F1A0                 jmp     ds:__imp__flsbuf
.text:0040F1A0 _flsbuf         endp
.text:0040F1A0
.text:0040F1A0 ; ---------------------------------------------------------------------------
.text:0040F1A6                 align 10h
.text:0040F1B0
.text:0040F1B0 ; =============== S U B R O U T I N E =======================================
.text:0040F1B0
.text:0040F1B0 ; Attributes: thunk
.text:0040F1B0
.text:0040F1B0 ; void __cdecl free(void *Block)
.text:0040F1B0 free            proc near               ; CODE XREF: sub_406F60+112↑p
.text:0040F1B0                                         ; sub_408370+24E↑p ...
.text:0040F1B0
.text:0040F1B0 Block           = dword ptr  4
.text:0040F1B0
.text:0040F1B0                 jmp     ds:__imp_free
.text:0040F1B0 free            endp
.text:0040F1B0
.text:0040F1B0 ; ---------------------------------------------------------------------------
.text:0040F1B6                 align 10h
.text:0040F1C0
.text:0040F1C0 ; =============== S U B R O U T I N E =======================================
.text:0040F1C0
.text:0040F1C0 ; Attributes: thunk
.text:0040F1C0
.text:0040F1C0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040F1C0 iswctype        proc near               ; CODE XREF: sub_405E20+78B↑p
.text:0040F1C0
.text:0040F1C0 C               = word ptr  4
.text:0040F1C0 Type            = word ptr  8
.text:0040F1C0
.text:0040F1C0                 jmp     ds:__imp_iswctype
.text:0040F1C0 iswctype        endp
.text:0040F1C0
.text:0040F1C0 ; ---------------------------------------------------------------------------
.text:0040F1C6                 align 10h
.text:0040F1D0
.text:0040F1D0 ; =============== S U B R O U T I N E =======================================
.text:0040F1D0
.text:0040F1D0 ; Attributes: thunk
.text:0040F1D0
.text:0040F1D0 ; int __cdecl isctype(int C, int Type)
.text:0040F1D0 _isctype        proc near               ; CODE XREF: sub_405E20+610↑p
.text:0040F1D0
.text:0040F1D0 C               = dword ptr  4
.text:0040F1D0 Type            = dword ptr  8
.text:0040F1D0
.text:0040F1D0                 jmp     ds:__imp__isctype
.text:0040F1D0 _isctype        endp
.text:0040F1D0
.text:0040F1D0 ; ---------------------------------------------------------------------------
.text:0040F1D6                 align 10h
.text:0040F1E0
.text:0040F1E0 ; =============== S U B R O U T I N E =======================================
.text:0040F1E0
.text:0040F1E0 ; Attributes: thunk
.text:0040F1E0
.text:0040F1E0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040F1E0 memcpy          proc near               ; CODE XREF: .text:00407318↑p
.text:0040F1E0                                         ; .text:00407361↑p
.text:0040F1E0
.text:0040F1E0 Src             = dword ptr  8
.text:0040F1E0 Size            = dword ptr  0Ch
.text:0040F1E0
.text:0040F1E0                 jmp     ds:__imp_memcpy
.text:0040F1E0 memcpy          endp
.text:0040F1E0
.text:0040F1E0 ; ---------------------------------------------------------------------------
.text:0040F1E6                 align 10h
.text:0040F1F0
.text:0040F1F0 ; =============== S U B R O U T I N E =======================================
.text:0040F1F0
.text:0040F1F0 ; Attributes: thunk
.text:0040F1F0
.text:0040F1F0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040F1F0 memset          proc near               ; CODE XREF: .text:00407296↑p
.text:0040F1F0
.text:0040F1F0 Val             = dword ptr  8
.text:0040F1F0 Size            = dword ptr  0Ch
.text:0040F1F0
.text:0040F1F0                 jmp     ds:__imp_memset
.text:0040F1F0 memset          endp
.text:0040F1F0
.text:0040F1F0 ; ---------------------------------------------------------------------------
.text:0040F1F6                 align 10h
.text:0040F200
.text:0040F200 ; =============== S U B R O U T I N E =======================================
.text:0040F200
.text:0040F200 ; Attributes: thunk
.text:0040F200
.text:0040F200 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040F200 calloc          proc near               ; CODE XREF: .text:004072D3↑p
.text:0040F200                                         ; sub_409D70+AC↑p
.text:0040F200
.text:0040F200 Count           = dword ptr  4
.text:0040F200 Size            = dword ptr  8
.text:0040F200
.text:0040F200                 jmp     ds:__imp_calloc
.text:0040F200 calloc          endp
.text:0040F200
.text:0040F200 ; ---------------------------------------------------------------------------
.text:0040F206                 align 10h
.text:0040F210
.text:0040F210 ; =============== S U B R O U T I N E =======================================
.text:0040F210
.text:0040F210 ; Attributes: thunk
.text:0040F210
.text:0040F210 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040F210 realloc         proc near               ; CODE XREF: .text:004071D0↑p
.text:0040F210                                         ; sub_407200+16↑p ...
.text:0040F210
.text:0040F210 Block           = dword ptr  4
.text:0040F210 Size            = dword ptr  8
.text:0040F210
.text:0040F210                 jmp     ds:__imp_realloc
.text:0040F210 realloc         endp
.text:0040F210
.text:0040F210 ; ---------------------------------------------------------------------------
.text:0040F216                 align 10h
.text:0040F220
.text:0040F220 ; =============== S U B R O U T I N E =======================================
.text:0040F220
.text:0040F220 ; Attributes: thunk
.text:0040F220
.text:0040F220 ; void *__cdecl malloc(size_t Size)
.text:0040F220 malloc          proc near               ; CODE XREF: sub_407130+24↑p
.text:0040F220                                         ; sub_407170+E↑p ...
.text:0040F220
.text:0040F220 Size            = dword ptr  4
.text:0040F220
.text:0040F220                 jmp     ds:__imp_malloc
.text:0040F220 malloc          endp
.text:0040F220
.text:0040F220 ; ---------------------------------------------------------------------------
.text:0040F226                 align 10h
.text:0040F230
.text:0040F230 ; =============== S U B R O U T I N E =======================================
.text:0040F230
.text:0040F230 ; Attributes: thunk
.text:0040F230
.text:0040F230 ; char *__cdecl strerror(int ErrorMessage)
.text:0040F230 strerror        proc near               ; CODE XREF: sub_4074B0+A5↑p
.text:0040F230                                         ; sub_4075B4+10F↑p
.text:0040F230
.text:0040F230 ErrorMessage    = dword ptr  4
.text:0040F230
.text:0040F230                 jmp     ds:__imp_strerror
.text:0040F230 strerror        endp
.text:0040F230
.text:0040F230 ; ---------------------------------------------------------------------------
.text:0040F236                 align 10h
.text:0040F240
.text:0040F240 ; =============== S U B R O U T I N E =======================================
.text:0040F240
.text:0040F240 ; Attributes: thunk
.text:0040F240
.text:0040F240 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0040F240 strcat          proc near               ; CODE XREF: sub_407D20+98↑p
.text:0040F240                                         ; sub_409820+74↑p ...
.text:0040F240
.text:0040F240 Destination     = dword ptr  4
.text:0040F240 Source          = dword ptr  8
.text:0040F240
.text:0040F240                 jmp     ds:__imp_strcat
.text:0040F240 strcat          endp
.text:0040F240
.text:0040F240 ; ---------------------------------------------------------------------------
.text:0040F246                 align 10h
.text:0040F250
.text:0040F250 ; =============== S U B R O U T I N E =======================================
.text:0040F250
.text:0040F250 ; Attributes: thunk
.text:0040F250
.text:0040F250 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0040F250 strcpy          proc near               ; CODE XREF: sub_407D20+73↑p
.text:0040F250                                         ; sub_409820+35↑p ...
.text:0040F250
.text:0040F250 Destination     = dword ptr  4
.text:0040F250 Source          = dword ptr  8
.text:0040F250
.text:0040F250                 jmp     ds:__imp_strcpy
.text:0040F250 strcpy          endp
.text:0040F250
.text:0040F250 ; ---------------------------------------------------------------------------
.text:0040F256                 align 10h
.text:0040F260
.text:0040F260 ; =============== S U B R O U T I N E =======================================
.text:0040F260
.text:0040F260 ; Attributes: thunk
.text:0040F260
.text:0040F260 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0040F260 strstr          proc near               ; CODE XREF: sub_408370+3BF↑p
.text:0040F260                                         ; sub_408370+3DC↑p ...
.text:0040F260
.text:0040F260 Str             = dword ptr  4
.text:0040F260 SubStr          = dword ptr  8
.text:0040F260
.text:0040F260                 jmp     ds:__imp_strstr
.text:0040F260 strstr          endp
.text:0040F260
.text:0040F260 ; ---------------------------------------------------------------------------
.text:0040F266                 align 10h
.text:0040F270
.text:0040F270 ; =============== S U B R O U T I N E =======================================
.text:0040F270
.text:0040F270 ; Attributes: thunk
.text:0040F270
.text:0040F270 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0040F270 strrchr         proc near               ; CODE XREF: sub_408370+CB↑p
.text:0040F270                                         ; sub_408370+3A7↑p ...
.text:0040F270
.text:0040F270 Str             = dword ptr  4
.text:0040F270
.text:0040F270                 jmp     ds:__imp_strrchr
.text:0040F270 strrchr         endp
.text:0040F270
.text:0040F270 ; ---------------------------------------------------------------------------
.text:0040F276                 align 10h
.text:0040F280
.text:0040F280 ; =============== S U B R O U T I N E =======================================
.text:0040F280
.text:0040F280 ; Attributes: thunk
.text:0040F280
.text:0040F280 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040F280 strncpy         proc near               ; CODE XREF: sub_409D70+BE↑p
.text:0040F280                                         ; .text:0040A5EA↑p ...
.text:0040F280
.text:0040F280 Destination     = dword ptr  4
.text:0040F280 Source          = dword ptr  8
.text:0040F280 Count           = dword ptr  0Ch
.text:0040F280
.text:0040F280                 jmp     ds:__imp_strncpy
.text:0040F280 strncpy         endp
.text:0040F280
.text:0040F280 ; ---------------------------------------------------------------------------
.text:0040F286                 align 10h
.text:0040F290
.text:0040F290 ; =============== S U B R O U T I N E =======================================
.text:0040F290
.text:0040F290 ; Attributes: thunk
.text:0040F290
.text:0040F290 ; int __cdecl toupper(int C)
.text:0040F290 toupper         proc near               ; CODE XREF: sub_409D70+10E↑p
.text:0040F290
.text:0040F290 C               = dword ptr  4
.text:0040F290
.text:0040F290                 jmp     ds:__imp_toupper
.text:0040F290 toupper         endp
.text:0040F290
.text:0040F290 ; ---------------------------------------------------------------------------
.text:0040F296                 align 10h
.text:0040F2A0
.text:0040F2A0 ; =============== S U B R O U T I N E =======================================
.text:0040F2A0
.text:0040F2A0 ; Attributes: thunk
.text:0040F2A0
.text:0040F2A0 ; int __cdecl isalpha(int C)
.text:0040F2A0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0040F2A0
.text:0040F2A0 C               = dword ptr  4
.text:0040F2A0
.text:0040F2A0                 jmp     ds:__imp_isalpha
.text:0040F2A0 isalpha         endp
.text:0040F2A0
.text:0040F2A0 ; ---------------------------------------------------------------------------
.text:0040F2A6                 align 10h
.text:0040F2B0
.text:0040F2B0 ; =============== S U B R O U T I N E =======================================
.text:0040F2B0
.text:0040F2B0 ; Attributes: thunk
.text:0040F2B0
.text:0040F2B0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0040F2B0 _stricmp_0      proc near               ; CODE XREF: .text:0040B124↑p
.text:0040F2B0
.text:0040F2B0 String1         = dword ptr  4
.text:0040F2B0 String2         = dword ptr  8
.text:0040F2B0
.text:0040F2B0                 jmp     ds:__imp__stricmp_0
.text:0040F2B0 _stricmp_0      endp
.text:0040F2B0
.text:0040F2B0 ; ---------------------------------------------------------------------------
.text:0040F2B6                 align 10h
.text:0040F2C0
.text:0040F2C0 ; =============== S U B R O U T I N E =======================================
.text:0040F2C0
.text:0040F2C0 ; Attributes: thunk
.text:0040F2C0
.text:0040F2C0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0040F2C0 sprintf         proc near               ; CODE XREF: ___addmntentstr+11F↑p
.text:0040F2C0                                         ; .text:0040C2BA↑p ...
.text:0040F2C0
.text:0040F2C0 Buffer          = dword ptr  4
.text:0040F2C0 Format          = dword ptr  8
.text:0040F2C0
.text:0040F2C0                 jmp     ds:__imp_sprintf
.text:0040F2C0 sprintf         endp
.text:0040F2C0
.text:0040F2C0 ; ---------------------------------------------------------------------------
.text:0040F2C6                 align 10h
.text:0040F2D0
.text:0040F2D0 ; =============== S U B R O U T I N E =======================================
.text:0040F2D0
.text:0040F2D0 ; Attributes: thunk
.text:0040F2D0
.text:0040F2D0 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040F2D0 sscanf          proc near               ; CODE XREF: .text:0040B52E↑p
.text:0040F2D0
.text:0040F2D0 Buffer          = dword ptr  4
.text:0040F2D0 Format          = dword ptr  8
.text:0040F2D0
.text:0040F2D0                 jmp     ds:__imp_sscanf
.text:0040F2D0 sscanf          endp
.text:0040F2D0
.text:0040F2D0 ; ---------------------------------------------------------------------------
.text:0040F2D6                 align 10h
.text:0040F2E0
.text:0040F2E0 ; =============== S U B R O U T I N E =======================================
.text:0040F2E0
.text:0040F2E0 ; Attributes: thunk
.text:0040F2E0
.text:0040F2E0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0040F2E0 strspn          proc near               ; CODE XREF: .text:0040B37A↑p
.text:0040F2E0                                         ; .text:0040B594↑p ...
.text:0040F2E0
.text:0040F2E0 Str             = dword ptr  4
.text:0040F2E0 Control         = dword ptr  8
.text:0040F2E0
.text:0040F2E0                 jmp     ds:__imp_strspn
.text:0040F2E0 strspn          endp
.text:0040F2E0
.text:0040F2E0 ; ---------------------------------------------------------------------------
.text:0040F2E6                 align 10h
.text:0040F2F0
.text:0040F2F0 ; =============== S U B R O U T I N E =======================================
.text:0040F2F0
.text:0040F2F0 ; Attributes: thunk
.text:0040F2F0
.text:0040F2F0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0040F2F0 fopen           proc near               ; CODE XREF: sub_40BE2F+26↑p
.text:0040F2F0                                         ; sub_40BE2F+99↑p
.text:0040F2F0
.text:0040F2F0 FileName        = dword ptr  4
.text:0040F2F0 Mode            = dword ptr  8
.text:0040F2F0
.text:0040F2F0                 jmp     ds:__imp_fopen
.text:0040F2F0 fopen           endp
.text:0040F2F0
.text:0040F2F0 ; ---------------------------------------------------------------------------
.text:0040F2F6                 align 10h
.text:0040F300
.text:0040F300 ; =============== S U B R O U T I N E =======================================
.text:0040F300
.text:0040F300 ; Attributes: thunk
.text:0040F300
.text:0040F300 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040F300 _get_osfhandle  proc near               ; CODE XREF: sub_40BFE0+3A↑p
.text:0040F300                                         ; sub_40CBC0+15↑p
.text:0040F300
.text:0040F300 FileHandle      = dword ptr  4
.text:0040F300
.text:0040F300                 jmp     ds:__imp__get_osfhandle
.text:0040F300 _get_osfhandle  endp
.text:0040F300
.text:0040F300 ; ---------------------------------------------------------------------------
.text:0040F306                 align 10h
.text:0040F310
.text:0040F310 ; =============== S U B R O U T I N E =======================================
.text:0040F310
.text:0040F310 ; Attributes: thunk
.text:0040F310
.text:0040F310 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040F310 _filelengthi64  proc near               ; CODE XREF: sub_40CBC0+1F↑p
.text:0040F310
.text:0040F310 FileHandle      = dword ptr  4
.text:0040F310
.text:0040F310                 jmp     ds:__imp__filelengthi64
.text:0040F310 _filelengthi64  endp
.text:0040F310
.text:0040F310 ; ---------------------------------------------------------------------------
.text:0040F316                 align 10h
.text:0040F320
.text:0040F320 ; =============== S U B R O U T I N E =======================================
.text:0040F320
.text:0040F320 ; Attributes: thunk
.text:0040F320
.text:0040F320 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0040F320 strpbrk         proc near               ; CODE XREF: sub_40CC20+87↑p
.text:0040F320
.text:0040F320 Str             = dword ptr  4
.text:0040F320 Control         = dword ptr  8
.text:0040F320
.text:0040F320                 jmp     ds:__imp_strpbrk
.text:0040F320 strpbrk         endp
.text:0040F320
.text:0040F320 ; ---------------------------------------------------------------------------
.text:0040F326                 align 10h
.text:0040F330
.text:0040F330 ; =============== S U B R O U T I N E =======================================
.text:0040F330
.text:0040F330 ; Attributes: thunk
.text:0040F330
.text:0040F330 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0040F330 _fdopen         proc near               ; CODE XREF: sub_40CCC0+69↑p
.text:0040F330
.text:0040F330 FileHandle      = dword ptr  4
.text:0040F330 Format          = dword ptr  8
.text:0040F330
.text:0040F330                 jmp     ds:__imp__fdopen
.text:0040F330 _fdopen         endp
.text:0040F330
.text:0040F330 ; ---------------------------------------------------------------------------
.text:0040F336                 align 10h
.text:0040F340
.text:0040F340 ; =============== S U B R O U T I N E =======================================
.text:0040F340
.text:0040F340 ; Attributes: thunk
.text:0040F340
.text:0040F340 ; int __cdecl close(int FileHandle)
.text:0040F340 _close          proc near               ; CODE XREF: sub_40CCC0+90↑p
.text:0040F340
.text:0040F340 FileHandle      = dword ptr  4
.text:0040F340
.text:0040F340                 jmp     ds:__imp__close
.text:0040F340 _close          endp
.text:0040F340
.text:0040F340 ; ---------------------------------------------------------------------------
.text:0040F346                 align 10h
.text:0040F350
.text:0040F350 ; =============== S U B R O U T I N E =======================================
.text:0040F350
.text:0040F350 ; Attributes: thunk
.text:0040F350
.text:0040F350 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040F350 _open           proc near               ; CODE XREF: sub_40D110:loc_40D4A0↑p
.text:0040F350
.text:0040F350 FileName        = dword ptr  4
.text:0040F350 OpenFlag        = dword ptr  8
.text:0040F350
.text:0040F350                 jmp     ds:__imp__open
.text:0040F350 _open           endp
.text:0040F350
.text:0040F350 ; ---------------------------------------------------------------------------
.text:0040F356                 align 10h
.text:0040F360
.text:0040F360 ; =============== S U B R O U T I N E =======================================
.text:0040F360
.text:0040F360 ; Attributes: noreturn thunk
.text:0040F360
.text:0040F360 _assert         proc near               ; CODE XREF: sub_40D110+414↑p
.text:0040F360                 jmp     ds:__imp__assert
.text:0040F360 _assert         endp
.text:0040F360
.text:0040F360 ; ---------------------------------------------------------------------------
.text:0040F366                 align 10h
.text:0040F370
.text:0040F370 ; =============== S U B R O U T I N E =======================================
.text:0040F370
.text:0040F370 ; Attributes: thunk
.text:0040F370
.text:0040F370 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040F370 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040F370
.text:0040F370 lpTopLevelExceptionFilter= dword ptr  4
.text:0040F370
.text:0040F370                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040F370 SetUnhandledExceptionFilter endp
.text:0040F370
.text:0040F370 ; ---------------------------------------------------------------------------
.text:0040F376                 align 10h
.text:0040F380
.text:0040F380 ; =============== S U B R O U T I N E =======================================
.text:0040F380
.text:0040F380 ; Attributes: noreturn thunk
.text:0040F380
.text:0040F380 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040F380 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040F380
.text:0040F380 uExitCode       = dword ptr  4
.text:0040F380
.text:0040F380                 jmp     ds:__imp_ExitProcess
.text:0040F380 ExitProcess     endp
.text:0040F380
.text:0040F380 ; ---------------------------------------------------------------------------
.text:0040F386                 align 10h
.text:0040F390
.text:0040F390 ; =============== S U B R O U T I N E =======================================
.text:0040F390
.text:0040F390 ; Attributes: thunk
.text:0040F390
.text:0040F390 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0040F390 SetErrorMode    proc near               ; CODE XREF: sub_407AA0+57↑p
.text:0040F390                                         ; sub_407AA0+78↑p ...
.text:0040F390
.text:0040F390 uMode           = dword ptr  4
.text:0040F390
.text:0040F390                 jmp     ds:__imp_SetErrorMode
.text:0040F390 SetErrorMode    endp
.text:0040F390
.text:0040F390 ; ---------------------------------------------------------------------------
.text:0040F396                 align 10h
.text:0040F3A0
.text:0040F3A0 ; =============== S U B R O U T I N E =======================================
.text:0040F3A0
.text:0040F3A0 ; Attributes: thunk
.text:0040F3A0
.text:0040F3A0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0040F3A0 GetFileAttributesA proc near            ; CODE XREF: sub_407AA0+62↑p
.text:0040F3A0                                         ; sub_407BB0+47↑p
.text:0040F3A0
.text:0040F3A0 lpFileName      = dword ptr  4
.text:0040F3A0
.text:0040F3A0                 jmp     ds:__imp_GetFileAttributesA
.text:0040F3A0 GetFileAttributesA endp
.text:0040F3A0
.text:0040F3A0 ; ---------------------------------------------------------------------------
.text:0040F3A6                 align 10h
.text:0040F3B0
.text:0040F3B0 ; =============== S U B R O U T I N E =======================================
.text:0040F3B0
.text:0040F3B0 ; Attributes: thunk
.text:0040F3B0
.text:0040F3B0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0040F3B0 GetModuleHandleA proc near              ; CODE XREF: sub_407BB0+18↑p
.text:0040F3B0                                         ; sub_408370+329↑p ...
.text:0040F3B0
.text:0040F3B0 lpModuleName    = dword ptr  4
.text:0040F3B0
.text:0040F3B0                 jmp     ds:__imp_GetModuleHandleA
.text:0040F3B0 GetModuleHandleA endp
.text:0040F3B0
.text:0040F3B0 ; ---------------------------------------------------------------------------
.text:0040F3B6                 align 10h
.text:0040F3C0
.text:0040F3C0 ; =============== S U B R O U T I N E =======================================
.text:0040F3C0
.text:0040F3C0 ; Attributes: thunk
.text:0040F3C0
.text:0040F3C0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0040F3C0 GetProcAddress  proc near               ; CODE XREF: sub_407BB0+33↑p
.text:0040F3C0                                         ; sub_407D20+2E↑p ...
.text:0040F3C0
.text:0040F3C0 hModule         = dword ptr  4
.text:0040F3C0 lpProcName      = dword ptr  8
.text:0040F3C0
.text:0040F3C0                 jmp     ds:__imp_GetProcAddress
.text:0040F3C0 GetProcAddress  endp
.text:0040F3C0
.text:0040F3C0 ; ---------------------------------------------------------------------------
.text:0040F3C6                 align 10h
.text:0040F3D0
.text:0040F3D0 ; =============== S U B R O U T I N E =======================================
.text:0040F3D0
.text:0040F3D0 ; Attributes: thunk
.text:0040F3D0
.text:0040F3D0 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0040F3D0 FreeLibrary     proc near               ; CODE XREF: sub_407BB0+A4↑p
.text:0040F3D0                                         ; sub_407D20+11D↑p ...
.text:0040F3D0
.text:0040F3D0 hLibModule      = dword ptr  4
.text:0040F3D0
.text:0040F3D0                 jmp     ds:__imp_FreeLibrary
.text:0040F3D0 FreeLibrary     endp
.text:0040F3D0
.text:0040F3D0 ; ---------------------------------------------------------------------------
.text:0040F3D6                 align 10h
.text:0040F3E0
.text:0040F3E0 ; =============== S U B R O U T I N E =======================================
.text:0040F3E0
.text:0040F3E0 ; Attributes: thunk
.text:0040F3E0
.text:0040F3E0 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040F3E0 FindFirstFileA  proc near               ; CODE XREF: sub_407BB0+CE↑p
.text:0040F3E0                                         ; sub_407D20+14F↑p ...
.text:0040F3E0
.text:0040F3E0 lpFileName      = dword ptr  4
.text:0040F3E0 lpFindFileData  = dword ptr  8
.text:0040F3E0
.text:0040F3E0                 jmp     ds:__imp_FindFirstFileA
.text:0040F3E0 FindFirstFileA  endp
.text:0040F3E0
.text:0040F3E0 ; ---------------------------------------------------------------------------
.text:0040F3E6                 align 10h
.text:0040F3F0
.text:0040F3F0 ; =============== S U B R O U T I N E =======================================
.text:0040F3F0
.text:0040F3F0 ; Attributes: thunk
.text:0040F3F0
.text:0040F3F0 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0040F3F0 FindClose       proc near               ; CODE XREF: sub_407BB0+123↑p
.text:0040F3F0                                         ; sub_407D20+10E↑p ...
.text:0040F3F0
.text:0040F3F0 hFindFile       = dword ptr  4
.text:0040F3F0
.text:0040F3F0                 jmp     ds:__imp_FindClose
.text:0040F3F0 FindClose       endp
.text:0040F3F0
.text:0040F3F0 ; ---------------------------------------------------------------------------
.text:0040F3F6                 align 10h
.text:0040F400
.text:0040F400 ; =============== S U B R O U T I N E =======================================
.text:0040F400
.text:0040F400 ; Attributes: thunk
.text:0040F400
.text:0040F400 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0040F400 LoadLibraryA    proc near               ; CODE XREF: sub_407D20+13↑p
.text:0040F400                                         ; sub_408370+134↑p ...
.text:0040F400
.text:0040F400 lpLibFileName   = dword ptr  4
.text:0040F400
.text:0040F400                 jmp     ds:__imp_LoadLibraryA
.text:0040F400 LoadLibraryA    endp
.text:0040F400
.text:0040F400 ; ---------------------------------------------------------------------------
.text:0040F406                 align 10h
.text:0040F410
.text:0040F410 ; =============== S U B R O U T I N E =======================================
.text:0040F410
.text:0040F410 ; Attributes: thunk
.text:0040F410
.text:0040F410 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040F410 FindNextFileA   proc near               ; CODE XREF: sub_407D20+FF↑p
.text:0040F410
.text:0040F410 hFindFile       = dword ptr  4
.text:0040F410 lpFindFileData  = dword ptr  8
.text:0040F410
.text:0040F410                 jmp     ds:__imp_FindNextFileA
.text:0040F410 FindNextFileA   endp
.text:0040F410
.text:0040F410 ; ---------------------------------------------------------------------------
.text:0040F416                 align 10h
.text:0040F420
.text:0040F420 ; =============== S U B R O U T I N E =======================================
.text:0040F420
.text:0040F420 ; Attributes: thunk
.text:0040F420
.text:0040F420 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0040F420 GetFileType     proc near               ; CODE XREF: sub_407EA0+43↑p
.text:0040F420                                         ; .text:00408B5A↑p
.text:0040F420
.text:0040F420 hFile           = dword ptr  4
.text:0040F420
.text:0040F420                 jmp     ds:__imp_GetFileType
.text:0040F420 GetFileType     endp
.text:0040F420
.text:0040F420 ; ---------------------------------------------------------------------------
.text:0040F426                 align 10h
.text:0040F430
.text:0040F430 ; =============== S U B R O U T I N E =======================================
.text:0040F430
.text:0040F430 ; Attributes: thunk
.text:0040F430
.text:0040F430 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0040F430 GetFileInformationByHandle proc near    ; CODE XREF: sub_407EA0+69↑p
.text:0040F430
.text:0040F430 hFile           = dword ptr  4
.text:0040F430 lpFileInformation= dword ptr  8
.text:0040F430
.text:0040F430                 jmp     ds:__imp_GetFileInformationByHandle
.text:0040F430 GetFileInformationByHandle endp
.text:0040F430
.text:0040F430 ; ---------------------------------------------------------------------------
.text:0040F436                 align 10h
.text:0040F440
.text:0040F440 ; =============== S U B R O U T I N E =======================================
.text:0040F440
.text:0040F440 ; Attributes: thunk
.text:0040F440
.text:0040F440 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0040F440 GetFileSize     proc near               ; CODE XREF: sub_407EA0+3F2↑p
.text:0040F440
.text:0040F440 hFile           = dword ptr  4
.text:0040F440 lpFileSizeHigh  = dword ptr  8
.text:0040F440
.text:0040F440                 jmp     ds:__imp_GetFileSize
.text:0040F440 GetFileSize     endp
.text:0040F440
.text:0040F440 ; ---------------------------------------------------------------------------
.text:0040F446                 align 10h
.text:0040F450
.text:0040F450 ; =============== S U B R O U T I N E =======================================
.text:0040F450
.text:0040F450 ; Attributes: thunk
.text:0040F450
.text:0040F450 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0040F450 PeekNamedPipe   proc near               ; CODE XREF: sub_407EA0+439↑p
.text:0040F450
.text:0040F450 hNamedPipe      = dword ptr  4
.text:0040F450 lpBuffer        = dword ptr  8
.text:0040F450 nBufferSize     = dword ptr  0Ch
.text:0040F450 lpBytesRead     = dword ptr  10h
.text:0040F450 lpTotalBytesAvail= dword ptr  14h
.text:0040F450 lpBytesLeftThisMessage= dword ptr  18h
.text:0040F450
.text:0040F450                 jmp     ds:__imp_PeekNamedPipe
.text:0040F450 PeekNamedPipe   endp
.text:0040F450
.text:0040F450 ; ---------------------------------------------------------------------------
.text:0040F456                 align 10h
.text:0040F460
.text:0040F460 ; =============== S U B R O U T I N E =======================================
.text:0040F460
.text:0040F460 ; Attributes: thunk
.text:0040F460
.text:0040F460 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0040F460 GetDriveTypeA   proc near               ; CODE XREF: sub_408370+4C↑p
.text:0040F460
.text:0040F460 lpRootPathName  = dword ptr  4
.text:0040F460
.text:0040F460                 jmp     ds:__imp_GetDriveTypeA
.text:0040F460 GetDriveTypeA   endp
.text:0040F460
.text:0040F460 ; ---------------------------------------------------------------------------
.text:0040F466                 align 10h
.text:0040F470
.text:0040F470 ; =============== S U B R O U T I N E =======================================
.text:0040F470
.text:0040F470 ; Attributes: thunk
.text:0040F470
.text:0040F470 ; DWORD __stdcall GetLastError()
.text:0040F470 GetLastError    proc near               ; CODE XREF: sub_408370:loc_4085F9↑p
.text:0040F470                                         ; .text:loc_40913D↑p ...
.text:0040F470                 jmp     ds:__imp_GetLastError
.text:0040F470 GetLastError    endp
.text:0040F470
.text:0040F470 ; ---------------------------------------------------------------------------
.text:0040F476                 align 10h
.text:0040F480
.text:0040F480 ; =============== S U B R O U T I N E =======================================
.text:0040F480
.text:0040F480 ; Attributes: thunk
.text:0040F480
.text:0040F480 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0040F480 GetVolumeInformationA proc near         ; CODE XREF: sub_408870+64↑p
.text:0040F480                                         ; .text:00408E1C↑p ...
.text:0040F480
.text:0040F480 lpRootPathName  = dword ptr  4
.text:0040F480 lpVolumeNameBuffer= dword ptr  8
.text:0040F480 nVolumeNameSize = dword ptr  0Ch
.text:0040F480 lpVolumeSerialNumber= dword ptr  10h
.text:0040F480 lpMaximumComponentLength= dword ptr  14h
.text:0040F480 lpFileSystemFlags= dword ptr  18h
.text:0040F480 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0040F480 nFileSystemNameSize= dword ptr  20h
.text:0040F480
.text:0040F480                 jmp     ds:__imp_GetVolumeInformationA
.text:0040F480 GetVolumeInformationA endp
.text:0040F480
.text:0040F480 ; ---------------------------------------------------------------------------
.text:0040F486                 align 10h
.text:0040F490
.text:0040F490 ; =============== S U B R O U T I N E =======================================
.text:0040F490
.text:0040F490 ; Attributes: thunk
.text:0040F490
.text:0040F490 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0040F490 CreateFileA     proc near               ; CODE XREF: sub_407890+1D76↑p
.text:0040F490                                         ; .text:0040A363↑p ...
.text:0040F490
.text:0040F490 lpFileName      = dword ptr  4
.text:0040F490 dwDesiredAccess = dword ptr  8
.text:0040F490 dwShareMode     = dword ptr  0Ch
.text:0040F490 lpSecurityAttributes= dword ptr  10h
.text:0040F490 dwCreationDisposition= dword ptr  14h
.text:0040F490 dwFlagsAndAttributes= dword ptr  18h
.text:0040F490 hTemplateFile   = dword ptr  1Ch
.text:0040F490
.text:0040F490                 jmp     ds:__imp_CreateFileA
.text:0040F490 CreateFileA     endp
.text:0040F490
.text:0040F490 ; ---------------------------------------------------------------------------
.text:0040F496                 align 10h
.text:0040F4A0
.text:0040F4A0 ; =============== S U B R O U T I N E =======================================
.text:0040F4A0
.text:0040F4A0 ; Attributes: thunk
.text:0040F4A0
.text:0040F4A0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0040F4A0 CloseHandle     proc near               ; CODE XREF: sub_407890+1D91↑p
.text:0040F4A0                                         ; .text:0040A3D9↑p ...
.text:0040F4A0
.text:0040F4A0 hObject         = dword ptr  4
.text:0040F4A0
.text:0040F4A0                 jmp     ds:__imp_CloseHandle
.text:0040F4A0 CloseHandle     endp
.text:0040F4A0
.text:0040F4A0 ; ---------------------------------------------------------------------------
.text:0040F4A6                 align 10h
.text:0040F4B0
.text:0040F4B0 ; =============== S U B R O U T I N E =======================================
.text:0040F4B0
.text:0040F4B0 ; Attributes: thunk
.text:0040F4B0
.text:0040F4B0 ; BOOL __stdcall AreFileApisANSI()
.text:0040F4B0 AreFileApisANSI proc near               ; CODE XREF: sub_4096A0+89↑p
.text:0040F4B0                 jmp     ds:__imp_AreFileApisANSI
.text:0040F4B0 AreFileApisANSI endp
.text:0040F4B0
.text:0040F4B0 ; ---------------------------------------------------------------------------
.text:0040F4B6                 align 10h
.text:0040F4C0
.text:0040F4C0 ; =============== S U B R O U T I N E =======================================
.text:0040F4C0
.text:0040F4C0 ; Attributes: thunk
.text:0040F4C0
.text:0040F4C0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0040F4C0 MultiByteToWideChar proc near           ; CODE XREF: sub_4096A0+BD↑p
.text:0040F4C0
.text:0040F4C0 CodePage        = dword ptr  4
.text:0040F4C0 dwFlags         = dword ptr  8
.text:0040F4C0 lpMultiByteStr  = dword ptr  0Ch
.text:0040F4C0 cbMultiByte     = dword ptr  10h
.text:0040F4C0 lpWideCharStr   = dword ptr  14h
.text:0040F4C0 cchWideChar     = dword ptr  18h
.text:0040F4C0
.text:0040F4C0                 jmp     ds:__imp_MultiByteToWideChar
.text:0040F4C0 MultiByteToWideChar endp
.text:0040F4C0
.text:0040F4C0 ; ---------------------------------------------------------------------------
.text:0040F4C6                 align 10h
.text:0040F4D0
.text:0040F4D0 ; =============== S U B R O U T I N E =======================================
.text:0040F4D0
.text:0040F4D0 ; Attributes: thunk
.text:0040F4D0
.text:0040F4D0 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0040F4D0 lstrcpyA        proc near               ; CODE XREF: sub_4096A0+128↑p
.text:0040F4D0
.text:0040F4D0 lpString1       = dword ptr  4
.text:0040F4D0 lpString2       = dword ptr  8
.text:0040F4D0
.text:0040F4D0                 jmp     ds:__imp_lstrcpyA
.text:0040F4D0 lstrcpyA        endp
.text:0040F4D0
.text:0040F4D0 ; ---------------------------------------------------------------------------
.text:0040F4D6                 align 10h
.text:0040F4E0
.text:0040F4E0 ; =============== S U B R O U T I N E =======================================
.text:0040F4E0
.text:0040F4E0 ; Attributes: thunk
.text:0040F4E0
.text:0040F4E0 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0040F4E0 GetFullPathNameA proc near              ; CODE XREF: sub_409C30+45↑p
.text:0040F4E0                                         ; sub_409C30+ED↑p
.text:0040F4E0
.text:0040F4E0 lpFileName      = dword ptr  4
.text:0040F4E0 nBufferLength   = dword ptr  8
.text:0040F4E0 lpBuffer        = dword ptr  0Ch
.text:0040F4E0 lpFilePart      = dword ptr  10h
.text:0040F4E0
.text:0040F4E0                 jmp     ds:__imp_GetFullPathNameA
.text:0040F4E0 GetFullPathNameA endp
.text:0040F4E0
.text:0040F4E0 ; ---------------------------------------------------------------------------
.text:0040F4E6                 align 10h
.text:0040F4F0
.text:0040F4F0 ; =============== S U B R O U T I N E =======================================
.text:0040F4F0
.text:0040F4F0 ; Attributes: thunk
.text:0040F4F0
.text:0040F4F0 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040F4F0 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040A018↑p
.text:0040F4F0                                         ; .text:0040A034↑p ...
.text:0040F4F0
.text:0040F4F0 nBufferLength   = dword ptr  4
.text:0040F4F0 lpBuffer        = dword ptr  8
.text:0040F4F0
.text:0040F4F0                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0040F4F0 GetCurrentDirectoryA endp
.text:0040F4F0
.text:0040F4F0 ; ---------------------------------------------------------------------------
.text:0040F4F6                 align 10h
.text:0040F500
.text:0040F500 ; =============== S U B R O U T I N E =======================================
.text:0040F500
.text:0040F500 ; Attributes: thunk
.text:0040F500
.text:0040F500 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0040F500 DeviceIoControl proc near               ; CODE XREF: .text:0040A3CC↑p
.text:0040F500                                         ; sub_40A790+1E5↑p
.text:0040F500
.text:0040F500 hDevice         = dword ptr  4
.text:0040F500 dwIoControlCode = dword ptr  8
.text:0040F500 lpInBuffer      = dword ptr  0Ch
.text:0040F500 nInBufferSize   = dword ptr  10h
.text:0040F500 lpOutBuffer     = dword ptr  14h
.text:0040F500 nOutBufferSize  = dword ptr  18h
.text:0040F500 lpBytesReturned = dword ptr  1Ch
.text:0040F500 lpOverlapped    = dword ptr  20h
.text:0040F500
.text:0040F500                 jmp     ds:__imp_DeviceIoControl
.text:0040F500 DeviceIoControl endp
.text:0040F500
.text:0040F500 ; ---------------------------------------------------------------------------
.text:0040F506                 align 10h
.text:0040F510
.text:0040F510 ; =============== S U B R O U T I N E =======================================
.text:0040F510
.text:0040F510 ; Attributes: thunk
.text:0040F510
.text:0040F510 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040F510 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040A723↑p
.text:0040F510                                         ; sub_40A790+7B↑p ...
.text:0040F510
.text:0040F510 lpRootPathName  = dword ptr  4
.text:0040F510 lpSectorsPerCluster= dword ptr  8
.text:0040F510 lpBytesPerSector= dword ptr  0Ch
.text:0040F510 lpNumberOfFreeClusters= dword ptr  10h
.text:0040F510 lpTotalNumberOfClusters= dword ptr  14h
.text:0040F510
.text:0040F510                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0040F510 GetDiskFreeSpaceA endp
.text:0040F510
.text:0040F510 ; ---------------------------------------------------------------------------
.text:0040F516                 align 10h
.text:0040F520
.text:0040F520 ; =============== S U B R O U T I N E =======================================
.text:0040F520
.text:0040F520 ; Attributes: thunk
.text:0040F520
.text:0040F520 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0040F520 GetModuleFileNameA proc near            ; CODE XREF: sub_40AFA0+1C↑p
.text:0040F520
.text:0040F520 hModule         = dword ptr  4
.text:0040F520 lpFilename      = dword ptr  8
.text:0040F520 nSize           = dword ptr  0Ch
.text:0040F520
.text:0040F520                 jmp     ds:__imp_GetModuleFileNameA
.text:0040F520 GetModuleFileNameA endp
.text:0040F520
.text:0040F520 ; ---------------------------------------------------------------------------
.text:0040F526                 align 10h
.text:0040F530
.text:0040F530 ; =============== S U B R O U T I N E =======================================
.text:0040F530
.text:0040F530 ; Attributes: thunk
.text:0040F530
.text:0040F530 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0040F530 GetShortPathNameA proc near             ; CODE XREF: .text:0040B226↑p
.text:0040F530                                         ; .text:0040B250↑p
.text:0040F530
.text:0040F530 lpszLongPath    = dword ptr  4
.text:0040F530 lpszShortPath   = dword ptr  8
.text:0040F530 cchBuffer       = dword ptr  0Ch
.text:0040F530
.text:0040F530                 jmp     ds:__imp_GetShortPathNameA
.text:0040F530 GetShortPathNameA endp
.text:0040F530
.text:0040F530 ; ---------------------------------------------------------------------------
.text:0040F536                 align 10h
.text:0040F540
.text:0040F540 ; =============== S U B R O U T I N E =======================================
.text:0040F540
.text:0040F540 ; Attributes: thunk
.text:0040F540
.text:0040F540 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040F540 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040B6EF↑p
.text:0040F540                                         ; .text:0040B71E↑p ...
.text:0040F540
.text:0040F540 nBufferLength   = dword ptr  4
.text:0040F540 lpBuffer        = dword ptr  8
.text:0040F540
.text:0040F540                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0040F540 GetLogicalDriveStringsA endp
.text:0040F540
.text:0040F540 ; ---------------------------------------------------------------------------
.text:0040F546                 align 10h
.text:0040F550
.text:0040F550 ; =============== S U B R O U T I N E =======================================
.text:0040F550
.text:0040F550 ; Attributes: thunk
.text:0040F550
.text:0040F550 ; HANDLE __stdcall GetProcessHeap()
.text:0040F550 GetProcessHeap  proc near               ; CODE XREF: .text:0040B6F9↑p
.text:0040F550                                         ; sub_40BDD0+24↑p ...
.text:0040F550                 jmp     ds:__imp_GetProcessHeap
.text:0040F550 GetProcessHeap  endp
.text:0040F550
.text:0040F550 ; ---------------------------------------------------------------------------
.text:0040F556                 align 10h
.text:0040F560
.text:0040F560 ; =============== S U B R O U T I N E =======================================
.text:0040F560
.text:0040F560 ; Attributes: thunk
.text:0040F560
.text:0040F560 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0040F560 HeapAlloc       proc near               ; CODE XREF: .text:0040B70D↑p
.text:0040F560                                         ; sub_40BDD0+38↑p ...
.text:0040F560
.text:0040F560 hHeap           = dword ptr  4
.text:0040F560 dwFlags         = dword ptr  8
.text:0040F560 dwBytes         = dword ptr  0Ch
.text:0040F560
.text:0040F560                 jmp     ds:__imp_HeapAlloc
.text:0040F560 HeapAlloc       endp
.text:0040F560
.text:0040F560 ; ---------------------------------------------------------------------------
.text:0040F566                 align 10h
.text:0040F570
.text:0040F570 ; =============== S U B R O U T I N E =======================================
.text:0040F570
.text:0040F570 ; Attributes: thunk
.text:0040F570
.text:0040F570 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0040F570 HeapFree        proc near               ; CODE XREF: .text:0040BF0D↑p
.text:0040F570
.text:0040F570 hHeap           = dword ptr  4
.text:0040F570 dwFlags         = dword ptr  8
.text:0040F570 lpMem           = dword ptr  0Ch
.text:0040F570
.text:0040F570                 jmp     ds:__imp_HeapFree
.text:0040F570 HeapFree        endp
.text:0040F570
.text:0040F570 ; ---------------------------------------------------------------------------
.text:0040F576                 align 10h
.text:0040F580
.text:0040F580 ; =============== S U B R O U T I N E =======================================
.text:0040F580
.text:0040F580 ; Attributes: thunk
.text:0040F580
.text:0040F580 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0040F580 lstrcmpiA       proc near               ; CODE XREF: .text:0040C54B↑p
.text:0040F580                                         ; .text:0040C562↑p ...
.text:0040F580
.text:0040F580 lpString1       = dword ptr  4
.text:0040F580 lpString2       = dword ptr  8
.text:0040F580
.text:0040F580                 jmp     ds:__imp_lstrcmpiA
.text:0040F580 lstrcmpiA       endp
.text:0040F580
.text:0040F580 ; ---------------------------------------------------------------------------
.text:0040F586                 align 10h
.text:0040F590
.text:0040F590 ; =============== S U B R O U T I N E =======================================
.text:0040F590
.text:0040F590 ; Attributes: thunk
.text:0040F590
.text:0040F590 ; DWORD __stdcall GetVersion()
.text:0040F590 GetVersion      proc near               ; CODE XREF: .text:0040C8D3↑p
.text:0040F590                 jmp     ds:__imp_GetVersion
.text:0040F590 GetVersion      endp
.text:0040F590
.text:0040F590 ; ---------------------------------------------------------------------------
.text:0040F596                 align 10h
.text:0040F5A0
.text:0040F5A0 ; =============== S U B R O U T I N E =======================================
.text:0040F5A0
.text:0040F5A0 ; Attributes: thunk
.text:0040F5A0
.text:0040F5A0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0040F5A0 GetVersionExA   proc near               ; CODE XREF: sub_40C960+32↑p
.text:0040F5A0                                         ; sub_40C960+20B↑p
.text:0040F5A0
.text:0040F5A0 lpVersionInformation= dword ptr  4
.text:0040F5A0
.text:0040F5A0                 jmp     ds:__imp_GetVersionExA
.text:0040F5A0 GetVersionExA   endp
.text:0040F5A0
.text:0040F5A0 ; ---------------------------------------------------------------------------
.text:0040F5A6                 align 10h
.text:0040F5B0
.text:0040F5B0 ; =============== S U B R O U T I N E =======================================
.text:0040F5B0
.text:0040F5B0 ; Attributes: thunk
.text:0040F5B0
.text:0040F5B0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0040F5B0 UnlockFile      proc near               ; CODE XREF: sub_40CBC0+40↑p
.text:0040F5B0
.text:0040F5B0 hFile           = dword ptr  4
.text:0040F5B0 dwFileOffsetLow = dword ptr  8
.text:0040F5B0 dwFileOffsetHigh= dword ptr  0Ch
.text:0040F5B0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0040F5B0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0040F5B0
.text:0040F5B0                 jmp     ds:__imp_UnlockFile
.text:0040F5B0 UnlockFile      endp
.text:0040F5B0
.text:0040F5B0 ; ---------------------------------------------------------------------------
.text:0040F5B6                 align 10h
.text:0040F5C0
.text:0040F5C0 ; =============== S U B R O U T I N E =======================================
.text:0040F5C0
.text:0040F5C0 ; Attributes: thunk
.text:0040F5C0
.text:0040F5C0 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040F5C0 CreateDirectoryA proc near              ; CODE XREF: sub_40D540+22↑p
.text:0040F5C0
.text:0040F5C0 lpPathName      = dword ptr  4
.text:0040F5C0 lpSecurityAttributes= dword ptr  8
.text:0040F5C0
.text:0040F5C0                 jmp     ds:__imp_CreateDirectoryA
.text:0040F5C0 CreateDirectoryA endp
.text:0040F5C0
.text:0040F5C0 ; ---------------------------------------------------------------------------
.text:0040F5C6                 align 10h
.text:0040F5D0
.text:0040F5D0 ; =============== S U B R O U T I N E =======================================
.text:0040F5D0
.text:0040F5D0 ; Attributes: thunk
.text:0040F5D0
.text:0040F5D0 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0040F5D0 GetTimeZoneInformation proc near        ; CODE XREF: sub_40D640+22↑p
.text:0040F5D0
.text:0040F5D0 lpTimeZoneInformation= dword ptr  4
.text:0040F5D0
.text:0040F5D0                 jmp     ds:__imp_GetTimeZoneInformation
.text:0040F5D0 GetTimeZoneInformation endp
.text:0040F5D0
.text:0040F5D0 ; ---------------------------------------------------------------------------
.text:0040F5D6                 align 10h
.text:0040F5E0
.text:0040F5E0 ; =============== S U B R O U T I N E =======================================
.text:0040F5E0
.text:0040F5E0 ; Attributes: thunk
.text:0040F5E0
.text:0040F5E0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0040F5E0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40D640+4F↑p
.text:0040F5E0
.text:0040F5E0 lpSystemTimeAsFileTime= dword ptr  4
.text:0040F5E0
.text:0040F5E0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0040F5E0 GetSystemTimeAsFileTime endp
.text:0040F5E0
.text:0040F5E0 ; ---------------------------------------------------------------------------
.text:0040F5E6                 align 10h
.text:0040F5F0
.text:0040F5F0 ; =============== S U B R O U T I N E =======================================
.text:0040F5F0
.text:0040F5F0 ; Attributes: thunk
.text:0040F5F0
.text:0040F5F0 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0040F5F0 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040C4D1↑p
.text:0040F5F0
.text:0040F5F0 hKey            = dword ptr  4
.text:0040F5F0 lpSubKey        = dword ptr  8
.text:0040F5F0 ulOptions       = dword ptr  0Ch
.text:0040F5F0 samDesired      = dword ptr  10h
.text:0040F5F0 phkResult       = dword ptr  14h
.text:0040F5F0
.text:0040F5F0                 jmp     ds:__imp_RegOpenKeyExA
.text:0040F5F0 RegOpenKeyExA   endp
.text:0040F5F0
.text:0040F5F0 ; ---------------------------------------------------------------------------
.text:0040F5F6                 align 10h
.text:0040F600
.text:0040F600 ; =============== S U B R O U T I N E =======================================
.text:0040F600
.text:0040F600 ; Attributes: thunk
.text:0040F600
.text:0040F600 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0040F600 RegQueryValueExA proc near              ; CODE XREF: .text:0040C514↑p
.text:0040F600
.text:0040F600 hKey            = dword ptr  4
.text:0040F600 lpValueName     = dword ptr  8
.text:0040F600 lpReserved      = dword ptr  0Ch
.text:0040F600 lpType          = dword ptr  10h
.text:0040F600 lpData          = dword ptr  14h
.text:0040F600 lpcbData        = dword ptr  18h
.text:0040F600
.text:0040F600                 jmp     ds:__imp_RegQueryValueExA
.text:0040F600 RegQueryValueExA endp
.text:0040F600
.text:0040F600 ; ---------------------------------------------------------------------------
.text:0040F606                 align 10h
.text:0040F610
.text:0040F610 ; =============== S U B R O U T I N E =======================================
.text:0040F610
.text:0040F610 ; Attributes: thunk
.text:0040F610
.text:0040F610 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0040F610 RegCloseKey     proc near               ; CODE XREF: .text:0040C538↑p
.text:0040F610
.text:0040F610 hKey            = dword ptr  4
.text:0040F610
.text:0040F610                 jmp     ds:__imp_RegCloseKey
.text:0040F610 RegCloseKey     endp
.text:0040F610
.text:0040F610 ; ---------------------------------------------------------------------------
.text:0040F616                 db 2 dup(90h)
.text:0040F618                 dd 2 dup(0)
.text:0040F620                 dd 21400h, 0
.text:0040F628                 dd 0C0h, 46000000h
.text:0040F630 ; const IID rclsid
.text:0040F630 rclsid          dd 21401h               ; Data1
.text:0040F630                                         ; DATA XREF: sub_4096A0+4B↑o
.text:0040F630                 dw 0                    ; Data2
.text:0040F630                 dw 0                    ; Data3
.text:0040F630                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040F640                 dd 214A0h, 0
.text:0040F648                 dd 0C0h, 46000000h, 214A1h, 0
.text:0040F658                 dd 0C0h, 46000000h, 214D0h, 0
.text:0040F668                 dd 0C0h, 46000000h, 214D1h, 0
.text:0040F678                 dd 0C0h, 46000000h, 214D2h, 0
.text:0040F688                 dd 0C0h, 46000000h, 214E1h, 0
.text:0040F698                 dd 0C0h, 46000000h, 214E2h, 0
.text:0040F6A8                 dd 0C0h, 46000000h, 214E3h, 0
.text:0040F6B8                 dd 0C0h, 46000000h, 214E4h, 0
.text:0040F6C8                 dd 0C0h, 46000000h, 21500h, 0
.text:0040F6D8                 dd 0C0h, 46000000h, 214E5h, 0
.text:0040F6E8                 dd 0C0h, 46000000h, 214E6h, 0
.text:0040F6F8                 dd 0C0h, 46000000h, 214E8h, 0
.text:0040F708                 dd 0C0h, 46000000h, 214E9h, 0
.text:0040F718                 dd 0C0h, 46000000h, 214EAh, 0
.text:0040F728                 dd 0C0h, 46000000h, 214EBh, 0
.text:0040F738                 dd 0C0h, 46000000h
.text:0040F740 ; const IID riid
.text:0040F740 riid            dd 214EEh               ; Data1
.text:0040F740                                         ; DATA XREF: sub_4096A0+2B↑o
.text:0040F740                 dw 0                    ; Data2
.text:0040F740                 dw 0                    ; Data3
.text:0040F740                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040F750                 dd 214EFh, 0
.text:0040F758                 dd 0C0h, 46000000h, 214F0h, 0
.text:0040F768                 dd 0C0h, 46000000h, 214F1h, 0
.text:0040F778                 dd 0C0h, 46000000h, 214F2h, 0
.text:0040F788                 dd 0C0h, 46000000h, 214F3h, 0
.text:0040F798                 dd 0C0h, 46000000h, 214F4h, 0
.text:0040F7A8                 dd 0C0h, 46000000h, 214F5h, 0
.text:0040F7B8                 dd 0C0h, 46000000h, 214F6h, 0
.text:0040F7C8                 dd 0C0h, 46000000h, 214F7h, 0
.text:0040F7D8                 dd 0C0h, 46000000h, 214F8h, 0
.text:0040F7E8                 dd 0C0h, 46000000h, 214F9h, 0
.text:0040F7F8                 dd 0C0h, 46000000h, 214FAh, 0
.text:0040F808                 dd 0C0h, 46000000h, 214FBh, 0
.text:0040F818                 dd 0C0h, 46000000h, 214FCh, 0
.text:0040F828                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0040F828                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0040F828                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0040F828                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0040F828                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040F828                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0040F828                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0040F828                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040F828                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0040F828                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0040F8F8                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0040F908                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0040F918                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0040F928                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0040F938                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0040F938                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0040F938                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0040F938                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0040F938                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0040F938                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0040F938                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0040F9C0 dword_40F9C0    dd 0FFFFFFFFh           ; DATA XREF: .text:0040EC59↑r
.text:0040F9C0                                         ; .text:loc_40EC80↑r ...
.text:0040F9C4 dword_40F9C4    dd 0                    ; DATA XREF: .text:loc_40EC8C↑r
.text:0040F9C4                                         ; sub_40ECB0:loc_40ECFD↑r
.text:0040F9C8                 dd 0FFFFFFFFh
.text:0040F9CC dword_40F9CC    dd 0Dh dup(0)           ; DATA XREF: .data:off_4100C4↓o
.text:0040FA00                 dd 180h dup(?)
.text:0040FA00 _text           ends
.text:0040FA00
.data:00410000 ; Section 2. (virtual address 00010000)
.data:00410000 ; Virtual size                  : 000000E0 (    224.)
.data:00410000 ; Section size in file          : 00000200 (    512.)
.data:00410000 ; Offset to raw data for section: 0000EE00
.data:00410000 ; Flags C0000040: Data Readable Writable
.data:00410000 ; Alignment     : default
.data:00410000 ; ===========================================================================
.data:00410000
.data:00410000 ; Segment type: Pure data
.data:00410000 ; Segment permissions: Read/Write
.data:00410000 _data           segment para public 'DATA' use32
.data:00410000                 assume cs:_data
.data:00410000                 ;org 410000h
.data:00410000 dword_410000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00410000                                         ; sub_401080+CC↑r
.data:00410004 dword_410004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00410004                                         ; sub_401080+D4↑r
.data:00410008                 align 10h
.data:00410010 ; int Code
.data:00410010 Code            dd 1                    ; DATA XREF: sub_403010+68↑w
.data:00410010                                         ; sub_4045F0+6D↑r ...
.data:00410014                 align 10h
.data:00410020 dword_410020    dd 1                    ; DATA XREF: sub_404500+27↑w
.data:00410020                                         ; sub_405510+3↑r ...
.data:00410024 dword_410024    dd 1                    ; DATA XREF: sub_404500+E↑r
.data:00410024                                         ; sub_404500+14↑w ...
.data:00410028 dword_410028    dd 3Fh                  ; DATA XREF: sub_405510+7D↑w
.data:00410028                                         ; .text:0040561D↑w
.data:0041002C                 align 10h
.data:00410030 ; char *Buffer
.data:00410030 Buffer          dd offset aCopyrightC2005
.data:00410030                                         ; DATA XREF: sub_405A40+DC↑r
.data:00410030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00410034                 align 10h
.data:00410040 dword_410040    dd 1                    ; DATA XREF: sub_406F60+22↑r
.data:00410040                                         ; sub_406F60+65↑r ...
.data:00410044 dword_410044    dd 100h                 ; DATA XREF: sub_406F60+3F↑o
.data:00410044                                         ; sub_406F60+1A2↑r ...
.data:00410048 off_410048      dd offset unk_411070    ; DATA XREF: sub_406F60+1AA↑r
.data:0041004C ; void *off_41004C
.data:0041004C off_41004C      dd offset dword_410044  ; DATA XREF: sub_406F60+39↑r
.data:0041004C                                         ; sub_406F60+60↑w ...
.data:00410050 dword_410050    dd 200h                 ; DATA XREF: sub_407EA0+2ED↑r
.data:00410050                                         ; sub_407EA0+2F8↑r ...
.data:00410054 ; char *off_410054
.data:00410054 off_410054      dd offset aComExeBatCmd ; DATA XREF: sub_408370+3D3↑r
.data:00410054                                         ; sub_408370+400↑r ...
.data:00410054                                         ; ".com;.exe;.bat;.cmd"
.data:00410058                 align 10h
.data:00410060 byte_410060     db 41h                  ; DATA XREF: sub_409E90+6B↑w
.data:00410060                                         ; sub_409E90:loc_409FA4↑r
.data:00410061                 align 10h
.data:00410070 off_410070      dd offset aNotset       ; DATA XREF: .text:0040B2CA↑r
.data:00410070                                         ; .text:0040BF12↑r
.data:00410070                                         ; "notset"
.data:00410074 off_410074      dd offset aNotset       ; DATA XREF: .text:0040B2E2↑r
.data:00410074                                         ; .text:0040B304↑r ...
.data:00410074                                         ; "notset"
.data:00410078                 align 10h
.data:00410080 dword_410080    dd 1                    ; DATA XREF: .text:loc_40C387↑r
.data:00410080                                         ; sub_40C960+202↑w
.data:00410084                 align 10h
.data:00410090 dword_410090    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00410094                 align 10h
.data:004100A0 ; int Mode
.data:004100A0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004100A0                                         ; sub_401080+80↑r ...
.data:004100A4                 align 10h
.data:004100B0 dword_4100B0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004100B0                                         ; sub_401080+BA↑r
.data:004100B4                 align 10h
.data:004100C0 dword_4100C0    dd 0                    ; DATA XREF: sub_40ECB0+9↑r
.data:004100C0                                         ; sub_40ECB0+1D↑w
.data:004100C4 off_4100C4      dd offset dword_40F9CC  ; DATA XREF: sub_40EC20+6↑r
.data:004100C4                                         ; sub_40EC20+17↑r ...
.data:004100C8                 align 1000h
.data:004100C8 _data           ends
.data:004100C8
.bss:00411000 ; Section 3. (virtual address 00011000)
.bss:00411000 ; Virtual size                  : 000005B0 (   1456.)
.bss:00411000 ; Section size in file          : 00000000 (      0.)
.bss:00411000 ; Offset to raw data for section: 00000000
.bss:00411000 ; Flags C0000080: Bss Readable Writable
.bss:00411000 ; Alignment     : default
.bss:00411000 ; ===========================================================================
.bss:00411000
.bss:00411000 ; Segment type: Uninitialized
.bss:00411000 ; Segment permissions: Read/Write
.bss:00411000 _bss            segment para public 'BSS' use32
.bss:00411000                 assume cs:_bss
.bss:00411000                 ;org 411000h
.bss:00411000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00411000 dword_411000    dd ?                    ; DATA XREF: sub_4013A0+1E↑r
.bss:00411000                                         ; sub_4013A0+24↑w ...
.bss:00411004                 align 10h
.bss:00411010 dword_411010    dd ?                    ; DATA XREF: sub_4013A0:loc_4013C9↑r
.bss:00411010                                         ; sub_401DB0+12A↑r ...
.bss:00411014                 align 10h
.bss:00411020 dword_411020    dd ?                    ; DATA XREF: sub_4013A0+3E↑r
.bss:00411020                                         ; sub_4013A0+15D↑r ...
.bss:00411024                 align 10h
.bss:00411030 ; char *dword_411030
.bss:00411030 dword_411030    dd ?                    ; DATA XREF: .text:004045C4↑w
.bss:00411030                                         ; sub_4045F0+58↑r
.bss:00411034                 align 10h
.bss:00411040 dword_411040    dd ?                    ; DATA XREF: sub_405510+9↑o
.bss:00411040                                         ; sub_405510+17↑w ...
.bss:00411044 dword_411044    dd ?                    ; DATA XREF: sub_405510+21↑w
.bss:00411044                                         ; .text:004055C9↑w
.bss:00411048 dword_411048    dd ?                    ; DATA XREF: sub_405510+77↑r
.bss:00411048                                         ; .text:00405617↑r
.bss:0041104C dword_41104C    dd ?                    ; DATA XREF: sub_405510+6B↑r
.bss:0041104C                                         ; .text:0040560B↑r
.bss:00411050                 db    ? ;
.bss:00411051                 db    ? ;
.bss:00411052                 db    ? ;
.bss:00411053                 db    ? ;
.bss:00411054                 db    ? ;
.bss:00411055                 db    ? ;
.bss:00411056                 db    ? ;
.bss:00411057                 db    ? ;
.bss:00411058                 db    ? ;
.bss:00411059                 db    ? ;
.bss:0041105A                 db    ? ;
.bss:0041105B                 db    ? ;
.bss:0041105C                 db    ? ;
.bss:0041105D                 db    ? ;
.bss:0041105E                 db    ? ;
.bss:0041105F                 db    ? ;
.bss:00411060                 db    ? ;
.bss:00411061                 db    ? ;
.bss:00411062                 db    ? ;
.bss:00411063                 db    ? ;
.bss:00411064                 db    ? ;
.bss:00411065                 db    ? ;
.bss:00411066                 db    ? ;
.bss:00411067                 db    ? ;
.bss:00411068                 db    ? ;
.bss:00411069                 db    ? ;
.bss:0041106A                 db    ? ;
.bss:0041106B                 db    ? ;
.bss:0041106C                 db    ? ;
.bss:0041106D                 db    ? ;
.bss:0041106E                 db    ? ;
.bss:0041106F                 db    ? ;
.bss:00411070 unk_411070      db    ? ;               ; DATA XREF: sub_406F60+100↑o
.bss:00411070                                         ; .data:off_410048↑o
.bss:00411071                 db    ? ;
.bss:00411072                 db    ? ;
.bss:00411073                 db    ? ;
.bss:00411074                 db    ? ;
.bss:00411075                 db    ? ;
.bss:00411076                 db    ? ;
.bss:00411077                 db    ? ;
.bss:00411078                 db    ? ;
.bss:00411079                 db    ? ;
.bss:0041107A                 db    ? ;
.bss:0041107B                 db    ? ;
.bss:0041107C                 db    ? ;
.bss:0041107D                 db    ? ;
.bss:0041107E                 db    ? ;
.bss:0041107F                 db    ? ;
.bss:00411080                 db    ? ;
.bss:00411081                 db    ? ;
.bss:00411082                 db    ? ;
.bss:00411083                 db    ? ;
.bss:00411084                 db    ? ;
.bss:00411085                 db    ? ;
.bss:00411086                 db    ? ;
.bss:00411087                 db    ? ;
.bss:00411088                 db    ? ;
.bss:00411089                 db    ? ;
.bss:0041108A                 db    ? ;
.bss:0041108B                 db    ? ;
.bss:0041108C                 db    ? ;
.bss:0041108D                 db    ? ;
.bss:0041108E                 db    ? ;
.bss:0041108F                 db    ? ;
.bss:00411090                 db    ? ;
.bss:00411091                 db    ? ;
.bss:00411092                 db    ? ;
.bss:00411093                 db    ? ;
.bss:00411094                 db    ? ;
.bss:00411095                 db    ? ;
.bss:00411096                 db    ? ;
.bss:00411097                 db    ? ;
.bss:00411098                 db    ? ;
.bss:00411099                 db    ? ;
.bss:0041109A                 db    ? ;
.bss:0041109B                 db    ? ;
.bss:0041109C                 db    ? ;
.bss:0041109D                 db    ? ;
.bss:0041109E                 db    ? ;
.bss:0041109F                 db    ? ;
.bss:004110A0                 db    ? ;
.bss:004110A1                 db    ? ;
.bss:004110A2                 db    ? ;
.bss:004110A3                 db    ? ;
.bss:004110A4                 db    ? ;
.bss:004110A5                 db    ? ;
.bss:004110A6                 db    ? ;
.bss:004110A7                 db    ? ;
.bss:004110A8                 db    ? ;
.bss:004110A9                 db    ? ;
.bss:004110AA                 db    ? ;
.bss:004110AB                 db    ? ;
.bss:004110AC                 db    ? ;
.bss:004110AD                 db    ? ;
.bss:004110AE                 db    ? ;
.bss:004110AF                 db    ? ;
.bss:004110B0                 db    ? ;
.bss:004110B1                 db    ? ;
.bss:004110B2                 db    ? ;
.bss:004110B3                 db    ? ;
.bss:004110B4                 db    ? ;
.bss:004110B5                 db    ? ;
.bss:004110B6                 db    ? ;
.bss:004110B7                 db    ? ;
.bss:004110B8                 db    ? ;
.bss:004110B9                 db    ? ;
.bss:004110BA                 db    ? ;
.bss:004110BB                 db    ? ;
.bss:004110BC                 db    ? ;
.bss:004110BD                 db    ? ;
.bss:004110BE                 db    ? ;
.bss:004110BF                 db    ? ;
.bss:004110C0                 db    ? ;
.bss:004110C1                 db    ? ;
.bss:004110C2                 db    ? ;
.bss:004110C3                 db    ? ;
.bss:004110C4                 db    ? ;
.bss:004110C5                 db    ? ;
.bss:004110C6                 db    ? ;
.bss:004110C7                 db    ? ;
.bss:004110C8                 db    ? ;
.bss:004110C9                 db    ? ;
.bss:004110CA                 db    ? ;
.bss:004110CB                 db    ? ;
.bss:004110CC                 db    ? ;
.bss:004110CD                 db    ? ;
.bss:004110CE                 db    ? ;
.bss:004110CF                 db    ? ;
.bss:004110D0                 db    ? ;
.bss:004110D1                 db    ? ;
.bss:004110D2                 db    ? ;
.bss:004110D3                 db    ? ;
.bss:004110D4                 db    ? ;
.bss:004110D5                 db    ? ;
.bss:004110D6                 db    ? ;
.bss:004110D7                 db    ? ;
.bss:004110D8                 db    ? ;
.bss:004110D9                 db    ? ;
.bss:004110DA                 db    ? ;
.bss:004110DB                 db    ? ;
.bss:004110DC                 db    ? ;
.bss:004110DD                 db    ? ;
.bss:004110DE                 db    ? ;
.bss:004110DF                 db    ? ;
.bss:004110E0                 db    ? ;
.bss:004110E1                 db    ? ;
.bss:004110E2                 db    ? ;
.bss:004110E3                 db    ? ;
.bss:004110E4                 db    ? ;
.bss:004110E5                 db    ? ;
.bss:004110E6                 db    ? ;
.bss:004110E7                 db    ? ;
.bss:004110E8                 db    ? ;
.bss:004110E9                 db    ? ;
.bss:004110EA                 db    ? ;
.bss:004110EB                 db    ? ;
.bss:004110EC                 db    ? ;
.bss:004110ED                 db    ? ;
.bss:004110EE                 db    ? ;
.bss:004110EF                 db    ? ;
.bss:004110F0                 db    ? ;
.bss:004110F1                 db    ? ;
.bss:004110F2                 db    ? ;
.bss:004110F3                 db    ? ;
.bss:004110F4                 db    ? ;
.bss:004110F5                 db    ? ;
.bss:004110F6                 db    ? ;
.bss:004110F7                 db    ? ;
.bss:004110F8                 db    ? ;
.bss:004110F9                 db    ? ;
.bss:004110FA                 db    ? ;
.bss:004110FB                 db    ? ;
.bss:004110FC                 db    ? ;
.bss:004110FD                 db    ? ;
.bss:004110FE                 db    ? ;
.bss:004110FF                 db    ? ;
.bss:00411100                 db    ? ;
.bss:00411101                 db    ? ;
.bss:00411102                 db    ? ;
.bss:00411103                 db    ? ;
.bss:00411104                 db    ? ;
.bss:00411105                 db    ? ;
.bss:00411106                 db    ? ;
.bss:00411107                 db    ? ;
.bss:00411108                 db    ? ;
.bss:00411109                 db    ? ;
.bss:0041110A                 db    ? ;
.bss:0041110B                 db    ? ;
.bss:0041110C                 db    ? ;
.bss:0041110D                 db    ? ;
.bss:0041110E                 db    ? ;
.bss:0041110F                 db    ? ;
.bss:00411110                 db    ? ;
.bss:00411111                 db    ? ;
.bss:00411112                 db    ? ;
.bss:00411113                 db    ? ;
.bss:00411114                 db    ? ;
.bss:00411115                 db    ? ;
.bss:00411116                 db    ? ;
.bss:00411117                 db    ? ;
.bss:00411118                 db    ? ;
.bss:00411119                 db    ? ;
.bss:0041111A                 db    ? ;
.bss:0041111B                 db    ? ;
.bss:0041111C                 db    ? ;
.bss:0041111D                 db    ? ;
.bss:0041111E                 db    ? ;
.bss:0041111F                 db    ? ;
.bss:00411120                 db    ? ;
.bss:00411121                 db    ? ;
.bss:00411122                 db    ? ;
.bss:00411123                 db    ? ;
.bss:00411124                 db    ? ;
.bss:00411125                 db    ? ;
.bss:00411126                 db    ? ;
.bss:00411127                 db    ? ;
.bss:00411128                 db    ? ;
.bss:00411129                 db    ? ;
.bss:0041112A                 db    ? ;
.bss:0041112B                 db    ? ;
.bss:0041112C                 db    ? ;
.bss:0041112D                 db    ? ;
.bss:0041112E                 db    ? ;
.bss:0041112F                 db    ? ;
.bss:00411130                 db    ? ;
.bss:00411131                 db    ? ;
.bss:00411132                 db    ? ;
.bss:00411133                 db    ? ;
.bss:00411134                 db    ? ;
.bss:00411135                 db    ? ;
.bss:00411136                 db    ? ;
.bss:00411137                 db    ? ;
.bss:00411138                 db    ? ;
.bss:00411139                 db    ? ;
.bss:0041113A                 db    ? ;
.bss:0041113B                 db    ? ;
.bss:0041113C                 db    ? ;
.bss:0041113D                 db    ? ;
.bss:0041113E                 db    ? ;
.bss:0041113F                 db    ? ;
.bss:00411140                 db    ? ;
.bss:00411141                 db    ? ;
.bss:00411142                 db    ? ;
.bss:00411143                 db    ? ;
.bss:00411144                 db    ? ;
.bss:00411145                 db    ? ;
.bss:00411146                 db    ? ;
.bss:00411147                 db    ? ;
.bss:00411148                 db    ? ;
.bss:00411149                 db    ? ;
.bss:0041114A                 db    ? ;
.bss:0041114B                 db    ? ;
.bss:0041114C                 db    ? ;
.bss:0041114D                 db    ? ;
.bss:0041114E                 db    ? ;
.bss:0041114F                 db    ? ;
.bss:00411150                 db    ? ;
.bss:00411151                 db    ? ;
.bss:00411152                 db    ? ;
.bss:00411153                 db    ? ;
.bss:00411154                 db    ? ;
.bss:00411155                 db    ? ;
.bss:00411156                 db    ? ;
.bss:00411157                 db    ? ;
.bss:00411158                 db    ? ;
.bss:00411159                 db    ? ;
.bss:0041115A                 db    ? ;
.bss:0041115B                 db    ? ;
.bss:0041115C                 db    ? ;
.bss:0041115D                 db    ? ;
.bss:0041115E                 db    ? ;
.bss:0041115F                 db    ? ;
.bss:00411160                 db    ? ;
.bss:00411161                 db    ? ;
.bss:00411162                 db    ? ;
.bss:00411163                 db    ? ;
.bss:00411164                 db    ? ;
.bss:00411165                 db    ? ;
.bss:00411166                 db    ? ;
.bss:00411167                 db    ? ;
.bss:00411168                 db    ? ;
.bss:00411169                 db    ? ;
.bss:0041116A                 db    ? ;
.bss:0041116B                 db    ? ;
.bss:0041116C                 db    ? ;
.bss:0041116D                 db    ? ;
.bss:0041116E                 db    ? ;
.bss:0041116F                 db    ? ;
.bss:00411170 dword_411170    dd ?                    ; DATA XREF: .text:loc_4068F1↑o
.bss:00411170                                         ; .text:loc_406910↑o ...
.bss:00411174 dword_411174    dd ?                    ; DATA XREF: .text:loc_406990↑o
.bss:00411174                                         ; .text:00406E18↑r ...
.bss:00411178 dword_411178    dd ?                    ; DATA XREF: .text:00406E12↑r
.bss:00411178                                         ; sub_406EC0+2C↑r
.bss:0041117C dword_41117C    dd ?                    ; DATA XREF: .text:00406E06↑r
.bss:0041117C                                         ; sub_406EC0+22↑r
.bss:00411180 dword_411180    dd ?                    ; DATA XREF: .text:00406E22↑r
.bss:00411180                                         ; sub_406EC0+36↑r
.bss:00411184 dword_411184    dd ?                    ; DATA XREF: .text:00406E32↑r
.bss:00411184                                         ; sub_406EC0+4E↑r
.bss:00411188 dword_411188    dd ?                    ; DATA XREF: .text:00406E4F↑r
.bss:00411188                                         ; sub_406EC0+62↑r
.bss:0041118C dword_41118C    dd ?                    ; DATA XREF: .text:00406E45↑r
.bss:0041118C                                         ; sub_406EC0+70↑r
.bss:00411190 dword_411190    dd ?                    ; DATA XREF: .text:00406E28↑r
.bss:00411190                                         ; sub_406EC0+7A↑r
.bss:00411194                 align 10h
.bss:004111A0 ; char *Str1
.bss:004111A0 Str1            dd ?                    ; DATA XREF: sub_4075B4:loc_4075ED↑w
.bss:004111A0                                         ; sub_4075B4:loc_407720↑r
.bss:004111A4                 align 10h
.bss:004111B0 dword_4111B0    dd ?                    ; DATA XREF: sub_4075B4+2D↑r
.bss:004111B0                                         ; sub_4075B4+3F↑w
.bss:004111B4                 align 10h
.bss:004111C0 dword_4111C0    dd ?                    ; DATA XREF: sub_407750:loc_4077BB↑r
.bss:004111C0                                         ; sub_407750+F9↑w
.bss:004111C4                 align 10h
.bss:004111D0 dword_4111D0    dd ?                    ; DATA XREF: sub_407750+8E↑r
.bss:004111D0                                         ; sub_407750+103↑w
.bss:004111D4                 align 10h
.bss:004111E0 dword_4111E0    dd ?                    ; DATA XREF: sub_407750+5D↑r
.bss:004111E0                                         ; sub_407750+EE↑w
.bss:004111E4                 align 10h
.bss:004111F0 dword_4111F0    dd ?                    ; DATA XREF: sub_407750+3↑r
.bss:004111F0                                         ; .text:loc_407A12↑w ...
.bss:004111F4                 align 10h
.bss:00411200 dword_411200    dd ?                    ; DATA XREF: sub_408370+100↑r
.bss:00411200                                         ; sub_408370+308↑w
.bss:00411204                 align 10h
.bss:00411210 ; char *Str
.bss:00411210 Str             dd ?                    ; DATA XREF: sub_408370:loc_4086D4↑r
.bss:00411210                                         ; sub_408370+3B6↑r ...
.bss:00411214                 align 10h
.bss:00411220 dword_411220    dd ?                    ; DATA XREF: sub_409E90+1C↑r
.bss:00411220                                         ; sub_409E90+104↑w
.bss:00411224                 align 10h
.bss:00411230 dword_411230    dd ?                    ; DATA XREF: sub_409E90+B↑r
.bss:00411230                                         ; sub_409E90+71↑w
.bss:00411234                 align 10h
.bss:00411240 dword_411240    dd ?                    ; DATA XREF: sub_409E90+85↑r
.bss:00411240                                         ; sub_409E90+B9↑w
.bss:00411244 dword_411244    dd ?                    ; DATA XREF: sub_409E90+C4↑w
.bss:00411248 dword_411248    dd ?                    ; DATA XREF: sub_409E90+2E↑o
.bss:00411248                                         ; sub_409E90+CF↑w
.bss:0041124C dword_41124C    dd ?                    ; DATA XREF: sub_409E90+DA↑w
.bss:00411250                 db    ? ;
.bss:00411251                 db    ? ;
.bss:00411252                 db    ? ;
.bss:00411253                 db    ? ;
.bss:00411254                 db    ? ;
.bss:00411255                 db    ? ;
.bss:00411256                 db    ? ;
.bss:00411257                 db    ? ;
.bss:00411258                 db    ? ;
.bss:00411259                 db    ? ;
.bss:0041125A                 db    ? ;
.bss:0041125B                 db    ? ;
.bss:0041125C                 db    ? ;
.bss:0041125D                 db    ? ;
.bss:0041125E                 db    ? ;
.bss:0041125F                 db    ? ;
.bss:00411260                 db    ? ;
.bss:00411261                 db    ? ;
.bss:00411262                 db    ? ;
.bss:00411263                 db    ? ;
.bss:00411264                 db    ? ;
.bss:00411265                 db    ? ;
.bss:00411266                 db    ? ;
.bss:00411267                 db    ? ;
.bss:00411268                 db    ? ;
.bss:00411269                 db    ? ;
.bss:0041126A                 db    ? ;
.bss:0041126B                 db    ? ;
.bss:0041126C                 db    ? ;
.bss:0041126D                 db    ? ;
.bss:0041126E                 db    ? ;
.bss:0041126F                 db    ? ;
.bss:00411270                 db    ? ;
.bss:00411271                 db    ? ;
.bss:00411272                 db    ? ;
.bss:00411273                 db    ? ;
.bss:00411274                 db    ? ;
.bss:00411275                 db    ? ;
.bss:00411276                 db    ? ;
.bss:00411277                 db    ? ;
.bss:00411278                 db    ? ;
.bss:00411279                 db    ? ;
.bss:0041127A                 db    ? ;
.bss:0041127B                 db    ? ;
.bss:0041127C                 db    ? ;
.bss:0041127D                 db    ? ;
.bss:0041127E                 db    ? ;
.bss:0041127F                 db    ? ;
.bss:00411280                 db    ? ;
.bss:00411281                 db    ? ;
.bss:00411282                 db    ? ;
.bss:00411283                 db    ? ;
.bss:00411284                 db    ? ;
.bss:00411285                 db    ? ;
.bss:00411286                 db    ? ;
.bss:00411287                 db    ? ;
.bss:00411288                 db    ? ;
.bss:00411289                 db    ? ;
.bss:0041128A                 db    ? ;
.bss:0041128B                 db    ? ;
.bss:0041128C                 db    ? ;
.bss:0041128D                 db    ? ;
.bss:0041128E                 db    ? ;
.bss:0041128F                 db    ? ;
.bss:00411290                 db    ? ;
.bss:00411291                 db    ? ;
.bss:00411292                 db    ? ;
.bss:00411293                 db    ? ;
.bss:00411294                 db    ? ;
.bss:00411295                 db    ? ;
.bss:00411296                 db    ? ;
.bss:00411297                 db    ? ;
.bss:00411298                 db    ? ;
.bss:00411299                 db    ? ;
.bss:0041129A                 db    ? ;
.bss:0041129B                 db    ? ;
.bss:0041129C                 db    ? ;
.bss:0041129D                 db    ? ;
.bss:0041129E                 db    ? ;
.bss:0041129F                 db    ? ;
.bss:004112A0                 db    ? ;
.bss:004112A1                 db    ? ;
.bss:004112A2                 db    ? ;
.bss:004112A3                 db    ? ;
.bss:004112A4                 db    ? ;
.bss:004112A5                 db    ? ;
.bss:004112A6                 db    ? ;
.bss:004112A7                 db    ? ;
.bss:004112A8                 db    ? ;
.bss:004112A9                 db    ? ;
.bss:004112AA                 db    ? ;
.bss:004112AB                 db    ? ;
.bss:004112AC                 db    ? ;
.bss:004112AD                 db    ? ;
.bss:004112AE                 db    ? ;
.bss:004112AF                 db    ? ;
.bss:004112B0                 db    ? ;
.bss:004112B1                 db    ? ;
.bss:004112B2                 db    ? ;
.bss:004112B3                 db    ? ;
.bss:004112B4                 db    ? ;
.bss:004112B5                 db    ? ;
.bss:004112B6                 db    ? ;
.bss:004112B7                 db    ? ;
.bss:004112B8                 db    ? ;
.bss:004112B9                 db    ? ;
.bss:004112BA                 db    ? ;
.bss:004112BB                 db    ? ;
.bss:004112BC                 db    ? ;
.bss:004112BD                 db    ? ;
.bss:004112BE                 db    ? ;
.bss:004112BF                 db    ? ;
.bss:004112C0                 db    ? ;
.bss:004112C1                 db    ? ;
.bss:004112C2                 db    ? ;
.bss:004112C3                 db    ? ;
.bss:004112C4                 db    ? ;
.bss:004112C5                 db    ? ;
.bss:004112C6                 db    ? ;
.bss:004112C7                 db    ? ;
.bss:004112C8                 db    ? ;
.bss:004112C9                 db    ? ;
.bss:004112CA                 db    ? ;
.bss:004112CB                 db    ? ;
.bss:004112CC                 db    ? ;
.bss:004112CD                 db    ? ;
.bss:004112CE                 db    ? ;
.bss:004112CF                 db    ? ;
.bss:004112D0                 db    ? ;
.bss:004112D1                 db    ? ;
.bss:004112D2                 db    ? ;
.bss:004112D3                 db    ? ;
.bss:004112D4                 db    ? ;
.bss:004112D5                 db    ? ;
.bss:004112D6                 db    ? ;
.bss:004112D7                 db    ? ;
.bss:004112D8                 db    ? ;
.bss:004112D9                 db    ? ;
.bss:004112DA                 db    ? ;
.bss:004112DB                 db    ? ;
.bss:004112DC                 db    ? ;
.bss:004112DD                 db    ? ;
.bss:004112DE                 db    ? ;
.bss:004112DF                 db    ? ;
.bss:004112E0                 db    ? ;
.bss:004112E1                 db    ? ;
.bss:004112E2                 db    ? ;
.bss:004112E3                 db    ? ;
.bss:004112E4                 db    ? ;
.bss:004112E5                 db    ? ;
.bss:004112E6                 db    ? ;
.bss:004112E7                 db    ? ;
.bss:004112E8                 db    ? ;
.bss:004112E9                 db    ? ;
.bss:004112EA                 db    ? ;
.bss:004112EB                 db    ? ;
.bss:004112EC                 db    ? ;
.bss:004112ED                 db    ? ;
.bss:004112EE                 db    ? ;
.bss:004112EF                 db    ? ;
.bss:004112F0                 db    ? ;
.bss:004112F1                 db    ? ;
.bss:004112F2                 db    ? ;
.bss:004112F3                 db    ? ;
.bss:004112F4                 db    ? ;
.bss:004112F5                 db    ? ;
.bss:004112F6                 db    ? ;
.bss:004112F7                 db    ? ;
.bss:004112F8                 db    ? ;
.bss:004112F9                 db    ? ;
.bss:004112FA                 db    ? ;
.bss:004112FB                 db    ? ;
.bss:004112FC                 db    ? ;
.bss:004112FD                 db    ? ;
.bss:004112FE                 db    ? ;
.bss:004112FF                 db    ? ;
.bss:00411300                 db    ? ;
.bss:00411301                 db    ? ;
.bss:00411302                 db    ? ;
.bss:00411303                 db    ? ;
.bss:00411304                 db    ? ;
.bss:00411305                 db    ? ;
.bss:00411306                 db    ? ;
.bss:00411307                 db    ? ;
.bss:00411308                 db    ? ;
.bss:00411309                 db    ? ;
.bss:0041130A                 db    ? ;
.bss:0041130B                 db    ? ;
.bss:0041130C                 db    ? ;
.bss:0041130D                 db    ? ;
.bss:0041130E                 db    ? ;
.bss:0041130F                 db    ? ;
.bss:00411310                 db    ? ;
.bss:00411311                 db    ? ;
.bss:00411312                 db    ? ;
.bss:00411313                 db    ? ;
.bss:00411314                 db    ? ;
.bss:00411315                 db    ? ;
.bss:00411316                 db    ? ;
.bss:00411317                 db    ? ;
.bss:00411318                 db    ? ;
.bss:00411319                 db    ? ;
.bss:0041131A                 db    ? ;
.bss:0041131B                 db    ? ;
.bss:0041131C                 db    ? ;
.bss:0041131D                 db    ? ;
.bss:0041131E                 db    ? ;
.bss:0041131F                 db    ? ;
.bss:00411320                 db    ? ;
.bss:00411321                 db    ? ;
.bss:00411322                 db    ? ;
.bss:00411323                 db    ? ;
.bss:00411324                 db    ? ;
.bss:00411325                 db    ? ;
.bss:00411326                 db    ? ;
.bss:00411327                 db    ? ;
.bss:00411328                 db    ? ;
.bss:00411329                 db    ? ;
.bss:0041132A                 db    ? ;
.bss:0041132B                 db    ? ;
.bss:0041132C                 db    ? ;
.bss:0041132D                 db    ? ;
.bss:0041132E                 db    ? ;
.bss:0041132F                 db    ? ;
.bss:00411330                 db    ? ;
.bss:00411331                 db    ? ;
.bss:00411332                 db    ? ;
.bss:00411333                 db    ? ;
.bss:00411334                 db    ? ;
.bss:00411335                 db    ? ;
.bss:00411336                 db    ? ;
.bss:00411337                 db    ? ;
.bss:00411338                 db    ? ;
.bss:00411339                 db    ? ;
.bss:0041133A                 db    ? ;
.bss:0041133B                 db    ? ;
.bss:0041133C                 db    ? ;
.bss:0041133D                 db    ? ;
.bss:0041133E                 db    ? ;
.bss:0041133F                 db    ? ;
.bss:00411340                 db    ? ;
.bss:00411341                 db    ? ;
.bss:00411342                 db    ? ;
.bss:00411343                 db    ? ;
.bss:00411344                 db    ? ;
.bss:00411345                 db    ? ;
.bss:00411346                 db    ? ;
.bss:00411347                 db    ? ;
.bss:00411348                 db    ? ;
.bss:00411349                 db    ? ;
.bss:0041134A                 db    ? ;
.bss:0041134B                 db    ? ;
.bss:0041134C                 db    ? ;
.bss:0041134D                 db    ? ;
.bss:0041134E                 db    ? ;
.bss:0041134F                 db    ? ;
.bss:00411350                 db    ? ;
.bss:00411351                 db    ? ;
.bss:00411352                 db    ? ;
.bss:00411353                 db    ? ;
.bss:00411354                 db    ? ;
.bss:00411355                 db    ? ;
.bss:00411356                 db    ? ;
.bss:00411357                 db    ? ;
.bss:00411358                 db    ? ;
.bss:00411359                 db    ? ;
.bss:0041135A                 db    ? ;
.bss:0041135B                 db    ? ;
.bss:0041135C                 db    ? ;
.bss:0041135D                 db    ? ;
.bss:0041135E                 db    ? ;
.bss:0041135F                 db    ? ;
.bss:00411360                 db    ? ;
.bss:00411361                 db    ? ;
.bss:00411362                 db    ? ;
.bss:00411363                 db    ? ;
.bss:00411364                 db    ? ;
.bss:00411365                 db    ? ;
.bss:00411366                 db    ? ;
.bss:00411367                 db    ? ;
.bss:00411368                 db    ? ;
.bss:00411369                 db    ? ;
.bss:0041136A                 db    ? ;
.bss:0041136B                 db    ? ;
.bss:0041136C                 db    ? ;
.bss:0041136D                 db    ? ;
.bss:0041136E                 db    ? ;
.bss:0041136F                 db    ? ;
.bss:00411370                 db    ? ;
.bss:00411371                 db    ? ;
.bss:00411372                 db    ? ;
.bss:00411373                 db    ? ;
.bss:00411374                 db    ? ;
.bss:00411375                 db    ? ;
.bss:00411376                 db    ? ;
.bss:00411377                 db    ? ;
.bss:00411378                 db    ? ;
.bss:00411379                 db    ? ;
.bss:0041137A                 db    ? ;
.bss:0041137B                 db    ? ;
.bss:0041137C                 db    ? ;
.bss:0041137D                 db    ? ;
.bss:0041137E                 db    ? ;
.bss:0041137F                 db    ? ;
.bss:00411380                 db    ? ;
.bss:00411381                 db    ? ;
.bss:00411382                 db    ? ;
.bss:00411383                 db    ? ;
.bss:00411384                 db    ? ;
.bss:00411385                 db    ? ;
.bss:00411386                 db    ? ;
.bss:00411387                 db    ? ;
.bss:00411388                 db    ? ;
.bss:00411389                 db    ? ;
.bss:0041138A                 db    ? ;
.bss:0041138B                 db    ? ;
.bss:0041138C                 db    ? ;
.bss:0041138D                 db    ? ;
.bss:0041138E                 db    ? ;
.bss:0041138F                 db    ? ;
.bss:00411390                 db    ? ;
.bss:00411391                 db    ? ;
.bss:00411392                 db    ? ;
.bss:00411393                 db    ? ;
.bss:00411394                 db    ? ;
.bss:00411395                 db    ? ;
.bss:00411396                 db    ? ;
.bss:00411397                 db    ? ;
.bss:00411398                 db    ? ;
.bss:00411399                 db    ? ;
.bss:0041139A                 db    ? ;
.bss:0041139B                 db    ? ;
.bss:0041139C                 db    ? ;
.bss:0041139D                 db    ? ;
.bss:0041139E                 db    ? ;
.bss:0041139F                 db    ? ;
.bss:004113A0                 db    ? ;
.bss:004113A1                 db    ? ;
.bss:004113A2                 db    ? ;
.bss:004113A3                 db    ? ;
.bss:004113A4                 db    ? ;
.bss:004113A5                 db    ? ;
.bss:004113A6                 db    ? ;
.bss:004113A7                 db    ? ;
.bss:004113A8                 db    ? ;
.bss:004113A9                 db    ? ;
.bss:004113AA                 db    ? ;
.bss:004113AB                 db    ? ;
.bss:004113AC                 db    ? ;
.bss:004113AD                 db    ? ;
.bss:004113AE                 db    ? ;
.bss:004113AF                 db    ? ;
.bss:004113B0                 db    ? ;
.bss:004113B1                 db    ? ;
.bss:004113B2                 db    ? ;
.bss:004113B3                 db    ? ;
.bss:004113B4                 db    ? ;
.bss:004113B5                 db    ? ;
.bss:004113B6                 db    ? ;
.bss:004113B7                 db    ? ;
.bss:004113B8                 db    ? ;
.bss:004113B9                 db    ? ;
.bss:004113BA                 db    ? ;
.bss:004113BB                 db    ? ;
.bss:004113BC                 db    ? ;
.bss:004113BD                 db    ? ;
.bss:004113BE                 db    ? ;
.bss:004113BF                 db    ? ;
.bss:004113C0                 db    ? ;
.bss:004113C1                 db    ? ;
.bss:004113C2                 db    ? ;
.bss:004113C3                 db    ? ;
.bss:004113C4                 db    ? ;
.bss:004113C5                 db    ? ;
.bss:004113C6                 db    ? ;
.bss:004113C7                 db    ? ;
.bss:004113C8                 db    ? ;
.bss:004113C9                 db    ? ;
.bss:004113CA                 db    ? ;
.bss:004113CB                 db    ? ;
.bss:004113CC                 db    ? ;
.bss:004113CD                 db    ? ;
.bss:004113CE                 db    ? ;
.bss:004113CF                 db    ? ;
.bss:004113D0                 db    ? ;
.bss:004113D1                 db    ? ;
.bss:004113D2                 db    ? ;
.bss:004113D3                 db    ? ;
.bss:004113D4                 db    ? ;
.bss:004113D5                 db    ? ;
.bss:004113D6                 db    ? ;
.bss:004113D7                 db    ? ;
.bss:004113D8                 db    ? ;
.bss:004113D9                 db    ? ;
.bss:004113DA                 db    ? ;
.bss:004113DB                 db    ? ;
.bss:004113DC                 db    ? ;
.bss:004113DD                 db    ? ;
.bss:004113DE                 db    ? ;
.bss:004113DF                 db    ? ;
.bss:004113E0                 db    ? ;
.bss:004113E1                 db    ? ;
.bss:004113E2                 db    ? ;
.bss:004113E3                 db    ? ;
.bss:004113E4                 db    ? ;
.bss:004113E5                 db    ? ;
.bss:004113E6                 db    ? ;
.bss:004113E7                 db    ? ;
.bss:004113E8                 db    ? ;
.bss:004113E9                 db    ? ;
.bss:004113EA                 db    ? ;
.bss:004113EB                 db    ? ;
.bss:004113EC                 db    ? ;
.bss:004113ED                 db    ? ;
.bss:004113EE                 db    ? ;
.bss:004113EF                 db    ? ;
.bss:004113F0                 db    ? ;
.bss:004113F1                 db    ? ;
.bss:004113F2                 db    ? ;
.bss:004113F3                 db    ? ;
.bss:004113F4                 db    ? ;
.bss:004113F5                 db    ? ;
.bss:004113F6                 db    ? ;
.bss:004113F7                 db    ? ;
.bss:004113F8                 db    ? ;
.bss:004113F9                 db    ? ;
.bss:004113FA                 db    ? ;
.bss:004113FB                 db    ? ;
.bss:004113FC                 db    ? ;
.bss:004113FD                 db    ? ;
.bss:004113FE                 db    ? ;
.bss:004113FF                 db    ? ;
.bss:00411400                 db    ? ;
.bss:00411401                 db    ? ;
.bss:00411402                 db    ? ;
.bss:00411403                 db    ? ;
.bss:00411404                 db    ? ;
.bss:00411405                 db    ? ;
.bss:00411406                 db    ? ;
.bss:00411407                 db    ? ;
.bss:00411408                 db    ? ;
.bss:00411409                 db    ? ;
.bss:0041140A                 db    ? ;
.bss:0041140B                 db    ? ;
.bss:0041140C                 db    ? ;
.bss:0041140D                 db    ? ;
.bss:0041140E                 db    ? ;
.bss:0041140F                 db    ? ;
.bss:00411410                 db    ? ;
.bss:00411411                 db    ? ;
.bss:00411412                 db    ? ;
.bss:00411413                 db    ? ;
.bss:00411414                 db    ? ;
.bss:00411415                 db    ? ;
.bss:00411416                 db    ? ;
.bss:00411417                 db    ? ;
.bss:00411418                 db    ? ;
.bss:00411419                 db    ? ;
.bss:0041141A                 db    ? ;
.bss:0041141B                 db    ? ;
.bss:0041141C                 db    ? ;
.bss:0041141D                 db    ? ;
.bss:0041141E                 db    ? ;
.bss:0041141F                 db    ? ;
.bss:00411420                 db    ? ;
.bss:00411421                 db    ? ;
.bss:00411422                 db    ? ;
.bss:00411423                 db    ? ;
.bss:00411424                 db    ? ;
.bss:00411425                 db    ? ;
.bss:00411426                 db    ? ;
.bss:00411427                 db    ? ;
.bss:00411428                 db    ? ;
.bss:00411429                 db    ? ;
.bss:0041142A                 db    ? ;
.bss:0041142B                 db    ? ;
.bss:0041142C                 db    ? ;
.bss:0041142D                 db    ? ;
.bss:0041142E                 db    ? ;
.bss:0041142F                 db    ? ;
.bss:00411430                 db    ? ;
.bss:00411431                 db    ? ;
.bss:00411432                 db    ? ;
.bss:00411433                 db    ? ;
.bss:00411434                 db    ? ;
.bss:00411435                 db    ? ;
.bss:00411436                 db    ? ;
.bss:00411437                 db    ? ;
.bss:00411438                 db    ? ;
.bss:00411439                 db    ? ;
.bss:0041143A                 db    ? ;
.bss:0041143B                 db    ? ;
.bss:0041143C                 db    ? ;
.bss:0041143D                 db    ? ;
.bss:0041143E                 db    ? ;
.bss:0041143F                 db    ? ;
.bss:00411440 dword_411440    dd ?                    ; DATA XREF: sub_40C850+8↑r
.bss:00411440                                         ; sub_40C960:loc_40C9E2↑w ...
.bss:00411444                 align 10h
.bss:00411450 ; struct _OSVERSIONINFOA VersionInformation
.bss:00411450 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40C960:loc_40C980↑o
.bss:00411450                                         ; sub_40C960+2C↑w ...
.bss:004114E4 word_4114E4     dw ?                    ; DATA XREF: sub_40C960:loc_40CA13↑r
.bss:004114E6                 align 4
.bss:004114E8 word_4114E8     dw ?                    ; DATA XREF: .text:loc_40C3D6↑r
.bss:004114E8                                         ; .text:0040C404↑r ...
.bss:004114EA byte_4114EA     db ?                    ; DATA XREF: .text:0040C395↑r
.bss:004114EB                 align 10h
.bss:004114F0 dword_4114F0    dd ?                    ; DATA XREF: sub_40C960+6↑r
.bss:004114F0                                         ; sub_40C960+75↑w
.bss:004114F4                 align 10h
.bss:00411500 dword_411500    dd ?                    ; DATA XREF: sub_40D110+6E↑r
.bss:00411500                                         ; sub_40D110+9A↑r ...
.bss:00411504 dword_411504    dd ?                    ; DATA XREF: sub_40D110:loc_40D178↑r
.bss:00411504                                         ; sub_40D110+A0↑r ...
.bss:00411508                 align 10h
.bss:00411510 dword_411510    dd ?                    ; DATA XREF: sub_403010+2F↑w
.bss:00411510                                         ; sub_403D90+1F↑r ...
.bss:00411514                 db    ? ;
.bss:00411515                 db    ? ;
.bss:00411516                 db    ? ;
.bss:00411517                 db    ? ;
.bss:00411518                 db    ? ;
.bss:00411519                 db    ? ;
.bss:0041151A                 db    ? ;
.bss:0041151B                 db    ? ;
.bss:0041151C                 db    ? ;
.bss:0041151D                 db    ? ;
.bss:0041151E                 db    ? ;
.bss:0041151F                 db    ? ;
.bss:00411520                 db    ? ;
.bss:00411521                 db    ? ;
.bss:00411522                 db    ? ;
.bss:00411523                 db    ? ;
.bss:00411524                 db    ? ;
.bss:00411525                 db    ? ;
.bss:00411526                 db    ? ;
.bss:00411527                 db    ? ;
.bss:00411528                 db    ? ;
.bss:00411529                 db    ? ;
.bss:0041152A                 db    ? ;
.bss:0041152B                 db    ? ;
.bss:0041152C                 db    ? ;
.bss:0041152D                 db    ? ;
.bss:0041152E                 db    ? ;
.bss:0041152F                 db    ? ;
.bss:00411530 dword_411530    dd ?                    ; DATA XREF: sub_405510+71↑w
.bss:00411530                                         ; .text:00405611↑w
.bss:00411534                 align 10h
.bss:00411540 dword_411540    dd ?                    ; CODE XREF: sub_4075B4+63↑p
.bss:00411540                                         ; DATA XREF: sub_4074B0+1E↑r ...
.bss:00411544                 align 10h
.bss:00411550 dword_411550    dd ?                    ; DATA XREF: sub_4074B0+4E↑w
.bss:00411550                                         ; sub_4075B4+AB↑w
.bss:00411554                 align 40h
.bss:00411580 dword_411580    dd ?                    ; DATA XREF: sub_4075B4+13↑r
.bss:00411584                 align 1000h
.bss:00411584 _bss            ends
.bss:00411584
.idata:00412000 ; Section 4. (virtual address 00012000)
.idata:00412000 ; Virtual size                  : 00000D4C (   3404.)
.idata:00412000 ; Section size in file          : 00000E00 (   3584.)
.idata:00412000 ; Offset to raw data for section: 0000F000
.idata:00412000 ; Flags C0000040: Data Readable Writable
.idata:00412000 ; Alignment     : default
.idata:00412000 ; ===========================================================================
.idata:00412000
.idata:00412000 ; Segment type: Externs
.idata:00412000 ; _idata
.idata:00412000
.idata:00412001
.idata:00412298 ;
.idata:00412298 ; Imports from libintl3.dll
.idata:00412298 ;
.idata:00412298                 extrn libintl_bindtextdomain:dword
.idata:00412298                                         ; CODE XREF: sub_403010+49↑p
.idata:00412298                                         ; DATA XREF: sub_403010+49↑r ...
.idata:0041229C                 extrn __imp_libintl_gettext:dword
.idata:0041229C                                         ; CODE XREF: sub_4013A0+157↑p
.idata:0041229C                                         ; sub_4013A0:loc_401605↑p ...
.idata:004122A0                 extrn libintl_textdomain:dword
.idata:004122A0                                         ; CODE XREF: sub_403010+56↑p
.idata:004122A0                                         ; DATA XREF: sub_403010+56↑r ...
.idata:004122A4
.idata:004122AC ;
.idata:004122AC ; Imports from ADVAPI32.DLL
.idata:004122AC ;
.idata:004122AC ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004122AC                 extrn __imp_RegCloseKey:dword
.idata:004122AC                                         ; DATA XREF: RegCloseKey↑r
.idata:004122B0 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004122B0                 extrn __imp_RegOpenKeyExA:dword
.idata:004122B0                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004122B4 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004122B4                 extrn __imp_RegQueryValueExA:dword
.idata:004122B4                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004122B8
.idata:004122C0 ;
.idata:004122C0 ; Imports from KERNEL32.dll
.idata:004122C0 ;
.idata:004122C0 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004122C0                 extrn __imp_AreFileApisANSI:dword
.idata:004122C0                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004122C4 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004122C4                 extrn __imp_CloseHandle:dword
.idata:004122C4                                         ; DATA XREF: CloseHandle↑r
.idata:004122C8 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004122C8                 extrn __imp_CreateDirectoryA:dword
.idata:004122C8                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004122CC ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004122CC                 extrn __imp_CreateFileA:dword
.idata:004122CC                                         ; DATA XREF: CreateFileA↑r
.idata:004122D0 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004122D0                 extrn __imp_DeviceIoControl:dword
.idata:004122D0                                         ; DATA XREF: DeviceIoControl↑r
.idata:004122D4 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004122D4                 extrn __imp_ExitProcess:dword
.idata:004122D4                                         ; DATA XREF: ExitProcess↑r
.idata:004122D8 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004122D8                 extrn __imp_FindClose:dword
.idata:004122D8                                         ; DATA XREF: FindClose↑r
.idata:004122DC ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004122DC                 extrn __imp_FindFirstFileA:dword
.idata:004122DC                                         ; DATA XREF: FindFirstFileA↑r
.idata:004122E0 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004122E0                 extrn __imp_FindNextFileA:dword
.idata:004122E0                                         ; DATA XREF: FindNextFileA↑r
.idata:004122E4 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:004122E4                 extrn __imp_FreeLibrary:dword
.idata:004122E4                                         ; DATA XREF: FreeLibrary↑r
.idata:004122E8 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:004122E8                 extrn __imp_GetCurrentDirectoryA:dword
.idata:004122E8                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:004122EC ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:004122EC                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:004122EC                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:004122F0 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:004122F0                 extrn __imp_GetDriveTypeA:dword
.idata:004122F0                                         ; DATA XREF: GetDriveTypeA↑r
.idata:004122F4 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:004122F4                 extrn __imp_GetFileAttributesA:dword
.idata:004122F4                                         ; DATA XREF: GetFileAttributesA↑r
.idata:004122F8 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:004122F8                 extrn __imp_GetFileInformationByHandle:dword
.idata:004122F8                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:004122FC ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:004122FC                 extrn __imp_GetFileSize:dword
.idata:004122FC                                         ; DATA XREF: GetFileSize↑r
.idata:00412300 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00412300                 extrn __imp_GetFileType:dword
.idata:00412300                                         ; DATA XREF: GetFileType↑r
.idata:00412304 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00412304                 extrn __imp_GetFullPathNameA:dword
.idata:00412304                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00412308 ; DWORD (__stdcall *GetLastError)()
.idata:00412308                 extrn __imp_GetLastError:dword
.idata:00412308                                         ; DATA XREF: GetLastError↑r
.idata:0041230C ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041230C                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041230C                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00412310 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00412310                 extrn __imp_GetModuleFileNameA:dword
.idata:00412310                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00412314 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00412314                 extrn __imp_GetModuleHandleA:dword
.idata:00412314                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00412318 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00412318                 extrn __imp_GetProcAddress:dword
.idata:00412318                                         ; DATA XREF: GetProcAddress↑r
.idata:0041231C ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041231C                 extrn __imp_GetProcessHeap:dword
.idata:0041231C                                         ; DATA XREF: GetProcessHeap↑r
.idata:00412320 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00412320                 extrn __imp_GetShortPathNameA:dword
.idata:00412320                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00412324 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00412324                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00412324                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00412328 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00412328                 extrn __imp_GetTimeZoneInformation:dword
.idata:00412328                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041232C ; DWORD (__stdcall *GetVersion)()
.idata:0041232C                 extrn __imp_GetVersion:dword
.idata:0041232C                                         ; DATA XREF: GetVersion↑r
.idata:00412330 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00412330                 extrn __imp_GetVersionExA:dword
.idata:00412330                                         ; DATA XREF: GetVersionExA↑r
.idata:00412334 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00412334                 extrn __imp_GetVolumeInformationA:dword
.idata:00412334                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00412338 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00412338                 extrn __imp_HeapAlloc:dword
.idata:00412338                                         ; DATA XREF: HeapAlloc↑r
.idata:0041233C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041233C                 extrn __imp_HeapFree:dword
.idata:0041233C                                         ; DATA XREF: HeapFree↑r
.idata:00412340 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00412340                 extrn __imp_LoadLibraryA:dword
.idata:00412340                                         ; DATA XREF: LoadLibraryA↑r
.idata:00412344 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00412344                 extrn __imp_MultiByteToWideChar:dword
.idata:00412344                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00412348 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00412348                 extrn __imp_PeekNamedPipe:dword
.idata:00412348                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041234C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041234C                 extrn __imp_SetErrorMode:dword
.idata:0041234C                                         ; DATA XREF: SetErrorMode↑r
.idata:00412350 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00412350                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00412350                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00412354 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00412354                 extrn __imp_UnlockFile:dword
.idata:00412354                                         ; DATA XREF: UnlockFile↑r
.idata:00412358 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00412358                 extrn __imp_lstrcmpiA:dword
.idata:00412358                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041235C ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041235C                 extrn __imp_lstrcpyA:dword
.idata:0041235C                                         ; DATA XREF: lstrcpyA↑r
.idata:00412360
.idata:00412368 ;
.idata:00412368 ; Imports from msvcrt.dll
.idata:00412368 ;
.idata:00412368 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00412368                 extrn __imp__chmod:dword
.idata:00412368                                         ; DATA XREF: _chmod↑r
.idata:0041236C ; int (__cdecl *_getpid)()
.idata:0041236C                 extrn __imp__getpid:dword
.idata:0041236C                                         ; DATA XREF: _getpid↑r
.idata:00412370 ; int (__cdecl *_isatty)(int FileHandle)
.idata:00412370                 extrn __imp__isatty:dword
.idata:00412370                                         ; DATA XREF: _isatty↑r
.idata:00412374 ; char *(__cdecl *_strdup)(const char *String)
.idata:00412374                 extrn __imp__strdup:dword
.idata:00412374                                         ; DATA XREF: _strdup↑r
.idata:00412378 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:00412378                 extrn __imp__stricmp:dword
.idata:00412378                                         ; DATA XREF: _stricmp↑r
.idata:0041237C
.idata:00412384 ;
.idata:00412384 ; Imports from MSVCP60.DLL
.idata:00412384 ;
.idata:00412384 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00412384                 extrn __imp_mbrtowc:dword
.idata:00412384                                         ; DATA XREF: mbrtowc↑r
.idata:00412388
.idata:00412390 ;
.idata:00412390 ; Imports from msvcrt.dll
.idata:00412390 ;
.idata:00412390                 extrn __imp___getmainargs:dword
.idata:00412390                                         ; DATA XREF: __getmainargs↑r
.idata:00412394 ; int _mb_cur_max
.idata:00412394                 extrn __mb_cur_max:dword
.idata:00412394                                         ; DATA XREF: sub_405E20+7↑r
.idata:00412394                                         ; sub_405E20+5F3↑r
.idata:00412398 ; char ***(__cdecl *__p__environ)()
.idata:00412398                 extrn __imp___p__environ:dword
.idata:00412398                                         ; DATA XREF: __p__environ↑r
.idata:0041239C ; int *(__cdecl *__p__fmode)()
.idata:0041239C                 extrn __imp___p__fmode:dword
.idata:0041239C                                         ; DATA XREF: __p__fmode↑r
.idata:004123A0 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004123A0                 extrn __set_app_type:dword
.idata:004123A0                                         ; CODE XREF: start+D↑p
.idata:004123A0                                         ; .text:0040102D↑p
.idata:004123A0                                         ; DATA XREF: ...
.idata:004123A4                 extrn __imp__assert:dword
.idata:004123A4                                         ; DATA XREF: _assert↑r
.idata:004123A8 ; void (__cdecl *_cexit)()
.idata:004123A8                 extrn __imp__cexit:dword
.idata:004123A8                                         ; DATA XREF: _cexit↑r
.idata:004123AC ; int (__cdecl *_close)(int FileHandle)
.idata:004123AC                 extrn __imp__close:dword
.idata:004123AC                                         ; DATA XREF: _close↑r
.idata:004123B0 ; int *(__cdecl *_errno)()
.idata:004123B0                 extrn __imp__errno:dword
.idata:004123B0                                         ; DATA XREF: _errno↑r
.idata:004123B4 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004123B4                 extrn __imp__fdopen:dword
.idata:004123B4                                         ; DATA XREF: _fdopen↑r
.idata:004123B8 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004123B8                 extrn __imp__filelengthi64:dword
.idata:004123B8                                         ; DATA XREF: _filelengthi64↑r
.idata:004123BC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004123BC                 extrn __imp__flsbuf:dword
.idata:004123BC                                         ; DATA XREF: _flsbuf↑r
.idata:004123C0 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004123C0                 extrn __imp__get_osfhandle:dword
.idata:004123C0                                         ; DATA XREF: _get_osfhandle↑r
.idata:004123C4 ; FILE iob[]
.idata:004123C4                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004123C4                                         ; sub_401080+75↑r ...
.idata:004123C8 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004123C8                 extrn __imp__isctype:dword
.idata:004123C8                                         ; DATA XREF: _isctype↑r
.idata:004123CC ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004123CC                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004123CC                                         ; DATA XREF: .text:0040106C↑r
.idata:004123D0 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004123D0                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004123D4 ; const unsigned __int16 *pctype
.idata:004123D4                 extrn _pctype:dword     ; DATA XREF: sub_405E20:loc_406514↑r
.idata:004123D8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004123D8                 extrn __imp__setmode:dword
.idata:004123D8                                         ; DATA XREF: _setmode↑r
.idata:004123DC ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:004123DC                 extrn __imp__stricmp_0:dword
.idata:004123DC                                         ; DATA XREF: _stricmp_0↑r
.idata:004123E0 ; void (__cdecl __noreturn *abort)()
.idata:004123E0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004123E4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004123E4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004123E4                                         ; DATA XREF: sub_401040+C↑r
.idata:004123E8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004123E8                 extrn __imp_calloc:dword
.idata:004123E8                                         ; DATA XREF: calloc↑r
.idata:004123EC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004123EC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004123F0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004123F0                 extrn __imp_fclose:dword
.idata:004123F0                                         ; DATA XREF: fclose↑r
.idata:004123F4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004123F4                 extrn __imp_fflush:dword
.idata:004123F4                                         ; DATA XREF: fflush↑r
.idata:004123F8 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004123F8                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004123FC ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004123FC                 extrn __imp_fprintf:dword
.idata:004123FC                                         ; DATA XREF: fprintf↑r
.idata:00412400 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00412400                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00412404 ; void (__cdecl *free)(void *Block)
.idata:00412404                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00412408 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00412408                 extrn __imp_getenv:dword
.idata:00412408                                         ; DATA XREF: getenv↑r
.idata:0041240C ; int (__cdecl *isalpha)(int C)
.idata:0041240C                 extrn __imp_isalpha:dword
.idata:0041240C                                         ; DATA XREF: isalpha↑r
.idata:00412410 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00412410                 extrn __imp_iswctype:dword
.idata:00412410                                         ; DATA XREF: iswctype↑r
.idata:00412414 ; void *(__cdecl *malloc)(size_t Size)
.idata:00412414                 extrn __imp_malloc:dword
.idata:00412414                                         ; DATA XREF: malloc↑r
.idata:00412418 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00412418                 extrn __imp_memcpy:dword
.idata:00412418                                         ; DATA XREF: memcpy↑r
.idata:0041241C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041241C                 extrn __imp_memset:dword
.idata:0041241C                                         ; DATA XREF: memset↑r
.idata:00412420 ; int (*printf)(const char *const Format, ...)
.idata:00412420                 extrn __imp_printf:dword
.idata:00412420                                         ; DATA XREF: printf↑r
.idata:00412424 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00412424                 extrn __imp_realloc:dword
.idata:00412424                                         ; DATA XREF: realloc↑r
.idata:00412428 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00412428                 extrn __imp_setlocale:dword
.idata:00412428                                         ; DATA XREF: setlocale↑r
.idata:0041242C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041242C                 extrn __imp_signal:dword
.idata:0041242C                                         ; DATA XREF: signal↑r
.idata:00412430 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00412430                 extrn __imp_sprintf:dword
.idata:00412430                                         ; DATA XREF: sprintf↑r
.idata:00412434 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00412434                 extrn __imp_sscanf:dword
.idata:00412434                                         ; DATA XREF: sscanf↑r
.idata:00412438 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00412438                 extrn __imp_strcat:dword
.idata:00412438                                         ; DATA XREF: strcat↑r
.idata:0041243C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041243C                 extrn __imp_strchr:dword
.idata:0041243C                                         ; DATA XREF: strchr↑r
.idata:00412440 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00412440                 extrn __imp_strcmp:dword
.idata:00412440                                         ; DATA XREF: strcmp↑r
.idata:00412444 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00412444                 extrn __imp_strcpy:dword
.idata:00412444                                         ; DATA XREF: strcpy↑r
.idata:00412448 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00412448                 extrn __imp_strerror:dword
.idata:00412448                                         ; DATA XREF: strerror↑r
.idata:0041244C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041244C                 extrn __imp_strlen:dword
.idata:0041244C                                         ; DATA XREF: strlen↑r
.idata:00412450 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00412450                 extrn __imp_strncmp:dword
.idata:00412450                                         ; DATA XREF: strncmp↑r
.idata:00412454 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00412454                 extrn __imp_strncpy:dword
.idata:00412454                                         ; DATA XREF: strncpy↑r
.idata:00412458 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:00412458                 extrn __imp_strpbrk:dword
.idata:00412458                                         ; DATA XREF: strpbrk↑r
.idata:0041245C ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:0041245C                 extrn __imp_strrchr:dword
.idata:0041245C                                         ; DATA XREF: strrchr↑r
.idata:00412460 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00412460                 extrn __imp_strspn:dword
.idata:00412460                                         ; DATA XREF: strspn↑r
.idata:00412464 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:00412464                 extrn __imp_strstr:dword
.idata:00412464                                         ; DATA XREF: strstr↑r
.idata:00412468 ; int (__cdecl *toupper)(int C)
.idata:00412468                 extrn __imp_toupper:dword
.idata:00412468                                         ; DATA XREF: toupper↑r
.idata:0041246C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041246C                 extrn __imp_vfprintf:dword
.idata:0041246C                                         ; DATA XREF: vfprintf↑r
.idata:00412470
.idata:00412478 ;
.idata:00412478 ; Imports from OLE32.dll
.idata:00412478 ;
.idata:00412478 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00412478                 extrn __imp_CoCreateInstance:dword
.idata:00412478                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041247C ; void (__stdcall *CoUninitialize)()
.idata:0041247C                 extrn __imp_CoUninitialize:dword
.idata:0041247C                                         ; DATA XREF: CoUninitialize↑r
.idata:00412480 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00412480                 extrn __imp_OleInitialize:dword
.idata:00412480                                         ; DATA XREF: OleInitialize↑r
.idata:00412484
.idata:00412484
.idata:00412484
.idata:00412484                 end start
