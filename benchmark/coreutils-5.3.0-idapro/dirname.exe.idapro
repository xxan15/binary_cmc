.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 7B1DEBA435ABBF1E9DBB989AF61D4F9A908FDBA1B51129C3DE836537D2776BEC
.text:00401000 ; Input MD5    : E63F1A09E5CD2468687CDDD94E514E9E
.text:00401000 ; Input CRC32  : 66C18871
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/dirname.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A265 (Wed Apr 20 18:41:41 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004020 (  16416.)
.text:00401000 ; Section size in file          : 00004200 (  16896.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401360+62↓p
.text:00401040                                         ; .text:00404D00↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_404CA0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_404C70
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401360
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_404CA0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 byte_401280     db 2Eh                  ; DATA XREF: sub_401360+167↓o
.text:00401281 ; const char Locale
.text:00401281 Locale          db 0                    ; DATA XREF: sub_401360+1F↓o
.text:00401282                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401360+39↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401360+41↓o
.text:004012C3                                         ; sub_401360+4E↓o
.text:004012CD aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401360+6F↓o
.text:004012DA aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401360+77↓o
.text:004012EA a530            db '5.3.0',0            ; DATA XREF: sub_401360+87↓o
.text:004012F0 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401360+8F↓o
.text:004012FE ; const FILE stru_4012FE
.text:004012FE stru_4012FE     FILE <6E726964h, 656D61h, 7865002Bh, 20617274h, 7265706Fh, 20646E61h, \
.text:004012FE                                         ; DATA XREF: sub_401360+97↓o
.text:004012FE                                         ; sub_401360+BB↓o ...
.text:004012FE                       8D007325h, 26B4h>
.text:0040131E                 db    0
.text:0040131F                 db    0
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_401360:loc_40147E↓o
.text:00401320                                         ; sub_4016D0+F↓o
.text:00401347 aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401360:loc_401536↓o
.text:00401357                 align 10h
.text:00401360
.text:00401360 ; =============== S U B R O U T I N E =======================================
.text:00401360
.text:00401360 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401360
.text:00401360 sub_401360      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401360
.text:00401360 Category        = dword ptr -38h
.text:00401360 Locale          = dword ptr -34h
.text:00401360 ElementCount    = dword ptr -30h
.text:00401360 Stream          = dword ptr -2Ch
.text:00401360 var_28          = dword ptr -28h
.text:00401360 var_24          = dword ptr -24h
.text:00401360 var_20          = byte ptr -20h
.text:00401360 var_1C          = dword ptr -1Ch
.text:00401360 var_18          = dword ptr -18h
.text:00401360 arg_0           = dword ptr  8
.text:00401360 arg_4           = dword ptr  0Ch
.text:00401360
.text:00401360                 push    ebp
.text:00401361                 xor     eax, eax
.text:00401363                 mov     ebp, esp
.text:00401365                 push    esi
.text:00401366                 push    ebx
.text:00401367                 sub     esp, 30h
.text:0040136A                 mov     esi, [ebp+arg_4]
.text:0040136D                 and     esp, 0FFFFFFF0h
.text:00401370                 mov     ebx, [ebp+arg_0]
.text:00401373                 call    __alloca
.text:00401378                 call    sub_404D40
.text:0040137D                 mov     edx, [esi]
.text:0040137F                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:00401387                 mov     [esp+38h+Category], 0 ; Category
.text:0040138E                 mov     ds:dword_407190, edx
.text:00401394                 call    setlocale
.text:00401399                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004013A1                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004013A8                 call    ds:__imp_libintl_bindtextdomain
.text:004013AE                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004013B5                 call    ds:libintl_textdomain
.text:004013BB                 mov     [esp+38h+Category], offset sub_402C10 ; void (__cdecl *)()
.text:004013C2                 call    sub_401040
.text:004013C7                 mov     [esp+38h+var_18], 0
.text:004013CF                 mov     [esp+38h+var_1C], offset aJimMeyering ; "Jim Meyering"
.text:004013D7                 mov     dword ptr [esp+38h+var_20], offset aDavidMackenzie ; "David MacKenzie"
.text:004013DF                 mov     [esp+38h+var_24], offset sub_4016D0 ; int
.text:004013E7                 mov     [esp+38h+var_28], offset a530 ; "5.3.0"
.text:004013EF                 mov     [esp+38h+Stream], offset aGnuCoreutils ; "GNU coreutils"
.text:004013F7                 mov     [esp+38h+ElementCount], offset stru_4012FE ; FILE *
.text:004013FF                 mov     [esp+38h+Locale], esi ; int
.text:00401403                 mov     [esp+38h+Category], ebx ; int
.text:00401406                 call    sub_402B20
.text:0040140B                 mov     [esp+38h+var_28], 0 ; int
.text:00401413                 mov     [esp+38h+Stream], 0 ; char
.text:0040141B                 mov     [esp+38h+ElementCount], offset stru_4012FE._base ; char *
.text:00401423                 mov     [esp+38h+Locale], esi ; int
.text:00401427                 mov     [esp+38h+Category], ebx ; int
.text:0040142A                 call    sub_402980
.text:0040142F                 inc     eax
.text:00401430                 jnz     short loc_40147E
.text:00401432                 mov     edx, dword_406010
.text:00401438                 lea     eax, [edx+1]
.text:0040143B                 cmp     ebx, eax
.text:0040143D                 jl      loc_401536
.text:00401443                 cmp     eax, ebx
.text:00401445                 jge     short loc_4014B6
.text:00401447                 mov     ebx, [esi+edx*4+4]
.text:0040144B                 mov     [esp+38h+Category], ebx ; char *
.text:0040144E                 call    sub_402950
.text:00401453                 mov     [esp+38h+Category], (offset stru_4012FE._base+2)
.text:0040145A                 mov     esi, eax
.text:0040145C                 call    ds:libintl_gettext
.text:00401462                 mov     [esp+38h+Stream], esi ; char
.text:00401466                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:0040146E                 mov     [esp+38h+Category], 0 ; Code
.text:00401475                 mov     [esp+38h+ElementCount], eax ; char *
.text:00401479                 call    sub_4049C0
.text:0040147E
.text:0040147E loc_40147E:                             ; CODE XREF: sub_401360+D0↑j
.text:0040147E                                         ; sub_401360+1FB↓j
.text:0040147E                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401485                 call    ds:libintl_gettext
.text:0040148B                 mov     edx, ds:_iob
.text:00401491                 mov     ecx, ds:dword_407190
.text:00401497                 add     edx, 40h ; '@'
.text:0040149A                 mov     [esp+38h+ElementCount], ecx
.text:0040149E                 mov     [esp+38h+Locale], eax ; Format
.text:004014A2                 mov     [esp+38h+Category], edx ; Stream
.text:004014A5                 call    fprintf
.text:004014AA                 mov     [esp+38h+Category], 1 ; Code
.text:004014B1
.text:004014B1 loc_4014B1:                             ; CODE XREF: sub_401360+1B9↓j
.text:004014B1                 call    exit
.text:004014B6 ; ---------------------------------------------------------------------------
.text:004014B6
.text:004014B6 loc_4014B6:                             ; CODE XREF: sub_401360+E5↑j
.text:004014B6                 mov     ebx, [esi+edx*4]
.text:004014B9                 mov     [esp+38h+Category], ebx
.text:004014BC                 call    sub_4027E0
.text:004014C1                 test    eax, eax
.text:004014C3                 mov     edx, eax
.text:004014C5                 jnz     short loc_4014D1
.text:004014C7                 mov     ebx, offset byte_401280
.text:004014CC                 mov     edx, 1
.text:004014D1
.text:004014D1 loc_4014D1:                             ; CODE XREF: sub_401360+165↑j
.text:004014D1                 mov     [esp+38h+ElementCount], edx ; ElementCount
.text:004014D5                 mov     esi, ds:_iob
.text:004014DB                 mov     [esp+38h+Locale], 1 ; ElementSize
.text:004014E3                 mov     [esp+38h+Category], ebx ; Buffer
.text:004014E6                 add     esi, 20h ; ' '
.text:004014E9                 mov     [esp+38h+Stream], esi ; Stream
.text:004014ED                 call    fwrite
.text:004014F2                 mov     edx, ds:_iob
.text:004014F8                 mov     ecx, [edx+24h]
.text:004014FB                 dec     ecx
.text:004014FC                 mov     [edx+24h], ecx
.text:004014FF                 test    ecx, ecx
.text:00401501                 js      short loc_40151B
.text:00401503                 mov     ebx, ds:_iob
.text:00401509                 mov     eax, [ebx+20h]
.text:0040150C                 mov     byte ptr [eax], 0Ah
.text:0040150F                 inc     dword ptr [ebx+20h]
.text:00401512
.text:00401512 loc_401512:                             ; CODE XREF: sub_401360+1D4↓j
.text:00401512                 mov     [esp+38h+Category], 0
.text:00401519                 jmp     short loc_4014B1
.text:0040151B ; ---------------------------------------------------------------------------
.text:0040151B
.text:0040151B loc_40151B:                             ; CODE XREF: sub_401360+1A1↑j
.text:0040151B                 mov     [esp+38h+Category], 0Ah ; Ch
.text:00401522                 mov     ecx, ds:_iob
.text:00401528                 add     ecx, 20h ; ' '
.text:0040152B                 mov     [esp+38h+Locale], ecx ; File
.text:0040152F                 call    _flsbuf
.text:00401534                 jmp     short loc_401512
.text:00401536 ; ---------------------------------------------------------------------------
.text:00401536
.text:00401536 loc_401536:                             ; CODE XREF: sub_401360+DD↑j
.text:00401536                 mov     [esp+38h+Category], offset aMissingOperand ; "missing operand"
.text:0040153D                 call    ds:libintl_gettext
.text:00401543                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:0040154B                 mov     [esp+38h+Category], 0 ; Code
.text:00401552                 mov     [esp+38h+ElementCount], eax ; char *
.text:00401556                 call    sub_4049C0
.text:0040155B                 jmp     loc_40147E
.text:0040155B sub_401360      endp
.text:0040155B
.text:0040155B ; ---------------------------------------------------------------------------
.text:00401560 aUsageSNameOrSO db 'Usage: %s NAME',0Ah ; DATA XREF: sub_4016D0:loc_401713↓o
.text:00401560                 db '  or:  %s OPTION',0Ah,0
.text:00401581                 align 20h
.text:004015A0 aPrintNameWithI db 'Print NAME with its trailing /component removed; if NAME contains'
.text:004015A0                                         ; DATA XREF: sub_4016D0+66↓o
.text:004015A0                 db ' no /',27h,'s,',0Ah
.text:004015A0                 db 'output `.',27h,' (meaning the current directory).',0Ah
.text:004015A0                 db 0Ah,0
.text:00401618                 align 10h
.text:00401620 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401620                                         ; DATA XREF: sub_4016D0+88↓o
.text:0040164D                 align 20h
.text:00401660 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401660                                         ; DATA XREF: sub_4016D0+AA↓o
.text:00401696 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4016D0+CC↓o
.text:00401696                 db 'Report bugs to <%s>.',0Ah,0
.text:004016AD aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004016AD                                         ; DATA XREF: sub_4016D0+D9↓o
.text:004016C3                 align 10h
.text:004016D0
.text:004016D0 ; =============== S U B R O U T I N E =======================================
.text:004016D0
.text:004016D0 ; Attributes: noreturn
.text:004016D0
.text:004016D0 ; void __cdecl __noreturn sub_4016D0(int Code)
.text:004016D0 sub_4016D0      proc near               ; DATA XREF: sub_401360+7F↑o
.text:004016D0
.text:004016D0 Stream          = dword ptr -1Ch
.text:004016D0 Format          = dword ptr -18h
.text:004016D0 var_14          = dword ptr -14h
.text:004016D0 var_4           = dword ptr -4
.text:004016D0 Code            = dword ptr  4
.text:004016D0
.text:004016D0                 sub     esp, 1Ch
.text:004016D3                 mov     [esp+1Ch+var_4], ebx
.text:004016D7                 mov     ebx, [esp+1Ch+Code]
.text:004016DB                 test    ebx, ebx
.text:004016DD                 jz      short loc_401713
.text:004016DF                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004016E6                 call    ds:libintl_gettext
.text:004016EC                 mov     edx, ds:_iob
.text:004016F2                 mov     ecx, ds:dword_407190
.text:004016F8                 add     edx, 40h ; '@'
.text:004016FB                 mov     [esp+1Ch+var_14], ecx
.text:004016FF                 mov     [esp+1Ch+Format], eax ; Format
.text:00401703                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401706                 call    fprintf
.text:0040170B
.text:0040170B loc_40170B:                             ; CODE XREF: sub_4016D0+E9↓j
.text:0040170B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040170E                 call    exit
.text:00401713 ; ---------------------------------------------------------------------------
.text:00401713
.text:00401713 loc_401713:                             ; CODE XREF: sub_4016D0+D↑j
.text:00401713                 mov     [esp+1Ch+Stream], offset aUsageSNameOrSO ; "Usage: %s NAME\n  or:  %s OPTION\n"
.text:0040171A                 call    ds:libintl_gettext
.text:00401720                 mov     ecx, ds:dword_407190
.text:00401726                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401729                 mov     [esp+1Ch+var_14], ecx
.text:0040172D                 mov     [esp+1Ch+Format], ecx
.text:00401731                 call    printf
.text:00401736                 mov     [esp+1Ch+Stream], offset aPrintNameWithI ; "Print NAME with its trailing /component"...
.text:0040173D                 call    ds:libintl_gettext
.text:00401743                 mov     ecx, ds:_iob
.text:00401749                 add     ecx, 20h ; ' '
.text:0040174C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401750                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401753                 call    fputs
.text:00401758                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040175F                 call    ds:libintl_gettext
.text:00401765                 mov     ecx, ds:_iob
.text:0040176B                 add     ecx, 20h ; ' '
.text:0040176E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401772                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401775                 call    fputs
.text:0040177A                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401781                 call    ds:libintl_gettext
.text:00401787                 mov     ecx, ds:_iob
.text:0040178D                 add     ecx, 20h ; ' '
.text:00401790                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401794                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401797                 call    fputs
.text:0040179C                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004017A3                 call    ds:libintl_gettext
.text:004017A9                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004017B1                 mov     [esp+1Ch+Stream], eax ; Format
.text:004017B4                 call    printf
.text:004017B9                 jmp     loc_40170B
.text:004017B9 sub_4016D0      endp
.text:004017B9
.text:004017B9 ; ---------------------------------------------------------------------------
.text:004017BE                 align 10h
.text:004017C0 dword_4017C0    dd 90002D2Dh, 7 dup(90909090h)
.text:004017C0                                         ; DATA XREF: sub_401A10+E4↓o
.text:004017E0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004017E0                                         ; DATA XREF: sub_401A10+2FC↓o
.text:0040180D                 align 20h
.text:00401820 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401820                                         ; DATA XREF: sub_401A10:loc_401D72↓o
.text:0040184D                 align 20h
.text:00401860 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401860                                         ; DATA XREF: sub_401A10:loc_401E10↓o
.text:00401860                                         ; sub_401A10:loc_4021D7↓o
.text:00401886                 align 20h
.text:004018A0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:004018A0                                         ; DATA XREF: sub_401A10+48E↓o
.text:004018C0 dword_4018C0    dd 90909000h, 7 dup(90909090h)
.text:004018C0                                         ; DATA XREF: sub_401A10:loc_401EE1↓o
.text:004018E0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004018E0                                         ; DATA XREF: sub_401A10:loc_401EFA↓o
.text:00401900 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401900                                         ; DATA XREF: sub_401A10:loc_401FDF↓o
.text:00401900                                         ; sub_401A10:loc_40230C↓o
.text:00401927                 align 20h
.text:00401940 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401940                                         ; DATA XREF: sub_401A10:loc_402153↓o
.text:0040196E                 align 20h
.text:00401980 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401980                                         ; DATA XREF: sub_401A10:loc_40223F↓o
.text:004019A1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:004019A1                                         ; DATA XREF: sub_401A10+93F↓o
.text:004019BB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:004019BB                                         ; DATA XREF: sub_401A10:loc_402387↓o
.text:004019D5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:004019D5                                         ; DATA XREF: sub_401A10:loc_4023AE↓o
.text:004019F3 ; const char VarName[]
.text:004019F3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401A10:loc_402560↓o
.text:00401A03                 align 10h
.text:00401A10
.text:00401A10 ; =============== S U B R O U T I N E =======================================
.text:00401A10
.text:00401A10
.text:00401A10 ; int __cdecl sub_401A10(int, int, char *Str, int, int, int, int, int)
.text:00401A10 sub_401A10      proc near               ; CODE XREF: sub_4025A0+5A↓p
.text:00401A10                                         ; .text:0040268A↓p ...
.text:00401A10
.text:00401A10 Str1            = dword ptr -5Ch
.text:00401A10 Str2            = dword ptr -58h
.text:00401A10 MaxCount        = dword ptr -54h
.text:00401A10 var_50          = dword ptr -50h
.text:00401A10 var_4C          = dword ptr -4Ch
.text:00401A10 var_3C          = dword ptr -3Ch
.text:00401A10 var_38          = dword ptr -38h
.text:00401A10 var_34          = dword ptr -34h
.text:00401A10 var_30          = dword ptr -30h
.text:00401A10 var_2C          = dword ptr -2Ch
.text:00401A10 var_28          = dword ptr -28h
.text:00401A10 var_24          = dword ptr -24h
.text:00401A10 var_20          = dword ptr -20h
.text:00401A10 var_1C          = dword ptr -1Ch
.text:00401A10 var_18          = dword ptr -18h
.text:00401A10 var_14          = dword ptr -14h
.text:00401A10 arg_0           = dword ptr  4
.text:00401A10 arg_4           = dword ptr  8
.text:00401A10 Str             = dword ptr  0Ch
.text:00401A10 arg_C           = dword ptr  10h
.text:00401A10 arg_10          = dword ptr  14h
.text:00401A10 arg_14          = dword ptr  18h
.text:00401A10 arg_18          = dword ptr  1Ch
.text:00401A10 arg_1C          = dword ptr  20h
.text:00401A10
.text:00401A10                 push    ebp
.text:00401A11                 mov     eax, 0FFFFFFFFh
.text:00401A16                 push    edi
.text:00401A17                 push    esi
.text:00401A18                 push    ebx
.text:00401A19                 sub     esp, 4Ch
.text:00401A1C                 mov     esi, [esp+5Ch+Str]
.text:00401A20                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401A24                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401A27                 mov     ebx, [ebp+4]
.text:00401A2A                 setz    dl
.text:00401A2D                 movzx   ecx, dl
.text:00401A30                 dec     ecx
.text:00401A31                 and     ecx, ebx
.text:00401A33                 mov     [esp+5Ch+var_14], ecx
.text:00401A37                 mov     ecx, [esp+5Ch+arg_0]
.text:00401A3B                 test    ecx, ecx
.text:00401A3D                 jle     loc_401B67
.text:00401A43                 mov     dword ptr [ebp+0Ch], 0
.text:00401A4A                 mov     ebx, [ebp+0]
.text:00401A4D                 test    ebx, ebx
.text:00401A4F                 jz      loc_402580
.text:00401A55                 mov     edi, [ebp+10h]
.text:00401A58                 test    edi, edi
.text:00401A5A                 jnz     short loc_401AB3
.text:00401A5C                 lea     esi, [esi+0]
.text:00401A60
.text:00401A60 loc_401A60:                             ; CODE XREF: sub_401A10+B7C↓j
.text:00401A60                 mov     [ebp+24h], ebx
.text:00401A63                 mov     esi, [esp+5Ch+Str]
.text:00401A67                 mov     [ebp+20h], ebx
.text:00401A6A                 mov     ecx, [esp+5Ch+arg_18]
.text:00401A6E                 xor     ebx, ebx
.text:00401A70                 mov     dword ptr [ebp+14h], 0
.text:00401A77                 test    ecx, ecx
.text:00401A79                 jz      loc_402560
.text:00401A7F
.text:00401A7F loc_401A7F:                             ; CODE XREF: sub_401A10+B64↓j
.text:00401A7F                 mov     ebx, 1
.text:00401A84
.text:00401A84 loc_401A84:                             ; CODE XREF: sub_401A10+B5E↓j
.text:00401A84                 mov     [ebp+1Ch], ebx
.text:00401A87                 mov     ecx, [esp+5Ch+Str]
.text:00401A8B                 movzx   eax, byte ptr [ecx]
.text:00401A8E                 cmp     al, 2Dh ; '-'
.text:00401A90                 jz      loc_402550
.text:00401A96                 cmp     al, 2Bh ; '+'
.text:00401A98                 jz      loc_402539
.text:00401A9E                 xor     edx, edx
.text:00401AA0                 test    ebx, ebx
.text:00401AA2                 setz    dl
.text:00401AA5                 mov     [ebp+18h], edx
.text:00401AA8
.text:00401AA8 loc_401AA8:                             ; CODE XREF: sub_401A10+B35↓j
.text:00401AA8                 mov     [esp+5Ch+Str], esi
.text:00401AAC                 mov     dword ptr [ebp+10h], 1
.text:00401AB3
.text:00401AB3 loc_401AB3:                             ; CODE XREF: sub_401A10+4A↑j
.text:00401AB3                 mov     eax, [ebp+14h]
.text:00401AB6                 test    eax, eax
.text:00401AB8                 jz      short loc_401AC3
.text:00401ABA                 cmp     byte ptr [eax], 0
.text:00401ABD                 jnz     loc_401BA0
.text:00401AC3
.text:00401AC3 loc_401AC3:                             ; CODE XREF: sub_401A10+A8↑j
.text:00401AC3                 mov     ebx, [ebp+0]
.text:00401AC6                 cmp     [ebp+24h], ebx
.text:00401AC9                 jle     short loc_401ACE
.text:00401ACB                 mov     [ebp+24h], ebx
.text:00401ACE
.text:00401ACE loc_401ACE:                             ; CODE XREF: sub_401A10+B9↑j
.text:00401ACE                 cmp     [ebp+20h], ebx
.text:00401AD1                 jle     short loc_401AD6
.text:00401AD3                 mov     [ebp+20h], ebx
.text:00401AD6
.text:00401AD6 loc_401AD6:                             ; CODE XREF: sub_401A10+C1↑j
.text:00401AD6                 cmp     dword ptr [ebp+18h], 1
.text:00401ADA                 jz      loc_4024B0
.text:00401AE0
.text:00401AE0 loc_401AE0:                             ; CODE XREF: sub_401A10+B13↓j
.text:00401AE0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401AE4                 jz      loc_402494
.text:00401AEA                 cld
.text:00401AEB                 mov     ecx, [esp+5Ch+arg_4]
.text:00401AEF                 mov     edx, 3
.text:00401AF4                 mov     edi, offset dword_4017C0
.text:00401AF9                 mov     esi, [ecx+ebx*4]
.text:00401AFC                 mov     ecx, edx
.text:00401AFE                 repe cmpsb
.text:00401B00                 jnz     short loc_401B3C
.text:00401B02                 mov     edx, [ebp+24h]
.text:00401B05                 lea     eax, [ebx+1]
.text:00401B08                 cmp     [ebp+20h], edx
.text:00401B0B                 mov     [ebp+0], eax
.text:00401B0E                 jz      loc_4024A8
.text:00401B14                 cmp     edx, eax
.text:00401B16                 jz      short loc_401B30
.text:00401B18                 mov     [esp+5Ch+Str2], ebp
.text:00401B1C                 mov     ebx, [esp+5Ch+arg_4]
.text:00401B20                 mov     [esp+5Ch+Str1], ebx
.text:00401B23                 call    sub_4026C0
.text:00401B28                 nop
.text:00401B29                 lea     esi, [esi+0]
.text:00401B30
.text:00401B30 loc_401B30:                             ; CODE XREF: sub_401A10+106↑j
.text:00401B30                                         ; sub_401A10+A9B↓j
.text:00401B30                 mov     eax, [esp+5Ch+arg_0]
.text:00401B34                 mov     ebx, eax
.text:00401B36                 mov     [ebp+24h], eax
.text:00401B39                 mov     [ebp+0], eax
.text:00401B3C
.text:00401B3C loc_401B3C:                             ; CODE XREF: sub_401A10+F0↑j
.text:00401B3C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401B40                 jz      loc_402494
.text:00401B46                 mov     esi, [esp+5Ch+arg_4]
.text:00401B4A                 mov     eax, [esi+ebx*4]
.text:00401B4D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401B50                 jz      short loc_401B77
.text:00401B52
.text:00401B52 loc_401B52:                             ; CODE XREF: sub_401A10+16D↓j
.text:00401B52                 mov     edx, [ebp+18h]
.text:00401B55                 test    edx, edx
.text:00401B57                 jz      short loc_401B70
.text:00401B59                 mov     [ebp+0Ch], eax
.text:00401B5C                 lea     edi, [ebx+1]
.text:00401B5F                 mov     eax, 1
.text:00401B64                 mov     [ebp+0], edi
.text:00401B67
.text:00401B67 loc_401B67:                             ; CODE XREF: sub_401A10+2D↑j
.text:00401B67                                         ; sub_401A10+165↓j ...
.text:00401B67                 add     esp, 4Ch
.text:00401B6A                 pop     ebx
.text:00401B6B                 pop     esi
.text:00401B6C                 pop     edi
.text:00401B6D                 pop     ebp
.text:00401B6E                 retn
.text:00401B6E ; ---------------------------------------------------------------------------
.text:00401B6F                 align 10h
.text:00401B70
.text:00401B70 loc_401B70:                             ; CODE XREF: sub_401A10+147↑j
.text:00401B70                                         ; sub_401A10+A8A↓j ...
.text:00401B70                 mov     eax, 0FFFFFFFFh
.text:00401B75                 jmp     short loc_401B67
.text:00401B77 ; ---------------------------------------------------------------------------
.text:00401B77
.text:00401B77 loc_401B77:                             ; CODE XREF: sub_401A10+140↑j
.text:00401B77                 movzx   edx, byte ptr [eax+1]
.text:00401B7B                 test    dl, dl
.text:00401B7D                 jz      short loc_401B52
.text:00401B7F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401B83                 xor     ecx, ecx
.text:00401B85                 test    ebx, ebx
.text:00401B87                 jz      short loc_401B92
.text:00401B89                 cmp     dl, 2Dh ; '-'
.text:00401B8C                 jz      loc_40248A
.text:00401B92
.text:00401B92 loc_401B92:                             ; CODE XREF: sub_401A10+177↑j
.text:00401B92                                         ; sub_401A10+A7F↓j
.text:00401B92                 lea     esi, [ecx+eax+1]
.text:00401B96                 mov     [ebp+14h], esi
.text:00401B99                 lea     esi, [esi+0]
.text:00401BA0
.text:00401BA0 loc_401BA0:                             ; CODE XREF: sub_401A10+AD↑j
.text:00401BA0                 mov     ecx, [esp+5Ch+arg_C]
.text:00401BA4                 test    ecx, ecx
.text:00401BA6                 jz      loc_401F30
.text:00401BAC                 mov     edx, [ebp+0]
.text:00401BAF                 mov     edi, [esp+5Ch+arg_4]
.text:00401BB3                 mov     eax, [edi+edx*4]
.text:00401BB6                 movzx   edx, byte ptr [eax+1]
.text:00401BBA                 cmp     dl, 2Dh ; '-'
.text:00401BBD                 jz      short loc_401BD5
.text:00401BBF                 mov     ebx, [esp+5Ch+arg_14]
.text:00401BC3                 test    ebx, ebx
.text:00401BC5                 jz      loc_401F30
.text:00401BCB                 cmp     byte ptr [eax+2], 0
.text:00401BCF                 jz      loc_40246A
.text:00401BD5
.text:00401BD5 loc_401BD5:                             ; CODE XREF: sub_401A10+1AD↑j
.text:00401BD5                                         ; sub_401A10+A75↓j
.text:00401BD5                 mov     [esp+5Ch+var_18], 0
.text:00401BDD                 mov     ecx, [ebp+14h]
.text:00401BE0                 mov     [esp+5Ch+var_1C], 0
.text:00401BE8                 mov     [esp+5Ch+var_20], 0
.text:00401BF0                 mov     edi, ecx
.text:00401BF2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401BFA                 movzx   eax, byte ptr [ecx]
.text:00401BFD                 test    al, al
.text:00401BFF                 jz      short loc_401C1C
.text:00401C01                 cmp     al, 3Dh ; '='
.text:00401C03                 jz      short loc_401C1C
.text:00401C05                 lea     esi, [esi+0]
.text:00401C09                 lea     edi, [edi+0]
.text:00401C10
.text:00401C10 loc_401C10:                             ; CODE XREF: sub_401A10+20A↓j
.text:00401C10                 inc     edi
.text:00401C11                 movzx   eax, byte ptr [edi]
.text:00401C14                 test    al, al
.text:00401C16                 jz      short loc_401C1C
.text:00401C18                 cmp     al, 3Dh ; '='
.text:00401C1A                 jnz     short loc_401C10
.text:00401C1C
.text:00401C1C loc_401C1C:                             ; CODE XREF: sub_401A10+1EF↑j
.text:00401C1C                                         ; sub_401A10+1F3↑j ...
.text:00401C1C                 mov     [esp+5Ch+var_28], 0
.text:00401C24                 mov     esi, [esp+5Ch+arg_C]
.text:00401C28                 mov     ebx, [esi]
.text:00401C2A                 test    ebx, ebx
.text:00401C2C                 mov     edx, ebx
.text:00401C2E                 jz      loc_401E50
.text:00401C34                 lea     esi, [esi+0]
.text:00401C3A                 lea     edi, [edi+0]
.text:00401C40
.text:00401C40 loc_401C40:                             ; CODE XREF: sub_401A10+25E↓j
.text:00401C40                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401C44                 mov     ebx, edi
.text:00401C46                 sub     ebx, ecx
.text:00401C48                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401C4C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401C4F                 call    strncmp
.text:00401C54                 test    eax, eax
.text:00401C56                 jz      loc_4023E6
.text:00401C5C
.text:00401C5C loc_401C5C:                             ; CODE XREF: sub_401A10+A0F↓j
.text:00401C5C                                         ; sub_401A10+A24↓j ...
.text:00401C5C                 inc     [esp+5Ch+var_28]
.text:00401C60                 add     esi, 10h
.text:00401C63                 mov     ecx, [esi]
.text:00401C65                 test    ecx, ecx
.text:00401C67                 mov     edx, ecx
.text:00401C69                 jz      short loc_401C70
.text:00401C6B                 mov     ecx, [ebp+14h]
.text:00401C6E                 jmp     short loc_401C40
.text:00401C70 ; ---------------------------------------------------------------------------
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_401A10+259↑j
.text:00401C70                                         ; sub_401A10+A55↓j
.text:00401C70                 mov     esi, [esp+5Ch+var_20]
.text:00401C74                 test    esi, esi
.text:00401C76                 jz      short loc_401C84
.text:00401C78                 mov     edx, [esp+5Ch+var_1C]
.text:00401C7C                 test    edx, edx
.text:00401C7E                 jz      loc_402390
.text:00401C84
.text:00401C84 loc_401C84:                             ; CODE XREF: sub_401A10+266↑j
.text:00401C84                 mov     eax, [esp+5Ch+var_18]
.text:00401C88                 test    eax, eax
.text:00401C8A                 jz      loc_401E50
.text:00401C90                 mov     ecx, [ebp+0]
.text:00401C93                 lea     eax, [ecx+1]
.text:00401C96                 mov     [ebp+0], eax
.text:00401C99                 cmp     byte ptr [edi], 0
.text:00401C9C                 jz      loc_401DB0
.text:00401CA2                 mov     ecx, [esp+5Ch+var_18]
.text:00401CA6                 mov     esi, [ecx+4]
.text:00401CA9                 test    esi, esi
.text:00401CAB                 jz      short loc_401CF6
.text:00401CAD                 lea     ebx, [edi+1]
.text:00401CB0                 mov     [ebp+0Ch], ebx
.text:00401CB3
.text:00401CB3 loc_401CB3:                             ; CODE XREF: sub_401A10+3A8↓j
.text:00401CB3                                         ; sub_401A10+3C4↓j
.text:00401CB3                 mov     ebx, [ebp+14h]
.text:00401CB6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401CB9                 call    strlen
.text:00401CBE                 add     [ebp+14h], eax
.text:00401CC1                 mov     esi, [esp+5Ch+arg_10]
.text:00401CC5                 test    esi, esi
.text:00401CC7                 jz      short loc_401CD3
.text:00401CC9                 mov     ebp, [esp+5Ch+var_24]
.text:00401CCD                 mov     ecx, [esp+5Ch+arg_10]
.text:00401CD1                 mov     [ecx], ebp
.text:00401CD3
.text:00401CD3 loc_401CD3:                             ; CODE XREF: sub_401A10+2B7↑j
.text:00401CD3                 mov     eax, [esp+5Ch+var_18]
.text:00401CD7                 mov     ecx, [eax+8]
.text:00401CDA                 test    ecx, ecx
.text:00401CDC                 jnz     short loc_401CEA
.text:00401CDE                 mov     ecx, [esp+5Ch+var_18]
.text:00401CE2
.text:00401CE2 loc_401CE2:                             ; CODE XREF: sub_401A10+723↓j
.text:00401CE2                 mov     eax, [ecx+0Ch]
.text:00401CE5                 jmp     loc_401B67
.text:00401CEA ; ---------------------------------------------------------------------------
.text:00401CEA
.text:00401CEA loc_401CEA:                             ; CODE XREF: sub_401A10+2CC↑j
.text:00401CEA                                         ; sub_401A10+719↓j
.text:00401CEA                 mov     esi, [eax+0Ch]
.text:00401CED                 xor     eax, eax
.text:00401CEF                 mov     [ecx], esi
.text:00401CF1                 jmp     loc_401B67
.text:00401CF6 ; ---------------------------------------------------------------------------
.text:00401CF6
.text:00401CF6 loc_401CF6:                             ; CODE XREF: sub_401A10+29B↑j
.text:00401CF6                 mov     edi, [esp+5Ch+var_14]
.text:00401CFA                 test    edi, edi
.text:00401CFC                 jz      short loc_401D50
.text:00401CFE                 mov     esi, [esp+5Ch+arg_4]
.text:00401D02                 mov     edx, [esi+eax*4-4]
.text:00401D06                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401D0A                 jz      short loc_401D72
.text:00401D0C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401D13                 call    ds:libintl_gettext
.text:00401D19                 mov     edx, [esp+5Ch+var_18]
.text:00401D1D                 mov     edi, [edx]
.text:00401D1F                 mov     [esp+5Ch+var_4C], edi
.text:00401D23                 mov     ebx, [ebp+0]
.text:00401D26                 mov     edi, [esp+5Ch+arg_4]
.text:00401D2A                 mov     ecx, [edi+ebx*4-4]
.text:00401D2E                 movsx   esi, byte ptr [ecx]
.text:00401D31                 mov     ecx, ds:_iob
.text:00401D37                 add     ecx, 40h ; '@'
.text:00401D3A                 mov     [esp+5Ch+var_50], esi
.text:00401D3E                 mov     ebx, [edi]
.text:00401D40                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D44                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D47                 mov     [esp+5Ch+MaxCount], ebx
.text:00401D4B                 call    fprintf
.text:00401D50
.text:00401D50 loc_401D50:                             ; CODE XREF: sub_401A10+2EC↑j
.text:00401D50                                         ; sub_401A10+398↓j
.text:00401D50                 mov     ecx, [ebp+14h]
.text:00401D53                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401D56                 call    strlen
.text:00401D5B                 add     [ebp+14h], eax
.text:00401D5E                 mov     eax, [esp+5Ch+var_18]
.text:00401D62                 mov     esi, [eax+0Ch]
.text:00401D65                 mov     [ebp+8], esi
.text:00401D68
.text:00401D68 loc_401D68:                             ; CODE XREF: sub_401A10+4E5↓j
.text:00401D68                                         ; sub_401A10+73E↓j ...
.text:00401D68                 mov     eax, 3Fh ; '?'
.text:00401D6D                 jmp     loc_401B67
.text:00401D72 ; ---------------------------------------------------------------------------
.text:00401D72
.text:00401D72 loc_401D72:                             ; CODE XREF: sub_401A10+2FA↑j
.text:00401D72                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401D79                 call    ds:libintl_gettext
.text:00401D7F                 mov     edx, [esp+5Ch+var_18]
.text:00401D83                 mov     edi, [esp+5Ch+arg_4]
.text:00401D87                 mov     ecx, ds:_iob
.text:00401D8D                 mov     esi, [edx]
.text:00401D8F                 add     ecx, 40h ; '@'
.text:00401D92                 mov     [esp+5Ch+var_50], esi
.text:00401D96                 mov     ebx, [edi]
.text:00401D98                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D9C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D9F                 mov     [esp+5Ch+MaxCount], ebx
.text:00401DA3                 call    fprintf
.text:00401DA8                 jmp     short loc_401D50
.text:00401DA8 ; ---------------------------------------------------------------------------
.text:00401DAA                 align 10h
.text:00401DB0
.text:00401DB0 loc_401DB0:                             ; CODE XREF: sub_401A10+28C↑j
.text:00401DB0                 mov     ebx, [esp+5Ch+var_18]
.text:00401DB4                 cmp     dword ptr [ebx+4], 1
.text:00401DB8                 jnz     loc_401CB3
.text:00401DBE                 cmp     eax, [esp+5Ch+arg_0]
.text:00401DC2                 jge     short loc_401DD9
.text:00401DC4                 mov     ebx, [esp+5Ch+arg_4]
.text:00401DC8                 lea     edi, [ecx+2]
.text:00401DCB                 mov     [ebp+0], edi
.text:00401DCE                 mov     esi, [ebx+eax*4]
.text:00401DD1                 mov     [ebp+0Ch], esi
.text:00401DD4                 jmp     loc_401CB3
.text:00401DD9 ; ---------------------------------------------------------------------------
.text:00401DD9
.text:00401DD9 loc_401DD9:                             ; CODE XREF: sub_401A10+3B2↑j
.text:00401DD9                 mov     edx, [esp+5Ch+var_14]
.text:00401DDD                 test    edx, edx
.text:00401DDF                 jnz     short loc_401E10
.text:00401DE1
.text:00401DE1 loc_401DE1:                             ; CODE XREF: sub_401A10+437↓j
.text:00401DE1                 mov     edx, [ebp+14h]
.text:00401DE4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401DE7                 call    strlen
.text:00401DEC                 add     [ebp+14h], eax
.text:00401DEF                 mov     eax, [esp+5Ch+var_18]
.text:00401DF3                 mov     edi, [eax+0Ch]
.text:00401DF6                 mov     [ebp+8], edi
.text:00401DF9
.text:00401DF9 loc_401DF9:                             ; CODE XREF: sub_401A10+7C2↓j
.text:00401DF9                 mov     ebp, [esp+5Ch+Str]
.text:00401DFD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401E01                 setnz   bl
.text:00401E04                 movzx   esi, bl
.text:00401E07                 lea     eax, [esi+esi*4+3Ah]
.text:00401E0B                 jmp     loc_401B67
.text:00401E10 ; ---------------------------------------------------------------------------
.text:00401E10
.text:00401E10 loc_401E10:                             ; CODE XREF: sub_401A10+3CF↑j
.text:00401E10                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401E17                 call    ds:libintl_gettext
.text:00401E1D                 mov     ecx, [ebp+0]
.text:00401E20                 mov     esi, [esp+5Ch+arg_4]
.text:00401E24                 mov     ebx, [esi+ecx*4-4]
.text:00401E28                 mov     ecx, ds:_iob
.text:00401E2E                 mov     [esp+5Ch+var_50], ebx
.text:00401E32                 mov     edi, [esi]
.text:00401E34                 add     ecx, 40h ; '@'
.text:00401E37                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E3B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401E3E                 mov     [esp+5Ch+MaxCount], edi
.text:00401E42                 call    fprintf
.text:00401E47                 jmp     short loc_401DE1
.text:00401E47 ; ---------------------------------------------------------------------------
.text:00401E49                 align 10h
.text:00401E50
.text:00401E50 loc_401E50:                             ; CODE XREF: sub_401A10+21E↑j
.text:00401E50                                         ; sub_401A10+27A↑j
.text:00401E50                 mov     eax, [esp+5Ch+arg_14]
.text:00401E54                 test    eax, eax
.text:00401E56                 jz      short loc_401E86
.text:00401E58                 mov     ebx, [ebp+0]
.text:00401E5B                 mov     esi, [esp+5Ch+arg_4]
.text:00401E5F                 mov     edi, [esi+ebx*4]
.text:00401E62                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401E66                 jz      short loc_401E89
.text:00401E68                 mov     ecx, [ebp+14h]
.text:00401E6B                 mov     edx, [esp+5Ch+Str]
.text:00401E6F                 movsx   ebx, byte ptr [ecx]
.text:00401E72                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401E75                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401E79                 call    strchr
.text:00401E7E                 test    eax, eax
.text:00401E80                 jnz     loc_401F30
.text:00401E86
.text:00401E86 loc_401E86:                             ; CODE XREF: sub_401A10+446↑j
.text:00401E86                 mov     ebx, [ebp+0]
.text:00401E89
.text:00401E89 loc_401E89:                             ; CODE XREF: sub_401A10+456↑j
.text:00401E89                 mov     eax, [esp+5Ch+var_14]
.text:00401E8D                 test    eax, eax
.text:00401E8F                 jz      short loc_401EE1
.text:00401E91                 mov     esi, [esp+5Ch+arg_4]
.text:00401E95                 mov     edi, [esi+ebx*4]
.text:00401E98                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401E9C                 jz      short loc_401EFA
.text:00401E9E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401EA5                 call    ds:libintl_gettext
.text:00401EAB                 mov     edi, [ebp+14h]
.text:00401EAE                 mov     [esp+5Ch+var_4C], edi
.text:00401EB2                 mov     ebx, [ebp+0]
.text:00401EB5                 mov     edi, [esp+5Ch+arg_4]
.text:00401EB9                 mov     esi, [edi+ebx*4]
.text:00401EBC                 movsx   ecx, byte ptr [esi]
.text:00401EBF                 mov     esi, ds:_iob
.text:00401EC5                 add     esi, 40h ; '@'
.text:00401EC8                 mov     [esp+5Ch+var_50], ecx
.text:00401ECC                 mov     ebx, [edi]
.text:00401ECE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401ED2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401ED5                 mov     [esp+5Ch+MaxCount], ebx
.text:00401ED9                 call    fprintf
.text:00401EDE
.text:00401EDE loc_401EDE:                             ; CODE XREF: sub_401A10+51D↓j
.text:00401EDE                 mov     ebx, [ebp+0]
.text:00401EE1
.text:00401EE1 loc_401EE1:                             ; CODE XREF: sub_401A10+47F↑j
.text:00401EE1                 mov     dword ptr [ebp+14h], offset dword_4018C0
.text:00401EE8                 lea     edx, [ebx+1]
.text:00401EEB                 mov     [ebp+0], edx
.text:00401EEE
.text:00401EEE loc_401EEE:                             ; CODE XREF: sub_401A10+999↓j
.text:00401EEE                 mov     dword ptr [ebp+8], 0
.text:00401EF5                 jmp     loc_401D68
.text:00401EFA ; ---------------------------------------------------------------------------
.text:00401EFA
.text:00401EFA loc_401EFA:                             ; CODE XREF: sub_401A10+48C↑j
.text:00401EFA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00401F01                 call    ds:libintl_gettext
.text:00401F07                 mov     ecx, [ebp+14h]
.text:00401F0A                 mov     edi, [esp+5Ch+arg_4]
.text:00401F0E                 mov     edx, ds:_iob
.text:00401F14                 mov     [esp+5Ch+var_50], ecx
.text:00401F18                 mov     ebx, [edi]
.text:00401F1A                 add     edx, 40h ; '@'
.text:00401F1D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401F21                 mov     [esp+5Ch+MaxCount], ebx
.text:00401F25                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401F28                 call    fprintf
.text:00401F2D                 jmp     short loc_401EDE
.text:00401F2D ; ---------------------------------------------------------------------------
.text:00401F2F                 align 10h
.text:00401F30
.text:00401F30 loc_401F30:                             ; CODE XREF: sub_401A10+196↑j
.text:00401F30                                         ; sub_401A10+1B5↑j ...
.text:00401F30                 mov     esi, [ebp+14h]
.text:00401F33                 movzx   ebx, byte ptr [esi]
.text:00401F36                 inc     esi
.text:00401F37                 mov     [ebp+14h], esi
.text:00401F3A                 mov     ecx, [esp+5Ch+Str]
.text:00401F3E                 movsx   esi, bl
.text:00401F41                 mov     [esp+5Ch+Str2], esi ; Val
.text:00401F45                 mov     edi, esi
.text:00401F47                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401F4A                 call    strchr
.text:00401F4F                 mov     ecx, [ebp+14h]
.text:00401F52                 cmp     byte ptr [ecx], 0
.text:00401F55                 jnz     short loc_401F5A
.text:00401F57                 inc     dword ptr [ebp+0]
.text:00401F5A
.text:00401F5A loc_401F5A:                             ; CODE XREF: sub_401A10+545↑j
.text:00401F5A                 test    eax, eax
.text:00401F5C                 jz      loc_402340
.text:00401F62                 cmp     bl, 3Ah ; ':'
.text:00401F65                 jz      loc_402340
.text:00401F6B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00401F6E                 jz      loc_402026
.text:00401F74                 movzx   edx, byte ptr [eax+1]
.text:00401F78
.text:00401F78 loc_401F78:                             ; CODE XREF: sub_401A10+61D↓j
.text:00401F78                 cmp     dl, 3Ah ; ':'
.text:00401F7B                 jz      short loc_401F84
.text:00401F7D
.text:00401F7D loc_401F7D:                             ; CODE XREF: sub_401A10+590↓j
.text:00401F7D                 mov     eax, esi
.text:00401F7F                 jmp     loc_401B67
.text:00401F84 ; ---------------------------------------------------------------------------
.text:00401F84
.text:00401F84 loc_401F84:                             ; CODE XREF: sub_401A10+56B↑j
.text:00401F84                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00401F88                 jz      loc_402011
.text:00401F8E                 cmp     byte ptr [ecx], 0
.text:00401F91                 jz      short loc_401FA2
.text:00401F93
.text:00401F93 loc_401F93:                             ; CODE XREF: sub_401A10+604↓j
.text:00401F93                 inc     dword ptr [ebp+0]
.text:00401F96                 mov     [ebp+0Ch], ecx
.text:00401F99
.text:00401F99 loc_401F99:                             ; CODE XREF: sub_401A10+5AB↓j
.text:00401F99                                         ; sub_401A10+5C6↓j ...
.text:00401F99                 mov     dword ptr [ebp+14h], 0
.text:00401FA0                 jmp     short loc_401F7D
.text:00401FA2 ; ---------------------------------------------------------------------------
.text:00401FA2
.text:00401FA2 loc_401FA2:                             ; CODE XREF: sub_401A10+581↑j
.text:00401FA2                 mov     ecx, [ebp+0]
.text:00401FA5                 cmp     ecx, [esp+5Ch+arg_0]
.text:00401FA9                 jz      short loc_401FBD
.text:00401FAB                 mov     eax, [esp+5Ch+arg_4]
.text:00401FAF                 lea     edx, [ecx+1]
.text:00401FB2                 mov     [ebp+0], edx
.text:00401FB5                 mov     ebx, [eax+ecx*4]
.text:00401FB8                 mov     [ebp+0Ch], ebx
.text:00401FBB                 jmp     short loc_401F99
.text:00401FBD ; ---------------------------------------------------------------------------
.text:00401FBD
.text:00401FBD loc_401FBD:                             ; CODE XREF: sub_401A10+599↑j
.text:00401FBD                 mov     ecx, [esp+5Ch+var_14]
.text:00401FC1                 test    ecx, ecx
.text:00401FC3                 jnz     short loc_401FDF
.text:00401FC5
.text:00401FC5 loc_401FC5:                             ; CODE XREF: sub_401A10+5FF↓j
.text:00401FC5                 mov     [ebp+8], edi
.text:00401FC8                 mov     edi, [esp+5Ch+Str]
.text:00401FCC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00401FCF                 jz      short loc_401FD8
.text:00401FD1                 mov     esi, 3Fh ; '?'
.text:00401FD6                 jmp     short loc_401F99
.text:00401FD8 ; ---------------------------------------------------------------------------
.text:00401FD8
.text:00401FD8 loc_401FD8:                             ; CODE XREF: sub_401A10+5BF↑j
.text:00401FD8                 mov     esi, 3Ah ; ':'
.text:00401FDD                 jmp     short loc_401F99
.text:00401FDF ; ---------------------------------------------------------------------------
.text:00401FDF
.text:00401FDF loc_401FDF:                             ; CODE XREF: sub_401A10+5B3↑j
.text:00401FDF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00401FE6                 call    ds:libintl_gettext
.text:00401FEC                 mov     [esp+5Ch+var_50], edi
.text:00401FF0                 mov     ebx, [esp+5Ch+arg_4]
.text:00401FF4                 mov     edx, ds:_iob
.text:00401FFA                 mov     esi, [ebx]
.text:00401FFC                 add     edx, 40h ; '@'
.text:00401FFF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402003                 mov     [esp+5Ch+MaxCount], esi
.text:00402007                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040200A                 call    fprintf
.text:0040200F                 jmp     short loc_401FC5
.text:00402011 ; ---------------------------------------------------------------------------
.text:00402011
.text:00402011 loc_402011:                             ; CODE XREF: sub_401A10+578↑j
.text:00402011                 cmp     byte ptr [ecx], 0
.text:00402014                 jnz     loc_401F93
.text:0040201A                 mov     dword ptr [ebp+0Ch], 0
.text:00402021                 jmp     loc_401F99
.text:00402026 ; ---------------------------------------------------------------------------
.text:00402026
.text:00402026 loc_402026:                             ; CODE XREF: sub_401A10+55E↑j
.text:00402026                 movzx   edx, byte ptr [eax+1]
.text:0040202A                 cmp     dl, 3Bh ; ';'
.text:0040202D                 jnz     loc_401F78
.text:00402033                 mov     [esp+5Ch+var_2C], 0
.text:0040203B                 mov     [esp+5Ch+var_30], 0
.text:00402043                 mov     [esp+5Ch+var_34], 0
.text:0040204B                 mov     [esp+5Ch+var_38], 0
.text:00402053                 cmp     byte ptr [ecx], 0
.text:00402056                 jz      loc_4022CB
.text:0040205C                 inc     dword ptr [ebp+0]
.text:0040205F                 mov     [ebp+0Ch], ecx
.text:00402062
.text:00402062 loc_402062:                             ; CODE XREF: sub_401A10+8D4↓j
.text:00402062                 mov     edi, [ebp+0Ch]
.text:00402065                 mov     [ebp+14h], edi
.text:00402068                 movzx   eax, byte ptr [edi]
.text:0040206B                 test    al, al
.text:0040206D                 jz      short loc_40207F
.text:0040206F                 cmp     al, 3Dh ; '='
.text:00402071                 jz      short loc_40207F
.text:00402073
.text:00402073 loc_402073:                             ; CODE XREF: sub_401A10+66D↓j
.text:00402073                 inc     edi
.text:00402074                 movzx   eax, byte ptr [edi]
.text:00402077                 test    al, al
.text:00402079                 jz      short loc_40207F
.text:0040207B                 cmp     al, 3Dh ; '='
.text:0040207D                 jnz     short loc_402073
.text:0040207F
.text:0040207F loc_40207F:                             ; CODE XREF: sub_401A10+65D↑j
.text:0040207F                                         ; sub_401A10+661↑j ...
.text:0040207F                 mov     [esp+5Ch+var_3C], 0
.text:00402087                 mov     esi, [esp+5Ch+arg_C]
.text:0040208B                 mov     eax, [esi]
.text:0040208D                 test    eax, eax
.text:0040208F                 jz      loc_402210
.text:00402095                 mov     ecx, eax
.text:00402097
.text:00402097 loc_402097:                             ; CODE XREF: sub_401A10+6B3↓j
.text:00402097                 mov     ebx, [ebp+14h]
.text:0040209A                 mov     eax, edi
.text:0040209C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040209F                 sub     eax, ebx
.text:004020A1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004020A5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004020A9                 call    strncmp
.text:004020AE                 test    eax, eax
.text:004020B0                 jz      loc_402277
.text:004020B6
.text:004020B6 loc_4020B6:                             ; CODE XREF: sub_401A10+88C↓j
.text:004020B6                                         ; sub_401A10+89D↓j
.text:004020B6                 inc     [esp+5Ch+var_3C]
.text:004020BA                 add     esi, 10h
.text:004020BD                 mov     edx, [esi]
.text:004020BF                 test    edx, edx
.text:004020C1                 mov     ecx, edx
.text:004020C3                 jnz     short loc_402097
.text:004020C5
.text:004020C5 loc_4020C5:                             ; CODE XREF: sub_401A10+8B6↓j
.text:004020C5                 mov     esi, [esp+5Ch+var_34]
.text:004020C9                 test    esi, esi
.text:004020CB                 jz      short loc_4020D9
.text:004020CD                 mov     ebx, [esp+5Ch+var_30]
.text:004020D1                 test    ebx, ebx
.text:004020D3                 jz      loc_402221
.text:004020D9
.text:004020D9 loc_4020D9:                             ; CODE XREF: sub_401A10+6BB↑j
.text:004020D9                 mov     esi, [esp+5Ch+var_2C]
.text:004020DD                 test    esi, esi
.text:004020DF                 jz      loc_402210
.text:004020E5                 cmp     byte ptr [edi], 0
.text:004020E8                 jz      loc_402190
.text:004020EE                 mov     ecx, [esp+5Ch+var_2C]
.text:004020F2                 mov     ebx, [ecx+4]
.text:004020F5                 test    ebx, ebx
.text:004020F7                 jz      short loc_402138
.text:004020F9                 lea     edx, [edi+1]
.text:004020FC                 mov     [ebp+0Ch], edx
.text:004020FF
.text:004020FF loc_4020FF:                             ; CODE XREF: sub_401A10+788↓j
.text:004020FF                                         ; sub_401A10+7A7↓j
.text:004020FF                 mov     edi, [ebp+14h]
.text:00402102                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402105                 call    strlen
.text:0040210A                 add     [ebp+14h], eax
.text:0040210D                 mov     eax, [esp+5Ch+arg_10]
.text:00402111                 test    eax, eax
.text:00402113                 jz      short loc_402120
.text:00402115                 mov     edx, [esp+5Ch+var_38]
.text:00402119                 mov     ebp, [esp+5Ch+arg_10]
.text:0040211D                 mov     [ebp+0], edx
.text:00402120
.text:00402120 loc_402120:                             ; CODE XREF: sub_401A10+703↑j
.text:00402120                 mov     eax, [esp+5Ch+var_2C]
.text:00402124                 mov     ecx, [eax+8]
.text:00402127                 test    ecx, ecx
.text:00402129                 jnz     loc_401CEA
.text:0040212F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402133                 jmp     loc_401CE2
.text:00402138 ; ---------------------------------------------------------------------------
.text:00402138
.text:00402138 loc_402138:                             ; CODE XREF: sub_401A10+6E7↑j
.text:00402138                 mov     eax, [esp+5Ch+var_14]
.text:0040213C                 test    eax, eax
.text:0040213E                 jnz     short loc_402153
.text:00402140
.text:00402140 loc_402140:                             ; CODE XREF: sub_401A10+779↓j
.text:00402140                 mov     ecx, [ebp+14h]
.text:00402143                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402146                 call    strlen
.text:0040214B                 add     [ebp+14h], eax
.text:0040214E                 jmp     loc_401D68
.text:00402153 ; ---------------------------------------------------------------------------
.text:00402153
.text:00402153 loc_402153:                             ; CODE XREF: sub_401A10+72E↑j
.text:00402153                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040215A                 call    ds:libintl_gettext
.text:00402160                 mov     edx, [esp+5Ch+var_2C]
.text:00402164                 mov     ebx, [esp+5Ch+arg_4]
.text:00402168                 mov     edi, [edx]
.text:0040216A                 mov     [esp+5Ch+var_50], edi
.text:0040216E                 mov     edi, ds:_iob
.text:00402174                 mov     esi, [ebx]
.text:00402176                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040217A                 add     edi, 40h ; '@'
.text:0040217D                 mov     [esp+5Ch+MaxCount], esi
.text:00402181                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402184                 call    fprintf
.text:00402189                 jmp     short loc_402140
.text:00402189 ; ---------------------------------------------------------------------------
.text:0040218B                 align 10h
.text:00402190
.text:00402190 loc_402190:                             ; CODE XREF: sub_401A10+6D8↑j
.text:00402190                 mov     esi, [esp+5Ch+var_2C]
.text:00402194                 cmp     dword ptr [esi+4], 1
.text:00402198                 jnz     loc_4020FF
.text:0040219E                 mov     ecx, [ebp+0]
.text:004021A1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004021A5                 jge     short loc_4021BC
.text:004021A7                 mov     eax, [esp+5Ch+arg_4]
.text:004021AB                 lea     ebx, [ecx+1]
.text:004021AE                 mov     [ebp+0], ebx
.text:004021B1                 mov     edi, [eax+ecx*4]
.text:004021B4                 mov     [ebp+0Ch], edi
.text:004021B7                 jmp     loc_4020FF
.text:004021BC ; ---------------------------------------------------------------------------
.text:004021BC
.text:004021BC loc_4021BC:                             ; CODE XREF: sub_401A10+795↑j
.text:004021BC                 mov     edx, [esp+5Ch+var_14]
.text:004021C0                 test    edx, edx
.text:004021C2                 jnz     short loc_4021D7
.text:004021C4
.text:004021C4 loc_4021C4:                             ; CODE XREF: sub_401A10+7FE↓j
.text:004021C4                 mov     edx, [ebp+14h]
.text:004021C7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004021CA                 call    strlen
.text:004021CF                 add     [ebp+14h], eax
.text:004021D2                 jmp     loc_401DF9
.text:004021D7 ; ---------------------------------------------------------------------------
.text:004021D7
.text:004021D7 loc_4021D7:                             ; CODE XREF: sub_401A10+7B2↑j
.text:004021D7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004021DE                 call    ds:libintl_gettext
.text:004021E4                 mov     ecx, [ebp+0]
.text:004021E7                 mov     ebx, [esp+5Ch+arg_4]
.text:004021EB                 mov     edi, [ebx+ecx*4-4]
.text:004021EF                 mov     ecx, ds:_iob
.text:004021F5                 mov     [esp+5Ch+var_50], edi
.text:004021F9                 mov     esi, [ebx]
.text:004021FB                 add     ecx, 40h ; '@'
.text:004021FE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402202                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402205                 mov     [esp+5Ch+MaxCount], esi
.text:00402209                 call    fprintf
.text:0040220E                 jmp     short loc_4021C4
.text:00402210 ; ---------------------------------------------------------------------------
.text:00402210
.text:00402210 loc_402210:                             ; CODE XREF: sub_401A10+67F↑j
.text:00402210                                         ; sub_401A10+6CF↑j
.text:00402210                 mov     dword ptr [ebp+14h], 0
.text:00402217                 mov     eax, 57h ; 'W'
.text:0040221C                 jmp     loc_401B67
.text:00402221 ; ---------------------------------------------------------------------------
.text:00402221
.text:00402221 loc_402221:                             ; CODE XREF: sub_401A10+6C3↑j
.text:00402221                 mov     edi, [esp+5Ch+var_14]
.text:00402225                 test    edi, edi
.text:00402227                 jnz     short loc_40223F
.text:00402229
.text:00402229 loc_402229:                             ; CODE XREF: sub_401A10+865↓j
.text:00402229                 mov     edx, [ebp+14h]
.text:0040222C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040222F                 call    strlen
.text:00402234                 add     [ebp+14h], eax
.text:00402237                 inc     dword ptr [ebp+0]
.text:0040223A                 jmp     loc_401D68
.text:0040223F ; ---------------------------------------------------------------------------
.text:0040223F
.text:0040223F loc_40223F:                             ; CODE XREF: sub_401A10+817↑j
.text:0040223F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402246                 call    ds:libintl_gettext
.text:0040224C                 mov     ecx, [ebp+0]
.text:0040224F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402253                 mov     edi, [ebx+ecx*4]
.text:00402256                 mov     ecx, ds:_iob
.text:0040225C                 mov     [esp+5Ch+var_50], edi
.text:00402260                 mov     esi, [ebx]
.text:00402262                 add     ecx, 40h ; '@'
.text:00402265                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402269                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040226C                 mov     [esp+5Ch+MaxCount], esi
.text:00402270                 call    fprintf
.text:00402275                 jmp     short loc_402229
.text:00402277 ; ---------------------------------------------------------------------------
.text:00402277
.text:00402277 loc_402277:                             ; CODE XREF: sub_401A10+6A0↑j
.text:00402277                 mov     edx, [ebp+14h]
.text:0040227A                 mov     ebx, edi
.text:0040227C                 mov     ecx, [esi]
.text:0040227E                 sub     ebx, edx
.text:00402280                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402283                 call    strlen
.text:00402288                 cmp     ebx, eax
.text:0040228A                 jz      short loc_4022B2
.text:0040228C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402290                 test    ebx, ebx
.text:00402292                 jz      short loc_4022A1
.text:00402294                 mov     [esp+5Ch+var_34], 1
.text:0040229C                 jmp     loc_4020B6
.text:004022A1 ; ---------------------------------------------------------------------------
.text:004022A1
.text:004022A1 loc_4022A1:                             ; CODE XREF: sub_401A10+882↑j
.text:004022A1                 mov     [esp+5Ch+var_2C], esi
.text:004022A5                 mov     ecx, [esp+5Ch+var_3C]
.text:004022A9                 mov     [esp+5Ch+var_38], ecx
.text:004022AD                 jmp     loc_4020B6
.text:004022B2 ; ---------------------------------------------------------------------------
.text:004022B2
.text:004022B2 loc_4022B2:                             ; CODE XREF: sub_401A10+87A↑j
.text:004022B2                 mov     [esp+5Ch+var_2C], esi
.text:004022B6                 mov     eax, [esp+5Ch+var_3C]
.text:004022BA                 mov     [esp+5Ch+var_30], 1
.text:004022C2                 mov     [esp+5Ch+var_38], eax
.text:004022C6                 jmp     loc_4020C5
.text:004022CB ; ---------------------------------------------------------------------------
.text:004022CB
.text:004022CB loc_4022CB:                             ; CODE XREF: sub_401A10+646↑j
.text:004022CB                 mov     edx, [ebp+0]
.text:004022CE                 cmp     edx, [esp+5Ch+arg_0]
.text:004022D2                 jz      short loc_4022E9
.text:004022D4                 mov     ebx, [esp+5Ch+arg_4]
.text:004022D8                 lea     esi, [edx+1]
.text:004022DB                 mov     [ebp+0], esi
.text:004022DE                 mov     edi, [ebx+edx*4]
.text:004022E1                 mov     [ebp+0Ch], edi
.text:004022E4                 jmp     loc_402062
.text:004022E9 ; ---------------------------------------------------------------------------
.text:004022E9
.text:004022E9 loc_4022E9:                             ; CODE XREF: sub_401A10+8C2↑j
.text:004022E9                 mov     edi, [esp+5Ch+var_14]
.text:004022ED                 test    edi, edi
.text:004022EF                 jnz     short loc_40230C
.text:004022F1
.text:004022F1 loc_4022F1:                             ; CODE XREF: sub_401A10+92C↓j
.text:004022F1                 mov     [ebp+8], esi
.text:004022F4                 mov     ebp, [esp+5Ch+Str]
.text:004022F8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004022FC                 jz      short loc_402308
.text:004022FE                 mov     bl, 3Fh ; '?'
.text:00402300
.text:00402300 loc_402300:                             ; CODE XREF: sub_401A10+8FA↓j
.text:00402300                 movsx   eax, bl
.text:00402303                 jmp     loc_401B67
.text:00402308 ; ---------------------------------------------------------------------------
.text:00402308
.text:00402308 loc_402308:                             ; CODE XREF: sub_401A10+8EC↑j
.text:00402308                 mov     bl, 3Ah ; ':'
.text:0040230A                 jmp     short loc_402300
.text:0040230C ; ---------------------------------------------------------------------------
.text:0040230C
.text:0040230C loc_40230C:                             ; CODE XREF: sub_401A10+8DF↑j
.text:0040230C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402313                 call    ds:libintl_gettext
.text:00402319                 mov     [esp+5Ch+var_50], esi
.text:0040231D                 mov     edx, [esp+5Ch+arg_4]
.text:00402321                 mov     ecx, ds:_iob
.text:00402327                 mov     ebx, [edx]
.text:00402329                 add     ecx, 40h ; '@'
.text:0040232C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402330                 mov     [esp+5Ch+MaxCount], ebx
.text:00402334                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402337                 call    fprintf
.text:0040233C                 jmp     short loc_4022F1
.text:0040233C ; ---------------------------------------------------------------------------
.text:0040233E                 align 10h
.text:00402340
.text:00402340 loc_402340:                             ; CODE XREF: sub_401A10+54C↑j
.text:00402340                                         ; sub_401A10+555↑j
.text:00402340                 mov     eax, [esp+5Ch+var_14]
.text:00402344                 test    eax, eax
.text:00402346                 jz      short loc_40237F
.text:00402348                 mov     ebx, [ebp+1Ch]
.text:0040234B                 test    ebx, ebx
.text:0040234D                 jz      short loc_402387
.text:0040234F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402356
.text:00402356 loc_402356:                             ; CODE XREF: sub_401A10+97E↓j
.text:00402356                 call    ds:libintl_gettext
.text:0040235C                 mov     [esp+5Ch+var_50], esi
.text:00402360                 mov     ebx, [esp+5Ch+arg_4]
.text:00402364                 mov     edx, ds:_iob
.text:0040236A                 mov     esi, [ebx]
.text:0040236C                 add     edx, 40h ; '@'
.text:0040236F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402373                 mov     [esp+5Ch+MaxCount], esi
.text:00402377                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040237A                 call    fprintf
.text:0040237F
.text:0040237F loc_40237F:                             ; CODE XREF: sub_401A10+936↑j
.text:0040237F                 mov     [ebp+8], edi
.text:00402382                 jmp     loc_401D68
.text:00402387 ; ---------------------------------------------------------------------------
.text:00402387
.text:00402387 loc_402387:                             ; CODE XREF: sub_401A10+93D↑j
.text:00402387                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040238E                 jmp     short loc_402356
.text:00402390 ; ---------------------------------------------------------------------------
.text:00402390
.text:00402390 loc_402390:                             ; CODE XREF: sub_401A10+26E↑j
.text:00402390                 mov     edi, [esp+5Ch+var_14]
.text:00402394                 test    edi, edi
.text:00402396                 jnz     short loc_4023AE
.text:00402398
.text:00402398 loc_402398:                             ; CODE XREF: sub_401A10+9D4↓j
.text:00402398                 mov     edx, [ebp+14h]
.text:0040239B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040239E                 call    strlen
.text:004023A3                 add     [ebp+14h], eax
.text:004023A6                 inc     dword ptr [ebp+0]
.text:004023A9                 jmp     loc_401EEE
.text:004023AE ; ---------------------------------------------------------------------------
.text:004023AE
.text:004023AE loc_4023AE:                             ; CODE XREF: sub_401A10+986↑j
.text:004023AE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:004023B5                 call    ds:libintl_gettext
.text:004023BB                 mov     ebx, [ebp+0]
.text:004023BE                 mov     edi, [esp+5Ch+arg_4]
.text:004023C2                 mov     ecx, [edi+ebx*4]
.text:004023C5                 mov     ebx, ds:_iob
.text:004023CB                 mov     [esp+5Ch+var_50], ecx
.text:004023CF                 mov     esi, [edi]
.text:004023D1                 add     ebx, 40h ; '@'
.text:004023D4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004023D8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004023DB                 mov     [esp+5Ch+MaxCount], esi
.text:004023DF                 call    fprintf
.text:004023E4                 jmp     short loc_402398
.text:004023E6 ; ---------------------------------------------------------------------------
.text:004023E6
.text:004023E6 loc_4023E6:                             ; CODE XREF: sub_401A10+246↑j
.text:004023E6                 mov     ecx, [ebp+14h]
.text:004023E9                 mov     ebx, edi
.text:004023EB                 mov     edx, [esi]
.text:004023ED                 sub     ebx, ecx
.text:004023EF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004023F2                 call    strlen
.text:004023F7                 cmp     ebx, eax
.text:004023F9                 jz      short loc_402451
.text:004023FB                 mov     ebx, [esp+5Ch+var_18]
.text:004023FF                 test    ebx, ebx
.text:00402401                 jz      short loc_402440
.text:00402403                 mov     edx, [esp+5Ch+arg_14]
.text:00402407                 test    edx, edx
.text:00402409                 jnz     short loc_402417
.text:0040240B                 mov     ecx, [esp+5Ch+var_18]
.text:0040240F                 mov     ebx, [esi+4]
.text:00402412                 cmp     [ecx+4], ebx
.text:00402415                 jz      short loc_402424
.text:00402417
.text:00402417 loc_402417:                             ; CODE XREF: sub_401A10+9F9↑j
.text:00402417                                         ; sub_401A10+A1A↓j ...
.text:00402417                 mov     [esp+5Ch+var_20], 1
.text:0040241F                 jmp     loc_401C5C
.text:00402424 ; ---------------------------------------------------------------------------
.text:00402424
.text:00402424 loc_402424:                             ; CODE XREF: sub_401A10+A05↑j
.text:00402424                 mov     edx, [esi+8]
.text:00402427                 cmp     [ecx+8], edx
.text:0040242A                 jnz     short loc_402417
.text:0040242C                 mov     ebx, [esi+0Ch]
.text:0040242F                 cmp     [ecx+0Ch], ebx
.text:00402432                 jnz     short loc_402417
.text:00402434                 jmp     loc_401C5C
.text:00402434 ; ---------------------------------------------------------------------------
.text:00402439                 align 10h
.text:00402440
.text:00402440 loc_402440:                             ; CODE XREF: sub_401A10+9F1↑j
.text:00402440                 mov     [esp+5Ch+var_18], esi
.text:00402444                 mov     eax, [esp+5Ch+var_28]
.text:00402448                 mov     [esp+5Ch+var_24], eax
.text:0040244C                 jmp     loc_401C5C
.text:00402451 ; ---------------------------------------------------------------------------
.text:00402451
.text:00402451 loc_402451:                             ; CODE XREF: sub_401A10+9E9↑j
.text:00402451                 mov     [esp+5Ch+var_18], esi
.text:00402455                 mov     ecx, [esp+5Ch+var_28]
.text:00402459                 mov     [esp+5Ch+var_1C], 1
.text:00402461                 mov     [esp+5Ch+var_24], ecx
.text:00402465                 jmp     loc_401C70
.text:0040246A ; ---------------------------------------------------------------------------
.text:0040246A
.text:0040246A loc_40246A:                             ; CODE XREF: sub_401A10+1BF↑j
.text:0040246A                 mov     eax, [esp+5Ch+Str]
.text:0040246E                 movsx   esi, dl
.text:00402471                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402475                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402478                 call    strchr
.text:0040247D                 test    eax, eax
.text:0040247F                 jnz     loc_401F30
.text:00402485                 jmp     loc_401BD5
.text:0040248A ; ---------------------------------------------------------------------------
.text:0040248A
.text:0040248A loc_40248A:                             ; CODE XREF: sub_401A10+17C↑j
.text:0040248A                 mov     ecx, 1
.text:0040248F                 jmp     loc_401B92
.text:00402494 ; ---------------------------------------------------------------------------
.text:00402494
.text:00402494 loc_402494:                             ; CODE XREF: sub_401A10+D4↑j
.text:00402494                                         ; sub_401A10+130↑j
.text:00402494                 mov     eax, [ebp+20h]
.text:00402497                 cmp     eax, [ebp+24h]
.text:0040249A                 jz      loc_401B70
.text:004024A0                 mov     [ebp+0], eax
.text:004024A3                 jmp     loc_401B70
.text:004024A8 ; ---------------------------------------------------------------------------
.text:004024A8
.text:004024A8 loc_4024A8:                             ; CODE XREF: sub_401A10+FE↑j
.text:004024A8                 mov     [ebp+20h], eax
.text:004024AB                 jmp     loc_401B30
.text:004024B0 ; ---------------------------------------------------------------------------
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: sub_401A10+CA↑j
.text:004024B0                 mov     edx, [ebp+20h]
.text:004024B3                 mov     eax, [ebp+24h]
.text:004024B6                 cmp     edx, eax
.text:004024B8                 jz      short loc_402530
.text:004024BA                 cmp     eax, ebx
.text:004024BC                 jz      short loc_4024D1
.text:004024BE                 mov     [esp+5Ch+Str2], ebp
.text:004024C2                 mov     ebx, [esp+5Ch+arg_4]
.text:004024C6                 mov     [esp+5Ch+Str1], ebx
.text:004024C9                 call    sub_4026C0
.text:004024CE                 mov     ebx, [ebp+0]
.text:004024D1
.text:004024D1 loc_4024D1:                             ; CODE XREF: sub_401A10+AAC↑j
.text:004024D1                                         ; sub_401A10+B22↓j ...
.text:004024D1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004024D5                 jge     short loc_402520
.text:004024D7                 mov     esi, [esp+5Ch+arg_4]
.text:004024DB                 mov     eax, [esi+ebx*4]
.text:004024DE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004024E1                 jz      short loc_402528
.text:004024E3                 lea     esi, [esi+0]
.text:004024E9                 lea     edi, [edi+0]
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_401A10+AFC↓j
.text:004024F0                                         ; sub_401A10+B1C↓j
.text:004024F0                 lea     eax, [ebx+1]
.text:004024F3                 mov     ebx, eax
.text:004024F5                 mov     [ebp+0], eax
.text:004024F8                 cmp     eax, [esp+5Ch+arg_0]
.text:004024FC                 jge     short loc_402520
.text:004024FE                 mov     edi, [esp+5Ch+arg_4]
.text:00402502                 mov     edx, [edi+eax*4]
.text:00402505                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402508                 jz      short loc_402510
.text:0040250A
.text:0040250A loc_40250A:                             ; CODE XREF: sub_401A10+B04↓j
.text:0040250A                 mov     ebx, eax
.text:0040250C                 jmp     short loc_4024F0
.text:0040250C ; ---------------------------------------------------------------------------
.text:0040250E                 align 10h
.text:00402510
.text:00402510 loc_402510:                             ; CODE XREF: sub_401A10+AF8↑j
.text:00402510                 cmp     byte ptr [edx+1], 0
.text:00402514                 jz      short loc_40250A
.text:00402516                 lea     esi, [esi+0]
.text:00402519                 lea     edi, [edi+0]
.text:00402520
.text:00402520 loc_402520:                             ; CODE XREF: sub_401A10+AC5↑j
.text:00402520                                         ; sub_401A10+AEC↑j ...
.text:00402520                 mov     [ebp+24h], ebx
.text:00402523                 jmp     loc_401AE0
.text:00402528 ; ---------------------------------------------------------------------------
.text:00402528
.text:00402528 loc_402528:                             ; CODE XREF: sub_401A10+AD1↑j
.text:00402528                 cmp     byte ptr [eax+1], 0
.text:0040252C                 jz      short loc_4024F0
.text:0040252E                 jmp     short loc_402520
.text:00402530 ; ---------------------------------------------------------------------------
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: sub_401A10+AA8↑j
.text:00402530                 cmp     edx, ebx
.text:00402532                 jz      short loc_4024D1
.text:00402534                 mov     [ebp+20h], ebx
.text:00402537                 jmp     short loc_4024D1
.text:00402539 ; ---------------------------------------------------------------------------
.text:00402539
.text:00402539 loc_402539:                             ; CODE XREF: sub_401A10+88↑j
.text:00402539                 mov     dword ptr [ebp+18h], 0
.text:00402540                 mov     esi, [esp+5Ch+Str]
.text:00402544
.text:00402544 loc_402544:                             ; CODE XREF: sub_401A10+B49↓j
.text:00402544                 inc     esi
.text:00402545                 jmp     loc_401AA8
.text:00402545 ; ---------------------------------------------------------------------------
.text:0040254A                 align 10h
.text:00402550
.text:00402550 loc_402550:                             ; CODE XREF: sub_401A10+80↑j
.text:00402550                 mov     dword ptr [ebp+18h], 2
.text:00402557                 mov     esi, ecx
.text:00402559                 jmp     short loc_402544
.text:00402559 ; ---------------------------------------------------------------------------
.text:0040255B                 align 10h
.text:00402560
.text:00402560 loc_402560:                             ; CODE XREF: sub_401A10+69↑j
.text:00402560                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402567                 call    getenv
.text:0040256C                 test    eax, eax
.text:0040256E                 jz      loc_401A84
.text:00402574                 jmp     loc_401A7F
.text:00402574 ; ---------------------------------------------------------------------------
.text:00402579                 align 10h
.text:00402580
.text:00402580 loc_402580:                             ; CODE XREF: sub_401A10+3F↑j
.text:00402580                 mov     dword ptr [ebp+0], 1
.text:00402587                 mov     ebx, 1
.text:0040258C                 jmp     loc_401A60
.text:0040258C sub_401A10      endp
.text:0040258C
.text:00402591 ; ---------------------------------------------------------------------------
.text:00402591                 jmp     short sub_4025A0
.text:00402591 ; ---------------------------------------------------------------------------
.text:00402593                 align 10h
.text:004025A0
.text:004025A0 ; =============== S U B R O U T I N E =======================================
.text:004025A0
.text:004025A0
.text:004025A0 ; int __cdecl sub_4025A0(int, int, char *, int, int, int, int)
.text:004025A0 sub_4025A0      proc near               ; CODE XREF: .text:00402591↑j
.text:004025A0                                         ; sub_402980+3A↓p ...
.text:004025A0
.text:004025A0 var_2C          = dword ptr -2Ch
.text:004025A0 var_28          = dword ptr -28h
.text:004025A0 Str             = dword ptr -24h
.text:004025A0 var_20          = dword ptr -20h
.text:004025A0 var_1C          = dword ptr -1Ch
.text:004025A0 var_18          = dword ptr -18h
.text:004025A0 var_14          = dword ptr -14h
.text:004025A0 var_10          = dword ptr -10h
.text:004025A0 arg_0           = dword ptr  4
.text:004025A0 arg_4           = dword ptr  8
.text:004025A0 arg_8           = dword ptr  0Ch
.text:004025A0 arg_C           = dword ptr  10h
.text:004025A0 arg_10          = dword ptr  14h
.text:004025A0 arg_14          = dword ptr  18h
.text:004025A0 arg_18          = dword ptr  1Ch
.text:004025A0
.text:004025A0                 sub     esp, 2Ch
.text:004025A3                 mov     edx, dword_406010
.text:004025A9                 mov     [esp+2Ch+var_10], offset dword_407000 ; int
.text:004025B1                 mov     ecx, dword_406014
.text:004025B7                 mov     ds:dword_407000, edx
.text:004025BD                 mov     edx, [esp+2Ch+arg_18]
.text:004025C1                 mov     ds:dword_407004, ecx
.text:004025C7                 mov     ecx, [esp+2Ch+arg_14]
.text:004025CB                 mov     [esp+2Ch+var_14], edx ; int
.text:004025CF                 mov     edx, [esp+2Ch+arg_10]
.text:004025D3                 mov     [esp+2Ch+var_18], ecx ; int
.text:004025D7                 mov     ecx, [esp+2Ch+arg_C]
.text:004025DB                 mov     [esp+2Ch+var_1C], edx ; int
.text:004025DF                 mov     edx, [esp+2Ch+arg_8]
.text:004025E3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004025E7                 mov     ecx, [esp+2Ch+arg_4]
.text:004025EB                 mov     [esp+2Ch+Str], edx ; Str
.text:004025EF                 mov     edx, [esp+2Ch+arg_0]
.text:004025F3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004025F7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004025FA                 call    sub_401A10
.text:004025FF                 mov     ecx, ds:dword_407000
.text:00402605                 mov     dword_406010, ecx
.text:0040260B                 mov     ecx, ds:dword_40700C
.text:00402611                 mov     ds:dword_4071B0, ecx
.text:00402617                 mov     ecx, ds:dword_407008
.text:0040261D                 mov     dword_406018, ecx
.text:00402623                 add     esp, 2Ch
.text:00402626                 retn
.text:00402626 sub_4025A0      endp
.text:00402626
.text:00402626 ; ---------------------------------------------------------------------------
.text:00402627                 align 10h
.text:00402630                 sub     esp, 2Ch
.text:00402633                 mov     edx, dword_406010
.text:00402639                 mov     dword ptr [esp+1Ch], offset dword_407000
.text:00402641                 mov     ecx, dword_406014
.text:00402647                 mov     dword ptr [esp+18h], 1
.text:0040264F                 mov     ds:dword_407000, edx
.text:00402655                 mov     edx, [esp+38h]
.text:00402659                 mov     ds:dword_407004, ecx
.text:0040265F                 mov     ecx, [esp+34h]
.text:00402663                 mov     [esp+8], edx
.text:00402667                 mov     edx, [esp+30h]
.text:0040266B                 mov     [esp+4], ecx
.text:0040266F                 mov     dword ptr [esp+14h], 0
.text:00402677                 mov     dword ptr [esp+10h], 0
.text:0040267F                 mov     dword ptr [esp+0Ch], 0
.text:00402687                 mov     [esp], edx
.text:0040268A                 call    sub_401A10
.text:0040268F                 mov     ecx, ds:dword_407000
.text:00402695                 mov     dword_406010, ecx
.text:0040269B                 mov     ecx, ds:dword_40700C
.text:004026A1                 mov     ds:dword_4071B0, ecx
.text:004026A7                 mov     ecx, ds:dword_407008
.text:004026AD                 mov     dword_406018, ecx
.text:004026B3                 add     esp, 2Ch
.text:004026B6                 retn
.text:004026B6 ; ---------------------------------------------------------------------------
.text:004026B7                 align 10h
.text:004026C0
.text:004026C0 ; =============== S U B R O U T I N E =======================================
.text:004026C0
.text:004026C0
.text:004026C0 sub_4026C0      proc near               ; CODE XREF: sub_401A10+113↑p
.text:004026C0                                         ; sub_401A10+AB9↑p
.text:004026C0
.text:004026C0 var_2C          = dword ptr -2Ch
.text:004026C0 var_28          = dword ptr -28h
.text:004026C0 var_24          = dword ptr -24h
.text:004026C0 var_20          = dword ptr -20h
.text:004026C0 var_1C          = dword ptr -1Ch
.text:004026C0 var_18          = dword ptr -18h
.text:004026C0 var_14          = dword ptr -14h
.text:004026C0 arg_0           = dword ptr  4
.text:004026C0 arg_4           = dword ptr  8
.text:004026C0
.text:004026C0                 push    ebp
.text:004026C1                 push    edi
.text:004026C2                 push    esi
.text:004026C3                 push    ebx
.text:004026C4                 sub     esp, 1Ch
.text:004026C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004026CB                 mov     eax, [esp+2Ch+arg_4]
.text:004026CF                 mov     ebx, [esp+2Ch+arg_4]
.text:004026D3                 mov     edx, [ecx+20h]
.text:004026D6                 mov     edi, [esp+2Ch+arg_0]
.text:004026DA                 mov     ecx, [ebx]
.text:004026DC                 mov     [esp+2Ch+var_2C], edx
.text:004026DF                 mov     [esp+2Ch+var_14], edx
.text:004026E3                 mov     edx, [eax+24h]
.text:004026E6                 mov     [esp+2Ch+var_28], ecx
.text:004026EA                 mov     [esp+2Ch+var_1C], ecx
.text:004026EE                 cmp     ecx, edx
.text:004026F0                 mov     [esp+2Ch+var_18], edx
.text:004026F4                 jle     short loc_402770
.text:004026F6                 mov     esi, [esp+2Ch+var_2C]
.text:004026F9                 cmp     edx, esi
.text:004026FB                 jle     short loc_402770
.text:004026FD                 lea     esi, [esi+0]
.text:00402700
.text:00402700 loc_402700:                             ; CODE XREF: sub_4026C0+A1↓j
.text:00402700                 mov     ebx, [esp+2Ch+var_1C]
.text:00402704                 mov     edx, [esp+2Ch+var_18]
.text:00402708                 mov     ebp, [esp+2Ch+var_18]
.text:0040270C                 mov     eax, [esp+2Ch+var_14]
.text:00402710                 sub     ebx, edx
.text:00402712                 mov     [esp+2Ch+var_20], ebx
.text:00402716                 sub     ebp, eax
.text:00402718                 cmp     ebx, ebp
.text:0040271A                 jle     short loc_402795
.text:0040271C                 xor     esi, esi
.text:0040271E                 cmp     esi, ebp
.text:00402720                 jge     short loc_40274D
.text:00402722                 mov     ecx, [esp+2Ch+var_1C]
.text:00402726                 sub     ecx, ebp
.text:00402728                 mov     [esp+2Ch+var_24], ecx
.text:0040272C                 lea     esi, [esi+0]
.text:00402730
.text:00402730 loc_402730:                             ; CODE XREF: sub_4026C0+8B↓j
.text:00402730                 mov     ecx, [esp+2Ch+var_14]
.text:00402734                 mov     edx, [esp+2Ch+var_24]
.text:00402738                 add     ecx, esi
.text:0040273A                 add     edx, esi
.text:0040273C                 mov     ebx, [edi+ecx*4]
.text:0040273F                 mov     eax, [edi+edx*4]
.text:00402742                 inc     esi
.text:00402743                 cmp     esi, ebp
.text:00402745                 mov     [edi+ecx*4], eax
.text:00402748                 mov     [edi+edx*4], ebx
.text:0040274B                 jl      short loc_402730
.text:0040274D
.text:0040274D loc_40274D:                             ; CODE XREF: sub_4026C0+60↑j
.text:0040274D                 sub     [esp+2Ch+var_1C], ebp
.text:00402751
.text:00402751 loc_402751:                             ; CODE XREF: sub_4026C0+107↓j
.text:00402751                 mov     eax, [esp+2Ch+var_18]
.text:00402755                 cmp     [esp+2Ch+var_1C], eax
.text:00402759                 jle     short loc_402770
.text:0040275B                 mov     ebp, [esp+2Ch+var_14]
.text:0040275F                 cmp     eax, ebp
.text:00402761                 jg      short loc_402700
.text:00402763                 lea     esi, [esi+0]
.text:00402769                 lea     edi, [edi+0]
.text:00402770
.text:00402770 loc_402770:                             ; CODE XREF: sub_4026C0+34↑j
.text:00402770                                         ; sub_4026C0+3B↑j ...
.text:00402770                 mov     esi, [esp+2Ch+var_28]
.text:00402774                 mov     ecx, [esp+2Ch+var_18]
.text:00402778                 mov     eax, [esp+2Ch+var_2C]
.text:0040277B                 mov     edi, [esp+2Ch+arg_4]
.text:0040277F                 mov     edx, [esp+2Ch+var_28]
.text:00402783                 sub     esi, ecx
.text:00402785                 add     esi, eax
.text:00402787                 mov     [edi+20h], esi
.text:0040278A                 mov     [edi+24h], edx
.text:0040278D                 add     esp, 1Ch
.text:00402790                 pop     ebx
.text:00402791                 pop     esi
.text:00402792                 pop     edi
.text:00402793                 pop     ebp
.text:00402794                 retn
.text:00402795 ; ---------------------------------------------------------------------------
.text:00402795
.text:00402795 loc_402795:                             ; CODE XREF: sub_4026C0+5A↑j
.text:00402795                 xor     esi, esi
.text:00402797                 cmp     esi, [esp+2Ch+var_20]
.text:0040279B                 jge     short loc_4027BF
.text:0040279D                 lea     esi, [esi+0]
.text:004027A0
.text:004027A0 loc_4027A0:                             ; CODE XREF: sub_4026C0+FD↓j
.text:004027A0                 mov     ebx, [esp+2Ch+var_14]
.text:004027A4                 mov     ebp, [esp+2Ch+var_18]
.text:004027A8                 add     ebx, esi
.text:004027AA                 add     ebp, esi
.text:004027AC                 mov     edx, [edi+ebx*4]
.text:004027AF                 inc     esi
.text:004027B0                 cmp     esi, [esp+2Ch+var_20]
.text:004027B4                 mov     ecx, [edi+ebp*4]
.text:004027B7                 mov     [edi+ebx*4], ecx
.text:004027BA                 mov     [edi+ebp*4], edx
.text:004027BD                 jl      short loc_4027A0
.text:004027BF
.text:004027BF loc_4027BF:                             ; CODE XREF: sub_4026C0+DB↑j
.text:004027BF                 mov     esi, [esp+2Ch+var_20]
.text:004027C3                 add     [esp+2Ch+var_14], esi
.text:004027C7                 jmp     short loc_402751
.text:004027C7 sub_4026C0      endp
.text:004027C7
.text:004027C7 ; ---------------------------------------------------------------------------
.text:004027C9                 align 20h
.text:004027E0
.text:004027E0 ; =============== S U B R O U T I N E =======================================
.text:004027E0
.text:004027E0
.text:004027E0 sub_4027E0      proc near               ; CODE XREF: sub_401360+15C↑p
.text:004027E0
.text:004027E0 var_C           = dword ptr -0Ch
.text:004027E0 arg_0           = dword ptr  4
.text:004027E0
.text:004027E0                 push    esi
.text:004027E1                 push    ebx
.text:004027E2                 sub     esp, 4
.text:004027E5                 mov     ebx, [esp+0Ch+arg_0]
.text:004027E9                 cmp     byte ptr [ebx], 0
.text:004027EC                 jz      short loc_4027F4
.text:004027EE                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:004027F2                 jz      short loc_402846
.text:004027F4
.text:004027F4 loc_4027F4:                             ; CODE XREF: sub_4027E0+C↑j
.text:004027F4                 xor     esi, esi
.text:004027F6
.text:004027F6 loc_4027F6:                             ; CODE XREF: sub_4027E0+6B↓j
.text:004027F6                 mov     [esp+0Ch+var_C], ebx
.text:004027F9                 call    sub_402FC0
.text:004027FE                 sub     eax, ebx
.text:00402800                 cmp     esi, eax
.text:00402802                 jnb     short loc_402826
.text:00402804                 lea     esi, [esi+0]
.text:0040280A                 lea     edi, [edi+0]
.text:00402810
.text:00402810 loc_402810:                             ; CODE XREF: sub_4027E0+44↓j
.text:00402810                 movzx   edx, byte ptr [eax+ebx-1]
.text:00402815                 cmp     dl, 2Fh ; '/'
.text:00402818                 jz      short loc_402821
.text:0040281A                 cmp     dl, 5Ch ; '\'
.text:0040281D                 mov     ecx, eax
.text:0040281F                 jnz     short loc_402839
.text:00402821
.text:00402821 loc_402821:                             ; CODE XREF: sub_4027E0+38↑j
.text:00402821                 dec     eax
.text:00402822                 cmp     esi, eax
.text:00402824                 jb      short loc_402810
.text:00402826
.text:00402826 loc_402826:                             ; CODE XREF: sub_4027E0+22↑j
.text:00402826                 movzx   edx, byte ptr [esi+ebx]
.text:0040282A                 xor     eax, eax
.text:0040282C                 cmp     dl, 2Fh ; '/'
.text:0040282F                 jz      short loc_40283F
.text:00402831                 cmp     dl, 5Ch ; '\'
.text:00402834                 jz      short loc_40283F
.text:00402836
.text:00402836 loc_402836:                             ; CODE XREF: sub_4027E0+64↓j
.text:00402836                 lea     ecx, [eax+esi]
.text:00402839
.text:00402839 loc_402839:                             ; CODE XREF: sub_4027E0+3F↑j
.text:00402839                 pop     edx
.text:0040283A                 mov     eax, ecx
.text:0040283C                 pop     ebx
.text:0040283D                 pop     esi
.text:0040283E                 retn
.text:0040283F ; ---------------------------------------------------------------------------
.text:0040283F
.text:0040283F loc_40283F:                             ; CODE XREF: sub_4027E0+4F↑j
.text:0040283F                                         ; sub_4027E0+54↑j
.text:0040283F                 mov     eax, 1
.text:00402844                 jmp     short loc_402836
.text:00402846 ; ---------------------------------------------------------------------------
.text:00402846
.text:00402846 loc_402846:                             ; CODE XREF: sub_4027E0+12↑j
.text:00402846                 mov     esi, 2
.text:0040284B                 jmp     short loc_4027F6
.text:0040284B sub_4027E0      endp
.text:0040284B
.text:0040284B ; ---------------------------------------------------------------------------
.text:0040284D                 align 10h
.text:00402850                 push    ebp
.text:00402851                 push    edi
.text:00402852                 push    esi
.text:00402853                 push    ebx
.text:00402854                 sub     esp, 1Ch
.text:00402857                 mov     edi, [esp+30h]
.text:0040285B                 cmp     byte ptr [edi], 0
.text:0040285E                 jz      short loc_40286A
.text:00402860                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00402864                 jz      loc_402907
.text:0040286A
.text:0040286A loc_40286A:                             ; CODE XREF: .text:0040285E↑j
.text:0040286A                 xor     esi, esi
.text:0040286C
.text:0040286C loc_40286C:                             ; CODE XREF: .text:0040290C↓j
.text:0040286C                 mov     [esp], edi
.text:0040286F                 call    sub_402FC0
.text:00402874                 sub     eax, edi
.text:00402876                 cmp     esi, eax
.text:00402878                 jnb     short loc_402896
.text:0040287A                 lea     esi, [esi+0]
.text:00402880
.text:00402880 loc_402880:                             ; CODE XREF: .text:00402894↓j
.text:00402880                 movzx   edx, byte ptr [eax+edi-1]
.text:00402885                 cmp     dl, 2Fh ; '/'
.text:00402888                 jz      short loc_402891
.text:0040288A                 cmp     dl, 5Ch ; '\'
.text:0040288D                 mov     ebx, eax
.text:0040288F                 jnz     short loc_4028A7
.text:00402891
.text:00402891 loc_402891:                             ; CODE XREF: .text:00402888↑j
.text:00402891                 dec     eax
.text:00402892                 cmp     esi, eax
.text:00402894                 jb      short loc_402880
.text:00402896
.text:00402896 loc_402896:                             ; CODE XREF: .text:00402878↑j
.text:00402896                 movzx   eax, byte ptr [esi+edi]
.text:0040289A                 xor     edx, edx
.text:0040289C                 cmp     al, 2Fh ; '/'
.text:0040289E                 jz      short loc_402900
.text:004028A0                 cmp     al, 5Ch ; '\'
.text:004028A2                 jz      short loc_402900
.text:004028A4
.text:004028A4 loc_4028A4:                             ; CODE XREF: .text:00402905↓j
.text:004028A4                 lea     ebx, [edx+esi]
.text:004028A7
.text:004028A7 loc_4028A7:                             ; CODE XREF: .text:0040288F↑j
.text:004028A7                 cmp     byte ptr [edi], 0
.text:004028AA                 mov     ebp, ebx
.text:004028AC                 jz      short loc_4028B4
.text:004028AE                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:004028B2                 jz      short loc_4028FB
.text:004028B4
.text:004028B4 loc_4028B4:                             ; CODE XREF: .text:004028AC↑j
.text:004028B4                 test    ebx, ebx
.text:004028B6
.text:004028B6 loc_4028B6:                             ; CODE XREF: .text:004028FE↓j
.text:004028B6                 setz    byte ptr [esp+1Bh]
.text:004028BB                 movzx   ecx, byte ptr [esp+1Bh]
.text:004028C0                 lea     edx, [ecx+ebx+1]
.text:004028C4                 mov     [esp], edx
.text:004028C7                 call    sub_402D30
.text:004028CC                 mov     [esp], eax
.text:004028CF                 mov     esi, eax
.text:004028D1                 mov     [esp+8], ebx
.text:004028D5                 mov     [esp+4], edi
.text:004028D9                 call    memcpy
.text:004028DE                 cmp     byte ptr [esp+1Bh], 0
.text:004028E3                 jz      short loc_4028EC
.text:004028E5                 mov     byte ptr [ebx+esi], 2Eh ; '.'
.text:004028E9                 lea     ebp, [ebx+1]
.text:004028EC
.text:004028EC loc_4028EC:                             ; CODE XREF: .text:004028E3↑j
.text:004028EC                 mov     byte ptr [ebp+esi+0], 0
.text:004028F1                 mov     eax, esi
.text:004028F3                 add     esp, 1Ch
.text:004028F6                 pop     ebx
.text:004028F7                 pop     esi
.text:004028F8                 pop     edi
.text:004028F9                 pop     ebp
.text:004028FA                 retn
.text:004028FB ; ---------------------------------------------------------------------------
.text:004028FB
.text:004028FB loc_4028FB:                             ; CODE XREF: .text:004028B2↑j
.text:004028FB                 cmp     ebx, 2
.text:004028FE                 jmp     short loc_4028B6
.text:00402900 ; ---------------------------------------------------------------------------
.text:00402900
.text:00402900 loc_402900:                             ; CODE XREF: .text:0040289E↑j
.text:00402900                                         ; .text:004028A2↑j
.text:00402900                 mov     edx, 1
.text:00402905                 jmp     short loc_4028A4
.text:00402907 ; ---------------------------------------------------------------------------
.text:00402907
.text:00402907 loc_402907:                             ; CODE XREF: .text:00402864↑j
.text:00402907                 mov     esi, 2
.text:0040290C                 jmp     loc_40286C
.text:0040290C ; ---------------------------------------------------------------------------
.text:00402911                 align 10h
.text:00402920                 sub     esp, 0Ch
.text:00402923                 mov     edx, [esp+14h]
.text:00402927                 mov     dword ptr [esp+4], 5
.text:0040292F                 mov     [esp+8], edx
.text:00402933                 mov     edx, [esp+10h]
.text:00402937                 mov     [esp], edx
.text:0040293A                 call    sub_403E30
.text:0040293F                 add     esp, 0Ch
.text:00402942                 retn
.text:00402942 ; ---------------------------------------------------------------------------
.text:00402943                 align 10h
.text:00402950
.text:00402950 ; =============== S U B R O U T I N E =======================================
.text:00402950
.text:00402950
.text:00402950 ; int __cdecl sub_402950(char *)
.text:00402950 sub_402950      proc near               ; CODE XREF: sub_401360+EE↑p
.text:00402950
.text:00402950 var_C           = dword ptr -0Ch
.text:00402950 var_8           = dword ptr -8
.text:00402950 var_4           = dword ptr -4
.text:00402950 arg_0           = dword ptr  4
.text:00402950
.text:00402950                 sub     esp, 0Ch
.text:00402953                 mov     edx, [esp+0Ch+arg_0]
.text:00402957                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040295F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00402966                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040296A                 call    sub_403E30
.text:0040296F                 add     esp, 0Ch
.text:00402972                 retn
.text:00402972 sub_402950      endp
.text:00402972
.text:00402972 ; ---------------------------------------------------------------------------
.text:00402973                 align 10h
.text:00402980
.text:00402980 ; =============== S U B R O U T I N E =======================================
.text:00402980
.text:00402980
.text:00402980 ; int __cdecl sub_402980(int, int, char *, int, int)
.text:00402980 sub_402980      proc near               ; CODE XREF: sub_401360+CA↑p
.text:00402980                                         ; sub_402B20+58↓p
.text:00402980
.text:00402980 var_1C          = dword ptr -1Ch
.text:00402980 var_18          = dword ptr -18h
.text:00402980 var_14          = dword ptr -14h
.text:00402980 var_10          = dword ptr -10h
.text:00402980 var_C           = dword ptr -0Ch
.text:00402980 var_8           = dword ptr -8
.text:00402980 var_4           = dword ptr -4
.text:00402980 arg_0           = dword ptr  4
.text:00402980 arg_4           = dword ptr  8
.text:00402980 arg_8           = dword ptr  0Ch
.text:00402980 arg_C           = dword ptr  10h
.text:00402980 arg_10          = dword ptr  14h
.text:00402980
.text:00402980                 sub     esp, 1Ch
.text:00402983                 mov     edx, [esp+1Ch+arg_C]
.text:00402987                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040298F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402993                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040299B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040299F                 mov     edx, [esp+1Ch+arg_4]
.text:004029A3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004029A7                 mov     ecx, [esp+1Ch+arg_8]
.text:004029AB                 mov     [esp+1Ch+var_18], edx ; int
.text:004029AF                 mov     edx, [esp+1Ch+arg_0]
.text:004029B3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004029B7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004029BA                 call    sub_4025A0
.text:004029BF                 add     esp, 1Ch
.text:004029C2                 retn
.text:004029C2 sub_402980      endp
.text:004029C2
.text:004029C2 ; ---------------------------------------------------------------------------
.text:004029C3                 align 10h
.text:004029D0                 sub     esp, 2Ch
.text:004029D3                 mov     edx, [esp+44h]
.text:004029D7                 mov     dword ptr [esp+18h], 0
.text:004029DF                 mov     ecx, [esp+40h]
.text:004029E3                 mov     dword ptr [esp+14h], 0
.text:004029EB                 mov     [esp+1Ch], edx
.text:004029EF                 mov     edx, [esp+3Ch]
.text:004029F3                 mov     [esp+10h], ecx
.text:004029F7                 mov     ecx, [esp+38h]
.text:004029FB                 mov     [esp+0Ch], edx
.text:004029FF                 mov     edx, [esp+34h]
.text:00402A03                 mov     [esp+8], ecx
.text:00402A07                 mov     [esp+4], edx
.text:00402A0B                 mov     edx, [esp+30h]
.text:00402A0F                 mov     [esp], edx
.text:00402A12                 call    sub_401A10
.text:00402A17                 add     esp, 2Ch
.text:00402A1A                 retn
.text:00402A1A ; ---------------------------------------------------------------------------
.text:00402A1B                 align 10h
.text:00402A20                 sub     esp, 1Ch
.text:00402A23                 mov     edx, [esp+2Ch]
.text:00402A27                 mov     dword ptr [esp+18h], 0
.text:00402A2F                 mov     ecx, [esp+30h]
.text:00402A33                 mov     dword ptr [esp+14h], 1
.text:00402A3B                 mov     [esp+0Ch], edx
.text:00402A3F                 mov     edx, [esp+24h]
.text:00402A43                 mov     [esp+10h], ecx
.text:00402A47                 mov     ecx, [esp+28h]
.text:00402A4B                 mov     [esp+4], edx
.text:00402A4F                 mov     edx, [esp+20h]
.text:00402A53                 mov     [esp+8], ecx
.text:00402A57                 mov     [esp], edx
.text:00402A5A                 call    sub_4025A0
.text:00402A5F                 add     esp, 1Ch
.text:00402A62                 retn
.text:00402A62 ; ---------------------------------------------------------------------------
.text:00402A63                 align 10h
.text:00402A70                 sub     esp, 2Ch
.text:00402A73                 mov     edx, [esp+44h]
.text:00402A77                 mov     dword ptr [esp+18h], 0
.text:00402A7F                 mov     ecx, [esp+40h]
.text:00402A83                 mov     dword ptr [esp+14h], 1
.text:00402A8B                 mov     [esp+1Ch], edx
.text:00402A8F                 mov     edx, [esp+3Ch]
.text:00402A93                 mov     [esp+10h], ecx
.text:00402A97                 mov     ecx, [esp+38h]
.text:00402A9B                 mov     [esp+0Ch], edx
.text:00402A9F                 mov     edx, [esp+34h]
.text:00402AA3                 mov     [esp+8], ecx
.text:00402AA7                 mov     [esp+4], edx
.text:00402AAB                 mov     edx, [esp+30h]
.text:00402AAF                 mov     [esp], edx
.text:00402AB2                 call    sub_401A10
.text:00402AB7                 add     esp, 2Ch
.text:00402ABA                 retn
.text:00402ABA ; ---------------------------------------------------------------------------
.text:00402ABB                 align 10h
.text:00402AC0 aHelp           db 'help',0             ; DATA XREF: .text:off_402AE0↓o
.text:00402AC5 aVersion        db 'version',0          ; DATA XREF: .text:00402AF0↓o
.text:00402ACD                 align 20h
.text:00402AE0 off_402AE0      dd offset aHelp         ; DATA XREF: sub_402B20+3D↓o
.text:00402AE0                                         ; "help"
.text:00402AE4                 dd 2 dup(0)
.text:00402AEC                 dd 68h
.text:00402AF0                 dd offset aVersion      ; "version"
.text:00402AF4                 dd 2 dup(0)
.text:00402AFC                 dd 76h, 4 dup(0)
.text:00402B10 ; ---------------------------------------------------------------------------
.text:00402B10
.text:00402B10 loc_402B10:                             ; DATA XREF: sub_402B20+45↓o
.text:00402B10                 sub     eax, [eax]
.text:00402B12                 lea     esi, [esi+0]
.text:00402B19                 lea     edi, [edi+0]
.text:00402B20
.text:00402B20 ; =============== S U B R O U T I N E =======================================
.text:00402B20
.text:00402B20
.text:00402B20 ; int __cdecl sub_402B20(int, int, FILE *, int, int, int, char)
.text:00402B20 sub_402B20      proc near               ; CODE XREF: sub_401360+A6↑p
.text:00402B20
.text:00402B20 Code            = dword ptr -1Ch
.text:00402B20 var_18          = dword ptr -18h
.text:00402B20 var_14          = dword ptr -14h
.text:00402B20 var_10          = dword ptr -10h
.text:00402B20 var_C           = dword ptr -0Ch
.text:00402B20 var_4           = dword ptr -4
.text:00402B20 arg_0           = dword ptr  4
.text:00402B20 arg_4           = dword ptr  8
.text:00402B20 arg_8           = dword ptr  0Ch
.text:00402B20 arg_C           = dword ptr  10h
.text:00402B20 arg_10          = dword ptr  14h
.text:00402B20 arg_14          = dword ptr  18h
.text:00402B20 arg_18          = byte ptr  1Ch
.text:00402B20
.text:00402B20                 sub     esp, 1Ch
.text:00402B23                 xor     eax, eax
.text:00402B25                 cmp     [esp+1Ch+arg_0], 2
.text:00402B2A                 mov     [esp+1Ch+var_4], ebx
.text:00402B2E                 mov     ebx, dword_406014
.text:00402B34                 mov     dword_406014, eax
.text:00402B39                 jz      short loc_402B51
.text:00402B3B
.text:00402B3B loc_402B3B:                             ; CODE XREF: sub_402B20+60↓j
.text:00402B3B                                         ; sub_402B20+6A↓j
.text:00402B3B                 mov     dword_406014, ebx
.text:00402B41                 xor     edx, edx
.text:00402B43                 mov     ebx, [esp+1Ch+var_4]
.text:00402B47                 mov     dword_406010, edx
.text:00402B4D                 add     esp, 1Ch
.text:00402B50                 retn
.text:00402B51 ; ---------------------------------------------------------------------------
.text:00402B51
.text:00402B51 loc_402B51:                             ; CODE XREF: sub_402B20+19↑j
.text:00402B51                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402B59                 mov     edx, [esp+1Ch+arg_4]
.text:00402B5D                 mov     [esp+1Ch+var_10], offset off_402AE0 ; int
.text:00402B65                 mov     [esp+1Ch+var_14], offset loc_402B10 ; char *
.text:00402B6D                 mov     [esp+1Ch+var_18], edx ; int
.text:00402B71                 mov     [esp+1Ch+Code], 2 ; int
.text:00402B78                 call    sub_402980
.text:00402B7D                 cmp     eax, 0FFFFFFFFh
.text:00402B80                 jz      short loc_402B3B
.text:00402B82                 cmp     eax, 68h ; 'h'
.text:00402B85                 jz      short loc_402B8E
.text:00402B87                 cmp     eax, 76h ; 'v'
.text:00402B8A                 jnz     short loc_402B3B
.text:00402B8C                 jmp     short loc_402B99
.text:00402B8E ; ---------------------------------------------------------------------------
.text:00402B8E
.text:00402B8E loc_402B8E:                             ; CODE XREF: sub_402B20+65↑j
.text:00402B8E                 mov     [esp+1Ch+Code], 0
.text:00402B95                 call    [esp+1Ch+arg_14]
.text:00402B99
.text:00402B99 loc_402B99:                             ; CODE XREF: sub_402B20+6C↑j
.text:00402B99                 mov     ecx, [esp+1Ch+arg_10]
.text:00402B9D                 lea     ebx, [esp+1Ch+arg_18]
.text:00402BA1                 mov     edx, [esp+1Ch+arg_C]
.text:00402BA5                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00402BA9                 mov     ebx, [esp+1Ch+arg_8]
.text:00402BAD                 mov     [esp+1Ch+var_10], ecx ; int
.text:00402BB1                 mov     ecx, ds:_iob
.text:00402BB7                 mov     [esp+1Ch+var_14], edx ; int
.text:00402BBB                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:00402BBF                 add     ecx, 20h ; ' '
.text:00402BC2                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00402BC5                 call    sub_404700
.text:00402BCA                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402BD1                 call    exit
.text:00402BD1 sub_402B20      endp
.text:00402BD1
.text:00402BD1 ; ---------------------------------------------------------------------------
.text:00402BD6                 align 10h
.text:00402BE0                 mov     edx, [esp+4]
.text:00402BE4                 mov     ds:dword_407030, edx
.text:00402BEA                 retn
.text:00402BEA ; ---------------------------------------------------------------------------
.text:00402BEB aWriteError     db 'write error',0      ; DATA XREF: sub_402C10:loc_402C59↓o
.text:00402BF7 ; const char aSS[]
.text:00402BF7 aSS             db '%s: %s',0           ; DATA XREF: sub_402C10+77↓o
.text:00402BFE ; const char aS_2[]
.text:00402BFE aS_2            db '%s',0               ; DATA XREF: sub_402C10+A0↓o
.text:00402C01 ; ---------------------------------------------------------------------------
.text:00402C01                 jmp     short sub_402C10
.text:00402C01 ; ---------------------------------------------------------------------------
.text:00402C03                 align 10h
.text:00402C10
.text:00402C10 ; =============== S U B R O U T I N E =======================================
.text:00402C10
.text:00402C10
.text:00402C10 ; void __cdecl sub_402C10()
.text:00402C10 sub_402C10      proc near               ; CODE XREF: .text:00402C01↑j
.text:00402C10                                         ; DATA XREF: sub_401360+5B↑o
.text:00402C10
.text:00402C10 Stream          = dword ptr -2Ch
.text:00402C10 ErrorMessage    = dword ptr -28h
.text:00402C10 var_24          = dword ptr -24h
.text:00402C10 var_20          = byte ptr -20h
.text:00402C10 var_1C          = dword ptr -1Ch
.text:00402C10 var_9           = byte ptr -9
.text:00402C10
.text:00402C10                 push    esi
.text:00402C11                 push    ebx
.text:00402C12                 sub     esp, 24h
.text:00402C15                 mov     edx, ds:_iob
.text:00402C1B                 mov     ecx, [edx+2Ch]
.text:00402C1E                 lea     esi, [edx+20h]
.text:00402C21                 shr     ecx, 5
.text:00402C24                 mov     bl, cl
.text:00402C26                 mov     ecx, [edx+20h]
.text:00402C29                 and     bl, 1
.text:00402C2C                 cmp     ecx, [esi+8]
.text:00402C2F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402C32                 setz    [esp+2Ch+var_9]
.text:00402C37                 call    fclose
.text:00402C3C                 test    eax, eax
.text:00402C3E                 setnz   al
.text:00402C41                 test    bl, bl
.text:00402C43                 jnz     loc_402CD3
.text:00402C49                 test    al, al
.text:00402C4B                 jz      short loc_402CA0
.text:00402C4D
.text:00402C4D loc_402C4D:                             ; CODE XREF: sub_402C10+CD↓j
.text:00402C4D                 call    _errno
.text:00402C52                 mov     esi, [eax]
.text:00402C54
.text:00402C54 loc_402C54:                             ; CODE XREF: sub_402C10+C7↓j
.text:00402C54                 cmp     esi, 9
.text:00402C57                 jz      short loc_402CC6
.text:00402C59
.text:00402C59 loc_402C59:                             ; CODE XREF: sub_402C10+B8↓j
.text:00402C59                                         ; sub_402C10+C1↓j
.text:00402C59                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402C60                 call    ds:libintl_gettext
.text:00402C66                 mov     ebx, eax
.text:00402C68                 mov     eax, ds:dword_407030
.text:00402C6D                 test    eax, eax
.text:00402C6F                 jz      short loc_402CA6
.text:00402C71                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402C74                 call    sub_4041A0
.text:00402C79                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402C7D                 mov     edx, Code
.text:00402C83                 mov     [esp+2Ch+var_1C], ebx
.text:00402C87                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:00402C8F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402C93                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402C96                 call    sub_4049C0
.text:00402C9B                 nop
.text:00402C9C                 lea     esi, [esi+0]
.text:00402CA0
.text:00402CA0 loc_402CA0:                             ; CODE XREF: sub_402C10+3B↑j
.text:00402CA0                                         ; sub_402C10+B4↓j ...
.text:00402CA0                 add     esp, 24h
.text:00402CA3                 pop     ebx
.text:00402CA4                 pop     esi
.text:00402CA5                 retn
.text:00402CA6 ; ---------------------------------------------------------------------------
.text:00402CA6
.text:00402CA6 loc_402CA6:                             ; CODE XREF: sub_402C10+5F↑j
.text:00402CA6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402CAA                 mov     ebx, Code
.text:00402CB0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00402CB8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402CBC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402CBF                 call    sub_4049C0
.text:00402CC4                 jmp     short loc_402CA0
.text:00402CC6 ; ---------------------------------------------------------------------------
.text:00402CC6
.text:00402CC6 loc_402CC6:                             ; CODE XREF: sub_402C10+47↑j
.text:00402CC6                 test    bl, bl
.text:00402CC8                 jnz     short loc_402C59
.text:00402CCA                 cmp     [esp+2Ch+var_9], 0
.text:00402CCF                 jnz     short loc_402CA0
.text:00402CD1                 jmp     short loc_402C59
.text:00402CD3 ; ---------------------------------------------------------------------------
.text:00402CD3
.text:00402CD3 loc_402CD3:                             ; CODE XREF: sub_402C10+33↑j
.text:00402CD3                 xor     esi, esi
.text:00402CD5                 test    al, al
.text:00402CD7                 jz      loc_402C54
.text:00402CDD                 jmp     loc_402C4D
.text:00402CDD sub_402C10      endp
.text:00402CDD
.text:00402CDD ; ---------------------------------------------------------------------------
.text:00402CE2                 align 10h
.text:00402CF0                 sub     esp, 0Ch
.text:00402CF3                 xor     edx, edx
.text:00402CF5                 mov     ecx, [esp+14h]
.text:00402CF9                 mov     [esp+8], ebx
.text:00402CFD                 mov     eax, 0FFFFFFFFh
.text:00402D02                 mov     ebx, [esp+10h]
.text:00402D06                 div     ecx
.text:00402D08                 cmp     eax, ebx
.text:00402D0A                 jb      short loc_402D29
.text:00402D0C                 mov     edx, ebx
.text:00402D0E                 imul    edx, ecx
.text:00402D11                 mov     [esp], edx
.text:00402D14                 call    malloc
.text:00402D19                 test    eax, eax
.text:00402D1B                 jz      short loc_402D25
.text:00402D1D
.text:00402D1D loc_402D1D:                             ; CODE XREF: .text:00402D27↓j
.text:00402D1D                 mov     ebx, [esp+8]
.text:00402D21                 add     esp, 0Ch
.text:00402D24                 retn
.text:00402D25 ; ---------------------------------------------------------------------------
.text:00402D25
.text:00402D25 loc_402D25:                             ; CODE XREF: .text:00402D1B↑j
.text:00402D25                 test    ebx, ebx
.text:00402D27                 jz      short loc_402D1D
.text:00402D29
.text:00402D29 loc_402D29:                             ; CODE XREF: .text:00402D0A↑j
.text:00402D29                 call    sub_404930
.text:00402D29 ; ---------------------------------------------------------------------------
.text:00402D2E                 align 10h
.text:00402D30
.text:00402D30 ; =============== S U B R O U T I N E =======================================
.text:00402D30
.text:00402D30
.text:00402D30 ; int __cdecl sub_402D30(size_t)
.text:00402D30 sub_402D30      proc near               ; CODE XREF: .text:004028C7↑p
.text:00402D30                                         ; .text:00403B79↓p ...
.text:00402D30
.text:00402D30 Size            = dword ptr -0Ch
.text:00402D30 var_4           = dword ptr -4
.text:00402D30 arg_0           = dword ptr  4
.text:00402D30
.text:00402D30                 sub     esp, 0Ch
.text:00402D33                 mov     [esp+0Ch+var_4], ebx
.text:00402D37                 mov     ebx, [esp+0Ch+arg_0]
.text:00402D3B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00402D3E                 call    malloc
.text:00402D43                 test    eax, eax
.text:00402D45                 jz      short loc_402D50
.text:00402D47
.text:00402D47 loc_402D47:                             ; CODE XREF: sub_402D30+22↓j
.text:00402D47                 mov     ebx, [esp+0Ch+var_4]
.text:00402D4B                 add     esp, 0Ch
.text:00402D4E                 retn
.text:00402D4E ; ---------------------------------------------------------------------------
.text:00402D4F                 align 10h
.text:00402D50
.text:00402D50 loc_402D50:                             ; CODE XREF: sub_402D30+15↑j
.text:00402D50                 test    ebx, ebx
.text:00402D52                 jz      short loc_402D47
.text:00402D54                 call    sub_404930
.text:00402D54 sub_402D30      endp
.text:00402D54
.text:00402D54 ; ---------------------------------------------------------------------------
.text:00402D59                 align 10h
.text:00402D60                 sub     esp, 1Ch
.text:00402D63                 xor     edx, edx
.text:00402D65                 mov     eax, 0FFFFFFFFh
.text:00402D6A                 mov     [esp+14h], ebx
.text:00402D6E                 mov     ecx, [esp+20h]
.text:00402D72                 mov     ebx, [esp+28h]
.text:00402D76                 mov     [esp+18h], esi
.text:00402D7A                 mov     esi, [esp+24h]
.text:00402D7E                 div     ebx
.text:00402D80                 cmp     eax, esi
.text:00402D82                 jb      short loc_402DB4
.text:00402D84                 mov     [esp], ecx
.text:00402D87                 mov     edx, esi
.text:00402D89                 imul    edx, ebx
.text:00402D8C                 mov     [esp+4], edx
.text:00402D90                 call    realloc
.text:00402D95                 test    eax, eax
.text:00402D97                 mov     ecx, eax
.text:00402D99                 jz      short loc_402DB0
.text:00402D9B
.text:00402D9B loc_402D9B:                             ; CODE XREF: .text:00402DB2↓j
.text:00402D9B                 mov     ebx, [esp+14h]
.text:00402D9F                 mov     eax, ecx
.text:00402DA1                 mov     esi, [esp+18h]
.text:00402DA5                 add     esp, 1Ch
.text:00402DA8                 retn
.text:00402DA8 ; ---------------------------------------------------------------------------
.text:00402DA9                 align 10h
.text:00402DB0
.text:00402DB0 loc_402DB0:                             ; CODE XREF: .text:00402D99↑j
.text:00402DB0                 test    esi, esi
.text:00402DB2                 jz      short loc_402D9B
.text:00402DB4
.text:00402DB4 loc_402DB4:                             ; CODE XREF: .text:00402D82↑j
.text:00402DB4                 call    sub_404930
.text:00402DB4 ; ---------------------------------------------------------------------------
.text:00402DB9                 align 10h
.text:00402DC0
.text:00402DC0 ; =============== S U B R O U T I N E =======================================
.text:00402DC0
.text:00402DC0
.text:00402DC0 ; int __cdecl sub_402DC0(void *, size_t)
.text:00402DC0 sub_402DC0      proc near               ; CODE XREF: sub_404240+5B↓p
.text:00402DC0
.text:00402DC0 Block           = dword ptr -0Ch
.text:00402DC0 Size            = dword ptr -8
.text:00402DC0 var_4           = dword ptr -4
.text:00402DC0 arg_0           = dword ptr  4
.text:00402DC0 arg_4           = dword ptr  8
.text:00402DC0
.text:00402DC0                 sub     esp, 0Ch
.text:00402DC3                 mov     edx, [esp+0Ch+arg_0]
.text:00402DC7                 mov     [esp+0Ch+var_4], ebx
.text:00402DCB                 mov     ebx, [esp+0Ch+arg_4]
.text:00402DCF                 mov     [esp+0Ch+Block], edx ; Block
.text:00402DD2                 mov     [esp+0Ch+Size], ebx ; Size
.text:00402DD6                 call    realloc
.text:00402DDB                 test    eax, eax
.text:00402DDD                 jz      short loc_402DE7
.text:00402DDF
.text:00402DDF loc_402DDF:                             ; CODE XREF: sub_402DC0+29↓j
.text:00402DDF                 mov     ebx, [esp+0Ch+var_4]
.text:00402DE3                 add     esp, 0Ch
.text:00402DE6                 retn
.text:00402DE7 ; ---------------------------------------------------------------------------
.text:00402DE7
.text:00402DE7 loc_402DE7:                             ; CODE XREF: sub_402DC0+1D↑j
.text:00402DE7                 test    ebx, ebx
.text:00402DE9                 jz      short loc_402DDF
.text:00402DEB                 call    sub_404930
.text:00402DEB sub_402DC0      endp
.text:00402DEB
.text:00402DF0 ; ---------------------------------------------------------------------------
.text:00402DF0                 jmp     sub_402F40
.text:00402DF0 ; ---------------------------------------------------------------------------
.text:00402DF5                 align 10h
.text:00402E00                 sub     esp, 0Ch
.text:00402E03                 mov     edx, [esp+14h]
.text:00402E07                 mov     dword ptr [esp+8], 1
.text:00402E0F                 mov     [esp+4], edx
.text:00402E13                 mov     edx, [esp+10h]
.text:00402E17                 mov     [esp], edx
.text:00402E1A                 call    sub_402F40
.text:00402E1F                 add     esp, 0Ch
.text:00402E22                 retn
.text:00402E22 ; ---------------------------------------------------------------------------
.text:00402E23                 align 10h
.text:00402E30                 sub     esp, 1Ch
.text:00402E33                 mov     [esp+18h], ebx
.text:00402E37                 mov     ebx, [esp+20h]
.text:00402E3B                 mov     [esp], ebx
.text:00402E3E                 call    malloc
.text:00402E43                 test    eax, eax
.text:00402E45                 jz      short loc_402E63
.text:00402E47
.text:00402E47 loc_402E47:                             ; CODE XREF: .text:00402E65↓j
.text:00402E47                 mov     [esp+8], ebx
.text:00402E4B                 mov     dword ptr [esp+4], 0
.text:00402E53                 mov     [esp], eax
.text:00402E56                 call    memset
.text:00402E5B                 mov     ebx, [esp+18h]
.text:00402E5F                 add     esp, 1Ch
.text:00402E62                 retn
.text:00402E63 ; ---------------------------------------------------------------------------
.text:00402E63
.text:00402E63 loc_402E63:                             ; CODE XREF: .text:00402E45↑j
.text:00402E63                 test    ebx, ebx
.text:00402E65                 jz      short loc_402E47
.text:00402E67                 call    sub_404930
.text:00402E67 ; ---------------------------------------------------------------------------
.text:00402E6C                 align 10h
.text:00402E70                 sub     esp, 0Ch
.text:00402E73                 xor     edx, edx
.text:00402E75                 mov     ecx, [esp+14h]
.text:00402E79                 mov     [esp+8], ebx
.text:00402E7D                 mov     eax, 0FFFFFFFFh
.text:00402E82                 mov     ebx, [esp+10h]
.text:00402E86                 div     ecx
.text:00402E88                 cmp     eax, ebx
.text:00402E8A                 jb      short loc_402EA8
.text:00402E8C                 mov     [esp+4], ecx
.text:00402E90                 mov     [esp], ebx
.text:00402E93                 call    calloc
.text:00402E98                 test    eax, eax
.text:00402E9A                 jz      short loc_402EA4
.text:00402E9C
.text:00402E9C loc_402E9C:                             ; CODE XREF: .text:00402EA6↓j
.text:00402E9C                 mov     ebx, [esp+8]
.text:00402EA0                 add     esp, 0Ch
.text:00402EA3                 retn
.text:00402EA4 ; ---------------------------------------------------------------------------
.text:00402EA4
.text:00402EA4 loc_402EA4:                             ; CODE XREF: .text:00402E9A↑j
.text:00402EA4                 test    ebx, ebx
.text:00402EA6                 jz      short loc_402E9C
.text:00402EA8
.text:00402EA8 loc_402EA8:                             ; CODE XREF: .text:00402E8A↑j
.text:00402EA8                 call    sub_404930
.text:00402EA8 ; ---------------------------------------------------------------------------
.text:00402EAD                 align 10h
.text:00402EB0                 sub     esp, 1Ch
.text:00402EB3                 mov     [esp+18h], ebx
.text:00402EB7                 mov     ebx, [esp+24h]
.text:00402EBB                 mov     [esp], ebx
.text:00402EBE                 call    malloc
.text:00402EC3                 test    eax, eax
.text:00402EC5                 mov     edx, eax
.text:00402EC7                 jz      short loc_402EE5
.text:00402EC9
.text:00402EC9 loc_402EC9:                             ; CODE XREF: .text:00402EE7↓j
.text:00402EC9                 mov     [esp+8], ebx
.text:00402ECD                 mov     ecx, [esp+20h]
.text:00402ED1                 mov     [esp], edx
.text:00402ED4                 mov     [esp+4], ecx
.text:00402ED8                 call    memcpy
.text:00402EDD                 mov     ebx, [esp+18h]
.text:00402EE1                 add     esp, 1Ch
.text:00402EE4                 retn
.text:00402EE5 ; ---------------------------------------------------------------------------
.text:00402EE5
.text:00402EE5 loc_402EE5:                             ; CODE XREF: .text:00402EC7↑j
.text:00402EE5                 test    ebx, ebx
.text:00402EE7                 jz      short loc_402EC9
.text:00402EE9                 call    sub_404930
.text:00402EE9 ; ---------------------------------------------------------------------------
.text:00402EEE                 align 10h
.text:00402EF0                 sub     esp, 1Ch
.text:00402EF3                 mov     [esp+18h], esi
.text:00402EF7                 mov     esi, [esp+20h]
.text:00402EFB                 mov     [esp+14h], ebx
.text:00402EFF                 mov     [esp], esi
.text:00402F02                 call    strlen
.text:00402F07                 lea     ebx, [eax+1]
.text:00402F0A                 mov     [esp], ebx
.text:00402F0D                 call    malloc
.text:00402F12                 test    eax, eax
.text:00402F14                 jz      short loc_402F32
.text:00402F16
.text:00402F16 loc_402F16:                             ; CODE XREF: .text:00402F34↓j
.text:00402F16                 mov     [esp+8], ebx
.text:00402F1A                 mov     [esp+4], esi
.text:00402F1E                 mov     [esp], eax
.text:00402F21                 call    memcpy
.text:00402F26                 mov     ebx, [esp+14h]
.text:00402F2A                 mov     esi, [esp+18h]
.text:00402F2E                 add     esp, 1Ch
.text:00402F31                 retn
.text:00402F32 ; ---------------------------------------------------------------------------
.text:00402F32
.text:00402F32 loc_402F32:                             ; CODE XREF: .text:00402F14↑j
.text:00402F32                 test    ebx, ebx
.text:00402F34                 jz      short loc_402F16
.text:00402F36                 call    sub_404930
.text:00402F36 ; ---------------------------------------------------------------------------
.text:00402F3B                 align 10h
.text:00402F40
.text:00402F40 ; =============== S U B R O U T I N E =======================================
.text:00402F40
.text:00402F40
.text:00402F40 ; int __cdecl sub_402F40(void *, int, int)
.text:00402F40 sub_402F40      proc near               ; CODE XREF: .text:00402DF0↑j
.text:00402F40                                         ; .text:00402E1A↑p
.text:00402F40
.text:00402F40 Block           = dword ptr -1Ch
.text:00402F40 Size            = dword ptr -18h
.text:00402F40 var_C           = dword ptr -0Ch
.text:00402F40 var_8           = dword ptr -8
.text:00402F40 var_4           = dword ptr -4
.text:00402F40 arg_0           = dword ptr  4
.text:00402F40 arg_4           = dword ptr  8
.text:00402F40 arg_8           = dword ptr  0Ch
.text:00402F40
.text:00402F40                 sub     esp, 1Ch
.text:00402F43                 mov     [esp+1Ch+var_8], esi
.text:00402F47                 mov     esi, [esp+1Ch+arg_0]
.text:00402F4B                 mov     [esp+1Ch+var_4], edi
.text:00402F4F                 mov     edi, [esp+1Ch+arg_4]
.text:00402F53                 test    esi, esi
.text:00402F55                 mov     [esp+1Ch+var_C], ebx
.text:00402F59                 mov     ecx, [edi]
.text:00402F5B                 mov     ebx, [esp+1Ch+arg_8]
.text:00402F5F                 jz      short loc_402FA0
.text:00402F61                 xor     edx, edx
.text:00402F63                 mov     eax, 7FFFFFFFh
.text:00402F68                 div     ebx
.text:00402F6A                 cmp     eax, ecx
.text:00402F6C                 jb      short loc_402F99
.text:00402F6E                 add     ecx, ecx
.text:00402F70
.text:00402F70 loc_402F70:                             ; CODE XREF: sub_402F40+62↓j
.text:00402F70                                         ; sub_402F40+71↓j ...
.text:00402F70                 mov     [edi], ecx
.text:00402F72                 imul    ebx, ecx
.text:00402F75                 mov     [esp+1Ch+Block], esi ; Block
.text:00402F78                 mov     [esp+1Ch+Size], ebx ; Size
.text:00402F7C                 call    realloc
.text:00402F81                 test    eax, eax
.text:00402F83                 jz      short loc_402F95
.text:00402F85
.text:00402F85 loc_402F85:                             ; CODE XREF: sub_402F40+57↓j
.text:00402F85                 mov     ebx, [esp+1Ch+var_C]
.text:00402F89                 mov     esi, [esp+1Ch+var_8]
.text:00402F8D                 mov     edi, [esp+1Ch+var_4]
.text:00402F91                 add     esp, 1Ch
.text:00402F94                 retn
.text:00402F95 ; ---------------------------------------------------------------------------
.text:00402F95
.text:00402F95 loc_402F95:                             ; CODE XREF: sub_402F40+43↑j
.text:00402F95                 test    ebx, ebx
.text:00402F97                 jz      short loc_402F85
.text:00402F99
.text:00402F99 loc_402F99:                             ; CODE XREF: sub_402F40+2C↑j
.text:00402F99                 call    sub_404930
.text:00402F99 ; ---------------------------------------------------------------------------
.text:00402F9E                 align 10h
.text:00402FA0
.text:00402FA0 loc_402FA0:                             ; CODE XREF: sub_402F40+1F↑j
.text:00402FA0                 test    ecx, ecx
.text:00402FA2                 jnz     short loc_402F70
.text:00402FA4                 xor     edx, edx
.text:00402FA6                 mov     eax, 40h ; '@'
.text:00402FAB                 div     ebx
.text:00402FAD                 test    eax, eax
.text:00402FAF                 mov     ecx, eax
.text:00402FB1                 jnz     short loc_402F70
.text:00402FB3                 mov     ecx, 1
.text:00402FB8                 jmp     short loc_402F70
.text:00402FB8 sub_402F40      endp
.text:00402FB8
.text:00402FB8 ; ---------------------------------------------------------------------------
.text:00402FBA                 align 10h
.text:00402FC0
.text:00402FC0 ; =============== S U B R O U T I N E =======================================
.text:00402FC0
.text:00402FC0
.text:00402FC0 sub_402FC0      proc near               ; CODE XREF: sub_4027E0+19↑p
.text:00402FC0                                         ; .text:0040286F↑p
.text:00402FC0
.text:00402FC0 arg_0           = dword ptr  4
.text:00402FC0
.text:00402FC0                 mov     ecx, [esp+arg_0]
.text:00402FC4                 movzx   eax, byte ptr [ecx]
.text:00402FC7                 test    al, al
.text:00402FC9                 jz      short loc_402FD1
.text:00402FCB                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:00402FCF                 jz      short loc_403017
.text:00402FD1
.text:00402FD1 loc_402FD1:                             ; CODE XREF: sub_402FC0+9↑j
.text:00402FD1                                         ; sub_402FC0+5D↓j
.text:00402FD1                 test    al, al
.text:00402FD3                 mov     edx, ecx
.text:00402FD5                 jz      short loc_402FF0
.text:00402FD7                 movzx   eax, byte ptr [ecx]
.text:00402FDA                 lea     esi, [esi+0]
.text:00402FE0
.text:00402FE0 loc_402FE0:                             ; CODE XREF: sub_402FC0+2E↓j
.text:00402FE0                 cmp     al, 2Fh ; '/'
.text:00402FE2                 jz      short loc_402FF3
.text:00402FE4                 cmp     al, 5Ch ; '\'
.text:00402FE6                 jz      short loc_402FF3
.text:00402FE8
.text:00402FE8 loc_402FE8:                             ; CODE XREF: sub_402FC0+45↓j
.text:00402FE8                 inc     edx
.text:00402FE9                 movzx   eax, byte ptr [edx]
.text:00402FEC                 test    al, al
.text:00402FEE                 jnz     short loc_402FE0
.text:00402FF0
.text:00402FF0 loc_402FF0:                             ; CODE XREF: sub_402FC0+15↑j
.text:00402FF0                                         ; sub_402FC0+50↓j ...
.text:00402FF0                 mov     eax, ecx
.text:00402FF2                 retn
.text:00402FF3 ; ---------------------------------------------------------------------------
.text:00402FF3
.text:00402FF3 loc_402FF3:                             ; CODE XREF: sub_402FC0+22↑j
.text:00402FF3                                         ; sub_402FC0+26↑j ...
.text:00402FF3                 inc     edx
.text:00402FF4                 movzx   eax, byte ptr [edx]
.text:00402FF7                 cmp     al, 2Fh ; '/'
.text:00402FF9                 jz      short loc_402FF3
.text:00402FFB                 cmp     al, 5Ch ; '\'
.text:00402FFD                 jz      short loc_402FF3
.text:00402FFF                 test    al, al
.text:00403001                 jz      short loc_403007
.text:00403003                 mov     ecx, edx
.text:00403005                 jmp     short loc_402FE8
.text:00403007 ; ---------------------------------------------------------------------------
.text:00403007
.text:00403007 loc_403007:                             ; CODE XREF: sub_402FC0+41↑j
.text:00403007                 movzx   eax, byte ptr [ecx]
.text:0040300A                 cmp     al, 2Fh ; '/'
.text:0040300C                 jz      short loc_403012
.text:0040300E                 cmp     al, 5Ch ; '\'
.text:00403010                 jnz     short loc_402FF0
.text:00403012
.text:00403012 loc_403012:                             ; CODE XREF: sub_402FC0+4C↑j
.text:00403012                 lea     ecx, [edx-1]
.text:00403015                 jmp     short loc_402FF0
.text:00403017 ; ---------------------------------------------------------------------------
.text:00403017
.text:00403017 loc_403017:                             ; CODE XREF: sub_402FC0+F↑j
.text:00403017                 add     ecx, 2
.text:0040301A                 movzx   eax, byte ptr [ecx]
.text:0040301D                 jmp     short loc_402FD1
.text:0040301D sub_402FC0      endp
.text:0040301D
.text:0040301D ; ---------------------------------------------------------------------------
.text:0040301F                 align 10h
.text:00403020                 push    ebx
.text:00403021                 sub     esp, 8
.text:00403024                 mov     ebx, [esp+10h]
.text:00403028                 mov     [esp], ebx
.text:0040302B                 call    strlen
.text:00403030                 cmp     eax, 1
.text:00403033                 jbe     short loc_403050
.text:00403035                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040303A                 cmp     dl, 2Fh ; '/'
.text:0040303D                 jz      short loc_403055
.text:0040303F                 cmp     dl, 5Ch ; '\'
.text:00403042                 jz      short loc_403055
.text:00403044                 lea     esi, [esi+0]
.text:0040304A                 lea     edi, [edi+0]
.text:00403050
.text:00403050 loc_403050:                             ; CODE XREF: .text:00403033↑j
.text:00403050                                         ; .text:00403059↓j ...
.text:00403050                 add     esp, 8
.text:00403053                 pop     ebx
.text:00403054                 retn
.text:00403055 ; ---------------------------------------------------------------------------
.text:00403055
.text:00403055 loc_403055:                             ; CODE XREF: .text:0040303D↑j
.text:00403055                                         ; .text:00403042↑j ...
.text:00403055                 dec     eax
.text:00403056                 cmp     eax, 1
.text:00403059                 jbe     short loc_403050
.text:0040305B                 movzx   edx, byte ptr [eax+ebx-1]
.text:00403060                 cmp     dl, 2Fh ; '/'
.text:00403063                 jz      short loc_403055
.text:00403065                 cmp     dl, 5Ch ; '\'
.text:00403068                 jz      short loc_403055
.text:0040306A                 jmp     short loc_403050
.text:0040306A ; ---------------------------------------------------------------------------
.text:0040306C                 align 10h
.text:00403070 aLiteral        db 'literal',0          ; DATA XREF: .text:004030B0↓o
.text:00403078 aShell          db 'shell',0            ; DATA XREF: .text:004030B4↓o
.text:0040307E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004030B8↓o
.text:0040308B aC              db 'c',0                ; DATA XREF: .text:004030BC↓o
.text:0040308D aEscape         db 'escape',0           ; DATA XREF: .text:004030C0↓o
.text:00403094 aLocale         db 'locale',0           ; DATA XREF: .text:004030C4↓o
.text:0040309B aClocale        db 'clocale',0          ; DATA XREF: .text:004030C8↓o
.text:004030A3                 align 10h
.text:004030B0                 dd offset aLiteral      ; "literal"
.text:004030B4                 dd offset aShell        ; "shell"
.text:004030B8                 dd offset aShellAlways  ; "shell-always"
.text:004030BC                 dd offset aC            ; "c"
.text:004030C0                 dd offset aEscape       ; "escape"
.text:004030C4                 dd offset aLocale       ; "locale"
.text:004030C8                 dd offset aClocale      ; "clocale"
.text:004030CC                 dd 2 dup(0)
.text:004030D4                 dd 1, 2, 3, 4, 5, 6
.text:004030EC asc_4030EC:                             ; DATA XREF: sub_403100+7E↓o
.text:004030EC                                         ; sub_403100+A39↓o ...
.text:004030EC                 text "UTF-16LE", '"',27h,'`'
.text:004030F2                 align 10h
.text:00403100
.text:00403100 ; =============== S U B R O U T I N E =======================================
.text:00403100
.text:00403100
.text:00403100 ; int __cdecl sub_403100(int, int, char *Str, int, int, int)
.text:00403100 sub_403100      proc near               ; CODE XREF: sub_403100+43A↓p
.text:00403100                                         ; .text:00403CC3↓p ...
.text:00403100
.text:00403100 C               = dword ptr -4Ch
.text:00403100 Type            = dword ptr -48h
.text:00403100 SizeInBytes     = dword ptr -44h
.text:00403100 State           = dword ptr -40h
.text:00403100 var_3C          = dword ptr -3Ch
.text:00403100 var_38          = dword ptr -38h
.text:00403100 var_34          = dword ptr -34h
.text:00403100 var_30          = dword ptr -30h
.text:00403100 var_29          = byte ptr -29h
.text:00403100 var_28          = dword ptr -28h
.text:00403100 var_22          = byte ptr -22h
.text:00403100 var_21          = byte ptr -21h
.text:00403100 var_20          = dword ptr -20h
.text:00403100 var_1C          = dword ptr -1Ch
.text:00403100 var_18          = mbstate_t ptr -18h
.text:00403100 arg_0           = dword ptr  4
.text:00403100 arg_4           = dword ptr  8
.text:00403100 Str             = dword ptr  0Ch
.text:00403100 arg_C           = dword ptr  10h
.text:00403100 arg_10          = dword ptr  14h
.text:00403100 arg_14          = dword ptr  18h
.text:00403100
.text:00403100                 push    ebp
.text:00403101                 push    edi
.text:00403102                 push    esi
.text:00403103                 push    ebx
.text:00403104                 sub     esp, 3Ch
.text:00403107                 mov     edx, ds:__mb_cur_max
.text:0040310D                 mov     [esp+4Ch+var_34], 0
.text:00403115                 mov     [esp+4Ch+var_1C], 0
.text:0040311D                 cmp     dword ptr [edx], 1
.text:00403120                 mov     [esp+4Ch+var_20], 0
.text:00403128                 mov     [esp+4Ch+var_21], 0
.text:0040312D                 setz    [esp+4Ch+var_22]
.text:00403132                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403137                 ja      short def_40313D ; jumptable 0040313D default case, cases 0,1
.text:00403139                 mov     edx, [esp+4Ch+arg_10]
.text:0040313D                 jmp     ds:jpt_40313D[edx*4] ; switch jump
.text:0040313D ; ---------------------------------------------------------------------------
.text:00403144 jpt_40313D      dd offset def_40313D    ; DATA XREF: sub_403100+3D↑r
.text:00403144                 dd offset def_40313D    ; jump table for switch statement
.text:00403144                 dd offset loc_403A85
.text:00403144                 dd offset loc_403160
.text:00403144                 dd offset loc_403AAB
.text:00403144                 dd offset loc_403AB5
.text:00403144                 dd offset loc_403AB5
.text:00403160 ; ---------------------------------------------------------------------------
.text:00403160
.text:00403160 loc_403160:                             ; CODE XREF: sub_403100+3D↑j
.text:00403160                                         ; DATA XREF: sub_403100:jpt_40313D↑o
.text:00403160                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040313D case 3
.text:00403164                 cmp     [esp+4Ch+var_34], eax
.text:00403168                 jnb     short loc_403171
.text:0040316A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040316E                 mov     byte ptr [ebx], 22h ; '"'
.text:00403171
.text:00403171 loc_403171:                             ; CODE XREF: sub_403100+68↑j
.text:00403171                 mov     [esp+4Ch+var_34], 1
.text:00403179                 mov     [esp+4Ch+var_21], 1
.text:0040317E                 mov     [esp+4Ch+var_1C], offset asc_4030EC ; "\"'`"
.text:00403186
.text:00403186 loc_403186:                             ; CODE XREF: sub_403100+9A6↓j
.text:00403186                 mov     [esp+4Ch+var_20], 1
.text:0040318E
.text:0040318E def_40313D:                             ; CODE XREF: sub_403100+37↑j
.text:0040318E                                         ; sub_403100+3D↑j ...
.text:0040318E                 xor     ebp, ebp        ; jumptable 0040313D default case, cases 0,1
.text:00403190
.text:00403190 loc_403190:                             ; CODE XREF: sub_403100+3DB↓j
.text:00403190                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403195                 jz      loc_403A77
.text:0040319B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040319F
.text:0040319F loc_40319F:                             ; CODE XREF: sub_403100+980↓j
.text:0040319F                 jz      loc_403A0E
.text:004031A5                 cmp     [esp+4Ch+var_21], 0
.text:004031AA                 jz      short loc_4031F0
.text:004031AC                 mov     esi, [esp+4Ch+var_20]
.text:004031B0                 test    esi, esi
.text:004031B2                 jz      short loc_4031F0
.text:004031B4                 mov     ecx, [esp+4Ch+var_20]
.text:004031B8                 lea     edi, [ecx+ebp]
.text:004031BB                 cmp     edi, [esp+4Ch+arg_C]
.text:004031BF                 ja      short loc_4031F0
.text:004031C1                 cld
.text:004031C2                 mov     ebx, [esp+4Ch+Str]
.text:004031C6                 mov     edi, [esp+4Ch+var_1C]
.text:004031CA                 add     ebx, ebp
.text:004031CC                 mov     esi, ebx
.text:004031CE                 cmp     ecx, ecx
.text:004031D0                 repe cmpsb
.text:004031D2                 jnz     short loc_4031F0
.text:004031D4                 mov     edx, [esp+4Ch+arg_4]
.text:004031D8                 cmp     [esp+4Ch+var_34], edx
.text:004031DC                 jnb     short loc_4031EA
.text:004031DE                 mov     ecx, [esp+4Ch+arg_0]
.text:004031E2                 mov     eax, [esp+4Ch+var_34]
.text:004031E6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004031EA
.text:004031EA loc_4031EA:                             ; CODE XREF: sub_403100+DC↑j
.text:004031EA                 inc     [esp+4Ch+var_34]
.text:004031EE                 mov     esi, esi
.text:004031F0
.text:004031F0 loc_4031F0:                             ; CODE XREF: sub_403100+AA↑j
.text:004031F0                                         ; sub_403100+B2↑j ...
.text:004031F0                 mov     edi, [esp+4Ch+Str]
.text:004031F4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004031F9                 movzx   eax, bl
.text:004031FC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004031FF                 ja      def_403205      ; jumptable 00403205 default case, cases 1-6,14-31,64
.text:00403205                 jmp     ds:jpt_403205[eax*4] ; switch jump
.text:00403205 ; ---------------------------------------------------------------------------
.text:0040320C jpt_403205      dd offset loc_403408, offset def_403205, offset def_403205
.text:0040320C                                         ; DATA XREF: sub_403100+105↑r
.text:0040320C                 dd offset def_403205, offset def_403205, offset def_403205 ; jump table for switch statement
.text:0040320C                 dd offset def_403205, offset loc_4034E0, offset loc_4034FE
.text:0040320C                 dd offset loc_403502, offset loc_403547, offset loc_40354B
.text:0040320C                 dd offset loc_40354F, offset loc_403553, offset def_403205
.text:0040320C                 dd offset def_403205, offset def_403205, offset def_403205
.text:0040320C                 dd offset def_403205, offset def_403205, offset def_403205
.text:0040320C                 dd offset def_403205, offset def_403205, offset def_403205
.text:0040320C                 dd offset def_403205, offset def_403205, offset def_403205
.text:0040320C                 dd offset def_403205, offset def_403205, offset def_403205
.text:0040320C                 dd offset def_403205, offset def_403205, offset loc_4039D8
.text:0040320C                 dd offset loc_4039D8, offset loc_4039D8, offset loc_4039FA
.text:0040320C                 dd offset loc_4039D8, offset def_403602, offset loc_4039D8
.text:0040320C                 dd offset loc_403557, offset loc_4039D8, offset loc_4039D8
.text:0040320C                 dd offset loc_4039D8, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset loc_4039D8
.text:0040320C                 dd offset loc_4039D8, offset loc_4039D8, offset loc_4039D8
.text:0040320C                 dd offset loc_4035BC, offset def_403205, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset loc_4039D8, offset loc_4039D1
.text:0040320C                 dd offset def_403602, offset loc_4039D8, offset def_403602
.text:0040320C                 dd offset loc_4039D8, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset loc_4039E8, offset loc_4039D8, offset loc_4039E8
.text:0040320C                 dd offset loc_4039FA
.text:00403408 ; ---------------------------------------------------------------------------
.text:00403408
.text:00403408 loc_403408:                             ; CODE XREF: sub_403100+105↑j
.text:00403408                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:00403408                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403205 case 0
.text:0040340D                 lea     eax, [ebp+1]
.text:00403410                 jz      loc_4034C0
.text:00403416                 mov     esi, [esp+4Ch+arg_4]
.text:0040341A                 cmp     [esp+4Ch+var_34], esi
.text:0040341E                 jnb     short loc_40342C
.text:00403420                 mov     eax, [esp+4Ch+arg_0]
.text:00403424                 mov     ebx, [esp+4Ch+var_34]
.text:00403428                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040342C
.text:0040342C loc_40342C:                             ; CODE XREF: sub_403100+31E↑j
.text:0040342C                 inc     [esp+4Ch+var_34]
.text:00403430                 mov     edx, [esp+4Ch+arg_4]
.text:00403434                 cmp     [esp+4Ch+var_34], edx
.text:00403438                 jnb     short loc_403446
.text:0040343A                 mov     edi, [esp+4Ch+arg_0]
.text:0040343E                 mov     ecx, [esp+4Ch+var_34]
.text:00403442                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403446
.text:00403446 loc_403446:                             ; CODE XREF: sub_403100+338↑j
.text:00403446                 inc     [esp+4Ch+var_34]
.text:0040344A                 mov     esi, [esp+4Ch+arg_4]
.text:0040344E                 cmp     [esp+4Ch+var_34], esi
.text:00403452                 jnb     short loc_403460
.text:00403454                 mov     ebx, [esp+4Ch+arg_0]
.text:00403458                 mov     eax, [esp+4Ch+var_34]
.text:0040345C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403460
.text:00403460 loc_403460:                             ; CODE XREF: sub_403100+352↑j
.text:00403460                 inc     [esp+4Ch+var_34]
.text:00403464                 mov     bl, 30h ; '0'
.text:00403466                 lea     esi, [esi+0]
.text:00403469                 lea     edi, [edi+0]
.text:00403470
.text:00403470 def_403602:                             ; CODE XREF: sub_403100+105↑j
.text:00403470                                         ; sub_403100+463↓j ...
.text:00403470                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:00403470                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:00403475                 lea     eax, [ebp+1]
.text:00403478                 jz      short loc_4034C0
.text:0040347A                 mov     cl, bl
.text:0040347C                 mov     edi, [esp+4Ch+arg_14]
.text:00403480                 mov     esi, 1
.text:00403485                 shr     cl, 5
.text:00403488                 movzx   edx, cl
.text:0040348B                 mov     ecx, ebx
.text:0040348D                 and     ecx, 1Fh
.text:00403490                 shl     esi, cl
.text:00403492                 test    [edi+edx*4+4], esi
.text:00403496                 jz      short loc_4034B2
.text:00403498
.text:00403498 loc_403498:                             ; CODE XREF: sub_403100+3FC↓j
.text:00403498                 mov     edx, [esp+4Ch+arg_4]
.text:0040349C                 cmp     [esp+4Ch+var_34], edx
.text:004034A0                 jnb     short loc_4034AE
.text:004034A2                 mov     edi, [esp+4Ch+arg_0]
.text:004034A6                 mov     esi, [esp+4Ch+var_34]
.text:004034AA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004034AE
.text:004034AE loc_4034AE:                             ; CODE XREF: sub_403100+3A0↑j
.text:004034AE                 inc     [esp+4Ch+var_34]
.text:004034B2
.text:004034B2 loc_4034B2:                             ; CODE XREF: sub_403100+396↑j
.text:004034B2                 lea     eax, [ebp+1]
.text:004034B5                 lea     esi, [esi+0]
.text:004034B9                 lea     edi, [edi+0]
.text:004034C0
.text:004034C0 loc_4034C0:                             ; CODE XREF: sub_403100+310↑j
.text:004034C0                                         ; sub_403100+378↑j ...
.text:004034C0                 mov     ebp, [esp+4Ch+arg_4]
.text:004034C4                 cmp     [esp+4Ch+var_34], ebp
.text:004034C8                 jnb     short loc_4034D5
.text:004034CA                 mov     edx, [esp+4Ch+arg_0]
.text:004034CE                 mov     ecx, [esp+4Ch+var_34]
.text:004034D2                 mov     [ecx+edx], bl
.text:004034D5
.text:004034D5 loc_4034D5:                             ; CODE XREF: sub_403100+3C8↑j
.text:004034D5                 inc     [esp+4Ch+var_34]
.text:004034D9                 mov     ebp, eax
.text:004034DB                 jmp     loc_403190
.text:004034E0 ; ---------------------------------------------------------------------------
.text:004034E0
.text:004034E0 loc_4034E0:                             ; CODE XREF: sub_403100+105↑j
.text:004034E0                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:004034E0                 mov     dl, 61h ; 'a'   ; jumptable 00403205 case 7
.text:004034E2                 lea     esi, [esi+0]
.text:004034E9                 lea     edi, [edi+0]
.text:004034F0
.text:004034F0 loc_4034F0:                             ; CODE XREF: sub_403100+400↓j
.text:004034F0                                         ; sub_403100+409↓j ...
.text:004034F0                 cmp     [esp+4Ch+var_21], 0
.text:004034F5                 lea     eax, [ebp+1]
.text:004034F8                 jz      short loc_4034C0
.text:004034FA                 mov     bl, dl
.text:004034FC                 jmp     short loc_403498
.text:004034FE ; ---------------------------------------------------------------------------
.text:004034FE
.text:004034FE loc_4034FE:                             ; CODE XREF: sub_403100+105↑j
.text:004034FE                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:004034FE                 mov     dl, 62h ; 'b'   ; jumptable 00403205 case 8
.text:00403500                 jmp     short loc_4034F0
.text:00403502 ; ---------------------------------------------------------------------------
.text:00403502
.text:00403502 loc_403502:                             ; CODE XREF: sub_403100+105↑j
.text:00403502                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:00403502                 mov     dl, 74h ; 't'   ; jumptable 00403205 case 9
.text:00403504
.text:00403504 loc_403504:                             ; CODE XREF: sub_403100+449↓j
.text:00403504                                         ; sub_403100+455↓j ...
.text:00403504                 cmp     [esp+4Ch+arg_10], 1
.text:00403509                 jnz     short loc_4034F0
.text:0040350B
.text:0040350B loc_40350B:                             ; CODE XREF: sub_403100+45C↓j
.text:0040350B                                         ; sub_403100+4C1↓j ...
.text:0040350B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004038D2 cases 91,92,94,96,124
.text:00403513                 mov     eax, [esp+4Ch+arg_14]
.text:00403517                 mov     edx, [esp+4Ch+arg_C]
.text:0040351B                 mov     ecx, [esp+4Ch+Str]
.text:0040351F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403523                 mov     [esp+4Ch+var_38], eax ; int
.text:00403527                 mov     ebp, [esp+4Ch+arg_0]
.text:0040352B                 mov     [esp+4Ch+State], edx ; int
.text:0040352F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403533                 mov     [esp+4Ch+Type], ebx ; int
.text:00403537                 mov     [esp+4Ch+C], ebp ; int
.text:0040353A                 call    sub_403100
.text:0040353F
.text:0040353F loc_40353F:                             ; CODE XREF: sub_403100+972↓j
.text:0040353F                 add     esp, 3Ch
.text:00403542                 pop     ebx
.text:00403543                 pop     esi
.text:00403544                 pop     edi
.text:00403545                 pop     ebp
.text:00403546                 retn
.text:00403547 ; ---------------------------------------------------------------------------
.text:00403547
.text:00403547 loc_403547:                             ; CODE XREF: sub_403100+105↑j
.text:00403547                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:00403547                 mov     dl, 6Eh ; 'n'   ; jumptable 00403205 case 10
.text:00403549                 jmp     short loc_403504
.text:0040354B ; ---------------------------------------------------------------------------
.text:0040354B
.text:0040354B loc_40354B:                             ; CODE XREF: sub_403100+105↑j
.text:0040354B                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:0040354B                 mov     dl, 76h ; 'v'   ; jumptable 00403205 case 11
.text:0040354D                 jmp     short loc_4034F0
.text:0040354F ; ---------------------------------------------------------------------------
.text:0040354F
.text:0040354F loc_40354F:                             ; CODE XREF: sub_403100+105↑j
.text:0040354F                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:0040354F                 mov     dl, 66h ; 'f'   ; jumptable 00403205 case 12
.text:00403551                 jmp     short loc_4034F0
.text:00403553 ; ---------------------------------------------------------------------------
.text:00403553
.text:00403553 loc_403553:                             ; CODE XREF: sub_403100+105↑j
.text:00403553                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:00403553                 mov     dl, 72h ; 'r'   ; jumptable 00403205 case 13
.text:00403555                 jmp     short loc_403504
.text:00403557 ; ---------------------------------------------------------------------------
.text:00403557
.text:00403557 loc_403557:                             ; CODE XREF: sub_403100+105↑j
.text:00403557                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:00403557                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403205 case 39
.text:0040355C                 jz      short loc_40350B ; jumptable 004038D2 cases 91,92,94,96,124
.text:0040355E                 cmp     [esp+4Ch+arg_10], 2
.text:00403563                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:00403563                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:00403569                 mov     edx, [esp+4Ch+arg_4]
.text:0040356D                 cmp     [esp+4Ch+var_34], edx
.text:00403571                 jnb     short loc_40357F
.text:00403573                 mov     ecx, [esp+4Ch+arg_0]
.text:00403577                 mov     edi, [esp+4Ch+var_34]
.text:0040357B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040357F
.text:0040357F loc_40357F:                             ; CODE XREF: sub_403100+471↑j
.text:0040357F                 inc     [esp+4Ch+var_34]
.text:00403583                 mov     eax, [esp+4Ch+arg_4]
.text:00403587                 cmp     [esp+4Ch+var_34], eax
.text:0040358B                 jnb     short loc_403599
.text:0040358D                 mov     esi, [esp+4Ch+arg_0]
.text:00403591                 mov     edx, [esp+4Ch+var_34]
.text:00403595                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403599
.text:00403599 loc_403599:                             ; CODE XREF: sub_403100+48B↑j
.text:00403599                 inc     [esp+4Ch+var_34]
.text:0040359D                 mov     edi, [esp+4Ch+arg_4]
.text:004035A1                 cmp     [esp+4Ch+var_34], edi
.text:004035A5                 jnb     short loc_4035B3
.text:004035A7                 mov     ecx, [esp+4Ch+arg_0]
.text:004035AB                 mov     eax, [esp+4Ch+var_34]
.text:004035AF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004035B3
.text:004035B3 loc_4035B3:                             ; CODE XREF: sub_403100+4A5↑j
.text:004035B3                                         ; sub_403100+5C4↓j ...
.text:004035B3                 inc     [esp+4Ch+var_34]
.text:004035B7                 jmp     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004035B7                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:004035BC ; ---------------------------------------------------------------------------
.text:004035BC
.text:004035BC loc_4035BC:                             ; CODE XREF: sub_403100+105↑j
.text:004035BC                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:004035BC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403205 case 63
.text:004035C1                 jz      loc_40350B      ; jumptable 004038D2 cases 91,92,94,96,124
.text:004035C7                 cmp     [esp+4Ch+arg_10], 3
.text:004035CC                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004035CC                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:004035D2                 lea     edx, [ebp+2]
.text:004035D5                 cmp     edx, [esp+4Ch+arg_C]
.text:004035D9                 jnb     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004035D9                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:004035DF                 mov     esi, [esp+4Ch+Str]
.text:004035E3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004035E8                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004035E8                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:004035EE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004035F3                 movsx   eax, cl
.text:004035F6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004035F9                 cmp     eax, 1Dh
.text:004035FC                 ja      def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004035FC                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:00403602                 jmp     ds:jpt_403602[eax*4] ; switch jump
.text:00403602 ; ---------------------------------------------------------------------------
.text:00403609                 align 4
.text:0040360C jpt_403602      dd offset loc_403684    ; DATA XREF: sub_403100+502↑r
.text:0040360C                 dd offset def_403602    ; jump table for switch statement
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset loc_403684
.text:00403684 ; ---------------------------------------------------------------------------
.text:00403684
.text:00403684 loc_403684:                             ; CODE XREF: sub_403100+502↑j
.text:00403684                                         ; DATA XREF: sub_403100:jpt_403602↑o
.text:00403684                 mov     ebp, edx        ; jumptable 00403602 cases 33,39-41,45,47,60-62
.text:00403686                 mov     bl, cl
.text:00403688                 mov     edx, [esp+4Ch+arg_4]
.text:0040368C                 cmp     [esp+4Ch+var_34], edx
.text:00403690                 jnb     short loc_40369E
.text:00403692                 mov     ecx, [esp+4Ch+arg_0]
.text:00403696                 mov     edi, [esp+4Ch+var_34]
.text:0040369A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040369E
.text:0040369E loc_40369E:                             ; CODE XREF: sub_403100+590↑j
.text:0040369E                 inc     [esp+4Ch+var_34]
.text:004036A2                 mov     eax, [esp+4Ch+arg_4]
.text:004036A6                 cmp     [esp+4Ch+var_34], eax
.text:004036AA                 jnb     short loc_4036B8
.text:004036AC                 mov     edx, [esp+4Ch+arg_0]
.text:004036B0                 mov     esi, [esp+4Ch+var_34]
.text:004036B4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004036B8
.text:004036B8 loc_4036B8:                             ; CODE XREF: sub_403100+5AA↑j
.text:004036B8                 inc     [esp+4Ch+var_34]
.text:004036BC                 mov     edi, [esp+4Ch+arg_4]
.text:004036C0                 cmp     [esp+4Ch+var_34], edi
.text:004036C4                 jnb     loc_4035B3
.text:004036CA                 mov     eax, [esp+4Ch+arg_0]
.text:004036CE                 mov     ecx, [esp+4Ch+var_34]
.text:004036D2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004036D6                 jmp     loc_4035B3
.text:004036D6 ; ---------------------------------------------------------------------------
.text:004036DB                 align 10h
.text:004036E0
.text:004036E0 def_403205:                             ; CODE XREF: sub_403100+FF↑j
.text:004036E0                                         ; sub_403100+105↑j
.text:004036E0                                         ; DATA XREF: ...
.text:004036E0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403205 default case, cases 1-6,14-31,64
.text:004036E5                 jz      loc_403810
.text:004036EB                 mov     [esp+4Ch+var_28], 1
.text:004036F3                 mov     esi, ds:__mb_cur_max
.text:004036F9                 movzx   edx, bl
.text:004036FC                 cmp     dword ptr [esi], 1
.text:004036FF                 jz      loc_4037F4
.text:00403705                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040370D                 mov     [esp+4Ch+C], edx ; C
.text:00403710                 call    _isctype
.text:00403715
.text:00403715 loc_403715:                             ; CODE XREF: sub_403100+705↓j
.text:00403715                 test    eax, eax
.text:00403717                 setnz   [esp+4Ch+var_29]
.text:0040371C
.text:0040371C loc_40371C:                             ; CODE XREF: sub_403100+7A5↓j
.text:0040371C                 cmp     [esp+4Ch+var_21], 0
.text:00403721                 lea     eax, [ebp+1]
.text:00403724                 jz      loc_4034C0
.text:0040372A                 cmp     [esp+4Ch+var_29], 0
.text:0040372F                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:0040372F                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:00403735
.text:00403735 loc_403735:                             ; CODE XREF: sub_403100+7AB↓j
.text:00403735                 mov     eax, [esp+4Ch+var_28]
.text:00403739                 lea     edx, [eax+ebp]
.text:0040373C                 lea     esi, [esi+0]
.text:00403740
.text:00403740 loc_403740:                             ; CODE XREF: sub_403100+6EF↓j
.text:00403740                 cmp     [esp+4Ch+var_21], 0
.text:00403745                 jz      short loc_4037C0
.text:00403747                 cmp     [esp+4Ch+var_29], 0
.text:0040374C                 jnz     short loc_4037C0
.text:0040374E                 mov     edi, [esp+4Ch+arg_4]
.text:00403752                 cmp     [esp+4Ch+var_34], edi
.text:00403756                 jnb     short loc_403764
.text:00403758                 mov     esi, [esp+4Ch+arg_0]
.text:0040375C                 mov     eax, [esp+4Ch+var_34]
.text:00403760                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403764
.text:00403764 loc_403764:                             ; CODE XREF: sub_403100+656↑j
.text:00403764                 inc     [esp+4Ch+var_34]
.text:00403768                 mov     ecx, [esp+4Ch+arg_4]
.text:0040376C                 cmp     [esp+4Ch+var_34], ecx
.text:00403770                 jnb     short loc_403785
.text:00403772                 mov     cl, bl
.text:00403774                 mov     esi, [esp+4Ch+arg_0]
.text:00403778                 mov     edi, [esp+4Ch+var_34]
.text:0040377C                 shr     cl, 6
.text:0040377F                 add     cl, 30h ; '0'
.text:00403782                 mov     [edi+esi], cl
.text:00403785
.text:00403785 loc_403785:                             ; CODE XREF: sub_403100+670↑j
.text:00403785                 inc     [esp+4Ch+var_34]
.text:00403789                 mov     edi, [esp+4Ch+arg_4]
.text:0040378D                 cmp     [esp+4Ch+var_34], edi
.text:00403791                 jnb     short loc_4037A9
.text:00403793                 mov     cl, bl
.text:00403795                 mov     esi, [esp+4Ch+arg_0]
.text:00403799                 shr     cl, 3
.text:0040379C                 mov     edi, [esp+4Ch+var_34]
.text:004037A0                 and     cl, 7
.text:004037A3                 add     cl, 30h ; '0'
.text:004037A6                 mov     [edi+esi], cl
.text:004037A9
.text:004037A9 loc_4037A9:                             ; CODE XREF: sub_403100+691↑j
.text:004037A9                 inc     [esp+4Ch+var_34]
.text:004037AD                 and     bl, 7
.text:004037B0                 add     bl, 30h ; '0'
.text:004037B3                 lea     esi, [esi+0]
.text:004037B9                 lea     edi, [edi+0]
.text:004037C0
.text:004037C0 loc_4037C0:                             ; CODE XREF: sub_403100+645↑j
.text:004037C0                                         ; sub_403100+64C↑j
.text:004037C0                 lea     eax, [ebp+1]
.text:004037C3                 cmp     edx, eax
.text:004037C5                 jbe     loc_4034C0
.text:004037CB                 mov     ebp, [esp+4Ch+arg_4]
.text:004037CF                 cmp     [esp+4Ch+var_34], ebp
.text:004037D3                 jnb     short loc_4037E0
.text:004037D5                 mov     ecx, [esp+4Ch+arg_0]
.text:004037D9                 mov     edi, [esp+4Ch+var_34]
.text:004037DD                 mov     [edi+ecx], bl
.text:004037E0
.text:004037E0 loc_4037E0:                             ; CODE XREF: sub_403100+6D3↑j
.text:004037E0                 inc     [esp+4Ch+var_34]
.text:004037E4                 mov     ebp, eax
.text:004037E6                 mov     eax, [esp+4Ch+Str]
.text:004037EA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004037EF                 jmp     loc_403740
.text:004037F4 ; ---------------------------------------------------------------------------
.text:004037F4
.text:004037F4 loc_4037F4:                             ; CODE XREF: sub_403100+5FF↑j
.text:004037F4                 mov     ecx, ds:_pctype
.text:004037FA                 mov     edi, [ecx]
.text:004037FC                 movzx   eax, word ptr [edi+edx*2]
.text:00403800                 and     eax, 157h
.text:00403805                 jmp     loc_403715
.text:00403805 ; ---------------------------------------------------------------------------
.text:0040380A                 align 10h
.text:00403810
.text:00403810 loc_403810:                             ; CODE XREF: sub_403100+5E5↑j
.text:00403810                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403815                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040381D                 mov     [esp+4Ch+var_28], 0
.text:00403825                 mov     [esp+4Ch+var_29], 1
.text:0040382A                 jz      loc_4039BC
.text:00403830
.text:00403830 loc_403830:                             ; CODE XREF: sub_403100+8CC↓j
.text:00403830                 mov     ecx, [esp+4Ch+arg_C]
.text:00403834                 lea     edx, [esp+4Ch+var_18]
.text:00403838                 mov     edi, [esp+4Ch+Str]
.text:0040383C                 mov     [esp+4Ch+State], edx ; State
.text:00403840                 lea     esi, [esp+4Ch+var_18._State]
.text:00403844                 sub     ecx, ebp
.text:00403846                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040384A                 add     edi, ebp
.text:0040384C                 mov     [esp+4Ch+var_30], edi
.text:00403850                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403854                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403857                 call    mbrtowc
.text:0040385C                 test    eax, eax
.text:0040385E                 mov     edi, eax
.text:00403860                 jz      short loc_4038A0
.text:00403862                 cmp     eax, 0FFFFFFFFh
.text:00403865                 jz      loc_4039B2
.text:0040386B                 cmp     eax, 0FFFFFFFEh
.text:0040386E                 jz      loc_403972
.text:00403874                 cmp     [esp+4Ch+arg_10], 1
.text:00403879                 jz      short loc_4038B0
.text:0040387B
.text:0040387B loc_40387B:                             ; CODE XREF: sub_403100+7B9↓j
.text:0040387B                                         ; sub_403100+86D↓j
.text:0040387B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403880                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403888                 mov     [esp+4Ch+C], ecx ; C
.text:0040388B                 call    iswctype
.text:00403890                 test    eax, eax
.text:00403892                 jnz     short loc_403899
.text:00403894                 mov     [esp+4Ch+var_29], 0
.text:00403899
.text:00403899 loc_403899:                             ; CODE XREF: sub_403100+792↑j
.text:00403899                 mov     [esp+4Ch+var_28], edi
.text:0040389D                 lea     esi, [esi+0]
.text:004038A0
.text:004038A0 loc_4038A0:                             ; CODE XREF: sub_403100+760↑j
.text:004038A0                                         ; sub_403100+87B↓j ...
.text:004038A0                 cmp     [esp+4Ch+var_28], 1
.text:004038A5                 jbe     loc_40371C
.text:004038AB                 jmp     loc_403735
.text:004038B0 ; ---------------------------------------------------------------------------
.text:004038B0
.text:004038B0 loc_4038B0:                             ; CODE XREF: sub_403100+779↑j
.text:004038B0                 cmp     [esp+4Ch+arg_10], eax
.text:004038B4                 mov     edx, 1
.text:004038B9                 jnb     short loc_40387B
.text:004038BB
.text:004038BB loc_4038BB:                             ; CODE XREF: sub_403100+867↓j
.text:004038BB                 mov     ecx, [esp+4Ch+Str]
.text:004038BF                 lea     esi, [edx+ebp]
.text:004038C2                 movsx   eax, byte ptr [esi+ecx]
.text:004038C6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004038C9                 cmp     eax, 21h
.text:004038CC                 ja      def_4038D2      ; jumptable 004038D2 default case, cases 93,95,97-123
.text:004038D2                 jmp     ds:jpt_4038D2[eax*4] ; switch jump
.text:004038D2 ; ---------------------------------------------------------------------------
.text:004038D9                 align 4
.text:004038DC jpt_4038D2      dd offset loc_40350B    ; DATA XREF: sub_403100+7D2↑r
.text:004038DC                 dd offset loc_40350B    ; jump table for switch statement
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset loc_40350B
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset loc_40350B
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset loc_40350B
.text:00403964 ; ---------------------------------------------------------------------------
.text:00403964
.text:00403964 def_4038D2:                             ; CODE XREF: sub_403100+7CC↑j
.text:00403964                                         ; sub_403100+7D2↑j
.text:00403964                                         ; DATA XREF: ...
.text:00403964                 inc     edx             ; jumptable 004038D2 default case, cases 93,95,97-123
.text:00403965                 cmp     edx, edi
.text:00403967                 jb      loc_4038BB
.text:0040396D                 jmp     loc_40387B
.text:00403972 ; ---------------------------------------------------------------------------
.text:00403972
.text:00403972 loc_403972:                             ; CODE XREF: sub_403100+76E↑j
.text:00403972                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403976                 mov     [esp+4Ch+var_29], 0
.text:0040397B                 jnb     loc_4038A0
.text:00403981                 mov     eax, [esp+4Ch+var_30]
.text:00403985                 cmp     byte ptr [eax], 0
.text:00403988                 jz      loc_4038A0
.text:0040398E
.text:0040398E loc_40398E:                             ; CODE XREF: sub_403100+8AB↓j
.text:0040398E                 inc     [esp+4Ch+var_28]
.text:00403992                 mov     esi, [esp+4Ch+var_28]
.text:00403996                 lea     eax, [esi+ebp]
.text:00403999                 cmp     eax, [esp+4Ch+arg_C]
.text:0040399D                 jnb     loc_4038A0
.text:004039A3                 mov     edi, [esp+4Ch+Str]
.text:004039A7                 cmp     byte ptr [eax+edi], 0
.text:004039AB                 jnz     short loc_40398E
.text:004039AD                 jmp     loc_4038A0
.text:004039B2 ; ---------------------------------------------------------------------------
.text:004039B2
.text:004039B2 loc_4039B2:                             ; CODE XREF: sub_403100+765↑j
.text:004039B2                 mov     [esp+4Ch+var_29], 0
.text:004039B7                 jmp     loc_4038A0
.text:004039BC ; ---------------------------------------------------------------------------
.text:004039BC
.text:004039BC loc_4039BC:                             ; CODE XREF: sub_403100+72A↑j
.text:004039BC                 mov     edx, [esp+4Ch+Str]
.text:004039C0                 mov     [esp+4Ch+C], edx ; Str
.text:004039C3                 call    strlen
.text:004039C8                 mov     [esp+4Ch+arg_C], eax
.text:004039CC                 jmp     loc_403830
.text:004039D1 ; ---------------------------------------------------------------------------
.text:004039D1
.text:004039D1 loc_4039D1:                             ; CODE XREF: sub_403100+105↑j
.text:004039D1                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:004039D1                 mov     dl, bl          ; jumptable 00403205 case 92
.text:004039D3                 jmp     loc_403504
.text:004039D8 ; ---------------------------------------------------------------------------
.text:004039D8
.text:004039D8 loc_4039D8:                             ; CODE XREF: sub_403100+105↑j
.text:004039D8                                         ; sub_403100+902↓j
.text:004039D8                                         ; DATA XREF: ...
.text:004039D8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403205 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004039DD                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004039DD                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:004039E3                 jmp     loc_40350B      ; jumptable 004038D2 cases 91,92,94,96,124
.text:004039E8 ; ---------------------------------------------------------------------------
.text:004039E8
.text:004039E8 loc_4039E8:                             ; CODE XREF: sub_403100+105↑j
.text:004039E8                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:004039E8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403205 cases 123,125
.text:004039ED                 jz      short loc_403A04
.text:004039EF                 cmp     [esp+4Ch+arg_C], 1
.text:004039F4
.text:004039F4 loc_4039F4:                             ; CODE XREF: sub_403100+90C↓j
.text:004039F4                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004039F4                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:004039FA
.text:004039FA loc_4039FA:                             ; CODE XREF: sub_403100+105↑j
.text:004039FA                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:004039FA                 test    ebp, ebp        ; jumptable 00403205 cases 35,126
.text:004039FC                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004039FC                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:00403A02                 jmp     short loc_4039D8 ; jumptable 00403205 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403A04 ; ---------------------------------------------------------------------------
.text:00403A04
.text:00403A04 loc_403A04:                             ; CODE XREF: sub_403100+8ED↑j
.text:00403A04                 mov     esi, [esp+4Ch+Str]
.text:00403A08                 cmp     byte ptr [esi+1], 0
.text:00403A0C                 jmp     short loc_4039F4
.text:00403A0E ; ---------------------------------------------------------------------------
.text:00403A0E
.text:00403A0E loc_403A0E:                             ; CODE XREF: sub_403100:loc_40319F↑j
.text:00403A0E                 test    ebp, ebp
.text:00403A10                 jnz     short loc_403A1D
.text:00403A12                 cmp     [esp+4Ch+arg_10], 1
.text:00403A17                 jz      loc_40350B      ; jumptable 004038D2 cases 91,92,94,96,124
.text:00403A1D
.text:00403A1D loc_403A1D:                             ; CODE XREF: sub_403100+910↑j
.text:00403A1D                 mov     esi, [esp+4Ch+var_1C]
.text:00403A21                 test    esi, esi
.text:00403A23                 jz      short loc_403A58
.text:00403A25                 mov     edi, [esp+4Ch+var_1C]
.text:00403A29                 movzx   eax, byte ptr [edi]
.text:00403A2C                 test    al, al
.text:00403A2E                 jz      short loc_403A58
.text:00403A30
.text:00403A30 loc_403A30:                             ; CODE XREF: sub_403100+956↓j
.text:00403A30                 mov     ebp, [esp+4Ch+arg_4]
.text:00403A34                 cmp     [esp+4Ch+var_34], ebp
.text:00403A38                 jnb     short loc_403A45
.text:00403A3A                 mov     ecx, [esp+4Ch+arg_0]
.text:00403A3E                 mov     ebx, [esp+4Ch+var_34]
.text:00403A42                 mov     [ebx+ecx], al
.text:00403A45
.text:00403A45 loc_403A45:                             ; CODE XREF: sub_403100+938↑j
.text:00403A45                 inc     [esp+4Ch+var_1C]
.text:00403A49                 inc     [esp+4Ch+var_34]
.text:00403A4D                 mov     edx, [esp+4Ch+var_1C]
.text:00403A51                 movzx   eax, byte ptr [edx]
.text:00403A54                 test    al, al
.text:00403A56                 jnz     short loc_403A30
.text:00403A58
.text:00403A58 loc_403A58:                             ; CODE XREF: sub_403100+923↑j
.text:00403A58                                         ; sub_403100+92E↑j
.text:00403A58                 mov     eax, [esp+4Ch+arg_4]
.text:00403A5C                 cmp     [esp+4Ch+var_34], eax
.text:00403A60                 jnb     short loc_403A6E
.text:00403A62                 mov     edi, [esp+4Ch+arg_0]
.text:00403A66                 mov     esi, [esp+4Ch+var_34]
.text:00403A6A                 mov     byte ptr [esi+edi], 0
.text:00403A6E
.text:00403A6E loc_403A6E:                             ; CODE XREF: sub_403100+960↑j
.text:00403A6E                 mov     eax, [esp+4Ch+var_34]
.text:00403A72                 jmp     loc_40353F
.text:00403A77 ; ---------------------------------------------------------------------------
.text:00403A77
.text:00403A77 loc_403A77:                             ; CODE XREF: sub_403100+95↑j
.text:00403A77                 mov     ebx, [esp+4Ch+Str]
.text:00403A7B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403A80                 jmp     loc_40319F
.text:00403A85 ; ---------------------------------------------------------------------------
.text:00403A85
.text:00403A85 loc_403A85:                             ; CODE XREF: sub_403100+3D↑j
.text:00403A85                                         ; DATA XREF: sub_403100:jpt_40313D↑o
.text:00403A85                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040313D case 2
.text:00403A89                 cmp     [esp+4Ch+var_34], edx
.text:00403A8D                 jnb     short loc_403A96
.text:00403A8F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403A93                 mov     byte ptr [ecx], 27h ; '''
.text:00403A96
.text:00403A96 loc_403A96:                             ; CODE XREF: sub_403100+98D↑j
.text:00403A96                 mov     [esp+4Ch+var_34], 1
.text:00403A9E                 mov     [esp+4Ch+var_1C], 4030EEh
.text:00403AA6                 jmp     loc_403186
.text:00403AAB ; ---------------------------------------------------------------------------
.text:00403AAB
.text:00403AAB loc_403AAB:                             ; CODE XREF: sub_403100+3D↑j
.text:00403AAB                                         ; DATA XREF: sub_403100:jpt_40313D↑o
.text:00403AAB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040313D case 4
.text:00403AB0                 jmp     def_40313D      ; jumptable 0040313D default case, cases 0,1
.text:00403AB5 ; ---------------------------------------------------------------------------
.text:00403AB5
.text:00403AB5 loc_403AB5:                             ; CODE XREF: sub_403100+3D↑j
.text:00403AB5                                         ; DATA XREF: sub_403100:jpt_40313D↑o
.text:00403AB5                 mov     [esp+4Ch+C], 4030F0h ; jumptable 0040313D cases 5,6
.text:00403ABC                 call    ds:libintl_gettext
.text:00403AC2                 cmp     eax, 4030F0h
.text:00403AC7                 mov     edi, eax
.text:00403AC9                 jz      short loc_403B40
.text:00403ACB
.text:00403ACB loc_403ACB:                             ; CODE XREF: sub_403100+A45↓j
.text:00403ACB                                         ; sub_403100+A4C↓j
.text:00403ACB                 mov     [esp+4Ch+C], 4030EEh
.text:00403AD2                 call    ds:libintl_gettext
.text:00403AD8                 cmp     eax, 4030EEh
.text:00403ADD                 mov     edx, eax
.text:00403ADF                 jz      short loc_403B32
.text:00403AE1
.text:00403AE1 loc_403AE1:                             ; CODE XREF: sub_403100+A37↓j
.text:00403AE1                                         ; sub_403100+A3E↓j
.text:00403AE1                 mov     [esp+4Ch+var_1C], edi
.text:00403AE5                 cmp     byte ptr [edi], 0
.text:00403AE8                 jz      short loc_403B18
.text:00403AEA
.text:00403AEA loc_403AEA:                             ; CODE XREF: sub_403100+A16↓j
.text:00403AEA                 mov     ecx, [esp+4Ch+arg_4]
.text:00403AEE                 cmp     [esp+4Ch+var_34], ecx
.text:00403AF2                 jnb     short loc_403B07
.text:00403AF4                 mov     ebp, [esp+4Ch+var_1C]
.text:00403AF8                 mov     edi, [esp+4Ch+arg_0]
.text:00403AFC                 mov     esi, [esp+4Ch+var_34]
.text:00403B00                 movzx   ebx, byte ptr [ebp+0]
.text:00403B04                 mov     [esi+edi], bl
.text:00403B07
.text:00403B07 loc_403B07:                             ; CODE XREF: sub_403100+9F2↑j
.text:00403B07                 inc     [esp+4Ch+var_1C]
.text:00403B0B                 inc     [esp+4Ch+var_34]
.text:00403B0F                 mov     eax, [esp+4Ch+var_1C]
.text:00403B13                 cmp     byte ptr [eax], 0
.text:00403B16                 jnz     short loc_403AEA
.text:00403B18
.text:00403B18 loc_403B18:                             ; CODE XREF: sub_403100+9E8↑j
.text:00403B18                 mov     [esp+4Ch+var_21], 1
.text:00403B1D                 mov     [esp+4Ch+var_1C], edx
.text:00403B21                 mov     [esp+4Ch+C], edx ; Str
.text:00403B24                 call    strlen
.text:00403B29                 mov     [esp+4Ch+var_20], eax
.text:00403B2D                 jmp     def_40313D      ; jumptable 0040313D default case, cases 0,1
.text:00403B32 ; ---------------------------------------------------------------------------
.text:00403B32
.text:00403B32 loc_403B32:                             ; CODE XREF: sub_403100+9DF↑j
.text:00403B32                 cmp     [esp+4Ch+arg_10], 6
.text:00403B37                 jnz     short loc_403AE1
.text:00403B39                 mov     edx, offset asc_4030EC ; "\"'`"
.text:00403B3E                 jmp     short loc_403AE1
.text:00403B40 ; ---------------------------------------------------------------------------
.text:00403B40
.text:00403B40 loc_403B40:                             ; CODE XREF: sub_403100+9C9↑j
.text:00403B40                 cmp     [esp+4Ch+arg_10], 6
.text:00403B45                 jnz     short loc_403ACB
.text:00403B47                 mov     edi, offset asc_4030EC ; "\"'`"
.text:00403B4C                 jmp     loc_403ACB
.text:00403B4C sub_403100      endp
.text:00403B4C
.text:00403B51 ; ---------------------------------------------------------------------------
.text:00403B51                 jmp     short loc_403B60
.text:00403B51 ; ---------------------------------------------------------------------------
.text:00403B53                 align 10h
.text:00403B60
.text:00403B60 loc_403B60:                             ; CODE XREF: .text:00403B51↑j
.text:00403B60                 sub     esp, 0Ch
.text:00403B63                 mov     [esp+4], ebx
.text:00403B67                 mov     [esp+8], esi
.text:00403B6B                 call    _errno
.text:00403B70                 mov     esi, [eax]
.text:00403B72                 mov     dword ptr [esp], 24h ; '$'
.text:00403B79                 call    sub_402D30
.text:00403B7E                 mov     edx, [esp+10h]
.text:00403B82                 mov     ebx, eax
.text:00403B84                 test    edx, edx
.text:00403B86                 jz      short loc_403BD1
.text:00403B88
.text:00403B88 loc_403B88:                             ; CODE XREF: .text:00403BD6↓j
.text:00403B88                 mov     ecx, [edx]
.text:00403B8A                 mov     [ebx], ecx
.text:00403B8C                 mov     ecx, [edx+4]
.text:00403B8F                 mov     [ebx+4], ecx
.text:00403B92                 mov     ecx, [edx+8]
.text:00403B95                 mov     [ebx+8], ecx
.text:00403B98                 mov     ecx, [edx+0Ch]
.text:00403B9B                 mov     [ebx+0Ch], ecx
.text:00403B9E                 mov     ecx, [edx+10h]
.text:00403BA1                 mov     [ebx+10h], ecx
.text:00403BA4                 mov     ecx, [edx+14h]
.text:00403BA7                 mov     [ebx+14h], ecx
.text:00403BAA                 mov     ecx, [edx+18h]
.text:00403BAD                 mov     [ebx+18h], ecx
.text:00403BB0                 mov     ecx, [edx+1Ch]
.text:00403BB3                 mov     [ebx+1Ch], ecx
.text:00403BB6                 mov     ecx, [edx+20h]
.text:00403BB9                 mov     [ebx+20h], ecx
.text:00403BBC                 call    _errno
.text:00403BC1                 mov     [eax], esi
.text:00403BC3                 mov     esi, [esp+8]
.text:00403BC7                 mov     eax, ebx
.text:00403BC9                 mov     ebx, [esp+4]
.text:00403BCD                 add     esp, 0Ch
.text:00403BD0                 retn
.text:00403BD1 ; ---------------------------------------------------------------------------
.text:00403BD1
.text:00403BD1 loc_403BD1:                             ; CODE XREF: .text:00403B86↑j
.text:00403BD1                 mov     edx, offset dword_407140
.text:00403BD6                 jmp     short loc_403B88
.text:00403BD6 ; ---------------------------------------------------------------------------
.text:00403BD8                 align 10h
.text:00403BE0                 mov     eax, [esp+4]
.text:00403BE4                 test    eax, eax
.text:00403BE6                 jz      short loc_403BF0
.text:00403BE8
.text:00403BE8 loc_403BE8:                             ; CODE XREF: .text:00403BF5↓j
.text:00403BE8                 mov     eax, [eax]
.text:00403BEA                 retn
.text:00403BEA ; ---------------------------------------------------------------------------
.text:00403BEB                 align 10h
.text:00403BF0
.text:00403BF0 loc_403BF0:                             ; CODE XREF: .text:00403BE6↑j
.text:00403BF0                 mov     eax, offset dword_407140
.text:00403BF5                 jmp     short loc_403BE8
.text:00403BF5 ; ---------------------------------------------------------------------------
.text:00403BF7                 align 10h
.text:00403C00                 mov     edx, [esp+4]
.text:00403C04                 test    edx, edx
.text:00403C06                 jz      short loc_403C10
.text:00403C08
.text:00403C08 loc_403C08:                             ; CODE XREF: .text:00403C15↓j
.text:00403C08                 mov     ecx, [esp+8]
.text:00403C0C                 mov     [edx], ecx
.text:00403C0E                 retn
.text:00403C0E ; ---------------------------------------------------------------------------
.text:00403C0F                 align 10h
.text:00403C10
.text:00403C10 loc_403C10:                             ; CODE XREF: .text:00403C06↑j
.text:00403C10                 mov     edx, offset dword_407140
.text:00403C15                 jmp     short loc_403C08
.text:00403C15 ; ---------------------------------------------------------------------------
.text:00403C17                 align 10h
.text:00403C20                 sub     esp, 8
.text:00403C23                 mov     eax, [esp+0Ch]
.text:00403C27                 movzx   ecx, byte ptr [esp+10h]
.text:00403C2C                 mov     [esp], ebx
.text:00403C2F                 mov     ebx, [esp+14h]
.text:00403C33                 mov     [esp+4], esi
.text:00403C37                 mov     dl, cl
.text:00403C39                 shr     dl, 5
.text:00403C3C                 movzx   edx, dl
.text:00403C3F                 shl     edx, 2
.text:00403C42                 test    eax, eax
.text:00403C44                 lea     esi, [edx+eax+4]
.text:00403C48                 jz      short loc_403C70
.text:00403C4A
.text:00403C4A loc_403C4A:                             ; CODE XREF: .text:00403C76↓j
.text:00403C4A                 mov     edx, [esi]
.text:00403C4C                 and     ecx, 1Fh
.text:00403C4F                 and     ebx, 1
.text:00403C52                 mov     eax, edx
.text:00403C54                 shr     eax, cl
.text:00403C56                 and     eax, 1
.text:00403C59                 xor     ebx, eax
.text:00403C5B                 shl     ebx, cl
.text:00403C5D                 xor     edx, ebx
.text:00403C5F                 mov     [esi], edx
.text:00403C61                 mov     ebx, [esp]
.text:00403C64                 mov     esi, [esp+4]
.text:00403C68                 add     esp, 8
.text:00403C6B                 retn
.text:00403C6B ; ---------------------------------------------------------------------------
.text:00403C6C                 align 10h
.text:00403C70
.text:00403C70 loc_403C70:                             ; CODE XREF: .text:00403C48↑j
.text:00403C70                 lea     esi, dword_407144[edx]
.text:00403C76                 jmp     short loc_403C4A
.text:00403C76 ; ---------------------------------------------------------------------------
.text:00403C78                 align 10h
.text:00403C80                 sub     esp, 2Ch
.text:00403C83                 mov     [esp+24h], ebx
.text:00403C87                 mov     ebx, [esp+40h]
.text:00403C8B                 mov     [esp+28h], esi
.text:00403C8F                 test    ebx, ebx
.text:00403C91                 jz      short loc_403CE0
.text:00403C93
.text:00403C93 loc_403C93:                             ; CODE XREF: .text:00403CE5↓j
.text:00403C93                 call    _errno
.text:00403C98                 mov     esi, [eax]
.text:00403C9A                 mov     [esp+14h], ebx
.text:00403C9E                 mov     edx, [ebx]
.text:00403CA0                 mov     ecx, [esp+38h]
.text:00403CA4                 mov     ebx, [esp+3Ch]
.text:00403CA8                 mov     [esp+10h], edx
.text:00403CAC                 mov     edx, [esp+34h]
.text:00403CB0                 mov     [esp+0Ch], ebx
.text:00403CB4                 mov     [esp+8], ecx
.text:00403CB8                 mov     [esp+4], edx
.text:00403CBC                 mov     edx, [esp+30h]
.text:00403CC0                 mov     [esp], edx
.text:00403CC3                 call    sub_403100
.text:00403CC8                 mov     ebx, eax
.text:00403CCA                 call    _errno
.text:00403CCF                 mov     [eax], esi
.text:00403CD1                 mov     esi, [esp+28h]
.text:00403CD5                 mov     eax, ebx
.text:00403CD7                 mov     ebx, [esp+24h]
.text:00403CDB                 add     esp, 2Ch
.text:00403CDE                 retn
.text:00403CDE ; ---------------------------------------------------------------------------
.text:00403CDF                 align 10h
.text:00403CE0
.text:00403CE0 loc_403CE0:                             ; CODE XREF: .text:00403C91↑j
.text:00403CE0                 mov     ebx, offset dword_407140
.text:00403CE5                 jmp     short loc_403C93
.text:00403CE5 ; ---------------------------------------------------------------------------
.text:00403CE7                 align 10h
.text:00403CF0                 push    ebp
.text:00403CF1                 push    edi
.text:00403CF2                 push    esi
.text:00403CF3                 push    ebx
.text:00403CF4                 sub     esp, 2Ch
.text:00403CF7                 mov     ebp, [esp+48h]
.text:00403CFB                 call    _errno
.text:00403D00                 mov     edx, [eax]
.text:00403D02                 test    ebp, ebp
.text:00403D04                 mov     ebx, ebp
.text:00403D06                 mov     [esp+28h], edx
.text:00403D0A                 jz      loc_403DC0
.text:00403D10
.text:00403D10 loc_403D10:                             ; CODE XREF: .text:00403DC5↓j
.text:00403D10                 call    _errno
.text:00403D15                 mov     edi, [eax]
.text:00403D17                 mov     esi, ebp
.text:00403D19                 mov     [esp+14h], ebx
.text:00403D1D                 mov     ecx, [ebx]
.text:00403D1F                 mov     dword ptr [esp], 0
.text:00403D26                 mov     edx, [esp+44h]
.text:00403D2A                 mov     dword ptr [esp+4], 0
.text:00403D32                 mov     eax, [esp+40h]
.text:00403D36                 mov     [esp+10h], ecx
.text:00403D3A                 mov     [esp+0Ch], edx
.text:00403D3E                 mov     [esp+8], eax
.text:00403D42                 call    sub_403100
.text:00403D47                 mov     ebx, eax
.text:00403D49                 call    _errno
.text:00403D4E                 mov     [eax], edi
.text:00403D50                 lea     edi, [ebx+1]
.text:00403D53                 mov     [esp], edi
.text:00403D56                 call    sub_402D30
.text:00403D5B                 mov     [esp+24h], eax
.text:00403D5F                 test    ebp, ebp
.text:00403D61                 jz      short loc_403DB2
.text:00403D63
.text:00403D63 loc_403D63:                             ; CODE XREF: .text:00403DB7↓j
.text:00403D63                 call    _errno
.text:00403D68                 mov     ebp, [eax]
.text:00403D6A                 mov     [esp+14h], esi
.text:00403D6E                 mov     ecx, [esi]
.text:00403D70                 mov     [esp+4], edi
.text:00403D74                 mov     edx, [esp+44h]
.text:00403D78                 mov     esi, [esp+24h]
.text:00403D7C                 mov     [esp+10h], ecx
.text:00403D80                 mov     eax, [esp+40h]
.text:00403D84                 mov     [esp+0Ch], edx
.text:00403D88                 mov     [esp], esi
.text:00403D8B                 mov     [esp+8], eax
.text:00403D8F                 call    sub_403100
.text:00403D94                 call    _errno
.text:00403D99                 mov     [eax], ebp
.text:00403D9B                 call    _errno
.text:00403DA0                 mov     ebx, [esp+28h]
.text:00403DA4                 mov     [eax], ebx
.text:00403DA6                 mov     eax, [esp+24h]
.text:00403DAA                 add     esp, 2Ch
.text:00403DAD                 pop     ebx
.text:00403DAE                 pop     esi
.text:00403DAF                 pop     edi
.text:00403DB0                 pop     ebp
.text:00403DB1                 retn
.text:00403DB2 ; ---------------------------------------------------------------------------
.text:00403DB2
.text:00403DB2 loc_403DB2:                             ; CODE XREF: .text:00403D61↑j
.text:00403DB2                 mov     esi, offset dword_407140
.text:00403DB7                 jmp     short loc_403D63
.text:00403DB7 ; ---------------------------------------------------------------------------
.text:00403DB9                 align 10h
.text:00403DC0
.text:00403DC0 loc_403DC0:                             ; CODE XREF: .text:00403D0A↑j
.text:00403DC0                 mov     ebx, offset dword_407140
.text:00403DC5                 jmp     loc_403D10
.text:00403DC5 ; ---------------------------------------------------------------------------
.text:00403DCA                 align 10h
.text:00403DD0                 sub     esp, 1Ch
.text:00403DD3                 mov     edx, [esp+24h]
.text:00403DD7                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:00403DDF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403DE7                 mov     [esp+4], edx
.text:00403DEB                 mov     edx, [esp+20h]
.text:00403DEF                 mov     [esp], edx
.text:00403DF2                 call    sub_404240
.text:00403DF7                 add     esp, 1Ch
.text:00403DFA                 retn
.text:00403DFA ; ---------------------------------------------------------------------------
.text:00403DFB                 align 10h
.text:00403E00                 sub     esp, 1Ch
.text:00403E03                 mov     edx, [esp+20h]
.text:00403E07                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:00403E0F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403E17                 mov     [esp+4], edx
.text:00403E1B                 mov     dword ptr [esp], 0
.text:00403E22                 call    sub_404240
.text:00403E27                 add     esp, 1Ch
.text:00403E2A                 retn
.text:00403E2A ; ---------------------------------------------------------------------------
.text:00403E2B                 align 10h
.text:00403E30
.text:00403E30 ; =============== S U B R O U T I N E =======================================
.text:00403E30
.text:00403E30
.text:00403E30 ; int __cdecl sub_403E30(int, int, char *)
.text:00403E30 sub_403E30      proc near               ; CODE XREF: .text:0040293A↑p
.text:00403E30                                         ; sub_402950+1A↑p
.text:00403E30
.text:00403E30 var_BC          = dword ptr -0BCh
.text:00403E30 var_B8          = dword ptr -0B8h
.text:00403E30 var_B4          = dword ptr -0B4h
.text:00403E30 var_B0          = dword ptr -0B0h
.text:00403E30 var_AC          = dword ptr -0ACh
.text:00403E30 var_A8          = dword ptr -0A8h
.text:00403E30 var_A4          = dword ptr -0A4h
.text:00403E30 var_A0          = dword ptr -0A0h
.text:00403E30 var_9C          = dword ptr -9Ch
.text:00403E30 var_98          = dword ptr -98h
.text:00403E30 var_94          = dword ptr -94h
.text:00403E30 var_90          = dword ptr -90h
.text:00403E30 var_8C          = dword ptr -8Ch
.text:00403E30 var_7C          = dword ptr -7Ch
.text:00403E30 var_78          = dword ptr -78h
.text:00403E30 var_74          = dword ptr -74h
.text:00403E30 var_70          = dword ptr -70h
.text:00403E30 var_6C          = dword ptr -6Ch
.text:00403E30 var_68          = dword ptr -68h
.text:00403E30 var_64          = dword ptr -64h
.text:00403E30 var_60          = dword ptr -60h
.text:00403E30 var_5C          = dword ptr -5Ch
.text:00403E30 var_4C          = dword ptr -4Ch
.text:00403E30 var_48          = dword ptr -48h
.text:00403E30 var_44          = dword ptr -44h
.text:00403E30 var_40          = dword ptr -40h
.text:00403E30 var_3C          = dword ptr -3Ch
.text:00403E30 var_38          = dword ptr -38h
.text:00403E30 var_34          = dword ptr -34h
.text:00403E30 var_30          = dword ptr -30h
.text:00403E30 var_2C          = dword ptr -2Ch
.text:00403E30 arg_0           = dword ptr  4
.text:00403E30 arg_4           = dword ptr  8
.text:00403E30 arg_8           = dword ptr  0Ch
.text:00403E30
.text:00403E30                 push    ebp
.text:00403E31                 xor     eax, eax
.text:00403E33                 mov     ecx, 8
.text:00403E38                 push    edi
.text:00403E39                 push    esi
.text:00403E3A                 push    ebx
.text:00403E3B                 sub     esp, 0ACh
.text:00403E41                 mov     ebp, [esp+0BCh+arg_4]
.text:00403E48                 cld
.text:00403E49                 lea     edi, [esp+0BCh+var_A8]
.text:00403E4D                 mov     [esp+0BCh+var_AC], ebp
.text:00403E51                 rep stosd
.text:00403E53                 mov     eax, [esp+0BCh+var_8C]
.text:00403E57                 mov     edi, [esp+0BCh+var_AC]
.text:00403E5B                 mov     esi, [esp+0BCh+var_A8]
.text:00403E5F                 mov     [esp+0BCh+var_5C], eax
.text:00403E63                 mov     ebp, [esp+0BCh+var_A4]
.text:00403E67                 mov     eax, [esp+0BCh+var_AC]
.text:00403E6B                 mov     [esp+0BCh+var_7C], edi
.text:00403E6F                 mov     ecx, [esp+0BCh+var_94]
.text:00403E73                 mov     edi, [esp+0BCh+var_A0]
.text:00403E77                 mov     [esp+0BCh+var_78], esi
.text:00403E7B                 mov     edx, [esp+0BCh+var_90]
.text:00403E7F                 mov     esi, [esp+0BCh+var_9C]
.text:00403E83                 mov     [esp+0BCh+var_4C], eax
.text:00403E87                 mov     ebx, [esp+0BCh+var_98]
.text:00403E8B                 mov     eax, [esp+0BCh+var_A8]
.text:00403E8F                 mov     [esp+0BCh+var_74], ebp
.text:00403E93                 mov     [esp+0BCh+var_70], edi
.text:00403E97                 mov     [esp+0BCh+var_6C], esi
.text:00403E9B                 mov     [esp+0BCh+var_68], ebx
.text:00403E9F                 mov     [esp+0BCh+var_64], ecx
.text:00403EA3                 mov     [esp+0BCh+var_60], edx
.text:00403EA7                 mov     [esp+0BCh+var_48], eax
.text:00403EAB                 mov     [esp+0BCh+var_44], ebp
.text:00403EAF                 mov     [esp+0BCh+var_40], edi
.text:00403EB3                 mov     [esp+0BCh+var_3C], esi
.text:00403EBA                 mov     [esp+0BCh+var_38], ebx
.text:00403EC1                 mov     ebx, [esp+0BCh+var_8C]
.text:00403EC5                 mov     [esp+0BCh+var_30], edx
.text:00403ECC                 mov     edx, [esp+0BCh+arg_8]
.text:00403ED3                 mov     [esp+0BCh+var_34], ecx
.text:00403EDA                 lea     ecx, [esp+0BCh+var_4C]
.text:00403EDE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00403EE2                 mov     edx, [esp+0BCh+arg_0]
.text:00403EE9                 mov     [esp+0BCh+var_2C], ebx
.text:00403EF0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00403EF4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00403EFC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00403EFF                 call    sub_404240
.text:00403F04                 add     esp, 0ACh
.text:00403F0A                 pop     ebx
.text:00403F0B                 pop     esi
.text:00403F0C                 pop     edi
.text:00403F0D                 pop     ebp
.text:00403F0E                 retn
.text:00403F0E sub_403E30      endp
.text:00403F0E
.text:00403F0E ; ---------------------------------------------------------------------------
.text:00403F0F                 align 10h
.text:00403F10                 push    ebp
.text:00403F11                 xor     eax, eax
.text:00403F13                 mov     ecx, 8
.text:00403F18                 push    edi
.text:00403F19                 push    esi
.text:00403F1A                 push    ebx
.text:00403F1B                 sub     esp, 0ACh
.text:00403F21                 mov     edx, [esp+0C4h]
.text:00403F28                 cld
.text:00403F29                 lea     edi, [esp+14h]
.text:00403F2D                 mov     [esp+10h], edx
.text:00403F31                 rep stosd
.text:00403F33                 mov     eax, [esp+30h]
.text:00403F37                 mov     ebp, [esp+10h]
.text:00403F3B                 mov     edi, [esp+14h]
.text:00403F3F                 mov     [esp+60h], eax
.text:00403F43                 mov     esi, [esp+20h]
.text:00403F47                 mov     eax, [esp+10h]
.text:00403F4B                 mov     [esp+40h], ebp
.text:00403F4F                 mov     ecx, [esp+28h]
.text:00403F53                 mov     ebp, [esp+18h]
.text:00403F57                 mov     [esp+44h], edi
.text:00403F5B                 mov     edx, [esp+2Ch]
.text:00403F5F                 mov     edi, [esp+1Ch]
.text:00403F63                 mov     [esp+70h], eax
.text:00403F67                 mov     ebx, [esp+24h]
.text:00403F6B                 mov     eax, [esp+14h]
.text:00403F6F                 mov     [esp+48h], ebp
.text:00403F73                 mov     [esp+4Ch], edi
.text:00403F77                 mov     [esp+50h], esi
.text:00403F7B                 mov     [esp+54h], ebx
.text:00403F7F                 mov     [esp+58h], ecx
.text:00403F83                 mov     [esp+5Ch], edx
.text:00403F87                 mov     [esp+74h], eax
.text:00403F8B                 mov     [esp+78h], ebp
.text:00403F8F                 mov     [esp+7Ch], edi
.text:00403F93                 mov     [esp+80h], esi
.text:00403F9A                 mov     [esp+84h], ebx
.text:00403FA1                 mov     esi, [esp+30h]
.text:00403FA5                 lea     ebx, [esp+70h]
.text:00403FA9                 mov     [esp+8Ch], edx
.text:00403FB0                 mov     edx, [esp+0C8h]
.text:00403FB7                 mov     [esp+88h], ecx
.text:00403FBE                 mov     ecx, [esp+0CCh]
.text:00403FC5                 mov     [esp+4], edx
.text:00403FC9                 mov     edx, [esp+0C0h]
.text:00403FD0                 mov     [esp+90h], esi
.text:00403FD7                 mov     [esp+0Ch], ebx
.text:00403FDB                 mov     [esp+8], ecx
.text:00403FDF                 mov     [esp], edx
.text:00403FE2                 call    sub_404240
.text:00403FE7                 add     esp, 0ACh
.text:00403FED                 pop     ebx
.text:00403FEE                 pop     esi
.text:00403FEF                 pop     edi
.text:00403FF0                 pop     ebp
.text:00403FF1                 retn
.text:00403FF1 ; ---------------------------------------------------------------------------
.text:00403FF2                 align 10h
.text:00404000                 push    ebp
.text:00404001                 xor     eax, eax
.text:00404003                 mov     ecx, 8
.text:00404008                 push    edi
.text:00404009                 push    esi
.text:0040400A                 push    ebx
.text:0040400B                 sub     esp, 0ACh
.text:00404011                 mov     edi, [esp+0C0h]
.text:00404018                 cld
.text:00404019                 mov     [esp+10h], edi
.text:0040401D                 lea     edi, [esp+14h]
.text:00404021                 rep stosd
.text:00404023                 mov     eax, [esp+30h]
.text:00404027                 mov     esi, [esp+10h]
.text:0040402B                 mov     ebx, [esp+14h]
.text:0040402F                 mov     [esp+60h], eax
.text:00404033                 mov     ebp, [esp+18h]
.text:00404037                 mov     eax, [esp+10h]
.text:0040403B                 mov     [esp+40h], esi
.text:0040403F                 mov     edi, [esp+1Ch]
.text:00404043                 mov     esi, [esp+20h]
.text:00404047                 mov     [esp+44h], ebx
.text:0040404B                 mov     ecx, [esp+28h]
.text:0040404F                 mov     edx, [esp+2Ch]
.text:00404053                 mov     [esp+70h], eax
.text:00404057                 mov     ebx, [esp+24h]
.text:0040405B                 mov     eax, [esp+14h]
.text:0040405F                 mov     [esp+48h], ebp
.text:00404063                 mov     [esp+4Ch], edi
.text:00404067                 mov     [esp+50h], esi
.text:0040406B                 mov     [esp+54h], ebx
.text:0040406F                 mov     [esp+58h], ecx
.text:00404073                 mov     [esp+5Ch], edx
.text:00404077                 mov     [esp+74h], eax
.text:0040407B                 mov     [esp+78h], ebp
.text:0040407F                 mov     [esp+7Ch], edi
.text:00404083                 mov     [esp+80h], esi
.text:0040408A                 mov     [esp+84h], ebx
.text:00404091                 mov     [esp+8Ch], edx
.text:00404098                 lea     edx, [esp+70h]
.text:0040409C                 mov     [esp+88h], ecx
.text:004040A3                 mov     ecx, [esp+30h]
.text:004040A7                 mov     [esp+0Ch], edx
.text:004040AB                 mov     edx, [esp+0C4h]
.text:004040B2                 mov     [esp+90h], ecx
.text:004040B9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004040C1                 mov     [esp+4], edx
.text:004040C5                 mov     dword ptr [esp], 0
.text:004040CC                 call    sub_404240
.text:004040D1                 add     esp, 0ACh
.text:004040D7                 pop     ebx
.text:004040D8                 pop     esi
.text:004040D9                 pop     edi
.text:004040DA                 pop     ebp
.text:004040DB                 retn
.text:004040DB ; ---------------------------------------------------------------------------
.text:004040DC                 align 10h
.text:004040E0                 push    edi
.text:004040E1                 push    esi
.text:004040E2                 push    ebx
.text:004040E3                 sub     esp, 40h
.text:004040E6                 mov     edx, ds:dword_40714C
.text:004040EC                 mov     ebx, ds:dword_407140
.text:004040F2                 mov     esi, ds:dword_407148
.text:004040F8                 mov     edi, ds:dword_407144
.text:004040FE                 mov     [esp+1Ch], edx
.text:00404102                 mov     ecx, ds:dword_407150
.text:00404108                 mov     edx, ds:dword_407160
.text:0040410E                 mov     [esp+10h], ebx
.text:00404112                 mov     ebx, ds:dword_407154
.text:00404118                 mov     [esp+30h], edx
.text:0040411C                 movzx   edx, byte ptr [esp+54h]
.text:00404121                 mov     [esp+18h], esi
.text:00404125                 mov     esi, ds:dword_40715C
.text:0040412B                 mov     [esp+14h], edi
.text:0040412F                 mov     edi, ds:dword_407158
.text:00404135                 mov     [esp+20h], ecx
.text:00404139                 mov     cl, dl
.text:0040413B                 shr     cl, 5
.text:0040413E                 mov     [esp+24h], ebx
.text:00404142                 movzx   ebx, cl
.text:00404145                 mov     [esp+2Ch], esi
.text:00404149                 lea     esi, [esp+10h]
.text:0040414D                 mov     [esp+28h], edi
.text:00404151                 lea     edi, [esi+ebx*4]
.text:00404154                 mov     ebx, edx
.text:00404156                 mov     edx, [edi+4]
.text:00404159                 and     ebx, 1Fh
.text:0040415C                 mov     cl, bl
.text:0040415E                 mov     eax, edx
.text:00404160                 shr     eax, cl
.text:00404162                 and     eax, 1
.text:00404165                 xor     eax, 1
.text:00404168                 shl     eax, cl
.text:0040416A                 xor     edx, eax
.text:0040416C                 mov     [edi+4], edx
.text:0040416F                 mov     edx, [esp+50h]
.text:00404173                 mov     [esp+0Ch], esi
.text:00404177                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040417F                 mov     [esp+4], edx
.text:00404183                 mov     dword ptr [esp], 0
.text:0040418A                 call    sub_404240
.text:0040418F                 add     esp, 40h
.text:00404192                 pop     ebx
.text:00404193                 pop     esi
.text:00404194                 pop     edi
.text:00404195                 retn
.text:00404195 ; ---------------------------------------------------------------------------
.text:00404196                 align 10h
.text:004041A0
.text:004041A0 ; =============== S U B R O U T I N E =======================================
.text:004041A0
.text:004041A0
.text:004041A0 ; int __cdecl sub_4041A0(char *)
.text:004041A0 sub_4041A0      proc near               ; CODE XREF: sub_402C10+64↑p
.text:004041A0
.text:004041A0 var_4C          = dword ptr -4Ch
.text:004041A0 var_48          = dword ptr -48h
.text:004041A0 var_44          = dword ptr -44h
.text:004041A0 var_40          = dword ptr -40h
.text:004041A0 var_3C          = dword ptr -3Ch
.text:004041A0 var_38          = dword ptr -38h
.text:004041A0 var_34          = dword ptr -34h
.text:004041A0 var_30          = dword ptr -30h
.text:004041A0 var_2C          = dword ptr -2Ch
.text:004041A0 var_28          = dword ptr -28h
.text:004041A0 var_24          = dword ptr -24h
.text:004041A0 var_20          = dword ptr -20h
.text:004041A0 var_1C          = dword ptr -1Ch
.text:004041A0 arg_0           = dword ptr  4
.text:004041A0
.text:004041A0                 sub     esp, 4Ch
.text:004041A3                 mov     ecx, ds:dword_407140
.text:004041A9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004041B1                 mov     edx, ds:dword_407144
.text:004041B7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004041BE                 mov     [esp+4Ch+var_3C], ecx
.text:004041C2                 mov     ecx, ds:dword_40714C
.text:004041C8                 mov     [esp+4Ch+var_38], edx
.text:004041CC                 mov     edx, ds:dword_407148
.text:004041D2                 mov     [esp+4Ch+var_30], ecx
.text:004041D6                 mov     ecx, ds:dword_407150
.text:004041DC                 mov     eax, edx
.text:004041DE                 shr     eax, 1Ah
.text:004041E1                 and     eax, 1
.text:004041E4                 xor     eax, 1
.text:004041E7                 mov     [esp+4Ch+var_2C], ecx
.text:004041EB                 shl     eax, 1Ah
.text:004041EE                 mov     ecx, ds:dword_407154
.text:004041F4                 xor     edx, eax
.text:004041F6                 mov     [esp+4Ch+var_34], edx
.text:004041FA                 mov     edx, [esp+4Ch+arg_0]
.text:004041FE                 mov     [esp+4Ch+var_28], ecx
.text:00404202                 mov     ecx, ds:dword_407158
.text:00404208                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040420C                 mov     [esp+4Ch+var_24], ecx
.text:00404210                 mov     ecx, ds:dword_40715C
.text:00404216                 mov     [esp+4Ch+var_20], ecx
.text:0040421A                 mov     ecx, ds:dword_407160
.text:00404220                 mov     [esp+4Ch+var_1C], ecx
.text:00404224                 lea     ecx, [esp+4Ch+var_3C]
.text:00404228                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040422C                 call    sub_404240
.text:00404231                 add     esp, 4Ch
.text:00404234                 retn
.text:00404234 sub_4041A0      endp
.text:00404234
.text:00404234 ; ---------------------------------------------------------------------------
.text:00404235                 align 10h
.text:00404240
.text:00404240 ; =============== S U B R O U T I N E =======================================
.text:00404240
.text:00404240
.text:00404240 ; int __cdecl sub_404240(int, char *, int, int)
.text:00404240 sub_404240      proc near               ; CODE XREF: .text:00403DF2↑p
.text:00404240                                         ; .text:00403E22↑p ...
.text:00404240
.text:00404240 Block           = dword ptr -2Ch
.text:00404240 var_28          = dword ptr -28h
.text:00404240 Str             = dword ptr -24h
.text:00404240 var_20          = dword ptr -20h
.text:00404240 var_1C          = dword ptr -1Ch
.text:00404240 var_18          = dword ptr -18h
.text:00404240 var_14          = dword ptr -14h
.text:00404240 arg_0           = dword ptr  4
.text:00404240 arg_4           = dword ptr  8
.text:00404240 arg_8           = dword ptr  0Ch
.text:00404240 arg_C           = dword ptr  10h
.text:00404240
.text:00404240                 push    ebp
.text:00404241                 push    edi
.text:00404242                 push    esi
.text:00404243                 push    ebx
.text:00404244                 sub     esp, 1Ch
.text:00404247                 call    _errno
.text:0040424C                 mov     edx, [eax]
.text:0040424E                 mov     eax, [esp+2Ch+arg_0]
.text:00404252                 mov     [esp+2Ch+var_14], edx
.text:00404256                 test    eax, eax
.text:00404258                 js      loc_4043FA
.text:0040425E                 mov     eax, [esp+2Ch+arg_0]
.text:00404262                 cmp     dword_406020, eax
.text:00404268                 ja      short loc_4042E0
.text:0040426A                 mov     esi, eax
.text:0040426C                 inc     esi
.text:0040426D                 cmp     esi, 1FFFFFFFh
.text:00404273                 ja      loc_4043FF
.text:00404279                 mov     ebx, off_40602C
.text:0040427F                 cmp     ebx, offset dword_406024
.text:00404285                 jz      loc_4043D1
.text:0040428B
.text:0040428B loc_40428B:                             ; CODE XREF: sub_404240+1B5↓j
.text:0040428B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040428E                 lea     ecx, ds:0[esi*8]
.text:00404295                 mov     ebp, esi
.text:00404297                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040429B                 call    sub_402DC0
.text:004042A0                 mov     off_40602C, eax
.text:004042A5                 mov     ebx, dword_406020
.text:004042AB                 sub     ebp, ebx
.text:004042AD                 lea     edi, [eax+ebx*8]
.text:004042B0                 lea     eax, ds:0[ebp*8]
.text:004042B7                 cmp     eax, 7
.text:004042BA                 jbe     short loc_4042D0
.text:004042BC                 test    edi, 4
.text:004042C2                 jz      short loc_4042D0
.text:004042C4                 mov     dword ptr [edi], 0
.text:004042CA                 sub     eax, 4
.text:004042CD                 add     edi, 4
.text:004042D0
.text:004042D0 loc_4042D0:                             ; CODE XREF: sub_404240+7A↑j
.text:004042D0                                         ; sub_404240+82↑j
.text:004042D0                 cld
.text:004042D1                 mov     ecx, eax
.text:004042D3                 shr     ecx, 2
.text:004042D6                 xor     eax, eax
.text:004042D8                 rep stosd
.text:004042DA                 mov     dword_406020, esi
.text:004042E0
.text:004042E0 loc_4042E0:                             ; CODE XREF: sub_404240+28↑j
.text:004042E0                 mov     esi, off_40602C
.text:004042E6                 mov     eax, [esp+2Ch+arg_0]
.text:004042EA                 mov     ebp, [esi+eax*8]
.text:004042ED                 mov     edi, [esi+eax*8+4]
.text:004042F1                 mov     esi, [esp+2Ch+arg_C]
.text:004042F5                 test    esi, esi
.text:004042F7                 jz      loc_4043C7
.text:004042FD
.text:004042FD loc_4042FD:                             ; CODE XREF: sub_404240+18C↓j
.text:004042FD                 call    _errno
.text:00404302                 mov     ebx, [eax]
.text:00404304                 mov     [esp+2Ch+var_18], esi ; int
.text:00404308                 mov     ecx, [esi]
.text:0040430A                 mov     [esp+2Ch+Block], edi ; int
.text:0040430D                 mov     edx, [esp+2Ch+arg_8]
.text:00404311                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404315                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404319                 mov     ecx, [esp+2Ch+arg_4]
.text:0040431D                 mov     [esp+2Ch+var_20], edx ; int
.text:00404321                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404325                 call    sub_403100
.text:0040432A                 mov     esi, eax
.text:0040432C                 call    _errno
.text:00404331                 mov     [eax], ebx
.text:00404333                 cmp     ebp, esi
.text:00404335                 ja      short loc_4043AB
.text:00404337                 lea     ebp, [esi+1]
.text:0040433A                 mov     ebx, off_40602C
.text:00404340                 cmp     edi, offset unk_407040
.text:00404346                 mov     esi, [esp+2Ch+arg_0]
.text:0040434A                 mov     [ebx+esi*8], ebp
.text:0040434D                 jz      short loc_40435D
.text:0040434F                 mov     [esp+2Ch+Block], edi ; Block
.text:00404352                 call    free
.text:00404357                 mov     ebx, off_40602C
.text:0040435D
.text:0040435D loc_40435D:                             ; CODE XREF: sub_404240+10D↑j
.text:0040435D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404360                 call    sub_402D30
.text:00404365                 mov     esi, [esp+2Ch+arg_C]
.text:00404369                 mov     edi, eax
.text:0040436B                 mov     eax, [esp+2Ch+arg_0]
.text:0040436F                 test    esi, esi
.text:00404371                 mov     [ebx+eax*8+4], edi
.text:00404375                 jz      short loc_4043C0
.text:00404377
.text:00404377 loc_404377:                             ; CODE XREF: sub_404240+185↓j
.text:00404377                 call    _errno
.text:0040437C                 mov     ebx, [eax]
.text:0040437E                 mov     [esp+2Ch+var_18], esi ; int
.text:00404382                 mov     ecx, [esi]
.text:00404384                 mov     [esp+2Ch+Block], edi ; int
.text:00404387                 mov     edx, [esp+2Ch+arg_8]
.text:0040438B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040438F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404393                 mov     ecx, [esp+2Ch+arg_4]
.text:00404397                 mov     [esp+2Ch+var_20], edx ; int
.text:0040439B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040439F                 call    sub_403100
.text:004043A4                 call    _errno
.text:004043A9                 mov     [eax], ebx
.text:004043AB
.text:004043AB loc_4043AB:                             ; CODE XREF: sub_404240+F5↑j
.text:004043AB                 call    _errno
.text:004043B0                 mov     ebp, [esp+2Ch+var_14]
.text:004043B4                 mov     [eax], ebp
.text:004043B6                 add     esp, 1Ch
.text:004043B9                 mov     eax, edi
.text:004043BB                 pop     ebx
.text:004043BC                 pop     esi
.text:004043BD                 pop     edi
.text:004043BE                 pop     ebp
.text:004043BF                 retn
.text:004043C0 ; ---------------------------------------------------------------------------
.text:004043C0
.text:004043C0 loc_4043C0:                             ; CODE XREF: sub_404240+135↑j
.text:004043C0                 mov     esi, offset dword_407140
.text:004043C5                 jmp     short loc_404377
.text:004043C7 ; ---------------------------------------------------------------------------
.text:004043C7
.text:004043C7 loc_4043C7:                             ; CODE XREF: sub_404240+B7↑j
.text:004043C7                 mov     esi, offset dword_407140
.text:004043CC                 jmp     loc_4042FD
.text:004043D1 ; ---------------------------------------------------------------------------
.text:004043D1
.text:004043D1 loc_4043D1:                             ; CODE XREF: sub_404240+45↑j
.text:004043D1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004043D8                 call    sub_402D30
.text:004043DD                 mov     off_40602C, eax
.text:004043E2                 mov     edi, dword_406024
.text:004043E8                 mov     ebx, eax
.text:004043EA                 mov     ecx, off_406028
.text:004043F0                 mov     [eax], edi
.text:004043F2                 mov     [eax+4], ecx
.text:004043F5                 jmp     loc_40428B
.text:004043FA ; ---------------------------------------------------------------------------
.text:004043FA
.text:004043FA loc_4043FA:                             ; CODE XREF: sub_404240+18↑j
.text:004043FA                 call    abort
.text:004043FF ; ---------------------------------------------------------------------------
.text:004043FF
.text:004043FF loc_4043FF:                             ; CODE XREF: sub_404240+33↑j
.text:004043FF                 call    sub_404930
.text:004043FF sub_404240      endp
.text:004043FF
.text:004043FF ; ---------------------------------------------------------------------------
.text:00404404                 align 10h
.text:00404410 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404410                                         ; DATA XREF: .data:Buffer↓o
.text:00404442 ; const char Format[12]
.text:00404442 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404700+50↓o
.text:0040444E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040445E                 db 12h dup(90h)
.text:00404470
.text:00404470 ; =============== S U B R O U T I N E =======================================
.text:00404470
.text:00404470
.text:00404470 sub_404470      proc near               ; DATA XREF: sub_404700+100↓o
.text:00404470                 push    esp
.text:00404471                 push    69207369h
.text:00404476                 jnb     short loc_404498
.text:00404478                 db      66h
.text:00404478                 jb      short near ptr 44E0h
.text:0040447B                 and     gs:[ebx+6Fh], dh
.text:0040447F                 db      66h
.text:0040447F                 jz      short near ptr 44F9h
.text:00404482                 popa
.text:00404483                 jb      short loc_4044EA
.text:00404485                 cmp     esp, [eax]
.text:00404487                 jnb     short near ptr loc_4044EC+2
.text:00404489                 and     gs:[eax+ebp*2+65h], dh
.text:0040448E                 and     [ebx+6Fh], dh
.text:00404491                 jnz     short loc_404505
.text:00404493                 arpl    [ebp+20h], sp
.text:00404496                 outsw
.text:00404498
.text:00404498 loc_404498:                             ; CODE XREF: sub_404470+6↑j
.text:00404498                 jb      short loc_4044BA
.text:0040449A                 arpl    [edi+70h], bp
.text:0040449D                 jns     short loc_404508
.text:0040449F                 outsb
.text:004044A0                 and     [bp+di+6Fh], ah
.text:004044A4                 outsb
.text:004044A5                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:004044AE                 and     [eax+ebp*2+65h], dl
.text:004044B2                 jb      short near ptr loc_404518+1
.text:004044B4                 and     [ecx+73h], ch
.text:004044B7                 and     [esi+4Fh], cl
.text:004044BA
.text:004044BA loc_4044BA:                             ; CODE XREF: sub_404470:loc_404498↑j
.text:004044BA                 or      dh, [edi+61h]
.text:004044BD                 jb      short loc_404531
.text:004044BF                 popa
.text:004044C0                 outsb
.text:004044C1                 jz      short loc_40453C
.text:004044C3                 cmp     esp, [eax]
.text:004044C5                 outsb
.text:004044C6                 outsd
.text:004044C7                 jz      short loc_4044E9
.text:004044C9                 db      65h
.text:004044C9                 jbe     short loc_404531
.text:004044CC                 outsb
.text:004044CD                 and     [esi+6Fh], ah
.text:004044D0                 jb      short near ptr loc_4044F0+2
.text:004044D2                 dec     ebp
.text:004044D3                 inc     ebp
.text:004044D4                 push    edx
.text:004044D5                 inc     ebx
.text:004044D6                 dec     eax
.text:004044D7                 inc     ecx
.text:004044D8                 dec     esi
.text:004044D9                 push    esp
.text:004044DA                 inc     ecx
.text:004044DB                 inc     edx
.text:004044DC                 dec     ecx
.text:004044DD                 dec     esp
.text:004044DE                 dec     ecx
.text:004044DF                 push    esp
.text:004044E0                 pop     ecx
.text:004044E1                 and     [edi+72h], ch
.text:004044E4                 and     [esi+49h], al
.text:004044E7                 push    esp
.text:004044E8                 dec     esi
.text:004044E9
.text:004044E9 loc_4044E9:                             ; CODE XREF: sub_404470+57↑j
.text:004044E9                 inc     ebp
.text:004044EA
.text:004044EA loc_4044EA:                             ; CODE XREF: sub_404470+13↑j
.text:004044EA                 push    ebx
.text:004044EB                 push    ebx
.text:004044EC
.text:004044EC loc_4044EC:                             ; CODE XREF: sub_404470+17↑j
.text:004044EC                 and     [esi+4Fh], al
.text:004044EF                 push    edx
.text:004044F0
.text:004044F0 loc_4044F0:                             ; CODE XREF: sub_404470+60↑j
.text:004044F0                 and     [ecx+20h], al
.text:004044F3                 push    eax
.text:004044F4                 inc     ecx
.text:004044F5                 push    edx
.text:004044F6                 push    esp
.text:004044F7                 dec     ecx
.text:004044F8                 inc     ebx
.text:004044F9                 push    ebp
.text:004044FA                 dec     esp
.text:004044FB                 inc     ecx
.text:004044FC                 push    edx
.text:004044FD                 and     [eax+55h], dl
.text:00404500                 push    edx
.text:00404501                 push    eax
.text:00404502                 dec     edi
.text:00404503                 push    ebx
.text:00404504                 inc     ebp
.text:00404505
.text:00404505 loc_404505:                             ; CODE XREF: sub_404470+21↑j
.text:00404505                 or      al, cs:[eax]
.text:00404508
.text:00404508 loc_404508:                             ; CODE XREF: sub_404470+2D↑j
.text:00404508                                         ; DATA XREF: sub_404700:loc_404841↓o
.text:00404508                 push    edi
.text:00404509                 jb      short near ptr loc_404573+1
.text:0040450B                 jz      short near ptr loc_404580+1
.text:0040450D                 outs    dx, byte ptr gs:[esi]
.text:0040450F                 and     [edx+79h], ah
.text:00404512                 and     ds:6E612073h, ah
.text:00404518
.text:00404518 loc_404518:                             ; CODE XREF: sub_404470+42↑j
.text:00404518                 and     fs:0A2E73h, ah
.text:0040451F
.text:0040451F loc_40451F:                             ; DATA XREF: sub_404700:loc_40484D↓o
.text:0040451F                 push    edi
.text:00404520                 jb      short near ptr loc_40458A+1
.text:00404522                 jz      short loc_404598
.text:00404524                 outs    dx, byte ptr gs:[esi]
.text:00404526                 and     [edx+79h], ah
.text:00404529                 and     ds:25202C73h, ah
.text:0040452F                 jnb     short near ptr loc_40455A+3
.text:00404531
.text:00404531 loc_404531:                             ; CODE XREF: sub_404470+4D↑j
.text:00404531                                         ; sub_404470+59↑j
.text:00404531                 and     [ecx+6Eh], ah
.text:00404534                 and     fs:0A2E73h, ah
.text:0040453B                 nop
.text:0040453C
.text:0040453C loc_40453C:                             ; CODE XREF: sub_404470+51↑j
.text:0040453C                 nop
.text:0040453D                 nop
.text:0040453E                 nop
.text:0040453F                 nop
.text:00404540                 nop
.text:00404541                 nop
.text:00404542                 nop
.text:00404543                 nop
.text:00404544                 nop
.text:00404545                 nop
.text:00404546                 nop
.text:00404547                 nop
.text:00404548                 nop
.text:00404549                 nop
.text:0040454A                 nop
.text:0040454B                 nop
.text:0040454C                 nop
.text:0040454D                 nop
.text:0040454E                 nop
.text:0040454F                 nop
.text:0040454F sub_404470      endp ; sp-analysis failed
.text:0040454F
.text:00404550
.text:00404550 ; =============== S U B R O U T I N E =======================================
.text:00404550
.text:00404550
.text:00404550 sub_404550      proc near               ; DATA XREF: sub_404700:loc_404859↓o
.text:00404550                 push    edi
.text:00404551                 jb      short near ptr loc_4045BA+2
.text:00404553                 jz      short near ptr loc_4045C8+1
.text:00404555                 outs    dx, byte ptr gs:[esi]
.text:00404557                 and     [edx+79h], ah
.text:0040455A
.text:0040455A loc_40455A:                             ; CODE XREF: sub_404470+BF↑j
.text:0040455A                 and     ds:25202C73h, ah
.text:00404560                 jnb     short near ptr loc_40458D+1
.text:00404562                 and     ds:610A2C73h, ah
.text:00404568                 outsb
.text:00404569                 and     fs:0A2E73h, ah
.text:00404570
.text:00404570 loc_404570:                             ; DATA XREF: sub_404700:loc_404865↓o
.text:00404570                 push    edi
.text:00404571                 jb      short loc_4045DC
.text:00404573
.text:00404573 loc_404573:                             ; CODE XREF: sub_404470+99↑j
.text:00404573                 jz      short loc_4045E9
.text:00404575                 outs    dx, byte ptr gs:[esi]
.text:00404577                 and     [edx+79h], ah
.text:0040457A                 and     ds:25202C73h, ah
.text:00404580
.text:00404580 loc_404580:                             ; CODE XREF: sub_404470+9B↑j
.text:00404580                 jnb     short loc_4045AE
.text:00404582                 and     ds:250A2C73h, ah
.text:00404588                 jnb     short near ptr loc_4045B5+1
.text:0040458A
.text:0040458A loc_40458A:                             ; CODE XREF: sub_404470+B0↑j
.text:0040458A                 and     [ecx+6Eh], ah
.text:0040458D
.text:0040458D loc_40458D:                             ; CODE XREF: sub_404550+10↑j
.text:0040458D                 and     fs:0A2E73h, ah
.text:00404594                 nop
.text:00404595                 nop
.text:00404596                 nop
.text:00404597                 nop
.text:00404598
.text:00404598 loc_404598:                             ; CODE XREF: sub_404470+B2↑j
.text:00404598                 nop
.text:00404599                 nop
.text:0040459A                 nop
.text:0040459B                 nop
.text:0040459C                 nop
.text:0040459D                 nop
.text:0040459E                 nop
.text:0040459F                 nop
.text:004045A0                 nop
.text:004045A1                 nop
.text:004045A2                 nop
.text:004045A3                 nop
.text:004045A4                 nop
.text:004045A5                 nop
.text:004045A6                 nop
.text:004045A7                 nop
.text:004045A8                 nop
.text:004045A9                 nop
.text:004045AA                 nop
.text:004045AB                 nop
.text:004045AC                 nop
.text:004045AD                 nop
.text:004045AE
.text:004045AE loc_4045AE:                             ; CODE XREF: sub_404550:loc_404580↑j
.text:004045AE                 nop
.text:004045AF                 nop
.text:004045AF sub_404550      endp ; sp-analysis failed
.text:004045AF
.text:004045B0
.text:004045B0 ; =============== S U B R O U T I N E =======================================
.text:004045B0
.text:004045B0
.text:004045B0 sub_4045B0      proc near               ; DATA XREF: sub_404700:loc_404871↓o
.text:004045B0                 push    edi
.text:004045B1                 jb      short loc_40461C
.text:004045B3                 jz      short loc_404629
.text:004045B5
.text:004045B5 loc_4045B5:                             ; CODE XREF: sub_404550+38↑j
.text:004045B5                 outs    dx, byte ptr gs:[esi]
.text:004045B7                 and     [edx+79h], ah
.text:004045BA
.text:004045BA loc_4045BA:                             ; CODE XREF: sub_404550+1↑j
.text:004045BA                 and     ds:25202C73h, ah
.text:004045C0                 jnb     short loc_4045EE
.text:004045C2                 and     ds:250A2C73h, ah
.text:004045C8
.text:004045C8 loc_4045C8:                             ; CODE XREF: sub_404550+3↑j
.text:004045C8                 jnb     short near ptr loc_4045F5+1
.text:004045CA                 and     ds:61202C73h, ah
.text:004045D0                 outsb
.text:004045D1                 and     fs:0A2E73h, ah
.text:004045D8                 nop
.text:004045D9                 nop
.text:004045DA                 nop
.text:004045DB                 nop
.text:004045DC
.text:004045DC loc_4045DC:                             ; CODE XREF: sub_404550+21↑j
.text:004045DC                 nop
.text:004045DD                 nop
.text:004045DE                 nop
.text:004045DF                 nop
.text:004045E0                 nop
.text:004045E1                 nop
.text:004045E2                 nop
.text:004045E3                 nop
.text:004045E4                 nop
.text:004045E5                 nop
.text:004045E6                 nop
.text:004045E7                 nop
.text:004045E8                 nop
.text:004045E9
.text:004045E9 loc_4045E9:                             ; CODE XREF: sub_404550:loc_404573↑j
.text:004045E9                 nop
.text:004045EA                 nop
.text:004045EB                 nop
.text:004045EC                 nop
.text:004045ED                 nop
.text:004045EE
.text:004045EE loc_4045EE:                             ; CODE XREF: sub_4045B0+10↑j
.text:004045EE                 nop
.text:004045EF                 nop
.text:004045EF sub_4045B0      endp ; sp-analysis failed
.text:004045EF
.text:004045F0
.text:004045F0 ; =============== S U B R O U T I N E =======================================
.text:004045F0
.text:004045F0
.text:004045F0 sub_4045F0      proc near               ; DATA XREF: sub_404700:loc_40487D↓o
.text:004045F0                 push    edi
.text:004045F1                 jb      short near ptr loc_404659+3
.text:004045F3                 jz      short loc_404669
.text:004045F5
.text:004045F5 loc_4045F5:                             ; CODE XREF: sub_4045B0:loc_4045C8↑j
.text:004045F5                 outs    dx, byte ptr gs:[esi]
.text:004045F7                 and     [edx+79h], ah
.text:004045FA                 and     ds:25202C73h, ah
.text:00404600                 jnb     short loc_40462E
.text:00404602                 and     ds:250A2C73h, ah
.text:00404608                 jnb     short near ptr loc_404635+1
.text:0040460A                 and     ds:25202C73h, ah
.text:00404610                 jnb     short near ptr loc_40463A+4
.text:00404612                 and     [ecx+6Eh], ah
.text:00404615                 and     fs:0A2E73h, ah
.text:0040461C
.text:0040461C loc_40461C:                             ; CODE XREF: sub_4045B0+1↑j
.text:0040461C                 nop
.text:0040461D                 nop
.text:0040461E                 nop
.text:0040461F                 nop
.text:00404620                 nop
.text:00404621                 nop
.text:00404622                 nop
.text:00404623                 nop
.text:00404624                 nop
.text:00404625                 nop
.text:00404626                 nop
.text:00404627                 nop
.text:00404628                 nop
.text:00404629
.text:00404629 loc_404629:                             ; CODE XREF: sub_4045B0+3↑j
.text:00404629                 nop
.text:0040462A                 nop
.text:0040462B                 nop
.text:0040462C                 nop
.text:0040462D                 nop
.text:0040462E
.text:0040462E loc_40462E:                             ; CODE XREF: sub_4045F0+10↑j
.text:0040462E                 nop
.text:0040462F                 nop
.text:0040462F sub_4045F0      endp ; sp-analysis failed
.text:0040462F
.text:00404630
.text:00404630 ; =============== S U B R O U T I N E =======================================
.text:00404630
.text:00404630
.text:00404630 sub_404630      proc near               ; DATA XREF: sub_404700:loc_404889↓o
.text:00404630                 push    edi
.text:00404631                 jb      short near ptr loc_40469A+2
.text:00404633                 jz      short near ptr loc_4046A4+5
.text:00404635
.text:00404635 loc_404635:                             ; CODE XREF: sub_4045F0+18↑j
.text:00404635                 outs    dx, byte ptr gs:[esi]
.text:00404637                 and     [edx+79h], ah
.text:0040463A
.text:0040463A loc_40463A:                             ; CODE XREF: sub_4045F0+20↑j
.text:0040463A                 and     ds:25202C73h, ah
.text:00404640                 jnb     short loc_40466E
.text:00404642                 and     ds:250A2C73h, ah
.text:00404648                 jnb     short near ptr loc_404675+1
.text:0040464A                 and     ds:25202C73h, ah
.text:00404650                 jnb     short near ptr loc_40467A+4
.text:00404652                 and     ds:610A2C73h, ah
.text:00404658                 outsb
.text:00404659
.text:00404659 loc_404659:                             ; CODE XREF: sub_4045F0+1↑j
.text:00404659                 and     fs:0A2E73h, ah
.text:00404660                 nop
.text:00404661                 nop
.text:00404662                 nop
.text:00404663                 nop
.text:00404664                 nop
.text:00404665                 nop
.text:00404666                 nop
.text:00404667                 nop
.text:00404668                 nop
.text:00404669
.text:00404669 loc_404669:                             ; CODE XREF: sub_4045F0+3↑j
.text:00404669                 nop
.text:0040466A                 nop
.text:0040466B                 nop
.text:0040466C                 nop
.text:0040466D                 nop
.text:0040466E
.text:0040466E loc_40466E:                             ; CODE XREF: sub_404630+10↑j
.text:0040466E                 nop
.text:0040466F                 nop
.text:0040466F sub_404630      endp ; sp-analysis failed
.text:0040466F
.text:00404670
.text:00404670 ; =============== S U B R O U T I N E =======================================
.text:00404670
.text:00404670
.text:00404670 sub_404670      proc near               ; DATA XREF: sub_404700:loc_404895↓o
.text:00404670                 push    edi
.text:00404671                 jb      short near ptr loc_4046DA+2
.text:00404673                 jz      short near ptr loc_4046E5+4
.text:00404675
.text:00404675 loc_404675:                             ; CODE XREF: sub_404630+18↑j
.text:00404675                 outs    dx, byte ptr gs:[esi]
.text:00404677                 and     [edx+79h], ah
.text:0040467A
.text:0040467A loc_40467A:                             ; CODE XREF: sub_404630+20↑j
.text:0040467A                 and     ds:25202C73h, ah
.text:00404680                 jnb     short near ptr loc_4046AA+4
.text:00404682                 and     ds:250A2C73h, ah
.text:00404688                 jnb     short near ptr loc_4046B5+1
.text:0040468A                 and     ds:25202C73h, ah
.text:00404690                 jnb     short near ptr loc_4046BA+4
.text:00404692                 and     ds:250A2C73h, ah
.text:00404698                 jnb     short near ptr loc_4046C2+4
.text:0040469A
.text:0040469A loc_40469A:                             ; CODE XREF: sub_404630+1↑j
.text:0040469A                 and     [ecx+6Eh], ah
.text:0040469D                 and     fs:0A2E73h, ah
.text:004046A4
.text:004046A4 loc_4046A4:                             ; CODE XREF: sub_404630+3↑j
.text:004046A4                 lea     esi, [esi+0]
.text:004046AA
.text:004046AA loc_4046AA:                             ; CODE XREF: sub_404670+10↑j
.text:004046AA                 lea     edi, [edi+0]
.text:004046B0
.text:004046B0 loc_4046B0:                             ; DATA XREF: sub_404700:def_40476D↓o
.text:004046B0                 push    edi
.text:004046B1                 jb      short near ptr loc_40471B+1
.text:004046B3                 jz      short near ptr loc_404728+1
.text:004046B5
.text:004046B5 loc_4046B5:                             ; CODE XREF: sub_404670+18↑j
.text:004046B5                 outs    dx, byte ptr gs:[esi]
.text:004046B7                 and     [edx+79h], ah
.text:004046BA
.text:004046BA loc_4046BA:                             ; CODE XREF: sub_404670+20↑j
.text:004046BA                 and     ds:25202C73h, ah
.text:004046C0                 jnb     short near ptr loc_4046EC+2
.text:004046C2
.text:004046C2 loc_4046C2:                             ; CODE XREF: sub_404670+28↑j
.text:004046C2                 and     ds:250A2C73h, ah
.text:004046C8                 jnb     short near ptr loc_4046F3+3
.text:004046CA                 and     ds:25202C73h, ah
.text:004046D0                 jnb     short near ptr loc_4046F9+5
.text:004046D2                 and     ds:250A2C73h, ah
.text:004046D8                 jnb     short near ptr loc_404704+2
.text:004046DA
.text:004046DA loc_4046DA:                             ; CODE XREF: sub_404670+1↑j
.text:004046DA                 and     ds:61202C73h, ah
.text:004046E0                 outsb
.text:004046E1                 and     fs:[edi+74h], ch
.text:004046E5
.text:004046E5 loc_4046E5:                             ; CODE XREF: sub_404670+3↑j
.text:004046E5                 push    2E737265h
.text:004046EA                 or      al, [eax]
.text:004046EC
.text:004046EC loc_4046EC:                             ; CODE XREF: sub_404670+50↑j
.text:004046EC                                         ; DATA XREF: sub_404700+1B5↓o
.text:004046EC                 and     eax, 73252073h
.text:004046F1                 or      al, [eax]
.text:004046F3
.text:004046F3 loc_4046F3:                             ; CODE XREF: sub_404670+58↑j
.text:004046F3                 lea     esi, [esi+0]
.text:004046F9
.text:004046F9 loc_4046F9:                             ; CODE XREF: sub_404670+60↑j
.text:004046F9                 lea     edi, [edi+0]
.text:004046F9 sub_404670      endp ; sp-analysis failed
.text:004046F9
.text:00404700
.text:00404700 ; =============== S U B R O U T I N E =======================================
.text:00404700
.text:00404700
.text:00404700 ; int __cdecl sub_404700(FILE *, FILE *, int, int, va_list)
.text:00404700 sub_404700      proc near               ; CODE XREF: sub_402B20+A5↑p
.text:00404700                                         ; .text:004048FA↓p
.text:00404700
.text:00404700 Stream          = dword ptr -2Ch
.text:00404700 Format          = dword ptr -28h
.text:00404700 ArgList         = dword ptr -24h
.text:00404700 var_20          = dword ptr -20h
.text:00404700 var_1C          = dword ptr -1Ch
.text:00404700 var_14          = dword ptr -14h
.text:00404700 arg_0           = dword ptr  4
.text:00404700 arg_4           = dword ptr  8
.text:00404700 arg_8           = dword ptr  0Ch
.text:00404700 arg_C           = dword ptr  10h
.text:00404700 arg_10          = dword ptr  14h
.text:00404700
.text:00404700                 push    ebp
.text:00404701                 push    edi
.text:00404702                 push    esi
.text:00404703                 push    ebx
.text:00404704
.text:00404704 loc_404704:                             ; CODE XREF: sub_404670+68↑j
.text:00404704                 sub     esp, 1Ch
.text:00404707                 xor     ebx, ebx
.text:00404709                 mov     edi, [esp+2Ch+arg_10]
.text:0040470D                 mov     edx, [esp+2Ch+arg_8]
.text:00404711                 mov     esi, [esp+2Ch+arg_0]
.text:00404715                 mov     eax, [edi]
.text:00404717                 mov     ecx, [esp+2Ch+arg_4]
.text:0040471B
.text:0040471B loc_40471B:                             ; CODE XREF: sub_404670+41↑j
.text:0040471B                 mov     [esp+2Ch+var_14], edx
.text:0040471F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404723                 lea     edx, [edi+4]
.text:00404726                 test    eax, eax
.text:00404728
.text:00404728 loc_404728:                             ; CODE XREF: sub_404670+43↑j
.text:00404728                 jz      short loc_40473C
.text:0040472A                 lea     esi, [esi+0]
.text:00404730
.text:00404730 loc_404730:                             ; CODE XREF: sub_404700+3A↓j
.text:00404730                 mov     eax, edx
.text:00404732                 inc     ebx
.text:00404733                 mov     eax, [eax]
.text:00404735                 add     edx, 4
.text:00404738                 test    eax, eax
.text:0040473A                 jnz     short loc_404730
.text:0040473C
.text:0040473C loc_40473C:                             ; CODE XREF: sub_404700:loc_404728↑j
.text:0040473C                 test    ecx, ecx
.text:0040473E                 jz      loc_4048AD
.text:00404744                 mov     [esp+2Ch+var_1C], ebp
.text:00404748                 mov     edx, [esp+2Ch+var_14]
.text:0040474C                 mov     [esp+2Ch+ArgList], ecx
.text:00404750                 mov     [esp+2Ch+Format], offset Format ; Format
.text:00404758                 mov     [esp+2Ch+var_20], edx
.text:0040475C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040475F                 call    fprintf
.text:00404764
.text:00404764 loc_404764:                             ; CODE XREF: sub_404700+1C9↓j
.text:00404764                 cmp     ebx, 9          ; switch 10 cases
.text:00404767                 ja      def_40476D      ; jumptable 0040476D default case
.text:0040476D                 jmp     ds:jpt_40476D[ebx*4] ; switch jump
.text:0040476D ; ---------------------------------------------------------------------------
.text:00404774 jpt_40476D      dd offset loc_40479C    ; DATA XREF: sub_404700+6D↑r
.text:00404774                 dd offset loc_4047A1    ; jump table for switch statement
.text:00404774                 dd offset loc_404841
.text:00404774                 dd offset loc_40484D
.text:00404774                 dd offset loc_404859
.text:00404774                 dd offset loc_404865
.text:00404774                 dd offset loc_404871
.text:00404774                 dd offset loc_40487D
.text:00404774                 dd offset loc_404889
.text:00404774                 dd offset loc_404895
.text:0040479C ; ---------------------------------------------------------------------------
.text:0040479C
.text:0040479C loc_40479C:                             ; CODE XREF: sub_404700+6D↑j
.text:0040479C                                         ; DATA XREF: sub_404700:jpt_40476D↑o
.text:0040479C                 call    abort           ; jumptable 0040476D case 0
.text:004047A1 ; ---------------------------------------------------------------------------
.text:004047A1
.text:004047A1 loc_4047A1:                             ; CODE XREF: sub_404700+6D↑j
.text:004047A1                                         ; DATA XREF: sub_404700:jpt_40476D↑o
.text:004047A1                 mov     [esp+2Ch+Stream], 40444Eh ; jumptable 0040476D case 1
.text:004047A8                 nop
.text:004047A9                 lea     esi, [esi+0]
.text:004047B0
.text:004047B0 loc_4047B0:                             ; CODE XREF: sub_404700+148↓j
.text:004047B0                                         ; sub_404700+154↓j ...
.text:004047B0                 call    ds:libintl_gettext
.text:004047B6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004047BA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004047BD                 mov     [esp+2Ch+Format], eax ; Format
.text:004047C1                 call    vfprintf
.text:004047C6                 mov     ebx, [esi+4]
.text:004047C9                 dec     ebx
.text:004047CA                 test    ebx, ebx
.text:004047CC                 mov     [esi+4], ebx
.text:004047CF                 js      short loc_40482F
.text:004047D1                 mov     edi, [esi]
.text:004047D3                 mov     byte ptr [edi], 0Ah
.text:004047D6                 inc     dword ptr [esi]
.text:004047D8
.text:004047D8 loc_4047D8:                             ; CODE XREF: sub_404700+13F↓j
.text:004047D8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004047DC                 mov     edx, Buffer
.text:004047E2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004047E5                 call    fputs
.text:004047EA                 mov     ebp, [esi+4]
.text:004047ED                 dec     ebp
.text:004047EE                 test    ebp, ebp
.text:004047F0                 mov     [esi+4], ebp
.text:004047F3                 js      short loc_40481D
.text:004047F5                 mov     ecx, [esi]
.text:004047F7                 mov     byte ptr [ecx], 0Ah
.text:004047FA                 inc     dword ptr [esi]
.text:004047FC
.text:004047FC loc_4047FC:                             ; CODE XREF: sub_404700+12D↓j
.text:004047FC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404800                 mov     [esp+2Ch+Stream], offset sub_404470
.text:00404807                 call    ds:libintl_gettext
.text:0040480D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404811                 add     esp, 1Ch
.text:00404814                 pop     ebx
.text:00404815                 pop     esi
.text:00404816                 pop     edi
.text:00404817                 pop     ebp
.text:00404818                 jmp     fputs
.text:0040481D ; ---------------------------------------------------------------------------
.text:0040481D
.text:0040481D loc_40481D:                             ; CODE XREF: sub_404700+F3↑j
.text:0040481D                 mov     [esp+2Ch+Format], esi ; File
.text:00404821                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404828                 call    _flsbuf
.text:0040482D                 jmp     short loc_4047FC
.text:0040482F ; ---------------------------------------------------------------------------
.text:0040482F
.text:0040482F loc_40482F:                             ; CODE XREF: sub_404700+CF↑j
.text:0040482F                 mov     [esp+2Ch+Format], esi ; File
.text:00404833                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040483A                 call    _flsbuf
.text:0040483F                 jmp     short loc_4047D8
.text:00404841 ; ---------------------------------------------------------------------------
.text:00404841
.text:00404841 loc_404841:                             ; CODE XREF: sub_404700+6D↑j
.text:00404841                                         ; DATA XREF: sub_404700:jpt_40476D↑o
.text:00404841                 mov     [esp+2Ch+Stream], offset loc_404508 ; jumptable 0040476D case 2
.text:00404848                 jmp     loc_4047B0
.text:0040484D ; ---------------------------------------------------------------------------
.text:0040484D
.text:0040484D loc_40484D:                             ; CODE XREF: sub_404700+6D↑j
.text:0040484D                                         ; DATA XREF: sub_404700:jpt_40476D↑o
.text:0040484D                 mov     [esp+2Ch+Stream], offset loc_40451F ; jumptable 0040476D case 3
.text:00404854                 jmp     loc_4047B0
.text:00404859 ; ---------------------------------------------------------------------------
.text:00404859
.text:00404859 loc_404859:                             ; CODE XREF: sub_404700+6D↑j
.text:00404859                                         ; DATA XREF: sub_404700:jpt_40476D↑o
.text:00404859                 mov     [esp+2Ch+Stream], offset sub_404550 ; jumptable 0040476D case 4
.text:00404860                 jmp     loc_4047B0
.text:00404865 ; ---------------------------------------------------------------------------
.text:00404865
.text:00404865 loc_404865:                             ; CODE XREF: sub_404700+6D↑j
.text:00404865                                         ; DATA XREF: sub_404700:jpt_40476D↑o
.text:00404865                 mov     [esp+2Ch+Stream], offset loc_404570 ; jumptable 0040476D case 5
.text:0040486C                 jmp     loc_4047B0
.text:00404871 ; ---------------------------------------------------------------------------
.text:00404871
.text:00404871 loc_404871:                             ; CODE XREF: sub_404700+6D↑j
.text:00404871                                         ; DATA XREF: sub_404700:jpt_40476D↑o
.text:00404871                 mov     [esp+2Ch+Stream], offset sub_4045B0 ; jumptable 0040476D case 6
.text:00404878                 jmp     loc_4047B0
.text:0040487D ; ---------------------------------------------------------------------------
.text:0040487D
.text:0040487D loc_40487D:                             ; CODE XREF: sub_404700+6D↑j
.text:0040487D                                         ; DATA XREF: sub_404700:jpt_40476D↑o
.text:0040487D                 mov     [esp+2Ch+Stream], offset sub_4045F0 ; jumptable 0040476D case 7
.text:00404884                 jmp     loc_4047B0
.text:00404889 ; ---------------------------------------------------------------------------
.text:00404889
.text:00404889 loc_404889:                             ; CODE XREF: sub_404700+6D↑j
.text:00404889                                         ; DATA XREF: sub_404700:jpt_40476D↑o
.text:00404889                 mov     [esp+2Ch+Stream], offset sub_404630 ; jumptable 0040476D case 8
.text:00404890                 jmp     loc_4047B0
.text:00404895 ; ---------------------------------------------------------------------------
.text:00404895
.text:00404895 loc_404895:                             ; CODE XREF: sub_404700+6D↑j
.text:00404895                                         ; DATA XREF: sub_404700:jpt_40476D↑o
.text:00404895                 mov     [esp+2Ch+Stream], offset sub_404670 ; jumptable 0040476D case 9
.text:0040489C                 jmp     loc_4047B0
.text:004048A1 ; ---------------------------------------------------------------------------
.text:004048A1
.text:004048A1 def_40476D:                             ; CODE XREF: sub_404700+67↑j
.text:004048A1                 mov     [esp+2Ch+Stream], offset loc_4046B0 ; jumptable 0040476D default case
.text:004048A8                 jmp     loc_4047B0
.text:004048AD ; ---------------------------------------------------------------------------
.text:004048AD
.text:004048AD loc_4048AD:                             ; CODE XREF: sub_404700+3E↑j
.text:004048AD                 mov     [esp+2Ch+var_20], ebp
.text:004048B1                 mov     ecx, [esp+2Ch+var_14]
.text:004048B5                 mov     [esp+2Ch+Format], offset loc_4046EC ; Format
.text:004048BD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004048C0                 mov     [esp+2Ch+ArgList], ecx
.text:004048C4                 call    fprintf
.text:004048C9                 jmp     loc_404764
.text:004048C9 sub_404700      endp
.text:004048C9
.text:004048C9 ; ---------------------------------------------------------------------------
.text:004048CE                 align 10h
.text:004048D0                 sub     esp, 1Ch
.text:004048D3                 mov     edx, [esp+2Ch]
.text:004048D7                 lea     ecx, [esp+30h]
.text:004048DB                 mov     [esp+10h], ecx
.text:004048DF                 mov     ecx, [esp+28h]
.text:004048E3                 mov     [esp+0Ch], edx
.text:004048E7                 mov     edx, [esp+24h]
.text:004048EB                 mov     [esp+8], ecx
.text:004048EF                 mov     [esp+4], edx
.text:004048F3                 mov     edx, [esp+20h]
.text:004048F7                 mov     [esp], edx
.text:004048FA                 call    sub_404700
.text:004048FF                 add     esp, 1Ch
.text:00404902                 retn
.text:00404902 ; ---------------------------------------------------------------------------
.text:00404903                 align 10h
.text:00404910 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404930+3↓o
.text:00404921 ; const char aS[]
.text:00404921 aS              db '%s',0               ; DATA XREF: sub_404930+10↓o
.text:00404924                 align 10h
.text:00404930
.text:00404930 ; =============== S U B R O U T I N E =======================================
.text:00404930
.text:00404930 ; Attributes: noreturn
.text:00404930
.text:00404930 sub_404930      proc near               ; CODE XREF: .text:loc_402D29↑p
.text:00404930                                         ; sub_402D30+24↑p ...
.text:00404930
.text:00404930 Code            = dword ptr -1Ch
.text:00404930 ErrorMessage    = dword ptr -18h
.text:00404930 var_14          = dword ptr -14h
.text:00404930 var_10          = byte ptr -10h
.text:00404930
.text:00404930                 sub     esp, 1Ch
.text:00404933                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040493A                 call    ds:libintl_gettext
.text:00404940                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00404948                 mov     edx, Code
.text:0040494E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404956                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040495A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040495D                 call    sub_4049C0
.text:00404962                 call    abort
.text:00404962 sub_404930      endp
.text:00404962
.text:00404962 ; ---------------------------------------------------------------------------
.text:00404967                 align 10h
.text:00404970
.text:00404970 ; =============== S U B R O U T I N E =======================================
.text:00404970
.text:00404970 ; Attributes: thunk
.text:00404970
.text:00404970 libintl_bindtextdomain proc near
.text:00404970                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404970 libintl_bindtextdomain endp
.text:00404970
.text:00404970 ; ---------------------------------------------------------------------------
.text:00404976                 align 10h
.text:00404980                 jmp     ds:libintl_textdomain
.text:00404980 ; ---------------------------------------------------------------------------
.text:00404986                 align 10h
.text:00404990                 jmp     ds:libintl_gettext
.text:00404990 ; ---------------------------------------------------------------------------
.text:00404996                 align 10h
.text:004049A0 ; const char aS_0[]
.text:004049A0 aS_0            db ': %s',0             ; DATA XREF: sub_4049C0+B8↓o
.text:004049A0                                         ; sub_404AC4+122↓o
.text:004049A5 aUnknownSystemE db 'Unknown system error',0
.text:004049A5                                         ; DATA XREF: sub_4049C0:loc_404A8D↓o
.text:004049A5                                         ; sub_404AC4:loc_404BFE↓o
.text:004049BA ; const char aS_1[]
.text:004049BA aS_1            db '%s: ',0             ; DATA XREF: sub_4049C0:loc_404A94↓o
.text:004049BF                 align 10h
.text:004049C0
.text:004049C0 ; =============== S U B R O U T I N E =======================================
.text:004049C0
.text:004049C0
.text:004049C0 ; int __cdecl sub_4049C0(int Code, int ErrorMessage, char *, char)
.text:004049C0 sub_4049C0      proc near               ; CODE XREF: sub_401360+119↑p
.text:004049C0                                         ; sub_401360+1F6↑p ...
.text:004049C0
.text:004049C0 Stream          = dword ptr -1Ch
.text:004049C0 Format          = dword ptr -18h
.text:004049C0 ArgList         = dword ptr -14h
.text:004049C0 Code            = dword ptr  4
.text:004049C0 ErrorMessage    = dword ptr  8
.text:004049C0 arg_8           = dword ptr  0Ch
.text:004049C0 arg_C           = byte ptr  10h
.text:004049C0
.text:004049C0                 push    esi
.text:004049C1                 push    ebx
.text:004049C2                 sub     esp, 14h
.text:004049C5                 mov     edx, ds:_iob
.text:004049CB                 mov     esi, [esp+1Ch+Code]
.text:004049CF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004049D3                 add     edx, 20h ; ' '
.text:004049D6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004049D9                 call    fflush
.text:004049DE                 mov     eax, ds:dword_4071C0
.text:004049E3                 test    eax, eax
.text:004049E5                 jz      loc_404A94
.text:004049EB                 call    eax ; dword_4071C0
.text:004049ED
.text:004049ED loc_4049ED:                             ; CODE XREF: sub_4049C0+F7↓j
.text:004049ED                 lea     edx, [esp+1Ch+arg_C]
.text:004049F1                 mov     ecx, [esp+1Ch+arg_8]
.text:004049F5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004049F9                 mov     edx, ds:_iob
.text:004049FF                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404A03                 add     edx, 40h ; '@'
.text:00404A06                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404A09                 call    vfprintf
.text:00404A0E                 inc     ds:dword_4071D0
.text:00404A14                 test    ebx, ebx
.text:00404A16                 jnz     short loc_404A62
.text:00404A18
.text:00404A18 loc_404A18:                             ; CODE XREF: sub_4049C0+CB↓j
.text:00404A18                 mov     edx, ds:_iob
.text:00404A1E                 lea     ecx, [edx+40h]
.text:00404A21                 mov     ebx, [ecx+4]
.text:00404A24                 dec     ebx
.text:00404A25                 test    ebx, ebx
.text:00404A27                 mov     [ecx+4], ebx
.text:00404A2A                 js      short loc_404A50
.text:00404A2C                 mov     ecx, [edx+40h]
.text:00404A2F                 mov     byte ptr [ecx], 0Ah
.text:00404A32                 inc     dword ptr [edx+40h]
.text:00404A35
.text:00404A35 loc_404A35:                             ; CODE XREF: sub_4049C0+A0↓j
.text:00404A35                 mov     edx, ds:_iob
.text:00404A3B                 add     edx, 40h ; '@'
.text:00404A3E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404A41                 call    fflush
.text:00404A46                 test    esi, esi
.text:00404A48                 jnz     short loc_404ABC
.text:00404A4A                 add     esp, 14h
.text:00404A4D                 pop     ebx
.text:00404A4E                 pop     esi
.text:00404A4F                 retn
.text:00404A50 ; ---------------------------------------------------------------------------
.text:00404A50
.text:00404A50 loc_404A50:                             ; CODE XREF: sub_4049C0+6A↑j
.text:00404A50                 mov     [esp+1Ch+Format], ecx ; File
.text:00404A54                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00404A5B                 call    _flsbuf
.text:00404A60                 jmp     short loc_404A35
.text:00404A62 ; ---------------------------------------------------------------------------
.text:00404A62
.text:00404A62 loc_404A62:                             ; CODE XREF: sub_4049C0+56↑j
.text:00404A62                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404A65                 call    strerror
.text:00404A6A                 test    eax, eax
.text:00404A6C                 jz      short loc_404A8D
.text:00404A6E
.text:00404A6E loc_404A6E:                             ; CODE XREF: sub_4049C0+D2↓j
.text:00404A6E                 mov     [esp+1Ch+ArgList], eax
.text:00404A72                 mov     ebx, ds:_iob
.text:00404A78                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00404A80                 add     ebx, 40h ; '@'
.text:00404A83                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404A86                 call    fprintf
.text:00404A8B                 jmp     short loc_404A18
.text:00404A8D ; ---------------------------------------------------------------------------
.text:00404A8D
.text:00404A8D loc_404A8D:                             ; CODE XREF: sub_4049C0+AC↑j
.text:00404A8D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404A92                 jmp     short loc_404A6E
.text:00404A94 ; ---------------------------------------------------------------------------
.text:00404A94
.text:00404A94 loc_404A94:                             ; CODE XREF: sub_4049C0+25↑j
.text:00404A94                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:00404A9C                 mov     edx, ds:_iob
.text:00404AA2                 mov     ecx, ds:dword_407190
.text:00404AA8                 add     edx, 40h ; '@'
.text:00404AAB                 mov     [esp+1Ch+ArgList], ecx
.text:00404AAF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404AB2                 call    fprintf
.text:00404AB7                 jmp     loc_4049ED
.text:00404ABC ; ---------------------------------------------------------------------------
.text:00404ABC
.text:00404ABC loc_404ABC:                             ; CODE XREF: sub_4049C0+88↑j
.text:00404ABC                 mov     [esp+1Ch+Stream], esi ; Code
.text:00404ABF                 call    exit
.text:00404ABF sub_4049C0      endp
.text:00404ABF
.text:00404AC4
.text:00404AC4 ; =============== S U B R O U T I N E =======================================
.text:00404AC4
.text:00404AC4
.text:00404AC4 ; int __cdecl sub_404AC4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404AC4 sub_404AC4      proc near               ; DATA XREF: sub_404AC4+77↓o
.text:00404AC4
.text:00404AC4 Stream          = dword ptr -28h
.text:00404AC4 Format          = dword ptr -24h
.text:00404AC4 ArgList         = dword ptr -20h
.text:00404AC4 var_1C          = dword ptr -1Ch
.text:00404AC4 Code            = dword ptr  8
.text:00404AC4 ErrorMessage    = dword ptr  0Ch
.text:00404AC4 Str2            = dword ptr  10h
.text:00404AC4 arg_10          = dword ptr  14h
.text:00404AC4 arg_14          = dword ptr  18h
.text:00404AC4 arg_18          = byte ptr  1Ch
.text:00404AC4
.text:00404AC4                 and     eax, 64253A73h
.text:00404AC9                 cmp     ah, [eax]
.text:00404ACB
.text:00404ACB loc_404ACB:                             ; DATA XREF: sub_404AC4:loc_404C05↓o
.text:00404ACB                 add     ds:55003A73h, ah
.text:00404AD1                 push    edi
.text:00404AD2                 push    esi
.text:00404AD3                 push    ebx
.text:00404AD4                 sub     esp, 1Ch
.text:00404AD7                 mov     edx, ds:dword_407200
.text:00404ADD                 mov     ebp, [esp+28h+Code]
.text:00404AE1                 mov     edi, [esp+28h+ErrorMessage]
.text:00404AE5                 test    edx, edx
.text:00404AE7                 mov     ebx, [esp+28h+Str2]
.text:00404AEB                 mov     esi, [esp+28h+arg_10]
.text:00404AEF                 jz      short loc_404B09
.text:00404AF1                 cmp     ds:dword_407180, esi
.text:00404AF7                 jz      loc_404C30
.text:00404AFD
.text:00404AFD loc_404AFD:                             ; CODE XREF: sub_404AC4+18D↓j
.text:00404AFD                 mov     ds:Str1, ebx
.text:00404B03                 mov     ds:dword_407180, esi
.text:00404B09
.text:00404B09 loc_404B09:                             ; CODE XREF: sub_404AC4+2B↑j
.text:00404B09                 mov     edx, ds:_iob
.text:00404B0F                 add     edx, 20h ; ' '
.text:00404B12                 mov     [esp+28h+Stream], edx ; Stream
.text:00404B15                 call    fflush
.text:00404B1A                 mov     eax, ds:dword_4071C0
.text:00404B1F                 test    eax, eax
.text:00404B21                 jz      loc_404C05
.text:00404B27                 call    eax ; dword_4071C0
.text:00404B29
.text:00404B29 loc_404B29:                             ; CODE XREF: sub_404AC4+164↓j
.text:00404B29                 test    ebx, ebx
.text:00404B2B                 jz      short loc_404B4E
.text:00404B2D                 mov     [esp+28h+ArgList], ebx
.text:00404B31                 mov     ebx, ds:_iob
.text:00404B37                 mov     [esp+28h+var_1C], esi
.text:00404B3B                 mov     [esp+28h+Format], offset sub_404AC4 ; Format
.text:00404B43                 add     ebx, 40h ; '@'
.text:00404B46                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404B49                 call    fprintf
.text:00404B4E
.text:00404B4E loc_404B4E:                             ; CODE XREF: sub_404AC4+67↑j
.text:00404B4E                 mov     esi, ds:_iob
.text:00404B54                 lea     edx, [esp+28h+arg_18]
.text:00404B58                 mov     ecx, [esp+28h+arg_14]
.text:00404B5C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404B60                 add     esi, 40h ; '@'
.text:00404B63                 mov     [esp+28h+Format], ecx ; Format
.text:00404B67                 mov     [esp+28h+Stream], esi ; Stream
.text:00404B6A                 call    vfprintf
.text:00404B6F                 inc     ds:dword_4071D0
.text:00404B75                 test    edi, edi
.text:00404B77                 jnz     short loc_404BD0
.text:00404B79
.text:00404B79 loc_404B79:                             ; CODE XREF: sub_404AC4+135↓j
.text:00404B79                 mov     edx, ds:_iob
.text:00404B7F                 lea     ecx, [edx+40h]
.text:00404B82                 mov     ebx, [ecx+4]
.text:00404B85                 dec     ebx
.text:00404B86                 test    ebx, ebx
.text:00404B88                 mov     [ecx+4], ebx
.text:00404B8B                 js      short loc_404BB7
.text:00404B8D                 mov     esi, [edx+40h]
.text:00404B90                 mov     byte ptr [esi], 0Ah
.text:00404B93                 inc     dword ptr [edx+40h]
.text:00404B96
.text:00404B96 loc_404B96:                             ; CODE XREF: sub_404AC4+103↓j
.text:00404B96                 mov     ecx, ds:_iob
.text:00404B9C                 add     ecx, 40h ; '@'
.text:00404B9F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404BA2                 call    fflush
.text:00404BA7                 test    ebp, ebp
.text:00404BA9                 jnz     loc_404C56
.text:00404BAF
.text:00404BAF loc_404BAF:                             ; CODE XREF: sub_404AC4+173↓j
.text:00404BAF                                         ; sub_404AC4+187↓j
.text:00404BAF                 add     esp, 1Ch
.text:00404BB2                 pop     ebx
.text:00404BB3                 pop     esi
.text:00404BB4                 pop     edi
.text:00404BB5                 pop     ebp
.text:00404BB6                 retn
.text:00404BB7 ; ---------------------------------------------------------------------------
.text:00404BB7
.text:00404BB7 loc_404BB7:                             ; CODE XREF: sub_404AC4+C7↑j
.text:00404BB7                 mov     [esp+28h+Format], ecx ; File
.text:00404BBB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404BC2                 call    _flsbuf
.text:00404BC7                 jmp     short loc_404B96
.text:00404BC7 ; ---------------------------------------------------------------------------
.text:00404BC9                 align 10h
.text:00404BD0
.text:00404BD0 loc_404BD0:                             ; CODE XREF: sub_404AC4+B3↑j
.text:00404BD0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404BD3                 call    strerror
.text:00404BD8                 test    eax, eax
.text:00404BDA                 jz      short loc_404BFE
.text:00404BDC
.text:00404BDC loc_404BDC:                             ; CODE XREF: sub_404AC4+13F↓j
.text:00404BDC                 mov     [esp+28h+ArgList], eax
.text:00404BE0                 mov     edi, ds:_iob
.text:00404BE6                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:00404BEE                 add     edi, 40h ; '@'
.text:00404BF1                 mov     [esp+28h+Stream], edi ; Stream
.text:00404BF4                 call    fprintf
.text:00404BF9                 jmp     loc_404B79
.text:00404BFE ; ---------------------------------------------------------------------------
.text:00404BFE
.text:00404BFE loc_404BFE:                             ; CODE XREF: sub_404AC4+116↑j
.text:00404BFE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404C03                 jmp     short loc_404BDC
.text:00404C05 ; ---------------------------------------------------------------------------
.text:00404C05
.text:00404C05 loc_404C05:                             ; CODE XREF: sub_404AC4+5D↑j
.text:00404C05                 mov     [esp+28h+Format], (offset loc_404ACB+1) ; Format
.text:00404C0D                 mov     ecx, ds:_iob
.text:00404C13                 mov     edx, ds:dword_407190
.text:00404C19                 add     ecx, 40h ; '@'
.text:00404C1C                 mov     [esp+28h+ArgList], edx
.text:00404C20                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404C23                 call    fprintf
.text:00404C28                 jmp     loc_404B29
.text:00404C28 ; ---------------------------------------------------------------------------
.text:00404C2D                 align 10h
.text:00404C30
.text:00404C30 loc_404C30:                             ; CODE XREF: sub_404AC4+33↑j
.text:00404C30                 mov     eax, ds:Str1
.text:00404C35                 cmp     ebx, eax
.text:00404C37                 jz      loc_404BAF
.text:00404C3D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404C41                 mov     [esp+28h+Stream], eax ; Str1
.text:00404C44                 call    strcmp
.text:00404C49                 test    eax, eax
.text:00404C4B                 jz      loc_404BAF
.text:00404C51                 jmp     loc_404AFD
.text:00404C56 ; ---------------------------------------------------------------------------
.text:00404C56
.text:00404C56 loc_404C56:                             ; CODE XREF: sub_404AC4+E5↑j
.text:00404C56                 mov     [esp+28h+Stream], ebp ; Code
.text:00404C59                 call    exit
.text:00404C59 sub_404AC4      endp ; sp-analysis failed
.text:00404C59
.text:00404C59 ; ---------------------------------------------------------------------------
.text:00404C5E                 align 10h
.text:00404C60
.text:00404C60 ; =============== S U B R O U T I N E =======================================
.text:00404C60
.text:00404C60 ; Attributes: thunk
.text:00404C60
.text:00404C60 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00404C60 mbrtowc         proc near               ; CODE XREF: sub_403100+757↑p
.text:00404C60                 jmp     ds:__imp_mbrtowc
.text:00404C60 mbrtowc         endp
.text:00404C60
.text:00404C60 ; ---------------------------------------------------------------------------
.text:00404C66                 align 10h
.text:00404C70
.text:00404C70 ; =============== S U B R O U T I N E =======================================
.text:00404C70
.text:00404C70 ; Attributes: bp-based frame
.text:00404C70
.text:00404C70 sub_404C70      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00404C70                 push    ebp
.text:00404C71                 mov     ecx, offset dword_407000
.text:00404C76                 cmp     ecx, offset dword_407000
.text:00404C7C                 mov     ebp, esp
.text:00404C7E                 jnb     short loc_404C96
.text:00404C80
.text:00404C80 loc_404C80:                             ; CODE XREF: sub_404C70+24↓j
.text:00404C80                 mov     edx, [ecx+4]
.text:00404C83                 mov     eax, [ecx]
.text:00404C85                 add     ecx, 8
.text:00404C88                 add     [edx+400000h], eax
.text:00404C8E                 cmp     ecx, offset dword_407000
.text:00404C94                 jb      short loc_404C80
.text:00404C96
.text:00404C96 loc_404C96:                             ; CODE XREF: sub_404C70+E↑j
.text:00404C96                 pop     ebp
.text:00404C97                 retn
.text:00404C97 sub_404C70      endp
.text:00404C97
.text:00404C97 ; ---------------------------------------------------------------------------
.text:00404C98                 align 10h
.text:00404CA0
.text:00404CA0 ; =============== S U B R O U T I N E =======================================
.text:00404CA0
.text:00404CA0 ; Attributes: bp-based frame
.text:00404CA0
.text:00404CA0 sub_404CA0      proc near               ; CODE XREF: sub_401080+16↑p
.text:00404CA0                                         ; TopLevelExceptionFilter+D7↑p
.text:00404CA0                 push    ebp
.text:00404CA1                 mov     ebp, esp
.text:00404CA3                 fninit
.text:00404CA5                 pop     ebp
.text:00404CA6                 retn
.text:00404CA6 sub_404CA0      endp
.text:00404CA6
.text:00404CA6 ; ---------------------------------------------------------------------------
.text:00404CA7                 align 10h
.text:00404CB0
.text:00404CB0 ; =============== S U B R O U T I N E =======================================
.text:00404CB0
.text:00404CB0 ; Attributes: bp-based frame
.text:00404CB0
.text:00404CB0 ; void __cdecl sub_404CB0()
.text:00404CB0 sub_404CB0      proc near               ; DATA XREF: .text:loc_404CF9↓o
.text:00404CB0                                         ; sub_404D40:loc_404D6E↓o
.text:00404CB0                 push    ebp
.text:00404CB1                 mov     ebp, esp
.text:00404CB3                 sub     esp, 8
.text:00404CB6                 mov     eax, off_406084
.text:00404CBB                 mov     edx, [eax]
.text:00404CBD                 test    edx, edx
.text:00404CBF                 jnz     short loc_404CC5
.text:00404CC1
.text:00404CC1 loc_404CC1:                             ; CODE XREF: sub_404CB0+2C↓j
.text:00404CC1                 mov     esp, ebp
.text:00404CC3                 pop     ebp
.text:00404CC4                 retn
.text:00404CC5 ; ---------------------------------------------------------------------------
.text:00404CC5
.text:00404CC5 loc_404CC5:                             ; CODE XREF: sub_404CB0+F↑j
.text:00404CC5                                         ; sub_404CB0+2A↓j
.text:00404CC5                 call    dword ptr [eax]
.text:00404CC7                 mov     edx, off_406084
.text:00404CCD                 mov     ecx, [edx+4]
.text:00404CD0                 lea     eax, [edx+4]
.text:00404CD3                 mov     off_406084, eax
.text:00404CD8                 test    ecx, ecx
.text:00404CDA                 jnz     short loc_404CC5
.text:00404CDC                 jmp     short loc_404CC1
.text:00404CDC sub_404CB0      endp
.text:00404CDC
.text:00404CDC ; ---------------------------------------------------------------------------
.text:00404CDE                 align 10h
.text:00404CE0                 push    ebp
.text:00404CE1                 mov     ebp, esp
.text:00404CE3                 sub     esp, 8
.text:00404CE6                 mov     [ebp-4], ebx
.text:00404CE9                 mov     eax, ds:dword_405010
.text:00404CEE                 cmp     eax, 0FFFFFFFFh
.text:00404CF1                 jz      short loc_404D1C
.text:00404CF3
.text:00404CF3 loc_404CF3:                             ; CODE XREF: .text:00404D26↓j
.text:00404CF3                                         ; .text:00404D39↓j
.text:00404CF3                 test    eax, eax
.text:00404CF5                 mov     ebx, eax
.text:00404CF7                 jnz     short loc_404D10
.text:00404CF9
.text:00404CF9 loc_404CF9:                             ; CODE XREF: .text:00404D1A↓j
.text:00404CF9                 mov     dword ptr [esp], offset sub_404CB0
.text:00404D00                 call    sub_401040
.text:00404D05                 mov     ebx, [ebp-4]
.text:00404D08                 mov     esp, ebp
.text:00404D0A                 pop     ebp
.text:00404D0B                 retn
.text:00404D0B ; ---------------------------------------------------------------------------
.text:00404D0C                 align 10h
.text:00404D10
.text:00404D10 loc_404D10:                             ; CODE XREF: .text:00404CF7↑j
.text:00404D10                                         ; .text:00404D18↓j
.text:00404D10                 call    ds:dword_405010[ebx*4]
.text:00404D17                 dec     ebx
.text:00404D18                 jnz     short loc_404D10
.text:00404D1A                 jmp     short loc_404CF9
.text:00404D1C ; ---------------------------------------------------------------------------
.text:00404D1C
.text:00404D1C loc_404D1C:                             ; CODE XREF: .text:00404CF1↑j
.text:00404D1C                 mov     ecx, ds:dword_405014
.text:00404D22                 xor     eax, eax
.text:00404D24                 test    ecx, ecx
.text:00404D26                 jz      short loc_404CF3
.text:00404D28                 mov     edx, offset dword_405010
.text:00404D2D                 lea     esi, [esi+0]
.text:00404D30
.text:00404D30 loc_404D30:                             ; CODE XREF: .text:00404D37↓j
.text:00404D30                 inc     eax
.text:00404D31                 mov     ecx, [edx+eax*4+4]
.text:00404D35                 test    ecx, ecx
.text:00404D37                 jnz     short loc_404D30
.text:00404D39                 jmp     short loc_404CF3
.text:00404D39 ; ---------------------------------------------------------------------------
.text:00404D3B                 align 10h
.text:00404D40
.text:00404D40 ; =============== S U B R O U T I N E =======================================
.text:00404D40
.text:00404D40 ; Attributes: bp-based frame
.text:00404D40
.text:00404D40 sub_404D40      proc near               ; CODE XREF: sub_401360+18↑p
.text:00404D40
.text:00404D40 var_8           = dword ptr -8
.text:00404D40 var_4           = dword ptr -4
.text:00404D40
.text:00404D40                 push    ebp
.text:00404D41                 mov     ebp, esp
.text:00404D43                 sub     esp, 8
.text:00404D46                 mov     [ebp+var_4], ebx
.text:00404D49                 mov     edx, dword_406080
.text:00404D4F                 test    edx, edx
.text:00404D51                 jnz     short loc_404D7A
.text:00404D53                 mov     eax, ds:dword_405010
.text:00404D58                 mov     edx, 1
.text:00404D5D                 mov     dword_406080, edx
.text:00404D63                 cmp     eax, 0FFFFFFFFh
.text:00404D66                 jz      short loc_404D8D
.text:00404D68
.text:00404D68 loc_404D68:                             ; CODE XREF: sub_404D40+57↓j
.text:00404D68                                         ; sub_404D40+69↓j
.text:00404D68                 test    eax, eax
.text:00404D6A                 mov     ebx, eax
.text:00404D6C                 jnz     short loc_404D81
.text:00404D6E
.text:00404D6E loc_404D6E:                             ; CODE XREF: sub_404D40+4B↓j
.text:00404D6E                 mov     [esp+8+var_8], offset sub_404CB0 ; void (__cdecl *)()
.text:00404D75                 call    sub_401040
.text:00404D7A
.text:00404D7A loc_404D7A:                             ; CODE XREF: sub_404D40+11↑j
.text:00404D7A                 mov     ebx, [ebp+var_4]
.text:00404D7D                 mov     esp, ebp
.text:00404D7F                 pop     ebp
.text:00404D80                 retn
.text:00404D81 ; ---------------------------------------------------------------------------
.text:00404D81
.text:00404D81 loc_404D81:                             ; CODE XREF: sub_404D40+2C↑j
.text:00404D81                                         ; sub_404D40+49↓j
.text:00404D81                 call    ds:dword_405010[ebx*4]
.text:00404D88                 dec     ebx
.text:00404D89                 jnz     short loc_404D81
.text:00404D8B                 jmp     short loc_404D6E
.text:00404D8D ; ---------------------------------------------------------------------------
.text:00404D8D
.text:00404D8D loc_404D8D:                             ; CODE XREF: sub_404D40+26↑j
.text:00404D8D                 mov     ecx, ds:dword_405014
.text:00404D93                 xor     eax, eax
.text:00404D95                 test    ecx, ecx
.text:00404D97                 jz      short loc_404D68
.text:00404D99                 mov     edx, offset dword_405010
.text:00404D9E                 mov     esi, esi
.text:00404DA0
.text:00404DA0 loc_404DA0:                             ; CODE XREF: sub_404D40+67↓j
.text:00404DA0                 inc     eax
.text:00404DA1                 mov     ebx, [edx+eax*4+4]
.text:00404DA5                 test    ebx, ebx
.text:00404DA7                 jnz     short loc_404DA0
.text:00404DA9                 jmp     short loc_404D68
.text:00404DA9 sub_404D40      endp
.text:00404DA9
.text:00404DA9 ; ---------------------------------------------------------------------------
.text:00404DAB                 align 10h
.text:00404DB0
.text:00404DB0 ; =============== S U B R O U T I N E =======================================
.text:00404DB0
.text:00404DB0 ; Attributes: info_from_lumina
.text:00404DB0
.text:00404DB0 ; void *__cdecl _alloca(size_t Size)
.text:00404DB0 __alloca        proc near               ; CODE XREF: sub_401360+13↑p
.text:00404DB0                 push    ecx
.text:00404DB1                 mov     ecx, esp
.text:00404DB3                 add     ecx, 8
.text:00404DB6
.text:00404DB6 loc_404DB6:                             ; CODE XREF: __alloca+1B↓j
.text:00404DB6                 cmp     eax, 1000h
.text:00404DBB                 jb      short loc_404DCD
.text:00404DBD                 sub     ecx, 1000h
.text:00404DC3                 or      dword ptr [ecx], 0
.text:00404DC6                 sub     eax, 1000h
.text:00404DCB                 jmp     short loc_404DB6
.text:00404DCD ; ---------------------------------------------------------------------------
.text:00404DCD
.text:00404DCD loc_404DCD:                             ; CODE XREF: __alloca+B↑j
.text:00404DCD                 sub     ecx, eax
.text:00404DCF                 or      dword ptr [ecx], 0
.text:00404DD2                 mov     eax, esp
.text:00404DD4                 mov     esp, ecx
.text:00404DD6                 mov     ecx, [eax]
.text:00404DD8                 mov     eax, [eax+4]
.text:00404DDB                 jmp     eax
.text:00404DDB __alloca        endp
.text:00404DDB
.text:00404DDB ; ---------------------------------------------------------------------------
.text:00404DDD                 align 10h
.text:00404DE0                 jmp     ds:__set_app_type
.text:00404DE0 ; ---------------------------------------------------------------------------
.text:00404DE6                 align 10h
.text:00404DF0
.text:00404DF0 ; =============== S U B R O U T I N E =======================================
.text:00404DF0
.text:00404DF0 ; Attributes: thunk
.text:00404DF0
.text:00404DF0 ; void __cdecl cexit()
.text:00404DF0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00404DF0                 jmp     ds:__imp__cexit
.text:00404DF0 _cexit          endp
.text:00404DF0
.text:00404DF0 ; ---------------------------------------------------------------------------
.text:00404DF6                 align 10h
.text:00404E00
.text:00404E00 ; =============== S U B R O U T I N E =======================================
.text:00404E00
.text:00404E00 ; Attributes: thunk
.text:00404E00
.text:00404E00 ; char ***__cdecl _p__environ()
.text:00404E00 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00404E00                 jmp     ds:__imp___p__environ
.text:00404E00 __p__environ    endp
.text:00404E00
.text:00404E00 ; ---------------------------------------------------------------------------
.text:00404E06                 align 10h
.text:00404E10
.text:00404E10 ; =============== S U B R O U T I N E =======================================
.text:00404E10
.text:00404E10 ; Attributes: thunk
.text:00404E10
.text:00404E10 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00404E10 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00404E10                                         ; TopLevelExceptionFilter+88↑p ...
.text:00404E10
.text:00404E10 Signal          = dword ptr  4
.text:00404E10 Function        = dword ptr  8
.text:00404E10
.text:00404E10                 jmp     ds:__imp_signal
.text:00404E10 signal          endp
.text:00404E10
.text:00404E10 ; ---------------------------------------------------------------------------
.text:00404E16                 align 10h
.text:00404E20
.text:00404E20 ; =============== S U B R O U T I N E =======================================
.text:00404E20
.text:00404E20 ; Attributes: thunk
.text:00404E20
.text:00404E20 ; int *__cdecl _p__fmode()
.text:00404E20 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00404E20                 jmp     ds:__imp___p__fmode
.text:00404E20 __p__fmode      endp
.text:00404E20
.text:00404E20 ; ---------------------------------------------------------------------------
.text:00404E26                 align 10h
.text:00404E30
.text:00404E30 ; =============== S U B R O U T I N E =======================================
.text:00404E30
.text:00404E30 ; Attributes: thunk
.text:00404E30
.text:00404E30 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00404E30 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00404E30                                         ; sub_401080+90↑p ...
.text:00404E30
.text:00404E30 FileHandle      = dword ptr  4
.text:00404E30 Mode            = dword ptr  8
.text:00404E30
.text:00404E30                 jmp     ds:__imp__setmode
.text:00404E30 _setmode        endp
.text:00404E30
.text:00404E30 ; ---------------------------------------------------------------------------
.text:00404E36                 align 10h
.text:00404E40
.text:00404E40 ; =============== S U B R O U T I N E =======================================
.text:00404E40
.text:00404E40 ; Attributes: thunk
.text:00404E40
.text:00404E40 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00404E40                 jmp     ds:__imp___getmainargs
.text:00404E40 __getmainargs   endp
.text:00404E40
.text:00404E40 ; ---------------------------------------------------------------------------
.text:00404E46                 align 10h
.text:00404E50
.text:00404E50 ; =============== S U B R O U T I N E =======================================
.text:00404E50
.text:00404E50 ; Attributes: thunk
.text:00404E50
.text:00404E50 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00404E50 fwrite          proc near               ; CODE XREF: sub_401360+18D↑p
.text:00404E50
.text:00404E50 Buffer          = dword ptr  4
.text:00404E50 ElementSize     = dword ptr  8
.text:00404E50 ElementCount    = dword ptr  0Ch
.text:00404E50 Stream          = dword ptr  10h
.text:00404E50
.text:00404E50                 jmp     ds:__imp_fwrite
.text:00404E50 fwrite          endp
.text:00404E50
.text:00404E50 ; ---------------------------------------------------------------------------
.text:00404E56                 align 10h
.text:00404E60
.text:00404E60 ; =============== S U B R O U T I N E =======================================
.text:00404E60
.text:00404E60 ; Attributes: thunk
.text:00404E60
.text:00404E60 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00404E60 setlocale       proc near               ; CODE XREF: sub_401360+34↑p
.text:00404E60
.text:00404E60 Category        = dword ptr  4
.text:00404E60 Locale          = dword ptr  8
.text:00404E60
.text:00404E60                 jmp     ds:__imp_setlocale
.text:00404E60 setlocale       endp
.text:00404E60
.text:00404E60 ; ---------------------------------------------------------------------------
.text:00404E66                 align 10h
.text:00404E70
.text:00404E70 ; =============== S U B R O U T I N E =======================================
.text:00404E70
.text:00404E70 ; Attributes: noreturn thunk
.text:00404E70
.text:00404E70 ; void __cdecl __noreturn exit(int Code)
.text:00404E70 exit            proc near               ; CODE XREF: sub_401360:loc_4014B1↑p
.text:00404E70                                         ; sub_4016D0+3E↑p ...
.text:00404E70
.text:00404E70 Code            = dword ptr  4
.text:00404E70
.text:00404E70                 jmp     ds:__imp_exit
.text:00404E70 exit            endp
.text:00404E70
.text:00404E70 ; ---------------------------------------------------------------------------
.text:00404E76                 align 10h
.text:00404E80
.text:00404E80 ; =============== S U B R O U T I N E =======================================
.text:00404E80
.text:00404E80 ; Attributes: thunk
.text:00404E80
.text:00404E80 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00404E80 fputs           proc near               ; CODE XREF: sub_4016D0+83↑p
.text:00404E80                                         ; sub_4016D0+A5↑p ...
.text:00404E80
.text:00404E80 Buffer          = dword ptr  4
.text:00404E80 Stream          = dword ptr  8
.text:00404E80
.text:00404E80                 jmp     ds:__imp_fputs
.text:00404E80 fputs           endp
.text:00404E80
.text:00404E80 ; ---------------------------------------------------------------------------
.text:00404E86                 align 10h
.text:00404E90
.text:00404E90 ; =============== S U B R O U T I N E =======================================
.text:00404E90
.text:00404E90 ; Attributes: thunk
.text:00404E90
.text:00404E90 ; int printf(const char *const Format, ...)
.text:00404E90 printf          proc near               ; CODE XREF: sub_4016D0+61↑p
.text:00404E90                                         ; sub_4016D0+E4↑p
.text:00404E90
.text:00404E90 Format          = dword ptr  4
.text:00404E90
.text:00404E90                 jmp     ds:__imp_printf
.text:00404E90 printf          endp
.text:00404E90
.text:00404E90 ; ---------------------------------------------------------------------------
.text:00404E96                 align 10h
.text:00404EA0
.text:00404EA0 ; =============== S U B R O U T I N E =======================================
.text:00404EA0
.text:00404EA0 ; Attributes: thunk
.text:00404EA0
.text:00404EA0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00404EA0 fprintf         proc near               ; CODE XREF: sub_401360+145↑p
.text:00404EA0                                         ; sub_4016D0+36↑p ...
.text:00404EA0
.text:00404EA0 Stream          = dword ptr  4
.text:00404EA0 Format          = dword ptr  8
.text:00404EA0
.text:00404EA0                 jmp     ds:__imp_fprintf
.text:00404EA0 fprintf         endp
.text:00404EA0
.text:00404EA0 ; ---------------------------------------------------------------------------
.text:00404EA6                 align 10h
.text:00404EB0
.text:00404EB0 ; =============== S U B R O U T I N E =======================================
.text:00404EB0
.text:00404EB0 ; Attributes: thunk
.text:00404EB0
.text:00404EB0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00404EB0 _flsbuf         proc near               ; CODE XREF: sub_401360+1CF↑p
.text:00404EB0                                         ; sub_404700+128↑p ...
.text:00404EB0
.text:00404EB0 File            = dword ptr  8
.text:00404EB0
.text:00404EB0                 jmp     ds:__imp__flsbuf
.text:00404EB0 _flsbuf         endp
.text:00404EB0
.text:00404EB0 ; ---------------------------------------------------------------------------
.text:00404EB6                 align 10h
.text:00404EC0
.text:00404EC0 ; =============== S U B R O U T I N E =======================================
.text:00404EC0
.text:00404EC0 ; Attributes: thunk
.text:00404EC0
.text:00404EC0 ; size_t __cdecl strlen(const char *Str)
.text:00404EC0 strlen          proc near               ; CODE XREF: sub_401A10+2A9↑p
.text:00404EC0                                         ; sub_401A10+346↑p ...
.text:00404EC0
.text:00404EC0 Str             = dword ptr  4
.text:00404EC0
.text:00404EC0                 jmp     ds:__imp_strlen
.text:00404EC0 strlen          endp
.text:00404EC0
.text:00404EC0 ; ---------------------------------------------------------------------------
.text:00404EC6                 align 10h
.text:00404ED0
.text:00404ED0 ; =============== S U B R O U T I N E =======================================
.text:00404ED0
.text:00404ED0 ; Attributes: thunk
.text:00404ED0
.text:00404ED0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00404ED0 strncmp         proc near               ; CODE XREF: sub_401A10+23F↑p
.text:00404ED0                                         ; sub_401A10+699↑p
.text:00404ED0
.text:00404ED0 Str1            = dword ptr  4
.text:00404ED0 Str2            = dword ptr  8
.text:00404ED0 MaxCount        = dword ptr  0Ch
.text:00404ED0
.text:00404ED0                 jmp     ds:__imp_strncmp
.text:00404ED0 strncmp         endp
.text:00404ED0
.text:00404ED0 ; ---------------------------------------------------------------------------
.text:00404ED6                 align 10h
.text:00404EE0
.text:00404EE0 ; =============== S U B R O U T I N E =======================================
.text:00404EE0
.text:00404EE0 ; Attributes: thunk
.text:00404EE0
.text:00404EE0 ; char *__cdecl getenv(const char *VarName)
.text:00404EE0 getenv          proc near               ; CODE XREF: sub_401A10+B57↑p
.text:00404EE0
.text:00404EE0 VarName         = dword ptr  4
.text:00404EE0
.text:00404EE0                 jmp     ds:__imp_getenv
.text:00404EE0 getenv          endp
.text:00404EE0
.text:00404EE0 ; ---------------------------------------------------------------------------
.text:00404EE6                 align 10h
.text:00404EF0
.text:00404EF0 ; =============== S U B R O U T I N E =======================================
.text:00404EF0
.text:00404EF0 ; Attributes: thunk
.text:00404EF0
.text:00404EF0 ; char *__cdecl strchr(const char *Str, int Val)
.text:00404EF0 strchr          proc near               ; CODE XREF: sub_401A10+469↑p
.text:00404EF0                                         ; sub_401A10+53A↑p ...
.text:00404EF0
.text:00404EF0 Str             = dword ptr  4
.text:00404EF0 Val             = dword ptr  8
.text:00404EF0
.text:00404EF0                 jmp     ds:__imp_strchr
.text:00404EF0 strchr          endp
.text:00404EF0
.text:00404EF0 ; ---------------------------------------------------------------------------
.text:00404EF6                 align 10h
.text:00404F00
.text:00404F00 ; =============== S U B R O U T I N E =======================================
.text:00404F00
.text:00404F00 ; Attributes: thunk
.text:00404F00
.text:00404F00 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00404F00 memcpy          proc near               ; CODE XREF: .text:004028D9↑p
.text:00404F00                                         ; .text:00402ED8↑p ...
.text:00404F00
.text:00404F00 Src             = dword ptr  8
.text:00404F00 Size            = dword ptr  0Ch
.text:00404F00
.text:00404F00                 jmp     ds:__imp_memcpy
.text:00404F00 memcpy          endp
.text:00404F00
.text:00404F00 ; ---------------------------------------------------------------------------
.text:00404F06                 align 10h
.text:00404F10
.text:00404F10 ; =============== S U B R O U T I N E =======================================
.text:00404F10
.text:00404F10 ; Attributes: thunk
.text:00404F10
.text:00404F10 ; int *__cdecl errno()
.text:00404F10 _errno          proc near               ; CODE XREF: sub_402C10:loc_402C4D↑p
.text:00404F10                                         ; .text:00403B6B↑p ...
.text:00404F10                 jmp     ds:__imp__errno
.text:00404F10 _errno          endp
.text:00404F10
.text:00404F10 ; ---------------------------------------------------------------------------
.text:00404F16                 align 10h
.text:00404F20
.text:00404F20 ; =============== S U B R O U T I N E =======================================
.text:00404F20
.text:00404F20 ; Attributes: thunk
.text:00404F20
.text:00404F20 ; int __cdecl fclose(FILE *Stream)
.text:00404F20 fclose          proc near               ; CODE XREF: sub_402C10+27↑p
.text:00404F20
.text:00404F20 Stream          = dword ptr  4
.text:00404F20
.text:00404F20                 jmp     ds:__imp_fclose
.text:00404F20 fclose          endp
.text:00404F20
.text:00404F20 ; ---------------------------------------------------------------------------
.text:00404F26                 align 10h
.text:00404F30
.text:00404F30 ; =============== S U B R O U T I N E =======================================
.text:00404F30
.text:00404F30 ; Attributes: thunk
.text:00404F30
.text:00404F30 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00404F30 memset          proc near               ; CODE XREF: .text:00402E56↑p
.text:00404F30
.text:00404F30 Val             = dword ptr  8
.text:00404F30 Size            = dword ptr  0Ch
.text:00404F30
.text:00404F30                 jmp     ds:__imp_memset
.text:00404F30 memset          endp
.text:00404F30
.text:00404F30 ; ---------------------------------------------------------------------------
.text:00404F36                 align 10h
.text:00404F40
.text:00404F40 ; =============== S U B R O U T I N E =======================================
.text:00404F40
.text:00404F40 ; Attributes: thunk
.text:00404F40
.text:00404F40 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00404F40 calloc          proc near               ; CODE XREF: .text:00402E93↑p
.text:00404F40
.text:00404F40 Count           = dword ptr  4
.text:00404F40 Size            = dword ptr  8
.text:00404F40
.text:00404F40                 jmp     ds:__imp_calloc
.text:00404F40 calloc          endp
.text:00404F40
.text:00404F40 ; ---------------------------------------------------------------------------
.text:00404F46                 align 10h
.text:00404F50
.text:00404F50 ; =============== S U B R O U T I N E =======================================
.text:00404F50
.text:00404F50 ; Attributes: thunk
.text:00404F50
.text:00404F50 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00404F50 realloc         proc near               ; CODE XREF: .text:00402D90↑p
.text:00404F50                                         ; sub_402DC0+16↑p ...
.text:00404F50
.text:00404F50 Block           = dword ptr  4
.text:00404F50 Size            = dword ptr  8
.text:00404F50
.text:00404F50                 jmp     ds:__imp_realloc
.text:00404F50 realloc         endp
.text:00404F50
.text:00404F50 ; ---------------------------------------------------------------------------
.text:00404F56                 align 10h
.text:00404F60
.text:00404F60 ; =============== S U B R O U T I N E =======================================
.text:00404F60
.text:00404F60 ; Attributes: thunk
.text:00404F60
.text:00404F60 ; void *__cdecl malloc(size_t Size)
.text:00404F60 malloc          proc near               ; CODE XREF: .text:00402D14↑p
.text:00404F60                                         ; sub_402D30+E↑p ...
.text:00404F60
.text:00404F60 Size            = dword ptr  4
.text:00404F60
.text:00404F60                 jmp     ds:__imp_malloc
.text:00404F60 malloc          endp
.text:00404F60
.text:00404F60 ; ---------------------------------------------------------------------------
.text:00404F66                 align 10h
.text:00404F70
.text:00404F70 ; =============== S U B R O U T I N E =======================================
.text:00404F70
.text:00404F70 ; Attributes: thunk
.text:00404F70
.text:00404F70 ; void __cdecl free(void *Block)
.text:00404F70 free            proc near               ; CODE XREF: sub_404240+112↑p
.text:00404F70
.text:00404F70 Block           = dword ptr  4
.text:00404F70
.text:00404F70                 jmp     ds:__imp_free
.text:00404F70 free            endp
.text:00404F70
.text:00404F70 ; ---------------------------------------------------------------------------
.text:00404F76                 align 10h
.text:00404F80
.text:00404F80 ; =============== S U B R O U T I N E =======================================
.text:00404F80
.text:00404F80 ; Attributes: noreturn thunk
.text:00404F80
.text:00404F80 ; void __cdecl __noreturn abort()
.text:00404F80 abort           proc near               ; CODE XREF: sub_404240:loc_4043FA↑p
.text:00404F80                                         ; sub_404700:loc_40479C↑p ...
.text:00404F80                 jmp     ds:__imp_abort
.text:00404F80 abort           endp
.text:00404F80
.text:00404F80 ; ---------------------------------------------------------------------------
.text:00404F86                 align 10h
.text:00404F90
.text:00404F90 ; =============== S U B R O U T I N E =======================================
.text:00404F90
.text:00404F90 ; Attributes: thunk
.text:00404F90
.text:00404F90 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00404F90 iswctype        proc near               ; CODE XREF: sub_403100+78B↑p
.text:00404F90
.text:00404F90 C               = word ptr  4
.text:00404F90 Type            = word ptr  8
.text:00404F90
.text:00404F90                 jmp     ds:__imp_iswctype
.text:00404F90 iswctype        endp
.text:00404F90
.text:00404F90 ; ---------------------------------------------------------------------------
.text:00404F96                 align 10h
.text:00404FA0
.text:00404FA0 ; =============== S U B R O U T I N E =======================================
.text:00404FA0
.text:00404FA0 ; Attributes: thunk
.text:00404FA0
.text:00404FA0 ; int __cdecl isctype(int C, int Type)
.text:00404FA0 _isctype        proc near               ; CODE XREF: sub_403100+610↑p
.text:00404FA0
.text:00404FA0 C               = dword ptr  4
.text:00404FA0 Type            = dword ptr  8
.text:00404FA0
.text:00404FA0                 jmp     ds:__imp__isctype
.text:00404FA0 _isctype        endp
.text:00404FA0
.text:00404FA0 ; ---------------------------------------------------------------------------
.text:00404FA6                 align 10h
.text:00404FB0
.text:00404FB0 ; =============== S U B R O U T I N E =======================================
.text:00404FB0
.text:00404FB0 ; Attributes: thunk
.text:00404FB0
.text:00404FB0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00404FB0 vfprintf        proc near               ; CODE XREF: sub_404700+C1↑p
.text:00404FB0                                         ; sub_4049C0+49↑p ...
.text:00404FB0
.text:00404FB0 Stream          = dword ptr  4
.text:00404FB0 Format          = dword ptr  8
.text:00404FB0 ArgList         = dword ptr  0Ch
.text:00404FB0
.text:00404FB0                 jmp     ds:__imp_vfprintf
.text:00404FB0 vfprintf        endp
.text:00404FB0
.text:00404FB0 ; ---------------------------------------------------------------------------
.text:00404FB6                 align 10h
.text:00404FC0
.text:00404FC0 ; =============== S U B R O U T I N E =======================================
.text:00404FC0
.text:00404FC0 ; Attributes: thunk
.text:00404FC0
.text:00404FC0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00404FC0 strcmp          proc near               ; CODE XREF: sub_404AC4+180↑p
.text:00404FC0
.text:00404FC0 Str1            = dword ptr  4
.text:00404FC0 Str2            = dword ptr  8
.text:00404FC0
.text:00404FC0                 jmp     ds:__imp_strcmp
.text:00404FC0 strcmp          endp
.text:00404FC0
.text:00404FC0 ; ---------------------------------------------------------------------------
.text:00404FC6                 align 10h
.text:00404FD0
.text:00404FD0 ; =============== S U B R O U T I N E =======================================
.text:00404FD0
.text:00404FD0 ; Attributes: thunk
.text:00404FD0
.text:00404FD0 ; int __cdecl fflush(FILE *Stream)
.text:00404FD0 fflush          proc near               ; CODE XREF: sub_4049C0+19↑p
.text:00404FD0                                         ; sub_4049C0+81↑p ...
.text:00404FD0
.text:00404FD0 Stream          = dword ptr  4
.text:00404FD0
.text:00404FD0                 jmp     ds:__imp_fflush
.text:00404FD0 fflush          endp
.text:00404FD0
.text:00404FD0 ; ---------------------------------------------------------------------------
.text:00404FD6                 align 10h
.text:00404FE0
.text:00404FE0 ; =============== S U B R O U T I N E =======================================
.text:00404FE0
.text:00404FE0 ; Attributes: thunk
.text:00404FE0
.text:00404FE0 ; char *__cdecl strerror(int ErrorMessage)
.text:00404FE0 strerror        proc near               ; CODE XREF: sub_4049C0+A5↑p
.text:00404FE0                                         ; sub_404AC4+10F↑p
.text:00404FE0
.text:00404FE0 ErrorMessage    = dword ptr  4
.text:00404FE0
.text:00404FE0                 jmp     ds:__imp_strerror
.text:00404FE0 strerror        endp
.text:00404FE0
.text:00404FE0 ; ---------------------------------------------------------------------------
.text:00404FE6                 align 10h
.text:00404FF0
.text:00404FF0 ; =============== S U B R O U T I N E =======================================
.text:00404FF0
.text:00404FF0 ; Attributes: thunk
.text:00404FF0
.text:00404FF0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00404FF0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00404FF0
.text:00404FF0 lpTopLevelExceptionFilter= dword ptr  4
.text:00404FF0
.text:00404FF0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00404FF0 SetUnhandledExceptionFilter endp
.text:00404FF0
.text:00404FF0 ; ---------------------------------------------------------------------------
.text:00404FF6                 align 10h
.text:00405000
.text:00405000 ; =============== S U B R O U T I N E =======================================
.text:00405000
.text:00405000 ; Attributes: noreturn thunk
.text:00405000
.text:00405000 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405000 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405000
.text:00405000 uExitCode       = dword ptr  4
.text:00405000
.text:00405000                 jmp     ds:__imp_ExitProcess
.text:00405000 ExitProcess     endp
.text:00405000
.text:00405000 ; ---------------------------------------------------------------------------
.text:00405006                 align 10h
.text:00405010 dword_405010    dd 0FFFFFFFFh           ; DATA XREF: .text:00404CE9↑r
.text:00405010                                         ; .text:loc_404D10↑r ...
.text:00405014 dword_405014    dd 0                    ; DATA XREF: .text:loc_404D1C↑r
.text:00405014                                         ; sub_404D40:loc_404D8D↑r
.text:00405018                 dd 0FFFFFFFFh
.text:0040501C dword_40501C    dd 79h dup(0)           ; DATA XREF: .data:off_406084↓o
.text:00405200                 dd 380h dup(?)
.text:00405200 _text           ends
.text:00405200
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004600
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_401360+D2↑r
.data:00406010                                         ; sub_4025A0+3↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_4025A0+11↑r
.data:00406014                                         ; .text:00402641↑r ...
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_4025A0+7D↑w
.data:00406018                                         ; .text:004026AD↑w
.data:0040601C                 align 10h
.data:00406020 dword_406020    dd 1                    ; DATA XREF: sub_404240+22↑r
.data:00406020                                         ; sub_404240+65↑r ...
.data:00406024 dword_406024    dd 100h                 ; DATA XREF: sub_404240+3F↑o
.data:00406024                                         ; sub_404240+1A2↑r ...
.data:00406028 off_406028      dd offset unk_407040    ; DATA XREF: sub_404240+1AA↑r
.data:0040602C ; void *off_40602C
.data:0040602C off_40602C      dd offset dword_406024  ; DATA XREF: sub_404240+39↑r
.data:0040602C                                         ; sub_404240+60↑w ...
.data:00406030 ; char *Buffer
.data:00406030 Buffer          dd offset aCopyrightC2005
.data:00406030                                         ; DATA XREF: sub_404700+DC↑r
.data:00406030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406034                 align 10h
.data:00406040 ; int Code
.data:00406040 Code            dd 1                    ; DATA XREF: sub_402C10+6D↑r
.data:00406040                                         ; sub_402C10+9A↑r ...
.data:00406044                 align 10h
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_404D40+9↑r
.data:00406080                                         ; sub_404D40+1D↑w
.data:00406084 off_406084      dd offset dword_40501C  ; DATA XREF: sub_404CB0+6↑r
.data:00406084                                         ; sub_404CB0+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000230 (    560.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: sub_4025A0+9↑o
.bss:00407000                                         ; sub_4025A0+17↑w ...
.bss:00407004 dword_407004    dd ?                    ; DATA XREF: sub_4025A0+21↑w
.bss:00407004                                         ; .text:00402659↑w
.bss:00407008 dword_407008    dd ?                    ; DATA XREF: sub_4025A0+77↑r
.bss:00407008                                         ; .text:004026A7↑r
.bss:0040700C dword_40700C    dd ?                    ; DATA XREF: sub_4025A0+6B↑r
.bss:0040700C                                         ; .text:0040269B↑r
.bss:00407010                 db    ? ;
.bss:00407011                 db    ? ;
.bss:00407012                 db    ? ;
.bss:00407013                 db    ? ;
.bss:00407014                 db    ? ;
.bss:00407015                 db    ? ;
.bss:00407016                 db    ? ;
.bss:00407017                 db    ? ;
.bss:00407018                 db    ? ;
.bss:00407019                 db    ? ;
.bss:0040701A                 db    ? ;
.bss:0040701B                 db    ? ;
.bss:0040701C                 db    ? ;
.bss:0040701D                 db    ? ;
.bss:0040701E                 db    ? ;
.bss:0040701F                 db    ? ;
.bss:00407020                 db    ? ;
.bss:00407021                 db    ? ;
.bss:00407022                 db    ? ;
.bss:00407023                 db    ? ;
.bss:00407024                 db    ? ;
.bss:00407025                 db    ? ;
.bss:00407026                 db    ? ;
.bss:00407027                 db    ? ;
.bss:00407028                 db    ? ;
.bss:00407029                 db    ? ;
.bss:0040702A                 db    ? ;
.bss:0040702B                 db    ? ;
.bss:0040702C                 db    ? ;
.bss:0040702D                 db    ? ;
.bss:0040702E                 db    ? ;
.bss:0040702F                 db    ? ;
.bss:00407030 ; char *dword_407030
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: .text:00402BE4↑w
.bss:00407030                                         ; sub_402C10+58↑r
.bss:00407034                 align 10h
.bss:00407040 unk_407040      db    ? ;               ; DATA XREF: sub_404240+100↑o
.bss:00407040                                         ; .data:off_406028↑o
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140 dword_407140    dd ?                    ; DATA XREF: .text:loc_403BD1↑o
.bss:00407140                                         ; .text:loc_403BF0↑o ...
.bss:00407144 dword_407144    dd ?                    ; DATA XREF: .text:loc_403C70↑o
.bss:00407144                                         ; .text:004040F8↑r ...
.bss:00407148 dword_407148    dd ?                    ; DATA XREF: .text:004040F2↑r
.bss:00407148                                         ; sub_4041A0+2C↑r
.bss:0040714C dword_40714C    dd ?                    ; DATA XREF: .text:004040E6↑r
.bss:0040714C                                         ; sub_4041A0+22↑r
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:00404102↑r
.bss:00407150                                         ; sub_4041A0+36↑r
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:00404112↑r
.bss:00407154                                         ; sub_4041A0+4E↑r
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:0040412F↑r
.bss:00407158                                         ; sub_4041A0+62↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00404125↑r
.bss:0040715C                                         ; sub_4041A0+70↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:00404108↑r
.bss:00407160                                         ; sub_4041A0+7A↑r
.bss:00407164                 align 10h
.bss:00407170 ; char *Str1
.bss:00407170 Str1            dd ?                    ; DATA XREF: sub_404AC4:loc_404AFD↑w
.bss:00407170                                         ; sub_404AC4:loc_404C30↑r
.bss:00407174                 align 10h
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: sub_404AC4+2D↑r
.bss:00407180                                         ; sub_404AC4+3F↑w
.bss:00407184                 align 10h
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: sub_401360+2E↑w
.bss:00407190                                         ; sub_401360+131↑r ...
.bss:00407194                 db    ? ;
.bss:00407195                 db    ? ;
.bss:00407196                 db    ? ;
.bss:00407197                 db    ? ;
.bss:00407198                 db    ? ;
.bss:00407199                 db    ? ;
.bss:0040719A                 db    ? ;
.bss:0040719B                 db    ? ;
.bss:0040719C                 db    ? ;
.bss:0040719D                 db    ? ;
.bss:0040719E                 db    ? ;
.bss:0040719F                 db    ? ;
.bss:004071A0                 db    ? ;
.bss:004071A1                 db    ? ;
.bss:004071A2                 db    ? ;
.bss:004071A3                 db    ? ;
.bss:004071A4                 db    ? ;
.bss:004071A5                 db    ? ;
.bss:004071A6                 db    ? ;
.bss:004071A7                 db    ? ;
.bss:004071A8                 db    ? ;
.bss:004071A9                 db    ? ;
.bss:004071AA                 db    ? ;
.bss:004071AB                 db    ? ;
.bss:004071AC                 db    ? ;
.bss:004071AD                 db    ? ;
.bss:004071AE                 db    ? ;
.bss:004071AF                 db    ? ;
.bss:004071B0 dword_4071B0    dd ?                    ; DATA XREF: sub_4025A0+71↑w
.bss:004071B0                                         ; .text:004026A1↑w
.bss:004071B4                 align 10h
.bss:004071C0 dword_4071C0    dd ?                    ; CODE XREF: sub_404AC4+63↑p
.bss:004071C0                                         ; DATA XREF: sub_4049C0+1E↑r ...
.bss:004071C4                 align 10h
.bss:004071D0 dword_4071D0    dd ?                    ; DATA XREF: sub_4049C0+4E↑w
.bss:004071D0                                         ; sub_404AC4+AB↑w
.bss:004071D4                 align 40h
.bss:00407200 dword_407200    dd ?                    ; DATA XREF: sub_404AC4+13↑r
.bss:00407204                 align 1000h
.bss:00407204 _bss            ends
.bss:00407204
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 0000053C (   1340.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00004800
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408138 ;
.idata:00408138 ; Imports from libintl3.dll
.idata:00408138 ;
.idata:00408138                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408138                                         ; CODE XREF: sub_401360+48↑p
.idata:00408138                                         ; DATA XREF: sub_401360+48↑r ...
.idata:0040813C                 extrn libintl_gettext:dword
.idata:0040813C                                         ; CODE XREF: sub_401360+FC↑p
.idata:0040813C                                         ; sub_401360+125↑p ...
.idata:00408140                 extrn libintl_textdomain:dword
.idata:00408140                                         ; CODE XREF: sub_401360+55↑p
.idata:00408140                                         ; DATA XREF: sub_401360+55↑r ...
.idata:00408144
.idata:0040814C ;
.idata:0040814C ; Imports from KERNEL32.dll
.idata:0040814C ;
.idata:0040814C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040814C                 extrn __imp_ExitProcess:dword
.idata:0040814C                                         ; DATA XREF: ExitProcess↑r
.idata:00408150 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00408150                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00408150                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408154
.idata:0040815C ;
.idata:0040815C ; Imports from MSVCP60.DLL
.idata:0040815C ;
.idata:0040815C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040815C                 extrn __imp_mbrtowc:dword
.idata:0040815C                                         ; DATA XREF: mbrtowc↑r
.idata:00408160
.idata:00408168 ;
.idata:00408168 ; Imports from msvcrt.dll
.idata:00408168 ;
.idata:00408168                 extrn __imp___getmainargs:dword
.idata:00408168                                         ; DATA XREF: __getmainargs↑r
.idata:0040816C ; int _mb_cur_max
.idata:0040816C                 extrn __mb_cur_max:dword
.idata:0040816C                                         ; DATA XREF: sub_403100+7↑r
.idata:0040816C                                         ; sub_403100+5F3↑r
.idata:00408170 ; char ***(__cdecl *__p__environ)()
.idata:00408170                 extrn __imp___p__environ:dword
.idata:00408170                                         ; DATA XREF: __p__environ↑r
.idata:00408174 ; int *(__cdecl *__p__fmode)()
.idata:00408174                 extrn __imp___p__fmode:dword
.idata:00408174                                         ; DATA XREF: __p__fmode↑r
.idata:00408178 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00408178                 extrn __set_app_type:dword
.idata:00408178                                         ; CODE XREF: start+D↑p
.idata:00408178                                         ; .text:0040102D↑p
.idata:00408178                                         ; DATA XREF: ...
.idata:0040817C ; void (__cdecl *_cexit)()
.idata:0040817C                 extrn __imp__cexit:dword
.idata:0040817C                                         ; DATA XREF: _cexit↑r
.idata:00408180 ; int *(__cdecl *_errno)()
.idata:00408180                 extrn __imp__errno:dword
.idata:00408180                                         ; DATA XREF: _errno↑r
.idata:00408184 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00408184                 extrn __imp__flsbuf:dword
.idata:00408184                                         ; DATA XREF: _flsbuf↑r
.idata:00408188 ; FILE iob[]
.idata:00408188                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00408188                                         ; sub_401080+75↑r ...
.idata:0040818C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040818C                 extrn __imp__isctype:dword
.idata:0040818C                                         ; DATA XREF: _isctype↑r
.idata:00408190 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00408190                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00408190                                         ; DATA XREF: .text:0040106C↑r
.idata:00408194 ; const unsigned __int16 *pctype
.idata:00408194                 extrn _pctype:dword     ; DATA XREF: sub_403100:loc_4037F4↑r
.idata:00408198 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00408198                 extrn __imp__setmode:dword
.idata:00408198                                         ; DATA XREF: _setmode↑r
.idata:0040819C ; void (__cdecl __noreturn *abort)()
.idata:0040819C                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081A0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081A0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081A0                                         ; DATA XREF: sub_401040+C↑r
.idata:004081A4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081A4                 extrn __imp_calloc:dword
.idata:004081A4                                         ; DATA XREF: calloc↑r
.idata:004081A8 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081A8                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081AC ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081AC                 extrn __imp_fclose:dword
.idata:004081AC                                         ; DATA XREF: fclose↑r
.idata:004081B0 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081B0                 extrn __imp_fflush:dword
.idata:004081B0                                         ; DATA XREF: fflush↑r
.idata:004081B4 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081B4                 extrn __imp_fprintf:dword
.idata:004081B4                                         ; DATA XREF: fprintf↑r
.idata:004081B8 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081B8                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081BC ; void (__cdecl *free)(void *Block)
.idata:004081BC                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081C0 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:004081C0                 extrn __imp_fwrite:dword
.idata:004081C0                                         ; DATA XREF: fwrite↑r
.idata:004081C4 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081C4                 extrn __imp_getenv:dword
.idata:004081C4                                         ; DATA XREF: getenv↑r
.idata:004081C8 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081C8                 extrn __imp_iswctype:dword
.idata:004081C8                                         ; DATA XREF: iswctype↑r
.idata:004081CC ; void *(__cdecl *malloc)(size_t Size)
.idata:004081CC                 extrn __imp_malloc:dword
.idata:004081CC                                         ; DATA XREF: malloc↑r
.idata:004081D0 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004081D0                 extrn __imp_memcpy:dword
.idata:004081D0                                         ; DATA XREF: memcpy↑r
.idata:004081D4 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004081D4                 extrn __imp_memset:dword
.idata:004081D4                                         ; DATA XREF: memset↑r
.idata:004081D8 ; int (*printf)(const char *const Format, ...)
.idata:004081D8                 extrn __imp_printf:dword
.idata:004081D8                                         ; DATA XREF: printf↑r
.idata:004081DC ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004081DC                 extrn __imp_realloc:dword
.idata:004081DC                                         ; DATA XREF: realloc↑r
.idata:004081E0 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004081E0                 extrn __imp_setlocale:dword
.idata:004081E0                                         ; DATA XREF: setlocale↑r
.idata:004081E4 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004081E4                 extrn __imp_signal:dword
.idata:004081E4                                         ; DATA XREF: signal↑r
.idata:004081E8 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004081E8                 extrn __imp_strchr:dword
.idata:004081E8                                         ; DATA XREF: strchr↑r
.idata:004081EC ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004081EC                 extrn __imp_strcmp:dword
.idata:004081EC                                         ; DATA XREF: strcmp↑r
.idata:004081F0 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004081F0                 extrn __imp_strerror:dword
.idata:004081F0                                         ; DATA XREF: strerror↑r
.idata:004081F4 ; size_t (__cdecl *strlen)(const char *Str)
.idata:004081F4                 extrn __imp_strlen:dword
.idata:004081F4                                         ; DATA XREF: strlen↑r
.idata:004081F8 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004081F8                 extrn __imp_strncmp:dword
.idata:004081F8                                         ; DATA XREF: strncmp↑r
.idata:004081FC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004081FC                 extrn __imp_vfprintf:dword
.idata:004081FC                                         ; DATA XREF: vfprintf↑r
.idata:00408200
.idata:00408200
.idata:00408200
.idata:00408200                 end start
