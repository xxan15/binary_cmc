.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : AEA47CB977A2D94A0F16C93D99A131D01641315E235F63855606C0918D606AD0
.text:00401000 ; Input MD5    : 4BB0F2A2E802221C41DD9704E39F89C2
.text:00401000 ; Input CRC32  : 80BE4D55
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/chroot.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A275 (Wed Apr 20 18:41:57 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004270 (  17008.)
.text:00401000 ; Section size in file          : 00004400 (  17408.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4013D0+63↓p
.text:00401040                                         ; .text:00404F30↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_404ED0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_404EA0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4013D0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_404ED0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_4013D0+20↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_4013D0+3A↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4013D0+42↓o
.text:004012C3                                         ; sub_4013D0+4F↓o
.text:004012CD aRolandMcgrath  db 'Roland McGrath',0   ; DATA XREF: sub_4013D0+70↓o
.text:004012DC a530            db '5.3.0',0            ; DATA XREF: sub_4013D0+80↓o
.text:004012E2 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4013D0+88↓o
.text:004012F0 ; const FILE stru_4012F0
.text:004012F0 stru_4012F0     FILE <6F726863h, 2B00746Fh, 73696D00h, 676E6973h, 65706F20h, \
.text:004012F0                                         ; DATA XREF: sub_4013D0+90↓o
.text:004012F0                                         ; sub_4013D0+B4↓o ...
.text:004012F0                       646E6172h, 90909000h, 90909090h>
.text:00401310                 db  90h
.text:00401311                 db  90h
.text:00401312                 db  90h
.text:00401313                 db  90h
.text:00401314                 db  90h
.text:00401315                 db  90h
.text:00401316                 db  90h
.text:00401317                 db  90h
.text:00401318                 db  90h
.text:00401319                 db  90h
.text:0040131A                 db  90h
.text:0040131B                 db  90h
.text:0040131C                 db  90h
.text:0040131D                 db  90h
.text:0040131E                 db  90h
.text:0040131F                 db  90h
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_4013D0:loc_4014C9↓o
.text:00401320                                         ; sub_4017B0+F↓o
.text:00401347 ; const CHAR asc_401347[]
.text:00401347 asc_401347      db '/',0                ; DATA XREF: sub_4013D0:loc_401514↓o
.text:00401349 aCannotRunComma db 'cannot run command %s',0
.text:00401349                                         ; DATA XREF: sub_4013D0+18C↓o
.text:0040135F ; const char VarName[]
.text:0040135F VarName         db 'SHELL',0            ; DATA XREF: sub_4013D0:loc_40159A↓o
.text:00401365 aI              db '-i',0               ; DATA XREF: sub_4013D0+1DC↓o
.text:00401368 aBinSh          db '/bin/sh',0          ; DATA XREF: sub_4013D0:loc_4015BF↓o
.text:00401370                 align 20h
.text:00401380 aCannotChdirToR db 'cannot chdir to root directory',0
.text:00401380                                         ; DATA XREF: sub_4013D0:loc_4015C6↓o
.text:0040139F                 align 10h
.text:004013A0 aCannotChangeRo db 'cannot change root directory to %s',0
.text:004013A0                                         ; DATA XREF: sub_4013D0:loc_4015F5↓o
.text:004013C3                 align 10h
.text:004013D0
.text:004013D0 ; =============== S U B R O U T I N E =======================================
.text:004013D0
.text:004013D0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004013D0
.text:004013D0 sub_4013D0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004013D0
.text:004013D0 Category        = dword ptr -38h
.text:004013D0 Locale          = dword ptr -34h
.text:004013D0 var_30          = dword ptr -30h
.text:004013D0 var_2C          = byte ptr -2Ch
.text:004013D0 var_28          = dword ptr -28h
.text:004013D0 var_24          = dword ptr -24h
.text:004013D0 var_20          = byte ptr -20h
.text:004013D0 var_1C          = dword ptr -1Ch
.text:004013D0 arg_0           = dword ptr  8
.text:004013D0 arg_4           = dword ptr  0Ch
.text:004013D0
.text:004013D0                 push    ebp
.text:004013D1                 xor     eax, eax
.text:004013D3                 mov     ebp, esp
.text:004013D5                 push    edi
.text:004013D6                 push    esi
.text:004013D7                 push    ebx
.text:004013D8                 sub     esp, 2Ch
.text:004013DB                 mov     edi, [ebp+arg_4]
.text:004013DE                 and     esp, 0FFFFFFF0h
.text:004013E1                 mov     esi, [ebp+arg_0]
.text:004013E4                 call    __alloca
.text:004013E9                 call    sub_404F70
.text:004013EE                 mov     edx, [edi]
.text:004013F0                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:004013F8                 mov     [esp+38h+Category], 0 ; Category
.text:004013FF                 mov     ds:dword_407190, edx
.text:00401405                 call    setlocale
.text:0040140A                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401412                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401419                 call    ds:__imp_libintl_bindtextdomain
.text:0040141F                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401426                 call    ds:libintl_textdomain
.text:0040142C                 mov     [esp+38h+Category], offset sub_402BD0 ; void (__cdecl *)()
.text:00401433                 call    sub_401040
.text:00401438                 mov     [esp+38h+var_1C], 0
.text:00401440                 mov     dword ptr [esp+38h+var_20], offset aRolandMcgrath ; "Roland McGrath"
.text:00401448                 mov     [esp+38h+var_24], offset sub_4017B0 ; int
.text:00401450                 mov     [esp+38h+var_28], offset a530 ; "5.3.0"
.text:00401458                 mov     dword ptr [esp+38h+var_2C], offset aGnuCoreutils ; "GNU coreutils"
.text:00401460                 mov     [esp+38h+var_30], offset stru_4012F0 ; FILE *
.text:00401468                 mov     [esp+38h+Locale], edi ; int
.text:0040146C                 mov     [esp+38h+Category], esi ; int
.text:0040146F                 call    sub_402AE0
.text:00401474                 mov     [esp+38h+var_28], 0 ; int
.text:0040147C                 mov     dword ptr [esp+38h+var_2C], 0 ; char
.text:00401484                 mov     [esp+38h+var_30], (offset stru_4012F0._cnt+3) ; char *
.text:0040148C                 mov     [esp+38h+Locale], edi ; int
.text:00401490                 mov     [esp+38h+Category], esi ; int
.text:00401493                 call    sub_402940
.text:00401498                 inc     eax
.text:00401499                 jnz     short loc_4014C9
.text:0040149B                 mov     eax, dword_406010
.text:004014A0                 cmp     esi, eax
.text:004014A2                 jg      short loc_401501
.text:004014A4                 mov     [esp+38h+Category], (offset stru_4012F0._base+1)
.text:004014AB                 call    ds:libintl_gettext
.text:004014B1                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:004014B9                 mov     [esp+38h+Category], 0 ; Code
.text:004014C0                 mov     [esp+38h+var_30], eax ; char *
.text:004014C4                 call    sub_4048D0
.text:004014C9
.text:004014C9 loc_4014C9:                             ; CODE XREF: sub_4013D0+C9↑j
.text:004014C9                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004014D0                 call    ds:libintl_gettext
.text:004014D6                 mov     edx, ds:_iob
.text:004014DC                 mov     ecx, ds:dword_407190
.text:004014E2                 add     edx, 40h ; '@'
.text:004014E5                 mov     [esp+38h+var_30], ecx
.text:004014E9                 mov     [esp+38h+Locale], eax ; Format
.text:004014ED                 mov     [esp+38h+Category], edx ; Stream
.text:004014F0                 call    fprintf
.text:004014F5                 mov     [esp+38h+Category], 1 ; Code
.text:004014FC
.text:004014FC loc_4014FC:                             ; CODE XREF: sub_4013D0+1C5↓j
.text:004014FC                 call    exit
.text:00401501 ; ---------------------------------------------------------------------------
.text:00401501
.text:00401501 loc_401501:                             ; CODE XREF: sub_4013D0+D2↑j
.text:00401501                 mov     ebx, [edi+eax*4]
.text:00401504                 mov     [esp+38h+Category], ebx
.text:00401507                 call    sub_404BC0
.text:0040150C                 test    eax, eax
.text:0040150E                 jnz     loc_4015F5
.text:00401514
.text:00401514 loc_401514:                             ; CODE XREF: sub_4013D0+256↓j
.text:00401514                 mov     [esp+38h+Category], offset asc_401347 ; "/"
.text:0040151B                 call    sub_404B70
.text:00401520                 test    eax, eax
.text:00401522                 jnz     loc_4015C6
.text:00401528
.text:00401528 loc_401528:                             ; CODE XREF: sub_4013D0+220↓j
.text:00401528                 mov     edx, dword_406010
.text:0040152E                 lea     ecx, [edx+1]
.text:00401531                 cmp     esi, ecx
.text:00401533                 jz      short loc_40159A
.text:00401535                 lea     edi, [edi+edx*4+4]
.text:00401539
.text:00401539 loc_401539:                             ; CODE XREF: sub_4013D0+1EA↓j
.text:00401539                 mov     [esp+38h+Locale], edi ; Arguments
.text:0040153D                 mov     esi, [edi]
.text:0040153F                 mov     [esp+38h+Category], esi ; FileName
.text:00401542                 call    _execvp
.text:00401547                 call    _errno
.text:0040154C                 cmp     dword ptr [eax], 2
.text:0040154F                 mov     edx, [edi]
.text:00401551                 setz    bl
.text:00401554                 mov     [esp+38h+Category], edx ; char *
.text:00401557                 call    sub_402910
.text:0040155C                 mov     [esp+38h+Category], offset aCannotRunComma ; "cannot run command %s"
.text:00401563                 mov     edi, eax
.text:00401565                 movzx   esi, bl
.text:00401568                 call    ds:libintl_gettext
.text:0040156E                 add     esi, 7Eh ; '~'
.text:00401571                 mov     ebx, eax
.text:00401573                 call    _errno
.text:00401578                 mov     dword ptr [esp+38h+var_2C], edi ; char
.text:0040157C                 mov     [esp+38h+var_30], ebx ; char *
.text:00401580                 mov     edi, [eax]
.text:00401582                 mov     [esp+38h+Category], 0 ; Code
.text:00401589                 mov     [esp+38h+Locale], edi ; ErrorMessage
.text:0040158D                 call    sub_4048D0
.text:00401592                 mov     [esp+38h+Category], esi
.text:00401595                 jmp     loc_4014FC
.text:0040159A ; ---------------------------------------------------------------------------
.text:0040159A
.text:0040159A loc_40159A:                             ; CODE XREF: sub_4013D0+163↑j
.text:0040159A                 mov     [esp+38h+Category], offset VarName ; "SHELL"
.text:004015A1                 call    getenv
.text:004015A6                 test    eax, eax
.text:004015A8                 jz      short loc_4015BF
.text:004015AA
.text:004015AA loc_4015AA:                             ; CODE XREF: sub_4013D0+1F4↓j
.text:004015AA                 mov     [edi], eax
.text:004015AC                 mov     dword ptr [edi+4], offset aI ; "-i"
.text:004015B3                 mov     dword ptr [edi+8], 0
.text:004015BA                 jmp     loc_401539
.text:004015BF ; ---------------------------------------------------------------------------
.text:004015BF
.text:004015BF loc_4015BF:                             ; CODE XREF: sub_4013D0+1D8↑j
.text:004015BF                 mov     eax, offset aBinSh ; "/bin/sh"
.text:004015C4                 jmp     short loc_4015AA
.text:004015C6 ; ---------------------------------------------------------------------------
.text:004015C6
.text:004015C6 loc_4015C6:                             ; CODE XREF: sub_4013D0+152↑j
.text:004015C6                 mov     [esp+38h+Category], offset aCannotChdirToR ; "cannot chdir to root directory"
.text:004015CD                 call    ds:libintl_gettext
.text:004015D3                 mov     ebx, eax
.text:004015D5                 call    _errno
.text:004015DA                 mov     [esp+38h+var_30], ebx ; char *
.text:004015DE                 mov     ebx, [eax]
.text:004015E0                 mov     [esp+38h+Category], 1 ; Code
.text:004015E7                 mov     [esp+38h+Locale], ebx ; ErrorMessage
.text:004015EB                 call    sub_4048D0
.text:004015F0                 jmp     loc_401528
.text:004015F5 ; ---------------------------------------------------------------------------
.text:004015F5
.text:004015F5 loc_4015F5:                             ; CODE XREF: sub_4013D0+13E↑j
.text:004015F5                 mov     [esp+38h+Category], offset aCannotChangeRo ; "cannot change root directory to %s"
.text:004015FC                 call    ds:libintl_gettext
.text:00401602                 mov     ebx, eax
.text:00401604                 call    _errno
.text:00401609                 mov     ecx, [edi+4]
.text:0040160C                 mov     [esp+38h+var_30], ebx ; char *
.text:00401610                 mov     dword ptr [esp+38h+var_2C], ecx ; char
.text:00401614                 mov     edx, [eax]
.text:00401616                 mov     [esp+38h+Category], 1 ; Code
.text:0040161D                 mov     [esp+38h+Locale], edx ; ErrorMessage
.text:00401621                 call    sub_4048D0
.text:00401626                 jmp     loc_401514
.text:00401626 sub_4013D0      endp
.text:00401626
.text:00401626 ; ---------------------------------------------------------------------------
.text:0040162B                 align 20h
.text:00401640 aUsageSNewrootC db 'Usage: %s NEWROOT [COMMAND...]',0Ah
.text:00401640                                         ; DATA XREF: sub_4017B0:loc_4017F3↓o
.text:00401640                 db '  or:  %s OPTION',0Ah,0
.text:00401671                 db 0EBh, 0Dh, 90h
.text:00401674                 align 10h
.text:00401680 aRunCommandWith db 'Run COMMAND with root directory set to NEWROOT.',0Ah
.text:00401680                                         ; DATA XREF: sub_4017B0+66↓o
.text:00401680                 db 0Ah,0
.text:004016B2                 align 10h
.text:004016C0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004016C0                                         ; DATA XREF: sub_4017B0+88↓o
.text:004016ED                 align 20h
.text:00401700 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401700                                         ; DATA XREF: sub_4017B0+AA↓o
.text:00401736                 align 10h
.text:00401740 aIfNoCommandIsG db 0Ah                  ; DATA XREF: sub_4017B0+CC↓o
.text:00401740                 db 'If no command is given, run ``${SHELL} -i',27h,27h,' (default: /b'
.text:00401740                 db 'in/sh).',0Ah,0
.text:00401782 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4017B0+EE↓o
.text:00401782                 db 'Report bugs to <%s>.',0Ah,0
.text:00401799 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401799                                         ; DATA XREF: sub_4017B0+FB↓o
.text:004017AF                 align 10h
.text:004017B0
.text:004017B0 ; =============== S U B R O U T I N E =======================================
.text:004017B0
.text:004017B0 ; Attributes: noreturn
.text:004017B0
.text:004017B0 ; void __cdecl __noreturn sub_4017B0(int Code)
.text:004017B0 sub_4017B0      proc near               ; DATA XREF: sub_4013D0+78↑o
.text:004017B0
.text:004017B0 Stream          = dword ptr -1Ch
.text:004017B0 Format          = dword ptr -18h
.text:004017B0 var_14          = dword ptr -14h
.text:004017B0 var_4           = dword ptr -4
.text:004017B0 Code            = dword ptr  4
.text:004017B0
.text:004017B0                 sub     esp, 1Ch
.text:004017B3                 mov     [esp+1Ch+var_4], ebx
.text:004017B7                 mov     ebx, [esp+1Ch+Code]
.text:004017BB                 test    ebx, ebx
.text:004017BD                 jz      short loc_4017F3
.text:004017BF                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004017C6                 call    ds:libintl_gettext
.text:004017CC                 mov     edx, ds:_iob
.text:004017D2                 mov     ecx, ds:dword_407190
.text:004017D8                 add     edx, 40h ; '@'
.text:004017DB                 mov     [esp+1Ch+var_14], ecx
.text:004017DF                 mov     [esp+1Ch+Format], eax ; Format
.text:004017E3                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004017E6                 call    fprintf
.text:004017EB
.text:004017EB loc_4017EB:                             ; CODE XREF: sub_4017B0+10B↓j
.text:004017EB                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004017EE                 call    exit
.text:004017F3 ; ---------------------------------------------------------------------------
.text:004017F3
.text:004017F3 loc_4017F3:                             ; CODE XREF: sub_4017B0+D↑j
.text:004017F3                 mov     [esp+1Ch+Stream], offset aUsageSNewrootC ; "Usage: %s NEWROOT [COMMAND...]\n  or:  "...
.text:004017FA                 call    ds:libintl_gettext
.text:00401800                 mov     ecx, ds:dword_407190
.text:00401806                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401809                 mov     [esp+1Ch+var_14], ecx
.text:0040180D                 mov     [esp+1Ch+Format], ecx
.text:00401811                 call    printf
.text:00401816                 mov     [esp+1Ch+Stream], offset aRunCommandWith ; "Run COMMAND with root directory set to "...
.text:0040181D                 call    ds:libintl_gettext
.text:00401823                 mov     ecx, ds:_iob
.text:00401829                 add     ecx, 20h ; ' '
.text:0040182C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401830                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401833                 call    fputs
.text:00401838                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040183F                 call    ds:libintl_gettext
.text:00401845                 mov     ecx, ds:_iob
.text:0040184B                 add     ecx, 20h ; ' '
.text:0040184E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401852                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401855                 call    fputs
.text:0040185A                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401861                 call    ds:libintl_gettext
.text:00401867                 mov     ecx, ds:_iob
.text:0040186D                 add     ecx, 20h ; ' '
.text:00401870                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401874                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401877                 call    fputs
.text:0040187C                 mov     [esp+1Ch+Stream], offset aIfNoCommandIsG ; "\nIf no command is given, run ``${SHELL"...
.text:00401883                 call    ds:libintl_gettext
.text:00401889                 mov     ecx, ds:_iob
.text:0040188F                 add     ecx, 20h ; ' '
.text:00401892                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401896                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401899                 call    fputs
.text:0040189E                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004018A5                 call    ds:libintl_gettext
.text:004018AB                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004018B3                 mov     [esp+1Ch+Stream], eax ; Format
.text:004018B6                 call    printf
.text:004018BB                 jmp     loc_4017EB
.text:004018BB sub_4017B0      endp
.text:004018BB
.text:004018BB ; ---------------------------------------------------------------------------
.text:004018C0 dword_4018C0    dd 90002D2Dh, 7 dup(90909090h)
.text:004018C0                                         ; DATA XREF: sub_401B10+E4↓o
.text:004018E0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004018E0                                         ; DATA XREF: sub_401B10+2FC↓o
.text:0040190D                 align 20h
.text:00401920 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401920                                         ; DATA XREF: sub_401B10:loc_401E72↓o
.text:0040194D                 align 20h
.text:00401960 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401960                                         ; DATA XREF: sub_401B10:loc_401F10↓o
.text:00401960                                         ; sub_401B10:loc_4022D7↓o
.text:00401986                 align 20h
.text:004019A0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:004019A0                                         ; DATA XREF: sub_401B10+48E↓o
.text:004019C0 dword_4019C0    dd 90909000h, 7 dup(90909090h)
.text:004019C0                                         ; DATA XREF: sub_401B10:loc_401FE1↓o
.text:004019E0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004019E0                                         ; DATA XREF: sub_401B10:loc_401FFA↓o
.text:00401A00 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401A00                                         ; DATA XREF: sub_401B10:loc_4020DF↓o
.text:00401A00                                         ; sub_401B10:loc_40240C↓o
.text:00401A27                 align 20h
.text:00401A40 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401A40                                         ; DATA XREF: sub_401B10:loc_402253↓o
.text:00401A6E                 align 20h
.text:00401A80 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401A80                                         ; DATA XREF: sub_401B10:loc_40233F↓o
.text:00401AA1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401AA1                                         ; DATA XREF: sub_401B10+93F↓o
.text:00401ABB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00401ABB                                         ; DATA XREF: sub_401B10:loc_402487↓o
.text:00401AD5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401AD5                                         ; DATA XREF: sub_401B10:loc_4024AE↓o
.text:00401AF3 ; const char aPosixlyCorrect[]
.text:00401AF3 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401B10:loc_402660↓o
.text:00401B03                 align 10h
.text:00401B10
.text:00401B10 ; =============== S U B R O U T I N E =======================================
.text:00401B10
.text:00401B10
.text:00401B10 ; int __cdecl sub_401B10(int, int, char *Str, int, int, int, int, int)
.text:00401B10 sub_401B10      proc near               ; CODE XREF: sub_4026A0+5A↓p
.text:00401B10                                         ; .text:0040278A↓p ...
.text:00401B10
.text:00401B10 Str1            = dword ptr -5Ch
.text:00401B10 Str2            = dword ptr -58h
.text:00401B10 MaxCount        = dword ptr -54h
.text:00401B10 var_50          = dword ptr -50h
.text:00401B10 var_4C          = dword ptr -4Ch
.text:00401B10 var_3C          = dword ptr -3Ch
.text:00401B10 var_38          = dword ptr -38h
.text:00401B10 var_34          = dword ptr -34h
.text:00401B10 var_30          = dword ptr -30h
.text:00401B10 var_2C          = dword ptr -2Ch
.text:00401B10 var_28          = dword ptr -28h
.text:00401B10 var_24          = dword ptr -24h
.text:00401B10 var_20          = dword ptr -20h
.text:00401B10 var_1C          = dword ptr -1Ch
.text:00401B10 var_18          = dword ptr -18h
.text:00401B10 var_14          = dword ptr -14h
.text:00401B10 arg_0           = dword ptr  4
.text:00401B10 arg_4           = dword ptr  8
.text:00401B10 Str             = dword ptr  0Ch
.text:00401B10 arg_C           = dword ptr  10h
.text:00401B10 arg_10          = dword ptr  14h
.text:00401B10 arg_14          = dword ptr  18h
.text:00401B10 arg_18          = dword ptr  1Ch
.text:00401B10 arg_1C          = dword ptr  20h
.text:00401B10
.text:00401B10                 push    ebp
.text:00401B11                 mov     eax, 0FFFFFFFFh
.text:00401B16                 push    edi
.text:00401B17                 push    esi
.text:00401B18                 push    ebx
.text:00401B19                 sub     esp, 4Ch
.text:00401B1C                 mov     esi, [esp+5Ch+Str]
.text:00401B20                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401B24                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401B27                 mov     ebx, [ebp+4]
.text:00401B2A                 setz    dl
.text:00401B2D                 movzx   ecx, dl
.text:00401B30                 dec     ecx
.text:00401B31                 and     ecx, ebx
.text:00401B33                 mov     [esp+5Ch+var_14], ecx
.text:00401B37                 mov     ecx, [esp+5Ch+arg_0]
.text:00401B3B                 test    ecx, ecx
.text:00401B3D                 jle     loc_401C67
.text:00401B43                 mov     dword ptr [ebp+0Ch], 0
.text:00401B4A                 mov     ebx, [ebp+0]
.text:00401B4D                 test    ebx, ebx
.text:00401B4F                 jz      loc_402680
.text:00401B55                 mov     edi, [ebp+10h]
.text:00401B58                 test    edi, edi
.text:00401B5A                 jnz     short loc_401BB3
.text:00401B5C                 lea     esi, [esi+0]
.text:00401B60
.text:00401B60 loc_401B60:                             ; CODE XREF: sub_401B10+B7C↓j
.text:00401B60                 mov     [ebp+24h], ebx
.text:00401B63                 mov     esi, [esp+5Ch+Str]
.text:00401B67                 mov     [ebp+20h], ebx
.text:00401B6A                 mov     ecx, [esp+5Ch+arg_18]
.text:00401B6E                 xor     ebx, ebx
.text:00401B70                 mov     dword ptr [ebp+14h], 0
.text:00401B77                 test    ecx, ecx
.text:00401B79                 jz      loc_402660
.text:00401B7F
.text:00401B7F loc_401B7F:                             ; CODE XREF: sub_401B10+B64↓j
.text:00401B7F                 mov     ebx, 1
.text:00401B84
.text:00401B84 loc_401B84:                             ; CODE XREF: sub_401B10+B5E↓j
.text:00401B84                 mov     [ebp+1Ch], ebx
.text:00401B87                 mov     ecx, [esp+5Ch+Str]
.text:00401B8B                 movzx   eax, byte ptr [ecx]
.text:00401B8E                 cmp     al, 2Dh ; '-'
.text:00401B90                 jz      loc_402650
.text:00401B96                 cmp     al, 2Bh ; '+'
.text:00401B98                 jz      loc_402639
.text:00401B9E                 xor     edx, edx
.text:00401BA0                 test    ebx, ebx
.text:00401BA2                 setz    dl
.text:00401BA5                 mov     [ebp+18h], edx
.text:00401BA8
.text:00401BA8 loc_401BA8:                             ; CODE XREF: sub_401B10+B35↓j
.text:00401BA8                 mov     [esp+5Ch+Str], esi
.text:00401BAC                 mov     dword ptr [ebp+10h], 1
.text:00401BB3
.text:00401BB3 loc_401BB3:                             ; CODE XREF: sub_401B10+4A↑j
.text:00401BB3                 mov     eax, [ebp+14h]
.text:00401BB6                 test    eax, eax
.text:00401BB8                 jz      short loc_401BC3
.text:00401BBA                 cmp     byte ptr [eax], 0
.text:00401BBD                 jnz     loc_401CA0
.text:00401BC3
.text:00401BC3 loc_401BC3:                             ; CODE XREF: sub_401B10+A8↑j
.text:00401BC3                 mov     ebx, [ebp+0]
.text:00401BC6                 cmp     [ebp+24h], ebx
.text:00401BC9                 jle     short loc_401BCE
.text:00401BCB                 mov     [ebp+24h], ebx
.text:00401BCE
.text:00401BCE loc_401BCE:                             ; CODE XREF: sub_401B10+B9↑j
.text:00401BCE                 cmp     [ebp+20h], ebx
.text:00401BD1                 jle     short loc_401BD6
.text:00401BD3                 mov     [ebp+20h], ebx
.text:00401BD6
.text:00401BD6 loc_401BD6:                             ; CODE XREF: sub_401B10+C1↑j
.text:00401BD6                 cmp     dword ptr [ebp+18h], 1
.text:00401BDA                 jz      loc_4025B0
.text:00401BE0
.text:00401BE0 loc_401BE0:                             ; CODE XREF: sub_401B10+B13↓j
.text:00401BE0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401BE4                 jz      loc_402594
.text:00401BEA                 cld
.text:00401BEB                 mov     ecx, [esp+5Ch+arg_4]
.text:00401BEF                 mov     edx, 3
.text:00401BF4                 mov     edi, offset dword_4018C0
.text:00401BF9                 mov     esi, [ecx+ebx*4]
.text:00401BFC                 mov     ecx, edx
.text:00401BFE                 repe cmpsb
.text:00401C00                 jnz     short loc_401C3C
.text:00401C02                 mov     edx, [ebp+24h]
.text:00401C05                 lea     eax, [ebx+1]
.text:00401C08                 cmp     [ebp+20h], edx
.text:00401C0B                 mov     [ebp+0], eax
.text:00401C0E                 jz      loc_4025A8
.text:00401C14                 cmp     edx, eax
.text:00401C16                 jz      short loc_401C30
.text:00401C18                 mov     [esp+5Ch+Str2], ebp
.text:00401C1C                 mov     ebx, [esp+5Ch+arg_4]
.text:00401C20                 mov     [esp+5Ch+Str1], ebx
.text:00401C23                 call    sub_4027C0
.text:00401C28                 nop
.text:00401C29                 lea     esi, [esi+0]
.text:00401C30
.text:00401C30 loc_401C30:                             ; CODE XREF: sub_401B10+106↑j
.text:00401C30                                         ; sub_401B10+A9B↓j
.text:00401C30                 mov     eax, [esp+5Ch+arg_0]
.text:00401C34                 mov     ebx, eax
.text:00401C36                 mov     [ebp+24h], eax
.text:00401C39                 mov     [ebp+0], eax
.text:00401C3C
.text:00401C3C loc_401C3C:                             ; CODE XREF: sub_401B10+F0↑j
.text:00401C3C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401C40                 jz      loc_402594
.text:00401C46                 mov     esi, [esp+5Ch+arg_4]
.text:00401C4A                 mov     eax, [esi+ebx*4]
.text:00401C4D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401C50                 jz      short loc_401C77
.text:00401C52
.text:00401C52 loc_401C52:                             ; CODE XREF: sub_401B10+16D↓j
.text:00401C52                 mov     edx, [ebp+18h]
.text:00401C55                 test    edx, edx
.text:00401C57                 jz      short loc_401C70
.text:00401C59                 mov     [ebp+0Ch], eax
.text:00401C5C                 lea     edi, [ebx+1]
.text:00401C5F                 mov     eax, 1
.text:00401C64                 mov     [ebp+0], edi
.text:00401C67
.text:00401C67 loc_401C67:                             ; CODE XREF: sub_401B10+2D↑j
.text:00401C67                                         ; sub_401B10+165↓j ...
.text:00401C67                 add     esp, 4Ch
.text:00401C6A                 pop     ebx
.text:00401C6B                 pop     esi
.text:00401C6C                 pop     edi
.text:00401C6D                 pop     ebp
.text:00401C6E                 retn
.text:00401C6E ; ---------------------------------------------------------------------------
.text:00401C6F                 align 10h
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_401B10+147↑j
.text:00401C70                                         ; sub_401B10+A8A↓j ...
.text:00401C70                 mov     eax, 0FFFFFFFFh
.text:00401C75                 jmp     short loc_401C67
.text:00401C77 ; ---------------------------------------------------------------------------
.text:00401C77
.text:00401C77 loc_401C77:                             ; CODE XREF: sub_401B10+140↑j
.text:00401C77                 movzx   edx, byte ptr [eax+1]
.text:00401C7B                 test    dl, dl
.text:00401C7D                 jz      short loc_401C52
.text:00401C7F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401C83                 xor     ecx, ecx
.text:00401C85                 test    ebx, ebx
.text:00401C87                 jz      short loc_401C92
.text:00401C89                 cmp     dl, 2Dh ; '-'
.text:00401C8C                 jz      loc_40258A
.text:00401C92
.text:00401C92 loc_401C92:                             ; CODE XREF: sub_401B10+177↑j
.text:00401C92                                         ; sub_401B10+A7F↓j
.text:00401C92                 lea     esi, [ecx+eax+1]
.text:00401C96                 mov     [ebp+14h], esi
.text:00401C99                 lea     esi, [esi+0]
.text:00401CA0
.text:00401CA0 loc_401CA0:                             ; CODE XREF: sub_401B10+AD↑j
.text:00401CA0                 mov     ecx, [esp+5Ch+arg_C]
.text:00401CA4                 test    ecx, ecx
.text:00401CA6                 jz      loc_402030
.text:00401CAC                 mov     edx, [ebp+0]
.text:00401CAF                 mov     edi, [esp+5Ch+arg_4]
.text:00401CB3                 mov     eax, [edi+edx*4]
.text:00401CB6                 movzx   edx, byte ptr [eax+1]
.text:00401CBA                 cmp     dl, 2Dh ; '-'
.text:00401CBD                 jz      short loc_401CD5
.text:00401CBF                 mov     ebx, [esp+5Ch+arg_14]
.text:00401CC3                 test    ebx, ebx
.text:00401CC5                 jz      loc_402030
.text:00401CCB                 cmp     byte ptr [eax+2], 0
.text:00401CCF                 jz      loc_40256A
.text:00401CD5
.text:00401CD5 loc_401CD5:                             ; CODE XREF: sub_401B10+1AD↑j
.text:00401CD5                                         ; sub_401B10+A75↓j
.text:00401CD5                 mov     [esp+5Ch+var_18], 0
.text:00401CDD                 mov     ecx, [ebp+14h]
.text:00401CE0                 mov     [esp+5Ch+var_1C], 0
.text:00401CE8                 mov     [esp+5Ch+var_20], 0
.text:00401CF0                 mov     edi, ecx
.text:00401CF2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401CFA                 movzx   eax, byte ptr [ecx]
.text:00401CFD                 test    al, al
.text:00401CFF                 jz      short loc_401D1C
.text:00401D01                 cmp     al, 3Dh ; '='
.text:00401D03                 jz      short loc_401D1C
.text:00401D05                 lea     esi, [esi+0]
.text:00401D09                 lea     edi, [edi+0]
.text:00401D10
.text:00401D10 loc_401D10:                             ; CODE XREF: sub_401B10+20A↓j
.text:00401D10                 inc     edi
.text:00401D11                 movzx   eax, byte ptr [edi]
.text:00401D14                 test    al, al
.text:00401D16                 jz      short loc_401D1C
.text:00401D18                 cmp     al, 3Dh ; '='
.text:00401D1A                 jnz     short loc_401D10
.text:00401D1C
.text:00401D1C loc_401D1C:                             ; CODE XREF: sub_401B10+1EF↑j
.text:00401D1C                                         ; sub_401B10+1F3↑j ...
.text:00401D1C                 mov     [esp+5Ch+var_28], 0
.text:00401D24                 mov     esi, [esp+5Ch+arg_C]
.text:00401D28                 mov     ebx, [esi]
.text:00401D2A                 test    ebx, ebx
.text:00401D2C                 mov     edx, ebx
.text:00401D2E                 jz      loc_401F50
.text:00401D34                 lea     esi, [esi+0]
.text:00401D3A                 lea     edi, [edi+0]
.text:00401D40
.text:00401D40 loc_401D40:                             ; CODE XREF: sub_401B10+25E↓j
.text:00401D40                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401D44                 mov     ebx, edi
.text:00401D46                 sub     ebx, ecx
.text:00401D48                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401D4C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401D4F                 call    strncmp
.text:00401D54                 test    eax, eax
.text:00401D56                 jz      loc_4024E6
.text:00401D5C
.text:00401D5C loc_401D5C:                             ; CODE XREF: sub_401B10+A0F↓j
.text:00401D5C                                         ; sub_401B10+A24↓j ...
.text:00401D5C                 inc     [esp+5Ch+var_28]
.text:00401D60                 add     esi, 10h
.text:00401D63                 mov     ecx, [esi]
.text:00401D65                 test    ecx, ecx
.text:00401D67                 mov     edx, ecx
.text:00401D69                 jz      short loc_401D70
.text:00401D6B                 mov     ecx, [ebp+14h]
.text:00401D6E                 jmp     short loc_401D40
.text:00401D70 ; ---------------------------------------------------------------------------
.text:00401D70
.text:00401D70 loc_401D70:                             ; CODE XREF: sub_401B10+259↑j
.text:00401D70                                         ; sub_401B10+A55↓j
.text:00401D70                 mov     esi, [esp+5Ch+var_20]
.text:00401D74                 test    esi, esi
.text:00401D76                 jz      short loc_401D84
.text:00401D78                 mov     edx, [esp+5Ch+var_1C]
.text:00401D7C                 test    edx, edx
.text:00401D7E                 jz      loc_402490
.text:00401D84
.text:00401D84 loc_401D84:                             ; CODE XREF: sub_401B10+266↑j
.text:00401D84                 mov     eax, [esp+5Ch+var_18]
.text:00401D88                 test    eax, eax
.text:00401D8A                 jz      loc_401F50
.text:00401D90                 mov     ecx, [ebp+0]
.text:00401D93                 lea     eax, [ecx+1]
.text:00401D96                 mov     [ebp+0], eax
.text:00401D99                 cmp     byte ptr [edi], 0
.text:00401D9C                 jz      loc_401EB0
.text:00401DA2                 mov     ecx, [esp+5Ch+var_18]
.text:00401DA6                 mov     esi, [ecx+4]
.text:00401DA9                 test    esi, esi
.text:00401DAB                 jz      short loc_401DF6
.text:00401DAD                 lea     ebx, [edi+1]
.text:00401DB0                 mov     [ebp+0Ch], ebx
.text:00401DB3
.text:00401DB3 loc_401DB3:                             ; CODE XREF: sub_401B10+3A8↓j
.text:00401DB3                                         ; sub_401B10+3C4↓j
.text:00401DB3                 mov     ebx, [ebp+14h]
.text:00401DB6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401DB9                 call    strlen
.text:00401DBE                 add     [ebp+14h], eax
.text:00401DC1                 mov     esi, [esp+5Ch+arg_10]
.text:00401DC5                 test    esi, esi
.text:00401DC7                 jz      short loc_401DD3
.text:00401DC9                 mov     ebp, [esp+5Ch+var_24]
.text:00401DCD                 mov     ecx, [esp+5Ch+arg_10]
.text:00401DD1                 mov     [ecx], ebp
.text:00401DD3
.text:00401DD3 loc_401DD3:                             ; CODE XREF: sub_401B10+2B7↑j
.text:00401DD3                 mov     eax, [esp+5Ch+var_18]
.text:00401DD7                 mov     ecx, [eax+8]
.text:00401DDA                 test    ecx, ecx
.text:00401DDC                 jnz     short loc_401DEA
.text:00401DDE                 mov     ecx, [esp+5Ch+var_18]
.text:00401DE2
.text:00401DE2 loc_401DE2:                             ; CODE XREF: sub_401B10+723↓j
.text:00401DE2                 mov     eax, [ecx+0Ch]
.text:00401DE5                 jmp     loc_401C67
.text:00401DEA ; ---------------------------------------------------------------------------
.text:00401DEA
.text:00401DEA loc_401DEA:                             ; CODE XREF: sub_401B10+2CC↑j
.text:00401DEA                                         ; sub_401B10+719↓j
.text:00401DEA                 mov     esi, [eax+0Ch]
.text:00401DED                 xor     eax, eax
.text:00401DEF                 mov     [ecx], esi
.text:00401DF1                 jmp     loc_401C67
.text:00401DF6 ; ---------------------------------------------------------------------------
.text:00401DF6
.text:00401DF6 loc_401DF6:                             ; CODE XREF: sub_401B10+29B↑j
.text:00401DF6                 mov     edi, [esp+5Ch+var_14]
.text:00401DFA                 test    edi, edi
.text:00401DFC                 jz      short loc_401E50
.text:00401DFE                 mov     esi, [esp+5Ch+arg_4]
.text:00401E02                 mov     edx, [esi+eax*4-4]
.text:00401E06                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401E0A                 jz      short loc_401E72
.text:00401E0C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401E13                 call    ds:libintl_gettext
.text:00401E19                 mov     edx, [esp+5Ch+var_18]
.text:00401E1D                 mov     edi, [edx]
.text:00401E1F                 mov     [esp+5Ch+var_4C], edi
.text:00401E23                 mov     ebx, [ebp+0]
.text:00401E26                 mov     edi, [esp+5Ch+arg_4]
.text:00401E2A                 mov     ecx, [edi+ebx*4-4]
.text:00401E2E                 movsx   esi, byte ptr [ecx]
.text:00401E31                 mov     ecx, ds:_iob
.text:00401E37                 add     ecx, 40h ; '@'
.text:00401E3A                 mov     [esp+5Ch+var_50], esi
.text:00401E3E                 mov     ebx, [edi]
.text:00401E40                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E44                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401E47                 mov     [esp+5Ch+MaxCount], ebx
.text:00401E4B                 call    fprintf
.text:00401E50
.text:00401E50 loc_401E50:                             ; CODE XREF: sub_401B10+2EC↑j
.text:00401E50                                         ; sub_401B10+398↓j
.text:00401E50                 mov     ecx, [ebp+14h]
.text:00401E53                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401E56                 call    strlen
.text:00401E5B                 add     [ebp+14h], eax
.text:00401E5E                 mov     eax, [esp+5Ch+var_18]
.text:00401E62                 mov     esi, [eax+0Ch]
.text:00401E65                 mov     [ebp+8], esi
.text:00401E68
.text:00401E68 loc_401E68:                             ; CODE XREF: sub_401B10+4E5↓j
.text:00401E68                                         ; sub_401B10+73E↓j ...
.text:00401E68                 mov     eax, 3Fh ; '?'
.text:00401E6D                 jmp     loc_401C67
.text:00401E72 ; ---------------------------------------------------------------------------
.text:00401E72
.text:00401E72 loc_401E72:                             ; CODE XREF: sub_401B10+2FA↑j
.text:00401E72                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401E79                 call    ds:libintl_gettext
.text:00401E7F                 mov     edx, [esp+5Ch+var_18]
.text:00401E83                 mov     edi, [esp+5Ch+arg_4]
.text:00401E87                 mov     ecx, ds:_iob
.text:00401E8D                 mov     esi, [edx]
.text:00401E8F                 add     ecx, 40h ; '@'
.text:00401E92                 mov     [esp+5Ch+var_50], esi
.text:00401E96                 mov     ebx, [edi]
.text:00401E98                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E9C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401E9F                 mov     [esp+5Ch+MaxCount], ebx
.text:00401EA3                 call    fprintf
.text:00401EA8                 jmp     short loc_401E50
.text:00401EA8 ; ---------------------------------------------------------------------------
.text:00401EAA                 align 10h
.text:00401EB0
.text:00401EB0 loc_401EB0:                             ; CODE XREF: sub_401B10+28C↑j
.text:00401EB0                 mov     ebx, [esp+5Ch+var_18]
.text:00401EB4                 cmp     dword ptr [ebx+4], 1
.text:00401EB8                 jnz     loc_401DB3
.text:00401EBE                 cmp     eax, [esp+5Ch+arg_0]
.text:00401EC2                 jge     short loc_401ED9
.text:00401EC4                 mov     ebx, [esp+5Ch+arg_4]
.text:00401EC8                 lea     edi, [ecx+2]
.text:00401ECB                 mov     [ebp+0], edi
.text:00401ECE                 mov     esi, [ebx+eax*4]
.text:00401ED1                 mov     [ebp+0Ch], esi
.text:00401ED4                 jmp     loc_401DB3
.text:00401ED9 ; ---------------------------------------------------------------------------
.text:00401ED9
.text:00401ED9 loc_401ED9:                             ; CODE XREF: sub_401B10+3B2↑j
.text:00401ED9                 mov     edx, [esp+5Ch+var_14]
.text:00401EDD                 test    edx, edx
.text:00401EDF                 jnz     short loc_401F10
.text:00401EE1
.text:00401EE1 loc_401EE1:                             ; CODE XREF: sub_401B10+437↓j
.text:00401EE1                 mov     edx, [ebp+14h]
.text:00401EE4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401EE7                 call    strlen
.text:00401EEC                 add     [ebp+14h], eax
.text:00401EEF                 mov     eax, [esp+5Ch+var_18]
.text:00401EF3                 mov     edi, [eax+0Ch]
.text:00401EF6                 mov     [ebp+8], edi
.text:00401EF9
.text:00401EF9 loc_401EF9:                             ; CODE XREF: sub_401B10+7C2↓j
.text:00401EF9                 mov     ebp, [esp+5Ch+Str]
.text:00401EFD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401F01                 setnz   bl
.text:00401F04                 movzx   esi, bl
.text:00401F07                 lea     eax, [esi+esi*4+3Ah]
.text:00401F0B                 jmp     loc_401C67
.text:00401F10 ; ---------------------------------------------------------------------------
.text:00401F10
.text:00401F10 loc_401F10:                             ; CODE XREF: sub_401B10+3CF↑j
.text:00401F10                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401F17                 call    ds:libintl_gettext
.text:00401F1D                 mov     ecx, [ebp+0]
.text:00401F20                 mov     esi, [esp+5Ch+arg_4]
.text:00401F24                 mov     ebx, [esi+ecx*4-4]
.text:00401F28                 mov     ecx, ds:_iob
.text:00401F2E                 mov     [esp+5Ch+var_50], ebx
.text:00401F32                 mov     edi, [esi]
.text:00401F34                 add     ecx, 40h ; '@'
.text:00401F37                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401F3B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401F3E                 mov     [esp+5Ch+MaxCount], edi
.text:00401F42                 call    fprintf
.text:00401F47                 jmp     short loc_401EE1
.text:00401F47 ; ---------------------------------------------------------------------------
.text:00401F49                 align 10h
.text:00401F50
.text:00401F50 loc_401F50:                             ; CODE XREF: sub_401B10+21E↑j
.text:00401F50                                         ; sub_401B10+27A↑j
.text:00401F50                 mov     eax, [esp+5Ch+arg_14]
.text:00401F54                 test    eax, eax
.text:00401F56                 jz      short loc_401F86
.text:00401F58                 mov     ebx, [ebp+0]
.text:00401F5B                 mov     esi, [esp+5Ch+arg_4]
.text:00401F5F                 mov     edi, [esi+ebx*4]
.text:00401F62                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401F66                 jz      short loc_401F89
.text:00401F68                 mov     ecx, [ebp+14h]
.text:00401F6B                 mov     edx, [esp+5Ch+Str]
.text:00401F6F                 movsx   ebx, byte ptr [ecx]
.text:00401F72                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401F75                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401F79                 call    strchr
.text:00401F7E                 test    eax, eax
.text:00401F80                 jnz     loc_402030
.text:00401F86
.text:00401F86 loc_401F86:                             ; CODE XREF: sub_401B10+446↑j
.text:00401F86                 mov     ebx, [ebp+0]
.text:00401F89
.text:00401F89 loc_401F89:                             ; CODE XREF: sub_401B10+456↑j
.text:00401F89                 mov     eax, [esp+5Ch+var_14]
.text:00401F8D                 test    eax, eax
.text:00401F8F                 jz      short loc_401FE1
.text:00401F91                 mov     esi, [esp+5Ch+arg_4]
.text:00401F95                 mov     edi, [esi+ebx*4]
.text:00401F98                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401F9C                 jz      short loc_401FFA
.text:00401F9E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401FA5                 call    ds:libintl_gettext
.text:00401FAB                 mov     edi, [ebp+14h]
.text:00401FAE                 mov     [esp+5Ch+var_4C], edi
.text:00401FB2                 mov     ebx, [ebp+0]
.text:00401FB5                 mov     edi, [esp+5Ch+arg_4]
.text:00401FB9                 mov     esi, [edi+ebx*4]
.text:00401FBC                 movsx   ecx, byte ptr [esi]
.text:00401FBF                 mov     esi, ds:_iob
.text:00401FC5                 add     esi, 40h ; '@'
.text:00401FC8                 mov     [esp+5Ch+var_50], ecx
.text:00401FCC                 mov     ebx, [edi]
.text:00401FCE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401FD2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401FD5                 mov     [esp+5Ch+MaxCount], ebx
.text:00401FD9                 call    fprintf
.text:00401FDE
.text:00401FDE loc_401FDE:                             ; CODE XREF: sub_401B10+51D↓j
.text:00401FDE                 mov     ebx, [ebp+0]
.text:00401FE1
.text:00401FE1 loc_401FE1:                             ; CODE XREF: sub_401B10+47F↑j
.text:00401FE1                 mov     dword ptr [ebp+14h], offset dword_4019C0
.text:00401FE8                 lea     edx, [ebx+1]
.text:00401FEB                 mov     [ebp+0], edx
.text:00401FEE
.text:00401FEE loc_401FEE:                             ; CODE XREF: sub_401B10+999↓j
.text:00401FEE                 mov     dword ptr [ebp+8], 0
.text:00401FF5                 jmp     loc_401E68
.text:00401FFA ; ---------------------------------------------------------------------------
.text:00401FFA
.text:00401FFA loc_401FFA:                             ; CODE XREF: sub_401B10+48C↑j
.text:00401FFA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402001                 call    ds:libintl_gettext
.text:00402007                 mov     ecx, [ebp+14h]
.text:0040200A                 mov     edi, [esp+5Ch+arg_4]
.text:0040200E                 mov     edx, ds:_iob
.text:00402014                 mov     [esp+5Ch+var_50], ecx
.text:00402018                 mov     ebx, [edi]
.text:0040201A                 add     edx, 40h ; '@'
.text:0040201D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402021                 mov     [esp+5Ch+MaxCount], ebx
.text:00402025                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402028                 call    fprintf
.text:0040202D                 jmp     short loc_401FDE
.text:0040202D ; ---------------------------------------------------------------------------
.text:0040202F                 align 10h
.text:00402030
.text:00402030 loc_402030:                             ; CODE XREF: sub_401B10+196↑j
.text:00402030                                         ; sub_401B10+1B5↑j ...
.text:00402030                 mov     esi, [ebp+14h]
.text:00402033                 movzx   ebx, byte ptr [esi]
.text:00402036                 inc     esi
.text:00402037                 mov     [ebp+14h], esi
.text:0040203A                 mov     ecx, [esp+5Ch+Str]
.text:0040203E                 movsx   esi, bl
.text:00402041                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402045                 mov     edi, esi
.text:00402047                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040204A                 call    strchr
.text:0040204F                 mov     ecx, [ebp+14h]
.text:00402052                 cmp     byte ptr [ecx], 0
.text:00402055                 jnz     short loc_40205A
.text:00402057                 inc     dword ptr [ebp+0]
.text:0040205A
.text:0040205A loc_40205A:                             ; CODE XREF: sub_401B10+545↑j
.text:0040205A                 test    eax, eax
.text:0040205C                 jz      loc_402440
.text:00402062                 cmp     bl, 3Ah ; ':'
.text:00402065                 jz      loc_402440
.text:0040206B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040206E                 jz      loc_402126
.text:00402074                 movzx   edx, byte ptr [eax+1]
.text:00402078
.text:00402078 loc_402078:                             ; CODE XREF: sub_401B10+61D↓j
.text:00402078                 cmp     dl, 3Ah ; ':'
.text:0040207B                 jz      short loc_402084
.text:0040207D
.text:0040207D loc_40207D:                             ; CODE XREF: sub_401B10+590↓j
.text:0040207D                 mov     eax, esi
.text:0040207F                 jmp     loc_401C67
.text:00402084 ; ---------------------------------------------------------------------------
.text:00402084
.text:00402084 loc_402084:                             ; CODE XREF: sub_401B10+56B↑j
.text:00402084                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402088                 jz      loc_402111
.text:0040208E                 cmp     byte ptr [ecx], 0
.text:00402091                 jz      short loc_4020A2
.text:00402093
.text:00402093 loc_402093:                             ; CODE XREF: sub_401B10+604↓j
.text:00402093                 inc     dword ptr [ebp+0]
.text:00402096                 mov     [ebp+0Ch], ecx
.text:00402099
.text:00402099 loc_402099:                             ; CODE XREF: sub_401B10+5AB↓j
.text:00402099                                         ; sub_401B10+5C6↓j ...
.text:00402099                 mov     dword ptr [ebp+14h], 0
.text:004020A0                 jmp     short loc_40207D
.text:004020A2 ; ---------------------------------------------------------------------------
.text:004020A2
.text:004020A2 loc_4020A2:                             ; CODE XREF: sub_401B10+581↑j
.text:004020A2                 mov     ecx, [ebp+0]
.text:004020A5                 cmp     ecx, [esp+5Ch+arg_0]
.text:004020A9                 jz      short loc_4020BD
.text:004020AB                 mov     eax, [esp+5Ch+arg_4]
.text:004020AF                 lea     edx, [ecx+1]
.text:004020B2                 mov     [ebp+0], edx
.text:004020B5                 mov     ebx, [eax+ecx*4]
.text:004020B8                 mov     [ebp+0Ch], ebx
.text:004020BB                 jmp     short loc_402099
.text:004020BD ; ---------------------------------------------------------------------------
.text:004020BD
.text:004020BD loc_4020BD:                             ; CODE XREF: sub_401B10+599↑j
.text:004020BD                 mov     ecx, [esp+5Ch+var_14]
.text:004020C1                 test    ecx, ecx
.text:004020C3                 jnz     short loc_4020DF
.text:004020C5
.text:004020C5 loc_4020C5:                             ; CODE XREF: sub_401B10+5FF↓j
.text:004020C5                 mov     [ebp+8], edi
.text:004020C8                 mov     edi, [esp+5Ch+Str]
.text:004020CC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004020CF                 jz      short loc_4020D8
.text:004020D1                 mov     esi, 3Fh ; '?'
.text:004020D6                 jmp     short loc_402099
.text:004020D8 ; ---------------------------------------------------------------------------
.text:004020D8
.text:004020D8 loc_4020D8:                             ; CODE XREF: sub_401B10+5BF↑j
.text:004020D8                 mov     esi, 3Ah ; ':'
.text:004020DD                 jmp     short loc_402099
.text:004020DF ; ---------------------------------------------------------------------------
.text:004020DF
.text:004020DF loc_4020DF:                             ; CODE XREF: sub_401B10+5B3↑j
.text:004020DF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004020E6                 call    ds:libintl_gettext
.text:004020EC                 mov     [esp+5Ch+var_50], edi
.text:004020F0                 mov     ebx, [esp+5Ch+arg_4]
.text:004020F4                 mov     edx, ds:_iob
.text:004020FA                 mov     esi, [ebx]
.text:004020FC                 add     edx, 40h ; '@'
.text:004020FF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402103                 mov     [esp+5Ch+MaxCount], esi
.text:00402107                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040210A                 call    fprintf
.text:0040210F                 jmp     short loc_4020C5
.text:00402111 ; ---------------------------------------------------------------------------
.text:00402111
.text:00402111 loc_402111:                             ; CODE XREF: sub_401B10+578↑j
.text:00402111                 cmp     byte ptr [ecx], 0
.text:00402114                 jnz     loc_402093
.text:0040211A                 mov     dword ptr [ebp+0Ch], 0
.text:00402121                 jmp     loc_402099
.text:00402126 ; ---------------------------------------------------------------------------
.text:00402126
.text:00402126 loc_402126:                             ; CODE XREF: sub_401B10+55E↑j
.text:00402126                 movzx   edx, byte ptr [eax+1]
.text:0040212A                 cmp     dl, 3Bh ; ';'
.text:0040212D                 jnz     loc_402078
.text:00402133                 mov     [esp+5Ch+var_2C], 0
.text:0040213B                 mov     [esp+5Ch+var_30], 0
.text:00402143                 mov     [esp+5Ch+var_34], 0
.text:0040214B                 mov     [esp+5Ch+var_38], 0
.text:00402153                 cmp     byte ptr [ecx], 0
.text:00402156                 jz      loc_4023CB
.text:0040215C                 inc     dword ptr [ebp+0]
.text:0040215F                 mov     [ebp+0Ch], ecx
.text:00402162
.text:00402162 loc_402162:                             ; CODE XREF: sub_401B10+8D4↓j
.text:00402162                 mov     edi, [ebp+0Ch]
.text:00402165                 mov     [ebp+14h], edi
.text:00402168                 movzx   eax, byte ptr [edi]
.text:0040216B                 test    al, al
.text:0040216D                 jz      short loc_40217F
.text:0040216F                 cmp     al, 3Dh ; '='
.text:00402171                 jz      short loc_40217F
.text:00402173
.text:00402173 loc_402173:                             ; CODE XREF: sub_401B10+66D↓j
.text:00402173                 inc     edi
.text:00402174                 movzx   eax, byte ptr [edi]
.text:00402177                 test    al, al
.text:00402179                 jz      short loc_40217F
.text:0040217B                 cmp     al, 3Dh ; '='
.text:0040217D                 jnz     short loc_402173
.text:0040217F
.text:0040217F loc_40217F:                             ; CODE XREF: sub_401B10+65D↑j
.text:0040217F                                         ; sub_401B10+661↑j ...
.text:0040217F                 mov     [esp+5Ch+var_3C], 0
.text:00402187                 mov     esi, [esp+5Ch+arg_C]
.text:0040218B                 mov     eax, [esi]
.text:0040218D                 test    eax, eax
.text:0040218F                 jz      loc_402310
.text:00402195                 mov     ecx, eax
.text:00402197
.text:00402197 loc_402197:                             ; CODE XREF: sub_401B10+6B3↓j
.text:00402197                 mov     ebx, [ebp+14h]
.text:0040219A                 mov     eax, edi
.text:0040219C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040219F                 sub     eax, ebx
.text:004021A1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004021A5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004021A9                 call    strncmp
.text:004021AE                 test    eax, eax
.text:004021B0                 jz      loc_402377
.text:004021B6
.text:004021B6 loc_4021B6:                             ; CODE XREF: sub_401B10+88C↓j
.text:004021B6                                         ; sub_401B10+89D↓j
.text:004021B6                 inc     [esp+5Ch+var_3C]
.text:004021BA                 add     esi, 10h
.text:004021BD                 mov     edx, [esi]
.text:004021BF                 test    edx, edx
.text:004021C1                 mov     ecx, edx
.text:004021C3                 jnz     short loc_402197
.text:004021C5
.text:004021C5 loc_4021C5:                             ; CODE XREF: sub_401B10+8B6↓j
.text:004021C5                 mov     esi, [esp+5Ch+var_34]
.text:004021C9                 test    esi, esi
.text:004021CB                 jz      short loc_4021D9
.text:004021CD                 mov     ebx, [esp+5Ch+var_30]
.text:004021D1                 test    ebx, ebx
.text:004021D3                 jz      loc_402321
.text:004021D9
.text:004021D9 loc_4021D9:                             ; CODE XREF: sub_401B10+6BB↑j
.text:004021D9                 mov     esi, [esp+5Ch+var_2C]
.text:004021DD                 test    esi, esi
.text:004021DF                 jz      loc_402310
.text:004021E5                 cmp     byte ptr [edi], 0
.text:004021E8                 jz      loc_402290
.text:004021EE                 mov     ecx, [esp+5Ch+var_2C]
.text:004021F2                 mov     ebx, [ecx+4]
.text:004021F5                 test    ebx, ebx
.text:004021F7                 jz      short loc_402238
.text:004021F9                 lea     edx, [edi+1]
.text:004021FC                 mov     [ebp+0Ch], edx
.text:004021FF
.text:004021FF loc_4021FF:                             ; CODE XREF: sub_401B10+788↓j
.text:004021FF                                         ; sub_401B10+7A7↓j
.text:004021FF                 mov     edi, [ebp+14h]
.text:00402202                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402205                 call    strlen
.text:0040220A                 add     [ebp+14h], eax
.text:0040220D                 mov     eax, [esp+5Ch+arg_10]
.text:00402211                 test    eax, eax
.text:00402213                 jz      short loc_402220
.text:00402215                 mov     edx, [esp+5Ch+var_38]
.text:00402219                 mov     ebp, [esp+5Ch+arg_10]
.text:0040221D                 mov     [ebp+0], edx
.text:00402220
.text:00402220 loc_402220:                             ; CODE XREF: sub_401B10+703↑j
.text:00402220                 mov     eax, [esp+5Ch+var_2C]
.text:00402224                 mov     ecx, [eax+8]
.text:00402227                 test    ecx, ecx
.text:00402229                 jnz     loc_401DEA
.text:0040222F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402233                 jmp     loc_401DE2
.text:00402238 ; ---------------------------------------------------------------------------
.text:00402238
.text:00402238 loc_402238:                             ; CODE XREF: sub_401B10+6E7↑j
.text:00402238                 mov     eax, [esp+5Ch+var_14]
.text:0040223C                 test    eax, eax
.text:0040223E                 jnz     short loc_402253
.text:00402240
.text:00402240 loc_402240:                             ; CODE XREF: sub_401B10+779↓j
.text:00402240                 mov     ecx, [ebp+14h]
.text:00402243                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402246                 call    strlen
.text:0040224B                 add     [ebp+14h], eax
.text:0040224E                 jmp     loc_401E68
.text:00402253 ; ---------------------------------------------------------------------------
.text:00402253
.text:00402253 loc_402253:                             ; CODE XREF: sub_401B10+72E↑j
.text:00402253                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040225A                 call    ds:libintl_gettext
.text:00402260                 mov     edx, [esp+5Ch+var_2C]
.text:00402264                 mov     ebx, [esp+5Ch+arg_4]
.text:00402268                 mov     edi, [edx]
.text:0040226A                 mov     [esp+5Ch+var_50], edi
.text:0040226E                 mov     edi, ds:_iob
.text:00402274                 mov     esi, [ebx]
.text:00402276                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040227A                 add     edi, 40h ; '@'
.text:0040227D                 mov     [esp+5Ch+MaxCount], esi
.text:00402281                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402284                 call    fprintf
.text:00402289                 jmp     short loc_402240
.text:00402289 ; ---------------------------------------------------------------------------
.text:0040228B                 align 10h
.text:00402290
.text:00402290 loc_402290:                             ; CODE XREF: sub_401B10+6D8↑j
.text:00402290                 mov     esi, [esp+5Ch+var_2C]
.text:00402294                 cmp     dword ptr [esi+4], 1
.text:00402298                 jnz     loc_4021FF
.text:0040229E                 mov     ecx, [ebp+0]
.text:004022A1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004022A5                 jge     short loc_4022BC
.text:004022A7                 mov     eax, [esp+5Ch+arg_4]
.text:004022AB                 lea     ebx, [ecx+1]
.text:004022AE                 mov     [ebp+0], ebx
.text:004022B1                 mov     edi, [eax+ecx*4]
.text:004022B4                 mov     [ebp+0Ch], edi
.text:004022B7                 jmp     loc_4021FF
.text:004022BC ; ---------------------------------------------------------------------------
.text:004022BC
.text:004022BC loc_4022BC:                             ; CODE XREF: sub_401B10+795↑j
.text:004022BC                 mov     edx, [esp+5Ch+var_14]
.text:004022C0                 test    edx, edx
.text:004022C2                 jnz     short loc_4022D7
.text:004022C4
.text:004022C4 loc_4022C4:                             ; CODE XREF: sub_401B10+7FE↓j
.text:004022C4                 mov     edx, [ebp+14h]
.text:004022C7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004022CA                 call    strlen
.text:004022CF                 add     [ebp+14h], eax
.text:004022D2                 jmp     loc_401EF9
.text:004022D7 ; ---------------------------------------------------------------------------
.text:004022D7
.text:004022D7 loc_4022D7:                             ; CODE XREF: sub_401B10+7B2↑j
.text:004022D7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004022DE                 call    ds:libintl_gettext
.text:004022E4                 mov     ecx, [ebp+0]
.text:004022E7                 mov     ebx, [esp+5Ch+arg_4]
.text:004022EB                 mov     edi, [ebx+ecx*4-4]
.text:004022EF                 mov     ecx, ds:_iob
.text:004022F5                 mov     [esp+5Ch+var_50], edi
.text:004022F9                 mov     esi, [ebx]
.text:004022FB                 add     ecx, 40h ; '@'
.text:004022FE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402302                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402305                 mov     [esp+5Ch+MaxCount], esi
.text:00402309                 call    fprintf
.text:0040230E                 jmp     short loc_4022C4
.text:00402310 ; ---------------------------------------------------------------------------
.text:00402310
.text:00402310 loc_402310:                             ; CODE XREF: sub_401B10+67F↑j
.text:00402310                                         ; sub_401B10+6CF↑j
.text:00402310                 mov     dword ptr [ebp+14h], 0
.text:00402317                 mov     eax, 57h ; 'W'
.text:0040231C                 jmp     loc_401C67
.text:00402321 ; ---------------------------------------------------------------------------
.text:00402321
.text:00402321 loc_402321:                             ; CODE XREF: sub_401B10+6C3↑j
.text:00402321                 mov     edi, [esp+5Ch+var_14]
.text:00402325                 test    edi, edi
.text:00402327                 jnz     short loc_40233F
.text:00402329
.text:00402329 loc_402329:                             ; CODE XREF: sub_401B10+865↓j
.text:00402329                 mov     edx, [ebp+14h]
.text:0040232C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040232F                 call    strlen
.text:00402334                 add     [ebp+14h], eax
.text:00402337                 inc     dword ptr [ebp+0]
.text:0040233A                 jmp     loc_401E68
.text:0040233F ; ---------------------------------------------------------------------------
.text:0040233F
.text:0040233F loc_40233F:                             ; CODE XREF: sub_401B10+817↑j
.text:0040233F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402346                 call    ds:libintl_gettext
.text:0040234C                 mov     ecx, [ebp+0]
.text:0040234F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402353                 mov     edi, [ebx+ecx*4]
.text:00402356                 mov     ecx, ds:_iob
.text:0040235C                 mov     [esp+5Ch+var_50], edi
.text:00402360                 mov     esi, [ebx]
.text:00402362                 add     ecx, 40h ; '@'
.text:00402365                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402369                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040236C                 mov     [esp+5Ch+MaxCount], esi
.text:00402370                 call    fprintf
.text:00402375                 jmp     short loc_402329
.text:00402377 ; ---------------------------------------------------------------------------
.text:00402377
.text:00402377 loc_402377:                             ; CODE XREF: sub_401B10+6A0↑j
.text:00402377                 mov     edx, [ebp+14h]
.text:0040237A                 mov     ebx, edi
.text:0040237C                 mov     ecx, [esi]
.text:0040237E                 sub     ebx, edx
.text:00402380                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402383                 call    strlen
.text:00402388                 cmp     ebx, eax
.text:0040238A                 jz      short loc_4023B2
.text:0040238C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402390                 test    ebx, ebx
.text:00402392                 jz      short loc_4023A1
.text:00402394                 mov     [esp+5Ch+var_34], 1
.text:0040239C                 jmp     loc_4021B6
.text:004023A1 ; ---------------------------------------------------------------------------
.text:004023A1
.text:004023A1 loc_4023A1:                             ; CODE XREF: sub_401B10+882↑j
.text:004023A1                 mov     [esp+5Ch+var_2C], esi
.text:004023A5                 mov     ecx, [esp+5Ch+var_3C]
.text:004023A9                 mov     [esp+5Ch+var_38], ecx
.text:004023AD                 jmp     loc_4021B6
.text:004023B2 ; ---------------------------------------------------------------------------
.text:004023B2
.text:004023B2 loc_4023B2:                             ; CODE XREF: sub_401B10+87A↑j
.text:004023B2                 mov     [esp+5Ch+var_2C], esi
.text:004023B6                 mov     eax, [esp+5Ch+var_3C]
.text:004023BA                 mov     [esp+5Ch+var_30], 1
.text:004023C2                 mov     [esp+5Ch+var_38], eax
.text:004023C6                 jmp     loc_4021C5
.text:004023CB ; ---------------------------------------------------------------------------
.text:004023CB
.text:004023CB loc_4023CB:                             ; CODE XREF: sub_401B10+646↑j
.text:004023CB                 mov     edx, [ebp+0]
.text:004023CE                 cmp     edx, [esp+5Ch+arg_0]
.text:004023D2                 jz      short loc_4023E9
.text:004023D4                 mov     ebx, [esp+5Ch+arg_4]
.text:004023D8                 lea     esi, [edx+1]
.text:004023DB                 mov     [ebp+0], esi
.text:004023DE                 mov     edi, [ebx+edx*4]
.text:004023E1                 mov     [ebp+0Ch], edi
.text:004023E4                 jmp     loc_402162
.text:004023E9 ; ---------------------------------------------------------------------------
.text:004023E9
.text:004023E9 loc_4023E9:                             ; CODE XREF: sub_401B10+8C2↑j
.text:004023E9                 mov     edi, [esp+5Ch+var_14]
.text:004023ED                 test    edi, edi
.text:004023EF                 jnz     short loc_40240C
.text:004023F1
.text:004023F1 loc_4023F1:                             ; CODE XREF: sub_401B10+92C↓j
.text:004023F1                 mov     [ebp+8], esi
.text:004023F4                 mov     ebp, [esp+5Ch+Str]
.text:004023F8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004023FC                 jz      short loc_402408
.text:004023FE                 mov     bl, 3Fh ; '?'
.text:00402400
.text:00402400 loc_402400:                             ; CODE XREF: sub_401B10+8FA↓j
.text:00402400                 movsx   eax, bl
.text:00402403                 jmp     loc_401C67
.text:00402408 ; ---------------------------------------------------------------------------
.text:00402408
.text:00402408 loc_402408:                             ; CODE XREF: sub_401B10+8EC↑j
.text:00402408                 mov     bl, 3Ah ; ':'
.text:0040240A                 jmp     short loc_402400
.text:0040240C ; ---------------------------------------------------------------------------
.text:0040240C
.text:0040240C loc_40240C:                             ; CODE XREF: sub_401B10+8DF↑j
.text:0040240C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402413                 call    ds:libintl_gettext
.text:00402419                 mov     [esp+5Ch+var_50], esi
.text:0040241D                 mov     edx, [esp+5Ch+arg_4]
.text:00402421                 mov     ecx, ds:_iob
.text:00402427                 mov     ebx, [edx]
.text:00402429                 add     ecx, 40h ; '@'
.text:0040242C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402430                 mov     [esp+5Ch+MaxCount], ebx
.text:00402434                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402437                 call    fprintf
.text:0040243C                 jmp     short loc_4023F1
.text:0040243C ; ---------------------------------------------------------------------------
.text:0040243E                 align 10h
.text:00402440
.text:00402440 loc_402440:                             ; CODE XREF: sub_401B10+54C↑j
.text:00402440                                         ; sub_401B10+555↑j
.text:00402440                 mov     eax, [esp+5Ch+var_14]
.text:00402444                 test    eax, eax
.text:00402446                 jz      short loc_40247F
.text:00402448                 mov     ebx, [ebp+1Ch]
.text:0040244B                 test    ebx, ebx
.text:0040244D                 jz      short loc_402487
.text:0040244F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402456
.text:00402456 loc_402456:                             ; CODE XREF: sub_401B10+97E↓j
.text:00402456                 call    ds:libintl_gettext
.text:0040245C                 mov     [esp+5Ch+var_50], esi
.text:00402460                 mov     ebx, [esp+5Ch+arg_4]
.text:00402464                 mov     edx, ds:_iob
.text:0040246A                 mov     esi, [ebx]
.text:0040246C                 add     edx, 40h ; '@'
.text:0040246F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402473                 mov     [esp+5Ch+MaxCount], esi
.text:00402477                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040247A                 call    fprintf
.text:0040247F
.text:0040247F loc_40247F:                             ; CODE XREF: sub_401B10+936↑j
.text:0040247F                 mov     [ebp+8], edi
.text:00402482                 jmp     loc_401E68
.text:00402487 ; ---------------------------------------------------------------------------
.text:00402487
.text:00402487 loc_402487:                             ; CODE XREF: sub_401B10+93D↑j
.text:00402487                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040248E                 jmp     short loc_402456
.text:00402490 ; ---------------------------------------------------------------------------
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_401B10+26E↑j
.text:00402490                 mov     edi, [esp+5Ch+var_14]
.text:00402494                 test    edi, edi
.text:00402496                 jnz     short loc_4024AE
.text:00402498
.text:00402498 loc_402498:                             ; CODE XREF: sub_401B10+9D4↓j
.text:00402498                 mov     edx, [ebp+14h]
.text:0040249B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040249E                 call    strlen
.text:004024A3                 add     [ebp+14h], eax
.text:004024A6                 inc     dword ptr [ebp+0]
.text:004024A9                 jmp     loc_401FEE
.text:004024AE ; ---------------------------------------------------------------------------
.text:004024AE
.text:004024AE loc_4024AE:                             ; CODE XREF: sub_401B10+986↑j
.text:004024AE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:004024B5                 call    ds:libintl_gettext
.text:004024BB                 mov     ebx, [ebp+0]
.text:004024BE                 mov     edi, [esp+5Ch+arg_4]
.text:004024C2                 mov     ecx, [edi+ebx*4]
.text:004024C5                 mov     ebx, ds:_iob
.text:004024CB                 mov     [esp+5Ch+var_50], ecx
.text:004024CF                 mov     esi, [edi]
.text:004024D1                 add     ebx, 40h ; '@'
.text:004024D4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004024D8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004024DB                 mov     [esp+5Ch+MaxCount], esi
.text:004024DF                 call    fprintf
.text:004024E4                 jmp     short loc_402498
.text:004024E6 ; ---------------------------------------------------------------------------
.text:004024E6
.text:004024E6 loc_4024E6:                             ; CODE XREF: sub_401B10+246↑j
.text:004024E6                 mov     ecx, [ebp+14h]
.text:004024E9                 mov     ebx, edi
.text:004024EB                 mov     edx, [esi]
.text:004024ED                 sub     ebx, ecx
.text:004024EF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004024F2                 call    strlen
.text:004024F7                 cmp     ebx, eax
.text:004024F9                 jz      short loc_402551
.text:004024FB                 mov     ebx, [esp+5Ch+var_18]
.text:004024FF                 test    ebx, ebx
.text:00402501                 jz      short loc_402540
.text:00402503                 mov     edx, [esp+5Ch+arg_14]
.text:00402507                 test    edx, edx
.text:00402509                 jnz     short loc_402517
.text:0040250B                 mov     ecx, [esp+5Ch+var_18]
.text:0040250F                 mov     ebx, [esi+4]
.text:00402512                 cmp     [ecx+4], ebx
.text:00402515                 jz      short loc_402524
.text:00402517
.text:00402517 loc_402517:                             ; CODE XREF: sub_401B10+9F9↑j
.text:00402517                                         ; sub_401B10+A1A↓j ...
.text:00402517                 mov     [esp+5Ch+var_20], 1
.text:0040251F                 jmp     loc_401D5C
.text:00402524 ; ---------------------------------------------------------------------------
.text:00402524
.text:00402524 loc_402524:                             ; CODE XREF: sub_401B10+A05↑j
.text:00402524                 mov     edx, [esi+8]
.text:00402527                 cmp     [ecx+8], edx
.text:0040252A                 jnz     short loc_402517
.text:0040252C                 mov     ebx, [esi+0Ch]
.text:0040252F                 cmp     [ecx+0Ch], ebx
.text:00402532                 jnz     short loc_402517
.text:00402534                 jmp     loc_401D5C
.text:00402534 ; ---------------------------------------------------------------------------
.text:00402539                 align 10h
.text:00402540
.text:00402540 loc_402540:                             ; CODE XREF: sub_401B10+9F1↑j
.text:00402540                 mov     [esp+5Ch+var_18], esi
.text:00402544                 mov     eax, [esp+5Ch+var_28]
.text:00402548                 mov     [esp+5Ch+var_24], eax
.text:0040254C                 jmp     loc_401D5C
.text:00402551 ; ---------------------------------------------------------------------------
.text:00402551
.text:00402551 loc_402551:                             ; CODE XREF: sub_401B10+9E9↑j
.text:00402551                 mov     [esp+5Ch+var_18], esi
.text:00402555                 mov     ecx, [esp+5Ch+var_28]
.text:00402559                 mov     [esp+5Ch+var_1C], 1
.text:00402561                 mov     [esp+5Ch+var_24], ecx
.text:00402565                 jmp     loc_401D70
.text:0040256A ; ---------------------------------------------------------------------------
.text:0040256A
.text:0040256A loc_40256A:                             ; CODE XREF: sub_401B10+1BF↑j
.text:0040256A                 mov     eax, [esp+5Ch+Str]
.text:0040256E                 movsx   esi, dl
.text:00402571                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402575                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402578                 call    strchr
.text:0040257D                 test    eax, eax
.text:0040257F                 jnz     loc_402030
.text:00402585                 jmp     loc_401CD5
.text:0040258A ; ---------------------------------------------------------------------------
.text:0040258A
.text:0040258A loc_40258A:                             ; CODE XREF: sub_401B10+17C↑j
.text:0040258A                 mov     ecx, 1
.text:0040258F                 jmp     loc_401C92
.text:00402594 ; ---------------------------------------------------------------------------
.text:00402594
.text:00402594 loc_402594:                             ; CODE XREF: sub_401B10+D4↑j
.text:00402594                                         ; sub_401B10+130↑j
.text:00402594                 mov     eax, [ebp+20h]
.text:00402597                 cmp     eax, [ebp+24h]
.text:0040259A                 jz      loc_401C70
.text:004025A0                 mov     [ebp+0], eax
.text:004025A3                 jmp     loc_401C70
.text:004025A8 ; ---------------------------------------------------------------------------
.text:004025A8
.text:004025A8 loc_4025A8:                             ; CODE XREF: sub_401B10+FE↑j
.text:004025A8                 mov     [ebp+20h], eax
.text:004025AB                 jmp     loc_401C30
.text:004025B0 ; ---------------------------------------------------------------------------
.text:004025B0
.text:004025B0 loc_4025B0:                             ; CODE XREF: sub_401B10+CA↑j
.text:004025B0                 mov     edx, [ebp+20h]
.text:004025B3                 mov     eax, [ebp+24h]
.text:004025B6                 cmp     edx, eax
.text:004025B8                 jz      short loc_402630
.text:004025BA                 cmp     eax, ebx
.text:004025BC                 jz      short loc_4025D1
.text:004025BE                 mov     [esp+5Ch+Str2], ebp
.text:004025C2                 mov     ebx, [esp+5Ch+arg_4]
.text:004025C6                 mov     [esp+5Ch+Str1], ebx
.text:004025C9                 call    sub_4027C0
.text:004025CE                 mov     ebx, [ebp+0]
.text:004025D1
.text:004025D1 loc_4025D1:                             ; CODE XREF: sub_401B10+AAC↑j
.text:004025D1                                         ; sub_401B10+B22↓j ...
.text:004025D1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004025D5                 jge     short loc_402620
.text:004025D7                 mov     esi, [esp+5Ch+arg_4]
.text:004025DB                 mov     eax, [esi+ebx*4]
.text:004025DE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004025E1                 jz      short loc_402628
.text:004025E3                 lea     esi, [esi+0]
.text:004025E9                 lea     edi, [edi+0]
.text:004025F0
.text:004025F0 loc_4025F0:                             ; CODE XREF: sub_401B10+AFC↓j
.text:004025F0                                         ; sub_401B10+B1C↓j
.text:004025F0                 lea     eax, [ebx+1]
.text:004025F3                 mov     ebx, eax
.text:004025F5                 mov     [ebp+0], eax
.text:004025F8                 cmp     eax, [esp+5Ch+arg_0]
.text:004025FC                 jge     short loc_402620
.text:004025FE                 mov     edi, [esp+5Ch+arg_4]
.text:00402602                 mov     edx, [edi+eax*4]
.text:00402605                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402608                 jz      short loc_402610
.text:0040260A
.text:0040260A loc_40260A:                             ; CODE XREF: sub_401B10+B04↓j
.text:0040260A                 mov     ebx, eax
.text:0040260C                 jmp     short loc_4025F0
.text:0040260C ; ---------------------------------------------------------------------------
.text:0040260E                 align 10h
.text:00402610
.text:00402610 loc_402610:                             ; CODE XREF: sub_401B10+AF8↑j
.text:00402610                 cmp     byte ptr [edx+1], 0
.text:00402614                 jz      short loc_40260A
.text:00402616                 lea     esi, [esi+0]
.text:00402619                 lea     edi, [edi+0]
.text:00402620
.text:00402620 loc_402620:                             ; CODE XREF: sub_401B10+AC5↑j
.text:00402620                                         ; sub_401B10+AEC↑j ...
.text:00402620                 mov     [ebp+24h], ebx
.text:00402623                 jmp     loc_401BE0
.text:00402628 ; ---------------------------------------------------------------------------
.text:00402628
.text:00402628 loc_402628:                             ; CODE XREF: sub_401B10+AD1↑j
.text:00402628                 cmp     byte ptr [eax+1], 0
.text:0040262C                 jz      short loc_4025F0
.text:0040262E                 jmp     short loc_402620
.text:00402630 ; ---------------------------------------------------------------------------
.text:00402630
.text:00402630 loc_402630:                             ; CODE XREF: sub_401B10+AA8↑j
.text:00402630                 cmp     edx, ebx
.text:00402632                 jz      short loc_4025D1
.text:00402634                 mov     [ebp+20h], ebx
.text:00402637                 jmp     short loc_4025D1
.text:00402639 ; ---------------------------------------------------------------------------
.text:00402639
.text:00402639 loc_402639:                             ; CODE XREF: sub_401B10+88↑j
.text:00402639                 mov     dword ptr [ebp+18h], 0
.text:00402640                 mov     esi, [esp+5Ch+Str]
.text:00402644
.text:00402644 loc_402644:                             ; CODE XREF: sub_401B10+B49↓j
.text:00402644                 inc     esi
.text:00402645                 jmp     loc_401BA8
.text:00402645 ; ---------------------------------------------------------------------------
.text:0040264A                 align 10h
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_401B10+80↑j
.text:00402650                 mov     dword ptr [ebp+18h], 2
.text:00402657                 mov     esi, ecx
.text:00402659                 jmp     short loc_402644
.text:00402659 ; ---------------------------------------------------------------------------
.text:0040265B                 align 10h
.text:00402660
.text:00402660 loc_402660:                             ; CODE XREF: sub_401B10+69↑j
.text:00402660                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:00402667                 call    getenv
.text:0040266C                 test    eax, eax
.text:0040266E                 jz      loc_401B84
.text:00402674                 jmp     loc_401B7F
.text:00402674 ; ---------------------------------------------------------------------------
.text:00402679                 align 10h
.text:00402680
.text:00402680 loc_402680:                             ; CODE XREF: sub_401B10+3F↑j
.text:00402680                 mov     dword ptr [ebp+0], 1
.text:00402687                 mov     ebx, 1
.text:0040268C                 jmp     loc_401B60
.text:0040268C sub_401B10      endp
.text:0040268C
.text:00402691 ; ---------------------------------------------------------------------------
.text:00402691                 jmp     short sub_4026A0
.text:00402691 ; ---------------------------------------------------------------------------
.text:00402693                 align 10h
.text:004026A0
.text:004026A0 ; =============== S U B R O U T I N E =======================================
.text:004026A0
.text:004026A0
.text:004026A0 ; int __cdecl sub_4026A0(int, int, char *, int, int, int, int)
.text:004026A0 sub_4026A0      proc near               ; CODE XREF: .text:00402691↑j
.text:004026A0                                         ; sub_402940+3A↓p ...
.text:004026A0
.text:004026A0 var_2C          = dword ptr -2Ch
.text:004026A0 var_28          = dword ptr -28h
.text:004026A0 Str             = dword ptr -24h
.text:004026A0 var_20          = dword ptr -20h
.text:004026A0 var_1C          = dword ptr -1Ch
.text:004026A0 var_18          = dword ptr -18h
.text:004026A0 var_14          = dword ptr -14h
.text:004026A0 var_10          = dword ptr -10h
.text:004026A0 arg_0           = dword ptr  4
.text:004026A0 arg_4           = dword ptr  8
.text:004026A0 arg_8           = dword ptr  0Ch
.text:004026A0 arg_C           = dword ptr  10h
.text:004026A0 arg_10          = dword ptr  14h
.text:004026A0 arg_14          = dword ptr  18h
.text:004026A0 arg_18          = dword ptr  1Ch
.text:004026A0
.text:004026A0                 sub     esp, 2Ch
.text:004026A3                 mov     edx, dword_406010
.text:004026A9                 mov     [esp+2Ch+var_10], offset dword_407000 ; int
.text:004026B1                 mov     ecx, dword_406014
.text:004026B7                 mov     ds:dword_407000, edx
.text:004026BD                 mov     edx, [esp+2Ch+arg_18]
.text:004026C1                 mov     ds:dword_407004, ecx
.text:004026C7                 mov     ecx, [esp+2Ch+arg_14]
.text:004026CB                 mov     [esp+2Ch+var_14], edx ; int
.text:004026CF                 mov     edx, [esp+2Ch+arg_10]
.text:004026D3                 mov     [esp+2Ch+var_18], ecx ; int
.text:004026D7                 mov     ecx, [esp+2Ch+arg_C]
.text:004026DB                 mov     [esp+2Ch+var_1C], edx ; int
.text:004026DF                 mov     edx, [esp+2Ch+arg_8]
.text:004026E3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004026E7                 mov     ecx, [esp+2Ch+arg_4]
.text:004026EB                 mov     [esp+2Ch+Str], edx ; Str
.text:004026EF                 mov     edx, [esp+2Ch+arg_0]
.text:004026F3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004026F7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004026FA                 call    sub_401B10
.text:004026FF                 mov     ecx, ds:dword_407000
.text:00402705                 mov     dword_406010, ecx
.text:0040270B                 mov     ecx, ds:dword_40700C
.text:00402711                 mov     ds:dword_4071B0, ecx
.text:00402717                 mov     ecx, ds:dword_407008
.text:0040271D                 mov     dword_406018, ecx
.text:00402723                 add     esp, 2Ch
.text:00402726                 retn
.text:00402726 sub_4026A0      endp
.text:00402726
.text:00402726 ; ---------------------------------------------------------------------------
.text:00402727                 align 10h
.text:00402730                 sub     esp, 2Ch
.text:00402733                 mov     edx, dword_406010
.text:00402739                 mov     dword ptr [esp+1Ch], offset dword_407000
.text:00402741                 mov     ecx, dword_406014
.text:00402747                 mov     dword ptr [esp+18h], 1
.text:0040274F                 mov     ds:dword_407000, edx
.text:00402755                 mov     edx, [esp+38h]
.text:00402759                 mov     ds:dword_407004, ecx
.text:0040275F                 mov     ecx, [esp+34h]
.text:00402763                 mov     [esp+8], edx
.text:00402767                 mov     edx, [esp+30h]
.text:0040276B                 mov     [esp+4], ecx
.text:0040276F                 mov     dword ptr [esp+14h], 0
.text:00402777                 mov     dword ptr [esp+10h], 0
.text:0040277F                 mov     dword ptr [esp+0Ch], 0
.text:00402787                 mov     [esp], edx
.text:0040278A                 call    sub_401B10
.text:0040278F                 mov     ecx, ds:dword_407000
.text:00402795                 mov     dword_406010, ecx
.text:0040279B                 mov     ecx, ds:dword_40700C
.text:004027A1                 mov     ds:dword_4071B0, ecx
.text:004027A7                 mov     ecx, ds:dword_407008
.text:004027AD                 mov     dword_406018, ecx
.text:004027B3                 add     esp, 2Ch
.text:004027B6                 retn
.text:004027B6 ; ---------------------------------------------------------------------------
.text:004027B7                 align 10h
.text:004027C0
.text:004027C0 ; =============== S U B R O U T I N E =======================================
.text:004027C0
.text:004027C0
.text:004027C0 sub_4027C0      proc near               ; CODE XREF: sub_401B10+113↑p
.text:004027C0                                         ; sub_401B10+AB9↑p
.text:004027C0
.text:004027C0 var_2C          = dword ptr -2Ch
.text:004027C0 var_28          = dword ptr -28h
.text:004027C0 var_24          = dword ptr -24h
.text:004027C0 var_20          = dword ptr -20h
.text:004027C0 var_1C          = dword ptr -1Ch
.text:004027C0 var_18          = dword ptr -18h
.text:004027C0 var_14          = dword ptr -14h
.text:004027C0 arg_0           = dword ptr  4
.text:004027C0 arg_4           = dword ptr  8
.text:004027C0
.text:004027C0                 push    ebp
.text:004027C1                 push    edi
.text:004027C2                 push    esi
.text:004027C3                 push    ebx
.text:004027C4                 sub     esp, 1Ch
.text:004027C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004027CB                 mov     eax, [esp+2Ch+arg_4]
.text:004027CF                 mov     ebx, [esp+2Ch+arg_4]
.text:004027D3                 mov     edx, [ecx+20h]
.text:004027D6                 mov     edi, [esp+2Ch+arg_0]
.text:004027DA                 mov     ecx, [ebx]
.text:004027DC                 mov     [esp+2Ch+var_2C], edx
.text:004027DF                 mov     [esp+2Ch+var_14], edx
.text:004027E3                 mov     edx, [eax+24h]
.text:004027E6                 mov     [esp+2Ch+var_28], ecx
.text:004027EA                 mov     [esp+2Ch+var_1C], ecx
.text:004027EE                 cmp     ecx, edx
.text:004027F0                 mov     [esp+2Ch+var_18], edx
.text:004027F4                 jle     short loc_402870
.text:004027F6                 mov     esi, [esp+2Ch+var_2C]
.text:004027F9                 cmp     edx, esi
.text:004027FB                 jle     short loc_402870
.text:004027FD                 lea     esi, [esi+0]
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_4027C0+A1↓j
.text:00402800                 mov     ebx, [esp+2Ch+var_1C]
.text:00402804                 mov     edx, [esp+2Ch+var_18]
.text:00402808                 mov     ebp, [esp+2Ch+var_18]
.text:0040280C                 mov     eax, [esp+2Ch+var_14]
.text:00402810                 sub     ebx, edx
.text:00402812                 mov     [esp+2Ch+var_20], ebx
.text:00402816                 sub     ebp, eax
.text:00402818                 cmp     ebx, ebp
.text:0040281A                 jle     short loc_402895
.text:0040281C                 xor     esi, esi
.text:0040281E                 cmp     esi, ebp
.text:00402820                 jge     short loc_40284D
.text:00402822                 mov     ecx, [esp+2Ch+var_1C]
.text:00402826                 sub     ecx, ebp
.text:00402828                 mov     [esp+2Ch+var_24], ecx
.text:0040282C                 lea     esi, [esi+0]
.text:00402830
.text:00402830 loc_402830:                             ; CODE XREF: sub_4027C0+8B↓j
.text:00402830                 mov     ecx, [esp+2Ch+var_14]
.text:00402834                 mov     edx, [esp+2Ch+var_24]
.text:00402838                 add     ecx, esi
.text:0040283A                 add     edx, esi
.text:0040283C                 mov     ebx, [edi+ecx*4]
.text:0040283F                 mov     eax, [edi+edx*4]
.text:00402842                 inc     esi
.text:00402843                 cmp     esi, ebp
.text:00402845                 mov     [edi+ecx*4], eax
.text:00402848                 mov     [edi+edx*4], ebx
.text:0040284B                 jl      short loc_402830
.text:0040284D
.text:0040284D loc_40284D:                             ; CODE XREF: sub_4027C0+60↑j
.text:0040284D                 sub     [esp+2Ch+var_1C], ebp
.text:00402851
.text:00402851 loc_402851:                             ; CODE XREF: sub_4027C0+107↓j
.text:00402851                 mov     eax, [esp+2Ch+var_18]
.text:00402855                 cmp     [esp+2Ch+var_1C], eax
.text:00402859                 jle     short loc_402870
.text:0040285B                 mov     ebp, [esp+2Ch+var_14]
.text:0040285F                 cmp     eax, ebp
.text:00402861                 jg      short loc_402800
.text:00402863                 lea     esi, [esi+0]
.text:00402869                 lea     edi, [edi+0]
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_4027C0+34↑j
.text:00402870                                         ; sub_4027C0+3B↑j ...
.text:00402870                 mov     esi, [esp+2Ch+var_28]
.text:00402874                 mov     ecx, [esp+2Ch+var_18]
.text:00402878                 mov     eax, [esp+2Ch+var_2C]
.text:0040287B                 mov     edi, [esp+2Ch+arg_4]
.text:0040287F                 mov     edx, [esp+2Ch+var_28]
.text:00402883                 sub     esi, ecx
.text:00402885                 add     esi, eax
.text:00402887                 mov     [edi+20h], esi
.text:0040288A                 mov     [edi+24h], edx
.text:0040288D                 add     esp, 1Ch
.text:00402890                 pop     ebx
.text:00402891                 pop     esi
.text:00402892                 pop     edi
.text:00402893                 pop     ebp
.text:00402894                 retn
.text:00402895 ; ---------------------------------------------------------------------------
.text:00402895
.text:00402895 loc_402895:                             ; CODE XREF: sub_4027C0+5A↑j
.text:00402895                 xor     esi, esi
.text:00402897                 cmp     esi, [esp+2Ch+var_20]
.text:0040289B                 jge     short loc_4028BF
.text:0040289D                 lea     esi, [esi+0]
.text:004028A0
.text:004028A0 loc_4028A0:                             ; CODE XREF: sub_4027C0+FD↓j
.text:004028A0                 mov     ebx, [esp+2Ch+var_14]
.text:004028A4                 mov     ebp, [esp+2Ch+var_18]
.text:004028A8                 add     ebx, esi
.text:004028AA                 add     ebp, esi
.text:004028AC                 mov     edx, [edi+ebx*4]
.text:004028AF                 inc     esi
.text:004028B0                 cmp     esi, [esp+2Ch+var_20]
.text:004028B4                 mov     ecx, [edi+ebp*4]
.text:004028B7                 mov     [edi+ebx*4], ecx
.text:004028BA                 mov     [edi+ebp*4], edx
.text:004028BD                 jl      short loc_4028A0
.text:004028BF
.text:004028BF loc_4028BF:                             ; CODE XREF: sub_4027C0+DB↑j
.text:004028BF                 mov     esi, [esp+2Ch+var_20]
.text:004028C3                 add     [esp+2Ch+var_14], esi
.text:004028C7                 jmp     short loc_402851
.text:004028C7 sub_4027C0      endp
.text:004028C7
.text:004028C7 ; ---------------------------------------------------------------------------
.text:004028C9                 align 20h
.text:004028E0                 sub     esp, 0Ch
.text:004028E3                 mov     edx, [esp+14h]
.text:004028E7                 mov     dword ptr [esp+4], 5
.text:004028EF                 mov     [esp+8], edx
.text:004028F3                 mov     edx, [esp+10h]
.text:004028F7                 mov     [esp], edx
.text:004028FA                 call    sub_403A70
.text:004028FF                 add     esp, 0Ch
.text:00402902                 retn
.text:00402902 ; ---------------------------------------------------------------------------
.text:00402903                 align 10h
.text:00402910
.text:00402910 ; =============== S U B R O U T I N E =======================================
.text:00402910
.text:00402910
.text:00402910 ; int __cdecl sub_402910(char *)
.text:00402910 sub_402910      proc near               ; CODE XREF: sub_4013D0+187↑p
.text:00402910
.text:00402910 var_C           = dword ptr -0Ch
.text:00402910 var_8           = dword ptr -8
.text:00402910 var_4           = dword ptr -4
.text:00402910 arg_0           = dword ptr  4
.text:00402910
.text:00402910                 sub     esp, 0Ch
.text:00402913                 mov     edx, [esp+0Ch+arg_0]
.text:00402917                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040291F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00402926                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040292A                 call    sub_403A70
.text:0040292F                 add     esp, 0Ch
.text:00402932                 retn
.text:00402932 sub_402910      endp
.text:00402932
.text:00402932 ; ---------------------------------------------------------------------------
.text:00402933                 align 10h
.text:00402940
.text:00402940 ; =============== S U B R O U T I N E =======================================
.text:00402940
.text:00402940
.text:00402940 ; int __cdecl sub_402940(int, int, char *, int, int)
.text:00402940 sub_402940      proc near               ; CODE XREF: sub_4013D0+C3↑p
.text:00402940                                         ; sub_402AE0+58↓p
.text:00402940
.text:00402940 var_1C          = dword ptr -1Ch
.text:00402940 var_18          = dword ptr -18h
.text:00402940 var_14          = dword ptr -14h
.text:00402940 var_10          = dword ptr -10h
.text:00402940 var_C           = dword ptr -0Ch
.text:00402940 var_8           = dword ptr -8
.text:00402940 var_4           = dword ptr -4
.text:00402940 arg_0           = dword ptr  4
.text:00402940 arg_4           = dword ptr  8
.text:00402940 arg_8           = dword ptr  0Ch
.text:00402940 arg_C           = dword ptr  10h
.text:00402940 arg_10          = dword ptr  14h
.text:00402940
.text:00402940                 sub     esp, 1Ch
.text:00402943                 mov     edx, [esp+1Ch+arg_C]
.text:00402947                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040294F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402953                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040295B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040295F                 mov     edx, [esp+1Ch+arg_4]
.text:00402963                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402967                 mov     ecx, [esp+1Ch+arg_8]
.text:0040296B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040296F                 mov     edx, [esp+1Ch+arg_0]
.text:00402973                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402977                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040297A                 call    sub_4026A0
.text:0040297F                 add     esp, 1Ch
.text:00402982                 retn
.text:00402982 sub_402940      endp
.text:00402982
.text:00402982 ; ---------------------------------------------------------------------------
.text:00402983                 align 10h
.text:00402990                 sub     esp, 2Ch
.text:00402993                 mov     edx, [esp+44h]
.text:00402997                 mov     dword ptr [esp+18h], 0
.text:0040299F                 mov     ecx, [esp+40h]
.text:004029A3                 mov     dword ptr [esp+14h], 0
.text:004029AB                 mov     [esp+1Ch], edx
.text:004029AF                 mov     edx, [esp+3Ch]
.text:004029B3                 mov     [esp+10h], ecx
.text:004029B7                 mov     ecx, [esp+38h]
.text:004029BB                 mov     [esp+0Ch], edx
.text:004029BF                 mov     edx, [esp+34h]
.text:004029C3                 mov     [esp+8], ecx
.text:004029C7                 mov     [esp+4], edx
.text:004029CB                 mov     edx, [esp+30h]
.text:004029CF                 mov     [esp], edx
.text:004029D2                 call    sub_401B10
.text:004029D7                 add     esp, 2Ch
.text:004029DA                 retn
.text:004029DA ; ---------------------------------------------------------------------------
.text:004029DB                 align 10h
.text:004029E0                 sub     esp, 1Ch
.text:004029E3                 mov     edx, [esp+2Ch]
.text:004029E7                 mov     dword ptr [esp+18h], 0
.text:004029EF                 mov     ecx, [esp+30h]
.text:004029F3                 mov     dword ptr [esp+14h], 1
.text:004029FB                 mov     [esp+0Ch], edx
.text:004029FF                 mov     edx, [esp+24h]
.text:00402A03                 mov     [esp+10h], ecx
.text:00402A07                 mov     ecx, [esp+28h]
.text:00402A0B                 mov     [esp+4], edx
.text:00402A0F                 mov     edx, [esp+20h]
.text:00402A13                 mov     [esp+8], ecx
.text:00402A17                 mov     [esp], edx
.text:00402A1A                 call    sub_4026A0
.text:00402A1F                 add     esp, 1Ch
.text:00402A22                 retn
.text:00402A22 ; ---------------------------------------------------------------------------
.text:00402A23                 align 10h
.text:00402A30                 sub     esp, 2Ch
.text:00402A33                 mov     edx, [esp+44h]
.text:00402A37                 mov     dword ptr [esp+18h], 0
.text:00402A3F                 mov     ecx, [esp+40h]
.text:00402A43                 mov     dword ptr [esp+14h], 1
.text:00402A4B                 mov     [esp+1Ch], edx
.text:00402A4F                 mov     edx, [esp+3Ch]
.text:00402A53                 mov     [esp+10h], ecx
.text:00402A57                 mov     ecx, [esp+38h]
.text:00402A5B                 mov     [esp+0Ch], edx
.text:00402A5F                 mov     edx, [esp+34h]
.text:00402A63                 mov     [esp+8], ecx
.text:00402A67                 mov     [esp+4], edx
.text:00402A6B                 mov     edx, [esp+30h]
.text:00402A6F                 mov     [esp], edx
.text:00402A72                 call    sub_401B10
.text:00402A77                 add     esp, 2Ch
.text:00402A7A                 retn
.text:00402A7A ; ---------------------------------------------------------------------------
.text:00402A7B                 align 10h
.text:00402A80 aHelp           db 'help',0             ; DATA XREF: .text:off_402AA0↓o
.text:00402A85 aVersion        db 'version',0          ; DATA XREF: .text:00402AB0↓o
.text:00402A8D                 align 20h
.text:00402AA0 off_402AA0      dd offset aHelp         ; DATA XREF: sub_402AE0+3D↓o
.text:00402AA0                                         ; "help"
.text:00402AA4                 dd 2 dup(0)
.text:00402AAC                 dd 68h
.text:00402AB0                 dd offset aVersion      ; "version"
.text:00402AB4                 dd 2 dup(0)
.text:00402ABC                 dd 76h, 4 dup(0)
.text:00402AD0 ; ---------------------------------------------------------------------------
.text:00402AD0
.text:00402AD0 loc_402AD0:                             ; DATA XREF: sub_402AE0+45↓o
.text:00402AD0                 sub     eax, [eax]
.text:00402AD2                 lea     esi, [esi+0]
.text:00402AD9                 lea     edi, [edi+0]
.text:00402AE0
.text:00402AE0 ; =============== S U B R O U T I N E =======================================
.text:00402AE0
.text:00402AE0
.text:00402AE0 ; int __cdecl sub_402AE0(int, int, FILE *, int, int, int, char)
.text:00402AE0 sub_402AE0      proc near               ; CODE XREF: sub_4013D0+9F↑p
.text:00402AE0
.text:00402AE0 Code            = dword ptr -1Ch
.text:00402AE0 var_18          = dword ptr -18h
.text:00402AE0 var_14          = dword ptr -14h
.text:00402AE0 var_10          = dword ptr -10h
.text:00402AE0 var_C           = dword ptr -0Ch
.text:00402AE0 var_4           = dword ptr -4
.text:00402AE0 arg_0           = dword ptr  4
.text:00402AE0 arg_4           = dword ptr  8
.text:00402AE0 arg_8           = dword ptr  0Ch
.text:00402AE0 arg_C           = dword ptr  10h
.text:00402AE0 arg_10          = dword ptr  14h
.text:00402AE0 arg_14          = dword ptr  18h
.text:00402AE0 arg_18          = byte ptr  1Ch
.text:00402AE0
.text:00402AE0                 sub     esp, 1Ch
.text:00402AE3                 xor     eax, eax
.text:00402AE5                 cmp     [esp+1Ch+arg_0], 2
.text:00402AEA                 mov     [esp+1Ch+var_4], ebx
.text:00402AEE                 mov     ebx, dword_406014
.text:00402AF4                 mov     dword_406014, eax
.text:00402AF9                 jz      short loc_402B11
.text:00402AFB
.text:00402AFB loc_402AFB:                             ; CODE XREF: sub_402AE0+60↓j
.text:00402AFB                                         ; sub_402AE0+6A↓j
.text:00402AFB                 mov     dword_406014, ebx
.text:00402B01                 xor     edx, edx
.text:00402B03                 mov     ebx, [esp+1Ch+var_4]
.text:00402B07                 mov     dword_406010, edx
.text:00402B0D                 add     esp, 1Ch
.text:00402B10                 retn
.text:00402B11 ; ---------------------------------------------------------------------------
.text:00402B11
.text:00402B11 loc_402B11:                             ; CODE XREF: sub_402AE0+19↑j
.text:00402B11                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402B19                 mov     edx, [esp+1Ch+arg_4]
.text:00402B1D                 mov     [esp+1Ch+var_10], offset off_402AA0 ; int
.text:00402B25                 mov     [esp+1Ch+var_14], offset loc_402AD0 ; char *
.text:00402B2D                 mov     [esp+1Ch+var_18], edx ; int
.text:00402B31                 mov     [esp+1Ch+Code], 2 ; int
.text:00402B38                 call    sub_402940
.text:00402B3D                 cmp     eax, 0FFFFFFFFh
.text:00402B40                 jz      short loc_402AFB
.text:00402B42                 cmp     eax, 68h ; 'h'
.text:00402B45                 jz      short loc_402B4E
.text:00402B47                 cmp     eax, 76h ; 'v'
.text:00402B4A                 jnz     short loc_402AFB
.text:00402B4C                 jmp     short loc_402B59
.text:00402B4E ; ---------------------------------------------------------------------------
.text:00402B4E
.text:00402B4E loc_402B4E:                             ; CODE XREF: sub_402AE0+65↑j
.text:00402B4E                 mov     [esp+1Ch+Code], 0
.text:00402B55                 call    [esp+1Ch+arg_14]
.text:00402B59
.text:00402B59 loc_402B59:                             ; CODE XREF: sub_402AE0+6C↑j
.text:00402B59                 mov     ecx, [esp+1Ch+arg_10]
.text:00402B5D                 lea     ebx, [esp+1Ch+arg_18]
.text:00402B61                 mov     edx, [esp+1Ch+arg_C]
.text:00402B65                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00402B69                 mov     ebx, [esp+1Ch+arg_8]
.text:00402B6D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00402B71                 mov     ecx, ds:_iob
.text:00402B77                 mov     [esp+1Ch+var_14], edx ; int
.text:00402B7B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:00402B7F                 add     ecx, 20h ; ' '
.text:00402B82                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00402B85                 call    sub_404340
.text:00402B8A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402B91                 call    exit
.text:00402B91 sub_402AE0      endp
.text:00402B91
.text:00402B91 ; ---------------------------------------------------------------------------
.text:00402B96                 align 10h
.text:00402BA0                 mov     edx, [esp+4]
.text:00402BA4                 mov     ds:dword_407030, edx
.text:00402BAA                 retn
.text:00402BAA ; ---------------------------------------------------------------------------
.text:00402BAB aWriteError     db 'write error',0      ; DATA XREF: sub_402BD0:loc_402C19↓o
.text:00402BB7 ; const char aSS[]
.text:00402BB7 aSS             db '%s: %s',0           ; DATA XREF: sub_402BD0+77↓o
.text:00402BBE ; const char aS_2[]
.text:00402BBE aS_2            db '%s',0               ; DATA XREF: sub_402BD0+A0↓o
.text:00402BC1 ; ---------------------------------------------------------------------------
.text:00402BC1                 jmp     short sub_402BD0
.text:00402BC1 ; ---------------------------------------------------------------------------
.text:00402BC3                 align 10h
.text:00402BD0
.text:00402BD0 ; =============== S U B R O U T I N E =======================================
.text:00402BD0
.text:00402BD0
.text:00402BD0 ; void __cdecl sub_402BD0()
.text:00402BD0 sub_402BD0      proc near               ; CODE XREF: .text:00402BC1↑j
.text:00402BD0                                         ; DATA XREF: sub_4013D0+5C↑o
.text:00402BD0
.text:00402BD0 Stream          = dword ptr -2Ch
.text:00402BD0 ErrorMessage    = dword ptr -28h
.text:00402BD0 var_24          = dword ptr -24h
.text:00402BD0 var_20          = byte ptr -20h
.text:00402BD0 var_1C          = dword ptr -1Ch
.text:00402BD0 var_9           = byte ptr -9
.text:00402BD0
.text:00402BD0                 push    esi
.text:00402BD1                 push    ebx
.text:00402BD2                 sub     esp, 24h
.text:00402BD5                 mov     edx, ds:_iob
.text:00402BDB                 mov     ecx, [edx+2Ch]
.text:00402BDE                 lea     esi, [edx+20h]
.text:00402BE1                 shr     ecx, 5
.text:00402BE4                 mov     bl, cl
.text:00402BE6                 mov     ecx, [edx+20h]
.text:00402BE9                 and     bl, 1
.text:00402BEC                 cmp     ecx, [esi+8]
.text:00402BEF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402BF2                 setz    [esp+2Ch+var_9]
.text:00402BF7                 call    fclose
.text:00402BFC                 test    eax, eax
.text:00402BFE                 setnz   al
.text:00402C01                 test    bl, bl
.text:00402C03                 jnz     loc_402C93
.text:00402C09                 test    al, al
.text:00402C0B                 jz      short loc_402C60
.text:00402C0D
.text:00402C0D loc_402C0D:                             ; CODE XREF: sub_402BD0+CD↓j
.text:00402C0D                 call    _errno
.text:00402C12                 mov     esi, [eax]
.text:00402C14
.text:00402C14 loc_402C14:                             ; CODE XREF: sub_402BD0+C7↓j
.text:00402C14                 cmp     esi, 9
.text:00402C17                 jz      short loc_402C86
.text:00402C19
.text:00402C19 loc_402C19:                             ; CODE XREF: sub_402BD0+B8↓j
.text:00402C19                                         ; sub_402BD0+C1↓j
.text:00402C19                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402C20                 call    ds:libintl_gettext
.text:00402C26                 mov     ebx, eax
.text:00402C28                 mov     eax, ds:dword_407030
.text:00402C2D                 test    eax, eax
.text:00402C2F                 jz      short loc_402C66
.text:00402C31                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402C34                 call    sub_403DE0
.text:00402C39                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402C3D                 mov     edx, Code
.text:00402C43                 mov     [esp+2Ch+var_1C], ebx
.text:00402C47                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:00402C4F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402C53                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402C56                 call    sub_4048D0
.text:00402C5B                 nop
.text:00402C5C                 lea     esi, [esi+0]
.text:00402C60
.text:00402C60 loc_402C60:                             ; CODE XREF: sub_402BD0+3B↑j
.text:00402C60                                         ; sub_402BD0+B4↓j ...
.text:00402C60                 add     esp, 24h
.text:00402C63                 pop     ebx
.text:00402C64                 pop     esi
.text:00402C65                 retn
.text:00402C66 ; ---------------------------------------------------------------------------
.text:00402C66
.text:00402C66 loc_402C66:                             ; CODE XREF: sub_402BD0+5F↑j
.text:00402C66                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402C6A                 mov     ebx, Code
.text:00402C70                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00402C78                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402C7C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402C7F                 call    sub_4048D0
.text:00402C84                 jmp     short loc_402C60
.text:00402C86 ; ---------------------------------------------------------------------------
.text:00402C86
.text:00402C86 loc_402C86:                             ; CODE XREF: sub_402BD0+47↑j
.text:00402C86                 test    bl, bl
.text:00402C88                 jnz     short loc_402C19
.text:00402C8A                 cmp     [esp+2Ch+var_9], 0
.text:00402C8F                 jnz     short loc_402C60
.text:00402C91                 jmp     short loc_402C19
.text:00402C93 ; ---------------------------------------------------------------------------
.text:00402C93
.text:00402C93 loc_402C93:                             ; CODE XREF: sub_402BD0+33↑j
.text:00402C93                 xor     esi, esi
.text:00402C95                 test    al, al
.text:00402C97                 jz      loc_402C14
.text:00402C9D                 jmp     loc_402C0D
.text:00402C9D sub_402BD0      endp
.text:00402C9D
.text:00402C9D ; ---------------------------------------------------------------------------
.text:00402CA2                 align 10h
.text:00402CB0 aLiteral        db 'literal',0          ; DATA XREF: .text:00402CF0↓o
.text:00402CB8 aShell          db 'shell',0            ; DATA XREF: .text:00402CF4↓o
.text:00402CBE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00402CF8↓o
.text:00402CCB aC              db 'c',0
.text:00402CCD aEscape         db 'escape',0           ; DATA XREF: .text:00402D00↓o
.text:00402CD4 aLocale         db 'locale',0           ; DATA XREF: .text:00402D04↓o
.text:00402CDB aClocale        db 'clocale',0          ; DATA XREF: .text:00402D08↓o
.text:00402CE3                 align 10h
.text:00402CF0                 dd offset aLiteral      ; "literal"
.text:00402CF4                 dd offset aShell        ; "shell"
.text:00402CF8                 dd offset aShellAlways  ; "shell-always"
.text:00402CFC ; ---------------------------------------------------------------------------
.text:00402CFC                 retf
.text:00402CFC ; ---------------------------------------------------------------------------
.text:00402CFD                 db 2Ch, 40h, 0
.text:00402D00                 dd offset aEscape       ; "escape"
.text:00402D04                 dd offset aLocale       ; "locale"
.text:00402D08                 dd offset aClocale      ; "clocale"
.text:00402D0C                 dd 2 dup(0)
.text:00402D14                 dd 1, 2, 3, 4, 5, 6
.text:00402D2C asc_402D2C:                             ; DATA XREF: sub_402D40+7E↓o
.text:00402D2C                                         ; sub_402D40+A39↓o ...
.text:00402D2C                 text "UTF-16LE", '"',27h,'`'
.text:00402D32                 align 10h
.text:00402D40
.text:00402D40 ; =============== S U B R O U T I N E =======================================
.text:00402D40
.text:00402D40
.text:00402D40 ; int __cdecl sub_402D40(int, int, char *Str, int, int, int)
.text:00402D40 sub_402D40      proc near               ; CODE XREF: sub_402D40+43A↓p
.text:00402D40                                         ; .text:00403903↓p ...
.text:00402D40
.text:00402D40 C               = dword ptr -4Ch
.text:00402D40 Type            = dword ptr -48h
.text:00402D40 SizeInBytes     = dword ptr -44h
.text:00402D40 State           = dword ptr -40h
.text:00402D40 var_3C          = dword ptr -3Ch
.text:00402D40 var_38          = dword ptr -38h
.text:00402D40 var_34          = dword ptr -34h
.text:00402D40 var_30          = dword ptr -30h
.text:00402D40 var_29          = byte ptr -29h
.text:00402D40 var_28          = dword ptr -28h
.text:00402D40 var_22          = byte ptr -22h
.text:00402D40 var_21          = byte ptr -21h
.text:00402D40 var_20          = dword ptr -20h
.text:00402D40 var_1C          = dword ptr -1Ch
.text:00402D40 var_18          = mbstate_t ptr -18h
.text:00402D40 arg_0           = dword ptr  4
.text:00402D40 arg_4           = dword ptr  8
.text:00402D40 Str             = dword ptr  0Ch
.text:00402D40 arg_C           = dword ptr  10h
.text:00402D40 arg_10          = dword ptr  14h
.text:00402D40 arg_14          = dword ptr  18h
.text:00402D40
.text:00402D40                 push    ebp
.text:00402D41                 push    edi
.text:00402D42                 push    esi
.text:00402D43                 push    ebx
.text:00402D44                 sub     esp, 3Ch
.text:00402D47                 mov     edx, ds:__mb_cur_max
.text:00402D4D                 mov     [esp+4Ch+var_34], 0
.text:00402D55                 mov     [esp+4Ch+var_1C], 0
.text:00402D5D                 cmp     dword ptr [edx], 1
.text:00402D60                 mov     [esp+4Ch+var_20], 0
.text:00402D68                 mov     [esp+4Ch+var_21], 0
.text:00402D6D                 setz    [esp+4Ch+var_22]
.text:00402D72                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00402D77                 ja      short def_402D7D ; jumptable 00402D7D default case, cases 0,1
.text:00402D79                 mov     edx, [esp+4Ch+arg_10]
.text:00402D7D                 jmp     ds:jpt_402D7D[edx*4] ; switch jump
.text:00402D7D ; ---------------------------------------------------------------------------
.text:00402D84 jpt_402D7D      dd offset def_402D7D    ; DATA XREF: sub_402D40+3D↑r
.text:00402D84                 dd offset def_402D7D    ; jump table for switch statement
.text:00402D84                 dd offset loc_4036C5
.text:00402D84                 dd offset loc_402DA0
.text:00402D84                 dd offset loc_4036EB
.text:00402D84                 dd offset loc_4036F5
.text:00402D84                 dd offset loc_4036F5
.text:00402DA0 ; ---------------------------------------------------------------------------
.text:00402DA0
.text:00402DA0 loc_402DA0:                             ; CODE XREF: sub_402D40+3D↑j
.text:00402DA0                                         ; DATA XREF: sub_402D40:jpt_402D7D↑o
.text:00402DA0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00402D7D case 3
.text:00402DA4                 cmp     [esp+4Ch+var_34], eax
.text:00402DA8                 jnb     short loc_402DB1
.text:00402DAA                 mov     ebx, [esp+4Ch+arg_0]
.text:00402DAE                 mov     byte ptr [ebx], 22h ; '"'
.text:00402DB1
.text:00402DB1 loc_402DB1:                             ; CODE XREF: sub_402D40+68↑j
.text:00402DB1                 mov     [esp+4Ch+var_34], 1
.text:00402DB9                 mov     [esp+4Ch+var_21], 1
.text:00402DBE                 mov     [esp+4Ch+var_1C], offset asc_402D2C ; "\"'`"
.text:00402DC6
.text:00402DC6 loc_402DC6:                             ; CODE XREF: sub_402D40+9A6↓j
.text:00402DC6                 mov     [esp+4Ch+var_20], 1
.text:00402DCE
.text:00402DCE def_402D7D:                             ; CODE XREF: sub_402D40+37↑j
.text:00402DCE                                         ; sub_402D40+3D↑j ...
.text:00402DCE                 xor     ebp, ebp        ; jumptable 00402D7D default case, cases 0,1
.text:00402DD0
.text:00402DD0 loc_402DD0:                             ; CODE XREF: sub_402D40+3DB↓j
.text:00402DD0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00402DD5                 jz      loc_4036B7
.text:00402DDB                 cmp     ebp, [esp+4Ch+arg_C]
.text:00402DDF
.text:00402DDF loc_402DDF:                             ; CODE XREF: sub_402D40+980↓j
.text:00402DDF                 jz      loc_40364E
.text:00402DE5                 cmp     [esp+4Ch+var_21], 0
.text:00402DEA                 jz      short loc_402E30
.text:00402DEC                 mov     esi, [esp+4Ch+var_20]
.text:00402DF0                 test    esi, esi
.text:00402DF2                 jz      short loc_402E30
.text:00402DF4                 mov     ecx, [esp+4Ch+var_20]
.text:00402DF8                 lea     edi, [ecx+ebp]
.text:00402DFB                 cmp     edi, [esp+4Ch+arg_C]
.text:00402DFF                 ja      short loc_402E30
.text:00402E01                 cld
.text:00402E02                 mov     ebx, [esp+4Ch+Str]
.text:00402E06                 mov     edi, [esp+4Ch+var_1C]
.text:00402E0A                 add     ebx, ebp
.text:00402E0C                 mov     esi, ebx
.text:00402E0E                 cmp     ecx, ecx
.text:00402E10                 repe cmpsb
.text:00402E12                 jnz     short loc_402E30
.text:00402E14                 mov     edx, [esp+4Ch+arg_4]
.text:00402E18                 cmp     [esp+4Ch+var_34], edx
.text:00402E1C                 jnb     short loc_402E2A
.text:00402E1E                 mov     ecx, [esp+4Ch+arg_0]
.text:00402E22                 mov     eax, [esp+4Ch+var_34]
.text:00402E26                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00402E2A
.text:00402E2A loc_402E2A:                             ; CODE XREF: sub_402D40+DC↑j
.text:00402E2A                 inc     [esp+4Ch+var_34]
.text:00402E2E                 mov     esi, esi
.text:00402E30
.text:00402E30 loc_402E30:                             ; CODE XREF: sub_402D40+AA↑j
.text:00402E30                                         ; sub_402D40+B2↑j ...
.text:00402E30                 mov     edi, [esp+4Ch+Str]
.text:00402E34                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00402E39                 movzx   eax, bl
.text:00402E3C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00402E3F                 ja      def_402E45      ; jumptable 00402E45 default case, cases 1-6,14-31,64
.text:00402E45                 jmp     ds:jpt_402E45[eax*4] ; switch jump
.text:00402E45 ; ---------------------------------------------------------------------------
.text:00402E4C jpt_402E45      dd offset loc_403048, offset def_402E45, offset def_402E45
.text:00402E4C                                         ; DATA XREF: sub_402D40+105↑r
.text:00402E4C                 dd offset def_402E45, offset def_402E45, offset def_402E45 ; jump table for switch statement
.text:00402E4C                 dd offset def_402E45, offset loc_403120, offset loc_40313E
.text:00402E4C                 dd offset loc_403142, offset loc_403187, offset loc_40318B
.text:00402E4C                 dd offset loc_40318F, offset loc_403193, offset def_402E45
.text:00402E4C                 dd offset def_402E45, offset def_402E45, offset def_402E45
.text:00402E4C                 dd offset def_402E45, offset def_402E45, offset def_402E45
.text:00402E4C                 dd offset def_402E45, offset def_402E45, offset def_402E45
.text:00402E4C                 dd offset def_402E45, offset def_402E45, offset def_402E45
.text:00402E4C                 dd offset def_402E45, offset def_402E45, offset def_402E45
.text:00402E4C                 dd offset def_402E45, offset def_402E45, offset loc_403618
.text:00402E4C                 dd offset loc_403618, offset loc_403618, offset loc_40363A
.text:00402E4C                 dd offset loc_403618, offset def_403242, offset loc_403618
.text:00402E4C                 dd offset loc_403197, offset loc_403618, offset loc_403618
.text:00402E4C                 dd offset loc_403618, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset loc_403618
.text:00402E4C                 dd offset loc_403618, offset loc_403618, offset loc_403618
.text:00402E4C                 dd offset loc_4031FC, offset def_402E45, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset loc_403618, offset loc_403611
.text:00402E4C                 dd offset def_403242, offset loc_403618, offset def_403242
.text:00402E4C                 dd offset loc_403618, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset def_403242, offset def_403242, offset def_403242
.text:00402E4C                 dd offset loc_403628, offset loc_403618, offset loc_403628
.text:00402E4C                 dd offset loc_40363A
.text:00403048 ; ---------------------------------------------------------------------------
.text:00403048
.text:00403048 loc_403048:                             ; CODE XREF: sub_402D40+105↑j
.text:00403048                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:00403048                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402E45 case 0
.text:0040304D                 lea     eax, [ebp+1]
.text:00403050                 jz      loc_403100
.text:00403056                 mov     esi, [esp+4Ch+arg_4]
.text:0040305A                 cmp     [esp+4Ch+var_34], esi
.text:0040305E                 jnb     short loc_40306C
.text:00403060                 mov     eax, [esp+4Ch+arg_0]
.text:00403064                 mov     ebx, [esp+4Ch+var_34]
.text:00403068                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040306C
.text:0040306C loc_40306C:                             ; CODE XREF: sub_402D40+31E↑j
.text:0040306C                 inc     [esp+4Ch+var_34]
.text:00403070                 mov     edx, [esp+4Ch+arg_4]
.text:00403074                 cmp     [esp+4Ch+var_34], edx
.text:00403078                 jnb     short loc_403086
.text:0040307A                 mov     edi, [esp+4Ch+arg_0]
.text:0040307E                 mov     ecx, [esp+4Ch+var_34]
.text:00403082                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403086
.text:00403086 loc_403086:                             ; CODE XREF: sub_402D40+338↑j
.text:00403086                 inc     [esp+4Ch+var_34]
.text:0040308A                 mov     esi, [esp+4Ch+arg_4]
.text:0040308E                 cmp     [esp+4Ch+var_34], esi
.text:00403092                 jnb     short loc_4030A0
.text:00403094                 mov     ebx, [esp+4Ch+arg_0]
.text:00403098                 mov     eax, [esp+4Ch+var_34]
.text:0040309C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004030A0
.text:004030A0 loc_4030A0:                             ; CODE XREF: sub_402D40+352↑j
.text:004030A0                 inc     [esp+4Ch+var_34]
.text:004030A4                 mov     bl, 30h ; '0'
.text:004030A6                 lea     esi, [esi+0]
.text:004030A9                 lea     edi, [edi+0]
.text:004030B0
.text:004030B0 def_403242:                             ; CODE XREF: sub_402D40+105↑j
.text:004030B0                                         ; sub_402D40+463↓j ...
.text:004030B0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402E45 cases 37,43-58,65-90,93,95,97-122
.text:004030B0                                         ; jumptable 00403242 default case, cases 34-38,42-44,46,48-59
.text:004030B5                 lea     eax, [ebp+1]
.text:004030B8                 jz      short loc_403100
.text:004030BA                 mov     cl, bl
.text:004030BC                 mov     edi, [esp+4Ch+arg_14]
.text:004030C0                 mov     esi, 1
.text:004030C5                 shr     cl, 5
.text:004030C8                 movzx   edx, cl
.text:004030CB                 mov     ecx, ebx
.text:004030CD                 and     ecx, 1Fh
.text:004030D0                 shl     esi, cl
.text:004030D2                 test    [edi+edx*4+4], esi
.text:004030D6                 jz      short loc_4030F2
.text:004030D8
.text:004030D8 loc_4030D8:                             ; CODE XREF: sub_402D40+3FC↓j
.text:004030D8                 mov     edx, [esp+4Ch+arg_4]
.text:004030DC                 cmp     [esp+4Ch+var_34], edx
.text:004030E0                 jnb     short loc_4030EE
.text:004030E2                 mov     edi, [esp+4Ch+arg_0]
.text:004030E6                 mov     esi, [esp+4Ch+var_34]
.text:004030EA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004030EE
.text:004030EE loc_4030EE:                             ; CODE XREF: sub_402D40+3A0↑j
.text:004030EE                 inc     [esp+4Ch+var_34]
.text:004030F2
.text:004030F2 loc_4030F2:                             ; CODE XREF: sub_402D40+396↑j
.text:004030F2                 lea     eax, [ebp+1]
.text:004030F5                 lea     esi, [esi+0]
.text:004030F9                 lea     edi, [edi+0]
.text:00403100
.text:00403100 loc_403100:                             ; CODE XREF: sub_402D40+310↑j
.text:00403100                                         ; sub_402D40+378↑j ...
.text:00403100                 mov     ebp, [esp+4Ch+arg_4]
.text:00403104                 cmp     [esp+4Ch+var_34], ebp
.text:00403108                 jnb     short loc_403115
.text:0040310A                 mov     edx, [esp+4Ch+arg_0]
.text:0040310E                 mov     ecx, [esp+4Ch+var_34]
.text:00403112                 mov     [ecx+edx], bl
.text:00403115
.text:00403115 loc_403115:                             ; CODE XREF: sub_402D40+3C8↑j
.text:00403115                 inc     [esp+4Ch+var_34]
.text:00403119                 mov     ebp, eax
.text:0040311B                 jmp     loc_402DD0
.text:00403120 ; ---------------------------------------------------------------------------
.text:00403120
.text:00403120 loc_403120:                             ; CODE XREF: sub_402D40+105↑j
.text:00403120                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:00403120                 mov     dl, 61h ; 'a'   ; jumptable 00402E45 case 7
.text:00403122                 lea     esi, [esi+0]
.text:00403129                 lea     edi, [edi+0]
.text:00403130
.text:00403130 loc_403130:                             ; CODE XREF: sub_402D40+400↓j
.text:00403130                                         ; sub_402D40+409↓j ...
.text:00403130                 cmp     [esp+4Ch+var_21], 0
.text:00403135                 lea     eax, [ebp+1]
.text:00403138                 jz      short loc_403100
.text:0040313A                 mov     bl, dl
.text:0040313C                 jmp     short loc_4030D8
.text:0040313E ; ---------------------------------------------------------------------------
.text:0040313E
.text:0040313E loc_40313E:                             ; CODE XREF: sub_402D40+105↑j
.text:0040313E                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:0040313E                 mov     dl, 62h ; 'b'   ; jumptable 00402E45 case 8
.text:00403140                 jmp     short loc_403130
.text:00403142 ; ---------------------------------------------------------------------------
.text:00403142
.text:00403142 loc_403142:                             ; CODE XREF: sub_402D40+105↑j
.text:00403142                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:00403142                 mov     dl, 74h ; 't'   ; jumptable 00402E45 case 9
.text:00403144
.text:00403144 loc_403144:                             ; CODE XREF: sub_402D40+449↓j
.text:00403144                                         ; sub_402D40+455↓j ...
.text:00403144                 cmp     [esp+4Ch+arg_10], 1
.text:00403149                 jnz     short loc_403130
.text:0040314B
.text:0040314B loc_40314B:                             ; CODE XREF: sub_402D40+45C↓j
.text:0040314B                                         ; sub_402D40+4C1↓j ...
.text:0040314B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403512 cases 91,92,94,96,124
.text:00403153                 mov     eax, [esp+4Ch+arg_14]
.text:00403157                 mov     edx, [esp+4Ch+arg_C]
.text:0040315B                 mov     ecx, [esp+4Ch+Str]
.text:0040315F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403163                 mov     [esp+4Ch+var_38], eax ; int
.text:00403167                 mov     ebp, [esp+4Ch+arg_0]
.text:0040316B                 mov     [esp+4Ch+State], edx ; int
.text:0040316F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403173                 mov     [esp+4Ch+Type], ebx ; int
.text:00403177                 mov     [esp+4Ch+C], ebp ; int
.text:0040317A                 call    sub_402D40
.text:0040317F
.text:0040317F loc_40317F:                             ; CODE XREF: sub_402D40+972↓j
.text:0040317F                 add     esp, 3Ch
.text:00403182                 pop     ebx
.text:00403183                 pop     esi
.text:00403184                 pop     edi
.text:00403185                 pop     ebp
.text:00403186                 retn
.text:00403187 ; ---------------------------------------------------------------------------
.text:00403187
.text:00403187 loc_403187:                             ; CODE XREF: sub_402D40+105↑j
.text:00403187                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:00403187                 mov     dl, 6Eh ; 'n'   ; jumptable 00402E45 case 10
.text:00403189                 jmp     short loc_403144
.text:0040318B ; ---------------------------------------------------------------------------
.text:0040318B
.text:0040318B loc_40318B:                             ; CODE XREF: sub_402D40+105↑j
.text:0040318B                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:0040318B                 mov     dl, 76h ; 'v'   ; jumptable 00402E45 case 11
.text:0040318D                 jmp     short loc_403130
.text:0040318F ; ---------------------------------------------------------------------------
.text:0040318F
.text:0040318F loc_40318F:                             ; CODE XREF: sub_402D40+105↑j
.text:0040318F                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:0040318F                 mov     dl, 66h ; 'f'   ; jumptable 00402E45 case 12
.text:00403191                 jmp     short loc_403130
.text:00403193 ; ---------------------------------------------------------------------------
.text:00403193
.text:00403193 loc_403193:                             ; CODE XREF: sub_402D40+105↑j
.text:00403193                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:00403193                 mov     dl, 72h ; 'r'   ; jumptable 00402E45 case 13
.text:00403195                 jmp     short loc_403144
.text:00403197 ; ---------------------------------------------------------------------------
.text:00403197
.text:00403197 loc_403197:                             ; CODE XREF: sub_402D40+105↑j
.text:00403197                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:00403197                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402E45 case 39
.text:0040319C                 jz      short loc_40314B ; jumptable 00403512 cases 91,92,94,96,124
.text:0040319E                 cmp     [esp+4Ch+arg_10], 2
.text:004031A3                 jnz     def_403242      ; jumptable 00402E45 cases 37,43-58,65-90,93,95,97-122
.text:004031A3                                         ; jumptable 00403242 default case, cases 34-38,42-44,46,48-59
.text:004031A9                 mov     edx, [esp+4Ch+arg_4]
.text:004031AD                 cmp     [esp+4Ch+var_34], edx
.text:004031B1                 jnb     short loc_4031BF
.text:004031B3                 mov     ecx, [esp+4Ch+arg_0]
.text:004031B7                 mov     edi, [esp+4Ch+var_34]
.text:004031BB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004031BF
.text:004031BF loc_4031BF:                             ; CODE XREF: sub_402D40+471↑j
.text:004031BF                 inc     [esp+4Ch+var_34]
.text:004031C3                 mov     eax, [esp+4Ch+arg_4]
.text:004031C7                 cmp     [esp+4Ch+var_34], eax
.text:004031CB                 jnb     short loc_4031D9
.text:004031CD                 mov     esi, [esp+4Ch+arg_0]
.text:004031D1                 mov     edx, [esp+4Ch+var_34]
.text:004031D5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004031D9
.text:004031D9 loc_4031D9:                             ; CODE XREF: sub_402D40+48B↑j
.text:004031D9                 inc     [esp+4Ch+var_34]
.text:004031DD                 mov     edi, [esp+4Ch+arg_4]
.text:004031E1                 cmp     [esp+4Ch+var_34], edi
.text:004031E5                 jnb     short loc_4031F3
.text:004031E7                 mov     ecx, [esp+4Ch+arg_0]
.text:004031EB                 mov     eax, [esp+4Ch+var_34]
.text:004031EF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004031F3
.text:004031F3 loc_4031F3:                             ; CODE XREF: sub_402D40+4A5↑j
.text:004031F3                                         ; sub_402D40+5C4↓j ...
.text:004031F3                 inc     [esp+4Ch+var_34]
.text:004031F7                 jmp     def_403242      ; jumptable 00402E45 cases 37,43-58,65-90,93,95,97-122
.text:004031F7                                         ; jumptable 00403242 default case, cases 34-38,42-44,46,48-59
.text:004031FC ; ---------------------------------------------------------------------------
.text:004031FC
.text:004031FC loc_4031FC:                             ; CODE XREF: sub_402D40+105↑j
.text:004031FC                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:004031FC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402E45 case 63
.text:00403201                 jz      loc_40314B      ; jumptable 00403512 cases 91,92,94,96,124
.text:00403207                 cmp     [esp+4Ch+arg_10], 3
.text:0040320C                 jnz     def_403242      ; jumptable 00402E45 cases 37,43-58,65-90,93,95,97-122
.text:0040320C                                         ; jumptable 00403242 default case, cases 34-38,42-44,46,48-59
.text:00403212                 lea     edx, [ebp+2]
.text:00403215                 cmp     edx, [esp+4Ch+arg_C]
.text:00403219                 jnb     def_403242      ; jumptable 00402E45 cases 37,43-58,65-90,93,95,97-122
.text:00403219                                         ; jumptable 00403242 default case, cases 34-38,42-44,46,48-59
.text:0040321F                 mov     esi, [esp+4Ch+Str]
.text:00403223                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403228                 jnz     def_403242      ; jumptable 00402E45 cases 37,43-58,65-90,93,95,97-122
.text:00403228                                         ; jumptable 00403242 default case, cases 34-38,42-44,46,48-59
.text:0040322E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403233                 movsx   eax, cl
.text:00403236                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403239                 cmp     eax, 1Dh
.text:0040323C                 ja      def_403242      ; jumptable 00402E45 cases 37,43-58,65-90,93,95,97-122
.text:0040323C                                         ; jumptable 00403242 default case, cases 34-38,42-44,46,48-59
.text:00403242                 jmp     ds:jpt_403242[eax*4] ; switch jump
.text:00403242 ; ---------------------------------------------------------------------------
.text:00403249                 align 4
.text:0040324C jpt_403242      dd offset loc_4032C4    ; DATA XREF: sub_402D40+502↑r
.text:0040324C                 dd offset def_403242    ; jump table for switch statement
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset loc_4032C4
.text:0040324C                 dd offset loc_4032C4
.text:0040324C                 dd offset loc_4032C4
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset loc_4032C4
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset loc_4032C4
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset def_403242
.text:0040324C                 dd offset loc_4032C4
.text:0040324C                 dd offset loc_4032C4
.text:0040324C                 dd offset loc_4032C4
.text:004032C4 ; ---------------------------------------------------------------------------
.text:004032C4
.text:004032C4 loc_4032C4:                             ; CODE XREF: sub_402D40+502↑j
.text:004032C4                                         ; DATA XREF: sub_402D40:jpt_403242↑o
.text:004032C4                 mov     ebp, edx        ; jumptable 00403242 cases 33,39-41,45,47,60-62
.text:004032C6                 mov     bl, cl
.text:004032C8                 mov     edx, [esp+4Ch+arg_4]
.text:004032CC                 cmp     [esp+4Ch+var_34], edx
.text:004032D0                 jnb     short loc_4032DE
.text:004032D2                 mov     ecx, [esp+4Ch+arg_0]
.text:004032D6                 mov     edi, [esp+4Ch+var_34]
.text:004032DA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004032DE
.text:004032DE loc_4032DE:                             ; CODE XREF: sub_402D40+590↑j
.text:004032DE                 inc     [esp+4Ch+var_34]
.text:004032E2                 mov     eax, [esp+4Ch+arg_4]
.text:004032E6                 cmp     [esp+4Ch+var_34], eax
.text:004032EA                 jnb     short loc_4032F8
.text:004032EC                 mov     edx, [esp+4Ch+arg_0]
.text:004032F0                 mov     esi, [esp+4Ch+var_34]
.text:004032F4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004032F8
.text:004032F8 loc_4032F8:                             ; CODE XREF: sub_402D40+5AA↑j
.text:004032F8                 inc     [esp+4Ch+var_34]
.text:004032FC                 mov     edi, [esp+4Ch+arg_4]
.text:00403300                 cmp     [esp+4Ch+var_34], edi
.text:00403304                 jnb     loc_4031F3
.text:0040330A                 mov     eax, [esp+4Ch+arg_0]
.text:0040330E                 mov     ecx, [esp+4Ch+var_34]
.text:00403312                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403316                 jmp     loc_4031F3
.text:00403316 ; ---------------------------------------------------------------------------
.text:0040331B                 align 10h
.text:00403320
.text:00403320 def_402E45:                             ; CODE XREF: sub_402D40+FF↑j
.text:00403320                                         ; sub_402D40+105↑j
.text:00403320                                         ; DATA XREF: ...
.text:00403320                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00402E45 default case, cases 1-6,14-31,64
.text:00403325                 jz      loc_403450
.text:0040332B                 mov     [esp+4Ch+var_28], 1
.text:00403333                 mov     esi, ds:__mb_cur_max
.text:00403339                 movzx   edx, bl
.text:0040333C                 cmp     dword ptr [esi], 1
.text:0040333F                 jz      loc_403434
.text:00403345                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040334D                 mov     [esp+4Ch+C], edx ; C
.text:00403350                 call    _isctype
.text:00403355
.text:00403355 loc_403355:                             ; CODE XREF: sub_402D40+705↓j
.text:00403355                 test    eax, eax
.text:00403357                 setnz   [esp+4Ch+var_29]
.text:0040335C
.text:0040335C loc_40335C:                             ; CODE XREF: sub_402D40+7A5↓j
.text:0040335C                 cmp     [esp+4Ch+var_21], 0
.text:00403361                 lea     eax, [ebp+1]
.text:00403364                 jz      loc_403100
.text:0040336A                 cmp     [esp+4Ch+var_29], 0
.text:0040336F                 jnz     def_403242      ; jumptable 00402E45 cases 37,43-58,65-90,93,95,97-122
.text:0040336F                                         ; jumptable 00403242 default case, cases 34-38,42-44,46,48-59
.text:00403375
.text:00403375 loc_403375:                             ; CODE XREF: sub_402D40+7AB↓j
.text:00403375                 mov     eax, [esp+4Ch+var_28]
.text:00403379                 lea     edx, [eax+ebp]
.text:0040337C                 lea     esi, [esi+0]
.text:00403380
.text:00403380 loc_403380:                             ; CODE XREF: sub_402D40+6EF↓j
.text:00403380                 cmp     [esp+4Ch+var_21], 0
.text:00403385                 jz      short loc_403400
.text:00403387                 cmp     [esp+4Ch+var_29], 0
.text:0040338C                 jnz     short loc_403400
.text:0040338E                 mov     edi, [esp+4Ch+arg_4]
.text:00403392                 cmp     [esp+4Ch+var_34], edi
.text:00403396                 jnb     short loc_4033A4
.text:00403398                 mov     esi, [esp+4Ch+arg_0]
.text:0040339C                 mov     eax, [esp+4Ch+var_34]
.text:004033A0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004033A4
.text:004033A4 loc_4033A4:                             ; CODE XREF: sub_402D40+656↑j
.text:004033A4                 inc     [esp+4Ch+var_34]
.text:004033A8                 mov     ecx, [esp+4Ch+arg_4]
.text:004033AC                 cmp     [esp+4Ch+var_34], ecx
.text:004033B0                 jnb     short loc_4033C5
.text:004033B2                 mov     cl, bl
.text:004033B4                 mov     esi, [esp+4Ch+arg_0]
.text:004033B8                 mov     edi, [esp+4Ch+var_34]
.text:004033BC                 shr     cl, 6
.text:004033BF                 add     cl, 30h ; '0'
.text:004033C2                 mov     [edi+esi], cl
.text:004033C5
.text:004033C5 loc_4033C5:                             ; CODE XREF: sub_402D40+670↑j
.text:004033C5                 inc     [esp+4Ch+var_34]
.text:004033C9                 mov     edi, [esp+4Ch+arg_4]
.text:004033CD                 cmp     [esp+4Ch+var_34], edi
.text:004033D1                 jnb     short loc_4033E9
.text:004033D3                 mov     cl, bl
.text:004033D5                 mov     esi, [esp+4Ch+arg_0]
.text:004033D9                 shr     cl, 3
.text:004033DC                 mov     edi, [esp+4Ch+var_34]
.text:004033E0                 and     cl, 7
.text:004033E3                 add     cl, 30h ; '0'
.text:004033E6                 mov     [edi+esi], cl
.text:004033E9
.text:004033E9 loc_4033E9:                             ; CODE XREF: sub_402D40+691↑j
.text:004033E9                 inc     [esp+4Ch+var_34]
.text:004033ED                 and     bl, 7
.text:004033F0                 add     bl, 30h ; '0'
.text:004033F3                 lea     esi, [esi+0]
.text:004033F9                 lea     edi, [edi+0]
.text:00403400
.text:00403400 loc_403400:                             ; CODE XREF: sub_402D40+645↑j
.text:00403400                                         ; sub_402D40+64C↑j
.text:00403400                 lea     eax, [ebp+1]
.text:00403403                 cmp     edx, eax
.text:00403405                 jbe     loc_403100
.text:0040340B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040340F                 cmp     [esp+4Ch+var_34], ebp
.text:00403413                 jnb     short loc_403420
.text:00403415                 mov     ecx, [esp+4Ch+arg_0]
.text:00403419                 mov     edi, [esp+4Ch+var_34]
.text:0040341D                 mov     [edi+ecx], bl
.text:00403420
.text:00403420 loc_403420:                             ; CODE XREF: sub_402D40+6D3↑j
.text:00403420                 inc     [esp+4Ch+var_34]
.text:00403424                 mov     ebp, eax
.text:00403426                 mov     eax, [esp+4Ch+Str]
.text:0040342A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040342F                 jmp     loc_403380
.text:00403434 ; ---------------------------------------------------------------------------
.text:00403434
.text:00403434 loc_403434:                             ; CODE XREF: sub_402D40+5FF↑j
.text:00403434                 mov     ecx, ds:_pctype
.text:0040343A                 mov     edi, [ecx]
.text:0040343C                 movzx   eax, word ptr [edi+edx*2]
.text:00403440                 and     eax, 157h
.text:00403445                 jmp     loc_403355
.text:00403445 ; ---------------------------------------------------------------------------
.text:0040344A                 align 10h
.text:00403450
.text:00403450 loc_403450:                             ; CODE XREF: sub_402D40+5E5↑j
.text:00403450                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403455                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040345D                 mov     [esp+4Ch+var_28], 0
.text:00403465                 mov     [esp+4Ch+var_29], 1
.text:0040346A                 jz      loc_4035FC
.text:00403470
.text:00403470 loc_403470:                             ; CODE XREF: sub_402D40+8CC↓j
.text:00403470                 mov     ecx, [esp+4Ch+arg_C]
.text:00403474                 lea     edx, [esp+4Ch+var_18]
.text:00403478                 mov     edi, [esp+4Ch+Str]
.text:0040347C                 mov     [esp+4Ch+State], edx ; State
.text:00403480                 lea     esi, [esp+4Ch+var_18._State]
.text:00403484                 sub     ecx, ebp
.text:00403486                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040348A                 add     edi, ebp
.text:0040348C                 mov     [esp+4Ch+var_30], edi
.text:00403490                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403494                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403497                 call    mbrtowc
.text:0040349C                 test    eax, eax
.text:0040349E                 mov     edi, eax
.text:004034A0                 jz      short loc_4034E0
.text:004034A2                 cmp     eax, 0FFFFFFFFh
.text:004034A5                 jz      loc_4035F2
.text:004034AB                 cmp     eax, 0FFFFFFFEh
.text:004034AE                 jz      loc_4035B2
.text:004034B4                 cmp     [esp+4Ch+arg_10], 1
.text:004034B9                 jz      short loc_4034F0
.text:004034BB
.text:004034BB loc_4034BB:                             ; CODE XREF: sub_402D40+7B9↓j
.text:004034BB                                         ; sub_402D40+86D↓j
.text:004034BB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004034C0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004034C8                 mov     [esp+4Ch+C], ecx ; C
.text:004034CB                 call    iswctype
.text:004034D0                 test    eax, eax
.text:004034D2                 jnz     short loc_4034D9
.text:004034D4                 mov     [esp+4Ch+var_29], 0
.text:004034D9
.text:004034D9 loc_4034D9:                             ; CODE XREF: sub_402D40+792↑j
.text:004034D9                 mov     [esp+4Ch+var_28], edi
.text:004034DD                 lea     esi, [esi+0]
.text:004034E0
.text:004034E0 loc_4034E0:                             ; CODE XREF: sub_402D40+760↑j
.text:004034E0                                         ; sub_402D40+87B↓j ...
.text:004034E0                 cmp     [esp+4Ch+var_28], 1
.text:004034E5                 jbe     loc_40335C
.text:004034EB                 jmp     loc_403375
.text:004034F0 ; ---------------------------------------------------------------------------
.text:004034F0
.text:004034F0 loc_4034F0:                             ; CODE XREF: sub_402D40+779↑j
.text:004034F0                 cmp     [esp+4Ch+arg_10], eax
.text:004034F4                 mov     edx, 1
.text:004034F9                 jnb     short loc_4034BB
.text:004034FB
.text:004034FB loc_4034FB:                             ; CODE XREF: sub_402D40+867↓j
.text:004034FB                 mov     ecx, [esp+4Ch+Str]
.text:004034FF                 lea     esi, [edx+ebp]
.text:00403502                 movsx   eax, byte ptr [esi+ecx]
.text:00403506                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403509                 cmp     eax, 21h
.text:0040350C                 ja      def_403512      ; jumptable 00403512 default case, cases 93,95,97-123
.text:00403512                 jmp     ds:jpt_403512[eax*4] ; switch jump
.text:00403512 ; ---------------------------------------------------------------------------
.text:00403519                 align 4
.text:0040351C jpt_403512      dd offset loc_40314B    ; DATA XREF: sub_402D40+7D2↑r
.text:0040351C                 dd offset loc_40314B    ; jump table for switch statement
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset loc_40314B
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset loc_40314B
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset def_403512
.text:0040351C                 dd offset loc_40314B
.text:004035A4 ; ---------------------------------------------------------------------------
.text:004035A4
.text:004035A4 def_403512:                             ; CODE XREF: sub_402D40+7CC↑j
.text:004035A4                                         ; sub_402D40+7D2↑j
.text:004035A4                                         ; DATA XREF: ...
.text:004035A4                 inc     edx             ; jumptable 00403512 default case, cases 93,95,97-123
.text:004035A5                 cmp     edx, edi
.text:004035A7                 jb      loc_4034FB
.text:004035AD                 jmp     loc_4034BB
.text:004035B2 ; ---------------------------------------------------------------------------
.text:004035B2
.text:004035B2 loc_4035B2:                             ; CODE XREF: sub_402D40+76E↑j
.text:004035B2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004035B6                 mov     [esp+4Ch+var_29], 0
.text:004035BB                 jnb     loc_4034E0
.text:004035C1                 mov     eax, [esp+4Ch+var_30]
.text:004035C5                 cmp     byte ptr [eax], 0
.text:004035C8                 jz      loc_4034E0
.text:004035CE
.text:004035CE loc_4035CE:                             ; CODE XREF: sub_402D40+8AB↓j
.text:004035CE                 inc     [esp+4Ch+var_28]
.text:004035D2                 mov     esi, [esp+4Ch+var_28]
.text:004035D6                 lea     eax, [esi+ebp]
.text:004035D9                 cmp     eax, [esp+4Ch+arg_C]
.text:004035DD                 jnb     loc_4034E0
.text:004035E3                 mov     edi, [esp+4Ch+Str]
.text:004035E7                 cmp     byte ptr [eax+edi], 0
.text:004035EB                 jnz     short loc_4035CE
.text:004035ED                 jmp     loc_4034E0
.text:004035F2 ; ---------------------------------------------------------------------------
.text:004035F2
.text:004035F2 loc_4035F2:                             ; CODE XREF: sub_402D40+765↑j
.text:004035F2                 mov     [esp+4Ch+var_29], 0
.text:004035F7                 jmp     loc_4034E0
.text:004035FC ; ---------------------------------------------------------------------------
.text:004035FC
.text:004035FC loc_4035FC:                             ; CODE XREF: sub_402D40+72A↑j
.text:004035FC                 mov     edx, [esp+4Ch+Str]
.text:00403600                 mov     [esp+4Ch+C], edx ; Str
.text:00403603                 call    strlen
.text:00403608                 mov     [esp+4Ch+arg_C], eax
.text:0040360C                 jmp     loc_403470
.text:00403611 ; ---------------------------------------------------------------------------
.text:00403611
.text:00403611 loc_403611:                             ; CODE XREF: sub_402D40+105↑j
.text:00403611                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:00403611                 mov     dl, bl          ; jumptable 00402E45 case 92
.text:00403613                 jmp     loc_403144
.text:00403618 ; ---------------------------------------------------------------------------
.text:00403618
.text:00403618 loc_403618:                             ; CODE XREF: sub_402D40+105↑j
.text:00403618                                         ; sub_402D40+902↓j
.text:00403618                                         ; DATA XREF: ...
.text:00403618                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402E45 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040361D                 jnz     def_403242      ; jumptable 00402E45 cases 37,43-58,65-90,93,95,97-122
.text:0040361D                                         ; jumptable 00403242 default case, cases 34-38,42-44,46,48-59
.text:00403623                 jmp     loc_40314B      ; jumptable 00403512 cases 91,92,94,96,124
.text:00403628 ; ---------------------------------------------------------------------------
.text:00403628
.text:00403628 loc_403628:                             ; CODE XREF: sub_402D40+105↑j
.text:00403628                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:00403628                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00402E45 cases 123,125
.text:0040362D                 jz      short loc_403644
.text:0040362F                 cmp     [esp+4Ch+arg_C], 1
.text:00403634
.text:00403634 loc_403634:                             ; CODE XREF: sub_402D40+90C↓j
.text:00403634                 jnz     def_403242      ; jumptable 00402E45 cases 37,43-58,65-90,93,95,97-122
.text:00403634                                         ; jumptable 00403242 default case, cases 34-38,42-44,46,48-59
.text:0040363A
.text:0040363A loc_40363A:                             ; CODE XREF: sub_402D40+105↑j
.text:0040363A                                         ; DATA XREF: sub_402D40:jpt_402E45↑o
.text:0040363A                 test    ebp, ebp        ; jumptable 00402E45 cases 35,126
.text:0040363C                 jnz     def_403242      ; jumptable 00402E45 cases 37,43-58,65-90,93,95,97-122
.text:0040363C                                         ; jumptable 00403242 default case, cases 34-38,42-44,46,48-59
.text:00403642                 jmp     short loc_403618 ; jumptable 00402E45 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403644 ; ---------------------------------------------------------------------------
.text:00403644
.text:00403644 loc_403644:                             ; CODE XREF: sub_402D40+8ED↑j
.text:00403644                 mov     esi, [esp+4Ch+Str]
.text:00403648                 cmp     byte ptr [esi+1], 0
.text:0040364C                 jmp     short loc_403634
.text:0040364E ; ---------------------------------------------------------------------------
.text:0040364E
.text:0040364E loc_40364E:                             ; CODE XREF: sub_402D40:loc_402DDF↑j
.text:0040364E                 test    ebp, ebp
.text:00403650                 jnz     short loc_40365D
.text:00403652                 cmp     [esp+4Ch+arg_10], 1
.text:00403657                 jz      loc_40314B      ; jumptable 00403512 cases 91,92,94,96,124
.text:0040365D
.text:0040365D loc_40365D:                             ; CODE XREF: sub_402D40+910↑j
.text:0040365D                 mov     esi, [esp+4Ch+var_1C]
.text:00403661                 test    esi, esi
.text:00403663                 jz      short loc_403698
.text:00403665                 mov     edi, [esp+4Ch+var_1C]
.text:00403669                 movzx   eax, byte ptr [edi]
.text:0040366C                 test    al, al
.text:0040366E                 jz      short loc_403698
.text:00403670
.text:00403670 loc_403670:                             ; CODE XREF: sub_402D40+956↓j
.text:00403670                 mov     ebp, [esp+4Ch+arg_4]
.text:00403674                 cmp     [esp+4Ch+var_34], ebp
.text:00403678                 jnb     short loc_403685
.text:0040367A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040367E                 mov     ebx, [esp+4Ch+var_34]
.text:00403682                 mov     [ebx+ecx], al
.text:00403685
.text:00403685 loc_403685:                             ; CODE XREF: sub_402D40+938↑j
.text:00403685                 inc     [esp+4Ch+var_1C]
.text:00403689                 inc     [esp+4Ch+var_34]
.text:0040368D                 mov     edx, [esp+4Ch+var_1C]
.text:00403691                 movzx   eax, byte ptr [edx]
.text:00403694                 test    al, al
.text:00403696                 jnz     short loc_403670
.text:00403698
.text:00403698 loc_403698:                             ; CODE XREF: sub_402D40+923↑j
.text:00403698                                         ; sub_402D40+92E↑j
.text:00403698                 mov     eax, [esp+4Ch+arg_4]
.text:0040369C                 cmp     [esp+4Ch+var_34], eax
.text:004036A0                 jnb     short loc_4036AE
.text:004036A2                 mov     edi, [esp+4Ch+arg_0]
.text:004036A6                 mov     esi, [esp+4Ch+var_34]
.text:004036AA                 mov     byte ptr [esi+edi], 0
.text:004036AE
.text:004036AE loc_4036AE:                             ; CODE XREF: sub_402D40+960↑j
.text:004036AE                 mov     eax, [esp+4Ch+var_34]
.text:004036B2                 jmp     loc_40317F
.text:004036B7 ; ---------------------------------------------------------------------------
.text:004036B7
.text:004036B7 loc_4036B7:                             ; CODE XREF: sub_402D40+95↑j
.text:004036B7                 mov     ebx, [esp+4Ch+Str]
.text:004036BB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004036C0                 jmp     loc_402DDF
.text:004036C5 ; ---------------------------------------------------------------------------
.text:004036C5
.text:004036C5 loc_4036C5:                             ; CODE XREF: sub_402D40+3D↑j
.text:004036C5                                         ; DATA XREF: sub_402D40:jpt_402D7D↑o
.text:004036C5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00402D7D case 2
.text:004036C9                 cmp     [esp+4Ch+var_34], edx
.text:004036CD                 jnb     short loc_4036D6
.text:004036CF                 mov     ecx, [esp+4Ch+arg_0]
.text:004036D3                 mov     byte ptr [ecx], 27h ; '''
.text:004036D6
.text:004036D6 loc_4036D6:                             ; CODE XREF: sub_402D40+98D↑j
.text:004036D6                 mov     [esp+4Ch+var_34], 1
.text:004036DE                 mov     [esp+4Ch+var_1C], 402D2Eh
.text:004036E6                 jmp     loc_402DC6
.text:004036EB ; ---------------------------------------------------------------------------
.text:004036EB
.text:004036EB loc_4036EB:                             ; CODE XREF: sub_402D40+3D↑j
.text:004036EB                                         ; DATA XREF: sub_402D40:jpt_402D7D↑o
.text:004036EB                 mov     [esp+4Ch+var_21], 1 ; jumptable 00402D7D case 4
.text:004036F0                 jmp     def_402D7D      ; jumptable 00402D7D default case, cases 0,1
.text:004036F5 ; ---------------------------------------------------------------------------
.text:004036F5
.text:004036F5 loc_4036F5:                             ; CODE XREF: sub_402D40+3D↑j
.text:004036F5                                         ; DATA XREF: sub_402D40:jpt_402D7D↑o
.text:004036F5                 mov     [esp+4Ch+C], 402D30h ; jumptable 00402D7D cases 5,6
.text:004036FC                 call    ds:libintl_gettext
.text:00403702                 cmp     eax, 402D30h
.text:00403707                 mov     edi, eax
.text:00403709                 jz      short loc_403780
.text:0040370B
.text:0040370B loc_40370B:                             ; CODE XREF: sub_402D40+A45↓j
.text:0040370B                                         ; sub_402D40+A4C↓j
.text:0040370B                 mov     [esp+4Ch+C], 402D2Eh
.text:00403712                 call    ds:libintl_gettext
.text:00403718                 cmp     eax, 402D2Eh
.text:0040371D                 mov     edx, eax
.text:0040371F                 jz      short loc_403772
.text:00403721
.text:00403721 loc_403721:                             ; CODE XREF: sub_402D40+A37↓j
.text:00403721                                         ; sub_402D40+A3E↓j
.text:00403721                 mov     [esp+4Ch+var_1C], edi
.text:00403725                 cmp     byte ptr [edi], 0
.text:00403728                 jz      short loc_403758
.text:0040372A
.text:0040372A loc_40372A:                             ; CODE XREF: sub_402D40+A16↓j
.text:0040372A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040372E                 cmp     [esp+4Ch+var_34], ecx
.text:00403732                 jnb     short loc_403747
.text:00403734                 mov     ebp, [esp+4Ch+var_1C]
.text:00403738                 mov     edi, [esp+4Ch+arg_0]
.text:0040373C                 mov     esi, [esp+4Ch+var_34]
.text:00403740                 movzx   ebx, byte ptr [ebp+0]
.text:00403744                 mov     [esi+edi], bl
.text:00403747
.text:00403747 loc_403747:                             ; CODE XREF: sub_402D40+9F2↑j
.text:00403747                 inc     [esp+4Ch+var_1C]
.text:0040374B                 inc     [esp+4Ch+var_34]
.text:0040374F                 mov     eax, [esp+4Ch+var_1C]
.text:00403753                 cmp     byte ptr [eax], 0
.text:00403756                 jnz     short loc_40372A
.text:00403758
.text:00403758 loc_403758:                             ; CODE XREF: sub_402D40+9E8↑j
.text:00403758                 mov     [esp+4Ch+var_21], 1
.text:0040375D                 mov     [esp+4Ch+var_1C], edx
.text:00403761                 mov     [esp+4Ch+C], edx ; Str
.text:00403764                 call    strlen
.text:00403769                 mov     [esp+4Ch+var_20], eax
.text:0040376D                 jmp     def_402D7D      ; jumptable 00402D7D default case, cases 0,1
.text:00403772 ; ---------------------------------------------------------------------------
.text:00403772
.text:00403772 loc_403772:                             ; CODE XREF: sub_402D40+9DF↑j
.text:00403772                 cmp     [esp+4Ch+arg_10], 6
.text:00403777                 jnz     short loc_403721
.text:00403779                 mov     edx, offset asc_402D2C ; "\"'`"
.text:0040377E                 jmp     short loc_403721
.text:00403780 ; ---------------------------------------------------------------------------
.text:00403780
.text:00403780 loc_403780:                             ; CODE XREF: sub_402D40+9C9↑j
.text:00403780                 cmp     [esp+4Ch+arg_10], 6
.text:00403785                 jnz     short loc_40370B
.text:00403787                 mov     edi, offset asc_402D2C ; "\"'`"
.text:0040378C                 jmp     loc_40370B
.text:0040378C sub_402D40      endp
.text:0040378C
.text:00403791 ; ---------------------------------------------------------------------------
.text:00403791                 jmp     short loc_4037A0
.text:00403791 ; ---------------------------------------------------------------------------
.text:00403793                 align 10h
.text:004037A0
.text:004037A0 loc_4037A0:                             ; CODE XREF: .text:00403791↑j
.text:004037A0                 sub     esp, 0Ch
.text:004037A3                 mov     [esp+4], ebx
.text:004037A7                 mov     [esp+8], esi
.text:004037AB                 call    _errno
.text:004037B0                 mov     esi, [eax]
.text:004037B2                 mov     dword ptr [esp], 24h ; '$'
.text:004037B9                 call    sub_404590
.text:004037BE                 mov     edx, [esp+10h]
.text:004037C2                 mov     ebx, eax
.text:004037C4                 test    edx, edx
.text:004037C6                 jz      short loc_403811
.text:004037C8
.text:004037C8 loc_4037C8:                             ; CODE XREF: .text:00403816↓j
.text:004037C8                 mov     ecx, [edx]
.text:004037CA                 mov     [ebx], ecx
.text:004037CC                 mov     ecx, [edx+4]
.text:004037CF                 mov     [ebx+4], ecx
.text:004037D2                 mov     ecx, [edx+8]
.text:004037D5                 mov     [ebx+8], ecx
.text:004037D8                 mov     ecx, [edx+0Ch]
.text:004037DB                 mov     [ebx+0Ch], ecx
.text:004037DE                 mov     ecx, [edx+10h]
.text:004037E1                 mov     [ebx+10h], ecx
.text:004037E4                 mov     ecx, [edx+14h]
.text:004037E7                 mov     [ebx+14h], ecx
.text:004037EA                 mov     ecx, [edx+18h]
.text:004037ED                 mov     [ebx+18h], ecx
.text:004037F0                 mov     ecx, [edx+1Ch]
.text:004037F3                 mov     [ebx+1Ch], ecx
.text:004037F6                 mov     ecx, [edx+20h]
.text:004037F9                 mov     [ebx+20h], ecx
.text:004037FC                 call    _errno
.text:00403801                 mov     [eax], esi
.text:00403803                 mov     esi, [esp+8]
.text:00403807                 mov     eax, ebx
.text:00403809                 mov     ebx, [esp+4]
.text:0040380D                 add     esp, 0Ch
.text:00403810                 retn
.text:00403811 ; ---------------------------------------------------------------------------
.text:00403811
.text:00403811 loc_403811:                             ; CODE XREF: .text:004037C6↑j
.text:00403811                 mov     edx, offset dword_407140
.text:00403816                 jmp     short loc_4037C8
.text:00403816 ; ---------------------------------------------------------------------------
.text:00403818                 align 10h
.text:00403820                 mov     eax, [esp+4]
.text:00403824                 test    eax, eax
.text:00403826                 jz      short loc_403830
.text:00403828
.text:00403828 loc_403828:                             ; CODE XREF: .text:00403835↓j
.text:00403828                 mov     eax, [eax]
.text:0040382A                 retn
.text:0040382A ; ---------------------------------------------------------------------------
.text:0040382B                 align 10h
.text:00403830
.text:00403830 loc_403830:                             ; CODE XREF: .text:00403826↑j
.text:00403830                 mov     eax, offset dword_407140
.text:00403835                 jmp     short loc_403828
.text:00403835 ; ---------------------------------------------------------------------------
.text:00403837                 align 10h
.text:00403840                 mov     edx, [esp+4]
.text:00403844                 test    edx, edx
.text:00403846                 jz      short loc_403850
.text:00403848
.text:00403848 loc_403848:                             ; CODE XREF: .text:00403855↓j
.text:00403848                 mov     ecx, [esp+8]
.text:0040384C                 mov     [edx], ecx
.text:0040384E                 retn
.text:0040384E ; ---------------------------------------------------------------------------
.text:0040384F                 align 10h
.text:00403850
.text:00403850 loc_403850:                             ; CODE XREF: .text:00403846↑j
.text:00403850                 mov     edx, offset dword_407140
.text:00403855                 jmp     short loc_403848
.text:00403855 ; ---------------------------------------------------------------------------
.text:00403857                 align 10h
.text:00403860                 sub     esp, 8
.text:00403863                 mov     eax, [esp+0Ch]
.text:00403867                 movzx   ecx, byte ptr [esp+10h]
.text:0040386C                 mov     [esp], ebx
.text:0040386F                 mov     ebx, [esp+14h]
.text:00403873                 mov     [esp+4], esi
.text:00403877                 mov     dl, cl
.text:00403879                 shr     dl, 5
.text:0040387C                 movzx   edx, dl
.text:0040387F                 shl     edx, 2
.text:00403882                 test    eax, eax
.text:00403884                 lea     esi, [edx+eax+4]
.text:00403888                 jz      short loc_4038B0
.text:0040388A
.text:0040388A loc_40388A:                             ; CODE XREF: .text:004038B6↓j
.text:0040388A                 mov     edx, [esi]
.text:0040388C                 and     ecx, 1Fh
.text:0040388F                 and     ebx, 1
.text:00403892                 mov     eax, edx
.text:00403894                 shr     eax, cl
.text:00403896                 and     eax, 1
.text:00403899                 xor     ebx, eax
.text:0040389B                 shl     ebx, cl
.text:0040389D                 xor     edx, ebx
.text:0040389F                 mov     [esi], edx
.text:004038A1                 mov     ebx, [esp]
.text:004038A4                 mov     esi, [esp+4]
.text:004038A8                 add     esp, 8
.text:004038AB                 retn
.text:004038AB ; ---------------------------------------------------------------------------
.text:004038AC                 align 10h
.text:004038B0
.text:004038B0 loc_4038B0:                             ; CODE XREF: .text:00403888↑j
.text:004038B0                 lea     esi, dword_407144[edx]
.text:004038B6                 jmp     short loc_40388A
.text:004038B6 ; ---------------------------------------------------------------------------
.text:004038B8                 align 10h
.text:004038C0                 sub     esp, 2Ch
.text:004038C3                 mov     [esp+24h], ebx
.text:004038C7                 mov     ebx, [esp+40h]
.text:004038CB                 mov     [esp+28h], esi
.text:004038CF                 test    ebx, ebx
.text:004038D1                 jz      short loc_403920
.text:004038D3
.text:004038D3 loc_4038D3:                             ; CODE XREF: .text:00403925↓j
.text:004038D3                 call    _errno
.text:004038D8                 mov     esi, [eax]
.text:004038DA                 mov     [esp+14h], ebx
.text:004038DE                 mov     edx, [ebx]
.text:004038E0                 mov     ecx, [esp+38h]
.text:004038E4                 mov     ebx, [esp+3Ch]
.text:004038E8                 mov     [esp+10h], edx
.text:004038EC                 mov     edx, [esp+34h]
.text:004038F0                 mov     [esp+0Ch], ebx
.text:004038F4                 mov     [esp+8], ecx
.text:004038F8                 mov     [esp+4], edx
.text:004038FC                 mov     edx, [esp+30h]
.text:00403900                 mov     [esp], edx
.text:00403903                 call    sub_402D40
.text:00403908                 mov     ebx, eax
.text:0040390A                 call    _errno
.text:0040390F                 mov     [eax], esi
.text:00403911                 mov     esi, [esp+28h]
.text:00403915                 mov     eax, ebx
.text:00403917                 mov     ebx, [esp+24h]
.text:0040391B                 add     esp, 2Ch
.text:0040391E                 retn
.text:0040391E ; ---------------------------------------------------------------------------
.text:0040391F                 align 10h
.text:00403920
.text:00403920 loc_403920:                             ; CODE XREF: .text:004038D1↑j
.text:00403920                 mov     ebx, offset dword_407140
.text:00403925                 jmp     short loc_4038D3
.text:00403925 ; ---------------------------------------------------------------------------
.text:00403927                 align 10h
.text:00403930                 push    ebp
.text:00403931                 push    edi
.text:00403932                 push    esi
.text:00403933                 push    ebx
.text:00403934                 sub     esp, 2Ch
.text:00403937                 mov     ebp, [esp+48h]
.text:0040393B                 call    _errno
.text:00403940                 mov     edx, [eax]
.text:00403942                 test    ebp, ebp
.text:00403944                 mov     ebx, ebp
.text:00403946                 mov     [esp+28h], edx
.text:0040394A                 jz      loc_403A00
.text:00403950
.text:00403950 loc_403950:                             ; CODE XREF: .text:00403A05↓j
.text:00403950                 call    _errno
.text:00403955                 mov     edi, [eax]
.text:00403957                 mov     esi, ebp
.text:00403959                 mov     [esp+14h], ebx
.text:0040395D                 mov     ecx, [ebx]
.text:0040395F                 mov     dword ptr [esp], 0
.text:00403966                 mov     edx, [esp+44h]
.text:0040396A                 mov     dword ptr [esp+4], 0
.text:00403972                 mov     eax, [esp+40h]
.text:00403976                 mov     [esp+10h], ecx
.text:0040397A                 mov     [esp+0Ch], edx
.text:0040397E                 mov     [esp+8], eax
.text:00403982                 call    sub_402D40
.text:00403987                 mov     ebx, eax
.text:00403989                 call    _errno
.text:0040398E                 mov     [eax], edi
.text:00403990                 lea     edi, [ebx+1]
.text:00403993                 mov     [esp], edi
.text:00403996                 call    sub_404590
.text:0040399B                 mov     [esp+24h], eax
.text:0040399F                 test    ebp, ebp
.text:004039A1                 jz      short loc_4039F2
.text:004039A3
.text:004039A3 loc_4039A3:                             ; CODE XREF: .text:004039F7↓j
.text:004039A3                 call    _errno
.text:004039A8                 mov     ebp, [eax]
.text:004039AA                 mov     [esp+14h], esi
.text:004039AE                 mov     ecx, [esi]
.text:004039B0                 mov     [esp+4], edi
.text:004039B4                 mov     edx, [esp+44h]
.text:004039B8                 mov     esi, [esp+24h]
.text:004039BC                 mov     [esp+10h], ecx
.text:004039C0                 mov     eax, [esp+40h]
.text:004039C4                 mov     [esp+0Ch], edx
.text:004039C8                 mov     [esp], esi
.text:004039CB                 mov     [esp+8], eax
.text:004039CF                 call    sub_402D40
.text:004039D4                 call    _errno
.text:004039D9                 mov     [eax], ebp
.text:004039DB                 call    _errno
.text:004039E0                 mov     ebx, [esp+28h]
.text:004039E4                 mov     [eax], ebx
.text:004039E6                 mov     eax, [esp+24h]
.text:004039EA                 add     esp, 2Ch
.text:004039ED                 pop     ebx
.text:004039EE                 pop     esi
.text:004039EF                 pop     edi
.text:004039F0                 pop     ebp
.text:004039F1                 retn
.text:004039F2 ; ---------------------------------------------------------------------------
.text:004039F2
.text:004039F2 loc_4039F2:                             ; CODE XREF: .text:004039A1↑j
.text:004039F2                 mov     esi, offset dword_407140
.text:004039F7                 jmp     short loc_4039A3
.text:004039F7 ; ---------------------------------------------------------------------------
.text:004039F9                 align 10h
.text:00403A00
.text:00403A00 loc_403A00:                             ; CODE XREF: .text:0040394A↑j
.text:00403A00                 mov     ebx, offset dword_407140
.text:00403A05                 jmp     loc_403950
.text:00403A05 ; ---------------------------------------------------------------------------
.text:00403A0A                 align 10h
.text:00403A10                 sub     esp, 1Ch
.text:00403A13                 mov     edx, [esp+24h]
.text:00403A17                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:00403A1F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403A27                 mov     [esp+4], edx
.text:00403A2B                 mov     edx, [esp+20h]
.text:00403A2F                 mov     [esp], edx
.text:00403A32                 call    sub_403E80
.text:00403A37                 add     esp, 1Ch
.text:00403A3A                 retn
.text:00403A3A ; ---------------------------------------------------------------------------
.text:00403A3B                 align 10h
.text:00403A40                 sub     esp, 1Ch
.text:00403A43                 mov     edx, [esp+20h]
.text:00403A47                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:00403A4F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403A57                 mov     [esp+4], edx
.text:00403A5B                 mov     dword ptr [esp], 0
.text:00403A62                 call    sub_403E80
.text:00403A67                 add     esp, 1Ch
.text:00403A6A                 retn
.text:00403A6A ; ---------------------------------------------------------------------------
.text:00403A6B                 align 10h
.text:00403A70
.text:00403A70 ; =============== S U B R O U T I N E =======================================
.text:00403A70
.text:00403A70
.text:00403A70 ; int __cdecl sub_403A70(int, int, char *)
.text:00403A70 sub_403A70      proc near               ; CODE XREF: .text:004028FA↑p
.text:00403A70                                         ; sub_402910+1A↑p
.text:00403A70
.text:00403A70 var_BC          = dword ptr -0BCh
.text:00403A70 var_B8          = dword ptr -0B8h
.text:00403A70 var_B4          = dword ptr -0B4h
.text:00403A70 var_B0          = dword ptr -0B0h
.text:00403A70 var_AC          = dword ptr -0ACh
.text:00403A70 var_A8          = dword ptr -0A8h
.text:00403A70 var_A4          = dword ptr -0A4h
.text:00403A70 var_A0          = dword ptr -0A0h
.text:00403A70 var_9C          = dword ptr -9Ch
.text:00403A70 var_98          = dword ptr -98h
.text:00403A70 var_94          = dword ptr -94h
.text:00403A70 var_90          = dword ptr -90h
.text:00403A70 var_8C          = dword ptr -8Ch
.text:00403A70 var_7C          = dword ptr -7Ch
.text:00403A70 var_78          = dword ptr -78h
.text:00403A70 var_74          = dword ptr -74h
.text:00403A70 var_70          = dword ptr -70h
.text:00403A70 var_6C          = dword ptr -6Ch
.text:00403A70 var_68          = dword ptr -68h
.text:00403A70 var_64          = dword ptr -64h
.text:00403A70 var_60          = dword ptr -60h
.text:00403A70 var_5C          = dword ptr -5Ch
.text:00403A70 var_4C          = dword ptr -4Ch
.text:00403A70 var_48          = dword ptr -48h
.text:00403A70 var_44          = dword ptr -44h
.text:00403A70 var_40          = dword ptr -40h
.text:00403A70 var_3C          = dword ptr -3Ch
.text:00403A70 var_38          = dword ptr -38h
.text:00403A70 var_34          = dword ptr -34h
.text:00403A70 var_30          = dword ptr -30h
.text:00403A70 var_2C          = dword ptr -2Ch
.text:00403A70 arg_0           = dword ptr  4
.text:00403A70 arg_4           = dword ptr  8
.text:00403A70 arg_8           = dword ptr  0Ch
.text:00403A70
.text:00403A70                 push    ebp
.text:00403A71                 xor     eax, eax
.text:00403A73                 mov     ecx, 8
.text:00403A78                 push    edi
.text:00403A79                 push    esi
.text:00403A7A                 push    ebx
.text:00403A7B                 sub     esp, 0ACh
.text:00403A81                 mov     ebp, [esp+0BCh+arg_4]
.text:00403A88                 cld
.text:00403A89                 lea     edi, [esp+0BCh+var_A8]
.text:00403A8D                 mov     [esp+0BCh+var_AC], ebp
.text:00403A91                 rep stosd
.text:00403A93                 mov     eax, [esp+0BCh+var_8C]
.text:00403A97                 mov     edi, [esp+0BCh+var_AC]
.text:00403A9B                 mov     esi, [esp+0BCh+var_A8]
.text:00403A9F                 mov     [esp+0BCh+var_5C], eax
.text:00403AA3                 mov     ebp, [esp+0BCh+var_A4]
.text:00403AA7                 mov     eax, [esp+0BCh+var_AC]
.text:00403AAB                 mov     [esp+0BCh+var_7C], edi
.text:00403AAF                 mov     ecx, [esp+0BCh+var_94]
.text:00403AB3                 mov     edi, [esp+0BCh+var_A0]
.text:00403AB7                 mov     [esp+0BCh+var_78], esi
.text:00403ABB                 mov     edx, [esp+0BCh+var_90]
.text:00403ABF                 mov     esi, [esp+0BCh+var_9C]
.text:00403AC3                 mov     [esp+0BCh+var_4C], eax
.text:00403AC7                 mov     ebx, [esp+0BCh+var_98]
.text:00403ACB                 mov     eax, [esp+0BCh+var_A8]
.text:00403ACF                 mov     [esp+0BCh+var_74], ebp
.text:00403AD3                 mov     [esp+0BCh+var_70], edi
.text:00403AD7                 mov     [esp+0BCh+var_6C], esi
.text:00403ADB                 mov     [esp+0BCh+var_68], ebx
.text:00403ADF                 mov     [esp+0BCh+var_64], ecx
.text:00403AE3                 mov     [esp+0BCh+var_60], edx
.text:00403AE7                 mov     [esp+0BCh+var_48], eax
.text:00403AEB                 mov     [esp+0BCh+var_44], ebp
.text:00403AEF                 mov     [esp+0BCh+var_40], edi
.text:00403AF3                 mov     [esp+0BCh+var_3C], esi
.text:00403AFA                 mov     [esp+0BCh+var_38], ebx
.text:00403B01                 mov     ebx, [esp+0BCh+var_8C]
.text:00403B05                 mov     [esp+0BCh+var_30], edx
.text:00403B0C                 mov     edx, [esp+0BCh+arg_8]
.text:00403B13                 mov     [esp+0BCh+var_34], ecx
.text:00403B1A                 lea     ecx, [esp+0BCh+var_4C]
.text:00403B1E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00403B22                 mov     edx, [esp+0BCh+arg_0]
.text:00403B29                 mov     [esp+0BCh+var_2C], ebx
.text:00403B30                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00403B34                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00403B3C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00403B3F                 call    sub_403E80
.text:00403B44                 add     esp, 0ACh
.text:00403B4A                 pop     ebx
.text:00403B4B                 pop     esi
.text:00403B4C                 pop     edi
.text:00403B4D                 pop     ebp
.text:00403B4E                 retn
.text:00403B4E sub_403A70      endp
.text:00403B4E
.text:00403B4E ; ---------------------------------------------------------------------------
.text:00403B4F                 align 10h
.text:00403B50                 push    ebp
.text:00403B51                 xor     eax, eax
.text:00403B53                 mov     ecx, 8
.text:00403B58                 push    edi
.text:00403B59                 push    esi
.text:00403B5A                 push    ebx
.text:00403B5B                 sub     esp, 0ACh
.text:00403B61                 mov     edx, [esp+0C4h]
.text:00403B68                 cld
.text:00403B69                 lea     edi, [esp+14h]
.text:00403B6D                 mov     [esp+10h], edx
.text:00403B71                 rep stosd
.text:00403B73                 mov     eax, [esp+30h]
.text:00403B77                 mov     ebp, [esp+10h]
.text:00403B7B                 mov     edi, [esp+14h]
.text:00403B7F                 mov     [esp+60h], eax
.text:00403B83                 mov     esi, [esp+20h]
.text:00403B87                 mov     eax, [esp+10h]
.text:00403B8B                 mov     [esp+40h], ebp
.text:00403B8F                 mov     ecx, [esp+28h]
.text:00403B93                 mov     ebp, [esp+18h]
.text:00403B97                 mov     [esp+44h], edi
.text:00403B9B                 mov     edx, [esp+2Ch]
.text:00403B9F                 mov     edi, [esp+1Ch]
.text:00403BA3                 mov     [esp+70h], eax
.text:00403BA7                 mov     ebx, [esp+24h]
.text:00403BAB                 mov     eax, [esp+14h]
.text:00403BAF                 mov     [esp+48h], ebp
.text:00403BB3                 mov     [esp+4Ch], edi
.text:00403BB7                 mov     [esp+50h], esi
.text:00403BBB                 mov     [esp+54h], ebx
.text:00403BBF                 mov     [esp+58h], ecx
.text:00403BC3                 mov     [esp+5Ch], edx
.text:00403BC7                 mov     [esp+74h], eax
.text:00403BCB                 mov     [esp+78h], ebp
.text:00403BCF                 mov     [esp+7Ch], edi
.text:00403BD3                 mov     [esp+80h], esi
.text:00403BDA                 mov     [esp+84h], ebx
.text:00403BE1                 mov     esi, [esp+30h]
.text:00403BE5                 lea     ebx, [esp+70h]
.text:00403BE9                 mov     [esp+8Ch], edx
.text:00403BF0                 mov     edx, [esp+0C8h]
.text:00403BF7                 mov     [esp+88h], ecx
.text:00403BFE                 mov     ecx, [esp+0CCh]
.text:00403C05                 mov     [esp+4], edx
.text:00403C09                 mov     edx, [esp+0C0h]
.text:00403C10                 mov     [esp+90h], esi
.text:00403C17                 mov     [esp+0Ch], ebx
.text:00403C1B                 mov     [esp+8], ecx
.text:00403C1F                 mov     [esp], edx
.text:00403C22                 call    sub_403E80
.text:00403C27                 add     esp, 0ACh
.text:00403C2D                 pop     ebx
.text:00403C2E                 pop     esi
.text:00403C2F                 pop     edi
.text:00403C30                 pop     ebp
.text:00403C31                 retn
.text:00403C31 ; ---------------------------------------------------------------------------
.text:00403C32                 align 10h
.text:00403C40                 push    ebp
.text:00403C41                 xor     eax, eax
.text:00403C43                 mov     ecx, 8
.text:00403C48                 push    edi
.text:00403C49                 push    esi
.text:00403C4A                 push    ebx
.text:00403C4B                 sub     esp, 0ACh
.text:00403C51                 mov     edi, [esp+0C0h]
.text:00403C58                 cld
.text:00403C59                 mov     [esp+10h], edi
.text:00403C5D                 lea     edi, [esp+14h]
.text:00403C61                 rep stosd
.text:00403C63                 mov     eax, [esp+30h]
.text:00403C67                 mov     esi, [esp+10h]
.text:00403C6B                 mov     ebx, [esp+14h]
.text:00403C6F                 mov     [esp+60h], eax
.text:00403C73                 mov     ebp, [esp+18h]
.text:00403C77                 mov     eax, [esp+10h]
.text:00403C7B                 mov     [esp+40h], esi
.text:00403C7F                 mov     edi, [esp+1Ch]
.text:00403C83                 mov     esi, [esp+20h]
.text:00403C87                 mov     [esp+44h], ebx
.text:00403C8B                 mov     ecx, [esp+28h]
.text:00403C8F                 mov     edx, [esp+2Ch]
.text:00403C93                 mov     [esp+70h], eax
.text:00403C97                 mov     ebx, [esp+24h]
.text:00403C9B                 mov     eax, [esp+14h]
.text:00403C9F                 mov     [esp+48h], ebp
.text:00403CA3                 mov     [esp+4Ch], edi
.text:00403CA7                 mov     [esp+50h], esi
.text:00403CAB                 mov     [esp+54h], ebx
.text:00403CAF                 mov     [esp+58h], ecx
.text:00403CB3                 mov     [esp+5Ch], edx
.text:00403CB7                 mov     [esp+74h], eax
.text:00403CBB                 mov     [esp+78h], ebp
.text:00403CBF                 mov     [esp+7Ch], edi
.text:00403CC3                 mov     [esp+80h], esi
.text:00403CCA                 mov     [esp+84h], ebx
.text:00403CD1                 mov     [esp+8Ch], edx
.text:00403CD8                 lea     edx, [esp+70h]
.text:00403CDC                 mov     [esp+88h], ecx
.text:00403CE3                 mov     ecx, [esp+30h]
.text:00403CE7                 mov     [esp+0Ch], edx
.text:00403CEB                 mov     edx, [esp+0C4h]
.text:00403CF2                 mov     [esp+90h], ecx
.text:00403CF9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403D01                 mov     [esp+4], edx
.text:00403D05                 mov     dword ptr [esp], 0
.text:00403D0C                 call    sub_403E80
.text:00403D11                 add     esp, 0ACh
.text:00403D17                 pop     ebx
.text:00403D18                 pop     esi
.text:00403D19                 pop     edi
.text:00403D1A                 pop     ebp
.text:00403D1B                 retn
.text:00403D1B ; ---------------------------------------------------------------------------
.text:00403D1C                 align 10h
.text:00403D20                 push    edi
.text:00403D21                 push    esi
.text:00403D22                 push    ebx
.text:00403D23                 sub     esp, 40h
.text:00403D26                 mov     edx, ds:dword_40714C
.text:00403D2C                 mov     ebx, ds:dword_407140
.text:00403D32                 mov     esi, ds:dword_407148
.text:00403D38                 mov     edi, ds:dword_407144
.text:00403D3E                 mov     [esp+1Ch], edx
.text:00403D42                 mov     ecx, ds:dword_407150
.text:00403D48                 mov     edx, ds:dword_407160
.text:00403D4E                 mov     [esp+10h], ebx
.text:00403D52                 mov     ebx, ds:dword_407154
.text:00403D58                 mov     [esp+30h], edx
.text:00403D5C                 movzx   edx, byte ptr [esp+54h]
.text:00403D61                 mov     [esp+18h], esi
.text:00403D65                 mov     esi, ds:dword_40715C
.text:00403D6B                 mov     [esp+14h], edi
.text:00403D6F                 mov     edi, ds:dword_407158
.text:00403D75                 mov     [esp+20h], ecx
.text:00403D79                 mov     cl, dl
.text:00403D7B                 shr     cl, 5
.text:00403D7E                 mov     [esp+24h], ebx
.text:00403D82                 movzx   ebx, cl
.text:00403D85                 mov     [esp+2Ch], esi
.text:00403D89                 lea     esi, [esp+10h]
.text:00403D8D                 mov     [esp+28h], edi
.text:00403D91                 lea     edi, [esi+ebx*4]
.text:00403D94                 mov     ebx, edx
.text:00403D96                 mov     edx, [edi+4]
.text:00403D99                 and     ebx, 1Fh
.text:00403D9C                 mov     cl, bl
.text:00403D9E                 mov     eax, edx
.text:00403DA0                 shr     eax, cl
.text:00403DA2                 and     eax, 1
.text:00403DA5                 xor     eax, 1
.text:00403DA8                 shl     eax, cl
.text:00403DAA                 xor     edx, eax
.text:00403DAC                 mov     [edi+4], edx
.text:00403DAF                 mov     edx, [esp+50h]
.text:00403DB3                 mov     [esp+0Ch], esi
.text:00403DB7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403DBF                 mov     [esp+4], edx
.text:00403DC3                 mov     dword ptr [esp], 0
.text:00403DCA                 call    sub_403E80
.text:00403DCF                 add     esp, 40h
.text:00403DD2                 pop     ebx
.text:00403DD3                 pop     esi
.text:00403DD4                 pop     edi
.text:00403DD5                 retn
.text:00403DD5 ; ---------------------------------------------------------------------------
.text:00403DD6                 align 10h
.text:00403DE0
.text:00403DE0 ; =============== S U B R O U T I N E =======================================
.text:00403DE0
.text:00403DE0
.text:00403DE0 ; int __cdecl sub_403DE0(char *)
.text:00403DE0 sub_403DE0      proc near               ; CODE XREF: sub_402BD0+64↑p
.text:00403DE0
.text:00403DE0 var_4C          = dword ptr -4Ch
.text:00403DE0 var_48          = dword ptr -48h
.text:00403DE0 var_44          = dword ptr -44h
.text:00403DE0 var_40          = dword ptr -40h
.text:00403DE0 var_3C          = dword ptr -3Ch
.text:00403DE0 var_38          = dword ptr -38h
.text:00403DE0 var_34          = dword ptr -34h
.text:00403DE0 var_30          = dword ptr -30h
.text:00403DE0 var_2C          = dword ptr -2Ch
.text:00403DE0 var_28          = dword ptr -28h
.text:00403DE0 var_24          = dword ptr -24h
.text:00403DE0 var_20          = dword ptr -20h
.text:00403DE0 var_1C          = dword ptr -1Ch
.text:00403DE0 arg_0           = dword ptr  4
.text:00403DE0
.text:00403DE0                 sub     esp, 4Ch
.text:00403DE3                 mov     ecx, ds:dword_407140
.text:00403DE9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00403DF1                 mov     edx, ds:dword_407144
.text:00403DF7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00403DFE                 mov     [esp+4Ch+var_3C], ecx
.text:00403E02                 mov     ecx, ds:dword_40714C
.text:00403E08                 mov     [esp+4Ch+var_38], edx
.text:00403E0C                 mov     edx, ds:dword_407148
.text:00403E12                 mov     [esp+4Ch+var_30], ecx
.text:00403E16                 mov     ecx, ds:dword_407150
.text:00403E1C                 mov     eax, edx
.text:00403E1E                 shr     eax, 1Ah
.text:00403E21                 and     eax, 1
.text:00403E24                 xor     eax, 1
.text:00403E27                 mov     [esp+4Ch+var_2C], ecx
.text:00403E2B                 shl     eax, 1Ah
.text:00403E2E                 mov     ecx, ds:dword_407154
.text:00403E34                 xor     edx, eax
.text:00403E36                 mov     [esp+4Ch+var_34], edx
.text:00403E3A                 mov     edx, [esp+4Ch+arg_0]
.text:00403E3E                 mov     [esp+4Ch+var_28], ecx
.text:00403E42                 mov     ecx, ds:dword_407158
.text:00403E48                 mov     [esp+4Ch+var_48], edx ; char *
.text:00403E4C                 mov     [esp+4Ch+var_24], ecx
.text:00403E50                 mov     ecx, ds:dword_40715C
.text:00403E56                 mov     [esp+4Ch+var_20], ecx
.text:00403E5A                 mov     ecx, ds:dword_407160
.text:00403E60                 mov     [esp+4Ch+var_1C], ecx
.text:00403E64                 lea     ecx, [esp+4Ch+var_3C]
.text:00403E68                 mov     [esp+4Ch+var_40], ecx ; int
.text:00403E6C                 call    sub_403E80
.text:00403E71                 add     esp, 4Ch
.text:00403E74                 retn
.text:00403E74 sub_403DE0      endp
.text:00403E74
.text:00403E74 ; ---------------------------------------------------------------------------
.text:00403E75                 align 10h
.text:00403E80
.text:00403E80 ; =============== S U B R O U T I N E =======================================
.text:00403E80
.text:00403E80
.text:00403E80 ; int __cdecl sub_403E80(int, char *, int, int)
.text:00403E80 sub_403E80      proc near               ; CODE XREF: .text:00403A32↑p
.text:00403E80                                         ; .text:00403A62↑p ...
.text:00403E80
.text:00403E80 Block           = dword ptr -2Ch
.text:00403E80 var_28          = dword ptr -28h
.text:00403E80 Str             = dword ptr -24h
.text:00403E80 var_20          = dword ptr -20h
.text:00403E80 var_1C          = dword ptr -1Ch
.text:00403E80 var_18          = dword ptr -18h
.text:00403E80 var_14          = dword ptr -14h
.text:00403E80 arg_0           = dword ptr  4
.text:00403E80 arg_4           = dword ptr  8
.text:00403E80 arg_8           = dword ptr  0Ch
.text:00403E80 arg_C           = dword ptr  10h
.text:00403E80
.text:00403E80                 push    ebp
.text:00403E81                 push    edi
.text:00403E82                 push    esi
.text:00403E83                 push    ebx
.text:00403E84                 sub     esp, 1Ch
.text:00403E87                 call    _errno
.text:00403E8C                 mov     edx, [eax]
.text:00403E8E                 mov     eax, [esp+2Ch+arg_0]
.text:00403E92                 mov     [esp+2Ch+var_14], edx
.text:00403E96                 test    eax, eax
.text:00403E98                 js      loc_40403A
.text:00403E9E                 mov     eax, [esp+2Ch+arg_0]
.text:00403EA2                 cmp     dword_406020, eax
.text:00403EA8                 ja      short loc_403F20
.text:00403EAA                 mov     esi, eax
.text:00403EAC                 inc     esi
.text:00403EAD                 cmp     esi, 1FFFFFFFh
.text:00403EB3                 ja      loc_40403F
.text:00403EB9                 mov     ebx, off_40602C
.text:00403EBF                 cmp     ebx, offset dword_406024
.text:00403EC5                 jz      loc_404011
.text:00403ECB
.text:00403ECB loc_403ECB:                             ; CODE XREF: sub_403E80+1B5↓j
.text:00403ECB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00403ECE                 lea     ecx, ds:0[esi*8]
.text:00403ED5                 mov     ebp, esi
.text:00403ED7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00403EDB                 call    sub_404620
.text:00403EE0                 mov     off_40602C, eax
.text:00403EE5                 mov     ebx, dword_406020
.text:00403EEB                 sub     ebp, ebx
.text:00403EED                 lea     edi, [eax+ebx*8]
.text:00403EF0                 lea     eax, ds:0[ebp*8]
.text:00403EF7                 cmp     eax, 7
.text:00403EFA                 jbe     short loc_403F10
.text:00403EFC                 test    edi, 4
.text:00403F02                 jz      short loc_403F10
.text:00403F04                 mov     dword ptr [edi], 0
.text:00403F0A                 sub     eax, 4
.text:00403F0D                 add     edi, 4
.text:00403F10
.text:00403F10 loc_403F10:                             ; CODE XREF: sub_403E80+7A↑j
.text:00403F10                                         ; sub_403E80+82↑j
.text:00403F10                 cld
.text:00403F11                 mov     ecx, eax
.text:00403F13                 shr     ecx, 2
.text:00403F16                 xor     eax, eax
.text:00403F18                 rep stosd
.text:00403F1A                 mov     dword_406020, esi
.text:00403F20
.text:00403F20 loc_403F20:                             ; CODE XREF: sub_403E80+28↑j
.text:00403F20                 mov     esi, off_40602C
.text:00403F26                 mov     eax, [esp+2Ch+arg_0]
.text:00403F2A                 mov     ebp, [esi+eax*8]
.text:00403F2D                 mov     edi, [esi+eax*8+4]
.text:00403F31                 mov     esi, [esp+2Ch+arg_C]
.text:00403F35                 test    esi, esi
.text:00403F37                 jz      loc_404007
.text:00403F3D
.text:00403F3D loc_403F3D:                             ; CODE XREF: sub_403E80+18C↓j
.text:00403F3D                 call    _errno
.text:00403F42                 mov     ebx, [eax]
.text:00403F44                 mov     [esp+2Ch+var_18], esi ; int
.text:00403F48                 mov     ecx, [esi]
.text:00403F4A                 mov     [esp+2Ch+Block], edi ; int
.text:00403F4D                 mov     edx, [esp+2Ch+arg_8]
.text:00403F51                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403F55                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403F59                 mov     ecx, [esp+2Ch+arg_4]
.text:00403F5D                 mov     [esp+2Ch+var_20], edx ; int
.text:00403F61                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403F65                 call    sub_402D40
.text:00403F6A                 mov     esi, eax
.text:00403F6C                 call    _errno
.text:00403F71                 mov     [eax], ebx
.text:00403F73                 cmp     ebp, esi
.text:00403F75                 ja      short loc_403FEB
.text:00403F77                 lea     ebp, [esi+1]
.text:00403F7A                 mov     ebx, off_40602C
.text:00403F80                 cmp     edi, offset unk_407040
.text:00403F86                 mov     esi, [esp+2Ch+arg_0]
.text:00403F8A                 mov     [ebx+esi*8], ebp
.text:00403F8D                 jz      short loc_403F9D
.text:00403F8F                 mov     [esp+2Ch+Block], edi ; Block
.text:00403F92                 call    free
.text:00403F97                 mov     ebx, off_40602C
.text:00403F9D
.text:00403F9D loc_403F9D:                             ; CODE XREF: sub_403E80+10D↑j
.text:00403F9D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00403FA0                 call    sub_404590
.text:00403FA5                 mov     esi, [esp+2Ch+arg_C]
.text:00403FA9                 mov     edi, eax
.text:00403FAB                 mov     eax, [esp+2Ch+arg_0]
.text:00403FAF                 test    esi, esi
.text:00403FB1                 mov     [ebx+eax*8+4], edi
.text:00403FB5                 jz      short loc_404000
.text:00403FB7
.text:00403FB7 loc_403FB7:                             ; CODE XREF: sub_403E80+185↓j
.text:00403FB7                 call    _errno
.text:00403FBC                 mov     ebx, [eax]
.text:00403FBE                 mov     [esp+2Ch+var_18], esi ; int
.text:00403FC2                 mov     ecx, [esi]
.text:00403FC4                 mov     [esp+2Ch+Block], edi ; int
.text:00403FC7                 mov     edx, [esp+2Ch+arg_8]
.text:00403FCB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00403FCF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00403FD3                 mov     ecx, [esp+2Ch+arg_4]
.text:00403FD7                 mov     [esp+2Ch+var_20], edx ; int
.text:00403FDB                 mov     [esp+2Ch+Str], ecx ; Str
.text:00403FDF                 call    sub_402D40
.text:00403FE4                 call    _errno
.text:00403FE9                 mov     [eax], ebx
.text:00403FEB
.text:00403FEB loc_403FEB:                             ; CODE XREF: sub_403E80+F5↑j
.text:00403FEB                 call    _errno
.text:00403FF0                 mov     ebp, [esp+2Ch+var_14]
.text:00403FF4                 mov     [eax], ebp
.text:00403FF6                 add     esp, 1Ch
.text:00403FF9                 mov     eax, edi
.text:00403FFB                 pop     ebx
.text:00403FFC                 pop     esi
.text:00403FFD                 pop     edi
.text:00403FFE                 pop     ebp
.text:00403FFF                 retn
.text:00404000 ; ---------------------------------------------------------------------------
.text:00404000
.text:00404000 loc_404000:                             ; CODE XREF: sub_403E80+135↑j
.text:00404000                 mov     esi, offset dword_407140
.text:00404005                 jmp     short loc_403FB7
.text:00404007 ; ---------------------------------------------------------------------------
.text:00404007
.text:00404007 loc_404007:                             ; CODE XREF: sub_403E80+B7↑j
.text:00404007                 mov     esi, offset dword_407140
.text:0040400C                 jmp     loc_403F3D
.text:00404011 ; ---------------------------------------------------------------------------
.text:00404011
.text:00404011 loc_404011:                             ; CODE XREF: sub_403E80+45↑j
.text:00404011                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404018                 call    sub_404590
.text:0040401D                 mov     off_40602C, eax
.text:00404022                 mov     edi, dword_406024
.text:00404028                 mov     ebx, eax
.text:0040402A                 mov     ecx, off_406028
.text:00404030                 mov     [eax], edi
.text:00404032                 mov     [eax+4], ecx
.text:00404035                 jmp     loc_403ECB
.text:0040403A ; ---------------------------------------------------------------------------
.text:0040403A
.text:0040403A loc_40403A:                             ; CODE XREF: sub_403E80+18↑j
.text:0040403A                 call    abort
.text:0040403F ; ---------------------------------------------------------------------------
.text:0040403F
.text:0040403F loc_40403F:                             ; CODE XREF: sub_403E80+33↑j
.text:0040403F                 call    sub_404840
.text:0040403F sub_403E80      endp
.text:0040403F
.text:0040403F ; ---------------------------------------------------------------------------
.text:00404044                 align 10h
.text:00404050 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404050                                         ; DATA XREF: .data:Buffer↓o
.text:00404082 ; const char Format[12]
.text:00404082 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404340+50↓o
.text:0040408E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040409E                 db 12h dup(90h)
.text:004040B0
.text:004040B0 ; =============== S U B R O U T I N E =======================================
.text:004040B0
.text:004040B0
.text:004040B0 sub_4040B0      proc near               ; DATA XREF: sub_404340+100↓o
.text:004040B0                 push    esp
.text:004040B1                 push    69207369h
.text:004040B6                 jnb     short loc_4040D8
.text:004040B8                 db      66h
.text:004040B8                 jb      short near ptr 4120h
.text:004040BB                 and     gs:[ebx+6Fh], dh
.text:004040BF                 db      66h
.text:004040BF                 jz      short near ptr 4139h
.text:004040C2                 popa
.text:004040C3                 jb      short loc_40412A
.text:004040C5                 cmp     esp, [eax]
.text:004040C7                 jnb     short near ptr loc_40412C+2
.text:004040C9                 and     gs:[eax+ebp*2+65h], dh
.text:004040CE                 and     [ebx+6Fh], dh
.text:004040D1                 jnz     short loc_404145
.text:004040D3                 arpl    [ebp+20h], sp
.text:004040D6                 outsw
.text:004040D8
.text:004040D8 loc_4040D8:                             ; CODE XREF: sub_4040B0+6↑j
.text:004040D8                 jb      short loc_4040FA
.text:004040DA                 arpl    [edi+70h], bp
.text:004040DD                 jns     short loc_404148
.text:004040DF                 outsb
.text:004040E0                 and     [bp+di+6Fh], ah
.text:004040E4                 outsb
.text:004040E5                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:004040EE                 and     [eax+ebp*2+65h], dl
.text:004040F2                 jb      short near ptr loc_404158+1
.text:004040F4                 and     [ecx+73h], ch
.text:004040F7                 and     [esi+4Fh], cl
.text:004040FA
.text:004040FA loc_4040FA:                             ; CODE XREF: sub_4040B0:loc_4040D8↑j
.text:004040FA                 or      dh, [edi+61h]
.text:004040FD                 jb      short loc_404171
.text:004040FF                 popa
.text:00404100                 outsb
.text:00404101                 jz      short loc_40417C
.text:00404103                 cmp     esp, [eax]
.text:00404105                 outsb
.text:00404106                 outsd
.text:00404107                 jz      short loc_404129
.text:00404109                 db      65h
.text:00404109                 jbe     short loc_404171
.text:0040410C                 outsb
.text:0040410D                 and     [esi+6Fh], ah
.text:00404110                 jb      short near ptr loc_404130+2
.text:00404112                 dec     ebp
.text:00404113                 inc     ebp
.text:00404114                 push    edx
.text:00404115                 inc     ebx
.text:00404116                 dec     eax
.text:00404117                 inc     ecx
.text:00404118                 dec     esi
.text:00404119                 push    esp
.text:0040411A                 inc     ecx
.text:0040411B                 inc     edx
.text:0040411C                 dec     ecx
.text:0040411D                 dec     esp
.text:0040411E                 dec     ecx
.text:0040411F                 push    esp
.text:00404120                 pop     ecx
.text:00404121                 and     [edi+72h], ch
.text:00404124                 and     [esi+49h], al
.text:00404127                 push    esp
.text:00404128                 dec     esi
.text:00404129
.text:00404129 loc_404129:                             ; CODE XREF: sub_4040B0+57↑j
.text:00404129                 inc     ebp
.text:0040412A
.text:0040412A loc_40412A:                             ; CODE XREF: sub_4040B0+13↑j
.text:0040412A                 push    ebx
.text:0040412B                 push    ebx
.text:0040412C
.text:0040412C loc_40412C:                             ; CODE XREF: sub_4040B0+17↑j
.text:0040412C                 and     [esi+4Fh], al
.text:0040412F                 push    edx
.text:00404130
.text:00404130 loc_404130:                             ; CODE XREF: sub_4040B0+60↑j
.text:00404130                 and     [ecx+20h], al
.text:00404133                 push    eax
.text:00404134                 inc     ecx
.text:00404135                 push    edx
.text:00404136                 push    esp
.text:00404137                 dec     ecx
.text:00404138                 inc     ebx
.text:00404139                 push    ebp
.text:0040413A                 dec     esp
.text:0040413B                 inc     ecx
.text:0040413C                 push    edx
.text:0040413D                 and     [eax+55h], dl
.text:00404140                 push    edx
.text:00404141                 push    eax
.text:00404142                 dec     edi
.text:00404143                 push    ebx
.text:00404144                 inc     ebp
.text:00404145
.text:00404145 loc_404145:                             ; CODE XREF: sub_4040B0+21↑j
.text:00404145                 or      al, cs:[eax]
.text:00404148
.text:00404148 loc_404148:                             ; CODE XREF: sub_4040B0+2D↑j
.text:00404148                                         ; DATA XREF: sub_404340:loc_404481↓o
.text:00404148                 push    edi
.text:00404149                 jb      short near ptr loc_4041B3+1
.text:0040414B                 jz      short near ptr loc_4041C0+1
.text:0040414D                 outs    dx, byte ptr gs:[esi]
.text:0040414F                 and     [edx+79h], ah
.text:00404152                 and     ds:6E612073h, ah
.text:00404158
.text:00404158 loc_404158:                             ; CODE XREF: sub_4040B0+42↑j
.text:00404158                 and     fs:0A2E73h, ah
.text:0040415F
.text:0040415F loc_40415F:                             ; DATA XREF: sub_404340:loc_40448D↓o
.text:0040415F                 push    edi
.text:00404160                 jb      short near ptr loc_4041CA+1
.text:00404162                 jz      short loc_4041D8
.text:00404164                 outs    dx, byte ptr gs:[esi]
.text:00404166                 and     [edx+79h], ah
.text:00404169                 and     ds:25202C73h, ah
.text:0040416F                 jnb     short near ptr loc_40419A+3
.text:00404171
.text:00404171 loc_404171:                             ; CODE XREF: sub_4040B0+4D↑j
.text:00404171                                         ; sub_4040B0+59↑j
.text:00404171                 and     [ecx+6Eh], ah
.text:00404174                 and     fs:0A2E73h, ah
.text:0040417B                 nop
.text:0040417C
.text:0040417C loc_40417C:                             ; CODE XREF: sub_4040B0+51↑j
.text:0040417C                 nop
.text:0040417D                 nop
.text:0040417E                 nop
.text:0040417F                 nop
.text:00404180                 nop
.text:00404181                 nop
.text:00404182                 nop
.text:00404183                 nop
.text:00404184                 nop
.text:00404185                 nop
.text:00404186                 nop
.text:00404187                 nop
.text:00404188                 nop
.text:00404189                 nop
.text:0040418A                 nop
.text:0040418B                 nop
.text:0040418C                 nop
.text:0040418D                 nop
.text:0040418E                 nop
.text:0040418F                 nop
.text:0040418F sub_4040B0      endp ; sp-analysis failed
.text:0040418F
.text:00404190
.text:00404190 ; =============== S U B R O U T I N E =======================================
.text:00404190
.text:00404190
.text:00404190 sub_404190      proc near               ; DATA XREF: sub_404340:loc_404499↓o
.text:00404190                 push    edi
.text:00404191                 jb      short near ptr loc_4041FA+2
.text:00404193                 jz      short near ptr loc_404208+1
.text:00404195                 outs    dx, byte ptr gs:[esi]
.text:00404197                 and     [edx+79h], ah
.text:0040419A
.text:0040419A loc_40419A:                             ; CODE XREF: sub_4040B0+BF↑j
.text:0040419A                 and     ds:25202C73h, ah
.text:004041A0                 jnb     short near ptr loc_4041CD+1
.text:004041A2                 and     ds:610A2C73h, ah
.text:004041A8                 outsb
.text:004041A9                 and     fs:0A2E73h, ah
.text:004041B0
.text:004041B0 loc_4041B0:                             ; DATA XREF: sub_404340:loc_4044A5↓o
.text:004041B0                 push    edi
.text:004041B1                 jb      short loc_40421C
.text:004041B3
.text:004041B3 loc_4041B3:                             ; CODE XREF: sub_4040B0+99↑j
.text:004041B3                 jz      short loc_404229
.text:004041B5                 outs    dx, byte ptr gs:[esi]
.text:004041B7                 and     [edx+79h], ah
.text:004041BA                 and     ds:25202C73h, ah
.text:004041C0
.text:004041C0 loc_4041C0:                             ; CODE XREF: sub_4040B0+9B↑j
.text:004041C0                 jnb     short loc_4041EE
.text:004041C2                 and     ds:250A2C73h, ah
.text:004041C8                 jnb     short near ptr loc_4041F5+1
.text:004041CA
.text:004041CA loc_4041CA:                             ; CODE XREF: sub_4040B0+B0↑j
.text:004041CA                 and     [ecx+6Eh], ah
.text:004041CD
.text:004041CD loc_4041CD:                             ; CODE XREF: sub_404190+10↑j
.text:004041CD                 and     fs:0A2E73h, ah
.text:004041D4                 nop
.text:004041D5                 nop
.text:004041D6                 nop
.text:004041D7                 nop
.text:004041D8
.text:004041D8 loc_4041D8:                             ; CODE XREF: sub_4040B0+B2↑j
.text:004041D8                 nop
.text:004041D9                 nop
.text:004041DA                 nop
.text:004041DB                 nop
.text:004041DC                 nop
.text:004041DD                 nop
.text:004041DE                 nop
.text:004041DF                 nop
.text:004041E0                 nop
.text:004041E1                 nop
.text:004041E2                 nop
.text:004041E3                 nop
.text:004041E4                 nop
.text:004041E5                 nop
.text:004041E6                 nop
.text:004041E7                 nop
.text:004041E8                 nop
.text:004041E9                 nop
.text:004041EA                 nop
.text:004041EB                 nop
.text:004041EC                 nop
.text:004041ED                 nop
.text:004041EE
.text:004041EE loc_4041EE:                             ; CODE XREF: sub_404190:loc_4041C0↑j
.text:004041EE                 nop
.text:004041EF                 nop
.text:004041EF sub_404190      endp ; sp-analysis failed
.text:004041EF
.text:004041F0
.text:004041F0 ; =============== S U B R O U T I N E =======================================
.text:004041F0
.text:004041F0
.text:004041F0 sub_4041F0      proc near               ; DATA XREF: sub_404340:loc_4044B1↓o
.text:004041F0                 push    edi
.text:004041F1                 jb      short loc_40425C
.text:004041F3                 jz      short loc_404269
.text:004041F5
.text:004041F5 loc_4041F5:                             ; CODE XREF: sub_404190+38↑j
.text:004041F5                 outs    dx, byte ptr gs:[esi]
.text:004041F7                 and     [edx+79h], ah
.text:004041FA
.text:004041FA loc_4041FA:                             ; CODE XREF: sub_404190+1↑j
.text:004041FA                 and     ds:25202C73h, ah
.text:00404200                 jnb     short loc_40422E
.text:00404202                 and     ds:250A2C73h, ah
.text:00404208
.text:00404208 loc_404208:                             ; CODE XREF: sub_404190+3↑j
.text:00404208                 jnb     short near ptr loc_404235+1
.text:0040420A                 and     ds:61202C73h, ah
.text:00404210                 outsb
.text:00404211                 and     fs:0A2E73h, ah
.text:00404218                 nop
.text:00404219                 nop
.text:0040421A                 nop
.text:0040421B                 nop
.text:0040421C
.text:0040421C loc_40421C:                             ; CODE XREF: sub_404190+21↑j
.text:0040421C                 nop
.text:0040421D                 nop
.text:0040421E                 nop
.text:0040421F                 nop
.text:00404220                 nop
.text:00404221                 nop
.text:00404222                 nop
.text:00404223                 nop
.text:00404224                 nop
.text:00404225                 nop
.text:00404226                 nop
.text:00404227                 nop
.text:00404228                 nop
.text:00404229
.text:00404229 loc_404229:                             ; CODE XREF: sub_404190:loc_4041B3↑j
.text:00404229                 nop
.text:0040422A                 nop
.text:0040422B                 nop
.text:0040422C                 nop
.text:0040422D                 nop
.text:0040422E
.text:0040422E loc_40422E:                             ; CODE XREF: sub_4041F0+10↑j
.text:0040422E                 nop
.text:0040422F                 nop
.text:0040422F sub_4041F0      endp ; sp-analysis failed
.text:0040422F
.text:00404230
.text:00404230 ; =============== S U B R O U T I N E =======================================
.text:00404230
.text:00404230
.text:00404230 sub_404230      proc near               ; DATA XREF: sub_404340:loc_4044BD↓o
.text:00404230                 push    edi
.text:00404231                 jb      short near ptr loc_404299+3
.text:00404233                 jz      short loc_4042A9
.text:00404235
.text:00404235 loc_404235:                             ; CODE XREF: sub_4041F0:loc_404208↑j
.text:00404235                 outs    dx, byte ptr gs:[esi]
.text:00404237                 and     [edx+79h], ah
.text:0040423A                 and     ds:25202C73h, ah
.text:00404240                 jnb     short loc_40426E
.text:00404242                 and     ds:250A2C73h, ah
.text:00404248                 jnb     short near ptr loc_404275+1
.text:0040424A                 and     ds:25202C73h, ah
.text:00404250                 jnb     short near ptr loc_40427A+4
.text:00404252                 and     [ecx+6Eh], ah
.text:00404255                 and     fs:0A2E73h, ah
.text:0040425C
.text:0040425C loc_40425C:                             ; CODE XREF: sub_4041F0+1↑j
.text:0040425C                 nop
.text:0040425D                 nop
.text:0040425E                 nop
.text:0040425F                 nop
.text:00404260                 nop
.text:00404261                 nop
.text:00404262                 nop
.text:00404263                 nop
.text:00404264                 nop
.text:00404265                 nop
.text:00404266                 nop
.text:00404267                 nop
.text:00404268                 nop
.text:00404269
.text:00404269 loc_404269:                             ; CODE XREF: sub_4041F0+3↑j
.text:00404269                 nop
.text:0040426A                 nop
.text:0040426B                 nop
.text:0040426C                 nop
.text:0040426D                 nop
.text:0040426E
.text:0040426E loc_40426E:                             ; CODE XREF: sub_404230+10↑j
.text:0040426E                 nop
.text:0040426F                 nop
.text:0040426F sub_404230      endp ; sp-analysis failed
.text:0040426F
.text:00404270
.text:00404270 ; =============== S U B R O U T I N E =======================================
.text:00404270
.text:00404270
.text:00404270 sub_404270      proc near               ; DATA XREF: sub_404340:loc_4044C9↓o
.text:00404270                 push    edi
.text:00404271                 jb      short near ptr loc_4042DA+2
.text:00404273                 jz      short near ptr loc_4042E4+5
.text:00404275
.text:00404275 loc_404275:                             ; CODE XREF: sub_404230+18↑j
.text:00404275                 outs    dx, byte ptr gs:[esi]
.text:00404277                 and     [edx+79h], ah
.text:0040427A
.text:0040427A loc_40427A:                             ; CODE XREF: sub_404230+20↑j
.text:0040427A                 and     ds:25202C73h, ah
.text:00404280                 jnb     short loc_4042AE
.text:00404282                 and     ds:250A2C73h, ah
.text:00404288                 jnb     short near ptr loc_4042B5+1
.text:0040428A                 and     ds:25202C73h, ah
.text:00404290                 jnb     short near ptr loc_4042BA+4
.text:00404292                 and     ds:610A2C73h, ah
.text:00404298                 outsb
.text:00404299
.text:00404299 loc_404299:                             ; CODE XREF: sub_404230+1↑j
.text:00404299                 and     fs:0A2E73h, ah
.text:004042A0                 nop
.text:004042A1                 nop
.text:004042A2                 nop
.text:004042A3                 nop
.text:004042A4                 nop
.text:004042A5                 nop
.text:004042A6                 nop
.text:004042A7                 nop
.text:004042A8                 nop
.text:004042A9
.text:004042A9 loc_4042A9:                             ; CODE XREF: sub_404230+3↑j
.text:004042A9                 nop
.text:004042AA                 nop
.text:004042AB                 nop
.text:004042AC                 nop
.text:004042AD                 nop
.text:004042AE
.text:004042AE loc_4042AE:                             ; CODE XREF: sub_404270+10↑j
.text:004042AE                 nop
.text:004042AF                 nop
.text:004042AF sub_404270      endp ; sp-analysis failed
.text:004042AF
.text:004042B0
.text:004042B0 ; =============== S U B R O U T I N E =======================================
.text:004042B0
.text:004042B0
.text:004042B0 sub_4042B0      proc near               ; DATA XREF: sub_404340:loc_4044D5↓o
.text:004042B0                 push    edi
.text:004042B1                 jb      short near ptr loc_40431A+2
.text:004042B3                 jz      short near ptr loc_404325+4
.text:004042B5
.text:004042B5 loc_4042B5:                             ; CODE XREF: sub_404270+18↑j
.text:004042B5                 outs    dx, byte ptr gs:[esi]
.text:004042B7                 and     [edx+79h], ah
.text:004042BA
.text:004042BA loc_4042BA:                             ; CODE XREF: sub_404270+20↑j
.text:004042BA                 and     ds:25202C73h, ah
.text:004042C0                 jnb     short near ptr loc_4042EA+4
.text:004042C2                 and     ds:250A2C73h, ah
.text:004042C8                 jnb     short near ptr loc_4042F5+1
.text:004042CA                 and     ds:25202C73h, ah
.text:004042D0                 jnb     short near ptr loc_4042FA+4
.text:004042D2                 and     ds:250A2C73h, ah
.text:004042D8                 jnb     short near ptr loc_404302+4
.text:004042DA
.text:004042DA loc_4042DA:                             ; CODE XREF: sub_404270+1↑j
.text:004042DA                 and     [ecx+6Eh], ah
.text:004042DD                 and     fs:0A2E73h, ah
.text:004042E4
.text:004042E4 loc_4042E4:                             ; CODE XREF: sub_404270+3↑j
.text:004042E4                 lea     esi, [esi+0]
.text:004042EA
.text:004042EA loc_4042EA:                             ; CODE XREF: sub_4042B0+10↑j
.text:004042EA                 lea     edi, [edi+0]
.text:004042F0
.text:004042F0 loc_4042F0:                             ; DATA XREF: sub_404340:def_4043AD↓o
.text:004042F0                 push    edi
.text:004042F1                 jb      short near ptr loc_40435B+1
.text:004042F3                 jz      short near ptr loc_404368+1
.text:004042F5
.text:004042F5 loc_4042F5:                             ; CODE XREF: sub_4042B0+18↑j
.text:004042F5                 outs    dx, byte ptr gs:[esi]
.text:004042F7                 and     [edx+79h], ah
.text:004042FA
.text:004042FA loc_4042FA:                             ; CODE XREF: sub_4042B0+20↑j
.text:004042FA                 and     ds:25202C73h, ah
.text:00404300                 jnb     short near ptr loc_40432C+2
.text:00404302
.text:00404302 loc_404302:                             ; CODE XREF: sub_4042B0+28↑j
.text:00404302                 and     ds:250A2C73h, ah
.text:00404308                 jnb     short near ptr loc_404333+3
.text:0040430A                 and     ds:25202C73h, ah
.text:00404310                 jnb     short near ptr loc_404339+5
.text:00404312                 and     ds:250A2C73h, ah
.text:00404318                 jnb     short near ptr loc_404344+2
.text:0040431A
.text:0040431A loc_40431A:                             ; CODE XREF: sub_4042B0+1↑j
.text:0040431A                 and     ds:61202C73h, ah
.text:00404320                 outsb
.text:00404321                 and     fs:[edi+74h], ch
.text:00404325
.text:00404325 loc_404325:                             ; CODE XREF: sub_4042B0+3↑j
.text:00404325                 push    2E737265h
.text:0040432A                 or      al, [eax]
.text:0040432C
.text:0040432C loc_40432C:                             ; CODE XREF: sub_4042B0+50↑j
.text:0040432C                                         ; DATA XREF: sub_404340+1B5↓o
.text:0040432C                 and     eax, 73252073h
.text:00404331                 or      al, [eax]
.text:00404333
.text:00404333 loc_404333:                             ; CODE XREF: sub_4042B0+58↑j
.text:00404333                 lea     esi, [esi+0]
.text:00404339
.text:00404339 loc_404339:                             ; CODE XREF: sub_4042B0+60↑j
.text:00404339                 lea     edi, [edi+0]
.text:00404339 sub_4042B0      endp ; sp-analysis failed
.text:00404339
.text:00404340
.text:00404340 ; =============== S U B R O U T I N E =======================================
.text:00404340
.text:00404340
.text:00404340 ; int __cdecl sub_404340(FILE *, FILE *, int, int, va_list)
.text:00404340 sub_404340      proc near               ; CODE XREF: sub_402AE0+A5↑p
.text:00404340                                         ; .text:0040453A↓p
.text:00404340
.text:00404340 Stream          = dword ptr -2Ch
.text:00404340 Format          = dword ptr -28h
.text:00404340 ArgList         = dword ptr -24h
.text:00404340 var_20          = dword ptr -20h
.text:00404340 var_1C          = dword ptr -1Ch
.text:00404340 var_14          = dword ptr -14h
.text:00404340 arg_0           = dword ptr  4
.text:00404340 arg_4           = dword ptr  8
.text:00404340 arg_8           = dword ptr  0Ch
.text:00404340 arg_C           = dword ptr  10h
.text:00404340 arg_10          = dword ptr  14h
.text:00404340
.text:00404340                 push    ebp
.text:00404341                 push    edi
.text:00404342                 push    esi
.text:00404343                 push    ebx
.text:00404344
.text:00404344 loc_404344:                             ; CODE XREF: sub_4042B0+68↑j
.text:00404344                 sub     esp, 1Ch
.text:00404347                 xor     ebx, ebx
.text:00404349                 mov     edi, [esp+2Ch+arg_10]
.text:0040434D                 mov     edx, [esp+2Ch+arg_8]
.text:00404351                 mov     esi, [esp+2Ch+arg_0]
.text:00404355                 mov     eax, [edi]
.text:00404357                 mov     ecx, [esp+2Ch+arg_4]
.text:0040435B
.text:0040435B loc_40435B:                             ; CODE XREF: sub_4042B0+41↑j
.text:0040435B                 mov     [esp+2Ch+var_14], edx
.text:0040435F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404363                 lea     edx, [edi+4]
.text:00404366                 test    eax, eax
.text:00404368
.text:00404368 loc_404368:                             ; CODE XREF: sub_4042B0+43↑j
.text:00404368                 jz      short loc_40437C
.text:0040436A                 lea     esi, [esi+0]
.text:00404370
.text:00404370 loc_404370:                             ; CODE XREF: sub_404340+3A↓j
.text:00404370                 mov     eax, edx
.text:00404372                 inc     ebx
.text:00404373                 mov     eax, [eax]
.text:00404375                 add     edx, 4
.text:00404378                 test    eax, eax
.text:0040437A                 jnz     short loc_404370
.text:0040437C
.text:0040437C loc_40437C:                             ; CODE XREF: sub_404340:loc_404368↑j
.text:0040437C                 test    ecx, ecx
.text:0040437E                 jz      loc_4044ED
.text:00404384                 mov     [esp+2Ch+var_1C], ebp
.text:00404388                 mov     edx, [esp+2Ch+var_14]
.text:0040438C                 mov     [esp+2Ch+ArgList], ecx
.text:00404390                 mov     [esp+2Ch+Format], offset Format ; Format
.text:00404398                 mov     [esp+2Ch+var_20], edx
.text:0040439C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040439F                 call    fprintf
.text:004043A4
.text:004043A4 loc_4043A4:                             ; CODE XREF: sub_404340+1C9↓j
.text:004043A4                 cmp     ebx, 9          ; switch 10 cases
.text:004043A7                 ja      def_4043AD      ; jumptable 004043AD default case
.text:004043AD                 jmp     ds:jpt_4043AD[ebx*4] ; switch jump
.text:004043AD ; ---------------------------------------------------------------------------
.text:004043B4 jpt_4043AD      dd offset loc_4043DC    ; DATA XREF: sub_404340+6D↑r
.text:004043B4                 dd offset loc_4043E1    ; jump table for switch statement
.text:004043B4                 dd offset loc_404481
.text:004043B4                 dd offset loc_40448D
.text:004043B4                 dd offset loc_404499
.text:004043B4                 dd offset loc_4044A5
.text:004043B4                 dd offset loc_4044B1
.text:004043B4                 dd offset loc_4044BD
.text:004043B4                 dd offset loc_4044C9
.text:004043B4                 dd offset loc_4044D5
.text:004043DC ; ---------------------------------------------------------------------------
.text:004043DC
.text:004043DC loc_4043DC:                             ; CODE XREF: sub_404340+6D↑j
.text:004043DC                                         ; DATA XREF: sub_404340:jpt_4043AD↑o
.text:004043DC                 call    abort           ; jumptable 004043AD case 0
.text:004043E1 ; ---------------------------------------------------------------------------
.text:004043E1
.text:004043E1 loc_4043E1:                             ; CODE XREF: sub_404340+6D↑j
.text:004043E1                                         ; DATA XREF: sub_404340:jpt_4043AD↑o
.text:004043E1                 mov     [esp+2Ch+Stream], 40408Eh ; jumptable 004043AD case 1
.text:004043E8                 nop
.text:004043E9                 lea     esi, [esi+0]
.text:004043F0
.text:004043F0 loc_4043F0:                             ; CODE XREF: sub_404340+148↓j
.text:004043F0                                         ; sub_404340+154↓j ...
.text:004043F0                 call    ds:libintl_gettext
.text:004043F6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:004043FA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004043FD                 mov     [esp+2Ch+Format], eax ; Format
.text:00404401                 call    vfprintf
.text:00404406                 mov     ebx, [esi+4]
.text:00404409                 dec     ebx
.text:0040440A                 test    ebx, ebx
.text:0040440C                 mov     [esi+4], ebx
.text:0040440F                 js      short loc_40446F
.text:00404411                 mov     edi, [esi]
.text:00404413                 mov     byte ptr [edi], 0Ah
.text:00404416                 inc     dword ptr [esi]
.text:00404418
.text:00404418 loc_404418:                             ; CODE XREF: sub_404340+13F↓j
.text:00404418                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040441C                 mov     edx, Buffer
.text:00404422                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00404425                 call    fputs
.text:0040442A                 mov     ebp, [esi+4]
.text:0040442D                 dec     ebp
.text:0040442E                 test    ebp, ebp
.text:00404430                 mov     [esi+4], ebp
.text:00404433                 js      short loc_40445D
.text:00404435                 mov     ecx, [esi]
.text:00404437                 mov     byte ptr [ecx], 0Ah
.text:0040443A                 inc     dword ptr [esi]
.text:0040443C
.text:0040443C loc_40443C:                             ; CODE XREF: sub_404340+12D↓j
.text:0040443C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404440                 mov     [esp+2Ch+Stream], offset sub_4040B0
.text:00404447                 call    ds:libintl_gettext
.text:0040444D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404451                 add     esp, 1Ch
.text:00404454                 pop     ebx
.text:00404455                 pop     esi
.text:00404456                 pop     edi
.text:00404457                 pop     ebp
.text:00404458                 jmp     fputs
.text:0040445D ; ---------------------------------------------------------------------------
.text:0040445D
.text:0040445D loc_40445D:                             ; CODE XREF: sub_404340+F3↑j
.text:0040445D                 mov     [esp+2Ch+Format], esi ; File
.text:00404461                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404468                 call    _flsbuf
.text:0040446D                 jmp     short loc_40443C
.text:0040446F ; ---------------------------------------------------------------------------
.text:0040446F
.text:0040446F loc_40446F:                             ; CODE XREF: sub_404340+CF↑j
.text:0040446F                 mov     [esp+2Ch+Format], esi ; File
.text:00404473                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040447A                 call    _flsbuf
.text:0040447F                 jmp     short loc_404418
.text:00404481 ; ---------------------------------------------------------------------------
.text:00404481
.text:00404481 loc_404481:                             ; CODE XREF: sub_404340+6D↑j
.text:00404481                                         ; DATA XREF: sub_404340:jpt_4043AD↑o
.text:00404481                 mov     [esp+2Ch+Stream], offset loc_404148 ; jumptable 004043AD case 2
.text:00404488                 jmp     loc_4043F0
.text:0040448D ; ---------------------------------------------------------------------------
.text:0040448D
.text:0040448D loc_40448D:                             ; CODE XREF: sub_404340+6D↑j
.text:0040448D                                         ; DATA XREF: sub_404340:jpt_4043AD↑o
.text:0040448D                 mov     [esp+2Ch+Stream], offset loc_40415F ; jumptable 004043AD case 3
.text:00404494                 jmp     loc_4043F0
.text:00404499 ; ---------------------------------------------------------------------------
.text:00404499
.text:00404499 loc_404499:                             ; CODE XREF: sub_404340+6D↑j
.text:00404499                                         ; DATA XREF: sub_404340:jpt_4043AD↑o
.text:00404499                 mov     [esp+2Ch+Stream], offset sub_404190 ; jumptable 004043AD case 4
.text:004044A0                 jmp     loc_4043F0
.text:004044A5 ; ---------------------------------------------------------------------------
.text:004044A5
.text:004044A5 loc_4044A5:                             ; CODE XREF: sub_404340+6D↑j
.text:004044A5                                         ; DATA XREF: sub_404340:jpt_4043AD↑o
.text:004044A5                 mov     [esp+2Ch+Stream], offset loc_4041B0 ; jumptable 004043AD case 5
.text:004044AC                 jmp     loc_4043F0
.text:004044B1 ; ---------------------------------------------------------------------------
.text:004044B1
.text:004044B1 loc_4044B1:                             ; CODE XREF: sub_404340+6D↑j
.text:004044B1                                         ; DATA XREF: sub_404340:jpt_4043AD↑o
.text:004044B1                 mov     [esp+2Ch+Stream], offset sub_4041F0 ; jumptable 004043AD case 6
.text:004044B8                 jmp     loc_4043F0
.text:004044BD ; ---------------------------------------------------------------------------
.text:004044BD
.text:004044BD loc_4044BD:                             ; CODE XREF: sub_404340+6D↑j
.text:004044BD                                         ; DATA XREF: sub_404340:jpt_4043AD↑o
.text:004044BD                 mov     [esp+2Ch+Stream], offset sub_404230 ; jumptable 004043AD case 7
.text:004044C4                 jmp     loc_4043F0
.text:004044C9 ; ---------------------------------------------------------------------------
.text:004044C9
.text:004044C9 loc_4044C9:                             ; CODE XREF: sub_404340+6D↑j
.text:004044C9                                         ; DATA XREF: sub_404340:jpt_4043AD↑o
.text:004044C9                 mov     [esp+2Ch+Stream], offset sub_404270 ; jumptable 004043AD case 8
.text:004044D0                 jmp     loc_4043F0
.text:004044D5 ; ---------------------------------------------------------------------------
.text:004044D5
.text:004044D5 loc_4044D5:                             ; CODE XREF: sub_404340+6D↑j
.text:004044D5                                         ; DATA XREF: sub_404340:jpt_4043AD↑o
.text:004044D5                 mov     [esp+2Ch+Stream], offset sub_4042B0 ; jumptable 004043AD case 9
.text:004044DC                 jmp     loc_4043F0
.text:004044E1 ; ---------------------------------------------------------------------------
.text:004044E1
.text:004044E1 def_4043AD:                             ; CODE XREF: sub_404340+67↑j
.text:004044E1                 mov     [esp+2Ch+Stream], offset loc_4042F0 ; jumptable 004043AD default case
.text:004044E8                 jmp     loc_4043F0
.text:004044ED ; ---------------------------------------------------------------------------
.text:004044ED
.text:004044ED loc_4044ED:                             ; CODE XREF: sub_404340+3E↑j
.text:004044ED                 mov     [esp+2Ch+var_20], ebp
.text:004044F1                 mov     ecx, [esp+2Ch+var_14]
.text:004044F5                 mov     [esp+2Ch+Format], offset loc_40432C ; Format
.text:004044FD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404500                 mov     [esp+2Ch+ArgList], ecx
.text:00404504                 call    fprintf
.text:00404509                 jmp     loc_4043A4
.text:00404509 sub_404340      endp
.text:00404509
.text:00404509 ; ---------------------------------------------------------------------------
.text:0040450E                 align 10h
.text:00404510                 sub     esp, 1Ch
.text:00404513                 mov     edx, [esp+2Ch]
.text:00404517                 lea     ecx, [esp+30h]
.text:0040451B                 mov     [esp+10h], ecx
.text:0040451F                 mov     ecx, [esp+28h]
.text:00404523                 mov     [esp+0Ch], edx
.text:00404527                 mov     edx, [esp+24h]
.text:0040452B                 mov     [esp+8], ecx
.text:0040452F                 mov     [esp+4], edx
.text:00404533                 mov     edx, [esp+20h]
.text:00404537                 mov     [esp], edx
.text:0040453A                 call    sub_404340
.text:0040453F                 add     esp, 1Ch
.text:00404542                 retn
.text:00404542 ; ---------------------------------------------------------------------------
.text:00404543                 align 10h
.text:00404550                 sub     esp, 0Ch
.text:00404553                 xor     edx, edx
.text:00404555                 mov     ecx, [esp+14h]
.text:00404559                 mov     [esp+8], ebx
.text:0040455D                 mov     eax, 0FFFFFFFFh
.text:00404562                 mov     ebx, [esp+10h]
.text:00404566                 div     ecx
.text:00404568                 cmp     eax, ebx
.text:0040456A                 jb      short loc_404589
.text:0040456C                 mov     edx, ebx
.text:0040456E                 imul    edx, ecx
.text:00404571                 mov     [esp], edx
.text:00404574                 call    malloc
.text:00404579                 test    eax, eax
.text:0040457B                 jz      short loc_404585
.text:0040457D
.text:0040457D loc_40457D:                             ; CODE XREF: .text:00404587↓j
.text:0040457D                 mov     ebx, [esp+8]
.text:00404581                 add     esp, 0Ch
.text:00404584                 retn
.text:00404585 ; ---------------------------------------------------------------------------
.text:00404585
.text:00404585 loc_404585:                             ; CODE XREF: .text:0040457B↑j
.text:00404585                 test    ebx, ebx
.text:00404587                 jz      short loc_40457D
.text:00404589
.text:00404589 loc_404589:                             ; CODE XREF: .text:0040456A↑j
.text:00404589                 call    sub_404840
.text:00404589 ; ---------------------------------------------------------------------------
.text:0040458E                 align 10h
.text:00404590
.text:00404590 ; =============== S U B R O U T I N E =======================================
.text:00404590
.text:00404590
.text:00404590 ; int __cdecl sub_404590(size_t)
.text:00404590 sub_404590      proc near               ; CODE XREF: .text:004037B9↑p
.text:00404590                                         ; .text:00403996↑p ...
.text:00404590
.text:00404590 Size            = dword ptr -0Ch
.text:00404590 var_4           = dword ptr -4
.text:00404590 arg_0           = dword ptr  4
.text:00404590
.text:00404590                 sub     esp, 0Ch
.text:00404593                 mov     [esp+0Ch+var_4], ebx
.text:00404597                 mov     ebx, [esp+0Ch+arg_0]
.text:0040459B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040459E                 call    malloc
.text:004045A3                 test    eax, eax
.text:004045A5                 jz      short loc_4045B0
.text:004045A7
.text:004045A7 loc_4045A7:                             ; CODE XREF: sub_404590+22↓j
.text:004045A7                 mov     ebx, [esp+0Ch+var_4]
.text:004045AB                 add     esp, 0Ch
.text:004045AE                 retn
.text:004045AE ; ---------------------------------------------------------------------------
.text:004045AF                 align 10h
.text:004045B0
.text:004045B0 loc_4045B0:                             ; CODE XREF: sub_404590+15↑j
.text:004045B0                 test    ebx, ebx
.text:004045B2                 jz      short loc_4045A7
.text:004045B4                 call    sub_404840
.text:004045B4 sub_404590      endp
.text:004045B4
.text:004045B4 ; ---------------------------------------------------------------------------
.text:004045B9                 align 10h
.text:004045C0                 sub     esp, 1Ch
.text:004045C3                 xor     edx, edx
.text:004045C5                 mov     eax, 0FFFFFFFFh
.text:004045CA                 mov     [esp+14h], ebx
.text:004045CE                 mov     ecx, [esp+20h]
.text:004045D2                 mov     ebx, [esp+28h]
.text:004045D6                 mov     [esp+18h], esi
.text:004045DA                 mov     esi, [esp+24h]
.text:004045DE                 div     ebx
.text:004045E0                 cmp     eax, esi
.text:004045E2                 jb      short loc_404614
.text:004045E4                 mov     [esp], ecx
.text:004045E7                 mov     edx, esi
.text:004045E9                 imul    edx, ebx
.text:004045EC                 mov     [esp+4], edx
.text:004045F0                 call    realloc
.text:004045F5                 test    eax, eax
.text:004045F7                 mov     ecx, eax
.text:004045F9                 jz      short loc_404610
.text:004045FB
.text:004045FB loc_4045FB:                             ; CODE XREF: .text:00404612↓j
.text:004045FB                 mov     ebx, [esp+14h]
.text:004045FF                 mov     eax, ecx
.text:00404601                 mov     esi, [esp+18h]
.text:00404605                 add     esp, 1Ch
.text:00404608                 retn
.text:00404608 ; ---------------------------------------------------------------------------
.text:00404609                 align 10h
.text:00404610
.text:00404610 loc_404610:                             ; CODE XREF: .text:004045F9↑j
.text:00404610                 test    esi, esi
.text:00404612                 jz      short loc_4045FB
.text:00404614
.text:00404614 loc_404614:                             ; CODE XREF: .text:004045E2↑j
.text:00404614                 call    sub_404840
.text:00404614 ; ---------------------------------------------------------------------------
.text:00404619                 align 10h
.text:00404620
.text:00404620 ; =============== S U B R O U T I N E =======================================
.text:00404620
.text:00404620
.text:00404620 ; int __cdecl sub_404620(void *, size_t)
.text:00404620 sub_404620      proc near               ; CODE XREF: sub_403E80+5B↑p
.text:00404620
.text:00404620 Block           = dword ptr -0Ch
.text:00404620 Size            = dword ptr -8
.text:00404620 var_4           = dword ptr -4
.text:00404620 arg_0           = dword ptr  4
.text:00404620 arg_4           = dword ptr  8
.text:00404620
.text:00404620                 sub     esp, 0Ch
.text:00404623                 mov     edx, [esp+0Ch+arg_0]
.text:00404627                 mov     [esp+0Ch+var_4], ebx
.text:0040462B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040462F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404632                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404636                 call    realloc
.text:0040463B                 test    eax, eax
.text:0040463D                 jz      short loc_404647
.text:0040463F
.text:0040463F loc_40463F:                             ; CODE XREF: sub_404620+29↓j
.text:0040463F                 mov     ebx, [esp+0Ch+var_4]
.text:00404643                 add     esp, 0Ch
.text:00404646                 retn
.text:00404647 ; ---------------------------------------------------------------------------
.text:00404647
.text:00404647 loc_404647:                             ; CODE XREF: sub_404620+1D↑j
.text:00404647                 test    ebx, ebx
.text:00404649                 jz      short loc_40463F
.text:0040464B                 call    sub_404840
.text:0040464B sub_404620      endp
.text:0040464B
.text:00404650 ; ---------------------------------------------------------------------------
.text:00404650                 jmp     sub_4047A0
.text:00404650 ; ---------------------------------------------------------------------------
.text:00404655                 align 10h
.text:00404660                 sub     esp, 0Ch
.text:00404663                 mov     edx, [esp+14h]
.text:00404667                 mov     dword ptr [esp+8], 1
.text:0040466F                 mov     [esp+4], edx
.text:00404673                 mov     edx, [esp+10h]
.text:00404677                 mov     [esp], edx
.text:0040467A                 call    sub_4047A0
.text:0040467F                 add     esp, 0Ch
.text:00404682                 retn
.text:00404682 ; ---------------------------------------------------------------------------
.text:00404683                 align 10h
.text:00404690                 sub     esp, 1Ch
.text:00404693                 mov     [esp+18h], ebx
.text:00404697                 mov     ebx, [esp+20h]
.text:0040469B                 mov     [esp], ebx
.text:0040469E                 call    malloc
.text:004046A3                 test    eax, eax
.text:004046A5                 jz      short loc_4046C3
.text:004046A7
.text:004046A7 loc_4046A7:                             ; CODE XREF: .text:004046C5↓j
.text:004046A7                 mov     [esp+8], ebx
.text:004046AB                 mov     dword ptr [esp+4], 0
.text:004046B3                 mov     [esp], eax
.text:004046B6                 call    memset
.text:004046BB                 mov     ebx, [esp+18h]
.text:004046BF                 add     esp, 1Ch
.text:004046C2                 retn
.text:004046C3 ; ---------------------------------------------------------------------------
.text:004046C3
.text:004046C3 loc_4046C3:                             ; CODE XREF: .text:004046A5↑j
.text:004046C3                 test    ebx, ebx
.text:004046C5                 jz      short loc_4046A7
.text:004046C7                 call    sub_404840
.text:004046C7 ; ---------------------------------------------------------------------------
.text:004046CC                 align 10h
.text:004046D0                 sub     esp, 0Ch
.text:004046D3                 xor     edx, edx
.text:004046D5                 mov     ecx, [esp+14h]
.text:004046D9                 mov     [esp+8], ebx
.text:004046DD                 mov     eax, 0FFFFFFFFh
.text:004046E2                 mov     ebx, [esp+10h]
.text:004046E6                 div     ecx
.text:004046E8                 cmp     eax, ebx
.text:004046EA                 jb      short loc_404708
.text:004046EC                 mov     [esp+4], ecx
.text:004046F0                 mov     [esp], ebx
.text:004046F3                 call    calloc
.text:004046F8                 test    eax, eax
.text:004046FA                 jz      short loc_404704
.text:004046FC
.text:004046FC loc_4046FC:                             ; CODE XREF: .text:00404706↓j
.text:004046FC                 mov     ebx, [esp+8]
.text:00404700                 add     esp, 0Ch
.text:00404703                 retn
.text:00404704 ; ---------------------------------------------------------------------------
.text:00404704
.text:00404704 loc_404704:                             ; CODE XREF: .text:004046FA↑j
.text:00404704                 test    ebx, ebx
.text:00404706                 jz      short loc_4046FC
.text:00404708
.text:00404708 loc_404708:                             ; CODE XREF: .text:004046EA↑j
.text:00404708                 call    sub_404840
.text:00404708 ; ---------------------------------------------------------------------------
.text:0040470D                 align 10h
.text:00404710                 sub     esp, 1Ch
.text:00404713                 mov     [esp+18h], ebx
.text:00404717                 mov     ebx, [esp+24h]
.text:0040471B                 mov     [esp], ebx
.text:0040471E                 call    malloc
.text:00404723                 test    eax, eax
.text:00404725                 mov     edx, eax
.text:00404727                 jz      short loc_404745
.text:00404729
.text:00404729 loc_404729:                             ; CODE XREF: .text:00404747↓j
.text:00404729                 mov     [esp+8], ebx
.text:0040472D                 mov     ecx, [esp+20h]
.text:00404731                 mov     [esp], edx
.text:00404734                 mov     [esp+4], ecx
.text:00404738                 call    memcpy
.text:0040473D                 mov     ebx, [esp+18h]
.text:00404741                 add     esp, 1Ch
.text:00404744                 retn
.text:00404745 ; ---------------------------------------------------------------------------
.text:00404745
.text:00404745 loc_404745:                             ; CODE XREF: .text:00404727↑j
.text:00404745                 test    ebx, ebx
.text:00404747                 jz      short loc_404729
.text:00404749                 call    sub_404840
.text:00404749 ; ---------------------------------------------------------------------------
.text:0040474E                 align 10h
.text:00404750                 sub     esp, 1Ch
.text:00404753                 mov     [esp+18h], esi
.text:00404757                 mov     esi, [esp+20h]
.text:0040475B                 mov     [esp+14h], ebx
.text:0040475F                 mov     [esp], esi
.text:00404762                 call    strlen
.text:00404767                 lea     ebx, [eax+1]
.text:0040476A                 mov     [esp], ebx
.text:0040476D                 call    malloc
.text:00404772                 test    eax, eax
.text:00404774                 jz      short loc_404792
.text:00404776
.text:00404776 loc_404776:                             ; CODE XREF: .text:00404794↓j
.text:00404776                 mov     [esp+8], ebx
.text:0040477A                 mov     [esp+4], esi
.text:0040477E                 mov     [esp], eax
.text:00404781                 call    memcpy
.text:00404786                 mov     ebx, [esp+14h]
.text:0040478A                 mov     esi, [esp+18h]
.text:0040478E                 add     esp, 1Ch
.text:00404791                 retn
.text:00404792 ; ---------------------------------------------------------------------------
.text:00404792
.text:00404792 loc_404792:                             ; CODE XREF: .text:00404774↑j
.text:00404792                 test    ebx, ebx
.text:00404794                 jz      short loc_404776
.text:00404796                 call    sub_404840
.text:00404796 ; ---------------------------------------------------------------------------
.text:0040479B                 align 10h
.text:004047A0
.text:004047A0 ; =============== S U B R O U T I N E =======================================
.text:004047A0
.text:004047A0
.text:004047A0 ; int __cdecl sub_4047A0(void *, int, int)
.text:004047A0 sub_4047A0      proc near               ; CODE XREF: .text:00404650↑j
.text:004047A0                                         ; .text:0040467A↑p
.text:004047A0
.text:004047A0 Block           = dword ptr -1Ch
.text:004047A0 Size            = dword ptr -18h
.text:004047A0 var_C           = dword ptr -0Ch
.text:004047A0 var_8           = dword ptr -8
.text:004047A0 var_4           = dword ptr -4
.text:004047A0 arg_0           = dword ptr  4
.text:004047A0 arg_4           = dword ptr  8
.text:004047A0 arg_8           = dword ptr  0Ch
.text:004047A0
.text:004047A0                 sub     esp, 1Ch
.text:004047A3                 mov     [esp+1Ch+var_8], esi
.text:004047A7                 mov     esi, [esp+1Ch+arg_0]
.text:004047AB                 mov     [esp+1Ch+var_4], edi
.text:004047AF                 mov     edi, [esp+1Ch+arg_4]
.text:004047B3                 test    esi, esi
.text:004047B5                 mov     [esp+1Ch+var_C], ebx
.text:004047B9                 mov     ecx, [edi]
.text:004047BB                 mov     ebx, [esp+1Ch+arg_8]
.text:004047BF                 jz      short loc_404800
.text:004047C1                 xor     edx, edx
.text:004047C3                 mov     eax, 7FFFFFFFh
.text:004047C8                 div     ebx
.text:004047CA                 cmp     eax, ecx
.text:004047CC                 jb      short loc_4047F9
.text:004047CE                 add     ecx, ecx
.text:004047D0
.text:004047D0 loc_4047D0:                             ; CODE XREF: sub_4047A0+62↓j
.text:004047D0                                         ; sub_4047A0+71↓j ...
.text:004047D0                 mov     [edi], ecx
.text:004047D2                 imul    ebx, ecx
.text:004047D5                 mov     [esp+1Ch+Block], esi ; Block
.text:004047D8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004047DC                 call    realloc
.text:004047E1                 test    eax, eax
.text:004047E3                 jz      short loc_4047F5
.text:004047E5
.text:004047E5 loc_4047E5:                             ; CODE XREF: sub_4047A0+57↓j
.text:004047E5                 mov     ebx, [esp+1Ch+var_C]
.text:004047E9                 mov     esi, [esp+1Ch+var_8]
.text:004047ED                 mov     edi, [esp+1Ch+var_4]
.text:004047F1                 add     esp, 1Ch
.text:004047F4                 retn
.text:004047F5 ; ---------------------------------------------------------------------------
.text:004047F5
.text:004047F5 loc_4047F5:                             ; CODE XREF: sub_4047A0+43↑j
.text:004047F5                 test    ebx, ebx
.text:004047F7                 jz      short loc_4047E5
.text:004047F9
.text:004047F9 loc_4047F9:                             ; CODE XREF: sub_4047A0+2C↑j
.text:004047F9                 call    sub_404840
.text:004047F9 ; ---------------------------------------------------------------------------
.text:004047FE                 align 10h
.text:00404800
.text:00404800 loc_404800:                             ; CODE XREF: sub_4047A0+1F↑j
.text:00404800                 test    ecx, ecx
.text:00404802                 jnz     short loc_4047D0
.text:00404804                 xor     edx, edx
.text:00404806                 mov     eax, 40h ; '@'
.text:0040480B                 div     ebx
.text:0040480D                 test    eax, eax
.text:0040480F                 mov     ecx, eax
.text:00404811                 jnz     short loc_4047D0
.text:00404813                 mov     ecx, 1
.text:00404818                 jmp     short loc_4047D0
.text:00404818 sub_4047A0      endp
.text:00404818
.text:00404818 ; ---------------------------------------------------------------------------
.text:0040481A                 align 10h
.text:00404820 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404840+3↓o
.text:00404831 ; const char aS[]
.text:00404831 aS              db '%s',0               ; DATA XREF: sub_404840+10↓o
.text:00404834                 align 10h
.text:00404840
.text:00404840 ; =============== S U B R O U T I N E =======================================
.text:00404840
.text:00404840 ; Attributes: noreturn
.text:00404840
.text:00404840 sub_404840      proc near               ; CODE XREF: sub_403E80:loc_40403F↑p
.text:00404840                                         ; .text:loc_404589↑p ...
.text:00404840
.text:00404840 Code            = dword ptr -1Ch
.text:00404840 ErrorMessage    = dword ptr -18h
.text:00404840 var_14          = dword ptr -14h
.text:00404840 var_10          = byte ptr -10h
.text:00404840
.text:00404840                 sub     esp, 1Ch
.text:00404843                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040484A                 call    ds:libintl_gettext
.text:00404850                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00404858                 mov     edx, Code
.text:0040485E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404866                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040486A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040486D                 call    sub_4048D0
.text:00404872                 call    abort
.text:00404872 sub_404840      endp
.text:00404872
.text:00404872 ; ---------------------------------------------------------------------------
.text:00404877                 align 10h
.text:00404880
.text:00404880 ; =============== S U B R O U T I N E =======================================
.text:00404880
.text:00404880 ; Attributes: thunk
.text:00404880
.text:00404880 libintl_bindtextdomain proc near
.text:00404880                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404880 libintl_bindtextdomain endp
.text:00404880
.text:00404880 ; ---------------------------------------------------------------------------
.text:00404886                 align 10h
.text:00404890                 jmp     ds:libintl_textdomain
.text:00404890 ; ---------------------------------------------------------------------------
.text:00404896                 align 10h
.text:004048A0                 jmp     ds:libintl_gettext
.text:004048A0 ; ---------------------------------------------------------------------------
.text:004048A6                 align 10h
.text:004048B0 ; const char aS_0[]
.text:004048B0 aS_0            db ': %s',0             ; DATA XREF: sub_4048D0+B8↓o
.text:004048B0                                         ; sub_4049D4+122↓o
.text:004048B5 aUnknownSystemE db 'Unknown system error',0
.text:004048B5                                         ; DATA XREF: sub_4048D0:loc_40499D↓o
.text:004048B5                                         ; sub_4049D4:loc_404B0E↓o
.text:004048CA ; const char aS_1[]
.text:004048CA aS_1            db '%s: ',0             ; DATA XREF: sub_4048D0:loc_4049A4↓o
.text:004048CF                 align 10h
.text:004048D0
.text:004048D0 ; =============== S U B R O U T I N E =======================================
.text:004048D0
.text:004048D0
.text:004048D0 ; int __cdecl sub_4048D0(int Code, int ErrorMessage, char *, char)
.text:004048D0 sub_4048D0      proc near               ; CODE XREF: sub_4013D0+F4↑p
.text:004048D0                                         ; sub_4013D0+1BD↑p ...
.text:004048D0
.text:004048D0 Stream          = dword ptr -1Ch
.text:004048D0 Format          = dword ptr -18h
.text:004048D0 ArgList         = dword ptr -14h
.text:004048D0 Code            = dword ptr  4
.text:004048D0 ErrorMessage    = dword ptr  8
.text:004048D0 arg_8           = dword ptr  0Ch
.text:004048D0 arg_C           = byte ptr  10h
.text:004048D0
.text:004048D0                 push    esi
.text:004048D1                 push    ebx
.text:004048D2                 sub     esp, 14h
.text:004048D5                 mov     edx, ds:_iob
.text:004048DB                 mov     esi, [esp+1Ch+Code]
.text:004048DF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004048E3                 add     edx, 20h ; ' '
.text:004048E6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004048E9                 call    fflush
.text:004048EE                 mov     eax, ds:dword_4071C0
.text:004048F3                 test    eax, eax
.text:004048F5                 jz      loc_4049A4
.text:004048FB                 call    eax ; dword_4071C0
.text:004048FD
.text:004048FD loc_4048FD:                             ; CODE XREF: sub_4048D0+F7↓j
.text:004048FD                 lea     edx, [esp+1Ch+arg_C]
.text:00404901                 mov     ecx, [esp+1Ch+arg_8]
.text:00404905                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404909                 mov     edx, ds:_iob
.text:0040490F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404913                 add     edx, 40h ; '@'
.text:00404916                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404919                 call    vfprintf
.text:0040491E                 inc     ds:dword_4071D0
.text:00404924                 test    ebx, ebx
.text:00404926                 jnz     short loc_404972
.text:00404928
.text:00404928 loc_404928:                             ; CODE XREF: sub_4048D0+CB↓j
.text:00404928                 mov     edx, ds:_iob
.text:0040492E                 lea     ecx, [edx+40h]
.text:00404931                 mov     ebx, [ecx+4]
.text:00404934                 dec     ebx
.text:00404935                 test    ebx, ebx
.text:00404937                 mov     [ecx+4], ebx
.text:0040493A                 js      short loc_404960
.text:0040493C                 mov     ecx, [edx+40h]
.text:0040493F                 mov     byte ptr [ecx], 0Ah
.text:00404942                 inc     dword ptr [edx+40h]
.text:00404945
.text:00404945 loc_404945:                             ; CODE XREF: sub_4048D0+A0↓j
.text:00404945                 mov     edx, ds:_iob
.text:0040494B                 add     edx, 40h ; '@'
.text:0040494E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404951                 call    fflush
.text:00404956                 test    esi, esi
.text:00404958                 jnz     short loc_4049CC
.text:0040495A                 add     esp, 14h
.text:0040495D                 pop     ebx
.text:0040495E                 pop     esi
.text:0040495F                 retn
.text:00404960 ; ---------------------------------------------------------------------------
.text:00404960
.text:00404960 loc_404960:                             ; CODE XREF: sub_4048D0+6A↑j
.text:00404960                 mov     [esp+1Ch+Format], ecx ; File
.text:00404964                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040496B                 call    _flsbuf
.text:00404970                 jmp     short loc_404945
.text:00404972 ; ---------------------------------------------------------------------------
.text:00404972
.text:00404972 loc_404972:                             ; CODE XREF: sub_4048D0+56↑j
.text:00404972                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404975                 call    strerror
.text:0040497A                 test    eax, eax
.text:0040497C                 jz      short loc_40499D
.text:0040497E
.text:0040497E loc_40497E:                             ; CODE XREF: sub_4048D0+D2↓j
.text:0040497E                 mov     [esp+1Ch+ArgList], eax
.text:00404982                 mov     ebx, ds:_iob
.text:00404988                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00404990                 add     ebx, 40h ; '@'
.text:00404993                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404996                 call    fprintf
.text:0040499B                 jmp     short loc_404928
.text:0040499D ; ---------------------------------------------------------------------------
.text:0040499D
.text:0040499D loc_40499D:                             ; CODE XREF: sub_4048D0+AC↑j
.text:0040499D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004049A2                 jmp     short loc_40497E
.text:004049A4 ; ---------------------------------------------------------------------------
.text:004049A4
.text:004049A4 loc_4049A4:                             ; CODE XREF: sub_4048D0+25↑j
.text:004049A4                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:004049AC                 mov     edx, ds:_iob
.text:004049B2                 mov     ecx, ds:dword_407190
.text:004049B8                 add     edx, 40h ; '@'
.text:004049BB                 mov     [esp+1Ch+ArgList], ecx
.text:004049BF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004049C2                 call    fprintf
.text:004049C7                 jmp     loc_4048FD
.text:004049CC ; ---------------------------------------------------------------------------
.text:004049CC
.text:004049CC loc_4049CC:                             ; CODE XREF: sub_4048D0+88↑j
.text:004049CC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004049CF                 call    exit
.text:004049CF sub_4048D0      endp
.text:004049CF
.text:004049D4
.text:004049D4 ; =============== S U B R O U T I N E =======================================
.text:004049D4
.text:004049D4
.text:004049D4 ; int __cdecl sub_4049D4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004049D4 sub_4049D4      proc near               ; DATA XREF: sub_4049D4+77↓o
.text:004049D4
.text:004049D4 Stream          = dword ptr -28h
.text:004049D4 Format          = dword ptr -24h
.text:004049D4 ArgList         = dword ptr -20h
.text:004049D4 var_1C          = dword ptr -1Ch
.text:004049D4 Code            = dword ptr  8
.text:004049D4 ErrorMessage    = dword ptr  0Ch
.text:004049D4 Str2            = dword ptr  10h
.text:004049D4 arg_10          = dword ptr  14h
.text:004049D4 arg_14          = dword ptr  18h
.text:004049D4 arg_18          = byte ptr  1Ch
.text:004049D4
.text:004049D4                 and     eax, 64253A73h
.text:004049D9                 cmp     ah, [eax]
.text:004049DB
.text:004049DB loc_4049DB:                             ; DATA XREF: sub_4049D4:loc_404B15↓o
.text:004049DB                 add     ds:55003A73h, ah
.text:004049E1                 push    edi
.text:004049E2                 push    esi
.text:004049E3                 push    ebx
.text:004049E4                 sub     esp, 1Ch
.text:004049E7                 mov     edx, ds:dword_407200
.text:004049ED                 mov     ebp, [esp+28h+Code]
.text:004049F1                 mov     edi, [esp+28h+ErrorMessage]
.text:004049F5                 test    edx, edx
.text:004049F7                 mov     ebx, [esp+28h+Str2]
.text:004049FB                 mov     esi, [esp+28h+arg_10]
.text:004049FF                 jz      short loc_404A19
.text:00404A01                 cmp     ds:dword_407180, esi
.text:00404A07                 jz      loc_404B40
.text:00404A0D
.text:00404A0D loc_404A0D:                             ; CODE XREF: sub_4049D4+18D↓j
.text:00404A0D                 mov     ds:Str1, ebx
.text:00404A13                 mov     ds:dword_407180, esi
.text:00404A19
.text:00404A19 loc_404A19:                             ; CODE XREF: sub_4049D4+2B↑j
.text:00404A19                 mov     edx, ds:_iob
.text:00404A1F                 add     edx, 20h ; ' '
.text:00404A22                 mov     [esp+28h+Stream], edx ; Stream
.text:00404A25                 call    fflush
.text:00404A2A                 mov     eax, ds:dword_4071C0
.text:00404A2F                 test    eax, eax
.text:00404A31                 jz      loc_404B15
.text:00404A37                 call    eax ; dword_4071C0
.text:00404A39
.text:00404A39 loc_404A39:                             ; CODE XREF: sub_4049D4+164↓j
.text:00404A39                 test    ebx, ebx
.text:00404A3B                 jz      short loc_404A5E
.text:00404A3D                 mov     [esp+28h+ArgList], ebx
.text:00404A41                 mov     ebx, ds:_iob
.text:00404A47                 mov     [esp+28h+var_1C], esi
.text:00404A4B                 mov     [esp+28h+Format], offset sub_4049D4 ; Format
.text:00404A53                 add     ebx, 40h ; '@'
.text:00404A56                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404A59                 call    fprintf
.text:00404A5E
.text:00404A5E loc_404A5E:                             ; CODE XREF: sub_4049D4+67↑j
.text:00404A5E                 mov     esi, ds:_iob
.text:00404A64                 lea     edx, [esp+28h+arg_18]
.text:00404A68                 mov     ecx, [esp+28h+arg_14]
.text:00404A6C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404A70                 add     esi, 40h ; '@'
.text:00404A73                 mov     [esp+28h+Format], ecx ; Format
.text:00404A77                 mov     [esp+28h+Stream], esi ; Stream
.text:00404A7A                 call    vfprintf
.text:00404A7F                 inc     ds:dword_4071D0
.text:00404A85                 test    edi, edi
.text:00404A87                 jnz     short loc_404AE0
.text:00404A89
.text:00404A89 loc_404A89:                             ; CODE XREF: sub_4049D4+135↓j
.text:00404A89                 mov     edx, ds:_iob
.text:00404A8F                 lea     ecx, [edx+40h]
.text:00404A92                 mov     ebx, [ecx+4]
.text:00404A95                 dec     ebx
.text:00404A96                 test    ebx, ebx
.text:00404A98                 mov     [ecx+4], ebx
.text:00404A9B                 js      short loc_404AC7
.text:00404A9D                 mov     esi, [edx+40h]
.text:00404AA0                 mov     byte ptr [esi], 0Ah
.text:00404AA3                 inc     dword ptr [edx+40h]
.text:00404AA6
.text:00404AA6 loc_404AA6:                             ; CODE XREF: sub_4049D4+103↓j
.text:00404AA6                 mov     ecx, ds:_iob
.text:00404AAC                 add     ecx, 40h ; '@'
.text:00404AAF                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404AB2                 call    fflush
.text:00404AB7                 test    ebp, ebp
.text:00404AB9                 jnz     loc_404B66
.text:00404ABF
.text:00404ABF loc_404ABF:                             ; CODE XREF: sub_4049D4+173↓j
.text:00404ABF                                         ; sub_4049D4+187↓j
.text:00404ABF                 add     esp, 1Ch
.text:00404AC2                 pop     ebx
.text:00404AC3                 pop     esi
.text:00404AC4                 pop     edi
.text:00404AC5                 pop     ebp
.text:00404AC6                 retn
.text:00404AC7 ; ---------------------------------------------------------------------------
.text:00404AC7
.text:00404AC7 loc_404AC7:                             ; CODE XREF: sub_4049D4+C7↑j
.text:00404AC7                 mov     [esp+28h+Format], ecx ; File
.text:00404ACB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404AD2                 call    _flsbuf
.text:00404AD7                 jmp     short loc_404AA6
.text:00404AD7 ; ---------------------------------------------------------------------------
.text:00404AD9                 align 10h
.text:00404AE0
.text:00404AE0 loc_404AE0:                             ; CODE XREF: sub_4049D4+B3↑j
.text:00404AE0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404AE3                 call    strerror
.text:00404AE8                 test    eax, eax
.text:00404AEA                 jz      short loc_404B0E
.text:00404AEC
.text:00404AEC loc_404AEC:                             ; CODE XREF: sub_4049D4+13F↓j
.text:00404AEC                 mov     [esp+28h+ArgList], eax
.text:00404AF0                 mov     edi, ds:_iob
.text:00404AF6                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:00404AFE                 add     edi, 40h ; '@'
.text:00404B01                 mov     [esp+28h+Stream], edi ; Stream
.text:00404B04                 call    fprintf
.text:00404B09                 jmp     loc_404A89
.text:00404B0E ; ---------------------------------------------------------------------------
.text:00404B0E
.text:00404B0E loc_404B0E:                             ; CODE XREF: sub_4049D4+116↑j
.text:00404B0E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404B13                 jmp     short loc_404AEC
.text:00404B15 ; ---------------------------------------------------------------------------
.text:00404B15
.text:00404B15 loc_404B15:                             ; CODE XREF: sub_4049D4+5D↑j
.text:00404B15                 mov     [esp+28h+Format], (offset loc_4049DB+1) ; Format
.text:00404B1D                 mov     ecx, ds:_iob
.text:00404B23                 mov     edx, ds:dword_407190
.text:00404B29                 add     ecx, 40h ; '@'
.text:00404B2C                 mov     [esp+28h+ArgList], edx
.text:00404B30                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404B33                 call    fprintf
.text:00404B38                 jmp     loc_404A39
.text:00404B38 ; ---------------------------------------------------------------------------
.text:00404B3D                 align 10h
.text:00404B40
.text:00404B40 loc_404B40:                             ; CODE XREF: sub_4049D4+33↑j
.text:00404B40                 mov     eax, ds:Str1
.text:00404B45                 cmp     ebx, eax
.text:00404B47                 jz      loc_404ABF
.text:00404B4D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404B51                 mov     [esp+28h+Stream], eax ; Str1
.text:00404B54                 call    strcmp
.text:00404B59                 test    eax, eax
.text:00404B5B                 jz      loc_404ABF
.text:00404B61                 jmp     loc_404A0D
.text:00404B66 ; ---------------------------------------------------------------------------
.text:00404B66
.text:00404B66 loc_404B66:                             ; CODE XREF: sub_4049D4+E5↑j
.text:00404B66                 mov     [esp+28h+Stream], ebp ; Code
.text:00404B69                 call    exit
.text:00404B69 sub_4049D4      endp ; sp-analysis failed
.text:00404B69
.text:00404B69 ; ---------------------------------------------------------------------------
.text:00404B6E                 align 10h
.text:00404B70
.text:00404B70 ; =============== S U B R O U T I N E =======================================
.text:00404B70
.text:00404B70
.text:00404B70 ; int __cdecl sub_404B70(LPCSTR)
.text:00404B70 sub_404B70      proc near               ; CODE XREF: sub_4013D0+14B↑p
.text:00404B70
.text:00404B70 lpPathName      = dword ptr -0Ch
.text:00404B70 var_4           = dword ptr -4
.text:00404B70 arg_0           = dword ptr  4
.text:00404B70
.text:00404B70                 sub     esp, 0Ch
.text:00404B73                 mov     eax, [esp+0Ch+arg_0]
.text:00404B77                 mov     [esp+0Ch+var_4], ebx
.text:00404B7B                 test    eax, eax
.text:00404B7D                 jz      short loc_404BAF
.text:00404B7F                 mov     [esp+0Ch+lpPathName], eax ; lpPathName
.text:00404B82                 call    SetCurrentDirectoryA
.text:00404B87                 sub     esp, 4
.text:00404B8A                 xor     edx, edx
.text:00404B8C                 test    eax, eax
.text:00404B8E                 jz      short loc_404B9A
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: sub_404B70+3D↓j
.text:00404B90                 mov     ebx, [esp+0Ch+var_4]
.text:00404B94                 mov     eax, edx
.text:00404B96                 add     esp, 0Ch
.text:00404B99                 retn
.text:00404B9A ; ---------------------------------------------------------------------------
.text:00404B9A
.text:00404B9A loc_404B9A:                             ; CODE XREF: sub_404B70+1E↑j
.text:00404B9A                 call    sub_404E70
.text:00404B9F                 mov     ebx, eax
.text:00404BA1                 call    _errno
.text:00404BA6                 mov     [eax], ebx
.text:00404BA8
.text:00404BA8 loc_404BA8:                             ; CODE XREF: sub_404B70+4A↓j
.text:00404BA8                 mov     edx, 0FFFFFFFFh
.text:00404BAD                 jmp     short loc_404B90
.text:00404BAF ; ---------------------------------------------------------------------------
.text:00404BAF
.text:00404BAF loc_404BAF:                             ; CODE XREF: sub_404B70+D↑j
.text:00404BAF                 call    _errno
.text:00404BB4                 mov     dword ptr [eax], 16h
.text:00404BBA                 jmp     short loc_404BA8
.text:00404BBA sub_404B70      endp
.text:00404BBA
.text:00404BBA ; ---------------------------------------------------------------------------
.text:00404BBC                 align 10h
.text:00404BC0
.text:00404BC0 ; =============== S U B R O U T I N E =======================================
.text:00404BC0
.text:00404BC0
.text:00404BC0 sub_404BC0      proc near               ; CODE XREF: sub_4013D0+137↑p
.text:00404BC0                 sub     esp, 0Ch
.text:00404BC3                 call    _errno
.text:00404BC8                 mov     dword ptr [eax], 28h ; '('
.text:00404BCE                 mov     eax, 0FFFFFFFFh
.text:00404BD3                 add     esp, 0Ch
.text:00404BD6                 retn
.text:00404BD6 sub_404BC0      endp
.text:00404BD6
.text:00404BD6 ; ---------------------------------------------------------------------------
.text:00404BD7                 align 10h
.text:00404BE0
.text:00404BE0 ; =============== S U B R O U T I N E =======================================
.text:00404BE0
.text:00404BE0 ; Attributes: info_from_lumina
.text:00404BE0
.text:00404BE0 ___get_errno    proc near               ; CODE XREF: sub_404E70+B↓p
.text:00404BE0
.text:00404BE0 arg_0           = dword ptr  4
.text:00404BE0
.text:00404BE0                 mov     eax, [esp+arg_0]
.text:00404BE4                 cmp     eax, 53h ; 'S'
.text:00404BE7                 jg      loc_404CE0
.text:00404BED                 cmp     eax, 52h ; 'R'
.text:00404BF0                 jge     short loc_404C42
.text:00404BF2                 cmp     eax, 0Fh
.text:00404BF5                 jz      short loc_404C10
.text:00404BF7                 cmp     eax, 0Fh
.text:00404BFA                 jg      short loc_404C70
.text:00404BFC                 cmp     eax, 9
.text:00404BFF                 jg      short loc_404C50
.text:00404C01                 cmp     eax, 7
.text:00404C04                 jge     short loc_404C49
.text:00404C06                 cmp     eax, 3
.text:00404C09                 jg      short loc_404C2A
.text:00404C0B                 cmp     eax, 2
.text:00404C0E                 jl      short loc_404C23
.text:00404C10
.text:00404C10 loc_404C10:                             ; CODE XREF: ___get_errno+15↑j
.text:00404C10                                         ; ___get_errno+9D↓j ...
.text:00404C10                 mov     edx, 2
.text:00404C15                 lea     esi, [esi+0]
.text:00404C19                 lea     edi, [edi+0]
.text:00404C20
.text:00404C20 loc_404C20:                             ; CODE XREF: ___get_errno+48↓j
.text:00404C20                                         ; ___get_errno+59↓j ...
.text:00404C20                 mov     eax, edx
.text:00404C22                 retn
.text:00404C23 ; ---------------------------------------------------------------------------
.text:00404C23
.text:00404C23 loc_404C23:                             ; CODE XREF: ___get_errno+2E↑j
.text:00404C23                                         ; ___get_errno+78↓j ...
.text:00404C23                 mov     edx, 16h
.text:00404C28                 jmp     short loc_404C20
.text:00404C2A ; ---------------------------------------------------------------------------
.text:00404C2A
.text:00404C2A loc_404C2A:                             ; CODE XREF: ___get_errno+29↑j
.text:00404C2A                 cmp     eax, 5
.text:00404C2D                 jz      short loc_404C42
.text:00404C2F                 cmp     eax, 5
.text:00404C32                 jg      short loc_404C3B
.text:00404C34                 mov     edx, 18h
.text:00404C39                 jmp     short loc_404C20
.text:00404C3B ; ---------------------------------------------------------------------------
.text:00404C3B
.text:00404C3B loc_404C3B:                             ; CODE XREF: ___get_errno+52↑j
.text:00404C3B                                         ; ___get_errno+180↓j
.text:00404C3B                 mov     edx, 9
.text:00404C40                 jmp     short loc_404C20
.text:00404C42 ; ---------------------------------------------------------------------------
.text:00404C42
.text:00404C42 loc_404C42:                             ; CODE XREF: ___get_errno+10↑j
.text:00404C42                                         ; ___get_errno+4D↑j ...
.text:00404C42                 mov     edx, 0Dh
.text:00404C47                 jmp     short loc_404C20
.text:00404C49 ; ---------------------------------------------------------------------------
.text:00404C49
.text:00404C49 loc_404C49:                             ; CODE XREF: ___get_errno+24↑j
.text:00404C49                                         ; ___get_errno+73↓j ...
.text:00404C49                 mov     edx, 0Ch
.text:00404C4E                 jmp     short loc_404C20
.text:00404C50 ; ---------------------------------------------------------------------------
.text:00404C50
.text:00404C50 loc_404C50:                             ; CODE XREF: ___get_errno+1F↑j
.text:00404C50                 cmp     eax, 0Dh
.text:00404C53                 jg      short loc_404C49
.text:00404C55                 cmp     eax, 0Ch
.text:00404C58                 jge     short loc_404C23
.text:00404C5A                 cmp     eax, 0Ah
.text:00404C5D                 mov     edx, 7
.text:00404C62                 jz      short loc_404C20
.text:00404C64                 cmp     eax, 0Bh
.text:00404C67                 jnz     short loc_404C23
.text:00404C69
.text:00404C69 loc_404C69:                             ; CODE XREF: ___get_errno+21A↓j
.text:00404C69                 mov     edx, 8
.text:00404C6E                 jmp     short loc_404C20
.text:00404C70 ; ---------------------------------------------------------------------------
.text:00404C70
.text:00404C70 loc_404C70:                             ; CODE XREF: ___get_errno+1A↑j
.text:00404C70                 cmp     eax, 22h ; '"'
.text:00404C73                 jg      short loc_404CA4
.text:00404C75                 cmp     eax, 16h
.text:00404C78                 jge     short loc_404C42
.text:00404C7A                 cmp     eax, 12h
.text:00404C7D                 jz      short loc_404C10
.text:00404C7F                 cmp     eax, 12h
.text:00404C82                 jg      short loc_404C95
.text:00404C84                 cmp     eax, 10h
.text:00404C87                 jz      short loc_404C42
.text:00404C89                 mov     edx, 12h
.text:00404C8E                 cmp     eax, 11h
.text:00404C91
.text:00404C91 loc_404C91:                             ; CODE XREF: ___get_errno+172↓j
.text:00404C91                                         ; ___get_errno+24C↓j ...
.text:00404C91                 jnz     short loc_404C23
.text:00404C93                 jmp     short loc_404C20
.text:00404C95 ; ---------------------------------------------------------------------------
.text:00404C95
.text:00404C95 loc_404C95:                             ; CODE XREF: ___get_errno+A2↑j
.text:00404C95                 cmp     eax, 14h
.text:00404C98                 jle     short loc_404C42
.text:00404C9A
.text:00404C9A loc_404C9A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00404C9A                 mov     edx, 10h
.text:00404C9F                 jmp     loc_404C20
.text:00404CA4 ; ---------------------------------------------------------------------------
.text:00404CA4
.text:00404CA4 loc_404CA4:                             ; CODE XREF: ___get_errno+93↑j
.text:00404CA4                 cmp     eax, 41h ; 'A'
.text:00404CA7                 jz      short loc_404C42
.text:00404CA9                 cmp     eax, 41h ; 'A'
.text:00404CAC                 jg      short loc_404CC1
.text:00404CAE                 cmp     eax, 24h ; '$'
.text:00404CB1                 jz      short loc_404C42
.text:00404CB3                 cmp     eax, 35h ; '5'
.text:00404CB6                 jnz     loc_404C23
.text:00404CBC                 jmp     loc_404C10
.text:00404CC1 ; ---------------------------------------------------------------------------
.text:00404CC1
.text:00404CC1 loc_404CC1:                             ; CODE XREF: ___get_errno+CC↑j
.text:00404CC1                 cmp     eax, 43h ; 'C'
.text:00404CC4                 jz      loc_404C10
.text:00404CCA                 cmp     eax, 50h ; 'P'
.text:00404CCD                 jnz     loc_404C23
.text:00404CD3
.text:00404CD3 loc_404CD3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00404CD3                 mov     edx, 11h
.text:00404CD8                 jmp     loc_404C20
.text:00404CD8 ; ---------------------------------------------------------------------------
.text:00404CDD                 align 10h
.text:00404CE0
.text:00404CE0 loc_404CE0:                             ; CODE XREF: ___get_errno+7↑j
.text:00404CE0                 cmp     eax, 0A1h ; '¡'
.text:00404CE5                 jz      loc_404C10
.text:00404CEB                 cmp     eax, 0A1h ; '¡'
.text:00404CF0                 jg      loc_404DA0
.text:00404CF6                 cmp     eax, 81h
.text:00404CFB                 jg      short loc_404D65
.text:00404CFD                 cmp     eax, 80h ; '€'
.text:00404D02                 mov     edx, 0Ah
.text:00404D07                 jge     loc_404C20
.text:00404D0D                 cmp     eax, 6Ch ; 'l'
.text:00404D10                 jz      loc_404C42
.text:00404D16                 cmp     eax, 6Ch ; 'l'
.text:00404D19                 jg      short loc_404D37
.text:00404D1B                 cmp     eax, 57h ; 'W'
.text:00404D1E                 jz      loc_404C23
.text:00404D24                 cmp     eax, 59h ; 'Y'
.text:00404D27                 jnz     loc_404C23
.text:00404D2D
.text:00404D2D loc_404D2D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:00404D2D                                         ; ___get_errno+23C↓j
.text:00404D2D                 mov     edx, 0Bh
.text:00404D32                 jmp     loc_404C20
.text:00404D37 ; ---------------------------------------------------------------------------
.text:00404D37
.text:00404D37 loc_404D37:                             ; CODE XREF: ___get_errno+139↑j
.text:00404D37                 cmp     eax, 70h ; 'p'
.text:00404D3A                 mov     edx, 1Ch
.text:00404D3F                 jz      loc_404C20
.text:00404D45                 cmp     eax, 70h ; 'p'
.text:00404D48                 jg      short loc_404D57
.text:00404D4A                 mov     edx, 20h ; ' '
.text:00404D4F                 cmp     eax, 6Dh ; 'm'
.text:00404D52                 jmp     loc_404C91
.text:00404D57 ; ---------------------------------------------------------------------------
.text:00404D57
.text:00404D57 loc_404D57:                             ; CODE XREF: ___get_errno+168↑j
.text:00404D57                 cmp     eax, 72h ; 'r'
.text:00404D5A
.text:00404D5A loc_404D5A:                             ; CODE XREF: ___get_errno+19C↓j
.text:00404D5A                 jnz     loc_404C23
.text:00404D60                 jmp     loc_404C3B
.text:00404D65 ; ---------------------------------------------------------------------------
.text:00404D65
.text:00404D65 loc_404D65:                             ; CODE XREF: ___get_errno+11B↑j
.text:00404D65                 cmp     eax, 84h ; '„'
.text:00404D6A                 jz      loc_404C42
.text:00404D70                 cmp     eax, 84h ; '„'
.text:00404D75                 jg      short loc_404D7E
.text:00404D77                 cmp     eax, 82h ; '‚'
.text:00404D7C                 jmp     short loc_404D5A
.text:00404D7E ; ---------------------------------------------------------------------------
.text:00404D7E
.text:00404D7E loc_404D7E:                             ; CODE XREF: ___get_errno+195↑j
.text:00404D7E                 cmp     eax, 91h ; '‘'
.text:00404D83                 mov     edx, 29h ; ')'
.text:00404D88                 jz      loc_404C20
.text:00404D8E                 cmp     eax, 9Eh ; 'ž'
.text:00404D93
.text:00404D93 loc_404D93:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00404D93                 jnz     loc_404C23
.text:00404D99                 jmp     loc_404C42
.text:00404D99 ; ---------------------------------------------------------------------------
.text:00404D9E                 align 10h
.text:00404DA0
.text:00404DA0 loc_404DA0:                             ; CODE XREF: ___get_errno+110↑j
.text:00404DA0                 cmp     eax, 0CEh ; 'Î'
.text:00404DA5                 jz      loc_404C10
.text:00404DAB                 cmp     eax, 0CEh ; 'Î'
.text:00404DB0                 jg      short loc_404E00
.text:00404DB2                 cmp     eax, 0AAh ; 'ª'
.text:00404DB7                 jz      loc_404C9A
.text:00404DBD                 cmp     eax, 0AAh ; 'ª'
.text:00404DC2                 jg      short loc_404DD6
.text:00404DC4                 cmp     eax, 0A4h ; '¤'
.text:00404DC9                 jz      loc_404D2D
.text:00404DCF                 cmp     eax, 0A7h ; '§'
.text:00404DD4                 jmp     short loc_404D93
.text:00404DD6 ; ---------------------------------------------------------------------------
.text:00404DD6
.text:00404DD6 loc_404DD6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:00404DD6                 cmp     eax, 0B7h ; '·'
.text:00404DDB                 jz      loc_404CD3
.text:00404DE1                 cmp     eax, 0B7h ; '·'
.text:00404DE6                 jl      loc_404C23
.text:00404DEC                 sub     eax, 0BCh ; '¼'
.text:00404DF1                 cmp     eax, 0Eh
.text:00404DF4                 ja      loc_404C23
.text:00404DFA                 jmp     loc_404C69
.text:00404DFA ; ---------------------------------------------------------------------------
.text:00404DFF                 align 10h
.text:00404E00
.text:00404E00 loc_404E00:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00404E00                 cmp     eax, 46Bh
.text:00404E05                 mov     edx, 24h ; '$'
.text:00404E0A                 jz      loc_404C20
.text:00404E10                 cmp     eax, 46Bh
.text:00404E15                 jg      short loc_404E31
.text:00404E17                 cmp     eax, 0D7h ; '×'
.text:00404E1C                 jz      loc_404D2D
.text:00404E22                 mov     edx, 5
.text:00404E27                 cmp     eax, 45Dh
.text:00404E2C                 jmp     loc_404C91
.text:00404E31 ; ---------------------------------------------------------------------------
.text:00404E31
.text:00404E31 loc_404E31:                             ; CODE XREF: ___get_errno+235↑j
.text:00404E31                 cmp     eax, 4D5h
.text:00404E36                 mov     edx, 4
.text:00404E3B                 jz      loc_404C20
.text:00404E41                 cmp     eax, 4D5h
.text:00404E46                 jg      short loc_404E57
.text:00404E48                 mov     edx, 13h
.text:00404E4D                 cmp     eax, 4B0h
.text:00404E52                 jmp     loc_404C91
.text:00404E57 ; ---------------------------------------------------------------------------
.text:00404E57
.text:00404E57 loc_404E57:                             ; CODE XREF: ___get_errno+266↑j
.text:00404E57                 cmp     eax, 718h
.text:00404E5C                 jnz     loc_404C23
.text:00404E62                 jmp     loc_404C49
.text:00404E62 ___get_errno    endp
.text:00404E62
.text:00404E62 ; ---------------------------------------------------------------------------
.text:00404E67                 align 10h
.text:00404E70
.text:00404E70 ; =============== S U B R O U T I N E =======================================
.text:00404E70
.text:00404E70
.text:00404E70 sub_404E70      proc near               ; CODE XREF: sub_404B70:loc_404B9A↑p
.text:00404E70
.text:00404E70 var_C           = dword ptr -0Ch
.text:00404E70
.text:00404E70                 sub     esp, 0Ch
.text:00404E73                 call    GetLastError
.text:00404E78                 mov     [esp+0Ch+var_C], eax
.text:00404E7B                 call    ___get_errno
.text:00404E80                 add     esp, 0Ch
.text:00404E83                 retn
.text:00404E83 sub_404E70      endp
.text:00404E83
.text:00404E83 ; ---------------------------------------------------------------------------
.text:00404E84                 align 10h
.text:00404E90
.text:00404E90 ; =============== S U B R O U T I N E =======================================
.text:00404E90
.text:00404E90 ; Attributes: thunk
.text:00404E90
.text:00404E90 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00404E90 mbrtowc         proc near               ; CODE XREF: sub_402D40+757↑p
.text:00404E90
.text:00404E90 DstCh           = dword ptr  4
.text:00404E90 SrcCh           = dword ptr  8
.text:00404E90 SizeInBytes     = dword ptr  0Ch
.text:00404E90 State           = dword ptr  10h
.text:00404E90
.text:00404E90                 jmp     ds:__imp_mbrtowc
.text:00404E90 mbrtowc         endp
.text:00404E90
.text:00404E90 ; ---------------------------------------------------------------------------
.text:00404E96                 align 10h
.text:00404EA0
.text:00404EA0 ; =============== S U B R O U T I N E =======================================
.text:00404EA0
.text:00404EA0 ; Attributes: bp-based frame
.text:00404EA0
.text:00404EA0 sub_404EA0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00404EA0                 push    ebp
.text:00404EA1                 mov     ecx, offset dword_407000
.text:00404EA6                 cmp     ecx, offset dword_407000
.text:00404EAC                 mov     ebp, esp
.text:00404EAE                 jnb     short loc_404EC6
.text:00404EB0
.text:00404EB0 loc_404EB0:                             ; CODE XREF: sub_404EA0+24↓j
.text:00404EB0                 mov     edx, [ecx+4]
.text:00404EB3                 mov     eax, [ecx]
.text:00404EB5                 add     ecx, 8
.text:00404EB8                 add     [edx+400000h], eax
.text:00404EBE                 cmp     ecx, offset dword_407000
.text:00404EC4                 jb      short loc_404EB0
.text:00404EC6
.text:00404EC6 loc_404EC6:                             ; CODE XREF: sub_404EA0+E↑j
.text:00404EC6                 pop     ebp
.text:00404EC7                 retn
.text:00404EC7 sub_404EA0      endp
.text:00404EC7
.text:00404EC7 ; ---------------------------------------------------------------------------
.text:00404EC8                 align 10h
.text:00404ED0
.text:00404ED0 ; =============== S U B R O U T I N E =======================================
.text:00404ED0
.text:00404ED0 ; Attributes: bp-based frame
.text:00404ED0
.text:00404ED0 sub_404ED0      proc near               ; CODE XREF: sub_401080+16↑p
.text:00404ED0                                         ; TopLevelExceptionFilter+D7↑p
.text:00404ED0                 push    ebp
.text:00404ED1                 mov     ebp, esp
.text:00404ED3                 fninit
.text:00404ED5                 pop     ebp
.text:00404ED6                 retn
.text:00404ED6 sub_404ED0      endp
.text:00404ED6
.text:00404ED6 ; ---------------------------------------------------------------------------
.text:00404ED7                 align 10h
.text:00404EE0
.text:00404EE0 ; =============== S U B R O U T I N E =======================================
.text:00404EE0
.text:00404EE0 ; Attributes: bp-based frame
.text:00404EE0
.text:00404EE0 ; void __cdecl sub_404EE0()
.text:00404EE0 sub_404EE0      proc near               ; DATA XREF: .text:loc_404F29↓o
.text:00404EE0                                         ; sub_404F70:loc_404F9E↓o
.text:00404EE0                 push    ebp
.text:00404EE1                 mov     ebp, esp
.text:00404EE3                 sub     esp, 8
.text:00404EE6                 mov     eax, off_406084
.text:00404EEB                 mov     edx, [eax]
.text:00404EED                 test    edx, edx
.text:00404EEF                 jnz     short loc_404EF5
.text:00404EF1
.text:00404EF1 loc_404EF1:                             ; CODE XREF: sub_404EE0+2C↓j
.text:00404EF1                 mov     esp, ebp
.text:00404EF3                 pop     ebp
.text:00404EF4                 retn
.text:00404EF5 ; ---------------------------------------------------------------------------
.text:00404EF5
.text:00404EF5 loc_404EF5:                             ; CODE XREF: sub_404EE0+F↑j
.text:00404EF5                                         ; sub_404EE0+2A↓j
.text:00404EF5                 call    dword ptr [eax]
.text:00404EF7                 mov     edx, off_406084
.text:00404EFD                 mov     ecx, [edx+4]
.text:00404F00                 lea     eax, [edx+4]
.text:00404F03                 mov     off_406084, eax
.text:00404F08                 test    ecx, ecx
.text:00404F0A                 jnz     short loc_404EF5
.text:00404F0C                 jmp     short loc_404EF1
.text:00404F0C sub_404EE0      endp
.text:00404F0C
.text:00404F0C ; ---------------------------------------------------------------------------
.text:00404F0E                 align 10h
.text:00404F10                 push    ebp
.text:00404F11                 mov     ebp, esp
.text:00404F13                 sub     esp, 8
.text:00404F16                 mov     [ebp-4], ebx
.text:00404F19                 mov     eax, ds:dword_405260
.text:00404F1E                 cmp     eax, 0FFFFFFFFh
.text:00404F21                 jz      short loc_404F4C
.text:00404F23
.text:00404F23 loc_404F23:                             ; CODE XREF: .text:00404F56↓j
.text:00404F23                                         ; .text:00404F69↓j
.text:00404F23                 test    eax, eax
.text:00404F25                 mov     ebx, eax
.text:00404F27                 jnz     short loc_404F40
.text:00404F29
.text:00404F29 loc_404F29:                             ; CODE XREF: .text:00404F4A↓j
.text:00404F29                 mov     dword ptr [esp], offset sub_404EE0
.text:00404F30                 call    sub_401040
.text:00404F35                 mov     ebx, [ebp-4]
.text:00404F38                 mov     esp, ebp
.text:00404F3A                 pop     ebp
.text:00404F3B                 retn
.text:00404F3B ; ---------------------------------------------------------------------------
.text:00404F3C                 align 10h
.text:00404F40
.text:00404F40 loc_404F40:                             ; CODE XREF: .text:00404F27↑j
.text:00404F40                                         ; .text:00404F48↓j
.text:00404F40                 call    ds:dword_405260[ebx*4]
.text:00404F47                 dec     ebx
.text:00404F48                 jnz     short loc_404F40
.text:00404F4A                 jmp     short loc_404F29
.text:00404F4C ; ---------------------------------------------------------------------------
.text:00404F4C
.text:00404F4C loc_404F4C:                             ; CODE XREF: .text:00404F21↑j
.text:00404F4C                 mov     ecx, ds:dword_405264
.text:00404F52                 xor     eax, eax
.text:00404F54                 test    ecx, ecx
.text:00404F56                 jz      short loc_404F23
.text:00404F58                 mov     edx, offset dword_405260
.text:00404F5D                 lea     esi, [esi+0]
.text:00404F60
.text:00404F60 loc_404F60:                             ; CODE XREF: .text:00404F67↓j
.text:00404F60                 inc     eax
.text:00404F61                 mov     ecx, [edx+eax*4+4]
.text:00404F65                 test    ecx, ecx
.text:00404F67                 jnz     short loc_404F60
.text:00404F69                 jmp     short loc_404F23
.text:00404F69 ; ---------------------------------------------------------------------------
.text:00404F6B                 align 10h
.text:00404F70
.text:00404F70 ; =============== S U B R O U T I N E =======================================
.text:00404F70
.text:00404F70 ; Attributes: bp-based frame
.text:00404F70
.text:00404F70 sub_404F70      proc near               ; CODE XREF: sub_4013D0+19↑p
.text:00404F70
.text:00404F70 var_8           = dword ptr -8
.text:00404F70 var_4           = dword ptr -4
.text:00404F70
.text:00404F70                 push    ebp
.text:00404F71                 mov     ebp, esp
.text:00404F73                 sub     esp, 8
.text:00404F76                 mov     [ebp+var_4], ebx
.text:00404F79                 mov     edx, dword_406080
.text:00404F7F                 test    edx, edx
.text:00404F81                 jnz     short loc_404FAA
.text:00404F83                 mov     eax, ds:dword_405260
.text:00404F88                 mov     edx, 1
.text:00404F8D                 mov     dword_406080, edx
.text:00404F93                 cmp     eax, 0FFFFFFFFh
.text:00404F96                 jz      short loc_404FBD
.text:00404F98
.text:00404F98 loc_404F98:                             ; CODE XREF: sub_404F70+57↓j
.text:00404F98                                         ; sub_404F70+69↓j
.text:00404F98                 test    eax, eax
.text:00404F9A                 mov     ebx, eax
.text:00404F9C                 jnz     short loc_404FB1
.text:00404F9E
.text:00404F9E loc_404F9E:                             ; CODE XREF: sub_404F70+4B↓j
.text:00404F9E                 mov     [esp+8+var_8], offset sub_404EE0 ; void (__cdecl *)()
.text:00404FA5                 call    sub_401040
.text:00404FAA
.text:00404FAA loc_404FAA:                             ; CODE XREF: sub_404F70+11↑j
.text:00404FAA                 mov     ebx, [ebp+var_4]
.text:00404FAD                 mov     esp, ebp
.text:00404FAF                 pop     ebp
.text:00404FB0                 retn
.text:00404FB1 ; ---------------------------------------------------------------------------
.text:00404FB1
.text:00404FB1 loc_404FB1:                             ; CODE XREF: sub_404F70+2C↑j
.text:00404FB1                                         ; sub_404F70+49↓j
.text:00404FB1                 call    ds:dword_405260[ebx*4]
.text:00404FB8                 dec     ebx
.text:00404FB9                 jnz     short loc_404FB1
.text:00404FBB                 jmp     short loc_404F9E
.text:00404FBD ; ---------------------------------------------------------------------------
.text:00404FBD
.text:00404FBD loc_404FBD:                             ; CODE XREF: sub_404F70+26↑j
.text:00404FBD                 mov     ecx, ds:dword_405264
.text:00404FC3                 xor     eax, eax
.text:00404FC5                 test    ecx, ecx
.text:00404FC7                 jz      short loc_404F98
.text:00404FC9                 mov     edx, offset dword_405260
.text:00404FCE                 mov     esi, esi
.text:00404FD0
.text:00404FD0 loc_404FD0:                             ; CODE XREF: sub_404F70+67↓j
.text:00404FD0                 inc     eax
.text:00404FD1                 mov     ebx, [edx+eax*4+4]
.text:00404FD5                 test    ebx, ebx
.text:00404FD7                 jnz     short loc_404FD0
.text:00404FD9                 jmp     short loc_404F98
.text:00404FD9 sub_404F70      endp
.text:00404FD9
.text:00404FD9 ; ---------------------------------------------------------------------------
.text:00404FDB                 align 10h
.text:00404FE0
.text:00404FE0 ; =============== S U B R O U T I N E =======================================
.text:00404FE0
.text:00404FE0 ; Attributes: info_from_lumina
.text:00404FE0
.text:00404FE0 ; void *__cdecl _alloca(size_t Size)
.text:00404FE0 __alloca        proc near               ; CODE XREF: sub_4013D0+14↑p
.text:00404FE0                 push    ecx
.text:00404FE1                 mov     ecx, esp
.text:00404FE3                 add     ecx, 8
.text:00404FE6
.text:00404FE6 loc_404FE6:                             ; CODE XREF: __alloca+1B↓j
.text:00404FE6                 cmp     eax, 1000h
.text:00404FEB                 jb      short loc_404FFD
.text:00404FED                 sub     ecx, 1000h
.text:00404FF3                 or      dword ptr [ecx], 0
.text:00404FF6                 sub     eax, 1000h
.text:00404FFB                 jmp     short loc_404FE6
.text:00404FFD ; ---------------------------------------------------------------------------
.text:00404FFD
.text:00404FFD loc_404FFD:                             ; CODE XREF: __alloca+B↑j
.text:00404FFD                 sub     ecx, eax
.text:00404FFF                 or      dword ptr [ecx], 0
.text:00405002                 mov     eax, esp
.text:00405004                 mov     esp, ecx
.text:00405006                 mov     ecx, [eax]
.text:00405008                 mov     eax, [eax+4]
.text:0040500B                 jmp     eax
.text:0040500B __alloca        endp
.text:0040500B
.text:0040500B ; ---------------------------------------------------------------------------
.text:0040500D                 align 10h
.text:00405010
.text:00405010 ; =============== S U B R O U T I N E =======================================
.text:00405010
.text:00405010 ; Attributes: thunk
.text:00405010
.text:00405010 ; intptr_t __cdecl execvp(const char *FileName, const char *const *Arguments)
.text:00405010 _execvp         proc near               ; CODE XREF: sub_4013D0+172↑p
.text:00405010
.text:00405010 FileName        = dword ptr  4
.text:00405010 Arguments       = dword ptr  8
.text:00405010
.text:00405010                 jmp     ds:__imp__execvp
.text:00405010 _execvp         endp
.text:00405010
.text:00405010 ; ---------------------------------------------------------------------------
.text:00405016                 align 10h
.text:00405020                 jmp     ds:__set_app_type
.text:00405020 ; ---------------------------------------------------------------------------
.text:00405026                 align 10h
.text:00405030
.text:00405030 ; =============== S U B R O U T I N E =======================================
.text:00405030
.text:00405030 ; Attributes: thunk
.text:00405030
.text:00405030 ; void __cdecl cexit()
.text:00405030 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405030                 jmp     ds:__imp__cexit
.text:00405030 _cexit          endp
.text:00405030
.text:00405030 ; ---------------------------------------------------------------------------
.text:00405036                 align 10h
.text:00405040
.text:00405040 ; =============== S U B R O U T I N E =======================================
.text:00405040
.text:00405040 ; Attributes: thunk
.text:00405040
.text:00405040 ; char ***__cdecl _p__environ()
.text:00405040 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405040                 jmp     ds:__imp___p__environ
.text:00405040 __p__environ    endp
.text:00405040
.text:00405040 ; ---------------------------------------------------------------------------
.text:00405046                 align 10h
.text:00405050
.text:00405050 ; =============== S U B R O U T I N E =======================================
.text:00405050
.text:00405050 ; Attributes: thunk
.text:00405050
.text:00405050 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405050 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405050                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405050
.text:00405050 Signal          = dword ptr  4
.text:00405050 Function        = dword ptr  8
.text:00405050
.text:00405050                 jmp     ds:__imp_signal
.text:00405050 signal          endp
.text:00405050
.text:00405050 ; ---------------------------------------------------------------------------
.text:00405056                 align 10h
.text:00405060
.text:00405060 ; =============== S U B R O U T I N E =======================================
.text:00405060
.text:00405060 ; Attributes: thunk
.text:00405060
.text:00405060 ; int *__cdecl _p__fmode()
.text:00405060 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00405060                 jmp     ds:__imp___p__fmode
.text:00405060 __p__fmode      endp
.text:00405060
.text:00405060 ; ---------------------------------------------------------------------------
.text:00405066                 align 10h
.text:00405070
.text:00405070 ; =============== S U B R O U T I N E =======================================
.text:00405070
.text:00405070 ; Attributes: thunk
.text:00405070
.text:00405070 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405070 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405070                                         ; sub_401080+90↑p ...
.text:00405070
.text:00405070 FileHandle      = dword ptr  4
.text:00405070 Mode            = dword ptr  8
.text:00405070
.text:00405070                 jmp     ds:__imp__setmode
.text:00405070 _setmode        endp
.text:00405070
.text:00405070 ; ---------------------------------------------------------------------------
.text:00405076                 align 10h
.text:00405080
.text:00405080 ; =============== S U B R O U T I N E =======================================
.text:00405080
.text:00405080 ; Attributes: thunk
.text:00405080
.text:00405080 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00405080                 jmp     ds:__imp___getmainargs
.text:00405080 __getmainargs   endp
.text:00405080
.text:00405080 ; ---------------------------------------------------------------------------
.text:00405086                 align 10h
.text:00405090
.text:00405090 ; =============== S U B R O U T I N E =======================================
.text:00405090
.text:00405090 ; Attributes: thunk
.text:00405090
.text:00405090 ; char *__cdecl getenv(const char *VarName)
.text:00405090 getenv          proc near               ; CODE XREF: sub_4013D0+1D1↑p
.text:00405090                                         ; sub_401B10+B57↑p
.text:00405090
.text:00405090 VarName         = dword ptr  4
.text:00405090
.text:00405090                 jmp     ds:__imp_getenv
.text:00405090 getenv          endp
.text:00405090
.text:00405090 ; ---------------------------------------------------------------------------
.text:00405096                 align 10h
.text:004050A0
.text:004050A0 ; =============== S U B R O U T I N E =======================================
.text:004050A0
.text:004050A0 ; Attributes: thunk
.text:004050A0
.text:004050A0 ; int *__cdecl errno()
.text:004050A0 _errno          proc near               ; CODE XREF: sub_4013D0+177↑p
.text:004050A0                                         ; sub_4013D0+1A3↑p ...
.text:004050A0                 jmp     ds:__imp__errno
.text:004050A0 _errno          endp
.text:004050A0
.text:004050A0 ; ---------------------------------------------------------------------------
.text:004050A6                 align 10h
.text:004050B0
.text:004050B0 ; =============== S U B R O U T I N E =======================================
.text:004050B0
.text:004050B0 ; Attributes: thunk
.text:004050B0
.text:004050B0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004050B0 setlocale       proc near               ; CODE XREF: sub_4013D0+35↑p
.text:004050B0
.text:004050B0 Category        = dword ptr  4
.text:004050B0 Locale          = dword ptr  8
.text:004050B0
.text:004050B0                 jmp     ds:__imp_setlocale
.text:004050B0 setlocale       endp
.text:004050B0
.text:004050B0 ; ---------------------------------------------------------------------------
.text:004050B6                 align 10h
.text:004050C0
.text:004050C0 ; =============== S U B R O U T I N E =======================================
.text:004050C0
.text:004050C0 ; Attributes: noreturn thunk
.text:004050C0
.text:004050C0 ; void __cdecl __noreturn exit(int Code)
.text:004050C0 exit            proc near               ; CODE XREF: sub_4013D0:loc_4014FC↑p
.text:004050C0                                         ; sub_4017B0+3E↑p ...
.text:004050C0
.text:004050C0 Code            = dword ptr  4
.text:004050C0
.text:004050C0                 jmp     ds:__imp_exit
.text:004050C0 exit            endp
.text:004050C0
.text:004050C0 ; ---------------------------------------------------------------------------
.text:004050C6                 align 10h
.text:004050D0
.text:004050D0 ; =============== S U B R O U T I N E =======================================
.text:004050D0
.text:004050D0 ; Attributes: thunk
.text:004050D0
.text:004050D0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004050D0 fputs           proc near               ; CODE XREF: sub_4017B0+83↑p
.text:004050D0                                         ; sub_4017B0+A5↑p ...
.text:004050D0
.text:004050D0 Buffer          = dword ptr  4
.text:004050D0 Stream          = dword ptr  8
.text:004050D0
.text:004050D0                 jmp     ds:__imp_fputs
.text:004050D0 fputs           endp
.text:004050D0
.text:004050D0 ; ---------------------------------------------------------------------------
.text:004050D6                 align 10h
.text:004050E0
.text:004050E0 ; =============== S U B R O U T I N E =======================================
.text:004050E0
.text:004050E0 ; Attributes: thunk
.text:004050E0
.text:004050E0 ; int printf(const char *const Format, ...)
.text:004050E0 printf          proc near               ; CODE XREF: sub_4017B0+61↑p
.text:004050E0                                         ; sub_4017B0+106↑p
.text:004050E0
.text:004050E0 Format          = dword ptr  4
.text:004050E0
.text:004050E0                 jmp     ds:__imp_printf
.text:004050E0 printf          endp
.text:004050E0
.text:004050E0 ; ---------------------------------------------------------------------------
.text:004050E6                 align 10h
.text:004050F0
.text:004050F0 ; =============== S U B R O U T I N E =======================================
.text:004050F0
.text:004050F0 ; Attributes: thunk
.text:004050F0
.text:004050F0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004050F0 fprintf         proc near               ; CODE XREF: sub_4013D0+120↑p
.text:004050F0                                         ; sub_4017B0+36↑p ...
.text:004050F0
.text:004050F0 Stream          = dword ptr  4
.text:004050F0 Format          = dword ptr  8
.text:004050F0
.text:004050F0                 jmp     ds:__imp_fprintf
.text:004050F0 fprintf         endp
.text:004050F0
.text:004050F0 ; ---------------------------------------------------------------------------
.text:004050F6                 align 10h
.text:00405100
.text:00405100 ; =============== S U B R O U T I N E =======================================
.text:00405100
.text:00405100 ; Attributes: thunk
.text:00405100
.text:00405100 ; size_t __cdecl strlen(const char *Str)
.text:00405100 strlen          proc near               ; CODE XREF: sub_401B10+2A9↑p
.text:00405100                                         ; sub_401B10+346↑p ...
.text:00405100
.text:00405100 Str             = dword ptr  4
.text:00405100
.text:00405100                 jmp     ds:__imp_strlen
.text:00405100 strlen          endp
.text:00405100
.text:00405100 ; ---------------------------------------------------------------------------
.text:00405106                 align 10h
.text:00405110
.text:00405110 ; =============== S U B R O U T I N E =======================================
.text:00405110
.text:00405110 ; Attributes: thunk
.text:00405110
.text:00405110 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405110 strncmp         proc near               ; CODE XREF: sub_401B10+23F↑p
.text:00405110                                         ; sub_401B10+699↑p
.text:00405110
.text:00405110 Str1            = dword ptr  4
.text:00405110 Str2            = dword ptr  8
.text:00405110 MaxCount        = dword ptr  0Ch
.text:00405110
.text:00405110                 jmp     ds:__imp_strncmp
.text:00405110 strncmp         endp
.text:00405110
.text:00405110 ; ---------------------------------------------------------------------------
.text:00405116                 align 10h
.text:00405120
.text:00405120 ; =============== S U B R O U T I N E =======================================
.text:00405120
.text:00405120 ; Attributes: thunk
.text:00405120
.text:00405120 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405120 strchr          proc near               ; CODE XREF: sub_401B10+469↑p
.text:00405120                                         ; sub_401B10+53A↑p ...
.text:00405120
.text:00405120 Str             = dword ptr  4
.text:00405120 Val             = dword ptr  8
.text:00405120
.text:00405120                 jmp     ds:__imp_strchr
.text:00405120 strchr          endp
.text:00405120
.text:00405120 ; ---------------------------------------------------------------------------
.text:00405126                 align 10h
.text:00405130
.text:00405130 ; =============== S U B R O U T I N E =======================================
.text:00405130
.text:00405130 ; Attributes: thunk
.text:00405130
.text:00405130 ; int __cdecl fclose(FILE *Stream)
.text:00405130 fclose          proc near               ; CODE XREF: sub_402BD0+27↑p
.text:00405130
.text:00405130 Stream          = dword ptr  4
.text:00405130
.text:00405130                 jmp     ds:__imp_fclose
.text:00405130 fclose          endp
.text:00405130
.text:00405130 ; ---------------------------------------------------------------------------
.text:00405136                 align 10h
.text:00405140
.text:00405140 ; =============== S U B R O U T I N E =======================================
.text:00405140
.text:00405140 ; Attributes: thunk
.text:00405140
.text:00405140 ; void __cdecl free(void *Block)
.text:00405140 free            proc near               ; CODE XREF: sub_403E80+112↑p
.text:00405140
.text:00405140 Block           = dword ptr  4
.text:00405140
.text:00405140                 jmp     ds:__imp_free
.text:00405140 free            endp
.text:00405140
.text:00405140 ; ---------------------------------------------------------------------------
.text:00405146                 align 10h
.text:00405150
.text:00405150 ; =============== S U B R O U T I N E =======================================
.text:00405150
.text:00405150 ; Attributes: noreturn thunk
.text:00405150
.text:00405150 ; void __cdecl __noreturn abort()
.text:00405150 abort           proc near               ; CODE XREF: sub_403E80:loc_40403A↑p
.text:00405150                                         ; sub_404340:loc_4043DC↑p ...
.text:00405150                 jmp     ds:__imp_abort
.text:00405150 abort           endp
.text:00405150
.text:00405150 ; ---------------------------------------------------------------------------
.text:00405156                 align 10h
.text:00405160
.text:00405160 ; =============== S U B R O U T I N E =======================================
.text:00405160
.text:00405160 ; Attributes: thunk
.text:00405160
.text:00405160 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405160 iswctype        proc near               ; CODE XREF: sub_402D40+78B↑p
.text:00405160
.text:00405160 C               = word ptr  4
.text:00405160 Type            = word ptr  8
.text:00405160
.text:00405160                 jmp     ds:__imp_iswctype
.text:00405160 iswctype        endp
.text:00405160
.text:00405160 ; ---------------------------------------------------------------------------
.text:00405166                 align 10h
.text:00405170
.text:00405170 ; =============== S U B R O U T I N E =======================================
.text:00405170
.text:00405170 ; Attributes: thunk
.text:00405170
.text:00405170 ; int __cdecl isctype(int C, int Type)
.text:00405170 _isctype        proc near               ; CODE XREF: sub_402D40+610↑p
.text:00405170
.text:00405170 C               = dword ptr  4
.text:00405170 Type            = dword ptr  8
.text:00405170
.text:00405170                 jmp     ds:__imp__isctype
.text:00405170 _isctype        endp
.text:00405170
.text:00405170 ; ---------------------------------------------------------------------------
.text:00405176                 align 10h
.text:00405180
.text:00405180 ; =============== S U B R O U T I N E =======================================
.text:00405180
.text:00405180 ; Attributes: thunk
.text:00405180
.text:00405180 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00405180 vfprintf        proc near               ; CODE XREF: sub_404340+C1↑p
.text:00405180                                         ; sub_4048D0+49↑p ...
.text:00405180
.text:00405180 Stream          = dword ptr  4
.text:00405180 Format          = dword ptr  8
.text:00405180 ArgList         = dword ptr  0Ch
.text:00405180
.text:00405180                 jmp     ds:__imp_vfprintf
.text:00405180 vfprintf        endp
.text:00405180
.text:00405180 ; ---------------------------------------------------------------------------
.text:00405186                 align 10h
.text:00405190
.text:00405190 ; =============== S U B R O U T I N E =======================================
.text:00405190
.text:00405190 ; Attributes: thunk
.text:00405190
.text:00405190 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405190 _flsbuf         proc near               ; CODE XREF: sub_404340+128↑p
.text:00405190                                         ; sub_404340+13A↑p ...
.text:00405190
.text:00405190 File            = dword ptr  8
.text:00405190
.text:00405190                 jmp     ds:__imp__flsbuf
.text:00405190 _flsbuf         endp
.text:00405190
.text:00405190 ; ---------------------------------------------------------------------------
.text:00405196                 align 10h
.text:004051A0
.text:004051A0 ; =============== S U B R O U T I N E =======================================
.text:004051A0
.text:004051A0 ; Attributes: thunk
.text:004051A0
.text:004051A0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004051A0 memcpy          proc near               ; CODE XREF: .text:00404738↑p
.text:004051A0                                         ; .text:00404781↑p
.text:004051A0
.text:004051A0 Src             = dword ptr  8
.text:004051A0 Size            = dword ptr  0Ch
.text:004051A0
.text:004051A0                 jmp     ds:__imp_memcpy
.text:004051A0 memcpy          endp
.text:004051A0
.text:004051A0 ; ---------------------------------------------------------------------------
.text:004051A6                 align 10h
.text:004051B0
.text:004051B0 ; =============== S U B R O U T I N E =======================================
.text:004051B0
.text:004051B0 ; Attributes: thunk
.text:004051B0
.text:004051B0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004051B0 memset          proc near               ; CODE XREF: .text:004046B6↑p
.text:004051B0
.text:004051B0 Val             = dword ptr  8
.text:004051B0 Size            = dword ptr  0Ch
.text:004051B0
.text:004051B0                 jmp     ds:__imp_memset
.text:004051B0 memset          endp
.text:004051B0
.text:004051B0 ; ---------------------------------------------------------------------------
.text:004051B6                 align 10h
.text:004051C0
.text:004051C0 ; =============== S U B R O U T I N E =======================================
.text:004051C0
.text:004051C0 ; Attributes: thunk
.text:004051C0
.text:004051C0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:004051C0 calloc          proc near               ; CODE XREF: .text:004046F3↑p
.text:004051C0
.text:004051C0 Count           = dword ptr  4
.text:004051C0 Size            = dword ptr  8
.text:004051C0
.text:004051C0                 jmp     ds:__imp_calloc
.text:004051C0 calloc          endp
.text:004051C0
.text:004051C0 ; ---------------------------------------------------------------------------
.text:004051C6                 align 10h
.text:004051D0
.text:004051D0 ; =============== S U B R O U T I N E =======================================
.text:004051D0
.text:004051D0 ; Attributes: thunk
.text:004051D0
.text:004051D0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004051D0 realloc         proc near               ; CODE XREF: .text:004045F0↑p
.text:004051D0                                         ; sub_404620+16↑p ...
.text:004051D0
.text:004051D0 Block           = dword ptr  4
.text:004051D0 Size            = dword ptr  8
.text:004051D0
.text:004051D0                 jmp     ds:__imp_realloc
.text:004051D0 realloc         endp
.text:004051D0
.text:004051D0 ; ---------------------------------------------------------------------------
.text:004051D6                 align 10h
.text:004051E0
.text:004051E0 ; =============== S U B R O U T I N E =======================================
.text:004051E0
.text:004051E0 ; Attributes: thunk
.text:004051E0
.text:004051E0 ; void *__cdecl malloc(size_t Size)
.text:004051E0 malloc          proc near               ; CODE XREF: .text:00404574↑p
.text:004051E0                                         ; sub_404590+E↑p ...
.text:004051E0
.text:004051E0 Size            = dword ptr  4
.text:004051E0
.text:004051E0                 jmp     ds:__imp_malloc
.text:004051E0 malloc          endp
.text:004051E0
.text:004051E0 ; ---------------------------------------------------------------------------
.text:004051E6                 align 10h
.text:004051F0
.text:004051F0 ; =============== S U B R O U T I N E =======================================
.text:004051F0
.text:004051F0 ; Attributes: thunk
.text:004051F0
.text:004051F0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004051F0 strcmp          proc near               ; CODE XREF: sub_4049D4+180↑p
.text:004051F0
.text:004051F0 Str1            = dword ptr  4
.text:004051F0 Str2            = dword ptr  8
.text:004051F0
.text:004051F0                 jmp     ds:__imp_strcmp
.text:004051F0 strcmp          endp
.text:004051F0
.text:004051F0 ; ---------------------------------------------------------------------------
.text:004051F6                 align 10h
.text:00405200
.text:00405200 ; =============== S U B R O U T I N E =======================================
.text:00405200
.text:00405200 ; Attributes: thunk
.text:00405200
.text:00405200 ; int __cdecl fflush(FILE *Stream)
.text:00405200 fflush          proc near               ; CODE XREF: sub_4048D0+19↑p
.text:00405200                                         ; sub_4048D0+81↑p ...
.text:00405200
.text:00405200 Stream          = dword ptr  4
.text:00405200
.text:00405200                 jmp     ds:__imp_fflush
.text:00405200 fflush          endp
.text:00405200
.text:00405200 ; ---------------------------------------------------------------------------
.text:00405206                 align 10h
.text:00405210
.text:00405210 ; =============== S U B R O U T I N E =======================================
.text:00405210
.text:00405210 ; Attributes: thunk
.text:00405210
.text:00405210 ; char *__cdecl strerror(int ErrorMessage)
.text:00405210 strerror        proc near               ; CODE XREF: sub_4048D0+A5↑p
.text:00405210                                         ; sub_4049D4+10F↑p
.text:00405210
.text:00405210 ErrorMessage    = dword ptr  4
.text:00405210
.text:00405210                 jmp     ds:__imp_strerror
.text:00405210 strerror        endp
.text:00405210
.text:00405210 ; ---------------------------------------------------------------------------
.text:00405216                 align 10h
.text:00405220
.text:00405220 ; =============== S U B R O U T I N E =======================================
.text:00405220
.text:00405220 ; Attributes: thunk
.text:00405220
.text:00405220 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405220 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405220
.text:00405220 lpTopLevelExceptionFilter= dword ptr  4
.text:00405220
.text:00405220                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405220 SetUnhandledExceptionFilter endp
.text:00405220
.text:00405220 ; ---------------------------------------------------------------------------
.text:00405226                 align 10h
.text:00405230
.text:00405230 ; =============== S U B R O U T I N E =======================================
.text:00405230
.text:00405230 ; Attributes: noreturn thunk
.text:00405230
.text:00405230 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405230 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405230
.text:00405230 uExitCode       = dword ptr  4
.text:00405230
.text:00405230                 jmp     ds:__imp_ExitProcess
.text:00405230 ExitProcess     endp
.text:00405230
.text:00405230 ; ---------------------------------------------------------------------------
.text:00405236                 align 10h
.text:00405240
.text:00405240 ; =============== S U B R O U T I N E =======================================
.text:00405240
.text:00405240 ; Attributes: thunk
.text:00405240
.text:00405240 ; BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName)
.text:00405240 SetCurrentDirectoryA proc near          ; CODE XREF: sub_404B70+12↑p
.text:00405240
.text:00405240 lpPathName      = dword ptr  4
.text:00405240
.text:00405240                 jmp     ds:__imp_SetCurrentDirectoryA
.text:00405240 SetCurrentDirectoryA endp
.text:00405240
.text:00405240 ; ---------------------------------------------------------------------------
.text:00405246                 align 10h
.text:00405250
.text:00405250 ; =============== S U B R O U T I N E =======================================
.text:00405250
.text:00405250 ; Attributes: thunk
.text:00405250
.text:00405250 ; DWORD __stdcall GetLastError()
.text:00405250 GetLastError    proc near               ; CODE XREF: sub_404E70+3↑p
.text:00405250                 jmp     ds:__imp_GetLastError
.text:00405250 GetLastError    endp
.text:00405250
.text:00405250 ; ---------------------------------------------------------------------------
.text:00405256                 align 10h
.text:00405260 dword_405260    dd 0FFFFFFFFh           ; DATA XREF: .text:00404F19↑r
.text:00405260                                         ; .text:loc_404F40↑r ...
.text:00405264 dword_405264    dd 0                    ; DATA XREF: .text:loc_404F4C↑r
.text:00405264                                         ; sub_404F70:loc_404FBD↑r
.text:00405268                 dd 0FFFFFFFFh
.text:0040526C dword_40526C    dd 65h dup(0)           ; DATA XREF: .data:off_406084↓o
.text:00405400                 dd 300h dup(?)
.text:00405400 _text           ends
.text:00405400
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004800
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_4013D0+CB↑r
.data:00406010                                         ; sub_4013D0:loc_401528↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_4026A0+11↑r
.data:00406014                                         ; .text:00402741↑r ...
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_4026A0+7D↑w
.data:00406018                                         ; .text:004027AD↑w
.data:0040601C                 align 10h
.data:00406020 dword_406020    dd 1                    ; DATA XREF: sub_403E80+22↑r
.data:00406020                                         ; sub_403E80+65↑r ...
.data:00406024 dword_406024    dd 100h                 ; DATA XREF: sub_403E80+3F↑o
.data:00406024                                         ; sub_403E80+1A2↑r ...
.data:00406028 off_406028      dd offset unk_407040    ; DATA XREF: sub_403E80+1AA↑r
.data:0040602C ; void *off_40602C
.data:0040602C off_40602C      dd offset dword_406024  ; DATA XREF: sub_403E80+39↑r
.data:0040602C                                         ; sub_403E80+60↑w ...
.data:00406030 ; char *Buffer
.data:00406030 Buffer          dd offset aCopyrightC2005
.data:00406030                                         ; DATA XREF: sub_404340+DC↑r
.data:00406030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406034                 align 10h
.data:00406040 ; int Code
.data:00406040 Code            dd 1                    ; DATA XREF: sub_402BD0+6D↑r
.data:00406040                                         ; sub_402BD0+9A↑r ...
.data:00406044                 align 10h
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_404F70+9↑r
.data:00406080                                         ; sub_404F70+1D↑w
.data:00406084 off_406084      dd offset dword_40526C  ; DATA XREF: sub_404EE0+6↑r
.data:00406084                                         ; sub_404EE0+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000230 (    560.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: sub_4026A0+9↑o
.bss:00407000                                         ; sub_4026A0+17↑w ...
.bss:00407004 dword_407004    dd ?                    ; DATA XREF: sub_4026A0+21↑w
.bss:00407004                                         ; .text:00402759↑w
.bss:00407008 dword_407008    dd ?                    ; DATA XREF: sub_4026A0+77↑r
.bss:00407008                                         ; .text:004027A7↑r
.bss:0040700C dword_40700C    dd ?                    ; DATA XREF: sub_4026A0+6B↑r
.bss:0040700C                                         ; .text:0040279B↑r
.bss:00407010                 db    ? ;
.bss:00407011                 db    ? ;
.bss:00407012                 db    ? ;
.bss:00407013                 db    ? ;
.bss:00407014                 db    ? ;
.bss:00407015                 db    ? ;
.bss:00407016                 db    ? ;
.bss:00407017                 db    ? ;
.bss:00407018                 db    ? ;
.bss:00407019                 db    ? ;
.bss:0040701A                 db    ? ;
.bss:0040701B                 db    ? ;
.bss:0040701C                 db    ? ;
.bss:0040701D                 db    ? ;
.bss:0040701E                 db    ? ;
.bss:0040701F                 db    ? ;
.bss:00407020                 db    ? ;
.bss:00407021                 db    ? ;
.bss:00407022                 db    ? ;
.bss:00407023                 db    ? ;
.bss:00407024                 db    ? ;
.bss:00407025                 db    ? ;
.bss:00407026                 db    ? ;
.bss:00407027                 db    ? ;
.bss:00407028                 db    ? ;
.bss:00407029                 db    ? ;
.bss:0040702A                 db    ? ;
.bss:0040702B                 db    ? ;
.bss:0040702C                 db    ? ;
.bss:0040702D                 db    ? ;
.bss:0040702E                 db    ? ;
.bss:0040702F                 db    ? ;
.bss:00407030 ; char *dword_407030
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: .text:00402BA4↑w
.bss:00407030                                         ; sub_402BD0+58↑r
.bss:00407034                 align 10h
.bss:00407040 unk_407040      db    ? ;               ; DATA XREF: sub_403E80+100↑o
.bss:00407040                                         ; .data:off_406028↑o
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140 dword_407140    dd ?                    ; DATA XREF: .text:loc_403811↑o
.bss:00407140                                         ; .text:loc_403830↑o ...
.bss:00407144 dword_407144    dd ?                    ; DATA XREF: .text:loc_4038B0↑o
.bss:00407144                                         ; .text:00403D38↑r ...
.bss:00407148 dword_407148    dd ?                    ; DATA XREF: .text:00403D32↑r
.bss:00407148                                         ; sub_403DE0+2C↑r
.bss:0040714C dword_40714C    dd ?                    ; DATA XREF: .text:00403D26↑r
.bss:0040714C                                         ; sub_403DE0+22↑r
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:00403D42↑r
.bss:00407150                                         ; sub_403DE0+36↑r
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:00403D52↑r
.bss:00407154                                         ; sub_403DE0+4E↑r
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:00403D6F↑r
.bss:00407158                                         ; sub_403DE0+62↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00403D65↑r
.bss:0040715C                                         ; sub_403DE0+70↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:00403D48↑r
.bss:00407160                                         ; sub_403DE0+7A↑r
.bss:00407164                 align 10h
.bss:00407170 ; char *Str1
.bss:00407170 Str1            dd ?                    ; DATA XREF: sub_4049D4:loc_404A0D↑w
.bss:00407170                                         ; sub_4049D4:loc_404B40↑r
.bss:00407174                 align 10h
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: sub_4049D4+2D↑r
.bss:00407180                                         ; sub_4049D4+3F↑w
.bss:00407184                 align 10h
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: sub_4013D0+2F↑w
.bss:00407190                                         ; sub_4013D0+10C↑r ...
.bss:00407194                 db    ? ;
.bss:00407195                 db    ? ;
.bss:00407196                 db    ? ;
.bss:00407197                 db    ? ;
.bss:00407198                 db    ? ;
.bss:00407199                 db    ? ;
.bss:0040719A                 db    ? ;
.bss:0040719B                 db    ? ;
.bss:0040719C                 db    ? ;
.bss:0040719D                 db    ? ;
.bss:0040719E                 db    ? ;
.bss:0040719F                 db    ? ;
.bss:004071A0                 db    ? ;
.bss:004071A1                 db    ? ;
.bss:004071A2                 db    ? ;
.bss:004071A3                 db    ? ;
.bss:004071A4                 db    ? ;
.bss:004071A5                 db    ? ;
.bss:004071A6                 db    ? ;
.bss:004071A7                 db    ? ;
.bss:004071A8                 db    ? ;
.bss:004071A9                 db    ? ;
.bss:004071AA                 db    ? ;
.bss:004071AB                 db    ? ;
.bss:004071AC                 db    ? ;
.bss:004071AD                 db    ? ;
.bss:004071AE                 db    ? ;
.bss:004071AF                 db    ? ;
.bss:004071B0 dword_4071B0    dd ?                    ; DATA XREF: sub_4026A0+71↑w
.bss:004071B0                                         ; .text:004027A1↑w
.bss:004071B4                 align 10h
.bss:004071C0 dword_4071C0    dd ?                    ; CODE XREF: sub_4049D4+63↑p
.bss:004071C0                                         ; DATA XREF: sub_4048D0+1E↑r ...
.bss:004071C4                 align 10h
.bss:004071D0 dword_4071D0    dd ?                    ; DATA XREF: sub_4048D0+4E↑w
.bss:004071D0                                         ; sub_4049D4+AB↑w
.bss:004071D4                 align 40h
.bss:00407200 dword_407200    dd ?                    ; DATA XREF: sub_4049D4+13↑r
.bss:00407204                 align 1000h
.bss:00407204 _bss            ends
.bss:00407204
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 000005AC (   1452.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00004A00
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:0040815C ;
.idata:0040815C ; Imports from libintl3.dll
.idata:0040815C ;
.idata:0040815C                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040815C                                         ; CODE XREF: sub_4013D0+49↑p
.idata:0040815C                                         ; DATA XREF: sub_4013D0+49↑r ...
.idata:00408160                 extrn libintl_gettext:dword
.idata:00408160                                         ; CODE XREF: sub_4013D0+DB↑p
.idata:00408160                                         ; sub_4013D0+100↑p ...
.idata:00408164                 extrn libintl_textdomain:dword
.idata:00408164                                         ; CODE XREF: sub_4013D0+56↑p
.idata:00408164                                         ; DATA XREF: sub_4013D0+56↑r ...
.idata:00408168
.idata:00408170 ;
.idata:00408170 ; Imports from KERNEL32.dll
.idata:00408170 ;
.idata:00408170 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408170                 extrn __imp_ExitProcess:dword
.idata:00408170                                         ; DATA XREF: ExitProcess↑r
.idata:00408174 ; DWORD (__stdcall *GetLastError)()
.idata:00408174                 extrn __imp_GetLastError:dword
.idata:00408174                                         ; DATA XREF: GetLastError↑r
.idata:00408178 ; BOOL (__stdcall *SetCurrentDirectoryA)(LPCSTR lpPathName)
.idata:00408178                 extrn __imp_SetCurrentDirectoryA:dword
.idata:00408178                                         ; DATA XREF: SetCurrentDirectoryA↑r
.idata:0040817C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040817C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040817C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408180
.idata:00408188 ;
.idata:00408188 ; Imports from msvcrt.dll
.idata:00408188 ;
.idata:00408188 ; intptr_t (__cdecl *_execvp)(const char *FileName, const char *const *Arguments)
.idata:00408188                 extrn __imp__execvp:dword
.idata:00408188                                         ; DATA XREF: _execvp↑r
.idata:0040818C
.idata:00408194 ;
.idata:00408194 ; Imports from MSVCP60.DLL
.idata:00408194 ;
.idata:00408194 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00408194                 extrn __imp_mbrtowc:dword
.idata:00408194                                         ; DATA XREF: mbrtowc↑r
.idata:00408198
.idata:004081A0 ;
.idata:004081A0 ; Imports from msvcrt.dll
.idata:004081A0 ;
.idata:004081A0                 extrn __imp___getmainargs:dword
.idata:004081A0                                         ; DATA XREF: __getmainargs↑r
.idata:004081A4 ; int _mb_cur_max
.idata:004081A4                 extrn __mb_cur_max:dword
.idata:004081A4                                         ; DATA XREF: sub_402D40+7↑r
.idata:004081A4                                         ; sub_402D40+5F3↑r
.idata:004081A8 ; char ***(__cdecl *__p__environ)()
.idata:004081A8                 extrn __imp___p__environ:dword
.idata:004081A8                                         ; DATA XREF: __p__environ↑r
.idata:004081AC ; int *(__cdecl *__p__fmode)()
.idata:004081AC                 extrn __imp___p__fmode:dword
.idata:004081AC                                         ; DATA XREF: __p__fmode↑r
.idata:004081B0 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004081B0                 extrn __set_app_type:dword
.idata:004081B0                                         ; CODE XREF: start+D↑p
.idata:004081B0                                         ; .text:0040102D↑p
.idata:004081B0                                         ; DATA XREF: ...
.idata:004081B4 ; void (__cdecl *_cexit)()
.idata:004081B4                 extrn __imp__cexit:dword
.idata:004081B4                                         ; DATA XREF: _cexit↑r
.idata:004081B8 ; int *(__cdecl *_errno)()
.idata:004081B8                 extrn __imp__errno:dword
.idata:004081B8                                         ; DATA XREF: _errno↑r
.idata:004081BC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081BC                 extrn __imp__flsbuf:dword
.idata:004081BC                                         ; DATA XREF: _flsbuf↑r
.idata:004081C0 ; FILE iob[]
.idata:004081C0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081C0                                         ; sub_401080+75↑r ...
.idata:004081C4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081C4                 extrn __imp__isctype:dword
.idata:004081C4                                         ; DATA XREF: _isctype↑r
.idata:004081C8 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081C8                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081C8                                         ; DATA XREF: .text:0040106C↑r
.idata:004081CC ; const unsigned __int16 *pctype
.idata:004081CC                 extrn _pctype:dword     ; DATA XREF: sub_402D40:loc_403434↑r
.idata:004081D0 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081D0                 extrn __imp__setmode:dword
.idata:004081D0                                         ; DATA XREF: _setmode↑r
.idata:004081D4 ; void (__cdecl __noreturn *abort)()
.idata:004081D4                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081D8 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081D8                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081D8                                         ; DATA XREF: sub_401040+C↑r
.idata:004081DC ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081DC                 extrn __imp_calloc:dword
.idata:004081DC                                         ; DATA XREF: calloc↑r
.idata:004081E0 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081E0                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081E4 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081E4                 extrn __imp_fclose:dword
.idata:004081E4                                         ; DATA XREF: fclose↑r
.idata:004081E8 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081E8                 extrn __imp_fflush:dword
.idata:004081E8                                         ; DATA XREF: fflush↑r
.idata:004081EC ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081EC                 extrn __imp_fprintf:dword
.idata:004081EC                                         ; DATA XREF: fprintf↑r
.idata:004081F0 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081F0                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081F4 ; void (__cdecl *free)(void *Block)
.idata:004081F4                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081F8 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081F8                 extrn __imp_getenv:dword
.idata:004081F8                                         ; DATA XREF: getenv↑r
.idata:004081FC ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081FC                 extrn __imp_iswctype:dword
.idata:004081FC                                         ; DATA XREF: iswctype↑r
.idata:00408200 ; void *(__cdecl *malloc)(size_t Size)
.idata:00408200                 extrn __imp_malloc:dword
.idata:00408200                                         ; DATA XREF: malloc↑r
.idata:00408204 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00408204                 extrn __imp_memcpy:dword
.idata:00408204                                         ; DATA XREF: memcpy↑r
.idata:00408208 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00408208                 extrn __imp_memset:dword
.idata:00408208                                         ; DATA XREF: memset↑r
.idata:0040820C ; int (*printf)(const char *const Format, ...)
.idata:0040820C                 extrn __imp_printf:dword
.idata:0040820C                                         ; DATA XREF: printf↑r
.idata:00408210 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00408210                 extrn __imp_realloc:dword
.idata:00408210                                         ; DATA XREF: realloc↑r
.idata:00408214 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00408214                 extrn __imp_setlocale:dword
.idata:00408214                                         ; DATA XREF: setlocale↑r
.idata:00408218 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408218                 extrn __imp_signal:dword
.idata:00408218                                         ; DATA XREF: signal↑r
.idata:0040821C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040821C                 extrn __imp_strchr:dword
.idata:0040821C                                         ; DATA XREF: strchr↑r
.idata:00408220 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00408220                 extrn __imp_strcmp:dword
.idata:00408220                                         ; DATA XREF: strcmp↑r
.idata:00408224 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408224                 extrn __imp_strerror:dword
.idata:00408224                                         ; DATA XREF: strerror↑r
.idata:00408228 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408228                 extrn __imp_strlen:dword
.idata:00408228                                         ; DATA XREF: strlen↑r
.idata:0040822C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040822C                 extrn __imp_strncmp:dword
.idata:0040822C                                         ; DATA XREF: strncmp↑r
.idata:00408230 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408230                 extrn __imp_vfprintf:dword
.idata:00408230                                         ; DATA XREF: vfprintf↑r
.idata:00408234
.idata:00408234
.idata:00408234
.idata:00408234                 end start
