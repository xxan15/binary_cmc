.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 554BF806983CE66405A79F83300E40EACC12C98E22E948C0D659AF7BB6AB0802
.text:00401000 ; Input MD5    : E65D3037D7EC9B0786C8680C4F57C5E9
.text:00401000 ; Input CRC32  : B36DD248
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/uptime.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A279 (Wed Apr 20 18:42:01 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00005E10 (  24080.)
.text:00401000 ; Section size in file          : 00006000 (  24576.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401380+62↓p
.text:00401040                                         ; .text:00406800↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_4067A0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_407000
.text:004010A2                 mov     edx, dword_4070A0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_407004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4070C0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4070C0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_406770
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_407000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_407004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401380
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_4067A0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401380+1F↓o
.text:00401280                                         ; sub_401380+C3↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401380+39↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401380+41↓o
.text:004012C3                                         ; sub_401380+4E↓o
.text:004012CD aKavehGhazi     db 'Kaveh Ghazi',0      ; DATA XREF: sub_401380+6F↓o
.text:004012D9 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401380+77↓o
.text:004012E9 aJosephArceneau db 'Joseph Arceneaux',0 ; DATA XREF: sub_401380+7F↓o
.text:004012FA a530            db '5.3.0',0            ; DATA XREF: sub_401380+8F↓o
.text:00401300 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401380+97↓o
.text:0040130E ; const FILE stru_40130E
.text:0040130E stru_40130E     FILE <69747075h, 2500656Dh, 78650073h, 20617274h, 7265706Fh, \
.text:0040130E                                         ; DATA XREF: sub_401380+9F↓o
.text:0040130E                                         ; sub_401380+139↓o ...
.text:0040130E                       20646E61h, 90007325h, 90909090h>
.text:0040132E                 db  90h
.text:0040132F                 db  90h
.text:00401330                 db  90h
.text:00401331                 db  90h
.text:00401332                 db  90h
.text:00401333                 db  90h
.text:00401334                 db  90h
.text:00401335                 db  90h
.text:00401336                 db  90h
.text:00401337                 db  90h
.text:00401338                 db  90h
.text:00401339                 db  90h
.text:0040133A                 db  90h
.text:0040133B                 db  90h
.text:0040133C                 db  90h
.text:0040133D                 db  90h
.text:0040133E                 db  90h
.text:0040133F                 db  90h
.text:00401340 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401340                                         ; DATA XREF: sub_401380:loc_40150C↓o
.text:00401340                                         ; sub_401790+F↓o
.text:00401367 ; const char aVarRunUtmp[]
.text:00401367 aVarRunUtmp     db '/var/run/utmp',0    ; DATA XREF: sub_401380:loc_401544↓o
.text:00401367                                         ; sub_401380+1F2↓o ...
.text:00401375                 align 10h
.text:00401380
.text:00401380 ; =============== S U B R O U T I N E =======================================
.text:00401380
.text:00401380 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401380
.text:00401380 sub_401380      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401380
.text:00401380 Category        = dword ptr -48h
.text:00401380 Locale          = dword ptr -44h
.text:00401380 var_40          = dword ptr -40h
.text:00401380 var_3C          = byte ptr -3Ch
.text:00401380 var_38          = dword ptr -38h
.text:00401380 var_34          = dword ptr -34h
.text:00401380 var_30          = byte ptr -30h
.text:00401380 var_2C          = dword ptr -2Ch
.text:00401380 var_28          = dword ptr -28h
.text:00401380 var_24          = dword ptr -24h
.text:00401380 var_18          = dword ptr -18h
.text:00401380 var_14          = dword ptr -14h
.text:00401380 var_10          = dword ptr -10h
.text:00401380 var_C           = dword ptr -0Ch
.text:00401380 arg_0           = dword ptr  8
.text:00401380 arg_4           = dword ptr  0Ch
.text:00401380
.text:00401380                 push    ebp
.text:00401381                 xor     eax, eax
.text:00401383                 mov     ebp, esp
.text:00401385                 push    esi
.text:00401386                 push    ebx
.text:00401387                 sub     esp, 40h
.text:0040138A                 mov     esi, [ebp+arg_4]
.text:0040138D                 and     esp, 0FFFFFFF0h
.text:00401390                 mov     ebx, [ebp+arg_0]
.text:00401393                 call    __alloca
.text:00401398                 call    sub_406840
.text:0040139D                 mov     edx, [esi]
.text:0040139F                 mov     [esp+48h+Locale], offset Locale ; Locale
.text:004013A7                 mov     [esp+48h+Category], 0 ; Category
.text:004013AE                 mov     ds:dword_408330, edx
.text:004013B4                 call    setlocale
.text:004013B9                 mov     [esp+48h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004013C1                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:004013C8                 call    ds:__imp_libintl_bindtextdomain
.text:004013CE                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:004013D5                 call    ds:libintl_textdomain
.text:004013DB                 mov     [esp+48h+Category], offset sub_4031B0 ; void (__cdecl *)()
.text:004013E2                 call    sub_401040
.text:004013E7                 mov     [esp+48h+var_24], 0
.text:004013EF                 mov     [esp+48h+var_28], offset aKavehGhazi ; "Kaveh Ghazi"
.text:004013F7                 mov     [esp+48h+var_2C], offset aDavidMackenzie ; "David MacKenzie"
.text:004013FF                 mov     dword ptr [esp+48h+var_30], offset aJosephArceneau ; "Joseph Arceneaux"
.text:00401407                 mov     [esp+48h+var_34], offset sub_401790 ; int
.text:0040140F                 mov     [esp+48h+var_38], offset a530 ; "5.3.0"
.text:00401417                 mov     dword ptr [esp+48h+var_3C], offset aGnuCoreutils ; "GNU coreutils"
.text:0040141F                 mov     [esp+48h+var_40], offset stru_40130E ; FILE *
.text:00401427                 mov     [esp+48h+Locale], esi ; int
.text:0040142B                 mov     [esp+48h+Category], ebx ; int
.text:0040142E                 call    sub_4030C0
.text:00401433                 mov     [esp+48h+var_38], 0 ; int
.text:0040143B                 mov     dword ptr [esp+48h+var_3C], 0 ; int
.text:00401443                 mov     [esp+48h+var_40], offset Locale ; char *
.text:0040144B                 mov     [esp+48h+Locale], esi ; int
.text:0040144F                 mov     [esp+48h+Category], ebx ; int
.text:00401452                 call    sub_402F20
.text:00401457                 inc     eax
.text:00401458                 jnz     loc_40150C
.text:0040145E                 mov     eax, dword_407010
.text:00401463                 mov     edx, ebx
.text:00401465                 sub     edx, eax
.text:00401467                 jz      loc_401544
.text:0040146D                 dec     edx
.text:0040146E                 jnz     short loc_4014D5
.text:00401470                 mov     ebx, [esi+eax*4]
.text:00401473                 lea     ecx, [ebp+var_14]
.text:00401476                 lea     edx, [ebp+var_18]
.text:00401479                 mov     [esp+48h+var_40], ecx ; int
.text:0040147D                 mov     [esp+48h+Locale], edx ; int
.text:00401481                 mov     [esp+48h+Category], ebx ; char *
.text:00401484                 call    sub_401DB0
.text:00401489                 test    eax, eax
.text:0040148B                 jnz     short loc_4014B0
.text:0040148D
.text:0040148D loc_40148D:                             ; CODE XREF: sub_401380+153↓j
.text:0040148D                 mov     esi, [ebp+var_14]
.text:00401490                 mov     eax, [ebp+var_18]
.text:00401493
.text:00401493 loc_401493:                             ; CODE XREF: sub_401380+1E8↓j
.text:00401493                 mov     [esp+48h+Locale], esi
.text:00401497                 mov     [esp+48h+Category], eax
.text:0040149A                 call    sub_401940
.text:0040149F                 mov     [esp+48h+Category], 0 ; Code
.text:004014A6
.text:004014A6 loc_4014A6:                             ; CODE XREF: sub_401380+1BF↓j
.text:004014A6                 call    exit
.text:004014A6 ; ---------------------------------------------------------------------------
.text:004014AB                 align 10h
.text:004014B0
.text:004014B0 loc_4014B0:                             ; CODE XREF: sub_401380+10B↑j
.text:004014B0                 call    _errno
.text:004014B5                 mov     dword ptr [esp+48h+var_3C], ebx ; char
.text:004014B9                 mov     [esp+48h+var_40], (offset stru_40130E._cnt+3) ; char *
.text:004014C1                 mov     ebx, [eax]
.text:004014C3                 mov     [esp+48h+Category], 1 ; Code
.text:004014CA                 mov     [esp+48h+Locale], ebx ; ErrorMessage
.text:004014CE                 call    sub_404F50
.text:004014D3                 jmp     short loc_40148D
.text:004014D5 ; ---------------------------------------------------------------------------
.text:004014D5
.text:004014D5 loc_4014D5:                             ; CODE XREF: sub_401380+EE↑j
.text:004014D5                 mov     edx, [esi+eax*4+4]
.text:004014D9                 mov     [esp+48h+Category], edx ; char *
.text:004014DC                 call    sub_402EF0
.text:004014E1                 mov     [esp+48h+Category], (offset stru_40130E._base+2)
.text:004014E8                 mov     esi, eax
.text:004014EA                 call    ds:libintl_gettext
.text:004014F0                 mov     dword ptr [esp+48h+var_3C], esi ; char
.text:004014F4                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:004014FC                 mov     [esp+48h+Category], 0 ; Code
.text:00401503                 mov     [esp+48h+var_40], eax ; char *
.text:00401507                 call    sub_404F50
.text:0040150C
.text:0040150C loc_40150C:                             ; CODE XREF: sub_401380+D8↑j
.text:0040150C                 mov     [esp+48h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401513                 call    ds:libintl_gettext
.text:00401519                 mov     ecx, ds:_iob
.text:0040151F                 mov     ebx, ds:dword_408330
.text:00401525                 add     ecx, 40h ; '@'
.text:00401528                 mov     [esp+48h+var_40], ebx
.text:0040152C                 mov     [esp+48h+Locale], eax ; Format
.text:00401530                 mov     [esp+48h+Category], ecx ; Stream
.text:00401533                 call    fprintf
.text:00401538                 mov     [esp+48h+Category], 1
.text:0040153F                 jmp     loc_4014A6
.text:00401544 ; ---------------------------------------------------------------------------
.text:00401544
.text:00401544 loc_401544:                             ; CODE XREF: sub_401380+E7↑j
.text:00401544                 mov     [esp+48h+Category], offset aVarRunUtmp ; "/var/run/utmp"
.text:0040154B                 lea     ecx, [ebp+var_C]
.text:0040154E                 lea     edx, [ebp+var_10]
.text:00401551                 mov     [esp+48h+var_40], ecx ; int
.text:00401555                 mov     [esp+48h+Locale], edx ; int
.text:00401559                 call    sub_401DB0
.text:0040155E                 test    eax, eax
.text:00401560                 jnz     short loc_40156D
.text:00401562
.text:00401562 loc_401562:                             ; CODE XREF: sub_401380+214↓j
.text:00401562                 mov     esi, [ebp+var_C]
.text:00401565                 mov     eax, [ebp+var_10]
.text:00401568                 jmp     loc_401493
.text:0040156D ; ---------------------------------------------------------------------------
.text:0040156D
.text:0040156D loc_40156D:                             ; CODE XREF: sub_401380+1E0↑j
.text:0040156D                 call    _errno
.text:00401572                 mov     dword ptr [esp+48h+var_3C], offset aVarRunUtmp ; "/var/run/utmp"
.text:0040157A                 mov     [esp+48h+var_40], (offset stru_40130E._cnt+3) ; char *
.text:00401582                 mov     ebx, [eax]
.text:00401584                 mov     [esp+48h+Category], 1 ; Code
.text:0040158B                 mov     [esp+48h+Locale], ebx ; ErrorMessage
.text:0040158F                 call    sub_404F50
.text:00401594                 jmp     short loc_401562
.text:00401594 sub_401380      endp
.text:00401594
.text:00401594 ; ---------------------------------------------------------------------------
.text:00401596                 align 10h
.text:004015A0 aUsageSOptionFi db 'Usage: %s [OPTION]... [ FILE ]',0Ah,0
.text:004015A0                                         ; DATA XREF: sub_401790:loc_4017D3↓o
.text:004015C0 aPrintTheCurren db 'Print the current time, the length of time the system has been up'
.text:004015C0                                         ; DATA XREF: sub_401790+62↓o
.text:004015C0                 db ',',0Ah
.text:004015C0                 db 'the number of users on the system, and the average number of jobs'
.text:004015C0                 db 0Ah
.text:004015C0                 db 'in the run queue over the last 1, 5 and 15 minutes.',0Ah
.text:004015C0                 db 'If FILE is not specified, use %s.  %s as FILE is common.',0Ah
.text:004015C0                 db 0Ah,0
.text:004016B4 aVarLogWtmp     db '/var/log/wtmp',0    ; DATA XREF: sub_401790+6F↓o
.text:004016C2                 align 20h
.text:004016E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004016E0                                         ; DATA XREF: sub_401790+87↓o
.text:0040170D                 align 20h
.text:00401720 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401720                                         ; DATA XREF: sub_401790+A9↓o
.text:00401756 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401790+CB↓o
.text:00401756                 db 'Report bugs to <%s>.',0Ah,0
.text:0040176D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040176D                                         ; DATA XREF: sub_401790+D8↓o
.text:00401783                 align 10h
.text:00401790
.text:00401790 ; =============== S U B R O U T I N E =======================================
.text:00401790
.text:00401790 ; Attributes: noreturn
.text:00401790
.text:00401790 ; void __cdecl __noreturn sub_401790(int Code)
.text:00401790 sub_401790      proc near               ; DATA XREF: sub_401380+87↑o
.text:00401790
.text:00401790 Stream          = dword ptr -1Ch
.text:00401790 Format          = dword ptr -18h
.text:00401790 var_14          = dword ptr -14h
.text:00401790 var_4           = dword ptr -4
.text:00401790 Code            = dword ptr  4
.text:00401790
.text:00401790                 sub     esp, 1Ch
.text:00401793                 mov     [esp+1Ch+var_4], ebx
.text:00401797                 mov     ebx, [esp+1Ch+Code]
.text:0040179B                 test    ebx, ebx
.text:0040179D                 jz      short loc_4017D3
.text:0040179F                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004017A6                 call    ds:libintl_gettext
.text:004017AC                 mov     edx, ds:_iob
.text:004017B2                 mov     ecx, ds:dword_408330
.text:004017B8                 add     edx, 40h ; '@'
.text:004017BB                 mov     [esp+1Ch+var_14], ecx
.text:004017BF                 mov     [esp+1Ch+Format], eax ; Format
.text:004017C3                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004017C6                 call    fprintf
.text:004017CB
.text:004017CB loc_4017CB:                             ; CODE XREF: sub_401790+E8↓j
.text:004017CB                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004017CE                 call    exit
.text:004017D3 ; ---------------------------------------------------------------------------
.text:004017D3
.text:004017D3 loc_4017D3:                             ; CODE XREF: sub_401790+D↑j
.text:004017D3                 mov     [esp+1Ch+Stream], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [ FILE ]\n"
.text:004017DA                 call    ds:libintl_gettext
.text:004017E0                 mov     ecx, ds:dword_408330
.text:004017E6                 mov     [esp+1Ch+Stream], eax ; Format
.text:004017E9                 mov     [esp+1Ch+Format], ecx
.text:004017ED                 call    printf
.text:004017F2                 mov     [esp+1Ch+Stream], offset aPrintTheCurren ; "Print the current time, the length of t"...
.text:004017F9                 call    ds:libintl_gettext
.text:004017FF                 mov     [esp+1Ch+var_14], offset aVarLogWtmp ; "/var/log/wtmp"
.text:00401807                 mov     [esp+1Ch+Format], offset aVarRunUtmp ; "/var/run/utmp"
.text:0040180F                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401812                 call    printf
.text:00401817                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040181E                 call    ds:libintl_gettext
.text:00401824                 mov     ecx, ds:_iob
.text:0040182A                 add     ecx, 20h ; ' '
.text:0040182D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401831                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401834                 call    fputs
.text:00401839                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401840                 call    ds:libintl_gettext
.text:00401846                 mov     ecx, ds:_iob
.text:0040184C                 add     ecx, 20h ; ' '
.text:0040184F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401853                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401856                 call    fputs
.text:0040185B                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401862                 call    ds:libintl_gettext
.text:00401868                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401870                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401873                 call    printf
.text:00401878                 jmp     loc_4017CB
.text:00401878 sub_401790      endp
.text:00401878
.text:00401878 ; ---------------------------------------------------------------------------
.text:0040187D ; const char aR[2]
.text:0040187D aR              db 'r',0                ; DATA XREF: sub_401940+29↓o
.text:0040187F ; const char FileName[]
.text:0040187F FileName        db '/proc/uptime',0     ; DATA XREF: sub_401940+31↓o
.text:0040188C aAm             db 'am',0               ; DATA XREF: sub_401940+17F↓o
.text:0040188F a2d02dSUp       db ' %2d:%02d%s  up ',0 ; DATA XREF: sub_401940+18C↓o
.text:004018A0 aLdDays         db '%ld days',0         ; DATA XREF: sub_401940+1F1↓o
.text:004018A9 aLdDay          db '%ld day',0          ; DATA XREF: sub_401940+1F9↓o
.text:004018B1 ; const char Format[]
.text:004018B1 Format          db ' %2d:%02d,  ',0     ; DATA XREF: sub_401940+21A↓o
.text:004018BE aLuUsers        db '%lu users',0        ; DATA XREF: sub_401940:loc_401B6A↓o
.text:004018C8 aLuUser         db '%lu user',0         ; DATA XREF: sub_401940+23D↓o
.text:004018D1 aLoadAverage2f  db ',  load average: %.2f',0
.text:004018D1                                         ; DATA XREF: sub_401940+279↓o
.text:004018E7 ; const char a2f[]
.text:004018E7 a2f             db ', %.2f',0           ; DATA XREF: sub_401940+2F4↓o
.text:004018E7                                         ; sub_401940+30D↓o
.text:004018EE aDays           db '???? days ??:??,  ',0
.text:004018EE                                         ; DATA XREF: sub_401940:loc_401C62↓o
.text:00401901 aPm             db 'pm',0               ; DATA XREF: sub_401940:loc_401C80↓o
.text:00401904 aUp             db ' ??:????  up ',0    ; DATA XREF: sub_401940:loc_401C8C↓o
.text:00401912 aCouldnTGetBoot db 'couldn',27h,'t get boot time',0
.text:00401912                                         ; DATA XREF: sub_401940:loc_401CA6↓o
.text:00401929                 align 10h
.text:00401930 dbl_401930      dq 2.147483647e9        ; DATA XREF: sub_401940+3B8↓r
.text:00401938                 align 10h
.text:00401940
.text:00401940 ; =============== S U B R O U T I N E =======================================
.text:00401940
.text:00401940
.text:00401940 sub_401940      proc near               ; CODE XREF: sub_401380+11A↑p
.text:00401940
.text:00401940 FileName        = dword ptr -27Ch
.text:00401940 Mode            = dword ptr -278h
.text:00401940 var_270         = dword ptr -270h
.text:00401940 Format          = dword ptr -260h
.text:00401940 var_25C         = dword ptr -25Ch
.text:00401940 var_258         = dword ptr -258h
.text:00401940 var_254         = dword ptr -254h
.text:00401940 var_250         = dword ptr -250h
.text:00401940 var_248         = word ptr -248h
.text:00401940 var_246         = word ptr -246h
.text:00401940 Time            = dword ptr -244h
.text:00401940 EndPtr          = dword ptr -240h
.text:00401940 Buffer          = byte ptr -23Ch
.text:00401940 var_3C          = qword ptr -3Ch
.text:00401940 var_34          = qword ptr -34h
.text:00401940 var_2C          = qword ptr -2Ch
.text:00401940 arg_0           = dword ptr  4
.text:00401940 arg_4           = dword ptr  8
.text:00401940
.text:00401940                 push    ebp
.text:00401941                 push    edi
.text:00401942                 push    esi
.text:00401943                 push    ebx
.text:00401944                 sub     esp, 26Ch
.text:0040194A                 mov     ebp, [esp+27Ch+arg_0]
.text:00401951                 mov     [esp+27Ch+var_250], 0
.text:00401959                 mov     [esp+27Ch+var_254], 0
.text:00401961                 mov     [esp+27Ch+var_258], 0
.text:00401969                 mov     [esp+27Ch+Mode], offset aR ; "r"
.text:00401971                 mov     [esp+27Ch+FileName], offset FileName ; "/proc/uptime"
.text:00401978                 call    fopen
.text:0040197D                 test    eax, eax
.text:0040197F                 mov     edi, eax
.text:00401981                 jz      short loc_4019AD
.text:00401983                 mov     [esp+27Ch+Mode+4], eax ; Stream
.text:00401987                 lea     ebx, [esp+27Ch+Buffer]
.text:0040198B                 mov     [esp+27Ch+Mode], 200h ; MaxCount
.text:00401993                 mov     [esp+27Ch+FileName], ebx ; Buffer
.text:00401996                 call    fgets
.text:0040199B                 cmp     eax, ebx
.text:0040199D                 mov     esi, eax
.text:0040199F                 jz      loc_401CD5
.text:004019A5
.text:004019A5 loc_4019A5:                             ; CODE XREF: sub_401940+3E4↓j
.text:004019A5                                         ; sub_401940+3F3↓j ...
.text:004019A5                 mov     [esp+27Ch+FileName], edi ; Stream
.text:004019A8                 call    fclose
.text:004019AD
.text:004019AD loc_4019AD:                             ; CODE XREF: sub_401940+41↑j
.text:004019AD                                         ; sub_401940+A0↓j
.text:004019AD                 dec     ebp
.text:004019AE                 cmp     ebp, 0FFFFFFFFh
.text:004019B1                 jz      short loc_401A10
.text:004019B3                 mov     ecx, [esp+27Ch+arg_4]
.text:004019BA                 xor     edx, edx
.text:004019BC                 cmp     byte ptr [ecx+2Ch], 0
.text:004019C0                 jz      short loc_401A00
.text:004019C2                 movzx   eax, word ptr [ecx]
.text:004019C5                 cmp     ax, 7
.text:004019C9                 jz      short loc_4019F5
.text:004019CB
.text:004019CB loc_4019CB:                             ; CODE XREF: sub_401940+BA↓j
.text:004019CB                                         ; sub_401940+CA↓j
.text:004019CB                 add     [esp+27Ch+var_250], edx
.text:004019CF                 cmp     ax, 2
.text:004019D3                 jz      short loc_4019E2
.text:004019D5
.text:004019D5 loc_4019D5:                             ; CODE XREF: sub_401940+B3↓j
.text:004019D5                 add     [esp+27Ch+arg_4], 180h
.text:004019E0                 jmp     short loc_4019AD
.text:004019E2 ; ---------------------------------------------------------------------------
.text:004019E2
.text:004019E2 loc_4019E2:                             ; CODE XREF: sub_401940+93↑j
.text:004019E2                 mov     esi, [esp+27Ch+arg_4]
.text:004019E9                 mov     ecx, [esi+154h]
.text:004019EF                 mov     [esp+27Ch+var_254], ecx
.text:004019F3                 jmp     short loc_4019D5
.text:004019F5 ; ---------------------------------------------------------------------------
.text:004019F5
.text:004019F5 loc_4019F5:                             ; CODE XREF: sub_401940+89↑j
.text:004019F5                 mov     edx, 1
.text:004019FA                 jmp     short loc_4019CB
.text:004019FA ; ---------------------------------------------------------------------------
.text:004019FC                 align 10h
.text:00401A00
.text:00401A00 loc_401A00:                             ; CODE XREF: sub_401940+80↑j
.text:00401A00                 mov     ebx, [esp+27Ch+arg_4]
.text:00401A07                 movzx   eax, word ptr [ebx]
.text:00401A0A                 jmp     short loc_4019CB
.text:00401A0A ; ---------------------------------------------------------------------------
.text:00401A0C                 align 10h
.text:00401A10
.text:00401A10 loc_401A10:                             ; CODE XREF: sub_401940+71↑j
.text:00401A10                 mov     [esp+27Ch+FileName], 0 ; Time
.text:00401A17                 call    time
.text:00401A1C                 mov     [esp+27Ch+Time], eax
.text:00401A20                 mov     eax, [esp+27Ch+var_258]
.text:00401A24                 test    eax, eax
.text:00401A26                 jnz     short loc_401A42
.text:00401A28                 mov     edi, [esp+27Ch+var_254]
.text:00401A2C                 test    edi, edi
.text:00401A2E                 jz      loc_401CA6
.text:00401A34
.text:00401A34 loc_401A34:                             ; CODE XREF: sub_401940+390↓j
.text:00401A34                 mov     ebx, [esp+27Ch+Time]
.text:00401A38                 mov     edx, [esp+27Ch+var_254]
.text:00401A3C                 sub     ebx, edx
.text:00401A3E                 mov     [esp+27Ch+var_258], ebx
.text:00401A42
.text:00401A42 loc_401A42:                             ; CODE XREF: sub_401940+E6↑j
.text:00401A42                 mov     eax, [esp+27Ch+var_258]
.text:00401A46                 mov     edi, 0C22E4507h
.text:00401A4B                 mov     ebp, 91A2B3C5h
.text:00401A50                 mov     ebx, [esp+27Ch+var_258]
.text:00401A54                 mov     ecx, 88888889h
.text:00401A59                 imul    edi
.text:00401A5B                 mov     esi, ebx
.text:00401A5D                 sar     esi, 1Fh
.text:00401A60                 lea     edi, [ebx+edx]
.text:00401A63                 sar     edi, 10h
.text:00401A66                 sub     edi, esi
.text:00401A68                 mov     edx, edi
.text:00401A6A                 imul    edx, 15180h
.text:00401A70                 sub     ebx, edx
.text:00401A72                 mov     eax, ebx
.text:00401A74                 imul    ebp
.text:00401A76                 mov     eax, ebx
.text:00401A78                 lea     ebp, [ebx+edx]
.text:00401A7B                 sar     ebp, 0Bh
.text:00401A7E                 cdq
.text:00401A7F                 sub     ebp, edx
.text:00401A81                 mov     eax, ebp
.text:00401A83                 imul    eax, 0E10h
.text:00401A89                 sub     ebx, eax
.text:00401A8B                 mov     eax, ebx
.text:00401A8D                 mov     esi, ebx
.text:00401A8F                 sar     esi, 1Fh
.text:00401A92                 imul    ecx
.text:00401A94                 lea     ecx, [esp+27Ch+Time]
.text:00401A98                 mov     [esp+27Ch+FileName], ecx ; Time
.text:00401A9B                 add     edx, ebx
.text:00401A9D                 sar     edx, 5
.text:00401AA0                 sub     edx, esi
.text:00401AA2                 mov     [esp+27Ch+var_25C], edx
.text:00401AA6                 call    localtime
.text:00401AAB                 test    eax, eax
.text:00401AAD                 mov     ebx, eax
.text:00401AAF                 jz      loc_401C8C
.text:00401AB5                 cmp     dword ptr [eax+8], 0Bh
.text:00401AB9                 jg      loc_401C80
.text:00401ABF                 mov     [esp+27Ch+FileName], offset aAm ; "am"
.text:00401AC6
.text:00401AC6 loc_401AC6:                             ; CODE XREF: sub_401940+347↓j
.text:00401AC6                 call    ds:libintl_gettext
.text:00401ACC                 mov     [esp+27Ch+FileName], offset a2d02dSUp ; " %2d:%02d%s  up "
.text:00401AD3                 mov     esi, eax
.text:00401AD5                 call    ds:libintl_gettext
.text:00401ADB                 mov     [esp+27Ch+var_270], esi
.text:00401ADF                 mov     edx, [ebx+4]
.text:00401AE2                 mov     [esp+27Ch+Format], eax
.text:00401AE6                 mov     eax, 2AAAAAABh
.text:00401AEB                 mov     [esp+27Ch+Mode+4], edx
.text:00401AEF                 mov     esi, [ebx+8]
.text:00401AF2                 imul    esi
.text:00401AF4                 mov     eax, esi
.text:00401AF6                 mov     ebx, edx
.text:00401AF8                 sar     ebx, 1
.text:00401AFA                 cdq
.text:00401AFB                 sub     ebx, edx
.text:00401AFD                 lea     ecx, [ebx+ebx*2]
.text:00401B00                 shl     ecx, 2
.text:00401B03                 sub     esi, ecx
.text:00401B05                 mov     eax, esi
.text:00401B07                 jnz     short loc_401B0E
.text:00401B09                 mov     eax, 0Ch
.text:00401B0E
.text:00401B0E loc_401B0E:                             ; CODE XREF: sub_401940+1C7↑j
.text:00401B0E                 mov     [esp+27Ch+Mode], eax
.text:00401B12                 mov     ebx, [esp+27Ch+Format]
.text:00401B16                 mov     [esp+27Ch+FileName], ebx ; Format
.text:00401B19                 call    printf
.text:00401B1E
.text:00401B1E loc_401B1E:                             ; CODE XREF: sub_401940+361↓j
.text:00401B1E                 cmp     [esp+27Ch+var_258], 0FFFFFFFFh
.text:00401B23                 jz      loc_401C62
.text:00401B29                 test    edi, edi
.text:00401B2B                 jle     short loc_401B52
.text:00401B2D                 mov     [esp+27Ch+Mode+4], edi
.text:00401B31                 mov     [esp+27Ch+Mode], offset aLdDays ; "%ld days"
.text:00401B39                 mov     [esp+27Ch+FileName], offset aLdDay ; "%ld day"
.text:00401B40                 call    ds:libintl_ngettext
.text:00401B46                 mov     [esp+27Ch+Mode], edi
.text:00401B4A                 mov     [esp+27Ch+FileName], eax ; Format
.text:00401B4D                 call    printf
.text:00401B52
.text:00401B52 loc_401B52:                             ; CODE XREF: sub_401940+1EB↑j
.text:00401B52                 mov     [esp+27Ch+Mode], ebp
.text:00401B56                 mov     eax, [esp+27Ch+var_25C]
.text:00401B5A                 mov     [esp+27Ch+FileName], offset Format ; " %2d:%02d,  "
.text:00401B61                 mov     [esp+27Ch+Mode+4], eax
.text:00401B65                 call    printf
.text:00401B6A
.text:00401B6A loc_401B6A:                             ; CODE XREF: sub_401940+337↓j
.text:00401B6A                 mov     [esp+27Ch+Mode], offset aLuUsers ; "%lu users"
.text:00401B72                 mov     esi, [esp+27Ch+var_250]
.text:00401B76                 lea     ebp, [esp+27Ch+var_3C]
.text:00401B7D                 mov     [esp+27Ch+FileName], offset aLuUser ; "%lu user"
.text:00401B84                 mov     [esp+27Ch+Mode+4], esi
.text:00401B88                 call    ds:libintl_ngettext
.text:00401B8E                 mov     edi, [esp+27Ch+var_250]
.text:00401B92                 mov     [esp+27Ch+FileName], eax ; Format
.text:00401B95                 mov     [esp+27Ch+Mode], edi
.text:00401B99                 call    printf
.text:00401B9E                 mov     [esp+27Ch+Mode], 3
.text:00401BA6                 mov     [esp+27Ch+FileName], ebp
.text:00401BA9                 call    sub_4051F0
.text:00401BAE                 cmp     eax, 0FFFFFFFFh
.text:00401BB1                 mov     ebx, eax
.text:00401BB3                 jz      short loc_401BE7
.text:00401BB5                 test    eax, eax
.text:00401BB7                 jle     short loc_401BD9
.text:00401BB9                 mov     [esp+27Ch+FileName], offset aLoadAverage2f ; ",  load average: %.2f"
.text:00401BC0                 call    ds:libintl_gettext
.text:00401BC6                 fld     [esp+27Ch+var_3C]
.text:00401BCD                 mov     [esp+27Ch+FileName], eax ; Format
.text:00401BD0                 fstp    qword ptr [esp+27Ch+Mode]
.text:00401BD4                 call    printf
.text:00401BD9
.text:00401BD9 loc_401BD9:                             ; CODE XREF: sub_401940+277↑j
.text:00401BD9                 cmp     ebx, 1
.text:00401BDC                 jg      short loc_401C46
.text:00401BDE
.text:00401BDE loc_401BDE:                             ; CODE XREF: sub_401940+31D↓j
.text:00401BDE                 cmp     ebx, 2
.text:00401BE1                 jg      short loc_401C2D
.text:00401BE3
.text:00401BE3 loc_401BE3:                             ; CODE XREF: sub_401940+304↓j
.text:00401BE3                 test    ebx, ebx
.text:00401BE5                 jle     short loc_401C07
.text:00401BE7
.text:00401BE7 loc_401BE7:                             ; CODE XREF: sub_401940+273↑j
.text:00401BE7                 mov     edx, ds:_iob
.text:00401BED                 mov     ecx, [edx+24h]
.text:00401BF0                 dec     ecx
.text:00401BF1                 mov     [edx+24h], ecx
.text:00401BF4                 test    ecx, ecx
.text:00401BF6                 js      short loc_401C12
.text:00401BF8                 mov     ebx, ds:_iob
.text:00401BFE                 mov     eax, [ebx+20h]
.text:00401C01                 mov     byte ptr [eax], 0Ah
.text:00401C04                 inc     dword ptr [ebx+20h]
.text:00401C07
.text:00401C07 loc_401C07:                             ; CODE XREF: sub_401940+2A5↑j
.text:00401C07                                         ; sub_401940+2EB↓j
.text:00401C07                 add     esp, 26Ch
.text:00401C0D                 pop     ebx
.text:00401C0E                 pop     esi
.text:00401C0F                 pop     edi
.text:00401C10                 pop     ebp
.text:00401C11                 retn
.text:00401C12 ; ---------------------------------------------------------------------------
.text:00401C12
.text:00401C12 loc_401C12:                             ; CODE XREF: sub_401940+2B6↑j
.text:00401C12                 mov     [esp+27Ch+FileName], 0Ah ; Ch
.text:00401C19                 mov     ebp, ds:_iob
.text:00401C1F                 add     ebp, 20h ; ' '
.text:00401C22                 mov     [esp+27Ch+Mode], ebp ; File
.text:00401C26                 call    _flsbuf
.text:00401C2B                 jmp     short loc_401C07
.text:00401C2D ; ---------------------------------------------------------------------------
.text:00401C2D
.text:00401C2D loc_401C2D:                             ; CODE XREF: sub_401940+2A1↑j
.text:00401C2D                 fld     [esp+27Ch+var_2C]
.text:00401C34                 mov     [esp+27Ch+FileName], offset a2f ; ", %.2f"
.text:00401C3B                 fstp    qword ptr [esp+27Ch+Mode]
.text:00401C3F                 call    printf
.text:00401C44                 jmp     short loc_401BE3
.text:00401C46 ; ---------------------------------------------------------------------------
.text:00401C46
.text:00401C46 loc_401C46:                             ; CODE XREF: sub_401940+29C↑j
.text:00401C46                 fld     [esp+27Ch+var_34]
.text:00401C4D                 mov     [esp+27Ch+FileName], offset a2f ; ", %.2f"
.text:00401C54                 fstp    qword ptr [esp+27Ch+Mode]
.text:00401C58                 call    printf
.text:00401C5D                 jmp     loc_401BDE
.text:00401C62 ; ---------------------------------------------------------------------------
.text:00401C62
.text:00401C62 loc_401C62:                             ; CODE XREF: sub_401940+1E3↑j
.text:00401C62                 mov     [esp+27Ch+FileName], offset aDays ; "???? days ??:??,  "
.text:00401C69                 call    ds:libintl_gettext
.text:00401C6F                 mov     [esp+27Ch+FileName], eax ; Format
.text:00401C72                 call    printf
.text:00401C77                 jmp     loc_401B6A
.text:00401C77 ; ---------------------------------------------------------------------------
.text:00401C7C                 align 10h
.text:00401C80
.text:00401C80 loc_401C80:                             ; CODE XREF: sub_401940+179↑j
.text:00401C80                 mov     [esp+27Ch+FileName], offset aPm ; "pm"
.text:00401C87                 jmp     loc_401AC6
.text:00401C8C ; ---------------------------------------------------------------------------
.text:00401C8C
.text:00401C8C loc_401C8C:                             ; CODE XREF: sub_401940+16F↑j
.text:00401C8C                 mov     [esp+27Ch+FileName], offset aUp ; " ??:????  up "
.text:00401C93                 call    ds:libintl_gettext
.text:00401C99                 mov     [esp+27Ch+FileName], eax ; Format
.text:00401C9C                 call    printf
.text:00401CA1                 jmp     loc_401B1E
.text:00401CA6 ; ---------------------------------------------------------------------------
.text:00401CA6
.text:00401CA6 loc_401CA6:                             ; CODE XREF: sub_401940+EE↑j
.text:00401CA6                 mov     [esp+27Ch+FileName], offset aCouldnTGetBoot ; "couldn't get boot time"
.text:00401CAD                 call    ds:libintl_gettext
.text:00401CB3                 mov     esi, eax
.text:00401CB5                 call    _errno
.text:00401CBA                 mov     [esp+27Ch+Mode+4], esi ; char *
.text:00401CBE                 mov     ebp, [eax]
.text:00401CC0                 mov     [esp+27Ch+FileName], 1 ; Code
.text:00401CC7                 mov     [esp+27Ch+Mode], ebp ; ErrorMessage
.text:00401CCB                 call    sub_404F50
.text:00401CD0                 jmp     loc_401A34
.text:00401CD5 ; ---------------------------------------------------------------------------
.text:00401CD5
.text:00401CD5 loc_401CD5:                             ; CODE XREF: sub_401940+5F↑j
.text:00401CD5                 mov     [esp+27Ch+FileName], eax ; String
.text:00401CD8                 lea     edx, [esp+27Ch+EndPtr]
.text:00401CDC                 mov     [esp+27Ch+Mode], edx ; EndPtr
.text:00401CE0                 call    sub_4032A0
.text:00401CE5                 cmp     esi, [esp+27Ch+EndPtr]
.text:00401CE9                 jz      short loc_401D38
.text:00401CEB                 fldz
.text:00401CED                 fxch    st(1)
.text:00401CEF                 fucom   st(1)
.text:00401CF1                 fnstsw  ax
.text:00401CF3                 fstp    st(1)
.text:00401CF5                 sahf
.text:00401CF6                 jb      short loc_401D29
.text:00401CF8                 fld     ds:dbl_401930
.text:00401CFE                 fucomp  st(1)
.text:00401D00                 fnstsw  ax
.text:00401D02                 sahf
.text:00401D03                 jbe     short loc_401D29
.text:00401D05                 fnstcw  [esp+27Ch+var_246]
.text:00401D09                 movzx   edx, [esp+27Ch+var_246]
.text:00401D0E                 or      dx, 0C00h
.text:00401D13                 mov     [esp+27Ch+var_248], dx
.text:00401D18                 fldcw   [esp+27Ch+var_248]
.text:00401D1C                 fistp   [esp+27Ch+var_258]
.text:00401D20                 fldcw   [esp+27Ch+var_246]
.text:00401D24                 jmp     loc_4019A5
.text:00401D29 ; ---------------------------------------------------------------------------
.text:00401D29
.text:00401D29 loc_401D29:                             ; CODE XREF: sub_401940+3B6↑j
.text:00401D29                                         ; sub_401940+3C3↑j
.text:00401D29                 fstp    st
.text:00401D2B                 mov     [esp+27Ch+var_258], 0FFFFFFFFh
.text:00401D33                 jmp     loc_4019A5
.text:00401D38 ; ---------------------------------------------------------------------------
.text:00401D38
.text:00401D38 loc_401D38:                             ; CODE XREF: sub_401940+3A9↑j
.text:00401D38                 fstp    st
.text:00401D3A                 jmp     loc_4019A5
.text:00401D3A sub_401940      endp
.text:00401D3A
.text:00401D3A ; ---------------------------------------------------------------------------
.text:00401D3F                 align 10h
.text:00401D40                 sub     esp, 1Ch
.text:00401D43                 mov     [esp+18h], ebx
.text:00401D47                 mov     dword ptr [esp], 21h ; '!'
.text:00401D4E                 call    sub_403360
.text:00401D53                 mov     [esp], eax
.text:00401D56                 mov     edx, [esp+20h]
.text:00401D5A                 mov     ebx, eax
.text:00401D5C                 mov     dword ptr [esp+8], 20h ; ' '
.text:00401D64                 add     edx, 2Ch ; ','
.text:00401D67                 mov     [esp+4], edx
.text:00401D6B                 call    strncpy
.text:00401D70                 mov     byte ptr [ebx+20h], 0
.text:00401D74                 mov     [esp], ebx
.text:00401D77                 call    strlen
.text:00401D7C                 lea     eax, [eax+ebx]
.text:00401D7F                 cmp     ebx, eax
.text:00401D81                 jnb     short loc_401D90
.text:00401D83                 cmp     byte ptr [eax-1], 20h ; ' '
.text:00401D87                 jz      short loc_401DA0
.text:00401D89                 lea     esi, [esi+0]
.text:00401D90
.text:00401D90 loc_401D90:                             ; CODE XREF: .text:00401D81↑j
.text:00401D90                                         ; .text:00401DA6↓j ...
.text:00401D90                 mov     eax, ebx
.text:00401D92                 mov     ebx, [esp+18h]
.text:00401D96                 add     esp, 1Ch
.text:00401D99                 retn
.text:00401D99 ; ---------------------------------------------------------------------------
.text:00401D9A                 align 10h
.text:00401DA0
.text:00401DA0 loc_401DA0:                             ; CODE XREF: .text:00401D87↑j
.text:00401DA0                                         ; .text:00401DAE↓j
.text:00401DA0                 dec     eax
.text:00401DA1                 cmp     ebx, eax
.text:00401DA3                 mov     byte ptr [eax], 0
.text:00401DA6                 jnb     short loc_401D90
.text:00401DA8                 cmp     byte ptr [eax-1], 20h ; ' '
.text:00401DAC                 jnz     short loc_401D90
.text:00401DAE                 jmp     short loc_401DA0
.text:00401DB0
.text:00401DB0 ; =============== S U B R O U T I N E =======================================
.text:00401DB0
.text:00401DB0
.text:00401DB0 ; int __cdecl sub_401DB0(char *, int, int)
.text:00401DB0 sub_401DB0      proc near               ; CODE XREF: sub_401380+104↑p
.text:00401DB0                                         ; sub_401380+1D9↑p
.text:00401DB0
.text:00401DB0 String          = dword ptr -2Ch
.text:00401DB0 var_28          = dword ptr -28h
.text:00401DB0 var_24          = dword ptr -24h
.text:00401DB0 var_1C          = dword ptr -1Ch
.text:00401DB0 var_18          = dword ptr -18h
.text:00401DB0 var_14          = dword ptr -14h
.text:00401DB0 arg_0           = dword ptr  4
.text:00401DB0 arg_4           = dword ptr  8
.text:00401DB0 arg_8           = dword ptr  0Ch
.text:00401DB0
.text:00401DB0                 push    ebp
.text:00401DB1                 xor     ebp, ebp
.text:00401DB3                 push    edi
.text:00401DB4                 push    esi
.text:00401DB5                 push    ebx
.text:00401DB6                 sub     esp, 1Ch
.text:00401DB9                 mov     [esp+2Ch+var_18], 4
.text:00401DC1                 mov     [esp+2Ch+String], 600h ; size_t
.text:00401DC8                 call    sub_403360
.text:00401DCD                 mov     [esp+2Ch+var_1C], eax
.text:00401DD1                 mov     edx, [esp+2Ch+arg_0]
.text:00401DD5                 mov     [esp+2Ch+String], edx ; String
.text:00401DD8                 call    sub_405240
.text:00401DDD                 call    sub_405230
.text:00401DE2                 mov     [esp+2Ch+var_14], 0
.text:00401DEA                 lea     esi, [esi+0]
.text:00401DF0
.text:00401DF0 loc_401DF0:                             ; CODE XREF: sub_401DB0+9D↓j
.text:00401DF0                 call    sub_405220
.text:00401DF5                 test    eax, eax
.text:00401DF7                 mov     ebx, eax
.text:00401DF9                 jz      loc_401E7C
.text:00401DFF                 mov     edx, [esp+2Ch+var_18]
.text:00401E03                 cmp     [esp+2Ch+var_14], edx
.text:00401E07                 jz      short loc_401E50
.text:00401E09
.text:00401E09 loc_401E09:                             ; CODE XREF: sub_401DB0+CA↓j
.text:00401E09                 inc     [esp+2Ch+var_14]
.text:00401E0D                 add     ebp, 180h
.text:00401E13                 mov     edi, [esp+2Ch+var_1C]
.text:00401E17                 mov     esi, ebx
.text:00401E19                 mov     eax, 180h
.text:00401E1E                 lea     edx, [edi+ebp]
.text:00401E21                 lea     edi, [edx-180h]
.text:00401E27                 test    edi, 4
.text:00401E2D                 jz      short loc_401E45
.text:00401E2F                 mov     ecx, [ebx]
.text:00401E31                 lea     edi, [edx-17Ch]
.text:00401E37                 mov     eax, 17Ch
.text:00401E3C                 lea     esi, [ebx+4]
.text:00401E3F                 mov     [edx-180h], ecx
.text:00401E45
.text:00401E45 loc_401E45:                             ; CODE XREF: sub_401DB0+7D↑j
.text:00401E45                 cld
.text:00401E46                 mov     ecx, eax
.text:00401E48                 shr     ecx, 2
.text:00401E4B                 rep movsd
.text:00401E4D                 jmp     short loc_401DF0
.text:00401E4D ; ---------------------------------------------------------------------------
.text:00401E4F                 align 10h
.text:00401E50
.text:00401E50 loc_401E50:                             ; CODE XREF: sub_401DB0+57↑j
.text:00401E50                 mov     [esp+2Ch+var_24], 300h ; int
.text:00401E58                 mov     esi, [esp+2Ch+var_14]
.text:00401E5C                 mov     ecx, [esp+2Ch+var_1C]
.text:00401E60                 mov     [esp+2Ch+var_28], esi ; int
.text:00401E64                 mov     [esp+2Ch+String], ecx ; void *
.text:00401E67                 call    sub_403390
.text:00401E6C                 mov     [esp+2Ch+var_1C], eax
.text:00401E70                 mov     eax, [esp+2Ch+var_14]
.text:00401E74                 add     eax, eax
.text:00401E76                 mov     [esp+2Ch+var_18], eax
.text:00401E7A                 jmp     short loc_401E09
.text:00401E7C ; ---------------------------------------------------------------------------
.text:00401E7C
.text:00401E7C loc_401E7C:                             ; CODE XREF: sub_401DB0+49↑j
.text:00401E7C                 call    sub_405210
.text:00401E81                 mov     esi, [esp+2Ch+arg_4]
.text:00401E85                 mov     eax, [esp+2Ch+var_14]
.text:00401E89                 mov     ebx, [esp+2Ch+arg_8]
.text:00401E8D                 mov     ebp, [esp+2Ch+var_1C]
.text:00401E91                 mov     [esi], eax
.text:00401E93                 xor     eax, eax
.text:00401E95                 mov     [ebx], ebp
.text:00401E97                 add     esp, 1Ch
.text:00401E9A                 pop     ebx
.text:00401E9B                 pop     esi
.text:00401E9C                 pop     edi
.text:00401E9D                 pop     ebp
.text:00401E9E                 retn
.text:00401E9E sub_401DB0      endp
.text:00401E9E
.text:00401E9E ; ---------------------------------------------------------------------------
.text:00401E9F                 align 10h
.text:00401EA0 dword_401EA0    dd 90002D2Dh, 7 dup(90909090h)
.text:00401EA0                                         ; DATA XREF: sub_4020F0+E4↓o
.text:00401EC0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401EC0                                         ; DATA XREF: sub_4020F0+2FC↓o
.text:00401EED                 align 20h
.text:00401F00 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401F00                                         ; DATA XREF: sub_4020F0:loc_402452↓o
.text:00401F2D                 align 20h
.text:00401F40 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401F40                                         ; DATA XREF: sub_4020F0:loc_4024F0↓o
.text:00401F40                                         ; sub_4020F0:loc_4028B7↓o
.text:00401F66                 align 20h
.text:00401F80 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401F80                                         ; DATA XREF: sub_4020F0+48E↓o
.text:00401FA0 dword_401FA0    dd 90909000h, 7 dup(90909090h)
.text:00401FA0                                         ; DATA XREF: sub_4020F0:loc_4025C1↓o
.text:00401FC0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401FC0                                         ; DATA XREF: sub_4020F0:loc_4025DA↓o
.text:00401FE0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401FE0                                         ; DATA XREF: sub_4020F0:loc_4026BF↓o
.text:00401FE0                                         ; sub_4020F0:loc_4029EC↓o
.text:00402007                 align 20h
.text:00402020 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402020                                         ; DATA XREF: sub_4020F0:loc_402833↓o
.text:0040204E                 align 20h
.text:00402060 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402060                                         ; DATA XREF: sub_4020F0:loc_40291F↓o
.text:00402081 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402081                                         ; DATA XREF: sub_4020F0+93F↓o
.text:0040209B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040209B                                         ; DATA XREF: sub_4020F0:loc_402A67↓o
.text:004020B5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:004020B5                                         ; DATA XREF: sub_4020F0:loc_402A8E↓o
.text:004020D3 ; const char VarName[]
.text:004020D3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4020F0:loc_402C40↓o
.text:004020E3                 align 10h
.text:004020F0
.text:004020F0 ; =============== S U B R O U T I N E =======================================
.text:004020F0
.text:004020F0
.text:004020F0 ; int __cdecl sub_4020F0(int, int, char *Str, int, int, int, int, int)
.text:004020F0 sub_4020F0      proc near               ; CODE XREF: sub_402C80+5A↓p
.text:004020F0                                         ; .text:00402D6A↓p ...
.text:004020F0
.text:004020F0 Str1            = dword ptr -5Ch
.text:004020F0 Str2            = dword ptr -58h
.text:004020F0 MaxCount        = dword ptr -54h
.text:004020F0 var_50          = dword ptr -50h
.text:004020F0 var_4C          = dword ptr -4Ch
.text:004020F0 var_3C          = dword ptr -3Ch
.text:004020F0 var_38          = dword ptr -38h
.text:004020F0 var_34          = dword ptr -34h
.text:004020F0 var_30          = dword ptr -30h
.text:004020F0 var_2C          = dword ptr -2Ch
.text:004020F0 var_28          = dword ptr -28h
.text:004020F0 var_24          = dword ptr -24h
.text:004020F0 var_20          = dword ptr -20h
.text:004020F0 var_1C          = dword ptr -1Ch
.text:004020F0 var_18          = dword ptr -18h
.text:004020F0 var_14          = dword ptr -14h
.text:004020F0 arg_0           = dword ptr  4
.text:004020F0 arg_4           = dword ptr  8
.text:004020F0 Str             = dword ptr  0Ch
.text:004020F0 arg_C           = dword ptr  10h
.text:004020F0 arg_10          = dword ptr  14h
.text:004020F0 arg_14          = dword ptr  18h
.text:004020F0 arg_18          = dword ptr  1Ch
.text:004020F0 arg_1C          = dword ptr  20h
.text:004020F0
.text:004020F0                 push    ebp
.text:004020F1                 mov     eax, 0FFFFFFFFh
.text:004020F6                 push    edi
.text:004020F7                 push    esi
.text:004020F8                 push    ebx
.text:004020F9                 sub     esp, 4Ch
.text:004020FC                 mov     esi, [esp+5Ch+Str]
.text:00402100                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402104                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402107                 mov     ebx, [ebp+4]
.text:0040210A                 setz    dl
.text:0040210D                 movzx   ecx, dl
.text:00402110                 dec     ecx
.text:00402111                 and     ecx, ebx
.text:00402113                 mov     [esp+5Ch+var_14], ecx
.text:00402117                 mov     ecx, [esp+5Ch+arg_0]
.text:0040211B                 test    ecx, ecx
.text:0040211D                 jle     loc_402247
.text:00402123                 mov     dword ptr [ebp+0Ch], 0
.text:0040212A                 mov     ebx, [ebp+0]
.text:0040212D                 test    ebx, ebx
.text:0040212F                 jz      loc_402C60
.text:00402135                 mov     edi, [ebp+10h]
.text:00402138                 test    edi, edi
.text:0040213A                 jnz     short loc_402193
.text:0040213C                 lea     esi, [esi+0]
.text:00402140
.text:00402140 loc_402140:                             ; CODE XREF: sub_4020F0+B7C↓j
.text:00402140                 mov     [ebp+24h], ebx
.text:00402143                 mov     esi, [esp+5Ch+Str]
.text:00402147                 mov     [ebp+20h], ebx
.text:0040214A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040214E                 xor     ebx, ebx
.text:00402150                 mov     dword ptr [ebp+14h], 0
.text:00402157                 test    ecx, ecx
.text:00402159                 jz      loc_402C40
.text:0040215F
.text:0040215F loc_40215F:                             ; CODE XREF: sub_4020F0+B64↓j
.text:0040215F                 mov     ebx, 1
.text:00402164
.text:00402164 loc_402164:                             ; CODE XREF: sub_4020F0+B5E↓j
.text:00402164                 mov     [ebp+1Ch], ebx
.text:00402167                 mov     ecx, [esp+5Ch+Str]
.text:0040216B                 movzx   eax, byte ptr [ecx]
.text:0040216E                 cmp     al, 2Dh ; '-'
.text:00402170                 jz      loc_402C30
.text:00402176                 cmp     al, 2Bh ; '+'
.text:00402178                 jz      loc_402C19
.text:0040217E                 xor     edx, edx
.text:00402180                 test    ebx, ebx
.text:00402182                 setz    dl
.text:00402185                 mov     [ebp+18h], edx
.text:00402188
.text:00402188 loc_402188:                             ; CODE XREF: sub_4020F0+B35↓j
.text:00402188                 mov     [esp+5Ch+Str], esi
.text:0040218C                 mov     dword ptr [ebp+10h], 1
.text:00402193
.text:00402193 loc_402193:                             ; CODE XREF: sub_4020F0+4A↑j
.text:00402193                 mov     eax, [ebp+14h]
.text:00402196                 test    eax, eax
.text:00402198                 jz      short loc_4021A3
.text:0040219A                 cmp     byte ptr [eax], 0
.text:0040219D                 jnz     loc_402280
.text:004021A3
.text:004021A3 loc_4021A3:                             ; CODE XREF: sub_4020F0+A8↑j
.text:004021A3                 mov     ebx, [ebp+0]
.text:004021A6                 cmp     [ebp+24h], ebx
.text:004021A9                 jle     short loc_4021AE
.text:004021AB                 mov     [ebp+24h], ebx
.text:004021AE
.text:004021AE loc_4021AE:                             ; CODE XREF: sub_4020F0+B9↑j
.text:004021AE                 cmp     [ebp+20h], ebx
.text:004021B1                 jle     short loc_4021B6
.text:004021B3                 mov     [ebp+20h], ebx
.text:004021B6
.text:004021B6 loc_4021B6:                             ; CODE XREF: sub_4020F0+C1↑j
.text:004021B6                 cmp     dword ptr [ebp+18h], 1
.text:004021BA                 jz      loc_402B90
.text:004021C0
.text:004021C0 loc_4021C0:                             ; CODE XREF: sub_4020F0+B13↓j
.text:004021C0                 cmp     ebx, [esp+5Ch+arg_0]
.text:004021C4                 jz      loc_402B74
.text:004021CA                 cld
.text:004021CB                 mov     ecx, [esp+5Ch+arg_4]
.text:004021CF                 mov     edx, 3
.text:004021D4                 mov     edi, offset dword_401EA0
.text:004021D9                 mov     esi, [ecx+ebx*4]
.text:004021DC                 mov     ecx, edx
.text:004021DE                 repe cmpsb
.text:004021E0                 jnz     short loc_40221C
.text:004021E2                 mov     edx, [ebp+24h]
.text:004021E5                 lea     eax, [ebx+1]
.text:004021E8                 cmp     [ebp+20h], edx
.text:004021EB                 mov     [ebp+0], eax
.text:004021EE                 jz      loc_402B88
.text:004021F4                 cmp     edx, eax
.text:004021F6                 jz      short loc_402210
.text:004021F8                 mov     [esp+5Ch+Str2], ebp
.text:004021FC                 mov     ebx, [esp+5Ch+arg_4]
.text:00402200                 mov     [esp+5Ch+Str1], ebx
.text:00402203                 call    sub_402DA0
.text:00402208                 nop
.text:00402209                 lea     esi, [esi+0]
.text:00402210
.text:00402210 loc_402210:                             ; CODE XREF: sub_4020F0+106↑j
.text:00402210                                         ; sub_4020F0+A9B↓j
.text:00402210                 mov     eax, [esp+5Ch+arg_0]
.text:00402214                 mov     ebx, eax
.text:00402216                 mov     [ebp+24h], eax
.text:00402219                 mov     [ebp+0], eax
.text:0040221C
.text:0040221C loc_40221C:                             ; CODE XREF: sub_4020F0+F0↑j
.text:0040221C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402220                 jz      loc_402B74
.text:00402226                 mov     esi, [esp+5Ch+arg_4]
.text:0040222A                 mov     eax, [esi+ebx*4]
.text:0040222D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402230                 jz      short loc_402257
.text:00402232
.text:00402232 loc_402232:                             ; CODE XREF: sub_4020F0+16D↓j
.text:00402232                 mov     edx, [ebp+18h]
.text:00402235                 test    edx, edx
.text:00402237                 jz      short loc_402250
.text:00402239                 mov     [ebp+0Ch], eax
.text:0040223C                 lea     edi, [ebx+1]
.text:0040223F                 mov     eax, 1
.text:00402244                 mov     [ebp+0], edi
.text:00402247
.text:00402247 loc_402247:                             ; CODE XREF: sub_4020F0+2D↑j
.text:00402247                                         ; sub_4020F0+165↓j ...
.text:00402247                 add     esp, 4Ch
.text:0040224A                 pop     ebx
.text:0040224B                 pop     esi
.text:0040224C                 pop     edi
.text:0040224D                 pop     ebp
.text:0040224E                 retn
.text:0040224E ; ---------------------------------------------------------------------------
.text:0040224F                 align 10h
.text:00402250
.text:00402250 loc_402250:                             ; CODE XREF: sub_4020F0+147↑j
.text:00402250                                         ; sub_4020F0+A8A↓j ...
.text:00402250                 mov     eax, 0FFFFFFFFh
.text:00402255                 jmp     short loc_402247
.text:00402257 ; ---------------------------------------------------------------------------
.text:00402257
.text:00402257 loc_402257:                             ; CODE XREF: sub_4020F0+140↑j
.text:00402257                 movzx   edx, byte ptr [eax+1]
.text:0040225B                 test    dl, dl
.text:0040225D                 jz      short loc_402232
.text:0040225F                 mov     ebx, [esp+5Ch+arg_C]
.text:00402263                 xor     ecx, ecx
.text:00402265                 test    ebx, ebx
.text:00402267                 jz      short loc_402272
.text:00402269                 cmp     dl, 2Dh ; '-'
.text:0040226C                 jz      loc_402B6A
.text:00402272
.text:00402272 loc_402272:                             ; CODE XREF: sub_4020F0+177↑j
.text:00402272                                         ; sub_4020F0+A7F↓j
.text:00402272                 lea     esi, [ecx+eax+1]
.text:00402276                 mov     [ebp+14h], esi
.text:00402279                 lea     esi, [esi+0]
.text:00402280
.text:00402280 loc_402280:                             ; CODE XREF: sub_4020F0+AD↑j
.text:00402280                 mov     ecx, [esp+5Ch+arg_C]
.text:00402284                 test    ecx, ecx
.text:00402286                 jz      loc_402610
.text:0040228C                 mov     edx, [ebp+0]
.text:0040228F                 mov     edi, [esp+5Ch+arg_4]
.text:00402293                 mov     eax, [edi+edx*4]
.text:00402296                 movzx   edx, byte ptr [eax+1]
.text:0040229A                 cmp     dl, 2Dh ; '-'
.text:0040229D                 jz      short loc_4022B5
.text:0040229F                 mov     ebx, [esp+5Ch+arg_14]
.text:004022A3                 test    ebx, ebx
.text:004022A5                 jz      loc_402610
.text:004022AB                 cmp     byte ptr [eax+2], 0
.text:004022AF                 jz      loc_402B4A
.text:004022B5
.text:004022B5 loc_4022B5:                             ; CODE XREF: sub_4020F0+1AD↑j
.text:004022B5                                         ; sub_4020F0+A75↓j
.text:004022B5                 mov     [esp+5Ch+var_18], 0
.text:004022BD                 mov     ecx, [ebp+14h]
.text:004022C0                 mov     [esp+5Ch+var_1C], 0
.text:004022C8                 mov     [esp+5Ch+var_20], 0
.text:004022D0                 mov     edi, ecx
.text:004022D2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004022DA                 movzx   eax, byte ptr [ecx]
.text:004022DD                 test    al, al
.text:004022DF                 jz      short loc_4022FC
.text:004022E1                 cmp     al, 3Dh ; '='
.text:004022E3                 jz      short loc_4022FC
.text:004022E5                 lea     esi, [esi+0]
.text:004022E9                 lea     edi, [edi+0]
.text:004022F0
.text:004022F0 loc_4022F0:                             ; CODE XREF: sub_4020F0+20A↓j
.text:004022F0                 inc     edi
.text:004022F1                 movzx   eax, byte ptr [edi]
.text:004022F4                 test    al, al
.text:004022F6                 jz      short loc_4022FC
.text:004022F8                 cmp     al, 3Dh ; '='
.text:004022FA                 jnz     short loc_4022F0
.text:004022FC
.text:004022FC loc_4022FC:                             ; CODE XREF: sub_4020F0+1EF↑j
.text:004022FC                                         ; sub_4020F0+1F3↑j ...
.text:004022FC                 mov     [esp+5Ch+var_28], 0
.text:00402304                 mov     esi, [esp+5Ch+arg_C]
.text:00402308                 mov     ebx, [esi]
.text:0040230A                 test    ebx, ebx
.text:0040230C                 mov     edx, ebx
.text:0040230E                 jz      loc_402530
.text:00402314                 lea     esi, [esi+0]
.text:0040231A                 lea     edi, [edi+0]
.text:00402320
.text:00402320 loc_402320:                             ; CODE XREF: sub_4020F0+25E↓j
.text:00402320                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402324                 mov     ebx, edi
.text:00402326                 sub     ebx, ecx
.text:00402328                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:0040232C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:0040232F                 call    strncmp
.text:00402334                 test    eax, eax
.text:00402336                 jz      loc_402AC6
.text:0040233C
.text:0040233C loc_40233C:                             ; CODE XREF: sub_4020F0+A0F↓j
.text:0040233C                                         ; sub_4020F0+A24↓j ...
.text:0040233C                 inc     [esp+5Ch+var_28]
.text:00402340                 add     esi, 10h
.text:00402343                 mov     ecx, [esi]
.text:00402345                 test    ecx, ecx
.text:00402347                 mov     edx, ecx
.text:00402349                 jz      short loc_402350
.text:0040234B                 mov     ecx, [ebp+14h]
.text:0040234E                 jmp     short loc_402320
.text:00402350 ; ---------------------------------------------------------------------------
.text:00402350
.text:00402350 loc_402350:                             ; CODE XREF: sub_4020F0+259↑j
.text:00402350                                         ; sub_4020F0+A55↓j
.text:00402350                 mov     esi, [esp+5Ch+var_20]
.text:00402354                 test    esi, esi
.text:00402356                 jz      short loc_402364
.text:00402358                 mov     edx, [esp+5Ch+var_1C]
.text:0040235C                 test    edx, edx
.text:0040235E                 jz      loc_402A70
.text:00402364
.text:00402364 loc_402364:                             ; CODE XREF: sub_4020F0+266↑j
.text:00402364                 mov     eax, [esp+5Ch+var_18]
.text:00402368                 test    eax, eax
.text:0040236A                 jz      loc_402530
.text:00402370                 mov     ecx, [ebp+0]
.text:00402373                 lea     eax, [ecx+1]
.text:00402376                 mov     [ebp+0], eax
.text:00402379                 cmp     byte ptr [edi], 0
.text:0040237C                 jz      loc_402490
.text:00402382                 mov     ecx, [esp+5Ch+var_18]
.text:00402386                 mov     esi, [ecx+4]
.text:00402389                 test    esi, esi
.text:0040238B                 jz      short loc_4023D6
.text:0040238D                 lea     ebx, [edi+1]
.text:00402390                 mov     [ebp+0Ch], ebx
.text:00402393
.text:00402393 loc_402393:                             ; CODE XREF: sub_4020F0+3A8↓j
.text:00402393                                         ; sub_4020F0+3C4↓j
.text:00402393                 mov     ebx, [ebp+14h]
.text:00402396                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402399                 call    strlen
.text:0040239E                 add     [ebp+14h], eax
.text:004023A1                 mov     esi, [esp+5Ch+arg_10]
.text:004023A5                 test    esi, esi
.text:004023A7                 jz      short loc_4023B3
.text:004023A9                 mov     ebp, [esp+5Ch+var_24]
.text:004023AD                 mov     ecx, [esp+5Ch+arg_10]
.text:004023B1                 mov     [ecx], ebp
.text:004023B3
.text:004023B3 loc_4023B3:                             ; CODE XREF: sub_4020F0+2B7↑j
.text:004023B3                 mov     eax, [esp+5Ch+var_18]
.text:004023B7                 mov     ecx, [eax+8]
.text:004023BA                 test    ecx, ecx
.text:004023BC                 jnz     short loc_4023CA
.text:004023BE                 mov     ecx, [esp+5Ch+var_18]
.text:004023C2
.text:004023C2 loc_4023C2:                             ; CODE XREF: sub_4020F0+723↓j
.text:004023C2                 mov     eax, [ecx+0Ch]
.text:004023C5                 jmp     loc_402247
.text:004023CA ; ---------------------------------------------------------------------------
.text:004023CA
.text:004023CA loc_4023CA:                             ; CODE XREF: sub_4020F0+2CC↑j
.text:004023CA                                         ; sub_4020F0+719↓j
.text:004023CA                 mov     esi, [eax+0Ch]
.text:004023CD                 xor     eax, eax
.text:004023CF                 mov     [ecx], esi
.text:004023D1                 jmp     loc_402247
.text:004023D6 ; ---------------------------------------------------------------------------
.text:004023D6
.text:004023D6 loc_4023D6:                             ; CODE XREF: sub_4020F0+29B↑j
.text:004023D6                 mov     edi, [esp+5Ch+var_14]
.text:004023DA                 test    edi, edi
.text:004023DC                 jz      short loc_402430
.text:004023DE                 mov     esi, [esp+5Ch+arg_4]
.text:004023E2                 mov     edx, [esi+eax*4-4]
.text:004023E6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004023EA                 jz      short loc_402452
.text:004023EC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004023F3                 call    ds:libintl_gettext
.text:004023F9                 mov     edx, [esp+5Ch+var_18]
.text:004023FD                 mov     edi, [edx]
.text:004023FF                 mov     [esp+5Ch+var_4C], edi
.text:00402403                 mov     ebx, [ebp+0]
.text:00402406                 mov     edi, [esp+5Ch+arg_4]
.text:0040240A                 mov     ecx, [edi+ebx*4-4]
.text:0040240E                 movsx   esi, byte ptr [ecx]
.text:00402411                 mov     ecx, ds:_iob
.text:00402417                 add     ecx, 40h ; '@'
.text:0040241A                 mov     [esp+5Ch+var_50], esi
.text:0040241E                 mov     ebx, [edi]
.text:00402420                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402424                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402427                 mov     [esp+5Ch+MaxCount], ebx
.text:0040242B                 call    fprintf
.text:00402430
.text:00402430 loc_402430:                             ; CODE XREF: sub_4020F0+2EC↑j
.text:00402430                                         ; sub_4020F0+398↓j
.text:00402430                 mov     ecx, [ebp+14h]
.text:00402433                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402436                 call    strlen
.text:0040243B                 add     [ebp+14h], eax
.text:0040243E                 mov     eax, [esp+5Ch+var_18]
.text:00402442                 mov     esi, [eax+0Ch]
.text:00402445                 mov     [ebp+8], esi
.text:00402448
.text:00402448 loc_402448:                             ; CODE XREF: sub_4020F0+4E5↓j
.text:00402448                                         ; sub_4020F0+73E↓j ...
.text:00402448                 mov     eax, 3Fh ; '?'
.text:0040244D                 jmp     loc_402247
.text:00402452 ; ---------------------------------------------------------------------------
.text:00402452
.text:00402452 loc_402452:                             ; CODE XREF: sub_4020F0+2FA↑j
.text:00402452                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402459                 call    ds:libintl_gettext
.text:0040245F                 mov     edx, [esp+5Ch+var_18]
.text:00402463                 mov     edi, [esp+5Ch+arg_4]
.text:00402467                 mov     ecx, ds:_iob
.text:0040246D                 mov     esi, [edx]
.text:0040246F                 add     ecx, 40h ; '@'
.text:00402472                 mov     [esp+5Ch+var_50], esi
.text:00402476                 mov     ebx, [edi]
.text:00402478                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040247C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040247F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402483                 call    fprintf
.text:00402488                 jmp     short loc_402430
.text:00402488 ; ---------------------------------------------------------------------------
.text:0040248A                 align 10h
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_4020F0+28C↑j
.text:00402490                 mov     ebx, [esp+5Ch+var_18]
.text:00402494                 cmp     dword ptr [ebx+4], 1
.text:00402498                 jnz     loc_402393
.text:0040249E                 cmp     eax, [esp+5Ch+arg_0]
.text:004024A2                 jge     short loc_4024B9
.text:004024A4                 mov     ebx, [esp+5Ch+arg_4]
.text:004024A8                 lea     edi, [ecx+2]
.text:004024AB                 mov     [ebp+0], edi
.text:004024AE                 mov     esi, [ebx+eax*4]
.text:004024B1                 mov     [ebp+0Ch], esi
.text:004024B4                 jmp     loc_402393
.text:004024B9 ; ---------------------------------------------------------------------------
.text:004024B9
.text:004024B9 loc_4024B9:                             ; CODE XREF: sub_4020F0+3B2↑j
.text:004024B9                 mov     edx, [esp+5Ch+var_14]
.text:004024BD                 test    edx, edx
.text:004024BF                 jnz     short loc_4024F0
.text:004024C1
.text:004024C1 loc_4024C1:                             ; CODE XREF: sub_4020F0+437↓j
.text:004024C1                 mov     edx, [ebp+14h]
.text:004024C4                 mov     [esp+5Ch+Str1], edx ; Str
.text:004024C7                 call    strlen
.text:004024CC                 add     [ebp+14h], eax
.text:004024CF                 mov     eax, [esp+5Ch+var_18]
.text:004024D3                 mov     edi, [eax+0Ch]
.text:004024D6                 mov     [ebp+8], edi
.text:004024D9
.text:004024D9 loc_4024D9:                             ; CODE XREF: sub_4020F0+7C2↓j
.text:004024D9                 mov     ebp, [esp+5Ch+Str]
.text:004024DD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004024E1                 setnz   bl
.text:004024E4                 movzx   esi, bl
.text:004024E7                 lea     eax, [esi+esi*4+3Ah]
.text:004024EB                 jmp     loc_402247
.text:004024F0 ; ---------------------------------------------------------------------------
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_4020F0+3CF↑j
.text:004024F0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004024F7                 call    ds:libintl_gettext
.text:004024FD                 mov     ecx, [ebp+0]
.text:00402500                 mov     esi, [esp+5Ch+arg_4]
.text:00402504                 mov     ebx, [esi+ecx*4-4]
.text:00402508                 mov     ecx, ds:_iob
.text:0040250E                 mov     [esp+5Ch+var_50], ebx
.text:00402512                 mov     edi, [esi]
.text:00402514                 add     ecx, 40h ; '@'
.text:00402517                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040251B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040251E                 mov     [esp+5Ch+MaxCount], edi
.text:00402522                 call    fprintf
.text:00402527                 jmp     short loc_4024C1
.text:00402527 ; ---------------------------------------------------------------------------
.text:00402529                 align 10h
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: sub_4020F0+21E↑j
.text:00402530                                         ; sub_4020F0+27A↑j
.text:00402530                 mov     eax, [esp+5Ch+arg_14]
.text:00402534                 test    eax, eax
.text:00402536                 jz      short loc_402566
.text:00402538                 mov     ebx, [ebp+0]
.text:0040253B                 mov     esi, [esp+5Ch+arg_4]
.text:0040253F                 mov     edi, [esi+ebx*4]
.text:00402542                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402546                 jz      short loc_402569
.text:00402548                 mov     ecx, [ebp+14h]
.text:0040254B                 mov     edx, [esp+5Ch+Str]
.text:0040254F                 movsx   ebx, byte ptr [ecx]
.text:00402552                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402555                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402559                 call    strchr
.text:0040255E                 test    eax, eax
.text:00402560                 jnz     loc_402610
.text:00402566
.text:00402566 loc_402566:                             ; CODE XREF: sub_4020F0+446↑j
.text:00402566                 mov     ebx, [ebp+0]
.text:00402569
.text:00402569 loc_402569:                             ; CODE XREF: sub_4020F0+456↑j
.text:00402569                 mov     eax, [esp+5Ch+var_14]
.text:0040256D                 test    eax, eax
.text:0040256F                 jz      short loc_4025C1
.text:00402571                 mov     esi, [esp+5Ch+arg_4]
.text:00402575                 mov     edi, [esi+ebx*4]
.text:00402578                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040257C                 jz      short loc_4025DA
.text:0040257E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402585                 call    ds:libintl_gettext
.text:0040258B                 mov     edi, [ebp+14h]
.text:0040258E                 mov     [esp+5Ch+var_4C], edi
.text:00402592                 mov     ebx, [ebp+0]
.text:00402595                 mov     edi, [esp+5Ch+arg_4]
.text:00402599                 mov     esi, [edi+ebx*4]
.text:0040259C                 movsx   ecx, byte ptr [esi]
.text:0040259F                 mov     esi, ds:_iob
.text:004025A5                 add     esi, 40h ; '@'
.text:004025A8                 mov     [esp+5Ch+var_50], ecx
.text:004025AC                 mov     ebx, [edi]
.text:004025AE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025B2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004025B5                 mov     [esp+5Ch+MaxCount], ebx
.text:004025B9                 call    fprintf
.text:004025BE
.text:004025BE loc_4025BE:                             ; CODE XREF: sub_4020F0+51D↓j
.text:004025BE                 mov     ebx, [ebp+0]
.text:004025C1
.text:004025C1 loc_4025C1:                             ; CODE XREF: sub_4020F0+47F↑j
.text:004025C1                 mov     dword ptr [ebp+14h], offset dword_401FA0
.text:004025C8                 lea     edx, [ebx+1]
.text:004025CB                 mov     [ebp+0], edx
.text:004025CE
.text:004025CE loc_4025CE:                             ; CODE XREF: sub_4020F0+999↓j
.text:004025CE                 mov     dword ptr [ebp+8], 0
.text:004025D5                 jmp     loc_402448
.text:004025DA ; ---------------------------------------------------------------------------
.text:004025DA
.text:004025DA loc_4025DA:                             ; CODE XREF: sub_4020F0+48C↑j
.text:004025DA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004025E1                 call    ds:libintl_gettext
.text:004025E7                 mov     ecx, [ebp+14h]
.text:004025EA                 mov     edi, [esp+5Ch+arg_4]
.text:004025EE                 mov     edx, ds:_iob
.text:004025F4                 mov     [esp+5Ch+var_50], ecx
.text:004025F8                 mov     ebx, [edi]
.text:004025FA                 add     edx, 40h ; '@'
.text:004025FD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402601                 mov     [esp+5Ch+MaxCount], ebx
.text:00402605                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402608                 call    fprintf
.text:0040260D                 jmp     short loc_4025BE
.text:0040260D ; ---------------------------------------------------------------------------
.text:0040260F                 align 10h
.text:00402610
.text:00402610 loc_402610:                             ; CODE XREF: sub_4020F0+196↑j
.text:00402610                                         ; sub_4020F0+1B5↑j ...
.text:00402610                 mov     esi, [ebp+14h]
.text:00402613                 movzx   ebx, byte ptr [esi]
.text:00402616                 inc     esi
.text:00402617                 mov     [ebp+14h], esi
.text:0040261A                 mov     ecx, [esp+5Ch+Str]
.text:0040261E                 movsx   esi, bl
.text:00402621                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402625                 mov     edi, esi
.text:00402627                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040262A                 call    strchr
.text:0040262F                 mov     ecx, [ebp+14h]
.text:00402632                 cmp     byte ptr [ecx], 0
.text:00402635                 jnz     short loc_40263A
.text:00402637                 inc     dword ptr [ebp+0]
.text:0040263A
.text:0040263A loc_40263A:                             ; CODE XREF: sub_4020F0+545↑j
.text:0040263A                 test    eax, eax
.text:0040263C                 jz      loc_402A20
.text:00402642                 cmp     bl, 3Ah ; ':'
.text:00402645                 jz      loc_402A20
.text:0040264B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040264E                 jz      loc_402706
.text:00402654                 movzx   edx, byte ptr [eax+1]
.text:00402658
.text:00402658 loc_402658:                             ; CODE XREF: sub_4020F0+61D↓j
.text:00402658                 cmp     dl, 3Ah ; ':'
.text:0040265B                 jz      short loc_402664
.text:0040265D
.text:0040265D loc_40265D:                             ; CODE XREF: sub_4020F0+590↓j
.text:0040265D                 mov     eax, esi
.text:0040265F                 jmp     loc_402247
.text:00402664 ; ---------------------------------------------------------------------------
.text:00402664
.text:00402664 loc_402664:                             ; CODE XREF: sub_4020F0+56B↑j
.text:00402664                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402668                 jz      loc_4026F1
.text:0040266E                 cmp     byte ptr [ecx], 0
.text:00402671                 jz      short loc_402682
.text:00402673
.text:00402673 loc_402673:                             ; CODE XREF: sub_4020F0+604↓j
.text:00402673                 inc     dword ptr [ebp+0]
.text:00402676                 mov     [ebp+0Ch], ecx
.text:00402679
.text:00402679 loc_402679:                             ; CODE XREF: sub_4020F0+5AB↓j
.text:00402679                                         ; sub_4020F0+5C6↓j ...
.text:00402679                 mov     dword ptr [ebp+14h], 0
.text:00402680                 jmp     short loc_40265D
.text:00402682 ; ---------------------------------------------------------------------------
.text:00402682
.text:00402682 loc_402682:                             ; CODE XREF: sub_4020F0+581↑j
.text:00402682                 mov     ecx, [ebp+0]
.text:00402685                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402689                 jz      short loc_40269D
.text:0040268B                 mov     eax, [esp+5Ch+arg_4]
.text:0040268F                 lea     edx, [ecx+1]
.text:00402692                 mov     [ebp+0], edx
.text:00402695                 mov     ebx, [eax+ecx*4]
.text:00402698                 mov     [ebp+0Ch], ebx
.text:0040269B                 jmp     short loc_402679
.text:0040269D ; ---------------------------------------------------------------------------
.text:0040269D
.text:0040269D loc_40269D:                             ; CODE XREF: sub_4020F0+599↑j
.text:0040269D                 mov     ecx, [esp+5Ch+var_14]
.text:004026A1                 test    ecx, ecx
.text:004026A3                 jnz     short loc_4026BF
.text:004026A5
.text:004026A5 loc_4026A5:                             ; CODE XREF: sub_4020F0+5FF↓j
.text:004026A5                 mov     [ebp+8], edi
.text:004026A8                 mov     edi, [esp+5Ch+Str]
.text:004026AC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004026AF                 jz      short loc_4026B8
.text:004026B1                 mov     esi, 3Fh ; '?'
.text:004026B6                 jmp     short loc_402679
.text:004026B8 ; ---------------------------------------------------------------------------
.text:004026B8
.text:004026B8 loc_4026B8:                             ; CODE XREF: sub_4020F0+5BF↑j
.text:004026B8                 mov     esi, 3Ah ; ':'
.text:004026BD                 jmp     short loc_402679
.text:004026BF ; ---------------------------------------------------------------------------
.text:004026BF
.text:004026BF loc_4026BF:                             ; CODE XREF: sub_4020F0+5B3↑j
.text:004026BF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004026C6                 call    ds:libintl_gettext
.text:004026CC                 mov     [esp+5Ch+var_50], edi
.text:004026D0                 mov     ebx, [esp+5Ch+arg_4]
.text:004026D4                 mov     edx, ds:_iob
.text:004026DA                 mov     esi, [ebx]
.text:004026DC                 add     edx, 40h ; '@'
.text:004026DF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004026E3                 mov     [esp+5Ch+MaxCount], esi
.text:004026E7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004026EA                 call    fprintf
.text:004026EF                 jmp     short loc_4026A5
.text:004026F1 ; ---------------------------------------------------------------------------
.text:004026F1
.text:004026F1 loc_4026F1:                             ; CODE XREF: sub_4020F0+578↑j
.text:004026F1                 cmp     byte ptr [ecx], 0
.text:004026F4                 jnz     loc_402673
.text:004026FA                 mov     dword ptr [ebp+0Ch], 0
.text:00402701                 jmp     loc_402679
.text:00402706 ; ---------------------------------------------------------------------------
.text:00402706
.text:00402706 loc_402706:                             ; CODE XREF: sub_4020F0+55E↑j
.text:00402706                 movzx   edx, byte ptr [eax+1]
.text:0040270A                 cmp     dl, 3Bh ; ';'
.text:0040270D                 jnz     loc_402658
.text:00402713                 mov     [esp+5Ch+var_2C], 0
.text:0040271B                 mov     [esp+5Ch+var_30], 0
.text:00402723                 mov     [esp+5Ch+var_34], 0
.text:0040272B                 mov     [esp+5Ch+var_38], 0
.text:00402733                 cmp     byte ptr [ecx], 0
.text:00402736                 jz      loc_4029AB
.text:0040273C                 inc     dword ptr [ebp+0]
.text:0040273F                 mov     [ebp+0Ch], ecx
.text:00402742
.text:00402742 loc_402742:                             ; CODE XREF: sub_4020F0+8D4↓j
.text:00402742                 mov     edi, [ebp+0Ch]
.text:00402745                 mov     [ebp+14h], edi
.text:00402748                 movzx   eax, byte ptr [edi]
.text:0040274B                 test    al, al
.text:0040274D                 jz      short loc_40275F
.text:0040274F                 cmp     al, 3Dh ; '='
.text:00402751                 jz      short loc_40275F
.text:00402753
.text:00402753 loc_402753:                             ; CODE XREF: sub_4020F0+66D↓j
.text:00402753                 inc     edi
.text:00402754                 movzx   eax, byte ptr [edi]
.text:00402757                 test    al, al
.text:00402759                 jz      short loc_40275F
.text:0040275B                 cmp     al, 3Dh ; '='
.text:0040275D                 jnz     short loc_402753
.text:0040275F
.text:0040275F loc_40275F:                             ; CODE XREF: sub_4020F0+65D↑j
.text:0040275F                                         ; sub_4020F0+661↑j ...
.text:0040275F                 mov     [esp+5Ch+var_3C], 0
.text:00402767                 mov     esi, [esp+5Ch+arg_C]
.text:0040276B                 mov     eax, [esi]
.text:0040276D                 test    eax, eax
.text:0040276F                 jz      loc_4028F0
.text:00402775                 mov     ecx, eax
.text:00402777
.text:00402777 loc_402777:                             ; CODE XREF: sub_4020F0+6B3↓j
.text:00402777                 mov     ebx, [ebp+14h]
.text:0040277A                 mov     eax, edi
.text:0040277C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040277F                 sub     eax, ebx
.text:00402781                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402785                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402789                 call    strncmp
.text:0040278E                 test    eax, eax
.text:00402790                 jz      loc_402957
.text:00402796
.text:00402796 loc_402796:                             ; CODE XREF: sub_4020F0+88C↓j
.text:00402796                                         ; sub_4020F0+89D↓j
.text:00402796                 inc     [esp+5Ch+var_3C]
.text:0040279A                 add     esi, 10h
.text:0040279D                 mov     edx, [esi]
.text:0040279F                 test    edx, edx
.text:004027A1                 mov     ecx, edx
.text:004027A3                 jnz     short loc_402777
.text:004027A5
.text:004027A5 loc_4027A5:                             ; CODE XREF: sub_4020F0+8B6↓j
.text:004027A5                 mov     esi, [esp+5Ch+var_34]
.text:004027A9                 test    esi, esi
.text:004027AB                 jz      short loc_4027B9
.text:004027AD                 mov     ebx, [esp+5Ch+var_30]
.text:004027B1                 test    ebx, ebx
.text:004027B3                 jz      loc_402901
.text:004027B9
.text:004027B9 loc_4027B9:                             ; CODE XREF: sub_4020F0+6BB↑j
.text:004027B9                 mov     esi, [esp+5Ch+var_2C]
.text:004027BD                 test    esi, esi
.text:004027BF                 jz      loc_4028F0
.text:004027C5                 cmp     byte ptr [edi], 0
.text:004027C8                 jz      loc_402870
.text:004027CE                 mov     ecx, [esp+5Ch+var_2C]
.text:004027D2                 mov     ebx, [ecx+4]
.text:004027D5                 test    ebx, ebx
.text:004027D7                 jz      short loc_402818
.text:004027D9                 lea     edx, [edi+1]
.text:004027DC                 mov     [ebp+0Ch], edx
.text:004027DF
.text:004027DF loc_4027DF:                             ; CODE XREF: sub_4020F0+788↓j
.text:004027DF                                         ; sub_4020F0+7A7↓j
.text:004027DF                 mov     edi, [ebp+14h]
.text:004027E2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004027E5                 call    strlen
.text:004027EA                 add     [ebp+14h], eax
.text:004027ED                 mov     eax, [esp+5Ch+arg_10]
.text:004027F1                 test    eax, eax
.text:004027F3                 jz      short loc_402800
.text:004027F5                 mov     edx, [esp+5Ch+var_38]
.text:004027F9                 mov     ebp, [esp+5Ch+arg_10]
.text:004027FD                 mov     [ebp+0], edx
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_4020F0+703↑j
.text:00402800                 mov     eax, [esp+5Ch+var_2C]
.text:00402804                 mov     ecx, [eax+8]
.text:00402807                 test    ecx, ecx
.text:00402809                 jnz     loc_4023CA
.text:0040280F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402813                 jmp     loc_4023C2
.text:00402818 ; ---------------------------------------------------------------------------
.text:00402818
.text:00402818 loc_402818:                             ; CODE XREF: sub_4020F0+6E7↑j
.text:00402818                 mov     eax, [esp+5Ch+var_14]
.text:0040281C                 test    eax, eax
.text:0040281E                 jnz     short loc_402833
.text:00402820
.text:00402820 loc_402820:                             ; CODE XREF: sub_4020F0+779↓j
.text:00402820                 mov     ecx, [ebp+14h]
.text:00402823                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402826                 call    strlen
.text:0040282B                 add     [ebp+14h], eax
.text:0040282E                 jmp     loc_402448
.text:00402833 ; ---------------------------------------------------------------------------
.text:00402833
.text:00402833 loc_402833:                             ; CODE XREF: sub_4020F0+72E↑j
.text:00402833                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040283A                 call    ds:libintl_gettext
.text:00402840                 mov     edx, [esp+5Ch+var_2C]
.text:00402844                 mov     ebx, [esp+5Ch+arg_4]
.text:00402848                 mov     edi, [edx]
.text:0040284A                 mov     [esp+5Ch+var_50], edi
.text:0040284E                 mov     edi, ds:_iob
.text:00402854                 mov     esi, [ebx]
.text:00402856                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040285A                 add     edi, 40h ; '@'
.text:0040285D                 mov     [esp+5Ch+MaxCount], esi
.text:00402861                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402864                 call    fprintf
.text:00402869                 jmp     short loc_402820
.text:00402869 ; ---------------------------------------------------------------------------
.text:0040286B                 align 10h
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_4020F0+6D8↑j
.text:00402870                 mov     esi, [esp+5Ch+var_2C]
.text:00402874                 cmp     dword ptr [esi+4], 1
.text:00402878                 jnz     loc_4027DF
.text:0040287E                 mov     ecx, [ebp+0]
.text:00402881                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402885                 jge     short loc_40289C
.text:00402887                 mov     eax, [esp+5Ch+arg_4]
.text:0040288B                 lea     ebx, [ecx+1]
.text:0040288E                 mov     [ebp+0], ebx
.text:00402891                 mov     edi, [eax+ecx*4]
.text:00402894                 mov     [ebp+0Ch], edi
.text:00402897                 jmp     loc_4027DF
.text:0040289C ; ---------------------------------------------------------------------------
.text:0040289C
.text:0040289C loc_40289C:                             ; CODE XREF: sub_4020F0+795↑j
.text:0040289C                 mov     edx, [esp+5Ch+var_14]
.text:004028A0                 test    edx, edx
.text:004028A2                 jnz     short loc_4028B7
.text:004028A4
.text:004028A4 loc_4028A4:                             ; CODE XREF: sub_4020F0+7FE↓j
.text:004028A4                 mov     edx, [ebp+14h]
.text:004028A7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004028AA                 call    strlen
.text:004028AF                 add     [ebp+14h], eax
.text:004028B2                 jmp     loc_4024D9
.text:004028B7 ; ---------------------------------------------------------------------------
.text:004028B7
.text:004028B7 loc_4028B7:                             ; CODE XREF: sub_4020F0+7B2↑j
.text:004028B7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004028BE                 call    ds:libintl_gettext
.text:004028C4                 mov     ecx, [ebp+0]
.text:004028C7                 mov     ebx, [esp+5Ch+arg_4]
.text:004028CB                 mov     edi, [ebx+ecx*4-4]
.text:004028CF                 mov     ecx, ds:_iob
.text:004028D5                 mov     [esp+5Ch+var_50], edi
.text:004028D9                 mov     esi, [ebx]
.text:004028DB                 add     ecx, 40h ; '@'
.text:004028DE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004028E2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004028E5                 mov     [esp+5Ch+MaxCount], esi
.text:004028E9                 call    fprintf
.text:004028EE                 jmp     short loc_4028A4
.text:004028F0 ; ---------------------------------------------------------------------------
.text:004028F0
.text:004028F0 loc_4028F0:                             ; CODE XREF: sub_4020F0+67F↑j
.text:004028F0                                         ; sub_4020F0+6CF↑j
.text:004028F0                 mov     dword ptr [ebp+14h], 0
.text:004028F7                 mov     eax, 57h ; 'W'
.text:004028FC                 jmp     loc_402247
.text:00402901 ; ---------------------------------------------------------------------------
.text:00402901
.text:00402901 loc_402901:                             ; CODE XREF: sub_4020F0+6C3↑j
.text:00402901                 mov     edi, [esp+5Ch+var_14]
.text:00402905                 test    edi, edi
.text:00402907                 jnz     short loc_40291F
.text:00402909
.text:00402909 loc_402909:                             ; CODE XREF: sub_4020F0+865↓j
.text:00402909                 mov     edx, [ebp+14h]
.text:0040290C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040290F                 call    strlen
.text:00402914                 add     [ebp+14h], eax
.text:00402917                 inc     dword ptr [ebp+0]
.text:0040291A                 jmp     loc_402448
.text:0040291F ; ---------------------------------------------------------------------------
.text:0040291F
.text:0040291F loc_40291F:                             ; CODE XREF: sub_4020F0+817↑j
.text:0040291F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402926                 call    ds:libintl_gettext
.text:0040292C                 mov     ecx, [ebp+0]
.text:0040292F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402933                 mov     edi, [ebx+ecx*4]
.text:00402936                 mov     ecx, ds:_iob
.text:0040293C                 mov     [esp+5Ch+var_50], edi
.text:00402940                 mov     esi, [ebx]
.text:00402942                 add     ecx, 40h ; '@'
.text:00402945                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402949                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040294C                 mov     [esp+5Ch+MaxCount], esi
.text:00402950                 call    fprintf
.text:00402955                 jmp     short loc_402909
.text:00402957 ; ---------------------------------------------------------------------------
.text:00402957
.text:00402957 loc_402957:                             ; CODE XREF: sub_4020F0+6A0↑j
.text:00402957                 mov     edx, [ebp+14h]
.text:0040295A                 mov     ebx, edi
.text:0040295C                 mov     ecx, [esi]
.text:0040295E                 sub     ebx, edx
.text:00402960                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402963                 call    strlen
.text:00402968                 cmp     ebx, eax
.text:0040296A                 jz      short loc_402992
.text:0040296C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402970                 test    ebx, ebx
.text:00402972                 jz      short loc_402981
.text:00402974                 mov     [esp+5Ch+var_34], 1
.text:0040297C                 jmp     loc_402796
.text:00402981 ; ---------------------------------------------------------------------------
.text:00402981
.text:00402981 loc_402981:                             ; CODE XREF: sub_4020F0+882↑j
.text:00402981                 mov     [esp+5Ch+var_2C], esi
.text:00402985                 mov     ecx, [esp+5Ch+var_3C]
.text:00402989                 mov     [esp+5Ch+var_38], ecx
.text:0040298D                 jmp     loc_402796
.text:00402992 ; ---------------------------------------------------------------------------
.text:00402992
.text:00402992 loc_402992:                             ; CODE XREF: sub_4020F0+87A↑j
.text:00402992                 mov     [esp+5Ch+var_2C], esi
.text:00402996                 mov     eax, [esp+5Ch+var_3C]
.text:0040299A                 mov     [esp+5Ch+var_30], 1
.text:004029A2                 mov     [esp+5Ch+var_38], eax
.text:004029A6                 jmp     loc_4027A5
.text:004029AB ; ---------------------------------------------------------------------------
.text:004029AB
.text:004029AB loc_4029AB:                             ; CODE XREF: sub_4020F0+646↑j
.text:004029AB                 mov     edx, [ebp+0]
.text:004029AE                 cmp     edx, [esp+5Ch+arg_0]
.text:004029B2                 jz      short loc_4029C9
.text:004029B4                 mov     ebx, [esp+5Ch+arg_4]
.text:004029B8                 lea     esi, [edx+1]
.text:004029BB                 mov     [ebp+0], esi
.text:004029BE                 mov     edi, [ebx+edx*4]
.text:004029C1                 mov     [ebp+0Ch], edi
.text:004029C4                 jmp     loc_402742
.text:004029C9 ; ---------------------------------------------------------------------------
.text:004029C9
.text:004029C9 loc_4029C9:                             ; CODE XREF: sub_4020F0+8C2↑j
.text:004029C9                 mov     edi, [esp+5Ch+var_14]
.text:004029CD                 test    edi, edi
.text:004029CF                 jnz     short loc_4029EC
.text:004029D1
.text:004029D1 loc_4029D1:                             ; CODE XREF: sub_4020F0+92C↓j
.text:004029D1                 mov     [ebp+8], esi
.text:004029D4                 mov     ebp, [esp+5Ch+Str]
.text:004029D8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004029DC                 jz      short loc_4029E8
.text:004029DE                 mov     bl, 3Fh ; '?'
.text:004029E0
.text:004029E0 loc_4029E0:                             ; CODE XREF: sub_4020F0+8FA↓j
.text:004029E0                 movsx   eax, bl
.text:004029E3                 jmp     loc_402247
.text:004029E8 ; ---------------------------------------------------------------------------
.text:004029E8
.text:004029E8 loc_4029E8:                             ; CODE XREF: sub_4020F0+8EC↑j
.text:004029E8                 mov     bl, 3Ah ; ':'
.text:004029EA                 jmp     short loc_4029E0
.text:004029EC ; ---------------------------------------------------------------------------
.text:004029EC
.text:004029EC loc_4029EC:                             ; CODE XREF: sub_4020F0+8DF↑j
.text:004029EC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004029F3                 call    ds:libintl_gettext
.text:004029F9                 mov     [esp+5Ch+var_50], esi
.text:004029FD                 mov     edx, [esp+5Ch+arg_4]
.text:00402A01                 mov     ecx, ds:_iob
.text:00402A07                 mov     ebx, [edx]
.text:00402A09                 add     ecx, 40h ; '@'
.text:00402A0C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A10                 mov     [esp+5Ch+MaxCount], ebx
.text:00402A14                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402A17                 call    fprintf
.text:00402A1C                 jmp     short loc_4029D1
.text:00402A1C ; ---------------------------------------------------------------------------
.text:00402A1E                 align 10h
.text:00402A20
.text:00402A20 loc_402A20:                             ; CODE XREF: sub_4020F0+54C↑j
.text:00402A20                                         ; sub_4020F0+555↑j
.text:00402A20                 mov     eax, [esp+5Ch+var_14]
.text:00402A24                 test    eax, eax
.text:00402A26                 jz      short loc_402A5F
.text:00402A28                 mov     ebx, [ebp+1Ch]
.text:00402A2B                 test    ebx, ebx
.text:00402A2D                 jz      short loc_402A67
.text:00402A2F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402A36
.text:00402A36 loc_402A36:                             ; CODE XREF: sub_4020F0+97E↓j
.text:00402A36                 call    ds:libintl_gettext
.text:00402A3C                 mov     [esp+5Ch+var_50], esi
.text:00402A40                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A44                 mov     edx, ds:_iob
.text:00402A4A                 mov     esi, [ebx]
.text:00402A4C                 add     edx, 40h ; '@'
.text:00402A4F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A53                 mov     [esp+5Ch+MaxCount], esi
.text:00402A57                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402A5A                 call    fprintf
.text:00402A5F
.text:00402A5F loc_402A5F:                             ; CODE XREF: sub_4020F0+936↑j
.text:00402A5F                 mov     [ebp+8], edi
.text:00402A62                 jmp     loc_402448
.text:00402A67 ; ---------------------------------------------------------------------------
.text:00402A67
.text:00402A67 loc_402A67:                             ; CODE XREF: sub_4020F0+93D↑j
.text:00402A67                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402A6E                 jmp     short loc_402A36
.text:00402A70 ; ---------------------------------------------------------------------------
.text:00402A70
.text:00402A70 loc_402A70:                             ; CODE XREF: sub_4020F0+26E↑j
.text:00402A70                 mov     edi, [esp+5Ch+var_14]
.text:00402A74                 test    edi, edi
.text:00402A76                 jnz     short loc_402A8E
.text:00402A78
.text:00402A78 loc_402A78:                             ; CODE XREF: sub_4020F0+9D4↓j
.text:00402A78                 mov     edx, [ebp+14h]
.text:00402A7B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402A7E                 call    strlen
.text:00402A83                 add     [ebp+14h], eax
.text:00402A86                 inc     dword ptr [ebp+0]
.text:00402A89                 jmp     loc_4025CE
.text:00402A8E ; ---------------------------------------------------------------------------
.text:00402A8E
.text:00402A8E loc_402A8E:                             ; CODE XREF: sub_4020F0+986↑j
.text:00402A8E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402A95                 call    ds:libintl_gettext
.text:00402A9B                 mov     ebx, [ebp+0]
.text:00402A9E                 mov     edi, [esp+5Ch+arg_4]
.text:00402AA2                 mov     ecx, [edi+ebx*4]
.text:00402AA5                 mov     ebx, ds:_iob
.text:00402AAB                 mov     [esp+5Ch+var_50], ecx
.text:00402AAF                 mov     esi, [edi]
.text:00402AB1                 add     ebx, 40h ; '@'
.text:00402AB4                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402AB8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402ABB                 mov     [esp+5Ch+MaxCount], esi
.text:00402ABF                 call    fprintf
.text:00402AC4                 jmp     short loc_402A78
.text:00402AC6 ; ---------------------------------------------------------------------------
.text:00402AC6
.text:00402AC6 loc_402AC6:                             ; CODE XREF: sub_4020F0+246↑j
.text:00402AC6                 mov     ecx, [ebp+14h]
.text:00402AC9                 mov     ebx, edi
.text:00402ACB                 mov     edx, [esi]
.text:00402ACD                 sub     ebx, ecx
.text:00402ACF                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402AD2                 call    strlen
.text:00402AD7                 cmp     ebx, eax
.text:00402AD9                 jz      short loc_402B31
.text:00402ADB                 mov     ebx, [esp+5Ch+var_18]
.text:00402ADF                 test    ebx, ebx
.text:00402AE1                 jz      short loc_402B20
.text:00402AE3                 mov     edx, [esp+5Ch+arg_14]
.text:00402AE7                 test    edx, edx
.text:00402AE9                 jnz     short loc_402AF7
.text:00402AEB                 mov     ecx, [esp+5Ch+var_18]
.text:00402AEF                 mov     ebx, [esi+4]
.text:00402AF2                 cmp     [ecx+4], ebx
.text:00402AF5                 jz      short loc_402B04
.text:00402AF7
.text:00402AF7 loc_402AF7:                             ; CODE XREF: sub_4020F0+9F9↑j
.text:00402AF7                                         ; sub_4020F0+A1A↓j ...
.text:00402AF7                 mov     [esp+5Ch+var_20], 1
.text:00402AFF                 jmp     loc_40233C
.text:00402B04 ; ---------------------------------------------------------------------------
.text:00402B04
.text:00402B04 loc_402B04:                             ; CODE XREF: sub_4020F0+A05↑j
.text:00402B04                 mov     edx, [esi+8]
.text:00402B07                 cmp     [ecx+8], edx
.text:00402B0A                 jnz     short loc_402AF7
.text:00402B0C                 mov     ebx, [esi+0Ch]
.text:00402B0F                 cmp     [ecx+0Ch], ebx
.text:00402B12                 jnz     short loc_402AF7
.text:00402B14                 jmp     loc_40233C
.text:00402B14 ; ---------------------------------------------------------------------------
.text:00402B19                 align 10h
.text:00402B20
.text:00402B20 loc_402B20:                             ; CODE XREF: sub_4020F0+9F1↑j
.text:00402B20                 mov     [esp+5Ch+var_18], esi
.text:00402B24                 mov     eax, [esp+5Ch+var_28]
.text:00402B28                 mov     [esp+5Ch+var_24], eax
.text:00402B2C                 jmp     loc_40233C
.text:00402B31 ; ---------------------------------------------------------------------------
.text:00402B31
.text:00402B31 loc_402B31:                             ; CODE XREF: sub_4020F0+9E9↑j
.text:00402B31                 mov     [esp+5Ch+var_18], esi
.text:00402B35                 mov     ecx, [esp+5Ch+var_28]
.text:00402B39                 mov     [esp+5Ch+var_1C], 1
.text:00402B41                 mov     [esp+5Ch+var_24], ecx
.text:00402B45                 jmp     loc_402350
.text:00402B4A ; ---------------------------------------------------------------------------
.text:00402B4A
.text:00402B4A loc_402B4A:                             ; CODE XREF: sub_4020F0+1BF↑j
.text:00402B4A                 mov     eax, [esp+5Ch+Str]
.text:00402B4E                 movsx   esi, dl
.text:00402B51                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402B55                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402B58                 call    strchr
.text:00402B5D                 test    eax, eax
.text:00402B5F                 jnz     loc_402610
.text:00402B65                 jmp     loc_4022B5
.text:00402B6A ; ---------------------------------------------------------------------------
.text:00402B6A
.text:00402B6A loc_402B6A:                             ; CODE XREF: sub_4020F0+17C↑j
.text:00402B6A                 mov     ecx, 1
.text:00402B6F                 jmp     loc_402272
.text:00402B74 ; ---------------------------------------------------------------------------
.text:00402B74
.text:00402B74 loc_402B74:                             ; CODE XREF: sub_4020F0+D4↑j
.text:00402B74                                         ; sub_4020F0+130↑j
.text:00402B74                 mov     eax, [ebp+20h]
.text:00402B77                 cmp     eax, [ebp+24h]
.text:00402B7A                 jz      loc_402250
.text:00402B80                 mov     [ebp+0], eax
.text:00402B83                 jmp     loc_402250
.text:00402B88 ; ---------------------------------------------------------------------------
.text:00402B88
.text:00402B88 loc_402B88:                             ; CODE XREF: sub_4020F0+FE↑j
.text:00402B88                 mov     [ebp+20h], eax
.text:00402B8B                 jmp     loc_402210
.text:00402B90 ; ---------------------------------------------------------------------------
.text:00402B90
.text:00402B90 loc_402B90:                             ; CODE XREF: sub_4020F0+CA↑j
.text:00402B90                 mov     edx, [ebp+20h]
.text:00402B93                 mov     eax, [ebp+24h]
.text:00402B96                 cmp     edx, eax
.text:00402B98                 jz      short loc_402C10
.text:00402B9A                 cmp     eax, ebx
.text:00402B9C                 jz      short loc_402BB1
.text:00402B9E                 mov     [esp+5Ch+Str2], ebp
.text:00402BA2                 mov     ebx, [esp+5Ch+arg_4]
.text:00402BA6                 mov     [esp+5Ch+Str1], ebx
.text:00402BA9                 call    sub_402DA0
.text:00402BAE                 mov     ebx, [ebp+0]
.text:00402BB1
.text:00402BB1 loc_402BB1:                             ; CODE XREF: sub_4020F0+AAC↑j
.text:00402BB1                                         ; sub_4020F0+B22↓j ...
.text:00402BB1                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402BB5                 jge     short loc_402C00
.text:00402BB7                 mov     esi, [esp+5Ch+arg_4]
.text:00402BBB                 mov     eax, [esi+ebx*4]
.text:00402BBE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402BC1                 jz      short loc_402C08
.text:00402BC3                 lea     esi, [esi+0]
.text:00402BC9                 lea     edi, [edi+0]
.text:00402BD0
.text:00402BD0 loc_402BD0:                             ; CODE XREF: sub_4020F0+AFC↓j
.text:00402BD0                                         ; sub_4020F0+B1C↓j
.text:00402BD0                 lea     eax, [ebx+1]
.text:00402BD3                 mov     ebx, eax
.text:00402BD5                 mov     [ebp+0], eax
.text:00402BD8                 cmp     eax, [esp+5Ch+arg_0]
.text:00402BDC                 jge     short loc_402C00
.text:00402BDE                 mov     edi, [esp+5Ch+arg_4]
.text:00402BE2                 mov     edx, [edi+eax*4]
.text:00402BE5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402BE8                 jz      short loc_402BF0
.text:00402BEA
.text:00402BEA loc_402BEA:                             ; CODE XREF: sub_4020F0+B04↓j
.text:00402BEA                 mov     ebx, eax
.text:00402BEC                 jmp     short loc_402BD0
.text:00402BEC ; ---------------------------------------------------------------------------
.text:00402BEE                 align 10h
.text:00402BF0
.text:00402BF0 loc_402BF0:                             ; CODE XREF: sub_4020F0+AF8↑j
.text:00402BF0                 cmp     byte ptr [edx+1], 0
.text:00402BF4                 jz      short loc_402BEA
.text:00402BF6                 lea     esi, [esi+0]
.text:00402BF9                 lea     edi, [edi+0]
.text:00402C00
.text:00402C00 loc_402C00:                             ; CODE XREF: sub_4020F0+AC5↑j
.text:00402C00                                         ; sub_4020F0+AEC↑j ...
.text:00402C00                 mov     [ebp+24h], ebx
.text:00402C03                 jmp     loc_4021C0
.text:00402C08 ; ---------------------------------------------------------------------------
.text:00402C08
.text:00402C08 loc_402C08:                             ; CODE XREF: sub_4020F0+AD1↑j
.text:00402C08                 cmp     byte ptr [eax+1], 0
.text:00402C0C                 jz      short loc_402BD0
.text:00402C0E                 jmp     short loc_402C00
.text:00402C10 ; ---------------------------------------------------------------------------
.text:00402C10
.text:00402C10 loc_402C10:                             ; CODE XREF: sub_4020F0+AA8↑j
.text:00402C10                 cmp     edx, ebx
.text:00402C12                 jz      short loc_402BB1
.text:00402C14                 mov     [ebp+20h], ebx
.text:00402C17                 jmp     short loc_402BB1
.text:00402C19 ; ---------------------------------------------------------------------------
.text:00402C19
.text:00402C19 loc_402C19:                             ; CODE XREF: sub_4020F0+88↑j
.text:00402C19                 mov     dword ptr [ebp+18h], 0
.text:00402C20                 mov     esi, [esp+5Ch+Str]
.text:00402C24
.text:00402C24 loc_402C24:                             ; CODE XREF: sub_4020F0+B49↓j
.text:00402C24                 inc     esi
.text:00402C25                 jmp     loc_402188
.text:00402C25 ; ---------------------------------------------------------------------------
.text:00402C2A                 align 10h
.text:00402C30
.text:00402C30 loc_402C30:                             ; CODE XREF: sub_4020F0+80↑j
.text:00402C30                 mov     dword ptr [ebp+18h], 2
.text:00402C37                 mov     esi, ecx
.text:00402C39                 jmp     short loc_402C24
.text:00402C39 ; ---------------------------------------------------------------------------
.text:00402C3B                 align 10h
.text:00402C40
.text:00402C40 loc_402C40:                             ; CODE XREF: sub_4020F0+69↑j
.text:00402C40                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402C47                 call    getenv
.text:00402C4C                 test    eax, eax
.text:00402C4E                 jz      loc_402164
.text:00402C54                 jmp     loc_40215F
.text:00402C54 ; ---------------------------------------------------------------------------
.text:00402C59                 align 10h
.text:00402C60
.text:00402C60 loc_402C60:                             ; CODE XREF: sub_4020F0+3F↑j
.text:00402C60                 mov     dword ptr [ebp+0], 1
.text:00402C67                 mov     ebx, 1
.text:00402C6C                 jmp     loc_402140
.text:00402C6C sub_4020F0      endp
.text:00402C6C
.text:00402C71 ; ---------------------------------------------------------------------------
.text:00402C71                 jmp     short sub_402C80
.text:00402C71 ; ---------------------------------------------------------------------------
.text:00402C73                 align 10h
.text:00402C80
.text:00402C80 ; =============== S U B R O U T I N E =======================================
.text:00402C80
.text:00402C80
.text:00402C80 ; int __cdecl sub_402C80(int, int, char *, int, int, int, int)
.text:00402C80 sub_402C80      proc near               ; CODE XREF: .text:00402C71↑j
.text:00402C80                                         ; sub_402F20+3A↓p ...
.text:00402C80
.text:00402C80 var_2C          = dword ptr -2Ch
.text:00402C80 var_28          = dword ptr -28h
.text:00402C80 Str             = dword ptr -24h
.text:00402C80 var_20          = dword ptr -20h
.text:00402C80 var_1C          = dword ptr -1Ch
.text:00402C80 var_18          = dword ptr -18h
.text:00402C80 var_14          = dword ptr -14h
.text:00402C80 var_10          = dword ptr -10h
.text:00402C80 arg_0           = dword ptr  4
.text:00402C80 arg_4           = dword ptr  8
.text:00402C80 arg_8           = dword ptr  0Ch
.text:00402C80 arg_C           = dword ptr  10h
.text:00402C80 arg_10          = dword ptr  14h
.text:00402C80 arg_14          = dword ptr  18h
.text:00402C80 arg_18          = dword ptr  1Ch
.text:00402C80
.text:00402C80                 sub     esp, 2Ch
.text:00402C83                 mov     edx, dword_407010
.text:00402C89                 mov     [esp+2Ch+var_10], offset dword_408000 ; int
.text:00402C91                 mov     ecx, dword_407014
.text:00402C97                 mov     ds:dword_408000, edx
.text:00402C9D                 mov     edx, [esp+2Ch+arg_18]
.text:00402CA1                 mov     ds:dword_408004, ecx
.text:00402CA7                 mov     ecx, [esp+2Ch+arg_14]
.text:00402CAB                 mov     [esp+2Ch+var_14], edx ; int
.text:00402CAF                 mov     edx, [esp+2Ch+arg_10]
.text:00402CB3                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402CB7                 mov     ecx, [esp+2Ch+arg_C]
.text:00402CBB                 mov     [esp+2Ch+var_1C], edx ; int
.text:00402CBF                 mov     edx, [esp+2Ch+arg_8]
.text:00402CC3                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402CC7                 mov     ecx, [esp+2Ch+arg_4]
.text:00402CCB                 mov     [esp+2Ch+Str], edx ; Str
.text:00402CCF                 mov     edx, [esp+2Ch+arg_0]
.text:00402CD3                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402CD7                 mov     [esp+2Ch+var_2C], edx ; int
.text:00402CDA                 call    sub_4020F0
.text:00402CDF                 mov     ecx, ds:dword_408000
.text:00402CE5                 mov     dword_407010, ecx
.text:00402CEB                 mov     ecx, ds:dword_40800C
.text:00402CF1                 mov     ds:dword_408350, ecx
.text:00402CF7                 mov     ecx, ds:dword_408008
.text:00402CFD                 mov     dword_407018, ecx
.text:00402D03                 add     esp, 2Ch
.text:00402D06                 retn
.text:00402D06 sub_402C80      endp
.text:00402D06
.text:00402D06 ; ---------------------------------------------------------------------------
.text:00402D07                 align 10h
.text:00402D10                 sub     esp, 2Ch
.text:00402D13                 mov     edx, dword_407010
.text:00402D19                 mov     dword ptr [esp+1Ch], offset dword_408000
.text:00402D21                 mov     ecx, dword_407014
.text:00402D27                 mov     dword ptr [esp+18h], 1
.text:00402D2F                 mov     ds:dword_408000, edx
.text:00402D35                 mov     edx, [esp+38h]
.text:00402D39                 mov     ds:dword_408004, ecx
.text:00402D3F                 mov     ecx, [esp+34h]
.text:00402D43                 mov     [esp+8], edx
.text:00402D47                 mov     edx, [esp+30h]
.text:00402D4B                 mov     [esp+4], ecx
.text:00402D4F                 mov     dword ptr [esp+14h], 0
.text:00402D57                 mov     dword ptr [esp+10h], 0
.text:00402D5F                 mov     dword ptr [esp+0Ch], 0
.text:00402D67                 mov     [esp], edx
.text:00402D6A                 call    sub_4020F0
.text:00402D6F                 mov     ecx, ds:dword_408000
.text:00402D75                 mov     dword_407010, ecx
.text:00402D7B                 mov     ecx, ds:dword_40800C
.text:00402D81                 mov     ds:dword_408350, ecx
.text:00402D87                 mov     ecx, ds:dword_408008
.text:00402D8D                 mov     dword_407018, ecx
.text:00402D93                 add     esp, 2Ch
.text:00402D96                 retn
.text:00402D96 ; ---------------------------------------------------------------------------
.text:00402D97                 align 10h
.text:00402DA0
.text:00402DA0 ; =============== S U B R O U T I N E =======================================
.text:00402DA0
.text:00402DA0
.text:00402DA0 sub_402DA0      proc near               ; CODE XREF: sub_4020F0+113↑p
.text:00402DA0                                         ; sub_4020F0+AB9↑p
.text:00402DA0
.text:00402DA0 var_2C          = dword ptr -2Ch
.text:00402DA0 var_28          = dword ptr -28h
.text:00402DA0 var_24          = dword ptr -24h
.text:00402DA0 var_20          = dword ptr -20h
.text:00402DA0 var_1C          = dword ptr -1Ch
.text:00402DA0 var_18          = dword ptr -18h
.text:00402DA0 var_14          = dword ptr -14h
.text:00402DA0 arg_0           = dword ptr  4
.text:00402DA0 arg_4           = dword ptr  8
.text:00402DA0
.text:00402DA0                 push    ebp
.text:00402DA1                 push    edi
.text:00402DA2                 push    esi
.text:00402DA3                 push    ebx
.text:00402DA4                 sub     esp, 1Ch
.text:00402DA7                 mov     ecx, [esp+2Ch+arg_4]
.text:00402DAB                 mov     eax, [esp+2Ch+arg_4]
.text:00402DAF                 mov     ebx, [esp+2Ch+arg_4]
.text:00402DB3                 mov     edx, [ecx+20h]
.text:00402DB6                 mov     edi, [esp+2Ch+arg_0]
.text:00402DBA                 mov     ecx, [ebx]
.text:00402DBC                 mov     [esp+2Ch+var_2C], edx
.text:00402DBF                 mov     [esp+2Ch+var_14], edx
.text:00402DC3                 mov     edx, [eax+24h]
.text:00402DC6                 mov     [esp+2Ch+var_28], ecx
.text:00402DCA                 mov     [esp+2Ch+var_1C], ecx
.text:00402DCE                 cmp     ecx, edx
.text:00402DD0                 mov     [esp+2Ch+var_18], edx
.text:00402DD4                 jle     short loc_402E50
.text:00402DD6                 mov     esi, [esp+2Ch+var_2C]
.text:00402DD9                 cmp     edx, esi
.text:00402DDB                 jle     short loc_402E50
.text:00402DDD                 lea     esi, [esi+0]
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402DA0+A1↓j
.text:00402DE0                 mov     ebx, [esp+2Ch+var_1C]
.text:00402DE4                 mov     edx, [esp+2Ch+var_18]
.text:00402DE8                 mov     ebp, [esp+2Ch+var_18]
.text:00402DEC                 mov     eax, [esp+2Ch+var_14]
.text:00402DF0                 sub     ebx, edx
.text:00402DF2                 mov     [esp+2Ch+var_20], ebx
.text:00402DF6                 sub     ebp, eax
.text:00402DF8                 cmp     ebx, ebp
.text:00402DFA                 jle     short loc_402E75
.text:00402DFC                 xor     esi, esi
.text:00402DFE                 cmp     esi, ebp
.text:00402E00                 jge     short loc_402E2D
.text:00402E02                 mov     ecx, [esp+2Ch+var_1C]
.text:00402E06                 sub     ecx, ebp
.text:00402E08                 mov     [esp+2Ch+var_24], ecx
.text:00402E0C                 lea     esi, [esi+0]
.text:00402E10
.text:00402E10 loc_402E10:                             ; CODE XREF: sub_402DA0+8B↓j
.text:00402E10                 mov     ecx, [esp+2Ch+var_14]
.text:00402E14                 mov     edx, [esp+2Ch+var_24]
.text:00402E18                 add     ecx, esi
.text:00402E1A                 add     edx, esi
.text:00402E1C                 mov     ebx, [edi+ecx*4]
.text:00402E1F                 mov     eax, [edi+edx*4]
.text:00402E22                 inc     esi
.text:00402E23                 cmp     esi, ebp
.text:00402E25                 mov     [edi+ecx*4], eax
.text:00402E28                 mov     [edi+edx*4], ebx
.text:00402E2B                 jl      short loc_402E10
.text:00402E2D
.text:00402E2D loc_402E2D:                             ; CODE XREF: sub_402DA0+60↑j
.text:00402E2D                 sub     [esp+2Ch+var_1C], ebp
.text:00402E31
.text:00402E31 loc_402E31:                             ; CODE XREF: sub_402DA0+107↓j
.text:00402E31                 mov     eax, [esp+2Ch+var_18]
.text:00402E35                 cmp     [esp+2Ch+var_1C], eax
.text:00402E39                 jle     short loc_402E50
.text:00402E3B                 mov     ebp, [esp+2Ch+var_14]
.text:00402E3F                 cmp     eax, ebp
.text:00402E41                 jg      short loc_402DE0
.text:00402E43                 lea     esi, [esi+0]
.text:00402E49                 lea     edi, [edi+0]
.text:00402E50
.text:00402E50 loc_402E50:                             ; CODE XREF: sub_402DA0+34↑j
.text:00402E50                                         ; sub_402DA0+3B↑j ...
.text:00402E50                 mov     esi, [esp+2Ch+var_28]
.text:00402E54                 mov     ecx, [esp+2Ch+var_18]
.text:00402E58                 mov     eax, [esp+2Ch+var_2C]
.text:00402E5B                 mov     edi, [esp+2Ch+arg_4]
.text:00402E5F                 mov     edx, [esp+2Ch+var_28]
.text:00402E63                 sub     esi, ecx
.text:00402E65                 add     esi, eax
.text:00402E67                 mov     [edi+20h], esi
.text:00402E6A                 mov     [edi+24h], edx
.text:00402E6D                 add     esp, 1Ch
.text:00402E70                 pop     ebx
.text:00402E71                 pop     esi
.text:00402E72                 pop     edi
.text:00402E73                 pop     ebp
.text:00402E74                 retn
.text:00402E75 ; ---------------------------------------------------------------------------
.text:00402E75
.text:00402E75 loc_402E75:                             ; CODE XREF: sub_402DA0+5A↑j
.text:00402E75                 xor     esi, esi
.text:00402E77                 cmp     esi, [esp+2Ch+var_20]
.text:00402E7B                 jge     short loc_402E9F
.text:00402E7D                 lea     esi, [esi+0]
.text:00402E80
.text:00402E80 loc_402E80:                             ; CODE XREF: sub_402DA0+FD↓j
.text:00402E80                 mov     ebx, [esp+2Ch+var_14]
.text:00402E84                 mov     ebp, [esp+2Ch+var_18]
.text:00402E88                 add     ebx, esi
.text:00402E8A                 add     ebp, esi
.text:00402E8C                 mov     edx, [edi+ebx*4]
.text:00402E8F                 inc     esi
.text:00402E90                 cmp     esi, [esp+2Ch+var_20]
.text:00402E94                 mov     ecx, [edi+ebp*4]
.text:00402E97                 mov     [edi+ebx*4], ecx
.text:00402E9A                 mov     [edi+ebp*4], edx
.text:00402E9D                 jl      short loc_402E80
.text:00402E9F
.text:00402E9F loc_402E9F:                             ; CODE XREF: sub_402DA0+DB↑j
.text:00402E9F                 mov     esi, [esp+2Ch+var_20]
.text:00402EA3                 add     [esp+2Ch+var_14], esi
.text:00402EA7                 jmp     short loc_402E31
.text:00402EA7 sub_402DA0      endp
.text:00402EA7
.text:00402EA7 ; ---------------------------------------------------------------------------
.text:00402EA9                 align 20h
.text:00402EC0                 sub     esp, 0Ch
.text:00402EC3                 mov     edx, [esp+14h]
.text:00402EC7                 mov     dword ptr [esp+4], 5
.text:00402ECF                 mov     [esp+8], edx
.text:00402ED3                 mov     edx, [esp+10h]
.text:00402ED7                 mov     [esp], edx
.text:00402EDA                 call    sub_4043B0
.text:00402EDF                 add     esp, 0Ch
.text:00402EE2                 retn
.text:00402EE2 ; ---------------------------------------------------------------------------
.text:00402EE3                 align 10h
.text:00402EF0
.text:00402EF0 ; =============== S U B R O U T I N E =======================================
.text:00402EF0
.text:00402EF0
.text:00402EF0 ; int __cdecl sub_402EF0(char *)
.text:00402EF0 sub_402EF0      proc near               ; CODE XREF: sub_401380+15C↑p
.text:00402EF0
.text:00402EF0 var_C           = dword ptr -0Ch
.text:00402EF0 var_8           = dword ptr -8
.text:00402EF0 var_4           = dword ptr -4
.text:00402EF0 arg_0           = dword ptr  4
.text:00402EF0
.text:00402EF0                 sub     esp, 0Ch
.text:00402EF3                 mov     edx, [esp+0Ch+arg_0]
.text:00402EF7                 mov     [esp+0Ch+var_8], 5 ; int
.text:00402EFF                 mov     [esp+0Ch+var_C], 0 ; int
.text:00402F06                 mov     [esp+0Ch+var_4], edx ; char *
.text:00402F0A                 call    sub_4043B0
.text:00402F0F                 add     esp, 0Ch
.text:00402F12                 retn
.text:00402F12 sub_402EF0      endp
.text:00402F12
.text:00402F12 ; ---------------------------------------------------------------------------
.text:00402F13                 align 10h
.text:00402F20
.text:00402F20 ; =============== S U B R O U T I N E =======================================
.text:00402F20
.text:00402F20
.text:00402F20 ; int __cdecl sub_402F20(int, int, char *, int, int)
.text:00402F20 sub_402F20      proc near               ; CODE XREF: sub_401380+D2↑p
.text:00402F20                                         ; sub_4030C0+58↓p
.text:00402F20
.text:00402F20 var_1C          = dword ptr -1Ch
.text:00402F20 var_18          = dword ptr -18h
.text:00402F20 var_14          = dword ptr -14h
.text:00402F20 var_10          = dword ptr -10h
.text:00402F20 var_C           = dword ptr -0Ch
.text:00402F20 var_8           = dword ptr -8
.text:00402F20 var_4           = dword ptr -4
.text:00402F20 arg_0           = dword ptr  4
.text:00402F20 arg_4           = dword ptr  8
.text:00402F20 arg_8           = dword ptr  0Ch
.text:00402F20 arg_C           = dword ptr  10h
.text:00402F20 arg_10          = dword ptr  14h
.text:00402F20
.text:00402F20                 sub     esp, 1Ch
.text:00402F23                 mov     edx, [esp+1Ch+arg_C]
.text:00402F27                 mov     [esp+1Ch+var_4], 0 ; int
.text:00402F2F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402F33                 mov     [esp+1Ch+var_8], 0 ; int
.text:00402F3B                 mov     [esp+1Ch+var_10], edx ; int
.text:00402F3F                 mov     edx, [esp+1Ch+arg_4]
.text:00402F43                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402F47                 mov     ecx, [esp+1Ch+arg_8]
.text:00402F4B                 mov     [esp+1Ch+var_18], edx ; int
.text:00402F4F                 mov     edx, [esp+1Ch+arg_0]
.text:00402F53                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402F57                 mov     [esp+1Ch+var_1C], edx ; int
.text:00402F5A                 call    sub_402C80
.text:00402F5F                 add     esp, 1Ch
.text:00402F62                 retn
.text:00402F62 sub_402F20      endp
.text:00402F62
.text:00402F62 ; ---------------------------------------------------------------------------
.text:00402F63                 align 10h
.text:00402F70                 sub     esp, 2Ch
.text:00402F73                 mov     edx, [esp+44h]
.text:00402F77                 mov     dword ptr [esp+18h], 0
.text:00402F7F                 mov     ecx, [esp+40h]
.text:00402F83                 mov     dword ptr [esp+14h], 0
.text:00402F8B                 mov     [esp+1Ch], edx
.text:00402F8F                 mov     edx, [esp+3Ch]
.text:00402F93                 mov     [esp+10h], ecx
.text:00402F97                 mov     ecx, [esp+38h]
.text:00402F9B                 mov     [esp+0Ch], edx
.text:00402F9F                 mov     edx, [esp+34h]
.text:00402FA3                 mov     [esp+8], ecx
.text:00402FA7                 mov     [esp+4], edx
.text:00402FAB                 mov     edx, [esp+30h]
.text:00402FAF                 mov     [esp], edx
.text:00402FB2                 call    sub_4020F0
.text:00402FB7                 add     esp, 2Ch
.text:00402FBA                 retn
.text:00402FBA ; ---------------------------------------------------------------------------
.text:00402FBB                 align 10h
.text:00402FC0                 sub     esp, 1Ch
.text:00402FC3                 mov     edx, [esp+2Ch]
.text:00402FC7                 mov     dword ptr [esp+18h], 0
.text:00402FCF                 mov     ecx, [esp+30h]
.text:00402FD3                 mov     dword ptr [esp+14h], 1
.text:00402FDB                 mov     [esp+0Ch], edx
.text:00402FDF                 mov     edx, [esp+24h]
.text:00402FE3                 mov     [esp+10h], ecx
.text:00402FE7                 mov     ecx, [esp+28h]
.text:00402FEB                 mov     [esp+4], edx
.text:00402FEF                 mov     edx, [esp+20h]
.text:00402FF3                 mov     [esp+8], ecx
.text:00402FF7                 mov     [esp], edx
.text:00402FFA                 call    sub_402C80
.text:00402FFF                 add     esp, 1Ch
.text:00403002                 retn
.text:00403002 ; ---------------------------------------------------------------------------
.text:00403003                 align 10h
.text:00403010                 sub     esp, 2Ch
.text:00403013                 mov     edx, [esp+44h]
.text:00403017                 mov     dword ptr [esp+18h], 0
.text:0040301F                 mov     ecx, [esp+40h]
.text:00403023                 mov     dword ptr [esp+14h], 1
.text:0040302B                 mov     [esp+1Ch], edx
.text:0040302F                 mov     edx, [esp+3Ch]
.text:00403033                 mov     [esp+10h], ecx
.text:00403037                 mov     ecx, [esp+38h]
.text:0040303B                 mov     [esp+0Ch], edx
.text:0040303F                 mov     edx, [esp+34h]
.text:00403043                 mov     [esp+8], ecx
.text:00403047                 mov     [esp+4], edx
.text:0040304B                 mov     edx, [esp+30h]
.text:0040304F                 mov     [esp], edx
.text:00403052                 call    sub_4020F0
.text:00403057                 add     esp, 2Ch
.text:0040305A                 retn
.text:0040305A ; ---------------------------------------------------------------------------
.text:0040305B                 align 10h
.text:00403060 aHelp           db 'help',0             ; DATA XREF: .text:off_403080↓o
.text:00403065 aVersion        db 'version',0          ; DATA XREF: .text:00403090↓o
.text:0040306D                 align 20h
.text:00403080 off_403080      dd offset aHelp         ; DATA XREF: sub_4030C0+3D↓o
.text:00403080                                         ; "help"
.text:00403084                 dd 2 dup(0)
.text:0040308C                 dd 68h
.text:00403090                 dd offset aVersion      ; "version"
.text:00403094                 dd 2 dup(0)
.text:0040309C                 dd 76h, 4 dup(0)
.text:004030B0 ; ---------------------------------------------------------------------------
.text:004030B0
.text:004030B0 loc_4030B0:                             ; DATA XREF: sub_4030C0+45↓o
.text:004030B0                 sub     eax, [eax]
.text:004030B2                 lea     esi, [esi+0]
.text:004030B9                 lea     edi, [edi+0]
.text:004030C0
.text:004030C0 ; =============== S U B R O U T I N E =======================================
.text:004030C0
.text:004030C0
.text:004030C0 ; int __cdecl sub_4030C0(int, int, FILE *, int, int, int, char)
.text:004030C0 sub_4030C0      proc near               ; CODE XREF: sub_401380+AE↑p
.text:004030C0
.text:004030C0 Code            = dword ptr -1Ch
.text:004030C0 var_18          = dword ptr -18h
.text:004030C0 var_14          = dword ptr -14h
.text:004030C0 var_10          = dword ptr -10h
.text:004030C0 var_C           = dword ptr -0Ch
.text:004030C0 var_4           = dword ptr -4
.text:004030C0 arg_0           = dword ptr  4
.text:004030C0 arg_4           = dword ptr  8
.text:004030C0 arg_8           = dword ptr  0Ch
.text:004030C0 arg_C           = dword ptr  10h
.text:004030C0 arg_10          = dword ptr  14h
.text:004030C0 arg_14          = dword ptr  18h
.text:004030C0 arg_18          = byte ptr  1Ch
.text:004030C0
.text:004030C0                 sub     esp, 1Ch
.text:004030C3                 xor     eax, eax
.text:004030C5                 cmp     [esp+1Ch+arg_0], 2
.text:004030CA                 mov     [esp+1Ch+var_4], ebx
.text:004030CE                 mov     ebx, dword_407014
.text:004030D4                 mov     dword_407014, eax
.text:004030D9                 jz      short loc_4030F1
.text:004030DB
.text:004030DB loc_4030DB:                             ; CODE XREF: sub_4030C0+60↓j
.text:004030DB                                         ; sub_4030C0+6A↓j
.text:004030DB                 mov     dword_407014, ebx
.text:004030E1                 xor     edx, edx
.text:004030E3                 mov     ebx, [esp+1Ch+var_4]
.text:004030E7                 mov     dword_407010, edx
.text:004030ED                 add     esp, 1Ch
.text:004030F0                 retn
.text:004030F1 ; ---------------------------------------------------------------------------
.text:004030F1
.text:004030F1 loc_4030F1:                             ; CODE XREF: sub_4030C0+19↑j
.text:004030F1                 mov     [esp+1Ch+var_C], 0 ; int
.text:004030F9                 mov     edx, [esp+1Ch+arg_4]
.text:004030FD                 mov     [esp+1Ch+var_10], offset off_403080 ; int
.text:00403105                 mov     [esp+1Ch+var_14], offset loc_4030B0 ; char *
.text:0040310D                 mov     [esp+1Ch+var_18], edx ; int
.text:00403111                 mov     [esp+1Ch+Code], 2 ; int
.text:00403118                 call    sub_402F20
.text:0040311D                 cmp     eax, 0FFFFFFFFh
.text:00403120                 jz      short loc_4030DB
.text:00403122                 cmp     eax, 68h ; 'h'
.text:00403125                 jz      short loc_40312E
.text:00403127                 cmp     eax, 76h ; 'v'
.text:0040312A                 jnz     short loc_4030DB
.text:0040312C                 jmp     short loc_403139
.text:0040312E ; ---------------------------------------------------------------------------
.text:0040312E
.text:0040312E loc_40312E:                             ; CODE XREF: sub_4030C0+65↑j
.text:0040312E                 mov     [esp+1Ch+Code], 0
.text:00403135                 call    [esp+1Ch+arg_14]
.text:00403139
.text:00403139 loc_403139:                             ; CODE XREF: sub_4030C0+6C↑j
.text:00403139                 mov     ecx, [esp+1Ch+arg_10]
.text:0040313D                 lea     ebx, [esp+1Ch+arg_18]
.text:00403141                 mov     edx, [esp+1Ch+arg_C]
.text:00403145                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00403149                 mov     ebx, [esp+1Ch+arg_8]
.text:0040314D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00403151                 mov     ecx, ds:_iob
.text:00403157                 mov     [esp+1Ch+var_14], edx ; int
.text:0040315B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:0040315F                 add     ecx, 20h ; ' '
.text:00403162                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00403165                 call    sub_404C80
.text:0040316A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00403171                 call    exit
.text:00403171 sub_4030C0      endp
.text:00403171
.text:00403171 ; ---------------------------------------------------------------------------
.text:00403176                 align 10h
.text:00403180                 mov     edx, [esp+4]
.text:00403184                 mov     ds:dword_408030, edx
.text:0040318A                 retn
.text:0040318A ; ---------------------------------------------------------------------------
.text:0040318B aWriteError     db 'write error',0      ; DATA XREF: sub_4031B0:loc_4031F9↓o
.text:00403197 ; const char aSS[]
.text:00403197 aSS             db '%s: %s',0           ; DATA XREF: sub_4031B0+77↓o
.text:0040319E ; const char aS_3[]
.text:0040319E aS_3            db '%s',0               ; DATA XREF: sub_4031B0+A0↓o
.text:004031A1 ; ---------------------------------------------------------------------------
.text:004031A1                 jmp     short sub_4031B0
.text:004031A1 ; ---------------------------------------------------------------------------
.text:004031A3                 align 10h
.text:004031B0
.text:004031B0 ; =============== S U B R O U T I N E =======================================
.text:004031B0
.text:004031B0
.text:004031B0 ; void __cdecl sub_4031B0()
.text:004031B0 sub_4031B0      proc near               ; CODE XREF: .text:004031A1↑j
.text:004031B0                                         ; DATA XREF: sub_401380+5B↑o
.text:004031B0
.text:004031B0 Stream          = dword ptr -2Ch
.text:004031B0 ErrorMessage    = dword ptr -28h
.text:004031B0 var_24          = dword ptr -24h
.text:004031B0 var_20          = byte ptr -20h
.text:004031B0 var_1C          = dword ptr -1Ch
.text:004031B0 var_9           = byte ptr -9
.text:004031B0
.text:004031B0                 push    esi
.text:004031B1                 push    ebx
.text:004031B2                 sub     esp, 24h
.text:004031B5                 mov     edx, ds:_iob
.text:004031BB                 mov     ecx, [edx+2Ch]
.text:004031BE                 lea     esi, [edx+20h]
.text:004031C1                 shr     ecx, 5
.text:004031C4                 mov     bl, cl
.text:004031C6                 mov     ecx, [edx+20h]
.text:004031C9                 and     bl, 1
.text:004031CC                 cmp     ecx, [esi+8]
.text:004031CF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004031D2                 setz    [esp+2Ch+var_9]
.text:004031D7                 call    fclose
.text:004031DC                 test    eax, eax
.text:004031DE                 setnz   al
.text:004031E1                 test    bl, bl
.text:004031E3                 jnz     loc_403273
.text:004031E9                 test    al, al
.text:004031EB                 jz      short loc_403240
.text:004031ED
.text:004031ED loc_4031ED:                             ; CODE XREF: sub_4031B0+CD↓j
.text:004031ED                 call    _errno
.text:004031F2                 mov     esi, [eax]
.text:004031F4
.text:004031F4 loc_4031F4:                             ; CODE XREF: sub_4031B0+C7↓j
.text:004031F4                 cmp     esi, 9
.text:004031F7                 jz      short loc_403266
.text:004031F9
.text:004031F9 loc_4031F9:                             ; CODE XREF: sub_4031B0+B8↓j
.text:004031F9                                         ; sub_4031B0+C1↓j
.text:004031F9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403200                 call    ds:libintl_gettext
.text:00403206                 mov     ebx, eax
.text:00403208                 mov     eax, ds:dword_408030
.text:0040320D                 test    eax, eax
.text:0040320F                 jz      short loc_403246
.text:00403211                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403214                 call    sub_404720
.text:00403219                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040321D                 mov     edx, Code
.text:00403223                 mov     [esp+2Ch+var_1C], ebx
.text:00403227                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:0040322F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403233                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403236                 call    sub_404F50
.text:0040323B                 nop
.text:0040323C                 lea     esi, [esi+0]
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_4031B0+3B↑j
.text:00403240                                         ; sub_4031B0+B4↓j ...
.text:00403240                 add     esp, 24h
.text:00403243                 pop     ebx
.text:00403244                 pop     esi
.text:00403245                 retn
.text:00403246 ; ---------------------------------------------------------------------------
.text:00403246
.text:00403246 loc_403246:                             ; CODE XREF: sub_4031B0+5F↑j
.text:00403246                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040324A                 mov     ebx, Code
.text:00403250                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00403258                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040325C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040325F                 call    sub_404F50
.text:00403264                 jmp     short loc_403240
.text:00403266 ; ---------------------------------------------------------------------------
.text:00403266
.text:00403266 loc_403266:                             ; CODE XREF: sub_4031B0+47↑j
.text:00403266                 test    bl, bl
.text:00403268                 jnz     short loc_4031F9
.text:0040326A                 cmp     [esp+2Ch+var_9], 0
.text:0040326F                 jnz     short loc_403240
.text:00403271                 jmp     short loc_4031F9
.text:00403273 ; ---------------------------------------------------------------------------
.text:00403273
.text:00403273 loc_403273:                             ; CODE XREF: sub_4031B0+33↑j
.text:00403273                 xor     esi, esi
.text:00403275                 test    al, al
.text:00403277                 jz      loc_4031F4
.text:0040327D                 jmp     loc_4031ED
.text:0040327D sub_4031B0      endp
.text:0040327D
.text:0040327D ; ---------------------------------------------------------------------------
.text:00403282                 align 10h
.text:00403290 ; const char aC[2]
.text:00403290 aC              db 'C',0                ; DATA XREF: sub_4032A0+29↓o
.text:00403292                 align 10h
.text:004032A0
.text:004032A0 ; =============== S U B R O U T I N E =======================================
.text:004032A0
.text:004032A0
.text:004032A0 ; int __cdecl sub_4032A0(char *String, char **EndPtr)
.text:004032A0 sub_4032A0      proc near               ; CODE XREF: sub_401940+3A0↑p
.text:004032A0
.text:004032A0 Category        = dword ptr -1Ch
.text:004032A0 Locale          = dword ptr -18h
.text:004032A0 var_C           = qword ptr -0Ch
.text:004032A0 var_4           = dword ptr -4
.text:004032A0 String          = dword ptr  4
.text:004032A0 EndPtr          = dword ptr  8
.text:004032A0
.text:004032A0                 sub     esp, 1Ch
.text:004032A3                 mov     [esp+1Ch+var_4], ebx
.text:004032A7                 mov     [esp+1Ch+Locale], 0 ; Locale
.text:004032AF                 mov     [esp+1Ch+Category], 4 ; Category
.text:004032B6                 call    setlocale
.text:004032BB                 test    eax, eax
.text:004032BD                 mov     ebx, eax
.text:004032BF                 jz      short loc_4032DF
.text:004032C1                 mov     [esp+1Ch+Category], eax ; char *
.text:004032C4                 call    sub_403520
.text:004032C9                 mov     [esp+1Ch+Locale], offset aC ; "C"
.text:004032D1                 mov     ebx, eax
.text:004032D3                 mov     [esp+1Ch+Category], 4 ; Category
.text:004032DA                 call    setlocale
.text:004032DF
.text:004032DF loc_4032DF:                             ; CODE XREF: sub_4032A0+1F↑j
.text:004032DF                 mov     edx, [esp+1Ch+EndPtr]
.text:004032E3                 mov     [esp+1Ch+Locale], edx ; EndPtr
.text:004032E7                 mov     edx, [esp+1Ch+String]
.text:004032EB                 mov     [esp+1Ch+Category], edx ; String
.text:004032EE                 call    strtod
.text:004032F3                 test    ebx, ebx
.text:004032F5                 fstp    [esp+1Ch+var_C]
.text:004032F9                 jz      short loc_403313
.text:004032FB                 mov     [esp+1Ch+Locale], ebx ; Locale
.text:004032FF                 mov     [esp+1Ch+Category], 4 ; Category
.text:00403306                 call    setlocale
.text:0040330B                 mov     [esp+1Ch+Category], ebx ; Block
.text:0040330E                 call    free
.text:00403313
.text:00403313 loc_403313:                             ; CODE XREF: sub_4032A0+59↑j
.text:00403313                 fld     [esp+1Ch+var_C]
.text:00403317                 mov     ebx, [esp+1Ch+var_4]
.text:0040331B                 add     esp, 1Ch
.text:0040331E                 retn
.text:0040331E sub_4032A0      endp
.text:0040331E
.text:0040331E ; ---------------------------------------------------------------------------
.text:0040331F                 align 10h
.text:00403320                 sub     esp, 0Ch
.text:00403323                 xor     edx, edx
.text:00403325                 mov     ecx, [esp+14h]
.text:00403329                 mov     [esp+8], ebx
.text:0040332D                 mov     eax, 0FFFFFFFFh
.text:00403332                 mov     ebx, [esp+10h]
.text:00403336                 div     ecx
.text:00403338                 cmp     eax, ebx
.text:0040333A                 jb      short loc_403359
.text:0040333C                 mov     edx, ebx
.text:0040333E                 imul    edx, ecx
.text:00403341                 mov     [esp], edx
.text:00403344                 call    malloc
.text:00403349                 test    eax, eax
.text:0040334B                 jz      short loc_403355
.text:0040334D
.text:0040334D loc_40334D:                             ; CODE XREF: .text:00403357↓j
.text:0040334D                 mov     ebx, [esp+8]
.text:00403351                 add     esp, 0Ch
.text:00403354                 retn
.text:00403355 ; ---------------------------------------------------------------------------
.text:00403355
.text:00403355 loc_403355:                             ; CODE XREF: .text:0040334B↑j
.text:00403355                 test    ebx, ebx
.text:00403357                 jz      short loc_40334D
.text:00403359
.text:00403359 loc_403359:                             ; CODE XREF: .text:0040333A↑j
.text:00403359                 call    sub_404EB0
.text:00403359 ; ---------------------------------------------------------------------------
.text:0040335E                 align 10h
.text:00403360
.text:00403360 ; =============== S U B R O U T I N E =======================================
.text:00403360
.text:00403360
.text:00403360 ; int __cdecl sub_403360(size_t)
.text:00403360 sub_403360      proc near               ; CODE XREF: .text:00401D4E↑p
.text:00403360                                         ; sub_401DB0+18↑p ...
.text:00403360
.text:00403360 Size            = dword ptr -0Ch
.text:00403360 var_4           = dword ptr -4
.text:00403360 arg_0           = dword ptr  4
.text:00403360
.text:00403360                 sub     esp, 0Ch
.text:00403363                 mov     [esp+0Ch+var_4], ebx
.text:00403367                 mov     ebx, [esp+0Ch+arg_0]
.text:0040336B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040336E                 call    malloc
.text:00403373                 test    eax, eax
.text:00403375                 jz      short loc_403380
.text:00403377
.text:00403377 loc_403377:                             ; CODE XREF: sub_403360+22↓j
.text:00403377                 mov     ebx, [esp+0Ch+var_4]
.text:0040337B                 add     esp, 0Ch
.text:0040337E                 retn
.text:0040337E ; ---------------------------------------------------------------------------
.text:0040337F                 align 10h
.text:00403380
.text:00403380 loc_403380:                             ; CODE XREF: sub_403360+15↑j
.text:00403380                 test    ebx, ebx
.text:00403382                 jz      short loc_403377
.text:00403384                 call    sub_404EB0
.text:00403384 sub_403360      endp
.text:00403384
.text:00403384 ; ---------------------------------------------------------------------------
.text:00403389                 align 10h
.text:00403390
.text:00403390 ; =============== S U B R O U T I N E =======================================
.text:00403390
.text:00403390
.text:00403390 ; int __cdecl sub_403390(void *, int, int)
.text:00403390 sub_403390      proc near               ; CODE XREF: sub_401DB0+B7↑p
.text:00403390
.text:00403390 Block           = dword ptr -1Ch
.text:00403390 Size            = dword ptr -18h
.text:00403390 var_8           = dword ptr -8
.text:00403390 var_4           = dword ptr -4
.text:00403390 arg_0           = dword ptr  4
.text:00403390 arg_4           = dword ptr  8
.text:00403390 arg_8           = dword ptr  0Ch
.text:00403390
.text:00403390                 sub     esp, 1Ch
.text:00403393                 xor     edx, edx
.text:00403395                 mov     eax, 0FFFFFFFFh
.text:0040339A                 mov     [esp+1Ch+var_8], ebx
.text:0040339E                 mov     ecx, [esp+1Ch+arg_0]
.text:004033A2                 mov     ebx, [esp+1Ch+arg_8]
.text:004033A6                 mov     [esp+1Ch+var_4], esi
.text:004033AA                 mov     esi, [esp+1Ch+arg_4]
.text:004033AE                 div     ebx
.text:004033B0                 cmp     eax, esi
.text:004033B2                 jb      short loc_4033E4
.text:004033B4                 mov     [esp+1Ch+Block], ecx ; Block
.text:004033B7                 mov     edx, esi
.text:004033B9                 imul    edx, ebx
.text:004033BC                 mov     [esp+1Ch+Size], edx ; Size
.text:004033C0                 call    realloc
.text:004033C5                 test    eax, eax
.text:004033C7                 mov     ecx, eax
.text:004033C9                 jz      short loc_4033E0
.text:004033CB
.text:004033CB loc_4033CB:                             ; CODE XREF: sub_403390+52↓j
.text:004033CB                 mov     ebx, [esp+1Ch+var_8]
.text:004033CF                 mov     eax, ecx
.text:004033D1                 mov     esi, [esp+1Ch+var_4]
.text:004033D5                 add     esp, 1Ch
.text:004033D8                 retn
.text:004033D8 ; ---------------------------------------------------------------------------
.text:004033D9                 align 10h
.text:004033E0
.text:004033E0 loc_4033E0:                             ; CODE XREF: sub_403390+39↑j
.text:004033E0                 test    esi, esi
.text:004033E2                 jz      short loc_4033CB
.text:004033E4
.text:004033E4 loc_4033E4:                             ; CODE XREF: sub_403390+22↑j
.text:004033E4                 call    sub_404EB0
.text:004033E4 sub_403390      endp
.text:004033E4
.text:004033E4 ; ---------------------------------------------------------------------------
.text:004033E9                 align 10h
.text:004033F0
.text:004033F0 ; =============== S U B R O U T I N E =======================================
.text:004033F0
.text:004033F0
.text:004033F0 ; int __cdecl sub_4033F0(void *, size_t)
.text:004033F0 sub_4033F0      proc near               ; CODE XREF: sub_4047C0+5B↓p
.text:004033F0
.text:004033F0 Block           = dword ptr -0Ch
.text:004033F0 Size            = dword ptr -8
.text:004033F0 var_4           = dword ptr -4
.text:004033F0 arg_0           = dword ptr  4
.text:004033F0 arg_4           = dword ptr  8
.text:004033F0
.text:004033F0                 sub     esp, 0Ch
.text:004033F3                 mov     edx, [esp+0Ch+arg_0]
.text:004033F7                 mov     [esp+0Ch+var_4], ebx
.text:004033FB                 mov     ebx, [esp+0Ch+arg_4]
.text:004033FF                 mov     [esp+0Ch+Block], edx ; Block
.text:00403402                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403406                 call    realloc
.text:0040340B                 test    eax, eax
.text:0040340D                 jz      short loc_403417
.text:0040340F
.text:0040340F loc_40340F:                             ; CODE XREF: sub_4033F0+29↓j
.text:0040340F                 mov     ebx, [esp+0Ch+var_4]
.text:00403413                 add     esp, 0Ch
.text:00403416                 retn
.text:00403417 ; ---------------------------------------------------------------------------
.text:00403417
.text:00403417 loc_403417:                             ; CODE XREF: sub_4033F0+1D↑j
.text:00403417                 test    ebx, ebx
.text:00403419                 jz      short loc_40340F
.text:0040341B                 call    sub_404EB0
.text:0040341B sub_4033F0      endp
.text:0040341B
.text:00403420 ; ---------------------------------------------------------------------------
.text:00403420                 jmp     sub_403570
.text:00403420 ; ---------------------------------------------------------------------------
.text:00403425                 align 10h
.text:00403430                 sub     esp, 0Ch
.text:00403433                 mov     edx, [esp+14h]
.text:00403437                 mov     dword ptr [esp+8], 1
.text:0040343F                 mov     [esp+4], edx
.text:00403443                 mov     edx, [esp+10h]
.text:00403447                 mov     [esp], edx
.text:0040344A                 call    sub_403570
.text:0040344F                 add     esp, 0Ch
.text:00403452                 retn
.text:00403452 ; ---------------------------------------------------------------------------
.text:00403453                 align 10h
.text:00403460                 sub     esp, 1Ch
.text:00403463                 mov     [esp+18h], ebx
.text:00403467                 mov     ebx, [esp+20h]
.text:0040346B                 mov     [esp], ebx
.text:0040346E                 call    malloc
.text:00403473                 test    eax, eax
.text:00403475                 jz      short loc_403493
.text:00403477
.text:00403477 loc_403477:                             ; CODE XREF: .text:00403495↓j
.text:00403477                 mov     [esp+8], ebx
.text:0040347B                 mov     dword ptr [esp+4], 0
.text:00403483                 mov     [esp], eax
.text:00403486                 call    memset
.text:0040348B                 mov     ebx, [esp+18h]
.text:0040348F                 add     esp, 1Ch
.text:00403492                 retn
.text:00403493 ; ---------------------------------------------------------------------------
.text:00403493
.text:00403493 loc_403493:                             ; CODE XREF: .text:00403475↑j
.text:00403493                 test    ebx, ebx
.text:00403495                 jz      short loc_403477
.text:00403497                 call    sub_404EB0
.text:00403497 ; ---------------------------------------------------------------------------
.text:0040349C                 align 10h
.text:004034A0                 sub     esp, 0Ch
.text:004034A3                 xor     edx, edx
.text:004034A5                 mov     ecx, [esp+14h]
.text:004034A9                 mov     [esp+8], ebx
.text:004034AD                 mov     eax, 0FFFFFFFFh
.text:004034B2                 mov     ebx, [esp+10h]
.text:004034B6                 div     ecx
.text:004034B8                 cmp     eax, ebx
.text:004034BA                 jb      short loc_4034D8
.text:004034BC                 mov     [esp+4], ecx
.text:004034C0                 mov     [esp], ebx
.text:004034C3                 call    calloc
.text:004034C8                 test    eax, eax
.text:004034CA                 jz      short loc_4034D4
.text:004034CC
.text:004034CC loc_4034CC:                             ; CODE XREF: .text:004034D6↓j
.text:004034CC                 mov     ebx, [esp+8]
.text:004034D0                 add     esp, 0Ch
.text:004034D3                 retn
.text:004034D4 ; ---------------------------------------------------------------------------
.text:004034D4
.text:004034D4 loc_4034D4:                             ; CODE XREF: .text:004034CA↑j
.text:004034D4                 test    ebx, ebx
.text:004034D6                 jz      short loc_4034CC
.text:004034D8
.text:004034D8 loc_4034D8:                             ; CODE XREF: .text:004034BA↑j
.text:004034D8                 call    sub_404EB0
.text:004034D8 ; ---------------------------------------------------------------------------
.text:004034DD                 align 10h
.text:004034E0                 sub     esp, 1Ch
.text:004034E3                 mov     [esp+18h], ebx
.text:004034E7                 mov     ebx, [esp+24h]
.text:004034EB                 mov     [esp], ebx
.text:004034EE                 call    malloc
.text:004034F3                 test    eax, eax
.text:004034F5                 mov     edx, eax
.text:004034F7                 jz      short loc_403515
.text:004034F9
.text:004034F9 loc_4034F9:                             ; CODE XREF: .text:00403517↓j
.text:004034F9                 mov     [esp+8], ebx
.text:004034FD                 mov     ecx, [esp+20h]
.text:00403501                 mov     [esp], edx
.text:00403504                 mov     [esp+4], ecx
.text:00403508                 call    memcpy
.text:0040350D                 mov     ebx, [esp+18h]
.text:00403511                 add     esp, 1Ch
.text:00403514                 retn
.text:00403515 ; ---------------------------------------------------------------------------
.text:00403515
.text:00403515 loc_403515:                             ; CODE XREF: .text:004034F7↑j
.text:00403515                 test    ebx, ebx
.text:00403517                 jz      short loc_4034F9
.text:00403519                 call    sub_404EB0
.text:00403519 ; ---------------------------------------------------------------------------
.text:0040351E                 align 10h
.text:00403520
.text:00403520 ; =============== S U B R O U T I N E =======================================
.text:00403520
.text:00403520
.text:00403520 ; int __cdecl sub_403520(char *)
.text:00403520 sub_403520      proc near               ; CODE XREF: sub_4032A0+24↑p
.text:00403520
.text:00403520 Str             = dword ptr -1Ch
.text:00403520 Src             = dword ptr -18h
.text:00403520 Size            = dword ptr -14h
.text:00403520 var_8           = dword ptr -8
.text:00403520 var_4           = dword ptr -4
.text:00403520 arg_0           = dword ptr  4
.text:00403520
.text:00403520                 sub     esp, 1Ch
.text:00403523                 mov     [esp+1Ch+var_4], esi
.text:00403527                 mov     esi, [esp+1Ch+arg_0]
.text:0040352B                 mov     [esp+1Ch+var_8], ebx
.text:0040352F                 mov     [esp+1Ch+Str], esi ; Str
.text:00403532                 call    strlen
.text:00403537                 lea     ebx, [eax+1]
.text:0040353A                 mov     [esp+1Ch+Str], ebx ; Size
.text:0040353D                 call    malloc
.text:00403542                 test    eax, eax
.text:00403544                 jz      short loc_403562
.text:00403546
.text:00403546 loc_403546:                             ; CODE XREF: sub_403520+44↓j
.text:00403546                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040354A                 mov     [esp+1Ch+Src], esi ; Src
.text:0040354E                 mov     [esp+1Ch+Str], eax ; void *
.text:00403551                 call    memcpy
.text:00403556                 mov     ebx, [esp+1Ch+var_8]
.text:0040355A                 mov     esi, [esp+1Ch+var_4]
.text:0040355E                 add     esp, 1Ch
.text:00403561                 retn
.text:00403562 ; ---------------------------------------------------------------------------
.text:00403562
.text:00403562 loc_403562:                             ; CODE XREF: sub_403520+24↑j
.text:00403562                 test    ebx, ebx
.text:00403564                 jz      short loc_403546
.text:00403566                 call    sub_404EB0
.text:00403566 sub_403520      endp
.text:00403566
.text:00403566 ; ---------------------------------------------------------------------------
.text:0040356B                 align 10h
.text:00403570
.text:00403570 ; =============== S U B R O U T I N E =======================================
.text:00403570
.text:00403570
.text:00403570 ; int __cdecl sub_403570(void *, int, int)
.text:00403570 sub_403570      proc near               ; CODE XREF: .text:00403420↑j
.text:00403570                                         ; .text:0040344A↑p
.text:00403570
.text:00403570 Block           = dword ptr -1Ch
.text:00403570 Size            = dword ptr -18h
.text:00403570 var_C           = dword ptr -0Ch
.text:00403570 var_8           = dword ptr -8
.text:00403570 var_4           = dword ptr -4
.text:00403570 arg_0           = dword ptr  4
.text:00403570 arg_4           = dword ptr  8
.text:00403570 arg_8           = dword ptr  0Ch
.text:00403570
.text:00403570                 sub     esp, 1Ch
.text:00403573                 mov     [esp+1Ch+var_8], esi
.text:00403577                 mov     esi, [esp+1Ch+arg_0]
.text:0040357B                 mov     [esp+1Ch+var_4], edi
.text:0040357F                 mov     edi, [esp+1Ch+arg_4]
.text:00403583                 test    esi, esi
.text:00403585                 mov     [esp+1Ch+var_C], ebx
.text:00403589                 mov     ecx, [edi]
.text:0040358B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040358F                 jz      short loc_4035D0
.text:00403591                 xor     edx, edx
.text:00403593                 mov     eax, 7FFFFFFFh
.text:00403598                 div     ebx
.text:0040359A                 cmp     eax, ecx
.text:0040359C                 jb      short loc_4035C9
.text:0040359E                 add     ecx, ecx
.text:004035A0
.text:004035A0 loc_4035A0:                             ; CODE XREF: sub_403570+62↓j
.text:004035A0                                         ; sub_403570+71↓j ...
.text:004035A0                 mov     [edi], ecx
.text:004035A2                 imul    ebx, ecx
.text:004035A5                 mov     [esp+1Ch+Block], esi ; Block
.text:004035A8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004035AC                 call    realloc
.text:004035B1                 test    eax, eax
.text:004035B3                 jz      short loc_4035C5
.text:004035B5
.text:004035B5 loc_4035B5:                             ; CODE XREF: sub_403570+57↓j
.text:004035B5                 mov     ebx, [esp+1Ch+var_C]
.text:004035B9                 mov     esi, [esp+1Ch+var_8]
.text:004035BD                 mov     edi, [esp+1Ch+var_4]
.text:004035C1                 add     esp, 1Ch
.text:004035C4                 retn
.text:004035C5 ; ---------------------------------------------------------------------------
.text:004035C5
.text:004035C5 loc_4035C5:                             ; CODE XREF: sub_403570+43↑j
.text:004035C5                 test    ebx, ebx
.text:004035C7                 jz      short loc_4035B5
.text:004035C9
.text:004035C9 loc_4035C9:                             ; CODE XREF: sub_403570+2C↑j
.text:004035C9                 call    sub_404EB0
.text:004035C9 ; ---------------------------------------------------------------------------
.text:004035CE                 align 10h
.text:004035D0
.text:004035D0 loc_4035D0:                             ; CODE XREF: sub_403570+1F↑j
.text:004035D0                 test    ecx, ecx
.text:004035D2                 jnz     short loc_4035A0
.text:004035D4                 xor     edx, edx
.text:004035D6                 mov     eax, 40h ; '@'
.text:004035DB                 div     ebx
.text:004035DD                 test    eax, eax
.text:004035DF                 mov     ecx, eax
.text:004035E1                 jnz     short loc_4035A0
.text:004035E3                 mov     ecx, 1
.text:004035E8                 jmp     short loc_4035A0
.text:004035E8 sub_403570      endp
.text:004035E8
.text:004035E8 ; ---------------------------------------------------------------------------
.text:004035EA                 align 10h
.text:004035F0 aLiteral        db 'literal',0          ; DATA XREF: .text:00403630↓o
.text:004035F8 aShell          db 'shell',0            ; DATA XREF: .text:00403634↓o
.text:004035FE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403638↓o
.text:0040360B aC_0            db 'c',0                ; DATA XREF: .text:0040363C↓o
.text:0040360D aEscape         db 'escape',0           ; DATA XREF: .text:00403640↓o
.text:00403614 aLocale         db 'locale',0           ; DATA XREF: .text:00403644↓o
.text:0040361B aClocale        db 'clocale',0          ; DATA XREF: .text:00403648↓o
.text:00403623                 align 10h
.text:00403630                 dd offset aLiteral      ; "literal"
.text:00403634                 dd offset aShell        ; "shell"
.text:00403638                 dd offset aShellAlways  ; "shell-always"
.text:0040363C                 dd offset aC_0          ; "c"
.text:00403640                 dd offset aEscape       ; "escape"
.text:00403644                 dd offset aLocale       ; "locale"
.text:00403648                 dd offset aClocale      ; "clocale"
.text:0040364C                 dd 2 dup(0)
.text:00403654                 dd 1, 2, 3, 4, 5, 6
.text:0040366C asc_40366C:                             ; DATA XREF: sub_403680+7E↓o
.text:0040366C                                         ; sub_403680+A39↓o ...
.text:0040366C                 text "UTF-16LE", '"',27h,'`'
.text:00403672                 align 10h
.text:00403680
.text:00403680 ; =============== S U B R O U T I N E =======================================
.text:00403680
.text:00403680
.text:00403680 ; int __cdecl sub_403680(int, int, char *Str, int, int, int)
.text:00403680 sub_403680      proc near               ; CODE XREF: sub_403680+43A↓p
.text:00403680                                         ; .text:00404243↓p ...
.text:00403680
.text:00403680 C               = dword ptr -4Ch
.text:00403680 Type            = dword ptr -48h
.text:00403680 SizeInBytes     = dword ptr -44h
.text:00403680 State           = dword ptr -40h
.text:00403680 var_3C          = dword ptr -3Ch
.text:00403680 var_38          = dword ptr -38h
.text:00403680 var_34          = dword ptr -34h
.text:00403680 var_30          = dword ptr -30h
.text:00403680 var_29          = byte ptr -29h
.text:00403680 var_28          = dword ptr -28h
.text:00403680 var_22          = byte ptr -22h
.text:00403680 var_21          = byte ptr -21h
.text:00403680 var_20          = dword ptr -20h
.text:00403680 var_1C          = dword ptr -1Ch
.text:00403680 var_18          = mbstate_t ptr -18h
.text:00403680 arg_0           = dword ptr  4
.text:00403680 arg_4           = dword ptr  8
.text:00403680 Str             = dword ptr  0Ch
.text:00403680 arg_C           = dword ptr  10h
.text:00403680 arg_10          = dword ptr  14h
.text:00403680 arg_14          = dword ptr  18h
.text:00403680
.text:00403680                 push    ebp
.text:00403681                 push    edi
.text:00403682                 push    esi
.text:00403683                 push    ebx
.text:00403684                 sub     esp, 3Ch
.text:00403687                 mov     edx, ds:__mb_cur_max
.text:0040368D                 mov     [esp+4Ch+var_34], 0
.text:00403695                 mov     [esp+4Ch+var_1C], 0
.text:0040369D                 cmp     dword ptr [edx], 1
.text:004036A0                 mov     [esp+4Ch+var_20], 0
.text:004036A8                 mov     [esp+4Ch+var_21], 0
.text:004036AD                 setz    [esp+4Ch+var_22]
.text:004036B2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004036B7                 ja      short def_4036BD ; jumptable 004036BD default case, cases 0,1
.text:004036B9                 mov     edx, [esp+4Ch+arg_10]
.text:004036BD                 jmp     ds:jpt_4036BD[edx*4] ; switch jump
.text:004036BD ; ---------------------------------------------------------------------------
.text:004036C4 jpt_4036BD      dd offset def_4036BD    ; DATA XREF: sub_403680+3D↑r
.text:004036C4                 dd offset def_4036BD    ; jump table for switch statement
.text:004036C4                 dd offset loc_404005
.text:004036C4                 dd offset loc_4036E0
.text:004036C4                 dd offset loc_40402B
.text:004036C4                 dd offset loc_404035
.text:004036C4                 dd offset loc_404035
.text:004036E0 ; ---------------------------------------------------------------------------
.text:004036E0
.text:004036E0 loc_4036E0:                             ; CODE XREF: sub_403680+3D↑j
.text:004036E0                                         ; DATA XREF: sub_403680:jpt_4036BD↑o
.text:004036E0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004036BD case 3
.text:004036E4                 cmp     [esp+4Ch+var_34], eax
.text:004036E8                 jnb     short loc_4036F1
.text:004036EA                 mov     ebx, [esp+4Ch+arg_0]
.text:004036EE                 mov     byte ptr [ebx], 22h ; '"'
.text:004036F1
.text:004036F1 loc_4036F1:                             ; CODE XREF: sub_403680+68↑j
.text:004036F1                 mov     [esp+4Ch+var_34], 1
.text:004036F9                 mov     [esp+4Ch+var_21], 1
.text:004036FE                 mov     [esp+4Ch+var_1C], offset asc_40366C ; "\"'`"
.text:00403706
.text:00403706 loc_403706:                             ; CODE XREF: sub_403680+9A6↓j
.text:00403706                 mov     [esp+4Ch+var_20], 1
.text:0040370E
.text:0040370E def_4036BD:                             ; CODE XREF: sub_403680+37↑j
.text:0040370E                                         ; sub_403680+3D↑j ...
.text:0040370E                 xor     ebp, ebp        ; jumptable 004036BD default case, cases 0,1
.text:00403710
.text:00403710 loc_403710:                             ; CODE XREF: sub_403680+3DB↓j
.text:00403710                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403715                 jz      loc_403FF7
.text:0040371B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040371F
.text:0040371F loc_40371F:                             ; CODE XREF: sub_403680+980↓j
.text:0040371F                 jz      loc_403F8E
.text:00403725                 cmp     [esp+4Ch+var_21], 0
.text:0040372A                 jz      short loc_403770
.text:0040372C                 mov     esi, [esp+4Ch+var_20]
.text:00403730                 test    esi, esi
.text:00403732                 jz      short loc_403770
.text:00403734                 mov     ecx, [esp+4Ch+var_20]
.text:00403738                 lea     edi, [ecx+ebp]
.text:0040373B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040373F                 ja      short loc_403770
.text:00403741                 cld
.text:00403742                 mov     ebx, [esp+4Ch+Str]
.text:00403746                 mov     edi, [esp+4Ch+var_1C]
.text:0040374A                 add     ebx, ebp
.text:0040374C                 mov     esi, ebx
.text:0040374E                 cmp     ecx, ecx
.text:00403750                 repe cmpsb
.text:00403752                 jnz     short loc_403770
.text:00403754                 mov     edx, [esp+4Ch+arg_4]
.text:00403758                 cmp     [esp+4Ch+var_34], edx
.text:0040375C                 jnb     short loc_40376A
.text:0040375E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403762                 mov     eax, [esp+4Ch+var_34]
.text:00403766                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040376A
.text:0040376A loc_40376A:                             ; CODE XREF: sub_403680+DC↑j
.text:0040376A                 inc     [esp+4Ch+var_34]
.text:0040376E                 mov     esi, esi
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: sub_403680+AA↑j
.text:00403770                                         ; sub_403680+B2↑j ...
.text:00403770                 mov     edi, [esp+4Ch+Str]
.text:00403774                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00403779                 movzx   eax, bl
.text:0040377C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040377F                 ja      def_403785      ; jumptable 00403785 default case, cases 1-6,14-31,64
.text:00403785                 jmp     ds:jpt_403785[eax*4] ; switch jump
.text:00403785 ; ---------------------------------------------------------------------------
.text:0040378C jpt_403785      dd offset loc_403988, offset def_403785, offset def_403785
.text:0040378C                                         ; DATA XREF: sub_403680+105↑r
.text:0040378C                 dd offset def_403785, offset def_403785, offset def_403785 ; jump table for switch statement
.text:0040378C                 dd offset def_403785, offset loc_403A60, offset loc_403A7E
.text:0040378C                 dd offset loc_403A82, offset loc_403AC7, offset loc_403ACB
.text:0040378C                 dd offset loc_403ACF, offset loc_403AD3, offset def_403785
.text:0040378C                 dd offset def_403785, offset def_403785, offset def_403785
.text:0040378C                 dd offset def_403785, offset def_403785, offset def_403785
.text:0040378C                 dd offset def_403785, offset def_403785, offset def_403785
.text:0040378C                 dd offset def_403785, offset def_403785, offset def_403785
.text:0040378C                 dd offset def_403785, offset def_403785, offset def_403785
.text:0040378C                 dd offset def_403785, offset def_403785, offset loc_403F58
.text:0040378C                 dd offset loc_403F58, offset loc_403F58, offset loc_403F7A
.text:0040378C                 dd offset loc_403F58, offset def_403B82, offset loc_403F58
.text:0040378C                 dd offset loc_403AD7, offset loc_403F58, offset loc_403F58
.text:0040378C                 dd offset loc_403F58, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset loc_403F58
.text:0040378C                 dd offset loc_403F58, offset loc_403F58, offset loc_403F58
.text:0040378C                 dd offset loc_403B3C, offset def_403785, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset loc_403F58, offset loc_403F51
.text:0040378C                 dd offset def_403B82, offset loc_403F58, offset def_403B82
.text:0040378C                 dd offset loc_403F58, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset def_403B82, offset def_403B82, offset def_403B82
.text:0040378C                 dd offset loc_403F68, offset loc_403F58, offset loc_403F68
.text:0040378C                 dd offset loc_403F7A
.text:00403988 ; ---------------------------------------------------------------------------
.text:00403988
.text:00403988 loc_403988:                             ; CODE XREF: sub_403680+105↑j
.text:00403988                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403988                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403785 case 0
.text:0040398D                 lea     eax, [ebp+1]
.text:00403990                 jz      loc_403A40
.text:00403996                 mov     esi, [esp+4Ch+arg_4]
.text:0040399A                 cmp     [esp+4Ch+var_34], esi
.text:0040399E                 jnb     short loc_4039AC
.text:004039A0                 mov     eax, [esp+4Ch+arg_0]
.text:004039A4                 mov     ebx, [esp+4Ch+var_34]
.text:004039A8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004039AC
.text:004039AC loc_4039AC:                             ; CODE XREF: sub_403680+31E↑j
.text:004039AC                 inc     [esp+4Ch+var_34]
.text:004039B0                 mov     edx, [esp+4Ch+arg_4]
.text:004039B4                 cmp     [esp+4Ch+var_34], edx
.text:004039B8                 jnb     short loc_4039C6
.text:004039BA                 mov     edi, [esp+4Ch+arg_0]
.text:004039BE                 mov     ecx, [esp+4Ch+var_34]
.text:004039C2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004039C6
.text:004039C6 loc_4039C6:                             ; CODE XREF: sub_403680+338↑j
.text:004039C6                 inc     [esp+4Ch+var_34]
.text:004039CA                 mov     esi, [esp+4Ch+arg_4]
.text:004039CE                 cmp     [esp+4Ch+var_34], esi
.text:004039D2                 jnb     short loc_4039E0
.text:004039D4                 mov     ebx, [esp+4Ch+arg_0]
.text:004039D8                 mov     eax, [esp+4Ch+var_34]
.text:004039DC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004039E0
.text:004039E0 loc_4039E0:                             ; CODE XREF: sub_403680+352↑j
.text:004039E0                 inc     [esp+4Ch+var_34]
.text:004039E4                 mov     bl, 30h ; '0'
.text:004039E6                 lea     esi, [esi+0]
.text:004039E9                 lea     edi, [edi+0]
.text:004039F0
.text:004039F0 def_403B82:                             ; CODE XREF: sub_403680+105↑j
.text:004039F0                                         ; sub_403680+463↓j ...
.text:004039F0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403785 cases 37,43-58,65-90,93,95,97-122
.text:004039F0                                         ; jumptable 00403B82 default case, cases 34-38,42-44,46,48-59
.text:004039F5                 lea     eax, [ebp+1]
.text:004039F8                 jz      short loc_403A40
.text:004039FA                 mov     cl, bl
.text:004039FC                 mov     edi, [esp+4Ch+arg_14]
.text:00403A00                 mov     esi, 1
.text:00403A05                 shr     cl, 5
.text:00403A08                 movzx   edx, cl
.text:00403A0B                 mov     ecx, ebx
.text:00403A0D                 and     ecx, 1Fh
.text:00403A10                 shl     esi, cl
.text:00403A12                 test    [edi+edx*4+4], esi
.text:00403A16                 jz      short loc_403A32
.text:00403A18
.text:00403A18 loc_403A18:                             ; CODE XREF: sub_403680+3FC↓j
.text:00403A18                 mov     edx, [esp+4Ch+arg_4]
.text:00403A1C                 cmp     [esp+4Ch+var_34], edx
.text:00403A20                 jnb     short loc_403A2E
.text:00403A22                 mov     edi, [esp+4Ch+arg_0]
.text:00403A26                 mov     esi, [esp+4Ch+var_34]
.text:00403A2A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00403A2E
.text:00403A2E loc_403A2E:                             ; CODE XREF: sub_403680+3A0↑j
.text:00403A2E                 inc     [esp+4Ch+var_34]
.text:00403A32
.text:00403A32 loc_403A32:                             ; CODE XREF: sub_403680+396↑j
.text:00403A32                 lea     eax, [ebp+1]
.text:00403A35                 lea     esi, [esi+0]
.text:00403A39                 lea     edi, [edi+0]
.text:00403A40
.text:00403A40 loc_403A40:                             ; CODE XREF: sub_403680+310↑j
.text:00403A40                                         ; sub_403680+378↑j ...
.text:00403A40                 mov     ebp, [esp+4Ch+arg_4]
.text:00403A44                 cmp     [esp+4Ch+var_34], ebp
.text:00403A48                 jnb     short loc_403A55
.text:00403A4A                 mov     edx, [esp+4Ch+arg_0]
.text:00403A4E                 mov     ecx, [esp+4Ch+var_34]
.text:00403A52                 mov     [ecx+edx], bl
.text:00403A55
.text:00403A55 loc_403A55:                             ; CODE XREF: sub_403680+3C8↑j
.text:00403A55                 inc     [esp+4Ch+var_34]
.text:00403A59                 mov     ebp, eax
.text:00403A5B                 jmp     loc_403710
.text:00403A60 ; ---------------------------------------------------------------------------
.text:00403A60
.text:00403A60 loc_403A60:                             ; CODE XREF: sub_403680+105↑j
.text:00403A60                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403A60                 mov     dl, 61h ; 'a'   ; jumptable 00403785 case 7
.text:00403A62                 lea     esi, [esi+0]
.text:00403A69                 lea     edi, [edi+0]
.text:00403A70
.text:00403A70 loc_403A70:                             ; CODE XREF: sub_403680+400↓j
.text:00403A70                                         ; sub_403680+409↓j ...
.text:00403A70                 cmp     [esp+4Ch+var_21], 0
.text:00403A75                 lea     eax, [ebp+1]
.text:00403A78                 jz      short loc_403A40
.text:00403A7A                 mov     bl, dl
.text:00403A7C                 jmp     short loc_403A18
.text:00403A7E ; ---------------------------------------------------------------------------
.text:00403A7E
.text:00403A7E loc_403A7E:                             ; CODE XREF: sub_403680+105↑j
.text:00403A7E                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403A7E                 mov     dl, 62h ; 'b'   ; jumptable 00403785 case 8
.text:00403A80                 jmp     short loc_403A70
.text:00403A82 ; ---------------------------------------------------------------------------
.text:00403A82
.text:00403A82 loc_403A82:                             ; CODE XREF: sub_403680+105↑j
.text:00403A82                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403A82                 mov     dl, 74h ; 't'   ; jumptable 00403785 case 9
.text:00403A84
.text:00403A84 loc_403A84:                             ; CODE XREF: sub_403680+449↓j
.text:00403A84                                         ; sub_403680+455↓j ...
.text:00403A84                 cmp     [esp+4Ch+arg_10], 1
.text:00403A89                 jnz     short loc_403A70
.text:00403A8B
.text:00403A8B loc_403A8B:                             ; CODE XREF: sub_403680+45C↓j
.text:00403A8B                                         ; sub_403680+4C1↓j ...
.text:00403A8B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403E52 cases 91,92,94,96,124
.text:00403A93                 mov     eax, [esp+4Ch+arg_14]
.text:00403A97                 mov     edx, [esp+4Ch+arg_C]
.text:00403A9B                 mov     ecx, [esp+4Ch+Str]
.text:00403A9F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403AA3                 mov     [esp+4Ch+var_38], eax ; int
.text:00403AA7                 mov     ebp, [esp+4Ch+arg_0]
.text:00403AAB                 mov     [esp+4Ch+State], edx ; int
.text:00403AAF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403AB3                 mov     [esp+4Ch+Type], ebx ; int
.text:00403AB7                 mov     [esp+4Ch+C], ebp ; int
.text:00403ABA                 call    sub_403680
.text:00403ABF
.text:00403ABF loc_403ABF:                             ; CODE XREF: sub_403680+972↓j
.text:00403ABF                 add     esp, 3Ch
.text:00403AC2                 pop     ebx
.text:00403AC3                 pop     esi
.text:00403AC4                 pop     edi
.text:00403AC5                 pop     ebp
.text:00403AC6                 retn
.text:00403AC7 ; ---------------------------------------------------------------------------
.text:00403AC7
.text:00403AC7 loc_403AC7:                             ; CODE XREF: sub_403680+105↑j
.text:00403AC7                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403AC7                 mov     dl, 6Eh ; 'n'   ; jumptable 00403785 case 10
.text:00403AC9                 jmp     short loc_403A84
.text:00403ACB ; ---------------------------------------------------------------------------
.text:00403ACB
.text:00403ACB loc_403ACB:                             ; CODE XREF: sub_403680+105↑j
.text:00403ACB                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403ACB                 mov     dl, 76h ; 'v'   ; jumptable 00403785 case 11
.text:00403ACD                 jmp     short loc_403A70
.text:00403ACF ; ---------------------------------------------------------------------------
.text:00403ACF
.text:00403ACF loc_403ACF:                             ; CODE XREF: sub_403680+105↑j
.text:00403ACF                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403ACF                 mov     dl, 66h ; 'f'   ; jumptable 00403785 case 12
.text:00403AD1                 jmp     short loc_403A70
.text:00403AD3 ; ---------------------------------------------------------------------------
.text:00403AD3
.text:00403AD3 loc_403AD3:                             ; CODE XREF: sub_403680+105↑j
.text:00403AD3                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403AD3                 mov     dl, 72h ; 'r'   ; jumptable 00403785 case 13
.text:00403AD5                 jmp     short loc_403A84
.text:00403AD7 ; ---------------------------------------------------------------------------
.text:00403AD7
.text:00403AD7 loc_403AD7:                             ; CODE XREF: sub_403680+105↑j
.text:00403AD7                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403AD7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403785 case 39
.text:00403ADC                 jz      short loc_403A8B ; jumptable 00403E52 cases 91,92,94,96,124
.text:00403ADE                 cmp     [esp+4Ch+arg_10], 2
.text:00403AE3                 jnz     def_403B82      ; jumptable 00403785 cases 37,43-58,65-90,93,95,97-122
.text:00403AE3                                         ; jumptable 00403B82 default case, cases 34-38,42-44,46,48-59
.text:00403AE9                 mov     edx, [esp+4Ch+arg_4]
.text:00403AED                 cmp     [esp+4Ch+var_34], edx
.text:00403AF1                 jnb     short loc_403AFF
.text:00403AF3                 mov     ecx, [esp+4Ch+arg_0]
.text:00403AF7                 mov     edi, [esp+4Ch+var_34]
.text:00403AFB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00403AFF
.text:00403AFF loc_403AFF:                             ; CODE XREF: sub_403680+471↑j
.text:00403AFF                 inc     [esp+4Ch+var_34]
.text:00403B03                 mov     eax, [esp+4Ch+arg_4]
.text:00403B07                 cmp     [esp+4Ch+var_34], eax
.text:00403B0B                 jnb     short loc_403B19
.text:00403B0D                 mov     esi, [esp+4Ch+arg_0]
.text:00403B11                 mov     edx, [esp+4Ch+var_34]
.text:00403B15                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403B19
.text:00403B19 loc_403B19:                             ; CODE XREF: sub_403680+48B↑j
.text:00403B19                 inc     [esp+4Ch+var_34]
.text:00403B1D                 mov     edi, [esp+4Ch+arg_4]
.text:00403B21                 cmp     [esp+4Ch+var_34], edi
.text:00403B25                 jnb     short loc_403B33
.text:00403B27                 mov     ecx, [esp+4Ch+arg_0]
.text:00403B2B                 mov     eax, [esp+4Ch+var_34]
.text:00403B2F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403B33
.text:00403B33 loc_403B33:                             ; CODE XREF: sub_403680+4A5↑j
.text:00403B33                                         ; sub_403680+5C4↓j ...
.text:00403B33                 inc     [esp+4Ch+var_34]
.text:00403B37                 jmp     def_403B82      ; jumptable 00403785 cases 37,43-58,65-90,93,95,97-122
.text:00403B37                                         ; jumptable 00403B82 default case, cases 34-38,42-44,46,48-59
.text:00403B3C ; ---------------------------------------------------------------------------
.text:00403B3C
.text:00403B3C loc_403B3C:                             ; CODE XREF: sub_403680+105↑j
.text:00403B3C                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403B3C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403785 case 63
.text:00403B41                 jz      loc_403A8B      ; jumptable 00403E52 cases 91,92,94,96,124
.text:00403B47                 cmp     [esp+4Ch+arg_10], 3
.text:00403B4C                 jnz     def_403B82      ; jumptable 00403785 cases 37,43-58,65-90,93,95,97-122
.text:00403B4C                                         ; jumptable 00403B82 default case, cases 34-38,42-44,46,48-59
.text:00403B52                 lea     edx, [ebp+2]
.text:00403B55                 cmp     edx, [esp+4Ch+arg_C]
.text:00403B59                 jnb     def_403B82      ; jumptable 00403785 cases 37,43-58,65-90,93,95,97-122
.text:00403B59                                         ; jumptable 00403B82 default case, cases 34-38,42-44,46,48-59
.text:00403B5F                 mov     esi, [esp+4Ch+Str]
.text:00403B63                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403B68                 jnz     def_403B82      ; jumptable 00403785 cases 37,43-58,65-90,93,95,97-122
.text:00403B68                                         ; jumptable 00403B82 default case, cases 34-38,42-44,46,48-59
.text:00403B6E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403B73                 movsx   eax, cl
.text:00403B76                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403B79                 cmp     eax, 1Dh
.text:00403B7C                 ja      def_403B82      ; jumptable 00403785 cases 37,43-58,65-90,93,95,97-122
.text:00403B7C                                         ; jumptable 00403B82 default case, cases 34-38,42-44,46,48-59
.text:00403B82                 jmp     ds:jpt_403B82[eax*4] ; switch jump
.text:00403B82 ; ---------------------------------------------------------------------------
.text:00403B89                 align 4
.text:00403B8C jpt_403B82      dd offset loc_403C04    ; DATA XREF: sub_403680+502↑r
.text:00403B8C                 dd offset def_403B82    ; jump table for switch statement
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset loc_403C04
.text:00403B8C                 dd offset loc_403C04
.text:00403B8C                 dd offset loc_403C04
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset loc_403C04
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset loc_403C04
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset def_403B82
.text:00403B8C                 dd offset loc_403C04
.text:00403B8C                 dd offset loc_403C04
.text:00403B8C                 dd offset loc_403C04
.text:00403C04 ; ---------------------------------------------------------------------------
.text:00403C04
.text:00403C04 loc_403C04:                             ; CODE XREF: sub_403680+502↑j
.text:00403C04                                         ; DATA XREF: sub_403680:jpt_403B82↑o
.text:00403C04                 mov     ebp, edx        ; jumptable 00403B82 cases 33,39-41,45,47,60-62
.text:00403C06                 mov     bl, cl
.text:00403C08                 mov     edx, [esp+4Ch+arg_4]
.text:00403C0C                 cmp     [esp+4Ch+var_34], edx
.text:00403C10                 jnb     short loc_403C1E
.text:00403C12                 mov     ecx, [esp+4Ch+arg_0]
.text:00403C16                 mov     edi, [esp+4Ch+var_34]
.text:00403C1A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00403C1E
.text:00403C1E loc_403C1E:                             ; CODE XREF: sub_403680+590↑j
.text:00403C1E                 inc     [esp+4Ch+var_34]
.text:00403C22                 mov     eax, [esp+4Ch+arg_4]
.text:00403C26                 cmp     [esp+4Ch+var_34], eax
.text:00403C2A                 jnb     short loc_403C38
.text:00403C2C                 mov     edx, [esp+4Ch+arg_0]
.text:00403C30                 mov     esi, [esp+4Ch+var_34]
.text:00403C34                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403C38
.text:00403C38 loc_403C38:                             ; CODE XREF: sub_403680+5AA↑j
.text:00403C38                 inc     [esp+4Ch+var_34]
.text:00403C3C                 mov     edi, [esp+4Ch+arg_4]
.text:00403C40                 cmp     [esp+4Ch+var_34], edi
.text:00403C44                 jnb     loc_403B33
.text:00403C4A                 mov     eax, [esp+4Ch+arg_0]
.text:00403C4E                 mov     ecx, [esp+4Ch+var_34]
.text:00403C52                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403C56                 jmp     loc_403B33
.text:00403C56 ; ---------------------------------------------------------------------------
.text:00403C5B                 align 10h
.text:00403C60
.text:00403C60 def_403785:                             ; CODE XREF: sub_403680+FF↑j
.text:00403C60                                         ; sub_403680+105↑j
.text:00403C60                                         ; DATA XREF: ...
.text:00403C60                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403785 default case, cases 1-6,14-31,64
.text:00403C65                 jz      loc_403D90
.text:00403C6B                 mov     [esp+4Ch+var_28], 1
.text:00403C73                 mov     esi, ds:__mb_cur_max
.text:00403C79                 movzx   edx, bl
.text:00403C7C                 cmp     dword ptr [esi], 1
.text:00403C7F                 jz      loc_403D74
.text:00403C85                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403C8D                 mov     [esp+4Ch+C], edx ; C
.text:00403C90                 call    _isctype
.text:00403C95
.text:00403C95 loc_403C95:                             ; CODE XREF: sub_403680+705↓j
.text:00403C95                 test    eax, eax
.text:00403C97                 setnz   [esp+4Ch+var_29]
.text:00403C9C
.text:00403C9C loc_403C9C:                             ; CODE XREF: sub_403680+7A5↓j
.text:00403C9C                 cmp     [esp+4Ch+var_21], 0
.text:00403CA1                 lea     eax, [ebp+1]
.text:00403CA4                 jz      loc_403A40
.text:00403CAA                 cmp     [esp+4Ch+var_29], 0
.text:00403CAF                 jnz     def_403B82      ; jumptable 00403785 cases 37,43-58,65-90,93,95,97-122
.text:00403CAF                                         ; jumptable 00403B82 default case, cases 34-38,42-44,46,48-59
.text:00403CB5
.text:00403CB5 loc_403CB5:                             ; CODE XREF: sub_403680+7AB↓j
.text:00403CB5                 mov     eax, [esp+4Ch+var_28]
.text:00403CB9                 lea     edx, [eax+ebp]
.text:00403CBC                 lea     esi, [esi+0]
.text:00403CC0
.text:00403CC0 loc_403CC0:                             ; CODE XREF: sub_403680+6EF↓j
.text:00403CC0                 cmp     [esp+4Ch+var_21], 0
.text:00403CC5                 jz      short loc_403D40
.text:00403CC7                 cmp     [esp+4Ch+var_29], 0
.text:00403CCC                 jnz     short loc_403D40
.text:00403CCE                 mov     edi, [esp+4Ch+arg_4]
.text:00403CD2                 cmp     [esp+4Ch+var_34], edi
.text:00403CD6                 jnb     short loc_403CE4
.text:00403CD8                 mov     esi, [esp+4Ch+arg_0]
.text:00403CDC                 mov     eax, [esp+4Ch+var_34]
.text:00403CE0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403CE4
.text:00403CE4 loc_403CE4:                             ; CODE XREF: sub_403680+656↑j
.text:00403CE4                 inc     [esp+4Ch+var_34]
.text:00403CE8                 mov     ecx, [esp+4Ch+arg_4]
.text:00403CEC                 cmp     [esp+4Ch+var_34], ecx
.text:00403CF0                 jnb     short loc_403D05
.text:00403CF2                 mov     cl, bl
.text:00403CF4                 mov     esi, [esp+4Ch+arg_0]
.text:00403CF8                 mov     edi, [esp+4Ch+var_34]
.text:00403CFC                 shr     cl, 6
.text:00403CFF                 add     cl, 30h ; '0'
.text:00403D02                 mov     [edi+esi], cl
.text:00403D05
.text:00403D05 loc_403D05:                             ; CODE XREF: sub_403680+670↑j
.text:00403D05                 inc     [esp+4Ch+var_34]
.text:00403D09                 mov     edi, [esp+4Ch+arg_4]
.text:00403D0D                 cmp     [esp+4Ch+var_34], edi
.text:00403D11                 jnb     short loc_403D29
.text:00403D13                 mov     cl, bl
.text:00403D15                 mov     esi, [esp+4Ch+arg_0]
.text:00403D19                 shr     cl, 3
.text:00403D1C                 mov     edi, [esp+4Ch+var_34]
.text:00403D20                 and     cl, 7
.text:00403D23                 add     cl, 30h ; '0'
.text:00403D26                 mov     [edi+esi], cl
.text:00403D29
.text:00403D29 loc_403D29:                             ; CODE XREF: sub_403680+691↑j
.text:00403D29                 inc     [esp+4Ch+var_34]
.text:00403D2D                 and     bl, 7
.text:00403D30                 add     bl, 30h ; '0'
.text:00403D33                 lea     esi, [esi+0]
.text:00403D39                 lea     edi, [edi+0]
.text:00403D40
.text:00403D40 loc_403D40:                             ; CODE XREF: sub_403680+645↑j
.text:00403D40                                         ; sub_403680+64C↑j
.text:00403D40                 lea     eax, [ebp+1]
.text:00403D43                 cmp     edx, eax
.text:00403D45                 jbe     loc_403A40
.text:00403D4B                 mov     ebp, [esp+4Ch+arg_4]
.text:00403D4F                 cmp     [esp+4Ch+var_34], ebp
.text:00403D53                 jnb     short loc_403D60
.text:00403D55                 mov     ecx, [esp+4Ch+arg_0]
.text:00403D59                 mov     edi, [esp+4Ch+var_34]
.text:00403D5D                 mov     [edi+ecx], bl
.text:00403D60
.text:00403D60 loc_403D60:                             ; CODE XREF: sub_403680+6D3↑j
.text:00403D60                 inc     [esp+4Ch+var_34]
.text:00403D64                 mov     ebp, eax
.text:00403D66                 mov     eax, [esp+4Ch+Str]
.text:00403D6A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00403D6F                 jmp     loc_403CC0
.text:00403D74 ; ---------------------------------------------------------------------------
.text:00403D74
.text:00403D74 loc_403D74:                             ; CODE XREF: sub_403680+5FF↑j
.text:00403D74                 mov     ecx, ds:_pctype
.text:00403D7A                 mov     edi, [ecx]
.text:00403D7C                 movzx   eax, word ptr [edi+edx*2]
.text:00403D80                 and     eax, 157h
.text:00403D85                 jmp     loc_403C95
.text:00403D85 ; ---------------------------------------------------------------------------
.text:00403D8A                 align 10h
.text:00403D90
.text:00403D90 loc_403D90:                             ; CODE XREF: sub_403680+5E5↑j
.text:00403D90                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403D95                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00403D9D                 mov     [esp+4Ch+var_28], 0
.text:00403DA5                 mov     [esp+4Ch+var_29], 1
.text:00403DAA                 jz      loc_403F3C
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: sub_403680+8CC↓j
.text:00403DB0                 mov     ecx, [esp+4Ch+arg_C]
.text:00403DB4                 lea     edx, [esp+4Ch+var_18]
.text:00403DB8                 mov     edi, [esp+4Ch+Str]
.text:00403DBC                 mov     [esp+4Ch+State], edx ; State
.text:00403DC0                 lea     esi, [esp+4Ch+var_18._State]
.text:00403DC4                 sub     ecx, ebp
.text:00403DC6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00403DCA                 add     edi, ebp
.text:00403DCC                 mov     [esp+4Ch+var_30], edi
.text:00403DD0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403DD4                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403DD7                 call    mbrtowc
.text:00403DDC                 test    eax, eax
.text:00403DDE                 mov     edi, eax
.text:00403DE0                 jz      short loc_403E20
.text:00403DE2                 cmp     eax, 0FFFFFFFFh
.text:00403DE5                 jz      loc_403F32
.text:00403DEB                 cmp     eax, 0FFFFFFFEh
.text:00403DEE                 jz      loc_403EF2
.text:00403DF4                 cmp     [esp+4Ch+arg_10], 1
.text:00403DF9                 jz      short loc_403E30
.text:00403DFB
.text:00403DFB loc_403DFB:                             ; CODE XREF: sub_403680+7B9↓j
.text:00403DFB                                         ; sub_403680+86D↓j
.text:00403DFB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403E00                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403E08                 mov     [esp+4Ch+C], ecx ; C
.text:00403E0B                 call    iswctype
.text:00403E10                 test    eax, eax
.text:00403E12                 jnz     short loc_403E19
.text:00403E14                 mov     [esp+4Ch+var_29], 0
.text:00403E19
.text:00403E19 loc_403E19:                             ; CODE XREF: sub_403680+792↑j
.text:00403E19                 mov     [esp+4Ch+var_28], edi
.text:00403E1D                 lea     esi, [esi+0]
.text:00403E20
.text:00403E20 loc_403E20:                             ; CODE XREF: sub_403680+760↑j
.text:00403E20                                         ; sub_403680+87B↓j ...
.text:00403E20                 cmp     [esp+4Ch+var_28], 1
.text:00403E25                 jbe     loc_403C9C
.text:00403E2B                 jmp     loc_403CB5
.text:00403E30 ; ---------------------------------------------------------------------------
.text:00403E30
.text:00403E30 loc_403E30:                             ; CODE XREF: sub_403680+779↑j
.text:00403E30                 cmp     [esp+4Ch+arg_10], eax
.text:00403E34                 mov     edx, 1
.text:00403E39                 jnb     short loc_403DFB
.text:00403E3B
.text:00403E3B loc_403E3B:                             ; CODE XREF: sub_403680+867↓j
.text:00403E3B                 mov     ecx, [esp+4Ch+Str]
.text:00403E3F                 lea     esi, [edx+ebp]
.text:00403E42                 movsx   eax, byte ptr [esi+ecx]
.text:00403E46                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403E49                 cmp     eax, 21h
.text:00403E4C                 ja      def_403E52      ; jumptable 00403E52 default case, cases 93,95,97-123
.text:00403E52                 jmp     ds:jpt_403E52[eax*4] ; switch jump
.text:00403E52 ; ---------------------------------------------------------------------------
.text:00403E59                 align 4
.text:00403E5C jpt_403E52      dd offset loc_403A8B    ; DATA XREF: sub_403680+7D2↑r
.text:00403E5C                 dd offset loc_403A8B    ; jump table for switch statement
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset loc_403A8B
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset loc_403A8B
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset def_403E52
.text:00403E5C                 dd offset loc_403A8B
.text:00403EE4 ; ---------------------------------------------------------------------------
.text:00403EE4
.text:00403EE4 def_403E52:                             ; CODE XREF: sub_403680+7CC↑j
.text:00403EE4                                         ; sub_403680+7D2↑j
.text:00403EE4                                         ; DATA XREF: ...
.text:00403EE4                 inc     edx             ; jumptable 00403E52 default case, cases 93,95,97-123
.text:00403EE5                 cmp     edx, edi
.text:00403EE7                 jb      loc_403E3B
.text:00403EED                 jmp     loc_403DFB
.text:00403EF2 ; ---------------------------------------------------------------------------
.text:00403EF2
.text:00403EF2 loc_403EF2:                             ; CODE XREF: sub_403680+76E↑j
.text:00403EF2                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403EF6                 mov     [esp+4Ch+var_29], 0
.text:00403EFB                 jnb     loc_403E20
.text:00403F01                 mov     eax, [esp+4Ch+var_30]
.text:00403F05                 cmp     byte ptr [eax], 0
.text:00403F08                 jz      loc_403E20
.text:00403F0E
.text:00403F0E loc_403F0E:                             ; CODE XREF: sub_403680+8AB↓j
.text:00403F0E                 inc     [esp+4Ch+var_28]
.text:00403F12                 mov     esi, [esp+4Ch+var_28]
.text:00403F16                 lea     eax, [esi+ebp]
.text:00403F19                 cmp     eax, [esp+4Ch+arg_C]
.text:00403F1D                 jnb     loc_403E20
.text:00403F23                 mov     edi, [esp+4Ch+Str]
.text:00403F27                 cmp     byte ptr [eax+edi], 0
.text:00403F2B                 jnz     short loc_403F0E
.text:00403F2D                 jmp     loc_403E20
.text:00403F32 ; ---------------------------------------------------------------------------
.text:00403F32
.text:00403F32 loc_403F32:                             ; CODE XREF: sub_403680+765↑j
.text:00403F32                 mov     [esp+4Ch+var_29], 0
.text:00403F37                 jmp     loc_403E20
.text:00403F3C ; ---------------------------------------------------------------------------
.text:00403F3C
.text:00403F3C loc_403F3C:                             ; CODE XREF: sub_403680+72A↑j
.text:00403F3C                 mov     edx, [esp+4Ch+Str]
.text:00403F40                 mov     [esp+4Ch+C], edx ; Str
.text:00403F43                 call    strlen
.text:00403F48                 mov     [esp+4Ch+arg_C], eax
.text:00403F4C                 jmp     loc_403DB0
.text:00403F51 ; ---------------------------------------------------------------------------
.text:00403F51
.text:00403F51 loc_403F51:                             ; CODE XREF: sub_403680+105↑j
.text:00403F51                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403F51                 mov     dl, bl          ; jumptable 00403785 case 92
.text:00403F53                 jmp     loc_403A84
.text:00403F58 ; ---------------------------------------------------------------------------
.text:00403F58
.text:00403F58 loc_403F58:                             ; CODE XREF: sub_403680+105↑j
.text:00403F58                                         ; sub_403680+902↓j
.text:00403F58                                         ; DATA XREF: ...
.text:00403F58                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403785 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403F5D                 jnz     def_403B82      ; jumptable 00403785 cases 37,43-58,65-90,93,95,97-122
.text:00403F5D                                         ; jumptable 00403B82 default case, cases 34-38,42-44,46,48-59
.text:00403F63                 jmp     loc_403A8B      ; jumptable 00403E52 cases 91,92,94,96,124
.text:00403F68 ; ---------------------------------------------------------------------------
.text:00403F68
.text:00403F68 loc_403F68:                             ; CODE XREF: sub_403680+105↑j
.text:00403F68                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403F68                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403785 cases 123,125
.text:00403F6D                 jz      short loc_403F84
.text:00403F6F                 cmp     [esp+4Ch+arg_C], 1
.text:00403F74
.text:00403F74 loc_403F74:                             ; CODE XREF: sub_403680+90C↓j
.text:00403F74                 jnz     def_403B82      ; jumptable 00403785 cases 37,43-58,65-90,93,95,97-122
.text:00403F74                                         ; jumptable 00403B82 default case, cases 34-38,42-44,46,48-59
.text:00403F7A
.text:00403F7A loc_403F7A:                             ; CODE XREF: sub_403680+105↑j
.text:00403F7A                                         ; DATA XREF: sub_403680:jpt_403785↑o
.text:00403F7A                 test    ebp, ebp        ; jumptable 00403785 cases 35,126
.text:00403F7C                 jnz     def_403B82      ; jumptable 00403785 cases 37,43-58,65-90,93,95,97-122
.text:00403F7C                                         ; jumptable 00403B82 default case, cases 34-38,42-44,46,48-59
.text:00403F82                 jmp     short loc_403F58 ; jumptable 00403785 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403F84 ; ---------------------------------------------------------------------------
.text:00403F84
.text:00403F84 loc_403F84:                             ; CODE XREF: sub_403680+8ED↑j
.text:00403F84                 mov     esi, [esp+4Ch+Str]
.text:00403F88                 cmp     byte ptr [esi+1], 0
.text:00403F8C                 jmp     short loc_403F74
.text:00403F8E ; ---------------------------------------------------------------------------
.text:00403F8E
.text:00403F8E loc_403F8E:                             ; CODE XREF: sub_403680:loc_40371F↑j
.text:00403F8E                 test    ebp, ebp
.text:00403F90                 jnz     short loc_403F9D
.text:00403F92                 cmp     [esp+4Ch+arg_10], 1
.text:00403F97                 jz      loc_403A8B      ; jumptable 00403E52 cases 91,92,94,96,124
.text:00403F9D
.text:00403F9D loc_403F9D:                             ; CODE XREF: sub_403680+910↑j
.text:00403F9D                 mov     esi, [esp+4Ch+var_1C]
.text:00403FA1                 test    esi, esi
.text:00403FA3                 jz      short loc_403FD8
.text:00403FA5                 mov     edi, [esp+4Ch+var_1C]
.text:00403FA9                 movzx   eax, byte ptr [edi]
.text:00403FAC                 test    al, al
.text:00403FAE                 jz      short loc_403FD8
.text:00403FB0
.text:00403FB0 loc_403FB0:                             ; CODE XREF: sub_403680+956↓j
.text:00403FB0                 mov     ebp, [esp+4Ch+arg_4]
.text:00403FB4                 cmp     [esp+4Ch+var_34], ebp
.text:00403FB8                 jnb     short loc_403FC5
.text:00403FBA                 mov     ecx, [esp+4Ch+arg_0]
.text:00403FBE                 mov     ebx, [esp+4Ch+var_34]
.text:00403FC2                 mov     [ebx+ecx], al
.text:00403FC5
.text:00403FC5 loc_403FC5:                             ; CODE XREF: sub_403680+938↑j
.text:00403FC5                 inc     [esp+4Ch+var_1C]
.text:00403FC9                 inc     [esp+4Ch+var_34]
.text:00403FCD                 mov     edx, [esp+4Ch+var_1C]
.text:00403FD1                 movzx   eax, byte ptr [edx]
.text:00403FD4                 test    al, al
.text:00403FD6                 jnz     short loc_403FB0
.text:00403FD8
.text:00403FD8 loc_403FD8:                             ; CODE XREF: sub_403680+923↑j
.text:00403FD8                                         ; sub_403680+92E↑j
.text:00403FD8                 mov     eax, [esp+4Ch+arg_4]
.text:00403FDC                 cmp     [esp+4Ch+var_34], eax
.text:00403FE0                 jnb     short loc_403FEE
.text:00403FE2                 mov     edi, [esp+4Ch+arg_0]
.text:00403FE6                 mov     esi, [esp+4Ch+var_34]
.text:00403FEA                 mov     byte ptr [esi+edi], 0
.text:00403FEE
.text:00403FEE loc_403FEE:                             ; CODE XREF: sub_403680+960↑j
.text:00403FEE                 mov     eax, [esp+4Ch+var_34]
.text:00403FF2                 jmp     loc_403ABF
.text:00403FF7 ; ---------------------------------------------------------------------------
.text:00403FF7
.text:00403FF7 loc_403FF7:                             ; CODE XREF: sub_403680+95↑j
.text:00403FF7                 mov     ebx, [esp+4Ch+Str]
.text:00403FFB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404000                 jmp     loc_40371F
.text:00404005 ; ---------------------------------------------------------------------------
.text:00404005
.text:00404005 loc_404005:                             ; CODE XREF: sub_403680+3D↑j
.text:00404005                                         ; DATA XREF: sub_403680:jpt_4036BD↑o
.text:00404005                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004036BD case 2
.text:00404009                 cmp     [esp+4Ch+var_34], edx
.text:0040400D                 jnb     short loc_404016
.text:0040400F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404013                 mov     byte ptr [ecx], 27h ; '''
.text:00404016
.text:00404016 loc_404016:                             ; CODE XREF: sub_403680+98D↑j
.text:00404016                 mov     [esp+4Ch+var_34], 1
.text:0040401E                 mov     [esp+4Ch+var_1C], 40366Eh
.text:00404026                 jmp     loc_403706
.text:0040402B ; ---------------------------------------------------------------------------
.text:0040402B
.text:0040402B loc_40402B:                             ; CODE XREF: sub_403680+3D↑j
.text:0040402B                                         ; DATA XREF: sub_403680:jpt_4036BD↑o
.text:0040402B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004036BD case 4
.text:00404030                 jmp     def_4036BD      ; jumptable 004036BD default case, cases 0,1
.text:00404035 ; ---------------------------------------------------------------------------
.text:00404035
.text:00404035 loc_404035:                             ; CODE XREF: sub_403680+3D↑j
.text:00404035                                         ; DATA XREF: sub_403680:jpt_4036BD↑o
.text:00404035                 mov     [esp+4Ch+C], 403670h ; jumptable 004036BD cases 5,6
.text:0040403C                 call    ds:libintl_gettext
.text:00404042                 cmp     eax, 403670h
.text:00404047                 mov     edi, eax
.text:00404049                 jz      short loc_4040C0
.text:0040404B
.text:0040404B loc_40404B:                             ; CODE XREF: sub_403680+A45↓j
.text:0040404B                                         ; sub_403680+A4C↓j
.text:0040404B                 mov     [esp+4Ch+C], 40366Eh
.text:00404052                 call    ds:libintl_gettext
.text:00404058                 cmp     eax, 40366Eh
.text:0040405D                 mov     edx, eax
.text:0040405F                 jz      short loc_4040B2
.text:00404061
.text:00404061 loc_404061:                             ; CODE XREF: sub_403680+A37↓j
.text:00404061                                         ; sub_403680+A3E↓j
.text:00404061                 mov     [esp+4Ch+var_1C], edi
.text:00404065                 cmp     byte ptr [edi], 0
.text:00404068                 jz      short loc_404098
.text:0040406A
.text:0040406A loc_40406A:                             ; CODE XREF: sub_403680+A16↓j
.text:0040406A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040406E                 cmp     [esp+4Ch+var_34], ecx
.text:00404072                 jnb     short loc_404087
.text:00404074                 mov     ebp, [esp+4Ch+var_1C]
.text:00404078                 mov     edi, [esp+4Ch+arg_0]
.text:0040407C                 mov     esi, [esp+4Ch+var_34]
.text:00404080                 movzx   ebx, byte ptr [ebp+0]
.text:00404084                 mov     [esi+edi], bl
.text:00404087
.text:00404087 loc_404087:                             ; CODE XREF: sub_403680+9F2↑j
.text:00404087                 inc     [esp+4Ch+var_1C]
.text:0040408B                 inc     [esp+4Ch+var_34]
.text:0040408F                 mov     eax, [esp+4Ch+var_1C]
.text:00404093                 cmp     byte ptr [eax], 0
.text:00404096                 jnz     short loc_40406A
.text:00404098
.text:00404098 loc_404098:                             ; CODE XREF: sub_403680+9E8↑j
.text:00404098                 mov     [esp+4Ch+var_21], 1
.text:0040409D                 mov     [esp+4Ch+var_1C], edx
.text:004040A1                 mov     [esp+4Ch+C], edx ; Str
.text:004040A4                 call    strlen
.text:004040A9                 mov     [esp+4Ch+var_20], eax
.text:004040AD                 jmp     def_4036BD      ; jumptable 004036BD default case, cases 0,1
.text:004040B2 ; ---------------------------------------------------------------------------
.text:004040B2
.text:004040B2 loc_4040B2:                             ; CODE XREF: sub_403680+9DF↑j
.text:004040B2                 cmp     [esp+4Ch+arg_10], 6
.text:004040B7                 jnz     short loc_404061
.text:004040B9                 mov     edx, offset asc_40366C ; "\"'`"
.text:004040BE                 jmp     short loc_404061
.text:004040C0 ; ---------------------------------------------------------------------------
.text:004040C0
.text:004040C0 loc_4040C0:                             ; CODE XREF: sub_403680+9C9↑j
.text:004040C0                 cmp     [esp+4Ch+arg_10], 6
.text:004040C5                 jnz     short loc_40404B
.text:004040C7                 mov     edi, offset asc_40366C ; "\"'`"
.text:004040CC                 jmp     loc_40404B
.text:004040CC sub_403680      endp
.text:004040CC
.text:004040D1 ; ---------------------------------------------------------------------------
.text:004040D1                 jmp     short loc_4040E0
.text:004040D1 ; ---------------------------------------------------------------------------
.text:004040D3                 align 10h
.text:004040E0
.text:004040E0 loc_4040E0:                             ; CODE XREF: .text:004040D1↑j
.text:004040E0                 sub     esp, 0Ch
.text:004040E3                 mov     [esp+4], ebx
.text:004040E7                 mov     [esp+8], esi
.text:004040EB                 call    _errno
.text:004040F0                 mov     esi, [eax]
.text:004040F2                 mov     dword ptr [esp], 24h ; '$'
.text:004040F9                 call    sub_403360
.text:004040FE                 mov     edx, [esp+10h]
.text:00404102                 mov     ebx, eax
.text:00404104                 test    edx, edx
.text:00404106                 jz      short loc_404151
.text:00404108
.text:00404108 loc_404108:                             ; CODE XREF: .text:00404156↓j
.text:00404108                 mov     ecx, [edx]
.text:0040410A                 mov     [ebx], ecx
.text:0040410C                 mov     ecx, [edx+4]
.text:0040410F                 mov     [ebx+4], ecx
.text:00404112                 mov     ecx, [edx+8]
.text:00404115                 mov     [ebx+8], ecx
.text:00404118                 mov     ecx, [edx+0Ch]
.text:0040411B                 mov     [ebx+0Ch], ecx
.text:0040411E                 mov     ecx, [edx+10h]
.text:00404121                 mov     [ebx+10h], ecx
.text:00404124                 mov     ecx, [edx+14h]
.text:00404127                 mov     [ebx+14h], ecx
.text:0040412A                 mov     ecx, [edx+18h]
.text:0040412D                 mov     [ebx+18h], ecx
.text:00404130                 mov     ecx, [edx+1Ch]
.text:00404133                 mov     [ebx+1Ch], ecx
.text:00404136                 mov     ecx, [edx+20h]
.text:00404139                 mov     [ebx+20h], ecx
.text:0040413C                 call    _errno
.text:00404141                 mov     [eax], esi
.text:00404143                 mov     esi, [esp+8]
.text:00404147                 mov     eax, ebx
.text:00404149                 mov     ebx, [esp+4]
.text:0040414D                 add     esp, 0Ch
.text:00404150                 retn
.text:00404151 ; ---------------------------------------------------------------------------
.text:00404151
.text:00404151 loc_404151:                             ; CODE XREF: .text:00404106↑j
.text:00404151                 mov     edx, offset dword_408140
.text:00404156                 jmp     short loc_404108
.text:00404156 ; ---------------------------------------------------------------------------
.text:00404158                 align 10h
.text:00404160                 mov     eax, [esp+4]
.text:00404164                 test    eax, eax
.text:00404166                 jz      short loc_404170
.text:00404168
.text:00404168 loc_404168:                             ; CODE XREF: .text:00404175↓j
.text:00404168                 mov     eax, [eax]
.text:0040416A                 retn
.text:0040416A ; ---------------------------------------------------------------------------
.text:0040416B                 align 10h
.text:00404170
.text:00404170 loc_404170:                             ; CODE XREF: .text:00404166↑j
.text:00404170                 mov     eax, offset dword_408140
.text:00404175                 jmp     short loc_404168
.text:00404175 ; ---------------------------------------------------------------------------
.text:00404177                 align 10h
.text:00404180                 mov     edx, [esp+4]
.text:00404184                 test    edx, edx
.text:00404186                 jz      short loc_404190
.text:00404188
.text:00404188 loc_404188:                             ; CODE XREF: .text:00404195↓j
.text:00404188                 mov     ecx, [esp+8]
.text:0040418C                 mov     [edx], ecx
.text:0040418E                 retn
.text:0040418E ; ---------------------------------------------------------------------------
.text:0040418F                 align 10h
.text:00404190
.text:00404190 loc_404190:                             ; CODE XREF: .text:00404186↑j
.text:00404190                 mov     edx, offset dword_408140
.text:00404195                 jmp     short loc_404188
.text:00404195 ; ---------------------------------------------------------------------------
.text:00404197                 align 10h
.text:004041A0                 sub     esp, 8
.text:004041A3                 mov     eax, [esp+0Ch]
.text:004041A7                 movzx   ecx, byte ptr [esp+10h]
.text:004041AC                 mov     [esp], ebx
.text:004041AF                 mov     ebx, [esp+14h]
.text:004041B3                 mov     [esp+4], esi
.text:004041B7                 mov     dl, cl
.text:004041B9                 shr     dl, 5
.text:004041BC                 movzx   edx, dl
.text:004041BF                 shl     edx, 2
.text:004041C2                 test    eax, eax
.text:004041C4                 lea     esi, [edx+eax+4]
.text:004041C8                 jz      short loc_4041F0
.text:004041CA
.text:004041CA loc_4041CA:                             ; CODE XREF: .text:004041F6↓j
.text:004041CA                 mov     edx, [esi]
.text:004041CC                 and     ecx, 1Fh
.text:004041CF                 and     ebx, 1
.text:004041D2                 mov     eax, edx
.text:004041D4                 shr     eax, cl
.text:004041D6                 and     eax, 1
.text:004041D9                 xor     ebx, eax
.text:004041DB                 shl     ebx, cl
.text:004041DD                 xor     edx, ebx
.text:004041DF                 mov     [esi], edx
.text:004041E1                 mov     ebx, [esp]
.text:004041E4                 mov     esi, [esp+4]
.text:004041E8                 add     esp, 8
.text:004041EB                 retn
.text:004041EB ; ---------------------------------------------------------------------------
.text:004041EC                 align 10h
.text:004041F0
.text:004041F0 loc_4041F0:                             ; CODE XREF: .text:004041C8↑j
.text:004041F0                 lea     esi, dword_408144[edx]
.text:004041F6                 jmp     short loc_4041CA
.text:004041F6 ; ---------------------------------------------------------------------------
.text:004041F8                 align 10h
.text:00404200                 sub     esp, 2Ch
.text:00404203                 mov     [esp+24h], ebx
.text:00404207                 mov     ebx, [esp+40h]
.text:0040420B                 mov     [esp+28h], esi
.text:0040420F                 test    ebx, ebx
.text:00404211                 jz      short loc_404260
.text:00404213
.text:00404213 loc_404213:                             ; CODE XREF: .text:00404265↓j
.text:00404213                 call    _errno
.text:00404218                 mov     esi, [eax]
.text:0040421A                 mov     [esp+14h], ebx
.text:0040421E                 mov     edx, [ebx]
.text:00404220                 mov     ecx, [esp+38h]
.text:00404224                 mov     ebx, [esp+3Ch]
.text:00404228                 mov     [esp+10h], edx
.text:0040422C                 mov     edx, [esp+34h]
.text:00404230                 mov     [esp+0Ch], ebx
.text:00404234                 mov     [esp+8], ecx
.text:00404238                 mov     [esp+4], edx
.text:0040423C                 mov     edx, [esp+30h]
.text:00404240                 mov     [esp], edx
.text:00404243                 call    sub_403680
.text:00404248                 mov     ebx, eax
.text:0040424A                 call    _errno
.text:0040424F                 mov     [eax], esi
.text:00404251                 mov     esi, [esp+28h]
.text:00404255                 mov     eax, ebx
.text:00404257                 mov     ebx, [esp+24h]
.text:0040425B                 add     esp, 2Ch
.text:0040425E                 retn
.text:0040425E ; ---------------------------------------------------------------------------
.text:0040425F                 align 10h
.text:00404260
.text:00404260 loc_404260:                             ; CODE XREF: .text:00404211↑j
.text:00404260                 mov     ebx, offset dword_408140
.text:00404265                 jmp     short loc_404213
.text:00404265 ; ---------------------------------------------------------------------------
.text:00404267                 align 10h
.text:00404270                 push    ebp
.text:00404271                 push    edi
.text:00404272                 push    esi
.text:00404273                 push    ebx
.text:00404274                 sub     esp, 2Ch
.text:00404277                 mov     ebp, [esp+48h]
.text:0040427B                 call    _errno
.text:00404280                 mov     edx, [eax]
.text:00404282                 test    ebp, ebp
.text:00404284                 mov     ebx, ebp
.text:00404286                 mov     [esp+28h], edx
.text:0040428A                 jz      loc_404340
.text:00404290
.text:00404290 loc_404290:                             ; CODE XREF: .text:00404345↓j
.text:00404290                 call    _errno
.text:00404295                 mov     edi, [eax]
.text:00404297                 mov     esi, ebp
.text:00404299                 mov     [esp+14h], ebx
.text:0040429D                 mov     ecx, [ebx]
.text:0040429F                 mov     dword ptr [esp], 0
.text:004042A6                 mov     edx, [esp+44h]
.text:004042AA                 mov     dword ptr [esp+4], 0
.text:004042B2                 mov     eax, [esp+40h]
.text:004042B6                 mov     [esp+10h], ecx
.text:004042BA                 mov     [esp+0Ch], edx
.text:004042BE                 mov     [esp+8], eax
.text:004042C2                 call    sub_403680
.text:004042C7                 mov     ebx, eax
.text:004042C9                 call    _errno
.text:004042CE                 mov     [eax], edi
.text:004042D0                 lea     edi, [ebx+1]
.text:004042D3                 mov     [esp], edi
.text:004042D6                 call    sub_403360
.text:004042DB                 mov     [esp+24h], eax
.text:004042DF                 test    ebp, ebp
.text:004042E1                 jz      short loc_404332
.text:004042E3
.text:004042E3 loc_4042E3:                             ; CODE XREF: .text:00404337↓j
.text:004042E3                 call    _errno
.text:004042E8                 mov     ebp, [eax]
.text:004042EA                 mov     [esp+14h], esi
.text:004042EE                 mov     ecx, [esi]
.text:004042F0                 mov     [esp+4], edi
.text:004042F4                 mov     edx, [esp+44h]
.text:004042F8                 mov     esi, [esp+24h]
.text:004042FC                 mov     [esp+10h], ecx
.text:00404300                 mov     eax, [esp+40h]
.text:00404304                 mov     [esp+0Ch], edx
.text:00404308                 mov     [esp], esi
.text:0040430B                 mov     [esp+8], eax
.text:0040430F                 call    sub_403680
.text:00404314                 call    _errno
.text:00404319                 mov     [eax], ebp
.text:0040431B                 call    _errno
.text:00404320                 mov     ebx, [esp+28h]
.text:00404324                 mov     [eax], ebx
.text:00404326                 mov     eax, [esp+24h]
.text:0040432A                 add     esp, 2Ch
.text:0040432D                 pop     ebx
.text:0040432E                 pop     esi
.text:0040432F                 pop     edi
.text:00404330                 pop     ebp
.text:00404331                 retn
.text:00404332 ; ---------------------------------------------------------------------------
.text:00404332
.text:00404332 loc_404332:                             ; CODE XREF: .text:004042E1↑j
.text:00404332                 mov     esi, offset dword_408140
.text:00404337                 jmp     short loc_4042E3
.text:00404337 ; ---------------------------------------------------------------------------
.text:00404339                 align 10h
.text:00404340
.text:00404340 loc_404340:                             ; CODE XREF: .text:0040428A↑j
.text:00404340                 mov     ebx, offset dword_408140
.text:00404345                 jmp     loc_404290
.text:00404345 ; ---------------------------------------------------------------------------
.text:0040434A                 align 10h
.text:00404350                 sub     esp, 1Ch
.text:00404353                 mov     edx, [esp+24h]
.text:00404357                 mov     dword ptr [esp+0Ch], offset dword_408140
.text:0040435F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404367                 mov     [esp+4], edx
.text:0040436B                 mov     edx, [esp+20h]
.text:0040436F                 mov     [esp], edx
.text:00404372                 call    sub_4047C0
.text:00404377                 add     esp, 1Ch
.text:0040437A                 retn
.text:0040437A ; ---------------------------------------------------------------------------
.text:0040437B                 align 10h
.text:00404380                 sub     esp, 1Ch
.text:00404383                 mov     edx, [esp+20h]
.text:00404387                 mov     dword ptr [esp+0Ch], offset dword_408140
.text:0040438F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404397                 mov     [esp+4], edx
.text:0040439B                 mov     dword ptr [esp], 0
.text:004043A2                 call    sub_4047C0
.text:004043A7                 add     esp, 1Ch
.text:004043AA                 retn
.text:004043AA ; ---------------------------------------------------------------------------
.text:004043AB                 align 10h
.text:004043B0
.text:004043B0 ; =============== S U B R O U T I N E =======================================
.text:004043B0
.text:004043B0
.text:004043B0 ; int __cdecl sub_4043B0(int, int, char *)
.text:004043B0 sub_4043B0      proc near               ; CODE XREF: .text:00402EDA↑p
.text:004043B0                                         ; sub_402EF0+1A↑p
.text:004043B0
.text:004043B0 var_BC          = dword ptr -0BCh
.text:004043B0 var_B8          = dword ptr -0B8h
.text:004043B0 var_B4          = dword ptr -0B4h
.text:004043B0 var_B0          = dword ptr -0B0h
.text:004043B0 var_AC          = dword ptr -0ACh
.text:004043B0 var_A8          = dword ptr -0A8h
.text:004043B0 var_A4          = dword ptr -0A4h
.text:004043B0 var_A0          = dword ptr -0A0h
.text:004043B0 var_9C          = dword ptr -9Ch
.text:004043B0 var_98          = dword ptr -98h
.text:004043B0 var_94          = dword ptr -94h
.text:004043B0 var_90          = dword ptr -90h
.text:004043B0 var_8C          = dword ptr -8Ch
.text:004043B0 var_7C          = dword ptr -7Ch
.text:004043B0 var_78          = dword ptr -78h
.text:004043B0 var_74          = dword ptr -74h
.text:004043B0 var_70          = dword ptr -70h
.text:004043B0 var_6C          = dword ptr -6Ch
.text:004043B0 var_68          = dword ptr -68h
.text:004043B0 var_64          = dword ptr -64h
.text:004043B0 var_60          = dword ptr -60h
.text:004043B0 var_5C          = dword ptr -5Ch
.text:004043B0 var_4C          = dword ptr -4Ch
.text:004043B0 var_48          = dword ptr -48h
.text:004043B0 var_44          = dword ptr -44h
.text:004043B0 var_40          = dword ptr -40h
.text:004043B0 var_3C          = dword ptr -3Ch
.text:004043B0 var_38          = dword ptr -38h
.text:004043B0 var_34          = dword ptr -34h
.text:004043B0 var_30          = dword ptr -30h
.text:004043B0 var_2C          = dword ptr -2Ch
.text:004043B0 arg_0           = dword ptr  4
.text:004043B0 arg_4           = dword ptr  8
.text:004043B0 arg_8           = dword ptr  0Ch
.text:004043B0
.text:004043B0                 push    ebp
.text:004043B1                 xor     eax, eax
.text:004043B3                 mov     ecx, 8
.text:004043B8                 push    edi
.text:004043B9                 push    esi
.text:004043BA                 push    ebx
.text:004043BB                 sub     esp, 0ACh
.text:004043C1                 mov     ebp, [esp+0BCh+arg_4]
.text:004043C8                 cld
.text:004043C9                 lea     edi, [esp+0BCh+var_A8]
.text:004043CD                 mov     [esp+0BCh+var_AC], ebp
.text:004043D1                 rep stosd
.text:004043D3                 mov     eax, [esp+0BCh+var_8C]
.text:004043D7                 mov     edi, [esp+0BCh+var_AC]
.text:004043DB                 mov     esi, [esp+0BCh+var_A8]
.text:004043DF                 mov     [esp+0BCh+var_5C], eax
.text:004043E3                 mov     ebp, [esp+0BCh+var_A4]
.text:004043E7                 mov     eax, [esp+0BCh+var_AC]
.text:004043EB                 mov     [esp+0BCh+var_7C], edi
.text:004043EF                 mov     ecx, [esp+0BCh+var_94]
.text:004043F3                 mov     edi, [esp+0BCh+var_A0]
.text:004043F7                 mov     [esp+0BCh+var_78], esi
.text:004043FB                 mov     edx, [esp+0BCh+var_90]
.text:004043FF                 mov     esi, [esp+0BCh+var_9C]
.text:00404403                 mov     [esp+0BCh+var_4C], eax
.text:00404407                 mov     ebx, [esp+0BCh+var_98]
.text:0040440B                 mov     eax, [esp+0BCh+var_A8]
.text:0040440F                 mov     [esp+0BCh+var_74], ebp
.text:00404413                 mov     [esp+0BCh+var_70], edi
.text:00404417                 mov     [esp+0BCh+var_6C], esi
.text:0040441B                 mov     [esp+0BCh+var_68], ebx
.text:0040441F                 mov     [esp+0BCh+var_64], ecx
.text:00404423                 mov     [esp+0BCh+var_60], edx
.text:00404427                 mov     [esp+0BCh+var_48], eax
.text:0040442B                 mov     [esp+0BCh+var_44], ebp
.text:0040442F                 mov     [esp+0BCh+var_40], edi
.text:00404433                 mov     [esp+0BCh+var_3C], esi
.text:0040443A                 mov     [esp+0BCh+var_38], ebx
.text:00404441                 mov     ebx, [esp+0BCh+var_8C]
.text:00404445                 mov     [esp+0BCh+var_30], edx
.text:0040444C                 mov     edx, [esp+0BCh+arg_8]
.text:00404453                 mov     [esp+0BCh+var_34], ecx
.text:0040445A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040445E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00404462                 mov     edx, [esp+0BCh+arg_0]
.text:00404469                 mov     [esp+0BCh+var_2C], ebx
.text:00404470                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00404474                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040447C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040447F                 call    sub_4047C0
.text:00404484                 add     esp, 0ACh
.text:0040448A                 pop     ebx
.text:0040448B                 pop     esi
.text:0040448C                 pop     edi
.text:0040448D                 pop     ebp
.text:0040448E                 retn
.text:0040448E sub_4043B0      endp
.text:0040448E
.text:0040448E ; ---------------------------------------------------------------------------
.text:0040448F                 align 10h
.text:00404490                 push    ebp
.text:00404491                 xor     eax, eax
.text:00404493                 mov     ecx, 8
.text:00404498                 push    edi
.text:00404499                 push    esi
.text:0040449A                 push    ebx
.text:0040449B                 sub     esp, 0ACh
.text:004044A1                 mov     edx, [esp+0C4h]
.text:004044A8                 cld
.text:004044A9                 lea     edi, [esp+14h]
.text:004044AD                 mov     [esp+10h], edx
.text:004044B1                 rep stosd
.text:004044B3                 mov     eax, [esp+30h]
.text:004044B7                 mov     ebp, [esp+10h]
.text:004044BB                 mov     edi, [esp+14h]
.text:004044BF                 mov     [esp+60h], eax
.text:004044C3                 mov     esi, [esp+20h]
.text:004044C7                 mov     eax, [esp+10h]
.text:004044CB                 mov     [esp+40h], ebp
.text:004044CF                 mov     ecx, [esp+28h]
.text:004044D3                 mov     ebp, [esp+18h]
.text:004044D7                 mov     [esp+44h], edi
.text:004044DB                 mov     edx, [esp+2Ch]
.text:004044DF                 mov     edi, [esp+1Ch]
.text:004044E3                 mov     [esp+70h], eax
.text:004044E7                 mov     ebx, [esp+24h]
.text:004044EB                 mov     eax, [esp+14h]
.text:004044EF                 mov     [esp+48h], ebp
.text:004044F3                 mov     [esp+4Ch], edi
.text:004044F7                 mov     [esp+50h], esi
.text:004044FB                 mov     [esp+54h], ebx
.text:004044FF                 mov     [esp+58h], ecx
.text:00404503                 mov     [esp+5Ch], edx
.text:00404507                 mov     [esp+74h], eax
.text:0040450B                 mov     [esp+78h], ebp
.text:0040450F                 mov     [esp+7Ch], edi
.text:00404513                 mov     [esp+80h], esi
.text:0040451A                 mov     [esp+84h], ebx
.text:00404521                 mov     esi, [esp+30h]
.text:00404525                 lea     ebx, [esp+70h]
.text:00404529                 mov     [esp+8Ch], edx
.text:00404530                 mov     edx, [esp+0C8h]
.text:00404537                 mov     [esp+88h], ecx
.text:0040453E                 mov     ecx, [esp+0CCh]
.text:00404545                 mov     [esp+4], edx
.text:00404549                 mov     edx, [esp+0C0h]
.text:00404550                 mov     [esp+90h], esi
.text:00404557                 mov     [esp+0Ch], ebx
.text:0040455B                 mov     [esp+8], ecx
.text:0040455F                 mov     [esp], edx
.text:00404562                 call    sub_4047C0
.text:00404567                 add     esp, 0ACh
.text:0040456D                 pop     ebx
.text:0040456E                 pop     esi
.text:0040456F                 pop     edi
.text:00404570                 pop     ebp
.text:00404571                 retn
.text:00404571 ; ---------------------------------------------------------------------------
.text:00404572                 align 10h
.text:00404580                 push    ebp
.text:00404581                 xor     eax, eax
.text:00404583                 mov     ecx, 8
.text:00404588                 push    edi
.text:00404589                 push    esi
.text:0040458A                 push    ebx
.text:0040458B                 sub     esp, 0ACh
.text:00404591                 mov     edi, [esp+0C0h]
.text:00404598                 cld
.text:00404599                 mov     [esp+10h], edi
.text:0040459D                 lea     edi, [esp+14h]
.text:004045A1                 rep stosd
.text:004045A3                 mov     eax, [esp+30h]
.text:004045A7                 mov     esi, [esp+10h]
.text:004045AB                 mov     ebx, [esp+14h]
.text:004045AF                 mov     [esp+60h], eax
.text:004045B3                 mov     ebp, [esp+18h]
.text:004045B7                 mov     eax, [esp+10h]
.text:004045BB                 mov     [esp+40h], esi
.text:004045BF                 mov     edi, [esp+1Ch]
.text:004045C3                 mov     esi, [esp+20h]
.text:004045C7                 mov     [esp+44h], ebx
.text:004045CB                 mov     ecx, [esp+28h]
.text:004045CF                 mov     edx, [esp+2Ch]
.text:004045D3                 mov     [esp+70h], eax
.text:004045D7                 mov     ebx, [esp+24h]
.text:004045DB                 mov     eax, [esp+14h]
.text:004045DF                 mov     [esp+48h], ebp
.text:004045E3                 mov     [esp+4Ch], edi
.text:004045E7                 mov     [esp+50h], esi
.text:004045EB                 mov     [esp+54h], ebx
.text:004045EF                 mov     [esp+58h], ecx
.text:004045F3                 mov     [esp+5Ch], edx
.text:004045F7                 mov     [esp+74h], eax
.text:004045FB                 mov     [esp+78h], ebp
.text:004045FF                 mov     [esp+7Ch], edi
.text:00404603                 mov     [esp+80h], esi
.text:0040460A                 mov     [esp+84h], ebx
.text:00404611                 mov     [esp+8Ch], edx
.text:00404618                 lea     edx, [esp+70h]
.text:0040461C                 mov     [esp+88h], ecx
.text:00404623                 mov     ecx, [esp+30h]
.text:00404627                 mov     [esp+0Ch], edx
.text:0040462B                 mov     edx, [esp+0C4h]
.text:00404632                 mov     [esp+90h], ecx
.text:00404639                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404641                 mov     [esp+4], edx
.text:00404645                 mov     dword ptr [esp], 0
.text:0040464C                 call    sub_4047C0
.text:00404651                 add     esp, 0ACh
.text:00404657                 pop     ebx
.text:00404658                 pop     esi
.text:00404659                 pop     edi
.text:0040465A                 pop     ebp
.text:0040465B                 retn
.text:0040465B ; ---------------------------------------------------------------------------
.text:0040465C                 align 10h
.text:00404660                 push    edi
.text:00404661                 push    esi
.text:00404662                 push    ebx
.text:00404663                 sub     esp, 40h
.text:00404666                 mov     edx, ds:dword_40814C
.text:0040466C                 mov     ebx, ds:dword_408140
.text:00404672                 mov     esi, ds:dword_408148
.text:00404678                 mov     edi, ds:dword_408144
.text:0040467E                 mov     [esp+1Ch], edx
.text:00404682                 mov     ecx, ds:dword_408150
.text:00404688                 mov     edx, ds:dword_408160
.text:0040468E                 mov     [esp+10h], ebx
.text:00404692                 mov     ebx, ds:dword_408154
.text:00404698                 mov     [esp+30h], edx
.text:0040469C                 movzx   edx, byte ptr [esp+54h]
.text:004046A1                 mov     [esp+18h], esi
.text:004046A5                 mov     esi, ds:dword_40815C
.text:004046AB                 mov     [esp+14h], edi
.text:004046AF                 mov     edi, ds:dword_408158
.text:004046B5                 mov     [esp+20h], ecx
.text:004046B9                 mov     cl, dl
.text:004046BB                 shr     cl, 5
.text:004046BE                 mov     [esp+24h], ebx
.text:004046C2                 movzx   ebx, cl
.text:004046C5                 mov     [esp+2Ch], esi
.text:004046C9                 lea     esi, [esp+10h]
.text:004046CD                 mov     [esp+28h], edi
.text:004046D1                 lea     edi, [esi+ebx*4]
.text:004046D4                 mov     ebx, edx
.text:004046D6                 mov     edx, [edi+4]
.text:004046D9                 and     ebx, 1Fh
.text:004046DC                 mov     cl, bl
.text:004046DE                 mov     eax, edx
.text:004046E0                 shr     eax, cl
.text:004046E2                 and     eax, 1
.text:004046E5                 xor     eax, 1
.text:004046E8                 shl     eax, cl
.text:004046EA                 xor     edx, eax
.text:004046EC                 mov     [edi+4], edx
.text:004046EF                 mov     edx, [esp+50h]
.text:004046F3                 mov     [esp+0Ch], esi
.text:004046F7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004046FF                 mov     [esp+4], edx
.text:00404703                 mov     dword ptr [esp], 0
.text:0040470A                 call    sub_4047C0
.text:0040470F                 add     esp, 40h
.text:00404712                 pop     ebx
.text:00404713                 pop     esi
.text:00404714                 pop     edi
.text:00404715                 retn
.text:00404715 ; ---------------------------------------------------------------------------
.text:00404716                 align 10h
.text:00404720
.text:00404720 ; =============== S U B R O U T I N E =======================================
.text:00404720
.text:00404720
.text:00404720 ; int __cdecl sub_404720(char *)
.text:00404720 sub_404720      proc near               ; CODE XREF: sub_4031B0+64↑p
.text:00404720
.text:00404720 var_4C          = dword ptr -4Ch
.text:00404720 var_48          = dword ptr -48h
.text:00404720 var_44          = dword ptr -44h
.text:00404720 var_40          = dword ptr -40h
.text:00404720 var_3C          = dword ptr -3Ch
.text:00404720 var_38          = dword ptr -38h
.text:00404720 var_34          = dword ptr -34h
.text:00404720 var_30          = dword ptr -30h
.text:00404720 var_2C          = dword ptr -2Ch
.text:00404720 var_28          = dword ptr -28h
.text:00404720 var_24          = dword ptr -24h
.text:00404720 var_20          = dword ptr -20h
.text:00404720 var_1C          = dword ptr -1Ch
.text:00404720 arg_0           = dword ptr  4
.text:00404720
.text:00404720                 sub     esp, 4Ch
.text:00404723                 mov     ecx, ds:dword_408140
.text:00404729                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404731                 mov     edx, ds:dword_408144
.text:00404737                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040473E                 mov     [esp+4Ch+var_3C], ecx
.text:00404742                 mov     ecx, ds:dword_40814C
.text:00404748                 mov     [esp+4Ch+var_38], edx
.text:0040474C                 mov     edx, ds:dword_408148
.text:00404752                 mov     [esp+4Ch+var_30], ecx
.text:00404756                 mov     ecx, ds:dword_408150
.text:0040475C                 mov     eax, edx
.text:0040475E                 shr     eax, 1Ah
.text:00404761                 and     eax, 1
.text:00404764                 xor     eax, 1
.text:00404767                 mov     [esp+4Ch+var_2C], ecx
.text:0040476B                 shl     eax, 1Ah
.text:0040476E                 mov     ecx, ds:dword_408154
.text:00404774                 xor     edx, eax
.text:00404776                 mov     [esp+4Ch+var_34], edx
.text:0040477A                 mov     edx, [esp+4Ch+arg_0]
.text:0040477E                 mov     [esp+4Ch+var_28], ecx
.text:00404782                 mov     ecx, ds:dword_408158
.text:00404788                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040478C                 mov     [esp+4Ch+var_24], ecx
.text:00404790                 mov     ecx, ds:dword_40815C
.text:00404796                 mov     [esp+4Ch+var_20], ecx
.text:0040479A                 mov     ecx, ds:dword_408160
.text:004047A0                 mov     [esp+4Ch+var_1C], ecx
.text:004047A4                 lea     ecx, [esp+4Ch+var_3C]
.text:004047A8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004047AC                 call    sub_4047C0
.text:004047B1                 add     esp, 4Ch
.text:004047B4                 retn
.text:004047B4 sub_404720      endp
.text:004047B4
.text:004047B4 ; ---------------------------------------------------------------------------
.text:004047B5                 align 10h
.text:004047C0
.text:004047C0 ; =============== S U B R O U T I N E =======================================
.text:004047C0
.text:004047C0
.text:004047C0 ; int __cdecl sub_4047C0(int, char *, int, int)
.text:004047C0 sub_4047C0      proc near               ; CODE XREF: .text:00404372↑p
.text:004047C0                                         ; .text:004043A2↑p ...
.text:004047C0
.text:004047C0 Block           = dword ptr -2Ch
.text:004047C0 var_28          = dword ptr -28h
.text:004047C0 Str             = dword ptr -24h
.text:004047C0 var_20          = dword ptr -20h
.text:004047C0 var_1C          = dword ptr -1Ch
.text:004047C0 var_18          = dword ptr -18h
.text:004047C0 var_14          = dword ptr -14h
.text:004047C0 arg_0           = dword ptr  4
.text:004047C0 arg_4           = dword ptr  8
.text:004047C0 arg_8           = dword ptr  0Ch
.text:004047C0 arg_C           = dword ptr  10h
.text:004047C0
.text:004047C0                 push    ebp
.text:004047C1                 push    edi
.text:004047C2                 push    esi
.text:004047C3                 push    ebx
.text:004047C4                 sub     esp, 1Ch
.text:004047C7                 call    _errno
.text:004047CC                 mov     edx, [eax]
.text:004047CE                 mov     eax, [esp+2Ch+arg_0]
.text:004047D2                 mov     [esp+2Ch+var_14], edx
.text:004047D6                 test    eax, eax
.text:004047D8                 js      loc_40497A
.text:004047DE                 mov     eax, [esp+2Ch+arg_0]
.text:004047E2                 cmp     dword_407020, eax
.text:004047E8                 ja      short loc_404860
.text:004047EA                 mov     esi, eax
.text:004047EC                 inc     esi
.text:004047ED                 cmp     esi, 1FFFFFFFh
.text:004047F3                 ja      loc_40497F
.text:004047F9                 mov     ebx, off_40702C
.text:004047FF                 cmp     ebx, offset dword_407024
.text:00404805                 jz      loc_404951
.text:0040480B
.text:0040480B loc_40480B:                             ; CODE XREF: sub_4047C0+1B5↓j
.text:0040480B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040480E                 lea     ecx, ds:0[esi*8]
.text:00404815                 mov     ebp, esi
.text:00404817                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040481B                 call    sub_4033F0
.text:00404820                 mov     off_40702C, eax
.text:00404825                 mov     ebx, dword_407020
.text:0040482B                 sub     ebp, ebx
.text:0040482D                 lea     edi, [eax+ebx*8]
.text:00404830                 lea     eax, ds:0[ebp*8]
.text:00404837                 cmp     eax, 7
.text:0040483A                 jbe     short loc_404850
.text:0040483C                 test    edi, 4
.text:00404842                 jz      short loc_404850
.text:00404844                 mov     dword ptr [edi], 0
.text:0040484A                 sub     eax, 4
.text:0040484D                 add     edi, 4
.text:00404850
.text:00404850 loc_404850:                             ; CODE XREF: sub_4047C0+7A↑j
.text:00404850                                         ; sub_4047C0+82↑j
.text:00404850                 cld
.text:00404851                 mov     ecx, eax
.text:00404853                 shr     ecx, 2
.text:00404856                 xor     eax, eax
.text:00404858                 rep stosd
.text:0040485A                 mov     dword_407020, esi
.text:00404860
.text:00404860 loc_404860:                             ; CODE XREF: sub_4047C0+28↑j
.text:00404860                 mov     esi, off_40702C
.text:00404866                 mov     eax, [esp+2Ch+arg_0]
.text:0040486A                 mov     ebp, [esi+eax*8]
.text:0040486D                 mov     edi, [esi+eax*8+4]
.text:00404871                 mov     esi, [esp+2Ch+arg_C]
.text:00404875                 test    esi, esi
.text:00404877                 jz      loc_404947
.text:0040487D
.text:0040487D loc_40487D:                             ; CODE XREF: sub_4047C0+18C↓j
.text:0040487D                 call    _errno
.text:00404882                 mov     ebx, [eax]
.text:00404884                 mov     [esp+2Ch+var_18], esi ; int
.text:00404888                 mov     ecx, [esi]
.text:0040488A                 mov     [esp+2Ch+Block], edi ; int
.text:0040488D                 mov     edx, [esp+2Ch+arg_8]
.text:00404891                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404895                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404899                 mov     ecx, [esp+2Ch+arg_4]
.text:0040489D                 mov     [esp+2Ch+var_20], edx ; int
.text:004048A1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004048A5                 call    sub_403680
.text:004048AA                 mov     esi, eax
.text:004048AC                 call    _errno
.text:004048B1                 mov     [eax], ebx
.text:004048B3                 cmp     ebp, esi
.text:004048B5                 ja      short loc_40492B
.text:004048B7                 lea     ebp, [esi+1]
.text:004048BA                 mov     ebx, off_40702C
.text:004048C0                 cmp     edi, offset unk_408040
.text:004048C6                 mov     esi, [esp+2Ch+arg_0]
.text:004048CA                 mov     [ebx+esi*8], ebp
.text:004048CD                 jz      short loc_4048DD
.text:004048CF                 mov     [esp+2Ch+Block], edi ; Block
.text:004048D2                 call    free
.text:004048D7                 mov     ebx, off_40702C
.text:004048DD
.text:004048DD loc_4048DD:                             ; CODE XREF: sub_4047C0+10D↑j
.text:004048DD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:004048E0                 call    sub_403360
.text:004048E5                 mov     esi, [esp+2Ch+arg_C]
.text:004048E9                 mov     edi, eax
.text:004048EB                 mov     eax, [esp+2Ch+arg_0]
.text:004048EF                 test    esi, esi
.text:004048F1                 mov     [ebx+eax*8+4], edi
.text:004048F5                 jz      short loc_404940
.text:004048F7
.text:004048F7 loc_4048F7:                             ; CODE XREF: sub_4047C0+185↓j
.text:004048F7                 call    _errno
.text:004048FC                 mov     ebx, [eax]
.text:004048FE                 mov     [esp+2Ch+var_18], esi ; int
.text:00404902                 mov     ecx, [esi]
.text:00404904                 mov     [esp+2Ch+Block], edi ; int
.text:00404907                 mov     edx, [esp+2Ch+arg_8]
.text:0040490B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040490F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404913                 mov     ecx, [esp+2Ch+arg_4]
.text:00404917                 mov     [esp+2Ch+var_20], edx ; int
.text:0040491B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040491F                 call    sub_403680
.text:00404924                 call    _errno
.text:00404929                 mov     [eax], ebx
.text:0040492B
.text:0040492B loc_40492B:                             ; CODE XREF: sub_4047C0+F5↑j
.text:0040492B                 call    _errno
.text:00404930                 mov     ebp, [esp+2Ch+var_14]
.text:00404934                 mov     [eax], ebp
.text:00404936                 add     esp, 1Ch
.text:00404939                 mov     eax, edi
.text:0040493B                 pop     ebx
.text:0040493C                 pop     esi
.text:0040493D                 pop     edi
.text:0040493E                 pop     ebp
.text:0040493F                 retn
.text:00404940 ; ---------------------------------------------------------------------------
.text:00404940
.text:00404940 loc_404940:                             ; CODE XREF: sub_4047C0+135↑j
.text:00404940                 mov     esi, offset dword_408140
.text:00404945                 jmp     short loc_4048F7
.text:00404947 ; ---------------------------------------------------------------------------
.text:00404947
.text:00404947 loc_404947:                             ; CODE XREF: sub_4047C0+B7↑j
.text:00404947                 mov     esi, offset dword_408140
.text:0040494C                 jmp     loc_40487D
.text:00404951 ; ---------------------------------------------------------------------------
.text:00404951
.text:00404951 loc_404951:                             ; CODE XREF: sub_4047C0+45↑j
.text:00404951                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404958                 call    sub_403360
.text:0040495D                 mov     off_40702C, eax
.text:00404962                 mov     edi, dword_407024
.text:00404968                 mov     ebx, eax
.text:0040496A                 mov     ecx, off_407028
.text:00404970                 mov     [eax], edi
.text:00404972                 mov     [eax+4], ecx
.text:00404975                 jmp     loc_40480B
.text:0040497A ; ---------------------------------------------------------------------------
.text:0040497A
.text:0040497A loc_40497A:                             ; CODE XREF: sub_4047C0+18↑j
.text:0040497A                 call    abort
.text:0040497F ; ---------------------------------------------------------------------------
.text:0040497F
.text:0040497F loc_40497F:                             ; CODE XREF: sub_4047C0+33↑j
.text:0040497F                 call    sub_404EB0
.text:0040497F sub_4047C0      endp
.text:0040497F
.text:0040497F ; ---------------------------------------------------------------------------
.text:00404984                 align 10h
.text:00404990 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404990                                         ; DATA XREF: .data:Buffer↓o
.text:004049C2 ; const char aSSS[12]
.text:004049C2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404C80+50↓o
.text:004049CE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004049DE                 db 12h dup(90h)
.text:004049F0
.text:004049F0 ; =============== S U B R O U T I N E =======================================
.text:004049F0
.text:004049F0
.text:004049F0 sub_4049F0      proc near               ; DATA XREF: sub_404C80+100↓o
.text:004049F0                 push    esp
.text:004049F1                 push    69207369h
.text:004049F6                 jnb     short loc_404A18
.text:004049F8                 db      66h
.text:004049F8                 jb      short near ptr 4A60h
.text:004049FB                 and     gs:[ebx+6Fh], dh
.text:004049FF                 db      66h
.text:004049FF                 jz      short near ptr 4A79h
.text:00404A02                 popa
.text:00404A03                 jb      short loc_404A6A
.text:00404A05                 cmp     esp, [eax]
.text:00404A07                 jnb     short near ptr loc_404A6C+2
.text:00404A09                 and     gs:[eax+ebp*2+65h], dh
.text:00404A0E                 and     [ebx+6Fh], dh
.text:00404A11                 jnz     short loc_404A85
.text:00404A13                 arpl    [ebp+20h], sp
.text:00404A16                 outsw
.text:00404A18
.text:00404A18 loc_404A18:                             ; CODE XREF: sub_4049F0+6↑j
.text:00404A18                 jb      short loc_404A3A
.text:00404A1A                 arpl    [edi+70h], bp
.text:00404A1D                 jns     short loc_404A88
.text:00404A1F                 outsb
.text:00404A20                 and     [bp+di+6Fh], ah
.text:00404A24                 outsb
.text:00404A25                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:00404A2E                 and     [eax+ebp*2+65h], dl
.text:00404A32                 jb      short near ptr loc_404A98+1
.text:00404A34                 and     [ecx+73h], ch
.text:00404A37                 and     [esi+4Fh], cl
.text:00404A3A
.text:00404A3A loc_404A3A:                             ; CODE XREF: sub_4049F0:loc_404A18↑j
.text:00404A3A                 or      dh, [edi+61h]
.text:00404A3D                 jb      short loc_404AB1
.text:00404A3F                 popa
.text:00404A40                 outsb
.text:00404A41                 jz      short loc_404ABC
.text:00404A43                 cmp     esp, [eax]
.text:00404A45                 outsb
.text:00404A46                 outsd
.text:00404A47                 jz      short loc_404A69
.text:00404A49                 db      65h
.text:00404A49                 jbe     short loc_404AB1
.text:00404A4C                 outsb
.text:00404A4D                 and     [esi+6Fh], ah
.text:00404A50                 jb      short near ptr loc_404A70+2
.text:00404A52                 dec     ebp
.text:00404A53                 inc     ebp
.text:00404A54                 push    edx
.text:00404A55                 inc     ebx
.text:00404A56                 dec     eax
.text:00404A57                 inc     ecx
.text:00404A58                 dec     esi
.text:00404A59                 push    esp
.text:00404A5A                 inc     ecx
.text:00404A5B                 inc     edx
.text:00404A5C                 dec     ecx
.text:00404A5D                 dec     esp
.text:00404A5E                 dec     ecx
.text:00404A5F                 push    esp
.text:00404A60                 pop     ecx
.text:00404A61                 and     [edi+72h], ch
.text:00404A64                 and     [esi+49h], al
.text:00404A67                 push    esp
.text:00404A68                 dec     esi
.text:00404A69
.text:00404A69 loc_404A69:                             ; CODE XREF: sub_4049F0+57↑j
.text:00404A69                 inc     ebp
.text:00404A6A
.text:00404A6A loc_404A6A:                             ; CODE XREF: sub_4049F0+13↑j
.text:00404A6A                 push    ebx
.text:00404A6B                 push    ebx
.text:00404A6C
.text:00404A6C loc_404A6C:                             ; CODE XREF: sub_4049F0+17↑j
.text:00404A6C                 and     [esi+4Fh], al
.text:00404A6F                 push    edx
.text:00404A70
.text:00404A70 loc_404A70:                             ; CODE XREF: sub_4049F0+60↑j
.text:00404A70                 and     [ecx+20h], al
.text:00404A73                 push    eax
.text:00404A74                 inc     ecx
.text:00404A75                 push    edx
.text:00404A76                 push    esp
.text:00404A77                 dec     ecx
.text:00404A78                 inc     ebx
.text:00404A79                 push    ebp
.text:00404A7A                 dec     esp
.text:00404A7B                 inc     ecx
.text:00404A7C                 push    edx
.text:00404A7D                 and     [eax+55h], dl
.text:00404A80                 push    edx
.text:00404A81                 push    eax
.text:00404A82                 dec     edi
.text:00404A83                 push    ebx
.text:00404A84                 inc     ebp
.text:00404A85
.text:00404A85 loc_404A85:                             ; CODE XREF: sub_4049F0+21↑j
.text:00404A85                 or      al, cs:[eax]
.text:00404A88
.text:00404A88 loc_404A88:                             ; CODE XREF: sub_4049F0+2D↑j
.text:00404A88                                         ; DATA XREF: sub_404C80:loc_404DC1↓o
.text:00404A88                 push    edi
.text:00404A89                 jb      short near ptr loc_404AF3+1
.text:00404A8B                 jz      short near ptr loc_404B00+1
.text:00404A8D                 outs    dx, byte ptr gs:[esi]
.text:00404A8F                 and     [edx+79h], ah
.text:00404A92                 and     ds:6E612073h, ah
.text:00404A98
.text:00404A98 loc_404A98:                             ; CODE XREF: sub_4049F0+42↑j
.text:00404A98                 and     fs:0A2E73h, ah
.text:00404A9F
.text:00404A9F loc_404A9F:                             ; DATA XREF: sub_404C80:loc_404DCD↓o
.text:00404A9F                 push    edi
.text:00404AA0                 jb      short near ptr loc_404B0A+1
.text:00404AA2                 jz      short loc_404B18
.text:00404AA4                 outs    dx, byte ptr gs:[esi]
.text:00404AA6                 and     [edx+79h], ah
.text:00404AA9                 and     ds:25202C73h, ah
.text:00404AAF                 jnb     short near ptr loc_404ADA+3
.text:00404AB1
.text:00404AB1 loc_404AB1:                             ; CODE XREF: sub_4049F0+4D↑j
.text:00404AB1                                         ; sub_4049F0+59↑j
.text:00404AB1                 and     [ecx+6Eh], ah
.text:00404AB4                 and     fs:0A2E73h, ah
.text:00404ABB                 nop
.text:00404ABC
.text:00404ABC loc_404ABC:                             ; CODE XREF: sub_4049F0+51↑j
.text:00404ABC                 nop
.text:00404ABD                 nop
.text:00404ABE                 nop
.text:00404ABF                 nop
.text:00404AC0                 nop
.text:00404AC1                 nop
.text:00404AC2                 nop
.text:00404AC3                 nop
.text:00404AC4                 nop
.text:00404AC5                 nop
.text:00404AC6                 nop
.text:00404AC7                 nop
.text:00404AC8                 nop
.text:00404AC9                 nop
.text:00404ACA                 nop
.text:00404ACB                 nop
.text:00404ACC                 nop
.text:00404ACD                 nop
.text:00404ACE                 nop
.text:00404ACF                 nop
.text:00404ACF sub_4049F0      endp ; sp-analysis failed
.text:00404ACF
.text:00404AD0
.text:00404AD0 ; =============== S U B R O U T I N E =======================================
.text:00404AD0
.text:00404AD0
.text:00404AD0 sub_404AD0      proc near               ; DATA XREF: sub_404C80:loc_404DD9↓o
.text:00404AD0                 push    edi
.text:00404AD1                 jb      short near ptr loc_404B3A+2
.text:00404AD3                 jz      short near ptr loc_404B48+1
.text:00404AD5                 outs    dx, byte ptr gs:[esi]
.text:00404AD7                 and     [edx+79h], ah
.text:00404ADA
.text:00404ADA loc_404ADA:                             ; CODE XREF: sub_4049F0+BF↑j
.text:00404ADA                 and     ds:25202C73h, ah
.text:00404AE0                 jnb     short near ptr loc_404B0D+1
.text:00404AE2                 and     ds:610A2C73h, ah
.text:00404AE8                 outsb
.text:00404AE9                 and     fs:0A2E73h, ah
.text:00404AF0
.text:00404AF0 loc_404AF0:                             ; DATA XREF: sub_404C80:loc_404DE5↓o
.text:00404AF0                 push    edi
.text:00404AF1                 jb      short loc_404B5C
.text:00404AF3
.text:00404AF3 loc_404AF3:                             ; CODE XREF: sub_4049F0+99↑j
.text:00404AF3                 jz      short loc_404B69
.text:00404AF5                 outs    dx, byte ptr gs:[esi]
.text:00404AF7                 and     [edx+79h], ah
.text:00404AFA                 and     ds:25202C73h, ah
.text:00404B00
.text:00404B00 loc_404B00:                             ; CODE XREF: sub_4049F0+9B↑j
.text:00404B00                 jnb     short loc_404B2E
.text:00404B02                 and     ds:250A2C73h, ah
.text:00404B08                 jnb     short near ptr loc_404B35+1
.text:00404B0A
.text:00404B0A loc_404B0A:                             ; CODE XREF: sub_4049F0+B0↑j
.text:00404B0A                 and     [ecx+6Eh], ah
.text:00404B0D
.text:00404B0D loc_404B0D:                             ; CODE XREF: sub_404AD0+10↑j
.text:00404B0D                 and     fs:0A2E73h, ah
.text:00404B14                 nop
.text:00404B15                 nop
.text:00404B16                 nop
.text:00404B17                 nop
.text:00404B18
.text:00404B18 loc_404B18:                             ; CODE XREF: sub_4049F0+B2↑j
.text:00404B18                 nop
.text:00404B19                 nop
.text:00404B1A                 nop
.text:00404B1B                 nop
.text:00404B1C                 nop
.text:00404B1D                 nop
.text:00404B1E                 nop
.text:00404B1F                 nop
.text:00404B20                 nop
.text:00404B21                 nop
.text:00404B22                 nop
.text:00404B23                 nop
.text:00404B24                 nop
.text:00404B25                 nop
.text:00404B26                 nop
.text:00404B27                 nop
.text:00404B28                 nop
.text:00404B29                 nop
.text:00404B2A                 nop
.text:00404B2B                 nop
.text:00404B2C                 nop
.text:00404B2D                 nop
.text:00404B2E
.text:00404B2E loc_404B2E:                             ; CODE XREF: sub_404AD0:loc_404B00↑j
.text:00404B2E                 nop
.text:00404B2F                 nop
.text:00404B2F sub_404AD0      endp ; sp-analysis failed
.text:00404B2F
.text:00404B30
.text:00404B30 ; =============== S U B R O U T I N E =======================================
.text:00404B30
.text:00404B30
.text:00404B30 sub_404B30      proc near               ; DATA XREF: sub_404C80:loc_404DF1↓o
.text:00404B30                 push    edi
.text:00404B31                 jb      short loc_404B9C
.text:00404B33                 jz      short loc_404BA9
.text:00404B35
.text:00404B35 loc_404B35:                             ; CODE XREF: sub_404AD0+38↑j
.text:00404B35                 outs    dx, byte ptr gs:[esi]
.text:00404B37                 and     [edx+79h], ah
.text:00404B3A
.text:00404B3A loc_404B3A:                             ; CODE XREF: sub_404AD0+1↑j
.text:00404B3A                 and     ds:25202C73h, ah
.text:00404B40                 jnb     short loc_404B6E
.text:00404B42                 and     ds:250A2C73h, ah
.text:00404B48
.text:00404B48 loc_404B48:                             ; CODE XREF: sub_404AD0+3↑j
.text:00404B48                 jnb     short near ptr loc_404B75+1
.text:00404B4A                 and     ds:61202C73h, ah
.text:00404B50                 outsb
.text:00404B51                 and     fs:0A2E73h, ah
.text:00404B58                 nop
.text:00404B59                 nop
.text:00404B5A                 nop
.text:00404B5B                 nop
.text:00404B5C
.text:00404B5C loc_404B5C:                             ; CODE XREF: sub_404AD0+21↑j
.text:00404B5C                 nop
.text:00404B5D                 nop
.text:00404B5E                 nop
.text:00404B5F                 nop
.text:00404B60                 nop
.text:00404B61                 nop
.text:00404B62                 nop
.text:00404B63                 nop
.text:00404B64                 nop
.text:00404B65                 nop
.text:00404B66                 nop
.text:00404B67                 nop
.text:00404B68                 nop
.text:00404B69
.text:00404B69 loc_404B69:                             ; CODE XREF: sub_404AD0:loc_404AF3↑j
.text:00404B69                 nop
.text:00404B6A                 nop
.text:00404B6B                 nop
.text:00404B6C                 nop
.text:00404B6D                 nop
.text:00404B6E
.text:00404B6E loc_404B6E:                             ; CODE XREF: sub_404B30+10↑j
.text:00404B6E                 nop
.text:00404B6F                 nop
.text:00404B6F sub_404B30      endp ; sp-analysis failed
.text:00404B6F
.text:00404B70
.text:00404B70 ; =============== S U B R O U T I N E =======================================
.text:00404B70
.text:00404B70
.text:00404B70 sub_404B70      proc near               ; DATA XREF: sub_404C80:loc_404DFD↓o
.text:00404B70                 push    edi
.text:00404B71                 jb      short near ptr loc_404BD9+3
.text:00404B73                 jz      short loc_404BE9
.text:00404B75
.text:00404B75 loc_404B75:                             ; CODE XREF: sub_404B30:loc_404B48↑j
.text:00404B75                 outs    dx, byte ptr gs:[esi]
.text:00404B77                 and     [edx+79h], ah
.text:00404B7A                 and     ds:25202C73h, ah
.text:00404B80                 jnb     short loc_404BAE
.text:00404B82                 and     ds:250A2C73h, ah
.text:00404B88                 jnb     short near ptr loc_404BB5+1
.text:00404B8A                 and     ds:25202C73h, ah
.text:00404B90                 jnb     short near ptr loc_404BBA+4
.text:00404B92                 and     [ecx+6Eh], ah
.text:00404B95                 and     fs:0A2E73h, ah
.text:00404B9C
.text:00404B9C loc_404B9C:                             ; CODE XREF: sub_404B30+1↑j
.text:00404B9C                 nop
.text:00404B9D                 nop
.text:00404B9E                 nop
.text:00404B9F                 nop
.text:00404BA0                 nop
.text:00404BA1                 nop
.text:00404BA2                 nop
.text:00404BA3                 nop
.text:00404BA4                 nop
.text:00404BA5                 nop
.text:00404BA6                 nop
.text:00404BA7                 nop
.text:00404BA8                 nop
.text:00404BA9
.text:00404BA9 loc_404BA9:                             ; CODE XREF: sub_404B30+3↑j
.text:00404BA9                 nop
.text:00404BAA                 nop
.text:00404BAB                 nop
.text:00404BAC                 nop
.text:00404BAD                 nop
.text:00404BAE
.text:00404BAE loc_404BAE:                             ; CODE XREF: sub_404B70+10↑j
.text:00404BAE                 nop
.text:00404BAF                 nop
.text:00404BAF sub_404B70      endp ; sp-analysis failed
.text:00404BAF
.text:00404BB0
.text:00404BB0 ; =============== S U B R O U T I N E =======================================
.text:00404BB0
.text:00404BB0
.text:00404BB0 sub_404BB0      proc near               ; DATA XREF: sub_404C80:loc_404E09↓o
.text:00404BB0                 push    edi
.text:00404BB1                 jb      short near ptr loc_404C1A+2
.text:00404BB3                 jz      short near ptr loc_404C24+5
.text:00404BB5
.text:00404BB5 loc_404BB5:                             ; CODE XREF: sub_404B70+18↑j
.text:00404BB5                 outs    dx, byte ptr gs:[esi]
.text:00404BB7                 and     [edx+79h], ah
.text:00404BBA
.text:00404BBA loc_404BBA:                             ; CODE XREF: sub_404B70+20↑j
.text:00404BBA                 and     ds:25202C73h, ah
.text:00404BC0                 jnb     short loc_404BEE
.text:00404BC2                 and     ds:250A2C73h, ah
.text:00404BC8                 jnb     short near ptr loc_404BF5+1
.text:00404BCA                 and     ds:25202C73h, ah
.text:00404BD0                 jnb     short near ptr loc_404BFA+4
.text:00404BD2                 and     ds:610A2C73h, ah
.text:00404BD8                 outsb
.text:00404BD9
.text:00404BD9 loc_404BD9:                             ; CODE XREF: sub_404B70+1↑j
.text:00404BD9                 and     fs:0A2E73h, ah
.text:00404BE0                 nop
.text:00404BE1                 nop
.text:00404BE2                 nop
.text:00404BE3                 nop
.text:00404BE4                 nop
.text:00404BE5                 nop
.text:00404BE6                 nop
.text:00404BE7                 nop
.text:00404BE8                 nop
.text:00404BE9
.text:00404BE9 loc_404BE9:                             ; CODE XREF: sub_404B70+3↑j
.text:00404BE9                 nop
.text:00404BEA                 nop
.text:00404BEB                 nop
.text:00404BEC                 nop
.text:00404BED                 nop
.text:00404BEE
.text:00404BEE loc_404BEE:                             ; CODE XREF: sub_404BB0+10↑j
.text:00404BEE                 nop
.text:00404BEF                 nop
.text:00404BEF sub_404BB0      endp ; sp-analysis failed
.text:00404BEF
.text:00404BF0
.text:00404BF0 ; =============== S U B R O U T I N E =======================================
.text:00404BF0
.text:00404BF0
.text:00404BF0 sub_404BF0      proc near               ; DATA XREF: sub_404C80:loc_404E15↓o
.text:00404BF0                 push    edi
.text:00404BF1                 jb      short near ptr loc_404C5A+2
.text:00404BF3                 jz      short near ptr loc_404C65+4
.text:00404BF5
.text:00404BF5 loc_404BF5:                             ; CODE XREF: sub_404BB0+18↑j
.text:00404BF5                 outs    dx, byte ptr gs:[esi]
.text:00404BF7                 and     [edx+79h], ah
.text:00404BFA
.text:00404BFA loc_404BFA:                             ; CODE XREF: sub_404BB0+20↑j
.text:00404BFA                 and     ds:25202C73h, ah
.text:00404C00                 jnb     short near ptr loc_404C2A+4
.text:00404C02                 and     ds:250A2C73h, ah
.text:00404C08                 jnb     short near ptr loc_404C35+1
.text:00404C0A                 and     ds:25202C73h, ah
.text:00404C10                 jnb     short near ptr loc_404C3A+4
.text:00404C12                 and     ds:250A2C73h, ah
.text:00404C18                 jnb     short near ptr loc_404C42+4
.text:00404C1A
.text:00404C1A loc_404C1A:                             ; CODE XREF: sub_404BB0+1↑j
.text:00404C1A                 and     [ecx+6Eh], ah
.text:00404C1D                 and     fs:0A2E73h, ah
.text:00404C24
.text:00404C24 loc_404C24:                             ; CODE XREF: sub_404BB0+3↑j
.text:00404C24                 lea     esi, [esi+0]
.text:00404C2A
.text:00404C2A loc_404C2A:                             ; CODE XREF: sub_404BF0+10↑j
.text:00404C2A                 lea     edi, [edi+0]
.text:00404C30
.text:00404C30 loc_404C30:                             ; DATA XREF: sub_404C80:def_404CED↓o
.text:00404C30                 push    edi
.text:00404C31                 jb      short near ptr loc_404C9B+1
.text:00404C33                 jz      short near ptr loc_404CA8+1
.text:00404C35
.text:00404C35 loc_404C35:                             ; CODE XREF: sub_404BF0+18↑j
.text:00404C35                 outs    dx, byte ptr gs:[esi]
.text:00404C37                 and     [edx+79h], ah
.text:00404C3A
.text:00404C3A loc_404C3A:                             ; CODE XREF: sub_404BF0+20↑j
.text:00404C3A                 and     ds:25202C73h, ah
.text:00404C40                 jnb     short near ptr loc_404C6C+2
.text:00404C42
.text:00404C42 loc_404C42:                             ; CODE XREF: sub_404BF0+28↑j
.text:00404C42                 and     ds:250A2C73h, ah
.text:00404C48                 jnb     short near ptr loc_404C73+3
.text:00404C4A                 and     ds:25202C73h, ah
.text:00404C50                 jnb     short near ptr loc_404C79+5
.text:00404C52                 and     ds:250A2C73h, ah
.text:00404C58                 jnb     short near ptr loc_404C84+2
.text:00404C5A
.text:00404C5A loc_404C5A:                             ; CODE XREF: sub_404BF0+1↑j
.text:00404C5A                 and     ds:61202C73h, ah
.text:00404C60                 outsb
.text:00404C61                 and     fs:[edi+74h], ch
.text:00404C65
.text:00404C65 loc_404C65:                             ; CODE XREF: sub_404BF0+3↑j
.text:00404C65                 push    2E737265h
.text:00404C6A                 or      al, [eax]
.text:00404C6C
.text:00404C6C loc_404C6C:                             ; CODE XREF: sub_404BF0+50↑j
.text:00404C6C                                         ; DATA XREF: sub_404C80+1B5↓o
.text:00404C6C                 and     eax, 73252073h
.text:00404C71                 or      al, [eax]
.text:00404C73
.text:00404C73 loc_404C73:                             ; CODE XREF: sub_404BF0+58↑j
.text:00404C73                 lea     esi, [esi+0]
.text:00404C79
.text:00404C79 loc_404C79:                             ; CODE XREF: sub_404BF0+60↑j
.text:00404C79                 lea     edi, [edi+0]
.text:00404C79 sub_404BF0      endp ; sp-analysis failed
.text:00404C79
.text:00404C80
.text:00404C80 ; =============== S U B R O U T I N E =======================================
.text:00404C80
.text:00404C80
.text:00404C80 ; int __cdecl sub_404C80(FILE *, FILE *, int, int, va_list)
.text:00404C80 sub_404C80      proc near               ; CODE XREF: sub_4030C0+A5↑p
.text:00404C80                                         ; .text:00404E7A↓p
.text:00404C80
.text:00404C80 Stream          = dword ptr -2Ch
.text:00404C80 Format          = dword ptr -28h
.text:00404C80 ArgList         = dword ptr -24h
.text:00404C80 var_20          = dword ptr -20h
.text:00404C80 var_1C          = dword ptr -1Ch
.text:00404C80 var_14          = dword ptr -14h
.text:00404C80 arg_0           = dword ptr  4
.text:00404C80 arg_4           = dword ptr  8
.text:00404C80 arg_8           = dword ptr  0Ch
.text:00404C80 arg_C           = dword ptr  10h
.text:00404C80 arg_10          = dword ptr  14h
.text:00404C80
.text:00404C80                 push    ebp
.text:00404C81                 push    edi
.text:00404C82                 push    esi
.text:00404C83                 push    ebx
.text:00404C84
.text:00404C84 loc_404C84:                             ; CODE XREF: sub_404BF0+68↑j
.text:00404C84                 sub     esp, 1Ch
.text:00404C87                 xor     ebx, ebx
.text:00404C89                 mov     edi, [esp+2Ch+arg_10]
.text:00404C8D                 mov     edx, [esp+2Ch+arg_8]
.text:00404C91                 mov     esi, [esp+2Ch+arg_0]
.text:00404C95                 mov     eax, [edi]
.text:00404C97                 mov     ecx, [esp+2Ch+arg_4]
.text:00404C9B
.text:00404C9B loc_404C9B:                             ; CODE XREF: sub_404BF0+41↑j
.text:00404C9B                 mov     [esp+2Ch+var_14], edx
.text:00404C9F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404CA3                 lea     edx, [edi+4]
.text:00404CA6                 test    eax, eax
.text:00404CA8
.text:00404CA8 loc_404CA8:                             ; CODE XREF: sub_404BF0+43↑j
.text:00404CA8                 jz      short loc_404CBC
.text:00404CAA                 lea     esi, [esi+0]
.text:00404CB0
.text:00404CB0 loc_404CB0:                             ; CODE XREF: sub_404C80+3A↓j
.text:00404CB0                 mov     eax, edx
.text:00404CB2                 inc     ebx
.text:00404CB3                 mov     eax, [eax]
.text:00404CB5                 add     edx, 4
.text:00404CB8                 test    eax, eax
.text:00404CBA                 jnz     short loc_404CB0
.text:00404CBC
.text:00404CBC loc_404CBC:                             ; CODE XREF: sub_404C80:loc_404CA8↑j
.text:00404CBC                 test    ecx, ecx
.text:00404CBE                 jz      loc_404E2D
.text:00404CC4                 mov     [esp+2Ch+var_1C], ebp
.text:00404CC8                 mov     edx, [esp+2Ch+var_14]
.text:00404CCC                 mov     [esp+2Ch+ArgList], ecx
.text:00404CD0                 mov     [esp+2Ch+Format], offset aSSS ; Format
.text:00404CD8                 mov     [esp+2Ch+var_20], edx
.text:00404CDC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404CDF                 call    fprintf
.text:00404CE4
.text:00404CE4 loc_404CE4:                             ; CODE XREF: sub_404C80+1C9↓j
.text:00404CE4                 cmp     ebx, 9          ; switch 10 cases
.text:00404CE7                 ja      def_404CED      ; jumptable 00404CED default case
.text:00404CED                 jmp     ds:jpt_404CED[ebx*4] ; switch jump
.text:00404CED ; ---------------------------------------------------------------------------
.text:00404CF4 jpt_404CED      dd offset loc_404D1C    ; DATA XREF: sub_404C80+6D↑r
.text:00404CF4                 dd offset loc_404D21    ; jump table for switch statement
.text:00404CF4                 dd offset loc_404DC1
.text:00404CF4                 dd offset loc_404DCD
.text:00404CF4                 dd offset loc_404DD9
.text:00404CF4                 dd offset loc_404DE5
.text:00404CF4                 dd offset loc_404DF1
.text:00404CF4                 dd offset loc_404DFD
.text:00404CF4                 dd offset loc_404E09
.text:00404CF4                 dd offset loc_404E15
.text:00404D1C ; ---------------------------------------------------------------------------
.text:00404D1C
.text:00404D1C loc_404D1C:                             ; CODE XREF: sub_404C80+6D↑j
.text:00404D1C                                         ; DATA XREF: sub_404C80:jpt_404CED↑o
.text:00404D1C                 call    abort           ; jumptable 00404CED case 0
.text:00404D21 ; ---------------------------------------------------------------------------
.text:00404D21
.text:00404D21 loc_404D21:                             ; CODE XREF: sub_404C80+6D↑j
.text:00404D21                                         ; DATA XREF: sub_404C80:jpt_404CED↑o
.text:00404D21                 mov     [esp+2Ch+Stream], 4049CEh ; jumptable 00404CED case 1
.text:00404D28                 nop
.text:00404D29                 lea     esi, [esi+0]
.text:00404D30
.text:00404D30 loc_404D30:                             ; CODE XREF: sub_404C80+148↓j
.text:00404D30                                         ; sub_404C80+154↓j ...
.text:00404D30                 call    ds:libintl_gettext
.text:00404D36                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00404D3A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404D3D                 mov     [esp+2Ch+Format], eax ; Format
.text:00404D41                 call    vfprintf
.text:00404D46                 mov     ebx, [esi+4]
.text:00404D49                 dec     ebx
.text:00404D4A                 test    ebx, ebx
.text:00404D4C                 mov     [esi+4], ebx
.text:00404D4F                 js      short loc_404DAF
.text:00404D51                 mov     edi, [esi]
.text:00404D53                 mov     byte ptr [edi], 0Ah
.text:00404D56                 inc     dword ptr [esi]
.text:00404D58
.text:00404D58 loc_404D58:                             ; CODE XREF: sub_404C80+13F↓j
.text:00404D58                 mov     [esp+2Ch+Format], esi ; Stream
.text:00404D5C                 mov     edx, Buffer
.text:00404D62                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00404D65                 call    fputs
.text:00404D6A                 mov     ebp, [esi+4]
.text:00404D6D                 dec     ebp
.text:00404D6E                 test    ebp, ebp
.text:00404D70                 mov     [esi+4], ebp
.text:00404D73                 js      short loc_404D9D
.text:00404D75                 mov     ecx, [esi]
.text:00404D77                 mov     byte ptr [ecx], 0Ah
.text:00404D7A                 inc     dword ptr [esi]
.text:00404D7C
.text:00404D7C loc_404D7C:                             ; CODE XREF: sub_404C80+12D↓j
.text:00404D7C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404D80                 mov     [esp+2Ch+Stream], offset sub_4049F0
.text:00404D87                 call    ds:libintl_gettext
.text:00404D8D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404D91                 add     esp, 1Ch
.text:00404D94                 pop     ebx
.text:00404D95                 pop     esi
.text:00404D96                 pop     edi
.text:00404D97                 pop     ebp
.text:00404D98                 jmp     fputs
.text:00404D9D ; ---------------------------------------------------------------------------
.text:00404D9D
.text:00404D9D loc_404D9D:                             ; CODE XREF: sub_404C80+F3↑j
.text:00404D9D                 mov     [esp+2Ch+Format], esi ; File
.text:00404DA1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404DA8                 call    _flsbuf
.text:00404DAD                 jmp     short loc_404D7C
.text:00404DAF ; ---------------------------------------------------------------------------
.text:00404DAF
.text:00404DAF loc_404DAF:                             ; CODE XREF: sub_404C80+CF↑j
.text:00404DAF                 mov     [esp+2Ch+Format], esi ; File
.text:00404DB3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404DBA                 call    _flsbuf
.text:00404DBF                 jmp     short loc_404D58
.text:00404DC1 ; ---------------------------------------------------------------------------
.text:00404DC1
.text:00404DC1 loc_404DC1:                             ; CODE XREF: sub_404C80+6D↑j
.text:00404DC1                                         ; DATA XREF: sub_404C80:jpt_404CED↑o
.text:00404DC1                 mov     [esp+2Ch+Stream], offset loc_404A88 ; jumptable 00404CED case 2
.text:00404DC8                 jmp     loc_404D30
.text:00404DCD ; ---------------------------------------------------------------------------
.text:00404DCD
.text:00404DCD loc_404DCD:                             ; CODE XREF: sub_404C80+6D↑j
.text:00404DCD                                         ; DATA XREF: sub_404C80:jpt_404CED↑o
.text:00404DCD                 mov     [esp+2Ch+Stream], offset loc_404A9F ; jumptable 00404CED case 3
.text:00404DD4                 jmp     loc_404D30
.text:00404DD9 ; ---------------------------------------------------------------------------
.text:00404DD9
.text:00404DD9 loc_404DD9:                             ; CODE XREF: sub_404C80+6D↑j
.text:00404DD9                                         ; DATA XREF: sub_404C80:jpt_404CED↑o
.text:00404DD9                 mov     [esp+2Ch+Stream], offset sub_404AD0 ; jumptable 00404CED case 4
.text:00404DE0                 jmp     loc_404D30
.text:00404DE5 ; ---------------------------------------------------------------------------
.text:00404DE5
.text:00404DE5 loc_404DE5:                             ; CODE XREF: sub_404C80+6D↑j
.text:00404DE5                                         ; DATA XREF: sub_404C80:jpt_404CED↑o
.text:00404DE5                 mov     [esp+2Ch+Stream], offset loc_404AF0 ; jumptable 00404CED case 5
.text:00404DEC                 jmp     loc_404D30
.text:00404DF1 ; ---------------------------------------------------------------------------
.text:00404DF1
.text:00404DF1 loc_404DF1:                             ; CODE XREF: sub_404C80+6D↑j
.text:00404DF1                                         ; DATA XREF: sub_404C80:jpt_404CED↑o
.text:00404DF1                 mov     [esp+2Ch+Stream], offset sub_404B30 ; jumptable 00404CED case 6
.text:00404DF8                 jmp     loc_404D30
.text:00404DFD ; ---------------------------------------------------------------------------
.text:00404DFD
.text:00404DFD loc_404DFD:                             ; CODE XREF: sub_404C80+6D↑j
.text:00404DFD                                         ; DATA XREF: sub_404C80:jpt_404CED↑o
.text:00404DFD                 mov     [esp+2Ch+Stream], offset sub_404B70 ; jumptable 00404CED case 7
.text:00404E04                 jmp     loc_404D30
.text:00404E09 ; ---------------------------------------------------------------------------
.text:00404E09
.text:00404E09 loc_404E09:                             ; CODE XREF: sub_404C80+6D↑j
.text:00404E09                                         ; DATA XREF: sub_404C80:jpt_404CED↑o
.text:00404E09                 mov     [esp+2Ch+Stream], offset sub_404BB0 ; jumptable 00404CED case 8
.text:00404E10                 jmp     loc_404D30
.text:00404E15 ; ---------------------------------------------------------------------------
.text:00404E15
.text:00404E15 loc_404E15:                             ; CODE XREF: sub_404C80+6D↑j
.text:00404E15                                         ; DATA XREF: sub_404C80:jpt_404CED↑o
.text:00404E15                 mov     [esp+2Ch+Stream], offset sub_404BF0 ; jumptable 00404CED case 9
.text:00404E1C                 jmp     loc_404D30
.text:00404E21 ; ---------------------------------------------------------------------------
.text:00404E21
.text:00404E21 def_404CED:                             ; CODE XREF: sub_404C80+67↑j
.text:00404E21                 mov     [esp+2Ch+Stream], offset loc_404C30 ; jumptable 00404CED default case
.text:00404E28                 jmp     loc_404D30
.text:00404E2D ; ---------------------------------------------------------------------------
.text:00404E2D
.text:00404E2D loc_404E2D:                             ; CODE XREF: sub_404C80+3E↑j
.text:00404E2D                 mov     [esp+2Ch+var_20], ebp
.text:00404E31                 mov     ecx, [esp+2Ch+var_14]
.text:00404E35                 mov     [esp+2Ch+Format], offset loc_404C6C ; Format
.text:00404E3D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404E40                 mov     [esp+2Ch+ArgList], ecx
.text:00404E44                 call    fprintf
.text:00404E49                 jmp     loc_404CE4
.text:00404E49 sub_404C80      endp
.text:00404E49
.text:00404E49 ; ---------------------------------------------------------------------------
.text:00404E4E                 align 10h
.text:00404E50                 sub     esp, 1Ch
.text:00404E53                 mov     edx, [esp+2Ch]
.text:00404E57                 lea     ecx, [esp+30h]
.text:00404E5B                 mov     [esp+10h], ecx
.text:00404E5F                 mov     ecx, [esp+28h]
.text:00404E63                 mov     [esp+0Ch], edx
.text:00404E67                 mov     edx, [esp+24h]
.text:00404E6B                 mov     [esp+8], ecx
.text:00404E6F                 mov     [esp+4], edx
.text:00404E73                 mov     edx, [esp+20h]
.text:00404E77                 mov     [esp], edx
.text:00404E7A                 call    sub_404C80
.text:00404E7F                 add     esp, 1Ch
.text:00404E82                 retn
.text:00404E82 ; ---------------------------------------------------------------------------
.text:00404E83                 align 10h
.text:00404E90 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404EB0+3↓o
.text:00404EA1 ; const char aS_0[]
.text:00404EA1 aS_0            db '%s',0               ; DATA XREF: sub_404EB0+10↓o
.text:00404EA4                 align 10h
.text:00404EB0
.text:00404EB0 ; =============== S U B R O U T I N E =======================================
.text:00404EB0
.text:00404EB0 ; Attributes: noreturn
.text:00404EB0
.text:00404EB0 sub_404EB0      proc near               ; CODE XREF: .text:loc_403359↑p
.text:00404EB0                                         ; sub_403360+24↑p ...
.text:00404EB0
.text:00404EB0 Code            = dword ptr -1Ch
.text:00404EB0 ErrorMessage    = dword ptr -18h
.text:00404EB0 var_14          = dword ptr -14h
.text:00404EB0 var_10          = byte ptr -10h
.text:00404EB0
.text:00404EB0                 sub     esp, 1Ch
.text:00404EB3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00404EBA                 call    ds:libintl_gettext
.text:00404EC0                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00404EC8                 mov     edx, Code
.text:00404ECE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404ED6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00404EDA                 mov     [esp+1Ch+Code], edx ; Code
.text:00404EDD                 call    sub_404F50
.text:00404EE2                 call    abort
.text:00404EE2 sub_404EB0      endp
.text:00404EE2
.text:00404EE2 ; ---------------------------------------------------------------------------
.text:00404EE7                 align 10h
.text:00404EF0
.text:00404EF0 ; =============== S U B R O U T I N E =======================================
.text:00404EF0
.text:00404EF0 ; Attributes: thunk
.text:00404EF0
.text:00404EF0 libintl_bindtextdomain proc near
.text:00404EF0                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404EF0 libintl_bindtextdomain endp
.text:00404EF0
.text:00404EF0 ; ---------------------------------------------------------------------------
.text:00404EF6                 align 10h
.text:00404F00                 jmp     ds:libintl_textdomain
.text:00404F00 ; ---------------------------------------------------------------------------
.text:00404F06                 align 10h
.text:00404F10                 jmp     ds:libintl_gettext
.text:00404F10 ; ---------------------------------------------------------------------------
.text:00404F16                 align 10h
.text:00404F20                 jmp     ds:libintl_ngettext
.text:00404F20 ; ---------------------------------------------------------------------------
.text:00404F26                 align 10h
.text:00404F30 ; const char aS_1[]
.text:00404F30 aS_1            db ': %s',0             ; DATA XREF: sub_404F50+B8↓o
.text:00404F30                                         ; sub_405054+122↓o
.text:00404F35 aUnknownSystemE db 'Unknown system error',0
.text:00404F35                                         ; DATA XREF: sub_404F50:loc_40501D↓o
.text:00404F35                                         ; sub_405054:loc_40518E↓o
.text:00404F4A ; const char aS_2[]
.text:00404F4A aS_2            db '%s: ',0             ; DATA XREF: sub_404F50:loc_405024↓o
.text:00404F4F                 align 10h
.text:00404F50
.text:00404F50 ; =============== S U B R O U T I N E =======================================
.text:00404F50
.text:00404F50
.text:00404F50 ; int __cdecl sub_404F50(int Code, int ErrorMessage, char *, char)
.text:00404F50 sub_404F50      proc near               ; CODE XREF: sub_401380+14E↑p
.text:00404F50                                         ; sub_401380+187↑p ...
.text:00404F50
.text:00404F50 Stream          = dword ptr -1Ch
.text:00404F50 Format          = dword ptr -18h
.text:00404F50 ArgList         = dword ptr -14h
.text:00404F50 Code            = dword ptr  4
.text:00404F50 ErrorMessage    = dword ptr  8
.text:00404F50 arg_8           = dword ptr  0Ch
.text:00404F50 arg_C           = byte ptr  10h
.text:00404F50
.text:00404F50                 push    esi
.text:00404F51                 push    ebx
.text:00404F52                 sub     esp, 14h
.text:00404F55                 mov     edx, ds:_iob
.text:00404F5B                 mov     esi, [esp+1Ch+Code]
.text:00404F5F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404F63                 add     edx, 20h ; ' '
.text:00404F66                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404F69                 call    fflush
.text:00404F6E                 mov     eax, ds:dword_408360
.text:00404F73                 test    eax, eax
.text:00404F75                 jz      loc_405024
.text:00404F7B                 call    eax ; dword_408360
.text:00404F7D
.text:00404F7D loc_404F7D:                             ; CODE XREF: sub_404F50+F7↓j
.text:00404F7D                 lea     edx, [esp+1Ch+arg_C]
.text:00404F81                 mov     ecx, [esp+1Ch+arg_8]
.text:00404F85                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404F89                 mov     edx, ds:_iob
.text:00404F8F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404F93                 add     edx, 40h ; '@'
.text:00404F96                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404F99                 call    vfprintf
.text:00404F9E                 inc     ds:dword_408370
.text:00404FA4                 test    ebx, ebx
.text:00404FA6                 jnz     short loc_404FF2
.text:00404FA8
.text:00404FA8 loc_404FA8:                             ; CODE XREF: sub_404F50+CB↓j
.text:00404FA8                 mov     edx, ds:_iob
.text:00404FAE                 lea     ecx, [edx+40h]
.text:00404FB1                 mov     ebx, [ecx+4]
.text:00404FB4                 dec     ebx
.text:00404FB5                 test    ebx, ebx
.text:00404FB7                 mov     [ecx+4], ebx
.text:00404FBA                 js      short loc_404FE0
.text:00404FBC                 mov     ecx, [edx+40h]
.text:00404FBF                 mov     byte ptr [ecx], 0Ah
.text:00404FC2                 inc     dword ptr [edx+40h]
.text:00404FC5
.text:00404FC5 loc_404FC5:                             ; CODE XREF: sub_404F50+A0↓j
.text:00404FC5                 mov     edx, ds:_iob
.text:00404FCB                 add     edx, 40h ; '@'
.text:00404FCE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404FD1                 call    fflush
.text:00404FD6                 test    esi, esi
.text:00404FD8                 jnz     short loc_40504C
.text:00404FDA                 add     esp, 14h
.text:00404FDD                 pop     ebx
.text:00404FDE                 pop     esi
.text:00404FDF                 retn
.text:00404FE0 ; ---------------------------------------------------------------------------
.text:00404FE0
.text:00404FE0 loc_404FE0:                             ; CODE XREF: sub_404F50+6A↑j
.text:00404FE0                 mov     [esp+1Ch+Format], ecx ; File
.text:00404FE4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00404FEB                 call    _flsbuf
.text:00404FF0                 jmp     short loc_404FC5
.text:00404FF2 ; ---------------------------------------------------------------------------
.text:00404FF2
.text:00404FF2 loc_404FF2:                             ; CODE XREF: sub_404F50+56↑j
.text:00404FF2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404FF5                 call    strerror
.text:00404FFA                 test    eax, eax
.text:00404FFC                 jz      short loc_40501D
.text:00404FFE
.text:00404FFE loc_404FFE:                             ; CODE XREF: sub_404F50+D2↓j
.text:00404FFE                 mov     [esp+1Ch+ArgList], eax
.text:00405002                 mov     ebx, ds:_iob
.text:00405008                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00405010                 add     ebx, 40h ; '@'
.text:00405013                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00405016                 call    fprintf
.text:0040501B                 jmp     short loc_404FA8
.text:0040501D ; ---------------------------------------------------------------------------
.text:0040501D
.text:0040501D loc_40501D:                             ; CODE XREF: sub_404F50+AC↑j
.text:0040501D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405022                 jmp     short loc_404FFE
.text:00405024 ; ---------------------------------------------------------------------------
.text:00405024
.text:00405024 loc_405024:                             ; CODE XREF: sub_404F50+25↑j
.text:00405024                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:0040502C                 mov     edx, ds:_iob
.text:00405032                 mov     ecx, ds:dword_408330
.text:00405038                 add     edx, 40h ; '@'
.text:0040503B                 mov     [esp+1Ch+ArgList], ecx
.text:0040503F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405042                 call    fprintf
.text:00405047                 jmp     loc_404F7D
.text:0040504C ; ---------------------------------------------------------------------------
.text:0040504C
.text:0040504C loc_40504C:                             ; CODE XREF: sub_404F50+88↑j
.text:0040504C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040504F                 call    exit
.text:0040504F sub_404F50      endp
.text:0040504F
.text:00405054
.text:00405054 ; =============== S U B R O U T I N E =======================================
.text:00405054
.text:00405054
.text:00405054 ; int __cdecl sub_405054(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405054 sub_405054      proc near               ; DATA XREF: sub_405054+77↓o
.text:00405054
.text:00405054 Stream          = dword ptr -28h
.text:00405054 Format          = dword ptr -24h
.text:00405054 ArgList         = dword ptr -20h
.text:00405054 var_1C          = dword ptr -1Ch
.text:00405054 Code            = dword ptr  8
.text:00405054 ErrorMessage    = dword ptr  0Ch
.text:00405054 Str2            = dword ptr  10h
.text:00405054 arg_10          = dword ptr  14h
.text:00405054 arg_14          = dword ptr  18h
.text:00405054 arg_18          = byte ptr  1Ch
.text:00405054
.text:00405054                 and     eax, 64253A73h
.text:00405059                 cmp     ah, [eax]
.text:0040505B
.text:0040505B loc_40505B:                             ; DATA XREF: sub_405054:loc_405195↓o
.text:0040505B                 add     ds:55003A73h, ah
.text:00405061                 push    edi
.text:00405062                 push    esi
.text:00405063                 push    ebx
.text:00405064                 sub     esp, 1Ch
.text:00405067                 mov     edx, ds:dword_4083A0
.text:0040506D                 mov     ebp, [esp+28h+Code]
.text:00405071                 mov     edi, [esp+28h+ErrorMessage]
.text:00405075                 test    edx, edx
.text:00405077                 mov     ebx, [esp+28h+Str2]
.text:0040507B                 mov     esi, [esp+28h+arg_10]
.text:0040507F                 jz      short loc_405099
.text:00405081                 cmp     ds:dword_408180, esi
.text:00405087                 jz      loc_4051C0
.text:0040508D
.text:0040508D loc_40508D:                             ; CODE XREF: sub_405054+18D↓j
.text:0040508D                 mov     ds:Str1, ebx
.text:00405093                 mov     ds:dword_408180, esi
.text:00405099
.text:00405099 loc_405099:                             ; CODE XREF: sub_405054+2B↑j
.text:00405099                 mov     edx, ds:_iob
.text:0040509F                 add     edx, 20h ; ' '
.text:004050A2                 mov     [esp+28h+Stream], edx ; Stream
.text:004050A5                 call    fflush
.text:004050AA                 mov     eax, ds:dword_408360
.text:004050AF                 test    eax, eax
.text:004050B1                 jz      loc_405195
.text:004050B7                 call    eax ; dword_408360
.text:004050B9
.text:004050B9 loc_4050B9:                             ; CODE XREF: sub_405054+164↓j
.text:004050B9                 test    ebx, ebx
.text:004050BB                 jz      short loc_4050DE
.text:004050BD                 mov     [esp+28h+ArgList], ebx
.text:004050C1                 mov     ebx, ds:_iob
.text:004050C7                 mov     [esp+28h+var_1C], esi
.text:004050CB                 mov     [esp+28h+Format], offset sub_405054 ; Format
.text:004050D3                 add     ebx, 40h ; '@'
.text:004050D6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004050D9                 call    fprintf
.text:004050DE
.text:004050DE loc_4050DE:                             ; CODE XREF: sub_405054+67↑j
.text:004050DE                 mov     esi, ds:_iob
.text:004050E4                 lea     edx, [esp+28h+arg_18]
.text:004050E8                 mov     ecx, [esp+28h+arg_14]
.text:004050EC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004050F0                 add     esi, 40h ; '@'
.text:004050F3                 mov     [esp+28h+Format], ecx ; Format
.text:004050F7                 mov     [esp+28h+Stream], esi ; Stream
.text:004050FA                 call    vfprintf
.text:004050FF                 inc     ds:dword_408370
.text:00405105                 test    edi, edi
.text:00405107                 jnz     short loc_405160
.text:00405109
.text:00405109 loc_405109:                             ; CODE XREF: sub_405054+135↓j
.text:00405109                 mov     edx, ds:_iob
.text:0040510F                 lea     ecx, [edx+40h]
.text:00405112                 mov     ebx, [ecx+4]
.text:00405115                 dec     ebx
.text:00405116                 test    ebx, ebx
.text:00405118                 mov     [ecx+4], ebx
.text:0040511B                 js      short loc_405147
.text:0040511D                 mov     esi, [edx+40h]
.text:00405120                 mov     byte ptr [esi], 0Ah
.text:00405123                 inc     dword ptr [edx+40h]
.text:00405126
.text:00405126 loc_405126:                             ; CODE XREF: sub_405054+103↓j
.text:00405126                 mov     ecx, ds:_iob
.text:0040512C                 add     ecx, 40h ; '@'
.text:0040512F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405132                 call    fflush
.text:00405137                 test    ebp, ebp
.text:00405139                 jnz     loc_4051E6
.text:0040513F
.text:0040513F loc_40513F:                             ; CODE XREF: sub_405054+173↓j
.text:0040513F                                         ; sub_405054+187↓j
.text:0040513F                 add     esp, 1Ch
.text:00405142                 pop     ebx
.text:00405143                 pop     esi
.text:00405144                 pop     edi
.text:00405145                 pop     ebp
.text:00405146                 retn
.text:00405147 ; ---------------------------------------------------------------------------
.text:00405147
.text:00405147 loc_405147:                             ; CODE XREF: sub_405054+C7↑j
.text:00405147                 mov     [esp+28h+Format], ecx ; File
.text:0040514B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405152                 call    _flsbuf
.text:00405157                 jmp     short loc_405126
.text:00405157 ; ---------------------------------------------------------------------------
.text:00405159                 align 10h
.text:00405160
.text:00405160 loc_405160:                             ; CODE XREF: sub_405054+B3↑j
.text:00405160                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405163                 call    strerror
.text:00405168                 test    eax, eax
.text:0040516A                 jz      short loc_40518E
.text:0040516C
.text:0040516C loc_40516C:                             ; CODE XREF: sub_405054+13F↓j
.text:0040516C                 mov     [esp+28h+ArgList], eax
.text:00405170                 mov     edi, ds:_iob
.text:00405176                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:0040517E                 add     edi, 40h ; '@'
.text:00405181                 mov     [esp+28h+Stream], edi ; Stream
.text:00405184                 call    fprintf
.text:00405189                 jmp     loc_405109
.text:0040518E ; ---------------------------------------------------------------------------
.text:0040518E
.text:0040518E loc_40518E:                             ; CODE XREF: sub_405054+116↑j
.text:0040518E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405193                 jmp     short loc_40516C
.text:00405195 ; ---------------------------------------------------------------------------
.text:00405195
.text:00405195 loc_405195:                             ; CODE XREF: sub_405054+5D↑j
.text:00405195                 mov     [esp+28h+Format], (offset loc_40505B+1) ; Format
.text:0040519D                 mov     ecx, ds:_iob
.text:004051A3                 mov     edx, ds:dword_408330
.text:004051A9                 add     ecx, 40h ; '@'
.text:004051AC                 mov     [esp+28h+ArgList], edx
.text:004051B0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004051B3                 call    fprintf
.text:004051B8                 jmp     loc_4050B9
.text:004051B8 ; ---------------------------------------------------------------------------
.text:004051BD                 align 10h
.text:004051C0
.text:004051C0 loc_4051C0:                             ; CODE XREF: sub_405054+33↑j
.text:004051C0                 mov     eax, ds:Str1
.text:004051C5                 cmp     ebx, eax
.text:004051C7                 jz      loc_40513F
.text:004051CD                 mov     [esp+28h+Format], ebx ; Str2
.text:004051D1                 mov     [esp+28h+Stream], eax ; Str1
.text:004051D4                 call    strcmp
.text:004051D9                 test    eax, eax
.text:004051DB                 jz      loc_40513F
.text:004051E1                 jmp     loc_40508D
.text:004051E6 ; ---------------------------------------------------------------------------
.text:004051E6
.text:004051E6 loc_4051E6:                             ; CODE XREF: sub_405054+E5↑j
.text:004051E6                 mov     [esp+28h+Stream], ebp ; Code
.text:004051E9                 call    exit
.text:004051E9 sub_405054      endp ; sp-analysis failed
.text:004051E9
.text:004051E9 ; ---------------------------------------------------------------------------
.text:004051EE                 align 10h
.text:004051F0
.text:004051F0 ; =============== S U B R O U T I N E =======================================
.text:004051F0
.text:004051F0
.text:004051F0 sub_4051F0      proc near               ; CODE XREF: sub_401940+269↑p
.text:004051F0
.text:004051F0 arg_0           = dword ptr  4
.text:004051F0 arg_4           = dword ptr  8
.text:004051F0
.text:004051F0                 mov     edx, [esp+arg_4]
.text:004051F4                 xor     eax, eax
.text:004051F6                 mov     ecx, [esp+arg_0]
.text:004051FA                 cmp     eax, edx
.text:004051FC                 jge     short locret_40520A
.text:004051FE                 fldz
.text:00405200
.text:00405200 loc_405200:                             ; CODE XREF: sub_4051F0+16↓j
.text:00405200                 fst     qword ptr [ecx+eax*8]
.text:00405203                 inc     eax
.text:00405204                 cmp     eax, edx
.text:00405206                 jl      short loc_405200
.text:00405208                 fstp    st
.text:0040520A
.text:0040520A locret_40520A:                          ; CODE XREF: sub_4051F0+C↑j
.text:0040520A                 retn
.text:0040520A sub_4051F0      endp
.text:0040520A
.text:0040520A ; ---------------------------------------------------------------------------
.text:0040520B                 align 10h
.text:00405210
.text:00405210 ; =============== S U B R O U T I N E =======================================
.text:00405210
.text:00405210 ; Attributes: thunk
.text:00405210
.text:00405210 sub_405210      proc near               ; CODE XREF: sub_401DB0:loc_401E7C↑p
.text:00405210                 jmp     sub_4052A0
.text:00405210 sub_405210      endp
.text:00405210
.text:00405210 ; ---------------------------------------------------------------------------
.text:00405215                 align 10h
.text:00405220
.text:00405220 ; =============== S U B R O U T I N E =======================================
.text:00405220
.text:00405220 ; Attributes: thunk
.text:00405220
.text:00405220 sub_405220      proc near               ; CODE XREF: sub_401DB0:loc_401DF0↑p
.text:00405220                 jmp     sub_405410
.text:00405220 sub_405220      endp
.text:00405220
.text:00405220 ; ---------------------------------------------------------------------------
.text:00405225                 align 10h
.text:00405230
.text:00405230 ; =============== S U B R O U T I N E =======================================
.text:00405230
.text:00405230 ; Attributes: thunk
.text:00405230
.text:00405230 sub_405230      proc near               ; CODE XREF: sub_401DB0+2D↑p
.text:00405230                 jmp     sub_405250
.text:00405230 sub_405230      endp
.text:00405230
.text:00405230 ; ---------------------------------------------------------------------------
.text:00405235                 align 10h
.text:00405240
.text:00405240 ; =============== S U B R O U T I N E =======================================
.text:00405240
.text:00405240 ; Attributes: thunk
.text:00405240
.text:00405240 ; int __cdecl sub_405240(char *String)
.text:00405240 sub_405240      proc near               ; CODE XREF: sub_401DB0+28↑p
.text:00405240
.text:00405240 String          = dword ptr  4
.text:00405240
.text:00405240                 jmp     sub_405470
.text:00405240 sub_405240      endp
.text:00405240
.text:00405240 ; ---------------------------------------------------------------------------
.text:00405245                 align 10h
.text:00405250
.text:00405250 ; =============== S U B R O U T I N E =======================================
.text:00405250
.text:00405250
.text:00405250 sub_405250      proc near               ; CODE XREF: sub_405230↑j
.text:00405250                 sub     esp, 0Ch
.text:00405253                 mov     eax, off_40706C
.text:00405258                 call    dword ptr [eax]
.text:0040525A                 add     esp, 0Ch
.text:0040525D                 retn
.text:0040525D sub_405250      endp
.text:0040525D
.text:0040525D ; ---------------------------------------------------------------------------
.text:0040525E                 align 10h
.text:00405260
.text:00405260 ; =============== S U B R O U T I N E =======================================
.text:00405260
.text:00405260
.text:00405260 sub_405260      proc near               ; CODE XREF: sub_405410+31↓p
.text:00405260
.text:00405260 var_C           = dword ptr -0Ch
.text:00405260 var_8           = dword ptr -8
.text:00405260 arg_0           = dword ptr  4
.text:00405260 arg_4           = dword ptr  8
.text:00405260
.text:00405260                 sub     esp, 0Ch
.text:00405263                 mov     edx, [esp+0Ch+arg_4]
.text:00405267                 mov     eax, off_40706C
.text:0040526C                 mov     [esp+0Ch+var_8], edx
.text:00405270                 mov     edx, [esp+0Ch+arg_0]
.text:00405274                 mov     [esp+0Ch+var_C], edx
.text:00405277                 call    dword ptr [eax+4]
.text:0040527A                 add     esp, 0Ch
.text:0040527D                 retn
.text:0040527D sub_405260      endp
.text:0040527D
.text:0040527D ; ---------------------------------------------------------------------------
.text:0040527E                 align 10h
.text:00405280                 sub     esp, 0Ch
.text:00405283                 mov     edx, [esp+10h]
.text:00405287                 mov     eax, off_40706C
.text:0040528C                 mov     [esp], edx
.text:0040528F                 call    dword ptr [eax+10h]
.text:00405292                 add     esp, 0Ch
.text:00405295                 retn
.text:00405295 ; ---------------------------------------------------------------------------
.text:00405296                 align 10h
.text:004052A0
.text:004052A0 ; =============== S U B R O U T I N E =======================================
.text:004052A0
.text:004052A0
.text:004052A0 sub_4052A0      proc near               ; CODE XREF: sub_405210↑j
.text:004052A0                 sub     esp, 0Ch
.text:004052A3                 mov     edx, off_40706C
.text:004052A9                 call    dword ptr [edx+14h]
.text:004052AC                 mov     edx, offset off_407050
.text:004052B1                 mov     off_40706C, edx
.text:004052B7                 add     esp, 0Ch
.text:004052BA                 retn
.text:004052BA sub_4052A0      endp
.text:004052BA
.text:004052BA ; ---------------------------------------------------------------------------
.text:004052BB                 align 10h
.text:004052C0
.text:004052C0 ; =============== S U B R O U T I N E =======================================
.text:004052C0
.text:004052C0
.text:004052C0 sub_4052C0      proc near               ; DATA XREF: .data:off_407050↓o
.text:004052C0                 sub     esp, 0Ch
.text:004052C3                 call    off_407084
.text:004052C9                 test    eax, eax
.text:004052CB                 jz      short loc_4052D8
.text:004052CD                 mov     ecx, offset off_407084
.text:004052D2                 mov     off_40706C, ecx
.text:004052D8
.text:004052D8 loc_4052D8:                             ; CODE XREF: sub_4052C0+B↑j
.text:004052D8                 add     esp, 0Ch
.text:004052DB                 retn
.text:004052DB sub_4052C0      endp
.text:004052DB
.text:004052DB ; ---------------------------------------------------------------------------
.text:004052DC                 align 10h
.text:004052E0
.text:004052E0 ; =============== S U B R O U T I N E =======================================
.text:004052E0
.text:004052E0
.text:004052E0 sub_4052E0      proc near               ; DATA XREF: .data:00407054↓o
.text:004052E0
.text:004052E0 var_C           = dword ptr -0Ch
.text:004052E0 var_8           = dword ptr -8
.text:004052E0 var_4           = dword ptr -4
.text:004052E0 arg_0           = dword ptr  4
.text:004052E0 arg_4           = dword ptr  8
.text:004052E0
.text:004052E0                 sub     esp, 0Ch
.text:004052E3                 mov     [esp+0Ch+var_4], ebx
.text:004052E7                 mov     ebx, [esp+0Ch+arg_4]
.text:004052EB                 call    off_407084
.text:004052F1                 test    eax, eax
.text:004052F3                 jz      short loc_405318
.text:004052F5                 mov     [esp+0Ch+var_8], ebx
.text:004052F9                 mov     edx, [esp+0Ch+arg_0]
.text:004052FD                 mov     eax, offset off_407084
.text:00405302                 mov     off_40706C, eax
.text:00405307                 mov     [esp+0Ch+var_C], edx
.text:0040530A                 call    off_407088
.text:00405310
.text:00405310 loc_405310:                             ; CODE XREF: sub_4052E0+43↓j
.text:00405310                 mov     ebx, [esp+0Ch+var_4]
.text:00405314                 add     esp, 0Ch
.text:00405317                 retn
.text:00405318 ; ---------------------------------------------------------------------------
.text:00405318
.text:00405318 loc_405318:                             ; CODE XREF: sub_4052E0+13↑j
.text:00405318                 mov     dword ptr [ebx], 0
.text:0040531E                 mov     eax, 0FFFFFFFFh
.text:00405323                 jmp     short loc_405310
.text:00405323 sub_4052E0      endp
.text:00405323
.text:00405323 ; ---------------------------------------------------------------------------
.text:00405325                 align 10h
.text:00405330
.text:00405330 ; =============== S U B R O U T I N E =======================================
.text:00405330
.text:00405330
.text:00405330 sub_405330      proc near               ; DATA XREF: .data:00407058↓o
.text:00405330
.text:00405330 var_1C          = dword ptr -1Ch
.text:00405330 var_18          = dword ptr -18h
.text:00405330 var_14          = dword ptr -14h
.text:00405330 var_4           = dword ptr -4
.text:00405330 arg_0           = dword ptr  4
.text:00405330 arg_4           = dword ptr  8
.text:00405330 arg_8           = dword ptr  0Ch
.text:00405330
.text:00405330                 sub     esp, 1Ch
.text:00405333                 mov     [esp+1Ch+var_4], ebx
.text:00405337                 mov     ebx, [esp+1Ch+arg_8]
.text:0040533B                 call    off_407084
.text:00405341                 test    eax, eax
.text:00405343                 jz      short loc_405371
.text:00405345                 mov     [esp+1Ch+var_14], ebx
.text:00405349                 mov     edx, [esp+1Ch+arg_4]
.text:0040534D                 mov     ecx, offset off_407084
.text:00405352                 mov     off_40706C, ecx
.text:00405358                 mov     [esp+1Ch+var_18], edx
.text:0040535C                 mov     edx, [esp+1Ch+arg_0]
.text:00405360                 mov     [esp+1Ch+var_1C], edx
.text:00405363                 call    off_40708C
.text:00405369
.text:00405369 loc_405369:                             ; CODE XREF: sub_405330+4C↓j
.text:00405369                 mov     ebx, [esp+1Ch+var_4]
.text:0040536D                 add     esp, 1Ch
.text:00405370                 retn
.text:00405371 ; ---------------------------------------------------------------------------
.text:00405371
.text:00405371 loc_405371:                             ; CODE XREF: sub_405330+13↑j
.text:00405371                 mov     dword ptr [ebx], 0
.text:00405377                 mov     eax, 0FFFFFFFFh
.text:0040537C                 jmp     short loc_405369
.text:0040537C sub_405330      endp
.text:0040537C
.text:0040537C ; ---------------------------------------------------------------------------
.text:0040537E                 align 10h
.text:00405380
.text:00405380 ; =============== S U B R O U T I N E =======================================
.text:00405380
.text:00405380
.text:00405380 sub_405380      proc near               ; DATA XREF: .data:0040705C↓o
.text:00405380
.text:00405380 var_1C          = dword ptr -1Ch
.text:00405380 var_18          = dword ptr -18h
.text:00405380 var_14          = dword ptr -14h
.text:00405380 var_4           = dword ptr -4
.text:00405380 arg_0           = dword ptr  4
.text:00405380 arg_4           = dword ptr  8
.text:00405380 arg_8           = dword ptr  0Ch
.text:00405380
.text:00405380                 sub     esp, 1Ch
.text:00405383                 mov     [esp+1Ch+var_4], ebx
.text:00405387                 mov     ebx, [esp+1Ch+arg_8]
.text:0040538B                 call    off_407084
.text:00405391                 test    eax, eax
.text:00405393                 jz      short loc_4053C1
.text:00405395                 mov     [esp+1Ch+var_14], ebx
.text:00405399                 mov     edx, [esp+1Ch+arg_4]
.text:0040539D                 mov     ecx, offset off_407084
.text:004053A2                 mov     off_40706C, ecx
.text:004053A8                 mov     [esp+1Ch+var_18], edx
.text:004053AC                 mov     edx, [esp+1Ch+arg_0]
.text:004053B0                 mov     [esp+1Ch+var_1C], edx
.text:004053B3                 call    off_407090
.text:004053B9
.text:004053B9 loc_4053B9:                             ; CODE XREF: sub_405380+4C↓j
.text:004053B9                 mov     ebx, [esp+1Ch+var_4]
.text:004053BD                 add     esp, 1Ch
.text:004053C0                 retn
.text:004053C1 ; ---------------------------------------------------------------------------
.text:004053C1
.text:004053C1 loc_4053C1:                             ; CODE XREF: sub_405380+13↑j
.text:004053C1                 mov     dword ptr [ebx], 0
.text:004053C7                 mov     eax, 0FFFFFFFFh
.text:004053CC                 jmp     short loc_4053B9
.text:004053CC sub_405380      endp
.text:004053CC
.text:004053CC ; ---------------------------------------------------------------------------
.text:004053CE                 align 10h
.text:004053D0
.text:004053D0 ; =============== S U B R O U T I N E =======================================
.text:004053D0
.text:004053D0
.text:004053D0 ; int __cdecl sub_4053D0(void *)
.text:004053D0 sub_4053D0      proc near               ; DATA XREF: .data:00407060↓o
.text:004053D0
.text:004053D0 Buf             = dword ptr -0Ch
.text:004053D0 arg_0           = dword ptr  4
.text:004053D0
.text:004053D0                 sub     esp, 0Ch
.text:004053D3                 call    off_407084
.text:004053D9                 xor     edx, edx
.text:004053DB                 test    eax, eax
.text:004053DD                 jz      short loc_4053F9
.text:004053DF                 mov     edx, offset off_407084
.text:004053E4                 mov     off_40706C, edx
.text:004053EA                 mov     edx, [esp+0Ch+arg_0]
.text:004053EE                 mov     [esp+0Ch+Buf], edx ; Buf
.text:004053F1                 call    off_407094
.text:004053F7                 mov     edx, eax
.text:004053F9
.text:004053F9 loc_4053F9:                             ; CODE XREF: sub_4053D0+D↑j
.text:004053F9                 mov     eax, edx
.text:004053FB                 add     esp, 0Ch
.text:004053FE                 retn
.text:004053FE sub_4053D0      endp
.text:004053FE
.text:004053FE ; ---------------------------------------------------------------------------
.text:004053FF                 align 10h
.text:00405400
.text:00405400 ; =============== S U B R O U T I N E =======================================
.text:00405400
.text:00405400
.text:00405400 nullsub_1       proc near               ; DATA XREF: .data:00407064↓o
.text:00405400                 retn
.text:00405400 nullsub_1       endp
.text:00405400
.text:00405400 ; ---------------------------------------------------------------------------
.text:00405401                 align 10h
.text:00405410
.text:00405410 ; =============== S U B R O U T I N E =======================================
.text:00405410
.text:00405410
.text:00405410 sub_405410      proc near               ; CODE XREF: sub_405220↑j
.text:00405410
.text:00405410 Size            = dword ptr -0Ch
.text:00405410 var_8           = dword ptr -8
.text:00405410 var_4           = dword ptr -4
.text:00405410
.text:00405410                 sub     esp, 0Ch
.text:00405413                 mov     edx, ds:dword_408190
.text:00405419                 test    edx, edx
.text:0040541B                 jnz     short loc_405436
.text:0040541D                 mov     [esp+0Ch+Size], 180h ; Size
.text:00405424                 call    malloc
.text:00405429                 mov     ds:dword_408190, eax
.text:0040542E                 mov     edx, eax
.text:00405430                 xor     eax, eax
.text:00405432                 test    edx, edx
.text:00405434                 jz      short loc_405450
.text:00405436
.text:00405436 loc_405436:                             ; CODE XREF: sub_405410+B↑j
.text:00405436                 mov     [esp+0Ch+Size], edx
.text:00405439                 lea     ecx, [esp+0Ch+var_4]
.text:0040543D                 mov     [esp+0Ch+var_8], ecx
.text:00405441                 call    sub_405260
.text:00405446                 mov     ecx, [esp+0Ch+var_4]
.text:0040544A                 shr     eax, 1Fh
.text:0040544D                 dec     eax
.text:0040544E                 and     eax, ecx
.text:00405450
.text:00405450 loc_405450:                             ; CODE XREF: sub_405410+24↑j
.text:00405450                 add     esp, 0Ch
.text:00405453                 retn
.text:00405453 sub_405410      endp
.text:00405453
.text:00405453 ; ---------------------------------------------------------------------------
.text:00405454                 align 10h
.text:00405460 ; const char aVarRunUtmp_0[]
.text:00405460 aVarRunUtmp_0   db '/var/run/utmp',0    ; DATA XREF: sub_405470:loc_4054C0↓o
.text:00405460                                         ; sub_405470+69↓o ...
.text:0040546E                 align 10h
.text:00405470
.text:00405470 ; =============== S U B R O U T I N E =======================================
.text:00405470
.text:00405470
.text:00405470 ; int __cdecl sub_405470(char *String)
.text:00405470 sub_405470      proc near               ; CODE XREF: sub_405240↑j
.text:00405470
.text:00405470 Str1            = dword ptr -1Ch
.text:00405470 Str2            = dword ptr -18h
.text:00405470 var_8           = dword ptr -8
.text:00405470 var_4           = dword ptr -4
.text:00405470 String          = dword ptr  4
.text:00405470
.text:00405470                 sub     esp, 1Ch
.text:00405473                 mov     edx, off_40706C
.text:00405479                 mov     [esp+1Ch+var_8], ebx
.text:0040547D                 mov     ebx, [esp+1Ch+String]
.text:00405481                 mov     [esp+1Ch+var_4], esi
.text:00405485                 mov     esi, 0FFFFFFFFh
.text:0040548A                 call    dword ptr [edx+14h]
.text:0040548D                 mov     [esp+1Ch+Str1], ebx ; Str1
.text:00405490                 mov     edx, Str2
.text:00405496                 mov     eax, offset off_407050
.text:0040549B                 mov     off_40706C, eax
.text:004054A0                 mov     [esp+1Ch+Str2], edx ; Str2
.text:004054A4                 call    strcmp
.text:004054A9                 test    eax, eax
.text:004054AB                 jnz     short loc_4054C0
.text:004054AD
.text:004054AD loc_4054AD:                             ; CODE XREF: sub_405470+83↓j
.text:004054AD                                         ; sub_405470+AD↓j
.text:004054AD                 xor     esi, esi
.text:004054AF
.text:004054AF loc_4054AF:                             ; CODE XREF: sub_405470+91↓j
.text:004054AF                 mov     eax, esi
.text:004054B1                 mov     ebx, [esp+1Ch+var_8]
.text:004054B5                 mov     esi, [esp+1Ch+var_4]
.text:004054B9                 add     esp, 1Ch
.text:004054BC                 retn
.text:004054BC ; ---------------------------------------------------------------------------
.text:004054BD                 align 10h
.text:004054C0
.text:004054C0 loc_4054C0:                             ; CODE XREF: sub_405470+3B↑j
.text:004054C0                 mov     [esp+1Ch+Str2], offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:004054C8                 mov     [esp+1Ch+Str1], ebx ; Str1
.text:004054CB                 call    strcmp
.text:004054D0                 test    eax, eax
.text:004054D2                 jnz     short loc_4054F5
.text:004054D4                 mov     eax, Str2
.text:004054D9                 cmp     eax, offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:004054DE                 jz      short loc_4054E8
.text:004054E0                 mov     [esp+1Ch+Str1], eax ; Block
.text:004054E3                 call    free
.text:004054E8
.text:004054E8 loc_4054E8:                             ; CODE XREF: sub_405470+6E↑j
.text:004054E8                 mov     ecx, offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:004054ED                 mov     Str2, ecx
.text:004054F3                 jmp     short loc_4054AD
.text:004054F5 ; ---------------------------------------------------------------------------
.text:004054F5
.text:004054F5 loc_4054F5:                             ; CODE XREF: sub_405470+62↑j
.text:004054F5                 mov     [esp+1Ch+Str1], ebx ; String
.text:004054F8                 call    _strdup
.text:004054FD                 test    eax, eax
.text:004054FF                 mov     ebx, eax
.text:00405501                 jz      short loc_4054AF
.text:00405503                 mov     eax, Str2
.text:00405508                 cmp     eax, offset aVarRunUtmp_0 ; "/var/run/utmp"
.text:0040550D                 jz      short loc_405517
.text:0040550F                 mov     [esp+1Ch+Str1], eax ; Block
.text:00405512                 call    free
.text:00405517
.text:00405517 loc_405517:                             ; CODE XREF: sub_405470+9D↑j
.text:00405517                 mov     Str2, ebx
.text:0040551D                 jmp     short loc_4054AD
.text:0040551D sub_405470      endp
.text:0040551D
.text:0040551D ; ---------------------------------------------------------------------------
.text:0040551F                 align 10h
.text:00405520
.text:00405520 ; =============== S U B R O U T I N E =======================================
.text:00405520
.text:00405520
.text:00405520 sub_405520      proc near               ; CODE XREF: sub_4052C0+3↑p
.text:00405520                                         ; sub_4052E0+B↑p ...
.text:00405520
.text:00405520 FileHandle      = dword ptr -1Ch
.text:00405520 Offset          = qword ptr -18h
.text:00405520 Origin          = dword ptr -10h
.text:00405520 var_4           = dword ptr -4
.text:00405520
.text:00405520                 sub     esp, 1Ch
.text:00405523                 mov     eax, FileHandle
.text:00405528                 mov     [esp+1Ch+var_4], ebx
.text:0040552C                 test    eax, eax
.text:0040552E                 js      short loc_405580
.text:00405530
.text:00405530 loc_405530:                             ; CODE XREF: sub_405520+C5↓j
.text:00405530                 mov     [esp+1Ch+Origin], 0 ; Origin
.text:00405538                 mov     ebx, 0FFFFFFFFh
.text:0040553D                 mov     dword ptr [esp+1Ch+Offset], 0 ; Offset
.text:00405545                 mov     dword ptr [esp+1Ch+Offset+4], 0
.text:0040554D                 mov     [esp+1Ch+FileHandle], eax ; FileHandle
.text:00405550                 call    _lseeki64
.text:00405555                 mov     word ptr ds:dword_4081B0, bx
.text:0040555C                 xor     edx, edx
.text:0040555E                 xor     eax, eax
.text:00405560                 mov     ds:dword_4081A0, edx
.text:00405566                 mov     edx, 1
.text:0040556B                 mov     ds:dword_4081A4, eax
.text:00405570
.text:00405570 loc_405570:                             ; CODE XREF: sub_405520+DA↓j
.text:00405570                                         ; sub_405520+F9↓j
.text:00405570                 mov     ebx, [esp+1Ch+var_4]
.text:00405574                 mov     eax, edx
.text:00405576                 add     esp, 1Ch
.text:00405579                 retn
.text:00405579 ; ---------------------------------------------------------------------------
.text:0040557A                 align 10h
.text:00405580
.text:00405580 loc_405580:                             ; CODE XREF: sub_405520+E↑j
.text:00405580                 mov     dword ptr [esp+1Ch+Offset], 2 ; OpenFlag
.text:00405588                 mov     ebx, Str2
.text:0040558E                 mov     [esp+1Ch+FileHandle], ebx ; FileName
.text:00405591                 call    _open
.text:00405596                 mov     FileHandle, eax
.text:0040559B                 inc     eax
.text:0040559C                 jz      short loc_4055FF
.text:0040559E
.text:0040559E loc_40559E:                             ; CODE XREF: sub_405520+F7↓j
.text:0040559E                 mov     dword ptr [esp+1Ch+Offset+4], 0
.text:004055A6                 mov     edx, FileHandle
.text:004055AC                 mov     dword ptr [esp+1Ch+Offset], 1
.text:004055B4                 mov     [esp+1Ch+FileHandle], edx
.text:004055B7                 call    sub_406270
.text:004055BC                 test    eax, eax
.text:004055BE                 js      short loc_4055DD
.text:004055C0                 mov     dword ptr [esp+1Ch+Offset], 2
.text:004055C8                 mov     edx, FileHandle
.text:004055CE                 or      eax, 1
.text:004055D1                 mov     dword ptr [esp+1Ch+Offset+4], eax
.text:004055D5                 mov     [esp+1Ch+FileHandle], edx
.text:004055D8                 call    sub_406270
.text:004055DD
.text:004055DD loc_4055DD:                             ; CODE XREF: sub_405520+9E↑j
.text:004055DD                 inc     eax
.text:004055DE                 jz      short loc_4055EA
.text:004055E0                 mov     eax, FileHandle
.text:004055E5                 jmp     loc_405530
.text:004055EA ; ---------------------------------------------------------------------------
.text:004055EA
.text:004055EA loc_4055EA:                             ; CODE XREF: sub_405520+BE↑j
.text:004055EA                 mov     ecx, FileHandle
.text:004055F0                 mov     [esp+1Ch+FileHandle], ecx ; FileHandle
.text:004055F3                 call    _close
.text:004055F8                 xor     edx, edx
.text:004055FA                 jmp     loc_405570
.text:004055FF ; ---------------------------------------------------------------------------
.text:004055FF
.text:004055FF loc_4055FF:                             ; CODE XREF: sub_405520+7C↑j
.text:004055FF                 mov     dword ptr [esp+1Ch+Offset], 0 ; OpenFlag
.text:00405607                 mov     [esp+1Ch+FileHandle], ebx ; FileName
.text:0040560A                 call    _open
.text:0040560F                 mov     FileHandle, eax
.text:00405614                 xor     edx, edx
.text:00405616                 inc     eax
.text:00405617                 jnz     short loc_40559E
.text:00405619                 jmp     loc_405570
.text:00405619 sub_405520      endp
.text:00405619
.text:00405619 ; ---------------------------------------------------------------------------
.text:0040561E                 align 10h
.text:00405620 aLibc05SrcLogin db '../../libc-0.5-src/login/utmp_file.c',0
.text:00405620                                         ; DATA XREF: sub_405660+136↓o
.text:00405620                                         ; sub_4057B0+196↓o ...
.text:00405645 aFileFd0        db 'file_fd >= 0',0     ; DATA XREF: sub_405660+13E↓o
.text:00405645                                         ; sub_4057B0+19E↓o ...
.text:00405652                 align 10h
.text:00405660
.text:00405660 ; =============== S U B R O U T I N E =======================================
.text:00405660
.text:00405660
.text:00405660 sub_405660      proc near               ; CODE XREF: sub_4052E0+2A↑p
.text:00405660                                         ; DATA XREF: .data:off_407088↓o
.text:00405660
.text:00405660 FileHandle      = dword ptr -5Ch
.text:00405660 DstBuf          = dword ptr -58h
.text:00405660 MaxCharCount    = dword ptr -54h
.text:00405660 var_2C          = word ptr -2Ch
.text:00405660 var_2A          = word ptr -2Ah
.text:00405660 arg_0           = dword ptr  4
.text:00405660 arg_4           = dword ptr  8
.text:00405660
.text:00405660                 push    ebp
.text:00405661                 push    edi
.text:00405662                 push    esi
.text:00405663                 push    ebx
.text:00405664                 sub     esp, 4Ch
.text:00405667                 mov     esi, FileHandle
.text:0040566D                 mov     ebx, [esp+5Ch+arg_0]
.text:00405671                 mov     ebp, [esp+5Ch+arg_4]
.text:00405675                 test    esi, esi
.text:00405677                 js      loc_40578E
.text:0040567D                 mov     ecx, ds:dword_4081A0
.text:00405683                 mov     eax, ds:dword_4081A4
.text:00405688                 and     ecx, eax
.text:0040568A                 inc     ecx
.text:0040568B                 jz      loc_405780
.text:00405691                 cld
.text:00405692                 xor     eax, eax
.text:00405694                 lea     edi, [esp+5Ch+var_2C]
.text:00405698                 mov     ecx, 4
.text:0040569D                 rep stosd
.text:0040569F                 mov     [esp+5Ch+var_2C], 1
.text:004056A6                 lea     edi, [esp+5Ch+var_2C]
.text:004056AA                 mov     [esp+5Ch+var_2A], 0
.text:004056B1                 mov     [esp+5Ch+MaxCharCount], edi
.text:004056B5                 mov     [esp+5Ch+DstBuf], 9
.text:004056BD                 mov     [esp+5Ch+FileHandle], esi
.text:004056C0                 call    sub_406270
.text:004056C5                 test    eax, eax
.text:004056C7                 js      loc_405780
.text:004056CD                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:004056D5                 mov     ecx, FileHandle
.text:004056DB                 mov     [esp+5Ch+DstBuf], offset dword_4081B0 ; DstBuf
.text:004056E3                 mov     [esp+5Ch+FileHandle], ecx ; FileHandle
.text:004056E6                 call    _read
.text:004056EB                 mov     [esp+5Ch+var_2C], 3
.text:004056F2                 mov     edx, FileHandle
.text:004056F8                 mov     esi, eax
.text:004056FA                 mov     [esp+5Ch+MaxCharCount], edi
.text:004056FE                 mov     [esp+5Ch+DstBuf], 9
.text:00405706                 mov     [esp+5Ch+FileHandle], edx
.text:00405709                 call    sub_406270
.text:0040570E                 cmp     esi, 180h
.text:00405714                 jnz     short loc_405762
.text:00405716                 add     ds:dword_4081A0, 180h
.text:00405720                 mov     edi, ebx
.text:00405722                 mov     esi, offset dword_4081B0
.text:00405727                 mov     eax, 180h
.text:0040572C                 adc     ds:dword_4081A4, 0
.text:00405733                 test    bl, 4
.text:00405736                 jz      short loc_40574D
.text:00405738                 mov     edi, ds:dword_4081B0
.text:0040573E                 mov     esi, offset unk_4081B4
.text:00405743                 mov     eax, 17Ch
.text:00405748                 mov     [ebx], edi
.text:0040574A                 lea     edi, [ebx+4]
.text:0040574D
.text:0040574D loc_40574D:                             ; CODE XREF: sub_405660+D6↑j
.text:0040574D                 cld
.text:0040574E                 mov     ecx, eax
.text:00405750                 shr     ecx, 2
.text:00405753                 rep movsd
.text:00405755                 mov     [ebp+0], ebx
.text:00405758                 xor     eax, eax
.text:0040575A
.text:0040575A loc_40575A:                             ; CODE XREF: sub_405660+12C↓j
.text:0040575A                 add     esp, 4Ch
.text:0040575D                 pop     ebx
.text:0040575E                 pop     esi
.text:0040575F                 pop     edi
.text:00405760                 pop     ebp
.text:00405761                 retn
.text:00405762 ; ---------------------------------------------------------------------------
.text:00405762
.text:00405762 loc_405762:                             ; CODE XREF: sub_405660+B4↑j
.text:00405762                 test    esi, esi
.text:00405764                 jz      short loc_405780
.text:00405766                 mov     ebx, 0FFFFFFFFh
.text:0040576B                 mov     esi, 0FFFFFFFFh
.text:00405770                 mov     ds:dword_4081A0, ebx
.text:00405776                 mov     ds:dword_4081A4, esi
.text:0040577C                 lea     esi, [esi+0]
.text:00405780
.text:00405780 loc_405780:                             ; CODE XREF: sub_405660+2B↑j
.text:00405780                                         ; sub_405660+67↑j ...
.text:00405780                 mov     dword ptr [ebp+0], 0
.text:00405787                 mov     eax, 0FFFFFFFFh
.text:0040578C                 jmp     short loc_40575A
.text:0040578E ; ---------------------------------------------------------------------------
.text:0040578E
.text:0040578E loc_40578E:                             ; CODE XREF: sub_405660+17↑j
.text:0040578E                 mov     [esp+5Ch+MaxCharCount], 0A3h ; '£'
.text:00405796                 mov     [esp+5Ch+DstBuf], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:0040579E                 mov     [esp+5Ch+FileHandle], offset aFileFd0 ; "file_fd >= 0"
.text:004057A5                 call    _assert
.text:004057A5 sub_405660      endp
.text:004057A5
.text:004057A5 ; ---------------------------------------------------------------------------
.text:004057AA                 align 10h
.text:004057B0
.text:004057B0 ; =============== S U B R O U T I N E =======================================
.text:004057B0
.text:004057B0
.text:004057B0 sub_4057B0      proc near               ; CODE XREF: sub_405380+33↑p
.text:004057B0                                         ; DATA XREF: .data:off_407090↓o
.text:004057B0
.text:004057B0 FileHandle      = dword ptr -5Ch
.text:004057B0 DstBuf          = dword ptr -58h
.text:004057B0 MaxCharCount    = dword ptr -54h
.text:004057B0 var_2C          = word ptr -2Ch
.text:004057B0 var_2A          = word ptr -2Ah
.text:004057B0 arg_0           = dword ptr  4
.text:004057B0 arg_4           = dword ptr  8
.text:004057B0 arg_8           = dword ptr  0Ch
.text:004057B0
.text:004057B0                 push    ebp
.text:004057B1                 push    edi
.text:004057B2                 push    esi
.text:004057B3                 push    ebx
.text:004057B4                 sub     esp, 4Ch
.text:004057B7                 mov     ebx, FileHandle
.text:004057BD                 mov     esi, [esp+5Ch+arg_0]
.text:004057C1                 mov     ebp, [esp+5Ch+arg_8]
.text:004057C5                 test    ebx, ebx
.text:004057C7                 js      loc_40593E
.text:004057CD                 mov     ecx, ds:dword_4081A0
.text:004057D3                 mov     eax, ds:dword_4081A4
.text:004057D8                 and     ecx, eax
.text:004057DA                 inc     ecx
.text:004057DB                 jz      loc_405930
.text:004057E1                 cld
.text:004057E2                 xor     eax, eax
.text:004057E4                 lea     edi, [esp+5Ch+var_2C]
.text:004057E8                 mov     ecx, 4
.text:004057ED                 lea     edx, [esp+5Ch+var_2C]
.text:004057F1                 rep stosd
.text:004057F3                 mov     [esp+5Ch+var_2C], 1
.text:004057FA                 mov     [esp+5Ch+var_2A], 0
.text:00405801                 mov     [esp+5Ch+MaxCharCount], edx
.text:00405805                 mov     [esp+5Ch+DstBuf], 9
.text:0040580D                 mov     [esp+5Ch+FileHandle], ebx
.text:00405810                 call    sub_406270
.text:00405815                 test    eax, eax
.text:00405817                 js      loc_405927
.text:0040581D                 lea     esi, [esi+0]
.text:00405820
.text:00405820 loc_405820:                             ; CODE XREF: sub_4057B0+B8↓j
.text:00405820                                         ; sub_4057B0+D7↓j
.text:00405820                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:00405828                 mov     edi, FileHandle
.text:0040582E                 mov     [esp+5Ch+DstBuf], offset dword_4081B0 ; DstBuf
.text:00405836                 mov     [esp+5Ch+FileHandle], edi ; FileHandle
.text:00405839                 call    _read
.text:0040583E                 cmp     eax, 180h
.text:00405843                 jnz     loc_4058FD
.text:00405849                 movzx   edx, word ptr ds:dword_4081B0
.text:00405850                 add     ds:dword_4081A0, 180h
.text:0040585A                 adc     ds:dword_4081A4, 0
.text:00405861                 sub     edx, 6
.text:00405864                 cmp     dx, 1
.text:00405868                 ja      short loc_405820
.text:0040586A                 mov     [esp+5Ch+MaxCharCount], 20h ; ' ' ; MaxCount
.text:00405872                 lea     ecx, [esi+8]
.text:00405875                 mov     [esp+5Ch+DstBuf], offset byte_4081B8 ; Str2
.text:0040587D                 mov     [esp+5Ch+FileHandle], ecx ; Str1
.text:00405880                 call    strncmp
.text:00405885                 test    eax, eax
.text:00405887                 jnz     short loc_405820
.text:00405889                 test    byte ptr [esp+5Ch+arg_4], 4
.text:0040588E                 mov     esi, offset dword_4081B0
.text:00405893                 mov     edi, [esp+5Ch+arg_4]
.text:00405897                 mov     eax, 180h
.text:0040589C                 jz      short loc_4058B7
.text:0040589E                 mov     esi, ds:dword_4081B0
.text:004058A4                 mov     eax, 17Ch
.text:004058A9                 mov     [edi], esi
.text:004058AB                 mov     edi, [esp+5Ch+arg_4]
.text:004058AF                 mov     esi, offset unk_4081B4
.text:004058B4                 add     edi, 4
.text:004058B7
.text:004058B7 loc_4058B7:                             ; CODE XREF: sub_4057B0+EC↑j
.text:004058B7                 cld
.text:004058B8                 mov     ecx, eax
.text:004058BA                 shr     ecx, 2
.text:004058BD                 rep movsd
.text:004058BF                 mov     eax, [esp+5Ch+arg_4]
.text:004058C3                 mov     [ebp+0], eax
.text:004058C6
.text:004058C6 loc_4058C6:                             ; CODE XREF: sub_4057B0+175↓j
.text:004058C6                 mov     [esp+5Ch+var_2C], 3
.text:004058CD                 mov     ebx, FileHandle
.text:004058D3                 lea     edi, [esp+5Ch+var_2C]
.text:004058D7                 mov     [esp+5Ch+MaxCharCount], edi
.text:004058DB                 mov     [esp+5Ch+DstBuf], 9
.text:004058E3                 mov     [esp+5Ch+FileHandle], ebx
.text:004058E6                 call    sub_406270
.text:004058EB
.text:004058EB loc_4058EB:                             ; CODE XREF: sub_4057B0+17E↓j
.text:004058EB                 xor     eax, eax
.text:004058ED                 cmp     dword ptr [ebp+0], 0
.text:004058F1                 setnz   al
.text:004058F4                 dec     eax
.text:004058F5
.text:004058F5 loc_4058F5:                             ; CODE XREF: sub_4057B0+18C↓j
.text:004058F5                 add     esp, 4Ch
.text:004058F8                 pop     ebx
.text:004058F9                 pop     esi
.text:004058FA                 pop     edi
.text:004058FB                 pop     ebp
.text:004058FC                 retn
.text:004058FD ; ---------------------------------------------------------------------------
.text:004058FD
.text:004058FD loc_4058FD:                             ; CODE XREF: sub_4057B0+93↑j
.text:004058FD                 call    _errno
.text:00405902                 mov     dword ptr [eax], 3
.text:00405908                 mov     ebx, 0FFFFFFFFh
.text:0040590D                 mov     ecx, 0FFFFFFFFh
.text:00405912                 mov     ds:dword_4081A0, ebx
.text:00405918                 mov     ds:dword_4081A4, ecx
.text:0040591E                 mov     dword ptr [ebp+0], 0
.text:00405925                 jmp     short loc_4058C6
.text:00405927 ; ---------------------------------------------------------------------------
.text:00405927
.text:00405927 loc_405927:                             ; CODE XREF: sub_4057B0+67↑j
.text:00405927                 mov     dword ptr [ebp+0], 0
.text:0040592E                 jmp     short loc_4058EB
.text:00405930 ; ---------------------------------------------------------------------------
.text:00405930
.text:00405930 loc_405930:                             ; CODE XREF: sub_4057B0+2B↑j
.text:00405930                 mov     dword ptr [ebp+0], 0
.text:00405937                 mov     eax, 0FFFFFFFFh
.text:0040593C                 jmp     short loc_4058F5
.text:0040593E ; ---------------------------------------------------------------------------
.text:0040593E
.text:0040593E loc_40593E:                             ; CODE XREF: sub_4057B0+17↑j
.text:0040593E                 mov     [esp+5Ch+MaxCharCount], 129h
.text:00405946                 mov     [esp+5Ch+DstBuf], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:0040594E                 mov     [esp+5Ch+FileHandle], offset aFileFd0 ; "file_fd >= 0"
.text:00405955                 call    _assert
.text:00405955 sub_4057B0      endp
.text:00405955
.text:00405955 ; ---------------------------------------------------------------------------
.text:0040595A                 align 10h
.text:00405960
.text:00405960 ; =============== S U B R O U T I N E =======================================
.text:00405960
.text:00405960
.text:00405960 ; int __cdecl sub_405960(void *Buf)
.text:00405960 sub_405960      proc near               ; CODE XREF: sub_4053D0+21↑p
.text:00405960                                         ; DATA XREF: .data:off_407094↓o
.text:00405960
.text:00405960 Str1            = dword ptr -1ECh
.text:00405960 Str2            = dword ptr -1E8h
.text:00405960 MaxCount        = dword ptr -1E4h
.text:00405960 Origin          = dword ptr -1E0h
.text:00405960 var_1D0         = dword ptr -1D0h
.text:00405960 var_1AC         = word ptr -1ACh
.text:00405960 var_1AA         = word ptr -1AAh
.text:00405960 var_19C         = byte ptr -19Ch
.text:00405960 Buf             = dword ptr  4
.text:00405960
.text:00405960                 push    ebp
.text:00405961                 push    edi
.text:00405962                 push    esi
.text:00405963                 push    ebx
.text:00405964                 sub     esp, 1DCh
.text:0040596A                 mov     ebx, FileHandle
.text:00405970                 mov     ebp, [esp+1ECh+Buf]
.text:00405977                 test    ebx, ebx
.text:00405979                 js      loc_405C70
.text:0040597F                 mov     edx, ds:dword_4081A4
.text:00405985                 mov     eax, ds:dword_4081A0
.text:0040598A                 test    edx, edx
.text:0040598C                 js      loc_405C00
.text:00405992                 test    edx, edx
.text:00405994                 jle     loc_405C66
.text:0040599A
.text:0040599A loc_40599A:                             ; CODE XREF: sub_405960+30B↓j
.text:0040599A                 movzx   ecx, word ptr ds:dword_4081B0
.text:004059A1                 mov     edx, [ebp+0]
.text:004059A4                 cmp     cx, dx
.text:004059A7                 jz      loc_405C40
.text:004059AD
.text:004059AD loc_4059AD:                             ; CODE XREF: sub_405960+2FB↓j
.text:004059AD                 lea     ebx, [ecx-5]
.text:004059B0                 cmp     bx, 3
.text:004059B4                 ja      loc_405C00
.text:004059BA                 lea     ecx, [edx-5]
.text:004059BD                 cmp     cx, 3
.text:004059C1                 ja      loc_405C00
.text:004059C7                 cmp     ds:byte_4081D8, 0
.text:004059CE                 jz      short loc_4059DA
.text:004059D0                 cmp     byte ptr [ebp+28h], 0
.text:004059D4                 jnz     loc_405C1F
.text:004059DA
.text:004059DA loc_4059DA:                             ; CODE XREF: sub_405960+6E↑j
.text:004059DA                 mov     [esp+1ECh+MaxCount], 20h ; ' ' ; MaxCount
.text:004059E2                 lea     esi, [ebp+8]
.text:004059E5                 mov     [esp+1ECh+Str2], esi ; Str2
.text:004059E9                 mov     [esp+1ECh+Str1], offset byte_4081B8 ; Str1
.text:004059F0
.text:004059F0 loc_4059F0:                             ; CODE XREF: sub_405960+2D5↓j
.text:004059F0                 call    strncmp
.text:004059F5                 test    eax, eax
.text:004059F7                 jnz     loc_405C00
.text:004059FD                 mov     ebx, FileHandle
.text:00405A03                 lea     esi, [esi+0]
.text:00405A09                 lea     edi, [edi+0]
.text:00405A10
.text:00405A10 loc_405A10:                             ; CODE XREF: sub_405960+2E7↓j
.text:00405A10                                         ; sub_405960+2F1↓j ...
.text:00405A10                 mov     [esp+1ECh+var_1D0], 1
.text:00405A18                 nop
.text:00405A19                 lea     esi, [esi+0]
.text:00405A20
.text:00405A20 loc_405A20:                             ; CODE XREF: sub_405960+2BA↓j
.text:00405A20                 cld
.text:00405A21                 xor     eax, eax
.text:00405A23                 lea     edi, [esp+1ECh+var_1AC]
.text:00405A27                 mov     ecx, 4
.text:00405A2C                 rep stosd
.text:00405A2E                 mov     [esp+1ECh+Str1], ebx
.text:00405A31                 lea     edi, [esp+1ECh+var_1AC]
.text:00405A35                 xor     ebx, ebx
.text:00405A37                 mov     [esp+1ECh+var_1AC], 2
.text:00405A3E                 mov     [esp+1ECh+var_1AA], 0
.text:00405A45                 mov     [esp+1ECh+MaxCount], edi
.text:00405A49                 mov     [esp+1ECh+Str2], 9
.text:00405A51                 call    sub_406270
.text:00405A56                 test    eax, eax
.text:00405A58                 js      loc_405AF5
.text:00405A5E                 mov     ebx, [esp+1ECh+var_1D0]
.text:00405A62                 test    ebx, ebx
.text:00405A64                 js      loc_405B40
.text:00405A6A                 mov     [esp+1ECh+Origin], 0 ; Origin
.text:00405A72                 mov     ebx, ds:dword_4081A0
.text:00405A78                 mov     esi, ds:dword_4081A4
.text:00405A7E                 mov     edx, FileHandle
.text:00405A84                 add     ebx, 0FFFFFE80h
.text:00405A8A                 adc     esi, 0FFFFFFFFh
.text:00405A8D                 mov     ds:dword_4081A0, ebx
.text:00405A93                 mov     ds:dword_4081A4, esi
.text:00405A99                 mov     [esp+1ECh+Str2], ebx ; Offset
.text:00405A9D                 mov     [esp+1ECh+MaxCount], esi
.text:00405AA1                 mov     [esp+1ECh+Str1], edx ; FileHandle
.text:00405AA4                 call    _lseeki64
.text:00405AA9
.text:00405AA9 loc_405AA9:                             ; CODE XREF: sub_405960+238↓j
.text:00405AA9                                         ; sub_405960+290↓j
.text:00405AA9                 mov     [esp+1ECh+MaxCount], 180h ; MaxCharCount
.text:00405AB1                 mov     ecx, FileHandle
.text:00405AB7                 mov     [esp+1ECh+Str2], ebp ; Buf
.text:00405ABB                 mov     [esp+1ECh+Str1], ecx ; FileHandle
.text:00405ABE                 call    _write
.text:00405AC3                 cmp     eax, 180h
.text:00405AC8                 jz      short loc_405B26
.text:00405ACA                 mov     ebp, [esp+1ECh+var_1D0]
.text:00405ACE                 test    ebp, ebp
.text:00405AD0                 js      short loc_405B02
.text:00405AD2
.text:00405AD2 loc_405AD2:                             ; CODE XREF: sub_405960+1C4↓j
.text:00405AD2                 xor     ebx, ebx
.text:00405AD4
.text:00405AD4 loc_405AD4:                             ; CODE XREF: sub_405960+1D9↓j
.text:00405AD4                                         ; sub_405960+296↓j
.text:00405AD4                 mov     [esp+1ECh+MaxCount], edi
.text:00405AD8                 mov     edi, FileHandle
.text:00405ADE                 mov     [esp+1ECh+var_1AC], 3
.text:00405AE5                 mov     [esp+1ECh+Str2], 9
.text:00405AED                 mov     [esp+1ECh+Str1], edi
.text:00405AF0                 call    sub_406270
.text:00405AF5
.text:00405AF5 loc_405AF5:                             ; CODE XREF: sub_405960+F8↑j
.text:00405AF5                 add     esp, 1DCh
.text:00405AFB                 mov     eax, ebx
.text:00405AFD                 pop     ebx
.text:00405AFE                 pop     esi
.text:00405AFF                 pop     edi
.text:00405B00                 pop     ebp
.text:00405B01                 retn
.text:00405B02 ; ---------------------------------------------------------------------------
.text:00405B02
.text:00405B02 loc_405B02:                             ; CODE XREF: sub_405960+170↑j
.text:00405B02                 mov     ebx, ds:dword_4081A0
.text:00405B08                 mov     esi, ds:dword_4081A4
.text:00405B0E                 mov     edx, FileHandle
.text:00405B14                 mov     [esp+1ECh+Str2], ebx
.text:00405B18                 mov     [esp+1ECh+MaxCount], esi
.text:00405B1C                 mov     [esp+1ECh+Str1], edx
.text:00405B1F                 call    sub_4060A0
.text:00405B24                 jmp     short loc_405AD2
.text:00405B26 ; ---------------------------------------------------------------------------
.text:00405B26
.text:00405B26 loc_405B26:                             ; CODE XREF: sub_405960+168↑j
.text:00405B26                 add     ds:dword_4081A0, 180h
.text:00405B30                 mov     ebx, ebp
.text:00405B32                 adc     ds:dword_4081A4, 0
.text:00405B39                 jmp     short loc_405AD4
.text:00405B39 ; ---------------------------------------------------------------------------
.text:00405B3B                 align 10h
.text:00405B40
.text:00405B40 loc_405B40:                             ; CODE XREF: sub_405960+104↑j
.text:00405B40                 mov     [esp+1ECh+Origin], 2 ; Origin
.text:00405B48                 mov     ecx, FileHandle
.text:00405B4E                 mov     [esp+1ECh+Str2], 0 ; Offset
.text:00405B56                 mov     [esp+1ECh+MaxCount], 0
.text:00405B5E                 mov     [esp+1ECh+Str1], ecx ; FileHandle
.text:00405B61                 call    _lseeki64
.text:00405B66                 mov     ds:dword_4081A0, eax
.text:00405B6B                 mov     esi, eax
.text:00405B6D                 mov     ebx, eax
.text:00405B6F                 mov     [esp+1ECh+MaxCount], 180h
.text:00405B77                 sar     esi, 1Fh
.text:00405B7A                 mov     ds:dword_4081A4, esi
.text:00405B80                 mov     [esp+1ECh+Origin], 0
.text:00405B88                 mov     [esp+1ECh+Str1], eax
.text:00405B8B                 mov     [esp+1ECh+Str2], esi
.text:00405B8F                 call    sub_4068E0
.text:00405B94                 mov     ecx, edx
.text:00405B96                 or      ecx, eax
.text:00405B98                 jz      loc_405AA9
.text:00405B9E                 sub     ebx, eax
.text:00405BA0                 mov     ecx, ebx
.text:00405BA2                 sbb     esi, edx
.text:00405BA4                 xor     ebx, ebx
.text:00405BA6                 mov     ds:dword_4081A4, esi
.text:00405BAC                 mov     [esp+1ECh+MaxCount], esi
.text:00405BB0                 mov     esi, FileHandle
.text:00405BB6                 mov     ds:dword_4081A0, ecx
.text:00405BBC                 mov     [esp+1ECh+Str2], ecx
.text:00405BC0                 mov     [esp+1ECh+Str1], esi
.text:00405BC3                 call    sub_4060A0
.text:00405BC8                 mov     [esp+1ECh+Origin], 2 ; Origin
.text:00405BD0                 mov     edx, FileHandle
.text:00405BD6                 mov     [esp+1ECh+Str2], 0 ; Offset
.text:00405BDE                 mov     [esp+1ECh+MaxCount], 0
.text:00405BE6                 mov     [esp+1ECh+Str1], edx ; FileHandle
.text:00405BE9                 call    _lseeki64
.text:00405BEE                 test    eax, eax
.text:00405BF0                 jns     loc_405AA9
.text:00405BF6                 jmp     loc_405AD4
.text:00405BF6 ; ---------------------------------------------------------------------------
.text:00405BFB                 align 10h
.text:00405C00
.text:00405C00 loc_405C00:                             ; CODE XREF: sub_405960+2C↑j
.text:00405C00                                         ; sub_405960+54↑j ...
.text:00405C00                 mov     [esp+1ECh+Str1], ebp ; int
.text:00405C03                 lea     edi, [esp+1ECh+var_19C]
.text:00405C07                 mov     [esp+1ECh+Str2], edi ; void *
.text:00405C0B                 call    sub_405EF0
.text:00405C10                 mov     [esp+1ECh+var_1D0], eax
.text:00405C14                 mov     ebx, FileHandle
.text:00405C1A                 jmp     loc_405A20
.text:00405C1F ; ---------------------------------------------------------------------------
.text:00405C1F
.text:00405C1F loc_405C1F:                             ; CODE XREF: sub_405960+74↑j
.text:00405C1F                 mov     [esp+1ECh+MaxCount], 4
.text:00405C27                 lea     edx, [ebp+28h]
.text:00405C2A                 mov     [esp+1ECh+Str2], edx
.text:00405C2E                 mov     [esp+1ECh+Str1], offset byte_4081D8
.text:00405C35                 jmp     loc_4059F0
.text:00405C35 ; ---------------------------------------------------------------------------
.text:00405C3A                 align 10h
.text:00405C40
.text:00405C40 loc_405C40:                             ; CODE XREF: sub_405960+47↑j
.text:00405C40                 lea     esi, [edx-1]
.text:00405C43                 cmp     si, 1
.text:00405C47                 jbe     loc_405A10
.text:00405C4D                 cmp     dx, 4
.text:00405C51                 jz      loc_405A10
.text:00405C57                 cmp     dx, 3
.text:00405C5B                 jnz     loc_4059AD
.text:00405C61                 jmp     loc_405A10
.text:00405C66 ; ---------------------------------------------------------------------------
.text:00405C66
.text:00405C66 loc_405C66:                             ; CODE XREF: sub_405960+34↑j
.text:00405C66                 cmp     eax, 0
.text:00405C69                 jbe     short loc_405C00
.text:00405C6B                 jmp     loc_40599A
.text:00405C70 ; ---------------------------------------------------------------------------
.text:00405C70
.text:00405C70 loc_405C70:                             ; CODE XREF: sub_405960+19↑j
.text:00405C70                 mov     [esp+1ECh+MaxCount], 160h
.text:00405C78                 mov     [esp+1ECh+Str2], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:00405C80                 mov     [esp+1ECh+Str1], offset aFileFd0 ; "file_fd >= 0"
.text:00405C87                 call    _assert
.text:00405C87 sub_405960      endp
.text:00405C87
.text:00405C87 ; ---------------------------------------------------------------------------
.text:00405C8C                 align 10h
.text:00405C90
.text:00405C90 ; =============== S U B R O U T I N E =======================================
.text:00405C90
.text:00405C90
.text:00405C90 ; int __cdecl sub_405C90(char *, void *Buf)
.text:00405C90 sub_405C90      proc near               ; DATA XREF: .data:0040709C↓o
.text:00405C90
.text:00405C90 FileName        = dword ptr -6Ch
.text:00405C90 OpenFlag        = dword ptr -68h
.text:00405C90 MaxCharCount    = dword ptr -64h
.text:00405C90 Origin          = dword ptr -60h
.text:00405C90 var_50          = dword ptr -50h
.text:00405C90 var_2C          = word ptr -2Ch
.text:00405C90 var_2A          = word ptr -2Ah
.text:00405C90 arg_0           = dword ptr  4
.text:00405C90 Buf             = dword ptr  8
.text:00405C90
.text:00405C90                 push    ebp
.text:00405C91                 push    edi
.text:00405C92                 push    esi
.text:00405C93                 push    ebx
.text:00405C94                 sub     esp, 5Ch
.text:00405C97                 mov     edx, [esp+6Ch+arg_0]
.text:00405C9B                 mov     [esp+6Ch+var_50], 0FFFFFFFFh
.text:00405CA3                 mov     [esp+6Ch+OpenFlag], 1 ; OpenFlag
.text:00405CAB                 mov     [esp+6Ch+FileName], edx ; FileName
.text:00405CAE                 call    _open
.text:00405CB3                 mov     ebp, eax
.text:00405CB5                 test    ebp, ebp
.text:00405CB7                 mov     eax, 0FFFFFFFFh
.text:00405CBC                 js      loc_405DCD
.text:00405CC2                 cld
.text:00405CC3                 xor     eax, eax
.text:00405CC5                 lea     edi, [esp+6Ch+var_2C]
.text:00405CC9                 mov     ecx, 4
.text:00405CCE                 rep stosd
.text:00405CD0                 mov     [esp+6Ch+var_2C], 2
.text:00405CD7                 lea     edi, [esp+6Ch+var_2C]
.text:00405CDB                 mov     [esp+6Ch+var_2A], 0
.text:00405CE2                 mov     [esp+6Ch+MaxCharCount], edi
.text:00405CE6                 mov     [esp+6Ch+OpenFlag], 9
.text:00405CEE                 mov     [esp+6Ch+FileName], ebp
.text:00405CF1                 call    sub_406270
.text:00405CF6                 test    eax, eax
.text:00405CF8                 js      loc_405DC1
.text:00405CFE                 mov     [esp+6Ch+Origin], 2 ; Origin
.text:00405D06                 mov     [esp+6Ch+OpenFlag], 0 ; Offset
.text:00405D0E                 mov     [esp+6Ch+MaxCharCount], 0
.text:00405D16                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:00405D19                 call    _lseeki64
.text:00405D1E                 mov     [esp+6Ch+FileName], eax
.text:00405D21                 mov     esi, eax
.text:00405D23                 mov     ebx, eax
.text:00405D25                 mov     [esp+6Ch+MaxCharCount], 180h
.text:00405D2D                 sar     esi, 1Fh
.text:00405D30                 mov     [esp+6Ch+Origin], 0
.text:00405D38                 mov     [esp+6Ch+OpenFlag], esi
.text:00405D3C                 call    sub_4068E0
.text:00405D41                 mov     ecx, edx
.text:00405D43                 or      ecx, eax
.text:00405D45                 jz      short loc_405D7F
.text:00405D47                 mov     [esp+6Ch+FileName], ebp
.text:00405D4A                 sub     ebx, eax
.text:00405D4C                 sbb     esi, edx
.text:00405D4E                 mov     [esp+6Ch+OpenFlag], ebx
.text:00405D52                 mov     [esp+6Ch+MaxCharCount], esi
.text:00405D56                 call    sub_4060A0
.text:00405D5B                 mov     [esp+6Ch+Origin], 2 ; Origin
.text:00405D63                 mov     [esp+6Ch+OpenFlag], 0 ; Offset
.text:00405D6B                 mov     [esp+6Ch+MaxCharCount], 0
.text:00405D73                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:00405D76                 call    _lseeki64
.text:00405D7B                 test    eax, eax
.text:00405D7D                 js      short loc_405DA6
.text:00405D7F
.text:00405D7F loc_405D7F:                             ; CODE XREF: sub_405C90+B5↑j
.text:00405D7F                 mov     [esp+6Ch+MaxCharCount], 180h ; MaxCharCount
.text:00405D87                 mov     edx, [esp+6Ch+Buf]
.text:00405D8B                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:00405D8E                 mov     [esp+6Ch+OpenFlag], edx ; Buf
.text:00405D92                 call    _write
.text:00405D97                 cmp     eax, 180h
.text:00405D9C                 jnz     short loc_405DD5
.text:00405D9E                 mov     [esp+6Ch+var_50], 0
.text:00405DA6
.text:00405DA6 loc_405DA6:                             ; CODE XREF: sub_405C90+ED↑j
.text:00405DA6                                         ; sub_405C90+155↓j
.text:00405DA6                 mov     [esp+6Ch+var_2C], 3
.text:00405DAD                 mov     [esp+6Ch+MaxCharCount], edi
.text:00405DB1                 mov     [esp+6Ch+OpenFlag], 9
.text:00405DB9                 mov     [esp+6Ch+FileName], ebp
.text:00405DBC                 call    sub_406270
.text:00405DC1
.text:00405DC1 loc_405DC1:                             ; CODE XREF: sub_405C90+68↑j
.text:00405DC1                 mov     [esp+6Ch+FileName], ebp ; FileHandle
.text:00405DC4                 call    _close
.text:00405DC9                 mov     eax, [esp+6Ch+var_50]
.text:00405DCD
.text:00405DCD loc_405DCD:                             ; CODE XREF: sub_405C90+2C↑j
.text:00405DCD                 add     esp, 5Ch
.text:00405DD0                 pop     ebx
.text:00405DD1                 pop     esi
.text:00405DD2                 pop     edi
.text:00405DD3                 pop     ebp
.text:00405DD4                 retn
.text:00405DD5 ; ---------------------------------------------------------------------------
.text:00405DD5
.text:00405DD5 loc_405DD5:                             ; CODE XREF: sub_405C90+10C↑j
.text:00405DD5                 mov     [esp+6Ch+OpenFlag], ebx
.text:00405DD9                 mov     [esp+6Ch+MaxCharCount], esi
.text:00405DDD                 mov     [esp+6Ch+FileName], ebp
.text:00405DE0                 call    sub_4060A0
.text:00405DE5                 jmp     short loc_405DA6
.text:00405DE5 sub_405C90      endp
.text:00405DE5
.text:00405DE5 ; ---------------------------------------------------------------------------
.text:00405DE7                 align 10h
.text:00405DF0
.text:00405DF0 ; =============== S U B R O U T I N E =======================================
.text:00405DF0
.text:00405DF0
.text:00405DF0 sub_405DF0      proc near               ; CODE XREF: sub_405330+33↑p
.text:00405DF0                                         ; DATA XREF: .data:off_40708C↓o
.text:00405DF0
.text:00405DF0 var_1C          = dword ptr -1Ch
.text:00405DF0 var_18          = dword ptr -18h
.text:00405DF0 var_14          = dword ptr -14h
.text:00405DF0 var_10          = dword ptr -10h
.text:00405DF0 var_C           = dword ptr -0Ch
.text:00405DF0 var_8           = dword ptr -8
.text:00405DF0 var_4           = dword ptr -4
.text:00405DF0 arg_0           = dword ptr  4
.text:00405DF0 arg_4           = dword ptr  8
.text:00405DF0 arg_8           = dword ptr  0Ch
.text:00405DF0
.text:00405DF0                 sub     esp, 1Ch
.text:00405DF3                 mov     edx, FileHandle
.text:00405DF9                 mov     [esp+1Ch+var_10], ebx
.text:00405DFD                 mov     ebx, [esp+1Ch+arg_4]
.text:00405E01                 test    edx, edx
.text:00405E03                 mov     [esp+1Ch+var_4], ebp
.text:00405E07                 mov     ebp, [esp+1Ch+arg_8]
.text:00405E0B                 mov     [esp+1Ch+var_C], esi
.text:00405E0F                 mov     [esp+1Ch+var_8], edi
.text:00405E13                 js      short loc_405E92
.text:00405E15                 mov     ecx, ds:dword_4081A0
.text:00405E1B                 mov     eax, ds:dword_4081A4
.text:00405E20                 and     ecx, eax
.text:00405E22                 inc     ecx
.text:00405E23                 jz      short loc_405E84
.text:00405E25                 mov     [esp+1Ch+var_18], offset dword_4081B0 ; void *
.text:00405E2D                 mov     edx, [esp+1Ch+arg_0]
.text:00405E31                 mov     [esp+1Ch+var_1C], edx ; int
.text:00405E34                 call    sub_405EF0
.text:00405E39                 test    eax, eax
.text:00405E3B                 js      short loc_405E84
.text:00405E3D                 test    bl, 4
.text:00405E40                 mov     edi, ebx
.text:00405E42                 mov     esi, offset dword_4081B0
.text:00405E47                 mov     eax, 180h
.text:00405E4C                 jz      short loc_405E63
.text:00405E4E                 mov     esi, ds:dword_4081B0
.text:00405E54                 lea     edi, [ebx+4]
.text:00405E57                 mov     eax, 17Ch
.text:00405E5C                 mov     [ebx], esi
.text:00405E5E                 mov     esi, offset unk_4081B4
.text:00405E63
.text:00405E63 loc_405E63:                             ; CODE XREF: sub_405DF0+5C↑j
.text:00405E63                 cld
.text:00405E64                 mov     ecx, eax
.text:00405E66                 shr     ecx, 2
.text:00405E69                 rep movsd
.text:00405E6B                 mov     [ebp+0], ebx
.text:00405E6E                 xor     eax, eax
.text:00405E70
.text:00405E70 loc_405E70:                             ; CODE XREF: sub_405DF0+A0↓j
.text:00405E70                 mov     ebx, [esp+1Ch+var_10]
.text:00405E74                 mov     esi, [esp+1Ch+var_C]
.text:00405E78                 mov     edi, [esp+1Ch+var_8]
.text:00405E7C                 mov     ebp, [esp+1Ch+var_4]
.text:00405E80                 add     esp, 1Ch
.text:00405E83                 retn
.text:00405E84 ; ---------------------------------------------------------------------------
.text:00405E84
.text:00405E84 loc_405E84:                             ; CODE XREF: sub_405DF0+33↑j
.text:00405E84                                         ; sub_405DF0+4B↑j
.text:00405E84                 mov     dword ptr [ebp+0], 0
.text:00405E8B                 mov     eax, 0FFFFFFFFh
.text:00405E90                 jmp     short loc_405E70
.text:00405E92 ; ---------------------------------------------------------------------------
.text:00405E92
.text:00405E92 loc_405E92:                             ; CODE XREF: sub_405DF0+23↑j
.text:00405E92                 mov     [esp+1Ch+var_14], 10Eh
.text:00405E9A                 mov     [esp+1Ch+var_18], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:00405EA2                 mov     [esp+1Ch+var_1C], offset aFileFd0 ; "file_fd >= 0"
.text:00405EA9                 call    _assert
.text:00405EA9 sub_405DF0      endp
.text:00405EA9
.text:00405EA9 ; ---------------------------------------------------------------------------
.text:00405EAE                 align 10h
.text:00405EB0
.text:00405EB0 ; =============== S U B R O U T I N E =======================================
.text:00405EB0
.text:00405EB0
.text:00405EB0 sub_405EB0      proc near               ; DATA XREF: .data:00407098↓o
.text:00405EB0
.text:00405EB0 FileHandle      = dword ptr -0Ch
.text:00405EB0 var_8           = dword ptr -8
.text:00405EB0 var_4           = dword ptr -4
.text:00405EB0
.text:00405EB0                 sub     esp, 0Ch
.text:00405EB3                 mov     eax, FileHandle
.text:00405EB8                 test    eax, eax
.text:00405EBA                 js      short loc_405ED3
.text:00405EBC                 mov     [esp+0Ch+FileHandle], eax ; FileHandle
.text:00405EBF                 call    _close
.text:00405EC4                 mov     edx, 0FFFFFFFFh
.text:00405EC9                 mov     FileHandle, edx
.text:00405ECF                 add     esp, 0Ch
.text:00405ED2                 retn
.text:00405ED3 ; ---------------------------------------------------------------------------
.text:00405ED3
.text:00405ED3 loc_405ED3:                             ; CODE XREF: sub_405EB0+A↑j
.text:00405ED3                 mov     [esp+0Ch+var_4], 1A8h
.text:00405EDB                 mov     [esp+0Ch+var_8], offset aLibc05SrcLogin ; "../../libc-0.5-src/login/utmp_file.c"
.text:00405EE3                 mov     [esp+0Ch+FileHandle], offset aFileFd0 ; "file_fd >= 0"
.text:00405EEA                 call    _assert
.text:00405EEA sub_405EB0      endp
.text:00405EEA
.text:00405EEA ; ---------------------------------------------------------------------------
.text:00405EEF                 align 10h
.text:00405EF0
.text:00405EF0 ; =============== S U B R O U T I N E =======================================
.text:00405EF0
.text:00405EF0
.text:00405EF0 ; int __cdecl sub_405EF0(int, void *)
.text:00405EF0 sub_405EF0      proc near               ; CODE XREF: sub_405960+2AB↑p
.text:00405EF0                                         ; sub_405DF0+44↑p
.text:00405EF0
.text:00405EF0 FileHandle      = dword ptr -5Ch
.text:00405EF0 DstBuf          = dword ptr -58h
.text:00405EF0 MaxCharCount    = dword ptr -54h
.text:00405EF0 var_2C          = word ptr -2Ch
.text:00405EF0 var_2A          = word ptr -2Ah
.text:00405EF0 arg_0           = dword ptr  4
.text:00405EF0 arg_4           = dword ptr  8
.text:00405EF0
.text:00405EF0                 push    ebp
.text:00405EF1                 xor     eax, eax
.text:00405EF3                 mov     ecx, 4
.text:00405EF8                 push    edi
.text:00405EF9                 mov     ebp, 0FFFFFFFFh
.text:00405EFE                 push    esi
.text:00405EFF                 push    ebx
.text:00405F00                 sub     esp, 4Ch
.text:00405F03                 lea     edi, [esp+5Ch+var_2C]
.text:00405F07                 cld
.text:00405F08                 mov     esi, [esp+5Ch+arg_0]
.text:00405F0C                 mov     ebx, [esp+5Ch+arg_4]
.text:00405F10                 rep stosd
.text:00405F12                 mov     [esp+5Ch+var_2C], 1
.text:00405F19                 mov     edx, FileHandle
.text:00405F1F                 lea     edi, [esp+5Ch+var_2C]
.text:00405F23                 mov     [esp+5Ch+var_2A], 0
.text:00405F2A                 mov     [esp+5Ch+MaxCharCount], edi
.text:00405F2E                 mov     [esp+5Ch+DstBuf], 9
.text:00405F36                 mov     [esp+5Ch+FileHandle], edx
.text:00405F39                 call    sub_406270
.text:00405F3E                 test    eax, eax
.text:00405F40                 js      loc_40600B
.text:00405F46                 movzx   edx, word ptr [esi]
.text:00405F49                 lea     ecx, [edx-1]
.text:00405F4C                 cmp     cx, 1
.text:00405F50                 jbe     loc_406050
.text:00405F56                 cmp     dx, 4
.text:00405F5A                 jz      loc_406050
.text:00405F60                 cmp     dx, 3
.text:00405F64                 jz      loc_406050
.text:00405F6A                 lea     esi, [esi+0]
.text:00405F70
.text:00405F70 loc_405F70:                             ; CODE XREF: sub_405EF0+C0↓j
.text:00405F70                                         ; sub_405EF0+CC↓j ...
.text:00405F70                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:00405F78                 mov     edx, FileHandle
.text:00405F7E                 mov     [esp+5Ch+DstBuf], ebx ; DstBuf
.text:00405F82                 mov     [esp+5Ch+FileHandle], edx ; FileHandle
.text:00405F85                 call    _read
.text:00405F8A                 cmp     eax, 180h
.text:00405F8F                 jnz     loc_406029
.text:00405F95                 movzx   ecx, word ptr [ebx]
.text:00405F98                 add     ds:dword_4081A0, 180h
.text:00405FA2                 adc     ds:dword_4081A4, 0
.text:00405FA9                 sub     ecx, 5
.text:00405FAC                 cmp     cx, 3
.text:00405FB0                 ja      short loc_405F70
.text:00405FB2                 movzx   edx, word ptr [esi]
.text:00405FB5                 sub     edx, 5
.text:00405FB8                 cmp     dx, 3
.text:00405FBC                 ja      short loc_405F70
.text:00405FBE                 cmp     byte ptr [ebx+28h], 0
.text:00405FC2                 jz      short loc_405FCA
.text:00405FC4                 cmp     byte ptr [esi+28h], 0
.text:00405FC8                 jnz     short loc_406015
.text:00405FCA
.text:00405FCA loc_405FCA:                             ; CODE XREF: sub_405EF0+D2↑j
.text:00405FCA                 mov     [esp+5Ch+MaxCharCount], 20h ; ' ' ; MaxCount
.text:00405FD2                 lea     edx, [esi+8]
.text:00405FD5                 lea     eax, [ebx+8]
.text:00405FD8                 mov     [esp+5Ch+DstBuf], edx ; Str2
.text:00405FDC
.text:00405FDC loc_405FDC:                             ; CODE XREF: sub_405EF0+137↓j
.text:00405FDC                 mov     [esp+5Ch+FileHandle], eax ; Str1
.text:00405FDF                 call    strncmp
.text:00405FE4                 test    eax, eax
.text:00405FE6                 jnz     short loc_405F70
.text:00405FE8
.text:00405FE8 loc_405FE8:                             ; CODE XREF: sub_405EF0+19A↓j
.text:00405FE8                 xor     ebp, ebp
.text:00405FEA
.text:00405FEA loc_405FEA:                             ; CODE XREF: sub_405EF0+159↓j
.text:00405FEA                 mov     [esp+5Ch+var_2C], 3
.text:00405FF1                 mov     esi, FileHandle
.text:00405FF7                 mov     [esp+5Ch+MaxCharCount], edi
.text:00405FFB                 mov     [esp+5Ch+DstBuf], 9
.text:00406003                 mov     [esp+5Ch+FileHandle], esi
.text:00406006                 call    sub_406270
.text:0040600B
.text:0040600B loc_40600B:                             ; CODE XREF: sub_405EF0+50↑j
.text:0040600B                 add     esp, 4Ch
.text:0040600E                 mov     eax, ebp
.text:00406010                 pop     ebx
.text:00406011                 pop     esi
.text:00406012                 pop     edi
.text:00406013                 pop     ebp
.text:00406014                 retn
.text:00406015 ; ---------------------------------------------------------------------------
.text:00406015
.text:00406015 loc_406015:                             ; CODE XREF: sub_405EF0+D8↑j
.text:00406015                 mov     [esp+5Ch+MaxCharCount], 4
.text:0040601D                 lea     ecx, [esi+28h]
.text:00406020                 lea     eax, [ebx+28h]
.text:00406023                 mov     [esp+5Ch+DstBuf], ecx
.text:00406027                 jmp     short loc_405FDC
.text:00406029 ; ---------------------------------------------------------------------------
.text:00406029
.text:00406029 loc_406029:                             ; CODE XREF: sub_405EF0+9F↑j
.text:00406029                                         ; sub_405EF0+17F↓j
.text:00406029                 call    _errno
.text:0040602E                 mov     dword ptr [eax], 3
.text:00406034                 mov     ebx, 0FFFFFFFFh
.text:00406039                 mov     eax, 0FFFFFFFFh
.text:0040603E                 mov     ds:dword_4081A0, eax
.text:00406043                 mov     ds:dword_4081A4, ebx
.text:00406049                 jmp     short loc_405FEA
.text:00406049 ; ---------------------------------------------------------------------------
.text:0040604B                 align 10h
.text:00406050
.text:00406050 loc_406050:                             ; CODE XREF: sub_405EF0+60↑j
.text:00406050                                         ; sub_405EF0+6A↑j ...
.text:00406050                 mov     [esp+5Ch+MaxCharCount], 180h ; MaxCharCount
.text:00406058                 mov     edx, FileHandle
.text:0040605E                 mov     [esp+5Ch+DstBuf], ebx ; DstBuf
.text:00406062                 mov     [esp+5Ch+FileHandle], edx ; FileHandle
.text:00406065                 call    _read
.text:0040606A                 cmp     eax, 180h
.text:0040606F                 jnz     short loc_406029
.text:00406071                 add     ds:dword_4081A0, 180h
.text:0040607B                 movzx   ecx, word ptr [ebx]
.text:0040607E                 adc     ds:dword_4081A4, 0
.text:00406085                 cmp     [esi], cx
.text:00406088                 jnz     short loc_406050
.text:0040608A                 jmp     loc_405FE8
.text:0040608A sub_405EF0      endp
.text:0040608A
.text:0040608A ; ---------------------------------------------------------------------------
.text:0040608F                 align 20h
.text:004060A0
.text:004060A0 ; =============== S U B R O U T I N E =======================================
.text:004060A0
.text:004060A0
.text:004060A0 sub_4060A0      proc near               ; CODE XREF: sub_405960+1BF↑p
.text:004060A0                                         ; sub_405960+263↑p ...
.text:004060A0
.text:004060A0 FileHandle      = dword ptr -2Ch
.text:004060A0 Offset          = qword ptr -28h
.text:004060A0 Origin          = dword ptr -20h
.text:004060A0 var_10          = dword ptr -10h
.text:004060A0 var_C           = dword ptr -0Ch
.text:004060A0 var_8           = dword ptr -8
.text:004060A0 var_4           = dword ptr -4
.text:004060A0 arg_0           = dword ptr  4
.text:004060A0 arg_4           = qword ptr  8
.text:004060A0
.text:004060A0                 sub     esp, 2Ch
.text:004060A3                 mov     [esp+2Ch+var_4], ebp
.text:004060A7                 mov     ebp, [esp+2Ch+arg_0]
.text:004060AB                 mov     [esp+2Ch+var_10], ebx
.text:004060AF                 mov     ebx, dword ptr [esp+2Ch+arg_4]
.text:004060B3                 mov     [esp+2Ch+var_C], esi
.text:004060B7                 mov     esi, dword ptr [esp+2Ch+arg_4+4]
.text:004060BB                 mov     [esp+2Ch+var_8], edi
.text:004060BF                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:004060C2                 call    _get_osfhandle
.text:004060C7                 cmp     eax, 0FFFFFFFFh
.text:004060CA                 mov     edi, eax
.text:004060CC                 jz      short loc_406136
.text:004060CE                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:004060D1                 mov     [esp+2Ch+Origin], 0 ; Origin
.text:004060D9                 mov     dword ptr [esp+2Ch+Offset], ebx ; Offset
.text:004060DD                 mov     dword ptr [esp+2Ch+Offset+4], esi
.text:004060E1                 call    _lseeki64
.text:004060E6                 mov     ebp, edx
.text:004060E8                 xor     eax, ebx
.text:004060EA                 xor     ebp, esi
.text:004060EC                 or      ebp, eax
.text:004060EE                 jnz     short loc_406129
.text:004060F0                 mov     [esp+2Ch+FileHandle], edi ; hFile
.text:004060F3                 call    SetEndOfFile
.text:004060F8                 sub     esp, 4
.text:004060FB                 xor     edx, edx
.text:004060FD                 test    eax, eax
.text:004060FF                 jz      short loc_406117
.text:00406101
.text:00406101 loc_406101:                             ; CODE XREF: sub_4060A0+87↓j
.text:00406101                 mov     ebx, [esp+2Ch+var_10]
.text:00406105                 mov     eax, edx
.text:00406107                 mov     esi, [esp+2Ch+var_C]
.text:0040610B                 mov     edi, [esp+2Ch+var_8]
.text:0040610F                 mov     ebp, [esp+2Ch+var_4]
.text:00406113                 add     esp, 2Ch
.text:00406116                 retn
.text:00406117 ; ---------------------------------------------------------------------------
.text:00406117
.text:00406117 loc_406117:                             ; CODE XREF: sub_4060A0+5F↑j
.text:00406117                 call    _errno
.text:0040611C                 mov     dword ptr [eax], offset sub_406740
.text:00406122
.text:00406122 loc_406122:                             ; CODE XREF: sub_4060A0+94↓j
.text:00406122                                         ; sub_4060A0+A1↓j
.text:00406122                 mov     edx, 0FFFFFFFFh
.text:00406127                 jmp     short loc_406101
.text:00406129 ; ---------------------------------------------------------------------------
.text:00406129
.text:00406129 loc_406129:                             ; CODE XREF: sub_4060A0+4E↑j
.text:00406129                 call    _errno
.text:0040612E                 mov     dword ptr [eax], 16h
.text:00406134                 jmp     short loc_406122
.text:00406136 ; ---------------------------------------------------------------------------
.text:00406136
.text:00406136 loc_406136:                             ; CODE XREF: sub_4060A0+2C↑j
.text:00406136                 call    _errno
.text:0040613B                 mov     dword ptr [eax], 9
.text:00406141                 jmp     short loc_406122
.text:00406141 sub_4060A0      endp
.text:00406141
.text:00406141 ; ---------------------------------------------------------------------------
.text:00406143                 align 10h
.text:00406150
.text:00406150 ; =============== S U B R O U T I N E =======================================
.text:00406150
.text:00406150
.text:00406150 sub_406150      proc near               ; CODE XREF: sub_406270+152↓p
.text:00406150                                         ; .text:0040643B↓p
.text:00406150
.text:00406150 FileHandle      = dword ptr -2Ch
.text:00406150 Offset          = qword ptr -28h
.text:00406150 Origin          = dword ptr -20h
.text:00406150 nNumberOfBytesToUnlockHigh= dword ptr -1Ch
.text:00406150 hFile           = dword ptr -14h
.text:00406150 arg_0           = dword ptr  4
.text:00406150 arg_4           = dword ptr  8
.text:00406150 arg_8           = dword ptr  0Ch
.text:00406150
.text:00406150                 push    ebp
.text:00406151                 push    edi
.text:00406152                 push    esi
.text:00406153                 push    ebx
.text:00406154                 sub     esp, 1Ch
.text:00406157                 mov     ebp, [esp+2Ch+arg_8]
.text:0040615B                 mov     edi, [esp+2Ch+arg_0]
.text:0040615F                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:00406162                 call    _get_osfhandle
.text:00406167                 movsx   edx, word ptr [ebp+2]
.text:0040616B                 mov     [esp+2Ch+hFile], eax
.text:0040616F                 mov     dword ptr [esp+2Ch+Offset], 0 ; Offset
.text:00406177                 mov     dword ptr [esp+2Ch+Offset+4], 0
.text:0040617F                 mov     [esp+2Ch+Origin], edx ; Origin
.text:00406183                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:00406186                 call    _lseeki64
.text:0040618B                 mov     ebx, eax
.text:0040618D                 mov     esi, edx
.text:0040618F                 mov     edx, [ebp+14h]
.text:00406192                 add     ebx, [ebp+8]
.text:00406195                 mov     eax, [ebp+10h]
.text:00406198                 mov     ecx, edx
.text:0040619A                 adc     esi, [ebp+0Ch]
.text:0040619D                 or      ecx, eax
.text:0040619F                 jz      loc_406260
.text:004061A5                 add     eax, ebx
.text:004061A7                 adc     edx, esi
.text:004061A9
.text:004061A9 loc_4061A9:                             ; CODE XREF: sub_406150+118↓j
.text:004061A9                 cmp     [esp+2Ch+arg_4], 7
.text:004061AE                 jz      loc_40624E
.text:004061B4                 cmp     [esp+2Ch+arg_4], 7
.text:004061B9                 jl      short loc_4061D5
.text:004061BB                 cmp     [esp+2Ch+arg_4], 9
.text:004061C0                 jg      short loc_4061D5
.text:004061C2                 movsx   ecx, word ptr [ebp+0]
.text:004061C6                 cmp     ecx, 1
.text:004061C9                 jl      short loc_4061D5
.text:004061CB                 cmp     ecx, 2
.text:004061CE                 jle     short loc_406230
.text:004061D0                 cmp     ecx, 3
.text:004061D3                 jz      short loc_4061ED
.text:004061D5
.text:004061D5 loc_4061D5:                             ; CODE XREF: sub_406150+69↑j
.text:004061D5                                         ; sub_406150+70↑j ...
.text:004061D5                 call    _errno
.text:004061DA                 mov     dword ptr [eax], 16h
.text:004061E0
.text:004061E0 loc_4061E0:                             ; CODE XREF: sub_406150+D9↓j
.text:004061E0                                         ; sub_406150+109↓j
.text:004061E0                 mov     eax, 0FFFFFFFFh
.text:004061E5
.text:004061E5 loc_4061E5:                             ; CODE XREF: sub_406150+C9↓j
.text:004061E5                 add     esp, 1Ch
.text:004061E8                 pop     ebx
.text:004061E9                 pop     esi
.text:004061EA                 pop     edi
.text:004061EB                 pop     ebp
.text:004061EC                 retn
.text:004061ED ; ---------------------------------------------------------------------------
.text:004061ED
.text:004061ED loc_4061ED:                             ; CODE XREF: sub_406150+83↑j
.text:004061ED                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToUnlockLow
.text:004061F1                 mov     eax, [esp+2Ch+hFile]
.text:004061F5                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:004061F9                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:004061FD                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:00406201                 mov     [esp+2Ch+FileHandle], eax ; hFile
.text:00406204                 call    UnlockFile
.text:00406209                 lea     esi, [esi+0]
.text:00406210
.text:00406210 loc_406210:                             ; CODE XREF: sub_406150+FC↓j
.text:00406210                 mov     ecx, eax
.text:00406212                 sub     esp, 14h
.text:00406215                 xor     eax, eax
.text:00406217                 test    ecx, ecx
.text:00406219                 jnz     short loc_4061E5
.text:0040621B                 call    sub_406740
.text:00406220                 mov     esi, eax
.text:00406222                 call    _errno
.text:00406227                 mov     [eax], esi
.text:00406229                 jmp     short loc_4061E0
.text:00406229 ; ---------------------------------------------------------------------------
.text:0040622B                 align 10h
.text:00406230
.text:00406230 loc_406230:                             ; CODE XREF: sub_406150+7E↑j
.text:00406230                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToLockHigh
.text:00406234                 mov     edx, [esp+2Ch+hFile]
.text:00406238                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0040623C                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:00406240                 mov     [esp+2Ch+FileHandle], edx ; hFile
.text:00406243                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToLockLow
.text:00406247                 call    LockFile
.text:0040624C                 jmp     short loc_406210
.text:0040624E ; ---------------------------------------------------------------------------
.text:0040624E
.text:0040624E loc_40624E:                             ; CODE XREF: sub_406150+5E↑j
.text:0040624E                 call    _errno
.text:00406253                 mov     dword ptr [eax], 28h ; '('
.text:00406259                 jmp     short loc_4061E0
.text:00406259 ; ---------------------------------------------------------------------------
.text:0040625B                 align 10h
.text:00406260
.text:00406260 loc_406260:                             ; CODE XREF: sub_406150+4F↑j
.text:00406260                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:00406263                 call    _filelengthi64
.text:00406268                 jmp     loc_4061A9
.text:00406268 sub_406150      endp
.text:00406268
.text:00406268 ; ---------------------------------------------------------------------------
.text:0040626D                 align 10h
.text:00406270
.text:00406270 ; =============== S U B R O U T I N E =======================================
.text:00406270
.text:00406270
.text:00406270 sub_406270      proc near               ; CODE XREF: sub_405520+97↑p
.text:00406270                                         ; sub_405520+B8↑p ...
.text:00406270
.text:00406270 FileHandle      = dword ptr -1Ch
.text:00406270 var_18          = dword ptr -18h
.text:00406270 var_14          = dword ptr -14h
.text:00406270 var_4           = dword ptr -4
.text:00406270 arg_0           = dword ptr  4
.text:00406270 arg_4           = dword ptr  8
.text:00406270 arg_8           = byte ptr  0Ch
.text:00406270
.text:00406270                 sub     esp, 1Ch
.text:00406273                 mov     ecx, [esp+1Ch+arg_0]
.text:00406277                 mov     [esp+1Ch+var_4], ebx
.text:0040627B                 mov     edx, [esp+1Ch+arg_4]
.text:0040627F                 test    ecx, ecx
.text:00406281                 js      loc_4063D9
.text:00406287                 cmp     edx, 9          ; switch 10 cases
.text:0040628A                 lea     eax, [esp+1Ch+arg_8]
.text:0040628E                 ja      def_406294      ; jumptable 00406294 default case
.text:00406294                 jmp     ds:jpt_406294[edx*4] ; switch jump
.text:00406294 ; ---------------------------------------------------------------------------
.text:0040629B                 align 4
.text:0040629C jpt_406294      dd offset loc_4062C4    ; DATA XREF: sub_406270+24↑r
.text:0040629C                 dd offset loc_4062D8    ; jump table for switch statement
.text:0040629C                 dd offset loc_4062F8
.text:0040629C                 dd offset loc_406320
.text:0040629C                 dd offset loc_406368
.text:0040629C                 dd offset loc_4063A0
.text:0040629C                 dd offset loc_4063A0
.text:0040629C                 dd offset loc_4063A0
.text:0040629C                 dd offset loc_4063B5
.text:0040629C                 dd offset loc_4063B5
.text:004062C4 ; ---------------------------------------------------------------------------
.text:004062C4
.text:004062C4 loc_4062C4:                             ; CODE XREF: sub_406270+24↑j
.text:004062C4                                         ; DATA XREF: sub_406270:jpt_406294↑o
.text:004062C4                 mov     [esp+1Ch+FileHandle], ecx ; jumptable 00406294 case 0
.text:004062C7                 call    _dup
.text:004062CC                 lea     esi, [esi+0]
.text:004062D0
.text:004062D0 loc_4062D0:                             ; CODE XREF: sub_406270+86↓j
.text:004062D0                                         ; sub_406270+AC↓j ...
.text:004062D0                 mov     ebx, [esp+1Ch+var_4]
.text:004062D4                 add     esp, 1Ch
.text:004062D7                 retn
.text:004062D8 ; ---------------------------------------------------------------------------
.text:004062D8
.text:004062D8 loc_4062D8:                             ; CODE XREF: sub_406270+24↑j
.text:004062D8                                         ; DATA XREF: sub_406270:jpt_406294↑o
.text:004062D8                 mov     eax, ds:__pioinfo ; jumptable 00406294 case 1
.text:004062DD                 mov     edx, ecx
.text:004062DF                 sar     edx, 5
.text:004062E2                 and     ecx, 1Fh
.text:004062E5                 mov     ebx, [eax+edx*4]
.text:004062E8                 lea     eax, [ecx+ecx*8]
.text:004062EB                 test    byte ptr [ebx+eax*4+4], 10h
.text:004062F0                 setnz   dl
.text:004062F3                 movzx   eax, dl
.text:004062F6                 jmp     short loc_4062D0
.text:004062F8 ; ---------------------------------------------------------------------------
.text:004062F8
.text:004062F8 loc_4062F8:                             ; CODE XREF: sub_406270+24↑j
.text:004062F8                                         ; DATA XREF: sub_406270:jpt_406294↑o
.text:004062F8                 test    bl, 1           ; jumptable 00406294 case 2
.text:004062FB                 jz      short loc_406303
.text:004062FD                 and     ebx, 0FFFFFFFEh
.text:00406300                 or      ebx, 10h
.text:00406303
.text:00406303 loc_406303:                             ; CODE XREF: sub_406270+8B↑j
.text:00406303                 mov     eax, ds:__pioinfo
.text:00406308                 mov     edx, ecx
.text:0040630A                 sar     edx, 5
.text:0040630D                 and     ecx, 1Fh
.text:00406310                 mov     edx, [eax+edx*4]
.text:00406313                 lea     eax, [ecx+ecx*8]
.text:00406316                 mov     [edx+eax*4+4], bl
.text:0040631A
.text:0040631A loc_40631A:                             ; CODE XREF: sub_406270+121↓j
.text:0040631A                 xor     eax, eax
.text:0040631C                 jmp     short loc_4062D0
.text:0040631C ; ---------------------------------------------------------------------------
.text:0040631E                 align 10h
.text:00406320
.text:00406320 loc_406320:                             ; CODE XREF: sub_406270+24↑j
.text:00406320                                         ; DATA XREF: sub_406270:jpt_406294↑o
.text:00406320                 mov     eax, ds:__pioinfo ; jumptable 00406294 case 3
.text:00406325                 mov     ebx, ecx
.text:00406327                 sar     ebx, 5
.text:0040632A                 and     ecx, 1Fh
.text:0040632D                 mov     edx, [eax+ebx*4]
.text:00406330                 lea     ebx, [ecx+ecx*8]
.text:00406333                 movsx   eax, byte ptr [edx+ebx*4+4]
.text:00406338                 xor     edx, edx
.text:0040633A                 test    al, 1
.text:0040633C                 jz      short loc_406347
.text:0040633E                 mov     edx, 2
.text:00406343
.text:00406343 loc_406343:                             ; CODE XREF: sub_406270+E0↓j
.text:00406343                                         ; sub_406270+EB↓j ...
.text:00406343                 mov     eax, edx
.text:00406345                 jmp     short loc_4062D0
.text:00406347 ; ---------------------------------------------------------------------------
.text:00406347
.text:00406347 loc_406347:                             ; CODE XREF: sub_406270+CC↑j
.text:00406347                 test    al, 20h
.text:00406349                 jz      short loc_406352
.text:0040634B                 mov     edx, 8
.text:00406350                 jmp     short loc_406343
.text:00406352 ; ---------------------------------------------------------------------------
.text:00406352
.text:00406352 loc_406352:                             ; CODE XREF: sub_406270+D9↑j
.text:00406352                 test    al, 10h
.text:00406354                 jz      short loc_40635D
.text:00406356                 mov     edx, 80h ; '€'
.text:0040635B                 jmp     short loc_406343
.text:0040635D ; ---------------------------------------------------------------------------
.text:0040635D
.text:0040635D loc_40635D:                             ; CODE XREF: sub_406270+E4↑j
.text:0040635D                 test    al, al
.text:0040635F                 jns     short loc_406343
.text:00406361                 mov     edx, 4000h
.text:00406366                 jmp     short loc_406343
.text:00406368 ; ---------------------------------------------------------------------------
.text:00406368
.text:00406368 loc_406368:                             ; CODE XREF: sub_406270+24↑j
.text:00406368                                         ; DATA XREF: sub_406270:jpt_406294↑o
.text:00406368                 mov     edx, ds:__pioinfo ; jumptable 00406294 case 4
.text:0040636E                 mov     ebx, [eax]
.text:00406370                 mov     eax, ecx
.text:00406372                 sar     eax, 5
.text:00406375                 and     ecx, 1Fh
.text:00406378                 mov     edx, [edx+eax*4]
.text:0040637B                 lea     eax, [ecx+ecx*8]
.text:0040637E                 shl     eax, 2
.text:00406381                 xor     ecx, ecx
.text:00406383                 test    bl, 8
.text:00406386                 jz      short loc_406393
.text:00406388                 mov     ecx, 20h ; ' '
.text:0040638D
.text:0040638D loc_40638D:                             ; CODE XREF: sub_406270+126↓j
.text:0040638D                                         ; sub_406270+12D↓j
.text:0040638D                 mov     [edx+eax+4], cl
.text:00406391                 jmp     short loc_40631A
.text:00406393 ; ---------------------------------------------------------------------------
.text:00406393
.text:00406393 loc_406393:                             ; CODE XREF: sub_406270+116↑j
.text:00406393                 test    bh, 40h
.text:00406396                 jz      short loc_40638D
.text:00406398                 mov     ecx, 80h ; '€'
.text:0040639D                 jmp     short loc_40638D
.text:0040639D ; ---------------------------------------------------------------------------
.text:0040639F                 align 10h
.text:004063A0
.text:004063A0 loc_4063A0:                             ; CODE XREF: sub_406270+24↑j
.text:004063A0                                         ; DATA XREF: sub_406270:jpt_406294↑o
.text:004063A0                 call    _errno          ; jumptable 00406294 cases 5-7
.text:004063A5                 mov     dword ptr [eax], 28h ; '('
.text:004063AB
.text:004063AB loc_4063AB:                             ; CODE XREF: sub_406270+167↓j
.text:004063AB                                         ; sub_406270+174↓j
.text:004063AB                 mov     eax, 0FFFFFFFFh
.text:004063B0                 jmp     loc_4062D0
.text:004063B5 ; ---------------------------------------------------------------------------
.text:004063B5
.text:004063B5 loc_4063B5:                             ; CODE XREF: sub_406270+24↑j
.text:004063B5                                         ; DATA XREF: sub_406270:jpt_406294↑o
.text:004063B5                 mov     ebx, [eax]      ; jumptable 00406294 cases 8,9
.text:004063B7                 mov     [esp+1Ch+var_18], edx
.text:004063BB                 mov     [esp+1Ch+FileHandle], ecx
.text:004063BE                 mov     [esp+1Ch+var_14], ebx
.text:004063C2                 call    sub_406150
.text:004063C7                 jmp     loc_4062D0
.text:004063CC ; ---------------------------------------------------------------------------
.text:004063CC
.text:004063CC def_406294:                             ; CODE XREF: sub_406270+1E↑j
.text:004063CC                 call    _errno          ; jumptable 00406294 default case
.text:004063D1                 mov     dword ptr [eax], 16h
.text:004063D7                 jmp     short loc_4063AB
.text:004063D9 ; ---------------------------------------------------------------------------
.text:004063D9
.text:004063D9 loc_4063D9:                             ; CODE XREF: sub_406270+11↑j
.text:004063D9                 call    _errno
.text:004063DE                 mov     dword ptr [eax], 9
.text:004063E4                 jmp     short loc_4063AB
.text:004063E4 sub_406270      endp
.text:004063E4
.text:004063E4 ; ---------------------------------------------------------------------------
.text:004063E6                 align 10h
.text:004063F0                 sub     esp, 3Ch
.text:004063F3                 mov     edx, [esp+48h]
.text:004063F7                 mov     eax, [edx+4]
.text:004063FA                 movzx   ecx, word ptr [edx]
.text:004063FD                 mov     [esp+18h], eax
.text:00406401                 mov     [esp+10h], cx
.text:00406406                 movzx   ecx, word ptr [edx+2]
.text:0040640A                 mov     [esp+12h], cx
.text:0040640F                 mov     ecx, eax
.text:00406411                 mov     eax, [edx+8]
.text:00406414                 sar     ecx, 1Fh
.text:00406417                 mov     [esp+1Ch], ecx
.text:0040641B                 cdq
.text:0040641C                 lea     ecx, [esp+10h]
.text:00406420                 mov     [esp+24h], edx
.text:00406424                 mov     edx, [esp+44h]
.text:00406428                 mov     [esp+20h], eax
.text:0040642C                 mov     [esp+8], ecx
.text:00406430                 mov     [esp+4], edx
.text:00406434                 mov     edx, [esp+40h]
.text:00406438                 mov     [esp], edx
.text:0040643B                 call    sub_406150
.text:00406440                 add     esp, 3Ch
.text:00406443                 retn
.text:00406443 ; ---------------------------------------------------------------------------
.text:00406444                 align 10h
.text:00406450                 mov     edx, [esp+4]
.text:00406454                 xor     eax, eax
.text:00406456                 test    dl, 1
.text:00406459                 jz      short loc_406461
.text:0040645B                 mov     eax, 2
.text:00406460                 retn
.text:00406461 ; ---------------------------------------------------------------------------
.text:00406461
.text:00406461 loc_406461:                             ; CODE XREF: .text:00406459↑j
.text:00406461                 test    dl, 20h
.text:00406464                 jz      short loc_406470
.text:00406466                 mov     eax, 8
.text:0040646B                 retn
.text:0040646B ; ---------------------------------------------------------------------------
.text:0040646C                 align 10h
.text:00406470
.text:00406470 loc_406470:                             ; CODE XREF: .text:00406464↑j
.text:00406470                 test    dl, 10h
.text:00406473                 jz      short loc_406480
.text:00406475                 mov     eax, 80h ; '€'
.text:0040647A                 retn
.text:0040647A ; ---------------------------------------------------------------------------
.text:0040647B                 align 10h
.text:00406480
.text:00406480 loc_406480:                             ; CODE XREF: .text:00406473↑j
.text:00406480                 test    dl, dl
.text:00406482                 jns     short locret_406489
.text:00406484                 mov     eax, 4000h
.text:00406489
.text:00406489 locret_406489:                          ; CODE XREF: .text:00406482↑j
.text:00406489                 retn
.text:00406489 ; ---------------------------------------------------------------------------
.text:0040648A                 align 10h
.text:00406490                 mov     edx, [esp+4]
.text:00406494                 xor     eax, eax
.text:00406496                 test    dl, 8
.text:00406499                 jz      short loc_4064A1
.text:0040649B                 mov     eax, 20h ; ' '
.text:004064A0                 retn
.text:004064A1 ; ---------------------------------------------------------------------------
.text:004064A1
.text:004064A1 loc_4064A1:                             ; CODE XREF: .text:00406499↑j
.text:004064A1                 test    dh, 40h
.text:004064A4                 jz      short locret_4064AB
.text:004064A6                 mov     eax, 80h ; '€'
.text:004064AB
.text:004064AB locret_4064AB:                          ; CODE XREF: .text:004064A4↑j
.text:004064AB                 retn
.text:004064AB ; ---------------------------------------------------------------------------
.text:004064AC                 align 10h
.text:004064B0
.text:004064B0 ; =============== S U B R O U T I N E =======================================
.text:004064B0
.text:004064B0 ; Attributes: info_from_lumina
.text:004064B0
.text:004064B0 ___get_errno    proc near               ; CODE XREF: sub_406740+B↓p
.text:004064B0
.text:004064B0 arg_0           = dword ptr  4
.text:004064B0
.text:004064B0                 mov     eax, [esp+arg_0]
.text:004064B4                 cmp     eax, 53h ; 'S'
.text:004064B7                 jg      loc_4065B0
.text:004064BD                 cmp     eax, 52h ; 'R'
.text:004064C0                 jge     short loc_406512
.text:004064C2                 cmp     eax, 0Fh
.text:004064C5                 jz      short loc_4064E0
.text:004064C7                 cmp     eax, 0Fh
.text:004064CA                 jg      short loc_406540
.text:004064CC                 cmp     eax, 9
.text:004064CF                 jg      short loc_406520
.text:004064D1                 cmp     eax, 7
.text:004064D4                 jge     short loc_406519
.text:004064D6                 cmp     eax, 3
.text:004064D9                 jg      short loc_4064FA
.text:004064DB                 cmp     eax, 2
.text:004064DE                 jl      short loc_4064F3
.text:004064E0
.text:004064E0 loc_4064E0:                             ; CODE XREF: ___get_errno+15↑j
.text:004064E0                                         ; ___get_errno+9D↓j ...
.text:004064E0                 mov     edx, 2
.text:004064E5                 lea     esi, [esi+0]
.text:004064E9                 lea     edi, [edi+0]
.text:004064F0
.text:004064F0 loc_4064F0:                             ; CODE XREF: ___get_errno+48↓j
.text:004064F0                                         ; ___get_errno+59↓j ...
.text:004064F0                 mov     eax, edx
.text:004064F2                 retn
.text:004064F3 ; ---------------------------------------------------------------------------
.text:004064F3
.text:004064F3 loc_4064F3:                             ; CODE XREF: ___get_errno+2E↑j
.text:004064F3                                         ; ___get_errno+78↓j ...
.text:004064F3                 mov     edx, 16h
.text:004064F8                 jmp     short loc_4064F0
.text:004064FA ; ---------------------------------------------------------------------------
.text:004064FA
.text:004064FA loc_4064FA:                             ; CODE XREF: ___get_errno+29↑j
.text:004064FA                 cmp     eax, 5
.text:004064FD                 jz      short loc_406512
.text:004064FF                 cmp     eax, 5
.text:00406502                 jg      short loc_40650B
.text:00406504                 mov     edx, 18h
.text:00406509                 jmp     short loc_4064F0
.text:0040650B ; ---------------------------------------------------------------------------
.text:0040650B
.text:0040650B loc_40650B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040650B                                         ; ___get_errno+180↓j
.text:0040650B                 mov     edx, 9
.text:00406510                 jmp     short loc_4064F0
.text:00406512 ; ---------------------------------------------------------------------------
.text:00406512
.text:00406512 loc_406512:                             ; CODE XREF: ___get_errno+10↑j
.text:00406512                                         ; ___get_errno+4D↑j ...
.text:00406512                 mov     edx, 0Dh
.text:00406517                 jmp     short loc_4064F0
.text:00406519 ; ---------------------------------------------------------------------------
.text:00406519
.text:00406519 loc_406519:                             ; CODE XREF: ___get_errno+24↑j
.text:00406519                                         ; ___get_errno+73↓j ...
.text:00406519                 mov     edx, 0Ch
.text:0040651E                 jmp     short loc_4064F0
.text:00406520 ; ---------------------------------------------------------------------------
.text:00406520
.text:00406520 loc_406520:                             ; CODE XREF: ___get_errno+1F↑j
.text:00406520                 cmp     eax, 0Dh
.text:00406523                 jg      short loc_406519
.text:00406525                 cmp     eax, 0Ch
.text:00406528                 jge     short loc_4064F3
.text:0040652A                 cmp     eax, 0Ah
.text:0040652D                 mov     edx, 7
.text:00406532                 jz      short loc_4064F0
.text:00406534                 cmp     eax, 0Bh
.text:00406537                 jnz     short loc_4064F3
.text:00406539
.text:00406539 loc_406539:                             ; CODE XREF: ___get_errno+21A↓j
.text:00406539                 mov     edx, 8
.text:0040653E                 jmp     short loc_4064F0
.text:00406540 ; ---------------------------------------------------------------------------
.text:00406540
.text:00406540 loc_406540:                             ; CODE XREF: ___get_errno+1A↑j
.text:00406540                 cmp     eax, 22h ; '"'
.text:00406543                 jg      short loc_406574
.text:00406545                 cmp     eax, 16h
.text:00406548                 jge     short loc_406512
.text:0040654A                 cmp     eax, 12h
.text:0040654D                 jz      short loc_4064E0
.text:0040654F                 cmp     eax, 12h
.text:00406552                 jg      short loc_406565
.text:00406554                 cmp     eax, 10h
.text:00406557                 jz      short loc_406512
.text:00406559                 mov     edx, 12h
.text:0040655E                 cmp     eax, 11h
.text:00406561
.text:00406561 loc_406561:                             ; CODE XREF: ___get_errno+172↓j
.text:00406561                                         ; ___get_errno+24C↓j ...
.text:00406561                 jnz     short loc_4064F3
.text:00406563                 jmp     short loc_4064F0
.text:00406565 ; ---------------------------------------------------------------------------
.text:00406565
.text:00406565 loc_406565:                             ; CODE XREF: ___get_errno+A2↑j
.text:00406565                 cmp     eax, 14h
.text:00406568                 jle     short loc_406512
.text:0040656A
.text:0040656A loc_40656A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040656A                 mov     edx, 10h
.text:0040656F                 jmp     loc_4064F0
.text:00406574 ; ---------------------------------------------------------------------------
.text:00406574
.text:00406574 loc_406574:                             ; CODE XREF: ___get_errno+93↑j
.text:00406574                 cmp     eax, 41h ; 'A'
.text:00406577                 jz      short loc_406512
.text:00406579                 cmp     eax, 41h ; 'A'
.text:0040657C                 jg      short loc_406591
.text:0040657E                 cmp     eax, 24h ; '$'
.text:00406581                 jz      short loc_406512
.text:00406583                 cmp     eax, 35h ; '5'
.text:00406586                 jnz     loc_4064F3
.text:0040658C                 jmp     loc_4064E0
.text:00406591 ; ---------------------------------------------------------------------------
.text:00406591
.text:00406591 loc_406591:                             ; CODE XREF: ___get_errno+CC↑j
.text:00406591                 cmp     eax, 43h ; 'C'
.text:00406594                 jz      loc_4064E0
.text:0040659A                 cmp     eax, 50h ; 'P'
.text:0040659D                 jnz     loc_4064F3
.text:004065A3
.text:004065A3 loc_4065A3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:004065A3                 mov     edx, 11h
.text:004065A8                 jmp     loc_4064F0
.text:004065A8 ; ---------------------------------------------------------------------------
.text:004065AD                 align 10h
.text:004065B0
.text:004065B0 loc_4065B0:                             ; CODE XREF: ___get_errno+7↑j
.text:004065B0                 cmp     eax, 0A1h ; '¡'
.text:004065B5                 jz      loc_4064E0
.text:004065BB                 cmp     eax, 0A1h ; '¡'
.text:004065C0                 jg      loc_406670
.text:004065C6                 cmp     eax, 81h
.text:004065CB                 jg      short loc_406635
.text:004065CD                 cmp     eax, 80h ; '€'
.text:004065D2                 mov     edx, 0Ah
.text:004065D7                 jge     loc_4064F0
.text:004065DD                 cmp     eax, 6Ch ; 'l'
.text:004065E0                 jz      loc_406512
.text:004065E6                 cmp     eax, 6Ch ; 'l'
.text:004065E9                 jg      short loc_406607
.text:004065EB                 cmp     eax, 57h ; 'W'
.text:004065EE                 jz      loc_4064F3
.text:004065F4                 cmp     eax, 59h ; 'Y'
.text:004065F7                 jnz     loc_4064F3
.text:004065FD
.text:004065FD loc_4065FD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:004065FD                                         ; ___get_errno+23C↓j
.text:004065FD                 mov     edx, 0Bh
.text:00406602                 jmp     loc_4064F0
.text:00406607 ; ---------------------------------------------------------------------------
.text:00406607
.text:00406607 loc_406607:                             ; CODE XREF: ___get_errno+139↑j
.text:00406607                 cmp     eax, 70h ; 'p'
.text:0040660A                 mov     edx, 1Ch
.text:0040660F                 jz      loc_4064F0
.text:00406615                 cmp     eax, 70h ; 'p'
.text:00406618                 jg      short loc_406627
.text:0040661A                 mov     edx, 20h ; ' '
.text:0040661F                 cmp     eax, 6Dh ; 'm'
.text:00406622                 jmp     loc_406561
.text:00406627 ; ---------------------------------------------------------------------------
.text:00406627
.text:00406627 loc_406627:                             ; CODE XREF: ___get_errno+168↑j
.text:00406627                 cmp     eax, 72h ; 'r'
.text:0040662A
.text:0040662A loc_40662A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040662A                 jnz     loc_4064F3
.text:00406630                 jmp     loc_40650B
.text:00406635 ; ---------------------------------------------------------------------------
.text:00406635
.text:00406635 loc_406635:                             ; CODE XREF: ___get_errno+11B↑j
.text:00406635                 cmp     eax, 84h ; '„'
.text:0040663A                 jz      loc_406512
.text:00406640                 cmp     eax, 84h ; '„'
.text:00406645                 jg      short loc_40664E
.text:00406647                 cmp     eax, 82h ; '‚'
.text:0040664C                 jmp     short loc_40662A
.text:0040664E ; ---------------------------------------------------------------------------
.text:0040664E
.text:0040664E loc_40664E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040664E                 cmp     eax, 91h ; '‘'
.text:00406653                 mov     edx, 29h ; ')'
.text:00406658                 jz      loc_4064F0
.text:0040665E                 cmp     eax, 9Eh ; 'ž'
.text:00406663
.text:00406663 loc_406663:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00406663                 jnz     loc_4064F3
.text:00406669                 jmp     loc_406512
.text:00406669 ; ---------------------------------------------------------------------------
.text:0040666E                 align 10h
.text:00406670
.text:00406670 loc_406670:                             ; CODE XREF: ___get_errno+110↑j
.text:00406670                 cmp     eax, 0CEh ; 'Î'
.text:00406675                 jz      loc_4064E0
.text:0040667B                 cmp     eax, 0CEh ; 'Î'
.text:00406680                 jg      short loc_4066D0
.text:00406682                 cmp     eax, 0AAh ; 'ª'
.text:00406687                 jz      loc_40656A
.text:0040668D                 cmp     eax, 0AAh ; 'ª'
.text:00406692                 jg      short loc_4066A6
.text:00406694                 cmp     eax, 0A4h ; '¤'
.text:00406699                 jz      loc_4065FD
.text:0040669F                 cmp     eax, 0A7h ; '§'
.text:004066A4                 jmp     short loc_406663
.text:004066A6 ; ---------------------------------------------------------------------------
.text:004066A6
.text:004066A6 loc_4066A6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:004066A6                 cmp     eax, 0B7h ; '·'
.text:004066AB                 jz      loc_4065A3
.text:004066B1                 cmp     eax, 0B7h ; '·'
.text:004066B6                 jl      loc_4064F3
.text:004066BC                 sub     eax, 0BCh ; '¼'
.text:004066C1                 cmp     eax, 0Eh
.text:004066C4                 ja      loc_4064F3
.text:004066CA                 jmp     loc_406539
.text:004066CA ; ---------------------------------------------------------------------------
.text:004066CF                 align 10h
.text:004066D0
.text:004066D0 loc_4066D0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:004066D0                 cmp     eax, 46Bh
.text:004066D5                 mov     edx, 24h ; '$'
.text:004066DA                 jz      loc_4064F0
.text:004066E0                 cmp     eax, 46Bh
.text:004066E5                 jg      short loc_406701
.text:004066E7                 cmp     eax, 0D7h ; '×'
.text:004066EC                 jz      loc_4065FD
.text:004066F2                 mov     edx, 5
.text:004066F7                 cmp     eax, 45Dh
.text:004066FC                 jmp     loc_406561
.text:00406701 ; ---------------------------------------------------------------------------
.text:00406701
.text:00406701 loc_406701:                             ; CODE XREF: ___get_errno+235↑j
.text:00406701                 cmp     eax, 4D5h
.text:00406706                 mov     edx, 4
.text:0040670B                 jz      loc_4064F0
.text:00406711                 cmp     eax, 4D5h
.text:00406716                 jg      short loc_406727
.text:00406718                 mov     edx, 13h
.text:0040671D                 cmp     eax, 4B0h
.text:00406722                 jmp     loc_406561
.text:00406727 ; ---------------------------------------------------------------------------
.text:00406727
.text:00406727 loc_406727:                             ; CODE XREF: ___get_errno+266↑j
.text:00406727                 cmp     eax, 718h
.text:0040672C                 jnz     loc_4064F3
.text:00406732                 jmp     loc_406519
.text:00406732 ___get_errno    endp
.text:00406732
.text:00406732 ; ---------------------------------------------------------------------------
.text:00406737                 align 10h
.text:00406740
.text:00406740 ; =============== S U B R O U T I N E =======================================
.text:00406740
.text:00406740
.text:00406740 sub_406740      proc near               ; CODE XREF: sub_406150+CB↑p
.text:00406740                                         ; DATA XREF: sub_4060A0+7C↑o
.text:00406740
.text:00406740 var_C           = dword ptr -0Ch
.text:00406740
.text:00406740                 sub     esp, 0Ch
.text:00406743                 call    GetLastError
.text:00406748                 mov     [esp+0Ch+var_C], eax
.text:0040674B                 call    ___get_errno
.text:00406750                 add     esp, 0Ch
.text:00406753                 retn
.text:00406753 sub_406740      endp
.text:00406753
.text:00406753 ; ---------------------------------------------------------------------------
.text:00406754                 align 10h
.text:00406760
.text:00406760 ; =============== S U B R O U T I N E =======================================
.text:00406760
.text:00406760 ; Attributes: thunk
.text:00406760
.text:00406760 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00406760 mbrtowc         proc near               ; CODE XREF: sub_403680+757↑p
.text:00406760
.text:00406760 DstCh           = dword ptr  4
.text:00406760 SrcCh           = dword ptr  8
.text:00406760 SizeInBytes     = dword ptr  0Ch
.text:00406760 State           = dword ptr  10h
.text:00406760
.text:00406760                 jmp     ds:__imp_mbrtowc
.text:00406760 mbrtowc         endp
.text:00406760
.text:00406760 ; ---------------------------------------------------------------------------
.text:00406766                 align 10h
.text:00406770
.text:00406770 ; =============== S U B R O U T I N E =======================================
.text:00406770
.text:00406770 ; Attributes: bp-based frame
.text:00406770
.text:00406770 sub_406770      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00406770                 push    ebp
.text:00406771                 mov     ecx, offset dword_408000
.text:00406776                 cmp     ecx, offset dword_408000
.text:0040677C                 mov     ebp, esp
.text:0040677E                 jnb     short loc_406796
.text:00406780
.text:00406780 loc_406780:                             ; CODE XREF: sub_406770+24↓j
.text:00406780                 mov     edx, [ecx+4]
.text:00406783                 mov     eax, [ecx]
.text:00406785                 add     ecx, 8
.text:00406788                 add     [edx+400000h], eax
.text:0040678E                 cmp     ecx, offset dword_408000
.text:00406794                 jb      short loc_406780
.text:00406796
.text:00406796 loc_406796:                             ; CODE XREF: sub_406770+E↑j
.text:00406796                 pop     ebp
.text:00406797                 retn
.text:00406797 sub_406770      endp
.text:00406797
.text:00406797 ; ---------------------------------------------------------------------------
.text:00406798                 align 10h
.text:004067A0
.text:004067A0 ; =============== S U B R O U T I N E =======================================
.text:004067A0
.text:004067A0 ; Attributes: bp-based frame
.text:004067A0
.text:004067A0 sub_4067A0      proc near               ; CODE XREF: sub_401080+16↑p
.text:004067A0                                         ; TopLevelExceptionFilter+D7↑p
.text:004067A0                 push    ebp
.text:004067A1                 mov     ebp, esp
.text:004067A3                 fninit
.text:004067A5                 pop     ebp
.text:004067A6                 retn
.text:004067A6 sub_4067A0      endp
.text:004067A6
.text:004067A6 ; ---------------------------------------------------------------------------
.text:004067A7                 align 10h
.text:004067B0
.text:004067B0 ; =============== S U B R O U T I N E =======================================
.text:004067B0
.text:004067B0 ; Attributes: bp-based frame
.text:004067B0
.text:004067B0 ; void __cdecl sub_4067B0()
.text:004067B0 sub_4067B0      proc near               ; DATA XREF: .text:loc_4067F9↓o
.text:004067B0                                         ; sub_406840:loc_40686E↓o
.text:004067B0                 push    ebp
.text:004067B1                 mov     ebp, esp
.text:004067B3                 sub     esp, 8
.text:004067B6                 mov     eax, off_4070D4
.text:004067BB                 mov     edx, [eax]
.text:004067BD                 test    edx, edx
.text:004067BF                 jnz     short loc_4067C5
.text:004067C1
.text:004067C1 loc_4067C1:                             ; CODE XREF: sub_4067B0+2C↓j
.text:004067C1                 mov     esp, ebp
.text:004067C3                 pop     ebp
.text:004067C4                 retn
.text:004067C5 ; ---------------------------------------------------------------------------
.text:004067C5
.text:004067C5 loc_4067C5:                             ; CODE XREF: sub_4067B0+F↑j
.text:004067C5                                         ; sub_4067B0+2A↓j
.text:004067C5                 call    dword ptr [eax]
.text:004067C7                 mov     edx, off_4070D4
.text:004067CD                 mov     ecx, [edx+4]
.text:004067D0                 lea     eax, [edx+4]
.text:004067D3                 mov     off_4070D4, eax
.text:004067D8                 test    ecx, ecx
.text:004067DA                 jnz     short loc_4067C5
.text:004067DC                 jmp     short loc_4067C1
.text:004067DC sub_4067B0      endp
.text:004067DC
.text:004067DC ; ---------------------------------------------------------------------------
.text:004067DE                 align 10h
.text:004067E0                 push    ebp
.text:004067E1                 mov     ebp, esp
.text:004067E3                 sub     esp, 8
.text:004067E6                 mov     [ebp-4], ebx
.text:004067E9                 mov     eax, ds:dword_406E00
.text:004067EE                 cmp     eax, 0FFFFFFFFh
.text:004067F1                 jz      short loc_40681C
.text:004067F3
.text:004067F3 loc_4067F3:                             ; CODE XREF: .text:00406826↓j
.text:004067F3                                         ; .text:00406839↓j
.text:004067F3                 test    eax, eax
.text:004067F5                 mov     ebx, eax
.text:004067F7                 jnz     short loc_406810
.text:004067F9
.text:004067F9 loc_4067F9:                             ; CODE XREF: .text:0040681A↓j
.text:004067F9                 mov     dword ptr [esp], offset sub_4067B0
.text:00406800                 call    sub_401040
.text:00406805                 mov     ebx, [ebp-4]
.text:00406808                 mov     esp, ebp
.text:0040680A                 pop     ebp
.text:0040680B                 retn
.text:0040680B ; ---------------------------------------------------------------------------
.text:0040680C                 align 10h
.text:00406810
.text:00406810 loc_406810:                             ; CODE XREF: .text:004067F7↑j
.text:00406810                                         ; .text:00406818↓j
.text:00406810                 call    ds:dword_406E00[ebx*4]
.text:00406817                 dec     ebx
.text:00406818                 jnz     short loc_406810
.text:0040681A                 jmp     short loc_4067F9
.text:0040681C ; ---------------------------------------------------------------------------
.text:0040681C
.text:0040681C loc_40681C:                             ; CODE XREF: .text:004067F1↑j
.text:0040681C                 mov     ecx, ds:dword_406E04
.text:00406822                 xor     eax, eax
.text:00406824                 test    ecx, ecx
.text:00406826                 jz      short loc_4067F3
.text:00406828                 mov     edx, offset dword_406E00
.text:0040682D                 lea     esi, [esi+0]
.text:00406830
.text:00406830 loc_406830:                             ; CODE XREF: .text:00406837↓j
.text:00406830                 inc     eax
.text:00406831                 mov     ecx, [edx+eax*4+4]
.text:00406835                 test    ecx, ecx
.text:00406837                 jnz     short loc_406830
.text:00406839                 jmp     short loc_4067F3
.text:00406839 ; ---------------------------------------------------------------------------
.text:0040683B                 align 10h
.text:00406840
.text:00406840 ; =============== S U B R O U T I N E =======================================
.text:00406840
.text:00406840 ; Attributes: bp-based frame
.text:00406840
.text:00406840 sub_406840      proc near               ; CODE XREF: sub_401380+18↑p
.text:00406840
.text:00406840 var_8           = dword ptr -8
.text:00406840 var_4           = dword ptr -4
.text:00406840
.text:00406840                 push    ebp
.text:00406841                 mov     ebp, esp
.text:00406843                 sub     esp, 8
.text:00406846                 mov     [ebp+var_4], ebx
.text:00406849                 mov     edx, dword_4070D0
.text:0040684F                 test    edx, edx
.text:00406851                 jnz     short loc_40687A
.text:00406853                 mov     eax, ds:dword_406E00
.text:00406858                 mov     edx, 1
.text:0040685D                 mov     dword_4070D0, edx
.text:00406863                 cmp     eax, 0FFFFFFFFh
.text:00406866                 jz      short loc_40688D
.text:00406868
.text:00406868 loc_406868:                             ; CODE XREF: sub_406840+57↓j
.text:00406868                                         ; sub_406840+69↓j
.text:00406868                 test    eax, eax
.text:0040686A                 mov     ebx, eax
.text:0040686C                 jnz     short loc_406881
.text:0040686E
.text:0040686E loc_40686E:                             ; CODE XREF: sub_406840+4B↓j
.text:0040686E                 mov     [esp+8+var_8], offset sub_4067B0 ; void (__cdecl *)()
.text:00406875                 call    sub_401040
.text:0040687A
.text:0040687A loc_40687A:                             ; CODE XREF: sub_406840+11↑j
.text:0040687A                 mov     ebx, [ebp+var_4]
.text:0040687D                 mov     esp, ebp
.text:0040687F                 pop     ebp
.text:00406880                 retn
.text:00406881 ; ---------------------------------------------------------------------------
.text:00406881
.text:00406881 loc_406881:                             ; CODE XREF: sub_406840+2C↑j
.text:00406881                                         ; sub_406840+49↓j
.text:00406881                 call    ds:dword_406E00[ebx*4]
.text:00406888                 dec     ebx
.text:00406889                 jnz     short loc_406881
.text:0040688B                 jmp     short loc_40686E
.text:0040688D ; ---------------------------------------------------------------------------
.text:0040688D
.text:0040688D loc_40688D:                             ; CODE XREF: sub_406840+26↑j
.text:0040688D                 mov     ecx, ds:dword_406E04
.text:00406893                 xor     eax, eax
.text:00406895                 test    ecx, ecx
.text:00406897                 jz      short loc_406868
.text:00406899                 mov     edx, offset dword_406E00
.text:0040689E                 mov     esi, esi
.text:004068A0
.text:004068A0 loc_4068A0:                             ; CODE XREF: sub_406840+67↓j
.text:004068A0                 inc     eax
.text:004068A1                 mov     ebx, [edx+eax*4+4]
.text:004068A5                 test    ebx, ebx
.text:004068A7                 jnz     short loc_4068A0
.text:004068A9                 jmp     short loc_406868
.text:004068A9 sub_406840      endp
.text:004068A9
.text:004068A9 ; ---------------------------------------------------------------------------
.text:004068AB                 align 10h
.text:004068B0
.text:004068B0 ; =============== S U B R O U T I N E =======================================
.text:004068B0
.text:004068B0 ; Attributes: info_from_lumina
.text:004068B0
.text:004068B0 ; void *__cdecl _alloca(size_t Size)
.text:004068B0 __alloca        proc near               ; CODE XREF: sub_401380+13↑p
.text:004068B0                 push    ecx
.text:004068B1                 mov     ecx, esp
.text:004068B3                 add     ecx, 8
.text:004068B6
.text:004068B6 loc_4068B6:                             ; CODE XREF: __alloca+1B↓j
.text:004068B6                 cmp     eax, 1000h
.text:004068BB                 jb      short loc_4068CD
.text:004068BD                 sub     ecx, 1000h
.text:004068C3                 or      dword ptr [ecx], 0
.text:004068C6                 sub     eax, 1000h
.text:004068CB                 jmp     short loc_4068B6
.text:004068CD ; ---------------------------------------------------------------------------
.text:004068CD
.text:004068CD loc_4068CD:                             ; CODE XREF: __alloca+B↑j
.text:004068CD                 sub     ecx, eax
.text:004068CF                 or      dword ptr [ecx], 0
.text:004068D2                 mov     eax, esp
.text:004068D4                 mov     esp, ecx
.text:004068D6                 mov     ecx, [eax]
.text:004068D8                 mov     eax, [eax+4]
.text:004068DB                 jmp     eax
.text:004068DB __alloca        endp
.text:004068DB
.text:004068DB ; ---------------------------------------------------------------------------
.text:004068DD                 align 10h
.text:004068E0
.text:004068E0 ; =============== S U B R O U T I N E =======================================
.text:004068E0
.text:004068E0 ; Attributes: bp-based frame
.text:004068E0
.text:004068E0 sub_4068E0      proc near               ; CODE XREF: sub_405960+22F↑p
.text:004068E0                                         ; sub_405C90+AC↑p
.text:004068E0
.text:004068E0 var_3C          = dword ptr -3Ch
.text:004068E0 var_34          = dword ptr -34h
.text:004068E0 var_30          = dword ptr -30h
.text:004068E0 var_2C          = dword ptr -2Ch
.text:004068E0 var_28          = dword ptr -28h
.text:004068E0 var_24          = dword ptr -24h
.text:004068E0 var_1C          = dword ptr -1Ch
.text:004068E0 var_18          = dword ptr -18h
.text:004068E0 var_14          = dword ptr -14h
.text:004068E0 arg_0           = dword ptr  8
.text:004068E0 arg_4           = dword ptr  0Ch
.text:004068E0 arg_8           = dword ptr  10h
.text:004068E0 arg_C           = dword ptr  14h
.text:004068E0
.text:004068E0                 push    ebp
.text:004068E1                 mov     ebp, esp
.text:004068E3                 push    edi
.text:004068E4                 push    esi
.text:004068E5                 push    ebx
.text:004068E6                 sub     esp, 34h
.text:004068E9                 mov     ebx, [ebp+arg_4]
.text:004068EC                 mov     [ebp+var_28], 0
.text:004068F3                 mov     ecx, [ebp+arg_0]
.text:004068F6                 mov     eax, [ebp+arg_8]
.text:004068F9                 mov     [ebp+var_24], 0
.text:00406900                 test    ebx, ebx
.text:00406902                 mov     edx, [ebp+arg_C]
.text:00406905                 mov     [ebp+var_1C], 0
.text:0040690C                 js      loc_406A84
.text:00406912
.text:00406912 loc_406912:                             ; CODE XREF: sub_4068E0+1B2↓j
.text:00406912                 test    edx, edx
.text:00406914                 js      loc_406A78
.text:0040691A
.text:0040691A loc_40691A:                             ; CODE XREF: sub_4068E0+19F↓j
.text:0040691A                 mov     [ebp+var_2C], edx
.text:0040691D                 test    edx, edx
.text:0040691F                 mov     esi, eax
.text:00406921                 mov     [ebp+var_30], ecx
.text:00406924                 mov     edi, ebx
.text:00406926                 jnz     short loc_406991
.text:00406928                 cmp     eax, ebx
.text:0040692A                 jbe     short loc_406974
.text:0040692C                 mov     eax, ecx
.text:0040692E                 mov     edx, ebx
.text:00406930                 div     esi
.text:00406932
.text:00406932 loc_406932:                             ; CODE XREF: sub_4068E0+AF↓j
.text:00406932                 mov     [ebp+var_30], edx
.text:00406935                 lea     ecx, [ebp+var_18]
.text:00406938                 test    ecx, ecx
.text:0040693A                 jz      short loc_406955
.text:0040693C                 mov     [ebp+var_24], 0
.text:00406943
.text:00406943 loc_406943:                             ; CODE XREF: sub_4068E0+FE↓j
.text:00406943                 mov     eax, [ebp+var_30]
.text:00406946                 mov     [ebp+var_28], eax
.text:00406949                 mov     edx, [ebp+var_28]
.text:0040694C                 mov     ecx, [ebp+var_24]
.text:0040694F                 mov     [ebp+var_18], edx
.text:00406952                 mov     [ebp+var_14], ecx
.text:00406955
.text:00406955 loc_406955:                             ; CODE XREF: sub_4068E0+5A↑j
.text:00406955                                         ; sub_4068E0+C8↓j ...
.text:00406955                 mov     eax, [ebp+var_1C]
.text:00406958                 test    eax, eax
.text:0040695A                 jz      short loc_406966
.text:0040695C                 neg     [ebp+var_18]
.text:0040695F                 adc     [ebp+var_14], 0
.text:00406963                 neg     [ebp+var_14]
.text:00406966
.text:00406966 loc_406966:                             ; CODE XREF: sub_4068E0+7A↑j
.text:00406966                 mov     eax, [ebp+var_18]
.text:00406969                 mov     edx, [ebp+var_14]
.text:0040696C                 add     esp, 34h
.text:0040696F                 pop     ebx
.text:00406970                 pop     esi
.text:00406971                 pop     edi
.text:00406972                 pop     ebp
.text:00406973                 retn
.text:00406974 ; ---------------------------------------------------------------------------
.text:00406974
.text:00406974 loc_406974:                             ; CODE XREF: sub_4068E0+4A↑j
.text:00406974                 test    eax, eax
.text:00406976                 jnz     short loc_406983
.text:00406978                 mov     eax, 1
.text:0040697D                 xor     edx, edx
.text:0040697F                 div     esi
.text:00406981                 mov     esi, eax
.text:00406983
.text:00406983 loc_406983:                             ; CODE XREF: sub_4068E0+96↑j
.text:00406983                 mov     eax, edi
.text:00406985                 mov     edx, [ebp+var_2C]
.text:00406988                 div     esi
.text:0040698A                 mov     eax, [ebp+var_30]
.text:0040698D                 div     esi
.text:0040698F                 jmp     short loc_406932
.text:00406991 ; ---------------------------------------------------------------------------
.text:00406991
.text:00406991 loc_406991:                             ; CODE XREF: sub_4068E0+46↑j
.text:00406991                 cmp     [ebp+var_2C], ebx
.text:00406994                 jbe     short loc_4069B0
.text:00406996                 mov     [ebp+var_28], ecx
.text:00406999
.text:00406999 loc_406999:                             ; CODE XREF: sub_4068E0+17E↓j
.text:00406999                 mov     [ebp+var_24], edi
.text:0040699C                 mov     eax, [ebp+var_28]
.text:0040699F                 mov     edx, [ebp+var_24]
.text:004069A2                 mov     [ebp+var_18], eax
.text:004069A5                 mov     [ebp+var_14], edx
.text:004069A8                 jmp     short loc_406955
.text:004069A8 ; ---------------------------------------------------------------------------
.text:004069AA                 align 10h
.text:004069B0
.text:004069B0 loc_4069B0:                             ; CODE XREF: sub_4068E0+B4↑j
.text:004069B0                 bsr     eax, [ebp+var_2C]
.text:004069B4                 mov     ebx, eax
.text:004069B6                 xor     ebx, 1Fh
.text:004069B9                 jnz     short loc_4069E3
.text:004069BB                 cmp     edi, [ebp+var_2C]
.text:004069BE                 ja      short loc_4069C5
.text:004069C0                 cmp     [ebp+var_30], esi
.text:004069C3                 jb      short loc_4069D0
.text:004069C5
.text:004069C5 loc_4069C5:                             ; CODE XREF: sub_4068E0+DE↑j
.text:004069C5                 mov     edx, [ebp+var_30]
.text:004069C8                 sub     edx, esi
.text:004069CA                 sbb     edi, [ebp+var_2C]
.text:004069CD                 mov     [ebp+var_30], edx
.text:004069D0
.text:004069D0 loc_4069D0:                             ; CODE XREF: sub_4068E0+E3↑j
.text:004069D0                 lea     ecx, [ebp+var_18]
.text:004069D3                 test    ecx, ecx
.text:004069D5                 jz      loc_406955
.text:004069DB                 mov     [ebp+var_24], edi
.text:004069DE                 jmp     loc_406943
.text:004069E3 ; ---------------------------------------------------------------------------
.text:004069E3
.text:004069E3 loc_4069E3:                             ; CODE XREF: sub_4068E0+D9↑j
.text:004069E3                 mov     edx, [ebp+var_2C]
.text:004069E6                 mov     eax, 20h ; ' '
.text:004069EB                 mov     cl, bl
.text:004069ED                 sub     eax, ebx
.text:004069EF                 mov     [ebp+var_34], eax
.text:004069F2                 shl     edx, cl
.text:004069F4                 mov     eax, esi
.text:004069F6                 movzx   ecx, byte ptr [ebp+var_34]
.text:004069FA                 shr     eax, cl
.text:004069FC                 mov     cl, bl
.text:004069FE                 shl     esi, cl
.text:00406A00                 or      edx, eax
.text:00406A02                 mov     eax, [ebp+var_30]
.text:00406A05                 movzx   ecx, byte ptr [ebp+var_34]
.text:00406A09                 mov     [ebp+var_2C], edx
.text:00406A0C                 mov     edx, edi
.text:00406A0E                 shr     edx, cl
.text:00406A10                 mov     cl, bl
.text:00406A12                 shl     edi, cl
.text:00406A14                 movzx   ecx, byte ptr [ebp+var_34]
.text:00406A18                 shr     eax, cl
.text:00406A1A                 or      edi, eax
.text:00406A1C                 mov     eax, edi
.text:00406A1E                 mov     cl, bl
.text:00406A20                 div     [ebp+var_2C]
.text:00406A23                 shl     [ebp+var_30], cl
.text:00406A26                 mov     edi, edx
.text:00406A28                 mul     esi
.text:00406A2A                 mov     [ebp+var_3C], eax
.text:00406A2D                 cmp     edx, edi
.text:00406A2F                 ja      short loc_406A6B
.text:00406A31                 cmp     edx, edi
.text:00406A33                 jz      short loc_406A63
.text:00406A35
.text:00406A35 loc_406A35:                             ; CODE XREF: sub_4068E0+189↓j
.text:00406A35                                         ; sub_4068E0+196↓j
.text:00406A35                 lea     eax, [ebp+var_18]
.text:00406A38                 test    eax, eax
.text:00406A3A                 jz      loc_406955
.text:00406A40                 movzx   ecx, byte ptr [ebp+var_34]
.text:00406A44                 mov     eax, [ebp+var_30]
.text:00406A47                 sub     eax, [ebp+var_3C]
.text:00406A4A                 sbb     edi, edx
.text:00406A4C                 mov     [ebp+var_30], eax
.text:00406A4F                 mov     edx, edi
.text:00406A51                 shl     edx, cl
.text:00406A53                 mov     cl, bl
.text:00406A55                 shr     eax, cl
.text:00406A57                 or      edx, eax
.text:00406A59                 mov     [ebp+var_28], edx
.text:00406A5C                 shr     edi, cl
.text:00406A5E                 jmp     loc_406999
.text:00406A63 ; ---------------------------------------------------------------------------
.text:00406A63
.text:00406A63 loc_406A63:                             ; CODE XREF: sub_4068E0+153↑j
.text:00406A63                 mov     eax, [ebp+var_30]
.text:00406A66                 cmp     [ebp+var_3C], eax
.text:00406A69                 jbe     short loc_406A35
.text:00406A6B
.text:00406A6B loc_406A6B:                             ; CODE XREF: sub_4068E0+14F↑j
.text:00406A6B                 mov     ecx, [ebp+var_3C]
.text:00406A6E                 sub     ecx, esi
.text:00406A70                 sbb     edx, [ebp+var_2C]
.text:00406A73                 mov     [ebp+var_3C], ecx
.text:00406A76                 jmp     short loc_406A35
.text:00406A78 ; ---------------------------------------------------------------------------
.text:00406A78
.text:00406A78 loc_406A78:                             ; CODE XREF: sub_4068E0+34↑j
.text:00406A78                 neg     eax
.text:00406A7A                 adc     edx, 0
.text:00406A7D                 neg     edx
.text:00406A7F                 jmp     loc_40691A
.text:00406A84 ; ---------------------------------------------------------------------------
.text:00406A84
.text:00406A84 loc_406A84:                             ; CODE XREF: sub_4068E0+2C↑j
.text:00406A84                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:00406A8B                 neg     ecx
.text:00406A8D                 adc     ebx, 0
.text:00406A90                 neg     ebx
.text:00406A92                 jmp     loc_406912
.text:00406A92 sub_4068E0      endp
.text:00406A92
.text:00406A92 ; ---------------------------------------------------------------------------
.text:00406A97                 align 10h
.text:00406AA0
.text:00406AA0 ; =============== S U B R O U T I N E =======================================
.text:00406AA0
.text:00406AA0 ; Attributes: thunk
.text:00406AA0
.text:00406AA0 ; int __cdecl dup(int FileHandle)
.text:00406AA0 _dup            proc near               ; CODE XREF: sub_406270+57↑p
.text:00406AA0
.text:00406AA0 FileHandle      = dword ptr  4
.text:00406AA0
.text:00406AA0                 jmp     ds:__imp__dup
.text:00406AA0 _dup            endp
.text:00406AA0
.text:00406AA0 ; ---------------------------------------------------------------------------
.text:00406AA6                 align 10h
.text:00406AB0                 jmp     ds:__set_app_type
.text:00406AB0 ; ---------------------------------------------------------------------------
.text:00406AB6                 align 10h
.text:00406AC0
.text:00406AC0 ; =============== S U B R O U T I N E =======================================
.text:00406AC0
.text:00406AC0 ; Attributes: thunk
.text:00406AC0
.text:00406AC0 ; void __cdecl cexit()
.text:00406AC0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00406AC0                 jmp     ds:__imp__cexit
.text:00406AC0 _cexit          endp
.text:00406AC0
.text:00406AC0 ; ---------------------------------------------------------------------------
.text:00406AC6                 align 10h
.text:00406AD0
.text:00406AD0 ; =============== S U B R O U T I N E =======================================
.text:00406AD0
.text:00406AD0 ; Attributes: thunk
.text:00406AD0
.text:00406AD0 ; char ***__cdecl _p__environ()
.text:00406AD0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00406AD0                 jmp     ds:__imp___p__environ
.text:00406AD0 __p__environ    endp
.text:00406AD0
.text:00406AD0 ; ---------------------------------------------------------------------------
.text:00406AD6                 align 10h
.text:00406AE0
.text:00406AE0 ; =============== S U B R O U T I N E =======================================
.text:00406AE0
.text:00406AE0 ; Attributes: thunk
.text:00406AE0
.text:00406AE0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00406AE0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00406AE0                                         ; TopLevelExceptionFilter+88↑p ...
.text:00406AE0
.text:00406AE0 Signal          = dword ptr  4
.text:00406AE0 Function        = dword ptr  8
.text:00406AE0
.text:00406AE0                 jmp     ds:__imp_signal
.text:00406AE0 signal          endp
.text:00406AE0
.text:00406AE0 ; ---------------------------------------------------------------------------
.text:00406AE6                 align 10h
.text:00406AF0
.text:00406AF0 ; =============== S U B R O U T I N E =======================================
.text:00406AF0
.text:00406AF0 ; Attributes: thunk
.text:00406AF0
.text:00406AF0 ; int *__cdecl _p__fmode()
.text:00406AF0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00406AF0                 jmp     ds:__imp___p__fmode
.text:00406AF0 __p__fmode      endp
.text:00406AF0
.text:00406AF0 ; ---------------------------------------------------------------------------
.text:00406AF6                 align 10h
.text:00406B00
.text:00406B00 ; =============== S U B R O U T I N E =======================================
.text:00406B00
.text:00406B00 ; Attributes: thunk
.text:00406B00
.text:00406B00 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00406B00 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00406B00                                         ; sub_401080+90↑p ...
.text:00406B00
.text:00406B00 FileHandle      = dword ptr  4
.text:00406B00 Mode            = dword ptr  8
.text:00406B00
.text:00406B00                 jmp     ds:__imp__setmode
.text:00406B00 _setmode        endp
.text:00406B00
.text:00406B00 ; ---------------------------------------------------------------------------
.text:00406B06                 align 10h
.text:00406B10
.text:00406B10 ; =============== S U B R O U T I N E =======================================
.text:00406B10
.text:00406B10 ; Attributes: thunk
.text:00406B10
.text:00406B10 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00406B10                 jmp     ds:__imp___getmainargs
.text:00406B10 __getmainargs   endp
.text:00406B10
.text:00406B10 ; ---------------------------------------------------------------------------
.text:00406B16                 align 10h
.text:00406B20
.text:00406B20 ; =============== S U B R O U T I N E =======================================
.text:00406B20
.text:00406B20 ; Attributes: thunk
.text:00406B20
.text:00406B20 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00406B20 setlocale       proc near               ; CODE XREF: sub_401380+34↑p
.text:00406B20                                         ; sub_4032A0+16↑p ...
.text:00406B20
.text:00406B20 Category        = dword ptr  4
.text:00406B20 Locale          = dword ptr  8
.text:00406B20
.text:00406B20                 jmp     ds:__imp_setlocale
.text:00406B20 setlocale       endp
.text:00406B20
.text:00406B20 ; ---------------------------------------------------------------------------
.text:00406B26                 align 10h
.text:00406B30
.text:00406B30 ; =============== S U B R O U T I N E =======================================
.text:00406B30
.text:00406B30 ; Attributes: noreturn thunk
.text:00406B30
.text:00406B30 ; void __cdecl __noreturn exit(int Code)
.text:00406B30 exit            proc near               ; CODE XREF: sub_401380:loc_4014A6↑p
.text:00406B30                                         ; sub_401790+3E↑p ...
.text:00406B30
.text:00406B30 Code            = dword ptr  4
.text:00406B30
.text:00406B30                 jmp     ds:__imp_exit
.text:00406B30 exit            endp
.text:00406B30
.text:00406B30 ; ---------------------------------------------------------------------------
.text:00406B36                 align 10h
.text:00406B40
.text:00406B40 ; =============== S U B R O U T I N E =======================================
.text:00406B40
.text:00406B40 ; Attributes: thunk
.text:00406B40
.text:00406B40 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00406B40 fputs           proc near               ; CODE XREF: sub_401790+A4↑p
.text:00406B40                                         ; sub_401790+C6↑p ...
.text:00406B40
.text:00406B40 Buffer          = dword ptr  4
.text:00406B40 Stream          = dword ptr  8
.text:00406B40
.text:00406B40                 jmp     ds:__imp_fputs
.text:00406B40 fputs           endp
.text:00406B40
.text:00406B40 ; ---------------------------------------------------------------------------
.text:00406B46                 align 10h
.text:00406B50
.text:00406B50 ; =============== S U B R O U T I N E =======================================
.text:00406B50
.text:00406B50 ; Attributes: thunk
.text:00406B50
.text:00406B50 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00406B50 fprintf         proc near               ; CODE XREF: sub_401380+1B3↑p
.text:00406B50                                         ; sub_401790+36↑p ...
.text:00406B50
.text:00406B50 Stream          = dword ptr  4
.text:00406B50 Format          = dword ptr  8
.text:00406B50
.text:00406B50                 jmp     ds:__imp_fprintf
.text:00406B50 fprintf         endp
.text:00406B50
.text:00406B50 ; ---------------------------------------------------------------------------
.text:00406B56                 align 10h
.text:00406B60
.text:00406B60 ; =============== S U B R O U T I N E =======================================
.text:00406B60
.text:00406B60 ; Attributes: thunk
.text:00406B60
.text:00406B60 ; int printf(const char *const Format, ...)
.text:00406B60 printf          proc near               ; CODE XREF: sub_401790+5D↑p
.text:00406B60                                         ; sub_401790+82↑p ...
.text:00406B60
.text:00406B60 Format          = dword ptr  4
.text:00406B60
.text:00406B60                 jmp     ds:__imp_printf
.text:00406B60 printf          endp
.text:00406B60
.text:00406B60 ; ---------------------------------------------------------------------------
.text:00406B66                 align 10h
.text:00406B70
.text:00406B70 ; =============== S U B R O U T I N E =======================================
.text:00406B70
.text:00406B70 ; Attributes: thunk
.text:00406B70
.text:00406B70 ; struct tm *__cdecl localtime(const __time32_t *const Time)
.text:00406B70 localtime       proc near               ; CODE XREF: sub_401940+166↑p
.text:00406B70
.text:00406B70 Time            = dword ptr  4
.text:00406B70
.text:00406B70                 jmp     ds:__imp_localtime
.text:00406B70 localtime       endp
.text:00406B70
.text:00406B70 ; ---------------------------------------------------------------------------
.text:00406B76                 align 10h
.text:00406B80
.text:00406B80 ; =============== S U B R O U T I N E =======================================
.text:00406B80
.text:00406B80 ; Attributes: thunk
.text:00406B80
.text:00406B80 ; int *__cdecl errno()
.text:00406B80 _errno          proc near               ; CODE XREF: sub_401380:loc_4014B0↑p
.text:00406B80                                         ; sub_401380:loc_40156D↑p ...
.text:00406B80                 jmp     ds:__imp__errno
.text:00406B80 _errno          endp
.text:00406B80
.text:00406B80 ; ---------------------------------------------------------------------------
.text:00406B86                 align 10h
.text:00406B90
.text:00406B90 ; =============== S U B R O U T I N E =======================================
.text:00406B90
.text:00406B90 ; Attributes: thunk
.text:00406B90
.text:00406B90 ; __time32_t __cdecl time(__time32_t *const Time)
.text:00406B90 time            proc near               ; CODE XREF: sub_401940+D7↑p
.text:00406B90
.text:00406B90 Time            = dword ptr  4
.text:00406B90
.text:00406B90                 jmp     ds:__imp_time
.text:00406B90 time            endp
.text:00406B90
.text:00406B90 ; ---------------------------------------------------------------------------
.text:00406B96                 align 10h
.text:00406BA0
.text:00406BA0 ; =============== S U B R O U T I N E =======================================
.text:00406BA0
.text:00406BA0 ; Attributes: thunk
.text:00406BA0
.text:00406BA0 ; int __cdecl fclose(FILE *Stream)
.text:00406BA0 fclose          proc near               ; CODE XREF: sub_401940+68↑p
.text:00406BA0                                         ; sub_4031B0+27↑p
.text:00406BA0
.text:00406BA0 Stream          = dword ptr  4
.text:00406BA0
.text:00406BA0                 jmp     ds:__imp_fclose
.text:00406BA0 fclose          endp
.text:00406BA0
.text:00406BA0 ; ---------------------------------------------------------------------------
.text:00406BA6                 align 10h
.text:00406BB0
.text:00406BB0 ; =============== S U B R O U T I N E =======================================
.text:00406BB0
.text:00406BB0 ; Attributes: thunk
.text:00406BB0
.text:00406BB0 ; char *__cdecl fgets(char *Buffer, int MaxCount, FILE *Stream)
.text:00406BB0 fgets           proc near               ; CODE XREF: sub_401940+56↑p
.text:00406BB0
.text:00406BB0 Buffer          = dword ptr  4
.text:00406BB0 MaxCount        = dword ptr  8
.text:00406BB0 Stream          = dword ptr  0Ch
.text:00406BB0
.text:00406BB0                 jmp     ds:__imp_fgets
.text:00406BB0 fgets           endp
.text:00406BB0
.text:00406BB0 ; ---------------------------------------------------------------------------
.text:00406BB6                 align 10h
.text:00406BC0
.text:00406BC0 ; =============== S U B R O U T I N E =======================================
.text:00406BC0
.text:00406BC0 ; Attributes: thunk
.text:00406BC0
.text:00406BC0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00406BC0 fopen           proc near               ; CODE XREF: sub_401940+38↑p
.text:00406BC0
.text:00406BC0 FileName        = dword ptr  4
.text:00406BC0 Mode            = dword ptr  8
.text:00406BC0
.text:00406BC0                 jmp     ds:__imp_fopen
.text:00406BC0 fopen           endp
.text:00406BC0
.text:00406BC0 ; ---------------------------------------------------------------------------
.text:00406BC6                 align 10h
.text:00406BD0
.text:00406BD0 ; =============== S U B R O U T I N E =======================================
.text:00406BD0
.text:00406BD0 ; Attributes: thunk
.text:00406BD0
.text:00406BD0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00406BD0 _flsbuf         proc near               ; CODE XREF: sub_401940+2E6↑p
.text:00406BD0                                         ; sub_404C80+128↑p ...
.text:00406BD0
.text:00406BD0 File            = dword ptr  8
.text:00406BD0
.text:00406BD0                 jmp     ds:__imp__flsbuf
.text:00406BD0 _flsbuf         endp
.text:00406BD0
.text:00406BD0 ; ---------------------------------------------------------------------------
.text:00406BD6                 align 10h
.text:00406BE0
.text:00406BE0 ; =============== S U B R O U T I N E =======================================
.text:00406BE0
.text:00406BE0 ; Attributes: thunk
.text:00406BE0
.text:00406BE0 ; size_t __cdecl strlen(const char *Str)
.text:00406BE0 strlen          proc near               ; CODE XREF: .text:00401D77↑p
.text:00406BE0                                         ; sub_4020F0+2A9↑p ...
.text:00406BE0
.text:00406BE0 Str             = dword ptr  4
.text:00406BE0
.text:00406BE0                 jmp     ds:__imp_strlen
.text:00406BE0 strlen          endp
.text:00406BE0
.text:00406BE0 ; ---------------------------------------------------------------------------
.text:00406BE6                 align 10h
.text:00406BF0
.text:00406BF0 ; =============== S U B R O U T I N E =======================================
.text:00406BF0
.text:00406BF0 ; Attributes: thunk
.text:00406BF0
.text:00406BF0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00406BF0 strncpy         proc near               ; CODE XREF: .text:00401D6B↑p
.text:00406BF0
.text:00406BF0 Destination     = dword ptr  4
.text:00406BF0 Source          = dword ptr  8
.text:00406BF0 Count           = dword ptr  0Ch
.text:00406BF0
.text:00406BF0                 jmp     ds:__imp_strncpy
.text:00406BF0 strncpy         endp
.text:00406BF0
.text:00406BF0 ; ---------------------------------------------------------------------------
.text:00406BF6                 align 10h
.text:00406C00
.text:00406C00 ; =============== S U B R O U T I N E =======================================
.text:00406C00
.text:00406C00 ; Attributes: thunk
.text:00406C00
.text:00406C00 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00406C00 strncmp         proc near               ; CODE XREF: sub_4020F0+23F↑p
.text:00406C00                                         ; sub_4020F0+699↑p ...
.text:00406C00
.text:00406C00 Str1            = dword ptr  4
.text:00406C00 Str2            = dword ptr  8
.text:00406C00 MaxCount        = dword ptr  0Ch
.text:00406C00
.text:00406C00                 jmp     ds:__imp_strncmp
.text:00406C00 strncmp         endp
.text:00406C00
.text:00406C00 ; ---------------------------------------------------------------------------
.text:00406C06                 align 10h
.text:00406C10
.text:00406C10 ; =============== S U B R O U T I N E =======================================
.text:00406C10
.text:00406C10 ; Attributes: thunk
.text:00406C10
.text:00406C10 ; char *__cdecl getenv(const char *VarName)
.text:00406C10 getenv          proc near               ; CODE XREF: sub_4020F0+B57↑p
.text:00406C10
.text:00406C10 VarName         = dword ptr  4
.text:00406C10
.text:00406C10                 jmp     ds:__imp_getenv
.text:00406C10 getenv          endp
.text:00406C10
.text:00406C10 ; ---------------------------------------------------------------------------
.text:00406C16                 align 10h
.text:00406C20
.text:00406C20 ; =============== S U B R O U T I N E =======================================
.text:00406C20
.text:00406C20 ; Attributes: thunk
.text:00406C20
.text:00406C20 ; char *__cdecl strchr(const char *Str, int Val)
.text:00406C20 strchr          proc near               ; CODE XREF: sub_4020F0+469↑p
.text:00406C20                                         ; sub_4020F0+53A↑p ...
.text:00406C20
.text:00406C20 Str             = dword ptr  4
.text:00406C20 Val             = dword ptr  8
.text:00406C20
.text:00406C20                 jmp     ds:__imp_strchr
.text:00406C20 strchr          endp
.text:00406C20
.text:00406C20 ; ---------------------------------------------------------------------------
.text:00406C26                 align 10h
.text:00406C30
.text:00406C30 ; =============== S U B R O U T I N E =======================================
.text:00406C30
.text:00406C30 ; Attributes: thunk
.text:00406C30
.text:00406C30 ; void __cdecl free(void *Block)
.text:00406C30 free            proc near               ; CODE XREF: sub_4032A0+6E↑p
.text:00406C30                                         ; sub_4047C0+112↑p ...
.text:00406C30
.text:00406C30 Block           = dword ptr  4
.text:00406C30
.text:00406C30                 jmp     ds:__imp_free
.text:00406C30 free            endp
.text:00406C30
.text:00406C30 ; ---------------------------------------------------------------------------
.text:00406C36                 align 10h
.text:00406C40
.text:00406C40 ; =============== S U B R O U T I N E =======================================
.text:00406C40
.text:00406C40 ; Attributes: thunk
.text:00406C40
.text:00406C40 ; double __cdecl strtod(const char *String, char **EndPtr)
.text:00406C40 strtod          proc near               ; CODE XREF: sub_4032A0+4E↑p
.text:00406C40
.text:00406C40 String          = dword ptr  4
.text:00406C40 EndPtr          = dword ptr  8
.text:00406C40
.text:00406C40                 jmp     ds:__imp_strtod
.text:00406C40 strtod          endp
.text:00406C40
.text:00406C40 ; ---------------------------------------------------------------------------
.text:00406C46                 align 10h
.text:00406C50
.text:00406C50 ; =============== S U B R O U T I N E =======================================
.text:00406C50
.text:00406C50 ; Attributes: thunk
.text:00406C50
.text:00406C50 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00406C50 memcpy          proc near               ; CODE XREF: .text:00403508↑p
.text:00406C50                                         ; sub_403520+31↑p
.text:00406C50
.text:00406C50 Src             = dword ptr  8
.text:00406C50 Size            = dword ptr  0Ch
.text:00406C50
.text:00406C50                 jmp     ds:__imp_memcpy
.text:00406C50 memcpy          endp
.text:00406C50
.text:00406C50 ; ---------------------------------------------------------------------------
.text:00406C56                 align 10h
.text:00406C60
.text:00406C60 ; =============== S U B R O U T I N E =======================================
.text:00406C60
.text:00406C60 ; Attributes: thunk
.text:00406C60
.text:00406C60 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00406C60 memset          proc near               ; CODE XREF: .text:00403486↑p
.text:00406C60
.text:00406C60 Val             = dword ptr  8
.text:00406C60 Size            = dword ptr  0Ch
.text:00406C60
.text:00406C60                 jmp     ds:__imp_memset
.text:00406C60 memset          endp
.text:00406C60
.text:00406C60 ; ---------------------------------------------------------------------------
.text:00406C66                 align 10h
.text:00406C70
.text:00406C70 ; =============== S U B R O U T I N E =======================================
.text:00406C70
.text:00406C70 ; Attributes: thunk
.text:00406C70
.text:00406C70 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00406C70 calloc          proc near               ; CODE XREF: .text:004034C3↑p
.text:00406C70
.text:00406C70 Count           = dword ptr  4
.text:00406C70 Size            = dword ptr  8
.text:00406C70
.text:00406C70                 jmp     ds:__imp_calloc
.text:00406C70 calloc          endp
.text:00406C70
.text:00406C70 ; ---------------------------------------------------------------------------
.text:00406C76                 align 10h
.text:00406C80
.text:00406C80 ; =============== S U B R O U T I N E =======================================
.text:00406C80
.text:00406C80 ; Attributes: thunk
.text:00406C80
.text:00406C80 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00406C80 realloc         proc near               ; CODE XREF: sub_403390+30↑p
.text:00406C80                                         ; sub_4033F0+16↑p ...
.text:00406C80
.text:00406C80 Block           = dword ptr  4
.text:00406C80 Size            = dword ptr  8
.text:00406C80
.text:00406C80                 jmp     ds:__imp_realloc
.text:00406C80 realloc         endp
.text:00406C80
.text:00406C80 ; ---------------------------------------------------------------------------
.text:00406C86                 align 10h
.text:00406C90
.text:00406C90 ; =============== S U B R O U T I N E =======================================
.text:00406C90
.text:00406C90 ; Attributes: thunk
.text:00406C90
.text:00406C90 ; void *__cdecl malloc(size_t Size)
.text:00406C90 malloc          proc near               ; CODE XREF: .text:00403344↑p
.text:00406C90                                         ; sub_403360+E↑p ...
.text:00406C90
.text:00406C90 Size            = dword ptr  4
.text:00406C90
.text:00406C90                 jmp     ds:__imp_malloc
.text:00406C90 malloc          endp
.text:00406C90
.text:00406C90 ; ---------------------------------------------------------------------------
.text:00406C96                 align 10h
.text:00406CA0
.text:00406CA0 ; =============== S U B R O U T I N E =======================================
.text:00406CA0
.text:00406CA0 ; Attributes: noreturn thunk
.text:00406CA0
.text:00406CA0 ; void __cdecl __noreturn abort()
.text:00406CA0 abort           proc near               ; CODE XREF: sub_4047C0:loc_40497A↑p
.text:00406CA0                                         ; sub_404C80:loc_404D1C↑p ...
.text:00406CA0                 jmp     ds:__imp_abort
.text:00406CA0 abort           endp
.text:00406CA0
.text:00406CA0 ; ---------------------------------------------------------------------------
.text:00406CA6                 align 10h
.text:00406CB0
.text:00406CB0 ; =============== S U B R O U T I N E =======================================
.text:00406CB0
.text:00406CB0 ; Attributes: thunk
.text:00406CB0
.text:00406CB0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00406CB0 iswctype        proc near               ; CODE XREF: sub_403680+78B↑p
.text:00406CB0
.text:00406CB0 C               = word ptr  4
.text:00406CB0 Type            = word ptr  8
.text:00406CB0
.text:00406CB0                 jmp     ds:__imp_iswctype
.text:00406CB0 iswctype        endp
.text:00406CB0
.text:00406CB0 ; ---------------------------------------------------------------------------
.text:00406CB6                 align 10h
.text:00406CC0
.text:00406CC0 ; =============== S U B R O U T I N E =======================================
.text:00406CC0
.text:00406CC0 ; Attributes: thunk
.text:00406CC0
.text:00406CC0 ; int __cdecl isctype(int C, int Type)
.text:00406CC0 _isctype        proc near               ; CODE XREF: sub_403680+610↑p
.text:00406CC0
.text:00406CC0 C               = dword ptr  4
.text:00406CC0 Type            = dword ptr  8
.text:00406CC0
.text:00406CC0                 jmp     ds:__imp__isctype
.text:00406CC0 _isctype        endp
.text:00406CC0
.text:00406CC0 ; ---------------------------------------------------------------------------
.text:00406CC6                 align 10h
.text:00406CD0
.text:00406CD0 ; =============== S U B R O U T I N E =======================================
.text:00406CD0
.text:00406CD0 ; Attributes: thunk
.text:00406CD0
.text:00406CD0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00406CD0 vfprintf        proc near               ; CODE XREF: sub_404C80+C1↑p
.text:00406CD0                                         ; sub_404F50+49↑p ...
.text:00406CD0
.text:00406CD0 Stream          = dword ptr  4
.text:00406CD0 Format          = dword ptr  8
.text:00406CD0 ArgList         = dword ptr  0Ch
.text:00406CD0
.text:00406CD0                 jmp     ds:__imp_vfprintf
.text:00406CD0 vfprintf        endp
.text:00406CD0
.text:00406CD0 ; ---------------------------------------------------------------------------
.text:00406CD6                 align 10h
.text:00406CE0
.text:00406CE0 ; =============== S U B R O U T I N E =======================================
.text:00406CE0
.text:00406CE0 ; Attributes: thunk
.text:00406CE0
.text:00406CE0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00406CE0 strcmp          proc near               ; CODE XREF: sub_405054+180↑p
.text:00406CE0                                         ; sub_405470+34↑p ...
.text:00406CE0
.text:00406CE0 Str1            = dword ptr  4
.text:00406CE0 Str2            = dword ptr  8
.text:00406CE0
.text:00406CE0                 jmp     ds:__imp_strcmp
.text:00406CE0 strcmp          endp
.text:00406CE0
.text:00406CE0 ; ---------------------------------------------------------------------------
.text:00406CE6                 align 10h
.text:00406CF0
.text:00406CF0 ; =============== S U B R O U T I N E =======================================
.text:00406CF0
.text:00406CF0 ; Attributes: thunk
.text:00406CF0
.text:00406CF0 ; int __cdecl fflush(FILE *Stream)
.text:00406CF0 fflush          proc near               ; CODE XREF: sub_404F50+19↑p
.text:00406CF0                                         ; sub_404F50+81↑p ...
.text:00406CF0
.text:00406CF0 Stream          = dword ptr  4
.text:00406CF0
.text:00406CF0                 jmp     ds:__imp_fflush
.text:00406CF0 fflush          endp
.text:00406CF0
.text:00406CF0 ; ---------------------------------------------------------------------------
.text:00406CF6                 align 10h
.text:00406D00
.text:00406D00 ; =============== S U B R O U T I N E =======================================
.text:00406D00
.text:00406D00 ; Attributes: thunk
.text:00406D00
.text:00406D00 ; char *__cdecl strerror(int ErrorMessage)
.text:00406D00 strerror        proc near               ; CODE XREF: sub_404F50+A5↑p
.text:00406D00                                         ; sub_405054+10F↑p
.text:00406D00
.text:00406D00 ErrorMessage    = dword ptr  4
.text:00406D00
.text:00406D00                 jmp     ds:__imp_strerror
.text:00406D00 strerror        endp
.text:00406D00
.text:00406D00 ; ---------------------------------------------------------------------------
.text:00406D06                 align 10h
.text:00406D10
.text:00406D10 ; =============== S U B R O U T I N E =======================================
.text:00406D10
.text:00406D10 ; Attributes: thunk
.text:00406D10
.text:00406D10 ; char *__cdecl strdup(const char *String)
.text:00406D10 _strdup         proc near               ; CODE XREF: sub_405470+88↑p
.text:00406D10
.text:00406D10 String          = dword ptr  4
.text:00406D10
.text:00406D10                 jmp     ds:__imp__strdup
.text:00406D10 _strdup         endp
.text:00406D10
.text:00406D10 ; ---------------------------------------------------------------------------
.text:00406D16                 align 10h
.text:00406D20
.text:00406D20 ; =============== S U B R O U T I N E =======================================
.text:00406D20
.text:00406D20 ; Attributes: thunk
.text:00406D20
.text:00406D20 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:00406D20 _lseeki64       proc near               ; CODE XREF: sub_405520+30↑p
.text:00406D20                                         ; sub_405960+144↑p ...
.text:00406D20
.text:00406D20 FileHandle      = dword ptr  4
.text:00406D20 Offset          = qword ptr  8
.text:00406D20 Origin          = dword ptr  10h
.text:00406D20
.text:00406D20                 jmp     ds:__imp__lseeki64
.text:00406D20 _lseeki64       endp
.text:00406D20
.text:00406D20 ; ---------------------------------------------------------------------------
.text:00406D26                 align 10h
.text:00406D30
.text:00406D30 ; =============== S U B R O U T I N E =======================================
.text:00406D30
.text:00406D30 ; Attributes: thunk
.text:00406D30
.text:00406D30 ; int open(const char *FileName, int OpenFlag, ...)
.text:00406D30 _open           proc near               ; CODE XREF: sub_405520+71↑p
.text:00406D30                                         ; sub_405520+EA↑p ...
.text:00406D30
.text:00406D30 FileName        = dword ptr  4
.text:00406D30 OpenFlag        = dword ptr  8
.text:00406D30
.text:00406D30                 jmp     ds:__imp__open
.text:00406D30 _open           endp
.text:00406D30
.text:00406D30 ; ---------------------------------------------------------------------------
.text:00406D36                 align 10h
.text:00406D40
.text:00406D40 ; =============== S U B R O U T I N E =======================================
.text:00406D40
.text:00406D40 ; Attributes: thunk
.text:00406D40
.text:00406D40 ; int __cdecl close(int FileHandle)
.text:00406D40 _close          proc near               ; CODE XREF: sub_405520+D3↑p
.text:00406D40                                         ; sub_405C90+134↑p ...
.text:00406D40
.text:00406D40 FileHandle      = dword ptr  4
.text:00406D40
.text:00406D40                 jmp     ds:__imp__close
.text:00406D40 _close          endp
.text:00406D40
.text:00406D40 ; ---------------------------------------------------------------------------
.text:00406D46                 align 10h
.text:00406D50
.text:00406D50 ; =============== S U B R O U T I N E =======================================
.text:00406D50
.text:00406D50 ; Attributes: thunk
.text:00406D50
.text:00406D50 ; int __cdecl write(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.text:00406D50 _write          proc near               ; CODE XREF: sub_405960+15E↑p
.text:00406D50                                         ; sub_405C90+102↑p
.text:00406D50
.text:00406D50 FileHandle      = dword ptr  4
.text:00406D50 Buf             = dword ptr  8
.text:00406D50 MaxCharCount    = dword ptr  0Ch
.text:00406D50
.text:00406D50                 jmp     ds:__imp__write
.text:00406D50 _write          endp
.text:00406D50
.text:00406D50 ; ---------------------------------------------------------------------------
.text:00406D56                 align 10h
.text:00406D60
.text:00406D60 ; =============== S U B R O U T I N E =======================================
.text:00406D60
.text:00406D60 ; Attributes: noreturn thunk
.text:00406D60
.text:00406D60 _assert         proc near               ; CODE XREF: sub_405660+145↑p
.text:00406D60                                         ; sub_4057B0+1A5↑p ...
.text:00406D60                 jmp     ds:__imp__assert
.text:00406D60 _assert         endp
.text:00406D60
.text:00406D60 ; ---------------------------------------------------------------------------
.text:00406D66                 align 10h
.text:00406D70
.text:00406D70 ; =============== S U B R O U T I N E =======================================
.text:00406D70
.text:00406D70 ; Attributes: thunk
.text:00406D70
.text:00406D70 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:00406D70 _read           proc near               ; CODE XREF: sub_405660+86↑p
.text:00406D70                                         ; sub_4057B0+89↑p ...
.text:00406D70
.text:00406D70 FileHandle      = dword ptr  4
.text:00406D70 DstBuf          = dword ptr  8
.text:00406D70 MaxCharCount    = dword ptr  0Ch
.text:00406D70
.text:00406D70                 jmp     ds:__imp__read
.text:00406D70 _read           endp
.text:00406D70
.text:00406D70 ; ---------------------------------------------------------------------------
.text:00406D76                 align 10h
.text:00406D80
.text:00406D80 ; =============== S U B R O U T I N E =======================================
.text:00406D80
.text:00406D80 ; Attributes: thunk
.text:00406D80
.text:00406D80 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00406D80 _get_osfhandle  proc near               ; CODE XREF: sub_4060A0+22↑p
.text:00406D80                                         ; sub_406150+12↑p
.text:00406D80
.text:00406D80 FileHandle      = dword ptr  4
.text:00406D80
.text:00406D80                 jmp     ds:__imp__get_osfhandle
.text:00406D80 _get_osfhandle  endp
.text:00406D80
.text:00406D80 ; ---------------------------------------------------------------------------
.text:00406D86                 align 10h
.text:00406D90
.text:00406D90 ; =============== S U B R O U T I N E =======================================
.text:00406D90
.text:00406D90 ; Attributes: thunk
.text:00406D90
.text:00406D90 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00406D90 _filelengthi64  proc near               ; CODE XREF: sub_406150+113↑p
.text:00406D90
.text:00406D90 FileHandle      = dword ptr  4
.text:00406D90
.text:00406D90                 jmp     ds:__imp__filelengthi64
.text:00406D90 _filelengthi64  endp
.text:00406D90
.text:00406D90 ; ---------------------------------------------------------------------------
.text:00406D96                 align 10h
.text:00406DA0
.text:00406DA0 ; =============== S U B R O U T I N E =======================================
.text:00406DA0
.text:00406DA0 ; Attributes: thunk
.text:00406DA0
.text:00406DA0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00406DA0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00406DA0
.text:00406DA0 lpTopLevelExceptionFilter= dword ptr  4
.text:00406DA0
.text:00406DA0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00406DA0 SetUnhandledExceptionFilter endp
.text:00406DA0
.text:00406DA0 ; ---------------------------------------------------------------------------
.text:00406DA6                 align 10h
.text:00406DB0
.text:00406DB0 ; =============== S U B R O U T I N E =======================================
.text:00406DB0
.text:00406DB0 ; Attributes: noreturn thunk
.text:00406DB0
.text:00406DB0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00406DB0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00406DB0
.text:00406DB0 uExitCode       = dword ptr  4
.text:00406DB0
.text:00406DB0                 jmp     ds:__imp_ExitProcess
.text:00406DB0 ExitProcess     endp
.text:00406DB0
.text:00406DB0 ; ---------------------------------------------------------------------------
.text:00406DB6                 align 10h
.text:00406DC0
.text:00406DC0 ; =============== S U B R O U T I N E =======================================
.text:00406DC0
.text:00406DC0 ; Attributes: thunk
.text:00406DC0
.text:00406DC0 ; BOOL __stdcall SetEndOfFile(HANDLE hFile)
.text:00406DC0 SetEndOfFile    proc near               ; CODE XREF: sub_4060A0+53↑p
.text:00406DC0
.text:00406DC0 hFile           = dword ptr  4
.text:00406DC0
.text:00406DC0                 jmp     ds:__imp_SetEndOfFile
.text:00406DC0 SetEndOfFile    endp
.text:00406DC0
.text:00406DC0 ; ---------------------------------------------------------------------------
.text:00406DC6                 align 10h
.text:00406DD0
.text:00406DD0 ; =============== S U B R O U T I N E =======================================
.text:00406DD0
.text:00406DD0 ; Attributes: thunk
.text:00406DD0
.text:00406DD0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00406DD0 UnlockFile      proc near               ; CODE XREF: sub_406150+B4↑p
.text:00406DD0
.text:00406DD0 hFile           = dword ptr  4
.text:00406DD0 dwFileOffsetLow = dword ptr  8
.text:00406DD0 dwFileOffsetHigh= dword ptr  0Ch
.text:00406DD0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00406DD0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00406DD0
.text:00406DD0                 jmp     ds:__imp_UnlockFile
.text:00406DD0 UnlockFile      endp
.text:00406DD0
.text:00406DD0 ; ---------------------------------------------------------------------------
.text:00406DD6                 align 10h
.text:00406DE0
.text:00406DE0 ; =============== S U B R O U T I N E =======================================
.text:00406DE0
.text:00406DE0 ; Attributes: thunk
.text:00406DE0
.text:00406DE0 ; BOOL __stdcall LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.text:00406DE0 LockFile        proc near               ; CODE XREF: sub_406150+F7↑p
.text:00406DE0
.text:00406DE0 hFile           = dword ptr  4
.text:00406DE0 dwFileOffsetLow = dword ptr  8
.text:00406DE0 dwFileOffsetHigh= dword ptr  0Ch
.text:00406DE0 nNumberOfBytesToLockLow= dword ptr  10h
.text:00406DE0 nNumberOfBytesToLockHigh= dword ptr  14h
.text:00406DE0
.text:00406DE0                 jmp     ds:__imp_LockFile
.text:00406DE0 LockFile        endp
.text:00406DE0
.text:00406DE0 ; ---------------------------------------------------------------------------
.text:00406DE6                 align 10h
.text:00406DF0
.text:00406DF0 ; =============== S U B R O U T I N E =======================================
.text:00406DF0
.text:00406DF0 ; Attributes: thunk
.text:00406DF0
.text:00406DF0 ; DWORD __stdcall GetLastError()
.text:00406DF0 GetLastError    proc near               ; CODE XREF: sub_406740+3↑p
.text:00406DF0                 jmp     ds:__imp_GetLastError
.text:00406DF0 GetLastError    endp
.text:00406DF0
.text:00406DF0 ; ---------------------------------------------------------------------------
.text:00406DF6                 align 10h
.text:00406E00 dword_406E00    dd 0FFFFFFFFh           ; DATA XREF: .text:004067E9↑r
.text:00406E00                                         ; .text:loc_406810↑r ...
.text:00406E04 dword_406E04    dd 0                    ; DATA XREF: .text:loc_40681C↑r
.text:00406E04                                         ; sub_406840:loc_40688D↑r
.text:00406E08                 dd 0FFFFFFFFh
.text:00406E0C dword_406E0C    dd 7Dh dup(0)           ; DATA XREF: .data:off_4070D4↓o
.text:00406E0C _text           ends
.text:00406E0C
.data:00407000 ; Section 2. (virtual address 00007000)
.data:00407000 ; Virtual size                  : 000000F0 (    240.)
.data:00407000 ; Section size in file          : 00000200 (    512.)
.data:00407000 ; Offset to raw data for section: 00006400
.data:00407000 ; Flags C0000040: Data Readable Writable
.data:00407000 ; Alignment     : default
.data:00407000 ; ===========================================================================
.data:00407000
.data:00407000 ; Segment type: Pure data
.data:00407000 ; Segment permissions: Read/Write
.data:00407000 _data           segment para public 'DATA' use32
.data:00407000                 assume cs:_data
.data:00407000                 ;org 407000h
.data:00407000 dword_407000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00407000                                         ; sub_401080+CC↑r
.data:00407004 dword_407004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00407004                                         ; sub_401080+D4↑r
.data:00407008                 align 10h
.data:00407010 dword_407010    dd 1                    ; DATA XREF: sub_401380+DE↑r
.data:00407010                                         ; sub_402C80+3↑r ...
.data:00407014 dword_407014    dd 1                    ; DATA XREF: sub_402C80+11↑r
.data:00407014                                         ; .text:00402D21↑r ...
.data:00407018 dword_407018    dd 3Fh                  ; DATA XREF: sub_402C80+7D↑w
.data:00407018                                         ; .text:00402D8D↑w
.data:0040701C                 align 10h
.data:00407020 dword_407020    dd 1                    ; DATA XREF: sub_4047C0+22↑r
.data:00407020                                         ; sub_4047C0+65↑r ...
.data:00407024 dword_407024    dd 100h                 ; DATA XREF: sub_4047C0+3F↑o
.data:00407024                                         ; sub_4047C0+1A2↑r ...
.data:00407028 off_407028      dd offset unk_408040    ; DATA XREF: sub_4047C0+1AA↑r
.data:0040702C ; void *off_40702C
.data:0040702C off_40702C      dd offset dword_407024  ; DATA XREF: sub_4047C0+39↑r
.data:0040702C                                         ; sub_4047C0+60↑w ...
.data:00407030 ; char *Buffer
.data:00407030 Buffer          dd offset aCopyrightC2005
.data:00407030                                         ; DATA XREF: sub_404C80+DC↑r
.data:00407030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00407034                 align 10h
.data:00407040 ; int Code
.data:00407040 Code            dd 1                    ; DATA XREF: sub_4031B0+6D↑r
.data:00407040                                         ; sub_4031B0+9A↑r ...
.data:00407044                 align 10h
.data:00407050 off_407050      dd offset sub_4052C0    ; DATA XREF: sub_4052A0+C↑o
.data:00407050                                         ; sub_405470+26↑o ...
.data:00407054                 dd offset sub_4052E0
.data:00407058                 dd offset sub_405330
.data:0040705C                 dd offset sub_405380
.data:00407060                 dd offset sub_4053D0
.data:00407064                 dd offset nullsub_1
.data:00407068                 db    0
.data:00407069                 db    0
.data:0040706A                 db    0
.data:0040706B                 db    0
.data:0040706C off_40706C      dd offset off_407050    ; DATA XREF: sub_405250+3↑r
.data:0040706C                                         ; sub_405260+7↑r ...
.data:00407070 ; char *Str2
.data:00407070 Str2            dd offset aVarRunUtmp_0 ; DATA XREF: sub_405470+20↑r
.data:00407070                                         ; sub_405470+64↑r ...
.data:00407070                                         ; "/var/run/utmp"
.data:00407074                 align 10h
.data:00407080 ; int FileHandle
.data:00407080 FileHandle      dd 0FFFFFFFFh           ; DATA XREF: sub_405520+3↑r
.data:00407080                                         ; sub_405520+76↑w ...
.data:00407084 off_407084      dd offset sub_405520    ; DATA XREF: sub_4052C0+3↑r
.data:00407084                                         ; sub_4052C0+D↑o ...
.data:00407088 off_407088      dd offset sub_405660    ; DATA XREF: sub_4052E0+2A↑r
.data:0040708C off_40708C      dd offset sub_405DF0    ; DATA XREF: sub_405330+33↑r
.data:00407090 off_407090      dd offset sub_4057B0    ; DATA XREF: sub_405380+33↑r
.data:00407094 off_407094      dd offset sub_405960    ; DATA XREF: sub_4053D0+21↑r
.data:00407098                 dd offset sub_405EB0
.data:0040709C                 dd offset sub_405C90
.data:004070A0 dword_4070A0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004070A4                 align 10h
.data:004070B0 ; int Mode
.data:004070B0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004070B0                                         ; sub_401080+80↑r ...
.data:004070B4                 align 10h
.data:004070C0 dword_4070C0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004070C0                                         ; sub_401080+BA↑r
.data:004070C4                 align 10h
.data:004070D0 dword_4070D0    dd 0                    ; DATA XREF: sub_406840+9↑r
.data:004070D0                                         ; sub_406840+1D↑w
.data:004070D4 off_4070D4      dd offset dword_406E0C  ; DATA XREF: sub_4067B0+6↑r
.data:004070D4                                         ; sub_4067B0+17↑r ...
.data:004070D8                 align 1000h
.data:004070D8 _data           ends
.data:004070D8
.bss:00408000 ; Section 3. (virtual address 00008000)
.bss:00408000 ; Virtual size                  : 000003D0 (    976.)
.bss:00408000 ; Section size in file          : 00000000 (      0.)
.bss:00408000 ; Offset to raw data for section: 00000000
.bss:00408000 ; Flags C0000080: Bss Readable Writable
.bss:00408000 ; Alignment     : default
.bss:00408000 ; ===========================================================================
.bss:00408000
.bss:00408000 ; Segment type: Uninitialized
.bss:00408000 ; Segment permissions: Read/Write
.bss:00408000 _bss            segment para public 'BSS' use32
.bss:00408000                 assume cs:_bss
.bss:00408000                 ;org 408000h
.bss:00408000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00408000 dword_408000    dd ?                    ; DATA XREF: sub_402C80+9↑o
.bss:00408000                                         ; sub_402C80+17↑w ...
.bss:00408004 dword_408004    dd ?                    ; DATA XREF: sub_402C80+21↑w
.bss:00408004                                         ; .text:00402D39↑w
.bss:00408008 dword_408008    dd ?                    ; DATA XREF: sub_402C80+77↑r
.bss:00408008                                         ; .text:00402D87↑r
.bss:0040800C dword_40800C    dd ?                    ; DATA XREF: sub_402C80+6B↑r
.bss:0040800C                                         ; .text:00402D7B↑r
.bss:00408010                 db    ? ;
.bss:00408011                 db    ? ;
.bss:00408012                 db    ? ;
.bss:00408013                 db    ? ;
.bss:00408014                 db    ? ;
.bss:00408015                 db    ? ;
.bss:00408016                 db    ? ;
.bss:00408017                 db    ? ;
.bss:00408018                 db    ? ;
.bss:00408019                 db    ? ;
.bss:0040801A                 db    ? ;
.bss:0040801B                 db    ? ;
.bss:0040801C                 db    ? ;
.bss:0040801D                 db    ? ;
.bss:0040801E                 db    ? ;
.bss:0040801F                 db    ? ;
.bss:00408020                 db    ? ;
.bss:00408021                 db    ? ;
.bss:00408022                 db    ? ;
.bss:00408023                 db    ? ;
.bss:00408024                 db    ? ;
.bss:00408025                 db    ? ;
.bss:00408026                 db    ? ;
.bss:00408027                 db    ? ;
.bss:00408028                 db    ? ;
.bss:00408029                 db    ? ;
.bss:0040802A                 db    ? ;
.bss:0040802B                 db    ? ;
.bss:0040802C                 db    ? ;
.bss:0040802D                 db    ? ;
.bss:0040802E                 db    ? ;
.bss:0040802F                 db    ? ;
.bss:00408030 ; char *dword_408030
.bss:00408030 dword_408030    dd ?                    ; DATA XREF: .text:00403184↑w
.bss:00408030                                         ; sub_4031B0+58↑r
.bss:00408034                 align 10h
.bss:00408040 unk_408040      db    ? ;               ; DATA XREF: sub_4047C0+100↑o
.bss:00408040                                         ; .data:off_407028↑o
.bss:00408041                 db    ? ;
.bss:00408042                 db    ? ;
.bss:00408043                 db    ? ;
.bss:00408044                 db    ? ;
.bss:00408045                 db    ? ;
.bss:00408046                 db    ? ;
.bss:00408047                 db    ? ;
.bss:00408048                 db    ? ;
.bss:00408049                 db    ? ;
.bss:0040804A                 db    ? ;
.bss:0040804B                 db    ? ;
.bss:0040804C                 db    ? ;
.bss:0040804D                 db    ? ;
.bss:0040804E                 db    ? ;
.bss:0040804F                 db    ? ;
.bss:00408050                 db    ? ;
.bss:00408051                 db    ? ;
.bss:00408052                 db    ? ;
.bss:00408053                 db    ? ;
.bss:00408054                 db    ? ;
.bss:00408055                 db    ? ;
.bss:00408056                 db    ? ;
.bss:00408057                 db    ? ;
.bss:00408058                 db    ? ;
.bss:00408059                 db    ? ;
.bss:0040805A                 db    ? ;
.bss:0040805B                 db    ? ;
.bss:0040805C                 db    ? ;
.bss:0040805D                 db    ? ;
.bss:0040805E                 db    ? ;
.bss:0040805F                 db    ? ;
.bss:00408060                 db    ? ;
.bss:00408061                 db    ? ;
.bss:00408062                 db    ? ;
.bss:00408063                 db    ? ;
.bss:00408064                 db    ? ;
.bss:00408065                 db    ? ;
.bss:00408066                 db    ? ;
.bss:00408067                 db    ? ;
.bss:00408068                 db    ? ;
.bss:00408069                 db    ? ;
.bss:0040806A                 db    ? ;
.bss:0040806B                 db    ? ;
.bss:0040806C                 db    ? ;
.bss:0040806D                 db    ? ;
.bss:0040806E                 db    ? ;
.bss:0040806F                 db    ? ;
.bss:00408070                 db    ? ;
.bss:00408071                 db    ? ;
.bss:00408072                 db    ? ;
.bss:00408073                 db    ? ;
.bss:00408074                 db    ? ;
.bss:00408075                 db    ? ;
.bss:00408076                 db    ? ;
.bss:00408077                 db    ? ;
.bss:00408078                 db    ? ;
.bss:00408079                 db    ? ;
.bss:0040807A                 db    ? ;
.bss:0040807B                 db    ? ;
.bss:0040807C                 db    ? ;
.bss:0040807D                 db    ? ;
.bss:0040807E                 db    ? ;
.bss:0040807F                 db    ? ;
.bss:00408080                 db    ? ;
.bss:00408081                 db    ? ;
.bss:00408082                 db    ? ;
.bss:00408083                 db    ? ;
.bss:00408084                 db    ? ;
.bss:00408085                 db    ? ;
.bss:00408086                 db    ? ;
.bss:00408087                 db    ? ;
.bss:00408088                 db    ? ;
.bss:00408089                 db    ? ;
.bss:0040808A                 db    ? ;
.bss:0040808B                 db    ? ;
.bss:0040808C                 db    ? ;
.bss:0040808D                 db    ? ;
.bss:0040808E                 db    ? ;
.bss:0040808F                 db    ? ;
.bss:00408090                 db    ? ;
.bss:00408091                 db    ? ;
.bss:00408092                 db    ? ;
.bss:00408093                 db    ? ;
.bss:00408094                 db    ? ;
.bss:00408095                 db    ? ;
.bss:00408096                 db    ? ;
.bss:00408097                 db    ? ;
.bss:00408098                 db    ? ;
.bss:00408099                 db    ? ;
.bss:0040809A                 db    ? ;
.bss:0040809B                 db    ? ;
.bss:0040809C                 db    ? ;
.bss:0040809D                 db    ? ;
.bss:0040809E                 db    ? ;
.bss:0040809F                 db    ? ;
.bss:004080A0                 db    ? ;
.bss:004080A1                 db    ? ;
.bss:004080A2                 db    ? ;
.bss:004080A3                 db    ? ;
.bss:004080A4                 db    ? ;
.bss:004080A5                 db    ? ;
.bss:004080A6                 db    ? ;
.bss:004080A7                 db    ? ;
.bss:004080A8                 db    ? ;
.bss:004080A9                 db    ? ;
.bss:004080AA                 db    ? ;
.bss:004080AB                 db    ? ;
.bss:004080AC                 db    ? ;
.bss:004080AD                 db    ? ;
.bss:004080AE                 db    ? ;
.bss:004080AF                 db    ? ;
.bss:004080B0                 db    ? ;
.bss:004080B1                 db    ? ;
.bss:004080B2                 db    ? ;
.bss:004080B3                 db    ? ;
.bss:004080B4                 db    ? ;
.bss:004080B5                 db    ? ;
.bss:004080B6                 db    ? ;
.bss:004080B7                 db    ? ;
.bss:004080B8                 db    ? ;
.bss:004080B9                 db    ? ;
.bss:004080BA                 db    ? ;
.bss:004080BB                 db    ? ;
.bss:004080BC                 db    ? ;
.bss:004080BD                 db    ? ;
.bss:004080BE                 db    ? ;
.bss:004080BF                 db    ? ;
.bss:004080C0                 db    ? ;
.bss:004080C1                 db    ? ;
.bss:004080C2                 db    ? ;
.bss:004080C3                 db    ? ;
.bss:004080C4                 db    ? ;
.bss:004080C5                 db    ? ;
.bss:004080C6                 db    ? ;
.bss:004080C7                 db    ? ;
.bss:004080C8                 db    ? ;
.bss:004080C9                 db    ? ;
.bss:004080CA                 db    ? ;
.bss:004080CB                 db    ? ;
.bss:004080CC                 db    ? ;
.bss:004080CD                 db    ? ;
.bss:004080CE                 db    ? ;
.bss:004080CF                 db    ? ;
.bss:004080D0                 db    ? ;
.bss:004080D1                 db    ? ;
.bss:004080D2                 db    ? ;
.bss:004080D3                 db    ? ;
.bss:004080D4                 db    ? ;
.bss:004080D5                 db    ? ;
.bss:004080D6                 db    ? ;
.bss:004080D7                 db    ? ;
.bss:004080D8                 db    ? ;
.bss:004080D9                 db    ? ;
.bss:004080DA                 db    ? ;
.bss:004080DB                 db    ? ;
.bss:004080DC                 db    ? ;
.bss:004080DD                 db    ? ;
.bss:004080DE                 db    ? ;
.bss:004080DF                 db    ? ;
.bss:004080E0                 db    ? ;
.bss:004080E1                 db    ? ;
.bss:004080E2                 db    ? ;
.bss:004080E3                 db    ? ;
.bss:004080E4                 db    ? ;
.bss:004080E5                 db    ? ;
.bss:004080E6                 db    ? ;
.bss:004080E7                 db    ? ;
.bss:004080E8                 db    ? ;
.bss:004080E9                 db    ? ;
.bss:004080EA                 db    ? ;
.bss:004080EB                 db    ? ;
.bss:004080EC                 db    ? ;
.bss:004080ED                 db    ? ;
.bss:004080EE                 db    ? ;
.bss:004080EF                 db    ? ;
.bss:004080F0                 db    ? ;
.bss:004080F1                 db    ? ;
.bss:004080F2                 db    ? ;
.bss:004080F3                 db    ? ;
.bss:004080F4                 db    ? ;
.bss:004080F5                 db    ? ;
.bss:004080F6                 db    ? ;
.bss:004080F7                 db    ? ;
.bss:004080F8                 db    ? ;
.bss:004080F9                 db    ? ;
.bss:004080FA                 db    ? ;
.bss:004080FB                 db    ? ;
.bss:004080FC                 db    ? ;
.bss:004080FD                 db    ? ;
.bss:004080FE                 db    ? ;
.bss:004080FF                 db    ? ;
.bss:00408100                 db    ? ;
.bss:00408101                 db    ? ;
.bss:00408102                 db    ? ;
.bss:00408103                 db    ? ;
.bss:00408104                 db    ? ;
.bss:00408105                 db    ? ;
.bss:00408106                 db    ? ;
.bss:00408107                 db    ? ;
.bss:00408108                 db    ? ;
.bss:00408109                 db    ? ;
.bss:0040810A                 db    ? ;
.bss:0040810B                 db    ? ;
.bss:0040810C                 db    ? ;
.bss:0040810D                 db    ? ;
.bss:0040810E                 db    ? ;
.bss:0040810F                 db    ? ;
.bss:00408110                 db    ? ;
.bss:00408111                 db    ? ;
.bss:00408112                 db    ? ;
.bss:00408113                 db    ? ;
.bss:00408114                 db    ? ;
.bss:00408115                 db    ? ;
.bss:00408116                 db    ? ;
.bss:00408117                 db    ? ;
.bss:00408118                 db    ? ;
.bss:00408119                 db    ? ;
.bss:0040811A                 db    ? ;
.bss:0040811B                 db    ? ;
.bss:0040811C                 db    ? ;
.bss:0040811D                 db    ? ;
.bss:0040811E                 db    ? ;
.bss:0040811F                 db    ? ;
.bss:00408120                 db    ? ;
.bss:00408121                 db    ? ;
.bss:00408122                 db    ? ;
.bss:00408123                 db    ? ;
.bss:00408124                 db    ? ;
.bss:00408125                 db    ? ;
.bss:00408126                 db    ? ;
.bss:00408127                 db    ? ;
.bss:00408128                 db    ? ;
.bss:00408129                 db    ? ;
.bss:0040812A                 db    ? ;
.bss:0040812B                 db    ? ;
.bss:0040812C                 db    ? ;
.bss:0040812D                 db    ? ;
.bss:0040812E                 db    ? ;
.bss:0040812F                 db    ? ;
.bss:00408130                 db    ? ;
.bss:00408131                 db    ? ;
.bss:00408132                 db    ? ;
.bss:00408133                 db    ? ;
.bss:00408134                 db    ? ;
.bss:00408135                 db    ? ;
.bss:00408136                 db    ? ;
.bss:00408137                 db    ? ;
.bss:00408138                 db    ? ;
.bss:00408139                 db    ? ;
.bss:0040813A                 db    ? ;
.bss:0040813B                 db    ? ;
.bss:0040813C                 db    ? ;
.bss:0040813D                 db    ? ;
.bss:0040813E                 db    ? ;
.bss:0040813F                 db    ? ;
.bss:00408140 dword_408140    dd ?                    ; DATA XREF: .text:loc_404151↑o
.bss:00408140                                         ; .text:loc_404170↑o ...
.bss:00408144 dword_408144    dd ?                    ; DATA XREF: .text:loc_4041F0↑o
.bss:00408144                                         ; .text:00404678↑r ...
.bss:00408148 dword_408148    dd ?                    ; DATA XREF: .text:00404672↑r
.bss:00408148                                         ; sub_404720+2C↑r
.bss:0040814C dword_40814C    dd ?                    ; DATA XREF: .text:00404666↑r
.bss:0040814C                                         ; sub_404720+22↑r
.bss:00408150 dword_408150    dd ?                    ; DATA XREF: .text:00404682↑r
.bss:00408150                                         ; sub_404720+36↑r
.bss:00408154 dword_408154    dd ?                    ; DATA XREF: .text:00404692↑r
.bss:00408154                                         ; sub_404720+4E↑r
.bss:00408158 dword_408158    dd ?                    ; DATA XREF: .text:004046AF↑r
.bss:00408158                                         ; sub_404720+62↑r
.bss:0040815C dword_40815C    dd ?                    ; DATA XREF: .text:004046A5↑r
.bss:0040815C                                         ; sub_404720+70↑r
.bss:00408160 dword_408160    dd ?                    ; DATA XREF: .text:00404688↑r
.bss:00408160                                         ; sub_404720+7A↑r
.bss:00408164                 align 10h
.bss:00408170 ; char *Str1
.bss:00408170 Str1            dd ?                    ; DATA XREF: sub_405054:loc_40508D↑w
.bss:00408170                                         ; sub_405054:loc_4051C0↑r
.bss:00408174                 align 10h
.bss:00408180 dword_408180    dd ?                    ; DATA XREF: sub_405054+2D↑r
.bss:00408180                                         ; sub_405054+3F↑w
.bss:00408184                 align 10h
.bss:00408190 dword_408190    dd ?                    ; DATA XREF: sub_405410+3↑r
.bss:00408190                                         ; sub_405410+19↑w
.bss:00408194                 align 10h
.bss:004081A0 dword_4081A0    dd ?                    ; DATA XREF: sub_405520+40↑w
.bss:004081A0                                         ; sub_405660+1D↑r ...
.bss:004081A4 dword_4081A4    dd ?                    ; DATA XREF: sub_405520+4B↑w
.bss:004081A4                                         ; sub_405660+23↑r ...
.bss:004081A8                 align 10h
.bss:004081B0 dword_4081B0    dd ?                    ; DATA XREF: sub_405520+35↑w
.bss:004081B0                                         ; sub_405660+7B↑o ...
.bss:004081B4 unk_4081B4      db    ? ;               ; DATA XREF: sub_405660+DE↑o
.bss:004081B4                                         ; sub_4057B0+FF↑o ...
.bss:004081B5                 db    ? ;
.bss:004081B6                 db    ? ;
.bss:004081B7                 db    ? ;
.bss:004081B8 ; char byte_4081B8[32]
.bss:004081B8 byte_4081B8     db 20h dup(?)           ; DATA XREF: sub_4057B0+C5↑o
.bss:004081B8                                         ; sub_405960+89↑o
.bss:004081D8 byte_4081D8     db ?                    ; DATA XREF: sub_405960+67↑r
.bss:004081D8                                         ; sub_405960+2CE↑o
.bss:004081D9                 db    ? ;
.bss:004081DA                 db    ? ;
.bss:004081DB                 db    ? ;
.bss:004081DC                 db    ? ;
.bss:004081DD                 db    ? ;
.bss:004081DE                 db    ? ;
.bss:004081DF                 db    ? ;
.bss:004081E0                 db    ? ;
.bss:004081E1                 db    ? ;
.bss:004081E2                 db    ? ;
.bss:004081E3                 db    ? ;
.bss:004081E4                 db    ? ;
.bss:004081E5                 db    ? ;
.bss:004081E6                 db    ? ;
.bss:004081E7                 db    ? ;
.bss:004081E8                 db    ? ;
.bss:004081E9                 db    ? ;
.bss:004081EA                 db    ? ;
.bss:004081EB                 db    ? ;
.bss:004081EC                 db    ? ;
.bss:004081ED                 db    ? ;
.bss:004081EE                 db    ? ;
.bss:004081EF                 db    ? ;
.bss:004081F0                 db    ? ;
.bss:004081F1                 db    ? ;
.bss:004081F2                 db    ? ;
.bss:004081F3                 db    ? ;
.bss:004081F4                 db    ? ;
.bss:004081F5                 db    ? ;
.bss:004081F6                 db    ? ;
.bss:004081F7                 db    ? ;
.bss:004081F8                 db    ? ;
.bss:004081F9                 db    ? ;
.bss:004081FA                 db    ? ;
.bss:004081FB                 db    ? ;
.bss:004081FC                 db    ? ;
.bss:004081FD                 db    ? ;
.bss:004081FE                 db    ? ;
.bss:004081FF                 db    ? ;
.bss:00408200                 db    ? ;
.bss:00408201                 db    ? ;
.bss:00408202                 db    ? ;
.bss:00408203                 db    ? ;
.bss:00408204                 db    ? ;
.bss:00408205                 db    ? ;
.bss:00408206                 db    ? ;
.bss:00408207                 db    ? ;
.bss:00408208                 db    ? ;
.bss:00408209                 db    ? ;
.bss:0040820A                 db    ? ;
.bss:0040820B                 db    ? ;
.bss:0040820C                 db    ? ;
.bss:0040820D                 db    ? ;
.bss:0040820E                 db    ? ;
.bss:0040820F                 db    ? ;
.bss:00408210                 db    ? ;
.bss:00408211                 db    ? ;
.bss:00408212                 db    ? ;
.bss:00408213                 db    ? ;
.bss:00408214                 db    ? ;
.bss:00408215                 db    ? ;
.bss:00408216                 db    ? ;
.bss:00408217                 db    ? ;
.bss:00408218                 db    ? ;
.bss:00408219                 db    ? ;
.bss:0040821A                 db    ? ;
.bss:0040821B                 db    ? ;
.bss:0040821C                 db    ? ;
.bss:0040821D                 db    ? ;
.bss:0040821E                 db    ? ;
.bss:0040821F                 db    ? ;
.bss:00408220                 db    ? ;
.bss:00408221                 db    ? ;
.bss:00408222                 db    ? ;
.bss:00408223                 db    ? ;
.bss:00408224                 db    ? ;
.bss:00408225                 db    ? ;
.bss:00408226                 db    ? ;
.bss:00408227                 db    ? ;
.bss:00408228                 db    ? ;
.bss:00408229                 db    ? ;
.bss:0040822A                 db    ? ;
.bss:0040822B                 db    ? ;
.bss:0040822C                 db    ? ;
.bss:0040822D                 db    ? ;
.bss:0040822E                 db    ? ;
.bss:0040822F                 db    ? ;
.bss:00408230                 db    ? ;
.bss:00408231                 db    ? ;
.bss:00408232                 db    ? ;
.bss:00408233                 db    ? ;
.bss:00408234                 db    ? ;
.bss:00408235                 db    ? ;
.bss:00408236                 db    ? ;
.bss:00408237                 db    ? ;
.bss:00408238                 db    ? ;
.bss:00408239                 db    ? ;
.bss:0040823A                 db    ? ;
.bss:0040823B                 db    ? ;
.bss:0040823C                 db    ? ;
.bss:0040823D                 db    ? ;
.bss:0040823E                 db    ? ;
.bss:0040823F                 db    ? ;
.bss:00408240                 db    ? ;
.bss:00408241                 db    ? ;
.bss:00408242                 db    ? ;
.bss:00408243                 db    ? ;
.bss:00408244                 db    ? ;
.bss:00408245                 db    ? ;
.bss:00408246                 db    ? ;
.bss:00408247                 db    ? ;
.bss:00408248                 db    ? ;
.bss:00408249                 db    ? ;
.bss:0040824A                 db    ? ;
.bss:0040824B                 db    ? ;
.bss:0040824C                 db    ? ;
.bss:0040824D                 db    ? ;
.bss:0040824E                 db    ? ;
.bss:0040824F                 db    ? ;
.bss:00408250                 db    ? ;
.bss:00408251                 db    ? ;
.bss:00408252                 db    ? ;
.bss:00408253                 db    ? ;
.bss:00408254                 db    ? ;
.bss:00408255                 db    ? ;
.bss:00408256                 db    ? ;
.bss:00408257                 db    ? ;
.bss:00408258                 db    ? ;
.bss:00408259                 db    ? ;
.bss:0040825A                 db    ? ;
.bss:0040825B                 db    ? ;
.bss:0040825C                 db    ? ;
.bss:0040825D                 db    ? ;
.bss:0040825E                 db    ? ;
.bss:0040825F                 db    ? ;
.bss:00408260                 db    ? ;
.bss:00408261                 db    ? ;
.bss:00408262                 db    ? ;
.bss:00408263                 db    ? ;
.bss:00408264                 db    ? ;
.bss:00408265                 db    ? ;
.bss:00408266                 db    ? ;
.bss:00408267                 db    ? ;
.bss:00408268                 db    ? ;
.bss:00408269                 db    ? ;
.bss:0040826A                 db    ? ;
.bss:0040826B                 db    ? ;
.bss:0040826C                 db    ? ;
.bss:0040826D                 db    ? ;
.bss:0040826E                 db    ? ;
.bss:0040826F                 db    ? ;
.bss:00408270                 db    ? ;
.bss:00408271                 db    ? ;
.bss:00408272                 db    ? ;
.bss:00408273                 db    ? ;
.bss:00408274                 db    ? ;
.bss:00408275                 db    ? ;
.bss:00408276                 db    ? ;
.bss:00408277                 db    ? ;
.bss:00408278                 db    ? ;
.bss:00408279                 db    ? ;
.bss:0040827A                 db    ? ;
.bss:0040827B                 db    ? ;
.bss:0040827C                 db    ? ;
.bss:0040827D                 db    ? ;
.bss:0040827E                 db    ? ;
.bss:0040827F                 db    ? ;
.bss:00408280                 db    ? ;
.bss:00408281                 db    ? ;
.bss:00408282                 db    ? ;
.bss:00408283                 db    ? ;
.bss:00408284                 db    ? ;
.bss:00408285                 db    ? ;
.bss:00408286                 db    ? ;
.bss:00408287                 db    ? ;
.bss:00408288                 db    ? ;
.bss:00408289                 db    ? ;
.bss:0040828A                 db    ? ;
.bss:0040828B                 db    ? ;
.bss:0040828C                 db    ? ;
.bss:0040828D                 db    ? ;
.bss:0040828E                 db    ? ;
.bss:0040828F                 db    ? ;
.bss:00408290                 db    ? ;
.bss:00408291                 db    ? ;
.bss:00408292                 db    ? ;
.bss:00408293                 db    ? ;
.bss:00408294                 db    ? ;
.bss:00408295                 db    ? ;
.bss:00408296                 db    ? ;
.bss:00408297                 db    ? ;
.bss:00408298                 db    ? ;
.bss:00408299                 db    ? ;
.bss:0040829A                 db    ? ;
.bss:0040829B                 db    ? ;
.bss:0040829C                 db    ? ;
.bss:0040829D                 db    ? ;
.bss:0040829E                 db    ? ;
.bss:0040829F                 db    ? ;
.bss:004082A0                 db    ? ;
.bss:004082A1                 db    ? ;
.bss:004082A2                 db    ? ;
.bss:004082A3                 db    ? ;
.bss:004082A4                 db    ? ;
.bss:004082A5                 db    ? ;
.bss:004082A6                 db    ? ;
.bss:004082A7                 db    ? ;
.bss:004082A8                 db    ? ;
.bss:004082A9                 db    ? ;
.bss:004082AA                 db    ? ;
.bss:004082AB                 db    ? ;
.bss:004082AC                 db    ? ;
.bss:004082AD                 db    ? ;
.bss:004082AE                 db    ? ;
.bss:004082AF                 db    ? ;
.bss:004082B0                 db    ? ;
.bss:004082B1                 db    ? ;
.bss:004082B2                 db    ? ;
.bss:004082B3                 db    ? ;
.bss:004082B4                 db    ? ;
.bss:004082B5                 db    ? ;
.bss:004082B6                 db    ? ;
.bss:004082B7                 db    ? ;
.bss:004082B8                 db    ? ;
.bss:004082B9                 db    ? ;
.bss:004082BA                 db    ? ;
.bss:004082BB                 db    ? ;
.bss:004082BC                 db    ? ;
.bss:004082BD                 db    ? ;
.bss:004082BE                 db    ? ;
.bss:004082BF                 db    ? ;
.bss:004082C0                 db    ? ;
.bss:004082C1                 db    ? ;
.bss:004082C2                 db    ? ;
.bss:004082C3                 db    ? ;
.bss:004082C4                 db    ? ;
.bss:004082C5                 db    ? ;
.bss:004082C6                 db    ? ;
.bss:004082C7                 db    ? ;
.bss:004082C8                 db    ? ;
.bss:004082C9                 db    ? ;
.bss:004082CA                 db    ? ;
.bss:004082CB                 db    ? ;
.bss:004082CC                 db    ? ;
.bss:004082CD                 db    ? ;
.bss:004082CE                 db    ? ;
.bss:004082CF                 db    ? ;
.bss:004082D0                 db    ? ;
.bss:004082D1                 db    ? ;
.bss:004082D2                 db    ? ;
.bss:004082D3                 db    ? ;
.bss:004082D4                 db    ? ;
.bss:004082D5                 db    ? ;
.bss:004082D6                 db    ? ;
.bss:004082D7                 db    ? ;
.bss:004082D8                 db    ? ;
.bss:004082D9                 db    ? ;
.bss:004082DA                 db    ? ;
.bss:004082DB                 db    ? ;
.bss:004082DC                 db    ? ;
.bss:004082DD                 db    ? ;
.bss:004082DE                 db    ? ;
.bss:004082DF                 db    ? ;
.bss:004082E0                 db    ? ;
.bss:004082E1                 db    ? ;
.bss:004082E2                 db    ? ;
.bss:004082E3                 db    ? ;
.bss:004082E4                 db    ? ;
.bss:004082E5                 db    ? ;
.bss:004082E6                 db    ? ;
.bss:004082E7                 db    ? ;
.bss:004082E8                 db    ? ;
.bss:004082E9                 db    ? ;
.bss:004082EA                 db    ? ;
.bss:004082EB                 db    ? ;
.bss:004082EC                 db    ? ;
.bss:004082ED                 db    ? ;
.bss:004082EE                 db    ? ;
.bss:004082EF                 db    ? ;
.bss:004082F0                 db    ? ;
.bss:004082F1                 db    ? ;
.bss:004082F2                 db    ? ;
.bss:004082F3                 db    ? ;
.bss:004082F4                 db    ? ;
.bss:004082F5                 db    ? ;
.bss:004082F6                 db    ? ;
.bss:004082F7                 db    ? ;
.bss:004082F8                 db    ? ;
.bss:004082F9                 db    ? ;
.bss:004082FA                 db    ? ;
.bss:004082FB                 db    ? ;
.bss:004082FC                 db    ? ;
.bss:004082FD                 db    ? ;
.bss:004082FE                 db    ? ;
.bss:004082FF                 db    ? ;
.bss:00408300                 db    ? ;
.bss:00408301                 db    ? ;
.bss:00408302                 db    ? ;
.bss:00408303                 db    ? ;
.bss:00408304                 db    ? ;
.bss:00408305                 db    ? ;
.bss:00408306                 db    ? ;
.bss:00408307                 db    ? ;
.bss:00408308                 db    ? ;
.bss:00408309                 db    ? ;
.bss:0040830A                 db    ? ;
.bss:0040830B                 db    ? ;
.bss:0040830C                 db    ? ;
.bss:0040830D                 db    ? ;
.bss:0040830E                 db    ? ;
.bss:0040830F                 db    ? ;
.bss:00408310                 db    ? ;
.bss:00408311                 db    ? ;
.bss:00408312                 db    ? ;
.bss:00408313                 db    ? ;
.bss:00408314                 db    ? ;
.bss:00408315                 db    ? ;
.bss:00408316                 db    ? ;
.bss:00408317                 db    ? ;
.bss:00408318                 db    ? ;
.bss:00408319                 db    ? ;
.bss:0040831A                 db    ? ;
.bss:0040831B                 db    ? ;
.bss:0040831C                 db    ? ;
.bss:0040831D                 db    ? ;
.bss:0040831E                 db    ? ;
.bss:0040831F                 db    ? ;
.bss:00408320                 db    ? ;
.bss:00408321                 db    ? ;
.bss:00408322                 db    ? ;
.bss:00408323                 db    ? ;
.bss:00408324                 db    ? ;
.bss:00408325                 db    ? ;
.bss:00408326                 db    ? ;
.bss:00408327                 db    ? ;
.bss:00408328                 db    ? ;
.bss:00408329                 db    ? ;
.bss:0040832A                 db    ? ;
.bss:0040832B                 db    ? ;
.bss:0040832C                 db    ? ;
.bss:0040832D                 db    ? ;
.bss:0040832E                 db    ? ;
.bss:0040832F                 db    ? ;
.bss:00408330 dword_408330    dd ?                    ; DATA XREF: sub_401380+2E↑w
.bss:00408330                                         ; sub_401380+19F↑r ...
.bss:00408334                 db    ? ;
.bss:00408335                 db    ? ;
.bss:00408336                 db    ? ;
.bss:00408337                 db    ? ;
.bss:00408338                 db    ? ;
.bss:00408339                 db    ? ;
.bss:0040833A                 db    ? ;
.bss:0040833B                 db    ? ;
.bss:0040833C                 db    ? ;
.bss:0040833D                 db    ? ;
.bss:0040833E                 db    ? ;
.bss:0040833F                 db    ? ;
.bss:00408340                 db    ? ;
.bss:00408341                 db    ? ;
.bss:00408342                 db    ? ;
.bss:00408343                 db    ? ;
.bss:00408344                 db    ? ;
.bss:00408345                 db    ? ;
.bss:00408346                 db    ? ;
.bss:00408347                 db    ? ;
.bss:00408348                 db    ? ;
.bss:00408349                 db    ? ;
.bss:0040834A                 db    ? ;
.bss:0040834B                 db    ? ;
.bss:0040834C                 db    ? ;
.bss:0040834D                 db    ? ;
.bss:0040834E                 db    ? ;
.bss:0040834F                 db    ? ;
.bss:00408350 dword_408350    dd ?                    ; DATA XREF: sub_402C80+71↑w
.bss:00408350                                         ; .text:00402D81↑w
.bss:00408354                 align 10h
.bss:00408360 dword_408360    dd ?                    ; CODE XREF: sub_405054+63↑p
.bss:00408360                                         ; DATA XREF: sub_404F50+1E↑r ...
.bss:00408364                 align 10h
.bss:00408370 dword_408370    dd ?                    ; DATA XREF: sub_404F50+4E↑w
.bss:00408370                                         ; sub_405054+AB↑w
.bss:00408374                 db    ? ;
.bss:00408375                 db    ? ;
.bss:00408376                 db    ? ;
.bss:00408377                 db    ? ;
.bss:00408378                 db    ? ;
.bss:00408379                 db    ? ;
.bss:0040837A                 db    ? ;
.bss:0040837B                 db    ? ;
.bss:0040837C                 db    ? ;
.bss:0040837D                 db    ? ;
.bss:0040837E                 db    ? ;
.bss:0040837F                 db    ? ;
.bss:00408380                 db    ? ;
.bss:00408381                 db    ? ;
.bss:00408382                 db    ? ;
.bss:00408383                 db    ? ;
.bss:00408384                 db    ? ;
.bss:00408385                 db    ? ;
.bss:00408386                 db    ? ;
.bss:00408387                 db    ? ;
.bss:00408388                 db    ? ;
.bss:00408389                 db    ? ;
.bss:0040838A                 db    ? ;
.bss:0040838B                 db    ? ;
.bss:0040838C                 db    ? ;
.bss:0040838D                 db    ? ;
.bss:0040838E                 db    ? ;
.bss:0040838F                 db    ? ;
.bss:00408390                 db    ? ;
.bss:00408391                 db    ? ;
.bss:00408392                 db    ? ;
.bss:00408393                 db    ? ;
.bss:00408394                 db    ? ;
.bss:00408395                 db    ? ;
.bss:00408396                 db    ? ;
.bss:00408397                 db    ? ;
.bss:00408398                 db    ? ;
.bss:00408399                 db    ? ;
.bss:0040839A                 db    ? ;
.bss:0040839B                 db    ? ;
.bss:0040839C                 db    ? ;
.bss:0040839D                 db    ? ;
.bss:0040839E                 db    ? ;
.bss:0040839F                 db    ? ;
.bss:004083A0 dword_4083A0    dd ?                    ; DATA XREF: sub_405054+13↑r
.bss:004083A4                 align 1000h
.bss:004083A4 _bss            ends
.bss:004083A4
.idata:00409000 ; Section 4. (virtual address 00009000)
.idata:00409000 ; Virtual size                  : 00000770 (   1904.)
.idata:00409000 ; Section size in file          : 00000800 (   2048.)
.idata:00409000 ; Offset to raw data for section: 00006600
.idata:00409000 ; Flags C0000040: Data Readable Writable
.idata:00409000 ; Alignment     : default
.idata:00409000 ; ===========================================================================
.idata:00409000
.idata:00409000 ; Segment type: Externs
.idata:00409000 ; _idata
.idata:00409000
.idata:00409001
.idata:004091A8 ;
.idata:004091A8 ; Imports from libintl3.dll
.idata:004091A8 ;
.idata:004091A8                 extrn __imp_libintl_bindtextdomain:dword
.idata:004091A8                                         ; CODE XREF: sub_401380+48↑p
.idata:004091A8                                         ; DATA XREF: sub_401380+48↑r ...
.idata:004091AC                 extrn libintl_gettext:dword
.idata:004091AC                                         ; CODE XREF: sub_401380+16A↑p
.idata:004091AC                                         ; sub_401380+193↑p ...
.idata:004091B0                 extrn libintl_ngettext:dword
.idata:004091B0                                         ; CODE XREF: sub_401940+200↑p
.idata:004091B0                                         ; sub_401940+248↑p
.idata:004091B0                                         ; DATA XREF: ...
.idata:004091B4                 extrn libintl_textdomain:dword
.idata:004091B4                                         ; CODE XREF: sub_401380+55↑p
.idata:004091B4                                         ; DATA XREF: sub_401380+55↑r ...
.idata:004091B8
.idata:004091C0 ;
.idata:004091C0 ; Imports from KERNEL32.dll
.idata:004091C0 ;
.idata:004091C0 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004091C0                 extrn __imp_ExitProcess:dword
.idata:004091C0                                         ; DATA XREF: ExitProcess↑r
.idata:004091C4 ; DWORD (__stdcall *GetLastError)()
.idata:004091C4                 extrn __imp_GetLastError:dword
.idata:004091C4                                         ; DATA XREF: GetLastError↑r
.idata:004091C8 ; BOOL (__stdcall *LockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.idata:004091C8                 extrn __imp_LockFile:dword
.idata:004091C8                                         ; DATA XREF: LockFile↑r
.idata:004091CC ; BOOL (__stdcall *SetEndOfFile)(HANDLE hFile)
.idata:004091CC                 extrn __imp_SetEndOfFile:dword
.idata:004091CC                                         ; DATA XREF: SetEndOfFile↑r
.idata:004091D0 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:004091D0                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:004091D0                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:004091D4 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:004091D4                 extrn __imp_UnlockFile:dword
.idata:004091D4                                         ; DATA XREF: UnlockFile↑r
.idata:004091D8
.idata:004091E0 ;
.idata:004091E0 ; Imports from msvcrt.dll
.idata:004091E0 ;
.idata:004091E0 ; int (__cdecl *_dup)(int FileHandle)
.idata:004091E0                 extrn __imp__dup:dword  ; DATA XREF: _dup↑r
.idata:004091E4
.idata:004091EC ;
.idata:004091EC ; Imports from MSVCP60.DLL
.idata:004091EC ;
.idata:004091EC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004091EC                 extrn __imp_mbrtowc:dword
.idata:004091EC                                         ; DATA XREF: mbrtowc↑r
.idata:004091F0
.idata:004091F8 ;
.idata:004091F8 ; Imports from msvcrt.dll
.idata:004091F8 ;
.idata:004091F8                 extrn __imp___getmainargs:dword
.idata:004091F8                                         ; DATA XREF: __getmainargs↑r
.idata:004091FC ; int _mb_cur_max
.idata:004091FC                 extrn __mb_cur_max:dword
.idata:004091FC                                         ; DATA XREF: sub_403680+7↑r
.idata:004091FC                                         ; sub_403680+5F3↑r
.idata:00409200 ; char ***(__cdecl *__p__environ)()
.idata:00409200                 extrn __imp___p__environ:dword
.idata:00409200                                         ; DATA XREF: __p__environ↑r
.idata:00409204 ; int *(__cdecl *__p__fmode)()
.idata:00409204                 extrn __imp___p__fmode:dword
.idata:00409204                                         ; DATA XREF: __p__fmode↑r
.idata:00409208                 extrn __pioinfo:dword   ; DATA XREF: sub_406270:loc_4062D8↑r
.idata:00409208                                         ; sub_406270:loc_406303↑r ...
.idata:0040920C ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040920C                 extrn __set_app_type:dword
.idata:0040920C                                         ; CODE XREF: start+D↑p
.idata:0040920C                                         ; .text:0040102D↑p
.idata:0040920C                                         ; DATA XREF: ...
.idata:00409210                 extrn __imp__assert:dword
.idata:00409210                                         ; DATA XREF: _assert↑r
.idata:00409214 ; void (__cdecl *_cexit)()
.idata:00409214                 extrn __imp__cexit:dword
.idata:00409214                                         ; DATA XREF: _cexit↑r
.idata:00409218 ; int (__cdecl *_close)(int FileHandle)
.idata:00409218                 extrn __imp__close:dword
.idata:00409218                                         ; DATA XREF: _close↑r
.idata:0040921C ; int *(__cdecl *_errno)()
.idata:0040921C                 extrn __imp__errno:dword
.idata:0040921C                                         ; DATA XREF: _errno↑r
.idata:00409220 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:00409220                 extrn __imp__filelengthi64:dword
.idata:00409220                                         ; DATA XREF: _filelengthi64↑r
.idata:00409224 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00409224                 extrn __imp__flsbuf:dword
.idata:00409224                                         ; DATA XREF: _flsbuf↑r
.idata:00409228 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:00409228                 extrn __imp__get_osfhandle:dword
.idata:00409228                                         ; DATA XREF: _get_osfhandle↑r
.idata:0040922C ; FILE iob[]
.idata:0040922C                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040922C                                         ; sub_401080+75↑r ...
.idata:00409230 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00409230                 extrn __imp__isctype:dword
.idata:00409230                                         ; DATA XREF: _isctype↑r
.idata:00409234 ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:00409234                 extrn __imp__lseeki64:dword
.idata:00409234                                         ; DATA XREF: _lseeki64↑r
.idata:00409238 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00409238                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00409238                                         ; DATA XREF: .text:0040106C↑r
.idata:0040923C ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0040923C                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:00409240 ; const unsigned __int16 *pctype
.idata:00409240                 extrn _pctype:dword     ; DATA XREF: sub_403680:loc_403D74↑r
.idata:00409244 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:00409244                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:00409248 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00409248                 extrn __imp__setmode:dword
.idata:00409248                                         ; DATA XREF: _setmode↑r
.idata:0040924C ; char *(__cdecl *_strdup)(const char *String)
.idata:0040924C                 extrn __imp__strdup:dword
.idata:0040924C                                         ; DATA XREF: _strdup↑r
.idata:00409250 ; int (__cdecl *_write)(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.idata:00409250                 extrn __imp__write:dword
.idata:00409250                                         ; DATA XREF: _write↑r
.idata:00409254 ; void (__cdecl __noreturn *abort)()
.idata:00409254                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00409258 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00409258                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00409258                                         ; DATA XREF: sub_401040+C↑r
.idata:0040925C ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0040925C                 extrn __imp_calloc:dword
.idata:0040925C                                         ; DATA XREF: calloc↑r
.idata:00409260 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00409260                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00409264 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00409264                 extrn __imp_fclose:dword
.idata:00409264                                         ; DATA XREF: fclose↑r
.idata:00409268 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00409268                 extrn __imp_fflush:dword
.idata:00409268                                         ; DATA XREF: fflush↑r
.idata:0040926C ; char *(__cdecl *fgets)(char *Buffer, int MaxCount, FILE *Stream)
.idata:0040926C                 extrn __imp_fgets:dword ; DATA XREF: fgets↑r
.idata:00409270 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00409270                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00409274 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00409274                 extrn __imp_fprintf:dword
.idata:00409274                                         ; DATA XREF: fprintf↑r
.idata:00409278 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00409278                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0040927C ; void (__cdecl *free)(void *Block)
.idata:0040927C                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00409280 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00409280                 extrn __imp_getenv:dword
.idata:00409280                                         ; DATA XREF: getenv↑r
.idata:00409284 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00409284                 extrn __imp_iswctype:dword
.idata:00409284                                         ; DATA XREF: iswctype↑r
.idata:00409288 ; struct tm *(__cdecl *localtime)(const __time32_t *const Time)
.idata:00409288                 extrn __imp_localtime:dword
.idata:00409288                                         ; DATA XREF: localtime↑r
.idata:0040928C ; void *(__cdecl *malloc)(size_t Size)
.idata:0040928C                 extrn __imp_malloc:dword
.idata:0040928C                                         ; DATA XREF: malloc↑r
.idata:00409290 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00409290                 extrn __imp_memcpy:dword
.idata:00409290                                         ; DATA XREF: memcpy↑r
.idata:00409294 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00409294                 extrn __imp_memset:dword
.idata:00409294                                         ; DATA XREF: memset↑r
.idata:00409298 ; int (*printf)(const char *const Format, ...)
.idata:00409298                 extrn __imp_printf:dword
.idata:00409298                                         ; DATA XREF: printf↑r
.idata:0040929C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040929C                 extrn __imp_realloc:dword
.idata:0040929C                                         ; DATA XREF: realloc↑r
.idata:004092A0 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004092A0                 extrn __imp_setlocale:dword
.idata:004092A0                                         ; DATA XREF: setlocale↑r
.idata:004092A4 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004092A4                 extrn __imp_signal:dword
.idata:004092A4                                         ; DATA XREF: signal↑r
.idata:004092A8 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004092A8                 extrn __imp_strchr:dword
.idata:004092A8                                         ; DATA XREF: strchr↑r
.idata:004092AC ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004092AC                 extrn __imp_strcmp:dword
.idata:004092AC                                         ; DATA XREF: strcmp↑r
.idata:004092B0 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004092B0                 extrn __imp_strerror:dword
.idata:004092B0                                         ; DATA XREF: strerror↑r
.idata:004092B4 ; size_t (__cdecl *strlen)(const char *Str)
.idata:004092B4                 extrn __imp_strlen:dword
.idata:004092B4                                         ; DATA XREF: strlen↑r
.idata:004092B8 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004092B8                 extrn __imp_strncmp:dword
.idata:004092B8                                         ; DATA XREF: strncmp↑r
.idata:004092BC ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:004092BC                 extrn __imp_strncpy:dword
.idata:004092BC                                         ; DATA XREF: strncpy↑r
.idata:004092C0 ; double (__cdecl *strtod)(const char *String, char **EndPtr)
.idata:004092C0                 extrn __imp_strtod:dword
.idata:004092C0                                         ; DATA XREF: strtod↑r
.idata:004092C4 ; __time32_t (__cdecl *time)(__time32_t *const Time)
.idata:004092C4                 extrn __imp_time:dword  ; DATA XREF: time↑r
.idata:004092C8 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004092C8                 extrn __imp_vfprintf:dword
.idata:004092C8                                         ; DATA XREF: vfprintf↑r
.idata:004092CC
.idata:004092CC
.idata:004092CC
.idata:004092CC                 end start
